head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2015.12.23.05.17.25;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.50;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.14;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.51;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.18;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.02;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.03;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.23;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.18.25;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.20;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.14.30;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.51.21;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@"""llvm

Tool-specific initialization for LLVM

"""

#
# Copyright (c) 2009 VMware, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

import os
import os.path
import re
import sys
import distutils.version

import SCons.Errors
import SCons.Util


def generate(env):
    env['llvm'] = False

    try:
        llvm_dir = os.environ['LLVM']
    except KeyError:
        # Do nothing -- use the system headers/libs
        llvm_dir = None
    else:
        if not os.path.isdir(llvm_dir):
            raise SCons.Errors.InternalError, "Specified LLVM directory not found"

        if env['debug']:
            llvm_subdir = 'Debug'
        else:
            llvm_subdir = 'Release'

        llvm_bin_dir = os.path.join(llvm_dir, llvm_subdir, 'bin')
        if not os.path.isdir(llvm_bin_dir):
            llvm_bin_dir = os.path.join(llvm_dir, 'bin')
            if not os.path.isdir(llvm_bin_dir):
                raise SCons.Errors.InternalError, "LLVM binary directory not found"

        env.PrependENVPath('PATH', llvm_bin_dir)

    if env['platform'] == 'windows':
        # XXX: There is no llvm-config on Windows, so assume a standard layout
        if llvm_dir is None:
            print 'scons: LLVM environment variable must be specified when building for windows'
            return

        # Try to determine the LLVM version from llvm/Config/config.h
        llvm_config = os.path.join(llvm_dir, 'include/llvm/Config/config.h')
        if not os.path.exists(llvm_config):
            print 'scons: could not find %s' % llvm_config
            return
        llvm_version_re = re.compile(r'^#define PACKAGE_VERSION "([^"]*)"')
        llvm_version = None
        for line in open(llvm_config, 'rt'):
            mo = llvm_version_re.match(line)
            if mo:
                llvm_version = mo.group(1)
                llvm_version = distutils.version.LooseVersion(llvm_version)
                break
        if llvm_version is None:
            print 'scons: could not determine the LLVM version from %s' % llvm_config
            return

        env.Prepend(CPPPATH = [os.path.join(llvm_dir, 'include')])
        env.AppendUnique(CPPDEFINES = [
            '__STDC_LIMIT_MACROS', 
            '__STDC_CONSTANT_MACROS',
            'HAVE_STDINT_H',
        ])
        env.Prepend(LIBPATH = [os.path.join(llvm_dir, 'lib')])
        if llvm_version >= distutils.version.LooseVersion('3.2'):
            # 3.2
            env.Prepend(LIBS = [
                'LLVMBitWriter', 'LLVMX86Disassembler', 'LLVMX86AsmParser',
                'LLVMX86CodeGen', 'LLVMX86Desc', 'LLVMSelectionDAG',
                'LLVMAsmPrinter', 'LLVMMCParser', 'LLVMX86AsmPrinter',
                'LLVMX86Utils', 'LLVMX86Info', 'LLVMJIT',
                'LLVMExecutionEngine', 'LLVMCodeGen', 'LLVMScalarOpts',
                'LLVMInstCombine', 'LLVMTransformUtils', 'LLVMipa',
                'LLVMAnalysis', 'LLVMTarget', 'LLVMMC', 'LLVMCore',
                'LLVMSupport', 'LLVMRuntimeDyld', 'LLVMObject'
            ])
        elif llvm_version >= distutils.version.LooseVersion('3.0'):
            # 3.0
            env.Prepend(LIBS = [
                'LLVMBitWriter', 'LLVMX86Disassembler', 'LLVMX86AsmParser',
                'LLVMX86CodeGen', 'LLVMX86Desc', 'LLVMSelectionDAG',
                'LLVMAsmPrinter', 'LLVMMCParser', 'LLVMX86AsmPrinter',
                'LLVMX86Utils', 'LLVMX86Info', 'LLVMJIT',
                'LLVMExecutionEngine', 'LLVMCodeGen', 'LLVMScalarOpts',
                'LLVMInstCombine', 'LLVMTransformUtils', 'LLVMipa',
                'LLVMAnalysis', 'LLVMTarget', 'LLVMMC', 'LLVMCore',
                'LLVMSupport'
            ])
        elif llvm_version >= distutils.version.LooseVersion('2.9'):
            # 2.9
            env.Prepend(LIBS = [
                'LLVMObject', 'LLVMMCJIT', 'LLVMMCDisassembler',
                'LLVMLinker', 'LLVMipo', 'LLVMInterpreter',
                'LLVMInstrumentation', 'LLVMJIT', 'LLVMExecutionEngine',
                'LLVMBitWriter', 'LLVMX86Disassembler', 'LLVMX86AsmParser',
                'LLVMMCParser', 'LLVMX86AsmPrinter', 'LLVMX86CodeGen',
                'LLVMSelectionDAG', 'LLVMX86Utils', 'LLVMX86Info', 'LLVMAsmPrinter',
                'LLVMCodeGen', 'LLVMScalarOpts', 'LLVMInstCombine',
                'LLVMTransformUtils', 'LLVMipa', 'LLVMAsmParser',
                'LLVMArchive', 'LLVMBitReader', 'LLVMAnalysis', 'LLVMTarget',
                'LLVMCore', 'LLVMMC', 'LLVMSupport',
            ])
        elif llvm_version >= distutils.version.LooseVersion('2.7'):
            # 2.7
            env.Prepend(LIBS = [
                'LLVMLinker', 'LLVMipo', 'LLVMInterpreter',
                'LLVMInstrumentation', 'LLVMJIT', 'LLVMExecutionEngine',
                'LLVMBitWriter', 'LLVMX86Disassembler', 'LLVMX86AsmParser',
                'LLVMMCParser', 'LLVMX86AsmPrinter', 'LLVMX86CodeGen',
                'LLVMSelectionDAG', 'LLVMX86Info', 'LLVMAsmPrinter',
                'LLVMCodeGen', 'LLVMScalarOpts', 'LLVMInstCombine',
                'LLVMTransformUtils', 'LLVMipa', 'LLVMAsmParser',
                'LLVMArchive', 'LLVMBitReader', 'LLVMAnalysis', 'LLVMTarget',
                'LLVMMC', 'LLVMCore', 'LLVMSupport', 'LLVMSystem',
            ])
        else:
            # 2.6
            env.Prepend(LIBS = [
                'LLVMX86AsmParser', 'LLVMX86AsmPrinter', 'LLVMX86CodeGen',
                'LLVMX86Info', 'LLVMLinker', 'LLVMipo', 'LLVMInterpreter',
                'LLVMInstrumentation', 'LLVMJIT', 'LLVMExecutionEngine',
                'LLVMDebugger', 'LLVMBitWriter', 'LLVMAsmParser',
                'LLVMArchive', 'LLVMBitReader', 'LLVMSelectionDAG',
                'LLVMAsmPrinter', 'LLVMCodeGen', 'LLVMScalarOpts',
                'LLVMTransformUtils', 'LLVMipa', 'LLVMAnalysis',
                'LLVMTarget', 'LLVMMC', 'LLVMCore', 'LLVMSupport',
                'LLVMSystem',
            ])
        env.Append(LIBS = [
            'imagehlp',
            'psapi',
            'shell32',
            'advapi32'
        ])
        if env['msvc']:
            # Some of the LLVM C headers use the inline keyword without
            # defining it.
            env.Append(CPPDEFINES = [('inline', '__inline')])
            if env['build'] in ('debug', 'checked'):
                # LLVM libraries are static, build with /MT, and they
                # automatically link agains LIBCMT. When we're doing a
                # debug build we'll be linking against LIBCMTD, so disable
                # that.
                env.Append(LINKFLAGS = ['/nodefaultlib:LIBCMT'])
    else:
        if not env.Detect('llvm-config'):
            print 'scons: llvm-config script not found'
            return

        llvm_version = env.backtick('llvm-config --version').rstrip()
        llvm_version = distutils.version.LooseVersion(llvm_version)

        try:
            # Treat --cppflags specially to prevent NDEBUG from disabling
            # assertion failures in debug builds.
            cppflags = env.ParseFlags('!llvm-config --cppflags')
            try:
                cppflags['CPPDEFINES'].remove('NDEBUG')
            except ValueError:
                pass
            env.MergeFlags(cppflags)

            # Match llvm --fno-rtti flag
            cxxflags = env.backtick('llvm-config --cxxflags').split()
            if '-fno-rtti' in cxxflags:
                env.Append(CXXFLAGS = ['-fno-rtti'])

            components = ['engine', 'bitwriter', 'x86asmprinter']

            if llvm_version >= distutils.version.LooseVersion('3.1'):
                components.append('mcjit')

            env.ParseConfig('llvm-config --libs ' + ' '.join(components))
            env.ParseConfig('llvm-config --ldflags')
            if llvm_version >= distutils.version.LooseVersion('3.5'):
                env.ParseConfig('llvm-config --system-libs')
                env.Append(CXXFLAGS = ['-std=c++11'])
        except OSError:
            print 'scons: llvm-config version %s failed' % llvm_version
            return

    assert llvm_version is not None
    env['llvm'] = True

    print 'scons: Found LLVM version %s' % llvm_version
    env['LLVM_VERSION'] = llvm_version

    # Define HAVE_LLVM macro with the major/minor version number (e.g., 0x0206 for 2.6)
    llvm_version_major = int(llvm_version.version[0])
    llvm_version_minor = int(llvm_version.version[1])
    llvm_version_hex = '0x%02x%02x' % (llvm_version_major, llvm_version_minor)
    env.Prepend(CPPDEFINES = [('HAVE_LLVM', llvm_version_hex)])

def exists(env):
    return True

# vim:set ts=4 sw=4 et:
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a39 3
required_llvm_version = '3.3'


a86 3
        if llvm_version < distutils.version.LooseVersion(required_llvm_version):
            print 'scons: LLVM version %s found, but %s is required' % (llvm_version, required_llvm_version)
            return
d95 1
a95 1
        if True:
d101 1
a101 1
                'LLVMX86Utils', 'LLVMX86Info', 'LLVMMCJIT', 'LLVMJIT',
d107 52
a182 4
        if llvm_version < distutils.version.LooseVersion(required_llvm_version):
            print 'scons: LLVM version %s found, but %s is required' % (llvm_version, required_llvm_version)
            return

d198 4
a201 1
            components = ['engine', 'mcjit', 'bitwriter', 'x86asmprinter']
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d40 3
d90 3
d101 1
a101 1
        if llvm_version >= distutils.version.LooseVersion('3.2'):
d107 1
a107 1
                'LLVMX86Utils', 'LLVMX86Info', 'LLVMJIT',
a112 52
        elif llvm_version >= distutils.version.LooseVersion('3.0'):
            # 3.0
            env.Prepend(LIBS = [
                'LLVMBitWriter', 'LLVMX86Disassembler', 'LLVMX86AsmParser',
                'LLVMX86CodeGen', 'LLVMX86Desc', 'LLVMSelectionDAG',
                'LLVMAsmPrinter', 'LLVMMCParser', 'LLVMX86AsmPrinter',
                'LLVMX86Utils', 'LLVMX86Info', 'LLVMJIT',
                'LLVMExecutionEngine', 'LLVMCodeGen', 'LLVMScalarOpts',
                'LLVMInstCombine', 'LLVMTransformUtils', 'LLVMipa',
                'LLVMAnalysis', 'LLVMTarget', 'LLVMMC', 'LLVMCore',
                'LLVMSupport'
            ])
        elif llvm_version >= distutils.version.LooseVersion('2.9'):
            # 2.9
            env.Prepend(LIBS = [
                'LLVMObject', 'LLVMMCJIT', 'LLVMMCDisassembler',
                'LLVMLinker', 'LLVMipo', 'LLVMInterpreter',
                'LLVMInstrumentation', 'LLVMJIT', 'LLVMExecutionEngine',
                'LLVMBitWriter', 'LLVMX86Disassembler', 'LLVMX86AsmParser',
                'LLVMMCParser', 'LLVMX86AsmPrinter', 'LLVMX86CodeGen',
                'LLVMSelectionDAG', 'LLVMX86Utils', 'LLVMX86Info', 'LLVMAsmPrinter',
                'LLVMCodeGen', 'LLVMScalarOpts', 'LLVMInstCombine',
                'LLVMTransformUtils', 'LLVMipa', 'LLVMAsmParser',
                'LLVMArchive', 'LLVMBitReader', 'LLVMAnalysis', 'LLVMTarget',
                'LLVMCore', 'LLVMMC', 'LLVMSupport',
            ])
        elif llvm_version >= distutils.version.LooseVersion('2.7'):
            # 2.7
            env.Prepend(LIBS = [
                'LLVMLinker', 'LLVMipo', 'LLVMInterpreter',
                'LLVMInstrumentation', 'LLVMJIT', 'LLVMExecutionEngine',
                'LLVMBitWriter', 'LLVMX86Disassembler', 'LLVMX86AsmParser',
                'LLVMMCParser', 'LLVMX86AsmPrinter', 'LLVMX86CodeGen',
                'LLVMSelectionDAG', 'LLVMX86Info', 'LLVMAsmPrinter',
                'LLVMCodeGen', 'LLVMScalarOpts', 'LLVMInstCombine',
                'LLVMTransformUtils', 'LLVMipa', 'LLVMAsmParser',
                'LLVMArchive', 'LLVMBitReader', 'LLVMAnalysis', 'LLVMTarget',
                'LLVMMC', 'LLVMCore', 'LLVMSupport', 'LLVMSystem',
            ])
        else:
            # 2.6
            env.Prepend(LIBS = [
                'LLVMX86AsmParser', 'LLVMX86AsmPrinter', 'LLVMX86CodeGen',
                'LLVMX86Info', 'LLVMLinker', 'LLVMipo', 'LLVMInterpreter',
                'LLVMInstrumentation', 'LLVMJIT', 'LLVMExecutionEngine',
                'LLVMDebugger', 'LLVMBitWriter', 'LLVMAsmParser',
                'LLVMArchive', 'LLVMBitReader', 'LLVMSelectionDAG',
                'LLVMAsmPrinter', 'LLVMCodeGen', 'LLVMScalarOpts',
                'LLVMTransformUtils', 'LLVMipa', 'LLVMAnalysis',
                'LLVMTarget', 'LLVMMC', 'LLVMCore', 'LLVMSupport',
                'LLVMSystem',
            ])
d137 4
d156 1
a156 4
            components = ['engine', 'bitwriter', 'x86asmprinter']

            if llvm_version >= distutils.version.LooseVersion('3.1'):
                components.append('mcjit')
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d193 5
a202 3
            if llvm_version >= distutils.version.LooseVersion('3.2'):
                env.Append(CXXFLAGS = ('-fno-rtti',))

d205 3
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d95 39
a133 1
        if llvm_version >= distutils.version.LooseVersion('2.7'):
d162 2
d177 1
a177 1
            print 'scons: llvm-config script not found' % llvm_version
d184 18
a201 2
            env.ParseConfig('llvm-config --cppflags')
            env.ParseConfig('llvm-config --libs')
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d145 1
a145 1
            env.ParseConfig('llvm-config --libs jit interpreter nativecodegen bitwriter')
a149 2
        else:
            env['LINK'] = env['CXX']
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d32 1
d34 1
d41 2
d67 40
a106 6
        if llvm_dir is not None:
            env.Prepend(CPPPATH = [os.path.join(llvm_dir, 'include')])
            env.AppendUnique(CPPDEFINES = [
                '__STDC_LIMIT_MACROS', 
                '__STDC_CONSTANT_MACROS',
                'HAVE_STDINT_H',
d108 2
a109 1
            env.Prepend(LIBPATH = [os.path.join(llvm_dir, 'lib')])
d111 8
a118 26
                'LLVMX86AsmParser',
                'LLVMX86AsmPrinter',
                'LLVMX86CodeGen',
                'LLVMX86Info',
                'LLVMLinker',
                'LLVMipo',
                'LLVMInterpreter',
                'LLVMInstrumentation',
                'LLVMJIT',
                'LLVMExecutionEngine',
                'LLVMDebugger',
                'LLVMBitWriter',
                'LLVMAsmParser',
                'LLVMArchive',
                'LLVMBitReader',
                'LLVMSelectionDAG',
                'LLVMAsmPrinter',
                'LLVMCodeGen',
                'LLVMScalarOpts',
                'LLVMTransformUtils',
                'LLVMipa',
                'LLVMAnalysis',
                'LLVMTarget',
                'LLVMMC',
                'LLVMCore',
                'LLVMSupport',
a119 2
                'imagehlp',
                'psapi',
d121 21
a141 14
            if env['msvc']:
                # Some of the LLVM C headers use the inline keyword without
                # defining it.
                env.Append(CPPDEFINES = [('inline', '__inline')])
                if env['debug']:
                    # LLVM libraries are static, build with /MT, and they
                    # automatically link agains LIBCMT. When we're doing a
                    # debug build we'll be linking against LIBCMTD, so disable
                    # that.
                    env.Append(LINKFLAGS = ['/nodefaultlib:LIBCMT'])
            env['LLVM_VERSION'] = '2.6'
        return
    elif env.Detect('llvm-config'):
        version = env.backtick('llvm-config --version').rstrip()
d148 2
a149 1
            print 'llvm-config version %s failed' % version
a150 2
            if env['platform'] == 'windows':
                env.Append(LIBS = ['imagehlp', 'psapi'])
d152 12
a163 1
            env['LLVM_VERSION'] = version
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a31 1
import re
a32 1
import distutils.version
a38 2
    env['llvm'] = False

d63 6
a68 40
        if llvm_dir is None:
            print 'scons: LLVM environment variable must be specified when building for windows'
            return

        # Try to determine the LLVM version from llvm/Config/config.h
        llvm_config = os.path.join(llvm_dir, 'include/llvm/Config/config.h')
        if not os.path.exists(llvm_config):
            print 'scons: could not find %s' % llvm_config
            return
        llvm_version_re = re.compile(r'^#define PACKAGE_VERSION "([^"]*)"')
        llvm_version = None
        for line in open(llvm_config, 'rt'):
            mo = llvm_version_re.match(line)
            if mo:
                llvm_version = mo.group(1)
                llvm_version = distutils.version.LooseVersion(llvm_version)
                break
        if llvm_version is None:
            print 'scons: could not determine the LLVM version from %s' % llvm_config
            return

        env.Prepend(CPPPATH = [os.path.join(llvm_dir, 'include')])
        env.AppendUnique(CPPDEFINES = [
            '__STDC_LIMIT_MACROS', 
            '__STDC_CONSTANT_MACROS',
            'HAVE_STDINT_H',
        ])
        env.Prepend(LIBPATH = [os.path.join(llvm_dir, 'lib')])
        if llvm_version >= distutils.version.LooseVersion('2.7'):
            # 2.7
            env.Prepend(LIBS = [
                'LLVMLinker', 'LLVMipo', 'LLVMInterpreter',
                'LLVMInstrumentation', 'LLVMJIT', 'LLVMExecutionEngine',
                'LLVMBitWriter', 'LLVMX86Disassembler', 'LLVMX86AsmParser',
                'LLVMMCParser', 'LLVMX86AsmPrinter', 'LLVMX86CodeGen',
                'LLVMSelectionDAG', 'LLVMX86Info', 'LLVMAsmPrinter',
                'LLVMCodeGen', 'LLVMScalarOpts', 'LLVMInstCombine',
                'LLVMTransformUtils', 'LLVMipa', 'LLVMAsmParser',
                'LLVMArchive', 'LLVMBitReader', 'LLVMAnalysis', 'LLVMTarget',
                'LLVMMC', 'LLVMCore', 'LLVMSupport', 'LLVMSystem',
d70 1
a70 2
        else:
            # 2.6
d72 26
a97 8
                'LLVMX86AsmParser', 'LLVMX86AsmPrinter', 'LLVMX86CodeGen',
                'LLVMX86Info', 'LLVMLinker', 'LLVMipo', 'LLVMInterpreter',
                'LLVMInstrumentation', 'LLVMJIT', 'LLVMExecutionEngine',
                'LLVMDebugger', 'LLVMBitWriter', 'LLVMAsmParser',
                'LLVMArchive', 'LLVMBitReader', 'LLVMSelectionDAG',
                'LLVMAsmPrinter', 'LLVMCodeGen', 'LLVMScalarOpts',
                'LLVMTransformUtils', 'LLVMipa', 'LLVMAnalysis',
                'LLVMTarget', 'LLVMMC', 'LLVMCore', 'LLVMSupport',
d99 2
d102 14
a115 21
        env.Append(LIBS = [
            'imagehlp',
            'psapi',
        ])
        if env['msvc']:
            # Some of the LLVM C headers use the inline keyword without
            # defining it.
            env.Append(CPPDEFINES = [('inline', '__inline')])
            if env['build'] in ('debug', 'checked'):
                # LLVM libraries are static, build with /MT, and they
                # automatically link agains LIBCMT. When we're doing a
                # debug build we'll be linking against LIBCMTD, so disable
                # that.
                env.Append(LINKFLAGS = ['/nodefaultlib:LIBCMT'])
    else:
        if not env.Detect('llvm-config'):
            print 'scons: llvm-config script not found' % llvm_version
            return

        llvm_version = env.backtick('llvm-config --version').rstrip()
        llvm_version = distutils.version.LooseVersion(llvm_version)
d122 1
a122 2
            print 'scons: llvm-config version %s failed' % llvm_version
            return
d124 2
d127 1
a127 12

    assert llvm_version is not None
    env['llvm'] = True

    print 'scons: Found LLVM version %s' % llvm_version
    env['LLVM_VERSION'] = llvm_version

    # Define HAVE_LLVM macro with the major/minor version number (e.g., 0x0206 for 2.6)
    llvm_version_major = int(llvm_version.version[0])
    llvm_version_minor = int(llvm_version.version[1])
    llvm_version_hex = '0x%02x%02x' % (llvm_version_major, llvm_version_minor)
    env.Prepend(CPPDEFINES = [('HAVE_LLVM', llvm_version_hex)])
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d95 1
a95 39
        if llvm_version >= distutils.version.LooseVersion('3.2'):
            # 3.2
            env.Prepend(LIBS = [
                'LLVMBitWriter', 'LLVMX86Disassembler', 'LLVMX86AsmParser',
                'LLVMX86CodeGen', 'LLVMX86Desc', 'LLVMSelectionDAG',
                'LLVMAsmPrinter', 'LLVMMCParser', 'LLVMX86AsmPrinter',
                'LLVMX86Utils', 'LLVMX86Info', 'LLVMJIT',
                'LLVMExecutionEngine', 'LLVMCodeGen', 'LLVMScalarOpts',
                'LLVMInstCombine', 'LLVMTransformUtils', 'LLVMipa',
                'LLVMAnalysis', 'LLVMTarget', 'LLVMMC', 'LLVMCore',
                'LLVMSupport', 'LLVMRuntimeDyld', 'LLVMObject'
            ])
        elif llvm_version >= distutils.version.LooseVersion('3.0'):
            # 3.0
            env.Prepend(LIBS = [
                'LLVMBitWriter', 'LLVMX86Disassembler', 'LLVMX86AsmParser',
                'LLVMX86CodeGen', 'LLVMX86Desc', 'LLVMSelectionDAG',
                'LLVMAsmPrinter', 'LLVMMCParser', 'LLVMX86AsmPrinter',
                'LLVMX86Utils', 'LLVMX86Info', 'LLVMJIT',
                'LLVMExecutionEngine', 'LLVMCodeGen', 'LLVMScalarOpts',
                'LLVMInstCombine', 'LLVMTransformUtils', 'LLVMipa',
                'LLVMAnalysis', 'LLVMTarget', 'LLVMMC', 'LLVMCore',
                'LLVMSupport'
            ])
        elif llvm_version >= distutils.version.LooseVersion('2.9'):
            # 2.9
            env.Prepend(LIBS = [
                'LLVMObject', 'LLVMMCJIT', 'LLVMMCDisassembler',
                'LLVMLinker', 'LLVMipo', 'LLVMInterpreter',
                'LLVMInstrumentation', 'LLVMJIT', 'LLVMExecutionEngine',
                'LLVMBitWriter', 'LLVMX86Disassembler', 'LLVMX86AsmParser',
                'LLVMMCParser', 'LLVMX86AsmPrinter', 'LLVMX86CodeGen',
                'LLVMSelectionDAG', 'LLVMX86Utils', 'LLVMX86Info', 'LLVMAsmPrinter',
                'LLVMCodeGen', 'LLVMScalarOpts', 'LLVMInstCombine',
                'LLVMTransformUtils', 'LLVMipa', 'LLVMAsmParser',
                'LLVMArchive', 'LLVMBitReader', 'LLVMAnalysis', 'LLVMTarget',
                'LLVMCore', 'LLVMMC', 'LLVMSupport',
            ])
        elif llvm_version >= distutils.version.LooseVersion('2.7'):
a123 2
            'shell32',
            'advapi32'
d137 1
a137 1
            print 'scons: llvm-config script not found'
d144 2
a145 18
            # Treat --cppflags specially to prevent NDEBUG from disabling
            # assertion failures in debug builds.
            cppflags = env.ParseFlags('!llvm-config --cppflags')
            try:
                cppflags['CPPDEFINES'].remove('NDEBUG')
            except ValueError:
                pass
            env.MergeFlags(cppflags)

            components = ['engine', 'bitwriter', 'x86asmprinter']

            if llvm_version >= distutils.version.LooseVersion('3.1'):
                components.append('mcjit')

            if llvm_version >= distutils.version.LooseVersion('3.2'):
                env.Append(CXXFLAGS = ('-fno-rtti',))

            env.ParseConfig('llvm-config --libs ' + ' '.join(components))
d150 2
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a192 5
            # Match llvm --fno-rtti flag
            cxxflags = env.backtick('llvm-config --cxxflags').split()
            if '-fno-rtti' in cxxflags:
                env.Append(CXXFLAGS = ['-fno-rtti'])

d198 3
a202 3
            if llvm_version >= distutils.version.LooseVersion('3.5'):
                env.ParseConfig('llvm-config --system-libs')
                env.Append(CXXFLAGS = ['-std=c++11'])
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a39 3
required_llvm_version = '3.3'


a86 3
        if llvm_version < distutils.version.LooseVersion(required_llvm_version):
            print 'scons: LLVM version %s found, but %s is required' % (llvm_version, required_llvm_version)
            return
d95 1
a95 1
        if True:
d101 1
a101 1
                'LLVMX86Utils', 'LLVMX86Info', 'LLVMMCJIT', 'LLVMJIT',
d107 52
a182 4
        if llvm_version < distutils.version.LooseVersion(required_llvm_version):
            print 'scons: LLVM version %s found, but %s is required' % (llvm_version, required_llvm_version)
            return

d198 4
a201 1
            components = ['engine', 'mcjit', 'bitwriter', 'x86asmprinter']
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d40 3
d90 3
d101 1
a101 1
        if llvm_version >= distutils.version.LooseVersion('3.2'):
d107 1
a107 1
                'LLVMX86Utils', 'LLVMX86Info', 'LLVMJIT',
a112 52
        elif llvm_version >= distutils.version.LooseVersion('3.0'):
            # 3.0
            env.Prepend(LIBS = [
                'LLVMBitWriter', 'LLVMX86Disassembler', 'LLVMX86AsmParser',
                'LLVMX86CodeGen', 'LLVMX86Desc', 'LLVMSelectionDAG',
                'LLVMAsmPrinter', 'LLVMMCParser', 'LLVMX86AsmPrinter',
                'LLVMX86Utils', 'LLVMX86Info', 'LLVMJIT',
                'LLVMExecutionEngine', 'LLVMCodeGen', 'LLVMScalarOpts',
                'LLVMInstCombine', 'LLVMTransformUtils', 'LLVMipa',
                'LLVMAnalysis', 'LLVMTarget', 'LLVMMC', 'LLVMCore',
                'LLVMSupport'
            ])
        elif llvm_version >= distutils.version.LooseVersion('2.9'):
            # 2.9
            env.Prepend(LIBS = [
                'LLVMObject', 'LLVMMCJIT', 'LLVMMCDisassembler',
                'LLVMLinker', 'LLVMipo', 'LLVMInterpreter',
                'LLVMInstrumentation', 'LLVMJIT', 'LLVMExecutionEngine',
                'LLVMBitWriter', 'LLVMX86Disassembler', 'LLVMX86AsmParser',
                'LLVMMCParser', 'LLVMX86AsmPrinter', 'LLVMX86CodeGen',
                'LLVMSelectionDAG', 'LLVMX86Utils', 'LLVMX86Info', 'LLVMAsmPrinter',
                'LLVMCodeGen', 'LLVMScalarOpts', 'LLVMInstCombine',
                'LLVMTransformUtils', 'LLVMipa', 'LLVMAsmParser',
                'LLVMArchive', 'LLVMBitReader', 'LLVMAnalysis', 'LLVMTarget',
                'LLVMCore', 'LLVMMC', 'LLVMSupport',
            ])
        elif llvm_version >= distutils.version.LooseVersion('2.7'):
            # 2.7
            env.Prepend(LIBS = [
                'LLVMLinker', 'LLVMipo', 'LLVMInterpreter',
                'LLVMInstrumentation', 'LLVMJIT', 'LLVMExecutionEngine',
                'LLVMBitWriter', 'LLVMX86Disassembler', 'LLVMX86AsmParser',
                'LLVMMCParser', 'LLVMX86AsmPrinter', 'LLVMX86CodeGen',
                'LLVMSelectionDAG', 'LLVMX86Info', 'LLVMAsmPrinter',
                'LLVMCodeGen', 'LLVMScalarOpts', 'LLVMInstCombine',
                'LLVMTransformUtils', 'LLVMipa', 'LLVMAsmParser',
                'LLVMArchive', 'LLVMBitReader', 'LLVMAnalysis', 'LLVMTarget',
                'LLVMMC', 'LLVMCore', 'LLVMSupport', 'LLVMSystem',
            ])
        else:
            # 2.6
            env.Prepend(LIBS = [
                'LLVMX86AsmParser', 'LLVMX86AsmPrinter', 'LLVMX86CodeGen',
                'LLVMX86Info', 'LLVMLinker', 'LLVMipo', 'LLVMInterpreter',
                'LLVMInstrumentation', 'LLVMJIT', 'LLVMExecutionEngine',
                'LLVMDebugger', 'LLVMBitWriter', 'LLVMAsmParser',
                'LLVMArchive', 'LLVMBitReader', 'LLVMSelectionDAG',
                'LLVMAsmPrinter', 'LLVMCodeGen', 'LLVMScalarOpts',
                'LLVMTransformUtils', 'LLVMipa', 'LLVMAnalysis',
                'LLVMTarget', 'LLVMMC', 'LLVMCore', 'LLVMSupport',
                'LLVMSystem',
            ])
d137 4
d156 1
a156 4
            components = ['engine', 'bitwriter', 'x86asmprinter']

            if llvm_version >= distutils.version.LooseVersion('3.1'):
                components.append('mcjit')
@


