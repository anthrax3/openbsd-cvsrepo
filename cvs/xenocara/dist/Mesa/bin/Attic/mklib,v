head	1.9;
access;
symbols
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.2
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2013.09.05.13.58.32;	author jsg;	state dead;
branches;
next	1.8;

1.8
date	2012.08.17.13.58.00;	author mpi;	state Exp;
branches;
next	1.7;

1.7
date	2011.10.23.13.37.30;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.22.20.05.52;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.17.20.26.36;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.02.14.58.06;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.31.16.36.47;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.12.21.09.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.49.18;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.49.18;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.24;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.25.29;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.21;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Merge Mesa 9.2.0
@
text
@#!/bin/sh

# Make a shared library.
# This script should be useful for projects other than Mesa.
# Improvements/fixes are welcome.


# Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
# AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# Clear CDPATH as the 'cd' command will echo stuff
# to stdout if it is set
unset CDPATH

# Given a list of files, look for .a archives and unpack them.
# Return the original list of files minus the .a files plus the unpacked files.
# first param:  name of a temp directory (to be deleted when finished)
# remaining params:  list of .o and .a files
expand_archives() {
    DIR=$1
    shift
    FILES=$@@
    NEWFILES=""
    ORIG_DIR=`pwd`
    mkdir -p "$DIR"
    cd "$DIR"
    for FILE in $FILES ; do
        case $FILE in
            *.a)
                # extract the .o files from this .a archive
                case $FILE in
                    /*) ;;
                    *)  FILE="$ORIG_DIR/$FILE" ;;
                esac
                MEMBERS=`ar t $FILE`
                ar x $FILE
                for MEMBER in $MEMBERS ; do
                    NEWFILES="$NEWFILES $DIR/$MEMBER"
                done
                ;;
            *)
                # other file type, just add to list
                NEWFILES="$NEWFILES $FILE"
                ;;
        esac
    done
    cd "$ORIG_DIR"
    echo $NEWFILES
}


# Make static library with 'ar'
# params:
#    options to ar
#    1 or 0 to indicate if ranlib should be run
#    libname to make
#    list of object files
# Return name of library we made
# Example: "make_ar_static_lib -ru 1 libfoo.a foo.o bar.o"
make_ar_static_lib() {
    OPTS=$1
    shift;
    RANLIB=$1
    shift;
    LIBNAME=$1
    shift;
    OBJECTS=$@@

    # remove existing lib, if present
    rm -f ${LIBNAME}

    # make static lib
    ar ${OPTS} ${LIBNAME} ${OBJECTS}

    # run ranlib
    if [ ${RANLIB} = 1 ] ; then
        ranlib ${LIBNAME}
    fi

    echo ${LIBNAME}
}


# Print usage info.
usage() {
    echo 'Usage: mklib [options] objects'
    echo 'Create a shared library from object files.'
    echo '  -o LIBRARY    specifies the name of the resulting library, without'
    echo '                the leading "lib" or any suffix.'
    echo '                (eg: "-o GL" might result in "libGL.so" being made)'
    echo '  -major N      specifies major version number (default is 1)'
    echo '  -minor N      specifies minor version number (default is 0)'
    echo '  -patch N      specifies patch version number (default is 0)'
    echo '  -lLIBRARY     specifies a dependency on LIBRARY'
    echo '  -LDIR         search in DIR for library dependencies at build time'
    echo '  -RDIR         search in DIR for library dependencies at run time'
    echo '  -linker L     explicity specify the linker program to use (eg: gcc, g++)'
    echo '                Not observed on all systems at this time.'
    echo '  -ldflags OPT  specify any additional linker flags in OPT'
    echo '  -cplusplus    link with C++ runtime'
    echo '  -static       make a static library (default is dynamic/shared)'
    echo '  -dlopen       make a shared library suitable for dynamic loading'
    echo '  -install DIR  put resulting library file(s) in DIR'
    echo '  -arch ARCH    override using `uname` to determine host system'
    echo '  -archopt OPT  specify an extra achitecture-specific option OPT'
    echo '  -altopts OPTS alternate options to override all others'
    echo "  -noprefix     don't prefix library name with 'lib' nor add any suffix"
    echo '  -exports FILE only export the symbols listed in FILE'
    echo '  -id NAME      Sets the id of the dylib (Darwin)'
    echo '  -h, --help    display this information and exit'
}


#
# Option defaults
#
LIBNAME=""
MAJOR=1
MINOR=0
PATCH=""
DEPS=""
LINK=""
LDFLAGS=""
CPLUSPLUS=0
STATIC=0
DLOPEN=0
INSTALLDIR="."
ARCH="auto"
ARCHOPT=""
NOPREFIX=0
EXPORTS=""
ID=""

#
# Parse arguments
#
while true
do
    case $1 in
	'-h' | '--help')
	    usage
	    exit 1
	    ;;
	'-o')
	    shift 1;
	    LIBNAME=$1
	    ;;
	'-major')
	    shift 1;
	    MAJOR=$1
	    ;;
	'-minor')
	    shift 1;
	    MINOR=$1
	    ;;
	'-patch')
	    shift 1;
	    PATCH=$1
	    ;;
	'-linker')
	    shift 1;
	    LINK=$1
	    ;;
	'-ldflags')
	    shift 1;
	    LDFLAGS=$1
	    ;;
	-l*)
	    DEPS="$DEPS $1"
	    ;;
	-L*)
	    DEPS="$DEPS $1"
	    ;;
	-R*)
	    DEPS="$DEPS $1"
	    ;;
	-Wl*)
            DEPS="$DEPS $1"
            ;;
	-pthread)
	    # this is a special case (see bugzilla 10876)
	    DEPS="$DEPS $1"
	    ;;
	'-pthread')
	    DEPS="$DEPS -pthread"
	    ;;
	'-cplusplus')
	    CPLUSPLUS=1
	    ;;
	'-static')
	    STATIC=1
	    ;;
	'-dlopen')
	    DLOPEN=1
	    ;;
	'-install')
	    shift 1;
	    INSTALLDIR=$1
	    ;;
	'-arch')
	    shift 1;
	    ARCH=$1
	    ;;
	'-archopt')
	    shift 1;
	    ARCHOPT=$1
	    ;;
	'-altopts')
            shift 1;
            ALTOPTS=$1
            ;;
	'-noprefix')
	    NOPREFIX=1
	    ;;
	'-exports')
	    shift 1;
	    EXPORTS=$1
	    ;;
	'-id')
	    shift 1;
	    ID=$1
	    ;;
	-*)
	    echo "mklib: Unknown option: " $1 ;
	    exit 1
	    ;;
	*)
	    # This should be the first object file, stop parsing
	    break
    esac
    shift 1
done
OBJECTS=$@@


if [ ${ARCH} = "auto" ] ; then
    ARCH=`uname`
fi


if [ $STATIC = 1 ]; then
    # filter out linker options inside object list
    NEWOBJECTS=""
    for OBJ in $OBJECTS ; do
	case $OBJ in
	    -Wl,*)
		echo "mklib: warning: ignoring $OBJ for static library"
		;;
	    *)
		NEWOBJECTS="$NEWOBJECTS $OBJ"
		;;
	esac
    done
    OBJECTS=$NEWOBJECTS
fi


#
# Error checking
#
if [ "x${LIBNAME}" = "x" ] ; then
    echo "mklib: Error: no library name specified (-h for help)"
    exit 1
fi
if [ "x${OBJECTS}" = "x" ] ; then
    echo "mklib: Error: no object files specified (-h for help)"
    exit 1
fi


#
# Debugging info
#
if [  ]  ; then
    echo "-----------------"
    echo ARCH is $ARCH
    echo LIBNAME is $LIBNAME
    echo MAJOR is $MAJOR
    echo MINOR is $MINOR
    echo PATCH is $PATCH
    echo DEPS are $DEPS
    echo "EXPORTS in" $EXPORTS
    echo ID is $ID
    echo "-----------------"
fi


#
# OK, make the library now
#
case $ARCH in

    'Linux' | 'OpenBSD' | 'DragonFly' | 'GNU' | GNU/* | 'NetBSD')
	# we assume gcc

	if [ "x$LINK" = "x" ] ; then
	    # -linker was not specified so set default link command now
            if [ $CPLUSPLUS = 1 ] ; then
                LINK=g++
            else
                LINK=gcc
            fi
	fi

	if [ $NOPREFIX = 1 ] ; then
	    # No "lib" or ".so" part
	    echo "mklib: Making" $ARCH "shared library: " ${LIBNAME}
	    case $ARCH in 'Linux' | 'GNU' | GNU/*)
		OPTS="-Xlinker -Bsymbolic -shared"
	    ;;
	    *)
		OPTS="-shared"
	    ;;
	    esac

	    # Check if objects are 32-bit and we're running in 64-bit
	    # environment.  If so, pass -m32 flag to linker.
	    set ${OBJECTS}
	    ABI32=`file $1 | grep 32-bit`
	    if [ "${ABI32}" -a `uname -m` = "x86_64" ] ; then
		OPTS="-m32 ${OPTS}"
	    fi

            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi

            rm -f ${LIBNAME}
            # make lib
            ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
            # finish up
            FINAL_LIBS="${LIBNAME}"
        elif [ $STATIC = 1 ] ; then
	    # make a static .a library
            LIBNAME="lib${LIBNAME}.a"     # prefix with "lib", suffix with ".a"
            echo "mklib: Making" $ARCH "static library: " ${LIBNAME}
            OPTS="-ru"
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi

	    # expand .a into .o files
	    NEW_OBJECTS=`expand_archives ${LIBNAME}.obj $OBJECTS`

            # make static lib
	    FINAL_LIBS=`make_ar_static_lib ${OPTS} 1 ${LIBNAME} ${NEW_OBJECTS}`

	    # remove temporary extracted .o files
	    rm -rf ${LIBNAME}.obj
        else
	    # make dynamic library
	    LIBNAME="lib${LIBNAME}"     # prefix with "lib"
	    case $ARCH in 'Linux' | 'GNU' | GNU/*)
		OPTS="-Xlinker -Bsymbolic -shared -Wl,-soname,${LIBNAME}.so.${MAJOR}"
	    ;;
	    *)
		OPTS="-shared -Wl,-soname,${LIBNAME}.so.${MAJOR}"
	    ;;
	    esac
	    if [ $EXPORTS ] ; then
		#OPTS="${OPTS} -Xlinker --retain-symbols-file ${EXPORTS}"
		# Make the 'exptmp' file for --version-script option
		echo "{" > exptmp
		echo "global:" >> exptmp
		sed 's/$/;/' ${EXPORTS} >> exptmp
		echo "local:" >> exptmp
		echo "*;" >> exptmp
		echo "};" >> exptmp
		OPTS="${OPTS} -Xlinker --version-script=exptmp"
		# exptmp is removed below
	    fi

	    # Check if objects are 32-bit and we're running in 64-bit
	    # environment.  If so, pass -m32 flag to linker.
	    set ${OBJECTS}
	    ABI32=`file $1 | grep 32-bit`
	    if [ "${ABI32}" -a `uname -m` = "x86_64" ] ; then
		OPTS="-m32 ${OPTS}"
	    fi
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi

	    if [ x${PATCH} = "x" ] ; then
		VERSION="${MAJOR}.${MINOR}"
	    else
		VERSION="${MAJOR}.${MINOR}.${PATCH}"
	    fi

            echo "mklib: Making" $ARCH "shared library: " ${LIBNAME}.so.${VERSION}

            # rm any old libs
            rm -f ${LIBNAME}.so.${VERSION}
            rm -f ${LIBNAME}.so.${MAJOR}
            rm -f ${LIBNAME}.so

            # make lib
            ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME}.so.${VERSION} ${OBJECTS} ${DEPS}
            # make usual symlinks
            ln -s ${LIBNAME}.so.${VERSION} ${LIBNAME}.so.${MAJOR}
            ln -s ${LIBNAME}.so.${MAJOR} ${LIBNAME}.so
            # finish up
            FINAL_LIBS="${LIBNAME}.so.${VERSION} ${LIBNAME}.so.${MAJOR} ${LIBNAME}.so"
#	    rm -f exptmp
        fi
	;;

    'SunOS')
        if [ $STATIC = 1 ] ; then
	    LIBNAME="lib${LIBNAME}.a"
	    echo "mklib: Making SunOS static library: " ${LIBNAME}
	    FINAL_LIBS=`make_ar_static_lib -ruc 0 ${LIBNAME} ${OBJECTS}`
	else
	    if [ $NOPREFIX = 0 ] ; then
		LIBNAME="lib${LIBNAME}.so"
	    fi
	    echo "mklib: Making SunOS shared library: " ${LIBNAME}

	    if [ "x$LINK" = "x" ] ; then
		# -linker was not specified, choose default linker now
		if [ $CPLUSPLUS = 1 ] ; then
		    # determine linker and options for C++ code
		    if [ `which c++` ] ; then
			# use Sun c++
			LINK="c++"
		    elif [ `type g++` ] ; then
			# use g++
			LINK="g++"
		    else
			echo "mklib: warning: can't find C++ compiler, trying CC."
			LINK="CC"
		    fi
		else
		    # use native Sun linker for C code
		    LINK="ld"
		fi
	    fi

	    # linker options
	    if [ ${LINK} = "ld" -o ${LINK} = "cc" -o ${LINK} = "CC" ] ; then
		# SunOS tools, -G to make shared libs
		OPTS="-G"
	    else
		# gcc linker
		# Check if objects are 32-bit and we're running in 64-bit
		# environment.  If so, pass -m32 flag to linker.
		set ${OBJECTS}
		ABI32=`file $1 | grep 32-bit`
		if [ "${ABI32}" ] ; then
		    OPTS="-m32 -shared -Wl,-Bdynamic"
		else
		    OPTS="-m64 -shared -Wl,-Bdynamic"
		fi
	    fi

	    # If using Sun C++ compiler, need to tell it not to add runpaths
	    # that are specific to the build machine
	    if [ ${LINK} = "CC" ] ; then
		OPTS="${OPTS} -norunpath"
	    fi

	    # Solaris linker requires explicitly listing the Standard C & C++
	    # libraries in the link path when building shared objects
	    if [ ${LINK} = "CC" ] ; then
		DEPS="${DEPS} -lCrun"
	    fi
	    DEPS="${DEPS} -lc"

	    if [ $EXPORTS ] ; then
		# Make the 'mapfile.scope' linker mapfile
		echo "{" > mapfile.scope
		echo "global:" >> mapfile.scope
		sed 's/$/;/' ${EXPORTS} >> mapfile.scope
		echo "local:" >> mapfile.scope
		echo "    *;" >> mapfile.scope
		echo "};" >> mapfile.scope
		OPTS="${OPTS} -Wl,-Mmapfile.scope"
	    fi

	    # Check if objects are 64-bit
	    # file says: ELF 64-bit MSB relocatable SPARCV9 Version 1
	    set ${OBJECTS}
	    if [ ${LINK} = "cc" -o ${LINK} = "CC" ] ; then
		ABI64=`file $1 | grep "ELF 64-bit"`
		if [ "${ABI64}" ] ; then
		    case `uname -p` in
			sparc)	    OPTS="${OPTS} -xarch=v9" ;;
			i386)	    OPTS="${OPTS} -xarch=amd64" ;;
		    esac
		fi
	    fi
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi

	    # for debug:
	    #echo "mklib: linker is" ${LINK} ${OPTS}
	    if [ $NOPREFIX = 1 ] ; then
		rm -f ${LIBNAME}
		${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
		FINAL_LIBS="${LIBNAME}"
	    else
		rm -f ${LIBNAME}.${MAJOR} ${LIBNAME}
		${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME}.${MAJOR} -h ${LIBNAME}.${MAJOR} ${OBJECTS} ${DEPS}
		ln -s ${LIBNAME}.${MAJOR} ${LIBNAME}
		FINAL_LIBS="${LIBNAME}.${MAJOR} ${LIBNAME}"
	    fi
	fi
	;;

    'FreeBSD')
	# we assume gcc

	if [ "x$LINK" = "x" ] ; then
	    # -linker was not specified so set default link command now
            if [ $CPLUSPLUS = 1 ] ; then
                LINK=g++
            else
                LINK=gcc
            fi
	fi

	if [ $NOPREFIX = 1 ] ; then
	    # No "lib" or ".so" part
	    echo "mklib: Making FreeBSD shared library: " ${LIBNAME}
	    OPTS="-shared"
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
	    rm -f ${LIBNAME}
	    ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
	    FINAL_LIBS=${LIBNAME}
        elif [ $STATIC = 1 ] ; then
	    # make a static .a library
	    STLIB="lib${LIBNAME}.a"
	    echo "mklib: Making FreeBSD static library: " ${STLIB}

	    # expand .a into .o files
	    NEW_OBJECTS=`expand_archives ${STLIB}.obj $OBJECTS`

	    FINAL_LIBS=`make_ar_static_lib cq 1 ${STLIB} ${NEW_OBJECTS}`

	    # remove temporary extracted .o files
	    rm -rf ${STLIB}.obj
	else
	    # make dynamic library
	    SHLIB="lib${LIBNAME}.so.${MAJOR}"
	    OPTS="-shared -Wl,-soname,${SHLIB}"
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
	    echo "mklib: Making FreeBSD shared library: " ${SHLIB}
	    rm -f ${SHLIB}
	    ${LINK} ${OPTS} ${LDFLAGS} -o ${SHLIB} ${OBJECTS} ${DEPS}
	    ln -sf ${SHLIB} "lib${LIBNAME}.so"
	    FINAL_LIBS="${SHLIB} lib${LIBNAME}.so"
	fi
	;;

    'IRIX' | 'IRIX64')
        if [ $STATIC = 1 ] ; then
	    LIBNAME="lib${LIBNAME}.a"
	    FINAL_LIBS=`make_ar_static_lib rc 0 ${LIBNAME} ${OBJECTS}`
	else
	    LIBNAME="lib${LIBNAME}.so"  # prefix with "lib", suffix with ".so"

	    # examine first object to determine ABI
    	    set ${OBJECTS}
	    ABI_O32=`file $1 | grep 'ELF 32-bit'`
	    ABI_N32=`file $1 | grep 'ELF N32'`
	    ABI_N64=`file $1 | grep 'ELF 64-bit'`
	    if [ "${ABI_O32}" ] ; then
		OPTS="-32 -shared -all"
		ABI="o32-bit"
	    elif [ "${ABI_N32}" ] ; then
		OPTS="-n32 -shared -all"
		ABI="n32-bit"
	    elif [ "${ABI_N64}" ] ; then
		OPTS="-64 -shared -all"
		ABI="64-bit"
	    else
		echo "Error: Unexpected IRIX ABI!"
		exit 1
	    fi

            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi

	    if [ $CPLUSPLUS = 1 ] ; then
		LINK="CC"
	    else
		LINK="ld"
	    fi

	    echo "mklib: Making IRIX " ${ABI} " shared library: " ${LIBNAME}
	    ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
	    FINAL_LIBS=${LIBNAME}
	fi
	;;

    'linux-cygwin')
	LIBNAME="lib${LIBNAME}.a"
	echo "mklib: Making linux-cygwin library: " ${LIBNAME}
	rm -f ${LIBNAME}
	gnuwin32ar ruv ${LIBNAME} ${OBJECTS}
	FINAL_LIBS=${LIBNAME}
	;;

    'HP-UX')
        if [ $STATIC = 1 ] ; then
	    LIBNAME="lib${LIBNAME}.a"
	    echo "mklib: Making HP-UX static library: " ${LIBNAME}
    	    FINAL_LIBS=`make_ar_static_lib -ruv 0 ${LIBNAME} ${OBJECTS}`
	else
            # HP uses a .2 for their current GL/GLU libraries
	    if [ ${LIBNAME} = "GL" -o ${LIBNAME} = "GLU" ] ; then
	       MAJOR=2
	    fi
	    RUNLIB="lib${LIBNAME}.${MAJOR}"
	    DEVLIB="lib${LIBNAME}.sl"
	    echo "mklib: Making HP-UX shared library: " ${RUNLIB} ${DEVLIB}
	    ld -b -o ${RUNLIB} +b ${RUNLIB} ${OBJECTS} ${DEPS}
	    ln -s ${RUNLIB} ${DEVLIB}
	    FINAL_LIBS="${RUNLIB} ${DEVLIB}"
	fi
	;;

    'AIX' )
	# examine first object to determine ABI
    	set ${OBJECTS}
	ABI_64=`file $1 | grep '64-bit'`
	if [ "${ABI_64}" ] ; then
	    X64="-X64"
	    Q64="-q64"
	    OFILE=shr_64.o
	else
	    OFILE=shr.o  #Want to be consistent with the IBM libGL.a
	fi

	if [ $STATIC = 1 ] ; then
	    LIBNAME="lib${LIBNAME}.a"
	    echo "mklib: Making AIX static library: " ${LIBNAME}
    	    FINAL_LIBS=`make_ar_static_lib -ruv 0 ${LIBNAME} ${OBJECTS}`
	else
	    EXPFILE="lib${LIBNAME}.exp"
	    LIBNAME="lib${LIBNAME}.a"  # shared objects are still stored in the .a libraries
	    OPTS="-bE:${EXPFILE} -bM:SRE -bnoentry ${Q64}"
	    rm -f ${EXPFILE} ${OFILE}
	    NM="/bin/nm -eC ${X64}"
	    echo "#! /usr/lib/${LIBNAME}" > ${EXPFILE}
	    ${NM} ${OBJECTS} | awk '{
	    if ((($2 == "T") || ($2 == "D") || ($2 == "B")) \
	    && ( substr($1,1,1) != ".")) {
		    if (substr ($1, 1, 7) != "__sinit" &&
			    substr ($1, 1, 7) != "__sterm") {
			    if (substr ($1, 1, 5) == "__tf1")
				print (substr ($1, 7))
			    else if (substr ($1, 1, 5) == "__tf9")
				print (substr ($1, 15))
			    else
				print $1
			}
		}
	    }' | sort -u >> ${EXPFILE}

            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi

            # On AIX a shared library is linked differently when
            # you want to dlopen the file
	    if [ $DLOPEN = "1" ] ; then
		cc -G ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
	    else
		cc ${OPTS} ${LDFLAGS} -o ${OFILE} ${OBJECTS} ${DEPS}
		ar ${X64} -r ${LIBNAME} ${OFILE}
	    fi

            FINAL_LIBS="${LIBNAME}"
        fi
        ;;

    'OpenSTEP')
	LIBNAME="lib${LIBNAME}.a"
	echo "mklib: Making OpenSTEP static library: " ${LIBNAME}
	libtool -static -o ${LIBNAME} - ${OBJECTS}
	FINAL_LIBS=${LIBNAME}
	;;

    'OSF1')
        if [ $STATIC = 1 ] ; then
	    LIBNAME="lib${LIBNAME}.a"
	    echo "mklib: Making OSF/1 static library: " ${LIBNAME}
    	    FINAL_LIBS=`make_ar_static_lib -ruv 0 ${LIBNAME} ${OBJECTS}`
	else
	    VERSION="${MAJOR}.${MINOR}"
	    LIBNAME="lib${LIBNAME}.so"
	    echo "mklib: Making OSF/1 shared library: " ${LIBNAME}
	    if [ "x$LINK" = "x" ] ; then
		if [ $CPLUSPLUS = 1 ] ; then
		    LINK=cxx
		else
		    LINK=cc
		fi
	    fi
	    rm -f ${LIBNAME}.${VERSION}
	    ${LINK} -o ${LIBNAME}.${VERSION} -shared -set_version ${VERSION} -soname ${LIBNAME}.${VERSION} -expect_unresolved \* -all ${OBJECTS} ${DEPS}
	    ln -sf ${LIBNAME}.${VERSION} ${LIBNAME}
	    FINAL_LIBS="${LIBNAME} ${LIBNAME}.${VERSION}"
	fi
	;;

    'Darwin')
        if [ $STATIC = 1 ] ; then
            LIBNAME="lib${LIBNAME}.a"
            echo "mklib: Making Darwin static library: " ${LIBNAME}
            OPTS="-ruvs"
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi

            # expand .a into .o files
            NEW_OBJECTS=`expand_archives ${LIBNAME}.obj $OBJECTS`

            # make static lib
            FINAL_LIBS=`make_ar_static_lib ${OPTS} 1 ${LIBNAME} ${NEW_OBJECTS}`

            # remove temporary extracted .o files
            rm -rf ${LIBNAME}.obj

            FINAL_LIBS=${LIBNAME}
        else
            # On Darwin a .bundle is used for a library that you want to dlopen
            if [ $DLOPEN = "1" ] ; then
                LIBSUFFIX="bundle"
                OPTS="${ARCHOPT} -bundle -multiply_defined suppress"
            else
                LIBSUFFIX="dylib"
                if [ -z "$ID" ] ; then
                    ID="lib${LIBNAME}.${MAJOR}.${LIBSUFFIX}"
                fi
                OPTS="${ARCHOPT} -dynamiclib -multiply_defined suppress -current_version ${MAJOR}.${MINOR}.0 -compatibility_version ${MAJOR}.${MINOR}.0 -install_name ${ID}"
            fi

            if [ ${EXPORTS} ] ; then
                if [ -f ${EXPORTS}".darwin" ] ; then
                    EXPORTS=$EXPORTS".darwin"
                fi
                OPTS="${OPTS} -exported_symbols_list ${EXPORTS}"
            fi

            LINKNAME="lib${LIBNAME}.${LIBSUFFIX}"
            LIBNAME="lib${LIBNAME}.${MAJOR}.${LIBSUFFIX}"

	    # examine first object to determine ABI
    	    set ${OBJECTS}
            ABIS=`lipo -info $1 | sed s/.*://`
            for ABI in $ABIS; do
                OPTS="${OPTS} -arch ${ABI}"
            done

            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi

	    # determine linker
	    if [ $CPLUSPLUS = 1 ] ; then
		LINK="g++"
	    else
		LINK="cc"
	    fi

            echo "mklib: Making Darwin shared library: " ${LIBNAME}

            ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
            ln -s ${LIBNAME} ${LINKNAME}
            FINAL_LIBS="${LIBNAME} ${LINKNAME}"
        fi
        ;;

    'LynxOS')
	LIBNAME="lib${LIBNAME}.a"
	echo "mklib: Making LynxOS static library: " ${LIBNAME}
        FINAL_LIBS=`make_ar_static_lib -ru 0 ${LIBNAME} ${OBJECTS}`
	;;

    'BeOS')
        if [ $STATIC = 1 ] ; then
            LIBNAME="lib${LIBNAME}.a"
            echo "mklib: Making BeOS static library: " ${LIBNAME}
            FINAL_LIBS=`make_ar_static_lib -cru 0 ${LIBNAME} ${OBJECTS}`
        else
	    LIBNAME="lib${LIBNAME}.so"
	    echo "mklib: Making BeOS shared library: " ${LIBNAME}
	    gcc -nostart -Xlinker "-soname=${LIBNAME}" -L/Be/develop/lib/x86 -lbe ${DEPS} ${OBJECTS} -o "${LIBNAME}"
	    mimeset -f "${LIBNAME}"
	    # XXX remove the Mesa3D stuff here since mklib isn't mesa-specific.
	    setversion "${LIBNAME}" -app ${MAJOR} ${MINOR} ${PATCH} -short "Powered by Mesa3D!" -long "Powered by Mesa3D!"
	fi
	FINAL_LIBS=${LIBNAME}
	;;

    'QNX')
	LIBNAME="lib${LIBNAME}.a"
	echo "mklib: Making QNX library: " ${LIBNAME}
	wlib ${LIBNAME} ${OBJECTS}
	FINAL_LIBS=${LIBNAME}
	;;

    'MorphOS')
	LIBNAME="lib${LIBNAME}.a"
	echo "mklib: Making MorphOS library: " ${LIBNAME}
	ppc-morphos-ar rc ${LIBNAME} ${OBJECTS}
	FINAL_LIBS="${LIBNAME}"
	;;

    'icc' | 'icc-istatic')
	# Intel C compiler
	# This should get merged into the Linux code, above, since this isn't
	# really a different architecture.
	LIBNAME="lib${LIBNAME}"     # prefix with "lib"

        if [ $STATIC = 1 ] ; then
            echo "mklib: Making Intel ICC static library: " ${LIBNAME}.a
            LINK="ar"
            OPTS="-ruv"
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
            # make lib
            ${LINK} ${OPTS} ${LIBNAME}.a ${OBJECTS}
            # finish up
            FINAL_LIBS="${LIBNAME}.a"
        else
            if [ $ARCH = icc-istatic ] ; then
                 OPTS="-shared -i-static -cxxlib-icc"
            else
                 OPTS="-shared"
            fi
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "mklib: Making Intel ICC shared library: " ${LIBNAME}.so.${VERSION}

            if [ $CPLUSPLUS = 1 ] ; then
                LINK="icpc"
            else
                LINK="icc"
            fi
            # rm any old libs
            rm -f ${LIBNAME}.so.${VERSION}
            rm -f ${LIBNAME}.so.${MAJOR}
            rm -f ${LIBNAME}.so
            # make lib
            ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME}.so.${VERSION} ${OBJECTS} ${DEPS}
            # make usual symlinks
            ln -s ${LIBNAME}.so.${VERSION} ${LIBNAME}.so.${MAJOR}
            ln -s ${LIBNAME}.so.${MAJOR} ${LIBNAME}.so
            # finish up
            FINAL_LIBS="${LIBNAME}.so.${VERSION} ${LIBNAME}.so.${MAJOR} ${LIBNAME}.so"
        fi
	;;

    'aix-gcc')
	# AIX with gcc
        if [ $STATIC = 1 ] ; then
	    LIBNAME="lib${LIBNAME}.a"
	    echo "mklib: Making AIX GCC static library: " ${LIBNAME}
            FINAL_LIBS=`make_ar_static_lib ru 0 ${LIBNAME} ${OBJECTS}`
	else
	    LIBNAME="lib${LIBNAME}.so"  # prefix with "lib", suffix with ".so"
	    echo "mklib: Making AIX GCC shared library: " ${LIBNAME}
	    # remove old lib
	    rm -f ${LIBNAME}
	    # make the lib
	    gcc -shared -Wl,-G ${OBJECTS} ${DEPS} -o ${LIBNAME}
	    # NOTE: the application linking with this library must specify
	    # the -Wl,-brtl flags to gcc
	    FINAL_LIBS=${LIBNAME}
	fi
	;;

    'ultrix')
	# XXX untested
        if [ $STATIC = 0 ] ; then
	    echo "mklib: Warning shared libs not supported on Ultrix"
	fi
	LIBNAME="lib${LIBNAME}.a"
	echo "mklib: Making static library for Ultrix: " ${LIBNAME}
        FINAL_LIBS=`make_ar_static_lib ru 0 ${LIBNAME} ${OBJECTS}`
	;;

     CYGWIN*)
	# GCC-based environment

	if [ "x$LINK" = "x" ] ; then
	    # -linker was not specified so set default link command now
            if [ $CPLUSPLUS = 1 ] ; then
                LINK=g++
            else
                LINK=gcc
            fi
	fi

	if [ $NOPREFIX = 1 ] ; then
	    # No "lib" or ".so" part
	    echo "mklib: Making CYGWIN shared library: " ${LIBNAME}
	    OPTS="-shared -Wl,--enable-auto-image-base"
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
	    rm -f ${LIBNAME}
	    ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS} || exit $?
	    FINAL_LIBS=${LIBNAME}
        else
	CYGNAME="cyg${LIBNAME}"     # prefix with "cyg"
	LIBNAME="lib${LIBNAME}"     # prefix with "lib"

        if [ $STATIC = 1 ] ; then
	    LIBNAME=${LIBNAME}.a
            echo "mklib: Making CYGWIN static library: " ${LIBNAME}
            OPTS="-ru"
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi

            # expand .a into .o files
            NEW_OBJECTS=`expand_archives ${LIBNAME}.obj $OBJECTS`

            FINAL_LIBS=`make_ar_static_lib ${OPTS} 1 ${LIBNAME} ${NEW_OBJECTS}`

            # remove temporary extracted .o files
            rm -rf ${LIBNAME}.obj
        else
	    OPTS="-shared -Wl,--enable-auto-image-base -Wl,-export-all -Wl,--out-implib=${LIBNAME}-${MAJOR}.dll.a"
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
            echo "mklib: Making CYGWIN shared library: " ${CYGNAME}-${MAJOR}.dll

            # rm any old libs
            rm -f ${CYGNAME}-${MAJOR}.dll
            rm -f ${LIBNAME}-${MAJOR}.dll.a
            rm -f ${LIBNAME}.dll.a
            rm -f ${LIBNAME}.a

            # make lib
            ${LINK} ${OPTS} ${LDFLAGS} -o ${CYGNAME}-${MAJOR}.dll ${OBJECTS} ${DEPS} || exit $?
            # make usual symlinks
            ln -s ${LIBNAME}-${MAJOR}.dll.a ${LIBNAME}.dll.a
            # finish up
            FINAL_LIBS="${LIBNAME}-${MAJOR}.dll.a ${LIBNAME}.dll.a"
	    # special case for installing in bin
            FINAL_BINS="${CYGNAME}-${MAJOR}.dll"
        fi
        fi
	;;

    'example')
	# If you're adding support for a new architecture, you can
	# start with this:
        if [ $STATIC = 1 ] ; then
	    LIBNAME="lib${LIBNAME}.a"
	    echo "mklib: Making static library for example arch: " ${LIBNAME}
            FINAL_LIBS=`make_ar_static_lib rv 0 ${LIBNAME} ${OBJECTS}`
	else
	    LIBNAME="lib${LIBNAME}.so"  # prefix with "lib", suffix with ".so"
	    echo "mklib: Making shared library for example arch: " ${LIBNAME}
	    ld -o ${LIBNAME} ${OBJECTS} ${DEPS}
	    FINAL_LIBS="${LIBNAME}"
	fi
	;;

    *)
	echo "mklib: ERROR: Don't know how to make a static/shared library for" ${ARCH}
	echo "mklib: Please add necessary commands to mklib script."
	;;
esac


#
# Put library files into installation directory if specified.
#
if [ ${INSTALLDIR} != "." ] ; then
    echo "mklib: Installing" ${FINAL_LIBS} "in" ${INSTALLDIR}
    test -d ${INSTALLDIR} || mkdir -p ${INSTALLDIR}
    mv ${FINAL_LIBS} ${INSTALLDIR}/

    if [ "x${FINAL_BINS}" != "x" ] ; then
        echo "mklib: Installing" ${FINAL_BINS} "in" ${INSTALLDIR}
        mv ${FINAL_BINS} ${INSTALLDIR}/
    fi
fi
@


1.8
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.7
log
@Merge Mesa 7.10.3
@
text
@d310 1
a310 1
    'Linux' | 'OpenBSD' | 'DragonFly' | 'GNU' | GNU/*)
a576 14
    'NetBSD')
        if [ $STATIC = 1 ] ; then
	    LIBNAME="lib${LIBNAME}_pic.a"
	    echo "mklib: Making NetBSD PIC static library: " ${LIBNAME}
	    FINAL_LIBS=`make_ar_static_lib cq 1 ${LIBNAME} ${OBJECTS}`
	else
	    LIBNAME="lib${LIBNAME}.so.${MAJOR}.${MINOR}"
	    echo "mklib: Making NetBSD PIC shared library: " ${LIBNAME}
	    rm -f ${LIBNAME}
	    ld -x -Bshareable -Bforcearchive -o ${LIBNAME} ${OBJECTS}
	    FINAL_LIBS=${LIBNAME}
	fi
	;;

d770 2
a771 3
            LINKNAME="lib${LIBNAME}.${MAJOR}.${LIBSUFFIX}"
            LINKNAME2="lib${LIBNAME}.${LIBSUFFIX}"
            LIBNAME="lib${LIBNAME}.${MAJOR}.${MINOR}.${LIBSUFFIX}"
a783 3
	    # XXX can we always add -isysroot /Developer/SDKs/MacOSX10.4u.sdk
	    # to OPTS here?

d795 1
a795 2
            ln -s ${LIBNAME} ${LINKNAME2}
            FINAL_LIBS="${LIBNAME} ${LINKNAME} ${LINKNAME2}"
@


1.6
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d497 1
a497 1
	    # Check if objects are SPARC v9
d501 6
a506 3
		SPARCV9=`file $1 | grep SPARCV9`
		if [ "${SPARCV9}" ] ; then
		    OPTS="${OPTS} -xarch=v9"
d933 10
d951 1
a951 1
	    ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
d959 1
a959 1
            echo "mklib: Making" $ARCH "static library: " ${LIBNAME}
d977 1
a977 7
            echo "mklib: Making" $ARCH "shared library: " ${CYGNAME}-${MAJOR}.dll

            if [ $CPLUSPLUS = 1 ] ; then
                LINK="g++"
            else
                LINK="gcc"
            fi
d986 1
a986 6
            ${LINK} ${OPTS} ${LDFLAGS} -o ${CYGNAME}-${MAJOR}.dll ${OBJECTS} ${DEPS}
            # make build fail if link failed
            es=$?
            if [ "$es" -ne "0" ]; then
                exit $es
            fi
d1026 5
@


1.5
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d28 103
d158 1
a158 25
	    echo 'Usage: mklib [options] objects'
	    echo 'Create a shared library from object files.'
	    echo '  -o LIBRARY    specifies the name of the resulting library, without'
	    echo '                the leading "lib" or any suffix.'
	    echo '                (eg: "-o GL" might result in "libGL.so" being made)'
	    echo '  -major N      specifies major version number (default is 1)'
	    echo '  -minor N      specifies minor version number (default is 0)'
	    echo '  -patch N      specifies patch version number (default is 0)'
	    echo '  -lLIBRARY     specifies a dependency on LIBRARY'
	    echo '  -LDIR         search in DIR for library dependencies at build time'
	    echo '  -RDIR         search in DIR for library dependencies at run time'
	    echo '  -linker L     explicity specify the linker program to use (eg: gcc, g++)'
	    echo '                Not observed on all systems at this time.'
	    echo '  -ldflags OPT  specify any additional linker flags in OPT'
	    echo '  -cplusplus    link with C++ runtime'
	    echo '  -static       make a static library (default is dynamic/shared)'
	    echo '  -dlopen       make a shared library suitable for dynamic loading'
	    echo '  -install DIR  put resulting library file(s) in DIR'
	    echo '  -arch ARCH    override using `uname` to determine host system'
	    echo '  -archopt OPT  specify an extra achitecture-specific option OPT'
	    echo '  -altopts OPTS alternate options to override all others'
	    echo "  -noprefix     don't prefix library name with 'lib' nor add any suffix"
	    echo '  -exports FILE only export the symbols listed in FILE'
	    echo '  -id NAME      Sets the id of the dylib (Darwin)'
	    echo '  -h, --help    display this information and exit'
d258 17
d279 1
a279 1
    echo "mklib: Error: no library name specified"
d283 1
a283 1
    echo "mklib: Error: no object files specified"
d351 1
a353 1
            LINK="ar"
a357 1
            rm -f ${LIBNAME}
d359 2
a360 16
	    # expand any .a objects into constituent .o files.
	    NEWOBJECTS=""
	    DELETIA=""
	    for OBJ in ${OBJECTS} ; do
		if [ `expr match $OBJ '.*\.a'` -gt 0 ] ; then
		    # extract the .o files from this .a archive
		    FILES=`ar t $OBJ`
		    ar x $OBJ
		    NEWOBJECTS="$NEWOBJECTS $FILES"
		    # keep track of temporary .o files and delete them below
		    DELETIA="$DELETIA $FILES"
		else
		    # ordinary .o file
		    NEWOBJECTS="$NEWOBJECTS $OBJ"
		fi
	    done
d362 2
a363 3
            # make lib
            ${LINK} ${OPTS} ${LIBNAME} ${NEWOBJECTS}
            ranlib ${LIBNAME}
d366 1
a366 4
	    rm -f ${DELETIA}

            # finish up
            FINAL_LIBS=${LIBNAME}
d368 1
d429 1
a429 3
	    rm -f ${LIBNAME}
	    ar -ruv ${LIBNAME} ${OBJECTS}
	    FINAL_LIBS=${LIBNAME}
d548 1
d551 8
a558 4
	    rm -f ${STLIB}
	    ar cq ${STLIB} ${OBJECTS}
	    ranlib ${STLIB}
	    FINAL_LIBS=${STLIB}
d560 1
d578 1
a578 4
	    rm -f ${LIBNAME}
	    ar cq ${LIBNAME} ${OBJECTS}
	    ranlib ${LIBNAME}
	    FINAL_LIBS=${LIBNAME}
d591 1
a591 3
	    rm -f ${LIBNAME}
	    ar rc ${LIBNAME} ${OBJECTS}
	    FINAL_LIBS=${LIBNAME}
d642 1
a642 3
	    rm -f ${LIBNAME}
	    ar -ruv ${LIBNAME} ${OBJECTS}
	    FINAL_LIBS=${LIBNAME}
d672 1
a672 2
	    ar -ruv ${X64} ${LIBNAME} ${OBJECTS}
	    FINAL_LIBS=${LIBNAME}
d723 1
a723 3
	    rm -f ${LIBNAME}
	    ar -ruv ${LIBNAME} ${OBJECTS}
	    FINAL_LIBS=${LIBNAME}
a745 1
            LINK="ar"
d750 10
a759 1
            ${LINK} ${OPTS} ${LIBNAME} ${OBJECTS}
d787 4
a790 16
            ABI_PPC=`file $1 | grep ' ppc'`
            ABI_I386=`file $1 | grep ' i386'`
            ABI_PPC64=`file $1 | grep ' ppc64'`
            ABI_X86_64=`file $1 | grep ' x86_64'`
            if [ "${ABI_PPC}" ] ; then
                OPTS="${OPTS} -arch ppc"
            fi
            if [ "${ABI_I386}" ] ; then
                OPTS="${OPTS} -arch i386"
            fi
            if [ "${ABI_PPC64}" ] ; then
                OPTS="${OPTS} -arch ppc64"
            fi
            if [ "${ABI_X86_64}" ] ; then
                OPTS="${OPTS} -arch x86_64"
            fi
d818 1
a818 3
	rm -f ${LIBNAME}
	ar ru ${LIBNAME} ${OBJECTS}
	FINAL_LIBS=${LIBNAME}
d825 1
a825 1
            ar -cru "${LIBNAME}" ${OBJECTS}
d904 1
a904 3
	    rm -f ${LIBNAME}
	    ar ru ${LIBNAME} ${OBJECTS}
	    FINAL_LIBS=${LIBNAME}
d925 1
a925 3
	rm -f ${LIBNAME}
	ar ru ${LIBNAME} ${OBJECTS}
	FINAL_LIBS="${LIBNAME}"
d930 11
d945 2
a946 2
            echo "mklib: Making" $ARCH "static library: " ${LIBNAME}.a
            LINK="ar"
d951 8
a958 5
            # make lib
            ${LINK} ${OPTS} ${LIBNAME}.a ${OBJECTS}
	    ranlib ${LIBNAME}.a
            # finish up
            FINAL_LIBS=${LIBNAME}.a
d960 1
a960 1
	    OPTS="-shared -Wl,-export-all -Wl,--out-implib=${LIBNAME}-${MAJOR}.dll.a"
d964 1
a964 1
            echo "mklib: Making" $ARCH "shared library: " ${LIBNAME}-${MAJOR}.dll
d973 2
a974 1
            rm -f ${LIBNAME}-${MAJOR}.dll
d980 5
d992 1
d1001 1
a1001 3
	    rm -f ${LIBNAME}
	    ar rv ${LIBNAME} ${OBJECTS}
	    FINAL_LIBS="${LIBNAME}"
d1022 1
@


1.4
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d397 24
d433 1
d439 1
d444 1
a445 1
	    FINAL_LIBS="${LIBNAME}.${MAJOR} ${LIBNAME}"
@


1.3
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d46 1
a46 1

d64 2
a65 1
	    echo '  -LDIR         search in DIR for library dependencies'
d78 1
d112 6
d157 4
d204 1
d214 1
a214 1
    'Linux' | 'OpenBSD' | 'GNU' | GNU/*)
d263 18
d282 1
a282 1
            ${LINK} ${OPTS} ${LIBNAME} ${OBJECTS}
d284 4
d302 1
a302 1
		echo "VERSION_${MAJOR}.${MINOR} {" > exptmp
d371 1
a371 1
			echo "mklib: warning: can't find C++ comiler, trying CC."
d400 5
a404 3
	    SPARCV9=`file $1 | grep SPARCV9`
	    if [ "${SPARCV9}" ] ; then
		OPTS="${OPTS} -xarch=v9"
d416 1
a416 1
		${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME}.${MAJOR} ${OBJECTS} ${DEPS}
d661 5
a665 2
		LIBSUFFIX="dylib"
                OPTS="${ARCHOPT} -dynamiclib -multiply_defined suppress -current_version ${MAJOR}.${MINOR}.0 -compatibility_version ${MAJOR}.${MINOR}.0 -install_name lib${LIBNAME}.${MAJOR}.${LIBSUFFIX}"
d669 3
d673 1
a673 1
            fi 
@


1.2
log
@Update to Mesa 7.0.2. Tested by naddy@@ (full ports build), simon@@
and oga@@ (with dri enabled).
@
text
@d74 1
a114 1
	    # for FreeBSD
d138 4
d216 7
a222 2
	    #OPTS="-shared -Wl,-soname,${LIBNAME}"  # soname???
	    OPTS="-shared"
d232 4
d246 3
d284 3
d369 3
a371 1

d402 3
d418 3
d474 4
d558 4
d613 3
d627 8
a634 2
            LINKNAME="lib${LIBNAME}.${LIBSUFFIX}"
            LIBNAME="lib${LIBNAME}.${MAJOR}.${LIBSUFFIX}"
d638 20
a657 8
	    ABI_PPC=`file $1 | grep 'object ppc'`
	    ABI_I386=`file $1 | grep 'object i386'`
	    if [ "${ABI_PPC}" ] ; then
		OPTS="${OPTS} -arch ppc"
	    fi
	    if [ "${ABI_I386}" ] ; then
		OPTS="${OPTS} -arch i386"
	    fi
d670 1
d673 2
a674 1
            FINAL_LIBS="${LIBNAME} ${LINKNAME}"
d726 3
d739 3
d806 3
d816 3
@


1.1
log
@Initial revision
@
text
@d37 1
d67 1
d99 4
d109 8
d225 1
a225 1
            ${LINK} ${OPTS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
d229 2
a230 2
	    LIBNAME="lib${LIBNAME}"     # prefix with "lib"
            echo "mklib: Making" $ARCH "static library: " ${LIBNAME}.a
d233 1
d235 2
a236 2
            ${LINK} ${OPTS} ${LIBNAME}.a ${OBJECTS}
	    ranlib ${LIBNAME}.a
d238 1
a238 1
            FINAL_LIBS=${LIBNAME}.a
d283 1
a283 1
            ${LINK} ${OPTS} -o ${LIBNAME}.so.${VERSION} ${OBJECTS} ${DEPS}
d301 3
a303 1
	    LIBNAME="lib${LIBNAME}.so"
d353 8
a360 3
	    rm -f ${LIBNAME}.${MAJOR} ${LIBNAME}
	    ${LINK} ${OPTS} -o ${LIBNAME}.${MAJOR} ${OBJECTS} ${DEPS}
	    ln -s ${LIBNAME}.${MAJOR} ${LIBNAME}
d382 1
a382 1
	    ${LINK} ${OPTS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
d396 1
a396 1
	    ${LINK} ${OPTS} -o ${SHLIB} ${OBJECTS} ${DEPS}
d454 1
a454 1
	    ${LINK} ${OPTS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
d530 1
a530 1
		cc -G ${OPTS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
d532 1
a532 1
		cc ${OPTS} -o ${OFILE} ${OBJECTS} ${DEPS}
d614 1
a614 1
            ${LINK} ${OPTS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
d691 1
a691 1
            ${LINK} ${OPTS} -o ${LIBNAME}.so.${VERSION} ${OBJECTS} ${DEPS}
d763 1
a763 1
            ${LINK} ${OPTS} -o ${CYGNAME}-${MAJOR}.dll ${OBJECTS} ${DEPS}
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d286 1
a286 3
	    if [ $NOPREFIX = 0 ] ; then
		LIBNAME="lib${LIBNAME}.so"
	    fi
d336 3
a338 8
	    if [ $NOPREFIX = 1 ] ; then
		rm -f ${LIBNAME}
		${LINK} ${OPTS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
	    else
		rm -f ${LIBNAME}.${MAJOR} ${LIBNAME}
		${LINK} ${OPTS} -o ${LIBNAME}.${MAJOR} ${OBJECTS} ${DEPS}
		ln -s ${LIBNAME}.${MAJOR} ${LIBNAME}
	    fi
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@a102 8
	-pthread)
	    # this is a special case (see bugzilla 10876)
	    DEPS="$DEPS $1"
	    ;;
	'-pthread')
	    # for FreeBSD
	    DEPS="$DEPS -pthread"
	    ;;
d215 2
a216 2
            LIBNAME="lib${LIBNAME}.a"     # prefix with "lib", suffix with ".a"
            echo "mklib: Making" $ARCH "static library: " ${LIBNAME}
a218 1
            rm -f ${LIBNAME}
d220 2
a221 2
            ${LINK} ${OPTS} ${LIBNAME} ${OBJECTS}
            ranlib ${LIBNAME}
d223 1
a223 1
            FINAL_LIBS=${LIBNAME}
@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@a27 103
# Clear CDPATH as the 'cd' command will echo stuff
# to stdout if it is set
unset CDPATH

# Given a list of files, look for .a archives and unpack them.
# Return the original list of files minus the .a files plus the unpacked files.
# first param:  name of a temp directory (to be deleted when finished)
# remaining params:  list of .o and .a files
expand_archives() {
    DIR=$1
    shift
    FILES=$@@
    NEWFILES=""
    ORIG_DIR=`pwd`
    mkdir -p "$DIR"
    cd "$DIR"
    for FILE in $FILES ; do
        case $FILE in
            *.a)
                # extract the .o files from this .a archive
                case $FILE in
                    /*) ;;
                    *)  FILE="$ORIG_DIR/$FILE" ;;
                esac
                MEMBERS=`ar t $FILE`
                ar x $FILE
                for MEMBER in $MEMBERS ; do
                    NEWFILES="$NEWFILES $DIR/$MEMBER"
                done
                ;;
            *)
                # other file type, just add to list
                NEWFILES="$NEWFILES $FILE"
                ;;
        esac
    done
    cd "$ORIG_DIR"
    echo $NEWFILES
}


# Make static library with 'ar'
# params:
#    options to ar
#    1 or 0 to indicate if ranlib should be run
#    libname to make
#    list of object files
# Return name of library we made
# Example: "make_ar_static_lib -ru 1 libfoo.a foo.o bar.o"
make_ar_static_lib() {
    OPTS=$1
    shift;
    RANLIB=$1
    shift;
    LIBNAME=$1
    shift;
    OBJECTS=$@@

    # remove existing lib, if present
    rm -f ${LIBNAME}

    # make static lib
    ar ${OPTS} ${LIBNAME} ${OBJECTS}

    # run ranlib
    if [ ${RANLIB} = 1 ] ; then
        ranlib ${LIBNAME}
    fi

    echo ${LIBNAME}
}


# Print usage info.
usage() {
    echo 'Usage: mklib [options] objects'
    echo 'Create a shared library from object files.'
    echo '  -o LIBRARY    specifies the name of the resulting library, without'
    echo '                the leading "lib" or any suffix.'
    echo '                (eg: "-o GL" might result in "libGL.so" being made)'
    echo '  -major N      specifies major version number (default is 1)'
    echo '  -minor N      specifies minor version number (default is 0)'
    echo '  -patch N      specifies patch version number (default is 0)'
    echo '  -lLIBRARY     specifies a dependency on LIBRARY'
    echo '  -LDIR         search in DIR for library dependencies at build time'
    echo '  -RDIR         search in DIR for library dependencies at run time'
    echo '  -linker L     explicity specify the linker program to use (eg: gcc, g++)'
    echo '                Not observed on all systems at this time.'
    echo '  -ldflags OPT  specify any additional linker flags in OPT'
    echo '  -cplusplus    link with C++ runtime'
    echo '  -static       make a static library (default is dynamic/shared)'
    echo '  -dlopen       make a shared library suitable for dynamic loading'
    echo '  -install DIR  put resulting library file(s) in DIR'
    echo '  -arch ARCH    override using `uname` to determine host system'
    echo '  -archopt OPT  specify an extra achitecture-specific option OPT'
    echo '  -altopts OPTS alternate options to override all others'
    echo "  -noprefix     don't prefix library name with 'lib' nor add any suffix"
    echo '  -exports FILE only export the symbols listed in FILE'
    echo '  -id NAME      Sets the id of the dylib (Darwin)'
    echo '  -h, --help    display this information and exit'
}


a36 1
LDFLAGS=""
d45 1
a45 1
ID=""
d54 21
a74 1
	    usage
a96 4
	'-ldflags')
	    shift 1;
	    LDFLAGS=$1
	    ;;
a102 6
	-R*)
	    DEPS="$DEPS $1"
	    ;;
	-Wl*)
            DEPS="$DEPS $1"
            ;;
d108 1
a131 4
	'-altopts')
            shift 1;
            ALTOPTS=$1
            ;;
a138 4
	'-id')
	    shift 1;
	    ID=$1
	    ;;
a156 17
if [ $STATIC = 1 ]; then
    # filter out linker options inside object list
    NEWOBJECTS=""
    for OBJ in $OBJECTS ; do
	case $OBJ in
	    -Wl,*)
		echo "mklib: warning: ignoring $OBJ for static library"
		;;
	    *)
		NEWOBJECTS="$NEWOBJECTS $OBJ"
		;;
	esac
    done
    OBJECTS=$NEWOBJECTS
fi


d161 1
a161 1
    echo "mklib: Error: no library name specified (-h for help)"
d165 1
a165 1
    echo "mklib: Error: no object files specified (-h for help)"
a181 1
    echo ID is $ID
d191 1
a191 1
    'Linux' | 'OpenBSD' | 'DragonFly' | 'GNU' | GNU/*)
d206 2
a207 7
	    case $ARCH in 'Linux' | 'GNU' | GNU/*)
		OPTS="-Xlinker -Bsymbolic -shared"
	    ;;
	    *)
		OPTS="-shared"
	    ;;
	    esac
a216 4
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi

d219 1
a219 1
            ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
a222 1
	    # make a static .a library
d225 1
d227 6
a232 12
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi

	    # expand .a into .o files
	    NEW_OBJECTS=`expand_archives ${LIBNAME}.obj $OBJECTS`

            # make static lib
	    FINAL_LIBS=`make_ar_static_lib ${OPTS} 1 ${LIBNAME} ${NEW_OBJECTS}`

	    # remove temporary extracted .o files
	    rm -rf ${LIBNAME}.obj
a233 1
	    # make dynamic library
d245 1
a245 1
		echo "{" > exptmp
a261 3
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
d277 1
a277 1
            ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME}.so.${VERSION} ${OBJECTS} ${DEPS}
d291 3
a293 1
	    FINAL_LIBS=`make_ar_static_lib -ruc 0 ${LIBNAME} ${OBJECTS}`
d311 1
a311 1
			echo "mklib: warning: can't find C++ compiler, trying CC."
d337 1
a337 25
	    # If using Sun C++ compiler, need to tell it not to add runpaths
	    # that are specific to the build machine
	    if [ ${LINK} = "CC" ] ; then
		OPTS="${OPTS} -norunpath"
	    fi

	    # Solaris linker requires explicitly listing the Standard C & C++
	    # libraries in the link path when building shared objects
	    if [ ${LINK} = "CC" ] ; then
		DEPS="${DEPS} -lCrun"
	    fi
	    DEPS="${DEPS} -lc"

	    if [ $EXPORTS ] ; then
		# Make the 'mapfile.scope' linker mapfile
		echo "{" > mapfile.scope
		echo "global:" >> mapfile.scope
		sed 's/$/;/' ${EXPORTS} >> mapfile.scope
		echo "local:" >> mapfile.scope
		echo "    *;" >> mapfile.scope
		echo "};" >> mapfile.scope
		OPTS="${OPTS} -Wl,-Mmapfile.scope"
	    fi

	    # Check if objects are 64-bit
d340 3
a342 8
	    if [ ${LINK} = "cc" -o ${LINK} = "CC" ] ; then
		ABI64=`file $1 | grep "ELF 64-bit"`
		if [ "${ABI64}" ] ; then
		    case `uname -p` in
			sparc)	    OPTS="${OPTS} -xarch=v9" ;;
			i386)	    OPTS="${OPTS} -xarch=amd64" ;;
		    esac
		fi
a343 3
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
d349 1
a349 2
		${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
		FINAL_LIBS="${LIBNAME}"
d352 1
a352 1
		${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME}.${MAJOR} -h ${LIBNAME}.${MAJOR} ${OBJECTS} ${DEPS}
a353 1
		FINAL_LIBS="${LIBNAME}.${MAJOR} ${LIBNAME}"
d355 1
a374 3
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
d376 1
a376 1
	    ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
a378 1
	    # make a static .a library
d381 4
a384 8

	    # expand .a into .o files
	    NEW_OBJECTS=`expand_archives ${STLIB}.obj $OBJECTS`

	    FINAL_LIBS=`make_ar_static_lib cq 1 ${STLIB} ${NEW_OBJECTS}`

	    # remove temporary extracted .o files
	    rm -rf ${STLIB}.obj
a385 1
	    # make dynamic library
a387 3
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
d390 1
a390 1
	    ${LINK} ${OPTS} ${LDFLAGS} -o ${SHLIB} ${OBJECTS} ${DEPS}
d400 4
a403 1
	    FINAL_LIBS=`make_ar_static_lib cq 1 ${LIBNAME} ${OBJECTS}`
d416 3
a418 1
	    FINAL_LIBS=`make_ar_static_lib rc 0 ${LIBNAME} ${OBJECTS}`
a440 4
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi

d448 1
a448 1
	    ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
d465 3
a467 1
    	    FINAL_LIBS=`make_ar_static_lib -ruv 0 ${LIBNAME} ${OBJECTS}`
d497 2
a498 1
    	    FINAL_LIBS=`make_ar_static_lib -ruv 0 ${LIBNAME} ${OBJECTS}`
a520 4
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi

d524 1
a524 1
		cc -G ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
d526 1
a526 1
		cc ${OPTS} ${LDFLAGS} -o ${OFILE} ${OBJECTS} ${DEPS}
d545 3
a547 1
    	    FINAL_LIBS=`make_ar_static_lib -ruv 0 ${LIBNAME} ${OBJECTS}`
d570 1
d572 1
a572 13
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi

            # expand .a into .o files
            NEW_OBJECTS=`expand_archives ${LIBNAME}.obj $OBJECTS`

            # make static lib
            FINAL_LIBS=`make_ar_static_lib ${OPTS} 1 ${LIBNAME} ${NEW_OBJECTS}`

            # remove temporary extracted .o files
            rm -rf ${LIBNAME}.obj

d580 2
a581 12
                LIBSUFFIX="dylib"
                if [ -z "$ID" ] ; then
                    ID="lib${LIBNAME}.${MAJOR}.${LIBSUFFIX}"
                fi
                OPTS="${ARCHOPT} -dynamiclib -multiply_defined suppress -current_version ${MAJOR}.${MINOR}.0 -compatibility_version ${MAJOR}.${MINOR}.0 -install_name ${ID}"
            fi

            if [ ${EXPORTS} ] ; then
                if [ -f ${EXPORTS}".darwin" ] ; then
                    EXPORTS=$EXPORTS".darwin"
                fi
                OPTS="${OPTS} -exported_symbols_list ${EXPORTS}"
d583 2
a584 4

            LINKNAME="lib${LIBNAME}.${MAJOR}.${LIBSUFFIX}"
            LINKNAME2="lib${LIBNAME}.${LIBSUFFIX}"
            LIBNAME="lib${LIBNAME}.${MAJOR}.${MINOR}.${LIBSUFFIX}"
d588 8
a595 8
            ABIS=`lipo -info $1 | sed s/.*://`
            for ABI in $ABIS; do
                OPTS="${OPTS} -arch ${ABI}"
            done

            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
d608 1
a608 2

            ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS}
d610 1
a610 2
            ln -s ${LIBNAME} ${LINKNAME2}
            FINAL_LIBS="${LIBNAME} ${LINKNAME} ${LINKNAME2}"
d617 3
a619 1
        FINAL_LIBS=`make_ar_static_lib -ru 0 ${LIBNAME} ${OBJECTS}`
d626 1
a626 1
            FINAL_LIBS=`make_ar_static_lib -cru 0 ${LIBNAME} ${OBJECTS}`
a661 3
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
a671 3
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
d685 1
a685 1
            ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME}.so.${VERSION} ${OBJECTS} ${DEPS}
d699 3
a701 1
            FINAL_LIBS=`make_ar_static_lib ru 0 ${LIBNAME} ${OBJECTS}`
d722 3
a724 1
        FINAL_LIBS=`make_ar_static_lib ru 0 ${LIBNAME} ${OBJECTS}`
a728 21

	if [ "x$LINK" = "x" ] ; then
	    # -linker was not specified so set default link command now
            if [ $CPLUSPLUS = 1 ] ; then
                LINK=g++
            else
                LINK=gcc
            fi
	fi

	if [ $NOPREFIX = 1 ] ; then
	    # No "lib" or ".so" part
	    echo "mklib: Making CYGWIN shared library: " ${LIBNAME}
	    OPTS="-shared -Wl,--enable-auto-image-base"
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
	    rm -f ${LIBNAME}
	    ${LINK} ${OPTS} ${LDFLAGS} -o ${LIBNAME} ${OBJECTS} ${DEPS} || exit $?
	    FINAL_LIBS=${LIBNAME}
        else
d733 2
a734 2
	    LIBNAME=${LIBNAME}.a
            echo "mklib: Making CYGWIN static library: " ${LIBNAME}
d736 8
a743 3
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
            fi
d745 4
a748 11
            # expand .a into .o files
            NEW_OBJECTS=`expand_archives ${LIBNAME}.obj $OBJECTS`

            FINAL_LIBS=`make_ar_static_lib ${OPTS} 1 ${LIBNAME} ${NEW_OBJECTS}`

            # remove temporary extracted .o files
            rm -rf ${LIBNAME}.obj
        else
	    OPTS="-shared -Wl,--enable-auto-image-base -Wl,-export-all -Wl,--out-implib=${LIBNAME}-${MAJOR}.dll.a"
            if [ "${ALTOPTS}" ] ; then
                OPTS=${ALTOPTS}
a749 1
            echo "mklib: Making CYGWIN shared library: " ${CYGNAME}-${MAJOR}.dll
d752 1
a752 2
            rm -f ${CYGNAME}-${MAJOR}.dll
            rm -f ${LIBNAME}-${MAJOR}.dll.a
d757 1
a757 1
            ${LINK} ${OPTS} ${LDFLAGS} -o ${CYGNAME}-${MAJOR}.dll ${OBJECTS} ${DEPS} || exit $?
a764 1
        fi
d773 3
a775 1
            FINAL_LIBS=`make_ar_static_lib rv 0 ${LIBNAME} ${OBJECTS}`
a795 1
    test -d ${INSTALLDIR} || mkdir -p ${INSTALLDIR}
a796 5

    if [ "x${FINAL_BINS}" != "x" ] ; then
        echo "mklib: Installing" ${FINAL_BINS} "in" ${INSTALLDIR}
        mv ${FINAL_BINS} ${INSTALLDIR}/
    fi
@


