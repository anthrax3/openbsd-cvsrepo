head	1.2;
access;
symbols
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2011.05.31.18.50.20;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2006.11.25.18.56.37;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.56.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove MesaDemos contents. Not used by Xenocara builds anymore.
@
text
@// Small app to display GL infos

#include <stdio.h>
#include <string.h>

#include <Application.h>
#include <Window.h>
#include <OutlineListView.h>
#include <ScrollView.h>
#include <GLView.h>

#include <String.h>

#include <GL/gl.h>
#include <GL/glu.h>

#define GLUT_INFO 1
#ifdef GLUT_INFO
	#include <GL/glut.h>
#endif


class GLInfoWindow : public BWindow 
{
public:
   GLInfoWindow(BRect frame);
   virtual bool   QuitRequested() { be_app->PostMessage(B_QUIT_REQUESTED); return true; }
   
private:
	BGLView 			*gl;
	BOutlineListView	*list;
	BScrollView			*scroller;
};


class GLInfoApp : public BApplication
{
public:
   GLInfoApp();
private:
   GLInfoWindow      *window;
};


GLInfoApp::GLInfoApp()
   : BApplication("application/x-vnd.OBOS-GLInfo")
{
   window = new GLInfoWindow(BRect(50, 50, 350, 350));
}

GLInfoWindow::GLInfoWindow(BRect frame)
   : BWindow(frame, "OpenGL Info", B_TITLED_WINDOW, 0)
{
	BRect	r = Bounds();
	char *s;
	BString l;

	// Add a outline list view
	r.right -= B_V_SCROLL_BAR_WIDTH;
	list 		= new BOutlineListView(r, "GLInfoList", B_SINGLE_SELECTION_LIST, B_FOLLOW_ALL_SIDES);
	scroller 	= new BScrollView("GLInfoListScroller", list, B_FOLLOW_ALL_SIDES,
						B_WILL_DRAW | B_FRAME_EVENTS, false, true);
						
	gl = new BGLView(r, "opengl", B_FOLLOW_ALL_SIDES, 0, BGL_RGB | BGL_DOUBLE);
	gl->Hide();
	AddChild(gl);
	AddChild(scroller);
	
	Show();
	
	LockLooper();
	
	// gl->LockGL();
	
	list->AddItem(new BStringItem("OpenGL", 0));

	s = (char *) glGetString(GL_VENDOR);
	if (s) {
		l = ""; l << "Vendor Name: " << s;
		list->AddItem(new BStringItem(l.String(), 1));
	}

	s = (char *) glGetString(GL_VERSION);
	if (s) {
		l = ""; l << "Version: " << s;
		list->AddItem(new BStringItem(l.String(), 1));
	}
	
	s = (char *) glGetString(GL_RENDERER);
	if (s) {
		l = ""; l << "Renderer Name: " << s;
		list->AddItem(new BStringItem(l.String(), 1));
	}

	s = (char *) glGetString(GL_EXTENSIONS);
	if (s) {
		list->AddItem(new BStringItem("Extensions", 1));
		while (*s) {
			char extname[255];
			int n = strcspn(s, " ");
			strncpy(extname, s, n);
			extname[n] = 0;
			list->AddItem(new BStringItem(extname, 2));
			if (! s[n])
				break;
			s += (n + 1);	// next !
		}
	}

	list->AddItem(new BStringItem("GLU", 0));
	s = (char *) gluGetString(GLU_VERSION);
	if (s) {
		l = ""; l << "Version: " << s;
		list->AddItem(new BStringItem(l.String(), 1));
	}

	s = (char *) gluGetString(GLU_EXTENSIONS);
	if (s) {
		list->AddItem(new BStringItem("Extensions", 1));
		while (*s) {
			char extname[255];
			int n = strcspn(s, " ");
			strncpy(extname, s, n);
			extname[n] = 0;
			list->AddItem(new BStringItem(extname, 2));
			if (! s[n])
				break;
			s += (n + 1);	// next !
		}
	}

#ifdef GLUT_INFO
	list->AddItem(new BStringItem("GLUT", 0));
	l = "API version: "; l << GLUT_API_VERSION;
	list->AddItem(new BStringItem(l.String(), 1));
#endif

	// gl->UnlockGL();

	UnlockLooper();
}



int main(int argc, char *argv[])
{
   GLInfoApp *app = new GLInfoApp;
   app->Run();
   delete app;
   return 0;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import MesaDemos 6.5.1
@
text
@@
