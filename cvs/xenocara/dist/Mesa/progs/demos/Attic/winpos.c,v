head	1.3;
access;
symbols
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2011.05.31.18.50.20;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2010.05.22.20.05.55;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.57.11;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.57.11;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.26.10;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove MesaDemos contents. Not used by Xenocara builds anymore.
@
text
@
/*
 * Example of how to use the GL_MESA_window_pos extension.
 * Brian Paul   This file is in the public domain.
 */

#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#ifdef _WIN32
#include <windows.h>
#endif
#include "GL/glew.h"
#include "GL/glut.h"

#include "readtex.h"

#define IMAGE_FILE "../images/girl.rgb"


#ifndef M_PI
#  define M_PI 3.14159265
#endif



static GLubyte *Image;
static int ImgWidth, ImgHeight;
static GLenum ImgFormat;

static PFNGLWINDOWPOS2FPROC WindowPosFunc;

static void draw( void )
{
   GLfloat angle;

   glClear( GL_COLOR_BUFFER_BIT );

   for (angle = -45.0; angle <= 135.0; angle += 10.0) {
      GLfloat x = 50.0 + 200.0 * cos( angle * M_PI / 180.0 );
      GLfloat y = 50.0 + 200.0 * sin( angle * M_PI / 180.0 );

      /* Don't need to worry about the modelview or projection matrices!!! */
      (*WindowPosFunc)( x, y );

      glDrawPixels( ImgWidth, ImgHeight, ImgFormat, GL_UNSIGNED_BYTE, Image );
   }
   glFinish();
}


static void key( unsigned char key, int x, int y )
{
   (void) x;
   (void) y;
   switch (key) {
      case 27:
         exit(0);
   }
}


/* new window size or exposure */
static void reshape( int width, int height )
{
   glViewport(0, 0, (GLint)width, (GLint)height);
}


static void init( void )
{
   if (GLEW_ARB_window_pos) {
      printf("Using GL_ARB_window_pos\n");
      WindowPosFunc = glWindowPos2fARB;
   }
   else
   if (GLEW_MESA_window_pos) {
      printf("Using GL_MESA_window_pos\n");
      WindowPosFunc = glWindowPos2fMESA;
   }
   else
   {
      printf("Sorry, GL_ARB/MESA_window_pos extension not available.\n");
      exit(1);
   }

   Image = LoadRGBImage( IMAGE_FILE, &ImgWidth, &ImgHeight, &ImgFormat );
   if (!Image) {
      printf("Couldn't read %s\n", IMAGE_FILE);
      exit(0);
   }
   glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
}


int main( int argc, char *argv[] )
{
   glutInitWindowSize(500, 500);
   glutInit(&argc, argv);
   glutInitDisplayMode( GLUT_RGB );

   if (glutCreateWindow("winpos") <= 0) {
      exit(0);
   }

   glewInit();

   init();

   glutReshapeFunc( reshape );
   glutKeyboardFunc( key );
   glutDisplayFunc( draw );
   glutMainLoop();
   return 0;
}
@


1.2
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
#define GL_GLEXT_PROTOTYPES
d32 1
a32 2
typedef void (APIENTRY * PFNWINDOWPOSFUNC)(GLfloat x, GLfloat y);
static PFNWINDOWPOSFUNC WindowPosFunc;
d73 1
a73 2
#ifdef GL_ARB_window_pos
   if (glutExtensionSupported("GL_ARB_window_pos")) {
d75 1
a75 1
      WindowPosFunc = &glWindowPos2fARB;
d78 1
a78 2
#elif defined(GL_ARB_window_pos)
   if (glutExtensionSupported("GL_MESA_window_pos")) {
d80 1
a80 1
      WindowPosFunc = &glWindowPos2fMESA;
a82 1
#endif
a98 1
   glutInitWindowPosition(0, 0);
d100 1
d106 2
@


1.1.1.1
log
@Import MesaDemos 6.5.1
@
text
@@


1.1.1.2
log
@Mesa 7.0.1
@
text
@d80 1
a80 1
#elif defined(GL_MESA_window_pos)
a102 1
   glutInit(&argc, argv);
@

