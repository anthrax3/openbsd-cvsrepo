head	1.3;
access;
symbols
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2011.05.31.18.50.27;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2010.05.22.20.06.01;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.14.58.09;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove MesaDemos contents. Not used by Xenocara builds anymore.
@
text
@/*
 * Copyright (c) 1991, 1992, 1993 Silicon Graphics, Inc.
 *
 * Permission to use, copy, modify, distribute, and sell this software and
 * its documentation for any purpose is hereby granted without fee, provided
 * that (i) the above copyright notices and this permission notice appear in
 * all copies of the software and related documentation, and (ii) the name of
 * Silicon Graphics may not be used in any advertising or
 * publicity relating to the software without the specific, prior written
 * permission of Silicon Graphics.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF
 * ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL SILICON GRAPHICS BE LIABLE FOR
 * ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND,
 * OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
 * WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF
 * LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
 * OF THIS SOFTWARE.
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <GL/glut.h>

static GLenum doubleBuffer;
static GLint cullmode = 0;
static GLenum front = GL_CCW; /* GL default */

static void cull(void)
{
   cullmode = (cullmode + 1) % 4;
   if (cullmode == 0) {
      glCullFace(GL_FRONT);
      glEnable(GL_CULL_FACE);
      printf("cull GL_FRONT\n");
   }
   else if (cullmode == 1) {
      glCullFace(GL_BACK);
      glEnable(GL_CULL_FACE);
      printf("cull GL_BACK\n");
   }
   else if (cullmode == 2) {
      glCullFace(GL_FRONT_AND_BACK);
      glEnable(GL_CULL_FACE);
      printf("cull GL_FRONT_AND_BACK\n");
   }
   else {
      glDisable(GL_CULL_FACE);
      printf("cull none\n");
   }
}

static void Init(void)
{
   fprintf(stderr, "GL_RENDERER   = %s\n", (char *) glGetString(GL_RENDERER));
   fprintf(stderr, "GL_VERSION    = %s\n", (char *) glGetString(GL_VERSION));
   fprintf(stderr, "GL_VENDOR     = %s\n", (char *) glGetString(GL_VENDOR));
   fflush(stderr);
   glClearColor(0.0, 0.0, 1.0, 0.0);
   cull();
}

static void Reshape(int width, int height)
{
    glViewport(0, 0, (GLint)width, (GLint)height);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-1.0, 1.0, -1.0, 1.0, -0.5, 1000.0);
    glMatrixMode(GL_MODELVIEW);
}

static void Key(unsigned char key, int x, int y)
{
   switch (key) {
   case 27:
      exit(1);
   case 'c':
      cull();
      break;
   case 'f':
      front = ((front == GL_CCW) ? GL_CW : GL_CCW);
      glFrontFace(front);
      printf("front face = %s\n", front == GL_CCW ? "GL_CCW" : "GL_CW");
      break;
   default:
      return;
   }
   glutPostRedisplay();
}

static void Draw(void)
{
   glClear(GL_COLOR_BUFFER_BIT); 

   glBegin(GL_TRIANGLES);
   /* CCW / front-facing */
   glColor3f(0,0,.7); 
   glVertex3f(-0.1, -0.9, -30.0);
   glColor3f(.8,0,0); 
   glVertex3f(-0.1,  0.9, -30.0);
   glColor3f(0,.9,0); 
   glVertex3f(-0.9,  0.0, -30.0);

   /* CW / back-facing */
   glColor3f(0,0,.7); 
   glVertex3f( 0.1, -0.9, -30.0);
   glColor3f(.8,0,0); 
   glVertex3f( 0.1,  0.9, -30.0);
   glColor3f(0,.9,0); 
   glVertex3f( 0.9,  0.0, -30.0);

   glEnd();

   glFlush();

   if (doubleBuffer) {
      glutSwapBuffers();
   }
}

static GLenum Args(int argc, char **argv)
{
    GLint i;

    doubleBuffer = GL_FALSE;

    for (i = 1; i < argc; i++) {
        if (strcmp(argv[i], "-sb") == 0) {
	    doubleBuffer = GL_FALSE;
	} else if (strcmp(argv[i], "-db") == 0) {
	    doubleBuffer = GL_TRUE;
	} else {
	    fprintf(stderr, "%s (Bad option).\n", argv[i]);
	    return GL_FALSE;
	}
    }
    return GL_TRUE;
}

int main(int argc, char **argv)
{
    GLenum type;

    glutInit(&argc, argv);

    if (Args(argc, argv) == GL_FALSE) {
	exit(1);
    }

    glutInitWindowPosition(0, 0); glutInitWindowSize( 250, 250);

    type = GLUT_RGB | GLUT_ALPHA;
    type |= (doubleBuffer) ? GLUT_DOUBLE : GLUT_SINGLE;
    glutInitDisplayMode(type);

    if (glutCreateWindow(*argv) == GL_FALSE) {
	exit(1);
    }

    Init();

    glutReshapeFunc(Reshape);
    glutKeyboardFunc(Key);
    glutDisplayFunc(Draw);
    glutMainLoop();
    return 0;
}
@


1.2
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@@


1.1
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d30 27
a56 6

#define CI_OFFSET_1 16
#define CI_OFFSET_2 32


GLenum doubleBuffer;
d63 3
a65 2

    glClearColor(0.0, 0.0, 1.0, 0.0);
a69 1

d80 15
a94 9

    switch (key) {
      case 27:
	exit(1);
      default:
	return;
    }

    glutPostRedisplay();
d102 16
a117 6
   glColor3f(0,0,1); 
   glVertex3f( -1.5, 0.5, -30.0);
   glColor3f(1,0,0); 
   glVertex3f( 0,  2.0, -30.0);
   glColor3f(0,1,0); 
   glVertex3f(-1.5, 2.0, -30.0);
d158 1
a158 1
    type = GLUT_RGB;
d162 1
a162 1
    if (glutCreateWindow("First Tri") == GL_FALSE) {
d172 1
a172 1
	return 0;
@

