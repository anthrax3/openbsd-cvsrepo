head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.42;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.09.07.15.20.07;	author jsg;	state Exp;
branches;
next	1.3;
commitid	7kimTMT4YlQauAIU;

1.3
date	2014.07.09.21.08.57;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.14.02.16;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.09;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.54;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.23;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2014.09.07.15.04.18;	author jsg;	state Exp;
branches;
next	;
commitid	dm8VnQHhowGHmemJ;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright © 2011 Marek Olšák <maraeo@@gmail.com>
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, AUTHORS
 * AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 */

#ifndef RADEON_DRM_CS_H
#define RADEON_DRM_CS_H

#include "radeon_drm_bo.h"
#include <radeon_drm.h>

struct radeon_cs_context {
    uint32_t                    buf[RADEON_MAX_CMDBUF_DWORDS];

    int                         fd;
    struct drm_radeon_cs        cs;
    struct drm_radeon_cs_chunk  chunks[3];
    uint64_t                    chunk_array[3];
    uint32_t                    flags[2];

    uint32_t                    cs_trace_id;

    /* Relocs. */
    unsigned                    nrelocs;
    unsigned                    crelocs;
    unsigned                    validated_crelocs;
    struct radeon_bo            **relocs_bo;
    struct drm_radeon_cs_reloc  *relocs;

    int                         reloc_indices_hashlist[512];

    uint64_t                    used_vram;
    uint64_t                    used_gart;
};

struct radeon_drm_cs {
    struct radeon_winsys_cs base;

    /* We flip between these two CS. While one is being consumed
     * by the kernel in another thread, the other one is being filled
     * by the pipe driver. */
    struct radeon_cs_context csc1;
    struct radeon_cs_context csc2;
    /* The currently-used CS. */
    struct radeon_cs_context *csc;
    /* The CS being currently-owned by the other thread. */
    struct radeon_cs_context *cst;

    /* The winsys. */
    struct radeon_drm_winsys *ws;

    /* Flush CS. */
    void (*flush_cs)(void *ctx, unsigned flags, struct pipe_fence_handle **fence);
    void *flush_data;

    pipe_semaphore flush_completed;
    struct radeon_bo                    *trace_buf;
};

int radeon_get_reloc(struct radeon_cs_context *csc, struct radeon_bo *bo);

static INLINE struct radeon_drm_cs *
radeon_drm_cs(struct radeon_winsys_cs *base)
{
    return (struct radeon_drm_cs*)base;
}

static INLINE boolean
radeon_bo_is_referenced_by_cs(struct radeon_drm_cs *cs,
                              struct radeon_bo *bo)
{
    int num_refs = bo->num_cs_references;
    return num_refs == bo->rws->num_cs ||
           (num_refs && radeon_get_reloc(cs->csc, bo) != -1);
}

static INLINE boolean
radeon_bo_is_referenced_by_cs_for_write(struct radeon_drm_cs *cs,
                                        struct radeon_bo *bo)
{
    int index;

    if (!bo->num_cs_references)
        return FALSE;

    index = radeon_get_reloc(cs->csc, bo);
    if (index == -1)
        return FALSE;

    return cs->csc->relocs[index].write_domain != 0;
}

static INLINE boolean
radeon_bo_is_referenced_by_any_cs(struct radeon_bo *bo)
{
    return bo->num_cs_references != 0;
}

void radeon_drm_cs_sync_flush(struct radeon_winsys_cs *rcs);
void radeon_drm_cs_init_functions(struct radeon_drm_winsys *ws);
void radeon_drm_cs_emit_ioctl_oneshot(struct radeon_drm_cs *cs, struct radeon_cs_context *csc);

void radeon_dump_cs_on_lockup(struct radeon_drm_cs *cs, struct radeon_cs_context *csc);

#endif
@


1.4
log
@Merge Mesa 10.2.7
@
text
@@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d53 2
a54 2
    unsigned                    used_vram;
    unsigned                    used_gart;
@


1.2
log
@Merge Mesa 9.2.0
@
text
@d51 1
a51 3
    /* 0 = BO not added, 1 = BO added */
    char                        is_handle_added[512];
    unsigned                    reloc_indices_hashlist[512];
d74 1
a74 1
    void (*flush_cs)(void *ctx, unsigned flags);
a76 1
    int flush_started;
@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d36 1
a36 1
    int fd;
d38 5
a42 2
    struct drm_radeon_cs_chunk  chunks[2];
    uint64_t                    chunk_array[2];
d47 1
a47 1
    unsigned			validated_crelocs;
d52 2
a53 3
    char                        is_handle_added[256];
    struct drm_radeon_cs_reloc  *relocs_hashlist[256];
    unsigned                    reloc_indices_hashlist[256];
d55 2
a56 2
    unsigned used_vram;
    unsigned used_gart;
d79 3
a81 1
    pipe_thread thread;
d96 3
a98 2
    return bo->num_cs_references == bo->rws->num_cs ||
           (bo->num_cs_references && radeon_get_reloc(cs->csc, bo) != -1);
d120 1
a120 1
    return bo->num_cs_references;
d123 1
a123 1
void radeon_drm_cs_sync_flush(struct radeon_drm_cs *cs);
d125 3
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@d36 1
a36 1
    int                         fd;
d38 2
a39 5
    struct drm_radeon_cs_chunk  chunks[3];
    uint64_t                    chunk_array[3];
    uint32_t                    flags[2];

    uint32_t                    cs_trace_id;
d44 1
a44 1
    unsigned                    validated_crelocs;
d49 3
a51 2
    char                        is_handle_added[512];
    unsigned                    reloc_indices_hashlist[512];
d53 2
a54 2
    unsigned                    used_vram;
    unsigned                    used_gart;
d77 1
a77 3
    int flush_started;
    pipe_semaphore flush_completed;
    struct radeon_bo                    *trace_buf;
d92 2
a93 3
    int num_refs = bo->num_cs_references;
    return num_refs == bo->rws->num_cs ||
           (num_refs && radeon_get_reloc(cs->csc, bo) != -1);
d115 1
a115 1
    return bo->num_cs_references != 0;
d118 1
a118 1
void radeon_drm_cs_sync_flush(struct radeon_winsys_cs *rcs);
a119 3
void radeon_drm_cs_emit_ioctl_oneshot(struct radeon_drm_cs *cs, struct radeon_cs_context *csc);

void radeon_dump_cs_on_lockup(struct radeon_drm_cs *cs, struct radeon_cs_context *csc);
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d51 3
a53 1
    int                         reloc_indices_hashlist[512];
d76 1
a76 1
    void (*flush_cs)(void *ctx, unsigned flags, struct pipe_fence_handle **fence);
d79 1
@


1.1.1.3
log
@Import Mesa 10.2.7
@
text
@d53 2
a54 2
    uint64_t                    used_vram;
    uint64_t                    used_gart;
@


