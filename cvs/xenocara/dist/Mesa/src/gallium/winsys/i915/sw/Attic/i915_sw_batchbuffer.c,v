head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.41;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.02.20.23.09.56;	author jsg;	state Exp;
branches;
next	1.4;
commitid	4ry2gvZGMXkCUD2n;

1.4
date	2015.01.25.14.41.18;	author jsg;	state dead;
branches;
next	1.3;
commitid	mcxB0JvoI9gTDYXU;

1.3
date	2013.09.05.14.02.10;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.09;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.30;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.53;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@
#include "i915_sw_winsys.h"
#include "i915/i915_batchbuffer.h"
#include "i915/i915_debug.h"
#include "util/u_memory.h"

#define BATCH_RESERVED 16

#define INTEL_DEFAULT_RELOCS 100
#define INTEL_MAX_RELOCS 400

#define INTEL_BATCH_NO_CLIPRECTS 0x1
#define INTEL_BATCH_CLIPRECTS    0x2

#define INTEL_ALWAYS_FLUSH

struct i915_sw_batchbuffer
{
   struct i915_winsys_batchbuffer base;

   size_t actual_size;
};

static INLINE struct i915_sw_batchbuffer *
i915_sw_batchbuffer(struct i915_winsys_batchbuffer *batch)
{
   return (struct i915_sw_batchbuffer *)batch;
}

static void
i915_sw_batchbuffer_reset(struct i915_sw_batchbuffer *batch)
{
   memset(batch->base.map, 0, batch->actual_size);
   batch->base.ptr = batch->base.map;
   batch->base.size = batch->actual_size - BATCH_RESERVED;
   batch->base.relocs = 0;
}

static struct i915_winsys_batchbuffer *
i915_sw_batchbuffer_create(struct i915_winsys *iws)
{
   struct i915_sw_winsys *isws = i915_sw_winsys(iws);
   struct i915_sw_batchbuffer *batch = CALLOC_STRUCT(i915_sw_batchbuffer);

   batch->actual_size = isws->max_batch_size;

   batch->base.map = MALLOC(batch->actual_size);
   batch->base.ptr = NULL;
   batch->base.size = 0;

   batch->base.relocs = 0;

   batch->base.iws = iws;

   i915_sw_batchbuffer_reset(batch);

   return &batch->base;
}

static boolean
i915_sw_batchbuffer_validate_buffers(struct i915_winsys_batchbuffer *batch,
				     struct i915_winsys_buffer **buffer,
				     int num_of_buffers)
{
   return TRUE;
}

static int
i915_sw_batchbuffer_reloc(struct i915_winsys_batchbuffer *ibatch,
                          struct i915_winsys_buffer *buffer,
                          enum i915_winsys_buffer_usage usage,
                          unsigned pre_add, boolean fenced)
{
   struct i915_sw_batchbuffer *batch = i915_sw_batchbuffer(ibatch);
   int ret = 0;

   if (usage == I915_USAGE_SAMPLER) {

   } else if (usage == I915_USAGE_RENDER) {

   } else if (usage == I915_USAGE_2D_TARGET) {

   } else if (usage == I915_USAGE_2D_SOURCE) {

   } else if (usage == I915_USAGE_VERTEX) {

   } else {
      assert(0);
      return -1;
   }

   ((uint32_t*)batch->base.ptr)[0] = 0;
   batch->base.ptr += 4;

   if (!ret)
      batch->base.relocs++;

   return ret;
}

static void
i915_sw_batchbuffer_flush(struct i915_winsys_batchbuffer *ibatch,
                          struct pipe_fence_handle **fence,
                          enum i915_winsys_flush_flags flags)
{
   struct i915_sw_batchbuffer *batch = i915_sw_batchbuffer(ibatch);
   unsigned used = 0;

   assert(i915_winsys_batchbuffer_space(ibatch) >= 0);

   used = batch->base.ptr - batch->base.map;
   assert((used & 3) == 0);

#ifdef INTEL_ALWAYS_FLUSH
   /* MI_FLUSH | FLUSH_MAP_CACHE */
   i915_winsys_batchbuffer_dword_unchecked(ibatch, (0x4<<23)|(1<<0));
   used += 4;
#endif

   if ((used & 4) == 0) {
      /* MI_NOOP */
      i915_winsys_batchbuffer_dword_unchecked(ibatch, 0);
   }
   /* MI_BATCH_BUFFER_END */
   i915_winsys_batchbuffer_dword_unchecked(ibatch, (0xA<<23));

   used = batch->base.ptr - batch->base.map;
   assert((used & 4) == 0);

   if (i915_sw_winsys(ibatch->iws)->dump_cmd) {
      i915_dump_batchbuffer(ibatch);
   }

   if (fence) {
      ibatch->iws->fence_reference(ibatch->iws, fence, NULL);

      (*fence) = i915_sw_fence_create();
   }

   i915_sw_batchbuffer_reset(batch);
}

static void
i915_sw_batchbuffer_destroy(struct i915_winsys_batchbuffer *ibatch)
{
   struct i915_sw_batchbuffer *batch = i915_sw_batchbuffer(ibatch);

   FREE(batch->base.map);
   FREE(batch);
}

void i915_sw_winsys_init_batchbuffer_functions(struct i915_sw_winsys *isws)
{
   isws->base.batchbuffer_create = i915_sw_batchbuffer_create;
   isws->base.validate_buffers = i915_sw_batchbuffer_validate_buffers;
   isws->base.batchbuffer_reloc = i915_sw_batchbuffer_reloc;
   isws->base.batchbuffer_flush = i915_sw_batchbuffer_flush;
   isws->base.batchbuffer_destroy = i915_sw_batchbuffer_destroy;
}
@


1.5
log
@Merge Mesa 10.2.9
@
text
@@


1.4
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d103 2
a104 1
                          struct pipe_fence_handle **fence)
@


1.1
log
@Initial revision
@
text
@d4 1
a51 1
   batch->base.max_relocs = 300;/*INTEL_DEFAULT_RELOCS;*/
d60 8
d72 1
a72 1
                          unsigned pre_add, bool fenced)
a76 2
   assert(batch->base.relocs < batch->base.max_relocs);

a106 1
   int i;
d115 1
a115 1
   i915_winsys_batchbuffer_dword(ibatch, (0x4<<23)|(1<<0));
d121 1
a121 1
      i915_winsys_batchbuffer_dword(ibatch, 0);
d124 1
a124 1
   i915_winsys_batchbuffer_dword(ibatch, (0xA<<23));
d130 1
a130 6
      unsigned *ptr = (unsigned *)batch->base.map;

      debug_printf("%s:\n", __func__);
      for (i = 0; i < used / 4; i++, ptr++) {
         debug_printf("\t%08x:    %08x\n", i*4, *ptr);
      }
d154 1
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a3 1
#include "i915/i915_debug.h"
d51 1
a59 8
static boolean
i915_sw_batchbuffer_validate_buffers(struct i915_winsys_batchbuffer *batch,
				     struct i915_winsys_buffer **buffer,
				     int num_of_buffers)
{
   return TRUE;
}

d64 1
a64 1
                          unsigned pre_add, boolean fenced)
d69 2
d97 1
a97 2
                          struct pipe_fence_handle **fence,
                          enum i915_winsys_flush_flags flags)
d101 1
d110 1
a110 1
   i915_winsys_batchbuffer_dword_unchecked(ibatch, (0x4<<23)|(1<<0));
d116 1
a116 1
      i915_winsys_batchbuffer_dword_unchecked(ibatch, 0);
d119 1
a119 1
   i915_winsys_batchbuffer_dword_unchecked(ibatch, (0xA<<23));
d125 6
a130 1
      i915_dump_batchbuffer(ibatch);
a153 1
   isws->base.validate_buffers = i915_sw_batchbuffer_validate_buffers;
@

