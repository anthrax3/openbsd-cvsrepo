head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.12
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.12.23.05.17.41;	author jsg;	state dead;
branches;
next	1.2;
commitid	TnlogFl9nOv2eaRf;

1.2
date	2012.08.17.13.58.09;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.30;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.52;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove the now unused Mesa 10.2.9 code
@
text
@
#include "i915_drm_winsys.h"
#include "util/u_memory.h"
#include "util/u_atomic.h"
#include "util/u_inlines.h"

/**
 * Because gem does not have fence's we have to create our own fences.
 *
 * They work by keeping the batchbuffer around and checking if that has
 * been idled. If bo is NULL fence has expired.
 */
struct i915_drm_fence
{
   struct pipe_reference reference;
   drm_intel_bo *bo;
};


struct pipe_fence_handle *
i915_drm_fence_create(drm_intel_bo *bo)
{
   struct i915_drm_fence *fence = CALLOC_STRUCT(i915_drm_fence);

   pipe_reference_init(&fence->reference, 1);
   /* bo is null if fence already expired */
   if (bo) {
      drm_intel_bo_reference(bo);
      fence->bo = bo;
   }

   return (struct pipe_fence_handle *)fence;
}

static void
i915_drm_fence_reference(struct i915_winsys *iws,
                          struct pipe_fence_handle **ptr,
                          struct pipe_fence_handle *fence)
{
   struct i915_drm_fence *old = (struct i915_drm_fence *)*ptr;
   struct i915_drm_fence *f = (struct i915_drm_fence *)fence;

   if (pipe_reference(&((struct i915_drm_fence *)(*ptr))->reference, &f->reference)) {
      if (old->bo)
         drm_intel_bo_unreference(old->bo);
      FREE(old);
   }
   *ptr = fence;
}

static int
i915_drm_fence_signalled(struct i915_winsys *iws,
                          struct pipe_fence_handle *fence)
{
   struct i915_drm_fence *f = (struct i915_drm_fence *)fence;

   /* fence already expired */
   if (!f->bo)
	   return 1;

   return !drm_intel_bo_busy(f->bo);
}

static int
i915_drm_fence_finish(struct i915_winsys *iws,
                       struct pipe_fence_handle *fence)
{
   struct i915_drm_fence *f = (struct i915_drm_fence *)fence;

   /* fence already expired */
   if (!f->bo)
      return 0;

   drm_intel_bo_wait_rendering(f->bo);
   drm_intel_bo_unreference(f->bo);
   f->bo = NULL;

   return 0;
}

void
i915_drm_winsys_init_fence_functions(struct i915_drm_winsys *idws)
{
   idws->base.fence_reference = i915_drm_fence_reference;
   idws->base.fence_signalled = i915_drm_fence_signalled;
   idws->base.fence_finish = i915_drm_fence_finish;
}
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.1
log
@Initial revision
@
text
@d55 1
a55 1
   assert(0);
d57 5
a61 1
   return 0;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d55 1
a55 1
   struct i915_drm_fence *f = (struct i915_drm_fence *)fence;
d57 1
a57 5
   /* fence already expired */
   if (!f->bo)
	   return 1;

   return !drm_intel_bo_busy(f->bo);
@

