head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.5.0.4
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.2
	OPENBSD_5_6_BASE:1.1.1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.1.1.2.0.2
	OPENBSD_5_5_BASE:1.1.1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2015.12.23.05.17.42;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2011.10.23.13.29.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.30;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.55;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.24;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.09.56;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.03;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**********************************************************
 * Copyright 2009 VMware, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 **********************************************************/


#include "vmw_screen.h"

#include "vmw_buffer.h"
#include "vmw_fence.h"

#include "pipebuffer/pb_buffer.h"
#include "pipebuffer/pb_bufmgr.h"

void
vmw_pools_cleanup(struct vmw_winsys_screen *vws)
{
   if(vws->pools.gmr_fenced)
      vws->pools.gmr_fenced->destroy(vws->pools.gmr_fenced);

   /* gmr_mm pool is already destroyed above */

   if(vws->pools.gmr)
      vws->pools.gmr->destroy(vws->pools.gmr);
}


boolean
vmw_pools_init(struct vmw_winsys_screen *vws)
{
   vws->pools.gmr = vmw_gmr_bufmgr_create(vws);
   if(!vws->pools.gmr)
      goto error;

   vws->pools.gmr_mm = mm_bufmgr_create(vws->pools.gmr,
                                        VMW_GMR_POOL_SIZE,
                                        12 /* 4096 alignment */);
   if(!vws->pools.gmr_mm)
      goto error;

   /*
    * GMR buffers are typically shortlived, but it's possible that at a given
    * instance a buffer is mapped. So to avoid stalling we tell pipebuffer to
    * forbid creation of buffers beyond half the GMR pool size,
    *
    * XXX: It is unclear weather we want to limit the total amount of temporary
    * malloc memory used to backup unvalidated GMR buffers. On one hand it is
    * preferrable to fail an allocation than exhausting the guest memory with
    * temporary data, but on the other hand it is possible that a stupid
    * application creates large vertex buffers and does not use them for a long
    * time -- since the svga pipe driver only emits the DMA uploads when a
    * buffer is used for drawing this would effectively disabling swapping GMR
    * buffers to memory. So far, the preemptively flush already seems to keep
    * total allocated memory within relatively small numbers, so we don't
    * limit.
    */
   vws->pools.gmr_fenced = fenced_bufmgr_create(
      vws->pools.gmr_mm,
      vmw_fence_ops_create(vws),
      VMW_GMR_POOL_SIZE/2,
      ~0);

#ifdef DEBUG
   vws->pools.gmr_fenced = pb_debug_manager_create(vws->pools.gmr_fenced,
						   4096,
						   4096);
#endif
   if(!vws->pools.gmr_fenced)
      goto error;

   return TRUE;

error:
   vmw_pools_cleanup(vws);
   return FALSE;
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a34 12
/*
 * TODO: Have the query pool always ask the fence manager for
 * SVGA_FENCE_FLAG_QUERY signaled. Unfortunately, pb_fenced doesn't
 * support that currently, so we'd have to create a separate
 * pb_fence_ops wrapper that does this implicitly.
 */

/**
 * vmw_pools_cleanup - Destroy the buffer pools.
 *
 * @@vws: pointer to a struct vmw_winsys_screen.
 */
a39 2
   if (vws->pools.query_fenced)
      vws->pools.query_fenced->destroy(vws->pools.query_fenced);
a42 3
   if (vws->pools.gmr_slab_fenced)
      vws->pools.gmr_slab_fenced->destroy(vws->pools.gmr_slab_fenced);

a44 2
   if(vws->pools.query)
      vws->pools.query->destroy(vws->pools.query);
a47 46
/**
 * vmw_query_pools_init - Create a pool of query buffers.
 *
 * @@vws: Pointer to a struct vmw_winsys_screen.
 *
 * Typically this pool should be created on demand when we
 * detect that the app will be using queries. There's nothing
 * special with this pool other than the backing kernel buffer size,
 * which is limited to 8192.
 */
boolean
vmw_query_pools_init(struct vmw_winsys_screen *vws)
{
   vws->pools.query = vmw_gmr_bufmgr_create(vws);
   if(!vws->pools.query)
      return FALSE;

   vws->pools.query_mm = mm_bufmgr_create(vws->pools.query,
					  VMW_QUERY_POOL_SIZE,
					  3 /* 8 alignment */);
   if(!vws->pools.query_mm)
      goto out_no_query_mm;

   vws->pools.query_fenced = fenced_bufmgr_create(
      vws->pools.query_mm,
      vmw_fence_ops_create(vws),
      VMW_QUERY_POOL_SIZE,
      ~0);

   if(!vws->pools.query_fenced)
      goto out_no_query_fenced;

   return TRUE;

  out_no_query_fenced:
   vws->pools.query_mm->destroy(vws->pools.query_mm);
  out_no_query_mm:
   vws->pools.query->destroy(vws->pools.query);
   return FALSE;
}

/**
 * vmw_pools_init - Create a pool of GMR buffers.
 *
 * @@vws: Pointer to a struct vmw_winsys_screen.
 */
a50 2
   struct pb_desc desc;

d62 14
a75 6
    * We disallow "CPU" buffers to be created by the fenced_bufmgr_create,
    * because that defers "GPU" buffer creation to buffer validation,
    * and at buffer validation we have no means of handling failures
    * due to pools space shortage or fragmentation. Effectively this
    * makes sure all failures are reported immediately on buffer allocation,
    * and we can revert to allocating directly from the kernel.
d80 2
a81 2
      VMW_GMR_POOL_SIZE,
      0);
a89 31

   /*
    * The slab pool allocates buffers directly from the kernel except
    * for very small buffers which are allocated from a slab in order
    * not to waste memory, since a kernel buffer is a minimum 4096 bytes.
    *
    * Here we use it only for emergency in the case our pre-allocated
    * buffer pool runs out of memory.
    */
   desc.alignment = 64;
   desc.usage = ~0;
   vws->pools.gmr_slab = pb_slab_range_manager_create(vws->pools.gmr,
						      64,
						      8192,
						      16384,
						      &desc);
   if (!vws->pools.gmr_slab)
       goto error;

   vws->pools.gmr_slab_fenced =
       fenced_bufmgr_create(vws->pools.gmr_slab,
			    vmw_fence_ops_create(vws),
			    VMW_MAX_BUFFER_SIZE,
			    0);

   if (!vws->pools.gmr_slab_fenced)
       goto error;

   vws->pools.query_fenced = NULL;
   vws->pools.query_mm = NULL;
   vws->pools.query = NULL;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d35 7
d50 2
a51 10
   if (vws->pools.mob_shader_slab_fenced)
      vws->pools.mob_shader_slab_fenced->destroy
         (vws->pools.mob_shader_slab_fenced);
   if (vws->pools.mob_shader_slab)
      vws->pools.mob_shader_slab->destroy(vws->pools.mob_shader_slab);
   if (vws->pools.mob_fenced)
      vws->pools.mob_fenced->destroy(vws->pools.mob_fenced);
   if (vws->pools.mob_cache)
      vws->pools.mob_cache->destroy(vws->pools.mob_cache);

a53 2
   if (vws->pools.query_mm)
      vws->pools.query_mm->destroy(vws->pools.query_mm);
d55 2
a56 4
   if(vws->pools.gmr_fenced)
      vws->pools.gmr_fenced->destroy(vws->pools.gmr_fenced);
   if (vws->pools.gmr_mm)
      vws->pools.gmr_mm->destroy(vws->pools.gmr_mm);
a58 2
   if (vws->pools.gmr_slab)
      vws->pools.gmr_slab->destroy(vws->pools.gmr_slab);
d62 2
d74 2
a75 5
 * special with this pool other than the backing kernel buffer sizes,
 * which are limited to 8192.
 * If there is a performance issue with allocation and freeing of the
 * query slabs, it should be easily fixable by allocating them out
 * of a buffer cache.
d80 2
a81 9
   struct pb_desc desc;

   desc.alignment = 16;
   desc.usage = ~(VMW_BUFFER_USAGE_SHARED | VMW_BUFFER_USAGE_SYNC);

   vws->pools.query_mm = pb_slab_range_manager_create(vws->pools.gmr, 16, 128,
                                                      VMW_QUERY_POOL_SIZE,
                                                      &desc);
   if (!vws->pools.query_mm)
d84 11
a94 2
   vws->pools.query_fenced = simple_fenced_bufmgr_create(
      vws->pools.query_mm, vws->fence_ops);
d103 2
a104 54
   return FALSE;
}

/**
 * vmw_mob_pool_init - Create a pool of fenced kernel buffers.
 *
 * @@vws: Pointer to a struct vmw_winsys_screen.
 *
 * Typically this pool should be created on demand when we
 * detect that the app will be using MOB buffers.
 */
boolean
vmw_mob_pools_init(struct vmw_winsys_screen *vws)
{
   struct pb_desc desc;

   vws->pools.mob_cache = 
      pb_cache_manager_create(vws->pools.gmr, 100000, 2.0f,
                              VMW_BUFFER_USAGE_SHARED);
   if (!vws->pools.mob_cache)
      return FALSE;

   vws->pools.mob_fenced = 
      simple_fenced_bufmgr_create(vws->pools.mob_cache,
                                  vws->fence_ops);
   if(!vws->pools.mob_fenced)
      goto out_no_mob_fenced;
   
   desc.alignment = 64;
   desc.usage = ~(SVGA_BUFFER_USAGE_PINNED | VMW_BUFFER_USAGE_SHARED |
                  VMW_BUFFER_USAGE_SYNC);
   vws->pools.mob_shader_slab =
      pb_slab_range_manager_create(vws->pools.mob_cache,
                                   64,
                                   8192,
                                   16384,
                                   &desc);
   if(!vws->pools.mob_shader_slab)
      goto out_no_mob_shader_slab;

   vws->pools.mob_shader_slab_fenced =
      simple_fenced_bufmgr_create(vws->pools.mob_shader_slab,
				  vws->fence_ops);
   if(!vws->pools.mob_fenced)
      goto out_no_mob_shader_slab_fenced;

   return TRUE;

 out_no_mob_shader_slab_fenced:
   vws->pools.mob_shader_slab->destroy(vws->pools.mob_shader_slab);
 out_no_mob_shader_slab:
   vws->pools.mob_fenced->destroy(vws->pools.mob_fenced);
 out_no_mob_fenced:
   vws->pools.mob_cache->destroy(vws->pools.mob_cache);
d122 5
a126 10
   if ((vws->base.have_gb_objects && vws->base.have_gb_dma) ||
       !vws->base.have_gb_objects) {
      /*
       * A managed pool for DMA buffers.
       */
      vws->pools.gmr_mm = mm_bufmgr_create(vws->pools.gmr,
                                           VMW_GMR_POOL_SIZE,
                                           12 /* 4096 alignment */);
      if(!vws->pools.gmr_mm)
         goto error;
d128 13
a140 2
      vws->pools.gmr_fenced = simple_fenced_bufmgr_create
         (vws->pools.gmr_mm, vws->fence_ops);
d143 3
a145 3
      vws->pools.gmr_fenced = pb_debug_manager_create(vws->pools.gmr_fenced,
                                                      4096,
                                                      4096);
d147 2
a148 2
      if(!vws->pools.gmr_fenced)
         goto error;
d156 1
a156 1
    * managed buffer pool runs out of memory.
d158 15
d174 2
a175 17
      desc.alignment = 64;
      desc.usage = ~(SVGA_BUFFER_USAGE_PINNED | SVGA_BUFFER_USAGE_SHADER |
                     VMW_BUFFER_USAGE_SHARED | VMW_BUFFER_USAGE_SYNC);
      vws->pools.gmr_slab = pb_slab_range_manager_create(vws->pools.gmr,
                                                         64,
                                                         8192,
                                                         16384,
                                                         &desc);
      if (!vws->pools.gmr_slab)
         goto error;

      vws->pools.gmr_slab_fenced =
         simple_fenced_bufmgr_create(vws->pools.gmr_slab, vws->fence_ops);

      if (!vws->pools.gmr_slab_fenced)
         goto error;
   }
d179 1
a179 4
   vws->pools.mob_cache = NULL;

   if (vws->base.have_gb_objects && !vmw_mob_pools_init(vws))
      goto error;
d187 1
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d127 1
a127 2
                              VMW_BUFFER_USAGE_SHARED,
                              64 * 1024 * 1024);
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d127 2
a128 1
                              VMW_BUFFER_USAGE_SHARED);
@


