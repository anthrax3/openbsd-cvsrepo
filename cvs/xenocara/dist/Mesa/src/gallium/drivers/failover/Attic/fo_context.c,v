head	1.4;
access;
symbols
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.09.05.14.00.09;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.26;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@/**************************************************************************
 * 
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/


#include "pipe/p_defines.h"
#include "util/u_memory.h"
#include "pipe/p_context.h"
#include "util/u_inlines.h"

#include "fo_context.h"
#include "fo_winsys.h"



static void failover_destroy( struct pipe_context *pipe )
{
   struct failover_context *failover = failover_context( pipe );
   unsigned i;

   for (i = 0; i < failover->num_vertex_buffers; i++) {
      pipe_resource_reference(&failover->vertex_buffers[i].buffer, NULL);
   }

   FREE( failover );
}


void failover_fail_over( struct failover_context *failover )
{
   failover->dirty = TRUE;
   failover->mode = FO_SW;
}


static void failover_draw_vbo( struct pipe_context *pipe,
                               const struct pipe_draw_info *info)
{
   struct failover_context *failover = failover_context( pipe );

   /* If there has been any statechange since last time, try hardware
    * rendering again:
    */
   if (failover->dirty) {
      failover->mode = FO_HW;
   }

   /* Try hardware:
    */
   if (failover->mode == FO_HW) {
      failover->hw->draw_vbo( failover->hw, info );
   }

   /* Possibly try software:
    */
   if (failover->mode == FO_SW) {

      if (failover->dirty) {
         failover->hw->flush( failover->hw, NULL );
	 failover_state_emit( failover );
      }

      failover->sw->draw_vbo( failover->sw, info );

      /* Be ready to switch back to hardware rendering without an
       * intervening flush.  Unlikely to be much performance impact to
       * this:
       */
      failover->sw->flush( failover->sw, NULL );
   }
}

struct pipe_context *failover_create( struct pipe_context *hw,
				      struct pipe_context *sw )
{
   struct failover_context *failover = CALLOC_STRUCT(failover_context);
   if (failover == NULL)
      return NULL;

   failover->hw = hw;
   failover->sw = sw;
   failover->pipe.winsys = hw->winsys;
   failover->pipe.screen = hw->screen;
   failover->pipe.destroy = failover_destroy;
#if 0
   failover->pipe.is_format_supported = hw->is_format_supported;
   failover->pipe.get_name = hw->get_name;
   failover->pipe.get_vendor = hw->get_vendor;
   failover->pipe.get_param = hw->get_param;
   failover->pipe.get_shader_param = hw->get_shader_param;
   failover->pipe.get_paramf = hw->get_paramf;
#endif

   failover->pipe.draw_vbo = failover_draw_vbo;
   failover->pipe.clear = hw->clear;
   failover->pipe.clear_render_target = hw->clear_render_target;
   failover->pipe.clear_depth_stencil = hw->clear_depth_stencil;

   /* No software occlusion fallback (or other optional functionality)
    * at this point - if the hardware doesn't support it, don't
    * advertise it to the application.
    */
   failover->pipe.begin_query = hw->begin_query;
   failover->pipe.end_query = hw->end_query;

   failover_init_state_functions( failover );

   failover->pipe.resource_copy_region = hw->resource_copy_region;

#if 0
   failover->pipe.resource_create = hw->resource_create;
   failover->pipe.resource_destroy = hw->resource_destroy;
   failover->pipe.create_surface = hw->create_surface;
   failover->pipe.surface_destroy = hw->surface_destroy;
#endif

   failover->pipe.flush = hw->flush;

   failover->dirty = 0;

   return &failover->pipe;
}

@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d32 1
d42 5
d82 1
a82 1
         failover->hw->flush( failover->hw, ~0, NULL );
d92 1
a92 1
      failover->sw->flush( failover->sw, ~0, NULL );
a95 12
static unsigned int
failover_is_resource_referenced( struct pipe_context *_pipe,
                                 struct pipe_resource *resource,
                                 unsigned level, int layer)
{
   struct failover_context *failover = failover_context( _pipe );
   struct pipe_context *pipe = (failover->mode == FO_HW) ?
      failover->hw : failover->sw;

   return pipe->is_resource_referenced(pipe, resource, level, layer);
}

a140 1
   failover->pipe.is_resource_referenced = failover_is_resource_referenced;
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a29 1
#include "util/u_simple_screen.h"
d42 1
a42 1
   free( failover );
d53 2
a54 6
static void failover_draw_elements( struct pipe_context *pipe,
                                    struct pipe_buffer *indexBuffer,
                                    unsigned indexSize,
                                    unsigned prim, 
                                    unsigned start, 
                                    unsigned count)
d68 1
a68 6
      failover->hw->draw_elements( failover->hw, 
                                   indexBuffer, 
                                   indexSize, 
                                   prim, 
                                   start, 
                                   count );
d80 1
a80 6
      failover->sw->draw_elements( failover->sw, 
				   indexBuffer, 
				   indexSize, 
				   prim, 
				   start, 
				   count );
a89 19

static void failover_draw_arrays( struct pipe_context *pipe,
				     unsigned prim, unsigned start, unsigned count)
{
   failover_draw_elements(pipe, NULL, 0, prim, start, count);
}

static unsigned int
failover_is_texture_referenced( struct pipe_context *_pipe,
				struct pipe_texture *texture,
				unsigned face, unsigned level)
{
   struct failover_context *failover = failover_context( _pipe );
   struct pipe_context *pipe = (failover->mode == FO_HW) ?
      failover->hw : failover->sw;

   return pipe->is_texture_referenced(pipe, texture, face, level);
}

d91 3
a93 2
failover_is_buffer_referenced( struct pipe_context *_pipe,
			       struct pipe_buffer *buf)
d99 1
a99 1
   return pipe->is_buffer_referenced(pipe, buf);
d119 1
d123 1
a123 2
   failover->pipe.draw_arrays = failover_draw_arrays;
   failover->pipe.draw_elements = failover_draw_elements;
d125 2
d137 1
a137 2
   failover->pipe.surface_copy = hw->surface_copy;
   failover->pipe.surface_fill = hw->surface_fill;
d140 4
a143 4
   failover->pipe.texture_create = hw->texture_create;
   failover->pipe.texture_destroy = hw->texture_destroy;
   failover->pipe.get_tex_surface = hw->get_tex_surface;
   failover->pipe.texture_update = hw->texture_update;
d147 1
a147 2
   failover->pipe.is_texture_referenced = failover_is_texture_referenced;
   failover->pipe.is_buffer_referenced = failover_is_buffer_referenced;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d30 1
d43 1
a43 1
   FREE( failover );
d54 6
a59 2
static void failover_draw_vbo( struct pipe_context *pipe,
                               const struct pipe_draw_info *info)
d73 6
a78 1
      failover->hw->draw_vbo( failover->hw, info );
d90 6
a95 1
      failover->sw->draw_vbo( failover->sw, info );
d105 19
d125 2
a126 3
failover_is_resource_referenced( struct pipe_context *_pipe,
                                 struct pipe_resource *resource,
                                 unsigned level, int layer)
d132 1
a132 1
   return pipe->is_resource_referenced(pipe, resource, level, layer);
a151 1
   failover->pipe.get_shader_param = hw->get_shader_param;
d155 2
a156 1
   failover->pipe.draw_vbo = failover_draw_vbo;
a157 2
   failover->pipe.clear_render_target = hw->clear_render_target;
   failover->pipe.clear_depth_stencil = hw->clear_depth_stencil;
d168 2
a169 1
   failover->pipe.resource_copy_region = hw->resource_copy_region;
d172 4
a175 4
   failover->pipe.resource_create = hw->resource_create;
   failover->pipe.resource_destroy = hw->resource_destroy;
   failover->pipe.create_surface = hw->create_surface;
   failover->pipe.surface_destroy = hw->surface_destroy;
d179 2
a180 1
   failover->pipe.is_resource_referenced = failover_is_resource_referenced;
@

