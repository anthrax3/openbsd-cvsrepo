head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.38;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.32;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.00;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@#ifndef __NOUVEAU_SCREEN_H__
#define __NOUVEAU_SCREEN_H__

#include "pipe/p_screen.h"
#include "util/u_memory.h"

#ifdef DEBUG
# define NOUVEAU_ENABLE_DRIVER_STATISTICS
#endif

typedef uint32_t u32;
typedef uint16_t u16;

extern int nouveau_mesa_debug;

struct nouveau_bo;

struct nouveau_screen {
	struct pipe_screen base;
	struct nouveau_device *device;
	struct nouveau_object *channel;
	struct nouveau_client *client;
	struct nouveau_pushbuf *pushbuf;

	int refcount;

	unsigned vidmem_bindings; /* PIPE_BIND_* where VRAM placement is desired */
	unsigned sysmem_bindings; /* PIPE_BIND_* where GART placement is desired */
	unsigned lowmem_bindings; /* PIPE_BIND_* that require an address < 4 GiB */
	/*
	 * For bindings with (vidmem & sysmem) bits set, PIPE_USAGE_* decides
	 * placement.
	 */

	uint16_t class_3d;

	struct {
		struct nouveau_fence *head;
		struct nouveau_fence *tail;
		struct nouveau_fence *current;
		u32 sequence;
		u32 sequence_ack;
		void (*emit)(struct pipe_screen *, u32 *sequence);
		u32  (*update)(struct pipe_screen *);
	} fence;

	struct nouveau_mman *mm_VRAM;
	struct nouveau_mman *mm_GART;

	int64_t cpu_gpu_time_delta;

	boolean hint_buf_keep_sysmem_copy;

	struct {
		unsigned profiles_checked;
		unsigned profiles_present;
	} firmware_info;

#ifdef NOUVEAU_ENABLE_DRIVER_STATISTICS
   union {
      uint64_t v[29];
      struct {
         uint64_t tex_obj_current_count;
         uint64_t tex_obj_current_bytes;
         uint64_t buf_obj_current_count;
         uint64_t buf_obj_current_bytes_vid;
         uint64_t buf_obj_current_bytes_sys;
         uint64_t tex_transfers_rd;
         uint64_t tex_transfers_wr;
         uint64_t tex_copy_count;
         uint64_t tex_blit_count;
         uint64_t tex_cache_flush_count;
         uint64_t buf_transfers_rd;
         uint64_t buf_transfers_wr;
         uint64_t buf_read_bytes_staging_vid;
         uint64_t buf_write_bytes_direct;
         uint64_t buf_write_bytes_staging_vid;
         uint64_t buf_write_bytes_staging_sys;
         uint64_t buf_copy_bytes;
         uint64_t buf_non_kernel_fence_sync_count;
         uint64_t any_non_kernel_fence_sync_count;
         uint64_t query_sync_count;
         uint64_t gpu_serialize_count;
         uint64_t draw_calls_array;
         uint64_t draw_calls_indexed;
         uint64_t draw_calls_fallback_count;
         uint64_t user_buffer_upload_bytes;
         uint64_t constbuf_upload_count;
         uint64_t constbuf_upload_bytes;
         uint64_t pushbuf_count;
         uint64_t resource_validate_count;
      } named;
   } stats;
#endif
};

#ifdef NOUVEAU_ENABLE_DRIVER_STATISTICS
# define NOUVEAU_DRV_STAT(s, n, v) do {         \
      (s)->stats.named.n += (v);               \
   } while(0)
# define NOUVEAU_DRV_STAT_RES(r, n, v) do {                       \
      nouveau_screen((r)->base.screen)->stats.named.n += (v);    \
   } while(0)
# define NOUVEAU_DRV_STAT_IFD(x) x
#else
# define NOUVEAU_DRV_STAT(s, n, v)     do { } while(0)
# define NOUVEAU_DRV_STAT_RES(r, n, v) do { } while(0)
# define NOUVEAU_DRV_STAT_IFD(x)
#endif

static INLINE struct nouveau_screen *
nouveau_screen(struct pipe_screen *pscreen)
{
	return (struct nouveau_screen *)pscreen;
}

boolean nouveau_drm_screen_unref(struct nouveau_screen *screen);

boolean
nouveau_screen_bo_get_handle(struct pipe_screen *pscreen,
			     struct nouveau_bo *bo,
			     unsigned stride,
			     struct winsys_handle *whandle);
struct nouveau_bo *
nouveau_screen_bo_from_handle(struct pipe_screen *pscreen,
			      struct winsys_handle *whandle,
			      unsigned *out_stride);


int nouveau_screen_init(struct nouveau_screen *, struct nouveau_device *);
void nouveau_screen_fini(struct nouveau_screen *);

void nouveau_screen_init_vdec(struct nouveau_screen *);

#endif
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d25 2
d54 5
d116 2
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d6 5
d12 3
d21 11
a31 1
	struct nouveau_channel *channel;
d33 1
a33 5
	/* note that OpenGL doesn't distinguish between these, so
	 * these almost always should be set to the same value */
	unsigned vertex_buffer_flags;
	unsigned index_buffer_flags;
	unsigned sysmem_bindings;
d47 41
d90 14
a109 24


/* Not really sure if this is needed, or whether the individual
 * drivers are happy to talk to the bo functions themselves.  In a way
 * this is what we'd expect from a regular winsys interface.
 */
struct nouveau_bo *
nouveau_screen_bo_new(struct pipe_screen *pscreen, unsigned alignment,
		      unsigned usage, unsigned bind, unsigned size);
void *
nouveau_screen_bo_map(struct pipe_screen *pscreen,
		      struct nouveau_bo *pb,
		      unsigned usage);
void *
nouveau_screen_bo_map_range(struct pipe_screen *pscreen, struct nouveau_bo *bo,
			    unsigned offset, unsigned length, unsigned usage);
void
nouveau_screen_bo_map_flush_range(struct pipe_screen *pscreen, struct nouveau_bo *bo,
				  unsigned offset, unsigned length);
void
nouveau_screen_bo_unmap(struct pipe_screen *pscreen, struct nouveau_bo *bo);
void
nouveau_screen_bo_release(struct pipe_screen *pscreen, struct nouveau_bo *bo);

d124 1
a124 15


#ifndef NOUVEAU_NVC0
static INLINE unsigned
RING_3D(unsigned mthd, unsigned size)
{
	return (7 << 13) | (size << 18) | mthd;
}

static INLINE unsigned
RING_3D_NI(unsigned mthd, unsigned size)
{
	return 0x40000000 | (7 << 13) | (size << 18) | mthd;
}
#endif
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d5 4
d19 14
a49 2
struct nouveau_bo *
nouveau_screen_bo_user(struct pipe_screen *pscreen, void *ptr, unsigned bytes);
a74 4
unsigned int
nouveau_reference_flags(struct nouveau_bo *bo);


d81 1
a81 1

d93 1
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d4 2
d11 4
a14 2
	int (*pre_pipebuffer_map_callback) (struct pipe_screen *pscreen,
		struct pipe_buffer *pb, unsigned usage);
d17 1
a17 1
static inline struct nouveau_screen *
d23 40
a62 5
static inline struct nouveau_bo *
nouveau_bo(struct pipe_buffer *pb)
{
	return pb ? *(struct nouveau_bo **)(pb + 1) : NULL;
}
a66 4
struct nouveau_miptree {
	struct pipe_texture base;
	struct nouveau_bo *bo;
};
d68 10
a77 2
static inline struct nouveau_miptree *
nouveau_miptree(struct pipe_texture *pt)
d79 1
a79 1
	return (struct nouveau_miptree *)pt;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a3 2
#include "pipe/p_screen.h"

d9 2
a10 4
	/* note that OpenGL doesn't distinguish between these, so
	 * these almost always should be set to the same value */
	unsigned vertex_buffer_flags;
	unsigned index_buffer_flags;
d13 1
a13 1
static INLINE struct nouveau_screen *
d19 5
a23 40


/* Not really sure if this is needed, or whether the individual
 * drivers are happy to talk to the bo functions themselves.  In a way
 * this is what we'd expect from a regular winsys interface.
 */
struct nouveau_bo *
nouveau_screen_bo_new(struct pipe_screen *pscreen, unsigned alignment,
		      unsigned usage, unsigned bind, unsigned size);
struct nouveau_bo *
nouveau_screen_bo_user(struct pipe_screen *pscreen, void *ptr, unsigned bytes);
void *
nouveau_screen_bo_map(struct pipe_screen *pscreen,
		      struct nouveau_bo *pb,
		      unsigned usage);
void *
nouveau_screen_bo_map_range(struct pipe_screen *pscreen, struct nouveau_bo *bo,
			    unsigned offset, unsigned length, unsigned usage);
void
nouveau_screen_bo_map_flush_range(struct pipe_screen *pscreen, struct nouveau_bo *bo,
				  unsigned offset, unsigned length);
void
nouveau_screen_bo_unmap(struct pipe_screen *pscreen, struct nouveau_bo *bo);
void
nouveau_screen_bo_release(struct pipe_screen *pscreen, struct nouveau_bo *bo);

boolean
nouveau_screen_bo_get_handle(struct pipe_screen *pscreen,
			     struct nouveau_bo *bo,
			     unsigned stride,
			     struct winsys_handle *whandle);
struct nouveau_bo *
nouveau_screen_bo_from_handle(struct pipe_screen *pscreen,
			      struct winsys_handle *whandle,
			      unsigned *out_stride);

unsigned int
nouveau_reference_flags(struct nouveau_bo *bo);


d28 4
d33 2
a34 10


static INLINE unsigned
RING_3D(unsigned mthd, unsigned size)
{
	return (7 << 13) | (size << 18) | mthd;
}

static INLINE unsigned
RING_3D_NI(unsigned mthd, unsigned size)
d36 1
a36 1
	return 0x40000000 | (7 << 13) | (size << 18) | mthd;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a4 12
#include "util/u_memory.h"

#ifdef DEBUG
# define NOUVEAU_ENABLE_DRIVER_STATISTICS
#endif

typedef uint32_t u32;
typedef uint16_t u16;

extern int nouveau_mesa_debug;

struct nouveau_bo;
d9 6
a14 67
	struct nouveau_object *channel;
	struct nouveau_client *client;
	struct nouveau_pushbuf *pushbuf;

	unsigned vidmem_bindings; /* PIPE_BIND_* where VRAM placement is desired */
	unsigned sysmem_bindings; /* PIPE_BIND_* where GART placement is desired */
	unsigned lowmem_bindings; /* PIPE_BIND_* that require an address < 4 GiB */
	/*
	 * For bindings with (vidmem & sysmem) bits set, PIPE_USAGE_* decides
	 * placement.
	 */

	uint16_t class_3d;

	struct {
		struct nouveau_fence *head;
		struct nouveau_fence *tail;
		struct nouveau_fence *current;
		u32 sequence;
		u32 sequence_ack;
		void (*emit)(struct pipe_screen *, u32 *sequence);
		u32  (*update)(struct pipe_screen *);
	} fence;

	struct nouveau_mman *mm_VRAM;
	struct nouveau_mman *mm_GART;

	int64_t cpu_gpu_time_delta;

	boolean hint_buf_keep_sysmem_copy;

#ifdef NOUVEAU_ENABLE_DRIVER_STATISTICS
   union {
      uint64_t v[29];
      struct {
         uint64_t tex_obj_current_count;
         uint64_t tex_obj_current_bytes;
         uint64_t buf_obj_current_count;
         uint64_t buf_obj_current_bytes_vid;
         uint64_t buf_obj_current_bytes_sys;
         uint64_t tex_transfers_rd;
         uint64_t tex_transfers_wr;
         uint64_t tex_copy_count;
         uint64_t tex_blit_count;
         uint64_t tex_cache_flush_count;
         uint64_t buf_transfers_rd;
         uint64_t buf_transfers_wr;
         uint64_t buf_read_bytes_staging_vid;
         uint64_t buf_write_bytes_direct;
         uint64_t buf_write_bytes_staging_vid;
         uint64_t buf_write_bytes_staging_sys;
         uint64_t buf_copy_bytes;
         uint64_t buf_non_kernel_fence_sync_count;
         uint64_t any_non_kernel_fence_sync_count;
         uint64_t query_sync_count;
         uint64_t gpu_serialize_count;
         uint64_t draw_calls_array;
         uint64_t draw_calls_indexed;
         uint64_t draw_calls_fallback_count;
         uint64_t user_buffer_upload_bytes;
         uint64_t constbuf_upload_count;
         uint64_t constbuf_upload_bytes;
         uint64_t pushbuf_count;
         uint64_t resource_validate_count;
      } named;
   } stats;
#endif
a16 14
#ifdef NOUVEAU_ENABLE_DRIVER_STATISTICS
# define NOUVEAU_DRV_STAT(s, n, v) do {         \
      (s)->stats.named.n += (v);               \
   } while(0)
# define NOUVEAU_DRV_STAT_RES(r, n, v) do {                       \
      nouveau_screen((r)->base.screen)->stats.named.n += (v);    \
   } while(0)
# define NOUVEAU_DRV_STAT_IFD(x) x
#else
# define NOUVEAU_DRV_STAT(s, n, v)     do { } while(0)
# define NOUVEAU_DRV_STAT_RES(r, n, v) do { } while(0)
# define NOUVEAU_DRV_STAT_IFD(x)
#endif

d23 26
d59 4
d67 14
a80 1
void nouveau_screen_init_vdec(struct nouveau_screen *);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a24 2
	int refcount;

a51 5
	struct {
		unsigned profiles_checked;
		unsigned profiles_present;
	} firmware_info;

a108 2

boolean nouveau_drm_screen_unref(struct nouveau_screen *screen);
@


