head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.07.09.21.08.54;	author jsg;	state dead;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.00.44;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.41;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@
#ifndef __NV50_RESOURCE_H__
#define __NV50_RESOURCE_H__

#include "util/u_transfer.h"
#include "util/u_double_list.h"

#include "nouveau/nouveau_winsys.h"
#include "nouveau/nouveau_buffer.h"

#ifndef __NVC0_RESOURCE_H__ /* make sure we don't use these in nvc0: */

void
nv50_init_resource_functions(struct pipe_context *pcontext);

void
nv50_screen_init_resource_functions(struct pipe_screen *pscreen);

#define NV50_RESOURCE_FLAG_VIDEO (NOUVEAU_RESOURCE_FLAG_DRV_PRIV << 0)

#define NV50_TILE_SHIFT_X(m) 6
#define NV50_TILE_SHIFT_Y(m) ((((m) >> 4) & 0xf) + 2)
#define NV50_TILE_SHIFT_Z(m) ((((m) >> 8) & 0xf) + 0)

#define NV50_TILE_SIZE_X(m) 64
#define NV50_TILE_SIZE_Y(m) ( 4 << (((m) >> 4) & 0xf))
#define NV50_TILE_SIZE_Z(m) ( 1 << (((m) >> 8) & 0xf))

#define NV50_TILE_SIZE_2D(m) (NV50_TILE_SIZE_X(m) << NV50_TILE_SHIFT_Y(m))

#define NV50_TILE_SIZE(m) (NV50_TILE_SIZE_2D(m) << NV50_TILE_SHIFT_Z(m))

#endif /* __NVC0_RESOURCE_H__ */

uint32_t
nv50_tex_choose_tile_dims_helper(unsigned nx, unsigned ny, unsigned nz);

struct nv50_miptree_level {
   uint32_t offset;
   uint32_t pitch;
   uint32_t tile_mode;
};

#define NV50_MAX_TEXTURE_LEVELS 16

struct nv50_miptree {
   struct nv04_resource base;
   struct nv50_miptree_level level[NV50_MAX_TEXTURE_LEVELS];
   uint32_t total_size;
   uint32_t layer_stride;
   boolean layout_3d; /* TRUE if layer count varies with mip level */
   uint8_t ms_x;      /* log2 of number of samples in x/y dimension */
   uint8_t ms_y;
   uint8_t ms_mode;
};

static INLINE struct nv50_miptree *
nv50_miptree(struct pipe_resource *pt)
{
   return (struct nv50_miptree *)pt;
}


#define NV50_TEXVIEW_SCALED_COORDS     (1 << 0)
#define NV50_TEXVIEW_FILTER_MSAA8      (1 << 1)
#define NV50_TEXVIEW_ACCESS_RESOLVE    (1 << 2)


/* Internal functions:
 */
boolean
nv50_miptree_init_layout_linear(struct nv50_miptree *mt, unsigned pitch_align);

struct pipe_resource *
nv50_miptree_create(struct pipe_screen *pscreen,
                    const struct pipe_resource *tmp);

void
nv50_miptree_destroy(struct pipe_screen *pscreen, struct pipe_resource *pt);

struct pipe_resource *
nv50_miptree_from_handle(struct pipe_screen *pscreen,
                         const struct pipe_resource *template,
                         struct winsys_handle *whandle);

boolean
nv50_miptree_get_handle(struct pipe_screen *pscreen,
                        struct pipe_resource *pt,
                        struct winsys_handle *whandle);

struct nv50_surface {
   struct pipe_surface base;
   uint32_t offset;
   uint32_t width;
   uint16_t height;
   uint16_t depth;
};

static INLINE struct nv50_surface *
nv50_surface(struct pipe_surface *ps)
{
   return (struct nv50_surface *)ps;
}

static INLINE enum pipe_format
nv50_zs_to_s_format(enum pipe_format format)
{
   switch (format) {
   case PIPE_FORMAT_Z24_UNORM_S8_UINT: return PIPE_FORMAT_X24S8_UINT;
   case PIPE_FORMAT_S8_UINT_Z24_UNORM: return PIPE_FORMAT_S8X24_UINT;
   case PIPE_FORMAT_Z32_FLOAT_S8X24_UINT: return PIPE_FORMAT_X32_S8X24_UINT;
   default:
      return format;
   }
}

#ifndef __NVC0_RESOURCE_H__

unsigned
nv50_mt_zslice_offset(const struct nv50_miptree *mt, unsigned l, unsigned z);

struct pipe_surface *
nv50_miptree_surface_new(struct pipe_context *,
                         struct pipe_resource *,
                         const struct pipe_surface *templ);

void *
nv50_miptree_transfer_map(struct pipe_context *pctx,
                          struct pipe_resource *res,
                          unsigned level,
                          unsigned usage,
                          const struct pipe_box *box,
                          struct pipe_transfer **ptransfer);
void
nv50_miptree_transfer_unmap(struct pipe_context *pcontext,
                            struct pipe_transfer *ptx);

#endif /* __NVC0_RESOURCE_H__ */

struct nv50_surface *
nv50_surface_from_miptree(struct nv50_miptree *mt,
                          const struct pipe_surface *templ);

struct pipe_surface *
nv50_surface_from_buffer(struct pipe_context *pipe,
                         struct pipe_resource *pt,
                         const struct pipe_surface *templ);

void
nv50_surface_destroy(struct pipe_context *, struct pipe_surface *);

#endif /* __NV50_RESOURCE_H__ */
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d7 1
a7 1
#define NOUVEAU_NVC0
d10 2
a11 1
#undef NOUVEAU_NVC0
d19 9
a27 1
#define NV50_TILE_DIM_SHIFT(m, d) (((m) >> (d * 4)) & 0xf)
d29 1
a29 3
#define NV50_TILE_PITCH(m)  (64 << 0)
#define NV50_TILE_HEIGHT(m) ( 4 << NV50_TILE_DIM_SHIFT(m, 0))
#define NV50_TILE_DEPTH(m)  ( 1 << NV50_TILE_DIM_SHIFT(m, 1))
d31 1
a31 2
#define NV50_TILE_SIZE_2D(m) ((64 * 4) <<                     \
                              NV50_TILE_DIM_SHIFT(m, 0))
d33 4
a36 1
#define NV50_TILE_SIZE(m) (NV50_TILE_SIZE_2D(m) << NV50_TILE_DIM_SHIFT(m, 1))
d52 3
d63 6
d71 3
d78 3
d86 36
d127 22
d150 1
a150 1
nv50_miptree_surface_del(struct pipe_context *, struct pipe_surface *);
d152 1
a152 1
#endif
@


1.1
log
@Initial revision
@
text
@d2 2
a3 2
#ifndef NV50_RESOURCE_H
#define NV50_RESOURCE_H
d6 8
d15 4
a18 1
#include "nouveau/nouveau_winsys.h"
d20 3
a22 2
struct pipe_resource;
struct nouveau_bo;
d24 2
d27 1
a27 11
/* This gets further specialized into either buffer or texture
 * structures.  In the future we'll want to remove much of that
 * distinction, but for now try to keep as close to the existing code
 * as possible and use the vtbl struct to choose between the two
 * underlying implementations.
 */
struct nv50_resource {
	struct pipe_resource base;
	const struct u_resource_vtbl *vtbl;
	struct nouveau_bo *bo;
};
d30 3
a32 3
	int *image_offset;
	unsigned pitch;
	unsigned tile_mode;
d38 5
a42 5
	struct nv50_resource base;

	struct nv50_miptree_level level[NV50_MAX_TEXTURE_LEVELS];
	int image_nr;
	int total_size;
d48 1
a48 8
	return (struct nv50_miptree *)pt;
}


static INLINE 
struct nv50_resource *nv50_resource(struct pipe_resource *resource)
{
	return (struct nv50_resource *)resource;
d51 1
a51 14
/* is resource mapped into the GPU's address space (i.e. VRAM or GART) ? */
static INLINE boolean
nv50_resource_mapped_by_gpu(struct pipe_resource *resource)
{
   return nv50_resource(resource)->bo->handle;
}

void
nv50_init_resource_functions(struct pipe_context *pcontext);

void
nv50_screen_init_resource_functions(struct pipe_screen *pscreen);

/* Internal functions
d55 1
a55 1
		    const struct pipe_resource *tmp);
d59 2
a60 13
			 const struct pipe_resource *template,
			 struct winsys_handle *whandle);

struct pipe_resource *
nv50_buffer_create(struct pipe_screen *pscreen,
		   const struct pipe_resource *template);

struct pipe_resource *
nv50_user_buffer_create(struct pipe_screen *screen,
			void *ptr,
			unsigned bytes,
			unsigned usage);

d63 3
a65 2
nv50_miptree_surface_new(struct pipe_context *pipe, struct pipe_resource *pt,
			 const struct pipe_surface *surf_tmpl);
d68 1
a68 2
nv50_miptree_surface_del(struct pipe_context *pipe, struct pipe_surface *ps);

@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d2 2
a3 2
#ifndef __NV50_RESOURCE_H__
#define __NV50_RESOURCE_H__
a5 1
#include "util/u_double_list.h"
a7 1
#include "nouveau/nouveau_buffer.h"
d9 2
a10 1
#ifndef __NVC0_RESOURCE_H__ /* make sure we don't use these in nvc0: */
a11 2
void
nv50_init_resource_functions(struct pipe_context *pcontext);
d13 11
a23 21
void
nv50_screen_init_resource_functions(struct pipe_screen *pscreen);

#define NV50_RESOURCE_FLAG_VIDEO (NOUVEAU_RESOURCE_FLAG_DRV_PRIV << 0)

#define NV50_TILE_SHIFT_X(m) 6
#define NV50_TILE_SHIFT_Y(m) ((((m) >> 4) & 0xf) + 2)
#define NV50_TILE_SHIFT_Z(m) ((((m) >> 8) & 0xf) + 0)

#define NV50_TILE_SIZE_X(m) 64
#define NV50_TILE_SIZE_Y(m) ( 4 << (((m) >> 4) & 0xf))
#define NV50_TILE_SIZE_Z(m) ( 1 << (((m) >> 8) & 0xf))

#define NV50_TILE_SIZE_2D(m) (NV50_TILE_SIZE_X(m) << NV50_TILE_SHIFT_Y(m))

#define NV50_TILE_SIZE(m) (NV50_TILE_SIZE_2D(m) << NV50_TILE_SHIFT_Z(m))

#endif /* __NVC0_RESOURCE_H__ */

uint32_t
nv50_tex_choose_tile_dims_helper(unsigned nx, unsigned ny, unsigned nz);
d26 3
a28 3
   uint32_t offset;
   uint32_t pitch;
   uint32_t tile_mode;
d34 5
a38 8
   struct nv04_resource base;
   struct nv50_miptree_level level[NV50_MAX_TEXTURE_LEVELS];
   uint32_t total_size;
   uint32_t layer_stride;
   boolean layout_3d; /* TRUE if layer count varies with mip level */
   uint8_t ms_x;      /* log2 of number of samples in x/y dimension */
   uint8_t ms_y;
   uint8_t ms_mode;
d44 8
a51 1
   return (struct nv50_miptree *)pt;
d54 6
d61 2
a62 3
#define NV50_TEXVIEW_SCALED_COORDS     (1 << 0)
#define NV50_TEXVIEW_FILTER_MSAA8      (1 << 1)
#define NV50_TEXVIEW_ACCESS_RESOLVE    (1 << 2)
d64 2
d67 1
a67 1
/* Internal functions:
a68 3
boolean
nv50_miptree_init_layout_linear(struct nv50_miptree *mt, unsigned pitch_align);

d71 1
a71 4
                    const struct pipe_resource *tmp);

void
nv50_miptree_destroy(struct pipe_screen *pscreen, struct pipe_resource *pt);
d75 2
a76 2
                         const struct pipe_resource *template,
                         struct winsys_handle *whandle);
d78 3
a80 12
boolean
nv50_miptree_get_handle(struct pipe_screen *pscreen,
                        struct pipe_resource *pt,
                        struct winsys_handle *whandle);

struct nv50_surface {
   struct pipe_surface base;
   uint32_t offset;
   uint32_t width;
   uint16_t height;
   uint16_t depth;
};
d82 5
a86 5
static INLINE struct nv50_surface *
nv50_surface(struct pipe_surface *ps)
{
   return (struct nv50_surface *)ps;
}
a87 11
static INLINE enum pipe_format
nv50_zs_to_s_format(enum pipe_format format)
{
   switch (format) {
   case PIPE_FORMAT_Z24_UNORM_S8_UINT: return PIPE_FORMAT_X24S8_UINT;
   case PIPE_FORMAT_S8_UINT_Z24_UNORM: return PIPE_FORMAT_S8X24_UINT;
   case PIPE_FORMAT_Z32_FLOAT_S8X24_UINT: return PIPE_FORMAT_X32_S8X24_UINT;
   default:
      return format;
   }
}
d89 3
a91 1
#ifndef __NVC0_RESOURCE_H__
a92 15
unsigned
nv50_mt_zslice_offset(const struct nv50_miptree *mt, unsigned l, unsigned z);

struct pipe_surface *
nv50_miptree_surface_new(struct pipe_context *,
                         struct pipe_resource *,
                         const struct pipe_surface *templ);

void *
nv50_miptree_transfer_map(struct pipe_context *pctx,
                          struct pipe_resource *res,
                          unsigned level,
                          unsigned usage,
                          const struct pipe_box *box,
                          struct pipe_transfer **ptransfer);
d94 1
a94 2
nv50_miptree_transfer_unmap(struct pipe_context *pcontext,
                            struct pipe_transfer *ptx);
a95 13
#endif /* __NVC0_RESOURCE_H__ */

struct nv50_surface *
nv50_surface_from_miptree(struct nv50_miptree *mt,
                          const struct pipe_surface *templ);

struct pipe_surface *
nv50_surface_from_buffer(struct pipe_context *pipe,
                         struct pipe_resource *pt,
                         const struct pipe_surface *templ);

void
nv50_surface_destroy(struct pipe_context *, struct pipe_surface *);
d97 1
a97 1
#endif /* __NV50_RESOURCE_H__ */
@

