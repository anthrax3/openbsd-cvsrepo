head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.07.09.21.08.54;	author jsg;	state dead;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.42;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.40;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@#ifndef __NV50_CONTEXT_H__
#define __NV50_CONTEXT_H__

#include "pipe/p_context.h"
#include "pipe/p_defines.h"
#include "pipe/p_state.h"

#include "util/u_memory.h"
#include "util/u_math.h"
#include "util/u_inlines.h"
#include "util/u_dynarray.h"

#ifdef NV50_WITH_DRAW_MODULE
#include "draw/draw_vertex.h"
#endif

#include "nv50_debug.h"
#include "nv50_winsys.h"
#include "nv50_stateobj.h"
#include "nv50_screen.h"
#include "nv50_program.h"
#include "nv50_resource.h"
#include "nv50_transfer.h"

#include "nouveau/nouveau_context.h"
#include "nouveau/nv_object.xml.h"
#include "nouveau/nv_m2mf.xml.h"
#include "nv50_3ddefs.xml.h"
#include "nv50_3d.xml.h"
#include "nv50_2d.xml.h"

#define NV50_NEW_BLEND        (1 << 0)
#define NV50_NEW_RASTERIZER   (1 << 1)
#define NV50_NEW_ZSA          (1 << 2)
#define NV50_NEW_VERTPROG     (1 << 3)
#define NV50_NEW_GMTYPROG     (1 << 6)
#define NV50_NEW_FRAGPROG     (1 << 7)
#define NV50_NEW_BLEND_COLOUR (1 << 8)
#define NV50_NEW_STENCIL_REF  (1 << 9)
#define NV50_NEW_CLIP         (1 << 10)
#define NV50_NEW_SAMPLE_MASK  (1 << 11)
#define NV50_NEW_FRAMEBUFFER  (1 << 12)
#define NV50_NEW_STIPPLE      (1 << 13)
#define NV50_NEW_SCISSOR      (1 << 14)
#define NV50_NEW_VIEWPORT     (1 << 15)
#define NV50_NEW_ARRAYS       (1 << 16)
#define NV50_NEW_VERTEX       (1 << 17)
#define NV50_NEW_CONSTBUF     (1 << 18)
#define NV50_NEW_TEXTURES     (1 << 19)
#define NV50_NEW_SAMPLERS     (1 << 20)
#define NV50_NEW_STRMOUT      (1 << 21)
#define NV50_NEW_CONTEXT      (1 << 31)

#define NV50_BIND_FB          0
#define NV50_BIND_VERTEX      1
#define NV50_BIND_VERTEX_TMP  2
#define NV50_BIND_INDEX       3
#define NV50_BIND_TEXTURES    4
#define NV50_BIND_CB(s, i)   (5 + 16 * (s) + (i))
#define NV50_BIND_SO         53
#define NV50_BIND_SCREEN     54
#define NV50_BIND_TLS        55
#define NV50_BIND_COUNT      56
#define NV50_BIND_2D          0
#define NV50_BIND_M2MF        0
#define NV50_BIND_FENCE       1

#define NV50_CB_TMP 123
/* fixed constant buffer binding points - low indices for user's constbufs */
#define NV50_CB_PVP 124
#define NV50_CB_PGP 126
#define NV50_CB_PFP 125
#define NV50_CB_AUX 127


struct nv50_blitctx;

boolean nv50_blitctx_create(struct nv50_context *);

struct nv50_context {
   struct nouveau_context base;

   struct nv50_screen *screen;

   struct nouveau_bufctx *bufctx_3d;
   struct nouveau_bufctx *bufctx;

   uint32_t dirty;

   struct {
      uint32_t instance_elts; /* bitmask of per-instance elements */
      uint32_t instance_base;
      uint32_t interpolant_ctrl;
      uint32_t semantic_color;
      uint32_t semantic_psize;
      int32_t index_bias;
      boolean uniform_buffer_bound[3];
      boolean prim_restart;
      boolean point_sprite;
      boolean rt_serialize;
      boolean flushed;
      boolean rasterizer_discard;
      uint8_t tls_required;
      boolean new_tls_space;
      uint8_t num_vtxbufs;
      uint8_t num_vtxelts;
      uint8_t num_textures[3];
      uint8_t num_samplers[3];
      uint8_t prim_size;
      uint16_t scissor;
   } state;

   struct nv50_blend_stateobj *blend;
   struct nv50_rasterizer_stateobj *rast;
   struct nv50_zsa_stateobj *zsa;
   struct nv50_vertex_stateobj *vertex;

   struct nv50_program *vertprog;
   struct nv50_program *gmtyprog;
   struct nv50_program *fragprog;

   struct nv50_constbuf constbuf[3][NV50_MAX_PIPE_CONSTBUFS];
   uint16_t constbuf_dirty[3];
   uint16_t constbuf_valid[3];

   struct pipe_vertex_buffer vtxbuf[PIPE_MAX_ATTRIBS];
   unsigned num_vtxbufs;
   struct pipe_index_buffer idxbuf;
   uint32_t vbo_fifo; /* bitmask of vertex elements to be pushed to FIFO */
   uint32_t vbo_user; /* bitmask of vertex buffers pointing to user memory */
   uint32_t vbo_constant; /* bitmask of user buffers with stride 0 */
   uint32_t vb_elt_first; /* from pipe_draw_info, for vertex upload */
   uint32_t vb_elt_limit; /* max - min element (count - 1) */
   uint32_t instance_off; /* base vertex for instanced arrays */
   uint32_t instance_max; /* max instance for current draw call */

   struct pipe_sampler_view *textures[3][PIPE_MAX_SAMPLERS];
   unsigned num_textures[3];
   struct nv50_tsc_entry *samplers[3][PIPE_MAX_SAMPLERS];
   unsigned num_samplers[3];

   uint8_t num_so_targets;
   uint8_t so_targets_dirty;
   struct pipe_stream_output_target *so_target[4];

   struct pipe_framebuffer_state framebuffer;
   struct pipe_blend_color blend_colour;
   struct pipe_stencil_ref stencil_ref;
   struct pipe_poly_stipple stipple;
   struct pipe_scissor_state scissor;
   struct pipe_viewport_state viewport;
   struct pipe_clip_state clip;

   unsigned sample_mask;

   boolean vbo_push_hint;

   struct pipe_query *cond_query;
   boolean cond_cond;
   uint cond_mode;

   struct nv50_blitctx *blit;

#ifdef NV50_WITH_DRAW_MODULE
   struct draw_context *draw;
#endif
};

static INLINE struct nv50_context *
nv50_context(struct pipe_context *pipe)
{
   return (struct nv50_context *)pipe;
}

static INLINE struct nv50_screen *
nv50_context_screen(struct nv50_context *nv50)
{
   return nv50_screen(&nv50->base.screen->base);
}

/* return index used in nv50_context arrays for a specific shader type */
static INLINE unsigned
nv50_context_shader_stage(unsigned pipe)
{
   switch (pipe) {
   case PIPE_SHADER_VERTEX: return 0;
   case PIPE_SHADER_FRAGMENT: return 1;
   case PIPE_SHADER_GEOMETRY: return 2;
   case PIPE_SHADER_COMPUTE: return 3;
   default:
      assert(!"invalid/unhandled shader type");
      return 0;
   }
}

/* nv50_context.c */
struct pipe_context *nv50_create(struct pipe_screen *, void *);

void nv50_bufctx_fence(struct nouveau_bufctx *, boolean on_flush);

void nv50_default_kick_notify(struct nouveau_pushbuf *);

/* nv50_draw.c */
extern struct draw_stage *nv50_draw_render_stage(struct nv50_context *);

/* nv50_query.c */
void nv50_init_query_functions(struct nv50_context *);
void nv50_query_pushbuf_submit(struct nouveau_pushbuf *,
                               struct pipe_query *, unsigned result_offset);
void nv84_query_fifo_wait(struct nouveau_pushbuf *, struct pipe_query *);
void nva0_so_target_save_offset(struct pipe_context *,
                                struct pipe_stream_output_target *,
                                unsigned index, boolean seralize);

#define NVA0_QUERY_STREAM_OUTPUT_BUFFER_OFFSET (PIPE_QUERY_TYPES + 0)

/* nv50_shader_state.c */
void nv50_vertprog_validate(struct nv50_context *);
void nv50_gmtyprog_validate(struct nv50_context *);
void nv50_fragprog_validate(struct nv50_context *);
void nv50_fp_linkage_validate(struct nv50_context *);
void nv50_gp_linkage_validate(struct nv50_context *);
void nv50_constbufs_validate(struct nv50_context *);
void nv50_validate_derived_rs(struct nv50_context *);
void nv50_stream_output_validate(struct nv50_context *);

/* nv50_state.c */
extern void nv50_init_state_functions(struct nv50_context *);

/* nv50_state_validate.c */
/* @@words: check for space before emitting relocs */
extern boolean nv50_state_validate(struct nv50_context *, uint32_t state_mask,
                                   unsigned space_words);

/* nv50_surface.c */
extern void nv50_clear(struct pipe_context *, unsigned buffers,
                       const union pipe_color_union *color,
                       double depth, unsigned stencil);
extern void nv50_init_surface_functions(struct nv50_context *);

/* nv50_tex.c */
void nv50_validate_textures(struct nv50_context *);
void nv50_validate_samplers(struct nv50_context *);

struct pipe_sampler_view *
nv50_create_texture_view(struct pipe_context *,
                         struct pipe_resource *,
                         const struct pipe_sampler_view *,
                         uint32_t flags,
                         enum pipe_texture_target);
struct pipe_sampler_view *
nv50_create_sampler_view(struct pipe_context *,
                         struct pipe_resource *,
                         const struct pipe_sampler_view *);

/* nv50_transfer.c */
void
nv50_m2mf_transfer_rect(struct nv50_context *,
                        const struct nv50_m2mf_rect *dst,
                        const struct nv50_m2mf_rect *src,
                        uint32_t nblocksx, uint32_t nblocksy);
void
nv50_sifc_linear_u8(struct nouveau_context *pipe,
                    struct nouveau_bo *dst, unsigned offset, unsigned domain,
                    unsigned size, const void *data);
void
nv50_m2mf_copy_linear(struct nouveau_context *pipe,
                      struct nouveau_bo *dst, unsigned dstoff, unsigned dstdom,
                      struct nouveau_bo *src, unsigned srcoff, unsigned srcdom,
                      unsigned size);
void
nv50_cb_push(struct nouveau_context *nv,
             struct nouveau_bo *bo, unsigned domain,
             unsigned base, unsigned size,
             unsigned offset, unsigned words, const uint32_t *data);

/* nv50_vbo.c */
void nv50_draw_vbo(struct pipe_context *, const struct pipe_draw_info *);

void *
nv50_vertex_state_create(struct pipe_context *pipe,
                         unsigned num_elements,
                         const struct pipe_vertex_element *elements);
void
nv50_vertex_state_delete(struct pipe_context *pipe, void *hwcso);

void nv50_vertex_arrays_validate(struct nv50_context *nv50);

/* nv50_push.c */
void nv50_push_vbo(struct nv50_context *, const struct pipe_draw_info *);

/* nv84_video.c */
struct pipe_video_decoder *
nv84_create_decoder(struct pipe_context *context,
                    enum pipe_video_profile profile,
                    enum pipe_video_entrypoint entrypoint,
                    enum pipe_video_chroma_format chroma_format,
                    unsigned width, unsigned height,
                    unsigned max_references,
                    bool expect_chunked_decode);

struct pipe_video_buffer *
nv84_video_buffer_create(struct pipe_context *pipe,
                         const struct pipe_video_buffer *template);

int
nv84_screen_get_video_param(struct pipe_screen *pscreen,
                            enum pipe_video_profile profile,
                            enum pipe_video_cap param);

boolean
nv84_screen_video_supported(struct pipe_screen *screen,
                            enum pipe_format format,
                            enum pipe_video_profile profile);

#endif
@


1.4
log
@Merge Mesa 9.2.0
@
text
@@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d13 1
d15 1
d23 1
d51 2
d54 13
a66 5
#define NV50_BUFCTX_CONSTANT 0
#define NV50_BUFCTX_FRAME    1
#define NV50_BUFCTX_VERTEX   2
#define NV50_BUFCTX_TEXTURES 3
#define NV50_BUFCTX_COUNT    4
d68 1
d75 5
d85 2
a86 2
   struct util_dynarray residents[NV50_BUFCTX_COUNT];
   unsigned residents_size;
d97 1
d100 5
d109 1
d122 1
a122 1
   struct pipe_resource *constbuf[3][16];
d124 1
d131 5
a135 2
   unsigned vbo_min_index; /* from pipe_draw_info, for vertex upload */
   unsigned vbo_max_index;
d142 4
d158 7
d166 1
d175 5
a179 7
struct nv50_surface {
   struct pipe_surface base;
   uint32_t offset;
   uint32_t width;
   uint16_t height;
   uint16_t depth;
};
d181 3
a183 2
static INLINE struct nv50_surface *
nv50_surface(struct pipe_surface *ps)
d185 9
a193 1
   return (struct nv50_surface *)ps;
d199 1
a199 1
void nv50_default_flush_notify(struct nouveau_channel *);
d201 1
a201 11
void nv50_bufctx_emit_relocs(struct nv50_context *);
void nv50_bufctx_add_resident(struct nv50_context *, int ctx,
                              struct nv04_resource *, uint32_t flags);
void nv50_bufctx_del_resident(struct nv50_context *, int ctx,
                              struct nv04_resource *);
static INLINE void
nv50_bufctx_reset(struct nv50_context *nv50, int ctx)
{
   nv50->residents_size -= nv50->residents[ctx].size;
   util_dynarray_resize(&nv50->residents[ctx], 0);
}
a205 4
/* nv50_program.c */
boolean nv50_program_translate(struct nv50_program *);
void nv50_program_destroy(struct nv50_context *, struct nv50_program *);

d208 8
d225 1
d231 3
a233 1
extern boolean nv50_state_validate(struct nv50_context *);
d237 2
a238 1
                       const float *rgba, double depth, unsigned stencil);
d246 6
d258 5
d265 1
a265 1
                    unsigned size, void *data);
d271 5
d291 24
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a3 1
#include <stdio.h>
a6 1
#include "pipe/p_compiler.h"
d11 1
d15 3
a17 5
#include "nouveau/nouveau_winsys.h"
#include "nouveau/nouveau_gldefs.h"
#include "nouveau/nouveau_stateobj.h"
#include "nv50_reg.h"

d20 40
d61 2
a62 39
#define NOUVEAU_ERR(fmt, args...) \
	fprintf(stderr, "%s:%d -  "fmt, __FUNCTION__, __LINE__, ##args);
#define NOUVEAU_MSG(fmt, args...) \
	fprintf(stderr, "nouveau: "fmt, ##args);

#define nouveau_bo_tile_layout(nvbo) \
	((nvbo)->tile_flags & NOUVEAU_BO_TILE_LAYOUT_MASK)

/* Constant buffer assignment */
#define NV50_CB_PMISC		0
#define NV50_CB_PVP		1
#define NV50_CB_PFP		2
#define NV50_CB_PGP		3
#define NV50_CB_AUX		4

#define NV50_NEW_BLEND		(1 << 0)
#define NV50_NEW_ZSA		(1 << 1)
#define NV50_NEW_BLEND_COLOUR	(1 << 2)
#define NV50_NEW_STIPPLE	(1 << 3)
#define NV50_NEW_SCISSOR	(1 << 4)
#define NV50_NEW_VIEWPORT	(1 << 5)
#define NV50_NEW_RASTERIZER	(1 << 6)
#define NV50_NEW_FRAMEBUFFER	(1 << 7)
#define NV50_NEW_VERTPROG	(1 << 8)
#define NV50_NEW_VERTPROG_CB	(1 << 9)
#define NV50_NEW_FRAGPROG	(1 << 10)
#define NV50_NEW_FRAGPROG_CB	(1 << 11)
#define NV50_NEW_GEOMPROG	(1 << 12)
#define NV50_NEW_GEOMPROG_CB	(1 << 13)
#define NV50_NEW_ARRAYS		(1 << 14)
#define NV50_NEW_SAMPLER	(1 << 15)
#define NV50_NEW_TEXTURE	(1 << 16)
#define NV50_NEW_STENCIL_REF	(1 << 17)
#define NV50_NEW_CLIP		(1 << 18)

struct nv50_blend_stateobj {
	struct pipe_blend_state pipe;
	struct nouveau_stateobj *so;
};
d64 1
a64 4
struct nv50_zsa_stateobj {
	struct pipe_depth_stencil_alpha_state pipe;
	struct nouveau_stateobj *so;
};
d66 2
a67 4
struct nv50_rasterizer_stateobj {
	struct pipe_rasterizer_state pipe;
	struct nouveau_stateobj *so;
};
d69 1
a69 4
struct nv50_sampler_stateobj {
	boolean normalized;
	unsigned tsc[8];
};
d71 48
a118 4
struct nv50_sampler_view {
	struct pipe_sampler_view pipe;
	uint32_t tic[8];
};
d120 1
a120 5
struct nv50_vtxelt_stateobj {
	struct pipe_vertex_element pipe[16];
	unsigned num_elements;
	uint32_t hw[16];
};
d122 1
a122 5
static INLINE struct nv50_sampler_view *
nv50_sampler_view(struct pipe_sampler_view *view)
{
	return (struct nv50_sampler_view *)view;
}
d124 2
a125 5
static INLINE unsigned
get_tile_height(uint32_t tile_mode)
{
        return 1 << ((tile_mode & 0xf) + 2);
}
d127 2
a128 2
static INLINE unsigned
get_tile_depth(uint32_t tile_mode)
d130 1
a130 1
        return 1 << (tile_mode >> 4);
a132 1

d134 5
a138 2
	struct pipe_surface base;
	unsigned offset;
d142 1
a142 1
nv50_surface(struct pipe_surface *pt)
d144 1
a144 1
	return (struct nv50_surface *)pt;
d147 2
a148 42
struct nv50_state {
	struct nouveau_stateobj *hw[64];
	uint64_t hw_dirty;

	unsigned sampler_view_nr[3];
	struct nouveau_stateobj *vtxbuf;
	struct nouveau_stateobj *vtxattr;
	unsigned vtxelt_nr;
};

struct nv50_context {
	struct pipe_context pipe;

	struct nv50_screen *screen;

	struct draw_context *draw;

	struct nv50_state state;

	unsigned dirty;
	struct nv50_blend_stateobj *blend;
	struct nv50_zsa_stateobj *zsa;
	struct nv50_rasterizer_stateobj *rasterizer;
	struct pipe_blend_color blend_colour;
	struct pipe_stencil_ref stencil_ref;
	struct pipe_poly_stipple stipple;
	struct pipe_scissor_state scissor;
	struct pipe_viewport_state viewport;
	struct pipe_framebuffer_state framebuffer;
	struct pipe_clip_state clip;
	struct nv50_program *vertprog;
	struct nv50_program *fragprog;
	struct nv50_program *geomprog;
	struct pipe_resource *constbuf[PIPE_SHADER_TYPES];
	struct pipe_vertex_buffer vtxbuf[PIPE_MAX_ATTRIBS];
	unsigned vtxbuf_nr;
	struct pipe_index_buffer idxbuf;
	struct nv50_vtxelt_stateobj *vtxelt;
	struct nv50_sampler_stateobj *sampler[3][PIPE_MAX_SAMPLERS];
	unsigned sampler_nr[3];
	struct pipe_sampler_view *sampler_views[3][PIPE_MAX_SAMPLERS];
	unsigned sampler_view_nr[3];
d150 1
a150 3
	unsigned vbo_fifo;
	unsigned req_lmem;
};
d152 7
a158 2
static INLINE struct nv50_context *
nv50_context(struct pipe_context *pipe)
d160 2
a161 1
	return (struct nv50_context *)pipe;
d164 2
a165 11
extern void nv50_init_surface_functions(struct nv50_context *nv50);
extern void nv50_init_state_functions(struct nv50_context *nv50);
extern void nv50_init_query_functions(struct nv50_context *nv50);
extern void nv50_init_transfer_functions(struct nv50_context *nv50);

extern void nv50_screen_init_miptree_functions(struct pipe_screen *pscreen);

extern int
nv50_surface_do_copy(struct nv50_screen *screen, struct pipe_surface *dst,
		     int dx, int dy, struct pipe_surface *src, int sx, int sy,
		     int w, int h);
d167 3
a169 2
/* nv50_draw.c */
extern struct draw_stage *nv50_draw_render_stage(struct nv50_context *nv50);
d171 2
a172 5
/* nv50_vbo.c */
extern void nv50_draw_vbo(struct pipe_context *pipe,
                          const struct pipe_draw_info *info);
extern void nv50_vtxelt_construct(struct nv50_vtxelt_stateobj *cso);
extern struct nouveau_stateobj *nv50_vbo_validate(struct nv50_context *nv50);
d174 8
a181 11
/* nv50_push.c */
extern void
nv50_push_elements_instanced(struct pipe_context *, struct pipe_resource *,
			     unsigned idxsize, int idxbias,
                             unsigned mode, unsigned start,
			     unsigned count, unsigned i_start,
			     unsigned i_count);

/* nv50_clear.c */
extern void nv50_clear(struct pipe_context *pipe, unsigned buffers,
		       const float *rgba, double depth, unsigned stencil);
d183 2
a184 13
/* nv50_program.c */
extern struct nouveau_stateobj *
nv50_vertprog_validate(struct nv50_context *nv50);
extern struct nouveau_stateobj *
nv50_fragprog_validate(struct nv50_context *nv50);
extern struct nouveau_stateobj *
nv50_geomprog_validate(struct nv50_context *nv50);
extern struct nouveau_stateobj *
nv50_fp_linkage_validate(struct nv50_context *nv50);
extern struct nouveau_stateobj *
nv50_gp_linkage_validate(struct nv50_context *nv50);
extern void nv50_program_destroy(struct nv50_context *nv50,
				 struct nv50_program *p);
d187 1
a187 1
extern boolean nv50_state_validate(struct nv50_context *nv50, unsigned dwords);
d189 4
a192 4
extern void nv50_so_init_sifc(struct nv50_context *nv50,
			      struct nouveau_stateobj *so,
			      struct nouveau_bo *bo, unsigned reloc,
			      unsigned offset, unsigned size);
d195 18
a212 3
extern boolean nv50_tex_construct(struct nv50_sampler_view *view);
extern void nv50_tex_relocs(struct nv50_context *);
extern struct nouveau_stateobj *nv50_tex_validate(struct nv50_context *);
d214 2
d217 6
a222 3
/* nv50_context.c */
struct pipe_context *
nv50_create(struct pipe_screen *pscreen, void *priv);
d224 1
a224 26
static INLINE unsigned
nv50_prim(unsigned mode)
{
	switch (mode) {
	case PIPE_PRIM_POINTS: return NV50TCL_VERTEX_BEGIN_POINTS;
	case PIPE_PRIM_LINES: return NV50TCL_VERTEX_BEGIN_LINES;
	case PIPE_PRIM_LINE_LOOP: return NV50TCL_VERTEX_BEGIN_LINE_LOOP;
	case PIPE_PRIM_LINE_STRIP: return NV50TCL_VERTEX_BEGIN_LINE_STRIP;
	case PIPE_PRIM_TRIANGLES: return NV50TCL_VERTEX_BEGIN_TRIANGLES;
	case PIPE_PRIM_TRIANGLE_STRIP:
		return NV50TCL_VERTEX_BEGIN_TRIANGLE_STRIP;
	case PIPE_PRIM_TRIANGLE_FAN: return NV50TCL_VERTEX_BEGIN_TRIANGLE_FAN;
	case PIPE_PRIM_QUADS: return NV50TCL_VERTEX_BEGIN_QUADS;
	case PIPE_PRIM_QUAD_STRIP: return NV50TCL_VERTEX_BEGIN_QUAD_STRIP;
	case PIPE_PRIM_POLYGON: return NV50TCL_VERTEX_BEGIN_POLYGON;
	case PIPE_PRIM_LINES_ADJACENCY:
		return NV50TCL_VERTEX_BEGIN_LINES_ADJACENCY;
	case PIPE_PRIM_LINE_STRIP_ADJACENCY:
		return NV50TCL_VERTEX_BEGIN_LINE_STRIP_ADJACENCY;
	case PIPE_PRIM_TRIANGLES_ADJACENCY:
		return NV50TCL_VERTEX_BEGIN_TRIANGLES_ADJACENCY;
	case PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY:
		return NV50TCL_VERTEX_BEGIN_TRIANGLE_STRIP_ADJACENCY;
	default:
		break;
	}
d226 2
a227 3
	NOUVEAU_ERR("invalid primitive type %d\n", mode);
	return NV50TCL_VERTEX_BEGIN_POINTS;
}
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d19 1
a19 1
#include "nouveau/nouveau_context.h"
d25 1
a25 1
	fprintf(stderr, "%s:%d -  "fmt, __func__, __LINE__, ##args);
d29 3
d57 1
d79 17
a107 19
struct nv50_miptree_level {
	int *image_offset;
	unsigned pitch;
	unsigned tile_mode;
};

struct nv50_miptree {
	struct nouveau_miptree base;

	struct nv50_miptree_level level[PIPE_MAX_TEXTURE_LEVELS];
	int image_nr;
	int total_size;
};

static INLINE struct nv50_miptree *
nv50_miptree(struct pipe_texture *pt)
{
	return (struct nv50_miptree *)pt;
}
d111 1
d121 2
a122 1
	unsigned dirty;
d124 1
a124 19
	struct nouveau_stateobj *fb;
	struct nouveau_stateobj *blend;
	struct nouveau_stateobj *blend_colour;
	struct nouveau_stateobj *zsa;
	struct nouveau_stateobj *stencil_ref;
	struct nouveau_stateobj *rast;
	struct nouveau_stateobj *stipple;
	struct nouveau_stateobj *scissor;
	unsigned scissor_enabled;
	struct nouveau_stateobj *viewport;
	struct nouveau_stateobj *tsc_upload;
	struct nouveau_stateobj *tic_upload;
	unsigned miptree_nr[PIPE_SHADER_TYPES];
	struct nouveau_stateobj *vertprog;
	struct nouveau_stateobj *fragprog;
	struct nouveau_stateobj *geomprog;
	struct nouveau_stateobj *fp_linkage;
	struct nouveau_stateobj *gp_linkage;
	struct nouveau_stateobj *vtxfmt;
a126 1
	struct nouveau_stateobj *instbuf;
d149 1
d153 1
a153 1
	struct pipe_buffer *constbuf[PIPE_SHADER_TYPES];
d156 6
a161 6
	struct pipe_vertex_element vtxelt[PIPE_MAX_ATTRIBS];
	unsigned vtxelt_nr;
	struct nv50_sampler_stateobj *sampler[PIPE_SHADER_TYPES][PIPE_MAX_SAMPLERS];
	unsigned sampler_nr[PIPE_SHADER_TYPES];
	struct nv50_miptree *miptree[PIPE_SHADER_TYPES][PIPE_MAX_SAMPLERS];
	unsigned miptree_nr[PIPE_SHADER_TYPES];
d163 2
a164 1
	uint16_t vbo_fifo;
d176 1
d189 12
a200 19
extern void nv50_draw_arrays(struct pipe_context *, unsigned mode,
				unsigned start, unsigned count);
extern void nv50_draw_arrays_instanced(struct pipe_context *, unsigned mode,
					unsigned start, unsigned count,
					unsigned startInstance,
					unsigned instanceCount);
extern void nv50_draw_elements(struct pipe_context *pipe,
				  struct pipe_buffer *indexBuffer,
				  unsigned indexSize,
				  unsigned mode, unsigned start,
				  unsigned count);
extern void nv50_draw_elements_instanced(struct pipe_context *pipe,
					 struct pipe_buffer *indexBuffer,
					 unsigned indexSize,
					 unsigned mode, unsigned start,
					 unsigned count,
					 unsigned startInstance,
					 unsigned instanceCount);
extern void nv50_vbo_validate(struct nv50_context *nv50);
d207 10
a216 5
extern void nv50_vertprog_validate(struct nv50_context *nv50);
extern void nv50_fragprog_validate(struct nv50_context *nv50);
extern void nv50_geomprog_validate(struct nv50_context *nv50);
extern void nv50_fp_linkage_validate(struct nv50_context *nv50);
extern void nv50_gp_linkage_validate(struct nv50_context *nv50);
d221 1
a221 2
extern boolean nv50_state_validate(struct nv50_context *nv50);
extern void nv50_state_flush_notify(struct nouveau_channel *chan);
d229 3
a231 1
extern void nv50_tex_validate(struct nv50_context *);
a232 7
/* nv50_transfer.c */
extern void
nv50_upload_sifc(struct nv50_context *nv50,
		 struct nouveau_bo *bo, unsigned dst_offset, unsigned reloc,
		 unsigned dst_format, int dst_w, int dst_h, int dst_pitch,
		 void *src, unsigned src_format, int src_pitch,
		 int x, int y, int w, int h, int cpp);
d237 31
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d19 1
a19 1
#include "nv50_reg.h"
d25 1
a25 1
	fprintf(stderr, "%s:%d -  "fmt, __FUNCTION__, __LINE__, ##args);
a28 3
#define nouveau_bo_tile_layout(nvbo) \
	((nvbo)->tile_flags & NOUVEAU_BO_TILE_LAYOUT_MASK)

a53 1
#define NV50_NEW_CLIP		(1 << 18)
a74 17
struct nv50_sampler_view {
	struct pipe_sampler_view pipe;
	uint32_t tic[8];
};

struct nv50_vtxelt_stateobj {
	struct pipe_vertex_element pipe[16];
	unsigned num_elements;
	uint32_t hw[16];
};

static INLINE struct nv50_sampler_view *
nv50_sampler_view(struct pipe_sampler_view *view)
{
	return (struct nv50_sampler_view *)view;
}

d87 19
a108 1
	unsigned offset;
d118 1
a118 2
	struct nouveau_stateobj *hw[64];
	uint64_t hw_dirty;
d120 19
a138 1
	unsigned sampler_view_nr[3];
d141 1
a163 1
	struct pipe_clip_state clip;
d167 1
a167 1
	struct pipe_resource *constbuf[PIPE_SHADER_TYPES];
d170 6
a175 6
	struct pipe_index_buffer idxbuf;
	struct nv50_vtxelt_stateobj *vtxelt;
	struct nv50_sampler_stateobj *sampler[3][PIPE_MAX_SAMPLERS];
	unsigned sampler_nr[3];
	struct pipe_sampler_view *sampler_views[3][PIPE_MAX_SAMPLERS];
	unsigned sampler_view_nr[3];
d177 1
a177 2
	unsigned vbo_fifo;
	unsigned req_lmem;
a188 1
extern void nv50_init_transfer_functions(struct nv50_context *nv50);
d201 19
a219 12
extern void nv50_draw_vbo(struct pipe_context *pipe,
                          const struct pipe_draw_info *info);
extern void nv50_vtxelt_construct(struct nv50_vtxelt_stateobj *cso);
extern struct nouveau_stateobj *nv50_vbo_validate(struct nv50_context *nv50);

/* nv50_push.c */
extern void
nv50_push_elements_instanced(struct pipe_context *, struct pipe_resource *,
			     unsigned idxsize, int idxbias,
                             unsigned mode, unsigned start,
			     unsigned count, unsigned i_start,
			     unsigned i_count);
d226 5
a230 10
extern struct nouveau_stateobj *
nv50_vertprog_validate(struct nv50_context *nv50);
extern struct nouveau_stateobj *
nv50_fragprog_validate(struct nv50_context *nv50);
extern struct nouveau_stateobj *
nv50_geomprog_validate(struct nv50_context *nv50);
extern struct nouveau_stateobj *
nv50_fp_linkage_validate(struct nv50_context *nv50);
extern struct nouveau_stateobj *
nv50_gp_linkage_validate(struct nv50_context *nv50);
d235 2
a236 1
extern boolean nv50_state_validate(struct nv50_context *nv50, unsigned dwords);
d244 1
a244 3
extern boolean nv50_tex_construct(struct nv50_sampler_view *view);
extern void nv50_tex_relocs(struct nv50_context *);
extern struct nouveau_stateobj *nv50_tex_validate(struct nv50_context *);
d246 7
a256 31

static INLINE unsigned
nv50_prim(unsigned mode)
{
	switch (mode) {
	case PIPE_PRIM_POINTS: return NV50TCL_VERTEX_BEGIN_POINTS;
	case PIPE_PRIM_LINES: return NV50TCL_VERTEX_BEGIN_LINES;
	case PIPE_PRIM_LINE_LOOP: return NV50TCL_VERTEX_BEGIN_LINE_LOOP;
	case PIPE_PRIM_LINE_STRIP: return NV50TCL_VERTEX_BEGIN_LINE_STRIP;
	case PIPE_PRIM_TRIANGLES: return NV50TCL_VERTEX_BEGIN_TRIANGLES;
	case PIPE_PRIM_TRIANGLE_STRIP:
		return NV50TCL_VERTEX_BEGIN_TRIANGLE_STRIP;
	case PIPE_PRIM_TRIANGLE_FAN: return NV50TCL_VERTEX_BEGIN_TRIANGLE_FAN;
	case PIPE_PRIM_QUADS: return NV50TCL_VERTEX_BEGIN_QUADS;
	case PIPE_PRIM_QUAD_STRIP: return NV50TCL_VERTEX_BEGIN_QUAD_STRIP;
	case PIPE_PRIM_POLYGON: return NV50TCL_VERTEX_BEGIN_POLYGON;
	case PIPE_PRIM_LINES_ADJACENCY:
		return NV50TCL_VERTEX_BEGIN_LINES_ADJACENCY;
	case PIPE_PRIM_LINE_STRIP_ADJACENCY:
		return NV50TCL_VERTEX_BEGIN_LINE_STRIP_ADJACENCY;
	case PIPE_PRIM_TRIANGLES_ADJACENCY:
		return NV50TCL_VERTEX_BEGIN_TRIANGLES_ADJACENCY;
	case PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY:
		return NV50TCL_VERTEX_BEGIN_TRIANGLE_STRIP_ADJACENCY;
	default:
		break;
	}

	NOUVEAU_ERR("invalid primitive type %d\n", mode);
	return NV50TCL_VERTEX_BEGIN_POINTS;
}
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d4 1
d8 1
a12 1
#include "util/u_dynarray.h"
a13 1
#ifdef NV50_WITH_DRAW_MODULE
a14 1
#endif
d16 5
a20 3
#include "nv50_debug.h"
#include "nv50_winsys.h"
#include "nv50_stateobj.h"
a22 2
#include "nv50_resource.h"
#include "nv50_transfer.h"
d24 39
a62 49
#include "nouveau/nouveau_context.h"
#include "nouveau/nv_object.xml.h"
#include "nouveau/nv_m2mf.xml.h"
#include "nv50_3ddefs.xml.h"
#include "nv50_3d.xml.h"
#include "nv50_2d.xml.h"

#define NV50_NEW_BLEND        (1 << 0)
#define NV50_NEW_RASTERIZER   (1 << 1)
#define NV50_NEW_ZSA          (1 << 2)
#define NV50_NEW_VERTPROG     (1 << 3)
#define NV50_NEW_GMTYPROG     (1 << 6)
#define NV50_NEW_FRAGPROG     (1 << 7)
#define NV50_NEW_BLEND_COLOUR (1 << 8)
#define NV50_NEW_STENCIL_REF  (1 << 9)
#define NV50_NEW_CLIP         (1 << 10)
#define NV50_NEW_SAMPLE_MASK  (1 << 11)
#define NV50_NEW_FRAMEBUFFER  (1 << 12)
#define NV50_NEW_STIPPLE      (1 << 13)
#define NV50_NEW_SCISSOR      (1 << 14)
#define NV50_NEW_VIEWPORT     (1 << 15)
#define NV50_NEW_ARRAYS       (1 << 16)
#define NV50_NEW_VERTEX       (1 << 17)
#define NV50_NEW_CONSTBUF     (1 << 18)
#define NV50_NEW_TEXTURES     (1 << 19)
#define NV50_NEW_SAMPLERS     (1 << 20)
#define NV50_NEW_STRMOUT      (1 << 21)
#define NV50_NEW_CONTEXT      (1 << 31)

#define NV50_BIND_FB          0
#define NV50_BIND_VERTEX      1
#define NV50_BIND_VERTEX_TMP  2
#define NV50_BIND_INDEX       3
#define NV50_BIND_TEXTURES    4
#define NV50_BIND_CB(s, i)   (5 + 16 * (s) + (i))
#define NV50_BIND_SO         53
#define NV50_BIND_SCREEN     54
#define NV50_BIND_TLS        55
#define NV50_BIND_COUNT      56
#define NV50_BIND_2D          0
#define NV50_BIND_M2MF        0
#define NV50_BIND_FENCE       1

#define NV50_CB_TMP 123
/* fixed constant buffer binding points - low indices for user's constbufs */
#define NV50_CB_PVP 124
#define NV50_CB_PGP 126
#define NV50_CB_PFP 125
#define NV50_CB_AUX 127
d64 4
d69 4
a72 1
struct nv50_blitctx;
d74 4
a77 1
boolean nv50_blitctx_create(struct nv50_context *);
d79 4
a82 7
struct nv50_context {
   struct nouveau_context base;

   struct nv50_screen *screen;

   struct nouveau_bufctx *bufctx_3d;
   struct nouveau_bufctx *bufctx;
d84 4
a87 79
   uint32_t dirty;

   struct {
      uint32_t instance_elts; /* bitmask of per-instance elements */
      uint32_t instance_base;
      uint32_t interpolant_ctrl;
      uint32_t semantic_color;
      uint32_t semantic_psize;
      int32_t index_bias;
      boolean uniform_buffer_bound[3];
      boolean prim_restart;
      boolean point_sprite;
      boolean rt_serialize;
      boolean flushed;
      boolean rasterizer_discard;
      uint8_t tls_required;
      boolean new_tls_space;
      uint8_t num_vtxbufs;
      uint8_t num_vtxelts;
      uint8_t num_textures[3];
      uint8_t num_samplers[3];
      uint8_t prim_size;
      uint16_t scissor;
   } state;

   struct nv50_blend_stateobj *blend;
   struct nv50_rasterizer_stateobj *rast;
   struct nv50_zsa_stateobj *zsa;
   struct nv50_vertex_stateobj *vertex;

   struct nv50_program *vertprog;
   struct nv50_program *gmtyprog;
   struct nv50_program *fragprog;

   struct nv50_constbuf constbuf[3][NV50_MAX_PIPE_CONSTBUFS];
   uint16_t constbuf_dirty[3];
   uint16_t constbuf_valid[3];

   struct pipe_vertex_buffer vtxbuf[PIPE_MAX_ATTRIBS];
   unsigned num_vtxbufs;
   struct pipe_index_buffer idxbuf;
   uint32_t vbo_fifo; /* bitmask of vertex elements to be pushed to FIFO */
   uint32_t vbo_user; /* bitmask of vertex buffers pointing to user memory */
   uint32_t vbo_constant; /* bitmask of user buffers with stride 0 */
   uint32_t vb_elt_first; /* from pipe_draw_info, for vertex upload */
   uint32_t vb_elt_limit; /* max - min element (count - 1) */
   uint32_t instance_off; /* base vertex for instanced arrays */
   uint32_t instance_max; /* max instance for current draw call */

   struct pipe_sampler_view *textures[3][PIPE_MAX_SAMPLERS];
   unsigned num_textures[3];
   struct nv50_tsc_entry *samplers[3][PIPE_MAX_SAMPLERS];
   unsigned num_samplers[3];

   uint8_t num_so_targets;
   uint8_t so_targets_dirty;
   struct pipe_stream_output_target *so_target[4];

   struct pipe_framebuffer_state framebuffer;
   struct pipe_blend_color blend_colour;
   struct pipe_stencil_ref stencil_ref;
   struct pipe_poly_stipple stipple;
   struct pipe_scissor_state scissor;
   struct pipe_viewport_state viewport;
   struct pipe_clip_state clip;

   unsigned sample_mask;

   boolean vbo_push_hint;

   struct pipe_query *cond_query;
   boolean cond_cond;
   uint cond_mode;

   struct nv50_blitctx *blit;

#ifdef NV50_WITH_DRAW_MODULE
   struct draw_context *draw;
#endif
d90 2
a91 2
static INLINE struct nv50_context *
nv50_context(struct pipe_context *pipe)
d93 1
a93 1
   return (struct nv50_context *)pipe;
d96 2
a97 2
static INLINE struct nv50_screen *
nv50_context_screen(struct nv50_context *nv50)
d99 1
a99 1
   return nv50_screen(&nv50->base.screen->base);
a101 1
/* return index used in nv50_context arrays for a specific shader type */
d103 1
a103 1
nv50_context_shader_stage(unsigned pipe)
d105 1
a105 9
   switch (pipe) {
   case PIPE_SHADER_VERTEX: return 0;
   case PIPE_SHADER_FRAGMENT: return 1;
   case PIPE_SHADER_GEOMETRY: return 2;
   case PIPE_SHADER_COMPUTE: return 3;
   default:
      assert(!"invalid/unhandled shader type");
      return 0;
   }
a107 2
/* nv50_context.c */
struct pipe_context *nv50_create(struct pipe_screen *, void *);
d109 63
a171 1
void nv50_bufctx_fence(struct nouveau_bufctx *, boolean on_flush);
d173 11
a183 1
void nv50_default_kick_notify(struct nouveau_pushbuf *);
d186 1
a186 1
extern struct draw_stage *nv50_draw_render_stage(struct nv50_context *);
d188 5
a192 20
/* nv50_query.c */
void nv50_init_query_functions(struct nv50_context *);
void nv50_query_pushbuf_submit(struct nouveau_pushbuf *,
                               struct pipe_query *, unsigned result_offset);
void nv84_query_fifo_wait(struct nouveau_pushbuf *, struct pipe_query *);
void nva0_so_target_save_offset(struct pipe_context *,
                                struct pipe_stream_output_target *,
                                unsigned index, boolean seralize);

#define NVA0_QUERY_STREAM_OUTPUT_BUFFER_OFFSET (PIPE_QUERY_TYPES + 0)

/* nv50_shader_state.c */
void nv50_vertprog_validate(struct nv50_context *);
void nv50_gmtyprog_validate(struct nv50_context *);
void nv50_fragprog_validate(struct nv50_context *);
void nv50_fp_linkage_validate(struct nv50_context *);
void nv50_gp_linkage_validate(struct nv50_context *);
void nv50_constbufs_validate(struct nv50_context *);
void nv50_validate_derived_rs(struct nv50_context *);
void nv50_stream_output_validate(struct nv50_context *);
d194 25
a218 2
/* nv50_state.c */
extern void nv50_init_state_functions(struct nv50_context *);
d221 6
a226 9
/* @@words: check for space before emitting relocs */
extern boolean nv50_state_validate(struct nv50_context *, uint32_t state_mask,
                                   unsigned space_words);

/* nv50_surface.c */
extern void nv50_clear(struct pipe_context *, unsigned buffers,
                       const union pipe_color_union *color,
                       double depth, unsigned stencil);
extern void nv50_init_surface_functions(struct nv50_context *);
d229 3
a231 2
void nv50_validate_textures(struct nv50_context *);
void nv50_validate_samplers(struct nv50_context *);
a232 31
struct pipe_sampler_view *
nv50_create_texture_view(struct pipe_context *,
                         struct pipe_resource *,
                         const struct pipe_sampler_view *,
                         uint32_t flags,
                         enum pipe_texture_target);
struct pipe_sampler_view *
nv50_create_sampler_view(struct pipe_context *,
                         struct pipe_resource *,
                         const struct pipe_sampler_view *);

/* nv50_transfer.c */
void
nv50_m2mf_transfer_rect(struct nv50_context *,
                        const struct nv50_m2mf_rect *dst,
                        const struct nv50_m2mf_rect *src,
                        uint32_t nblocksx, uint32_t nblocksy);
void
nv50_sifc_linear_u8(struct nouveau_context *pipe,
                    struct nouveau_bo *dst, unsigned offset, unsigned domain,
                    unsigned size, const void *data);
void
nv50_m2mf_copy_linear(struct nouveau_context *pipe,
                      struct nouveau_bo *dst, unsigned dstoff, unsigned dstdom,
                      struct nouveau_bo *src, unsigned srcoff, unsigned srcdom,
                      unsigned size);
void
nv50_cb_push(struct nouveau_context *nv,
             struct nouveau_bo *bo, unsigned domain,
             unsigned base, unsigned size,
             unsigned offset, unsigned words, const uint32_t *data);
d234 3
a236 2
/* nv50_vbo.c */
void nv50_draw_vbo(struct pipe_context *, const struct pipe_draw_info *);
d238 26
a263 6
void *
nv50_vertex_state_create(struct pipe_context *pipe,
                         unsigned num_elements,
                         const struct pipe_vertex_element *elements);
void
nv50_vertex_state_delete(struct pipe_context *pipe, void *hwcso);
d265 3
a267 28
void nv50_vertex_arrays_validate(struct nv50_context *nv50);

/* nv50_push.c */
void nv50_push_vbo(struct nv50_context *, const struct pipe_draw_info *);

/* nv84_video.c */
struct pipe_video_decoder *
nv84_create_decoder(struct pipe_context *context,
                    enum pipe_video_profile profile,
                    enum pipe_video_entrypoint entrypoint,
                    enum pipe_video_chroma_format chroma_format,
                    unsigned width, unsigned height,
                    unsigned max_references,
                    bool expect_chunked_decode);

struct pipe_video_buffer *
nv84_video_buffer_create(struct pipe_context *pipe,
                         const struct pipe_video_buffer *template);

int
nv84_screen_get_video_param(struct pipe_screen *pscreen,
                            enum pipe_video_profile profile,
                            enum pipe_video_cap param);

boolean
nv84_screen_video_supported(struct pipe_screen *screen,
                            enum pipe_format format,
                            enum pipe_video_profile profile);
@


