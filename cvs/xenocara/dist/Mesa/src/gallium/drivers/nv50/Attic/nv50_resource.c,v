head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.07.09.21.08.54;	author jsg;	state dead;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.00.44;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.40;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@
#include "pipe/p_context.h"
#include "util/u_inlines.h"
#include "util/u_format.h"

#include "nouveau/nouveau_screen.h"

#include "nv50_resource.h"

static struct pipe_resource *
nv50_resource_create(struct pipe_screen *screen,
                     const struct pipe_resource *templ)
{
   switch (templ->target) {
   case PIPE_BUFFER:
      return nouveau_buffer_create(screen, templ);
   default:
      return nv50_miptree_create(screen, templ);
   }
}

static struct pipe_resource *
nv50_resource_from_handle(struct pipe_screen * screen,
                          const struct pipe_resource *templ,
                          struct winsys_handle *whandle)
{
   if (templ->target == PIPE_BUFFER)
      return NULL;
   else
      return nv50_miptree_from_handle(screen, templ, whandle);
}

struct pipe_surface *
nv50_surface_from_buffer(struct pipe_context *pipe,
			 struct pipe_resource *pbuf,
			 const struct pipe_surface *templ)
{
   struct nv50_surface *sf = CALLOC_STRUCT(nv50_surface);
   if (!sf)
      return NULL;

   pipe_reference_init(&sf->base.reference, 1);
   pipe_resource_reference(&sf->base.texture, pbuf);

   sf->base.format = templ->format;
   sf->base.writable = templ->writable;
   sf->base.u.buf.first_element = templ->u.buf.first_element;
   sf->base.u.buf.last_element = templ->u.buf.last_element;

   sf->offset =
      templ->u.buf.first_element * util_format_get_blocksize(sf->base.format);

   sf->offset &= ~0x7f; /* FIXME: RT_ADDRESS requires 128 byte alignment */

   sf->width = templ->u.buf.last_element - templ->u.buf.first_element + 1;
   sf->height = 1;
   sf->depth = 1;

   sf->base.width = sf->width;
   sf->base.height = sf->height;

   sf->base.context = pipe;
   return &sf->base;
}

static struct pipe_surface *
nv50_surface_create(struct pipe_context *pipe,
		    struct pipe_resource *pres,
		    const struct pipe_surface *templ)
{
   if (unlikely(pres->target == PIPE_BUFFER))
      return nv50_surface_from_buffer(pipe, pres, templ);
   return nv50_miptree_surface_new(pipe, pres, templ);
}

void
nv50_surface_destroy(struct pipe_context *pipe, struct pipe_surface *ps)
{
   struct nv50_surface *s = nv50_surface(ps);

   pipe_resource_reference(&ps->texture, NULL);

   FREE(s);
}

void
nv50_init_resource_functions(struct pipe_context *pcontext)
{
   pcontext->transfer_map = u_transfer_map_vtbl;
   pcontext->transfer_flush_region = u_transfer_flush_region_vtbl;
   pcontext->transfer_unmap = u_transfer_unmap_vtbl;
   pcontext->transfer_inline_write = u_transfer_inline_write_vtbl;
   pcontext->create_surface = nv50_surface_create;
   pcontext->surface_destroy = nv50_surface_destroy;
}

void
nv50_screen_init_resource_functions(struct pipe_screen *pscreen)
{
   pscreen->resource_create = nv50_resource_create;
   pscreen->resource_from_handle = nv50_resource_from_handle;
   pscreen->resource_get_handle = u_resource_get_handle_vtbl;
   pscreen->resource_destroy = u_resource_destroy_vtbl;
}
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d3 3
a5 1
#include "nv50_resource.h"
d8 1
d33 53
a88 1
   pcontext->get_transfer = u_get_transfer_vtbl;
a91 1
   pcontext->transfer_destroy = u_transfer_destroy_vtbl;
d93 2
a94 2
   pcontext->create_surface = nv50_miptree_surface_new;
   pcontext->surface_destroy = nv50_miptree_surface_del;
a103 1
   pscreen->user_buffer_create = nouveau_user_buffer_create;
@


1.1
log
@Initial revision
@
text
@a6 16
/* This doesn't look quite right - this query is supposed to ask
 * whether the particular context has references to the resource in
 * any unflushed rendering command buffer, and hence requires a
 * pipe->flush() for serializing some modification to that resource.
 *
 * This seems to be answering the question of whether the resource is
 * currently on hardware.
 */
static unsigned int
nv50_resource_is_referenced(struct pipe_context *pipe,
			    struct pipe_resource *resource,
			    unsigned level, int layer)
{
	return nouveau_reference_flags(nv50_resource(resource)->bo);
}

d9 1
a9 1
		     const struct pipe_resource *template)
d11 6
a16 4
	if (template->target == PIPE_BUFFER)
		return nv50_buffer_create(screen, template);
	else
		return nv50_miptree_create(screen, template);
d21 2
a22 2
			  const struct pipe_resource *template,
			  struct winsys_handle *whandle)
d24 4
a27 4
	if (template->target == PIPE_BUFFER)
		return NULL;
	else
		return nv50_miptree_from_handle(screen, template, whandle);
d33 8
a40 10
	pcontext->get_transfer = u_get_transfer_vtbl;
	pcontext->transfer_map = u_transfer_map_vtbl;
	pcontext->transfer_flush_region = u_transfer_flush_region_vtbl;
	pcontext->transfer_unmap = u_transfer_unmap_vtbl;
	pcontext->transfer_destroy = u_transfer_destroy_vtbl;
	pcontext->transfer_inline_write = u_transfer_inline_write_vtbl;
	pcontext->is_resource_referenced = nv50_resource_is_referenced;

	pcontext->create_surface = nv50_miptree_surface_new;
	pcontext->surface_destroy = nv50_miptree_surface_del;
d46 5
a50 5
	pscreen->resource_create = nv50_resource_create;
	pscreen->resource_from_handle = nv50_resource_from_handle;
	pscreen->resource_get_handle = u_resource_get_handle_vtbl;
	pscreen->resource_destroy = u_resource_destroy_vtbl;
	pscreen->user_buffer_create = nv50_user_buffer_create;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d3 2
a4 2
#include "util/u_inlines.h"
#include "util/u_format.h"
a5 1
#include "nouveau/nouveau_screen.h"
d7 15
a21 1
#include "nv50_resource.h"
d25 1
a25 1
                     const struct pipe_resource *templ)
d27 4
a30 6
   switch (templ->target) {
   case PIPE_BUFFER:
      return nouveau_buffer_create(screen, templ);
   default:
      return nv50_miptree_create(screen, templ);
   }
d35 2
a36 46
                          const struct pipe_resource *templ,
                          struct winsys_handle *whandle)
{
   if (templ->target == PIPE_BUFFER)
      return NULL;
   else
      return nv50_miptree_from_handle(screen, templ, whandle);
}

struct pipe_surface *
nv50_surface_from_buffer(struct pipe_context *pipe,
			 struct pipe_resource *pbuf,
			 const struct pipe_surface *templ)
{
   struct nv50_surface *sf = CALLOC_STRUCT(nv50_surface);
   if (!sf)
      return NULL;

   pipe_reference_init(&sf->base.reference, 1);
   pipe_resource_reference(&sf->base.texture, pbuf);

   sf->base.format = templ->format;
   sf->base.writable = templ->writable;
   sf->base.u.buf.first_element = templ->u.buf.first_element;
   sf->base.u.buf.last_element = templ->u.buf.last_element;

   sf->offset =
      templ->u.buf.first_element * util_format_get_blocksize(sf->base.format);

   sf->offset &= ~0x7f; /* FIXME: RT_ADDRESS requires 128 byte alignment */

   sf->width = templ->u.buf.last_element - templ->u.buf.first_element + 1;
   sf->height = 1;
   sf->depth = 1;

   sf->base.width = sf->width;
   sf->base.height = sf->height;

   sf->base.context = pipe;
   return &sf->base;
}

static struct pipe_surface *
nv50_surface_create(struct pipe_context *pipe,
		    struct pipe_resource *pres,
		    const struct pipe_surface *templ)
d38 4
a41 3
   if (unlikely(pres->target == PIPE_BUFFER))
      return nv50_surface_from_buffer(pipe, pres, templ);
   return nv50_miptree_surface_new(pipe, pres, templ);
d45 1
a45 1
nv50_surface_destroy(struct pipe_context *pipe, struct pipe_surface *ps)
d47 7
a53 1
   struct nv50_surface *s = nv50_surface(ps);
d55 2
a56 14
   pipe_resource_reference(&ps->texture, NULL);

   FREE(s);
}

void
nv50_init_resource_functions(struct pipe_context *pcontext)
{
   pcontext->transfer_map = u_transfer_map_vtbl;
   pcontext->transfer_flush_region = u_transfer_flush_region_vtbl;
   pcontext->transfer_unmap = u_transfer_unmap_vtbl;
   pcontext->transfer_inline_write = u_transfer_inline_write_vtbl;
   pcontext->create_surface = nv50_surface_create;
   pcontext->surface_destroy = nv50_surface_destroy;
d62 5
a66 4
   pscreen->resource_create = nv50_resource_create;
   pscreen->resource_from_handle = nv50_resource_from_handle;
   pscreen->resource_get_handle = u_resource_get_handle_vtbl;
   pscreen->resource_destroy = u_resource_destroy_vtbl;
@

