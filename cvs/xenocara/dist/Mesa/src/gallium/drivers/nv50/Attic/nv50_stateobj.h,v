head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.07.09.21.08.54;	author jsg;	state dead;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.14.00.44;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.11.42;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@
#ifndef __NV50_STATEOBJ_H__
#define __NV50_STATEOBJ_H__

#include "pipe/p_state.h"

#define NV50_SCISSORS_CLIPPING

#define SB_BEGIN_3D(so, m, s) \
   (so)->state[(so)->size++] = NV50_FIFO_PKHDR(NV50_3D(m), s)

#define SB_BEGIN_3D_(so, m, s) \
   (so)->state[(so)->size++] = NV50_FIFO_PKHDR(SUBC_3D(m), s)

#define SB_DATA(so, u) (so)->state[(so)->size++] = (u)

#include "nv50_stateobj_tex.h"

struct nv50_blend_stateobj {
   struct pipe_blend_state pipe;
   int size;
   uint32_t state[84]; // TODO: allocate less if !independent_blend_enable
};

struct nv50_rasterizer_stateobj {
   struct pipe_rasterizer_state pipe;
   int size;
   uint32_t state[48];
};

struct nv50_zsa_stateobj {
   struct pipe_depth_stencil_alpha_state pipe;
   int size;
   uint32_t state[29];
};

struct nv50_constbuf {
   union {
      struct pipe_resource *buf;
      const uint8_t *data;
   } u;
   uint32_t size; /* max 65536 */
   uint32_t offset;
   boolean user; /* should only be TRUE if u.data is valid and non-NULL */
};

struct nv50_vertex_element {
   struct pipe_vertex_element pipe;
   uint32_t state;
};

struct nv50_vertex_stateobj {
   uint32_t min_instance_div[PIPE_MAX_ATTRIBS];
   uint16_t vb_access_size[PIPE_MAX_ATTRIBS];
   struct translate *translate;
   unsigned num_elements;
   uint32_t instance_elts;
   uint32_t instance_bufs;
   boolean need_conversion;
   unsigned vertex_size;
   unsigned packet_vertex_limit;
   struct nv50_vertex_element element[0];
};

struct nv50_so_target {
   struct pipe_stream_output_target pipe;
   struct pipe_query *pq;
   unsigned stride;
   boolean clean;
};

static INLINE struct nv50_so_target *
nv50_so_target(struct pipe_stream_output_target *ptarg)
{
   return (struct nv50_so_target *)ptarg;
}

#endif
@


1.2
log
@Merge Mesa 9.2.0
@
text
@@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d9 5
a13 7
#define SB_BEGIN_3D(so, m, s)                                                  \
   (so)->state[(so)->size++] =                                                 \
      ((s) << 18) | (NV50_SUBCH_3D << 13) | NV50_3D_##m

#define SB_BEGIN_3D_(so, m, s)                                                 \
   (so)->state[(so)->size++] =                                                 \
      ((s) << 18) | (NV50_SUBCH_3D << 13) | m
d22 1
a22 1
   uint32_t state[82]; // TODO: allocate less if !independent_blend_enable
d28 1
a28 1
   uint32_t state[42];
d37 10
d53 2
d64 13
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@d9 7
a15 5
#define SB_BEGIN_3D(so, m, s) \
   (so)->state[(so)->size++] = NV50_FIFO_PKHDR(NV50_3D(m), s)

#define SB_BEGIN_3D_(so, m, s) \
   (so)->state[(so)->size++] = NV50_FIFO_PKHDR(SUBC_3D(m), s)
d24 1
a24 1
   uint32_t state[84]; // TODO: allocate less if !independent_blend_enable
d30 1
a30 1
   uint32_t state[48];
a38 10
struct nv50_constbuf {
   union {
      struct pipe_resource *buf;
      const uint8_t *data;
   } u;
   uint32_t size; /* max 65536 */
   uint32_t offset;
   boolean user; /* should only be TRUE if u.data is valid and non-NULL */
};

a44 2
   uint32_t min_instance_div[PIPE_MAX_ATTRIBS];
   uint16_t vb_access_size[PIPE_MAX_ATTRIBS];
a53 13

struct nv50_so_target {
   struct pipe_stream_output_target pipe;
   struct pipe_query *pq;
   unsigned stride;
   boolean clean;
};

static INLINE struct nv50_so_target *
nv50_so_target(struct pipe_stream_output_target *ptarg)
{
   return (struct nv50_so_target *)ptarg;
}
@

