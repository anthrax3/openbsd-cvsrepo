head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.07.09.21.08.54;	author jsg;	state dead;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.43;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.40;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@/*
 * Copyright 2010 Ben Skeggs
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef __NV50_PROG_H__
#define __NV50_PROG_H__

struct nv50_context;

#include "pipe/p_state.h"
#include "pipe/p_shader_tokens.h"

struct nv50_varying {
   uint8_t id; /* tgsi index */
   uint8_t hw; /* hw index, nv50 wants flat FP inputs last */

   unsigned mask   : 4;
   unsigned linear : 1;
   unsigned pad    : 3;

   ubyte sn; /* semantic name */
   ubyte si; /* semantic index */
};

struct nv50_stream_output_state
{
   uint32_t ctrl;
   uint16_t stride[4];
   uint8_t num_attribs[4];
   uint8_t map_size;
   uint8_t map[128];
};

struct nv50_program {
   struct pipe_shader_state pipe;

   ubyte type;
   boolean translated;

   uint32_t *code;
   unsigned code_size;
   unsigned code_base;
   uint32_t *immd;
   unsigned immd_size;
   unsigned parm_size; /* size limit of uniform buffer */
   uint32_t tls_space; /* required local memory per thread */

   ubyte max_gpr; /* REG_ALLOC_TEMP */
   ubyte max_out; /* REG_ALLOC_RESULT or FP_RESULT_COUNT */

   ubyte in_nr;
   ubyte out_nr;
   struct nv50_varying in[16];
   struct nv50_varying out[16];

   struct {
      uint32_t attrs[3]; /* VP_ATTR_EN_0,1 and VP_GP_BUILTIN_ATTR_EN */
      ubyte psiz;        /* output slot of point size */
      ubyte bfc[2];      /* indices into varying for FFC (FP) or BFC (VP) */
      ubyte edgeflag;
      ubyte clpd[2];     /* output slot of clip distance[i]'s 1st component */
      ubyte clpd_nr;
   } vp;

   struct {
      uint32_t flags[2]; /* 0x19a8, 196c */
      uint32_t interp; /* 0x1988 */
      uint32_t colors; /* 0x1904 */
   } fp;

   struct {
      ubyte primid; /* primitive id output register */
      uint8_t vert_count;
      uint8_t prim_type; /* point, line strip or tri strip */
   } gp;

   void *fixups; /* relocation records */

   struct nouveau_heap *mem;

   struct nv50_stream_output_state *so;
};

boolean nv50_program_translate(struct nv50_program *, uint16_t chipset);
boolean nv50_program_upload_code(struct nv50_context *, struct nv50_program *);
void nv50_program_destroy(struct nv50_context *, struct nv50_program *);

#endif /* __NV50_PROG_H__ */
@


1.4
log
@Merge Mesa 9.2.0
@
text
@@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d17 4
a20 4
 * THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
d26 2
d29 1
a29 3
#include "tgsi/tgsi_scan.h"

#define NV50_CAP_MAX_PROGRAM_TEMPS 64
d43 9
a56 1
   boolean uses_lmem;
d64 1
d76 2
a77 2
      ubyte psiz;
      ubyte bfc[2];
d79 1
a79 1
      ubyte clpd;
d95 1
a95 3
   /* relocation records */
   void *fixups;
   unsigned num_fixups;
d97 1
a97 2
   struct nouveau_resource *res;
};
d99 1
a99 11
#define NV50_INTERP_LINEAR   (1 << 0)
#define NV50_INTERP_FLAT     (1 << 1)
#define NV50_INTERP_CENTROID (1 << 2)

/* analyze TGSI and see which TEMP[] are used as subroutine inputs/outputs */
struct nv50_subroutine {
   unsigned id;
   unsigned pos;
   /* function inputs and outputs */
   uint32_t argv[NV50_CAP_MAX_PROGRAM_TEMPS][4];
   uint32_t retv[NV50_CAP_MAX_PROGRAM_TEMPS][4];
d102 3
a104 30
struct nv50_translation_info {
   struct nv50_program *p;
   unsigned inst_nr;
   struct tgsi_full_instruction *insns;
   ubyte input_file;
   ubyte output_file;
   ubyte input_map[PIPE_MAX_SHADER_INPUTS][4];
   ubyte output_map[PIPE_MAX_SHADER_OUTPUTS][4];
   ubyte sysval_map[TGSI_SEMANTIC_COUNT];
   ubyte interp_mode[PIPE_MAX_SHADER_INPUTS];
   int input_access[PIPE_MAX_SHADER_INPUTS][4];
   int output_access[PIPE_MAX_SHADER_OUTPUTS][4];
   boolean indirect_inputs;
   boolean indirect_outputs;
   boolean store_to_memory;
   struct tgsi_shader_info scan;
   uint32_t *immd32;
   unsigned immd32_nr;
   ubyte *immd32_ty;
   ubyte edgeflag_out;
   struct nv50_subroutine *subr;
   unsigned subr_nr;
};

int nv50_generate_code(struct nv50_translation_info *ti);

void nv50_relocate_program(struct nv50_program *p,
                           uint32_t code_base, uint32_t data_base);

boolean nv50_program_tx(struct nv50_program *p);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a49 3
   struct nouveau_bo *bo;
   struct nouveau_stateobj *so;

d52 1
a52 1
   unsigned code_start; /* offset inside bo */
d89 2
d114 1
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d1 24
a24 2
#ifndef __NV50_PROGRAM_H__
#define __NV50_PROGRAM_H__
d29 9
a37 2
struct nv50_program_exec {
	struct nv50_program_exec *next;
d39 2
a40 6
	unsigned inst[2];
	struct {
		int index;
		unsigned mask;
		unsigned shift;
	} param;
d43 2
a44 3
struct nv50_sreg4 {
	uint8_t hw; /* hw index, nv50 wants flat FP inputs last */
	uint8_t id; /* tgsi index */
d46 47
a92 2
	uint8_t mask;
	boolean linear;
d94 11
a104 1
	ubyte sn, si; /* semantic name & index */
d107 21
a127 45
struct nv50_program {
	struct pipe_shader_state pipe;
	struct tgsi_shader_info info;
	boolean translated;

	unsigned type;
	struct nv50_program_exec *exec_head;
	struct nv50_program_exec *exec_tail;
	unsigned exec_size;
	struct nouveau_resource *data[1];
	unsigned data_start[1];

	struct nouveau_bo *bo;

	uint32_t *immd;
	unsigned immd_nr;
	unsigned param_nr;

	struct {
		unsigned high_temp;
		unsigned high_result;

		uint32_t attr[2];
		uint32_t regs[4];

		/* for VPs, io_nr doesn't count 'private' results (PSIZ etc.) */
		unsigned in_nr, out_nr;
		struct nv50_sreg4 in[PIPE_MAX_SHADER_INPUTS];
		struct nv50_sreg4 out[PIPE_MAX_SHADER_OUTPUTS];

		/* FP colour inputs, VP/GP back colour outputs */
		struct nv50_sreg4 two_side[2];

		/* GP only */
		unsigned vert_count;
		uint8_t prim_type;

		/* VP & GP only */
		uint8_t clpd, clpd_nr;
		uint8_t psiz;
		uint8_t edgeflag_in;

		/* FP & GP only */
		uint8_t prim_id;
	} cfg;
d130 8
a137 1
#endif
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d1 2
a2 24
/*
 * Copyright 2010 Ben Skeggs
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef __NV50_PROG_H__
#define __NV50_PROG_H__
d7 2
a8 9
#define NV50_CAP_MAX_PROGRAM_TEMPS 64

struct nv50_varying {
   uint8_t id; /* tgsi index */
   uint8_t hw; /* hw index, nv50 wants flat FP inputs last */

   unsigned mask   : 4;
   unsigned linear : 1;
   unsigned pad    : 3;
d10 6
a15 2
   ubyte sn; /* semantic name */
   ubyte si; /* semantic index */
d18 3
a20 2
struct nv50_program {
   struct pipe_shader_state pipe;
d22 2
a23 47
   ubyte type;
   boolean translated;
   boolean uses_lmem;

   struct nouveau_bo *bo;
   struct nouveau_stateobj *so;

   uint32_t *code;
   unsigned code_size;
   unsigned code_start; /* offset inside bo */
   uint32_t *immd;
   unsigned immd_size;
   unsigned parm_size; /* size limit of uniform buffer */

   ubyte max_gpr; /* REG_ALLOC_TEMP */
   ubyte max_out; /* REG_ALLOC_RESULT or FP_RESULT_COUNT */

   ubyte in_nr;
   ubyte out_nr;
   struct nv50_varying in[16];
   struct nv50_varying out[16];

   struct {
      uint32_t attrs[3]; /* VP_ATTR_EN_0,1 and VP_GP_BUILTIN_ATTR_EN */
      ubyte psiz;
      ubyte bfc[2];
      ubyte edgeflag;
      ubyte clpd;
      ubyte clpd_nr;
   } vp;

   struct {
      uint32_t flags[2]; /* 0x19a8, 196c */
      uint32_t interp; /* 0x1988 */
      uint32_t colors; /* 0x1904 */
   } fp;

   struct {
      ubyte primid; /* primitive id output register */
      uint8_t vert_count;
      uint8_t prim_type; /* point, line strip or tri strip */
   } gp;

   /* relocation records */
   void *fixups;
   unsigned num_fixups;
};
d25 1
a25 11
#define NV50_INTERP_LINEAR   (1 << 0)
#define NV50_INTERP_FLAT     (1 << 1)
#define NV50_INTERP_CENTROID (1 << 2)

/* analyze TGSI and see which TEMP[] are used as subroutine inputs/outputs */
struct nv50_subroutine {
   unsigned id;
   unsigned pos;
   /* function inputs and outputs */
   uint32_t argv[NV50_CAP_MAX_PROGRAM_TEMPS][4];
   uint32_t retv[NV50_CAP_MAX_PROGRAM_TEMPS][4];
d28 45
a72 21
struct nv50_translation_info {
   struct nv50_program *p;
   unsigned inst_nr;
   struct tgsi_full_instruction *insns;
   ubyte input_file;
   ubyte output_file;
   ubyte input_map[PIPE_MAX_SHADER_INPUTS][4];
   ubyte output_map[PIPE_MAX_SHADER_OUTPUTS][4];
   ubyte interp_mode[PIPE_MAX_SHADER_INPUTS];
   int input_access[PIPE_MAX_SHADER_INPUTS][4];
   int output_access[PIPE_MAX_SHADER_OUTPUTS][4];
   boolean indirect_inputs;
   boolean indirect_outputs;
   boolean store_to_memory;
   struct tgsi_shader_info scan;
   uint32_t *immd32;
   unsigned immd32_nr;
   ubyte *immd32_ty;
   ubyte edgeflag_out;
   struct nv50_subroutine *subr;
   unsigned subr_nr;
d75 1
a75 8
int nv50_generate_code(struct nv50_translation_info *ti);

void nv50_relocate_program(struct nv50_program *p,
                           uint32_t code_base, uint32_t data_base);

boolean nv50_program_tx(struct nv50_program *p);

#endif /* __NV50_PROG_H__ */
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d17 4
a20 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d26 2
a27 1
struct nv50_context;
d29 1
a29 2
#include "pipe/p_state.h"
#include "pipe/p_shader_tokens.h"
a42 9
struct nv50_stream_output_state
{
   uint32_t ctrl;
   uint16_t stride[4];
   uint8_t num_attribs[4];
   uint8_t map_size;
   uint8_t map[128];
};

d48 4
d55 1
a55 1
   unsigned code_base;
a58 1
   uint32_t tls_space; /* required local memory per thread */
d70 2
a71 2
      ubyte psiz;        /* output slot of point size */
      ubyte bfc[2];      /* indices into varying for FFC (FP) or BFC (VP) */
d73 1
a73 1
      ubyte clpd[2];     /* output slot of clip distance[i]'s 1st component */
d89 4
a92 1
   void *fixups; /* relocation records */
d94 12
a105 1
   struct nouveau_heap *mem;
d107 21
a127 1
   struct nv50_stream_output_state *so;
d130 6
a135 3
boolean nv50_program_translate(struct nv50_program *, uint16_t chipset);
boolean nv50_program_upload_code(struct nv50_context *, struct nv50_program *);
void nv50_program_destroy(struct nv50_context *, struct nv50_program *);
@


