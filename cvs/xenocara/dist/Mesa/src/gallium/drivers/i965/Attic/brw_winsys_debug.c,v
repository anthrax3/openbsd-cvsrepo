head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.09.05.14.00.27;	author jsg;	state dead;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@#include "brw_winsys.h"
#include "brw_disasm.h"
#include "brw_structs_dump.h"
#include "brw_structs.h"
#include "intel_decode.h"


void brw_dump_data( unsigned pci_id,
		    enum brw_buffer_data_type data_type,
		    unsigned offset,
		    const void *data,
		    size_t size, int gen )
{
   if (BRW_DUMP & DUMP_ASM) {
      switch (data_type) {
      case BRW_DATA_GS_WM_PROG:
      case BRW_DATA_GS_SF_PROG:
      case BRW_DATA_GS_VS_PROG:
      case BRW_DATA_GS_GS_PROG:
      case BRW_DATA_GS_CLIP_PROG:
         brw_disasm( stderr, (struct brw_instruction *)data, size / sizeof(struct brw_instruction), gen );
         break;
      default:
         break;
      }
   }

   if (BRW_DUMP & DUMP_STATE) {
      switch (data_type) {
      case BRW_DATA_GS_CC_VP:
         brw_dump_cc_viewport( data );
         break;
      case BRW_DATA_GS_CC_UNIT:
         brw_dump_cc_unit_state( data );
         break;
      case BRW_DATA_GS_SAMPLER_DEFAULT_COLOR:
         brw_dump_sampler_default_color( data );
         break;
      case BRW_DATA_GS_SAMPLER:
         brw_dump_sampler_state( data );
         break;
      case BRW_DATA_GS_WM_UNIT:
         brw_dump_wm_unit_state( data );
         break;
      case BRW_DATA_GS_SF_VP:
         brw_dump_sf_viewport( data );
         break;
      case BRW_DATA_GS_SF_UNIT:
         brw_dump_sf_unit_state( data );
         break;
      case BRW_DATA_GS_VS_UNIT:
         brw_dump_vs_unit_state( data );
         break;
      case BRW_DATA_GS_GS_UNIT:
         brw_dump_gs_unit_state( data );
         break;
      case BRW_DATA_GS_CLIP_VP:
         brw_dump_clipper_viewport( data );
         break;
      case BRW_DATA_GS_CLIP_UNIT:
         brw_dump_clip_unit_state( data );
         break;
      case BRW_DATA_SS_SURFACE:
         brw_dump_surface_state( data );
         break;
      case BRW_DATA_SS_SURF_BIND:
         break;
      case BRW_DATA_OTHER:
         break;
      case BRW_DATA_CONSTANT_BUFFER:
         break;
      default:
         break;
      }
   }

   if (BRW_DUMP & DUMP_BATCH) {
      switch (data_type) {
      case BRW_DATA_BATCH_BUFFER:
         intel_decode(data, size / 4, offset, pci_id, 0);
         break;
      default:
         break;
      }
   }
}

@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d12 1
a12 1
		    size_t size )
d21 1
a21 1
         brw_disasm( stderr, data, size / sizeof(struct brw_instruction) );
d80 1
a80 1
         intel_decode(data, size / 4, offset, pci_id);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@

