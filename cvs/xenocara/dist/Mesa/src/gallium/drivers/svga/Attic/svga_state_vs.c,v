head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.11;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.01;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.16;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.08.55;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.46.10;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**********************************************************
 * Copyright 2008-2009 VMware, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 **********************************************************/

#include "util/u_inlines.h"
#include "pipe/p_defines.h"
#include "util/u_format.h"
#include "util/u_math.h"
#include "util/u_memory.h"
#include "util/u_bitmask.h"
#include "translate/translate.h"
#include "tgsi/tgsi_ureg.h"

#include "svga_context.h"
#include "svga_state.h"
#include "svga_cmd.h"
#include "svga_shader.h"
#include "svga_tgsi.h"

#include "svga_hw_reg.h"


static INLINE int
compare_vs_keys(const struct svga_vs_compile_key *a,
                const struct svga_vs_compile_key *b)
{
   unsigned keysize = svga_vs_key_size( a );
   return memcmp( a, b, keysize );
}


/** Search for a vertex shader variant */
static struct svga_shader_variant *
search_vs_key(const struct svga_vertex_shader *vs,
              const struct svga_vs_compile_key *key)
{
   struct svga_shader_variant *variant = vs->base.variants;

   assert(key);

   for ( ; variant; variant = variant->next) {
      if (compare_vs_keys( key, &variant->key.vkey ) == 0)
         return variant;
   }
   
   return NULL;
}


/**
 * If we fail to compile a vertex shader we'll use a dummy/fallback shader
 * that simply emits a (0,0,0,1) vertex position.
 */
static const struct tgsi_token *
get_dummy_vertex_shader(void)
{
   static const float zero[4] = { 0.0, 0.0, 0.0, 1.0 };
   struct ureg_program *ureg;
   const struct tgsi_token *tokens;
   struct ureg_src src;
   struct ureg_dst dst;
   unsigned num_tokens;

   ureg = ureg_create(TGSI_PROCESSOR_VERTEX);
   if (!ureg)
      return NULL;

   dst = ureg_DECL_output(ureg, TGSI_SEMANTIC_POSITION, 0);
   src = ureg_DECL_immediate(ureg, zero, 4);
   ureg_MOV(ureg, dst, src);
   ureg_END(ureg);

   tokens = ureg_get_tokens(ureg, &num_tokens);

   ureg_destroy(ureg);

   return tokens;
}


/**
 * Translate TGSI shader into an svga shader variant.
 */
static enum pipe_error
compile_vs(struct svga_context *svga,
           struct svga_vertex_shader *vs,
           const struct svga_vs_compile_key *key,
           struct svga_shader_variant **out_variant)
{
   struct svga_shader_variant *variant;
   enum pipe_error ret = PIPE_ERROR;

   variant = svga_translate_vertex_program( vs, key );
   if (variant == NULL) {
      /* some problem during translation, try the dummy shader */
      const struct tgsi_token *dummy = get_dummy_vertex_shader();
      if (!dummy) {
         ret = PIPE_ERROR_OUT_OF_MEMORY;
         goto fail;
      }
      debug_printf("Failed to compile vertex shader, using dummy shader instead.\n");
      FREE((void *) vs->base.tokens);
      vs->base.tokens = dummy;
      variant = svga_translate_vertex_program(vs, key);
      if (variant == NULL) {
         ret = PIPE_ERROR;
         goto fail;
      }
   }

   ret = svga_define_shader(svga, SVGA3D_SHADERTYPE_VS, variant);
   if (ret != PIPE_OK)
      goto fail;

   *out_variant = variant;

   /* insert variants at head of linked list */
   variant->next = vs->base.variants;
   vs->base.variants = variant;

   return PIPE_OK;

fail:
   if (variant) {
      svga_destroy_shader_variant(svga, SVGA3D_SHADERTYPE_VS, variant);
   }
   return ret;
}

/* SVGA_NEW_PRESCALE, SVGA_NEW_RAST, SVGA_NEW_FS
 */
static void
make_vs_key(struct svga_context *svga, struct svga_vs_compile_key *key)
{
   memset(key, 0, sizeof *key);
   key->need_prescale = svga->state.hw_clear.prescale.enabled;
   key->allow_psiz = svga->curr.rast->templ.point_size_per_vertex;

   /* SVGA_NEW_FS */
   key->fs_generic_inputs = svga->curr.fs->generic_inputs;

   /* SVGA_NEW_VELEMENT */
   key->adjust_attrib_range = svga->curr.velems->adjust_attrib_range;
   key->adjust_attrib_w_1 = svga->curr.velems->adjust_attrib_w_1;
}


/**
 * svga_reemit_vs_bindings - Reemit the vertex shader bindings
 */
enum pipe_error
svga_reemit_vs_bindings(struct svga_context *svga)
{
   enum pipe_error ret;
   struct svga_winsys_gb_shader *gbshader =
      svga->state.hw_draw.vs ? svga->state.hw_draw.vs->gb_shader : NULL;

   assert(svga->rebind.vs);
   assert(svga_have_gb_objects(svga));

   ret = SVGA3D_SetGBShader(svga->swc, SVGA3D_SHADERTYPE_VS, gbshader);
   if (ret != PIPE_OK)
      return ret;

   svga->rebind.vs = FALSE;
   return PIPE_OK;
}


static enum pipe_error
emit_hw_vs(struct svga_context *svga, unsigned dirty)
{
   struct svga_shader_variant *variant = NULL;
   enum pipe_error ret = PIPE_OK;

   /* SVGA_NEW_NEED_SWTNL */
   if (!svga->state.sw.need_swtnl) {
      struct svga_vertex_shader *vs = svga->curr.vs;
      struct svga_vs_compile_key key;

      make_vs_key( svga, &key );

      variant = search_vs_key( vs, &key );
      if (!variant) {
         ret = compile_vs( svga, vs, &key, &variant );
         if (ret != PIPE_OK)
            return ret;
      }

      assert(variant);
   }

   if (variant != svga->state.hw_draw.vs) {
      if (svga_have_gb_objects(svga)) {
         struct svga_winsys_gb_shader *gbshader =
            variant ? variant->gb_shader : NULL;

         /*
          * Bind is necessary here only because pipebuffer_fenced may move
          * the shader contents around....
          */
         if (gbshader) {
            ret = SVGA3D_BindGBShader(svga->swc, gbshader);
            if (ret != PIPE_OK)
               return ret;
         }

         ret = SVGA3D_SetGBShader(svga->swc, SVGA3D_SHADERTYPE_VS, gbshader);
         if (ret != PIPE_OK)
            return ret;

         svga->rebind.vs = FALSE;
      }
      else {
         unsigned id = variant ? variant->id : SVGA_ID_INVALID;
         ret = SVGA3D_SetShader(svga->swc, SVGA3D_SHADERTYPE_VS, id);
         if (ret != PIPE_OK)
            return ret;
      }

      svga->dirty |= SVGA_NEW_VS_VARIANT;
      svga->state.hw_draw.vs = variant;      
   }

   return PIPE_OK;
}

struct svga_tracked_state svga_hw_vs = 
{
   "vertex shader (hwtnl)",
   (SVGA_NEW_VS |
    SVGA_NEW_FS |
    SVGA_NEW_PRESCALE |
    SVGA_NEW_VELEMENT |
    SVGA_NEW_NEED_SWTNL),
   emit_hw_vs
};
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a102 23
 * Replace the given shader's instruction with a simple / dummy shader.
 * We use this when normal shader translation fails.
 */
static struct svga_shader_variant *
get_compiled_dummy_vertex_shader(struct svga_vertex_shader *vs,
                                 const struct svga_vs_compile_key *key)
{
   const struct tgsi_token *dummy = get_dummy_vertex_shader();
   struct svga_shader_variant *variant;

   if (!dummy) {
      return NULL;
   }

   FREE((void *) vs->base.tokens);
   vs->base.tokens = dummy;

   variant = svga_translate_vertex_program(vs, key);
   return variant;
}


/**
d117 3
a119 3
      variant = get_compiled_dummy_vertex_shader(vs, key);
      if (!variant) {
         ret = PIPE_ERROR;
d122 5
a126 10
   }

   if (svga_shader_too_large(svga, variant)) {
      /* too big, use dummy shader */
      debug_printf("Shader too large (%lu bytes),"
                   " using dummy shader instead.\n",
                   (unsigned long ) variant->nr_tokens
                   * sizeof(variant->tokens[0]));
      variant = get_compiled_dummy_vertex_shader(vs, key);
      if (!variant) {
d218 11
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d103 23
d140 3
a142 3
      const struct tgsi_token *dummy = get_dummy_vertex_shader();
      if (!dummy) {
         ret = PIPE_ERROR_OUT_OF_MEMORY;
d145 10
a154 5
      debug_printf("Failed to compile vertex shader, using dummy shader instead.\n");
      FREE((void *) vs->base.tokens);
      vs->base.tokens = dummy;
      variant = svga_translate_vertex_program(vs, key);
      if (variant == NULL) {
a245 11

         /*
          * Bind is necessary here only because pipebuffer_fenced may move
          * the shader contents around....
          */
         if (gbshader) {
            ret = SVGA3D_BindGBShader(svga->swc, gbshader);
            if (ret != PIPE_OK)
               return ret;
         }

@


1.4
log
@Merge Mesa 9.2.0
@
text
@d38 1
a42 3
/***********************************************************************
 */

d44 3
a46 2
static INLINE int compare_vs_keys( const struct svga_vs_compile_key *a,
                                   const struct svga_vs_compile_key *b )
d53 4
a56 2
static struct svga_shader_result *search_vs_key( struct svga_vertex_shader *vs,
                                                 const struct svga_vs_compile_key *key )
d58 1
a58 1
   struct svga_shader_result *result = vs->base.results;
d62 3
a64 3
   for ( ; result; result = result->next) {
      if (compare_vs_keys( key, &result->key.vkey ) == 0)
         return result;
d102 8
a109 4
static enum pipe_error compile_vs( struct svga_context *svga,
                                   struct svga_vertex_shader *vs,
                                   const struct svga_vs_compile_key *key,
                                   struct svga_shader_result **out_result )
d111 1
a111 1
   struct svga_shader_result *result;
d114 2
a115 2
   result = svga_translate_vertex_program( vs, key );
   if (result == NULL) {
d125 2
a126 2
      result = svga_translate_vertex_program(vs, key);
      if (result == NULL) {
d132 2
a133 3
   result->id = util_bitmask_add(svga->vs_bm);
   if(result->id == UTIL_BITMASK_INVALID_INDEX) {
      ret = PIPE_ERROR_OUT_OF_MEMORY;
a134 1
   }
d136 5
a140 7
   ret = SVGA3D_DefineShader(svga->swc, 
                             result->id,
                             SVGA3D_SHADERTYPE_VS,
                             result->tokens, 
                             result->nr_tokens * sizeof result->tokens[0]);
   if (ret != PIPE_OK)
      goto fail;
a141 3
   *out_result = result;
   result->next = vs->base.results;
   vs->base.results = result;
d145 2
a146 4
   if (result) {
      if (result->id != UTIL_BITMASK_INVALID_INDEX)
         util_bitmask_clear( svga->vs_bm, result->id );
      svga_destroy_shader_result( result );
d162 4
d169 21
d194 1
a194 2
   struct svga_shader_result *result = NULL;
   unsigned id = SVGA3D_INVALID_ID;
d204 3
a206 3
      result = search_vs_key( vs, &key );
      if (!result) {
         ret = compile_vs( svga, vs, &key, &result );
d211 1
a211 2
      assert (result);
      id = result->id;
d214 27
a240 6
   if (result != svga->state.hw_draw.vs) {
      ret = SVGA3D_SetShader(svga->swc,
                             SVGA3D_SHADERTYPE_VS,
                             id );
      if (ret != PIPE_OK)
         return ret;
d242 2
a243 2
      svga->dirty |= SVGA_NEW_VS_RESULT;
      svga->state.hw_draw.vs = result;      
d255 1
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d30 1
d33 1
d70 31
d111 14
a124 2
      ret = PIPE_ERROR_OUT_OF_MEMORY;
      goto fail;
d138 1
a138 1
   if (ret)
d155 1
a155 1
/* SVGA_NEW_PRESCALE, SVGA_NEW_RAST, SVGA_NEW_ZERO_STRIDE
d157 2
a158 2
static int make_vs_key( struct svga_context *svga,
                        struct svga_vs_compile_key *key )
d163 3
a165 5
   key->zero_stride_vertex_elements =
      svga->curr.zero_stride_vertex_elements;
   key->num_zero_stride_vertex_elements =
      svga->curr.num_zero_stride_vertex_elements;
   return 0;
d170 2
a171 2
static int emit_hw_vs( struct svga_context *svga,
                       unsigned dirty )
d175 1
a175 1
   int ret = 0;
d182 1
a182 3
      ret = make_vs_key( svga, &key );
      if (ret)
         return ret;
d187 1
a187 1
         if (ret)
d199 1
a199 1
      if (ret)
d206 1
a206 1
   return 0;
d213 1
d215 1
a215 2
    SVGA_NEW_NEED_SWTNL |
    SVGA_NEW_ZERO_STRIDE),
a216 78
};


/***********************************************************************
 */
static int update_zero_stride( struct svga_context *svga,
                               unsigned dirty )
{
   unsigned i;

   svga->curr.zero_stride_vertex_elements = 0;
   svga->curr.num_zero_stride_vertex_elements = 0;

   for (i = 0; i < svga->curr.velems->count; i++) {
      const struct pipe_vertex_element *vel = &svga->curr.velems->velem[i];
      const struct pipe_vertex_buffer *vbuffer = &svga->curr.vb[
         vel->vertex_buffer_index];

      if (vbuffer->stride == 0) {
         unsigned const_idx =
            svga->curr.num_zero_stride_vertex_elements;
	 struct pipe_transfer *transfer;
         struct translate *translate;
         struct translate_key key;
         void *mapped_buffer;

         svga->curr.zero_stride_vertex_elements |= (1 << i);
         ++svga->curr.num_zero_stride_vertex_elements;

         key.output_stride = 4 * sizeof(float);
         key.nr_elements = 1;
         key.element[0].type = TRANSLATE_ELEMENT_NORMAL;
         key.element[0].input_format = vel->src_format;
         key.element[0].output_format = PIPE_FORMAT_R32G32B32A32_FLOAT;
         key.element[0].input_buffer = vel->vertex_buffer_index;
         key.element[0].input_offset = vel->src_offset;
         key.element[0].instance_divisor = vel->instance_divisor;
         key.element[0].output_offset = const_idx * 4 * sizeof(float);

         translate_key_sanitize(&key);
         /* translate_generic_create is technically private but
          * we don't want to code-generate, just want generic
          * translation */
         translate = translate_generic_create(&key);

         assert(vel->src_offset == 0);
         
         mapped_buffer = pipe_buffer_map_range(&svga->pipe, 
                                               vbuffer->buffer,
                                               vel->src_offset,
                                               util_format_get_blocksize(vel->src_format),
                                               PIPE_TRANSFER_READ,
					       &transfer);

         translate->set_buffer(translate, vel->vertex_buffer_index,
                               mapped_buffer,
                               vbuffer->stride, ~0);
         translate->run(translate, 0, 1, 0,
                        svga->curr.zero_stride_constants);

         pipe_buffer_unmap(&svga->pipe, transfer);

         translate->release(translate);
      }
   }

   if (svga->curr.num_zero_stride_vertex_elements)
      svga->dirty |= SVGA_NEW_ZERO_STRIDE;

   return 0;
}

struct svga_tracked_state svga_hw_update_zero_stride =
{
   "update zero_stride",
   ( SVGA_NEW_VELEMENT |
     SVGA_NEW_VBUFFER ),
   update_zero_stride
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d232 1
a232 1
                               vbuffer->stride, vbuffer->max_index);
d236 1
a236 3
         pipe_buffer_unmap(&svga->pipe,
                           vbuffer->buffer,
			   transfer);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d189 2
a190 2
   for (i = 0; i < svga->curr.num_vertex_elements; i++) {
      const struct pipe_vertex_element *vel = &svga->curr.ve[i];
d193 1
d197 1
d223 1
a223 1
         mapped_buffer = pipe_buffer_map_range(svga->pipe.screen, 
d227 3
a229 1
                                               PIPE_BUFFER_USAGE_CPU_READ);
d232 1
a232 1
                               vbuffer->stride);
d236 4
a239 2
         pipe_buffer_unmap(svga->pipe.screen,
                           vbuffer->buffer);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d189 2
a190 2
   for (i = 0; i < svga->curr.velems->count; i++) {
      const struct pipe_vertex_element *vel = &svga->curr.velems->velem[i];
a192 1

a195 1
	 struct pipe_transfer *transfer;
d221 1
a221 1
         mapped_buffer = pipe_buffer_map_range(&svga->pipe, 
d225 1
a225 3
                                               PIPE_TRANSFER_READ,
					       &transfer);

d228 1
a228 1
                               vbuffer->stride, vbuffer->max_index);
d232 2
a233 4
         pipe_buffer_unmap(&svga->pipe,
                           vbuffer->buffer,
			   transfer);

@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a29 1
#include "util/u_memory.h"
a31 1
#include "tgsi/tgsi_ureg.h"
a67 31
/**
 * If we fail to compile a vertex shader we'll use a dummy/fallback shader
 * that simply emits a (0,0,0,1) vertex position.
 */
static const struct tgsi_token *
get_dummy_vertex_shader(void)
{
   static const float zero[4] = { 0.0, 0.0, 0.0, 1.0 };
   struct ureg_program *ureg;
   const struct tgsi_token *tokens;
   struct ureg_src src;
   struct ureg_dst dst;
   unsigned num_tokens;

   ureg = ureg_create(TGSI_PROCESSOR_VERTEX);
   if (!ureg)
      return NULL;

   dst = ureg_DECL_output(ureg, TGSI_SEMANTIC_POSITION, 0);
   src = ureg_DECL_immediate(ureg, zero, 4);
   ureg_MOV(ureg, dst, src);
   ureg_END(ureg);

   tokens = ureg_get_tokens(ureg, &num_tokens);

   ureg_destroy(ureg);

   return tokens;
}


d78 2
a79 14
      /* some problem during translation, try the dummy shader */
      const struct tgsi_token *dummy = get_dummy_vertex_shader();
      if (!dummy) {
         ret = PIPE_ERROR_OUT_OF_MEMORY;
         goto fail;
      }
      debug_printf("Failed to compile vertex shader, using dummy shader instead.\n");
      FREE((void *) vs->base.tokens);
      vs->base.tokens = dummy;
      result = svga_translate_vertex_program(vs, key);
      if (result == NULL) {
         ret = PIPE_ERROR;
         goto fail;
      }
d93 1
a93 1
   if (ret != PIPE_OK)
d110 1
a110 1
/* SVGA_NEW_PRESCALE, SVGA_NEW_RAST, SVGA_NEW_FS
d112 2
a113 2
static void
make_vs_key(struct svga_context *svga, struct svga_vs_compile_key *key)
d118 5
a122 3

   /* SVGA_NEW_FS */
   key->fs_generic_inputs = svga->curr.fs->generic_inputs;
d127 2
a128 2
static enum pipe_error
emit_hw_vs(struct svga_context *svga, unsigned dirty)
d132 1
a132 1
   enum pipe_error ret = PIPE_OK;
d139 3
a141 1
      make_vs_key( svga, &key );
d146 1
a146 1
         if (ret != PIPE_OK)
d158 1
a158 1
      if (ret != PIPE_OK)
d165 1
a165 1
   return PIPE_OK;
a171 1
    SVGA_NEW_FS |
d173 2
a174 1
    SVGA_NEW_NEED_SWTNL),
d176 80
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a37 1
#include "svga_shader.h"
d42 3
d46 2
a47 3
static INLINE int
compare_vs_keys(const struct svga_vs_compile_key *a,
                const struct svga_vs_compile_key *b)
d54 2
a55 4
/** Search for a vertex shader variant */
static struct svga_shader_variant *
search_vs_key(const struct svga_vertex_shader *vs,
              const struct svga_vs_compile_key *key)
d57 1
a57 1
   struct svga_shader_variant *variant = vs->base.variants;
d61 3
a63 3
   for ( ; variant; variant = variant->next) {
      if (compare_vs_keys( key, &variant->key.vkey ) == 0)
         return variant;
d101 4
a104 8
/**
 * Translate TGSI shader into an svga shader variant.
 */
static enum pipe_error
compile_vs(struct svga_context *svga,
           struct svga_vertex_shader *vs,
           const struct svga_vs_compile_key *key,
           struct svga_shader_variant **out_variant)
d106 1
a106 1
   struct svga_shader_variant *variant;
d109 2
a110 2
   variant = svga_translate_vertex_program( vs, key );
   if (variant == NULL) {
d120 2
a121 2
      variant = svga_translate_vertex_program(vs, key);
      if (variant == NULL) {
d127 11
a137 1
   ret = svga_define_shader(svga, SVGA3D_SHADERTYPE_VS, variant);
d141 3
a143 6
   *out_variant = variant;

   /* insert variants at head of linked list */
   variant->next = vs->base.variants;
   vs->base.variants = variant;

d147 4
a150 2
   if (variant) {
      svga_destroy_shader_variant(svga, SVGA3D_SHADERTYPE_VS, variant);
a165 4

   /* SVGA_NEW_VELEMENT */
   key->adjust_attrib_range = svga->curr.velems->adjust_attrib_range;
   key->adjust_attrib_w_1 = svga->curr.velems->adjust_attrib_w_1;
a168 21
/**
 * svga_reemit_vs_bindings - Reemit the vertex shader bindings
 */
enum pipe_error
svga_reemit_vs_bindings(struct svga_context *svga)
{
   enum pipe_error ret;
   struct svga_winsys_gb_shader *gbshader =
      svga->state.hw_draw.vs ? svga->state.hw_draw.vs->gb_shader : NULL;

   assert(svga->rebind.vs);
   assert(svga_have_gb_objects(svga));

   ret = SVGA3D_SetGBShader(svga->swc, SVGA3D_SHADERTYPE_VS, gbshader);
   if (ret != PIPE_OK)
      return ret;

   svga->rebind.vs = FALSE;
   return PIPE_OK;
}

d173 2
a174 1
   struct svga_shader_variant *variant = NULL;
d184 3
a186 3
      variant = search_vs_key( vs, &key );
      if (!variant) {
         ret = compile_vs( svga, vs, &key, &variant );
d191 2
a192 1
      assert(variant);
d195 6
a200 27
   if (variant != svga->state.hw_draw.vs) {
      if (svga_have_gb_objects(svga)) {
         struct svga_winsys_gb_shader *gbshader =
            variant ? variant->gb_shader : NULL;

         /*
          * Bind is necessary here only because pipebuffer_fenced may move
          * the shader contents around....
          */
         if (gbshader) {
            ret = SVGA3D_BindGBShader(svga->swc, gbshader);
            if (ret != PIPE_OK)
               return ret;
         }

         ret = SVGA3D_SetGBShader(svga->swc, SVGA3D_SHADERTYPE_VS, gbshader);
         if (ret != PIPE_OK)
            return ret;

         svga->rebind.vs = FALSE;
      }
      else {
         unsigned id = variant ? variant->id : SVGA_ID_INVALID;
         ret = SVGA3D_SetShader(svga->swc, SVGA3D_SHADERTYPE_VS, id);
         if (ret != PIPE_OK)
            return ret;
      }
d202 2
a203 2
      svga->dirty |= SVGA_NEW_VS_VARIANT;
      svga->state.hw_draw.vs = variant;      
a214 1
    SVGA_NEW_VELEMENT |
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a102 23
 * Replace the given shader's instruction with a simple / dummy shader.
 * We use this when normal shader translation fails.
 */
static struct svga_shader_variant *
get_compiled_dummy_vertex_shader(struct svga_vertex_shader *vs,
                                 const struct svga_vs_compile_key *key)
{
   const struct tgsi_token *dummy = get_dummy_vertex_shader();
   struct svga_shader_variant *variant;

   if (!dummy) {
      return NULL;
   }

   FREE((void *) vs->base.tokens);
   vs->base.tokens = dummy;

   variant = svga_translate_vertex_program(vs, key);
   return variant;
}


/**
d117 3
a119 3
      variant = get_compiled_dummy_vertex_shader(vs, key);
      if (!variant) {
         ret = PIPE_ERROR;
d122 5
a126 10
   }

   if (svga_shader_too_large(svga, variant)) {
      /* too big, use dummy shader */
      debug_printf("Shader too large (%lu bytes),"
                   " using dummy shader instead.\n",
                   (unsigned long ) variant->nr_tokens
                   * sizeof(variant->tokens[0]));
      variant = get_compiled_dummy_vertex_shader(vs, key);
      if (!variant) {
d218 11
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d103 23
d140 3
a142 3
      const struct tgsi_token *dummy = get_dummy_vertex_shader();
      if (!dummy) {
         ret = PIPE_ERROR_OUT_OF_MEMORY;
d145 10
a154 5
      debug_printf("Failed to compile vertex shader, using dummy shader instead.\n");
      FREE((void *) vs->base.tokens);
      vs->base.tokens = dummy;
      variant = svga_translate_vertex_program(vs, key);
      if (variant == NULL) {
a245 11

         /*
          * Bind is necessary here only because pipebuffer_fenced may move
          * the shader contents around....
          */
         if (gbshader) {
            ret = SVGA3D_BindGBShader(svga->swc, gbshader);
            if (ret != PIPE_OK)
               return ret;
         }

@


