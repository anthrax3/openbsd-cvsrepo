head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.11;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.01;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.16;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**********************************************************
 * Copyright 2008-2009 VMware, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 **********************************************************/

#include "draw/draw_context.h"
#include "draw/draw_vbuf.h"
#include "util/u_inlines.h"
#include "pipe/p_state.h"

#include "svga_context.h"
#include "svga_screen.h"
#include "svga_swtnl.h"
#include "svga_state.h"
#include "svga_swtnl_private.h"



enum pipe_error
svga_swtnl_draw_vbo(struct svga_context *svga,
                    const struct pipe_draw_info *info)
{
   struct pipe_transfer *vb_transfer[PIPE_MAX_ATTRIBS] = { 0 };
   struct pipe_transfer *ib_transfer = NULL;
   struct pipe_transfer *cb_transfer = NULL;
   struct draw_context *draw = svga->swtnl.draw;
   unsigned i;
   const void *map;
   enum pipe_error ret;

   assert(!svga->dirty);
   assert(svga->state.sw.need_swtnl);
   assert(draw);

   /* Make sure that the need_swtnl flag does not go away */
   svga->state.sw.in_swtnl_draw = TRUE;

   ret = svga_update_state(svga, SVGA_STATE_SWTNL_DRAW);
   if (ret != PIPE_OK) {
      svga_context_flush(svga, NULL);
      ret = svga_update_state(svga, SVGA_STATE_SWTNL_DRAW);
      svga->swtnl.new_vbuf = TRUE;
      assert(ret == PIPE_OK);
   }

   /*
    * Map vertex buffers
    */
   for (i = 0; i < svga->curr.num_vertex_buffers; i++) {
      if (svga->curr.vb[i].buffer) {
         map = pipe_buffer_map(&svga->pipe,
                               svga->curr.vb[i].buffer,
                               PIPE_TRANSFER_READ,
                               &vb_transfer[i]);

         draw_set_mapped_vertex_buffer(draw, i, map, ~0);
      }
   }

   /* Map index buffer, if present */
   map = NULL;
   if (info->indexed && svga->curr.ib.buffer) {
      map = pipe_buffer_map(&svga->pipe, svga->curr.ib.buffer,
                            PIPE_TRANSFER_READ,
                            &ib_transfer);
      draw_set_indexes(draw,
                       (const ubyte *) map + svga->curr.ib.offset,
                       svga->curr.ib.index_size, ~0);
   }

   if (svga->curr.cbufs[PIPE_SHADER_VERTEX].buffer) {
      map = pipe_buffer_map(&svga->pipe,
                            svga->curr.cbufs[PIPE_SHADER_VERTEX].buffer,
                            PIPE_TRANSFER_READ,
			    &cb_transfer);
      assert(map);
      draw_set_mapped_constant_buffer(
         draw, PIPE_SHADER_VERTEX, 0,
         map,
         svga->curr.cbufs[PIPE_SHADER_VERTEX].buffer->width0);
   }

   draw_vbo(draw, info);

   draw_flush(svga->swtnl.draw);

   /* Ensure the draw module didn't touch this */
   assert(i == svga->curr.num_vertex_buffers);
   
   /*
    * unmap vertex/index buffers
    */
   for (i = 0; i < svga->curr.num_vertex_buffers; i++) {
      if (svga->curr.vb[i].buffer) {
         pipe_buffer_unmap(&svga->pipe, vb_transfer[i]);
         draw_set_mapped_vertex_buffer(draw, i, NULL, 0);
      }
   }

   if (ib_transfer) {
      pipe_buffer_unmap(&svga->pipe, ib_transfer);
      draw_set_indexes(draw, NULL, 0, 0);
   }

   if (svga->curr.cbufs[PIPE_SHADER_VERTEX].buffer) {
      pipe_buffer_unmap(&svga->pipe, cb_transfer);
   }

   /* Now safe to remove the need_swtnl flag in any update_state call */
   svga->state.sw.in_swtnl_draw = FALSE;
   svga->dirty |= SVGA_NEW_NEED_PIPELINE | SVGA_NEW_NEED_SWVFETCH;

   return ret;
}




boolean svga_init_swtnl( struct svga_context *svga )
{
   struct svga_screen *screen = svga_screen(svga->pipe.screen);

   svga->swtnl.backend = svga_vbuf_render_create(svga);
   if(!svga->swtnl.backend)
      goto fail;

   /*
    * Create drawing context and plug our rendering stage into it.
    */
   svga->swtnl.draw = draw_create(&svga->pipe);
   if (svga->swtnl.draw == NULL)
      goto fail;


   draw_set_rasterize_stage(svga->swtnl.draw, 
                            draw_vbuf_stage( svga->swtnl.draw, svga->swtnl.backend ));

   draw_set_render(svga->swtnl.draw, svga->swtnl.backend);

   svga->blitter = util_blitter_create(&svga->pipe);
   if (!svga->blitter)
      goto fail;

   /* must be done before installing Draw stages */
   util_blitter_cache_all_shaders(svga->blitter);

   if (!screen->haveLineSmooth)
      draw_install_aaline_stage(svga->swtnl.draw, &svga->pipe);

   /* always install polygon stipple stage */
   draw_install_pstipple_stage(svga->swtnl.draw, &svga->pipe);

   /* enable/disable line stipple stage depending on device caps */
   draw_enable_line_stipple(svga->swtnl.draw, !screen->haveLineStipple);

   /* always install AA point stage */
   draw_install_aapoint_stage(svga->swtnl.draw, &svga->pipe);

   /* Set wide line threshold above device limit (so we'll never really use it)
    */
   draw_wide_line_threshold(svga->swtnl.draw,
                            MAX2(screen->maxLineWidth,
                                 screen->maxLineWidthAA));

   if (debug_get_bool_option("SVGA_SWTNL_FSE", FALSE))
      draw_set_driver_clipping(svga->swtnl.draw, TRUE, TRUE, TRUE, FALSE);

   return TRUE;

fail:
   if (svga->blitter)
      util_blitter_destroy(svga->blitter);

   if (svga->swtnl.backend)
      svga->swtnl.backend->destroy( svga->swtnl.backend );

   if (svga->swtnl.draw)
      draw_destroy( svga->swtnl.draw );

   return FALSE;
}


void svga_destroy_swtnl( struct svga_context *svga )
{
   draw_destroy( svga->swtnl.draw );
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d32 1
d91 1
a91 1
   if (svga->curr.cb[PIPE_SHADER_VERTEX]) {
d93 1
a93 1
                            svga->curr.cb[PIPE_SHADER_VERTEX],
d100 1
a100 1
         svga->curr.cb[PIPE_SHADER_VERTEX]->width0);
d125 1
a125 1
   if (svga->curr.cb[PIPE_SHADER_VERTEX]) {
d141 2
d167 10
a176 1
   draw_install_aaline_stage(svga->swtnl.draw, &svga->pipe);
d178 6
a183 1
   draw_install_pstipple_stage(svga->swtnl.draw, &svga->pipe);
d186 1
a186 1
      draw_set_driver_clipping(svga->swtnl.draw, TRUE, TRUE, TRUE);
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d42 1
a42 1
   struct pipe_transfer *vb_transfer[PIPE_MAX_ATTRIBS];
d58 1
a58 1
   if (ret) {
d69 5
a73 4
      map = pipe_buffer_map(&svga->pipe,
                            svga->curr.vb[i].buffer,
                            PIPE_TRANSFER_READ,
			    &vb_transfer[i]);
d75 2
a76 1
      draw_set_mapped_vertex_buffer(draw, i, map);
a78 3
   /* TODO move this to update_swtnl_draw */
   draw_set_index_buffer(draw, &svga->curr.ib);

d85 3
a88 1
   draw_set_mapped_index_buffer(draw, map);
d113 4
a116 2
      pipe_buffer_unmap(&svga->pipe, vb_transfer[i]);
      draw_set_mapped_vertex_buffer(draw, i, NULL);
d121 1
a121 1
      draw_set_mapped_index_buffer(draw, NULL);
d157 7
d169 1
a169 1
      draw_set_driver_clipping(svga->swtnl.draw, TRUE, TRUE);
d174 3
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d54 3
d112 1
a112 2
      pipe_buffer_unmap(&svga->pipe, svga->curr.vb[i].buffer, 
			vb_transfer[i]);
d117 1
a117 1
      pipe_buffer_unmap(&svga->pipe, svga->curr.ib.buffer, ib_transfer);
d122 1
a122 3
      pipe_buffer_unmap(&svga->pipe,
                        svga->curr.cb[PIPE_SHADER_VERTEX],
			cb_transfer);
d124 4
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d39 2
a40 6
svga_swtnl_draw_range_elements(struct svga_context *svga,
                               struct pipe_buffer *indexBuffer,
                               unsigned indexSize,
                               unsigned min_index,
                               unsigned max_index,
                               unsigned prim, unsigned start, unsigned count)
d42 3
d66 1
a66 1
      map = pipe_buffer_map(svga->pipe.screen,
d68 2
a69 1
                            PIPE_BUFFER_USAGE_CPU_READ);
d74 3
d78 5
a82 9
   if (indexBuffer) {
      map = pipe_buffer_map(svga->pipe.screen, indexBuffer,
                            PIPE_BUFFER_USAGE_CPU_READ);

      draw_set_mapped_element_buffer_range(draw, 
                                           indexSize, 
                                           min_index,
                                           max_index,
                                           map);
d84 2
a85 1
   
d87 1
a87 1
      map = pipe_buffer_map(svga->pipe.screen,
d89 2
a90 1
                            PIPE_BUFFER_USAGE_CPU_READ);
d95 1
a95 1
         svga->curr.cb[PIPE_SHADER_VERTEX]->size);
d98 1
a98 1
   draw_arrays(svga->swtnl.draw, prim, start, count);
d109 2
a110 1
      pipe_buffer_unmap(svga->pipe.screen, svga->curr.vb[i].buffer);
d114 3
a116 3
   if (indexBuffer) {
      pipe_buffer_unmap(svga->pipe.screen, indexBuffer);
      draw_set_mapped_element_buffer(draw, 0, NULL);
d120 3
a122 2
      pipe_buffer_unmap(svga->pipe.screen,
                        svga->curr.cb[PIPE_SHADER_VERTEX]);
d154 2
a155 1
   draw_set_driver_clipping(svga->swtnl.draw, debug_get_bool_option("SVGA_SWTNL_FSE", FALSE));
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d39 6
a44 2
svga_swtnl_draw_vbo(struct svga_context *svga,
                    const struct pipe_draw_info *info)
a45 3
   struct pipe_transfer *vb_transfer[PIPE_MAX_ATTRIBS];
   struct pipe_transfer *ib_transfer = NULL;
   struct pipe_transfer *cb_transfer = NULL;
d67 1
a67 1
      map = pipe_buffer_map(&svga->pipe,
d69 1
a69 2
                            PIPE_TRANSFER_READ,
			    &vb_transfer[i]);
a73 3
   /* TODO move this to update_swtnl_draw */
   draw_set_index_buffer(draw, &svga->curr.ib);

d75 9
a83 5
   map = NULL;
   if (info->indexed && svga->curr.ib.buffer) {
      map = pipe_buffer_map(&svga->pipe, svga->curr.ib.buffer,
                            PIPE_TRANSFER_READ,
                            &ib_transfer);
d85 1
a85 2
   draw_set_mapped_index_buffer(draw, map);

d87 1
a87 1
      map = pipe_buffer_map(&svga->pipe,
d89 1
a89 2
                            PIPE_TRANSFER_READ,
			    &cb_transfer);
d94 1
a94 1
         svga->curr.cb[PIPE_SHADER_VERTEX]->width0);
d97 1
a97 1
   draw_vbo(draw, info);
d108 1
a108 2
      pipe_buffer_unmap(&svga->pipe, svga->curr.vb[i].buffer, 
			vb_transfer[i]);
d112 3
a114 3
   if (ib_transfer) {
      pipe_buffer_unmap(&svga->pipe, svga->curr.ib.buffer, ib_transfer);
      draw_set_mapped_index_buffer(draw, NULL);
d118 2
a119 3
      pipe_buffer_unmap(&svga->pipe,
                        svga->curr.cb[PIPE_SHADER_VERTEX],
			cb_transfer);
d151 1
a151 2
   if (debug_get_bool_option("SVGA_SWTNL_FSE", FALSE))
      draw_set_driver_clipping(svga->swtnl.draw, TRUE, TRUE);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d42 1
a42 1
   struct pipe_transfer *vb_transfer[PIPE_MAX_ATTRIBS] = { 0 };
a53 3
   /* Make sure that the need_swtnl flag does not go away */
   svga->state.sw.in_swtnl_draw = TRUE;

d55 1
a55 1
   if (ret != PIPE_OK) {
d66 4
a69 5
      if (svga->curr.vb[i].buffer) {
         map = pipe_buffer_map(&svga->pipe,
                               svga->curr.vb[i].buffer,
                               PIPE_TRANSFER_READ,
                               &vb_transfer[i]);
d71 1
a71 2
         draw_set_mapped_vertex_buffer(draw, i, map, ~0);
      }
d74 3
a82 3
      draw_set_indexes(draw,
                       (const ubyte *) map + svga->curr.ib.offset,
                       svga->curr.ib.index_size, ~0);
d84 1
d109 3
a111 4
      if (svga->curr.vb[i].buffer) {
         pipe_buffer_unmap(&svga->pipe, vb_transfer[i]);
         draw_set_mapped_vertex_buffer(draw, i, NULL, 0);
      }
d115 2
a116 2
      pipe_buffer_unmap(&svga->pipe, ib_transfer);
      draw_set_indexes(draw, NULL, 0, 0);
d120 3
a122 1
      pipe_buffer_unmap(&svga->pipe, cb_transfer);
a124 4
   /* Now safe to remove the need_swtnl flag in any update_state call */
   svga->state.sw.in_swtnl_draw = FALSE;
   svga->dirty |= SVGA_NEW_NEED_PIPELINE | SVGA_NEW_NEED_SWVFETCH;

a149 7
   svga->blitter = util_blitter_create(&svga->pipe);
   if (!svga->blitter)
      goto fail;

   /* must be done before installing Draw stages */
   util_blitter_cache_all_shaders(svga->blitter);

d155 1
a155 1
      draw_set_driver_clipping(svga->swtnl.draw, TRUE, TRUE, TRUE);
a159 3
   if (svga->blitter)
      util_blitter_destroy(svga->blitter);

@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a31 1
#include "svga_screen.h"
d90 1
a90 1
   if (svga->curr.cbufs[PIPE_SHADER_VERTEX].buffer) {
d92 1
a92 1
                            svga->curr.cbufs[PIPE_SHADER_VERTEX].buffer,
d99 1
a99 1
         svga->curr.cbufs[PIPE_SHADER_VERTEX].buffer->width0);
d124 1
a124 1
   if (svga->curr.cbufs[PIPE_SHADER_VERTEX].buffer) {
a139 2
   struct svga_screen *screen = svga_screen(svga->pipe.screen);

d164 2
a165 4
   if (!screen->haveLineSmooth)
      draw_install_aaline_stage(svga->swtnl.draw, &svga->pipe);

   /* always install polygon stipple stage */
a167 12
   /* enable/disable line stipple stage depending on device caps */
   draw_enable_line_stipple(svga->swtnl.draw, !screen->haveLineStipple);

   /* always install AA point stage */
   draw_install_aapoint_stage(svga->swtnl.draw, &svga->pipe);

   /* Set wide line threshold above device limit (so we'll never really use it)
    */
   draw_wide_line_threshold(svga->swtnl.draw,
                            MAX2(screen->maxLineWidth,
                                 screen->maxLineWidthAA));

d169 1
a169 1
      draw_set_driver_clipping(svga->swtnl.draw, TRUE, TRUE, TRUE, FALSE);
@


