head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.01.12;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.01;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.16;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**********************************************************
 * Copyright 2008-2009 VMware, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 **********************************************************/

#ifndef SVGA_TGSI_EMIT_H
#define SVGA_TGSI_EMIT_H

#include "tgsi/tgsi_scan.h"
#include "svga_hw_reg.h"
#include "svga_tgsi.h"
#include "svga3d_shaderdefs.h"

struct src_register
{
   SVGA3dShaderSrcToken base;
   SVGA3dShaderSrcToken indirect;
};


struct svga_arl_consts
{
   int number;
   int idx;
   int swizzle;
   int arl_num;
};


/**
 * This is the context/state used during TGSI->SVGA shader translation.
 */
struct svga_shader_emitter
{
   unsigned size;
   char *buf;
   char *ptr;

   struct svga_compile_key key;
   struct tgsi_shader_info info;
   int unit;

   int imm_start;

   int nr_hw_float_const;
   int nr_hw_int_const;
   int nr_hw_temp;

   int insn_offset;

   int internal_temp_count;
   int internal_imm_count;

   int internal_color_idx[2]; /* diffuse, specular */
   int internal_color_count;

   boolean emitted_vface;
   boolean emit_frontface;
   int internal_frontface_idx;

   int ps30_input_count;
   int vs30_output_count;

   int dynamic_branching_level;

   boolean in_main_func;

   boolean created_common_immediate;
   int common_immediate_idx[2];

   boolean created_loop_const;
   int loop_const_idx;

   unsigned inverted_texcoords;  /**< bitmask of which texcoords are flipped */
   struct src_register ps_true_texcoord[PIPE_MAX_ATTRIBS];
   struct src_register ps_inverted_texcoord[PIPE_MAX_ATTRIBS];
   unsigned ps_inverted_texcoord_input[PIPE_MAX_ATTRIBS];

   unsigned label[32];
   unsigned nr_labels;

   /** input/output register mappings, indexed by register number */
   struct src_register input_map[PIPE_MAX_ATTRIBS];
   SVGA3dShaderDestToken output_map[PIPE_MAX_ATTRIBS];

   boolean ps_reads_pos;
   boolean emitted_depth_fog;
   struct src_register ps_true_pos;
   struct src_register ps_depth_pos;
   SVGA3dShaderDestToken ps_temp_pos;

   /* shared input for depth and fog */
   struct src_register ps_depth_fog;

   struct src_register imm_0055;
   SVGA3dShaderDestToken temp_pos;
   SVGA3dShaderDestToken true_pos;
   SVGA3dShaderDestToken depth_pos;

   /* shared output for depth and fog */
   SVGA3dShaderDestToken vs_depth_fog;

   /* PS output colors (indexed by color semantic index) */
   SVGA3dShaderDestToken temp_color_output[PIPE_MAX_COLOR_BUFS];
   SVGA3dShaderDestToken true_color_output[PIPE_MAX_COLOR_BUFS];

   SVGA3dShaderDestToken temp_psiz;
   SVGA3dShaderDestToken true_psiz;

   struct svga_arl_consts arl_consts[12];
   int num_arl_consts;
   int current_arl;
};


boolean
svga_shader_emit_dword(struct svga_shader_emitter *emit, unsigned dword);

boolean
svga_shader_emit_dwords(struct svga_shader_emitter *emit,
                        const unsigned *dwords, unsigned nr);

boolean
svga_shader_emit_opcode(struct svga_shader_emitter *emit,
                        unsigned opcode);

boolean
svga_shader_emit_instructions(struct svga_shader_emitter *emit,
                              const struct tgsi_token *tokens);

boolean
svga_translate_decl_sm30(struct svga_shader_emitter *emit,
                         const struct tgsi_full_declaration *decl);


#define TRANSLATE_SWIZZLE(x,y,z,w)  ((x) | ((y) << 2) | ((z) << 4) | ((w) << 6))
#define SWIZZLE_XYZW  \
 TRANSLATE_SWIZZLE(TGSI_SWIZZLE_X,TGSI_SWIZZLE_Y,TGSI_SWIZZLE_Z,TGSI_SWIZZLE_W)
#define SWIZZLE_XXXX  \
 TRANSLATE_SWIZZLE(TGSI_SWIZZLE_X,TGSI_SWIZZLE_X,TGSI_SWIZZLE_X,TGSI_SWIZZLE_X)
#define SWIZZLE_YYYY  \
 TRANSLATE_SWIZZLE(TGSI_SWIZZLE_Y,TGSI_SWIZZLE_Y,TGSI_SWIZZLE_Y,TGSI_SWIZZLE_Y)
#define SWIZZLE_ZZZZ  \
 TRANSLATE_SWIZZLE(TGSI_SWIZZLE_Z,TGSI_SWIZZLE_Z,TGSI_SWIZZLE_Z,TGSI_SWIZZLE_Z)
#define SWIZZLE_WWWW  \
 TRANSLATE_SWIZZLE(TGSI_SWIZZLE_W,TGSI_SWIZZLE_W,TGSI_SWIZZLE_W,TGSI_SWIZZLE_W)


/** Emit the given SVGA3dShaderInstToken opcode */
static INLINE boolean
emit_instruction(struct svga_shader_emitter *emit,
                 SVGA3dShaderInstToken opcode)
{
   return svga_shader_emit_opcode(emit, opcode.value);
}


/** Generate a SVGA3dShaderInstToken for the given SVGA3D shader opcode */
static INLINE SVGA3dShaderInstToken
inst_token(unsigned opcode)
{
   SVGA3dShaderInstToken inst;

   inst.value = 0;
   inst.op = opcode;

   return inst;
}


/**
 * Generate a SVGA3dShaderInstToken for the given SVGA3D shader opcode
 * with the predication flag set.
 */
static INLINE SVGA3dShaderInstToken
inst_token_predicated(unsigned opcode)
{
   SVGA3dShaderInstToken inst;

   inst.value = 0;
   inst.op = opcode;
   inst.predicated = 1;

   return inst;
}


/**
 * Generate a SVGA3dShaderInstToken for a SETP instruction (set predicate)
 * using the given comparison operator (one of SVGA3DOPCOMP_xx).
 */
static INLINE SVGA3dShaderInstToken
inst_token_setp(unsigned operator)
{
   SVGA3dShaderInstToken inst;

   inst.value = 0;
   inst.op = SVGA3DOP_SETP;
   inst.control = operator;

   return inst;
}


/**
 * Create an instance of a SVGA3dShaderDestToken.
 * Note that this function is used to create tokens for output registers,
 * temp registers AND constants (see emit_def_const()).
 */
static INLINE SVGA3dShaderDestToken
dst_register(unsigned file, int number)
{
   SVGA3dShaderDestToken dest;

   /* check values against bitfield sizes */
   assert(number < (1 << 11));
   assert(file <= SVGA3DREG_PREDICATE);

   dest.value = 0;
   dest.num = number;
   dest.type_upper = file >> 3;
   dest.relAddr = 0;
   dest.reserved1 = 0;
   dest.mask = 0xf;
   dest.dstMod = 0;
   dest.shfScale = 0;
   dest.type_lower = file & 0x7;
   dest.reserved0 = 1;          /* is_reg */

   return dest;
}


/**
 * Apply a writemask to the given SVGA3dShaderDestToken, returning a
 * new SVGA3dShaderDestToken.
 */
static INLINE SVGA3dShaderDestToken
writemask(SVGA3dShaderDestToken dest, unsigned mask)
{
   assert(dest.mask & mask);
   dest.mask &= mask;
   return dest;
}


/** Create a SVGA3dShaderSrcToken given a register file and number */
static INLINE SVGA3dShaderSrcToken
src_token(unsigned file, int number)
{
   SVGA3dShaderSrcToken src;

   /* check values against bitfield sizes */
   assert(number < (1 << 11));
   assert(file <= SVGA3DREG_PREDICATE);

   src.value = 0;
   src.num = number;
   src.type_upper = file >> 3;
   src.relAddr = 0;
   src.reserved1 = 0;
   src.swizzle = SWIZZLE_XYZW;
   src.srcMod = 0;
   src.type_lower = file & 0x7;
   src.reserved0 = 1;           /* is_reg */

   return src;
}


/** Create a src_register given a register file and register number */
static INLINE struct src_register
src_register(unsigned file, int number)
{
   struct src_register src;

   src.base = src_token(file, number);
   src.indirect.value = 0;

   return src;
}

/** Translate src_register into SVGA3dShaderDestToken */
static INLINE SVGA3dShaderDestToken
dst(struct src_register src)
{
   return dst_register(SVGA3dShaderGetRegType(src.base.value), src.base.num);
}


/** Translate SVGA3dShaderDestToken to a src_register */
static INLINE struct src_register
src(SVGA3dShaderDestToken dst)
{
   return src_register(SVGA3dShaderGetRegType(dst.value), dst.num);
}

#endif
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d88 2
a89 2
   boolean created_zero_immediate;
   int zero_immediate_idx;
d102 1
d123 3
a125 2
   SVGA3dShaderDestToken temp_col[PIPE_MAX_COLOR_BUFS];
   SVGA3dShaderDestToken true_col[PIPE_MAX_COLOR_BUFS];
d186 34
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d41 2
a42 1
struct svga_arl_consts {
d49 3
a51 1
/* Internal functions:
a52 1

a54 2
   boolean use_sm30;
   
d59 1
a59 1
   union svga_compile_key key;
d68 1
a68 1
   
d82 1
d94 4
a97 2
   boolean created_sincos_consts;
   int sincos_consts_idx;
d105 9
d117 4
d134 2
a135 72
boolean svga_shader_emit_dword( struct svga_shader_emitter *emit,
                                unsigned dword );

boolean svga_shader_emit_dwords( struct svga_shader_emitter *emit,
                                 const unsigned *dwords,
                                 unsigned nr );

boolean svga_shader_emit_opcode( struct svga_shader_emitter *emit,
                                 unsigned opcode );

boolean svga_shader_emit_instructions( struct svga_shader_emitter *emit,
                                       const struct tgsi_token *tokens );

boolean svga_translate_decl_sm20( struct svga_shader_emitter *emit,
                               const struct tgsi_full_declaration *decl );

boolean svga_translate_decl_sm30( struct svga_shader_emitter *emit,
                               const struct tgsi_full_declaration *decl );


static INLINE boolean emit_dst( struct svga_shader_emitter *emit,
                         SVGA3dShaderDestToken dest )
{
   assert(dest.reserved0);
   assert(dest.mask);
   return svga_shader_emit_dword( emit, dest.value );
}

static INLINE boolean emit_src( struct svga_shader_emitter *emit,
                         const struct src_register src )
{
   if (src.base.relAddr) {
      assert(src.base.reserved0);
      assert(src.indirect.reserved0);
      return (svga_shader_emit_dword( emit, src.base.value ) &&
              svga_shader_emit_dword( emit, src.indirect.value ));
   }
   else {
      assert(src.base.reserved0);
      return svga_shader_emit_dword( emit, src.base.value );
   }
}


static INLINE boolean emit_instruction( struct svga_shader_emitter *emit,
                                 SVGA3dShaderInstToken opcode )
{
   return svga_shader_emit_opcode( emit, opcode.value );
}


static INLINE boolean emit_op1( struct svga_shader_emitter *emit,
                         SVGA3dShaderInstToken inst,
                         SVGA3dShaderDestToken dest,
                         struct src_register src0 )
{
   return (emit_instruction( emit, inst ) &&
           emit_dst( emit, dest ) &&
           emit_src( emit, src0 ));
}

static INLINE boolean emit_op2( struct svga_shader_emitter *emit,
                     SVGA3dShaderInstToken inst,
                     SVGA3dShaderDestToken dest,
                     struct src_register src0,
                     struct src_register src1 )
{
   return (emit_instruction( emit, inst ) &&
           emit_dst( emit, dest ) &&
           emit_src( emit, src0 ) &&
           emit_src( emit, src1 ));
}
d137 15
a151 30
static INLINE boolean emit_op3( struct svga_shader_emitter *emit,
                         SVGA3dShaderInstToken inst,
                         SVGA3dShaderDestToken dest,
                         struct src_register src0,
                         struct src_register src1,
                         struct src_register src2 )
{
   return (emit_instruction( emit, inst ) &&
           emit_dst( emit, dest ) &&
           emit_src( emit, src0 ) &&
           emit_src( emit, src1 ) &&
           emit_src( emit, src2 ));
}


static INLINE boolean emit_op4( struct svga_shader_emitter *emit,
                                SVGA3dShaderInstToken inst,
                                SVGA3dShaderDestToken dest,
                                struct src_register src0,
                                struct src_register src1,
                                struct src_register src2,
                                struct src_register src3)
{
   return (emit_instruction( emit, inst ) &&
           emit_dst( emit, dest ) &&
           emit_src( emit, src0 ) &&
           emit_src( emit, src1 ) &&
           emit_src( emit, src2 ) &&
           emit_src( emit, src3 ));
}
d167 7
d175 2
d178 1
a178 1
inst_token( unsigned opcode )
d188 8
a195 3
static INLINE SVGA3dShaderDestToken 
dst_register( unsigned file,
              int number )
d199 4
d213 1
a213 1
   
d217 5
d223 1
a223 2
writemask( SVGA3dShaderDestToken dest,
           unsigned mask )
d231 3
a233 2
static INLINE SVGA3dShaderSrcToken 
src_token( unsigned file, int number )
d237 4
d255 3
a257 2
static INLINE struct src_register 
absolute( struct src_register src )
d259 1
a259 1
   src.base.srcMod = SVGA3DSRCMOD_ABS;
d261 1
a261 31
   return src;
}


static INLINE struct src_register 
negate( struct src_register src )
{
   switch (src.base.srcMod) {
   case SVGA3DSRCMOD_ABS:
      src.base.srcMod = SVGA3DSRCMOD_ABSNEG;
      break;
   case SVGA3DSRCMOD_ABSNEG:
      src.base.srcMod = SVGA3DSRCMOD_ABS;
      break;
   case SVGA3DSRCMOD_NEG:
      src.base.srcMod = SVGA3DSRCMOD_NONE;
      break;
   case SVGA3DSRCMOD_NONE:
      src.base.srcMod = SVGA3DSRCMOD_NEG;
      break;
   }
   return src;
}


static INLINE struct src_register 
src_register( unsigned file, int number )
{
   struct src_register src;
   
   src.base = src_token( file, number );
d267 3
a269 1
static INLINE SVGA3dShaderDestToken dst( struct src_register src )
d271 1
a271 2
   return dst_register( SVGA3dShaderGetRegType( src.base.value ),
                        src.base.num );
a273 5
static INLINE struct src_register src( SVGA3dShaderDestToken dst )
{
   return src_register( SVGA3dShaderGetRegType( dst.value ),
                        dst.num );
}
d275 3
a277 2
static INLINE ubyte svga_tgsi_sampler_type( struct svga_shader_emitter *emit,
                                            int idx )
d279 1
a279 13
   switch (emit->key.fkey.tex[idx].texture_target) {
   case PIPE_TEXTURE_1D:
      return SVGA3DSAMP_2D;
   case PIPE_TEXTURE_2D:
   case PIPE_TEXTURE_RECT:
      return SVGA3DSAMP_2D;
   case PIPE_TEXTURE_3D:
      return SVGA3DSAMP_VOLUME;
   case PIPE_TEXTURE_CUBE:
      return SVGA3DSAMP_CUBE;
   }

   return SVGA3DSAMP_UNKNOWN;
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d65 2
a66 1
   int nr_hw_const;
d357 1
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d65 1
a65 2
   int nr_hw_float_const;
   int nr_hw_int_const;
a355 1
   case PIPE_TEXTURE_RECT:
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d41 1
a41 2
struct svga_arl_consts
{
d48 2
a50 3
/**
 * This is the context/state used during TGSI->SVGA shader translation.
 */
d53 2
d59 1
a59 1
   struct svga_compile_key key;
d68 1
a68 1

a81 1
   int vs30_output_count;
d93 2
a94 4
   unsigned inverted_texcoords;  /**< bitmask of which texcoords are flipped */
   struct src_register ps_true_texcoord[PIPE_MAX_ATTRIBS];
   struct src_register ps_inverted_texcoord[PIPE_MAX_ATTRIBS];
   unsigned ps_inverted_texcoord_input[PIPE_MAX_ATTRIBS];
a101 9
   boolean ps_reads_pos;
   boolean emitted_depth_fog;
   struct src_register ps_true_pos;
   struct src_register ps_depth_pos;
   SVGA3dShaderDestToken ps_temp_pos;

   /* shared input for depth and fog */
   struct src_register ps_depth_fog;

a104 4
   SVGA3dShaderDestToken depth_pos;

   /* shared output for depth and fog */
   SVGA3dShaderDestToken vs_depth_fog;
d118 72
a189 2
boolean
svga_shader_emit_dword(struct svga_shader_emitter *emit, unsigned dword);
d191 30
a220 15
boolean
svga_shader_emit_dwords(struct svga_shader_emitter *emit,
                        const unsigned *dwords, unsigned nr);

boolean
svga_shader_emit_opcode(struct svga_shader_emitter *emit,
                        unsigned opcode);

boolean
svga_shader_emit_instructions(struct svga_shader_emitter *emit,
                              const struct tgsi_token *tokens);

boolean
svga_translate_decl_sm30(struct svga_shader_emitter *emit,
                         const struct tgsi_full_declaration *decl);
a235 7
/** Emit the given SVGA3dShaderInstToken opcode */
static INLINE boolean
emit_instruction(struct svga_shader_emitter *emit,
                 SVGA3dShaderInstToken opcode)
{
   return svga_shader_emit_opcode(emit, opcode.value);
}
a236 2

/** Generate a SVGA3dShaderInstToken for the given SVGA3D shader opcode */
d238 1
a238 1
inst_token(unsigned opcode)
d248 3
a250 8

/**
 * Create an instance of a SVGA3dShaderDestToken.
 * Note that this function is used to create tokens for output registers,
 * temp registers AND constants (see emit_def_const()).
 */
static INLINE SVGA3dShaderDestToken
dst_register(unsigned file, int number)
a253 4
   /* check values against bitfield sizes */
   assert(number < (1 << 11));
   assert(file <= SVGA3DREG_PREDICATE);

d264 1
a264 1

a267 5

/**
 * Apply a writemask to the given SVGA3dShaderDestToken, returning a
 * new SVGA3dShaderDestToken.
 */
d269 2
a270 1
writemask(SVGA3dShaderDestToken dest, unsigned mask)
d278 2
a279 3
/** Create a SVGA3dShaderSrcToken given a register file and number */
static INLINE SVGA3dShaderSrcToken
src_token(unsigned file, int number)
a282 4
   /* check values against bitfield sizes */
   assert(number < (1 << 11));
   assert(file <= SVGA3DREG_PREDICATE);

d297 32
a328 3
/** Create a src_register given a register file and register number */
static INLINE struct src_register
src_register(unsigned file, int number)
d331 2
a332 2

   src.base = src_token(file, number);
d338 1
a338 3
/** Translate src_register into SVGA3dShaderDestToken */
static INLINE SVGA3dShaderDestToken
dst(struct src_register src)
d340 2
a341 1
   return dst_register(SVGA3dShaderGetRegType(src.base.value), src.base.num);
d344 5
d350 2
a351 3
/** Translate SVGA3dShaderDestToken to a src_register */
static INLINE struct src_register
src(SVGA3dShaderDestToken dst)
d353 13
a365 1
   return src_register(SVGA3dShaderGetRegType(dst.value), dst.num);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d88 2
a89 2
   boolean created_common_immediate;
   int common_immediate_idx[2];
a101 1
   /** input/output register mappings, indexed by register number */
d122 2
a123 3
   /* PS output colors (indexed by color semantic index) */
   SVGA3dShaderDestToken temp_color_output[PIPE_MAX_COLOR_BUFS];
   SVGA3dShaderDestToken true_color_output[PIPE_MAX_COLOR_BUFS];
a183 34

   return inst;
}


/**
 * Generate a SVGA3dShaderInstToken for the given SVGA3D shader opcode
 * with the predication flag set.
 */
static INLINE SVGA3dShaderInstToken
inst_token_predicated(unsigned opcode)
{
   SVGA3dShaderInstToken inst;

   inst.value = 0;
   inst.op = opcode;
   inst.predicated = 1;

   return inst;
}


/**
 * Generate a SVGA3dShaderInstToken for a SETP instruction (set predicate)
 * using the given comparison operator (one of SVGA3DOPCOMP_xx).
 */
static INLINE SVGA3dShaderInstToken
inst_token_setp(unsigned operator)
{
   SVGA3dShaderInstToken inst;

   inst.value = 0;
   inst.op = SVGA3DOP_SETP;
   inst.control = operator;
@


