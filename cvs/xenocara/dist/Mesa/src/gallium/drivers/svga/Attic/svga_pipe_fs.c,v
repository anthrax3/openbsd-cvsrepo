head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.1.0.14
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.14.01.09;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.57;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.16;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**********************************************************
 * Copyright 2008-2009 VMware, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 **********************************************************/

#include "util/u_inlines.h"
#include "util/u_math.h"
#include "util/u_memory.h"
#include "util/u_bitmask.h"
#include "tgsi/tgsi_parse.h"
#include "draw/draw_context.h"

#include "svga_context.h"
#include "svga_tgsi.h"
#include "svga_hw_reg.h"
#include "svga_cmd.h"
#include "svga_debug.h"
#include "svga_shader.h"


static void *
svga_create_fs_state(struct pipe_context *pipe,
                     const struct pipe_shader_state *templ)
{
   struct svga_context *svga = svga_context(pipe);
   struct svga_fragment_shader *fs;

   fs = CALLOC_STRUCT(svga_fragment_shader);
   if (!fs)
      return NULL;

   fs->base.tokens = tgsi_dup_tokens(templ->tokens);

   /* Collect basic info that we'll need later:
    */
   tgsi_scan_shader(fs->base.tokens, &fs->base.info);

   fs->base.id = svga->debug.shader_id++;

   fs->generic_inputs = svga_get_generic_inputs_mask(&fs->base.info);

   svga_remap_generics(fs->generic_inputs, fs->generic_remap_table);

   fs->draw_shader = draw_create_fragment_shader(svga->swtnl.draw, templ);

   if (SVGA_DEBUG & DEBUG_TGSI || 0) {
      debug_printf("%s id: %u, inputs: %u, outputs: %u\n",
                   __FUNCTION__, fs->base.id,
                   fs->base.info.num_inputs, fs->base.info.num_outputs);
   }

   return fs;
}


static void
svga_bind_fs_state(struct pipe_context *pipe, void *shader)
{
   struct svga_fragment_shader *fs = (struct svga_fragment_shader *) shader;
   struct svga_context *svga = svga_context(pipe);

   svga->curr.fs = fs;
   svga->dirty |= SVGA_NEW_FS;
}


static void
svga_delete_fs_state(struct pipe_context *pipe, void *shader)
{
   struct svga_context *svga = svga_context(pipe);
   struct svga_fragment_shader *fs = (struct svga_fragment_shader *) shader;
   struct svga_shader_variant *variant, *tmp;
   enum pipe_error ret;

   svga_hwtnl_flush_retry(svga);

   draw_delete_fragment_shader(svga->swtnl.draw, fs->draw_shader);

   for (variant = fs->base.variants; variant; variant = tmp) {
      tmp = variant->next;

      ret = svga_destroy_shader_variant(svga, SVGA3D_SHADERTYPE_PS, variant);
      (void) ret;  /* PIPE_ERROR_ not handled yet */

      /*
       * Remove stale references to this variant to ensure a new variant on the
       * same address will be detected as a change.
       */
      if (variant == svga->state.hw_draw.fs)
         svga->state.hw_draw.fs = NULL;
   }

   FREE((void *)fs->base.tokens);
   FREE(fs);
}


void
svga_init_fs_functions(struct svga_context *svga)
{
   svga->pipe.create_fs_state = svga_create_fs_state;
   svga->pipe.bind_fs_state = svga_bind_fs_state;
   svga->pipe.delete_fs_state = svga_delete_fs_state;
}
@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.2
log
@Merge Mesa 9.2.0
@
text
@d38 1
d92 1
a92 1
   struct svga_shader_result *result, *tmp;
d99 2
a100 2
   for (result = fs->base.results; result; result = tmp) {
      tmp = result->next;
d102 2
a103 11
      ret = SVGA3D_DestroyShader(svga->swc, result->id, SVGA3D_SHADERTYPE_PS);
      if (ret != PIPE_OK) {
         svga_context_flush(svga, NULL);
         ret = SVGA3D_DestroyShader(svga->swc, result->id,
                                    SVGA3D_SHADERTYPE_PS);
         assert(ret == PIPE_OK);
      }

      util_bitmask_clear(svga->fs_bm, result->id);

      svga_destroy_shader_result(result);
d106 1
a106 1
       * Remove stale references to this result to ensure a new result on the
d109 1
a109 1
      if (result == svga->state.hw_draw.fs)
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d31 1
a32 1
#include "svga_screen.h"
a39 4
/***********************************************************************
 * Fragment shaders 
 */

a44 1
   struct svga_screen *svgascreen = svga_screen(pipe->screen);
d58 7
a64 2
   fs->base.use_sm30 = svgascreen->use_ps30;
   
d74 1
d85 3
a87 2
static
void svga_delete_fs_state(struct pipe_context *pipe, void *shader)
d94 1
a94 1
   svga_hwtnl_flush_retry( svga );
d96 3
a98 1
   for (result = fs->base.results; result; result = tmp ) {
d101 2
a102 4
      ret = SVGA3D_DestroyShader(svga->swc, 
                                 result->id,
                                 SVGA3D_SHADERTYPE_PS );
      if(ret != PIPE_OK) {
d104 2
a105 3
         ret = SVGA3D_DestroyShader(svga->swc, 
                                    result->id,
                                    SVGA3D_SHADERTYPE_PS );
d109 1
a109 1
      util_bitmask_clear( svga->fs_bm, result->id );
d111 1
a111 1
      svga_destroy_shader_result( result );
d117 1
a117 1
      if(result == svga->state.hw_draw.fs)
d126 2
a127 1
void svga_init_fs_functions( struct svga_context *svga )
a132 1

@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a30 1
#include "draw/draw_context.h"
d32 1
d40 4
d49 1
d63 2
a64 7

   fs->generic_inputs = svga_get_generic_inputs_mask(&fs->base.info);

   svga_remap_generics(fs->generic_inputs, fs->generic_remap_table);

   fs->draw_shader = draw_create_fragment_shader(svga->swtnl.draw, templ);

a73 1

d84 2
a85 3

static void
svga_delete_fs_state(struct pipe_context *pipe, void *shader)
d92 1
a92 1
   svga_hwtnl_flush_retry(svga);
d94 1
a94 3
   draw_delete_fragment_shader(svga->swtnl.draw, fs->draw_shader);

   for (result = fs->base.results; result; result = tmp) {
d97 4
a100 2
      ret = SVGA3D_DestroyShader(svga->swc, result->id, SVGA3D_SHADERTYPE_PS);
      if (ret != PIPE_OK) {
d102 3
a104 2
         ret = SVGA3D_DestroyShader(svga->swc, result->id,
                                    SVGA3D_SHADERTYPE_PS);
d108 1
a108 1
      util_bitmask_clear(svga->fs_bm, result->id);
d110 1
a110 1
      svga_destroy_shader_result(result);
d116 1
a116 1
      if (result == svga->state.hw_draw.fs)
d125 1
a125 2
void
svga_init_fs_functions(struct svga_context *svga)
d131 1
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a37 1
#include "svga_shader.h"
d91 1
a91 1
   struct svga_shader_variant *variant, *tmp;
d98 2
a99 2
   for (variant = fs->base.variants; variant; variant = tmp) {
      tmp = variant->next;
d101 11
a111 2
      ret = svga_destroy_shader_variant(svga, SVGA3D_SHADERTYPE_PS, variant);
      (void) ret;  /* PIPE_ERROR_ not handled yet */
d114 1
a114 1
       * Remove stale references to this variant to ensure a new variant on the
d117 1
a117 1
      if (variant == svga->state.hw_draw.fs)
@


