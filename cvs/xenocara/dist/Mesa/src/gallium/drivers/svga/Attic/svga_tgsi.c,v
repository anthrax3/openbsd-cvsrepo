head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.01.12;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.01;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.16;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**********************************************************
 * Copyright 2008-2009 VMware, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 **********************************************************/


#include "pipe/p_compiler.h"
#include "pipe/p_shader_tokens.h"
#include "pipe/p_defines.h"
#include "tgsi/tgsi_parse.h"
#include "tgsi/tgsi_dump.h"
#include "tgsi/tgsi_scan.h"
#include "util/u_math.h"
#include "util/u_memory.h"
#include "util/u_bitmask.h"

#include "svgadump/svga_shader_dump.h"

#include "svga_context.h"
#include "svga_tgsi.h"
#include "svga_tgsi_emit.h"
#include "svga_debug.h"

#include "svga_hw_reg.h"
#include "svga3d_shaderdefs.h"


/* Sinkhole used only in error conditions.
 */
static char err_buf[128];

#if 0
static void
svga_destroy_shader_emitter(struct svga_shader_emitter *emit)
{
   if (emit->buf != err_buf)
      FREE(emit->buf);
}
#endif


static boolean
svga_shader_expand(struct svga_shader_emitter *emit)
{
   char *new_buf;
   unsigned newsize = emit->size * 2;

   if (emit->buf != err_buf)
      new_buf = REALLOC(emit->buf, emit->size, newsize);
   else
      new_buf = NULL;

   if (new_buf == NULL) {
      emit->ptr = err_buf;
      emit->buf = err_buf;
      emit->size = sizeof(err_buf);
      return FALSE;
   }

   emit->size = newsize;
   emit->ptr = new_buf + (emit->ptr - emit->buf);
   emit->buf = new_buf;
   return TRUE;
}


static INLINE boolean
reserve(struct svga_shader_emitter *emit, unsigned nr_dwords)
{
   if (emit->ptr - emit->buf + nr_dwords * sizeof(unsigned) >= emit->size) {
      if (!svga_shader_expand(emit)) {
         return FALSE;
      }
   }

   return TRUE;
}


boolean
svga_shader_emit_dword(struct svga_shader_emitter * emit, unsigned dword)
{
   if (!reserve(emit, 1))
      return FALSE;

   *(unsigned *) emit->ptr = dword;
   emit->ptr += sizeof dword;
   return TRUE;
}


boolean
svga_shader_emit_dwords(struct svga_shader_emitter * emit,
                        const unsigned *dwords, unsigned nr)
{
   if (!reserve(emit, nr))
      return FALSE;

   memcpy(emit->ptr, dwords, nr * sizeof *dwords);
   emit->ptr += nr * sizeof *dwords;
   return TRUE;
}


boolean
svga_shader_emit_opcode(struct svga_shader_emitter * emit, unsigned opcode)
{
   SVGA3dShaderInstToken *here;

   if (!reserve(emit, 1))
      return FALSE;

   here = (SVGA3dShaderInstToken *) emit->ptr;
   here->value = opcode;

   if (emit->insn_offset) {
      SVGA3dShaderInstToken *prev =
         (SVGA3dShaderInstToken *) (emit->buf + emit->insn_offset);
      prev->size = (here - prev) - 1;
   }

   emit->insn_offset = emit->ptr - emit->buf;
   emit->ptr += sizeof(unsigned);
   return TRUE;
}


static boolean
svga_shader_emit_header(struct svga_shader_emitter *emit)
{
   SVGA3dShaderVersion header;

   memset(&header, 0, sizeof header);

   switch (emit->unit) {
   case PIPE_SHADER_FRAGMENT:
      header.value = SVGA3D_PS_30;
      break;
   case PIPE_SHADER_VERTEX:
      header.value = SVGA3D_VS_30;
      break;
   }

   return svga_shader_emit_dword(emit, header.value);
}


/**
 * Use the shader info to generate a bitmask indicating which generic
 * inputs are used by the shader.  A set bit indicates that GENERIC[i]
 * is used.
 */
unsigned
svga_get_generic_inputs_mask(const struct tgsi_shader_info *info)
{
   unsigned i, mask = 0x0;

   for (i = 0; i < info->num_inputs; i++) {
      if (info->input_semantic_name[i] == TGSI_SEMANTIC_GENERIC) {
         unsigned j = info->input_semantic_index[i];
         assert(j < sizeof(mask) * 8);
         mask |= 1 << j;
      }
   }

   return mask;
}


/**
 * Given a mask of used generic variables (as returned by the above functions)
 * fill in a table which maps those indexes to small integers.
 * This table is used by the remap_generic_index() function in
 * svga_tgsi_decl_sm30.c
 * Example: if generics_mask = binary(1010) it means that GENERIC[1] and
 * GENERIC[3] are used.  The remap_table will contain:
 *   table[1] = 0;
 *   table[3] = 1;
 * The remaining table entries will be filled in with the next unused
 * generic index (in this example, 2).
 */
void
svga_remap_generics(unsigned generics_mask,
                    int8_t remap_table[MAX_GENERIC_VARYING])
{
   /* Note texcoord[0] is reserved so start at 1 */
   unsigned count = 1, i;

   for (i = 0; i < MAX_GENERIC_VARYING; i++) {
      remap_table[i] = -1;
   }

   /* for each bit set in generic_mask */
   while (generics_mask) {
      unsigned index = ffs(generics_mask) - 1;
      remap_table[index] = count++;
      generics_mask &= ~(1 << index);
   }
}


/**
 * Use the generic remap table to map a TGSI generic varying variable
 * index to a small integer.  If the remapping table doesn't have a
 * valid value for the given index (the table entry is -1) it means
 * the fragment shader doesn't use that VS output.  Just allocate
 * the next free value in that case.  Alternately, we could cull
 * VS instructions that write to register, or replace the register
 * with a dummy temp register.
 * XXX TODO: we should do one of the later as it would save precious
 * texcoord registers.
 */
int
svga_remap_generic_index(int8_t remap_table[MAX_GENERIC_VARYING],
                         int generic_index)
{
   assert(generic_index < MAX_GENERIC_VARYING);

   if (generic_index >= MAX_GENERIC_VARYING) {
      /* just don't return a random/garbage value */
      generic_index = MAX_GENERIC_VARYING - 1;
   }

   if (remap_table[generic_index] == -1) {
      /* This is a VS output that has no matching PS input.  Find a
       * free index.
       */
      int i, max = 0;
      for (i = 0; i < MAX_GENERIC_VARYING; i++) {
         max = MAX2(max, remap_table[i]);
      }
      remap_table[generic_index] = max + 1;
   }

   return remap_table[generic_index];
}


/**
 * Parse TGSI shader and translate to SVGA/DX9 serialized
 * representation.
 *
 * In this function SVGA shader is emitted to an in-memory buffer that
 * can be dynamically grown.  Once we've finished and know how large
 * it is, it will be copied to a hardware buffer for upload.
 */
static struct svga_shader_variant *
svga_tgsi_translate(const struct svga_shader *shader,
                    const struct svga_compile_key *key, unsigned unit)
{
   struct svga_shader_variant *variant = NULL;
   struct svga_shader_emitter emit;

   memset(&emit, 0, sizeof(emit));

   emit.size = 1024;
   emit.buf = MALLOC(emit.size);
   if (emit.buf == NULL) {
      goto fail;
   }

   emit.ptr = emit.buf;
   emit.unit = unit;
   emit.key = *key;

   tgsi_scan_shader(shader->tokens, &emit.info);

   emit.imm_start = emit.info.file_max[TGSI_FILE_CONSTANT] + 1;

   if (unit == PIPE_SHADER_FRAGMENT)
      emit.imm_start += key->fkey.num_unnormalized_coords;

   if (unit == PIPE_SHADER_VERTEX) {
      emit.imm_start += key->vkey.need_prescale ? 2 : 0;
   }

   emit.nr_hw_float_const =
      (emit.imm_start + emit.info.file_max[TGSI_FILE_IMMEDIATE] + 1);

   emit.nr_hw_temp = emit.info.file_max[TGSI_FILE_TEMPORARY] + 1;

   if (emit.nr_hw_temp >= SVGA3D_TEMPREG_MAX) {
      debug_printf("svga: too many temporary registers (%u)\n",
                   emit.nr_hw_temp);
      goto fail;
   }

   emit.in_main_func = TRUE;

   if (!svga_shader_emit_header(&emit)) {
      debug_printf("svga: emit header failed\n");
      goto fail;
   }

   if (!svga_shader_emit_instructions(&emit, shader->tokens)) {
      debug_printf("svga: emit instructions failed\n");
      goto fail;
   }

   variant = CALLOC_STRUCT(svga_shader_variant);
   if (variant == NULL)
      goto fail;

   variant->shader = shader;
   variant->tokens = (const unsigned *) emit.buf;
   variant->nr_tokens = (emit.ptr - emit.buf) / sizeof(unsigned);
   memcpy(&variant->key, key, sizeof(*key));
   variant->id = UTIL_BITMASK_INVALID_INDEX;

   if (SVGA_DEBUG & DEBUG_TGSI) {
      debug_printf("#####################################\n");
      debug_printf("Shader %u below\n", shader->id);
      tgsi_dump(shader->tokens, 0);
      if (SVGA_DEBUG & DEBUG_TGSI) {
         debug_printf("Shader %u compiled below\n", shader->id);
         svga_shader_dump(variant->tokens, variant->nr_tokens, FALSE);
      }
      debug_printf("#####################################\n");
   }

   return variant;

 fail:
   FREE(variant);
   FREE(emit.buf);
   return NULL;
}


struct svga_shader_variant *
svga_translate_fragment_program(const struct svga_fragment_shader *fs,
                                const struct svga_fs_compile_key *fkey)
{
   struct svga_compile_key key;

   memset(&key, 0, sizeof(key));

   memcpy(&key.fkey, fkey, sizeof *fkey);

   memcpy(key.generic_remap_table, fs->generic_remap_table,
          sizeof(fs->generic_remap_table));

   return svga_tgsi_translate(&fs->base, &key, PIPE_SHADER_FRAGMENT);
}


struct svga_shader_variant *
svga_translate_vertex_program(const struct svga_vertex_shader *vs,
                              const struct svga_vs_compile_key *vkey)
{
   struct svga_compile_key key;

   memset(&key, 0, sizeof(key));

   memcpy(&key.vkey, vkey, sizeof *vkey);

   /* Note: we could alternately store the remap table in the vkey but
    * that would make it larger.  We just regenerate it here instead.
    */
   svga_remap_generics(vkey->fs_generic_inputs, key.generic_remap_table);

   return svga_tgsi_translate(&vs->base, &key, PIPE_SHADER_VERTEX);
}
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d267 1
a267 1
static struct svga_shader_result *
d271 1
a271 1
   struct svga_shader_result *result = NULL;
d320 2
a321 2
   result = CALLOC_STRUCT(svga_shader_result);
   if (result == NULL)
d324 5
a328 5
   result->shader = shader;
   result->tokens = (const unsigned *) emit.buf;
   result->nr_tokens = (emit.ptr - emit.buf) / sizeof(unsigned);
   memcpy(&result->key, key, sizeof(*key));
   result->id = UTIL_BITMASK_INVALID_INDEX;
d336 1
a336 1
         svga_shader_dump(result->tokens, result->nr_tokens, FALSE);
d341 1
a341 1
   return result;
d344 1
a344 1
   FREE(result);
d350 1
a350 1
struct svga_shader_result *
d367 1
a367 1
struct svga_shader_result *
a382 8
}


void
svga_destroy_shader_result(struct svga_shader_result *result)
{
   FREE((unsigned *) result->tokens);
   FREE(result);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d33 1
d53 2
a54 1
static void svga_destroy_shader_emitter( struct svga_shader_emitter *emit )
d62 2
a63 1
static boolean svga_shader_expand( struct svga_shader_emitter *emit )
d68 1
a68 1
   if(emit->buf != err_buf)
d84 1
a84 1
}   
d86 3
a88 2
static INLINE boolean reserve(  struct svga_shader_emitter *emit,
                                unsigned nr_dwords )
d91 1
a91 1
      if (!svga_shader_expand( emit ))
d93 1
d99 3
a101 2
boolean svga_shader_emit_dword( struct svga_shader_emitter *emit,
                                unsigned dword )
d106 1
a106 1
   *(unsigned *)emit->ptr = dword;
d111 4
a114 3
boolean svga_shader_emit_dwords( struct svga_shader_emitter *emit,
                                 const unsigned *dwords,
                                 unsigned nr )
d119 1
a119 1
   memcpy( emit->ptr, dwords, nr * sizeof *dwords );
d124 3
a126 2
boolean svga_shader_emit_opcode( struct svga_shader_emitter *emit,
                                 unsigned opcode )
d133 1
a133 1
   here = (SVGA3dShaderInstToken *)emit->ptr;
d137 2
a138 2
      SVGA3dShaderInstToken *prev = (SVGA3dShaderInstToken *)(emit->buf + 
                                                              emit->insn_offset);
d141 1
a141 1
   
a146 2
#define SVGA3D_PS_2X (SVGA3D_PS_20 | 1)
#define SVGA3D_VS_2X (SVGA3D_VS_20 | 1)
d148 2
a149 1
static boolean svga_shader_emit_header( struct svga_shader_emitter *emit )
d153 1
a153 1
   memset( &header, 0, sizeof header );
d157 1
a157 1
      header.value = emit->use_sm30 ? SVGA3D_PS_30 : SVGA3D_PS_2X;
d160 1
a160 1
      header.value = emit->use_sm30 ? SVGA3D_VS_30 : SVGA3D_VS_2X;
d163 24
a186 2
 
   return svga_shader_emit_dword( emit, header.value );
d190 18
d209 11
d222 40
a261 2
/* Parse TGSI shader and translate to SVGA/DX9 serialized
 * representation.  
d268 2
a269 3
svga_tgsi_translate( const struct svga_shader *shader,
                     union svga_compile_key key,
                     unsigned unit )
a272 1
   int ret = 0;
a275 1
   emit.use_sm30 = shader->use_sm30;
a278 1
      ret = PIPE_ERROR_OUT_OF_MEMORY;
d284 1
a284 1
   emit.key = key;
d286 1
a286 1
   tgsi_scan_shader( shader->tokens, &emit.info);
d289 1
a289 1
   
d291 1
a291 1
      emit.imm_start += key.fkey.num_unnormalized_coords;
d294 1
a294 2
      emit.imm_start += key.vkey.need_prescale ? 2 : 0;
      emit.imm_start += key.vkey.num_zero_stride_vertex_elements;
d297 2
a298 1
   emit.nr_hw_float_const = (emit.imm_start + emit.info.file_max[TGSI_FILE_IMMEDIATE] + 1);
d301 7
d310 2
a311 1
   if (!svga_shader_emit_header( &emit ))
d313 1
d315 2
a316 1
   if (!svga_shader_emit_instructions( &emit, shader->tokens ))
d318 2
a319 1
   
d325 1
a325 1
   result->tokens = (const unsigned *)emit.buf;
d327 1
a327 1
   memcpy(&result->key, &key, sizeof key);
d330 4
a333 5
   if (SVGA_DEBUG & DEBUG_TGSI) 
   {
      debug_printf( "#####################################\n" );
      debug_printf( "Shader %u below\n", shader->id );
      tgsi_dump( shader->tokens, 0 );
d335 2
a336 4
         debug_printf( "Shader %u compiled below\n", shader->id );
         svga_shader_dump( result->tokens,
                           result->nr_tokens ,
                           FALSE );
d338 1
a338 1
      debug_printf( "#####################################\n" );
d343 1
a343 1
fail:
d350 5
d356 1
a357 5
struct svga_shader_result *
svga_translate_fragment_program( const struct svga_fragment_shader *fs,
                                 const struct svga_fs_compile_key *fkey )
{
   union svga_compile_key key;
d360 4
a363 3
   return svga_tgsi_translate( &fs->base, 
                               key,
                               PIPE_SHADER_FRAGMENT );
d366 1
d368 2
a369 2
svga_translate_vertex_program( const struct svga_vertex_shader *vs,
                               const struct svga_vs_compile_key *vkey )
d371 4
a374 1
   union svga_compile_key key;
d377 6
a382 3
   return svga_tgsi_translate( &vs->base, 
                               key,
                               PIPE_SHADER_VERTEX );
d386 2
a387 1
void svga_destroy_shader_result( struct svga_shader_result *result )
d389 1
a389 1
   FREE((unsigned *)result->tokens);
a391 1

@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d206 1
a206 1
   emit.nr_hw_const = (emit.imm_start + emit.info.file_max[TGSI_FILE_IMMEDIATE] + 1);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d206 1
a206 1
   emit.nr_hw_float_const = (emit.imm_start + emit.info.file_max[TGSI_FILE_IMMEDIATE] + 1);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a32 1
#include "util/u_math.h"
d52 1
a52 2
static void
svga_destroy_shader_emitter(struct svga_shader_emitter *emit)
d60 1
a60 2
static boolean
svga_shader_expand(struct svga_shader_emitter *emit)
d65 1
a65 1
   if (emit->buf != err_buf)
d81 1
a81 1
}
d83 2
a84 3

static INLINE boolean
reserve(struct svga_shader_emitter *emit, unsigned nr_dwords)
d87 1
a87 1
      if (!svga_shader_expand(emit)) {
a88 1
      }
d94 2
a95 3

boolean
svga_shader_emit_dword(struct svga_shader_emitter * emit, unsigned dword)
d100 1
a100 1
   *(unsigned *) emit->ptr = dword;
d105 3
a107 4

boolean
svga_shader_emit_dwords(struct svga_shader_emitter * emit,
                        const unsigned *dwords, unsigned nr)
d112 1
a112 1
   memcpy(emit->ptr, dwords, nr * sizeof *dwords);
d117 2
a118 3

boolean
svga_shader_emit_opcode(struct svga_shader_emitter * emit, unsigned opcode)
d125 1
a125 1
   here = (SVGA3dShaderInstToken *) emit->ptr;
d129 2
a130 2
      SVGA3dShaderInstToken *prev =
         (SVGA3dShaderInstToken *) (emit->buf + emit->insn_offset);
d133 1
a133 1

d139 2
d142 1
a142 2
static boolean
svga_shader_emit_header(struct svga_shader_emitter *emit)
d146 1
a146 1
   memset(&header, 0, sizeof header);
d150 1
a150 1
      header.value = SVGA3D_PS_30;
d153 1
a153 1
      header.value = SVGA3D_VS_30;
d156 2
a157 24

   return svga_shader_emit_dword(emit, header.value);
}


/**
 * Use the shader info to generate a bitmask indicating which generic
 * inputs are used by the shader.  A set bit indicates that GENERIC[i]
 * is used.
 */
unsigned
svga_get_generic_inputs_mask(const struct tgsi_shader_info *info)
{
   unsigned i, mask = 0x0;

   for (i = 0; i < info->num_inputs; i++) {
      if (info->input_semantic_name[i] == TGSI_SEMANTIC_GENERIC) {
         unsigned j = info->input_semantic_index[i];
         assert(j < sizeof(mask) * 8);
         mask |= 1 << j;
      }
   }

   return mask;
a160 18
/**
 * Given a mask of used generic variables (as returned by the above functions)
 * fill in a table which maps those indexes to small integers.
 * This table is used by the remap_generic_index() function in
 * svga_tgsi_decl_sm30.c
 * Example: if generics_mask = binary(1010) it means that GENERIC[1] and
 * GENERIC[3] are used.  The remap_table will contain:
 *   table[1] = 0;
 *   table[3] = 1;
 * The remaining table entries will be filled in with the next unused
 * generic index (in this example, 2).
 */
void
svga_remap_generics(unsigned generics_mask,
                    int8_t remap_table[MAX_GENERIC_VARYING])
{
   /* Note texcoord[0] is reserved so start at 1 */
   unsigned count = 1, i;
a161 11
   for (i = 0; i < MAX_GENERIC_VARYING; i++) {
      remap_table[i] = -1;
   }

   /* for each bit set in generic_mask */
   while (generics_mask) {
      unsigned index = ffs(generics_mask) - 1;
      remap_table[index] = count++;
      generics_mask &= ~(1 << index);
   }
}
d164 2
a165 40
/**
 * Use the generic remap table to map a TGSI generic varying variable
 * index to a small integer.  If the remapping table doesn't have a
 * valid value for the given index (the table entry is -1) it means
 * the fragment shader doesn't use that VS output.  Just allocate
 * the next free value in that case.  Alternately, we could cull
 * VS instructions that write to register, or replace the register
 * with a dummy temp register.
 * XXX TODO: we should do one of the later as it would save precious
 * texcoord registers.
 */
int
svga_remap_generic_index(int8_t remap_table[MAX_GENERIC_VARYING],
                         int generic_index)
{
   assert(generic_index < MAX_GENERIC_VARYING);

   if (generic_index >= MAX_GENERIC_VARYING) {
      /* just don't return a random/garbage value */
      generic_index = MAX_GENERIC_VARYING - 1;
   }

   if (remap_table[generic_index] == -1) {
      /* This is a VS output that has no matching PS input.  Find a
       * free index.
       */
      int i, max = 0;
      for (i = 0; i < MAX_GENERIC_VARYING; i++) {
         max = MAX2(max, remap_table[i]);
      }
      remap_table[generic_index] = max + 1;
   }

   return remap_table[generic_index];
}


/**
 * Parse TGSI shader and translate to SVGA/DX9 serialized
 * representation.
d172 3
a174 2
svga_tgsi_translate(const struct svga_shader *shader,
                    const struct svga_compile_key *key, unsigned unit)
d178 1
d182 1
d186 1
d192 1
a192 1
   emit.key = *key;
d194 1
a194 1
   tgsi_scan_shader(shader->tokens, &emit.info);
d197 1
a197 1

d199 1
a199 1
      emit.imm_start += key->fkey.num_unnormalized_coords;
d202 2
a203 1
      emit.imm_start += key->vkey.need_prescale ? 2 : 0;
d206 1
a206 2
   emit.nr_hw_float_const =
      (emit.imm_start + emit.info.file_max[TGSI_FILE_IMMEDIATE] + 1);
a208 7

   if (emit.nr_hw_temp >= SVGA3D_TEMPREG_MAX) {
      debug_printf("svga: too many temporary registers (%u)\n",
                   emit.nr_hw_temp);
      goto fail;
   }

d211 1
a211 2
   if (!svga_shader_emit_header(&emit)) {
      debug_printf("svga: emit header failed\n");
a212 1
   }
d214 1
a214 2
   if (!svga_shader_emit_instructions(&emit, shader->tokens)) {
      debug_printf("svga: emit instructions failed\n");
d216 1
a216 2
   }

d222 1
a222 1
   result->tokens = (const unsigned *) emit.buf;
d224 1
a224 1
   memcpy(&result->key, key, sizeof(*key));
d227 5
a231 4
   if (SVGA_DEBUG & DEBUG_TGSI) {
      debug_printf("#####################################\n");
      debug_printf("Shader %u below\n", shader->id);
      tgsi_dump(shader->tokens, 0);
d233 4
a236 2
         debug_printf("Shader %u compiled below\n", shader->id);
         svga_shader_dump(result->tokens, result->nr_tokens, FALSE);
d238 1
a238 1
      debug_printf("#####################################\n");
d243 1
a243 1
 fail:
d250 2
d253 2
a254 2
svga_translate_fragment_program(const struct svga_fragment_shader *fs,
                                const struct svga_fs_compile_key *fkey)
d256 1
a256 4
   struct svga_compile_key key;

   memset(&key, 0, sizeof(key));

d259 3
a261 4
   memcpy(key.generic_remap_table, fs->generic_remap_table,
          sizeof(fs->generic_remap_table));

   return svga_tgsi_translate(&fs->base, &key, PIPE_SHADER_FRAGMENT);
a263 1

d265 2
a266 2
svga_translate_vertex_program(const struct svga_vertex_shader *vs,
                              const struct svga_vs_compile_key *vkey)
d268 1
a268 4
   struct svga_compile_key key;

   memset(&key, 0, sizeof(key));

d271 3
a273 6
   /* Note: we could alternately store the remap table in the vkey but
    * that would make it larger.  We just regenerate it here instead.
    */
   svga_remap_generics(vkey->fs_generic_inputs, key.generic_remap_table);

   return svga_tgsi_translate(&vs->base, &key, PIPE_SHADER_VERTEX);
d277 1
a277 2
void
svga_destroy_shader_result(struct svga_shader_result *result)
d279 1
a279 1
   FREE((unsigned *) result->tokens);
d282 1
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d267 1
a267 1
static struct svga_shader_variant *
d271 1
a271 1
   struct svga_shader_variant *variant = NULL;
d320 2
a321 2
   variant = CALLOC_STRUCT(svga_shader_variant);
   if (variant == NULL)
d324 5
a328 5
   variant->shader = shader;
   variant->tokens = (const unsigned *) emit.buf;
   variant->nr_tokens = (emit.ptr - emit.buf) / sizeof(unsigned);
   memcpy(&variant->key, key, sizeof(*key));
   variant->id = UTIL_BITMASK_INVALID_INDEX;
d336 1
a336 1
         svga_shader_dump(variant->tokens, variant->nr_tokens, FALSE);
d341 1
a341 1
   return variant;
d344 1
a344 1
   FREE(variant);
d350 1
a350 1
struct svga_shader_variant *
d367 1
a367 1
struct svga_shader_variant *
d383 8
@


