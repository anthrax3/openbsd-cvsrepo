head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.11;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.00;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.16;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.08.54;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.46.09;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**********************************************************
 * Copyright 2008-2009 VMware, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 **********************************************************/

#include "util/u_inlines.h"
#include "pipe/p_defines.h"
#include "util/u_math.h"
#include "util/u_memory.h"
#include "util/u_bitmask.h"
#include "tgsi/tgsi_ureg.h"

#include "svga_context.h"
#include "svga_state.h"
#include "svga_cmd.h"
#include "svga_shader.h"
#include "svga_resource_texture.h"
#include "svga_tgsi.h"

#include "svga_hw_reg.h"



static INLINE int
compare_fs_keys(const struct svga_fs_compile_key *a,
                const struct svga_fs_compile_key *b)
{
   unsigned keysize_a = svga_fs_key_size( a );
   unsigned keysize_b = svga_fs_key_size( b );

   if (keysize_a != keysize_b) {
      return (int)(keysize_a - keysize_b);
   }
   return memcmp( a, b, keysize_a );
}


/** Search for a fragment shader variant */
static struct svga_shader_variant *
search_fs_key(const struct svga_fragment_shader *fs,
              const struct svga_fs_compile_key *key)
{
   struct svga_shader_variant *variant = fs->base.variants;

   assert(key);

   for ( ; variant; variant = variant->next) {
      if (compare_fs_keys( key, &variant->key.fkey ) == 0)
         return variant;
   }
   
   return NULL;
}


/**
 * If we fail to compile a fragment shader (because it uses too many
 * registers, for example) we'll use a dummy/fallback shader that
 * simply emits a constant color (red for debug, black for release).
 * We hit this with the Unigine/Heaven demo when Shaders = High.
 * With black, the demo still looks good.
 */
static const struct tgsi_token *
get_dummy_fragment_shader(void)
{
#ifdef DEBUG
   static const float color[4] = { 1.0, 0.0, 0.0, 0.0 }; /* red */
#else
   static const float color[4] = { 0.0, 0.0, 0.0, 0.0 }; /* black */
#endif
   struct ureg_program *ureg;
   const struct tgsi_token *tokens;
   struct ureg_src src;
   struct ureg_dst dst;
   unsigned num_tokens;

   ureg = ureg_create(TGSI_PROCESSOR_FRAGMENT);
   if (!ureg)
      return NULL;

   dst = ureg_DECL_output(ureg, TGSI_SEMANTIC_COLOR, 0);
   src = ureg_DECL_immediate(ureg, color, 4);
   ureg_MOV(ureg, dst, src);
   ureg_END(ureg);

   tokens = ureg_get_tokens(ureg, &num_tokens);

   ureg_destroy(ureg);

   return tokens;
}


/**
 * Replace the given shader's instruction with a simple constant-color
 * shader.  We use this when normal shader translation fails.
 */
static struct svga_shader_variant *
get_compiled_dummy_shader(struct svga_fragment_shader *fs,
                          const struct svga_fs_compile_key *key)
{
   const struct tgsi_token *dummy = get_dummy_fragment_shader();
   struct svga_shader_variant *variant;

   if (!dummy) {
      return NULL;
   }

   FREE((void *) fs->base.tokens);
   fs->base.tokens = dummy;

   variant = svga_translate_fragment_program(fs, key);
   return variant;
}


/**
 * Translate TGSI shader into an svga shader variant.
 */
static enum pipe_error
compile_fs(struct svga_context *svga,
           struct svga_fragment_shader *fs,
           const struct svga_fs_compile_key *key,
           struct svga_shader_variant **out_variant)
{
   struct svga_shader_variant *variant;
   enum pipe_error ret = PIPE_ERROR;

   variant = svga_translate_fragment_program( fs, key );
   if (variant == NULL) {
      debug_printf("Failed to compile fragment shader,"
                   " using dummy shader instead.\n");
      variant = get_compiled_dummy_shader(fs, key);
      if (!variant) {
         ret = PIPE_ERROR;
         goto fail;
      }
   }

   if (variant->nr_tokens * sizeof(variant->tokens[0])
       + sizeof(SVGA3dCmdDefineShader) + sizeof(SVGA3dCmdHeader)
       >= SVGA_CB_MAX_COMMAND_SIZE) {
      /* too big, use dummy shader */
      debug_printf("Shader too large (%lu bytes),"
                   " using dummy shader instead.\n",
                   (unsigned long ) variant->nr_tokens * sizeof(variant->tokens[0]));
      variant = get_compiled_dummy_shader(fs, key);
      if (!variant) {
         ret = PIPE_ERROR;
         goto fail;
      }
   }

   ret = svga_define_shader(svga, SVGA3D_SHADERTYPE_PS, variant);
   if (ret != PIPE_OK)
      goto fail;

   *out_variant = variant;

   /* insert variants at head of linked list */
   variant->next = fs->base.variants;
   fs->base.variants = variant;

   return PIPE_OK;

fail:
   if (variant) {
      svga_destroy_shader_variant(svga, SVGA3D_SHADERTYPE_PS, variant);
   }
   return ret;
}


/* SVGA_NEW_TEXTURE_BINDING
 * SVGA_NEW_RAST
 * SVGA_NEW_NEED_SWTNL
 * SVGA_NEW_SAMPLER
 */
static enum pipe_error
make_fs_key(const struct svga_context *svga,
            struct svga_fragment_shader *fs,
            struct svga_fs_compile_key *key)
{
   unsigned i;
   int idx = 0;

   memset(key, 0, sizeof *key);

   /* Only need fragment shader fixup for twoside lighting if doing
    * hwtnl.  Otherwise the draw module does the whole job for us.
    *
    * SVGA_NEW_SWTNL
    */
   if (!svga->state.sw.need_swtnl) {
      /* SVGA_NEW_RAST
       */
      key->light_twoside = svga->curr.rast->templ.light_twoside;
      key->front_ccw = svga->curr.rast->templ.front_ccw;
   }

   /* The blend workaround for simulating logicop xor behaviour
    * requires that the incoming fragment color be white.  This change
    * achieves that by creating a variant of the current fragment
    * shader that overrides all output colors with 1,1,1,1
    *   
    * This will work for most shaders, including those containing
    * TEXKIL and/or depth-write.  However, it will break on the
    * combination of xor-logicop plus alphatest.
    *
    * Ultimately, we could implement alphatest in the shader using
    * texkil prior to overriding the outgoing fragment color.
    *   
    * SVGA_NEW_BLEND
    */
   if (svga->curr.blend->need_white_fragments) {
      key->white_fragments = 1;
   }

#ifdef DEBUG
   /*
    * We expect a consistent set of samplers and sampler views.
    * Do some debug checks/warnings here.
    */
   {
      static boolean warned = FALSE;
      unsigned i, n = MAX2(svga->curr.num_sampler_views,
                           svga->curr.num_samplers);
      /* Only warn once to prevent too much debug output */
      if (!warned) {
         if (svga->curr.num_sampler_views != svga->curr.num_samplers) {
            debug_printf("svga: mismatched number of sampler views (%u) "
                         "vs. samplers (%u)\n",
                         svga->curr.num_sampler_views,
                         svga->curr.num_samplers);
         }
         for (i = 0; i < n; i++) {
            if ((svga->curr.sampler_views[i] == NULL) !=
                (svga->curr.sampler[i] == NULL))
               debug_printf("sampler_view[%u] = %p but sampler[%u] = %p\n",
                            i, svga->curr.sampler_views[i],
                            i, svga->curr.sampler[i]);
         }
         warned = TRUE;
      }
   }
#endif

   /* XXX: want to limit this to the textures that the shader actually
    * refers to.
    *
    * SVGA_NEW_TEXTURE_BINDING | SVGA_NEW_SAMPLER
    */
   for (i = 0; i < svga->curr.num_sampler_views; i++) {
      if (svga->curr.sampler_views[i] && svga->curr.sampler[i]) {
         assert(svga->curr.sampler_views[i]->texture);
         key->tex[i].texture_target = svga->curr.sampler_views[i]->texture->target;
         if (!svga->curr.sampler[i]->normalized_coords) {
            key->tex[i].width_height_idx = idx++;
            key->tex[i].unnormalized = TRUE;
            ++key->num_unnormalized_coords;
         }

         key->tex[i].swizzle_r = svga->curr.sampler_views[i]->swizzle_r;
         key->tex[i].swizzle_g = svga->curr.sampler_views[i]->swizzle_g;
         key->tex[i].swizzle_b = svga->curr.sampler_views[i]->swizzle_b;
         key->tex[i].swizzle_a = svga->curr.sampler_views[i]->swizzle_a;
      }
   }
   key->num_textures = svga->curr.num_sampler_views;

   idx = 0;
   for (i = 0; i < svga->curr.num_samplers; ++i) {
      if (svga->curr.sampler_views[i] && svga->curr.sampler[i]) {
         struct pipe_resource *tex = svga->curr.sampler_views[i]->texture;
         struct svga_texture *stex = svga_texture(tex);
         SVGA3dSurfaceFormat format = stex->key.format;

         if (format == SVGA3D_Z_D16 ||
             format == SVGA3D_Z_D24X8 ||
             format == SVGA3D_Z_D24S8) {
            /* If we're sampling from a SVGA3D_Z_D16, SVGA3D_Z_D24X8,
             * or SVGA3D_Z_D24S8 surface, we'll automatically get
             * shadow comparison.  But we only get LEQUAL mode.
             * Set TEX_COMPARE_NONE here so we don't emit the extra FS
             * code for shadow comparison.
             */
            key->tex[i].compare_mode = PIPE_TEX_COMPARE_NONE;
            key->tex[i].compare_func = PIPE_FUNC_NEVER;
            /* These depth formats _only_ support comparison mode and
             * not ordinary sampling so warn if the later is expected.
             */
            if (svga->curr.sampler[i]->compare_mode !=
                PIPE_TEX_COMPARE_R_TO_TEXTURE) {
               debug_warn_once("Unsupported shadow compare mode");
            }                   
            /* The only supported comparison mode is LEQUAL */
            if (svga->curr.sampler[i]->compare_func != PIPE_FUNC_LEQUAL) {
               debug_warn_once("Unsupported shadow compare function");
            }
         }
         else {
            /* For other texture formats, just use the compare func/mode
             * as-is.  Should be no-ops for color textures.  For depth
             * textures, we do not get automatic depth compare.  We have
             * to do it ourselves in the shader.  And we don't get PCF.
             */
            key->tex[i].compare_mode = svga->curr.sampler[i]->compare_mode;
            key->tex[i].compare_func = svga->curr.sampler[i]->compare_func;
         }
      }
   }

   /* sprite coord gen state */
   for (i = 0; i < svga->curr.num_samplers; ++i) {
      key->tex[i].sprite_texgen =
         svga->curr.rast->templ.sprite_coord_enable & (1 << i);
   }

   key->sprite_origin_lower_left = (svga->curr.rast->templ.sprite_coord_mode
                                    == PIPE_SPRITE_COORD_LOWER_LEFT);

   /* SVGA_NEW_FRAME_BUFFER */
   if (fs->base.info.color0_writes_all_cbufs) {
      /* Replicate color0 output to N colorbuffers */
      key->write_color0_to_n_cbufs = svga->curr.framebuffer.nr_cbufs;
   }

   return PIPE_OK;
}


/**
 * svga_reemit_fs_bindings - Reemit the fragment shader bindings
 */
enum pipe_error
svga_reemit_fs_bindings(struct svga_context *svga)
{
   enum pipe_error ret;

   assert(svga->rebind.fs);
   assert(svga_have_gb_objects(svga));

   if (!svga->state.hw_draw.fs)
      return PIPE_OK;

   ret = SVGA3D_SetGBShader(svga->swc, SVGA3D_SHADERTYPE_PS,
                            svga->state.hw_draw.fs->gb_shader);
   if (ret != PIPE_OK)
      return ret;

   svga->rebind.fs = FALSE;
   return PIPE_OK;
}



static enum pipe_error
emit_hw_fs(struct svga_context *svga, unsigned dirty)
{
   struct svga_shader_variant *variant = NULL;
   enum pipe_error ret = PIPE_OK;
   struct svga_fragment_shader *fs = svga->curr.fs;
   struct svga_fs_compile_key key;

   /* SVGA_NEW_BLEND
    * SVGA_NEW_TEXTURE_BINDING
    * SVGA_NEW_RAST
    * SVGA_NEW_NEED_SWTNL
    * SVGA_NEW_SAMPLER
    * SVGA_NEW_FRAME_BUFFER
    */
   ret = make_fs_key( svga, fs, &key );
   if (ret != PIPE_OK)
      return ret;

   variant = search_fs_key( fs, &key );
   if (!variant) {
      ret = compile_fs( svga, fs, &key, &variant );
      if (ret != PIPE_OK)
         return ret;
   }

   assert(variant);

   if (variant != svga->state.hw_draw.fs) {
      if (svga_have_gb_objects(svga)) {
         /*
          * Bind is necessary here only because pipebuffer_fenced may move
          * the shader contents around....
          */
         ret = SVGA3D_BindGBShader(svga->swc, variant->gb_shader);
         if (ret != PIPE_OK)
            return ret;

         ret = SVGA3D_SetGBShader(svga->swc, SVGA3D_SHADERTYPE_PS,
                                  variant->gb_shader);
         if (ret != PIPE_OK)
            return ret;

         svga->rebind.fs = FALSE;
      }
      else {
         ret = SVGA3D_SetShader(svga->swc, SVGA3D_SHADERTYPE_PS, variant->id);
         if (ret != PIPE_OK)
            return ret;
      }

      svga->dirty |= SVGA_NEW_FS_VARIANT;
      svga->state.hw_draw.fs = variant;      
   }

   return PIPE_OK;
}

struct svga_tracked_state svga_hw_fs = 
{
   "fragment shader (hwtnl)",
   (SVGA_NEW_FS |
    SVGA_NEW_TEXTURE_BINDING |
    SVGA_NEW_NEED_SWTNL |
    SVGA_NEW_RAST |
    SVGA_NEW_SAMPLER |
    SVGA_NEW_FRAME_BUFFER |
    SVGA_NEW_BLEND),
   emit_hw_fs
};



@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d160 3
a162 1
   if (svga_shader_too_large(svga, variant)) {
d343 1
a343 1
   if (fs->base.info.properties[TGSI_PROPERTY_FS_COLOR0_WRITES_ALL_CBUFS]) {
d407 8
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d160 1
a160 3
   if (variant->nr_tokens * sizeof(variant->tokens[0])
       + sizeof(SVGA3dCmdDefineShader) + sizeof(SVGA3dCmdHeader)
       >= SVGA_CB_MAX_COMMAND_SIZE) {
d341 1
a341 1
   if (fs->base.info.color0_writes_all_cbufs) {
a404 8
         /*
          * Bind is necessary here only because pipebuffer_fenced may move
          * the shader contents around....
          */
         ret = SVGA3D_BindGBShader(svga->swc, variant->gb_shader);
         if (ret != PIPE_OK)
            return ret;

@


1.4
log
@Merge Mesa 9.2.0
@
text
@d36 2
d44 3
a46 2
static INLINE int compare_fs_keys( const struct svga_fs_compile_key *a,
                                   const struct svga_fs_compile_key *b )
d58 4
a61 2
static struct svga_shader_result *search_fs_key( struct svga_fragment_shader *fs,
                                                 const struct svga_fs_compile_key *key )
d63 1
a63 1
   struct svga_shader_result *result = fs->base.results;
d67 3
a69 3
   for ( ; result; result = result->next) {
      if (compare_fs_keys( key, &result->key.fkey ) == 0)
         return result;
d79 3
a81 1
 * simply emits a constant color.
d86 5
a90 1
   static const float red[4] = { 1.0, 0.0, 0.0, 0.0 };
d102 1
a102 1
   src = ureg_DECL_immediate(ureg, red, 4);
d114 31
a144 4
static enum pipe_error compile_fs( struct svga_context *svga,
                                   struct svga_fragment_shader *fs,
                                   const struct svga_fs_compile_key *key,
                                   struct svga_shader_result **out_result )
d146 1
a146 1
   struct svga_shader_result *result;
d149 7
a155 6
   result = svga_translate_fragment_program( fs, key );
   if (result == NULL) {
      /* some problem during translation, try the dummy shader */
      const struct tgsi_token *dummy = get_dummy_fragment_shader();
      if (!dummy) {
         ret = PIPE_ERROR_OUT_OF_MEMORY;
d158 11
a168 5
      debug_printf("Failed to compile fragment shader, using dummy shader instead.\n");
      FREE((void *) fs->base.tokens);
      fs->base.tokens = dummy;
      result = svga_translate_fragment_program(fs, key);
      if (result == NULL) {
d174 2
a175 3
   result->id = util_bitmask_add(svga->fs_bm);
   if(result->id == UTIL_BITMASK_INVALID_INDEX) {
      ret = PIPE_ERROR_OUT_OF_MEMORY;
a176 1
   }
d178 5
a182 7
   ret = SVGA3D_DefineShader(svga->swc, 
                             result->id,
                             SVGA3D_SHADERTYPE_PS,
                             result->tokens, 
                             result->nr_tokens * sizeof result->tokens[0]);
   if (ret != PIPE_OK)
      goto fail;
a183 3
   *out_result = result;
   result->next = fs->base.results;
   fs->base.results = result;
d187 2
a188 4
   if (result) {
      if (result->id != UTIL_BITMASK_INVALID_INDEX)
         util_bitmask_clear( svga->fs_bm, result->id );
      svga_destroy_shader_result( result );
d238 30
a267 1
   
d274 1
a274 2
      if (svga->curr.sampler_views[i]) {
         assert(svga->curr.sampler[i]);
d293 37
a329 3
      if (svga->curr.sampler[i]) {
         key->tex[i].compare_mode = svga->curr.sampler[i]->compare_mode;
         key->tex[i].compare_func = svga->curr.sampler[i]->compare_func;
d342 30
d380 1
a380 2
   struct svga_shader_result *result = NULL;
   unsigned id = SVGA3D_INVALID_ID;
a381 1

d390 1
d396 3
a398 3
   result = search_fs_key( fs, &key );
   if (!result) {
      ret = compile_fs( svga, fs, &key, &result );
d403 1
a403 2
   assert (result);
   id = result->id;
d405 14
a418 1
   assert(id != SVGA3D_INVALID_ID);
d420 7
a426 6
   if (result != svga->state.hw_draw.fs) {
      ret = SVGA3D_SetShader(svga->swc,
                             SVGA3D_SHADERTYPE_PS,
                             id );
      if (ret != PIPE_OK)
         return ret;
d428 2
a429 2
      svga->dirty |= SVGA_NEW_FS_RESULT;
      svga->state.hw_draw.fs = result;      
d443 1
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d29 1
d31 1
d71 32
d113 14
a126 2
      ret = PIPE_ERROR_OUT_OF_MEMORY;
      goto fail;
d140 1
a140 1
   if (ret)
d163 4
a166 2
static int make_fs_key( const struct svga_context *svga,
                        struct svga_fs_compile_key *key )
d168 1
a168 1
   int i;
d218 5
d235 10
a244 1
   return 0;
d249 2
a250 2
static int emit_hw_fs( struct svga_context *svga,
                       unsigned dirty )
d254 1
a254 1
   int ret = 0;
d265 2
a266 2
   ret = make_fs_key( svga, &key );
   if (ret)
d272 1
a272 1
      if (ret)
d285 1
a285 1
      if (ret)
d292 1
a292 1
   return 0;
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d139 1
a139 1
    * achieves that by creating a varient of the current fragment
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d134 1
a134 2
      key->front_cw = (svga->curr.rast->templ.front_winding == 
                       PIPE_WINDING_CW);
d160 2
a161 2
   for (i = 0; i < svga->curr.num_textures; i++) {
      if (svga->curr.texture[i]) {
d163 2
a164 1
         key->tex[i].texture_target = svga->curr.texture[i]->target;
d172 1
a172 1
   key->num_textures = svga->curr.num_textures;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d134 2
a135 1
      key->front_ccw = svga->curr.rast->templ.front_ccw;
d161 2
a162 2
   for (i = 0; i < svga->curr.num_sampler_views; i++) {
      if (svga->curr.sampler_views[i]) {
d164 1
a164 2
         assert(svga->curr.sampler_views[i]->texture);
         key->tex[i].texture_target = svga->curr.sampler_views[i]->texture->target;
d172 1
a172 1
   key->num_textures = svga->curr.num_sampler_views;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a28 1
#include "util/u_memory.h"
a29 1
#include "tgsi/tgsi_ureg.h"
a68 32
/**
 * If we fail to compile a fragment shader (because it uses too many
 * registers, for example) we'll use a dummy/fallback shader that
 * simply emits a constant color.
 */
static const struct tgsi_token *
get_dummy_fragment_shader(void)
{
   static const float red[4] = { 1.0, 0.0, 0.0, 0.0 };
   struct ureg_program *ureg;
   const struct tgsi_token *tokens;
   struct ureg_src src;
   struct ureg_dst dst;
   unsigned num_tokens;

   ureg = ureg_create(TGSI_PROCESSOR_FRAGMENT);
   if (!ureg)
      return NULL;

   dst = ureg_DECL_output(ureg, TGSI_SEMANTIC_COLOR, 0);
   src = ureg_DECL_immediate(ureg, red, 4);
   ureg_MOV(ureg, dst, src);
   ureg_END(ureg);

   tokens = ureg_get_tokens(ureg, &num_tokens);

   ureg_destroy(ureg);

   return tokens;
}


d79 2
a80 14
      /* some problem during translation, try the dummy shader */
      const struct tgsi_token *dummy = get_dummy_fragment_shader();
      if (!dummy) {
         ret = PIPE_ERROR_OUT_OF_MEMORY;
         goto fail;
      }
      debug_printf("Failed to compile fragment shader, using dummy shader instead.\n");
      FREE((void *) fs->base.tokens);
      fs->base.tokens = dummy;
      result = svga_translate_fragment_program(fs, key);
      if (result == NULL) {
         ret = PIPE_ERROR;
         goto fail;
      }
d94 1
a94 1
   if (ret != PIPE_OK)
d117 2
a118 4
static enum pipe_error
make_fs_key(const struct svga_context *svga,
            struct svga_fragment_shader *fs,
            struct svga_fs_compile_key *key)
d120 1
a120 1
   unsigned i;
d139 1
a139 1
    * achieves that by creating a variant of the current fragment
a169 5

         key->tex[i].swizzle_r = svga->curr.sampler_views[i]->swizzle_r;
         key->tex[i].swizzle_g = svga->curr.sampler_views[i]->swizzle_g;
         key->tex[i].swizzle_b = svga->curr.sampler_views[i]->swizzle_b;
         key->tex[i].swizzle_a = svga->curr.sampler_views[i]->swizzle_a;
d182 1
a182 10
   /* sprite coord gen state */
   for (i = 0; i < svga->curr.num_samplers; ++i) {
      key->tex[i].sprite_texgen =
         svga->curr.rast->templ.sprite_coord_enable & (1 << i);
   }

   key->sprite_origin_lower_left = (svga->curr.rast->templ.sprite_coord_mode
                                    == PIPE_SPRITE_COORD_LOWER_LEFT);

   return PIPE_OK;
d187 2
a188 2
static enum pipe_error
emit_hw_fs(struct svga_context *svga, unsigned dirty)
d192 1
a192 1
   enum pipe_error ret = PIPE_OK;
d203 2
a204 2
   ret = make_fs_key( svga, fs, &key );
   if (ret != PIPE_OK)
d210 1
a210 1
      if (ret != PIPE_OK)
d223 1
a223 1
      if (ret != PIPE_OK)
d230 1
a230 1
   return PIPE_OK;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a35 2
#include "svga_shader.h"
#include "svga_resource_texture.h"
d42 2
a43 3
static INLINE int
compare_fs_keys(const struct svga_fs_compile_key *a,
                const struct svga_fs_compile_key *b)
d55 2
a56 4
/** Search for a fragment shader variant */
static struct svga_shader_variant *
search_fs_key(const struct svga_fragment_shader *fs,
              const struct svga_fs_compile_key *key)
d58 1
a58 1
   struct svga_shader_variant *variant = fs->base.variants;
d62 3
a64 3
   for ( ; variant; variant = variant->next) {
      if (compare_fs_keys( key, &variant->key.fkey ) == 0)
         return variant;
d74 1
a74 3
 * simply emits a constant color (red for debug, black for release).
 * We hit this with the Unigine/Heaven demo when Shaders = High.
 * With black, the demo still looks good.
d79 1
a79 5
#ifdef DEBUG
   static const float color[4] = { 1.0, 0.0, 0.0, 0.0 }; /* red */
#else
   static const float color[4] = { 0.0, 0.0, 0.0, 0.0 }; /* black */
#endif
d91 1
a91 1
   src = ureg_DECL_immediate(ureg, color, 4);
d103 4
a106 31
/**
 * Replace the given shader's instruction with a simple constant-color
 * shader.  We use this when normal shader translation fails.
 */
static struct svga_shader_variant *
get_compiled_dummy_shader(struct svga_fragment_shader *fs,
                          const struct svga_fs_compile_key *key)
{
   const struct tgsi_token *dummy = get_dummy_fragment_shader();
   struct svga_shader_variant *variant;

   if (!dummy) {
      return NULL;
   }

   FREE((void *) fs->base.tokens);
   fs->base.tokens = dummy;

   variant = svga_translate_fragment_program(fs, key);
   return variant;
}


/**
 * Translate TGSI shader into an svga shader variant.
 */
static enum pipe_error
compile_fs(struct svga_context *svga,
           struct svga_fragment_shader *fs,
           const struct svga_fs_compile_key *key,
           struct svga_shader_variant **out_variant)
d108 1
a108 1
   struct svga_shader_variant *variant;
d111 13
a123 6
   variant = svga_translate_fragment_program( fs, key );
   if (variant == NULL) {
      debug_printf("Failed to compile fragment shader,"
                   " using dummy shader instead.\n");
      variant = get_compiled_dummy_shader(fs, key);
      if (!variant) {
d129 4
a132 12
   if (variant->nr_tokens * sizeof(variant->tokens[0])
       + sizeof(SVGA3dCmdDefineShader) + sizeof(SVGA3dCmdHeader)
       >= SVGA_CB_MAX_COMMAND_SIZE) {
      /* too big, use dummy shader */
      debug_printf("Shader too large (%lu bytes),"
                   " using dummy shader instead.\n",
                   (unsigned long ) variant->nr_tokens * sizeof(variant->tokens[0]));
      variant = get_compiled_dummy_shader(fs, key);
      if (!variant) {
         ret = PIPE_ERROR;
         goto fail;
      }
d135 5
a139 1
   ret = svga_define_shader(svga, SVGA3D_SHADERTYPE_PS, variant);
d143 3
a145 6
   *out_variant = variant;

   /* insert variants at head of linked list */
   variant->next = fs->base.variants;
   fs->base.variants = variant;

d149 4
a152 2
   if (variant) {
      svga_destroy_shader_variant(svga, SVGA3D_SHADERTYPE_PS, variant);
d202 1
a202 30

#ifdef DEBUG
   /*
    * We expect a consistent set of samplers and sampler views.
    * Do some debug checks/warnings here.
    */
   {
      static boolean warned = FALSE;
      unsigned i, n = MAX2(svga->curr.num_sampler_views,
                           svga->curr.num_samplers);
      /* Only warn once to prevent too much debug output */
      if (!warned) {
         if (svga->curr.num_sampler_views != svga->curr.num_samplers) {
            debug_printf("svga: mismatched number of sampler views (%u) "
                         "vs. samplers (%u)\n",
                         svga->curr.num_sampler_views,
                         svga->curr.num_samplers);
         }
         for (i = 0; i < n; i++) {
            if ((svga->curr.sampler_views[i] == NULL) !=
                (svga->curr.sampler[i] == NULL))
               debug_printf("sampler_view[%u] = %p but sampler[%u] = %p\n",
                            i, svga->curr.sampler_views[i],
                            i, svga->curr.sampler[i]);
         }
         warned = TRUE;
      }
   }
#endif

d209 2
a210 1
      if (svga->curr.sampler_views[i] && svga->curr.sampler[i]) {
d229 3
a231 37
      if (svga->curr.sampler_views[i] && svga->curr.sampler[i]) {
         struct pipe_resource *tex = svga->curr.sampler_views[i]->texture;
         struct svga_texture *stex = svga_texture(tex);
         SVGA3dSurfaceFormat format = stex->key.format;

         if (format == SVGA3D_Z_D16 ||
             format == SVGA3D_Z_D24X8 ||
             format == SVGA3D_Z_D24S8) {
            /* If we're sampling from a SVGA3D_Z_D16, SVGA3D_Z_D24X8,
             * or SVGA3D_Z_D24S8 surface, we'll automatically get
             * shadow comparison.  But we only get LEQUAL mode.
             * Set TEX_COMPARE_NONE here so we don't emit the extra FS
             * code for shadow comparison.
             */
            key->tex[i].compare_mode = PIPE_TEX_COMPARE_NONE;
            key->tex[i].compare_func = PIPE_FUNC_NEVER;
            /* These depth formats _only_ support comparison mode and
             * not ordinary sampling so warn if the later is expected.
             */
            if (svga->curr.sampler[i]->compare_mode !=
                PIPE_TEX_COMPARE_R_TO_TEXTURE) {
               debug_warn_once("Unsupported shadow compare mode");
            }                   
            /* The only supported comparison mode is LEQUAL */
            if (svga->curr.sampler[i]->compare_func != PIPE_FUNC_LEQUAL) {
               debug_warn_once("Unsupported shadow compare function");
            }
         }
         else {
            /* For other texture formats, just use the compare func/mode
             * as-is.  Should be no-ops for color textures.  For depth
             * textures, we do not get automatic depth compare.  We have
             * to do it ourselves in the shader.  And we don't get PCF.
             */
            key->tex[i].compare_mode = svga->curr.sampler[i]->compare_mode;
            key->tex[i].compare_func = svga->curr.sampler[i]->compare_func;
         }
a243 30
   /* SVGA_NEW_FRAME_BUFFER */
   if (fs->base.info.color0_writes_all_cbufs) {
      /* Replicate color0 output to N colorbuffers */
      key->write_color0_to_n_cbufs = svga->curr.framebuffer.nr_cbufs;
   }

   return PIPE_OK;
}


/**
 * svga_reemit_fs_bindings - Reemit the fragment shader bindings
 */
enum pipe_error
svga_reemit_fs_bindings(struct svga_context *svga)
{
   enum pipe_error ret;

   assert(svga->rebind.fs);
   assert(svga_have_gb_objects(svga));

   if (!svga->state.hw_draw.fs)
      return PIPE_OK;

   ret = SVGA3D_SetGBShader(svga->swc, SVGA3D_SHADERTYPE_PS,
                            svga->state.hw_draw.fs->gb_shader);
   if (ret != PIPE_OK)
      return ret;

   svga->rebind.fs = FALSE;
d252 2
a253 1
   struct svga_shader_variant *variant = NULL;
d255 1
a263 1
    * SVGA_NEW_FRAME_BUFFER
d269 3
a271 3
   variant = search_fs_key( fs, &key );
   if (!variant) {
      ret = compile_fs( svga, fs, &key, &variant );
d276 2
a277 1
   assert(variant);
d279 1
a279 14
   if (variant != svga->state.hw_draw.fs) {
      if (svga_have_gb_objects(svga)) {
         /*
          * Bind is necessary here only because pipebuffer_fenced may move
          * the shader contents around....
          */
         ret = SVGA3D_BindGBShader(svga->swc, variant->gb_shader);
         if (ret != PIPE_OK)
            return ret;

         ret = SVGA3D_SetGBShader(svga->swc, SVGA3D_SHADERTYPE_PS,
                                  variant->gb_shader);
         if (ret != PIPE_OK)
            return ret;
d281 6
a286 7
         svga->rebind.fs = FALSE;
      }
      else {
         ret = SVGA3D_SetShader(svga->swc, SVGA3D_SHADERTYPE_PS, variant->id);
         if (ret != PIPE_OK)
            return ret;
      }
d288 2
a289 2
      svga->dirty |= SVGA_NEW_FS_VARIANT;
      svga->state.hw_draw.fs = variant;      
a302 1
    SVGA_NEW_FRAME_BUFFER |
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d160 3
a162 1
   if (svga_shader_too_large(svga, variant)) {
d343 1
a343 1
   if (fs->base.info.properties[TGSI_PROPERTY_FS_COLOR0_WRITES_ALL_CBUFS]) {
d407 8
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d160 1
a160 3
   if (variant->nr_tokens * sizeof(variant->tokens[0])
       + sizeof(SVGA3dCmdDefineShader) + sizeof(SVGA3dCmdHeader)
       >= SVGA_CB_MAX_COMMAND_SIZE) {
d341 1
a341 1
   if (fs->base.info.color0_writes_all_cbufs) {
a404 8
         /*
          * Bind is necessary here only because pipebuffer_fenced may move
          * the shader contents around....
          */
         ret = SVGA3D_BindGBShader(svga->swc, variant->gb_shader);
         if (ret != PIPE_OK)
            return ret;

@


