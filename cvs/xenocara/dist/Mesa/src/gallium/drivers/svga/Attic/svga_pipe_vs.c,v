head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.1.0.14
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.14.01.09;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.58;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.16;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**********************************************************
 * Copyright 2008-2009 VMware, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 **********************************************************/

#include "draw/draw_context.h"
#include "util/u_inlines.h"
#include "util/u_math.h"
#include "util/u_memory.h"
#include "util/u_bitmask.h"
#include "tgsi/tgsi_parse.h"
#include "tgsi/tgsi_text.h"

#include "svga_context.h"
#include "svga_tgsi.h"
#include "svga_hw_reg.h"
#include "svga_cmd.h"
#include "svga_debug.h"
#include "svga_shader.h"


/**
 * Substitute a debug shader.
 */
static const struct tgsi_token *
substitute_vs(unsigned shader_id, const struct tgsi_token *old_tokens)
{
#if 0
   if (shader_id == 12) {
   static struct tgsi_token tokens[300];

   const char *text =
      "VERT\n"
      "DCL IN[0]\n"
      "DCL IN[1]\n"
      "DCL IN[2]\n"
      "DCL OUT[0], POSITION\n"
      "DCL TEMP[0..4]\n"
      "IMM FLT32 {     1.0000,     1.0000,     1.0000,     1.0000 }\n"
      "IMM FLT32 {     0.45,     1.0000,     1.0000,     1.0000 }\n"
      "IMM FLT32 { 1.297863, 0.039245, 0.035993, 0.035976}\n"
      "IMM FLT32 { -0.019398, 1.696131, -0.202151, -0.202050  }\n"
      "IMM FLT32 { 0.051711, -0.348713, -0.979204, -0.978714  }\n"
      "IMM FLT32 { 0.000000, 0.000003, 139.491577, 141.421356 }\n"
      "DCL CONST[0..7]\n"
      "DCL CONST[9..16]\n"
      "  MOV TEMP[2], IMM[0]\n"

      "  MOV TEMP[2].xyz, IN[2]\n"
      "  MOV TEMP[2].xyz, IN[0]\n"
      "  MOV TEMP[2].xyz, IN[1]\n"

      "  MUL TEMP[1], IMM[3], TEMP[2].yyyy\n"
      "  MAD TEMP[3], IMM[2],  TEMP[2].xxxx, TEMP[1]\n"
      "  MAD TEMP[1], IMM[4], TEMP[2].zzzz, TEMP[3]\n"
      "  MAD TEMP[4], IMM[5], TEMP[2].wwww, TEMP[1]\n"

      "  MOV OUT[0], TEMP[4]\n"
      "  END\n";

   if (!tgsi_text_translate(text,
                             tokens,
                             Elements(tokens)))
   {
      assert(0);
      return NULL;
   }

   return tokens;
   }
#endif

   return old_tokens;
}


static void *
svga_create_vs_state(struct pipe_context *pipe,
                     const struct pipe_shader_state *templ)
{
   struct svga_context *svga = svga_context(pipe);
   struct svga_vertex_shader *vs = CALLOC_STRUCT(svga_vertex_shader);
   if (!vs)
      return NULL;

   /* substitute a debug shader?
    */
   vs->base.tokens = tgsi_dup_tokens(substitute_vs(svga->debug.shader_id,
                                                   templ->tokens));

   /* Collect basic info that we'll need later:
    */
   tgsi_scan_shader(vs->base.tokens, &vs->base.info);

   {
      /* Need to do construct a new template in case we substitued a
       * debug shader.
       */
      struct pipe_shader_state tmp2 = *templ;
      tmp2.tokens = vs->base.tokens;
      vs->draw_shader = draw_create_vertex_shader(svga->swtnl.draw, &tmp2);
   }

   vs->base.id = svga->debug.shader_id++;

   if (SVGA_DEBUG & DEBUG_TGSI || 0) {
      debug_printf("%s id: %u, inputs: %u, outputs: %u\n",
                   __FUNCTION__, vs->base.id,
                   vs->base.info.num_inputs, vs->base.info.num_outputs);
   }

   return vs;
}


static void
svga_bind_vs_state(struct pipe_context *pipe, void *shader)
{
   struct svga_vertex_shader *vs = (struct svga_vertex_shader *)shader;
   struct svga_context *svga = svga_context(pipe);

   svga->curr.vs = vs;
   svga->dirty |= SVGA_NEW_VS;
}


static void
svga_delete_vs_state(struct pipe_context *pipe, void *shader)
{
   struct svga_context *svga = svga_context(pipe);
   struct svga_vertex_shader *vs = (struct svga_vertex_shader *)shader;
   struct svga_shader_variant *variant, *tmp;
   enum pipe_error ret;

   svga_hwtnl_flush_retry(svga);

   draw_delete_vertex_shader(svga->swtnl.draw, vs->draw_shader);

   for (variant = vs->base.variants; variant; variant = tmp) {
      tmp = variant->next;

      ret = svga_destroy_shader_variant(svga, SVGA3D_SHADERTYPE_VS, variant);
      (void) ret;  /* PIPE_ERROR_ not handled yet */

      /*
       * Remove stale references to this variant to ensure a new variant on the
       * same address will be detected as a change.
       */
      if (variant == svga->state.hw_draw.vs)
         svga->state.hw_draw.vs = NULL;
   }

   FREE((void *)vs->base.tokens);
   FREE(vs);
}


void
svga_init_vs_functions(struct svga_context *svga)
{
   svga->pipe.create_vs_state = svga_create_vs_state;
   svga->pipe.bind_vs_state = svga_bind_vs_state;
   svga->pipe.delete_vs_state = svga_delete_vs_state;
}

@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.2
log
@Merge Mesa 9.2.0
@
text
@d39 1
d152 1
a152 1
   struct svga_shader_result *result, *tmp;
d159 2
a160 2
   for (result = vs->base.results; result; result = tmp) {
      tmp = result->next;
d162 2
a163 11
      ret = SVGA3D_DestroyShader(svga->swc, result->id, SVGA3D_SHADERTYPE_VS);
      if (ret != PIPE_OK) {
         svga_context_flush(svga, NULL);
         ret = SVGA3D_DestroyShader(svga->swc, result->id,
                                    SVGA3D_SHADERTYPE_VS);
         assert(ret == PIPE_OK);
      }

      util_bitmask_clear(svga->vs_bm, result->id);

      svga_destroy_shader_result(result);
d166 1
a166 1
       * Remove stale references to this result to ensure a new result on the
d169 1
a169 1
      if (result == svga->state.hw_draw.vs)
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a33 1
#include "svga_screen.h"
d41 5
a45 3
static const struct tgsi_token *substitute_vs( 
   unsigned shader_id,
   const struct tgsi_token *old_tokens )
d51 1
a51 1
   const char *text = 
d80 1
a80 1
   if (!tgsi_text_translate( text,
d82 1
a82 1
                             Elements(tokens) ))
a95 4
/***********************************************************************
 * Vertex shaders 
 */

a100 1
   struct svga_screen *svgascreen = svga_screen(pipe->screen);
a109 1

a123 1
   vs->base.use_sm30 = svgascreen->use_vs30;
d134 3
a136 1
static void svga_bind_vs_state(struct pipe_context *pipe, void *shader)
d146 2
a147 1
static void svga_delete_vs_state(struct pipe_context *pipe, void *shader)
d154 1
a154 1
   svga_hwtnl_flush_retry( svga );
d157 2
a158 2
   
   for (result = vs->base.results; result; result = tmp ) {
d161 2
a162 4
      ret = SVGA3D_DestroyShader(svga->swc, 
                                 result->id,
                                 SVGA3D_SHADERTYPE_VS );
      if(ret != PIPE_OK) {
d164 2
a165 3
         ret = SVGA3D_DestroyShader(svga->swc, 
                                    result->id,
                                    SVGA3D_SHADERTYPE_VS );
d169 1
a169 1
      util_bitmask_clear( svga->vs_bm, result->id );
d171 1
a171 1
      svga_destroy_shader_result( result );
d177 1
a177 1
      if(result == svga->state.hw_draw.vs)
d186 2
a187 1
void svga_init_vs_functions( struct svga_context *svga )
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d34 1
d42 3
a44 5
/**
 * Substitute a debug shader.
 */
static const struct tgsi_token *
substitute_vs(unsigned shader_id, const struct tgsi_token *old_tokens)
d50 1
a50 1
   const char *text =
d79 1
a79 1
   if (!tgsi_text_translate(text,
d81 1
a81 1
                             Elements(tokens)))
d95 4
d104 1
d114 1
d129 1
d140 1
a140 3

static void
svga_bind_vs_state(struct pipe_context *pipe, void *shader)
d150 1
a150 2
static void
svga_delete_vs_state(struct pipe_context *pipe, void *shader)
d157 1
a157 1
   svga_hwtnl_flush_retry(svga);
d160 2
a161 2

   for (result = vs->base.results; result; result = tmp) {
d164 4
a167 2
      ret = SVGA3D_DestroyShader(svga->swc, result->id, SVGA3D_SHADERTYPE_VS);
      if (ret != PIPE_OK) {
d169 3
a171 2
         ret = SVGA3D_DestroyShader(svga->swc, result->id,
                                    SVGA3D_SHADERTYPE_VS);
d175 1
a175 1
      util_bitmask_clear(svga->vs_bm, result->id);
d177 1
a177 1
      svga_destroy_shader_result(result);
d183 1
a183 1
      if (result == svga->state.hw_draw.vs)
d192 1
a192 2
void
svga_init_vs_functions(struct svga_context *svga)
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a38 1
#include "svga_shader.h"
d151 1
a151 1
   struct svga_shader_variant *variant, *tmp;
d158 2
a159 2
   for (variant = vs->base.variants; variant; variant = tmp) {
      tmp = variant->next;
d161 11
a171 2
      ret = svga_destroy_shader_variant(svga, SVGA3D_SHADERTYPE_VS, variant);
      (void) ret;  /* PIPE_ERROR_ not handled yet */
d174 1
a174 1
       * Remove stale references to this variant to ensure a new variant on the
d177 1
a177 1
      if (variant == svga->state.hw_draw.vs)
@


