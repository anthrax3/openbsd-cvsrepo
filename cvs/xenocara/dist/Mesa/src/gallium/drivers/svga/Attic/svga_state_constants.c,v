head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.10;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.59;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.16;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**********************************************************
 * Copyright 2008-2009 VMware, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 **********************************************************/

#include "util/u_inlines.h"
#include "util/u_memory.h"
#include "pipe/p_defines.h"

#include "svga_screen.h"
#include "svga_context.h"
#include "svga_state.h"
#include "svga_cmd.h"
#include "svga_tgsi.h"
#include "svga_debug.h"
#include "svga_resource_buffer.h"

#include "svga_hw_reg.h"


/*
 * Don't try to send more than 4kb of successive constants.
 */
#define MAX_CONST_REG_COUNT 256  /**< number of float[4] constants */

/**
 * Extra space for svga-specific VS/PS constants (such as texcoord
 * scale factors, vertex transformation scale/translation).
 */
#define MAX_EXTRA_CONSTS 32

/** Guest-backed surface constant buffers must be this size */
#define GB_CONSTBUF_SIZE (SVGA3D_CONSTREG_MAX)

/**
 * Convert from PIPE_SHADER_* to SVGA3D_SHADERTYPE_*
 */
static unsigned
svga_shader_type(unsigned shader)
{
   switch (shader) {
   case PIPE_SHADER_VERTEX:
      return SVGA3D_SHADERTYPE_VS;
   case PIPE_SHADER_FRAGMENT:
      return SVGA3D_SHADERTYPE_PS;
   default:
      assert(!"Unexpected shader type");
      return SVGA3D_SHADERTYPE_VS;
   }
}


/**
 * Emit any extra fragment shader constants into the buffer pointed
 * to by 'dest'.
 * In particular, these would be the scaling factors needed for handling
 * unnormalized texture coordinates for texture rectangles.
 * \return number of float[4] constants put into the dest buffer
 */
static unsigned
svga_get_extra_fs_constants(struct svga_context *svga, float *dest)
{
   const struct svga_shader_variant *variant = svga->state.hw_draw.fs;
   const struct svga_fs_compile_key *key = &variant->key.fkey;
   unsigned count = 0;

   /* SVGA_NEW_VS_VARIANT
    */
   if (key->num_unnormalized_coords) {
      unsigned i;

      for (i = 0; i < key->num_textures; i++) {
         if (key->tex[i].unnormalized) {
            struct pipe_resource *tex = svga->curr.sampler_views[i]->texture;

            /* debug/sanity check */
            assert(key->tex[i].width_height_idx == count);

            *dest++ = 1.0 / (float)tex->width0;
            *dest++ = 1.0 / (float)tex->height0;
            *dest++ = 1.0;
            *dest++ = 1.0;

            count++;
         }
      }
   }

   assert(count <= MAX_EXTRA_CONSTS);

   return count;
}


/**
 * Emit any extra vertex shader constants into the buffer pointed
 * to by 'dest'.
 * In particular, these would be the scale and bias factors computed
 * from the framebuffer size which are used to copy with differences in
 * GL vs D3D coordinate spaces.  See svga_tgsi_insn.c for more info.
 * \return number of float[4] constants put into the dest buffer
 */
static unsigned
svga_get_extra_vs_constants(struct svga_context *svga, float *dest)
{
   const struct svga_shader_variant *variant = svga->state.hw_draw.vs;
   const struct svga_vs_compile_key *key = &variant->key.vkey;
   unsigned count = 0;

   /* SVGA_NEW_VS_VARIANT
    */
   if (key->need_prescale) {
      memcpy(dest, svga->state.hw_clear.prescale.scale, 4 * sizeof(float));
      dest += 4;

      memcpy(dest, svga->state.hw_clear.prescale.translate, 4 * sizeof(float));
      dest += 4;

      count = 2;
   }

   assert(count <= MAX_EXTRA_CONSTS);

   return count;
}


/**
 * Check and emit one shader constant register.
 * \param shader  PIPE_SHADER_FRAGMENT or PIPE_SHADER_VERTEX
 * \param i  which float[4] constant to change
 * \param value  the new float[4] value
 */
static enum pipe_error
emit_const(struct svga_context *svga, unsigned shader, unsigned i,
           const float *value)
{
   enum pipe_error ret = PIPE_OK;

   assert(shader < PIPE_SHADER_TYPES);
   assert(i < SVGA3D_CONSTREG_MAX);

   if (memcmp(svga->state.hw_draw.cb[shader][i], value,
              4 * sizeof(float)) != 0) {
      if (SVGA_DEBUG & DEBUG_CONSTS)
         debug_printf("%s %s %u: %f %f %f %f\n",
                      __FUNCTION__,
                      shader == PIPE_SHADER_VERTEX ? "VERT" : "FRAG",
                      i,
                      value[0],
                      value[1],
                      value[2],
                      value[3]);

      ret = SVGA3D_SetShaderConst( svga->swc,
                                   i,
                                   svga_shader_type(shader),
                                   SVGA3D_CONST_TYPE_FLOAT,
                                   value );
      if (ret != PIPE_OK)
         return ret;

      memcpy(svga->state.hw_draw.cb[shader][i], value, 4 * sizeof(float));
   }

   return ret;
}


/*
 * Check and emit a range of shader constant registers, trying to coalesce
 * successive shader constant updates in a single command in order to save
 * space on the command buffer.  This is a HWv8 feature.
 */
static enum pipe_error
emit_const_range(struct svga_context *svga,
                 unsigned shader,
                 unsigned offset,
                 unsigned count,
                 const float (*values)[4])
{
   unsigned i, j;
   enum pipe_error ret;

#ifdef DEBUG
   if (offset + count > SVGA3D_CONSTREG_MAX) {
      debug_printf("svga: too many constants (offset %u + count %u = %u (max = %u))\n",
                   offset, count, offset + count, SVGA3D_CONSTREG_MAX);
   }
#endif

   if (offset > SVGA3D_CONSTREG_MAX) {
      /* This isn't OK, but if we propagate an error all the way up we'll
       * just get into more trouble.
       * XXX note that offset is always zero at this time so this is moot.
       */
      return PIPE_OK;
   }

   if (offset + count > SVGA3D_CONSTREG_MAX) {
      /* Just drop the extra constants for now.
       * Ideally we should not have allowed the app to create a shader
       * that exceeds our constant buffer size but there's no way to
       * express that in gallium at this time.
       */
      count = SVGA3D_CONSTREG_MAX - offset;
   }

   i = 0;
   while (i < count) {
      if (memcmp(svga->state.hw_draw.cb[shader][offset + i],
                 values[i],
                 4 * sizeof(float)) != 0) {
         /* Found one dirty constant
          */
         if (SVGA_DEBUG & DEBUG_CONSTS)
            debug_printf("%s %s %d: %f %f %f %f\n",
                         __FUNCTION__,
                         shader == PIPE_SHADER_VERTEX ? "VERT" : "FRAG",
                         offset + i,
                         values[i][0],
                         values[i][1],
                         values[i][2],
                         values[i][3]);

         /* Look for more consecutive dirty constants.
          */
         j = i + 1;
         while (j < count &&
                j < i + MAX_CONST_REG_COUNT &&
                memcmp(svga->state.hw_draw.cb[shader][offset + j],
                       values[j],
                       4 * sizeof(float)) != 0) {

            if (SVGA_DEBUG & DEBUG_CONSTS)
               debug_printf("%s %s %d: %f %f %f %f\n",
                            __FUNCTION__,
                            shader == PIPE_SHADER_VERTEX ? "VERT" : "FRAG",
                            offset + j,
                            values[j][0],
                            values[j][1],
                            values[j][2],
                            values[j][3]);

            ++j;
         }

         assert(j >= i + 1);

         /* Send them all together.
          */
         if (svga_have_gb_objects(svga)) {
            ret = SVGA3D_SetGBShaderConstsInline(svga->swc,
                                                 offset + i, /* start */
                                                 j - i,  /* count */
                                                 svga_shader_type(shader),
                                                 SVGA3D_CONST_TYPE_FLOAT,
                                                 values + i);
         }
         else {
            ret = SVGA3D_SetShaderConsts(svga->swc,
                                         offset + i, j - i,
                                         svga_shader_type(shader),
                                         SVGA3D_CONST_TYPE_FLOAT,
                                         values + i);
         }
         if (ret != PIPE_OK) {
            return ret;
         }

         /*
          * Local copy of the hardware state.
          */
         memcpy(svga->state.hw_draw.cb[shader][offset + i],
                values[i],
                (j - i) * 4 * sizeof(float));

         i = j + 1;
      } else {
         ++i;
      }
   }

   return PIPE_OK;
}


/**
 * Emit all the constants in a constant buffer for a shader stage.
 */
static enum pipe_error
emit_consts(struct svga_context *svga, unsigned shader)
{
   struct svga_screen *ss = svga_screen(svga->pipe.screen);
   struct pipe_transfer *transfer = NULL;
   unsigned count;
   const float (*data)[4] = NULL;
   unsigned i;
   enum pipe_error ret = PIPE_OK;
   const unsigned offset = 0;

   assert(shader < PIPE_SHADER_TYPES);

   if (svga->curr.cbufs[shader].buffer == NULL)
      goto done;

   data = (const float (*)[4])pipe_buffer_map(&svga->pipe,
                                              svga->curr.cbufs[shader].buffer,
                                              PIPE_TRANSFER_READ,
					      &transfer);
   if (data == NULL) {
      ret = PIPE_ERROR_OUT_OF_MEMORY;
      goto done;
   }

   /* sanity check */
   assert(svga->curr.cbufs[shader].buffer->width0 >=
          svga->curr.cbufs[shader].buffer_size);

   /* Use/apply the constant buffer size and offsets here */
   count = svga->curr.cbufs[shader].buffer_size / (4 * sizeof(float));
   data += svga->curr.cbufs[shader].buffer_offset / (4 * sizeof(float));

   if (ss->hw_version >= SVGA3D_HWVERSION_WS8_B1) {
      ret = emit_const_range( svga, shader, offset, count, data );
      if (ret != PIPE_OK) {
         goto done;
      }
   } else {
      for (i = 0; i < count; i++) {
         ret = emit_const( svga, shader, offset + i, data[i] );
         if (ret != PIPE_OK) {
            goto done;
         }
      }
   }

done:
   if (data)
      pipe_buffer_unmap(&svga->pipe, transfer);

   return ret;
}


static enum pipe_error
emit_fs_consts(struct svga_context *svga, unsigned dirty)
{
   struct svga_screen *ss = svga_screen(svga->pipe.screen);
   const struct svga_shader_variant *variant = svga->state.hw_draw.fs;
   enum pipe_error ret = PIPE_OK;

   /* SVGA_NEW_FS_VARIANT
    */
   if (variant == NULL)
      return PIPE_OK;

   /* SVGA_NEW_FS_CONST_BUFFER
    */
   ret = emit_consts( svga, PIPE_SHADER_FRAGMENT );
   if (ret != PIPE_OK)
      return ret;

   /* emit extra shader constants */
   {
      unsigned offset = variant->shader->info.file_max[TGSI_FILE_CONSTANT] + 1;
      float extras[MAX_EXTRA_CONSTS][4];
      unsigned count, i;

      count = svga_get_extra_fs_constants(svga, (float *) extras);

      if (ss->hw_version >= SVGA3D_HWVERSION_WS8_B1) {
         ret = emit_const_range(svga, PIPE_SHADER_FRAGMENT, offset, count,
                                (const float (*) [4])extras);
      } else {
         for (i = 0; i < count; i++) {
            ret = emit_const(svga, PIPE_SHADER_FRAGMENT, offset + i, extras[i]);
            if (ret != PIPE_OK)
               return ret;
         }
      }
   }

   return ret;
}


struct svga_tracked_state svga_hw_fs_constants =
{
   "hw fs params",
   (SVGA_NEW_FS_CONST_BUFFER |
    SVGA_NEW_FS_VARIANT |
    SVGA_NEW_TEXTURE_BINDING),
   emit_fs_consts
};



static enum pipe_error
emit_vs_consts(struct svga_context *svga, unsigned dirty)
{
   struct svga_screen *ss = svga_screen(svga->pipe.screen);
   const struct svga_shader_variant *variant = svga->state.hw_draw.vs;
   enum pipe_error ret = PIPE_OK;

   /* SVGA_NEW_VS_VARIANT
    */
   if (variant == NULL)
      return PIPE_OK;

   /* SVGA_NEW_VS_CONST_BUFFER
    */
   ret = emit_consts( svga, PIPE_SHADER_VERTEX );
   if (ret != PIPE_OK)
      return ret;

   /* emit extra shader constants */
   {
      unsigned offset = variant->shader->info.file_max[TGSI_FILE_CONSTANT] + 1;
      float extras[MAX_EXTRA_CONSTS][4];
      unsigned count, i;

      count = svga_get_extra_vs_constants(svga, (float *) extras);
      assert(count <= Elements(extras));

      if (ss->hw_version >= SVGA3D_HWVERSION_WS8_B1) {
         ret = emit_const_range(svga, PIPE_SHADER_VERTEX, offset, count,
                                (const float (*) [4]) extras);
      } else {
         for (i = 0; i < count; i++) {
            ret = emit_const(svga, PIPE_SHADER_VERTEX, offset + i, extras[i]);
            if (ret != PIPE_OK)
               return ret;
         }
      }
   }

   return ret;
}


struct svga_tracked_state svga_hw_vs_constants =
{
   "hw vs params",
   (SVGA_NEW_PRESCALE |
    SVGA_NEW_VS_CONST_BUFFER |
    SVGA_NEW_VS_VARIANT),
   emit_vs_consts
};
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d27 1
d36 1
d46 5
d52 2
d74 75
d207 2
a208 2
      debug_printf("svga: too many constants (offset + count = %u)\n",
                   offset + count);
d272 15
a286 5
         ret = SVGA3D_SetShaderConsts(svga->swc,
                                      offset + i, j - i,
                                      svga_shader_type(shader),
                                      SVGA3D_CONST_TYPE_FLOAT,
                                      values + i);
d324 1
a324 1
   if (svga->curr.cb[shader] == NULL)
a326 2
   count = svga->curr.cb[shader]->width0 / (4 * sizeof(float));

d328 1
a328 1
                                              svga->curr.cb[shader],
d336 8
d369 2
a370 1
   const struct svga_shader_result *result = svga->state.hw_draw.fs;
d373 7
d384 16
a399 29
   /* The internally generated fragment shader for xor blending
    * doesn't have a 'result' struct.  It should be fixed to avoid
    * this special case, but work around it with a NULL check:
    */
   if (result) {
      const struct svga_fs_compile_key *key = &result->key.fkey;
      if (key->num_unnormalized_coords) {
         const unsigned offset =
            result->shader->info.file_max[TGSI_FILE_CONSTANT] + 1;
         unsigned i;

         for (i = 0; i < key->num_textures; i++) {
            if (key->tex[i].unnormalized) {
               struct pipe_resource *tex = svga->curr.sampler_views[i]->texture;
               float data[4];

               data[0] = 1.0f / (float) tex->width0;
               data[1] = 1.0f / (float) tex->height0;
               data[2] = 1.0f;
               data[3] = 1.0f;

               ret = emit_const(svga,
                                PIPE_SHADER_FRAGMENT,
                                key->tex[i].width_height_idx + offset,
                                data);
               if (ret != PIPE_OK) {
                  return ret;
               }
            }
d404 1
a404 1
   return PIPE_OK;
d412 1
a412 1
    SVGA_NEW_FS_RESULT |
d422 2
a423 2
   const struct svga_shader_result *result = svga->state.hw_draw.vs;
   const struct svga_vs_compile_key *key;
a424 1
   unsigned offset;
d426 1
a426 1
   /* SVGA_NEW_VS_RESULT
d428 1
a428 1
   if (result == NULL)
a430 2
   key = &result->key.vkey;

d437 19
a455 16
   /* offset = number of constants in the VS const buffer */
   offset = result->shader->info.file_max[TGSI_FILE_CONSTANT] + 1;

   /* SVGA_NEW_VS_PRESCALE
    * Put the viewport pre-scale/translate values into the const buffer.
    */
   if (key->need_prescale) {
      ret = emit_const( svga, PIPE_SHADER_VERTEX, offset++,
                        svga->state.hw_clear.prescale.scale );
      if (ret != PIPE_OK)
         return ret;

      ret = emit_const( svga, PIPE_SHADER_VERTEX, offset++,
                        svga->state.hw_clear.prescale.translate );
      if (ret != PIPE_OK)
         return ret;
d458 1
a458 1
   return PIPE_OK;
d467 1
a467 1
    SVGA_NEW_VS_RESULT),
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d29 1
d38 3
a40 2
/***********************************************************************
 * Hardware update 
d42 3
d46 2
a47 1
/* Convert from PIPE_SHADER_* to SVGA3D_SHADERTYPE_*
d49 2
a50 1
static int svga_shader_type( int shader )
d52 9
a60 4
   assert(PIPE_SHADER_VERTEX + 1 == SVGA3D_SHADERTYPE_VS);
   assert(PIPE_SHADER_FRAGMENT + 1 == SVGA3D_SHADERTYPE_PS);
   assert(shader <= PIPE_SHADER_FRAGMENT);
   return shader + 1;
d64 9
a72 4
static int emit_const( struct svga_context *svga,
                       int unit,
                       int i,
                       const float *value )
d74 4
a77 1
   int ret = PIPE_OK;
d79 2
a80 1
   if (memcmp(svga->state.hw_draw.cb[unit][i], value, 4 * sizeof(float)) != 0) {
d82 1
a82 1
         debug_printf("%s %s %d: %f %f %f %f\n",
d84 1
a84 1
                      unit == PIPE_SHADER_VERTEX ? "VERT" : "FRAG",
d91 1
a91 1
      ret = SVGA3D_SetShaderConst( svga->swc, 
d93 1
a93 1
                                   svga_shader_type(unit),
d96 1
a96 1
      if (ret)
d99 1
a99 1
      memcpy(svga->state.hw_draw.cb[unit][i], value, 4 * sizeof(float));
d101 1
a101 1
   
d105 12
a116 3
static int emit_consts( struct svga_context *svga,
                        int offset,
                        int unit )
d118 103
d225 2
a226 1
   int ret = PIPE_OK;
d228 3
a230 1
   if (svga->curr.cb[unit] == NULL)
d233 1
a233 1
   count = svga->curr.cb[unit]->width0 / (4 * sizeof(float));
d236 1
a236 1
                                              svga->curr.cb[unit],
d244 3
a246 3
   for (i = 0; i < count; i++) {
      ret = emit_const( svga, unit, offset + i, data[i] );
      if (ret)
d248 8
d264 4
a267 3
   
static int emit_fs_consts( struct svga_context *svga,
                           unsigned dirty )
d270 1
a270 2
   const struct svga_fs_compile_key *key = &result->key.fkey;
   int ret = 0;
d272 2
a273 2
   ret = emit_consts( svga, 0, PIPE_SHADER_FRAGMENT );
   if (ret)
d280 25
a304 22
   if (result != NULL &&
       key->num_unnormalized_coords)
   {
      unsigned offset = result->shader->info.file_max[TGSI_FILE_CONSTANT] + 1;
      int i;

      for (i = 0; i < key->num_textures; i++) {
         if (key->tex[i].unnormalized) {
            struct pipe_resource *tex = svga->curr.sampler_views[i]->texture;
            float data[4];

            data[0] = 1.0 / (float)tex->width0;
            data[1] = 1.0 / (float)tex->height0;
            data[2] = 1.0;
            data[3] = 1.0;

            ret = emit_const( svga,
                              PIPE_SHADER_FRAGMENT,
                              key->tex[i].width_height_idx + offset,
                              data );
            if (ret)
               return ret;
a306 2

      offset += key->num_unnormalized_coords;
d309 1
a309 1
   return 0;
d313 1
a313 1
struct svga_tracked_state svga_hw_fs_parameters = 
a321 2
/***********************************************************************
 */
d323 3
a325 2
static int emit_vs_consts( struct svga_context *svga,
                           unsigned dirty )
d328 2
a329 2
   const struct svga_vs_compile_key *key = &result->key.vkey;
   int ret = 0;
d334 2
a335 2
   if (result == NULL) 
      return 0;
d337 3
a339 1
   /* SVGA_NEW_VS_CONST_BUFFER 
d341 2
a342 2
   ret = emit_consts( svga, 0, PIPE_SHADER_VERTEX );
   if (ret)
d345 1
d348 2
a349 1
   /* SVGA_NEW_VS_RESULT
d354 1
a354 1
      if (ret)
d359 1
a359 1
      if (ret)
d363 1
a363 17
   /* SVGA_NEW_ZERO_STRIDE
    */
   if (key->zero_stride_vertex_elements) {
      unsigned i, curr_zero_stride = 0;
      for (i = 0; i < PIPE_MAX_ATTRIBS; ++i) {
         if (key->zero_stride_vertex_elements & (1 << i)) {
            ret = emit_const( svga, PIPE_SHADER_VERTEX, offset++,
                              svga->curr.zero_stride_constants +
                              4 * curr_zero_stride );
            if (ret)
               return ret;
            ++curr_zero_stride;
         }
      }
   }

   return 0;
d367 1
a367 1
struct svga_tracked_state svga_hw_vs_parameters = 
a371 1
    SVGA_NEW_ZERO_STRIDE |
a374 1

@


1.2
log
@Merge Mesa 7.10.3
@
text
@d43 1
a43 1
static int svga_shader_type( int unit )
d45 4
a48 1
   return unit + 1;
d116 1
a116 1
      pipe_buffer_unmap(&svga->pipe, svga->curr.cb[unit], transfer);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d85 1
a85 1
   struct pipe_screen *screen = svga->pipe.screen;
d94 1
a94 1
   count = svga->curr.cb[unit]->size / (4 * sizeof(float));
d96 1
a96 1
   data = (const float (*)[4])pipe_buffer_map(screen,
d98 2
a99 1
                                              PIPE_BUFFER_USAGE_CPU_READ);
d113 1
a113 1
      pipe_buffer_unmap(screen, svga->curr.cb[unit]);
d141 1
a141 1
            struct pipe_texture *tex = svga->curr.texture[i];
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d85 1
a85 1
   struct pipe_transfer *transfer = NULL;
d94 1
a94 1
   count = svga->curr.cb[unit]->width0 / (4 * sizeof(float));
d96 1
a96 1
   data = (const float (*)[4])pipe_buffer_map(&svga->pipe,
d98 1
a98 2
                                              PIPE_TRANSFER_READ,
					      &transfer);
d112 1
a112 1
      pipe_buffer_unmap(&svga->pipe, svga->curr.cb[unit], transfer);
d140 1
a140 1
            struct pipe_resource *tex = svga->curr.sampler_views[i]->texture;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a28 1
#include "svga_screen.h"
d37 2
a38 3

/*
 * Don't try to send more than 4kb of successive constants.
a39 3
#define MAX_CONST_REG_COUNT 256  /**< number of float[4] constants */


d41 1
a41 2
/**
 * Convert from PIPE_SHADER_* to SVGA3D_SHADERTYPE_*
d43 1
a43 2
static unsigned
svga_shader_type(unsigned shader)
d45 1
a45 9
   switch (shader) {
   case PIPE_SHADER_VERTEX:
      return SVGA3D_SHADERTYPE_VS;
   case PIPE_SHADER_FRAGMENT:
      return SVGA3D_SHADERTYPE_PS;
   default:
      assert(!"Unexpected shader type");
      return SVGA3D_SHADERTYPE_VS;
   }
d49 4
a52 9
/**
 * Check and emit one shader constant register.
 * \param shader  PIPE_SHADER_FRAGMENT or PIPE_SHADER_VERTEX
 * \param i  which float[4] constant to change
 * \param value  the new float[4] value
 */
static enum pipe_error
emit_const(struct svga_context *svga, unsigned shader, unsigned i,
           const float *value)
d54 1
a54 4
   enum pipe_error ret = PIPE_OK;

   assert(shader < PIPE_SHADER_TYPES);
   assert(i < SVGA3D_CONSTREG_MAX);
d56 1
a56 2
   if (memcmp(svga->state.hw_draw.cb[shader][i], value,
              4 * sizeof(float)) != 0) {
d58 1
a58 1
         debug_printf("%s %s %u: %f %f %f %f\n",
d60 1
a60 1
                      shader == PIPE_SHADER_VERTEX ? "VERT" : "FRAG",
d67 1
a67 1
      ret = SVGA3D_SetShaderConst( svga->swc,
d69 1
a69 1
                                   svga_shader_type(shader),
d72 1
a72 1
      if (ret != PIPE_OK)
d75 1
a75 1
      memcpy(svga->state.hw_draw.cb[shader][i], value, 4 * sizeof(float));
d77 1
a77 1

d81 3
a83 12

/*
 * Check and emit a range of shader constant registers, trying to coalesce
 * successive shader constant updates in a single command in order to save
 * space on the command buffer.  This is a HWv8 feature.
 */
static enum pipe_error
emit_const_range(struct svga_context *svga,
                 unsigned shader,
                 unsigned offset,
                 unsigned count,
                 const float (*values)[4])
a84 103
   unsigned i, j;
   enum pipe_error ret;

#ifdef DEBUG
   if (offset + count > SVGA3D_CONSTREG_MAX) {
      debug_printf("svga: too many constants (offset + count = %u)\n",
                   offset + count);
   }
#endif

   if (offset > SVGA3D_CONSTREG_MAX) {
      /* This isn't OK, but if we propagate an error all the way up we'll
       * just get into more trouble.
       * XXX note that offset is always zero at this time so this is moot.
       */
      return PIPE_OK;
   }

   if (offset + count > SVGA3D_CONSTREG_MAX) {
      /* Just drop the extra constants for now.
       * Ideally we should not have allowed the app to create a shader
       * that exceeds our constant buffer size but there's no way to
       * express that in gallium at this time.
       */
      count = SVGA3D_CONSTREG_MAX - offset;
   }

   i = 0;
   while (i < count) {
      if (memcmp(svga->state.hw_draw.cb[shader][offset + i],
                 values[i],
                 4 * sizeof(float)) != 0) {
         /* Found one dirty constant
          */
         if (SVGA_DEBUG & DEBUG_CONSTS)
            debug_printf("%s %s %d: %f %f %f %f\n",
                         __FUNCTION__,
                         shader == PIPE_SHADER_VERTEX ? "VERT" : "FRAG",
                         offset + i,
                         values[i][0],
                         values[i][1],
                         values[i][2],
                         values[i][3]);

         /* Look for more consecutive dirty constants.
          */
         j = i + 1;
         while (j < count &&
                j < i + MAX_CONST_REG_COUNT &&
                memcmp(svga->state.hw_draw.cb[shader][offset + j],
                       values[j],
                       4 * sizeof(float)) != 0) {

            if (SVGA_DEBUG & DEBUG_CONSTS)
               debug_printf("%s %s %d: %f %f %f %f\n",
                            __FUNCTION__,
                            shader == PIPE_SHADER_VERTEX ? "VERT" : "FRAG",
                            offset + j,
                            values[j][0],
                            values[j][1],
                            values[j][2],
                            values[j][3]);

            ++j;
         }

         assert(j >= i + 1);

         /* Send them all together.
          */
         ret = SVGA3D_SetShaderConsts(svga->swc,
                                      offset + i, j - i,
                                      svga_shader_type(shader),
                                      SVGA3D_CONST_TYPE_FLOAT,
                                      values + i);
         if (ret != PIPE_OK) {
            return ret;
         }

         /*
          * Local copy of the hardware state.
          */
         memcpy(svga->state.hw_draw.cb[shader][offset + i],
                values[i],
                (j - i) * 4 * sizeof(float));

         i = j + 1;
      } else {
         ++i;
      }
   }

   return PIPE_OK;
}


/**
 * Emit all the constants in a constant buffer for a shader stage.
 */
static enum pipe_error
emit_consts(struct svga_context *svga, unsigned shader)
{
   struct svga_screen *ss = svga_screen(svga->pipe.screen);
d89 1
a89 2
   enum pipe_error ret = PIPE_OK;
   const unsigned offset = 0;
d91 1
a91 3
   assert(shader < PIPE_SHADER_TYPES);

   if (svga->curr.cb[shader] == NULL)
d94 1
a94 1
   count = svga->curr.cb[shader]->width0 / (4 * sizeof(float));
d97 1
a97 1
                                              svga->curr.cb[shader],
d105 3
a107 3
   if (ss->hw_version >= SVGA3D_HWVERSION_WS8_B1) {
      ret = emit_const_range( svga, shader, offset, count, data );
      if (ret != PIPE_OK) {
a108 8
      }
   } else {
      for (i = 0; i < count; i++) {
         ret = emit_const( svga, shader, offset + i, data[i] );
         if (ret != PIPE_OK) {
            goto done;
         }
      }
d113 1
a113 1
      pipe_buffer_unmap(&svga->pipe, transfer);
d117 3
a119 4


static enum pipe_error
emit_fs_consts(struct svga_context *svga, unsigned dirty)
d122 2
a123 1
   enum pipe_error ret = PIPE_OK;
d125 2
a126 2
   ret = emit_consts( svga, PIPE_SHADER_FRAGMENT );
   if (ret != PIPE_OK)
d133 22
a154 25
   if (result) {
      const struct svga_fs_compile_key *key = &result->key.fkey;
      if (key->num_unnormalized_coords) {
         const unsigned offset =
            result->shader->info.file_max[TGSI_FILE_CONSTANT] + 1;
         unsigned i;

         for (i = 0; i < key->num_textures; i++) {
            if (key->tex[i].unnormalized) {
               struct pipe_resource *tex = svga->curr.sampler_views[i]->texture;
               float data[4];

               data[0] = 1.0f / (float) tex->width0;
               data[1] = 1.0f / (float) tex->height0;
               data[2] = 1.0f;
               data[3] = 1.0f;

               ret = emit_const(svga,
                                PIPE_SHADER_FRAGMENT,
                                key->tex[i].width_height_idx + offset,
                                data);
               if (ret != PIPE_OK) {
                  return ret;
               }
            }
d157 2
d161 1
a161 1
   return PIPE_OK;
d165 1
a165 1
struct svga_tracked_state svga_hw_fs_constants =
d174 2
d177 2
a178 3

static enum pipe_error
emit_vs_consts(struct svga_context *svga, unsigned dirty)
d181 2
a182 2
   const struct svga_vs_compile_key *key;
   enum pipe_error ret = PIPE_OK;
d187 2
a188 2
   if (result == NULL)
      return PIPE_OK;
d190 1
a190 3
   key = &result->key.vkey;

   /* SVGA_NEW_VS_CONST_BUFFER
d192 2
a193 2
   ret = emit_consts( svga, PIPE_SHADER_VERTEX );
   if (ret != PIPE_OK)
a195 1
   /* offset = number of constants in the VS const buffer */
d198 1
a198 2
   /* SVGA_NEW_VS_PRESCALE
    * Put the viewport pre-scale/translate values into the const buffer.
d203 1
a203 1
      if (ret != PIPE_OK)
d208 1
a208 1
      if (ret != PIPE_OK)
d212 17
a228 1
   return PIPE_OK;
d232 1
a232 1
struct svga_tracked_state svga_hw_vs_constants =
d237 1
d241 1
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a26 1
#include "util/u_memory.h"
a34 1
#include "svga_resource_buffer.h"
a43 5
/**
 * Extra space for svga-specific VS/PS constants (such as texcoord
 * scale factors, vertex transformation scale/translation).
 */
#define MAX_EXTRA_CONSTS 32
a44 2
/** Guest-backed surface constant buffers must be this size */
#define GB_CONSTBUF_SIZE (SVGA3D_CONSTREG_MAX)
a64 75
 * Emit any extra fragment shader constants into the buffer pointed
 * to by 'dest'.
 * In particular, these would be the scaling factors needed for handling
 * unnormalized texture coordinates for texture rectangles.
 * \return number of float[4] constants put into the dest buffer
 */
static unsigned
svga_get_extra_fs_constants(struct svga_context *svga, float *dest)
{
   const struct svga_shader_variant *variant = svga->state.hw_draw.fs;
   const struct svga_fs_compile_key *key = &variant->key.fkey;
   unsigned count = 0;

   /* SVGA_NEW_VS_VARIANT
    */
   if (key->num_unnormalized_coords) {
      unsigned i;

      for (i = 0; i < key->num_textures; i++) {
         if (key->tex[i].unnormalized) {
            struct pipe_resource *tex = svga->curr.sampler_views[i]->texture;

            /* debug/sanity check */
            assert(key->tex[i].width_height_idx == count);

            *dest++ = 1.0 / (float)tex->width0;
            *dest++ = 1.0 / (float)tex->height0;
            *dest++ = 1.0;
            *dest++ = 1.0;

            count++;
         }
      }
   }

   assert(count <= MAX_EXTRA_CONSTS);

   return count;
}


/**
 * Emit any extra vertex shader constants into the buffer pointed
 * to by 'dest'.
 * In particular, these would be the scale and bias factors computed
 * from the framebuffer size which are used to copy with differences in
 * GL vs D3D coordinate spaces.  See svga_tgsi_insn.c for more info.
 * \return number of float[4] constants put into the dest buffer
 */
static unsigned
svga_get_extra_vs_constants(struct svga_context *svga, float *dest)
{
   const struct svga_shader_variant *variant = svga->state.hw_draw.vs;
   const struct svga_vs_compile_key *key = &variant->key.vkey;
   unsigned count = 0;

   /* SVGA_NEW_VS_VARIANT
    */
   if (key->need_prescale) {
      memcpy(dest, svga->state.hw_clear.prescale.scale, 4 * sizeof(float));
      dest += 4;

      memcpy(dest, svga->state.hw_clear.prescale.translate, 4 * sizeof(float));
      dest += 4;

      count = 2;
   }

   assert(count <= MAX_EXTRA_CONSTS);

   return count;
}


/**
d123 2
a124 2
      debug_printf("svga: too many constants (offset %u + count %u = %u (max = %u))\n",
                   offset, count, offset + count, SVGA3D_CONSTREG_MAX);
d188 5
a192 15
         if (svga_have_gb_objects(svga)) {
            ret = SVGA3D_SetGBShaderConstsInline(svga->swc,
                                                 offset + i, /* start */
                                                 j - i,  /* count */
                                                 svga_shader_type(shader),
                                                 SVGA3D_CONST_TYPE_FLOAT,
                                                 values + i);
         }
         else {
            ret = SVGA3D_SetShaderConsts(svga->swc,
                                         offset + i, j - i,
                                         svga_shader_type(shader),
                                         SVGA3D_CONST_TYPE_FLOAT,
                                         values + i);
         }
d230 1
a230 1
   if (svga->curr.cbufs[shader].buffer == NULL)
d233 2
d236 1
a236 1
                                              svga->curr.cbufs[shader].buffer,
a243 8
   /* sanity check */
   assert(svga->curr.cbufs[shader].buffer->width0 >=
          svga->curr.cbufs[shader].buffer_size);

   /* Use/apply the constant buffer size and offsets here */
   count = svga->curr.cbufs[shader].buffer_size / (4 * sizeof(float));
   data += svga->curr.cbufs[shader].buffer_offset / (4 * sizeof(float));

d269 1
a269 2
   struct svga_screen *ss = svga_screen(svga->pipe.screen);
   const struct svga_shader_variant *variant = svga->state.hw_draw.fs;
a271 7
   /* SVGA_NEW_FS_VARIANT
    */
   if (variant == NULL)
      return PIPE_OK;

   /* SVGA_NEW_FS_CONST_BUFFER
    */
d276 29
a304 16
   /* emit extra shader constants */
   {
      unsigned offset = variant->shader->info.file_max[TGSI_FILE_CONSTANT] + 1;
      float extras[MAX_EXTRA_CONSTS][4];
      unsigned count, i;

      count = svga_get_extra_fs_constants(svga, (float *) extras);

      if (ss->hw_version >= SVGA3D_HWVERSION_WS8_B1) {
         ret = emit_const_range(svga, PIPE_SHADER_FRAGMENT, offset, count,
                                (const float (*) [4])extras);
      } else {
         for (i = 0; i < count; i++) {
            ret = emit_const(svga, PIPE_SHADER_FRAGMENT, offset + i, extras[i]);
            if (ret != PIPE_OK)
               return ret;
d309 1
a309 1
   return ret;
d317 1
a317 1
    SVGA_NEW_FS_VARIANT |
d327 2
a328 2
   struct svga_screen *ss = svga_screen(svga->pipe.screen);
   const struct svga_shader_variant *variant = svga->state.hw_draw.vs;
d330 1
d332 1
a332 1
   /* SVGA_NEW_VS_VARIANT
d334 1
a334 1
   if (variant == NULL)
d337 2
d345 16
a360 19
   /* emit extra shader constants */
   {
      unsigned offset = variant->shader->info.file_max[TGSI_FILE_CONSTANT] + 1;
      float extras[MAX_EXTRA_CONSTS][4];
      unsigned count, i;

      count = svga_get_extra_vs_constants(svga, (float *) extras);
      assert(count <= Elements(extras));

      if (ss->hw_version >= SVGA3D_HWVERSION_WS8_B1) {
         ret = emit_const_range(svga, PIPE_SHADER_VERTEX, offset, count,
                                (const float (*) [4]) extras);
      } else {
         for (i = 0; i < count; i++) {
            ret = emit_const(svga, PIPE_SHADER_VERTEX, offset + i, extras[i]);
            if (ret != PIPE_OK)
               return ret;
         }
      }
d363 1
a363 1
   return ret;
d372 1
a372 1
    SVGA_NEW_VS_VARIANT),
@


