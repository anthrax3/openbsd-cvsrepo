head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2013.09.05.14.01.08;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.57;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**********************************************************
 * Copyright 2008-2009 VMware, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 **********************************************************/

#ifndef SVGA_DRAW_H_
#define SVGA_DRAW_H_

#include "pipe/p_compiler.h"
#include "pipe/p_defines.h"
#include "indices/u_indices.h"
#include "svga_hw_reg.h"
#include "svga3d_shaderdefs.h"

struct svga_context;
struct u_upload_mgr;

/**
 * Mask indicating which types of gallium primitives are actually
 * handled by the svga device.  Other types will be converted to
 * these types by the index/translation code.
 */
static const unsigned svga_hw_prims = 
   ((1 << PIPE_PRIM_POINTS) |
    (1 << PIPE_PRIM_LINES) |
    (1 << PIPE_PRIM_LINE_STRIP) |
    (1 << PIPE_PRIM_TRIANGLES) |
    (1 << PIPE_PRIM_TRIANGLE_STRIP) |
    (1 << PIPE_PRIM_TRIANGLE_FAN));


/**
 * Translate a gallium PIPE_PRIM_x value to an SVGA3D_PRIMITIVE_x value.
 * Also, compute the number of primitives that'll be drawn given a
 * vertex count.
 * Note that this function doesn't have to handle PIPE_PRIM_LINE_LOOP,
 * PIPE_PRIM_QUADS, PIPE_PRIM_QUAD_STRIP or PIPE_PRIM_POLYGON.  We convert
 * those to other types of primitives with index/translation code.
 */
static INLINE unsigned
svga_translate_prim(unsigned mode, unsigned vcount,unsigned *prim_count)
{
   switch (mode) {
   case PIPE_PRIM_POINTS:
      *prim_count = vcount;
      return SVGA3D_PRIMITIVE_POINTLIST;

   case PIPE_PRIM_LINES:
      *prim_count = vcount / 2;
      return SVGA3D_PRIMITIVE_LINELIST; 

   case PIPE_PRIM_LINE_STRIP:
      *prim_count = vcount - 1;
      return SVGA3D_PRIMITIVE_LINESTRIP; 

   case PIPE_PRIM_TRIANGLES:
      *prim_count = vcount / 3;
      return SVGA3D_PRIMITIVE_TRIANGLELIST; 

   case PIPE_PRIM_TRIANGLE_STRIP:
      *prim_count = vcount - 2;
      return SVGA3D_PRIMITIVE_TRIANGLESTRIP; 

   case PIPE_PRIM_TRIANGLE_FAN:
      *prim_count = vcount - 2;
      return SVGA3D_PRIMITIVE_TRIANGLEFAN; 

   default:
      assert(0);
      *prim_count = 0;
      return 0;
   }
}


struct index_cache {
   u_generate_func generate;
   unsigned gen_nr;

   /* If non-null, this buffer is filled by calling 
    *   generate(nr, map(buffer))
    */
   struct pipe_resource *buffer;
};


/** Max number of primitives per draw call */
#define QSZ SVGA3D_MAX_DRAW_PRIMITIVE_RANGES

struct draw_cmd {
   struct svga_winsys_context *swc;

   SVGA3dVertexDecl vdecl[SVGA3D_INPUTREG_MAX];
   struct pipe_resource *vdecl_vb[SVGA3D_INPUTREG_MAX];
   unsigned vdecl_count;

   SVGA3dPrimitiveRange prim[QSZ];
   struct pipe_resource *prim_ib[QSZ];
   unsigned prim_count;
   unsigned min_index[QSZ];
   unsigned max_index[QSZ];
};

#define IDX_CACHE_MAX  8

struct svga_hwtnl {
   struct svga_context *svga;
   struct u_upload_mgr *upload_ib;

   /* Additional negative index bias due to partial buffer uploads
    * This is compensated for in the offset associated with all
    * vertex buffers.
    */

   int index_bias;
   
   /* Flatshade information:
    */
   unsigned api_pv;
   unsigned hw_pv;
   unsigned api_fillmode;

   /* Cache the results of running a particular generate func on each
    * primitive type.
    */
   struct index_cache index_cache[PIPE_PRIM_MAX][IDX_CACHE_MAX];

   /* Try to build the maximal draw command packet before emitting:
    */
   struct draw_cmd cmd;
};



/***********************************************************************
 * Internal functions
 */
enum pipe_error 
svga_hwtnl_prim( struct svga_hwtnl *hwtnl,
                 const SVGA3dPrimitiveRange *range,
                 unsigned min_index,
                 unsigned max_index,
                 struct pipe_resource *ib );

enum pipe_error
svga_hwtnl_simple_draw_range_elements( struct svga_hwtnl *hwtnl,
                                       struct pipe_resource *indexBuffer,
                                       unsigned index_size,
                                       int index_bias,
                                       unsigned min_index,
                                       unsigned max_index,
                                       unsigned prim, 
                                       unsigned start,
                                       unsigned count );


#endif
@


1.4
log
@Merge Mesa 9.2.0
@
text
@@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d38 4
a41 1
/* Should include polygon?
d52 10
a61 3
static INLINE unsigned svga_translate_prim(unsigned mode, 
                                           unsigned count,
                                           unsigned *out_count)
d65 1
a65 1
      *out_count = count;
d69 1
a69 1
      *out_count = count / 2;
d73 1
a73 1
      *out_count = count - 1;
d77 1
a77 1
      *out_count = count / 3;
d81 1
a81 1
      *out_count = count - 2;
d85 1
a85 1
      *out_count = count - 2;
d90 1
a90 1
      *out_count = 0;
d129 7
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d96 3
a98 1
#define QSZ 32
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d93 1
a93 1
   struct pipe_buffer *buffer;
d102 1
a102 1
   struct pipe_buffer *vdecl_vb[SVGA3D_INPUTREG_MAX];
d106 1
a106 1
   struct pipe_buffer *prim_ib[QSZ];
d144 1
a144 1
                 struct pipe_buffer *ib );
d148 1
a148 1
                                       struct pipe_buffer *indexBuffer,
d150 1
d155 1
a155 2
                                       unsigned count,
                                       unsigned bias );
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d93 1
a93 1
   struct pipe_resource *buffer;
d102 1
a102 1
   struct pipe_resource *vdecl_vb[SVGA3D_INPUTREG_MAX];
d106 1
a106 1
   struct pipe_resource *prim_ib[QSZ];
d144 1
a144 1
                 struct pipe_resource *ib );
d148 1
a148 1
                                       struct pipe_resource *indexBuffer,
a149 1
                                       int index_bias,
d154 2
a155 1
                                       unsigned count );
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d38 1
a38 4
/**
 * Mask indicating which types of gallium primitives are actually
 * handled by the svga device.  Other types will be converted to
 * these types by the index/translation code.
d49 3
a51 10
/**
 * Translate a gallium PIPE_PRIM_x value to an SVGA3D_PRIMITIVE_x value.
 * Also, compute the number of primitives that'll be drawn given a
 * vertex count.
 * Note that this function doesn't have to handle PIPE_PRIM_LINE_LOOP,
 * PIPE_PRIM_QUADS, PIPE_PRIM_QUAD_STRIP or PIPE_PRIM_POLYGON.  We convert
 * those to other types of primitives with index/translation code.
 */
static INLINE unsigned
svga_translate_prim(unsigned mode, unsigned vcount,unsigned *prim_count)
d55 1
a55 1
      *prim_count = vcount;
d59 1
a59 1
      *prim_count = vcount / 2;
d63 1
a63 1
      *prim_count = vcount - 1;
d67 1
a67 1
      *prim_count = vcount / 3;
d71 1
a71 1
      *prim_count = vcount - 2;
d75 1
a75 1
      *prim_count = vcount - 2;
d80 1
a80 1
      *prim_count = 0;
d96 1
a96 3

/** Max number of primitives per draw call */
#define QSZ SVGA3D_MAX_DRAW_PRIMITIVE_RANGES
a116 7

   /* Additional negative index bias due to partial buffer uploads
    * This is compensated for in the offset associated with all
    * vertex buffers.
    */

   int index_bias;
@


