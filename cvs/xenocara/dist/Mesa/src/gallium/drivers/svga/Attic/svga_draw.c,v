head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.08;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.57;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.16;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**********************************************************
 * Copyright 2008-2009 VMware, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 **********************************************************/

#include "pipe/p_compiler.h"
#include "util/u_inlines.h"
#include "pipe/p_defines.h"
#include "util/u_memory.h"
#include "util/u_math.h"
#include "util/u_upload_mgr.h"

#include "svga_context.h"
#include "svga_draw.h"
#include "svga_draw_private.h"
#include "svga_debug.h"
#include "svga_screen.h"
#include "svga_resource_buffer.h"
#include "svga_resource_texture.h"
#include "svga_surface.h"
#include "svga_winsys.h"
#include "svga_cmd.h"


struct svga_hwtnl *
svga_hwtnl_create(struct svga_context *svga)
{
   struct svga_hwtnl *hwtnl = CALLOC_STRUCT(svga_hwtnl);
   if (hwtnl == NULL)
      goto fail;

   hwtnl->svga = svga;

   hwtnl->cmd.swc = svga->swc;

   return hwtnl;

fail:
   return NULL;
}


void
svga_hwtnl_destroy(struct svga_hwtnl *hwtnl)
{
   unsigned i, j;

   for (i = 0; i < PIPE_PRIM_MAX; i++) {
      for (j = 0; j < IDX_CACHE_MAX; j++) {
         pipe_resource_reference(&hwtnl->index_cache[i][j].buffer, NULL);
      }
   }

   for (i = 0; i < hwtnl->cmd.vdecl_count; i++)
      pipe_resource_reference(&hwtnl->cmd.vdecl_vb[i], NULL);

   for (i = 0; i < hwtnl->cmd.prim_count; i++)
      pipe_resource_reference(&hwtnl->cmd.prim_ib[i], NULL);

   FREE(hwtnl);
}


void
svga_hwtnl_set_flatshade(struct svga_hwtnl *hwtnl,
                         boolean flatshade, boolean flatshade_first)
{
   hwtnl->hw_pv = PV_FIRST;
   hwtnl->api_pv = (flatshade && !flatshade_first) ? PV_LAST : PV_FIRST;
}


void
svga_hwtnl_set_unfilled(struct svga_hwtnl *hwtnl, unsigned mode)
{
   hwtnl->api_fillmode = mode;
}


void
svga_hwtnl_reset_vdecl(struct svga_hwtnl *hwtnl, unsigned count)
{
   unsigned i;

   assert(hwtnl->cmd.prim_count == 0);

   for (i = count; i < hwtnl->cmd.vdecl_count; i++) {
      pipe_resource_reference(&hwtnl->cmd.vdecl_vb[i], NULL);
   }

   hwtnl->cmd.vdecl_count = count;
}


void
svga_hwtnl_vdecl(struct svga_hwtnl *hwtnl,
                 unsigned i,
                 const SVGA3dVertexDecl * decl, struct pipe_resource *vb)
{
   assert(hwtnl->cmd.prim_count == 0);

   assert(i < hwtnl->cmd.vdecl_count);

   hwtnl->cmd.vdecl[i] = *decl;

   pipe_resource_reference(&hwtnl->cmd.vdecl_vb[i], vb);
}


/**
 * Determine whether the specified buffer is referred in the primitive queue,
 * for which no commands have been written yet.
 */
boolean
svga_hwtnl_is_buffer_referred(struct svga_hwtnl *hwtnl,
                              struct pipe_resource *buffer)
{
   unsigned i;

   if (svga_buffer_is_user_buffer(buffer)) {
      return FALSE;
   }

   if (!hwtnl->cmd.prim_count) {
      return FALSE;
   }

   for (i = 0; i < hwtnl->cmd.vdecl_count; ++i) {
      if (hwtnl->cmd.vdecl_vb[i] == buffer) {
         return TRUE;
      }
   }

   for (i = 0; i < hwtnl->cmd.prim_count; ++i) {
      if (hwtnl->cmd.prim_ib[i] == buffer) {
         return TRUE;
      }
   }

   return FALSE;
}


enum pipe_error
svga_hwtnl_flush(struct svga_hwtnl *hwtnl)
{
   struct svga_winsys_context *swc = hwtnl->cmd.swc;
   struct svga_context *svga = hwtnl->svga;
   enum pipe_error ret;

   if (hwtnl->cmd.prim_count) {
      struct svga_winsys_surface *vb_handle[SVGA3D_INPUTREG_MAX];
      struct svga_winsys_surface *ib_handle[QSZ];
      struct svga_winsys_surface *handle;
      SVGA3dVertexDecl *vdecl;
      SVGA3dPrimitiveRange *prim;
      unsigned i;

      for (i = 0; i < hwtnl->cmd.vdecl_count; i++) {
         assert(!svga_buffer_is_user_buffer(hwtnl->cmd.vdecl_vb[i]));
         handle = svga_buffer_handle(svga, hwtnl->cmd.vdecl_vb[i]);
         if (handle == NULL)
            return PIPE_ERROR_OUT_OF_MEMORY;

         vb_handle[i] = handle;
      }

      for (i = 0; i < hwtnl->cmd.prim_count; i++) {
         if (hwtnl->cmd.prim_ib[i]) {
            assert(!svga_buffer_is_user_buffer(hwtnl->cmd.prim_ib[i]));
            handle = svga_buffer_handle(svga, hwtnl->cmd.prim_ib[i]);
            if (handle == NULL)
               return PIPE_ERROR_OUT_OF_MEMORY;
         }
         else {
            handle = NULL;
         }

         ib_handle[i] = handle;
      }

      if (svga->rebind.rendertargets) {
         ret = svga_reemit_framebuffer_bindings(svga);
         if (ret != PIPE_OK) {
            return ret;
         }
      }

      if (svga->rebind.texture_samplers) {
         ret = svga_reemit_tss_bindings(svga);
         if (ret != PIPE_OK) {
            return ret;
         }
      }

      if (svga->rebind.vs) {
         ret = svga_reemit_vs_bindings(svga);
         if (ret != PIPE_OK) {
            return ret;
         }
      }

      if (svga->rebind.fs) {
         ret = svga_reemit_fs_bindings(svga);
         if (ret != PIPE_OK) {
            return ret;
         }
      }

      SVGA_DBG(DEBUG_DMA, "draw to sid %p, %d prims\n",
               svga->curr.framebuffer.cbufs[0] ?
               svga_surface(svga->curr.framebuffer.cbufs[0])->handle : NULL,
               hwtnl->cmd.prim_count);

      ret = SVGA3D_BeginDrawPrimitives(swc, &vdecl, hwtnl->cmd.vdecl_count,
                                       &prim, hwtnl->cmd.prim_count);
      if (ret != PIPE_OK)
         return ret;

      memcpy(vdecl, hwtnl->cmd.vdecl,
             hwtnl->cmd.vdecl_count * sizeof hwtnl->cmd.vdecl[0]);

      for (i = 0; i < hwtnl->cmd.vdecl_count; i++) {
         /* Given rangeHint is considered to be relative to indexBias, and 
          * indexBias varies per primitive, we cannot accurately supply an 
          * rangeHint when emitting more than one primitive per draw command.
          */
         if (hwtnl->cmd.prim_count == 1) {
            vdecl[i].rangeHint.first = hwtnl->cmd.min_index[0];
            vdecl[i].rangeHint.last = hwtnl->cmd.max_index[0] + 1;
         }
         else {
            vdecl[i].rangeHint.first = 0;
            vdecl[i].rangeHint.last = 0;
         }

         swc->surface_relocation(swc, &vdecl[i].array.surfaceId, NULL,
                                 vb_handle[i], SVGA_RELOC_READ);
      }

      memcpy(prim, hwtnl->cmd.prim,
             hwtnl->cmd.prim_count * sizeof hwtnl->cmd.prim[0]);

      for (i = 0; i < hwtnl->cmd.prim_count; i++) {
         swc->surface_relocation(swc, &prim[i].indexArray.surfaceId, NULL,
                                 ib_handle[i], SVGA_RELOC_READ);
         pipe_resource_reference(&hwtnl->cmd.prim_ib[i], NULL);
      }

      SVGA_FIFOCommitAll(swc);
      hwtnl->cmd.prim_count = 0;
   }

   return PIPE_OK;
}


void
svga_hwtnl_set_index_bias(struct svga_hwtnl *hwtnl, int index_bias)
{
   hwtnl->index_bias = index_bias;
}



/***********************************************************************
 * Internal functions:
 */

/**
 * For debugging only.
 */
static void
check_draw_params(struct svga_hwtnl *hwtnl,
                  const SVGA3dPrimitiveRange *range,
                  unsigned min_index, unsigned max_index,
                  struct pipe_resource *ib)
{
   unsigned i;

   for (i = 0; i < hwtnl->cmd.vdecl_count; i++) {
      struct pipe_resource *vb = hwtnl->cmd.vdecl_vb[i];
      unsigned size = vb ? vb->width0 : 0;
      unsigned offset = hwtnl->cmd.vdecl[i].array.offset;
      unsigned stride = hwtnl->cmd.vdecl[i].array.stride;
      int index_bias = (int) range->indexBias + hwtnl->index_bias;
      unsigned width;

      assert(vb);
      assert(size);
      assert(offset < size);
      assert(min_index <= max_index);

      switch (hwtnl->cmd.vdecl[i].identity.type) {
      case SVGA3D_DECLTYPE_FLOAT1:
         width = 4;
         break;
      case SVGA3D_DECLTYPE_FLOAT2:
         width = 4 * 2;
         break;
      case SVGA3D_DECLTYPE_FLOAT3:
         width = 4 * 3;
         break;
      case SVGA3D_DECLTYPE_FLOAT4:
         width = 4 * 4;
         break;
      case SVGA3D_DECLTYPE_D3DCOLOR:
         width = 4;
         break;
      case SVGA3D_DECLTYPE_UBYTE4:
         width = 1 * 4;
         break;
      case SVGA3D_DECLTYPE_SHORT2:
         width = 2 * 2;
         break;
      case SVGA3D_DECLTYPE_SHORT4:
         width = 2 * 4;
         break;
      case SVGA3D_DECLTYPE_UBYTE4N:
         width = 1 * 4;
         break;
      case SVGA3D_DECLTYPE_SHORT2N:
         width = 2 * 2;
         break;
      case SVGA3D_DECLTYPE_SHORT4N:
         width = 2 * 4;
         break;
      case SVGA3D_DECLTYPE_USHORT2N:
         width = 2 * 2;
         break;
      case SVGA3D_DECLTYPE_USHORT4N:
         width = 2 * 4;
         break;
      case SVGA3D_DECLTYPE_UDEC3:
         width = 4;
         break;
      case SVGA3D_DECLTYPE_DEC3N:
         width = 4;
         break;
      case SVGA3D_DECLTYPE_FLOAT16_2:
         width = 2 * 2;
         break;
      case SVGA3D_DECLTYPE_FLOAT16_4:
         width = 2 * 4;
         break;
      default:
         assert(0);
         width = 0;
         break;
      }

      if (index_bias >= 0) {
         assert(offset + index_bias * stride + width <= size);
      }

      /*
       * min_index/max_index are merely conservative guesses, so we can't
       * make buffer overflow detection based on their values.
       */
   }

   assert(range->indexWidth == range->indexArray.stride);

   if (ib) {
      unsigned size = ib->width0;
      unsigned offset = range->indexArray.offset;
      unsigned stride = range->indexArray.stride;
      unsigned count;

      assert(size);
      assert(offset < size);
      assert(stride);

      switch (range->primType) {
      case SVGA3D_PRIMITIVE_POINTLIST:
         count = range->primitiveCount;
         break;
      case SVGA3D_PRIMITIVE_LINELIST:
         count = range->primitiveCount * 2;
         break;
      case SVGA3D_PRIMITIVE_LINESTRIP:
         count = range->primitiveCount + 1;
         break;
      case SVGA3D_PRIMITIVE_TRIANGLELIST:
         count = range->primitiveCount * 3;
         break;
      case SVGA3D_PRIMITIVE_TRIANGLESTRIP:
         count = range->primitiveCount + 2;
         break;
      case SVGA3D_PRIMITIVE_TRIANGLEFAN:
         count = range->primitiveCount + 2;
         break;
      default:
         assert(0);
         count = 0;
         break;
      }

      assert(offset + count * stride <= size);
   }
}


enum pipe_error
svga_hwtnl_prim(struct svga_hwtnl *hwtnl,
                const SVGA3dPrimitiveRange * range,
                unsigned min_index,
                unsigned max_index, struct pipe_resource *ib)
{
   enum pipe_error ret = PIPE_OK;

#ifdef DEBUG
   check_draw_params(hwtnl, range, min_index, max_index, ib);
#endif

   if (hwtnl->cmd.prim_count + 1 >= QSZ) {
      ret = svga_hwtnl_flush(hwtnl);
      if (ret != PIPE_OK)
         return ret;
   }

   /* min/max indices are relative to bias */
   hwtnl->cmd.min_index[hwtnl->cmd.prim_count] = min_index;
   hwtnl->cmd.max_index[hwtnl->cmd.prim_count] = max_index;

   hwtnl->cmd.prim[hwtnl->cmd.prim_count] = *range;
   hwtnl->cmd.prim[hwtnl->cmd.prim_count].indexBias += hwtnl->index_bias;

   pipe_resource_reference(&hwtnl->cmd.prim_ib[hwtnl->cmd.prim_count], ib);
   hwtnl->cmd.prim_count++;

   return ret;
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d45 2
a46 3
struct svga_hwtnl *svga_hwtnl_create( struct svga_context *svga,
                                      struct u_upload_mgr *upload_ib,
                                      struct svga_winsys_context *swc )
d53 2
a54 3
   hwtnl->upload_ib = upload_ib;
   
   hwtnl->cmd.swc = swc;
d62 3
a64 1
void svga_hwtnl_destroy( struct svga_hwtnl *hwtnl )
d70 1
a70 2
         pipe_resource_reference( &hwtnl->index_cache[i][j].buffer,
                                NULL );
a78 1
      
d84 3
a86 3
void svga_hwtnl_set_flatshade( struct svga_hwtnl *hwtnl,
                               boolean flatshade,
                               boolean flatshade_first )
d90 1
a90 1
}                               
d92 3
a94 2
void svga_hwtnl_set_unfilled( struct svga_hwtnl *hwtnl,
                              unsigned mode )
d97 2
a98 1
}                               
d100 2
a101 2
void svga_hwtnl_reset_vdecl( struct svga_hwtnl *hwtnl,
                             unsigned count )
d108 1
a108 2
      pipe_resource_reference(&hwtnl->cmd.vdecl_vb[i],
                            NULL);
d115 4
a118 4
void svga_hwtnl_vdecl( struct svga_hwtnl *hwtnl,
		       unsigned i,
		       const SVGA3dVertexDecl *decl,
		       struct pipe_resource *vb)
d122 1
a122 1
   assert( i < hwtnl->cmd.vdecl_count );
d126 1
a126 1
   pipe_resource_reference(&hwtnl->cmd.vdecl_vb[i], vb);   
d135 2
a136 2
svga_hwtnl_is_buffer_referred( struct svga_hwtnl *hwtnl,
                               struct pipe_resource *buffer)
d165 1
a165 1
svga_hwtnl_flush( struct svga_hwtnl *hwtnl )
a178 3
      /* Unmap upload manager vertex buffers */
      u_upload_unmap(svga->upload_vb);

d180 1
a187 3
      /* Unmap upload manager index buffers */
      u_upload_unmap(svga->upload_ib);

d190 1
d195 1
a195 1
         else
d197 1
d216 14
d235 3
a237 6
      ret = SVGA3D_BeginDrawPrimitives(swc, 
                                       &vdecl, 
                                       hwtnl->cmd.vdecl_count, 
                                       &prim, 
                                       hwtnl->cmd.prim_count);
      if (ret != PIPE_OK) 
d240 2
a241 4
      
      memcpy( vdecl,
              hwtnl->cmd.vdecl,
              hwtnl->cmd.vdecl_count * sizeof hwtnl->cmd.vdecl[0]);
d257 2
a258 4
         swc->surface_relocation(swc,
                                 &vdecl[i].array.surfaceId,
                                 vb_handle[i],
                                 SVGA_RELOC_READ);
d261 2
a262 3
      memcpy( prim,
              hwtnl->cmd.prim,
              hwtnl->cmd.prim_count * sizeof hwtnl->cmd.prim[0]);
d265 2
a266 4
         swc->surface_relocation(swc,
                                 &prim[i].indexArray.surfaceId,
                                 ib_handle[i],
                                 SVGA_RELOC_READ);
d269 2
a270 2
      
      SVGA_FIFOCommitAll( swc );
d278 2
a279 2
void svga_hwtnl_set_index_bias( struct svga_hwtnl *hwtnl,
				int index_bias)
d290 8
a297 5
enum pipe_error svga_hwtnl_prim( struct svga_hwtnl *hwtnl,
                                 const SVGA3dPrimitiveRange *range,
                                 unsigned min_index,
                                 unsigned max_index,
                                 struct pipe_resource *ib )
d299 1
a299 1
   enum pipe_error ret = PIPE_OK;
d301 80
a380 73
#ifdef DEBUG
   {
      unsigned i;
      for (i = 0; i < hwtnl->cmd.vdecl_count; i++) {
         struct pipe_resource *vb = hwtnl->cmd.vdecl_vb[i];
         unsigned size = vb ? vb->width0 : 0;
         unsigned offset = hwtnl->cmd.vdecl[i].array.offset;
         unsigned stride = hwtnl->cmd.vdecl[i].array.stride;
         int index_bias = (int) range->indexBias + hwtnl->index_bias;
         unsigned width;

         assert(vb);
         assert(size);
         assert(offset < size);
         assert(min_index <= max_index);

         switch (hwtnl->cmd.vdecl[i].identity.type) {
         case SVGA3D_DECLTYPE_FLOAT1:
            width = 4;
            break;
         case SVGA3D_DECLTYPE_FLOAT2:
            width = 4*2;
            break;
         case SVGA3D_DECLTYPE_FLOAT3:
            width = 4*3;
            break;
         case SVGA3D_DECLTYPE_FLOAT4:
            width = 4*4;
            break;
         case SVGA3D_DECLTYPE_D3DCOLOR:
            width = 4;
            break;
         case SVGA3D_DECLTYPE_UBYTE4:
            width = 1*4;
            break;
         case SVGA3D_DECLTYPE_SHORT2:
            width = 2*2;
            break;
         case SVGA3D_DECLTYPE_SHORT4:
            width = 2*4;
            break;
         case SVGA3D_DECLTYPE_UBYTE4N:
            width = 1*4;
            break;
         case SVGA3D_DECLTYPE_SHORT2N:
            width = 2*2;
            break;
         case SVGA3D_DECLTYPE_SHORT4N:
            width = 2*4;
            break;
         case SVGA3D_DECLTYPE_USHORT2N:
            width = 2*2;
            break;
         case SVGA3D_DECLTYPE_USHORT4N:
            width = 2*4;
            break;
         case SVGA3D_DECLTYPE_UDEC3:
            width = 4;
            break;
         case SVGA3D_DECLTYPE_DEC3N:
            width = 4;
            break;
         case SVGA3D_DECLTYPE_FLOAT16_2:
            width = 2*2;
            break;
         case SVGA3D_DECLTYPE_FLOAT16_4:
            width = 2*4;
            break;
         default:
            assert(0);
            width = 0;
            break;
         }
d382 1
a382 3
         if (index_bias >= 0) {
            assert(offset + index_bias*stride + width <= size);
         }
d384 33
a416 4
         /*
          * min_index/max_index are merely conservative guesses, so we can't
          * make buffer overflow detection based on their values.
          */
d419 4
a422 1
      assert(range->indexWidth == range->indexArray.stride);
d424 7
a430 34
      if(ib) {
         unsigned size = ib->width0;
         unsigned offset = range->indexArray.offset;
         unsigned stride = range->indexArray.stride;
         unsigned count;

         assert(size);
         assert(offset < size);
         assert(stride);

         switch (range->primType) {
         case SVGA3D_PRIMITIVE_POINTLIST:
            count = range->primitiveCount;
            break;
         case SVGA3D_PRIMITIVE_LINELIST:
            count = range->primitiveCount * 2;
            break;
         case SVGA3D_PRIMITIVE_LINESTRIP:
            count = range->primitiveCount + 1;
            break;
         case SVGA3D_PRIMITIVE_TRIANGLELIST:
            count = range->primitiveCount * 3;
            break;
         case SVGA3D_PRIMITIVE_TRIANGLESTRIP:
            count = range->primitiveCount + 2;
            break;
         case SVGA3D_PRIMITIVE_TRIANGLEFAN:
            count = range->primitiveCount + 2;
            break;
         default:
            assert(0);
            count = 0;
            break;
         }
d432 2
a433 3
         assert(offset + count*stride <= size);
      }
   }
d436 2
a437 2
   if (hwtnl->cmd.prim_count+1 >= QSZ) {
      ret = svga_hwtnl_flush( hwtnl );
d441 1
a441 1
   
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d66 1
a66 1
   int i, j;
d131 33
d181 1
a181 1
      u_upload_flush(svga->upload_vb);
d192 1
a192 1
      u_upload_flush(svga->upload_ib);
d278 5
d296 1
a296 1
   int ret = PIPE_OK;
d306 1
a306 1
         unsigned index_bias = range->indexBias;
a311 1
         assert(index_bias >= 0);
a312 4
         assert(offset + index_bias*stride < size);
         if (min_index != ~0) {
            assert(offset + (index_bias + min_index) * stride < size);
         }
d372 2
a373 2
         if (max_index != ~0) {
            assert(offset + (index_bias + max_index) * stride + width <= size);
d375 5
d435 1
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d31 1
d147 3
d158 3
d173 14
a338 1
         assert(!stride || width <= stride);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d37 3
a39 2
#include "svga_screen_buffer.h"
#include "svga_screen_texture.h"
d69 1
a69 1
         pipe_buffer_reference( &hwtnl->index_cache[i][j].buffer,
d75 1
a75 1
      pipe_buffer_reference(&hwtnl->cmd.vdecl_vb[i], NULL);
d78 1
a78 1
      pipe_buffer_reference(&hwtnl->cmd.prim_ib[i], NULL);
d107 1
a107 1
      pipe_buffer_reference(&hwtnl->cmd.vdecl_vb[i],
d116 3
a118 3
                          unsigned i,
                          const SVGA3dVertexDecl *decl,
                          struct pipe_buffer *vb)
d126 1
a126 2
   pipe_buffer_reference(&hwtnl->cmd.vdecl_vb[i],
                         vb);   
d201 1
a201 1
                                 PIPE_BUFFER_USAGE_GPU_READ);
d212 2
a213 2
                                 PIPE_BUFFER_USAGE_GPU_READ);
         pipe_buffer_reference(&hwtnl->cmd.prim_ib[i], NULL);
d235 1
a235 1
                                 struct pipe_buffer *ib )
d243 2
a244 2
         struct pipe_buffer *vb = hwtnl->cmd.vdecl_vb[i];
         unsigned size = vb ? vb->size : 0;
d327 1
a327 1
         unsigned size = ib->size;
d378 1
a378 1
   pipe_buffer_reference(&hwtnl->cmd.prim_ib[hwtnl->cmd.prim_count], ib);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d37 2
a38 3
#include "svga_resource_buffer.h"
#include "svga_resource_texture.h"
#include "svga_surface.h"
d68 1
a68 1
         pipe_resource_reference( &hwtnl->index_cache[i][j].buffer,
d74 1
a74 1
      pipe_resource_reference(&hwtnl->cmd.vdecl_vb[i], NULL);
d77 1
a77 1
      pipe_resource_reference(&hwtnl->cmd.prim_ib[i], NULL);
d106 1
a106 1
      pipe_resource_reference(&hwtnl->cmd.vdecl_vb[i],
d115 3
a117 3
		       unsigned i,
		       const SVGA3dVertexDecl *decl,
		       struct pipe_resource *vb)
d125 2
a126 1
   pipe_resource_reference(&hwtnl->cmd.vdecl_vb[i], vb);   
d201 1
a201 1
                                 SVGA_RELOC_READ);
d212 2
a213 2
                                 SVGA_RELOC_READ);
         pipe_resource_reference(&hwtnl->cmd.prim_ib[i], NULL);
d235 1
a235 1
                                 struct pipe_resource *ib )
d243 2
a244 2
         struct pipe_resource *vb = hwtnl->cmd.vdecl_vb[i];
         unsigned size = vb ? vb->width0 : 0;
d327 1
a327 1
         unsigned size = ib->width0;
d378 1
a378 1
   pipe_resource_reference(&hwtnl->cmd.prim_ib[hwtnl->cmd.prim_count], ib);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a30 1
#include "util/u_upload_mgr.h"
d65 1
a65 1
   unsigned i, j;
a129 33
/**
 * Determine whether the specified buffer is referred in the primitive queue,
 * for which no commands have been written yet.
 */
boolean
svga_hwtnl_is_buffer_referred( struct svga_hwtnl *hwtnl,
                               struct pipe_resource *buffer)
{
   unsigned i;

   if (svga_buffer_is_user_buffer(buffer)) {
      return FALSE;
   }

   if (!hwtnl->cmd.prim_count) {
      return FALSE;
   }

   for (i = 0; i < hwtnl->cmd.vdecl_count; ++i) {
      if (hwtnl->cmd.vdecl_vb[i] == buffer) {
         return TRUE;
      }
   }

   for (i = 0; i < hwtnl->cmd.prim_count; ++i) {
      if (hwtnl->cmd.prim_ib[i] == buffer) {
         return TRUE;
      }
   }

   return FALSE;
}

a145 3
      /* Unmap upload manager vertex buffers */
      u_upload_unmap(svga->upload_vb);

a153 3
      /* Unmap upload manager index buffers */
      u_upload_unmap(svga->upload_ib);

a165 14
      if (svga->rebind.rendertargets) {
         ret = svga_reemit_framebuffer_bindings(svga);
         if (ret != PIPE_OK) {
            return ret;
         }
      }

      if (svga->rebind.texture_samplers) {
         ret = svga_reemit_tss_bindings(svga);
         if (ret != PIPE_OK) {
            return ret;
         }
      }

a223 5
void svga_hwtnl_set_index_bias( struct svga_hwtnl *hwtnl,
				int index_bias)
{
   hwtnl->index_bias = index_bias;
}
d237 1
a237 1
   enum pipe_error ret = PIPE_OK;
d247 1
a247 1
         int index_bias = (int) range->indexBias + hwtnl->index_bias;
d253 1
d255 4
d318 3
a320 2
         if (index_bias >= 0) {
            assert(offset + index_bias*stride + width <= size);
a321 5

         /*
          * min_index/max_index are merely conservative guesses, so we can't
          * make buffer overflow detection based on their values.
          */
a376 1
   hwtnl->cmd.prim[hwtnl->cmd.prim_count].indexBias += hwtnl->index_bias;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d45 3
a47 2
struct svga_hwtnl *
svga_hwtnl_create(struct svga_context *svga)
d54 3
a56 2

   hwtnl->cmd.swc = svga->swc;
d64 1
a64 3

void
svga_hwtnl_destroy(struct svga_hwtnl *hwtnl)
d70 2
a71 1
         pipe_resource_reference(&hwtnl->index_cache[i][j].buffer, NULL);
d80 1
d86 3
a88 3
void
svga_hwtnl_set_flatshade(struct svga_hwtnl *hwtnl,
                         boolean flatshade, boolean flatshade_first)
d92 1
a92 1
}
d94 2
a95 3

void
svga_hwtnl_set_unfilled(struct svga_hwtnl *hwtnl, unsigned mode)
d98 1
a98 2
}

d100 2
a101 2
void
svga_hwtnl_reset_vdecl(struct svga_hwtnl *hwtnl, unsigned count)
d108 2
a109 1
      pipe_resource_reference(&hwtnl->cmd.vdecl_vb[i], NULL);
d116 4
a119 4
void
svga_hwtnl_vdecl(struct svga_hwtnl *hwtnl,
                 unsigned i,
                 const SVGA3dVertexDecl * decl, struct pipe_resource *vb)
d123 1
a123 1
   assert(i < hwtnl->cmd.vdecl_count);
d127 1
a127 1
   pipe_resource_reference(&hwtnl->cmd.vdecl_vb[i], vb);
d136 2
a137 2
svga_hwtnl_is_buffer_referred(struct svga_hwtnl *hwtnl,
                              struct pipe_resource *buffer)
d166 1
a166 1
svga_hwtnl_flush(struct svga_hwtnl *hwtnl)
d180 3
a183 1
         assert(!svga_buffer_is_user_buffer(hwtnl->cmd.vdecl_vb[i]));
d191 3
a195 1
            assert(!svga_buffer_is_user_buffer(hwtnl->cmd.prim_ib[i]));
d200 1
a200 1
         else {
a201 1
         }
a219 14
      if (svga->rebind.vs) {
         ret = svga_reemit_vs_bindings(svga);
         if (ret != PIPE_OK) {
            return ret;
         }
      }

      if (svga->rebind.fs) {
         ret = svga_reemit_fs_bindings(svga);
         if (ret != PIPE_OK) {
            return ret;
         }
      }

d225 6
a230 3
      ret = SVGA3D_BeginDrawPrimitives(swc, &vdecl, hwtnl->cmd.vdecl_count,
                                       &prim, hwtnl->cmd.prim_count);
      if (ret != PIPE_OK)
d233 4
a236 2
      memcpy(vdecl, hwtnl->cmd.vdecl,
             hwtnl->cmd.vdecl_count * sizeof hwtnl->cmd.vdecl[0]);
d252 4
a255 2
         swc->surface_relocation(swc, &vdecl[i].array.surfaceId, NULL,
                                 vb_handle[i], SVGA_RELOC_READ);
d258 3
a260 2
      memcpy(prim, hwtnl->cmd.prim,
             hwtnl->cmd.prim_count * sizeof hwtnl->cmd.prim[0]);
d263 4
a266 2
         swc->surface_relocation(swc, &prim[i].indexArray.surfaceId, NULL,
                                 ib_handle[i], SVGA_RELOC_READ);
d269 2
a270 2

      SVGA_FIFOCommitAll(swc);
d278 2
a279 2
void
svga_hwtnl_set_index_bias(struct svga_hwtnl *hwtnl, int index_bias)
d290 5
a294 8
/**
 * For debugging only.
 */
static void
check_draw_params(struct svga_hwtnl *hwtnl,
                  const SVGA3dPrimitiveRange *range,
                  unsigned min_index, unsigned max_index,
                  struct pipe_resource *ib)
d296 1
a296 1
   unsigned i;
d298 73
a370 80
   for (i = 0; i < hwtnl->cmd.vdecl_count; i++) {
      struct pipe_resource *vb = hwtnl->cmd.vdecl_vb[i];
      unsigned size = vb ? vb->width0 : 0;
      unsigned offset = hwtnl->cmd.vdecl[i].array.offset;
      unsigned stride = hwtnl->cmd.vdecl[i].array.stride;
      int index_bias = (int) range->indexBias + hwtnl->index_bias;
      unsigned width;

      assert(vb);
      assert(size);
      assert(offset < size);
      assert(min_index <= max_index);

      switch (hwtnl->cmd.vdecl[i].identity.type) {
      case SVGA3D_DECLTYPE_FLOAT1:
         width = 4;
         break;
      case SVGA3D_DECLTYPE_FLOAT2:
         width = 4 * 2;
         break;
      case SVGA3D_DECLTYPE_FLOAT3:
         width = 4 * 3;
         break;
      case SVGA3D_DECLTYPE_FLOAT4:
         width = 4 * 4;
         break;
      case SVGA3D_DECLTYPE_D3DCOLOR:
         width = 4;
         break;
      case SVGA3D_DECLTYPE_UBYTE4:
         width = 1 * 4;
         break;
      case SVGA3D_DECLTYPE_SHORT2:
         width = 2 * 2;
         break;
      case SVGA3D_DECLTYPE_SHORT4:
         width = 2 * 4;
         break;
      case SVGA3D_DECLTYPE_UBYTE4N:
         width = 1 * 4;
         break;
      case SVGA3D_DECLTYPE_SHORT2N:
         width = 2 * 2;
         break;
      case SVGA3D_DECLTYPE_SHORT4N:
         width = 2 * 4;
         break;
      case SVGA3D_DECLTYPE_USHORT2N:
         width = 2 * 2;
         break;
      case SVGA3D_DECLTYPE_USHORT4N:
         width = 2 * 4;
         break;
      case SVGA3D_DECLTYPE_UDEC3:
         width = 4;
         break;
      case SVGA3D_DECLTYPE_DEC3N:
         width = 4;
         break;
      case SVGA3D_DECLTYPE_FLOAT16_2:
         width = 2 * 2;
         break;
      case SVGA3D_DECLTYPE_FLOAT16_4:
         width = 2 * 4;
         break;
      default:
         assert(0);
         width = 0;
         break;
      }

      if (index_bias >= 0) {
         assert(offset + index_bias * stride + width <= size);
      }

      /*
       * min_index/max_index are merely conservative guesses, so we can't
       * make buffer overflow detection based on their values.
       */
   }
d372 3
a374 1
   assert(range->indexWidth == range->indexArray.stride);
d376 4
a379 33
   if (ib) {
      unsigned size = ib->width0;
      unsigned offset = range->indexArray.offset;
      unsigned stride = range->indexArray.stride;
      unsigned count;

      assert(size);
      assert(offset < size);
      assert(stride);

      switch (range->primType) {
      case SVGA3D_PRIMITIVE_POINTLIST:
         count = range->primitiveCount;
         break;
      case SVGA3D_PRIMITIVE_LINELIST:
         count = range->primitiveCount * 2;
         break;
      case SVGA3D_PRIMITIVE_LINESTRIP:
         count = range->primitiveCount + 1;
         break;
      case SVGA3D_PRIMITIVE_TRIANGLELIST:
         count = range->primitiveCount * 3;
         break;
      case SVGA3D_PRIMITIVE_TRIANGLESTRIP:
         count = range->primitiveCount + 2;
         break;
      case SVGA3D_PRIMITIVE_TRIANGLEFAN:
         count = range->primitiveCount + 2;
         break;
      default:
         assert(0);
         count = 0;
         break;
d382 1
a382 3
      assert(offset + count * stride <= size);
   }
}
d384 34
d419 3
a421 10
enum pipe_error
svga_hwtnl_prim(struct svga_hwtnl *hwtnl,
                const SVGA3dPrimitiveRange * range,
                unsigned min_index,
                unsigned max_index, struct pipe_resource *ib)
{
   enum pipe_error ret = PIPE_OK;

#ifdef DEBUG
   check_draw_params(hwtnl, range, min_index, max_index, ib);
d424 2
a425 2
   if (hwtnl->cmd.prim_count + 1 >= QSZ) {
      ret = svga_hwtnl_flush(hwtnl);
d429 1
a429 1

@


