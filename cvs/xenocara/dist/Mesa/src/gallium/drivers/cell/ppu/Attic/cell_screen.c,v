head	1.4;
access;
symbols
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.09.05.14.00.00;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.26;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@/**************************************************************************
 * 
 * Copyright 2008 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/


#include "util/u_memory.h"
#include "util/u_simple_screen.h"
#include "pipe/p_defines.h"
#include "pipe/p_screen.h"

#include "cell/common.h"
#include "cell_context.h"
#include "cell_screen.h"
#include "cell_texture.h"
#include "cell_public.h"

#include "state_tracker/sw_winsys.h"


static const char *
cell_get_vendor(struct pipe_screen *screen)
{
   return "VMware, Inc.";
}


static const char *
cell_get_name(struct pipe_screen *screen)
{
   return "Cell";
}


static int
cell_get_param(struct pipe_screen *screen, enum pipe_cap param)
{
   switch (param) {
   case PIPE_CAP_MAX_TEXTURE_IMAGE_UNITS:
      return CELL_MAX_SAMPLERS;
   case PIPE_CAP_MAX_COMBINED_SAMPLERS:
      return CELL_MAX_SAMPLERS;
   case PIPE_CAP_NPOT_TEXTURES:
      return 1;
   case PIPE_CAP_TWO_SIDED_STENCIL:
      return 1;
   case PIPE_CAP_GLSL:
      return 1;
   case PIPE_CAP_ANISOTROPIC_FILTER:
      return 0;
   case PIPE_CAP_POINT_SPRITE:
      return 1;
   case PIPE_CAP_MAX_RENDER_TARGETS:
      return 1;
   case PIPE_CAP_OCCLUSION_QUERY:
      return 1;
   case PIPE_CAP_TIMER_QUERY:
      return 0;
   case PIPE_CAP_TEXTURE_SHADOW_MAP:
      return 10;
   case PIPE_CAP_MAX_TEXTURE_2D_LEVELS:
      return CELL_MAX_TEXTURE_LEVELS;
   case PIPE_CAP_MAX_TEXTURE_3D_LEVELS:
      return 8;  /* max 128x128x128 */
   case PIPE_CAP_MAX_TEXTURE_CUBE_LEVELS:
      return CELL_MAX_TEXTURE_LEVELS;
   case PIPE_CAP_TEXTURE_MIRROR_REPEAT:
      return 1; /* XXX not really true */
   case PIPE_CAP_TEXTURE_MIRROR_CLAMP:
      return 0; /* XXX to do */
   case PIPE_CAP_TGSI_FS_COORD_ORIGIN_UPPER_LEFT:
   case PIPE_CAP_TGSI_FS_COORD_PIXEL_CENTER_HALF_INTEGER:
      return 1;
   case PIPE_CAP_TGSI_FS_COORD_ORIGIN_LOWER_LEFT:
   case PIPE_CAP_TGSI_FS_COORD_PIXEL_CENTER_INTEGER:
      return 0;
   case PIPE_CAP_BLEND_EQUATION_SEPARATE:
      return 1;
   default:
      return 0;
   }
}

static int
cell_get_shader_param(struct pipe_screen *screen, unsigned shader, enum pipe_shader_cap param)
{
   switch(shader)
   {
   case PIPE_SHADER_FRAGMENT:
      return tgsi_exec_get_shader_param(param);
   case PIPE_SHADER_VERTEX:
   case PIPE_SHADER_GEOMETRY:
      return draw_get_shader_param(shader, param);
   default:
      return 0;
   }
}

static float
cell_get_paramf(struct pipe_screen *screen, enum pipe_cap param)
{
   switch (param) {
   case PIPE_CAP_MAX_LINE_WIDTH:
      /* fall-through */
   case PIPE_CAP_MAX_LINE_WIDTH_AA:
      return 255.0; /* arbitrary */

   case PIPE_CAP_MAX_POINT_WIDTH:
      /* fall-through */
   case PIPE_CAP_MAX_POINT_WIDTH_AA:
      return 255.0; /* arbitrary */

   case PIPE_CAP_MAX_TEXTURE_ANISOTROPY:
      return 0.0;

   case PIPE_CAP_MAX_TEXTURE_LOD_BIAS:
      return 16.0; /* arbitrary */

   default:
      return 0;
   }
}


static boolean
cell_is_format_supported( struct pipe_screen *screen,
                          enum pipe_format format,
                          enum pipe_texture_target target,
                          unsigned sample_count,
                          unsigned tex_usage)
{
   struct sw_winsys *winsys = cell_screen(screen)->winsys;

   if (sample_count > 1)
      return FALSE;

   if (tex_usage & (PIPE_BIND_DISPLAY_TARGET |
                    PIPE_BIND_SCANOUT |
                    PIPE_BIND_SHARED)) {
      if (!winsys->is_displaytarget_format_supported(winsys, tex_usage, format))
         return FALSE;
   }

   /* only a few formats are known to work at this time */
   switch (format) {
   case PIPE_FORMAT_Z24_UNORM_S8_USCALED:
   case PIPE_FORMAT_Z24X8_UNORM:
   case PIPE_FORMAT_B8G8R8A8_UNORM:
   case PIPE_FORMAT_I8_UNORM:
      return TRUE;
   default:
      return FALSE;
   }
}


static void
cell_destroy_screen( struct pipe_screen *screen )
{
   struct cell_screen *sp_screen = cell_screen(screen);
   struct sw_winsys *winsys = sp_screen->winsys;

   if(winsys->destroy)
      winsys->destroy(winsys);

   FREE(screen);
}



/**
 * Create a new pipe_screen object
 * Note: we're not presently subclassing pipe_screen (no cell_screen) but
 * that would be the place to put SPU thread/context info...
 */
struct pipe_screen *
cell_create_screen(struct sw_winsys *winsys)
{
   struct cell_screen *screen = CALLOC_STRUCT(cell_screen);

   if (!screen)
      return NULL;

   screen->winsys = winsys;
   screen->base.winsys = NULL;

   screen->base.destroy = cell_destroy_screen;

   screen->base.get_name = cell_get_name;
   screen->base.get_vendor = cell_get_vendor;
   screen->base.get_param = cell_get_param;
   screen->base.get_shader_param = cell_get_shader_param;
   screen->base.get_paramf = cell_get_paramf;
   screen->base.is_format_supported = cell_is_format_supported;
   screen->base.context_create = cell_create_context;

   cell_init_screen_texture_funcs(&screen->base);

   return &screen->base;
}
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d152 1
a152 2
                          unsigned tex_usage,
                          unsigned geom_flags )
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a30 1
#include "util/u_simple_screen.h"
d38 3
a40 1
#include "cell_winsys.h"
d58 1
a58 1
cell_get_param(struct pipe_screen *screen, int param)
d79 2
a92 2
   case PIPE_CAP_TGSI_CONT_SUPPORTED:
      return 1;
d106 14
d122 1
a122 1
cell_get_paramf(struct pipe_screen *screen, int param)
d149 1
a149 1
                          enum pipe_format format, 
d151 2
a152 1
                          unsigned tex_usage, 
d155 12
d169 1
a169 1
   case PIPE_FORMAT_Z24S8_UNORM:
d183 2
a184 1
   struct pipe_winsys *winsys = screen->winsys;
d193 1
d200 1
a200 1
cell_create_screen(struct pipe_winsys *winsys)
d202 1
a202 1
   struct pipe_screen *screen = CALLOC_STRUCT(pipe_screen);
d208 1
d210 1
a210 1
   screen->destroy = cell_destroy_screen;
d212 7
a218 6
   screen->get_name = cell_get_name;
   screen->get_vendor = cell_get_vendor;
   screen->get_param = cell_get_param;
   screen->get_paramf = cell_get_paramf;
   screen->is_format_supported = cell_is_format_supported;
   screen->context_create = cell_create_context;
d220 1
a220 2
   cell_init_screen_texture_funcs(screen);
   u_simple_screen_init(screen);
d222 1
a222 1
   return screen;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d31 1
d39 1
a39 3
#include "cell_public.h"

#include "state_tracker/sw_winsys.h"
d57 1
a57 1
cell_get_param(struct pipe_screen *screen, enum pipe_cap param)
a77 2
   case PIPE_CAP_TIMER_QUERY:
      return 0;
d90 2
a104 14
static int
cell_get_shader_param(struct pipe_screen *screen, unsigned shader, enum pipe_shader_cap param)
{
   switch(shader)
   {
   case PIPE_SHADER_FRAGMENT:
      return tgsi_exec_get_shader_param(param);
   case PIPE_SHADER_VERTEX:
   case PIPE_SHADER_GEOMETRY:
      return draw_get_shader_param(shader, param);
   default:
      return 0;
   }
}
d107 1
a107 1
cell_get_paramf(struct pipe_screen *screen, enum pipe_cap param)
d134 1
a134 1
                          enum pipe_format format,
d136 1
a136 2
                          unsigned sample_count,
                          unsigned tex_usage,
a138 12
   struct sw_winsys *winsys = cell_screen(screen)->winsys;

   if (sample_count > 1)
      return FALSE;

   if (tex_usage & (PIPE_BIND_DISPLAY_TARGET |
                    PIPE_BIND_SCANOUT |
                    PIPE_BIND_SHARED)) {
      if (!winsys->is_displaytarget_format_supported(winsys, tex_usage, format))
         return FALSE;
   }

d141 1
a141 1
   case PIPE_FORMAT_Z24_UNORM_S8_USCALED:
d155 1
a155 2
   struct cell_screen *sp_screen = cell_screen(screen);
   struct sw_winsys *winsys = sp_screen->winsys;
a163 1

d170 1
a170 1
cell_create_screen(struct sw_winsys *winsys)
d172 1
a172 1
   struct cell_screen *screen = CALLOC_STRUCT(cell_screen);
a177 1
   screen->base.winsys = NULL;
d179 1
a179 1
   screen->base.destroy = cell_destroy_screen;
d181 6
a186 7
   screen->base.get_name = cell_get_name;
   screen->base.get_vendor = cell_get_vendor;
   screen->base.get_param = cell_get_param;
   screen->base.get_shader_param = cell_get_shader_param;
   screen->base.get_paramf = cell_get_paramf;
   screen->base.is_format_supported = cell_is_format_supported;
   screen->base.context_create = cell_create_context;
d188 2
a189 1
   cell_init_screen_texture_funcs(&screen->base);
d191 1
a191 1
   return &screen->base;
@

