head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.09.05.13.59.57;	author jsg;	state dead;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.26;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@/**************************************************************************
 * 
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Author:
 *    Brian Paul
 *    Keith Whitwell
 */


#include "pipe/p_defines.h"
#include "pipe/p_context.h"
#include "util/u_inlines.h"

#include "cell_context.h"
#include "cell_draw_arrays.h"
#include "cell_state.h"
#include "cell_flush.h"
#include "cell_texture.h"

#include "draw/draw_context.h"






/**
 * Draw vertex arrays, with optional indexing.
 * Basically, map the vertex buffers (and drawing surfaces), then hand off
 * the drawing to the 'draw' module.
 *
 * XXX should the element buffer be specified/bound with a separate function?
 */
static void
cell_draw_vbo(struct pipe_context *pipe, const struct pipe_draw_info *info)
{
   struct cell_context *cell = cell_context(pipe);
   struct draw_context *draw = cell->draw;
   void *mapped_indices = NULL;
   unsigned i;

   if (cell->dirty)
      cell_update_derived( cell );

#if 0
   cell_map_surfaces(cell);
#endif

   /*
    * Map vertex buffers
    */
   for (i = 0; i < cell->num_vertex_buffers; i++) {
      void *buf = cell_resource(cell->vertex_buffer[i].buffer)->data;
      draw_set_mapped_vertex_buffer(draw, i, buf);
   }
   /* Map index buffer, if present */
   if (info->indexed && cell->index_buffer.buffer)
      mapped_indices = cell_resource(cell->index_buffer.buffer)->data;

   draw_set_mapped_index_buffer(draw, mapped_indices);

   /* draw! */
   draw_vbo(draw, info);

   /*
    * unmap vertex/index buffers - will cause draw module to flush
    */
   for (i = 0; i < cell->num_vertex_buffers; i++) {
      draw_set_mapped_vertex_buffer(draw, i, NULL);
   }
   if (mapped_indices) {
      draw_set_mapped_index_buffer(draw, NULL);
   }

   /*
    * TODO: Flush only when a user vertex/index buffer is present
    * (or even better, modify draw module to do this
    * internally when this condition is seen?)
    */
   draw_flush(draw);
}


void
cell_init_draw_functions(struct cell_context *cell)
{
   cell->pipe.draw_vbo = cell_draw_vbo;
}

@


1.2
log
@Merge Mesa 7.10.3
@
text
@@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a35 1
#include "util/u_simple_screen.h"
d42 1
a47 30
static void
cell_map_constant_buffers(struct cell_context *sp)
{
   struct pipe_winsys *ws = sp->pipe.winsys;
   uint i;
   for (i = 0; i < 2; i++) {
      if (sp->constants[i] && sp->constants[i]->size) {
         sp->mapped_constants[i] = ws->buffer_map(ws, sp->constants[i],
                                                   PIPE_BUFFER_USAGE_CPU_READ);
         cell_flush_buffer_range(sp, sp->mapped_constants[i], 
                                 sp->constants[i]->size);
      }
   }

   draw_set_mapped_constant_buffer(sp->draw, PIPE_SHADER_VERTEX, 0,
                                   sp->mapped_constants[PIPE_SHADER_VERTEX],
                                   sp->constants[PIPE_SHADER_VERTEX]->size);
}

static void
cell_unmap_constant_buffers(struct cell_context *sp)
{
   struct pipe_winsys *ws = sp->pipe.winsys;
   uint i;
   for (i = 0; i < 2; i++) {
      if (sp->constants[i] && sp->constants[i]->size)
         ws->buffer_unmap(ws, sp->constants[i]);
      sp->mapped_constants[i] = NULL;
   }
}
d59 1
a59 6
cell_draw_range_elements(struct pipe_context *pipe,
                         struct pipe_buffer *indexBuffer,
                         unsigned indexSize,
                         unsigned min_index,
                         unsigned max_index,
                         unsigned mode, unsigned start, unsigned count)
d61 3
a63 2
   struct cell_context *sp = cell_context(pipe);
   struct draw_context *draw = sp->draw;
d66 2
a67 2
   if (sp->dirty)
      cell_update_derived( sp );
d70 1
a70 1
   cell_map_surfaces(sp);
a71 1
   cell_map_constant_buffers(sp);
d76 2
a77 5
   for (i = 0; i < sp->num_vertex_buffers; i++) {
      void *buf = pipe_buffer_map(pipe->screen,
                                           sp->vertex_buffer[i].buffer,
                                           PIPE_BUFFER_USAGE_CPU_READ);
      cell_flush_buffer_range(sp, buf, sp->vertex_buffer[i].buffer->size);
d81 2
a82 10
   if (indexBuffer) {
      void *mapped_indexes = pipe_buffer_map(pipe->screen,
                                                      indexBuffer,
                                                      PIPE_BUFFER_USAGE_CPU_READ);
      draw_set_mapped_element_buffer(draw, indexSize, mapped_indexes);
   }
   else {
      /* no index/element buffer */
      draw_set_mapped_element_buffer(draw, 0, NULL);
   }
d84 1
d87 1
a87 1
   draw_arrays(draw, mode, start, count);
d92 1
a92 1
   for (i = 0; i < sp->num_vertex_buffers; i++) {
a93 1
      pipe_buffer_unmap(pipe->screen, sp->vertex_buffer[i].buffer);
d95 2
a96 3
   if (indexBuffer) {
      draw_set_mapped_element_buffer(draw, 0, NULL);
      pipe_buffer_unmap(pipe->screen, indexBuffer);
d99 6
a104 23
   /* Note: leave drawing surfaces mapped */
   cell_unmap_constant_buffers(sp);
}


static void
cell_draw_elements(struct pipe_context *pipe,
                   struct pipe_buffer *indexBuffer,
                   unsigned indexSize,
                   unsigned mode, unsigned start, unsigned count)
{
   cell_draw_range_elements( pipe, indexBuffer,
                             indexSize,
                             0, 0xffffffff,
                             mode, start, count );
}


static void
cell_draw_arrays(struct pipe_context *pipe, unsigned mode,
                     unsigned start, unsigned count)
{
   cell_draw_elements(pipe, NULL, 0, mode, start, count);
d111 1
a111 3
   cell->pipe.draw_arrays = cell_draw_arrays;
   cell->pipe.draw_elements = cell_draw_elements;
   cell->pipe.draw_range_elements = cell_draw_range_elements;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d36 1
a42 1
#include "cell_texture.h"
d48 30
d89 6
a94 1
cell_draw_vbo(struct pipe_context *pipe, const struct pipe_draw_info *info)
d96 2
a97 3
   struct cell_context *cell = cell_context(pipe);
   struct draw_context *draw = cell->draw;
   void *mapped_indices = NULL;
d100 2
a101 2
   if (cell->dirty)
      cell_update_derived( cell );
d104 1
a104 1
   cell_map_surfaces(cell);
d106 1
d111 5
a115 2
   for (i = 0; i < cell->num_vertex_buffers; i++) {
      void *buf = cell_resource(cell->vertex_buffer[i].buffer)->data;
d119 10
a128 2
   if (info->indexed && cell->index_buffer.buffer)
      mapped_indices = cell_resource(cell->index_buffer.buffer)->data;
a129 1
   draw_set_mapped_index_buffer(draw, mapped_indices);
d132 1
a132 1
   draw_vbo(draw, info);
d137 1
a137 1
   for (i = 0; i < cell->num_vertex_buffers; i++) {
d139 1
d141 3
a143 2
   if (mapped_indices) {
      draw_set_mapped_index_buffer(draw, NULL);
d146 23
a168 6
   /*
    * TODO: Flush only when a user vertex/index buffer is present
    * (or even better, modify draw module to do this
    * internally when this condition is seen?)
    */
   draw_flush(draw);
d175 3
a177 1
   cell->pipe.draw_vbo = cell_draw_vbo;
@

