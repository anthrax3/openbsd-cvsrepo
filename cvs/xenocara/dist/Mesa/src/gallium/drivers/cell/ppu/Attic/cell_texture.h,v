head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.09.05.14.00.03;	author jsg;	state dead;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.26;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@/**************************************************************************
 * 
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#ifndef CELL_TEXTURE_H
#define CELL_TEXTURE_H

#include "cell/common.h"

struct cell_context;
struct pipe_resource;


/**
 * Subclass of pipe_resource
 */
struct cell_resource
{
   struct pipe_resource base;

   unsigned long level_offset[CELL_MAX_TEXTURE_LEVELS];
   unsigned long stride[CELL_MAX_TEXTURE_LEVELS];

   /**
    * Display target, for textures with the PIPE_BIND_DISPLAY_TARGET
    * usage.
    */
   struct sw_displaytarget *dt;
   unsigned dt_stride;

   /**
    * Malloc'ed data for regular textures, or a mapping to dt above.
    */
   void *data;
   boolean userBuffer;

   /* Size of the linear buffer??
    */
   unsigned long buffer_size;

   /** The buffer above, mapped.  This is the memory from which the
    * SPUs will fetch texels.  This texture data is in the tiled layout.
    */
   ubyte *mapped;
};


struct cell_transfer
{
   struct pipe_transfer base;

   unsigned long offset;
   void *map;
};


/** cast wrapper */
static INLINE struct cell_resource *
cell_resource(struct pipe_resource *pt)
{
   return (struct cell_resource *) pt;
}


/** cast wrapper */
static INLINE struct cell_transfer *
cell_transfer(struct pipe_transfer *pt)
{
   return (struct cell_transfer *) pt;
}


extern void
cell_init_screen_texture_funcs(struct pipe_screen *screen);

extern void
cell_init_texture_transfer_funcs(struct cell_context *cell);

#endif /* CELL_TEXTURE_H */
@


1.2
log
@Merge Mesa 7.10.3
@
text
@@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d31 1
d34 1
a34 1
struct pipe_texture;
d38 1
a38 1
 * Subclass of pipe_texture
d40 1
a40 1
struct cell_texture
d42 1
a42 1
   struct pipe_texture base;
d47 15
a61 2
   /** The tiled texture data is held in this buffer */
   struct pipe_buffer *buffer;
d81 2
a82 2
static INLINE struct cell_texture *
cell_texture(struct pipe_texture *pt)
d84 1
a84 1
   return (struct cell_texture *) pt;
d99 2
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a30 1
#include "cell/common.h"
d33 1
a33 1
struct pipe_resource;
d37 1
a37 1
 * Subclass of pipe_resource
d39 1
a39 1
struct cell_resource
d41 1
a41 1
   struct pipe_resource base;
d46 2
a47 15
   /**
    * Display target, for textures with the PIPE_BIND_DISPLAY_TARGET
    * usage.
    */
   struct sw_displaytarget *dt;
   unsigned dt_stride;

   /**
    * Malloc'ed data for regular textures, or a mapping to dt above.
    */
   void *data;
   boolean userBuffer;

   /* Size of the linear buffer??
    */
d67 2
a68 2
static INLINE struct cell_resource *
cell_resource(struct pipe_resource *pt)
d70 1
a70 1
   return (struct cell_resource *) pt;
a84 2
extern void
cell_init_texture_transfer_funcs(struct cell_context *cell);
@

