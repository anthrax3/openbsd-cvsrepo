head	1.4;
access;
symbols
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.09.05.14.00.02;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.26;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@/**************************************************************************
 * 
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Authors:  Keith Whitwell <keith@@tungstengraphics.com>
 */


#include "cell_context.h"
#include "cell_state.h"

#include "util/u_memory.h"
#include "util/u_transfer.h"
#include "draw/draw_context.h"


static void *
cell_create_vertex_elements_state(struct pipe_context *pipe,
                                  unsigned count,
                                  const struct pipe_vertex_element *attribs)
{
   struct cell_velems_state *velems;
   assert(count <= PIPE_MAX_ATTRIBS);
   velems = (struct cell_velems_state *) MALLOC(sizeof(struct cell_velems_state));
   if (velems) {
      velems->count = count;
      memcpy(velems->velem, attribs, sizeof(*attribs) * count);
   }
   return velems;
}

static void
cell_bind_vertex_elements_state(struct pipe_context *pipe,
                                void *velems)
{
   struct cell_context *cell = cell_context(pipe);
   struct cell_velems_state *cell_velems = (struct cell_velems_state *) velems;

   cell->velems = cell_velems;

   cell->dirty |= CELL_NEW_VERTEX;

   if (cell_velems)
      draw_set_vertex_elements(cell->draw, cell_velems->count, cell_velems->velem);
}

static void
cell_delete_vertex_elements_state(struct pipe_context *pipe, void *velems)
{
   FREE( velems );
}


static void
cell_set_vertex_buffers(struct pipe_context *pipe,
                        unsigned count,
                        const struct pipe_vertex_buffer *buffers)
{
   struct cell_context *cell = cell_context(pipe);

   assert(count <= PIPE_MAX_ATTRIBS);

   util_copy_vertex_buffers(cell->vertex_buffer,
                            &cell->num_vertex_buffers,
                            buffers, count);

   cell->dirty |= CELL_NEW_VERTEX;

   draw_set_vertex_buffers(cell->draw, count, buffers);
}


static void
cell_set_index_buffer(struct pipe_context *pipe,
                      const struct pipe_index_buffer *ib)
{
   struct cell_context *cell = cell_context(pipe);

   if (ib)
      memcpy(&cell->index_buffer, ib, sizeof(cell->index_buffer));
   else
      memset(&cell->index_buffer, 0, sizeof(cell->index_buffer));

   draw_set_index_buffer(cell->draw, ib);
}


void
cell_init_vertex_functions(struct cell_context *cell)
{
   cell->pipe.set_vertex_buffers = cell_set_vertex_buffers;
   cell->pipe.set_index_buffer = cell_set_index_buffer;
   cell->pipe.create_vertex_elements_state = cell_create_vertex_elements_state;
   cell->pipe.bind_vertex_elements_state = cell_bind_vertex_elements_state;
   cell->pipe.delete_vertex_elements_state = cell_delete_vertex_elements_state;
   cell->pipe.redefine_user_buffer = u_default_redefine_user_buffer;
}
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d36 1
d86 3
a88 2
   memcpy(cell->vertex_buffer, buffers, count * sizeof(buffers[0]));
   cell->num_vertex_buffers = count;
d119 1
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d35 1
d39 15
d55 2
a56 3
cell_set_vertex_elements(struct pipe_context *pipe,
                         unsigned count,
                         const struct pipe_vertex_element *elements)
d59 1
d61 1
a61 1
   assert(count <= PIPE_MAX_ATTRIBS);
d63 1
a63 2
   memcpy(cell->vertex_element, elements, count * sizeof(elements[0]));
   cell->num_vertex_elements = count;
d65 3
a67 1
   cell->dirty |= CELL_NEW_VERTEX;
d69 4
a72 1
   draw_set_vertex_elements(cell->draw, count, elements);
d94 15
d113 4
a116 1
   cell->pipe.set_vertex_elements = cell_set_vertex_elements;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a34 1
#include "util/u_memory.h"
a37 15
static void *
cell_create_vertex_elements_state(struct pipe_context *pipe,
                                  unsigned count,
                                  const struct pipe_vertex_element *attribs)
{
   struct cell_velems_state *velems;
   assert(count <= PIPE_MAX_ATTRIBS);
   velems = (struct cell_velems_state *) MALLOC(sizeof(struct cell_velems_state));
   if (velems) {
      velems->count = count;
      memcpy(velems->velem, attribs, sizeof(*attribs) * count);
   }
   return velems;
}

d39 3
a41 2
cell_bind_vertex_elements_state(struct pipe_context *pipe,
                                void *velems)
a43 1
   struct cell_velems_state *cell_velems = (struct cell_velems_state *) velems;
d45 4
a48 1
   cell->velems = cell_velems;
d52 1
a52 8
   if (cell_velems)
      draw_set_vertex_elements(cell->draw, cell_velems->count, cell_velems->velem);
}

static void
cell_delete_vertex_elements_state(struct pipe_context *pipe, void *velems)
{
   FREE( velems );
a73 15
static void
cell_set_index_buffer(struct pipe_context *pipe,
                      const struct pipe_index_buffer *ib)
{
   struct cell_context *cell = cell_context(pipe);

   if (ib)
      memcpy(&cell->index_buffer, ib, sizeof(cell->index_buffer));
   else
      memset(&cell->index_buffer, 0, sizeof(cell->index_buffer));

   draw_set_index_buffer(cell->draw, ib);
}


d78 1
a78 4
   cell->pipe.set_index_buffer = cell_set_index_buffer;
   cell->pipe.create_vertex_elements_state = cell_create_vertex_elements_state;
   cell->pipe.bind_vertex_elements_state = cell_bind_vertex_elements_state;
   cell->pipe.delete_vertex_elements_state = cell_delete_vertex_elements_state;
@

