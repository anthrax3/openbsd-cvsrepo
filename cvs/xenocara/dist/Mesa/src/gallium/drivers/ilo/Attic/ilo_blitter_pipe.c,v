head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.30;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.11.13;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.11.13;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.33.53;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.07.11;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.44.20;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 2013 LunarG, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Chia-I Wu <olv@@lunarg.com>
 */

#include "util/u_blitter.h"
#include "util/u_surface.h"

#include "ilo_3d.h"
#include "ilo_context.h"
#include "ilo_blitter.h"

enum ilo_blitter_pipe_op {
   ILO_BLITTER_PIPE_BLIT,
   ILO_BLITTER_PIPE_COPY,
   ILO_BLITTER_PIPE_CLEAR,
   ILO_BLITTER_PIPE_CLEAR_FB,
};

static void
ilo_blitter_pipe_begin(struct ilo_blitter *blitter,
                       enum ilo_blitter_pipe_op op,
                       bool scissor_enable)
{
   struct blitter_context *b = blitter->pipe_blitter;
   struct ilo_context *ilo = blitter->ilo;

   /* vertex states */
   util_blitter_save_vertex_buffer_slot(b, ilo->vb.states);
   util_blitter_save_vertex_elements(b, (void *) ilo->ve);
   util_blitter_save_vertex_shader(b, ilo->vs);
   util_blitter_save_geometry_shader(b, ilo->gs);
   util_blitter_save_so_targets(b, ilo->so.count, ilo->so.states);
   util_blitter_save_rasterizer(b, (void *) ilo->rasterizer);

   /* fragment states */
   util_blitter_save_fragment_shader(b, ilo->fs);
   util_blitter_save_depth_stencil_alpha(b, (void *) ilo->dsa);
   util_blitter_save_blend(b, (void *) ilo->blend);
   util_blitter_save_sample_mask(b, ilo->sample_mask);
   util_blitter_save_stencil_ref(b, &ilo->stencil_ref);
   util_blitter_save_viewport(b, &ilo->viewport.viewport0);

   if (scissor_enable)
      util_blitter_save_scissor(b, &ilo->scissor.scissor0);

   switch (op) {
   case ILO_BLITTER_PIPE_BLIT:
   case ILO_BLITTER_PIPE_COPY:
      /*
       * we are about to call util_blitter_blit() or
       * util_blitter_copy_texture()
       */
      util_blitter_save_fragment_sampler_states(b,
            ilo->sampler[PIPE_SHADER_FRAGMENT].count,
            (void **) ilo->sampler[PIPE_SHADER_FRAGMENT].cso);

      util_blitter_save_fragment_sampler_views(b,
            ilo->view[PIPE_SHADER_FRAGMENT].count,
            ilo->view[PIPE_SHADER_FRAGMENT].states);

      util_blitter_save_framebuffer(b, &ilo->fb.state);

      /* resource_copy_region() or blit() does not honor render condition */
      util_blitter_save_render_condition(b,
            ilo->hw3d->render_condition.query,
            ilo->hw3d->render_condition.cond,
            ilo->hw3d->render_condition.mode);
      break;
   case ILO_BLITTER_PIPE_CLEAR:
      /*
       * we are about to call util_blitter_clear_render_target() or
       * util_blitter_clear_depth_stencil()
       */
      util_blitter_save_framebuffer(b, &ilo->fb.state);
      break;
   case ILO_BLITTER_PIPE_CLEAR_FB:
      /* we are about to call util_blitter_clear() */
      break;
   default:
      break;
   }
}

static void
ilo_blitter_pipe_end(struct ilo_blitter *blitter)
{
}

bool
ilo_blitter_pipe_blit(struct ilo_blitter *blitter,
                      const struct pipe_blit_info *info)
{
   struct blitter_context *b = blitter->pipe_blitter;
   struct pipe_blit_info skip_stencil;

   if (util_try_blit_via_copy_region(&blitter->ilo->base, info))
      return true;

   if (!util_blitter_is_blit_supported(b, info)) {
      /* try without stencil */
      if (info->mask & PIPE_MASK_S) {
         skip_stencil = *info;
         skip_stencil.mask = info->mask & ~PIPE_MASK_S;

         if (util_blitter_is_blit_supported(blitter->pipe_blitter,
                                            &skip_stencil)) {
            ilo_warn("ignore stencil buffer blitting\n");
            info = &skip_stencil;
         }
      }

      if (info != &skip_stencil) {
         ilo_warn("failed to blit with pipe blitter\n");
         return false;
      }
   }

   ilo_blitter_pipe_begin(blitter, ILO_BLITTER_PIPE_BLIT,
         info->scissor_enable);
   util_blitter_blit(b, info);
   ilo_blitter_pipe_end(blitter);

   return true;
}

bool
ilo_blitter_pipe_copy_resource(struct ilo_blitter *blitter,
                               struct pipe_resource *dst, unsigned dst_level,
                               unsigned dst_x, unsigned dst_y, unsigned dst_z,
                               struct pipe_resource *src, unsigned src_level,
                               const struct pipe_box *src_box)
{
   const unsigned mask = PIPE_MASK_RGBAZS;
   const bool copy_all_samples = true;

   /* not until we allow rendertargets to be buffers */
   if (dst->target == PIPE_BUFFER || src->target == PIPE_BUFFER)
      return false;

   if (!util_blitter_is_copy_supported(blitter->pipe_blitter, dst, src, mask))
      return false;

   ilo_blitter_pipe_begin(blitter, ILO_BLITTER_PIPE_COPY, false);

   util_blitter_copy_texture(blitter->pipe_blitter,
         dst, dst_level, dst_x, dst_y, dst_z,
         src, src_level, src_box,
         mask, copy_all_samples);

   ilo_blitter_pipe_end(blitter);

   return true;
}

bool
ilo_blitter_pipe_clear_rt(struct ilo_blitter *blitter,
                          struct pipe_surface *rt,
                          const union pipe_color_union *color,
                          unsigned x, unsigned y,
                          unsigned width, unsigned height)
{
   ilo_blitter_pipe_begin(blitter, ILO_BLITTER_PIPE_CLEAR, false);

   util_blitter_clear_render_target(blitter->pipe_blitter,
         rt, color, x, y, width, height);

   ilo_blitter_pipe_end(blitter);

   return true;
}

bool
ilo_blitter_pipe_clear_zs(struct ilo_blitter *blitter,
                          struct pipe_surface *zs,
                          unsigned clear_flags,
                          double depth, unsigned stencil,
                          unsigned x, unsigned y,
                          unsigned width, unsigned height)
{
   ilo_blitter_pipe_begin(blitter, ILO_BLITTER_PIPE_CLEAR, false);

   util_blitter_clear_depth_stencil(blitter->pipe_blitter,
         zs, clear_flags, depth, stencil, x, y, width, height);

   ilo_blitter_pipe_end(blitter);

   return true;
}

bool
ilo_blitter_pipe_clear_fb(struct ilo_blitter *blitter,
                          unsigned buffers,
                          const union pipe_color_union *color,
                          double depth, unsigned stencil)
{
   /* TODO we should pause/resume some queries */
   ilo_blitter_pipe_begin(blitter, ILO_BLITTER_PIPE_CLEAR_FB, false);

   util_blitter_clear(blitter->pipe_blitter,
         blitter->ilo->fb.state.width, blitter->ilo->fb.state.height,
         buffers, color, depth, stencil);

   ilo_blitter_pipe_end(blitter);

   return true;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d156 3
d163 1
a163 1
   if (!util_blitter_is_copy_supported(blitter->pipe_blitter, dst, src))
d170 2
a171 1
         src, src_level, src_box);
d223 1
a223 1
         blitter->ilo->fb.state.width, blitter->ilo->fb.state.height, 1,
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d31 1
d48 1
a48 1
   struct ilo_state_vector *vec = &blitter->ilo->state_vector;
d51 6
a56 6
   util_blitter_save_vertex_buffer_slot(b, vec->vb.states);
   util_blitter_save_vertex_elements(b, (void *) vec->ve);
   util_blitter_save_vertex_shader(b, vec->vs);
   util_blitter_save_geometry_shader(b, vec->gs);
   util_blitter_save_so_targets(b, vec->so.count, vec->so.states);
   util_blitter_save_rasterizer(b, (void *) vec->rasterizer);
d59 6
a64 6
   util_blitter_save_fragment_shader(b, vec->fs);
   util_blitter_save_depth_stencil_alpha(b, (void *) vec->dsa);
   util_blitter_save_blend(b, (void *) vec->blend);
   util_blitter_save_sample_mask(b, vec->sample_mask);
   util_blitter_save_stencil_ref(b, &vec->stencil_ref);
   util_blitter_save_viewport(b, &vec->viewport.viewport0);
d67 1
a67 1
      util_blitter_save_scissor(b, &vec->scissor.scissor0);
d73 2
a74 3
       * We are about to call util_blitter_blit() or
       * util_blitter_copy_texture().  Note that util_blitter uses at most two
       * textures.
d77 2
a78 1
            2, (void **) vec->sampler[PIPE_SHADER_FRAGMENT].cso);
d81 2
a82 2
            vec->view[PIPE_SHADER_FRAGMENT].count,
            vec->view[PIPE_SHADER_FRAGMENT].states);
d84 1
a84 1
      util_blitter_save_framebuffer(b, &vec->fb.state);
d88 3
a90 3
            blitter->ilo->render_condition.query,
            blitter->ilo->render_condition.condition,
            blitter->ilo->render_condition.mode);
d97 1
a97 1
      util_blitter_save_framebuffer(b, &vec->fb.state);
a214 2
   struct ilo_state_vector *vec = &blitter->ilo->state_vector;

d219 1
a219 1
         vec->fb.state.width, vec->fb.state.height, 1,
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@a30 1
#include "ilo_3d.h"
d47 1
a47 1
   struct ilo_context *ilo = blitter->ilo;
d50 6
a55 6
   util_blitter_save_vertex_buffer_slot(b, ilo->vb.states);
   util_blitter_save_vertex_elements(b, (void *) ilo->ve);
   util_blitter_save_vertex_shader(b, ilo->vs);
   util_blitter_save_geometry_shader(b, ilo->gs);
   util_blitter_save_so_targets(b, ilo->so.count, ilo->so.states);
   util_blitter_save_rasterizer(b, (void *) ilo->rasterizer);
d58 6
a63 6
   util_blitter_save_fragment_shader(b, ilo->fs);
   util_blitter_save_depth_stencil_alpha(b, (void *) ilo->dsa);
   util_blitter_save_blend(b, (void *) ilo->blend);
   util_blitter_save_sample_mask(b, ilo->sample_mask);
   util_blitter_save_stencil_ref(b, &ilo->stencil_ref);
   util_blitter_save_viewport(b, &ilo->viewport.viewport0);
d66 1
a66 1
      util_blitter_save_scissor(b, &ilo->scissor.scissor0);
d72 3
a74 2
       * we are about to call util_blitter_blit() or
       * util_blitter_copy_texture()
d77 1
a77 2
            ilo->sampler[PIPE_SHADER_FRAGMENT].count,
            (void **) ilo->sampler[PIPE_SHADER_FRAGMENT].cso);
d80 2
a81 2
            ilo->view[PIPE_SHADER_FRAGMENT].count,
            ilo->view[PIPE_SHADER_FRAGMENT].states);
d83 1
a83 1
      util_blitter_save_framebuffer(b, &ilo->fb.state);
d87 3
a89 3
            ilo->hw3d->render_condition.query,
            ilo->hw3d->render_condition.cond,
            ilo->hw3d->render_condition.mode);
d96 1
a96 1
      util_blitter_save_framebuffer(b, &ilo->fb.state);
d214 2
d220 1
a220 1
         blitter->ilo->fb.state.width, blitter->ilo->fb.state.height, 1,
@


