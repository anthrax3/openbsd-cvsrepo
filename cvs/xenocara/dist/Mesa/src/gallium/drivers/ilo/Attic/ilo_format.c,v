head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.30;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.11.14;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.11.14;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.33.53;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.07.13;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.44.21;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 2012-2013 LunarG, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Chia-I Wu <olv@@lunarg.com>
 */

#include "vl/vl_video_buffer.h"
#include "brw_defines.h"

#include "ilo_screen.h"
#include "ilo_format.h"

/* stolen from classic i965 */
struct surface_format_info {
   bool exists;
   int sampling;
   int filtering;
   int shadow_compare;
   int chroma_key;
   int render_target;
   int alpha_blend;
   int input_vb;
   int streamed_output_vb;
   int color_processing;
};

/* This macro allows us to write the table almost as it appears in the PRM,
 * while restructuring it to turn it into the C code we want.
 */
#define SF(sampl, filt, shad, ck, rt, ab, vb, so, color, sf) \
   [sf] = { true, sampl, filt, shad, ck, rt, ab, vb, so, color },

#define Y 0
#define x 999
/**
 * This is the table of support for surface (texture, renderbuffer, and vertex
 * buffer, but not depthbuffer) formats across the various hardware generations.
 *
 * The table is formatted to match the documentation, except that the docs have
 * this ridiculous mapping of Y[*+~^#&] for "supported on DevWhatever".  To put
 * it in our table, here's the mapping:
 *
 * Y*: 45
 * Y+: 45 (g45/gm45)
 * Y~: 50 (gen5)
 * Y^: 60 (gen6)
 * Y#: 70 (gen7)
 *
 * The abbreviations in the header below are:
 * smpl  - Sampling Engine
 * filt  - Sampling Engine Filtering
 * shad  - Sampling Engine Shadow Map
 * CK    - Sampling Engine Chroma Key
 * RT    - Render Target
 * AB    - Alpha Blend Render Target
 * VB    - Input Vertex Buffer
 * SO    - Steamed Output Vertex Buffers (transform feedback)
 * color - Color Processing
 *
 * See page 88 of the Sandybridge PRM VOL4_Part1 PDF.
 *
 * As of Ivybridge, the columns are no longer in that table and the
 * information can be found spread across:
 *
 * - VOL2_Part1 section 2.5.11 Format Conversion (vertex fetch).
 * - VOL4_Part1 section 2.12.2.1.2 Sampler Output Channel Mapping.
 * - VOL4_Part1 section 3.9.11 Render Target Write.
 */
const struct surface_format_info surface_formats[] = {
/* smpl filt shad CK  RT  AB  VB  SO  color */
   SF( Y, 50,  x,  x,  Y,  Y,  Y,  Y,  x, BRW_SURFACEFORMAT_R32G32B32A32_FLOAT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, BRW_SURFACEFORMAT_R32G32B32A32_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, BRW_SURFACEFORMAT_R32G32B32A32_UINT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32G32B32A32_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32G32B32A32_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R64G64_FLOAT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R32G32B32X32_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32G32B32A32_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32G32B32A32_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R32G32B32A32_SFIXED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R64G64_PASSTHRU)
   SF( Y, 50,  x,  x,  x,  x,  Y,  Y,  x, BRW_SURFACEFORMAT_R32G32B32_FLOAT)
   SF( Y,  x,  x,  x,  x,  x,  Y,  Y,  x, BRW_SURFACEFORMAT_R32G32B32_SINT)
   SF( Y,  x,  x,  x,  x,  x,  Y,  Y,  x, BRW_SURFACEFORMAT_R32G32B32_UINT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32G32B32_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32G32B32_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32G32B32_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32G32B32_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R32G32B32_SFIXED)
   SF( Y,  Y,  x,  x,  Y, 45,  Y,  x, 60, BRW_SURFACEFORMAT_R16G16B16A16_UNORM)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16B16A16_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16B16A16_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16B16A16_UINT)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16B16A16_FLOAT)
   SF( Y, 50,  x,  x,  Y,  Y,  Y,  Y,  x, BRW_SURFACEFORMAT_R32G32_FLOAT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, BRW_SURFACEFORMAT_R32G32_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, BRW_SURFACEFORMAT_R32G32_UINT)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R32_FLOAT_X8X24_TYPELESS)
   SF( Y,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_X32_TYPELESS_G8X24_UINT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L32A32_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32G32_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32G32_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R64_FLOAT)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R16G16B16X16_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R16G16B16X16_FLOAT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_A32X32_FLOAT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L32X32_FLOAT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_I32X32_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16B16A16_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16B16A16_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32G32_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32G32_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R32G32_SFIXED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R64_PASSTHRU)
   SF( Y,  Y,  x,  Y,  Y,  Y,  Y,  x, 60, BRW_SURFACEFORMAT_B8G8R8A8_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x,  x, BRW_SURFACEFORMAT_B8G8R8A8_UNORM_SRGB)
/* smpl filt shad CK  RT  AB  VB  SO  color */
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x, 60, BRW_SURFACEFORMAT_R10G10B10A2_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x, 60, BRW_SURFACEFORMAT_R10G10B10A2_UNORM_SRGB)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R10G10B10A2_UINT)
   SF( Y,  Y,  x,  x,  x,  Y,  Y,  x,  x, BRW_SURFACEFORMAT_R10G10B10_SNORM_A2_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x, 60, BRW_SURFACEFORMAT_R8G8B8A8_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x, 60, BRW_SURFACEFORMAT_R8G8B8A8_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8B8A8_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8B8A8_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8B8A8_UINT)
   SF( Y,  Y,  x,  x,  Y, 45,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16_UNORM)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16_UINT)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16_FLOAT)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x, 60, BRW_SURFACEFORMAT_B10G10R10A2_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x, 60, BRW_SURFACEFORMAT_B10G10R10A2_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, BRW_SURFACEFORMAT_R11G11B10_FLOAT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, BRW_SURFACEFORMAT_R32_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, BRW_SURFACEFORMAT_R32_UINT)
   SF( Y, 50,  Y,  x,  Y,  Y,  Y,  Y,  x, BRW_SURFACEFORMAT_R32_FLOAT)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R24_UNORM_X8_TYPELESS)
   SF( Y,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_X24_TYPELESS_G8_UINT)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L16A16_UNORM)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_I24X8_UNORM)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L24X8_UNORM)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_A24X8_UNORM)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_I32_FLOAT)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L32_FLOAT)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_A32_FLOAT)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x, 60, BRW_SURFACEFORMAT_B8G8R8X8_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_B8G8R8X8_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R8G8B8X8_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R8G8B8X8_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R9G9B9E5_SHAREDEXP)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_B10G10R10X2_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L16A16_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32_SNORM)
/* smpl filt shad CK  RT  AB  VB  SO  color */
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R10G10B10X2_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8B8A8_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8B8A8_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R32_USCALED)
   SF( Y,  Y,  x,  Y,  Y,  Y,  x,  x,  x, BRW_SURFACEFORMAT_B5G6R5_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x,  x, BRW_SURFACEFORMAT_B5G6R5_UNORM_SRGB)
   SF( Y,  Y,  x,  Y,  Y,  Y,  x,  x,  x, BRW_SURFACEFORMAT_B5G5R5A1_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x,  x, BRW_SURFACEFORMAT_B5G5R5A1_UNORM_SRGB)
   SF( Y,  Y,  x,  Y,  Y,  Y,  x,  x,  x, BRW_SURFACEFORMAT_B4G4R4A4_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x,  x, BRW_SURFACEFORMAT_B4G4R4A4_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8_UNORM)
   SF( Y,  Y,  x,  Y,  Y, 60,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8_UINT)
   SF( Y,  Y,  Y,  x,  Y, 45,  Y,  x, 70, BRW_SURFACEFORMAT_R16_UNORM)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, BRW_SURFACEFORMAT_R16_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16_UINT)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, BRW_SURFACEFORMAT_R16_FLOAT)
   SF(50, 50,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_A8P8_UNORM_PALETTE0)
   SF(50, 50,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_A8P8_UNORM_PALETTE1)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_I16_UNORM)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L16_UNORM)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_A16_UNORM)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L8A8_UNORM)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_I16_FLOAT)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L16_FLOAT)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_A16_FLOAT)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L8A8_UNORM_SRGB)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R5G5_SNORM_B6_UNORM)
   SF( x,  x,  x,  x,  Y,  Y,  x,  x,  x, BRW_SURFACEFORMAT_B5G5R5X1_UNORM)
   SF( x,  x,  x,  x,  Y,  Y,  x,  x,  x, BRW_SURFACEFORMAT_B5G5R5X1_UNORM_SRGB)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8_USCALED)
/* smpl filt shad CK  RT  AB  VB  SO  color */
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16_USCALED)
   SF(50, 50,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_P8A8_UNORM_PALETTE0)
   SF(50, 50,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_P8A8_UNORM_PALETTE1)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_A1B5G5R5_UNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_A4B4G4R4_UNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L8A8_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L8A8_SINT)
   SF( Y,  Y,  x, 45,  Y,  Y,  Y,  x,  x, BRW_SURFACEFORMAT_R8_UNORM)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, BRW_SURFACEFORMAT_R8_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8_UINT)
   SF( Y,  Y,  x,  Y,  Y,  Y,  x,  x,  x, BRW_SURFACEFORMAT_A8_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_I8_UNORM)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L8_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_P4A4_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_A4P4_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8_USCALED)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_P8_UNORM_PALETTE0)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L8_UNORM_SRGB)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_P8_UNORM_PALETTE1)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_P4A4_UNORM_PALETTE1)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_A4P4_UNORM_PALETTE1)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_Y8_SNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L8_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_L8_SINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_I8_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_I8_SINT)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_DXT1_RGB_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R1_UINT)
   SF( Y,  Y,  x,  Y,  Y,  x,  x,  x, 60, BRW_SURFACEFORMAT_YCRCB_NORMAL)
   SF( Y,  Y,  x,  Y,  Y,  x,  x,  x, 60, BRW_SURFACEFORMAT_YCRCB_SWAPUVY)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_P2_UNORM_PALETTE0)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_P2_UNORM_PALETTE1)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_BC1_UNORM)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_BC2_UNORM)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_BC3_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_BC4_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_BC5_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_BC1_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_BC2_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_BC3_UNORM_SRGB)
   SF( Y,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_MONO8)
   SF( Y,  Y,  x,  x,  Y,  x,  x,  x, 60, BRW_SURFACEFORMAT_YCRCB_SWAPUV)
   SF( Y,  Y,  x,  x,  Y,  x,  x,  x, 60, BRW_SURFACEFORMAT_YCRCB_SWAPY)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_DXT1_RGB)
/* smpl filt shad CK  RT  AB  VB  SO  color */
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_FXT1)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8B8_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8B8_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8B8_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R8G8B8_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R64G64B64A64_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R64G64B64_FLOAT)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_BC4_SNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_BC5_SNORM)
   SF(50, 50,  x,  x,  x,  x, 60,  x,  x, BRW_SURFACEFORMAT_R16G16B16_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16B16_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16B16_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16B16_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, BRW_SURFACEFORMAT_R16G16B16_USCALED)
   SF(70, 70,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_BC6H_SF16)
   SF(70, 70,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_BC7_UNORM)
   SF(70, 70,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_BC7_UNORM_SRGB)
   SF(70, 70,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_BC6H_UF16)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_PLANAR_420_8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R8G8B8_UNORM_SRGB)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_ETC1_RGB8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_ETC2_RGB8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_EAC_R11)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_EAC_RG11)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_EAC_SIGNED_R11)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_EAC_SIGNED_RG11)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_ETC2_SRGB8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R16G16B16_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R16G16B16_SINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R32_SFIXED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R10G10B10A2_SNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R10G10B10A2_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R10G10B10A2_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R10G10B10A2_SINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_B10G10R10A2_SNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_B10G10R10A2_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_B10G10R10A2_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_B10G10R10A2_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_B10G10R10A2_SINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R64G64B64A64_PASSTHRU)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R64G64B64_PASSTHRU)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_ETC2_RGB8_PTA)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_ETC2_SRGB8_PTA)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_ETC2_EAC_RGBA8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_ETC2_EAC_SRGB8_A8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R8G8B8_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, BRW_SURFACEFORMAT_R8G8B8_SINT)
};
#undef x
#undef Y

static const struct surface_format_info *
lookup_surface_format_info(enum pipe_format format, unsigned bind)
{
   static const struct surface_format_info nonexist = {
      .exists = false,
      .sampling = 999,
      .filtering = 999,
      .shadow_compare = 999,
      .chroma_key = 999,
      .render_target = 999,
      .alpha_blend = 999,
      .input_vb = 999,
      .streamed_output_vb = 999,
      .color_processing = 999,
   };
   const int surfaceformat = ilo_translate_format(format, bind);

   return (surfaceformat >= 0 && surfaceformat < Elements(surface_formats) &&
           surface_formats[surfaceformat].exists) ?
      &surface_formats[surfaceformat] : &nonexist;
}

/**
 * Translate a color (non-depth/stencil) pipe format to the matching hardware
 * format.  Return -1 on errors.
 */
int
ilo_translate_color_format(enum pipe_format format)
{
   static const int format_mapping[PIPE_FORMAT_COUNT] = {
      [PIPE_FORMAT_NONE]                  = 0,
      [PIPE_FORMAT_B8G8R8A8_UNORM]        = BRW_SURFACEFORMAT_B8G8R8A8_UNORM,
      [PIPE_FORMAT_B8G8R8X8_UNORM]        = BRW_SURFACEFORMAT_B8G8R8X8_UNORM,
      [PIPE_FORMAT_A8R8G8B8_UNORM]        = 0,
      [PIPE_FORMAT_X8R8G8B8_UNORM]        = 0,
      [PIPE_FORMAT_B5G5R5A1_UNORM]        = BRW_SURFACEFORMAT_B5G5R5A1_UNORM,
      [PIPE_FORMAT_B4G4R4A4_UNORM]        = BRW_SURFACEFORMAT_B4G4R4A4_UNORM,
      [PIPE_FORMAT_B5G6R5_UNORM]          = BRW_SURFACEFORMAT_B5G6R5_UNORM,
      [PIPE_FORMAT_R10G10B10A2_UNORM]     = BRW_SURFACEFORMAT_R10G10B10A2_UNORM,
      [PIPE_FORMAT_L8_UNORM]              = BRW_SURFACEFORMAT_L8_UNORM,
      [PIPE_FORMAT_A8_UNORM]              = BRW_SURFACEFORMAT_A8_UNORM,
      [PIPE_FORMAT_I8_UNORM]              = BRW_SURFACEFORMAT_I8_UNORM,
      [PIPE_FORMAT_L8A8_UNORM]            = BRW_SURFACEFORMAT_L8A8_UNORM,
      [PIPE_FORMAT_L16_UNORM]             = BRW_SURFACEFORMAT_L16_UNORM,
      [PIPE_FORMAT_UYVY]                  = BRW_SURFACEFORMAT_YCRCB_SWAPUVY,
      [PIPE_FORMAT_YUYV]                  = BRW_SURFACEFORMAT_YCRCB_NORMAL,
      [PIPE_FORMAT_Z16_UNORM]             = 0,
      [PIPE_FORMAT_Z32_UNORM]             = 0,
      [PIPE_FORMAT_Z32_FLOAT]             = 0,
      [PIPE_FORMAT_Z24_UNORM_S8_UINT]     = 0,
      [PIPE_FORMAT_S8_UINT_Z24_UNORM]     = 0,
      [PIPE_FORMAT_Z24X8_UNORM]           = 0,
      [PIPE_FORMAT_X8Z24_UNORM]           = 0,
      [PIPE_FORMAT_S8_UINT]               = 0,
      [PIPE_FORMAT_R64_FLOAT]             = BRW_SURFACEFORMAT_R64_FLOAT,
      [PIPE_FORMAT_R64G64_FLOAT]          = BRW_SURFACEFORMAT_R64G64_FLOAT,
      [PIPE_FORMAT_R64G64B64_FLOAT]       = BRW_SURFACEFORMAT_R64G64B64_FLOAT,
      [PIPE_FORMAT_R64G64B64A64_FLOAT]    = BRW_SURFACEFORMAT_R64G64B64A64_FLOAT,
      [PIPE_FORMAT_R32_FLOAT]             = BRW_SURFACEFORMAT_R32_FLOAT,
      [PIPE_FORMAT_R32G32_FLOAT]          = BRW_SURFACEFORMAT_R32G32_FLOAT,
      [PIPE_FORMAT_R32G32B32_FLOAT]       = BRW_SURFACEFORMAT_R32G32B32_FLOAT,
      [PIPE_FORMAT_R32G32B32A32_FLOAT]    = BRW_SURFACEFORMAT_R32G32B32A32_FLOAT,
      [PIPE_FORMAT_R32_UNORM]             = BRW_SURFACEFORMAT_R32_UNORM,
      [PIPE_FORMAT_R32G32_UNORM]          = BRW_SURFACEFORMAT_R32G32_UNORM,
      [PIPE_FORMAT_R32G32B32_UNORM]       = BRW_SURFACEFORMAT_R32G32B32_UNORM,
      [PIPE_FORMAT_R32G32B32A32_UNORM]    = BRW_SURFACEFORMAT_R32G32B32A32_UNORM,
      [PIPE_FORMAT_R32_USCALED]           = BRW_SURFACEFORMAT_R32_USCALED,
      [PIPE_FORMAT_R32G32_USCALED]        = BRW_SURFACEFORMAT_R32G32_USCALED,
      [PIPE_FORMAT_R32G32B32_USCALED]     = BRW_SURFACEFORMAT_R32G32B32_USCALED,
      [PIPE_FORMAT_R32G32B32A32_USCALED]  = BRW_SURFACEFORMAT_R32G32B32A32_USCALED,
      [PIPE_FORMAT_R32_SNORM]             = BRW_SURFACEFORMAT_R32_SNORM,
      [PIPE_FORMAT_R32G32_SNORM]          = BRW_SURFACEFORMAT_R32G32_SNORM,
      [PIPE_FORMAT_R32G32B32_SNORM]       = BRW_SURFACEFORMAT_R32G32B32_SNORM,
      [PIPE_FORMAT_R32G32B32A32_SNORM]    = BRW_SURFACEFORMAT_R32G32B32A32_SNORM,
      [PIPE_FORMAT_R32_SSCALED]           = BRW_SURFACEFORMAT_R32_SSCALED,
      [PIPE_FORMAT_R32G32_SSCALED]        = BRW_SURFACEFORMAT_R32G32_SSCALED,
      [PIPE_FORMAT_R32G32B32_SSCALED]     = BRW_SURFACEFORMAT_R32G32B32_SSCALED,
      [PIPE_FORMAT_R32G32B32A32_SSCALED]  = BRW_SURFACEFORMAT_R32G32B32A32_SSCALED,
      [PIPE_FORMAT_R16_UNORM]             = BRW_SURFACEFORMAT_R16_UNORM,
      [PIPE_FORMAT_R16G16_UNORM]          = BRW_SURFACEFORMAT_R16G16_UNORM,
      [PIPE_FORMAT_R16G16B16_UNORM]       = BRW_SURFACEFORMAT_R16G16B16_UNORM,
      [PIPE_FORMAT_R16G16B16A16_UNORM]    = BRW_SURFACEFORMAT_R16G16B16A16_UNORM,
      [PIPE_FORMAT_R16_USCALED]           = BRW_SURFACEFORMAT_R16_USCALED,
      [PIPE_FORMAT_R16G16_USCALED]        = BRW_SURFACEFORMAT_R16G16_USCALED,
      [PIPE_FORMAT_R16G16B16_USCALED]     = BRW_SURFACEFORMAT_R16G16B16_USCALED,
      [PIPE_FORMAT_R16G16B16A16_USCALED]  = BRW_SURFACEFORMAT_R16G16B16A16_USCALED,
      [PIPE_FORMAT_R16_SNORM]             = BRW_SURFACEFORMAT_R16_SNORM,
      [PIPE_FORMAT_R16G16_SNORM]          = BRW_SURFACEFORMAT_R16G16_SNORM,
      [PIPE_FORMAT_R16G16B16_SNORM]       = BRW_SURFACEFORMAT_R16G16B16_SNORM,
      [PIPE_FORMAT_R16G16B16A16_SNORM]    = BRW_SURFACEFORMAT_R16G16B16A16_SNORM,
      [PIPE_FORMAT_R16_SSCALED]           = BRW_SURFACEFORMAT_R16_SSCALED,
      [PIPE_FORMAT_R16G16_SSCALED]        = BRW_SURFACEFORMAT_R16G16_SSCALED,
      [PIPE_FORMAT_R16G16B16_SSCALED]     = BRW_SURFACEFORMAT_R16G16B16_SSCALED,
      [PIPE_FORMAT_R16G16B16A16_SSCALED]  = BRW_SURFACEFORMAT_R16G16B16A16_SSCALED,
      [PIPE_FORMAT_R8_UNORM]              = BRW_SURFACEFORMAT_R8_UNORM,
      [PIPE_FORMAT_R8G8_UNORM]            = BRW_SURFACEFORMAT_R8G8_UNORM,
      [PIPE_FORMAT_R8G8B8_UNORM]          = BRW_SURFACEFORMAT_R8G8B8_UNORM,
      [PIPE_FORMAT_R8G8B8A8_UNORM]        = BRW_SURFACEFORMAT_R8G8B8A8_UNORM,
      [PIPE_FORMAT_X8B8G8R8_UNORM]        = 0,
      [PIPE_FORMAT_R8_USCALED]            = BRW_SURFACEFORMAT_R8_USCALED,
      [PIPE_FORMAT_R8G8_USCALED]          = BRW_SURFACEFORMAT_R8G8_USCALED,
      [PIPE_FORMAT_R8G8B8_USCALED]        = BRW_SURFACEFORMAT_R8G8B8_USCALED,
      [PIPE_FORMAT_R8G8B8A8_USCALED]      = BRW_SURFACEFORMAT_R8G8B8A8_USCALED,
      [PIPE_FORMAT_R8_SNORM]              = BRW_SURFACEFORMAT_R8_SNORM,
      [PIPE_FORMAT_R8G8_SNORM]            = BRW_SURFACEFORMAT_R8G8_SNORM,
      [PIPE_FORMAT_R8G8B8_SNORM]          = BRW_SURFACEFORMAT_R8G8B8_SNORM,
      [PIPE_FORMAT_R8G8B8A8_SNORM]        = BRW_SURFACEFORMAT_R8G8B8A8_SNORM,
      [PIPE_FORMAT_R8_SSCALED]            = BRW_SURFACEFORMAT_R8_SSCALED,
      [PIPE_FORMAT_R8G8_SSCALED]          = BRW_SURFACEFORMAT_R8G8_SSCALED,
      [PIPE_FORMAT_R8G8B8_SSCALED]        = BRW_SURFACEFORMAT_R8G8B8_SSCALED,
      [PIPE_FORMAT_R8G8B8A8_SSCALED]      = BRW_SURFACEFORMAT_R8G8B8A8_SSCALED,
      [PIPE_FORMAT_R32_FIXED]             = BRW_SURFACEFORMAT_R32_SFIXED,
      [PIPE_FORMAT_R32G32_FIXED]          = BRW_SURFACEFORMAT_R32G32_SFIXED,
      [PIPE_FORMAT_R32G32B32_FIXED]       = BRW_SURFACEFORMAT_R32G32B32_SFIXED,
      [PIPE_FORMAT_R32G32B32A32_FIXED]    = BRW_SURFACEFORMAT_R32G32B32A32_SFIXED,
      [PIPE_FORMAT_R16_FLOAT]             = BRW_SURFACEFORMAT_R16_FLOAT,
      [PIPE_FORMAT_R16G16_FLOAT]          = BRW_SURFACEFORMAT_R16G16_FLOAT,
      [PIPE_FORMAT_R16G16B16_FLOAT]       = BRW_SURFACEFORMAT_R16G16B16_FLOAT,
      [PIPE_FORMAT_R16G16B16A16_FLOAT]    = BRW_SURFACEFORMAT_R16G16B16A16_FLOAT,
      [PIPE_FORMAT_L8_SRGB]               = BRW_SURFACEFORMAT_L8_UNORM_SRGB,
      [PIPE_FORMAT_L8A8_SRGB]             = BRW_SURFACEFORMAT_L8A8_UNORM_SRGB,
      [PIPE_FORMAT_R8G8B8_SRGB]           = BRW_SURFACEFORMAT_R8G8B8_UNORM_SRGB,
      [PIPE_FORMAT_A8B8G8R8_SRGB]         = 0,
      [PIPE_FORMAT_X8B8G8R8_SRGB]         = 0,
      [PIPE_FORMAT_B8G8R8A8_SRGB]         = BRW_SURFACEFORMAT_B8G8R8A8_UNORM_SRGB,
      [PIPE_FORMAT_B8G8R8X8_SRGB]         = 0,
      [PIPE_FORMAT_A8R8G8B8_SRGB]         = 0,
      [PIPE_FORMAT_X8R8G8B8_SRGB]         = 0,
      [PIPE_FORMAT_R8G8B8A8_SRGB]         = 0,
      [PIPE_FORMAT_DXT1_RGB]              = BRW_SURFACEFORMAT_DXT1_RGB,
      [PIPE_FORMAT_DXT1_RGBA]             = BRW_SURFACEFORMAT_BC1_UNORM,
      [PIPE_FORMAT_DXT3_RGBA]             = BRW_SURFACEFORMAT_BC2_UNORM,
      [PIPE_FORMAT_DXT5_RGBA]             = BRW_SURFACEFORMAT_BC3_UNORM,
      [PIPE_FORMAT_DXT1_SRGB]             = BRW_SURFACEFORMAT_DXT1_RGB_SRGB,
      [PIPE_FORMAT_DXT1_SRGBA]            = BRW_SURFACEFORMAT_BC1_UNORM_SRGB,
      [PIPE_FORMAT_DXT3_SRGBA]            = BRW_SURFACEFORMAT_BC2_UNORM_SRGB,
      [PIPE_FORMAT_DXT5_SRGBA]            = BRW_SURFACEFORMAT_BC3_UNORM_SRGB,
      [PIPE_FORMAT_RGTC1_UNORM]           = BRW_SURFACEFORMAT_BC4_UNORM,
      [PIPE_FORMAT_RGTC1_SNORM]           = BRW_SURFACEFORMAT_BC4_SNORM,
      [PIPE_FORMAT_RGTC2_UNORM]           = BRW_SURFACEFORMAT_BC5_UNORM,
      [PIPE_FORMAT_RGTC2_SNORM]           = BRW_SURFACEFORMAT_BC5_SNORM,
      [PIPE_FORMAT_R8G8_B8G8_UNORM]       = 0,
      [PIPE_FORMAT_G8R8_G8B8_UNORM]       = 0,
      [PIPE_FORMAT_R8SG8SB8UX8U_NORM]     = 0,
      [PIPE_FORMAT_R5SG5SB6U_NORM]        = 0,
      [PIPE_FORMAT_A8B8G8R8_UNORM]        = 0,
      [PIPE_FORMAT_B5G5R5X1_UNORM]        = BRW_SURFACEFORMAT_B5G5R5X1_UNORM,
      [PIPE_FORMAT_R10G10B10A2_USCALED]   = BRW_SURFACEFORMAT_R10G10B10A2_USCALED,
      [PIPE_FORMAT_R11G11B10_FLOAT]       = BRW_SURFACEFORMAT_R11G11B10_FLOAT,
      [PIPE_FORMAT_R9G9B9E5_FLOAT]        = BRW_SURFACEFORMAT_R9G9B9E5_SHAREDEXP,
      [PIPE_FORMAT_Z32_FLOAT_S8X24_UINT]  = 0,
      [PIPE_FORMAT_R1_UNORM]              = 0,
      [PIPE_FORMAT_R10G10B10X2_USCALED]   = BRW_SURFACEFORMAT_R10G10B10X2_USCALED,
      [PIPE_FORMAT_R10G10B10X2_SNORM]     = 0,
      [PIPE_FORMAT_L4A4_UNORM]            = 0,
      [PIPE_FORMAT_B10G10R10A2_UNORM]     = BRW_SURFACEFORMAT_B10G10R10A2_UNORM,
      [PIPE_FORMAT_R10SG10SB10SA2U_NORM]  = 0,
      [PIPE_FORMAT_R8G8Bx_SNORM]          = 0,
      [PIPE_FORMAT_R8G8B8X8_UNORM]        = BRW_SURFACEFORMAT_R8G8B8X8_UNORM,
      [PIPE_FORMAT_B4G4R4X4_UNORM]        = 0,
      [PIPE_FORMAT_X24S8_UINT]            = 0,
      [PIPE_FORMAT_S8X24_UINT]            = 0,
      [PIPE_FORMAT_X32_S8X24_UINT]        = 0,
      [PIPE_FORMAT_B2G3R3_UNORM]          = 0,
      [PIPE_FORMAT_L16A16_UNORM]          = BRW_SURFACEFORMAT_L16A16_UNORM,
      [PIPE_FORMAT_A16_UNORM]             = BRW_SURFACEFORMAT_A16_UNORM,
      [PIPE_FORMAT_I16_UNORM]             = BRW_SURFACEFORMAT_I16_UNORM,
      [PIPE_FORMAT_LATC1_UNORM]           = 0,
      [PIPE_FORMAT_LATC1_SNORM]           = 0,
      [PIPE_FORMAT_LATC2_UNORM]           = 0,
      [PIPE_FORMAT_LATC2_SNORM]           = 0,
      [PIPE_FORMAT_A8_SNORM]              = 0,
      [PIPE_FORMAT_L8_SNORM]              = 0,
      [PIPE_FORMAT_L8A8_SNORM]            = 0,
      [PIPE_FORMAT_I8_SNORM]              = 0,
      [PIPE_FORMAT_A16_SNORM]             = 0,
      [PIPE_FORMAT_L16_SNORM]             = 0,
      [PIPE_FORMAT_L16A16_SNORM]          = 0,
      [PIPE_FORMAT_I16_SNORM]             = 0,
      [PIPE_FORMAT_A16_FLOAT]             = BRW_SURFACEFORMAT_A16_FLOAT,
      [PIPE_FORMAT_L16_FLOAT]             = BRW_SURFACEFORMAT_L16_FLOAT,
      [PIPE_FORMAT_L16A16_FLOAT]          = BRW_SURFACEFORMAT_L16A16_FLOAT,
      [PIPE_FORMAT_I16_FLOAT]             = BRW_SURFACEFORMAT_I16_FLOAT,
      [PIPE_FORMAT_A32_FLOAT]             = BRW_SURFACEFORMAT_A32_FLOAT,
      [PIPE_FORMAT_L32_FLOAT]             = BRW_SURFACEFORMAT_L32_FLOAT,
      [PIPE_FORMAT_L32A32_FLOAT]          = BRW_SURFACEFORMAT_L32A32_FLOAT,
      [PIPE_FORMAT_I32_FLOAT]             = BRW_SURFACEFORMAT_I32_FLOAT,
      [PIPE_FORMAT_YV12]                  = 0,
      [PIPE_FORMAT_YV16]                  = 0,
      [PIPE_FORMAT_IYUV]                  = 0,
      [PIPE_FORMAT_NV12]                  = 0,
      [PIPE_FORMAT_NV21]                  = 0,
      [PIPE_FORMAT_R4A4_UNORM]            = 0,
      [PIPE_FORMAT_A4R4_UNORM]            = 0,
      [PIPE_FORMAT_R8A8_UNORM]            = 0,
      [PIPE_FORMAT_A8R8_UNORM]            = 0,
      [PIPE_FORMAT_R10G10B10A2_SSCALED]   = BRW_SURFACEFORMAT_R10G10B10A2_SSCALED,
      [PIPE_FORMAT_R10G10B10A2_SNORM]     = BRW_SURFACEFORMAT_R10G10B10A2_SNORM,
      [PIPE_FORMAT_B10G10R10A2_USCALED]   = BRW_SURFACEFORMAT_B10G10R10A2_USCALED,
      [PIPE_FORMAT_B10G10R10A2_SSCALED]   = BRW_SURFACEFORMAT_B10G10R10A2_SSCALED,
      [PIPE_FORMAT_B10G10R10A2_SNORM]     = BRW_SURFACEFORMAT_B10G10R10A2_SNORM,
      [PIPE_FORMAT_R8_UINT]               = BRW_SURFACEFORMAT_R8_UINT,
      [PIPE_FORMAT_R8G8_UINT]             = BRW_SURFACEFORMAT_R8G8_UINT,
      [PIPE_FORMAT_R8G8B8_UINT]           = BRW_SURFACEFORMAT_R8G8B8_UINT,
      [PIPE_FORMAT_R8G8B8A8_UINT]         = BRW_SURFACEFORMAT_R8G8B8A8_UINT,
      [PIPE_FORMAT_R8_SINT]               = BRW_SURFACEFORMAT_R8_SINT,
      [PIPE_FORMAT_R8G8_SINT]             = BRW_SURFACEFORMAT_R8G8_SINT,
      [PIPE_FORMAT_R8G8B8_SINT]           = BRW_SURFACEFORMAT_R8G8B8_SINT,
      [PIPE_FORMAT_R8G8B8A8_SINT]         = BRW_SURFACEFORMAT_R8G8B8A8_SINT,
      [PIPE_FORMAT_R16_UINT]              = BRW_SURFACEFORMAT_R16_UINT,
      [PIPE_FORMAT_R16G16_UINT]           = BRW_SURFACEFORMAT_R16G16_UINT,
      [PIPE_FORMAT_R16G16B16_UINT]        = BRW_SURFACEFORMAT_R16G16B16_UINT,
      [PIPE_FORMAT_R16G16B16A16_UINT]     = BRW_SURFACEFORMAT_R16G16B16A16_UINT,
      [PIPE_FORMAT_R16_SINT]              = BRW_SURFACEFORMAT_R16_SINT,
      [PIPE_FORMAT_R16G16_SINT]           = BRW_SURFACEFORMAT_R16G16_SINT,
      [PIPE_FORMAT_R16G16B16_SINT]        = BRW_SURFACEFORMAT_R16G16B16_SINT,
      [PIPE_FORMAT_R16G16B16A16_SINT]     = BRW_SURFACEFORMAT_R16G16B16A16_SINT,
      [PIPE_FORMAT_R32_UINT]              = BRW_SURFACEFORMAT_R32_UINT,
      [PIPE_FORMAT_R32G32_UINT]           = BRW_SURFACEFORMAT_R32G32_UINT,
      [PIPE_FORMAT_R32G32B32_UINT]        = BRW_SURFACEFORMAT_R32G32B32_UINT,
      [PIPE_FORMAT_R32G32B32A32_UINT]     = BRW_SURFACEFORMAT_R32G32B32A32_UINT,
      [PIPE_FORMAT_R32_SINT]              = BRW_SURFACEFORMAT_R32_SINT,
      [PIPE_FORMAT_R32G32_SINT]           = BRW_SURFACEFORMAT_R32G32_SINT,
      [PIPE_FORMAT_R32G32B32_SINT]        = BRW_SURFACEFORMAT_R32G32B32_SINT,
      [PIPE_FORMAT_R32G32B32A32_SINT]     = BRW_SURFACEFORMAT_R32G32B32A32_SINT,
      [PIPE_FORMAT_A8_UINT]               = 0,
      [PIPE_FORMAT_I8_UINT]               = BRW_SURFACEFORMAT_I8_UINT,
      [PIPE_FORMAT_L8_UINT]               = BRW_SURFACEFORMAT_L8_UINT,
      [PIPE_FORMAT_L8A8_UINT]             = BRW_SURFACEFORMAT_L8A8_UINT,
      [PIPE_FORMAT_A8_SINT]               = 0,
      [PIPE_FORMAT_I8_SINT]               = BRW_SURFACEFORMAT_I8_SINT,
      [PIPE_FORMAT_L8_SINT]               = BRW_SURFACEFORMAT_L8_SINT,
      [PIPE_FORMAT_L8A8_SINT]             = BRW_SURFACEFORMAT_L8A8_SINT,
      [PIPE_FORMAT_A16_UINT]              = 0,
      [PIPE_FORMAT_I16_UINT]              = 0,
      [PIPE_FORMAT_L16_UINT]              = 0,
      [PIPE_FORMAT_L16A16_UINT]           = 0,
      [PIPE_FORMAT_A16_SINT]              = 0,
      [PIPE_FORMAT_I16_SINT]              = 0,
      [PIPE_FORMAT_L16_SINT]              = 0,
      [PIPE_FORMAT_L16A16_SINT]           = 0,
      [PIPE_FORMAT_A32_UINT]              = 0,
      [PIPE_FORMAT_I32_UINT]              = 0,
      [PIPE_FORMAT_L32_UINT]              = 0,
      [PIPE_FORMAT_L32A32_UINT]           = 0,
      [PIPE_FORMAT_A32_SINT]              = 0,
      [PIPE_FORMAT_I32_SINT]              = 0,
      [PIPE_FORMAT_L32_SINT]              = 0,
      [PIPE_FORMAT_L32A32_SINT]           = 0,
      [PIPE_FORMAT_B10G10R10A2_UINT]      = BRW_SURFACEFORMAT_B10G10R10A2_UINT,
      [PIPE_FORMAT_ETC1_RGB8]             = BRW_SURFACEFORMAT_ETC1_RGB8,
      [PIPE_FORMAT_R8G8_R8B8_UNORM]       = 0,
      [PIPE_FORMAT_G8R8_B8R8_UNORM]       = 0,
      [PIPE_FORMAT_R8G8B8X8_SNORM]        = 0,
      [PIPE_FORMAT_R8G8B8X8_SRGB]         = 0,
      [PIPE_FORMAT_R8G8B8X8_UINT]         = 0,
      [PIPE_FORMAT_R8G8B8X8_SINT]         = 0,
      [PIPE_FORMAT_B10G10R10X2_UNORM]     = BRW_SURFACEFORMAT_B10G10R10X2_UNORM,
      [PIPE_FORMAT_R16G16B16X16_UNORM]    = BRW_SURFACEFORMAT_R16G16B16X16_UNORM,
      [PIPE_FORMAT_R16G16B16X16_SNORM]    = 0,
      [PIPE_FORMAT_R16G16B16X16_FLOAT]    = BRW_SURFACEFORMAT_R16G16B16X16_FLOAT,
      [PIPE_FORMAT_R16G16B16X16_UINT]     = 0,
      [PIPE_FORMAT_R16G16B16X16_SINT]     = 0,
      [PIPE_FORMAT_R32G32B32X32_FLOAT]    = BRW_SURFACEFORMAT_R32G32B32X32_FLOAT,
      [PIPE_FORMAT_R32G32B32X32_UINT]     = 0,
      [PIPE_FORMAT_R32G32B32X32_SINT]     = 0,
      [PIPE_FORMAT_R8A8_SNORM]            = 0,
      [PIPE_FORMAT_R16A16_UNORM]          = 0,
      [PIPE_FORMAT_R16A16_SNORM]          = 0,
      [PIPE_FORMAT_R16A16_FLOAT]          = 0,
      [PIPE_FORMAT_R32A32_FLOAT]          = 0,
      [PIPE_FORMAT_R8A8_UINT]             = 0,
      [PIPE_FORMAT_R8A8_SINT]             = 0,
      [PIPE_FORMAT_R16A16_UINT]           = 0,
      [PIPE_FORMAT_R16A16_SINT]           = 0,
      [PIPE_FORMAT_R32A32_UINT]           = 0,
      [PIPE_FORMAT_R32A32_SINT]           = 0,
   };
   int sfmt = format_mapping[format];

   /* BRW_SURFACEFORMAT_R32G32B32A32_FLOAT happens to be 0 */
   if (!sfmt && format != PIPE_FORMAT_R32G32B32A32_FLOAT)
      sfmt = -1;

   return sfmt;
}

static boolean
ilo_is_format_supported(struct pipe_screen *screen,
                        enum pipe_format format,
                        enum pipe_texture_target target,
                        unsigned sample_count,
                        unsigned bindings)
{
   struct ilo_screen *is = ilo_screen(screen);
   const int gen = ILO_GEN_GET_MAJOR(is->dev.gen * 10);
   const bool is_pure_int = util_format_is_pure_integer(format);
   const struct surface_format_info *info;
   unsigned bind;

   if (!util_format_is_supported(format, bindings))
      return false;

   /* no MSAA support yet */
   if (sample_count > 1)
      return false;

   bind = (bindings & PIPE_BIND_DEPTH_STENCIL);
   if (bind) {
      switch (format) {
      case PIPE_FORMAT_Z16_UNORM:
      case PIPE_FORMAT_Z24X8_UNORM:
      case PIPE_FORMAT_Z32_FLOAT:
      case PIPE_FORMAT_Z24_UNORM_S8_UINT:
      case PIPE_FORMAT_Z32_FLOAT_S8X24_UINT:
         break;
      case PIPE_FORMAT_S8_UINT:
         /* TODO separate stencil */
      default:
         return false;
      }
   }

   bind = (bindings & PIPE_BIND_RENDER_TARGET);
   if (bind) {
      info = lookup_surface_format_info(format, bind);

      if (gen < info->render_target)
         return false;

      if (!is_pure_int && gen < info->alpha_blend)
         return false;
   }

   bind = (bindings & PIPE_BIND_SAMPLER_VIEW);
   if (bind) {
      info = lookup_surface_format_info(format, bind);

      if (gen < info->sampling)
         return false;

      if (!is_pure_int && gen < info->filtering)
         return false;
   }

   bind = (bindings & PIPE_BIND_VERTEX_BUFFER);
   if (bind) {
      info = lookup_surface_format_info(format, bind);

      if (gen < info->input_vb)
         return false;
   }

   return true;
}

static boolean
ilo_is_video_format_supported(struct pipe_screen *screen,
                              enum pipe_format format,
                              enum pipe_video_profile profile)
{
   return vl_video_buffer_is_format_supported(screen, format, profile);
}

/**
 * Initialize format-related functions.
 */
void
ilo_init_format_functions(struct ilo_screen *is)
{
   is->base.is_format_supported = ilo_is_format_supported;
   is->base.is_video_format_supported = ilo_is_video_format_supported;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@a27 1
#include "genhw/genhw.h"
d29 1
d92 46
a137 46
   SF( Y, 50,  x,  x,  Y,  Y,  Y,  Y,  x, GEN6_FORMAT_R32G32B32A32_FLOAT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, GEN6_FORMAT_R32G32B32A32_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, GEN6_FORMAT_R32G32B32A32_UINT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32A32_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32A32_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R64G64_FLOAT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R32G32B32X32_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32A32_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32A32_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R32G32B32A32_SFIXED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R64G64_PASSTHRU)
   SF( Y, 50,  x,  x,  x,  x,  Y,  Y,  x, GEN6_FORMAT_R32G32B32_FLOAT)
   SF( Y,  x,  x,  x,  x,  x,  Y,  Y,  x, GEN6_FORMAT_R32G32B32_SINT)
   SF( Y,  x,  x,  x,  x,  x,  Y,  Y,  x, GEN6_FORMAT_R32G32B32_UINT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R32G32B32_SFIXED)
   SF( Y,  Y,  x,  x,  Y, 45,  Y,  x, 60, GEN6_FORMAT_R16G16B16A16_UNORM)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, GEN6_FORMAT_R16G16B16A16_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16A16_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16A16_UINT)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, GEN6_FORMAT_R16G16B16A16_FLOAT)
   SF( Y, 50,  x,  x,  Y,  Y,  Y,  Y,  x, GEN6_FORMAT_R32G32_FLOAT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, GEN6_FORMAT_R32G32_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, GEN6_FORMAT_R32G32_UINT)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R32_FLOAT_X8X24_TYPELESS)
   SF( Y,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_X32_TYPELESS_G8X24_UINT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L32A32_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R64_FLOAT)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R16G16B16X16_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R16G16B16X16_FLOAT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A32X32_FLOAT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L32X32_FLOAT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I32X32_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16A16_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16A16_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R32G32_SFIXED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R64_PASSTHRU)
   SF( Y,  Y,  x,  Y,  Y,  Y,  Y,  x, 60, GEN6_FORMAT_B8G8R8A8_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B8G8R8A8_UNORM_SRGB)
d139 38
a176 38
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x, 60, GEN6_FORMAT_R10G10B10A2_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x, 60, GEN6_FORMAT_R10G10B10A2_UNORM_SRGB)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R10G10B10A2_UINT)
   SF( Y,  Y,  x,  x,  x,  Y,  Y,  x,  x, GEN6_FORMAT_R10G10B10_SNORM_A2_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x, 60, GEN6_FORMAT_R8G8B8A8_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x, 60, GEN6_FORMAT_R8G8B8A8_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, GEN6_FORMAT_R8G8B8A8_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8A8_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8A8_UINT)
   SF( Y,  Y,  x,  x,  Y, 45,  Y,  x,  x, GEN6_FORMAT_R16G16_UNORM)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, GEN6_FORMAT_R16G16_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R16G16_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R16G16_UINT)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, GEN6_FORMAT_R16G16_FLOAT)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x, 60, GEN6_FORMAT_B10G10R10A2_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x, 60, GEN6_FORMAT_B10G10R10A2_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, GEN6_FORMAT_R11G11B10_FLOAT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, GEN6_FORMAT_R32_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, GEN6_FORMAT_R32_UINT)
   SF( Y, 50,  Y,  x,  Y,  Y,  Y,  Y,  x, GEN6_FORMAT_R32_FLOAT)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R24_UNORM_X8_TYPELESS)
   SF( Y,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_X24_TYPELESS_G8_UINT)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L16A16_UNORM)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I24X8_UNORM)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L24X8_UNORM)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A24X8_UNORM)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I32_FLOAT)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L32_FLOAT)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A32_FLOAT)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x, 60, GEN6_FORMAT_B8G8R8X8_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_B8G8R8X8_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R8G8B8X8_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R8G8B8X8_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R9G9B9E5_SHAREDEXP)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_B10G10R10X2_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L16A16_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32_SNORM)
d178 37
a214 37
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R10G10B10X2_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8A8_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8A8_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32_USCALED)
   SF( Y,  Y,  x,  Y,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B5G6R5_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B5G6R5_UNORM_SRGB)
   SF( Y,  Y,  x,  Y,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B5G5R5A1_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B5G5R5A1_UNORM_SRGB)
   SF( Y,  Y,  x,  Y,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B4G4R4A4_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B4G4R4A4_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, GEN6_FORMAT_R8G8_UNORM)
   SF( Y,  Y,  x,  Y,  Y, 60,  Y,  x,  x, GEN6_FORMAT_R8G8_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R8G8_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R8G8_UINT)
   SF( Y,  Y,  Y,  x,  Y, 45,  Y,  x, 70, GEN6_FORMAT_R16_UNORM)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, GEN6_FORMAT_R16_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R16_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R16_UINT)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, GEN6_FORMAT_R16_FLOAT)
   SF(50, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A8P8_UNORM_PALETTE0)
   SF(50, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A8P8_UNORM_PALETTE1)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I16_UNORM)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L16_UNORM)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A16_UNORM)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, GEN6_FORMAT_L8A8_UNORM)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I16_FLOAT)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L16_FLOAT)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A16_FLOAT)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L8A8_UNORM_SRGB)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, GEN6_FORMAT_R5G5_SNORM_B6_UNORM)
   SF( x,  x,  x,  x,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B5G5R5X1_UNORM)
   SF( x,  x,  x,  x,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B5G5R5X1_UNORM_SRGB)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8_USCALED)
d216 47
a262 47
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16_USCALED)
   SF(50, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P8A8_UNORM_PALETTE0)
   SF(50, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P8A8_UNORM_PALETTE1)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A1B5G5R5_UNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A4B4G4R4_UNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L8A8_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L8A8_SINT)
   SF( Y,  Y,  x, 45,  Y,  Y,  Y,  x,  x, GEN6_FORMAT_R8_UNORM)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, GEN6_FORMAT_R8_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R8_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R8_UINT)
   SF( Y,  Y,  x,  Y,  Y,  Y,  x,  x,  x, GEN6_FORMAT_A8_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I8_UNORM)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, GEN6_FORMAT_L8_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P4A4_UNORM_PALETTE0)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A4P4_UNORM_PALETTE0)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8_USCALED)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P8_UNORM_PALETTE0)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L8_UNORM_SRGB)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P8_UNORM_PALETTE1)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P4A4_UNORM_PALETTE1)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A4P4_UNORM_PALETTE1)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_Y8_UNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L8_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L8_SINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I8_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I8_SINT)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_DXT1_RGB_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R1_UNORM)
   SF( Y,  Y,  x,  Y,  Y,  x,  x,  x, 60, GEN6_FORMAT_YCRCB_NORMAL)
   SF( Y,  Y,  x,  Y,  Y,  x,  x,  x, 60, GEN6_FORMAT_YCRCB_SWAPUVY)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P2_UNORM_PALETTE0)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P2_UNORM_PALETTE1)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, GEN6_FORMAT_BC1_UNORM)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, GEN6_FORMAT_BC2_UNORM)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, GEN6_FORMAT_BC3_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC4_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC5_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC1_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC2_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC3_UNORM_SRGB)
   SF( Y,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_MONO8)
   SF( Y,  Y,  x,  x,  Y,  x,  x,  x, 60, GEN6_FORMAT_YCRCB_SWAPUV)
   SF( Y,  Y,  x,  x,  Y,  x,  x,  x, 60, GEN6_FORMAT_YCRCB_SWAPY)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_DXT1_RGB)
d264 47
a310 47
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_FXT1)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R64G64B64A64_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R64G64B64_FLOAT)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC4_SNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC5_SNORM)
   SF(50, 50,  x,  x,  x,  x, 60,  x,  x, GEN6_FORMAT_R16G16B16_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16_USCALED)
   SF(70, 70,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC6H_SF16)
   SF(70, 70,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC7_UNORM)
   SF(70, 70,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC7_UNORM_SRGB)
   SF(70, 70,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC6H_UF16)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_PLANAR_420_8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R8G8B8_UNORM_SRGB)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_ETC1_RGB8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_ETC2_RGB8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_EAC_R11)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_EAC_RG11)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_EAC_SIGNED_R11)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_EAC_SIGNED_RG11)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_ETC2_SRGB8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R16G16B16_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R16G16B16_SINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R32_SFIXED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R10G10B10A2_SNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R10G10B10A2_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R10G10B10A2_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R10G10B10A2_SINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_B10G10R10A2_SNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_B10G10R10A2_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_B10G10R10A2_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_B10G10R10A2_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_B10G10R10A2_SINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R64G64B64A64_PASSTHRU)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R64G64B64_PASSTHRU)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_ETC2_RGB8_PTA)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_ETC2_SRGB8_PTA)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_ETC2_EAC_RGBA8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_ETC2_EAC_SRGB8_A8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R8G8B8_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R8G8B8_SINT)
d346 2
a347 2
      [PIPE_FORMAT_B8G8R8A8_UNORM]        = GEN6_FORMAT_B8G8R8A8_UNORM,
      [PIPE_FORMAT_B8G8R8X8_UNORM]        = GEN6_FORMAT_B8G8R8X8_UNORM,
d350 11
a360 11
      [PIPE_FORMAT_B5G5R5A1_UNORM]        = GEN6_FORMAT_B5G5R5A1_UNORM,
      [PIPE_FORMAT_B4G4R4A4_UNORM]        = GEN6_FORMAT_B4G4R4A4_UNORM,
      [PIPE_FORMAT_B5G6R5_UNORM]          = GEN6_FORMAT_B5G6R5_UNORM,
      [PIPE_FORMAT_R10G10B10A2_UNORM]     = GEN6_FORMAT_R10G10B10A2_UNORM,
      [PIPE_FORMAT_L8_UNORM]              = GEN6_FORMAT_L8_UNORM,
      [PIPE_FORMAT_A8_UNORM]              = GEN6_FORMAT_A8_UNORM,
      [PIPE_FORMAT_I8_UNORM]              = GEN6_FORMAT_I8_UNORM,
      [PIPE_FORMAT_L8A8_UNORM]            = GEN6_FORMAT_L8A8_UNORM,
      [PIPE_FORMAT_L16_UNORM]             = GEN6_FORMAT_L16_UNORM,
      [PIPE_FORMAT_UYVY]                  = GEN6_FORMAT_YCRCB_SWAPUVY,
      [PIPE_FORMAT_YUYV]                  = GEN6_FORMAT_YCRCB_NORMAL,
d369 44
a412 44
      [PIPE_FORMAT_R64_FLOAT]             = GEN6_FORMAT_R64_FLOAT,
      [PIPE_FORMAT_R64G64_FLOAT]          = GEN6_FORMAT_R64G64_FLOAT,
      [PIPE_FORMAT_R64G64B64_FLOAT]       = GEN6_FORMAT_R64G64B64_FLOAT,
      [PIPE_FORMAT_R64G64B64A64_FLOAT]    = GEN6_FORMAT_R64G64B64A64_FLOAT,
      [PIPE_FORMAT_R32_FLOAT]             = GEN6_FORMAT_R32_FLOAT,
      [PIPE_FORMAT_R32G32_FLOAT]          = GEN6_FORMAT_R32G32_FLOAT,
      [PIPE_FORMAT_R32G32B32_FLOAT]       = GEN6_FORMAT_R32G32B32_FLOAT,
      [PIPE_FORMAT_R32G32B32A32_FLOAT]    = GEN6_FORMAT_R32G32B32A32_FLOAT,
      [PIPE_FORMAT_R32_UNORM]             = GEN6_FORMAT_R32_UNORM,
      [PIPE_FORMAT_R32G32_UNORM]          = GEN6_FORMAT_R32G32_UNORM,
      [PIPE_FORMAT_R32G32B32_UNORM]       = GEN6_FORMAT_R32G32B32_UNORM,
      [PIPE_FORMAT_R32G32B32A32_UNORM]    = GEN6_FORMAT_R32G32B32A32_UNORM,
      [PIPE_FORMAT_R32_USCALED]           = GEN6_FORMAT_R32_USCALED,
      [PIPE_FORMAT_R32G32_USCALED]        = GEN6_FORMAT_R32G32_USCALED,
      [PIPE_FORMAT_R32G32B32_USCALED]     = GEN6_FORMAT_R32G32B32_USCALED,
      [PIPE_FORMAT_R32G32B32A32_USCALED]  = GEN6_FORMAT_R32G32B32A32_USCALED,
      [PIPE_FORMAT_R32_SNORM]             = GEN6_FORMAT_R32_SNORM,
      [PIPE_FORMAT_R32G32_SNORM]          = GEN6_FORMAT_R32G32_SNORM,
      [PIPE_FORMAT_R32G32B32_SNORM]       = GEN6_FORMAT_R32G32B32_SNORM,
      [PIPE_FORMAT_R32G32B32A32_SNORM]    = GEN6_FORMAT_R32G32B32A32_SNORM,
      [PIPE_FORMAT_R32_SSCALED]           = GEN6_FORMAT_R32_SSCALED,
      [PIPE_FORMAT_R32G32_SSCALED]        = GEN6_FORMAT_R32G32_SSCALED,
      [PIPE_FORMAT_R32G32B32_SSCALED]     = GEN6_FORMAT_R32G32B32_SSCALED,
      [PIPE_FORMAT_R32G32B32A32_SSCALED]  = GEN6_FORMAT_R32G32B32A32_SSCALED,
      [PIPE_FORMAT_R16_UNORM]             = GEN6_FORMAT_R16_UNORM,
      [PIPE_FORMAT_R16G16_UNORM]          = GEN6_FORMAT_R16G16_UNORM,
      [PIPE_FORMAT_R16G16B16_UNORM]       = GEN6_FORMAT_R16G16B16_UNORM,
      [PIPE_FORMAT_R16G16B16A16_UNORM]    = GEN6_FORMAT_R16G16B16A16_UNORM,
      [PIPE_FORMAT_R16_USCALED]           = GEN6_FORMAT_R16_USCALED,
      [PIPE_FORMAT_R16G16_USCALED]        = GEN6_FORMAT_R16G16_USCALED,
      [PIPE_FORMAT_R16G16B16_USCALED]     = GEN6_FORMAT_R16G16B16_USCALED,
      [PIPE_FORMAT_R16G16B16A16_USCALED]  = GEN6_FORMAT_R16G16B16A16_USCALED,
      [PIPE_FORMAT_R16_SNORM]             = GEN6_FORMAT_R16_SNORM,
      [PIPE_FORMAT_R16G16_SNORM]          = GEN6_FORMAT_R16G16_SNORM,
      [PIPE_FORMAT_R16G16B16_SNORM]       = GEN6_FORMAT_R16G16B16_SNORM,
      [PIPE_FORMAT_R16G16B16A16_SNORM]    = GEN6_FORMAT_R16G16B16A16_SNORM,
      [PIPE_FORMAT_R16_SSCALED]           = GEN6_FORMAT_R16_SSCALED,
      [PIPE_FORMAT_R16G16_SSCALED]        = GEN6_FORMAT_R16G16_SSCALED,
      [PIPE_FORMAT_R16G16B16_SSCALED]     = GEN6_FORMAT_R16G16B16_SSCALED,
      [PIPE_FORMAT_R16G16B16A16_SSCALED]  = GEN6_FORMAT_R16G16B16A16_SSCALED,
      [PIPE_FORMAT_R8_UNORM]              = GEN6_FORMAT_R8_UNORM,
      [PIPE_FORMAT_R8G8_UNORM]            = GEN6_FORMAT_R8G8_UNORM,
      [PIPE_FORMAT_R8G8B8_UNORM]          = GEN6_FORMAT_R8G8B8_UNORM,
      [PIPE_FORMAT_R8G8B8A8_UNORM]        = GEN6_FORMAT_R8G8B8A8_UNORM,
d414 23
a436 23
      [PIPE_FORMAT_R8_USCALED]            = GEN6_FORMAT_R8_USCALED,
      [PIPE_FORMAT_R8G8_USCALED]          = GEN6_FORMAT_R8G8_USCALED,
      [PIPE_FORMAT_R8G8B8_USCALED]        = GEN6_FORMAT_R8G8B8_USCALED,
      [PIPE_FORMAT_R8G8B8A8_USCALED]      = GEN6_FORMAT_R8G8B8A8_USCALED,
      [PIPE_FORMAT_R8_SNORM]              = GEN6_FORMAT_R8_SNORM,
      [PIPE_FORMAT_R8G8_SNORM]            = GEN6_FORMAT_R8G8_SNORM,
      [PIPE_FORMAT_R8G8B8_SNORM]          = GEN6_FORMAT_R8G8B8_SNORM,
      [PIPE_FORMAT_R8G8B8A8_SNORM]        = GEN6_FORMAT_R8G8B8A8_SNORM,
      [PIPE_FORMAT_R8_SSCALED]            = GEN6_FORMAT_R8_SSCALED,
      [PIPE_FORMAT_R8G8_SSCALED]          = GEN6_FORMAT_R8G8_SSCALED,
      [PIPE_FORMAT_R8G8B8_SSCALED]        = GEN6_FORMAT_R8G8B8_SSCALED,
      [PIPE_FORMAT_R8G8B8A8_SSCALED]      = GEN6_FORMAT_R8G8B8A8_SSCALED,
      [PIPE_FORMAT_R32_FIXED]             = GEN6_FORMAT_R32_SFIXED,
      [PIPE_FORMAT_R32G32_FIXED]          = GEN6_FORMAT_R32G32_SFIXED,
      [PIPE_FORMAT_R32G32B32_FIXED]       = GEN6_FORMAT_R32G32B32_SFIXED,
      [PIPE_FORMAT_R32G32B32A32_FIXED]    = GEN6_FORMAT_R32G32B32A32_SFIXED,
      [PIPE_FORMAT_R16_FLOAT]             = GEN6_FORMAT_R16_FLOAT,
      [PIPE_FORMAT_R16G16_FLOAT]          = GEN6_FORMAT_R16G16_FLOAT,
      [PIPE_FORMAT_R16G16B16_FLOAT]       = GEN6_FORMAT_R16G16B16_FLOAT,
      [PIPE_FORMAT_R16G16B16A16_FLOAT]    = GEN6_FORMAT_R16G16B16A16_FLOAT,
      [PIPE_FORMAT_L8_SRGB]               = GEN6_FORMAT_L8_UNORM_SRGB,
      [PIPE_FORMAT_L8A8_SRGB]             = GEN6_FORMAT_L8A8_UNORM_SRGB,
      [PIPE_FORMAT_R8G8B8_SRGB]           = GEN6_FORMAT_R8G8B8_UNORM_SRGB,
d439 1
a439 1
      [PIPE_FORMAT_B8G8R8A8_SRGB]         = GEN6_FORMAT_B8G8R8A8_UNORM_SRGB,
d444 12
a455 12
      [PIPE_FORMAT_DXT1_RGB]              = GEN6_FORMAT_DXT1_RGB,
      [PIPE_FORMAT_DXT1_RGBA]             = GEN6_FORMAT_BC1_UNORM,
      [PIPE_FORMAT_DXT3_RGBA]             = GEN6_FORMAT_BC2_UNORM,
      [PIPE_FORMAT_DXT5_RGBA]             = GEN6_FORMAT_BC3_UNORM,
      [PIPE_FORMAT_DXT1_SRGB]             = GEN6_FORMAT_DXT1_RGB_SRGB,
      [PIPE_FORMAT_DXT1_SRGBA]            = GEN6_FORMAT_BC1_UNORM_SRGB,
      [PIPE_FORMAT_DXT3_SRGBA]            = GEN6_FORMAT_BC2_UNORM_SRGB,
      [PIPE_FORMAT_DXT5_SRGBA]            = GEN6_FORMAT_BC3_UNORM_SRGB,
      [PIPE_FORMAT_RGTC1_UNORM]           = GEN6_FORMAT_BC4_UNORM,
      [PIPE_FORMAT_RGTC1_SNORM]           = GEN6_FORMAT_BC4_SNORM,
      [PIPE_FORMAT_RGTC2_UNORM]           = GEN6_FORMAT_BC5_UNORM,
      [PIPE_FORMAT_RGTC2_SNORM]           = GEN6_FORMAT_BC5_SNORM,
d461 4
a464 4
      [PIPE_FORMAT_B5G5R5X1_UNORM]        = GEN6_FORMAT_B5G5R5X1_UNORM,
      [PIPE_FORMAT_R10G10B10A2_USCALED]   = GEN6_FORMAT_R10G10B10A2_USCALED,
      [PIPE_FORMAT_R11G11B10_FLOAT]       = GEN6_FORMAT_R11G11B10_FLOAT,
      [PIPE_FORMAT_R9G9B9E5_FLOAT]        = GEN6_FORMAT_R9G9B9E5_SHAREDEXP,
d467 1
a467 1
      [PIPE_FORMAT_R10G10B10X2_USCALED]   = GEN6_FORMAT_R10G10B10X2_USCALED,
d470 1
a470 1
      [PIPE_FORMAT_B10G10R10A2_UNORM]     = GEN6_FORMAT_B10G10R10A2_UNORM,
d473 1
a473 1
      [PIPE_FORMAT_R8G8B8X8_UNORM]        = GEN6_FORMAT_R8G8B8X8_UNORM,
d479 3
a481 3
      [PIPE_FORMAT_L16A16_UNORM]          = GEN6_FORMAT_L16A16_UNORM,
      [PIPE_FORMAT_A16_UNORM]             = GEN6_FORMAT_A16_UNORM,
      [PIPE_FORMAT_I16_UNORM]             = GEN6_FORMAT_I16_UNORM,
d494 8
a501 8
      [PIPE_FORMAT_A16_FLOAT]             = GEN6_FORMAT_A16_FLOAT,
      [PIPE_FORMAT_L16_FLOAT]             = GEN6_FORMAT_L16_FLOAT,
      [PIPE_FORMAT_L16A16_FLOAT]          = GEN6_FORMAT_L16A16_FLOAT,
      [PIPE_FORMAT_I16_FLOAT]             = GEN6_FORMAT_I16_FLOAT,
      [PIPE_FORMAT_A32_FLOAT]             = GEN6_FORMAT_A32_FLOAT,
      [PIPE_FORMAT_L32_FLOAT]             = GEN6_FORMAT_L32_FLOAT,
      [PIPE_FORMAT_L32A32_FLOAT]          = GEN6_FORMAT_L32A32_FLOAT,
      [PIPE_FORMAT_I32_FLOAT]             = GEN6_FORMAT_I32_FLOAT,
d507 1
a508 1
      [PIPE_FORMAT_R4A4_UNORM]            = 0,
d511 29
a539 29
      [PIPE_FORMAT_R10G10B10A2_SSCALED]   = GEN6_FORMAT_R10G10B10A2_SSCALED,
      [PIPE_FORMAT_R10G10B10A2_SNORM]     = GEN6_FORMAT_R10G10B10A2_SNORM,
      [PIPE_FORMAT_B10G10R10A2_USCALED]   = GEN6_FORMAT_B10G10R10A2_USCALED,
      [PIPE_FORMAT_B10G10R10A2_SSCALED]   = GEN6_FORMAT_B10G10R10A2_SSCALED,
      [PIPE_FORMAT_B10G10R10A2_SNORM]     = GEN6_FORMAT_B10G10R10A2_SNORM,
      [PIPE_FORMAT_R8_UINT]               = GEN6_FORMAT_R8_UINT,
      [PIPE_FORMAT_R8G8_UINT]             = GEN6_FORMAT_R8G8_UINT,
      [PIPE_FORMAT_R8G8B8_UINT]           = GEN6_FORMAT_R8G8B8_UINT,
      [PIPE_FORMAT_R8G8B8A8_UINT]         = GEN6_FORMAT_R8G8B8A8_UINT,
      [PIPE_FORMAT_R8_SINT]               = GEN6_FORMAT_R8_SINT,
      [PIPE_FORMAT_R8G8_SINT]             = GEN6_FORMAT_R8G8_SINT,
      [PIPE_FORMAT_R8G8B8_SINT]           = GEN6_FORMAT_R8G8B8_SINT,
      [PIPE_FORMAT_R8G8B8A8_SINT]         = GEN6_FORMAT_R8G8B8A8_SINT,
      [PIPE_FORMAT_R16_UINT]              = GEN6_FORMAT_R16_UINT,
      [PIPE_FORMAT_R16G16_UINT]           = GEN6_FORMAT_R16G16_UINT,
      [PIPE_FORMAT_R16G16B16_UINT]        = GEN6_FORMAT_R16G16B16_UINT,
      [PIPE_FORMAT_R16G16B16A16_UINT]     = GEN6_FORMAT_R16G16B16A16_UINT,
      [PIPE_FORMAT_R16_SINT]              = GEN6_FORMAT_R16_SINT,
      [PIPE_FORMAT_R16G16_SINT]           = GEN6_FORMAT_R16G16_SINT,
      [PIPE_FORMAT_R16G16B16_SINT]        = GEN6_FORMAT_R16G16B16_SINT,
      [PIPE_FORMAT_R16G16B16A16_SINT]     = GEN6_FORMAT_R16G16B16A16_SINT,
      [PIPE_FORMAT_R32_UINT]              = GEN6_FORMAT_R32_UINT,
      [PIPE_FORMAT_R32G32_UINT]           = GEN6_FORMAT_R32G32_UINT,
      [PIPE_FORMAT_R32G32B32_UINT]        = GEN6_FORMAT_R32G32B32_UINT,
      [PIPE_FORMAT_R32G32B32A32_UINT]     = GEN6_FORMAT_R32G32B32A32_UINT,
      [PIPE_FORMAT_R32_SINT]              = GEN6_FORMAT_R32_SINT,
      [PIPE_FORMAT_R32G32_SINT]           = GEN6_FORMAT_R32G32_SINT,
      [PIPE_FORMAT_R32G32B32_SINT]        = GEN6_FORMAT_R32G32B32_SINT,
      [PIPE_FORMAT_R32G32B32A32_SINT]     = GEN6_FORMAT_R32G32B32A32_SINT,
d541 3
a543 3
      [PIPE_FORMAT_I8_UINT]               = GEN6_FORMAT_I8_UINT,
      [PIPE_FORMAT_L8_UINT]               = GEN6_FORMAT_L8_UINT,
      [PIPE_FORMAT_L8A8_UINT]             = GEN6_FORMAT_L8A8_UINT,
d545 3
a547 3
      [PIPE_FORMAT_I8_SINT]               = GEN6_FORMAT_I8_SINT,
      [PIPE_FORMAT_L8_SINT]               = GEN6_FORMAT_L8_SINT,
      [PIPE_FORMAT_L8A8_SINT]             = GEN6_FORMAT_L8A8_SINT,
d564 2
a565 2
      [PIPE_FORMAT_B10G10R10A2_UINT]      = GEN6_FORMAT_B10G10R10A2_UINT,
      [PIPE_FORMAT_ETC1_RGB8]             = GEN6_FORMAT_ETC1_RGB8,
d572 2
a573 2
      [PIPE_FORMAT_B10G10R10X2_UNORM]     = GEN6_FORMAT_B10G10R10X2_UNORM,
      [PIPE_FORMAT_R16G16B16X16_UNORM]    = GEN6_FORMAT_R16G16B16X16_UNORM,
d575 1
a575 1
      [PIPE_FORMAT_R16G16B16X16_FLOAT]    = GEN6_FORMAT_R16G16B16X16_FLOAT,
d578 1
a578 1
      [PIPE_FORMAT_R32G32B32X32_FLOAT]    = GEN6_FORMAT_R32G32B32X32_FLOAT,
a591 1
      [PIPE_FORMAT_R10G10B10A2_UINT]      = GEN6_FORMAT_R10G10B10A2_UINT,
d595 1
a595 1
   /* GEN6_FORMAT_R32G32B32A32_FLOAT happens to be 0 */
d674 1
a674 2
                              enum pipe_video_profile profile,
                              enum pipe_video_entrypoint entrypoint)
d676 1
a676 1
   return vl_video_buffer_is_format_supported(screen, format, profile, entrypoint);
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d34 3
a36 9
struct ilo_vf_cap {
   int vertex_element;
};

struct ilo_sol_cap {
   int buffer;
};

struct ilo_sampler_cap {
d39 1
a39 1
   int shadow_map;
d41 5
d48 5
a52 6
struct ilo_dp_cap {
   int rt_write;
   int rt_write_blending;
   int typed_write;
   int media_color_processing;
};
d54 9
a62 2
/*
 * This table is based on:
d64 21
a84 115
 *  - the Sandy Bridge PRM, volume 4 part 1, page 88-97
 *  - the Ivy Bridge PRM, volume 2 part 1, page 97-99
 *  - the Haswell PRM, volume 7, page 467-470
 */
static const struct ilo_vf_cap ilo_vf_caps[] = {
#define CAP(vertex_element) { ILO_GEN(vertex_element) }
   [GEN6_FORMAT_R32G32B32A32_FLOAT]       = CAP(  1),
   [GEN6_FORMAT_R32G32B32A32_SINT]        = CAP(  1),
   [GEN6_FORMAT_R32G32B32A32_UINT]        = CAP(  1),
   [GEN6_FORMAT_R32G32B32A32_UNORM]       = CAP(  1),
   [GEN6_FORMAT_R32G32B32A32_SNORM]       = CAP(  1),
   [GEN6_FORMAT_R64G64_FLOAT]             = CAP(  1),
   [GEN6_FORMAT_R32G32B32A32_SSCALED]     = CAP(  1),
   [GEN6_FORMAT_R32G32B32A32_USCALED]     = CAP(  1),
   [GEN6_FORMAT_R32G32B32A32_SFIXED]      = CAP(7.5),
   [GEN6_FORMAT_R32G32B32_FLOAT]          = CAP(  1),
   [GEN6_FORMAT_R32G32B32_SINT]           = CAP(  1),
   [GEN6_FORMAT_R32G32B32_UINT]           = CAP(  1),
   [GEN6_FORMAT_R32G32B32_UNORM]          = CAP(  1),
   [GEN6_FORMAT_R32G32B32_SNORM]          = CAP(  1),
   [GEN6_FORMAT_R32G32B32_SSCALED]        = CAP(  1),
   [GEN6_FORMAT_R32G32B32_USCALED]        = CAP(  1),
   [GEN6_FORMAT_R32G32B32_SFIXED]         = CAP(7.5),
   [GEN6_FORMAT_R16G16B16A16_UNORM]       = CAP(  1),
   [GEN6_FORMAT_R16G16B16A16_SNORM]       = CAP(  1),
   [GEN6_FORMAT_R16G16B16A16_SINT]        = CAP(  1),
   [GEN6_FORMAT_R16G16B16A16_UINT]        = CAP(  1),
   [GEN6_FORMAT_R16G16B16A16_FLOAT]       = CAP(  1),
   [GEN6_FORMAT_R32G32_FLOAT]             = CAP(  1),
   [GEN6_FORMAT_R32G32_SINT]              = CAP(  1),
   [GEN6_FORMAT_R32G32_UINT]              = CAP(  1),
   [GEN6_FORMAT_R32G32_UNORM]             = CAP(  1),
   [GEN6_FORMAT_R32G32_SNORM]             = CAP(  1),
   [GEN6_FORMAT_R64_FLOAT]                = CAP(  1),
   [GEN6_FORMAT_R16G16B16A16_SSCALED]     = CAP(  1),
   [GEN6_FORMAT_R16G16B16A16_USCALED]     = CAP(  1),
   [GEN6_FORMAT_R32G32_SSCALED]           = CAP(  1),
   [GEN6_FORMAT_R32G32_USCALED]           = CAP(  1),
   [GEN6_FORMAT_R32G32_SFIXED]            = CAP(7.5),
   [GEN6_FORMAT_B8G8R8A8_UNORM]           = CAP(  1),
   [GEN6_FORMAT_R10G10B10A2_UNORM]        = CAP(  1),
   [GEN6_FORMAT_R10G10B10A2_UINT]         = CAP(  1),
   [GEN6_FORMAT_R10G10B10_SNORM_A2_UNORM] = CAP(  1),
   [GEN6_FORMAT_R8G8B8A8_UNORM]           = CAP(  1),
   [GEN6_FORMAT_R8G8B8A8_SNORM]           = CAP(  1),
   [GEN6_FORMAT_R8G8B8A8_SINT]            = CAP(  1),
   [GEN6_FORMAT_R8G8B8A8_UINT]            = CAP(  1),
   [GEN6_FORMAT_R16G16_UNORM]             = CAP(  1),
   [GEN6_FORMAT_R16G16_SNORM]             = CAP(  1),
   [GEN6_FORMAT_R16G16_SINT]              = CAP(  1),
   [GEN6_FORMAT_R16G16_UINT]              = CAP(  1),
   [GEN6_FORMAT_R16G16_FLOAT]             = CAP(  1),
   [GEN6_FORMAT_B10G10R10A2_UNORM]        = CAP(7.5),
   [GEN6_FORMAT_R11G11B10_FLOAT]          = CAP(  1),
   [GEN6_FORMAT_R32_SINT]                 = CAP(  1),
   [GEN6_FORMAT_R32_UINT]                 = CAP(  1),
   [GEN6_FORMAT_R32_FLOAT]                = CAP(  1),
   [GEN6_FORMAT_R32_UNORM]                = CAP(  1),
   [GEN6_FORMAT_R32_SNORM]                = CAP(  1),
   [GEN6_FORMAT_R10G10B10X2_USCALED]      = CAP(  1),
   [GEN6_FORMAT_R8G8B8A8_SSCALED]         = CAP(  1),
   [GEN6_FORMAT_R8G8B8A8_USCALED]         = CAP(  1),
   [GEN6_FORMAT_R16G16_SSCALED]           = CAP(  1),
   [GEN6_FORMAT_R16G16_USCALED]           = CAP(  1),
   [GEN6_FORMAT_R32_SSCALED]              = CAP(  1),
   [GEN6_FORMAT_R32_USCALED]              = CAP(  1),
   [GEN6_FORMAT_R8G8_UNORM]               = CAP(  1),
   [GEN6_FORMAT_R8G8_SNORM]               = CAP(  1),
   [GEN6_FORMAT_R8G8_SINT]                = CAP(  1),
   [GEN6_FORMAT_R8G8_UINT]                = CAP(  1),
   [GEN6_FORMAT_R16_UNORM]                = CAP(  1),
   [GEN6_FORMAT_R16_SNORM]                = CAP(  1),
   [GEN6_FORMAT_R16_SINT]                 = CAP(  1),
   [GEN6_FORMAT_R16_UINT]                 = CAP(  1),
   [GEN6_FORMAT_R16_FLOAT]                = CAP(  1),
   [GEN6_FORMAT_R8G8_SSCALED]             = CAP(  1),
   [GEN6_FORMAT_R8G8_USCALED]             = CAP(  1),
   [GEN6_FORMAT_R16_SSCALED]              = CAP(  1),
   [GEN6_FORMAT_R16_USCALED]              = CAP(  1),
   [GEN6_FORMAT_R8_UNORM]                 = CAP(  1),
   [GEN6_FORMAT_R8_SNORM]                 = CAP(  1),
   [GEN6_FORMAT_R8_SINT]                  = CAP(  1),
   [GEN6_FORMAT_R8_UINT]                  = CAP(  1),
   [GEN6_FORMAT_R8_SSCALED]               = CAP(  1),
   [GEN6_FORMAT_R8_USCALED]               = CAP(  1),
   [GEN6_FORMAT_R8G8B8_UNORM]             = CAP(  1),
   [GEN6_FORMAT_R8G8B8_SNORM]             = CAP(  1),
   [GEN6_FORMAT_R8G8B8_SSCALED]           = CAP(  1),
   [GEN6_FORMAT_R8G8B8_USCALED]           = CAP(  1),
   [GEN6_FORMAT_R64G64B64A64_FLOAT]       = CAP(  1),
   [GEN6_FORMAT_R64G64B64_FLOAT]          = CAP(  1),
   [GEN6_FORMAT_R16G16B16_FLOAT]          = CAP(  6),
   [GEN6_FORMAT_R16G16B16_UNORM]          = CAP(  1),
   [GEN6_FORMAT_R16G16B16_SNORM]          = CAP(  1),
   [GEN6_FORMAT_R16G16B16_SSCALED]        = CAP(  1),
   [GEN6_FORMAT_R16G16B16_USCALED]        = CAP(  1),
   [GEN6_FORMAT_R16G16B16_UINT]           = CAP(7.5),
   [GEN6_FORMAT_R16G16B16_SINT]           = CAP(7.5),
   [GEN6_FORMAT_R32_SFIXED]               = CAP(7.5),
   [GEN6_FORMAT_R10G10B10A2_SNORM]        = CAP(7.5),
   [GEN6_FORMAT_R10G10B10A2_USCALED]      = CAP(7.5),
   [GEN6_FORMAT_R10G10B10A2_SSCALED]      = CAP(7.5),
   [GEN6_FORMAT_R10G10B10A2_SINT]         = CAP(7.5),
   [GEN6_FORMAT_B10G10R10A2_SNORM]        = CAP(7.5),
   [GEN6_FORMAT_B10G10R10A2_USCALED]      = CAP(7.5),
   [GEN6_FORMAT_B10G10R10A2_SSCALED]      = CAP(7.5),
   [GEN6_FORMAT_B10G10R10A2_UINT]         = CAP(7.5),
   [GEN6_FORMAT_B10G10R10A2_SINT]         = CAP(7.5),
   [GEN6_FORMAT_R8G8B8_UINT]              = CAP(7.5),
   [GEN6_FORMAT_R8G8B8_SINT]              = CAP(7.5),
#undef CAP
};

/*
 * This table is based on:
d86 3
a88 3
 *  - the Sandy Bridge PRM, volume 4 part 1, page 88-97
 *  - the Ivy Bridge PRM, volume 2 part 1, page 195
 *  - the Haswell PRM, volume 7, page 535
d90 221
a310 15
static const struct ilo_sol_cap ilo_sol_caps[] = {
#define CAP(buffer) { ILO_GEN(buffer) }
   [GEN6_FORMAT_R32G32B32A32_FLOAT]       = CAP(  1),
   [GEN6_FORMAT_R32G32B32A32_SINT]        = CAP(  1),
   [GEN6_FORMAT_R32G32B32A32_UINT]        = CAP(  1),
   [GEN6_FORMAT_R32G32B32_FLOAT]          = CAP(  1),
   [GEN6_FORMAT_R32G32B32_SINT]           = CAP(  1),
   [GEN6_FORMAT_R32G32B32_UINT]           = CAP(  1),
   [GEN6_FORMAT_R32G32_FLOAT]             = CAP(  1),
   [GEN6_FORMAT_R32G32_SINT]              = CAP(  1),
   [GEN6_FORMAT_R32G32_UINT]              = CAP(  1),
   [GEN6_FORMAT_R32_SINT]                 = CAP(  1),
   [GEN6_FORMAT_R32_UINT]                 = CAP(  1),
   [GEN6_FORMAT_R32_FLOAT]                = CAP(  1),
#undef CAP
d312 2
d315 16
a330 140
/*
 * This table is based on:
 *
 *  - the Sandy Bridge PRM, volume 4 part 1, page 88-97
 *  - the Ivy Bridge PRM, volume 4 part 1, page 84-87
 */
static const struct ilo_sampler_cap ilo_sampler_caps[] = {
#define CAP(sampling, filtering, shadow_map, chroma_key) \
   { ILO_GEN(sampling), ILO_GEN(filtering), ILO_GEN(shadow_map), ILO_GEN(chroma_key) }
   [GEN6_FORMAT_R32G32B32A32_FLOAT]       = CAP(  1,   5,   0,   0),
   [GEN6_FORMAT_R32G32B32A32_SINT]        = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R32G32B32A32_UINT]        = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R32G32B32X32_FLOAT]       = CAP(  1,   5,   0,   0),
   [GEN6_FORMAT_R32G32B32_FLOAT]          = CAP(  1,   5,   0,   0),
   [GEN6_FORMAT_R32G32B32_SINT]           = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R32G32B32_UINT]           = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R16G16B16A16_UNORM]       = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R16G16B16A16_SNORM]       = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R16G16B16A16_SINT]        = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R16G16B16A16_UINT]        = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R16G16B16A16_FLOAT]       = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R32G32_FLOAT]             = CAP(  1,   5,   0,   0),
   [GEN6_FORMAT_R32G32_SINT]              = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R32G32_UINT]              = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R32_FLOAT_X8X24_TYPELESS] = CAP(  1,   5,   1,   0),
   [GEN6_FORMAT_X32_TYPELESS_G8X24_UINT]  = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_L32A32_FLOAT]             = CAP(  1,   5,   0,   0),
   [GEN6_FORMAT_R16G16B16X16_UNORM]       = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R16G16B16X16_FLOAT]       = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_A32X32_FLOAT]             = CAP(  1,   5,   0,   0),
   [GEN6_FORMAT_L32X32_FLOAT]             = CAP(  1,   5,   0,   0),
   [GEN6_FORMAT_I32X32_FLOAT]             = CAP(  1,   5,   0,   0),
   [GEN6_FORMAT_B8G8R8A8_UNORM]           = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_B8G8R8A8_UNORM_SRGB]      = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R10G10B10A2_UNORM]        = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R10G10B10A2_UNORM_SRGB]   = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R10G10B10A2_UINT]         = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R10G10B10_SNORM_A2_UNORM] = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R8G8B8A8_UNORM]           = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R8G8B8A8_UNORM_SRGB]      = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R8G8B8A8_SNORM]           = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R8G8B8A8_SINT]            = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R8G8B8A8_UINT]            = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R16G16_UNORM]             = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R16G16_SNORM]             = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R16G16_SINT]              = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R16G16_UINT]              = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R16G16_FLOAT]             = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_B10G10R10A2_UNORM]        = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_B10G10R10A2_UNORM_SRGB]   = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R11G11B10_FLOAT]          = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R32_SINT]                 = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R32_UINT]                 = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R32_FLOAT]                = CAP(  1,   5,   1,   0),
   [GEN6_FORMAT_R24_UNORM_X8_TYPELESS]    = CAP(  1,   5,   1,   0),
   [GEN6_FORMAT_X24_TYPELESS_G8_UINT]     = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_L16A16_UNORM]             = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_I24X8_UNORM]              = CAP(  1,   5,   1,   0),
   [GEN6_FORMAT_L24X8_UNORM]              = CAP(  1,   5,   1,   0),
   [GEN6_FORMAT_A24X8_UNORM]              = CAP(  1,   5,   1,   0),
   [GEN6_FORMAT_I32_FLOAT]                = CAP(  1,   5,   1,   0),
   [GEN6_FORMAT_L32_FLOAT]                = CAP(  1,   5,   1,   0),
   [GEN6_FORMAT_A32_FLOAT]                = CAP(  1,   5,   1,   0),
   [GEN6_FORMAT_B8G8R8X8_UNORM]           = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_B8G8R8X8_UNORM_SRGB]      = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R8G8B8X8_UNORM]           = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R8G8B8X8_UNORM_SRGB]      = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R9G9B9E5_SHAREDEXP]       = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_B10G10R10X2_UNORM]        = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_L16A16_FLOAT]             = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_B5G6R5_UNORM]             = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_B5G6R5_UNORM_SRGB]        = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_B5G5R5A1_UNORM]           = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_B5G5R5A1_UNORM_SRGB]      = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_B4G4R4A4_UNORM]           = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_B4G4R4A4_UNORM_SRGB]      = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R8G8_UNORM]               = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R8G8_SNORM]               = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_R8G8_SINT]                = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R8G8_UINT]                = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R16_UNORM]                = CAP(  1,   1,   1,   0),
   [GEN6_FORMAT_R16_SNORM]                = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R16_SINT]                 = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R16_UINT]                 = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R16_FLOAT]                = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_A8P8_UNORM_PALETTE0]      = CAP(  5,   5,   0,   0),
   [GEN6_FORMAT_A8P8_UNORM_PALETTE1]      = CAP(  5,   5,   0,   0),
   [GEN6_FORMAT_I16_UNORM]                = CAP(  1,   1,   1,   0),
   [GEN6_FORMAT_L16_UNORM]                = CAP(  1,   1,   1,   0),
   [GEN6_FORMAT_A16_UNORM]                = CAP(  1,   1,   1,   0),
   [GEN6_FORMAT_L8A8_UNORM]               = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_I16_FLOAT]                = CAP(  1,   1,   1,   0),
   [GEN6_FORMAT_L16_FLOAT]                = CAP(  1,   1,   1,   0),
   [GEN6_FORMAT_A16_FLOAT]                = CAP(  1,   1,   1,   0),
   [GEN6_FORMAT_L8A8_UNORM_SRGB]          = CAP(4.5, 4.5,   0,   0),
   [GEN6_FORMAT_R5G5_SNORM_B6_UNORM]      = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_P8A8_UNORM_PALETTE0]      = CAP(  5,   5,   0,   0),
   [GEN6_FORMAT_P8A8_UNORM_PALETTE1]      = CAP(  5,   5,   0,   0),
   [GEN6_FORMAT_R8_UNORM]                 = CAP(  1,   1,   0, 4.5),
   [GEN6_FORMAT_R8_SNORM]                 = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R8_SINT]                  = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_R8_UINT]                  = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_A8_UNORM]                 = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_I8_UNORM]                 = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_L8_UNORM]                 = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_P4A4_UNORM_PALETTE0]      = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_A4P4_UNORM_PALETTE0]      = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_P8_UNORM_PALETTE0]        = CAP(4.5, 4.5,   0,   0),
   [GEN6_FORMAT_L8_UNORM_SRGB]            = CAP(4.5, 4.5,   0,   0),
   [GEN6_FORMAT_P8_UNORM_PALETTE1]        = CAP(4.5, 4.5,   0,   0),
   [GEN6_FORMAT_P4A4_UNORM_PALETTE1]      = CAP(4.5, 4.5,   0,   0),
   [GEN6_FORMAT_A4P4_UNORM_PALETTE1]      = CAP(4.5, 4.5,   0,   0),
   [GEN6_FORMAT_DXT1_RGB_SRGB]            = CAP(4.5, 4.5,   0,   0),
   [GEN6_FORMAT_R1_UNORM]                 = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_YCRCB_NORMAL]             = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_YCRCB_SWAPUVY]            = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_P2_UNORM_PALETTE0]        = CAP(4.5, 4.5,   0,   0),
   [GEN6_FORMAT_P2_UNORM_PALETTE1]        = CAP(4.5, 4.5,   0,   0),
   [GEN6_FORMAT_BC1_UNORM]                = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_BC2_UNORM]                = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_BC3_UNORM]                = CAP(  1,   1,   0,   1),
   [GEN6_FORMAT_BC4_UNORM]                = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_BC5_UNORM]                = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_BC1_UNORM_SRGB]           = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_BC2_UNORM_SRGB]           = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_BC3_UNORM_SRGB]           = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_MONO8]                    = CAP(  1,   0,   0,   0),
   [GEN6_FORMAT_YCRCB_SWAPUV]             = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_YCRCB_SWAPY]              = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_DXT1_RGB]                 = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_FXT1]                     = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_BC4_SNORM]                = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_BC5_SNORM]                = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R16G16B16_FLOAT]          = CAP(  5,   5,   0,   0),
   [GEN6_FORMAT_BC6H_SF16]                = CAP(  7,   7,   0,   0),
   [GEN6_FORMAT_BC7_UNORM]                = CAP(  7,   7,   0,   0),
   [GEN6_FORMAT_BC7_UNORM_SRGB]           = CAP(  7,   7,   0,   0),
   [GEN6_FORMAT_BC6H_UF16]                = CAP(  7,   7,   0,   0),
#undef CAP
};
d332 4
a335 71
/*
 * This table is based on:
 *
 *  - the Sandy Bridge PRM, volume 4 part 1, page 88-97
 *  - the Ivy Bridge PRM, volume 4 part 1, page 172, 252-253, and 277-278
 *  - the Haswell PRM, volume 7, page 262-264
 */
static const struct ilo_dp_cap ilo_dp_caps[] = {
#define CAP(rt_write, rt_write_blending, typed_write, media_color_processing) \
   { ILO_GEN(rt_write), ILO_GEN(rt_write_blending), ILO_GEN(typed_write), ILO_GEN(media_color_processing) }
   [GEN6_FORMAT_R32G32B32A32_FLOAT]       = CAP(  1,   1,   7,   0),
   [GEN6_FORMAT_R32G32B32A32_SINT]        = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R32G32B32A32_UINT]        = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R16G16B16A16_UNORM]       = CAP(  1, 4.5,   7,   6),
   [GEN6_FORMAT_R16G16B16A16_SNORM]       = CAP(  1,   6,   7,   0),
   [GEN6_FORMAT_R16G16B16A16_SINT]        = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R16G16B16A16_UINT]        = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R16G16B16A16_FLOAT]       = CAP(  1,   1,   7,   0),
   [GEN6_FORMAT_R32G32_FLOAT]             = CAP(  1,   1,   7,   0),
   [GEN6_FORMAT_R32G32_SINT]              = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R32G32_UINT]              = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_B8G8R8A8_UNORM]           = CAP(  1,   1,   7,   6),
   [GEN6_FORMAT_B8G8R8A8_UNORM_SRGB]      = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R10G10B10A2_UNORM]        = CAP(  1,   1,   7,   6),
   [GEN6_FORMAT_R10G10B10A2_UNORM_SRGB]   = CAP(  0,   0,   0,   6),
   [GEN6_FORMAT_R10G10B10A2_UINT]         = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R8G8B8A8_UNORM]           = CAP(  1,   1,   7,   6),
   [GEN6_FORMAT_R8G8B8A8_UNORM_SRGB]      = CAP(  1,   1,   0,   6),
   [GEN6_FORMAT_R8G8B8A8_SNORM]           = CAP(  1,   6,   7,   0),
   [GEN6_FORMAT_R8G8B8A8_SINT]            = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R8G8B8A8_UINT]            = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R16G16_UNORM]             = CAP(  1, 4.5,   7,   0),
   [GEN6_FORMAT_R16G16_SNORM]             = CAP(  1,   6,   7,   0),
   [GEN6_FORMAT_R16G16_SINT]              = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R16G16_UINT]              = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R16G16_FLOAT]             = CAP(  1,   1,   7,   0),
   [GEN6_FORMAT_B10G10R10A2_UNORM]        = CAP(  1,   1,   7,   6),
   [GEN6_FORMAT_B10G10R10A2_UNORM_SRGB]   = CAP(  1,   1,   0,   6),
   [GEN6_FORMAT_R11G11B10_FLOAT]          = CAP(  1,   1,   7,   0),
   [GEN6_FORMAT_R32_SINT]                 = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R32_UINT]                 = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R32_FLOAT]                = CAP(  1,   1,   7,   0),
   [GEN6_FORMAT_B8G8R8X8_UNORM]           = CAP(  0,   0,   0,   6),
   [GEN6_FORMAT_B5G6R5_UNORM]             = CAP(  1,   1,   7,   0),
   [GEN6_FORMAT_B5G6R5_UNORM_SRGB]        = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_B5G5R5A1_UNORM]           = CAP(  1,   1,   7,   0),
   [GEN6_FORMAT_B5G5R5A1_UNORM_SRGB]      = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_B4G4R4A4_UNORM]           = CAP(  1,   1,   7,   0),
   [GEN6_FORMAT_B4G4R4A4_UNORM_SRGB]      = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R8G8_UNORM]               = CAP(  1,   1,   7,   0),
   [GEN6_FORMAT_R8G8_SNORM]               = CAP(  1,   6,   7,   0),
   [GEN6_FORMAT_R8G8_SINT]                = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R8G8_UINT]                = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R16_UNORM]                = CAP(  1, 4.5,   7,   7),
   [GEN6_FORMAT_R16_SNORM]                = CAP(  1,   6,   7,   0),
   [GEN6_FORMAT_R16_SINT]                 = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R16_UINT]                 = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R16_FLOAT]                = CAP(  1,   1,   7,   0),
   [GEN6_FORMAT_B5G5R5X1_UNORM]           = CAP(  1,   1,   7,   0),
   [GEN6_FORMAT_B5G5R5X1_UNORM_SRGB]      = CAP(  1,   1,   0,   0),
   [GEN6_FORMAT_R8_UNORM]                 = CAP(  1,   1,   7,   0),
   [GEN6_FORMAT_R8_SNORM]                 = CAP(  1,   6,   7,   0),
   [GEN6_FORMAT_R8_SINT]                  = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_R8_UINT]                  = CAP(  1,   0,   7,   0),
   [GEN6_FORMAT_A8_UNORM]                 = CAP(  1,   1,   7,   0),
   [GEN6_FORMAT_YCRCB_NORMAL]             = CAP(  1,   0,   0,   6),
   [GEN6_FORMAT_YCRCB_SWAPUVY]            = CAP(  1,   0,   0,   6),
   [GEN6_FORMAT_YCRCB_SWAPUV]             = CAP(  1,   0,   0,   6),
   [GEN6_FORMAT_YCRCB_SWAPY]              = CAP(  1,   0,   0,   6),
#undef CAP
};
d342 1
a342 2
ilo_translate_color_format(const struct ilo_dev_info *dev,
                           enum pipe_format format)
d440 1
a440 1
      [PIPE_FORMAT_B8G8R8X8_SRGB]         = GEN6_FORMAT_B8G8R8X8_UNORM_SRGB,
d443 1
a443 1
      [PIPE_FORMAT_R8G8B8A8_SRGB]         = GEN6_FORMAT_R8G8B8A8_UNORM_SRGB,
d466 1
a466 1
      [PIPE_FORMAT_R1_UNORM]              = GEN6_FORMAT_R1_UNORM,
a592 1
      [PIPE_FORMAT_B5G6R5_SRGB]           = GEN6_FORMAT_B5G6R5_UNORM_SRGB,
a602 72
static bool
ilo_format_supports_zs(const struct ilo_dev_info *dev,
                       enum pipe_format format)
{
   switch (format) {
   case PIPE_FORMAT_Z16_UNORM:
   case PIPE_FORMAT_Z24X8_UNORM:
   case PIPE_FORMAT_Z32_FLOAT:
   case PIPE_FORMAT_Z24_UNORM_S8_UINT:
   case PIPE_FORMAT_Z32_FLOAT_S8X24_UINT:
      return true;
   case PIPE_FORMAT_S8_UINT:
      /* TODO separate stencil */
   default:
      return false;
   }
}

static bool
ilo_format_supports_rt(const struct ilo_dev_info *dev,
                       enum pipe_format format)
{
   const int idx = ilo_translate_format(dev, format, PIPE_BIND_RENDER_TARGET);
   const struct ilo_dp_cap *cap = (idx >= 0 && idx < Elements(ilo_dp_caps)) ?
      &ilo_dp_caps[idx] : NULL;

   if (!cap || !cap->rt_write)
      return false;

   assert(!cap->rt_write_blending || cap->rt_write_blending >= cap->rt_write);

   if (util_format_is_pure_integer(format))
      return (ilo_dev_gen(dev) >= cap->rt_write);
   else if (cap->rt_write_blending)
      return (ilo_dev_gen(dev) >= cap->rt_write_blending);
   else
      return false;
}

static bool
ilo_format_supports_sampler(const struct ilo_dev_info *dev,
                            enum pipe_format format)
{
   const int idx = ilo_translate_format(dev, format, PIPE_BIND_SAMPLER_VIEW);
   const struct ilo_sampler_cap *cap = (idx >= 0 &&
         idx < Elements(ilo_sampler_caps)) ? &ilo_sampler_caps[idx] : NULL;

   if (!cap || !cap->sampling)
      return false;

   assert(!cap->filtering || cap->filtering >= cap->sampling);

   if (util_format_is_pure_integer(format))
      return (ilo_dev_gen(dev) >= cap->sampling);
   else if (cap->filtering)
      return (ilo_dev_gen(dev) >= cap->filtering);
   else
      return false;
}

static bool
ilo_format_supports_vb(const struct ilo_dev_info *dev,
                       enum pipe_format format)
{
   const int idx = ilo_translate_format(dev, format, PIPE_BIND_VERTEX_BUFFER);
   const struct ilo_vf_cap *cap = (idx >= 0 && idx < Elements(ilo_vf_caps)) ?
      &ilo_vf_caps[idx] : NULL;

   return (cap && cap->vertex_element &&
         ilo_dev_gen(dev) >= cap->vertex_element);
}

d611 3
a613 1
   const struct ilo_dev_info *dev = &is->dev;
d624 14
a637 2
   if (bind && !ilo_format_supports_zs(dev, format))
      return false;
d640 9
a648 2
   if (bind && !ilo_format_supports_rt(dev, format))
      return false;
d651 9
a659 2
   if (bind && !ilo_format_supports_sampler(dev, format))
      return false;
d662 2
a663 2
   if (bind && !ilo_format_supports_vb(dev, format))
      return false;
d665 3
a667 1
   (void) ilo_sol_caps;
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d34 9
a42 3
/* stolen from classic i965 */
struct surface_format_info {
   bool exists;
d45 1
a45 1
   int shadow_compare;
a46 5
   int render_target;
   int alpha_blend;
   int input_vb;
   int streamed_output_vb;
   int color_processing;
d49 13
a61 2
/* This macro allows us to write the table almost as it appears in the PRM,
 * while restructuring it to turn it into the C code we want.
d63 108
a170 2
#define SF(sampl, filt, shad, ck, rt, ab, vb, so, color, sf) \
   [sf] = { true, sampl, filt, shad, ck, rt, ab, vb, so, color },
d172 2
a173 5
#define Y 0
#define x 999
/**
 * This is the table of support for surface (texture, renderbuffer, and vertex
 * buffer, but not depthbuffer) formats across the various hardware generations.
d175 23
a197 3
 * The table is formatted to match the documentation, except that the docs have
 * this ridiculous mapping of Y[*+~^#&] for "supported on DevWhatever".  To put
 * it in our table, here's the mapping:
d199 140
a338 5
 * Y*: 45
 * Y+: 45 (g45/gm45)
 * Y~: 50 (gen5)
 * Y^: 60 (gen6)
 * Y#: 70 (gen7)
d340 3
a342 19
 * The abbreviations in the header below are:
 * smpl  - Sampling Engine
 * filt  - Sampling Engine Filtering
 * shad  - Sampling Engine Shadow Map
 * CK    - Sampling Engine Chroma Key
 * RT    - Render Target
 * AB    - Alpha Blend Render Target
 * VB    - Input Vertex Buffer
 * SO    - Steamed Output Vertex Buffers (transform feedback)
 * color - Color Processing
 *
 * See page 88 of the Sandybridge PRM VOL4_Part1 PDF.
 *
 * As of Ivybridge, the columns are no longer in that table and the
 * information can be found spread across:
 *
 * - VOL2_Part1 section 2.5.11 Format Conversion (vertex fetch).
 * - VOL4_Part1 section 2.12.2.1.2 Sampler Output Channel Mapping.
 * - VOL4_Part1 section 3.9.11 Render Target Write.
d344 63
a406 221
const struct surface_format_info surface_formats[] = {
/* smpl filt shad CK  RT  AB  VB  SO  color */
   SF( Y, 50,  x,  x,  Y,  Y,  Y,  Y,  x, GEN6_FORMAT_R32G32B32A32_FLOAT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, GEN6_FORMAT_R32G32B32A32_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, GEN6_FORMAT_R32G32B32A32_UINT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32A32_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32A32_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R64G64_FLOAT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R32G32B32X32_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32A32_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32A32_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R32G32B32A32_SFIXED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R64G64_PASSTHRU)
   SF( Y, 50,  x,  x,  x,  x,  Y,  Y,  x, GEN6_FORMAT_R32G32B32_FLOAT)
   SF( Y,  x,  x,  x,  x,  x,  Y,  Y,  x, GEN6_FORMAT_R32G32B32_SINT)
   SF( Y,  x,  x,  x,  x,  x,  Y,  Y,  x, GEN6_FORMAT_R32G32B32_UINT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32B32_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R32G32B32_SFIXED)
   SF( Y,  Y,  x,  x,  Y, 45,  Y,  x, 60, GEN6_FORMAT_R16G16B16A16_UNORM)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, GEN6_FORMAT_R16G16B16A16_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16A16_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16A16_UINT)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, GEN6_FORMAT_R16G16B16A16_FLOAT)
   SF( Y, 50,  x,  x,  Y,  Y,  Y,  Y,  x, GEN6_FORMAT_R32G32_FLOAT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, GEN6_FORMAT_R32G32_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, GEN6_FORMAT_R32G32_UINT)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R32_FLOAT_X8X24_TYPELESS)
   SF( Y,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_X32_TYPELESS_G8X24_UINT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L32A32_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R64_FLOAT)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R16G16B16X16_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R16G16B16X16_FLOAT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A32X32_FLOAT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L32X32_FLOAT)
   SF( Y, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I32X32_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16A16_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16A16_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32G32_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R32G32_SFIXED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R64_PASSTHRU)
   SF( Y,  Y,  x,  Y,  Y,  Y,  Y,  x, 60, GEN6_FORMAT_B8G8R8A8_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B8G8R8A8_UNORM_SRGB)
/* smpl filt shad CK  RT  AB  VB  SO  color */
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x, 60, GEN6_FORMAT_R10G10B10A2_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x, 60, GEN6_FORMAT_R10G10B10A2_UNORM_SRGB)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R10G10B10A2_UINT)
   SF( Y,  Y,  x,  x,  x,  Y,  Y,  x,  x, GEN6_FORMAT_R10G10B10_SNORM_A2_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x, 60, GEN6_FORMAT_R8G8B8A8_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x, 60, GEN6_FORMAT_R8G8B8A8_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, GEN6_FORMAT_R8G8B8A8_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8A8_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8A8_UINT)
   SF( Y,  Y,  x,  x,  Y, 45,  Y,  x,  x, GEN6_FORMAT_R16G16_UNORM)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, GEN6_FORMAT_R16G16_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R16G16_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R16G16_UINT)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, GEN6_FORMAT_R16G16_FLOAT)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x, 60, GEN6_FORMAT_B10G10R10A2_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x, 60, GEN6_FORMAT_B10G10R10A2_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, GEN6_FORMAT_R11G11B10_FLOAT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, GEN6_FORMAT_R32_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  Y,  x, GEN6_FORMAT_R32_UINT)
   SF( Y, 50,  Y,  x,  Y,  Y,  Y,  Y,  x, GEN6_FORMAT_R32_FLOAT)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R24_UNORM_X8_TYPELESS)
   SF( Y,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_X24_TYPELESS_G8_UINT)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L16A16_UNORM)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I24X8_UNORM)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L24X8_UNORM)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A24X8_UNORM)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I32_FLOAT)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L32_FLOAT)
   SF( Y, 50,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A32_FLOAT)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x, 60, GEN6_FORMAT_B8G8R8X8_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_B8G8R8X8_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R8G8B8X8_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R8G8B8X8_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R9G9B9E5_SHAREDEXP)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_B10G10R10X2_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L16A16_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32_SNORM)
/* smpl filt shad CK  RT  AB  VB  SO  color */
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R10G10B10X2_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8A8_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8A8_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R32_USCALED)
   SF( Y,  Y,  x,  Y,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B5G6R5_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B5G6R5_UNORM_SRGB)
   SF( Y,  Y,  x,  Y,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B5G5R5A1_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B5G5R5A1_UNORM_SRGB)
   SF( Y,  Y,  x,  Y,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B4G4R4A4_UNORM)
   SF( Y,  Y,  x,  x,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B4G4R4A4_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, GEN6_FORMAT_R8G8_UNORM)
   SF( Y,  Y,  x,  Y,  Y, 60,  Y,  x,  x, GEN6_FORMAT_R8G8_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R8G8_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R8G8_UINT)
   SF( Y,  Y,  Y,  x,  Y, 45,  Y,  x, 70, GEN6_FORMAT_R16_UNORM)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, GEN6_FORMAT_R16_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R16_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R16_UINT)
   SF( Y,  Y,  x,  x,  Y,  Y,  Y,  x,  x, GEN6_FORMAT_R16_FLOAT)
   SF(50, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A8P8_UNORM_PALETTE0)
   SF(50, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A8P8_UNORM_PALETTE1)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I16_UNORM)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L16_UNORM)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A16_UNORM)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, GEN6_FORMAT_L8A8_UNORM)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I16_FLOAT)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L16_FLOAT)
   SF( Y,  Y,  Y,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A16_FLOAT)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L8A8_UNORM_SRGB)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, GEN6_FORMAT_R5G5_SNORM_B6_UNORM)
   SF( x,  x,  x,  x,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B5G5R5X1_UNORM)
   SF( x,  x,  x,  x,  Y,  Y,  x,  x,  x, GEN6_FORMAT_B5G5R5X1_UNORM_SRGB)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8_USCALED)
/* smpl filt shad CK  RT  AB  VB  SO  color */
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16_USCALED)
   SF(50, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P8A8_UNORM_PALETTE0)
   SF(50, 50,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P8A8_UNORM_PALETTE1)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A1B5G5R5_UNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A4B4G4R4_UNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L8A8_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L8A8_SINT)
   SF( Y,  Y,  x, 45,  Y,  Y,  Y,  x,  x, GEN6_FORMAT_R8_UNORM)
   SF( Y,  Y,  x,  x,  Y, 60,  Y,  x,  x, GEN6_FORMAT_R8_SNORM)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R8_SINT)
   SF( Y,  x,  x,  x,  Y,  x,  Y,  x,  x, GEN6_FORMAT_R8_UINT)
   SF( Y,  Y,  x,  Y,  Y,  Y,  x,  x,  x, GEN6_FORMAT_A8_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I8_UNORM)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, GEN6_FORMAT_L8_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P4A4_UNORM_PALETTE0)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A4P4_UNORM_PALETTE0)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8_USCALED)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P8_UNORM_PALETTE0)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L8_UNORM_SRGB)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P8_UNORM_PALETTE1)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P4A4_UNORM_PALETTE1)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_A4P4_UNORM_PALETTE1)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_Y8_UNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L8_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_L8_SINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I8_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_I8_SINT)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_DXT1_RGB_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R1_UNORM)
   SF( Y,  Y,  x,  Y,  Y,  x,  x,  x, 60, GEN6_FORMAT_YCRCB_NORMAL)
   SF( Y,  Y,  x,  Y,  Y,  x,  x,  x, 60, GEN6_FORMAT_YCRCB_SWAPUVY)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P2_UNORM_PALETTE0)
   SF(45, 45,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_P2_UNORM_PALETTE1)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, GEN6_FORMAT_BC1_UNORM)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, GEN6_FORMAT_BC2_UNORM)
   SF( Y,  Y,  x,  Y,  x,  x,  x,  x,  x, GEN6_FORMAT_BC3_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC4_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC5_UNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC1_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC2_UNORM_SRGB)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC3_UNORM_SRGB)
   SF( Y,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_MONO8)
   SF( Y,  Y,  x,  x,  Y,  x,  x,  x, 60, GEN6_FORMAT_YCRCB_SWAPUV)
   SF( Y,  Y,  x,  x,  Y,  x,  x,  x, 60, GEN6_FORMAT_YCRCB_SWAPY)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_DXT1_RGB)
/* smpl filt shad CK  RT  AB  VB  SO  color */
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_FXT1)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R8G8B8_USCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R64G64B64A64_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R64G64B64_FLOAT)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC4_SNORM)
   SF( Y,  Y,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC5_SNORM)
   SF(50, 50,  x,  x,  x,  x, 60,  x,  x, GEN6_FORMAT_R16G16B16_FLOAT)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16_UNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16_SNORM)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  Y,  x,  x, GEN6_FORMAT_R16G16B16_USCALED)
   SF(70, 70,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC6H_SF16)
   SF(70, 70,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC7_UNORM)
   SF(70, 70,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC7_UNORM_SRGB)
   SF(70, 70,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_BC6H_UF16)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_PLANAR_420_8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R8G8B8_UNORM_SRGB)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_ETC1_RGB8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_ETC2_RGB8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_EAC_R11)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_EAC_RG11)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_EAC_SIGNED_R11)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_EAC_SIGNED_RG11)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_ETC2_SRGB8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R16G16B16_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R16G16B16_SINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R32_SFIXED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R10G10B10A2_SNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R10G10B10A2_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R10G10B10A2_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R10G10B10A2_SINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_B10G10R10A2_SNORM)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_B10G10R10A2_USCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_B10G10R10A2_SSCALED)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_B10G10R10A2_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_B10G10R10A2_SINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R64G64B64A64_PASSTHRU)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R64G64B64_PASSTHRU)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_ETC2_RGB8_PTA)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_ETC2_SRGB8_PTA)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_ETC2_EAC_RGBA8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_ETC2_EAC_SRGB8_A8)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R8G8B8_UINT)
   SF( x,  x,  x,  x,  x,  x,  x,  x,  x, GEN6_FORMAT_R8G8B8_SINT)
a407 24
#undef x
#undef Y

static const struct surface_format_info *
lookup_surface_format_info(enum pipe_format format, unsigned bind)
{
   static const struct surface_format_info nonexist = {
      .exists = false,
      .sampling = 999,
      .filtering = 999,
      .shadow_compare = 999,
      .chroma_key = 999,
      .render_target = 999,
      .alpha_blend = 999,
      .input_vb = 999,
      .streamed_output_vb = 999,
      .color_processing = 999,
   };
   const int surfaceformat = ilo_translate_format(format, bind);

   return (surfaceformat >= 0 && surfaceformat < Elements(surface_formats) &&
           surface_formats[surfaceformat].exists) ?
      &surface_formats[surfaceformat] : &nonexist;
}
d414 2
a415 1
ilo_translate_color_format(enum pipe_format format)
d513 1
a513 1
      [PIPE_FORMAT_B8G8R8X8_SRGB]         = 0,
d516 1
a516 1
      [PIPE_FORMAT_R8G8B8A8_SRGB]         = 0,
d539 1
a539 1
      [PIPE_FORMAT_R1_UNORM]              = 0,
d666 1
d677 72
d757 1
a757 3
   const int gen = ILO_GEN_GET_MAJOR(is->dev.gen * 10);
   const bool is_pure_int = util_format_is_pure_integer(format);
   const struct surface_format_info *info;
d768 2
a769 14
   if (bind) {
      switch (format) {
      case PIPE_FORMAT_Z16_UNORM:
      case PIPE_FORMAT_Z24X8_UNORM:
      case PIPE_FORMAT_Z32_FLOAT:
      case PIPE_FORMAT_Z24_UNORM_S8_UINT:
      case PIPE_FORMAT_Z32_FLOAT_S8X24_UINT:
         break;
      case PIPE_FORMAT_S8_UINT:
         /* TODO separate stencil */
      default:
         return false;
      }
   }
d772 2
a773 9
   if (bind) {
      info = lookup_surface_format_info(format, bind);

      if (gen < info->render_target)
         return false;

      if (!is_pure_int && gen < info->alpha_blend)
         return false;
   }
d776 2
a777 9
   if (bind) {
      info = lookup_surface_format_info(format, bind);

      if (gen < info->sampling)
         return false;

      if (!is_pure_int && gen < info->filtering)
         return false;
   }
d780 2
a781 2
   if (bind) {
      info = lookup_surface_format_info(format, bind);
d783 1
a783 3
      if (gen < info->input_vb)
         return false;
   }
@


