head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.3.0.4
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	v10_2_3:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.30;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.11.13;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.11.13;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2015.01.25.14.07.13;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.3
date	2015.02.20.22.44.20;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 2012-2013 LunarG, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Chia-I Wu <olv@@lunarg.com>
 */

#ifndef ILO_CONTEXT_H
#define ILO_CONTEXT_H

#include "pipe/p_context.h"
#include "util/u_slab.h"

#include "ilo_gpe.h"
#include "ilo_common.h"

struct pipe_draw_info;
struct u_upload_mgr;
struct intel_winsys;
struct intel_bo;
struct ilo_3d;
struct ilo_blitter;
struct ilo_cp;
struct ilo_screen;
struct ilo_shader_state;

struct ilo_context {
   struct pipe_context base;

   struct intel_winsys *winsys;
   struct ilo_dev_info *dev;

   struct util_slab_mempool transfer_mempool;

   struct ilo_cp *cp;
   struct intel_bo *last_cp_bo;

   struct ilo_shader_cache *shader_cache;
   struct ilo_3d *hw3d;
   struct ilo_blitter *blitter;

   struct u_upload_mgr *uploader;

   const struct pipe_draw_info *draw;
   uint32_t dirty;

   struct ilo_vb_state vb;
   const struct ilo_ve_state *ve;
   struct ilo_ib_state ib;

   struct ilo_shader_state *vs;
   struct ilo_shader_state *gs;

   struct ilo_so_state so;

   struct pipe_clip_state clip;
   struct ilo_viewport_state viewport;
   struct ilo_scissor_state scissor;

   const struct ilo_rasterizer_state *rasterizer;
   struct pipe_poly_stipple poly_stipple;
   unsigned sample_mask;

   struct ilo_shader_state *fs;

   const struct ilo_dsa_state *dsa;
   struct pipe_stencil_ref stencil_ref;
   const struct ilo_blend_state *blend;
   struct pipe_blend_color blend_color;
   struct ilo_fb_state fb;

   /* shader resources */
   struct ilo_sampler_state sampler[PIPE_SHADER_TYPES];
   struct ilo_view_state view[PIPE_SHADER_TYPES];
   struct ilo_cbuf_state cbuf[PIPE_SHADER_TYPES];
   struct ilo_resource_state resource;

   /* GPGPU */
   struct ilo_shader_state *cs;
   struct ilo_resource_state cs_resource;
   struct ilo_global_binding global_binding;
};

static inline struct ilo_context *
ilo_context(struct pipe_context *pipe)
{
   return (struct ilo_context *) pipe;
}

void
ilo_init_context_functions(struct ilo_screen *is);

#endif /* ILO_CONTEXT_H */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.4.3
@
text
@d34 1
a35 3
#include "ilo_cp.h"
#include "ilo_draw.h"
#include "ilo_state.h"
d37 1
d40 2
a41 1

d43 1
a43 1
struct ilo_render;
d45 1
a45 1
struct ilo_shader_cache;
d56 1
d59 1
a60 1
   struct ilo_render *render;
d64 2
a65 1
   struct ilo_state_vector state_vector;
d67 35
a101 10
   struct {
      struct pipe_query *query;
      bool condition;
      unsigned mode;
   } render_condition;

   struct {
      struct ilo_cp_owner cp_owner;
      struct list_head queries;
   } draw;
a111 3

bool
ilo_skip_rendering(struct ilo_context *ilo);
@


1.1.1.3
log
@Import Mesa 10.2.9
@
text
@a33 1
#include "ilo_gpe.h"
d35 3
a38 1
struct pipe_draw_info;
d41 1
a41 2
struct intel_bo;
struct ilo_3d;
d43 1
a43 1
struct ilo_cp;
d45 1
a45 1
struct ilo_shader_state;
a55 1
   struct intel_bo *last_cp_bo;
a57 1
   struct ilo_3d *hw3d;
d59 1
d63 1
a63 2
   const struct pipe_draw_info *draw;
   uint32_t dirty;
d65 10
a74 35
   struct ilo_vb_state vb;
   const struct ilo_ve_state *ve;
   struct ilo_ib_state ib;

   struct ilo_shader_state *vs;
   struct ilo_shader_state *gs;

   struct ilo_so_state so;

   struct pipe_clip_state clip;
   struct ilo_viewport_state viewport;
   struct ilo_scissor_state scissor;

   const struct ilo_rasterizer_state *rasterizer;
   struct pipe_poly_stipple poly_stipple;
   unsigned sample_mask;

   struct ilo_shader_state *fs;

   const struct ilo_dsa_state *dsa;
   struct pipe_stencil_ref stencil_ref;
   const struct ilo_blend_state *blend;
   struct pipe_blend_color blend_color;
   struct ilo_fb_state fb;

   /* shader resources */
   struct ilo_sampler_state sampler[PIPE_SHADER_TYPES];
   struct ilo_view_state view[PIPE_SHADER_TYPES];
   struct ilo_cbuf_state cbuf[PIPE_SHADER_TYPES];
   struct ilo_resource_state resource;

   /* GPGPU */
   struct ilo_shader_state *cs;
   struct ilo_resource_state cs_resource;
   struct ilo_global_binding global_binding;
d85 3
@


