head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.30;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.11.18;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.11.18;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.33.53;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.07.16;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.44.25;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 2012-2013 LunarG, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Chia-I Wu <olv@@lunarg.com>
 */

#ifndef ILO_SHADER_H
#define ILO_SHADER_H

#include "ilo_common.h"

enum ilo_kernel_param {
   ILO_KERNEL_INPUT_COUNT,
   ILO_KERNEL_OUTPUT_COUNT,
   ILO_KERNEL_URB_DATA_START_REG,

   ILO_KERNEL_VS_INPUT_INSTANCEID,
   ILO_KERNEL_VS_INPUT_VERTEXID,
   ILO_KERNEL_VS_INPUT_EDGEFLAG,
   ILO_KERNEL_VS_PCB_UCP_SIZE,
   ILO_KERNEL_VS_GEN6_SO,
   ILO_KERNEL_VS_GEN6_SO_START_REG,
   ILO_KERNEL_VS_GEN6_SO_POINT_OFFSET,
   ILO_KERNEL_VS_GEN6_SO_LINE_OFFSET,
   ILO_KERNEL_VS_GEN6_SO_TRI_OFFSET,

   ILO_KERNEL_GS_DISCARD_ADJACENCY,
   ILO_KERNEL_GS_GEN6_SVBI_POST_INC,

   ILO_KERNEL_FS_INPUT_Z,
   ILO_KERNEL_FS_INPUT_W,
   ILO_KERNEL_FS_OUTPUT_Z,
   ILO_KERNEL_FS_USE_KILL,
   ILO_KERNEL_FS_BARYCENTRIC_INTERPOLATIONS,
   ILO_KERNEL_FS_DISPATCH_16_OFFSET,

   ILO_KERNEL_PARAM_COUNT,
};

struct ilo_kernel_routing {
   uint32_t const_interp_enable;
   uint32_t point_sprite_enable;
   unsigned source_skip, source_len;

   bool swizzle_enable;
   uint16_t swizzles[16];
};

struct intel_bo;
struct ilo_context;
struct ilo_rasterizer_state;
struct ilo_shader_cache;
struct ilo_shader_state;
struct ilo_shader_cso;

struct ilo_shader_cache *
ilo_shader_cache_create(void);

void
ilo_shader_cache_destroy(struct ilo_shader_cache *shc);

void
ilo_shader_cache_add(struct ilo_shader_cache *shc,
                     struct ilo_shader_state *shader);

void
ilo_shader_cache_remove(struct ilo_shader_cache *shc,
                        struct ilo_shader_state *shader);

int
ilo_shader_cache_upload(struct ilo_shader_cache *shc,
                        struct intel_bo *bo, unsigned offset,
                        bool incremental);

struct ilo_shader_state *
ilo_shader_create_vs(const struct ilo_dev_info *dev,
                     const struct pipe_shader_state *state,
                     const struct ilo_context *precompile);

struct ilo_shader_state *
ilo_shader_create_gs(const struct ilo_dev_info *dev,
                     const struct pipe_shader_state *state,
                     const struct ilo_context *precompile);

struct ilo_shader_state *
ilo_shader_create_fs(const struct ilo_dev_info *dev,
                     const struct pipe_shader_state *state,
                     const struct ilo_context *precompile);

struct ilo_shader_state *
ilo_shader_create_cs(const struct ilo_dev_info *dev,
                     const struct pipe_compute_state *state,
                     const struct ilo_context *precompile);

void
ilo_shader_destroy(struct ilo_shader_state *shader);

int
ilo_shader_get_type(const struct ilo_shader_state *shader);

bool
ilo_shader_select_kernel(struct ilo_shader_state *shader,
                         const struct ilo_context *ilo,
                         uint32_t dirty);

bool
ilo_shader_select_kernel_routing(struct ilo_shader_state *shader,
                                 const struct ilo_shader_state *source,
                                 const struct ilo_rasterizer_state *rasterizer);

uint32_t
ilo_shader_get_kernel_offset(const struct ilo_shader_state *shader);

int
ilo_shader_get_kernel_param(const struct ilo_shader_state *shader,
                            enum ilo_kernel_param param);

const struct ilo_shader_cso *
ilo_shader_get_kernel_cso(const struct ilo_shader_state *shader);

const struct pipe_stream_output_info *
ilo_shader_get_kernel_so_info(const struct ilo_shader_state *shader);

const struct ilo_kernel_routing *
ilo_shader_get_kernel_routing(const struct ilo_shader_state *shader);

#endif /* ILO_SHADER_H */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@a36 2
   ILO_KERNEL_SKIP_CBUF0_UPLOAD,
   ILO_KERNEL_PCB_CBUF0_SIZE,
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@a35 1
   ILO_KERNEL_SAMPLER_COUNT,
a39 8
   ILO_KERNEL_SURFACE_TOTAL_COUNT,
   ILO_KERNEL_SURFACE_TEX_BASE,
   ILO_KERNEL_SURFACE_TEX_COUNT,
   ILO_KERNEL_SURFACE_CONST_BASE,
   ILO_KERNEL_SURFACE_CONST_COUNT,
   ILO_KERNEL_SURFACE_RES_BASE,
   ILO_KERNEL_SURFACE_RES_COUNT,

a48 1
   ILO_KERNEL_VS_GEN6_SO_SURFACE_COUNT,
a51 2
   ILO_KERNEL_GS_GEN6_SURFACE_SO_BASE,
   ILO_KERNEL_GS_GEN6_SURFACE_SO_COUNT,
a58 9
   ILO_KERNEL_FS_SURFACE_RT_BASE,
   ILO_KERNEL_FS_SURFACE_RT_COUNT,

   ILO_KERNEL_CS_LOCAL_SIZE,
   ILO_KERNEL_CS_PRIVATE_SIZE,
   ILO_KERNEL_CS_INPUT_SIZE,
   ILO_KERNEL_CS_SIMD_SIZE,
   ILO_KERNEL_CS_SURFACE_GLOBAL_BASE,
   ILO_KERNEL_CS_SURFACE_GLOBAL_COUNT,
d73 1
a73 1
struct ilo_builder;
a77 1
struct ilo_state_vector;
d93 1
a93 1
void
d95 2
a96 4
                        struct ilo_builder *builder);

void
ilo_shader_cache_invalidate(struct ilo_shader_cache *shc);
d101 1
a101 1
                     const struct ilo_state_vector *precompile);
d106 1
a106 1
                     const struct ilo_state_vector *precompile);
d111 1
a111 1
                     const struct ilo_state_vector *precompile);
d116 1
a116 1
                     const struct ilo_state_vector *precompile);
d126 1
a126 1
                         const struct ilo_state_vector *vec,
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d36 1
d41 8
d58 1
d62 2
d71 9
d94 1
a94 1
struct ilo_context;
d99 1
d115 1
a115 1
int
d117 4
a120 2
                        struct intel_bo *bo, unsigned offset,
                        bool incremental);
d125 1
a125 1
                     const struct ilo_context *precompile);
d130 1
a130 1
                     const struct ilo_context *precompile);
d135 1
a135 1
                     const struct ilo_context *precompile);
d140 1
a140 1
                     const struct ilo_context *precompile);
d150 1
a150 1
                         const struct ilo_context *ilo,
@


