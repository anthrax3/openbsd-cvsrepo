head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.30;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.11.14;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.11.14;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.33.53;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.07.13;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.44.21;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 2012-2013 LunarG, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Chia-I Wu <olv@@lunarg.com>
 */

#ifndef ILO_FORMAT_H
#define ILO_FORMAT_H

#include "brw_defines.h"

#include "ilo_common.h"

struct ilo_screen;

void
ilo_init_format_functions(struct ilo_screen *is);

int
ilo_translate_color_format(enum pipe_format format);

/**
 * Translate a pipe format to a hardware surface format suitable for
 * the given purpose.  Return -1 on errors.
 *
 * This is an inline function not only for performance reasons.  There are
 * caveats that the callers should that before calling this function.
 */
static inline int
ilo_translate_format(enum pipe_format format, unsigned bind)
{
   switch (bind) {
   case PIPE_BIND_RENDER_TARGET:
      /*
       * Some RGBX formats are not supported as render target formats.  But we
       * can use their RGBA counterparts and force the destination alpha to be
       * one when blending is enabled.
       */
      switch (format) {
      case PIPE_FORMAT_B8G8R8X8_UNORM:
         return BRW_SURFACEFORMAT_B8G8R8A8_UNORM;
      default:
         return ilo_translate_color_format(format);
      }
      break;
   case PIPE_BIND_SAMPLER_VIEW:
      /*
       * For depth formats, we want the depth values to be returned as R
       * values.  But we assume in many places that the depth values are
       * returned as I values (util_make_fragment_tex_shader_writedepth() is
       * one such example).  We have to live with that at least for now.
       *
       * For ETC1 format, the texture data will be decompressed before being
       * written to the bo.  See tex_staging_sys_convert_write().
       */
      switch (format) {
      case PIPE_FORMAT_Z16_UNORM:
         return BRW_SURFACEFORMAT_I16_UNORM;
      case PIPE_FORMAT_Z32_FLOAT:
         return BRW_SURFACEFORMAT_I32_FLOAT;
      case PIPE_FORMAT_Z24X8_UNORM:
      case PIPE_FORMAT_Z24_UNORM_S8_UINT:
         return BRW_SURFACEFORMAT_I24X8_UNORM;
      case PIPE_FORMAT_Z32_FLOAT_S8X24_UINT:
         return BRW_SURFACEFORMAT_I32X32_FLOAT;
      case PIPE_FORMAT_ETC1_RGB8:
         return BRW_SURFACEFORMAT_R8G8B8X8_UNORM;
      default:
         return ilo_translate_color_format(format);
      }
      break;
   case PIPE_BIND_VERTEX_BUFFER:
      /*
       * Some 3-component formats are not supported as vertex element formats.
       * But since we move between vertices using vb->stride, we should be
       * good to use their 4-component counterparts if we force the W
       * component to be one.  The only exception is that the vb boundary
       * check for the last vertex may fail.
       */
      switch (format) {
      case PIPE_FORMAT_R16G16B16_FLOAT:
         return BRW_SURFACEFORMAT_R16G16B16A16_FLOAT;
      case PIPE_FORMAT_R16G16B16_UINT:
         return BRW_SURFACEFORMAT_R16G16B16A16_UINT;
      case PIPE_FORMAT_R16G16B16_SINT:
         return BRW_SURFACEFORMAT_R16G16B16A16_SINT;
      case PIPE_FORMAT_R8G8B8_UINT:
         return BRW_SURFACEFORMAT_R8G8B8A8_UINT;
      case PIPE_FORMAT_R8G8B8_SINT:
         return BRW_SURFACEFORMAT_R8G8B8A8_SINT;
      default:
         return ilo_translate_color_format(format);
      }
      break;
   default:
      assert(!"cannot translate format");
      break;
   }

   return -1;
}

static inline int
ilo_translate_render_format(enum pipe_format format)
{
   return ilo_translate_format(format, PIPE_BIND_RENDER_TARGET);
}

static inline int
ilo_translate_texture_format(enum pipe_format format)
{
   return ilo_translate_format(format, PIPE_BIND_SAMPLER_VIEW);
}

static inline int
ilo_translate_vertex_format(enum pipe_format format)
{
   return ilo_translate_format(format, PIPE_BIND_VERTEX_BUFFER);
}

#endif /* ILO_FORMAT_H */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d31 1
a31 1
#include "genhw/genhw.h"
d62 1
a62 1
         return GEN6_FORMAT_B8G8R8A8_UNORM;
d79 1
a79 1
         return GEN6_FORMAT_I16_UNORM;
d81 1
a81 1
         return GEN6_FORMAT_I32_FLOAT;
d84 1
a84 1
         return GEN6_FORMAT_I24X8_UNORM;
d86 1
a86 1
         return GEN6_FORMAT_I32X32_FLOAT;
d88 1
a88 1
         return GEN6_FORMAT_R8G8B8X8_UNORM;
d103 1
a103 1
         return GEN6_FORMAT_R16G16B16A16_FLOAT;
d105 1
a105 1
         return GEN6_FORMAT_R16G16B16A16_UINT;
d107 1
a107 1
         return GEN6_FORMAT_R16G16B16A16_SINT;
d109 1
a109 1
         return GEN6_FORMAT_R8G8B8A8_UINT;
d111 1
a111 1
         return GEN6_FORMAT_R8G8B8A8_SINT;
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d41 1
a41 2
ilo_translate_color_format(const struct ilo_dev_info *dev,
                           enum pipe_format format);
d48 1
a48 1
 * caveats that the callers should be aware of before calling this function.
d51 1
a51 2
ilo_translate_format(const struct ilo_dev_info *dev,
                     enum pipe_format format, unsigned bind)
d64 1
a64 1
         return ilo_translate_color_format(dev, format);
d90 1
a90 1
         return ilo_translate_color_format(dev, format);
a93 3
      if (ilo_dev_gen(dev) >= ILO_GEN(7.5))
         return ilo_translate_color_format(dev, format);

d113 1
a113 1
         return ilo_translate_color_format(dev, format);
d125 1
a125 2
ilo_translate_render_format(const struct ilo_dev_info *dev,
                            enum pipe_format format)
d127 1
a127 1
   return ilo_translate_format(dev, format, PIPE_BIND_RENDER_TARGET);
d131 1
a131 2
ilo_translate_texture_format(const struct ilo_dev_info *dev,
                             enum pipe_format format)
d133 1
a133 1
   return ilo_translate_format(dev, format, PIPE_BIND_SAMPLER_VIEW);
d137 1
a137 2
ilo_translate_vertex_format(const struct ilo_dev_info *dev,
                            enum pipe_format format)
d139 1
a139 1
   return ilo_translate_format(dev, format, PIPE_BIND_VERTEX_BUFFER);
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d41 2
a42 1
ilo_translate_color_format(enum pipe_format format);
d49 1
a49 1
 * caveats that the callers should that before calling this function.
d52 2
a53 1
ilo_translate_format(enum pipe_format format, unsigned bind)
d66 1
a66 1
         return ilo_translate_color_format(format);
d92 1
a92 1
         return ilo_translate_color_format(format);
d96 3
d118 1
a118 1
         return ilo_translate_color_format(format);
d130 2
a131 1
ilo_translate_render_format(enum pipe_format format)
d133 1
a133 1
   return ilo_translate_format(format, PIPE_BIND_RENDER_TARGET);
d137 2
a138 1
ilo_translate_texture_format(enum pipe_format format)
d140 1
a140 1
   return ilo_translate_format(format, PIPE_BIND_SAMPLER_VIEW);
d144 2
a145 1
ilo_translate_vertex_format(enum pipe_format format)
d147 1
a147 1
   return ilo_translate_format(format, PIPE_BIND_VERTEX_BUFFER);
@


