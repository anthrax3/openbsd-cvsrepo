head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.29;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.11.05;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.11.05;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.33.51;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.07.00;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.44.08;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/* -*- mode: C; c-file-style: "k&r"; tab-width 4; indent-tabs-mode: t; -*- */

/*
 * Copyright (C) 2013 Rob Clark <robclark@@freedesktop.org>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Authors:
 *    Rob Clark <robclark@@freedesktop.org>
 */

#ifndef FD3_EMIT_H
#define FD3_EMIT_H

#include "pipe/p_context.h"

#include "freedreno_context.h"
#include "fd3_util.h"


struct fd_ringbuffer;
enum adreno_state_block;

void fd3_emit_constant(struct fd_ringbuffer *ring,
		enum adreno_state_block sb,
		uint32_t regid, uint32_t offset, uint32_t sizedwords,
		const uint32_t *dwords, struct pipe_resource *prsc);

void fd3_emit_gmem_restore_tex(struct fd_ringbuffer *ring,
		struct pipe_surface *psurf);

/* NOTE: this just exists because we don't have proper vertex/vertexbuf
 * state objs for clear, and mem2gmem/gmem2mem operations..
 */
struct fd3_vertex_buf {
	unsigned offset, stride;
	struct pipe_resource *prsc;
	enum pipe_format format;
};

void fd3_emit_vertex_bufs(struct fd_ringbuffer *ring,
		struct fd_program_stateobj *prog,
		struct fd3_vertex_buf *vbufs, uint32_t n);
void fd3_emit_state(struct fd_context *ctx, uint32_t dirty);
void fd3_emit_restore(struct fd_context *ctx);


/* use RMW (read-modify-write) to update RB_RENDER_CONTROL since the
 * GMEM/binning code is deciding on the bin-width (and whether to
 * use binning) after the draw/clear state is emitted.
 */
static inline void
fd3_emit_rbrc_draw_state(struct fd_ringbuffer *ring, uint32_t val)
{
	OUT_PKT3(ring, CP_REG_RMW, 3);
	OUT_RING(ring, REG_A3XX_RB_RENDER_CONTROL);
	OUT_RING(ring, A3XX_RB_RENDER_CONTROL_BIN_WIDTH__MASK |
			A3XX_RB_RENDER_CONTROL_ENABLE_GMEM);
	OUT_RING(ring, val);
}

static inline void
fd3_emit_rbrc_tile_state(struct fd_ringbuffer *ring, uint32_t val)
{
	OUT_PKT3(ring, CP_REG_RMW, 3);
	OUT_RING(ring, REG_A3XX_RB_RENDER_CONTROL);
	OUT_RING(ring, ~(A3XX_RB_RENDER_CONTROL_BIN_WIDTH__MASK |
			A3XX_RB_RENDER_CONTROL_ENABLE_GMEM));
	OUT_RING(ring, val);
}

#endif /* FD3_EMIT_H */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d59 1
a59 1
		struct fd3_shader_variant *vp,
d61 1
a61 3
void fd3_emit_state(struct fd_context *ctx, struct fd_ringbuffer *ring,
		struct fd_program_stateobj *prog, uint32_t dirty,
		struct fd3_shader_key key);
d63 25
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d36 1
a36 2
#include "fd3_program.h"
#include "ir3_shader.h"
d49 7
a55 11
/* grouped together emit-state for prog/vertex/state emit: */
struct fd3_emit {
	const struct fd_vertex_state *vtx;
	const struct fd_program_stateobj *prog;
	const struct pipe_draw_info *info;
	struct ir3_shader_key key;
	uint32_t dirty;
	bool rasterflat;

	/* cached to avoid repeated lookups of same variants: */
	struct ir3_shader_variant *vp, *fp;
d58 3
a60 22
static inline struct ir3_shader_variant *
fd3_emit_get_vp(struct fd3_emit *emit)
{
	if (!emit->vp) {
		struct fd3_shader_stateobj *so = emit->prog->vp;
		emit->vp = ir3_shader_variant(so->shader, emit->key);
	}
	return emit->vp;
}

static inline struct ir3_shader_variant *
fd3_emit_get_fp(struct fd3_emit *emit)
{
	if (!emit->fp) {
		struct fd3_shader_stateobj *so = emit->prog->fp;
		emit->fp = ir3_shader_variant(so->shader, emit->key);
	}
	return emit->fp;
}

void fd3_emit_vertex_bufs(struct fd_ringbuffer *ring, struct fd3_emit *emit);

d62 2
a63 2
		struct fd3_emit *emit);

@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d36 2
a37 1

d50 11
a60 7
/* NOTE: this just exists because we don't have proper vertex/vertexbuf
 * state objs for clear, and mem2gmem/gmem2mem operations..
 */
struct fd3_vertex_buf {
	unsigned offset, stride;
	struct pipe_resource *prsc;
	enum pipe_format format;
d63 22
a84 3
void fd3_emit_vertex_bufs(struct fd_ringbuffer *ring,
		struct fd3_shader_variant *vp,
		struct fd3_vertex_buf *vbufs, uint32_t n);
d86 2
a87 2
		struct fd_program_stateobj *prog, uint32_t dirty,
		struct fd3_shader_key key);
@


