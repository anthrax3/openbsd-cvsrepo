head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.5.0.4
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.2
	OPENBSD_5_6_BASE:1.1.1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.1.1.2.0.2
	OPENBSD_5_5_BASE:1.1.1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.29;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.11.06;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.11.06;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.01.19.03.03.39;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.51;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.07.00;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.44.09;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/* -*- mode: C; c-file-style: "k&r"; tab-width 4; indent-tabs-mode: t; -*- */

/*
 * Copyright (C) 2013 Rob Clark <robclark@@freedesktop.org>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Authors:
 *    Rob Clark <robclark@@freedesktop.org>
 */

#include "pipe/p_state.h"
#include "util/u_string.h"
#include "util/u_memory.h"
#include "util/u_inlines.h"

#include "fd3_texture.h"
#include "fd3_util.h"

static enum a3xx_tex_clamp
tex_clamp(unsigned wrap)
{
	/* hardware probably supports more, but we can't coax all the
	 * wrap/clamp modes out of the GLESv2 blob driver.
	 *
	 * TODO once we have basics working, go back and just try
	 * different values and see what happens
	 */
	switch (wrap) {
	case PIPE_TEX_WRAP_REPEAT:
		return A3XX_TEX_REPEAT;
	case PIPE_TEX_WRAP_CLAMP:
	case PIPE_TEX_WRAP_CLAMP_TO_BORDER:
	case PIPE_TEX_WRAP_CLAMP_TO_EDGE:
		return A3XX_TEX_CLAMP_TO_EDGE;
	case PIPE_TEX_WRAP_MIRROR_CLAMP:
	case PIPE_TEX_WRAP_MIRROR_CLAMP_TO_BORDER:
	case PIPE_TEX_WRAP_MIRROR_CLAMP_TO_EDGE:
	case PIPE_TEX_WRAP_MIRROR_REPEAT:
		return A3XX_TEX_MIRROR_REPEAT;
	default:
		DBG("invalid wrap: %u", wrap);
		return 0;
	}
}

static enum a3xx_tex_filter
tex_filter(unsigned filter)
{
	switch (filter) {
	case PIPE_TEX_FILTER_NEAREST:
		return A3XX_TEX_NEAREST;
	case PIPE_TEX_FILTER_LINEAR:
		return A3XX_TEX_LINEAR;
	default:
		DBG("invalid filter: %u", filter);
		return 0;
	}
}

static void *
fd3_sampler_state_create(struct pipe_context *pctx,
		const struct pipe_sampler_state *cso)
{
	struct fd3_sampler_stateobj *so = CALLOC_STRUCT(fd3_sampler_stateobj);

	if (!so)
		return NULL;

	so->base = *cso;

	so->texsamp0 =
			A3XX_TEX_SAMP_0_XY_MAG(tex_filter(cso->mag_img_filter)) |
			A3XX_TEX_SAMP_0_XY_MIN(tex_filter(cso->min_img_filter)) |
			A3XX_TEX_SAMP_0_WRAP_S(tex_clamp(cso->wrap_s)) |
			A3XX_TEX_SAMP_0_WRAP_T(tex_clamp(cso->wrap_t)) |
			A3XX_TEX_SAMP_0_WRAP_R(tex_clamp(cso->wrap_r));
	so->texsamp1 = 0x00000000;  /* ??? */

	return so;
}

static struct pipe_sampler_view *
fd3_sampler_view_create(struct pipe_context *pctx, struct pipe_resource *prsc,
		const struct pipe_sampler_view *cso)
{
	struct fd3_pipe_sampler_view *so = CALLOC_STRUCT(fd3_pipe_sampler_view);
	struct fd_resource *rsc = fd_resource(prsc);

	if (!so)
		return NULL;

	so->base = *cso;
	pipe_reference(NULL, &prsc->reference);
	so->base.texture = prsc;
	so->base.reference.count = 1;
	so->base.context = pctx;

	so->tex_resource =  rsc;

	so->texconst0 =
			0x40000000 | /* ??? */
			A3XX_TEX_CONST_0_FMT(fd3_pipe2tex(cso->format)) |
			fd3_tex_swiz(cso->format, cso->swizzle_r, cso->swizzle_g,
						cso->swizzle_b, cso->swizzle_a);
	so->texconst1 =
			A3XX_TEX_CONST_1_FETCHSIZE(fd3_pipe2fetchsize(cso->format)) |
			A3XX_TEX_CONST_1_WIDTH(prsc->width0) |
			A3XX_TEX_CONST_1_HEIGHT(prsc->height0);
	/* when emitted, A3XX_TEX_CONST_2_INDX() must be OR'd in: */
	so->texconst2 =
			A3XX_TEX_CONST_2_PITCH(rsc->pitch * rsc->cpp);
	so->texconst3 = 0x00000000;  /* ??? */

	return &so->base;
}

void
fd3_texture_init(struct pipe_context *pctx)
{
	pctx->create_sampler_state = fd3_sampler_state_create;
	pctx->create_sampler_view = fd3_sampler_view_create;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.5
@
text
@a89 1
			COND(!cso->normalized_coords, A3XX_TEX_SAMP_0_UNNORM_COORDS) |
a99 22
static enum a3xx_tex_type
tex_type(unsigned target)
{
	switch (target) {
	default:
		assert(0);
	case PIPE_BUFFER:
	case PIPE_TEXTURE_1D:
	case PIPE_TEXTURE_1D_ARRAY:
		return A3XX_TEX_1D;
	case PIPE_TEXTURE_RECT:
	case PIPE_TEXTURE_2D:
	case PIPE_TEXTURE_2D_ARRAY:
		return A3XX_TEX_2D;
	case PIPE_TEXTURE_3D:
		return A3XX_TEX_3D;
	case PIPE_TEXTURE_CUBE:
	case PIPE_TEXTURE_CUBE_ARRAY:
		return A3XX_TEX_CUBE;
	}
}

d119 1
a119 1
			A3XX_TEX_CONST_0_TYPE(tex_type(prsc->target)) |
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a32 1
#include "util/u_format.h"
d50 1
a52 2
	case PIPE_TEX_WRAP_CLAMP_TO_BORDER:
		return A3XX_TEX_CLAMP_TO_BORDER;
a55 1
		return A3XX_TEX_MIRROR_CLAMP;
a82 1
	bool miplinear = false;
a86 3
	if (cso->min_mip_filter == PIPE_TEX_MIPFILTER_LINEAR)
		miplinear = true;

a90 1
			COND(miplinear, A3XX_TEX_SAMP_0_MIPFILTER_LINEAR) |
d96 1
a96 11

	if (cso->compare_mode)
		so->texsamp0 |= A3XX_TEX_SAMP_0_COMPARE_FUNC(cso->compare_func); /* maps 1:1 */

	if (cso->min_mip_filter != PIPE_TEX_MIPFILTER_NONE) {
		so->texsamp1 =
				A3XX_TEX_SAMP_1_MIN_LOD(cso->min_lod) |
				A3XX_TEX_SAMP_1_MAX_LOD(cso->max_lod);
	} else {
		so->texsamp1 = 0x00000000;
	}
a128 1
	unsigned miplevels = cso->u.tex.last_level - cso->u.tex.first_level;
a139 1
	so->mipaddrs = 1 + miplevels;
a143 1
			A3XX_TEX_CONST_0_MIPLVLS(miplevels) |
a145 4

	if (util_format_is_srgb(cso->format))
		so->texconst0 |= A3XX_TEX_CONST_0_SRGB;

d152 1
a152 1
			A3XX_TEX_CONST_2_PITCH(rsc->slices[0].pitch * rsc->cpp);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d39 1
a39 1
tex_clamp(unsigned wrap, bool clamp_to_edge)
d41 6
a46 6
	/* Hardware does not support _CLAMP, but we emulate it: */
	if (wrap == PIPE_TEX_WRAP_CLAMP) {
		wrap = (clamp_to_edge) ?
			PIPE_TEX_WRAP_CLAMP_TO_EDGE : PIPE_TEX_WRAP_CLAMP_TO_BORDER;
	}

d50 1
d55 2
a57 1
		/* only works for PoT.. need to emulate otherwise! */
a60 5
	case PIPE_TEX_WRAP_MIRROR_CLAMP:
	case PIPE_TEX_WRAP_MIRROR_CLAMP_TO_BORDER:
		/* these two we could perhaps emulate, but we currently
		 * just don't advertise PIPE_CAP_TEXTURE_MIRROR_CLAMP
		 */
a86 1
	bool clamp_to_edge;
a95 15
	/*
	 * For nearest filtering, _CLAMP means _CLAMP_TO_EDGE;  for linear
	 * filtering, _CLAMP means _CLAMP_TO_BORDER while additionally
	 * clamping the texture coordinates to [0.0, 1.0].
	 *
	 * The clamping will be taken care of in the shaders.  There are two
	 * filters here, but let the minification one has a say.
	 */
	clamp_to_edge = (cso->min_img_filter == PIPE_TEX_FILTER_NEAREST);
	if (!clamp_to_edge) {
		so->saturate_s = (cso->wrap_s == PIPE_TEX_WRAP_CLAMP);
		so->saturate_t = (cso->wrap_t == PIPE_TEX_WRAP_CLAMP);
		so->saturate_r = (cso->wrap_r == PIPE_TEX_WRAP_CLAMP);
	}

d101 3
a103 3
			A3XX_TEX_SAMP_0_WRAP_S(tex_clamp(cso->wrap_s, clamp_to_edge)) |
			A3XX_TEX_SAMP_0_WRAP_T(tex_clamp(cso->wrap_t, clamp_to_edge)) |
			A3XX_TEX_SAMP_0_WRAP_R(tex_clamp(cso->wrap_r, clamp_to_edge));
a109 1
				A3XX_TEX_SAMP_1_LOD_BIAS(cso->lod_bias) |
a118 44
static void
fd3_sampler_states_bind(struct pipe_context *pctx,
		unsigned shader, unsigned start,
		unsigned nr, void **hwcso)
{
	struct fd_context *ctx = fd_context(pctx);
	struct fd3_context *fd3_ctx = fd3_context(ctx);
	uint16_t saturate_s = 0, saturate_t = 0, saturate_r = 0;
	unsigned i;

	for (i = 0; i < nr; i++) {
		if (hwcso[i]) {
			struct fd3_sampler_stateobj *sampler =
					fd3_sampler_stateobj(hwcso[i]);
			if (sampler->saturate_s)
				saturate_s |= (1 << i);
			if (sampler->saturate_t)
				saturate_t |= (1 << i);
			if (sampler->saturate_r)
				saturate_r |= (1 << i);
		}
	}

	fd_sampler_states_bind(pctx, shader, start, nr, hwcso);

	if (shader == PIPE_SHADER_FRAGMENT) {
		fd3_ctx->fsaturate =
			(saturate_s != 0) ||
			(saturate_t != 0) ||
			(saturate_r != 0);
		fd3_ctx->fsaturate_s = saturate_s;
		fd3_ctx->fsaturate_t = saturate_t;
		fd3_ctx->fsaturate_r = saturate_r;
	} else if (shader == PIPE_SHADER_VERTEX) {
		fd3_ctx->vsaturate =
			(saturate_s != 0) ||
			(saturate_t != 0) ||
			(saturate_r != 0);
		fd3_ctx->vsaturate_s = saturate_s;
		fd3_ctx->vsaturate_t = saturate_t;
		fd3_ctx->vsaturate_r = saturate_r;
	}
}

d147 1
a147 2
	unsigned lvl = cso->u.tex.first_level;
	unsigned miplevels = cso->u.tex.last_level - lvl;
d159 1
d173 2
a174 2
			A3XX_TEX_CONST_1_WIDTH(u_minify(prsc->width0, lvl)) |
			A3XX_TEX_CONST_1_HEIGHT(u_minify(prsc->height0, lvl));
d177 2
a178 19
			A3XX_TEX_CONST_2_PITCH(rsc->slices[lvl].pitch * rsc->cpp);
	switch (prsc->target) {
	case PIPE_TEXTURE_1D_ARRAY:
	case PIPE_TEXTURE_2D_ARRAY:
		so->texconst3 =
				A3XX_TEX_CONST_3_DEPTH(prsc->array_size - 1) |
				A3XX_TEX_CONST_3_LAYERSZ1(rsc->slices[0].size0) |
				A3XX_TEX_CONST_3_LAYERSZ2(rsc->slices[0].size0);
		break;
	case PIPE_TEXTURE_3D:
		so->texconst3 =
				A3XX_TEX_CONST_3_DEPTH(u_minify(prsc->depth0, lvl)) |
				A3XX_TEX_CONST_3_LAYERSZ1(rsc->slices[0].size0) |
				A3XX_TEX_CONST_3_LAYERSZ2(rsc->slices[0].size0);
		break;
	default:
		so->texconst3 = 0x00000000;
		break;
	}
a186 1
	pctx->bind_sampler_states = fd3_sampler_states_bind;
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d39 1
a39 1
tex_clamp(unsigned wrap)
d41 6
a46 6
	/* hardware probably supports more, but we can't coax all the
	 * wrap/clamp modes out of the GLESv2 blob driver.
	 *
	 * TODO once we have basics working, go back and just try
	 * different values and see what happens
	 */
a49 1
	case PIPE_TEX_WRAP_CLAMP:
a53 2
	case PIPE_TEX_WRAP_MIRROR_CLAMP:
	case PIPE_TEX_WRAP_MIRROR_CLAMP_TO_BORDER:
d55 1
d59 5
d90 1
d100 15
d120 3
a122 3
			A3XX_TEX_SAMP_0_WRAP_S(tex_clamp(cso->wrap_s)) |
			A3XX_TEX_SAMP_0_WRAP_T(tex_clamp(cso->wrap_t)) |
			A3XX_TEX_SAMP_0_WRAP_R(tex_clamp(cso->wrap_r));
d129 1
d139 44
d211 2
a212 1
	unsigned miplevels = cso->u.tex.last_level - cso->u.tex.first_level;
a223 1
	so->mipaddrs = 1 + miplevels;
d237 2
a238 2
			A3XX_TEX_CONST_1_WIDTH(prsc->width0) |
			A3XX_TEX_CONST_1_HEIGHT(prsc->height0);
d241 19
a259 2
			A3XX_TEX_CONST_2_PITCH(rsc->slices[0].pitch * rsc->cpp);
	so->texconst3 = 0x00000000;  /* ??? */
d268 1
@


