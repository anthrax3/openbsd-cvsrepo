head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.5.0.4
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.2
	OPENBSD_5_6_BASE:1.1.1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.1.1.2.0.2
	OPENBSD_5_5_BASE:1.1.1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.29;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.11.06;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.11.06;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.01.19.03.03.39;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.51;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.07.00;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.44.10;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/* -*- mode: C; c-file-style: "k&r"; tab-width 4; indent-tabs-mode: t; -*- */

/*
 * Copyright (C) 2013 Rob Clark <robclark@@freedesktop.org>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Authors:
 *    Rob Clark <robclark@@freedesktop.org>
 */

#include "pipe/p_defines.h"
#include "util/u_format.h"

#include "fd3_util.h"

/* convert pipe format to vertex buffer format: */
enum a3xx_vtx_fmt
fd3_pipe2vtx(enum pipe_format format)
{
	switch (format) {
	/* 8-bit buffers. */
	case PIPE_FORMAT_A8_UNORM:
	case PIPE_FORMAT_I8_UNORM:
	case PIPE_FORMAT_L8_UNORM:
	case PIPE_FORMAT_R8_UNORM:
	case PIPE_FORMAT_L8_SRGB:
		return VFMT_NORM_UBYTE_8;

	case PIPE_FORMAT_A8_SNORM:
	case PIPE_FORMAT_I8_SNORM:
	case PIPE_FORMAT_L8_SNORM:
	case PIPE_FORMAT_R8_SNORM:
		return VFMT_NORM_BYTE_8;

	case PIPE_FORMAT_A8_UINT:
	case PIPE_FORMAT_I8_UINT:
	case PIPE_FORMAT_L8_UINT:
	case PIPE_FORMAT_R8_UINT:
		return VFMT_UBYTE_8;

	case PIPE_FORMAT_A8_SINT:
	case PIPE_FORMAT_I8_SINT:
	case PIPE_FORMAT_L8_SINT:
	case PIPE_FORMAT_R8_SINT:
		return VFMT_BYTE_8;

	/* 16-bit buffers. */
	case PIPE_FORMAT_R16_UNORM:
	case PIPE_FORMAT_A16_UNORM:
	case PIPE_FORMAT_L16_UNORM:
	case PIPE_FORMAT_I16_UNORM:
	case PIPE_FORMAT_Z16_UNORM:
		return VFMT_NORM_USHORT_16;

	case PIPE_FORMAT_R16_SNORM:
	case PIPE_FORMAT_A16_SNORM:
	case PIPE_FORMAT_L16_SNORM:
	case PIPE_FORMAT_I16_SNORM:
		return VFMT_NORM_SHORT_16;

	case PIPE_FORMAT_R16_UINT:
	case PIPE_FORMAT_A16_UINT:
	case PIPE_FORMAT_L16_UINT:
	case PIPE_FORMAT_I16_UINT:
		return VFMT_USHORT_16;

	case PIPE_FORMAT_R16_SINT:
	case PIPE_FORMAT_A16_SINT:
	case PIPE_FORMAT_L16_SINT:
	case PIPE_FORMAT_I16_SINT:
		return VFMT_SHORT_16;

	case PIPE_FORMAT_L8A8_UNORM:
	case PIPE_FORMAT_R8G8_UNORM:
		return VFMT_NORM_UBYTE_8_8;

	case PIPE_FORMAT_L8A8_SNORM:
	case PIPE_FORMAT_R8G8_SNORM:
		return VFMT_NORM_BYTE_8_8;

	case PIPE_FORMAT_L8A8_UINT:
	case PIPE_FORMAT_R8G8_UINT:
		return VFMT_UBYTE_8_8;

	case PIPE_FORMAT_L8A8_SINT:
	case PIPE_FORMAT_R8G8_SINT:
		return VFMT_BYTE_8_8;

	/* 24-bit buffers. */
	case PIPE_FORMAT_R8G8B8_UNORM:
		return VFMT_NORM_UBYTE_8_8_8;

	case PIPE_FORMAT_R8G8B8_SNORM:
		return VFMT_NORM_BYTE_8_8_8;

	case PIPE_FORMAT_R8G8B8_UINT:
		return VFMT_UBYTE_8_8_8;

	case PIPE_FORMAT_R8G8B8_SINT:
		return VFMT_BYTE_8_8_8;

	/* 32-bit buffers. */
	case PIPE_FORMAT_A8B8G8R8_UNORM:
	case PIPE_FORMAT_A8R8G8B8_UNORM:
	case PIPE_FORMAT_B8G8R8A8_UNORM:
	case PIPE_FORMAT_B8G8R8X8_UNORM:
	case PIPE_FORMAT_R8G8B8A8_UNORM:
	case PIPE_FORMAT_R8G8B8X8_UNORM:
	case PIPE_FORMAT_X8B8G8R8_UNORM:
	case PIPE_FORMAT_X8R8G8B8_UNORM:
	case PIPE_FORMAT_A8B8G8R8_SRGB:
	case PIPE_FORMAT_B8G8R8A8_SRGB:
		return VFMT_NORM_UBYTE_8_8_8_8;

	case PIPE_FORMAT_R8G8B8A8_SNORM:
	case PIPE_FORMAT_R8G8B8X8_SNORM:
		return VFMT_NORM_BYTE_8_8_8_8;

	case PIPE_FORMAT_R8G8B8A8_UINT:
	case PIPE_FORMAT_R8G8B8X8_UINT:
		return VFMT_UBYTE_8_8_8_8;

	case PIPE_FORMAT_R8G8B8A8_SINT:
	case PIPE_FORMAT_R8G8B8X8_SINT:
		return VFMT_BYTE_8_8_8_8;

/* TODO probably need gles3 blob drivers to find the 32bit int formats:
	case PIPE_FORMAT_R32_UINT:
	case PIPE_FORMAT_R32_SINT:
	case PIPE_FORMAT_A32_UINT:
	case PIPE_FORMAT_A32_SINT:
	case PIPE_FORMAT_L32_UINT:
	case PIPE_FORMAT_L32_SINT:
	case PIPE_FORMAT_I32_UINT:
	case PIPE_FORMAT_I32_SINT:
*/

	case PIPE_FORMAT_R32_FLOAT:
	case PIPE_FORMAT_A32_FLOAT:
	case PIPE_FORMAT_L32_FLOAT:
	case PIPE_FORMAT_I32_FLOAT:
	case PIPE_FORMAT_Z32_FLOAT:
		return VFMT_FLOAT_32;

	case PIPE_FORMAT_R32_FIXED:
		return VFMT_FIXED_32;

	/* 64-bit buffers. */
	case PIPE_FORMAT_R16G16B16A16_UNORM:
		return VFMT_NORM_USHORT_16_16_16_16;

	case PIPE_FORMAT_R16G16B16A16_SNORM:
		return VFMT_NORM_SHORT_16_16_16_16;

	case PIPE_FORMAT_R16G16B16A16_UINT:
		return VFMT_USHORT_16_16_16_16;

	case PIPE_FORMAT_R16G16B16A16_SINT:
		return VFMT_SHORT_16_16_16_16;

	case PIPE_FORMAT_R32G32_FLOAT:
	case PIPE_FORMAT_L32A32_FLOAT:
		return VFMT_FLOAT_32_32;

	case PIPE_FORMAT_R32G32_FIXED:
		return VFMT_FIXED_32_32;

/* TODO probably need gles3 blob drivers to find the 32bit int formats:
	case PIPE_FORMAT_R32G32_SINT:
	case PIPE_FORMAT_R32G32_UINT:
	case PIPE_FORMAT_L32A32_UINT:
	case PIPE_FORMAT_L32A32_SINT:
*/

	/* 96-bit buffers. */
	case PIPE_FORMAT_R32G32B32_FLOAT:
		return VFMT_FLOAT_32_32_32;

	case PIPE_FORMAT_R32G32B32_FIXED:
		return VFMT_FIXED_32_32_32;

	/* 128-bit buffers. */
	case PIPE_FORMAT_R32G32B32A32_FLOAT:
		return VFMT_FLOAT_32_32_32_32;

	case PIPE_FORMAT_R32G32B32A32_FIXED:
		return VFMT_FIXED_32_32_32_32;

/* TODO probably need gles3 blob drivers to find the 32bit int formats:
	case PIPE_FORMAT_R32G32B32A32_SNORM:
	case PIPE_FORMAT_R32G32B32A32_UNORM:
	case PIPE_FORMAT_R32G32B32A32_SINT:
	case PIPE_FORMAT_R32G32B32A32_UINT:
*/

	default:
		return ~0;
	}
}

/* convert pipe format to texture sampler format: */
enum a3xx_tex_fmt
fd3_pipe2tex(enum pipe_format format)
{
	switch (format) {
	case PIPE_FORMAT_L8_UNORM:
	case PIPE_FORMAT_A8_UNORM:
	case PIPE_FORMAT_I8_UNORM:
		return TFMT_NORM_UINT_8;

	case PIPE_FORMAT_B8G8R8A8_UNORM:
	case PIPE_FORMAT_B8G8R8X8_UNORM:
		return TFMT_NORM_UINT_8_8_8_8;

	case PIPE_FORMAT_Z24X8_UNORM:
		return TFMT_NORM_UINT_X8Z24;

	case PIPE_FORMAT_Z24_UNORM_S8_UINT:
		return TFMT_NORM_UINT_8_8_8_8;

	case PIPE_FORMAT_Z16_UNORM:
		return TFMT_NORM_UINT_8_8;

	// TODO add more..

	default:
		return ~0;
	}
}

enum a3xx_tex_fetchsize
fd3_pipe2fetchsize(enum pipe_format format)
{
	switch (format) {
	case PIPE_FORMAT_L8_UNORM:
	case PIPE_FORMAT_A8_UNORM:
	case PIPE_FORMAT_I8_UNORM:
		return TFETCH_1_BYTE;

	case PIPE_FORMAT_Z16_UNORM:
		return TFETCH_2_BYTE;

	case PIPE_FORMAT_B8G8R8A8_UNORM:
	case PIPE_FORMAT_B8G8R8X8_UNORM:
	case PIPE_FORMAT_Z24X8_UNORM:
	case PIPE_FORMAT_Z24_UNORM_S8_UINT:
		return TFETCH_4_BYTE;

	// TODO add more..

	default:
		return TFETCH_DISABLE;  /* save default */
	}
}

/* convert pipe format to MRT / copydest format used for render-target: */
enum a3xx_color_fmt
fd3_pipe2color(enum pipe_format format)
{
	switch (format) {
	case PIPE_FORMAT_B8G8R8A8_UNORM:
	case PIPE_FORMAT_B8G8R8X8_UNORM:
		return RB_R8G8B8A8_UNORM;

	case PIPE_FORMAT_Z16_UNORM:
		return RB_Z16_UNORM;

	case PIPE_FORMAT_Z24X8_UNORM:
	case PIPE_FORMAT_Z24_UNORM_S8_UINT:
		/* for DEPTHX_24_8, blob driver also seems to use R8G8B8A8 fmt.. */
		return RB_R8G8B8A8_UNORM;

	case PIPE_FORMAT_R8_UNORM:
	case PIPE_FORMAT_L8_UNORM:
		return RB_A8_UNORM;

	// TODO add more..

	default:
		return ~0;
	}
}

enum a3xx_color_swap
fd3_pipe2swap(enum pipe_format format)
{
	switch (format) {
	case PIPE_FORMAT_B8G8R8A8_UNORM:
	case PIPE_FORMAT_B8G8R8X8_UNORM:
		return WXYZ;
	case PIPE_FORMAT_Z24X8_UNORM:
	case PIPE_FORMAT_Z24_UNORM_S8_UINT:
		return WZYX;

	default:
		return WZYX;
	}
}

static inline enum a3xx_tex_swiz
tex_swiz(unsigned swiz)
{
	switch (swiz) {
	default:
	case PIPE_SWIZZLE_RED:   return A3XX_TEX_X;
	case PIPE_SWIZZLE_GREEN: return A3XX_TEX_Y;
	case PIPE_SWIZZLE_BLUE:  return A3XX_TEX_Z;
	case PIPE_SWIZZLE_ALPHA: return A3XX_TEX_W;
	case PIPE_SWIZZLE_ZERO:  return A3XX_TEX_ZERO;
	case PIPE_SWIZZLE_ONE:   return A3XX_TEX_ONE;
	}
}

uint32_t
fd3_tex_swiz(enum pipe_format format, unsigned swizzle_r, unsigned swizzle_g,
		unsigned swizzle_b, unsigned swizzle_a)
{
	const struct util_format_description *desc =
			util_format_description(format);
	uint8_t swiz[] = {
			swizzle_r, swizzle_g, swizzle_b, swizzle_a,
			PIPE_SWIZZLE_ZERO, PIPE_SWIZZLE_ONE,
			PIPE_SWIZZLE_ONE, PIPE_SWIZZLE_ONE,
	};

	return A3XX_TEX_CONST_0_SWIZ_X(tex_swiz(swiz[desc->swizzle[0]])) |
			A3XX_TEX_CONST_0_SWIZ_Y(tex_swiz(swiz[desc->swizzle[1]])) |
			A3XX_TEX_CONST_0_SWIZ_Z(tex_swiz(swiz[desc->swizzle[2]])) |
			A3XX_TEX_CONST_0_SWIZ_W(tex_swiz(swiz[desc->swizzle[3]]));
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.5
@
text
@a308 3

	case PIPE_FORMAT_R8G8B8A8_UNORM:
	case PIPE_FORMAT_R8G8B8X8_UNORM:
d311 2
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d40 3
d44 1
d47 3
d53 3
d59 3
d67 3
d74 3
d80 3
d86 3
d91 1
a91 3
	case PIPE_FORMAT_R16_FLOAT:
		return VFMT_FLOAT_16;

d95 1
d99 1
d103 1
d124 1
d126 5
d134 1
d138 1
d142 1
d145 10
a154 42
	case PIPE_FORMAT_R16G16_SSCALED:
		return VFMT_SHORT_16_16;

	case PIPE_FORMAT_R16G16_FLOAT:
		return VFMT_FLOAT_16_16;

	case PIPE_FORMAT_R16G16_UINT:
		return VFMT_USHORT_16_16;

	case PIPE_FORMAT_R16G16_UNORM:
		return VFMT_NORM_USHORT_16_16;

	case PIPE_FORMAT_R16G16_SNORM:
		return VFMT_NORM_SHORT_16_16;

	case PIPE_FORMAT_R10G10B10A2_UNORM:
		return VFMT_NORM_UINT_10_10_10_2;

	case PIPE_FORMAT_R10G10B10A2_SNORM:
		return VFMT_NORM_INT_10_10_10_2;

	case PIPE_FORMAT_R10G10B10A2_USCALED:
		return VFMT_UINT_10_10_10_2;

	case PIPE_FORMAT_R10G10B10A2_SSCALED:
		return VFMT_INT_10_10_10_2;

	/* 48-bit buffers. */
	case PIPE_FORMAT_R16G16B16_FLOAT:
		return VFMT_FLOAT_16_16_16;

	case PIPE_FORMAT_R16G16B16_SSCALED:
		return VFMT_SHORT_16_16_16;

	case PIPE_FORMAT_R16G16B16_UINT:
		return VFMT_USHORT_16_16_16;

	case PIPE_FORMAT_R16G16B16_SNORM:
		return VFMT_NORM_SHORT_16_16_16;

	case PIPE_FORMAT_R16G16B16_UNORM:
		return VFMT_NORM_USHORT_16_16_16;
d157 3
d180 1
d186 6
a191 2
	case PIPE_FORMAT_R16G16B16A16_FLOAT:
		return VFMT_FLOAT_16_16_16_16;
a211 14

	case PIPE_FORMAT_R32_UINT:
	case PIPE_FORMAT_R32_SINT:
	case PIPE_FORMAT_A32_UINT:
	case PIPE_FORMAT_A32_SINT:
	case PIPE_FORMAT_L32_UINT:
	case PIPE_FORMAT_L32_SINT:
	case PIPE_FORMAT_I32_UINT:
	case PIPE_FORMAT_I32_SINT:

	case PIPE_FORMAT_R32G32_SINT:
	case PIPE_FORMAT_R32G32_UINT:
	case PIPE_FORMAT_L32A32_UINT:
	case PIPE_FORMAT_L32A32_SINT:
a230 6
	case PIPE_FORMAT_R8G8B8A8_UNORM:
	case PIPE_FORMAT_R8G8B8X8_UNORM:
	case PIPE_FORMAT_B8G8R8A8_SRGB:
	case PIPE_FORMAT_B8G8R8X8_SRGB:
	case PIPE_FORMAT_R8G8B8A8_SRGB:
	case PIPE_FORMAT_R8G8B8X8_SRGB:
a241 8
	case PIPE_FORMAT_R16G16B16A16_FLOAT:
	case PIPE_FORMAT_R16G16B16X16_FLOAT:
		return TFMT_FLOAT_16_16_16_16;

	case PIPE_FORMAT_R32G32B32A32_FLOAT:
	case PIPE_FORMAT_R32G32B32X32_FLOAT:
		return TFMT_FLOAT_32_32_32_32;

a262 6
	case PIPE_FORMAT_R8G8B8A8_UNORM:
	case PIPE_FORMAT_R8G8B8X8_UNORM:
	case PIPE_FORMAT_B8G8R8A8_SRGB:
	case PIPE_FORMAT_B8G8R8X8_SRGB:
	case PIPE_FORMAT_R8G8B8A8_SRGB:
	case PIPE_FORMAT_R8G8B8X8_SRGB:
d270 1
a270 1
		return TFETCH_DISABLE;  /* safe default */
a280 1
	case PIPE_FORMAT_R8G8B8A8_UNORM:
a292 1
	case PIPE_FORMAT_A8_UNORM:
a294 8
	case PIPE_FORMAT_R16G16B16A16_FLOAT:
	case PIPE_FORMAT_R16G16B16X16_FLOAT:
		return RB_R16G16B16A16_FLOAT;

	case PIPE_FORMAT_R32G32B32A32_FLOAT:
	case PIPE_FORMAT_R32G32B32X32_FLOAT:
		return RB_R32G32B32A32_FLOAT;

a301 18
/* we need to special case a bit the depth/stencil restore, because we are
 * using the texture sampler to blit into the depth/stencil buffer, *not*
 * into a color buffer.  Otherwise fd3_tex_swiz() will do the wrong thing,
 * as it is assuming that you are sampling into normal render target..
 */
enum pipe_format
fd3_gmem_restore_format(enum pipe_format format)
{
	switch (format) {
	case PIPE_FORMAT_Z24X8_UNORM:
	case PIPE_FORMAT_Z24_UNORM_S8_UINT:
	case PIPE_FORMAT_Z16_UNORM:
		return PIPE_FORMAT_B8G8R8A8_UNORM;
	default:
		return format;
	}
}

a307 2
	case PIPE_FORMAT_B8G8R8A8_SRGB:
	case PIPE_FORMAT_B8G8R8X8_SRGB:
a309 12
	case PIPE_FORMAT_A8R8G8B8_UNORM:
	case PIPE_FORMAT_X8R8G8B8_UNORM:
	case PIPE_FORMAT_A8R8G8B8_SRGB:
	case PIPE_FORMAT_X8R8G8B8_SRGB:
		return ZYXW;

	case PIPE_FORMAT_A8B8G8R8_UNORM:
	case PIPE_FORMAT_X8B8G8R8_UNORM:
	case PIPE_FORMAT_A8B8G8R8_SRGB:
	case PIPE_FORMAT_X8B8G8R8_SRGB:
		return XYZW;

d339 1
a339 1
	unsigned char swiz[4] = {
d341 8
a348 8
	}, rswiz[4];

	util_format_compose_swizzles(desc->swizzle, swiz, rswiz);

	return A3XX_TEX_CONST_0_SWIZ_X(tex_swiz(rswiz[0])) |
			A3XX_TEX_CONST_0_SWIZ_Y(tex_swiz(rswiz[1])) |
			A3XX_TEX_CONST_0_SWIZ_Z(tex_swiz(rswiz[2])) |
			A3XX_TEX_CONST_0_SWIZ_W(tex_swiz(rswiz[3]));
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a46 1
	case PIPE_FORMAT_R8_USCALED:
a49 1
	case PIPE_FORMAT_R8_SSCALED:
a60 1
	case PIPE_FORMAT_R16_USCALED:
a63 1
	case PIPE_FORMAT_R16_SSCALED:
a75 1
	case PIPE_FORMAT_R8G8_USCALED:
a78 1
	case PIPE_FORMAT_R8G8_SSCALED:
a88 1
	case PIPE_FORMAT_R8G8B8_USCALED:
a91 1
	case PIPE_FORMAT_R8G8B8_SSCALED:
a104 1
	case PIPE_FORMAT_R8G8B8A8_USCALED:
a107 1
	case PIPE_FORMAT_R8G8B8A8_SSCALED:
a110 1
	case PIPE_FORMAT_R16G16_SINT:
a116 1
	case PIPE_FORMAT_R16G16_USCALED:
a124 8
	case PIPE_FORMAT_R32_UINT:
	case PIPE_FORMAT_R32_USCALED:
		return VFMT_UINT_32;

	case PIPE_FORMAT_R32_SINT:
	case PIPE_FORMAT_R32_SSCALED:
		return VFMT_INT_32;

a130 1
	case PIPE_FORMAT_R10G10B10A2_UINT:
a140 1
	case PIPE_FORMAT_R16G16B16_SINT:
a144 1
	case PIPE_FORMAT_R16G16B16_USCALED:
a167 1
	case PIPE_FORMAT_R16G16B16A16_USCALED:
a170 1
	case PIPE_FORMAT_R16G16B16A16_SSCALED:
a181 8
	case PIPE_FORMAT_R32G32_UINT:
	case PIPE_FORMAT_R32G32_USCALED:
		return VFMT_UINT_32_32;

	case PIPE_FORMAT_R32G32_SINT:
	case PIPE_FORMAT_R32G32_SSCALED:
		return VFMT_INT_32_32;

a188 8
	case PIPE_FORMAT_R32G32B32_UINT:
	case PIPE_FORMAT_R32G32B32_USCALED:
		return VFMT_UINT_32_32_32;

	case PIPE_FORMAT_R32G32B32_SINT:
	case PIPE_FORMAT_R32G32B32_SSCALED:
		return VFMT_INT_32_32_32;

d196 4
a200 2
	case PIPE_FORMAT_R32G32B32A32_USCALED:
		return VFMT_UINT_32_32_32_32;
d202 8
a209 3
	case PIPE_FORMAT_R32G32B32A32_SINT:
	case PIPE_FORMAT_R32G32B32A32_SSCALED:
		return VFMT_INT_32_32_32_32;
d211 5
a215 6
/* TODO normalized 32bit int formats do not appear to be supported
 * natively.. will require either shader variant or VFD_DECODE
 * gymnastics like the blob driver does..
	case PIPE_FORMAT_R32G32B32A32_SNORM:
	case PIPE_FORMAT_R32G32B32A32_UNORM:
 */
a231 3
	case PIPE_FORMAT_R8G8_UNORM:
		return TFMT_NORM_UINT_8_8;

d243 2
d246 1
a246 1
		return TFMT_NORM_UINT_X8Z24;
d249 1
a249 1
		return TFMT_NORM_USHORT_Z16;
a316 2
		return RB_R8_UNORM;

a345 1
		return PIPE_FORMAT_R8G8B8A8_UNORM;
d347 1
a347 1
		return PIPE_FORMAT_R8G8_UNORM;
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d47 1
d51 1
d63 1
d67 1
d80 1
d84 1
d95 1
d99 1
d113 1
d117 1
d121 1
d128 1
d137 8
d151 1
d162 1
d167 1
d191 1
d195 1
d207 8
d222 8
a236 4
/* TODO probably need gles3 blob drivers to find the 32bit int formats:
	case PIPE_FORMAT_R32G32B32A32_SNORM:
	case PIPE_FORMAT_R32G32B32A32_UNORM:
	case PIPE_FORMAT_R32G32B32A32_SINT:
d238 2
d241 3
a243 8
	case PIPE_FORMAT_R32_UINT:
	case PIPE_FORMAT_R32_SINT:
	case PIPE_FORMAT_A32_UINT:
	case PIPE_FORMAT_A32_SINT:
	case PIPE_FORMAT_L32_UINT:
	case PIPE_FORMAT_L32_SINT:
	case PIPE_FORMAT_I32_UINT:
	case PIPE_FORMAT_I32_SINT:
d245 6
a250 5
	case PIPE_FORMAT_R32G32_SINT:
	case PIPE_FORMAT_R32G32_UINT:
	case PIPE_FORMAT_L32A32_UINT:
	case PIPE_FORMAT_L32A32_SINT:
*/
d267 3
d281 1
a283 3
	case PIPE_FORMAT_Z24_UNORM_S8_UINT:
		return TFMT_NORM_UINT_8_8_8_8;

d285 1
a285 1
		return TFMT_NORM_UINT_8_8;
d353 2
d384 1
d386 1
a386 1
		return PIPE_FORMAT_B8G8R8A8_UNORM;
@


