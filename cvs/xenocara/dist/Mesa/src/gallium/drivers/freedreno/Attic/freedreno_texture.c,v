head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.29;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.11.00;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.11.00;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.33.50;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.06.55;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.44.03;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/* -*- mode: C; c-file-style: "k&r"; tab-width 4; indent-tabs-mode: t; -*- */

/*
 * Copyright (C) 2012 Rob Clark <robclark@@freedesktop.org>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Authors:
 *    Rob Clark <robclark@@freedesktop.org>
 */

#include "pipe/p_state.h"
#include "util/u_string.h"
#include "util/u_memory.h"
#include "util/u_inlines.h"

#include "freedreno_texture.h"
#include "freedreno_context.h"
#include "freedreno_util.h"

static void
fd_sampler_state_delete(struct pipe_context *pctx, void *hwcso)
{
	FREE(hwcso);
}

static void
fd_sampler_view_destroy(struct pipe_context *pctx,
		struct pipe_sampler_view *view)
{
	pipe_resource_reference(&view->texture, NULL);
	FREE(view);
}

static void bind_sampler_states(struct fd_texture_stateobj *prog,
		unsigned nr, void **hwcso)
{
	unsigned i;
	unsigned new_nr = 0;

	for (i = 0; i < nr; i++) {
		if (hwcso[i])
			new_nr++;
		prog->samplers[i] = hwcso[i];
		prog->dirty_samplers |= (1 << i);
	}

	for (; i < prog->num_samplers; i++) {
		prog->samplers[i] = NULL;
		prog->dirty_samplers |= (1 << i);
	}

	prog->num_samplers = new_nr;
}

static void set_sampler_views(struct fd_texture_stateobj *prog,
		unsigned nr, struct pipe_sampler_view **views)
{
	unsigned i;
	unsigned new_nr = 0;

	for (i = 0; i < nr; i++) {
		if (views[i])
			new_nr++;
		pipe_sampler_view_reference(&prog->textures[i], views[i]);
		prog->dirty_samplers |= (1 << i);
	}

	for (; i < prog->num_textures; i++) {
		pipe_sampler_view_reference(&prog->textures[i], NULL);
		prog->dirty_samplers |= (1 << i);
	}

	prog->num_textures = new_nr;
}

static void
fd_fragtex_sampler_states_bind(struct pipe_context *pctx,
		unsigned nr, void **hwcso)
{
	struct fd_context *ctx = fd_context(pctx);

	/* on a2xx, since there is a flat address space for textures/samplers,
	 * a change in # of fragment textures/samplers will trigger patching and
	 * re-emitting the vertex shader:
	 */
	if (nr != ctx->fragtex.num_samplers)
		ctx->dirty |= FD_DIRTY_TEXSTATE;

	bind_sampler_states(&ctx->fragtex, nr, hwcso);
	ctx->dirty |= FD_DIRTY_FRAGTEX;
}


static void
fd_fragtex_set_sampler_views(struct pipe_context *pctx, unsigned nr,
		struct pipe_sampler_view **views)
{
	struct fd_context *ctx = fd_context(pctx);

	/* on a2xx, since there is a flat address space for textures/samplers,
	 * a change in # of fragment textures/samplers will trigger patching and
	 * re-emitting the vertex shader:
	 */
	if (nr != ctx->fragtex.num_textures)
		ctx->dirty |= FD_DIRTY_TEXSTATE;

	set_sampler_views(&ctx->fragtex, nr, views);
	ctx->dirty |= FD_DIRTY_FRAGTEX;
}

static void
fd_verttex_sampler_states_bind(struct pipe_context *pctx,
		unsigned nr, void **hwcso)
{
	struct fd_context *ctx = fd_context(pctx);
	bind_sampler_states(&ctx->verttex, nr, hwcso);
	ctx->dirty |= FD_DIRTY_VERTTEX;
}


static void
fd_verttex_set_sampler_views(struct pipe_context *pctx, unsigned nr,
		struct pipe_sampler_view **views)
{
	struct fd_context *ctx = fd_context(pctx);
	set_sampler_views(&ctx->verttex, nr, views);
	ctx->dirty |= FD_DIRTY_VERTTEX;
}

void
fd_texture_init(struct pipe_context *pctx)
{
	pctx->delete_sampler_state = fd_sampler_state_delete;

	pctx->sampler_view_destroy = fd_sampler_view_destroy;

	pctx->bind_fragment_sampler_states = fd_fragtex_sampler_states_bind;
	pctx->set_fragment_sampler_views = fd_fragtex_set_sampler_views;

	pctx->bind_vertex_sampler_states = fd_verttex_sampler_states_bind;
	pctx->set_vertex_sampler_views = fd_verttex_set_sampler_views;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d60 1
a60 1
			new_nr = i + 1;
d81 1
a81 1
			new_nr = i + 1;
d95 1
a95 2
fd_sampler_states_bind(struct pipe_context *pctx,
		unsigned shader, unsigned start,
d100 6
a105 1
	assert(start == 0);
d107 2
a108 15
	if (shader == PIPE_SHADER_FRAGMENT) {
		/* on a2xx, since there is a flat address space for textures/samplers,
		 * a change in # of fragment textures/samplers will trigger patching and
		 * re-emitting the vertex shader:
		 */
		if (nr != ctx->fragtex.num_samplers)
			ctx->dirty |= FD_DIRTY_TEXSTATE;

		bind_sampler_states(&ctx->fragtex, nr, hwcso);
		ctx->dirty |= FD_DIRTY_FRAGTEX;
	}
	else if (shader == PIPE_SHADER_VERTEX) {
		bind_sampler_states(&ctx->verttex, nr, hwcso);
		ctx->dirty |= FD_DIRTY_VERTTEX;
	}
d130 10
a147 18
static void
fd_set_sampler_views(struct pipe_context *pctx, unsigned shader,
                     unsigned start, unsigned nr,
                     struct pipe_sampler_view **views)
{
   assert(start == 0);
   switch (shader) {
   case PIPE_SHADER_FRAGMENT:
      fd_fragtex_set_sampler_views(pctx, nr, views);
      break;
   case PIPE_SHADER_VERTEX:
      fd_verttex_set_sampler_views(pctx, nr, views);
      break;
   default:
      ;
   }
}

d155 5
a159 2
	pctx->bind_sampler_states = fd_sampler_states_bind;
	pctx->set_sampler_views = fd_set_sampler_views;
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d52 1
a52 1
static void bind_sampler_states(struct fd_texture_stateobj *tex,
d61 2
a62 2
		tex->samplers[i] = hwcso[i];
		tex->dirty_samplers |= (1 << i);
d65 3
a67 3
	for (; i < tex->num_samplers; i++) {
		tex->samplers[i] = NULL;
		tex->dirty_samplers |= (1 << i);
d70 1
a70 1
	tex->num_samplers = new_nr;
d73 1
a73 1
static void set_sampler_views(struct fd_texture_stateobj *tex,
d82 2
a83 2
		pipe_sampler_view_reference(&tex->textures[i], views[i]);
		tex->dirty_samplers |= (1 << i);
d86 3
a88 3
	for (; i < tex->num_textures; i++) {
		pipe_sampler_view_reference(&tex->textures[i], NULL);
		tex->dirty_samplers |= (1 << i);
d91 1
a91 1
	tex->num_textures = new_nr;
d94 1
a94 1
void
d104 7
d172 1
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d52 1
a52 1
static void bind_sampler_states(struct fd_texture_stateobj *prog,
d61 2
a62 2
		prog->samplers[i] = hwcso[i];
		prog->dirty_samplers |= (1 << i);
d65 3
a67 3
	for (; i < prog->num_samplers; i++) {
		prog->samplers[i] = NULL;
		prog->dirty_samplers |= (1 << i);
d70 1
a70 1
	prog->num_samplers = new_nr;
d73 1
a73 1
static void set_sampler_views(struct fd_texture_stateobj *prog,
d82 2
a83 2
		pipe_sampler_view_reference(&prog->textures[i], views[i]);
		prog->dirty_samplers |= (1 << i);
d86 3
a88 3
	for (; i < prog->num_textures; i++) {
		pipe_sampler_view_reference(&prog->textures[i], NULL);
		prog->dirty_samplers |= (1 << i);
d91 1
a91 1
	prog->num_textures = new_nr;
d94 1
a94 1
static void
a103 7
		/* on a2xx, since there is a flat address space for textures/samplers,
		 * a change in # of fragment textures/samplers will trigger patching and
		 * re-emitting the vertex shader:
		 */
		if (nr != ctx->fragtex.num_samplers)
			ctx->dirty |= FD_DIRTY_TEXSTATE;

a164 1
	pctx->bind_sampler_states = fd_sampler_states_bind;
@


