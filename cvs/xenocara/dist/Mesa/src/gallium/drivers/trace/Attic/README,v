head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.12
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.10
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.05;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@                             TRACE PIPE DRIVER


= About =

This directory contains a Gallium3D trace debugger pipe driver.
It can traces all incoming calls.


= Usage =

== Tracing ==

For tracing then do

 GALLIUM_TRACE=tri.trace trivial/tri

which should create a tri.trace file, which is an XML file. You can view copying 
trace.xsl to the same directory, and opening with a XSLT capable browser such as 
Firefox or Internet Explorer.

For long traces you can use the

  src/gallium/tools/trace/dump.py tri.trace | less -R


== Remote debugging ==

For remote debugging see:

  src/gallium/drivers/rbug/README


= Integrating =

You can integrate the trace pipe driver either inside the state tracker or the 
target. The procedure on both cases is the same. Let's assume you have a 
pipe_screen obtained by the usual means (variable and function names are just
for illustration purposes):

  real_screen = real_screen_create(...);
  
The trace screen is then created by doing

  trace_screen = trace_screen_create(real_screen);

You can then simply use trace_screen instead of real_screen.

You can create as many contexts you wish from trace_screen::context_create they
are automatically wrapped by trace_screen.


--
Jose Fonseca <jfonseca@@vmware.com>
Jakob Bornecrantz <jakob@@vmware.com>
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d16 1
a16 1
 GALLIUM_TRACE=tri.trace progs/trivial/tri
d21 5
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d6 2
a7 9
This directory contains a Gallium3D debugger pipe driver.
It can traces all incoming calls and/or provide remote debugging functionality.


= Build Instructions =

To build, invoke scons on the top dir as
 
 scons dri=no statetrackers=mesa drivers=softpipe,i965simple,trace winsys=xlib
a11 8
To use do

 export LD_LIBRARY_PATH=$PWD/build/linux-x86-debug/lib

ensure the right libGL.so is being picked by doing

 ldd progs/trivial/tri 

d24 1
a24 1
For remote debugging
d26 1
a26 2
 export XMESA_TRACE=y
 GALLIUM_RBUG=true progs/trivial/tri
a27 3
which should open gallium remote debugging session. While the program is running
you can launch the small remote debugging application from progs/rbug. More
information is in that directory.
d32 3
a34 3
winsys. The procedure on both cases is the same. Let's assume you have a 
pipe_screen and a pipe_context pair obtained by the usual means (variable and 
function names are just for illustration purposes):
d38 1
a38 3
  real_context = real_context_create(...);
  
The trace screen and pipe_context is then created by doing
a40 5
  
  trace_context = trace_context_create(trace_screen, real_context);
  
You can then simply use trace_screen and trace_context instead of real_screen
and real_context.
d42 1
a42 2
Do not call trace_winsys_create. Simply pass trace_screen->winsys or 
trace_context->winsys in places you would pass winsys.
d44 2
a45 2
You can create as many contexts you wish. Just ensure that you don't mistake 
trace_screen with real_screen when creating them.
d49 1
a49 1
Jose Fonseca <jrfonseca@@tungstengraphics.com>
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d6 9
a14 2
This directory contains a Gallium3D trace debugger pipe driver.
It can traces all incoming calls.
d19 8
d39 1
a39 1
For remote debugging see:
d41 2
a42 1
  src/gallium/drivers/rbug/README
d44 3
d51 3
a53 3
target. The procedure on both cases is the same. Let's assume you have a 
pipe_screen obtained by the usual means (variable and function names are just
for illustration purposes):
d57 3
a59 1
The trace screen is then created by doing
d62 5
d68 2
a69 1
You can then simply use trace_screen instead of real_screen.
d71 2
a72 2
You can create as many contexts you wish from trace_screen::context_create they
are automatically wrapped by trace_screen.
d76 1
a76 1
Jose Fonseca <jfonseca@@vmware.com>
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d16 1
a16 1
 GALLIUM_TRACE=tri.trace trivial/tri
a20 5

For long traces you can use the

  src/gallium/tools/trace/dump.py tri.trace | less -R

@


