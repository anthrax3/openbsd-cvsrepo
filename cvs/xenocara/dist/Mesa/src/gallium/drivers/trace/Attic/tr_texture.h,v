head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.14;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.06;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.17;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2008 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#ifndef TR_TEXTURE_H_
#define TR_TEXTURE_H_


#include "pipe/p_compiler.h"
#include "pipe/p_state.h"

#include "tr_screen.h"

struct trace_context;


struct tr_list
{
   struct tr_list *next;
   struct tr_list *prev;
};


struct trace_resource
{
   struct pipe_resource base;

   struct pipe_resource *resource;

   struct tr_list list;
};


struct trace_surface
{
   struct pipe_surface base;

   struct pipe_surface *surface;

   struct tr_list list;
};


struct trace_sampler_view
{
   struct pipe_sampler_view base;

   struct pipe_sampler_view *sampler_view;
};


struct trace_transfer
{
   struct pipe_transfer base;

   struct pipe_transfer *transfer;
   struct pipe_context *pipe;

   struct tr_list list;

   void *map;
};


static INLINE struct trace_resource *
trace_resource(struct pipe_resource *texture)
{
   if(!texture)
      return NULL;
   (void)trace_screen(texture->screen);
   return (struct trace_resource *)texture;
}


static INLINE struct trace_surface *
trace_surface(struct pipe_surface *surface)
{
   if(!surface)
      return NULL;
   (void)trace_resource(surface->texture);
   return (struct trace_surface *)surface;
}


static INLINE struct trace_sampler_view *
trace_sampler_view(struct pipe_sampler_view *sampler_view)
{
   if (!sampler_view)
      return NULL;
   return (struct trace_sampler_view *)sampler_view;
}


static INLINE struct trace_transfer *
trace_transfer(struct pipe_transfer *transfer)
{
   if(!transfer)
      return NULL;
   (void)trace_resource(transfer->resource);
   return (struct trace_transfer *)transfer;
}


struct pipe_resource *
trace_resource_create(struct trace_screen *tr_scr,
                     struct pipe_resource *texture);

void
trace_resource_destroy(struct trace_screen *tr_scr,
		       struct trace_resource *tr_res);

struct pipe_surface *
trace_surf_create(struct trace_context *tr_ctx,
                  struct trace_resource *tr_res,
                  struct pipe_surface *surface);

void
trace_surf_destroy(struct trace_surface *tr_surf);

struct pipe_transfer *
trace_transfer_create(struct trace_context *tr_ctx,
		      struct trace_resource *tr_res,
		      struct pipe_transfer *transfer);

void
trace_transfer_destroy(struct trace_context *tr_ctx,
                       struct trace_transfer *tr_trans);


#endif /* TR_TEXTURE_H_ */
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2008 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d39 8
d136 3
a138 2
trace_surf_create(struct trace_resource *tr_res,
                     struct pipe_surface *surface);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d125 1
a125 1
		       struct trace_resource *tr_tex);
d128 1
a128 1
trace_surf_create(struct trace_resource *tr_tex,
d136 1
a136 1
		      struct trace_resource *tr_tex,
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d37 1
d39 1
a39 1
struct trace_texture
d41 1
a41 1
   struct pipe_texture base;
d43 1
a43 1
   struct pipe_texture *texture;
d59 8
d72 1
d80 2
a81 2
static INLINE struct trace_texture *
trace_texture(struct pipe_texture *texture)
d86 1
a86 1
   return (struct trace_texture *)texture;
d95 1
a95 1
   (void)trace_texture(surface->texture);
d100 9
d114 1
a114 1
   (void)trace_texture(transfer->texture);
d119 3
a121 3
struct pipe_texture *
trace_texture_create(struct trace_screen *tr_scr,
                     struct pipe_texture *texture);
d124 2
a125 1
trace_texture_destroy(struct trace_texture *tr_tex);
d128 1
a128 1
trace_surface_create(struct trace_texture *tr_tex,
d132 1
a132 1
trace_surface_destroy(struct trace_surface *tr_surf);
d135 3
a137 2
trace_transfer_create(struct trace_texture *tr_tex,
                      struct pipe_transfer *transfer);
d140 2
a141 1
trace_transfer_destroy(struct trace_transfer *tr_trans);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a36 1
struct trace_context;
d38 1
a38 1
struct trace_resource
d40 1
a40 1
   struct pipe_resource base;
d42 1
a42 1
   struct pipe_resource *resource;
a57 8
struct trace_sampler_view
{
   struct pipe_sampler_view base;

   struct pipe_sampler_view *sampler_view;
};


a62 1
   struct pipe_context *pipe;
d70 2
a71 2
static INLINE struct trace_resource *
trace_resource(struct pipe_resource *texture)
d76 1
a76 1
   return (struct trace_resource *)texture;
d85 1
a85 1
   (void)trace_resource(surface->texture);
a89 9
static INLINE struct trace_sampler_view *
trace_sampler_view(struct pipe_sampler_view *sampler_view)
{
   if (!sampler_view)
      return NULL;
   return (struct trace_sampler_view *)sampler_view;
}


d95 1
a95 1
   (void)trace_resource(transfer->resource);
d100 3
a102 3
struct pipe_resource *
trace_resource_create(struct trace_screen *tr_scr,
                     struct pipe_resource *texture);
d105 1
a105 2
trace_resource_destroy(struct trace_screen *tr_scr,
		       struct trace_resource *tr_tex);
d108 1
a108 1
trace_surf_create(struct trace_resource *tr_tex,
d112 1
a112 1
trace_surf_destroy(struct trace_surface *tr_surf);
d115 2
a116 3
trace_transfer_create(struct trace_context *tr_ctx,
		      struct trace_resource *tr_tex,
		      struct pipe_transfer *transfer);
d119 1
a119 2
trace_transfer_destroy(struct trace_context *tr_ctx,
                       struct trace_transfer *tr_trans);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a38 8

struct tr_list
{
   struct tr_list *next;
   struct tr_list *prev;
};


d125 1
a125 1
		       struct trace_resource *tr_res);
d128 2
a129 3
trace_surf_create(struct trace_context *tr_ctx,
                  struct trace_resource *tr_res,
                  struct pipe_surface *surface);
d136 1
a136 1
		      struct trace_resource *tr_res,
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2008 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


