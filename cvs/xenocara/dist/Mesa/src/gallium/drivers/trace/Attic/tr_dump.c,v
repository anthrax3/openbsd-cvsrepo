head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.13;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.06;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.17;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2008 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


/**
 * @@file
 * Trace dumping functions.
 *
 * For now we just use standard XML for dumping the trace calls, as this is
 * simple to write, parse, and visually inspect, but the actual representation
 * is abstracted out of this file, so that we can switch to a binary
 * representation if/when it becomes justified.
 *
 * @@author Jose Fonseca <jfonseca@@vmware.com>
 */

#include "pipe/p_config.h"

#include <stdio.h>
#include <stdlib.h>

#include "pipe/p_compiler.h"
#include "os/os_thread.h"
#include "os/os_time.h"
#include "util/u_debug.h"
#include "util/u_memory.h"
#include "util/u_string.h"
#include "util/u_math.h"
#include "util/u_format.h"

#include "tr_dump.h"
#include "tr_screen.h"
#include "tr_texture.h"


static boolean close_stream = FALSE;
static FILE *stream = NULL;
pipe_static_mutex(call_mutex);
static long unsigned call_no = 0;
static boolean dumping = FALSE;


static INLINE void
trace_dump_write(const char *buf, size_t size)
{
   if (stream) {
      fwrite(buf, size, 1, stream);
   }
}


static INLINE void
trace_dump_writes(const char *s)
{
   trace_dump_write(s, strlen(s));
}


static INLINE void
trace_dump_writef(const char *format, ...)
{
   static char buf[1024];
   unsigned len;
   va_list ap;
   va_start(ap, format);
   len = util_vsnprintf(buf, sizeof(buf), format, ap);
   va_end(ap);
   trace_dump_write(buf, len);
}


static INLINE void
trace_dump_escape(const char *str)
{
   const unsigned char *p = (const unsigned char *)str;
   unsigned char c;
   while((c = *p++) != 0) {
      if(c == '<')
         trace_dump_writes("&lt;");
      else if(c == '>')
         trace_dump_writes("&gt;");
      else if(c == '&')
         trace_dump_writes("&amp;");
      else if(c == '\'')
         trace_dump_writes("&apos;");
      else if(c == '\"')
         trace_dump_writes("&quot;");
      else if(c >= 0x20 && c <= 0x7e)
         trace_dump_writef("%c", c);
      else
         trace_dump_writef("&#%u;", c);
   }
}


static INLINE void
trace_dump_indent(unsigned level)
{
   unsigned i;
   for(i = 0; i < level; ++i)
      trace_dump_writes("\t");
}


static INLINE void
trace_dump_newline(void)
{
   trace_dump_writes("\n");
}


static INLINE void
trace_dump_tag(const char *name)
{
   trace_dump_writes("<");
   trace_dump_writes(name);
   trace_dump_writes("/>");
}


static INLINE void
trace_dump_tag_begin(const char *name)
{
   trace_dump_writes("<");
   trace_dump_writes(name);
   trace_dump_writes(">");
}

static INLINE void
trace_dump_tag_begin1(const char *name,
                      const char *attr1, const char *value1)
{
   trace_dump_writes("<");
   trace_dump_writes(name);
   trace_dump_writes(" ");
   trace_dump_writes(attr1);
   trace_dump_writes("='");
   trace_dump_escape(value1);
   trace_dump_writes("'>");
}


static INLINE void
trace_dump_tag_begin2(const char *name,
                      const char *attr1, const char *value1,
                      const char *attr2, const char *value2)
{
   trace_dump_writes("<");
   trace_dump_writes(name);
   trace_dump_writes(" ");
   trace_dump_writes(attr1);
   trace_dump_writes("=\'");
   trace_dump_escape(value1);
   trace_dump_writes("\' ");
   trace_dump_writes(attr2);
   trace_dump_writes("=\'");
   trace_dump_escape(value2);
   trace_dump_writes("\'>");
}


static INLINE void
trace_dump_tag_begin3(const char *name,
                      const char *attr1, const char *value1,
                      const char *attr2, const char *value2,
                      const char *attr3, const char *value3)
{
   trace_dump_writes("<");
   trace_dump_writes(name);
   trace_dump_writes(" ");
   trace_dump_writes(attr1);
   trace_dump_writes("=\'");
   trace_dump_escape(value1);
   trace_dump_writes("\' ");
   trace_dump_writes(attr2);
   trace_dump_writes("=\'");
   trace_dump_escape(value2);
   trace_dump_writes("\' ");
   trace_dump_writes(attr3);
   trace_dump_writes("=\'");
   trace_dump_escape(value3);
   trace_dump_writes("\'>");
}


static INLINE void
trace_dump_tag_end(const char *name)
{
   trace_dump_writes("</");
   trace_dump_writes(name);
   trace_dump_writes(">");
}

void
trace_dump_trace_flush(void)
{
   if(stream) {
      fflush(stream);
   }
}

static void
trace_dump_trace_close(void)
{
   if(stream) {
      trace_dump_writes("</trace>\n");
      if (close_stream) {
         fclose(stream);
         close_stream = FALSE;
         stream = NULL;
      }
      call_no = 0;
   }
}


static void
trace_dump_call_time(int64_t time)
{
   if (stream) {
      trace_dump_indent(2);
      trace_dump_tag_begin("time");
      trace_dump_int(time);
      trace_dump_tag_end("time");
      trace_dump_newline();
   }
}


boolean
trace_dump_trace_begin(void)
{
   const char *filename;

   filename = debug_get_option("GALLIUM_TRACE", NULL);
   if(!filename)
      return FALSE;

   if(!stream) {

      if (strcmp(filename, "stderr") == 0) {
         close_stream = FALSE;
         stream = stderr;
      }
      else if (strcmp(filename, "stdout") == 0) {
         close_stream = FALSE;
         stream = stdout;
      }
      else {
         close_stream = TRUE;
         stream = fopen(filename, "wt");
         if (!stream)
            return FALSE;
      }

      trace_dump_writes("<?xml version='1.0' encoding='UTF-8'?>\n");
      trace_dump_writes("<?xml-stylesheet type='text/xsl' href='trace.xsl'?>\n");
      trace_dump_writes("<trace version='0.1'>\n");

      /* Many applications don't exit cleanly, others may create and destroy a
       * screen multiple times, so we only write </trace> tag and close at exit
       * time.
       */
      atexit(trace_dump_trace_close);
   }

   return TRUE;
}

boolean trace_dump_trace_enabled(void)
{
   return stream ? TRUE : FALSE;
}

/*
 * Call lock
 */

void trace_dump_call_lock(void)
{
   pipe_mutex_lock(call_mutex);
}

void trace_dump_call_unlock(void)
{
   pipe_mutex_unlock(call_mutex);
}

/*
 * Dumping control
 */

void trace_dumping_start_locked(void)
{
   dumping = TRUE;
}

void trace_dumping_stop_locked(void)
{
   dumping = FALSE;
}

boolean trace_dumping_enabled_locked(void)
{
   return dumping;
}

void trace_dumping_start(void)
{
   pipe_mutex_lock(call_mutex);
   trace_dumping_start_locked();
   pipe_mutex_unlock(call_mutex);
}

void trace_dumping_stop(void)
{
   pipe_mutex_lock(call_mutex);
   trace_dumping_stop_locked();
   pipe_mutex_unlock(call_mutex);
}

boolean trace_dumping_enabled(void)
{
   boolean ret;
   pipe_mutex_lock(call_mutex);
   ret = trace_dumping_enabled_locked();
   pipe_mutex_unlock(call_mutex);
   return ret;
}

/*
 * Dump functions
 */

static int64_t call_start_time = 0;

void trace_dump_call_begin_locked(const char *klass, const char *method)
{
   if (!dumping)
      return;

   ++call_no;
   trace_dump_indent(1);
   trace_dump_writes("<call no=\'");
   trace_dump_writef("%lu", call_no);
   trace_dump_writes("\' class=\'");
   trace_dump_escape(klass);
   trace_dump_writes("\' method=\'");
   trace_dump_escape(method);
   trace_dump_writes("\'>");
   trace_dump_newline();

   call_start_time = os_time_get();
}

void trace_dump_call_end_locked(void)
{
   int64_t call_end_time;

   if (!dumping)
      return;

   call_end_time = os_time_get();

   trace_dump_call_time(call_end_time - call_start_time);
   trace_dump_indent(1);
   trace_dump_tag_end("call");
   trace_dump_newline();
   fflush(stream);
}

void trace_dump_call_begin(const char *klass, const char *method)
{
   pipe_mutex_lock(call_mutex);
   trace_dump_call_begin_locked(klass, method);
}

void trace_dump_call_end(void)
{
   trace_dump_call_end_locked();
   pipe_mutex_unlock(call_mutex);
}

void trace_dump_arg_begin(const char *name)
{
   if (!dumping)
      return;

   trace_dump_indent(2);
   trace_dump_tag_begin1("arg", "name", name);
}

void trace_dump_arg_end(void)
{
   if (!dumping)
      return;

   trace_dump_tag_end("arg");
   trace_dump_newline();
}

void trace_dump_ret_begin(void)
{
   if (!dumping)
      return;

   trace_dump_indent(2);
   trace_dump_tag_begin("ret");
}

void trace_dump_ret_end(void)
{
   if (!dumping)
      return;

   trace_dump_tag_end("ret");
   trace_dump_newline();
}

void trace_dump_bool(int value)
{
   if (!dumping)
      return;

   trace_dump_writef("<bool>%c</bool>", value ? '1' : '0');
}

void trace_dump_int(long long int value)
{
   if (!dumping)
      return;

   trace_dump_writef("<int>%lli</int>", value);
}

void trace_dump_uint(long long unsigned value)
{
   if (!dumping)
      return;

   trace_dump_writef("<uint>%llu</uint>", value);
}

void trace_dump_float(double value)
{
   if (!dumping)
      return;

   trace_dump_writef("<float>%g</float>", value);
}

void trace_dump_bytes(const void *data,
                      size_t size)
{
   static const char hex_table[16] = "0123456789ABCDEF";
   const uint8_t *p = data;
   size_t i;

   if (!dumping)
      return;

   trace_dump_writes("<bytes>");
   for(i = 0; i < size; ++i) {
      uint8_t byte = *p++;
      char hex[2];
      hex[0] = hex_table[byte >> 4];
      hex[1] = hex_table[byte & 0xf];
      trace_dump_write(hex, 2);
   }
   trace_dump_writes("</bytes>");
}

void trace_dump_box_bytes(const void *data,
                          struct pipe_resource *resource,
			  const struct pipe_box *box,
			  unsigned stride,
			  unsigned slice_stride)
{
   size_t size;

   /*
    * Only dump buffer transfers to avoid huge files.
    * TODO: Make this run-time configurable
    */
   if (resource->target != PIPE_BUFFER) {
      size = 0;
   } else {
      enum pipe_format format = resource->format;
      if (slice_stride)
         size = box->depth * slice_stride;
      else if (stride)
         size = util_format_get_nblocksy(format, box->height) * stride;
      else {
         size = util_format_get_nblocksx(format, box->width) * util_format_get_blocksize(format);
      }
   }

   trace_dump_bytes(data, size);
}

void trace_dump_string(const char *str)
{
   if (!dumping)
      return;

   trace_dump_writes("<string>");
   trace_dump_escape(str);
   trace_dump_writes("</string>");
}

void trace_dump_enum(const char *value)
{
   if (!dumping)
      return;

   trace_dump_writes("<enum>");
   trace_dump_escape(value);
   trace_dump_writes("</enum>");
}

void trace_dump_array_begin(void)
{
   if (!dumping)
      return;

   trace_dump_writes("<array>");
}

void trace_dump_array_end(void)
{
   if (!dumping)
      return;

   trace_dump_writes("</array>");
}

void trace_dump_elem_begin(void)
{
   if (!dumping)
      return;

   trace_dump_writes("<elem>");
}

void trace_dump_elem_end(void)
{
   if (!dumping)
      return;

   trace_dump_writes("</elem>");
}

void trace_dump_struct_begin(const char *name)
{
   if (!dumping)
      return;

   trace_dump_writef("<struct name='%s'>", name);
}

void trace_dump_struct_end(void)
{
   if (!dumping)
      return;

   trace_dump_writes("</struct>");
}

void trace_dump_member_begin(const char *name)
{
   if (!dumping)
      return;

   trace_dump_writef("<member name='%s'>", name);
}

void trace_dump_member_end(void)
{
   if (!dumping)
      return;

   trace_dump_writes("</member>");
}

void trace_dump_null(void)
{
   if (!dumping)
      return;

   trace_dump_writes("<null/>");
}

void trace_dump_ptr(const void *value)
{
   if (!dumping)
      return;

   if(value)
      trace_dump_writef("<ptr>0x%08lx</ptr>", (unsigned long)(uintptr_t)value);
   else
      trace_dump_null();
}


void trace_dump_resource_ptr(struct pipe_resource *_resource)
{
   if (!dumping)
      return;

   if (_resource) {
      struct trace_resource *tr_resource = trace_resource(_resource);
      trace_dump_ptr(tr_resource->resource);
   } else {
      trace_dump_null();
   }
}

void trace_dump_surface_ptr(struct pipe_surface *_surface)
{
   if (!dumping)
      return;

   if (_surface) {
      struct trace_surface *tr_surf = trace_surface(_surface);
      trace_dump_ptr(tr_surf->surface);
   } else {
      trace_dump_null();
   }
}

void trace_dump_transfer_ptr(struct pipe_transfer *_transfer)
{
   if (!dumping)
      return;

   if (_transfer) {
      struct trace_transfer *tr_tran = trace_transfer(_transfer);
      trace_dump_ptr(tr_tran->transfer);
   } else {
      trace_dump_null();
   }
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2008 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d38 1
a38 1
 * @@author Jose Fonseca <jrfonseca@@tungstengraphics.com>
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d43 1
a43 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE)
a44 1
#endif
d48 1
a48 1
#include "os/os_stream.h"
d60 2
a61 2
static struct os_stream *stream = NULL;
static unsigned refcount = 0;
d70 3
a72 2
   if(stream)
      os_stream_write(stream, buf, size);
d218 8
d231 5
a235 3
      os_stream_close(stream);
      stream = NULL;
      refcount = 0;
d240 16
a255 1
boolean trace_dump_trace_begin()
d265 14
a278 3
      stream = os_file_stream_create(filename);
      if(!stream)
         return FALSE;
d284 4
a287 3
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE)
      /* Linux applications rarely cleanup GL / Gallium resources so catch
       * application exit here */
a288 1
#endif
a290 2
   ++refcount;

a298 7
void trace_dump_trace_end(void)
{
   if(stream)
      if(!--refcount)
         trace_dump_trace_close();
}

d359 2
d376 2
d382 2
d387 3
d393 1
a393 1
   os_stream_flush(stream);
d498 1
a498 1
			  enum pipe_format format,
d505 15
a519 6
   if (slice_stride)
      size = box->depth * slice_stride;
   else if (stride)
      size = util_format_get_nblocksy(format, box->height) * stride;
   else {
      size = util_format_get_nblocksx(format, box->width) * util_format_get_blocksize(format);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d63 1
a63 1
static pipe_mutex call_mutex;
a65 1
static boolean initialized = FALSE;
a226 1
      pipe_mutex_destroy(call_mutex);
a229 10
void trace_dump_init()
{
   if (initialized)
      return;

   pipe_mutex_init(call_mutex);
   dumping = FALSE;
   initialized = TRUE;
}

a232 2

   assert(initialized);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d53 2
a58 1
#include "tr_buffer.h"
d475 19
a596 12
void trace_dump_buffer_ptr(struct pipe_buffer *_buffer)
{
   if (!dumping)
      return;

   if (_buffer) {
      struct trace_buffer *tr_buf = trace_buffer(_buffer);
      trace_dump_ptr(tr_buf->buffer);
   } else {
      trace_dump_null();
   }
}
d598 1
a598 1
void trace_dump_texture_ptr(struct pipe_texture *_texture)
d603 3
a605 3
   if (_texture) {
      struct trace_texture *tr_tex = trace_texture(_texture);
      trace_dump_ptr(tr_tex->texture);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a52 2
#include "util/u_math.h"
#include "util/u_format.h"
d57 1
a473 19
void trace_dump_box_bytes(const void *data,
			  enum pipe_format format,
			  const struct pipe_box *box,
			  unsigned stride,
			  unsigned slice_stride)
{
   size_t size;

   if (slice_stride)
      size = box->depth * slice_stride;
   else if (stride)
      size = util_format_get_nblocksy(format, box->height) * stride;
   else {
      size = util_format_get_nblocksx(format, box->width) * util_format_get_blocksize(format);
   }

   trace_dump_bytes(data, size);
}

d577 12
d590 1
a590 1
void trace_dump_resource_ptr(struct pipe_resource *_resource)
d595 3
a597 3
   if (_resource) {
      struct trace_resource *tr_resource = trace_resource(_resource);
      trace_dump_ptr(tr_resource->resource);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d43 1
a43 1
#include <stdio.h>
d45 1
d49 1
a49 1
#include "os/os_time.h"
d61 3
a63 3
static boolean close_stream = FALSE;
static FILE *stream = NULL;
pipe_static_mutex(call_mutex);
d66 1
d72 2
a73 3
   if (stream) {
      fwrite(buf, size, 1, stream);
   }
a218 8
void
trace_dump_trace_flush(void)
{
   if(stream) {
      fflush(stream);
   }
}

d224 3
a226 5
      if (close_stream) {
         fclose(stream);
         close_stream = FALSE;
         stream = NULL;
      }
d228 1
d232 4
d237 3
a239 10
static void
trace_dump_call_time(int64_t time)
{
   if (stream) {
      trace_dump_indent(2);
      trace_dump_tag_begin("time");
      trace_dump_int(time);
      trace_dump_tag_end("time");
      trace_dump_newline();
   }
d242 1
a242 3

boolean
trace_dump_trace_begin(void)
d246 2
d254 3
a256 14
      if (strcmp(filename, "stderr") == 0) {
         close_stream = FALSE;
         stream = stderr;
      }
      else if (strcmp(filename, "stdout") == 0) {
         close_stream = FALSE;
         stream = stdout;
      }
      else {
         close_stream = TRUE;
         stream = fopen(filename, "wt");
         if (!stream)
            return FALSE;
      }
d262 3
a264 4
      /* Many applications don't exit cleanly, others may create and destroy a
       * screen multiple times, so we only write </trace> tag and close at exit
       * time.
       */
d266 1
d269 2
d279 7
a345 2
static int64_t call_start_time = 0;

a360 2

   call_start_time = os_time_get();
a364 2
   int64_t call_end_time;

a367 3
   call_end_time = os_time_get();

   trace_dump_call_time(call_end_time - call_start_time);
d371 1
a371 1
   fflush(stream);
d476 1
a476 1
                          struct pipe_resource *resource,
d483 6
a488 15
   /*
    * Only dump buffer transfers to avoid huge files.
    * TODO: Make this run-time configurable
    */
   if (resource->target != PIPE_BUFFER) {
      size = 0;
   } else {
      enum pipe_format format = resource->format;
      if (slice_stride)
         size = box->depth * slice_stride;
      else if (stride)
         size = util_format_get_nblocksy(format, box->height) * stride;
      else {
         size = util_format_get_nblocksx(format, box->width) * util_format_get_blocksize(format);
      }
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2008 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d38 1
a38 1
 * @@author Jose Fonseca <jfonseca@@vmware.com>
@


