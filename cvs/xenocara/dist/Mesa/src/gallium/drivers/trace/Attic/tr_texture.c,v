head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.14;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.06;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.17;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2008 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#include "util/u_inlines.h"
#include "util/u_hash_table.h"
#include "util/u_memory.h"
#include "util/u_simple_list.h"

#include "tr_screen.h"
#include "tr_context.h"
#include "tr_texture.h"


struct pipe_resource *
trace_resource_create(struct trace_screen *tr_scr,
                     struct pipe_resource *texture)
{
   struct trace_resource *tr_res;

   if(!texture)
      goto error;

   assert(texture->screen == tr_scr->screen);

   tr_res = CALLOC_STRUCT(trace_resource);
   if(!tr_res)
      goto error;

   memcpy(&tr_res->base, texture, sizeof(struct pipe_resource));

   pipe_reference_init(&tr_res->base.reference, 1);
   tr_res->base.screen = &tr_scr->base;
   tr_res->resource = texture;

   return &tr_res->base;

error:
   pipe_resource_reference(&texture, NULL);
   return NULL;
}


void
trace_resource_destroy(struct trace_screen *tr_scr,
		       struct trace_resource *tr_res)
{
   pipe_resource_reference(&tr_res->resource, NULL);
   FREE(tr_res);
}


struct pipe_surface *
trace_surf_create(struct trace_context *tr_ctx,
                  struct trace_resource *tr_res,
                  struct pipe_surface *surface)
{
   struct trace_surface *tr_surf;

   if(!surface)
      goto error;

   assert(surface->texture == tr_res->resource);

   tr_surf = CALLOC_STRUCT(trace_surface);
   if(!tr_surf)
      goto error;

   memcpy(&tr_surf->base, surface, sizeof(struct pipe_surface));
   tr_surf->base.context = &tr_ctx->base;

   pipe_reference_init(&tr_surf->base.reference, 1);
   tr_surf->base.texture = NULL;
   pipe_resource_reference(&tr_surf->base.texture, &tr_res->base);
   tr_surf->surface = surface;

   return &tr_surf->base;

error:
   pipe_surface_reference(&surface, NULL);
   return NULL;
}


void
trace_surf_destroy(struct trace_surface *tr_surf)
{
   trace_context_check(tr_surf->base.context);
   pipe_resource_reference(&tr_surf->base.texture, NULL);
   pipe_surface_reference(&tr_surf->surface, NULL);
   FREE(tr_surf);
}


struct pipe_transfer *
trace_transfer_create(struct trace_context *tr_ctx,
		      struct trace_resource *tr_res,
		      struct pipe_transfer *transfer)
{
   struct trace_transfer *tr_trans;

   if(!transfer)
      goto error;

   assert(transfer->resource == tr_res->resource);

   tr_trans = CALLOC_STRUCT(trace_transfer);
   if(!tr_trans)
      goto error;

   memcpy(&tr_trans->base, transfer, sizeof(struct pipe_transfer));

   tr_trans->base.resource = NULL;
   tr_trans->transfer = transfer;

   pipe_resource_reference(&tr_trans->base.resource, &tr_res->base);
   assert(tr_trans->base.resource == &tr_res->base);

   return &tr_trans->base;

error:
   tr_ctx->pipe->transfer_unmap(tr_ctx->pipe, transfer);
   return NULL;
}


void
trace_transfer_destroy(struct trace_context *tr_context,
                       struct trace_transfer *tr_trans)
{
   pipe_resource_reference(&tr_trans->base.resource, NULL);
   FREE(tr_trans);
}

@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2008 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d77 2
a78 1
trace_surf_create(struct trace_resource *tr_res,
d93 1
d111 1
d145 1
a145 1
   tr_ctx->pipe->transfer_destroy(tr_ctx->pipe, transfer);
a153 3
   struct pipe_context *context = tr_context->pipe;
   struct pipe_transfer *transfer = tr_trans->transfer;

a154 1
   context->transfer_destroy(context, transfer);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d42 1
a42 1
   struct trace_resource *tr_tex;
d49 2
a50 2
   tr_tex = CALLOC_STRUCT(trace_resource);
   if(!tr_tex)
d53 1
a53 1
   memcpy(&tr_tex->base, texture, sizeof(struct pipe_resource));
d55 3
a57 3
   pipe_reference_init(&tr_tex->base.reference, 1);
   tr_tex->base.screen = &tr_scr->base;
   tr_tex->resource = texture;
d59 1
a59 1
   return &tr_tex->base;
d69 1
a69 1
		       struct trace_resource *tr_tex)
d71 2
a72 2
   pipe_resource_reference(&tr_tex->resource, NULL);
   FREE(tr_tex);
d77 1
a77 1
trace_surf_create(struct trace_resource *tr_tex,
d85 1
a85 1
   assert(surface->texture == tr_tex->resource);
d95 1
a95 1
   pipe_resource_reference(&tr_surf->base.texture, &tr_tex->base);
d117 1
a117 1
		      struct trace_resource *tr_tex,
d125 1
a125 1
   assert(transfer->resource == tr_tex->resource);
d136 2
a137 2
   pipe_resource_reference(&tr_trans->base.resource, &tr_tex->base);
   assert(tr_trans->base.resource == &tr_tex->base);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d34 1
d38 3
a40 3
struct pipe_texture *
trace_texture_create(struct trace_screen *tr_scr,
                     struct pipe_texture *texture)
d42 1
a42 1
   struct trace_texture *tr_tex;
d49 1
a49 1
   tr_tex = CALLOC_STRUCT(trace_texture);
d53 1
a53 1
   memcpy(&tr_tex->base, texture, sizeof(struct pipe_texture));
d57 1
a57 3
   tr_tex->texture = texture;

   trace_screen_add_to_list(tr_scr, textures, tr_tex);
d62 1
a62 1
   pipe_texture_reference(&texture, NULL);
d68 2
a69 1
trace_texture_destroy(struct trace_texture *tr_tex)
d71 1
a71 5
   struct trace_screen *tr_scr = trace_screen(tr_tex->base.screen);

   trace_screen_remove_from_list(tr_scr, textures, tr_tex);

   pipe_texture_reference(&tr_tex->texture, NULL);
d77 2
a78 2
trace_surface_create(struct trace_texture *tr_tex,
                     struct pipe_surface *surface)
a79 1
   struct trace_screen *tr_scr = trace_screen(tr_tex->base.screen);
d85 1
a85 1
   assert(surface->texture == tr_tex->texture);
d95 1
a95 1
   pipe_texture_reference(&tr_surf->base.texture, &tr_tex->base);
a97 2
   trace_screen_add_to_list(tr_scr, surfaces, tr_surf);

d107 1
a107 1
trace_surface_destroy(struct trace_surface *tr_surf)
d109 1
a109 5
   struct trace_screen *tr_scr = trace_screen(tr_surf->base.texture->screen);

   trace_screen_remove_from_list(tr_scr, surfaces, tr_surf);

   pipe_texture_reference(&tr_surf->base.texture, NULL);
d116 3
a118 2
trace_transfer_create(struct trace_texture *tr_tex,
                     struct pipe_transfer *transfer)
a119 1
   struct trace_screen *tr_scr = trace_screen(tr_tex->base.screen);
d125 1
a125 1
   assert(transfer->texture == tr_tex->texture);
d133 1
a133 2
   tr_trans->base.texture = NULL;
   pipe_texture_reference(&tr_trans->base.texture, &tr_tex->base);
a134 1
   assert(tr_trans->base.texture == &tr_tex->base);
d136 2
a137 1
   trace_screen_add_to_list(tr_scr, transfers, tr_trans);
d142 1
a142 1
   transfer->texture->screen->tex_transfer_destroy(transfer);
d148 2
a149 1
trace_transfer_destroy(struct trace_transfer *tr_trans)
d151 2
a152 4
   struct trace_screen *tr_scr = trace_screen(tr_trans->base.texture->screen);
   struct pipe_screen *screen = tr_trans->transfer->texture->screen;

   trace_screen_remove_from_list(tr_scr, transfers, tr_trans);
d154 2
a155 2
   pipe_texture_reference(&tr_trans->base.texture, NULL);
   screen->tex_transfer_destroy(tr_trans->transfer);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a33 1
#include "tr_context.h"
d37 3
a39 3
struct pipe_resource *
trace_resource_create(struct trace_screen *tr_scr,
                     struct pipe_resource *texture)
d41 1
a41 1
   struct trace_resource *tr_tex;
d48 1
a48 1
   tr_tex = CALLOC_STRUCT(trace_resource);
d52 1
a52 1
   memcpy(&tr_tex->base, texture, sizeof(struct pipe_resource));
d56 3
a58 1
   tr_tex->resource = texture;
d63 1
a63 1
   pipe_resource_reference(&texture, NULL);
d69 1
a69 2
trace_resource_destroy(struct trace_screen *tr_scr,
		       struct trace_resource *tr_tex)
d71 5
a75 1
   pipe_resource_reference(&tr_tex->resource, NULL);
d81 2
a82 2
trace_surf_create(struct trace_resource *tr_tex,
                  struct pipe_surface *surface)
d84 1
d90 1
a90 1
   assert(surface->texture == tr_tex->resource);
d100 1
a100 1
   pipe_resource_reference(&tr_surf->base.texture, &tr_tex->base);
d103 2
d114 1
a114 1
trace_surf_destroy(struct trace_surface *tr_surf)
d116 5
a120 1
   pipe_resource_reference(&tr_surf->base.texture, NULL);
d127 2
a128 3
trace_transfer_create(struct trace_context *tr_ctx,
		      struct trace_resource *tr_tex,
		      struct pipe_transfer *transfer)
d130 1
d136 1
a136 1
   assert(transfer->resource == tr_tex->resource);
d144 2
a145 1
   tr_trans->base.resource = NULL;
d147 1
d149 1
a149 2
   pipe_resource_reference(&tr_trans->base.resource, &tr_tex->base);
   assert(tr_trans->base.resource == &tr_tex->base);
d154 1
a154 1
   tr_ctx->pipe->transfer_destroy(tr_ctx->pipe, transfer);
d160 1
a160 2
trace_transfer_destroy(struct trace_context *tr_context,
                       struct trace_transfer *tr_trans)
d162 4
a165 2
   struct pipe_context *context = tr_context->pipe;
   struct pipe_transfer *transfer = tr_trans->transfer;
d167 2
a168 2
   pipe_resource_reference(&tr_trans->base.resource, NULL);
   context->transfer_destroy(context, transfer);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d42 1
a42 1
   struct trace_resource *tr_res;
d49 2
a50 2
   tr_res = CALLOC_STRUCT(trace_resource);
   if(!tr_res)
d53 1
a53 1
   memcpy(&tr_res->base, texture, sizeof(struct pipe_resource));
d55 3
a57 3
   pipe_reference_init(&tr_res->base.reference, 1);
   tr_res->base.screen = &tr_scr->base;
   tr_res->resource = texture;
d59 1
a59 1
   return &tr_res->base;
d69 1
a69 1
		       struct trace_resource *tr_res)
d71 2
a72 2
   pipe_resource_reference(&tr_res->resource, NULL);
   FREE(tr_res);
d77 1
a77 2
trace_surf_create(struct trace_context *tr_ctx,
                  struct trace_resource *tr_res,
d85 1
a85 1
   assert(surface->texture == tr_res->resource);
a91 1
   tr_surf->base.context = &tr_ctx->base;
d95 1
a95 1
   pipe_resource_reference(&tr_surf->base.texture, &tr_res->base);
a108 1
   trace_context_check(tr_surf->base.context);
d117 1
a117 1
		      struct trace_resource *tr_res,
d125 1
a125 1
   assert(transfer->resource == tr_res->resource);
d136 2
a137 2
   pipe_resource_reference(&tr_trans->base.resource, &tr_res->base);
   assert(tr_trans->base.resource == &tr_res->base);
d142 1
a142 1
   tr_ctx->pipe->transfer_unmap(tr_ctx->pipe, transfer);
d151 3
d155 1
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2008 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


