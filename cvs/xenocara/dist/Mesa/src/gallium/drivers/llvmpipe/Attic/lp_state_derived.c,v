head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.00.34;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.28;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.58;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#include "util/u_math.h"
#include "util/u_memory.h"
#include "pipe/p_shader_tokens.h"
#include "draw/draw_context.h"
#include "draw/draw_vertex.h"
#include "draw/draw_private.h"
#include "lp_context.h"
#include "lp_screen.h"
#include "lp_setup.h"
#include "lp_state.h"



/**
 * The vertex info describes how to convert the post-transformed vertices
 * (simple float[][4]) used by the 'draw' module into vertices for
 * rasterization.
 *
 * This function validates the vertex layout.
 */
static void
compute_vertex_info(struct llvmpipe_context *llvmpipe)
{
   const struct lp_fragment_shader *lpfs = llvmpipe->fs;
   struct vertex_info *vinfo = &llvmpipe->vertex_info;
   int vs_index;
   uint i;

   draw_prepare_shader_outputs(llvmpipe->draw);

   llvmpipe->color_slot[0] = -1;
   llvmpipe->color_slot[1] = -1;
   llvmpipe->bcolor_slot[0] = -1;
   llvmpipe->bcolor_slot[1] = -1;

   /*
    * Match FS inputs against VS outputs, emitting the necessary
    * attributes.  Could cache these structs and look them up with a
    * combination of fragment shader, vertex shader ids.
    */

   vinfo->num_attribs = 0;

   vs_index = draw_find_shader_output(llvmpipe->draw,
                                      TGSI_SEMANTIC_POSITION,
                                      0);

   draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_PERSPECTIVE, vs_index);

   for (i = 0; i < lpfs->info.base.num_inputs; i++) {
      /*
       * Search for each input in current vs output:
       */

      vs_index = draw_find_shader_output(llvmpipe->draw,
                                         lpfs->info.base.input_semantic_name[i],
                                         lpfs->info.base.input_semantic_index[i]);

      if (lpfs->info.base.input_semantic_name[i] == TGSI_SEMANTIC_COLOR &&
          lpfs->info.base.input_semantic_index[i] < 2) {
         int idx = lpfs->info.base.input_semantic_index[i];
         llvmpipe->color_slot[idx] = (int)vinfo->num_attribs;
      }

      if (lpfs->info.base.input_semantic_name[i] == TGSI_SEMANTIC_FACE) {
         llvmpipe->face_slot = vinfo->num_attribs;
         draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_CONSTANT, vs_index);
      } else if (lpfs->info.base.input_semantic_name[i] == TGSI_SEMANTIC_PRIMID) {
         draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_CONSTANT, vs_index);
      } else {
         /*
          * Emit the requested fs attribute for all but position.
          */
         draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_PERSPECTIVE, vs_index);
      }
   }
   /* Figure out if we need bcolor as well.
    */
   for (i = 0; i < 2; i++) {
      vs_index = draw_find_shader_output(llvmpipe->draw,
                                         TGSI_SEMANTIC_BCOLOR, i);

      if (vs_index >= 0) {
         llvmpipe->bcolor_slot[i] = (int)vinfo->num_attribs;
         draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_PERSPECTIVE, vs_index);
      }
   }


   /* Figure out if we need pointsize as well.
    */
   vs_index = draw_find_shader_output(llvmpipe->draw,
                                      TGSI_SEMANTIC_PSIZE, 0);

   if (vs_index >= 0) {
      llvmpipe->psize_slot = vinfo->num_attribs;
      draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_CONSTANT, vs_index);
   }

   /* Figure out if we need viewport index */
   vs_index = draw_find_shader_output(llvmpipe->draw,
                                      TGSI_SEMANTIC_VIEWPORT_INDEX,
                                      0);
   if (vs_index >= 0) {
      llvmpipe->viewport_index_slot = vinfo->num_attribs;
      draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_CONSTANT, vs_index);
   } else {
      llvmpipe->viewport_index_slot = 0;
   }

   /* Figure out if we need layer */
   vs_index = draw_find_shader_output(llvmpipe->draw,
                                      TGSI_SEMANTIC_LAYER,
                                      0);
   if (vs_index >= 0) {
      llvmpipe->layer_slot = vinfo->num_attribs;
      draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_CONSTANT, vs_index);
   } else {
      llvmpipe->layer_slot = 0;
   }

   draw_compute_vertex_size(vinfo);
   lp_setup_set_vertex_info(llvmpipe->setup, vinfo);
}


/**
 * Handle state changes.
 * Called just prior to drawing anything (pipe::draw_arrays(), etc).
 *
 * Hopefully this will remain quite simple, otherwise need to pull in
 * something like the state tracker mechanism.
 */
void llvmpipe_update_derived( struct llvmpipe_context *llvmpipe )
{
   struct llvmpipe_screen *lp_screen = llvmpipe_screen(llvmpipe->pipe.screen);

   /* Check for updated textures.
    */
   if (llvmpipe->tex_timestamp != lp_screen->timestamp) {
      llvmpipe->tex_timestamp = lp_screen->timestamp;
      llvmpipe->dirty |= LP_NEW_SAMPLER_VIEW;
   }
      
   if (llvmpipe->dirty & (LP_NEW_RASTERIZER |
                          LP_NEW_FS |
                          LP_NEW_VS))
      compute_vertex_info( llvmpipe );

   if (llvmpipe->dirty & (LP_NEW_FS |
                          LP_NEW_FRAMEBUFFER |
                          LP_NEW_BLEND |
                          LP_NEW_SCISSOR |
                          LP_NEW_DEPTH_STENCIL_ALPHA |
                          LP_NEW_RASTERIZER |
                          LP_NEW_SAMPLER |
                          LP_NEW_SAMPLER_VIEW |
                          LP_NEW_OCCLUSION_QUERY))
      llvmpipe_update_fs( llvmpipe );

   if (llvmpipe->dirty & (LP_NEW_RASTERIZER)) {
      boolean discard =
         (llvmpipe->sample_mask & 1) == 0 ||
         (llvmpipe->rasterizer ? llvmpipe->rasterizer->rasterizer_discard : FALSE);

      lp_setup_set_rasterizer_discard(llvmpipe->setup, discard);
   }

   if (llvmpipe->dirty & (LP_NEW_FS |
                          LP_NEW_FRAMEBUFFER |
                          LP_NEW_RASTERIZER))
      llvmpipe_update_setup( llvmpipe );

   if (llvmpipe->dirty & LP_NEW_BLEND_COLOR)
      lp_setup_set_blend_color(llvmpipe->setup,
                               &llvmpipe->blend_color);

   if (llvmpipe->dirty & LP_NEW_SCISSOR)
      lp_setup_set_scissors(llvmpipe->setup, llvmpipe->scissors);

   if (llvmpipe->dirty & LP_NEW_DEPTH_STENCIL_ALPHA) {
      lp_setup_set_alpha_ref_value(llvmpipe->setup, 
                                   llvmpipe->depth_stencil->alpha.ref_value);
      lp_setup_set_stencil_ref_values(llvmpipe->setup,
                                      llvmpipe->stencil_ref.ref_value);
   }

   if (llvmpipe->dirty & LP_NEW_CONSTANTS)
      lp_setup_set_fs_constants(llvmpipe->setup,
                                Elements(llvmpipe->constants[PIPE_SHADER_FRAGMENT]),
                                llvmpipe->constants[PIPE_SHADER_FRAGMENT]);

   if (llvmpipe->dirty & (LP_NEW_SAMPLER_VIEW))
      lp_setup_set_fragment_sampler_views(llvmpipe->setup,
                                          llvmpipe->num_sampler_views[PIPE_SHADER_FRAGMENT],
                                          llvmpipe->sampler_views[PIPE_SHADER_FRAGMENT]);

   if (llvmpipe->dirty & (LP_NEW_SAMPLER))
      lp_setup_set_fragment_sampler_state(llvmpipe->setup,
                                          llvmpipe->num_samplers[PIPE_SHADER_FRAGMENT],
                                          llvmpipe->samplers[PIPE_SHADER_FRAGMENT]);

   if (llvmpipe->dirty & LP_NEW_VIEWPORT) {
      /*
       * Update setup and fragment's view of the active viewport state.
       *
       * XXX TODO: It is possible to only loop over the active viewports
       *           instead of all viewports (PIPE_MAX_VIEWPORTS).
       */
      lp_setup_set_viewports(llvmpipe->setup,
                             PIPE_MAX_VIEWPORTS,
                             llvmpipe->viewports);
   }

   llvmpipe->dirty = 0;
}

@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d56 2
d72 2
a73 2
                                       TGSI_SEMANTIC_POSITION,
                                       0);
d92 11
a102 4
      /*
       * Emit the requested fs attribute for all but position.
       */
      draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_PERSPECTIVE, vs_index);
a103 1

a148 1

d188 8
d197 2
a198 1
			  LP_NEW_RASTERIZER))
d229 12
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d53 1
a53 1
   unsigned vs_index;
d56 4
a59 4
   llvmpipe->color_slot[0] = ~0;
   llvmpipe->color_slot[1] = ~0;
   llvmpipe->bcolor_slot[0] = ~0;
   llvmpipe->bcolor_slot[1] = ~0;
d87 1
a87 1
         llvmpipe->color_slot[idx] = vinfo->num_attribs;
d102 2
a103 2
      if (vs_index > 0) {
         llvmpipe->bcolor_slot[i] = vinfo->num_attribs;
d114 1
a114 1
   if (vs_index > 0) {
d119 23
d171 1
d178 1
a178 1
                          LP_NEW_QUERY))
d190 1
a190 1
      lp_setup_set_scissor(llvmpipe->setup, &llvmpipe->scissor);
d200 3
a202 2
      lp_setup_set_fs_constants(llvmpipe->setup, 
                                llvmpipe->constants[PIPE_SHADER_FRAGMENT][0]);
d206 2
a207 2
                                          llvmpipe->num_fragment_sampler_views,
                                          llvmpipe->fragment_sampler_views);
d211 2
a212 2
                                          llvmpipe->num_samplers,
                                          llvmpipe->sampler);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d53 1
a53 1
   const uint num = draw_num_shader_outputs(llvmpipe->draw);
d56 9
a64 4
   /* Tell setup to tell the draw module to simply emit the whole
    * post-xform vertex as-is.
    *
    * Not really sure if this is the best approach.
d66 1
a67 4
   for (i = 0; i < num; i++) {
      draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_PERSPECTIVE, i);
   }
   draw_compute_vertex_size(vinfo);
d69 20
d90 5
a94 1
   lp_setup_set_vertex_info(llvmpipe->setup, vinfo);
d96 1
a96 9
/*
   llvmpipe->psize_slot = draw_find_vs_output(llvmpipe->draw,
                                              TGSI_SEMANTIC_PSIZE, 0);
*/

   /* Now match FS inputs against emitted vertex data.  It's also
    * entirely possible to just have a fixed layout for FS input,
    * determined by the fragment shader itself, and adjust the draw
    * outputs to match that.
d98 9
a106 2
   {
      struct lp_shader_input inputs[PIPE_MAX_SHADER_INPUTS];
a107 1
      for (i = 0; i < lpfs->info.num_inputs; i++) {
d109 4
a112 45
         /* This can be precomputed, except for flatshade:
          */
         switch (lpfs->info.input_semantic_name[i]) {
         case TGSI_SEMANTIC_FACE:
            inputs[i].interp = LP_INTERP_FACING;
            break;
         case TGSI_SEMANTIC_POSITION:
            inputs[i].interp = LP_INTERP_POSITION;
            break;
         case TGSI_SEMANTIC_COLOR:
            /* Colors are linearly interpolated in the fragment shader
             * even when flatshading is active.  This just tells the
             * setup module to use coefficients with ddx==0 and
             * ddy==0.
             */
            if (llvmpipe->rasterizer->flatshade)
               inputs[i].interp = LP_INTERP_CONSTANT;
            else
               inputs[i].interp = LP_INTERP_LINEAR;
            break;

         default:
            switch (lpfs->info.input_interpolate[i]) {
            case TGSI_INTERPOLATE_CONSTANT:
               inputs[i].interp = LP_INTERP_CONSTANT;
               break;
            case TGSI_INTERPOLATE_LINEAR:
               inputs[i].interp = LP_INTERP_LINEAR;
               break;
            case TGSI_INTERPOLATE_PERSPECTIVE:
               inputs[i].interp = LP_INTERP_PERSPECTIVE;
               break;
            default:
               assert(0);
               break;
            }
         }

         /* Search for each input in current vs output:
          */
         inputs[i].src_index = 
            draw_find_shader_output(llvmpipe->draw,
                                    lpfs->info.input_semantic_name[i],
                                    lpfs->info.input_semantic_index[i]);
      }
d114 3
a116 3
      lp_setup_set_fs_inputs(llvmpipe->setup, 
                             inputs,
                             lpfs->info.num_inputs);
d118 3
d139 1
a139 1
      llvmpipe->dirty |= LP_NEW_TEXTURE;
d153 2
a154 1
                          LP_NEW_TEXTURE))
d157 4
d168 1
a168 1
   if (llvmpipe->dirty & LP_NEW_DEPTH_STENCIL_ALPHA)
d171 3
d177 1
a177 1
                                llvmpipe->constants[PIPE_SHADER_FRAGMENT]);
d179 9
a187 4
   if (llvmpipe->dirty & LP_NEW_TEXTURE)
      lp_setup_set_sampler_textures(llvmpipe->setup, 
                                    llvmpipe->num_textures,
                                    llvmpipe->texture);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d53 1
a53 1
   unsigned vs_index;
d56 4
a59 9
   llvmpipe->color_slot[0] = ~0;
   llvmpipe->color_slot[1] = ~0;
   llvmpipe->bcolor_slot[0] = ~0;
   llvmpipe->bcolor_slot[1] = ~0;

   /*
    * Match FS inputs against VS outputs, emitting the necessary
    * attributes.  Could cache these structs and look them up with a
    * combination of fragment shader, vertex shader ids.
a60 1

d62 4
a66 20
   vs_index = draw_find_shader_output(llvmpipe->draw,
                                       TGSI_SEMANTIC_POSITION,
                                       0);

   draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_PERSPECTIVE, vs_index);

   for (i = 0; i < lpfs->info.base.num_inputs; i++) {
      /*
       * Search for each input in current vs output:
       */

      vs_index = draw_find_shader_output(llvmpipe->draw,
                                         lpfs->info.base.input_semantic_name[i],
                                         lpfs->info.base.input_semantic_index[i]);

      if (lpfs->info.base.input_semantic_name[i] == TGSI_SEMANTIC_COLOR &&
          lpfs->info.base.input_semantic_index[i] < 2) {
         int idx = lpfs->info.base.input_semantic_index[i];
         llvmpipe->color_slot[idx] = vinfo->num_attribs;
      }
d68 1
a68 5
      /*
       * Emit the requested fs attribute for all but position.
       */
      draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_PERSPECTIVE, vs_index);
   }
d70 9
a78 1
   /* Figure out if we need bcolor as well.
d80 2
a81 9
   for (i = 0; i < 2; i++) {
      vs_index = draw_find_shader_output(llvmpipe->draw,
                                         TGSI_SEMANTIC_BCOLOR, i);

      if (vs_index > 0) {
         llvmpipe->bcolor_slot[i] = vinfo->num_attribs;
         draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_PERSPECTIVE, vs_index);
      }
   }
d83 1
d85 45
a129 4
   /* Figure out if we need pointsize as well.
    */
   vs_index = draw_find_shader_output(llvmpipe->draw,
                                      TGSI_SEMANTIC_PSIZE, 0);
d131 3
a133 3
   if (vs_index > 0) {
      llvmpipe->psize_slot = vinfo->num_attribs;
      draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_CONSTANT, vs_index);
a134 3

   draw_compute_vertex_size(vinfo);
   lp_setup_set_vertex_info(llvmpipe->setup, vinfo);
d153 1
a153 1
      llvmpipe->dirty |= LP_NEW_SAMPLER_VIEW;
d167 1
a167 2
                          LP_NEW_SAMPLER_VIEW |
                          LP_NEW_QUERY))
a169 4
   if (llvmpipe->dirty & (LP_NEW_FS |
			  LP_NEW_RASTERIZER))
      llvmpipe_update_setup( llvmpipe );

d177 1
a177 1
   if (llvmpipe->dirty & LP_NEW_DEPTH_STENCIL_ALPHA) {
a179 3
      lp_setup_set_stencil_ref_values(llvmpipe->setup,
                                      llvmpipe->stencil_ref.ref_value);
   }
d183 1
a183 1
                                llvmpipe->constants[PIPE_SHADER_FRAGMENT][0]);
d185 4
a188 9
   if (llvmpipe->dirty & (LP_NEW_SAMPLER_VIEW))
      lp_setup_set_fragment_sampler_views(llvmpipe->setup,
                                          llvmpipe->num_fragment_sampler_views,
                                          llvmpipe->fragment_sampler_views);

   if (llvmpipe->dirty & (LP_NEW_SAMPLER))
      lp_setup_set_fragment_sampler_state(llvmpipe->setup,
                                          llvmpipe->num_samplers,
                                          llvmpipe->sampler);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d53 1
a53 1
   int vs_index;
d56 4
a59 4
   llvmpipe->color_slot[0] = -1;
   llvmpipe->color_slot[1] = -1;
   llvmpipe->bcolor_slot[0] = -1;
   llvmpipe->bcolor_slot[1] = -1;
d87 1
a87 1
         llvmpipe->color_slot[idx] = (int)vinfo->num_attribs;
d102 2
a103 2
      if (vs_index >= 0) {
         llvmpipe->bcolor_slot[i] = (int)vinfo->num_attribs;
d114 1
a114 1
   if (vs_index >= 0) {
a118 23
   /* Figure out if we need viewport index */
   vs_index = draw_find_shader_output(llvmpipe->draw,
                                      TGSI_SEMANTIC_VIEWPORT_INDEX,
                                      0);
   if (vs_index >= 0) {
      llvmpipe->viewport_index_slot = vinfo->num_attribs;
      draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_CONSTANT, vs_index);
   } else {
      llvmpipe->viewport_index_slot = 0;
   }

   /* Figure out if we need layer */
   vs_index = draw_find_shader_output(llvmpipe->draw,
                                      TGSI_SEMANTIC_LAYER,
                                      0);
   if (vs_index >= 0) {
      llvmpipe->layer_slot = vinfo->num_attribs;
      draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_CONSTANT, vs_index);
   } else {
      llvmpipe->layer_slot = 0;
   }


a147 1
                          LP_NEW_FRAMEBUFFER |
d154 1
a154 1
                          LP_NEW_OCCLUSION_QUERY))
d166 1
a166 1
      lp_setup_set_scissors(llvmpipe->setup, llvmpipe->scissors);
d176 2
a177 3
      lp_setup_set_fs_constants(llvmpipe->setup,
                                Elements(llvmpipe->constants[PIPE_SHADER_FRAGMENT]),
                                llvmpipe->constants[PIPE_SHADER_FRAGMENT]);
d181 2
a182 2
                                          llvmpipe->num_sampler_views[PIPE_SHADER_FRAGMENT],
                                          llvmpipe->sampler_views[PIPE_SHADER_FRAGMENT]);
d186 2
a187 2
                                          llvmpipe->num_samplers[PIPE_SHADER_FRAGMENT],
                                          llvmpipe->samplers[PIPE_SHADER_FRAGMENT]);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
a55 2
   draw_prepare_shader_outputs(llvmpipe->draw);

d70 2
a71 2
                                      TGSI_SEMANTIC_POSITION,
                                      0);
d90 4
a93 11
      if (lpfs->info.base.input_semantic_name[i] == TGSI_SEMANTIC_FACE) {
         llvmpipe->face_slot = vinfo->num_attribs;
         draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_CONSTANT, vs_index);
      } else if (lpfs->info.base.input_semantic_name[i] == TGSI_SEMANTIC_PRIMID) {
         draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_CONSTANT, vs_index);
      } else {
         /*
          * Emit the requested fs attribute for all but position.
          */
         draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_PERSPECTIVE, vs_index);
      }
d95 1
d141 1
a180 8
   if (llvmpipe->dirty & (LP_NEW_RASTERIZER)) {
      boolean discard =
         (llvmpipe->sample_mask & 1) == 0 ||
         (llvmpipe->rasterizer ? llvmpipe->rasterizer->rasterizer_discard : FALSE);

      lp_setup_set_rasterizer_discard(llvmpipe->setup, discard);
   }

d182 1
a182 2
                          LP_NEW_FRAMEBUFFER |
                          LP_NEW_RASTERIZER))
a212 12

   if (llvmpipe->dirty & LP_NEW_VIEWPORT) {
      /*
       * Update setup and fragment's view of the active viewport state.
       *
       * XXX TODO: It is possible to only loop over the active viewports
       *           instead of all viewports (PIPE_MAX_VIEWPORTS).
       */
      lp_setup_set_viewports(llvmpipe->setup,
                             PIPE_MAX_VIEWPORTS,
                             llvmpipe->viewports);
   }
@


