head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.52;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.31;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.24;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.55;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.07.25;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.44.32;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@from sys import executable as python_cmd
import distutils.version

Import('*')

if not env['llvm']:
    print 'warning: LLVM disabled: not building llvmpipe'
    Return()

env = env.Clone()

llvmpipe = env.ConvenienceLibrary(
	target = 'llvmpipe',
	source = env.ParseSourceList('Makefile.sources', 'C_SOURCES')
	)

env.Alias('llvmpipe', llvmpipe)


if not env['embedded']:
    env = env.Clone()

    env.Prepend(LIBS = [llvmpipe] + gallium)

    tests = [
        'format',
        'blend',
        'conv',
        'printf',
    ]

    if not env['msvc']:
        tests.append('arit')

    for test in tests:
        testname = 'lp_test_' + test
        target = env.Program(
            target = testname,
            source = [testname + '.c', 'lp_test_main.c'],
        )
        env.InstallProgram(target)
        
        # http://www.scons.org/wiki/UnitTests
        alias = env.Alias(testname, [target], target[0].abspath)
        AlwaysBuild(alias)

Export('llvmpipe')
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d23 1
a23 1
    env.Prepend(LIBS = [llvmpipe, gallium, mesautil])
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d23 1
a23 1
    env.Prepend(LIBS = [llvmpipe] + gallium)
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d14 2
a15 43
	source = [
		'lp_bld_alpha.c',
		'lp_bld_blend.c',
		'lp_bld_blend_aos.c',
		'lp_bld_blend_logicop.c',
		'lp_bld_depth.c',
		'lp_bld_interp.c',
		'lp_clear.c',
		'lp_context.c',
		'lp_draw_arrays.c',
		'lp_fence.c',
		'lp_flush.c',
		'lp_jit.c',
		'lp_memory.c',
		'lp_perf.c',
		'lp_query.c',
		'lp_rast.c',
		'lp_rast_debug.c',
		'lp_rast_tri.c',
		'lp_scene.c',
		'lp_scene_queue.c',
		'lp_screen.c',
		'lp_setup.c',
		'lp_setup_line.c',
		'lp_setup_point.c',
		'lp_setup_tri.c',
		'lp_setup_vbuf.c',
		'lp_state_blend.c',
		'lp_state_clip.c',
		'lp_state_derived.c',
		'lp_state_fs.c',
		'lp_state_setup.c',
		'lp_state_gs.c',
		'lp_state_rasterizer.c',
		'lp_state_sampler.c',
                'lp_state_so.c',
		'lp_state_surface.c',
		'lp_state_vertex.c',
		'lp_state_vs.c',
		'lp_surface.c',
		'lp_tex_sample.c',
		'lp_texture.c'
	])
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a11 19
env.Append(CPPPATH = ['.'])

env.CodeGenerate(
	target = 'lp_tile_soa.c',
	script = 'lp_tile_soa.py',
	source = ['#src/gallium/auxiliary/util/u_format.csv'],
	command = python_cmd + ' $SCRIPT $SOURCE > $TARGET'
)

# XXX: Our dependency scanner only finds depended modules in relative dirs.
env.Depends('lp_tile_soa.c', [
    '#src/gallium/auxiliary/util/u_format_parse.py', 
    '#src/gallium/auxiliary/util/u_format_pack.py', 
])


lp_tile_soa_os = env.SharedObject('lp_tile_soa.c')


d16 1
a18 1
		'lp_bld_blend_soa.c',
d55 1
a55 3
		'lp_texture.c',
		'lp_tile_image.c',
        lp_tile_soa_os,
d70 1
a70 2
	'printf',
	'sincos',
d74 1
a74 1
        tests.append('round')
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d82 1
a82 1
if env['platform'] != 'embedded':
d99 1
d101 2
a102 2
            target = 'lp_test_' + test,
            source = ['lp_test_' + test + '.c', 'lp_test_main.c'],
d105 4
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d1 3
d6 2
a7 5
env = env.Clone()

env.Tool('llvm')
if not env.has_key('LLVM_VERSION'):
    print 'warning: LLVM not found: not building llvmpipe'
d10 1
a10 1
env.Tool('udis86')
d18 1
a18 1
	command = 'python $SCRIPT $SOURCE > $TARGET'
a24 1
    '#src/gallium/auxiliary/util/u_format_access.py',
d27 4
d34 6
a39 1
		'lp_buffer.c',
d46 1
d50 1
d64 2
d68 1
d73 1
a73 1
		'lp_tex_sample_llvm.c',
d76 1
a76 1
		'lp_tile_soa.c',
d79 2
d91 2
d95 3
d105 1
a105 1
    Export('llvmpipe')
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d1 1
a1 2
from sys import executable as python_cmd
import distutils.version
d3 1
a3 1
Import('*')
d5 3
a7 2
if not env['llvm']:
    print 'warning: LLVM disabled: not building llvmpipe'
d10 1
a10 1
env = env.Clone()
d18 1
a18 1
	command = python_cmd + ' $SCRIPT $SOURCE > $TARGET'
d25 1
a27 4

lp_tile_soa_os = env.SharedObject('lp_tile_soa.c')


d31 1
a31 6
		'lp_bld_alpha.c',
		'lp_bld_blend_aos.c',
		'lp_bld_blend_logicop.c',
		'lp_bld_blend_soa.c',
		'lp_bld_depth.c',
		'lp_bld_interp.c',
a37 1
		'lp_memory.c',
a40 1
		'lp_rast_debug.c',
a53 2
		'lp_state_setup.c',
		'lp_state_gs.c',
a55 1
                'lp_state_so.c',
d60 1
a60 1
		'lp_tex_sample.c',
d63 1
a63 1
        lp_tile_soa_os,
a65 2
env.Alias('llvmpipe', llvmpipe)

a75 2
	'printf',
	'sincos',
a77 3
    if not env['msvc']:
        tests.append('round')

d85 1
a85 1
Export('llvmpipe')
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d12 19
a34 1
		'lp_bld_blend.c',
d37 1
d74 3
a76 1
		'lp_texture.c'
d82 1
a82 1
if not env['embedded']:
d91 2
a92 1
        'printf',
d96 1
a96 1
        tests.append('arit')
a98 1
        testname = 'lp_test_' + test
d100 2
a101 2
            target = testname,
            source = [testname + '.c', 'lp_test_main.c'],
a103 4
        
        # http://www.scons.org/wiki/UnitTests
        alias = env.Alias(testname, [target], target[0].abspath)
        AlwaysBuild(alias)
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d14 43
a56 2
	source = env.ParseSourceList('Makefile.sources', 'C_SOURCES')
	)
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d23 1
a23 1
    env.Prepend(LIBS = [llvmpipe, gallium, mesautil])
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d23 1
a23 1
    env.Prepend(LIBS = [llvmpipe] + gallium)
@


