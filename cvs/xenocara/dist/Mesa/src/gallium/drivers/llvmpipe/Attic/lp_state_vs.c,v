head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.33.59;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2009 VMware, Inc.
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/


#include "pipe/p_defines.h"
#include "tgsi/tgsi_dump.h"
#include "tgsi/tgsi_parse.h"
#include "util/u_memory.h"
#include "draw/draw_context.h"

#include "lp_context.h"
#include "lp_debug.h"
#include "lp_state.h"


static void *
llvmpipe_create_vs_state(struct pipe_context *pipe,
                         const struct pipe_shader_state *templ)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);
   struct draw_vertex_shader *vs;

   vs = draw_create_vertex_shader(llvmpipe->draw, templ);
   if (vs == NULL) {
      return NULL;
   }

   if (LP_DEBUG & DEBUG_TGSI) {
      debug_printf("llvmpipe: Create vertex shader %p:\n", (void *) vs);
      tgsi_dump(templ->tokens, 0);
   }

   return vs;
}


static void
llvmpipe_bind_vs_state(struct pipe_context *pipe, void *_vs)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);
   struct draw_vertex_shader *vs = (struct draw_vertex_shader *)_vs;

   if (llvmpipe->vs == vs)
      return;

   draw_bind_vertex_shader(llvmpipe->draw, vs);

   llvmpipe->vs = vs;

   llvmpipe->dirty |= LP_NEW_VS;
}


static void
llvmpipe_delete_vs_state(struct pipe_context *pipe, void *_vs)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);
   struct draw_vertex_shader *vs = (struct draw_vertex_shader *)_vs;

   draw_delete_vertex_shader(llvmpipe->draw, vs);
}



void
llvmpipe_init_vs_funcs(struct llvmpipe_context *llvmpipe)
{
   llvmpipe->pipe.create_vs_state = llvmpipe_create_vs_state;
   llvmpipe->pipe.bind_vs_state   = llvmpipe_bind_vs_state;
   llvmpipe->pipe.delete_vs_state = llvmpipe_delete_vs_state;
}
@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d4 1
a4 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d22 1
a22 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d46 1
a46 1
   struct lp_vertex_shader *state;
d48 4
a51 13
   state = CALLOC_STRUCT(lp_vertex_shader);
   if (state == NULL ) 
      goto fail;

   /* copy shader tokens, the ones passed in will go away.
    */
   state->shader.tokens = tgsi_dup_tokens(templ->tokens);
   if (state->shader.tokens == NULL)
      goto fail;

   state->draw_data = draw_create_vertex_shader(llvmpipe->draw, templ);
   if (state->draw_data == NULL) 
      goto fail;
d54 1
a54 1
      debug_printf("llvmpipe: Create vertex shader %p:\n", (void *) state);
d58 1
a58 9
   return state;

fail:
   if (state) {
      FREE( (void *)state->shader.tokens );
      FREE( state->draw_data );
      FREE( state );
   }
   return NULL;
d66 1
a66 1
   const struct lp_vertex_shader *vs = (const struct lp_vertex_shader *)_vs;
d71 1
a71 2
   draw_bind_vertex_shader(llvmpipe->draw, 
                           vs ? vs->draw_data : NULL);
d80 1
a80 1
llvmpipe_delete_vs_state(struct pipe_context *pipe, void *vs)
d83 1
d85 1
a85 6
   struct lp_vertex_shader *state =
      (struct lp_vertex_shader *)vs;

   draw_delete_vertex_shader(llvmpipe->draw, state->draw_data);
   FREE( (void *)state->shader.tokens );
   FREE( state );
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d31 1
d37 1
d41 1
a41 1
void *
d62 5
d79 1
a79 1
void
d97 1
a97 1
void
d108 10
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a30 1
#include "tgsi/tgsi_dump.h"
a35 1
#include "lp_debug.h"
d39 1
a39 1
static void *
a59 5
   if (LP_DEBUG & DEBUG_TGSI) {
      debug_printf("llvmpipe: Create vertex shader %p:\n", (void *) state);
      tgsi_dump(templ->tokens, 0);
   }

d72 1
a72 1
static void
d90 1
a90 1
static void
a100 10
}



void
llvmpipe_init_vs_funcs(struct llvmpipe_context *llvmpipe)
{
   llvmpipe->pipe.create_vs_state = llvmpipe_create_vs_state;
   llvmpipe->pipe.bind_vs_state   = llvmpipe_bind_vs_state;
   llvmpipe->pipe.delete_vs_state = llvmpipe_delete_vs_state;
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d4 1
a4 1
 * Copyright 2007 VMware, Inc.
d22 1
a22 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d46 1
a46 1
   struct draw_vertex_shader *vs;
d48 13
a60 4
   vs = draw_create_vertex_shader(llvmpipe->draw, templ);
   if (vs == NULL) {
      return NULL;
   }
d63 1
a63 1
      debug_printf("llvmpipe: Create vertex shader %p:\n", (void *) vs);
d67 9
a75 1
   return vs;
d83 1
a83 1
   struct draw_vertex_shader *vs = (struct draw_vertex_shader *)_vs;
d88 2
a89 1
   draw_bind_vertex_shader(llvmpipe->draw, vs);
d98 1
a98 1
llvmpipe_delete_vs_state(struct pipe_context *pipe, void *_vs)
a100 1
   struct draw_vertex_shader *vs = (struct draw_vertex_shader *)_vs;
d102 6
a107 1
   draw_delete_vertex_shader(llvmpipe->draw, vs);
@


