head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.33.58;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2009 VMware, Inc.
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/**
 * @@author Jose Fonseca <jfonseca@@vmware.com>
 * @@author Keith Whitwell <keithw@@vmware.com>
 */

#include "util/u_memory.h"
#include "util/u_math.h"
#include "util/u_dump.h"
#include "draw/draw_context.h"
#include "lp_screen.h"
#include "lp_context.h"
#include "lp_state.h"
#include "lp_debug.h"


static void *
llvmpipe_create_blend_state(struct pipe_context *pipe,
                            const struct pipe_blend_state *blend)
{
   struct pipe_blend_state *state = mem_dup(blend, sizeof *blend);
   int i;

   if (LP_PERF & PERF_NO_BLEND) {
      state->independent_blend_enable = 0;
      for (i = 0; i < PIPE_MAX_COLOR_BUFS; i++)
	 state->rt[i].blend_enable = 0;
   }

   return state;
}


static void
llvmpipe_bind_blend_state(struct pipe_context *pipe, void *blend)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);

   if (llvmpipe->blend == blend)
      return;

   draw_flush(llvmpipe->draw);

   llvmpipe->blend = blend;

   llvmpipe->dirty |= LP_NEW_BLEND;
}


static void
llvmpipe_delete_blend_state(struct pipe_context *pipe, void *blend)
{
   FREE( blend );
}


static void
llvmpipe_set_blend_color(struct pipe_context *pipe,
                         const struct pipe_blend_color *blend_color)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);

   if(!blend_color)
      return;

   if(memcmp(&llvmpipe->blend_color, blend_color, sizeof *blend_color) == 0)
      return;

   draw_flush(llvmpipe->draw);

   memcpy(&llvmpipe->blend_color, blend_color, sizeof *blend_color);

   llvmpipe->dirty |= LP_NEW_BLEND_COLOR;
}


/** XXX move someday?  Or consolidate all these simple state setters
 * into one file.
 */


static void *
llvmpipe_create_depth_stencil_state(struct pipe_context *pipe,
				    const struct pipe_depth_stencil_alpha_state *depth_stencil)
{
   struct pipe_depth_stencil_alpha_state *state;

   state = mem_dup(depth_stencil, sizeof *depth_stencil);

   if (LP_PERF & PERF_NO_DEPTH) {
      state->depth.enabled = 0;
      state->depth.writemask = 0;
      state->stencil[0].enabled = 0;
      state->stencil[1].enabled = 0;
   }

   if (LP_PERF & PERF_NO_ALPHATEST) {
      state->alpha.enabled = 0;
   }

   return state;
}


static void
llvmpipe_bind_depth_stencil_state(struct pipe_context *pipe,
                                  void *depth_stencil)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);

   if (llvmpipe->depth_stencil == depth_stencil)
      return;

   draw_flush(llvmpipe->draw);

   llvmpipe->depth_stencil = depth_stencil;

   llvmpipe->dirty |= LP_NEW_DEPTH_STENCIL_ALPHA;
}


static void
llvmpipe_delete_depth_stencil_state(struct pipe_context *pipe, void *depth)
{
   FREE( depth );
}


static void
llvmpipe_set_stencil_ref(struct pipe_context *pipe,
                         const struct pipe_stencil_ref *stencil_ref)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);

   if(!stencil_ref)
      return;

   if(memcmp(&llvmpipe->stencil_ref, stencil_ref, sizeof *stencil_ref) == 0)
      return;

   draw_flush(llvmpipe->draw);

   memcpy(&llvmpipe->stencil_ref, stencil_ref, sizeof *stencil_ref);

   /* not sure. want new flag? */
   llvmpipe->dirty |= LP_NEW_DEPTH_STENCIL_ALPHA;
}

static void
llvmpipe_set_sample_mask(struct pipe_context *pipe,
                         unsigned sample_mask)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);

   if (sample_mask != llvmpipe->sample_mask) {
      llvmpipe->sample_mask = sample_mask;

      llvmpipe->dirty |= LP_NEW_RASTERIZER;
   }
}

void
llvmpipe_init_blend_funcs(struct llvmpipe_context *llvmpipe)
{
   llvmpipe->pipe.create_blend_state = llvmpipe_create_blend_state;
   llvmpipe->pipe.bind_blend_state   = llvmpipe_bind_blend_state;
   llvmpipe->pipe.delete_blend_state = llvmpipe_delete_blend_state;

   llvmpipe->pipe.create_depth_stencil_alpha_state = llvmpipe_create_depth_stencil_state;
   llvmpipe->pipe.bind_depth_stencil_alpha_state   = llvmpipe_bind_depth_stencil_state;
   llvmpipe->pipe.delete_depth_stencil_alpha_state = llvmpipe_delete_depth_stencil_state;

   llvmpipe->pipe.set_blend_color = llvmpipe_set_blend_color;

   llvmpipe->pipe.set_stencil_ref = llvmpipe_set_stencil_ref;
   llvmpipe->pipe.set_sample_mask = llvmpipe_set_sample_mask;

   llvmpipe->sample_mask = ~0;
}
@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d4 1
a4 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d22 1
a22 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d31 1
a31 1
 * @@author Keith Whitwell <keith@@tungstengraphics.com>
d180 7
d204 2
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d41 1
d44 1
a44 1
void *
d48 10
a57 1
   return mem_dup(blend, sizeof(*blend));
d60 3
a62 2
void llvmpipe_bind_blend_state( struct pipe_context *pipe,
                                void *blend )
d76 3
a78 2
void llvmpipe_delete_blend_state(struct pipe_context *pipe,
                                 void *blend)
d84 3
a86 2
void llvmpipe_set_blend_color( struct pipe_context *pipe,
			     const struct pipe_blend_color *blend_color )
d109 1
a109 1
void *
d113 16
a128 1
   return mem_dup(depth_stencil, sizeof(*depth_stencil));
d131 2
a132 1
void
d148 2
a149 1
void
d155 4
a158 2
void llvmpipe_set_stencil_ref( struct pipe_context *pipe,
                               const struct pipe_stencil_ref *stencil_ref )
d176 16
d193 5
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a40 1
#include "lp_debug.h"
d43 1
a43 1
static void *
d47 1
a47 10
   struct pipe_blend_state *state = mem_dup(blend, sizeof *blend);
   int i;

   if (LP_PERF & PERF_NO_BLEND) {
      state->independent_blend_enable = 0;
      for (i = 0; i < PIPE_MAX_COLOR_BUFS; i++)
	 state->rt[i].blend_enable = 0;
   }

   return state;
d50 2
a51 3

static void
llvmpipe_bind_blend_state(struct pipe_context *pipe, void *blend)
d65 2
a66 3

static void
llvmpipe_delete_blend_state(struct pipe_context *pipe, void *blend)
d72 2
a73 3
static void
llvmpipe_set_blend_color(struct pipe_context *pipe,
                         const struct pipe_blend_color *blend_color)
d96 1
a96 1
static void *
d100 1
a100 16
   struct pipe_depth_stencil_alpha_state *state;

   state = mem_dup(depth_stencil, sizeof *depth_stencil);

   if (LP_PERF & PERF_NO_DEPTH) {
      state->depth.enabled = 0;
      state->depth.writemask = 0;
      state->stencil[0].enabled = 0;
      state->stencil[1].enabled = 0;
   }

   if (LP_PERF & PERF_NO_ALPHATEST) {
      state->alpha.enabled = 0;
   }

   return state;
d103 1
a103 2

static void
d119 1
a119 2

static void
d125 2
a126 4

static void
llvmpipe_set_stencil_ref(struct pipe_context *pipe,
                         const struct pipe_stencil_ref *stencil_ref)
a143 16
static void
llvmpipe_set_sample_mask(struct pipe_context *pipe,
                         unsigned sample_mask)
{
}

void
llvmpipe_init_blend_funcs(struct llvmpipe_context *llvmpipe)
{
   llvmpipe->pipe.create_blend_state = llvmpipe_create_blend_state;
   llvmpipe->pipe.bind_blend_state   = llvmpipe_bind_blend_state;
   llvmpipe->pipe.delete_blend_state = llvmpipe_delete_blend_state;

   llvmpipe->pipe.create_depth_stencil_alpha_state = llvmpipe_create_depth_stencil_state;
   llvmpipe->pipe.bind_depth_stencil_alpha_state   = llvmpipe_bind_depth_stencil_state;
   llvmpipe->pipe.delete_depth_stencil_alpha_state = llvmpipe_delete_depth_stencil_state;
a144 5
   llvmpipe->pipe.set_blend_color = llvmpipe_set_blend_color;

   llvmpipe->pipe.set_stencil_ref = llvmpipe_set_stencil_ref;
   llvmpipe->pipe.set_sample_mask = llvmpipe_set_sample_mask;
}
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d4 1
a4 1
 * Copyright 2007 VMware, Inc.
d22 1
a22 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d31 1
a31 1
 * @@author Keith Whitwell <keithw@@vmware.com>
a179 7
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);

   if (sample_mask != llvmpipe->sample_mask) {
      llvmpipe->sample_mask = sample_mask;

      llvmpipe->dirty |= LP_NEW_RASTERIZER;
   }
a196 2

   llvmpipe->sample_mask = ~0;
@


