head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.02.20.23.09.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	4ry2gvZGMXkCUD2n;

1.4
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.3;
commitid	mcxB0JvoI9gTDYXU;

1.3
date	2013.09.05.14.00.35;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.31;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2015.01.25.14.07.32;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.44.40;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


/**
 * @@file
 * Unit tests for type conversion.
 *
 * @@author Jose Fonseca <jfonseca@@vmware.com>
 */


#include "util/u_pointer.h"
#include "gallivm/lp_bld_init.h"
#include "gallivm/lp_bld_type.h"
#include "gallivm/lp_bld_const.h"
#include "gallivm/lp_bld_conv.h"
#include "gallivm/lp_bld_debug.h"
#include "lp_test.h"


typedef void (*conv_test_ptr_t)(const void *src, const void *dst);


void
write_tsv_header(FILE *fp)
{
   fprintf(fp,
           "result\t"
           "cycles_per_channel\t"
           "src_type\t"
           "dst_type\n");

   fflush(fp);
}


static void
write_tsv_row(FILE *fp,
              struct lp_type src_type,
              struct lp_type dst_type,
              double cycles,
              boolean success)
{
   fprintf(fp, "%s\t", success ? "pass" : "fail");

   fprintf(fp, "%.1f\t", cycles / MAX2(src_type.length, dst_type.length));

   dump_type(fp, src_type);
   fprintf(fp, "\t");

   dump_type(fp, dst_type);
   fprintf(fp, "\n");

   fflush(fp);
}


static void
dump_conv_types(FILE *fp,
               struct lp_type src_type,
               struct lp_type dst_type)
{
   fprintf(fp, "src_type=");
   dump_type(fp, src_type);

   fprintf(fp, " dst_type=");
   dump_type(fp, dst_type);

   fprintf(fp, " ...\n");
   fflush(fp);
}


static LLVMValueRef
add_conv_test(struct gallivm_state *gallivm,
              struct lp_type src_type, unsigned num_srcs,
              struct lp_type dst_type, unsigned num_dsts)
{
   LLVMModuleRef module = gallivm->module;
   LLVMContextRef context = gallivm->context;
   LLVMBuilderRef builder = gallivm->builder;
   LLVMTypeRef args[2];
   LLVMValueRef func;
   LLVMValueRef src_ptr;
   LLVMValueRef dst_ptr;
   LLVMBasicBlockRef block;
   LLVMValueRef src[LP_MAX_VECTOR_LENGTH];
   LLVMValueRef dst[LP_MAX_VECTOR_LENGTH];
   unsigned i;

   args[0] = LLVMPointerType(lp_build_vec_type(gallivm, src_type), 0);
   args[1] = LLVMPointerType(lp_build_vec_type(gallivm, dst_type), 0);

   func = LLVMAddFunction(module, "test",
                          LLVMFunctionType(LLVMVoidTypeInContext(context),
                                           args, 2, 0));
   LLVMSetFunctionCallConv(func, LLVMCCallConv);
   src_ptr = LLVMGetParam(func, 0);
   dst_ptr = LLVMGetParam(func, 1);

   block = LLVMAppendBasicBlockInContext(context, func, "entry");
   LLVMPositionBuilderAtEnd(builder, block);

   for(i = 0; i < num_srcs; ++i) {
      LLVMValueRef index = LLVMConstInt(LLVMInt32TypeInContext(context), i, 0);
      LLVMValueRef ptr = LLVMBuildGEP(builder, src_ptr, &index, 1, "");
      src[i] = LLVMBuildLoad(builder, ptr, "");
   }

   lp_build_conv(gallivm, src_type, dst_type, src, num_srcs, dst, num_dsts);

   for(i = 0; i < num_dsts; ++i) {
      LLVMValueRef index = LLVMConstInt(LLVMInt32TypeInContext(context), i, 0);
      LLVMValueRef ptr = LLVMBuildGEP(builder, dst_ptr, &index, 1, "");
      LLVMBuildStore(builder, dst[i], ptr);
   }

   LLVMBuildRetVoid(builder);;

   gallivm_verify_function(gallivm, func);

   return func;
}


PIPE_ALIGN_STACK
static boolean
test_one(unsigned verbose,
         FILE *fp,
         struct lp_type src_type,
         struct lp_type dst_type)
{
   struct gallivm_state *gallivm;
   LLVMValueRef func = NULL;
   conv_test_ptr_t conv_test_ptr;
   boolean success;
   const unsigned n = LP_TEST_NUM_SAMPLES;
   int64_t cycles[LP_TEST_NUM_SAMPLES];
   double cycles_avg = 0.0;
   unsigned num_srcs;
   unsigned num_dsts;
   double eps;
   unsigned i, j;

   if ((src_type.width >= dst_type.width && src_type.length > dst_type.length) ||
       (src_type.width <= dst_type.width && src_type.length < dst_type.length)) {
      return TRUE;
   }

   /* Known failures
    * - fixed point 32 -> float 32
    * - float 32 -> signed normalised integer 32
    */
   if ((src_type.floating && !dst_type.floating && dst_type.sign && dst_type.norm && src_type.width == dst_type.width) ||
       (!src_type.floating && dst_type.floating && src_type.fixed && src_type.width == dst_type.width)) {
      return TRUE;
   }

   /* Known failures
    * - fixed point 32 -> float 32
    * - float 32 -> signed normalised integer 32
    */
   if ((src_type.floating && !dst_type.floating && dst_type.sign && dst_type.norm && src_type.width == dst_type.width) ||
       (!src_type.floating && dst_type.floating && src_type.fixed && src_type.width == dst_type.width)) {
      return TRUE;
   }

   if(verbose >= 1)
      dump_conv_types(stderr, src_type, dst_type);

   if (src_type.length > dst_type.length) {
      num_srcs = 1;
      num_dsts = src_type.length/dst_type.length;
   }
   else if (src_type.length < dst_type.length) {
      num_dsts = 1;
      num_srcs = dst_type.length/src_type.length;
   }
   else  {
      num_dsts = 1;
      num_srcs = 1;
   }

   /* We must not loose or gain channels. Only precision */
   assert(src_type.length * num_srcs == dst_type.length * num_dsts);

   eps = MAX2(lp_const_eps(src_type), lp_const_eps(dst_type));

   gallivm = gallivm_create();

   func = add_conv_test(gallivm, src_type, num_srcs, dst_type, num_dsts);

   gallivm_compile_module(gallivm);

   conv_test_ptr = (conv_test_ptr_t)gallivm_jit_function(gallivm, func);

   success = TRUE;
   for(i = 0; i < n && success; ++i) {
      unsigned src_stride = src_type.length*src_type.width/8;
      unsigned dst_stride = dst_type.length*dst_type.width/8;
      PIPE_ALIGN_VAR(LP_MIN_VECTOR_ALIGN) uint8_t src[LP_MAX_VECTOR_LENGTH*LP_MAX_VECTOR_LENGTH];
      PIPE_ALIGN_VAR(LP_MIN_VECTOR_ALIGN) uint8_t dst[LP_MAX_VECTOR_LENGTH*LP_MAX_VECTOR_LENGTH];
      double fref[LP_MAX_VECTOR_LENGTH*LP_MAX_VECTOR_LENGTH];
      uint8_t ref[LP_MAX_VECTOR_LENGTH*LP_MAX_VECTOR_LENGTH];
      int64_t start_counter = 0;
      int64_t end_counter = 0;

      for(j = 0; j < num_srcs; ++j) {
         random_vec(src_type, src + j*src_stride);
         read_vec(src_type, src + j*src_stride, fref + j*src_type.length);
      }

      for(j = 0; j < num_dsts; ++j) {
         write_vec(dst_type, ref + j*dst_stride, fref + j*dst_type.length);
      }

      start_counter = rdtsc();
      conv_test_ptr(src, dst);
      end_counter = rdtsc();

      cycles[i] = end_counter - start_counter;

      for(j = 0; j < num_dsts; ++j) {
         if(!compare_vec_with_eps(dst_type, dst + j*dst_stride, ref + j*dst_stride, eps))
            success = FALSE;
      }

      if (!success || verbose >= 3) {
         if(verbose < 1)
            dump_conv_types(stderr, src_type, dst_type);
         if (success) {
            fprintf(stderr, "PASS\n");
         }
         else {
            fprintf(stderr, "MISMATCH\n");
         }

         for(j = 0; j < num_srcs; ++j) {
            fprintf(stderr, "  Src%u: ", j);
            dump_vec(stderr, src_type, src + j*src_stride);
            fprintf(stderr, "\n");
         }

#if 1
         fprintf(stderr, "  Ref: ");
         for(j = 0; j < src_type.length*num_srcs; ++j)
            fprintf(stderr, " %f", fref[j]);
         fprintf(stderr, "\n");
#endif

         for(j = 0; j < num_dsts; ++j) {
            fprintf(stderr, "  Dst%u: ", j);
            dump_vec(stderr, dst_type, dst + j*dst_stride);
            fprintf(stderr, "\n");

            fprintf(stderr, "  Ref%u: ", j);
            dump_vec(stderr, dst_type, ref + j*dst_stride);
            fprintf(stderr, "\n");
         }
      }
   }

   /*
    * Unfortunately the output of cycle counter is not very reliable as it comes
    * -- sometimes we get outliers (due IRQs perhaps?) which are
    * better removed to avoid random or biased data.
    */
   {
      double sum = 0.0, sum2 = 0.0;
      double avg, std;
      unsigned m;

      for(i = 0; i < n; ++i) {
         sum += cycles[i];
         sum2 += cycles[i]*cycles[i];
      }

      avg = sum/n;
      std = sqrtf((sum2 - n*avg*avg)/n);

      m = 0;
      sum = 0.0;
      for(i = 0; i < n; ++i) {
         if(fabs(cycles[i] - avg) <= 4.0*std) {
            sum += cycles[i];
            ++m;
         }
      }

      cycles_avg = sum/m;

   }

   if(fp)
      write_tsv_row(fp, src_type, dst_type, cycles_avg, success);

   gallivm_free_function(gallivm, func, conv_test_ptr);

   gallivm_destroy(gallivm);

   return success;
}


const struct lp_type conv_types[] = {
   /* float, fixed,  sign,  norm, width, len */

   /* Float */
   {   TRUE, FALSE,  TRUE,  TRUE,    32,   4 },
   {   TRUE, FALSE,  TRUE, FALSE,    32,   4 },
   {   TRUE, FALSE, FALSE,  TRUE,    32,   4 },
   {   TRUE, FALSE, FALSE, FALSE,    32,   4 },

   {   TRUE, FALSE,  TRUE,  TRUE,    32,   8 },
   {   TRUE, FALSE,  TRUE, FALSE,    32,   8 },
   {   TRUE, FALSE, FALSE,  TRUE,    32,   8 },
   {   TRUE, FALSE, FALSE, FALSE,    32,   8 },

   /* Fixed */
   {  FALSE,  TRUE,  TRUE,  TRUE,    32,   4 },
   {  FALSE,  TRUE,  TRUE, FALSE,    32,   4 },
   {  FALSE,  TRUE, FALSE,  TRUE,    32,   4 },
   {  FALSE,  TRUE, FALSE, FALSE,    32,   4 },

   {  FALSE,  TRUE,  TRUE,  TRUE,    32,   8 },
   {  FALSE,  TRUE,  TRUE, FALSE,    32,   8 },
   {  FALSE,  TRUE, FALSE,  TRUE,    32,   8 },
   {  FALSE,  TRUE, FALSE, FALSE,    32,   8 },

   /* Integer */
   {  FALSE, FALSE,  TRUE,  TRUE,    32,   4 },
   {  FALSE, FALSE,  TRUE, FALSE,    32,   4 },
   {  FALSE, FALSE, FALSE,  TRUE,    32,   4 },
   {  FALSE, FALSE, FALSE, FALSE,    32,   4 },

   {  FALSE, FALSE,  TRUE,  TRUE,    32,   8 },
   {  FALSE, FALSE,  TRUE, FALSE,    32,   8 },
   {  FALSE, FALSE, FALSE,  TRUE,    32,   8 },
   {  FALSE, FALSE, FALSE, FALSE,    32,   8 },

   {  FALSE, FALSE,  TRUE,  TRUE,    16,   8 },
   {  FALSE, FALSE,  TRUE, FALSE,    16,   8 },
   {  FALSE, FALSE, FALSE,  TRUE,    16,   8 },
   {  FALSE, FALSE, FALSE, FALSE,    16,   8 },

   {  FALSE, FALSE,  TRUE,  TRUE,     8,  16 },
   {  FALSE, FALSE,  TRUE, FALSE,     8,  16 },
   {  FALSE, FALSE, FALSE,  TRUE,     8,  16 },
   {  FALSE, FALSE, FALSE, FALSE,     8,  16 },

   {  FALSE, FALSE,  TRUE,  TRUE,     8,   4 },
   {  FALSE, FALSE,  TRUE, FALSE,     8,   4 },
   {  FALSE, FALSE, FALSE,  TRUE,     8,   4 },
   {  FALSE, FALSE, FALSE, FALSE,     8,   4 },

   {  FALSE, FALSE,  FALSE,  TRUE,    8,   8 },
};


const unsigned num_types = sizeof(conv_types)/sizeof(conv_types[0]);


boolean
test_all(unsigned verbose, FILE *fp)
{
   const struct lp_type *src_type;
   const struct lp_type *dst_type;
   boolean success = TRUE;
   int error_count = 0;

   for(src_type = conv_types; src_type < &conv_types[num_types]; ++src_type) {
      for(dst_type = conv_types; dst_type < &conv_types[num_types]; ++dst_type) {

         if(src_type == dst_type)
            continue;

         if(!test_one(verbose, fp, *src_type, *dst_type)){
            success = FALSE;
            ++error_count;
         }
      }
   }

   fprintf(stderr, "%d failures\n", error_count);

   return success;
}


boolean
test_some(unsigned verbose, FILE *fp,
          unsigned long n)
{
   const struct lp_type *src_type;
   const struct lp_type *dst_type;
   unsigned long i;
   boolean success = TRUE;

   for(i = 0; i < n; ++i) {
      src_type = &conv_types[rand() % num_types];
      
      do {
         dst_type = &conv_types[rand() % num_types];
      } while (src_type == dst_type || src_type->norm != dst_type->norm);

      if(!test_one(verbose, fp, *src_type, *dst_type))
        success = FALSE;
   }

   return success;
}


boolean
test_single(unsigned verbose, FILE *fp)
{
   /*    float, fixed,  sign,  norm, width, len */
   struct lp_type f32x4_type =
      {   TRUE, FALSE,  TRUE,  TRUE,    32,   4 };
   struct lp_type ub8x4_type =
      {  FALSE, FALSE, FALSE,  TRUE,     8,  16 };

   boolean success;

   success = test_one(verbose, fp, f32x4_type, ub8x4_type);

   return success;
}
@


1.5
log
@Merge Mesa 10.2.9
@
text
@@


1.4
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d214 1
a214 1
   gallivm = gallivm_create("test_module", LLVMGetGlobalContext());
a221 2
   gallivm_free_ir(gallivm);

d321 2
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d214 1
a214 1
   gallivm = gallivm_create();
d222 2
a322 2

   gallivm_free_function(gallivm, func, conv_test_ptr);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d145 2
d153 1
a153 1
test_one(struct gallivm_state *gallivm, unsigned verbose,
d158 1
a158 2
   LLVMModuleRef module = gallivm->module;
   LLVMExecutionEngineRef engine = gallivm->engine;
a159 1
   char *error = NULL;
a168 1
   void *code;
d170 20
a189 2
   if (src_type.width * src_type.length != dst_type.width * dst_type.length &&
       src_type.length != dst_type.length) {
d194 1
a194 1
      dump_conv_types(stdout, src_type, dst_type);
d214 2
d218 1
a218 5
   if(LLVMVerifyModule(module, LLVMPrintMessageAction, &error)) {
      LLVMDumpModule(module);
      abort();
   }
   LLVMDisposeMessage(error);
d220 1
a220 8
   if(verbose >= 2)
      LLVMDumpModule(module);

   code = LLVMGetPointerToGlobal(engine, func);
   conv_test_ptr = (conv_test_ptr_t)pointer_to_func(code);

   if(verbose >= 2)
      lp_disassemble(code);
d226 2
a227 2
      PIPE_ALIGN_VAR(16) uint8_t src[LP_MAX_VECTOR_LENGTH*LP_MAX_VECTOR_LENGTH];
      PIPE_ALIGN_VAR(16) uint8_t dst[LP_MAX_VECTOR_LENGTH*LP_MAX_VECTOR_LENGTH];
d322 1
a322 12
   if (!success) {
      static boolean firsttime = TRUE;
      if(firsttime) {
         if(verbose < 2)
            LLVMDumpModule(module);
         LLVMWriteBitcodeToFile(module, "conv.bc");
         fprintf(stderr, "conv.bc written\n");
         fprintf(stderr, "Invoke as \"llc -o - conv.bc\"\n");
         firsttime = FALSE;
         /* abort(); */
      }
   }
d324 1
a324 1
   LLVMFreeMachineCodeForFunction(engine, func);
d333 1
d339 15
a353 6
   /* TODO: test fixed formats too */

   {  FALSE, FALSE,  TRUE,  TRUE,    16,   8 },
   {  FALSE, FALSE,  TRUE, FALSE,    16,   8 },
   {  FALSE, FALSE, FALSE,  TRUE,    16,   8 },
   {  FALSE, FALSE, FALSE, FALSE,    16,   8 },
d355 1
d361 5
d380 2
d389 1
a389 1
test_all(struct gallivm_state *gallivm, unsigned verbose, FILE *fp)
d394 1
d402 4
a405 6
         if(src_type->norm != dst_type->norm)
            continue;

         if(!test_one(gallivm, verbose, fp, *src_type, *dst_type))
           success = FALSE;

d409 2
d416 1
a416 1
test_some(struct gallivm_state *gallivm, unsigned verbose, FILE *fp,
d431 1
a431 1
      if(!test_one(gallivm, verbose, fp, *src_type, *dst_type))
d440 1
a440 1
test_single(struct gallivm_state *gallivm, unsigned verbose, FILE *fp)
d450 1
a450 1
   success = test_one(gallivm, verbose, fp, f32x4_type, ub8x4_type);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d37 2
d100 1
a100 1
add_conv_test(LLVMModuleRef module,
d104 3
a111 1
   LLVMBuilderRef builder;
d116 2
a117 2
   args[0] = LLVMPointerType(lp_build_vec_type(src_type), 0);
   args[1] = LLVMPointerType(lp_build_vec_type(dst_type), 0);
d119 3
a121 1
   func = LLVMAddFunction(module, "test", LLVMFunctionType(LLVMVoidType(), args, 2, 0));
d126 1
a126 2
   block = LLVMAppendBasicBlock(func, "entry");
   builder = LLVMCreateBuilder();
d130 1
a130 1
      LLVMValueRef index = LLVMConstInt(LLVMInt32Type(), i, 0);
d135 1
a135 1
   lp_build_conv(builder, src_type, dst_type, src, num_srcs, dst, num_dsts);
d138 1
a138 1
      LLVMValueRef index = LLVMConstInt(LLVMInt32Type(), i, 0);
a144 1
   LLVMDisposeBuilder(builder);
d151 1
a151 1
test_one(unsigned verbose,
d156 2
a157 1
   LLVMModuleRef module = NULL;
a158 3
   LLVMExecutionEngineRef engine = NULL;
   LLVMModuleProviderRef provider = NULL;
   LLVMPassManagerRef pass = NULL;
d169 6
d179 1
a179 1
   if(src_type.length > dst_type.length) {
d183 4
d189 1
a189 1
      num_srcs = dst_type.length/src_type.length;
a191 2
   assert(src_type.width * src_type.length == dst_type.width * dst_type.length);

d197 1
a197 3
   module = LLVMModuleCreateWithName("test");

   func = add_conv_test(module, src_type, num_srcs, dst_type, num_dsts);
a204 24
   provider = LLVMCreateModuleProviderForExistingModule(module);
   if (LLVMCreateJITCompiler(&engine, provider, 1, &error)) {
      if(verbose < 1)
         dump_conv_types(stderr, src_type, dst_type);
      fprintf(stderr, "%s\n", error);
      LLVMDisposeMessage(error);
      abort();
   }

#if 0
   pass = LLVMCreatePassManager();
   LLVMAddTargetData(LLVMGetExecutionEngineTargetData(engine), pass);
   /* These are the passes currently listed in llvm-c/Transforms/Scalar.h,
    * but there are more on SVN. */
   LLVMAddConstantPropagationPass(pass);
   LLVMAddInstructionCombiningPass(pass);
   LLVMAddPromoteMemoryToRegisterPass(pass);
   LLVMAddGVNPass(pass);
   LLVMAddCFGSimplificationPass(pass);
   LLVMRunPassManager(pass, module);
#else
   (void)pass;
#endif

d208 2
a209 1
   conv_test_ptr = (conv_test_ptr_t)LLVMGetPointerToGlobal(engine, func);
d212 1
a212 1
      lp_disassemble(conv_test_ptr);
d245 1
a245 1
      if (!success) {
d248 6
a253 1
         fprintf(stderr, "MISMATCH\n");
a328 4
   LLVMDisposeExecutionEngine(engine);
   if(pass)
      LLVMDisposePassManager(pass);

d362 5
d374 1
a374 1
test_all(unsigned verbose, FILE *fp)
d378 1
a378 1
   bool success = TRUE;
d389 1
a389 1
         if(!test_one(verbose, fp, *src_type, *dst_type))
d400 2
a401 1
test_some(unsigned verbose, FILE *fp, unsigned long n)
d406 1
a406 1
   bool success = TRUE;
d415 1
a415 1
      if(!test_one(verbose, fp, *src_type, *dst_type))
d418 17
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a36 2
#include "util/u_pointer.h"
#include "gallivm/lp_bld_init.h"
d98 1
a98 1
add_conv_test(struct gallivm_state *gallivm,
a101 3
   LLVMModuleRef module = gallivm->module;
   LLVMContextRef context = gallivm->context;
   LLVMBuilderRef builder = gallivm->builder;
d107 1
d112 2
a113 2
   args[0] = LLVMPointerType(lp_build_vec_type(gallivm, src_type), 0);
   args[1] = LLVMPointerType(lp_build_vec_type(gallivm, dst_type), 0);
d115 1
a115 3
   func = LLVMAddFunction(module, "test",
                          LLVMFunctionType(LLVMVoidTypeInContext(context),
                                           args, 2, 0));
d120 2
a121 1
   block = LLVMAppendBasicBlockInContext(context, func, "entry");
d125 1
a125 1
      LLVMValueRef index = LLVMConstInt(LLVMInt32TypeInContext(context), i, 0);
d130 1
a130 1
   lp_build_conv(gallivm, src_type, dst_type, src, num_srcs, dst, num_dsts);
d133 1
a133 1
      LLVMValueRef index = LLVMConstInt(LLVMInt32TypeInContext(context), i, 0);
d140 1
d147 1
a147 1
test_one(struct gallivm_state *gallivm, unsigned verbose,
d152 1
a152 2
   LLVMModuleRef module = gallivm->module;
   LLVMExecutionEngineRef engine = gallivm->engine;
d154 3
a166 6
   void *code;

   if (src_type.width * src_type.length != dst_type.width * dst_type.length &&
       src_type.length != dst_type.length) {
      return TRUE;
   }
d171 1
a171 1
   if (src_type.length > dst_type.length) {
d175 1
a175 1
   else if (src_type.length < dst_type.length) {
d179 2
a180 4
   else  {
      num_dsts = 1;
      num_srcs = 1;
   }
d187 3
a189 1
   func = add_conv_test(gallivm, src_type, num_srcs, dst_type, num_dsts);
d197 24
d224 1
a224 2
   code = LLVMGetPointerToGlobal(engine, func);
   conv_test_ptr = (conv_test_ptr_t)pointer_to_func(code);
d227 1
a227 1
      lp_disassemble(code);
d260 1
a260 1
      if (!success || verbose >= 3) {
d263 1
a263 6
         if (success) {
            fprintf(stderr, "PASS\n");
         }
         else {
            fprintf(stderr, "MISMATCH\n");
         }
d339 4
a375 5

   {  FALSE, FALSE,  TRUE,  TRUE,     8,   4 },
   {  FALSE, FALSE,  TRUE, FALSE,     8,   4 },
   {  FALSE, FALSE, FALSE,  TRUE,     8,   4 },
   {  FALSE, FALSE, FALSE, FALSE,     8,   4 },
d383 1
a383 1
test_all(struct gallivm_state *gallivm, unsigned verbose, FILE *fp)
d387 1
a387 1
   boolean success = TRUE;
d398 1
a398 1
         if(!test_one(gallivm, verbose, fp, *src_type, *dst_type))
d409 1
a409 2
test_some(struct gallivm_state *gallivm, unsigned verbose, FILE *fp,
          unsigned long n)
d414 1
a414 1
   boolean success = TRUE;
d423 1
a423 1
      if(!test_one(gallivm, verbose, fp, *src_type, *dst_type))
a425 17

   return success;
}


boolean
test_single(struct gallivm_state *gallivm, unsigned verbose, FILE *fp)
{
   /*    float, fixed,  sign,  norm, width, len */
   struct lp_type f32x4_type =
      {   TRUE, FALSE,  TRUE,  TRUE,    32,   4 };
   struct lp_type ub8x4_type =
      {  FALSE, FALSE, FALSE,  TRUE,     8,  16 };

   boolean success;

   success = test_one(gallivm, verbose, fp, f32x4_type, ub8x4_type);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a144 2
   gallivm_verify_function(gallivm, func);

d151 1
a151 1
test_one(unsigned verbose,
d156 2
a157 1
   struct gallivm_state *gallivm;
d159 1
d169 1
d171 2
a172 20
   if ((src_type.width >= dst_type.width && src_type.length > dst_type.length) ||
       (src_type.width <= dst_type.width && src_type.length < dst_type.length)) {
      return TRUE;
   }

   /* Known failures
    * - fixed point 32 -> float 32
    * - float 32 -> signed normalised integer 32
    */
   if ((src_type.floating && !dst_type.floating && dst_type.sign && dst_type.norm && src_type.width == dst_type.width) ||
       (!src_type.floating && dst_type.floating && src_type.fixed && src_type.width == dst_type.width)) {
      return TRUE;
   }

   /* Known failures
    * - fixed point 32 -> float 32
    * - float 32 -> signed normalised integer 32
    */
   if ((src_type.floating && !dst_type.floating && dst_type.sign && dst_type.norm && src_type.width == dst_type.width) ||
       (!src_type.floating && dst_type.floating && src_type.fixed && src_type.width == dst_type.width)) {
d177 1
a177 1
      dump_conv_types(stderr, src_type, dst_type);
d197 1
a197 1
   gallivm = gallivm_create();
d199 8
a206 1
   func = add_conv_test(gallivm, src_type, num_srcs, dst_type, num_dsts);
d208 2
a209 1
   gallivm_compile_module(gallivm);
d211 2
a212 1
   conv_test_ptr = (conv_test_ptr_t)gallivm_jit_function(gallivm, func);
d218 2
a219 2
      PIPE_ALIGN_VAR(LP_MIN_VECTOR_ALIGN) uint8_t src[LP_MAX_VECTOR_LENGTH*LP_MAX_VECTOR_LENGTH];
      PIPE_ALIGN_VAR(LP_MIN_VECTOR_ALIGN) uint8_t dst[LP_MAX_VECTOR_LENGTH*LP_MAX_VECTOR_LENGTH];
d314 12
a325 1
   gallivm_free_function(gallivm, func, conv_test_ptr);
d327 1
a327 1
   gallivm_destroy(gallivm);
a335 1
   /* Float */
d341 6
a346 15
   {   TRUE, FALSE,  TRUE,  TRUE,    32,   8 },
   {   TRUE, FALSE,  TRUE, FALSE,    32,   8 },
   {   TRUE, FALSE, FALSE,  TRUE,    32,   8 },
   {   TRUE, FALSE, FALSE, FALSE,    32,   8 },

   /* Fixed */
   {  FALSE,  TRUE,  TRUE,  TRUE,    32,   4 },
   {  FALSE,  TRUE,  TRUE, FALSE,    32,   4 },
   {  FALSE,  TRUE, FALSE,  TRUE,    32,   4 },
   {  FALSE,  TRUE, FALSE, FALSE,    32,   4 },

   {  FALSE,  TRUE,  TRUE,  TRUE,    32,   8 },
   {  FALSE,  TRUE,  TRUE, FALSE,    32,   8 },
   {  FALSE,  TRUE, FALSE,  TRUE,    32,   8 },
   {  FALSE,  TRUE, FALSE, FALSE,    32,   8 },
a347 1
   /* Integer */
a352 5
   {  FALSE, FALSE,  TRUE,  TRUE,    32,   8 },
   {  FALSE, FALSE,  TRUE, FALSE,    32,   8 },
   {  FALSE, FALSE, FALSE,  TRUE,    32,   8 },
   {  FALSE, FALSE, FALSE, FALSE,    32,   8 },

a366 2

   {  FALSE, FALSE,  FALSE,  TRUE,    8,   8 },
d374 1
a374 1
test_all(unsigned verbose, FILE *fp)
a378 1
   int error_count = 0;
d386 6
a391 4
         if(!test_one(verbose, fp, *src_type, *dst_type)){
            success = FALSE;
            ++error_count;
         }
a394 2
   fprintf(stderr, "%d failures\n", error_count);

d400 1
a400 1
test_some(unsigned verbose, FILE *fp,
d415 1
a415 1
      if(!test_one(verbose, fp, *src_type, *dst_type))
d424 1
a424 1
test_single(unsigned verbose, FILE *fp)
d434 1
a434 1
   success = test_one(verbose, fp, f32x4_type, ub8x4_type);
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d214 1
a214 1
   gallivm = gallivm_create("test_module", LLVMGetGlobalContext());
a221 2
   gallivm_free_ir(gallivm);

d321 2
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d214 1
a214 1
   gallivm = gallivm_create();
d222 2
a322 2

   gallivm_free_function(gallivm, func, conv_test_ptr);
@


