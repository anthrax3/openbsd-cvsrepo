head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.00.34;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.30;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.58;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#include "pipe/p_defines.h"
#include "util/u_memory.h"
#include "lp_context.h"
#include "lp_state.h"
#include "lp_setup.h"
#include "draw/draw_context.h"

struct lp_rast_state {
   struct pipe_rasterizer_state lp_state;
   struct pipe_rasterizer_state draw_state;
};

/* State which might be handled in either the draw module or locally.
 * This function is used to turn that state off in one of the two
 * places.
 */
static void
clear_flags(struct pipe_rasterizer_state *rast)
{
   rast->light_twoside = 0;
   rast->offset_tri = 0;
   rast->offset_line = 0;
   rast->offset_point = 0;
   rast->offset_units = 0.0f;
   rast->offset_scale = 0.0f;
}



static void *
llvmpipe_create_rasterizer_state(struct pipe_context *pipe,
                                 const struct pipe_rasterizer_state *rast)
{
   boolean need_pipeline;

   /* Partition rasterizer state into what we want the draw module to
    * handle, and what we'll look after ourselves.
    */
   struct lp_rast_state *state = MALLOC_STRUCT(lp_rast_state);
   if (state == NULL)
      return NULL;

   memcpy(&state->draw_state, rast, sizeof *rast);
   memcpy(&state->lp_state, rast, sizeof *rast);

   /* We rely on draw module to do unfilled polyons, AA lines and
    * points and stipple.
    * 
    * Over time, reduce this list of conditions, and expand the list
    * of flags which get cleared in clear_flags().
    */
   need_pipeline = (rast->fill_front != PIPE_POLYGON_MODE_FILL ||
		    rast->fill_back != PIPE_POLYGON_MODE_FILL ||
		    rast->point_smooth ||
		    rast->line_smooth ||
		    rast->line_stipple_enable ||
		    rast->poly_stipple_enable);

   /* If not using the pipeline, clear out the flags which we can
    * handle ourselves.  If we *are* using the pipeline, do everything
    * on the pipeline and clear those flags on our internal copy of
    * the state.
    */
   if (need_pipeline)
      clear_flags(&state->lp_state);
   else
      clear_flags(&state->draw_state);

   return state;
}



static void
llvmpipe_bind_rasterizer_state(struct pipe_context *pipe, void *handle)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);
   const struct lp_rast_state *state =
      (const struct lp_rast_state *) handle;

   if (state) {
      llvmpipe->rasterizer = &state->lp_state;
      draw_set_rasterizer_state(llvmpipe->draw, &state->draw_state, handle);

      /* XXX: just pass lp_state directly to setup.
       */
      lp_setup_set_triangle_state( llvmpipe->setup,
                                  state->lp_state.cull_face,
                                  state->lp_state.front_ccw,
                                  state->lp_state.scissor,
                                  state->lp_state.half_pixel_center,
                                  state->lp_state.bottom_edge_rule);
      lp_setup_set_flatshade_first( llvmpipe->setup,
				    state->lp_state.flatshade_first);
      lp_setup_set_line_state( llvmpipe->setup,
                              state->lp_state.line_width);
      lp_setup_set_point_state( llvmpipe->setup,
                               state->lp_state.point_size,
                               state->lp_state.point_size_per_vertex,
                               state->lp_state.sprite_coord_enable,
                               state->lp_state.sprite_coord_mode);
   }
   else {
      llvmpipe->rasterizer = NULL;
      draw_set_rasterizer_state(llvmpipe->draw, NULL, handle);      
   }

   llvmpipe->dirty |= LP_NEW_RASTERIZER;
}


static void
llvmpipe_delete_rasterizer_state(struct pipe_context *pipe,
                                 void *rasterizer)
{
   FREE( rasterizer );
}



void
llvmpipe_init_rasterizer_funcs(struct llvmpipe_context *llvmpipe)
{
   llvmpipe->pipe.create_rasterizer_state = llvmpipe_create_rasterizer_state;
   llvmpipe->pipe.bind_rasterizer_state   = llvmpipe_bind_rasterizer_state;
   llvmpipe->pipe.delete_rasterizer_state = llvmpipe_delete_rasterizer_state;
}
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
a80 2
                    rast->offset_point ||
                    rast->offset_line ||
a121 2
      lp_setup_set_rasterizer_discard( llvmpipe->setup,
				    state->lp_state.rasterizer_discard);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d49 4
d81 2
d117 5
a121 4
				   state->lp_state.cull_face,
				   state->lp_state.front_ccw,
				   state->lp_state.scissor,
				   state->lp_state.gl_rasterization_rules);
d124 2
d127 1
a127 1
			       state->lp_state.line_width);
d129 4
a132 4
				state->lp_state.point_size,
				state->lp_state.point_size_per_vertex,
				state->lp_state.sprite_coord_enable,
				state->lp_state.sprite_coord_mode);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d35 15
d52 2
a53 1
void *
d57 4
a60 2
   /* We do nothing special with rasterizer state.
    * The CSO handle is just a pointer to a pipe_rasterizer_state object.
d62 31
a92 1
   return mem_dup(rast, sizeof(*rast));
d97 1
a97 1
void
d101 2
a102 2
   const struct pipe_rasterizer_state *rasterizer =
      (const struct pipe_rasterizer_state *) handle;
d104 3
a106 2
   if (llvmpipe->rasterizer == rasterizer)
      return;
d108 2
a109 10
   /* pass-through to draw module */
   draw_set_rasterizer_state(llvmpipe->draw, rasterizer, handle);

   llvmpipe->rasterizer = rasterizer;

   /* Note: we can immediately set the triangle state here and
    * not worry about binning because we handle culling during
    * triangle setup, not when rasterizing the bins.
    */
   if (llvmpipe->rasterizer) {
d111 17
a127 3
                   llvmpipe->rasterizer->cull_mode,
                   llvmpipe->rasterizer->front_winding == PIPE_WINDING_CCW,
                   llvmpipe->rasterizer->scissor);
d134 3
a136 2
void llvmpipe_delete_rasterizer_state(struct pipe_context *pipe,
                                      void *rasterizer)
d142 8
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a34 15
struct lp_rast_state {
   struct pipe_rasterizer_state lp_state;
   struct pipe_rasterizer_state draw_state;
};

/* State which might be handled in either the draw module or locally.
 * This function is used to turn that state off in one of the two
 * places.
 */
static void
clear_flags(struct pipe_rasterizer_state *rast)
{
   rast->light_twoside = 0;
   rast->offset_tri = 0;
}
d37 1
a37 2

static void *
d41 2
a42 4
   boolean need_pipeline;

   /* Partition rasterizer state into what we want the draw module to
    * handle, and what we'll look after ourselves.
d44 1
a44 31
   struct lp_rast_state *state = MALLOC_STRUCT(lp_rast_state);
   if (state == NULL)
      return NULL;

   memcpy(&state->draw_state, rast, sizeof *rast);
   memcpy(&state->lp_state, rast, sizeof *rast);

   /* We rely on draw module to do unfilled polyons, AA lines and
    * points and stipple.
    * 
    * Over time, reduce this list of conditions, and expand the list
    * of flags which get cleared in clear_flags().
    */
   need_pipeline = (rast->fill_front != PIPE_POLYGON_MODE_FILL ||
		    rast->fill_back != PIPE_POLYGON_MODE_FILL ||
		    rast->point_smooth ||
		    rast->line_smooth ||
		    rast->line_stipple_enable ||
		    rast->poly_stipple_enable);

   /* If not using the pipeline, clear out the flags which we can
    * handle ourselves.  If we *are* using the pipeline, do everything
    * on the pipeline and clear those flags on our internal copy of
    * the state.
    */
   if (need_pipeline)
      clear_flags(&state->lp_state);
   else
      clear_flags(&state->draw_state);

   return state;
d49 1
a49 1
static void
d53 2
a54 2
   const struct lp_rast_state *state =
      (const struct lp_rast_state *) handle;
d56 2
a57 3
   if (state) {
      llvmpipe->rasterizer = &state->lp_state;
      draw_set_rasterizer_state(llvmpipe->draw, &state->draw_state, handle);
d59 10
a68 2
      /* XXX: just pass lp_state directly to setup.
       */
d70 3
a72 17
				   state->lp_state.cull_face,
				   state->lp_state.front_ccw,
				   state->lp_state.scissor,
				   state->lp_state.gl_rasterization_rules);
      lp_setup_set_flatshade_first( llvmpipe->setup,
				    state->lp_state.flatshade_first);
      lp_setup_set_line_state( llvmpipe->setup,
			       state->lp_state.line_width);
      lp_setup_set_point_state( llvmpipe->setup,
				state->lp_state.point_size,
				state->lp_state.point_size_per_vertex,
				state->lp_state.sprite_coord_enable,
				state->lp_state.sprite_coord_mode);
   }
   else {
      llvmpipe->rasterizer = NULL;
      draw_set_rasterizer_state(llvmpipe->draw, NULL, handle);      
d79 2
a80 3
static void
llvmpipe_delete_rasterizer_state(struct pipe_context *pipe,
                                 void *rasterizer)
a85 8

void
llvmpipe_init_rasterizer_funcs(struct llvmpipe_context *llvmpipe)
{
   llvmpipe->pipe.create_rasterizer_state = llvmpipe_create_rasterizer_state;
   llvmpipe->pipe.bind_rasterizer_state   = llvmpipe_bind_rasterizer_state;
   llvmpipe->pipe.delete_rasterizer_state = llvmpipe_delete_rasterizer_state;
}
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a48 4
   rast->offset_line = 0;
   rast->offset_point = 0;
   rast->offset_units = 0.0f;
   rast->offset_scale = 0.0f;
a76 2
                    rast->offset_point ||
                    rast->offset_line ||
d111 4
a114 5
                                  state->lp_state.cull_face,
                                  state->lp_state.front_ccw,
                                  state->lp_state.scissor,
                                  state->lp_state.half_pixel_center,
                                  state->lp_state.bottom_edge_rule);
a116 2
      lp_setup_set_rasterizer_discard( llvmpipe->setup,
				    state->lp_state.rasterizer_discard);
d118 1
a118 1
                              state->lp_state.line_width);
d120 4
a123 4
                               state->lp_state.point_size,
                               state->lp_state.point_size_per_vertex,
                               state->lp_state.sprite_coord_enable,
                               state->lp_state.sprite_coord_mode);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d81 2
d124 2
@


