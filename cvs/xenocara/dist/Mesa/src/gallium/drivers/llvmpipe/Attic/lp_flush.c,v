head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.32;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.25;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.57;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Author:
 *    Keith Whitwell <keithw@@vmware.com>
 */


#include "pipe/p_defines.h"
#include "pipe/p_screen.h"
#include "util/u_string.h"
#include "draw/draw_context.h"
#include "lp_flush.h"
#include "lp_context.h"
#include "lp_setup.h"


/**
 * \param fence  if non-null, returns pointer to a fence which can be waited on
 */
void
llvmpipe_flush( struct pipe_context *pipe,
                struct pipe_fence_handle **fence,
                const char *reason)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);

   draw_flush(llvmpipe->draw);

   /* ask the setup module to flush */
   lp_setup_flush(llvmpipe->setup, fence, reason);

   /* Enable to dump BMPs of the color/depth buffers each frame */
   if (0) {
      static unsigned frame_no = 1;
      char filename[256];
      unsigned i;

      for (i = 0; i < llvmpipe->framebuffer.nr_cbufs; i++) {
         util_snprintf(filename, sizeof(filename), "cbuf%u_%u", i, frame_no);
         debug_dump_surface_bmp(&llvmpipe->pipe, filename, llvmpipe->framebuffer.cbufs[i]);
      }

      if (0) {
         util_snprintf(filename, sizeof(filename), "zsbuf_%u", frame_no);
         debug_dump_surface_bmp(&llvmpipe->pipe, filename, llvmpipe->framebuffer.zsbuf);
      }

      ++frame_no;
   }
}

void
llvmpipe_finish( struct pipe_context *pipe,
                 const char *reason )
{
   struct pipe_fence_handle *fence = NULL;
   llvmpipe_flush(pipe, &fence, reason);
   if (fence) {
      pipe->screen->fence_finish(pipe->screen, fence, PIPE_TIMEOUT_INFINITE);
      pipe->screen->fence_reference(pipe->screen, &fence, NULL);
   }
}

/**
 * Flush context if necessary.
 *
 * Returns FALSE if it would have block, but do_not_block was set, TRUE
 * otherwise.
 *
 * TODO: move this logic to an auxiliary library?
 */
boolean
llvmpipe_flush_resource(struct pipe_context *pipe,
                        struct pipe_resource *resource,
                        unsigned level,
                        boolean read_only,
                        boolean cpu_access,
                        boolean do_not_block,
                        const char *reason)
{
   unsigned referenced;

   referenced = llvmpipe_is_resource_referenced(pipe, resource, level);

   if ((referenced & LP_REFERENCED_FOR_WRITE) ||
       ((referenced & LP_REFERENCED_FOR_READ) && !read_only)) {

      if (cpu_access) {
         /*
          * Flush and wait.
          */
         if (do_not_block)
            return FALSE;

         llvmpipe_finish(pipe, reason);
      } else {
         /*
          * Just flush.
          */

         llvmpipe_flush(pipe, NULL, reason);
      }
   }

   return TRUE;
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d29 1
a29 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a56 7

   if (llvmpipe_variant_count > 1000) {
      /* time to do a garbage collection */
      gallivm_garbage_collect(llvmpipe->gallivm);
      llvmpipe_variant_count = 0;
   }

a100 1
                        int layer,
d108 1
a108 1
   referenced = llvmpipe_is_resource_referenced(pipe, resource, level, layer);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a42 1
 * \param flags  bitmask of PIPE_FLUSH_x flags
a46 1
                unsigned flags,
d55 1
a55 1
   lp_setup_flush(llvmpipe->setup, flags, fence, reason);
d66 8
a73 14
      if (flags & PIPE_FLUSH_FRAME) {
         static unsigned frame_no = 1;
         char filename[256];
         unsigned i;

         for (i = 0; i < llvmpipe->framebuffer.nr_cbufs; i++) {
            util_snprintf(filename, sizeof(filename), "cbuf%u_%u", i, frame_no);
            debug_dump_surface_bmp(&llvmpipe->pipe, filename, llvmpipe->framebuffer.cbufs[0]);
         }

         if (0) {
            util_snprintf(filename, sizeof(filename), "zsbuf_%u", frame_no);
            debug_dump_surface_bmp(&llvmpipe->pipe, filename, llvmpipe->framebuffer.zsbuf);
         }
d75 3
a77 1
         ++frame_no;
d79 2
d89 1
a89 1
   llvmpipe_flush(pipe, 0, &fence, reason);
d91 1
a91 1
      pipe->screen->fence_finish(pipe->screen, fence, 0);
a108 1
                        unsigned flush_flags,
d116 1
a116 1
   referenced = pipe->is_resource_referenced(pipe, resource, level, layer);
d118 2
a119 2
   if ((referenced & PIPE_REFERENCED_FOR_WRITE) ||
       ((referenced & PIPE_REFERENCED_FOR_READ) && !read_only)) {
d134 1
a134 1
         llvmpipe_flush(pipe, flush_flags, NULL, reason);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d34 2
d42 4
d48 3
a50 2
		unsigned flags,
                struct pipe_fence_handle **fence )
d56 3
a58 13
   if (fence) {
      if ((flags & (PIPE_FLUSH_SWAPBUFFERS |
                    PIPE_FLUSH_RENDER_CACHE))) {
         /* if we're going to flush the setup/rasterization modules, emit
          * a fence.
          * XXX this (and the code below) may need fine tuning...
          */
         *fence = lp_setup_fence( llvmpipe->setup );
      }
      else {
         *fence = NULL;
      }
   }
d60 4
a63 8
   /* XXX the lp_setup_flush(flags) param is not a bool, and it's ignored
    * at this time!
    */
   if (flags & PIPE_FLUSH_SWAPBUFFERS) {
      lp_setup_flush( llvmpipe->setup, FALSE );
   }
   else if (flags & PIPE_FLUSH_RENDER_CACHE) {
      lp_setup_flush( llvmpipe->setup, TRUE );
d67 15
a81 10
#if 0
   if (flags & PIPE_FLUSH_FRAME) {
      static unsigned frame_no = 1;
      char filename[256];
      unsigned i;

      for (i = 0; i < llvmpipe->framebuffer.nr_cbufs; i++) {
	 util_snprintf(filename, sizeof(filename), "cbuf%u_%u", i, frame_no);
         debug_dump_surface(filename, llvmpipe->framebuffer.cbufs[i]);
      }
d83 1
a83 3
      if (0) {
         util_snprintf(filename, sizeof(filename), "zsbuf_%u", frame_no);
         debug_dump_surface(filename, llvmpipe->framebuffer.zsbuf);
d85 2
d88 9
a96 1
      ++frame_no;
a97 1
#endif
d100 45
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a33 2
#include "pipe/p_screen.h"
#include "util/u_string.h"
a39 4
/**
 * \param flags  bitmask of PIPE_FLUSH_x flags
 * \param fence  if non-null, returns pointer to a fence which can be waited on
 */
d42 2
a43 3
                unsigned flags,
                struct pipe_fence_handle **fence,
                const char *reason)
d49 13
a61 2
   /* ask the setup module to flush */
   lp_setup_flush(llvmpipe->setup, flags, fence, reason);
d63 8
a70 5

   if (llvmpipe_variant_count > 1000) {
      /* time to do a garbage collection */
      gallivm_garbage_collect(llvmpipe->gallivm);
      llvmpipe_variant_count = 0;
d74 10
a83 15
   if (0) {
      if (flags & PIPE_FLUSH_FRAME) {
         static unsigned frame_no = 1;
         char filename[256];
         unsigned i;

         for (i = 0; i < llvmpipe->framebuffer.nr_cbufs; i++) {
            util_snprintf(filename, sizeof(filename), "cbuf%u_%u", i, frame_no);
            debug_dump_surface_bmp(&llvmpipe->pipe, filename, llvmpipe->framebuffer.cbufs[0]);
         }

         if (0) {
            util_snprintf(filename, sizeof(filename), "zsbuf_%u", frame_no);
            debug_dump_surface_bmp(&llvmpipe->pipe, filename, llvmpipe->framebuffer.zsbuf);
         }
d85 3
a87 1
         ++frame_no;
a88 2
   }
}
d90 1
a90 9
void
llvmpipe_finish( struct pipe_context *pipe,
                 const char *reason )
{
   struct pipe_fence_handle *fence = NULL;
   llvmpipe_flush(pipe, 0, &fence, reason);
   if (fence) {
      pipe->screen->fence_finish(pipe->screen, fence, 0);
      pipe->screen->fence_reference(pipe->screen, &fence, NULL);
d92 1
a94 45
/**
 * Flush context if necessary.
 *
 * Returns FALSE if it would have block, but do_not_block was set, TRUE
 * otherwise.
 *
 * TODO: move this logic to an auxiliary library?
 */
boolean
llvmpipe_flush_resource(struct pipe_context *pipe,
                        struct pipe_resource *resource,
                        unsigned level,
                        int layer,
                        unsigned flush_flags,
                        boolean read_only,
                        boolean cpu_access,
                        boolean do_not_block,
                        const char *reason)
{
   unsigned referenced;

   referenced = pipe->is_resource_referenced(pipe, resource, level, layer);

   if ((referenced & PIPE_REFERENCED_FOR_WRITE) ||
       ((referenced & PIPE_REFERENCED_FOR_READ) && !read_only)) {

      if (cpu_access) {
         /*
          * Flush and wait.
          */
         if (do_not_block)
            return FALSE;

         llvmpipe_finish(pipe, reason);
      } else {
         /*
          * Just flush.
          */

         llvmpipe_flush(pipe, flush_flags, NULL, reason);
      }
   }

   return TRUE;
}
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d43 1
d48 1
d57 8
a64 1
   lp_setup_flush(llvmpipe->setup, fence, reason);
d68 14
a81 8
      static unsigned frame_no = 1;
      char filename[256];
      unsigned i;

      for (i = 0; i < llvmpipe->framebuffer.nr_cbufs; i++) {
         util_snprintf(filename, sizeof(filename), "cbuf%u_%u", i, frame_no);
         debug_dump_surface_bmp(&llvmpipe->pipe, filename, llvmpipe->framebuffer.cbufs[i]);
      }
d83 1
a83 3
      if (0) {
         util_snprintf(filename, sizeof(filename), "zsbuf_%u", frame_no);
         debug_dump_surface_bmp(&llvmpipe->pipe, filename, llvmpipe->framebuffer.zsbuf);
a84 2

      ++frame_no;
d93 1
a93 1
   llvmpipe_flush(pipe, &fence, reason);
d95 1
a95 1
      pipe->screen->fence_finish(pipe->screen, fence, PIPE_TIMEOUT_INFINITE);
d112 2
d121 1
a121 1
   referenced = llvmpipe_is_resource_referenced(pipe, resource, level);
d123 2
a124 2
   if ((referenced & LP_REFERENCED_FOR_WRITE) ||
       ((referenced & LP_REFERENCED_FOR_READ) && !read_only)) {
d139 1
a139 1
         llvmpipe_flush(pipe, NULL, reason);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d29 1
a29 1
 *    Keith Whitwell <keithw@@vmware.com>
@


