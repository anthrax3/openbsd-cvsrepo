head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.00.34;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.28;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.58;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Authors:  Keith Whitwell <keithw@@vmware.com>
 */

#ifndef LP_STATE_H
#define LP_STATE_H

#include "pipe/p_state.h"
#include "lp_jit.h"
#include "lp_state_fs.h"
#include "gallivm/lp_bld.h"


#define LP_NEW_VIEWPORT      0x1
#define LP_NEW_RASTERIZER    0x2
#define LP_NEW_FS            0x4
#define LP_NEW_BLEND         0x8
#define LP_NEW_CLIP          0x10
#define LP_NEW_SCISSOR       0x20
#define LP_NEW_STIPPLE       0x40
#define LP_NEW_FRAMEBUFFER   0x80
#define LP_NEW_DEPTH_STENCIL_ALPHA 0x100
#define LP_NEW_CONSTANTS     0x200
#define LP_NEW_SAMPLER       0x400
#define LP_NEW_SAMPLER_VIEW  0x800
#define LP_NEW_VERTEX        0x1000
#define LP_NEW_VS            0x2000
#define LP_NEW_OCCLUSION_QUERY 0x4000
#define LP_NEW_BLEND_COLOR   0x8000
#define LP_NEW_GS            0x10000
#define LP_NEW_SO            0x20000
#define LP_NEW_SO_BUFFERS    0x40000



struct vertex_info;
struct pipe_context;
struct llvmpipe_context;



struct lp_geometry_shader {
   boolean no_tokens;
   struct pipe_stream_output_info stream_output;
   struct draw_geometry_shader *dgs;
};

/** Vertex element state */
struct lp_velems_state
{
   unsigned count;
   struct pipe_vertex_element velem[PIPE_MAX_ATTRIBS];
};

struct lp_so_state {
   struct pipe_stream_output_info base;
};


void
llvmpipe_set_framebuffer_state(struct pipe_context *,
                               const struct pipe_framebuffer_state *);

void
llvmpipe_update_fs(struct llvmpipe_context *lp);

void 
llvmpipe_update_setup(struct llvmpipe_context *lp);

void
llvmpipe_update_derived(struct llvmpipe_context *llvmpipe);

void
llvmpipe_init_sampler_funcs(struct llvmpipe_context *llvmpipe);

void
llvmpipe_init_blend_funcs(struct llvmpipe_context *llvmpipe);

void
llvmpipe_init_vertex_funcs(struct llvmpipe_context *llvmpipe);

void
llvmpipe_init_draw_funcs(struct llvmpipe_context *llvmpipe);

void
llvmpipe_init_clip_funcs(struct llvmpipe_context *llvmpipe);

void
llvmpipe_init_fs_funcs(struct llvmpipe_context *llvmpipe);

void
llvmpipe_init_vs_funcs(struct llvmpipe_context *llvmpipe);

void
llvmpipe_init_gs_funcs(struct llvmpipe_context *llvmpipe);

void
llvmpipe_init_rasterizer_funcs(struct llvmpipe_context *llvmpipe);

void
llvmpipe_init_so_funcs(struct llvmpipe_context *llvmpipe);

void
llvmpipe_prepare_vertex_sampling(struct llvmpipe_context *ctx,
                                 unsigned num,
                                 struct pipe_sampler_view **views);
void
llvmpipe_cleanup_vertex_sampling(struct llvmpipe_context *ctx);


void
llvmpipe_prepare_geometry_sampling(struct llvmpipe_context *ctx,
                                   unsigned num,
                                   struct pipe_sampler_view **views);
void
llvmpipe_cleanup_geometry_sampling(struct llvmpipe_context *ctx);


#endif
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d28 1
a28 1
/* Authors:  Keith Whitwell <keith@@tungstengraphics.com>
a67 8
/** Subclass of pipe_shader_state */
struct lp_vertex_shader
{
   struct pipe_shader_state shader;
   struct draw_vertex_shader *draw_data;
};

/** Subclass of pipe_shader_state */
d69 3
a71 2
   struct pipe_shader_state shader;
   struct draw_geometry_shader *draw_data;
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d54 1
a54 1
#define LP_NEW_QUERY         0x4000
d89 1
a89 1
   struct pipe_stream_output_state base;
d142 8
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a33 2
#include <llvm-c/Core.h>

a34 1
#include "tgsi/tgsi_scan.h"
d36 2
a37 1
#include "gallivm/lp_bld_sample.h" /* for struct lp_sampler_static_state */
d51 1
a51 1
#define LP_NEW_TEXTURE       0x800
d56 4
a65 1
struct lp_fragment_shader;
d68 2
a69 1
struct lp_fragment_shader_variant_key
d71 2
a72 13
   struct pipe_depth_state depth;
   struct pipe_alpha_state alpha;
   struct pipe_blend_state blend;
   enum pipe_format zsbuf_format;
   unsigned nr_cbufs:8;
   unsigned flatshade:1;
   unsigned scissor:1;

   struct {
      ubyte colormask;
   } cbuf_blend[PIPE_MAX_COLOR_BUFS];
   
   struct lp_sampler_static_state sampler[PIPE_MAX_SAMPLERS];
d75 4
a78 12

struct lp_fragment_shader_variant
{
   struct lp_fragment_shader *shader;

   struct lp_fragment_shader_variant_key key;

   LLVMValueRef function[2];

   lp_jit_frag_func jit_function[2];

   struct lp_fragment_shader_variant *next;
d81 2
a82 7

/**
 * Subclass of pipe_shader_state (though it doesn't really need to be).
 *
 * This is starting to look an awful lot like a quad pipeline stage...
 */
struct lp_fragment_shader
d84 2
a85 7
   struct pipe_shader_state base;

   struct tgsi_shader_info info;

   struct lp_fragment_shader_variant *variants;

   struct lp_fragment_shader_variant *current;
d88 2
a89 5

/** Subclass of pipe_shader_state */
struct lp_vertex_shader {
   struct pipe_shader_state shader;
   struct draw_vertex_shader *draw_data;
d93 3
a96 12
void *
llvmpipe_create_blend_state(struct pipe_context *,
                            const struct pipe_blend_state *);
void llvmpipe_bind_blend_state(struct pipe_context *,
                               void *);
void llvmpipe_delete_blend_state(struct pipe_context *,
                                 void *);

void *
llvmpipe_create_sampler_state(struct pipe_context *,
                              const struct pipe_sampler_state *);
void llvmpipe_bind_sampler_states(struct pipe_context *, unsigned, void **);
d98 1
a98 4
llvmpipe_bind_vertex_sampler_states(struct pipe_context *,
                                    unsigned num_samplers,
                                    void **samplers);
void llvmpipe_delete_sampler_state(struct pipe_context *, void *);
d100 2
a101 5
void *
llvmpipe_create_depth_stencil_state(struct pipe_context *,
                                    const struct pipe_depth_stencil_alpha_state *);
void llvmpipe_bind_depth_stencil_state(struct pipe_context *, void *);
void llvmpipe_delete_depth_stencil_state(struct pipe_context *, void *);
d103 2
a104 5
void *
llvmpipe_create_rasterizer_state(struct pipe_context *,
                                 const struct pipe_rasterizer_state *);
void llvmpipe_bind_rasterizer_state(struct pipe_context *, void *);
void llvmpipe_delete_rasterizer_state(struct pipe_context *, void *);
d106 2
a107 2
void llvmpipe_set_framebuffer_state( struct pipe_context *,
                                     const struct pipe_framebuffer_state * );
d109 2
a110 2
void llvmpipe_set_blend_color( struct pipe_context *pipe,
                               const struct pipe_blend_color *blend_color );
d112 2
a113 2
void llvmpipe_set_stencil_ref( struct pipe_context *pipe,
                               const struct pipe_stencil_ref *stencil_ref );
d115 2
a116 2
void llvmpipe_set_clip_state( struct pipe_context *,
                              const struct pipe_clip_state * );
d118 2
a119 3
void llvmpipe_set_constant_buffer(struct pipe_context *,
                                  uint shader, uint index,
                                  struct pipe_buffer *buf);
d121 2
a122 8
void *llvmpipe_create_fs_state(struct pipe_context *,
                               const struct pipe_shader_state *);
void llvmpipe_bind_fs_state(struct pipe_context *, void *);
void llvmpipe_delete_fs_state(struct pipe_context *, void *);
void *llvmpipe_create_vs_state(struct pipe_context *,
                               const struct pipe_shader_state *);
void llvmpipe_bind_vs_state(struct pipe_context *, void *);
void llvmpipe_delete_vs_state(struct pipe_context *, void *);
d124 2
a125 2
void llvmpipe_set_polygon_stipple( struct pipe_context *,
				  const struct pipe_poly_stipple * );
d127 2
a128 6
void llvmpipe_set_scissor_state( struct pipe_context *,
                                 const struct pipe_scissor_state * );

void llvmpipe_set_sampler_textures( struct pipe_context *,
                                    unsigned num,
                                    struct pipe_texture ** );
d131 1
a131 14
llvmpipe_set_vertex_sampler_textures(struct pipe_context *,
                                     unsigned num_textures,
                                     struct pipe_texture **);

void llvmpipe_set_viewport_state( struct pipe_context *,
                                  const struct pipe_viewport_state * );

void llvmpipe_set_vertex_elements(struct pipe_context *,
                                  unsigned count,
                                  const struct pipe_vertex_element *);

void llvmpipe_set_vertex_buffers(struct pipe_context *,
                                 unsigned count,
                                 const struct pipe_vertex_buffer *);
a132 12
void llvmpipe_update_fs(struct llvmpipe_context *lp);

void llvmpipe_update_derived( struct llvmpipe_context *llvmpipe );


void llvmpipe_draw_arrays(struct pipe_context *pipe, unsigned mode,
			     unsigned start, unsigned count);

void llvmpipe_draw_elements(struct pipe_context *pipe,
			       struct pipe_buffer *indexBuffer,
			       unsigned indexSize,
			       unsigned mode, unsigned start, unsigned count);
d134 1
a134 6
llvmpipe_draw_range_elements(struct pipe_context *pipe,
                             struct pipe_buffer *indexBuffer,
                             unsigned indexSize,
                             unsigned min_index,
                             unsigned max_index,
                             unsigned mode, unsigned start, unsigned count);
d137 3
a139 2
llvmpipe_map_texture_surfaces(struct llvmpipe_context *lp);

d141 1
a141 1
llvmpipe_unmap_texture_surfaces(struct llvmpipe_context *lp);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d34 2
d37 1
d39 1
a39 2
#include "lp_state_fs.h"
#include "gallivm/lp_bld.h"
d53 1
a53 1
#define LP_NEW_SAMPLER_VIEW  0x800
a57 4
#define LP_NEW_GS            0x10000
#define LP_NEW_SO            0x20000
#define LP_NEW_SO_BUFFERS    0x40000

d64 1
d67 1
a67 2
/** Subclass of pipe_shader_state */
struct lp_vertex_shader
d69 13
a81 2
   struct pipe_shader_state shader;
   struct draw_vertex_shader *draw_data;
d84 12
a95 4
/** Subclass of pipe_shader_state */
struct lp_geometry_shader {
   struct pipe_shader_state shader;
   struct draw_geometry_shader *draw_data;
d98 7
a104 2
/** Vertex element state */
struct lp_velems_state
d106 7
a112 2
   unsigned count;
   struct pipe_vertex_element velem[PIPE_MAX_ATTRIBS];
d115 5
a119 2
struct lp_so_state {
   struct pipe_stream_output_state base;
d123 13
d137 41
a177 2
llvmpipe_set_framebuffer_state(struct pipe_context *,
                               const struct pipe_framebuffer_state *);
d179 2
a180 2
void
llvmpipe_update_fs(struct llvmpipe_context *lp);
d182 2
a183 2
void 
llvmpipe_update_setup(struct llvmpipe_context *lp);
d185 3
a187 2
void
llvmpipe_update_derived(struct llvmpipe_context *llvmpipe);
d190 3
a192 1
llvmpipe_init_sampler_funcs(struct llvmpipe_context *llvmpipe);
d194 2
a195 2
void
llvmpipe_init_blend_funcs(struct llvmpipe_context *llvmpipe);
d197 3
a199 2
void
llvmpipe_init_vertex_funcs(struct llvmpipe_context *llvmpipe);
d201 3
a203 2
void
llvmpipe_init_draw_funcs(struct llvmpipe_context *llvmpipe);
d205 1
a205 2
void
llvmpipe_init_clip_funcs(struct llvmpipe_context *llvmpipe);
d207 1
a207 2
void
llvmpipe_init_fs_funcs(struct llvmpipe_context *llvmpipe);
a208 2
void
llvmpipe_init_vs_funcs(struct llvmpipe_context *llvmpipe);
d210 2
a211 2
void
llvmpipe_init_gs_funcs(struct llvmpipe_context *llvmpipe);
d213 4
d218 6
a223 1
llvmpipe_init_rasterizer_funcs(struct llvmpipe_context *llvmpipe);
d226 1
a226 1
llvmpipe_init_so_funcs(struct llvmpipe_context *llvmpipe);
d229 1
a229 5
llvmpipe_prepare_vertex_sampling(struct llvmpipe_context *ctx,
                                 unsigned num,
                                 struct pipe_sampler_view **views);
void
llvmpipe_cleanup_vertex_sampling(struct llvmpipe_context *ctx);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d54 1
a54 1
#define LP_NEW_OCCLUSION_QUERY 0x4000
d89 1
a89 1
   struct pipe_stream_output_info base;
a141 8


void
llvmpipe_prepare_geometry_sampling(struct llvmpipe_context *ctx,
                                   unsigned num,
                                   struct pipe_sampler_view **views);
void
llvmpipe_cleanup_geometry_sampling(struct llvmpipe_context *ctx);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d28 1
a28 1
/* Authors:  Keith Whitwell <keithw@@vmware.com>
d68 8
d77 2
a78 3
   boolean no_tokens;
   struct pipe_stream_output_info stream_output;
   struct draw_geometry_shader *dgs;
@


