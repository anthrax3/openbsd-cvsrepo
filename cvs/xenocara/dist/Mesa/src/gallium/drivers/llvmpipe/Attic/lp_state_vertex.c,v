head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.35;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.30;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.59;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Authors:  Keith Whitwell <keithw@@vmware.com>
 */


#include "lp_context.h"
#include "lp_state.h"

#include "draw/draw_context.h"
#include "util/u_helpers.h"
#include "util/u_inlines.h"
#include "util/u_transfer.h"


static void *
llvmpipe_create_vertex_elements_state(struct pipe_context *pipe,
                                      unsigned count,
                                      const struct pipe_vertex_element *attribs)
{
   struct lp_velems_state *velems;
   assert(count <= PIPE_MAX_ATTRIBS);
   velems = (struct lp_velems_state *) MALLOC(sizeof(struct lp_velems_state));
   if (velems) {
      velems->count = count;
      memcpy(velems->velem, attribs, sizeof(*attribs) * count);
   }
   return velems;
}

static void
llvmpipe_bind_vertex_elements_state(struct pipe_context *pipe,
                                    void *velems)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);
   struct lp_velems_state *lp_velems = (struct lp_velems_state *) velems;

   llvmpipe->velems = lp_velems;

   llvmpipe->dirty |= LP_NEW_VERTEX;

   if (velems)
      draw_set_vertex_elements(llvmpipe->draw, lp_velems->count, lp_velems->velem);
}

static void
llvmpipe_delete_vertex_elements_state(struct pipe_context *pipe, void *velems)
{
   FREE( velems );
}

static void
llvmpipe_set_vertex_buffers(struct pipe_context *pipe,
                            unsigned start_slot, unsigned count,
                            const struct pipe_vertex_buffer *buffers)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);

   assert(count <= PIPE_MAX_ATTRIBS);

   util_set_vertex_buffers_count(llvmpipe->vertex_buffer,
                                 &llvmpipe->num_vertex_buffers,
                                 buffers, start_slot, count);

   llvmpipe->dirty |= LP_NEW_VERTEX;

   draw_set_vertex_buffers(llvmpipe->draw, start_slot, count, buffers);
}


static void
llvmpipe_set_index_buffer(struct pipe_context *pipe,
                          const struct pipe_index_buffer *ib)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);

   if (ib)
      memcpy(&llvmpipe->index_buffer, ib, sizeof(llvmpipe->index_buffer));
   else
      memset(&llvmpipe->index_buffer, 0, sizeof(llvmpipe->index_buffer));
}

void
llvmpipe_init_vertex_funcs(struct llvmpipe_context *llvmpipe)
{
   llvmpipe->pipe.create_vertex_elements_state = llvmpipe_create_vertex_elements_state;
   llvmpipe->pipe.bind_vertex_elements_state = llvmpipe_bind_vertex_elements_state;
   llvmpipe->pipe.delete_vertex_elements_state = llvmpipe_delete_vertex_elements_state;

   llvmpipe->pipe.set_vertex_buffers = llvmpipe_set_vertex_buffers;
   llvmpipe->pipe.set_index_buffer = llvmpipe_set_index_buffer;
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d28 1
a28 1
/* Authors:  Keith Whitwell <keith@@tungstengraphics.com>
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d36 1
d79 1
a79 1
                            unsigned count,
d86 3
a88 3
   util_copy_vertex_buffers(llvmpipe->vertex_buffer,
                            &llvmpipe->num_vertex_buffers,
                            buffers, count);
d92 1
a92 1
   draw_set_vertex_buffers(llvmpipe->draw, count, buffers);
a105 2

   draw_set_index_buffer(llvmpipe->draw, ib);
a116 2

   llvmpipe->pipe.redefine_user_buffer = u_default_redefine_user_buffer;
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d36 2
d85 3
a87 2
   memcpy(llvmpipe->vertex_buffer, buffers, count * sizeof(buffers[0]));
   llvmpipe->num_vertex_buffers = count;
d118 2
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d38 18
a55 4
void
llvmpipe_set_vertex_elements(struct pipe_context *pipe,
                             unsigned count,
                             const struct pipe_vertex_element *attribs)
d58 1
d60 1
a60 5
   assert(count <= PIPE_MAX_ATTRIBS);

   memcpy(llvmpipe->vertex_element, attribs,
          count * sizeof(struct pipe_vertex_element));
   llvmpipe->num_vertex_elements = count;
d64 2
a65 1
   draw_set_vertex_elements(llvmpipe->draw, count, attribs);
d68 5
d74 1
a74 1
void
d89 26
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d38 4
a41 4
static void *
llvmpipe_create_vertex_elements_state(struct pipe_context *pipe,
                                      unsigned count,
                                      const struct pipe_vertex_element *attribs)
d43 2
a44 1
   struct lp_velems_state *velems;
a45 7
   velems = (struct lp_velems_state *) MALLOC(sizeof(struct lp_velems_state));
   if (velems) {
      velems->count = count;
      memcpy(velems->velem, attribs, sizeof(*attribs) * count);
   }
   return velems;
}
d47 3
a49 8
static void
llvmpipe_bind_vertex_elements_state(struct pipe_context *pipe,
                                    void *velems)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);
   struct lp_velems_state *lp_velems = (struct lp_velems_state *) velems;

   llvmpipe->velems = lp_velems;
d53 1
a53 2
   if (velems)
      draw_set_vertex_elements(llvmpipe->draw, lp_velems->count, lp_velems->velem);
a55 5
static void
llvmpipe_delete_vertex_elements_state(struct pipe_context *pipe, void *velems)
{
   FREE( velems );
}
d57 1
a57 1
static void
a71 26
}


static void
llvmpipe_set_index_buffer(struct pipe_context *pipe,
                          const struct pipe_index_buffer *ib)
{
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);

   if (ib)
      memcpy(&llvmpipe->index_buffer, ib, sizeof(llvmpipe->index_buffer));
   else
      memset(&llvmpipe->index_buffer, 0, sizeof(llvmpipe->index_buffer));

   draw_set_index_buffer(llvmpipe->draw, ib);
}

void
llvmpipe_init_vertex_funcs(struct llvmpipe_context *llvmpipe)
{
   llvmpipe->pipe.create_vertex_elements_state = llvmpipe_create_vertex_elements_state;
   llvmpipe->pipe.bind_vertex_elements_state = llvmpipe_bind_vertex_elements_state;
   llvmpipe->pipe.delete_vertex_elements_state = llvmpipe_delete_vertex_elements_state;

   llvmpipe->pipe.set_vertex_buffers = llvmpipe_set_vertex_buffers;
   llvmpipe->pipe.set_index_buffer = llvmpipe_set_index_buffer;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a35 3
#include "util/u_helpers.h"
#include "util/u_inlines.h"
#include "util/u_transfer.h"
d76 1
a76 1
                            unsigned start_slot, unsigned count,
d83 2
a84 3
   util_set_vertex_buffers_count(llvmpipe->vertex_buffer,
                                 &llvmpipe->num_vertex_buffers,
                                 buffers, start_slot, count);
d88 1
a88 1
   draw_set_vertex_buffers(llvmpipe->draw, start_slot, count, buffers);
d102 2
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d28 1
a28 1
/* Authors:  Keith Whitwell <keithw@@vmware.com>
@


