head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2013.09.05.14.00.35;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.30;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

/**
 * @@file
 * Shared testing code.
 *
 * @@author Jose Fonseca <jfonseca@@vmware.com>
 */


#ifndef LP_TEST_H
#define LP_TEST_H


#include <stdlib.h>
#include <stdio.h>
#include <float.h>

#include "gallivm/lp_bld.h"

#include "pipe/p_state.h"
#include "util/u_format.h"
#include "util/u_math.h"
#include "util/u_dump.h"

#include "gallivm/lp_bld_type.h"


#define LP_TEST_NUM_SAMPLES 32


void
write_tsv_header(FILE *fp);


boolean
test_some(unsigned verbose, FILE *fp,
          unsigned long n);

boolean
test_single(unsigned verbose, FILE *fp);

boolean
test_all(unsigned verbose, FILE *fp);


#if defined(PIPE_CC_MSVC)

unsigned __int64 __rdtsc();
#pragma intrinsic(__rdtsc)
#define rdtsc() __rdtsc()

#elif defined(PIPE_CC_GCC) && (defined(PIPE_ARCH_X86) || defined(PIPE_ARCH_X86_64))

static INLINE uint64_t
rdtsc(void)
{
   uint32_t hi, lo;
   __asm__ __volatile__ ("rdtsc" : "=a"(lo), "=d"(hi));
   return ((uint64_t)lo) | (((uint64_t)hi) << 32);
}

#else

#define rdtsc() 0

#endif



float
random_float(void);


void
dump_type(FILE *fp, struct lp_type type);


double
read_elem(struct lp_type type, const void *src, unsigned index);


void
write_elem(struct lp_type type, void *dst, unsigned index, double src);


void
random_elem(struct lp_type type, void *dst, unsigned index);


void
read_vec(struct lp_type type, const void *src, double *dst);


void
write_vec(struct lp_type type, void *dst, const double *src);


void
random_vec(struct lp_type type, void *dst);


boolean
compare_vec_with_eps(struct lp_type type, const void *res, const void *ref, double eps);


boolean
compare_vec(struct lp_type type, const void *res, const void *ref);


void
dump_vec(FILE *fp, struct lp_type type, const void *src);


#endif /* !LP_TEST_H */
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@a44 5
#include <llvm-c/Analysis.h>
#include <llvm-c/ExecutionEngine.h>
#include <llvm-c/Target.h>
#include <llvm-c/BitWriter.h>
#include <llvm-c/Transforms/Scalar.h>
d62 1
a62 1
test_some(struct gallivm_state *gallivm,unsigned verbose, FILE *fp,
d66 1
a66 1
test_single(struct gallivm_state *gallivm, unsigned verbose, FILE *fp);
d69 1
a69 1
test_all(struct gallivm_state *gallivm, unsigned verbose, FILE *fp);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d44 1
a44 1
#include <llvm-c/Core.h>
d67 2
a68 1
test_some(unsigned verbose, FILE *fp, unsigned long n);
d70 2
d74 1
a74 1
test_all(unsigned verbose, FILE *fp);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d44 1
a44 1
#include "gallivm/lp_bld.h"
d67 1
a67 2
test_some(struct gallivm_state *gallivm,unsigned verbose, FILE *fp,
          unsigned long n);
a68 2
boolean
test_single(struct gallivm_state *gallivm, unsigned verbose, FILE *fp);
d71 1
a71 1
test_all(struct gallivm_state *gallivm, unsigned verbose, FILE *fp);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d45 5
d67 1
a67 1
test_some(unsigned verbose, FILE *fp,
d71 1
a71 1
test_single(unsigned verbose, FILE *fp);
d74 1
a74 1
test_all(unsigned verbose, FILE *fp);
@


