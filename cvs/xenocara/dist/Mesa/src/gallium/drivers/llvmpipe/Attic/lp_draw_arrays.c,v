head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.52;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.00.32;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.25;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.57;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.07.26;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.44.34;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Author:
 *    Brian Paul
 *    Keith Whitwell
 */


#include "pipe/p_defines.h"
#include "pipe/p_context.h"
#include "util/u_prim.h"

#include "lp_context.h"
#include "lp_state.h"
#include "lp_query.h"

#include "draw/draw_context.h"



/**
 * Draw vertex arrays, with optional indexing, optional instancing.
 * All the other drawing functions are implemented in terms of this function.
 * Basically, map the vertex buffers (and drawing surfaces), then hand off
 * the drawing to the 'draw' module.
 */
static void
llvmpipe_draw_vbo(struct pipe_context *pipe, const struct pipe_draw_info *info)
{
   struct llvmpipe_context *lp = llvmpipe_context(pipe);
   struct draw_context *draw = lp->draw;
   const void *mapped_indices = NULL;
   unsigned i;

   if (!llvmpipe_check_render_cond(lp))
      return;

   if (lp->dirty)
      llvmpipe_update_derived( lp );

   /*
    * Map vertex buffers
    */
   for (i = 0; i < lp->num_vertex_buffers; i++) {
      const void *buf = lp->vertex_buffer[i].user_buffer;
      size_t size = ~0;
      if (!buf) {
         if (!lp->vertex_buffer[i].buffer) {
            continue;
         }
         buf = llvmpipe_resource_data(lp->vertex_buffer[i].buffer);
         size = lp->vertex_buffer[i].buffer->width0;
      }
      draw_set_mapped_vertex_buffer(draw, i, buf, size);
   }

   /* Map index buffer, if present */
   if (info->indexed) {
      unsigned available_space = ~0;
      mapped_indices = lp->index_buffer.user_buffer;
      if (!mapped_indices) {
         mapped_indices = llvmpipe_resource_data(lp->index_buffer.buffer);
         if (lp->index_buffer.buffer->width0 > lp->index_buffer.offset)
            available_space =
               (lp->index_buffer.buffer->width0 - lp->index_buffer.offset);
         else
            available_space = 0;
      }
      draw_set_indexes(draw,
                       (ubyte *) mapped_indices + lp->index_buffer.offset,
                       lp->index_buffer.index_size, available_space);
   }

   for (i = 0; i < lp->num_so_targets; i++) {
      void *buf = 0;
      if (lp->so_targets[i]) {
         buf = llvmpipe_resource(lp->so_targets[i]->target.buffer)->data;
         lp->so_targets[i]->mapping = buf;
      }
   }
   draw_set_mapped_so_targets(draw, lp->num_so_targets,
                              lp->so_targets);

   llvmpipe_prepare_vertex_sampling(lp,
                                    lp->num_sampler_views[PIPE_SHADER_VERTEX],
                                    lp->sampler_views[PIPE_SHADER_VERTEX]);
   llvmpipe_prepare_geometry_sampling(lp,
                                      lp->num_sampler_views[PIPE_SHADER_GEOMETRY],
                                      lp->sampler_views[PIPE_SHADER_GEOMETRY]);
   if (lp->gs && lp->gs->no_tokens) {
      /* we have an empty geometry shader with stream output, so
         attach the stream output info to the current vertex shader */
      if (lp->vs) {
         draw_vs_attach_so(lp->vs, &lp->gs->stream_output);
      }
   }
   draw_collect_pipeline_statistics(draw,
                                    lp->active_statistics_queries > 0);

   /* draw! */
   draw_vbo(draw, info);

   /*
    * unmap vertex/index buffers
    */
   for (i = 0; i < lp->num_vertex_buffers; i++) {
      draw_set_mapped_vertex_buffer(draw, i, NULL, 0);
   }
   if (mapped_indices) {
      draw_set_indexes(draw, NULL, 0, 0);
   }
   draw_set_mapped_so_targets(draw, 0, NULL);

   if (lp->gs && lp->gs->no_tokens) {
      /* we have attached stream output to the vs for rendering,
         now lets reset it */
      if (lp->vs) {
         draw_vs_reset_so(lp->vs);
      }
   }
   
   llvmpipe_cleanup_vertex_sampling(lp);
   llvmpipe_cleanup_geometry_sampling(lp);

   /*
    * TODO: Flush only when a user vertex/index buffer is present
    * (or even better, modify draw module to do this
    * internally when this condition is seen?)
    */
   draw_flush(draw);
}


void
llvmpipe_init_draw_funcs(struct llvmpipe_context *llvmpipe)
{
   llvmpipe->pipe.draw_vbo = llvmpipe_draw_vbo;
}
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a35 1
#include "util/u_draw.h"
a61 5

   if (info->indirect) {
      util_draw_indirect(pipe, info);
      return;
   }
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d36 1
d63 5
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d115 1
a115 1
   if (lp->gs && !lp->gs->shader.tokens) {
d119 1
a119 1
         draw_vs_attach_so(lp->vs->draw_data, &lp->gs->shader.stream_output);
d139 1
a139 1
   if (lp->gs && !lp->gs->shader.tokens) {
d143 1
a143 1
         draw_vs_reset_so(lp->vs->draw_data);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d40 1
d57 1
a57 1
   void *mapped_indices = NULL;
d60 3
d70 10
a79 2
      void *buf = llvmpipe_resource_data(lp->vertex_buffer[i].buffer);
      draw_set_mapped_vertex_buffer(draw, i, buf);
d83 15
a97 2
   if (info->indexed && lp->index_buffer.buffer)
      mapped_indices = llvmpipe_resource_data(lp->index_buffer.buffer);
d99 9
a107 1
   draw_set_mapped_index_buffer(draw, mapped_indices);
d110 14
a123 2
                                    lp->num_vertex_sampler_views,
                                    lp->vertex_sampler_views);
d132 1
a132 1
      draw_set_mapped_vertex_buffer(draw, i, NULL);
d135 10
a144 1
      draw_set_mapped_index_buffer(draw, NULL);
d146 1
d148 1
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a37 1
#include "lp_buffer.h"
a44 8
void
llvmpipe_draw_arrays(struct pipe_context *pipe, unsigned mode,
                     unsigned start, unsigned count)
{
   llvmpipe_draw_elements(pipe, NULL, 0, mode, start, count);
}


d46 2
a47 1
 * Draw vertex arrays, with optional indexing.
d51 2
a52 7
void
llvmpipe_draw_range_elements(struct pipe_context *pipe,
                             struct pipe_buffer *indexBuffer,
                             unsigned indexSize,
                             unsigned min_index,
                             unsigned max_index,
                             unsigned mode, unsigned start, unsigned count)
d56 1
d66 1
a66 1
      void *buf = llvmpipe_buffer(lp->vertex_buffer[i].buffer)->data;
d71 8
a78 12
   if (indexBuffer) {
      void *mapped_indexes = llvmpipe_buffer(indexBuffer)->data;
      draw_set_mapped_element_buffer_range(draw, indexSize,
                                           min_index,
                                           max_index,
                                           mapped_indexes);
   }
   else {
      /* no index/element buffer */
      draw_set_mapped_element_buffer_range(draw, 0, start,
                                           start + count - 1, NULL);
   }
d81 1
a81 1
   draw_arrays(draw, mode, start, count);
d89 2
a90 2
   if (indexBuffer) {
      draw_set_mapped_element_buffer(draw, 0, NULL);
d92 1
d104 1
a104 4
llvmpipe_draw_elements(struct pipe_context *pipe,
                       struct pipe_buffer *indexBuffer,
                       unsigned indexSize,
                       unsigned mode, unsigned start, unsigned count)
d106 1
a106 4
   llvmpipe_draw_range_elements( pipe, indexBuffer,
                                 indexSize,
                                 0, 0xffffffff,
                                 mode, start, count );
a107 1

@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d38 1
d46 8
d55 1
a55 2
 * Draw vertex arrays, with optional indexing, optional instancing.
 * All the other drawing functions are implemented in terms of this function.
d59 7
a65 2
static void
llvmpipe_draw_vbo(struct pipe_context *pipe, const struct pipe_draw_info *info)
a68 1
   void *mapped_indices = NULL;
d78 1
a78 1
      void *buf = llvmpipe_resource_data(lp->vertex_buffer[i].buffer);
d83 12
a94 8
   if (info->indexed && lp->index_buffer.buffer)
      mapped_indices = llvmpipe_resource_data(lp->index_buffer.buffer);

   draw_set_mapped_index_buffer(draw, mapped_indices);

   llvmpipe_prepare_vertex_sampling(lp,
                                    lp->num_vertex_sampler_views,
                                    lp->vertex_sampler_views);
d97 1
a97 1
   draw_vbo(draw, info);
d105 2
a106 2
   if (mapped_indices) {
      draw_set_mapped_index_buffer(draw, NULL);
a107 1
   llvmpipe_cleanup_vertex_sampling(lp);
d119 4
a122 1
llvmpipe_init_draw_funcs(struct llvmpipe_context *llvmpipe)
d124 4
a127 1
   llvmpipe->pipe.draw_vbo = llvmpipe_draw_vbo;
d129 1
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a39 1
#include "lp_query.h"
d56 1
a56 1
   const void *mapped_indices = NULL;
a58 3
   if (!llvmpipe_check_render_cond(lp))
      return;

d66 2
a67 10
      const void *buf = lp->vertex_buffer[i].user_buffer;
      size_t size = ~0;
      if (!buf) {
         if (!lp->vertex_buffer[i].buffer) {
            continue;
         }
         buf = llvmpipe_resource_data(lp->vertex_buffer[i].buffer);
         size = lp->vertex_buffer[i].buffer->width0;
      }
      draw_set_mapped_vertex_buffer(draw, i, buf, size);
d71 2
a72 15
   if (info->indexed) {
      unsigned available_space = ~0;
      mapped_indices = lp->index_buffer.user_buffer;
      if (!mapped_indices) {
         mapped_indices = llvmpipe_resource_data(lp->index_buffer.buffer);
         if (lp->index_buffer.buffer->width0 > lp->index_buffer.offset)
            available_space =
               (lp->index_buffer.buffer->width0 - lp->index_buffer.offset);
         else
            available_space = 0;
      }
      draw_set_indexes(draw,
                       (ubyte *) mapped_indices + lp->index_buffer.offset,
                       lp->index_buffer.index_size, available_space);
   }
d74 1
a74 9
   for (i = 0; i < lp->num_so_targets; i++) {
      void *buf = 0;
      if (lp->so_targets[i]) {
         buf = llvmpipe_resource(lp->so_targets[i]->target.buffer)->data;
         lp->so_targets[i]->mapping = buf;
      }
   }
   draw_set_mapped_so_targets(draw, lp->num_so_targets,
                              lp->so_targets);
d77 2
a78 14
                                    lp->num_sampler_views[PIPE_SHADER_VERTEX],
                                    lp->sampler_views[PIPE_SHADER_VERTEX]);
   llvmpipe_prepare_geometry_sampling(lp,
                                      lp->num_sampler_views[PIPE_SHADER_GEOMETRY],
                                      lp->sampler_views[PIPE_SHADER_GEOMETRY]);
   if (lp->gs && !lp->gs->shader.tokens) {
      /* we have an empty geometry shader with stream output, so
         attach the stream output info to the current vertex shader */
      if (lp->vs) {
         draw_vs_attach_so(lp->vs->draw_data, &lp->gs->shader.stream_output);
      }
   }
   draw_collect_pipeline_statistics(draw,
                                    lp->active_statistics_queries > 0);
d87 1
a87 1
      draw_set_mapped_vertex_buffer(draw, i, NULL, 0);
d90 1
a90 10
      draw_set_indexes(draw, NULL, 0, 0);
   }
   draw_set_mapped_so_targets(draw, 0, NULL);

   if (lp->gs && !lp->gs->shader.tokens) {
      /* we have attached stream output to the vs for rendering,
         now lets reset it */
      if (lp->vs) {
         draw_vs_reset_so(lp->vs->draw_data);
      }
a91 1
   
a92 1
   llvmpipe_cleanup_geometry_sampling(lp);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d115 1
a115 1
   if (lp->gs && lp->gs->no_tokens) {
d119 1
a119 1
         draw_vs_attach_so(lp->vs, &lp->gs->stream_output);
d139 1
a139 1
   if (lp->gs && lp->gs->no_tokens) {
d143 1
a143 1
         draw_vs_reset_so(lp->vs);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a35 1
#include "util/u_draw.h"
a61 5

   if (info->indirect) {
      util_draw_indirect(pipe, info);
      return;
   }
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d36 1
d63 5
@


