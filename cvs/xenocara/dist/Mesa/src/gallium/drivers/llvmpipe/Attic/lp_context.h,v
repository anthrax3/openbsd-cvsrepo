head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.52;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.00.32;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.25;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.57;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.07.26;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.44.34;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Authors:  Keith Whitwell <keithw@@vmware.com>
 */

#ifndef LP_CONTEXT_H
#define LP_CONTEXT_H

#include "pipe/p_context.h"

#include "draw/draw_vertex.h"
#include "util/u_blitter.h"

#include "lp_tex_sample.h"
#include "lp_jit.h"
#include "lp_setup.h"
#include "lp_state_fs.h"
#include "lp_state_setup.h"


struct llvmpipe_vbuf_render;
struct draw_context;
struct draw_stage;
struct draw_vertex_shader;
struct lp_fragment_shader;
struct lp_blend_state;
struct lp_setup_context;
struct lp_setup_variant;
struct lp_velems_state;

struct llvmpipe_context {
   struct pipe_context pipe;  /**< base class */

   /** Constant state objects */
   const struct pipe_blend_state *blend;
   struct pipe_sampler_state *samplers[PIPE_SHADER_TYPES][PIPE_MAX_SAMPLERS];

   const struct pipe_depth_stencil_alpha_state *depth_stencil;
   const struct pipe_rasterizer_state *rasterizer;
   struct lp_fragment_shader *fs;
   struct draw_vertex_shader *vs;
   const struct lp_geometry_shader *gs;
   const struct lp_velems_state *velems;
   const struct lp_so_state *so;

   /** Other rendering state */
   unsigned sample_mask;
   struct pipe_blend_color blend_color;
   struct pipe_stencil_ref stencil_ref;
   struct pipe_clip_state clip;
   struct pipe_constant_buffer constants[PIPE_SHADER_TYPES][LP_MAX_TGSI_CONST_BUFFERS];
   struct pipe_framebuffer_state framebuffer;
   struct pipe_poly_stipple poly_stipple;
   struct pipe_scissor_state scissors[PIPE_MAX_VIEWPORTS];
   struct pipe_sampler_view *sampler_views[PIPE_SHADER_TYPES][PIPE_MAX_SHADER_SAMPLER_VIEWS];

   struct pipe_viewport_state viewports[PIPE_MAX_VIEWPORTS];
   struct pipe_vertex_buffer vertex_buffer[PIPE_MAX_ATTRIBS];
   struct pipe_index_buffer index_buffer;
   struct pipe_resource *mapped_vs_tex[PIPE_MAX_SHADER_SAMPLER_VIEWS];
   struct pipe_resource *mapped_gs_tex[PIPE_MAX_SHADER_SAMPLER_VIEWS];

   unsigned num_samplers[PIPE_SHADER_TYPES];
   unsigned num_sampler_views[PIPE_SHADER_TYPES];

   unsigned num_vertex_buffers;

   struct draw_so_target *so_targets[PIPE_MAX_SO_BUFFERS];
   int num_so_targets;
   struct pipe_query_data_so_statistics so_stats;

   struct pipe_query_data_pipeline_statistics pipeline_statistics;
   unsigned active_statistics_queries;

   unsigned active_occlusion_queries;

   unsigned dirty; /**< Mask of LP_NEW_x flags */

   /** Mapped vertex buffers */
   ubyte *mapped_vbuffer[PIPE_MAX_ATTRIBS];
   
   /** Vertex format */
   struct vertex_info vertex_info;
   
   /** Which vertex shader output slot contains color */
   int color_slot[2];

   /** Which vertex shader output slot contains bcolor */
   int bcolor_slot[2];

   /** Which vertex shader output slot contains point size */
   int psize_slot;

   /** Which vertex shader output slot contains viewport index */
   int viewport_index_slot;

   /** Which geometry shader output slot contains layer */
   int layer_slot;

   /** A fake frontface output for unfilled primitives */
   int face_slot;

   /** Depth format and bias settings. */
   boolean floating_point_depth;
   double mrd;   /**< minimum resolvable depth value, for polygon offset */

   /** The tiling engine */
   struct lp_setup_context *setup;
   struct lp_setup_variant setup_variant;

   /** The primitive drawing context */
   struct draw_context *draw;

   struct blitter_context *blitter;

   unsigned tex_timestamp;
   boolean no_rast;

   /** List of all fragment shader variants */
   struct lp_fs_variant_list_item fs_variants_list;
   unsigned nr_fs_variants;
   unsigned nr_fs_instrs;

   struct lp_setup_variant_list_item setup_variants_list;
   unsigned nr_setup_variants;

   /** Conditional query object and mode */
   struct pipe_query *render_cond_query;
   uint render_cond_mode;
   boolean render_cond_cond;
};


/**
 * Fragment and setup variant count, used to trigger garbage collection.
 * This is global since all variants in all contexts will be free when
 * we do garbage collection.
 */
extern unsigned llvmpipe_variant_count;


struct pipe_context *
llvmpipe_create_context( struct pipe_screen *screen, void *priv );

struct pipe_resource *
llvmpipe_user_buffer_create(struct pipe_screen *screen,
                            void *ptr,
                            unsigned bytes,
			    unsigned bind_flags);


static INLINE struct llvmpipe_context *
llvmpipe_context( struct pipe_context *pipe )
{
   return (struct llvmpipe_context *)pipe;
}

#endif /* LP_CONTEXT_H */

@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d156 2
d159 6
a164 3
   /** The LLVMContext to use for LLVM related work */
   LLVMContextRef context;
};
d174 1
a174 1
                            unsigned bind_flags);
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d156 3
a161 8
/**
 * Fragment and setup variant count, used to trigger garbage collection.
 * This is global since all variants in all contexts will be free when
 * we do garbage collection.
 */
extern unsigned llvmpipe_variant_count;


d169 1
a169 1
			    unsigned bind_flags);
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d28 1
a28 1
/* Authors:  Keith Whitwell <keith@@tungstengraphics.com>
d49 1
a50 1
struct lp_vertex_shader;
d66 1
a66 1
   const struct lp_vertex_shader *vs;
d72 1
a95 1
   unsigned num_primitives_generated;
d125 7
a131 3
   /**< minimum resolvable depth value, for polygon offset */   
   double mrd;
   
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d37 1
d61 2
a62 2
   const struct pipe_sampler_state *sampler[PIPE_MAX_SAMPLERS];
   struct pipe_sampler_state *vertex_samplers[PIPE_MAX_VERTEX_SAMPLERS];
d75 1
a75 1
   struct pipe_resource *constants[PIPE_SHADER_TYPES][PIPE_MAX_CONSTANT_BUFFERS];
d78 4
a81 4
   struct pipe_scissor_state scissor;
   struct pipe_sampler_view *fragment_sampler_views[PIPE_MAX_SAMPLERS];
   struct pipe_sampler_view *vertex_sampler_views[PIPE_MAX_VERTEX_SAMPLERS];
   struct pipe_viewport_state viewport;
d84 6
a89 12
   struct {
      struct llvmpipe_resource *buffer[PIPE_MAX_SO_BUFFERS];
      int offset[PIPE_MAX_SO_BUFFERS];
      int so_count[PIPE_MAX_SO_BUFFERS];
      int num_buffers;
   } so_target;
   struct pipe_resource *mapped_vs_tex[PIPE_MAX_VERTEX_SAMPLERS];

   unsigned num_samplers;
   unsigned num_fragment_sampler_views;
   unsigned num_vertex_samplers;
   unsigned num_vertex_sampler_views;
d92 10
a103 2
   int active_query_count;

d119 6
d135 2
d143 1
a143 4

   /** JIT code generation */
   struct gallivm_state *gallivm;
   LLVMTypeRef jit_context_ptr_type;
d147 5
d165 6
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d40 3
d51 3
a53 1
struct setup_context;
d66 3
d74 1
a74 1
   struct pipe_buffer *constants[PIPE_SHADER_TYPES];
d78 2
a79 2
   struct pipe_texture *texture[PIPE_MAX_SAMPLERS];
   struct pipe_texture *vertex_textures[PIPE_MAX_VERTEX_SAMPLERS];
d82 8
a89 1
   struct pipe_vertex_element vertex_element[PIPE_MAX_ATTRIBS];
d92 1
a92 1
   unsigned num_textures;
d94 1
a94 2
   unsigned num_vertex_textures;
   unsigned num_vertex_elements;
d99 1
a99 5
   /* Counter for occlusion queries.  Note this supports overlapping
    * queries.
    */
   uint64_t occlusion_count;
   unsigned active_query_count;
d106 6
d116 3
d120 2
a121 1
   struct setup_context *setup;
d129 10
d140 8
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a39 3
#include "lp_setup.h"
#include "lp_state_fs.h"
#include "lp_state_setup.h"
d48 1
a48 3
struct lp_setup_context;
struct lp_setup_variant;
struct lp_velems_state;
a60 3
   const struct lp_geometry_shader *gs;
   const struct lp_velems_state *velems;
   const struct lp_so_state *so;
d66 1
a66 1
   struct pipe_resource *constants[PIPE_SHADER_TYPES][PIPE_MAX_CONSTANT_BUFFERS];
d70 2
a71 2
   struct pipe_sampler_view *fragment_sampler_views[PIPE_MAX_SAMPLERS];
   struct pipe_sampler_view *vertex_sampler_views[PIPE_MAX_VERTEX_SAMPLERS];
d74 1
a74 8
   struct pipe_index_buffer index_buffer;
   struct {
      struct llvmpipe_resource *buffer[PIPE_MAX_SO_BUFFERS];
      int offset[PIPE_MAX_SO_BUFFERS];
      int so_count[PIPE_MAX_SO_BUFFERS];
      int num_buffers;
   } so_target;
   struct pipe_resource *mapped_vs_tex[PIPE_MAX_VERTEX_SAMPLERS];
d77 1
a77 1
   unsigned num_fragment_sampler_views;
d79 2
a80 1
   unsigned num_vertex_sampler_views;
d85 5
a89 1
   int active_query_count;
a95 6
   
   /** Which vertex shader output slot contains color */
   int color_slot[2];

   /** Which vertex shader output slot contains bcolor */
   int bcolor_slot[2];
a99 3
   /**< minimum resolvable depth value, for polygon offset */   
   double mrd;
   
d101 1
a101 2
   struct lp_setup_context *setup;
   struct lp_setup_variant setup_variant;
a108 10
   /** List of all fragment shader variants */
   struct lp_fs_variant_list_item fs_variants_list;
   unsigned nr_fs_variants;

   /** JIT code generation */
   struct gallivm_state *gallivm;
   LLVMTypeRef jit_context_ptr_type;

   struct lp_setup_variant_list_item setup_variants_list;
   unsigned nr_setup_variants;
a109 8


/**
 * Fragment and setup variant count, used to trigger garbage collection.
 * This is global since all variants in all contexts will be free when
 * we do garbage collection.
 */
extern unsigned llvmpipe_variant_count;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a36 1
#include "util/u_blitter.h"
d60 2
a61 2
   struct pipe_sampler_state *samplers[PIPE_SHADER_TYPES][PIPE_MAX_SAMPLERS];

d74 1
a74 1
   struct pipe_constant_buffer constants[PIPE_SHADER_TYPES][LP_MAX_TGSI_CONST_BUFFERS];
d77 4
a80 4
   struct pipe_scissor_state scissors[PIPE_MAX_VIEWPORTS];
   struct pipe_sampler_view *sampler_views[PIPE_SHADER_TYPES][PIPE_MAX_SHADER_SAMPLER_VIEWS];

   struct pipe_viewport_state viewports[PIPE_MAX_VIEWPORTS];
d83 12
a94 6
   struct pipe_resource *mapped_vs_tex[PIPE_MAX_SHADER_SAMPLER_VIEWS];
   struct pipe_resource *mapped_gs_tex[PIPE_MAX_SHADER_SAMPLER_VIEWS];

   unsigned num_samplers[PIPE_SHADER_TYPES];
   unsigned num_sampler_views[PIPE_SHADER_TYPES];

d97 1
a97 9
   struct draw_so_target *so_targets[PIPE_MAX_SO_BUFFERS];
   int num_so_targets;
   struct pipe_query_data_so_statistics so_stats;
   unsigned num_primitives_generated;

   struct pipe_query_data_pipeline_statistics pipeline_statistics;
   unsigned active_statistics_queries;

   unsigned active_occlusion_queries;
d99 1
a99 1
   unsigned dirty; /**< Mask of LP_NEW_x flags */
a115 6
   /** Which vertex shader output slot contains viewport index */
   int viewport_index_slot;

   /** Which geometry shader output slot contains layer */
   int layer_slot;

a125 2
   struct blitter_context *blitter;

d132 4
a135 1
   unsigned nr_fs_instrs;
a138 5

   /** Conditional query object and mode */
   struct pipe_query *render_cond_query;
   uint render_cond_mode;
   boolean render_cond_cond;
a151 6

struct pipe_resource *
llvmpipe_user_buffer_create(struct pipe_screen *screen,
                            void *ptr,
                            unsigned bytes,
			    unsigned bind_flags);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d28 1
a28 1
/* Authors:  Keith Whitwell <keithw@@vmware.com>
a48 1
struct draw_vertex_shader;
d50 1
d66 1
a66 1
   struct draw_vertex_shader *vs;
a71 1
   unsigned sample_mask;
d95 1
d125 3
a127 7
   /** A fake frontface output for unfilled primitives */
   int face_slot;

   /** Depth format and bias settings. */
   boolean floating_point_depth;
   double mrd;   /**< minimum resolvable depth value, for polygon offset */

@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d156 2
d159 6
a164 3
   /** The LLVMContext to use for LLVM related work */
   LLVMContextRef context;
};
d174 1
a174 1
                            unsigned bind_flags);
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d156 3
a161 8
/**
 * Fragment and setup variant count, used to trigger garbage collection.
 * This is global since all variants in all contexts will be free when
 * we do garbage collection.
 */
extern unsigned llvmpipe_variant_count;


d169 1
a169 1
			    unsigned bind_flags);
@


