head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.00.34;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.27;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.58;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2007-2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


/**
 * The setup code is concerned with point/line/triangle setup and
 * putting commands/data into the bins.
 */


#ifndef LP_SETUP_CONTEXT_H
#define LP_SETUP_CONTEXT_H

#include "lp_setup.h"
#include "lp_rast.h"
#include "lp_scene.h"
#include "lp_bld_interp.h"	/* for struct lp_shader_input */

#include "draw/draw_vbuf.h"
#include "util/u_rect.h"
#include "util/u_pack_color.h"

#define LP_SETUP_NEW_FS          0x01
#define LP_SETUP_NEW_CONSTANTS   0x02
#define LP_SETUP_NEW_BLEND_COLOR 0x04
#define LP_SETUP_NEW_SCISSOR     0x08
#define LP_SETUP_NEW_VIEWPORTS   0x10


struct lp_setup_variant;


/** Max number of scenes */
#define MAX_SCENES 2



/**
 * Point/line/triangle setup context.
 * Note: "stored" below indicates data which is stored in the bins,
 * not arbitrary malloc'd memory.
 *
 *
 * Subclass of vbuf_render, plugged directly into the draw module as
 * the rendering backend.
 */
struct lp_setup_context
{
   struct vbuf_render base;

   struct pipe_context *pipe;
   struct vertex_info *vertex_info;
   uint prim;
   uint vertex_size;
   uint nr_vertices;
   uint sprite_coord_enable, sprite_coord_origin;
   uint vertex_buffer_size;
   void *vertex_buffer;

   /* Final pipeline stage for draw module.  Draw module should
    * create/install this itself now.
    */
   struct draw_stage *vbuf;
   unsigned num_threads;
   unsigned scene_idx;
   struct lp_scene *scenes[MAX_SCENES];  /**< all the scenes */
   struct lp_scene *scene;               /**< current scene being built */

   struct lp_fence *last_fence;
   struct llvmpipe_query *active_queries[LP_MAX_ACTIVE_BINNED_QUERIES];
   unsigned active_binned_queries;

   boolean flatshade_first;
   boolean ccw_is_frontface;
   boolean scissor_test;
   boolean point_size_per_vertex;
   boolean rasterizer_discard;
   unsigned cullmode;
   unsigned bottom_edge_rule;
   float pixel_offset;
   float line_width;
   float point_size;
   float psize;
   unsigned viewport_index_slot;
   unsigned layer_slot;
   int face_slot;

   struct pipe_framebuffer_state fb;
   struct u_rect framebuffer;
   struct u_rect scissors[PIPE_MAX_VIEWPORTS];
   struct u_rect draw_regions[PIPE_MAX_VIEWPORTS];   /* intersection of fb & scissor */
   struct lp_jit_viewport viewports[PIPE_MAX_VIEWPORTS];

   struct {
      unsigned flags;
      union util_color color_val[PIPE_MAX_COLOR_BUFS];
      uint64_t zsmask;
      uint64_t zsvalue;               /**< lp_rast_clear_zstencil() cmd */
   } clear;

   enum setup_state {
      SETUP_FLUSHED,    /**< scene is null */
      SETUP_CLEARED,    /**< scene exists but has only clears */
      SETUP_ACTIVE      /**< scene exists and has at least one draw/query */
   } state;
   
   struct {
      const struct lp_rast_state *stored; /**< what's in the scene */
      struct lp_rast_state current;  /**< currently set state */
      struct pipe_resource *current_tex[PIPE_MAX_SHADER_SAMPLER_VIEWS];
   } fs;

   /** fragment shader constants */
   struct {
      struct pipe_constant_buffer current;
      unsigned stored_size;
      const void *stored_data;
   } constants[LP_MAX_TGSI_CONST_BUFFERS];

   struct {
      struct pipe_blend_color current;
      uint8_t *stored;
   } blend_color;


   struct {
      const struct lp_setup_variant *variant;
   } setup;

   unsigned dirty;   /**< bitmask of LP_SETUP_NEW_x bits */

   void (*point)( struct lp_setup_context *,
                  const float (*v0)[4]);

   void (*line)( struct lp_setup_context *,
                 const float (*v0)[4],
                 const float (*v1)[4]);

   void (*triangle)( struct lp_setup_context *,
                     const float (*v0)[4],
                     const float (*v1)[4],
                     const float (*v2)[4]);
};

void lp_setup_choose_triangle( struct lp_setup_context *setup );
void lp_setup_choose_line( struct lp_setup_context *setup );
void lp_setup_choose_point( struct lp_setup_context *setup );

void lp_setup_init_vbuf(struct lp_setup_context *setup);

boolean lp_setup_update_state( struct lp_setup_context *setup,
                            boolean update_scene);

void lp_setup_destroy( struct lp_setup_context *setup );

boolean lp_setup_flush_and_restart(struct lp_setup_context *setup);

void
lp_setup_print_triangle(struct lp_setup_context *setup,
                        const float (*v0)[4],
                        const float (*v1)[4],
                        const float (*v2)[4]);

void
lp_setup_print_vertex(struct lp_setup_context *setup,
                      const char *name,
                      const float (*v)[4]);


struct lp_rast_triangle *
lp_setup_alloc_triangle(struct lp_scene *scene,
                        unsigned num_inputs,
                        unsigned nr_planes,
                        unsigned *tri_size);

boolean
lp_setup_bin_triangle( struct lp_setup_context *setup,
                       struct lp_rast_triangle *tri,
                       const struct u_rect *bbox,
                       int nr_planes,
                       unsigned scissor_index );

#endif
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d45 1
d51 1
a96 1
   boolean subdivide_large_triangles;
d110 1
d116 1
d120 1
a120 1
      union lp_rast_cmd_arg color;    /**< lp_rast_clear_color() cmd */
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a39 1
#include "lp_tile_soa.h"        /* for TILE_SIZE */
d92 2
a93 1
   struct llvmpipe_query *active_query;
d95 1
d100 1
d102 1
d107 2
d112 2
a113 2
   struct u_rect scissor;
   struct u_rect draw_region;   /* intersection of fb & scissor */
d118 2
a119 2
      unsigned zsmask;
      unsigned zsvalue;               /**< lp_rast_clear_zstencil() cmd */
d131 1
a131 1
      struct pipe_resource *current_tex[PIPE_MAX_SAMPLERS];
d136 1
a136 1
      struct pipe_resource *current;
d139 1
a139 1
   } constants;
d201 2
a202 1
                       int nr_planes );
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d42 1
d45 1
d53 1
a53 1
struct lp_scene_queue;
d70 1
a70 1
struct setup_context
d74 1
d79 1
d87 2
a88 1
   struct lp_rasterizer *rast;
d91 3
a93 1
   struct lp_scene_queue *empty_scenes;  /**< queue of empty scenes */
d98 1
d100 4
d106 3
d113 2
a114 1
      union lp_rast_cmd_arg zstencil; /**< lp_rast_clear_zstencil() cmd */
d117 4
a120 4
   enum {
      SETUP_FLUSHED,
      SETUP_CLEARED,
      SETUP_ACTIVE
a123 3
      struct lp_shader_input input[PIPE_MAX_ATTRIBS];
      unsigned nr_inputs;

d126 1
d131 1
a131 1
      struct pipe_buffer *current;
d141 1
d143 2
a144 3
      struct pipe_scissor_state current;
      const void *stored;
   } scissor;
d148 1
a148 1
   void (*point)( struct setup_context *,
d151 1
a151 1
   void (*line)( struct setup_context *,
d155 1
a155 1
   void (*triangle)( struct setup_context *,
d161 36
a196 11
void lp_setup_choose_triangle( struct setup_context *setup );
void lp_setup_choose_line( struct setup_context *setup );
void lp_setup_choose_point( struct setup_context *setup );

struct lp_scene *lp_setup_get_current_scene(struct setup_context *setup);

void lp_setup_init_vbuf(struct setup_context *setup);

void lp_setup_update_state( struct setup_context *setup );

void lp_setup_destroy( struct setup_context *setup );
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a41 1
#include "lp_bld_interp.h"	/* for struct lp_shader_input */
a43 1
#include "util/u_rect.h"
d51 1
a51 1
struct lp_setup_variant;
d68 1
a68 1
struct lp_setup_context
a71 1
   struct pipe_context *pipe;
a75 1
   uint sprite_coord_enable, sprite_coord_origin;
d83 1
a83 2
   unsigned num_threads;
   unsigned scene_idx;
d86 1
a86 3

   struct lp_fence *last_fence;
   struct llvmpipe_query *active_query;
a90 1
   boolean point_size_per_vertex;
a91 4
   float pixel_offset;
   float line_width;
   float point_size;
   float psize;
a93 3
   struct u_rect framebuffer;
   struct u_rect scissor;
   struct u_rect draw_region;   /* intersection of fb & scissor */
d98 1
a98 2
      unsigned zsmask;
      unsigned zsvalue;               /**< lp_rast_clear_zstencil() cmd */
d101 4
a104 4
   enum setup_state {
      SETUP_FLUSHED,    /**< scene is null */
      SETUP_CLEARED,    /**< scene exists but has only clears */
      SETUP_ACTIVE      /**< scene exists and has at least one draw/query */
d108 3
a112 1
      struct pipe_resource *current_tex[PIPE_MAX_SAMPLERS];
d117 1
a117 1
      struct pipe_resource *current;
a126 1

d128 3
a130 2
      const struct lp_setup_variant *variant;
   } setup;
d134 1
a134 1
   void (*point)( struct lp_setup_context *,
d137 1
a137 1
   void (*line)( struct lp_setup_context *,
d141 1
a141 1
   void (*triangle)( struct lp_setup_context *,
d147 11
a157 36
void lp_setup_choose_triangle( struct lp_setup_context *setup );
void lp_setup_choose_line( struct lp_setup_context *setup );
void lp_setup_choose_point( struct lp_setup_context *setup );

void lp_setup_init_vbuf(struct lp_setup_context *setup);

boolean lp_setup_update_state( struct lp_setup_context *setup,
                            boolean update_scene);

void lp_setup_destroy( struct lp_setup_context *setup );

boolean lp_setup_flush_and_restart(struct lp_setup_context *setup);

void
lp_setup_print_triangle(struct lp_setup_context *setup,
                        const float (*v0)[4],
                        const float (*v1)[4],
                        const float (*v2)[4]);

void
lp_setup_print_vertex(struct lp_setup_context *setup,
                      const char *name,
                      const float (*v)[4]);


struct lp_rast_triangle *
lp_setup_alloc_triangle(struct lp_scene *scene,
                        unsigned num_inputs,
                        unsigned nr_planes,
                        unsigned *tri_size);

boolean
lp_setup_bin_triangle( struct lp_setup_context *setup,
                       struct lp_rast_triangle *tri,
                       const struct u_rect *bbox,
                       int nr_planes );
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d40 1
d93 1
a93 2
   struct llvmpipe_query *active_queries[LP_MAX_ACTIVE_BINNED_QUERIES];
   unsigned active_binned_queries;
a94 1
   boolean subdivide_large_triangles;
a98 1
   boolean rasterizer_discard;
a99 1
   unsigned bottom_edge_rule;
a103 2
   unsigned viewport_index_slot;
   unsigned layer_slot;
d107 2
a108 2
   struct u_rect scissors[PIPE_MAX_VIEWPORTS];
   struct u_rect draw_regions[PIPE_MAX_VIEWPORTS];   /* intersection of fb & scissor */
d113 2
a114 2
      uint64_t zsmask;
      uint64_t zsvalue;               /**< lp_rast_clear_zstencil() cmd */
d126 1
a126 1
      struct pipe_resource *current_tex[PIPE_MAX_SHADER_SAMPLER_VIEWS];
d131 1
a131 1
      struct pipe_constant_buffer current;
d134 1
a134 1
   } constants[LP_MAX_TGSI_CONST_BUFFERS];
d196 1
a196 2
                       int nr_planes,
                       unsigned scissor_index );
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a44 1
#include "util/u_pack_color.h"
a49 1
#define LP_SETUP_NEW_VIEWPORTS   0x10
d95 1
a108 1
   int face_slot;
a113 1
   struct lp_jit_viewport viewports[PIPE_MAX_VIEWPORTS];
d117 1
a117 1
      union util_color color_val[PIPE_MAX_COLOR_BUFS];
@


