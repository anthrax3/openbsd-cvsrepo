head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.02.20.23.09.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	4ry2gvZGMXkCUD2n;

1.4
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.3;
commitid	mcxB0JvoI9gTDYXU;

1.3
date	2013.09.05.14.00.35;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.31;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2015.01.25.14.07.32;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.44.40;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


#include <stdlib.h>
#include <stdio.h>
#include <float.h>

#include "util/u_memory.h"
#include "util/u_pointer.h"
#include "util/u_string.h"
#include "util/u_format.h"
#include "util/u_format_tests.h"
#include "util/u_format_s3tc.h"

#include "gallivm/lp_bld.h"
#include "gallivm/lp_bld_debug.h"
#include "gallivm/lp_bld_format.h"
#include "gallivm/lp_bld_init.h"

#include "lp_test.h"


void
write_tsv_header(FILE *fp)
{
   fprintf(fp,
           "result\t"
           "format\n");

   fflush(fp);
}


static void
write_tsv_row(FILE *fp,
              const struct util_format_description *desc,
              boolean success)
{
   fprintf(fp, "%s\t", success ? "pass" : "fail");

   fprintf(fp, "%s\n", desc->name);

   fflush(fp);
}


typedef void
(*fetch_ptr_t)(void *unpacked, const void *packed,
               unsigned i, unsigned j);


static LLVMValueRef
add_fetch_rgba_test(struct gallivm_state *gallivm, unsigned verbose,
                    const struct util_format_description *desc,
                    struct lp_type type)
{
   char name[256];
   LLVMContextRef context = gallivm->context;
   LLVMModuleRef module = gallivm->module;
   LLVMBuilderRef builder = gallivm->builder;
   LLVMTypeRef args[4];
   LLVMValueRef func;
   LLVMValueRef packed_ptr;
   LLVMValueRef offset = LLVMConstNull(LLVMInt32TypeInContext(context));
   LLVMValueRef rgba_ptr;
   LLVMValueRef i;
   LLVMValueRef j;
   LLVMBasicBlockRef block;
   LLVMValueRef rgba;

   util_snprintf(name, sizeof name, "fetch_%s_%s", desc->short_name,
                 type.floating ? "float" : "unorm8");

   args[0] = LLVMPointerType(lp_build_vec_type(gallivm, type), 0);
   args[1] = LLVMPointerType(LLVMInt8TypeInContext(context), 0);
   args[3] = args[2] = LLVMInt32TypeInContext(context);

   func = LLVMAddFunction(module, name,
                          LLVMFunctionType(LLVMVoidTypeInContext(context),
                                           args, Elements(args), 0));
   LLVMSetFunctionCallConv(func, LLVMCCallConv);
   rgba_ptr = LLVMGetParam(func, 0);
   packed_ptr = LLVMGetParam(func, 1);
   i = LLVMGetParam(func, 2);
   j = LLVMGetParam(func, 3);

   block = LLVMAppendBasicBlockInContext(context, func, "entry");
   LLVMPositionBuilderAtEnd(builder, block);

   rgba = lp_build_fetch_rgba_aos(gallivm, desc, type,
                                  packed_ptr, offset, i, j);

   LLVMBuildStore(builder, rgba, rgba_ptr);

   LLVMBuildRetVoid(builder);

   gallivm_verify_function(gallivm, func);

   return func;
}


PIPE_ALIGN_STACK
static boolean
test_format_float(unsigned verbose, FILE *fp,
                  const struct util_format_description *desc)
{
   struct gallivm_state *gallivm;
   LLVMValueRef fetch = NULL;
   fetch_ptr_t fetch_ptr;
   PIPE_ALIGN_VAR(16) float unpacked[4];
   boolean first = TRUE;
   boolean success = TRUE;
   unsigned i, j, k, l;

   gallivm = gallivm_create();

   fetch = add_fetch_rgba_test(gallivm, verbose, desc, lp_float32_vec4_type());

   gallivm_compile_module(gallivm);

   fetch_ptr = (fetch_ptr_t) gallivm_jit_function(gallivm, fetch);

   for (l = 0; l < util_format_nr_test_cases; ++l) {
      const struct util_format_test_case *test = &util_format_test_cases[l];

      if (test->format == desc->format) {

         if (first) {
            printf("Testing %s (float) ...\n",
                   desc->name);
            first = FALSE;
         }

         for (i = 0; i < desc->block.height; ++i) {
            for (j = 0; j < desc->block.width; ++j) {
               boolean match = TRUE;

               memset(unpacked, 0, sizeof unpacked);

               fetch_ptr(unpacked, test->packed, j, i);

               for(k = 0; k < 4; ++k) {
                  if (util_double_inf_sign(test->unpacked[i][j][k]) != util_inf_sign(unpacked[k])) {
                     match = FALSE;
                  }

                  if (util_is_double_nan(test->unpacked[i][j][k]) != util_is_nan(unpacked[k])) {
                     match = FALSE;
                  }

                  if (!util_is_double_inf_or_nan(test->unpacked[i][j][k]) &&
                      fabs((float)test->unpacked[i][j][k] - unpacked[k]) > FLT_EPSILON) {
                     match = FALSE;
                  }
               }

               if (!match) {
                  printf("FAILED\n");
                  printf("  Packed: %02x %02x %02x %02x\n",
                         test->packed[0], test->packed[1], test->packed[2], test->packed[3]);
                  printf("  Unpacked (%u,%u): %.9g %.9g %.9g %.9g obtained\n",
                         j, i,
                         unpacked[0], unpacked[1], unpacked[2], unpacked[3]);
                  printf("                  %.9g %.9g %.9g %.9g expected\n",
                         test->unpacked[i][j][0],
                         test->unpacked[i][j][1],
                         test->unpacked[i][j][2],
                         test->unpacked[i][j][3]);
                  success = FALSE;
               }
            }
         }
      }
   }

   gallivm_free_function(gallivm, fetch, fetch_ptr);

   gallivm_destroy(gallivm);

   if(fp)
      write_tsv_row(fp, desc, success);

   return success;
}


PIPE_ALIGN_STACK
static boolean
test_format_unorm8(unsigned verbose, FILE *fp,
                   const struct util_format_description *desc)
{
   struct gallivm_state *gallivm;
   LLVMValueRef fetch = NULL;
   fetch_ptr_t fetch_ptr;
   uint8_t unpacked[4];
   boolean first = TRUE;
   boolean success = TRUE;
   unsigned i, j, k, l;

   gallivm = gallivm_create();

   fetch = add_fetch_rgba_test(gallivm, verbose, desc, lp_unorm8_vec4_type());

   gallivm_compile_module(gallivm);

   fetch_ptr = (fetch_ptr_t) gallivm_jit_function(gallivm, fetch);

   for (l = 0; l < util_format_nr_test_cases; ++l) {
      const struct util_format_test_case *test = &util_format_test_cases[l];

      if (test->format == desc->format) {

         if (first) {
            printf("Testing %s (unorm8) ...\n",
                   desc->name);
            first = FALSE;
         }

         for (i = 0; i < desc->block.height; ++i) {
            for (j = 0; j < desc->block.width; ++j) {
               boolean match;

               memset(unpacked, 0, sizeof unpacked);

               fetch_ptr(unpacked, test->packed, j, i);

               match = TRUE;
               for(k = 0; k < 4; ++k) {
                  int error = float_to_ubyte(test->unpacked[i][j][k]) - unpacked[k];

                  if (util_is_double_nan(test->unpacked[i][j][k]))
                     continue;

                  if (error < 0)
                     error = -error;

                  if (error > 1)
                     match = FALSE;
               }

               if (!match) {
                  printf("FAILED\n");
                  printf("  Packed: %02x %02x %02x %02x\n",
                         test->packed[0], test->packed[1], test->packed[2], test->packed[3]);
                  printf("  Unpacked (%u,%u): %02x %02x %02x %02x obtained\n",
                         j, i,
                         unpacked[0], unpacked[1], unpacked[2], unpacked[3]);
                  printf("                  %02x %02x %02x %02x expected\n",
                         float_to_ubyte(test->unpacked[i][j][0]),
                         float_to_ubyte(test->unpacked[i][j][1]),
                         float_to_ubyte(test->unpacked[i][j][2]),
                         float_to_ubyte(test->unpacked[i][j][3]));

                  success = FALSE;
               }
            }
         }
      }
   }

   gallivm_free_function(gallivm, fetch, fetch_ptr);

   gallivm_destroy(gallivm);

   if(fp)
      write_tsv_row(fp, desc, success);

   return success;
}




static boolean
test_one(unsigned verbose, FILE *fp,
         const struct util_format_description *format_desc)
{
   boolean success = TRUE;

   if (!test_format_float(verbose, fp, format_desc)) {
     success = FALSE;
   }

   if (!test_format_unorm8(verbose, fp, format_desc)) {
     success = FALSE;
   }

   return success;
}


boolean
test_all(unsigned verbose, FILE *fp)
{
   enum pipe_format format;
   boolean success = TRUE;

   util_format_s3tc_init();

   for (format = 1; format < PIPE_FORMAT_COUNT; ++format) {
      const struct util_format_description *format_desc;

      format_desc = util_format_description(format);
      if (!format_desc) {
         continue;
      }


      /*
       * TODO: test more
       */

      if (format_desc->colorspace == UTIL_FORMAT_COLORSPACE_ZS) {
         continue;
      }

      if (util_format_is_pure_integer(format))
	 continue;

      if (format_desc->layout == UTIL_FORMAT_LAYOUT_S3TC &&
          !util_format_s3tc_enabled) {
         continue;
      }

      if (!test_one(verbose, fp, format_desc)) {
           success = FALSE;
      }
   }

   return success;
}


boolean
test_some(unsigned verbose, FILE *fp,
          unsigned long n)
{
   return test_all(verbose, fp);
}


boolean
test_single(unsigned verbose, FILE *fp)
{
   printf("no test_single()");
   return TRUE;
}
@


1.5
log
@Merge Mesa 10.2.9
@
text
@@


1.4
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a135 1
   PIPE_ALIGN_VAR(16) uint8_t packed[UTIL_FORMAT_MAX_PACKED_BYTES];
d141 1
a141 1
   gallivm = gallivm_create("test_module_float", LLVMGetGlobalContext());
a148 2
   gallivm_free_ir(gallivm);

a156 1
            fflush(stdout);
a159 3
         /* To ensure it's 16-byte aligned */
         memcpy(packed, test->packed, sizeof packed);

d166 1
a166 1
               fetch_ptr(unpacked, packed, j, i);
a194 1
                  fflush(stdout);
d202 2
a220 1
   PIPE_ALIGN_VAR(16) uint8_t packed[UTIL_FORMAT_MAX_PACKED_BYTES];
d226 1
a226 1
   gallivm = gallivm_create("test_module_unorm8", LLVMGetGlobalContext());
a233 2
   gallivm_free_ir(gallivm);

a244 3
         /* To ensure it's 16-byte aligned */
         memcpy(packed, test->packed, sizeof packed);

d251 1
a251 1
               fetch_ptr(unpacked, packed, j, i);
d286 2
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d136 1
d142 1
a142 1
   gallivm = gallivm_create();
d150 2
d160 1
d164 3
d173 1
a173 1
               fetch_ptr(unpacked, test->packed, j, i);
d202 1
a209 2
   gallivm_free_function(gallivm, fetch, fetch_ptr);

d227 1
d233 1
a233 1
   gallivm = gallivm_create();
d241 2
d254 3
d263 1
a263 1
               fetch_ptr(unpacked, test->packed, j, i);
a297 2

   gallivm_free_function(gallivm, fetch, fetch_ptr);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a85 1
   LLVMPassManagerRef passmgr = gallivm->passmgr;
d122 1
a122 10
   if (LLVMVerifyFunction(func, LLVMPrintMessageAction)) {
      LLVMDumpValue(func);
      abort();
   }

   LLVMRunFunctionPassManager(passmgr, func);

   if (verbose >= 1) {
      LLVMDumpValue(func);
   }
d130 1
a130 1
test_format_float(struct gallivm_state *gallivm, unsigned verbose, FILE *fp,
d133 1
a134 1
   LLVMExecutionEngineRef engine = gallivm->engine;
d140 2
a141 1
   void *f;
d145 1
a145 2
   f = LLVMGetPointerToGlobal(engine, fetch);
   fetch_ptr = (fetch_ptr_t) pointer_to_func(f);
d147 1
a147 3
   if (verbose >= 2) {
      lp_disassemble(f);
   }
d162 1
a162 1
               boolean match;
d168 11
a178 3
               match = TRUE;
               for(k = 0; k < 4; ++k)
                  if (fabs((float)test->unpacked[i][j][k] - unpacked[k]) > FLT_EPSILON)
d180 2
d187 1
a187 1
                  printf("  Unpacked (%u,%u): %f %f %f %f obtained\n",
d190 1
a190 1
                  printf("                  %f %f %f %f expected\n",
d202 1
a202 5
   if (!success) {
      if (verbose < 1) {
         LLVMDumpValue(fetch);
      }
   }
d204 1
a204 2
   LLVMFreeMachineCodeForFunction(engine, fetch);
   LLVMDeleteFunction(fetch);
d215 1
a215 2
test_format_unorm8(struct gallivm_state *gallivm,
                   unsigned verbose, FILE *fp,
d218 1
d225 2
a226 1
   void *f;
d230 1
a230 2
   f = LLVMGetPointerToGlobal(gallivm->engine, fetch);
   fetch_ptr = (fetch_ptr_t) pointer_to_func(f);
d232 1
a232 3
   if (verbose >= 2) {
      lp_disassemble(f);
   }
d256 4
d262 1
d279 1
d287 1
a287 2
   if (!success)
      LLVMDumpValue(fetch);
d289 1
a289 2
   LLVMFreeMachineCodeForFunction(gallivm->engine, fetch);
   LLVMDeleteFunction(fetch);
d301 1
a301 2
test_one(struct gallivm_state *gallivm,
         unsigned verbose, FILE *fp,
d306 1
a306 1
   if (!test_format_float(gallivm, verbose, fp, format_desc)) {
d310 1
a310 1
   if (!test_format_unorm8(gallivm, verbose, fp, format_desc)) {
d319 1
a319 1
test_all(struct gallivm_state *gallivm, unsigned verbose, FILE *fp)
d334 1
d343 3
d351 1
a351 1
      if (!test_one(gallivm, verbose, fp, format_desc)) {
d361 1
a361 1
test_some(struct gallivm_state *gallivm, unsigned verbose, FILE *fp,
d364 1
a364 1
   return test_all(gallivm, verbose, fp);
d369 1
a369 1
test_single(struct gallivm_state *gallivm, unsigned verbose, FILE *fp)
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d31 1
d33 3
a35 7
#include <llvm-c/Core.h>
#include <llvm-c/Analysis.h>
#include <llvm-c/ExecutionEngine.h>
#include <llvm-c/Target.h>
#include <llvm-c/Transforms/Scalar.h>

#include "util/u_cpu_detect.h"
d37 2
d40 2
d43 2
a47 48
struct pixel_test_case
{
   enum pipe_format format;
   uint32_t packed;
   double unpacked[4];
};


struct pixel_test_case test_cases[] =
{
   {PIPE_FORMAT_B5G6R5_UNORM,   0x0000, {0.0, 0.0, 0.0, 1.0}},
   {PIPE_FORMAT_B5G6R5_UNORM,   0x001f, {0.0, 0.0, 1.0, 1.0}},
   {PIPE_FORMAT_B5G6R5_UNORM,   0x07e0, {0.0, 1.0, 0.0, 1.0}},
   {PIPE_FORMAT_B5G6R5_UNORM,   0xf800, {1.0, 0.0, 0.0, 1.0}},
   {PIPE_FORMAT_B5G6R5_UNORM,   0xffff, {1.0, 1.0, 1.0, 1.0}},

   {PIPE_FORMAT_B5G5R5A1_UNORM, 0x0000, {0.0, 0.0, 0.0, 0.0}},
   {PIPE_FORMAT_B5G5R5A1_UNORM, 0x001f, {0.0, 0.0, 1.0, 0.0}},
   {PIPE_FORMAT_B5G5R5A1_UNORM, 0x03e0, {0.0, 1.0, 0.0, 0.0}},
   {PIPE_FORMAT_B5G5R5A1_UNORM, 0x7c00, {1.0, 0.0, 0.0, 0.0}},
   {PIPE_FORMAT_B5G5R5A1_UNORM, 0x8000, {0.0, 0.0, 0.0, 1.0}},
   {PIPE_FORMAT_B5G5R5A1_UNORM, 0xffff, {1.0, 1.0, 1.0, 1.0}},

   {PIPE_FORMAT_B8G8R8A8_UNORM, 0x00000000, {0.0, 0.0, 0.0, 0.0}},
   {PIPE_FORMAT_B8G8R8A8_UNORM, 0x000000ff, {0.0, 0.0, 1.0, 0.0}},
   {PIPE_FORMAT_B8G8R8A8_UNORM, 0x0000ff00, {0.0, 1.0, 0.0, 0.0}},
   {PIPE_FORMAT_B8G8R8A8_UNORM, 0x00ff0000, {1.0, 0.0, 0.0, 0.0}},
   {PIPE_FORMAT_B8G8R8A8_UNORM, 0xff000000, {0.0, 0.0, 0.0, 1.0}},
   {PIPE_FORMAT_B8G8R8A8_UNORM, 0xffffffff, {1.0, 1.0, 1.0, 1.0}},

#if 0
   {PIPE_FORMAT_R8G8B8A8_UNORM, 0x00000000, {0.0, 0.0, 0.0, 0.0}},
   {PIPE_FORMAT_R8G8B8A8_UNORM, 0x000000ff, {0.0, 0.0, 0.0, 1.0}},
   {PIPE_FORMAT_R8G8B8A8_UNORM, 0x0000ff00, {0.0, 0.0, 1.0, 0.0}},
   {PIPE_FORMAT_R8G8B8A8_UNORM, 0x00ff0000, {0.0, 1.0, 0.0, 0.0}},
   {PIPE_FORMAT_R8G8B8A8_UNORM, 0xff000000, {1.0, 0.0, 0.0, 0.0}},
   {PIPE_FORMAT_R8G8B8A8_UNORM, 0xffffffff, {1.0, 1.0, 1.0, 1.0}},
#endif

   {PIPE_FORMAT_A8R8G8B8_UNORM, 0x00000000, {0.0, 0.0, 0.0, 0.0}},
   {PIPE_FORMAT_A8R8G8B8_UNORM, 0x000000ff, {0.0, 0.0, 0.0, 1.0}},
   {PIPE_FORMAT_A8R8G8B8_UNORM, 0x0000ff00, {1.0, 0.0, 0.0, 0.0}},
   {PIPE_FORMAT_A8R8G8B8_UNORM, 0x00ff0000, {0.0, 1.0, 0.0, 0.0}},
   {PIPE_FORMAT_A8R8G8B8_UNORM, 0xff000000, {0.0, 0.0, 1.0, 0.0}},
   {PIPE_FORMAT_A8R8G8B8_UNORM, 0xffffffff, {1.0, 1.0, 1.0, 1.0}},
};


d72 3
a74 1
typedef void (*load_ptr_t)(const uint32_t packed, float *);
d78 3
a80 2
add_load_rgba_test(LLVMModuleRef module,
                   const struct util_format_description *desc)
d82 6
a87 1
   LLVMTypeRef args[2];
d89 2
a90 1
   LLVMValueRef packed;
d92 2
a94 1
   LLVMBuilderRef builder;
d97 2
a98 2
   args[0] = LLVMInt32Type();
   args[1] = LLVMPointerType(LLVMVectorType(LLVMFloatType(), 4), 0);
d100 7
a106 1
   func = LLVMAddFunction(module, "load", LLVMFunctionType(LLVMVoidType(), args, 2, 0));
d108 4
a111 2
   packed = LLVMGetParam(func, 0);
   rgba_ptr = LLVMGetParam(func, 1);
d113 1
a113 2
   block = LLVMAppendBasicBlock(func, "entry");
   builder = LLVMCreateBuilder();
d116 2
a117 4
   if(desc->block.bits < 32)
      packed = LLVMBuildTrunc(builder, packed, LLVMIntType(desc->block.bits), "");

   rgba = lp_build_unpack_rgba_aos(builder, desc, packed);
d123 11
a133 1
   LLVMDisposeBuilder(builder);
d138 13
a150 1
typedef void (*store_ptr_t)(uint32_t *, const float *);
d152 1
d154 2
a155 12
static LLVMValueRef
add_store_rgba_test(LLVMModuleRef module,
                    const struct util_format_description *desc)
{
   LLVMTypeRef args[2];
   LLVMValueRef func;
   LLVMValueRef packed_ptr;
   LLVMValueRef rgba_ptr;
   LLVMBasicBlockRef block;
   LLVMBuilderRef builder;
   LLVMValueRef rgba;
   LLVMValueRef packed;
d157 3
a159 2
   args[0] = LLVMPointerType(LLVMInt32Type(), 0);
   args[1] = LLVMPointerType(LLVMVectorType(LLVMFloatType(), 4), 0);
d161 2
a162 4
   func = LLVMAddFunction(module, "store", LLVMFunctionType(LLVMVoidType(), args, 2, 0));
   LLVMSetFunctionCallConv(func, LLVMCCallConv);
   packed_ptr = LLVMGetParam(func, 0);
   rgba_ptr = LLVMGetParam(func, 1);
d164 1
a164 3
   block = LLVMAppendBasicBlock(func, "entry");
   builder = LLVMCreateBuilder();
   LLVMPositionBuilderAtEnd(builder, block);
d166 37
a202 1
   rgba = LLVMBuildLoad(builder, rgba_ptr, "");
d204 5
a208 1
   packed = lp_build_pack_rgba_aos(builder, desc, rgba);
d210 2
a211 2
   if(desc->block.bits < 32)
      packed = LLVMBuildZExt(builder, packed, LLVMInt32Type(), "");
d213 2
a214 1
   LLVMBuildStore(builder, packed, packed_ptr);
d216 1
a216 4
   LLVMBuildRetVoid(builder);

   LLVMDisposeBuilder(builder);
   return func;
d222 3
a224 1
test_format(unsigned verbose, FILE *fp, const struct pixel_test_case *test)
d226 7
a232 17
   LLVMModuleRef module = NULL;
   LLVMValueRef load = NULL;
   LLVMValueRef store = NULL;
   LLVMExecutionEngineRef engine = NULL;
   LLVMModuleProviderRef provider = NULL;
   LLVMPassManagerRef pass = NULL;
   char *error = NULL;
   const struct util_format_description *desc;
   load_ptr_t load_ptr;
   store_ptr_t store_ptr;
   float unpacked[4];
   unsigned packed;
   boolean success;
   unsigned i;

   desc = util_format_description(test->format);
   fprintf(stderr, "%s\n", desc->name);
d234 1
a234 1
   module = LLVMModuleCreateWithName("test");
d236 2
a237 2
   load = add_load_rgba_test(module, desc);
   store = add_store_rgba_test(module, desc);
d239 2
a240 3
   if(LLVMVerifyModule(module, LLVMPrintMessageAction, &error)) {
      LLVMDumpModule(module);
      abort();
a241 1
   LLVMDisposeMessage(error);
d243 2
a244 6
   provider = LLVMCreateModuleProviderForExistingModule(module);
   if (LLVMCreateJITCompiler(&engine, provider, 1, &error)) {
      fprintf(stderr, "%s\n", error);
      LLVMDisposeMessage(error);
      abort();
   }
d246 1
a246 30
#if 0
   pass = LLVMCreatePassManager();
   LLVMAddTargetData(LLVMGetExecutionEngineTargetData(engine), pass);
   /* These are the passes currently listed in llvm-c/Transforms/Scalar.h,
    * but there are more on SVN. */
   LLVMAddConstantPropagationPass(pass);
   LLVMAddInstructionCombiningPass(pass);
   LLVMAddPromoteMemoryToRegisterPass(pass);
   LLVMAddGVNPass(pass);
   LLVMAddCFGSimplificationPass(pass);
   LLVMRunPassManager(pass, module);
#else
   (void)pass;
#endif

   load_ptr  = (load_ptr_t) LLVMGetPointerToGlobal(engine, load);
   store_ptr = (store_ptr_t)LLVMGetPointerToGlobal(engine, store);

   memset(unpacked, 0, sizeof unpacked);
   packed = 0;

   load_ptr(test->packed, unpacked);
   store_ptr(&packed, unpacked);

   success = TRUE;
   if(test->packed != packed)
      success = FALSE;
   for(i = 0; i < 4; ++i)
      if(test->unpacked[i] != unpacked[i])
         success = FALSE;
d248 40
a287 7
   if (!success) {
      printf("FAILED\n");
      printf("  Packed: %08x\n", test->packed);
      printf("          %08x\n", packed);
      printf("  Unpacked: %f %f %f %f\n", unpacked[0], unpacked[1], unpacked[2], unpacked[3]);
      printf("            %f %f %f %f\n", test->unpacked[0], test->unpacked[1], test->unpacked[2], test->unpacked[3]);
      LLVMDumpModule(module);
d290 2
a291 2
   LLVMFreeMachineCodeForFunction(engine, store);
   LLVMFreeMachineCodeForFunction(engine, load);
d293 2
a294 3
   LLVMDisposeExecutionEngine(engine);
   if(pass)
      LLVMDisposePassManager(pass);
d303 21
d325 1
a325 1
test_all(unsigned verbose, FILE *fp)
d327 2
a328 2
   unsigned i;
   bool success = TRUE;
d330 27
a356 3
   for (i = 0; i < sizeof(test_cases)/sizeof(test_cases[0]); ++i)
      if(!test_format(verbose, fp, &test_cases[i]))
        success = FALSE;
d363 9
a371 1
test_some(unsigned verbose, FILE *fp, unsigned long n)
d373 2
a374 1
   return test_all(verbose, fp);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a30 1
#include <float.h>
d32 7
a38 3
#include "util/u_memory.h"
#include "util/u_pointer.h"
#include "util/u_string.h"
a39 2
#include "util/u_format_tests.h"
#include "util/u_format_s3tc.h"
a40 2
#include "gallivm/lp_bld.h"
#include "gallivm/lp_bld_debug.h"
d42 2
a43 1
#include "gallivm/lp_bld_init.h"
d45 46
a90 1
#include "lp_test.h"
d117 1
a117 3
typedef void
(*fetch_ptr_t)(void *unpacked, const void *packed,
               unsigned i, unsigned j);
d121 2
a122 3
add_fetch_rgba_test(struct gallivm_state *gallivm, unsigned verbose,
                    const struct util_format_description *desc,
                    struct lp_type type)
d124 1
a124 6
   char name[256];
   LLVMContextRef context = gallivm->context;
   LLVMModuleRef module = gallivm->module;
   LLVMBuilderRef builder = gallivm->builder;
   LLVMPassManagerRef passmgr = gallivm->passmgr;
   LLVMTypeRef args[4];
d126 1
a126 2
   LLVMValueRef packed_ptr;
   LLVMValueRef offset = LLVMConstNull(LLVMInt32TypeInContext(context));
a127 2
   LLVMValueRef i;
   LLVMValueRef j;
d129 1
d132 2
a133 2
   util_snprintf(name, sizeof name, "fetch_%s_%s", desc->short_name,
                 type.floating ? "float" : "unorm8");
d135 1
a135 7
   args[0] = LLVMPointerType(lp_build_vec_type(gallivm, type), 0);
   args[1] = LLVMPointerType(LLVMInt8TypeInContext(context), 0);
   args[3] = args[2] = LLVMInt32TypeInContext(context);

   func = LLVMAddFunction(module, name,
                          LLVMFunctionType(LLVMVoidTypeInContext(context),
                                           args, Elements(args), 0));
d137 2
a138 4
   rgba_ptr = LLVMGetParam(func, 0);
   packed_ptr = LLVMGetParam(func, 1);
   i = LLVMGetParam(func, 2);
   j = LLVMGetParam(func, 3);
d140 2
a141 1
   block = LLVMAppendBasicBlockInContext(context, func, "entry");
d144 4
a147 2
   rgba = lp_build_fetch_rgba_aos(gallivm, desc, type,
                                  packed_ptr, offset, i, j);
d153 3
a155 6
   if (LLVMVerifyFunction(func, LLVMPrintMessageAction)) {
      LLVMDumpValue(func);
      abort();
   }

   LLVMRunFunctionPassManager(passmgr, func);
a156 3
   if (verbose >= 1) {
      LLVMDumpValue(func);
   }
d158 1
a158 2
   return func;
}
d161 3
a163 4
PIPE_ALIGN_STACK
static boolean
test_format_float(struct gallivm_state *gallivm, unsigned verbose, FILE *fp,
                  const struct util_format_description *desc)
d165 8
a172 8
   LLVMValueRef fetch = NULL;
   LLVMExecutionEngineRef engine = gallivm->engine;
   fetch_ptr_t fetch_ptr;
   PIPE_ALIGN_VAR(16) float unpacked[4];
   boolean first = TRUE;
   boolean success = TRUE;
   unsigned i, j, k, l;
   void *f;
d174 2
a175 1
   fetch = add_fetch_rgba_test(gallivm, verbose, desc, lp_float32_vec4_type());
d177 4
a180 2
   f = LLVMGetPointerToGlobal(engine, fetch);
   fetch_ptr = (fetch_ptr_t) pointer_to_func(f);
d182 3
a184 3
   if (verbose >= 2) {
      lp_disassemble(f);
   }
d186 1
a186 2
   for (l = 0; l < util_format_nr_test_cases; ++l) {
      const struct util_format_test_case *test = &util_format_test_cases[l];
d188 1
a188 1
      if (test->format == desc->format) {
d190 2
a191 37
         if (first) {
            printf("Testing %s (float) ...\n",
                   desc->name);
            first = FALSE;
         }

         for (i = 0; i < desc->block.height; ++i) {
            for (j = 0; j < desc->block.width; ++j) {
               boolean match;

               memset(unpacked, 0, sizeof unpacked);

               fetch_ptr(unpacked, test->packed, j, i);

               match = TRUE;
               for(k = 0; k < 4; ++k)
                  if (fabs((float)test->unpacked[i][j][k] - unpacked[k]) > FLT_EPSILON)
                     match = FALSE;

               if (!match) {
                  printf("FAILED\n");
                  printf("  Packed: %02x %02x %02x %02x\n",
                         test->packed[0], test->packed[1], test->packed[2], test->packed[3]);
                  printf("  Unpacked (%u,%u): %f %f %f %f obtained\n",
                         j, i,
                         unpacked[0], unpacked[1], unpacked[2], unpacked[3]);
                  printf("                  %f %f %f %f expected\n",
                         test->unpacked[i][j][0],
                         test->unpacked[i][j][1],
                         test->unpacked[i][j][2],
                         test->unpacked[i][j][3]);
                  success = FALSE;
               }
            }
         }
      }
   }
d193 1
a193 5
   if (!success) {
      if (verbose < 1) {
         LLVMDumpValue(fetch);
      }
   }
d195 1
a195 2
   LLVMFreeMachineCodeForFunction(engine, fetch);
   LLVMDeleteFunction(fetch);
d197 2
a198 4
   if(fp)
      write_tsv_row(fp, desc, success);

   return success;
d204 1
a204 3
test_format_unorm8(struct gallivm_state *gallivm,
                   unsigned verbose, FILE *fp,
                   const struct util_format_description *desc)
d206 17
a222 7
   LLVMValueRef fetch = NULL;
   fetch_ptr_t fetch_ptr;
   uint8_t unpacked[4];
   boolean first = TRUE;
   boolean success = TRUE;
   unsigned i, j, k, l;
   void *f;
d224 1
a224 1
   fetch = add_fetch_rgba_test(gallivm, verbose, desc, lp_unorm8_vec4_type());
d226 2
a227 2
   f = LLVMGetPointerToGlobal(gallivm->engine, fetch);
   fetch_ptr = (fetch_ptr_t) pointer_to_func(f);
d229 3
a231 2
   if (verbose >= 2) {
      lp_disassemble(f);
d233 1
d235 6
a240 2
   for (l = 0; l < util_format_nr_test_cases; ++l) {
      const struct util_format_test_case *test = &util_format_test_cases[l];
d242 30
a271 1
      if (test->format == desc->format) {
d273 7
a279 40
         if (first) {
            printf("Testing %s (unorm8) ...\n",
                   desc->name);
            first = FALSE;
         }

         for (i = 0; i < desc->block.height; ++i) {
            for (j = 0; j < desc->block.width; ++j) {
               boolean match;

               memset(unpacked, 0, sizeof unpacked);

               fetch_ptr(unpacked, test->packed, j, i);

               match = TRUE;
               for(k = 0; k < 4; ++k) {
                  int error = float_to_ubyte(test->unpacked[i][j][k]) - unpacked[k];
                  if (error < 0)
                     error = -error;
                  if (error > 1)
                     match = FALSE;
               }

               if (!match) {
                  printf("FAILED\n");
                  printf("  Packed: %02x %02x %02x %02x\n",
                         test->packed[0], test->packed[1], test->packed[2], test->packed[3]);
                  printf("  Unpacked (%u,%u): %02x %02x %02x %02x obtained\n",
                         j, i,
                         unpacked[0], unpacked[1], unpacked[2], unpacked[3]);
                  printf("                  %02x %02x %02x %02x expected\n",
                         float_to_ubyte(test->unpacked[i][j][0]),
                         float_to_ubyte(test->unpacked[i][j][1]),
                         float_to_ubyte(test->unpacked[i][j][2]),
                         float_to_ubyte(test->unpacked[i][j][3]));
                  success = FALSE;
               }
            }
         }
      }
d282 2
a283 2
   if (!success)
      LLVMDumpValue(fetch);
d285 3
a287 2
   LLVMFreeMachineCodeForFunction(gallivm->engine, fetch);
   LLVMDeleteFunction(fetch);
a295 21


static boolean
test_one(struct gallivm_state *gallivm,
         unsigned verbose, FILE *fp,
         const struct util_format_description *format_desc)
{
   boolean success = TRUE;

   if (!test_format_float(gallivm, verbose, fp, format_desc)) {
     success = FALSE;
   }

   if (!test_format_unorm8(gallivm, verbose, fp, format_desc)) {
     success = FALSE;
   }

   return success;
}


d297 1
a297 1
test_all(struct gallivm_state *gallivm, unsigned verbose, FILE *fp)
d299 2
a300 2
   enum pipe_format format;
   boolean success = TRUE;
d302 3
a304 27
   util_format_s3tc_init();

   for (format = 1; format < PIPE_FORMAT_COUNT; ++format) {
      const struct util_format_description *format_desc;

      format_desc = util_format_description(format);
      if (!format_desc) {
         continue;
      }

      /*
       * TODO: test more
       */

      if (format_desc->colorspace == UTIL_FORMAT_COLORSPACE_ZS) {
         continue;
      }

      if (format_desc->layout == UTIL_FORMAT_LAYOUT_S3TC &&
          !util_format_s3tc_enabled) {
         continue;
      }

      if (!test_one(gallivm, verbose, fp, format_desc)) {
           success = FALSE;
      }
   }
d311 1
a311 9
test_some(struct gallivm_state *gallivm, unsigned verbose, FILE *fp,
          unsigned long n)
{
   return test_all(gallivm, verbose, fp);
}


boolean
test_single(struct gallivm_state *gallivm, unsigned verbose, FILE *fp)
d313 1
a313 2
   printf("no test_single()");
   return TRUE;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d86 1
d123 10
a132 1
   gallivm_verify_function(gallivm, func);
d140 1
a140 1
test_format_float(unsigned verbose, FILE *fp,
a142 1
   struct gallivm_state *gallivm;
d144 1
d150 1
a150 2

   gallivm = gallivm_create();
d154 2
a155 1
   gallivm_compile_module(gallivm);
d157 3
a159 1
   fetch_ptr = (fetch_ptr_t) gallivm_jit_function(gallivm, fetch);
d174 1
a174 1
               boolean match = TRUE;
d180 3
a182 11
               for(k = 0; k < 4; ++k) {
                  if (util_double_inf_sign(test->unpacked[i][j][k]) != util_inf_sign(unpacked[k])) {
                     match = FALSE;
                  }

                  if (util_is_double_nan(test->unpacked[i][j][k]) != util_is_nan(unpacked[k])) {
                     match = FALSE;
                  }

                  if (!util_is_double_inf_or_nan(test->unpacked[i][j][k]) &&
                      fabs((float)test->unpacked[i][j][k] - unpacked[k]) > FLT_EPSILON) {
a183 2
                  }
               }
d189 1
a189 1
                  printf("  Unpacked (%u,%u): %.9g %.9g %.9g %.9g obtained\n",
d192 1
a192 1
                  printf("                  %.9g %.9g %.9g %.9g expected\n",
d204 5
a208 1
   gallivm_free_function(gallivm, fetch, fetch_ptr);
d210 2
a211 1
   gallivm_destroy(gallivm);
d222 2
a223 1
test_format_unorm8(unsigned verbose, FILE *fp,
a225 1
   struct gallivm_state *gallivm;
d232 1
a232 2

   gallivm = gallivm_create();
d236 2
a237 1
   gallivm_compile_module(gallivm);
d239 3
a241 1
   fetch_ptr = (fetch_ptr_t) gallivm_jit_function(gallivm, fetch);
a264 4

                  if (util_is_double_nan(test->unpacked[i][j][k]))
                     continue;

a266 1

a282 1

d290 2
a291 1
   gallivm_free_function(gallivm, fetch, fetch_ptr);
d293 2
a294 1
   gallivm_destroy(gallivm);
d306 2
a307 1
test_one(unsigned verbose, FILE *fp,
d312 1
a312 1
   if (!test_format_float(verbose, fp, format_desc)) {
d316 1
a316 1
   if (!test_format_unorm8(verbose, fp, format_desc)) {
d325 1
a325 1
test_all(unsigned verbose, FILE *fp)
a339 1

a347 3
      if (util_format_is_pure_integer(format))
	 continue;

d353 1
a353 1
      if (!test_one(verbose, fp, format_desc)) {
d363 1
a363 1
test_some(unsigned verbose, FILE *fp,
d366 1
a366 1
   return test_all(verbose, fp);
d371 1
a371 1
test_single(unsigned verbose, FILE *fp)
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@a135 1
   PIPE_ALIGN_VAR(16) uint8_t packed[UTIL_FORMAT_MAX_PACKED_BYTES];
d141 1
a141 1
   gallivm = gallivm_create("test_module_float", LLVMGetGlobalContext());
a148 2
   gallivm_free_ir(gallivm);

a156 1
            fflush(stdout);
a159 3
         /* To ensure it's 16-byte aligned */
         memcpy(packed, test->packed, sizeof packed);

d166 1
a166 1
               fetch_ptr(unpacked, packed, j, i);
a194 1
                  fflush(stdout);
d202 2
a220 1
   PIPE_ALIGN_VAR(16) uint8_t packed[UTIL_FORMAT_MAX_PACKED_BYTES];
d226 1
a226 1
   gallivm = gallivm_create("test_module_unorm8", LLVMGetGlobalContext());
a233 2
   gallivm_free_ir(gallivm);

a244 3
         /* To ensure it's 16-byte aligned */
         memcpy(packed, test->packed, sizeof packed);

d251 1
a251 1
               fetch_ptr(unpacked, packed, j, i);
d286 2
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d136 1
d142 1
a142 1
   gallivm = gallivm_create();
d150 2
d160 1
d164 3
d173 1
a173 1
               fetch_ptr(unpacked, test->packed, j, i);
d202 1
a209 2
   gallivm_free_function(gallivm, fetch, fetch_ptr);

d227 1
d233 1
a233 1
   gallivm = gallivm_create();
d241 2
d254 3
d263 1
a263 1
               fetch_ptr(unpacked, test->packed, j, i);
a297 2

   gallivm_free_function(gallivm, fetch, fetch_ptr);
@


