head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.52;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.00.33;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.26;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.57;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.07.27;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.44.35;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#ifndef LP_RAST_PRIV_H
#define LP_RAST_PRIV_H

#include "os/os_thread.h"
#include "util/u_format.h"
#include "gallivm/lp_bld_debug.h"
#include "lp_memory.h"
#include "lp_rast.h"
#include "lp_scene.h"
#include "lp_state.h"
#include "lp_texture.h"
#include "lp_limits.h"


#define TILE_VECTOR_HEIGHT 4
#define TILE_VECTOR_WIDTH 4

/* If we crash in a jitted function, we can examine jit_line and jit_state
 * to get some info.  This is not thread-safe, however.
 */
#ifdef DEBUG

struct lp_rasterizer_task;
extern int jit_line;
extern const struct lp_rast_state *jit_state;
extern const struct lp_rasterizer_task *jit_task;

#define BEGIN_JIT_CALL(state, task)                  \
   do { \
      jit_line = __LINE__; \
      jit_state = state; \
      jit_task = task; \
   } while (0)

#define END_JIT_CALL() \
   do { \
      jit_line = 0; \
      jit_state = NULL; \
   } while (0)

#else

#define BEGIN_JIT_CALL(X, Y)
#define END_JIT_CALL()

#endif


struct lp_rasterizer;
struct cmd_bin;

/**
 * Per-thread rasterization state
 */
struct lp_rasterizer_task
{
   const struct cmd_bin *bin;
   const struct lp_rast_state *state;

   struct lp_scene *scene;
   unsigned x, y;          /**< Pos of this tile in framebuffer, in pixels */
   unsigned width, height; /**< width, height of current tile, in pixels */

   uint8_t *color_tiles[PIPE_MAX_COLOR_BUFS];
   uint8_t *depth_tile;

   /** "back" pointer */
   struct lp_rasterizer *rast;

   /** "my" index */
   unsigned thread_index;

   /** Non-interpolated passthru state and occlude counter for visible pixels */
   struct lp_jit_thread_data thread_data;
   uint64_t ps_invocations;
   uint8_t ps_inv_multiplier;

   pipe_semaphore work_ready;
   pipe_semaphore work_done;
};


/**
 * This is the state required while rasterizing tiles.
 * Note that this contains per-thread information too.
 * The tile size is TILE_SIZE x TILE_SIZE pixels.
 */
struct lp_rasterizer
{
   boolean exit_flag;
   boolean no_rast;  /**< For debugging/profiling */

   /** The incoming queue of scenes ready to rasterize */
   struct lp_scene_queue *full_scenes;

   /** The scene currently being rasterized by the threads */
   struct lp_scene *curr_scene;

   /** A task object for each rasterization thread */
   struct lp_rasterizer_task tasks[LP_MAX_THREADS];

   unsigned num_threads;
   pipe_thread threads[LP_MAX_THREADS];

   /** For synchronizing the rasterization threads */
   pipe_barrier barrier;
};


void
lp_rast_shade_quads_mask(struct lp_rasterizer_task *task,
                         const struct lp_rast_shader_inputs *inputs,
                         unsigned x, unsigned y,
                         unsigned mask);



/**
 * Get pointer to the unswizzled color tile
 */
static INLINE uint8_t *
lp_rast_get_unswizzled_color_tile_pointer(struct lp_rasterizer_task *task,
                                          unsigned buf, enum lp_texture_usage usage)
{
   const struct lp_scene *scene = task->scene;
   unsigned format_bytes;

   assert(task->x < scene->tiles_x * TILE_SIZE);
   assert(task->y < scene->tiles_y * TILE_SIZE);
   assert(task->x % TILE_SIZE == 0);
   assert(task->y % TILE_SIZE == 0);
   assert(buf < scene->fb.nr_cbufs);

   if (!task->color_tiles[buf]) {
      struct pipe_surface *cbuf = scene->fb.cbufs[buf];
      assert(cbuf);

      format_bytes = util_format_get_blocksize(cbuf->format);
      task->color_tiles[buf] = scene->cbufs[buf].map + scene->cbufs[buf].stride * task->y + format_bytes * task->x;
   }

   return task->color_tiles[buf];
}


/**
 * Get pointer to the unswizzled depth tile
 */
static INLINE uint8_t *
lp_rast_get_unswizzled_depth_tile_pointer(struct lp_rasterizer_task *task,
                                          enum lp_texture_usage usage)
{
   const struct lp_scene *scene = task->scene;
   unsigned format_bytes;

   assert(task->x < scene->tiles_x * TILE_SIZE);
   assert(task->y < scene->tiles_y * TILE_SIZE);
   assert(task->x % TILE_SIZE == 0);
   assert(task->y % TILE_SIZE == 0);

   if (!task->depth_tile) {
      struct pipe_surface *dbuf = scene->fb.zsbuf;
      assert(dbuf);

      format_bytes = util_format_get_blocksize(dbuf->format);
      task->depth_tile = scene->zsbuf.map + scene->zsbuf.stride * task->y + format_bytes * task->x;
   }

   return task->depth_tile;
}


/**
 * Get the pointer to an unswizzled 4x4 color block (within an unswizzled 64x64 tile).
 * \param x, y location of 4x4 block in window coords
 */
static INLINE uint8_t *
lp_rast_get_unswizzled_color_block_pointer(struct lp_rasterizer_task *task,
                                           unsigned buf, unsigned x, unsigned y,
                                           unsigned layer)
{
   unsigned px, py, pixel_offset, format_bytes;
   uint8_t *color;

   assert(x < task->scene->tiles_x * TILE_SIZE);
   assert(y < task->scene->tiles_y * TILE_SIZE);
   assert((x % TILE_VECTOR_WIDTH) == 0);
   assert((y % TILE_VECTOR_HEIGHT) == 0);
   assert(buf < task->scene->fb.nr_cbufs);

   format_bytes = util_format_get_blocksize(task->scene->fb.cbufs[buf]->format);

   color = lp_rast_get_unswizzled_color_tile_pointer(task, buf, LP_TEX_USAGE_READ_WRITE);
   assert(color);

   px = x % TILE_SIZE;
   py = y % TILE_SIZE;
   pixel_offset = px * format_bytes + py * task->scene->cbufs[buf].stride;

   color = color + pixel_offset;

   if (layer) {
      color += layer * task->scene->cbufs[buf].layer_stride;
   }

   assert(lp_check_alignment(color, llvmpipe_get_format_alignment(task->scene->fb.cbufs[buf]->format)));
   return color;
}


/**
 * Get the pointer to an unswizzled 4x4 depth block (within an unswizzled 64x64 tile).
 * \param x, y location of 4x4 block in window coords
 */
static INLINE uint8_t *
lp_rast_get_unswizzled_depth_block_pointer(struct lp_rasterizer_task *task,
                                           unsigned x, unsigned y, unsigned layer)
{
   unsigned px, py, pixel_offset, format_bytes;
   uint8_t *depth;

   assert(x < task->scene->tiles_x * TILE_SIZE);
   assert(y < task->scene->tiles_y * TILE_SIZE);
   assert((x % TILE_VECTOR_WIDTH) == 0);
   assert((y % TILE_VECTOR_HEIGHT) == 0);

   format_bytes = util_format_get_blocksize(task->scene->fb.zsbuf->format);

   depth = lp_rast_get_unswizzled_depth_tile_pointer(task, LP_TEX_USAGE_READ_WRITE);
   assert(depth);

   px = x % TILE_SIZE;
   py = y % TILE_SIZE;
   pixel_offset = px * format_bytes + py * task->scene->zsbuf.stride;

   depth = depth + pixel_offset;

   if (layer) {
      depth += layer * task->scene->zsbuf.layer_stride;
   }

   assert(lp_check_alignment(depth, llvmpipe_get_format_alignment(task->scene->fb.zsbuf->format)));
   return depth;
}



/**
 * Shade all pixels in a 4x4 block.  The fragment code omits the
 * triangle in/out tests.
 * \param x, y location of 4x4 block in window coords
 */
static INLINE void
lp_rast_shade_quads_all( struct lp_rasterizer_task *task,
                         const struct lp_rast_shader_inputs *inputs,
                         unsigned x, unsigned y )
{
   const struct lp_scene *scene = task->scene;
   const struct lp_rast_state *state = task->state;
   struct lp_fragment_shader_variant *variant = state->variant;
   uint8_t *color[PIPE_MAX_COLOR_BUFS];
   unsigned stride[PIPE_MAX_COLOR_BUFS];
   uint8_t *depth = NULL;
   unsigned depth_stride = 0;
   unsigned i;

   /* color buffer */
   for (i = 0; i < scene->fb.nr_cbufs; i++) {
      if (scene->fb.cbufs[i]) {
         stride[i] = scene->cbufs[i].stride;
         color[i] = lp_rast_get_unswizzled_color_block_pointer(task, i, x, y,
                                                               inputs->layer);
      }
      else {
         stride[i] = 0;
         color[i] = NULL;
      }
   }

   if (scene->zsbuf.map) {
      depth = lp_rast_get_unswizzled_depth_block_pointer(task, x, y, inputs->layer);
      depth_stride = scene->zsbuf.stride;
   }

   /*
    * The rasterizer may produce fragments outside our
    * allocated 4x4 blocks hence need to filter them out here.
    */
   if ((x % TILE_SIZE) < task->width && (y % TILE_SIZE) < task->height) {
      /* not very accurate would need a popcount on the mask */
      /* always count this not worth bothering? */
      task->ps_invocations += 1 * variant->ps_inv_multiplier;

      /* Propagate non-interpolated raster state. */
      task->thread_data.raster_state.viewport_index = inputs->viewport_index;

      /* run shader on 4x4 block */
      BEGIN_JIT_CALL(state, task);
      variant->jit_function[RAST_WHOLE]( &state->jit_context,
                                         x, y,
                                         inputs->frontfacing,
                                         GET_A0(inputs),
                                         GET_DADX(inputs),
                                         GET_DADY(inputs),
                                         color,
                                         depth,
                                         0xffff,
                                         &task->thread_data,
                                         stride,
                                         depth_stride);
      END_JIT_CALL();
   }
}

void lp_rast_triangle_1( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_2( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_3( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_4( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_5( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_6( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_7( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_8( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );

void lp_rast_triangle_3_4(struct lp_rasterizer_task *,
			  const union lp_rast_cmd_arg );

void lp_rast_triangle_3_16( struct lp_rasterizer_task *, 
                            const union lp_rast_cmd_arg );

void lp_rast_triangle_4_16( struct lp_rasterizer_task *, 
                            const union lp_rast_cmd_arg );


void lp_rast_triangle_32_1( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_32_2( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_32_3( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_32_4( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_32_5( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_32_6( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_32_7( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_32_8( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );

void lp_rast_triangle_32_3_4(struct lp_rasterizer_task *,
			  const union lp_rast_cmd_arg );

void lp_rast_triangle_32_3_16( struct lp_rasterizer_task *, 
                            const union lp_rast_cmd_arg );

void lp_rast_triangle_32_4_16( struct lp_rasterizer_task *, 
                            const union lp_rast_cmd_arg );

void
lp_rast_set_state(struct lp_rasterizer_task *task,
                  const union lp_rast_cmd_arg arg);
 
void
lp_debug_bin( const struct cmd_bin *bin, int x, int y );

#endif
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d146 1
a146 1
 * Get pointer to the color tile
d149 2
a150 2
lp_rast_get_color_tile_pointer(struct lp_rasterizer_task *task,
                               unsigned buf, enum lp_texture_usage usage)
d166 1
a166 2
      task->color_tiles[buf] = scene->cbufs[buf].map + scene->cbufs[buf].stride * task->y +
                               format_bytes * task->x;
d174 1
a174 1
 * Get pointer to the depth tile
d177 2
a178 2
lp_rast_get_depth_tile_pointer(struct lp_rasterizer_task *task,
                               enum lp_texture_usage usage)
d193 1
a193 2
      task->depth_tile = scene->zsbuf.map + scene->zsbuf.stride * task->y +
                         format_bytes * task->x;
d201 1
a201 1
 * Get the pointer to a 4x4 color block (within a 64x64 tile).
d205 3
a207 3
lp_rast_get_color_block_pointer(struct lp_rasterizer_task *task,
                                unsigned buf, unsigned x, unsigned y,
                                unsigned layer)
d220 1
a220 1
   color = lp_rast_get_color_tile_pointer(task, buf, LP_TEX_USAGE_READ_WRITE);
d239 1
a239 1
 * Get the pointer to a 4x4 depth block (within a 64x64 tile).
d243 2
a244 2
lp_rast_get_depth_block_pointer(struct lp_rasterizer_task *task,
                                unsigned x, unsigned y, unsigned layer)
d256 1
a256 1
   depth = lp_rast_get_depth_tile_pointer(task, LP_TEX_USAGE_READ_WRITE);
d298 2
a299 2
         color[i] = lp_rast_get_color_block_pointer(task, i, x, y,
                                                    inputs->layer);
d308 1
a308 1
      depth = lp_rast_get_depth_block_pointer(task, x, y, inputs->layer);
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d146 1
a146 1
 * Get pointer to the unswizzled color tile
d149 2
a150 2
lp_rast_get_unswizzled_color_tile_pointer(struct lp_rasterizer_task *task,
                                          unsigned buf, enum lp_texture_usage usage)
d166 2
a167 1
      task->color_tiles[buf] = scene->cbufs[buf].map + scene->cbufs[buf].stride * task->y + format_bytes * task->x;
d175 1
a175 1
 * Get pointer to the unswizzled depth tile
d178 2
a179 2
lp_rast_get_unswizzled_depth_tile_pointer(struct lp_rasterizer_task *task,
                                          enum lp_texture_usage usage)
d194 2
a195 1
      task->depth_tile = scene->zsbuf.map + scene->zsbuf.stride * task->y + format_bytes * task->x;
d203 1
a203 1
 * Get the pointer to an unswizzled 4x4 color block (within an unswizzled 64x64 tile).
d207 3
a209 3
lp_rast_get_unswizzled_color_block_pointer(struct lp_rasterizer_task *task,
                                           unsigned buf, unsigned x, unsigned y,
                                           unsigned layer)
d222 1
a222 1
   color = lp_rast_get_unswizzled_color_tile_pointer(task, buf, LP_TEX_USAGE_READ_WRITE);
d241 1
a241 1
 * Get the pointer to an unswizzled 4x4 depth block (within an unswizzled 64x64 tile).
d245 2
a246 2
lp_rast_get_unswizzled_depth_block_pointer(struct lp_rasterizer_task *task,
                                           unsigned x, unsigned y, unsigned layer)
d258 1
a258 1
   depth = lp_rast_get_unswizzled_depth_tile_pointer(task, LP_TEX_USAGE_READ_WRITE);
d300 2
a301 2
         color[i] = lp_rast_get_unswizzled_color_block_pointer(task, i, x, y,
                                                               inputs->layer);
d310 1
a310 1
      depth = lp_rast_get_unswizzled_depth_block_pointer(task, x, y, inputs->layer);
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d100 1
a100 1
   /* occlude counter for visible pixels */
d103 1
d296 9
a304 2
      stride[i] = scene->cbufs[i].stride;
      color[i] = lp_rast_get_unswizzled_color_block_pointer(task, i, x, y, inputs->layer);
d319 4
a322 1
      task->ps_invocations++;
d366 27
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a38 1
#include "lp_tile_soa.h"
d42 3
d89 1
d100 3
a102 3
   /* occlude counter for visiable pixels */
   uint32_t vis_counter;
   struct llvmpipe_query *query;
d117 1
d145 1
a145 5
 * Get the pointer to a 4x4 depth/stencil block.
 * We'll map the z/stencil buffer on demand here.
 * Note that this may be called even when there's no z/stencil buffer - return
 * NULL in that case.
 * \param x, y location of 4x4 block in window coords
d147 3
a149 3
static INLINE void *
lp_rast_get_depth_block_pointer(struct lp_rasterizer_task *task,
                                unsigned x, unsigned y)
d152 7
a158 1
   void *depth;
d160 3
a162 2
   assert((x % TILE_VECTOR_WIDTH) == 0);
   assert((y % TILE_VECTOR_HEIGHT) == 0);
d164 2
a165 7
   if (!scene->zsbuf.map) {
      /* Either out of memory or no zsbuf.  Can't tell without access
       * to the state.  Just use dummy tile memory, but don't print
       * the oom warning as this most likely because there is no
       * zsbuf.
       */
      return lp_dummy_tile;
d168 1
a168 6
   depth = (scene->zsbuf.map +
            scene->zsbuf.stride * y +
            scene->zsbuf.blocksize * x * TILE_VECTOR_HEIGHT);

   assert(lp_check_alignment(depth, 16));
   return depth;
d173 1
a173 1
 * Get pointer to the swizzled color tile
d176 2
a177 2
lp_rast_get_color_tile_pointer(struct lp_rasterizer_task *task,
                               unsigned buf, enum lp_texture_usage usage)
d180 1
d182 2
a185 1
   assert(buf < scene->fb.nr_cbufs);
d187 3
a189 6
   if (!task->color_tiles[buf]) {
      struct pipe_surface *cbuf = scene->fb.cbufs[buf];
      struct llvmpipe_resource *lpt;
      assert(cbuf);
      lpt = llvmpipe_resource(cbuf->texture);
      task->color_tiles[buf] = lp_swizzled_cbuf[task->thread_index][buf];
d191 2
a192 7
      if (usage != LP_TEX_USAGE_WRITE_ALL) {
         llvmpipe_swizzle_cbuf_tile(lpt,
                                    cbuf->u.tex.first_layer,
                                    cbuf->u.tex.level,
                                    task->x, task->y,
                                    task->color_tiles[buf]);
      }
d195 1
a195 1
   return task->color_tiles[buf];
d200 1
a200 4
 * Get the pointer to a 4x4 color block (within a 64x64 tile).
 * We'll map the color buffer on demand here.
 * Note that this may be called even when there's no color buffers - return
 * NULL in that case.
d204 3
a206 2
lp_rast_get_color_block_pointer(struct lp_rasterizer_task *task,
                                unsigned buf, unsigned x, unsigned y)
d208 1
a208 1
   unsigned px, py, pixel_offset;
d211 2
d215 3
d219 1
a219 1
   color = lp_rast_get_color_tile_pointer(task, buf, LP_TEX_USAGE_READ_WRITE);
d224 1
a224 1
   pixel_offset = tile_pixel_offset(px, py, 0);
d228 5
a232 1
   assert(lp_check_alignment(color, 16));
d237 36
d288 3
a290 1
   void *depth;
d294 4
a297 2
   for (i = 0; i < scene->fb.nr_cbufs; i++)
      color[i] = lp_rast_get_color_block_pointer(task, i, x, y);
d299 4
a302 1
   depth = lp_rast_get_depth_block_pointer(task, x, y);
d304 25
a328 13
   /* run shader on 4x4 block */
   BEGIN_JIT_CALL(state, task);
   variant->jit_function[RAST_WHOLE]( &state->jit_context,
                                      x, y,
                                      inputs->frontfacing,
                                      GET_A0(inputs),
                                      GET_DADX(inputs),
                                      GET_DADY(inputs),
                                      color,
                                      depth,
                                      0xffff,
                                      &task->vis_counter );
   END_JIT_CALL();
d362 1
a362 1
lp_debug_bin( const struct cmd_bin *bin );
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d34 1
d36 3
d40 1
d43 22
a64 1
#define MAX_THREADS 8  /* XXX probably temporary here */
d66 1
d68 2
a69 1
struct lp_rasterizer;
d71 1
a72 8
/**
 * A tile's color and depth memory.
 * We can choose whatever layout for the internal tile storage we prefer.
 */
struct lp_rast_tile
{
   uint8_t *color[PIPE_MAX_COLOR_BUFS];
};
d74 2
d82 2
a83 1
   struct lp_rast_tile tile;   /** Tile color/z/stencil memory */
d85 1
d88 2
a89 1
   const struct lp_rast_state *current_state;
d97 4
a114 25
   /* Framebuffer stuff
    */
   struct {
      void *map;
      unsigned stride;
      unsigned width;
      unsigned height;
      enum pipe_format format;
   } cbuf[PIPE_MAX_COLOR_BUFS];

   struct {
      uint8_t *map;
      unsigned stride;
      unsigned blocksize;
   } zsbuf;

   struct {
      unsigned nr_cbufs;
      boolean write_color;
      boolean write_zstencil;
      unsigned clear_color;
      unsigned clear_depth;
      char clear_stencil;
   } state;

a117 9
   /**
    * The outgoing queue of processed scenes to return to setup module
    *
    * XXX: while scenes are per-context but the rasterizer is
    * (potentially) shared, these empty scenes should be returned to
    * the context which created them rather than retained here.
    */
   struct lp_scene_queue *empty_scenes;

d122 1
a122 1
   struct lp_rasterizer_task tasks[MAX_THREADS];
d125 1
a125 1
   pipe_thread threads[MAX_THREADS];
d132 6
a137 4
void lp_rast_shade_quads( struct lp_rasterizer_task *task,
                          const struct lp_rast_shader_inputs *inputs,
                          unsigned x, unsigned y,
                          int32_t c1, int32_t c2, int32_t c3);
d141 4
a144 1
 * Get the pointer to the depth buffer for a block.
d148 2
a149 2
lp_rast_depth_pointer( struct lp_rasterizer *rast,
                       unsigned x, unsigned y )
d151 2
a152 1
   void * depth;
d157 12
a168 6
   if (!rast->zsbuf.map)
      return NULL;

   depth = (rast->zsbuf.map +
            rast->zsbuf.stride * y +
            rast->zsbuf.blocksize * x * TILE_VECTOR_HEIGHT);
d175 64
d250 3
a252 4
   struct lp_rasterizer *rast = task->rast;
   const struct lp_rast_state *state = task->current_state;
   struct lp_rast_tile *tile = &task->tile;
   const unsigned ix = x % TILE_SIZE, iy = y % TILE_SIZE;
d255 1
a255 4
   unsigned block_offset, i;

   /* offset of the containing 16x16 pixel block within the tile */
   block_offset = (iy / 4) * (16 * 16) + (ix / 4) * 16;
d258 2
a259 2
   for (i = 0; i < rast->state.nr_cbufs; i++)
      color[i] = tile->color[i] + 4 * block_offset;
d261 1
a261 1
   depth = lp_rast_depth_pointer(rast, x, y);
d263 13
a275 10
   /* run shader */
   state->jit_function[0]( &state->jit_context,
                           x, y,
                           inputs->a0,
                           inputs->dadx,
                           inputs->dady,
                           color,
                           depth,
                           INT_MIN, INT_MIN, INT_MIN,
                           NULL, NULL, NULL );
d278 32
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a33 1
#include "lp_memory.h"
a34 3
#include "lp_scene.h"
#include "lp_state.h"
#include "lp_texture.h"
a35 1
#include "lp_limits.h"
d38 1
a38 4
/* If we crash in a jitted function, we can examine jit_line and jit_state
 * to get some info.  This is not thread-safe, however.
 */
#ifdef DEBUG
a39 17
struct lp_rasterizer_task;
extern int jit_line;
extern const struct lp_rast_state *jit_state;
extern const struct lp_rasterizer_task *jit_task;

#define BEGIN_JIT_CALL(state, task)                  \
   do { \
      jit_line = __LINE__; \
      jit_state = state; \
      jit_task = task; \
   } while (0)

#define END_JIT_CALL() \
   do { \
      jit_line = 0; \
      jit_state = NULL; \
   } while (0)
d41 1
a41 1
#else
a42 2
#define BEGIN_JIT_CALL(X, Y)
#define END_JIT_CALL()
d44 8
a51 1
#endif
a53 3
struct lp_rasterizer;
struct cmd_bin;

d59 1
a59 2
   const struct cmd_bin *bin;
   const struct lp_rast_state *state;
a60 1
   struct lp_scene *scene;
d63 1
a63 2
   uint8_t *color_tiles[PIPE_MAX_COLOR_BUFS];
   uint8_t *depth_tile;
a70 4
   /* occlude counter for visiable pixels */
   uint32_t vis_counter;
   struct llvmpipe_query *query;

d85 25
d113 9
d126 1
a126 1
   struct lp_rasterizer_task tasks[LP_MAX_THREADS];
d129 1
a129 1
   pipe_thread threads[LP_MAX_THREADS];
d136 4
a139 6
void
lp_rast_shade_quads_mask(struct lp_rasterizer_task *task,
                         const struct lp_rast_shader_inputs *inputs,
                         unsigned x, unsigned y,
                         unsigned mask);

d143 1
a143 4
 * Get the pointer to a 4x4 depth/stencil block.
 * We'll map the z/stencil buffer on demand here.
 * Note that this may be called even when there's no z/stencil buffer - return
 * NULL in that case.
d147 2
a148 2
lp_rast_get_depth_block_pointer(struct lp_rasterizer_task *task,
                                unsigned x, unsigned y)
d150 1
a150 2
   const struct lp_scene *scene = task->scene;
   void *depth;
d155 6
a160 12
   if (!scene->zsbuf.map) {
      /* Either out of memory or no zsbuf.  Can't tell without access
       * to the state.  Just use dummy tile memory, but don't print
       * the oom warning as this most likely because there is no
       * zsbuf.
       */
      return lp_dummy_tile;
   }

   depth = (scene->zsbuf.map +
            scene->zsbuf.stride * y +
            scene->zsbuf.blocksize * x * TILE_VECTOR_HEIGHT);
a166 64
/**
 * Get pointer to the swizzled color tile
 */
static INLINE uint8_t *
lp_rast_get_color_tile_pointer(struct lp_rasterizer_task *task,
                               unsigned buf, enum lp_texture_usage usage)
{
   const struct lp_scene *scene = task->scene;

   assert(task->x % TILE_SIZE == 0);
   assert(task->y % TILE_SIZE == 0);
   assert(buf < scene->fb.nr_cbufs);

   if (!task->color_tiles[buf]) {
      struct pipe_surface *cbuf = scene->fb.cbufs[buf];
      struct llvmpipe_resource *lpt;
      assert(cbuf);
      lpt = llvmpipe_resource(cbuf->texture);
      task->color_tiles[buf] = lp_swizzled_cbuf[task->thread_index][buf];

      if (usage != LP_TEX_USAGE_WRITE_ALL) {
         llvmpipe_swizzle_cbuf_tile(lpt,
                                    cbuf->u.tex.first_layer,
                                    cbuf->u.tex.level,
                                    task->x, task->y,
                                    task->color_tiles[buf]);
      }
   }

   return task->color_tiles[buf];
}


/**
 * Get the pointer to a 4x4 color block (within a 64x64 tile).
 * We'll map the color buffer on demand here.
 * Note that this may be called even when there's no color buffers - return
 * NULL in that case.
 * \param x, y location of 4x4 block in window coords
 */
static INLINE uint8_t *
lp_rast_get_color_block_pointer(struct lp_rasterizer_task *task,
                                unsigned buf, unsigned x, unsigned y)
{
   unsigned px, py, pixel_offset;
   uint8_t *color;

   assert((x % TILE_VECTOR_WIDTH) == 0);
   assert((y % TILE_VECTOR_HEIGHT) == 0);

   color = lp_rast_get_color_tile_pointer(task, buf, LP_TEX_USAGE_READ_WRITE);
   assert(color);

   px = x % TILE_SIZE;
   py = y % TILE_SIZE;
   pixel_offset = tile_pixel_offset(px, py, 0);

   color = color + pixel_offset;

   assert(lp_check_alignment(color, 16));
   return color;
}


d178 4
a181 3
   const struct lp_scene *scene = task->scene;
   const struct lp_rast_state *state = task->state;
   struct lp_fragment_shader_variant *variant = state->variant;
d184 4
a187 1
   unsigned i;
d190 2
a191 2
   for (i = 0; i < scene->fb.nr_cbufs; i++)
      color[i] = lp_rast_get_color_block_pointer(task, i, x, y);
d193 1
a193 1
   depth = lp_rast_get_depth_block_pointer(task, x, y);
d195 10
a204 13
   /* run shader on 4x4 block */
   BEGIN_JIT_CALL(state, task);
   variant->jit_function[RAST_WHOLE]( &state->jit_context,
                                      x, y,
                                      inputs->frontfacing,
                                      GET_A0(inputs),
                                      GET_DADX(inputs),
                                      GET_DADY(inputs),
                                      color,
                                      depth,
                                      0xffff,
                                      &task->vis_counter );
   END_JIT_CALL();
a206 32
void lp_rast_triangle_1( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_2( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_3( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_4( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_5( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_6( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_7( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_8( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );

void lp_rast_triangle_3_4(struct lp_rasterizer_task *,
			  const union lp_rast_cmd_arg );

void lp_rast_triangle_3_16( struct lp_rasterizer_task *, 
                            const union lp_rast_cmd_arg );

void lp_rast_triangle_4_16( struct lp_rasterizer_task *, 
                            const union lp_rast_cmd_arg );

void
lp_rast_set_state(struct lp_rasterizer_task *task,
                  const union lp_rast_cmd_arg arg);
 
void
lp_debug_bin( const struct cmd_bin *bin );
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d39 1
a42 3
#define TILE_VECTOR_HEIGHT 4
#define TILE_VECTOR_WIDTH 4

a86 1
   unsigned width, height; /**< width, height of current tile, in pixels */
d97 3
a99 3
   /* occlude counter for visible pixels */
   struct lp_jit_thread_data thread_data;
   uint64_t ps_invocations;
a113 1
   boolean no_rast;  /**< For debugging/profiling */
d141 5
a145 1
 * Get pointer to the unswizzled color tile
d147 3
a149 3
static INLINE uint8_t *
lp_rast_get_unswizzled_color_tile_pointer(struct lp_rasterizer_task *task,
                                          unsigned buf, enum lp_texture_usage usage)
d152 1
a152 1
   unsigned format_bytes;
d154 2
a155 5
   assert(task->x < scene->tiles_x * TILE_SIZE);
   assert(task->y < scene->tiles_y * TILE_SIZE);
   assert(task->x % TILE_SIZE == 0);
   assert(task->y % TILE_SIZE == 0);
   assert(buf < scene->fb.nr_cbufs);
d157 8
a164 3
   if (!task->color_tiles[buf]) {
      struct pipe_surface *cbuf = scene->fb.cbufs[buf];
      assert(cbuf);
d166 3
a168 3
      format_bytes = util_format_get_blocksize(cbuf->format);
      task->color_tiles[buf] = scene->cbufs[buf].map + scene->cbufs[buf].stride * task->y + format_bytes * task->x;
   }
d170 2
a171 1
   return task->color_tiles[buf];
d176 1
a176 1
 * Get pointer to the unswizzled depth tile
d179 2
a180 2
lp_rast_get_unswizzled_depth_tile_pointer(struct lp_rasterizer_task *task,
                                          enum lp_texture_usage usage)
a182 1
   unsigned format_bytes;
a183 2
   assert(task->x < scene->tiles_x * TILE_SIZE);
   assert(task->y < scene->tiles_y * TILE_SIZE);
d186 1
d188 6
a193 3
   if (!task->depth_tile) {
      struct pipe_surface *dbuf = scene->fb.zsbuf;
      assert(dbuf);
d195 7
a201 2
      format_bytes = util_format_get_blocksize(dbuf->format);
      task->depth_tile = scene->zsbuf.map + scene->zsbuf.stride * task->y + format_bytes * task->x;
d204 1
a204 1
   return task->depth_tile;
d209 4
a212 1
 * Get the pointer to an unswizzled 4x4 color block (within an unswizzled 64x64 tile).
d216 2
a217 3
lp_rast_get_unswizzled_color_block_pointer(struct lp_rasterizer_task *task,
                                           unsigned buf, unsigned x, unsigned y,
                                           unsigned layer)
d219 1
a219 1
   unsigned px, py, pixel_offset, format_bytes;
a221 2
   assert(x < task->scene->tiles_x * TILE_SIZE);
   assert(y < task->scene->tiles_y * TILE_SIZE);
a223 3
   assert(buf < task->scene->fb.nr_cbufs);

   format_bytes = util_format_get_blocksize(task->scene->fb.cbufs[buf]->format);
d225 1
a225 1
   color = lp_rast_get_unswizzled_color_tile_pointer(task, buf, LP_TEX_USAGE_READ_WRITE);
d230 1
a230 1
   pixel_offset = px * format_bytes + py * task->scene->cbufs[buf].stride;
d234 1
a234 5
   if (layer) {
      color += layer * task->scene->cbufs[buf].layer_stride;
   }

   assert(lp_check_alignment(color, llvmpipe_get_format_alignment(task->scene->fb.cbufs[buf]->format)));
a238 36
/**
 * Get the pointer to an unswizzled 4x4 depth block (within an unswizzled 64x64 tile).
 * \param x, y location of 4x4 block in window coords
 */
static INLINE uint8_t *
lp_rast_get_unswizzled_depth_block_pointer(struct lp_rasterizer_task *task,
                                           unsigned x, unsigned y, unsigned layer)
{
   unsigned px, py, pixel_offset, format_bytes;
   uint8_t *depth;

   assert(x < task->scene->tiles_x * TILE_SIZE);
   assert(y < task->scene->tiles_y * TILE_SIZE);
   assert((x % TILE_VECTOR_WIDTH) == 0);
   assert((y % TILE_VECTOR_HEIGHT) == 0);

   format_bytes = util_format_get_blocksize(task->scene->fb.zsbuf->format);

   depth = lp_rast_get_unswizzled_depth_tile_pointer(task, LP_TEX_USAGE_READ_WRITE);
   assert(depth);

   px = x % TILE_SIZE;
   py = y % TILE_SIZE;
   pixel_offset = px * format_bytes + py * task->scene->zsbuf.stride;

   depth = depth + pixel_offset;

   if (layer) {
      depth += layer * task->scene->zsbuf.layer_stride;
   }

   assert(lp_check_alignment(depth, llvmpipe_get_format_alignment(task->scene->fb.zsbuf->format)));
   return depth;
}


d254 1
a254 3
   unsigned stride[PIPE_MAX_COLOR_BUFS];
   uint8_t *depth = NULL;
   unsigned depth_stride = 0;
d258 2
a259 4
   for (i = 0; i < scene->fb.nr_cbufs; i++) {
      stride[i] = scene->cbufs[i].stride;
      color[i] = lp_rast_get_unswizzled_color_block_pointer(task, i, x, y, inputs->layer);
   }
d261 1
a261 4
   if (scene->zsbuf.map) {
      depth = lp_rast_get_unswizzled_depth_block_pointer(task, x, y, inputs->layer);
      depth_stride = scene->zsbuf.stride;
   }
d263 13
a275 25
   /*
    * The rasterizer may produce fragments outside our
    * allocated 4x4 blocks hence need to filter them out here.
    */
   if ((x % TILE_SIZE) < task->width && (y % TILE_SIZE) < task->height) {
      /* not very accurate would need a popcount on the mask */
      /* always count this not worth bothering? */
      task->ps_invocations++;

      /* run shader on 4x4 block */
      BEGIN_JIT_CALL(state, task);
      variant->jit_function[RAST_WHOLE]( &state->jit_context,
                                         x, y,
                                         inputs->frontfacing,
                                         GET_A0(inputs),
                                         GET_DADX(inputs),
                                         GET_DADY(inputs),
                                         color,
                                         depth,
                                         0xffff,
                                         &task->thread_data,
                                         stride,
                                         depth_stride);
      END_JIT_CALL();
   }
d309 1
a309 1
lp_debug_bin( const struct cmd_bin *bin, int x, int y );
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d100 1
a100 1
   /** Non-interpolated passthru state and occlude counter for visible pixels */
a102 1
   uint8_t ps_inv_multiplier;
d295 2
a296 9
      if (scene->fb.cbufs[i]) {
         stride[i] = scene->cbufs[i].stride;
         color[i] = lp_rast_get_unswizzled_color_block_pointer(task, i, x, y,
                                                               inputs->layer);
      }
      else {
         stride[i] = 0;
         color[i] = NULL;
      }
d311 1
a311 4
      task->ps_invocations += 1 * variant->ps_inv_multiplier;

      /* Propagate non-interpolated raster state. */
      task->thread_data.raster_state.viewport_index = inputs->viewport_index;
a354 27
                            const union lp_rast_cmd_arg );


void lp_rast_triangle_32_1( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_32_2( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_32_3( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_32_4( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_32_5( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_32_6( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_32_7( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );
void lp_rast_triangle_32_8( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );

void lp_rast_triangle_32_3_4(struct lp_rasterizer_task *,
			  const union lp_rast_cmd_arg );

void lp_rast_triangle_32_3_16( struct lp_rasterizer_task *, 
                            const union lp_rast_cmd_arg );

void lp_rast_triangle_32_4_16( struct lp_rasterizer_task *, 
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d146 1
a146 1
 * Get pointer to the color tile
d149 2
a150 2
lp_rast_get_color_tile_pointer(struct lp_rasterizer_task *task,
                               unsigned buf, enum lp_texture_usage usage)
d166 1
a166 2
      task->color_tiles[buf] = scene->cbufs[buf].map + scene->cbufs[buf].stride * task->y +
                               format_bytes * task->x;
d174 1
a174 1
 * Get pointer to the depth tile
d177 2
a178 2
lp_rast_get_depth_tile_pointer(struct lp_rasterizer_task *task,
                               enum lp_texture_usage usage)
d193 1
a193 2
      task->depth_tile = scene->zsbuf.map + scene->zsbuf.stride * task->y +
                         format_bytes * task->x;
d201 1
a201 1
 * Get the pointer to a 4x4 color block (within a 64x64 tile).
d205 3
a207 3
lp_rast_get_color_block_pointer(struct lp_rasterizer_task *task,
                                unsigned buf, unsigned x, unsigned y,
                                unsigned layer)
d220 1
a220 1
   color = lp_rast_get_color_tile_pointer(task, buf, LP_TEX_USAGE_READ_WRITE);
d239 1
a239 1
 * Get the pointer to a 4x4 depth block (within a 64x64 tile).
d243 2
a244 2
lp_rast_get_depth_block_pointer(struct lp_rasterizer_task *task,
                                unsigned x, unsigned y, unsigned layer)
d256 1
a256 1
   depth = lp_rast_get_depth_tile_pointer(task, LP_TEX_USAGE_READ_WRITE);
d298 2
a299 2
         color[i] = lp_rast_get_color_block_pointer(task, i, x, y,
                                                    inputs->layer);
d308 1
a308 1
      depth = lp_rast_get_depth_block_pointer(task, x, y, inputs->layer);
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d146 1
a146 1
 * Get pointer to the unswizzled color tile
d149 2
a150 2
lp_rast_get_unswizzled_color_tile_pointer(struct lp_rasterizer_task *task,
                                          unsigned buf, enum lp_texture_usage usage)
d166 2
a167 1
      task->color_tiles[buf] = scene->cbufs[buf].map + scene->cbufs[buf].stride * task->y + format_bytes * task->x;
d175 1
a175 1
 * Get pointer to the unswizzled depth tile
d178 2
a179 2
lp_rast_get_unswizzled_depth_tile_pointer(struct lp_rasterizer_task *task,
                                          enum lp_texture_usage usage)
d194 2
a195 1
      task->depth_tile = scene->zsbuf.map + scene->zsbuf.stride * task->y + format_bytes * task->x;
d203 1
a203 1
 * Get the pointer to an unswizzled 4x4 color block (within an unswizzled 64x64 tile).
d207 3
a209 3
lp_rast_get_unswizzled_color_block_pointer(struct lp_rasterizer_task *task,
                                           unsigned buf, unsigned x, unsigned y,
                                           unsigned layer)
d222 1
a222 1
   color = lp_rast_get_unswizzled_color_tile_pointer(task, buf, LP_TEX_USAGE_READ_WRITE);
d241 1
a241 1
 * Get the pointer to an unswizzled 4x4 depth block (within an unswizzled 64x64 tile).
d245 2
a246 2
lp_rast_get_unswizzled_depth_block_pointer(struct lp_rasterizer_task *task,
                                           unsigned x, unsigned y, unsigned layer)
d258 1
a258 1
   depth = lp_rast_get_unswizzled_depth_tile_pointer(task, LP_TEX_USAGE_READ_WRITE);
d300 2
a301 2
         color[i] = lp_rast_get_unswizzled_color_block_pointer(task, i, x, y,
                                                               inputs->layer);
d310 1
a310 1
      depth = lp_rast_get_unswizzled_depth_block_pointer(task, x, y, inputs->layer);
@


