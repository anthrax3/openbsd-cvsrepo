head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.16
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.14
	OPENBSD_5_7_BASE:1.2
	v10_2_9:1.1.1.1
	v10_4_3:1.1.1.1
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	v10_2_3:1.1.1.1
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.2;
commitid	TnlogFl9nOv2eaRf;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


#ifndef LP_FENCE_H
#define LP_FENCE_H


#include "os/os_thread.h"
#include "pipe/p_state.h"
#include "util/u_inlines.h"


struct pipe_screen;


struct lp_fence
{
   struct pipe_reference reference;
   unsigned id;

   pipe_mutex mutex;
   pipe_condvar signalled;

   boolean issued;
   unsigned rank;
   unsigned count;
};


struct lp_fence *
lp_fence_create(unsigned rank);


void
lp_fence_signal(struct lp_fence *fence);

boolean
lp_fence_signalled(struct lp_fence *fence);

void
lp_fence_wait(struct lp_fence *fence);

void
llvmpipe_init_screen_fence_funcs(struct pipe_screen *screen);


void
lp_fence_destroy(struct lp_fence *fence);

static INLINE void
lp_fence_reference(struct lp_fence **ptr,
                   struct lp_fence *f)
{
   struct lp_fence *old = *ptr;

   if (pipe_reference(&old->reference, &f->reference)) {
      lp_fence_destroy(old);
   }
   
   *ptr = f;
}

static INLINE boolean
lp_fence_issued(const struct lp_fence *fence)
{
   return fence->issued;
}


#endif /* LP_FENCE_H */
@


1.2
log
@Merge Mesa 7.10.3
@
text
@@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d35 1
d44 1
d49 1
d60 9
d70 23
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a34 1
#include "util/u_inlines.h"
a42 1
   unsigned id;
a46 1
   boolean issued;
a56 9
lp_fence_signal(struct lp_fence *fence);

boolean
lp_fence_signalled(struct lp_fence *fence);

void
lp_fence_wait(struct lp_fence *fence);

void
a57 23


void
lp_fence_destroy(struct lp_fence *fence);

static INLINE void
lp_fence_reference(struct lp_fence **ptr,
                   struct lp_fence *f)
{
   struct lp_fence *old = *ptr;

   if (pipe_reference(&old->reference, &f->reference)) {
      lp_fence_destroy(old);
   }
   
   *ptr = f;
}

static INLINE boolean
lp_fence_issued(const struct lp_fence *fence)
{
   return fence->issued;
}
@

