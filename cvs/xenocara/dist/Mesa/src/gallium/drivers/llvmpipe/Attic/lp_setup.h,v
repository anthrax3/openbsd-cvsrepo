head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.34;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.27;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.58;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/
#ifndef LP_SETUP_H
#define LP_SETUP_H

#include "pipe/p_compiler.h"
#include "lp_jit.h"

struct draw_context;
struct vertex_info;


struct pipe_resource;
struct pipe_query;
struct pipe_surface;
struct pipe_blend_color;
struct pipe_screen;
struct pipe_framebuffer_state;
struct lp_fragment_shader_variant;
struct lp_jit_context;
struct llvmpipe_query;
struct pipe_fence_handle;
struct lp_setup_variant;
struct lp_setup_context;

void lp_setup_reset( struct lp_setup_context *setup );

struct lp_setup_context *
lp_setup_create( struct pipe_context *pipe,
                 struct draw_context *draw );

void
lp_setup_clear(struct lp_setup_context *setup,
               const union pipe_color_union *clear_color,
               double clear_depth,
               unsigned clear_stencil,
               unsigned flags);



void
lp_setup_flush( struct lp_setup_context *setup,
                struct pipe_fence_handle **fence,
                const char *reason);


void
lp_setup_bind_framebuffer( struct lp_setup_context *setup,
                           const struct pipe_framebuffer_state *fb );

void 
lp_setup_set_triangle_state( struct lp_setup_context *setup,
                             unsigned cullmode,
                             boolean front_is_ccw,
                             boolean scissor,
                             boolean half_pixel_center,
                             boolean bottom_edge_rule);

void 
lp_setup_set_line_state( struct lp_setup_context *setup,
                         float line_width);

void 
lp_setup_set_point_state( struct lp_setup_context *setup,
                          float point_size,                          
                          boolean point_size_per_vertex,
                          uint sprite_coord_enable,
                          uint sprite_coord_origin);

void
lp_setup_set_setup_variant( struct lp_setup_context *setup,
			    const struct lp_setup_variant *variant );

void
lp_setup_set_fs_variant( struct lp_setup_context *setup,
                         struct lp_fragment_shader_variant *variant );

void
lp_setup_set_fs_constants(struct lp_setup_context *setup,
                          unsigned num,
                          struct pipe_constant_buffer *buffers);

void
lp_setup_set_alpha_ref_value( struct lp_setup_context *setup,
                              float alpha_ref_value );

void
lp_setup_set_stencil_ref_values( struct lp_setup_context *setup,
                                 const ubyte refs[2] );

void
lp_setup_set_blend_color( struct lp_setup_context *setup,
                          const struct pipe_blend_color *blend_color );

void
lp_setup_set_scissors( struct lp_setup_context *setup,
                       const struct pipe_scissor_state *scissors );

void
lp_setup_set_viewports(struct lp_setup_context *setup,
                       unsigned num_viewports,
                       const struct pipe_viewport_state *viewports);

void
lp_setup_set_fragment_sampler_views(struct lp_setup_context *setup,
                                    unsigned num,
                                    struct pipe_sampler_view **views);

void
lp_setup_set_fragment_sampler_state(struct lp_setup_context *setup,
                                    unsigned num,
                                    struct pipe_sampler_state **samplers);

unsigned
lp_setup_is_resource_referenced( const struct lp_setup_context *setup,
                                const struct pipe_resource *texture );

void
lp_setup_set_flatshade_first( struct lp_setup_context *setup, 
                              boolean flatshade_first );

void
lp_setup_set_rasterizer_discard( struct lp_setup_context *setup, 
                                 boolean rasterizer_discard );

void
lp_setup_set_vertex_info( struct lp_setup_context *setup, 
                          struct vertex_info *info );

void
lp_setup_begin_query(struct lp_setup_context *setup,
                     struct llvmpipe_query *pq);

void
lp_setup_end_query(struct lp_setup_context *setup,
                   struct llvmpipe_query *pq);

static INLINE unsigned
lp_clamp_viewport_idx(int idx)
{
   return (PIPE_MAX_VIEWPORTS > idx && idx >= 0) ? idx : 0;
}

#endif
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d124 5
d163 1
a163 1
lp_clamp_scissor_idx(int idx)
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d58 1
a58 1
               const float *clear_color,
d80 2
a81 1
                             boolean gl_rasterization_rules );
d104 2
a105 2
                          struct pipe_resource *buffer);

d120 2
a121 2
lp_setup_set_scissor( struct lp_setup_context *setup,
                      const struct pipe_scissor_state *scissor );
d131 1
a131 1
                                    const struct pipe_sampler_state **samplers);
d142 4
d156 6
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a66 1
                unsigned flags,
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a35 18
enum lp_interp {
   LP_INTERP_CONSTANT,
   LP_INTERP_LINEAR,
   LP_INTERP_PERSPECTIVE,
   LP_INTERP_POSITION,
   LP_INTERP_FACING
};

/* Describes how to generate all the fragment shader inputs from the
 * the vertices passed into our triangle/line/point functions.
 *
 * Vertices are treated as an array of float[4] values, indexed by
 * src_index.
 */
struct lp_shader_input {
   enum lp_interp interp;       /* how to interpolate values */
   unsigned src_index;          /* where to find values in incoming vertices */
};
d37 2
a38 1
struct pipe_texture;
a39 1
struct pipe_buffer;
d43 1
a43 1
struct lp_fragment_shader;
d45 4
d50 3
a52 1
struct setup_context *
d57 1
a57 1
lp_setup_clear(struct setup_context *setup,
a62 2
struct pipe_fence_handle *
lp_setup_fence( struct setup_context *setup );
d66 4
a69 2
lp_setup_flush( struct setup_context *setup,
                unsigned flags );
d73 1
a73 1
lp_setup_bind_framebuffer( struct setup_context *setup,
d77 1
a77 1
lp_setup_set_triangle_state( struct setup_context *setup,
d80 13
a92 1
                             boolean scissor );
d95 2
a96 3
lp_setup_set_fs_inputs( struct setup_context *setup,
                        const struct lp_shader_input *interp,
                        unsigned nr );
d99 2
a100 4
lp_setup_set_fs_functions( struct setup_context *setup,
                           lp_jit_frag_func jit_function0,
                           lp_jit_frag_func jit_function1,
                           boolean opaque );
d103 2
a104 2
lp_setup_set_fs_constants(struct setup_context *setup,
                          struct pipe_buffer *buffer);
d108 1
a108 1
lp_setup_set_alpha_ref_value( struct setup_context *setup,
d112 5
a116 1
lp_setup_set_blend_color( struct setup_context *setup,
d120 1
a120 1
lp_setup_set_scissor( struct setup_context *setup,
d124 8
a131 2
lp_setup_set_sampler_textures( struct setup_context *setup,
                               unsigned num, struct pipe_texture **texture);
d134 2
a135 2
lp_setup_is_texture_referenced( const struct setup_context *setup,
                                const struct pipe_texture *texture );
d138 1
a138 1
lp_setup_set_flatshade_first( struct setup_context *setup, 
d142 1
a142 1
lp_setup_set_vertex_info( struct setup_context *setup, 
d145 7
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d36 18
d55 1
a55 2
struct pipe_resource;
struct pipe_query;
d57 1
d61 1
a61 1
struct lp_fragment_shader_variant;
a62 4
struct llvmpipe_query;
struct pipe_fence_handle;
struct lp_setup_variant;
struct lp_setup_context;
d64 1
a64 3
void lp_setup_reset( struct lp_setup_context *setup );

struct lp_setup_context *
d69 1
a69 1
lp_setup_clear(struct lp_setup_context *setup,
d75 2
d80 2
a81 4
lp_setup_flush( struct lp_setup_context *setup,
                unsigned flags,
                struct pipe_fence_handle **fence,
                const char *reason);
d85 1
a85 1
lp_setup_bind_framebuffer( struct lp_setup_context *setup,
d89 1
a89 1
lp_setup_set_triangle_state( struct lp_setup_context *setup,
d92 1
a92 13
                             boolean scissor,
                             boolean gl_rasterization_rules );

void 
lp_setup_set_line_state( struct lp_setup_context *setup,
                         float line_width);

void 
lp_setup_set_point_state( struct lp_setup_context *setup,
                          float point_size,                          
                          boolean point_size_per_vertex,
                          uint sprite_coord_enable,
                          uint sprite_coord_origin);
d95 3
a97 2
lp_setup_set_setup_variant( struct lp_setup_context *setup,
			    const struct lp_setup_variant *variant );
d100 4
a103 2
lp_setup_set_fs_variant( struct lp_setup_context *setup,
                         struct lp_fragment_shader_variant *variant );
d106 2
a107 2
lp_setup_set_fs_constants(struct lp_setup_context *setup,
                          struct pipe_resource *buffer);
d111 1
a111 1
lp_setup_set_alpha_ref_value( struct lp_setup_context *setup,
d115 1
a115 5
lp_setup_set_stencil_ref_values( struct lp_setup_context *setup,
                                 const ubyte refs[2] );

void
lp_setup_set_blend_color( struct lp_setup_context *setup,
d119 1
a119 1
lp_setup_set_scissor( struct lp_setup_context *setup,
d123 2
a124 8
lp_setup_set_fragment_sampler_views(struct lp_setup_context *setup,
                                    unsigned num,
                                    struct pipe_sampler_view **views);

void
lp_setup_set_fragment_sampler_state(struct lp_setup_context *setup,
                                    unsigned num,
                                    const struct pipe_sampler_state **samplers);
d127 2
a128 2
lp_setup_is_resource_referenced( const struct lp_setup_context *setup,
                                const struct pipe_resource *texture );
d131 1
a131 1
lp_setup_set_flatshade_first( struct lp_setup_context *setup, 
d135 1
a135 1
lp_setup_set_vertex_info( struct lp_setup_context *setup, 
a137 7
void
lp_setup_begin_query(struct lp_setup_context *setup,
                     struct llvmpipe_query *pq);

void
lp_setup_end_query(struct lp_setup_context *setup,
                   struct llvmpipe_query *pq);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d58 1
a58 1
               const union pipe_color_union *clear_color,
d67 1
d81 1
a81 2
                             boolean half_pixel_center,
                             boolean bottom_edge_rule);
d104 2
a105 2
                          unsigned num,
                          struct pipe_constant_buffer *buffers);
d120 2
a121 2
lp_setup_set_scissors( struct lp_setup_context *setup,
                       const struct pipe_scissor_state *scissors );
d131 1
a131 1
                                    struct pipe_sampler_state **samplers);
a141 4
lp_setup_set_rasterizer_discard( struct lp_setup_context *setup, 
                                 boolean rasterizer_discard );

void
a151 6

static INLINE unsigned
lp_clamp_scissor_idx(int idx)
{
   return (PIPE_MAX_VIEWPORTS > idx && idx >= 0) ? idx : 0;
}
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
a123 5
lp_setup_set_viewports(struct lp_setup_context *setup,
                       unsigned num_viewports,
                       const struct pipe_viewport_state *viewports);

void
d158 1
a158 1
lp_clamp_viewport_idx(int idx)
@


