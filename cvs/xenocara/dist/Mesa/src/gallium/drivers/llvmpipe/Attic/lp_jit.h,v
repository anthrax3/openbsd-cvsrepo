head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.52;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.32;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.25;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.57;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.07.26;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.44.34;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

/**
 * @@file
 * C - JIT interfaces
 *
 * @@author Jose Fonseca <jfonseca@@vmware.com>
 */

#ifndef LP_JIT_H
#define LP_JIT_H


#include "gallivm/lp_bld_struct.h"
#include "gallivm/lp_bld_limits.h"

#include "pipe/p_state.h"
#include "lp_texture.h"


struct lp_fragment_shader_variant;
struct llvmpipe_screen;


struct lp_jit_texture
{
   uint32_t width;        /* same as number of elements */
   uint32_t height;
   uint32_t depth;        /* doubles as array size */
   uint32_t first_level;
   uint32_t last_level;
   const void *base;
   uint32_t row_stride[LP_MAX_TEXTURE_LEVELS];
   uint32_t img_stride[LP_MAX_TEXTURE_LEVELS];
   uint32_t mip_offsets[LP_MAX_TEXTURE_LEVELS];
};


struct lp_jit_sampler
{
   float min_lod;
   float max_lod;
   float lod_bias;
   float border_color[4];
};


struct lp_jit_viewport
{
   float min_depth;
   float max_depth;
};


enum {
   LP_JIT_TEXTURE_WIDTH = 0,
   LP_JIT_TEXTURE_HEIGHT,
   LP_JIT_TEXTURE_DEPTH,
   LP_JIT_TEXTURE_FIRST_LEVEL,
   LP_JIT_TEXTURE_LAST_LEVEL,
   LP_JIT_TEXTURE_BASE,
   LP_JIT_TEXTURE_ROW_STRIDE,
   LP_JIT_TEXTURE_IMG_STRIDE,
   LP_JIT_TEXTURE_MIP_OFFSETS,
   LP_JIT_TEXTURE_NUM_FIELDS  /* number of fields above */
};


enum {
   LP_JIT_SAMPLER_MIN_LOD,
   LP_JIT_SAMPLER_MAX_LOD,
   LP_JIT_SAMPLER_LOD_BIAS,
   LP_JIT_SAMPLER_BORDER_COLOR,
   LP_JIT_SAMPLER_NUM_FIELDS  /* number of fields above */
};


enum {
   LP_JIT_VIEWPORT_MIN_DEPTH,
   LP_JIT_VIEWPORT_MAX_DEPTH,
   LP_JIT_VIEWPORT_NUM_FIELDS /* number of fields above */
};


/**
 * This structure is passed directly to the generated fragment shader.
 *
 * It contains the derived state.
 *
 * Changes here must be reflected in the lp_jit_context_* macros and
 * lp_jit_init_types function. Changes to the ordering should be avoided.
 *
 * Only use types with a clear size and padding here, in particular prefer the
 * stdint.h types to the basic integer types.
 */
struct lp_jit_context
{
   const float *constants[LP_MAX_TGSI_CONST_BUFFERS];
   int num_constants[LP_MAX_TGSI_CONST_BUFFERS];

   float alpha_ref_value;

   uint32_t stencil_ref_front, stencil_ref_back;

   uint8_t *u8_blend_color;
   float *f_blend_color;

   struct lp_jit_viewport *viewports;

   struct lp_jit_texture textures[PIPE_MAX_SHADER_SAMPLER_VIEWS];
   struct lp_jit_sampler samplers[PIPE_MAX_SAMPLERS];
};


/**
 * These enum values must match the position of the fields in the
 * lp_jit_context struct above.
 */
enum {
   LP_JIT_CTX_CONSTANTS = 0,
   LP_JIT_CTX_NUM_CONSTANTS,
   LP_JIT_CTX_ALPHA_REF,
   LP_JIT_CTX_STENCIL_REF_FRONT,
   LP_JIT_CTX_STENCIL_REF_BACK,
   LP_JIT_CTX_U8_BLEND_COLOR,
   LP_JIT_CTX_F_BLEND_COLOR,
   LP_JIT_CTX_VIEWPORTS,
   LP_JIT_CTX_TEXTURES,
   LP_JIT_CTX_SAMPLERS,
   LP_JIT_CTX_COUNT
};


#define lp_jit_context_constants(_gallivm, _ptr) \
   lp_build_struct_get_ptr(_gallivm, _ptr, LP_JIT_CTX_CONSTANTS, "constants")

#define lp_jit_context_num_constants(_gallivm, _ptr) \
   lp_build_struct_get_ptr(_gallivm, _ptr, LP_JIT_CTX_NUM_CONSTANTS, "num_constants")

#define lp_jit_context_alpha_ref_value(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_ALPHA_REF, "alpha_ref_value")

#define lp_jit_context_stencil_ref_front_value(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_STENCIL_REF_FRONT, "stencil_ref_front")

#define lp_jit_context_stencil_ref_back_value(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_STENCIL_REF_BACK, "stencil_ref_back")

#define lp_jit_context_u8_blend_color(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_U8_BLEND_COLOR, "u8_blend_color")

#define lp_jit_context_f_blend_color(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_F_BLEND_COLOR, "f_blend_color")

#define lp_jit_context_viewports(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_VIEWPORTS, "viewports")

#define lp_jit_context_textures(_gallivm, _ptr) \
   lp_build_struct_get_ptr(_gallivm, _ptr, LP_JIT_CTX_TEXTURES, "textures")

#define lp_jit_context_samplers(_gallivm, _ptr) \
   lp_build_struct_get_ptr(_gallivm, _ptr, LP_JIT_CTX_SAMPLERS, "samplers")


struct lp_jit_thread_data
{
   uint64_t vis_counter;

   /*
    * Non-interpolated rasterizer state passed through to the fragment shader.
    */
   struct {
      uint32_t viewport_index;
   } raster_state;
};


enum {
   LP_JIT_THREAD_DATA_COUNTER = 0,
   LP_JIT_THREAD_DATA_RASTER_STATE_VIEWPORT_INDEX,
   LP_JIT_THREAD_DATA_COUNT
};


#define lp_jit_thread_data_counter(_gallivm, _ptr) \
   lp_build_struct_get_ptr(_gallivm, _ptr, LP_JIT_THREAD_DATA_COUNTER, "counter")

#define lp_jit_thread_data_raster_state_viewport_index(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, \
                       LP_JIT_THREAD_DATA_RASTER_STATE_VIEWPORT_INDEX, \
                       "raster_state.viewport_index")
 
/**
 * typedef for fragment shader function
 *
 * @@param context       jit context
 * @@param x             block start x
 * @@param y             block start y
 * @@param facing        is front facing
 * @@param a0            shader input a0
 * @@param dadx          shader input dadx
 * @@param dady          shader input dady
 * @@param color         color buffer
 * @@param depth         depth buffer
 * @@param mask          mask of visible pixels in block
 * @@param thread_data   task thread data
 * @@param stride        color buffer row stride in bytes
 * @@param depth_stride  depth buffer row stride in bytes
 */
typedef void
(*lp_jit_frag_func)(const struct lp_jit_context *context,
                    uint32_t x,
                    uint32_t y,
                    uint32_t facing,
                    const void *a0,
                    const void *dadx,
                    const void *dady,
                    uint8_t **color,
                    uint8_t *depth,
                    uint32_t mask,
                    struct lp_jit_thread_data *thread_data,
                    unsigned *stride,
                    unsigned depth_stride);


void
lp_jit_screen_cleanup(struct llvmpipe_screen *screen);


void
lp_jit_screen_init(struct llvmpipe_screen *screen);


void
lp_jit_init_types(struct lp_fragment_shader_variant *lp);


#endif /* LP_JIT_H */
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d255 1
a255 1
boolean
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d255 1
a255 1
void
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d73 7
d103 7
d124 1
d133 2
d146 1
d152 1
d162 3
d180 3
d193 7
d205 1
d213 5
a217 1

@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d40 1
d46 1
d52 1
a52 1
   uint32_t width;
d54 1
a54 1
   uint32_t depth;
d57 1
d60 6
a65 2
   const void *data[LP_MAX_TEXTURE_LEVELS];
   /* sampler state, actually */
d79 1
d82 1
a82 5
   LP_JIT_TEXTURE_DATA,
   LP_JIT_TEXTURE_MIN_LOD,
   LP_JIT_TEXTURE_MAX_LOD,
   LP_JIT_TEXTURE_LOD_BIAS,
   LP_JIT_TEXTURE_BORDER_COLOR,
d87 8
d109 1
a109 1
   const float *constants;
d115 2
a116 2
   /* FIXME: store (also?) in floats */
   uint8_t *blend_color;
d118 2
a119 1
   struct lp_jit_texture textures[PIPE_MAX_SAMPLERS];
d132 2
a133 1
   LP_JIT_CTX_BLEND_COLOR,
d135 1
d141 1
a141 1
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_CONSTANTS, "constants")
d152 5
a156 2
#define lp_jit_context_blend_color(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_BLEND_COLOR, "blend_color")
d161 15
d177 2
d180 18
d207 1
a207 1
                    void *depth,
d209 3
a211 1
                    uint32_t *counter);
d222 2
a223 2
LLVMTypeRef
lp_jit_get_context_type(struct llvmpipe_context *lp);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d53 1
d70 1
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d42 1
d54 8
a61 2
   uint32_t stride;
   const void *data;
d70 8
a77 2
   LP_JIT_TEXTURE_STRIDE,
   LP_JIT_TEXTURE_DATA
d99 1
a99 2
   /** floats, not ints */
   float scissor_xmin, scissor_ymin, scissor_xmax, scissor_ymax;
d108 13
a120 2
#define lp_jit_context_constants(_builder, _ptr) \
   lp_build_struct_get(_builder, _ptr, 0, "constants")
a121 2
#define lp_jit_context_alpha_ref_value(_builder, _ptr) \
   lp_build_struct_get(_builder, _ptr, 1, "alpha_ref_value")
d123 2
a124 2
#define lp_jit_context_scissor_xmin_value(_builder, _ptr) \
   lp_build_struct_get(_builder, _ptr, 2, "scissor_xmin")
d126 2
a127 2
#define lp_jit_context_scissor_ymin_value(_builder, _ptr) \
   lp_build_struct_get(_builder, _ptr, 3, "scissor_ymin")
d129 2
a130 2
#define lp_jit_context_scissor_xmax_value(_builder, _ptr) \
   lp_build_struct_get(_builder, _ptr, 4, "scissor_xmax")
d132 2
a133 2
#define lp_jit_context_scissor_ymax_value(_builder, _ptr) \
   lp_build_struct_get(_builder, _ptr, 5, "scissor_ymax")
d135 2
a136 2
#define lp_jit_context_blend_color(_builder, _ptr) \
   lp_build_struct_get(_builder, _ptr, 6, "blend_color")
d138 2
a139 1
#define LP_JIT_CONTEXT_TEXTURES_INDEX 7
a140 2
#define lp_jit_context_textures(_builder, _ptr) \
   lp_build_struct_get_ptr(_builder, _ptr, LP_JIT_CONTEXT_TEXTURES_INDEX, "textures")
d147 1
d153 2
a154 6
                    const int32_t c1,
                    const int32_t c2,
                    const int32_t c3,
                    const int32_t *step1,
                    const int32_t *step2,
                    const int32_t *step3);
d163 4
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a41 1
#include "lp_texture.h"
d53 2
a54 8
   uint32_t row_stride[LP_MAX_TEXTURE_LEVELS];
   uint32_t img_stride[LP_MAX_TEXTURE_LEVELS];
   const void *data[LP_MAX_TEXTURE_LEVELS];
   /* sampler state, actually */
   float min_lod;
   float max_lod;
   float lod_bias;
   float border_color[4];
d63 2
a64 8
   LP_JIT_TEXTURE_ROW_STRIDE,
   LP_JIT_TEXTURE_IMG_STRIDE,
   LP_JIT_TEXTURE_DATA,
   LP_JIT_TEXTURE_MIN_LOD,
   LP_JIT_TEXTURE_MAX_LOD,
   LP_JIT_TEXTURE_LOD_BIAS,
   LP_JIT_TEXTURE_BORDER_COLOR,
   LP_JIT_TEXTURE_NUM_FIELDS  /* number of fields above */
d86 2
a87 1
   uint32_t stencil_ref_front, stencil_ref_back;
d96 2
a97 13
/**
 * These enum values must match the position of the fields in the
 * lp_jit_context struct above.
 */
enum {
   LP_JIT_CTX_CONSTANTS = 0,
   LP_JIT_CTX_ALPHA_REF,
   LP_JIT_CTX_STENCIL_REF_FRONT,
   LP_JIT_CTX_STENCIL_REF_BACK,
   LP_JIT_CTX_BLEND_COLOR,
   LP_JIT_CTX_TEXTURES,
   LP_JIT_CTX_COUNT
};
d99 2
d102 2
a103 2
#define lp_jit_context_constants(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_CONSTANTS, "constants")
d105 2
a106 2
#define lp_jit_context_alpha_ref_value(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_ALPHA_REF, "alpha_ref_value")
d108 2
a109 2
#define lp_jit_context_stencil_ref_front_value(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_STENCIL_REF_FRONT, "stencil_ref_front")
d111 2
a112 2
#define lp_jit_context_stencil_ref_back_value(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_STENCIL_REF_BACK, "stencil_ref_back")
d114 2
a115 2
#define lp_jit_context_blend_color(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_BLEND_COLOR, "blend_color")
d117 1
a117 2
#define lp_jit_context_textures(_gallivm, _ptr) \
   lp_build_struct_get_ptr(_gallivm, _ptr, LP_JIT_CTX_TEXTURES, "textures")
d119 2
a126 1
                    uint32_t facing,
d132 6
a137 2
                    uint32_t mask,
                    uint32_t *counter);
a145 4


LLVMTypeRef
lp_jit_get_context_type(struct llvmpipe_context *lp);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a39 1
#include "gallivm/lp_bld_limits.h"
a44 1
struct lp_fragment_shader_variant;
d50 1
a50 1
   uint32_t width;        /* same as number of elements */
d52 1
a52 2
   uint32_t depth;        /* doubles as array size */
   uint32_t first_level;
a53 1
   const void *base;
d56 2
a57 6
   uint32_t mip_offsets[LP_MAX_TEXTURE_LEVELS];
};


struct lp_jit_sampler
{
a68 1
   LP_JIT_TEXTURE_FIRST_LEVEL,
a69 1
   LP_JIT_TEXTURE_BASE,
d72 5
a76 1
   LP_JIT_TEXTURE_MIP_OFFSETS,
a80 8
enum {
   LP_JIT_SAMPLER_MIN_LOD,
   LP_JIT_SAMPLER_MAX_LOD,
   LP_JIT_SAMPLER_LOD_BIAS,
   LP_JIT_SAMPLER_BORDER_COLOR,
   LP_JIT_SAMPLER_NUM_FIELDS  /* number of fields above */
};

d95 1
a95 1
   const float *constants[LP_MAX_TGSI_CONST_BUFFERS];
d101 2
a102 2
   uint8_t *u8_blend_color;
   float *f_blend_color;
d104 1
a104 2
   struct lp_jit_texture textures[PIPE_MAX_SHADER_SAMPLER_VIEWS];
   struct lp_jit_sampler samplers[PIPE_MAX_SAMPLERS];
d117 1
a117 2
   LP_JIT_CTX_U8_BLEND_COLOR,
   LP_JIT_CTX_F_BLEND_COLOR,
a118 1
   LP_JIT_CTX_SAMPLERS,
d124 1
a124 1
   lp_build_struct_get_ptr(_gallivm, _ptr, LP_JIT_CTX_CONSTANTS, "constants")
d135 2
a136 5
#define lp_jit_context_u8_blend_color(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_U8_BLEND_COLOR, "u8_blend_color")

#define lp_jit_context_f_blend_color(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_F_BLEND_COLOR, "f_blend_color")
a140 15
#define lp_jit_context_samplers(_gallivm, _ptr) \
   lp_build_struct_get_ptr(_gallivm, _ptr, LP_JIT_CTX_SAMPLERS, "samplers")


struct lp_jit_thread_data
{
   uint64_t vis_counter;
};


enum {
   LP_JIT_THREAD_DATA_COUNTER = 0,
   LP_JIT_THREAD_DATA_COUNT
};

a141 2
#define lp_jit_thread_data_counter(_gallivm, _ptr) \
   lp_build_struct_get_ptr(_gallivm, _ptr, LP_JIT_THREAD_DATA_COUNTER, "counter")
a142 18

/**
 * typedef for fragment shader function
 *
 * @@param context       jit context
 * @@param x             block start x
 * @@param y             block start y
 * @@param facing        is front facing
 * @@param a0            shader input a0
 * @@param dadx          shader input dadx
 * @@param dady          shader input dady
 * @@param color         color buffer
 * @@param depth         depth buffer
 * @@param mask          mask of visible pixels in block
 * @@param thread_data   task thread data
 * @@param stride        color buffer row stride in bytes
 * @@param depth_stride  depth buffer row stride in bytes
 */
d152 1
a152 1
                    uint8_t *depth,
d154 1
a154 3
                    struct lp_jit_thread_data *thread_data,
                    unsigned *stride,
                    unsigned depth_stride);
d165 2
a166 2
void
lp_jit_init_types(struct lp_fragment_shader_variant *lp);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a72 7
struct lp_jit_viewport
{
   float min_depth;
   float max_depth;
};


a95 7
enum {
   LP_JIT_VIEWPORT_MIN_DEPTH,
   LP_JIT_VIEWPORT_MAX_DEPTH,
   LP_JIT_VIEWPORT_NUM_FIELDS /* number of fields above */
};


a109 1
   int num_constants[LP_MAX_TGSI_CONST_BUFFERS];
a117 2
   struct lp_jit_viewport *viewports;

a128 1
   LP_JIT_CTX_NUM_CONSTANTS,
a133 1
   LP_JIT_CTX_VIEWPORTS,
a142 3
#define lp_jit_context_num_constants(_gallivm, _ptr) \
   lp_build_struct_get_ptr(_gallivm, _ptr, LP_JIT_CTX_NUM_CONSTANTS, "num_constants")

a157 3
#define lp_jit_context_viewports(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, LP_JIT_CTX_VIEWPORTS, "viewports")

a167 7

   /*
    * Non-interpolated rasterizer state passed through to the fragment shader.
    */
   struct {
      uint32_t viewport_index;
   } raster_state;
a172 1
   LP_JIT_THREAD_DATA_RASTER_STATE_VIEWPORT_INDEX,
d180 1
a180 5
#define lp_jit_thread_data_raster_state_viewport_index(_gallivm, _ptr) \
   lp_build_struct_get(_gallivm, _ptr, \
                       LP_JIT_THREAD_DATA_RASTER_STATE_VIEWPORT_INDEX, \
                       "raster_state.viewport_index")
 
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d255 1
a255 1
boolean
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d255 1
a255 1
void
@


