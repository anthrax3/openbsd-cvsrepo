head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.4
	OPENBSD_5_7_BASE:1.1.1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.2
	OPENBSD_5_6_BASE:1.1.1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.1.1.2.0.2
	OPENBSD_5_5_BASE:1.1.1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.30;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.59;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2010 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#include "lp_context.h"
#include "lp_state.h"
#include "lp_texture.h"

#include "util/u_memory.h"
#include "draw/draw_context.h"


static void *
llvmpipe_create_stream_output_state(struct pipe_context *pipe,
                                    const struct pipe_stream_output_state *templ)
{
   struct lp_so_state *so;
   so = (struct lp_so_state *) CALLOC_STRUCT(lp_so_state);

   if (so) {
      so->base.num_outputs = templ->num_outputs;
      so->base.stride = templ->stride;
      memcpy(so->base.output_buffer,
             templ->output_buffer,
             sizeof(int) * templ->num_outputs);
      memcpy(so->base.register_index,
             templ->register_index,
             sizeof(int) * templ->num_outputs);
      memcpy(so->base.register_mask,
             templ->register_mask,
             sizeof(ubyte) * templ->num_outputs);
   }
   return so;
}

static void
llvmpipe_bind_stream_output_state(struct pipe_context *pipe,
                                  void *so)
{
   struct llvmpipe_context *lp = llvmpipe_context(pipe);
   struct lp_so_state *lp_so = (struct lp_so_state *) so;

   lp->so = lp_so;

   lp->dirty |= LP_NEW_SO;

   if (lp_so)
      draw_set_so_state(lp->draw, &lp_so->base);
}

static void
llvmpipe_delete_stream_output_state(struct pipe_context *pipe, void *so)
{
   FREE( so );
}

static void
llvmpipe_set_stream_output_buffers(struct pipe_context *pipe,
                                   struct pipe_resource **buffers,
                                   int *offsets,
                                   int num_buffers)
{
   struct llvmpipe_context *lp = llvmpipe_context(pipe);
   int i;
   void *map_buffers[PIPE_MAX_SO_BUFFERS];

   assert(num_buffers <= PIPE_MAX_SO_BUFFERS);
   if (num_buffers > PIPE_MAX_SO_BUFFERS)
      num_buffers = PIPE_MAX_SO_BUFFERS;

   lp->dirty |= LP_NEW_SO_BUFFERS;

   for (i = 0; i < num_buffers; ++i) {
      void *mapped;
      struct llvmpipe_resource *res = llvmpipe_resource(buffers[i]);

      if (!res) {
         /* the whole call is invalid, bail out */
         lp->so_target.num_buffers = 0;
         draw_set_mapped_so_buffers(lp->draw, 0, 0);
         return;
      }

      lp->so_target.buffer[i] = res;
      lp->so_target.offset[i] = offsets[i];
      lp->so_target.so_count[i] = 0;

      mapped = res->data;
      if (offsets[i] >= 0)
         map_buffers[i] = ((char*)mapped) + offsets[i];
      else {
         /* this is a buffer append */
         assert(!"appending not implemented");
         map_buffers[i] = mapped;
      }
   }
   lp->so_target.num_buffers = num_buffers;

   draw_set_mapped_so_buffers(lp->draw, map_buffers, num_buffers);
}

void
llvmpipe_init_so_funcs(struct llvmpipe_context *llvmpipe)
{
   llvmpipe->pipe.create_stream_output_state =
      llvmpipe_create_stream_output_state;
   llvmpipe->pipe.bind_stream_output_state =
      llvmpipe_bind_stream_output_state;
   llvmpipe->pipe.delete_stream_output_state =
      llvmpipe_delete_stream_output_state;

   llvmpipe->pipe.set_stream_output_buffers =
      llvmpipe_set_stream_output_buffers;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d35 27
a61 5
static struct pipe_stream_output_target *
llvmpipe_create_so_target(struct pipe_context *pipe,
                          struct pipe_resource *buffer,
                          unsigned buffer_offset,
                          unsigned buffer_size)
d63 4
a66 1
   struct draw_so_target *t;
d68 4
a71 10
   t = CALLOC_STRUCT(draw_so_target);
   if (!t)
      return NULL;

   t->target.context = pipe;
   t->target.reference.count = 1;
   pipe_resource_reference(&t->target.buffer, buffer);
   t->target.buffer_offset = buffer_offset;
   t->target.buffer_size = buffer_size;
   return &t->target;
d73 1
a73 1
 
d75 1
a75 2
llvmpipe_so_target_destroy(struct pipe_context *pipe,
                           struct pipe_stream_output_target *target)
d77 1
a77 2
   pipe_resource_reference(&target->buffer, NULL);
   FREE(target);
d81 4
a84 4
llvmpipe_set_so_targets(struct pipe_context *pipe,
                        unsigned num_targets,
                        struct pipe_stream_output_target **targets,
                        unsigned append_bitmask)
d86 1
a86 1
   struct llvmpipe_context *llvmpipe = llvmpipe_context(pipe);
d88 30
a117 7
   for (i = 0; i < num_targets; i++) {
      pipe_so_target_reference((struct pipe_stream_output_target **)&llvmpipe->so_targets[i], targets[i]);
      /* if we're not appending then lets reset the internal
         data of our so target */
      if (!(append_bitmask & (1 << i)) && llvmpipe->so_targets[i]) {
         llvmpipe->so_targets[i]->internal_offset = 0;
         llvmpipe->so_targets[i]->emitted_vertices = 0;
d120 1
d122 1
a122 4
   for (; i < llvmpipe->num_so_targets; i++) {
      pipe_so_target_reference((struct pipe_stream_output_target **)&llvmpipe->so_targets[i], NULL);
   }
   llvmpipe->num_so_targets = num_targets;
d126 1
a126 1
llvmpipe_init_so_funcs(struct llvmpipe_context *pipe)
d128 9
a136 3
   pipe->pipe.create_stream_output_target = llvmpipe_create_so_target;
   pipe->pipe.stream_output_target_destroy = llvmpipe_so_target_destroy;
   pipe->pipe.set_stream_output_targets = llvmpipe_set_so_targets;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d67 1
a67 1
                        const unsigned *offsets)
a71 1
      const boolean append = (offsets[i] == (unsigned)-1);
d73 5
a77 4
      /* If we're not appending then lets set the internal
         offset to what was requested */
      if (!append && llvmpipe->so_targets[i]) {
         llvmpipe->so_targets[i]->internal_offset = offsets[i];
@


