head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.52;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.00.33;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.26;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.57;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.07.27;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.44.35;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

/**
 * The rast code is concerned with rasterization of command bins.
 * Each screen tile has a bin associated with it.  To render the
 * scene we iterate over the tile bins and execute the commands
 * in each bin.
 * We'll do that with multiple threads...
 */


#ifndef LP_RAST_H
#define LP_RAST_H

#include "pipe/p_compiler.h"
#include "util/u_pack_color.h"
#include "lp_jit.h"


struct lp_rasterizer;
struct lp_scene;
struct lp_fence;
struct cmd_bin;

#define FIXED_TYPE_WIDTH 64
/** For sub-pixel positioning */
#define FIXED_ORDER 8
#define FIXED_ONE (1<<FIXED_ORDER)
#define FIXED_SHIFT (FIXED_TYPE_WIDTH - 1)
/** Maximum length of an edge in a primitive in pixels.
 *  If the framebuffer is large we have to think about fixed-point
 *  integer overflow. Coordinates need ((FIXED_TYPE_WIDTH/2) - 1) bits
 *  to be able to fit product of two such coordinates inside
 *  FIXED_TYPE_WIDTH, any larger and we could overflow a
 *  FIXED_TYPE_WIDTH_-bit int.
 */
#define MAX_FIXED_LENGTH (1 << (((FIXED_TYPE_WIDTH/2) - 1) - FIXED_ORDER))

#define MAX_FIXED_LENGTH32 (1 << (((32/2) - 1) - FIXED_ORDER))

/* Rasterizer output size going to jit fs, width/height */
#define LP_RASTER_BLOCK_SIZE 4

#define LP_MAX_ACTIVE_BINNED_QUERIES 16

#define IMUL64(a, b) (((int64_t)(a)) * ((int64_t)(b)))

struct lp_rasterizer_task;


/**
 * Rasterization state.
 * Objects of this type are put into the shared data bin and pointed
 * to by commands in the per-tile bins.
 */
struct lp_rast_state {
   /* State for the shader.  This also contains state which feeds into
    * the fragment shader, such as blend color and alpha ref value.
    */
   struct lp_jit_context jit_context;
   
   /* The shader itself.  Probably we also need to pass a pointer to
    * the tile color/z/stencil data somehow
     */
   struct lp_fragment_shader_variant *variant;
};


/**
 * Coefficients necessary to run the shader at a given location.
 * First coefficient is position.
 * These pointers point into the bin data buffer.
 */
struct lp_rast_shader_inputs {
   unsigned frontfacing:1;      /** True for front-facing */
   unsigned disable:1;          /** Partially binned, disable this command */
   unsigned opaque:1;           /** Is opaque */
   unsigned pad0:29;            /* wasted space */
   unsigned stride;             /* how much to advance data between a0, dadx, dady */
   unsigned layer;              /* the layer to render to (from gs, already clamped) */
   unsigned viewport_index;     /* the active viewport index (from gs, already clamped) */
   /* followed by a0, dadx, dady and planes[] */
};

struct lp_rast_plane {
   /* edge function values at minx,miny ?? */
   int64_t c;

   int32_t dcdx;
   int32_t dcdy;

   /* one-pixel sized trivial reject offsets for each plane */
   int64_t eo;
};

/**
 * Rasterization information for a triangle known to be in this bin,
 * plus inputs to run the shader:
 * These fields are tile- and bin-independent.
 * Objects of this type are put into the lp_setup_context::data buffer.
 */
struct lp_rast_triangle {
#ifdef DEBUG
   float v[3][2];
   float pad0;
   float pad1;
#endif

   /* inputs for the shader */
   struct lp_rast_shader_inputs inputs;
   /* planes are also allocated here */
};


struct lp_rast_clear_rb {
   union util_color color_val;
   unsigned cbuf;
};


#define GET_A0(inputs) ((float (*)[4])((inputs)+1))
#define GET_DADX(inputs) ((float (*)[4])((char *)((inputs) + 1) + (inputs)->stride))
#define GET_DADY(inputs) ((float (*)[4])((char *)((inputs) + 1) + 2 * (inputs)->stride))
#define GET_PLANES(tri) ((struct lp_rast_plane *)((char *)(&(tri)->inputs + 1) + 3 * (tri)->inputs.stride))



struct lp_rasterizer *
lp_rast_create( unsigned num_threads );

void
lp_rast_destroy( struct lp_rasterizer * );

void 
lp_rast_queue_scene( struct lp_rasterizer *rast,
                     struct lp_scene *scene );

void
lp_rast_finish( struct lp_rasterizer *rast );


union lp_rast_cmd_arg {
   const struct lp_rast_shader_inputs *shade_tile;
   struct {
      const struct lp_rast_triangle *tri;
      unsigned plane_mask;
   } triangle;
   const struct lp_rast_state *set_state;
   const struct lp_rast_clear_rb *clear_rb;
   struct {
      uint64_t value;
      uint64_t mask;
   } clear_zstencil;
   const struct lp_rast_state *state;
   struct lp_fence *fence;
   struct llvmpipe_query *query_obj;
};


/* Cast wrappers.  Hopefully these compile to noops!
 */
static INLINE union lp_rast_cmd_arg
lp_rast_arg_inputs( const struct lp_rast_shader_inputs *shade_tile )
{
   union lp_rast_cmd_arg arg;
   arg.shade_tile = shade_tile;
   return arg;
}

static INLINE union lp_rast_cmd_arg
lp_rast_arg_triangle( const struct lp_rast_triangle *triangle,
                      unsigned plane_mask)
{
   union lp_rast_cmd_arg arg;
   arg.triangle.tri = triangle;
   arg.triangle.plane_mask = plane_mask;
   return arg;
}

/**
 * Build argument for a contained triangle.
 *
 * All planes are enabled, so instead of the plane mask we pass the upper
 * left coordinates of the a block that fully encloses the triangle.
 */
static INLINE union lp_rast_cmd_arg
lp_rast_arg_triangle_contained( const struct lp_rast_triangle *triangle,
                                unsigned x, unsigned y)
{
   union lp_rast_cmd_arg arg;
   arg.triangle.tri = triangle;
   arg.triangle.plane_mask = x | (y << 8);
   return arg;
}

static INLINE union lp_rast_cmd_arg
lp_rast_arg_state( const struct lp_rast_state *state )
{
   union lp_rast_cmd_arg arg;
   arg.set_state = state;
   return arg;
}

static INLINE union lp_rast_cmd_arg
lp_rast_arg_fence( struct lp_fence *fence )
{
   union lp_rast_cmd_arg arg;
   arg.fence = fence;
   return arg;
}


static INLINE union lp_rast_cmd_arg
lp_rast_arg_clearzs( uint64_t value, uint64_t mask )
{
   union lp_rast_cmd_arg arg;
   arg.clear_zstencil.value = value;
   arg.clear_zstencil.mask = mask;
   return arg;
}


static INLINE union lp_rast_cmd_arg
lp_rast_arg_query( struct llvmpipe_query *pq )
{
   union lp_rast_cmd_arg arg;
   arg.query_obj = pq;
   return arg;
}

static INLINE union lp_rast_cmd_arg
lp_rast_arg_null( void )
{
   union lp_rast_cmd_arg arg;
   arg.set_state = NULL;
   return arg;
}


/**
 * Binnable Commands.
 * These get put into bins by the setup code and are called when
 * the bins are executed.
 */
#define LP_RAST_OP_CLEAR_COLOR       0x0
#define LP_RAST_OP_CLEAR_ZSTENCIL    0x1
#define LP_RAST_OP_TRIANGLE_1        0x2
#define LP_RAST_OP_TRIANGLE_2        0x3
#define LP_RAST_OP_TRIANGLE_3        0x4
#define LP_RAST_OP_TRIANGLE_4        0x5
#define LP_RAST_OP_TRIANGLE_5        0x6
#define LP_RAST_OP_TRIANGLE_6        0x7
#define LP_RAST_OP_TRIANGLE_7        0x8
#define LP_RAST_OP_TRIANGLE_8        0x9
#define LP_RAST_OP_TRIANGLE_3_4      0xa
#define LP_RAST_OP_TRIANGLE_3_16     0xb
#define LP_RAST_OP_TRIANGLE_4_16     0xc
#define LP_RAST_OP_SHADE_TILE        0xd
#define LP_RAST_OP_SHADE_TILE_OPAQUE 0xe
#define LP_RAST_OP_BEGIN_QUERY       0xf
#define LP_RAST_OP_END_QUERY         0x10
#define LP_RAST_OP_SET_STATE         0x11
#define LP_RAST_OP_TRIANGLE_32_1     0x12
#define LP_RAST_OP_TRIANGLE_32_2     0x13
#define LP_RAST_OP_TRIANGLE_32_3     0x14
#define LP_RAST_OP_TRIANGLE_32_4     0x15
#define LP_RAST_OP_TRIANGLE_32_5     0x16
#define LP_RAST_OP_TRIANGLE_32_6     0x17
#define LP_RAST_OP_TRIANGLE_32_7     0x18
#define LP_RAST_OP_TRIANGLE_32_8     0x19
#define LP_RAST_OP_TRIANGLE_32_3_4   0x1a
#define LP_RAST_OP_TRIANGLE_32_3_16  0x1b
#define LP_RAST_OP_TRIANGLE_32_4_16  0x1c

#define LP_RAST_OP_MAX               0x1d
#define LP_RAST_OP_MASK              0xff

void
lp_debug_bins( struct lp_scene *scene );
void
lp_debug_draw_bins_by_cmd_length( struct lp_scene *scene );
void
lp_debug_draw_bins_by_coverage( struct lp_scene *scene );


#ifdef PIPE_ARCH_SSE
#include <emmintrin.h>
#include "util/u_sse.h"

static INLINE __m128i
lp_plane_to_m128i(const struct lp_rast_plane *plane)
{
   return _mm_setr_epi32((int32_t)plane->c, (int32_t)plane->dcdx,
                         (int32_t)plane->dcdy, (int32_t)plane->eo);
}

#endif

#endif
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d69 1
a69 1
#define LP_MAX_ACTIVE_BINNED_QUERIES 64
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d69 1
a69 1
#define LP_MAX_ACTIVE_BINNED_QUERIES 16
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d41 1
d50 1
d52 1
a52 1
#define FIXED_ORDER 4
d54 11
d71 1
d106 1
a106 1
   unsigned pad2;               /* wasted space */
a109 3
/* Note: the order of these values is important as they are loaded by
 * sse code in rasterization:
 */
d112 1
a112 1
   int c;
d114 2
a115 2
   int dcdx;
   int dcdy;
d118 1
a118 1
   int eo;
d140 6
a158 3
unsigned
lp_rast_get_num_threads( struct lp_rasterizer * );

d174 1
a174 1
   union pipe_color_union clear_color;
d288 11
d300 1
a300 1
#define LP_RAST_OP_MAX               0x12
d310 13
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d53 5
d91 1
a92 1
   unsigned pad3;               /* wasted space */
d160 1
a160 1
   uint8_t clear_color[4];
d162 2
a163 2
      uint32_t value;
      uint32_t mask;
d191 16
d225 1
a225 1
lp_rast_arg_clearzs( unsigned value, unsigned mask )
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d69 1
a69 3
    * the tile color/z/stencil data somehow:
    * jit_function[0] skips the triangle in/out test code
    * jit_function[1] does triangle in/out testing
d71 1
a71 3
   lp_jit_frag_func jit_function[2];

   boolean opaque;
d81 16
a96 3
   float (*a0)[4];
   float (*dadx)[4];
   float (*dady)[4];
d98 5
a102 2
   /* edge/step info for 3 edges and 4x4 block of pixels */
   PIPE_ALIGN_VAR(16) int step[3][16];
a104 1

d109 1
a109 1
 * Objects of this type are put into the setup_context::data buffer.
d114 2
d118 4
a121 4
   /* one-pixel sized trivial accept offsets for each plane */
   int ei1;                   
   int ei2;
   int ei3;
a122 14
   /* one-pixel sized trivial reject offsets for each plane */
   int eo1;                   
   int eo2;
   int eo3;

   /* y deltas for vertex pairs (in fixed pt) */
   int dy12;
   int dy23;
   int dy31;

   /* x deltas for vertex pairs (in fixed pt) */
   int dx12;
   int dx23;
   int dx31;
d124 4
a127 6
   /* edge function values at minx,miny ?? */
   int c1, c2, c3;

   /* inputs for the shader */
   PIPE_ALIGN_VAR(16) struct lp_rast_shader_inputs inputs;
};
d132 1
a132 1
lp_rast_create( void );
d150 4
a153 1
   const struct lp_rast_triangle *triangle;
d156 5
a160 1
   unsigned clear_zstencil;
d162 1
d177 2
a178 1
lp_rast_arg_triangle( const struct lp_rast_triangle *triangle )
d181 2
a182 1
   arg.triangle = triangle;
d204 18
a229 1

d235 18
d254 2
a255 2
void lp_rast_clear_color( struct lp_rasterizer_task *, 
                          const union lp_rast_cmd_arg );
d257 6
a262 14
void lp_rast_clear_zstencil( struct lp_rasterizer_task *, 
                             const union lp_rast_cmd_arg );

void lp_rast_load_color( struct lp_rasterizer_task *, 
                         const union lp_rast_cmd_arg );

void lp_rast_set_state( struct lp_rasterizer_task *, 
                        const union lp_rast_cmd_arg );

void lp_rast_triangle( struct lp_rasterizer_task *, 
                       const union lp_rast_cmd_arg );

void lp_rast_shade_tile( struct lp_rasterizer_task *,
                         const union lp_rast_cmd_arg );
a263 2
void lp_rast_fence( struct lp_rasterizer_task *,
                    const union lp_rast_cmd_arg );
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d69 3
a71 1
    * the tile color/z/stencil data somehow
d73 3
a75 1
   struct lp_fragment_shader_variant *variant;
d85 6
a90 8
   unsigned frontfacing:1;      /** True for front-facing */
   unsigned disable:1;          /** Partially binned, disable this command */
   unsigned opaque:1;           /** Is opaque */
   unsigned pad0:29;            /* wasted space */
   unsigned stride;             /* how much to advance data between a0, dadx, dady */
   unsigned pad2;               /* wasted space */
   unsigned pad3;               /* wasted space */
   /* followed by a0, dadx, dady and planes[] */
a92 13
/* Note: the order of these values is important as they are loaded by
 * sse code in rasterization:
 */
struct lp_rast_plane {
   /* edge function values at minx,miny ?? */
   int c;

   int dcdx;
   int dcdy;

   /* one-pixel sized trivial reject offsets for each plane */
   int eo;
};
d98 1
a98 1
 * Objects of this type are put into the lp_setup_context::data buffer.
a102 2
   float pad0;
   float pad1;
d105 23
d129 1
a129 2
   struct lp_rast_shader_inputs inputs;
   /* planes are also allocated here */
a132 6
#define GET_A0(inputs) ((float (*)[4])((inputs)+1))
#define GET_DADX(inputs) ((float (*)[4])((char *)((inputs) + 1) + (inputs)->stride))
#define GET_DADY(inputs) ((float (*)[4])((char *)((inputs) + 1) + 2 * (inputs)->stride))
#define GET_PLANES(tri) ((struct lp_rast_plane *)((char *)(&(tri)->inputs + 1) + 3 * (tri)->inputs.stride))


d135 1
a135 1
lp_rast_create( unsigned num_threads );
d153 1
a153 4
   struct {
      const struct lp_rast_triangle *tri;
      unsigned plane_mask;
   } triangle;
d156 1
a156 5
   struct {
      uint32_t value;
      uint32_t mask;
   } clear_zstencil;
   const struct lp_rast_state *state;
a157 1
   struct llvmpipe_query *query_obj;
d172 1
a172 2
lp_rast_arg_triangle( const struct lp_rast_triangle *triangle,
                      unsigned plane_mask)
d175 1
a175 2
   arg.triangle.tri = triangle;
   arg.triangle.plane_mask = plane_mask;
a196 18
lp_rast_arg_clearzs( unsigned value, unsigned mask )
{
   union lp_rast_cmd_arg arg;
   arg.clear_zstencil.value = value;
   arg.clear_zstencil.mask = mask;
   return arg;
}


static INLINE union lp_rast_cmd_arg
lp_rast_arg_query( struct llvmpipe_query *pq )
{
   union lp_rast_cmd_arg arg;
   arg.query_obj = pq;
   return arg;
}

static INLINE union lp_rast_cmd_arg
d205 1
a210 18
#define LP_RAST_OP_CLEAR_COLOR       0x0
#define LP_RAST_OP_CLEAR_ZSTENCIL    0x1
#define LP_RAST_OP_TRIANGLE_1        0x2
#define LP_RAST_OP_TRIANGLE_2        0x3
#define LP_RAST_OP_TRIANGLE_3        0x4
#define LP_RAST_OP_TRIANGLE_4        0x5
#define LP_RAST_OP_TRIANGLE_5        0x6
#define LP_RAST_OP_TRIANGLE_6        0x7
#define LP_RAST_OP_TRIANGLE_7        0x8
#define LP_RAST_OP_TRIANGLE_8        0x9
#define LP_RAST_OP_TRIANGLE_3_4      0xa
#define LP_RAST_OP_TRIANGLE_3_16     0xb
#define LP_RAST_OP_TRIANGLE_4_16     0xc
#define LP_RAST_OP_SHADE_TILE        0xd
#define LP_RAST_OP_SHADE_TILE_OPAQUE 0xe
#define LP_RAST_OP_BEGIN_QUERY       0xf
#define LP_RAST_OP_END_QUERY         0x10
#define LP_RAST_OP_SET_STATE         0x11
d212 11
a222 2
#define LP_RAST_OP_MAX               0x12
#define LP_RAST_OP_MASK              0xff
d224 5
a228 6
void
lp_debug_bins( struct lp_scene *scene );
void
lp_debug_draw_bins_by_cmd_length( struct lp_scene *scene );
void
lp_debug_draw_bins_by_coverage( struct lp_scene *scene );
d230 2
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a52 5
/* Rasterizer output size going to jit fs, width/height */
#define LP_RASTER_BLOCK_SIZE 4

#define LP_MAX_ACTIVE_BINNED_QUERIES 16

a85 1
   unsigned layer;              /* the layer to render to (from gs, already clamped) */
d87 1
d155 1
a155 1
   union pipe_color_union clear_color;
d157 2
a158 2
      uint64_t value;
      uint64_t mask;
a185 16
/**
 * Build argument for a contained triangle.
 *
 * All planes are enabled, so instead of the plane mask we pass the upper
 * left coordinates of the a block that fully encloses the triangle.
 */
static INLINE union lp_rast_cmd_arg
lp_rast_arg_triangle_contained( const struct lp_rast_triangle *triangle,
                                unsigned x, unsigned y)
{
   union lp_rast_cmd_arg arg;
   arg.triangle.tri = triangle;
   arg.triangle.plane_mask = x | (y << 8);
   return arg;
}

d204 1
a204 1
lp_rast_arg_clearzs( uint64_t value, uint64_t mask )
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a40 1
#include "util/u_pack_color.h"
a48 1
#define FIXED_TYPE_WIDTH 64
d50 1
a50 1
#define FIXED_ORDER 8
a51 11
#define FIXED_SHIFT (FIXED_TYPE_WIDTH - 1)
/** Maximum length of an edge in a primitive in pixels.
 *  If the framebuffer is large we have to think about fixed-point
 *  integer overflow. Coordinates need ((FIXED_TYPE_WIDTH/2) - 1) bits
 *  to be able to fit product of two such coordinates inside
 *  FIXED_TYPE_WIDTH, any larger and we could overflow a
 *  FIXED_TYPE_WIDTH_-bit int.
 */
#define MAX_FIXED_LENGTH (1 << (((FIXED_TYPE_WIDTH/2) - 1) - FIXED_ORDER))

#define MAX_FIXED_LENGTH32 (1 << (((32/2) - 1) - FIXED_ORDER))
a57 1
#define IMUL64(a, b) (((int64_t)(a)) * ((int64_t)(b)))
d92 1
a92 1
   unsigned viewport_index;     /* the active viewport index (from gs, already clamped) */
d96 3
d101 1
a101 1
   int64_t c;
d103 2
a104 2
   int32_t dcdx;
   int32_t dcdy;
d107 1
a107 1
   int64_t eo;
a128 6
struct lp_rast_clear_rb {
   union util_color color_val;
   unsigned cbuf;
};


d142 3
d160 1
a160 1
   const struct lp_rast_clear_rb *clear_rb;
a273 11
#define LP_RAST_OP_TRIANGLE_32_1     0x12
#define LP_RAST_OP_TRIANGLE_32_2     0x13
#define LP_RAST_OP_TRIANGLE_32_3     0x14
#define LP_RAST_OP_TRIANGLE_32_4     0x15
#define LP_RAST_OP_TRIANGLE_32_5     0x16
#define LP_RAST_OP_TRIANGLE_32_6     0x17
#define LP_RAST_OP_TRIANGLE_32_7     0x18
#define LP_RAST_OP_TRIANGLE_32_8     0x19
#define LP_RAST_OP_TRIANGLE_32_3_4   0x1a
#define LP_RAST_OP_TRIANGLE_32_3_16  0x1b
#define LP_RAST_OP_TRIANGLE_32_4_16  0x1c
d275 1
a275 1
#define LP_RAST_OP_MAX               0x1d
a284 13

#ifdef PIPE_ARCH_SSE
#include <emmintrin.h>
#include "util/u_sse.h"

static INLINE __m128i
lp_plane_to_m128i(const struct lp_rast_plane *plane)
{
   return _mm_setr_epi32((int32_t)plane->c, (int32_t)plane->dcdx,
                         (int32_t)plane->dcdy, (int32_t)plane->eo);
}

#endif
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d69 1
a69 1
#define LP_MAX_ACTIVE_BINNED_QUERIES 64
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d69 1
a69 1
#define LP_MAX_ACTIVE_BINNED_QUERIES 16
@


