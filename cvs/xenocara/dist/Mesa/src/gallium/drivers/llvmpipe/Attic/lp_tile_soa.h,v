head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.09.05.14.00.36;	author jsg;	state dead;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@/**************************************************************************
 * 
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#ifndef LP_TILE_SOA_H
#define LP_TILE_SOA_H

#include "pipe/p_compiler.h"
#include "tgsi/tgsi_exec.h" /* for NUM_CHANNELS */
#include "lp_limits.h"

#ifdef __cplusplus
extern "C" {
#endif


struct pipe_transfer;


#define TILE_VECTOR_HEIGHT 4
#define TILE_VECTOR_WIDTH 4

extern const unsigned char
tile_offset[TILE_VECTOR_HEIGHT][TILE_VECTOR_WIDTH];

#define TILE_C_STRIDE (TILE_VECTOR_HEIGHT * TILE_VECTOR_WIDTH) //16
#define TILE_X_STRIDE (NUM_CHANNELS * TILE_C_STRIDE) //64
#define TILE_Y_STRIDE (TILE_VECTOR_HEIGHT * TILE_SIZE * NUM_CHANNELS) //1024


#ifdef DEBUG
extern unsigned lp_tile_unswizzle_count;
extern unsigned lp_tile_swizzle_count;
#endif


/**
 * Return offset of the given pixel (and color channel) from the start
 * of a tile, in bytes.
 */
static INLINE unsigned
tile_pixel_offset(unsigned x, unsigned y, unsigned c)
{
   unsigned ix = (x / TILE_VECTOR_WIDTH) * TILE_X_STRIDE;
   unsigned iy = (y / TILE_VECTOR_HEIGHT) * TILE_Y_STRIDE;
   unsigned offset = iy + ix + c * TILE_C_STRIDE +
      tile_offset[y % TILE_VECTOR_HEIGHT][x % TILE_VECTOR_WIDTH];
   return offset;
}


#define TILE_PIXEL(_p, _x, _y, _c)   ((_p)[tile_pixel_offset(_x, _y, _c)])


void
lp_tile_swizzle_4ub(enum pipe_format format,
                 uint8_t *dst,
                 const void *src, unsigned src_stride,
                 unsigned x, unsigned y);


void
lp_tile_unswizzle_4ub(enum pipe_format format,
                  const uint8_t *src,
                  void *dst, unsigned dst_stride,
                  unsigned x, unsigned y);



#ifdef __cplusplus
}
#endif

#endif
@


1.2
log
@Merge Mesa 7.10.3
@
text
@@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d33 1
a33 1
#include "lp_tile_size.h"
d53 23
a75 5
#define TILE_PIXEL(_p, _x, _y, _c) \
   ((_p)[((_y) / TILE_VECTOR_HEIGHT) * TILE_Y_STRIDE + \
         ((_x) / TILE_VECTOR_WIDTH) * TILE_X_STRIDE + \
         (_c) * TILE_C_STRIDE + \
         tile_offset[(_y) % TILE_VECTOR_HEIGHT][(_x) % TILE_VECTOR_WIDTH]])
d79 1
a79 1
lp_tile_read_4ub(enum pipe_format format,
d82 1
a82 1
                 unsigned x, unsigned y, unsigned w, unsigned h);
d86 1
a86 1
lp_tile_write_4ub(enum pipe_format format,
d89 1
a89 1
                  unsigned x, unsigned y, unsigned w, unsigned h);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d33 1
a33 1
#include "lp_limits.h"
d53 5
a57 23

#ifdef DEBUG
extern unsigned lp_tile_unswizzle_count;
extern unsigned lp_tile_swizzle_count;
#endif


/**
 * Return offset of the given pixel (and color channel) from the start
 * of a tile, in bytes.
 */
static INLINE unsigned
tile_pixel_offset(unsigned x, unsigned y, unsigned c)
{
   unsigned ix = (x / TILE_VECTOR_WIDTH) * TILE_X_STRIDE;
   unsigned iy = (y / TILE_VECTOR_HEIGHT) * TILE_Y_STRIDE;
   unsigned offset = iy + ix + c * TILE_C_STRIDE +
      tile_offset[y % TILE_VECTOR_HEIGHT][x % TILE_VECTOR_WIDTH];
   return offset;
}


#define TILE_PIXEL(_p, _x, _y, _c)   ((_p)[tile_pixel_offset(_x, _y, _c)])
d61 1
a61 1
lp_tile_swizzle_4ub(enum pipe_format format,
d64 1
a64 1
                 unsigned x, unsigned y);
d68 1
a68 1
lp_tile_unswizzle_4ub(enum pipe_format format,
d71 1
a71 1
                  unsigned x, unsigned y);
@

