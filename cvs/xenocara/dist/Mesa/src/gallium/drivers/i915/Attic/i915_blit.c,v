head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.30;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.11;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.26;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.06;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.51;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/


#include "i915_blit.h"
#include "i915_reg.h"
#include "i915_batch.h"
#include "i915_debug.h"


void
i915_fill_blit(struct i915_context *i915,
               unsigned cpp,
               unsigned rgba_mask,
               unsigned short dst_pitch,
               struct i915_winsys_buffer *dst_buffer,
               unsigned dst_offset,
               short x, short y, 
               short w, short h, 
               unsigned color)
{
   unsigned BR13, CMD;


   I915_DBG(DBG_BLIT, "%s dst:buf(%p)/%d+%d %d,%d sz:%dx%d\n",
            __FUNCTION__, dst_buffer, dst_pitch, dst_offset, x, y, w, h);

   if(!i915_winsys_validate_buffers(i915->batch, &dst_buffer, 1)) {
      FLUSH_BATCH(NULL, I915_FLUSH_ASYNC);
      assert(i915_winsys_validate_buffers(i915->batch, &dst_buffer, 1));
   }

   switch (cpp) {
   case 1:
   case 2:
   case 3:
      BR13 = (((int) dst_pitch) & 0xffff) |
         (0xF0 << 16) | (1 << 24);
      CMD = XY_COLOR_BLT_CMD;
      break;
   case 4:
      BR13 = (((int) dst_pitch) & 0xffff) |
         (0xF0 << 16) | (1 << 24) | (1 << 25);
      CMD = (XY_COLOR_BLT_CMD | rgba_mask);
      break;
   default:
      return;
   }

   if (!BEGIN_BATCH(6)) {
      FLUSH_BATCH(NULL, I915_FLUSH_ASYNC);
      assert(BEGIN_BATCH(6));
   }
   OUT_BATCH(CMD);
   OUT_BATCH(BR13);
   OUT_BATCH((y << 16) | x);
   OUT_BATCH(((y + h) << 16) | (x + w));
   OUT_RELOC_FENCED(dst_buffer, I915_USAGE_2D_TARGET, dst_offset);
   OUT_BATCH(color);

   i915_set_flush_dirty(i915, I915_FLUSH_CACHE);
}

void
i915_copy_blit(struct i915_context *i915,
               unsigned cpp,
               unsigned short src_pitch,
               struct i915_winsys_buffer *src_buffer,
               unsigned src_offset,
               unsigned short dst_pitch,
               struct i915_winsys_buffer *dst_buffer,
               unsigned dst_offset,
               short src_x, short src_y,
               short dst_x, short dst_y, 
               short w, short h)
{
   unsigned CMD, BR13;
   int dst_y2 = dst_y + h;
   int dst_x2 = dst_x + w;
   struct i915_winsys_buffer *buffers[2] = {src_buffer, dst_buffer};


   I915_DBG(DBG_BLIT,
            "%s src:buf(%p)/%d+%d %d,%d dst:buf(%p)/%d+%d %d,%d sz:%dx%d\n",
            __FUNCTION__,
            src_buffer, src_pitch, src_offset, src_x, src_y,
            dst_buffer, dst_pitch, dst_offset, dst_x, dst_y, w, h);

   if(!i915_winsys_validate_buffers(i915->batch, buffers, 2)) {
      FLUSH_BATCH(NULL, I915_FLUSH_ASYNC);
      assert(i915_winsys_validate_buffers(i915->batch, buffers, 2));
   }

   switch (cpp) {
   case 1:
   case 2:
   case 3:
      BR13 = (((int) dst_pitch) & 0xffff) |
         (0xCC << 16) | (1 << 24);
      CMD = XY_SRC_COPY_BLT_CMD;
      break;
   case 4:
      BR13 = (((int) dst_pitch) & 0xffff) |
             (0xCC << 16) | (1 << 24) | (1 << 25);
      CMD = (XY_SRC_COPY_BLT_CMD | XY_SRC_COPY_BLT_WRITE_ALPHA |
            XY_SRC_COPY_BLT_WRITE_RGB);
      break;
   default:
      return;
   }

   if (dst_y2 < dst_y || dst_x2 < dst_x) {
      return;
   }

   /* Hardware can handle negative pitches but loses the ability to do
    * proper overlapping blits in that case.  We don't really have a
    * need for either at this stage.
    */
   assert (dst_pitch > 0 && src_pitch > 0);

   if (!BEGIN_BATCH(8)) {
      FLUSH_BATCH(NULL, I915_FLUSH_ASYNC);
      assert(BEGIN_BATCH(8));
   }
   OUT_BATCH(CMD);
   OUT_BATCH(BR13);
   OUT_BATCH((dst_y << 16) | dst_x);
   OUT_BATCH((dst_y2 << 16) | dst_x2);
   OUT_RELOC_FENCED(dst_buffer, I915_USAGE_2D_TARGET, dst_offset);
   OUT_BATCH((src_y << 16) | src_x);
   OUT_BATCH(((int) src_pitch & 0xffff));
   OUT_RELOC_FENCED(src_buffer, I915_USAGE_2D_SOURCE, src_offset);

   i915_set_flush_dirty(i915, I915_FLUSH_CACHE);
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d53 1
a53 1
      FLUSH_BATCH(NULL);
d75 1
a75 1
      FLUSH_BATCH(NULL);
d114 1
a114 1
      FLUSH_BATCH(NULL);
d147 1
a147 1
      FLUSH_BATCH(NULL);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d52 5
d74 1
a74 1
   if (!BEGIN_BATCH(6, 1)) {
d76 1
a76 1
      assert(BEGIN_BATCH(6, 1));
d84 2
d104 1
d113 5
d146 1
a146 1
   if (!BEGIN_BATCH(8, 2)) {
d148 1
a148 1
      assert(BEGIN_BATCH(8, 2));
d158 2
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a33 1
#define FILE_DEBUG_FLAG DEBUG_BLIT
d38 1
d40 1
a40 1
               struct intel_buffer *dst_buffer,
d49 2
a50 4
   I915_DBG(i915,
      "%s dst:buf(%p)/%d+%d %d,%d sz:%dx%d\n",
      __FUNCTION__,
      dst_buffer, dst_pitch, dst_offset, x, y, w, h);
d63 1
a63 2
      CMD = (XY_COLOR_BLT_CMD | XY_COLOR_BLT_WRITE_ALPHA |
             XY_COLOR_BLT_WRITE_RGB);
d77 1
a77 1
   OUT_RELOC(dst_buffer, INTEL_USAGE_2D_TARGET, dst_offset);
a78 1
   FLUSH_BATCH(NULL);
a82 1
               unsigned do_flip,
d85 1
a85 1
               struct intel_buffer *src_buffer,
d88 1
a88 1
               struct intel_buffer *dst_buffer,
d99 5
a103 5
   I915_DBG(i915,
      "%s src:buf(%p)/%d+%d %d,%d dst:buf(%p)/%d+%d %d,%d sz:%dx%d\n",
      __FUNCTION__,
      src_buffer, src_pitch, src_offset, src_x, src_y,
      dst_buffer, dst_pitch, dst_offset, dst_x, dst_y, w, h);
d141 1
a141 1
   OUT_RELOC(dst_buffer, INTEL_USAGE_2D_TARGET, dst_offset);
d144 1
a144 2
   OUT_RELOC(src_buffer, INTEL_USAGE_2D_SOURCE, src_offset);
   FLUSH_BATCH(NULL);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d34 1
a38 1
               unsigned rgba_mask,
d40 1
a40 1
               struct i915_winsys_buffer *dst_buffer,
d49 4
a52 2
   I915_DBG(DBG_BLIT, "%s dst:buf(%p)/%d+%d %d,%d sz:%dx%d\n",
            __FUNCTION__, dst_buffer, dst_pitch, dst_offset, x, y, w, h);
d65 2
a66 1
      CMD = (XY_COLOR_BLT_CMD | rgba_mask);
d80 1
a80 1
   OUT_RELOC_FENCED(dst_buffer, I915_USAGE_2D_TARGET, dst_offset);
d82 1
d87 1
d90 1
a90 1
               struct i915_winsys_buffer *src_buffer,
d93 1
a93 1
               struct i915_winsys_buffer *dst_buffer,
d104 5
a108 5
   I915_DBG(DBG_BLIT,
            "%s src:buf(%p)/%d+%d %d,%d dst:buf(%p)/%d+%d %d,%d sz:%dx%d\n",
            __FUNCTION__,
            src_buffer, src_pitch, src_offset, src_x, src_y,
            dst_buffer, dst_pitch, dst_offset, dst_x, dst_y, w, h);
d146 1
a146 1
   OUT_RELOC_FENCED(dst_buffer, I915_USAGE_2D_TARGET, dst_offset);
d149 2
a150 1
   OUT_RELOC_FENCED(src_buffer, I915_USAGE_2D_SOURCE, src_offset);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a51 5
   if(!i915_winsys_validate_buffers(i915->batch, &dst_buffer, 1)) {
      FLUSH_BATCH(NULL, I915_FLUSH_ASYNC);
      assert(i915_winsys_validate_buffers(i915->batch, &dst_buffer, 1));
   }

d69 3
a71 3
   if (!BEGIN_BATCH(6)) {
      FLUSH_BATCH(NULL, I915_FLUSH_ASYNC);
      assert(BEGIN_BATCH(6));
a78 2

   i915_set_flush_dirty(i915, I915_FLUSH_CACHE);
a96 1
   struct i915_winsys_buffer *buffers[2] = {src_buffer, dst_buffer};
a104 5
   if(!i915_winsys_validate_buffers(i915->batch, buffers, 2)) {
      FLUSH_BATCH(NULL, I915_FLUSH_ASYNC);
      assert(i915_winsys_validate_buffers(i915->batch, buffers, 2));
   }

d133 3
a135 3
   if (!BEGIN_BATCH(8)) {
      FLUSH_BATCH(NULL, I915_FLUSH_ASYNC);
      assert(BEGIN_BATCH(8));
a144 2

   i915_set_flush_dirty(i915, I915_FLUSH_CACHE);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


