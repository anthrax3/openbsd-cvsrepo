head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.30;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.12;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.26;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.07;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.51;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Author:
 *    Keith Whitwell <keithw@@vmware.com>
 */


#include "pipe/p_defines.h"
#include "draw/draw_context.h"
#include "i915_context.h"
#include "i915_batch.h"
#include "i915_debug.h"
#include "i915_reg.h"


static void i915_flush_pipe( struct pipe_context *pipe,
                             struct pipe_fence_handle **fence,
                             unsigned flags )
{
   struct i915_context *i915 = i915_context(pipe);
   enum i915_winsys_flush_flags winsys_flags = I915_FLUSH_ASYNC;

   if (!i915->batch)
      return;

   /* Only shortcut this if we have no fence, otherwise we must flush the
    * empty batchbuffer to get our fence back.
    */
   if (!fence && (i915->batch->map == i915->batch->ptr)) {
      return;
   }

   if (flags == PIPE_FLUSH_END_OF_FRAME)
      winsys_flags = I915_FLUSH_END_OF_FRAME;

   FLUSH_BATCH(fence, winsys_flags);

   I915_DBG(DBG_FLUSH, "%s: #####\n", __FUNCTION__);
}

void i915_init_flush_functions( struct i915_context *i915 )
{
   i915->base.flush = i915_flush_pipe;
}

/**
 * Here we handle all the notifications that needs to go out on a flush.
 * XXX might move above function to i915_pipe_flush.c and leave this here.
 */
void i915_flush(struct i915_context *i915,
                struct pipe_fence_handle **fence,
                unsigned flags)
{
   struct i915_winsys_batchbuffer *batch = i915->batch;

   batch->iws->batchbuffer_flush(batch, fence, flags);
   i915->vbo_flushed = 1;
   i915->hardware_dirty = ~0;
   i915->immediate_dirty = ~0;
   i915->dynamic_dirty = ~0;
   i915->static_dirty = ~0;
   /* kernel emits flushes in between batchbuffers */
   i915->flush_dirty = 0;
   i915->fired_vertices += i915->queued_vertices;
   i915->queued_vertices = 0;
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d29 1
a29 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
d48 3
d54 1
a54 1
   if (!fence && i915->batch && (i915->batch->map == i915->batch->ptr)) {
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a35 1
#include "i915_reg.h"
d38 1
d42 2
a43 1
                             struct pipe_fence_handle **fence )
d46 1
d48 4
a51 3
   draw_flush(i915->draw);

   if (i915->batch->map == i915->batch->ptr) {
d55 4
a58 3
   /* If there are no flags, just flush pending commands to hardware:
    */
   FLUSH_BATCH(fence);
d72 3
a74 1
void i915_flush(struct i915_context *i915, struct pipe_fence_handle **fence)
d78 1
a78 1
   batch->iws->batchbuffer_flush(batch, fence);
d86 2
a87 1
   i915->vertices_since_last_flush = 0;
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a41 1
                             unsigned flags,
a47 21
#if 0
   /* Do we need to emit an MI_FLUSH command to flush the hardware
    * caches?
    */
   if (flags & (PIPE_FLUSH_RENDER_CACHE | PIPE_FLUSH_TEXTURE_CACHE)) {
      unsigned flush = MI_FLUSH;
      
      if (!(flags & PIPE_FLUSH_RENDER_CACHE))
	 flush |= INHIBIT_FLUSH_RENDER_CACHE;

      if (flags & PIPE_FLUSH_TEXTURE_CACHE)
	 flush |= FLUSH_MAP_CACHE;

      if (!BEGIN_BATCH(1, 0)) {
	 FLUSH_BATCH(NULL);
	 assert(BEGIN_BATCH(1, 0));
      }
      OUT_BATCH( flush );
   }
#endif

a54 1
   i915->vbo_flushed = 1;
d73 1
d75 6
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d38 1
d41 3
a43 3
static void i915_flush( struct pipe_context *pipe,
                        unsigned flags,
                        struct pipe_fence_handle **fence )
a69 1
#if 0
a72 1
#endif
d78 2
d82 4
d87 7
d95 2
a96 3
void i915_init_flush_functions( struct i915_context *i915 )
{
   i915->base.flush = i915_flush;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a37 1
#include "i915_debug.h"
d40 3
a42 3
static void i915_flush_pipe( struct pipe_context *pipe,
                             unsigned flags,
                             struct pipe_fence_handle **fence )
d69 1
d73 1
d79 2
a81 2
   I915_DBG(DBG_FLUSH, "%s: #####\n", __FUNCTION__);
}
d85 1
a85 13
   i915->base.flush = i915_flush_pipe;
}

/**
 * Here we handle all the notifications that needs to go out on a flush.
 * XXX might move above function to i915_pipe_flush.c and leave this here.
 */
void i915_flush(struct i915_context *i915, struct pipe_fence_handle **fence)
{
   struct i915_winsys_batchbuffer *batch = i915->batch;

   batch->iws->batchbuffer_flush(batch, fence);
   i915->hardware_dirty = ~0;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d36 1
a38 1
#include "i915_reg.h"
d42 2
a43 2
                             struct pipe_fence_handle **fence,
                             unsigned flags )
a45 1
   enum i915_winsys_flush_flags winsys_flags = I915_FLUSH_ASYNC;
d47 5
a51 2
   /* Only shortcut this if we have no fence, otherwise we must flush the
    * empty batchbuffer to get our fence back.
d53 18
a70 1
   if (!fence && i915->batch && (i915->batch->map == i915->batch->ptr)) {
d74 4
a77 4
   if (flags == PIPE_FLUSH_END_OF_FRAME)
      winsys_flags = I915_FLUSH_END_OF_FRAME;

   FLUSH_BATCH(fence, winsys_flags);
d91 1
a91 3
void i915_flush(struct i915_context *i915,
                struct pipe_fence_handle **fence,
                unsigned flags)
d95 1
a95 2
   batch->iws->batchbuffer_flush(batch, fence, flags);
   i915->vbo_flushed = 1;
a96 7
   i915->immediate_dirty = ~0;
   i915->dynamic_dirty = ~0;
   i915->static_dirty = ~0;
   /* kernel emits flushes in between batchbuffers */
   i915->flush_dirty = 0;
   i915->fired_vertices += i915->queued_vertices;
   i915->queued_vertices = 0;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d29 1
a29 1
 *    Keith Whitwell <keithw@@vmware.com>
a47 3
   if (!i915->batch)
      return;

d51 1
a51 1
   if (!fence && (i915->batch->map == i915->batch->ptr)) {
@


