head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.30;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.00.11;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.26;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.26;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.06;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.51;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#ifndef I915_BATCHBUFFER_H
#define I915_BATCHBUFFER_H

#include "i915_winsys.h"
#include "util/u_debug.h"

struct i915_context;

static INLINE size_t
i915_winsys_batchbuffer_space(struct i915_winsys_batchbuffer *batch)
{
   return batch->size - (batch->ptr - batch->map);
}

static INLINE boolean
i915_winsys_batchbuffer_check(struct i915_winsys_batchbuffer *batch,
                              size_t dwords)
{
   return dwords * 4 <= i915_winsys_batchbuffer_space(batch);
}

static INLINE void
i915_winsys_batchbuffer_dword_unchecked(struct i915_winsys_batchbuffer *batch,
                                        unsigned dword)
{
   *(unsigned *)batch->ptr = dword;
   batch->ptr += 4;
}

static INLINE void
i915_winsys_batchbuffer_float(struct i915_winsys_batchbuffer *batch,
                              float f)
{
   union { float f; unsigned int ui; } uif;
   uif.f = f;
   assert (i915_winsys_batchbuffer_space(batch) >= 4);
   i915_winsys_batchbuffer_dword_unchecked(batch, uif.ui);
}

static INLINE void
i915_winsys_batchbuffer_dword(struct i915_winsys_batchbuffer *batch,
                              unsigned dword)
{
   assert (i915_winsys_batchbuffer_space(batch) >= 4);
   i915_winsys_batchbuffer_dword_unchecked(batch, dword);
}

static INLINE void
i915_winsys_batchbuffer_write(struct i915_winsys_batchbuffer *batch,
                              void *data,
                              size_t size)
{
   assert (i915_winsys_batchbuffer_space(batch) >= size);

   memcpy(batch->ptr, data, size);
   batch->ptr += size;
}

static INLINE boolean
i915_winsys_validate_buffers(struct i915_winsys_batchbuffer *batch,
                             struct i915_winsys_buffer **buffers,
                             int num_of_buffers)
{
   return batch->iws->validate_buffers(batch, buffers, num_of_buffers);
}

static INLINE int
i915_winsys_batchbuffer_reloc(struct i915_winsys_batchbuffer *batch,
                              struct i915_winsys_buffer *buffer,
                              enum i915_winsys_buffer_usage usage,
                              size_t offset, boolean fenced)
{
   return batch->iws->batchbuffer_reloc(batch, buffer, usage, offset, fenced);
}

#endif
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d51 1
a51 1
                              unsigned dword)
d77 2
a78 2
			      void *data,
			      size_t size)
d88 2
a89 2
			     struct i915_winsys_buffer **buffers,
			     int num_of_buffers)
@


1.1
log
@Initial revision
@
text
@d44 1
a44 2
                              size_t dwords,
                              size_t relocs)
d46 1
a46 2
   return dwords * 4 <= i915_winsys_batchbuffer_space(batch) &&
          relocs <= (batch->max_relocs - batch->relocs);
d58 10
d82 1
a82 1
   memcpy(data, batch->ptr, size);
d86 8
d98 1
a98 1
                              size_t offset, bool fenced)
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d44 2
a45 1
                              size_t dwords)
d47 2
a48 1
   return dwords * 4 <= i915_winsys_batchbuffer_space(batch);
d53 1
a53 1
                                        unsigned dword)
a59 10
i915_winsys_batchbuffer_float(struct i915_winsys_batchbuffer *batch,
                              float f)
{
   union { float f; unsigned int ui; } uif;
   uif.f = f;
   assert (i915_winsys_batchbuffer_space(batch) >= 4);
   i915_winsys_batchbuffer_dword_unchecked(batch, uif.ui);
}

static INLINE void
d69 2
a70 2
                              void *data,
                              size_t size)
d74 1
a74 1
   memcpy(batch->ptr, data, size);
a77 8
static INLINE boolean
i915_winsys_validate_buffers(struct i915_winsys_batchbuffer *batch,
                             struct i915_winsys_buffer **buffers,
                             int num_of_buffers)
{
   return batch->iws->validate_buffers(batch, buffers, num_of_buffers);
}

d82 1
a82 1
                              size_t offset, boolean fenced)
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


