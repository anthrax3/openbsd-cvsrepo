head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.30;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.13;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.10;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.52;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#include "pipe/p_context.h"
#include "pipe/p_state.h"

#include "i915_state_inlines.h"
#include "i915_context.h"
#include "i915_reg.h"
#include "i915_state.h"
#include "i915_resource.h"


/*
 * A note about min_lod & max_lod.
 *
 * There is a circular dependancy between the sampler state
 * and the map state to be submitted to hw.
 *
 * Two condition must be meet:
 * min_lod =< max_lod == true
 * max_lod =< last_level == true
 *
 *
 * This is all fine and dandy if it were for the fact that max_lod
 * is set on the map state instead of the sampler state. That is
 * the max_lod we submit on map is:
 * max_lod = MIN2(last_level, max_lod);
 *
 * So we need to update the map state when we change samplers and
 * we need to change the sampler state when map state is changed.
 * The first part is done by calling update_texture in update_samplers
 * and the second part is done else where in code tracking the state
 * changes.
 */

static void update_map(struct i915_context *i915,
                       uint unit,
                       const struct i915_texture *tex,
                       const struct i915_sampler_state *sampler,
                       const struct pipe_sampler_view* view,
                       uint state[2]);



/***********************************************************************
 * Samplers
 */

/**
 * Compute i915 texture sampling state.
 *
 * Recalculate all state from scratch.  Perhaps not the most
 * efficient, but this has gotten complex enough that we need
 * something which is understandable and reliable.
 * \param state  returns the 3 words of compute state
 */
static void update_sampler(struct i915_context *i915,
                           uint unit,
                           const struct i915_sampler_state *sampler,
                           const struct i915_texture *tex,
                           unsigned state[3])
{
   const struct pipe_resource *pt = &tex->b.b;
   unsigned minlod, lastlod;

   state[0] = sampler->state[0];
   state[1] = sampler->state[1];
   state[2] = sampler->state[2];

   if (pt->format == PIPE_FORMAT_UYVY ||
       pt->format == PIPE_FORMAT_YUYV)
      state[0] |= SS2_COLORSPACE_CONVERSION;

   if (pt->format == PIPE_FORMAT_B8G8R8A8_SRGB ||
       pt->format == PIPE_FORMAT_L8_SRGB )
      state[0] |= SS2_REVERSE_GAMMA_ENABLE;

    /* 3D textures don't seem to respect the border color.
    * Fallback if there's ever a danger that they might refer to
    * it.  
    * 
    * Effectively this means fallback on 3D clamp or
    * clamp_to_border.
    *
    * XXX: Check if this is true on i945.  
    * XXX: Check if this bug got fixed in release silicon.
    */
#if 0
   {
      const unsigned ws = sampler->templ->wrap_s;
      const unsigned wt = sampler->templ->wrap_t;
      const unsigned wr = sampler->templ->wrap_r;
      if (pt->target == PIPE_TEXTURE_3D &&
          (sampler->templ->min_img_filter != PIPE_TEX_FILTER_NEAREST ||
           sampler->templ->mag_img_filter != PIPE_TEX_FILTER_NEAREST) &&
          (ws == PIPE_TEX_WRAP_CLAMP ||
           wt == PIPE_TEX_WRAP_CLAMP ||
           wr == PIPE_TEX_WRAP_CLAMP ||
           ws == PIPE_TEX_WRAP_CLAMP_TO_BORDER ||
           wt == PIPE_TEX_WRAP_CLAMP_TO_BORDER || 
           wr == PIPE_TEX_WRAP_CLAMP_TO_BORDER)) {
         if (i915->conformance_mode > 0) {
            assert(0);
            /*             sampler->fallback = true; */
            /* TODO */
         }
      }
   }
#endif

   /* See note at the top of file */
   minlod = sampler->minlod;
   lastlod = pt->last_level << 4;

   if (lastlod < minlod) {
      minlod = lastlod;
   }

   state[1] |= (sampler->minlod << SS3_MIN_LOD_SHIFT);
   state[1] |= (unit << SS3_TEXTUREMAP_INDEX_SHIFT);
}

static void update_samplers(struct i915_context *i915)
{
   uint unit;

   i915->current.sampler_enable_nr = 0;
   i915->current.sampler_enable_flags = 0x0;

   for (unit = 0; unit < i915->num_fragment_sampler_views && unit < i915->num_samplers;
        unit++) {
      /* determine unit enable/disable by looking for a bound texture */
      /* could also examine the fragment program? */
      if (i915->fragment_sampler_views[unit]) {
         struct i915_texture *texture = i915_texture(i915->fragment_sampler_views[unit]->texture);

         update_sampler(i915,
                        unit,
                        i915->fragment_sampler[unit], /* sampler state */
                        texture,                      /* texture */
                        i915->current.sampler[unit]); /* the result */
         update_map(i915,
                    unit,
                    texture,                             /* texture */
                    i915->fragment_sampler[unit],        /* sampler state */
                    i915->fragment_sampler_views[unit],  /* sampler view */
                    i915->current.texbuffer[unit]);      /* the result */

         i915->current.sampler_enable_nr++;
         i915->current.sampler_enable_flags |= (1 << unit);
      }
   }

   i915->hardware_dirty |= I915_HW_SAMPLER | I915_HW_MAP;
}

struct i915_tracked_state i915_hw_samplers = {
   "samplers",
   update_samplers,
   I915_NEW_SAMPLER | I915_NEW_SAMPLER_VIEW
};


/***********************************************************************
 * Sampler views
 */

static uint translate_texture_format(enum pipe_format pipeFormat,
                                     const struct pipe_sampler_view* view)
{
   if ( (view->swizzle_r != PIPE_SWIZZLE_RED ||
         view->swizzle_g != PIPE_SWIZZLE_GREEN ||
         view->swizzle_b != PIPE_SWIZZLE_BLUE ||
         view->swizzle_a != PIPE_SWIZZLE_ALPHA ) &&
         pipeFormat != PIPE_FORMAT_Z24_UNORM_S8_UINT &&
         pipeFormat != PIPE_FORMAT_Z24X8_UNORM )
      debug_printf("i915: unsupported texture swizzle for format %d\n", pipeFormat);

   switch (pipeFormat) {
   case PIPE_FORMAT_L8_UNORM:
      return MAPSURF_8BIT | MT_8BIT_L8;
   case PIPE_FORMAT_I8_UNORM:
      return MAPSURF_8BIT | MT_8BIT_I8;
   case PIPE_FORMAT_A8_UNORM:
      return MAPSURF_8BIT | MT_8BIT_A8;
   case PIPE_FORMAT_L8A8_UNORM:
      return MAPSURF_16BIT | MT_16BIT_AY88;
   case PIPE_FORMAT_B5G6R5_UNORM:
      return MAPSURF_16BIT | MT_16BIT_RGB565;
   case PIPE_FORMAT_B5G5R5A1_UNORM:
      return MAPSURF_16BIT | MT_16BIT_ARGB1555;
   case PIPE_FORMAT_B4G4R4A4_UNORM:
      return MAPSURF_16BIT | MT_16BIT_ARGB4444;
   case PIPE_FORMAT_B10G10R10A2_UNORM:
      return MAPSURF_32BIT | MT_32BIT_ARGB2101010;
   case PIPE_FORMAT_B8G8R8A8_UNORM:
   case PIPE_FORMAT_B8G8R8A8_SRGB:
      return MAPSURF_32BIT | MT_32BIT_ARGB8888;
   case PIPE_FORMAT_B8G8R8X8_UNORM:
      return MAPSURF_32BIT | MT_32BIT_XRGB8888;
   case PIPE_FORMAT_R8G8B8A8_UNORM:
      return MAPSURF_32BIT | MT_32BIT_ABGR8888;
   case PIPE_FORMAT_R8G8B8X8_UNORM:
      return MAPSURF_32BIT | MT_32BIT_XBGR8888;
   case PIPE_FORMAT_YUYV:
      return (MAPSURF_422 | MT_422_YCRCB_NORMAL);
   case PIPE_FORMAT_UYVY:
      return (MAPSURF_422 | MT_422_YCRCB_SWAPY);
#if 0
   case PIPE_FORMAT_RGB_FXT1:
   case PIPE_FORMAT_RGBA_FXT1:
      return (MAPSURF_COMPRESSED | MT_COMPRESS_FXT1);
#endif
   case PIPE_FORMAT_Z16_UNORM:
      return (MAPSURF_16BIT | MT_16BIT_L16);
   case PIPE_FORMAT_DXT1_RGBA:
   case PIPE_FORMAT_DXT1_RGB:
      return (MAPSURF_COMPRESSED | MT_COMPRESS_DXT1);
   case PIPE_FORMAT_DXT3_RGBA:
      return (MAPSURF_COMPRESSED | MT_COMPRESS_DXT2_3);
   case PIPE_FORMAT_DXT5_RGBA:
      return (MAPSURF_COMPRESSED | MT_COMPRESS_DXT4_5);
   case PIPE_FORMAT_Z24_UNORM_S8_UINT:
   case PIPE_FORMAT_Z24X8_UNORM:
      {
         if ( view->swizzle_r == PIPE_SWIZZLE_RED &&
              view->swizzle_g == PIPE_SWIZZLE_RED &&
              view->swizzle_b == PIPE_SWIZZLE_RED &&
              view->swizzle_a == PIPE_SWIZZLE_ONE)
            return (MAPSURF_32BIT | MT_32BIT_xA824);
         if ( view->swizzle_r == PIPE_SWIZZLE_RED &&
              view->swizzle_g == PIPE_SWIZZLE_RED &&
              view->swizzle_b == PIPE_SWIZZLE_RED &&
              view->swizzle_a == PIPE_SWIZZLE_RED)
            return (MAPSURF_32BIT | MT_32BIT_xI824);
         if ( view->swizzle_r == PIPE_SWIZZLE_ZERO &&
              view->swizzle_g == PIPE_SWIZZLE_ZERO &&
              view->swizzle_b == PIPE_SWIZZLE_ZERO &&
              view->swizzle_a == PIPE_SWIZZLE_RED)
            return (MAPSURF_32BIT | MT_32BIT_xL824);
         debug_printf("i915: unsupported depth swizzle %d %d %d %d\n",
                      view->swizzle_r,
                      view->swizzle_g,
                      view->swizzle_b,
                      view->swizzle_a);
         return (MAPSURF_32BIT | MT_32BIT_xL824);
      }
   default:
      debug_printf("i915: translate_texture_format() bad image format %x\n",
                   pipeFormat);
      assert(0);
      return 0;
   }
}

static inline uint32_t
ms3_tiling_bits(enum i915_winsys_buffer_tile tiling)
{
         uint32_t tiling_bits = 0;

         switch (tiling) {
         case I915_TILE_Y:
            tiling_bits |= MS3_TILE_WALK_Y;
         case I915_TILE_X:
            tiling_bits |= MS3_TILED_SURFACE;
         case I915_TILE_NONE:
            break;
         }

         return tiling_bits;
}

static void update_map(struct i915_context *i915,
                       uint unit,
                       const struct i915_texture *tex,
                       const struct i915_sampler_state *sampler,
                       const struct pipe_sampler_view* view,
                       uint state[2])
{
   const struct pipe_resource *pt = &tex->b.b;
   uint format, pitch;
   const uint width = pt->width0, height = pt->height0, depth = pt->depth0;
   const uint num_levels = pt->last_level;
   unsigned max_lod = num_levels * 4;

   assert(tex);
   assert(width);
   assert(height);
   assert(depth);

   format = translate_texture_format(pt->format, view);
   pitch = tex->stride;

   assert(format);
   assert(pitch);

   /* MS3 state */
   state[0] =
      (((height - 1) << MS3_HEIGHT_SHIFT)
       | ((width - 1) << MS3_WIDTH_SHIFT)
       | format
       | ms3_tiling_bits(tex->tiling));

   /*
    * XXX When min_filter != mag_filter and there's just one mipmap level,
    * set max_lod = 1 to make sure i915 chooses between min/mag filtering.
    */

   /* See note at the top of file */
   if (max_lod > (sampler->maxlod >> 2))
      max_lod = sampler->maxlod >> 2;

   /* MS4 state */
   state[1] =
      ((((pitch / 4) - 1) << MS4_PITCH_SHIFT)
       | MS4_CUBE_FACE_ENA_MASK
       | ((max_lod) << MS4_MAX_LOD_SHIFT)
       | ((depth - 1) << MS4_VOLUME_DEPTH_SHIFT));
}

static void update_maps(struct i915_context *i915)
{
   uint unit;

   for (unit = 0; unit < i915->num_fragment_sampler_views && unit < i915->num_samplers;
        unit++) {
      /* determine unit enable/disable by looking for a bound texture */
      /* could also examine the fragment program? */
      if (i915->fragment_sampler_views[unit]) {
         struct i915_texture *texture = i915_texture(i915->fragment_sampler_views[unit]->texture);

         update_map(i915,
                    unit,
                    texture,                            /* texture */
                    i915->fragment_sampler[unit],       /* sampler state */
                    i915->fragment_sampler_views[unit], /* sampler view */
                    i915->current.texbuffer[unit]);
      }
   }

   i915->hardware_dirty |= I915_HW_MAP;
}

struct i915_tracked_state i915_hw_sampler_views = {
   "sampler_views",
   update_maps,
   I915_NEW_SAMPLER_VIEW
};
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d164 1
a164 1
                        i915->sampler[unit],          /* sampler state */
d170 1
a170 1
                    i915->sampler[unit],                 /* sampler state */
d360 1
a360 1
                    i915->sampler[unit],                /* sampler state */
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d49 1
a49 1
 * This is all fine and dandy if it where for the fact that max_lod
d55 1
a55 1
 * we need to be change the sampler state when map state is changed.
d65 1
d99 5
a103 1
   /* 3D textures don't seem to respect the border color.
d169 4
a172 3
                    texture,                        /* texture */
                    i915->sampler[unit],            /* sampler state */
                    i915->current.texbuffer[unit]); /* the result */
a188 1

d193 2
a194 1
static uint translate_texture_format(enum pipe_format pipeFormat)
d196 8
d219 2
d222 1
d248 1
a248 1
   case PIPE_FORMAT_Z24_UNORM_S8_USCALED:
d250 23
a272 1
      return (MAPSURF_32BIT | MT_32BIT_xI824);
d302 1
d316 1
a316 1
   format = translate_texture_format(pt->format);
d359 3
a361 2
                    texture,                      /* texture */
                    i915->sampler[unit],          /* sampler state */
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a210 1
#if 0
a212 1
#endif
d224 2
a225 3
#if 0
   case PIPE_FORMAT_RGBA_DXT1:
   case PIPE_FORMAT_RGB_DXT1:
d227 1
a227 1
   case PIPE_FORMAT_RGBA_DXT3:
d229 1
a229 1
   case PIPE_FORMAT_RGBA_DXT5:
a230 1
#endif
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d35 1
d56 15
a70 3
 * The first part is done by calling i915_update_texture in
 * i915_update_samplers and the second part is done else where in
 * code tracking the state changes.
a72 6
static void
i915_update_texture(struct i915_context *i915,
                    uint unit,
                    const struct i915_texture *tex,
                    const struct i915_sampler_state *sampler,
                    uint state[6]);
d83 3
a85 3
			   const struct i915_sampler_state *sampler,
			   const struct i915_texture *tex,
			   unsigned state[3] )
d87 1
a87 1
   const struct pipe_texture *pt = &tex->base;
a89 3
   /* Need to do this after updating the maps, which call the
    * intel_finalize_mipmap_tree and hence can update firstLevel:
    */
d124 1
a124 1
            /* 	    sampler->fallback = true; */
d143 1
a143 2

void i915_update_samplers( struct i915_context *i915 )
d150 1
a150 1
   for (unit = 0; unit < i915->num_textures && unit < i915->num_samplers;
d154 13
a166 12
      if (i915->texture[unit]) {
	 update_sampler( i915,
	                 unit,
	                 i915->sampler[unit],       /* sampler state */
	                 i915->texture[unit],        /* texture */
	                 i915->current.sampler[unit] /* the result */
	                 );
	 i915_update_texture( i915,
	                      unit,
	                      i915->texture[unit],          /* texture */
	                      i915->sampler[unit],          /* sampler state */
	                      i915->current.texbuffer[unit] );
d168 2
a169 2
	 i915->current.sampler_enable_nr++;
	 i915->current.sampler_enable_flags |= (1 << unit);
d176 11
d188 1
a188 2
static uint
translate_texture_format(enum pipe_format pipeFormat)
d207 8
d235 2
a236 1
   case PIPE_FORMAT_Z24S8_UNORM:
d240 1
a240 1
              pipeFormat);
d246 16
d263 5
a267 6
static void
i915_update_texture(struct i915_context *i915,
                    uint unit,
                    const struct i915_texture *tex,
                    const struct i915_sampler_state *sampler,
                    uint state[6])
d269 1
a269 1
   const struct pipe_texture *pt = &tex->base;
a273 1
   unsigned tiled = MS3_USE_FENCE_REGS;
a285 5
   if (tex->sw_tiled) {
      assert(!((pitch - 1) & pitch));
      tiled = MS3_TILED_SURFACE;
   }

d291 1
a291 1
       | tiled);
d310 1
a310 3

void
i915_update_textures(struct i915_context *i915)
d314 1
a314 1
   for (unit = 0; unit < i915->num_textures && unit < i915->num_samplers;
d318 8
a325 6
      if (i915->texture[unit]) {
	 i915_update_texture( i915,
	                      unit,
	                      i915->texture[unit],          /* texture */
	                      i915->sampler[unit],          /* sampler state */
	                      i915->current.texbuffer[unit] );
d331 6
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a34 1
#include "i915_resource.h"
d55 3
a57 15
 * The first part is done by calling update_texture in update_samplers
 * and the second part is done else where in code tracking the state
 * changes.
 */

static void update_map(struct i915_context *i915,
                       uint unit,
                       const struct i915_texture *tex,
                       const struct i915_sampler_state *sampler,
                       uint state[2]);



/***********************************************************************
 * Samplers
d60 6
d76 3
a78 3
                           const struct i915_sampler_state *sampler,
                           const struct i915_texture *tex,
                           unsigned state[3])
d80 1
a80 1
   const struct pipe_resource *pt = &tex->b.b;
d83 3
d120 1
a120 1
            /*             sampler->fallback = true; */
d139 2
a140 1
static void update_samplers(struct i915_context *i915)
d147 1
a147 1
   for (unit = 0; unit < i915->num_fragment_sampler_views && unit < i915->num_samplers;
d151 12
a162 13
      if (i915->fragment_sampler_views[unit]) {
         struct i915_texture *texture = i915_texture(i915->fragment_sampler_views[unit]->texture);

         update_sampler(i915,
                        unit,
                        i915->sampler[unit],          /* sampler state */
                        texture,                      /* texture */
                        i915->current.sampler[unit]); /* the result */
         update_map(i915,
                    unit,
                    texture,                        /* texture */
                    i915->sampler[unit],            /* sampler state */
                    i915->current.texbuffer[unit]); /* the result */
d164 2
a165 2
         i915->current.sampler_enable_nr++;
         i915->current.sampler_enable_flags |= (1 << unit);
a171 11
struct i915_tracked_state i915_hw_samplers = {
   "samplers",
   update_samplers,
   I915_NEW_SAMPLER | I915_NEW_SAMPLER_VIEW
};



/***********************************************************************
 * Sampler views
 */
d173 2
a174 1
static uint translate_texture_format(enum pipe_format pipeFormat)
a192 8
   case PIPE_FORMAT_B8G8R8X8_UNORM:
      return MAPSURF_32BIT | MT_32BIT_XRGB8888;
   case PIPE_FORMAT_R8G8B8A8_UNORM:
      return MAPSURF_32BIT | MT_32BIT_ABGR8888;
#if 0
   case PIPE_FORMAT_R8G8B8X8_UNORM:
      return MAPSURF_32BIT | MT_32BIT_XBGR8888;
#endif
d213 1
a213 2
   case PIPE_FORMAT_Z24_UNORM_S8_USCALED:
   case PIPE_FORMAT_Z24X8_UNORM:
d217 1
a217 1
                   pipeFormat);
a222 16
static inline uint32_t
ms3_tiling_bits(enum i915_winsys_buffer_tile tiling)
{
         uint32_t tiling_bits = 0;

         switch (tiling) {
         case I915_TILE_Y:
            tiling_bits |= MS3_TILE_WALK_Y;
         case I915_TILE_X:
            tiling_bits |= MS3_TILED_SURFACE;
         case I915_TILE_NONE:
            break;
         }

         return tiling_bits;
}
d224 6
a229 5
static void update_map(struct i915_context *i915,
                       uint unit,
                       const struct i915_texture *tex,
                       const struct i915_sampler_state *sampler,
                       uint state[2])
d231 1
a231 1
   const struct pipe_resource *pt = &tex->b.b;
d236 1
d249 5
d259 1
a259 1
       | ms3_tiling_bits(tex->tiling));
d278 3
a280 1
static void update_maps(struct i915_context *i915)
d284 1
a284 1
   for (unit = 0; unit < i915->num_fragment_sampler_views && unit < i915->num_samplers;
d288 6
a293 8
      if (i915->fragment_sampler_views[unit]) {
         struct i915_texture *texture = i915_texture(i915->fragment_sampler_views[unit]->texture);

         update_map(i915,
                    unit,
                    texture,                      /* texture */
                    i915->sampler[unit],          /* sampler state */
                    i915->current.texbuffer[unit]);
a298 6

struct i915_tracked_state i915_hw_sampler_views = {
   "sampler_views",
   update_maps,
   I915_NEW_SAMPLER_VIEW
};
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d49 1
a49 1
 * This is all fine and dandy if it were for the fact that max_lod
d55 1
a55 1
 * we need to change the sampler state when map state is changed.
a64 1
                       const struct pipe_sampler_view* view,
d98 1
a98 5
   if (pt->format == PIPE_FORMAT_B8G8R8A8_SRGB ||
       pt->format == PIPE_FORMAT_L8_SRGB )
      state[0] |= SS2_REVERSE_GAMMA_ENABLE;

    /* 3D textures don't seem to respect the border color.
d164 3
a166 4
                    texture,                             /* texture */
                    i915->sampler[unit],                 /* sampler state */
                    i915->fragment_sampler_views[unit],  /* sampler view */
                    i915->current.texbuffer[unit]);      /* the result */
d183 1
d188 1
a188 2
static uint translate_texture_format(enum pipe_format pipeFormat,
                                     const struct pipe_sampler_view* view)
a189 8
   if ( (view->swizzle_r != PIPE_SWIZZLE_RED ||
         view->swizzle_g != PIPE_SWIZZLE_GREEN ||
         view->swizzle_b != PIPE_SWIZZLE_BLUE ||
         view->swizzle_a != PIPE_SWIZZLE_ALPHA ) &&
         pipeFormat != PIPE_FORMAT_Z24_UNORM_S8_UINT &&
         pipeFormat != PIPE_FORMAT_Z24X8_UNORM )
      debug_printf("i915: unsupported texture swizzle for format %d\n", pipeFormat);

a204 2
   case PIPE_FORMAT_B10G10R10A2_UNORM:
      return MAPSURF_32BIT | MT_32BIT_ARGB2101010;
a205 1
   case PIPE_FORMAT_B8G8R8A8_SRGB:
d211 1
d214 1
d226 3
a228 2
   case PIPE_FORMAT_DXT1_RGBA:
   case PIPE_FORMAT_DXT1_RGB:
d230 1
a230 1
   case PIPE_FORMAT_DXT3_RGBA:
d232 1
a232 1
   case PIPE_FORMAT_DXT5_RGBA:
d234 2
a235 1
   case PIPE_FORMAT_Z24_UNORM_S8_UINT:
d237 1
a237 23
      {
         if ( view->swizzle_r == PIPE_SWIZZLE_RED &&
              view->swizzle_g == PIPE_SWIZZLE_RED &&
              view->swizzle_b == PIPE_SWIZZLE_RED &&
              view->swizzle_a == PIPE_SWIZZLE_ONE)
            return (MAPSURF_32BIT | MT_32BIT_xA824);
         if ( view->swizzle_r == PIPE_SWIZZLE_RED &&
              view->swizzle_g == PIPE_SWIZZLE_RED &&
              view->swizzle_b == PIPE_SWIZZLE_RED &&
              view->swizzle_a == PIPE_SWIZZLE_RED)
            return (MAPSURF_32BIT | MT_32BIT_xI824);
         if ( view->swizzle_r == PIPE_SWIZZLE_ZERO &&
              view->swizzle_g == PIPE_SWIZZLE_ZERO &&
              view->swizzle_b == PIPE_SWIZZLE_ZERO &&
              view->swizzle_a == PIPE_SWIZZLE_RED)
            return (MAPSURF_32BIT | MT_32BIT_xL824);
         debug_printf("i915: unsupported depth swizzle %d %d %d %d\n",
                      view->swizzle_r,
                      view->swizzle_g,
                      view->swizzle_b,
                      view->swizzle_a);
         return (MAPSURF_32BIT | MT_32BIT_xL824);
      }
a266 1
                       const struct pipe_sampler_view* view,
d280 1
a280 1
   format = translate_texture_format(pt->format, view);
d323 2
a324 3
                    texture,                            /* texture */
                    i915->sampler[unit],                /* sampler state */
                    i915->fragment_sampler_views[unit], /* sampler view */
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d164 1
a164 1
                        i915->fragment_sampler[unit], /* sampler state */
d170 1
a170 1
                    i915->fragment_sampler[unit],        /* sampler state */
d360 1
a360 1
                    i915->fragment_sampler[unit],       /* sampler state */
@


