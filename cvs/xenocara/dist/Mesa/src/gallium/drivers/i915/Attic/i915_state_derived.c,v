head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.30;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.13;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.10;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.52;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/


#include "util/u_memory.h"
#include "pipe/p_shader_tokens.h"
#include "draw/draw_context.h"
#include "draw/draw_vertex.h"
#include "i915_context.h"
#include "i915_state.h"
#include "i915_debug.h"
#include "i915_fpc.h"
#include "i915_reg.h"

static uint find_mapping(const struct i915_fragment_shader* fs, int unit)
{
   int i;
   for (i = 0; i < I915_TEX_UNITS ; i++)
   {
      if (fs->generic_mapping[i] == unit)
         return i;
   }
   debug_printf("Mapping not found\n");
   return 0;
}



/***********************************************************************
 * Determine the hardware vertex layout.
 * Depends on vertex/fragment shader state.
 */
static void calculate_vertex_layout(struct i915_context *i915)
{
   const struct i915_fragment_shader *fs = i915->fs;
   const enum interp_mode colorInterp = i915->rasterizer->color_interp;
   struct vertex_info vinfo;
   boolean texCoords[I915_TEX_UNITS], colors[2], fog, needW, face;
   uint i;
   int src;

   memset(texCoords, 0, sizeof(texCoords));
   colors[0] = colors[1] = fog = needW = face = FALSE;
   memset(&vinfo, 0, sizeof(vinfo));

   /* Determine which fragment program inputs are needed.  Setup HW vertex
    * layout below, in the HW-specific attribute order.
    */
   for (i = 0; i < fs->info.num_inputs; i++) {
      switch (fs->info.input_semantic_name[i]) {
      case TGSI_SEMANTIC_POSITION:
         {
            uint unit = I915_SEMANTIC_POS;
            texCoords[find_mapping(fs, unit)] = TRUE;
         }
         break;
      case TGSI_SEMANTIC_COLOR:
         assert(fs->info.input_semantic_index[i] < 2);
         colors[fs->info.input_semantic_index[i]] = TRUE;
         break;
      case TGSI_SEMANTIC_GENERIC:
         {
            /* texcoords/varyings/other generic */
            uint unit = fs->info.input_semantic_index[i];

            texCoords[find_mapping(fs, unit)] = TRUE;
            needW = TRUE;
         }
         break;
      case TGSI_SEMANTIC_FOG:
         fog = TRUE;
         break;
      case TGSI_SEMANTIC_FACE:
         face = TRUE;
         break;
      default:
         debug_printf("Unknown input type %d\n", fs->info.input_semantic_name[i]);
         assert(0);
      }
   }


   /* pos */
   src = draw_find_shader_output(i915->draw, TGSI_SEMANTIC_POSITION, 0);
   if (needW) {
      draw_emit_vertex_attr(&vinfo, EMIT_4F, INTERP_LINEAR, src);
      vinfo.hwfmt[0] |= S4_VFMT_XYZW;
      vinfo.attrib[0].emit = EMIT_4F;
   }
   else {
      draw_emit_vertex_attr(&vinfo, EMIT_3F, INTERP_LINEAR, src);
      vinfo.hwfmt[0] |= S4_VFMT_XYZ;
      vinfo.attrib[0].emit = EMIT_3F;
   }

   /* hardware point size */
   /* XXX todo */

   /* primary color */
   if (colors[0]) {
      src = draw_find_shader_output(i915->draw, TGSI_SEMANTIC_COLOR, 0);
      draw_emit_vertex_attr(&vinfo, EMIT_4UB_BGRA, colorInterp, src);
      vinfo.hwfmt[0] |= S4_VFMT_COLOR;
   }

   /* secondary color */
   if (colors[1]) {
      src = draw_find_shader_output(i915->draw, TGSI_SEMANTIC_COLOR, 1);
      draw_emit_vertex_attr(&vinfo, EMIT_4UB_BGRA, colorInterp, src);
      vinfo.hwfmt[0] |= S4_VFMT_SPEC_FOG;
   }

   /* fog coord, not fog blend factor */
   if (fog) {
      src = draw_find_shader_output(i915->draw, TGSI_SEMANTIC_FOG, 0);
      draw_emit_vertex_attr(&vinfo, EMIT_1F, INTERP_PERSPECTIVE, src);
      vinfo.hwfmt[0] |= S4_VFMT_FOG_PARAM;
   }

   /* texcoords/varyings */
   for (i = 0; i < I915_TEX_UNITS; i++) {
      uint hwtc;
      if (texCoords[i]) {
         hwtc = TEXCOORDFMT_4D;
         src = draw_find_shader_output(i915->draw, TGSI_SEMANTIC_GENERIC, fs->generic_mapping[i]);
         draw_emit_vertex_attr(&vinfo, EMIT_4F, INTERP_PERSPECTIVE, src);
      }
      else {
         hwtc = TEXCOORDFMT_NOT_PRESENT;
      }
      vinfo.hwfmt[1] |= hwtc << (i * 4);
   }

   /* front/back face */
   if (face) {
      uint slot = find_mapping(fs, I915_SEMANTIC_FACE);
      debug_printf("Front/back face is broken\n");
      /* XXX Because of limitations in the draw module, currently src will be 0
       * for SEMANTIC_FACE, so this aliases to POS. We need to fix in the draw
       * module by adding an extra shader output.
       */
      src = draw_find_shader_output(i915->draw, TGSI_SEMANTIC_FACE, 0);
      draw_emit_vertex_attr(&vinfo, EMIT_1F, INTERP_CONSTANT, src);
      vinfo.hwfmt[1] &= ~(TEXCOORDFMT_NOT_PRESENT << (slot * 4));
      vinfo.hwfmt[1] |= TEXCOORDFMT_1D << (slot * 4);
   }

   draw_compute_vertex_size(&vinfo);

   if (memcmp(&i915->current.vertex_info, &vinfo, sizeof(vinfo))) {
      /* Need to set this flag so that the LIS2/4 registers get set.
       * It also means the i915_update_immediate() function must be called
       * after this one, in i915_update_derived().
       */
      i915->dirty |= I915_NEW_VERTEX_FORMAT;

      memcpy(&i915->current.vertex_info, &vinfo, sizeof(vinfo));
   }
}

struct i915_tracked_state i915_update_vertex_layout = {
   "vertex_layout",
   calculate_vertex_layout,
   I915_NEW_RASTERIZER | I915_NEW_FS | I915_NEW_VS
};



/***********************************************************************
 */
static struct i915_tracked_state *atoms[] = {
   &i915_update_vertex_layout,
   &i915_hw_samplers,
   &i915_hw_sampler_views,
   &i915_hw_immediate,
   &i915_hw_dynamic,
   &i915_hw_fs,
   &i915_hw_framebuffer,
   &i915_hw_dst_buf_vars,
   &i915_hw_constants,
   NULL,
};

void i915_update_derived(struct i915_context *i915)
{
   int i;

   if (I915_DBG_ON(DBG_ATOMS))
      i915_dump_dirty(i915, __FUNCTION__);

   for (i = 0; atoms[i]; i++)
      if (atoms[i]->dirty & i915->dirty)
         atoms[i]->update(i915);

   i915->dirty = 0;
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d36 1
d62 1
a62 1
   boolean texCoords[I915_TEX_UNITS], colors[2], fog, needW;
d67 1
a67 1
   colors[0] = colors[1] = fog = needW = FALSE;
d76 4
a87 1
            /* XXX handle back/front face and point size */
d97 3
d101 1
d156 14
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d38 12
d61 1
a61 1
   boolean texCoords[8], colors[2], fog, needW;
a80 1
         /* usually a texcoord */
d82 5
a86 3
            const uint unit = fs->info.input_semantic_index[i];
            assert(unit < 8);
            texCoords[unit] = TRUE;
d98 1
a98 1
   
d136 2
a137 2
   /* texcoords */
   for (i = 0; i < 8; i++) {
d141 1
a141 1
         src = draw_find_shader_output(i915->draw, TGSI_SEMANTIC_GENERIC, i);
d181 1
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d35 1
d40 1
a40 1
/**
d44 1
a44 1
static void calculate_vertex_layout( struct i915_context *i915 )
d105 1
a105 1
      draw_emit_vertex_attr(&vinfo, EMIT_4UB, colorInterp, src);
d112 1
a112 1
      draw_emit_vertex_attr(&vinfo, EMIT_4UB, colorInterp, src);
d150 5
d158 1
a158 2
/* Hopefully this will remain quite simple, otherwise need to pull in
 * something like the state tracker mechanism.
d160 13
a172 1
void i915_update_derived( struct i915_context *i915 )
d174 1
a174 11
   if (i915->dirty & (I915_NEW_RASTERIZER | I915_NEW_FS | I915_NEW_VS))
      calculate_vertex_layout( i915 );

   if (i915->dirty & (I915_NEW_SAMPLER | I915_NEW_TEXTURE))
      i915_update_samplers(i915);

   if (i915->dirty & I915_NEW_TEXTURE)
      i915_update_textures(i915);

   if (i915->dirty)
      i915_update_immediate( i915 );
d176 2
a177 2
   if (i915->dirty)
      i915_update_dynamic( i915 );
d179 3
a181 8
   if (i915->dirty & I915_NEW_FS) {
      i915->hardware_dirty |= I915_HW_PROGRAM; /* XXX right? */
   }

   /* HW emit currently references framebuffer state directly:
    */
   if (i915->dirty & I915_NEW_FRAMEBUFFER)
      i915->hardware_dirty |= I915_HW_STATIC;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a34 1
#include "i915_debug.h"
d39 1
a39 1
/***********************************************************************
d43 1
a43 1
static void calculate_vertex_layout(struct i915_context *i915)
d104 1
a104 1
      draw_emit_vertex_attr(&vinfo, EMIT_4UB_BGRA, colorInterp, src);
d111 1
a111 1
      draw_emit_vertex_attr(&vinfo, EMIT_4UB_BGRA, colorInterp, src);
a148 5
struct i915_tracked_state i915_update_vertex_layout = {
   "vertex_layout",
   calculate_vertex_layout,
   I915_NEW_RASTERIZER | I915_NEW_FS | I915_NEW_VS
};
d152 2
a153 1
/***********************************************************************
d155 13
a167 11
static struct i915_tracked_state *atoms[] = {
   &i915_update_vertex_layout,
   &i915_hw_samplers,
   &i915_hw_sampler_views,
   &i915_hw_immediate,
   &i915_hw_dynamic,
   &i915_hw_fs,
   &i915_hw_framebuffer,
   &i915_hw_constants,
   NULL,
};
d169 2
a170 3
void i915_update_derived(struct i915_context *i915)
{
   int i;
d172 3
a174 2
   if (I915_DBG_ON(DBG_ATOMS))
      i915_dump_dirty(i915, __FUNCTION__);
d176 4
a179 3
   for (i = 0; atoms[i]; i++)
      if (atoms[i]->dirty & i915->dirty)
         atoms[i]->update(i915);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a35 1
#include "i915_fpc.h"
a37 12
static uint find_mapping(const struct i915_fragment_shader* fs, int unit)
{
   int i;
   for (i = 0; i < I915_TEX_UNITS ; i++)
   {
      if (fs->generic_mapping[i] == unit)
         return i;
   }
   debug_printf("Mapping not found\n");
   return 0;
}

d49 1
a49 1
   boolean texCoords[I915_TEX_UNITS], colors[2], fog, needW, face;
d54 1
a54 1
   colors[0] = colors[1] = fog = needW = face = FALSE;
a62 4
         {
            uint unit = I915_SEMANTIC_POS;
            texCoords[find_mapping(fs, unit)] = TRUE;
         }
d69 1
d71 3
a73 4
            /* texcoords/varyings/other generic */
            uint unit = fs->info.input_semantic_index[i];

            texCoords[find_mapping(fs, unit)] = TRUE;
a79 3
      case TGSI_SEMANTIC_FACE:
         face = TRUE;
         break;
a80 1
         debug_printf("Unknown input type %d\n", fs->info.input_semantic_name[i]);
d85 1
a85 1

d123 2
a124 2
   /* texcoords/varyings */
   for (i = 0; i < I915_TEX_UNITS; i++) {
d128 1
a128 1
         src = draw_find_shader_output(i915->draw, TGSI_SEMANTIC_GENERIC, fs->generic_mapping[i]);
a136 14
   /* front/back face */
   if (face) {
      uint slot = find_mapping(fs, I915_SEMANTIC_FACE);
      debug_printf("Front/back face is broken\n");
      /* XXX Because of limitations in the draw module, currently src will be 0
       * for SEMANTIC_FACE, so this aliases to POS. We need to fix in the draw
       * module by adding an extra shader output.
       */
      src = draw_find_shader_output(i915->draw, TGSI_SEMANTIC_FACE, 0);
      draw_emit_vertex_attr(&vinfo, EMIT_1F, INTERP_CONSTANT, src);
      vinfo.hwfmt[1] &= ~(TEXCOORDFMT_NOT_PRESENT << (slot * 4));
      vinfo.hwfmt[1] |= TEXCOORDFMT_1D << (slot * 4);
   }

a167 1
   &i915_hw_dst_buf_vars,
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


