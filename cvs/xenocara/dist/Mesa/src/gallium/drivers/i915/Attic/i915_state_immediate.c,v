head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.30;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.13;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.10;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.52;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */

#include "i915_state_inlines.h"
#include "i915_context.h"
#include "i915_state.h"
#include "i915_reg.h"
#include "util/u_memory.h"


/* Convinience function to check immediate state.
 */

static INLINE void set_immediate(struct i915_context *i915,
                                 unsigned offset,
                                 const unsigned state)
{
   if (i915->current.immediate[offset] == state)
      return;

   i915->current.immediate[offset] = state;
   i915->immediate_dirty |= 1 << offset;
   i915->hardware_dirty |= I915_HW_IMMEDIATE;
}



/***********************************************************************
 * S0,S1: Vertex buffer state.
 */
static void upload_S0S1(struct i915_context *i915)
{
   unsigned LIS0, LIS1;

   /* I915_NEW_VBO
    */
   LIS0 = i915->vbo_offset;

   /* Need to force this */
   if (i915->dirty & I915_NEW_VBO) {
      i915->immediate_dirty |= 1 << I915_IMMEDIATE_S0;
      i915->hardware_dirty |= I915_HW_IMMEDIATE;
   }

   /* I915_NEW_VERTEX_SIZE
    */
   {
      unsigned vertex_size = i915->current.vertex_info.size;

      LIS1 = ((vertex_size << 24) |
              (vertex_size << 16));
   }

   set_immediate(i915, I915_IMMEDIATE_S0, LIS0);
   set_immediate(i915, I915_IMMEDIATE_S1, LIS1);
}

const struct i915_tracked_state i915_upload_S0S1 = {
   "imm S0 S1",
   upload_S0S1,
   I915_NEW_VBO | I915_NEW_VERTEX_FORMAT
};



/***********************************************************************
 * S4: Vertex format, rasterization state
 */
static void upload_S2S4(struct i915_context *i915)
{
   unsigned LIS2, LIS4;

   /* I915_NEW_VERTEX_FORMAT
    */
   {
      LIS2 = i915->current.vertex_info.hwfmt[1];
      LIS4 = i915->current.vertex_info.hwfmt[0];
      assert(LIS4); /* should never be zero? */
   }

   LIS4 |= i915->rasterizer->LIS4;

   set_immediate(i915, I915_IMMEDIATE_S2, LIS2);
   set_immediate(i915, I915_IMMEDIATE_S4, LIS4);
}

const struct i915_tracked_state i915_upload_S2S4 = {
   "imm S2 S4",
   upload_S2S4,
   I915_NEW_RASTERIZER | I915_NEW_VERTEX_FORMAT
};



/***********************************************************************
 */
static void upload_S5(struct i915_context *i915)
{
   unsigned LIS5 = 0;

   /* I915_NEW_DEPTH_STENCIL
    */
   LIS5 |= i915->depth_stencil->stencil_LIS5;
   /* hope it's safe to set stencil ref value even if stencil test is disabled? */
   LIS5 |= i915->stencil_ref.ref_value[0] << S5_STENCIL_REF_SHIFT;

   /* I915_NEW_BLEND
    */
   LIS5 |= i915->blend->LIS5;

#if 0
   /* I915_NEW_RASTERIZER
    */
   if (i915->rasterizer->LIS7) {
      LIS5 |= S5_GLOBAL_DEPTH_OFFSET_ENABLE;
   }
#endif

   set_immediate(i915, I915_IMMEDIATE_S5, LIS5);
}

const struct i915_tracked_state i915_upload_S5 = {
   "imm S5",
   upload_S5,
   I915_NEW_DEPTH_STENCIL | I915_NEW_BLEND | I915_NEW_RASTERIZER
};



/***********************************************************************
 */
static void upload_S6(struct i915_context *i915)
{
   unsigned LIS6 = (2 << S6_TRISTRIP_PV_SHIFT);

   /* I915_NEW_FRAMEBUFFER
    */
   if (i915->framebuffer.cbufs[0])
      LIS6 |= S6_COLOR_WRITE_ENABLE;

   /* I915_NEW_BLEND
    */
   LIS6 |= i915->blend->LIS6;

   /* I915_NEW_DEPTH
    */
   LIS6 |= i915->depth_stencil->depth_LIS6;

   set_immediate(i915, I915_IMMEDIATE_S6, LIS6);
}

const struct i915_tracked_state i915_upload_S6 = {
   "imm S6",
   upload_S6,
   I915_NEW_BLEND | I915_NEW_DEPTH_STENCIL | I915_NEW_FRAMEBUFFER
};



/***********************************************************************
 */
static void upload_S7(struct i915_context *i915)
{
#if 0
   unsigned LIS7;

   /* I915_NEW_RASTERIZER
    */
   LIS7 = i915->rasterizer->LIS7;

   set_immediate(i915, I915_IMMEDIATE_S7, LIS7);
#endif
}

const struct i915_tracked_state i915_upload_S7 = {
   "imm S7",
   upload_S7,
   I915_NEW_RASTERIZER
};



/***********************************************************************
 */
static const struct i915_tracked_state *atoms[] = {
   &i915_upload_S0S1,
   &i915_upload_S2S4,
   &i915_upload_S5,
   &i915_upload_S6,
   &i915_upload_S7
};

static void update_immediate(struct i915_context *i915)
{
   int i;

   for (i = 0; i < Elements(atoms); i++)
      if (i915->dirty & atoms[i]->dirty)
         atoms[i]->update(i915);
}

struct i915_tracked_state i915_hw_immediate = {
   "immediate",
   update_immediate,
   ~0 /* all state atoms, becuase we do internal checking */
};
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d192 1
a198 1
#if 0
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d39 1
a39 4
/* All state expressable with the LOAD_STATE_IMMEDIATE_1 packet.
 * Would like to opportunistically recombine all these fragments into
 * a single packet containing only what has changed, but for now emit
 * as multiple packets.
d42 11
d67 6
a74 1
   /* XXX do this where the vertex size is calculated! */
d82 2
a83 10
   /* I915_NEW_VBO
    */
   if (1 ||
       i915->current.immediate[I915_IMMEDIATE_S0] != LIS0 ||
       i915->current.immediate[I915_IMMEDIATE_S1] != LIS1)
   {
      i915->current.immediate[I915_IMMEDIATE_S0] = LIS0;
      i915->current.immediate[I915_IMMEDIATE_S1] = LIS1;
      i915->hardware_dirty |= I915_HW_IMMEDIATE;
   }
a105 3
      /*
      debug_printf("LIS2: 0x%x  LIS4: 0x%x\n", LIS2, LIS4);
      */
d111 2
a112 7
   if (LIS2 != i915->current.immediate[I915_IMMEDIATE_S2] ||
       LIS4 != i915->current.immediate[I915_IMMEDIATE_S4]) {

      i915->current.immediate[I915_IMMEDIATE_S2] = LIS2;
      i915->current.immediate[I915_IMMEDIATE_S4] = LIS4;
      i915->hardware_dirty |= I915_HW_IMMEDIATE;
   }
d142 1
a142 1
   if (i915->state.Polygon->OffsetFill) {
d147 1
a147 4
   if (LIS5 != i915->current.immediate[I915_IMMEDIATE_S5]) {
      i915->current.immediate[I915_IMMEDIATE_S5] = LIS5;
      i915->hardware_dirty |= I915_HW_IMMEDIATE;
   }
d177 1
a177 4
   if (LIS6 != i915->current.immediate[I915_IMMEDIATE_S6]) {
      i915->current.immediate[I915_IMMEDIATE_S6] = LIS6;
      i915->hardware_dirty |= I915_HW_IMMEDIATE;
   }
d181 1
a181 1
   "imm s6",
d198 3
a200 4
   if (LIS7 != i915->current.immediate[I915_IMMEDIATE_S7]) {
      i915->current.immediate[I915_IMMEDIATE_S7] = LIS7;
      i915->hardware_dirty |= I915_HW_IMMEDIATE;
   }
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d2 1
a2 1
 * 
d5 1
a5 1
 * 
d13 1
a13 1
 * 
d17 1
a17 1
 * 
d25 1
a25 1
 * 
d31 1
a31 1
 
d49 1
a49 1
 * S0,S1: Vertex buffer state.  
d55 2
a56 2
   /* INTEL_NEW_VBO */
   /* TODO: re-use vertex buffers here? */
d59 1
a59 1
   /* INTEL_NEW_VERTEX_SIZE -- do this where the vertex size is calculated! 
d61 1
d66 1
a66 1
	      (vertex_size << 16));
d69 2
a70 2
   /* INTEL_NEW_VBO */
   /* TODO: use a vertex generation number to track vbo changes */
d73 1
a73 1
       i915->current.immediate[I915_IMMEDIATE_S1] != LIS1) 
d82 3
a84 2
   I915_NEW_VBO | I915_NEW_VERTEX_FORMAT,
   upload_S0S1
a88 1

d96 2
a97 1
   /* I915_NEW_VERTEX_FORMAT */
a117 1

d119 3
a121 2
   I915_NEW_RASTERIZER | I915_NEW_VERTEX_FORMAT,
   upload_S2S4
a126 1
 * 
d128 1
a128 1
static void upload_S5( struct i915_context *i915 )
d132 2
d138 2
d143 2
a144 1
   /* I915_NEW_RASTERIZER */
a149 1

d157 3
a159 2
   (I915_NEW_DEPTH_STENCIL | I915_NEW_BLEND | I915_NEW_RASTERIZER),
   upload_S5
d163 1
d166 1
a166 1
static void upload_S6( struct i915_context *i915 )
d190 3
a192 2
   I915_NEW_BLEND | I915_NEW_DEPTH_STENCIL | I915_NEW_FRAMEBUFFER,
   upload_S6
d196 1
d199 1
a199 1
static void upload_S7( struct i915_context *i915 )
d214 3
a216 2
   I915_NEW_RASTERIZER,
   upload_S7
d220 3
d231 1
a231 3
/* 
 */
void i915_update_immediate( struct i915_context *i915 )
d237 1
a237 1
	 atoms[i]->update( i915 );
d239 6
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d2 1
a2 1
 *
d5 1
a5 1
 *
d13 1
a13 1
 *
d17 1
a17 1
 *
d25 1
a25 1
 *
d31 1
a31 1

d49 1
a49 1
 * S0,S1: Vertex buffer state.
d55 2
a56 2
   /* I915_NEW_VBO
    */
d59 1
a59 1
   /* I915_NEW_VERTEX_SIZE
a60 1
   /* XXX do this where the vertex size is calculated! */
d65 1
a65 1
              (vertex_size << 16));
d68 2
a69 2
   /* I915_NEW_VBO
    */
d72 1
a72 1
       i915->current.immediate[I915_IMMEDIATE_S1] != LIS1)
d81 2
a82 3
   "imm S0 S1",
   upload_S0S1,
   I915_NEW_VBO | I915_NEW_VERTEX_FORMAT
d87 1
d95 1
a95 2
   /* I915_NEW_VERTEX_FORMAT
    */
d116 1
d118 2
a119 3
   "imm S2 S4",
   upload_S2S4,
   I915_NEW_RASTERIZER | I915_NEW_VERTEX_FORMAT
d125 1
d127 1
a127 1
static void upload_S5(struct i915_context *i915)
a130 2
   /* I915_NEW_DEPTH_STENCIL
    */
a134 2
   /* I915_NEW_BLEND
    */
d138 1
a138 2
   /* I915_NEW_RASTERIZER
    */
d144 1
d152 2
a153 3
   "imm S5",
   upload_S5,
   I915_NEW_DEPTH_STENCIL | I915_NEW_BLEND | I915_NEW_RASTERIZER
a156 1

d159 1
a159 1
static void upload_S6(struct i915_context *i915)
d183 2
a184 3
   "imm s6",
   upload_S6,
   I915_NEW_BLEND | I915_NEW_DEPTH_STENCIL | I915_NEW_FRAMEBUFFER
a187 1

d190 1
a190 1
static void upload_S7(struct i915_context *i915)
d205 2
a206 3
   "imm S7",
   upload_S7,
   I915_NEW_RASTERIZER
a209 3

/***********************************************************************
 */
d218 3
a220 1
static void update_immediate(struct i915_context *i915)
d226 1
a226 1
         atoms[i]->update(i915);
a227 6

struct i915_tracked_state i915_hw_immediate = {
   "immediate",
   update_immediate,
   ~0 /* all state atoms, becuase we do internal checking */
};
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d39 4
a42 1
/* Convinience function to check immediate state.
a44 11
static INLINE void set_immediate(struct i915_context *i915,
                                 unsigned offset,
                                 const unsigned state)
{
   if (i915->current.immediate[offset] == state)
      return;

   i915->current.immediate[offset] = state;
   i915->immediate_dirty |= 1 << offset;
   i915->hardware_dirty |= I915_HW_IMMEDIATE;
}
a58 6
   /* Need to force this */
   if (i915->dirty & I915_NEW_VBO) {
      i915->immediate_dirty |= 1 << I915_IMMEDIATE_S0;
      i915->hardware_dirty |= I915_HW_IMMEDIATE;
   }

d61 1
d69 10
a78 2
   set_immediate(i915, I915_IMMEDIATE_S0, LIS0);
   set_immediate(i915, I915_IMMEDIATE_S1, LIS1);
d101 3
d109 7
a115 2
   set_immediate(i915, I915_IMMEDIATE_S2, LIS2);
   set_immediate(i915, I915_IMMEDIATE_S4, LIS4);
d145 1
a145 1
   if (i915->rasterizer->LIS7) {
d150 4
a153 1
   set_immediate(i915, I915_IMMEDIATE_S5, LIS5);
d183 4
a186 1
   set_immediate(i915, I915_IMMEDIATE_S6, LIS6);
d190 1
a190 1
   "imm S6",
a200 1
#if 0
d207 4
a210 2
   set_immediate(i915, I915_IMMEDIATE_S7, LIS7);
#endif
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
@


