head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.2
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.32;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2015.07.29.05.47.25;	author mpi;	state Exp;
branches;
next	1.3;
commitid	7LgDWgovbCk9WPgF;

1.3
date	2013.09.05.14.00.59;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.04;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright 2008 Corbin Simpson <MostAwesomeDude@@gmail.com>
 * Copyright 2010 Marek Olšák <maraeo@@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHOR(S) AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE. */

#include "r300_transfer.h"
#include "r300_texture.h"
#include "r300_texture_desc.h"
#include "r300_screen_buffer.h"

#include "util/u_memory.h"
#include "util/u_format.h"
#include "util/u_box.h"

struct r300_transfer {
    /* Parent class */
    struct pipe_transfer transfer;

    /* Offset from start of buffer. */
    unsigned offset;

    /* Linear texture. */
    struct r300_resource *linear_texture;
};

/* Convenience cast wrapper. */
static INLINE struct r300_transfer*
r300_transfer(struct pipe_transfer* transfer)
{
    return (struct r300_transfer*)transfer;
}

/* Copy from a tiled texture to a detiled one. */
static void r300_copy_from_tiled_texture(struct pipe_context *ctx,
                                         struct r300_transfer *r300transfer)
{
    struct pipe_transfer *transfer = (struct pipe_transfer*)r300transfer;
    struct pipe_resource *src = transfer->resource;
    struct pipe_resource *dst = &r300transfer->linear_texture->b.b;

    if (src->nr_samples <= 1) {
        ctx->resource_copy_region(ctx, dst, 0, 0, 0, 0,
                                  src, transfer->level, &transfer->box);
    } else {
        /* Resolve the resource. */
        struct pipe_blit_info blit;

        memset(&blit, 0, sizeof(blit));
        blit.src.resource = src;
        blit.src.format = src->format;
        blit.src.level = transfer->level;
        blit.src.box = transfer->box;
        blit.dst.resource = dst;
        blit.dst.format = dst->format;
        blit.dst.box.width = transfer->box.width;
        blit.dst.box.height = transfer->box.height;
        blit.dst.box.depth = transfer->box.depth;
        blit.mask = PIPE_MASK_RGBA;
        blit.filter = PIPE_TEX_FILTER_NEAREST;

        ctx->blit(ctx, &blit);
    }
}

/* Copy a detiled texture to a tiled one. */
static void r300_copy_into_tiled_texture(struct pipe_context *ctx,
                                         struct r300_transfer *r300transfer)
{
    struct pipe_transfer *transfer = (struct pipe_transfer*)r300transfer;
    struct pipe_resource *tex = transfer->resource;
    struct pipe_box src_box;

    u_box_3d(0, 0, 0,
             transfer->box.width, transfer->box.height, transfer->box.depth,
             &src_box);

    ctx->resource_copy_region(ctx, tex, transfer->level,
                              transfer->box.x, transfer->box.y, transfer->box.z,
                              &r300transfer->linear_texture->b.b, 0, &src_box);

    /* XXX remove this. */
    r300_flush(ctx, 0, NULL);
}

void *
r300_texture_transfer_map(struct pipe_context *ctx,
                          struct pipe_resource *texture,
                          unsigned level,
                          unsigned usage,
                          const struct pipe_box *box,
                          struct pipe_transfer **transfer)
{
    struct r300_context *r300 = r300_context(ctx);
    struct r300_resource *tex = r300_resource(texture);
    struct r300_transfer *trans;
    enum pipe_format format = texture->format;
    boolean referenced_cs, referenced_hw;
    char *map;

    referenced_cs =
        r300->rws->cs_is_buffer_referenced(r300->cs, tex->cs_buf, RADEON_USAGE_READWRITE);
    if (referenced_cs) {
        referenced_hw = TRUE;
    } else {
        referenced_hw =
            r300->rws->buffer_is_busy(tex->buf, RADEON_USAGE_READWRITE);
    }

    trans = CALLOC_STRUCT(r300_transfer);
    if (trans) {
        /* Initialize the transfer object. */
        trans->transfer.resource = texture;
        trans->transfer.level = level;
        trans->transfer.usage = usage;
        trans->transfer.box = *box;

        /* If the texture is tiled, we must create a temporary detiled texture
         * for this transfer.
         * Also make write transfers pipelined. */
        if (tex->tex.microtile || tex->tex.macrotile[level] ||
            r300_get_hw_format(format, texture->bind) != format ||
            (referenced_hw && !(usage & PIPE_TRANSFER_READ) &&
             r300_is_blit_supported(format))) {
            struct pipe_resource base;

            if (r300->blitter->running) {
                fprintf(stderr, "r300: ERROR: Blitter recursion in texture_get_transfer.\n");
                os_break();
            }

            memset(&base, 0, sizeof(base));
            base.target = PIPE_TEXTURE_2D;
            base.format = texture->format;
            base.width0 = box->width;
            base.height0 = box->height;
            base.depth0 = 1;
            base.array_size = 1;
            base.usage = PIPE_USAGE_STAGING;
            base.flags = R300_RESOURCE_FLAG_TRANSFER;

            /* We must set the correct texture target and dimensions if needed for a 3D transfer. */
            if (box->depth > 1 && util_max_layer(texture, level) > 0) {
                base.target = texture->target;

                if (base.target == PIPE_TEXTURE_3D) {
                    base.depth0 = util_next_power_of_two(box->depth);
                }
            }

            /* Create the temporary texture. */
            trans->linear_texture = r300_resource(
               ctx->screen->resource_create(ctx->screen,
                                            &base));

            if (!trans->linear_texture) {
                /* Oh crap, the thing can't create the texture.
                 * Let's flush and try again. */
                r300_flush(ctx, 0, NULL);

                trans->linear_texture = r300_resource(
                   ctx->screen->resource_create(ctx->screen,
                                                &base));

                if (!trans->linear_texture) {
                    fprintf(stderr,
                            "r300: Failed to create a transfer object.\n");
                    FREE(trans);
                    return NULL;
                }
            }

            assert(!trans->linear_texture->tex.microtile &&
                   !trans->linear_texture->tex.macrotile[0]);

            /* Set the stride. */
            trans->transfer.stride =
                    trans->linear_texture->tex.stride_in_bytes[0];
            trans->transfer.layer_stride =
                    trans->linear_texture->tex.layer_size_in_bytes[0];

            if (usage & PIPE_TRANSFER_READ) {
                /* We cannot map a tiled texture directly because the data is
                 * in a different order, therefore we do detiling using a blit. */
                r300_copy_from_tiled_texture(ctx, trans);

                /* Always referenced in the blit. */
                r300_flush(ctx, 0, NULL);
            }
        } else {
            /* Unpipelined transfer. */
            trans->transfer.stride = tex->tex.stride_in_bytes[level];
            trans->transfer.layer_stride = tex->tex.layer_size_in_bytes[level];
            trans->offset = r300_texture_get_offset(tex, level, box->z);

            if (referenced_cs &&
                !(usage & PIPE_TRANSFER_UNSYNCHRONIZED)) {
                r300_flush(ctx, 0, NULL);
            }
        }
    }

    if (trans->linear_texture) {
        /* The detiled texture is of the same size as the region being mapped
         * (no offset needed). */
        map = r300->rws->buffer_map(trans->linear_texture->cs_buf,
                                    r300->cs, usage);
        if (!map) {
            pipe_resource_reference(
                (struct pipe_resource**)&trans->linear_texture, NULL);
            FREE(trans);
            return NULL;
        }
	*transfer = &trans->transfer;
        return map;
    } else {
        /* Tiling is disabled. */
        map = r300->rws->buffer_map(tex->cs_buf, r300->cs, usage);
        if (!map) {
            FREE(trans);
            return NULL;
        }

	*transfer = &trans->transfer;
        return map + trans->offset +
            box->y / util_format_get_blockheight(format) * trans->transfer.stride +
            box->x / util_format_get_blockwidth(format) * util_format_get_blocksize(format);
    }
}

void r300_texture_transfer_unmap(struct pipe_context *ctx,
				 struct pipe_transfer *transfer)
{
    struct radeon_winsys *rws = r300_context(ctx)->rws;
    struct r300_transfer *trans = r300_transfer(transfer);
    struct r300_resource *tex = r300_resource(transfer->resource);

    if (trans->linear_texture) {
        rws->buffer_unmap(trans->linear_texture->cs_buf);

        if (transfer->usage & PIPE_TRANSFER_WRITE) {
            r300_copy_into_tiled_texture(ctx, trans);
        }

        pipe_resource_reference(
            (struct pipe_resource**)&trans->linear_texture, NULL);
    } else {
        rws->buffer_unmap(tex->cs_buf);
    }
    FREE(transfer);
}
@


1.4
log
@Make the Gallium r300 works on big-endian architectures.

Diff provided by Michel Daenzer [0] as a possible solution for a
regression introduced in Mesa 9 [1].  This diff allows macppc
users to use OpenGL accelerated appplications (i.e. GNOME3).

As disucssed during c2k15 we won't try to keep this patch during
the next Mesa update.

[0] https://bugs.freedesktop.org/show_bug.cgi?id=71789
[1] http://lists.freedesktop.org/archives/mesa-dev/2013-December/050218.html

Tested by myself and ajacoutot@@, regression test and ok jsg@@
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d25 1
d114 1
a115 1
    enum pipe_format format = tex->b.b.format;
d139 1
d141 1
a141 1
             r300_is_blit_supported(texture->format))) {
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d55 22
a76 1
    struct pipe_resource *tex = transfer->resource;
d78 2
a79 3
    ctx->resource_copy_region(ctx, &r300transfer->linear_texture->b.b.b, 0,
                              0, 0, 0,
                              tex, transfer->level, &transfer->box);
d89 4
a92 1
    u_box_origin_2d(transfer->box.width, transfer->box.height, &src_box);
d96 1
a96 1
                              &r300transfer->linear_texture->b.b.b, 0, &src_box);
d102 2
a103 2
struct pipe_transfer*
r300_texture_get_transfer(struct pipe_context *ctx,
d107 2
a108 1
                          const struct pipe_box *box)
d113 3
a115 4
    struct pipe_resource base;
    boolean referenced_cs, referenced_hw, blittable;
    const struct util_format_description *desc =
        util_format_description(texture->format);
d118 1
a118 1
        r300->rws->cs_is_buffer_referenced(r300->cs, tex->cs_buf);
d123 1
a123 1
            r300->rws->buffer_is_busy(tex->buf);
a125 4
    blittable = desc->layout == UTIL_FORMAT_LAYOUT_PLAIN ||
                desc->layout == UTIL_FORMAT_LAYOUT_S3TC ||
                desc->layout == UTIL_FORMAT_LAYOUT_RGTC;

d129 1
a129 1
        pipe_resource_reference(&trans->transfer.resource, texture);
d138 4
a141 1
            (referenced_hw && blittable && !(usage & PIPE_TRANSFER_READ))) {
d147 1
d154 1
a154 4
            base.last_level = 0;
            base.nr_samples = 0;
            base.usage = PIPE_USAGE_DYNAMIC;
            base.bind = 0;
d157 7
a163 9
            /* For texture reading, the temporary (detiled) texture is used as
             * a render target when blitting from a tiled texture. */
            if (usage & PIPE_TRANSFER_READ) {
                base.bind |= PIPE_BIND_RENDER_TARGET;
            }
            /* For texture writing, the temporary texture is used as a sampler
             * when blitting into a tiled texture. */
            if (usage & PIPE_TRANSFER_WRITE) {
                base.bind |= PIPE_BIND_SAMPLER_VIEW;
a180 7
                    /* For linear textures, it's safe to fallback to
                     * an unpipelined transfer. */
                    if (!tex->tex.microtile && !tex->tex.macrotile[level]) {
                        goto unpipelined;
                    }

                    /* Otherwise, go to hell. */
d182 1
a182 1
                        "r300: Failed to create a transfer object, praise.\n");
d194 2
d205 5
a209 2
            return &trans->transfer;
        }
d211 4
a214 21
    unpipelined:
        /* Unpipelined transfer. */
        trans->transfer.stride = tex->tex.stride_in_bytes[level];
        trans->offset = r300_texture_get_offset(tex, level, box->z);

        if (referenced_cs &&
            !(usage & PIPE_TRANSFER_UNSYNCHRONIZED))
            r300_flush(ctx, 0, NULL);
        return &trans->transfer;
    }
    return NULL;
}

void r300_texture_transfer_destroy(struct pipe_context *ctx,
				   struct pipe_transfer *trans)
{
    struct r300_transfer *r300transfer = r300_transfer(trans);

    if (r300transfer->linear_texture) {
        if (trans->usage & PIPE_TRANSFER_WRITE) {
            r300_copy_into_tiled_texture(ctx, r300transfer);
a215 3

        pipe_resource_reference(
            (struct pipe_resource**)&r300transfer->linear_texture, NULL);
a216 3
    pipe_resource_reference(&trans->resource, NULL);
    FREE(trans);
}
d218 1
a218 11
void* r300_texture_transfer_map(struct pipe_context *ctx,
				struct pipe_transfer *transfer)
{
    struct r300_context *r300 = r300_context(ctx);
    struct radeon_winsys *rws = (struct radeon_winsys *)ctx->winsys;
    struct r300_transfer *r300transfer = r300_transfer(transfer);
    struct r300_resource *tex = r300_resource(transfer->resource);
    char *map;
    enum pipe_format format = tex->b.b.b.format;

    if (r300transfer->linear_texture) {
d221 10
a230 3
        return rws->buffer_map(r300transfer->linear_texture->buf,
                               r300->cs,
                               transfer->usage);
d233 1
a233 3
        map = rws->buffer_map(tex->buf, r300->cs,
                              transfer->usage);

d235 1
d239 4
a242 3
        return map + r300_transfer(transfer)->offset +
            transfer->box.y / util_format_get_blockheight(format) * transfer->stride +
            transfer->box.x / util_format_get_blockwidth(format) * util_format_get_blocksize(format);
d249 2
a250 2
    struct radeon_winsys *rws = (struct radeon_winsys *)ctx->winsys;
    struct r300_transfer *r300transfer = r300_transfer(transfer);
d253 9
a261 2
    if (r300transfer->linear_texture) {
        rws->buffer_unmap(r300transfer->linear_texture->buf);
d263 1
a263 1
        rws->buffer_unmap(tex->buf);
d265 1
@


1.1
log
@Initial revision
@
text
@d40 1
a40 1
    struct r300_texture *linear_texture;
d57 1
a57 1
    ctx->resource_copy_region(ctx, &r300transfer->linear_texture->desc.b.b, 0,
d73 1
a73 1
                              &r300transfer->linear_texture->desc.b.b, 0, &src_box);
d75 2
a76 1
    ctx->flush(ctx, 0, NULL);
d87 1
a87 1
    struct r300_texture *tex = r300_texture(texture);
d91 2
d95 1
a95 2
        r300->rws->cs_is_buffer_referenced(r300->cs,
                                           tex->cs_buffer, R300_REF_CS);
d100 1
a100 2
            r300->rws->cs_is_buffer_referenced(r300->cs,
                                               tex->cs_buffer, R300_REF_HW);
d103 3
a105 3
    blittable = ctx->screen->is_format_supported(
            ctx->screen, texture->format, texture->target, 0,
            PIPE_BIND_SAMPLER_VIEW | PIPE_BIND_RENDER_TARGET, 0);
d118 7
a124 2
        if (tex->desc.microtile || tex->desc.macrotile[level] ||
            ((referenced_hw & !(usage & PIPE_TRANSFER_READ)) && blittable)) {
a128 1
            /* XXX: was depth0 = 0 */
d149 1
a149 1
            trans->linear_texture = r300_texture(
d156 1
a156 1
                ctx->flush(ctx, 0, NULL);
d158 1
a158 1
                trans->linear_texture = r300_texture(
d165 1
a165 1
                    if (!tex->desc.microtile && !tex->desc.macrotile[level]) {
d177 2
a178 2
            assert(!trans->linear_texture->desc.microtile &&
                   !trans->linear_texture->desc.macrotile[0]);
d180 1
a180 7
            /* Set the stride.
	     *
	     * Even though we are using an internal texture for this,
	     * the transfer level, box and usage parameters still reflect
	     * the arguments received to get_transfer.  We just do the
	     * right thing internally.
	     */
d182 1
a182 1
                    trans->linear_texture->desc.stride_in_bytes[0];
d190 1
a190 1
                ctx->flush(ctx, 0, NULL);
d197 2
a198 2
        trans->transfer.stride = tex->desc.stride_in_bytes[level];
        trans->offset = r300_texture_get_offset(&tex->desc, level, box->z);
d200 3
a202 2
        if (referenced_cs)
            ctx->flush(ctx, PIPE_FLUSH_RENDER_CACHE, NULL);
d229 1
a229 1
    struct r300_winsys_screen *rws = (struct r300_winsys_screen *)ctx->winsys;
d231 1
a231 1
    struct r300_texture *tex = r300_texture(transfer->resource);
d233 1
a233 1
    enum pipe_format format = tex->desc.b.b.format;
d238 1
a238 2
        return rws->buffer_map(rws,
                               r300transfer->linear_texture->buffer,
d243 1
a243 1
        map = rws->buffer_map(rws, tex->buffer, r300->cs,
d259 1
a259 1
    struct r300_winsys_screen *rws = (struct r300_winsys_screen *)ctx->winsys;
d261 1
a261 1
    struct r300_texture *tex = r300_texture(transfer->resource);
d264 1
a264 1
        rws->buffer_unmap(rws, r300transfer->linear_texture->buffer);
d266 1
a266 1
        rws->buffer_unmap(rws, tex->buffer);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d40 1
a40 1
    struct r300_resource *linear_texture;
d55 1
a55 9
    struct pipe_resource *src = transfer->resource;
    struct pipe_resource *dst = &r300transfer->linear_texture->b.b;

    if (src->nr_samples <= 1) {
        ctx->resource_copy_region(ctx, dst, 0, 0, 0, 0,
                                  src, transfer->level, &transfer->box);
    } else {
        /* Resolve the resource. */
        struct pipe_blit_info blit;
d57 3
a59 15
        memset(&blit, 0, sizeof(blit));
        blit.src.resource = src;
        blit.src.format = src->format;
        blit.src.level = transfer->level;
        blit.src.box = transfer->box;
        blit.dst.resource = dst;
        blit.dst.format = dst->format;
        blit.dst.box.width = transfer->box.width;
        blit.dst.box.height = transfer->box.height;
        blit.dst.box.depth = transfer->box.depth;
        blit.mask = PIPE_MASK_RGBA;
        blit.filter = PIPE_TEX_FILTER_NEAREST;

        ctx->blit(ctx, &blit);
    }
d69 1
a69 4

    u_box_3d(0, 0, 0,
             transfer->box.width, transfer->box.height, transfer->box.depth,
             &src_box);
d73 1
a73 1
                              &r300transfer->linear_texture->b.b, 0, &src_box);
d75 1
a75 2
    /* XXX remove this. */
    r300_flush(ctx, 0, NULL);
d78 2
a79 2
void *
r300_texture_transfer_map(struct pipe_context *ctx,
d83 1
a83 2
                          const struct pipe_box *box,
                          struct pipe_transfer **transfer)
d86 1
a86 1
    struct r300_resource *tex = r300_resource(texture);
d88 2
a89 3
    boolean referenced_cs, referenced_hw;
    enum pipe_format format = tex->b.b.format;
    char *map;
d92 2
a93 1
        r300->rws->cs_is_buffer_referenced(r300->cs, tex->cs_buf, RADEON_USAGE_READWRITE);
d98 2
a99 1
            r300->rws->buffer_is_busy(tex->buf, RADEON_USAGE_READWRITE);
d102 4
d109 1
a109 1
        trans->transfer.resource = texture;
d117 2
a118 11
        if (tex->tex.microtile || tex->tex.macrotile[level] ||
            (referenced_hw && !(usage & PIPE_TRANSFER_READ) &&
             r300_is_blit_supported(texture->format))) {
            struct pipe_resource base;

            if (r300->blitter->running) {
                fprintf(stderr, "r300: ERROR: Blitter recursion in texture_get_transfer.\n");
                os_break();
            }

            memset(&base, 0, sizeof(base));
d123 1
d126 4
a129 1
            base.usage = PIPE_USAGE_STAGING;
d132 9
a140 7
            /* We must set the correct texture target and dimensions if needed for a 3D transfer. */
            if (box->depth > 1 && util_max_layer(texture, level) > 0) {
                base.target = texture->target;

                if (base.target == PIPE_TEXTURE_3D) {
                    base.depth0 = util_next_power_of_two(box->depth);
                }
d144 1
a144 1
            trans->linear_texture = r300_resource(
d151 1
a151 1
                r300_flush(ctx, 0, NULL);
d153 1
a153 1
                trans->linear_texture = r300_resource(
d158 7
d166 1
a166 1
                            "r300: Failed to create a transfer object.\n");
d172 2
a173 2
            assert(!trans->linear_texture->tex.microtile &&
                   !trans->linear_texture->tex.macrotile[0]);
d175 7
a181 1
            /* Set the stride. */
d183 1
a183 3
                    trans->linear_texture->tex.stride_in_bytes[0];
            trans->transfer.layer_stride =
                    trans->linear_texture->tex.layer_size_in_bytes[0];
d191 1
a191 11
                r300_flush(ctx, 0, NULL);
            }
        } else {
            /* Unpipelined transfer. */
            trans->transfer.stride = tex->tex.stride_in_bytes[level];
            trans->transfer.layer_stride = tex->tex.layer_size_in_bytes[level];
            trans->offset = r300_texture_get_offset(tex, level, box->z);

            if (referenced_cs &&
                !(usage & PIPE_TRANSFER_UNSYNCHRONIZED)) {
                r300_flush(ctx, 0, NULL);
d193 23
d217 3
d221 3
d225 11
a235 1
    if (trans->linear_texture) {
d238 4
a241 10
        map = r300->rws->buffer_map(trans->linear_texture->cs_buf,
                                    r300->cs, usage);
        if (!map) {
            pipe_resource_reference(
                (struct pipe_resource**)&trans->linear_texture, NULL);
            FREE(trans);
            return NULL;
        }
	*transfer = &trans->transfer;
        return map;
d244 3
a246 1
        map = r300->rws->buffer_map(tex->cs_buf, r300->cs, usage);
a247 1
            FREE(trans);
d251 3
a253 4
	*transfer = &trans->transfer;
        return map + trans->offset +
            box->y / util_format_get_blockheight(format) * trans->transfer.stride +
            box->x / util_format_get_blockwidth(format) * util_format_get_blocksize(format);
d260 3
a262 3
    struct radeon_winsys *rws = r300_context(ctx)->rws;
    struct r300_transfer *trans = r300_transfer(transfer);
    struct r300_resource *tex = r300_resource(transfer->resource);
d264 2
a265 9
    if (trans->linear_texture) {
        rws->buffer_unmap(trans->linear_texture->cs_buf);

        if (transfer->usage & PIPE_TRANSFER_WRITE) {
            r300_copy_into_tiled_texture(ctx, trans);
        }

        pipe_resource_reference(
            (struct pipe_resource**)&trans->linear_texture, NULL);
d267 1
a267 1
        rws->buffer_unmap(tex->cs_buf);
a268 1
    FREE(transfer);
@

