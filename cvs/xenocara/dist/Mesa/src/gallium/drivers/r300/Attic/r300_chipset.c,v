head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.32;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.52;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.54;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.56;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.58;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.06;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.08.00;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.45.09;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright 2008 Corbin Simpson <MostAwesomeDude@@gmail.com>
 * Copyright 2011 Marek Olšák <maraeo@@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHOR(S) AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE. */

#include "r300_chipset.h"
#include "../../winsys/radeon/drm/radeon_winsys.h"

#include "util/u_debug.h"
#include "util/u_memory.h"
#include "os/os_process.h"

#include <stdio.h>
#include <errno.h>

/* r300_chipset: A file all to itself for deducing the various properties of
 * Radeons. */

static void r300_apply_hyperz_blacklist(struct r300_capabilities* caps)
{
    static const char *list[] = {
        "X",    /* the DDX or indirect rendering */
        "Xorg", /* (alternative name) */
        "check_gl_texture_size", /* compiz */
        "Compiz",
        "gnome-session-check-accelerated-helper",
        "gnome-shell",
        "kwin_opengl_test",
        "kwin",
        "firefox",
    };
    int i;
    char proc_name[128];
    
    if (!os_get_process_name(proc_name, sizeof(proc_name)))
        return;

    for (i = 0; i < Elements(list); i++) {
        if (strcmp(list[i], proc_name) == 0) {
            caps->zmask_ram = 0;
            caps->hiz_ram = 0;
            break;
        }
    }
}

/* Parse a PCI ID and fill an r300_capabilities struct with information. */
void r300_parse_chipset(uint32_t pci_id, struct r300_capabilities* caps)
{
    switch (pci_id) {
#define CHIPSET(pci_id, name, chipfamily) \
        case pci_id: \
            caps->family = CHIP_##chipfamily; \
            break;
#include "pci_ids/r300_pci_ids.h"
#undef CHIPSET

    default:
        fprintf(stderr, "r300: Warning: Unknown chipset 0x%x\nAborting...",
                pci_id);
        abort();
    }

    /* Defaults. */
    caps->high_second_pipe = FALSE;
    caps->num_vert_fpus = 0;
    caps->hiz_ram = 0;
    caps->zmask_ram = 0;
    caps->has_cmask = FALSE;


    switch (caps->family) {
    case CHIP_R300:
    case CHIP_R350:
        caps->high_second_pipe = TRUE;
        caps->num_vert_fpus = 4;
        caps->has_cmask = TRUE; /* guessed because there is also HiZ */
        caps->hiz_ram = R300_HIZ_LIMIT;
        caps->zmask_ram = PIPE_ZMASK_SIZE;
        break;

    case CHIP_RV350:
    case CHIP_RV370:
        caps->high_second_pipe = TRUE;
        caps->num_vert_fpus = 2;
        caps->zmask_ram = RV3xx_ZMASK_SIZE;
        break;

    case CHIP_RV380:
        caps->high_second_pipe = TRUE;
        caps->num_vert_fpus = 2;
        caps->has_cmask = TRUE; /* guessed because there is also HiZ */
        caps->hiz_ram = R300_HIZ_LIMIT;
        caps->zmask_ram = RV3xx_ZMASK_SIZE;
        break;

    case CHIP_RS400:
    case CHIP_RS600:
    case CHIP_RS690:
    case CHIP_RS740:
        break;

    case CHIP_RC410:
    case CHIP_RS480:
        caps->zmask_ram = RV3xx_ZMASK_SIZE;
        break;

    case CHIP_R420:
    case CHIP_R423:
    case CHIP_R430:
    case CHIP_R480:
    case CHIP_R481:
    case CHIP_RV410:
        caps->num_vert_fpus = 6;
        caps->has_cmask = TRUE; /* guessed because there is also HiZ */
        caps->hiz_ram = R300_HIZ_LIMIT;
        caps->zmask_ram = PIPE_ZMASK_SIZE;
        break;

    case CHIP_R520:
        caps->num_vert_fpus = 8;
        caps->has_cmask = TRUE;
        caps->hiz_ram = R300_HIZ_LIMIT;
        caps->zmask_ram = PIPE_ZMASK_SIZE;
        break;

    case CHIP_RV515:
        caps->num_vert_fpus = 2;
        caps->has_cmask = TRUE;
        caps->hiz_ram = R300_HIZ_LIMIT;
        caps->zmask_ram = PIPE_ZMASK_SIZE;
        break;

    case CHIP_RV530:
        caps->num_vert_fpus = 5;
        caps->has_cmask = TRUE;
        caps->hiz_ram = RV530_HIZ_LIMIT;
        caps->zmask_ram = PIPE_ZMASK_SIZE;
        break;

    case CHIP_R580:
    case CHIP_RV560:
    case CHIP_RV570:
        caps->num_vert_fpus = 8;
        caps->has_cmask = TRUE;
        caps->hiz_ram = RV530_HIZ_LIMIT;
        caps->zmask_ram = PIPE_ZMASK_SIZE;
        break;
    }

    caps->num_tex_units = 16;
    caps->is_r400 = caps->family >= CHIP_R420 && caps->family < CHIP_RV515;
    caps->is_r500 = caps->family >= CHIP_RV515;
    caps->is_rv350 = caps->family >= CHIP_RV350;
    caps->z_compress = caps->is_rv350 ? R300_ZCOMP_8X8 : R300_ZCOMP_4X4;
    caps->dxtc_swizzle = caps->is_r400 || caps->is_r500;
    caps->has_us_format = caps->family == CHIP_R520;
    caps->has_tcl = caps->num_vert_fpus > 0;

    if (caps->has_tcl) {
        caps->has_tcl = debug_get_bool_option("RADEON_NO_TCL", FALSE) ? FALSE : TRUE;
    }

    r300_apply_hyperz_blacklist(caps);
}
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d25 1
a25 1
#include "radeon/drm/radeon_winsys.h"
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d25 1
a25 1
#include "../../winsys/radeon/drm/radeon_winsys.h"
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d87 1
d95 1
d110 1
d133 1
d140 1
d147 1
d154 1
d163 1
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d25 1
d28 2
d32 1
d37 28
d66 1
a66 1
void r300_parse_chipset(struct r300_capabilities* caps)
d68 1
a68 1
    switch (caps->pci_id) {
d71 1
a71 1
            caps->family = CHIP_FAMILY_##chipfamily; \
d78 1
a78 1
                caps->pci_id);
d90 2
a91 2
    case CHIP_FAMILY_R300:
    case CHIP_FAMILY_R350:
d98 2
a99 2
    case CHIP_FAMILY_RV350:
    case CHIP_FAMILY_RV370:
d105 1
a105 1
    case CHIP_FAMILY_RV380:
d112 4
a115 4
    case CHIP_FAMILY_RS400:
    case CHIP_FAMILY_RS600:
    case CHIP_FAMILY_RS690:
    case CHIP_FAMILY_RS740:
d118 2
a119 2
    case CHIP_FAMILY_RC410:
    case CHIP_FAMILY_RS480:
d123 6
a128 6
    case CHIP_FAMILY_R420:
    case CHIP_FAMILY_R423:
    case CHIP_FAMILY_R430:
    case CHIP_FAMILY_R480:
    case CHIP_FAMILY_R481:
    case CHIP_FAMILY_RV410:
d134 1
a134 1
    case CHIP_FAMILY_R520:
d140 1
a140 1
    case CHIP_FAMILY_RV515:
d146 1
a146 1
    case CHIP_FAMILY_RV530:
d152 3
a154 3
    case CHIP_FAMILY_R580:
    case CHIP_FAMILY_RV560:
    case CHIP_FAMILY_RV570:
d162 3
a164 3
    caps->is_r400 = caps->family >= CHIP_FAMILY_R420 && caps->family < CHIP_FAMILY_RV515;
    caps->is_r500 = caps->family >= CHIP_FAMILY_RV515;
    caps->is_rv350 = caps->family >= CHIP_FAMILY_RV350;
d167 1
a167 1
    caps->has_us_format = caps->family == CHIP_FAMILY_R520;
d173 2
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d3 1
a35 12
    /* Reasonable defaults */
    caps->num_vert_fpus = 2;
    caps->num_tex_units = 16;
    caps->has_tcl = debug_get_bool_option("RADEON_NO_TCL", FALSE) ? FALSE : TRUE;
    caps->hiz_ram = 0;
    caps->is_r400 = FALSE;
    caps->is_r500 = FALSE;
    caps->high_second_pipe = FALSE;

    /* Note: These are not ordered by PCI ID. I leave that task to GCC,
     * which will perform the ordering while collating jump tables. Instead,
     * I've tried to group them according to capabilities and age. */
d37 12
a48 7
        case 0x4144:
            caps->family = CHIP_FAMILY_R300;
            caps->high_second_pipe = TRUE;
            caps->num_vert_fpus = 4;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;
d50 5
a54 53
        case 0x4145:
        case 0x4146:
        case 0x4147:
        case 0x4E44:
        case 0x4E45:
        case 0x4E46:
        case 0x4E47:
            caps->family = CHIP_FAMILY_R300;
            caps->high_second_pipe = TRUE;
            caps->num_vert_fpus = 4;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x4150:
        case 0x4151:
        case 0x4152:
        case 0x4153:
        case 0x4154:
        case 0x4155:
        case 0x4156:
        case 0x4E50:
        case 0x4E51:
        case 0x4E52:
        case 0x4E53:
        case 0x4E54:
        case 0x4E56:
            caps->family = CHIP_FAMILY_RV350;
            caps->high_second_pipe = TRUE;
            caps->zmask_ram = RV3xx_ZMASK_SIZE;
            break;

        case 0x4148:
        case 0x4149:
        case 0x414A:
        case 0x414B:
        case 0x4E48:
        case 0x4E49:
        case 0x4E4B:
            caps->family = CHIP_FAMILY_R350;
            caps->high_second_pipe = TRUE;
            caps->num_vert_fpus = 4;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x4E4A:
            caps->family = CHIP_FAMILY_R360;
            caps->high_second_pipe = TRUE;
            caps->num_vert_fpus = 4;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;
a55 115
        case 0x5460:
        case 0x5462:
        case 0x5464:
        case 0x5B60:
        case 0x5B62:
        case 0x5B63:
        case 0x5B64:
        case 0x5B65:
            caps->family = CHIP_FAMILY_RV370;
            caps->high_second_pipe = TRUE;
            caps->zmask_ram = RV3xx_ZMASK_SIZE;
            break;

        case 0x3150:
        case 0x3152:
        case 0x3154:
        case 0x3155:
        case 0x3E50:
        case 0x3E54:
            caps->family = CHIP_FAMILY_RV380;
            caps->high_second_pipe = TRUE;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = RV3xx_ZMASK_SIZE;
            break;

        case 0x4A48:
        case 0x4A49:
        case 0x4A4A:
        case 0x4A4B:
        case 0x4A4C:
        case 0x4A4D:
        case 0x4A4E:
        case 0x4A4F:
        case 0x4A50:
        case 0x4A54:
            caps->family = CHIP_FAMILY_R420;
            caps->num_vert_fpus = 6;
            caps->is_r400 = TRUE;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x5548:
        case 0x5549:
        case 0x554A:
        case 0x554B:
        case 0x5550:
        case 0x5551:
        case 0x5552:
        case 0x5554:
        case 0x5D57:
            caps->family = CHIP_FAMILY_R423;
            caps->num_vert_fpus = 6;
            caps->is_r400 = TRUE;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x554C:
        case 0x554D:
        case 0x554E:
        case 0x554F:
        case 0x5D48:
        case 0x5D49:
        case 0x5D4A:
            caps->family = CHIP_FAMILY_R430;
            caps->num_vert_fpus = 6;
            caps->is_r400 = TRUE;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x5D4C:
        case 0x5D4D:
        case 0x5D4E:
        case 0x5D4F:
        case 0x5D50:
        case 0x5D52:
            caps->family = CHIP_FAMILY_R480;
            caps->num_vert_fpus = 6;
            caps->is_r400 = TRUE;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x4B48:
        case 0x4B49:
        case 0x4B4A:
        case 0x4B4B:
        case 0x4B4C:
            caps->family = CHIP_FAMILY_R481;
            caps->num_vert_fpus = 6;
            caps->is_r400 = TRUE;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x5E4C:
        case 0x5E4F:
        case 0x564A:
        case 0x564B:
        case 0x564F:
        case 0x5652:
        case 0x5653:
        case 0x5657:
        case 0x5E48:
        case 0x5E4A:
        case 0x5E4B:
        case 0x5E4D:
            caps->family = CHIP_FAMILY_RV410;
            caps->num_vert_fpus = 6;
            caps->is_r400 = TRUE;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;
d57 70
a126 198
        case 0x5954:
        case 0x5955:
            caps->family = CHIP_FAMILY_RS480;
            caps->has_tcl = FALSE;
            caps->zmask_ram = RV3xx_ZMASK_SIZE;
            break;

        case 0x5974:
        case 0x5975:
            caps->family = CHIP_FAMILY_RS482;
            caps->has_tcl = FALSE;
            caps->zmask_ram = RV3xx_ZMASK_SIZE;
            break;

        case 0x5A41:
        case 0x5A42:
            caps->family = CHIP_FAMILY_RS400;
            caps->has_tcl = FALSE;
            caps->zmask_ram = RV3xx_ZMASK_SIZE;
            break;

        case 0x5A61:
        case 0x5A62:
            caps->family = CHIP_FAMILY_RC410;
            caps->has_tcl = FALSE;
            caps->zmask_ram = RV3xx_ZMASK_SIZE;
            break;

        case 0x791E:
        case 0x791F:
            caps->family = CHIP_FAMILY_RS690;
            caps->has_tcl = FALSE;
            caps->is_r400 = TRUE;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x793F:
        case 0x7941:
        case 0x7942:
            caps->family = CHIP_FAMILY_RS600;
            caps->has_tcl = FALSE;
            caps->is_r400 = TRUE;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x796C:
        case 0x796D:
        case 0x796E:
        case 0x796F:
            caps->family = CHIP_FAMILY_RS740;
            caps->has_tcl = FALSE;
            caps->is_r400 = TRUE;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x7100:
        case 0x7101:
        case 0x7102:
        case 0x7103:
        case 0x7104:
        case 0x7105:
        case 0x7106:
        case 0x7108:
        case 0x7109:
        case 0x710A:
        case 0x710B:
        case 0x710C:
        case 0x710E:
        case 0x710F:
            caps->family = CHIP_FAMILY_R520;
            caps->num_vert_fpus = 8;
            caps->is_r500 = TRUE;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x7140:
        case 0x7141:
        case 0x7142:
        case 0x7143:
        case 0x7144:
        case 0x7145:
        case 0x7146:
        case 0x7147:
        case 0x7149:
        case 0x714A:
        case 0x714B:
        case 0x714C:
        case 0x714D:
        case 0x714E:
        case 0x714F:
        case 0x7151:
        case 0x7152:
        case 0x7153:
        case 0x715E:
        case 0x715F:
        case 0x7180:
        case 0x7181:
        case 0x7183:
        case 0x7186:
        case 0x7187:
        case 0x7188:
        case 0x718A:
        case 0x718B:
        case 0x718C:
        case 0x718D:
        case 0x718F:
        case 0x7193:
        case 0x7196:
        case 0x719B:
        case 0x719F:
        case 0x7200:
        case 0x7210:
        case 0x7211:
            caps->family = CHIP_FAMILY_RV515;
            caps->num_vert_fpus = 2;
            caps->is_r500 = TRUE;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x71C0:
        case 0x71C1:
        case 0x71C2:
        case 0x71C3:
        case 0x71C4:
        case 0x71C5:
        case 0x71C6:
        case 0x71C7:
        case 0x71CD:
        case 0x71CE:
        case 0x71D2:
        case 0x71D4:
        case 0x71D5:
        case 0x71D6:
        case 0x71DA:
        case 0x71DE:
            caps->family = CHIP_FAMILY_RV530;
            caps->num_vert_fpus = 5;
            caps->is_r500 = TRUE;
            /*caps->hiz_ram = RV530_HIZ_LIMIT;*/
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x7240:
        case 0x7243:
        case 0x7244:
        case 0x7245:
        case 0x7246:
        case 0x7247:
        case 0x7248:
        case 0x7249:
        case 0x724A:
        case 0x724B:
        case 0x724C:
        case 0x724D:
        case 0x724E:
        case 0x724F:
        case 0x7284:
            caps->family = CHIP_FAMILY_R580;
            caps->num_vert_fpus = 8;
            caps->is_r500 = TRUE;
            caps->hiz_ram = RV530_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x7280:
            caps->family = CHIP_FAMILY_RV570;
            caps->num_vert_fpus = 8;
            caps->is_r500 = TRUE;
            caps->hiz_ram = RV530_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        case 0x7281:
        case 0x7283:
        case 0x7287:
        case 0x7288:
        case 0x7289:
        case 0x728B:
        case 0x728C:
        case 0x7290:
        case 0x7291:
        case 0x7293:
        case 0x7297:
            caps->family = CHIP_FAMILY_RV560;
            caps->num_vert_fpus = 8;
            caps->is_r500 = TRUE;
            caps->hiz_ram = RV530_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
            break;

        default:
            fprintf(stderr, "r300: Warning: Unknown chipset 0x%x\n",
                    caps->pci_id);
d129 3
d133 1
d135 6
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d27 2
d36 2
a37 1
    caps->num_vert_fpus = 4;
d39 1
a43 1

d51 3
d65 3
d85 1
d97 3
d105 3
d120 1
d126 1
d131 2
d148 2
d164 2
d178 2
d191 2
d203 2
d222 2
d230 1
d237 1
d244 1
d251 1
d259 2
d269 2
d280 2
d301 2
d346 2
d369 2
d391 2
d397 1
a397 1
            caps->num_vert_fpus = 5;
d399 2
d415 1
a415 1
            caps->num_vert_fpus = 5;
d417 2
d422 2
a423 3
            debug_printf("r300: Warning: Unknown chipset 0x%x\n",
                caps->pci_id);
            break;
d425 3
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a26 2
#include <stdio.h>

d34 1
a34 2
    caps->num_vert_fpus = 2;
    caps->num_tex_units = 16;
a35 1
    caps->hiz_ram = 0;
d40 1
a47 3
            caps->num_vert_fpus = 4;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a58 3
            caps->num_vert_fpus = 4;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a75 1
            caps->zmask_ram = RV3xx_ZMASK_SIZE;
a86 3
            caps->num_vert_fpus = 4;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a91 3
            caps->num_vert_fpus = 4;
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a103 1
            caps->zmask_ram = RV3xx_ZMASK_SIZE;
a108 1
        case 0x3155:
a112 2
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = RV3xx_ZMASK_SIZE;
a127 2
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a141 2
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a153 2
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a164 2
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a174 2
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a191 2
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a197 1
            caps->zmask_ram = RV3xx_ZMASK_SIZE;
a203 1
            caps->zmask_ram = RV3xx_ZMASK_SIZE;
a209 1
            caps->zmask_ram = RV3xx_ZMASK_SIZE;
a215 1
            caps->zmask_ram = RV3xx_ZMASK_SIZE;
a222 2
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a230 2
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a239 2
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a258 2
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a301 2
            caps->hiz_ram = R300_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a322 2
            /*caps->hiz_ram = RV530_HIZ_LIMIT;*/
            caps->zmask_ram = PIPE_ZMASK_SIZE;
a342 2
            caps->hiz_ram = RV530_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
d347 1
a347 1
            caps->num_vert_fpus = 8;
a348 2
            caps->hiz_ram = RV530_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
d363 1
a363 1
            caps->num_vert_fpus = 8;
a364 2
            caps->hiz_ram = RV530_HIZ_LIMIT;
            caps->zmask_ram = PIPE_ZMASK_SIZE;
d368 3
a370 2
            fprintf(stderr, "r300: Warning: Unknown chipset 0x%x\n",
                    caps->pci_id);
a371 3

    caps->is_rv350 = caps->family >= CHIP_FAMILY_RV350;
    caps->dxtc_swizzle = caps->is_r400 || caps->is_r500;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a2 1
 * Copyright 2011 Marek Olšák <maraeo@@gmail.com>
a23 1
#include "../../winsys/radeon/drm/radeon_winsys.h"
a25 2
#include "util/u_memory.h"
#include "os/os_process.h"
a27 1
#include <errno.h>
d32 2
a33 1
static void r300_apply_hyperz_blacklist(struct r300_capabilities* caps)
d35 268
a302 21
    static const char *list[] = {
        "X",    /* the DDX or indirect rendering */
        "Xorg", /* (alternative name) */
        "check_gl_texture_size", /* compiz */
        "Compiz",
        "gnome-session-check-accelerated-helper",
        "gnome-shell",
        "kwin_opengl_test",
        "kwin",
        "firefox",
    };
    int i;
    char proc_name[128];
    
    if (!os_get_process_name(proc_name, sizeof(proc_name)))
        return;

    for (i = 0; i < Elements(list); i++) {
        if (strcmp(list[i], proc_name) == 0) {
            caps->zmask_ram = 0;
            caps->hiz_ram = 0;
a303 3
        }
    }
}
d305 44
a348 16
/* Parse a PCI ID and fill an r300_capabilities struct with information. */
void r300_parse_chipset(uint32_t pci_id, struct r300_capabilities* caps)
{
    switch (pci_id) {
#define CHIPSET(pci_id, name, chipfamily) \
        case pci_id: \
            caps->family = CHIP_##chipfamily; \
            break;
#include "pci_ids/r300_pci_ids.h"
#undef CHIPSET

    default:
        fprintf(stderr, "r300: Warning: Unknown chipset 0x%x\nAborting...",
                pci_id);
        abort();
    }
d350 22
a371 5
    /* Defaults. */
    caps->high_second_pipe = FALSE;
    caps->num_vert_fpus = 0;
    caps->hiz_ram = 0;
    caps->zmask_ram = 0;
d373 21
d395 7
a401 71
    switch (caps->family) {
    case CHIP_R300:
    case CHIP_R350:
        caps->high_second_pipe = TRUE;
        caps->num_vert_fpus = 4;
        caps->hiz_ram = R300_HIZ_LIMIT;
        caps->zmask_ram = PIPE_ZMASK_SIZE;
        break;

    case CHIP_RV350:
    case CHIP_RV370:
        caps->high_second_pipe = TRUE;
        caps->num_vert_fpus = 2;
        caps->zmask_ram = RV3xx_ZMASK_SIZE;
        break;

    case CHIP_RV380:
        caps->high_second_pipe = TRUE;
        caps->num_vert_fpus = 2;
        caps->hiz_ram = R300_HIZ_LIMIT;
        caps->zmask_ram = RV3xx_ZMASK_SIZE;
        break;

    case CHIP_RS400:
    case CHIP_RS600:
    case CHIP_RS690:
    case CHIP_RS740:
        break;

    case CHIP_RC410:
    case CHIP_RS480:
        caps->zmask_ram = RV3xx_ZMASK_SIZE;
        break;

    case CHIP_R420:
    case CHIP_R423:
    case CHIP_R430:
    case CHIP_R480:
    case CHIP_R481:
    case CHIP_RV410:
        caps->num_vert_fpus = 6;
        caps->hiz_ram = R300_HIZ_LIMIT;
        caps->zmask_ram = PIPE_ZMASK_SIZE;
        break;

    case CHIP_R520:
        caps->num_vert_fpus = 8;
        caps->hiz_ram = R300_HIZ_LIMIT;
        caps->zmask_ram = PIPE_ZMASK_SIZE;
        break;

    case CHIP_RV515:
        caps->num_vert_fpus = 2;
        caps->hiz_ram = R300_HIZ_LIMIT;
        caps->zmask_ram = PIPE_ZMASK_SIZE;
        break;

    case CHIP_RV530:
        caps->num_vert_fpus = 5;
        caps->hiz_ram = RV530_HIZ_LIMIT;
        caps->zmask_ram = PIPE_ZMASK_SIZE;
        break;

    case CHIP_R580:
    case CHIP_RV560:
    case CHIP_RV570:
        caps->num_vert_fpus = 8;
        caps->hiz_ram = RV530_HIZ_LIMIT;
        caps->zmask_ram = PIPE_ZMASK_SIZE;
        break;
    }
d403 17
a419 8
    caps->num_tex_units = 16;
    caps->is_r400 = caps->family >= CHIP_R420 && caps->family < CHIP_RV515;
    caps->is_r500 = caps->family >= CHIP_RV515;
    caps->is_rv350 = caps->family >= CHIP_RV350;
    caps->z_compress = caps->is_rv350 ? R300_ZCOMP_8X8 : R300_ZCOMP_4X4;
    caps->dxtc_swizzle = caps->is_r400 || caps->is_r500;
    caps->has_us_format = caps->family == CHIP_R520;
    caps->has_tcl = caps->num_vert_fpus > 0;
d421 3
a423 2
    if (caps->has_tcl) {
        caps->has_tcl = debug_get_bool_option("RADEON_NO_TCL", FALSE) ? FALSE : TRUE;
d426 2
a427 1
    r300_apply_hyperz_blacklist(caps);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a86 1
    caps->has_cmask = FALSE;
a93 1
        caps->has_cmask = TRUE; /* guessed because there is also HiZ */
a107 1
        caps->has_cmask = TRUE; /* guessed because there is also HiZ */
a129 1
        caps->has_cmask = TRUE; /* guessed because there is also HiZ */
a135 1
        caps->has_cmask = TRUE;
a141 1
        caps->has_cmask = TRUE;
a147 1
        caps->has_cmask = TRUE;
a155 1
        caps->has_cmask = TRUE;
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d25 1
a25 1
#include "radeon/drm/radeon_winsys.h"
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d25 1
a25 1
#include "../../winsys/radeon/drm/radeon_winsys.h"
@


