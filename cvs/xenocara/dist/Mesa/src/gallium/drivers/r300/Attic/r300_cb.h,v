head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.32;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2013.09.05.14.00.56;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.58;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright 2008 Corbin Simpson <MostAwesomeDude@@gmail.com>
 * Copyright 2010 Marek Olšák <maraeo@@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHOR(S) AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE. */

/**
 * This file contains macros for building command buffers in memory.
 *
 * Use NEW_CB for buffers with a varying size and it will also allocate
 * the buffer.
 * Use BEGIN_CB for arrays with a static size.
 *
 * Example:
 *
 *     uint32_t cb[3];
 *     CB_LOCALS;
 *
 *     BEGIN_CB(cb, 3);
 *     OUT_CB_REG_SEQ(R500_RB3D_CONSTANT_COLOR_AR, 2);
 *     OUT_CB(blend_color_red_alpha);
 *     OUT_CB(blend_color_green_blue);
 *     END_CB;
 *
 * And later:
 *
 *     CS_LOCALS;
 *     WRITE_CS_TABLE(cb, 3);
 *
 * Or using a little slower variant:
 *
 *     CS_LOCALS;
 *     BEGIN_CS(cb, 3);
 *     OUT_CS_TABLE(cb, 3);
 *     END_CS;
 */

#ifndef R300_CB_H
#define R300_CB_H

#include "r300_reg.h"

/* Yes, I know macros are ugly. However, they are much prettier than the code
 * that they neatly hide away, and don't have the cost of function setup, so
 * we're going to use them. */

/**
 * Command buffer setup.
 */

#ifdef DEBUG

#define CB_LOCALS \
    int cs_count = 0; \
    uint32_t *cs_ptr = NULL; \
    (void) cs_count; (void) cs_ptr

#define BEGIN_CB(ptr, size) do { \
    assert(sizeof(*(ptr)) == sizeof(uint32_t)); \
    cs_count = (size); \
    cs_ptr = (ptr); \
} while (0)

#define NEW_CB(ptr, size) \
    do { \
    assert(sizeof(*(ptr)) == sizeof(uint32_t)); \
    cs_count = (size); \
    cs_ptr = (ptr) = malloc((size) * sizeof(uint32_t)); \
} while (0)

#define END_CB do { \
    if (cs_count != 0) \
        debug_printf("r300: Warning: cs_count off by %d at (%s, %s:%i)\n", \
                     cs_count, __FUNCTION__, __FILE__, __LINE__); \
} while (0)

#define CB_USED_DW(x) cs_count -= x

#else

#define CB_LOCALS \
    uint32_t *cs_ptr = NULL; (void) cs_ptr

#define NEW_CB(ptr, size) \
    cs_ptr = (ptr) = malloc((size) * sizeof(uint32_t))

#define BEGIN_CB(ptr, size) cs_ptr = (ptr)
#define END_CB
#define CB_USED_DW(x)

#endif


/**
 * Storing pure DWORDs.
 */

#define OUT_CB(value) do { \
    *cs_ptr = (value); \
    cs_ptr++; \
    CB_USED_DW(1); \
} while (0)

#define OUT_CB_TABLE(values, count) do { \
    memcpy(cs_ptr, values, count * sizeof(uint32_t)); \
    cs_ptr += count; \
    CB_USED_DW(count); \
} while (0)

#define OUT_CB_32F(value) \
    OUT_CB(fui(value));

#define OUT_CB_REG(register, value) do { \
    assert(register); \
    OUT_CB(CP_PACKET0(register, 0)); \
    OUT_CB(value); \
} while (0)

/* Note: This expects count to be the number of registers,
 * not the actual packet0 count! */
#define OUT_CB_REG_SEQ(register, count) do { \
    assert(register); \
    OUT_CB(CP_PACKET0(register, (count) - 1)); \
} while (0)

#define OUT_CB_ONE_REG(register, count) do { \
    assert(register); \
    OUT_CB(CP_PACKET0(register, (count) - 1) | RADEON_ONE_REG_WR); \
} while (0)

#define OUT_CB_PKT3(op, count) \
    OUT_CB(CP_PACKET3(op, count))

#endif /* R300_CB_H */
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d85 1
a85 1
    cs_ptr = (ptr) = (uint32_t*)malloc((size) * sizeof(uint32_t)); \
d102 1
a102 1
    cs_ptr = (ptr) = (uint32_t*)malloc((size) * sizeof(uint32_t))
@


1.1
log
@Initial revision
@
text
@a63 7
#ifdef DEBUG
#define CB_DEBUG(x) x
#else
#define CB_DEBUG(x)
#endif


d68 2
d71 1
a71 1
    CB_DEBUG(int cs_count = 0;) \
d73 1
a73 1
    CB_DEBUG((void) cs_count;) (void) cs_ptr;
d75 4
a78 4
#define NEW_CB(ptr, size) do { \
    assert(sizeof(*ptr) == sizeof(uint32_t)); \
    cs_ptr = (ptr) = (uint32_t*)malloc((size) * sizeof(uint32_t)); \
    CB_DEBUG(cs_count = size;) \
d81 5
a85 4
#define BEGIN_CB(ptr, size) do { \
    assert(sizeof(*ptr) == sizeof(uint32_t)); \
    cs_ptr = ptr; \
    CB_DEBUG(cs_count = size;) \
d89 1
a89 1
    CB_DEBUG(if (cs_count != 0) \
d91 1
a91 1
                     cs_count, __FUNCTION__, __FILE__, __LINE__);) \
d94 16
d118 1
a118 1
    CB_DEBUG(cs_count--;) \
d124 1
a124 1
    CB_DEBUG(cs_count -= count;) \
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d64 7
a74 2
#ifdef DEBUG

d76 1
a76 1
    int cs_count = 0; \
d78 1
a78 1
    (void) cs_count; (void) cs_ptr
d80 4
a83 4
#define BEGIN_CB(ptr, size) do { \
    assert(sizeof(*(ptr)) == sizeof(uint32_t)); \
    cs_count = (size); \
    cs_ptr = (ptr); \
d86 4
a89 5
#define NEW_CB(ptr, size) \
    do { \
    assert(sizeof(*(ptr)) == sizeof(uint32_t)); \
    cs_count = (size); \
    cs_ptr = (ptr) = malloc((size) * sizeof(uint32_t)); \
d93 1
a93 1
    if (cs_count != 0) \
d95 1
a95 1
                     cs_count, __FUNCTION__, __FILE__, __LINE__); \
a97 16
#define CB_USED_DW(x) cs_count -= x

#else

#define CB_LOCALS \
    uint32_t *cs_ptr = NULL; (void) cs_ptr

#define NEW_CB(ptr, size) \
    cs_ptr = (ptr) = malloc((size) * sizeof(uint32_t))

#define BEGIN_CB(ptr, size) cs_ptr = (ptr)
#define END_CB
#define CB_USED_DW(x)

#endif

d106 1
a106 1
    CB_USED_DW(1); \
d112 1
a112 1
    CB_USED_DW(count); \
@

