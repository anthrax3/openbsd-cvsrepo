head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.32;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.54;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.57;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.59;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.06;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright 2008 Corbin Simpson <MostAwesomeDude@@gmail.com>
 * Copyright 2010 Marek Olšák <maraeo@@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHOR(S) AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE. */

#include "draw/draw_context.h"
#include "draw/draw_private.h"

#include "util/u_simple_list.h"
#include "util/u_upload_mgr.h"

#include "os/os_time.h"

#include "r300_context.h"
#include "r300_cs.h"
#include "r300_emit.h"


static void r300_flush_and_cleanup(struct r300_context *r300, unsigned flags,
                                   struct pipe_fence_handle **fence)
{
    struct r300_atom *atom;

    r300_emit_hyperz_end(r300);
    r300_emit_query_end(r300);
    if (r300->screen->caps.is_r500)
        r500_emit_index_bias(r300, 0);

    /* The DDX doesn't set these regs. */
    if (r300->screen->info.drm_minor >= 6) {
        CS_LOCALS(r300);
        OUT_CS_REG_SEQ(R300_GB_MSPOS0, 2);
        OUT_CS(0x66666666);
        OUT_CS(0x6666666);
    }

    r300->flush_counter++;
    r300->rws->cs_flush(r300->cs, flags, fence, 0);
    r300->dirty_hw = 0;

    /* New kitchen sink, baby. */
    foreach_atom(r300, atom) {
        if (atom->state || atom->allow_null_state) {
            r300_mark_atom_dirty(r300, atom);
        }
    }
    r300->vertex_arrays_dirty = TRUE;

    /* Unmark HWTCL state for SWTCL. */
    if (!r300->screen->caps.has_tcl) {
        r300->vs_state.dirty = FALSE;
        r300->vs_constants.dirty = FALSE;
        r300->clip_state.dirty = FALSE;
    }
}

void r300_flush(struct pipe_context *pipe,
                unsigned flags,
                struct pipe_fence_handle **fence)
{
    struct r300_context *r300 = r300_context(pipe);

    if (r300->screen->info.drm_minor >= 12) {
        flags |= RADEON_FLUSH_KEEP_TILING_FLAGS;
    }

    if (r300->dirty_hw) {
        r300_flush_and_cleanup(r300, flags, fence);
    } else {
        if (fence) {
            /* We have to create a fence object, but the command stream is empty
             * and we cannot emit an empty CS. Let's write to some reg. */
            CS_LOCALS(r300);
            OUT_CS_REG(RB3D_COLOR_CHANNEL_MASK, 0);
            r300->rws->cs_flush(r300->cs, flags, fence, 0);
        } else {
            /* Even if hw is not dirty, we should at least reset the CS in case
             * the space checking failed for the first draw operation. */
            r300->rws->cs_flush(r300->cs, flags, NULL, 0);
        }
    }

    /* Update Hyper-Z status. */
    if (r300->hyperz_enabled) {
        /* If there was a Z clear, keep Hyper-Z access. */
        if (r300->num_z_clears) {
            r300->hyperz_time_of_last_flush = os_time_get();
            r300->num_z_clears = 0;
        } else if (r300->hyperz_time_of_last_flush - os_time_get() > 2000000) {
            /* If there hasn't been a Z clear for 2 seconds, revoke Hyper-Z access. */
            r300->hiz_in_use = FALSE;

            /* Decompress the Z buffer. */
            if (r300->zmask_in_use) {
                if (r300->locked_zbuffer) {
                    r300_decompress_zmask_locked(r300);
                } else {
                    r300_decompress_zmask(r300);
                }

                if (fence && *fence)
                    r300->rws->fence_reference(fence, NULL);
                r300_flush_and_cleanup(r300, flags, fence);
            }

            /* Revoke Hyper-Z access, so that some other process can take it. */
            r300->rws->cs_request_feature(r300->cs, RADEON_FID_R300_HYPERZ_ACCESS,
                                          FALSE);
            r300->hyperz_enabled = FALSE;
        }
    }
}

static void r300_flush_wrapped(struct pipe_context *pipe,
                               struct pipe_fence_handle **fence,
                               unsigned flags)
{
    r300_flush(pipe,
               flags & PIPE_FLUSH_END_OF_FRAME ? RADEON_FLUSH_END_OF_FRAME : 0,
               fence);
}

void r300_init_flush_functions(struct r300_context* r300)
{
    r300->context.flush = r300_flush_wrapped;
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d37 2
a38 1
static void r300_flush_and_cleanup(struct r300_context *r300, unsigned flags)
d56 1
a56 1
    r300->rws->cs_flush(r300->cs, flags, 0);
a79 1
    struct pb_buffer **rfence = (struct pb_buffer**)fence;
a84 10
    if (rfence) {
        /* Create a fence, which is a dummy BO. */
        *rfence = r300->rws->buffer_create(r300->rws, 1, 1, TRUE,
                                           RADEON_DOMAIN_GTT);
        /* Add the fence as a dummy relocation. */
        r300->rws->cs_add_reloc(r300->cs,
                                r300->rws->buffer_get_cs_handle(*rfence),
                                RADEON_USAGE_READWRITE, RADEON_DOMAIN_GTT);
    }

d86 1
a86 1
        r300_flush_and_cleanup(r300, flags);
d88 1
a88 1
        if (rfence) {
d93 1
a93 1
            r300->rws->cs_flush(r300->cs, flags, 0);
d97 1
a97 1
            r300->rws->cs_flush(r300->cs, flags, 0);
d119 3
a121 1
                r300_flush_and_cleanup(r300, flags);
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d46 8
d55 1
a55 1
    r300->rws->cs_flush(r300->cs, flags);
d70 1
d81 3
a83 2
    if (r300->draw && !r300->draw_vbo_locked)
	r300_draw_flush_vbuf(r300);
d87 1
a87 3
        *rfence = r300->rws->buffer_create(r300->rws, 1, 1,
                                           PIPE_BIND_VERTEX_BUFFER,
                                           PIPE_USAGE_STATIC,
d92 1
a92 1
                                RADEON_DOMAIN_GTT, RADEON_DOMAIN_GTT);
d103 1
a103 1
            r300->rws->cs_flush(r300->cs, flags);
d107 1
a107 1
            r300->rws->cs_flush(r300->cs, flags);
d112 18
a129 14
    if (r300->num_z_clears) {
        r300->hyperz_time_of_last_flush = os_time_get();
    } else if (!r300->hyperz_time_of_last_flush > 2000000) {
        /* 2 seconds without a Z clear pretty much means a dead context
         * for HyperZ. */

        r300->hiz_in_use = FALSE;

        /* Decompress Z buffer. */
        if (r300->zmask_in_use) {
            if (r300->locked_zbuffer) {
                r300_decompress_zmask_locked(r300);
            } else {
                r300_decompress_zmask(r300);
d132 4
a135 1
            r300_flush_and_cleanup(r300, flags);
a136 4

        /* Release HyperZ. */
        r300->rws->cs_request_feature(r300->cs, RADEON_FID_HYPERZ_RAM_ACCESS,
                                      FALSE);
a137 1
    r300->num_z_clears = 0;
d141 2
a142 1
                               struct pipe_fence_handle **fence)
d144 3
a146 1
    r300_flush(pipe, 0, fence);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d30 2
d36 2
a37 3
static void r300_flush(struct pipe_context* pipe,
                       unsigned flags,
                       struct pipe_fence_handle** fence)
a38 2
    struct r300_context *r300 = r300_context(pipe);
    struct r300_query *query;
a39 1
    struct r300_fence **rfence = (struct r300_fence**)fence;
d41 30
a70 2
    u_upload_flush(r300->upload_vb);
    u_upload_flush(r300->upload_ib);
d75 12
d88 30
a117 13
        r300_emit_hyperz_end(r300);
        r300_emit_query_end(r300);
        if (r300->screen->caps.index_bias_supported)
            r500_emit_index_bias(r300, 0);

        r300->flush_counter++;
        r300->rws->cs_flush(r300->cs);
        r300->dirty_hw = 0;

        /* New kitchen sink, baby. */
        foreach_atom(r300, atom) {
            if (atom->state || atom->allow_null_state) {
                r300_mark_atom_dirty(r300, atom);
a118 1
        }
d120 1
a120 4
        /* Unmark HWTCL state for SWTCL. */
        if (!r300->screen->caps.has_tcl) {
            r300->vs_state.dirty = FALSE;
            r300->vs_constants.dirty = FALSE;
d123 3
a125 1
        r300->validate_buffers = TRUE;
d127 2
d130 4
a133 11
    /* reset flushed query */
    foreach(query, &r300->query_list) {
        query->flushed = TRUE;
    }

    /* Create a new fence. */
    if (rfence) {
        *rfence = CALLOC_STRUCT(r300_fence);
        pipe_reference_init(&(*rfence)->reference, 1);
        (*rfence)->ctx = r300;
    }
d138 1
a138 1
    r300->context.flush = r300_flush;
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d3 1
d28 1
a32 1
#include "r300_flush.h"
d41 1
d43 2
a44 9
    CS_LOCALS(r300);
    (void) cs_count;
    /* We probably need to flush Draw, but we may have been called from
     * within Draw. This feels kludgy, but it might be the best thing.
     *
     * Of course, the best thing is to kill Draw with fire. :3 */
    if (r300->draw && !r300->draw->flushing) {
        draw_flush(r300->draw);
    }
d46 2
a47 1
    r300_emit_query_end(r300);
d50 7
a56 2
        FLUSH_CS;
        r300->dirty_state = R300_NEW_KITCHEN_SINK;
d60 3
a62 3
        foreach(atom, &r300->atom_list) {
            if (atom->state) {
                atom->dirty = TRUE;
d65 8
d79 7
a86 1

@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a2 1
 * Copyright 2010 Marek Olšák <maraeo@@gmail.com>
a26 1
#include "util/u_upload_mgr.h"
d31 1
a39 1
    struct r300_fence **rfence = (struct r300_fence**)fence;
d41 9
a49 2
    u_upload_flush(r300->upload_vb);
    u_upload_flush(r300->upload_ib);
d51 1
a51 2
    if (r300->draw && !r300->draw_vbo_locked)
	r300_draw_flush_vbuf(r300);
d54 2
a55 7
        r300_emit_hyperz_end(r300);
        r300_emit_query_end(r300);
        if (r300->screen->caps.index_bias_supported)
            r500_emit_index_bias(r300, 0);

        r300->flush_counter++;
        r300->rws->cs_flush(r300->cs);
d59 3
a61 3
        foreach_atom(r300, atom) {
            if (atom->state || atom->allow_null_state) {
                r300_mark_atom_dirty(r300, atom);
a63 8

        /* Unmark HWTCL state for SWTCL. */
        if (!r300->screen->caps.has_tcl) {
            r300->vs_state.dirty = FALSE;
            r300->vs_constants.dirty = FALSE;
        }

        r300->validate_buffers = TRUE;
d70 1
a71 7
    /* Create a new fence. */
    if (rfence) {
        *rfence = CALLOC_STRUCT(r300_fence);
        pipe_reference_init(&(*rfence)->reference, 1);
        (*rfence)->ctx = r300;
    }
}
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a29 2
#include "os/os_time.h"

d34 3
a36 2

static void r300_flush_and_cleanup(struct r300_context *r300, unsigned flags)
d38 2
d41 4
d46 19
a64 12
    r300_emit_hyperz_end(r300);
    r300_emit_query_end(r300);
    if (r300->screen->caps.is_r500)
        r500_emit_index_bias(r300, 0);

    /* The DDX doesn't set these regs. */
    if (r300->screen->info.drm_minor >= 6) {
        CS_LOCALS(r300);
        OUT_CS_REG_SEQ(R300_GB_MSPOS0, 2);
        OUT_CS(0x66666666);
        OUT_CS(0x6666666);
    }
d66 4
a69 8
    r300->flush_counter++;
    r300->rws->cs_flush(r300->cs, flags, 0);
    r300->dirty_hw = 0;

    /* New kitchen sink, baby. */
    foreach_atom(r300, atom) {
        if (atom->state || atom->allow_null_state) {
            r300_mark_atom_dirty(r300, atom);
a70 2
    }
    r300->vertex_arrays_dirty = TRUE;
d72 1
a72 5
    /* Unmark HWTCL state for SWTCL. */
    if (!r300->screen->caps.has_tcl) {
        r300->vs_state.dirty = FALSE;
        r300->vs_constants.dirty = FALSE;
        r300->clip_state.dirty = FALSE;
a73 8
}

void r300_flush(struct pipe_context *pipe,
                unsigned flags,
                struct pipe_fence_handle **fence)
{
    struct r300_context *r300 = r300_context(pipe);
    struct pb_buffer **rfence = (struct pb_buffer**)fence;
d75 3
a77 2
    if (r300->screen->info.drm_minor >= 12) {
        flags |= RADEON_FLUSH_KEEP_TILING_FLAGS;
d80 1
d82 3
a84 7
        /* Create a fence, which is a dummy BO. */
        *rfence = r300->rws->buffer_create(r300->rws, 1, 1, TRUE,
                                           RADEON_DOMAIN_GTT);
        /* Add the fence as a dummy relocation. */
        r300->rws->cs_add_reloc(r300->cs,
                                r300->rws->buffer_get_cs_handle(*rfence),
                                RADEON_USAGE_READWRITE, RADEON_DOMAIN_GTT);
a85 53

    if (r300->dirty_hw) {
        r300_flush_and_cleanup(r300, flags);
    } else {
        if (rfence) {
            /* We have to create a fence object, but the command stream is empty
             * and we cannot emit an empty CS. Let's write to some reg. */
            CS_LOCALS(r300);
            OUT_CS_REG(RB3D_COLOR_CHANNEL_MASK, 0);
            r300->rws->cs_flush(r300->cs, flags, 0);
        } else {
            /* Even if hw is not dirty, we should at least reset the CS in case
             * the space checking failed for the first draw operation. */
            r300->rws->cs_flush(r300->cs, flags, 0);
        }
    }

    /* Update Hyper-Z status. */
    if (r300->hyperz_enabled) {
        /* If there was a Z clear, keep Hyper-Z access. */
        if (r300->num_z_clears) {
            r300->hyperz_time_of_last_flush = os_time_get();
            r300->num_z_clears = 0;
        } else if (r300->hyperz_time_of_last_flush - os_time_get() > 2000000) {
            /* If there hasn't been a Z clear for 2 seconds, revoke Hyper-Z access. */
            r300->hiz_in_use = FALSE;

            /* Decompress the Z buffer. */
            if (r300->zmask_in_use) {
                if (r300->locked_zbuffer) {
                    r300_decompress_zmask_locked(r300);
                } else {
                    r300_decompress_zmask(r300);
                }

                r300_flush_and_cleanup(r300, flags);
            }

            /* Revoke Hyper-Z access, so that some other process can take it. */
            r300->rws->cs_request_feature(r300->cs, RADEON_FID_R300_HYPERZ_ACCESS,
                                          FALSE);
            r300->hyperz_enabled = FALSE;
        }
    }
}

static void r300_flush_wrapped(struct pipe_context *pipe,
                               struct pipe_fence_handle **fence,
                               unsigned flags)
{
    r300_flush(pipe,
               flags & PIPE_FLUSH_END_OF_FRAME ? RADEON_FLUSH_END_OF_FRAME : 0,
               fence);
d90 1
a90 1
    r300->context.flush = r300_flush_wrapped;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d37 1
a37 2
static void r300_flush_and_cleanup(struct r300_context *r300, unsigned flags,
                                   struct pipe_fence_handle **fence)
d55 1
a55 1
    r300->rws->cs_flush(r300->cs, flags, fence, 0);
d79 1
d85 10
d96 1
a96 1
        r300_flush_and_cleanup(r300, flags, fence);
d98 1
a98 1
        if (fence) {
d103 1
a103 1
            r300->rws->cs_flush(r300->cs, flags, fence, 0);
d107 1
a107 1
            r300->rws->cs_flush(r300->cs, flags, NULL, 0);
d129 1
a129 3
                if (fence && *fence)
                    r300->rws->fence_reference(fence, NULL);
                r300_flush_and_cleanup(r300, flags, fence);
@


