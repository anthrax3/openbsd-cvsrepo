head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.2
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.23.05.17.32;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2015.07.29.05.47.25;	author mpi;	state Exp;
branches;
next	1.7;
commitid	7LgDWgovbCk9WPgF;

1.7
date	2015.02.20.23.09.52;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.54;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.56;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.11.58;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.06;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.08.00;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.45.10;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright 2008 Corbin Simpson <MostAwesomeDude@@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHOR(S) AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE. */

#ifndef R300_CONTEXT_H
#define R300_CONTEXT_H

#define R300_BUFFER_ALIGNMENT 64

#include "draw/draw_vertex.h"

#include "util/u_blitter.h"

#include "pipe/p_context.h"
#include "util/u_inlines.h"
#include "util/u_transfer.h"

#include "r300_defines.h"
#include "r300_screen.h"
#include "compiler/radeon_regalloc.h"
#include "../../winsys/radeon/drm/radeon_winsys.h"

struct u_upload_mgr;
struct r300_context;
struct r300_fragment_shader;
struct r300_vertex_shader;
struct r300_stencilref_context;

enum colormask_swizzle {
    COLORMASK_ARGB,
    COLORMASK_XRGB,
    COLORMASK_BGRA,
    COLORMASK_RGBA,
    COLORMASK_RRRR,
    COLORMASK_AAAA,
    COLORMASK_GRRG,
    COLORMASK_ARRA,
    COLORMASK_BGRX,
    COLORMASK_RGBX,
    COLORMASK_NUM_SWIZZLES
};

struct r300_atom {
    /* Name, for debugging. */
    const char* name;
    /* Opaque state. */
    void* state;
    /* Emit the state to the context. */
    void (*emit)(struct r300_context*, unsigned, void*);
    /* Upper bound on number of dwords to emit. */
    unsigned size;
    /* Whether this atom should be emitted. */
    boolean dirty;
    /* Whether this atom may be emitted with state == NULL. */
    boolean allow_null_state;
};

struct r300_aa_state {
    struct r300_surface *dest;

    uint32_t aa_config;
};

struct r300_blend_state {
    struct pipe_blend_state state;

    uint32_t cb_clamp[COLORMASK_NUM_SWIZZLES][8];
    uint32_t cb_noclamp[8];
    uint32_t cb_noclamp_noalpha[8];
    uint32_t cb_no_readwrite[8];
};

struct r300_blend_color_state {
    struct pipe_blend_color state;
    uint32_t cb[3];
};

struct r300_clip_state {
    uint32_t cb[29];
};

struct r300_dsa_state {
    struct pipe_depth_stencil_alpha_state dsa;

    /* This is actually a command buffer with named dwords. */
    uint32_t cb_begin;
    uint32_t z_buffer_control;  /* R300_ZB_CNTL: 0x4f00 */
    uint32_t z_stencil_control; /* R300_ZB_ZSTENCILCNTL: 0x4f04 */
    uint32_t stencil_ref_mask;  /* R300_ZB_STENCILREFMASK: 0x4f08 */
    uint32_t cb_reg;
    uint32_t stencil_ref_bf;    /* R500_ZB_STENCILREFMASK_BF: 0x4fd4 */
    uint32_t cb_reg1;
    uint32_t alpha_value;       /* R500_FG_ALPHA_VALUE: 0x4be0 */

    /* Same, but without ZB reads and writes. */
    uint32_t cb_zb_no_readwrite[8]; /* ZB not bound */

    /* Emitted separately: */
    uint32_t alpha_function;

    /* Whether a two-sided stencil is enabled. */
    boolean two_sided;
    /* Whether a fallback should be used for a two-sided stencil ref value. */
    boolean two_sided_stencil_ref;
};

struct r300_hyperz_state {
    int flush;
    /* This is actually a command buffer with named dwords. */
    uint32_t cb_flush_begin;
    uint32_t zb_zcache_ctlstat;     /* R300_ZB_CACHE_CNTL */
    uint32_t cb_begin;
    uint32_t zb_bw_cntl;            /* R300_ZB_BW_CNTL */
    uint32_t cb_reg1;
    uint32_t zb_depthclearvalue;    /* R300_ZB_DEPTHCLEARVALUE */
    uint32_t cb_reg2;
    uint32_t sc_hyperz;             /* R300_SC_HYPERZ */
    uint32_t cb_reg3;
    uint32_t gb_z_peq_config;       /* R300_GB_Z_PEQ_CONFIG: 0x4028 */
};

struct r300_gpu_flush {
    uint32_t cb_flush_clean[6];
};

#define RS_STATE_MAIN_SIZE 27

struct r300_rs_state {
    /* Original rasterizer state. */
    struct pipe_rasterizer_state rs;
    /* Draw-specific rasterizer state. */
    struct pipe_rasterizer_state rs_draw;

    /* Command buffers. */
    uint32_t cb_main[RS_STATE_MAIN_SIZE];
    uint32_t cb_poly_offset_zb16[5];
    uint32_t cb_poly_offset_zb24[5];

    /* The index to cb_main where the cull_mode register value resides. */
    unsigned cull_mode_index;

    /* Whether polygon offset is enabled. */
    boolean polygon_offset_enable;

    /* This is emitted in the draw function. */
    uint32_t color_control;         /* R300_GA_COLOR_CONTROL: 0x4278 */
};

struct r300_rs_block {
    uint32_t vap_vtx_state_cntl;  /* R300_VAP_VTX_STATE_CNTL: 0x2180 */
    uint32_t vap_vsm_vtx_assm;    /* R300_VAP_VSM_VTX_ASSM: 0x2184 */
    uint32_t vap_out_vtx_fmt[2];  /* R300_VAP_OUTPUT_VTX_FMT_[0-1]: 0x2090 */
    uint32_t gb_enable;

    uint32_t ip[8]; /* R300_RS_IP_[0-7], R500_RS_IP_[0-7] */
    uint32_t count; /* R300_RS_COUNT */
    uint32_t inst_count; /* R300_RS_INST_COUNT */
    uint32_t inst[8]; /* R300_RS_INST_[0-7] */
};

struct r300_sampler_state {
    struct pipe_sampler_state state;

    uint32_t filter0;      /* R300_TX_FILTER0: 0x4400 */
    uint32_t filter1;      /* R300_TX_FILTER1: 0x4440 */

    /* Min/max LOD must be clamped to [0, last_level], thus
     * it's dependent on a currently bound texture */
    unsigned min_lod, max_lod;
};

struct r300_texture_format_state {
    uint32_t format0; /* R300_TX_FORMAT0: 0x4480 */
    uint32_t format1; /* R300_TX_FORMAT1: 0x44c0 */
    uint32_t format2; /* R300_TX_FORMAT2: 0x4500 */
    uint32_t tile_config; /* R300_TX_OFFSET (subset thereof) */
    uint32_t us_format0;   /* R500_US_FORMAT0_0: 0x4640 (through 15) */
};

struct r300_sampler_view {
    struct pipe_sampler_view base;

    /* For resource_copy_region. */
    unsigned width0_override;
    unsigned height0_override;

    /* Swizzles in the UTIL_FORMAT_SWIZZLE_* representation,
     * derived from base. */
    unsigned char swizzle[4];

    /* Copy of r300_texture::texture_format_state with format-specific bits
     * added. */
    struct r300_texture_format_state format;

    /* The texture cache region for this texture. */
    uint32_t texcache_region;
};

struct r300_texture_sampler_state {
    struct r300_texture_format_state format;
    uint32_t filter0;      /* R300_TX_FILTER0: 0x4400 */
    uint32_t filter1;      /* R300_TX_FILTER1: 0x4440 */
    uint32_t border_color; /* R300_TX_BORDER_COLOR: 0x45c0 */
};

struct r300_textures_state {
    /* Textures. */
    struct r300_sampler_view *sampler_views[16];
    int sampler_view_count;
    /* Sampler states. */
    struct r300_sampler_state *sampler_states[16];
    int sampler_state_count;

    /* This is the merge of the texture and sampler states. */
    unsigned count;
    uint32_t tx_enable;         /* R300_TX_ENABLE: 0x4101 */
    struct r300_texture_sampler_state regs[16];
};

struct r300_vertex_stream_state {
    /* R300_VAP_PROG_STREAK_CNTL_[0-7] */
    uint32_t vap_prog_stream_cntl[8];
    /* R300_VAP_PROG_STREAK_CNTL_EXT_[0-7] */
    uint32_t vap_prog_stream_cntl_ext[8];

    unsigned count;
};

struct r300_invariant_state {
    uint32_t cb[24];
};

struct r300_vap_invariant_state {
    uint32_t cb[11];
};

struct r300_viewport_state {
    float xscale;         /* R300_VAP_VPORT_XSCALE:  0x2098 */
    float xoffset;        /* R300_VAP_VPORT_XOFFSET: 0x209c */
    float yscale;         /* R300_VAP_VPORT_YSCALE:  0x20a0 */
    float yoffset;        /* R300_VAP_VPORT_YOFFSET: 0x20a4 */
    float zscale;         /* R300_VAP_VPORT_ZSCALE:  0x20a8 */
    float zoffset;        /* R300_VAP_VPORT_ZOFFSET: 0x20ac */
    uint32_t vte_control; /* R300_VAP_VTE_CNTL:      0x20b0 */
};

struct r300_ztop_state {
    uint32_t z_buffer_top;      /* R300_ZB_ZTOP: 0x4f14 */
};

/* The next several objects are not pure Radeon state; they inherit from
 * various Gallium classes. */

struct r300_constant_buffer {
    /* Buffer of constants */
    uint32_t *ptr;
    /* Remapping table. */
    unsigned *remap_table;
    /* const buffer base */
    uint32_t buffer_base;
};

/* Query object.
 *
 * This is not a subclass of pipe_query because pipe_query is never
 * actually fully defined. So, rather than have it as a member, and do
 * subclass-style casting, we treat pipe_query as an opaque, and just
 * trust that our state tracker does not ever mess up query objects.
 */
struct r300_query {
    /* The kind of query. Currently only OQ is supported. */
    unsigned type;
    /* The number of pipes where query results are stored. */
    unsigned num_pipes;
    /* How many results have been written, in dwords. It's incremented
     * after end_query and flush. */
    unsigned num_results;
    /* if begin has been emitted */
    boolean begin_emitted;

    /* The buffer where query results are stored. */
    struct pb_buffer *buf;
    struct radeon_winsys_cs_handle *cs_buf;
};

struct r300_surface {
    struct pipe_surface base;

    /* Winsys buffer backing the texture. */
    struct pb_buffer *buf;
    struct radeon_winsys_cs_handle *cs_buf;

    enum radeon_bo_domain domain;

    uint32_t offset;    /* COLOROFFSET or DEPTHOFFSET. */
    uint32_t pitch;     /* COLORPITCH or DEPTHPITCH. */
    uint32_t pitch_zmask; /* ZMASK_PITCH */
    uint32_t pitch_hiz;   /* HIZ_PITCH */
    uint32_t pitch_cmask; /* CMASK_PITCH */
    uint32_t format;    /* US_OUT_FMT or ZB_FORMAT. */

    /* Parameters dedicated to the CBZB clear. */
    uint32_t cbzb_width;            /* Aligned width. */
    uint32_t cbzb_height;           /* Half of the height. */
    uint32_t cbzb_midpoint_offset;  /* DEPTHOFFSET. */
    uint32_t cbzb_pitch;            /* DEPTHPITCH. */
    uint32_t cbzb_format;           /* ZB_FORMAT. */

    /* Whether the CBZB clear is allowed on the surface. */
    boolean cbzb_allowed;

    unsigned colormask_swizzle;
};

struct r300_texture_desc {
    /* Width, height, and depth.
     * Most of the time, these are equal to pipe_texture::width0, height0,
     * and depth0. However, NPOT 3D textures must have dimensions aligned
     * to POT, and this is the only case when these variables differ from
     * pipe_texture. */
    unsigned width0, height0, depth0;

    /* Buffer tiling.
     * Macrotiling is specified per-level because small mipmaps cannot
     * be macrotiled. */
    enum radeon_bo_layout microtile;
    enum radeon_bo_layout macrotile[R300_MAX_TEXTURE_LEVELS];

    /* Offsets into the buffer. */
    unsigned offset_in_bytes[R300_MAX_TEXTURE_LEVELS];

    /* Strides for each mip-level. */
    unsigned stride_in_bytes[R300_MAX_TEXTURE_LEVELS];

    /* Size of one zslice or face or 2D image based on the texture target. */
    unsigned layer_size_in_bytes[R300_MAX_TEXTURE_LEVELS];

    /* Total size of this texture, in bytes,
     * derived from the texture properties. */
    unsigned size_in_bytes;

    /**
     * If non-zero, override the natural texture layout with
     * a custom stride (in bytes).
     *
     * \note Mipmapping fails for textures with a non-natural layout!
     *
     * \sa r300_texture_get_stride
     */
    unsigned stride_in_bytes_override;

    /* Whether this texture has non-power-of-two dimensions.
     * It can be either a regular texture or a rectangle one. */
    boolean is_npot;

    /* This flag says that hardware must use the stride for addressing
     * instead of the width. */
    boolean uses_stride_addressing;

    /* Whether CBZB fast color clear is allowed on the miplevel. */
    boolean cbzb_allowed[R300_MAX_TEXTURE_LEVELS];

    /* Zbuffer compression info for each miplevel. */
    boolean zcomp8x8[R300_MAX_TEXTURE_LEVELS];
    /* If zero, then disable Z compression/HiZ. */
    unsigned zmask_dwords[R300_MAX_TEXTURE_LEVELS];
    unsigned hiz_dwords[R300_MAX_TEXTURE_LEVELS];
    /* Zmask/HiZ strides for each miplevel. */
    unsigned zmask_stride_in_pixels[R300_MAX_TEXTURE_LEVELS];
    unsigned hiz_stride_in_pixels[R300_MAX_TEXTURE_LEVELS];

    /* CMASK info for AA buffers (no mipmapping). */
    unsigned cmask_dwords;
    unsigned cmask_stride_in_pixels;
};

struct r300_resource
{
    struct u_resource b;

    /* Winsys buffer backing this resource. */
    struct pb_buffer *buf;
    struct radeon_winsys_cs_handle *cs_buf;
    enum radeon_bo_domain domain;

    /* Constant buffers and SWTCL vertex and index buffers are in user
     * memory. */
    uint8_t *malloced_buffer;

    /* Texture description (addressing, layout, special features). */
    struct r300_texture_desc tex;

    /* This is the level tiling flags were last time set for.
     * It's used to prevent redundant tiling-flags changes from happening.*/
    unsigned surface_level;
};

struct r300_vertex_element_state {
    unsigned count;
    struct pipe_vertex_element velem[PIPE_MAX_ATTRIBS];
    unsigned format_size[PIPE_MAX_ATTRIBS];

    /* The size of the vertex, in dwords. */
    unsigned vertex_size_dwords;

    struct r300_vertex_stream_state vertex_stream;
};

enum r300_hiz_func {
    HIZ_FUNC_NONE,

    /* The function, when determined, is set in stone
     * until the next HiZ clear. */

    /* MAX is written to the HiZ buffer.
     * Used for LESS, LEQUAL. */
    HIZ_FUNC_MAX,

    /* MIN is written to the HiZ buffer.
     * Used for GREATER, GEQUAL. */
    HIZ_FUNC_MIN,
};

/* For deferred fragment shader state validation. */
enum r300_fs_validity_status {
    FRAGMENT_SHADER_VALID,      /* No need to change/validate the FS. */
    FRAGMENT_SHADER_MAYBE_DIRTY,/* Validate the FS if external state was changed. */
    FRAGMENT_SHADER_DIRTY       /* Always validate the FS (if the FS was changed) */
};

struct r300_context {
    /* Parent class */
    struct pipe_context context;

    /* The interface to the windowing system, etc. */
    struct radeon_winsys *rws;
    /* The command stream. */
    struct radeon_winsys_cs *cs;
    /* Screen. */
    struct r300_screen *screen;

    /* Draw module. Used mostly for SW TCL. */
    struct draw_context* draw;
    /* Vertex buffer for SW TCL. */
    struct pb_buffer *vbo;
    struct radeon_winsys_cs_handle *vbo_cs;
    /* Offset and size into the SW TCL VBO. */
    size_t draw_vbo_offset;

    /* Accelerated blit support. */
    struct blitter_context* blitter;
    /* Stencil two-sided reference value fallback. */
    struct r300_stencilref_context *stencilref_fallback;

    /* The KIL opcode needs the first texture unit to be enabled
     * on r3xx-r4xx. In order to calm down the CS checker, we bind this
     * dummy texture there. */
    struct r300_sampler_view *texkill_sampler;

    /* When no vertex buffer is set, this one is used instead to prevent
     * hardlocks. */
    struct pipe_vertex_buffer dummy_vb;

    /* The currently active query. */
    struct r300_query *query_current;
    /* The saved query for blitter operations. */
    struct r300_query *blitter_saved_query;
    /* Query list. */
    struct r300_query query_list;

    /* Various CSO state objects. */

    /* Each atom is emitted in the order it appears here, which can affect
     * performance and stability if not handled with care. */
    /* GPU flush. */
    struct r300_atom gpu_flush;
    /* Clears must be emitted immediately after the flush. */
    /* HiZ clear */
    struct r300_atom hiz_clear;
    /* zmask clear */
    struct r300_atom zmask_clear;
    /* cmask clear */
    struct r300_atom cmask_clear;
    /* Anti-aliasing (MSAA) state. */
    struct r300_atom aa_state;
    /* Framebuffer state. */
    struct r300_atom fb_state;
    /* HyperZ state (various SC/ZB bits). */
    struct r300_atom hyperz_state;
    /* ZTOP state. */
    struct r300_atom ztop_state;
    /* Depth, stencil, and alpha state. */
    struct r300_atom dsa_state;
    /* Blend state. */
    struct r300_atom blend_state;
    /* Blend color state. */
    struct r300_atom blend_color_state;
    /* Scissor state. */
    struct r300_atom scissor_state;
    /* Sample mask. */
    struct r300_atom sample_mask;
    /* Invariant state. This must be emitted to get the engine started. */
    struct r300_atom invariant_state;
    /* Viewport state. */
    struct r300_atom viewport_state;
    /* PVS flush. */
    struct r300_atom pvs_flush;
    /* VAP invariant state. */
    struct r300_atom vap_invariant_state;
    /* Vertex stream formatting state. */
    struct r300_atom vertex_stream_state;
    /* Vertex shader. */
    struct r300_atom vs_state;
    /* User clip planes. */
    struct r300_atom clip_state;
    /* RS block state + VAP (vertex shader) output mapping state. */
    struct r300_atom rs_block_state;
    /* Rasterizer state. */
    struct r300_atom rs_state;
    /* Framebuffer state (pipelined regs). */
    struct r300_atom fb_state_pipelined;
    /* Fragment shader. */
    struct r300_atom fs;
    /* Fragment shader RC_CONSTANT_STATE variables. */
    struct r300_atom fs_rc_constant_state;
    /* Fragment shader constant buffer. */
    struct r300_atom fs_constants;
    /* Vertex shader constant buffer. */
    struct r300_atom vs_constants;
    /* Texture cache invalidate. */
    struct r300_atom texture_cache_inval;
    /* Textures state. */
    struct r300_atom textures_state;
    /* Occlusion query. */
    struct r300_atom query_start;

    /* The pointers to the first and the last atom. */
    struct r300_atom *first_dirty, *last_dirty;

    /* Vertex elements for Gallium. */
    struct r300_vertex_element_state *velems;

    /* Vertex info for Draw. */
    struct vertex_info vertex_info;

    struct pipe_stencil_ref stencil_ref;
    struct pipe_viewport_state viewport;

    /* Stream locations for SWTCL. */
    int stream_loc_notcl[16];

    /* Flag indicating whether or not the HW is dirty. */
    uint32_t dirty_hw;
    /* Whether polygon offset is enabled. */
    boolean polygon_offset_enabled;
    /* Z buffer bit depth. */
    uint32_t zbuffer_bpp;
    /* Whether rendering is conditional and should be skipped. */
    boolean skip_rendering;
    /* The flag above saved by blitter. */
    unsigned char blitter_saved_skip_rendering;
    /* Point sprites texcoord index,  1 bit per texcoord */
    int sprite_coord_enable;
    /* Whether two-sided color selection is enabled (AKA light_twoside). */
    boolean two_sided_color;
    boolean flatshade;
    /* Whether fast color clear is enabled. */
    boolean cbzb_clear;
    /* Whether fragment shader needs to be validated. */
    enum r300_fs_validity_status fs_status;
    /* Framebuffer multi-write. */
    boolean fb_multiwrite;
    unsigned num_samples;
    boolean msaa_enable;
    boolean alpha_to_one;
    boolean alpha_to_coverage;

    void *dsa_decompress_zmask;

    struct pipe_index_buffer index_buffer;
    struct pipe_vertex_buffer vertex_buffer[PIPE_MAX_ATTRIBS];
    unsigned nr_vertex_buffers;
    struct u_upload_mgr *uploader;

    struct util_slab_mempool pool_transfers;

    /* Stat counter. */
    uint64_t flush_counter;

    /* const tracking for VS */
    int vs_const_base;

    /* Vertex array state info */
    boolean vertex_arrays_dirty;
    boolean vertex_arrays_indexed;
    int vertex_arrays_offset;
    int vertex_arrays_instance_id;
    boolean instancing_enabled;

    /* Hyper-Z stats. */
    boolean hyperz_enabled;     /* Whether it owns Hyper-Z access. */
    int64_t hyperz_time_of_last_flush; /* Time of the last flush with Z clear. */
    unsigned num_z_clears;      /* Since the last flush. */

    /* ZMask state. */
    boolean zmask_in_use;       /* Whether ZMASK is enabled. */
    boolean zmask_decompress;   /* Whether ZMASK is being decompressed. */
    struct pipe_surface *locked_zbuffer; /* Unbound zbuffer which still has data in ZMASK. */

    /* HiZ state. */
    boolean hiz_in_use;         /* Whether HIZ is enabled. */
    enum r300_hiz_func hiz_func; /* HiZ function. Can be either MIN or MAX. */
    uint32_t hiz_clear_value;   /* HiZ clear value. */

    /* CMASK state. */
    boolean cmask_access;
    boolean cmask_in_use;
    uint32_t color_clear_value; /* RGBA8 or RGBA1010102 */
    uint32_t color_clear_value_ar; /* RGBA16F */
    uint32_t color_clear_value_gb; /* RGBA16F */

    /* Compiler state. */
    struct rc_regalloc_state fs_regalloc_state; /* Register allocator info for
                                                 * fragment shaders. */
};

#define foreach_atom(r300, atom) \
    for (atom = &r300->gpu_flush; atom != (&r300->query_start)+1; atom++)

#define foreach_dirty_atom(r300, atom) \
    for (atom = r300->first_dirty; atom != r300->last_dirty; atom++)

/* Convenience cast wrappers. */
static INLINE struct r300_query* r300_query(struct pipe_query* q)
{
    return (struct r300_query*)q;
}

static INLINE struct r300_surface* r300_surface(struct pipe_surface* surf)
{
    return (struct r300_surface*)surf;
}

static INLINE struct r300_resource* r300_resource(struct pipe_resource* tex)
{
    return (struct r300_resource*)tex;
}

static INLINE struct r300_context* r300_context(struct pipe_context* context)
{
    return (struct r300_context*)context;
}

static INLINE struct r300_fragment_shader *r300_fs(struct r300_context *r300)
{
    return (struct r300_fragment_shader*)r300->fs.state;
}

static INLINE void r300_mark_atom_dirty(struct r300_context *r300,
                                        struct r300_atom *atom)
{
    atom->dirty = TRUE;

    if (!r300->first_dirty) {
        r300->first_dirty = atom;
        r300->last_dirty = atom+1;
    } else {
        if (atom < r300->first_dirty)
            r300->first_dirty = atom;
        else if (atom+1 > r300->last_dirty)
            r300->last_dirty = atom+1;
    }
}

static INLINE struct pipe_surface *
r300_get_nonnull_cb(struct pipe_framebuffer_state *fb, unsigned i)
{
    if (fb->cbufs[i])
        return fb->cbufs[i];

    /* The i-th framebuffer is NULL, return any non-NULL one. */
    for (i = 0; i < fb->nr_cbufs; i++)
        if (fb->cbufs[i])
            return fb->cbufs[i];

    return NULL;
}

struct pipe_context* r300_create_context(struct pipe_screen* screen,
                                         void *priv);

/* Context initialization. */
struct draw_stage* r300_draw_stage(struct r300_context* r300);
void r300_init_blit_functions(struct r300_context *r300);
void r300_init_flush_functions(struct r300_context* r300);
void r300_init_query_functions(struct r300_context* r300);
void r300_init_render_functions(struct r300_context *r300);
void r300_init_state_functions(struct r300_context* r300);
void r300_init_resource_functions(struct r300_context* r300);

/* r300_blit.c */
void r300_decompress_zmask(struct r300_context *r300);
void r300_decompress_zmask_locked_unsafe(struct r300_context *r300);
void r300_decompress_zmask_locked(struct r300_context *r300);
bool r300_is_blit_supported(enum pipe_format format);

/* r300_flush.c */
void r300_flush(struct pipe_context *pipe,
                unsigned flags,
                struct pipe_fence_handle **fence);

/* r300_hyperz.c */
void r300_update_hyperz_state(struct r300_context* r300);

/* r300_query.c */
void r300_resume_query(struct r300_context *r300,
                       struct r300_query *query);
void r300_stop_query(struct r300_context *r300);

/* r300_render_translate.c */
void r300_translate_index_buffer(struct r300_context *r300,
                                 struct pipe_index_buffer *ib,
                                 struct pipe_resource **out_index_buffer,
                                 unsigned *index_size, unsigned index_offset,
                                 unsigned *start, unsigned count);

/* r300_render_stencilref.c */
void r300_plug_in_stencil_ref_fallback(struct r300_context *r300);

/* r300_render.c */
void r500_emit_index_bias(struct r300_context *r300, int index_bias);
void r300_blitter_draw_rectangle(struct blitter_context *blitter,
                                 int x1, int y1, int x2, int y2,
                                 float depth,
                                 enum blitter_attrib_type type,
                                 const union pipe_color_union *attrib);

/* r300_state.c */
enum r300_fb_state_change {
    R300_CHANGED_FB_STATE = 0,
    R300_CHANGED_HYPERZ_FLAG,
    R300_CHANGED_MULTIWRITE,
    R300_CHANGED_CMASK_ENABLE,
};

void r300_mark_fb_state_dirty(struct r300_context *r300,
                              enum r300_fb_state_change change);
void r300_mark_fs_code_dirty(struct r300_context *r300);

struct pipe_sampler_view *
r300_create_sampler_view_custom(struct pipe_context *pipe,
                         struct pipe_resource *texture,
                         const struct pipe_sampler_view *templ,
                         unsigned width0_override,
                         unsigned height0_override);

/* r300_state_derived.c */
void r300_update_derived_state(struct r300_context* r300);

/* r300_debug.c */
void r500_dump_rs_block(struct r300_rs_block *rs);


static INLINE boolean CTX_DBG_ON(struct r300_context * ctx, unsigned flags)
{
    return SCREEN_DBG_ON(ctx->screen, flags);
}

static INLINE void CTX_DBG(struct r300_context * ctx, unsigned flags,
                       const char * fmt, ...)
{
    if (CTX_DBG_ON(ctx, flags)) {
        va_list va;
        va_start(va, fmt);
        vfprintf(stderr, fmt, va);
        va_end(va);
    }
}

#define DBG_ON  CTX_DBG_ON
#define DBG     CTX_DBG

#endif /* R300_CONTEXT_H */
@


1.8
log
@Make the Gallium r300 works on big-endian architectures.

Diff provided by Michel Daenzer [0] as a possible solution for a
regression introduced in Mesa 9 [1].  This diff allows macppc
users to use OpenGL accelerated appplications (i.e. GNOME3).

As disucssed during c2k15 we won't try to keep this patch during
the next Mesa update.

[0] https://bugs.freedesktop.org/show_bug.cgi?id=71789
[1] http://lists.freedesktop.org/archives/mesa-dev/2013-December/050218.html

Tested by myself and ajacoutot@@, regression test and ok jsg@@
@
text
@@


1.7
log
@Merge Mesa 10.2.9
@
text
@d48 2
@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d39 1
a39 1
#include "radeon/drm/radeon_winsys.h"
a582 1
    boolean clip_halfz;
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d39 1
a39 1
#include "../../winsys/radeon/drm/radeon_winsys.h"
d583 1
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d691 14
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d26 2
a34 1
#include "util/u_vbuf_mgr.h"
d38 1
d47 12
a77 1
    uint32_t aaresolve_ctl;
d83 1
a83 1
    uint32_t cb_clamp[8];
d85 1
a94 2
    struct pipe_clip_state clip;

a102 2
    uint32_t alpha_function;    /* R300_FG_ALPHA_FUNC: 0x4bd4 */
    uint32_t cb_reg_seq;
d111 5
a115 15
    /* The same, but for FP16 alpha test. */
    uint32_t cb_begin_fp16;
    uint32_t alpha_function_fp16;    /* R300_FG_ALPHA_FUNC: 0x4bd4 */
    uint32_t cb_reg_seq_fp16;
    uint32_t z_buffer_control_fp16;  /* R300_ZB_CNTL: 0x4f00 */
    uint32_t z_stencil_control_fp16; /* R300_ZB_ZSTENCILCNTL: 0x4f04 */
    uint32_t stencil_ref_mask_fp16;  /* R300_ZB_STENCILREFMASK: 0x4f08 */
    uint32_t cb_reg_fp16;
    uint32_t stencil_ref_bf_fp16;    /* R500_ZB_STENCILREFMASK_BF: 0x4fd4 */
    uint32_t cb_reg1_fp16;
    uint32_t alpha_value_fp16;       /* R500_FG_ALPHA_VALUE: 0x4be0 */

    /* The second command buffer disables zbuffer reads and writes. */
    uint32_t cb_zb_no_readwrite[10];
    uint32_t cb_fp16_zb_no_readwrite[10];
d142 1
a142 1
#define RS_STATE_MAIN_SIZE 25
d199 4
a299 8
    /* The size of the buffer. */
    unsigned buffer_size;
    /* The domain of the buffer. */
    enum radeon_bo_domain domain;

    /* Linked list members. */
    struct r300_query* prev;
    struct r300_query* next;
d315 1
d327 2
a348 1
    unsigned stride_in_pixels[R300_MAX_TEXTURE_LEVELS];
a357 4
    /* Total size of the buffer backing this texture, in bytes.
     * It must be >= size. */
    unsigned buffer_size_in_bytes;

d387 4
d395 1
a395 1
    struct u_vbuf_resource b;
a400 1
    unsigned buf_size;
d402 3
a404 2
    /* Constant buffers are in user memory. */
    uint8_t *constant_buffer;
a408 7
    /* Registers carrying texture format data. */
    /* Only format-independent bits should be filled in. */
    struct r300_texture_format_state tx_format;

    /* Where the texture starts in the buffer. */
    unsigned tex_offset;

a418 2
    struct u_vbuf_elements *vmgr_elements;

d461 2
a462 1
    struct pipe_resource* vbo;
a464 4
    size_t draw_vbo_size;
    /* Whether the VBO must not be flushed. */
    boolean draw_vbo_locked;
    boolean draw_first_emitted;
d478 1
a478 1
    struct pipe_resource *dummy_vb;
d493 7
d516 2
a549 4
    /* HiZ clear */
    struct r300_atom hiz_clear;
    /* zmask clear */
    struct r300_atom zmask_clear;
a558 2
    struct pipe_index_buffer index_buffer;

d582 1
a582 2
    /* Whether fragment color clamping is enabled. */
    boolean frag_clamp;
d589 4
d596 4
a599 1
    struct u_vbuf_mgr *vbuf_mgr;
d630 11
d707 1
d724 2
a725 1
                                 struct pipe_resource **index_buffer,
a732 1
void r300_draw_flush_vbuf(struct r300_context *r300);
d734 5
d744 2
a745 1
    R300_CHANGED_MULTIWRITE
d751 7
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d33 1
a33 2

#include "translate/translate_cache.h"
d37 1
d68 4
a71 1
    uint32_t cb[8];
d76 1
d98 14
d114 2
a115 1
    uint32_t cb_no_readwrite[8];
a123 1
    int current_func; /* -1 after a clear before first op */
d142 1
a142 1
#define RS_STATE_MAIN_SIZE 23
d193 1
a210 5
struct r300_texture_fb_state {
    uint32_t pitch[R300_MAX_TEXTURE_LEVELS]; /* COLORPITCH or DEPTHPITCH. */
    uint32_t format; /* US_OUT_FMT or R300_ZB_FORMAT */
};

d215 1
a215 1
    uint32_t border_color;  /* R300_TX_BORDER_COLOR: 0x45c0 */
d242 1
a242 1
    uint32_t cb[20];
d246 1
a246 1
    uint32_t cb[9];
a289 2
    /* if we've flushed the query */
    boolean flushed;
d294 2
a295 2
    struct r300_winsys_buffer *buffer;
    struct r300_winsys_cs_buffer *cs_buffer;
d299 1
a299 1
    enum r300_buffer_domain domain;
a305 16
/* Fence object.
 *
 * This is a fake fence. Instead of syncing with the fence, we sync
 * with the context, which is inefficient but compliant.
 *
 * This is not a subclass of pipe_fence_handle because pipe_fence_handle is
 * never actually fully defined. So, rather than have it as a member, and do
 * subclass-style casting, we treat pipe_fence_handle as an opaque, and just
 * trust that our state tracker does not ever mess up fence objects.
 */
struct r300_fence {
    struct pipe_reference reference;
    struct r300_context *ctx;
    boolean signalled;
};

d310 2
a311 2
    struct r300_winsys_buffer *buffer;
    struct r300_winsys_cs_buffer *cs_buffer;
d313 1
a313 1
    enum r300_buffer_domain domain;
d317 2
a329 1

a332 3
    /* Parent class. */
    struct u_resource b;

d343 2
a344 2
    enum r300_buffer_tiling microtile;
    enum r300_buffer_tiling macrotile[R300_MAX_TEXTURE_LEVELS];
d384 9
d395 9
a403 2
struct r300_texture {
    struct r300_texture_desc desc;
d405 2
a406 1
    enum r300_buffer_domain domain;
d408 2
a409 3
    /* Pipe buffer backing this texture. */
    struct r300_winsys_buffer *buffer;
    struct r300_winsys_cs_buffer *cs_buffer;
a413 2
    /* All bits should be filled in. */
    struct r300_texture_fb_state fb_state;
d415 2
a416 5
    /* hyper-z memory allocs */
    struct mem_block *hiz_mem[R300_MAX_TEXTURE_LEVELS];
    struct mem_block *zmask_mem[R300_MAX_TEXTURE_LEVELS];
    boolean zmask_in_use[R300_MAX_TEXTURE_LEVELS];
    boolean hiz_in_use[R300_MAX_TEXTURE_LEVELS];
d426 1
d428 1
a428 5
    /* If (velem[i].src_format != hw_format[i]), the vertex buffer
     * referenced by this vertex element cannot be used for rendering and
     * its vertex data must be translated to hw_format[i]. */
    enum pipe_format hw_format[PIPE_MAX_ATTRIBS];
    unsigned hw_format_size[PIPE_MAX_ATTRIBS];
a432 5
    /* This might mean two things:
     * - src_format != hw_format, as discussed above.
     * - src_offset % 4 != 0. */
    boolean incompatible_layout;

d436 2
a437 3
struct r300_translate_context {
    /* Translate cache for incompatible vertex offset/stride/format fallback. */
    struct translate_cache *translate_cache;
d439 2
a440 2
    /* The vertex buffer slot containing the translated buffer. */
    unsigned vb_slot;
d442 14
a455 2
    /* Saved and new vertex element state. */
    void *saved_velems, *new_velems;
d463 1
a463 1
    struct r300_winsys_screen *rws;
d465 1
a465 1
    struct r300_winsys_cs *cs;
a469 1
    struct gallivm_state *gallivm;
a483 2
    /* For translating vertex buffers having incompatible vertex layout. */
    struct r300_translate_context tran;
a564 4
    /* Vertex buffers for Gallium. */
    struct pipe_vertex_buffer vertex_buffer[PIPE_MAX_ATTRIBS];
    int vertex_buffer_count;
    int vertex_buffer_max_index;
a566 1
    bool any_user_vbs;
d593 3
a595 5
    /* Incompatible vertex buffer layout? (misaligned stride or buffer_offset) */
    boolean incompatible_vb_layout;
#define R300_Z_COMPRESS_44 1
#define RV350_Z_COMPRESS_88 2
    int z_compression;
d597 6
a602 1
    boolean z_decomp_rd;
d604 1
a604 7
    /* two mem block managers for hiz/zmask ram space */
    struct mem_block *hiz_mm;
    struct mem_block *zmask_mm;

    /* upload managers */
    struct u_upload_mgr *upload_vb;
    struct u_upload_mgr *upload_ib;
d614 21
a634 7
    /* AOS (PACKET3_3D_LOAD_VBPNTR) command buffer for the case offset=0. */
    uint32_t aos_cb[(16 * 3 + 1) / 2];
    boolean aos_dirty;

    /* Whether any buffer (FB, textures, VBOs) has been set, but buffers
     * haven't been validated yet. */
    boolean validate_buffers;
d654 1
a654 1
static INLINE struct r300_texture* r300_texture(struct pipe_resource* tex)
d656 1
a656 1
    return (struct r300_texture*)tex;
d669 16
a687 3
void r300_finish(struct r300_context *r300);
void r300_flush_cb(void *data);

d698 11
a708 4
void r300_flush_depth_stencil(struct pipe_context *pipe,
                              struct pipe_resource *dst,
                              unsigned level,
                              unsigned layer);
a715 2
void r300_begin_vertex_translate(struct r300_context *r300);
void r300_end_vertex_translate(struct r300_context *r300);
d731 2
a732 2
    R300_CHANGED_CBZB_FLAG,
    R300_CHANGED_ZCLEAR_FLAG
d739 2
a740 15
static INLINE void r300_mark_atom_dirty(struct r300_context *r300,
                                        struct r300_atom *atom)
{
    atom->dirty = TRUE;

    if (!r300->first_dirty) {
        r300->first_dirty = atom;
        r300->last_dirty = atom+1;
    } else {
        if (atom < r300->first_dirty)
            r300->first_dirty = atom;
        if (atom+1 > r300->last_dirty)
            r300->last_dirty = atom+1;
    }
}
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d32 1
d34 3
d39 1
a40 1

d43 1
a45 2
    /* List pointers. */
    struct r300_atom *prev, *next;
d56 9
a64 2
    /* Another dirty flag that is never automatically cleared. */
    boolean always_dirty;
d68 2
a69 5
    uint32_t blend_control;       /* R300_RB3D_CBLEND: 0x4e04 */
    uint32_t alpha_blend_control; /* R300_RB3D_ABLEND: 0x4e08 */
    uint32_t color_channel_mask;  /* R300_RB3D_COLOR_CHANNEL_MASK: 0x4e0c */
    uint32_t rop;                 /* R300_RB3D_ROPCNTL: 0x4e18 */
    uint32_t dither;              /* R300_RB3D_DITHER_CTL: 0x4e50 */
d73 7
a79 5
    /* RV515 and earlier */
    uint32_t blend_color;            /* R300_RB3D_BLEND_COLOR: 0x4e10 */
    /* R520 and newer */
    uint32_t blend_color_red_alpha;  /* R500_RB3D_CONSTANT_COLOR_AR: 0x4ef8 */
    uint32_t blend_color_green_blue; /* R500_RB3D_CONSTANT_COLOR_GB: 0x4efc */
d83 4
d88 1
a88 1
    uint32_t alpha_reference;   /* R500_FG_ALPHA_VALUE: 0x4be0 */
d92 1
d94 24
d120 6
d127 1
a127 1
    /* Draw-specific rasterizer state */
d129 13
d143 1
a143 12
    uint32_t vap_control_status;    /* R300_VAP_CNTL_STATUS: 0x2140 */
    uint32_t antialiasing_config;   /* R300_GB_AA_CONFIG: 0x4020 */
    uint32_t point_size;            /* R300_GA_POINT_SIZE: 0x421c */
    uint32_t line_control;          /* R300_GA_LINE_CNTL: 0x4234 */
    float depth_scale;            /* R300_SU_POLY_OFFSET_FRONT_SCALE: 0x42a4 */
                                  /* R300_SU_POLY_OFFSET_BACK_SCALE: 0x42ac */
    float depth_offset;           /* R300_SU_POLY_OFFSET_FRONT_OFFSET: 0x42a8 */
                                  /* R300_SU_POLY_OFFSET_BACK_OFFSET: 0x42b0 */
    uint32_t polygon_offset_enable; /* R300_SU_POLY_OFFSET_ENABLE: 0x42b4 */
    uint32_t cull_mode;             /* R300_SU_CULL_MODE: 0x42b8 */
    uint32_t line_stipple_config;   /* R300_GA_LINE_STIPPLE_CONFIG: 0x4328 */
    uint32_t line_stipple_value;    /* R300_GA_LINE_STIPPLE_VALUE: 0x4260 */
a144 1
    uint32_t polygon_mode;          /* R300_GA_POLY_MODE: 0x4288 */
d148 5
a163 1
    uint32_t border_color; /* R300_TX_BORDER_COLOR: 0x45c0 */
d174 16
d193 9
a201 7
    /* Colorbuffer. */
    uint32_t colorpitch[PIPE_MAX_TEXTURE_LEVELS]; /* R300_RB3D_COLORPITCH[0-3]*/
    uint32_t us_out_fmt; /* R300_US_OUT_FMT[0-3] */

    /* Zbuffer. */
    uint32_t depthpitch[PIPE_MAX_TEXTURE_LEVELS]; /* R300_RB3D_DEPTHPITCH */
    uint32_t zb_format; /* R300_ZB_FORMAT */
d206 2
a207 2
    struct r300_texture *textures[8];
    int texture_count;
d209 2
a210 2
    struct r300_sampler_state *sampler_states[8];
    int sampler_count;
d212 1
a212 1
    /* These is the merge of the texture and sampler states. */
d215 1
a215 6
    struct r300_texture_sampler_state {
        uint32_t format[3];     /* R300_TX_FORMAT[0-2] */
        uint32_t filter[2];     /* R300_TX_FILTER[0-1] */
        uint32_t border_color;  /* R300_TX_BORDER_COLOR: 0x45c0 */
        uint32_t tile_config;   /* R300_TX_OFFSET (subset thereof) */
    } regs[8];
d227 6
a232 4
struct r300_vap_output_state {
    uint32_t vap_vtx_state_cntl;  /* R300_VAP_VTX_STATE_CNTL: 0x2180 */
    uint32_t vap_vsm_vtx_assm;    /* R300_VAP_VSM_VTX_ASSM: 0x2184 */
    uint32_t vap_out_vtx_fmt[2];  /* R300_VAP_OUTPUT_VTX_FMT_[0-1]: 0x2090 */
a248 6
#define R300_NEW_FRAGMENT_SHADER 0x00000020
#define R300_NEW_FRAGMENT_SHADER_CONSTANTS    0x00000040
#define R300_NEW_VERTEX_SHADER_CONSTANTS    0x10000000
#define R300_NEW_QUERY           0x40000000
#define R300_NEW_KITCHEN_SINK    0x7fffffff

d254 5
a258 3
    float constants[256][4];
    /* Total number of constants */
    unsigned count;
d271 5
a275 8
    /* Whether this query is currently active. Only active queries will
     * get emitted into the command stream, and only active queries get
     * tallied. */
    boolean active;
    /* The current count of this query. Required to be at least 32 bits. */
    unsigned int count;
    /* The offset of this query into the query buffer, in bytes. */
    unsigned offset;
d280 9
d294 14
a307 4
enum r300_buffer_tiling {
    R300_BUFFER_LINEAR = 0,
    R300_BUFFER_TILED,
    R300_BUFFER_SQUARETILED
d310 28
a337 3
struct r300_texture {
    /* Parent class */
    struct pipe_texture tex;
d339 6
a344 2
    /* Offsets into the buffer. */
    unsigned offset[PIPE_MAX_TEXTURE_LEVELS];
d346 5
a350 2
    /* A pitch for each mip-level */
    unsigned pitch[PIPE_MAX_TEXTURE_LEVELS];
d352 2
a353 2
    /* Size of one zslice or face based on the texture target */
    unsigned layer_size[PIPE_MAX_TEXTURE_LEVELS];
d355 14
a368 2
    /* Whether the mipmap level is macrotiled. */
    enum r300_buffer_tiling mip_macrotile[PIPE_MAX_TEXTURE_LEVELS];
d378 1
a378 4
    unsigned stride_override;

    /* Total size of this texture, in bytes. */
    unsigned size;
d381 1
a381 2
     * It can be either a regular texture or a rectangle one.
     */
d384 13
d398 2
a399 1
    struct pipe_buffer* buffer;
d402 3
a404 1
    struct r300_texture_format_state state;
d407 30
a436 2
    /* Buffer tiling */
    enum r300_buffer_tiling microtile, macrotile;
d439 10
a448 1
extern struct pipe_viewport_state r300_viewport_identity;
d455 6
a460 1
    struct radeon_winsys* winsys;
d462 1
d464 9
d475 13
d489 4
a492 7
    /* Vertex buffer for rendering. */
    struct pipe_buffer* vbo;
    /* Offset into the VBO. */
    size_t vbo_offset;

    /* Occlusion query buffer. */
    struct pipe_buffer* oqbo;
a493 1
    struct r300_query *query_current;
d497 15
a511 2
    /* Beginning of atom list. */
    struct r300_atom atom_list;
a515 14
    /* User clip planes. */
    struct r300_atom clip_state;
    /* Shader constants. */
    struct r300_constant_buffer shader_constants[PIPE_SHADER_TYPES];
    /* Depth, stencil, and alpha state. */
    struct r300_atom dsa_state;
    /* Fragment shader. */
    struct r300_fragment_shader* fs;
    /* Framebuffer state. */
    struct r300_atom fb_state;
    /* Rasterizer state. */
    struct r300_atom rs_state;
    /* RS block state. */
    struct r300_atom rs_block_state;
d518 8
a525 2
    /* Textures state. */
    struct r300_atom textures_state;
a527 2
    /* VAP (vertex shader) output mapping state. */
    struct r300_atom vap_output_state;
d530 16
a545 6
    /* Viewport state. */
    struct r300_atom viewport_state;
    /* ZTOP state. */
    struct r300_atom ztop_state;
    /* PVS flush. */
    struct r300_atom pvs_flush;
d548 8
d557 2
a558 2
    /* Invariant state. This must be emitted to get the engine started. */
    struct r300_atom invariant_state;
d565 4
a568 2
    struct pipe_vertex_element vertex_element[PIPE_MAX_ATTRIBS];
    int vertex_element_count;
d574 1
d576 2
a577 1
    struct pipe_clip_state clip;
a578 4
    struct pipe_viewport_state viewport;

    /* Bitmask of dirty state objects. */
    uint32_t dirty_state;
d585 39
d626 22
a647 1
/* Convenience cast wrapper. */
d653 4
d661 3
d666 4
d671 58
a728 1
void r300_init_surface_functions(struct r300_context* r300);
d732 1
a732 1
    return SCREEN_DBG_ON(r300_screen(ctx->context.screen), flags);
d741 1
a741 1
        debug_vprintf(fmt, va);
a749 1

@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a31 1
#include "util/u_transfer.h"
a32 3
#include "translate/translate_cache.h"

#include "r300_defines.h"
a34 1
struct u_upload_mgr;
d36 1
a38 1
struct r300_stencilref_context;
d41 2
d53 2
a54 9
    /* Whether this atom may be emitted with state == NULL. */
    boolean allow_null_state;
};

struct r300_aa_state {
    struct r300_surface *dest;

    uint32_t aa_config;
    uint32_t aaresolve_ctl;
d58 5
a62 2
    uint32_t cb[8];
    uint32_t cb_no_readwrite[8];
d66 5
a70 7
    uint32_t cb[3];
};

struct r300_clip_state {
    struct pipe_clip_state clip;

    uint32_t cb[29];
a73 4
    struct pipe_depth_stencil_alpha_state dsa;

    /* This is actually a command buffer with named dwords. */
    uint32_t cb_begin;
d75 1
a75 1
    uint32_t cb_reg_seq;
a78 1
    uint32_t cb_reg;
a79 24

    /* The second command buffer disables zbuffer reads and writes. */
    uint32_t cb_no_readwrite[8];

    /* Whether a two-sided stencil is enabled. */
    boolean two_sided;
    /* Whether a fallback should be used for a two-sided stencil ref value. */
    boolean two_sided_stencil_ref;
};

struct r300_hyperz_state {
    int current_func; /* -1 after a clear before first op */
    int flush;
    /* This is actually a command buffer with named dwords. */
    uint32_t cb_flush_begin;
    uint32_t zb_zcache_ctlstat;     /* R300_ZB_CACHE_CNTL */
    uint32_t cb_begin;
    uint32_t zb_bw_cntl;            /* R300_ZB_BW_CNTL */
    uint32_t cb_reg1;
    uint32_t zb_depthclearvalue;    /* R300_ZB_DEPTHCLEARVALUE */
    uint32_t cb_reg2;
    uint32_t sc_hyperz;             /* R300_SC_HYPERZ */
    uint32_t cb_reg3;
    uint32_t gb_z_peq_config;       /* R300_GB_Z_PEQ_CONFIG: 0x4028 */
a81 6
struct r300_gpu_flush {
    uint32_t cb_flush_clean[6];
};

#define RS_STATE_MAIN_SIZE 23

d83 1
a83 1
    /* Original rasterizer state. */
a84 13
    /* Draw-specific rasterizer state. */
    struct pipe_rasterizer_state rs_draw;

    /* Command buffers. */
    uint32_t cb_main[RS_STATE_MAIN_SIZE];
    uint32_t cb_poly_offset_zb16[5];
    uint32_t cb_poly_offset_zb24[5];

    /* The index to cb_main where the cull_mode register value resides. */
    unsigned cull_mode_index;

    /* Whether polygon offset is enabled. */
    boolean polygon_offset_enable;
d86 12
a97 1
    /* This is emitted in the draw function. */
d99 1
a102 5
    uint32_t vap_vtx_state_cntl;  /* R300_VAP_VTX_STATE_CNTL: 0x2180 */
    uint32_t vap_vsm_vtx_assm;    /* R300_VAP_VSM_VTX_ASSM: 0x2184 */
    uint32_t vap_out_vtx_fmt[2];  /* R300_VAP_OUTPUT_VTX_FMT_[0-1]: 0x2090 */
    uint32_t gb_enable;

d114 1
a124 16
    uint32_t tile_config; /* R300_TX_OFFSET (subset thereof) */
};

struct r300_sampler_view {
    struct pipe_sampler_view base;

    /* Swizzles in the UTIL_FORMAT_SWIZZLE_* representation,
     * derived from base. */
    unsigned char swizzle[4];

    /* Copy of r300_texture::texture_format_state with format-specific bits
     * added. */
    struct r300_texture_format_state format;

    /* The texture cache region for this texture. */
    uint32_t texcache_region;
d128 7
a134 9
    uint32_t pitch[R300_MAX_TEXTURE_LEVELS]; /* COLORPITCH or DEPTHPITCH. */
    uint32_t format; /* US_OUT_FMT or R300_ZB_FORMAT */
};

struct r300_texture_sampler_state {
    struct r300_texture_format_state format;
    uint32_t filter0;      /* R300_TX_FILTER0: 0x4400 */
    uint32_t filter1;      /* R300_TX_FILTER1: 0x4440 */
    uint32_t border_color;  /* R300_TX_BORDER_COLOR: 0x45c0 */
d139 2
a140 2
    struct r300_sampler_view *sampler_views[16];
    int sampler_view_count;
d142 2
a143 2
    struct r300_sampler_state *sampler_states[16];
    int sampler_state_count;
d145 1
a145 1
    /* This is the merge of the texture and sampler states. */
d148 6
a153 1
    struct r300_texture_sampler_state regs[16];
d165 4
a168 6
struct r300_invariant_state {
    uint32_t cb[20];
};

struct r300_vap_invariant_state {
    uint32_t cb[9];
d185 6
d196 3
a198 5
    uint32_t *ptr;
    /* Remapping table. */
    unsigned *remap_table;
    /* const buffer base */
    uint32_t buffer_base;
d211 8
a218 5
    /* The number of pipes where query results are stored. */
    unsigned num_pipes;
    /* How many results have been written, in dwords. It's incremented
     * after end_query and flush. */
    unsigned num_results;
a222 9

    /* The buffer where query results are stored. */
    struct r300_winsys_buffer *buffer;
    struct r300_winsys_cs_buffer *cs_buffer;
    /* The size of the buffer. */
    unsigned buffer_size;
    /* The domain of the buffer. */
    enum r300_buffer_domain domain;

d228 4
a231 14
/* Fence object.
 *
 * This is a fake fence. Instead of syncing with the fence, we sync
 * with the context, which is inefficient but compliant.
 *
 * This is not a subclass of pipe_fence_handle because pipe_fence_handle is
 * never actually fully defined. So, rather than have it as a member, and do
 * subclass-style casting, we treat pipe_fence_handle as an opaque, and just
 * trust that our state tracker does not ever mess up fence objects.
 */
struct r300_fence {
    struct pipe_reference reference;
    struct r300_context *ctx;
    boolean signalled;
d234 3
a236 2
struct r300_surface {
    struct pipe_surface base;
d238 2
a239 5
    /* Winsys buffer backing the texture. */
    struct r300_winsys_buffer *buffer;
    struct r300_winsys_cs_buffer *cs_buffer;

    enum r300_buffer_domain domain;
d241 2
a242 3
    uint32_t offset;    /* COLOROFFSET or DEPTHOFFSET. */
    uint32_t pitch;     /* COLORPITCH or DEPTHPITCH. */
    uint32_t format;    /* US_OUT_FMT or ZB_FORMAT. */
d244 2
a245 6
    /* Parameters dedicated to the CBZB clear. */
    uint32_t cbzb_width;            /* Aligned width. */
    uint32_t cbzb_height;           /* Half of the height. */
    uint32_t cbzb_midpoint_offset;  /* DEPTHOFFSET. */
    uint32_t cbzb_pitch;            /* DEPTHPITCH. */
    uint32_t cbzb_format;           /* ZB_FORMAT. */
d247 2
a248 39
    /* Whether the CBZB clear is allowed on the surface. */
    boolean cbzb_allowed;

};

struct r300_texture_desc {
    /* Parent class. */
    struct u_resource b;

    /* Width, height, and depth.
     * Most of the time, these are equal to pipe_texture::width0, height0,
     * and depth0. However, NPOT 3D textures must have dimensions aligned
     * to POT, and this is the only case when these variables differ from
     * pipe_texture. */
    unsigned width0, height0, depth0;

    /* Buffer tiling.
     * Macrotiling is specified per-level because small mipmaps cannot
     * be macrotiled. */
    enum r300_buffer_tiling microtile;
    enum r300_buffer_tiling macrotile[R300_MAX_TEXTURE_LEVELS];

    /* Offsets into the buffer. */
    unsigned offset_in_bytes[R300_MAX_TEXTURE_LEVELS];

    /* Strides for each mip-level. */
    unsigned stride_in_pixels[R300_MAX_TEXTURE_LEVELS];
    unsigned stride_in_bytes[R300_MAX_TEXTURE_LEVELS];

    /* Size of one zslice or face or 2D image based on the texture target. */
    unsigned layer_size_in_bytes[R300_MAX_TEXTURE_LEVELS];

    /* Total size of this texture, in bytes,
     * derived from the texture properties. */
    unsigned size_in_bytes;

    /* Total size of the buffer backing this texture, in bytes.
     * It must be >= size. */
    unsigned buffer_size_in_bytes;
d258 4
a261 1
    unsigned stride_in_bytes_override;
d264 2
a265 1
     * It can be either a regular texture or a rectangle one. */
a267 13
    /* This flag says that hardware must use the stride for addressing
     * instead of the width. */
    boolean uses_stride_addressing;

    /* Whether CBZB fast color clear is allowed on the miplevel. */
    boolean cbzb_allowed[R300_MAX_TEXTURE_LEVELS];
};

struct r300_texture {
    struct r300_texture_desc desc;

    enum r300_buffer_domain domain;

d269 1
a269 2
    struct r300_winsys_buffer *buffer;
    struct r300_winsys_cs_buffer *cs_buffer;
d272 1
a272 3
    /* Only format-independent bits should be filled in. */
    struct r300_texture_format_state tx_format;
    /* All bits should be filled in. */
d275 2
a276 30
    /* hyper-z memory allocs */
    struct mem_block *hiz_mem[R300_MAX_TEXTURE_LEVELS];
    struct mem_block *zmask_mem[R300_MAX_TEXTURE_LEVELS];
    boolean zmask_in_use[R300_MAX_TEXTURE_LEVELS];
    boolean hiz_in_use[R300_MAX_TEXTURE_LEVELS];

    /* This is the level tiling flags were last time set for.
     * It's used to prevent redundant tiling-flags changes from happening.*/
    unsigned surface_level;
};

struct r300_vertex_element_state {
    unsigned count;
    struct pipe_vertex_element velem[PIPE_MAX_ATTRIBS];

    /* If (velem[i].src_format != hw_format[i]), the vertex buffer
     * referenced by this vertex element cannot be used for rendering and
     * its vertex data must be translated to hw_format[i]. */
    enum pipe_format hw_format[PIPE_MAX_ATTRIBS];
    unsigned hw_format_size[PIPE_MAX_ATTRIBS];

    /* The size of the vertex, in dwords. */
    unsigned vertex_size_dwords;

    /* This might mean two things:
     * - src_format != hw_format, as discussed above.
     * - src_offset % 4 != 0. */
    boolean incompatible_layout;

    struct r300_vertex_stream_state vertex_stream;
d279 1
a279 10
struct r300_translate_context {
    /* Translate cache for incompatible vertex offset/stride/format fallback. */
    struct translate_cache *translate_cache;

    /* The vertex buffer slot containing the translated buffer. */
    unsigned vb_slot;

    /* Saved and new vertex element state. */
    void *saved_velems, *new_velems;
};
d286 1
a286 6
    struct r300_winsys_screen *rws;
    /* The command stream. */
    struct r300_winsys_cs *cs;
    /* Screen. */
    struct r300_screen *screen;

a287 1
    struct gallivm_state *gallivm;
a288 9
    /* Vertex buffer for SW TCL. */
    struct pipe_resource* vbo;
    /* Offset and size into the SW TCL VBO. */
    size_t draw_vbo_offset;
    size_t draw_vbo_size;
    /* Whether the VBO must not be flushed. */
    boolean draw_vbo_locked;
    boolean draw_first_emitted;

a290 13
    /* Stencil two-sided reference value fallback. */
    struct r300_stencilref_context *stencilref_fallback;
    /* For translating vertex buffers having incompatible vertex layout. */
    struct r300_translate_context tran;

    /* The KIL opcode needs the first texture unit to be enabled
     * on r3xx-r4xx. In order to calm down the CS checker, we bind this
     * dummy texture there. */
    struct r300_sampler_view *texkill_sampler;

    /* When no vertex buffer is set, this one is used instead to prevent
     * hardlocks. */
    struct pipe_resource *dummy_vb;
d292 8
a299 1
    /* The currently active query. */
a300 3
    /* The saved query for blitter operations. */
    struct r300_query *blitter_saved_query;
    /* Query list. */
d304 2
a305 15

    /* Each atom is emitted in the order it appears here, which can affect
     * performance and stability if not handled with care. */
    /* GPU flush. */
    struct r300_atom gpu_flush;
    /* Anti-aliasing (MSAA) state. */
    struct r300_atom aa_state;
    /* Framebuffer state. */
    struct r300_atom fb_state;
    /* HyperZ state (various SC/ZB bits). */
    struct r300_atom hyperz_state;
    /* ZTOP state. */
    struct r300_atom ztop_state;
    /* Depth, stencil, and alpha state. */
    struct r300_atom dsa_state;
d310 14
d326 8
a333 2
    /* Invariant state. This must be emitted to get the engine started. */
    struct r300_atom invariant_state;
d336 2
a339 22
    /* VAP invariant state. */
    struct r300_atom vap_invariant_state;
    /* Vertex stream formatting state. */
    struct r300_atom vertex_stream_state;
    /* Vertex shader. */
    struct r300_atom vs_state;
    /* User clip planes. */
    struct r300_atom clip_state;
    /* RS block state + VAP (vertex shader) output mapping state. */
    struct r300_atom rs_block_state;
    /* Rasterizer state. */
    struct r300_atom rs_state;
    /* Framebuffer state (pipelined regs). */
    struct r300_atom fb_state_pipelined;
    /* Fragment shader. */
    struct r300_atom fs;
    /* Fragment shader RC_CONSTANT_STATE variables. */
    struct r300_atom fs_rc_constant_state;
    /* Fragment shader constant buffer. */
    struct r300_atom fs_constants;
    /* Vertex shader constant buffer. */
    struct r300_atom vs_constants;
a341 8
    /* Textures state. */
    struct r300_atom textures_state;
    /* HiZ clear */
    struct r300_atom hiz_clear;
    /* zmask clear */
    struct r300_atom zmask_clear;
    /* Occlusion query. */
    struct r300_atom query_start;
d343 2
a344 2
    /* The pointers to the first and the last atom. */
    struct r300_atom *first_dirty, *last_dirty;
d351 2
a352 4
    struct r300_vertex_element_state *velems;
    bool any_user_vbs;

    struct pipe_index_buffer index_buffer;
d358 3
d363 2
a364 3
    /* Stream locations for SWTCL. */
    int stream_loc_notcl[16];

a370 39
    /* Whether rendering is conditional and should be skipped. */
    boolean skip_rendering;
    /* The flag above saved by blitter. */
    unsigned char blitter_saved_skip_rendering;
    /* Point sprites texcoord index,  1 bit per texcoord */
    int sprite_coord_enable;
    /* Whether two-sided color selection is enabled (AKA light_twoside). */
    boolean two_sided_color;
    /* Incompatible vertex buffer layout? (misaligned stride or buffer_offset) */
    boolean incompatible_vb_layout;
#define R300_Z_COMPRESS_44 1
#define RV350_Z_COMPRESS_88 2
    int z_compression;
    boolean cbzb_clear;
    boolean z_decomp_rd;

    /* two mem block managers for hiz/zmask ram space */
    struct mem_block *hiz_mm;
    struct mem_block *zmask_mm;

    /* upload managers */
    struct u_upload_mgr *upload_vb;
    struct u_upload_mgr *upload_ib;

    struct util_slab_mempool pool_transfers;

    /* Stat counter. */
    uint64_t flush_counter;

    /* const tracking for VS */
    int vs_const_base;

    /* AOS (PACKET3_3D_LOAD_VBPNTR) command buffer for the case offset=0. */
    uint32_t aos_cb[(16 * 3 + 1) / 2];
    boolean aos_dirty;

    /* Whether any buffer (FB, textures, VBOs) has been set, but buffers
     * haven't been validated yet. */
    boolean validate_buffers;
d373 1
a373 22
#define foreach_atom(r300, atom) \
    for (atom = &r300->gpu_flush; atom != (&r300->query_start)+1; atom++)

#define foreach_dirty_atom(r300, atom) \
    for (atom = r300->first_dirty; atom != r300->last_dirty; atom++)

/* Convenience cast wrappers. */
static INLINE struct r300_query* r300_query(struct pipe_query* q)
{
    return (struct r300_query*)q;
}

static INLINE struct r300_surface* r300_surface(struct pipe_surface* surf)
{
    return (struct r300_surface*)surf;
}

static INLINE struct r300_texture* r300_texture(struct pipe_resource* tex)
{
    return (struct r300_texture*)tex;
}

a378 4
static INLINE struct r300_fragment_shader *r300_fs(struct r300_context *r300)
{
    return (struct r300_fragment_shader*)r300->fs.state;
}
a382 3
void r300_finish(struct r300_context *r300);
void r300_flush_cb(void *data);

a384 4
void r300_init_blit_functions(struct r300_context *r300);
void r300_init_flush_functions(struct r300_context* r300);
void r300_init_query_functions(struct r300_context* r300);
void r300_init_render_functions(struct r300_context *r300);
d386 1
a386 58
void r300_init_resource_functions(struct r300_context* r300);

/* r300_blit.c */
void r300_flush_depth_stencil(struct pipe_context *pipe,
                              struct pipe_resource *dst,
                              unsigned level,
                              unsigned layer);

/* r300_query.c */
void r300_resume_query(struct r300_context *r300,
                       struct r300_query *query);
void r300_stop_query(struct r300_context *r300);

/* r300_render_translate.c */
void r300_begin_vertex_translate(struct r300_context *r300);
void r300_end_vertex_translate(struct r300_context *r300);
void r300_translate_index_buffer(struct r300_context *r300,
                                 struct pipe_resource **index_buffer,
                                 unsigned *index_size, unsigned index_offset,
                                 unsigned *start, unsigned count);

/* r300_render_stencilref.c */
void r300_plug_in_stencil_ref_fallback(struct r300_context *r300);

/* r300_render.c */
void r300_draw_flush_vbuf(struct r300_context *r300);
void r500_emit_index_bias(struct r300_context *r300, int index_bias);

/* r300_state.c */
enum r300_fb_state_change {
    R300_CHANGED_FB_STATE = 0,
    R300_CHANGED_CBZB_FLAG,
    R300_CHANGED_ZCLEAR_FLAG
};

void r300_mark_fb_state_dirty(struct r300_context *r300,
                              enum r300_fb_state_change change);
void r300_mark_fs_code_dirty(struct r300_context *r300);

static INLINE void r300_mark_atom_dirty(struct r300_context *r300,
                                        struct r300_atom *atom)
{
    atom->dirty = TRUE;

    if (!r300->first_dirty) {
        r300->first_dirty = atom;
        r300->last_dirty = atom+1;
    } else {
        if (atom < r300->first_dirty)
            r300->first_dirty = atom;
        if (atom+1 > r300->last_dirty)
            r300->last_dirty = atom+1;
    }
}

/* r300_debug.c */
void r500_dump_rs_block(struct r300_rs_block *rs);

d390 1
a390 1
    return SCREEN_DBG_ON(ctx->screen, flags);
d399 1
a399 1
        vfprintf(stderr, fmt, va);
d408 1
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a25 2
#define R300_BUFFER_ALIGNMENT 64

d34 2
a37 2
#include "compiler/radeon_regalloc.h"
#include "../../winsys/radeon/drm/radeon_winsys.h"
a44 12
enum colormask_swizzle {
    COLORMASK_BGRA,
    COLORMASK_RGBA,
    COLORMASK_RRRR,
    COLORMASK_AAAA,
    COLORMASK_GRRG,
    COLORMASK_ARRA,
    COLORMASK_BGRX,
    COLORMASK_RGBX,
    COLORMASK_NUM_SWIZZLES
};

d64 1
d68 1
a68 5
    struct pipe_blend_state state;

    uint32_t cb_clamp[COLORMASK_NUM_SWIZZLES][8];
    uint32_t cb_noclamp[8];
    uint32_t cb_noclamp_noalpha[8];
a72 1
    struct pipe_blend_color state;
d77 2
d87 2
a93 2
    uint32_t cb_reg1;
    uint32_t alpha_value;       /* R500_FG_ALPHA_VALUE: 0x4be0 */
d95 2
a96 5
    /* Same, but without ZB reads and writes. */
    uint32_t cb_zb_no_readwrite[8]; /* ZB not bound */

    /* Emitted separately: */
    uint32_t alpha_function;
d105 1
d124 1
a124 1
#define RS_STATE_MAIN_SIZE 27
a174 1
    uint32_t us_format0;   /* R500_US_FORMAT0_0: 0x4640 (through 15) */
a179 4
    /* For resource_copy_region. */
    unsigned width0_override;
    unsigned height0_override;

d192 5
d201 1
a201 1
    uint32_t border_color; /* R300_TX_BORDER_COLOR: 0x45c0 */
d228 1
a228 1
    uint32_t cb[24];
d232 1
a232 1
    uint32_t cb[11];
d276 2
d282 26
a307 2
    struct pb_buffer *buf;
    struct radeon_winsys_cs_handle *cs_buf;
d314 2
a315 2
    struct pb_buffer *buf;
    struct radeon_winsys_cs_handle *cs_buf;
d317 1
a317 1
    enum radeon_bo_domain domain;
a320 3
    uint32_t pitch_zmask; /* ZMASK_PITCH */
    uint32_t pitch_hiz;   /* HIZ_PITCH */
    uint32_t pitch_cmask; /* CMASK_PITCH */
a332 1
    unsigned colormask_swizzle;
d336 3
d349 2
a350 2
    enum radeon_bo_layout microtile;
    enum radeon_bo_layout macrotile[R300_MAX_TEXTURE_LEVELS];
d356 1
d366 4
a389 13

    /* Zbuffer compression info for each miplevel. */
    boolean zcomp8x8[R300_MAX_TEXTURE_LEVELS];
    /* If zero, then disable Z compression/HiZ. */
    unsigned zmask_dwords[R300_MAX_TEXTURE_LEVELS];
    unsigned hiz_dwords[R300_MAX_TEXTURE_LEVELS];
    /* Zmask/HiZ strides for each miplevel. */
    unsigned zmask_stride_in_pixels[R300_MAX_TEXTURE_LEVELS];
    unsigned hiz_stride_in_pixels[R300_MAX_TEXTURE_LEVELS];

    /* CMASK info for AA buffers (no mipmapping). */
    unsigned cmask_dwords;
    unsigned cmask_stride_in_pixels;
d392 2
a393 3
struct r300_resource
{
    struct u_resource b;
d395 1
a395 8
    /* Winsys buffer backing this resource. */
    struct pb_buffer *buf;
    struct radeon_winsys_cs_handle *cs_buf;
    enum radeon_bo_domain domain;

    /* Constant buffers and SWTCL vertex and index buffers are in user
     * memory. */
    uint8_t *malloced_buffer;
d397 15
a411 2
    /* Texture description (addressing, layout, special features). */
    struct r300_texture_desc tex;
d421 6
a426 1
    unsigned format_size[PIPE_MAX_ATTRIBS];
d431 5
d439 3
a441 2
enum r300_hiz_func {
    HIZ_FUNC_NONE,
d443 2
a444 2
    /* The function, when determined, is set in stone
     * until the next HiZ clear. */
d446 2
a447 14
    /* MAX is written to the HiZ buffer.
     * Used for LESS, LEQUAL. */
    HIZ_FUNC_MAX,

    /* MIN is written to the HiZ buffer.
     * Used for GREATER, GEQUAL. */
    HIZ_FUNC_MIN,
};

/* For deferred fragment shader state validation. */
enum r300_fs_validity_status {
    FRAGMENT_SHADER_VALID,      /* No need to change/validate the FS. */
    FRAGMENT_SHADER_MAYBE_DIRTY,/* Validate the FS if external state was changed. */
    FRAGMENT_SHADER_DIRTY       /* Always validate the FS (if the FS was changed) */
d455 1
a455 1
    struct radeon_winsys *rws;
d457 1
a457 1
    struct radeon_winsys_cs *cs;
d462 1
d465 1
a465 2
    struct pb_buffer *vbo;
    struct radeon_winsys_cs_handle *vbo_cs;
d468 4
d477 2
d487 1
a487 1
    struct pipe_vertex_buffer dummy_vb;
a501 7
    /* Clears must be emitted immediately after the flush. */
    /* HiZ clear */
    struct r300_atom hiz_clear;
    /* zmask clear */
    struct r300_atom zmask_clear;
    /* cmask clear */
    struct r300_atom cmask_clear;
a517 2
    /* Sample mask. */
    struct r300_atom sample_mask;
d550 4
d560 4
d566 3
d593 5
a597 2
    boolean flatshade;
    /* Whether fast color clear is enabled. */
d599 1
a599 8
    /* Whether fragment shader needs to be validated. */
    enum r300_fs_validity_status fs_status;
    /* Framebuffer multi-write. */
    boolean fb_multiwrite;
    unsigned num_samples;
    boolean msaa_enable;
    boolean alpha_to_one;
    boolean alpha_to_coverage;
d601 7
a607 6
    void *dsa_decompress_zmask;

    struct pipe_index_buffer index_buffer;
    struct pipe_vertex_buffer vertex_buffer[PIPE_MAX_ATTRIBS];
    unsigned nr_vertex_buffers;
    struct u_upload_mgr *uploader;
d617 7
a623 32
    /* Vertex array state info */
    boolean vertex_arrays_dirty;
    boolean vertex_arrays_indexed;
    int vertex_arrays_offset;
    int vertex_arrays_instance_id;
    boolean instancing_enabled;

    /* Hyper-Z stats. */
    boolean hyperz_enabled;     /* Whether it owns Hyper-Z access. */
    int64_t hyperz_time_of_last_flush; /* Time of the last flush with Z clear. */
    unsigned num_z_clears;      /* Since the last flush. */

    /* ZMask state. */
    boolean zmask_in_use;       /* Whether ZMASK is enabled. */
    boolean zmask_decompress;   /* Whether ZMASK is being decompressed. */
    struct pipe_surface *locked_zbuffer; /* Unbound zbuffer which still has data in ZMASK. */

    /* HiZ state. */
    boolean hiz_in_use;         /* Whether HIZ is enabled. */
    enum r300_hiz_func hiz_func; /* HiZ function. Can be either MIN or MAX. */
    uint32_t hiz_clear_value;   /* HiZ clear value. */

    /* CMASK state. */
    boolean cmask_access;
    boolean cmask_in_use;
    uint32_t color_clear_value; /* RGBA8 or RGBA1010102 */
    uint32_t color_clear_value_ar; /* RGBA16F */
    uint32_t color_clear_value_gb; /* RGBA16F */

    /* Compiler state. */
    struct rc_regalloc_state fs_regalloc_state; /* Register allocator info for
                                                 * fragment shaders. */
d643 1
a643 1
static INLINE struct r300_resource* r300_resource(struct pipe_resource* tex)
d645 1
a645 1
    return (struct r300_resource*)tex;
a657 16
static INLINE void r300_mark_atom_dirty(struct r300_context *r300,
                                        struct r300_atom *atom)
{
    atom->dirty = TRUE;

    if (!r300->first_dirty) {
        r300->first_dirty = atom;
        r300->last_dirty = atom+1;
    } else {
        if (atom < r300->first_dirty)
            r300->first_dirty = atom;
        else if (atom+1 > r300->last_dirty)
            r300->last_dirty = atom+1;
    }
}

d661 3
d674 4
a677 12
void r300_decompress_zmask(struct r300_context *r300);
void r300_decompress_zmask_locked_unsafe(struct r300_context *r300);
void r300_decompress_zmask_locked(struct r300_context *r300);
bool r300_is_blit_supported(enum pipe_format format);

/* r300_flush.c */
void r300_flush(struct pipe_context *pipe,
                unsigned flags,
                struct pipe_fence_handle **fence);

/* r300_hyperz.c */
void r300_update_hyperz_state(struct r300_context* r300);
d685 2
d688 1
a688 2
                                 struct pipe_index_buffer *ib,
                                 struct pipe_resource **out_index_buffer,
d696 1
a697 5
void r300_blitter_draw_rectangle(struct blitter_context *blitter,
                                 int x1, int y1, int x2, int y2,
                                 float depth,
                                 enum blitter_attrib_type type,
                                 const union pipe_color_union *attrib);
d702 2
a703 3
    R300_CHANGED_HYPERZ_FLAG,
    R300_CHANGED_MULTIWRITE,
    R300_CHANGED_CMASK_ENABLE,
d710 4
a713 6
struct pipe_sampler_view *
r300_create_sampler_view_custom(struct pipe_context *pipe,
                         struct pipe_resource *texture,
                         const struct pipe_sampler_view *templ,
                         unsigned width0_override,
                         unsigned height0_override);
d715 10
a724 2
/* r300_state_derived.c */
void r300_update_derived_state(struct r300_context* r300);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a690 14
static INLINE struct pipe_surface *
r300_get_nonnull_cb(struct pipe_framebuffer_state *fb, unsigned i)
{
    if (fb->cbufs[i])
        return fb->cbufs[i];

    /* The i-th framebuffer is NULL, return any non-NULL one. */
    for (i = 0; i < fb->nr_cbufs; i++)
        if (fb->cbufs[i])
            return fb->cbufs[i];

    return NULL;
}

@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d39 1
a39 1
#include "radeon/drm/radeon_winsys.h"
a582 1
    boolean clip_halfz;
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d39 1
a39 1
#include "../../winsys/radeon/drm/radeon_winsys.h"
d583 1
@


