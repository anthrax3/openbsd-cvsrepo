head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.34;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.06;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.54;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.15;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.08.48;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.46.02;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Authors:
 *  Brian Paul
 */

#include "util/u_memory.h"
#include "util/u_inlines.h"

#include "draw/draw_context.h"

#include "sp_context.h"
#include "sp_state.h"
#include "sp_texture.h"
#include "sp_tex_sample.h"
#include "sp_tex_tile_cache.h"


/**
 * Bind a range [start, start+num-1] of samplers for a shader stage.
 */
static void
softpipe_bind_sampler_states(struct pipe_context *pipe,
                             unsigned shader,
                             unsigned start,
                             unsigned num,
                             void **samplers)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);
   unsigned i;

   assert(shader < PIPE_SHADER_TYPES);
   assert(start + num <= Elements(softpipe->samplers[shader]));

   draw_flush(softpipe->draw);

   /* set the new samplers */
   for (i = 0; i < num; i++) {
      softpipe->samplers[shader][start + i] = samplers[i];
   }

   /* find highest non-null samplers[] entry */
   {
      unsigned j = MAX2(softpipe->num_samplers[shader], start + num);
      while (j > 0 && softpipe->samplers[shader][j - 1] == NULL)
         j--;
      softpipe->num_samplers[shader] = j;
   }

   if (shader == PIPE_SHADER_VERTEX || shader == PIPE_SHADER_GEOMETRY) {
      draw_set_samplers(softpipe->draw,
                        shader,
                        softpipe->samplers[shader],
                        softpipe->num_samplers[shader]);
   }

   softpipe->dirty |= SP_NEW_SAMPLER;
}


static void
softpipe_sampler_view_destroy(struct pipe_context *pipe,
                              struct pipe_sampler_view *view)
{
   pipe_resource_reference(&view->texture, NULL);
   FREE(view);
}


void
softpipe_set_sampler_views(struct pipe_context *pipe,
                           unsigned shader,
                           unsigned start,
                           unsigned num,
                           struct pipe_sampler_view **views)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);
   uint i;

   assert(shader < PIPE_SHADER_TYPES);
   assert(start + num <= Elements(softpipe->sampler_views[shader]));

   draw_flush(softpipe->draw);

   /* set the new sampler views */
   for (i = 0; i < num; i++) {
      struct sp_sampler_view *sp_sviewsrc;
      struct sp_sampler_view *sp_sviewdst =
         &softpipe->tgsi.sampler[shader]->sp_sview[start + i];
      struct pipe_sampler_view **pview = &softpipe->sampler_views[shader][start + i];
      pipe_sampler_view_reference(pview, views[i]);
      sp_tex_tile_cache_set_sampler_view(softpipe->tex_cache[shader][start + i],
                                         views[i]);
      /*
       * We don't really have variants, however some bits are different per shader,
       * so just copy?
       */
      sp_sviewsrc = (struct sp_sampler_view *)*pview;
      if (sp_sviewsrc) {
         memcpy(sp_sviewdst, sp_sviewsrc, sizeof(*sp_sviewsrc));
         sp_sviewdst->compute_lambda = softpipe_get_lambda_func(&sp_sviewdst->base, shader);
         sp_sviewdst->cache = softpipe->tex_cache[shader][start + i];
      }
      else {
         memset(sp_sviewdst, 0,  sizeof(*sp_sviewsrc));
      }
   }


   /* find highest non-null sampler_views[] entry */
   {
      unsigned j = MAX2(softpipe->num_sampler_views[shader], start + num);
      while (j > 0 && softpipe->sampler_views[shader][j - 1] == NULL)
         j--;
      softpipe->num_sampler_views[shader] = j;
   }

   if (shader == PIPE_SHADER_VERTEX || shader == PIPE_SHADER_GEOMETRY) {
      draw_set_sampler_views(softpipe->draw,
                             shader,
                             softpipe->sampler_views[shader],
                             softpipe->num_sampler_views[shader]);
   }

   softpipe->dirty |= SP_NEW_TEXTURE;
}


static void
softpipe_delete_sampler_state(struct pipe_context *pipe,
                              void *sampler)
{
   FREE( sampler );
}


void
softpipe_init_sampler_funcs(struct pipe_context *pipe)
{
   pipe->create_sampler_state = softpipe_create_sampler_state;
   pipe->bind_sampler_states = softpipe_bind_sampler_states;
   pipe->delete_sampler_state = softpipe_delete_sampler_state;

   pipe->create_sampler_view = softpipe_create_sampler_view;
   pipe->set_sampler_views = softpipe_set_sampler_views;
   pipe->sampler_view_destroy = softpipe_sampler_view_destroy;
}

@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a33 1
#include "util/u_format.h"
a41 2
#include "sp_screen.h"
#include "state_tracker/sw_winsys.h"
a158 153
}


static void
prepare_shader_sampling(
   struct softpipe_context *sp,
   unsigned num,
   struct pipe_sampler_view **views,
   unsigned shader_type,
   struct pipe_resource *mapped_tex[PIPE_MAX_SHADER_SAMPLER_VIEWS])
{

   unsigned i;
   uint32_t row_stride[PIPE_MAX_TEXTURE_LEVELS];
   uint32_t img_stride[PIPE_MAX_TEXTURE_LEVELS];
   uint32_t mip_offsets[PIPE_MAX_TEXTURE_LEVELS];
   const void *addr;

   assert(num <= PIPE_MAX_SHADER_SAMPLER_VIEWS);
   if (!num)
      return;

   for (i = 0; i < PIPE_MAX_SHADER_SAMPLER_VIEWS; i++) {
      struct pipe_sampler_view *view = i < num ? views[i] : NULL;

      if (view) {
         struct pipe_resource *tex = view->texture;
         struct softpipe_resource *sp_tex = softpipe_resource(tex);
         unsigned width0 = tex->width0;
         unsigned num_layers = tex->depth0;
         unsigned first_level = 0;
         unsigned last_level = 0;

         /* We're referencing the texture's internal data, so save a
          * reference to it.
          */
         pipe_resource_reference(&mapped_tex[i], tex);

         if (!sp_tex->dt) {
            /* regular texture - setup array of mipmap level offsets */
            struct pipe_resource *res = view->texture;
            int j;

            if (res->target != PIPE_BUFFER) {
               first_level = view->u.tex.first_level;
               last_level = view->u.tex.last_level;
               assert(first_level <= last_level);
               assert(last_level <= res->last_level);
               addr = sp_tex->data;

               for (j = first_level; j <= last_level; j++) {
                  mip_offsets[j] = sp_tex->level_offset[j];
                  row_stride[j] = sp_tex->stride[j];
                  img_stride[j] = sp_tex->img_stride[j];
               }
               if (res->target == PIPE_TEXTURE_1D_ARRAY ||
                   res->target == PIPE_TEXTURE_2D_ARRAY ||
                   res->target == PIPE_TEXTURE_CUBE_ARRAY) {
                  num_layers = view->u.tex.last_layer - view->u.tex.first_layer + 1;
                  for (j = first_level; j <= last_level; j++) {
                     mip_offsets[j] += view->u.tex.first_layer *
                                       sp_tex->img_stride[j];
                  }
                  if (res->target == PIPE_TEXTURE_CUBE_ARRAY) {
                     assert(num_layers % 6 == 0);
                  }
                  assert(view->u.tex.first_layer <= view->u.tex.last_layer);
                  assert(view->u.tex.last_layer < res->array_size);
               }
            }
            else {
               unsigned view_blocksize = util_format_get_blocksize(view->format);
               addr = sp_tex->data;
               /* probably don't really need to fill that out */
               mip_offsets[0] = 0;
               row_stride[0] = 0;
               img_stride[0] = 0;

               /* everything specified in number of elements here. */
               width0 = view->u.buf.last_element - view->u.buf.first_element + 1;
               addr = (uint8_t *)addr + view->u.buf.first_element *
                               view_blocksize;
               assert(view->u.buf.first_element <= view->u.buf.last_element);
               assert(view->u.buf.last_element * view_blocksize < res->width0);
            }
         }
         else {
            /* display target texture/surface */
            /*
             * XXX: Where should this be unmapped?
             */
            struct softpipe_screen *screen = softpipe_screen(tex->screen);
            struct sw_winsys *winsys = screen->winsys;
            addr = winsys->displaytarget_map(winsys, sp_tex->dt,
                                             PIPE_TRANSFER_READ);
            row_stride[0] = sp_tex->stride[0];
            img_stride[0] = sp_tex->img_stride[0];
            mip_offsets[0] = 0;
            assert(addr);
         }
         draw_set_mapped_texture(sp->draw,
                                 shader_type,
                                 i,
                                 width0, tex->height0, num_layers,
                                 first_level, last_level,
                                 addr,
                                 row_stride, img_stride, mip_offsets);
      }
   }
}


/**
 * Called during state validation when SP_NEW_TEXTURE is set.
 */
void
softpipe_prepare_vertex_sampling(struct softpipe_context *sp,
                                 unsigned num,
                                 struct pipe_sampler_view **views)
{
   prepare_shader_sampling(sp, num, views, PIPE_SHADER_VERTEX,
                           sp->mapped_vs_tex);
}

void
softpipe_cleanup_vertex_sampling(struct softpipe_context *ctx)
{
   unsigned i;
   for (i = 0; i < Elements(ctx->mapped_vs_tex); i++) {
      pipe_resource_reference(&ctx->mapped_vs_tex[i], NULL);
   }
}


/**
 * Called during state validation when SP_NEW_TEXTURE is set.
 */
void
softpipe_prepare_geometry_sampling(struct softpipe_context *sp,
                                   unsigned num,
                                   struct pipe_sampler_view **views)
{
   prepare_shader_sampling(sp, num, views, PIPE_SHADER_GEOMETRY,
                           sp->mapped_gs_tex);
}

void
softpipe_cleanup_geometry_sampling(struct softpipe_context *ctx)
{
   unsigned i;
   for (i = 0; i < Elements(ctx->mapped_gs_tex); i++) {
      pipe_resource_reference(&ctx->mapped_gs_tex[i], NULL);
   }
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d34 1
d43 2
d162 153
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
a59 7
   /* Check for no-op */
   if (start + num <= softpipe->num_samplers[shader] &&
       !memcmp(softpipe->samplers[shader] + start, samplers,
               num * sizeof(void *))) {
      return;
   }

a85 28

static void
softpipe_bind_fragment_sampler_states(struct pipe_context *pipe,
                                      unsigned num, void **samplers)
{
   softpipe_bind_sampler_states(pipe, PIPE_SHADER_FRAGMENT, 0, num, samplers);
}


static void
softpipe_bind_vertex_sampler_states(struct pipe_context *pipe,
                                    unsigned num,
                                    void **samplers)
{
   softpipe_bind_sampler_states(pipe, PIPE_SHADER_VERTEX, 0, num, samplers);
}


static void
softpipe_bind_geometry_sampler_states(struct pipe_context *pipe,
                                      unsigned num,
                                      void **samplers)
{
   softpipe_bind_sampler_states(pipe, PIPE_SHADER_GEOMETRY, 0, num, samplers);
}



a107 7
   /* Check for no-op */
   if (start + num <= softpipe->num_sampler_views[shader] &&
       !memcmp(softpipe->sampler_views[shader] + start, views,
               num * sizeof(struct pipe_sampler_view *))) {
      return;
   }

a154 27
softpipe_set_fragment_sampler_views(struct pipe_context *pipe,
                                    unsigned num,
                                    struct pipe_sampler_view **views)
{
   softpipe_set_sampler_views(pipe, PIPE_SHADER_FRAGMENT, 0, num, views);
}


static void
softpipe_set_vertex_sampler_views(struct pipe_context *pipe,
                                  unsigned num,
                                  struct pipe_sampler_view **views)
{
   softpipe_set_sampler_views(pipe, PIPE_SHADER_VERTEX, 0, num, views);
}


static void
softpipe_set_geometry_sampler_views(struct pipe_context *pipe,
                                    unsigned num,
                                    struct pipe_sampler_view **views)
{
   softpipe_set_sampler_views(pipe, PIPE_SHADER_GEOMETRY, 0, num, views);
}


static void
d166 1
a166 3
   pipe->bind_fragment_sampler_states  = softpipe_bind_fragment_sampler_states;
   pipe->bind_vertex_sampler_states = softpipe_bind_vertex_sampler_states;
   pipe->bind_geometry_sampler_states = softpipe_bind_geometry_sampler_states;
a168 4
   pipe->set_fragment_sampler_views = softpipe_set_fragment_sampler_views;
   pipe->set_vertex_sampler_views = softpipe_set_vertex_sampler_views;
   pipe->set_geometry_sampler_views = softpipe_set_geometry_sampler_views;

d170 1
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d44 3
a46 25
struct sp_sampler {
   struct pipe_sampler_state base;
   struct sp_sampler_variant *variants;
   struct sp_sampler_variant *current;
};

static struct sp_sampler *sp_sampler( struct pipe_sampler_state *sampler )
{
   return (struct sp_sampler *)sampler;
}


static void *
softpipe_create_sampler_state(struct pipe_context *pipe,
                              const struct pipe_sampler_state *sampler)
{
   struct sp_sampler *sp_sampler = CALLOC_STRUCT(sp_sampler);

   sp_sampler->base = *sampler;
   sp_sampler->variants = NULL;

   return (void *)sp_sampler;
}


d48 5
a52 2
softpipe_bind_fragment_sampler_states(struct pipe_context *pipe,
                                      unsigned num, void **sampler)
d57 2
a58 1
   assert(num <= PIPE_MAX_SAMPLERS);
d61 3
a63 2
   if (num == softpipe->num_fragment_samplers &&
       !memcmp(softpipe->fragment_samplers, sampler, num * sizeof(void *)))
d65 1
d69 4
a72 4
   for (i = 0; i < num; ++i)
      softpipe->fragment_samplers[i] = sampler[i];
   for (i = num; i < PIPE_MAX_SAMPLERS; ++i)
      softpipe->fragment_samplers[i] = NULL;
d74 14
a87 1
   softpipe->num_fragment_samplers = num;
d93 9
d104 1
a104 1
                                    unsigned num_samplers,
d107 2
a108 11
   struct softpipe_context *softpipe = softpipe_context(pipe);
   unsigned i;

   assert(num_samplers <= PIPE_MAX_VERTEX_SAMPLERS);

   /* Check for no-op */
   if (num_samplers == softpipe->num_vertex_samplers &&
       !memcmp(softpipe->vertex_samplers, samplers, num_samplers * sizeof(void *)))
      return;

   draw_flush(softpipe->draw);
a109 13
   for (i = 0; i < num_samplers; ++i)
      softpipe->vertex_samplers[i] = samplers[i];
   for (i = num_samplers; i < PIPE_MAX_VERTEX_SAMPLERS; ++i)
      softpipe->vertex_samplers[i] = NULL;

   softpipe->num_vertex_samplers = num_samplers;

   draw_set_samplers(softpipe->draw,
                     softpipe->vertex_samplers,
                     softpipe->num_vertex_samplers);

   softpipe->dirty |= SP_NEW_SAMPLER;
}
d113 1
a113 1
                                      unsigned num_samplers,
d116 1
a116 20
   struct softpipe_context *softpipe = softpipe_context(pipe);
   unsigned i;

   assert(num_samplers <= PIPE_MAX_GEOMETRY_SAMPLERS);

   /* Check for no-op */
   if (num_samplers == softpipe->num_geometry_samplers &&
       !memcmp(softpipe->geometry_samplers, samplers, num_samplers * sizeof(void *)))
      return;

   draw_flush(softpipe->draw);

   for (i = 0; i < num_samplers; ++i)
      softpipe->geometry_samplers[i] = samplers[i];
   for (i = num_samplers; i < PIPE_MAX_GEOMETRY_SAMPLERS; ++i)
      softpipe->geometry_samplers[i] = NULL;

   softpipe->num_geometry_samplers = num_samplers;

   softpipe->dirty |= SP_NEW_SAMPLER;
a119 18
static struct pipe_sampler_view *
softpipe_create_sampler_view(struct pipe_context *pipe,
                             struct pipe_resource *resource,
                             const struct pipe_sampler_view *templ)
{
   struct pipe_sampler_view *view = CALLOC_STRUCT(pipe_sampler_view);

   if (view) {
      *view = *templ;
      view->reference.count = 1;
      view->texture = NULL;
      pipe_resource_reference(&view->texture, resource);
      view->context = pipe;
   }

   return view;
}

d130 6
a135 4
static void
softpipe_set_fragment_sampler_views(struct pipe_context *pipe,
                                    unsigned num,
                                    struct pipe_sampler_view **views)
d140 2
a141 1
   assert(num <= PIPE_MAX_SAMPLERS);
d144 3
a146 3
   if (num == softpipe->num_fragment_sampler_views &&
       !memcmp(softpipe->fragment_sampler_views, views,
               num * sizeof(struct pipe_sampler_view *)))
d148 1
d152 22
a173 5
   for (i = 0; i < PIPE_MAX_SAMPLERS; i++) {
      struct pipe_sampler_view *view = i < num ? views[i] : NULL;

      pipe_sampler_view_reference(&softpipe->fragment_sampler_views[i], view);
      sp_tex_tile_cache_set_sampler_view(softpipe->fragment_tex_cache[i], view);
a175 1
   softpipe->num_fragment_sampler_views = num;
d177 6
a182 18
   softpipe->dirty |= SP_NEW_TEXTURE;
}


static void
softpipe_set_vertex_sampler_views(struct pipe_context *pipe,
                                  unsigned num,
                                  struct pipe_sampler_view **views)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);
   uint i;

   assert(num <= PIPE_MAX_VERTEX_SAMPLERS);

   /* Check for no-op */
   if (num == softpipe->num_vertex_sampler_views &&
       !memcmp(softpipe->vertex_sampler_views, views, num * sizeof(struct pipe_sampler_view *))) {
      return;
d185 5
a189 7
   draw_flush(softpipe->draw);

   for (i = 0; i < PIPE_MAX_VERTEX_SAMPLERS; i++) {
      struct pipe_sampler_view *view = i < num ? views[i] : NULL;

      pipe_sampler_view_reference(&softpipe->vertex_sampler_views[i], view);
      sp_tex_tile_cache_set_sampler_view(softpipe->vertex_tex_cache[i], view);
a191 6
   softpipe->num_vertex_sampler_views = num;

   draw_set_sampler_views(softpipe->draw,
                          softpipe->vertex_sampler_views,
                          softpipe->num_vertex_sampler_views);

d197 1
a197 1
softpipe_set_geometry_sampler_views(struct pipe_context *pipe,
d201 1
a201 23
   struct softpipe_context *softpipe = softpipe_context(pipe);
   uint i;

   assert(num <= PIPE_MAX_GEOMETRY_SAMPLERS);

   /* Check for no-op */
   if (num == softpipe->num_geometry_sampler_views &&
       !memcmp(softpipe->geometry_sampler_views, views, num * sizeof(struct pipe_sampler_view *))) {
      return;
   }

   draw_flush(softpipe->draw);

   for (i = 0; i < PIPE_MAX_GEOMETRY_SAMPLERS; i++) {
      struct pipe_sampler_view *view = i < num ? views[i] : NULL;

      pipe_sampler_view_reference(&softpipe->geometry_sampler_views[i], view);
      sp_tex_tile_cache_set_sampler_view(softpipe->geometry_tex_cache[i], view);
   }

   softpipe->num_geometry_sampler_views = num;

   softpipe->dirty |= SP_NEW_TEXTURE;
d205 4
a208 15
/**
 * Find/create an sp_sampler_variant object for sampling the given texture,
 * sampler and tex unit.
 *
 * Note that the tex unit is significant.  We can't re-use a sampler
 * variant for multiple texture units because the sampler variant contains
 * the texture object pointer.  If the texture object pointer were stored
 * somewhere outside the sampler variant, we could re-use samplers for
 * multiple texture units.
 */
static struct sp_sampler_variant *
get_sampler_variant( unsigned unit,
                     struct sp_sampler *sampler,
                     struct pipe_sampler_view *view,
                     unsigned processor )
d210 1
a210 36
   struct softpipe_resource *sp_texture = softpipe_resource(view->texture);
   struct sp_sampler_variant *v = NULL;
   union sp_sampler_key key;

   /* if this fails, widen the key.unit field and update this assertion */
   assert(PIPE_MAX_SAMPLERS <= 16);

   key.bits.target = sp_texture->base.target;
   key.bits.is_pot = sp_texture->pot;
   key.bits.processor = processor;
   key.bits.unit = unit;
   key.bits.swizzle_r = view->swizzle_r;
   key.bits.swizzle_g = view->swizzle_g;
   key.bits.swizzle_b = view->swizzle_b;
   key.bits.swizzle_a = view->swizzle_a;
   key.bits.pad = 0;

   if (sampler->current && 
       key.value == sampler->current->key.value) {
      v = sampler->current;
   }

   if (v == NULL) {
      for (v = sampler->variants; v; v = v->next)
         if (v->key.value == key.value)
            break;

      if (v == NULL) {
         v = sp_create_sampler_variant( &sampler->base, key );
         v->next = sampler->variants;
         sampler->variants = v;
      }
   }
   
   sampler->current = v;
   return v;
d214 4
a217 2
void
softpipe_reset_sampler_variants(struct softpipe_context *softpipe)
d219 2
a220 37
   int i;

   /* It's a bit hard to build these samplers ahead of time -- don't
    * really know which samplers are going to be used for vertex and
    * fragment programs.
    */
   for (i = 0; i <= softpipe->vs->max_sampler; i++) {
      if (softpipe->vertex_samplers[i]) {
         softpipe->tgsi.vert_samplers_list[i] = 
            get_sampler_variant( i,
                                 sp_sampler(softpipe->vertex_samplers[i]),
                                 softpipe->vertex_sampler_views[i],
                                 TGSI_PROCESSOR_VERTEX );

         sp_sampler_variant_bind_view( softpipe->tgsi.vert_samplers_list[i],
                                       softpipe->vertex_tex_cache[i],
                                       softpipe->vertex_sampler_views[i] );
      }
   }

   if (softpipe->gs) {
      for (i = 0; i <= softpipe->gs->max_sampler; i++) {
         if (softpipe->geometry_samplers[i]) {
            softpipe->tgsi.geom_samplers_list[i] =
               get_sampler_variant(
                  i,
                  sp_sampler(softpipe->geometry_samplers[i]),
                  softpipe->geometry_sampler_views[i],
                  TGSI_PROCESSOR_GEOMETRY );

            sp_sampler_variant_bind_view(
               softpipe->tgsi.geom_samplers_list[i],
               softpipe->geometry_tex_cache[i],
               softpipe->geometry_sampler_views[i] );
         }
      }
   }
a221 14
   for (i = 0; i <= softpipe->fs->info.file_max[TGSI_FILE_SAMPLER]; i++) {
      if (softpipe->fragment_samplers[i]) {
         softpipe->tgsi.frag_samplers_list[i] =
            get_sampler_variant( i,
                                 sp_sampler(softpipe->fragment_samplers[i]),
                                 softpipe->fragment_sampler_views[i],
                                 TGSI_PROCESSOR_FRAGMENT );

         sp_sampler_variant_bind_view( softpipe->tgsi.frag_samplers_list[i],
                                       softpipe->fragment_tex_cache[i],
                                       softpipe->fragment_sampler_views[i] );
      }
   }
}
a226 8
   struct sp_sampler *sp_sampler = (struct sp_sampler *)sampler;
   struct sp_sampler_variant *v, *tmp;

   for (v = sp_sampler->variants; v; v = tmp) {
      tmp = v->next;
      sp_sampler_variant_destroy(v);
   }

@


1.2
log
@Merge Mesa 7.10.3
@
text
@d46 2
a47 2
   struct sp_sampler_varient *varients;
   struct sp_sampler_varient *current;
d63 1
a63 1
   sp_sampler->varients = NULL;
d70 2
a71 2
softpipe_bind_sampler_states(struct pipe_context *pipe,
                             unsigned num, void **sampler)
d79 2
a80 2
   if (num == softpipe->num_samplers &&
       !memcmp(softpipe->sampler, sampler, num * sizeof(void *)))
d86 1
a86 1
      softpipe->sampler[i] = sampler[i];
d88 1
a88 1
      softpipe->sampler[i] = NULL;
d90 1
a90 1
   softpipe->num_samplers = num;
d184 3
a186 3
softpipe_set_sampler_views(struct pipe_context *pipe,
                           unsigned num,
                           struct pipe_sampler_view **views)
d194 3
a196 2
   if (num == softpipe->num_sampler_views &&
       !memcmp(softpipe->sampler_views, views, num * sizeof(struct pipe_sampler_view *)))
d204 2
a205 2
      pipe_sampler_view_reference(&softpipe->sampler_views[i], view);
      sp_tex_tile_cache_set_sampler_view(softpipe->tex_cache[i], view);
d208 1
a208 1
   softpipe->num_sampler_views = num;
d281 1
a281 1
 * Find/create an sp_sampler_varient object for sampling the given texture,
d285 1
a285 1
 * varient for multiple texture units because the sampler varient contains
d287 1
a287 1
 * somewhere outside the sampler varient, we could re-use samplers for
d290 2
a291 2
static struct sp_sampler_varient *
get_sampler_varient( unsigned unit,
d293 1
a293 1
                     struct pipe_resource *resource,
d296 2
a297 2
   struct softpipe_resource *sp_texture = softpipe_resource(resource);
   struct sp_sampler_varient *v = NULL;
d307 4
d319 1
a319 1
      for (v = sampler->varients; v; v = v->next)
d324 3
a326 3
         v = sp_create_sampler_varient( &sampler->base, key );
         v->next = sampler->varients;
         sampler->varients = v;
d336 1
a336 1
softpipe_reset_sampler_varients(struct softpipe_context *softpipe)
a345 6
         struct pipe_resource *texture = NULL;

         if (softpipe->vertex_sampler_views[i]) {
            texture = softpipe->vertex_sampler_views[i]->texture;
         }

d347 1
a347 1
            get_sampler_varient( i,
d349 1
a349 1
                                 texture,
d352 3
a354 3
         sp_sampler_varient_bind_texture( softpipe->tgsi.vert_samplers_list[i], 
                                          softpipe->vertex_tex_cache[i],
                                          texture );
a360 6
            struct pipe_resource *texture = NULL;

            if (softpipe->geometry_sampler_views[i]) {
               texture = softpipe->geometry_sampler_views[i]->texture;
            }

d362 1
a362 1
               get_sampler_varient(
d365 1
a365 1
                  texture,
d368 1
a368 1
            sp_sampler_varient_bind_texture(
d371 1
a371 1
               texture );
d377 1
a377 7
      if (softpipe->sampler[i]) {
         struct pipe_resource *texture = NULL;

         if (softpipe->sampler_views[i]) {
            texture = softpipe->sampler_views[i]->texture;
         }

d379 3
a381 3
            get_sampler_varient( i,
                                 sp_sampler(softpipe->sampler[i]),
                                 texture,
d384 3
a386 3
         sp_sampler_varient_bind_texture( softpipe->tgsi.frag_samplers_list[i], 
                                          softpipe->tex_cache[i],
                                          texture );
d396 1
a396 1
   struct sp_sampler_varient *v, *tmp;
d398 1
a398 1
   for (v = sp_sampler->varients; v; v = tmp) {
d400 1
a400 1
      sp_sampler_varient_destroy(v);
d411 1
a411 1
   pipe->bind_fragment_sampler_states  = softpipe_bind_sampler_states;
d416 1
a416 1
   pipe->set_fragment_sampler_views = softpipe_set_sampler_views;
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d33 1
a35 1
#include "draw/draw_context.h"
d56 1
a56 1
void *
d69 1
a69 1
void
d96 1
a96 1
void
d120 4
d127 14
d142 45
a186 3
void
softpipe_set_sampler_textures(struct pipe_context *pipe,
                              unsigned num, struct pipe_texture **texture)
d194 2
a195 2
   if (num == softpipe->num_textures &&
       !memcmp(softpipe->texture, texture, num * sizeof(struct pipe_texture *)))
d201 1
a201 1
      struct pipe_texture *tex = i < num ? texture[i] : NULL;
d203 2
a204 2
      pipe_texture_reference(&softpipe->texture[i], tex);
      sp_tex_tile_cache_set_texture(softpipe->tex_cache[i], tex);
d207 1
a207 1
   softpipe->num_textures = num;
d213 4
a216 4
void
softpipe_set_vertex_sampler_textures(struct pipe_context *pipe,
                                     unsigned num_textures,
                                     struct pipe_texture **textures)
d221 1
a221 1
   assert(num_textures <= PIPE_MAX_VERTEX_SAMPLERS);
d224 2
a225 2
   if (num_textures == softpipe->num_vertex_textures &&
       !memcmp(softpipe->vertex_textures, textures, num_textures * sizeof(struct pipe_texture *))) {
d232 1
a232 1
      struct pipe_texture *tex = i < num_textures ? textures[i] : NULL;
d234 2
a235 2
      pipe_texture_reference(&softpipe->vertex_textures[i], tex);
      sp_tex_tile_cache_set_texture(softpipe->vertex_tex_cache[i], tex);
d238 36
a273 1
   softpipe->num_vertex_textures = num_textures;
d292 1
a292 1
                     struct pipe_texture *texture,
d295 1
a295 1
   struct softpipe_texture *sp_texture = softpipe_texture(texture);
a329 2


d341 6
d349 2
a350 2
                                sp_sampler(softpipe->vertex_samplers[i]),
                                softpipe->vertex_textures[i],
d354 26
a379 2
                                         softpipe->vertex_tex_cache[i],
                                         softpipe->vertex_textures[i] );
d385 6
d394 1
a394 1
                                 softpipe->texture[i],
d399 1
a399 1
                                          softpipe->texture[i] );
d404 1
a404 3


void
d420 16
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a32 1
#include "util/u_inlines.h"
d35 1
d56 1
a56 1
static void *
d69 1
a69 1
static void
d96 1
a96 1
static void
a119 4
   draw_set_samplers(softpipe->draw,
                     softpipe->vertex_samplers,
                     softpipe->num_vertex_samplers);

a122 7
static void
softpipe_bind_geometry_sampler_states(struct pipe_context *pipe,
                                      unsigned num_samplers,
                                      void **samplers)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);
   unsigned i;
d124 3
a126 52
   assert(num_samplers <= PIPE_MAX_GEOMETRY_SAMPLERS);

   /* Check for no-op */
   if (num_samplers == softpipe->num_geometry_samplers &&
       !memcmp(softpipe->geometry_samplers, samplers, num_samplers * sizeof(void *)))
      return;

   draw_flush(softpipe->draw);

   for (i = 0; i < num_samplers; ++i)
      softpipe->geometry_samplers[i] = samplers[i];
   for (i = num_samplers; i < PIPE_MAX_GEOMETRY_SAMPLERS; ++i)
      softpipe->geometry_samplers[i] = NULL;

   softpipe->num_geometry_samplers = num_samplers;

   softpipe->dirty |= SP_NEW_SAMPLER;
}


static struct pipe_sampler_view *
softpipe_create_sampler_view(struct pipe_context *pipe,
                             struct pipe_resource *resource,
                             const struct pipe_sampler_view *templ)
{
   struct pipe_sampler_view *view = CALLOC_STRUCT(pipe_sampler_view);

   if (view) {
      *view = *templ;
      view->reference.count = 1;
      view->texture = NULL;
      pipe_resource_reference(&view->texture, resource);
      view->context = pipe;
   }

   return view;
}


static void
softpipe_sampler_view_destroy(struct pipe_context *pipe,
                              struct pipe_sampler_view *view)
{
   pipe_resource_reference(&view->texture, NULL);
   FREE(view);
}


static void
softpipe_set_sampler_views(struct pipe_context *pipe,
                           unsigned num,
                           struct pipe_sampler_view **views)
d134 2
a135 2
   if (num == softpipe->num_sampler_views &&
       !memcmp(softpipe->sampler_views, views, num * sizeof(struct pipe_sampler_view *)))
d141 1
a141 1
      struct pipe_sampler_view *view = i < num ? views[i] : NULL;
d143 2
a144 2
      pipe_sampler_view_reference(&softpipe->sampler_views[i], view);
      sp_tex_tile_cache_set_sampler_view(softpipe->tex_cache[i], view);
d147 1
a147 1
   softpipe->num_sampler_views = num;
d153 4
a156 4
static void
softpipe_set_vertex_sampler_views(struct pipe_context *pipe,
                                  unsigned num,
                                  struct pipe_sampler_view **views)
d161 1
a161 1
   assert(num <= PIPE_MAX_VERTEX_SAMPLERS);
d164 2
a165 2
   if (num == softpipe->num_vertex_sampler_views &&
       !memcmp(softpipe->vertex_sampler_views, views, num * sizeof(struct pipe_sampler_view *))) {
d172 1
a172 1
      struct pipe_sampler_view *view = i < num ? views[i] : NULL;
d174 2
a175 2
      pipe_sampler_view_reference(&softpipe->vertex_sampler_views[i], view);
      sp_tex_tile_cache_set_sampler_view(softpipe->vertex_tex_cache[i], view);
d178 1
a178 36
   softpipe->num_vertex_sampler_views = num;

   draw_set_sampler_views(softpipe->draw,
                          softpipe->vertex_sampler_views,
                          softpipe->num_vertex_sampler_views);

   softpipe->dirty |= SP_NEW_TEXTURE;
}


static void
softpipe_set_geometry_sampler_views(struct pipe_context *pipe,
                                    unsigned num,
                                    struct pipe_sampler_view **views)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);
   uint i;

   assert(num <= PIPE_MAX_GEOMETRY_SAMPLERS);

   /* Check for no-op */
   if (num == softpipe->num_geometry_sampler_views &&
       !memcmp(softpipe->geometry_sampler_views, views, num * sizeof(struct pipe_sampler_view *))) {
      return;
   }

   draw_flush(softpipe->draw);

   for (i = 0; i < PIPE_MAX_GEOMETRY_SAMPLERS; i++) {
      struct pipe_sampler_view *view = i < num ? views[i] : NULL;

      pipe_sampler_view_reference(&softpipe->geometry_sampler_views[i], view);
      sp_tex_tile_cache_set_sampler_view(softpipe->geometry_tex_cache[i], view);
   }

   softpipe->num_geometry_sampler_views = num;
d197 1
a197 1
                     struct pipe_resource *resource,
d200 1
a200 1
   struct softpipe_resource *sp_texture = softpipe_resource(resource);
d235 2
a247 6
         struct pipe_resource *texture = NULL;

         if (softpipe->vertex_sampler_views[i]) {
            texture = softpipe->vertex_sampler_views[i]->texture;
         }

d250 2
a251 2
                                 sp_sampler(softpipe->vertex_samplers[i]),
                                 texture,
d255 2
a256 26
                                          softpipe->vertex_tex_cache[i],
                                          texture );
      }
   }

   if (softpipe->gs) {
      for (i = 0; i <= softpipe->gs->max_sampler; i++) {
         if (softpipe->geometry_samplers[i]) {
            struct pipe_resource *texture = NULL;

            if (softpipe->geometry_sampler_views[i]) {
               texture = softpipe->geometry_sampler_views[i]->texture;
            }

            softpipe->tgsi.geom_samplers_list[i] =
               get_sampler_varient(
                  i,
                  sp_sampler(softpipe->geometry_samplers[i]),
                  texture,
                  TGSI_PROCESSOR_GEOMETRY );

            sp_sampler_varient_bind_texture(
               softpipe->tgsi.geom_samplers_list[i],
               softpipe->geometry_tex_cache[i],
               texture );
         }
a261 6
         struct pipe_resource *texture = NULL;

         if (softpipe->sampler_views[i]) {
            texture = softpipe->sampler_views[i]->texture;
         }

d265 1
a265 1
                                 texture,
d270 1
a270 1
                                          texture );
d275 3
a277 1
static void
a292 16
void
softpipe_init_sampler_funcs(struct pipe_context *pipe)
{
   pipe->create_sampler_state = softpipe_create_sampler_state;
   pipe->bind_fragment_sampler_states  = softpipe_bind_sampler_states;
   pipe->bind_vertex_sampler_states = softpipe_bind_vertex_sampler_states;
   pipe->bind_geometry_sampler_states = softpipe_bind_geometry_sampler_states;
   pipe->delete_sampler_state = softpipe_delete_sampler_state;

   pipe->set_fragment_sampler_views = softpipe_set_sampler_views;
   pipe->set_vertex_sampler_views = softpipe_set_vertex_sampler_views;
   pipe->set_geometry_sampler_views = softpipe_set_geometry_sampler_views;

   pipe->create_sampler_view = softpipe_create_sampler_view;
   pipe->sampler_view_destroy = softpipe_sampler_view_destroy;
}
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d44 25
a68 3
/**
 * Bind a range [start, start+num-1] of samplers for a shader stage.
 */
d71 1
a71 4
                             unsigned shader,
                             unsigned start,
                             unsigned num,
                             void **samplers)
d76 1
a76 2
   assert(shader < PIPE_SHADER_TYPES);
   assert(start + num <= Elements(softpipe->samplers[shader]));
d79 2
a80 3
   if (start + num <= softpipe->num_samplers[shader] &&
       !memcmp(softpipe->samplers[shader] + start, samplers,
               num * sizeof(void *))) {
a81 1
   }
d85 4
a88 4
   /* set the new samplers */
   for (i = 0; i < num; i++) {
      softpipe->samplers[shader][start + i] = samplers[i];
   }
d90 1
a90 14
   /* find highest non-null samplers[] entry */
   {
      unsigned j = MAX2(softpipe->num_samplers[shader], start + num);
      while (j > 0 && softpipe->samplers[shader][j - 1] == NULL)
         j--;
      softpipe->num_samplers[shader] = j;
   }

   if (shader == PIPE_SHADER_VERTEX || shader == PIPE_SHADER_GEOMETRY) {
      draw_set_samplers(softpipe->draw,
                        shader,
                        softpipe->samplers[shader],
                        softpipe->num_samplers[shader]);
   }
a95 1

d97 3
a99 2
softpipe_bind_fragment_sampler_states(struct pipe_context *pipe,
                                      unsigned num, void **samplers)
d101 11
a111 2
   softpipe_bind_sampler_states(pipe, PIPE_SHADER_FRAGMENT, 0, num, samplers);
}
d113 10
d124 1
a124 6
static void
softpipe_bind_vertex_sampler_states(struct pipe_context *pipe,
                                    unsigned num,
                                    void **samplers)
{
   softpipe_bind_sampler_states(pipe, PIPE_SHADER_VERTEX, 0, num, samplers);
a126 1

d129 1
a129 1
                                      unsigned num,
d132 20
a151 1
   softpipe_bind_sampler_states(pipe, PIPE_SHADER_GEOMETRY, 0, num, samplers);
d155 18
d183 1
a183 1
void
a184 2
                           unsigned shader,
                           unsigned start,
d191 1
a191 2
   assert(shader < PIPE_SHADER_TYPES);
   assert(start + num <= Elements(softpipe->sampler_views[shader]));
d194 2
a195 3
   if (start + num <= softpipe->num_sampler_views[shader] &&
       !memcmp(softpipe->sampler_views[shader] + start, views,
               num * sizeof(struct pipe_sampler_view *))) {
a196 1
   }
d200 5
a204 22
   /* set the new sampler views */
   for (i = 0; i < num; i++) {
      struct sp_sampler_view *sp_sviewsrc;
      struct sp_sampler_view *sp_sviewdst =
         &softpipe->tgsi.sampler[shader]->sp_sview[start + i];
      struct pipe_sampler_view **pview = &softpipe->sampler_views[shader][start + i];
      pipe_sampler_view_reference(pview, views[i]);
      sp_tex_tile_cache_set_sampler_view(softpipe->tex_cache[shader][start + i],
                                         views[i]);
      /*
       * We don't really have variants, however some bits are different per shader,
       * so just copy?
       */
      sp_sviewsrc = (struct sp_sampler_view *)*pview;
      if (sp_sviewsrc) {
         memcpy(sp_sviewdst, sp_sviewsrc, sizeof(*sp_sviewsrc));
         sp_sviewdst->compute_lambda = softpipe_get_lambda_func(&sp_sviewdst->base, shader);
         sp_sviewdst->cache = softpipe->tex_cache[shader][start + i];
      }
      else {
         memset(sp_sviewdst, 0,  sizeof(*sp_sviewsrc));
      }
d207 15
d223 4
a226 6
   /* find highest non-null sampler_views[] entry */
   {
      unsigned j = MAX2(softpipe->num_sampler_views[shader], start + num);
      while (j > 0 && softpipe->sampler_views[shader][j - 1] == NULL)
         j--;
      softpipe->num_sampler_views[shader] = j;
d229 7
a235 5
   if (shader == PIPE_SHADER_VERTEX || shader == PIPE_SHADER_GEOMETRY) {
      draw_set_sampler_views(softpipe->draw,
                             shader,
                             softpipe->sampler_views[shader],
                             softpipe->num_sampler_views[shader]);
d238 6
d249 1
a249 1
softpipe_set_fragment_sampler_views(struct pipe_context *pipe,
d253 23
a275 1
   softpipe_set_sampler_views(pipe, PIPE_SHADER_FRAGMENT, 0, num, views);
d279 48
a326 6
static void
softpipe_set_vertex_sampler_views(struct pipe_context *pipe,
                                  unsigned num,
                                  struct pipe_sampler_view **views)
{
   softpipe_set_sampler_views(pipe, PIPE_SHADER_VERTEX, 0, num, views);
d330 2
a331 4
static void
softpipe_set_geometry_sampler_views(struct pipe_context *pipe,
                                    unsigned num,
                                    struct pipe_sampler_view **views)
d333 69
a401 1
   softpipe_set_sampler_views(pipe, PIPE_SHADER_GEOMETRY, 0, num, views);
a403 1

d408 8
d424 1
a424 1
   pipe->bind_fragment_sampler_states  = softpipe_bind_fragment_sampler_states;
d429 1
a429 1
   pipe->set_fragment_sampler_views = softpipe_set_fragment_sampler_views;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d60 7
d93 28
d143 7
d197 27
d235 3
a237 1
   pipe->bind_sampler_states = softpipe_bind_sampler_states;
d240 4
a244 1
   pipe->set_sampler_views = softpipe_set_sampler_views;
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a33 1
#include "util/u_format.h"
a41 2
#include "sp_screen.h"
#include "state_tracker/sw_winsys.h"
a158 153
}


static void
prepare_shader_sampling(
   struct softpipe_context *sp,
   unsigned num,
   struct pipe_sampler_view **views,
   unsigned shader_type,
   struct pipe_resource *mapped_tex[PIPE_MAX_SHADER_SAMPLER_VIEWS])
{

   unsigned i;
   uint32_t row_stride[PIPE_MAX_TEXTURE_LEVELS];
   uint32_t img_stride[PIPE_MAX_TEXTURE_LEVELS];
   uint32_t mip_offsets[PIPE_MAX_TEXTURE_LEVELS];
   const void *addr;

   assert(num <= PIPE_MAX_SHADER_SAMPLER_VIEWS);
   if (!num)
      return;

   for (i = 0; i < PIPE_MAX_SHADER_SAMPLER_VIEWS; i++) {
      struct pipe_sampler_view *view = i < num ? views[i] : NULL;

      if (view) {
         struct pipe_resource *tex = view->texture;
         struct softpipe_resource *sp_tex = softpipe_resource(tex);
         unsigned width0 = tex->width0;
         unsigned num_layers = tex->depth0;
         unsigned first_level = 0;
         unsigned last_level = 0;

         /* We're referencing the texture's internal data, so save a
          * reference to it.
          */
         pipe_resource_reference(&mapped_tex[i], tex);

         if (!sp_tex->dt) {
            /* regular texture - setup array of mipmap level offsets */
            struct pipe_resource *res = view->texture;
            int j;

            if (res->target != PIPE_BUFFER) {
               first_level = view->u.tex.first_level;
               last_level = view->u.tex.last_level;
               assert(first_level <= last_level);
               assert(last_level <= res->last_level);
               addr = sp_tex->data;

               for (j = first_level; j <= last_level; j++) {
                  mip_offsets[j] = sp_tex->level_offset[j];
                  row_stride[j] = sp_tex->stride[j];
                  img_stride[j] = sp_tex->img_stride[j];
               }
               if (res->target == PIPE_TEXTURE_1D_ARRAY ||
                   res->target == PIPE_TEXTURE_2D_ARRAY ||
                   res->target == PIPE_TEXTURE_CUBE_ARRAY) {
                  num_layers = view->u.tex.last_layer - view->u.tex.first_layer + 1;
                  for (j = first_level; j <= last_level; j++) {
                     mip_offsets[j] += view->u.tex.first_layer *
                                       sp_tex->img_stride[j];
                  }
                  if (res->target == PIPE_TEXTURE_CUBE_ARRAY) {
                     assert(num_layers % 6 == 0);
                  }
                  assert(view->u.tex.first_layer <= view->u.tex.last_layer);
                  assert(view->u.tex.last_layer < res->array_size);
               }
            }
            else {
               unsigned view_blocksize = util_format_get_blocksize(view->format);
               addr = sp_tex->data;
               /* probably don't really need to fill that out */
               mip_offsets[0] = 0;
               row_stride[0] = 0;
               img_stride[0] = 0;

               /* everything specified in number of elements here. */
               width0 = view->u.buf.last_element - view->u.buf.first_element + 1;
               addr = (uint8_t *)addr + view->u.buf.first_element *
                               view_blocksize;
               assert(view->u.buf.first_element <= view->u.buf.last_element);
               assert(view->u.buf.last_element * view_blocksize < res->width0);
            }
         }
         else {
            /* display target texture/surface */
            /*
             * XXX: Where should this be unmapped?
             */
            struct softpipe_screen *screen = softpipe_screen(tex->screen);
            struct sw_winsys *winsys = screen->winsys;
            addr = winsys->displaytarget_map(winsys, sp_tex->dt,
                                             PIPE_TRANSFER_READ);
            row_stride[0] = sp_tex->stride[0];
            img_stride[0] = sp_tex->img_stride[0];
            mip_offsets[0] = 0;
            assert(addr);
         }
         draw_set_mapped_texture(sp->draw,
                                 shader_type,
                                 i,
                                 width0, tex->height0, num_layers,
                                 first_level, last_level,
                                 addr,
                                 row_stride, img_stride, mip_offsets);
      }
   }
}


/**
 * Called during state validation when SP_NEW_TEXTURE is set.
 */
void
softpipe_prepare_vertex_sampling(struct softpipe_context *sp,
                                 unsigned num,
                                 struct pipe_sampler_view **views)
{
   prepare_shader_sampling(sp, num, views, PIPE_SHADER_VERTEX,
                           sp->mapped_vs_tex);
}

void
softpipe_cleanup_vertex_sampling(struct softpipe_context *ctx)
{
   unsigned i;
   for (i = 0; i < Elements(ctx->mapped_vs_tex); i++) {
      pipe_resource_reference(&ctx->mapped_vs_tex[i], NULL);
   }
}


/**
 * Called during state validation when SP_NEW_TEXTURE is set.
 */
void
softpipe_prepare_geometry_sampling(struct softpipe_context *sp,
                                   unsigned num,
                                   struct pipe_sampler_view **views)
{
   prepare_shader_sampling(sp, num, views, PIPE_SHADER_GEOMETRY,
                           sp->mapped_gs_tex);
}

void
softpipe_cleanup_geometry_sampling(struct softpipe_context *ctx)
{
   unsigned i;
   for (i = 0; i < Elements(ctx->mapped_gs_tex); i++) {
      pipe_resource_reference(&ctx->mapped_gs_tex[i], NULL);
   }
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d34 1
d43 2
d162 153
@


