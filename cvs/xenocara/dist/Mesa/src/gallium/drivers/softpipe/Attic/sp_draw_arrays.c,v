head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.34;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.01.04;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.51;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.15;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.08.45;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.46.00;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Author:
 *    Brian Paul
 *    Keith Whitwell
 */


#include "pipe/p_defines.h"
#include "pipe/p_context.h"
#include "util/u_inlines.h"
#include "util/u_prim.h"

#include "sp_context.h"
#include "sp_query.h"
#include "sp_state.h"
#include "sp_texture.h"

#include "draw/draw_context.h"

/**
 * This function handles drawing indexed and non-indexed prims,
 * instanced and non-instanced drawing, with or without min/max element
 * indexes.
 * All the other drawing functions are expressed in terms of this
 * function.
 *
 * For non-indexed prims, indexBuffer should be NULL.
 * For non-instanced drawing, instanceCount should be 1.
 * When the min/max element indexes aren't known, minIndex should be 0
 * and maxIndex should be ~0.
 */
void
softpipe_draw_vbo(struct pipe_context *pipe,
                  const struct pipe_draw_info *info)
{
   struct softpipe_context *sp = softpipe_context(pipe);
   struct draw_context *draw = sp->draw;
   const void *mapped_indices = NULL;
   unsigned i;

   if (!softpipe_check_render_cond(sp))
      return;

   sp->reduced_api_prim = u_reduced_prim(info->mode);

   if (sp->dirty) {
      softpipe_update_derived(sp, sp->reduced_api_prim);
   }

   /* Map vertex buffers */
   for (i = 0; i < sp->num_vertex_buffers; i++) {
      const void *buf = sp->vertex_buffer[i].user_buffer;
      size_t size = ~0;
      if (!buf) {
         if (!sp->vertex_buffer[i].buffer) {
            continue;
         }
         buf = softpipe_resource_data(sp->vertex_buffer[i].buffer);
         size = sp->vertex_buffer[i].buffer->width0;
      }
      draw_set_mapped_vertex_buffer(draw, i, buf, size);
   }

   /* Map index buffer, if present */
   if (info->indexed) {
      unsigned available_space = ~0;
      mapped_indices = sp->index_buffer.user_buffer;
      if (!mapped_indices) {
         mapped_indices = softpipe_resource_data(sp->index_buffer.buffer);
         if (sp->index_buffer.buffer->width0 > sp->index_buffer.offset)
            available_space =
               (sp->index_buffer.buffer->width0 - sp->index_buffer.offset);
         else
            available_space = 0;
      }

      draw_set_indexes(draw,
                       (ubyte *) mapped_indices + sp->index_buffer.offset,
                       sp->index_buffer.index_size, available_space);
   }


   for (i = 0; i < sp->num_so_targets; i++) {
      void *buf = 0;
      if (sp->so_targets[i]) {
         buf = softpipe_resource(sp->so_targets[i]->target.buffer)->data;
         sp->so_targets[i]->mapping = buf;
      }
   }

   draw_set_mapped_so_targets(draw, sp->num_so_targets,
                              sp->so_targets);

   if (sp->gs && !sp->gs->shader.tokens) {
      /* we have an empty geometry shader with stream output, so
         attach the stream output info to the current vertex shader */
      if (sp->vs) {
         draw_vs_attach_so(sp->vs->draw_data, &sp->gs->shader.stream_output);
      }
   }
   draw_collect_pipeline_statistics(draw,
                                    sp->active_statistics_queries > 0);

   /* draw! */
   draw_vbo(draw, info);

   /* unmap vertex/index buffers - will cause draw module to flush */
   for (i = 0; i < sp->num_vertex_buffers; i++) {
      draw_set_mapped_vertex_buffer(draw, i, NULL, 0);
   }
   if (mapped_indices) {
      draw_set_indexes(draw, NULL, 0, 0);
   }

   draw_set_mapped_so_targets(draw, 0, NULL);

   /*
    * TODO: Flush only when a user vertex/index buffer is present
    * (or even better, modify draw module to do this
    * internally when this condition is seen?)
    */
   draw_flush(draw);

   /* Note: leave drawing surfaces mapped */
   sp->dirty_render_cache = TRUE;
}
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a36 1
#include "util/u_draw.h"
a42 1
#include "sp_screen.h"
a69 5
   if (info->indirect) {
      util_draw_indirect(pipe, info);
      return;
   }

a119 9
   if (softpipe_screen(sp->pipe.screen)->use_llvm) {
      softpipe_prepare_vertex_sampling(sp,
                                       sp->num_sampler_views[PIPE_SHADER_VERTEX],
                                       sp->sampler_views[PIPE_SHADER_VERTEX]);
      softpipe_prepare_geometry_sampling(sp,
                                         sp->num_sampler_views[PIPE_SHADER_GEOMETRY],
                                         sp->sampler_views[PIPE_SHADER_GEOMETRY]);
   }

a141 5

   if (softpipe_screen(sp->pipe.screen)->use_llvm) {
      softpipe_cleanup_vertex_sampling(sp);
      softpipe_cleanup_geometry_sampling(sp);
   }
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d37 1
d44 1
d72 5
d127 9
d158 5
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d84 1
a84 1
         buf = softpipe_resource(sp->vertex_buffer[i].buffer)->data;
d95 1
a95 1
         mapped_indices = softpipe_resource(sp->index_buffer.buffer)->data;
d110 5
a114 2
      void *buf = softpipe_resource(sp->so_targets[i]->target.buffer)->data;
      sp->so_targets[i]->mapping = buf;
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a45 52




void
softpipe_draw_stream_output(struct pipe_context *pipe, unsigned mode)
{
   struct softpipe_context *sp = softpipe_context(pipe);
   struct draw_context *draw = sp->draw;
   const unsigned start = 0;
   const unsigned count = sp->so_target.so_count[0];
   void *buf = sp->so_target.buffer[0]->data;
   int offset = sp->so_target.offset[0];

   if (!softpipe_check_render_cond(sp) ||
       sp->so_target.num_buffers != 1)
      return;

   sp->reduced_api_prim = u_reduced_prim(mode);

   if (sp->dirty) {
      softpipe_update_derived(sp);
   }

   softpipe_map_transfers(sp);

   /* Map so buffers */
   if (offset < 0) /* we were appending so start from beginning */
      offset = 0;
   buf = (void*)((int32_t*)buf + offset);
   draw_set_mapped_vertex_buffer(draw, 0, buf);

   draw_set_mapped_index_buffer(draw, NULL);

   /* draw! */
   draw_arrays(draw, mode, start, count);

   /* unmap vertex/index buffers - will cause draw module to flush */
   draw_set_mapped_vertex_buffer(draw, 0, NULL);

   /*
    * TODO: Flush only when a user vertex/index buffer is present
    * (or even better, modify draw module to do this
    * internally when this condition is seen?)
    */
   draw_flush(draw);

   /* Note: leave drawing surfaces mapped */
   sp->dirty_render_cache = TRUE;
}


d64 1
a64 1
   void *mapped_indices = NULL;
d73 1
a73 1
      softpipe_update_derived(sp);
a75 2
   softpipe_map_transfers(sp);

d78 10
a87 2
      void *buf = softpipe_resource(sp->vertex_buffer[i].buffer)->data;
      draw_set_mapped_vertex_buffer(draw, i, buf);
d91 25
a115 2
   if (info->indexed && sp->index_buffer.buffer)
      mapped_indices = softpipe_resource(sp->index_buffer.buffer)->data;
d117 9
a125 1
   draw_set_mapped_index_buffer(draw, mapped_indices);
d132 1
a132 1
      draw_set_mapped_vertex_buffer(draw, i, NULL);
d135 1
a135 1
      draw_set_mapped_index_buffer(draw, NULL);
d137 2
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a35 1
#include "util/u_simple_screen.h"
d42 1
a47 5
static void
softpipe_map_constant_buffers(struct softpipe_context *sp)
{
   struct pipe_winsys *ws = sp->pipe.winsys;
   uint i;
a48 2
   for (i = 0; i < PIPE_SHADER_TYPES; i++) {
      uint j;
d50 2
a51 30
      for (j = 0; j < PIPE_MAX_CONSTANT_BUFFERS; j++) {
         if (sp->constants[i][j] && sp->constants[i][j]->size) {
            sp->mapped_constants[i][j] = ws->buffer_map(ws,
                                                        sp->constants[i][j],
                                                        PIPE_BUFFER_USAGE_CPU_READ);
         }
      }
   }

   for (i = 0; i < PIPE_MAX_CONSTANT_BUFFERS; i++) {
      if (sp->constants[PIPE_SHADER_VERTEX][i]) {
         draw_set_mapped_constant_buffer(sp->draw,
                                         PIPE_SHADER_VERTEX,
                                         i,
                                         sp->mapped_constants[PIPE_SHADER_VERTEX][i],
                                         sp->constants[PIPE_SHADER_VERTEX][i]->size);
      }
      if (sp->constants[PIPE_SHADER_GEOMETRY][i]) {
         draw_set_mapped_constant_buffer(sp->draw,
                                         PIPE_SHADER_GEOMETRY,
                                         i,
                                         sp->mapped_constants[PIPE_SHADER_GEOMETRY][i],
                                         sp->constants[PIPE_SHADER_GEOMETRY][i]->size);
      }
   }
}


static void
softpipe_unmap_constant_buffers(struct softpipe_context *sp)
d53 6
a58 2
   struct pipe_winsys *ws = sp->pipe.winsys;
   uint i;
d60 3
a62 4
   /* really need to flush all prims since the vert/frag shaders const buffers
    * are going away now.
    */
   draw_flush(sp->draw);
d64 1
a64 12
   for (i = 0; i < PIPE_MAX_CONSTANT_BUFFERS; i++) {
      draw_set_mapped_constant_buffer(sp->draw,
                                      PIPE_SHADER_VERTEX,
                                      i,
                                      NULL,
                                      0);
      draw_set_mapped_constant_buffer(sp->draw,
                                      PIPE_SHADER_GEOMETRY,
                                      i,
                                      NULL,
                                      0);
   }
d66 2
a67 9
   for (i = 0; i < PIPE_SHADER_TYPES; i++) {
      uint j;

      for (j = 0; j < PIPE_MAX_CONSTANT_BUFFERS; j++) {
         if (sp->constants[i][j] && sp->constants[i][j]->size) {
            ws->buffer_unmap(ws, sp->constants[i][j]);
         }
         sp->mapped_constants[i][j] = NULL;
      }
a68 1
}
d70 1
d72 5
a76 16
/**
 * Draw vertex arrays, with optional indexing.
 * Basically, map the vertex buffers (and drawing surfaces), then hand off
 * the drawing to the 'draw' module.
 */
static void
softpipe_draw_range_elements_instanced(struct pipe_context *pipe,
                                       struct pipe_buffer *indexBuffer,
                                       unsigned indexSize,
                                       unsigned minIndex,
                                       unsigned maxIndex,
                                       unsigned mode,
                                       unsigned start,
                                       unsigned count,
                                       unsigned startInstance,
                                       unsigned instanceCount);
d78 1
d80 2
a81 15
void
softpipe_draw_arrays(struct pipe_context *pipe, unsigned mode,
                     unsigned start, unsigned count)
{
   softpipe_draw_range_elements_instanced(pipe,
                                          NULL,
                                          0,
                                          0,
                                          0xffffffff,
                                          mode,
                                          start,
                                          count,
                                          0,
                                          1);
}
d83 2
d86 6
a91 19
void
softpipe_draw_range_elements(struct pipe_context *pipe,
                             struct pipe_buffer *indexBuffer,
                             unsigned indexSize,
                             unsigned min_index,
                             unsigned max_index,
                             unsigned mode, unsigned start, unsigned count)
{
   softpipe_draw_range_elements_instanced(pipe,
                                          indexBuffer,
                                          indexSize,
                                          min_index,
                                          max_index,
                                          mode,
                                          start,
                                          count,
                                          0,
                                          1);
}
d93 2
a94 17

void
softpipe_draw_elements(struct pipe_context *pipe,
                       struct pipe_buffer *indexBuffer,
                       unsigned indexSize,
                       unsigned mode, unsigned start, unsigned count)
{
   softpipe_draw_range_elements_instanced(pipe,
                                          indexBuffer,
                                          indexSize,
                                          0,
                                          0xffffffff,
                                          mode,
                                          start,
                                          count,
                                          0,
                                          1);
a96 19
void
softpipe_draw_arrays_instanced(struct pipe_context *pipe,
                               unsigned mode,
                               unsigned start,
                               unsigned count,
                               unsigned startInstance,
                               unsigned instanceCount)
{
   softpipe_draw_range_elements_instanced(pipe,
                                          NULL,
                                          0,
                                          0,
                                          0xffffffff,
                                          mode,
                                          start,
                                          count,
                                          startInstance,
                                          instanceCount);
}
d98 12
d111 2
a112 32
softpipe_draw_elements_instanced(struct pipe_context *pipe,
                                 struct pipe_buffer *indexBuffer,
                                 unsigned indexSize,
                                 unsigned mode,
                                 unsigned start,
                                 unsigned count,
                                 unsigned startInstance,
                                 unsigned instanceCount)
{
   softpipe_draw_range_elements_instanced(pipe,
                                          indexBuffer,
                                          indexSize,
                                          0,
                                          0xffffffff,
                                          mode,
                                          start,
                                          count,
                                          startInstance,
                                          instanceCount);
}

static void
softpipe_draw_range_elements_instanced(struct pipe_context *pipe,
                                       struct pipe_buffer *indexBuffer,
                                       unsigned indexSize,
                                       unsigned minIndex,
                                       unsigned maxIndex,
                                       unsigned mode,
                                       unsigned start,
                                       unsigned count,
                                       unsigned startInstance,
                                       unsigned instanceCount)
d116 1
d122 1
a122 1
   sp->reduced_api_prim = u_reduced_prim(mode);
a128 1
   softpipe_map_constant_buffers(sp);
d132 1
a132 5
      void *buf;

      buf = pipe_buffer_map(pipe->screen,
                            sp->vertex_buffer[i].buffer,
                            PIPE_BUFFER_USAGE_CPU_READ);
d137 2
a138 2
   if (indexBuffer) {
      void *mapped_indexes;
d140 1
a140 16
      mapped_indexes = pipe_buffer_map(pipe->screen,
                                       indexBuffer,
                                       PIPE_BUFFER_USAGE_CPU_READ);
      draw_set_mapped_element_buffer_range(draw,
                                           indexSize,
                                           minIndex,
                                           maxIndex,
                                           mapped_indexes);
   } else {
      /* no index/element buffer */
      draw_set_mapped_element_buffer_range(draw,
                                           0,
                                           start,
                                           start + count - 1,
                                           NULL);
   }
d143 1
a143 1
   draw_arrays_instanced(draw, mode, start, count, startInstance, instanceCount);
a147 1
      pipe_buffer_unmap(pipe->screen, sp->vertex_buffer[i].buffer);
d149 2
a150 3
   if (indexBuffer) {
      draw_set_mapped_element_buffer(draw, 0, NULL);
      pipe_buffer_unmap(pipe->screen, indexBuffer);
d153 7
a160 2
   softpipe_unmap_constant_buffers(sp);

@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d36 1
a42 1
#include "sp_texture.h"
d48 35
d85 2
a86 2
void
softpipe_draw_stream_output(struct pipe_context *pipe, unsigned mode)
d88 7
a94 6
   struct softpipe_context *sp = softpipe_context(pipe);
   struct draw_context *draw = sp->draw;
   const unsigned start = 0;
   const unsigned count = sp->so_target.so_count[0];
   void *buf = sp->so_target.buffer[0]->data;
   int offset = sp->so_target.offset[0];
d96 12
a107 3
   if (!softpipe_check_render_cond(sp) ||
       sp->so_target.num_buffers != 1)
      return;
d109 2
a110 1
   sp->reduced_api_prim = u_reduced_prim(mode);
d112 6
a117 2
   if (sp->dirty) {
      softpipe_update_derived(sp);
d119 1
a120 1
   softpipe_map_transfers(sp);
d122 17
a138 5
   /* Map so buffers */
   if (offset < 0) /* we were appending so start from beginning */
      offset = 0;
   buf = (void*)((int32_t*)buf + offset);
   draw_set_mapped_vertex_buffer(draw, 0, buf);
d140 15
a154 1
   draw_set_mapped_index_buffer(draw, NULL);
a155 2
   /* draw! */
   draw_arrays(draw, mode, start, count);
d157 19
a175 2
   /* unmap vertex/index buffers - will cause draw module to flush */
   draw_set_mapped_vertex_buffer(draw, 0, NULL);
a176 6
   /*
    * TODO: Flush only when a user vertex/index buffer is present
    * (or even better, modify draw module to do this
    * internally when this condition is seen?)
    */
   draw_flush(draw);
d178 16
a193 2
   /* Note: leave drawing surfaces mapped */
   sp->dirty_render_cache = TRUE;
d196 19
a215 12
/**
 * This function handles drawing indexed and non-indexed prims,
 * instanced and non-instanced drawing, with or without min/max element
 * indexes.
 * All the other drawing functions are expressed in terms of this
 * function.
 *
 * For non-indexed prims, indexBuffer should be NULL.
 * For non-instanced drawing, instanceCount should be 1.
 * When the min/max element indexes aren't known, minIndex should be 0
 * and maxIndex should be ~0.
 */
d217 32
a248 2
softpipe_draw_vbo(struct pipe_context *pipe,
                  const struct pipe_draw_info *info)
a251 1
   void *mapped_indices = NULL;
d257 1
a257 1
   sp->reduced_api_prim = u_reduced_prim(info->mode);
d264 1
d268 5
a272 1
      void *buf = softpipe_resource(sp->vertex_buffer[i].buffer)->data;
d277 2
a278 2
   if (info->indexed && sp->index_buffer.buffer)
      mapped_indices = softpipe_resource(sp->index_buffer.buffer)->data;
d280 16
a295 1
   draw_set_mapped_index_buffer(draw, mapped_indices);
d298 1
a298 1
   draw_vbo(draw, info);
d303 1
d305 3
a307 2
   if (mapped_indices) {
      draw_set_mapped_index_buffer(draw, NULL);
d310 2
a311 6
   /*
    * TODO: Flush only when a user vertex/index buffer is present
    * (or even better, modify draw module to do this
    * internally when this condition is seen?)
    */
   draw_flush(draw);
a312 1
   /* Note: leave drawing surfaces mapped */
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d46 52
d116 1
a116 1
   const void *mapped_indices = NULL;
d125 1
a125 1
      softpipe_update_derived(sp, sp->reduced_api_prim);
d128 2
d132 2
a133 10
      const void *buf = sp->vertex_buffer[i].user_buffer;
      size_t size = ~0;
      if (!buf) {
         if (!sp->vertex_buffer[i].buffer) {
            continue;
         }
         buf = softpipe_resource(sp->vertex_buffer[i].buffer)->data;
         size = sp->vertex_buffer[i].buffer->width0;
      }
      draw_set_mapped_vertex_buffer(draw, i, buf, size);
d137 2
a138 25
   if (info->indexed) {
      unsigned available_space = ~0;
      mapped_indices = sp->index_buffer.user_buffer;
      if (!mapped_indices) {
         mapped_indices = softpipe_resource(sp->index_buffer.buffer)->data;
         if (sp->index_buffer.buffer->width0 > sp->index_buffer.offset)
            available_space =
               (sp->index_buffer.buffer->width0 - sp->index_buffer.offset);
         else
            available_space = 0;
      }

      draw_set_indexes(draw,
                       (ubyte *) mapped_indices + sp->index_buffer.offset,
                       sp->index_buffer.index_size, available_space);
   }


   for (i = 0; i < sp->num_so_targets; i++) {
      void *buf = softpipe_resource(sp->so_targets[i]->target.buffer)->data;
      sp->so_targets[i]->mapping = buf;
   }

   draw_set_mapped_so_targets(draw, sp->num_so_targets,
                              sp->so_targets);
d140 1
a140 9
   if (sp->gs && !sp->gs->shader.tokens) {
      /* we have an empty geometry shader with stream output, so
         attach the stream output info to the current vertex shader */
      if (sp->vs) {
         draw_vs_attach_so(sp->vs->draw_data, &sp->gs->shader.stream_output);
      }
   }
   draw_collect_pipeline_statistics(draw,
                                    sp->active_statistics_queries > 0);
d147 1
a147 1
      draw_set_mapped_vertex_buffer(draw, i, NULL, 0);
d150 1
a150 1
      draw_set_indexes(draw, NULL, 0, 0);
a151 2

   draw_set_mapped_so_targets(draw, 0, NULL);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d84 1
a84 1
         buf = softpipe_resource_data(sp->vertex_buffer[i].buffer);
d95 1
a95 1
         mapped_indices = softpipe_resource_data(sp->index_buffer.buffer);
d110 2
a111 5
      void *buf = 0;
      if (sp->so_targets[i]) {
         buf = softpipe_resource(sp->so_targets[i]->target.buffer)->data;
         sp->so_targets[i]->mapping = buf;
      }
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a36 1
#include "util/u_draw.h"
a42 1
#include "sp_screen.h"
a69 5
   if (info->indirect) {
      util_draw_indirect(pipe, info);
      return;
   }

a119 9
   if (softpipe_screen(sp->pipe.screen)->use_llvm) {
      softpipe_prepare_vertex_sampling(sp,
                                       sp->num_sampler_views[PIPE_SHADER_VERTEX],
                                       sp->sampler_views[PIPE_SHADER_VERTEX]);
      softpipe_prepare_geometry_sampling(sp,
                                         sp->num_sampler_views[PIPE_SHADER_GEOMETRY],
                                         sp->sampler_views[PIPE_SHADER_GEOMETRY]);
   }

a141 5

   if (softpipe_screen(sp->pipe.screen)->use_llvm) {
      softpipe_cleanup_vertex_sampling(sp);
      softpipe_cleanup_geometry_sampling(sp);
   }
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d37 1
d44 1
d72 5
d127 9
d158 5
@


