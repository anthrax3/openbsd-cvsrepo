head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.34;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.01.07;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.55;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.15;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.08.49;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.46.04;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#ifndef SP_TEXTURE_H
#define SP_TEXTURE_H


#include "pipe/p_state.h"
#include "sp_limits.h"


struct pipe_context;
struct pipe_screen;
struct softpipe_context;


/**
 * Subclass of pipe_resource.
 */
struct softpipe_resource
{
   struct pipe_resource base;

   unsigned long level_offset[SP_MAX_TEXTURE_2D_LEVELS];
   unsigned stride[SP_MAX_TEXTURE_2D_LEVELS];

   /**
    * Display target, only valid for PIPE_TEXTURE_2D with the
    * PIPE_BIND_DISPLAY_TARGET usage.
    */
   struct sw_displaytarget *dt;

   /**
    * Malloc'ed data for regular buffers and textures, or a mapping to dt above.
    */
   void *data;

   /* True if texture images are power-of-two in all dimensions:
    */
   boolean pot;
   boolean userBuffer;

   unsigned timestamp;
};


/**
 * Subclass of pipe_transfer.
 */
struct softpipe_transfer
{
   struct pipe_transfer base;

   unsigned long offset;
};


/** cast wrappers */
static INLINE struct softpipe_resource *
softpipe_resource(struct pipe_resource *pt)
{
   return (struct softpipe_resource *) pt;
}

static INLINE struct softpipe_transfer *
softpipe_transfer(struct pipe_transfer *pt)
{
   return (struct softpipe_transfer *) pt;
}


/**
 * Return pointer to a resource's actual data.
 * This is a short-cut instead of using map()/unmap(), which should
 * probably be fixed.
 */
static INLINE void *
softpipe_resource_data(struct pipe_resource *pt)
{
   if (!pt)
      return NULL;

   assert(softpipe_resource(pt)->dt == NULL);
   return softpipe_resource(pt)->data;
}


extern void
softpipe_init_screen_texture_funcs(struct pipe_screen *screen);

extern void
softpipe_init_texture_funcs(struct pipe_context *pipe);


#endif /* SP_TEXTURE */
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a49 1
   unsigned img_stride[SP_MAX_TEXTURE_2D_LEVELS];
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d50 1
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d93 16
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a81 1

@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d33 1
a33 1
#include "pipe/p_video_state.h"
d41 15
a55 3
struct softpipe_texture
{
   struct pipe_texture base;
d57 2
a58 4
   unsigned long level_offset[PIPE_MAX_TEXTURE_LEVELS];
   unsigned stride[PIPE_MAX_TEXTURE_LEVELS];

   /* The data is held here:
d60 1
a60 1
   struct pipe_buffer *buffer;
d65 1
d70 4
a80 8
struct softpipe_video_surface
{
   struct pipe_video_surface base;

   /* The data is held here:
    */
   struct pipe_texture *tex;
};
d84 2
a85 2
static INLINE struct softpipe_texture *
softpipe_texture(struct pipe_texture *pt)
d87 1
a87 1
   return (struct softpipe_texture *) pt;
a95 6
static INLINE struct softpipe_video_surface *
softpipe_video_surface(struct pipe_video_surface *pvs)
{
   return (struct softpipe_video_surface *) pvs;
}

d99 3
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d33 1
a33 1
#include "sp_limits.h"
d41 6
a46 15
/**
 * Subclass of pipe_resource.
 */
struct softpipe_resource
{
   struct pipe_resource base;

   unsigned long level_offset[SP_MAX_TEXTURE_2D_LEVELS];
   unsigned stride[SP_MAX_TEXTURE_2D_LEVELS];

   /**
    * Display target, only valid for PIPE_TEXTURE_2D with the
    * PIPE_BIND_DISPLAY_TARGET usage.
    */
   struct sw_displaytarget *dt;
d48 1
a48 2
   /**
    * Malloc'ed data for regular buffers and textures, or a mapping to dt above.
d50 1
a50 1
   void *data;
a54 1
   boolean userBuffer;
a58 4

/**
 * Subclass of pipe_transfer.
 */
d66 8
d77 2
a78 2
static INLINE struct softpipe_resource *
softpipe_resource(struct pipe_resource *pt)
d80 1
a80 1
   return (struct softpipe_resource *) pt;
d89 6
a97 3

extern void
softpipe_init_texture_funcs(struct pipe_context *pipe);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d82 1
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
a92 16
}


/**
 * Return pointer to a resource's actual data.
 * This is a short-cut instead of using map()/unmap(), which should
 * probably be fixed.
 */
static INLINE void *
softpipe_resource_data(struct pipe_resource *pt)
{
   if (!pt)
      return NULL;

   assert(softpipe_resource(pt)->dt == NULL);
   return softpipe_resource(pt)->data;
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a49 1
   unsigned img_stride[SP_MAX_TEXTURE_2D_LEVELS];
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d50 1
@


