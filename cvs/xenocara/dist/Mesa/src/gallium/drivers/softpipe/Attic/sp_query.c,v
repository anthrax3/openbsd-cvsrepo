head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.34;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.01.05;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.53;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.15;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.08.47;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.46.02;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Author:
 *    Keith Whitwell <keithw@@vmware.com>
 */

#include "draw/draw_context.h"
#include "os/os_time.h"
#include "pipe/p_defines.h"
#include "util/u_memory.h"
#include "sp_context.h"
#include "sp_query.h"
#include "sp_state.h"

struct softpipe_query {
   unsigned type;
   uint64_t start;
   uint64_t end;
   struct pipe_query_data_so_statistics so;
   struct pipe_query_data_pipeline_statistics stats;
};


static struct softpipe_query *softpipe_query( struct pipe_query *p )
{
   return (struct softpipe_query *)p;
}

static struct pipe_query *
softpipe_create_query(struct pipe_context *pipe, 
		      unsigned type)
{
   struct softpipe_query* sq;

   assert(type == PIPE_QUERY_OCCLUSION_COUNTER ||
          type == PIPE_QUERY_OCCLUSION_PREDICATE ||
          type == PIPE_QUERY_TIME_ELAPSED ||
          type == PIPE_QUERY_SO_STATISTICS ||
          type == PIPE_QUERY_SO_OVERFLOW_PREDICATE ||
          type == PIPE_QUERY_PRIMITIVES_EMITTED ||
          type == PIPE_QUERY_PRIMITIVES_GENERATED || 
          type == PIPE_QUERY_PIPELINE_STATISTICS ||
          type == PIPE_QUERY_GPU_FINISHED ||
          type == PIPE_QUERY_TIMESTAMP ||
          type == PIPE_QUERY_TIMESTAMP_DISJOINT);
   sq = CALLOC_STRUCT( softpipe_query );
   sq->type = type;

   return (struct pipe_query *)sq;
}


static void
softpipe_destroy_query(struct pipe_context *pipe, struct pipe_query *q)
{
   FREE(q);
}


static void
softpipe_begin_query(struct pipe_context *pipe, struct pipe_query *q)
{
   struct softpipe_context *softpipe = softpipe_context( pipe );
   struct softpipe_query *sq = softpipe_query(q);

   switch (sq->type) {
   case PIPE_QUERY_OCCLUSION_COUNTER:
   case PIPE_QUERY_OCCLUSION_PREDICATE:
      sq->start = softpipe->occlusion_count;
      break;
   case PIPE_QUERY_TIME_ELAPSED:
      sq->start = os_time_get_nano();
      break;
   case PIPE_QUERY_SO_STATISTICS:
      sq->so.num_primitives_written = softpipe->so_stats.num_primitives_written;
      sq->so.primitives_storage_needed = softpipe->so_stats.primitives_storage_needed;
      break;
   case PIPE_QUERY_SO_OVERFLOW_PREDICATE:
      sq->end = FALSE;
      break;
   case PIPE_QUERY_PRIMITIVES_EMITTED:
      sq->so.num_primitives_written = softpipe->so_stats.num_primitives_written;
      break;
   case PIPE_QUERY_PRIMITIVES_GENERATED:
      sq->so.primitives_storage_needed = softpipe->so_stats.primitives_storage_needed;
      break;
   case PIPE_QUERY_TIMESTAMP:
   case PIPE_QUERY_GPU_FINISHED:
   case PIPE_QUERY_TIMESTAMP_DISJOINT:
      break;
   case PIPE_QUERY_PIPELINE_STATISTICS:
      /* reset our cache */
      if (softpipe->active_statistics_queries == 0) {
         memset(&softpipe->pipeline_statistics, 0,
                sizeof(softpipe->pipeline_statistics));
      }
      memcpy(&sq->stats, &softpipe->pipeline_statistics,
             sizeof(sq->stats));
      softpipe->active_statistics_queries++;
      break;
   default:
      assert(0);
      break;
   }
   softpipe->active_query_count++;
   softpipe->dirty |= SP_NEW_QUERY;
}


static void
softpipe_end_query(struct pipe_context *pipe, struct pipe_query *q)
{
   struct softpipe_context *softpipe = softpipe_context( pipe );
   struct softpipe_query *sq = softpipe_query(q);

   softpipe->active_query_count--;
   switch (sq->type) {
   case PIPE_QUERY_OCCLUSION_COUNTER:
   case PIPE_QUERY_OCCLUSION_PREDICATE:
      sq->end = softpipe->occlusion_count;
      break;
   case PIPE_QUERY_TIMESTAMP:
      sq->start = 0;
      /* fall through */
   case PIPE_QUERY_TIME_ELAPSED:
      sq->end = os_time_get_nano();
      break;
   case PIPE_QUERY_SO_OVERFLOW_PREDICATE:
      sq->so.num_primitives_written =
         softpipe->so_stats.num_primitives_written - sq->so.num_primitives_written;
      sq->so.primitives_storage_needed =
         softpipe->so_stats.primitives_storage_needed - sq->so.primitives_storage_needed;
      sq->end = sq->so.primitives_storage_needed > sq->so.num_primitives_written;
      break;
   case PIPE_QUERY_SO_STATISTICS:
      sq->so.num_primitives_written =
         softpipe->so_stats.num_primitives_written - sq->so.num_primitives_written;
      sq->so.primitives_storage_needed =
         softpipe->so_stats.primitives_storage_needed - sq->so.primitives_storage_needed;
      break;
   case PIPE_QUERY_PRIMITIVES_EMITTED:
      sq->so.num_primitives_written =
         softpipe->so_stats.num_primitives_written - sq->so.num_primitives_written;
      break;
   case PIPE_QUERY_PRIMITIVES_GENERATED:
      sq->so.primitives_storage_needed =
         softpipe->so_stats.primitives_storage_needed - sq->so.primitives_storage_needed;
      break;
   case PIPE_QUERY_GPU_FINISHED:
   case PIPE_QUERY_TIMESTAMP_DISJOINT:
      break;
   case PIPE_QUERY_PIPELINE_STATISTICS:
      sq->stats.ia_vertices =
         softpipe->pipeline_statistics.ia_vertices - sq->stats.ia_vertices;
      sq->stats.ia_primitives =
         softpipe->pipeline_statistics.ia_primitives - sq->stats.ia_primitives;
      sq->stats.vs_invocations =
         softpipe->pipeline_statistics.vs_invocations - sq->stats.vs_invocations;
      sq->stats.gs_invocations =
         softpipe->pipeline_statistics.gs_invocations - sq->stats.gs_invocations;
      sq->stats.gs_primitives =
         softpipe->pipeline_statistics.gs_primitives - sq->stats.gs_primitives;
      sq->stats.c_invocations =
         softpipe->pipeline_statistics.c_invocations - sq->stats.c_invocations;
      sq->stats.c_primitives =
         softpipe->pipeline_statistics.c_primitives - sq->stats.c_primitives;
      sq->stats.ps_invocations =
         softpipe->pipeline_statistics.ps_invocations - sq->stats.ps_invocations;

      softpipe->active_statistics_queries--;
      break;
   default:
      assert(0);
      break;
   }
   softpipe->dirty |= SP_NEW_QUERY;
}


static boolean
softpipe_get_query_result(struct pipe_context *pipe, 
                          struct pipe_query *q,
                          boolean wait,
                          union pipe_query_result *vresult)
{
   struct softpipe_query *sq = softpipe_query(q);
   uint64_t *result = (uint64_t*)vresult;

   switch (sq->type) {
   case PIPE_QUERY_SO_STATISTICS: {
      struct pipe_query_data_so_statistics *stats =
         (struct pipe_query_data_so_statistics *)vresult;
      stats->num_primitives_written = sq->so.num_primitives_written;
      stats->primitives_storage_needed = sq->so.primitives_storage_needed;
   }
      break;
   case PIPE_QUERY_PIPELINE_STATISTICS:
      memcpy(vresult, &sq->stats,
             sizeof(struct pipe_query_data_pipeline_statistics));;
      break;
   case PIPE_QUERY_GPU_FINISHED:
      vresult->b = TRUE;
      break;
   case PIPE_QUERY_SO_OVERFLOW_PREDICATE:
      vresult->b = sq->end != 0;
      break;
   case PIPE_QUERY_TIMESTAMP_DISJOINT: {
      struct pipe_query_data_timestamp_disjoint *td =
          (struct pipe_query_data_timestamp_disjoint *)vresult;
      /* os_get_time_nano return nanoseconds */
      td->frequency = UINT64_C(1000000000);
      td->disjoint = FALSE;
   }
      break;
   case PIPE_QUERY_PRIMITIVES_EMITTED:
      *result = sq->so.num_primitives_written;
      break;
   case PIPE_QUERY_PRIMITIVES_GENERATED:
      *result = sq->so.primitives_storage_needed;
      break;
   case PIPE_QUERY_OCCLUSION_PREDICATE:
      vresult->b = sq->end - sq->start != 0;
      break;
   default:
      *result = sq->end - sq->start;
      break;
   }
   return TRUE;
}


/**
 * Called by rendering function to check rendering is conditional.
 * \return TRUE if we should render, FALSE if we should skip rendering
 */
boolean
softpipe_check_render_cond(struct softpipe_context *sp)
{
   struct pipe_context *pipe = &sp->pipe;
   boolean b, wait;
   uint64_t result;

   if (!sp->render_cond_query) {
      return TRUE;  /* no query predicate, draw normally */
   }

   wait = (sp->render_cond_mode == PIPE_RENDER_COND_WAIT ||
           sp->render_cond_mode == PIPE_RENDER_COND_BY_REGION_WAIT);

   b = pipe->get_query_result(pipe, sp->render_cond_query, wait,
                              (void*)&result);
   if (b)
      return (!result == sp->render_cond_cond);
   else
      return TRUE;
}


void softpipe_init_query_funcs(struct softpipe_context *softpipe )
{
   softpipe->pipe.create_query = softpipe_create_query;
   softpipe->pipe.destroy_query = softpipe_destroy_query;
   softpipe->pipe.begin_query = softpipe_begin_query;
   softpipe->pipe.end_query = softpipe_end_query;
   softpipe->pipe.get_query_result = softpipe_get_query_result;
}


@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d56 1
a56 2
		      unsigned type,
		      unsigned index)
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d56 2
a57 1
		      unsigned type)
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d29 1
a29 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
a44 2
   unsigned num_primitives_generated;

d100 2
a101 5
      sq->so.primitives_storage_needed = 0;
      sq->num_primitives_generated = 0;
      softpipe->num_primitives_generated = 0;
      sq->so.num_primitives_written = 0;
      softpipe->so_stats.num_primitives_written = 0;
d107 1
a107 2
      sq->so.num_primitives_written = 0;
      softpipe->so_stats.num_primitives_written = 0;
d110 1
a110 2
      sq->num_primitives_generated = 0;
      softpipe->num_primitives_generated = 0;
d154 5
a158 2
      sq->end = (softpipe->num_primitives_generated >
                 softpipe->so_stats.num_primitives_written);
a160 2
      sq->num_primitives_generated =
         softpipe->num_primitives_generated;
d162 3
a164 1
         softpipe->so_stats.num_primitives_written;
d168 1
a168 1
         softpipe->so_stats.num_primitives_written;
d171 2
a172 1
      sq->num_primitives_generated = softpipe->num_primitives_generated;
d219 1
a219 1
      stats->primitives_storage_needed = sq->num_primitives_generated;
d244 1
a244 1
      *result = sq->num_primitives_generated;
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d45 3
d63 1
d66 4
d71 1
d95 1
d99 1
a99 1
      sq->start = 1000*os_time_get();
d102 10
d113 5
a117 1
      sq->so.primitives_storage_needed = 0;
d119 1
d121 11
a132 1
   case PIPE_QUERY_TIMESTAMP_DISJOINT:
d151 1
d154 3
d158 5
a162 1
      sq->end = 1000*os_time_get();
d165 6
d173 3
a175 2
      sq->so.primitives_storage_needed =
         softpipe->so_stats.primitives_storage_needed;
d180 20
d210 3
a212 3
			  struct pipe_query *q,
			  boolean wait,
			  void *vresult)
d218 10
a227 3
   case PIPE_QUERY_SO_STATISTICS:
      memcpy(vresult, &sq->so,
             sizeof(struct pipe_query_data_so_statistics));
d230 4
a233 1
      *result = TRUE;
d236 5
a240 6
      struct pipe_query_data_timestamp_disjoint td;
      /*os_get_time is in microseconds*/
      td.frequency = 1000000;
      td.disjoint = FALSE;
      memcpy(vresult, &sq->so,
             sizeof(struct pipe_query_data_timestamp_disjoint));
d243 9
d278 2
a279 1
   b = pipe->get_query_result(pipe, sp->render_cond_query, wait, &result);
d281 1
a281 1
      return result > 0;
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d33 1
d41 1
d44 1
d57 11
a67 2
   assert(type == PIPE_QUERY_OCCLUSION_COUNTER);
   return (struct pipe_query *)CALLOC_STRUCT( softpipe_query );
d83 19
a101 2
   
   sq->start = softpipe->occlusion_count;
d114 20
a133 1
   sq->end = softpipe->occlusion_count;
d142 1
a142 1
			  uint64_t *result )
d145 23
a167 1
   *result = sq->end - sq->start;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a32 1
#include "os/os_time.h"
a39 1
   unsigned type;
a41 1
   struct pipe_query_data_so_statistics so;
d54 2
a55 11
   struct softpipe_query* sq;

   assert(type == PIPE_QUERY_OCCLUSION_COUNTER ||
          type == PIPE_QUERY_TIME_ELAPSED ||
          type == PIPE_QUERY_SO_STATISTICS ||
          type == PIPE_QUERY_GPU_FINISHED ||
          type == PIPE_QUERY_TIMESTAMP_DISJOINT);
   sq = CALLOC_STRUCT( softpipe_query );
   sq->type = type;

   return (struct pipe_query *)sq;
d71 2
a72 19

   switch (sq->type) {
   case PIPE_QUERY_OCCLUSION_COUNTER:
      sq->start = softpipe->occlusion_count;
      break;
   case PIPE_QUERY_TIME_ELAPSED:
      sq->start = 1000*os_time_get();
      break;
   case PIPE_QUERY_SO_STATISTICS:
      sq->so.num_primitives_written = 0;
      sq->so.primitives_storage_needed = 0;
      break;
   case PIPE_QUERY_GPU_FINISHED:
      break;
   case PIPE_QUERY_TIMESTAMP_DISJOINT:
   default:
      assert(0);
      break;
   }
d85 1
a85 20
   switch (sq->type) {
   case PIPE_QUERY_OCCLUSION_COUNTER:
      sq->end = softpipe->occlusion_count;
      break;
   case PIPE_QUERY_TIME_ELAPSED:
      sq->end = 1000*os_time_get();
      break;
   case PIPE_QUERY_SO_STATISTICS:
      sq->so.num_primitives_written =
         softpipe->so_stats.num_primitives_written;
      sq->so.primitives_storage_needed =
         softpipe->so_stats.primitives_storage_needed;
      break;
   case PIPE_QUERY_GPU_FINISHED:
   case PIPE_QUERY_TIMESTAMP_DISJOINT:
      break;
   default:
      assert(0);
      break;
   }
d94 1
a94 1
			  void *vresult)
d97 1
a97 23
   uint64_t *result = (uint64_t*)vresult;

   switch (sq->type) {
   case PIPE_QUERY_SO_STATISTICS:
      memcpy(vresult, &sq->so,
             sizeof(struct pipe_query_data_so_statistics));
      break;
   case PIPE_QUERY_GPU_FINISHED:
      *result = TRUE;
      break;
   case PIPE_QUERY_TIMESTAMP_DISJOINT: {
      struct pipe_query_data_timestamp_disjoint td;
      /*os_get_time is in microseconds*/
      td.frequency = 1000000;
      td.disjoint = FALSE;
      memcpy(vresult, &sq->so,
             sizeof(struct pipe_query_data_timestamp_disjoint));
   }
      break;
   default:
      *result = sq->end - sq->start;
      break;
   }
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a44 3
   unsigned num_primitives_generated;

   struct pipe_query_data_pipeline_statistics stats;
a59 1
          type == PIPE_QUERY_OCCLUSION_PREDICATE ||
a61 4
          type == PIPE_QUERY_SO_OVERFLOW_PREDICATE ||
          type == PIPE_QUERY_PRIMITIVES_EMITTED ||
          type == PIPE_QUERY_PRIMITIVES_GENERATED || 
          type == PIPE_QUERY_PIPELINE_STATISTICS ||
a62 1
          type == PIPE_QUERY_TIMESTAMP ||
a85 1
   case PIPE_QUERY_OCCLUSION_PREDICATE:
d89 1
a89 1
      sq->start = os_time_get_nano();
d92 1
a93 4
      sq->num_primitives_generated = 0;
      softpipe->num_primitives_generated = 0;
      sq->so.num_primitives_written = 0;
      softpipe->so_stats.num_primitives_written = 0;
d95 1
a95 6
   case PIPE_QUERY_SO_OVERFLOW_PREDICATE:
      sq->end = FALSE;
      break;
   case PIPE_QUERY_PRIMITIVES_EMITTED:
      sq->so.num_primitives_written = 0;
      softpipe->so_stats.num_primitives_written = 0;
a96 6
   case PIPE_QUERY_PRIMITIVES_GENERATED:
      sq->num_primitives_generated = 0;
      softpipe->num_primitives_generated = 0;
      break;
   case PIPE_QUERY_TIMESTAMP:
   case PIPE_QUERY_GPU_FINISHED:
a97 11
      break;
   case PIPE_QUERY_PIPELINE_STATISTICS:
      /* reset our cache */
      if (softpipe->active_statistics_queries == 0) {
         memset(&softpipe->pipeline_statistics, 0,
                sizeof(softpipe->pipeline_statistics));
      }
      memcpy(&sq->stats, &softpipe->pipeline_statistics,
             sizeof(sq->stats));
      softpipe->active_statistics_queries++;
      break;
a115 1
   case PIPE_QUERY_OCCLUSION_PREDICATE:
a117 3
   case PIPE_QUERY_TIMESTAMP:
      sq->start = 0;
      /* fall through */
d119 1
a119 5
      sq->end = os_time_get_nano();
      break;
   case PIPE_QUERY_SO_OVERFLOW_PREDICATE:
      sq->end = (softpipe->num_primitives_generated >
                 softpipe->so_stats.num_primitives_written);
a121 6
      sq->num_primitives_generated =
         softpipe->num_primitives_generated;
      sq->so.num_primitives_written =
         softpipe->so_stats.num_primitives_written;
      break;
   case PIPE_QUERY_PRIMITIVES_EMITTED:
d124 2
a125 3
      break;
   case PIPE_QUERY_PRIMITIVES_GENERATED:
      sq->num_primitives_generated = softpipe->num_primitives_generated;
a129 20
   case PIPE_QUERY_PIPELINE_STATISTICS:
      sq->stats.ia_vertices =
         softpipe->pipeline_statistics.ia_vertices - sq->stats.ia_vertices;
      sq->stats.ia_primitives =
         softpipe->pipeline_statistics.ia_primitives - sq->stats.ia_primitives;
      sq->stats.vs_invocations =
         softpipe->pipeline_statistics.vs_invocations - sq->stats.vs_invocations;
      sq->stats.gs_invocations =
         softpipe->pipeline_statistics.gs_invocations - sq->stats.gs_invocations;
      sq->stats.gs_primitives =
         softpipe->pipeline_statistics.gs_primitives - sq->stats.gs_primitives;
      sq->stats.c_invocations =
         softpipe->pipeline_statistics.c_invocations - sq->stats.c_invocations;
      sq->stats.c_primitives =
         softpipe->pipeline_statistics.c_primitives - sq->stats.c_primitives;
      sq->stats.ps_invocations =
         softpipe->pipeline_statistics.ps_invocations - sq->stats.ps_invocations;

      softpipe->active_statistics_queries--;
      break;
d140 3
a142 3
                          struct pipe_query *q,
                          boolean wait,
                          union pipe_query_result *vresult)
d148 3
a150 10
   case PIPE_QUERY_SO_STATISTICS: {
      struct pipe_query_data_so_statistics *stats =
         (struct pipe_query_data_so_statistics *)vresult;
      stats->num_primitives_written = sq->so.num_primitives_written;
      stats->primitives_storage_needed = sq->num_primitives_generated;
   }
      break;
   case PIPE_QUERY_PIPELINE_STATISTICS:
      memcpy(vresult, &sq->stats,
             sizeof(struct pipe_query_data_pipeline_statistics));;
d153 1
a153 4
      vresult->b = TRUE;
      break;
   case PIPE_QUERY_SO_OVERFLOW_PREDICATE:
      vresult->b = sq->end != 0;
d156 6
a161 5
      struct pipe_query_data_timestamp_disjoint *td =
          (struct pipe_query_data_timestamp_disjoint *)vresult;
      /* os_get_time_nano return nanoseconds */
      td->frequency = UINT64_C(1000000000);
      td->disjoint = FALSE;
a163 9
   case PIPE_QUERY_PRIMITIVES_EMITTED:
      *result = sq->so.num_primitives_written;
      break;
   case PIPE_QUERY_PRIMITIVES_GENERATED:
      *result = sq->num_primitives_generated;
      break;
   case PIPE_QUERY_OCCLUSION_PREDICATE:
      vresult->b = sq->end - sq->start != 0;
      break;
d190 1
a190 2
   b = pipe->get_query_result(pipe, sp->render_cond_query, wait,
                              (void*)&result);
d192 1
a192 1
      return (!result == sp->render_cond_cond);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d29 1
a29 1
 *    Keith Whitwell <keithw@@vmware.com>
d45 2
d102 5
a106 2
      sq->so.num_primitives_written = softpipe->so_stats.num_primitives_written;
      sq->so.primitives_storage_needed = softpipe->so_stats.primitives_storage_needed;
d112 2
a113 1
      sq->so.num_primitives_written = softpipe->so_stats.num_primitives_written;
d116 2
a117 1
      sq->so.primitives_storage_needed = softpipe->so_stats.primitives_storage_needed;
d161 2
a162 5
      sq->so.num_primitives_written =
         softpipe->so_stats.num_primitives_written - sq->so.num_primitives_written;
      sq->so.primitives_storage_needed =
         softpipe->so_stats.primitives_storage_needed - sq->so.primitives_storage_needed;
      sq->end = sq->so.primitives_storage_needed > sq->so.num_primitives_written;
d165 2
d168 1
a168 3
         softpipe->so_stats.num_primitives_written - sq->so.num_primitives_written;
      sq->so.primitives_storage_needed =
         softpipe->so_stats.primitives_storage_needed - sq->so.primitives_storage_needed;
d172 1
a172 1
         softpipe->so_stats.num_primitives_written - sq->so.num_primitives_written;
d175 1
a175 2
      sq->so.primitives_storage_needed =
         softpipe->so_stats.primitives_storage_needed - sq->so.primitives_storage_needed;
d222 1
a222 1
      stats->primitives_storage_needed = sq->so.primitives_storage_needed;
d247 1
a247 1
      *result = sq->so.primitives_storage_needed;
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d56 1
a56 2
		      unsigned type,
		      unsigned index)
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d56 2
a57 1
		      unsigned type)
@


