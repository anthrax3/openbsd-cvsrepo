head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.34;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.01.04;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.51;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.15;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * Copyright 2009 VMware, Inc.  All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Author:
 *    Brian Paul
 *    Michel DÃ¤nzer
 */


#include "pipe/p_defines.h"
#include "util/u_pack_color.h"
#include "util/u_surface.h"
#include "sp_clear.h"
#include "sp_context.h"
#include "sp_query.h"
#include "sp_tile_cache.h"


/**
 * Clear the given buffers to the specified values.
 * No masking, no scissor (clear entire buffer).
 */
void
softpipe_clear(struct pipe_context *pipe, unsigned buffers,
               const union pipe_color_union *color,
               double depth, unsigned stencil)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);
   struct pipe_surface *zsbuf = softpipe->framebuffer.zsbuf;
   unsigned zs_buffers = buffers & PIPE_CLEAR_DEPTHSTENCIL;
   uint64_t cv;
   uint i;

   if (softpipe->no_rast)
      return;

   if (!softpipe_check_render_cond(softpipe))
      return;

#if 0
   softpipe_update_derived(softpipe, PIPE_PRIM_TRIANGLES); /* not needed?? */
#endif

   if (buffers & PIPE_CLEAR_COLOR) {
      for (i = 0; i < softpipe->framebuffer.nr_cbufs; i++) {
         sp_tile_cache_clear(softpipe->cbuf_cache[i], color, 0);
      }
   }

   if (zs_buffers &&
       util_format_is_depth_and_stencil(zsbuf->texture->format) &&
       zs_buffers != PIPE_CLEAR_DEPTHSTENCIL) {
      /* Clearing only depth or stencil in a combined depth-stencil buffer. */
      util_clear_depth_stencil(pipe, zsbuf, zs_buffers, depth, stencil,
                               0, 0, zsbuf->width, zsbuf->height);
   }
   else if (zs_buffers) {
      static const union pipe_color_union zero;

      cv = util_pack64_z_stencil(zsbuf->format, depth, stencil);
      sp_tile_cache_clear(softpipe->zsbuf_cache, &zero, cv);
   }

   softpipe->dirty_render_cache = TRUE;
}
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d22 1
a22 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d37 1
d49 2
a50 1
softpipe_clear(struct pipe_context *pipe, unsigned buffers, const float *rgba,
d54 3
a56 2
   union util_color uc;
   unsigned cv;
d66 1
a66 1
   softpipe_update_derived(softpipe); /* not needed?? */
d71 1
a71 4
         struct pipe_surface *ps = softpipe->framebuffer.cbufs[i];

         util_pack_color(rgba, ps->format, &uc);
         sp_tile_cache_clear(softpipe->cbuf_cache[i], rgba, uc.ui);
d75 9
a83 3
   if (buffers & PIPE_CLEAR_DEPTHSTENCIL) {
      static const float zero[4] = { 0.0F, 0.0F, 0.0F, 0.0F };
      struct pipe_surface *ps = softpipe->framebuffer.zsbuf;
d85 2
a86 2
      cv = util_pack_z_stencil(ps->format, depth, stencil);
      sp_tile_cache_clear(softpipe->zsbuf_cache, zero, cv);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a71 5

#if !TILE_CLEAR_OPTIMIZATION
         /* non-cached surface */
         pipe->surface_fill(pipe, ps, 0, 0, ps->width, ps->height, uc.ui);
#endif
a80 5

#if !TILE_CLEAR_OPTIMIZATION
      /* non-cached surface */
      pipe->surface_fill(pipe, ps, 0, 0, ps->width, ps->height, cv);
#endif
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d72 5
d86 5
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a36 1
#include "util/u_surface.h"
d48 1
a48 2
softpipe_clear(struct pipe_context *pipe, unsigned buffers,
               const union pipe_color_union *color,
d52 2
a53 3
   struct pipe_surface *zsbuf = softpipe->framebuffer.zsbuf;
   unsigned zs_buffers = buffers & PIPE_CLEAR_DEPTHSTENCIL;
   uint64_t cv;
d63 1
a63 1
   softpipe_update_derived(softpipe, PIPE_PRIM_TRIANGLES); /* not needed?? */
d68 4
a71 1
         sp_tile_cache_clear(softpipe->cbuf_cache[i], color, 0);
d75 3
a77 9
   if (zs_buffers &&
       util_format_is_depth_and_stencil(zsbuf->texture->format) &&
       zs_buffers != PIPE_CLEAR_DEPTHSTENCIL) {
      /* Clearing only depth or stencil in a combined depth-stencil buffer. */
      util_clear_depth_stencil(pipe, zsbuf, zs_buffers, depth, stencil,
                               0, 0, zsbuf->width, zsbuf->height);
   }
   else if (zs_buffers) {
      static const union pipe_color_union zero;
d79 2
a80 2
      cv = util_pack64_z_stencil(zsbuf->format, depth, stencil);
      sp_tile_cache_clear(softpipe->zsbuf_cache, &zero, cv);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d22 1
a22 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


