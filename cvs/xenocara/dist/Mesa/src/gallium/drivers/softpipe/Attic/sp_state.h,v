head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.34;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.06;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.53;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.15;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.08.47;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.46.02;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Authors:  Keith Whitwell <keithw@@vmware.com>
 */

#ifndef SP_STATE_H
#define SP_STATE_H

#include "pipe/p_state.h"
#include "tgsi/tgsi_scan.h"


#define SP_NEW_VIEWPORT      0x1
#define SP_NEW_RASTERIZER    0x2
#define SP_NEW_FS            0x4
#define SP_NEW_BLEND         0x8
#define SP_NEW_CLIP          0x10
#define SP_NEW_SCISSOR       0x20
#define SP_NEW_STIPPLE       0x40
#define SP_NEW_FRAMEBUFFER   0x80
#define SP_NEW_DEPTH_STENCIL_ALPHA 0x100
#define SP_NEW_CONSTANTS     0x200
#define SP_NEW_SAMPLER       0x400
#define SP_NEW_TEXTURE       0x800
#define SP_NEW_VERTEX        0x1000
#define SP_NEW_VS            0x2000
#define SP_NEW_QUERY         0x4000
#define SP_NEW_GS            0x8000
#define SP_NEW_SO            0x10000
#define SP_NEW_SO_BUFFERS    0x20000


struct tgsi_sampler;
struct tgsi_exec_machine;
struct vertex_info;


struct sp_fragment_shader_variant_key
{
   boolean polygon_stipple;
};


struct sp_fragment_shader_variant
{
   const struct tgsi_token *tokens;
   struct sp_fragment_shader_variant_key key;
   struct tgsi_shader_info info;

   unsigned stipple_sampler_unit;

   /* See comments about this elsewhere */
#if 0
   struct draw_fragment_shader *draw_shader;
#endif

   void (*prepare)(const struct sp_fragment_shader_variant *shader,
		   struct tgsi_exec_machine *machine,
		   struct tgsi_sampler *sampler);

   unsigned (*run)(const struct sp_fragment_shader_variant *shader,
		   struct tgsi_exec_machine *machine,
		   struct quad_header *quad);

   /* Deletes this instance of the object */
   void (*delete)(struct sp_fragment_shader_variant *shader,
                  struct tgsi_exec_machine *machine);

   struct sp_fragment_shader_variant *next;
};


/** Subclass of pipe_shader_state */
struct sp_fragment_shader {
   struct pipe_shader_state shader;
   struct sp_fragment_shader_variant *variants;
   struct draw_fragment_shader *draw_shader;
};


/** Subclass of pipe_shader_state */
struct sp_vertex_shader {
   struct pipe_shader_state shader;
   struct draw_vertex_shader *draw_data;
   int max_sampler;             /* -1 if no samplers */
};

/** Subclass of pipe_shader_state */
struct sp_geometry_shader {
   struct pipe_shader_state shader;
   struct draw_geometry_shader *draw_data;
   int max_sampler;
};

struct sp_velems_state {
   unsigned count;
   struct pipe_vertex_element velem[PIPE_MAX_ATTRIBS];
};

struct sp_so_state {
   struct pipe_stream_output_info base;
};


void
softpipe_init_blend_funcs(struct pipe_context *pipe);

void
softpipe_init_clip_funcs(struct pipe_context *pipe);

void
softpipe_init_sampler_funcs(struct pipe_context *pipe);

void
softpipe_init_rasterizer_funcs(struct pipe_context *pipe);

void
softpipe_init_shader_funcs(struct pipe_context *pipe);

void
softpipe_init_streamout_funcs(struct pipe_context *pipe);

void
softpipe_init_vertex_funcs(struct pipe_context *pipe);

void
softpipe_set_framebuffer_state(struct pipe_context *,
                               const struct pipe_framebuffer_state *);

void
softpipe_update_derived(struct softpipe_context *softpipe, unsigned prim);

void
softpipe_set_sampler_views(struct pipe_context *pipe,
                           unsigned shader,
                           unsigned start,
                           unsigned num,
                           struct pipe_sampler_view **views);


void
softpipe_draw_vbo(struct pipe_context *pipe,
                  const struct pipe_draw_info *info);

void
softpipe_map_texture_surfaces(struct softpipe_context *sp);

void
softpipe_unmap_texture_surfaces(struct softpipe_context *sp);


struct vertex_info *
softpipe_get_vertex_info(struct softpipe_context *softpipe);

struct vertex_info *
softpipe_get_vbuf_vertex_info(struct softpipe_context *softpipe);


struct sp_fragment_shader_variant *
softpipe_find_fs_variant(struct softpipe_context *softpipe,
                         struct sp_fragment_shader *fs,
                         const struct sp_fragment_shader_variant_key *key);


struct sp_fragment_shader_variant *
softpipe_find_fs_variant(struct softpipe_context *softpipe,
                         struct sp_fragment_shader *fs,
                         const struct sp_fragment_shader_variant_key *key);


#endif
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a194 15
void
softpipe_prepare_vertex_sampling(struct softpipe_context *ctx,
                                 unsigned num,
                                 struct pipe_sampler_view **views);
void
softpipe_cleanup_vertex_sampling(struct softpipe_context *ctx);


void
softpipe_prepare_geometry_sampling(struct softpipe_context *ctx,
                                   unsigned num,
                                   struct pipe_sampler_view **views);
void
softpipe_cleanup_geometry_sampling(struct softpipe_context *ctx);

@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d195 15
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d28 1
a28 1
/* Authors:  Keith Whitwell <keith@@tungstengraphics.com>
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d63 5
a67 7
/**
 * Subclass of pipe_shader_state (though it doesn't really need to be).
 *
 * This is starting to look an awful lot like a quad pipeline stage...
 */
struct sp_fragment_shader {
   struct pipe_shader_state shader;
d69 4
d75 4
d80 5
d86 3
a88 13
   boolean origin_lower_left; /**< fragment shader uses lower left position origin? */
   boolean pixel_center_integer; /**< fragment shader uses integer pixel center? */
   boolean color0_writes_all_cbufs; /**< fragment shader writes color0 to all bound cbufs */
   void (*prepare)( const struct sp_fragment_shader *shader,
		    struct tgsi_exec_machine *machine,
		    struct tgsi_sampler **samplers);

   /* Run the shader - this interface will get cleaned up in the
    * future:
    */
   unsigned (*run)( const struct sp_fragment_shader *shader,
		    struct tgsi_exec_machine *machine,
		    struct quad_header *quad );
d90 3
d94 9
a102 1
   void (*delete)( struct sp_fragment_shader * );
d126 1
a126 1
   struct pipe_stream_output_state base;
d156 1
a156 1
softpipe_update_derived( struct softpipe_context *softpipe );
d159 5
a163 2
softpipe_draw_vbo(struct pipe_context *pipe,
                  const struct pipe_draw_info *info);
a164 2
void
softpipe_draw_stream_output(struct pipe_context *pipe, unsigned mode);
d167 2
a168 4
softpipe_map_transfers(struct softpipe_context *sp);

void
softpipe_unmap_transfers(struct softpipe_context *sp);
d182 12
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d77 1
a77 1

@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d54 2
d73 2
d105 6
d113 22
d136 16
a151 121
void *
softpipe_create_blend_state(struct pipe_context *,
                            const struct pipe_blend_state *);
void softpipe_bind_blend_state(struct pipe_context *,
                               void *);
void softpipe_delete_blend_state(struct pipe_context *,
                                 void *);

void *
softpipe_create_sampler_state(struct pipe_context *,
                              const struct pipe_sampler_state *);
void softpipe_bind_sampler_states(struct pipe_context *, unsigned, void **);
void
softpipe_bind_vertex_sampler_states(struct pipe_context *,
                                    unsigned num_samplers,
                                    void **samplers);
void softpipe_delete_sampler_state(struct pipe_context *, void *);

void *
softpipe_create_depth_stencil_state(struct pipe_context *,
                                    const struct pipe_depth_stencil_alpha_state *);
void softpipe_bind_depth_stencil_state(struct pipe_context *, void *);
void softpipe_delete_depth_stencil_state(struct pipe_context *, void *);

void *
softpipe_create_rasterizer_state(struct pipe_context *,
                                 const struct pipe_rasterizer_state *);
void softpipe_bind_rasterizer_state(struct pipe_context *, void *);
void softpipe_delete_rasterizer_state(struct pipe_context *, void *);

void softpipe_set_framebuffer_state( struct pipe_context *,
                                     const struct pipe_framebuffer_state * );

void softpipe_set_blend_color( struct pipe_context *pipe,
                               const struct pipe_blend_color *blend_color );

void softpipe_set_stencil_ref( struct pipe_context *pipe,
                               const struct pipe_stencil_ref *stencil_ref );

void softpipe_set_clip_state( struct pipe_context *,
                              const struct pipe_clip_state * );

void softpipe_set_constant_buffer(struct pipe_context *,
                                  uint shader, uint index,
                                  struct pipe_buffer *buf);

void *softpipe_create_fs_state(struct pipe_context *,
                               const struct pipe_shader_state *);
void softpipe_bind_fs_state(struct pipe_context *, void *);
void softpipe_delete_fs_state(struct pipe_context *, void *);
void *softpipe_create_vs_state(struct pipe_context *,
                               const struct pipe_shader_state *);
void softpipe_bind_vs_state(struct pipe_context *, void *);
void softpipe_delete_vs_state(struct pipe_context *, void *);
void *softpipe_create_gs_state(struct pipe_context *,
                               const struct pipe_shader_state *);
void softpipe_bind_gs_state(struct pipe_context *, void *);
void softpipe_delete_gs_state(struct pipe_context *, void *);

void softpipe_set_polygon_stipple( struct pipe_context *,
				  const struct pipe_poly_stipple * );

void softpipe_set_scissor_state( struct pipe_context *,
                                 const struct pipe_scissor_state * );

void softpipe_set_sampler_textures( struct pipe_context *,
                                    unsigned num,
                                    struct pipe_texture ** );

void
softpipe_set_vertex_sampler_textures(struct pipe_context *,
                                     unsigned num_textures,
                                     struct pipe_texture **);

void softpipe_set_viewport_state( struct pipe_context *,
                                  const struct pipe_viewport_state * );

void softpipe_set_vertex_elements(struct pipe_context *,
                                  unsigned count,
                                  const struct pipe_vertex_element *);

void softpipe_set_vertex_buffers(struct pipe_context *,
                                 unsigned count,
                                 const struct pipe_vertex_buffer *);


void softpipe_update_derived( struct softpipe_context *softpipe );


void softpipe_draw_arrays(struct pipe_context *pipe, unsigned mode,
                          unsigned start, unsigned count);

void softpipe_draw_elements(struct pipe_context *pipe,
                            struct pipe_buffer *indexBuffer,
                            unsigned indexSize,
                            unsigned mode, unsigned start, unsigned count);
void
softpipe_draw_range_elements(struct pipe_context *pipe,
                             struct pipe_buffer *indexBuffer,
                             unsigned indexSize,
                             unsigned min_index,
                             unsigned max_index,
                             unsigned mode, unsigned start, unsigned count);

void
softpipe_draw_arrays_instanced(struct pipe_context *pipe,
                               unsigned mode,
                               unsigned start,
                               unsigned count,
                               unsigned startInstance,
                               unsigned instanceCount);

void
softpipe_draw_elements_instanced(struct pipe_context *pipe,
                                 struct pipe_buffer *indexBuffer,
                                 unsigned indexSize,
                                 unsigned mode,
                                 unsigned start,
                                 unsigned count,
                                 unsigned startInstance,
                                 unsigned instanceCount);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a53 2
#define SP_NEW_SO            0x10000
#define SP_NEW_SO_BUFFERS    0x20000
a70 2
   struct draw_fragment_shader *draw_shader;

a100 6
   int max_sampler;
};

struct sp_velems_state {
   unsigned count;
   struct pipe_vertex_element velem[PIPE_MAX_ATTRIBS];
a102 22
struct sp_so_state {
   struct pipe_stream_output_state base;
};


void
softpipe_init_blend_funcs(struct pipe_context *pipe);

void
softpipe_init_clip_funcs(struct pipe_context *pipe);

void
softpipe_init_sampler_funcs(struct pipe_context *pipe);

void
softpipe_init_rasterizer_funcs(struct pipe_context *pipe);

void
softpipe_init_shader_funcs(struct pipe_context *pipe);

void
softpipe_init_streamout_funcs(struct pipe_context *pipe);
d104 121
a224 16
void
softpipe_init_vertex_funcs(struct pipe_context *pipe);

void
softpipe_set_framebuffer_state(struct pipe_context *,
                               const struct pipe_framebuffer_state *);

void
softpipe_update_derived( struct softpipe_context *softpipe );

void
softpipe_draw_vbo(struct pipe_context *pipe,
                  const struct pipe_draw_info *info);

void
softpipe_draw_stream_output(struct pipe_context *pipe, unsigned mode);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d63 7
a69 4
struct sp_fragment_shader_variant_key
{
   boolean polygon_stipple;
};
a70 5

struct sp_fragment_shader_variant
{
   const struct tgsi_token *tokens;
   struct sp_fragment_shader_variant_key key;
a72 4
   unsigned stipple_sampler_unit;

   /* See comments about this elsewhere */
#if 0
a73 5
#endif

   void (*prepare)(const struct sp_fragment_shader_variant *shader,
		   struct tgsi_exec_machine *machine,
		   struct tgsi_sampler *sampler);
d75 2
a76 3
   unsigned (*run)(const struct sp_fragment_shader_variant *shader,
		   struct tgsi_exec_machine *machine,
		   struct quad_header *quad);
d78 10
a87 6
   /* Deletes this instance of the object */
   void (*delete)(struct sp_fragment_shader_variant *shader,
                  struct tgsi_exec_machine *machine);

   struct sp_fragment_shader_variant *next;
};
d90 1
a90 5
/** Subclass of pipe_shader_state */
struct sp_fragment_shader {
   struct pipe_shader_state shader;
   struct sp_fragment_shader_variant *variants;
   struct draw_fragment_shader *draw_shader;
d114 1
a114 1
   struct pipe_stream_output_info base;
d144 1
a144 1
softpipe_update_derived(struct softpipe_context *softpipe, unsigned prim);
d147 5
a151 5
softpipe_set_sampler_views(struct pipe_context *pipe,
                           unsigned shader,
                           unsigned start,
                           unsigned num,
                           struct pipe_sampler_view **views);
d153 2
d157 1
a157 2
softpipe_draw_vbo(struct pipe_context *pipe,
                  const struct pipe_draw_info *info);
a170 12


struct sp_fragment_shader_variant *
softpipe_find_fs_variant(struct softpipe_context *softpipe,
                         struct sp_fragment_shader *fs,
                         const struct sp_fragment_shader_variant_key *key);


struct sp_fragment_shader_variant *
softpipe_find_fs_variant(struct softpipe_context *softpipe,
                         struct sp_fragment_shader *fs,
                         const struct sp_fragment_shader_variant_key *key);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d28 1
a28 1
/* Authors:  Keith Whitwell <keithw@@vmware.com>
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a194 15
void
softpipe_prepare_vertex_sampling(struct softpipe_context *ctx,
                                 unsigned num,
                                 struct pipe_sampler_view **views);
void
softpipe_cleanup_vertex_sampling(struct softpipe_context *ctx);


void
softpipe_prepare_geometry_sampling(struct softpipe_context *ctx,
                                   unsigned num,
                                   struct pipe_sampler_view **views);
void
softpipe_cleanup_geometry_sampling(struct softpipe_context *ctx);

@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d195 15
@


