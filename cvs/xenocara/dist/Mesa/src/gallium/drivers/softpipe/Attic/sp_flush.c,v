head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.34;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.04;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.51;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.15;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Author:
 *    Keith Whitwell <keithw@@vmware.com>
 */


#include "pipe/p_defines.h"
#include "pipe/p_screen.h"
#include "draw/draw_context.h"
#include "sp_flush.h"
#include "sp_context.h"
#include "sp_state.h"
#include "sp_tile_cache.h"
#include "sp_tex_tile_cache.h"
#include "util/u_memory.h"
#include "util/u_string.h"


void
softpipe_flush( struct pipe_context *pipe,
                unsigned flags,
                struct pipe_fence_handle **fence )
{
   struct softpipe_context *softpipe = softpipe_context(pipe);
   uint i;

   draw_flush(softpipe->draw);

   if (flags & SP_FLUSH_TEXTURE_CACHE) {
      unsigned sh;

      for (sh = 0; sh < Elements(softpipe->tex_cache); sh++) {
         for (i = 0; i < softpipe->num_sampler_views[sh]; i++) {
            sp_flush_tex_tile_cache(softpipe->tex_cache[sh][i]);
         }
      }
   }

   /* If this is a swapbuffers, just flush color buffers.
    *
    * The zbuffer changes are not discarded, but held in the cache
    * in the hope that a later clear will wipe them out.
    */
   for (i = 0; i < softpipe->framebuffer.nr_cbufs; i++)
      if (softpipe->cbuf_cache[i])
         sp_flush_tile_cache(softpipe->cbuf_cache[i]);

   if (softpipe->zsbuf_cache)
      sp_flush_tile_cache(softpipe->zsbuf_cache);

   softpipe->dirty_render_cache = FALSE;

   /* Enable to dump BMPs of the color/depth buffers each frame */
#if 0
   if (flags & PIPE_FLUSH_END_OF_FRAME) {
      static unsigned frame_no = 1;
      static char filename[256];
      util_snprintf(filename, sizeof(filename), "cbuf_%u.bmp", frame_no);
      debug_dump_surface_bmp(pipe, filename, softpipe->framebuffer.cbufs[0]);
      util_snprintf(filename, sizeof(filename), "zsbuf_%u.bmp", frame_no);
      debug_dump_surface_bmp(pipe, filename, softpipe->framebuffer.zsbuf);
      ++frame_no;
   }
#endif

   if (fence)
      *fence = (void*)(intptr_t)1;
}

void
softpipe_flush_wrapped(struct pipe_context *pipe,
                       struct pipe_fence_handle **fence,
                       unsigned flags)
{
   softpipe_flush(pipe, SP_FLUSH_TEXTURE_CACHE, fence);
}


/**
 * Flush context if necessary.
 *
 * Returns FALSE if it would have block, but do_not_block was set, TRUE
 * otherwise.
 *
 * TODO: move this logic to an auxiliary library?
 */
boolean
softpipe_flush_resource(struct pipe_context *pipe,
                        struct pipe_resource *texture,
                        unsigned level,
                        int layer,
                        unsigned flush_flags,
                        boolean read_only,
                        boolean cpu_access,
                        boolean do_not_block)
{
   unsigned referenced;

   referenced = softpipe_is_resource_referenced(pipe, texture, level, layer);

   if ((referenced & SP_REFERENCED_FOR_WRITE) ||
       ((referenced & SP_REFERENCED_FOR_READ) && !read_only)) {

      /*
       * TODO: The semantics of these flush flags are too obtuse. They should
       * disappear and the pipe driver should just ensure that all visible
       * side-effects happen when they need to happen.
       */
      if (referenced & SP_REFERENCED_FOR_READ)
         flush_flags |= SP_FLUSH_TEXTURE_CACHE;

      if (cpu_access) {
         /*
          * Flush and wait.
          */

         struct pipe_fence_handle *fence = NULL;

         if (do_not_block)
            return FALSE;

         softpipe_flush(pipe, flush_flags, &fence);

         if (fence) {
            /*
             * This is for illustrative purposes only, as softpipe does not
             * have fences.
             */
            pipe->screen->fence_finish(pipe->screen, fence,
                                       PIPE_TIMEOUT_INFINITE);
            pipe->screen->fence_reference(pipe->screen, &fence, NULL);
         }
      } else {
         /*
          * Just flush.
          */

         softpipe_flush(pipe, flush_flags, NULL);
      }
   }

   return TRUE;
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d29 1
a29 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d41 2
d56 6
a61 8
      for (i = 0; i < softpipe->num_fragment_sampler_views; i++) {
         sp_flush_tex_tile_cache(softpipe->fragment_tex_cache[i]);
      }
      for (i = 0; i < softpipe->num_vertex_sampler_views; i++) {
         sp_flush_tex_tile_cache(softpipe->vertex_tex_cache[i]);
      }
      for (i = 0; i < softpipe->num_geometry_sampler_views; i++) {
         sp_flush_tex_tile_cache(softpipe->geometry_tex_cache[i]);
a78 8
   /* Need this call for hardware buffers before swapbuffers.
    *
    * there should probably be another/different flush-type function
    * that's called before swapbuffers because we don't always want
    * to unmap surfaces when flushing.
    */
   softpipe_unmap_transfers(softpipe);

d81 1
a81 1
   if(flags & PIPE_FLUSH_FRAME) {
d85 1
a85 1
      debug_dump_surface_bmp(softpipe, filename, softpipe->framebuffer.cbufs[0]);
d87 1
a87 1
      debug_dump_surface_bmp(softpipe, filename, softpipe->framebuffer.zsbuf);
d97 3
a99 2
softpipe_flush_wrapped( struct pipe_context *pipe,
                        struct pipe_fence_handle **fence )
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d45 1
a45 1
		unsigned flags,
d53 3
a55 3
   if (flags & PIPE_FLUSH_TEXTURE_CACHE) {
      for (i = 0; i < softpipe->num_sampler_views; i++) {
         sp_flush_tex_tile_cache(softpipe->tex_cache[i]);
d65 21
a85 28
   if (flags & PIPE_FLUSH_SWAPBUFFERS) {
      /* If this is a swapbuffers, just flush color buffers.
       *
       * The zbuffer changes are not discarded, but held in the cache
       * in the hope that a later clear will wipe them out.
       */
      for (i = 0; i < softpipe->framebuffer.nr_cbufs; i++)
         if (softpipe->cbuf_cache[i])
            sp_flush_tile_cache(softpipe->cbuf_cache[i]);

      /* Need this call for hardware buffers before swapbuffers.
       *
       * there should probably be another/different flush-type function
       * that's called before swapbuffers because we don't always want
       * to unmap surfaces when flushing.
       */
      softpipe_unmap_transfers(softpipe);
   }
   else if (flags & PIPE_FLUSH_RENDER_CACHE) {
      for (i = 0; i < softpipe->framebuffer.nr_cbufs; i++)
         if (softpipe->cbuf_cache[i])
            sp_flush_tile_cache(softpipe->cbuf_cache[i]);

      if (softpipe->zsbuf_cache)
         sp_flush_tile_cache(softpipe->zsbuf_cache);
     
      softpipe->dirty_render_cache = FALSE;
   }
d99 1
a99 1
   
d101 8
a108 1
      *fence = NULL;
d132 1
a132 1
   referenced = pipe->is_resource_referenced(pipe, texture, level, layer);
d134 2
a135 2
   if ((referenced & PIPE_REFERENCED_FOR_WRITE) ||
       ((referenced & PIPE_REFERENCED_FOR_READ) && !read_only)) {
d142 2
a143 5
      if (referenced & PIPE_REFERENCED_FOR_WRITE)
         flush_flags |= PIPE_FLUSH_RENDER_CACHE;

      if (referenced & PIPE_REFERENCED_FOR_READ)
         flush_flags |= PIPE_FLUSH_TEXTURE_CACHE;
d155 1
a155 1
         pipe->flush(pipe, flush_flags, &fence);
d162 2
a163 1
            pipe->screen->fence_finish(pipe->screen, fence, 0);
d171 1
a171 1
         pipe->flush(pipe, flush_flags, NULL);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d34 1
d54 1
a54 1
      for (i = 0; i < softpipe->num_textures; i++) {
d57 1
a57 1
      for (i = 0; i < softpipe->num_vertex_textures; i++) {
d60 3
d100 1
a100 1
      debug_dump_surface_bmp(filename, softpipe->framebuffer.cbufs[0]);
d102 1
a102 1
      debug_dump_surface_bmp(filename, softpipe->framebuffer.zsbuf);
d111 68
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a33 1
#include "pipe/p_screen.h"
d53 1
a53 1
      for (i = 0; i < softpipe->num_sampler_views; i++) {
d56 1
a56 1
      for (i = 0; i < softpipe->num_vertex_sampler_views; i++) {
a58 3
      for (i = 0; i < softpipe->num_geometry_sampler_views; i++) {
         sp_flush_tex_tile_cache(softpipe->geometry_tex_cache[i]);
      }
d96 1
a96 1
      debug_dump_surface_bmp(softpipe, filename, softpipe->framebuffer.cbufs[0]);
d98 1
a98 1
      debug_dump_surface_bmp(softpipe, filename, softpipe->framebuffer.zsbuf);
a106 68

/**
 * Flush context if necessary.
 *
 * Returns FALSE if it would have block, but do_not_block was set, TRUE
 * otherwise.
 *
 * TODO: move this logic to an auxiliary library?
 */
boolean
softpipe_flush_resource(struct pipe_context *pipe,
                        struct pipe_resource *texture,
                        unsigned level,
                        int layer,
                        unsigned flush_flags,
                        boolean read_only,
                        boolean cpu_access,
                        boolean do_not_block)
{
   unsigned referenced;

   referenced = pipe->is_resource_referenced(pipe, texture, level, layer);

   if ((referenced & PIPE_REFERENCED_FOR_WRITE) ||
       ((referenced & PIPE_REFERENCED_FOR_READ) && !read_only)) {

      /*
       * TODO: The semantics of these flush flags are too obtuse. They should
       * disappear and the pipe driver should just ensure that all visible
       * side-effects happen when they need to happen.
       */
      if (referenced & PIPE_REFERENCED_FOR_WRITE)
         flush_flags |= PIPE_FLUSH_RENDER_CACHE;

      if (referenced & PIPE_REFERENCED_FOR_READ)
         flush_flags |= PIPE_FLUSH_TEXTURE_CACHE;

      if (cpu_access) {
         /*
          * Flush and wait.
          */

         struct pipe_fence_handle *fence = NULL;

         if (do_not_block)
            return FALSE;

         pipe->flush(pipe, flush_flags, &fence);

         if (fence) {
            /*
             * This is for illustrative purposes only, as softpipe does not
             * have fences.
             */
            pipe->screen->fence_finish(pipe->screen, fence, 0);
            pipe->screen->fence_reference(pipe->screen, &fence, NULL);
         }
      } else {
         /*
          * Just flush.
          */

         pipe->flush(pipe, flush_flags, NULL);
      }
   }

   return TRUE;
}
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a40 2
#include "util/u_memory.h"
#include "util/u_string.h"
d45 1
a45 1
                unsigned flags,
d53 9
a61 7
   if (flags & SP_FLUSH_TEXTURE_CACHE) {
      unsigned sh;

      for (sh = 0; sh < Elements(softpipe->tex_cache); sh++) {
         for (i = 0; i < softpipe->num_sampler_views[sh]; i++) {
            sp_flush_tex_tile_cache(softpipe->tex_cache[sh][i]);
         }
d65 28
a92 13
   /* If this is a swapbuffers, just flush color buffers.
    *
    * The zbuffer changes are not discarded, but held in the cache
    * in the hope that a later clear will wipe them out.
    */
   for (i = 0; i < softpipe->framebuffer.nr_cbufs; i++)
      if (softpipe->cbuf_cache[i])
         sp_flush_tile_cache(softpipe->cbuf_cache[i]);

   if (softpipe->zsbuf_cache)
      sp_flush_tile_cache(softpipe->zsbuf_cache);

   softpipe->dirty_render_cache = FALSE;
d96 1
a96 1
   if (flags & PIPE_FLUSH_END_OF_FRAME) {
d100 1
a100 1
      debug_dump_surface_bmp(pipe, filename, softpipe->framebuffer.cbufs[0]);
d102 1
a102 1
      debug_dump_surface_bmp(pipe, filename, softpipe->framebuffer.zsbuf);
d106 1
a106 1

d108 1
a108 9
      *fence = (void*)(intptr_t)1;
}

void
softpipe_flush_wrapped(struct pipe_context *pipe,
                       struct pipe_fence_handle **fence,
                       unsigned flags)
{
   softpipe_flush(pipe, SP_FLUSH_TEXTURE_CACHE, fence);
d132 1
a132 1
   referenced = softpipe_is_resource_referenced(pipe, texture, level, layer);
d134 2
a135 2
   if ((referenced & SP_REFERENCED_FOR_WRITE) ||
       ((referenced & SP_REFERENCED_FOR_READ) && !read_only)) {
d142 5
a146 2
      if (referenced & SP_REFERENCED_FOR_READ)
         flush_flags |= SP_FLUSH_TEXTURE_CACHE;
d158 1
a158 1
         softpipe_flush(pipe, flush_flags, &fence);
d165 1
a165 2
            pipe->screen->fence_finish(pipe->screen, fence,
                                       PIPE_TIMEOUT_INFINITE);
d173 1
a173 1
         softpipe_flush(pipe, flush_flags, NULL);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d29 1
a29 1
 *    Keith Whitwell <keithw@@vmware.com>
@


