head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.34;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.04;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.51;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.15;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.08.45;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.46.00;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Authors:  Keith Whitwell <keithw@@vmware.com>
 */

#ifndef SP_CONTEXT_H
#define SP_CONTEXT_H

#include "pipe/p_context.h"
#include "util/u_blitter.h"

#include "draw/draw_vertex.h"

#include "sp_quad_pipe.h"


/** Do polygon stipple in the draw module? */
#define DO_PSTIPPLE_IN_DRAW_MODULE 0

/** Do polygon stipple with the util module? */
#define DO_PSTIPPLE_IN_HELPER_MODULE 1


struct softpipe_vbuf_render;
struct draw_context;
struct draw_stage;
struct softpipe_tile_cache;
struct softpipe_tex_tile_cache;
struct sp_fragment_shader;
struct sp_vertex_shader;
struct sp_velems_state;
struct sp_so_state;

struct softpipe_context {
   struct pipe_context pipe;  /**< base class */

   /** Constant state objects */
   struct pipe_blend_state *blend;
   struct pipe_sampler_state *samplers[PIPE_SHADER_TYPES][PIPE_MAX_SAMPLERS];
   struct pipe_depth_stencil_alpha_state *depth_stencil;
   struct pipe_rasterizer_state *rasterizer;
   struct sp_fragment_shader *fs;
   struct sp_fragment_shader_variant *fs_variant;
   struct sp_vertex_shader *vs;
   struct sp_geometry_shader *gs;
   struct sp_velems_state *velems;
   struct sp_so_state *so;

   /** Other rendering state */
   struct pipe_blend_color blend_color;
   struct pipe_blend_color blend_color_clamped;
   struct pipe_stencil_ref stencil_ref;
   struct pipe_clip_state clip;
   struct pipe_resource *constants[PIPE_SHADER_TYPES][PIPE_MAX_CONSTANT_BUFFERS];
   struct pipe_framebuffer_state framebuffer;
   struct pipe_poly_stipple poly_stipple;
   struct pipe_scissor_state scissor;
   struct pipe_sampler_view *sampler_views[PIPE_SHADER_TYPES][PIPE_MAX_SHADER_SAMPLER_VIEWS];

   struct pipe_viewport_state viewport;
   struct pipe_vertex_buffer vertex_buffer[PIPE_MAX_ATTRIBS];
   struct pipe_index_buffer index_buffer;

   struct draw_so_target *so_targets[PIPE_MAX_SO_BUFFERS];
   unsigned num_so_targets;
   
   struct pipe_query_data_so_statistics so_stats;

   struct pipe_query_data_pipeline_statistics pipeline_statistics;
   unsigned active_statistics_queries;

   unsigned num_samplers[PIPE_SHADER_TYPES];
   unsigned num_sampler_views[PIPE_SHADER_TYPES];

   unsigned num_vertex_buffers;

   unsigned dirty; /**< Mask of SP_NEW_x flags */

   /* Counter for occlusion queries.  Note this supports overlapping
    * queries.
    */
   uint64_t occlusion_count;
   unsigned active_query_count;

   /** Mapped vertex buffers */
   ubyte *mapped_vbuffer[PIPE_MAX_ATTRIBS];

   /** Mapped constant buffers */
   const void *mapped_constants[PIPE_SHADER_TYPES][PIPE_MAX_CONSTANT_BUFFERS];
   unsigned const_buffer_size[PIPE_SHADER_TYPES][PIPE_MAX_CONSTANT_BUFFERS];

   /** Vertex format */
   struct vertex_info vertex_info;
   struct vertex_info vertex_info_vbuf;

   /** Which vertex shader output slot contains point size */
   int psize_slot;

   /** The reduced version of the primitive supplied by the state tracker */
   unsigned reduced_api_prim;

   /** Derived information about which winding orders to cull */
   unsigned cull_mode;

   /**
    * The reduced primitive after unfilled triangles, wide-line decomposition,
    * etc, are taken into account.  This is the primitive type that's actually
    * rasterized.
    */
   unsigned reduced_prim;

   /** Derived from scissor and surface bounds: */
   struct pipe_scissor_state cliprect;

   unsigned line_stipple_counter;

   /** Conditional query object and mode */
   struct pipe_query *render_cond_query;
   uint render_cond_mode;
   boolean render_cond_cond;

   /** Polygon stipple items */
   struct {
      struct pipe_resource *texture;
      struct pipe_sampler_state *sampler;
      struct pipe_sampler_view *sampler_view;
   } pstipple;

   /** Software quad rendering pipeline */
   struct {
      struct quad_stage *shade;
      struct quad_stage *depth_test;
      struct quad_stage *blend;
      struct quad_stage *pstipple;
      struct quad_stage *first; /**< points to one of the above stages */
   } quad;

   /** TGSI exec things */
   struct {
      struct sp_tgsi_sampler *sampler[PIPE_SHADER_TYPES];
   } tgsi;

   struct tgsi_exec_machine *fs_machine;

   /** The primitive drawing context */
   struct draw_context *draw;

   /** Draw module backend */
   struct vbuf_render *vbuf_backend;
   struct draw_stage *vbuf;

   struct blitter_context *blitter;

   boolean dirty_render_cache;

   struct softpipe_tile_cache *cbuf_cache[PIPE_MAX_COLOR_BUFS];
   struct softpipe_tile_cache *zsbuf_cache;

   unsigned tex_timestamp;

   /*
    * Texture caches for vertex, fragment, geometry stages.
    * Don't use PIPE_SHADER_TYPES here to avoid allocating unused memory
    * for compute shaders.
    * XXX wouldn't it make more sense for the tile cache to just be part
    * of sp_sampler_view?
    */
   struct softpipe_tex_tile_cache *tex_cache[PIPE_SHADER_GEOMETRY+1][PIPE_MAX_SHADER_SAMPLER_VIEWS];

   unsigned dump_fs : 1;
   unsigned dump_gs : 1;
   unsigned no_rast : 1;
};


static INLINE struct softpipe_context *
softpipe_context( struct pipe_context *pipe )
{
   return (struct softpipe_context *)pipe;
}


struct pipe_context *
softpipe_create_context( struct pipe_screen *, void *priv );

struct pipe_resource *
softpipe_user_buffer_create(struct pipe_screen *screen,
                            void *ptr,
                            unsigned bytes,
			    unsigned bind_flags);

#define SP_UNREFERENCED         0
#define SP_REFERENCED_FOR_READ  (1 << 0)
#define SP_REFERENCED_FOR_WRITE (1 << 1)

unsigned int
softpipe_is_resource_referenced( struct pipe_context *pipe,
                                 struct pipe_resource *texture,
                                 unsigned level, int layer);

#endif /* SP_CONTEXT_H */
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a87 2
   struct pipe_resource *mapped_vs_tex[PIPE_MAX_SHADER_SAMPLER_VIEWS];
   struct pipe_resource *mapped_gs_tex[PIPE_MAX_SHADER_SAMPLER_VIEWS];
a122 3

   /** Which vertex shader output slot contains layer */
   int layer_slot;
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d88 2
d125 3
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d28 1
a28 1
/* Authors:  Keith Whitwell <keith@@tungstengraphics.com>
a92 1
   unsigned num_primitives_generated;
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d35 1
d42 5
a46 2
/** Do polygon stipple in the driver here, or in the draw module? */
#define DO_PSTIPPLE_IN_DRAW_MODULE 1
a58 1

d64 1
a64 3
   struct pipe_sampler_state *fragment_samplers[PIPE_MAX_SAMPLERS];
   struct pipe_sampler_state *vertex_samplers[PIPE_MAX_VERTEX_SAMPLERS];
   struct pipe_sampler_state *geometry_samplers[PIPE_MAX_GEOMETRY_SAMPLERS];
d68 1
d76 1
d83 2
a84 3
   struct pipe_sampler_view *fragment_sampler_views[PIPE_MAX_SAMPLERS];
   struct pipe_sampler_view *vertex_sampler_views[PIPE_MAX_VERTEX_SAMPLERS];
   struct pipe_sampler_view *geometry_sampler_views[PIPE_MAX_GEOMETRY_SAMPLERS];
d88 4
a91 6
   struct {
      struct softpipe_resource *buffer[PIPE_MAX_SO_BUFFERS];
      int offset[PIPE_MAX_SO_BUFFERS];
      int so_count[PIPE_MAX_SO_BUFFERS];
      int num_buffers;
   } so_target;
d93 7
a100 6
   unsigned num_fragment_samplers;
   unsigned num_fragment_sampler_views;
   unsigned num_vertex_samplers;
   unsigned num_vertex_sampler_views;
   unsigned num_geometry_samplers;
   unsigned num_geometry_sampler_views;
d146 8
d166 1
a166 3
      struct sp_sampler_variant *geom_samplers_list[PIPE_MAX_GEOMETRY_SAMPLERS];
      struct sp_sampler_variant *vert_samplers_list[PIPE_MAX_VERTEX_SAMPLERS];
      struct sp_sampler_variant *frag_samplers_list[PIPE_MAX_SAMPLERS];
d178 2
a185 3
   struct softpipe_tex_tile_cache *fragment_tex_cache[PIPE_MAX_SAMPLERS];
   struct softpipe_tex_tile_cache *vertex_tex_cache[PIPE_MAX_VERTEX_SAMPLERS];
   struct softpipe_tex_tile_cache *geometry_tex_cache[PIPE_MAX_GEOMETRY_SAMPLERS];
d187 9
a195 1
   unsigned use_sse : 1;
a207 2
void
softpipe_reset_sampler_variants(struct softpipe_context *softpipe);
d212 5
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d61 1
a61 1
   struct pipe_sampler_state *sampler[PIPE_MAX_SAMPLERS];
d80 1
a80 1
   struct pipe_sampler_view *sampler_views[PIPE_MAX_SAMPLERS];
d94 2
a95 2
   unsigned num_samplers;
   unsigned num_sampler_views;
d157 3
a159 3
      struct sp_sampler_varient *geom_samplers_list[PIPE_MAX_GEOMETRY_SAMPLERS];
      struct sp_sampler_varient *vert_samplers_list[PIPE_MAX_VERTEX_SAMPLERS];
      struct sp_sampler_varient *frag_samplers_list[PIPE_MAX_SAMPLERS];
d177 1
a177 1
   struct softpipe_tex_tile_cache *tex_cache[PIPE_MAX_SAMPLERS];
d195 1
a195 1
softpipe_reset_sampler_varients(struct softpipe_context *softpipe);
d200 9
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d41 4
d52 2
d63 1
d69 2
d76 1
a76 1
   struct pipe_buffer *constants[PIPE_SHADER_TYPES][PIPE_MAX_CONSTANT_BUFFERS];
d80 3
a82 2
   struct pipe_texture *texture[PIPE_MAX_SAMPLERS];
   struct pipe_texture *vertex_textures[PIPE_MAX_VERTEX_SAMPLERS];
d85 8
a92 1
   struct pipe_vertex_element vertex_element[PIPE_MAX_ATTRIBS];
d95 1
a95 1
   unsigned num_textures;
d97 3
a99 2
   unsigned num_vertex_textures;
   unsigned num_vertex_elements;
d114 2
a115 1
   void *mapped_constants[PIPE_SHADER_TYPES][PIPE_MAX_CONSTANT_BUFFERS];
d127 3
d151 1
d157 1
d162 2
d179 1
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a40 4
/** Do polygon stipple in the driver here, or in the draw module? */
#define DO_PSTIPPLE_IN_DRAW_MODULE 1


a47 2
struct sp_velems_state;
struct sp_so_state;
a56 1
   struct pipe_sampler_state *geometry_samplers[PIPE_MAX_GEOMETRY_SAMPLERS];
a61 2
   struct sp_velems_state *velems;
   struct sp_so_state *so;
d67 1
a67 1
   struct pipe_resource *constants[PIPE_SHADER_TYPES][PIPE_MAX_CONSTANT_BUFFERS];
d71 2
a72 3
   struct pipe_sampler_view *sampler_views[PIPE_MAX_SAMPLERS];
   struct pipe_sampler_view *vertex_sampler_views[PIPE_MAX_VERTEX_SAMPLERS];
   struct pipe_sampler_view *geometry_sampler_views[PIPE_MAX_GEOMETRY_SAMPLERS];
d75 1
a75 8
   struct pipe_index_buffer index_buffer;
   struct {
      struct softpipe_resource *buffer[PIPE_MAX_SO_BUFFERS];
      int offset[PIPE_MAX_SO_BUFFERS];
      int so_count[PIPE_MAX_SO_BUFFERS];
      int num_buffers;
   } so_target;
   struct pipe_query_data_so_statistics so_stats;
d78 1
a78 1
   unsigned num_sampler_views;
d80 2
a81 3
   unsigned num_vertex_sampler_views;
   unsigned num_geometry_samplers;
   unsigned num_geometry_sampler_views;
d96 1
a96 2
   const void *mapped_constants[PIPE_SHADER_TYPES][PIPE_MAX_CONSTANT_BUFFERS];
   unsigned const_buffer_size[PIPE_SHADER_TYPES][PIPE_MAX_CONSTANT_BUFFERS];
a107 3
   /** Derived information about which winding orders to cull */
   unsigned cull_mode;

a128 1
      struct quad_stage *pstipple;
a133 1
      struct sp_sampler_varient *geom_samplers_list[PIPE_MAX_GEOMETRY_SAMPLERS];
a137 2
   struct tgsi_exec_machine *fs_machine;

a152 1
   struct softpipe_tex_tile_cache *geometry_tex_cache[PIPE_MAX_GEOMETRY_SAMPLERS];
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a34 1
#include "util/u_blitter.h"
d41 2
a42 5
/** Do polygon stipple in the draw module? */
#define DO_PSTIPPLE_IN_DRAW_MODULE 0

/** Do polygon stipple with the util module? */
#define DO_PSTIPPLE_IN_HELPER_MODULE 1
d55 1
d61 3
a63 1
   struct pipe_sampler_state *samplers[PIPE_SHADER_TYPES][PIPE_MAX_SAMPLERS];
a66 1
   struct sp_fragment_shader_variant *fs_variant;
a73 1
   struct pipe_blend_color blend_color_clamped;
d80 3
a82 2
   struct pipe_sampler_view *sampler_views[PIPE_SHADER_TYPES][PIPE_MAX_SHADER_SAMPLER_VIEWS];

d86 6
a91 4

   struct draw_so_target *so_targets[PIPE_MAX_SO_BUFFERS];
   unsigned num_so_targets;
   
a92 7
   unsigned num_primitives_generated;

   struct pipe_query_data_pipeline_statistics pipeline_statistics;
   unsigned active_statistics_queries;

   unsigned num_samplers[PIPE_SHADER_TYPES];
   unsigned num_sampler_views[PIPE_SHADER_TYPES];
d94 6
a144 8
   boolean render_cond_cond;

   /** Polygon stipple items */
   struct {
      struct pipe_resource *texture;
      struct pipe_sampler_state *sampler;
      struct pipe_sampler_view *sampler_view;
   } pstipple;
d157 3
a159 1
      struct sp_tgsi_sampler *sampler[PIPE_SHADER_TYPES];
a170 2
   struct blitter_context *blitter;

d177 3
d181 1
a181 9
   /*
    * Texture caches for vertex, fragment, geometry stages.
    * Don't use PIPE_SHADER_TYPES here to avoid allocating unused memory
    * for compute shaders.
    * XXX wouldn't it make more sense for the tile cache to just be part
    * of sp_sampler_view?
    */
   struct softpipe_tex_tile_cache *tex_cache[PIPE_SHADER_GEOMETRY+1][PIPE_MAX_SHADER_SAMPLER_VIEWS];

d194 2
a199 14
struct pipe_resource *
softpipe_user_buffer_create(struct pipe_screen *screen,
                            void *ptr,
                            unsigned bytes,
			    unsigned bind_flags);

#define SP_UNREFERENCED         0
#define SP_REFERENCED_FOR_READ  (1 << 0)
#define SP_REFERENCED_FOR_WRITE (1 << 1)

unsigned int
softpipe_is_resource_referenced( struct pipe_context *pipe,
                                 struct pipe_resource *texture,
                                 unsigned level, int layer);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d28 1
a28 1
/* Authors:  Keith Whitwell <keithw@@vmware.com>
d93 1
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a87 2
   struct pipe_resource *mapped_vs_tex[PIPE_MAX_SHADER_SAMPLER_VIEWS];
   struct pipe_resource *mapped_gs_tex[PIPE_MAX_SHADER_SAMPLER_VIEWS];
a122 3

   /** Which vertex shader output slot contains layer */
   int layer_slot;
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d88 2
d125 3
@


