head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.34;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.01.05;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.51;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.15;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.08.45;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.46.00;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/**
 * Execute fragment shader using the TGSI interpreter.
 */

#include "sp_context.h"
#include "sp_state.h"
#include "sp_fs.h"
#include "sp_quad.h"

#include "pipe/p_state.h"
#include "pipe/p_defines.h"
#include "util/u_memory.h"
#include "tgsi/tgsi_exec.h"
#include "tgsi/tgsi_parse.h"


/**
 * Subclass of sp_fragment_shader_variant
 */
struct sp_exec_fragment_shader
{
   struct sp_fragment_shader_variant base;
   /* No other members for now */
};


/** cast wrapper */
static INLINE struct sp_exec_fragment_shader *
sp_exec_fragment_shader(const struct sp_fragment_shader_variant *var)
{
   return (struct sp_exec_fragment_shader *) var;
}


static void
exec_prepare( const struct sp_fragment_shader_variant *var,
              struct tgsi_exec_machine *machine,
              struct tgsi_sampler *sampler )
{
   /*
    * Bind tokens/shader to the interpreter's machine state.
    */
   tgsi_exec_machine_bind_shader(machine,
                                 var->tokens,
                                 sampler);
}



/**
 * Compute quad X,Y,Z,W for the four fragments in a quad.
 *
 * This should really be part of the compiled shader.
 */
static void
setup_pos_vector(const struct tgsi_interp_coef *coef,
                 float x, float y,
                 struct tgsi_exec_vector *quadpos)
{
   uint chan;
   /* do X */
   quadpos->xyzw[0].f[0] = x;
   quadpos->xyzw[0].f[1] = x + 1;
   quadpos->xyzw[0].f[2] = x;
   quadpos->xyzw[0].f[3] = x + 1;

   /* do Y */
   quadpos->xyzw[1].f[0] = y;
   quadpos->xyzw[1].f[1] = y;
   quadpos->xyzw[1].f[2] = y + 1;
   quadpos->xyzw[1].f[3] = y + 1;

   /* do Z and W for all fragments in the quad */
   for (chan = 2; chan < 4; chan++) {
      const float dadx = coef->dadx[chan];
      const float dady = coef->dady[chan];
      const float a0 = coef->a0[chan] + dadx * x + dady * y;
      quadpos->xyzw[chan].f[0] = a0;
      quadpos->xyzw[chan].f[1] = a0 + dadx;
      quadpos->xyzw[chan].f[2] = a0 + dady;
      quadpos->xyzw[chan].f[3] = a0 + dadx + dady;
   }
}


/* TODO: hide the machine struct in here somewhere, remove from this
 * interface:
 */
static unsigned 
exec_run( const struct sp_fragment_shader_variant *var,
	  struct tgsi_exec_machine *machine,
	  struct quad_header *quad )
{
   /* Compute X, Y, Z, W vals for this quad */
   setup_pos_vector(quad->posCoef, 
                    (float)quad->input.x0, (float)quad->input.y0, 
                    &machine->QuadPos);

   /* convert 0 to 1.0 and 1 to -1.0 */
   machine->Face = (float) (quad->input.facing * -2 + 1);

   quad->inout.mask &= tgsi_exec_machine_run( machine );
   if (quad->inout.mask == 0)
      return FALSE;

   /* store outputs */
   {
      const ubyte *sem_name = var->info.output_semantic_name;
      const ubyte *sem_index = var->info.output_semantic_index;
      const uint n = var->info.num_outputs;
      uint i;
      for (i = 0; i < n; i++) {
         switch (sem_name[i]) {
         case TGSI_SEMANTIC_COLOR:
            {
               uint cbuf = sem_index[i];

               assert(sizeof(quad->output.color[cbuf]) ==
                      sizeof(machine->Outputs[i]));

               /* copy float[4][4] result */
               memcpy(quad->output.color[cbuf],
                      &machine->Outputs[i],
                      sizeof(quad->output.color[0]) );
            }
            break;
         case TGSI_SEMANTIC_POSITION:
            {
               uint j;

               for (j = 0; j < 4; j++)
                  quad->output.depth[j] = machine->Outputs[i].xyzw[2].f[j];
            }
            break;
         case TGSI_SEMANTIC_STENCIL:
            {
               uint j;

               for (j = 0; j < 4; j++)
                  quad->output.stencil[j] = (unsigned)machine->Outputs[i].xyzw[1].f[j];
            }
            break;
         }
      }
   }

   return TRUE;
}


static void 
exec_delete(struct sp_fragment_shader_variant *var,
            struct tgsi_exec_machine *machine)
{
   if (machine->Tokens == var->tokens) {
      tgsi_exec_machine_bind_shader(machine, NULL, NULL);
   }

   FREE( (void *) var->tokens );
   FREE(var);
}


struct sp_fragment_shader_variant *
softpipe_create_fs_variant_exec(struct softpipe_context *softpipe,
                                const struct pipe_shader_state *templ)
{
   struct sp_exec_fragment_shader *shader;

   shader = CALLOC_STRUCT(sp_exec_fragment_shader);
   if (!shader)
      return NULL;

   shader->base.prepare = exec_prepare;
   shader->base.run = exec_run;
   shader->base.delete = exec_delete;

   return &shader->base;
}
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d192 2
a193 1
softpipe_create_fs_variant_exec(struct softpipe_context *softpipe)
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d192 1
a192 2
softpipe_create_fs_variant_exec(struct softpipe_context *softpipe,
                                const struct pipe_shader_state *templ)
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d45 1
a45 1
 * Subclass of sp_fragment_shader
d49 1
a49 1
   struct sp_fragment_shader base;
d56 1
a56 1
sp_exec_fragment_shader(const struct sp_fragment_shader *base)
d58 1
a58 1
   return (struct sp_exec_fragment_shader *) base;
d63 3
a65 3
exec_prepare( const struct sp_fragment_shader *base,
	      struct tgsi_exec_machine *machine,
	      struct tgsi_sampler **samplers )
a68 1
    * Avoid redundant binding.
d70 3
a72 6
   if (machine->Tokens != base->shader.tokens) {
      tgsi_exec_machine_bind_shader( machine,
                                     base->shader.tokens,
                                     PIPE_MAX_SAMPLERS,
                                     samplers );
   }
d117 1
a117 1
exec_run( const struct sp_fragment_shader *base,
d135 3
a137 3
      const ubyte *sem_name = base->info.output_semantic_name;
      const ubyte *sem_index = base->info.output_semantic_index;
      const uint n = base->info.num_outputs;
d179 2
a180 1
exec_delete( struct sp_fragment_shader *base )
d182 6
a187 2
   FREE((void *) base->shader.tokens);
   FREE(base);
d191 3
a193 3
struct sp_fragment_shader *
softpipe_create_fs_exec(struct softpipe_context *softpipe,
			const struct pipe_shader_state *templ)
a196 4
   /* Decide whether we'll be codegenerating this shader and if so do
    * that now.
    */

a200 2
   /* we need to keep a local copy of the tokens */
   shader->base.shader.tokens = tgsi_dup_tokens(templ->tokens);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d148 5
d154 1
a154 1
                      &machine->Outputs[i].xyzw[0].f[0],
d161 2
a162 1
               for (j = 0; j < 4; j++) {
d164 8
a171 1
               }
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a147 5

               assert(sizeof(quad->output.color[cbuf]) ==
                      sizeof(machine->Outputs[i]));

               /* copy float[4][4] result */
d149 1
a149 1
                      &machine->Outputs[i],
d156 1
a156 2

               for (j = 0; j < 4; j++)
d158 1
a158 8
            }
            break;
         case TGSI_SEMANTIC_STENCIL:
            {
               uint j;

               for (j = 0; j < 4; j++)
                  quad->output.stencil[j] = (unsigned)machine->Outputs[i].xyzw[1].f[j];
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d45 1
a45 1
 * Subclass of sp_fragment_shader_variant
d49 1
a49 1
   struct sp_fragment_shader_variant base;
d56 1
a56 1
sp_exec_fragment_shader(const struct sp_fragment_shader_variant *var)
d58 1
a58 1
   return (struct sp_exec_fragment_shader *) var;
d63 3
a65 3
exec_prepare( const struct sp_fragment_shader_variant *var,
              struct tgsi_exec_machine *machine,
              struct tgsi_sampler *sampler )
d69 1
d71 6
a76 3
   tgsi_exec_machine_bind_shader(machine,
                                 var->tokens,
                                 sampler);
d121 1
a121 1
exec_run( const struct sp_fragment_shader_variant *var,
d139 3
a141 3
      const ubyte *sem_name = var->info.output_semantic_name;
      const ubyte *sem_index = var->info.output_semantic_index;
      const uint n = var->info.num_outputs;
d183 1
a183 2
exec_delete(struct sp_fragment_shader_variant *var,
            struct tgsi_exec_machine *machine)
d185 2
a186 6
   if (machine->Tokens == var->tokens) {
      tgsi_exec_machine_bind_shader(machine, NULL, NULL);
   }

   FREE( (void *) var->tokens );
   FREE(var);
d190 3
a192 3
struct sp_fragment_shader_variant *
softpipe_create_fs_variant_exec(struct softpipe_context *softpipe,
                                const struct pipe_shader_state *templ)
d196 4
d204 2
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d192 2
a193 1
softpipe_create_fs_variant_exec(struct softpipe_context *softpipe)
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d192 1
a192 2
softpipe_create_fs_variant_exec(struct softpipe_context *softpipe,
                                const struct pipe_shader_state *templ)
@


