head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.34;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.06;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.54;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.15;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.08.48;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.46.02;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#include "util/u_inlines.h"
#include "util/u_math.h"
#include "util/u_memory.h"
#include "util/u_pstipple.h"
#include "pipe/p_shader_tokens.h"
#include "draw/draw_context.h"
#include "draw/draw_vertex.h"
#include "sp_context.h"
#include "sp_screen.h"
#include "sp_state.h"
#include "sp_texture.h"
#include "sp_tex_sample.h"
#include "sp_tex_tile_cache.h"


/**
 * Mark the current vertex layout as "invalid".
 * We'll validate the vertex layout later, when we start to actually
 * render a point or line or tri.
 */
static void
invalidate_vertex_layout(struct softpipe_context *softpipe)
{
   softpipe->vertex_info.num_attribs =  0;
}


/**
 * The vertex info describes how to convert the post-transformed vertices
 * (simple float[][4]) used by the 'draw' module into vertices for
 * rasterization.
 *
 * This function validates the vertex layout and returns a pointer to a
 * vertex_info object.
 */
struct vertex_info *
softpipe_get_vertex_info(struct softpipe_context *softpipe)
{
   struct vertex_info *vinfo = &softpipe->vertex_info;

   if (vinfo->num_attribs == 0) {
      /* compute vertex layout now */
      const struct tgsi_shader_info *fsInfo = &softpipe->fs_variant->info;
      struct vertex_info *vinfo_vbuf = &softpipe->vertex_info_vbuf;
      const uint num = draw_num_shader_outputs(softpipe->draw);
      uint i;

      /* Tell draw_vbuf to simply emit the whole post-xform vertex
       * as-is.  No longer any need to try and emit draw vertex_header
       * info.
       */
      vinfo_vbuf->num_attribs = 0;
      for (i = 0; i < num; i++) {
	 draw_emit_vertex_attr(vinfo_vbuf, EMIT_4F, INTERP_PERSPECTIVE, i);
      }
      draw_compute_vertex_size(vinfo_vbuf);

      /*
       * Loop over fragment shader inputs, searching for the matching output
       * from the vertex shader.
       */
      vinfo->num_attribs = 0;
      for (i = 0; i < fsInfo->num_inputs; i++) {
         int src;
         enum interp_mode interp = INTERP_LINEAR;

         switch (fsInfo->input_interpolate[i]) {
         case TGSI_INTERPOLATE_CONSTANT:
            interp = INTERP_CONSTANT;
            break;
         case TGSI_INTERPOLATE_LINEAR:
            interp = INTERP_LINEAR;
            break;
         case TGSI_INTERPOLATE_PERSPECTIVE:
            interp = INTERP_PERSPECTIVE;
            break;
         case TGSI_INTERPOLATE_COLOR:
            assert(fsInfo->input_semantic_name[i] == TGSI_SEMANTIC_COLOR);
            break;
         default:
            assert(0);
         }

         switch (fsInfo->input_semantic_name[i]) {
         case TGSI_SEMANTIC_POSITION:
            interp = INTERP_POS;
            break;

         case TGSI_SEMANTIC_COLOR:
            if (fsInfo->input_interpolate[i] == TGSI_INTERPOLATE_COLOR) {
               if (softpipe->rasterizer->flatshade)
                  interp = INTERP_CONSTANT;
               else
                  interp = INTERP_PERSPECTIVE;
            }
            break;
         }

         /* this includes texcoords and varying vars */
         src = draw_find_shader_output(softpipe->draw,
                                       fsInfo->input_semantic_name[i],
                                       fsInfo->input_semantic_index[i]);
	 if (fsInfo->input_semantic_name[i] == TGSI_SEMANTIC_COLOR && src == -1)
	   /* try and find a bcolor */
	   src = draw_find_shader_output(softpipe->draw,
					 TGSI_SEMANTIC_BCOLOR, fsInfo->input_semantic_index[i]);

         draw_emit_vertex_attr(vinfo, EMIT_4F, interp, src);
      }

      softpipe->psize_slot = draw_find_shader_output(softpipe->draw,
                                                 TGSI_SEMANTIC_PSIZE, 0);
      if (softpipe->psize_slot >= 0) {
         draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_CONSTANT,
                               softpipe->psize_slot);
      }

      draw_compute_vertex_size(vinfo);
   }

   return vinfo;
}


/**
 * Called from vbuf module.
 *
 * Note that there's actually two different vertex layouts in softpipe.
 *
 * The normal one is computed in softpipe_get_vertex_info() above and is
 * used by the point/line/tri "setup" code.
 *
 * The other one (this one) is only used by the vbuf module (which is
 * not normally used by default but used in testing).  For the vbuf module,
 * we basically want to pass-through the draw module's vertex layout as-is.
 * When the softpipe vbuf code begins drawing, the normal vertex layout
 * will come into play again.
 */
struct vertex_info *
softpipe_get_vbuf_vertex_info(struct softpipe_context *softpipe)
{
   (void) softpipe_get_vertex_info(softpipe);
   return &softpipe->vertex_info_vbuf;
}


/**
 * Recompute cliprect from scissor bounds, scissor enable and surface size.
 */
static void
compute_cliprect(struct softpipe_context *sp)
{
   /* SP_NEW_FRAMEBUFFER
    */
   uint surfWidth = sp->framebuffer.width;
   uint surfHeight = sp->framebuffer.height;

   /* SP_NEW_RASTERIZER
    */
   if (sp->rasterizer->scissor) {

      /* SP_NEW_SCISSOR
       *
       * clip to scissor rect:
       */
      sp->cliprect.minx = MAX2(sp->scissor.minx, 0);
      sp->cliprect.miny = MAX2(sp->scissor.miny, 0);
      sp->cliprect.maxx = MIN2(sp->scissor.maxx, surfWidth);
      sp->cliprect.maxy = MIN2(sp->scissor.maxy, surfHeight);
   }
   else {
      /* clip to surface bounds */
      sp->cliprect.minx = 0;
      sp->cliprect.miny = 0;
      sp->cliprect.maxx = surfWidth;
      sp->cliprect.maxy = surfHeight;
   }
}


static void
set_shader_sampler(struct softpipe_context *softpipe,
                   unsigned shader,
                   int max_sampler)
{
   int i;
   for (i = 0; i <= max_sampler; i++) {
      softpipe->tgsi.sampler[shader]->sp_sampler[i] =
         (struct sp_sampler *)(softpipe->samplers[shader][i]);
   }
}

static void
update_tgsi_samplers( struct softpipe_context *softpipe )
{
   unsigned i, sh;

   set_shader_sampler(softpipe, PIPE_SHADER_VERTEX,
                      softpipe->vs->max_sampler);
   set_shader_sampler(softpipe, PIPE_SHADER_FRAGMENT,
                      softpipe->fs_variant->info.file_max[TGSI_FILE_SAMPLER]);
   if (softpipe->gs) {
      set_shader_sampler(softpipe, PIPE_SHADER_GEOMETRY,
                         softpipe->gs->max_sampler);
   }

   /* XXX is this really necessary here??? */
   for (sh = 0; sh < Elements(softpipe->tex_cache); sh++) {
      for (i = 0; i < PIPE_MAX_SAMPLERS; i++) {
         struct softpipe_tex_tile_cache *tc = softpipe->tex_cache[sh][i];
         if (tc && tc->texture) {
            struct softpipe_resource *spt = softpipe_resource(tc->texture);
            if (spt->timestamp != tc->timestamp) {
               sp_tex_tile_cache_validate_texture( tc );
               /*
                 _debug_printf("INV %d %d\n", tc->timestamp, spt->timestamp);
               */
               tc->timestamp = spt->timestamp;
            }
         }
      }
   }
}


static void
update_fragment_shader(struct softpipe_context *softpipe, unsigned prim)
{
   struct sp_fragment_shader_variant_key key;

   memset(&key, 0, sizeof(key));

   if (prim == PIPE_PRIM_TRIANGLES)
      key.polygon_stipple = softpipe->rasterizer->poly_stipple_enable;

   if (softpipe->fs) {
      softpipe->fs_variant = softpipe_find_fs_variant(softpipe,
                                                      softpipe->fs, &key);

      /* prepare the TGSI interpreter for FS execution */
      softpipe->fs_variant->prepare(softpipe->fs_variant, 
                                    softpipe->fs_machine,
                                    (struct tgsi_sampler *) softpipe->
                                    tgsi.sampler[PIPE_SHADER_FRAGMENT]);
   }
   else {
      softpipe->fs_variant = NULL;
   }

   /* This would be the logical place to pass the fragment shader
    * to the draw module.  However, doing this here, during state
    * validation, causes problems with the 'draw' module helpers for
    * wide/AA/stippled lines.
    * In principle, the draw's fragment shader should be per-variant
    * but that doesn't work.  So we use a single draw fragment shader
    * per fragment shader, not per variant.
    */
#if 0
   if (softpipe->fs_variant) {
      draw_bind_fragment_shader(softpipe->draw,
                                softpipe->fs_variant->draw_shader);
   }
   else {
      draw_bind_fragment_shader(softpipe->draw, NULL);
   }
#endif
}


/**
 * This should be called when the polygon stipple pattern changes.
 * We create a new texture from the stipple pattern and create a new
 * sampler view.
 */
static void
update_polygon_stipple_pattern(struct softpipe_context *softpipe)
{
   struct pipe_resource *tex;
   struct pipe_sampler_view *view;

   tex = util_pstipple_create_stipple_texture(&softpipe->pipe,
                                              softpipe->poly_stipple.stipple);
   pipe_resource_reference(&softpipe->pstipple.texture, tex);
   pipe_resource_reference(&tex, NULL);

   view = util_pstipple_create_sampler_view(&softpipe->pipe,
                                            softpipe->pstipple.texture);
   pipe_sampler_view_reference(&softpipe->pstipple.sampler_view, view);
   pipe_sampler_view_reference(&view, NULL);
}


/**
 * Should be called when polygon stipple is enabled/disabled or when
 * the fragment shader changes.
 * We add/update the fragment sampler and sampler views to sample from
 * the polygon stipple texture.  The texture unit that we use depends on
 * the fragment shader (we need to use a unit not otherwise used by the
 * shader).
 */
static void
update_polygon_stipple_enable(struct softpipe_context *softpipe, unsigned prim)
{
   if (prim == PIPE_PRIM_TRIANGLES &&
       softpipe->fs_variant->key.polygon_stipple) {
      const unsigned unit = softpipe->fs_variant->stipple_sampler_unit;

      /* sampler state */
      softpipe->samplers[PIPE_SHADER_FRAGMENT][unit] = softpipe->pstipple.sampler;

      /* sampler view state */
      softpipe_set_sampler_views(&softpipe->pipe, PIPE_SHADER_FRAGMENT,
                                 unit, 1, &softpipe->pstipple.sampler_view);

      softpipe->dirty |= SP_NEW_SAMPLER;
   }
}


/* Hopefully this will remain quite simple, otherwise need to pull in
 * something like the state tracker mechanism.
 */
void
softpipe_update_derived(struct softpipe_context *softpipe, unsigned prim)
{
   struct softpipe_screen *sp_screen = softpipe_screen(softpipe->pipe.screen);

   /* Check for updated textures.
    */
   if (softpipe->tex_timestamp != sp_screen->timestamp) {
      softpipe->tex_timestamp = sp_screen->timestamp;
      softpipe->dirty |= SP_NEW_TEXTURE;
   }

#if DO_PSTIPPLE_IN_HELPER_MODULE
   if (softpipe->dirty & SP_NEW_STIPPLE)
      /* before updating samplers! */
      update_polygon_stipple_pattern(softpipe);
#endif

   if (softpipe->dirty & (SP_NEW_RASTERIZER |
                          SP_NEW_FS))
      update_fragment_shader(softpipe, prim);

#if DO_PSTIPPLE_IN_HELPER_MODULE
   if (softpipe->dirty & (SP_NEW_RASTERIZER |
                          SP_NEW_STIPPLE |
                          SP_NEW_FS))
      update_polygon_stipple_enable(softpipe, prim);
#endif

   /* TODO: this looks suboptimal */
   if (softpipe->dirty & (SP_NEW_SAMPLER |
                          SP_NEW_TEXTURE |
                          SP_NEW_FS | 
                          SP_NEW_VS))
      update_tgsi_samplers( softpipe );

   if (softpipe->dirty & (SP_NEW_RASTERIZER |
                          SP_NEW_FS |
                          SP_NEW_VS))
      invalidate_vertex_layout( softpipe );

   if (softpipe->dirty & (SP_NEW_SCISSOR |
                          SP_NEW_RASTERIZER |
                          SP_NEW_FRAMEBUFFER))
      compute_cliprect(softpipe);

   if (softpipe->dirty & (SP_NEW_BLEND |
                          SP_NEW_DEPTH_STENCIL_ALPHA |
                          SP_NEW_FRAMEBUFFER |
                          SP_NEW_FS))
      sp_build_quad_pipeline(softpipe);

   softpipe->dirty = 0;
}
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a144 6
      softpipe->layer_slot = draw_find_shader_output(softpipe->draw,
                                         TGSI_SEMANTIC_LAYER, 0);
      if (softpipe->layer_slot >= 0) {
         draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_CONSTANT, softpipe->layer_slot);
      }

a398 1
                          SP_NEW_STIPPLE |
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d145 6
d405 1
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d28 1
d31 1
d39 1
d70 1
a70 1
      const struct sp_fragment_shader *spfs = softpipe->fs;
d90 1
a90 1
      for (i = 0; i < spfs->info.num_inputs; i++) {
d92 1
a92 1
         enum interp_mode interp;
d94 1
a94 1
         switch (spfs->info.input_interpolate[i]) {
d104 3
a108 1
            interp = INTERP_LINEAR;
d111 1
a111 1
         switch (spfs->info.input_semantic_name[i]) {
d117 5
a121 2
            if (softpipe->rasterizer->flatshade) {
               interp = INTERP_CONSTANT;
d128 7
a134 2
                                       spfs->info.input_semantic_name[i],
                                       spfs->info.input_semantic_index[i]);
d140 1
a140 1
      if (softpipe->psize_slot > 0) {
d209 12
d223 1
a223 1
   unsigned i;
d225 8
a232 1
   softpipe_reset_sampler_variants( softpipe );
d234 13
a246 10
   for (i = 0; i < PIPE_MAX_SAMPLERS; i++) {
      struct softpipe_tex_tile_cache *tc = softpipe->fragment_tex_cache[i];
      if (tc && tc->texture) {
         struct softpipe_resource *spt = softpipe_resource(tc->texture);
         if (spt->timestamp != tc->timestamp) {
	    sp_tex_tile_cache_validate_texture( tc );
            /*
            _debug_printf("INV %d %d\n", tc->timestamp, spt->timestamp);
            */
            tc->timestamp = spt->timestamp;
d250 1
a251 2
   for (i = 0; i < PIPE_MAX_VERTEX_SAMPLERS; i++) {
      struct softpipe_tex_tile_cache *tc = softpipe->vertex_tex_cache[i];
d253 23
a275 2
      if (tc && tc->texture) {
         struct softpipe_resource *spt = softpipe_resource(tc->texture);
d277 15
a291 5
         if (spt->timestamp != tc->timestamp) {
	    sp_tex_tile_cache_validate_texture(tc);
            tc->timestamp = spt->timestamp;
         }
      }
d293 25
a318 2
   for (i = 0; i < PIPE_MAX_GEOMETRY_SAMPLERS; i++) {
      struct softpipe_tex_tile_cache *tc = softpipe->geometry_tex_cache[i];
d320 21
a340 2
      if (tc && tc->texture) {
         struct softpipe_resource *spt = softpipe_resource(tc->texture);
d342 1
a342 5
         if (spt->timestamp != tc->timestamp) {
	    sp_tex_tile_cache_validate_texture(tc);
            tc->timestamp = spt->timestamp;
         }
      }
d350 2
a351 1
void softpipe_update_derived( struct softpipe_context *softpipe )
d361 19
a379 1
      
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d200 1
a200 1
   softpipe_reset_sampler_varients( softpipe );
d203 2
a204 2
      struct softpipe_tex_tile_cache *tc = softpipe->tex_cache[i];
      if (tc->texture) {
d219 1
a219 1
      if (tc->texture) {
d232 1
a232 1
      if (tc->texture) {
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d205 1
a205 1
         struct softpipe_texture *spt = softpipe_texture(tc->texture);
d220 14
a233 1
         struct softpipe_texture *spt = softpipe_texture(tc->texture);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d205 1
a205 1
         struct softpipe_resource *spt = softpipe_resource(tc->texture);
d220 1
a220 14
         struct softpipe_resource *spt = softpipe_resource(tc->texture);

         if (spt->timestamp != tc->timestamp) {
	    sp_tex_tile_cache_validate_texture(tc);
            tc->timestamp = spt->timestamp;
         }
      }
   }

   for (i = 0; i < PIPE_MAX_GEOMETRY_SAMPLERS; i++) {
      struct softpipe_tex_tile_cache *tc = softpipe->geometry_tex_cache[i];

      if (tc->texture) {
         struct softpipe_resource *spt = softpipe_resource(tc->texture);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a27 1
#include "util/u_inlines.h"
a29 1
#include "util/u_pstipple.h"
a36 1
#include "sp_tex_sample.h"
d67 1
a67 1
      const struct tgsi_shader_info *fsInfo = &softpipe->fs_variant->info;
d87 1
a87 1
      for (i = 0; i < fsInfo->num_inputs; i++) {
d89 1
a89 1
         enum interp_mode interp = INTERP_LINEAR;
d91 1
a91 1
         switch (fsInfo->input_interpolate[i]) {
a100 3
         case TGSI_INTERPOLATE_COLOR:
            assert(fsInfo->input_semantic_name[i] == TGSI_SEMANTIC_COLOR);
            break;
d103 1
d106 1
a106 1
         switch (fsInfo->input_semantic_name[i]) {
d112 2
a113 5
            if (fsInfo->input_interpolate[i] == TGSI_INTERPOLATE_COLOR) {
               if (softpipe->rasterizer->flatshade)
                  interp = INTERP_CONSTANT;
               else
                  interp = INTERP_PERSPECTIVE;
d120 2
a121 7
                                       fsInfo->input_semantic_name[i],
                                       fsInfo->input_semantic_index[i]);
	 if (fsInfo->input_semantic_name[i] == TGSI_SEMANTIC_COLOR && src == -1)
	   /* try and find a bcolor */
	   src = draw_find_shader_output(softpipe->draw,
					 TGSI_SEMANTIC_BCOLOR, fsInfo->input_semantic_index[i]);

d127 1
a127 1
      if (softpipe->psize_slot >= 0) {
a195 12
set_shader_sampler(struct softpipe_context *softpipe,
                   unsigned shader,
                   int max_sampler)
{
   int i;
   for (i = 0; i <= max_sampler; i++) {
      softpipe->tgsi.sampler[shader]->sp_sampler[i] =
         (struct sp_sampler *)(softpipe->samplers[shader][i]);
   }
}

static void
d198 1
a198 1
   unsigned i, sh;
d200 1
a200 8
   set_shader_sampler(softpipe, PIPE_SHADER_VERTEX,
                      softpipe->vs->max_sampler);
   set_shader_sampler(softpipe, PIPE_SHADER_FRAGMENT,
                      softpipe->fs_variant->info.file_max[TGSI_FILE_SAMPLER]);
   if (softpipe->gs) {
      set_shader_sampler(softpipe, PIPE_SHADER_GEOMETRY,
                         softpipe->gs->max_sampler);
   }
d202 10
a211 13
   /* XXX is this really necessary here??? */
   for (sh = 0; sh < Elements(softpipe->tex_cache); sh++) {
      for (i = 0; i < PIPE_MAX_SAMPLERS; i++) {
         struct softpipe_tex_tile_cache *tc = softpipe->tex_cache[sh][i];
         if (tc && tc->texture) {
            struct softpipe_resource *spt = softpipe_resource(tc->texture);
            if (spt->timestamp != tc->timestamp) {
               sp_tex_tile_cache_validate_texture( tc );
               /*
                 _debug_printf("INV %d %d\n", tc->timestamp, spt->timestamp);
               */
               tc->timestamp = spt->timestamp;
            }
a214 1
}
d216 2
d219 2
a220 4
static void
update_fragment_shader(struct softpipe_context *softpipe, unsigned prim)
{
   struct sp_fragment_shader_variant_key key;
d222 5
a226 17
   memset(&key, 0, sizeof(key));

   if (prim == PIPE_PRIM_TRIANGLES)
      key.polygon_stipple = softpipe->rasterizer->poly_stipple_enable;

   if (softpipe->fs) {
      softpipe->fs_variant = softpipe_find_fs_variant(softpipe,
                                                      softpipe->fs, &key);

      /* prepare the TGSI interpreter for FS execution */
      softpipe->fs_variant->prepare(softpipe->fs_variant, 
                                    softpipe->fs_machine,
                                    (struct tgsi_sampler *) softpipe->
                                    tgsi.sampler[PIPE_SHADER_FRAGMENT]);
   }
   else {
      softpipe->fs_variant = NULL;
d229 2
a230 18
   /* This would be the logical place to pass the fragment shader
    * to the draw module.  However, doing this here, during state
    * validation, causes problems with the 'draw' module helpers for
    * wide/AA/stippled lines.
    * In principle, the draw's fragment shader should be per-variant
    * but that doesn't work.  So we use a single draw fragment shader
    * per fragment shader, not per variant.
    */
#if 0
   if (softpipe->fs_variant) {
      draw_bind_fragment_shader(softpipe->draw,
                                softpipe->fs_variant->draw_shader);
   }
   else {
      draw_bind_fragment_shader(softpipe->draw, NULL);
   }
#endif
}
d232 2
d235 5
a239 46
/**
 * This should be called when the polygon stipple pattern changes.
 * We create a new texture from the stipple pattern and create a new
 * sampler view.
 */
static void
update_polygon_stipple_pattern(struct softpipe_context *softpipe)
{
   struct pipe_resource *tex;
   struct pipe_sampler_view *view;

   tex = util_pstipple_create_stipple_texture(&softpipe->pipe,
                                              softpipe->poly_stipple.stipple);
   pipe_resource_reference(&softpipe->pstipple.texture, tex);
   pipe_resource_reference(&tex, NULL);

   view = util_pstipple_create_sampler_view(&softpipe->pipe,
                                            softpipe->pstipple.texture);
   pipe_sampler_view_reference(&softpipe->pstipple.sampler_view, view);
   pipe_sampler_view_reference(&view, NULL);
}


/**
 * Should be called when polygon stipple is enabled/disabled or when
 * the fragment shader changes.
 * We add/update the fragment sampler and sampler views to sample from
 * the polygon stipple texture.  The texture unit that we use depends on
 * the fragment shader (we need to use a unit not otherwise used by the
 * shader).
 */
static void
update_polygon_stipple_enable(struct softpipe_context *softpipe, unsigned prim)
{
   if (prim == PIPE_PRIM_TRIANGLES &&
       softpipe->fs_variant->key.polygon_stipple) {
      const unsigned unit = softpipe->fs_variant->stipple_sampler_unit;

      /* sampler state */
      softpipe->samplers[PIPE_SHADER_FRAGMENT][unit] = softpipe->pstipple.sampler;

      /* sampler view state */
      softpipe_set_sampler_views(&softpipe->pipe, PIPE_SHADER_FRAGMENT,
                                 unit, 1, &softpipe->pstipple.sampler_view);

      softpipe->dirty |= SP_NEW_SAMPLER;
d247 1
a247 2
void
softpipe_update_derived(struct softpipe_context *softpipe, unsigned prim)
d257 1
a257 19

#if DO_PSTIPPLE_IN_HELPER_MODULE
   if (softpipe->dirty & SP_NEW_STIPPLE)
      /* before updating samplers! */
      update_polygon_stipple_pattern(softpipe);
#endif

   if (softpipe->dirty & (SP_NEW_RASTERIZER |
                          SP_NEW_FS))
      update_fragment_shader(softpipe, prim);

#if DO_PSTIPPLE_IN_HELPER_MODULE
   if (softpipe->dirty & (SP_NEW_RASTERIZER |
                          SP_NEW_STIPPLE |
                          SP_NEW_FS))
      update_polygon_stipple_enable(softpipe, prim);
#endif

   /* TODO: this looks suboptimal */
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a144 6
      softpipe->layer_slot = draw_find_shader_output(softpipe->draw,
                                         TGSI_SEMANTIC_LAYER, 0);
      if (softpipe->layer_slot >= 0) {
         draw_emit_vertex_attr(vinfo, EMIT_4F, INTERP_CONSTANT, softpipe->layer_slot);
      }

a398 1
                          SP_NEW_STIPPLE |
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d145 6
d405 1
@


