head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.34;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.07;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.55;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.15;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#ifndef SP_TEX_TILE_CACHE_H
#define SP_TEX_TILE_CACHE_H


#include "pipe/p_compiler.h"
#include "sp_limits.h"


struct softpipe_context;
struct softpipe_tex_tile_cache;


/**
 * Cache tile size (width and height). This needs to be a power of two.
 */
#define TEX_TILE_SIZE_LOG2 5
#define TEX_TILE_SIZE (1 << TEX_TILE_SIZE_LOG2)


#define TEX_ADDR_BITS (SP_MAX_TEXTURE_2D_LEVELS - 1 - TEX_TILE_SIZE_LOG2)
#define TEX_Z_BITS (SP_MAX_TEXTURE_2D_LEVELS - 1)

/**
 * Texture tile address as a union for fast compares.
 */
union tex_tile_address {
   struct {
      unsigned x:TEX_ADDR_BITS;  /* 16K / TILE_SIZE */
      unsigned y:TEX_ADDR_BITS;  /* 16K / TILE_SIZE */
      unsigned z:TEX_Z_BITS;     /* 16K -- z not tiled */
      unsigned face:3;
      unsigned level:4;
      unsigned invalid:1;
   } bits;
   uint64_t value;
};


struct softpipe_tex_cached_tile
{
   union tex_tile_address addr;
   union {
      float color[TEX_TILE_SIZE][TEX_TILE_SIZE][4];
      unsigned int colorui[TEX_TILE_SIZE][TEX_TILE_SIZE][4];
      int colori[TEX_TILE_SIZE][TEX_TILE_SIZE][4];
   } data;
};

/*
 * The number of cache entries.
 * Should not be decreased to lower than 16, and even that
 * seems too low to avoid cache thrashing in some cases (because
 * the cache is direct mapped, see tex_cache_pos() function).
 */
#define NUM_TEX_TILE_ENTRIES 16

struct softpipe_tex_tile_cache
{
   struct pipe_context *pipe;
   struct pipe_transfer *transfer;
   void *transfer_map;

   struct pipe_resource *texture;  /**< if caching a texture */
   unsigned timestamp;

   struct softpipe_tex_cached_tile entries[NUM_TEX_TILE_ENTRIES];

   struct pipe_transfer *tex_trans;
   void *tex_trans_map;
   int tex_face, tex_level, tex_z;

   unsigned swizzle_r;
   unsigned swizzle_g;
   unsigned swizzle_b;
   unsigned swizzle_a;
   enum pipe_format format;

   struct softpipe_tex_cached_tile *last_tile;  /**< most recently retrieved tile */
};


extern struct softpipe_tex_tile_cache *
sp_create_tex_tile_cache( struct pipe_context *pipe );

extern void
sp_destroy_tex_tile_cache(struct softpipe_tex_tile_cache *tc);

extern void
sp_tex_tile_cache_set_sampler_view(struct softpipe_tex_tile_cache *tc,
                                   struct pipe_sampler_view *view);

void
sp_tex_tile_cache_validate_texture(struct softpipe_tex_tile_cache *tc);

extern void
sp_flush_tex_tile_cache(struct softpipe_tex_tile_cache *tc);



extern const struct softpipe_tex_cached_tile *
sp_find_cached_tile_tex(struct softpipe_tex_tile_cache *tc, 
                        union tex_tile_address addr );

static INLINE union tex_tile_address
tex_tile_address( unsigned x,
                  unsigned y,
                  unsigned z,
                  unsigned face,
                  unsigned level )
{
   union tex_tile_address addr;

   addr.value = 0;
   addr.bits.x = x / TEX_TILE_SIZE;
   addr.bits.y = y / TEX_TILE_SIZE;
   addr.bits.z = z;
   addr.bits.face = face;
   addr.bits.level = level;

   return addr;
}

/* Quickly retrieve tile if it matches last lookup.
 */
static INLINE const struct softpipe_tex_cached_tile *
sp_get_cached_tile_tex(struct softpipe_tex_tile_cache *tc, 
                       union tex_tile_address addr )
{
   if (tc->last_tile->addr.value == addr.value)
      return tc->last_tile;

   return sp_find_cached_tile_tex( tc, addr );
}


#endif /* SP_TEX_TILE_CACHE_H */

@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d43 2
a44 2
#define TILE_SIZE_LOG2 6
#define TILE_SIZE (1 << TILE_SIZE_LOG2)
d47 1
a47 1
#define TEX_ADDR_BITS (SP_MAX_TEXTURE_2D_LEVELS - 1 - TILE_SIZE_LOG2)
d70 3
a72 1
      float color[TILE_SIZE][TILE_SIZE][4];
d76 7
a82 1
#define NUM_ENTRIES 50
d93 1
a93 1
   struct softpipe_tex_cached_tile entries[NUM_ENTRIES];
a114 7

extern void
sp_tex_tile_cache_map_transfers(struct softpipe_tex_tile_cache *tc);

extern void
sp_tex_tile_cache_unmap_transfers(struct softpipe_tex_tile_cache *tc);

d129 1
a129 1
                         union tex_tile_address addr );
d141 2
a142 2
   addr.bits.x = x / TILE_SIZE;
   addr.bits.y = y / TILE_SIZE;
d154 1
a154 1
                         union tex_tile_address addr )
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d95 1
a95 1
   unsigned format;
a97 2

   float swz_border_color[4]; /**< swizzled border color */
a159 5


const float *
sp_tex_tile_cache_border_color(struct softpipe_tex_tile_cache *tc,
                               const float border_color[4]);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d33 1
d43 2
a44 1
#define TILE_SIZE 64
d47 5
a51 2
/* If we need to support > 4096, just expand this to be a 64 bit
 * union, or consider tiling in Z as well.
d55 3
a57 3
      unsigned x:6;             /* 4096 / TILE_SIZE */
      unsigned y:6;             /* 4096 / TILE_SIZE */
      unsigned z:12;            /* 4096 -- z not tiled */
d62 1
a62 1
   unsigned value;
d78 1
a78 1
   struct pipe_screen *screen;
d82 1
a82 1
   struct pipe_texture *texture;  /**< if caching a texture */
d91 6
d98 2
d104 1
a104 1
sp_create_tex_tile_cache( struct pipe_screen *screen );
d117 2
a118 2
sp_tex_tile_cache_set_texture(struct softpipe_tex_tile_cache *tc,
                          struct pipe_texture *texture);
d134 4
a137 4
		  unsigned y,
		  unsigned z,
		  unsigned face,
		  unsigned level )
d147 1
a147 1
      
d164 3
a166 1

@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a32 1
#include "sp_limits.h"
d42 1
a42 2
#define TILE_SIZE_LOG2 6
#define TILE_SIZE (1 << TILE_SIZE_LOG2)
d45 2
a46 5
#define TEX_ADDR_BITS (SP_MAX_TEXTURE_2D_LEVELS - 1 - TILE_SIZE_LOG2)
#define TEX_Z_BITS (SP_MAX_TEXTURE_2D_LEVELS - 1)

/**
 * Texture tile address as a union for fast compares.
d50 3
a52 3
      unsigned x:TEX_ADDR_BITS;  /* 16K / TILE_SIZE */
      unsigned y:TEX_ADDR_BITS;  /* 16K / TILE_SIZE */
      unsigned z:TEX_Z_BITS;     /* 16K -- z not tiled */
d57 1
a57 1
   uint64_t value;
d73 1
a73 1
   struct pipe_context *pipe;
d77 1
a77 1
   struct pipe_resource *texture;  /**< if caching a texture */
a85 6
   unsigned swizzle_r;
   unsigned swizzle_g;
   unsigned swizzle_b;
   unsigned swizzle_a;
   unsigned format;

a86 2

   float swz_border_color[4]; /**< swizzled border color */
d91 1
a91 1
sp_create_tex_tile_cache( struct pipe_context *pipe );
d104 2
a105 2
sp_tex_tile_cache_set_sampler_view(struct softpipe_tex_tile_cache *tc,
                                   struct pipe_sampler_view *view);
d121 4
a124 4
                  unsigned y,
                  unsigned z,
                  unsigned face,
                  unsigned level )
d134 1
a134 1

d151 1
a151 3
const float *
sp_tex_tile_cache_border_color(struct softpipe_tex_tile_cache *tc,
                               const float border_color[4]);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d43 2
a44 2
#define TEX_TILE_SIZE_LOG2 5
#define TEX_TILE_SIZE (1 << TEX_TILE_SIZE_LOG2)
d47 1
a47 1
#define TEX_ADDR_BITS (SP_MAX_TEXTURE_2D_LEVELS - 1 - TEX_TILE_SIZE_LOG2)
d70 1
a70 3
      float color[TEX_TILE_SIZE][TEX_TILE_SIZE][4];
      unsigned int colorui[TEX_TILE_SIZE][TEX_TILE_SIZE][4];
      int colori[TEX_TILE_SIZE][TEX_TILE_SIZE][4];
d74 1
a74 7
/*
 * The number of cache entries.
 * Should not be decreased to lower than 16, and even that
 * seems too low to avoid cache thrashing in some cases (because
 * the cache is direct mapped, see tex_cache_pos() function).
 */
#define NUM_TEX_TILE_ENTRIES 16
d85 1
a85 1
   struct softpipe_tex_cached_tile entries[NUM_TEX_TILE_ENTRIES];
d95 1
a95 1
   enum pipe_format format;
d98 2
d109 7
d130 1
a130 1
                        union tex_tile_address addr );
d142 2
a143 2
   addr.bits.x = x / TEX_TILE_SIZE;
   addr.bits.y = y / TEX_TILE_SIZE;
d155 1
a155 1
                       union tex_tile_address addr )
d162 5
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


