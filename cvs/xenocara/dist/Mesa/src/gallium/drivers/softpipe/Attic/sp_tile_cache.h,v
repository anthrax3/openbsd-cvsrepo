head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.34;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.01.07;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.56;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.15;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.08.49;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.46.04;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#ifndef SP_TILE_CACHE_H
#define SP_TILE_CACHE_H


#include "pipe/p_compiler.h"
#include "sp_texture.h"


struct softpipe_tile_cache;


/**
 * Cache tile size (width and height). This needs to be a power of two.
 */
#define TILE_SIZE_LOG2 6
#define TILE_SIZE (1 << TILE_SIZE_LOG2)


#define TILE_ADDR_BITS (SP_MAX_TEXTURE_2D_LEVELS - 1 - TILE_SIZE_LOG2)


/**
 * Surface tile address as a union for fast compares.
 */
union tile_address {
   struct {
      unsigned x:TILE_ADDR_BITS;     /* 16K / TILE_SIZE */
      unsigned y:TILE_ADDR_BITS;     /* 16K / TILE_SIZE */
      unsigned invalid:1;
      unsigned pad:15;
   } bits;
   unsigned value;
};


struct softpipe_cached_tile
{
   union {
      float color[TILE_SIZE][TILE_SIZE][4];
      uint color32[TILE_SIZE][TILE_SIZE];
      uint depth32[TILE_SIZE][TILE_SIZE];
      ushort depth16[TILE_SIZE][TILE_SIZE];
      ubyte stencil8[TILE_SIZE][TILE_SIZE];
      uint colorui128[TILE_SIZE][TILE_SIZE][4];
      int colori128[TILE_SIZE][TILE_SIZE][4];
      uint64_t depth64[TILE_SIZE][TILE_SIZE];
      ubyte any[1];
   } data;
};

#define NUM_ENTRIES 50


struct softpipe_tile_cache
{
   struct pipe_context *pipe;
   struct pipe_surface *surface;  /**< the surface we're caching */
   struct pipe_transfer *transfer;
   void *transfer_map;

   union tile_address tile_addrs[NUM_ENTRIES];
   struct softpipe_cached_tile *entries[NUM_ENTRIES];
   uint clear_flags[(MAX_WIDTH / TILE_SIZE) * (MAX_HEIGHT / TILE_SIZE) / 32];
   union pipe_color_union clear_color; /**< for color bufs */
   uint64_t clear_val;        /**< for z+stencil */
   boolean depth_stencil; /**< Is the surface a depth/stencil format? */

   struct softpipe_cached_tile *tile;  /**< scratch tile for clears */

   union tile_address last_tile_addr;
   struct softpipe_cached_tile *last_tile;  /**< most recently retrieved tile */
};


extern struct softpipe_tile_cache *
sp_create_tile_cache( struct pipe_context *pipe );

extern void
sp_destroy_tile_cache(struct softpipe_tile_cache *tc);

extern void
sp_tile_cache_set_surface(struct softpipe_tile_cache *tc,
                          struct pipe_surface *sps);

extern struct pipe_surface *
sp_tile_cache_get_surface(struct softpipe_tile_cache *tc);

extern void
sp_flush_tile_cache(struct softpipe_tile_cache *tc);

extern void
sp_tile_cache_clear(struct softpipe_tile_cache *tc,
                    const union pipe_color_union *color,
                    uint64_t clearValue);

extern struct softpipe_cached_tile *
sp_find_cached_tile(struct softpipe_tile_cache *tc, 
                    union tile_address addr );


static INLINE union tile_address
tile_address( unsigned x,
              unsigned y )
{
   union tile_address addr;

   addr.value = 0;
   addr.bits.x = x / TILE_SIZE;
   addr.bits.y = y / TILE_SIZE;
      
   return addr;
}

/* Quickly retrieve tile if it matches last lookup.
 */
static INLINE struct softpipe_cached_tile *
sp_get_cached_tile(struct softpipe_tile_cache *tc, 
                   int x, int y )
{
   union tile_address addr = tile_address( x, y );

   if (tc->last_tile_addr.value == addr.value)
      return tc->last_tile;

   return sp_find_cached_tile( tc, addr );
}




#endif /* SP_TILE_CACHE_H */

@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d57 1
a57 2
      unsigned layer:8;
      unsigned pad:7;
d85 2
a86 3
   struct pipe_transfer **transfer;
   void **transfer_map;
   int num_maps;
d90 1
a90 2
   uint *clear_flags;
   uint clear_flags_size;
d130 1
a130 1
              unsigned y, unsigned layer )
d137 1
a137 1
   addr.bits.layer = layer;
d145 1
a145 1
                   int x, int y, int layer )
d147 1
a147 1
   union tile_address addr = tile_address( x, y, layer );
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d57 2
a58 1
      unsigned pad:15;
d86 3
a88 2
   struct pipe_transfer *transfer;
   void *transfer_map;
d92 2
a93 1
   uint clear_flags[(MAX_WIDTH / TILE_SIZE) * (MAX_HEIGHT / TILE_SIZE) / 32];
d133 1
a133 1
              unsigned y )
d140 1
a140 1
      
d148 1
a148 1
                   int x, int y )
d150 1
a150 1
   union tile_address addr = tile_address( x, y );
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d71 3
d91 2
a92 2
   float clear_color[4];  /**< for color bufs */
   uint clear_val;        /**< for z+stencil */
a115 6
sp_tile_cache_map_transfers(struct softpipe_tile_cache *tc);

extern void
sp_tile_cache_unmap_transfers(struct softpipe_tile_cache *tc);

extern void
d119 3
a121 2
sp_tile_cache_clear(struct softpipe_tile_cache *tc, const float *rgba,
                    uint clearValue);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a30 2
#define TILE_CLEAR_OPTIMIZATION 1

d33 1
d42 3
a44 1
#define TILE_SIZE 64
d46 1
d48 3
a50 2
/* If we need to support > 4096, just expand this to be a 64 bit
 * union, or consider tiling in Z as well.
d54 2
a55 2
      unsigned x:6;             /* 4096 / TILE_SIZE */
      unsigned y:6;             /* 4096 / TILE_SIZE */
d57 1
a57 1
      unsigned pad:19;
a64 1
   union tile_address addr;
a77 5
/** XXX move these */
#define MAX_WIDTH 4096
#define MAX_HEIGHT 4096


d80 1
a80 1
   struct pipe_screen *screen;
d85 2
a86 1
   struct softpipe_cached_tile entries[NUM_ENTRIES];
d89 1
a89 1
   uint clear_val;        /**< for z+stencil, or packed color clear value */
d92 1
a92 1
   struct softpipe_cached_tile tile;  /**< scratch tile for clears */
d94 1
d100 1
a100 1
sp_create_tile_cache( struct pipe_screen *screen );
d151 1
a151 1
   if (tc->last_tile->addr.value == addr.value)
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d31 2
a34 1
#include "sp_texture.h"
d43 1
a43 3
#define TILE_SIZE_LOG2 6
#define TILE_SIZE (1 << TILE_SIZE_LOG2)

a44 1
#define TILE_ADDR_BITS (SP_MAX_TEXTURE_2D_LEVELS - 1 - TILE_SIZE_LOG2)
d46 2
a47 3

/**
 * Surface tile address as a union for fast compares.
d51 2
a52 2
      unsigned x:TILE_ADDR_BITS;     /* 16K / TILE_SIZE */
      unsigned y:TILE_ADDR_BITS;     /* 16K / TILE_SIZE */
d54 1
a54 1
      unsigned pad:15;
d62 1
d76 5
d83 1
a83 1
   struct pipe_context *pipe;
d88 1
a88 2
   union tile_address tile_addrs[NUM_ENTRIES];
   struct softpipe_cached_tile *entries[NUM_ENTRIES];
d91 1
a91 1
   uint clear_val;        /**< for z+stencil */
d94 1
a94 1
   struct softpipe_cached_tile *tile;  /**< scratch tile for clears */
a95 1
   union tile_address last_tile_addr;
d101 1
a101 1
sp_create_tile_cache( struct pipe_context *pipe );
d152 1
a152 1
   if (tc->last_tile_addr.value == addr.value)
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a70 3
      uint colorui128[TILE_SIZE][TILE_SIZE][4];
      int colori128[TILE_SIZE][TILE_SIZE][4];
      uint64_t depth64[TILE_SIZE][TILE_SIZE];
d88 2
a89 2
   union pipe_color_union clear_color; /**< for color bufs */
   uint64_t clear_val;        /**< for z+stencil */
d113 6
d122 2
a123 3
sp_tile_cache_clear(struct softpipe_tile_cache *tc,
                    const union pipe_color_union *color,
                    uint64_t clearValue);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d57 1
a57 2
      unsigned layer:8;
      unsigned pad:7;
d85 2
a86 3
   struct pipe_transfer **transfer;
   void **transfer_map;
   int num_maps;
d90 1
a90 2
   uint *clear_flags;
   uint clear_flags_size;
d130 1
a130 1
              unsigned y, unsigned layer )
d137 1
a137 1
   addr.bits.layer = layer;
d145 1
a145 1
                   int x, int y, int layer )
d147 1
a147 1
   union tile_address addr = tile_address( x, y, layer );
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d57 2
a58 1
      unsigned pad:15;
d86 3
a88 2
   struct pipe_transfer *transfer;
   void *transfer_map;
d92 2
a93 1
   uint clear_flags[(MAX_WIDTH / TILE_SIZE) * (MAX_HEIGHT / TILE_SIZE) / 32];
d133 1
a133 1
              unsigned y )
d140 1
a140 1
      
d148 1
a148 1
                   int x, int y )
d150 1
a150 1
   union tile_address addr = tile_address( x, y );
@


