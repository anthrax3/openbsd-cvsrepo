head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.34;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.01.06;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.54;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.15;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.08.48;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.46.02;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#include "sp_context.h"
#include "sp_state.h"
#include "sp_fs.h"
#include "sp_texture.h"

#include "pipe/p_defines.h"
#include "util/u_memory.h"
#include "util/u_inlines.h"
#include "util/u_pstipple.h"
#include "draw/draw_context.h"
#include "draw/draw_vs.h"
#include "draw/draw_gs.h"
#include "tgsi/tgsi_dump.h"
#include "tgsi/tgsi_scan.h"
#include "tgsi/tgsi_parse.h"


/**
 * Create a new fragment shader variant.
 */
static struct sp_fragment_shader_variant *
create_fs_variant(struct softpipe_context *softpipe,
                  struct sp_fragment_shader *fs,
                  const struct sp_fragment_shader_variant_key *key)
{
   struct sp_fragment_shader_variant *var;
   struct pipe_shader_state *stipple_fs = NULL, *curfs = &fs->shader;
   unsigned unit = 0;

#if DO_PSTIPPLE_IN_HELPER_MODULE
   if (key->polygon_stipple) {
      /* get new shader that implements polygon stippling */
      stipple_fs = util_pstipple_create_fragment_shader(&softpipe->pipe,
                                                        curfs, &unit);
      curfs = stipple_fs;
   }
#endif

   /* codegen, create variant object */
   var = softpipe_create_fs_variant_exec(softpipe, curfs);

   if (var) {
      var->key = *key;
      var->tokens = tgsi_dup_tokens(curfs->tokens);
      var->stipple_sampler_unit = unit;

      tgsi_scan_shader(var->tokens, &var->info);

      /* See comments elsewhere about draw fragment shaders */
#if 0
      /* draw's fs state */
      var->draw_shader = draw_create_fragment_shader(softpipe->draw,
                                                     &fs->shader);
      if (!var->draw_shader) {
         var->delete(var);
         FREE((void *) var->tokens);
         return NULL;
      }
#endif

      /* insert variant into linked list */
      var->next = fs->variants;
      fs->variants = var;
   }

   if (stipple_fs) {
      FREE((void *) stipple_fs->tokens);
      FREE(stipple_fs);
   }

   return var;
}


struct sp_fragment_shader_variant *
softpipe_find_fs_variant(struct softpipe_context *sp,
                         struct sp_fragment_shader *fs,
                         const struct sp_fragment_shader_variant_key *key)
{
   struct sp_fragment_shader_variant *var;

   for (var = fs->variants; var; var = var->next) {
      if (memcmp(&var->key, key, sizeof(*key)) == 0) {
         /* found it */
         return var;
      }
   }

   return create_fs_variant(sp, fs, key);
}


static void *
softpipe_create_fs_state(struct pipe_context *pipe,
                         const struct pipe_shader_state *templ)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);
   struct sp_fragment_shader *state = CALLOC_STRUCT(sp_fragment_shader);

   /* debug */
   if (softpipe->dump_fs) 
      tgsi_dump(templ->tokens, 0);

   /* we need to keep a local copy of the tokens */
   state->shader.tokens = tgsi_dup_tokens(templ->tokens);

   /* draw's fs state */
   state->draw_shader = draw_create_fragment_shader(softpipe->draw,
                                                    &state->shader);
   if (!state->draw_shader) {
      FREE((void *) state->shader.tokens);
      FREE(state);
      return NULL;
   }

   return state;
}


static void
softpipe_bind_fs_state(struct pipe_context *pipe, void *fs)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);
   struct sp_fragment_shader *state = (struct sp_fragment_shader *) fs;

   if (softpipe->fs == fs)
      return;

   draw_flush(softpipe->draw);

   softpipe->fs = fs;

   /* This depends on the current fragment shader and must always be
    * re-validated before use.
    */
   softpipe->fs_variant = NULL;

   if (state)
      draw_bind_fragment_shader(softpipe->draw,
                                state->draw_shader);
   else
      draw_bind_fragment_shader(softpipe->draw, NULL);

   softpipe->dirty |= SP_NEW_FS;
}


static void
softpipe_delete_fs_state(struct pipe_context *pipe, void *fs)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);
   struct sp_fragment_shader *state = fs;
   struct sp_fragment_shader_variant *var, *next_var;

   assert(fs != softpipe->fs);

   /* delete variants */
   for (var = state->variants; var; var = next_var) {
      next_var = var->next;

      assert(var != softpipe->fs_variant);

      /* See comments elsewhere about draw fragment shaders */
#if 0
      draw_delete_fragment_shader(softpipe->draw, var->draw_shader);
#endif

      var->delete(var, softpipe->fs_machine);
   }

   draw_delete_fragment_shader(softpipe->draw, state->draw_shader);

   FREE((void *) state->shader.tokens);
   FREE(state);
}


static void *
softpipe_create_vs_state(struct pipe_context *pipe,
                         const struct pipe_shader_state *templ)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);
   struct sp_vertex_shader *state;

   state = CALLOC_STRUCT(sp_vertex_shader);
   if (state == NULL ) 
      goto fail;

   /* copy shader tokens, the ones passed in will go away.
    */
   state->shader.tokens = tgsi_dup_tokens(templ->tokens);
   if (state->shader.tokens == NULL)
      goto fail;

   state->draw_data = draw_create_vertex_shader(softpipe->draw, templ);
   if (state->draw_data == NULL) 
      goto fail;

   state->max_sampler = state->draw_data->info.file_max[TGSI_FILE_SAMPLER];

   return state;

fail:
   if (state) {
      FREE( (void *)state->shader.tokens );
      FREE( state->draw_data );
      FREE( state );
   }
   return NULL;
}


static void
softpipe_bind_vs_state(struct pipe_context *pipe, void *vs)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);

   softpipe->vs = (struct sp_vertex_shader *) vs;

   draw_bind_vertex_shader(softpipe->draw,
                           (softpipe->vs ? softpipe->vs->draw_data : NULL));

   softpipe->dirty |= SP_NEW_VS;
}


static void
softpipe_delete_vs_state(struct pipe_context *pipe, void *vs)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);

   struct sp_vertex_shader *state = (struct sp_vertex_shader *) vs;

   draw_delete_vertex_shader(softpipe->draw, state->draw_data);
   FREE( (void *)state->shader.tokens );
   FREE( state );
}


static void *
softpipe_create_gs_state(struct pipe_context *pipe,
                         const struct pipe_shader_state *templ)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);
   struct sp_geometry_shader *state;

   state = CALLOC_STRUCT(sp_geometry_shader);
   if (state == NULL )
      goto fail;

   state->shader = *templ;

   if (templ->tokens) {
      /* debug */
      if (softpipe->dump_gs)
         tgsi_dump(templ->tokens, 0);

      /* copy shader tokens, the ones passed in will go away.
       */
      state->shader.tokens = tgsi_dup_tokens(templ->tokens);
      if (state->shader.tokens == NULL)
         goto fail;

      state->draw_data = draw_create_geometry_shader(softpipe->draw, templ);
      if (state->draw_data == NULL)
         goto fail;

      state->max_sampler = state->draw_data->info.file_max[TGSI_FILE_SAMPLER];
   }

   return state;

fail:
   if (state) {
      FREE( (void *)state->shader.tokens );
      FREE( state->draw_data );
      FREE( state );
   }
   return NULL;
}


static void
softpipe_bind_gs_state(struct pipe_context *pipe, void *gs)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);

   softpipe->gs = (struct sp_geometry_shader *)gs;

   draw_bind_geometry_shader(softpipe->draw,
                             (softpipe->gs ? softpipe->gs->draw_data : NULL));

   softpipe->dirty |= SP_NEW_GS;
}


static void
softpipe_delete_gs_state(struct pipe_context *pipe, void *gs)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);

   struct sp_geometry_shader *state =
      (struct sp_geometry_shader *)gs;

   draw_delete_geometry_shader(softpipe->draw,
                               (state) ? state->draw_data : 0);

   FREE((void *) state->shader.tokens);
   FREE(state);
}


static void
softpipe_set_constant_buffer(struct pipe_context *pipe,
                             uint shader, uint index,
                             struct pipe_constant_buffer *cb)
{
   struct softpipe_context *softpipe = softpipe_context(pipe);
   struct pipe_resource *constants = cb ? cb->buffer : NULL;
   unsigned size;
   const void *data;

   assert(shader < PIPE_SHADER_TYPES);

   if (cb && cb->user_buffer) {
      constants = softpipe_user_buffer_create(pipe->screen,
                                              (void *) cb->user_buffer,
                                              cb->buffer_size,
                                              PIPE_BIND_CONSTANT_BUFFER);
   }

   size = cb ? cb->buffer_size : 0;
   data = constants ? softpipe_resource_data(constants) : NULL;
   if (data)
      data = (const char *) data + cb->buffer_offset;

   draw_flush(softpipe->draw);

   /* note: reference counting */
   pipe_resource_reference(&softpipe->constants[shader][index], constants);

   if (shader == PIPE_SHADER_VERTEX || shader == PIPE_SHADER_GEOMETRY) {
      draw_set_mapped_constant_buffer(softpipe->draw, shader, index, data, size);
   }

   softpipe->mapped_constants[shader][index] = data;
   softpipe->const_buffer_size[shader][index] = size;

   softpipe->dirty |= SP_NEW_CONSTANTS;

   if (cb && cb->user_buffer) {
      pipe_resource_reference(&constants, NULL);
   }
}


void
softpipe_init_shader_funcs(struct pipe_context *pipe)
{
   pipe->create_fs_state = softpipe_create_fs_state;
   pipe->bind_fs_state   = softpipe_bind_fs_state;
   pipe->delete_fs_state = softpipe_delete_fs_state;

   pipe->create_vs_state = softpipe_create_vs_state;
   pipe->bind_vs_state   = softpipe_bind_vs_state;
   pipe->delete_vs_state = softpipe_delete_vs_state;

   pipe->create_gs_state = softpipe_create_gs_state;
   pipe->bind_gs_state   = softpipe_bind_gs_state;
   pipe->delete_gs_state = softpipe_delete_gs_state;

   pipe->set_constant_buffer = softpipe_set_constant_buffer;
}
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d54 11
a64 1
   struct pipe_shader_state *curfs = &fs->shader;
d67 1
a67 1
   var = softpipe_create_fs_variant_exec(softpipe);
d71 2
a72 14

#if DO_PSTIPPLE_IN_HELPER_MODULE
      if (key->polygon_stipple) {
         /* get new shader that implements polygon stippling */
         var->tokens = 
            util_pstipple_create_fragment_shader(curfs->tokens,
                                                 &var->stipple_sampler_unit);
      }
      else
#endif
      {
         var->tokens = tgsi_dup_tokens(curfs->tokens);
         var->stipple_sampler_unit = 0;
      }
d93 5
d138 1
a138 1
      tgsi_free_tokens(state->shader.tokens);
d200 1
a200 1
   tgsi_free_tokens(state->shader.tokens);
d232 1
a232 1
      tgsi_free_tokens(state->shader.tokens);
d262 1
a262 1
   tgsi_free_tokens(state->shader.tokens);
d302 1
a302 1
      tgsi_free_tokens(state->shader.tokens);
d335 1
a335 1
   tgsi_free_tokens(state->shader.tokens);
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d54 1
a54 11
   struct pipe_shader_state *stipple_fs = NULL, *curfs = &fs->shader;
   unsigned unit = 0;

#if DO_PSTIPPLE_IN_HELPER_MODULE
   if (key->polygon_stipple) {
      /* get new shader that implements polygon stippling */
      stipple_fs = util_pstipple_create_fragment_shader(&softpipe->pipe,
                                                        curfs, &unit);
      curfs = stipple_fs;
   }
#endif
d57 1
a57 1
   var = softpipe_create_fs_variant_exec(softpipe, curfs);
d61 14
a74 2
      var->tokens = tgsi_dup_tokens(curfs->tokens);
      var->stipple_sampler_unit = unit;
a94 5
   if (stipple_fs) {
      FREE((void *) stipple_fs->tokens);
      FREE(stipple_fs);
   }

d135 1
a135 1
      FREE((void *) state->shader.tokens);
d197 1
a197 1
   FREE((void *) state->shader.tokens);
d229 1
a229 1
      FREE( (void *)state->shader.tokens );
d259 1
a259 1
   FREE( (void *)state->shader.tokens );
d299 1
a299 1
      FREE( (void *)state->shader.tokens );
d332 1
a332 1
   FREE((void *) state->shader.tokens);
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d350 2
d359 4
a362 4
   size = constants ? constants->width0 : 0;
   data = constants ? softpipe_resource(constants)->data : NULL;

   assert(shader < PIPE_SHADER_TYPES);
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d36 1
a40 1
#include "tgsi/tgsi_exec.h"
d45 75
d125 1
a125 2
   struct sp_fragment_shader *state;
   unsigned i;
d131 2
a132 8
   /* codegen */
   state = softpipe_create_fs_sse( softpipe, templ );
   if (!state) {
      state = softpipe_create_fs_exec( softpipe, templ );
   }

   if (!state)
      return NULL;
d135 2
a136 1
   state->draw_shader = draw_create_fragment_shader(softpipe->draw, templ);
d138 2
a139 1
      state->delete( state );
a142 12
   /* get/save the summary info for this shader */
   tgsi_scan_shader(templ->tokens, &state->info);

   for (i = 0; i < state->info.num_properties; ++i) {
      if (state->info.properties[i].name == TGSI_PROPERTY_FS_COORD_ORIGIN)
         state->origin_lower_left = state->info.properties[i].data[0];
      else if (state->info.properties[i].name == TGSI_PROPERTY_FS_COORD_PIXEL_CENTER)
	 state->pixel_center_integer = state->info.properties[i].data[0];
      else if (state->info.properties[i].name == TGSI_PROPERTY_FS_COLOR0_WRITES_ALL_CBUFS)
	 state->color0_writes_all_cbufs = state->info.properties[i].data[0];
   }

d151 1
d160 10
a169 2
   draw_bind_fragment_shader(softpipe->draw,
                             (softpipe->fs ? softpipe->fs->draw_shader : NULL));
d180 9
d190 4
a193 1
   assert(fs != softpipe_context(pipe)->fs);
d195 1
a195 5
   if (softpipe->fs_machine->Tokens == state->shader.tokens) {
      /* unbind the shader from the tgsi executor if we're
       * deleting it.
       */
      tgsi_exec_machine_bind_shader(softpipe->fs_machine, NULL, 0, NULL);
d200 2
a201 1
   state->delete( state );
d278 1
a278 3
   /* debug */
   if (softpipe->dump_gs)
      tgsi_dump(templ->tokens, 0);
d280 4
a283 5
   /* copy shader tokens, the ones passed in will go away.
    */
   state->shader.tokens = tgsi_dup_tokens(templ->tokens);
   if (state->shader.tokens == NULL)
      goto fail;
d285 9
a293 3
   state->draw_data = draw_create_geometry_shader(softpipe->draw, templ);
   if (state->draw_data == NULL)
      goto fail;
d295 2
a296 1
   state->max_sampler = state->draw_data->info.file_max[TGSI_FILE_SAMPLER];
d334 2
d343 1
a343 1
                             struct pipe_resource *constants)
d346 13
a358 2
   unsigned size = constants ? constants->width0 : 0;
   const void *data = constants ? softpipe_resource(constants)->data : NULL;
d375 4
@


1.1
log
@Initial revision
@
text
@d81 2
a92 2

   draw_flush(softpipe->draw);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a35 1
#include "util/u_pstipple.h"
d40 1
a44 75
/**
 * Create a new fragment shader variant.
 */
static struct sp_fragment_shader_variant *
create_fs_variant(struct softpipe_context *softpipe,
                  struct sp_fragment_shader *fs,
                  const struct sp_fragment_shader_variant_key *key)
{
   struct sp_fragment_shader_variant *var;
   struct pipe_shader_state *stipple_fs = NULL, *curfs = &fs->shader;
   unsigned unit = 0;

#if DO_PSTIPPLE_IN_HELPER_MODULE
   if (key->polygon_stipple) {
      /* get new shader that implements polygon stippling */
      stipple_fs = util_pstipple_create_fragment_shader(&softpipe->pipe,
                                                        curfs, &unit);
      curfs = stipple_fs;
   }
#endif

   /* codegen, create variant object */
   var = softpipe_create_fs_variant_exec(softpipe, curfs);

   if (var) {
      var->key = *key;
      var->tokens = tgsi_dup_tokens(curfs->tokens);
      var->stipple_sampler_unit = unit;

      tgsi_scan_shader(var->tokens, &var->info);

      /* See comments elsewhere about draw fragment shaders */
#if 0
      /* draw's fs state */
      var->draw_shader = draw_create_fragment_shader(softpipe->draw,
                                                     &fs->shader);
      if (!var->draw_shader) {
         var->delete(var);
         FREE((void *) var->tokens);
         return NULL;
      }
#endif

      /* insert variant into linked list */
      var->next = fs->variants;
      fs->variants = var;
   }

   if (stipple_fs) {
      FREE((void *) stipple_fs->tokens);
      FREE(stipple_fs);
   }

   return var;
}


struct sp_fragment_shader_variant *
softpipe_find_fs_variant(struct softpipe_context *sp,
                         struct sp_fragment_shader *fs,
                         const struct sp_fragment_shader_variant_key *key)
{
   struct sp_fragment_shader_variant *var;

   for (var = fs->variants; var; var = var->next) {
      if (memcmp(&var->key, key, sizeof(*key)) == 0) {
         /* found it */
         return var;
      }
   }

   return create_fs_variant(sp, fs, key);
}


d50 2
a51 1
   struct sp_fragment_shader *state = CALLOC_STRUCT(sp_fragment_shader);
d57 8
a64 2
   /* we need to keep a local copy of the tokens */
   state->shader.tokens = tgsi_dup_tokens(templ->tokens);
d67 1
a67 2
   state->draw_shader = draw_create_fragment_shader(softpipe->draw,
                                                    &state->shader);
d69 1
a69 2
      FREE((void *) state->shader.tokens);
      FREE(state);
d73 10
d91 2
a92 1
   struct sp_fragment_shader *state = (struct sp_fragment_shader *) fs;
d101 2
a102 10
   /* This depends on the current fragment shader and must always be
    * re-validated before use.
    */
   softpipe->fs_variant = NULL;

   if (state)
      draw_bind_fragment_shader(softpipe->draw,
                                state->draw_shader);
   else
      draw_bind_fragment_shader(softpipe->draw, NULL);
a112 1
   struct sp_fragment_shader_variant *var, *next_var;
d114 1
a114 1
   assert(fs != softpipe->fs);
d116 5
a120 12
   /* delete variants */
   for (var = state->variants; var; var = next_var) {
      next_var = var->next;

      assert(var != softpipe->fs_variant);

      /* See comments elsewhere about draw fragment shaders */
#if 0
      draw_delete_fragment_shader(softpipe->draw, var->draw_shader);
#endif

      var->delete(var, softpipe->fs_machine);
d125 1
a125 2
   FREE((void *) state->shader.tokens);
   FREE(state);
d202 3
a204 1
   state->shader = *templ;
d206 5
a210 4
   if (templ->tokens) {
      /* debug */
      if (softpipe->dump_gs)
         tgsi_dump(templ->tokens, 0);
d212 3
a214 9
      /* copy shader tokens, the ones passed in will go away.
       */
      state->shader.tokens = tgsi_dup_tokens(templ->tokens);
      if (state->shader.tokens == NULL)
         goto fail;

      state->draw_data = draw_create_geometry_shader(softpipe->draw, templ);
      if (state->draw_data == NULL)
         goto fail;
d216 1
a216 2
      state->max_sampler = state->draw_data->info.file_max[TGSI_FILE_SAMPLER];
   }
a253 2

   FREE((void *) state->shader.tokens);
d261 1
a261 1
                             struct pipe_constant_buffer *cb)
d264 2
a265 13
   struct pipe_resource *constants = cb ? cb->buffer : NULL;
   unsigned size;
   const void *data;

   if (cb && cb->user_buffer) {
      constants = softpipe_user_buffer_create(pipe->screen,
                                              (void *) cb->user_buffer,
                                              cb->buffer_size,
                                              PIPE_BIND_CONSTANT_BUFFER);
   }

   size = constants ? constants->width0 : 0;
   data = constants ? softpipe_resource(constants)->data : NULL;
a281 4

   if (cb && cb->user_buffer) {
      pipe_resource_reference(&constants, NULL);
   }
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
a349 2
   assert(shader < PIPE_SHADER_TYPES);

d357 4
a360 4
   size = cb ? cb->buffer_size : 0;
   data = constants ? softpipe_resource_data(constants) : NULL;
   if (data)
      data = (const char *) data + cb->buffer_offset;
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d54 11
a64 1
   struct pipe_shader_state *curfs = &fs->shader;
d67 1
a67 1
   var = softpipe_create_fs_variant_exec(softpipe);
d71 2
a72 14

#if DO_PSTIPPLE_IN_HELPER_MODULE
      if (key->polygon_stipple) {
         /* get new shader that implements polygon stippling */
         var->tokens = 
            util_pstipple_create_fragment_shader(curfs->tokens,
                                                 &var->stipple_sampler_unit);
      }
      else
#endif
      {
         var->tokens = tgsi_dup_tokens(curfs->tokens);
         var->stipple_sampler_unit = 0;
      }
d93 5
d138 1
a138 1
      tgsi_free_tokens(state->shader.tokens);
d200 1
a200 1
   tgsi_free_tokens(state->shader.tokens);
d232 1
a232 1
      tgsi_free_tokens(state->shader.tokens);
d262 1
a262 1
   tgsi_free_tokens(state->shader.tokens);
d302 1
a302 1
      tgsi_free_tokens(state->shader.tokens);
d335 1
a335 1
   tgsi_free_tokens(state->shader.tokens);
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d54 1
a54 11
   struct pipe_shader_state *stipple_fs = NULL, *curfs = &fs->shader;
   unsigned unit = 0;

#if DO_PSTIPPLE_IN_HELPER_MODULE
   if (key->polygon_stipple) {
      /* get new shader that implements polygon stippling */
      stipple_fs = util_pstipple_create_fragment_shader(&softpipe->pipe,
                                                        curfs, &unit);
      curfs = stipple_fs;
   }
#endif
d57 1
a57 1
   var = softpipe_create_fs_variant_exec(softpipe, curfs);
d61 14
a74 2
      var->tokens = tgsi_dup_tokens(curfs->tokens);
      var->stipple_sampler_unit = unit;
a94 5
   if (stipple_fs) {
      FREE((void *) stipple_fs->tokens);
      FREE(stipple_fs);
   }

d135 1
a135 1
      FREE((void *) state->shader.tokens);
d197 1
a197 1
   FREE((void *) state->shader.tokens);
d229 1
a229 1
      FREE( (void *)state->shader.tokens );
d259 1
a259 1
   FREE( (void *)state->shader.tokens );
d299 1
a299 1
      FREE( (void *)state->shader.tokens );
d332 1
a332 1
   FREE((void *) state->shader.tokens);
@


