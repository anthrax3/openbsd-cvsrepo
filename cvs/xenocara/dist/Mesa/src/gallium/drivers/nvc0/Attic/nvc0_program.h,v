head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.07.09.21.08.54;	author jsg;	state dead;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.14.00.47;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.11.50;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@
#ifndef __NVC0_PROGRAM_H__
#define __NVC0_PROGRAM_H__

#include "pipe/p_state.h"

#define NVC0_CAP_MAX_PROGRAM_TEMPS 128


struct nvc0_transform_feedback_state {
   uint32_t stride[4];
   uint8_t varying_count[4];
   uint8_t varying_index[4][128];
};


#define NVC0_SHADER_HEADER_SIZE (20 * 4)

struct nvc0_program {
   struct pipe_shader_state pipe;

   ubyte type;
   boolean translated;
   boolean need_tls;
   uint8_t num_gprs;

   uint32_t *code;
   uint32_t *immd_data;
   unsigned code_base;
   unsigned code_size;
   unsigned immd_base;
   unsigned immd_size; /* size of immediate array data */
   unsigned parm_size; /* size of non-bindable uniforms (c0[]) */

   uint32_t hdr[20];
   uint32_t flags[2];

   struct {
      uint32_t clip_mode; /* clip/cull selection */
      uint8_t clip_enable; /* mask of defined clip planes */
      uint8_t num_ucps; /* also set to max if ClipDistance is used */
      uint8_t edgeflag; /* attribute index of edgeflag input */
      boolean need_vertex_id;
   } vp;
   struct {
      uint8_t early_z;
      uint8_t in_pos[PIPE_MAX_SHADER_INPUTS];
   } fp;
   struct {
      uint32_t tess_mode; /* ~0 if defined by the other stage */
      uint32_t input_patch_size;
   } tp;
   struct {
      uint32_t lmem_size; /* local memory (TGSI PRIVATE resource) size */
      uint32_t smem_size; /* shared memory (TGSI LOCAL resource) size */
      void *syms;
      unsigned num_syms;
   } cp;
   uint8_t num_barriers;

   void *relocs;

   struct nvc0_transform_feedback_state *tfb;

   struct nouveau_heap *mem;
};

#endif
@


1.2
log
@Merge Mesa 9.2.0
@
text
@@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a5 1
#include "tgsi/tgsi_scan.h"
d7 9
a15 1
#define NVC0_CAP_MAX_PROGRAM_TEMPS 64
d24 2
a25 1
   ubyte max_gpr;
d28 1
d31 3
a33 3
   unsigned parm_size;

   uint32_t hdr[20]; /* TODO: move this into code to save space */
d35 1
d39 5
a43 3
      uint8_t edgeflag;
      uint8_t num_ucps;
      uint8_t out_pos[PIPE_MAX_SHADER_OUTPUTS];
d49 11
a61 4
   unsigned num_relocs;

   struct nouveau_resource *res;
};
d63 1
a63 13
/* first 2 bits are written into the program header, for each input */
#define NVC0_INTERP_FLAT          (1 << 0)
#define NVC0_INTERP_PERSPECTIVE   (2 << 0)
#define NVC0_INTERP_LINEAR        (3 << 0)
#define NVC0_INTERP_CENTROID      (1 << 2)

/* analyze TGSI and see which TEMP[] are used as subroutine inputs/outputs */
struct nvc0_subroutine {
   unsigned id;
   unsigned first_insn;
   uint32_t argv[NVC0_CAP_MAX_PROGRAM_TEMPS][4];
   uint32_t retv[NVC0_CAP_MAX_PROGRAM_TEMPS][4];
};
d65 1
a65 27
struct nvc0_translation_info {
   struct nvc0_program *prog;
   struct tgsi_full_instruction *insns;
   unsigned num_insns;
   ubyte input_file;
   ubyte output_file;
   ubyte fp_depth_output;
   uint16_t input_loc[PIPE_MAX_SHADER_INPUTS][4];
   uint16_t output_loc[PIPE_MAX_SHADER_OUTPUTS][4];
   uint16_t sysval_loc[TGSI_SEMANTIC_COUNT];
   boolean sysval_in[TGSI_SEMANTIC_COUNT];
   int input_access[PIPE_MAX_SHADER_INPUTS][4];
   int output_access[PIPE_MAX_SHADER_OUTPUTS][4];
   ubyte interp_mode[PIPE_MAX_SHADER_INPUTS];
   boolean indirect_inputs;
   boolean indirect_outputs;
   boolean require_stores;
   boolean global_stores;
   uint32_t *immd32;
   ubyte *immd32_ty;
   unsigned immd32_nr;
   unsigned temp128_nr;
   ubyte edgeflag_out;
   struct nvc0_subroutine *subr;
   unsigned num_subrs;
   boolean append_ucp;
   struct tgsi_shader_info scan;
a66 5

int nvc0_generate_code(struct nvc0_translation_info *);

void nvc0_relocate_program(struct nvc0_program *,
                           uint32_t code_base, uint32_t data_base);
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@d6 1
d8 1
a8 9
#define NVC0_CAP_MAX_PROGRAM_TEMPS 128


struct nvc0_transform_feedback_state {
   uint32_t stride[4];
   uint8_t varying_count[4];
   uint8_t varying_index[4][128];
};

d17 1
a17 2
   boolean need_tls;
   uint8_t num_gprs;
a19 1
   uint32_t *immd_data;
d22 3
a24 3
   unsigned immd_base;
   unsigned immd_size; /* size of immediate array data */
   unsigned parm_size; /* size of non-bindable uniforms (c0[]) */
a25 1
   uint32_t hdr[20];
d29 3
a31 5
      uint32_t clip_mode; /* clip/cull selection */
      uint8_t clip_enable; /* mask of defined clip planes */
      uint8_t num_ucps; /* also set to max if ClipDistance is used */
      uint8_t edgeflag; /* attribute index of edgeflag input */
      boolean need_vertex_id;
a36 11
   struct {
      uint32_t tess_mode; /* ~0 if defined by the other stage */
      uint32_t input_patch_size;
   } tp;
   struct {
      uint32_t lmem_size; /* local memory (TGSI PRIVATE resource) size */
      uint32_t smem_size; /* shared memory (TGSI LOCAL resource) size */
      void *syms;
      unsigned num_syms;
   } cp;
   uint8_t num_barriers;
d39 4
d44 13
a56 1
   struct nvc0_transform_feedback_state *tfb;
d58 27
a84 1
   struct nouveau_heap *mem;
d86 5
@

