head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.07.09.21.08.54;	author jsg;	state dead;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.14.00.46;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.11.50;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@/*
 * Copyright 2008 Ben Skeggs
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#include "pipe/p_state.h"
#include "pipe/p_defines.h"
#include "util/u_inlines.h"
#include "util/u_format.h"

#include "nvc0_context.h"
#include "nvc0_resource.h"

static uint32_t
nvc0_tex_choose_tile_dims(unsigned nx, unsigned ny, unsigned nz)
{
   return nv50_tex_choose_tile_dims_helper(nx, ny, nz);
}

static uint32_t
nvc0_mt_choose_storage_type(struct nv50_miptree *mt, boolean compressed)
{
   const unsigned ms = util_logbase2(mt->base.base.nr_samples);

   uint32_t tile_flags;

   if (unlikely(mt->base.base.bind & PIPE_BIND_CURSOR))
      return 0;
   if (unlikely(mt->base.base.flags & NOUVEAU_RESOURCE_FLAG_LINEAR))
      return 0;

   switch (mt->base.base.format) {
   case PIPE_FORMAT_Z16_UNORM:
      if (compressed)
         tile_flags = 0x02 + ms;
      else
         tile_flags = 0x01;
      break;
   case PIPE_FORMAT_S8_UINT_Z24_UNORM:
      if (compressed)
         tile_flags = 0x51 + ms;
      else
         tile_flags = 0x46;
      break;
   case PIPE_FORMAT_Z24X8_UNORM:
   case PIPE_FORMAT_Z24_UNORM_S8_UINT:
      if (compressed)
         tile_flags = 0x17 + ms;
      else
         tile_flags = 0x11;
      break;
   case PIPE_FORMAT_Z32_FLOAT:
      if (compressed)
         tile_flags = 0x86 + ms;
      else
         tile_flags = 0x7b;
      break;
   case PIPE_FORMAT_Z32_FLOAT_S8X24_UINT:
      if (compressed)
         tile_flags = 0xce + ms;
      else
         tile_flags = 0xc3;
      break;
   default:
      switch (util_format_get_blocksizebits(mt->base.base.format)) {
      case 128:
         if (compressed)
            tile_flags = 0xf4 + ms * 2;
         else
            tile_flags = 0xfe;
         break;
      case 64:
         if (compressed) {
            switch (ms) {
            case 0: tile_flags = 0xe6; break;
            case 1: tile_flags = 0xeb; break;
            case 2: tile_flags = 0xed; break;
            case 3: tile_flags = 0xf2; break;
            default:
               return 0;
            }
         } else {
            tile_flags = 0xfe;
         }
         break;
      case 32:
         if (compressed && ms) {
            switch (ms) {
               /* This one makes things blurry:
            case 0: tile_flags = 0xdb; break;
               */
            case 1: tile_flags = 0xdd; break;
            case 2: tile_flags = 0xdf; break;
            case 3: tile_flags = 0xe4; break;
            default:
               return 0;
            }
         } else {
            tile_flags = 0xfe;
         }
         break;
      case 16:
      case 8:
         tile_flags = 0xfe;
         break;
      default:
         return 0;
      }
      break;
   }

   return tile_flags;
}

static INLINE boolean
nvc0_miptree_init_ms_mode(struct nv50_miptree *mt)
{
   switch (mt->base.base.nr_samples) {
   case 8:
      mt->ms_mode = NVC0_3D_MULTISAMPLE_MODE_MS8;
      mt->ms_x = 2;
      mt->ms_y = 1;
      break;
   case 4:
      mt->ms_mode = NVC0_3D_MULTISAMPLE_MODE_MS4;
      mt->ms_x = 1;
      mt->ms_y = 1;
      break;
   case 2:
      mt->ms_mode = NVC0_3D_MULTISAMPLE_MODE_MS2;
      mt->ms_x = 1;
      break;
   case 1:
   case 0:
      mt->ms_mode = NVC0_3D_MULTISAMPLE_MODE_MS1;
      break;
   default:
      NOUVEAU_ERR("invalid nr_samples: %u\n", mt->base.base.nr_samples);
      return FALSE;
   }
   return TRUE;
}

static void
nvc0_miptree_init_layout_video(struct nv50_miptree *mt)
{
   const struct pipe_resource *pt = &mt->base.base;
   const unsigned blocksize = util_format_get_blocksize(pt->format);

   assert(pt->last_level == 0);
   assert(mt->ms_x == 0 && mt->ms_y == 0);
   assert(!util_format_is_compressed(pt->format));

   mt->layout_3d = pt->target == PIPE_TEXTURE_3D;

   mt->level[0].tile_mode = 0x10;
   mt->level[0].pitch = align(pt->width0 * blocksize, 64);
   mt->total_size = align(pt->height0, 16) * mt->level[0].pitch * (mt->layout_3d ? pt->depth0 : 1);

   if (pt->array_size > 1) {
      mt->layer_stride = align(mt->total_size, NVC0_TILE_SIZE(0x10));
      mt->total_size = mt->layer_stride * pt->array_size;
   }
}

static void
nvc0_miptree_init_layout_tiled(struct nv50_miptree *mt)
{
   struct pipe_resource *pt = &mt->base.base;
   unsigned w, h, d, l;
   const unsigned blocksize = util_format_get_blocksize(pt->format);

   mt->layout_3d = pt->target == PIPE_TEXTURE_3D;

   w = pt->width0 << mt->ms_x;
   h = pt->height0 << mt->ms_y;

   /* For 3D textures, a mipmap is spanned by all the layers, for array
    * textures and cube maps, each layer contains its own mipmaps.
    */
   d = mt->layout_3d ? pt->depth0 : 1;

   assert(!mt->ms_mode || !pt->last_level);

   for (l = 0; l <= pt->last_level; ++l) {
      struct nv50_miptree_level *lvl = &mt->level[l];
      unsigned tsx, tsy, tsz;
      unsigned nbx = util_format_get_nblocksx(pt->format, w);
      unsigned nby = util_format_get_nblocksy(pt->format, h);

      lvl->offset = mt->total_size;

      lvl->tile_mode = nvc0_tex_choose_tile_dims(nbx, nby, d);

      tsx = NVC0_TILE_SIZE_X(lvl->tile_mode); /* x is tile row pitch in bytes */
      tsy = NVC0_TILE_SIZE_Y(lvl->tile_mode);
      tsz = NVC0_TILE_SIZE_Z(lvl->tile_mode);

      lvl->pitch = align(nbx * blocksize, tsx);

      mt->total_size += lvl->pitch * align(nby, tsy) * align(d, tsz);

      w = u_minify(w, 1);
      h = u_minify(h, 1);
      d = u_minify(d, 1);
   }

   if (pt->array_size > 1) {
      mt->layer_stride = align(mt->total_size,
                               NVC0_TILE_SIZE(mt->level[0].tile_mode));
      mt->total_size = mt->layer_stride * pt->array_size;
   }
}

const struct u_resource_vtbl nvc0_miptree_vtbl =
{
   nv50_miptree_get_handle,         /* get_handle */
   nv50_miptree_destroy,            /* resource_destroy */
   nvc0_miptree_transfer_map,       /* transfer_map */
   u_default_transfer_flush_region, /* transfer_flush_region */
   nvc0_miptree_transfer_unmap,     /* transfer_unmap */
   u_default_transfer_inline_write  /* transfer_inline_write */
};

struct pipe_resource *
nvc0_miptree_create(struct pipe_screen *pscreen,
                    const struct pipe_resource *templ)
{
   struct nouveau_device *dev = nouveau_screen(pscreen)->device;
   struct nv50_miptree *mt = CALLOC_STRUCT(nv50_miptree);
   struct pipe_resource *pt = &mt->base.base;
   boolean compressed = dev->drm_version >= 0x01000101;
   int ret;
   union nouveau_bo_config bo_config;
   uint32_t bo_flags;

   if (!mt)
      return NULL;

   mt->base.vtbl = &nvc0_miptree_vtbl;
   *pt = *templ;
   pipe_reference_init(&pt->reference, 1);
   pt->screen = pscreen;

   if (pt->usage == PIPE_USAGE_STAGING) {
      switch (pt->target) {
      case PIPE_TEXTURE_1D:
      case PIPE_TEXTURE_2D:
      case PIPE_TEXTURE_RECT:
         if (pt->last_level == 0 &&
             !util_format_is_depth_or_stencil(pt->format) &&
             pt->nr_samples <= 1)
            pt->flags |= NOUVEAU_RESOURCE_FLAG_LINEAR;
         break;
      default:
         break;
      }
   }

   bo_config.nvc0.memtype = nvc0_mt_choose_storage_type(mt, compressed);

   if (!nvc0_miptree_init_ms_mode(mt)) {
      FREE(mt);
      return NULL;
   }

   if (unlikely(pt->flags & NVC0_RESOURCE_FLAG_VIDEO)) {
      nvc0_miptree_init_layout_video(mt);
   } else
   if (likely(bo_config.nvc0.memtype)) {
      nvc0_miptree_init_layout_tiled(mt);
   } else
   if (!nv50_miptree_init_layout_linear(mt, 128)) {
      FREE(mt);
      return NULL;
   }
   bo_config.nvc0.tile_mode = mt->level[0].tile_mode;

   if (!bo_config.nvc0.memtype && pt->usage == PIPE_USAGE_STAGING)
      mt->base.domain = NOUVEAU_BO_GART;
   else
      mt->base.domain = NOUVEAU_BO_VRAM;

   bo_flags = mt->base.domain | NOUVEAU_BO_NOSNOOP;

   if (mt->base.base.bind & (PIPE_BIND_CURSOR | PIPE_BIND_DISPLAY_TARGET))
      bo_flags |= NOUVEAU_BO_CONTIG;

   ret = nouveau_bo_new(dev, bo_flags, 4096, mt->total_size, &bo_config,
                        &mt->base.bo);
   if (ret) {
      FREE(mt);
      return NULL;
   }
   mt->base.address = mt->base.bo->offset;

   NOUVEAU_DRV_STAT(nouveau_screen(pscreen), tex_obj_current_count, 1);
   NOUVEAU_DRV_STAT(nouveau_screen(pscreen), tex_obj_current_bytes,
                    mt->total_size);

   return pt;
}

/* Offset of zslice @@z from start of level @@l. */
INLINE unsigned
nvc0_mt_zslice_offset(const struct nv50_miptree *mt, unsigned l, unsigned z)
{
   const struct pipe_resource *pt = &mt->base.base;

   unsigned tds = NVC0_TILE_SHIFT_Z(mt->level[l].tile_mode);
   unsigned ths = NVC0_TILE_SHIFT_Y(mt->level[l].tile_mode);

   unsigned nby = util_format_get_nblocksy(pt->format,
                                           u_minify(pt->height0, l));

   /* to next 2D tile slice within a 3D tile */
   unsigned stride_2d = NVC0_TILE_SIZE_2D(mt->level[l].tile_mode);

   /* to slice in the next (in z direction) 3D tile */
   unsigned stride_3d = (align(nby, (1 << ths)) * mt->level[l].pitch) << tds;

   return (z & (1 << (tds - 1))) * stride_2d + (z >> tds) * stride_3d;
}

/* Surface functions.
 */

struct pipe_surface *
nvc0_miptree_surface_new(struct pipe_context *pipe,
                         struct pipe_resource *pt,
                         const struct pipe_surface *templ)
{
   struct nv50_surface *ns = nv50_surface_from_miptree(nv50_miptree(pt), templ);
   if (!ns)
      return NULL;
   ns->base.context = pipe;
   return &ns->base;
}
@


1.2
log
@Merge Mesa 9.2.0
@
text
@@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d17 4
a20 4
 * THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
a29 1
#include "nvc0_transfer.h"
d31 2
a32 2
static INLINE uint32_t
get_tile_dims(unsigned nx, unsigned ny, unsigned nz)
d34 7
a40 1
   uint32_t tile_mode = 0x000;
d42 1
a42 7
   if (ny > 64) tile_mode = 0x040; /* height 128 tiles */
   else
   if (ny > 32) tile_mode = 0x030; /* height 64 tiles */
   else
   if (ny > 16) tile_mode = 0x020; /* height 32 tiles */
   else
   if (ny >  8) tile_mode = 0x010; /* height 16 tiles */
d44 4
a47 5
   if (nz == 1)
      return tile_mode;
   else
   if (tile_mode > 0x020)
      tile_mode = 0x020;
d49 79
a127 5
   if (nz > 16 && tile_mode < 0x020)
      return tile_mode | 0x500; /* depth 32 tiles */
   if (nz > 8) return tile_mode | 0x400; /* depth 16 tiles */
   if (nz > 4) return tile_mode | 0x300; /* depth 8 tiles */
   if (nz > 2) return tile_mode | 0x200; /* depth 4 tiles */
d129 1
a129 1
   return tile_mode | 0x100;
d132 2
a133 2
uint32_t
nvc0_miptree_zslice_offset(struct nvc0_miptree *mt, unsigned l, unsigned z)
d135 25
a159 1
   unsigned nblocksy; /* height of texture level aligned to tile height */
d161 5
a165 2
   unsigned stride_2d; /* to next slice within a 3D tile */
   unsigned stride_3d; /* to slice in the next (in z direction !) 3D tile */
d167 3
a169 2
   unsigned tile_d_shift = NVC0_TILE_DIM_SHIFT(mt->level[l].tile_mode, 2);
   unsigned tile_d = 1 << tile_d_shift;
d171 1
a171 2
   nblocksy = util_format_get_nblocksy(mt->base.base.format,
                                       u_minify(mt->base.base.height0, l));
d173 3
a175 1
   nblocksy = align(nblocksy, NVC0_TILE_HEIGHT(mt->level[l].tile_mode));
d177 4
a180 5
   stride_2d = NVC0_TILE_SIZE_2D(mt->level[l].tile_mode);

   stride_3d = (nblocksy * mt->level[l].pitch) << tile_d_shift;

   return (z & (tile_d - 1)) * stride_2d + (z >> tile_d_shift) * stride_3d;
d184 1
a184 1
nvc0_miptree_destroy(struct pipe_screen *pscreen, struct pipe_resource *pt)
d186 15
a200 1
   struct nvc0_miptree *mt = nvc0_miptree(pt);
d202 9
a210 1
   nouveau_screen_bo_release(pscreen, mt->base.bo);
d212 3
a214 2
   FREE(mt);
}
d216 1
a216 7
static boolean
nvc0_miptree_get_handle(struct pipe_screen *pscreen,
                        struct pipe_resource *pt,
                        struct winsys_handle *whandle)
{
   struct nvc0_miptree *mt = nvc0_miptree(pt);
   unsigned stride;
d218 1
a218 2
   if (!mt || !mt->base.bo)
      return FALSE;
d220 4
a223 2
   stride = util_format_get_stride(mt->base.base.format,
                                   mt->base.base.width0);
d225 5
a229 4
   return nouveau_screen_bo_get_handle(pscreen,
                                       mt->base.bo,
                                       stride,
                                       whandle);
d234 3
a236 5
   nvc0_miptree_get_handle,         /* get_handle */
   nvc0_miptree_destroy,            /* resource_destroy */
   nvc0_miptree_transfer_new,       /* get_transfer */
   nvc0_miptree_transfer_del,       /* transfer_destroy */
   nvc0_miptree_transfer_map,	      /* transfer_map */
d247 1
a247 1
   struct nvc0_miptree *mt = CALLOC_STRUCT(nvc0_miptree);
d249 1
d251 2
a252 2
   unsigned w, h, d, l, alloc_size;
   uint32_t tile_flags;
d262 14
a275 1
   mt->layout_3d = pt->target == PIPE_TEXTURE_3D;
d277 1
a277 3
   w = pt->width0;
   h = pt->height0;
   d = mt->layout_3d ? pt->depth0 : 1;
d279 3
a281 40
   switch (pt->format) {
   case PIPE_FORMAT_Z16_UNORM:
      tile_flags = 0x0700; /* COMPRESSED */
      tile_flags = 0x0100; /* NORMAL */
      break;
   case PIPE_FORMAT_S8_USCALED_Z24_UNORM:
      tile_flags = 0x5300; /* MSAA 4, COMPRESSED */
      tile_flags = 0x4600; /* NORMAL */
      break;
   case PIPE_FORMAT_Z24X8_UNORM:
   case PIPE_FORMAT_Z24_UNORM_S8_USCALED:
      tile_flags = 0x1100; /* NORMAL */
      if (w * h >= 128 * 128 && 0)
         tile_flags = 0x1700; /* COMPRESSED, requires magic */
      break;
   case PIPE_FORMAT_R32G32B32A32_FLOAT:
      tile_flags = 0xf500; /* COMPRESSED */
      tile_flags = 0xf700; /* MSAA 2 */
      tile_flags = 0xf900; /* MSAA 4 */
      tile_flags = 0xfe00; /* NORMAL */
      break;
   case PIPE_FORMAT_Z32_FLOAT:
      tile_flags = 0x7b00;
      break;
   case PIPE_FORMAT_Z32_FLOAT_S8X24_USCALED:
      tile_flags = 0xce00; /* COMPRESSED */
      tile_flags = 0xcf00; /* MSAA 2, COMPRESSED */
      tile_flags = 0xd000; /* MSAA 4, COMPRESSED */
      tile_flags = 0xc300; /* NORMAL */
      break;
   case PIPE_FORMAT_R16G16B16A16_UNORM:
      tile_flags = 0xe900; /* COMPRESSED */
      tile_flags = 0xfe00; /* NORMAL */
      break;
   default:
      tile_flags = 0xe000; /* MSAA 4, COMPRESSED 32 BIT */
      tile_flags = 0xfe00; /* NORMAL 32 BIT */
      if (w * h >= 128 * 128 && 0)
         tile_flags = 0xdb00; /* COMPRESSED 32 BIT, requires magic */
      break;
d284 11
a294 8
   /* For 3D textures, a mipmap is spanned by all the layers, for array
    * textures and cube maps, each layer contains its own mipmaps.
    */
   for (l = 0; l <= pt->last_level; ++l) {
      struct nvc0_miptree_level *lvl = &mt->level[l];
      unsigned nbx = util_format_get_nblocksx(pt->format, w);
      unsigned nby = util_format_get_nblocksy(pt->format, h);
      unsigned blocksize = util_format_get_blocksize(pt->format);
d296 4
a299 3
      lvl->offset = mt->total_size;
      lvl->tile_mode = get_tile_dims(nbx, nby, d);
      lvl->pitch = align(nbx * blocksize, NVC0_TILE_PITCH(lvl->tile_mode));
d301 1
a301 3
      mt->total_size += lvl->pitch *
         align(nby, NVC0_TILE_HEIGHT(lvl->tile_mode)) *
         align(d, NVC0_TILE_DEPTH(lvl->tile_mode));
d303 2
a304 4
      w = u_minify(w, 1);
      h = u_minify(h, 1);
      d = u_minify(d, 1);
   }
d306 2
a307 13
   if (pt->array_size > 1) {
      mt->layer_stride = align(mt->total_size,
                               NVC0_TILE_SIZE(mt->level[0].tile_mode));
      mt->total_size = mt->layer_stride * pt->array_size;
   }

   alloc_size = mt->total_size;
   if (tile_flags == 0x1700)
      alloc_size *= 3; /* HiZ, XXX: correct size */

   ret = nouveau_bo_new_tile(dev, NOUVEAU_BO_VRAM, 256, alloc_size,
                             mt->level[0].tile_mode, tile_flags,
                             &mt->base.bo);
d312 5
a316 1
   mt->base.domain = NOUVEAU_BO_VRAM;
d321 3
a323 4
struct pipe_resource *
nvc0_miptree_from_handle(struct pipe_screen *pscreen,
                         const struct pipe_resource *templ,
                         struct winsys_handle *whandle)
d325 1
a325 2
   struct nvc0_miptree *mt;
   unsigned stride;
d327 2
a328 7
   /* only supports 2D, non-mipmapped textures for the moment */
   if ((templ->target != PIPE_TEXTURE_2D &&
        templ->target != PIPE_TEXTURE_RECT) ||
       templ->last_level != 0 ||
       templ->depth0 != 1 ||
       templ->array_size > 1)
      return NULL;
d330 2
a331 3
   mt = CALLOC_STRUCT(nvc0_miptree);
   if (!mt)
      return NULL;
d333 2
a334 5
   mt->base.bo = nouveau_screen_bo_from_handle(pscreen, whandle, &stride);
   if (mt->base.bo == NULL) {
      FREE(mt);
      return NULL;
   }
d336 2
a337 7
   mt->base.base = *templ;
   mt->base.vtbl = &nvc0_miptree_vtbl;
   pipe_reference_init(&mt->base.base.reference, 1);
   mt->base.base.screen = pscreen;
   mt->level[0].pitch = stride;
   mt->level[0].offset = 0;
   mt->level[0].tile_mode = mt->base.bo->tile_mode;
d339 1
a339 2
   /* no need to adjust bo reference count */
   return &mt->base.base;
a341 1

d350 1
a350 6
   struct nvc0_miptree *mt = nvc0_miptree(pt); /* guaranteed */
   struct nvc0_surface *ns;
   struct pipe_surface *ps;
   struct nvc0_miptree_level *lvl = &mt->level[templ->u.tex.level];

   ns = CALLOC_STRUCT(nvc0_surface);
d353 2
a354 31
   ps = &ns->base;

   pipe_reference_init(&ps->reference, 1);
   pipe_resource_reference(&ps->texture, pt);
   ps->context = pipe;
   ps->format = templ->format;
   ps->usage = templ->usage;
   ps->u.tex.level = templ->u.tex.level;
   ps->u.tex.first_layer = templ->u.tex.first_layer;
   ps->u.tex.last_layer = templ->u.tex.last_layer;

   ns->width = u_minify(pt->width0, ps->u.tex.level);
   ns->height = u_minify(pt->height0, ps->u.tex.level);
   ns->depth = ps->u.tex.last_layer - ps->u.tex.first_layer + 1;
   ns->offset = lvl->offset;

   /* comment says there are going to be removed, but they're used by the st */
   ps->width = ns->width;
   ps->height = ns->height;

   return ps;
}

void
nvc0_miptree_surface_del(struct pipe_context *pipe, struct pipe_surface *ps)
{
   struct nvc0_surface *s = nvc0_surface(ps);

   pipe_resource_reference(&ps->texture, NULL);

   FREE(s);
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@d17 4
a20 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d30 1
d32 2
a33 2
static uint32_t
nvc0_tex_choose_tile_dims(unsigned nx, unsigned ny, unsigned nz)
d35 1
a35 2
   return nv50_tex_choose_tile_dims_helper(nx, ny, nz);
}
d37 7
a43 4
static uint32_t
nvc0_mt_choose_storage_type(struct nv50_miptree *mt, boolean compressed)
{
   const unsigned ms = util_logbase2(mt->base.base.nr_samples);
d45 5
a49 6
   uint32_t tile_flags;

   if (unlikely(mt->base.base.bind & PIPE_BIND_CURSOR))
      return 0;
   if (unlikely(mt->base.base.flags & NOUVEAU_RESOURCE_FLAG_LINEAR))
      return 0;
d51 5
a55 79
   switch (mt->base.base.format) {
   case PIPE_FORMAT_Z16_UNORM:
      if (compressed)
         tile_flags = 0x02 + ms;
      else
         tile_flags = 0x01;
      break;
   case PIPE_FORMAT_S8_UINT_Z24_UNORM:
      if (compressed)
         tile_flags = 0x51 + ms;
      else
         tile_flags = 0x46;
      break;
   case PIPE_FORMAT_Z24X8_UNORM:
   case PIPE_FORMAT_Z24_UNORM_S8_UINT:
      if (compressed)
         tile_flags = 0x17 + ms;
      else
         tile_flags = 0x11;
      break;
   case PIPE_FORMAT_Z32_FLOAT:
      if (compressed)
         tile_flags = 0x86 + ms;
      else
         tile_flags = 0x7b;
      break;
   case PIPE_FORMAT_Z32_FLOAT_S8X24_UINT:
      if (compressed)
         tile_flags = 0xce + ms;
      else
         tile_flags = 0xc3;
      break;
   default:
      switch (util_format_get_blocksizebits(mt->base.base.format)) {
      case 128:
         if (compressed)
            tile_flags = 0xf4 + ms * 2;
         else
            tile_flags = 0xfe;
         break;
      case 64:
         if (compressed) {
            switch (ms) {
            case 0: tile_flags = 0xe6; break;
            case 1: tile_flags = 0xeb; break;
            case 2: tile_flags = 0xed; break;
            case 3: tile_flags = 0xf2; break;
            default:
               return 0;
            }
         } else {
            tile_flags = 0xfe;
         }
         break;
      case 32:
         if (compressed && ms) {
            switch (ms) {
               /* This one makes things blurry:
            case 0: tile_flags = 0xdb; break;
               */
            case 1: tile_flags = 0xdd; break;
            case 2: tile_flags = 0xdf; break;
            case 3: tile_flags = 0xe4; break;
            default:
               return 0;
            }
         } else {
            tile_flags = 0xfe;
         }
         break;
      case 16:
      case 8:
         tile_flags = 0xfe;
         break;
      default:
         return 0;
      }
      break;
   }
d57 1
a57 1
   return tile_flags;
d60 2
a61 2
static INLINE boolean
nvc0_miptree_init_ms_mode(struct nv50_miptree *mt)
d63 7
a69 25
   switch (mt->base.base.nr_samples) {
   case 8:
      mt->ms_mode = NVC0_3D_MULTISAMPLE_MODE_MS8;
      mt->ms_x = 2;
      mt->ms_y = 1;
      break;
   case 4:
      mt->ms_mode = NVC0_3D_MULTISAMPLE_MODE_MS4;
      mt->ms_x = 1;
      mt->ms_y = 1;
      break;
   case 2:
      mt->ms_mode = NVC0_3D_MULTISAMPLE_MODE_MS2;
      mt->ms_x = 1;
      break;
   case 1:
   case 0:
      mt->ms_mode = NVC0_3D_MULTISAMPLE_MODE_MS1;
      break;
   default:
      NOUVEAU_ERR("invalid nr_samples: %u\n", mt->base.base.nr_samples);
      return FALSE;
   }
   return TRUE;
}
d71 2
a72 5
static void
nvc0_miptree_init_layout_video(struct nv50_miptree *mt)
{
   const struct pipe_resource *pt = &mt->base.base;
   const unsigned blocksize = util_format_get_blocksize(pt->format);
d74 1
a74 3
   assert(pt->last_level == 0);
   assert(mt->ms_x == 0 && mt->ms_y == 0);
   assert(!util_format_is_compressed(pt->format));
d76 1
a76 1
   mt->layout_3d = pt->target == PIPE_TEXTURE_3D;
d78 1
a78 3
   mt->level[0].tile_mode = 0x10;
   mt->level[0].pitch = align(pt->width0 * blocksize, 64);
   mt->total_size = align(pt->height0, 16) * mt->level[0].pitch * (mt->layout_3d ? pt->depth0 : 1);
d80 1
a80 4
   if (pt->array_size > 1) {
      mt->layer_stride = align(mt->total_size, NVC0_TILE_SIZE(0x10));
      mt->total_size = mt->layer_stride * pt->array_size;
   }
d84 1
a84 1
nvc0_miptree_init_layout_tiled(struct nv50_miptree *mt)
d86 1
a86 3
   struct pipe_resource *pt = &mt->base.base;
   unsigned w, h, d, l;
   const unsigned blocksize = util_format_get_blocksize(pt->format);
d88 1
a88 1
   mt->layout_3d = pt->target == PIPE_TEXTURE_3D;
d90 2
a91 2
   w = pt->width0 << mt->ms_x;
   h = pt->height0 << mt->ms_y;
d93 7
a99 4
   /* For 3D textures, a mipmap is spanned by all the layers, for array
    * textures and cube maps, each layer contains its own mipmaps.
    */
   d = mt->layout_3d ? pt->depth0 : 1;
d101 2
a102 17
   assert(!mt->ms_mode || !pt->last_level);

   for (l = 0; l <= pt->last_level; ++l) {
      struct nv50_miptree_level *lvl = &mt->level[l];
      unsigned tsx, tsy, tsz;
      unsigned nbx = util_format_get_nblocksx(pt->format, w);
      unsigned nby = util_format_get_nblocksy(pt->format, h);

      lvl->offset = mt->total_size;

      lvl->tile_mode = nvc0_tex_choose_tile_dims(nbx, nby, d);

      tsx = NVC0_TILE_SIZE_X(lvl->tile_mode); /* x is tile row pitch in bytes */
      tsy = NVC0_TILE_SIZE_Y(lvl->tile_mode);
      tsz = NVC0_TILE_SIZE_Z(lvl->tile_mode);

      lvl->pitch = align(nbx * blocksize, tsx);
d104 2
a105 1
      mt->total_size += lvl->pitch * align(nby, tsy) * align(d, tsz);
d107 4
a110 10
      w = u_minify(w, 1);
      h = u_minify(h, 1);
      d = u_minify(d, 1);
   }

   if (pt->array_size > 1) {
      mt->layer_stride = align(mt->total_size,
                               NVC0_TILE_SIZE(mt->level[0].tile_mode));
      mt->total_size = mt->layer_stride * pt->array_size;
   }
d115 5
a119 3
   nv50_miptree_get_handle,         /* get_handle */
   nv50_miptree_destroy,            /* resource_destroy */
   nvc0_miptree_transfer_map,       /* transfer_map */
d130 1
a130 1
   struct nv50_miptree *mt = CALLOC_STRUCT(nv50_miptree);
a131 1
   boolean compressed = dev->drm_version >= 0x01000101;
d133 2
a134 2
   union nouveau_bo_config bo_config;
   uint32_t bo_flags;
d144 1
a144 14
   if (pt->usage == PIPE_USAGE_STAGING) {
      switch (pt->target) {
      case PIPE_TEXTURE_1D:
      case PIPE_TEXTURE_2D:
      case PIPE_TEXTURE_RECT:
         if (pt->last_level == 0 &&
             !util_format_is_depth_or_stencil(pt->format) &&
             pt->nr_samples <= 1)
            pt->flags |= NOUVEAU_RESOURCE_FLAG_LINEAR;
         break;
      default:
         break;
      }
   }
d146 3
a148 1
   bo_config.nvc0.memtype = nvc0_mt_choose_storage_type(mt, compressed);
d150 40
a189 3
   if (!nvc0_miptree_init_ms_mode(mt)) {
      FREE(mt);
      return NULL;
d192 12
a203 11
   if (unlikely(pt->flags & NVC0_RESOURCE_FLAG_VIDEO)) {
      nvc0_miptree_init_layout_video(mt);
   } else
   if (likely(bo_config.nvc0.memtype)) {
      nvc0_miptree_init_layout_tiled(mt);
   } else
   if (!nv50_miptree_init_layout_linear(mt, 128)) {
      FREE(mt);
      return NULL;
   }
   bo_config.nvc0.tile_mode = mt->level[0].tile_mode;
d205 3
a207 4
   if (!bo_config.nvc0.memtype && pt->usage == PIPE_USAGE_STAGING)
      mt->base.domain = NOUVEAU_BO_GART;
   else
      mt->base.domain = NOUVEAU_BO_VRAM;
d209 4
a212 1
   bo_flags = mt->base.domain | NOUVEAU_BO_NOSNOOP;
d214 5
a218 2
   if (mt->base.base.bind & (PIPE_BIND_CURSOR | PIPE_BIND_DISPLAY_TARGET))
      bo_flags |= NOUVEAU_BO_CONTIG;
d220 7
a226 2
   ret = nouveau_bo_new(dev, bo_flags, 4096, mt->total_size, &bo_config,
                        &mt->base.bo);
d231 1
a231 5
   mt->base.address = mt->base.bo->offset;

   NOUVEAU_DRV_STAT(nouveau_screen(pscreen), tex_obj_current_count, 1);
   NOUVEAU_DRV_STAT(nouveau_screen(pscreen), tex_obj_current_bytes,
                    mt->total_size);
d236 4
a239 3
/* Offset of zslice @@z from start of level @@l. */
INLINE unsigned
nvc0_mt_zslice_offset(const struct nv50_miptree *mt, unsigned l, unsigned z)
d241 2
a242 1
   const struct pipe_resource *pt = &mt->base.base;
d244 7
a250 2
   unsigned tds = NVC0_TILE_SHIFT_Z(mt->level[l].tile_mode);
   unsigned ths = NVC0_TILE_SHIFT_Y(mt->level[l].tile_mode);
d252 3
a254 2
   unsigned nby = util_format_get_nblocksy(pt->format,
                                           u_minify(pt->height0, l));
d256 5
a260 2
   /* to next 2D tile slice within a 3D tile */
   unsigned stride_2d = NVC0_TILE_SIZE_2D(mt->level[l].tile_mode);
d262 7
a268 2
   /* to slice in the next (in z direction) 3D tile */
   unsigned stride_3d = (align(nby, (1 << ths)) * mt->level[l].pitch) << tds;
d270 2
a271 1
   return (z & (1 << (tds - 1))) * stride_2d + (z >> tds) * stride_3d;
d274 1
d283 6
a288 1
   struct nv50_surface *ns = nv50_surface_from_miptree(nv50_miptree(pt), templ);
d291 31
a321 2
   ns->base.context = pipe;
   return &ns->base;
@

