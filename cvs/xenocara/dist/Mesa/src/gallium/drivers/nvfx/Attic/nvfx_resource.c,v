head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.09.05.14.00.53;	author jsg;	state dead;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@
#include "pipe/p_context.h"
#include "util/u_staging.h"
#include "nvfx_resource.h"
#include "nouveau/nouveau_screen.h"


static struct pipe_resource *
nvfx_resource_create(struct pipe_screen *screen,
		     const struct pipe_resource *template)
{
	if (template->target == PIPE_BUFFER)
		return nvfx_buffer_create(screen, template);
	else
		return nvfx_miptree_create(screen, template);
}

static void
nvfx_resource_destroy(struct pipe_screen *screen, struct pipe_resource *pr)
{
	if (pr->target == PIPE_BUFFER)
		return nvfx_buffer_destroy(screen, pr);
	else
		return nvfx_miptree_destroy(screen, pr);
}

static struct pipe_resource *
nvfx_resource_from_handle(struct pipe_screen * screen,
			  const struct pipe_resource *template,
			  struct winsys_handle *whandle)
{
	if (template->target == PIPE_BUFFER)
		return NULL;
	else
		return nvfx_miptree_from_handle(screen, template, whandle);
}

static boolean
nvfx_resource_get_handle(struct pipe_screen *pscreen,
                        struct pipe_resource *pr,
                        struct winsys_handle *whandle)
{
	struct nvfx_resource* res = (struct nvfx_resource*)pr;

	if (!res || !res->bo)
		return FALSE;

	return nouveau_screen_bo_get_handle(pscreen, res->bo, nvfx_subresource_pitch(pr, 0), whandle);
}

void
nvfx_init_resource_functions(struct pipe_context *pipe)
{
	pipe->create_surface = nvfx_miptree_surface_new;
	pipe->surface_destroy = nvfx_miptree_surface_del;
}

void
nvfx_screen_init_resource_functions(struct pipe_screen *pscreen)
{
	pscreen->resource_create = nvfx_resource_create;
	pscreen->resource_from_handle = nvfx_resource_from_handle;
	pscreen->resource_get_handle = nvfx_resource_get_handle;
	pscreen->resource_destroy = nvfx_resource_destroy;
	pscreen->user_buffer_create = nvfx_user_buffer_create;
}
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.1
log
@Initial revision
@
text
@a6 7
static unsigned int
nvfx_resource_is_referenced(struct pipe_context *pipe,
			    struct pipe_resource *pr,
			    unsigned level, int layer)
{
	return !!nouveau_reference_flags(nvfx_resource(pr)->bo);
}
a53 2
	pipe->is_resource_referenced = nvfx_resource_is_referenced;

@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@
