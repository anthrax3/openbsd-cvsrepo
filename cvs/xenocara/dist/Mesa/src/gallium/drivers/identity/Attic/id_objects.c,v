head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.30;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2013.09.05.14.00.30;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.07;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#include "util/u_inlines.h"
#include "util/u_memory.h"

#include "id_screen.h"
#include "id_objects.h"
#include "id_context.h"



struct pipe_resource *
identity_resource_create(struct identity_screen *id_screen,
                        struct pipe_resource *resource)
{
   struct identity_resource *id_resource;

   if(!resource)
      goto error;

   assert(resource->screen == id_screen->screen);

   id_resource = CALLOC_STRUCT(identity_resource);
   if(!id_resource)
      goto error;

   memcpy(&id_resource->base, resource, sizeof(struct pipe_resource));

   pipe_reference_init(&id_resource->base.reference, 1);
   id_resource->base.screen = &id_screen->base;
   id_resource->resource = resource;

   return &id_resource->base;

error:
   pipe_resource_reference(&resource, NULL);
   return NULL;
}

void
identity_resource_destroy(struct identity_resource *id_resource)
{
   pipe_resource_reference(&id_resource->resource, NULL);
   FREE(id_resource);
}


struct pipe_surface *
identity_surface_create(struct identity_context *id_context,
                        struct identity_resource *id_resource,
                        struct pipe_surface *surface)
{
   struct identity_surface *id_surface;

   if(!surface)
      goto error;

   assert(surface->texture == id_resource->resource);

   id_surface = CALLOC_STRUCT(identity_surface);
   if(!id_surface)
      goto error;

   memcpy(&id_surface->base, surface, sizeof(struct pipe_surface));

   pipe_reference_init(&id_surface->base.reference, 1);
   id_surface->base.texture = NULL;
   pipe_resource_reference(&id_surface->base.texture, &id_resource->base);
   id_surface->surface = surface;

   return &id_surface->base;

error:
   pipe_surface_reference(&surface, NULL);
   return NULL;
}

void
identity_surface_destroy(struct identity_context *id_context,
                         struct identity_surface *id_surface)
{
   pipe_resource_reference(&id_surface->base.texture, NULL);
   id_context->pipe->surface_destroy(id_context->pipe,
                                     id_surface->surface);
   FREE(id_surface);
}


struct pipe_sampler_view *
identity_sampler_view_create(struct identity_context *id_context,
                             struct identity_resource *id_resource,
                             struct pipe_sampler_view *view)
{
   struct identity_sampler_view *id_view;

   if (!view)
      goto error;

   assert(view->texture == id_resource->resource);

   id_view = CALLOC_STRUCT(identity_sampler_view);

   id_view->base = *view;
   id_view->base.reference.count = 1;
   id_view->base.texture = NULL;
   pipe_resource_reference(&id_view->base.texture, id_resource->resource);
   id_view->base.context = id_context->pipe;
   id_view->sampler_view = view;

   return &id_view->base;
error:
   return NULL;
}

void
identity_sampler_view_destroy(struct identity_context *id_context,
                              struct identity_sampler_view *id_view)
{
   pipe_resource_reference(&id_view->base.texture, NULL);
   id_context->pipe->sampler_view_destroy(id_context->pipe,
                                          id_view->sampler_view);
   FREE(id_view);
}


struct pipe_transfer *
identity_transfer_map(struct identity_context *id_context,
                      struct identity_resource *id_resource,
                      struct pipe_transfer *transfer)
{
   struct identity_transfer *id_transfer;

   if(!transfer)
      goto error;

   assert(transfer->resource == id_resource->resource);

   id_transfer = CALLOC_STRUCT(identity_transfer);
   if(!id_transfer)
      goto error;

   memcpy(&id_transfer->base, transfer, sizeof(struct pipe_transfer));

   id_transfer->base.resource = NULL;
   id_transfer->transfer = transfer;

   pipe_resource_reference(&id_transfer->base.resource, &id_resource->base);
   assert(id_transfer->base.resource == &id_resource->base);

   return &id_transfer->base;

error:
   id_context->pipe->transfer_unmap(id_context->pipe, transfer);
   return NULL;
}

void
identity_transfer_destroy(struct identity_context *id_context,
                          struct identity_transfer *id_transfer)
{
   pipe_resource_reference(&id_transfer->base.resource, NULL);
   FREE(id_transfer);
}

@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d152 3
a154 3
identity_transfer_create(struct identity_context *id_context,
                         struct identity_resource *id_resource,
                         struct pipe_transfer *transfer)
d178 1
a178 1
   id_context->pipe->transfer_destroy(id_context->pipe, transfer);
a186 2
   id_context->pipe->transfer_destroy(id_context->pipe,
                                      id_transfer->transfer);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d33 1
a34 34
struct pipe_buffer *
identity_buffer_create(struct identity_screen *id_screen,
                       struct pipe_buffer *buffer)
{
   struct identity_buffer *id_buffer;

   if(!buffer)
      goto error;

   assert(buffer->screen == id_screen->screen);

   id_buffer = CALLOC_STRUCT(identity_buffer);
   if(!id_buffer)
      goto error;

   memcpy(&id_buffer->base, buffer, sizeof(struct pipe_buffer));

   pipe_reference_init(&id_buffer->base.reference, 1);
   id_buffer->base.screen = &id_screen->base;
   id_buffer->buffer = buffer;

   return &id_buffer->base;

error:
   pipe_buffer_reference(&buffer, NULL);
   return NULL;
}

void
identity_buffer_destroy(struct identity_buffer *id_buffer)
{
   pipe_buffer_reference(&id_buffer->buffer, NULL);
   FREE(id_buffer);
}
d37 3
a39 3
struct pipe_texture *
identity_texture_create(struct identity_screen *id_screen,
                        struct pipe_texture *texture)
d41 1
a41 1
   struct identity_texture *id_texture;
d43 1
a43 1
   if(!texture)
d46 1
a46 1
   assert(texture->screen == id_screen->screen);
d48 2
a49 2
   id_texture = CALLOC_STRUCT(identity_texture);
   if(!id_texture)
d52 1
a52 1
   memcpy(&id_texture->base, texture, sizeof(struct pipe_texture));
d54 3
a56 3
   pipe_reference_init(&id_texture->base.reference, 1);
   id_texture->base.screen = &id_screen->base;
   id_texture->texture = texture;
d58 1
a58 1
   return &id_texture->base;
d61 1
a61 1
   pipe_texture_reference(&texture, NULL);
d66 1
a66 1
identity_texture_destroy(struct identity_texture *id_texture)
d68 2
a69 2
   pipe_texture_reference(&id_texture->texture, NULL);
   FREE(id_texture);
d74 2
a75 1
identity_surface_create(struct identity_texture *id_texture,
d83 1
a83 1
   assert(surface->texture == id_texture->texture);
d93 1
a93 1
   pipe_texture_reference(&id_surface->base.texture, &id_texture->base);
d104 2
a105 1
identity_surface_destroy(struct identity_surface *id_surface)
d107 3
a109 2
   pipe_texture_reference(&id_surface->base.texture, NULL);
   pipe_surface_reference(&id_surface->surface, NULL);
d114 4
a117 3
struct pipe_transfer *
identity_transfer_create(struct identity_texture *id_texture,
                         struct pipe_transfer *transfer)
d119 1
a119 6
   struct identity_transfer *id_transfer;

   if(!transfer)
      goto error;

   assert(transfer->texture == id_texture->texture);
d121 1
a121 2
   id_transfer = CALLOC_STRUCT(identity_transfer);
   if(!id_transfer)
d124 1
a124 1
   memcpy(&id_transfer->base, transfer, sizeof(struct pipe_transfer));
d126 1
a126 4
   id_transfer->base.texture = NULL;
   pipe_texture_reference(&id_transfer->base.texture, &id_texture->base);
   id_transfer->transfer = transfer;
   assert(id_transfer->base.texture == &id_texture->base);
d128 6
a133 1
   return &id_transfer->base;
d135 1
a136 1
   transfer->texture->screen->tex_transfer_destroy(transfer);
d141 2
a142 1
identity_transfer_destroy(struct identity_transfer *id_transfer)
d144 5
a148 2
   struct identity_screen *id_screen = identity_screen(id_transfer->base.texture->screen);
   struct pipe_screen *screen = id_screen->screen;
a149 4
   pipe_texture_reference(&id_transfer->base.texture, NULL);
   screen->tex_transfer_destroy(id_transfer->transfer);
   FREE(id_transfer);
}
d151 4
a154 3
struct pipe_video_surface *
identity_video_surface_create(struct identity_screen *id_screen,
                              struct pipe_video_surface *video_surface)
d156 1
a156 1
   struct identity_video_surface *id_video_surface;
d158 1
a158 1
   if (!video_surface) {
a159 1
   }
d161 1
a161 1
   assert(video_surface->screen == id_screen->screen);
d163 2
a164 2
   id_video_surface = CALLOC_STRUCT(identity_video_surface);
   if (!id_video_surface) {
a165 1
   }
d167 1
a167 3
   memcpy(&id_video_surface->base,
          video_surface,
          sizeof(struct pipe_video_surface));
d169 5
a173 3
   pipe_reference_init(&id_video_surface->base.reference, 1);
   id_video_surface->base.screen = &id_screen->base;
   id_video_surface->video_surface = video_surface;
d175 1
a175 1
   return &id_video_surface->base;
d178 1
a178 1
   pipe_video_surface_reference(&video_surface, NULL);
d183 2
a184 1
identity_video_surface_destroy(struct identity_video_surface *id_video_surface)
d186 4
a189 2
   pipe_video_surface_reference(&id_video_surface->video_surface, NULL);
   FREE(id_video_surface);
d191 1
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a32 1
#include "id_context.h"
d34 34
d70 3
a72 3
struct pipe_resource *
identity_resource_create(struct identity_screen *id_screen,
                        struct pipe_resource *resource)
d74 1
a74 1
   struct identity_resource *id_resource;
d76 1
a76 1
   if(!resource)
d79 1
a79 1
   assert(resource->screen == id_screen->screen);
d81 2
a82 2
   id_resource = CALLOC_STRUCT(identity_resource);
   if(!id_resource)
d85 1
a85 1
   memcpy(&id_resource->base, resource, sizeof(struct pipe_resource));
d87 3
a89 3
   pipe_reference_init(&id_resource->base.reference, 1);
   id_resource->base.screen = &id_screen->base;
   id_resource->resource = resource;
d91 1
a91 1
   return &id_resource->base;
d94 1
a94 1
   pipe_resource_reference(&resource, NULL);
d99 1
a99 1
identity_resource_destroy(struct identity_resource *id_resource)
d101 2
a102 2
   pipe_resource_reference(&id_resource->resource, NULL);
   FREE(id_resource);
d107 1
a107 2
identity_surface_create(struct identity_context *id_context,
                        struct identity_resource *id_resource,
d115 1
a115 1
   assert(surface->texture == id_resource->resource);
d125 1
a125 1
   pipe_resource_reference(&id_surface->base.texture, &id_resource->base);
d136 1
a136 2
identity_surface_destroy(struct identity_context *id_context,
                         struct identity_surface *id_surface)
d138 2
a139 3
   pipe_resource_reference(&id_surface->base.texture, NULL);
   id_context->pipe->surface_destroy(id_context->pipe,
                                     id_surface->surface);
d144 3
a146 4
struct pipe_sampler_view *
identity_sampler_view_create(struct identity_context *id_context,
                             struct identity_resource *id_resource,
                             struct pipe_sampler_view *view)
d148 6
a153 1
   struct identity_sampler_view *id_view;
d155 2
a156 1
   if (!view)
d159 1
a159 1
   assert(view->texture == id_resource->resource);
d161 4
a164 1
   id_view = CALLOC_STRUCT(identity_sampler_view);
d166 1
a166 6
   id_view->base = *view;
   id_view->base.reference.count = 1;
   id_view->base.texture = NULL;
   pipe_resource_reference(&id_view->base.texture, id_resource->resource);
   id_view->base.context = id_context->pipe;
   id_view->sampler_view = view;
a167 1
   return &id_view->base;
d169 1
d174 1
a174 2
identity_sampler_view_destroy(struct identity_context *id_context,
                              struct identity_sampler_view *id_view)
d176 6
a181 4
   pipe_resource_reference(&id_view->base.texture, NULL);
   id_context->pipe->sampler_view_destroy(id_context->pipe,
                                          id_view->sampler_view);
   FREE(id_view);
d184 3
a186 5

struct pipe_transfer *
identity_transfer_create(struct identity_context *id_context,
                         struct identity_resource *id_resource,
                         struct pipe_transfer *transfer)
d188 1
a188 1
   struct identity_transfer *id_transfer;
d190 1
a190 1
   if(!transfer)
d192 1
d194 1
a194 1
   assert(transfer->resource == id_resource->resource);
d196 2
a197 2
   id_transfer = CALLOC_STRUCT(identity_transfer);
   if(!id_transfer)
d199 1
d201 3
a203 1
   memcpy(&id_transfer->base, transfer, sizeof(struct pipe_transfer));
d205 3
a207 5
   id_transfer->base.resource = NULL;
   id_transfer->transfer = transfer;

   pipe_resource_reference(&id_transfer->base.resource, &id_resource->base);
   assert(id_transfer->base.resource == &id_resource->base);
d209 1
a209 1
   return &id_transfer->base;
d212 1
a212 1
   id_context->pipe->transfer_destroy(id_context->pipe, transfer);
d217 1
a217 2
identity_transfer_destroy(struct identity_context *id_context,
                          struct identity_transfer *id_transfer)
d219 2
a220 4
   pipe_resource_reference(&id_transfer->base.resource, NULL);
   id_context->pipe->transfer_destroy(id_context->pipe,
                                      id_transfer->transfer);
   FREE(id_transfer);
a221 1

@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d152 3
a154 3
identity_transfer_map(struct identity_context *id_context,
                      struct identity_resource *id_resource,
                      struct pipe_transfer *transfer)
d178 1
a178 1
   id_context->pipe->transfer_unmap(id_context->pipe, transfer);
d187 2
@


