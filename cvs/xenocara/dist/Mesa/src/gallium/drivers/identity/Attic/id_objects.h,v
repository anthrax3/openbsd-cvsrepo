head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.30;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2013.09.05.14.00.31;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.07;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#ifndef ID_OBJECTS_H
#define ID_OBJECTS_H


#include "pipe/p_compiler.h"
#include "pipe/p_state.h"

#include "id_screen.h"

struct identity_context;


struct identity_resource
{
   struct pipe_resource base;

   struct pipe_resource *resource;
};


struct identity_sampler_view
{
   struct pipe_sampler_view base;

   struct pipe_sampler_view *sampler_view;
};


struct identity_surface
{
   struct pipe_surface base;

   struct pipe_surface *surface;
};


struct identity_transfer
{
   struct pipe_transfer base;

   struct pipe_transfer *transfer;
};


static INLINE struct identity_resource *
identity_resource(struct pipe_resource *_resource)
{
   if(!_resource)
      return NULL;
   (void)identity_screen(_resource->screen);
   return (struct identity_resource *)_resource;
}

static INLINE struct identity_sampler_view *
identity_sampler_view(struct pipe_sampler_view *_sampler_view)
{
   if (!_sampler_view) {
      return NULL;
   }
   return (struct identity_sampler_view *)_sampler_view;
}

static INLINE struct identity_surface *
identity_surface(struct pipe_surface *_surface)
{
   if(!_surface)
      return NULL;
   (void)identity_resource(_surface->texture);
   return (struct identity_surface *)_surface;
}

static INLINE struct identity_transfer *
identity_transfer(struct pipe_transfer *_transfer)
{
   if(!_transfer)
      return NULL;
   (void)identity_resource(_transfer->resource);
   return (struct identity_transfer *)_transfer;
}

static INLINE struct pipe_resource *
identity_resource_unwrap(struct pipe_resource *_resource)
{
   if(!_resource)
      return NULL;
   return identity_resource(_resource)->resource;
}

static INLINE struct pipe_sampler_view *
identity_sampler_view_unwrap(struct pipe_sampler_view *_sampler_view)
{
   if (!_sampler_view) {
      return NULL;
   }
   return identity_sampler_view(_sampler_view)->sampler_view;
}

static INLINE struct pipe_surface *
identity_surface_unwrap(struct pipe_surface *_surface)
{
   if(!_surface)
      return NULL;
   return identity_surface(_surface)->surface;
}

static INLINE struct pipe_transfer *
identity_transfer_unwrap(struct pipe_transfer *_transfer)
{
   if(!_transfer)
      return NULL;
   return identity_transfer(_transfer)->transfer;
}


struct pipe_resource *
identity_resource_create(struct identity_screen *id_screen,
                         struct pipe_resource *resource);

void
identity_resource_destroy(struct identity_resource *id_resource);

struct pipe_surface *
identity_surface_create(struct identity_context *id_context,
                        struct identity_resource *id_resource,
                        struct pipe_surface *surface);

void
identity_surface_destroy(struct identity_context *id_context,
                         struct identity_surface *id_surface);

struct pipe_sampler_view *
identity_sampler_view_create(struct identity_context *id_context,
                             struct identity_resource *id_resource,
                             struct pipe_sampler_view *view);

void
identity_sampler_view_destroy(struct identity_context *id_context,
                              struct identity_sampler_view *id_sampler_view);

struct pipe_transfer *
identity_transfer_map(struct identity_context *id_context,
                         struct identity_resource *id_resource,
                         struct pipe_transfer *transfer);

void
identity_transfer_destroy(struct identity_context *id_context,
                          struct identity_transfer *id_transfer);


#endif /* ID_OBJECTS_H */
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d168 1
a168 1
identity_transfer_create(struct identity_context *id_context,
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a33 1
#include "pipe/p_video_state.h"
d37 1
d39 2
a40 1
struct identity_buffer
d42 1
a42 1
   struct pipe_buffer base;
d44 1
a44 1
   struct pipe_buffer *buffer;
d48 1
a48 1
struct identity_texture
d50 1
a50 1
   struct pipe_texture base;
d52 1
a52 1
   struct pipe_texture *texture;
d72 2
a73 10
struct identity_video_surface
{
   struct pipe_video_surface base;

   struct pipe_video_surface *video_surface;
};


static INLINE struct identity_buffer *
identity_buffer(struct pipe_buffer *_buffer)
d75 1
a75 1
   if(!_buffer)
d77 2
a78 2
   (void)identity_screen(_buffer->screen);
   return (struct identity_buffer *)_buffer;
d81 2
a82 2
static INLINE struct identity_texture *
identity_texture(struct pipe_texture *_texture)
d84 1
a84 1
   if(!_texture)
d86 2
a87 2
   (void)identity_screen(_texture->screen);
   return (struct identity_texture *)_texture;
d95 1
a95 1
   (void)identity_texture(_surface->texture);
d104 1
a104 1
   (void)identity_texture(_transfer->texture);
d108 2
a109 2
static INLINE struct identity_video_surface *
identity_video_surface(struct pipe_video_surface *_video_surface)
d111 1
a111 1
   if (!_video_surface) {
d113 1
a113 3
   }
   (void)identity_screen(_video_surface->screen);
   return (struct identity_video_surface *)_video_surface;
d116 2
a117 2
static INLINE struct pipe_buffer *
identity_buffer_unwrap(struct pipe_buffer *_buffer)
d119 1
a119 1
   if(!_buffer)
d121 2
a122 9
   return identity_buffer(_buffer)->buffer;
}

static INLINE struct pipe_texture *
identity_texture_unwrap(struct pipe_texture *_texture)
{
   if(!_texture)
      return NULL;
   return identity_texture(_texture)->texture;
d142 3
a144 3
struct pipe_buffer *
identity_buffer_create(struct identity_screen *id_screen,
                       struct pipe_buffer *buffer);
d147 1
a147 1
identity_buffer_destroy(struct identity_buffer *id_buffer);
d149 4
a152 3
struct pipe_texture *
identity_texture_create(struct identity_screen *id_screen,
                        struct pipe_texture *texture);
d155 2
a156 1
identity_texture_destroy(struct identity_texture *id_texture);
d158 4
a161 3
struct pipe_surface *
identity_surface_create(struct identity_texture *id_texture,
                        struct pipe_surface *surface);
d164 2
a165 1
identity_surface_destroy(struct identity_surface *id_surface);
d168 2
a169 1
identity_transfer_create(struct identity_texture *id_texture,
d173 2
a174 8
identity_transfer_destroy(struct identity_transfer *id_transfer);

struct pipe_video_surface *
identity_video_surface_create(struct identity_screen *id_screen,
                              struct pipe_video_surface *video_surface);

void
identity_video_surface_destroy(struct identity_video_surface *id_video_surface);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d34 1
a37 1
struct identity_context;
d39 1
a39 2

struct identity_resource
d41 1
a41 1
   struct pipe_resource base;
d43 1
a43 1
   struct pipe_resource *resource;
d47 1
a47 1
struct identity_sampler_view
d49 1
a49 1
   struct pipe_sampler_view base;
d51 1
a51 1
   struct pipe_sampler_view *sampler_view;
d71 10
a80 2
static INLINE struct identity_resource *
identity_resource(struct pipe_resource *_resource)
d82 1
a82 1
   if(!_resource)
d84 2
a85 2
   (void)identity_screen(_resource->screen);
   return (struct identity_resource *)_resource;
d88 2
a89 2
static INLINE struct identity_sampler_view *
identity_sampler_view(struct pipe_sampler_view *_sampler_view)
d91 1
a91 1
   if (!_sampler_view) {
d93 2
a94 2
   }
   return (struct identity_sampler_view *)_sampler_view;
d102 1
a102 1
   (void)identity_resource(_surface->texture);
d111 1
a111 1
   (void)identity_resource(_transfer->resource);
d115 12
a126 2
static INLINE struct pipe_resource *
identity_resource_unwrap(struct pipe_resource *_resource)
d128 1
a128 1
   if(!_resource)
d130 1
a130 1
   return identity_resource(_resource)->resource;
d133 2
a134 2
static INLINE struct pipe_sampler_view *
identity_sampler_view_unwrap(struct pipe_sampler_view *_sampler_view)
d136 1
a136 1
   if (!_sampler_view) {
d138 1
a138 2
   }
   return identity_sampler_view(_sampler_view)->sampler_view;
d158 10
a167 3
struct pipe_resource *
identity_resource_create(struct identity_screen *id_screen,
                         struct pipe_resource *resource);
d170 1
a170 1
identity_resource_destroy(struct identity_resource *id_resource);
d173 1
a173 2
identity_surface_create(struct identity_context *id_context,
                        struct identity_resource *id_resource,
d177 1
a177 2
identity_surface_destroy(struct identity_context *id_context,
                         struct identity_surface *id_surface);
d179 3
a181 4
struct pipe_sampler_view *
identity_sampler_view_create(struct identity_context *id_context,
                             struct identity_resource *id_resource,
                             struct pipe_sampler_view *view);
d184 1
a184 2
identity_sampler_view_destroy(struct identity_context *id_context,
                              struct identity_sampler_view *id_sampler_view);
d186 3
a188 4
struct pipe_transfer *
identity_transfer_create(struct identity_context *id_context,
                         struct identity_resource *id_resource,
                         struct pipe_transfer *transfer);
d191 1
a191 2
identity_transfer_destroy(struct identity_context *id_context,
                          struct identity_transfer *id_transfer);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d168 1
a168 1
identity_transfer_map(struct identity_context *id_context,
@


