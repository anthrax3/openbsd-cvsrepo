head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.30;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.00.31;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.08;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.52;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


#include "pipe/p_screen.h"
#include "pipe/p_state.h"
#include "util/u_memory.h"

#include "id_public.h"
#include "id_screen.h"
#include "id_context.h"
#include "id_objects.h"


static void
identity_screen_destroy(struct pipe_screen *_screen)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;

   screen->destroy(screen);

   FREE(id_screen);
}

static const char *
identity_screen_get_name(struct pipe_screen *_screen)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;

   return screen->get_name(screen);
}

static const char *
identity_screen_get_vendor(struct pipe_screen *_screen)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;

   return screen->get_vendor(screen);
}

static int
identity_screen_get_param(struct pipe_screen *_screen,
                          enum pipe_cap param)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;

   return screen->get_param(screen,
                            param);
}

static int
identity_screen_get_shader_param(struct pipe_screen *_screen,
                          unsigned shader, enum pipe_shader_cap param)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;

   return screen->get_shader_param(screen, shader,
                            param);
}

static float
identity_screen_get_paramf(struct pipe_screen *_screen,
                           enum pipe_capf param)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;

   return screen->get_paramf(screen,
                             param);
}

static boolean
identity_screen_is_format_supported(struct pipe_screen *_screen,
                                    enum pipe_format format,
                                    enum pipe_texture_target target,
                                    unsigned sample_count,
                                    unsigned tex_usage)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;

   return screen->is_format_supported(screen,
                                      format,
                                      target,
                                      sample_count,
                                      tex_usage);
}

static struct pipe_context *
identity_screen_context_create(struct pipe_screen *_screen,
                               void *priv)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_context *result;

   result = screen->context_create(screen, priv);
   if (result)
      return identity_context_create(_screen, result);
   return NULL;
}

static struct pipe_resource *
identity_screen_resource_create(struct pipe_screen *_screen,
                                const struct pipe_resource *templat)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_resource *result;

   result = screen->resource_create(screen,
                                    templat);

   if (result)
      return identity_resource_create(id_screen, result);
   return NULL;
}

static struct pipe_resource *
identity_screen_resource_from_handle(struct pipe_screen *_screen,
                                     const struct pipe_resource *templ,
                                     struct winsys_handle *handle)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_resource *result;

   /* TODO trace call */

   result = screen->resource_from_handle(screen, templ, handle);

   result = identity_resource_create(identity_screen(_screen), result);

   return result;
}

static boolean
identity_screen_resource_get_handle(struct pipe_screen *_screen,
                                    struct pipe_resource *_resource,
                                    struct winsys_handle *handle)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct identity_resource *id_resource = identity_resource(_resource);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_resource *resource = id_resource->resource;

   /* TODO trace call */

   return screen->resource_get_handle(screen, resource, handle);
}



static void
identity_screen_resource_destroy(struct pipe_screen *screen,
                                 struct pipe_resource *_resource)
{
   identity_resource_destroy(identity_resource(_resource));
}


static void
identity_screen_flush_frontbuffer(struct pipe_screen *_screen,
                                  struct pipe_resource *_resource,
                                  unsigned level, unsigned layer,
                                  void *context_private,
                                  struct pipe_box *sub_box)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct identity_resource *id_resource = identity_resource(_resource);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_resource *resource = id_resource->resource;

   screen->flush_frontbuffer(screen,
                             resource,
                             level, layer,
                             context_private, sub_box);
}

static void
identity_screen_fence_reference(struct pipe_screen *_screen,
                                struct pipe_fence_handle **ptr,
                                struct pipe_fence_handle *fence)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;

   screen->fence_reference(screen,
                           ptr,
                           fence);
}

static boolean
identity_screen_fence_signalled(struct pipe_screen *_screen,
                                struct pipe_fence_handle *fence)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;

   return screen->fence_signalled(screen,
                                  fence);
}

static boolean
identity_screen_fence_finish(struct pipe_screen *_screen,
                             struct pipe_fence_handle *fence,
                             uint64_t timeout)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;

   return screen->fence_finish(screen,
                               fence,
                               timeout);
}

static uint64_t
identity_screen_get_timestamp(struct pipe_screen *_screen)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;

   return screen->get_timestamp(screen);
}

struct pipe_screen *
identity_screen_create(struct pipe_screen *screen)
{
   struct identity_screen *id_screen;

   id_screen = CALLOC_STRUCT(identity_screen);
   if (!id_screen) {
      return NULL;
   }

   id_screen->base.destroy = identity_screen_destroy;
   id_screen->base.get_name = identity_screen_get_name;
   id_screen->base.get_vendor = identity_screen_get_vendor;
   id_screen->base.get_param = identity_screen_get_param;
   id_screen->base.get_shader_param = identity_screen_get_shader_param;
   id_screen->base.get_paramf = identity_screen_get_paramf;
   id_screen->base.is_format_supported = identity_screen_is_format_supported;
   id_screen->base.context_create = identity_screen_context_create;
   id_screen->base.resource_create = identity_screen_resource_create;
   id_screen->base.resource_from_handle = identity_screen_resource_from_handle;
   id_screen->base.resource_get_handle = identity_screen_resource_get_handle;
   id_screen->base.resource_destroy = identity_screen_resource_destroy;
   id_screen->base.flush_frontbuffer = identity_screen_flush_frontbuffer;
   id_screen->base.fence_reference = identity_screen_fence_reference;
   id_screen->base.fence_signalled = identity_screen_fence_signalled;
   id_screen->base.fence_finish = identity_screen_fence_finish;
   id_screen->base.get_timestamp = identity_screen_get_timestamp;

   id_screen->screen = screen;

   return &id_screen->base;
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d195 2
a196 1
                                  void *context_private)
d206 1
a206 1
                             context_private);
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d92 1
a92 1
                           enum pipe_cap param)
a190 22
static struct pipe_resource *
identity_screen_user_buffer_create(struct pipe_screen *_screen,
                                   void *ptr,
                                   unsigned bytes,
                                   unsigned usage)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_resource *result;

   result = screen->user_buffer_create(screen,
                                       ptr,
                                       bytes,
                                       usage);

   if (result)
      return identity_resource_create(id_screen, result);
   return NULL;
}



d245 9
a263 2
   id_screen->base.winsys = NULL;

a275 1
   id_screen->base.user_buffer_create = identity_screen_user_buffer_create;
d280 1
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d106 1
a106 2
                                    unsigned tex_usage,
                                    unsigned geom_flags)
d115 1
a115 2
                                      tex_usage,
                                      geom_flags);
d243 1
a243 1
static int
d245 1
a245 2
                                struct pipe_fence_handle *fence,
                                unsigned flags)
d251 1
a251 2
                                  fence,
                                  flags);
d254 1
a254 1
static int
d257 1
a257 1
                             unsigned flags)
d264 1
a264 1
                               flags);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d70 1
a70 1
                          int param)
d79 11
d92 1
a92 1
                           int param)
d105 1
d115 1
d134 3
a136 3
static struct pipe_texture *
identity_screen_texture_create(struct pipe_screen *_screen,
                               const struct pipe_texture *templat)
d140 1
a140 9
   struct pipe_texture *result;

   result = screen->texture_create(screen,
                                   templat);

   if (result)
      return identity_texture_create(id_screen, result);
   return NULL;
}
d142 2
a143 16
static struct pipe_texture *
identity_screen_texture_blanket(struct pipe_screen *_screen,
                                const struct pipe_texture *templat,
                                const unsigned *stride,
                                struct pipe_buffer *_buffer)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct identity_buffer *id_buffer = identity_buffer(_buffer);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_buffer *buffer = id_buffer->buffer;
   struct pipe_texture *result;

   result = screen->texture_blanket(screen,
                                    templat,
                                    stride,
                                    buffer);
d146 1
a146 1
      return identity_texture_create(id_screen, result);
d150 4
a153 13
static void
identity_screen_texture_destroy(struct pipe_texture *_texture)
{
   identity_texture_destroy(identity_texture(_texture));
}

static struct pipe_surface *
identity_screen_get_tex_surface(struct pipe_screen *_screen,
                                struct pipe_texture *_texture,
                                unsigned face,
                                unsigned level,
                                unsigned zslice,
                                unsigned usage)
a155 1
   struct identity_texture *id_texture = identity_texture(_texture);
d157 1
a157 9
   struct pipe_texture *texture = id_texture->texture;
   struct pipe_surface *result;

   result = screen->get_tex_surface(screen,
                                    texture,
                                    face,
                                    level,
                                    zslice,
                                    usage);
d159 1
a159 10
   if (result)
      return identity_surface_create(id_texture, result);
   return NULL;
}

static void
identity_screen_tex_surface_destroy(struct pipe_surface *_surface)
{
   identity_surface_destroy(identity_surface(_surface));
}
d161 1
a161 28
static struct pipe_transfer *
identity_screen_get_tex_transfer(struct pipe_screen *_screen,
                                 struct pipe_texture *_texture,
                                 unsigned face,
                                 unsigned level,
                                 unsigned zslice,
                                 enum pipe_transfer_usage usage,
                                 unsigned x,
                                 unsigned y,
                                 unsigned w,
                                 unsigned h)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct identity_texture *id_texture = identity_texture(_texture);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_texture *texture = id_texture->texture;
   struct pipe_transfer *result;

   result = screen->get_tex_transfer(screen,
                                     texture,
                                     face,
                                     level,
                                     zslice,
                                     usage,
                                     x,
                                     y,
                                     w,
                                     h);
d163 1
a163 4
   if (result)
      return identity_transfer_create(id_texture, result);
   return NULL;
}
d165 1
a165 4
static void
identity_screen_tex_transfer_destroy(struct pipe_transfer *_transfer)
{
   identity_transfer_destroy(identity_transfer(_transfer));
d168 4
a171 3
static void *
identity_screen_transfer_map(struct pipe_screen *_screen,
                             struct pipe_transfer *_transfer)
d174 1
a174 1
   struct identity_transfer *id_transfer = identity_transfer(_transfer);
d176 3
a178 1
   struct pipe_transfer *transfer = id_transfer->transfer;
d180 1
a180 2
   return screen->transfer_map(screen,
                               transfer);
d183 2
d186 2
a187 2
identity_screen_transfer_unmap(struct pipe_screen *_screen,
                               struct pipe_transfer *_transfer)
d189 1
a189 7
   struct identity_screen *id_screen = identity_screen(_screen);
   struct identity_transfer *id_transfer = identity_transfer(_transfer);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_transfer *transfer = id_transfer->transfer;

   screen->transfer_unmap(screen,
                          transfer);
a191 19
static struct pipe_buffer *
identity_screen_buffer_create(struct pipe_screen *_screen,
                              unsigned alignment,
                              unsigned usage,
                              unsigned size)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_buffer *result;

   result = screen->buffer_create(screen,
                                  alignment,
                                  usage,
                                  size);

   if (result)
      return identity_buffer_create(id_screen, result);
   return NULL;
}
d193 1
a193 1
static struct pipe_buffer *
d196 2
a197 1
                                   unsigned bytes)
d201 1
a201 1
   struct pipe_buffer *result;
d205 2
a206 27
                                       bytes);

   if (result)
      return identity_buffer_create(id_screen, result);
   return NULL;
}

static struct pipe_buffer *
identity_screen_surface_buffer_create(struct pipe_screen *_screen,
                                      unsigned width,
                                      unsigned height,
                                      enum pipe_format format,
                                      unsigned usage,
                                      unsigned tex_usage,
                                      unsigned *stride)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_buffer *result;

   result = screen->surface_buffer_create(screen,
                                          width,
                                          height,
                                          format,
                                          usage,
                                          tex_usage,
                                          stride);
d209 1
a209 1
      return identity_buffer_create(id_screen, result);
a212 90
static void *
identity_screen_buffer_map(struct pipe_screen *_screen,
                           struct pipe_buffer *_buffer,
                           unsigned usage)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct identity_buffer *id_buffer = identity_buffer(_buffer);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_buffer *buffer = id_buffer->buffer;

   return screen->buffer_map(screen,
                             buffer,
                             usage);
}

static void *
identity_screen_buffer_map_range(struct pipe_screen *_screen,
                                 struct pipe_buffer *_buffer,
                                 unsigned offset,
                                 unsigned length,
                                 unsigned usage)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct identity_buffer *id_buffer = identity_buffer(_buffer);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_buffer *buffer = id_buffer->buffer;

   return screen->buffer_map_range(screen,
                                   buffer,
                                   offset,
                                   length,
                                   usage);
}

static void
identity_screen_buffer_flush_mapped_range(struct pipe_screen *_screen,
                                          struct pipe_buffer *_buffer,
                                          unsigned offset,
                                          unsigned length)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct identity_buffer *id_buffer = identity_buffer(_buffer);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_buffer *buffer = id_buffer->buffer;

   screen->buffer_flush_mapped_range(screen,
                                     buffer,
                                     offset,
                                     length);
}

static void
identity_screen_buffer_unmap(struct pipe_screen *_screen,
                             struct pipe_buffer *_buffer)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct identity_buffer *id_buffer = identity_buffer(_buffer);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_buffer *buffer = id_buffer->buffer;

   screen->buffer_unmap(screen,
                        buffer);
}

static void
identity_screen_buffer_destroy(struct pipe_buffer *_buffer)
{
   identity_buffer_destroy(identity_buffer(_buffer));
}

static struct pipe_video_surface *
identity_screen_video_surface_create(struct pipe_screen *_screen,
                                     enum pipe_video_chroma_format chroma_format,
                                     unsigned width,
                                     unsigned height)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;
   struct pipe_video_surface *result;

   result = screen->video_surface_create(screen,
                                         chroma_format,
                                         width,
                                         height);

   if (result) {
      return identity_video_surface_create(id_screen, result);
   }
   return NULL;
}
a213 5
static void
identity_screen_video_surface_destroy(struct pipe_video_surface *_vsfc)
{
   identity_video_surface_destroy(identity_video_surface(_vsfc));
}
d217 2
a218 1
                                  struct pipe_surface *_surface,
d222 1
a222 1
   struct identity_surface *id_surface = identity_surface(_surface);
d224 1
a224 1
   struct pipe_surface *surface = id_surface->surface;
d227 2
a228 1
                             surface,
d287 1
d291 4
a294 10
   id_screen->base.texture_create = identity_screen_texture_create;
   id_screen->base.texture_blanket = identity_screen_texture_blanket;
   id_screen->base.texture_destroy = identity_screen_texture_destroy;
   id_screen->base.get_tex_surface = identity_screen_get_tex_surface;
   id_screen->base.tex_surface_destroy = identity_screen_tex_surface_destroy;
   id_screen->base.get_tex_transfer = identity_screen_get_tex_transfer;
   id_screen->base.tex_transfer_destroy = identity_screen_tex_transfer_destroy;
   id_screen->base.transfer_map = identity_screen_transfer_map;
   id_screen->base.transfer_unmap = identity_screen_transfer_unmap;
   id_screen->base.buffer_create = identity_screen_buffer_create;
a295 16
   id_screen->base.surface_buffer_create = identity_screen_surface_buffer_create;
   if (screen->buffer_map)
      id_screen->base.buffer_map = identity_screen_buffer_map;
   if (screen->buffer_map_range)
      id_screen->base.buffer_map_range = identity_screen_buffer_map_range;
   if (screen->buffer_flush_mapped_range)
      id_screen->base.buffer_flush_mapped_range = identity_screen_buffer_flush_mapped_range;
   if (screen->buffer_unmap)
      id_screen->base.buffer_unmap = identity_screen_buffer_unmap;
   id_screen->base.buffer_destroy = identity_screen_buffer_destroy;
   if (screen->video_surface_create) {
      id_screen->base.video_surface_create = identity_screen_video_surface_create;
   }
   if (screen->video_surface_destroy) {
      id_screen->base.video_surface_destroy = identity_screen_video_surface_destroy;
   }
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d70 1
a70 1
                          enum pipe_cap param)
a78 11
static int
identity_screen_get_shader_param(struct pipe_screen *_screen,
                          unsigned shader, enum pipe_shader_cap param)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;

   return screen->get_shader_param(screen, shader,
                            param);
}

d81 1
a81 1
                           enum pipe_cap param)
a93 1
                                    unsigned sample_count,
a102 1
                                      sample_count,
d121 3
a123 3
static struct pipe_resource *
identity_screen_resource_create(struct pipe_screen *_screen,
                                const struct pipe_resource *templat)
d127 9
a135 1
   struct pipe_resource *result;
d137 16
a152 2
   result = screen->resource_create(screen,
                                    templat);
d155 1
a155 1
      return identity_resource_create(id_screen, result);
d159 13
a171 4
static struct pipe_resource *
identity_screen_resource_from_handle(struct pipe_screen *_screen,
                                     const struct pipe_resource *templ,
                                     struct winsys_handle *handle)
d174 1
d176 9
a184 1
   struct pipe_resource *result;
d186 10
a195 1
   /* TODO trace call */
d197 28
a224 1
   result = screen->resource_from_handle(screen, templ, handle);
d226 4
a229 1
   result = identity_resource_create(identity_screen(_screen), result);
d231 4
a234 1
   return result;
d237 3
a239 4
static boolean
identity_screen_resource_get_handle(struct pipe_screen *_screen,
                                    struct pipe_resource *_resource,
                                    struct winsys_handle *handle)
d242 1
a242 1
   struct identity_resource *id_resource = identity_resource(_resource);
d244 5
a248 1
   struct pipe_resource *resource = id_resource->resource;
d250 8
a257 1
   /* TODO trace call */
d259 2
a260 1
   return screen->resource_get_handle(screen, resource, handle);
d263 9
d273 4
d278 3
a280 5
static void
identity_screen_resource_destroy(struct pipe_screen *screen,
                                 struct pipe_resource *_resource)
{
   identity_resource_destroy(identity_resource(_resource));
d283 1
a283 2

static struct pipe_resource *
d286 1
a286 2
                                   unsigned bytes,
                                   unsigned usage)
d290 1
a290 1
   struct pipe_resource *result;
d294 27
a320 2
                                       bytes,
                                       usage);
d323 1
a323 1
      return identity_resource_create(id_screen, result);
d327 90
d418 5
d426 1
a426 2
                                  struct pipe_resource *_resource,
                                  unsigned level, unsigned layer,
d430 1
a430 1
   struct identity_resource *id_resource = identity_resource(_resource);
d432 1
a432 1
   struct pipe_resource *resource = id_resource->resource;
d435 1
a435 2
                             resource,
                             level, layer,
a493 1
   id_screen->base.get_shader_param = identity_screen_get_shader_param;
d497 10
a506 4
   id_screen->base.resource_create = identity_screen_resource_create;
   id_screen->base.resource_from_handle = identity_screen_resource_from_handle;
   id_screen->base.resource_get_handle = identity_screen_resource_get_handle;
   id_screen->base.resource_destroy = identity_screen_resource_destroy;
d508 16
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d92 1
a92 1
                           enum pipe_capf param)
d106 2
a107 1
                                    unsigned tex_usage)
d116 2
a117 1
                                      tex_usage);
d193 22
d245 1
a245 1
static boolean
d247 2
a248 1
                                struct pipe_fence_handle *fence)
d254 2
a255 1
                                  fence);
d258 1
a258 1
static boolean
d261 1
a261 1
                             uint64_t timeout)
d268 1
a268 10
                               timeout);
}

static uint64_t
identity_screen_get_timestamp(struct pipe_screen *_screen)
{
   struct identity_screen *id_screen = identity_screen(_screen);
   struct pipe_screen *screen = id_screen->screen;

   return screen->get_timestamp(screen);
d281 2
d295 1
a299 1
   id_screen->base.get_timestamp = identity_screen_get_timestamp;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d195 1
a195 2
                                  void *context_private,
                                  struct pipe_box *sub_box)
d205 1
a205 1
                             context_private, sub_box);
@


