head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.07.09.21.08.54;	author jsg;	state dead;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.01.01;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.12.23;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@/*
 * Copyright 2010 Marek Olšák <maraeo@@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHOR(S) AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include "r600_pipe.h"
#include "evergreen_compute.h"

static struct pipe_resource *r600_resource_create(struct pipe_screen *screen,
						const struct pipe_resource *templ)
{
	if (templ->target == PIPE_BUFFER) {
		if (templ->bind & PIPE_BIND_GLOBAL) {
		    return r600_compute_global_buffer_create(screen, templ);
		}
		else {
		    return r600_buffer_create(screen, templ, 4096);
		}
	} else {
		return r600_texture_create(screen, templ);
	}
}

static struct pipe_resource *r600_resource_from_handle(struct pipe_screen * screen,
							const struct pipe_resource *templ,
							struct winsys_handle *whandle)
{
	if (templ->target == PIPE_BUFFER) {
		return NULL;
	} else {
		return r600_texture_from_handle(screen, templ, whandle);
	}
}

void r600_resource_destroy(struct pipe_screen *screen, struct pipe_resource *res)
{
	if (res->target == PIPE_BUFFER && (res->bind & PIPE_BIND_GLOBAL)) {
		r600_compute_global_buffer_destroy(screen, res);
	} else {
		u_resource_destroy_vtbl(screen, res);
	}
}

void r600_init_screen_resource_functions(struct pipe_screen *screen)
{
	screen->resource_create = r600_resource_create;
	screen->resource_from_handle = r600_resource_from_handle;
	screen->resource_get_handle = u_resource_get_handle_vtbl;
	screen->resource_destroy = r600_resource_destroy;
}

void r600_init_context_resource_functions(struct r600_context *r600)
{
	r600->context.transfer_map = u_transfer_map_vtbl;
	r600->context.transfer_flush_region = u_default_transfer_flush_region;
	r600->context.transfer_unmap = u_transfer_unmap_vtbl;
	r600->context.transfer_inline_write = u_default_transfer_inline_write;
}
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d25 1
d31 6
a36 1
		return r600_buffer_create(screen, templ);
d53 9
d67 1
a67 2
	screen->resource_destroy = u_resource_destroy_vtbl;
	screen->user_buffer_create = r600_user_buffer_create;
d70 1
a70 1
void r600_init_context_resource_functions(struct r600_pipe_context *r600)
a71 1
	r600->context.get_transfer = u_get_transfer_vtbl;
d73 1
a73 1
	r600->context.transfer_flush_region = u_transfer_flush_region_vtbl;
d75 1
a75 2
	r600->context.transfer_destroy = u_transfer_destroy_vtbl;
	r600->context.transfer_inline_write = u_transfer_inline_write_vtbl;
@


1.1
log
@Initial revision
@
text
@a63 1
	r600->context.is_resource_referenced = u_is_resource_referenced_vtbl;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a24 1
#include "evergreen_compute.h"
d30 1
a30 6
		if (templ->bind & PIPE_BIND_GLOBAL) {
		    return r600_compute_global_buffer_create(screen, templ);
		}
		else {
		    return r600_buffer_create(screen, templ, 4096);
		}
a46 9
void r600_resource_destroy(struct pipe_screen *screen, struct pipe_resource *res)
{
	if (res->target == PIPE_BUFFER && (res->bind & PIPE_BIND_GLOBAL)) {
		r600_compute_global_buffer_destroy(screen, res);
	} else {
		u_resource_destroy_vtbl(screen, res);
	}
}

d52 2
a53 1
	screen->resource_destroy = r600_resource_destroy;
d56 1
a56 1
void r600_init_context_resource_functions(struct r600_context *r600)
d58 1
d60 1
a60 1
	r600->context.transfer_flush_region = u_default_transfer_flush_region;
d62 3
a64 1
	r600->context.transfer_inline_write = u_default_transfer_inline_write;
@

