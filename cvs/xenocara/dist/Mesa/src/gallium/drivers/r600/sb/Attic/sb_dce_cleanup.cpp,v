head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.33;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.12.32;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.12.32;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.12;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright 2013 Vadim Girlin <vadimgirlin@@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHOR(S) AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *      Vadim Girlin
 */

#include "sb_shader.h"

#include "sb_pass.h"

namespace r600_sb {

bool dce_cleanup::visit(node& n, bool enter) {
	if (enter) {
	} else {
		if (n.flags & NF_DEAD)
			n.remove();
		else
			cleanup_dst(n);
	}
	return true;
}

bool dce_cleanup::visit(alu_group_node& n, bool enter) {
	if (enter) {
	} else {
		n.expand();
	}
	return true;
}

bool dce_cleanup::visit(cf_node& n, bool enter) {
	if (enter) {
		if (n.flags & NF_DEAD)
			n.remove();
		else
			cleanup_dst(n);
	} else {
		if (n.bc.op_ptr->flags & (CF_CLAUSE | CF_BRANCH | CF_LOOP))
			n.expand();
	}
	return true;
}

bool dce_cleanup::visit(alu_node& n, bool enter) {
	if (enter) {
	} else {
		if (n.flags & NF_DEAD)
			n.remove();
		else
			cleanup_dst(n);
	}
	return true;
}

bool dce_cleanup::visit(alu_packed_node& n, bool enter) {
	if (enter) {
	} else {
		if (n.flags & NF_DEAD)
			n.remove();
		else
			cleanup_dst(n);
	}
	return false;
}

bool dce_cleanup::visit(fetch_node& n, bool enter) {
	if (enter) {
	} else {
		if (n.flags & NF_DEAD)
			n.remove();
		else
			cleanup_dst(n);
	}
	return true;
}

bool dce_cleanup::visit(region_node& n, bool enter) {
	if (enter) {
		if (n.loop_phi)
			run_on(*n.loop_phi);
	} else {
		if (n.phi)
			run_on(*n.phi);
	}
	return true;
}

void dce_cleanup::cleanup_dst(node& n) {
	cleanup_dst_vec(n.dst);
}

bool dce_cleanup::visit(container_node& n, bool enter) {
	if (enter) {
		cleanup_dst(n);
	} else {

	}
	return true;
}

void dce_cleanup::cleanup_dst_vec(vvec& vv) {
	for (vvec::iterator I = vv.begin(), E = vv.end(); I != E; ++I) {
		value* &v = *I;
		if (!v)
			continue;

		if (v->gvn_source && v->gvn_source->is_dead())
			v->gvn_source = NULL;

		if (v->is_dead())
			v = NULL;
	}
}

} // namespace r600_sb
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d59 1
a59 2
		if ((sh.dce_flags & DF_EXPAND) &&
				(n.bc.op_ptr->flags & (CF_CLAUSE | CF_BRANCH | CF_LOOP)))
d110 1
a110 3
	if (!cleanup_dst_vec(n.dst) && remove_unused &&
			!n.dst.empty() && !(n.flags & NF_DONT_KILL) && n.parent)
		n.remove();
d114 1
a114 1
	if (enter)
d116 3
d122 1
a122 3
bool dce_cleanup::cleanup_dst_vec(vvec& vv) {
	bool alive = false;

d131 1
a131 1
		if (v->is_dead() || (remove_unused && !v->is_rel() && !v->uses))
a132 2
		else
			alive = true;
a133 2

	return alive;
@

