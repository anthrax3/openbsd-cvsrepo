head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.07.09.21.08.53;	author jsg;	state dead;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.00.39;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.33;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.11.35;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@#ifndef __NV30_CONTEXT_H__
#define __NV30_CONTEXT_H__

#include "pipe/p_format.h"
#include "util/u_blitter.h"

#include "nv30_screen.h"
#include "nv30_state.h"

#include "nouveau/nouveau_context.h"

#define BUFCTX_FB          0
#define BUFCTX_VTXTMP      1
#define BUFCTX_VTXBUF      2
#define BUFCTX_IDXBUF      3
#define BUFCTX_VERTTEX(n) (4 + (n))
#define BUFCTX_FRAGPROG    8
#define BUFCTX_FRAGTEX(n) (9 + (n))

#define NV30_NEW_BLEND        (1 << 0)
#define NV30_NEW_RASTERIZER   (1 << 1)
#define NV30_NEW_ZSA          (1 << 2)
#define NV30_NEW_VERTPROG     (1 << 3)
#define NV30_NEW_VERTCONST    (1 << 4)
#define NV30_NEW_FRAGPROG     (1 << 5)
#define NV30_NEW_FRAGCONST    (1 << 6)
#define NV30_NEW_BLEND_COLOUR (1 << 7)
#define NV30_NEW_STENCIL_REF  (1 << 8)
#define NV30_NEW_CLIP         (1 << 9)
#define NV30_NEW_SAMPLE_MASK  (1 << 10)
#define NV30_NEW_FRAMEBUFFER  (1 << 11)
#define NV30_NEW_STIPPLE      (1 << 12)
#define NV30_NEW_SCISSOR      (1 << 13)
#define NV30_NEW_VIEWPORT     (1 << 14)
#define NV30_NEW_ARRAYS       (1 << 15)
#define NV30_NEW_VERTEX       (1 << 16)
#define NV30_NEW_CONSTBUF     (1 << 17)
#define NV30_NEW_FRAGTEX      (1 << 18)
#define NV30_NEW_VERTTEX      (1 << 19)
#define NV30_NEW_SWTNL        (1 << 31)
#define NV30_NEW_ALL          0x000fffff

struct nv30_context {
   struct nouveau_context base;
   struct nv30_screen *screen;
   struct blitter_context *blitter;

   struct nouveau_bufctx *bufctx;

   struct {
      unsigned rt_enable;
      unsigned scissor_off;
      unsigned num_vtxelts;
      boolean  prim_restart;
      struct nv30_fragprog *fragprog;
   } state;

   uint32_t dirty;

   struct draw_context *draw;
   uint32_t draw_flags;
   uint32_t draw_dirty;

   struct nv30_blend_stateobj *blend;
   struct nv30_rasterizer_stateobj *rast;
   struct nv30_zsa_stateobj *zsa;
   struct nv30_vertex_stateobj *vertex;

   struct {
      unsigned filter;
      unsigned aniso;
   } config;

   struct {
      struct nv30_vertprog *program;

      struct pipe_resource *constbuf;
      unsigned constbuf_nr;

      struct pipe_sampler_view *textures[PIPE_MAX_SAMPLERS];
      unsigned num_textures;
      struct nv30_sampler_state *samplers[PIPE_MAX_SAMPLERS];
      unsigned num_samplers;
      unsigned dirty_samplers;
   } vertprog;

   struct {
      struct nv30_fragprog *program;

      struct pipe_resource *constbuf;
      unsigned constbuf_nr;

      struct pipe_sampler_view *textures[PIPE_MAX_SAMPLERS];
      unsigned num_textures;
      struct nv30_sampler_state *samplers[PIPE_MAX_SAMPLERS];
      unsigned num_samplers;
      unsigned dirty_samplers;
   } fragprog;

   struct pipe_framebuffer_state framebuffer;
   struct pipe_blend_color blend_colour;
   struct pipe_stencil_ref stencil_ref;
   struct pipe_poly_stipple stipple;
   struct pipe_scissor_state scissor;
   struct pipe_viewport_state viewport;
   struct pipe_clip_state clip;

   unsigned sample_mask;

   struct pipe_vertex_buffer vtxbuf[PIPE_MAX_ATTRIBS];
   unsigned num_vtxbufs;
   struct pipe_index_buffer idxbuf;
   uint32_t vbo_fifo;
   uint32_t vbo_user;
   unsigned vbo_min_index;
   unsigned vbo_max_index;
   boolean  vbo_push_hint;

   struct nouveau_heap  *blit_vp;
   struct pipe_resource *blit_fp;

   /*XXX: nvfx state, DO NOT USE EVER OUTSIDE "STOLEN" NVFX code */
   unsigned is_nv4x;
   unsigned use_nv4x;
   bool hw_pointsprite_control;
   enum {
      HW,
   } render_mode;

   struct pipe_query *render_cond_query;
   unsigned render_cond_mode;
   boolean render_cond_cond;
};

static INLINE struct nv30_context *
nv30_context(struct pipe_context *pipe)
{
   return (struct nv30_context *)pipe;
}

struct pipe_context *
nv30_context_create(struct pipe_screen *pscreen, void *priv);

void
nv30_vbo_init(struct pipe_context *pipe);

void
nv30_vbo_validate(struct nv30_context *nv30);

void
nv30_query_init(struct pipe_context *pipe);

void
nv30_state_init(struct pipe_context *pipe);

void
nv30_clear_init(struct pipe_context *pipe);

void
nv30_vertprog_init(struct pipe_context *pipe);

void
nv30_vertprog_validate(struct nv30_context *nv30);

void
nv30_fragprog_init(struct pipe_context *pipe);

void
nv30_fragprog_validate(struct nv30_context *nv30);

void
nv30_texture_init(struct pipe_context *pipe);

void
nv30_texture_validate(struct nv30_context *nv30);

void
nv30_fragtex_init(struct pipe_context *pipe);

void
nv30_fragtex_validate(struct nv30_context *nv30);

void
nv40_verttex_init(struct pipe_context *pipe);

void
nv40_verttex_validate(struct nv30_context *nv30);

void
nv30_push_vbo(struct nv30_context *nv30, const struct pipe_draw_info *info);

void
nv30_draw_init(struct pipe_context *pipe);

void
nv30_render_vbo(struct pipe_context *pipe, const struct pipe_draw_info *info);

boolean
nv30_state_validate(struct nv30_context *nv30, boolean hwtnl);

void
nv30_state_release(struct nv30_context *nv30);

//XXX: needed to make it build, clean this up!
void
_nvfx_fragprog_translate(struct nv30_context *nvfx, struct nv30_fragprog *fp,
         boolean emulate_sprite_flipping);

boolean
_nvfx_vertprog_translate(struct nv30_context *nv30, struct nv30_vertprog *vp);

#ifdef NV30_3D_VERTEX_BEGIN_END
#define NV30_PRIM_GL_CASE(n) \
   case PIPE_PRIM_##n: return NV30_3D_VERTEX_BEGIN_END_##n

static INLINE unsigned
nv30_prim_gl(unsigned prim)
{
   switch (prim) {
   NV30_PRIM_GL_CASE(POINTS);
   NV30_PRIM_GL_CASE(LINES);
   NV30_PRIM_GL_CASE(LINE_LOOP);
   NV30_PRIM_GL_CASE(LINE_STRIP);
   NV30_PRIM_GL_CASE(TRIANGLES);
   NV30_PRIM_GL_CASE(TRIANGLE_STRIP);
   NV30_PRIM_GL_CASE(TRIANGLE_FAN);
   NV30_PRIM_GL_CASE(QUADS);
   NV30_PRIM_GL_CASE(QUAD_STRIP);
   NV30_PRIM_GL_CASE(POLYGON);
   default:
      return NV30_3D_VERTEX_BEGIN_END_POINTS;
      break;
   }
}
#endif

#endif
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d4 2
a5 1
#include <stdio.h>
d7 148
a154 4
#include "pipe/p_context.h"
#include "pipe/p_defines.h"
#include "pipe/p_state.h"
#include "pipe/p_compiler.h"
d156 2
a157 3
#include "util/u_memory.h"
#include "util/u_math.h"
#include "util/u_inlines.h"
d159 2
a160 1
#include "draw/draw_vertex.h"
d162 2
a163 4
#include "nouveau/nouveau_winsys.h"
#include "nouveau/nouveau_gldefs.h"
#include "nouveau/nouveau_context.h"
#include "nouveau/nouveau_stateobj.h"
d165 2
a166 1
#include "nv30_state.h"
d168 2
a169 43
#define NOUVEAU_ERR(fmt, args...) \
	fprintf(stderr, "%s:%d -  "fmt, __func__, __LINE__, ##args);
#define NOUVEAU_MSG(fmt, args...) \
	fprintf(stderr, "nouveau: "fmt, ##args);

enum nv30_state_index {
	NV30_STATE_FB = 0,
	NV30_STATE_VIEWPORT = 1,
	NV30_STATE_BLEND = 2,
	NV30_STATE_RAST = 3,
	NV30_STATE_ZSA = 4,
	NV30_STATE_BCOL = 5,
	NV30_STATE_CLIP = 6,
	NV30_STATE_SCISSOR = 7,
	NV30_STATE_STIPPLE = 8,
	NV30_STATE_FRAGPROG = 9,
	NV30_STATE_VERTPROG = 10,
	NV30_STATE_FRAGTEX0 = 11,
	NV30_STATE_FRAGTEX1 = 12,
	NV30_STATE_FRAGTEX2 = 13,
	NV30_STATE_FRAGTEX3 = 14,
	NV30_STATE_FRAGTEX4 = 15,
	NV30_STATE_FRAGTEX5 = 16,
	NV30_STATE_FRAGTEX6 = 17,
	NV30_STATE_FRAGTEX7 = 18,
	NV30_STATE_FRAGTEX8 = 19,
	NV30_STATE_FRAGTEX9 = 20,
	NV30_STATE_FRAGTEX10 = 21,
	NV30_STATE_FRAGTEX11 = 22,
	NV30_STATE_FRAGTEX12 = 23,
	NV30_STATE_FRAGTEX13 = 24,
	NV30_STATE_FRAGTEX14 = 25,
	NV30_STATE_FRAGTEX15 = 26,
	NV30_STATE_VERTTEX0 = 27,
	NV30_STATE_VERTTEX1 = 28,
	NV30_STATE_VERTTEX2 = 29,
	NV30_STATE_VERTTEX3 = 30,
	NV30_STATE_VTXBUF = 31,
	NV30_STATE_VTXFMT = 32,
	NV30_STATE_VTXATTR = 33,
	NV30_STATE_SR = 34,
	NV30_STATE_MAX = 35
};
d171 2
a172 1
#include "nv30_screen.h"
d174 2
a175 19
#define NV30_NEW_BLEND		(1 <<  0)
#define NV30_NEW_RAST		(1 <<  1)
#define NV30_NEW_ZSA		(1 <<  2)
#define NV30_NEW_SAMPLER	(1 <<  3)
#define NV30_NEW_FB		(1 <<  4)
#define NV30_NEW_STIPPLE	(1 <<  5)
#define NV30_NEW_SCISSOR	(1 <<  6)
#define NV30_NEW_VIEWPORT	(1 <<  7)
#define NV30_NEW_BCOL		(1 <<  8)
#define NV30_NEW_VERTPROG	(1 <<  9)
#define NV30_NEW_FRAGPROG	(1 << 10)
#define NV30_NEW_ARRAYS		(1 << 11)
#define NV30_NEW_UCP		(1 << 12)
#define NV30_NEW_SR		(1 << 13)

struct nv30_rasterizer_state {
	struct pipe_rasterizer_state pipe;
	struct nouveau_stateobj *so;
};
d177 2
a178 4
struct nv30_zsa_state {
	struct pipe_depth_stencil_alpha_state pipe;
	struct nouveau_stateobj *so;
};
d180 2
a181 4
struct nv30_blend_state {
	struct pipe_blend_state pipe;
	struct nouveau_stateobj *so;
};
d183 2
d186 2
a187 4
struct nv30_state {
	unsigned scissor_enabled;
	unsigned stipple_enabled;
	unsigned fp_samplers;
d189 2
a190 3
	uint64_t dirty;
	struct nouveau_stateobj *hw[NV30_STATE_MAX];
};
d192 2
a193 2
struct nv30_context {
	struct pipe_context pipe;
d195 2
a196 2
	struct nouveau_winsys *nvws;
	struct nv30_screen *screen;
d198 2
a199 1
	struct draw_context *draw;
d201 2
a202 30
	/* HW state derived from pipe states */
	struct nv30_state state;

	/* Context state */
	unsigned dirty;
	struct pipe_scissor_state scissor;
	unsigned stipple[32];
	struct nv30_vertex_program *vertprog;
	struct nv30_fragment_program *fragprog;
	struct pipe_buffer *constbuf[PIPE_SHADER_TYPES];
	unsigned constbuf_nr[PIPE_SHADER_TYPES];
	struct nv30_rasterizer_state *rasterizer;
	struct nv30_zsa_state *zsa;
	struct nv30_blend_state *blend;
	struct pipe_blend_color blend_colour;
	struct pipe_stencil_ref stencil_ref;
	struct pipe_viewport_state viewport;
	struct pipe_framebuffer_state framebuffer;
	struct pipe_buffer *idxbuf;
	unsigned idxbuf_format;
	struct nv30_sampler_state *tex_sampler[PIPE_MAX_SAMPLERS];
	struct nv30_miptree *tex_miptree[PIPE_MAX_SAMPLERS];
	unsigned nr_samplers;
	unsigned nr_textures;
	unsigned dirty_samplers;
	struct pipe_vertex_buffer vtxbuf[PIPE_MAX_ATTRIBS];
	unsigned vtxbuf_nr;
	struct pipe_vertex_element vtxelt[PIPE_MAX_ATTRIBS];
	unsigned vtxelt_nr;
};
d204 4
a207 5
static INLINE struct nv30_context *
nv30_context(struct pipe_context *pipe)
{
	return (struct nv30_context *)pipe;
}
d209 2
a210 7
struct nv30_state_entry {
	boolean (*validate)(struct nv30_context *nv30);
	struct {
		unsigned pipe;
		unsigned hw;
	} dirty;
};
d212 3
a214 50
extern void nv30_init_state_functions(struct nv30_context *nv30);
extern void nv30_init_surface_functions(struct nv30_context *nv30);
extern void nv30_init_query_functions(struct nv30_context *nv30);

extern void nv30_screen_init_miptree_functions(struct pipe_screen *pscreen);

/* nv30_draw.c */
extern struct draw_stage *nv30_draw_render_stage(struct nv30_context *nv30);

/* nv30_vertprog.c */
extern void nv30_vertprog_destroy(struct nv30_context *,
				  struct nv30_vertex_program *);

/* nv30_fragprog.c */
extern void nv30_fragprog_destroy(struct nv30_context *,
				  struct nv30_fragment_program *);

/* nv30_fragtex.c */
extern void nv30_fragtex_bind(struct nv30_context *);

/* nv30_state.c and friends */
extern boolean nv30_state_validate(struct nv30_context *nv30);
extern void nv30_state_emit(struct nv30_context *nv30);
extern void nv30_state_flush_notify(struct nouveau_channel *chan);
extern struct nv30_state_entry nv30_state_rasterizer;
extern struct nv30_state_entry nv30_state_scissor;
extern struct nv30_state_entry nv30_state_stipple;
extern struct nv30_state_entry nv30_state_fragprog;
extern struct nv30_state_entry nv30_state_vertprog;
extern struct nv30_state_entry nv30_state_blend;
extern struct nv30_state_entry nv30_state_blend_colour;
extern struct nv30_state_entry nv30_state_zsa;
extern struct nv30_state_entry nv30_state_viewport;
extern struct nv30_state_entry nv30_state_framebuffer;
extern struct nv30_state_entry nv30_state_fragtex;
extern struct nv30_state_entry nv30_state_vbo;
extern struct nv30_state_entry nv30_state_sr;

/* nv30_vbo.c */
extern void nv30_draw_arrays(struct pipe_context *, unsigned mode,
				unsigned start, unsigned count);
extern void nv30_draw_elements(struct pipe_context *pipe,
				  struct pipe_buffer *indexBuffer,
				  unsigned indexSize,
				  unsigned mode, unsigned start,
				  unsigned count);

/* nv30_clear.c */
extern void nv30_clear(struct pipe_context *pipe, unsigned buffers,
		       const float *rgba, double depth, unsigned stencil);
d216 20
a235 3
/* nv30_context.c */
struct pipe_context *
nv30_create(struct pipe_screen *pscreen, void *priv);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@d4 1
a4 2
#include "pipe/p_format.h"
#include "util/u_blitter.h"
d6 10
a15 2
#include "nv30_screen.h"
#include "nv30_state.h"
d17 2
d20 1
d22 1
a22 30
#define BUFCTX_FB          0
#define BUFCTX_VTXTMP      1
#define BUFCTX_VTXBUF      2
#define BUFCTX_IDXBUF      3
#define BUFCTX_VERTTEX(n) (4 + (n))
#define BUFCTX_FRAGPROG    8
#define BUFCTX_FRAGTEX(n) (9 + (n))

#define NV30_NEW_BLEND        (1 << 0)
#define NV30_NEW_RASTERIZER   (1 << 1)
#define NV30_NEW_ZSA          (1 << 2)
#define NV30_NEW_VERTPROG     (1 << 3)
#define NV30_NEW_VERTCONST    (1 << 4)
#define NV30_NEW_FRAGPROG     (1 << 5)
#define NV30_NEW_FRAGCONST    (1 << 6)
#define NV30_NEW_BLEND_COLOUR (1 << 7)
#define NV30_NEW_STENCIL_REF  (1 << 8)
#define NV30_NEW_CLIP         (1 << 9)
#define NV30_NEW_SAMPLE_MASK  (1 << 10)
#define NV30_NEW_FRAMEBUFFER  (1 << 11)
#define NV30_NEW_STIPPLE      (1 << 12)
#define NV30_NEW_SCISSOR      (1 << 13)
#define NV30_NEW_VIEWPORT     (1 << 14)
#define NV30_NEW_ARRAYS       (1 << 15)
#define NV30_NEW_VERTEX       (1 << 16)
#define NV30_NEW_CONSTBUF     (1 << 17)
#define NV30_NEW_FRAGTEX      (1 << 18)
#define NV30_NEW_VERTTEX      (1 << 19)
#define NV30_NEW_SWTNL        (1 << 31)
#define NV30_NEW_ALL          0x000fffff
d24 42
a65 90
struct nv30_context {
   struct nouveau_context base;
   struct nv30_screen *screen;
   struct blitter_context *blitter;

   struct nouveau_bufctx *bufctx;

   struct {
      unsigned rt_enable;
      unsigned scissor_off;
      unsigned num_vtxelts;
      boolean  prim_restart;
      struct nv30_fragprog *fragprog;
   } state;

   uint32_t dirty;

   struct draw_context *draw;
   uint32_t draw_flags;
   uint32_t draw_dirty;

   struct nv30_blend_stateobj *blend;
   struct nv30_rasterizer_stateobj *rast;
   struct nv30_zsa_stateobj *zsa;
   struct nv30_vertex_stateobj *vertex;

   struct {
      unsigned filter;
      unsigned aniso;
   } config;

   struct {
      struct nv30_vertprog *program;

      struct pipe_resource *constbuf;
      unsigned constbuf_nr;

      struct pipe_sampler_view *textures[PIPE_MAX_SAMPLERS];
      unsigned num_textures;
      struct nv30_sampler_state *samplers[PIPE_MAX_SAMPLERS];
      unsigned num_samplers;
      unsigned dirty_samplers;
   } vertprog;

   struct {
      struct nv30_fragprog *program;

      struct pipe_resource *constbuf;
      unsigned constbuf_nr;

      struct pipe_sampler_view *textures[PIPE_MAX_SAMPLERS];
      unsigned num_textures;
      struct nv30_sampler_state *samplers[PIPE_MAX_SAMPLERS];
      unsigned num_samplers;
      unsigned dirty_samplers;
   } fragprog;

   struct pipe_framebuffer_state framebuffer;
   struct pipe_blend_color blend_colour;
   struct pipe_stencil_ref stencil_ref;
   struct pipe_poly_stipple stipple;
   struct pipe_scissor_state scissor;
   struct pipe_viewport_state viewport;
   struct pipe_clip_state clip;

   unsigned sample_mask;

   struct pipe_vertex_buffer vtxbuf[PIPE_MAX_ATTRIBS];
   unsigned num_vtxbufs;
   struct pipe_index_buffer idxbuf;
   uint32_t vbo_fifo;
   uint32_t vbo_user;
   unsigned vbo_min_index;
   unsigned vbo_max_index;
   boolean  vbo_push_hint;

   struct nouveau_heap  *blit_vp;
   struct pipe_resource *blit_fp;

   /*XXX: nvfx state, DO NOT USE EVER OUTSIDE "STOLEN" NVFX code */
   unsigned is_nv4x;
   unsigned use_nv4x;
   bool hw_pointsprite_control;
   enum {
      HW,
   } render_mode;

   struct pipe_query *render_cond_query;
   unsigned render_cond_mode;
   boolean render_cond_cond;
d68 1
a68 5
static INLINE struct nv30_context *
nv30_context(struct pipe_context *pipe)
{
   return (struct nv30_context *)pipe;
}
d70 19
a88 2
struct pipe_context *
nv30_context_create(struct pipe_screen *pscreen, void *priv);
d90 4
a93 2
void
nv30_vbo_init(struct pipe_context *pipe);
d95 4
a98 2
void
nv30_vbo_validate(struct nv30_context *nv30);
a99 2
void
nv30_query_init(struct pipe_context *pipe);
d101 4
a104 2
void
nv30_state_init(struct pipe_context *pipe);
d106 3
a108 2
void
nv30_clear_init(struct pipe_context *pipe);
d110 2
a111 2
void
nv30_vertprog_init(struct pipe_context *pipe);
d113 2
a114 2
void
nv30_vertprog_validate(struct nv30_context *nv30);
d116 1
a116 2
void
nv30_fragprog_init(struct pipe_context *pipe);
d118 30
a147 2
void
nv30_fragprog_validate(struct nv30_context *nv30);
d149 5
a153 2
void
nv30_texture_init(struct pipe_context *pipe);
d155 7
a161 2
void
nv30_texture_validate(struct nv30_context *nv30);
d163 50
a212 2
void
nv30_fragtex_init(struct pipe_context *pipe);
d214 3
a216 56
void
nv30_fragtex_validate(struct nv30_context *nv30);

void
nv40_verttex_init(struct pipe_context *pipe);

void
nv40_verttex_validate(struct nv30_context *nv30);

void
nv30_push_vbo(struct nv30_context *nv30, const struct pipe_draw_info *info);

void
nv30_draw_init(struct pipe_context *pipe);

void
nv30_render_vbo(struct pipe_context *pipe, const struct pipe_draw_info *info);

boolean
nv30_state_validate(struct nv30_context *nv30, boolean hwtnl);

void
nv30_state_release(struct nv30_context *nv30);

//XXX: needed to make it build, clean this up!
void
_nvfx_fragprog_translate(struct nv30_context *nvfx, struct nv30_fragprog *fp,
         boolean emulate_sprite_flipping);

boolean
_nvfx_vertprog_translate(struct nv30_context *nv30, struct nv30_vertprog *vp);

#ifdef NV30_3D_VERTEX_BEGIN_END
#define NV30_PRIM_GL_CASE(n) \
   case PIPE_PRIM_##n: return NV30_3D_VERTEX_BEGIN_END_##n

static INLINE unsigned
nv30_prim_gl(unsigned prim)
{
   switch (prim) {
   NV30_PRIM_GL_CASE(POINTS);
   NV30_PRIM_GL_CASE(LINES);
   NV30_PRIM_GL_CASE(LINE_LOOP);
   NV30_PRIM_GL_CASE(LINE_STRIP);
   NV30_PRIM_GL_CASE(TRIANGLES);
   NV30_PRIM_GL_CASE(TRIANGLE_STRIP);
   NV30_PRIM_GL_CASE(TRIANGLE_FAN);
   NV30_PRIM_GL_CASE(QUADS);
   NV30_PRIM_GL_CASE(QUAD_STRIP);
   NV30_PRIM_GL_CASE(POLYGON);
   default:
      return NV30_3D_VERTEX_BEGIN_END_POINTS;
      break;
   }
}
#endif
@


