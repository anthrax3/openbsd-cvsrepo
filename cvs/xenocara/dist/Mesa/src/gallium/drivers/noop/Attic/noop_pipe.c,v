head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.31;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.52;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.00.37;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.05;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.08;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.59;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.07.33;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.44.41;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright 2010 Red Hat Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHOR(S) AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#include <stdio.h>
#include <errno.h>
#include "pipe/p_defines.h"
#include "pipe/p_state.h"
#include "pipe/p_context.h"
#include "pipe/p_screen.h"
#include "util/u_memory.h"
#include "util/u_inlines.h"
#include "util/u_format.h"
#include "noop_public.h"

DEBUG_GET_ONCE_BOOL_OPTION(noop, "GALLIUM_NOOP", FALSE)

void noop_init_state_functions(struct pipe_context *ctx);

struct noop_pipe_screen {
	struct pipe_screen	pscreen;
	struct pipe_screen	*oscreen;
};

/*
 * query
 */
struct noop_query {
	unsigned	query;
};
static struct pipe_query *noop_create_query(struct pipe_context *ctx, unsigned query_type)
{
	struct noop_query *query = CALLOC_STRUCT(noop_query);

	return (struct pipe_query *)query;
}

static void noop_destroy_query(struct pipe_context *ctx, struct pipe_query *query)
{
	FREE(query);
}

static void noop_begin_query(struct pipe_context *ctx, struct pipe_query *query)
{
}

static void noop_end_query(struct pipe_context *ctx, struct pipe_query *query)
{
}

static boolean noop_get_query_result(struct pipe_context *ctx,
					struct pipe_query *query,
					boolean wait,
					union pipe_query_result *vresult)
{
	uint64_t *result = (uint64_t*)vresult;

	*result = 0;
	return TRUE;
}


/*
 * resource
 */
struct noop_resource {
	struct pipe_resource	base;
	unsigned		size;
	char			*data;
	struct sw_displaytarget	*dt;
};

static struct pipe_resource *noop_resource_create(struct pipe_screen *screen,
						const struct pipe_resource *templ)
{
	struct noop_resource *nresource;
	unsigned stride;

	nresource = CALLOC_STRUCT(noop_resource);
	if (nresource == NULL)
		return NULL;

	stride = util_format_get_stride(templ->format, templ->width0);
	nresource->base = *templ;
	nresource->base.screen = screen;
	nresource->size = stride * templ->height0 * templ->depth0;
	nresource->data = MALLOC(nresource->size);
	pipe_reference_init(&nresource->base.reference, 1);
	if (nresource->data == NULL) {
		FREE(nresource);
		return NULL;
	}
	return &nresource->base;
}

static struct pipe_resource *noop_resource_from_handle(struct pipe_screen *screen,
							const struct pipe_resource *templ,
							struct winsys_handle *handle)
{
	struct noop_pipe_screen *noop_screen = (struct noop_pipe_screen*)screen;
	struct pipe_screen *oscreen = noop_screen->oscreen;
	struct pipe_resource *result;
	struct pipe_resource *noop_resource;

	result = oscreen->resource_from_handle(oscreen, templ, handle);
	noop_resource = noop_resource_create(screen, result);
	pipe_resource_reference(&result, NULL);
	return noop_resource;
}

static boolean noop_resource_get_handle(struct pipe_screen *screen,
					struct pipe_resource *resource,
					struct winsys_handle *handle)
{
	return FALSE;
}

static void noop_resource_destroy(struct pipe_screen *screen,
					struct pipe_resource *resource)
{
	struct noop_resource *nresource = (struct noop_resource *)resource;

	FREE(nresource->data);
	FREE(resource);
}


/*
 * transfer
 */
static void *noop_transfer_map(struct pipe_context *pipe,
                               struct pipe_resource *resource,
                               unsigned level,
                               enum pipe_transfer_usage usage,
                               const struct pipe_box *box,
                               struct pipe_transfer **ptransfer)
{
   struct pipe_transfer *transfer;
   struct noop_resource *nresource = (struct noop_resource *)resource;

   transfer = CALLOC_STRUCT(pipe_transfer);
   if (transfer == NULL)
           return NULL;
   pipe_resource_reference(&transfer->resource, resource);
   transfer->level = level;
   transfer->usage = usage;
   transfer->box = *box;
   transfer->stride = 1;
   transfer->layer_stride = 1;
   *ptransfer = transfer;

   return nresource->data;
}

static void noop_transfer_flush_region(struct pipe_context *pipe,
					struct pipe_transfer *transfer,
					const struct pipe_box *box)
{
}

static void noop_transfer_unmap(struct pipe_context *pipe,
				struct pipe_transfer *transfer)
{
   pipe_resource_reference(&transfer->resource, NULL);
   FREE(transfer);
}

static void noop_transfer_inline_write(struct pipe_context *pipe,
					struct pipe_resource *resource,
					unsigned level,
					unsigned usage,
					const struct pipe_box *box,
					const void *data,
					unsigned stride,
					unsigned layer_stride)
{
}


/*
 * clear/copy
 */
static void noop_clear(struct pipe_context *ctx, unsigned buffers,
		       const union pipe_color_union *color, double depth, unsigned stencil)
{
}

static void noop_clear_render_target(struct pipe_context *ctx,
				     struct pipe_surface *dst,
				     const union pipe_color_union *color,
				     unsigned dstx, unsigned dsty,
				     unsigned width, unsigned height)
{
}

static void noop_clear_depth_stencil(struct pipe_context *ctx,
				     struct pipe_surface *dst,
				     unsigned clear_flags,
				     double depth,
				     unsigned stencil,
				     unsigned dstx, unsigned dsty,
				     unsigned width, unsigned height)
{
}

static void noop_resource_copy_region(struct pipe_context *ctx,
				      struct pipe_resource *dst,
				      unsigned dst_level,
				      unsigned dstx, unsigned dsty, unsigned dstz,
				      struct pipe_resource *src,
				      unsigned src_level,
				      const struct pipe_box *src_box)
{
}


static void noop_blit(struct pipe_context *ctx,
                      const struct pipe_blit_info *info)
{
}


static void
noop_flush_resource(struct pipe_context *ctx,
                    struct pipe_resource *resource)
{
}


/*
 * context
 */
static void noop_flush(struct pipe_context *ctx,
                       struct pipe_fence_handle **fence,
                       unsigned flags)
{
}

static void noop_destroy_context(struct pipe_context *ctx)
{
	FREE(ctx);
}

static struct pipe_context *noop_create_context(struct pipe_screen *screen, void *priv)
{
	struct pipe_context *ctx = CALLOC_STRUCT(pipe_context);

	if (ctx == NULL)
		return NULL;
	ctx->screen = screen;
	ctx->priv = priv;
	ctx->destroy = noop_destroy_context;
	ctx->flush = noop_flush;
	ctx->clear = noop_clear;
	ctx->clear_render_target = noop_clear_render_target;
	ctx->clear_depth_stencil = noop_clear_depth_stencil;
	ctx->resource_copy_region = noop_resource_copy_region;
	ctx->blit = noop_blit;
	ctx->flush_resource = noop_flush_resource;
	ctx->create_query = noop_create_query;
	ctx->destroy_query = noop_destroy_query;
	ctx->begin_query = noop_begin_query;
	ctx->end_query = noop_end_query;
	ctx->get_query_result = noop_get_query_result;
	ctx->transfer_map = noop_transfer_map;
	ctx->transfer_flush_region = noop_transfer_flush_region;
	ctx->transfer_unmap = noop_transfer_unmap;
	ctx->transfer_inline_write = noop_transfer_inline_write;
	noop_init_state_functions(ctx);

	return ctx;
}


/*
 * pipe_screen
 */
static void noop_flush_frontbuffer(struct pipe_screen *_screen,
				   struct pipe_resource *resource,
				   unsigned level, unsigned layer,
				   void *context_private, struct pipe_box *box)
{
}

static const char *noop_get_vendor(struct pipe_screen* pscreen)
{
	return "X.Org";
}

static const char *noop_get_name(struct pipe_screen* pscreen)
{
	return "NOOP";
}

static int noop_get_param(struct pipe_screen* pscreen, enum pipe_cap param)
{
	struct pipe_screen *screen = ((struct noop_pipe_screen*)pscreen)->oscreen;

	return screen->get_param(screen, param);
}

static float noop_get_paramf(struct pipe_screen* pscreen,
			     enum pipe_capf param)
{
	struct pipe_screen *screen = ((struct noop_pipe_screen*)pscreen)->oscreen;

	return screen->get_paramf(screen, param);
}

static int noop_get_shader_param(struct pipe_screen* pscreen, unsigned shader, enum pipe_shader_cap param)
{
	struct pipe_screen *screen = ((struct noop_pipe_screen*)pscreen)->oscreen;

	return screen->get_shader_param(screen, shader, param);
}

static boolean noop_is_format_supported(struct pipe_screen* pscreen,
					enum pipe_format format,
					enum pipe_texture_target target,
					unsigned sample_count,
                                        unsigned usage)
{
	struct pipe_screen *screen = ((struct noop_pipe_screen*)pscreen)->oscreen;

	return screen->is_format_supported(screen, format, target, sample_count, usage);
}

static uint64_t noop_get_timestamp(struct pipe_screen *pscreen)
{
	return 0;
}

static void noop_destroy_screen(struct pipe_screen *screen)
{
	struct noop_pipe_screen *noop_screen = (struct noop_pipe_screen*)screen;
	struct pipe_screen *oscreen = noop_screen->oscreen;

	oscreen->destroy(oscreen);
	FREE(screen);
}

struct pipe_screen *noop_screen_create(struct pipe_screen *oscreen)
{
	struct noop_pipe_screen *noop_screen;
	struct pipe_screen *screen;

	if (!debug_get_option_noop()) {
		return oscreen;
	}

	noop_screen = CALLOC_STRUCT(noop_pipe_screen);
	if (noop_screen == NULL) {
		return NULL;
	}
	noop_screen->oscreen = oscreen;
	screen = &noop_screen->pscreen;

	screen->destroy = noop_destroy_screen;
	screen->get_name = noop_get_name;
	screen->get_vendor = noop_get_vendor;
	screen->get_param = noop_get_param;
	screen->get_shader_param = noop_get_shader_param;
	screen->get_paramf = noop_get_paramf;
	screen->is_format_supported = noop_is_format_supported;
	screen->context_create = noop_create_context;
	screen->resource_create = noop_resource_create;
	screen->resource_from_handle = noop_resource_from_handle;
	screen->resource_get_handle = noop_resource_get_handle;
	screen->resource_destroy = noop_resource_destroy;
	screen->flush_frontbuffer = noop_flush_frontbuffer;
        screen->get_timestamp = noop_get_timestamp;

	return screen;
}
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d49 1
a49 1
static struct pipe_query *noop_create_query(struct pipe_context *ctx, unsigned query_type, unsigned index)
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d49 1
a49 1
static struct pipe_query *noop_create_query(struct pipe_context *ctx, unsigned query_type)
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d241 7
d277 1
d299 1
a299 1
				   void *context_private)
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d25 7
a31 7
#include <pipe/p_defines.h>
#include <pipe/p_state.h>
#include <pipe/p_context.h>
#include <pipe/p_screen.h>
#include <util/u_memory.h>
#include <util/u_inlines.h>
#include <util/u_format.h>
d71 2
a72 1
					boolean wait, void *vresult)
d105 1
a105 1
	nresource->data = malloc(nresource->size);
d141 1
a141 1
	free(nresource->data);
a144 17
static struct pipe_resource *noop_user_buffer_create(struct pipe_screen *screen,
							void *ptr, unsigned bytes,
							unsigned bind)
{
	struct pipe_resource templ;

	templ.target = PIPE_BUFFER;
	templ.format = PIPE_FORMAT_R8_UNORM;
	templ.usage = PIPE_USAGE_IMMUTABLE;
	templ.bind = bind;
	templ.width0 = bytes;
	templ.height0 = 1;
	templ.depth0 = 1;
	templ.flags = 0;
	return noop_resource_create(screen, &templ);
}

a148 20
static struct pipe_transfer *noop_get_transfer(struct pipe_context *context,
						struct pipe_resource *resource,
						unsigned level,
						enum pipe_transfer_usage usage,
						const struct pipe_box *box)
{
	struct pipe_transfer *transfer;

	transfer = CALLOC_STRUCT(pipe_transfer);
	if (transfer == NULL)
		return NULL;
	pipe_resource_reference(&transfer->resource, resource);
	transfer->level = level;
	transfer->usage = usage;
	transfer->box = *box;
	transfer->stride = 1;
	transfer->layer_stride = 1;
	return transfer;
}

d150 19
a168 3
				struct pipe_transfer *transfer)
{
	struct noop_resource *nresource = (struct noop_resource *)transfer->resource;
d170 1
a170 1
	return nresource->data;
d182 2
a183 7
}

static void noop_transfer_destroy(struct pipe_context *pipe,
					struct pipe_transfer *transfer)
{
	pipe_resource_reference(&transfer->resource, NULL);
	FREE(transfer);
d202 1
a202 1
			const float *rgba, double depth, unsigned stencil)
d208 1
a208 1
				     const float *rgba,
d235 6
d245 2
a246 1
			struct pipe_fence_handle **fence)
a260 1
	ctx->winsys = screen->winsys;
d269 1
a274 1
	ctx->get_transfer = noop_get_transfer;
a277 1
	ctx->transfer_destroy = noop_transfer_destroy;
d307 1
a307 51
	switch (param) {
	/* Supported features (boolean caps). */
	case PIPE_CAP_NPOT_TEXTURES:
	case PIPE_CAP_TWO_SIDED_STENCIL:
	case PIPE_CAP_GLSL:
	case PIPE_CAP_OCCLUSION_QUERY:
	case PIPE_CAP_POINT_SPRITE:
	case PIPE_CAP_ANISOTROPIC_FILTER:
	case PIPE_CAP_TEXTURE_MIRROR_CLAMP:
	case PIPE_CAP_TEXTURE_MIRROR_REPEAT:
	case PIPE_CAP_TEXTURE_SHADOW_MAP:
	case PIPE_CAP_TEXTURE_SWIZZLE:
	case PIPE_CAP_BLEND_EQUATION_SEPARATE:
	case PIPE_CAP_MIXED_COLORBUFFER_FORMATS:

	  return 1;
	case PIPE_CAP_DUAL_SOURCE_BLEND:

	case PIPE_CAP_SM3:
	case PIPE_CAP_INDEP_BLEND_ENABLE:
	case PIPE_CAP_DEPTHSTENCIL_CLEAR_SEPARATE:
	case PIPE_CAP_DEPTH_CLAMP:
	case PIPE_CAP_SHADER_STENCIL_EXPORT:
	case PIPE_CAP_TIMER_QUERY:
	case PIPE_CAP_STREAM_OUTPUT:
	case PIPE_CAP_PRIMITIVE_RESTART:
	case PIPE_CAP_INDEP_BLEND_FUNC:
		return 0;

	/* Texturing. */
	case PIPE_CAP_MAX_TEXTURE_2D_LEVELS:
	case PIPE_CAP_MAX_TEXTURE_3D_LEVELS:
	case PIPE_CAP_MAX_TEXTURE_CUBE_LEVELS:
		return 14;
	case PIPE_CAP_MAX_VERTEX_TEXTURE_UNITS:
		return 16;
	case PIPE_CAP_MAX_TEXTURE_IMAGE_UNITS:
	case PIPE_CAP_MAX_COMBINED_SAMPLERS:
		return 16;

	/* Render targets. */
	case PIPE_CAP_MAX_RENDER_TARGETS:
		return 8;

	/* Fragment coordinate conventions. */
	case PIPE_CAP_TGSI_FS_COORD_ORIGIN_UPPER_LEFT:
	case PIPE_CAP_TGSI_FS_COORD_PIXEL_CENTER_HALF_INTEGER:
		return 1;
	case PIPE_CAP_TGSI_FS_COORD_ORIGIN_LOWER_LEFT:
	case PIPE_CAP_TGSI_FS_COORD_PIXEL_CENTER_INTEGER:
		return 0;
d309 1
a309 3
	default:
		return 0;
	}
d312 2
a313 1
static float noop_get_paramf(struct pipe_screen* pscreen, enum pipe_cap param)
d315 3
a317 13
	switch (param) {
	case PIPE_CAP_MAX_LINE_WIDTH:
	case PIPE_CAP_MAX_LINE_WIDTH_AA:
	case PIPE_CAP_MAX_POINT_WIDTH:
	case PIPE_CAP_MAX_POINT_WIDTH_AA:
		return 8192.0f;
	case PIPE_CAP_MAX_TEXTURE_ANISOTROPY:
		return 16.0f;
	case PIPE_CAP_MAX_TEXTURE_LOD_BIAS:
		return 16.0f;
	default:
		return 0.0f;
	}
d322 1
a322 9
	switch(shader)
	{
	case PIPE_SHADER_FRAGMENT:
	case PIPE_SHADER_VERTEX:
	case PIPE_SHADER_GEOMETRY:
		break;
	default:
		return 0;
	}
d324 1
a324 30
	switch (param) {
	case PIPE_SHADER_CAP_MAX_INSTRUCTIONS:
	case PIPE_SHADER_CAP_MAX_ALU_INSTRUCTIONS:
	case PIPE_SHADER_CAP_MAX_TEX_INSTRUCTIONS:
	case PIPE_SHADER_CAP_MAX_TEX_INDIRECTIONS:
		return 16384;
	case PIPE_SHADER_CAP_MAX_CONTROL_FLOW_DEPTH:
		return 8;
	case PIPE_SHADER_CAP_MAX_INPUTS:
		return 16;
	case PIPE_SHADER_CAP_MAX_TEMPS:
		return 256;
	case PIPE_SHADER_CAP_MAX_ADDRS:
		return 1;
	case PIPE_SHADER_CAP_MAX_CONSTS:
		return 256;
	case PIPE_SHADER_CAP_MAX_CONST_BUFFERS:
		return 1;
	case PIPE_SHADER_CAP_MAX_PREDS:
		return 0;
	case PIPE_SHADER_CAP_TGSI_CONT_SUPPORTED:
		return 1;
	case PIPE_SHADER_CAP_INDIRECT_INPUT_ADDR:
	case PIPE_SHADER_CAP_INDIRECT_OUTPUT_ADDR:
	case PIPE_SHADER_CAP_INDIRECT_TEMP_ADDR:
	case PIPE_SHADER_CAP_INDIRECT_CONST_ADDR:
		return 1;
	default:
		return 0;
	}
d327 1
a327 1
static boolean noop_is_format_supported(struct pipe_screen* screen,
d333 8
a340 1
	return true;
a367 1
	screen->winsys = oscreen->winsys;
a379 1
	screen->user_buffer_create = noop_user_buffer_create;
d381 1
@


1.1
log
@Initial revision
@
text
@d33 2
a34 1
#include "state_tracker/sw_winsys.h"
d38 5
a89 7
static unsigned noop_is_resource_referenced(struct pipe_context *pipe,
						struct pipe_resource *resource,
						unsigned level, int layer)
{
	return PIPE_UNREFERENCED;
}

a109 14
#if 0
	if (nresource->base.bind & (PIPE_BIND_DISPLAY_TARGET |
					PIPE_BIND_SCANOUT |
					PIPE_BIND_SHARED)) {
		struct sw_winsys *winsys = (struct sw_winsys *)screen->winsys;
		unsigned stride;

		nresource->dt = winsys->displaytarget_create(winsys, nresource->base.bind,
								nresource->base.format,
								nresource->base.width0, 
								nresource->base.height0,
								16, &stride);
	}
#endif
d113 1
a113 1
static struct pipe_resource *noop_resource_from_handle(struct pipe_screen * screen,
d115 1
a115 1
							struct winsys_handle *whandle)
d117 9
a125 12
	struct sw_winsys *winsys = (struct sw_winsys *)screen->winsys;
	struct noop_resource *nresource;
	struct sw_displaytarget *dt;
	unsigned stride;

	dt = winsys->displaytarget_from_handle(winsys, templ, whandle, &stride);
	if (dt == NULL) {
		return NULL;
	}
	nresource = (struct noop_resource *)noop_resource_create(screen, templ);
	nresource->dt = dt;
	return &nresource->base;
d132 1
a132 7
	struct sw_winsys *winsys = (struct sw_winsys *)screen->winsys;
	struct noop_resource *nresource = (struct noop_resource *)resource;

	if (nresource->dt == NULL)
		return FALSE;

	return winsys->displaytarget_get_handle(winsys, nresource->dt, handle);
a139 5
	if (nresource->dt) {
		/* display target */
		struct sw_winsys *winsys = (struct sw_winsys *)screen->winsys;
		winsys->displaytarget_destroy(winsys, nresource->dt);
	}
d263 1
a263 1
static void noop_flush(struct pipe_context *ctx, unsigned flags,
a298 1
	ctx->is_resource_referenced = noop_is_resource_referenced;
d340 1
d449 1
a449 2
					unsigned usage,
					unsigned geom_flags)
d456 4
d463 1
a463 1
struct pipe_screen *noop_screen_create(struct sw_winsys *winsys)
d465 1
d468 6
a473 2
	screen = CALLOC_STRUCT(pipe_screen);
	if (screen == NULL) {
d476 2
d479 1
a479 1
	screen->winsys = (struct pipe_winsys*)winsys;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d25 7
a31 7
#include "pipe/p_defines.h"
#include "pipe/p_state.h"
#include "pipe/p_context.h"
#include "pipe/p_screen.h"
#include "util/u_memory.h"
#include "util/u_inlines.h"
#include "util/u_format.h"
d33 1
a33 2

DEBUG_GET_ONCE_BOOL_OPTION(noop, "GALLIUM_NOOP", FALSE)
a36 5
struct noop_pipe_screen {
	struct pipe_screen	pscreen;
	struct pipe_screen	*oscreen;
};

d65 1
a65 2
					boolean wait,
					union pipe_query_result *vresult)
d84 7
d105 1
a105 1
	nresource->data = MALLOC(nresource->size);
d111 14
d128 1
a128 1
static struct pipe_resource *noop_resource_from_handle(struct pipe_screen *screen,
d130 1
a130 1
							struct winsys_handle *handle)
d132 12
a143 9
	struct noop_pipe_screen *noop_screen = (struct noop_pipe_screen*)screen;
	struct pipe_screen *oscreen = noop_screen->oscreen;
	struct pipe_resource *result;
	struct pipe_resource *noop_resource;

	result = oscreen->resource_from_handle(oscreen, templ, handle);
	noop_resource = noop_resource_create(screen, result);
	pipe_resource_reference(&result, NULL);
	return noop_resource;
d150 7
a156 1
	return FALSE;
d164 6
a169 1
	FREE(nresource->data);
d173 17
d194 20
d215 3
a217 19
                               struct pipe_resource *resource,
                               unsigned level,
                               enum pipe_transfer_usage usage,
                               const struct pipe_box *box,
                               struct pipe_transfer **ptransfer)
{
   struct pipe_transfer *transfer;
   struct noop_resource *nresource = (struct noop_resource *)resource;

   transfer = CALLOC_STRUCT(pipe_transfer);
   if (transfer == NULL)
           return NULL;
   pipe_resource_reference(&transfer->resource, resource);
   transfer->level = level;
   transfer->usage = usage;
   transfer->box = *box;
   transfer->stride = 1;
   transfer->layer_stride = 1;
   *ptransfer = transfer;
d219 1
a219 1
   return nresource->data;
d231 7
a237 2
   pipe_resource_reference(&transfer->resource, NULL);
   FREE(transfer);
d256 1
a256 1
		       const union pipe_color_union *color, double depth, unsigned stencil)
d262 1
a262 1
				     const union pipe_color_union *color,
a288 6
static void noop_blit(struct pipe_context *ctx,
                      const struct pipe_blit_info *info)
{
}


d292 2
a293 3
static void noop_flush(struct pipe_context *ctx,
                       struct pipe_fence_handle **fence,
                       unsigned flags)
d308 1
a316 1
	ctx->blit = noop_blit;
d322 1
d326 1
d328 1
d357 50
a406 1
	struct pipe_screen *screen = ((struct noop_pipe_screen*)pscreen)->oscreen;
d408 3
a410 1
	return screen->get_param(screen, param);
d413 1
a413 2
static float noop_get_paramf(struct pipe_screen* pscreen,
			     enum pipe_capf param)
d415 13
a427 3
	struct pipe_screen *screen = ((struct noop_pipe_screen*)pscreen)->oscreen;

	return screen->get_paramf(screen, param);
d432 9
a440 1
	struct pipe_screen *screen = ((struct noop_pipe_screen*)pscreen)->oscreen;
d442 30
a471 1
	return screen->get_shader_param(screen, shader, param);
d474 1
a474 1
static boolean noop_is_format_supported(struct pipe_screen* pscreen,
d478 2
a479 1
                                        unsigned usage)
d481 1
a481 8
	struct pipe_screen *screen = ((struct noop_pipe_screen*)pscreen)->oscreen;

	return screen->is_format_supported(screen, format, target, sample_count, usage);
}

static uint64_t noop_get_timestamp(struct pipe_screen *pscreen)
{
	return 0;
a485 4
	struct noop_pipe_screen *noop_screen = (struct noop_pipe_screen*)screen;
	struct pipe_screen *oscreen = noop_screen->oscreen;

	oscreen->destroy(oscreen);
d489 1
a489 1
struct pipe_screen *noop_screen_create(struct pipe_screen *oscreen)
a490 1
	struct noop_pipe_screen *noop_screen;
d493 2
a494 6
	if (!debug_get_option_noop()) {
		return oscreen;
	}

	noop_screen = CALLOC_STRUCT(noop_pipe_screen);
	if (noop_screen == NULL) {
a496 2
	noop_screen->oscreen = oscreen;
	screen = &noop_screen->pscreen;
d498 1
d511 1
a512 1
        screen->get_timestamp = noop_get_timestamp;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a240 7
static void
noop_flush_resource(struct pipe_context *ctx,
                    struct pipe_resource *resource)
{
}


a269 1
	ctx->flush_resource = noop_flush_resource;
d291 1
a291 1
				   void *context_private, struct pipe_box *box)
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d49 1
a49 1
static struct pipe_query *noop_create_query(struct pipe_context *ctx, unsigned query_type, unsigned index)
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d49 1
a49 1
static struct pipe_query *noop_create_query(struct pipe_context *ctx, unsigned query_type)
@


