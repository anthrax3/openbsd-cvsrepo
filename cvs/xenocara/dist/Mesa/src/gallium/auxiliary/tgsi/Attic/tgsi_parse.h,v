head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.27;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.51;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.15;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.44;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.40;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.46;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.06.33;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.43.40;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#ifndef TGSI_PARSE_H
#define TGSI_PARSE_H

#include "pipe/p_compiler.h"
#include "pipe/p_shader_tokens.h"

#if defined __cplusplus
extern "C" {
#endif

struct tgsi_full_header
{
   struct tgsi_header      Header;
   struct tgsi_processor   Processor;
};

struct tgsi_full_dst_register
{
   struct tgsi_dst_register               Register;
   struct tgsi_ind_register               Indirect;
   struct tgsi_dimension                  Dimension;
   struct tgsi_ind_register               DimIndirect;
};

struct tgsi_full_src_register
{
   struct tgsi_src_register         Register;
   struct tgsi_ind_register         Indirect;
   struct tgsi_dimension            Dimension;
   struct tgsi_ind_register         DimIndirect;
};

struct tgsi_full_declaration
{
   struct tgsi_declaration Declaration;
   struct tgsi_declaration_range Range;
   struct tgsi_declaration_dimension Dim;
   struct tgsi_declaration_interp Interp;
   struct tgsi_declaration_semantic Semantic;
   struct tgsi_declaration_resource Resource;
   struct tgsi_declaration_sampler_view SamplerView;
   struct tgsi_declaration_array Array;
};

struct tgsi_full_immediate
{
   struct tgsi_immediate   Immediate;
   union tgsi_immediate_data u[4];
};

struct tgsi_full_property
{
   struct tgsi_property   Property;
   struct tgsi_property_data u[8];
};

#define TGSI_FULL_MAX_DST_REGISTERS 2
#define TGSI_FULL_MAX_SRC_REGISTERS 5 /* SAMPLE_D has 5 */
#define TGSI_FULL_MAX_TEX_OFFSETS 4

struct tgsi_full_instruction
{
   struct tgsi_instruction             Instruction;
   struct tgsi_instruction_predicate   Predicate;
   struct tgsi_instruction_label       Label;
   struct tgsi_instruction_texture     Texture;
   struct tgsi_full_dst_register       Dst[TGSI_FULL_MAX_DST_REGISTERS];
   struct tgsi_full_src_register       Src[TGSI_FULL_MAX_SRC_REGISTERS];
   struct tgsi_texture_offset          TexOffsets[TGSI_FULL_MAX_TEX_OFFSETS];
};

union tgsi_full_token
{
   struct tgsi_token             Token;
   struct tgsi_full_declaration  FullDeclaration;
   struct tgsi_full_immediate    FullImmediate;
   struct tgsi_full_instruction  FullInstruction;
   struct tgsi_full_property     FullProperty;
};

struct tgsi_parse_context
{
   const struct tgsi_token    *Tokens;
   unsigned                   Position;
   struct tgsi_full_header    FullHeader;
   union tgsi_full_token      FullToken;
};

#define TGSI_PARSE_OK      0
#define TGSI_PARSE_ERROR   1

unsigned
tgsi_parse_init(
   struct tgsi_parse_context *ctx,
   const struct tgsi_token *tokens );

void
tgsi_parse_free(
   struct tgsi_parse_context *ctx );

boolean
tgsi_parse_end_of_tokens(
   struct tgsi_parse_context *ctx );

void
tgsi_parse_token(
   struct tgsi_parse_context *ctx );

static INLINE unsigned
tgsi_num_tokens(const struct tgsi_token *tokens)
{
   struct tgsi_header header;
   memcpy(&header, tokens, sizeof(header));
   return header.HeaderSize + header.BodySize;
}

void
tgsi_dump_tokens(const struct tgsi_token *tokens);

struct tgsi_token *
tgsi_dup_tokens(const struct tgsi_token *tokens);

struct tgsi_token *
tgsi_alloc_tokens(unsigned num_tokens);


#if defined __cplusplus
}
#endif

#endif /* TGSI_PARSE_H */

@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a152 3
void
tgsi_free_tokens(const struct tgsi_token *tokens);

@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d153 3
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d47 1
a47 1
   struct tgsi_src_register               Indirect;
d49 1
a49 1
   struct tgsi_src_register               DimIndirect;
d55 1
a55 1
   struct tgsi_src_register         Indirect;
d57 1
a57 6
   struct tgsi_src_register         DimIndirect;
};

struct tgsi_immediate_array_data
{
   union tgsi_immediate_data *u;
d65 1
a66 1
   struct tgsi_immediate_array_data ImmediateData;
d68 2
d86 1
d96 1
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d72 1
d88 1
a88 1
#define TGSI_FULL_MAX_SRC_REGISTERS 4 /* TXD has 4 */
d140 2
a141 1
   struct tgsi_header header = *(const struct tgsi_header *) tokens;
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d31 1
d48 2
d60 5
d71 1
d136 9
a144 2
unsigned
tgsi_num_tokens(const struct tgsi_token *tokens);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a30 1
#include "pipe/p_compiler.h"
a46 2
   struct tgsi_dimension                  Dimension;
   struct tgsi_src_register               DimIndirect;
a56 5
struct tgsi_immediate_array_data
{
   union tgsi_immediate_data *u;
};

a62 1
   struct tgsi_immediate_array_data ImmediateData;
d127 2
a128 9
static INLINE unsigned
tgsi_num_tokens(const struct tgsi_token *tokens)
{
   struct tgsi_header header = *(const struct tgsi_header *) tokens;
   return header.HeaderSize + header.BodySize;
}

void
tgsi_dump_tokens(const struct tgsi_token *tokens);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d47 1
a47 1
   struct tgsi_ind_register               Indirect;
d49 1
a49 1
   struct tgsi_ind_register               DimIndirect;
d55 1
a55 1
   struct tgsi_ind_register         Indirect;
d57 6
a62 1
   struct tgsi_ind_register         DimIndirect;
a69 1
   struct tgsi_declaration_interp Interp;
d71 1
a71 3
   struct tgsi_declaration_resource Resource;
   struct tgsi_declaration_sampler_view SamplerView;
   struct tgsi_declaration_array Array;
d87 1
a87 2
#define TGSI_FULL_MAX_SRC_REGISTERS 5 /* SAMPLE_D has 5 */
#define TGSI_FULL_MAX_TEX_OFFSETS 4
a96 1
   struct tgsi_texture_offset          TexOffsets[TGSI_FULL_MAX_TEX_OFFSETS];
d139 1
a139 2
   struct tgsi_header header;
   memcpy(&header, tokens, sizeof(header));
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a152 3
void
tgsi_free_tokens(const struct tgsi_token *tokens);

@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d153 3
@


