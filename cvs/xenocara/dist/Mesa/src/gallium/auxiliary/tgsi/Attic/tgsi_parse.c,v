head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.27;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.51;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.15;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.44;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.40;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.46;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.06.33;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.43.40;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#include "util/u_debug.h"
#include "pipe/p_shader_tokens.h"
#include "tgsi_parse.h"
#include "util/u_memory.h"

unsigned
tgsi_parse_init(
   struct tgsi_parse_context *ctx,
   const struct tgsi_token *tokens )
{
   ctx->FullHeader.Header = *(struct tgsi_header *) &tokens[0];
   if( ctx->FullHeader.Header.HeaderSize >= 2 ) {
      ctx->FullHeader.Processor = *(struct tgsi_processor *) &tokens[1];
   }
   else {
      return TGSI_PARSE_ERROR;
   }

   ctx->Tokens = tokens;
   ctx->Position = ctx->FullHeader.Header.HeaderSize;

   return TGSI_PARSE_OK;
}

void
tgsi_parse_free(
   struct tgsi_parse_context *ctx )
{
}

boolean
tgsi_parse_end_of_tokens(
   struct tgsi_parse_context *ctx )
{
   return ctx->Position >=
      ctx->FullHeader.Header.HeaderSize + ctx->FullHeader.Header.BodySize;
}


/**
 * This function is used to avoid and work-around type punning/aliasing
 * warnings.  The warnings seem harmless on x86 but on PPC they cause
 * real failures.
 */
static INLINE void
copy_token(void *dst, const void *src)
{
   memcpy(dst, src, 4);
}


/**
 * Get next 4-byte token, return it at address specified by 'token'
 */
static void
next_token(
   struct tgsi_parse_context *ctx,
   void *token )
{
   assert( !tgsi_parse_end_of_tokens( ctx ) );
   copy_token(token, &ctx->Tokens[ctx->Position]);
   ctx->Position++;
}


void
tgsi_parse_token(
   struct tgsi_parse_context *ctx )
{
   struct tgsi_token token;
   unsigned i;

   next_token( ctx, &token );

   switch( token.Type ) {
   case TGSI_TOKEN_TYPE_DECLARATION:
   {
      struct tgsi_full_declaration *decl = &ctx->FullToken.FullDeclaration;

      memset(decl, 0, sizeof *decl);
      copy_token(&decl->Declaration, &token);

      next_token( ctx, &decl->Range );

      if (decl->Declaration.Dimension) {
         next_token(ctx, &decl->Dim);
      }

      if( decl->Declaration.Interpolate ) {
         next_token( ctx, &decl->Interp );
      }

      if( decl->Declaration.Semantic ) {
         next_token( ctx, &decl->Semantic );
      }

      if (decl->Declaration.File == TGSI_FILE_RESOURCE) {
         next_token(ctx, &decl->Resource);
      }

      if (decl->Declaration.File == TGSI_FILE_SAMPLER_VIEW) {
         next_token(ctx, &decl->SamplerView);
      }

      if( decl->Declaration.Array ) {
         next_token(ctx, &decl->Array);
      }

      break;
   }

   case TGSI_TOKEN_TYPE_IMMEDIATE:
   {
      struct tgsi_full_immediate *imm = &ctx->FullToken.FullImmediate;
      uint imm_count;

      memset(imm, 0, sizeof *imm);
      copy_token(&imm->Immediate, &token);

      imm_count = imm->Immediate.NrTokens - 1;

      switch (imm->Immediate.DataType) {
      case TGSI_IMM_FLOAT32:
         for (i = 0; i < imm_count; i++) {
            next_token(ctx, &imm->u[i].Float);
         }
         break;

      case TGSI_IMM_UINT32:
         for (i = 0; i < imm_count; i++) {
            next_token(ctx, &imm->u[i].Uint);
         }
         break;

      case TGSI_IMM_INT32:
         for (i = 0; i < imm_count; i++) {
            next_token(ctx, &imm->u[i].Int);
         }
         break;

      default:
         assert( 0 );
      }

      break;
   }

   case TGSI_TOKEN_TYPE_INSTRUCTION:
   {
      struct tgsi_full_instruction *inst = &ctx->FullToken.FullInstruction;

      memset(inst, 0, sizeof *inst);
      copy_token(&inst->Instruction, &token);

      if (inst->Instruction.Predicate) {
         next_token(ctx, &inst->Predicate);
      }

      if (inst->Instruction.Label) {
         next_token( ctx, &inst->Label);
      }

      if (inst->Instruction.Texture) {
         next_token( ctx, &inst->Texture);
         for( i = 0; i < inst->Texture.NumOffsets; i++ ) {
            next_token( ctx, &inst->TexOffsets[i] );
         }
      }

      assert( inst->Instruction.NumDstRegs <= TGSI_FULL_MAX_DST_REGISTERS );

      for(  i = 0; i < inst->Instruction.NumDstRegs; i++ ) {

         next_token( ctx, &inst->Dst[i].Register );

         if( inst->Dst[i].Register.Indirect )
            next_token( ctx, &inst->Dst[i].Indirect );

         if( inst->Dst[i].Register.Dimension ) {
            next_token( ctx, &inst->Dst[i].Dimension );

            /*
             * No support for multi-dimensional addressing.
             */
            assert( !inst->Dst[i].Dimension.Dimension );

            if( inst->Dst[i].Dimension.Indirect )
               next_token( ctx, &inst->Dst[i].DimIndirect );
         }
      }

      assert( inst->Instruction.NumSrcRegs <= TGSI_FULL_MAX_SRC_REGISTERS );

      for( i = 0; i < inst->Instruction.NumSrcRegs; i++ ) {

         next_token( ctx, &inst->Src[i].Register );

         if( inst->Src[i].Register.Indirect )
            next_token( ctx, &inst->Src[i].Indirect );

         if( inst->Src[i].Register.Dimension ) {
            next_token( ctx, &inst->Src[i].Dimension );

            /*
             * No support for multi-dimensional addressing.
             */
            assert( !inst->Src[i].Dimension.Dimension );

            if( inst->Src[i].Dimension.Indirect )
               next_token( ctx, &inst->Src[i].DimIndirect );
         }
      }

      break;
   }

   case TGSI_TOKEN_TYPE_PROPERTY:
   {
      struct tgsi_full_property *prop = &ctx->FullToken.FullProperty;
      uint prop_count;

      memset(prop, 0, sizeof *prop);
      copy_token(&prop->Property, &token);

      prop_count = prop->Property.NrTokens - 1;
      for (i = 0; i < prop_count; i++) {
         next_token(ctx, &prop->u[i]);
      }

      break;
   }

   default:
      assert( 0 );
   }
}




/**
 * Make a new copy of a token array.
 */
struct tgsi_token *
tgsi_dup_tokens(const struct tgsi_token *tokens)
{
   unsigned n = tgsi_num_tokens(tokens);
   unsigned bytes = n * sizeof(struct tgsi_token);
   struct tgsi_token *new_tokens = (struct tgsi_token *) MALLOC(bytes);
   if (new_tokens)
      memcpy(new_tokens, tokens, bytes);
   return new_tokens;
}


/**
 * Allocate memory for num_tokens tokens.
 */
struct tgsi_token *
tgsi_alloc_tokens(unsigned num_tokens)
{
   unsigned bytes = num_tokens * sizeof(struct tgsi_token);
   return (struct tgsi_token *) MALLOC(bytes);
}


void
tgsi_dump_tokens(const struct tgsi_token *tokens)
{
   const unsigned *dwords = (const unsigned *)tokens;
   int nr = tgsi_num_tokens(tokens);
   int i;
   
   assert(sizeof(*tokens) == sizeof(unsigned));

   debug_printf("const unsigned tokens[%d] = {\n", nr);
   for (i = 0; i < nr; i++)
      debug_printf("0x%08x,\n", dwords[i]);
   debug_printf("};\n");
}
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a293 10
/**
 * Free tokens allocated by tgsi_alloc_tokens() or tgsi_dup_tokens()
 */
void
tgsi_free_tokens(const struct tgsi_token *tokens)
{
   FREE((void *) tokens);
}


@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d294 10
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d116 4
d124 6
a129 9
      if (decl->Declaration.File == TGSI_FILE_IMMEDIATE_ARRAY) {
         unsigned i, j;
         decl->ImmediateData.u = (union tgsi_immediate_data*)
                                 &ctx->Tokens[ctx->Position];
         for (i = 0; i <= decl->Range.Last; ++i) {
            for (j = 0; j < 4; ++j) {
               ctx->Position++;
            }
         }
d132 2
a133 2
      if (decl->Declaration.File == TGSI_FILE_RESOURCE) {
         next_token(ctx, &decl->Resource);
d192 3
d203 1
a203 1
         if( inst->Dst[i].Register.Indirect ) {
a205 6
            /*
             * No support for indirect or multi-dimensional addressing.
             */
            assert( !inst->Dst[i].Indirect.Dimension );
            assert( !inst->Dst[i].Indirect.Indirect );
         }
d214 1
a214 1
            if( inst->Dst[i].Dimension.Indirect ) {
a215 7

               /*
                * No support for indirect or multi-dimensional addressing.
                */
               assert( !inst->Dst[i].Indirect.Indirect );
               assert( !inst->Dst[i].Indirect.Dimension );
            }
d225 1
a225 1
         if( inst->Src[i].Register.Indirect ) {
a227 7
            /*
             * No support for indirect or multi-dimensional addressing.
             */
            assert( !inst->Src[i].Indirect.Indirect );
            assert( !inst->Src[i].Indirect.Dimension );
         }

d236 1
a236 1
            if( inst->Src[i].Dimension.Indirect ) {
a237 7

               /*
               * No support for indirect or multi-dimensional addressing.
               */
               assert( !inst->Src[i].Indirect.Indirect );
               assert( !inst->Src[i].Indirect.Dimension );
            }
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d131 4
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d120 11
a194 5
         /*
          * No support for indirect or multi-dimensional addressing.
          */
         assert( !inst->Dst[i].Register.Dimension );

d204 18
a284 11
unsigned
tgsi_num_tokens(const struct tgsi_token *tokens)
{
   struct tgsi_parse_context ctx;
   if (tgsi_parse_init(&ctx, tokens) == TGSI_PARSE_OK) {
      unsigned len = (ctx.FullHeader.Header.HeaderSize +
                      ctx.FullHeader.Header.BodySize);
      return len;
   }
   return 0;
}
d310 16
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a119 11
      if (decl->Declaration.File == TGSI_FILE_IMMEDIATE_ARRAY) {
         unsigned i, j;
         decl->ImmediateData.u = (union tgsi_immediate_data*)
                                 &ctx->Tokens[ctx->Position];
         for (i = 0; i <= decl->Range.Last; ++i) {
            for (j = 0; j < 4; ++j) {
               ctx->Position++;
            }
         }
      }

d184 5
a197 18
         if( inst->Dst[i].Register.Dimension ) {
            next_token( ctx, &inst->Dst[i].Dimension );

            /*
             * No support for multi-dimensional addressing.
             */
            assert( !inst->Dst[i].Dimension.Dimension );

            if( inst->Dst[i].Dimension.Indirect ) {
               next_token( ctx, &inst->Dst[i].DimIndirect );

               /*
                * No support for indirect or multi-dimensional addressing.
                */
               assert( !inst->Dst[i].Indirect.Indirect );
               assert( !inst->Dst[i].Indirect.Dimension );
            }
         }
d261 11
a296 16
}


void
tgsi_dump_tokens(const struct tgsi_token *tokens)
{
   const unsigned *dwords = (const unsigned *)tokens;
   int nr = tgsi_num_tokens(tokens);
   int i;
   
   assert(sizeof(*tokens) == sizeof(unsigned));

   debug_printf("const unsigned tokens[%d] = {\n", nr);
   for (i = 0; i < nr; i++)
      debug_printf("0x%08x,\n", dwords[i]);
   debug_printf("};\n");
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a115 4
      if( decl->Declaration.Interpolate ) {
         next_token( ctx, &decl->Interp );
      }

d120 9
a128 10
      if (decl->Declaration.File == TGSI_FILE_RESOURCE) {
         next_token(ctx, &decl->Resource);
      }

      if (decl->Declaration.File == TGSI_FILE_SAMPLER_VIEW) {
         next_token(ctx, &decl->SamplerView);
      }

      if( decl->Declaration.Array ) {
         next_token(ctx, &decl->Array);
a186 3
         for( i = 0; i < inst->Texture.NumOffsets; i++ ) {
            next_token( ctx, &inst->TexOffsets[i] );
         }
d195 1
a195 1
         if( inst->Dst[i].Register.Indirect )
d198 6
d212 1
a212 1
            if( inst->Dst[i].Dimension.Indirect )
d214 7
d230 1
a230 1
         if( inst->Src[i].Register.Indirect )
d233 7
d248 1
a248 1
            if( inst->Src[i].Dimension.Indirect )
d250 7
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a293 10
/**
 * Free tokens allocated by tgsi_alloc_tokens() or tgsi_dup_tokens()
 */
void
tgsi_free_tokens(const struct tgsi_token *tokens)
{
   FREE((void *) tokens);
}


@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d294 10
@


