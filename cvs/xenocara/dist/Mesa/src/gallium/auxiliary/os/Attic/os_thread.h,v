head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.27;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.39;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.18;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.44;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 1999-2006 Brian Paul
 * Copyright 2008 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


/**
 * @@file
 * 
 * Thread, mutex, condition variable, barrier, semaphore and
 * thread-specific data functions.
 */


#ifndef OS_THREAD_H_
#define OS_THREAD_H_


#include "pipe/p_compiler.h"
#include "util/u_debug.h" /* for assert */

#include "c11/threads.h"

#ifdef HAVE_PTHREAD
#include <signal.h>
#endif


/* pipe_thread
 */
typedef thrd_t pipe_thread;

#define PIPE_THREAD_ROUTINE( name, param ) \
   int name( void *param )

static INLINE pipe_thread pipe_thread_create( PIPE_THREAD_ROUTINE((*routine), ), void *param )
{
   pipe_thread thread;
#ifdef HAVE_PTHREAD
   sigset_t saved_set, new_set;
   int ret;

   sigfillset(&new_set);
   pthread_sigmask(SIG_SETMASK, &new_set, &saved_set);
   ret = thrd_create( &thread, routine, param );
   pthread_sigmask(SIG_SETMASK, &saved_set, NULL);
#else
   int ret;
   ret = thrd_create( &thread, routine, param );
#endif
   if (ret)
      return 0;

   return thread;
}

static INLINE int pipe_thread_wait( pipe_thread thread )
{
   return thrd_join( thread, NULL );
}

static INLINE int pipe_thread_destroy( pipe_thread thread )
{
   return thrd_detach( thread );
}


/* pipe_mutex
 */
typedef mtx_t pipe_mutex;

#define pipe_static_mutex(mutex) \
   static pipe_mutex mutex = _MTX_INITIALIZER_NP

#define pipe_mutex_init(mutex) \
   (void) mtx_init(&(mutex), mtx_plain)

#define pipe_mutex_destroy(mutex) \
   mtx_destroy(&(mutex))

#define pipe_mutex_lock(mutex) \
   (void) mtx_lock(&(mutex))

#define pipe_mutex_unlock(mutex) \
   (void) mtx_unlock(&(mutex))


/* pipe_condvar
 */
typedef cnd_t pipe_condvar;

#define pipe_condvar_init(cond)	\
   cnd_init(&(cond))

#define pipe_condvar_destroy(cond) \
   cnd_destroy(&(cond))

#define pipe_condvar_wait(cond, mutex) \
   cnd_wait(&(cond), &(mutex))

#define pipe_condvar_signal(cond) \
   cnd_signal(&(cond))

#define pipe_condvar_broadcast(cond) \
   cnd_broadcast(&(cond))


/*
 * pipe_barrier
 */

#if (defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_HURD)) && !defined(PIPE_OS_ANDROID)

typedef pthread_barrier_t pipe_barrier;

static INLINE void pipe_barrier_init(pipe_barrier *barrier, unsigned count)
{
   pthread_barrier_init(barrier, NULL, count);
}

static INLINE void pipe_barrier_destroy(pipe_barrier *barrier)
{
   pthread_barrier_destroy(barrier);
}

static INLINE void pipe_barrier_wait(pipe_barrier *barrier)
{
   pthread_barrier_wait(barrier);
}


#else /* If the OS doesn't have its own, implement barriers using a mutex and a condvar */

typedef struct {
   unsigned count;
   unsigned waiters;
   uint64_t sequence;
   pipe_mutex mutex;
   pipe_condvar condvar;
} pipe_barrier;

static INLINE void pipe_barrier_init(pipe_barrier *barrier, unsigned count)
{
   barrier->count = count;
   barrier->waiters = 0;
   barrier->sequence = 0;
   pipe_mutex_init(barrier->mutex);
   pipe_condvar_init(barrier->condvar);
}

static INLINE void pipe_barrier_destroy(pipe_barrier *barrier)
{
   assert(barrier->waiters == 0);
   pipe_mutex_destroy(barrier->mutex);
   pipe_condvar_destroy(barrier->condvar);
}

static INLINE void pipe_barrier_wait(pipe_barrier *barrier)
{
   pipe_mutex_lock(barrier->mutex);

   assert(barrier->waiters < barrier->count);
   barrier->waiters++;

   if (barrier->waiters < barrier->count) {
      uint64_t sequence = barrier->sequence;

      do {
         pipe_condvar_wait(barrier->condvar, barrier->mutex);
      } while (sequence == barrier->sequence);
   } else {
      barrier->waiters = 0;
      barrier->sequence++;
      pipe_condvar_broadcast(barrier->condvar);
   }

   pipe_mutex_unlock(barrier->mutex);
}


#endif


/*
 * Semaphores
 */

typedef struct
{
   pipe_mutex mutex;
   pipe_condvar cond;
   int counter;
} pipe_semaphore;


static INLINE void
pipe_semaphore_init(pipe_semaphore *sema, int init_val)
{
   pipe_mutex_init(sema->mutex);
   pipe_condvar_init(sema->cond);
   sema->counter = init_val;
}

static INLINE void
pipe_semaphore_destroy(pipe_semaphore *sema)
{
   pipe_mutex_destroy(sema->mutex);
   pipe_condvar_destroy(sema->cond);
}

/** Signal/increment semaphore counter */
static INLINE void
pipe_semaphore_signal(pipe_semaphore *sema)
{
   pipe_mutex_lock(sema->mutex);
   sema->counter++;
   pipe_condvar_signal(sema->cond);
   pipe_mutex_unlock(sema->mutex);
}

/** Wait for semaphore counter to be greater than zero */
static INLINE void
pipe_semaphore_wait(pipe_semaphore *sema)
{
   pipe_mutex_lock(sema->mutex);
   while (sema->counter <= 0) {
      pipe_condvar_wait(sema->cond, sema->mutex);
   }
   sema->counter--;
   pipe_mutex_unlock(sema->mutex);
}



/*
 * Thread-specific data.
 */

typedef struct {
   tss_t key;
   int initMagic;
} pipe_tsd;


#define PIPE_TSD_INIT_MAGIC 0xff8adc98


static INLINE void
pipe_tsd_init(pipe_tsd *tsd)
{
   if (tss_create(&tsd->key, NULL/*free*/) != 0) {
      exit(-1);
   }
   tsd->initMagic = PIPE_TSD_INIT_MAGIC;
}

static INLINE void *
pipe_tsd_get(pipe_tsd *tsd)
{
   if (tsd->initMagic != (int) PIPE_TSD_INIT_MAGIC) {
      pipe_tsd_init(tsd);
   }
   return tss_get(tsd->key);
}

static INLINE void
pipe_tsd_set(pipe_tsd *tsd, void *value)
{
   if (tsd->initMagic != (int) PIPE_TSD_INIT_MAGIC) {
      pipe_tsd_init(tsd);
   }
   if (tss_set(tsd->key, value) != 0) {
      exit(-1);
   }
}



#endif /* OS_THREAD_H_ */
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d4 1
a4 1
 * Copyright 2008 Tungsten Graphics, Inc., Cedar Park, Texas.
d43 1
d45 1
a45 4
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_CYGWIN)

#include <pthread.h> /* POSIX threads headers */
#include <stdio.h> /* for perror() */
d47 1
d52 1
a52 1
typedef pthread_t pipe_thread;
d55 1
a55 1
   void *name( void *param )
d57 1
a57 1
static INLINE pipe_thread pipe_thread_create( void *(* routine)( void *), void *param )
d60 1
d66 1
a66 1
   ret = pthread_create( &thread, NULL, routine, param );
d68 4
d74 1
d80 1
a80 1
   return pthread_join( thread, NULL );
d85 1
a85 1
   return pthread_detach( thread );
d91 1
a91 1
typedef pthread_mutex_t pipe_mutex;
d94 1
a94 1
   static pipe_mutex mutex = PTHREAD_MUTEX_INITIALIZER
d97 1
a97 1
   (void) pthread_mutex_init(&(mutex), NULL)
d100 1
a100 1
   pthread_mutex_destroy(&(mutex))
d103 1
a103 1
   (void) pthread_mutex_lock(&(mutex))
d106 1
a106 1
   (void) pthread_mutex_unlock(&(mutex))
d111 1
a111 4
typedef pthread_cond_t pipe_condvar;

#define pipe_static_condvar(mutex) \
   static pipe_condvar mutex = PTHREAD_COND_INITIALIZER
d114 1
a114 109
   pthread_cond_init(&(cond), NULL)

#define pipe_condvar_destroy(cond) \
   pthread_cond_destroy(&(cond))

#define pipe_condvar_wait(cond, mutex) \
  pthread_cond_wait(&(cond), &(mutex))

#define pipe_condvar_signal(cond) \
  pthread_cond_signal(&(cond))

#define pipe_condvar_broadcast(cond) \
  pthread_cond_broadcast(&(cond))



#elif defined(PIPE_SUBSYSTEM_WINDOWS_USER)

#include <windows.h>

/* pipe_thread
 */
typedef HANDLE pipe_thread;

#define PIPE_THREAD_ROUTINE( name, param ) \
   void * WINAPI name( void *param )

static INLINE pipe_thread pipe_thread_create( void *(WINAPI * routine)( void *), void *param )
{
   DWORD id;
   return CreateThread( NULL, 0, (LPTHREAD_START_ROUTINE) routine, param, 0, &id );
}

static INLINE int pipe_thread_wait( pipe_thread thread )
{
   if (WaitForSingleObject( thread, INFINITE ) == WAIT_OBJECT_0)
      return 0;
   return -1;
}

static INLINE int pipe_thread_destroy( pipe_thread thread )
{
   if (CloseHandle( thread ))
      return 0;
   return -1;
}


/* pipe_mutex
 */
typedef CRITICAL_SECTION pipe_mutex;

/* http://locklessinc.com/articles/pthreads_on_windows/ */
#define pipe_static_mutex(mutex) \
   static pipe_mutex mutex = {(PCRITICAL_SECTION_DEBUG)-1, -1, 0, 0, 0, 0}

#define pipe_mutex_init(mutex) \
   InitializeCriticalSection(&mutex)

#define pipe_mutex_destroy(mutex) \
   DeleteCriticalSection(&mutex)

#define pipe_mutex_lock(mutex) \
   EnterCriticalSection(&mutex)

#define pipe_mutex_unlock(mutex) \
   LeaveCriticalSection(&mutex)

/* TODO: Need a macro to declare "I don't care about WinXP compatibilty" */
#if 0 && defined (_WIN32_WINNT) && (_WIN32_WINNT >= 0x0600)
/* CONDITION_VARIABLE is only available on newer versions of Windows
 * (Server 2008/Vista or later).
 * http://msdn.microsoft.com/en-us/library/ms682052(VS.85).aspx
 *
 * pipe_condvar
 */
typedef CONDITION_VARIABLE pipe_condvar;

#define pipe_static_condvar(cond) \
   /*static*/ pipe_condvar cond = CONDITION_VARIABLE_INIT

#define pipe_condvar_init(cond) \
   InitializeConditionVariable(&(cond))

#define pipe_condvar_destroy(cond) \
   (void) cond /* nothing to do */

#define pipe_condvar_wait(cond, mutex) \
   SleepConditionVariableCS(&(cond), &(mutex), INFINITE)

#define pipe_condvar_signal(cond) \
   WakeConditionVariable(&(cond))

#define pipe_condvar_broadcast(cond) \
   WakeAllConditionVariable(&(cond))

#else /* need compatibility with pre-Vista Win32 */

/* pipe_condvar (XXX FIX THIS)
 * See http://www.cs.wustl.edu/~schmidt/win32-cv-1.html
 * for potential pitfalls in implementation.
 */
typedef DWORD pipe_condvar;

#define pipe_static_condvar(cond) \
   /*static*/ pipe_condvar cond = 1

#define pipe_condvar_init(cond) \
   (void) (cond = 1)
d117 1
a117 1
   (void) cond
a118 3
/* Poor man's pthread_cond_wait():
   Just release the mutex and sleep for one millisecond.
   The caller's while() loop does all the work. */
d120 1
a120 4
   do { pipe_mutex_unlock(mutex); \
        Sleep(cond); \
        pipe_mutex_lock(mutex); \
   } while (0)
d123 1
a123 1
   (void) cond
d126 1
a126 75
   (void) cond

#endif /* pre-Vista win32 */

#else

#include "os/os_time.h"

/** Dummy definitions */

typedef unsigned pipe_thread;

#define PIPE_THREAD_ROUTINE( name, param ) \
   void * name( void *param )

static INLINE pipe_thread pipe_thread_create( void *(* routine)( void *), void *param )
{
   return 0;
}

static INLINE int pipe_thread_wait( pipe_thread thread )
{
   return -1;
}

static INLINE int pipe_thread_destroy( pipe_thread thread )
{
   return -1;
}

typedef unsigned pipe_mutex;

#define pipe_static_mutex(mutex) \
   static pipe_mutex mutex = 0

#define pipe_mutex_init(mutex) \
   (void) mutex

#define pipe_mutex_destroy(mutex) \
   (void) mutex

#define pipe_mutex_lock(mutex) \
   (void) mutex

#define pipe_mutex_unlock(mutex) \
   (void) mutex

typedef int64_t pipe_condvar;

#define pipe_static_condvar(condvar) \
   static pipe_condvar condvar = 1000

#define pipe_condvar_init(condvar) \
   (void) (condvar = 1000)

#define pipe_condvar_destroy(condvar) \
   (void) condvar

/* Poor man's pthread_cond_wait():
   Just release the mutex and sleep for one millisecond.
   The caller's while() loop does all the work. */
#define pipe_condvar_wait(condvar, mutex) \
   do { pipe_mutex_unlock(mutex); \
        os_time_sleep(condvar); \
        pipe_mutex_lock(mutex); \
   } while (0)

#define pipe_condvar_signal(condvar) \
   (void) condvar

#define pipe_condvar_broadcast(condvar) \
   (void) condvar


#endif  /* PIPE_OS_? */
d133 1
a133 1
#if (defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS)) && !defined(PIPE_OS_ANDROID)
d261 1
a261 5
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_CYGWIN)
   pthread_key_t key;
#elif defined(PIPE_SUBSYSTEM_WINDOWS_USER)
   DWORD key;
#endif
d272 1
a272 3
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_CYGWIN)
   if (pthread_key_create(&tsd->key, NULL/*free*/) != 0) {
      perror("pthread_key_create(): failed to allocate key for thread specific data");
a274 3
#elif defined(PIPE_SUBSYSTEM_WINDOWS_USER)
   assert(0);
#endif
d284 1
a284 9
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_CYGWIN)
   return pthread_getspecific(tsd->key);
#elif defined(PIPE_SUBSYSTEM_WINDOWS_USER)
   assert(0);
   return NULL;
#else
   assert(0);
   return NULL;
#endif
d293 1
a293 3
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_CYGWIN)
   if (pthread_setspecific(tsd->key, value) != 0) {
      perror("pthread_set_specific() failed");
a295 5
#elif defined(PIPE_SUBSYSTEM_WINDOWS_USER)
   assert(0);
#else
   assert(0);
#endif
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d20 5
a24 4
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
d48 1
d319 1
a319 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_HAIKU)
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d43 1
a43 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_EMBEDDED) || defined(PIPE_OS_CYGWIN)
d59 8
a66 1
   if (pthread_create( &thread, NULL, routine, param ))
d162 1
d164 1
a164 1
   /*static*/ pipe_mutex mutex = {0,0,0,0,0,0}
d317 1
a317 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_EMBEDDED)
d445 1
a445 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_EMBEDDED) || defined(PIPE_OS_CYGWIN)
d460 1
a460 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_EMBEDDED) || defined(PIPE_OS_CYGWIN)
d477 1
a477 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_EMBEDDED) || defined(PIPE_OS_CYGWIN)
d494 1
a494 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_EMBEDDED) || defined(PIPE_OS_CYGWIN)
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d43 1
a43 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU)
a47 1
#define PIPE_THREAD_HAVE_CONDVAR
d170 29
d201 2
d204 4
a207 1
typedef unsigned pipe_condvar;
d210 1
a210 1
   (void) cond
d215 3
d219 4
a222 1
   (void) cond; (void) mutex
d230 1
d234 2
a258 1
typedef unsigned pipe_condvar;
d275 2
d278 1
a278 1
   static unsigned condvar = 0
d281 1
a281 1
   (void) condvar
d286 3
d290 4
a293 1
   (void) condvar
d309 1
a309 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_HAIKU)
d329 1
a329 1
#elif defined(PIPE_SUBSYSTEM_WINDOWS_USER)
d331 7
a337 2
/* XXX FIX THIS */
typedef unsigned pipe_barrier;
d341 5
a345 1
   /* XXX we could implement barriers with a mutex and condition var */
d350 3
d357 1
a357 2
   assert(0);
}
d359 2
d362 2
a363 1
#else
d365 8
a372 1
typedef unsigned pipe_barrier;
d374 1
a374 14
static INLINE void pipe_barrier_init(pipe_barrier *barrier, unsigned count)
{
   /* XXX we could implement barriers with a mutex and condition var */
   assert(0);
}

static INLINE void pipe_barrier_destroy(pipe_barrier *barrier)
{
   assert(0);
}

static INLINE void pipe_barrier_wait(pipe_barrier *barrier)
{
   assert(0);
d437 1
a437 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU)
d452 1
a452 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU)
d469 1
a469 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU)
d486 1
a486 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU)
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d43 1
a43 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_EMBEDDED) || defined(PIPE_OS_CYGWIN)
d48 1
a170 29
/* TODO: Need a macro to declare "I don't care about WinXP compatibilty" */
#if 0 && defined (_WIN32_WINNT) && (_WIN32_WINNT >= 0x0600)
/* CONDITION_VARIABLE is only available on newer versions of Windows
 * (Server 2008/Vista or later).
 * http://msdn.microsoft.com/en-us/library/ms682052(VS.85).aspx
 *
 * pipe_condvar
 */
typedef CONDITION_VARIABLE pipe_condvar;

#define pipe_static_condvar(cond) \
   /*static*/ pipe_condvar cond = CONDITION_VARIABLE_INIT

#define pipe_condvar_init(cond) \
   InitializeConditionVariable(&(cond))

#define pipe_condvar_destroy(cond) \
   (void) cond /* nothing to do */

#define pipe_condvar_wait(cond, mutex) \
   SleepConditionVariableCS(&(cond), &(mutex), INFINITE)

#define pipe_condvar_signal(cond) \
   WakeConditionVariable(&(cond))

#define pipe_condvar_broadcast(cond) \
   WakeAllConditionVariable(&(cond))

#else /* need compatibility with pre-Vista Win32 */
a172 2
 * See http://www.cs.wustl.edu/~schmidt/win32-cv-1.html
 * for potential pitfalls in implementation.
d174 1
a174 4
typedef DWORD pipe_condvar;

#define pipe_static_condvar(cond) \
   /*static*/ pipe_condvar cond = 1
d177 1
a177 1
   (void) (cond = 1)
a181 3
/* Poor man's pthread_cond_wait():
   Just release the mutex and sleep for one millisecond.
   The caller's while() loop does all the work. */
d183 1
a183 4
   do { pipe_mutex_unlock(mutex); \
        Sleep(cond); \
        pipe_mutex_lock(mutex); \
   } while (0)
a190 1
#endif /* pre-Vista win32 */
a193 2
#include "os/os_time.h"

d217 1
a233 2
typedef int64_t pipe_condvar;

d235 1
a235 1
   static pipe_condvar condvar = 1000
d238 1
a238 1
   (void) (condvar = 1000)
a242 3
/* Poor man's pthread_cond_wait():
   Just release the mutex and sleep for one millisecond.
   The caller's while() loop does all the work. */
d244 1
a244 4
   do { pipe_mutex_unlock(mutex); \
        os_time_sleep(condvar); \
        pipe_mutex_lock(mutex); \
   } while (0)
d260 1
a260 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_EMBEDDED)
d280 1
a280 1
#else /* If the OS doesn't have its own, implement barriers using a mutex and a condvar */
d282 2
a283 7
typedef struct {
   unsigned count;
   unsigned waiters;
   uint64_t sequence;
   pipe_mutex mutex;
   pipe_condvar condvar;
} pipe_barrier;
d287 1
a287 5
   barrier->count = count;
   barrier->waiters = 0;
   barrier->sequence = 0;
   pipe_mutex_init(barrier->mutex);
   pipe_condvar_init(barrier->condvar);
a291 3
   assert(barrier->waiters == 0);
   pipe_mutex_destroy(barrier->mutex);
   pipe_condvar_destroy(barrier->condvar);
d296 3
a298 1
   pipe_mutex_lock(barrier->mutex);
d300 1
a300 2
   assert(barrier->waiters < barrier->count);
   barrier->waiters++;
d302 1
a302 2
   if (barrier->waiters < barrier->count) {
      uint64_t sequence = barrier->sequence;
d304 10
a313 8
      do {
         pipe_condvar_wait(barrier->condvar, barrier->mutex);
      } while (sequence == barrier->sequence);
   } else {
      barrier->waiters = 0;
      barrier->sequence++;
      pipe_condvar_broadcast(barrier->condvar);
   }
d315 3
a317 1
   pipe_mutex_unlock(barrier->mutex);
d380 1
a380 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_EMBEDDED) || defined(PIPE_OS_CYGWIN)
d395 1
a395 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_EMBEDDED) || defined(PIPE_OS_CYGWIN)
d412 1
a412 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_EMBEDDED) || defined(PIPE_OS_CYGWIN)
d429 1
a429 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_EMBEDDED) || defined(PIPE_OS_CYGWIN)
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d20 4
a23 5
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
d43 1
a43 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_CYGWIN)
a46 1
#include <signal.h>
d59 1
a59 8
   sigset_t saved_set, new_set;
   int ret;

   sigfillset(&new_set);
   pthread_sigmask(SIG_SETMASK, &new_set, &saved_set);
   ret = pthread_create( &thread, NULL, routine, param );
   pthread_sigmask(SIG_SETMASK, &saved_set, NULL);
   if (ret)
a154 1
/* http://locklessinc.com/articles/pthreads_on_windows/ */
d156 1
a156 1
   static pipe_mutex mutex = {(PCRITICAL_SECTION_DEBUG)-1, -1, 0, 0, 0, 0}
d309 1
a309 1
#if (defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS)) && !defined(PIPE_OS_ANDROID)
d437 1
a437 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_CYGWIN)
d452 1
a452 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_CYGWIN)
d469 1
a469 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_CYGWIN)
d486 1
a486 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_CYGWIN)
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d4 1
a4 1
 * Copyright 2008 VMware, Inc.
a42 1
#include "c11/threads.h"
d44 4
a47 1
#ifdef HAVE_PTHREAD
a48 1
#endif
d53 1
a53 1
typedef thrd_t pipe_thread;
d56 1
a56 1
   int name( void *param )
d58 1
a58 1
static INLINE pipe_thread pipe_thread_create( PIPE_THREAD_ROUTINE((*routine), ), void *param )
a60 1
#ifdef HAVE_PTHREAD
d66 1
a66 1
   ret = thrd_create( &thread, routine, param );
a67 4
#else
   int ret;
   ret = thrd_create( &thread, routine, param );
#endif
a69 1

d75 1
a75 1
   return thrd_join( thread, NULL );
d80 1
a80 1
   return thrd_detach( thread );
d86 1
a86 1
typedef mtx_t pipe_mutex;
d89 1
a89 1
   static pipe_mutex mutex = _MTX_INITIALIZER_NP
d92 1
a92 1
   (void) mtx_init(&(mutex), mtx_plain)
d95 1
a95 1
   mtx_destroy(&(mutex))
d98 1
a98 1
   (void) mtx_lock(&(mutex))
d101 1
a101 1
   (void) mtx_unlock(&(mutex))
d106 4
a109 1
typedef cnd_t pipe_condvar;
d112 109
a220 1
   cnd_init(&(cond))
d223 1
a223 1
   cnd_destroy(&(cond))
d225 3
d229 4
a232 1
   cnd_wait(&(cond), &(mutex))
d235 1
a235 1
   cnd_signal(&(cond))
d238 75
a312 1
   cnd_broadcast(&(cond))
d319 1
a319 1
#if (defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_HURD)) && !defined(PIPE_OS_ANDROID)
d447 5
a451 1
   tss_t key;
d462 3
a464 1
   if (tss_create(&tsd->key, NULL/*free*/) != 0) {
d467 3
d479 9
a487 1
   return tss_get(tsd->key);
d496 3
a498 1
   if (tss_set(tsd->key, value) != 0) {
d501 5
@


