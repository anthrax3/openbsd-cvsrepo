head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.09.05.13.59.39;	author jsg;	state dead;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@/**************************************************************************
 *
 * Copyright 2008-2010 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

/**
 * @@file
 * Stream implementation based on the Standard C Library.
 */

#include "pipe/p_config.h"

#if defined(PIPE_OS_UNIX) || defined(PIPE_SUBSYSTEM_WINDOWS_USER)

#include <stdlib.h>
#include <stdio.h>

#include "os_stream.h"


struct os_stdc_stream
{
   struct os_stream base;

   FILE *file;
};


static INLINE struct os_stdc_stream *
os_stdc_stream(struct os_stream *stream)
{
   return (struct os_stdc_stream *)stream;
}


static void
os_stdc_stream_close(struct os_stream *_stream)
{
   struct os_stdc_stream *stream = os_stdc_stream(_stream);

   fclose(stream->file);

   free(stream);
}


static boolean
os_stdc_stream_write(struct os_stream *_stream, const void *data, size_t size)
{
   struct os_stdc_stream *stream = os_stdc_stream(_stream);

   return fwrite(data, size, 1, stream->file) == size ? TRUE : FALSE;
}


static void
os_stdc_stream_flush(struct os_stream *_stream)
{
   struct os_stdc_stream *stream = os_stdc_stream(_stream);

   fflush(stream->file);
}

static int
os_stdc_stream_vprintf (struct os_stream* _stream, const char *format, va_list ap)
{
   struct os_stdc_stream *stream = os_stdc_stream(_stream);

   return vfprintf(stream->file, format, ap);
}


struct os_stream *
os_file_stream_create(const char *filename)
{
   struct os_stdc_stream *stream;

   stream = (struct os_stdc_stream *)calloc(1, sizeof(*stream));
   if(!stream)
      goto no_stream;

   stream->base.close = &os_stdc_stream_close;
   stream->base.write = &os_stdc_stream_write;
   stream->base.flush = &os_stdc_stream_flush;
   stream->base.vprintf = &os_stdc_stream_vprintf;

   stream->file = fopen(filename, "wb");
   if(!stream->file)
      goto no_file;

   return &stream->base;

no_file:
   free(stream);
no_stream:
   return NULL;
}


#endif
@


1.2
log
@Merge Mesa 7.10.3
@
text
@@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d86 8
d107 1
d109 1
a109 1
   stream->file = fopen(filename, "w");
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a85 8
static int
os_stdc_stream_vprintf (struct os_stream* _stream, const char *format, va_list ap)
{
   struct os_stdc_stream *stream = os_stdc_stream(_stream);

   return vfprintf(stream->file, format, ap);
}

a98 1
   stream->base.vprintf = &os_stdc_stream_vprintf;
d100 1
a100 1
   stream->file = fopen(filename, "wb");
@

