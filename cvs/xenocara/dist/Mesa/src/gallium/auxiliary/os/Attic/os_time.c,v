head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.27;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2013.09.05.13.59.39;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.18;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2008-2010 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

/**
 * @@file
 * OS independent time-manipulation functions.
 * 
 * @@author Jose Fonseca <jfonseca@@vmware.com>
 */


#include "pipe/p_config.h"

#if defined(PIPE_OS_UNIX)
#  include <time.h> /* timeval */
#  include <sys/time.h> /* timeval */
#elif defined(PIPE_SUBSYSTEM_WINDOWS_USER)
#  include <windows.h>
#else
#  error Unsupported OS
#endif

#include "os_time.h"


int64_t
os_time_get_nano(void)
{
#if defined(PIPE_OS_LINUX)

   struct timespec tv;
   clock_gettime(CLOCK_MONOTONIC, &tv);
   return tv.tv_nsec + tv.tv_sec*INT64_C(1000000000);

#elif defined(PIPE_OS_UNIX)

   struct timeval tv;
   gettimeofday(&tv, NULL);
   return tv.tv_usec*INT64_C(1000) + tv.tv_sec*INT64_C(1000000000);

#elif defined(PIPE_SUBSYSTEM_WINDOWS_USER)

   static LARGE_INTEGER frequency;
   LARGE_INTEGER counter;
   if(!frequency.QuadPart)
      QueryPerformanceFrequency(&frequency);
   QueryPerformanceCounter(&counter);
   return counter.QuadPart*INT64_C(1000000000)/frequency.QuadPart;

#else

#error Unsupported OS

#endif
}


#if defined(PIPE_SUBSYSTEM_WINDOWS_USER)

void
os_time_sleep(int64_t usecs)
{
   DWORD dwMilliseconds = (DWORD) ((usecs + 999) / 1000);
   /* Avoid Sleep(O) as that would cause to sleep for an undetermined duration */
   if (dwMilliseconds) {
      Sleep(dwMilliseconds);
   }
}

#endif
@


1.4
log
@Merge Mesa 9.2.0
@
text
@@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d39 1
d41 1
a41 7
#elif defined(PIPE_SUBSYSTEM_WINDOWS_DISPLAY)
#  include <windows.h>
#  include <winddi.h>
#elif defined(PIPE_SUBSYSTEM_WINDOWS_MINIPORT)
#  include <windows.h>
extern VOID KeQuerySystemTime(PLARGE_INTEGER);
#elif defined(PIPE_SUBSYSTEM_WINDOWS_USER) || defined(PIPE_SUBSYSTEM_WINDOWS_CE)
d51 1
a51 1
os_time_get(void)
d53 7
a59 1
#if defined(PIPE_OS_UNIX)
d63 1
a63 1
   return tv.tv_usec + tv.tv_sec*1000000LL;
d65 1
a65 10
#elif defined(PIPE_SUBSYSTEM_WINDOWS_DISPLAY)

   static LONGLONG frequency;
   LONGLONG counter;
   if(!frequency)
      EngQueryPerformanceFrequency(&frequency);
   EngQueryPerformanceCounter(&counter);
   return counter*INT64_C(1000000)/frequency;

#elif defined(PIPE_SUBSYSTEM_WINDOWS_USER) || defined(PIPE_SUBSYSTEM_WINDOWS_CE)
d72 1
a72 1
   return counter.QuadPart*INT64_C(1000000)/frequency.QuadPart;
d74 1
a74 1
#elif defined(PIPE_SUBSYSTEM_WINDOWS_MINIPORT)
d76 1
a76 5
   /* Updated every 10 miliseconds, measured in units of 100 nanoseconds.
    * http://msdn.microsoft.com/en-us/library/ms801642.aspx */
   LARGE_INTEGER counter;
   KeQuerySystemTime(&counter);
   return counter.QuadPart/10;
d82 1
a82 22
#if defined(PIPE_SUBSYSTEM_WINDOWS_DISPLAY)

void
os_time_sleep(int64_t usecs)
{
   static LONGLONG frequency;
   LONGLONG start, curr, end;
   
   EngQueryPerformanceCounter(&start);
   
   if(!frequency)
      EngQueryPerformanceFrequency(&frequency);
   
   end = start + (usecs * frequency + 999999LL)/1000000LL;
   
   do {
      EngQueryPerformanceCounter(&curr);
   } while(start <= curr && curr < end || 
	   end < start && (curr < end || start <= curr));
}

#elif defined(PIPE_SUBSYSTEM_WINDOWS_USER)
d87 5
a91 1
   Sleep((usecs + 999) / 1000);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d38 1
a38 3
#if !defined(PIPE_OS_EMBEDDED)

#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_CYGWIN)
a123 3


#endif /* !PIPE_OS_EMBEDDED */
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d40 1
a40 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU)
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d40 1
a40 1
#if defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_SOLARIS) || defined(PIPE_OS_APPLE) || defined(PIPE_OS_HAIKU) || defined(PIPE_OS_CYGWIN)
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d38 3
a40 2
#if defined(PIPE_OS_UNIX)
#  include <time.h> /* timeval */
d42 7
a48 1
#elif defined(PIPE_SUBSYSTEM_WINDOWS_USER)
d58 1
a58 1
os_time_get_nano(void)
d60 1
a60 1
#if defined(PIPE_OS_LINUX)
d62 3
a64 3
   struct timespec tv;
   clock_gettime(CLOCK_MONOTONIC, &tv);
   return tv.tv_nsec + tv.tv_sec*INT64_C(1000000000);
d66 1
a66 1
#elif defined(PIPE_OS_UNIX)
d68 6
a73 3
   struct timeval tv;
   gettimeofday(&tv, NULL);
   return tv.tv_usec*INT64_C(1000) + tv.tv_sec*INT64_C(1000000000);
d75 1
a75 1
#elif defined(PIPE_SUBSYSTEM_WINDOWS_USER)
d82 1
a82 1
   return counter.QuadPart*INT64_C(1000000000)/frequency.QuadPart;
d84 1
a84 1
#else
d86 5
a90 1
#error Unsupported OS
d96 1
a96 1
#if defined(PIPE_SUBSYSTEM_WINDOWS_USER)
d101 22
a122 5
   DWORD dwMilliseconds = (DWORD) ((usecs + 999) / 1000);
   /* Avoid Sleep(O) as that would cause to sleep for an undetermined duration */
   if (dwMilliseconds) {
      Sleep(dwMilliseconds);
   }
d126 3
@


