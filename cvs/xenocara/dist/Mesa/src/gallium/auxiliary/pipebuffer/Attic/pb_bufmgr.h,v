head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.27;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.51;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.15;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.20;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.44;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.06.25;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.43.33;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

/**
 * \file
 * Buffer management.
 * 
 * A buffer manager does only one basic thing: it creates buffers. Actually,
 * "buffer factory" would probably a more accurate description.
 * 
 * You can chain buffer managers so that you can have a finer grained memory
 * management and pooling.
 * 
 * For example, for a simple batch buffer manager you would chain:
 * - the native buffer manager, which provides DMA memory from the graphics
 * memory space;
 * - the pool buffer manager, which keep around a pool of equally sized buffers
 * to avoid latency associated with the native buffer manager; 
 * - the fenced buffer manager, which will delay buffer destruction until the 
 * the moment the card finishing processing it. 
 * 
 * \author Jose Fonseca <jfonseca@@vmware.com>
 */

#ifndef PB_BUFMGR_H_
#define PB_BUFMGR_H_


#include "pb_buffer.h"


#ifdef __cplusplus
extern "C" {
#endif


struct pb_desc;


/** 
 * Abstract base class for all buffer managers.
 */
struct pb_manager
{
   void
   (*destroy)( struct pb_manager *mgr );

   struct pb_buffer *
   (*create_buffer)( struct pb_manager *mgr, 
	             pb_size size,
	             const struct pb_desc *desc);

   /**
    * Flush all temporary-held buffers.
    * 
    * Used mostly to aid debugging memory issues or to clean up resources when 
    * the drivers are long lived.
    */
   void
   (*flush)( struct pb_manager *mgr );

   boolean
   (*is_buffer_busy)( struct pb_manager *mgr,
                      struct pb_buffer *buf );
};


/**
 * Malloc buffer provider.
 * 
 * Simple wrapper around pb_malloc_buffer_create for convenience.
 */
struct pb_manager *
pb_malloc_bufmgr_create(void);


/** 
 * Static buffer pool sub-allocator.
 * 
 * Manages the allocation of equally sized buffers. It does so by allocating
 * a single big buffer and divide it equally sized buffers. 
 * 
 * It is meant to manage the allocation of batch buffer pools.
 */
struct pb_manager *
pool_bufmgr_create(struct pb_manager *provider, 
                   pb_size n, pb_size size,
                   const struct pb_desc *desc);


/** 
 * Static sub-allocator based the old memory manager.
 * 
 * It managers buffers of different sizes. It does so by allocating a buffer
 * with the size of the heap, and then using the old mm memory manager to manage
 * that heap. 
 */
struct pb_manager *
mm_bufmgr_create(struct pb_manager *provider, 
                 pb_size size, pb_size align2);

/**
 * Same as mm_bufmgr_create.
 * 
 * Buffer will be release when the manager is destroyed.
 */
struct pb_manager *
mm_bufmgr_create_from_buffer(struct pb_buffer *buffer, 
                             pb_size size, pb_size align2);


/**
 * Slab sub-allocator.
 */
struct pb_manager *
pb_slab_manager_create(struct pb_manager *provider,
                       pb_size bufSize,
                       pb_size slabSize,
                       const struct pb_desc *desc);

/**
 * Allow a range of buffer size, by aggregating multiple slabs sub-allocators 
 * with different bucket sizes.
 */
struct pb_manager *
pb_slab_range_manager_create(struct pb_manager *provider,
                             pb_size minBufSize,
                             pb_size maxBufSize,
                             pb_size slabSize,
                             const struct pb_desc *desc);


/** 
 * Time-based buffer cache.
 *
 * This manager keeps a cache of destroyed buffers during a time interval. 
 */
struct pb_manager *
pb_cache_manager_create(struct pb_manager *provider, 
                        unsigned usecs,
                        float size_factor,
                        unsigned bypass_usage);


struct pb_fence_ops;

/** 
 * Fenced buffer manager.
 *
 * This manager is just meant for convenience. It wraps the buffers returned
 * by another manager in fenced buffers, so that  
 * 
 * NOTE: the buffer manager that provides the buffers will be destroyed
 * at the same time.
 */
struct pb_manager *
fenced_bufmgr_create(struct pb_manager *provider,
                     struct pb_fence_ops *ops,
                     pb_size max_buffer_size,
                     pb_size max_cpu_total_size);


struct pb_manager *
pb_alt_manager_create(struct pb_manager *provider1, 
                      struct pb_manager *provider2);


/** 
 * Ondemand buffer manager.
 * 
 * Buffers are created in malloc'ed memory (fast and cached), and the constents
 * is transfered to a buffer from the provider (typically in slow uncached 
 * memory) when there is an attempt to validate the buffer.
 * 
 * Ideal for situations where one does not know before hand whether a given
 * buffer will effectively be used by the hardware or not. 
 */
struct pb_manager *
pb_ondemand_manager_create(struct pb_manager *provider); 


/** 
 * Debug buffer manager to detect buffer under- and overflows.
 *
 * Under/overflow sizes should be a multiple of the largest alignment
 */
struct pb_manager *
pb_debug_manager_create(struct pb_manager *provider,
                        pb_size underflow_size, pb_size overflow_size); 


#ifdef __cplusplus
}
#endif

#endif /*PB_BUFMGR_H_*/
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d166 1
a166 2
                        unsigned bypass_usage,
                        uint64_t maximum_cache_size);
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d166 2
a167 1
                        unsigned bypass_usage);
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d46 1
a46 1
 * \author Jose Fonseca <jrfonseca@@tungstengraphics.com>
d164 3
a166 1
                     	unsigned usecs); 
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d85 4
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d53 1
a53 2
#include "pipe/p_compiler.h"
#include "pipe/p_defines.h"
a61 1
struct pipe_buffer;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d53 2
a54 1
#include "pb_buffer.h"
d63 1
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a84 4

   boolean
   (*is_buffer_busy)( struct pb_manager *mgr,
                      struct pb_buffer *buf );
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d46 1
a46 1
 * \author Jose Fonseca <jfonseca@@vmware.com>
d164 1
a164 3
                        unsigned usecs,
                        float size_factor,
                        unsigned bypass_usage);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d166 1
a166 2
                        unsigned bypass_usage,
                        uint64_t maximum_cache_size);
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d166 2
a167 1
                        unsigned bypass_usage);
@


