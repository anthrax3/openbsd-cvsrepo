head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.27;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.13.59.40;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.18;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.44;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

/**
 * \file
 * Generic code for buffers.
 * 
 * Behind a pipe buffle handle there can be DMA buffers, client (or user) 
 * buffers, regular malloced buffers, etc. This file provides an abstract base 
 * buffer handle that allows the driver to cope with all those kinds of buffers 
 * in a more flexible way.
 * 
 * There is no obligation of a winsys driver to use this library. And a pipe
 * driver should be completly agnostic about it.
 * 
 * \author Jose Fonseca <jfonseca@@vmware.com>
 */

#ifndef PB_BUFFER_H_
#define PB_BUFFER_H_


#include "pipe/p_compiler.h"
#include "util/u_debug.h"
#include "util/u_inlines.h"
#include "pipe/p_defines.h"


#ifdef __cplusplus
extern "C" {
#endif


struct pb_vtbl;
struct pb_validate;
struct pipe_fence_handle;


#define PB_USAGE_CPU_READ  (1 << 0)
#define PB_USAGE_CPU_WRITE (1 << 1)
#define PB_USAGE_GPU_READ  (1 << 2)
#define PB_USAGE_GPU_WRITE (1 << 3)
#define PB_USAGE_UNSYNCHRONIZED (1 << 10)
#define PB_USAGE_DONTBLOCK (1 << 9)

#define PB_USAGE_CPU_READ_WRITE \
   ( PB_USAGE_CPU_READ | PB_USAGE_CPU_WRITE )
#define PB_USAGE_GPU_READ_WRITE \
   ( PB_USAGE_GPU_READ | PB_USAGE_GPU_WRITE )
#define PB_USAGE_WRITE \
   ( PB_USAGE_CPU_WRITE | PB_USAGE_GPU_WRITE )

/**
 * Buffer description.
 * 
 * Used when allocating the buffer.
 */
struct pb_desc
{
   unsigned alignment;
   unsigned usage;
};


/**
 * Size. Regular (32bit) unsigned for now.
 */
typedef unsigned pb_size;


/**
 * Base class for all pb_* buffers.
 */
struct pb_buffer 
{
   struct pipe_reference  reference;
   unsigned               size;
   unsigned               alignment;
   unsigned               usage;

   /**
    * Pointer to the virtual function table.
    *
    * Avoid accessing this table directly. Use the inline functions below 
    * instead to avoid mistakes. 
    */
   const struct pb_vtbl *vtbl;
};


/**
 * Virtual function table for the buffer storage operations.
 * 
 * Note that creation is not done through this table.
 */
struct pb_vtbl
{
   void (*destroy)( struct pb_buffer *buf );

   /** 
    * Map the entire data store of a buffer object into the client's address.
    * flags is bitmask of PB_USAGE_CPU_READ/WRITE. 
    */
   void *(*map)( struct pb_buffer *buf, 
                 unsigned flags, void *flush_ctx );
   
   void (*unmap)( struct pb_buffer *buf );

   enum pipe_error (*validate)( struct pb_buffer *buf, 
                                struct pb_validate *vl,
                                unsigned flags );

   void (*fence)( struct pb_buffer *buf, 
                  struct pipe_fence_handle *fence );

   /**
    * Get the base buffer and the offset.
    * 
    * A buffer can be subdivided in smaller buffers. This method should return
    * the underlaying buffer, and the relative offset.
    * 
    * Buffers without an underlaying base buffer should return themselves, with 
    * a zero offset.
    * 
    * Note that this will increase the reference count of the base buffer.
    */
   void (*get_base_buffer)( struct pb_buffer *buf,
                            struct pb_buffer **base_buf,
                            pb_size *offset );
   
};



/* Accessor functions for pb->vtbl:
 */
static INLINE void *
pb_map(struct pb_buffer *buf, 
       unsigned flags, void *flush_ctx)
{
   assert(buf);
   if(!buf)
      return NULL;
   assert(pipe_is_referenced(&buf->reference));
   return buf->vtbl->map(buf, flags, flush_ctx);
}


static INLINE void 
pb_unmap(struct pb_buffer *buf)
{
   assert(buf);
   if(!buf)
      return;
   assert(pipe_is_referenced(&buf->reference));
   buf->vtbl->unmap(buf);
}


static INLINE void
pb_get_base_buffer( struct pb_buffer *buf,
		    struct pb_buffer **base_buf,
		    pb_size *offset )
{
   assert(buf);
   if(!buf) {
      base_buf = NULL;
      offset = 0;
      return;
   }
   assert(pipe_is_referenced(&buf->reference));
   assert(buf->vtbl->get_base_buffer);
   buf->vtbl->get_base_buffer(buf, base_buf, offset);
   assert(*base_buf);
   assert(*offset < (*base_buf)->size);
}


static INLINE enum pipe_error 
pb_validate(struct pb_buffer *buf, struct pb_validate *vl, unsigned flags)
{
   assert(buf);
   if(!buf)
      return PIPE_ERROR;
   assert(buf->vtbl->validate);
   return buf->vtbl->validate(buf, vl, flags);
}


static INLINE void 
pb_fence(struct pb_buffer *buf, struct pipe_fence_handle *fence)
{
   assert(buf);
   if(!buf)
      return;
   assert(buf->vtbl->fence);
   buf->vtbl->fence(buf, fence);
}


static INLINE void 
pb_destroy(struct pb_buffer *buf)
{
   assert(buf);
   if(!buf)
      return;
   assert(!pipe_is_referenced(&buf->reference));
   buf->vtbl->destroy(buf);
}

static INLINE void
pb_reference(struct pb_buffer **dst,
             struct pb_buffer *src)
{
   struct pb_buffer *old = *dst;

   if (pipe_reference(&(*dst)->reference, &src->reference))
      pb_destroy( old );
   *dst = src;
}


/**
 * Utility function to check whether the provided alignment is consistent with
 * the requested or not.
 */
static INLINE boolean
pb_check_alignment(pb_size requested, pb_size provided)
{
   if(!requested)
      return TRUE;
   if(requested > provided)
      return FALSE;
   if(provided % requested != 0)
      return FALSE;
   return TRUE;
}


/**
 * Utility function to check whether the provided alignment is consistent with
 * the requested or not.
 */
static INLINE boolean
pb_check_usage(unsigned requested, unsigned provided)
{
   return (requested & provided) == requested ? TRUE : FALSE;
}


/**
 * Malloc-based buffer to store data that can't be used by the graphics 
 * hardware.
 */
struct pb_buffer *
pb_malloc_buffer_create(pb_size size, 
                        const struct pb_desc *desc);


#ifdef __cplusplus
}
#endif

#endif /*PB_BUFFER_H_*/
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d40 1
a40 1
 * \author Jose Fonseca <jrfonseca@@tungstengraphics.com>
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d100 4
a103 8
   /* This used to be a pipe_buffer struct:
    */
   struct {
      struct pipe_reference  reference;
      unsigned               size;
      unsigned               alignment;
      unsigned               usage;
   } base;
d168 1
a168 1
   assert(pipe_is_referenced(&buf->base.reference));
d179 1
a179 1
   assert(pipe_is_referenced(&buf->base.reference));
d195 1
a195 1
   assert(pipe_is_referenced(&buf->base.reference));
d199 1
a199 1
   assert(*offset < (*base_buf)->base.size);
d231 1
a231 1
   assert(!pipe_is_referenced(&buf->base.reference));
d241 1
a241 1
   if (pipe_reference(&(*dst)->base.reference, &src->base.reference))
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a50 1
#include "pipe/p_state.h"
d60 1
d63 14
d100 8
a107 1
   struct pipe_buffer base;
d130 1
a130 1
    * flags is bitmask of PIPE_BUFFER_FLAG_READ/WRITE. 
d133 1
a133 1
                 unsigned flags );
a161 17
static INLINE struct pipe_buffer *
pb_pipe_buffer( struct pb_buffer *pbuf )
{
   assert(pbuf);
   return &pbuf->base;
}


static INLINE struct pb_buffer *
pb_buffer( struct pipe_buffer *buf )
{
   assert(buf);
   /* Could add a magic cookie check on debug builds.
    */
   return (struct pb_buffer *)buf;
}

d167 1
a167 1
       unsigned flags)
d173 1
a173 1
   return buf->vtbl->map(buf, flags);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d51 1
a60 1
struct pipe_fence_handle;
a62 14
#define PB_USAGE_CPU_READ  (1 << 0)
#define PB_USAGE_CPU_WRITE (1 << 1)
#define PB_USAGE_GPU_READ  (1 << 2)
#define PB_USAGE_GPU_WRITE (1 << 3)
#define PB_USAGE_UNSYNCHRONIZED (1 << 10)
#define PB_USAGE_DONTBLOCK (1 << 9)

#define PB_USAGE_CPU_READ_WRITE \
   ( PB_USAGE_CPU_READ | PB_USAGE_CPU_WRITE )
#define PB_USAGE_GPU_READ_WRITE \
   ( PB_USAGE_GPU_READ | PB_USAGE_GPU_WRITE )
#define PB_USAGE_WRITE \
   ( PB_USAGE_CPU_WRITE | PB_USAGE_GPU_WRITE )

d86 1
a86 8
   /* This used to be a pipe_buffer struct:
    */
   struct {
      struct pipe_reference  reference;
      unsigned               size;
      unsigned               alignment;
      unsigned               usage;
   } base;
d109 1
a109 1
    * flags is bitmask of PB_USAGE_CPU_READ/WRITE. 
d112 1
a112 1
                 unsigned flags, void *flush_ctx );
d141 17
d163 1
a163 1
       unsigned flags, void *flush_ctx)
d169 1
a169 1
   return buf->vtbl->map(buf, flags, flush_ctx);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d100 8
a107 4
   struct pipe_reference  reference;
   unsigned               size;
   unsigned               alignment;
   unsigned               usage;
d172 1
a172 1
   assert(pipe_is_referenced(&buf->reference));
d183 1
a183 1
   assert(pipe_is_referenced(&buf->reference));
d199 1
a199 1
   assert(pipe_is_referenced(&buf->reference));
d203 1
a203 1
   assert(*offset < (*base_buf)->size);
d235 1
a235 1
   assert(!pipe_is_referenced(&buf->reference));
d245 1
a245 1
   if (pipe_reference(&(*dst)->reference, &src->reference))
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d40 1
a40 1
 * \author Jose Fonseca <jfonseca@@vmware.com>
@


