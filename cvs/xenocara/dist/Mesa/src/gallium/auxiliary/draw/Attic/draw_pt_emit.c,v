head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.13.59.31;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.43;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.42;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2008 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#include "util/u_memory.h"
#include "draw/draw_context.h"
#include "draw/draw_private.h"
#include "draw/draw_vbuf.h"
#include "draw/draw_vertex.h"
#include "draw/draw_pt.h"
#include "translate/translate.h"
#include "translate/translate_cache.h"
#include "util/u_prim.h"

struct pt_emit {
   struct draw_context *draw;

   struct translate *translate;

   struct translate_cache *cache;
   unsigned prim;

   const struct vertex_info *vinfo;
};


void
draw_pt_emit_prepare(struct pt_emit *emit,
                     unsigned prim,
                     unsigned *max_vertices)
{
   struct draw_context *draw = emit->draw;
   const struct vertex_info *vinfo;
   unsigned dst_offset;
   struct translate_key hw_key;
   unsigned i;

   /* XXX: need to flush to get prim_vbuf.c to release its allocation??
    */
   draw_do_flush( draw, DRAW_FLUSH_BACKEND );

   /* XXX: may need to defensively reset this later on as clipping can
    * clobber this state in the render backend.
    */
   emit->prim = prim;

   draw->render->set_primitive(draw->render, emit->prim);

   /* Must do this after set_primitive() above:
    */
   emit->vinfo = vinfo = draw->render->get_vertex_info(draw->render);

   /* Translate from pipeline vertices to hw vertices.
    */
   dst_offset = 0;
   for (i = 0; i < vinfo->num_attribs; i++) {
      unsigned emit_sz = 0;
      unsigned src_buffer = 0;
      unsigned output_format;
      unsigned src_offset = (vinfo->attrib[i].src_index * 4 * sizeof(float) );

      output_format = draw_translate_vinfo_format(vinfo->attrib[i].emit);
      emit_sz = draw_translate_vinfo_size(vinfo->attrib[i].emit);

      /* doesn't handle EMIT_OMIT */
      assert(emit_sz != 0);

      if (vinfo->attrib[i].emit == EMIT_1F_PSIZE) {
	 src_buffer = 1;
	 src_offset = 0;
      }

      hw_key.element[i].type = TRANSLATE_ELEMENT_NORMAL;
      hw_key.element[i].input_format = PIPE_FORMAT_R32G32B32A32_FLOAT;
      hw_key.element[i].input_buffer = src_buffer;
      hw_key.element[i].input_offset = src_offset;
      hw_key.element[i].instance_divisor = 0;
      hw_key.element[i].output_format = output_format;
      hw_key.element[i].output_offset = dst_offset;

      dst_offset += emit_sz;
   }

   hw_key.nr_elements = vinfo->num_attribs;
   hw_key.output_stride = vinfo->size * 4;

   if (!emit->translate ||
       translate_key_compare(&emit->translate->key, &hw_key) != 0) {
      translate_key_sanitize(&hw_key);
      emit->translate = translate_cache_find(emit->cache, &hw_key);
   }

   *max_vertices = (draw->render->max_vertex_buffer_bytes /
                    (vinfo->size * 4));
}


void
draw_pt_emit(struct pt_emit *emit,
             const struct draw_vertex_info *vert_info,
             const struct draw_prim_info *prim_info)
{
   const float (*vertex_data)[4] = (const float (*)[4])vert_info->verts->data;
   unsigned vertex_count = vert_info->count;
   unsigned stride = vert_info->stride;
   const ushort *elts = prim_info->elts;
   struct draw_context *draw = emit->draw;
   struct translate *translate = emit->translate;
   struct vbuf_render *render = draw->render;
   unsigned start, i;
   void *hw_verts;

   /* XXX: need to flush to get prim_vbuf.c to release its allocation??
    */
   draw_do_flush( draw, DRAW_FLUSH_BACKEND );

   if (vertex_count == 0)
      return;

   /* XXX: and work out some way to coordinate the render primitive
    * between vbuf.c and here...
    */
   draw->render->set_primitive(draw->render, emit->prim);

   render->allocate_vertices(render,
                             (ushort)translate->key.output_stride,
                             (ushort)vertex_count);

   hw_verts = render->map_vertices( render );
   if (!hw_verts) {
      debug_warn_once("map of vertex buffer failed (out of memory?)");
      return;
   }

   translate->set_buffer(translate,
			 0,
			 vertex_data,
			 stride,
			 ~0);

   translate->set_buffer(translate,
			 1,
			 &draw->rasterizer->point_size,
			 0,
			 ~0);

   /* fetch/translate vertex attribs to fill hw_verts[] */
   translate->run(translate,
		  0,
		  vertex_count,
                  draw->start_instance,
                  draw->instance_id,
		  hw_verts );

   render->unmap_vertices(render, 0, vertex_count - 1);

   for (start = i = 0;
        i < prim_info->primitive_count;
        start += prim_info->primitive_lengths[i], i++)
   {
      render->draw_elements(render,
                            elts + start,
                            prim_info->primitive_lengths[i]);
   }

   render->release_vertices(render);
}


void
draw_pt_emit_linear(struct pt_emit *emit,
                    const struct draw_vertex_info *vert_info,
                    const struct draw_prim_info *prim_info)
{
   const float (*vertex_data)[4] = (const float (*)[4])vert_info->verts->data;
   unsigned stride = vert_info->stride;
   unsigned count = vert_info->count;
   struct draw_context *draw = emit->draw;
   struct translate *translate = emit->translate;
   struct vbuf_render *render = draw->render;
   void *hw_verts;
   unsigned start, i;

#if 0
   debug_printf("Linear emit\n");
#endif
   /* XXX: need to flush to get prim_vbuf.c to release its allocation??
    */
   draw_do_flush( draw, DRAW_FLUSH_BACKEND );

   /* XXX: and work out some way to coordinate the render primitive
    * between vbuf.c and here...
    */
   draw->render->set_primitive(draw->render, emit->prim);

   if (!render->allocate_vertices(render,
                                  (ushort)translate->key.output_stride,
                                  (ushort)count))
      goto fail;

   hw_verts = render->map_vertices( render );
   if (!hw_verts)
      goto fail;

   translate->set_buffer(translate, 0,
			 vertex_data, stride, count - 1);

   translate->set_buffer(translate, 1,
			 &draw->rasterizer->point_size,
			 0, ~0);

   translate->run(translate,
                  0,
                  count,
                  draw->start_instance,
                  draw->instance_id,
                  hw_verts);

   if (0) {
      unsigned i;
      for (i = 0; i < count; i++) {
         debug_printf("\n\n%s vertex %d:\n", __FUNCTION__, i);
         draw_dump_emitted_vertex( emit->vinfo,
                                   (const uint8_t *)hw_verts +
                                   translate->key.output_stride * i );
      }
   }

   render->unmap_vertices( render, 0, count - 1 );

   for (start = i = 0;
        i < prim_info->primitive_count;
        start += prim_info->primitive_lengths[i], i++)
   {
      render->draw_arrays(render,
                          start,
                          prim_info->primitive_lengths[i]);
   }
   
   render->release_vertices(render);

   return;

fail:
   debug_warn_once("allocate or map of vertex buffer failed (out of memory?)");
   return;
}


struct pt_emit *
draw_pt_emit_create(struct draw_context *draw)
{
   struct pt_emit *emit = CALLOC_STRUCT(pt_emit);
   if (!emit)
      return NULL;

   emit->draw = draw;
   emit->cache = translate_cache_create();
   if (!emit->cache) {
      FREE(emit);
      return NULL;
   }

   return emit;
}


void
draw_pt_emit_destroy(struct pt_emit *emit)
{
   if (emit->cache)
      translate_cache_destroy(emit->cache);

   FREE(emit);
}
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2008 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d36 1
d49 5
a53 3
void draw_pt_emit_prepare( struct pt_emit *emit,
			   unsigned prim,
                           unsigned *max_vertices )
d60 2
a61 3
   boolean ok;
   
   /* XXX: need to flush to get prim_vbuf.c to release its allocation?? 
a64 1

d70 1
a70 5
   ok = draw->render->set_primitive(draw->render, emit->prim);
   if (!ok) {
      assert(0);
      return;
   }
a75 1

d111 1
a111 2
       translate_key_compare(&emit->translate->key, &hw_key) != 0)
   {
d116 1
a116 1
   *max_vertices = (draw->render->max_vertex_buffer_bytes / 
d121 4
a124 3
void draw_pt_emit( struct pt_emit *emit,
                         const struct draw_vertex_info *vert_info,
                         const struct draw_prim_info *prim_info)
d136 1
a136 1
   /* XXX: need to flush to get prim_vbuf.c to release its allocation?? 
d146 1
a146 4
   if (!draw->render->set_primitive(draw->render, emit->prim)) {
      assert(0);
      return;
   }
d154 1
a154 1
      assert(0);
d158 2
a159 2
   translate->set_buffer(translate, 
			 0, 
d164 2
a165 2
   translate->set_buffer(translate, 
			 1, 
d171 8
a178 9
   translate->run( translate,
		   0, 
		   vertex_count,
                   draw->instance_id,
		   hw_verts );

   render->unmap_vertices( render, 
                           0, 
                           vertex_count - 1 );
d193 4
a196 3
void draw_pt_emit_linear(struct pt_emit *emit,
                         const struct draw_vertex_info *vert_info,
                         const struct draw_prim_info *prim_info)
d210 1
a210 1
   /* XXX: need to flush to get prim_vbuf.c to release its allocation?? 
d217 1
a217 2
   if (!draw->render->set_primitive(draw->render, emit->prim)) 
      goto fail;
d238 1
d246 2
a247 2
         draw_dump_emitted_vertex( emit->vinfo, 
                                   (const uint8_t *)hw_verts + 
d262 1
a262 1

d268 1
a268 1
   assert(0);
d272 3
a274 1
struct pt_emit *draw_pt_emit_create( struct draw_context *draw )
d290 3
a292 1
void draw_pt_emit_destroy( struct pt_emit *emit )
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d89 2
d92 4
a95 21
         
      switch (vinfo->attrib[i].emit) {
      case EMIT_4F:
	 output_format = PIPE_FORMAT_R32G32B32A32_FLOAT;
	 emit_sz = 4 * sizeof(float);
	 break;
      case EMIT_3F:
	 output_format = PIPE_FORMAT_R32G32B32_FLOAT;
	 emit_sz = 3 * sizeof(float);
	 break;
      case EMIT_2F:
	 output_format = PIPE_FORMAT_R32G32_FLOAT;
	 emit_sz = 2 * sizeof(float);
	 break;
      case EMIT_1F:
	 output_format = PIPE_FORMAT_R32_FLOAT;
	 emit_sz = 1 * sizeof(float);
	 break;
      case EMIT_1F_PSIZE:
	 output_format = PIPE_FORMAT_R32_FLOAT;
	 emit_sz = 1 * sizeof(float);
a97 10
	 break;
      case EMIT_4UB:
	 output_format = PIPE_FORMAT_A8R8G8B8_UNORM;
	 emit_sz = 4 * sizeof(ubyte);
         break;
      default:
	 assert(0);
	 output_format = PIPE_FORMAT_NONE;
	 emit_sz = 0;
	 break;
a122 3

   /* even number */
   *max_vertices = *max_vertices & ~1;
d127 2
a128 5
		   const float (*vertex_data)[4],
		   unsigned vertex_count,
		   unsigned stride,
		   const ushort *elts,
		   unsigned count )
d130 4
d137 1
a146 5
   if (vertex_count >= UNDEFINED_VERTEX_ID) {
      assert(0);
      return;
   }

d168 2
a169 1
			 stride );
d174 2
a175 1
			 0);
d177 1
d188 8
a195 3
   render->draw(render,
		elts,
		count);
d202 2
a203 3
                         const float (*vertex_data)[4],
                         unsigned stride,
                         unsigned count)
d205 3
d212 1
a220 3
   if (count >= UNDEFINED_VERTEX_ID)
      goto fail;

d237 1
a237 1
			 vertex_data, stride);
d241 1
a241 1
			 0);
d261 8
a268 1
   render->draw_arrays(render, 0, count);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a88 2
      output_format = draw_translate_vinfo_format(vinfo->attrib[i].emit);
      emit_sz = draw_translate_vinfo_size(vinfo->attrib[i].emit);
d90 21
a110 4
      /* doesn't handle EMIT_OMIT */
      assert(emit_sz != 0);

      if (vinfo->attrib[i].emit == EMIT_1F_PSIZE) {
d113 10
d148 3
d155 5
a159 2
                         const struct draw_vertex_info *vert_info,
                         const struct draw_prim_info *prim_info)
a160 4
   const float (*vertex_data)[4] = (const float (*)[4])vert_info->verts->data;
   unsigned vertex_count = vert_info->count;
   unsigned stride = vert_info->stride;
   const ushort *elts = prim_info->elts;
a163 1
   unsigned start, i;
d173 5
d199 1
a199 2
			 stride,
			 ~0);
d204 1
a204 2
			 0,
			 ~0);
a205 1
   /* fetch/translate vertex attribs to fill hw_verts[] */
d216 3
a218 8
   for (start = i = 0;
        i < prim_info->primitive_count;
        start += prim_info->primitive_lengths[i], i++)
   {
      render->draw_elements(render,
                            elts + start,
                            prim_info->primitive_lengths[i]);
   }
d225 3
a227 2
                         const struct draw_vertex_info *vert_info,
                         const struct draw_prim_info *prim_info)
a228 3
   const float (*vertex_data)[4] = (const float (*)[4])vert_info->verts->data;
   unsigned stride = vert_info->stride;
   unsigned count = vert_info->count;
a232 1
   unsigned start, i;
d241 3
d260 1
a260 1
			 vertex_data, stride, count - 1);
d264 1
a264 1
			 0, ~0);
d284 1
a284 8
   for (start = i = 0;
        i < prim_info->primitive_count;
        start += prim_info->primitive_lengths[i], i++)
   {
      render->draw_arrays(render,
                          start,
                          prim_info->primitive_lengths[i]);
   }
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a35 1
#include "util/u_prim.h"
d48 3
a50 5

void
draw_pt_emit_prepare(struct pt_emit *emit,
                     unsigned prim,
                     unsigned *max_vertices)
d57 3
a59 2

   /* XXX: need to flush to get prim_vbuf.c to release its allocation??
d63 1
d69 5
a73 1
   draw->render->set_primitive(draw->render, emit->prim);
d79 1
d115 2
a116 1
       translate_key_compare(&emit->translate->key, &hw_key) != 0) {
d121 1
a121 1
   *max_vertices = (draw->render->max_vertex_buffer_bytes /
d126 3
a128 4
void
draw_pt_emit(struct pt_emit *emit,
             const struct draw_vertex_info *vert_info,
             const struct draw_prim_info *prim_info)
d140 1
a140 1
   /* XXX: need to flush to get prim_vbuf.c to release its allocation??
d150 4
a153 1
   draw->render->set_primitive(draw->render, emit->prim);
d161 1
a161 1
      debug_warn_once("map of vertex buffer failed (out of memory?)");
d165 2
a166 2
   translate->set_buffer(translate,
			 0,
d171 2
a172 2
   translate->set_buffer(translate,
			 1,
d178 9
a186 8
   translate->run(translate,
		  0,
		  vertex_count,
                  draw->start_instance,
                  draw->instance_id,
		  hw_verts );

   render->unmap_vertices(render, 0, vertex_count - 1);
d201 3
a203 4
void
draw_pt_emit_linear(struct pt_emit *emit,
                    const struct draw_vertex_info *vert_info,
                    const struct draw_prim_info *prim_info)
d217 1
a217 1
   /* XXX: need to flush to get prim_vbuf.c to release its allocation??
d224 2
a225 1
   draw->render->set_primitive(draw->render, emit->prim);
a245 1
                  draw->start_instance,
d253 2
a254 2
         draw_dump_emitted_vertex( emit->vinfo,
                                   (const uint8_t *)hw_verts +
d269 1
a269 1
   
d275 1
a275 1
   debug_warn_once("allocate or map of vertex buffer failed (out of memory?)");
d279 1
a279 3

struct pt_emit *
draw_pt_emit_create(struct draw_context *draw)
d295 1
a295 3

void
draw_pt_emit_destroy(struct pt_emit *emit)
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2008 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


