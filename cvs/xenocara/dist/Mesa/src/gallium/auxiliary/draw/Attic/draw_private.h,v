head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.31;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.40;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.41;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/**
 * Private data structures, etc for the draw module.
 */


/**
 * Authors:
 * Keith Whitwell <keithw@@vmware.com>
 * Brian Paul
 */


#ifndef DRAW_PRIVATE_H
#define DRAW_PRIVATE_H


#include "pipe/p_state.h"
#include "pipe/p_defines.h"

#include "tgsi/tgsi_scan.h"

#ifdef HAVE_LLVM
struct gallivm_state;
#endif


/** Sum of frustum planes and user-defined planes */
#define DRAW_TOTAL_CLIP_PLANES (6 + PIPE_MAX_CLIP_PLANES)

/**
 * The largest possible index of a vertex that can be fetched.
 */
#define DRAW_MAX_FETCH_IDX 0xffffffff

struct pipe_context;
struct draw_vertex_shader;
struct draw_context;
struct draw_stage;
struct vbuf_render;
struct tgsi_exec_machine;
struct tgsi_sampler;
struct draw_pt_front_end;
struct draw_assembler;
struct draw_llvm;


/**
 * Represents the mapped vertex buffer.
 */
struct draw_vertex_buffer {
   const void *map;
   uint32_t size;
};

/**
 * Basic vertex info.
 * Carry some useful information around with the vertices in the prim pipe.  
 */
struct vertex_header {
   unsigned clipmask:DRAW_TOTAL_CLIP_PLANES;
   unsigned edgeflag:1;
   unsigned have_clipdist:1;
   unsigned vertex_id:16;

   float clip[4];
   float pre_clip_pos[4];

   /* This will probably become float (*data)[4] soon:
    */
   float data[][4];
};

/* NOTE: It should match vertex_id size above */
#define UNDEFINED_VERTEX_ID 0xffff


/* maximum number of shader variants we can cache */
#define DRAW_MAX_SHADER_VARIANTS 128

/**
 * Private context for the drawing module.
 */
struct draw_context
{
   struct pipe_context *pipe;

   /** Drawing/primitive pipeline stages */
   struct {
      struct draw_stage *first;  /**< one of the following */

      struct draw_stage *validate; 

      /* stages (in logical order) */
      struct draw_stage *flatshade;
      struct draw_stage *clip;
      struct draw_stage *cull;
      struct draw_stage *twoside;
      struct draw_stage *offset;
      struct draw_stage *unfilled;
      struct draw_stage *stipple;
      struct draw_stage *aapoint;
      struct draw_stage *aaline;
      struct draw_stage *pstipple;
      struct draw_stage *wide_line;
      struct draw_stage *wide_point;
      struct draw_stage *rasterize;

      float wide_point_threshold; /**< convert pnts to tris if larger than this */
      float wide_line_threshold;  /**< convert lines to tris if wider than this */
      boolean wide_point_sprites; /**< convert points to tris for sprite mode */
      boolean line_stipple;       /**< do line stipple? */
      boolean point_sprite;       /**< convert points to quads for sprites? */

      /* Temporary storage while the pipeline is being run:
       */
      char *verts;
      unsigned vertex_stride;
      unsigned vertex_count;
   } pipeline;


   struct vbuf_render *render;

   /* Support prototype passthrough path:
    */
   struct {
      /* Current active frontend */
      struct draw_pt_front_end *frontend;
      unsigned prim;
      unsigned opt;     /**< bitmask of PT_x flags */
      unsigned eltSize; /* saved eltSize for flushing */

      boolean rebind_parameters;

      struct {
         struct draw_pt_middle_end *fetch_emit;
         struct draw_pt_middle_end *fetch_shade_emit;
         struct draw_pt_middle_end *general;
         struct draw_pt_middle_end *llvm;
      } middle;

      struct {
         struct draw_pt_front_end *vsplit;
      } front;

      struct pipe_vertex_buffer vertex_buffer[PIPE_MAX_ATTRIBS];
      unsigned nr_vertex_buffers;

      /*
       * This is the largest legal index value for the current set of
       * bound vertex buffers.  Regardless of any other consideration,
       * all vertex lookups need to be clamped to 0..max_index to
       * prevent out-of-bound access.
       */
      unsigned max_index;

      struct pipe_vertex_element vertex_element[PIPE_MAX_ATTRIBS];
      unsigned nr_vertex_elements;

      /* user-space vertex data, buffers */
      struct {
         /** vertex element/index buffer (ex: glDrawElements) */
         const void *elts;
         /** bytes per index (0, 1, 2 or 4) */
         unsigned eltSizeIB;
         unsigned eltSize;
         unsigned eltMax;
         int eltBias;         
         unsigned min_index;
         unsigned max_index;
         
         /** vertex arrays */
         struct draw_vertex_buffer vbuffer[PIPE_MAX_ATTRIBS];
         
         /** constant buffers (for vertex/geometry shader) */
         const void *vs_constants[PIPE_MAX_CONSTANT_BUFFERS];
         unsigned vs_constants_size[PIPE_MAX_CONSTANT_BUFFERS];
         const void *gs_constants[PIPE_MAX_CONSTANT_BUFFERS];
         unsigned gs_constants_size[PIPE_MAX_CONSTANT_BUFFERS];
         
         /* pointer to planes */
         float (*planes)[DRAW_TOTAL_CLIP_PLANES][4]; 
      } user;

      boolean test_fse;         /* enable FSE even though its not correct (eg for softpipe) */
      boolean no_fse;           /* disable FSE even when it is correct */
   } pt;

   struct {
      boolean bypass_clip_xy;
      boolean bypass_clip_z;
      boolean guard_band_xy;
      boolean bypass_clip_points;
   } driver;

   boolean quads_always_flatshade_last;

   boolean flushing;         /**< debugging/sanity */
   boolean suspend_flushing; /**< internally set */

   /* Flags set if API requires clipping in these planes and the
    * driver doesn't indicate that it can do it for us.
    */
   boolean clip_xy;
   boolean clip_z;
   boolean clip_user;
   boolean guard_band_xy;
   boolean guard_band_points_xy;

   boolean force_passthrough; /**< never clip or shade */

   boolean dump_vs;

   /** Depth format and bias related settings. */
   boolean floating_point_depth;
   double mrd;  /**< minimum resolvable depth value, for polygon offset */

   /** Current rasterizer state given to us by the driver */
   const struct pipe_rasterizer_state *rasterizer;
   /** Driver CSO handle for the current rasterizer state */
   void *rast_handle;

   /** Rasterizer CSOs without culling/stipple/etc */
   void *rasterizer_no_cull[2][2];

   struct pipe_viewport_state viewports[PIPE_MAX_VIEWPORTS];
   boolean identity_viewport;

   /** Vertex shader state */
   struct {
      struct draw_vertex_shader *vertex_shader;
      uint num_vs_outputs;  /**< convenience, from vertex_shader */
      uint position_output;
      uint edgeflag_output;
      uint clipvertex_output;
      uint clipdistance_output[2];

      /** Fields for TGSI interpreter / execution */
      struct {
         struct tgsi_exec_machine *machine;

         struct tgsi_sampler *sampler;
      } tgsi;

      struct translate *fetch;
      struct translate_cache *fetch_cache;
      struct translate *emit;
      struct translate_cache *emit_cache;
   } vs;

   /** Geometry shader state */
   struct {
      struct draw_geometry_shader *geometry_shader;
      uint num_gs_outputs;  /**< convenience, from geometry_shader */
      uint position_output;

      /** Fields for TGSI interpreter / execution */
      struct {
         struct tgsi_exec_machine *machine;

         struct tgsi_sampler *sampler;
      } tgsi;

   } gs;

   /** Fragment shader state */
   struct {
      struct draw_fragment_shader *fragment_shader;
   } fs;

   /** Stream output (vertex feedback) state */
   struct {
      struct draw_so_target *targets[PIPE_MAX_SO_BUFFERS];
      uint num_targets;
   } so;

   /* Clip derived state:
    */
   float plane[DRAW_TOTAL_CLIP_PLANES][4];

   /* If a prim stage introduces new vertex attributes, they'll be stored here
    */
   struct {
      uint num;
      uint semantic_name[10];
      uint semantic_index[10];
      uint slot[10];
   } extra_shader_outputs;

   unsigned instance_id;
   unsigned start_instance;
   unsigned start_index;

   struct draw_llvm *llvm;

   /** Texture sampler and sampler view state.
    * Note that we have arrays indexed by shader type.  At this time
    * we only handle vertex and geometry shaders in the draw module, but
    * there may be more in the future (ex: hull and tessellation).
    */
   struct pipe_sampler_view *sampler_views[PIPE_SHADER_TYPES][PIPE_MAX_SHADER_SAMPLER_VIEWS];
   unsigned num_sampler_views[PIPE_SHADER_TYPES];
   const struct pipe_sampler_state *samplers[PIPE_SHADER_TYPES][PIPE_MAX_SAMPLERS];
   unsigned num_samplers[PIPE_SHADER_TYPES];

   struct pipe_query_data_pipeline_statistics statistics;
   boolean collect_statistics;

   struct draw_assembler *ia;

   void *driver_private;
};


struct draw_fetch_info {
   boolean linear;
   unsigned start;
   const unsigned *elts;
   unsigned count;
};

struct draw_vertex_info {
   struct vertex_header *verts;
   unsigned vertex_size;
   unsigned stride;
   unsigned count;
};

/* these flags are set if the primitive is a segment of a larger one */
#define DRAW_SPLIT_BEFORE 0x1
#define DRAW_SPLIT_AFTER  0x2

struct draw_prim_info {
   boolean linear;
   unsigned start;

   const ushort *elts;
   unsigned count;

   unsigned prim;
   unsigned flags;
   unsigned *primitive_lengths;
   unsigned primitive_count;
};


/*******************************************************************************
 * Draw common initialization code
 */
boolean draw_init(struct draw_context *draw);
void draw_new_instance(struct draw_context *draw);

/*******************************************************************************
 * Vertex shader code:
 */
boolean draw_vs_init( struct draw_context *draw );
void draw_vs_destroy( struct draw_context *draw );


/*******************************************************************************
 * Geometry shading code:
 */
boolean draw_gs_init( struct draw_context *draw );


void draw_gs_destroy( struct draw_context *draw );

/*******************************************************************************
 * Common shading code:
 */
uint draw_current_shader_outputs(const struct draw_context *draw);
uint draw_current_shader_position_output(const struct draw_context *draw);
uint draw_current_shader_viewport_index_output(const struct draw_context *draw);
uint draw_current_shader_clipvertex_output(const struct draw_context *draw);
uint draw_current_shader_clipdistance_output(const struct draw_context *draw, int index);
uint draw_current_shader_num_written_clipdistances(const struct draw_context *draw);
uint draw_current_shader_culldistance_output(const struct draw_context *draw, int index);
uint draw_current_shader_num_written_culldistances(const struct draw_context *draw);
int draw_alloc_extra_vertex_attrib(struct draw_context *draw,
                                   uint semantic_name, uint semantic_index);
void draw_remove_extra_vertex_attribs(struct draw_context *draw);
boolean draw_current_shader_uses_viewport_index(
   const struct draw_context *draw);


/*******************************************************************************
 * Vertex processing (was passthrough) code:
 */
boolean draw_pt_init( struct draw_context *draw );
void draw_pt_destroy( struct draw_context *draw );
void draw_pt_reset_vertex_ids( struct draw_context *draw );
void draw_pt_flush( struct draw_context *draw, unsigned flags );


/*******************************************************************************
 * Primitive processing (pipeline) code: 
 */

boolean draw_pipeline_init( struct draw_context *draw );
void draw_pipeline_destroy( struct draw_context *draw );





/*
 * These flags are used by the pipeline when unfilled and/or line stipple modes
 * are operational.
 */
#define DRAW_PIPE_EDGE_FLAG_0   0x1
#define DRAW_PIPE_EDGE_FLAG_1   0x2
#define DRAW_PIPE_EDGE_FLAG_2   0x4
#define DRAW_PIPE_EDGE_FLAG_ALL 0x7
#define DRAW_PIPE_RESET_STIPPLE 0x8

void draw_pipeline_run( struct draw_context *draw,
                        const struct draw_vertex_info *vert,
                        const struct draw_prim_info *prim);

void draw_pipeline_run_linear( struct draw_context *draw,
                               const struct draw_vertex_info *vert,
                               const struct draw_prim_info *prim);




void draw_pipeline_flush( struct draw_context *draw, 
                          unsigned flags );



/*******************************************************************************
 * Flushing 
 */

#define DRAW_FLUSH_PARAMETER_CHANGE 0x1  /**< Constants, viewport, etc */
#define DRAW_FLUSH_STATE_CHANGE     0x2  /**< Other/heavy state changes */
#define DRAW_FLUSH_BACKEND          0x4  /**< Flush the output buffer */


void draw_do_flush( struct draw_context *draw, unsigned flags );



void *
draw_get_rasterizer_no_cull( struct draw_context *draw,
                             boolean scissor,
                             boolean flatshade );

void
draw_stats_clipper_primitives(struct draw_context *draw,
                              const struct draw_prim_info *prim_info);

/** 
 * Return index i from the index buffer.
 * If the index buffer would overflow we return the
 * maximum possible index.
 */
#define DRAW_GET_IDX(_elts, _i)                   \
   (((_i) >= draw->pt.user.eltMax) ? DRAW_MAX_FETCH_IDX : (_elts)[_i])

/**
 * Return index of the given viewport clamping it
 * to be between 0 <= and < PIPE_MAX_VIEWPORTS
 */
static INLINE unsigned
draw_clamp_viewport_idx(int idx)
{
   return ((PIPE_MAX_VIEWPORTS > idx && idx >= 0) ? idx : 0);
}

/**
 * Adds two unsigned integers and if the addition
 * overflows then it returns the value from
 * from the overflow_value variable.
 */
static INLINE unsigned
draw_overflow_uadd(unsigned a, unsigned b,
                   unsigned overflow_value)
{
   unsigned res = a + b;
   if (res < a || res < b) {
      res = overflow_value;
   }
   return res;
}

#endif /* DRAW_PRIVATE_H */
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d35 1
a35 1
 * Keith Whitwell <keith@@tungstengraphics.com>
a49 1
struct draw_llvm;
d70 2
d220 1
d235 1
d241 2
d319 1
a320 1
#ifdef HAVE_LLVM
a321 1
#endif
d336 2
d496 1
a496 1
   return ((PIPE_MAX_VIEWPORTS > idx || idx < 0) ? idx : 0);
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a49 1
#include <llvm-c/ExecutionEngine.h>
d51 1
d55 8
d70 1
d74 8
d86 1
a86 1
   unsigned clipmask:12;
d88 1
a88 1
   unsigned pad:3;
d92 1
d104 1
a104 1
#define DRAW_MAX_SHADER_VARIANTS 1024
d153 8
a185 2
      struct pipe_index_buffer index_buffer;

d191 1
d193 2
a194 1
         int eltBias;
d199 1
a199 1
         const void *vbuffer[PIPE_MAX_ATTRIBS];
d208 1
a208 1
         float (*planes)[12][4]; 
d218 1
d221 2
d232 1
d248 1
a248 1
   struct pipe_viewport_state viewport;
d257 2
d260 3
a262 15
      /** TGSI program interpreter runtime state */
      struct tgsi_exec_machine *machine;

      uint num_samplers;
      struct tgsi_sampler **samplers;

      /* Here's another one:
       */
      struct aos_machine *aos_machine; 


      const void *aligned_constants[PIPE_MAX_CONSTANT_BUFFERS];

      const void *aligned_constant_storage[PIPE_MAX_CONSTANT_BUFFERS];
      unsigned const_storage_size[PIPE_MAX_CONSTANT_BUFFERS];
d264 2
d279 6
a284 2
      /** TGSI program interpreter runtime state */
      struct tgsi_exec_machine *machine;
a285 2
      uint num_samplers;
      struct tgsi_sampler **samplers;
d295 2
a296 3
      struct pipe_stream_output_state state;
      void *buffers[PIPE_MAX_SO_BUFFERS];
      uint num_buffers;
d301 1
a301 3
   float plane[12][4];
   unsigned nr_planes;
   boolean depth_clamp;
a311 2
   unsigned reduced_prim;

d313 1
a316 1
   struct gallivm_state *own_gallivm;
d319 12
a330 4
   struct pipe_sampler_view *sampler_views[PIPE_MAX_VERTEX_SAMPLERS];
   unsigned num_sampler_views;
   const struct pipe_sampler_state *samplers[PIPE_MAX_VERTEX_SAMPLERS];
   unsigned num_samplers;
d372 1
a379 10
void draw_vs_set_viewport( struct draw_context *, 
                           const struct pipe_viewport_state * );

void
draw_vs_set_constants(struct draw_context *,
                      unsigned slot,
                      const void *constants,
                      unsigned size);


a385 5
void
draw_gs_set_constants(struct draw_context *,
                      unsigned slot,
                      const void *constants,
                      unsigned size);
d394 6
a399 1

d403 2
d413 1
d457 3
a459 2
#define DRAW_FLUSH_STATE_CHANGE              0x8
#define DRAW_FLUSH_BACKEND                   0x10
d471 37
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d149 8
d297 1
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d49 5
d85 3
d118 1
d139 1
d143 1
a143 2
         struct draw_pt_front_end *vcache;
         struct draw_pt_front_end *varray;
d152 2
d160 1
d167 1
a167 1
         /** constant buffer (for vertex/geometry shader) */
d169 1
d171 4
d182 2
a183 2
      boolean bypass_clipping;
      boolean bypass_vs;
d188 7
a194 1
   boolean bypass_clipping;  /**< set if either api or driver bypass_clipping true */
d213 1
d243 1
d256 12
d272 1
d277 4
a280 3
      uint semantic_name;
      uint semantic_index;
      int slot;
d287 9
d300 37
d373 5
d397 3
a399 7
/* We use the top few bits in the elts[] parameter to convey a little
 * API information.  This limits the number of vertices we can address
 * to only 4096 -- if that becomes a problem, we can switch to 32-bit
 * draw indices.
 *
 * These flags expected at first vertex of lines & triangles when
 * unfilled and/or line stipple modes are operational.
d401 5
a405 7
#define DRAW_PIPE_MAX_VERTICES  (0x1<<12)
#define DRAW_PIPE_EDGE_FLAG_0   (0x1<<12)
#define DRAW_PIPE_EDGE_FLAG_1   (0x2<<12)
#define DRAW_PIPE_EDGE_FLAG_2   (0x4<<12)
#define DRAW_PIPE_EDGE_FLAG_ALL (0x7<<12)
#define DRAW_PIPE_RESET_STIPPLE (0x8<<12)
#define DRAW_PIPE_FLAG_MASK     (0xf<<12)
d408 2
a409 6
                        unsigned prim,
                        struct vertex_header *vertices,
                        unsigned vertex_count,
                        unsigned stride,
                        const ushort *elts,
                        unsigned count );
d412 3
a414 4
                               unsigned prim,
                               struct vertex_header *vertices,
                               unsigned count,
                               unsigned stride );
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a48 5
#ifdef HAVE_LLVM
#include <llvm-c/ExecutionEngine.h>
struct draw_llvm;
#endif

a79 3
/* maximum number of shader variants we can cache */
#define DRAW_MAX_SHADER_VARIANTS 1024

a109 1
      boolean wide_point_sprites; /**< convert points to tris for sprite mode */
a129 1
         struct draw_pt_middle_end *llvm;
d133 2
a134 1
         struct draw_pt_front_end *vsplit;
a142 2
      struct pipe_index_buffer index_buffer;

a148 1
         int eltBias;
d155 1
a155 1
         /** constant buffers (for vertex/geometry shader) */
a156 1
         unsigned vs_constants_size[PIPE_MAX_CONSTANT_BUFFERS];
a157 4
         unsigned gs_constants_size[PIPE_MAX_CONSTANT_BUFFERS];
         
         /* pointer to planes */
         float (*planes)[12][4]; 
d165 2
a166 2
      boolean bypass_clip_xy;
      boolean bypass_clip_z;
d171 1
a171 7

   /* Flags set if API requires clipping in these planes and the
    * driver doesn't indicate that it can do it for us.
    */
   boolean clip_xy;
   boolean clip_z;
   boolean clip_user;
a189 1
   /** Vertex shader state */
a218 1
   /** Geometry shader state */
a230 12
   /** Fragment shader state */
   struct {
      struct draw_fragment_shader *fragment_shader;
   } fs;

   /** Stream output (vertex feedback) state */
   struct {
      struct pipe_stream_output_state state;
      void *buffers[PIPE_MAX_SO_BUFFERS];
      uint num_buffers;
   } so;

a234 1
   boolean depth_clamp;
d239 3
a241 4
      uint num;
      uint semantic_name[10];
      uint semantic_index[10];
      uint slot[10];
a247 9
#ifdef HAVE_LLVM
   struct draw_llvm *llvm;
#endif

   struct pipe_sampler_view *sampler_views[PIPE_MAX_VERTEX_SAMPLERS];
   unsigned num_sampler_views;
   const struct pipe_sampler_state *samplers[PIPE_MAX_VERTEX_SAMPLERS];
   unsigned num_samplers;

a251 37
struct draw_fetch_info {
   boolean linear;
   unsigned start;
   const unsigned *elts;
   unsigned count;
};

struct draw_vertex_info {
   struct vertex_header *verts;
   unsigned vertex_size;
   unsigned stride;
   unsigned count;
};

/* these flags are set if the primitive is a segment of a larger one */
#define DRAW_SPLIT_BEFORE 0x1
#define DRAW_SPLIT_AFTER  0x2

struct draw_prim_info {
   boolean linear;
   unsigned start;

   const ushort *elts;
   unsigned count;

   unsigned prim;
   unsigned flags;
   unsigned *primitive_lengths;
   unsigned primitive_count;
};


/*******************************************************************************
 * Draw common initialization code
 */
boolean draw_init(struct draw_context *draw);

a287 5
int draw_alloc_extra_vertex_attrib(struct draw_context *draw,
                                   uint semantic_name, uint semantic_index);
void draw_remove_extra_vertex_attribs(struct draw_context *draw);


d307 7
a313 3
/*
 * These flags are used by the pipeline when unfilled and/or line stipple modes
 * are operational.
d315 7
a321 5
#define DRAW_PIPE_EDGE_FLAG_0   0x1
#define DRAW_PIPE_EDGE_FLAG_1   0x2
#define DRAW_PIPE_EDGE_FLAG_2   0x4
#define DRAW_PIPE_EDGE_FLAG_ALL 0x7
#define DRAW_PIPE_RESET_STIPPLE 0x8
d324 6
a329 2
                        const struct draw_vertex_info *vert,
                        const struct draw_prim_info *prim);
d332 4
a335 3
                               const struct draw_vertex_info *vert,
                               const struct draw_prim_info *prim);

@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d50 1
a51 1
struct gallivm_state;
a54 8
/** Sum of frustum planes and user-defined planes */
#define DRAW_TOTAL_CLIP_PLANES (6 + PIPE_MAX_CLIP_PLANES)

/**
 * The largest possible index of a vertex that can be fetched.
 */
#define DRAW_MAX_FETCH_IDX 0xffffffff

a61 1
struct draw_pt_front_end;
a64 8
 * Represents the mapped vertex buffer.
 */
struct draw_vertex_buffer {
   const void *map;
   uint32_t size;
};

/**
d69 1
a69 1
   unsigned clipmask:DRAW_TOTAL_CLIP_PLANES;
d71 1
a71 1
   unsigned have_clipdist:1;
a74 1
   float pre_clip_pos[4];
d86 1
a86 1
#define DRAW_MAX_SHADER_VARIANTS 128
a134 8
      /* Current active frontend */
      struct draw_pt_front_end *frontend;
      unsigned prim;
      unsigned opt;     /**< bitmask of PT_x flags */
      unsigned eltSize; /* saved eltSize for flushing */

      boolean rebind_parameters;

a148 8
      /*
       * This is the largest legal index value for the current set of
       * bound vertex buffers.  Regardless of any other consideration,
       * all vertex lookups need to be clamped to 0..max_index to
       * prevent out-of-bound access.
       */
      unsigned max_index;

d152 2
a158 1
         unsigned eltSizeIB;
d160 1
a160 2
         unsigned eltMax;
         int eltBias;         
d165 1
a165 1
         struct draw_vertex_buffer vbuffer[PIPE_MAX_ATTRIBS];
d174 1
a174 1
         float (*planes)[DRAW_TOTAL_CLIP_PLANES][4]; 
a183 1
      boolean guard_band_xy;
a185 2
   boolean quads_always_flatshade_last;

a194 1
   boolean guard_band_xy;
d210 1
a210 1
   struct pipe_viewport_state viewports[PIPE_MAX_VIEWPORTS];
a218 2
      uint clipvertex_output;
      uint clipdistance_output[2];
d220 15
a234 3
      /** Fields for TGSI interpreter / execution */
      struct {
         struct tgsi_exec_machine *machine;
a235 2
         struct tgsi_sampler *sampler;
      } tgsi;
d249 2
a250 6
      /** Fields for TGSI interpreter / execution */
      struct {
         struct tgsi_exec_machine *machine;

         struct tgsi_sampler *sampler;
      } tgsi;
d252 2
d263 3
a265 2
      struct draw_so_target *targets[PIPE_MAX_SO_BUFFERS];
      uint num_targets;
d270 3
a272 1
   float plane[DRAW_TOTAL_CLIP_PLANES][4];
d283 2
a285 1
   unsigned start_instance;
d291 4
a294 12
   /** Texture sampler and sampler view state.
    * Note that we have arrays indexed by shader type.  At this time
    * we only handle vertex and geometry shaders in the draw module, but
    * there may be more in the future (ex: hull and tessellation).
    */
   struct pipe_sampler_view *sampler_views[PIPE_SHADER_TYPES][PIPE_MAX_SHADER_SAMPLER_VIEWS];
   unsigned num_sampler_views[PIPE_SHADER_TYPES];
   const struct pipe_sampler_state *samplers[PIPE_SHADER_TYPES][PIPE_MAX_SAMPLERS];
   unsigned num_samplers[PIPE_SHADER_TYPES];

   struct pipe_query_data_pipeline_statistics statistics;
   boolean collect_statistics;
a335 1
void draw_new_instance(struct draw_context *draw);
d343 10
d359 5
d372 1
a372 6
uint draw_current_shader_viewport_index_output(const struct draw_context *draw);
uint draw_current_shader_clipvertex_output(const struct draw_context *draw);
uint draw_current_shader_clipdistance_output(const struct draw_context *draw, int index);
uint draw_current_shader_num_written_clipdistances(const struct draw_context *draw);
uint draw_current_shader_culldistance_output(const struct draw_context *draw, int index);
uint draw_current_shader_num_written_culldistances(const struct draw_context *draw);
a375 2
boolean draw_current_shader_uses_viewport_index(
   const struct draw_context *draw);
a383 1
void draw_pt_flush( struct draw_context *draw, unsigned flags );
d427 2
a428 3
#define DRAW_FLUSH_PARAMETER_CHANGE 0x1  /**< Constants, viewport, etc */
#define DRAW_FLUSH_STATE_CHANGE     0x2  /**< Other/heavy state changes */
#define DRAW_FLUSH_BACKEND          0x4  /**< Flush the output buffer */
a439 37
void
draw_stats_clipper_primitives(struct draw_context *draw,
                              const struct draw_prim_info *prim_info);

/** 
 * Return index i from the index buffer.
 * If the index buffer would overflow we return the
 * maximum possible index.
 */
#define DRAW_GET_IDX(_elts, _i)                   \
   (((_i) >= draw->pt.user.eltMax) ? DRAW_MAX_FETCH_IDX : (_elts)[_i])

/**
 * Return index of the given viewport clamping it
 * to be between 0 <= and < PIPE_MAX_VIEWPORTS
 */
static INLINE unsigned
draw_clamp_viewport_idx(int idx)
{
   return ((PIPE_MAX_VIEWPORTS > idx || idx < 0) ? idx : 0);
}

/**
 * Adds two unsigned integers and if the addition
 * overflows then it returns the value from
 * from the overflow_value variable.
 */
static INLINE unsigned
draw_overflow_uadd(unsigned a, unsigned b,
                   unsigned overflow_value)
{
   unsigned res = a + b;
   if (res < a || res < b) {
      res = overflow_value;
   }
   return res;
}
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d35 1
a35 1
 * Keith Whitwell <keithw@@vmware.com>
d50 1
a70 2
struct draw_assembler;
struct draw_llvm;
a218 1
      boolean bypass_clip_points;
a232 1
   boolean guard_band_points_xy;
a237 2
   /** Depth format and bias related settings. */
   boolean floating_point_depth;
a313 1
   unsigned start_index;
d315 1
d317 1
a331 2
   struct draw_assembler *ia;

d490 1
a490 1
   return ((PIPE_MAX_VIEWPORTS > idx && idx >= 0) ? idx : 0);
@


