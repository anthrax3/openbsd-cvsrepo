head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.31;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.44;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.42;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */

#include "util/u_memory.h"
#include "draw/draw_context.h"
#include "draw/draw_private.h"
#include "draw/draw_vbuf.h"
#include "draw/draw_vertex.h"
#include "draw/draw_pt.h"
#include "draw/draw_gs.h"
#include "translate/translate.h"
#include "translate/translate_cache.h"

/* The simplest 'middle end' in the new vertex code.
 *
 * The responsibilities of a middle end are to:
 *  - perform vertex fetch using
 *       - draw vertex element/buffer state
 *       - a list of fetch indices we received as an input
 *  - run the vertex shader
 *  - cliptest,
 *  - clip coord calculation
 *  - viewport transformation
 *  - if necessary, run the primitive pipeline, passing it:
 *       - a linear array of vertex_header vertices constructed here
 *       - a set of draw indices we received as an input
 *  - otherwise, drive the hw backend,
 *       - allocate space for hardware format vertices
 *       - translate the vertex-shader output vertices to hw format
 *       - calling the backend draw functions.
 *
 * For convenience, we provide a helper function to drive the hardware
 * backend given similar inputs to those required to run the pipeline.
 *
 * In the case of passthrough mode, many of these actions are disabled
 * or noops, so we end up doing:
 *
 *  - perform vertex fetch
 *  - drive the hw backend
 *
 * IE, basically just vertex fetch to post-vs-format vertices,
 * followed by a call to the backend helper function.
 */


struct fetch_emit_middle_end {
   struct draw_pt_middle_end base;
   struct draw_context *draw;

   struct translate *translate;
   const struct vertex_info *vinfo;

   /* Cache point size somewhere it's address won't change:
    */
   float point_size;

   struct translate_cache *cache;
};


static void fetch_emit_prepare( struct draw_pt_middle_end *middle,
                                unsigned prim,
				unsigned opt,
                                unsigned *max_vertices )
{
   struct fetch_emit_middle_end *feme = (struct fetch_emit_middle_end *)middle;
   struct draw_context *draw = feme->draw;
   const struct vertex_info *vinfo;
   unsigned i, dst_offset;
   struct translate_key key;
   unsigned gs_out_prim = (draw->gs.geometry_shader ?
                           draw->gs.geometry_shader->output_primitive :
                           prim);

   draw->render->set_primitive(draw->render, gs_out_prim);

   /* Must do this after set_primitive() above:
    */
   vinfo = feme->vinfo = draw->render->get_vertex_info(draw->render);

   /* Transform from API vertices to HW vertices, skipping the
    * pipeline_vertex intermediate step.
    */
   dst_offset = 0;
   memset(&key, 0, sizeof(key));

   for (i = 0; i < vinfo->num_attribs; i++) {
      const struct pipe_vertex_element *src = &draw->pt.vertex_element[vinfo->attrib[i].src_index];

      unsigned emit_sz = 0;
      unsigned input_format = src->src_format;
      unsigned input_buffer = src->vertex_buffer_index;
      unsigned input_offset = src->src_offset;
      unsigned output_format;

      output_format = draw_translate_vinfo_format(vinfo->attrib[i].emit);
      emit_sz = draw_translate_vinfo_size(vinfo->attrib[i].emit);

      if (vinfo->attrib[i].emit == EMIT_OMIT)
	 continue;

      if (vinfo->attrib[i].emit == EMIT_1F_PSIZE) {
	 input_format = PIPE_FORMAT_R32_FLOAT;
	 input_buffer = draw->pt.nr_vertex_buffers;
	 input_offset = 0;
      }

      key.element[i].type = TRANSLATE_ELEMENT_NORMAL;
      key.element[i].input_format = input_format;
      key.element[i].input_buffer = input_buffer;
      key.element[i].input_offset = input_offset;
      key.element[i].instance_divisor = src->instance_divisor;
      key.element[i].output_format = output_format;
      key.element[i].output_offset = dst_offset;

      dst_offset += emit_sz;
   }

   key.nr_elements = vinfo->num_attribs;
   key.output_stride = vinfo->size * 4;

   /* Don't bother with caching at this stage:
    */
   if (!feme->translate ||
       translate_key_compare(&feme->translate->key, &key) != 0)
   {
      translate_key_sanitize(&key);
      feme->translate = translate_cache_find(feme->cache,
                                             &key);

      feme->translate->set_buffer(feme->translate,
				  draw->pt.nr_vertex_buffers,
				  &feme->point_size,
				  0,
				  ~0);
   }

   feme->point_size = draw->rasterizer->point_size;

   for (i = 0; i < draw->pt.nr_vertex_buffers; i++) {
      feme->translate->set_buffer(feme->translate,
                                  i,
                                  ((char *)draw->pt.user.vbuffer[i].map +
                                   draw->pt.vertex_buffer[i].buffer_offset),
                                  draw->pt.vertex_buffer[i].stride,
                                  draw->pt.max_index);
   }

   *max_vertices = (draw->render->max_vertex_buffer_bytes /
                    (vinfo->size * 4));
}


static void
fetch_emit_bind_parameters(struct draw_pt_middle_end *middle)
{
   /* No-op? */
}


static void fetch_emit_run( struct draw_pt_middle_end *middle,
                            const unsigned *fetch_elts,
                            unsigned fetch_count,
                            const ushort *draw_elts,
                            unsigned draw_count,
                            unsigned prim_flags )
{
   struct fetch_emit_middle_end *feme = (struct fetch_emit_middle_end *)middle;
   struct draw_context *draw = feme->draw;
   void *hw_verts;

   /* XXX: need to flush to get prim_vbuf.c to release its allocation??
    */
   draw_do_flush( draw, DRAW_FLUSH_BACKEND );

   draw->render->allocate_vertices( draw->render,
                                    (ushort)feme->translate->key.output_stride,
                                    (ushort)fetch_count );

   hw_verts = draw->render->map_vertices( draw->render );
   if (!hw_verts) {
      debug_warn_once("vertex buffer allocation failed (out of memory?)");
      return;
   }

   /* Single routine to fetch vertices and emit HW verts.
    */
   feme->translate->run_elts( feme->translate,
			      fetch_elts,
			      fetch_count,
                              draw->start_instance,
                              draw->instance_id,
			      hw_verts );

   if (0) {
      unsigned i;
      for (i = 0; i < fetch_count; i++) {
         debug_printf("\n\nvertex %d:\n", i);
         draw_dump_emitted_vertex( feme->vinfo,
                                   (const uint8_t *)hw_verts + feme->vinfo->size * 4 * i );
      }
   }

   draw->render->unmap_vertices( draw->render,
                                 0,
                                 (ushort)(fetch_count - 1) );

   /* XXX: Draw arrays path to avoid re-emitting index list again and
    * again.
    */
   draw->render->draw_elements( draw->render,
                                draw_elts,
                                draw_count );

   /* Done -- that was easy, wasn't it:
    */
   draw->render->release_vertices( draw->render );

}


static void fetch_emit_run_linear( struct draw_pt_middle_end *middle,
                                   unsigned start,
                                   unsigned count,
                                   unsigned prim_flags )
{
   struct fetch_emit_middle_end *feme = (struct fetch_emit_middle_end *)middle;
   struct draw_context *draw = feme->draw;
   void *hw_verts;

   /* XXX: need to flush to get prim_vbuf.c to release its allocation??
    */
   draw_do_flush( draw, DRAW_FLUSH_BACKEND );

   if (!draw->render->allocate_vertices( draw->render,
                                         (ushort)feme->translate->key.output_stride,
                                         (ushort)count ))
      goto fail;

   hw_verts = draw->render->map_vertices( draw->render );
   if (!hw_verts)
      goto fail;

   /* Single routine to fetch vertices and emit HW verts.
    */
   feme->translate->run( feme->translate,
                         start,
                         count,
                         draw->start_instance,
                         draw->instance_id,
                         hw_verts );

   if (0) {
      unsigned i;
      for (i = 0; i < count; i++) {
         debug_printf("\n\nvertex %d:\n", i);
         draw_dump_emitted_vertex( feme->vinfo,
                                   (const uint8_t *)hw_verts + feme->vinfo->size * 4 * i );
      }
   }

   draw->render->unmap_vertices( draw->render, 0, count - 1 );

   /* XXX: Draw arrays path to avoid re-emitting index list again and
    * again.
    */
   draw->render->draw_arrays( draw->render, 0, count );

   /* Done -- that was easy, wasn't it:
    */
   draw->render->release_vertices( draw->render );
   return;

fail:
   debug_warn_once("allocate or map of vertex buffer failed (out of memory?)");
   return;
}


static boolean fetch_emit_run_linear_elts( struct draw_pt_middle_end *middle,
                                        unsigned start,
                                        unsigned count,
                                        const ushort *draw_elts,
                                        unsigned draw_count,
                                        unsigned prim_flags )
{
   struct fetch_emit_middle_end *feme = (struct fetch_emit_middle_end *)middle;
   struct draw_context *draw = feme->draw;
   void *hw_verts;

   /* XXX: need to flush to get prim_vbuf.c to release its allocation??
    */
   draw_do_flush( draw, DRAW_FLUSH_BACKEND );

   if (!draw->render->allocate_vertices( draw->render,
                                         (ushort)feme->translate->key.output_stride,
                                         (ushort)count ))
      return FALSE;

   hw_verts = draw->render->map_vertices( draw->render );
   if (!hw_verts)
      return FALSE;

   /* Single routine to fetch vertices and emit HW verts.
    */
   feme->translate->run( feme->translate,
                         start,
                         count,
                         draw->start_instance,
                         draw->instance_id,
                         hw_verts );

   draw->render->unmap_vertices( draw->render, 0, (ushort)(count - 1) );

   /* XXX: Draw arrays path to avoid re-emitting index list again and
    * again.
    */
   draw->render->draw_elements( draw->render,
                                draw_elts,
                                draw_count );

   /* Done -- that was easy, wasn't it:
    */
   draw->render->release_vertices( draw->render );

   return TRUE;
}


static void fetch_emit_finish( struct draw_pt_middle_end *middle )
{
   /* nothing to do */
}


static void fetch_emit_destroy( struct draw_pt_middle_end *middle )
{
   struct fetch_emit_middle_end *feme = (struct fetch_emit_middle_end *)middle;

   if (feme->cache)
      translate_cache_destroy(feme->cache);

   FREE(middle);
}


struct draw_pt_middle_end *draw_pt_fetch_emit( struct draw_context *draw )
{
   struct fetch_emit_middle_end *fetch_emit = CALLOC_STRUCT( fetch_emit_middle_end );
   if (fetch_emit == NULL)
      return NULL;

   fetch_emit->cache = translate_cache_create();
   if (!fetch_emit->cache) {
      FREE(fetch_emit);
      return NULL;
   }

   fetch_emit->base.prepare    = fetch_emit_prepare;
   fetch_emit->base.bind_parameters = fetch_emit_bind_parameters;
   fetch_emit->base.run        = fetch_emit_run;
   fetch_emit->base.run_linear = fetch_emit_run_linear;
   fetch_emit->base.run_linear_elts = fetch_emit_run_linear_elts;
   fetch_emit->base.finish     = fetch_emit_finish;
   fetch_emit->base.destroy    = fetch_emit_destroy;

   fetch_emit->draw = draw;

   return &fetch_emit->base;
}

@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d183 7
d389 1
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d2 1
a2 1
 * 
d5 1
a5 1
 * 
d13 1
a13 1
 * 
d17 1
a17 1
 * 
d25 1
a25 1
 * 
d43 2
a44 2
/* The simplest 'middle end' in the new vertex code.  
 * 
d50 2
a51 2
 *  - cliptest, 
 *  - clip coord calculation 
d78 1
a78 1
   
a89 2


a98 1
   boolean ok;
d100 1
a100 2

   unsigned gs_out_prim = (draw->gs.geometry_shader ? 
d104 1
a105 8

   ok = draw->render->set_primitive( draw->render, 
                                     gs_out_prim );
   if (!ok) {
      assert(0);
      return;
   }
   
a108 2
   
   
d144 1
a144 1
      
d154 1
a154 1
       translate_key_compare(&feme->translate->key, &key) != 0) 
d160 2
a161 3

      feme->translate->set_buffer(feme->translate, 
				  draw->pt.nr_vertex_buffers, 
d166 1
a166 1
   
d170 3
a172 3
      feme->translate->set_buffer(feme->translate, 
                                  i, 
                                  ((char *)draw->pt.user.vbuffer[i] + 
d178 1
a178 1
   *max_vertices = (draw->render->max_vertex_buffer_bytes / 
a182 3



d193 2
a194 2
   
   /* XXX: need to flush to get prim_vbuf.c to release its allocation?? 
d204 1
a204 1
      assert(0);
d207 1
a207 2
         
					
d210 1
a210 1
   feme->translate->run_elts( feme->translate, 
d213 1
d221 1
a221 1
         draw_dump_emitted_vertex( feme->vinfo, 
d226 2
a227 2
   draw->render->unmap_vertices( draw->render, 
                                 0, 
d233 2
a234 2
   draw->render->draw_elements( draw->render, 
                                draw_elts, 
d237 1
a237 1
   /* Done -- that was easy, wasn't it: 
d259 1
a259 1
                                         (ushort)count )) 
d263 1
a263 1
   if (!hw_verts) 
d271 1
d297 1
a297 1
   assert(0);
d323 1
a323 1
   if (!hw_verts) 
d331 1
d340 2
a341 2
   draw->render->draw_elements( draw->render, 
                                draw_elts, 
a351 2


d357 1
d389 1
a389 1
     
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d189 1
a189 1
                                  draw->pt.vertex_buffer[i].max_index);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d39 1
d104 5
d111 1
a111 1
                                     prim );
d138 7
a144 22
      switch (vinfo->attrib[i].emit) {
      case EMIT_4UB:
	 output_format = PIPE_FORMAT_R8G8B8A8_UNORM;
	 emit_sz = 4 * sizeof(unsigned char);
         break;
      case EMIT_4F:
	 output_format = PIPE_FORMAT_R32G32B32A32_FLOAT;
	 emit_sz = 4 * sizeof(float);
         break;
      case EMIT_3F:
	 output_format = PIPE_FORMAT_R32G32B32_FLOAT;
	 emit_sz = 3 * sizeof(float);
         break;
      case EMIT_2F:
	 output_format = PIPE_FORMAT_R32G32_FLOAT;
	 emit_sz = 2 * sizeof(float);
         break;
      case EMIT_1F:
	 output_format = PIPE_FORMAT_R32_FLOAT;
	 emit_sz = 1 * sizeof(float);
         break;
      case EMIT_1F_PSIZE:
a147 10
	 output_format = PIPE_FORMAT_R32_FLOAT;
	 emit_sz = 1 * sizeof(float);
         break;
      case EMIT_OMIT:
         continue;
      default:
         assert(0);
	 output_format = PIPE_FORMAT_NONE;
	 emit_sz = 0;
	 continue;
d177 2
a178 1
				  0);
d188 2
a189 1
                                  draw->pt.vertex_buffer[i].stride );
a193 9

   /* Return an even number of verts.
    * This prevents "parity" errors when splitting long triangle strips which
    * can lead to front/back culling mix-ups.
    * Every other triangle in a strip has an alternate front/back orientation
    * so splitting at an odd position can cause the orientation of subsequent
    * triangles to get reversed.
    */
   *max_vertices = *max_vertices & ~1;
d204 2
a205 1
                            unsigned draw_count )
a214 5
   if (fetch_count >= UNDEFINED_VERTEX_ID) {
      assert(0);
      return;
   }

d250 3
a252 3
   draw->render->draw( draw->render, 
                       draw_elts, 
                       draw_count );
d263 2
a264 1
                                   unsigned count )
a273 3
   if (count >= UNDEFINED_VERTEX_ID) 
      goto fail;

d322 2
a323 1
                                        unsigned draw_count )
a332 3
   if (count >= UNDEFINED_VERTEX_ID)
      return FALSE;

d355 3
a357 3
   draw->render->draw( draw->render, 
                       draw_elts, 
                       draw_count );
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a38 1
#include "draw/draw_gs.h"
a102 5
   unsigned gs_out_prim = (draw->gs.geometry_shader ? 
                           draw->gs.geometry_shader->output_primitive :
                           prim);


d105 1
a105 1
                                     gs_out_prim );
d132 22
a153 7
      output_format = draw_translate_vinfo_format(vinfo->attrib[i].emit);
      emit_sz = draw_translate_vinfo_size(vinfo->attrib[i].emit);

      if (vinfo->attrib[i].emit == EMIT_OMIT)
	 continue;

      if (vinfo->attrib[i].emit == EMIT_1F_PSIZE) {
d157 10
d196 1
a196 2
				  0,
				  ~0);
d206 1
a206 2
                                  draw->pt.vertex_buffer[i].stride,
                                  draw->pt.vertex_buffer[i].max_index);
d211 9
d230 1
a230 2
                            unsigned draw_count,
                            unsigned prim_flags )
d240 5
d280 3
a282 3
   draw->render->draw_elements( draw->render, 
                                draw_elts, 
                                draw_count );
d293 1
a293 2
                                   unsigned count,
                                   unsigned prim_flags )
d303 3
d354 1
a354 2
                                        unsigned draw_count,
                                        unsigned prim_flags )
d364 3
d389 3
a391 3
   draw->render->draw_elements( draw->render, 
                                draw_elts, 
                                draw_count );
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d2 1
a2 1
 *
d5 1
a5 1
 *
d13 1
a13 1
 *
d17 1
a17 1
 *
d25 1
a25 1
 *
d43 2
a44 2
/* The simplest 'middle end' in the new vertex code.
 *
d50 2
a51 2
 *  - cliptest,
 *  - clip coord calculation
d78 1
a78 1

d90 2
d101 1
d103 2
a104 1
   unsigned gs_out_prim = (draw->gs.geometry_shader ?
a107 1
   draw->render->set_primitive(draw->render, gs_out_prim);
d109 8
d120 2
d157 1
a157 1

d167 1
a167 1
       translate_key_compare(&feme->translate->key, &key) != 0)
d173 3
a175 2
      feme->translate->set_buffer(feme->translate,
				  draw->pt.nr_vertex_buffers,
d180 1
a180 1

d184 3
a186 3
      feme->translate->set_buffer(feme->translate,
                                  i,
                                  ((char *)draw->pt.user.vbuffer[i].map +
d189 1
a189 1
                                  draw->pt.max_index);
d192 1
a192 1
   *max_vertices = (draw->render->max_vertex_buffer_bytes /
d197 3
d210 2
a211 2

   /* XXX: need to flush to get prim_vbuf.c to release its allocation??
d221 1
a221 1
      debug_warn_once("vertex buffer allocation failed (out of memory?)");
d224 2
a225 1

d228 1
a228 1
   feme->translate->run_elts( feme->translate,
a230 1
                              draw->start_instance,
d238 1
a238 1
         draw_dump_emitted_vertex( feme->vinfo,
d243 2
a244 2
   draw->render->unmap_vertices( draw->render,
                                 0,
d250 2
a251 2
   draw->render->draw_elements( draw->render,
                                draw_elts,
d254 1
a254 1
   /* Done -- that was easy, wasn't it:
d276 1
a276 1
                                         (ushort)count ))
d280 1
a280 1
   if (!hw_verts)
a287 1
                         draw->start_instance,
d313 1
a313 1
   debug_warn_once("allocate or map of vertex buffer failed (out of memory?)");
d339 1
a339 1
   if (!hw_verts)
a346 1
                         draw->start_instance,
d355 2
a356 2
   draw->render->draw_elements( draw->render,
                                draw_elts,
d367 2
a373 1

d405 1
a405 1

@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keithw@@vmware.com>
a182 7
static void
fetch_emit_bind_parameters(struct draw_pt_middle_end *middle)
{
   /* No-op? */
}


a381 1
   fetch_emit->base.bind_parameters = fetch_emit_bind_parameters;
@


