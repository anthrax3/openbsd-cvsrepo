head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.51;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.14;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.29;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.03;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.37;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.41;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.06.05;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.43.13;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@
/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/**
 * \brief  Public interface into the drawing module.
 */

/* Authors:  Keith Whitwell <keithw@@vmware.com>
 */


#ifndef DRAW_CONTEXT_H
#define DRAW_CONTEXT_H


#include "pipe/p_state.h"
#include "tgsi/tgsi_exec.h"

struct pipe_context;
struct draw_context;
struct draw_stage;
struct draw_vertex_shader;
struct draw_geometry_shader;
struct draw_fragment_shader;
struct tgsi_sampler;

/*
 * structure to contain driver internal information 
 * for stream out support. mapping stores the pointer
 * to the buffer contents, and internal offset stores
 * an internal counter to how much of the stream
 * out buffer is used (in bytes).
 */
struct draw_so_target {
   struct pipe_stream_output_target target;
   void *mapping;
   int internal_offset;
};

struct draw_context *draw_create( struct pipe_context *pipe );

struct draw_context *draw_create_no_llvm(struct pipe_context *pipe);

void draw_destroy( struct draw_context *draw );

void draw_flush(struct draw_context *draw);

void draw_set_viewport_states( struct draw_context *draw,
                               unsigned start_slot,
                               unsigned num_viewports,
                               const struct pipe_viewport_state *viewports );

void draw_set_clip_state( struct draw_context *pipe,
                          const struct pipe_clip_state *clip );

/**
 * Sets the rasterization state used by the draw module.
 * The rast_handle is used to pass the driver specific representation
 * of the rasterization state. It's going to be used when the
 * draw module sets the state back on the driver itself using the
 * pipe::bind_rasterizer_state method.
 *
 * NOTE: if you're calling this function from within the pipe's
 * bind_rasterizer_state you should always call it before binding
 * the actual state - that's because the draw module can try to
 * bind its own rasterizer state which would reset your newly
 * set state. i.e. always do
 * draw_set_rasterizer_state(driver->draw, state->pipe_state, state);
 * driver->state.raster = state;
 */
void draw_set_rasterizer_state( struct draw_context *draw,
                                const struct pipe_rasterizer_state *raster,
                                void *rast_handle );

void draw_set_rasterize_stage( struct draw_context *draw,
                               struct draw_stage *stage );

void draw_wide_point_threshold(struct draw_context *draw, float threshold);

void draw_wide_point_sprites(struct draw_context *draw, boolean draw_sprite);

void draw_wide_line_threshold(struct draw_context *draw, float threshold);

void draw_enable_line_stipple(struct draw_context *draw, boolean enable);

void draw_enable_point_sprites(struct draw_context *draw, boolean enable);

void draw_set_zs_format(struct draw_context *draw, enum pipe_format format);

boolean
draw_install_aaline_stage(struct draw_context *draw, struct pipe_context *pipe);

boolean
draw_install_aapoint_stage(struct draw_context *draw, struct pipe_context *pipe);

boolean
draw_install_pstipple_stage(struct draw_context *draw, struct pipe_context *pipe);


struct tgsi_shader_info *
draw_get_shader_info(const struct draw_context *draw);

void
draw_prepare_shader_outputs(struct draw_context *draw);

int
draw_find_shader_output(const struct draw_context *draw,
                        uint semantic_name, uint semantic_index);

boolean
draw_will_inject_frontface(const struct draw_context *draw);

uint
draw_num_shader_outputs(const struct draw_context *draw);

uint
draw_total_vs_outputs(const struct draw_context *draw);

uint
draw_total_gs_outputs(const struct draw_context *draw);

void
draw_texture_sampler(struct draw_context *draw,
                     uint shader_type,
                     struct tgsi_sampler *sampler);

void
draw_set_sampler_views(struct draw_context *draw,
                       unsigned shader_stage,
                       struct pipe_sampler_view **views,
                       unsigned num);
void
draw_set_samplers(struct draw_context *draw,
                  unsigned shader_stage,
                  struct pipe_sampler_state **samplers,
                  unsigned num);

void
draw_set_mapped_texture(struct draw_context *draw,
                        unsigned shader_stage,
                        unsigned sview_idx,
                        uint32_t width, uint32_t height, uint32_t depth,
                        uint32_t first_level, uint32_t last_level,
                        const void *base,
                        uint32_t row_stride[PIPE_MAX_TEXTURE_LEVELS],
                        uint32_t img_stride[PIPE_MAX_TEXTURE_LEVELS],
                        uint32_t mip_offsets[PIPE_MAX_TEXTURE_LEVELS]);


/*
 * Vertex shader functions
 */

struct draw_vertex_shader *
draw_create_vertex_shader(struct draw_context *draw,
                          const struct pipe_shader_state *shader);
void draw_bind_vertex_shader(struct draw_context *draw,
                             struct draw_vertex_shader *dvs);
void draw_delete_vertex_shader(struct draw_context *draw,
                               struct draw_vertex_shader *dvs);
void draw_vs_attach_so(struct draw_vertex_shader *dvs,
                       const struct pipe_stream_output_info *info);
void draw_vs_reset_so(struct draw_vertex_shader *dvs);


/*
 * Fragment shader functions
 */
struct draw_fragment_shader *
draw_create_fragment_shader(struct draw_context *draw,
                            const struct pipe_shader_state *shader);
void draw_bind_fragment_shader(struct draw_context *draw,
                               struct draw_fragment_shader *dvs);
void draw_delete_fragment_shader(struct draw_context *draw,
                                 struct draw_fragment_shader *dvs);

/*
 * Geometry shader functions
 */
struct draw_geometry_shader *
draw_create_geometry_shader(struct draw_context *draw,
                            const struct pipe_shader_state *shader);
void draw_bind_geometry_shader(struct draw_context *draw,
                               struct draw_geometry_shader *dvs);
void draw_delete_geometry_shader(struct draw_context *draw,
                                 struct draw_geometry_shader *dvs);


/*
 * Vertex data functions
 */

void draw_set_vertex_buffers(struct draw_context *draw,
                             unsigned start_slot, unsigned count,
                             const struct pipe_vertex_buffer *buffers);

void draw_set_vertex_elements(struct draw_context *draw,
			      unsigned count,
                              const struct pipe_vertex_element *elements);

void draw_set_indexes(struct draw_context *draw,
                      const void *elements, unsigned elem_size,
                      unsigned available_space);

void draw_set_mapped_vertex_buffer(struct draw_context *draw,
                                   unsigned attr, const void *buffer,
                                   size_t size);

void
draw_set_mapped_constant_buffer(struct draw_context *draw,
                                unsigned shader_type,
                                unsigned slot,
                                const void *buffer,
                                unsigned size);

void
draw_set_mapped_so_targets(struct draw_context *draw,
                           int num_targets,
                           struct draw_so_target *targets[PIPE_MAX_SO_BUFFERS]);


/***********************************************************************
 * draw_pt.c 
 */

void draw_vbo(struct draw_context *draw,
              const struct pipe_draw_info *info);


/*******************************************************************************
 * Driver backend interface 
 */
struct vbuf_render;
void draw_set_render( struct draw_context *draw, 
		      struct vbuf_render *render );

void draw_set_driver_clipping( struct draw_context *draw,
                               boolean bypass_clip_xy,
                               boolean bypass_clip_z,
                               boolean guard_band_xy,
                               boolean bypass_clip_points);

void draw_set_force_passthrough( struct draw_context *draw, 
                                 boolean enable );


/*******************************************************************************
 * Draw statistics
 */
void draw_collect_pipeline_statistics(struct draw_context *draw,
                                      boolean enable);

/*******************************************************************************
 * Draw pipeline 
 */
boolean draw_need_pipeline(const struct draw_context *draw,
                           const struct pipe_rasterizer_state *rasterizer,
                           unsigned prim );

int
draw_get_shader_param(unsigned shader, enum pipe_shader_cap param);

int
draw_get_shader_param_no_llvm(unsigned shader, enum pipe_shader_cap param);

boolean
draw_get_option_use_llvm(void);

#endif /* DRAW_CONTEXT_H */
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a66 5
#if HAVE_LLVM
struct draw_context *draw_create_with_llvm_context(struct pipe_context *pipe,
                                                   void *context);
#endif

@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d67 5
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d4 1
a4 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d22 1
a22 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d33 1
a33 1
/* Authors:  Keith Whitwell <keith@@tungstengraphics.com>
d56 1
a56 1
 * stores an internal counter to how much of the stream
a62 1
   int emitted_vertices;
d113 1
a113 1
void draw_set_mrd(struct draw_context *draw, double mrd);
d128 3
d135 3
d141 5
d265 2
a266 1
                               boolean guard_band_xy);
a290 1
#ifdef HAVE_LLVM
a292 1
#endif
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a50 2
struct gallivm_state;

d52 13
d68 1
a68 2
struct draw_context *
draw_create_gallivm(struct pipe_context *pipe, struct gallivm_state *gallivm);
d74 4
a77 2
void draw_set_viewport_state( struct draw_context *draw,
                              const struct pipe_viewport_state *viewport );
d82 15
d126 3
d138 3
a140 4
draw_texture_samplers(struct draw_context *draw,
                      uint shader_type,
                      uint num_samplers,
                      struct tgsi_sampler **samplers);
d144 1
d149 1
d155 2
a156 1
                        unsigned sampler_idx,
d159 1
d162 1
a162 1
                        const void *data[PIPE_MAX_TEXTURE_LEVELS]);
d176 3
d209 1
a209 1
                             unsigned count,
d216 3
a218 5
void draw_set_index_buffer(struct draw_context *draw,
                           const struct pipe_index_buffer *ib);

void draw_set_mapped_index_buffer(struct draw_context *draw,
                                  const void *elements);
d221 2
a222 1
                                   unsigned attr, const void *buffer);
d232 3
a234 6
draw_set_mapped_so_buffers(struct draw_context *draw,
                           void *buffers[PIPE_MAX_SO_BUFFERS],
                           unsigned num_buffers);
void
draw_set_so_state(struct draw_context *draw,
                  struct pipe_stream_output_state *state);
a243 11
void draw_arrays(struct draw_context *draw, unsigned prim,
		 unsigned start, unsigned count);

void
draw_arrays_instanced(struct draw_context *draw,
                      unsigned mode,
                      unsigned start,
                      unsigned count,
                      unsigned startInstance,
                      unsigned instanceCount);

d254 2
a255 1
                               boolean bypass_clip_z );
d260 7
d274 10
a283 11
static INLINE int
draw_get_shader_param(unsigned shader, enum pipe_shader_cap param)
{
   switch(shader) {
   case PIPE_SHADER_VERTEX:
   case PIPE_SHADER_GEOMETRY:
      return tgsi_exec_get_shader_param(param);
   default:
      return 0;
   }
}
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d126 1
a126 1
                        uint32_t last_level,
d246 1
a246 1
draw_get_shader_param(unsigned shader, enum pipe_cap param)
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d42 1
a42 1

d49 1
d51 2
d57 3
d62 2
d79 2
d109 1
d113 17
d146 11
d180 5
a184 10
void
draw_set_mapped_element_buffer_range( struct draw_context *draw,
                                      unsigned eltSize,
                                      unsigned min_index,
                                      unsigned max_index,
                                      const void *elements );

void draw_set_mapped_element_buffer( struct draw_context *draw,
                                     unsigned eltSize, 
                                     const void *elements );
d196 8
d206 1
a206 1
 * draw_prim.c 
d209 3
a222 2
void draw_flush(struct draw_context *draw);

d232 2
a233 1
                               boolean bypass_clipping );
d245 11
a255 1

@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d42 1
a42 1
#include "tgsi/tgsi_exec.h"
a48 1
struct draw_fragment_shader;
a49 2
struct gallivm_state;

a53 3
struct draw_context *
draw_create_gallivm(struct pipe_context *pipe, struct gallivm_state *gallivm);

a55 2
void draw_flush(struct draw_context *draw);

a70 2
void draw_wide_point_sprites(struct draw_context *draw, boolean draw_sprite);

a98 1
                      uint shader_type,
a101 17
void
draw_set_sampler_views(struct draw_context *draw,
                       struct pipe_sampler_view **views,
                       unsigned num);
void
draw_set_samplers(struct draw_context *draw,
                  struct pipe_sampler_state **samplers,
                  unsigned num);

void
draw_set_mapped_texture(struct draw_context *draw,
                        unsigned sampler_idx,
                        uint32_t width, uint32_t height, uint32_t depth,
                        uint32_t last_level,
                        uint32_t row_stride[PIPE_MAX_TEXTURE_LEVELS],
                        uint32_t img_stride[PIPE_MAX_TEXTURE_LEVELS],
                        const void *data[PIPE_MAX_TEXTURE_LEVELS]);
a117 11
 * Fragment shader functions
 */
struct draw_fragment_shader *
draw_create_fragment_shader(struct draw_context *draw,
                            const struct pipe_shader_state *shader);
void draw_bind_fragment_shader(struct draw_context *draw,
                               struct draw_fragment_shader *dvs);
void draw_delete_fragment_shader(struct draw_context *draw,
                                 struct draw_fragment_shader *dvs);

/*
d141 10
a150 5
void draw_set_index_buffer(struct draw_context *draw,
                           const struct pipe_index_buffer *ib);

void draw_set_mapped_index_buffer(struct draw_context *draw,
                                  const void *elements);
a161 8
void
draw_set_mapped_so_buffers(struct draw_context *draw,
                           void *buffers[PIPE_MAX_SO_BUFFERS],
                           unsigned num_buffers);
void
draw_set_so_state(struct draw_context *draw,
                  struct pipe_stream_output_state *state);

d164 1
a164 1
 * draw_pt.c 
a166 3
void draw_vbo(struct draw_context *draw,
              const struct pipe_draw_info *info);

d178 2
d189 1
a189 2
                               boolean bypass_clip_xy,
                               boolean bypass_clip_z );
d201 1
a201 11
static INLINE int
draw_get_shader_param(unsigned shader, enum pipe_cap param)
{
   switch(shader) {
   case PIPE_SHADER_VERTEX:
   case PIPE_SHADER_GEOMETRY:
      return tgsi_exec_get_shader_param(param);
   default:
      return 0;
   }
}
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d51 2
a53 13
/*
 * structure to contain driver internal information 
 * for stream out support. mapping stores the pointer
 * to the buffer contents, and internal offset stores
 * stores an internal counter to how much of the stream
 * out buffer is used (in bytes).
 */
struct draw_so_target {
   struct pipe_stream_output_target target;
   void *mapping;
   int internal_offset;
   int emitted_vertices;
};
d57 2
a58 1
struct draw_context *draw_create_no_llvm(struct pipe_context *pipe);
d64 2
a65 4
void draw_set_viewport_states( struct draw_context *draw,
                               unsigned start_slot,
                               unsigned num_viewports,
                               const struct pipe_viewport_state *viewports );
a69 15
/**
 * Sets the rasterization state used by the draw module.
 * The rast_handle is used to pass the driver specific representation
 * of the rasterization state. It's going to be used when the
 * draw module sets the state back on the driver itself using the
 * pipe::bind_rasterizer_state method.
 *
 * NOTE: if you're calling this function from within the pipe's
 * bind_rasterizer_state you should always call it before binding
 * the actual state - that's because the draw module can try to
 * bind its own rasterizer state which would reset your newly
 * set state. i.e. always do
 * draw_set_rasterizer_state(driver->draw, state->pipe_state, state);
 * driver->state.raster = state;
 */
a98 3
struct tgsi_shader_info *
draw_get_shader_info(const struct draw_context *draw);

d108 4
a111 3
draw_texture_sampler(struct draw_context *draw,
                     uint shader_type,
                     struct tgsi_sampler *sampler);
a114 1
                       unsigned shader_stage,
a118 1
                  unsigned shader_stage,
d124 1
a124 2
                        unsigned shader_stage,
                        unsigned sview_idx,
d126 1
a126 2
                        uint32_t first_level, uint32_t last_level,
                        const void *base,
d129 1
a129 1
                        uint32_t mip_offsets[PIPE_MAX_TEXTURE_LEVELS]);
a142 3
void draw_vs_attach_so(struct draw_vertex_shader *dvs,
                       const struct pipe_stream_output_info *info);
void draw_vs_reset_so(struct draw_vertex_shader *dvs);
d173 1
a173 1
                             unsigned start_slot, unsigned count,
d180 5
a184 3
void draw_set_indexes(struct draw_context *draw,
                      const void *elements, unsigned elem_size,
                      unsigned available_space);
d187 1
a187 2
                                   unsigned attr, const void *buffer,
                                   size_t size);
d197 6
a202 3
draw_set_mapped_so_targets(struct draw_context *draw,
                           int num_targets,
                           struct draw_so_target *targets[PIPE_MAX_SO_BUFFERS]);
d212 11
d233 1
a233 2
                               boolean bypass_clip_z,
                               boolean guard_band_xy);
a237 7

/*******************************************************************************
 * Draw statistics
 */
void draw_collect_pipeline_statistics(struct draw_context *draw,
                                      boolean enable);

d245 11
a255 10
int
draw_get_shader_param(unsigned shader, enum pipe_shader_cap param);

int
draw_get_shader_param_no_llvm(unsigned shader, enum pipe_shader_cap param);

#ifdef HAVE_LLVM
boolean
draw_get_option_use_llvm(void);
#endif
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d4 1
a4 1
 * Copyright 2007 VMware, Inc.
d22 1
a22 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d33 1
a33 1
/* Authors:  Keith Whitwell <keithw@@vmware.com>
d56 1
a56 1
 * an internal counter to how much of the stream
d63 1
d114 1
a114 1
void draw_set_zs_format(struct draw_context *draw, enum pipe_format format);
a128 3
void
draw_prepare_shader_outputs(struct draw_context *draw);

a132 3
boolean
draw_will_inject_frontface(const struct draw_context *draw);

a135 5
uint
draw_total_vs_outputs(const struct draw_context *draw);

uint
draw_total_gs_outputs(const struct draw_context *draw);
d255 1
a255 2
                               boolean guard_band_xy,
                               boolean bypass_clip_points);
d280 1
d283 1
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a66 5
#if HAVE_LLVM
struct draw_context *draw_create_with_llvm_context(struct pipe_context *pipe,
                                                   void *context);
#endif

@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d67 5
@


