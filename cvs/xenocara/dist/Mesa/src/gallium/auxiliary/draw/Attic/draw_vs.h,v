head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.32;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.46;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.42;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Authors:  Keith Whitwell <keithw@@vmware.com>
 */

#ifndef DRAW_VS_H
#define DRAW_VS_H

#include "draw_context.h"
#include "draw_private.h"
#include "draw_vertex.h"


struct draw_context;
struct pipe_shader_state;

struct draw_variant_input 
{
   enum pipe_format format;
   unsigned buffer;
   unsigned offset; 
   unsigned instance_divisor;
};

struct draw_variant_output
{
   enum attrib_emit format;     /* output format */
   unsigned vs_output:8;        /* which vertex shader output is this? */
   unsigned offset:24;          /* offset into output vertex */
};

struct draw_variant_element {
   struct draw_variant_input in;
   struct draw_variant_output out;
};

struct draw_vs_variant_key {
   unsigned output_stride;
   unsigned nr_elements:8;      /* max2(nr_inputs, nr_outputs) */
   unsigned nr_inputs:8;
   unsigned nr_outputs:8;
   unsigned viewport:1;
   unsigned clip:1;
   unsigned const_vbuffers:5;
   struct draw_variant_element element[PIPE_MAX_ATTRIBS];
};

struct draw_vs_variant;


struct draw_vs_variant {
   struct draw_vs_variant_key key;

   struct draw_vertex_shader *vs;

   void (*set_buffer)( struct draw_vs_variant *,
                      unsigned i,
                      const void *ptr,
                      unsigned stride,
                      unsigned max_stride );

   void (PIPE_CDECL *run_linear)( struct draw_vs_variant *shader,
                                  unsigned start,
                                  unsigned count,
                                  void *output_buffer );

   void (PIPE_CDECL *run_elts)( struct draw_vs_variant *shader,
                                const unsigned *elts,
                                unsigned count,
                                void *output_buffer );

   void (*destroy)( struct draw_vs_variant * );
};


/**
 * Private version of the compiled vertex_shader
 */
struct draw_vertex_shader {
   struct draw_context *draw;

   /* This member will disappear shortly:
    */
   struct pipe_shader_state   state;

   struct tgsi_shader_info info;
   unsigned position_output;
   unsigned edgeflag_output;
   unsigned clipvertex_output;
   unsigned clipdistance_output[PIPE_MAX_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT];
   unsigned culldistance_output[PIPE_MAX_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT];
   /* Extracted from shader:
    */
   const float (*immediates)[4];

   /* 
    */
   struct draw_vs_variant *variant[16];
   unsigned nr_variants;
   unsigned last_variant;
   struct draw_vs_variant *(*create_variant)( struct draw_vertex_shader *shader,
                                              const struct draw_vs_variant_key *key );


   void (*prepare)( struct draw_vertex_shader *shader,
		    struct draw_context *draw );

   /* Run the shader - this interface will get cleaned up in the
    * future:
    */
   void (*run_linear)( struct draw_vertex_shader *shader,
		       const float (*input)[4],
		       float (*output)[4],
                       const void *constants[PIPE_MAX_CONSTANT_BUFFERS],
                       const unsigned const_size[PIPE_MAX_CONSTANT_BUFFERS],
		       unsigned count,
		       unsigned input_stride,
		       unsigned output_stride );


   void (*delete)( struct draw_vertex_shader * );
};


struct draw_vs_variant *
draw_vs_lookup_variant( struct draw_vertex_shader *base,
                        const struct draw_vs_variant_key *key );


/********************************************************************************
 * Internal functions:
 */

struct draw_vertex_shader *
draw_create_vs_exec(struct draw_context *draw,
		    const struct pipe_shader_state *templ);

struct draw_vs_variant_key;
struct draw_vertex_shader;

#if HAVE_LLVM
struct draw_vertex_shader *
draw_create_vs_llvm(struct draw_context *draw,
		    const struct pipe_shader_state *state);
#endif


/********************************************************************************
 * Helpers for vs implementations that don't do their own fetch/emit variants.
 * Means these can be shared between shaders.
 */
struct translate;
struct translate_key;

struct translate *draw_vs_get_fetch( struct draw_context *draw,
                                     struct translate_key *key );


struct translate *draw_vs_get_emit( struct draw_context *draw,
                                    struct translate_key *key );

struct draw_vs_variant *
draw_vs_create_variant_generic( struct draw_vertex_shader *vs,
                                const struct draw_vs_variant_key *key );



static INLINE int draw_vs_variant_keysize( const struct draw_vs_variant_key *key )
{
   return 2 * sizeof(int) + key->nr_elements * sizeof(struct draw_variant_element);
}

static INLINE int draw_vs_variant_key_compare( const struct draw_vs_variant_key *a,
                                         const struct draw_vs_variant_key *b )
{
   int keysize = draw_vs_variant_keysize(a);
   return memcmp(a, b, keysize);
}


#define MAX_TGSI_VERTICES 4
   


#endif
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d28 1
a28 1
/* Authors:  Keith Whitwell <keith@@tungstengraphics.com>
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d114 3
a116 1

a162 9
struct draw_vertex_shader *
draw_create_vs_sse(struct draw_context *draw,
		   const struct pipe_shader_state *templ);

struct draw_vertex_shader *
draw_create_vs_ppc(struct draw_context *draw,
		   const struct pipe_shader_state *templ);


a165 4
struct draw_vs_variant *
draw_vs_create_variant_aos_sse( struct draw_vertex_shader *vs,
                                const struct draw_vs_variant_key *key );

a203 12


struct aos_machine *draw_vs_aos_machine( void );
void draw_vs_aos_machine_destroy( struct aos_machine *machine );

void
draw_vs_aos_machine_constants(struct aos_machine *machine,
                              unsigned slot,
                              const void *constants);

void draw_vs_aos_machine_viewport( struct aos_machine *machine,
                                   const struct pipe_viewport_state *viewport );
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d42 1
a42 1
struct draw_varient_input 
d50 1
a50 1
struct draw_varient_output
d57 3
a59 3
struct draw_varient_element {
   struct draw_varient_input in;
   struct draw_varient_output out;
d62 1
a62 1
struct draw_vs_varient_key {
d70 1
a70 1
   struct draw_varient_element element[PIPE_MAX_ATTRIBS];
d73 1
a73 1
struct draw_vs_varient;
d76 2
a77 2
struct draw_vs_varient {
   struct draw_vs_varient_key key;
d81 1
a81 1
   void (*set_buffer)( struct draw_vs_varient *,
d87 1
a87 1
   void (PIPE_CDECL *run_linear)( struct draw_vs_varient *shader,
d92 1
a92 1
   void (PIPE_CDECL *run_elts)( struct draw_vs_varient *shader,
d97 1
a97 1
   void (*destroy)( struct draw_vs_varient * );
d121 5
a125 5
   struct draw_vs_varient *varient[16];
   unsigned nr_varients;
   unsigned last_varient;
   struct draw_vs_varient *(*create_varient)( struct draw_vertex_shader *shader,
                                              const struct draw_vs_varient_key *key );
d148 3
a150 3
struct draw_vs_varient *
draw_vs_lookup_varient( struct draw_vertex_shader *base,
                        const struct draw_vs_varient_key *key );
d170 1
a170 1
struct draw_vs_varient_key;
d173 3
a175 3
struct draw_vs_varient *
draw_vs_create_varient_aos_sse( struct draw_vertex_shader *vs,
                                const struct draw_vs_varient_key *key );
d185 1
a185 1
 * Helpers for vs implementations that don't do their own fetch/emit varients.
d198 3
a200 3
struct draw_vs_varient *
draw_vs_create_varient_generic( struct draw_vertex_shader *vs,
                                const struct draw_vs_varient_key *key );
d204 1
a204 1
static INLINE int draw_vs_varient_keysize( const struct draw_vs_varient_key *key )
d206 1
a206 1
   return 2 * sizeof(int) + key->nr_elements * sizeof(struct draw_varient_element);
d209 2
a210 2
static INLINE int draw_vs_varient_key_compare( const struct draw_vs_varient_key *a,
                                         const struct draw_vs_varient_key *b )
d212 1
a212 1
   int keysize = draw_vs_varient_keysize(a);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d36 1
d52 1
a52 1
   enum pipe_format format;     /* output format */
d84 2
a85 1
                      unsigned stride );
d137 2
a138 1
                      const void *constants[PIPE_MAX_CONSTANT_BUFFERS],
a168 5
struct draw_vertex_shader *
draw_create_vs_llvm(struct draw_context *draw,
		    const struct pipe_shader_state *templ);


d173 3
a175 2
struct draw_vs_varient *draw_vs_varient_aos_sse( struct draw_vertex_shader *vs,
                                                 const struct draw_vs_varient_key *key );
d177 5
d198 3
a200 2
struct draw_vs_varient *draw_vs_varient_generic( struct draw_vertex_shader *vs,
                                                 const struct draw_vs_varient_key *key );
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a35 1
#include "draw_vertex.h"
d51 1
a51 1
   enum attrib_emit format;     /* output format */
d83 1
a83 2
                      unsigned stride,
                      unsigned max_stride );
d135 1
a135 2
                       const void *constants[PIPE_MAX_CONSTANT_BUFFERS],
                       const unsigned const_size[PIPE_MAX_CONSTANT_BUFFERS],
d166 5
d175 2
a176 3
struct draw_vs_varient *
draw_vs_create_varient_aos_sse( struct draw_vertex_shader *vs,
                                const struct draw_vs_varient_key *key );
a177 5
#if HAVE_LLVM
struct draw_vertex_shader *
draw_create_vs_llvm(struct draw_context *draw,
		    const struct pipe_shader_state *state);
#endif
d194 2
a195 3
struct draw_vs_varient *
draw_vs_create_varient_generic( struct draw_vertex_shader *vs,
                                const struct draw_vs_varient_key *key );
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d42 1
a42 1
struct draw_variant_input 
d50 1
a50 1
struct draw_variant_output
d57 3
a59 3
struct draw_variant_element {
   struct draw_variant_input in;
   struct draw_variant_output out;
d62 1
a62 1
struct draw_vs_variant_key {
d70 1
a70 1
   struct draw_variant_element element[PIPE_MAX_ATTRIBS];
d73 1
a73 1
struct draw_vs_variant;
d76 2
a77 2
struct draw_vs_variant {
   struct draw_vs_variant_key key;
d81 1
a81 1
   void (*set_buffer)( struct draw_vs_variant *,
d87 1
a87 1
   void (PIPE_CDECL *run_linear)( struct draw_vs_variant *shader,
d92 1
a92 1
   void (PIPE_CDECL *run_elts)( struct draw_vs_variant *shader,
d97 1
a97 1
   void (*destroy)( struct draw_vs_variant * );
d114 1
a114 3
   unsigned clipvertex_output;
   unsigned clipdistance_output[PIPE_MAX_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT];
   unsigned culldistance_output[PIPE_MAX_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT];
d121 5
a125 5
   struct draw_vs_variant *variant[16];
   unsigned nr_variants;
   unsigned last_variant;
   struct draw_vs_variant *(*create_variant)( struct draw_vertex_shader *shader,
                                              const struct draw_vs_variant_key *key );
d148 3
a150 3
struct draw_vs_variant *
draw_vs_lookup_variant( struct draw_vertex_shader *base,
                        const struct draw_vs_variant_key *key );
d161 10
a170 1
struct draw_vs_variant_key;
d173 4
d185 1
a185 1
 * Helpers for vs implementations that don't do their own fetch/emit variants.
d198 3
a200 3
struct draw_vs_variant *
draw_vs_create_variant_generic( struct draw_vertex_shader *vs,
                                const struct draw_vs_variant_key *key );
d204 1
a204 1
static INLINE int draw_vs_variant_keysize( const struct draw_vs_variant_key *key )
d206 1
a206 1
   return 2 * sizeof(int) + key->nr_elements * sizeof(struct draw_variant_element);
d209 2
a210 2
static INLINE int draw_vs_variant_key_compare( const struct draw_vs_variant_key *a,
                                         const struct draw_vs_variant_key *b )
d212 1
a212 1
   int keysize = draw_vs_variant_keysize(a);
d215 12
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d28 1
a28 1
/* Authors:  Keith Whitwell <keithw@@vmware.com>
@


