head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2013.09.05.13.59.31;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.42;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@#define LOCAL_VARS                           \
   char *verts = (char *) vertices;          \
   const boolean quads_flatshade_last =      \
      draw->quads_always_flatshade_last;     \
   const boolean last_vertex_last =          \
      !(draw->rasterizer->flatshade &&       \
        draw->rasterizer->flatshade_first);

#include "draw_decompose_tmp.h"
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d3 2
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d1 5
d7 1
a7 181

static void FUNC( ARGS,
                  unsigned count )
{
   LOCAL_VARS;

   switch (prim) {
   case PIPE_PRIM_POINTS:
      for (i = 0; i < count; i ++) {
	 POINT( (i + 0) );
      }
      break;

   case PIPE_PRIM_LINES:
      for (i = 0; i+1 < count; i += 2) {
         LINE( DRAW_PIPE_RESET_STIPPLE,
               (i + 0),
               (i + 1));
      }
      break;

   case PIPE_PRIM_LINE_LOOP:
      if (count >= 2) {
         flags = DRAW_PIPE_RESET_STIPPLE;

         for (i = 1; i < count; i++, flags = 0) {
            LINE( flags,
                  (i - 1),
                  (i ));
         }

	 LINE( flags,
               (i - 1),
               (0 ));
      }
      break;

   case PIPE_PRIM_LINE_STRIP:
      flags = DRAW_PIPE_RESET_STIPPLE;
      for (i = 1; i < count; i++, flags = 0) {
         LINE( flags,
               (i - 1),
               (i ));
      }
      break;

   case PIPE_PRIM_TRIANGLES:
      for (i = 0; i+2 < count; i += 3) {
         if (flatfirst) {
            /* put provoking vertex in last pos for clipper */
            TRIANGLE( DRAW_PIPE_RESET_STIPPLE | DRAW_PIPE_EDGE_FLAG_ALL,
                      (i + 1),
                      (i + 2),
                      (i + 0 ));
         }
         else {
            TRIANGLE( DRAW_PIPE_RESET_STIPPLE | DRAW_PIPE_EDGE_FLAG_ALL,
                      (i + 0),
                      (i + 1),
                      (i + 2 ));
         }
      }
      break;

   case PIPE_PRIM_TRIANGLE_STRIP:
      if (flatfirst) {
         for (i = 0; i+2 < count; i++) {
            TRIANGLE( DRAW_PIPE_RESET_STIPPLE | DRAW_PIPE_EDGE_FLAG_ALL,
                      (i + 1 + (i&1)),
                      (i + 2 - (i&1)),
                      (i + 0) );
         }
      }
      else {
         for (i = 0; i+2 < count; i++) {
            TRIANGLE( DRAW_PIPE_RESET_STIPPLE | DRAW_PIPE_EDGE_FLAG_ALL,
                      (i + 0 + (i&1)),
                      (i + 1 - (i&1)),
                      (i + 2 ));
         }
      }
      break;

   case PIPE_PRIM_TRIANGLE_FAN:
      if (count >= 3) {
         if (flatfirst) {
            for (i = 0; i+2 < count; i++) {
               TRIANGLE( DRAW_PIPE_RESET_STIPPLE | DRAW_PIPE_EDGE_FLAG_ALL,
                         (i + 2),
                         0,
                         (i + 1) );
            }
         }
         else {
            for (i = 0; i+2 < count; i++) {
               TRIANGLE( DRAW_PIPE_RESET_STIPPLE | DRAW_PIPE_EDGE_FLAG_ALL,
                         (0),
                         (i + 1),
                         (i + 2 ));
            }
         }
      }
      break;


   case PIPE_PRIM_QUADS:
      if (flatfirst) {
         for (i = 0; i+3 < count; i += 4) {
            QUAD( (i + 1),
                  (i + 2),
                  (i + 3),
                  (i + 0) );
         }
      }
      else {
         for (i = 0; i+3 < count; i += 4) {
            QUAD( (i + 0),
                  (i + 1),
                  (i + 2),
                  (i + 3));
         }
      }
      break;

   case PIPE_PRIM_QUAD_STRIP:
      if (flatfirst) {
         for (i = 0; i+3 < count; i += 2) {
            QUAD( (i + 1),
                  (i + 3),
                  (i + 2),
                  (i + 0) );
         }
      }
      else {
         for (i = 0; i+3 < count; i += 2) {
            QUAD( (i + 2),
                  (i + 0),
                  (i + 1),
                  (i + 3));
         }
      }
      break;

   case PIPE_PRIM_POLYGON:
      {
         /* These bitflags look a little odd because we submit the
          * vertices as (1,2,0) to satisfy flatshade requirements.
          */
         const ushort edge_first  = DRAW_PIPE_EDGE_FLAG_2;
         const ushort edge_middle = DRAW_PIPE_EDGE_FLAG_0;
         const ushort edge_last   = DRAW_PIPE_EDGE_FLAG_1;

         flags = DRAW_PIPE_RESET_STIPPLE | edge_first | edge_middle;

	 for (i = 0; i+2 < count; i++, flags = edge_middle) {

            if (i + 3 == count)
               flags |= edge_last;

	    TRIANGLE( flags,
                      (i + 1),
                      (i + 2),
                      (0));
	 }
      }
      break;

   default:
      assert(0);
      break;
   }

   FLUSH;
}


#undef TRIANGLE
#undef QUAD
#undef POINT
#undef LINE
#undef FUNC
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a0 5
#define LOCAL_VARS                           \
   char *verts = (char *) vertices;          \
   const boolean last_vertex_last =          \
      !(draw->rasterizer->flatshade &&       \
        draw->rasterizer->flatshade_first);
d2 181
a182 1
#include "draw_decompose_tmp.h"
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a2 2
   const boolean quads_flatshade_last =      \
      draw->quads_always_flatshade_last;     \
@


