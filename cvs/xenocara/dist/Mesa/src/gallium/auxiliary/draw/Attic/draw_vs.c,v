head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.32;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.46;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.42;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  *   Brian Paul
  */

#include "util/u_math.h"
#include "util/u_memory.h"

#include "pipe/p_shader_tokens.h"

#include "draw_private.h"
#include "draw_context.h"
#include "draw_vs.h"

#include "translate/translate.h"
#include "translate/translate_cache.h"

#include "tgsi/tgsi_dump.h"
#include "tgsi/tgsi_exec.h"

DEBUG_GET_ONCE_BOOL_OPTION(gallium_dump_vs, "GALLIUM_DUMP_VS", FALSE)


struct draw_vertex_shader *
draw_create_vertex_shader(struct draw_context *draw,
                          const struct pipe_shader_state *shader)
{
   struct draw_vertex_shader *vs = NULL;

   if (draw->dump_vs) {
      tgsi_dump(shader->tokens, 0);
   }

#if HAVE_LLVM
   if (draw->pt.middle.llvm) {
      vs = draw_create_vs_llvm(draw, shader);
   }
#endif

   if (!vs) {
      vs = draw_create_vs_exec( draw, shader );
   }

   if (vs)
   {
      uint i;
      bool found_clipvertex = FALSE;
      vs->position_output = -1;
      for (i = 0; i < vs->info.num_outputs; i++) {
         if (vs->info.output_semantic_name[i] == TGSI_SEMANTIC_POSITION &&
             vs->info.output_semantic_index[i] == 0)
            vs->position_output = i;
         else if (vs->info.output_semantic_name[i] == TGSI_SEMANTIC_EDGEFLAG &&
             vs->info.output_semantic_index[i] == 0)
            vs->edgeflag_output = i;
         else if (vs->info.output_semantic_name[i] == TGSI_SEMANTIC_CLIPVERTEX &&
                  vs->info.output_semantic_index[i] == 0) {
            found_clipvertex = TRUE;
            vs->clipvertex_output = i;
         } else if (vs->info.output_semantic_name[i] == TGSI_SEMANTIC_CLIPDIST) {
            debug_assert(vs->info.output_semantic_index[i] <
                         PIPE_MAX_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT);
            vs->clipdistance_output[vs->info.output_semantic_index[i]] = i;
         } else if (vs->info.output_semantic_name[i] == TGSI_SEMANTIC_CULLDIST) {
            debug_assert(vs->info.output_semantic_index[i] <
                         PIPE_MAX_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT);
            vs->culldistance_output[vs->info.output_semantic_index[i]] = i;
         }
      }
      if (!found_clipvertex)
         vs->clipvertex_output = vs->position_output;
   }

   assert(vs);
   return vs;
}


void
draw_bind_vertex_shader(struct draw_context *draw,
                        struct draw_vertex_shader *dvs)
{
   draw_do_flush( draw, DRAW_FLUSH_STATE_CHANGE );
   
   if (dvs) 
   {
      draw->vs.vertex_shader = dvs;
      draw->vs.num_vs_outputs = dvs->info.num_outputs;
      draw->vs.position_output = dvs->position_output;
      draw->vs.edgeflag_output = dvs->edgeflag_output;
      draw->vs.clipvertex_output = dvs->clipvertex_output;
      draw->vs.clipdistance_output[0] = dvs->clipdistance_output[0];
      draw->vs.clipdistance_output[1] = dvs->clipdistance_output[1];
      dvs->prepare( dvs, draw );
   }
   else {
      draw->vs.vertex_shader = NULL;
      draw->vs.num_vs_outputs = 0;
   }
}


void
draw_delete_vertex_shader(struct draw_context *draw,
                          struct draw_vertex_shader *dvs)
{
   unsigned i;

   for (i = 0; i < dvs->nr_variants; i++) 
      dvs->variant[i]->destroy( dvs->variant[i] );

   dvs->nr_variants = 0;

   dvs->delete( dvs );
}



boolean 
draw_vs_init( struct draw_context *draw )
{
   draw->dump_vs = debug_get_option_gallium_dump_vs();

   if (!draw->llvm) {
      draw->vs.tgsi.machine = tgsi_exec_machine_create();
      if (!draw->vs.tgsi.machine)
         return FALSE;
   }

   draw->vs.emit_cache = translate_cache_create();
   if (!draw->vs.emit_cache) 
      return FALSE;
      
   draw->vs.fetch_cache = translate_cache_create();
   if (!draw->vs.fetch_cache) 
      return FALSE;

   return TRUE;
}

void
draw_vs_destroy( struct draw_context *draw )
{
   if (draw->vs.fetch_cache)
      translate_cache_destroy(draw->vs.fetch_cache);

   if (draw->vs.emit_cache)
      translate_cache_destroy(draw->vs.emit_cache);

   if (!draw->llvm)
      tgsi_exec_machine_destroy(draw->vs.tgsi.machine);
}


struct draw_vs_variant *
draw_vs_lookup_variant( struct draw_vertex_shader *vs,
                        const struct draw_vs_variant_key *key )
{
   struct draw_vs_variant *variant;
   unsigned i;

   /* Lookup existing variant: 
    */
   for (i = 0; i < vs->nr_variants; i++)
      if (draw_vs_variant_key_compare(key, &vs->variant[i]->key) == 0)
         return vs->variant[i];
   
   /* Else have to create a new one: 
    */
   variant = vs->create_variant( vs, key );
   if (variant == NULL)
      return NULL;

   /* Add it to our list, could be smarter: 
    */
   if (vs->nr_variants < Elements(vs->variant)) {
      vs->variant[vs->nr_variants++] = variant;
   }
   else {
      vs->last_variant++;
      vs->last_variant %= Elements(vs->variant);
      vs->variant[vs->last_variant]->destroy(vs->variant[vs->last_variant]);
      vs->variant[vs->last_variant] = variant;
   }

   /* Done 
    */
   return variant;
}


struct translate *
draw_vs_get_fetch( struct draw_context *draw,
                   struct translate_key *key )
{
   if (!draw->vs.fetch ||
       translate_key_compare(&draw->vs.fetch->key, key) != 0) 
   {
      translate_key_sanitize(key);
      draw->vs.fetch = translate_cache_find(draw->vs.fetch_cache, key);
   }
   
   return draw->vs.fetch;
}

struct translate *
draw_vs_get_emit( struct draw_context *draw,
                  struct translate_key *key )
{
   if (!draw->vs.emit ||
       translate_key_compare(&draw->vs.emit->key, key) != 0) 
   {
      translate_key_sanitize(key);
      draw->vs.emit = translate_cache_find(draw->vs.emit_cache, key);
   }
   
   return draw->vs.emit;
}

void
draw_vs_attach_so(struct draw_vertex_shader *dvs,
                  const struct pipe_stream_output_info *info)
{
   dvs->state.stream_output = *info;
}

void
draw_vs_reset_so(struct draw_vertex_shader *dvs)
{
   memset(&dvs->state.stream_output, 0, sizeof(dvs->state.stream_output));
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d152 5
a156 3
   draw->vs.tgsi.machine = tgsi_exec_machine_create();
   if (!draw->vs.tgsi.machine)
      return FALSE;
d178 2
a179 1
   tgsi_exec_machine_destroy(draw->vs.tgsi.machine);
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a51 44
/**
 * Set a vertex shader constant buffer.
 * \param slot  which constant buffer in [0, PIPE_MAX_CONSTANT_BUFFERS-1]
 * \param constants  the mapped buffer
 * \param size  size of buffer in bytes
 */
void
draw_vs_set_constants(struct draw_context *draw,
                      unsigned slot,
                      const void *constants,
                      unsigned size)
{
   const int alignment = 16;

   /* check if buffer is 16-byte aligned */
   if (((uintptr_t)constants) & (alignment - 1)) {
      /* if not, copy the constants into a new, 16-byte aligned buffer */
      if (size > draw->vs.const_storage_size[slot]) {
         if (draw->vs.aligned_constant_storage[slot]) {
            align_free((void *)draw->vs.aligned_constant_storage[slot]);
         }
         draw->vs.aligned_constant_storage[slot] =
            align_malloc(size, alignment);
      }
      assert(constants);
      memcpy((void *)draw->vs.aligned_constant_storage[slot],
             constants,
             size);
      constants = draw->vs.aligned_constant_storage[slot];
   }

   draw->vs.aligned_constants[slot] = constants;
   draw_vs_aos_machine_constants(draw->vs.aos_machine, slot, constants);
}


void draw_vs_set_viewport( struct draw_context *draw,
                           const struct pipe_viewport_state *viewport )
{
   draw_vs_aos_machine_viewport( draw->vs.aos_machine, viewport );
}



a61 14
   if (!draw->pt.middle.llvm) {
#if 0
/* these paths don't support vertex clamping
 * TODO: either add it, or remove them completely
 * use LLVM instead if you want performance
 * use exec instead if you want debugging/more correctness
 */
#if defined(PIPE_ARCH_X86)
      vs = draw_create_vs_sse( draw, shader );
#elif defined(PIPE_ARCH_PPC)
      vs = draw_create_vs_ppc( draw, shader );
#endif
#endif
   }
d63 1
a63 1
   else {
d75 2
d84 13
d98 2
d119 3
d152 2
a153 2
   draw->vs.machine = tgsi_exec_machine_create();
   if (!draw->vs.machine)
a163 6
   draw->vs.aos_machine = draw_vs_aos_machine();
#ifdef PIPE_ARCH_X86
   if (!draw->vs.aos_machine)
      return FALSE;
#endif
      
a169 2
   uint i;

d176 1
a176 10
   if (draw->vs.aos_machine)
      draw_vs_aos_machine_destroy(draw->vs.aos_machine);

   for (i = 0; i < PIPE_MAX_CONSTANT_BUFFERS; i++) {
      if (draw->vs.aligned_constant_storage[i]) {
         align_free((void *)draw->vs.aligned_constant_storage[i]);
      }
   }

   tgsi_exec_machine_destroy(draw->vs.machine);
d243 13
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d107 6
d118 1
d175 2
a176 2
   for (i = 0; i < dvs->nr_varients; i++) 
      dvs->varient[i]->destroy( dvs->varient[i] );
d178 1
a178 1
   dvs->nr_varients = 0;
d235 3
a237 3
struct draw_vs_varient *
draw_vs_lookup_varient( struct draw_vertex_shader *vs,
                        const struct draw_vs_varient_key *key )
d239 1
a239 1
   struct draw_vs_varient *varient;
d242 1
a242 1
   /* Lookup existing varient: 
d244 3
a246 3
   for (i = 0; i < vs->nr_varients; i++)
      if (draw_vs_varient_key_compare(key, &vs->varient[i]->key) == 0)
         return vs->varient[i];
d250 2
a251 2
   varient = vs->create_varient( vs, key );
   if (varient == NULL)
d256 2
a257 2
   if (vs->nr_varients < Elements(vs->varient)) {
      vs->varient[vs->nr_varients++] = varient;
d260 4
a263 4
      vs->last_varient++;
      vs->last_varient %= Elements(vs->varient);
      vs->varient[vs->last_varient]->destroy(vs->varient[vs->last_varient]);
      vs->varient[vs->last_varient] = varient;
d268 1
a268 1
   return varient;
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d49 1
d52 6
d64 5
a68 1
   if (((uintptr_t)constants) & 0xf) {
d73 2
a74 1
         draw->vs.aligned_constant_storage[slot] = align_malloc(size, 16);
d100 1
a100 1
   struct draw_vertex_shader *vs;
d106 13
a118 1
   vs = draw_create_vs_llvm( draw, shader );
d120 1
a120 7
      vs = draw_create_vs_sse( draw, shader );
      if (!vs) {
         vs = draw_create_vs_ppc( draw, shader );
         if (!vs) {
            vs = draw_create_vs_exec( draw, shader );
         }
      }
d181 1
a181 1
   draw->dump_vs = debug_get_bool_option("GALLIUM_DUMP_VS", FALSE);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a48 1
DEBUG_GET_ONCE_BOOL_OPTION(gallium_dump_vs, "GALLIUM_DUMP_VS", FALSE)
a50 6
/**
 * Set a vertex shader constant buffer.
 * \param slot  which constant buffer in [0, PIPE_MAX_CONSTANT_BUFFERS-1]
 * \param constants  the mapped buffer
 * \param size  size of buffer in bytes
 */
d57 1
a57 5
   const int alignment = 16;

   /* check if buffer is 16-byte aligned */
   if (((uintptr_t)constants) & (alignment - 1)) {
      /* if not, copy the constants into a new, 16-byte aligned buffer */
d62 1
a62 2
         draw->vs.aligned_constant_storage[slot] =
            align_malloc(size, alignment);
d88 1
a88 1
   struct draw_vertex_shader *vs = NULL;
d94 2
a95 2
   if (!draw->pt.middle.llvm) {
#if defined(PIPE_ARCH_X86)
d97 6
a102 12
#elif defined(PIPE_ARCH_PPC)
      vs = draw_create_vs_ppc( draw, shader );
#endif
   }
#if HAVE_LLVM
   else {
      vs = draw_create_vs_llvm(draw, shader);
   }
#endif

   if (!vs) {
      vs = draw_create_vs_exec( draw, shader );
d163 1
a163 1
   draw->dump_vs = debug_get_option_gallium_dump_vs();
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d52 44
d106 7
d114 1
a114 1
   if (draw->pt.middle.llvm) {
a125 2
      bool found_clipvertex = FALSE;
      vs->position_output = -1;
a132 13
         else if (vs->info.output_semantic_name[i] == TGSI_SEMANTIC_CLIPVERTEX &&
                  vs->info.output_semantic_index[i] == 0) {
            found_clipvertex = TRUE;
            vs->clipvertex_output = i;
         } else if (vs->info.output_semantic_name[i] == TGSI_SEMANTIC_CLIPDIST) {
            debug_assert(vs->info.output_semantic_index[i] <
                         PIPE_MAX_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT);
            vs->clipdistance_output[vs->info.output_semantic_index[i]] = i;
         } else if (vs->info.output_semantic_name[i] == TGSI_SEMANTIC_CULLDIST) {
            debug_assert(vs->info.output_semantic_index[i] <
                         PIPE_MAX_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT);
            vs->culldistance_output[vs->info.output_semantic_index[i]] = i;
         }
a133 2
      if (!found_clipvertex)
         vs->clipvertex_output = vs->position_output;
a152 3
      draw->vs.clipvertex_output = dvs->clipvertex_output;
      draw->vs.clipdistance_output[0] = dvs->clipdistance_output[0];
      draw->vs.clipdistance_output[1] = dvs->clipdistance_output[1];
d168 2
a169 2
   for (i = 0; i < dvs->nr_variants; i++) 
      dvs->variant[i]->destroy( dvs->variant[i] );
d171 1
a171 1
   dvs->nr_variants = 0;
d183 2
a184 2
   draw->vs.tgsi.machine = tgsi_exec_machine_create();
   if (!draw->vs.tgsi.machine)
d195 6
d207 2
d215 10
a224 1
   tgsi_exec_machine_destroy(draw->vs.tgsi.machine);
d228 3
a230 3
struct draw_vs_variant *
draw_vs_lookup_variant( struct draw_vertex_shader *vs,
                        const struct draw_vs_variant_key *key )
d232 1
a232 1
   struct draw_vs_variant *variant;
d235 1
a235 1
   /* Lookup existing variant: 
d237 3
a239 3
   for (i = 0; i < vs->nr_variants; i++)
      if (draw_vs_variant_key_compare(key, &vs->variant[i]->key) == 0)
         return vs->variant[i];
d243 2
a244 2
   variant = vs->create_variant( vs, key );
   if (variant == NULL)
d249 2
a250 2
   if (vs->nr_variants < Elements(vs->variant)) {
      vs->variant[vs->nr_variants++] = variant;
d253 4
a256 4
      vs->last_variant++;
      vs->last_variant %= Elements(vs->variant);
      vs->variant[vs->last_variant]->destroy(vs->variant[vs->last_variant]);
      vs->variant[vs->last_variant] = variant;
d261 1
a261 1
   return variant;
a290 13
}

void
draw_vs_attach_so(struct draw_vertex_shader *dvs,
                  const struct pipe_stream_output_info *info)
{
   dvs->state.stream_output = *info;
}

void
draw_vs_reset_so(struct draw_vertex_shader *dvs)
{
   memset(&dvs->state.stream_output, 0, sizeof(dvs->state.stream_output));
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keithw@@vmware.com>
d152 3
a154 5
   if (!draw->llvm) {
      draw->vs.tgsi.machine = tgsi_exec_machine_create();
      if (!draw->vs.tgsi.machine)
         return FALSE;
   }
d176 1
a176 2
   if (!draw->llvm)
      tgsi_exec_machine_destroy(draw->vs.tgsi.machine);
@


