head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.13.59.30;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.03;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.41;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.41;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/**
 * \brief  polygon offset state
 *
 * \author  Keith Whitwell <keithw@@vmware.com>
 * \author  Brian Paul
 */

#include "util/u_format.h"
#include "util/u_math.h"
#include "util/u_memory.h"
#include "draw_pipe.h"



struct offset_stage {
   struct draw_stage stage;

   float scale;
   float units;
   float clamp;
};



static INLINE struct offset_stage *offset_stage( struct draw_stage *stage )
{
   return (struct offset_stage *) stage;
}





/**
 * Offset tri Z.  Some hardware can handle this, but not usually when
 * doing unfilled rendering.
 */
static void do_offset_tri( struct draw_stage *stage,
			   struct prim_header *header )
{
   const unsigned pos = draw_current_shader_position_output(stage->draw);
   struct offset_stage *offset = offset_stage(stage);   
   float inv_det = 1.0f / header->det;

   /* Window coords:
    */
   float *v0 = header->v[0]->data[pos];
   float *v1 = header->v[1]->data[pos];
   float *v2 = header->v[2]->data[pos];

   /* edge vectors e = v0 - v2, f = v1 - v2 */
   float ex = v0[0] - v2[0];
   float ey = v0[1] - v2[1];
   float ez = v0[2] - v2[2];
   float fx = v1[0] - v2[0];
   float fy = v1[1] - v2[1];
   float fz = v1[2] - v2[2];

   /* (a,b) = cross(e,f).xy */
   float a = ey*fz - ez*fy;
   float b = ez*fx - ex*fz;

   float dzdx = fabsf(a * inv_det);
   float dzdy = fabsf(b * inv_det);

   float zoffset, mult;

   mult = MAX2(dzdx, dzdy) * offset->scale;

   if (stage->draw->floating_point_depth) {
      float bias;
      union fi maxz;
      maxz.f = MAX3(v0[2], v1[2], v2[2]);
      /* just do the math directly on shifted number */
      maxz.ui &= 0xff << 23;
      maxz.i -= 23 << 23;
      /* Clamping to zero means mrd will be zero for very small numbers,
       * but specs do not indicate this should be prevented by clamping
       * mrd to smallest normal number instead. */
      maxz.i = MAX2(maxz.i, 0);

      bias = offset->units * maxz.f;
      zoffset = bias + mult;
   } else {
      zoffset = offset->units + mult;
   }

   if (offset->clamp)
      zoffset = (offset->clamp < 0.0f) ? MAX2(zoffset, offset->clamp) :
                                         MIN2(zoffset, offset->clamp);

   /*
    * Note: we're applying the offset and clamping per-vertex.
    * Ideally, the offset is applied per-fragment prior to fragment shading.
    */
   v0[2] = CLAMP(v0[2] + zoffset, 0.0f, 1.0f);
   v1[2] = CLAMP(v1[2] + zoffset, 0.0f, 1.0f);
   v2[2] = CLAMP(v2[2] + zoffset, 0.0f, 1.0f);

   stage->next->tri( stage->next, header );
}


static void offset_tri( struct draw_stage *stage,
			struct prim_header *header )
{
   struct prim_header tmp;

   tmp.det = header->det;
   tmp.flags = header->flags;
   tmp.pad = header->pad;
   tmp.v[0] = dup_vert(stage, header->v[0], 0);
   tmp.v[1] = dup_vert(stage, header->v[1], 1);
   tmp.v[2] = dup_vert(stage, header->v[2], 2);

   do_offset_tri( stage, &tmp );
}


static void offset_first_tri( struct draw_stage *stage, 
			      struct prim_header *header )
{
   struct offset_stage *offset = offset_stage(stage);
   const struct pipe_rasterizer_state *rast = stage->draw->rasterizer;
   unsigned fill_mode = rast->fill_front;
   boolean do_offset;

   if (rast->fill_back != rast->fill_front) {
      /* Need to check for back-facing triangle */
      boolean ccw = header->det < 0.0f;
      if (ccw != rast->front_ccw)
         fill_mode = rast->fill_back;
   }

   /* Now determine if we need to do offsetting for the point/line/fill mode */
   switch (fill_mode) {
   case PIPE_POLYGON_MODE_FILL:
      do_offset = rast->offset_tri;
      break;
   case PIPE_POLYGON_MODE_LINE:
      do_offset = rast->offset_line;
      break;
   case PIPE_POLYGON_MODE_POINT:
      do_offset = rast->offset_point;
      break;
   default:
      assert(!"invalid fill_mode in offset_first_tri()");
      do_offset = rast->offset_tri;
   }

   if (do_offset) {
      offset->scale = rast->offset_scale;
      offset->clamp = rast->offset_clamp;

      /*
       * If depth is floating point, depth bias is calculated with respect
       * to the primitive's maximum Z value. Retain the original depth bias
       * value until that stage.
       */
      if (stage->draw->floating_point_depth) {
         offset->units = (float) rast->offset_units;
      } else {
         offset->units = (float) (rast->offset_units * stage->draw->mrd);
      }
   }
   else {
      offset->scale = 0.0f;
      offset->clamp = 0.0f;
      offset->units = 0.0f;
   }


   stage->tri = offset_tri;
   stage->tri( stage, header );
}




static void offset_flush( struct draw_stage *stage,
			  unsigned flags )
{
   stage->tri = offset_first_tri;
   stage->next->flush( stage->next, flags );
}


static void offset_reset_stipple_counter( struct draw_stage *stage )
{
   stage->next->reset_stipple_counter( stage->next );
}


static void offset_destroy( struct draw_stage *stage )
{
   draw_free_temp_verts( stage );
   FREE( stage );
}


/**
 * Create polygon offset drawing stage.
 */
struct draw_stage *draw_offset_stage( struct draw_context *draw )
{
   struct offset_stage *offset = CALLOC_STRUCT(offset_stage);
   if (offset == NULL)
      goto fail;

   offset->stage.draw = draw;
   offset->stage.name = "offset";
   offset->stage.next = NULL;
   offset->stage.point = draw_pipe_passthrough_point;
   offset->stage.line = draw_pipe_passthrough_line;
   offset->stage.tri = offset_first_tri;
   offset->stage.flush = offset_flush;
   offset->stage.reset_stipple_counter = offset_reset_stipple_counter;
   offset->stage.destroy = offset_destroy;

   if (!draw_alloc_temp_verts( &offset->stage, 3 ))
      goto fail;

   return &offset->stage;

fail:
   if (offset)
      offset->stage.destroy( &offset->stage );

   return NULL;
}
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d31 1
a31 1
 * \author  Keith Whitwell <keith@@tungstengraphics.com>
d35 1
d93 21
a113 1
   float zoffset = offset->units + MAX2(dzdx, dzdy) * offset->scale;
d181 11
a191 1
      offset->units = (float) (rast->offset_units * stage->draw->mrd);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d46 1
d94 4
d130 37
a167 2
   offset->units = (float) (stage->draw->rasterizer->offset_units * stage->draw->mrd);
   offset->scale = stage->draw->rasterizer->offset_scale;
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d164 1
a164 3
      return NULL;

   draw_alloc_temp_verts( &offset->stage, 3 );
d176 3
d180 6
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d164 3
a166 1
      goto fail;
a177 3
   if (!draw_alloc_temp_verts( &offset->stage, 3 ))
      goto fail;

a178 6

fail:
   if (offset)
      offset->stage.destroy( &offset->stage );

   return NULL;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a45 1
   float clamp;
a92 4
   if (offset->clamp)
      zoffset = (offset->clamp < 0.0f) ? MAX2(zoffset, offset->clamp) :
                                         MIN2(zoffset, offset->clamp);

a124 37
   const struct pipe_rasterizer_state *rast = stage->draw->rasterizer;
   unsigned fill_mode = rast->fill_front;
   boolean do_offset;

   if (rast->fill_back != rast->fill_front) {
      /* Need to check for back-facing triangle */
      boolean ccw = header->det < 0.0f;
      if (ccw != rast->front_ccw)
         fill_mode = rast->fill_back;
   }

   /* Now determine if we need to do offsetting for the point/line/fill mode */
   switch (fill_mode) {
   case PIPE_POLYGON_MODE_FILL:
      do_offset = rast->offset_tri;
      break;
   case PIPE_POLYGON_MODE_LINE:
      do_offset = rast->offset_line;
      break;
   case PIPE_POLYGON_MODE_POINT:
      do_offset = rast->offset_point;
      break;
   default:
      assert(!"invalid fill_mode in offset_first_tri()");
      do_offset = rast->offset_tri;
   }

   if (do_offset) {
      offset->scale = rast->offset_scale;
      offset->clamp = rast->offset_clamp;
      offset->units = (float) (rast->offset_units * stage->draw->mrd);
   }
   else {
      offset->scale = 0.0f;
      offset->clamp = 0.0f;
      offset->units = 0.0f;
   }
d126 2
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d31 1
a31 1
 * \author  Keith Whitwell <keithw@@vmware.com>
a34 1
#include "util/u_format.h"
d92 1
a92 21
   float zoffset, mult;

   mult = MAX2(dzdx, dzdy) * offset->scale;

   if (stage->draw->floating_point_depth) {
      float bias;
      union fi maxz;
      maxz.f = MAX3(v0[2], v1[2], v2[2]);
      /* just do the math directly on shifted number */
      maxz.ui &= 0xff << 23;
      maxz.i -= 23 << 23;
      /* Clamping to zero means mrd will be zero for very small numbers,
       * but specs do not indicate this should be prevented by clamping
       * mrd to smallest normal number instead. */
      maxz.i = MAX2(maxz.i, 0);

      bias = offset->units * maxz.f;
      zoffset = bias + mult;
   } else {
      zoffset = offset->units + mult;
   }
d160 1
a160 11

      /*
       * If depth is floating point, depth bias is calculated with respect
       * to the primitive's maximum Z value. Retain the original depth bias
       * value until that stage.
       */
      if (stage->draw->floating_point_depth) {
         offset->units = (float) rast->offset_units;
      } else {
         offset->units = (float) (rast->offset_units * stage->draw->mrd);
      }
@


