head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.13.59.31;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.42;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.42;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */

#ifndef DRAW_PT_H
#define DRAW_PT_H

#include "pipe/p_compiler.h"

struct draw_pt_middle_end;
struct draw_context;
struct draw_prim_info;
struct draw_vertex_info;


#define PT_SHADE      0x1
#define PT_CLIPTEST   0x2
#define PT_PIPELINE   0x4
#define PT_MAX_MIDDLE 0x8


/* The "front end" - prepare sets of fetch, draw elements for the
 * middle end.
 *
 * The fetch elements are indices to the vertices.  The draw elements are
 * indices to the fetched vertices.  When both arrays of elements are both
 * linear, middle->run_linear is called;  When only the fetch elements are
 * linear, middle->run_linear_elts is called;  Otherwise, middle->run is
 * called.
 *
 * When the number of the draw elements exceeds max_vertex of the middle end,
 * the draw elements (as well as the fetch elements) are splitted and the
 * middle end is called multiple times.
 *
 * Currenly there is:
 *    - vsplit - catchall implementation, splits big prims
 */
struct draw_pt_front_end {
   void (*prepare)( struct draw_pt_front_end *,
                    unsigned prim,
                    struct draw_pt_middle_end *,
		    unsigned opt );

   void (*run)( struct draw_pt_front_end *,
                unsigned start,
                unsigned count );

   void (*flush)( struct draw_pt_front_end *, unsigned flags );
   void (*destroy)( struct draw_pt_front_end * );
};


/* The "middle end" - prepares actual hardware vertices for the
 * hardware backend.
 *
 * prim_flags is as defined by pipe_draw_info::flags.
 *
 * Currently two versions of this:
 *     - fetch, vertex shade, cliptest, prim-pipeline
 *     - fetch, emit (ie passthrough)
 */
struct draw_pt_middle_end {
   void (*prepare)( struct draw_pt_middle_end *,
                    unsigned prim,
		    unsigned opt,
                    unsigned *max_vertices );

   /**
    * Bind/update parameter state such as constants, viewport dims
    * and clip planes.  Basically, stuff which isn't "baked" into the
    * shader or pipeline state.
    */
   void (*bind_parameters)(struct draw_pt_middle_end *);

   void (*run)( struct draw_pt_middle_end *,
                const unsigned *fetch_elts,
                unsigned fetch_count,
                const ushort *draw_elts,
                unsigned draw_count,
                unsigned prim_flags );

   void (*run_linear)(struct draw_pt_middle_end *,
                      unsigned start,
                      unsigned count,
                      unsigned prim_flags );

   /* Transform all vertices in a linear range and then draw them with
    * the supplied element list.  May fail and return FALSE.
    */
   boolean (*run_linear_elts)( struct draw_pt_middle_end *,
                            unsigned fetch_start,
                            unsigned fetch_count,
                            const ushort *draw_elts,
                            unsigned draw_count,
                            unsigned prim_flags );

   int (*get_max_vertex_count)( struct draw_pt_middle_end * );

   void (*finish)( struct draw_pt_middle_end * );
   void (*destroy)( struct draw_pt_middle_end * );
};


/* The "back end" - supplied by the driver, defined in draw_vbuf.h.
 */
struct vbuf_render;
struct vertex_header;


/* Frontends: 
 *
 * Currently only the general-purpose vsplit implementation.
 */
struct draw_pt_front_end *draw_pt_vsplit(struct draw_context *draw);


/* Middle-ends:
 *
 * Currently one general-purpose case which can do all possibilities,
 * at the slight expense of creating a vertex_header in some cases
 * unecessarily.
 *
 * The special case fetch_emit code avoids pipeline vertices
 * altogether and builds hardware vertices directly from API
 * vertex_elements.
 */
struct draw_pt_middle_end *draw_pt_fetch_emit( struct draw_context *draw );
struct draw_pt_middle_end *draw_pt_middle_fse( struct draw_context *draw );
struct draw_pt_middle_end *draw_pt_fetch_pipeline_or_emit(struct draw_context *draw);
struct draw_pt_middle_end *draw_pt_fetch_pipeline_or_emit_llvm(struct draw_context *draw);



/*******************************************************************************
 * HW vertex emit:
 */
struct pt_emit;

void draw_pt_emit_prepare( struct pt_emit *emit,
			   unsigned prim,
                           unsigned *max_vertices );

void draw_pt_emit( struct pt_emit *emit,
                   const struct draw_vertex_info *vert_info,
                   const struct draw_prim_info *prim_info);

void draw_pt_emit_linear( struct pt_emit *emit,
                          const struct draw_vertex_info *vert_info,
                          const struct draw_prim_info *prim_info);

void draw_pt_emit_destroy( struct pt_emit *emit );

struct pt_emit *draw_pt_emit_create( struct draw_context *draw );

/*******************************************************************************
 * HW stream output emit:
 */
struct pt_so_emit;

void draw_pt_so_emit_prepare(struct pt_so_emit *emit, boolean use_pre_clip_pos);

void draw_pt_so_emit( struct pt_so_emit *emit,
                      const struct draw_vertex_info *vert_info,
                      const struct draw_prim_info *prim_info );

void draw_pt_so_emit_destroy( struct pt_so_emit *emit );

struct pt_so_emit *draw_pt_so_emit_create( struct draw_context *draw );

/*******************************************************************************
 * API vertex fetch:
 */

struct pt_fetch;
void draw_pt_fetch_prepare( struct pt_fetch *fetch,
                            unsigned vertex_input_count,
                            unsigned vertex_size,
                            unsigned instance_id_index );

void draw_pt_fetch_run( struct pt_fetch *fetch,
			const unsigned *elts,
			unsigned count,
			char *verts );

void draw_pt_fetch_run_linear( struct pt_fetch *fetch,
                               unsigned start,
                               unsigned count,
                               char *verts );

void draw_pt_fetch_destroy( struct pt_fetch *fetch );

struct pt_fetch *draw_pt_fetch_create( struct draw_context *draw );

/*******************************************************************************
 * Post-VS: cliptest, rhw, viewport
 */
struct pt_post_vs;

boolean draw_pt_post_vs_run( struct pt_post_vs *pvs,
			     struct draw_vertex_info *info,
                             const struct draw_prim_info *prim_info );

void draw_pt_post_vs_prepare( struct pt_post_vs *pvs,
			      boolean clip_xy,
			      boolean clip_z,
			      boolean clip_user,
                              boolean guard_band,
			      boolean bypass_viewport,
                              boolean clip_halfz,
			      boolean need_edgeflags );

struct pt_post_vs *draw_pt_post_vs_create( struct draw_context *draw );

void draw_pt_post_vs_destroy( struct pt_post_vs *pvs );


/*******************************************************************************
 * Utils: 
 */
void draw_pt_split_prim(unsigned prim, unsigned *first, unsigned *incr);
unsigned draw_pt_trim_count(unsigned count, unsigned first, unsigned incr);


#endif
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d76 1
a76 1
   void (*finish)( struct draw_pt_front_end * );
d96 7
d188 1
a188 1
void draw_pt_so_emit_prepare( struct pt_so_emit *emit );
d228 2
a229 1
			     struct draw_vertex_info *info );
d235 1
d237 1
a237 1
			      boolean opengl,
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a37 2
typedef unsigned (*pt_elt_func)( const void *elts, unsigned idx );

d40 2
d53 9
a61 5
 * Currenly one version of this:
 *    - vcache - catchall implementation, decomposes to TRI/LINE/POINT prims
 * Later:
 *    - varray, varray_split
 *    - velement, velement_split
d63 2
a64 1
 * Currenly only using the vcache version.
d73 1
a73 2
                pt_elt_func elt_func,
                const void *elt_ptr,
d84 2
d100 2
a101 1
                unsigned draw_count );
d105 2
a106 1
                      unsigned count);
d115 2
a116 1
                            unsigned draw_count );
a130 6
/* Helper functions.
 */
pt_elt_func draw_pt_elt_func( struct draw_context *draw );
const void *draw_pt_elt_ptr( struct draw_context *draw,
                             unsigned start );

d133 1
a133 2
 * Currently only the general-purpose vcache implementation, could add
 * a special case for tiny vertex buffers.
d135 1
a135 2
struct draw_pt_front_end *draw_pt_vcache( struct draw_context *draw );
struct draw_pt_front_end *draw_pt_varray(struct draw_context *draw);
d151 1
d165 2
a166 5
		   const float (*vertex_data)[4],
		   unsigned vertex_count,
		   unsigned stride,
		   const ushort *elts,
		   unsigned count );
d169 2
a170 3
                          const float (*vertex_data)[4],
                          unsigned stride,
                          unsigned count );
d176 14
d221 1
a221 3
			     struct vertex_header *pipeline_verts,
			     unsigned stride,
			     unsigned count );
d224 3
a226 1
			      boolean bypass_clipping,
d240 1
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d38 2
a41 2
struct draw_prim_info;
struct draw_vertex_info;
d53 5
a57 9
 * The fetch elements are indices to the vertices.  The draw elements are
 * indices to the fetched vertices.  When both arrays of elements are both
 * linear, middle->run_linear is called;  When only the fetch elements are
 * linear, middle->run_linear_elts is called;  Otherwise, middle->run is
 * called.
 *
 * When the number of the draw elements exceeds max_vertex of the middle end,
 * the draw elements (as well as the fetch elements) are splitted and the
 * middle end is called multiple times.
d59 1
a59 2
 * Currenly there is:
 *    - vsplit - catchall implementation, splits big prims
d68 2
a69 1
                unsigned start,
a79 2
 * prim_flags is as defined by pipe_draw_info::flags.
 *
d94 1
a94 2
                unsigned draw_count,
                unsigned prim_flags );
d98 1
a98 2
                      unsigned count,
                      unsigned prim_flags );
d107 1
a107 2
                            unsigned draw_count,
                            unsigned prim_flags );
d122 6
d130 2
a131 1
 * Currently only the general-purpose vsplit implementation.
d133 2
a134 1
struct draw_pt_front_end *draw_pt_vsplit(struct draw_context *draw);
a149 1
struct draw_pt_middle_end *draw_pt_fetch_pipeline_or_emit_llvm(struct draw_context *draw);
d163 5
a167 2
                   const struct draw_vertex_info *vert_info,
                   const struct draw_prim_info *prim_info);
d170 3
a172 2
                          const struct draw_vertex_info *vert_info,
                          const struct draw_prim_info *prim_info);
a177 14
/*******************************************************************************
 * HW stream output emit:
 */
struct pt_so_emit;

void draw_pt_so_emit_prepare( struct pt_so_emit *emit );

void draw_pt_so_emit( struct pt_so_emit *emit,
                      const struct draw_vertex_info *vert_info,
                      const struct draw_prim_info *prim_info );

void draw_pt_so_emit_destroy( struct pt_so_emit *emit );

struct pt_so_emit *draw_pt_so_emit_create( struct draw_context *draw );
d209 3
a211 1
			     struct draw_vertex_info *info );
d214 1
a214 3
			      boolean clip_xy,
			      boolean clip_z,
			      boolean clip_user,
a227 1
unsigned draw_pt_trim_count(unsigned count, unsigned first, unsigned incr);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d76 1
a76 1
   void (*flush)( struct draw_pt_front_end *, unsigned flags );
a95 7
   /**
    * Bind/update parameter state such as constants, viewport dims
    * and clip planes.  Basically, stuff which isn't "baked" into the
    * shader or pipeline state.
    */
   void (*bind_parameters)(struct draw_pt_middle_end *);

d181 1
a181 1
void draw_pt_so_emit_prepare(struct pt_so_emit *emit, boolean use_pre_clip_pos);
d221 1
a221 2
			     struct draw_vertex_info *info,
                             const struct draw_prim_info *prim_info );
a226 1
                              boolean guard_band,
d228 1
a228 1
                              boolean clip_halfz,
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keithw@@vmware.com>
@


