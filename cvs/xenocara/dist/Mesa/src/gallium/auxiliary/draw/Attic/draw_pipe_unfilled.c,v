head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.03;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.33.42;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/**
 * \brief  Drawing stage for handling glPolygonMode(line/point).
 * Convert triangles to points or lines as needed.
 */

/* Authors:  Keith Whitwell <keithw@@vmware.com>
 */

#include "util/u_memory.h"
#include "pipe/p_defines.h"
#include "draw_private.h"
#include "draw_pipe.h"
#include "draw_fs.h"


struct unfilled_stage {
   struct draw_stage stage;

   /** [0] = front face, [1] = back face.
    * legal values:  PIPE_POLYGON_MODE_FILL, PIPE_POLYGON_MODE_LINE,
    * and PIPE_POLYGON_MODE_POINT,
    */
   unsigned mode[2];

   int face_slot;
};


static INLINE struct unfilled_stage *unfilled_stage( struct draw_stage *stage )
{
   return (struct unfilled_stage *)stage;
}

static void
inject_front_face_info(struct draw_stage *stage,
                       struct prim_header *header)
{
   struct unfilled_stage *unfilled = unfilled_stage(stage);
   unsigned ccw = header->det < 0.0;
   boolean is_front_face = (
      (stage->draw->rasterizer->front_ccw && ccw) ||
      (!stage->draw->rasterizer->front_ccw && !ccw));
   int slot = unfilled->face_slot;
   unsigned i;

   /* In case the backend doesn't care about it */
   if (slot < 0) {
      return;
   }

   for (i = 0; i < 3; ++i) {
      struct vertex_header *v = header->v[i];
      v->data[slot][0] = is_front_face;
      v->data[slot][1] = is_front_face;
      v->data[slot][2] = is_front_face;
      v->data[slot][3] = is_front_face;
      v->vertex_id = UNDEFINED_VERTEX_ID;
   }
}

   
static void point( struct draw_stage *stage,
		   struct vertex_header *v0 )
{
   struct prim_header tmp;
   tmp.v[0] = v0;
   stage->next->point( stage->next, &tmp );
}

static void line( struct draw_stage *stage,
		  struct vertex_header *v0,
		  struct vertex_header *v1 )
{
   struct prim_header tmp;
   tmp.v[0] = v0;
   tmp.v[1] = v1;
   stage->next->line( stage->next, &tmp );
}


static void points( struct draw_stage *stage,
		    struct prim_header *header )
{
   struct vertex_header *v0 = header->v[0];
   struct vertex_header *v1 = header->v[1];
   struct vertex_header *v2 = header->v[2];

   inject_front_face_info(stage, header);

   if ((header->flags & DRAW_PIPE_EDGE_FLAG_0) && v0->edgeflag) point( stage, v0 );
   if ((header->flags & DRAW_PIPE_EDGE_FLAG_1) && v1->edgeflag) point( stage, v1 );
   if ((header->flags & DRAW_PIPE_EDGE_FLAG_2) && v2->edgeflag) point( stage, v2 );
}


static void lines( struct draw_stage *stage,
		   struct prim_header *header )
{
   struct vertex_header *v0 = header->v[0];
   struct vertex_header *v1 = header->v[1];
   struct vertex_header *v2 = header->v[2];

   if (header->flags & DRAW_PIPE_RESET_STIPPLE)
      stage->next->reset_stipple_counter( stage->next );

   inject_front_face_info(stage, header);

   if ((header->flags & DRAW_PIPE_EDGE_FLAG_2) && v2->edgeflag) line( stage, v2, v0 );
   if ((header->flags & DRAW_PIPE_EDGE_FLAG_0) && v0->edgeflag) line( stage, v0, v1 );
   if ((header->flags & DRAW_PIPE_EDGE_FLAG_1) && v1->edgeflag) line( stage, v1, v2 );
}


/** For debugging */
static void
print_header_flags(unsigned flags)
{
   debug_printf("header->flags = ");
   if (flags & DRAW_PIPE_RESET_STIPPLE)
      debug_printf("RESET_STIPPLE ");
   if (flags & DRAW_PIPE_EDGE_FLAG_0)
      debug_printf("EDGE_FLAG_0 ");
   if (flags & DRAW_PIPE_EDGE_FLAG_1)
      debug_printf("EDGE_FLAG_1 ");
   if (flags & DRAW_PIPE_EDGE_FLAG_2)
      debug_printf("EDGE_FLAG_2 ");
   debug_printf("\n");
}


/* Unfilled tri:  
 *
 * Note edgeflags in the vertex struct is not sufficient as we will
 * need to manipulate them when decomposing primitives.  
 * 
 * We currently keep the vertex edgeflag and primitive edgeflag mask
 * separate until the last possible moment.
 */
static void unfilled_tri( struct draw_stage *stage,
			  struct prim_header *header )
{
   struct unfilled_stage *unfilled = unfilled_stage(stage);
   unsigned cw = header->det >= 0.0;
   unsigned mode = unfilled->mode[cw];
  
   if (0)
      print_header_flags(header->flags);

   switch (mode) {
   case PIPE_POLYGON_MODE_FILL:
      stage->next->tri( stage->next, header );
      break;
   case PIPE_POLYGON_MODE_LINE:
      lines( stage, header );
      break;
   case PIPE_POLYGON_MODE_POINT:
      points( stage, header );
      break;
   default:
      assert(0);
   }   
}


static void unfilled_first_tri( struct draw_stage *stage, 
				struct prim_header *header )
{
   struct unfilled_stage *unfilled = unfilled_stage(stage);
   const struct pipe_rasterizer_state *rast = stage->draw->rasterizer;

   unfilled->mode[0] = rast->front_ccw ? rast->fill_front : rast->fill_back;
   unfilled->mode[1] = rast->front_ccw ? rast->fill_back : rast->fill_front;

   stage->tri = unfilled_tri;
   stage->tri( stage, header );
}



static void unfilled_flush( struct draw_stage *stage,
			    unsigned flags )
{
   stage->next->flush( stage->next, flags );

   stage->tri = unfilled_first_tri;
}


static void unfilled_reset_stipple_counter( struct draw_stage *stage )
{
   stage->next->reset_stipple_counter( stage->next );
}


static void unfilled_destroy( struct draw_stage *stage )
{
   draw_free_temp_verts( stage );
   FREE( stage );
}

/*
 * Try to allocate an output slot which we can use
 * to preserve the front face information.
 */
void
draw_unfilled_prepare_outputs( struct draw_context *draw,
                               struct draw_stage *stage )
{
   struct unfilled_stage *unfilled = unfilled_stage(stage);
   const struct pipe_rasterizer_state *rast = draw ? draw->rasterizer : 0;
   boolean is_unfilled = (rast &&
                          (rast->fill_front != PIPE_POLYGON_MODE_FILL ||
                           rast->fill_back != PIPE_POLYGON_MODE_FILL));
   const struct draw_fragment_shader *fs = draw ? draw->fs.fragment_shader : 0;

   if (is_unfilled && fs && fs->info.uses_frontface)  {
      unfilled->face_slot = draw_alloc_extra_vertex_attrib(
         stage->draw, TGSI_SEMANTIC_FACE, 0);
   } else {
      unfilled->face_slot = -1;
   }
}


/**
 * Create unfilled triangle stage.
 */
struct draw_stage *draw_unfilled_stage( struct draw_context *draw )
{
   struct unfilled_stage *unfilled = CALLOC_STRUCT(unfilled_stage);
   if (unfilled == NULL)
      goto fail;

   unfilled->stage.draw = draw;
   unfilled->stage.name = "unfilled";
   unfilled->stage.next = NULL;
   unfilled->stage.tmp = NULL;
   unfilled->stage.point = draw_pipe_passthrough_point;
   unfilled->stage.line = draw_pipe_passthrough_line;
   unfilled->stage.tri = unfilled_first_tri;
   unfilled->stage.flush = unfilled_flush;
   unfilled->stage.reset_stipple_counter = unfilled_reset_stipple_counter;
   unfilled->stage.destroy = unfilled_destroy;

   unfilled->face_slot = -1;

   if (!draw_alloc_temp_verts( &unfilled->stage, 0 ))
      goto fail;

   return &unfilled->stage;

 fail:
   if (unfilled)
      unfilled->stage.destroy( &unfilled->stage );

   return NULL;
}
@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d33 1
a33 1
/* Authors:  Keith Whitwell <keith@@tungstengraphics.com>
d40 1
d51 2
d61 26
d88 1
a88 1

d115 2
d133 2
d228 23
d271 2
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d108 17
d137 2
a138 1
   unsigned mode = unfilled->mode[header->det >= 0.0];
d140 3
d163 1
d165 2
a166 2
   unfilled->mode[0] = stage->draw->rasterizer->fill_ccw; /* front */
   unfilled->mode[1] = stage->draw->rasterizer->fill_cw;  /* back */
a204 3
   if (!draw_alloc_temp_verts( &unfilled->stage, 0 ))
      goto fail;

d215 3
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a107 17
/** For debugging */
static void
print_header_flags(unsigned flags)
{
   debug_printf("header->flags = ");
   if (flags & DRAW_PIPE_RESET_STIPPLE)
      debug_printf("RESET_STIPPLE ");
   if (flags & DRAW_PIPE_EDGE_FLAG_0)
      debug_printf("EDGE_FLAG_0 ");
   if (flags & DRAW_PIPE_EDGE_FLAG_1)
      debug_printf("EDGE_FLAG_1 ");
   if (flags & DRAW_PIPE_EDGE_FLAG_2)
      debug_printf("EDGE_FLAG_2 ");
   debug_printf("\n");
}


d120 1
a120 2
   unsigned cw = header->det >= 0.0;
   unsigned mode = unfilled->mode[cw];
a121 3
   if (0)
      print_header_flags(header->flags);

a141 1
   const struct pipe_rasterizer_state *rast = stage->draw->rasterizer;
d143 2
a144 2
   unfilled->mode[0] = rast->front_ccw ? rast->fill_front : rast->fill_back;
   unfilled->mode[1] = rast->front_ccw ? rast->fill_back : rast->fill_front;
d183 3
a195 3

   if (!draw_alloc_temp_verts( &unfilled->stage, 0 ))
      goto fail;
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d33 1
a33 1
/* Authors:  Keith Whitwell <keithw@@vmware.com>
a39 1
#include "draw_fs.h"
a49 2

   int face_slot;
a57 26
static void
inject_front_face_info(struct draw_stage *stage,
                       struct prim_header *header)
{
   struct unfilled_stage *unfilled = unfilled_stage(stage);
   unsigned ccw = header->det < 0.0;
   boolean is_front_face = (
      (stage->draw->rasterizer->front_ccw && ccw) ||
      (!stage->draw->rasterizer->front_ccw && !ccw));
   int slot = unfilled->face_slot;
   unsigned i;

   /* In case the backend doesn't care about it */
   if (slot < 0) {
      return;
   }

   for (i = 0; i < 3; ++i) {
      struct vertex_header *v = header->v[i];
      v->data[slot][0] = is_front_face;
      v->data[slot][1] = is_front_face;
      v->data[slot][2] = is_front_face;
      v->data[slot][3] = is_front_face;
      v->vertex_id = UNDEFINED_VERTEX_ID;
   }
}
d59 1
a59 1
   
a85 2
   inject_front_face_info(stage, header);

a101 2
   inject_front_face_info(stage, header);

a194 23
/*
 * Try to allocate an output slot which we can use
 * to preserve the front face information.
 */
void
draw_unfilled_prepare_outputs( struct draw_context *draw,
                               struct draw_stage *stage )
{
   struct unfilled_stage *unfilled = unfilled_stage(stage);
   const struct pipe_rasterizer_state *rast = draw ? draw->rasterizer : 0;
   boolean is_unfilled = (rast &&
                          (rast->fill_front != PIPE_POLYGON_MODE_FILL ||
                           rast->fill_back != PIPE_POLYGON_MODE_FILL));
   const struct draw_fragment_shader *fs = draw ? draw->fs.fragment_shader : 0;

   if (is_unfilled && fs && fs->info.uses_frontface)  {
      unfilled->face_slot = draw_alloc_extra_vertex_attrib(
         stage->draw, TGSI_SEMANTIC_FACE, 0);
   } else {
      unfilled->face_slot = -1;
   }
}

a214 2

   unfilled->face_slot = -1;
@


