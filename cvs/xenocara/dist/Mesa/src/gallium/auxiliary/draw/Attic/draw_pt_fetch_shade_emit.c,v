head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.31;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.44;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.42;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */


#include "util/u_math.h"
#include "util/u_memory.h"
#include "draw/draw_context.h"
#include "draw/draw_private.h"
#include "draw/draw_vbuf.h"
#include "draw/draw_vertex.h"
#include "draw/draw_pt.h"
#include "draw/draw_vs.h"


struct fetch_shade_emit;


/* Prototype fetch, shade, emit-hw-verts all in one go.
 */
struct fetch_shade_emit {
   struct draw_pt_middle_end base;
   struct draw_context *draw;

   /* Temporaries:
    */
   const float *constants;
   unsigned pitch[PIPE_MAX_ATTRIBS];
   const ubyte *src[PIPE_MAX_ATTRIBS];
   unsigned prim;

   struct draw_vs_variant_key key;
   struct draw_vs_variant *active;

   const struct vertex_info *vinfo;
};



static void
fse_prepare(struct draw_pt_middle_end *middle,
            unsigned prim,
            unsigned opt,
            unsigned *max_vertices)
{
   struct fetch_shade_emit *fse = (struct fetch_shade_emit *)middle;
   struct draw_context *draw = fse->draw;
   unsigned num_vs_inputs = draw->vs.vertex_shader->info.num_inputs;
   const struct vertex_info *vinfo;
   unsigned i;
   unsigned nr_vbs = 0;

   /* Can't support geometry shader on this path.
    */
   assert(!draw->gs.geometry_shader);

   draw->render->set_primitive(draw->render, prim);

   /* Must do this after set_primitive() above:
    */
   fse->vinfo = vinfo = draw->render->get_vertex_info(draw->render);

   fse->key.output_stride = vinfo->size * 4;
   fse->key.nr_outputs = vinfo->num_attribs;
   fse->key.nr_inputs = num_vs_inputs;

   fse->key.nr_elements = MAX2(fse->key.nr_outputs,     /* outputs - translate to hw format */
                               fse->key.nr_inputs);     /* inputs - fetch from api format */

   fse->key.viewport = !draw->identity_viewport;
   fse->key.clip = draw->clip_xy || draw->clip_z || draw->clip_user;
   fse->key.const_vbuffers = 0;

   memset(fse->key.element, 0,
          fse->key.nr_elements * sizeof(fse->key.element[0]));

   for (i = 0; i < num_vs_inputs; i++) {
      const struct pipe_vertex_element *src = &draw->pt.vertex_element[i];
      fse->key.element[i].in.format = src->src_format;

      /* Consider ignoring these, ie make generated programs
       * independent of this state:
       */
      fse->key.element[i].in.buffer = src->vertex_buffer_index;
      fse->key.element[i].in.offset = src->src_offset;
      nr_vbs = MAX2(nr_vbs, src->vertex_buffer_index + 1);
   }

   for (i = 0; i < 5 && i < nr_vbs; i++) {
      if (draw->pt.vertex_buffer[i].stride == 0)
         fse->key.const_vbuffers |= (1<<i);
   }

   if (0) debug_printf("%s: lookup const_vbuffers: %x\n", __FUNCTION__, fse->key.const_vbuffers);

   {
      unsigned dst_offset = 0;

      for (i = 0; i < vinfo->num_attribs; i++) {
         unsigned emit_sz = draw_translate_vinfo_size(vinfo->attrib[i].emit);

         /* doesn't handle EMIT_OMIT */
         assert(emit_sz != 0);

         /* The elements in the key correspond to vertex shader output
          * numbers, not to positions in the hw vertex description --
          * that's handled by the output_offset field.
          */
         fse->key.element[i].out.format = vinfo->attrib[i].emit;
         fse->key.element[i].out.vs_output = vinfo->attrib[i].src_index;
         fse->key.element[i].out.offset = dst_offset;

         dst_offset += emit_sz;
         assert(fse->key.output_stride >= dst_offset);
      }
   }

   fse->active = draw_vs_lookup_variant( draw->vs.vertex_shader,
                                         &fse->key );

   if (!fse->active) {
      assert(0);
      return ;
   }

   if (0) debug_printf("%s: found const_vbuffers: %x\n", __FUNCTION__,
                       fse->active->key.const_vbuffers);

   /* Now set buffer pointers:
    */
   for (i = 0; i < draw->pt.nr_vertex_buffers; i++) {
      fse->active->set_buffer( fse->active,
                               i,
                               ((const ubyte *) draw->pt.user.vbuffer[i].map +
                                draw->pt.vertex_buffer[i].buffer_offset),
                              draw->pt.vertex_buffer[i].stride,
                              draw->pt.max_index );
   }

   *max_vertices = (draw->render->max_vertex_buffer_bytes /
                    (vinfo->size * 4));

   /* Probably need to do this somewhere (or fix exec shader not to
    * need it):
    */
   if (1) {
      struct draw_vertex_shader *vs = draw->vs.vertex_shader;
      vs->prepare(vs, draw);
   }
}


static void
fse_bind_parameters(struct draw_pt_middle_end *middle)
{
   /* No-op? */
}


static void
fse_run_linear(struct draw_pt_middle_end *middle,
               unsigned start,
               unsigned count,
               unsigned prim_flags)
{
   struct fetch_shade_emit *fse = (struct fetch_shade_emit *)middle;
   struct draw_context *draw = fse->draw;
   char *hw_verts;

   /* XXX: need to flush to get prim_vbuf.c to release its allocation??
    */
   draw_do_flush( draw, DRAW_FLUSH_BACKEND );

   if (!draw->render->allocate_vertices( draw->render,
                                         (ushort)fse->key.output_stride,
                                         (ushort)count ))
      goto fail;

   hw_verts = draw->render->map_vertices( draw->render );
   if (!hw_verts)
      goto fail;

   /* Single routine to fetch vertices, run shader and emit HW verts.
    * Clipping is done elsewhere -- either by the API or on hardware,
    * or for some other reason not required...
    */
   fse->active->run_linear( fse->active,
                            start, count,
                            hw_verts );

   if (0) {
      unsigned i;
      for (i = 0; i < count; i++) {
         debug_printf("\n\n%s vertex %d: (stride %d, offset %d)\n", __FUNCTION__, i,
                      fse->key.output_stride,
                      fse->key.output_stride * i);

         draw_dump_emitted_vertex( fse->vinfo,
                                   (const uint8_t *)hw_verts + fse->key.output_stride * i );
      }
   }

   draw->render->unmap_vertices( draw->render, 0, (ushort)(count - 1) );

   /* Draw arrays path to avoid re-emitting index list again and
    * again.
    */
   draw->render->draw_arrays( draw->render,
                              0,
                              count );

   draw->render->release_vertices( draw->render );

   return;

fail:
   debug_warn_once("allocate or map of vertex buffer failed (out of memory?)");
   return;
}


static void
fse_run(struct draw_pt_middle_end *middle,
        const unsigned *fetch_elts,
        unsigned fetch_count,
        const ushort *draw_elts,
        unsigned draw_count,
        unsigned prim_flags )
{
   struct fetch_shade_emit *fse = (struct fetch_shade_emit *)middle;
   struct draw_context *draw = fse->draw;
   void *hw_verts;

   /* XXX: need to flush to get prim_vbuf.c to release its allocation??
    */
   draw_do_flush( draw, DRAW_FLUSH_BACKEND );

   if (!draw->render->allocate_vertices( draw->render,
                                         (ushort)fse->key.output_stride,
                                         (ushort)fetch_count ))
      goto fail;

   hw_verts = draw->render->map_vertices( draw->render );
   if (!hw_verts)
      goto fail;

   /* Single routine to fetch vertices, run shader and emit HW verts.
    */
   fse->active->run_elts( fse->active,
                          fetch_elts,
                          fetch_count,
                          hw_verts );

   if (0) {
      unsigned i;
      for (i = 0; i < fetch_count; i++) {
         debug_printf("\n\n%s vertex %d:\n", __FUNCTION__, i);
         draw_dump_emitted_vertex( fse->vinfo,
                                   (const uint8_t *)hw_verts +
                                   fse->key.output_stride * i );
      }
   }

   draw->render->unmap_vertices( draw->render, 0, (ushort)(fetch_count - 1) );

   draw->render->draw_elements( draw->render,
                                draw_elts,
                                draw_count );

   draw->render->release_vertices( draw->render );
   return;

fail:
   debug_warn_once("allocate or map of vertex buffer failed (out of memory?)");
   return;
}



static boolean
fse_run_linear_elts(struct draw_pt_middle_end *middle,
                    unsigned start,
                    unsigned count,
                    const ushort *draw_elts,
                    unsigned draw_count,
                    unsigned prim_flags)
{
   struct fetch_shade_emit *fse = (struct fetch_shade_emit *)middle;
   struct draw_context *draw = fse->draw;
   char *hw_verts;

   /* XXX: need to flush to get prim_vbuf.c to release its allocation??
    */
   draw_do_flush( draw, DRAW_FLUSH_BACKEND );

   if (!draw->render->allocate_vertices( draw->render,
                                         (ushort)fse->key.output_stride,
                                         (ushort)count ))
      return FALSE;

   hw_verts = draw->render->map_vertices( draw->render );
   if (!hw_verts)
      return FALSE;

   /* Single routine to fetch vertices, run shader and emit HW verts.
    * Clipping is done elsewhere -- either by the API or on hardware,
    * or for some other reason not required...
    */
   fse->active->run_linear( fse->active,
                            start, count,
                            hw_verts );

   draw->render->draw_elements( draw->render,
                                draw_elts,
                                draw_count );

   draw->render->unmap_vertices( draw->render, 0, (ushort)(count - 1) );

   draw->render->release_vertices( draw->render );

   return TRUE;
}



static void
fse_finish(struct draw_pt_middle_end *middle)
{
}


static void
fse_destroy(struct draw_pt_middle_end *middle)
{
   FREE(middle);
}


struct draw_pt_middle_end *
draw_pt_middle_fse(struct draw_context *draw)
{
   struct fetch_shade_emit *fse = CALLOC_STRUCT(fetch_shade_emit);
   if (!fse)
      return NULL;

   fse->base.prepare = fse_prepare;
   fse->base.bind_parameters = fse_bind_parameters;
   fse->base.run = fse_run;
   fse->base.run_linear = fse_run_linear;
   fse->base.run_linear_elts = fse_run_linear_elts;
   fse->base.finish = fse_finish;
   fse->base.destroy = fse_destroy;
   fse->draw = draw;

   return &fse->base;
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d181 6
d375 1
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d2 1
a2 1
 * 
d5 1
a5 1
 * 
d13 1
a13 1
 * 
d17 1
a17 1
 * 
d25 1
a25 1
 * 
a52 1

a62 1

d68 5
a72 4
static void fse_prepare( struct draw_pt_middle_end *middle,
                         unsigned prim,
                         unsigned opt,
                         unsigned *max_vertices )
d85 1
a85 5
   if (!draw->render->set_primitive( draw->render,
                                     prim )) {
      assert(0);
      return;
   }
a90 1

d102 1
a102 1
   memset(fse->key.element, 0, 
d116 1
a116 1
   
d123 1
a123 1
   
d140 1
a140 1
      
d146 1
a146 2
   
   fse->active = draw_vs_lookup_variant( draw->vs.vertex_shader, 
d154 1
a154 1
   if (0) debug_printf("%s: found const_vbuffers: %x\n", __FUNCTION__, 
d160 3
a162 3
      fse->active->set_buffer( fse->active, 
                               i, 
                               ((const ubyte *) draw->pt.user.vbuffer[i] + 
d168 1
a168 1
   *max_vertices = (draw->render->max_vertex_buffer_bytes / 
d182 5
a186 4
static void fse_run_linear( struct draw_pt_middle_end *middle, 
                            unsigned start, 
                            unsigned count,
                            unsigned prim_flags )
d209 1
a209 1
   fse->active->run_linear( fse->active, 
a212 1

d220 1
a220 1
         draw_dump_emitted_vertex( fse->vinfo, 
d224 1
a224 1
   
a232 1
   
d239 1
a239 1
   assert(0);
d255 2
a256 2
   
   /* XXX: need to flush to get prim_vbuf.c to release its allocation?? 
d265 2
a266 2
   hw_verts = draw->render->map_vertices( draw->render ); 
   if (!hw_verts) 
d268 1
a268 2
         
					
d271 1
a271 1
   fse->active->run_elts( fse->active, 
a275 1

d280 2
a281 2
         draw_dump_emitted_vertex( fse->vinfo, 
                                   (const uint8_t *)hw_verts + 
d287 3
a289 3
   
   draw->render->draw_elements( draw->render, 
                                draw_elts, 
a291 1

d296 1
a296 1
   assert(0);
d302 7
a308 6
static boolean fse_run_linear_elts( struct draw_pt_middle_end *middle, 
                                 unsigned start, 
                                 unsigned count,
                                 const ushort *draw_elts,
                                 unsigned draw_count,
                                 unsigned prim_flags )
d324 1
a324 1
   if (!hw_verts) 
d331 1
a331 1
   fse->active->run_linear( fse->active, 
d335 2
a336 3

   draw->render->draw_elements( draw->render, 
                                draw_elts, 
a337 1
   
d348 2
a349 1
static void fse_finish( struct draw_pt_middle_end *middle )
d355 1
a355 1
fse_destroy( struct draw_pt_middle_end *middle ) 
d360 3
a362 1
struct draw_pt_middle_end *draw_pt_middle_fse( struct draw_context *draw )
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d61 2
a62 2
   struct draw_vs_varient_key key;
   struct draw_vs_varient *active;
d153 1
a153 1
   fse->active = draw_vs_lookup_varient( draw->vs.vertex_shader, 
d172 1
a172 1
                              draw->pt.vertex_buffer[i].max_index );
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a69 1
			       
d71 1
a71 1
                         unsigned prim, 
a80 1
   
d82 5
a86 1
   if (!draw->render->set_primitive( draw->render, 
a94 1
   
d105 1
a105 1
   fse->key.clip = !draw->bypass_clipping;
d134 1
a134 1
         unsigned emit_sz = 0;
d136 2
a137 23
         switch (vinfo->attrib[i].emit) {
         case EMIT_4F:
            emit_sz = 4 * sizeof(float);
            break;
         case EMIT_3F:
            emit_sz = 3 * sizeof(float);
            break;
         case EMIT_2F:
            emit_sz = 2 * sizeof(float);
            break;
         case EMIT_1F:
            emit_sz = 1 * sizeof(float);
            break;
         case EMIT_1F_PSIZE:
            emit_sz = 1 * sizeof(float);
            break;
         case EMIT_4UB:
            emit_sz = 4 * sizeof(ubyte);
            break;
         default:
            assert(0);
            break;
         }
d171 2
a172 1
                              draw->pt.vertex_buffer[i].stride );
a177 9
   /* Return an even number of verts.
    * This prevents "parity" errors when splitting long triangle strips which
    * can lead to front/back culling mix-ups.
    * Every other triangle in a strip has an alternate front/back orientation
    * so splitting at an odd position can cause the orientation of subsequent
    * triangles to get reversed.
    */
   *max_vertices = *max_vertices & ~1;

d191 2
a192 1
                            unsigned count )
a201 3
   if (count >= UNDEFINED_VERTEX_ID) 
      goto fail;

d257 2
a258 1
        unsigned draw_count )
a267 3
   if (fetch_count >= UNDEFINED_VERTEX_ID) 
      goto fail;

d298 3
a300 3
   draw->render->draw( draw->render, 
                       draw_elts, 
                       draw_count );
d317 2
a318 1
                                 unsigned draw_count )
a327 3
   if (count >= UNDEFINED_VERTEX_ID)
      return FALSE;

d346 3
a348 3
   draw->render->draw( draw->render, 
                       draw_elts, 
                       draw_count );
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d70 1
d72 1
a72 1
                         unsigned prim,
d82 1
d84 1
a84 5
   /* Can't support geometry shader on this path.
    */
   assert(!draw->gs.geometry_shader);

   if (!draw->render->set_primitive( draw->render,
d93 1
d104 1
a104 1
   fse->key.clip = draw->clip_xy || draw->clip_z || draw->clip_user;
d133 1
a133 1
         unsigned emit_sz = draw_translate_vinfo_size(vinfo->attrib[i].emit);
d135 23
a157 2
         /* doesn't handle EMIT_OMIT */
         assert(emit_sz != 0);
d191 1
a191 2
                              draw->pt.vertex_buffer[i].stride,
                              draw->pt.vertex_buffer[i].max_index );
d197 9
d219 1
a219 2
                            unsigned count,
                            unsigned prim_flags )
d229 3
d287 1
a287 2
        unsigned draw_count,
        unsigned prim_flags )
d297 3
d330 3
a332 3
   draw->render->draw_elements( draw->render, 
                                draw_elts, 
                                draw_count );
d349 1
a349 2
                                 unsigned draw_count,
                                 unsigned prim_flags )
d359 3
d380 3
a382 3
   draw->render->draw_elements( draw->render, 
                                draw_elts, 
                                draw_count );
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d2 1
a2 1
 *
d5 1
a5 1
 *
d13 1
a13 1
 *
d17 1
a17 1
 *
d25 1
a25 1
 *
d53 1
d61 3
a63 2
   struct draw_vs_variant_key key;
   struct draw_vs_variant *active;
d70 4
a73 5
static void
fse_prepare(struct draw_pt_middle_end *middle,
            unsigned prim,
            unsigned opt,
            unsigned *max_vertices)
d86 5
a90 1
   draw->render->set_primitive(draw->render, prim);
d96 1
d108 1
a108 1
   memset(fse->key.element, 0,
d122 1
a122 1

d129 1
a129 1

d146 1
a146 1

d152 2
a153 1
   fse->active = draw_vs_lookup_variant( draw->vs.vertex_shader,
d161 1
a161 1
   if (0) debug_printf("%s: found const_vbuffers: %x\n", __FUNCTION__,
d167 3
a169 3
      fse->active->set_buffer( fse->active,
                               i,
                               ((const ubyte *) draw->pt.user.vbuffer[i].map +
d172 1
a172 1
                              draw->pt.max_index );
d175 1
a175 1
   *max_vertices = (draw->render->max_vertex_buffer_bytes /
d189 4
a192 5
static void
fse_run_linear(struct draw_pt_middle_end *middle,
               unsigned start,
               unsigned count,
               unsigned prim_flags)
d215 1
a215 1
   fse->active->run_linear( fse->active,
d219 1
d227 1
a227 1
         draw_dump_emitted_vertex( fse->vinfo,
d231 1
a231 1

d240 1
d247 1
a247 1
   debug_warn_once("allocate or map of vertex buffer failed (out of memory?)");
d263 2
a264 2

   /* XXX: need to flush to get prim_vbuf.c to release its allocation??
d273 2
a274 2
   hw_verts = draw->render->map_vertices( draw->render );
   if (!hw_verts)
d276 2
a277 1

d280 1
a280 1
   fse->active->run_elts( fse->active,
d285 1
d290 2
a291 2
         draw_dump_emitted_vertex( fse->vinfo,
                                   (const uint8_t *)hw_verts +
d297 4
a301 3
   draw->render->draw_elements( draw->render,
                                draw_elts,
                                draw_count );
d307 1
a307 1
   debug_warn_once("allocate or map of vertex buffer failed (out of memory?)");
d313 6
a318 7
static boolean
fse_run_linear_elts(struct draw_pt_middle_end *middle,
                    unsigned start,
                    unsigned count,
                    const ushort *draw_elts,
                    unsigned draw_count,
                    unsigned prim_flags)
d334 1
a334 1
   if (!hw_verts)
d341 1
a341 1
   fse->active->run_linear( fse->active,
d345 3
a347 2
   draw->render->draw_elements( draw->render,
                                draw_elts,
d349 1
d360 1
a360 2
static void
fse_finish(struct draw_pt_middle_end *middle)
d366 1
a366 1
fse_destroy(struct draw_pt_middle_end *middle)
d371 1
a371 3

struct draw_pt_middle_end *
draw_pt_middle_fse(struct draw_context *draw)
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keithw@@vmware.com>
a180 6
static void
fse_bind_parameters(struct draw_pt_middle_end *middle)
{
   /* No-op? */
}

a368 1
   fse->base.bind_parameters = fse_bind_parameters;
@


