head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2013.09.05.13.59.33;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.46;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2010 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#include "util/u_math.h"
#include "util/u_memory.h"
#include "pipe/p_shader_tokens.h"
#include "pipe/p_screen.h"

#include "draw_private.h"
#include "draw_context.h"
#include "draw_vs.h"
#include "draw_llvm.h"

#include "tgsi/tgsi_parse.h"
#include "tgsi/tgsi_scan.h"

static void
vs_llvm_prepare(struct draw_vertex_shader *shader,
                struct draw_context *draw)
{
   /*struct llvm_vertex_shader *evs = llvm_vertex_shader(shader);*/
}

static void
vs_llvm_run_linear( struct draw_vertex_shader *shader,
		    const float (*input)[4],
		    float (*output)[4],
                    const void *constants[PIPE_MAX_CONSTANT_BUFFERS],
                    const unsigned constants_size[PIPE_MAX_CONSTANT_BUFFERS],
		    unsigned count,
		    unsigned input_stride,
		    unsigned output_stride )
{
   /* we should never get here since the entire pipeline is
    * generated in draw_pt_fetch_shade_pipeline_llvm.c */
   debug_assert(0);
}


static void
vs_llvm_delete( struct draw_vertex_shader *dvs )
{
   struct llvm_vertex_shader *shader = llvm_vertex_shader(dvs);
   struct draw_llvm_variant_list_item *li;

   li = first_elem(&shader->variants);
   while(!at_end(&shader->variants, li)) {
      struct draw_llvm_variant_list_item *next = next_elem(li);
      draw_llvm_destroy_variant(li->base);
      li = next;
   }

   assert(shader->variants_cached == 0);
   FREE((void*) dvs->state.tokens);
   FREE( dvs );
}


struct draw_vertex_shader *
draw_create_vs_llvm(struct draw_context *draw,
		    const struct pipe_shader_state *state)
{
   struct llvm_vertex_shader *vs = CALLOC_STRUCT( llvm_vertex_shader );

   if (vs == NULL)
      return NULL;

   /* we make a private copy of the tokens */
   vs->base.state.tokens = tgsi_dup_tokens(state->tokens);
   if (!vs->base.state.tokens) {
      FREE(vs);
      return NULL;
   }

   tgsi_scan_shader(state->tokens, &vs->base.info);

   vs->variant_key_size = 
      draw_llvm_variant_key_size(
         vs->base.info.file_max[TGSI_FILE_INPUT]+1,
         MAX2(vs->base.info.file_max[TGSI_FILE_SAMPLER]+1,
              vs->base.info.file_max[TGSI_FILE_SAMPLER_VIEW]+1));

   vs->base.state.stream_output = state->stream_output;
   vs->base.draw = draw;
   vs->base.prepare = vs_llvm_prepare;
   vs->base.run_linear = vs_llvm_run_linear;
   vs->base.delete = vs_llvm_delete;
   vs->base.create_variant = draw_vs_create_variant_generic;

   make_empty_list(&vs->variants);

   return &vs->base;
}
@


1.4
log
@Merge Mesa 9.2.0
@
text
@@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d103 3
a105 2
	 vs->base.info.file_max[TGSI_FILE_INPUT]+1,
	 vs->base.info.file_max[TGSI_FILE_SAMPLER]+1);
d107 1
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d110 1
a110 1
   vs->base.create_varient = draw_vs_create_varient_generic;
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d28 1
a28 7
 /*
  * Authors:
  *   Zack Rusin
  *   Keith Whitwell <keith@@tungstengraphics.com>
  *   Brian Paul
  */

d31 2
d36 1
d39 1
a39 8

#ifdef MESA_LLVM

struct draw_llvm_vertex_shader {
   struct draw_vertex_shader base;
   struct tgsi_exec_machine *machine;
};

d42 2
a43 2
vs_llvm_prepare( struct draw_vertex_shader *base,
		 struct draw_context *draw )
d45 1
a47 1

d49 8
a56 7
vs_llvm_run_linear( struct draw_vertex_shader *base,
		   const float (*input)[4],
		   float (*output)[4],
                   const void *constants[PIPE_MAX_CONSTANT_BUFFERS],
		   unsigned count,
		   unsigned input_stride,
		   unsigned output_stride )
d58 3
a60 2
   struct draw_llvm_vertex_shader *shader =
      (struct draw_llvm_vertex_shader *)base;
a63 1

d65 1
a65 1
vs_llvm_delete( struct draw_vertex_shader *base )
d67 2
a68 2
   struct draw_llvm_vertex_shader *shader =
      (struct draw_llvm_vertex_shader *)base;
d70 6
a75 2
   /* Do something to free compiled shader:
    */
d77 3
a79 2
   FREE( (void*) shader->base.state.tokens );
   FREE( shader );
a82 2


d85 1
a85 1
		    const struct pipe_shader_state *templ)
d87 1
a87 1
   struct draw_llvm_vertex_shader *vs;
a88 1
   vs = CALLOC_STRUCT( draw_llvm_vertex_shader );
d93 1
a93 1
   vs->base.state.tokens = tgsi_dup_tokens(templ->tokens);
d99 6
a104 1
   tgsi_scan_shader(vs->base.state.tokens, &vs->base.info);
a107 1
   vs->base.create_varient = draw_vs_varient_generic;
d110 3
a112 1
   vs->machine = draw->vs.machine;
a115 15





#else

struct draw_vertex_shader *
draw_create_vs_llvm(struct draw_context *draw,
                          const struct pipe_shader_state *shader)
{
   return NULL;
}

#endif
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d3 1
a3 1
 * Copyright 2010 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d28 7
a34 1
#include "util/u_math.h"
a36 2
#include "pipe/p_screen.h"

a39 1
#include "draw_llvm.h"
d42 8
a49 1
#include "tgsi/tgsi_scan.h"
d52 2
a53 2
vs_llvm_prepare(struct draw_vertex_shader *shader,
                struct draw_context *draw)
a54 1
   /*struct llvm_vertex_shader *evs = llvm_vertex_shader(shader);*/
d57 1
d59 7
a65 8
vs_llvm_run_linear( struct draw_vertex_shader *shader,
		    const float (*input)[4],
		    float (*output)[4],
                    const void *constants[PIPE_MAX_CONSTANT_BUFFERS],
                    const unsigned constants_size[PIPE_MAX_CONSTANT_BUFFERS],
		    unsigned count,
		    unsigned input_stride,
		    unsigned output_stride )
d67 2
a68 3
   /* we should never get here since the entire pipeline is
    * generated in draw_pt_fetch_shade_pipeline_llvm.c */
   debug_assert(0);
d72 1
d74 1
a74 1
vs_llvm_delete( struct draw_vertex_shader *dvs )
d76 2
a77 2
   struct llvm_vertex_shader *shader = llvm_vertex_shader(dvs);
   struct draw_llvm_variant_list_item *li;
d79 2
a80 6
   li = first_elem(&shader->variants);
   while(!at_end(&shader->variants, li)) {
      struct draw_llvm_variant_list_item *next = next_elem(li);
      draw_llvm_destroy_variant(li->base);
      li = next;
   }
d82 2
a83 3
   assert(shader->variants_cached == 0);
   FREE((void*) dvs->state.tokens);
   FREE( dvs );
d87 2
d91 1
a91 1
		    const struct pipe_shader_state *state)
d93 1
a93 1
   struct llvm_vertex_shader *vs = CALLOC_STRUCT( llvm_vertex_shader );
d95 1
d100 1
a100 1
   vs->base.state.tokens = tgsi_dup_tokens(state->tokens);
d106 1
a106 6
   tgsi_scan_shader(state->tokens, &vs->base.info);

   vs->variant_key_size = 
      draw_llvm_variant_key_size(
	 vs->base.info.file_max[TGSI_FILE_INPUT]+1,
	 vs->base.info.file_max[TGSI_FILE_SAMPLER]+1);
d110 1
d113 1
a113 1
   vs->base.create_varient = draw_vs_create_varient_generic;
d115 8
a122 1
   make_empty_list(&vs->variants);
d124 5
a128 1
   return &vs->base;
d130 2
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d103 2
a104 3
         vs->base.info.file_max[TGSI_FILE_INPUT]+1,
         MAX2(vs->base.info.file_max[TGSI_FILE_SAMPLER]+1,
              vs->base.info.file_max[TGSI_FILE_SAMPLER_VIEW]+1));
a105 1
   vs->base.state.stream_output = state->stream_output;
d110 1
a110 1
   vs->base.create_variant = draw_vs_create_variant_generic;
@


