head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.28;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.13.59.50;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.52;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.48;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright 2010 Marek Olšák <maraeo@@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHOR(S) AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE. */

#include "pipe/p_context.h"
#include "util/u_index_modify.h"
#include "util/u_inlines.h"

/* Ubyte indices. */

void util_shorten_ubyte_elts_to_userptr(struct pipe_context *context,
					struct pipe_index_buffer *ib,
					int index_bias,
					unsigned start,
					unsigned count,
					void *out)
{
    struct pipe_transfer *src_transfer = NULL;
    const unsigned char *in_map;
    unsigned short *out_map = out;
    unsigned i;

    if (ib->user_buffer) {
       in_map = ib->user_buffer;
    } else {
       in_map = pipe_buffer_map(context, ib->buffer,
                                PIPE_TRANSFER_READ |
                                PIPE_TRANSFER_UNSYNCHRONIZED,
                                &src_transfer);
    }
    in_map += start;

    for (i = 0; i < count; i++) {
        *out_map = (unsigned short)(*in_map + index_bias);
        in_map++;
        out_map++;
    }

    if (src_transfer)
       pipe_buffer_unmap(context, src_transfer);
}

void util_shorten_ubyte_elts(struct pipe_context *context,
			     struct pipe_index_buffer *ib,
			     struct pipe_resource **out_buf,
			     int index_bias,
			     unsigned start,
			     unsigned count)
{
    struct pipe_resource* new_elts;
    unsigned short *out_map;
    struct pipe_transfer *dst_transfer;

    new_elts = pipe_buffer_create(context->screen,
                                  PIPE_BIND_INDEX_BUFFER,
                                  PIPE_USAGE_DEFAULT,
                                  2 * count);

    out_map = pipe_buffer_map(context, new_elts, PIPE_TRANSFER_WRITE,
                              &dst_transfer);
    util_shorten_ubyte_elts_to_userptr(context, ib, index_bias,
                                       start, count, out_map);
    pipe_buffer_unmap(context, dst_transfer);

    pipe_resource_reference(out_buf, NULL);
    *out_buf = new_elts;
}


/* Ushort indices. */

void util_rebuild_ushort_elts_to_userptr(struct pipe_context *context,
					 struct pipe_index_buffer *ib,
					 int index_bias,
					 unsigned start, unsigned count,
					 void *out)
{
    struct pipe_transfer *in_transfer = NULL;
    const unsigned short *in_map;
    unsigned short *out_map = out;
    unsigned i;

    if (ib->user_buffer) {
       in_map = ib->user_buffer;
    } else {
       in_map = pipe_buffer_map(context, ib->buffer,
                                PIPE_TRANSFER_READ |
                                PIPE_TRANSFER_UNSYNCHRONIZED,
                                &in_transfer);
    }
    in_map += start;

    for (i = 0; i < count; i++) {
        *out_map = (unsigned short)(*in_map + index_bias);
        in_map++;
        out_map++;
    }

    if (in_transfer)
       pipe_buffer_unmap(context, in_transfer);
}

void util_rebuild_ushort_elts(struct pipe_context *context,
			      struct pipe_index_buffer *ib,
			      struct pipe_resource **out_buf,
			      int index_bias,
			      unsigned start, unsigned count)
{
    struct pipe_transfer *out_transfer = NULL;
    struct pipe_resource *new_elts;
    unsigned short *out_map;

    new_elts = pipe_buffer_create(context->screen,
                                  PIPE_BIND_INDEX_BUFFER,
                                  PIPE_USAGE_DEFAULT,
                                  2 * count);

    out_map = pipe_buffer_map(context, new_elts,
                              PIPE_TRANSFER_WRITE, &out_transfer);
    util_rebuild_ushort_elts_to_userptr(context, ib, index_bias,
                                        start, count, out_map);
    pipe_buffer_unmap(context, out_transfer);

    pipe_resource_reference(out_buf, NULL);
    *out_buf = new_elts;
}


/* Uint indices. */

void util_rebuild_uint_elts_to_userptr(struct pipe_context *context,
				       struct pipe_index_buffer *ib,
				       int index_bias,
				       unsigned start, unsigned count,
				       void *out)
{
    struct pipe_transfer *in_transfer = NULL;
    const unsigned int *in_map;
    unsigned int *out_map = out;
    unsigned i;

    if (ib->user_buffer) {
       in_map = ib->user_buffer;
    } else {
       in_map = pipe_buffer_map(context, ib->buffer,
                                PIPE_TRANSFER_READ |
                                PIPE_TRANSFER_UNSYNCHRONIZED,
                                &in_transfer);
    }
    in_map += start;

    for (i = 0; i < count; i++) {
        *out_map = (unsigned int)(*in_map + index_bias);
        in_map++;
        out_map++;
    }

    if (in_transfer)
       pipe_buffer_unmap(context, in_transfer);
}

void util_rebuild_uint_elts(struct pipe_context *context,
			    struct pipe_index_buffer *ib,
			    struct pipe_resource **out_buf,
			    int index_bias,
			    unsigned start, unsigned count)
{
    struct pipe_transfer *out_transfer = NULL;
    struct pipe_resource *new_elts;
    unsigned int *out_map;

    new_elts = pipe_buffer_create(context->screen,
                                  PIPE_BIND_INDEX_BUFFER,
                                  PIPE_USAGE_DEFAULT,
                                  2 * count);

    out_map = pipe_buffer_map(context, new_elts,
                              PIPE_TRANSFER_WRITE, &out_transfer);
    util_rebuild_uint_elts_to_userptr(context, ib, index_bias,
                                      start, count, out_map);
    pipe_buffer_unmap(context, out_transfer);

    pipe_resource_reference(out_buf, NULL);
    *out_buf = new_elts;
}
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d74 1
a74 1
                                  PIPE_USAGE_STATIC,
d133 1
a133 1
                                  PIPE_USAGE_STATIC,
d192 1
a192 1
                                  PIPE_USAGE_STATIC,
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d30 1
a30 1
					struct pipe_resource *elts,
d36 2
a37 2
    struct pipe_transfer *src_transfer;
    unsigned char *in_map;
d41 8
a48 4
    in_map = pipe_buffer_map(context, elts,
                             PIPE_TRANSFER_READ |
                             PIPE_TRANSFER_UNSYNCHRONIZED,
                             &src_transfer);
d57 2
a58 1
    pipe_buffer_unmap(context, src_transfer);
d62 2
a63 1
			     struct pipe_resource **elts,
d79 1
a79 1
    util_shorten_ubyte_elts_to_userptr(context, *elts, index_bias,
d83 2
a84 1
    *elts = new_elts;
d91 1
a91 1
					 struct pipe_resource *elts,
d97 1
a97 1
    unsigned short *in_map;
d101 8
a108 4
    in_map = pipe_buffer_map(context, elts,
                             PIPE_TRANSFER_READ |
                             PIPE_TRANSFER_UNSYNCHRONIZED,
                             &in_transfer);
d117 2
a118 1
    pipe_buffer_unmap(context, in_transfer);
d122 2
a123 1
			      struct pipe_resource **elts,
d138 1
a138 1
    util_rebuild_ushort_elts_to_userptr(context, *elts, index_bias,
d142 2
a143 1
    *elts = new_elts;
d150 1
a150 1
				       struct pipe_resource *elts,
d156 1
a156 1
    unsigned int *in_map;
d160 8
a167 4
    in_map = pipe_buffer_map(context, elts,
                             PIPE_TRANSFER_READ |
                             PIPE_TRANSFER_UNSYNCHRONIZED,
                             &in_transfer);
d176 2
a177 1
    pipe_buffer_unmap(context, in_transfer);
d181 2
a182 1
			    struct pipe_resource **elts,
d197 1
a197 1
    util_rebuild_uint_elts_to_userptr(context, *elts, index_bias,
d201 2
a202 1
    *elts = new_elts;
@


1.1
log
@Initial revision
@
text
@d27 29
a61 1
    struct pipe_screen* screen = context->screen;
a62 1
    unsigned char *in_map;
d64 1
a64 2
    struct pipe_transfer *src_transfer, *dst_transfer;
    unsigned i;
d66 1
a66 1
    new_elts = pipe_buffer_create(screen,
d68 1
d71 11
a81 2
    in_map = pipe_buffer_map(context, *elts, PIPE_TRANSFER_READ, &src_transfer);
    out_map = pipe_buffer_map(context, new_elts, PIPE_TRANSFER_WRITE, &dst_transfer);
d83 15
d106 1
a106 4
    pipe_buffer_unmap(context, *elts, src_transfer);
    pipe_buffer_unmap(context, new_elts, dst_transfer);

    *elts = new_elts;
a113 1
    struct pipe_transfer *in_transfer = NULL;
a115 1
    unsigned short *in_map;
a116 1
    unsigned i;
d120 1
a122 2
    in_map = pipe_buffer_map(context, *elts,
                             PIPE_TRANSFER_READ, &in_transfer);
d125 9
d135 15
d151 1
d153 1
a153 1
        *out_map = (unsigned short)(*in_map + index_bias);
d158 1
a158 4
    pipe_buffer_unmap(context, *elts, in_transfer);
    pipe_buffer_unmap(context, new_elts, out_transfer);

    *elts = new_elts;
a165 1
    struct pipe_transfer *in_transfer = NULL;
a167 1
    unsigned int *in_map;
a168 1
    unsigned i;
d172 1
a174 2
    in_map = pipe_buffer_map(context, *elts,
                             PIPE_TRANSFER_READ, &in_transfer);
d177 3
a179 10

    in_map += start;
    for (i = 0; i < count; i++) {
        *out_map = (unsigned int)(*in_map + index_bias);
        in_map++;
        out_map++;
    }

    pipe_buffer_unmap(context, *elts, in_transfer);
    pipe_buffer_unmap(context, new_elts, out_transfer);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a26 34
/* Ubyte indices. */

void util_shorten_ubyte_elts_to_userptr(struct pipe_context *context,
					struct pipe_index_buffer *ib,
					int index_bias,
					unsigned start,
					unsigned count,
					void *out)
{
    struct pipe_transfer *src_transfer = NULL;
    const unsigned char *in_map;
    unsigned short *out_map = out;
    unsigned i;

    if (ib->user_buffer) {
       in_map = ib->user_buffer;
    } else {
       in_map = pipe_buffer_map(context, ib->buffer,
                                PIPE_TRANSFER_READ |
                                PIPE_TRANSFER_UNSYNCHRONIZED,
                                &src_transfer);
    }
    in_map += start;

    for (i = 0; i < count; i++) {
        *out_map = (unsigned short)(*in_map + index_bias);
        in_map++;
        out_map++;
    }

    if (src_transfer)
       pipe_buffer_unmap(context, src_transfer);
}

d28 1
a28 2
			     struct pipe_index_buffer *ib,
			     struct pipe_resource **out_buf,
d33 1
d35 1
d37 2
a38 1
    struct pipe_transfer *dst_transfer;
d40 1
a40 1
    new_elts = pipe_buffer_create(context->screen,
a41 1
                                  PIPE_USAGE_STATIC,
d44 2
a45 10
    out_map = pipe_buffer_map(context, new_elts, PIPE_TRANSFER_WRITE,
                              &dst_transfer);
    util_shorten_ubyte_elts_to_userptr(context, ib, index_bias,
                                       start, count, out_map);
    pipe_buffer_unmap(context, dst_transfer);

    pipe_resource_reference(out_buf, NULL);
    *out_buf = new_elts;
}

a46 21
/* Ushort indices. */

void util_rebuild_ushort_elts_to_userptr(struct pipe_context *context,
					 struct pipe_index_buffer *ib,
					 int index_bias,
					 unsigned start, unsigned count,
					 void *out)
{
    struct pipe_transfer *in_transfer = NULL;
    const unsigned short *in_map;
    unsigned short *out_map = out;
    unsigned i;

    if (ib->user_buffer) {
       in_map = ib->user_buffer;
    } else {
       in_map = pipe_buffer_map(context, ib->buffer,
                                PIPE_TRANSFER_READ |
                                PIPE_TRANSFER_UNSYNCHRONIZED,
                                &in_transfer);
    }
d55 4
a58 2
    if (in_transfer)
       pipe_buffer_unmap(context, in_transfer);
d62 1
a62 2
			      struct pipe_index_buffer *ib,
			      struct pipe_resource **out_buf,
d66 1
d69 1
d71 1
a74 1
                                  PIPE_USAGE_STATIC,
d77 2
a80 10
    util_rebuild_ushort_elts_to_userptr(context, ib, index_bias,
                                        start, count, out_map);
    pipe_buffer_unmap(context, out_transfer);

    pipe_resource_reference(out_buf, NULL);
    *out_buf = new_elts;
}


/* Uint indices. */
a81 19
void util_rebuild_uint_elts_to_userptr(struct pipe_context *context,
				       struct pipe_index_buffer *ib,
				       int index_bias,
				       unsigned start, unsigned count,
				       void *out)
{
    struct pipe_transfer *in_transfer = NULL;
    const unsigned int *in_map;
    unsigned int *out_map = out;
    unsigned i;

    if (ib->user_buffer) {
       in_map = ib->user_buffer;
    } else {
       in_map = pipe_buffer_map(context, ib->buffer,
                                PIPE_TRANSFER_READ |
                                PIPE_TRANSFER_UNSYNCHRONIZED,
                                &in_transfer);
    }
a82 1

d84 1
a84 1
        *out_map = (unsigned int)(*in_map + index_bias);
d89 4
a92 2
    if (in_transfer)
       pipe_buffer_unmap(context, in_transfer);
d96 1
a96 2
			    struct pipe_index_buffer *ib,
			    struct pipe_resource **out_buf,
d100 1
d103 1
d105 1
a108 1
                                  PIPE_USAGE_STATIC,
d111 2
a114 3
    util_rebuild_uint_elts_to_userptr(context, ib, index_bias,
                                      start, count, out_map);
    pipe_buffer_unmap(context, out_transfer);
d116 11
a126 2
    pipe_resource_reference(out_buf, NULL);
    *out_buf = new_elts;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d74 1
a74 1
                                  PIPE_USAGE_DEFAULT,
d133 1
a133 1
                                  PIPE_USAGE_DEFAULT,
d192 1
a192 1
                                  PIPE_USAGE_DEFAULT,
@


