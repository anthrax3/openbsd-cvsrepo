head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.28;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.51;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.15;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.13.59.51;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.26;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.53;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.48;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.06.47;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.43.54;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2008 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/


#ifndef U_RECT_H
#define U_RECT_H

#include "pipe/p_compiler.h"

#ifdef __cplusplus
extern "C" {
#endif

struct u_rect {
   int x0, x1;
   int y0, y1;
};

/* Do two rectangles intersect?
 */
static INLINE boolean
u_rect_test_intersection(const struct u_rect *a,
                         const struct u_rect *b)
{
   return (!(a->x1 < b->x0 ||
             b->x1 < a->x0 ||
             a->y1 < b->y0 ||
             b->y1 < a->y0));
}

/* Find the intersection of two rectangles known to intersect.
 */
static INLINE void
u_rect_find_intersection(const struct u_rect *a,
                         struct u_rect *b)
{
   /* Caller should verify intersection exists before calling.
    */
   if (b->x0 < a->x0) b->x0 = a->x0;
   if (b->x1 > a->x1) b->x1 = a->x1;
   if (b->y0 < a->y0) b->y0 = a->y0;
   if (b->y1 > a->y1) b->y1 = a->y1;
}


static INLINE void
u_rect_possible_intersection(const struct u_rect *a,
                             struct u_rect *b)
{
   if (u_rect_test_intersection(a,b)) {
      u_rect_find_intersection(a,b);
   }
   else {
      b->x0 = b->x1 = b->y0 = b->y1 = 0;
   }
}

#ifdef __cplusplus
}
#endif

#endif /* U_RECT_H */
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a32 1
#include "util/u_math.h"
a69 6
static INLINE int
u_rect_area(const struct u_rect *r)
{
   return (r->x1 - r->x0) * (r->y1 - r->y0);
}

a79 11
}

/* Set @@d to a rectangle that covers both @@a and @@b.
 */
static INLINE void
u_rect_union(struct u_rect *d, const struct u_rect *a, const struct u_rect *b)
{
   d->x0 = MIN2(a->x0, b->x0);
   d->y0 = MIN2(a->y0, b->y0);
   d->x1 = MAX2(a->x1, b->x1);
   d->y1 = MAX2(a->y1, b->y1);
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d33 1
d71 6
d87 11
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2008 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
a84 6


/* Include pipe copy/fill rect helpers declarations for backwards compatibility
 */
#include "util/u_surface.h"

@


1.2
log
@Merge Mesa 7.10.3
@
text
@d34 4
d82 3
a84 3
#include "pipe/p_format.h"
#include "util/u_pack_color.h"

d87 1
a87 2
/**********************************************************************
 * Pipe copy/fill rect helpers.
d89 1
a89 15

/* These really should move to a different file:
 */
#include "pipe/p_format.h"

extern void
util_copy_rect(ubyte * dst, enum pipe_format format,
               unsigned dst_stride, unsigned dst_x, unsigned dst_y,
               unsigned width, unsigned height, const ubyte * src,
               int src_stride, unsigned src_x, unsigned src_y);

extern void
util_fill_rect(ubyte * dst, enum pipe_format format,
               unsigned dst_stride, unsigned dst_x, unsigned dst_y,
               unsigned width, unsigned height, union util_color *uc);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d29 11
a39 2
/**
 * Pipe copy/fill rect helpers.
d41 9
d51 26
d78 2
a79 2
#ifndef U_RECT_H
#define U_RECT_H
a81 1
#include "pipe/p_format.h"
d83 3
a85 2
struct pipe_context;
struct pipe_surface;
d87 3
d100 1
a100 17
               unsigned width, unsigned height, uint32_t value);


extern void
util_surface_copy(struct pipe_context *pipe,
                  boolean do_flip,
                  struct pipe_surface *dst,
                  unsigned dst_x, unsigned dst_y,
                  struct pipe_surface *src,
                  unsigned src_x, unsigned src_y, 
                  unsigned w, unsigned h);

extern void
util_surface_fill(struct pipe_context *pipe,
                  struct pipe_surface *dst,
                  unsigned dstx, unsigned dsty,
                  unsigned width, unsigned height, unsigned value);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d29 5
a36 45
#include "pipe/p_compiler.h"

struct u_rect {
   int x0, x1;
   int y0, y1;
};

/* Do two rectangles intersect?
 */
static INLINE boolean
u_rect_test_intersection(const struct u_rect *a,
                         const struct u_rect *b)
{
   return (!(a->x1 < b->x0 ||
             b->x1 < a->x0 ||
             a->y1 < b->y0 ||
             b->y1 < a->y0));
}

/* Find the intersection of two rectangles known to intersect.
 */
static INLINE void
u_rect_find_intersection(const struct u_rect *a,
                         struct u_rect *b)
{
   /* Caller should verify intersection exists before calling.
    */
   if (b->x0 < a->x0) b->x0 = a->x0;
   if (b->x1 > a->x1) b->x1 = a->x1;
   if (b->y0 < a->y0) b->y0 = a->y0;
   if (b->y1 > a->y1) b->y1 = a->y1;
}


static INLINE void
u_rect_possible_intersection(const struct u_rect *a,
                             struct u_rect *b)
{
   if (u_rect_test_intersection(a,b)) {
      u_rect_find_intersection(a,b);
   }
   else {
      b->x0 = b->x1 = b->y0 = b->y1 = 0;
   }
}
a38 2
#include "util/u_pack_color.h"

d40 2
a42 7
/**********************************************************************
 * Pipe copy/fill rect helpers.
 */

/* These really should move to a different file:
 */
#include "pipe/p_format.h"
d53 17
a69 1
               unsigned width, unsigned height, union util_color *uc);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a33 4
#ifdef __cplusplus
extern "C" {
#endif

d78 4
a81 3
#ifdef __cplusplus
}
#endif
d83 3
d87 1
a87 1
/* Include pipe copy/fill rect helpers declarations for backwards compatibility
d89 12
a100 1
#include "util/u_surface.h"
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2008 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d85 6
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a32 1
#include "util/u_math.h"
a69 6
static INLINE int
u_rect_area(const struct u_rect *r)
{
   return (r->x1 - r->x0) * (r->y1 - r->y0);
}

a79 11
}

/* Set @@d to a rectangle that covers both @@a and @@b.
 */
static INLINE void
u_rect_union(struct u_rect *d, const struct u_rect *a, const struct u_rect *b)
{
   d->x0 = MIN2(a->x0, b->x0);
   d->y0 = MIN2(a->y0, b->y0);
   d->x1 = MAX2(a->x1, b->x1);
   d->y1 = MAX2(a->y1, b->y1);
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d33 1
d71 6
d87 11
@


