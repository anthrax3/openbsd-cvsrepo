head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.28;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.51;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.15;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.13.59.48;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.46;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.47;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.06.40;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.43.47;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2008 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#ifndef U_DRAW_H
#define U_DRAW_H


#include "pipe/p_compiler.h"
#include "pipe/p_context.h"
#include "pipe/p_state.h"


#ifdef __cplusplus
extern "C" {
#endif


static INLINE void
util_draw_init_info(struct pipe_draw_info *info)
{
   memset(info, 0, sizeof(*info));
   info->instance_count = 1;
   info->max_index = 0xffffffff;
}


static INLINE void
util_draw_arrays(struct pipe_context *pipe, uint mode, uint start, uint count)
{
   struct pipe_draw_info info;

   util_draw_init_info(&info);
   info.mode = mode;
   info.start = start;
   info.count = count;
   info.min_index = start;
   info.max_index = start + count - 1;

   pipe->draw_vbo(pipe, &info);
}

static INLINE void
util_draw_elements(struct pipe_context *pipe, int index_bias,
                   uint mode, uint start, uint count)
{
   struct pipe_draw_info info;

   util_draw_init_info(&info);
   info.indexed = TRUE;
   info.mode = mode;
   info.start = start;
   info.count = count;
   info.index_bias = index_bias;

   pipe->draw_vbo(pipe, &info);
}

static INLINE void
util_draw_arrays_instanced(struct pipe_context *pipe,
                           uint mode, uint start, uint count,
                           uint start_instance,
                           uint instance_count)
{
   struct pipe_draw_info info;

   util_draw_init_info(&info);
   info.mode = mode;
   info.start = start;
   info.count = count;
   info.start_instance = start_instance;
   info.instance_count = instance_count;
   info.min_index = start;
   info.max_index = start + count - 1;

   pipe->draw_vbo(pipe, &info);
}

static INLINE void
util_draw_elements_instanced(struct pipe_context *pipe,
                             int index_bias,
                             uint mode, uint start, uint count,
                             uint start_instance,
                             uint instance_count)
{
   struct pipe_draw_info info;

   util_draw_init_info(&info);
   info.indexed = TRUE;
   info.mode = mode;
   info.start = start;
   info.count = count;
   info.index_bias = index_bias;
   info.start_instance = start_instance;
   info.instance_count = instance_count;

   pipe->draw_vbo(pipe, &info);
}

static INLINE void
util_draw_range_elements(struct pipe_context *pipe,
                         int index_bias,
                         uint min_index,
                         uint max_index,
                         uint mode, uint start, uint count)
{
   struct pipe_draw_info info;

   util_draw_init_info(&info);
   info.indexed = TRUE;
   info.mode = mode;
   info.start = start;
   info.count = count;
   info.index_bias = index_bias;
   info.min_index = min_index;
   info.max_index = max_index;

   pipe->draw_vbo(pipe, &info);
}


unsigned
util_draw_max_index(
      const struct pipe_vertex_buffer *vertex_buffers,
      const struct pipe_vertex_element *vertex_elements,
      unsigned nr_vertex_elements,
      const struct pipe_draw_info *info);


#ifdef __cplusplus
}
#endif

#endif /* !U_DRAW_H */
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a144 8
/* This converts an indirect draw into a direct draw by mapping the indirect
 * buffer, extracting its arguments, and calling pipe->draw_vbo.
 */
void
util_draw_indirect(struct pipe_context *pipe,
                   const struct pipe_draw_info *info);


@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d145 8
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2008 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a147 1
      unsigned nr_vertex_buffers,
@


1.1
log
@Initial revision
@
text
@d37 5
d144 12
d157 2
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a36 5
#ifdef __cplusplus
extern "C" {
#endif


a138 11

unsigned
util_draw_max_index(
      const struct pipe_vertex_buffer *vertex_buffers,
      const struct pipe_vertex_element *vertex_elements,
      unsigned nr_vertex_elements,
      const struct pipe_draw_info *info);


#ifdef __cplusplus
}
a139 2

#endif /* !U_DRAW_H */
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2008 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a144 8
/* This converts an indirect draw into a direct draw by mapping the indirect
 * buffer, extracting its arguments, and calling pipe->draw_vbo.
 */
void
util_draw_indirect(struct pipe_context *pipe,
                   const struct pipe_draw_info *info);


@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d145 8
@


