head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	v10_2_3:1.1.1.1
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.28;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2015.02.20.23.09.51;	author jsg;	state Exp;
branches;
next	1.3;
commitid	4ry2gvZGMXkCUD2n;

1.3
date	2015.01.25.14.41.15;	author jsg;	state Exp;
branches;
next	1.2;
commitid	mcxB0JvoI9gTDYXU;

1.2
date	2013.09.05.13.59.48;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.10.46;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2015.01.25.14.06.40;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.3
date	2015.02.20.22.43.47;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2011 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


#include "util/u_debug.h"
#include "util/u_math.h"
#include "util/u_format.h"
#include "util/u_draw.h"


/**
 * Returns the largest legal index value plus one for the current set
 * of bound vertex buffers.  Regardless of any other consideration,
 * all vertex lookups need to be clamped to 0..max_index-1 to prevent
 * an out-of-bound access.
 *
 * Note that if zero is returned it means that one or more buffers is
 * too small to contain any valid vertex data.
 */
unsigned
util_draw_max_index(
      const struct pipe_vertex_buffer *vertex_buffers,
      const struct pipe_vertex_element *vertex_elements,
      unsigned nr_vertex_elements,
      const struct pipe_draw_info *info)
{
   unsigned max_index;
   unsigned i;

   max_index = ~0U - 1;
   for (i = 0; i < nr_vertex_elements; i++) {
      const struct pipe_vertex_element *element =
         &vertex_elements[i];
      const struct pipe_vertex_buffer *buffer =
         &vertex_buffers[element->vertex_buffer_index];
      unsigned buffer_size;
      const struct util_format_description *format_desc;
      unsigned format_size;

      if (!buffer->buffer) {
         continue;
      }

      assert(buffer->buffer->height0 == 1);
      assert(buffer->buffer->depth0 == 1);
      buffer_size = buffer->buffer->width0;

      format_desc = util_format_description(element->src_format);
      assert(format_desc->block.width == 1);
      assert(format_desc->block.height == 1);
      assert(format_desc->block.bits % 8 == 0);
      format_size = format_desc->block.bits/8;

      if (buffer->buffer_offset >= buffer_size) {
         /* buffer is too small */
         return 0;
      }

      buffer_size -= buffer->buffer_offset;

      if (element->src_offset >= buffer_size) {
         /* buffer is too small */
         return 0;
      }

      buffer_size -= element->src_offset;

      if (format_size > buffer_size) {
         /* buffer is too small */
         return 0;
      }

      buffer_size -= format_size;

      if (buffer->stride != 0) {
         unsigned buffer_max_index;

         buffer_max_index = buffer_size / buffer->stride;

         if (element->instance_divisor == 0) {
            /* Per-vertex data */
            max_index = MIN2(max_index, buffer_max_index);
         }
         else {
            /* Per-instance data. Simply make sure the state tracker didn't
             * request more instances than those that fit in the buffer */
            if ((info->start_instance + info->instance_count)/element->instance_divisor
                > (buffer_max_index + 1)) {
               /* FIXME: We really should stop thinking in terms of maximum
                * indices/instances and simply start clamping against buffer
                * size. */
               debug_printf("%s: too many instances for vertex buffer\n",
                            __FUNCTION__);
               return 0;
            }
         }
      }
   }

   return max_index + 1;
}
@


1.4
log
@Merge Mesa 10.2.9
@
text
@@


1.3
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a29 1
#include "util/u_inlines.h"
a124 42
}


/* This extracts the draw arguments from the info_in->indirect resource,
 * puts them into a new instance of pipe_draw_info, and calls draw_vbo on it.
 */
void
util_draw_indirect(struct pipe_context *pipe,
                   const struct pipe_draw_info *info_in)
{
   struct pipe_draw_info info;
   struct pipe_transfer *transfer;
   uint32_t *params;
   const unsigned num_params = info_in->indexed ? 5 : 4;

   assert(info_in->indirect);
   assert(!info_in->count_from_stream_output);

   memcpy(&info, info_in, sizeof(info));

   params = (uint32_t *)
      pipe_buffer_map_range(pipe,
                            info_in->indirect,
                            info_in->indirect_offset,
                            num_params * sizeof(uint32_t),
                            PIPE_TRANSFER_READ,
                            &transfer);
   if (!transfer) {
      debug_printf("%s: failed to map indirect buffer\n", __FUNCTION__);
      return;
   }

   info.count = params[0];
   info.instance_count = params[1];
   info.start = params[2];
   info.index_bias = info_in->indexed ? params[3] : 0;
   info.start_instance = info_in->indexed ? params[4] : params[3];
   info.indirect = NULL;

   pipe_buffer_unmap(pipe, transfer);

   pipe->draw_vbo(pipe, &info);
@


1.2
log
@Merge Mesa 9.2.0
@
text
@d30 1
d126 42
@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d36 7
a42 3
 * Returns the largest legal index value for the current set of bound vertex
 * buffers.  Regardless of any other consideration, all vertex lookups need to
 * be clamped to 0..max_index to prevent an out-of-bound access.
a46 1
      unsigned nr_vertex_buffers,
d54 1
a54 1
   max_index = ~0;
d64 4
d78 5
a82 1
      assert(buffer_size - buffer->buffer_offset <= buffer_size);
d85 5
a89 1
      assert(buffer_size - element->src_offset <= buffer_size);
d92 5
a96 1
      assert(buffer_size - format_size <= buffer_size);
d111 9
a119 2
            assert((info->start_instance + info->instance_count)/element->instance_divisor
                   <= (buffer_max_index + 1));
d124 1
a124 1
   return max_index;
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@d36 3
a38 7
 * Returns the largest legal index value plus one for the current set
 * of bound vertex buffers.  Regardless of any other consideration,
 * all vertex lookups need to be clamped to 0..max_index-1 to prevent
 * an out-of-bound access.
 *
 * Note that if zero is returned it means that one or more buffers is
 * too small to contain any valid vertex data.
d43 1
d51 1
a51 1
   max_index = ~0U - 1;
a60 4
      if (!buffer->buffer) {
         continue;
      }

d71 1
a71 5
      if (buffer->buffer_offset >= buffer_size) {
         /* buffer is too small */
         return 0;
      }

d74 1
a74 5
      if (element->src_offset >= buffer_size) {
         /* buffer is too small */
         return 0;
      }

d77 1
a77 5
      if (format_size > buffer_size) {
         /* buffer is too small */
         return 0;
      }

d92 2
a93 9
            if ((info->start_instance + info->instance_count)/element->instance_divisor
                > (buffer_max_index + 1)) {
               /* FIXME: We really should stop thinking in terms of maximum
                * indices/instances and simply start clamping against buffer
                * size. */
               debug_printf("%s: too many instances for vertex buffer\n",
                            __FUNCTION__);
               return 0;
            }
d98 1
a98 1
   return max_index + 1;
@


1.1.1.2
log
@Import Mesa 10.4.3
@
text
@a29 1
#include "util/u_inlines.h"
a124 42
}


/* This extracts the draw arguments from the info_in->indirect resource,
 * puts them into a new instance of pipe_draw_info, and calls draw_vbo on it.
 */
void
util_draw_indirect(struct pipe_context *pipe,
                   const struct pipe_draw_info *info_in)
{
   struct pipe_draw_info info;
   struct pipe_transfer *transfer;
   uint32_t *params;
   const unsigned num_params = info_in->indexed ? 5 : 4;

   assert(info_in->indirect);
   assert(!info_in->count_from_stream_output);

   memcpy(&info, info_in, sizeof(info));

   params = (uint32_t *)
      pipe_buffer_map_range(pipe,
                            info_in->indirect,
                            info_in->indirect_offset,
                            num_params * sizeof(uint32_t),
                            PIPE_TRANSFER_READ,
                            &transfer);
   if (!transfer) {
      debug_printf("%s: failed to map indirect buffer\n", __FUNCTION__);
      return;
   }

   info.count = params[0];
   info.instance_count = params[1];
   info.start = params[2];
   info.index_bias = info_in->indexed ? params[3] : 0;
   info.start_instance = info_in->indexed ? params[4] : params[3];
   info.indirect = NULL;

   pipe_buffer_unmap(pipe, transfer);

   pipe->draw_vbo(pipe, &info);
@


1.1.1.3
log
@Import Mesa 10.2.9
@
text
@d30 1
d126 42
@


