head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.28;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.53;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.26;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.55;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.48;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* Helper utility for uploading user buffers & other data, and
 * coalescing small buffers into larger ones.
 */

#ifndef U_UPLOAD_MGR_H
#define U_UPLOAD_MGR_H

#include "pipe/p_compiler.h"

struct pipe_context;
struct pipe_resource;


/**
 * Create the upload manager.
 *
 * \param pipe          Pipe driver.
 * \param default_size  Minimum size of the upload buffer, in bytes.
 * \param alignment     Alignment of each suballocation in the upload buffer.
 * \param bind          Bitmask of PIPE_BIND_* flags.
 */
struct u_upload_mgr *u_upload_create( struct pipe_context *pipe,
                                      unsigned default_size,
                                      unsigned alignment,
                                      unsigned bind );

/**
 * Destroy the upload manager.
 */
void u_upload_destroy( struct u_upload_mgr *upload );

/**
 * Unmap upload buffer
 *
 * \param upload           Upload manager
 *
 * This must usually be called prior to firing the command stream
 * which references the upload buffer, as many memory managers either
 * don't like firing a mapped buffer or cause subsequent maps of a
 * fired buffer to wait.
 */
void u_upload_unmap( struct u_upload_mgr *upload );

/**
 * Sub-allocate new memory from the upload buffer.
 *
 * \param upload           Upload manager
 * \param min_out_offset   Minimum offset that should be returned in out_offset.
 * \param size             Size of the allocation.
 * \param out_offset       Pointer to where the new buffer offset will be returned.
 * \param outbuf           Pointer to where the upload buffer will be returned.
 * \param ptr              Pointer to the allocated memory that is returned.
 */
enum pipe_error u_upload_alloc( struct u_upload_mgr *upload,
                                unsigned min_out_offset,
                                unsigned size,
                                unsigned *out_offset,
                                struct pipe_resource **outbuf,
                                void **ptr );


/**
 * Allocate and write data to the upload buffer.
 *
 * Same as u_upload_alloc, but in addition to that, it copies "data"
 * to the pointer returned from u_upload_alloc.
 */
enum pipe_error u_upload_data( struct u_upload_mgr *upload,
                               unsigned min_out_offset,
                               unsigned size,
                               const void *data,
                               unsigned *out_offset,
                               struct pipe_resource **outbuf);


/**
 * Allocate space in an upload buffer and copy an input buffer to it.
 *
 * Same as u_upload_data, except that the input data comes from a buffer
 * instead of a user pointer.
 */
enum pipe_error u_upload_buffer( struct u_upload_mgr *upload,
                                 unsigned min_out_offset,
                                 unsigned offset,
                                 unsigned size,
                                 struct pipe_resource *inbuf,
                                 unsigned *out_offset,
                                 struct pipe_resource **outbuf);



#endif

@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@a59 10
 * Unmap and release old upload buffer.
 * 
 * This is like u_upload_unmap() except the upload buffer is released for
 * recycling. This should be called on real hardware flushes on systems
 * that don't support the PIPE_TRANSFER_UNSYNCHRONIZED flag, as otherwise
 * the next u_upload_buffer will cause a sync on the buffer.
 */
void u_upload_flush( struct u_upload_mgr *upload );

/**
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d59 2
a60 1
/* Unmap and release old buffer.
d62 12
d77 1
a77 2
 * fired buffer to wait.  For now, it's easiest just to grab a new
 * buffer.
d79 1
a79 1
void u_upload_flush( struct u_upload_mgr *upload );
a88 1
 * \param flushed          Whether the upload buffer was flushed.
a95 1
                                boolean *flushed,
d110 1
a110 2
                               struct pipe_resource **outbuf,
                               boolean *flushed );
d114 1
a114 1
 * Allocate and copy an input buffer to the upload buffer.
d125 1
a125 2
                                 struct pipe_resource **outbuf,
                                 boolean *flushed );
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d35 2
d41 8
d52 1
a52 1
                                      unsigned usage );
d54 3
d69 18
d88 7
d96 1
d100 2
a101 1
                               struct pipe_resource **outbuf );
d104 6
d111 1
d116 2
a117 1
                                 struct pipe_resource **outbuf );
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d35 2
a36 1
#include "pipe/p_defines.h"
a37 3
struct pipe_screen;
struct pipe_buffer;
struct u_upload_mgr;
d39 1
a39 2

struct u_upload_mgr *u_upload_create( struct pipe_screen *screen,
d61 1
a61 1
                               struct pipe_buffer **outbuf );
d67 1
a67 1
                                 struct pipe_buffer *inbuf,
d69 1
a69 1
                                 struct pipe_buffer **outbuf );
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d35 1
a35 2
struct pipe_context;
struct pipe_resource;
d37 3
d41 2
a42 1
struct u_upload_mgr *u_upload_create( struct pipe_context *pipe,
d64 1
a64 1
                               struct pipe_resource **outbuf );
d70 1
a70 1
                                 struct pipe_resource *inbuf,
d72 1
a72 1
                                 struct pipe_resource **outbuf );
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a34 2
#include "pipe/p_compiler.h"

a38 8
/**
 * Create the upload manager.
 *
 * \param pipe          Pipe driver.
 * \param default_size  Minimum size of the upload buffer, in bytes.
 * \param alignment     Alignment of each suballocation in the upload buffer.
 * \param bind          Bitmask of PIPE_BIND_* flags.
 */
d42 1
a42 1
                                      unsigned bind );
a43 3
/**
 * Destroy the upload manager.
 */
d46 1
a46 2
/**
 * Unmap and release old upload buffer.
a47 12
 * This is like u_upload_unmap() except the upload buffer is released for
 * recycling. This should be called on real hardware flushes on systems
 * that don't support the PIPE_TRANSFER_UNSYNCHRONIZED flag, as otherwise
 * the next u_upload_buffer will cause a sync on the buffer.
 */
void u_upload_flush( struct u_upload_mgr *upload );

/**
 * Unmap upload buffer
 *
 * \param upload           Upload manager
 *
d51 2
a52 1
 * fired buffer to wait.
d54 1
a54 18
void u_upload_unmap( struct u_upload_mgr *upload );

/**
 * Sub-allocate new memory from the upload buffer.
 *
 * \param upload           Upload manager
 * \param min_out_offset   Minimum offset that should be returned in out_offset.
 * \param size             Size of the allocation.
 * \param out_offset       Pointer to where the new buffer offset will be returned.
 * \param outbuf           Pointer to where the upload buffer will be returned.
 * \param ptr              Pointer to the allocated memory that is returned.
 */
enum pipe_error u_upload_alloc( struct u_upload_mgr *upload,
                                unsigned min_out_offset,
                                unsigned size,
                                unsigned *out_offset,
                                struct pipe_resource **outbuf,
                                void **ptr );
a56 6
/**
 * Allocate and write data to the upload buffer.
 *
 * Same as u_upload_alloc, but in addition to that, it copies "data"
 * to the pointer returned from u_upload_alloc.
 */
a57 1
                               unsigned min_out_offset,
d61 1
a61 1
                               struct pipe_resource **outbuf);
a63 6
/**
 * Allocate space in an upload buffer and copy an input buffer to it.
 *
 * Same as u_upload_data, except that the input data comes from a buffer
 * instead of a user pointer.
 */
a64 1
                                 unsigned min_out_offset,
d69 1
a69 1
                                 struct pipe_resource **outbuf);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d60 10
@


