head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.2
	OPENBSD_5_6_BASE:1.1.1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.1.1.2.0.2
	OPENBSD_5_5_BASE:1.1.1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.28;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2015.02.20.23.09.51;	author jsg;	state Exp;
branches;
next	1.2;
commitid	4ry2gvZGMXkCUD2n;

1.2
date	2015.01.25.14.41.15;	author jsg;	state dead;
branches;
next	1.1;
commitid	mcxB0JvoI9gTDYXU;

1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.49;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.47;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2010 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 **************************************************************************/

/**
 * @@file
 * SRGB translation.
 *
 * @@author Brian Paul <brianp@@vmware.com>
 * @@author Michal Krol <michal@@vmware.com>
 * @@author Jose Fonseca <jfonseca@@vmware.com>
 */

#ifndef U_FORMAT_SRGB_H_
#define U_FORMAT_SRGB_H_


#include "pipe/p_compiler.h"
#include "u_pack_color.h"
#include "u_math.h"


extern const float
util_format_srgb_8unorm_to_linear_float_table[256];

extern const uint8_t
util_format_srgb_to_linear_8unorm_table[256];

extern const uint8_t
util_format_linear_to_srgb_8unorm_table[256];

extern const unsigned
util_format_linear_to_srgb_helper_table[104];


/**
 * Convert a unclamped linear float to srgb value in the [0,255].
 */
static INLINE uint8_t
util_format_linear_float_to_srgb_8unorm(float x)
{
   /* this would be exact but (probably much) slower */
   if (0) {
      if (x >= 1.0f)
         return 255;
      else if (x >= 0.0031308f)
         return float_to_ubyte(1.055f * powf(x, 0.41666666f) - 0.055f);
      else if (x > 0.0f)
         return float_to_ubyte(12.92f * x);
      else
         return 0;
   }
   else {
      /*
       * This is taken from https://gist.github.com/rygorous/2203834
       * Use LUT and do linear interpolation.
       */
      union fi almostone, minval, f;
      unsigned tab, bias, scale, t;

      almostone.ui = 0x3f7fffff;
      minval.ui = (127-13) << 23;

      /*
       * Clamp to [2^(-13), 1-eps]; these two values map to 0 and 1, respectively.
       * The tests are carefully written so that NaNs map to 0, same as in the
       * reference implementation.
       */
      if (!(x > minval.f))
         x = minval.f;
      if (x > almostone.f)
         x = almostone.f;

      /* Do the table lookup and unpack bias, scale */
      f.f = x;
      tab = util_format_linear_to_srgb_helper_table[(f.ui - minval.ui) >> 20];
      bias = (tab >> 16) << 9;
      scale = tab & 0xffff;

      /* Grab next-highest mantissa bits and perform linear interpolation */
      t = (f.ui >> 12) & 0xff;
      return (uint8_t) ((bias + scale*t) >> 16);
   }
}


/**
 * Convert an 8-bit sRGB value from non-linear space to a
 * linear RGB value in [0, 1].
 * Implemented with a 256-entry lookup table.
 */
static INLINE float
util_format_srgb_8unorm_to_linear_float(uint8_t x)
{
   return util_format_srgb_8unorm_to_linear_float_table[x];
}


/*
 * XXX These 2 functions probably don't make a lot of sense (but lots
 * of potential callers which most likely all don't make sense neither)
 */

/**
 * Convert a 8bit normalized value from linear to srgb.
 */
static INLINE uint8_t
util_format_linear_to_srgb_8unorm(uint8_t x)
{
   return util_format_linear_to_srgb_8unorm_table[x];
}


/**
 * Convert a 8bit normalized value from srgb to linear.
 */
static INLINE uint8_t
util_format_srgb_to_linear_8unorm(uint8_t x)
{
   return util_format_srgb_to_linear_8unorm_table[x];
}


#endif /* U_FORMAT_SRGB_H_ */
@


1.3
log
@Merge Mesa 10.2.9
@
text
@@


1.2
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d42 1
d55 3
a60 2
 * XXX this hasn't been tested (render to srgb surface).
 * XXX this needs optimization.
d65 42
a106 8
   if (x >= 1.0f)
      return 255;
   else if (x >= 0.0031308f)
      return float_to_ubyte(1.055f * powf(x, 0.41666f) - 0.055f);
   else if (x > 0.0f)
      return float_to_ubyte(12.92f * x);
   else
      return 0;
d121 5
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a85 5
/*
 * XXX These 2 functions probably don't make a lot of sense (but lots
 * of potential callers which most likely all don't make sense neither)
 */

@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a41 1
#include "u_pack_color.h"
a53 3
extern const unsigned
util_format_linear_to_srgb_helper_table[104];

d57 2
d63 8
a70 42
   /* this would be exact but (probably much) slower */
   if (0) {
      if (x >= 1.0f)
         return 255;
      else if (x >= 0.0031308f)
         return float_to_ubyte(1.055f * powf(x, 0.41666666f) - 0.055f);
      else if (x > 0.0f)
         return float_to_ubyte(12.92f * x);
      else
         return 0;
   }
   else {
      /*
       * This is taken from https://gist.github.com/rygorous/2203834
       * Use LUT and do linear interpolation.
       */
      union fi almostone, minval, f;
      unsigned tab, bias, scale, t;

      almostone.ui = 0x3f7fffff;
      minval.ui = (127-13) << 23;

      /*
       * Clamp to [2^(-13), 1-eps]; these two values map to 0 and 1, respectively.
       * The tests are carefully written so that NaNs map to 0, same as in the
       * reference implementation.
       */
      if (!(x > minval.f))
         x = minval.f;
      if (x > almostone.f)
         x = almostone.f;

      /* Do the table lookup and unpack bias, scale */
      f.f = x;
      tab = util_format_linear_to_srgb_helper_table[(f.ui - minval.ui) >> 20];
      bias = (tab >> 16) << 9;
      scale = tab & 0xffff;

      /* Grab next-highest mantissa bits and perform linear interpolation */
      t = (f.ui >> 12) & 0xff;
      return (uint8_t) ((bias + scale*t) >> 16);
   }
@


