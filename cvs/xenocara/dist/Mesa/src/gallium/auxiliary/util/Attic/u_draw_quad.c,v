head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.28;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.48;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.46;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.47;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2008 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


#include "pipe/p_context.h"
#include "pipe/p_defines.h"
#include "util/u_inlines.h"
#include "util/u_draw_quad.h"
#include "util/u_memory.h"
#include "cso_cache/cso_context.h"


/**
 * Draw a simple vertex buffer / primitive.
 * Limited to float[4] vertex attribs, tightly packed.
 */
void 
util_draw_vertex_buffer(struct pipe_context *pipe,
                        struct cso_context *cso,
                        struct pipe_resource *vbuf,
                        uint vbuf_slot,
                        uint offset,
                        uint prim_type,
                        uint num_verts,
                        uint num_attribs)
{
   struct pipe_vertex_buffer vbuffer;

   assert(num_attribs <= PIPE_MAX_ATTRIBS);

   /* tell pipe about the vertex buffer */
   memset(&vbuffer, 0, sizeof(vbuffer));
   vbuffer.buffer = vbuf;
   vbuffer.stride = num_attribs * 4 * sizeof(float);  /* vertex size */
   vbuffer.buffer_offset = offset;

   /* note: vertex elements already set by caller */

   if (cso) {
      cso_set_vertex_buffers(cso, vbuf_slot, 1, &vbuffer);
      cso_draw_arrays(cso, prim_type, 0, num_verts);
   } else {
      pipe->set_vertex_buffers(pipe, vbuf_slot, 1, &vbuffer);
      util_draw_arrays(pipe, prim_type, 0, num_verts);
   }
}


/**
 * Draw a simple vertex buffer / primitive.
 * Limited to float[4] vertex attribs, tightly packed.
 */
void
util_draw_user_vertex_buffer(struct cso_context *cso, void *buffer,
                             uint prim_type, uint num_verts, uint num_attribs)
{
   struct pipe_vertex_buffer vbuffer = {0};

   assert(num_attribs <= PIPE_MAX_ATTRIBS);

   vbuffer.user_buffer = buffer;
   vbuffer.stride = num_attribs * 4 * sizeof(float);  /* vertex size */

   /* note: vertex elements already set by caller */

   cso_set_vertex_buffers(cso, 0, 1, &vbuffer);
   cso_draw_arrays(cso, prim_type, 0, num_verts);
}


/**
 * Draw screen-aligned textured quad.
 * Note: this isn't especially efficient.
 */
void 
util_draw_texquad(struct pipe_context *pipe, struct cso_context *cso,
                  uint vbuf_slot,
                  float x0, float y0, float x1, float y1, float z)
{
   uint numAttribs = 2, i, j;
   uint vertexBytes = 4 * (4 * numAttribs * sizeof(float));
   struct pipe_resource *vbuf = NULL;  
   float *v = NULL;

   v = MALLOC(vertexBytes);
   if (v == NULL)
      goto out;

   /*
    * Load vertex buffer
    */
   for (i = j = 0; i < 4; i++) {
      v[j + 2] = z;   /* z */
      v[j + 3] = 1.0; /* w */
      v[j + 6] = 0.0; /* r */
      v[j + 7] = 1.0; /* q */
      j += 8;
   }

   v[0] = x0;
   v[1] = y0;
   v[4] = 0.0; /*s*/
   v[5] = 0.0; /*t*/

   v[8] = x1;
   v[9] = y0;
   v[12] = 1.0;
   v[13] = 0.0;

   v[16] = x1;
   v[17] = y1;
   v[20] = 1.0;
   v[21] = 1.0;

   v[24] = x0;
   v[25] = y1;
   v[28] = 0.0;
   v[29] = 1.0;
	 
   vbuf = pipe_buffer_create(pipe->screen, PIPE_BIND_VERTEX_BUFFER,
                             PIPE_USAGE_STAGING, vertexBytes);
   if (!vbuf)
      goto out;
   pipe_buffer_write(pipe, vbuf, 0, vertexBytes, v);

   util_draw_vertex_buffer(pipe, cso, vbuf, vbuf_slot, 0,
                           PIPE_PRIM_TRIANGLE_FAN, 4, 2);

out:
   if (vbuf)
      pipe_resource_reference(&vbuf, NULL);
   
   FREE(v);
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2008 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d45 1
d61 2
d64 2
a65 1
      cso_set_vertex_buffers(cso, 1, &vbuffer);
d67 2
a68 1
      pipe->set_vertex_buffers(pipe, 1, &vbuffer);
d70 17
d90 2
a91 2
   /* draw */
   util_draw_arrays(pipe, prim_type, 0, num_verts);
a94 1

d101 1
d144 2
a145 2
   vbuf = pipe_user_buffer_create(pipe->screen, v, vertexBytes,
				  PIPE_BIND_VERTEX_BUFFER);
d148 1
d150 2
a151 1
   util_draw_vertex_buffer(pipe, cso, vbuf, 0, PIPE_PRIM_TRIANGLE_FAN, 4, 2);
d157 1
a157 2
   if (v)
      FREE(v);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d34 1
d43 1
d59 6
a64 2
   vbuffer.max_index = num_verts - 1;
   pipe->set_vertex_buffers(pipe, 1, &vbuffer);
d79 1
a79 1
util_draw_texquad(struct pipe_context *pipe,
d85 1
a85 1
   uint *v = NULL;
d124 1
a124 1
   if (!vbuf) 
d127 1
a127 1
   util_draw_vertex_buffer(pipe, vbuf, 0, PIPE_PRIM_TRIANGLE_FAN, 4, 2);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d33 1
d42 1
a42 1
                        struct pipe_buffer *vbuf,
a48 2
   struct pipe_vertex_element velements[PIPE_MAX_ATTRIBS];
   uint i;
d60 1
a60 9
   /* tell pipe about the vertex attributes */
   for (i = 0; i < num_attribs; i++) {
      velements[i].src_offset = i * 4 * sizeof(float);
      velements[i].instance_divisor = 0;
      velements[i].vertex_buffer_index = 0;
      velements[i].src_format = PIPE_FORMAT_R32G32B32A32_FLOAT;
      velements[i].nr_components = 4;
   }
   pipe->set_vertex_elements(pipe, num_attribs, velements);
d63 1
a63 1
   pipe->draw_arrays(pipe, prim_type, 0, num_verts);
d70 1
a70 2
 * Note: this function allocs/destroys a vertex buffer and isn't especially
 * efficient.
d76 19
a94 4
   struct pipe_buffer *vbuf;
   uint numAttribs = 2, vertexBytes, i, j;

   vertexBytes = 4 * (4 * numAttribs * sizeof(float));
d96 33
a128 44
   /* XXX create one-time */
   vbuf = pipe_buffer_create(pipe->screen, 32,
                             PIPE_BUFFER_USAGE_VERTEX, vertexBytes);
   if (vbuf) {
      float *v = (float *) pipe_buffer_map(pipe->screen, vbuf,
                                           PIPE_BUFFER_USAGE_CPU_WRITE);
      if (v) {
         /*
          * Load vertex buffer
          */
         for (i = j = 0; i < 4; i++) {
            v[j + 2] = z;   /* z */
            v[j + 3] = 1.0; /* w */
            v[j + 6] = 0.0; /* r */
            v[j + 7] = 1.0; /* q */
            j += 8;
         }

         v[0] = x0;
         v[1] = y0;
         v[4] = 0.0; /*s*/
         v[5] = 0.0; /*t*/

         v[8] = x1;
         v[9] = y0;
         v[12] = 1.0;
         v[13] = 0.0;

         v[16] = x1;
         v[17] = y1;
         v[20] = 1.0;
         v[21] = 1.0;

         v[24] = x0;
         v[25] = y1;
         v[28] = 0.0;
         v[29] = 1.0;

         pipe_buffer_unmap(pipe->screen, vbuf);
         util_draw_vertex_buffer(pipe, vbuf, 0, PIPE_PRIM_TRIANGLE_FAN, 4, 2);
      }

      pipe_buffer_reference(&vbuf, NULL);
   }
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a32 1
#include "util/u_memory.h"
d41 1
a41 1
                        struct pipe_resource *vbuf,
d48 2
d61 9
a69 1
   /* note: vertex elements already set by caller */
d72 1
a72 1
   util_draw_arrays(pipe, prim_type, 0, num_verts);
d79 2
a80 1
 * Note: this isn't especially efficient.
d86 48
a133 18
   uint numAttribs = 2, i, j;
   uint vertexBytes = 4 * (4 * numAttribs * sizeof(float));
   struct pipe_resource *vbuf = NULL;  
   uint *v = NULL;

   v = MALLOC(vertexBytes);
   if (v == NULL)
      goto out;

   /*
    * Load vertex buffer
    */
   for (i = j = 0; i < 4; i++) {
      v[j + 2] = z;   /* z */
      v[j + 3] = 1.0; /* w */
      v[j + 6] = 0.0; /* r */
      v[j + 7] = 1.0; /* q */
      j += 8;
a134 34

   v[0] = x0;
   v[1] = y0;
   v[4] = 0.0; /*s*/
   v[5] = 0.0; /*t*/

   v[8] = x1;
   v[9] = y0;
   v[12] = 1.0;
   v[13] = 0.0;

   v[16] = x1;
   v[17] = y1;
   v[20] = 1.0;
   v[21] = 1.0;

   v[24] = x0;
   v[25] = y1;
   v[28] = 0.0;
   v[29] = 1.0;
	 
   vbuf = pipe_user_buffer_create(pipe->screen, v, vertexBytes,
				  PIPE_BIND_VERTEX_BUFFER);
   if (!vbuf) 
      goto out;

   util_draw_vertex_buffer(pipe, vbuf, 0, PIPE_PRIM_TRIANGLE_FAN, 4, 2);

out:
   if (vbuf)
      pipe_resource_reference(&vbuf, NULL);
   
   if (v)
      FREE(v);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a33 1
#include "cso_cache/cso_context.h"
a41 1
                        struct cso_context *cso,
a42 1
                        uint vbuf_slot,
d57 2
d62 2
a63 7
   if (cso) {
      cso_set_vertex_buffers(cso, vbuf_slot, 1, &vbuffer);
      cso_draw_arrays(cso, prim_type, 0, num_verts);
   } else {
      pipe->set_vertex_buffers(pipe, vbuf_slot, 1, &vbuffer);
      util_draw_arrays(pipe, prim_type, 0, num_verts);
   }
a66 21
/**
 * Draw a simple vertex buffer / primitive.
 * Limited to float[4] vertex attribs, tightly packed.
 */
void
util_draw_user_vertex_buffer(struct cso_context *cso, void *buffer,
                             uint prim_type, uint num_verts, uint num_attribs)
{
   struct pipe_vertex_buffer vbuffer = {0};

   assert(num_attribs <= PIPE_MAX_ATTRIBS);

   vbuffer.user_buffer = buffer;
   vbuffer.stride = num_attribs * 4 * sizeof(float);  /* vertex size */

   /* note: vertex elements already set by caller */

   cso_set_vertex_buffers(cso, 0, 1, &vbuffer);
   cso_draw_arrays(cso, prim_type, 0, num_verts);
}

d73 1
a73 2
util_draw_texquad(struct pipe_context *pipe, struct cso_context *cso,
                  uint vbuf_slot,
d79 1
a79 1
   float *v = NULL;
d116 3
a118 3
   vbuf = pipe_buffer_create(pipe->screen, PIPE_BIND_VERTEX_BUFFER,
                             PIPE_USAGE_STAGING, vertexBytes);
   if (!vbuf)
a119 1
   pipe_buffer_write(pipe, vbuf, 0, vertexBytes, v);
d121 1
a121 2
   util_draw_vertex_buffer(pipe, cso, vbuf, vbuf_slot, 0,
                           PIPE_PRIM_TRIANGLE_FAN, 4, 2);
d127 2
a128 1
   FREE(v);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2008 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


