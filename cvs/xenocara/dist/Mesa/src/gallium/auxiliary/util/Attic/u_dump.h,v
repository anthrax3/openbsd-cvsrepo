head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.28;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.13.59.48;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.46;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.47;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/**
 * @@file
 * Dump data in human/machine readable format.
 * 
 * @@author Jose Fonseca <jfonseca@@vmware.com>
 */

#ifndef U_DEBUG_DUMP_H_
#define U_DEBUG_DUMP_H_


#include "pipe/p_compiler.h"
#include "pipe/p_state.h"

#include <stdio.h>


#ifdef	__cplusplus
extern "C" {
#endif


#define UTIL_DUMP_INVALID_NAME "<invalid>"


/*
 * p_defines.h
 *
 * XXX: These functions don't really dump anything -- just translate into
 * strings so a verb better than "dump" should be used instead, in order to
 * free up the namespace to the true dumper functions.
 */

const char *
util_dump_blend_factor(unsigned value, boolean shortened);

const char *
util_dump_blend_func(unsigned value, boolean shortened);

const char *
util_dump_logicop(unsigned value, boolean shortened);

const char *
util_dump_func(unsigned value, boolean shortened);

const char *
util_dump_stencil_op(unsigned value, boolean shortened);

const char *
util_dump_tex_target(unsigned value, boolean shortened);

const char *
util_dump_tex_wrap(unsigned value, boolean shortened);

const char *
util_dump_tex_mipfilter(unsigned value, boolean shortened);

const char *
util_dump_tex_filter(unsigned value, boolean shortened);

const char *
util_dump_query_type(unsigned value, boolean shortened);


/*
 * p_state.h, through a FILE
 */

void
util_dump_template(FILE *stream,
                   const struct pipe_resource *templat);

void
util_dump_rasterizer_state(FILE *stream,
                           const struct pipe_rasterizer_state *state);

void
util_dump_poly_stipple(FILE *stream,
                       const struct pipe_poly_stipple *state);

void
util_dump_viewport_state(FILE *stream,
                         const struct pipe_viewport_state *state);

void
util_dump_scissor_state(FILE *stream,
                        const struct pipe_scissor_state *state);

void
util_dump_clip_state(FILE *stream,
                     const struct pipe_clip_state *state);

void
util_dump_shader_state(FILE *stream,
                       const struct pipe_shader_state *state);

void
util_dump_depth_stencil_alpha_state(FILE *stream,
                                    const struct pipe_depth_stencil_alpha_state *state);

void
util_dump_rt_blend_state(FILE *stream,
                         const struct pipe_rt_blend_state *state);

void
util_dump_blend_state(FILE *stream,
                      const struct pipe_blend_state *state);

void
util_dump_blend_color(FILE *stream,
                      const struct pipe_blend_color *state);

void
util_dump_stencil_ref(FILE *stream,
                      const struct pipe_stencil_ref *state);

void
util_dump_framebuffer_state(FILE *stream,
                            const struct pipe_framebuffer_state *state);

void
util_dump_sampler_state(FILE *stream,
                        const struct pipe_sampler_state *state);

void
util_dump_surface(FILE *stream,
                  const struct pipe_surface *state);

void
util_dump_transfer(FILE *stream,
                   const struct pipe_transfer *state);

void
util_dump_vertex_buffer(FILE *stream,
                        const struct pipe_vertex_buffer *state);

void
util_dump_vertex_element(FILE *stream,
                         const struct pipe_vertex_element *state);

void
util_dump_draw_info(FILE *stream, const struct pipe_draw_info *state);

void
util_dump_box(FILE *stream, const struct pipe_box *box);

void
util_dump_blit_info(FILE *stream, const struct pipe_blit_info *info);

/* FIXME: Move the other debug_dump_xxx functions out of u_debug.h into here. */


#ifdef	__cplusplus
}
#endif

#endif /* U_DEBUG_H_ */
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d88 3
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d42 2
a52 8
struct os_stream;


/* Duplicated here for convenience */
extern struct os_stream *
os_log_stream;


d90 1
a90 1
 * p_state.h, through an os_stream
d94 1
a94 1
util_dump_template(struct os_stream *stream,
d98 1
a98 1
util_dump_rasterizer_state(struct os_stream *stream,
d102 1
a102 1
util_dump_poly_stipple(struct os_stream *stream,
d106 1
a106 1
util_dump_viewport_state(struct os_stream *stream,
d110 1
a110 1
util_dump_scissor_state(struct os_stream *stream,
d114 1
a114 1
util_dump_clip_state(struct os_stream *stream,
d118 1
a118 1
util_dump_shader_state(struct os_stream *stream,
d122 1
a122 1
util_dump_depth_stencil_alpha_state(struct os_stream *stream,
d126 1
a126 1
util_dump_rt_blend_state(struct os_stream *stream,
d130 1
a130 1
util_dump_blend_state(struct os_stream *stream,
d134 1
a134 1
util_dump_blend_color(struct os_stream *stream,
d138 1
a138 1
util_dump_stencil_ref(struct os_stream *stream,
d142 1
a142 1
util_dump_framebuffer_state(struct os_stream *stream,
d146 1
a146 1
util_dump_sampler_state(struct os_stream *stream,
d150 1
a150 1
util_dump_surface(struct os_stream *stream,
d154 1
a154 1
util_dump_transfer(struct os_stream *stream,
d158 1
a158 1
util_dump_vertex_buffer(struct os_stream *stream,
d162 1
a162 1
util_dump_vertex_element(struct os_stream *stream,
d165 8
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d74 3
d80 3
d101 1
a101 1
                   const struct pipe_texture *templat);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a73 3
util_dump_logicop(unsigned value, boolean shortened);

const char *
a76 3
util_dump_stencil_op(unsigned value, boolean shortened);

const char *
d95 1
a95 1
                   const struct pipe_resource *templat);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a41 2
#include <stdio.h>

d51 8
d96 1
a96 1
 * p_state.h, through a FILE
d100 1
a100 1
util_dump_template(FILE *stream,
d104 1
a104 1
util_dump_rasterizer_state(FILE *stream,
d108 1
a108 1
util_dump_poly_stipple(FILE *stream,
d112 1
a112 1
util_dump_viewport_state(FILE *stream,
d116 1
a116 1
util_dump_scissor_state(FILE *stream,
d120 1
a120 1
util_dump_clip_state(FILE *stream,
d124 1
a124 1
util_dump_shader_state(FILE *stream,
d128 1
a128 1
util_dump_depth_stencil_alpha_state(FILE *stream,
d132 1
a132 1
util_dump_rt_blend_state(FILE *stream,
d136 1
a136 1
util_dump_blend_state(FILE *stream,
d140 1
a140 1
util_dump_blend_color(FILE *stream,
d144 1
a144 1
util_dump_stencil_ref(FILE *stream,
d148 1
a148 1
util_dump_framebuffer_state(FILE *stream,
d152 1
a152 1
util_dump_sampler_state(FILE *stream,
d156 1
a156 1
util_dump_surface(FILE *stream,
d160 1
a160 1
util_dump_transfer(FILE *stream,
d164 1
a164 1
util_dump_vertex_buffer(FILE *stream,
d168 1
a168 1
util_dump_vertex_element(FILE *stream,
a170 8
void
util_dump_draw_info(FILE *stream, const struct pipe_draw_info *state);

void
util_dump_box(FILE *stream, const struct pipe_box *box);

void
util_dump_blit_info(FILE *stream, const struct pipe_blit_info *info);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a87 3
const char *
util_dump_query_type(unsigned value, boolean shortened);

@


