head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	v10_2_3:1.1.1.1
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.28;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2015.02.20.23.09.51;	author jsg;	state Exp;
branches;
next	1.3;
commitid	4ry2gvZGMXkCUD2n;

1.3
date	2015.01.25.14.41.15;	author jsg;	state Exp;
branches;
next	1.2;
commitid	mcxB0JvoI9gTDYXU;

1.2
date	2013.09.05.13.59.49;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.10.47;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2015.01.25.14.06.42;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.3
date	2015.02.20.22.43.49;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright (C) 2011 Red Hat Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#include <stdio.h>
#include "u_math.h"
#include "u_format.h"
#include "u_format_rgtc.h"
#include "u_format_latc.h"

static void u_format_unsigned_encode_rgtc_ubyte(uint8_t *blkaddr, uint8_t srccolors[4][4],
					       int numxpixels, int numypixels);

static void u_format_unsigned_fetch_texel_rgtc(unsigned srcRowStride, const uint8_t *pixdata,
					       unsigned i, unsigned j, uint8_t *value, unsigned comps);

static void u_format_signed_encode_rgtc_ubyte(int8_t *blkaddr, int8_t srccolors[4][4],
					     int numxpixels, int numypixels);

static void u_format_signed_fetch_texel_rgtc(unsigned srcRowStride, const int8_t *pixdata,
					       unsigned i, unsigned j, int8_t *value, unsigned comps);

void
util_format_latc1_unorm_fetch_rgba_8unorm(uint8_t *dst, const uint8_t *src, unsigned i, unsigned j)
{
   /* Fix warnings here: */
   (void) u_format_unsigned_encode_rgtc_ubyte;
   (void) u_format_signed_encode_rgtc_ubyte;

   u_format_unsigned_fetch_texel_rgtc(0, src, i, j, dst, 1);
   dst[1] = dst[0];
   dst[2] = dst[0];
   dst[3] = 255;
}

void
util_format_latc1_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   util_format_rgtc1_unorm_unpack_rgba_8unorm(dst_row, dst_stride, src_row, src_stride, width, height);
}

void
util_format_latc1_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row,
					 unsigned src_stride, unsigned width, unsigned height)
{
   util_format_rgtc1_unorm_pack_rgba_8unorm(dst_row, dst_stride, src_row, src_stride, width, height);
}

void
util_format_latc1_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y, i, j;
   int block_size = 8;

   for(y = 0; y < height; y += 4) {
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 4) {
         for(j = 0; j < 4; ++j) {
            for(i = 0; i < 4; ++i) {
               float *dst = dst_row + (y + j)*dst_stride/sizeof(*dst_row) + (x + i)*4;
               uint8_t tmp_r;
               u_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
               dst[0] =
               dst[1] =
               dst[2] = ubyte_to_float(tmp_r);
               dst[3] = 1.0;
            }
         }
         src += block_size;
      }
      src_row += src_stride;
   }
}

void
util_format_latc1_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   util_format_rgtc1_unorm_pack_rgba_float(dst_row, dst_stride, src_row, src_stride, width, height);
}

void
util_format_latc1_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
   uint8_t tmp_r;

   u_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
   dst[0] =
   dst[1] =
   dst[2] = ubyte_to_float(tmp_r);
   dst[3] = 1.0;
}

void
util_format_latc1_snorm_fetch_rgba_8unorm(uint8_t *dst, const uint8_t *src, unsigned i, unsigned j)
{
   fprintf(stderr,"%s\n", __func__);
}

void
util_format_latc1_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   fprintf(stderr,"%s\n", __func__);
}

void
util_format_latc1_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   fprintf(stderr,"%s\n", __func__);
}

void
util_format_latc1_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   util_format_rgtc1_snorm_pack_rgba_float(dst_row, dst_stride, src_row, src_stride, width, height);
}

void
util_format_latc1_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y, i, j;
   int block_size = 8;

   for(y = 0; y < height; y += 4) {
      const int8_t *src = (int8_t *)src_row;
      for(x = 0; x < width; x += 4) {
         for(j = 0; j < 4; ++j) {
            for(i = 0; i < 4; ++i) {
               float *dst = dst_row + (y + j)*dst_stride/sizeof(*dst_row) + (x + i)*4;
               int8_t tmp_r;
               u_format_signed_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
               dst[0] =
               dst[1] =
               dst[2] = byte_to_float_tex(tmp_r);
               dst[3] = 1.0;
            }
         }
         src += block_size;
      }
      src_row += src_stride;
   }
}

void
util_format_latc1_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
   int8_t tmp_r;

   u_format_signed_fetch_texel_rgtc(0, (int8_t *)src, i, j, &tmp_r, 1);
   dst[0] =
   dst[1] =
   dst[2] = byte_to_float_tex(tmp_r);
   dst[3] = 1.0;
}


void
util_format_latc2_unorm_fetch_rgba_8unorm(uint8_t *dst, const uint8_t *src, unsigned i, unsigned j)
{
   u_format_unsigned_fetch_texel_rgtc(0, src, i, j, dst, 2);
   dst[1] = dst[0];
   dst[2] = dst[0];
   u_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, dst + 3, 2);
}

void
util_format_latc2_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   util_format_rgtc2_unorm_unpack_rgba_8unorm(dst_row, dst_stride, src_row, src_stride, width, height);
}

void
util_format_latc2_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   util_format_rgtc2_unorm_pack_rgba_8unorm(dst_row, dst_stride, src_row, src_stride, width, height);
}

void
util_format_latc2_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   util_format_rxtc2_unorm_pack_rgba_float(dst_row, dst_stride, src_row, src_stride, width, height, 3);
}

void
util_format_latc2_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y, i, j;
   int block_size = 16;

   for(y = 0; y < height; y += 4) {
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 4) {
         for(j = 0; j < 4; ++j) {
            for(i = 0; i < 4; ++i) {
               float *dst = dst_row + (y + j)*dst_stride/sizeof(*dst_row) + (x + i)*4;
               uint8_t tmp_r, tmp_g;
               u_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
               u_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
               dst[0] =
               dst[1] =
               dst[2] = ubyte_to_float(tmp_r);
               dst[3] = ubyte_to_float(tmp_g);
            }
         }
         src += block_size;
      }
      src_row += src_stride;
   }
}

void
util_format_latc2_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
   uint8_t tmp_r, tmp_g;

   u_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
   u_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
   dst[0] =
   dst[1] =
   dst[2] = ubyte_to_float(tmp_r);
   dst[3] = ubyte_to_float(tmp_g);
}


void
util_format_latc2_snorm_fetch_rgba_8unorm(uint8_t *dst, const uint8_t *src, unsigned i, unsigned j)
{
   fprintf(stderr,"%s\n", __func__);
}

void
util_format_latc2_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   fprintf(stderr,"%s\n", __func__);
}

void
util_format_latc2_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   fprintf(stderr,"%s\n", __func__);
}

void
util_format_latc2_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y, i, j;
   int block_size = 16;

   for(y = 0; y < height; y += 4) {
      const int8_t *src = (int8_t *)src_row;
      for(x = 0; x < width; x += 4) {
         for(j = 0; j < 4; ++j) {
            for(i = 0; i < 4; ++i) {
               float *dst = dst_row + (y + j)*dst_stride/sizeof(*dst_row) + (x + i)*4;
               int8_t tmp_r, tmp_g;
               u_format_signed_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
               u_format_signed_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
               dst[0] =
               dst[1] =
               dst[2] = byte_to_float_tex(tmp_r);
               dst[3] = byte_to_float_tex(tmp_g);
            }
         }
         src += block_size;
      }
      src_row += src_stride;
   }
}

void
util_format_latc2_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   util_format_rxtc2_snorm_pack_rgba_float(dst_row, dst_stride, src_row, src_stride, width, height, 3);
}

void
util_format_latc2_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
   int8_t tmp_r, tmp_g;

   u_format_signed_fetch_texel_rgtc(0, (int8_t *)src, i, j, &tmp_r, 2);
   u_format_signed_fetch_texel_rgtc(0, (int8_t *)src + 8, i, j, &tmp_g, 2);
   dst[0] =
   dst[1] =
   dst[2] = byte_to_float_tex(tmp_r);
   dst[3] = byte_to_float_tex(tmp_g);
}


#define TAG(x) u_format_unsigned_##x
#define TYPE uint8_t
#define T_MIN 0
#define T_MAX 255

#include "../../../mesa/main/texcompress_rgtc_tmp.h"

#undef TYPE
#undef TAG
#undef T_MIN
#undef T_MAX


#define TAG(x) u_format_signed_##x
#define TYPE int8_t
#define T_MIN (int8_t)-128
#define T_MAX (int8_t)127

#include "../../../mesa/main/texcompress_rgtc_tmp.h"

#undef TYPE
#undef TAG
#undef T_MIN
#undef T_MAX
@


1.4
log
@Merge Mesa 10.2.9
@
text
@@


1.3
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d30 12
a41 1
#include "util/rgtc.h"
d47 2
a48 2
   (void) util_format_unsigned_encode_rgtc_ubyte;
   (void) util_format_signed_encode_rgtc_ubyte;
d50 1
a50 1
   util_format_unsigned_fetch_texel_rgtc(0, src, i, j, dst, 1);
d82 1
a82 1
               util_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
d106 1
a106 1
   util_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
d150 1
a150 1
               util_format_signed_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
d168 1
a168 1
   util_format_signed_fetch_texel_rgtc(0, (int8_t *)src, i, j, &tmp_r, 1);
d179 1
a179 1
   util_format_unsigned_fetch_texel_rgtc(0, src, i, j, dst, 2);
d182 1
a182 1
   util_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, dst + 3, 2);
d216 2
a217 2
               util_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
               util_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
d235 2
a236 2
   util_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
   util_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
d275 2
a276 2
               util_format_signed_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
               util_format_signed_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
d300 2
a301 2
   util_format_signed_fetch_texel_rgtc(0, (int8_t *)src, i, j, &tmp_r, 2);
   util_format_signed_fetch_texel_rgtc(0, (int8_t *)src + 8, i, j, &tmp_g, 2);
d308 25
@


1.2
log
@Merge Mesa 9.2.0
@
text
@d30 1
a30 12

static void u_format_unsigned_encode_rgtc_ubyte(uint8_t *blkaddr, uint8_t srccolors[4][4],
					       int numxpixels, int numypixels);

static void u_format_unsigned_fetch_texel_rgtc(unsigned srcRowStride, const uint8_t *pixdata,
					       unsigned i, unsigned j, uint8_t *value, unsigned comps);

static void u_format_signed_encode_rgtc_ubyte(int8_t *blkaddr, int8_t srccolors[4][4],
					     int numxpixels, int numypixels);

static void u_format_signed_fetch_texel_rgtc(unsigned srcRowStride, const int8_t *pixdata,
					       unsigned i, unsigned j, int8_t *value, unsigned comps);
d36 2
a37 2
   (void) u_format_unsigned_encode_rgtc_ubyte;
   (void) u_format_signed_encode_rgtc_ubyte;
d39 1
a39 1
   u_format_unsigned_fetch_texel_rgtc(0, src, i, j, dst, 1);
d71 1
a71 1
               u_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
d95 1
a95 1
   u_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
d139 1
a139 1
               u_format_signed_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
d157 1
a157 1
   u_format_signed_fetch_texel_rgtc(0, (int8_t *)src, i, j, &tmp_r, 1);
d168 1
a168 1
   u_format_unsigned_fetch_texel_rgtc(0, src, i, j, dst, 2);
d171 1
a171 1
   u_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, dst + 3, 2);
d205 2
a206 2
               u_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
               u_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
d224 2
a225 2
   u_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
   u_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
d264 2
a265 2
               u_format_signed_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
               u_format_signed_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
d289 2
a290 2
   u_format_signed_fetch_texel_rgtc(0, (int8_t *)src, i, j, &tmp_r, 2);
   u_format_signed_fetch_texel_rgtc(0, (int8_t *)src + 8, i, j, &tmp_g, 2);
a296 25

#define TAG(x) u_format_unsigned_##x
#define TYPE uint8_t
#define T_MIN 0
#define T_MAX 255

#include "../../../mesa/main/texcompress_rgtc_tmp.h"

#undef TYPE
#undef TAG
#undef T_MIN
#undef T_MAX


#define TAG(x) u_format_signed_##x
#define TYPE int8_t
#define T_MIN (int8_t)-128
#define T_MAX (int8_t)127

#include "../../../mesa/main/texcompress_rgtc_tmp.h"

#undef TYPE
#undef TAG
#undef T_MIN
#undef T_MAX
@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d18 4
a21 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d31 1
a31 1
static void u_format_unsigned_encode_rgtc_chan(uint8_t *blkaddr, uint8_t srccolors[4][4],
d37 1
a37 1
static void u_format_signed_encode_rgtc_chan(int8_t *blkaddr, int8_t srccolors[4][4],
d47 2
a48 2
   (void) u_format_unsigned_encode_rgtc_chan;
   (void) u_format_signed_encode_rgtc_chan;
d51 3
a178 2
   puts(__func__);

d180 3
a182 1
   u_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, dst + 1, 2);
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@d18 3
a20 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d30 1
a30 1
static void u_format_unsigned_encode_rgtc_ubyte(uint8_t *blkaddr, uint8_t srccolors[4][4],
d36 1
a36 1
static void u_format_signed_encode_rgtc_ubyte(int8_t *blkaddr, int8_t srccolors[4][4],
d46 2
a47 2
   (void) u_format_unsigned_encode_rgtc_ubyte;
   (void) u_format_signed_encode_rgtc_ubyte;
a49 3
   dst[1] = dst[0];
   dst[2] = dst[0];
   dst[3] = 255;
d175 2
d178 1
a178 3
   dst[1] = dst[0];
   dst[2] = dst[0];
   u_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, dst + 3, 2);
@


1.1.1.2
log
@Import Mesa 10.4.3
@
text
@d30 12
a41 1
#include "util/rgtc.h"
d47 2
a48 2
   (void) util_format_unsigned_encode_rgtc_ubyte;
   (void) util_format_signed_encode_rgtc_ubyte;
d50 1
a50 1
   util_format_unsigned_fetch_texel_rgtc(0, src, i, j, dst, 1);
d82 1
a82 1
               util_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
d106 1
a106 1
   util_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
d150 1
a150 1
               util_format_signed_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
d168 1
a168 1
   util_format_signed_fetch_texel_rgtc(0, (int8_t *)src, i, j, &tmp_r, 1);
d179 1
a179 1
   util_format_unsigned_fetch_texel_rgtc(0, src, i, j, dst, 2);
d182 1
a182 1
   util_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, dst + 3, 2);
d216 2
a217 2
               util_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
               util_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
d235 2
a236 2
   util_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
   util_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
d275 2
a276 2
               util_format_signed_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
               util_format_signed_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
d300 2
a301 2
   util_format_signed_fetch_texel_rgtc(0, (int8_t *)src, i, j, &tmp_r, 2);
   util_format_signed_fetch_texel_rgtc(0, (int8_t *)src + 8, i, j, &tmp_g, 2);
d308 25
@


1.1.1.3
log
@Import Mesa 10.2.9
@
text
@d30 1
a30 12

static void u_format_unsigned_encode_rgtc_ubyte(uint8_t *blkaddr, uint8_t srccolors[4][4],
					       int numxpixels, int numypixels);

static void u_format_unsigned_fetch_texel_rgtc(unsigned srcRowStride, const uint8_t *pixdata,
					       unsigned i, unsigned j, uint8_t *value, unsigned comps);

static void u_format_signed_encode_rgtc_ubyte(int8_t *blkaddr, int8_t srccolors[4][4],
					     int numxpixels, int numypixels);

static void u_format_signed_fetch_texel_rgtc(unsigned srcRowStride, const int8_t *pixdata,
					       unsigned i, unsigned j, int8_t *value, unsigned comps);
d36 2
a37 2
   (void) u_format_unsigned_encode_rgtc_ubyte;
   (void) u_format_signed_encode_rgtc_ubyte;
d39 1
a39 1
   u_format_unsigned_fetch_texel_rgtc(0, src, i, j, dst, 1);
d71 1
a71 1
               u_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
d95 1
a95 1
   u_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
d139 1
a139 1
               u_format_signed_fetch_texel_rgtc(0, src, i, j, &tmp_r, 1);
d157 1
a157 1
   u_format_signed_fetch_texel_rgtc(0, (int8_t *)src, i, j, &tmp_r, 1);
d168 1
a168 1
   u_format_unsigned_fetch_texel_rgtc(0, src, i, j, dst, 2);
d171 1
a171 1
   u_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, dst + 3, 2);
d205 2
a206 2
               u_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
               u_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
d224 2
a225 2
   u_format_unsigned_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
   u_format_unsigned_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
d264 2
a265 2
               u_format_signed_fetch_texel_rgtc(0, src, i, j, &tmp_r, 2);
               u_format_signed_fetch_texel_rgtc(0, src + 8, i, j, &tmp_g, 2);
d289 2
a290 2
   u_format_signed_fetch_texel_rgtc(0, (int8_t *)src, i, j, &tmp_r, 2);
   u_format_signed_fetch_texel_rgtc(0, (int8_t *)src + 8, i, j, &tmp_g, 2);
a296 25

#define TAG(x) u_format_unsigned_##x
#define TYPE uint8_t
#define T_MIN 0
#define T_MAX 255

#include "../../../mesa/main/texcompress_rgtc_tmp.h"

#undef TYPE
#undef TAG
#undef T_MIN
#undef T_MAX


#define TAG(x) u_format_signed_##x
#define TYPE int8_t
#define T_MIN (int8_t)-128
#define T_MAX (int8_t)127

#include "../../../mesa/main/texcompress_rgtc_tmp.h"

#undef TYPE
#undef TAG
#undef T_MIN
#undef T_MAX
@


