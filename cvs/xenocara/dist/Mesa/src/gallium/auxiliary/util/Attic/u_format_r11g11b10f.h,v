head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.28;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.13.59.49;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.04;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.10.48;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.33.47;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2011 Marek Olšák <maraeo@@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/* Based on code from The OpenGL Programming Guide / 7th Edition, Appendix J.
 * Available here: http://www.opengl-redbook.com/appendices/
 * The algorithm in the book contains a bug though, which is fixed in the code
 * below.
 */

#define UF11(e, m)           ((e << 6) | (m))
#define UF11_EXPONENT_BIAS   15
#define UF11_EXPONENT_BITS   0x1F
#define UF11_EXPONENT_SHIFT  6
#define UF11_MANTISSA_BITS   0x3F
#define UF11_MANTISSA_SHIFT  (23 - UF11_EXPONENT_SHIFT)
#define UF11_MAX_EXPONENT    (UF11_EXPONENT_BITS << UF11_EXPONENT_SHIFT)

#define UF10(e, m)           ((e << 5) | (m))
#define UF10_EXPONENT_BIAS   15
#define UF10_EXPONENT_BITS   0x1F
#define UF10_EXPONENT_SHIFT  5
#define UF10_MANTISSA_BITS   0x1F
#define UF10_MANTISSA_SHIFT  (23 - UF10_EXPONENT_SHIFT)
#define UF10_MAX_EXPONENT    (UF10_EXPONENT_BITS << UF10_EXPONENT_SHIFT)

#define F32_INFINITY         0x7f800000

static INLINE unsigned f32_to_uf11(float val)
{
   union {
      float f;
      uint32_t ui;
   } f32 = {val};

   uint16_t uf11 = 0;

   /* Decode little-endian 32-bit floating-point value */
   int sign = (f32.ui >> 16) & 0x8000;
   /* Map exponent to the range [-127,128] */
   int exponent = ((f32.ui >> 23) & 0xff) - 127;
   int mantissa = f32.ui & 0x007fffff;

   if (exponent == 128) { /* Infinity or NaN */
      /* From the GL_EXT_packed_float spec:
       *
       *     "Additionally: negative infinity is converted to zero; positive
       *      infinity is converted to positive infinity; and both positive and
       *      negative NaN are converted to positive NaN."
       */
      uf11 = UF11_MAX_EXPONENT;
      if (mantissa) {
         uf11 |= 1; /* NaN */
      } else {
         if (sign)
            uf11 = 0; /* 0.0 */
      }
   } else if (sign) {
      return 0;
   } else if (val > 65024.0f) {
      /* From the GL_EXT_packed_float spec:
       *
       *     "Likewise, finite positive values greater than 65024 (the maximum
       *      finite representable unsigned 11-bit floating-point value) are
       *      converted to 65024."
       */
      uf11 = UF11(30, 63);
   }
   else if (exponent > -15) { /* Representable value */
      exponent += UF11_EXPONENT_BIAS;
      mantissa >>= UF11_MANTISSA_SHIFT;
      uf11 = exponent << UF11_EXPONENT_SHIFT | mantissa;
   }

   return uf11;
}

static INLINE float uf11_to_f32(uint16_t val)
{
   union {
      float f;
      uint32_t ui;
   } f32;

   int exponent = (val & 0x07c0) >> UF11_EXPONENT_SHIFT;
   int mantissa = (val & 0x003f);

   f32.f = 0.0;

   if (exponent == 0) {
      if (mantissa != 0) {
         const float scale = 1.0 / (1 << 20);
         f32.f = scale * mantissa;
      }
   }
   else if (exponent == 31) {
      f32.ui = F32_INFINITY | mantissa;
   }
   else {
      float scale, decimal;
      exponent -= 15;
      if (exponent < 0) {
         scale = 1.0f / (1 << -exponent);
      }
      else {
         scale = (float) (1 << exponent);
      }
      decimal = 1.0f + (float) mantissa / 64;
      f32.f = scale * decimal;
   }

   return f32.f;
}

static INLINE unsigned f32_to_uf10(float val)
{
   union {
      float f;
      uint32_t ui;
   } f32 = {val};

   uint16_t uf10 = 0;

   /* Decode little-endian 32-bit floating-point value */
   int sign = (f32.ui >> 16) & 0x8000;
   /* Map exponent to the range [-127,128] */
   int exponent = ((f32.ui >> 23) & 0xff) - 127;
   int mantissa = f32.ui & 0x007fffff;

   if (exponent == 128) {
      /* From the GL_EXT_packed_float spec:
       *
       *     "Additionally: negative infinity is converted to zero; positive
       *      infinity is converted to positive infinity; and both positive and
       *      negative NaN are converted to positive NaN."
       */
      uf10 = UF10_MAX_EXPONENT;
      if (mantissa) {
         uf10 |= 1; /* NaN */
      } else {
         if (sign)
            uf10 = 0; /* 0.0 */
      }
   } else if (sign) {
      return 0;
   } else if (val > 64512.0f) {
      /* From the GL_EXT_packed_float spec:
       *
       *     "Likewise, finite positive values greater than 64512 (the maximum
       *      finite representable unsigned 10-bit floating-point value) are
       *      converted to 64512."
       */
      uf10 = UF10(30, 31);
   }
   else if (exponent > -15) { /* Representable value */
      exponent += UF10_EXPONENT_BIAS;
      mantissa >>= UF10_MANTISSA_SHIFT;
      uf10 = exponent << UF10_EXPONENT_SHIFT | mantissa;
   }

   return uf10;
}

static INLINE float uf10_to_f32(uint16_t val)
{
   union {
      float f;
      uint32_t ui;
   } f32;

   int exponent = (val & 0x03e0) >> UF10_EXPONENT_SHIFT;
   int mantissa = (val & 0x001f);

   f32.f = 0.0;

   if (exponent == 0) {
      if (mantissa != 0) {
         const float scale = 1.0 / (1 << 20);
         f32.f = scale * mantissa;
      }
   }
   else if (exponent == 31) {
      f32.ui = F32_INFINITY | mantissa;
   }
   else {
      float scale, decimal;
      exponent -= 15;
      if (exponent < 0) {
         scale = 1.0f / (1 << -exponent);
      }
      else {
         scale = (float) (1 << exponent);
      }
      decimal = 1.0f + (float) mantissa / 32;
      f32.f = scale * decimal;
   }

   return f32.f;
}

static INLINE unsigned float3_to_r11g11b10f(const float rgb[3])
{
   return ( f32_to_uf11(rgb[0]) & 0x7ff) |
          ((f32_to_uf11(rgb[1]) & 0x7ff) << 11) |
          ((f32_to_uf10(rgb[2]) & 0x3ff) << 22);
}

static INLINE void r11g11b10f_to_float3(unsigned rgb, float retval[3])
{
   retval[0] = uf11_to_f32( rgb        & 0x7ff);
   retval[1] = uf11_to_f32((rgb >> 11) & 0x7ff);
   retval[2] = uf10_to_f32((rgb >> 22) & 0x3ff);
}
@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.2
log
@Merge Mesa 9.2.0
@
text
@d72 1
a72 1
	 uf11 |= 1; /* NaN */
d74 2
a75 2
	 if (sign)
	    uf11 = 0; /* 0.0 */
d158 1
a158 1
	 uf10 |= 1; /* NaN */
d160 2
a161 2
	 if (sign)
	    uf10 = 0; /* 0.0 */
d165 1
a165 1
   } else if (val > 64512.0f) { /* Overflow - flush to Infinity */
@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d30 1
d38 1
d42 1
a42 1
#define UF10_MANTISSA_BITS   0x3F
a62 2
   if (sign) return 0;

d64 6
d71 16
a86 4
      if (mantissa) uf11 |= (mantissa & UF11_MANTISSA_BITS);
   }
   else if (exponent > 15) { /* Overflow - flush to Infinity */
      uf11 = UF11_MAX_EXPONENT;
d122 1
a122 1
         scale = 1.0 / (1 << -exponent);
d125 1
a125 1
         scale = 1 << exponent;
d127 1
a127 1
      decimal = 1.0 + (float) mantissa / 64;
d149 7
a155 7
   if (sign) return 0;

   if (exponent == 128) { /* Infinity or NaN */
      uf10 = UF10_MAX_EXPONENT;
      if (mantissa) uf10 |= (mantissa & UF10_MANTISSA_BITS);
   }
   else if (exponent > 15) { /* Overflow - flush to Infinity */
d157 16
d190 2
a191 2
   int exponent = (val & 0x07c0) >> UF10_EXPONENT_SHIFT;
   int mantissa = (val & 0x003f);
d208 1
a208 1
         scale = 1.0 / (1 << -exponent);
d211 1
a211 1
         scale = 1 << exponent;
d213 1
a213 1
      decimal = 1.0 + (float) mantissa / 32;
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@a29 1
#define UF11(e, m)           ((e << 6) | (m))
a36 1
#define UF10(e, m)           ((e << 5) | (m))
d40 1
a40 1
#define UF10_MANTISSA_BITS   0x1F
d61 2
a63 6
      /* From the GL_EXT_packed_float spec:
       *
       *     "Additionally: negative infinity is converted to zero; positive
       *      infinity is converted to positive infinity; and both positive and
       *      negative NaN are converted to positive NaN."
       */
d65 4
a68 16
      if (mantissa) {
	 uf11 |= 1; /* NaN */
      } else {
	 if (sign)
	    uf11 = 0; /* 0.0 */
      }
   } else if (sign) {
      return 0;
   } else if (val > 65024.0f) {
      /* From the GL_EXT_packed_float spec:
       *
       *     "Likewise, finite positive values greater than 65024 (the maximum
       *      finite representable unsigned 11-bit floating-point value) are
       *      converted to 65024."
       */
      uf11 = UF11(30, 63);
d104 1
a104 1
         scale = 1.0f / (1 << -exponent);
d107 1
a107 1
         scale = (float) (1 << exponent);
d109 1
a109 1
      decimal = 1.0f + (float) mantissa / 64;
d131 7
a137 7
   if (exponent == 128) {
      /* From the GL_EXT_packed_float spec:
       *
       *     "Additionally: negative infinity is converted to zero; positive
       *      infinity is converted to positive infinity; and both positive and
       *      negative NaN are converted to positive NaN."
       */
a138 16
      if (mantissa) {
	 uf10 |= 1; /* NaN */
      } else {
	 if (sign)
	    uf10 = 0; /* 0.0 */
      }
   } else if (sign) {
      return 0;
   } else if (val > 64512.0f) { /* Overflow - flush to Infinity */
      /* From the GL_EXT_packed_float spec:
       *
       *     "Likewise, finite positive values greater than 64512 (the maximum
       *      finite representable unsigned 10-bit floating-point value) are
       *      converted to 64512."
       */
      uf10 = UF10(30, 31);
d156 2
a157 2
   int exponent = (val & 0x03e0) >> UF10_EXPONENT_SHIFT;
   int mantissa = (val & 0x001f);
d174 1
a174 1
         scale = 1.0f / (1 << -exponent);
d177 1
a177 1
         scale = (float) (1 << exponent);
d179 1
a179 1
      decimal = 1.0f + (float) mantissa / 32;
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d72 1
a72 1
         uf11 |= 1; /* NaN */
d74 2
a75 2
         if (sign)
            uf11 = 0; /* 0.0 */
d158 1
a158 1
         uf10 |= 1; /* NaN */
d160 2
a161 2
         if (sign)
            uf10 = 0; /* 0.0 */
d165 1
a165 1
   } else if (val > 64512.0f) {
@


