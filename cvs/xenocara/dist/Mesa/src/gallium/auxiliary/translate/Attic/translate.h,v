head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.27;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.13.59.46;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.25;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.42;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.46;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright 2008 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * VMWARE AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * Vertex fetch/store/convert code.  This functionality is used in two places:
 * 1. Vertex fetch/convert - to grab vertex data from incoming vertex
 *    arrays and convert to format needed by vertex shaders.
 * 2. Vertex store/emit - to convert simple float[][4] vertex attributes
 *    (which is the organization used throughout the draw/prim pipeline) to
 *    hardware-specific formats and emit into hardware vertex buffers.
 *
 *
 * Authors:
 *    Keith Whitwell <keithw@@vmware.com>
 */

#ifndef _TRANSLATE_H
#define _TRANSLATE_H


#include "pipe/p_compiler.h"
#include "pipe/p_format.h"
#include "pipe/p_state.h"

/**
 * Translate has to work on one more attribute because
 * the draw module has to be able to pass the vertex
 * position even if the fragment shader already consumes
 * PIPE_MAX_ATTRIBS inputs.
 */
#define TRANSLATE_MAX_ATTRIBS (PIPE_MAX_ATTRIBS + 1)

enum translate_element_type {
   TRANSLATE_ELEMENT_NORMAL,
   TRANSLATE_ELEMENT_INSTANCE_ID
};

struct translate_element 
{
   enum translate_element_type type;
   enum pipe_format input_format;
   enum pipe_format output_format;
   unsigned input_buffer:8;
   unsigned input_offset:24;
   unsigned instance_divisor;
   unsigned output_offset;
};


struct translate_key {
   unsigned output_stride;
   unsigned nr_elements;
   struct translate_element element[TRANSLATE_MAX_ATTRIBS];
};


struct translate;


typedef void (PIPE_CDECL *run_elts_func)(struct translate *,
                                         const unsigned *elts,
                                         unsigned count,
                                         unsigned start_instance,
                                         unsigned instance_id,
                                         void *output_buffer);

typedef void (PIPE_CDECL *run_elts16_func)(struct translate *,
                                           const uint16_t *elts,
                                           unsigned count,
                                           unsigned start_instance,
                                           unsigned instance_id,
                                           void *output_buffer);

typedef void (PIPE_CDECL *run_elts8_func)(struct translate *,
                                          const uint8_t *elts,
                                          unsigned count,
                                          unsigned start_instance,
                                          unsigned instance_id,
                                          void *output_buffer);

typedef void (PIPE_CDECL *run_func)(struct translate *,
                                    unsigned start,
                                    unsigned count,
                                    unsigned start_instance,
                                    unsigned instance_id,
                                    void *output_buffer);

struct translate {
   struct translate_key key;

   void (*release)( struct translate * );

   void (*set_buffer)( struct translate *,
		       unsigned i,
		       const void *ptr,
		       unsigned stride,
		       unsigned max_index );

   run_elts_func run_elts;
   run_elts16_func run_elts16;
   run_elts8_func run_elts8;
   run_func run;
};



struct translate *translate_create( const struct translate_key *key );

boolean translate_is_output_format_supported(enum pipe_format format);

static INLINE int translate_keysize( const struct translate_key *key )
{
   return 2 * sizeof(int) + key->nr_elements * sizeof(struct translate_element);
}

static INLINE int translate_key_compare( const struct translate_key *a,
                                         const struct translate_key *b )
{
   int keysize_a = translate_keysize(a);
   int keysize_b = translate_keysize(b);

   if (keysize_a != keysize_b) {
      return keysize_a - keysize_b;
   }
   return memcmp(a, b, keysize_a);
}


static INLINE void translate_key_sanitize( struct translate_key *a )
{
   int keysize = translate_keysize(a);
   char *ptr = (char *)a;
   memset(ptr + keysize, 0, sizeof(*a) - keysize);
}


/*******************************************************************************
 *  Private:
 */
struct translate *translate_sse2_create( const struct translate_key *key );

struct translate *translate_generic_create( const struct translate_key *key );

boolean translate_generic_is_output_format_supported(enum pipe_format format);

#endif
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d2 1
a2 1
 * Copyright 2008 Tungsten Graphics, inc.
d19 1
a19 1
 * TUNGSTEN GRAPHICS AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
d36 1
a36 1
 *    Keith Whitwell <keithw@@tungstengraphics.com>
d47 8
d75 1
a75 1
   struct translate_element element[PIPE_MAX_ATTRIBS + 1];
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d77 1
d84 1
d91 1
d98 1
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d71 27
d106 2
a107 1
		       unsigned stride );
d109 4
a112 11
   void (PIPE_CDECL *run_elts)( struct translate *,
                                const unsigned *elts,
                                unsigned count,
                                unsigned instance_id,
                                void *output_buffer);

   void (PIPE_CDECL *run)( struct translate *,
                           unsigned start,
                           unsigned count,
                           unsigned instance_id,
                           void *output_buffer);
d117 1
a117 8
#if 0
struct translate_context *translate_context_create( void );
void translate_context_destroy( struct translate_context * );

struct translate *translate_lookup_or_create( struct translate_context *tctx,
					      const struct translate_key *key );
#endif

d119 1
a119 1
struct translate *translate_create( const struct translate_key *key );
d154 1
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a70 27
struct translate;


typedef void (PIPE_CDECL *run_elts_func)(struct translate *,
                                         const unsigned *elts,
                                         unsigned count,
                                         unsigned instance_id,
                                         void *output_buffer);

typedef void (PIPE_CDECL *run_elts16_func)(struct translate *,
                                           const uint16_t *elts,
                                           unsigned count,
                                           unsigned instance_id,
                                           void *output_buffer);

typedef void (PIPE_CDECL *run_elts8_func)(struct translate *,
                                          const uint8_t *elts,
                                          unsigned count,
                                          unsigned instance_id,
                                          void *output_buffer);

typedef void (PIPE_CDECL *run_func)(struct translate *,
                                    unsigned start,
                                    unsigned count,
                                    unsigned instance_id,
                                    void *output_buffer);

d79 1
a79 2
		       unsigned stride,
		       unsigned max_index );
d81 11
a91 4
   run_elts_func run_elts;
   run_elts16_func run_elts16;
   run_elts8_func run_elts8;
   run_func run;
d96 9
a106 2
boolean translate_is_output_format_supported(enum pipe_format format);

a139 1
boolean translate_generic_is_output_format_supported(enum pipe_format format);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a76 1
                                         unsigned start_instance,
a82 1
                                           unsigned start_instance,
a88 1
                                          unsigned start_instance,
a94 1
                                    unsigned start_instance,
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d2 1
a2 1
 * Copyright 2008 VMware, Inc.
d19 1
a19 1
 * VMWARE AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
d36 1
a36 1
 *    Keith Whitwell <keithw@@vmware.com>
a46 8
/**
 * Translate has to work on one more attribute because
 * the draw module has to be able to pass the vertex
 * position even if the fragment shader already consumes
 * PIPE_MAX_ATTRIBS inputs.
 */
#define TRANSLATE_MAX_ATTRIBS (PIPE_MAX_ATTRIBS + 1)

d67 1
a67 1
   struct translate_element element[TRANSLATE_MAX_ATTRIBS];
@


