head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.13.59.37;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.18;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.44;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * VMWARE AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include "u_indices.h"
#include "u_indices_priv.h"


static void translate_ubyte_ushort( const void *in,
                                    unsigned start,
                                    unsigned nr,
                                    void *out )
{
   const ubyte *in_ub = (const ubyte *)in;
   ushort *out_us = (ushort *)out;
   unsigned i;
   for (i = 0; i < nr; i++)
      out_us[i] = (ushort) in_ub[i+start];
}

static void translate_memcpy_ushort( const void *in,
                                     unsigned start,
                                     unsigned nr,
                                     void *out )
{
   memcpy(out, &((short *)in)[start], nr*sizeof(short));
}
                              
static void translate_memcpy_uint( const void *in,
                                   unsigned start,
                                   unsigned nr,
                                   void *out )
{
   memcpy(out, &((int *)in)[start], nr*sizeof(int));
}


static void generate_linear_ushort( unsigned start,
                                    unsigned nr,
                                    void *out )
{
   ushort *out_us = (ushort *)out;
   unsigned i;
   for (i = 0; i < nr; i++)
      out_us[i] = (ushort)(i + start);
}
                              
static void generate_linear_uint( unsigned start,
                                  unsigned nr,
                                  void *out )
{
   unsigned *out_ui = (unsigned *)out;
   unsigned i;
   for (i = 0; i < nr; i++)
      out_ui[i] = i + start;
}


/**
 * Given a primitive type and number of vertices, return the number of vertices
 * needed to draw the primitive with fill mode = PIPE_POLYGON_MODE_LINE using
 * separate lines (PIPE_PRIM_LINES).
 */
static unsigned nr_lines( unsigned prim,
                          unsigned nr )
{
   switch (prim) {
   case PIPE_PRIM_TRIANGLES:
      return (nr / 3) * 6; 
   case PIPE_PRIM_TRIANGLE_STRIP:
      return (nr - 2) * 6;
   case PIPE_PRIM_TRIANGLE_FAN:
      return (nr - 2)  * 6;
   case PIPE_PRIM_QUADS:
      return (nr / 4) * 8;
   case PIPE_PRIM_QUAD_STRIP:
      return (nr - 2) / 2 * 8;
   case PIPE_PRIM_POLYGON:
      return 2 * nr; /* a line (two verts) for each polygon edge */
   default:
      assert(0);
      return 0;
   }
}
                              


int u_unfilled_translator( unsigned prim,
                        unsigned in_index_size,
                        unsigned nr,
                        unsigned unfilled_mode,
                        unsigned *out_prim,
                        unsigned *out_index_size,
                        unsigned *out_nr,
                        u_translate_func *out_translate )
{
   unsigned in_idx;
   unsigned out_idx;

   u_unfilled_init();

   in_idx = in_size_idx(in_index_size);
   *out_index_size = (in_index_size == 4) ? 4 : 2;
   out_idx = out_size_idx(*out_index_size);

   if (unfilled_mode == PIPE_POLYGON_MODE_POINT) 
   {
      *out_prim = PIPE_PRIM_POINTS;
      *out_nr = nr;

      switch (in_index_size)
      {
      case 1:
         *out_translate = translate_ubyte_ushort;
         return U_TRANSLATE_NORMAL;
      case 2:
         *out_translate = translate_memcpy_uint;
         return U_TRANSLATE_MEMCPY;
      case 4:
         *out_translate = translate_memcpy_ushort;
         return U_TRANSLATE_MEMCPY;
      default:
         *out_translate = translate_memcpy_uint;
         *out_nr = 0;
         assert(0);
         return U_TRANSLATE_ERROR;
      }
   }
   else {
      assert(unfilled_mode == PIPE_POLYGON_MODE_LINE);
      *out_prim = PIPE_PRIM_LINES;
      *out_translate = translate_line[in_idx][out_idx][prim];
      *out_nr = nr_lines( prim, nr );
      return U_TRANSLATE_NORMAL;
   }
}


/**
 * Utility for converting unfilled polygons into points, lines, triangles.
 * Few drivers have direct support for OpenGL's glPolygonMode.
 * This function helps with converting triangles into points or lines
 * when the front and back fill modes are the same.  When there's
 * different front/back fill modes, that can be handled with the
 * 'draw' module.
 */
int u_unfilled_generator( unsigned prim,
                          unsigned start,
                          unsigned nr,
                          unsigned unfilled_mode,
                          unsigned *out_prim,
                          unsigned *out_index_size,
                          unsigned *out_nr,
                          u_generate_func *out_generate )
{
   unsigned out_idx;

   u_unfilled_init();

   *out_index_size = ((start + nr) > 0xfffe) ? 4 : 2;
   out_idx = out_size_idx(*out_index_size);

   if (unfilled_mode == PIPE_POLYGON_MODE_POINT) {

      if (*out_index_size == 4)
         *out_generate = generate_linear_uint;
      else
         *out_generate = generate_linear_ushort;

      *out_prim = PIPE_PRIM_POINTS;
      *out_nr = nr;
      return U_GENERATE_LINEAR;
   }
   else {
      assert(unfilled_mode == PIPE_POLYGON_MODE_LINE);
      *out_prim = PIPE_PRIM_LINES;
      *out_generate = generate_line[out_idx][prim];
      *out_nr = nr_lines( prim, nr );

      return U_GENERATE_REUSABLE;
   }
}

@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d30 1
d38 1
a38 1
      out_us[i] = (ushort) in_ub[i];
d42 1
d46 1
a46 1
   memcpy(out, in, nr*sizeof(short));
d50 1
d54 1
a54 1
   memcpy(out, in, nr*sizeof(int));
d58 2
a59 1
static void generate_linear_ushort( unsigned nr,
d65 1
a65 1
      out_us[i] = (ushort) i;
d68 2
a69 1
static void generate_linear_uint( unsigned nr,
d75 1
a75 1
      out_ui[i] = i;
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d154 8
a161 1

@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d74 5
d94 1
a94 1
      return (nr - 2) * 6;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a73 5
/**
 * Given a primitive type and number of vertices, return the number of vertices
 * needed to draw the primitive with fill mode = PIPE_POLYGON_MODE_LINE using
 * separate lines (PIPE_PRIM_LINES).
 */
d89 1
a89 1
      return 2 * nr; /* a line (two verts) for each polygon edge */
d149 1
a149 8
/**
 * Utility for converting unfilled polygons into points, lines, triangles.
 * Few drivers have direct support for OpenGL's glPolygonMode.
 * This function helps with converting triangles into points or lines
 * when the front and back fill modes are the same.  When there's
 * different front/back fill modes, that can be handled with the
 * 'draw' module.
 */
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a29 1
                                    unsigned start,
d37 1
a37 1
      out_us[i] = (ushort) in_ub[i+start];
a40 1
                                     unsigned start,
d44 1
a44 1
   memcpy(out, &((short *)in)[start], nr*sizeof(short));
a47 1
                                   unsigned start,
d51 1
a51 1
   memcpy(out, &((int *)in)[start], nr*sizeof(int));
d55 1
a55 2
static void generate_linear_ushort( unsigned start,
                                    unsigned nr,
d61 1
a61 1
      out_us[i] = (ushort)(i + start);
d64 1
a64 2
static void generate_linear_uint( unsigned start,
                                  unsigned nr,
d70 1
a70 1
      out_ui[i] = i + start;
@


