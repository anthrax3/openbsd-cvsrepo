head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.17;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.44;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@#!/usr/bin/env python
copyright = '''
/*
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * VMWARE AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
'''

GENERATE, UBYTE, USHORT, UINT = 'generate', 'ubyte', 'ushort', 'uint'
FIRST, LAST = 'first', 'last'

INTYPES = (GENERATE, UBYTE, USHORT, UINT)
OUTTYPES = (USHORT, UINT)
PRIMS=('tris', 
       'trifan', 
       'tristrip', 
       'quads', 
       'quadstrip', 
       'polygon')

LONGPRIMS=('PIPE_PRIM_TRIANGLES', 
           'PIPE_PRIM_TRIANGLE_FAN', 
           'PIPE_PRIM_TRIANGLE_STRIP', 
           'PIPE_PRIM_QUADS', 
           'PIPE_PRIM_QUAD_STRIP', 
           'PIPE_PRIM_POLYGON')

longprim = dict(zip(PRIMS, LONGPRIMS))
intype_idx = dict(ubyte='IN_UBYTE', ushort='IN_USHORT', uint='IN_UINT')
outtype_idx = dict(ushort='OUT_USHORT', uint='OUT_UINT')


def prolog():
    print '''/* File automatically generated by u_unfilled_gen.py */'''
    print copyright
    print r'''

/**
 * @@file
 * Functions to translate and generate index lists
 */

#include "indices/u_indices.h"
#include "indices/u_indices_priv.h"
#include "pipe/p_compiler.h"
#include "util/u_debug.h"
#include "pipe/p_defines.h"
#include "util/u_memory.h"


static unsigned out_size_idx( unsigned index_size )
{
   switch (index_size) {
   case 4: return OUT_UINT;
   case 2: return OUT_USHORT;
   default: assert(0); return OUT_USHORT;
   }
}

static unsigned in_size_idx( unsigned index_size )
{
   switch (index_size) {
   case 4: return IN_UINT;
   case 2: return IN_USHORT;
   case 1: return IN_UBYTE;
   default: assert(0); return IN_UBYTE;
   }
}


static u_generate_func generate_line[OUT_COUNT][PRIM_COUNT];
static u_translate_func translate_line[IN_COUNT][OUT_COUNT][PRIM_COUNT];

'''

def vert( intype, outtype, v0 ):
    if intype == GENERATE:
        return '(' + outtype + ')(' + v0 + ')'
    else:
        return '(' + outtype + ')in[' + v0 + ']'

def line( intype, outtype, ptr, v0, v1 ):
    print '      (' + ptr + ')[0] = ' + vert( intype, outtype, v0 ) + ';'
    print '      (' + ptr + ')[1] = ' + vert( intype, outtype, v1 ) + ';'

# XXX: have the opportunity here to avoid over-drawing shared lines in
# tristrips, fans, etc, by integrating this into the calling functions
# and only emitting each line at most once.
# 
def do_tri( intype, outtype, ptr, v0, v1, v2 ):
    line( intype, outtype, ptr, v0, v1 )
    line( intype, outtype, ptr + '+2', v1, v2 )
    line( intype, outtype, ptr + '+4', v2, v0 )

def do_quad( intype, outtype, ptr, v0, v1, v2, v3 ):
    line( intype, outtype, ptr, v0, v1 )
    line( intype, outtype, ptr + '+2', v1, v2 )
    line( intype, outtype, ptr + '+4', v2, v3 )
    line( intype, outtype, ptr + '+6', v3, v0 )

def name(intype, outtype, prim):
    if intype == GENERATE:
        return 'generate_' + prim + '_' + outtype
    else:
        return 'translate_' + prim + '_' + intype + '2' + outtype

def preamble(intype, outtype, prim):
    print 'static void ' + name( intype, outtype, prim ) + '('
    if intype != GENERATE:
        print '    const void * _in,'
    print '    unsigned start,'
    print '    unsigned nr,'
    print '    void *_out )'
    print '{'
    if intype != GENERATE:
        print '  const ' + intype + '*in = (const ' + intype + '*)_in;'
    print '  ' + outtype + ' *out = (' + outtype + '*)_out;'
    print '  unsigned i, j;'
    print '  (void)j;'

def postamble():
    print '}'


def tris(intype, outtype):
    preamble(intype, outtype, prim='tris')
    print '  for (i = start, j = 0; j < nr; j+=6, i+=3) { '
    do_tri( intype, outtype, 'out+j',  'i', 'i+1', 'i+2' );
    print '   }'
    postamble()


def tristrip(intype, outtype):
    preamble(intype, outtype, prim='tristrip')
    print '  for (i = start, j = 0; j < nr; j+=6, i++) { '
    do_tri( intype, outtype, 'out+j',  'i', 'i+1/*+(i&1)*/', 'i+2/*-(i&1)*/' );
    print '   }'
    postamble()


def trifan(intype, outtype):
    preamble(intype, outtype, prim='trifan')
    print '  for (i = start, j = 0; j < nr; j+=6, i++) { '
    do_tri( intype, outtype, 'out+j',  '0', 'i+1', 'i+2' );
    print '   }'
    postamble()



def polygon(intype, outtype):
    preamble(intype, outtype, prim='polygon')
    print '  for (i = start, j = 0; j < nr; j+=2, i++) { '
    line( intype, outtype, 'out+j', 'i', '(i+1)%(nr/2)' )
    print '   }'
    postamble()


def quads(intype, outtype):
    preamble(intype, outtype, prim='quads')
    print '  for (i = start, j = 0; j < nr; j+=8, i+=4) { '
    do_quad( intype, outtype, 'out+j', 'i+0', 'i+1', 'i+2', 'i+3' );
    print '   }'
    postamble()


def quadstrip(intype, outtype):
    preamble(intype, outtype, prim='quadstrip')
    print '  for (i = start, j = 0; j < nr; j+=8, i+=2) { '
    do_quad( intype, outtype, 'out+j', 'i+2', 'i+0', 'i+1', 'i+3' );
    print '   }'
    postamble()


def emit_funcs():
    for intype in INTYPES:
        for outtype in OUTTYPES:
            tris(intype, outtype)
            tristrip(intype, outtype)
            trifan(intype, outtype)
            quads(intype, outtype)
            quadstrip(intype, outtype)
            polygon(intype, outtype)

def init(intype, outtype, prim):
    if intype == GENERATE:
        print ('generate_line[' + 
               outtype_idx[outtype] + 
               '][' + longprim[prim] + 
               '] = ' + name( intype, outtype, prim ) + ';')
    else:
        print ('translate_line[' + 
               intype_idx[intype] + 
               '][' + outtype_idx[outtype] + 
               '][' + longprim[prim] + 
               '] = ' + name( intype, outtype, prim ) + ';')


def emit_all_inits():
    for intype in INTYPES:
        for outtype in OUTTYPES:
            for prim in PRIMS:
                init(intype, outtype, prim)

def emit_init():
    print 'void u_unfilled_init( void )'
    print '{'
    print '  static int firsttime = 1;'
    print '  if (!firsttime) return;'
    print '  firsttime = 0;'
    emit_all_inits()
    print '}'


    

def epilog():
    print '#include "indices/u_unfilled_indices.c"'


def main():
    prolog()
    emit_funcs()
    emit_init()
    epilog()


if __name__ == '__main__':
    main()
@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d130 1
d146 1
a146 1
    print '  for (j = i = 0; j < nr; j+=6, i+=3) { '
d154 1
a154 1
    print '  for (j = i = 0; j < nr; j+=6, i++) { '
d162 1
a162 1
    print '  for (j = i = 0; j < nr; j+=6, i++) { '
d171 1
a171 1
    print '  for (j = i = 0; j < nr; j+=2, i++) { '
d179 1
a179 1
    print '  for (j = i = 0; j < nr; j+=8, i+=4) { '
d187 1
a187 1
    print '  for (j = i = 0; j < nr; j+=8, i+=2) { '
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d170 2
a171 2
    print '  for (j = i = 0; j < nr; j+=6, i++) { '
    do_tri( intype, outtype, 'out+j',  '0', 'i+1', 'i+2' );
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d170 2
a171 2
    print '  for (j = i = 0; j < nr; j+=2, i++) { '
    line( intype, outtype, 'out+j', 'i', '(i+1)%(nr/2)' )
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a129 1
    print '    unsigned start,'
d145 1
a145 1
    print '  for (i = start, j = 0; j < nr; j+=6, i+=3) { '
d153 1
a153 1
    print '  for (i = start, j = 0; j < nr; j+=6, i++) { '
d161 1
a161 1
    print '  for (i = start, j = 0; j < nr; j+=6, i++) { '
d170 1
a170 1
    print '  for (i = start, j = 0; j < nr; j+=2, i++) { '
d178 1
a178 1
    print '  for (i = start, j = 0; j < nr; j+=8, i+=4) { '
d186 1
a186 1
    print '  for (i = start, j = 0; j < nr; j+=8, i+=2) { '
@


