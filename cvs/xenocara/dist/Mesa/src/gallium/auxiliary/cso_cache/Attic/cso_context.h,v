head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.25;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.29;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.03;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.35;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.41;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2007-2008 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


#ifndef CSO_CONTEXT_H
#define CSO_CONTEXT_H

#include "pipe/p_context.h"
#include "pipe/p_state.h"
#include "pipe/p_defines.h"


#ifdef	__cplusplus
extern "C" {
#endif

struct cso_context;
struct u_vbuf;

struct cso_context *cso_create_context( struct pipe_context *pipe );

void cso_release_all( struct cso_context *ctx );

void cso_destroy_context( struct cso_context *cso );



enum pipe_error cso_set_blend( struct cso_context *cso,
                               const struct pipe_blend_state *blend );
void cso_save_blend(struct cso_context *cso);
void cso_restore_blend(struct cso_context *cso);



enum pipe_error cso_set_depth_stencil_alpha( struct cso_context *cso,
                                             const struct pipe_depth_stencil_alpha_state *dsa );
void cso_save_depth_stencil_alpha(struct cso_context *cso);
void cso_restore_depth_stencil_alpha(struct cso_context *cso);



enum pipe_error cso_set_rasterizer( struct cso_context *cso,
                                    const struct pipe_rasterizer_state *rasterizer );
void cso_save_rasterizer(struct cso_context *cso);
void cso_restore_rasterizer(struct cso_context *cso);


enum pipe_error
cso_set_samplers(struct cso_context *cso,
                 unsigned shader_stage,
                 unsigned count,
                 const struct pipe_sampler_state **states);

void
cso_save_samplers(struct cso_context *cso, unsigned shader_stage);

void
cso_restore_samplers(struct cso_context *cso, unsigned shader_stage);

/* Alternate interface to support state trackers that like to modify
 * samplers one at a time:
 */
enum pipe_error
cso_single_sampler(struct cso_context *cso,
                   unsigned shader_stage,
                   unsigned count,
                   const struct pipe_sampler_state *states);

void
cso_single_sampler_done(struct cso_context *cso, unsigned shader_stage);


enum pipe_error cso_set_vertex_elements(struct cso_context *ctx,
                                        unsigned count,
                                        const struct pipe_vertex_element *states);
void cso_save_vertex_elements(struct cso_context *ctx);
void cso_restore_vertex_elements(struct cso_context *ctx);


void cso_set_vertex_buffers(struct cso_context *ctx,
                            unsigned start_slot, unsigned count,
                            const struct pipe_vertex_buffer *buffers);

/* One vertex buffer slot is provided with the save/restore functionality.
 * cso_context chooses the slot, it can be non-zero. */
void cso_save_aux_vertex_buffer_slot(struct cso_context *ctx);
void cso_restore_aux_vertex_buffer_slot(struct cso_context *ctx);
unsigned cso_get_aux_vertex_buffer_slot(struct cso_context *ctx);


void cso_set_stream_outputs(struct cso_context *ctx,
                            unsigned num_targets,
                            struct pipe_stream_output_target **targets,
                            const unsigned *offsets);
void cso_save_stream_outputs(struct cso_context *ctx);
void cso_restore_stream_outputs(struct cso_context *ctx);


/*
 * We don't provide shader caching in CSO.  Most of the time the api provides
 * object semantics for shaders anyway, and the cases where it doesn't
 * (eg mesa's internally-generated texenv programs), it will be up to
 * the state tracker to implement their own specialized caching.
 */

void cso_set_fragment_shader_handle(struct cso_context *ctx, void *handle);
void cso_delete_fragment_shader(struct cso_context *ctx, void *handle );
void cso_save_fragment_shader(struct cso_context *cso);
void cso_restore_fragment_shader(struct cso_context *cso);


void cso_set_vertex_shader_handle(struct cso_context *ctx, void *handle);
void cso_delete_vertex_shader(struct cso_context *ctx, void *handle );
void cso_save_vertex_shader(struct cso_context *cso);
void cso_restore_vertex_shader(struct cso_context *cso);


void cso_set_geometry_shader_handle(struct cso_context *ctx, void *handle);
void cso_delete_geometry_shader(struct cso_context *ctx, void *handle);
void cso_save_geometry_shader(struct cso_context *cso);
void cso_restore_geometry_shader(struct cso_context *cso);


void cso_set_framebuffer(struct cso_context *cso,
                         const struct pipe_framebuffer_state *fb);
void cso_save_framebuffer(struct cso_context *cso);
void cso_restore_framebuffer(struct cso_context *cso);


void cso_set_viewport(struct cso_context *cso,
                      const struct pipe_viewport_state *vp);
void cso_save_viewport(struct cso_context *cso);
void cso_restore_viewport(struct cso_context *cso);


void cso_set_blend_color(struct cso_context *cso,
                         const struct pipe_blend_color *bc);

void cso_set_sample_mask(struct cso_context *cso, unsigned stencil_mask);
void cso_save_sample_mask(struct cso_context *ctx);
void cso_restore_sample_mask(struct cso_context *ctx);

void cso_set_min_samples(struct cso_context *cso, unsigned min_samples);
void cso_save_min_samples(struct cso_context *ctx);
void cso_restore_min_samples(struct cso_context *ctx);

void cso_set_stencil_ref(struct cso_context *cso,
                         const struct pipe_stencil_ref *sr);
void cso_save_stencil_ref(struct cso_context *cso);
void cso_restore_stencil_ref(struct cso_context *cso);

void cso_set_render_condition(struct cso_context *cso,
                              struct pipe_query *query,
                              boolean condition, uint mode);
void cso_save_render_condition(struct cso_context *cso);
void cso_restore_render_condition(struct cso_context *cso);


/* clip state */

void
cso_set_clip(struct cso_context *cso,
             const struct pipe_clip_state *clip);

void
cso_save_clip(struct cso_context *cso);

void
cso_restore_clip(struct cso_context *cso);


/* sampler view state */

void
cso_set_sampler_views(struct cso_context *cso,
                      unsigned shader_stage,
                      unsigned count,
                      struct pipe_sampler_view **views);

void
cso_save_sampler_views(struct cso_context *cso, unsigned shader_stage);

void
cso_restore_sampler_views(struct cso_context *cso, unsigned shader_stage);


/* constant buffers */

void cso_set_constant_buffer(struct cso_context *cso, unsigned shader_stage,
                             unsigned index, struct pipe_constant_buffer *cb);
void cso_set_constant_buffer_resource(struct cso_context *cso,
                                      unsigned shader_stage,
                                      unsigned index,
                                      struct pipe_resource *buffer);
void cso_save_constant_buffer_slot0(struct cso_context *cso,
                                    unsigned shader_stage);
void cso_restore_constant_buffer_slot0(struct cso_context *cso,
                                       unsigned shader_stage);


/* drawing */

void
cso_set_index_buffer(struct cso_context *cso,
                     const struct pipe_index_buffer *ib);

void
cso_draw_vbo(struct cso_context *cso,
             const struct pipe_draw_info *info);

void
cso_draw_arrays_instanced(struct cso_context *cso, uint mode,
                          uint start, uint count,
                          uint start_instance, uint instance_count);

/* helper drawing function */
void
cso_draw_arrays(struct cso_context *cso, uint mode, uint start, uint count);

#ifdef	__cplusplus
}
#endif

#endif
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007-2008 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d118 1
a118 1
                            unsigned append_bitmask);
d167 4
d234 5
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d42 1
d72 8
d81 2
a82 5
enum pipe_error cso_set_samplers( struct cso_context *cso,
                                  unsigned count,
                                  const struct pipe_sampler_state **states );
void cso_save_samplers(struct cso_context *cso);
void cso_restore_samplers(struct cso_context *cso);
a86 16
enum pipe_error cso_single_sampler( struct cso_context *cso,
                                    unsigned nr,
                                    const struct pipe_sampler_state *states );

void cso_single_sampler_done( struct cso_context *cso );

enum pipe_error cso_set_vertex_samplers(struct cso_context *cso,
                                        unsigned count,
                                        const struct pipe_sampler_state **states);

void
cso_save_vertex_samplers(struct cso_context *cso);

void
cso_restore_vertex_samplers(struct cso_context *cso);

d88 4
a91 3
cso_single_vertex_sampler(struct cso_context *cso,
                          unsigned nr,
                          const struct pipe_sampler_state *states);
d94 1
a94 1
cso_single_vertex_sampler_done(struct cso_context *cso);
d105 1
a105 1
                            unsigned count,
a106 2
void cso_save_vertex_buffers(struct cso_context *ctx);
void cso_restore_vertex_buffers(struct cso_context *ctx);
d108 5
d114 11
a124 1
/* These aren't really sensible -- most of the time the api provides
d126 1
a126 1
 * (eg mesa's internall-generated texenv programs), it will be up to
d129 2
a130 2
enum pipe_error cso_set_fragment_shader_handle(struct cso_context *ctx,
                                               void *handle );
a131 4
/*
enum pipe_error cso_set_fragment_shader( struct cso_context *cso,
                                         const struct pipe_shader_state *shader );
*/
d136 1
a136 2
enum pipe_error cso_set_vertex_shader_handle(struct cso_context *ctx,
                                             void *handle );
a137 4
/*
enum pipe_error cso_set_vertex_shader( struct cso_context *cso,
                                       const struct pipe_shader_state *shader );
*/
d142 1
a142 2
enum pipe_error cso_set_geometry_shader_handle(struct cso_context *ctx,
                                               void *handle);
d148 2
a149 2
enum pipe_error cso_set_framebuffer(struct cso_context *cso,
                                    const struct pipe_framebuffer_state *fb);
d154 2
a155 2
enum pipe_error cso_set_viewport(struct cso_context *cso,
                                 const struct pipe_viewport_state *vp);
d160 2
a161 2
enum pipe_error cso_set_blend_color(struct cso_context *cso,
                                    const struct pipe_blend_color *bc);
d163 3
a165 2
enum pipe_error cso_set_sample_mask(struct cso_context *cso,
                                    unsigned stencil_mask);
d167 2
a168 2
enum pipe_error cso_set_stencil_ref(struct cso_context *cso,
                                    const struct pipe_stencil_ref *sr);
d172 6
d192 1
a192 1
/* fragment sampler view state */
d195 4
a198 3
cso_set_fragment_sampler_views(struct cso_context *cso,
                               uint count,
                               struct pipe_sampler_view **views);
d201 1
a201 1
cso_save_fragment_sampler_views(struct cso_context *cso);
d204 2
a205 1
cso_restore_fragment_sampler_views(struct cso_context *cso);
d207 1
d209 13
a221 1
/* vertex sampler view state */
d224 2
a225 3
cso_set_vertex_sampler_views(struct cso_context *cso,
                             uint count,
                             struct pipe_sampler_view **views);
d228 2
a229 1
cso_save_vertex_sampler_views(struct cso_context *cso);
d231 1
d233 1
a233 2
cso_restore_vertex_sampler_views(struct cso_context *cso);

@


1.2
log
@Merge Mesa 7.10.3
@
text
@d113 7
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d106 5
a110 18

enum pipe_error cso_set_sampler_textures( struct cso_context *cso,
                                          uint count,
                                          struct pipe_texture **textures );
void cso_save_sampler_textures( struct cso_context *cso );
void cso_restore_sampler_textures( struct cso_context *cso );



enum pipe_error
cso_set_vertex_sampler_textures(struct cso_context *cso,
                                uint count,
                                struct pipe_texture **textures);
void
cso_save_vertex_sampler_textures(struct cso_context *cso);
void
cso_restore_vertex_sampler_textures(struct cso_context *cso);

a146 1

d162 2
d182 28
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d106 18
a123 5
enum pipe_error cso_set_vertex_elements(struct cso_context *ctx,
                                        unsigned count,
                                        const struct pipe_vertex_element *states);
void cso_save_vertex_elements(struct cso_context *ctx);
void cso_restore_vertex_elements(struct cso_context *ctx);
d160 1
a175 2
enum pipe_error cso_set_sample_mask(struct cso_context *cso,
                                    unsigned stencil_mask);
a193 28


/* fragment sampler view state */

void
cso_set_fragment_sampler_views(struct cso_context *cso,
                               uint count,
                               struct pipe_sampler_view **views);

void
cso_save_fragment_sampler_views(struct cso_context *cso);

void
cso_restore_fragment_sampler_views(struct cso_context *cso);


/* vertex sampler view state */

void
cso_set_vertex_sampler_views(struct cso_context *cso,
                             uint count,
                             struct pipe_sampler_view **views);

void
cso_save_vertex_sampler_views(struct cso_context *cso);

void
cso_restore_vertex_sampler_views(struct cso_context *cso);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a41 1
struct u_vbuf;
d71 19
a89 5
enum pipe_error
cso_set_samplers(struct cso_context *cso,
                 unsigned shader_stage,
                 unsigned count,
                 const struct pipe_sampler_state **states);
d92 1
a92 1
cso_save_samplers(struct cso_context *cso, unsigned shader_stage);
d95 1
a95 1
cso_restore_samplers(struct cso_context *cso, unsigned shader_stage);
a96 3
/* Alternate interface to support state trackers that like to modify
 * samplers one at a time:
 */
d98 3
a100 4
cso_single_sampler(struct cso_context *cso,
                   unsigned shader_stage,
                   unsigned count,
                   const struct pipe_sampler_state *states);
d103 1
a103 1
cso_single_sampler_done(struct cso_context *cso, unsigned shader_stage);
d113 1
a113 21
void cso_set_vertex_buffers(struct cso_context *ctx,
                            unsigned start_slot, unsigned count,
                            const struct pipe_vertex_buffer *buffers);

/* One vertex buffer slot is provided with the save/restore functionality.
 * cso_context chooses the slot, it can be non-zero. */
void cso_save_aux_vertex_buffer_slot(struct cso_context *ctx);
void cso_restore_aux_vertex_buffer_slot(struct cso_context *ctx);
unsigned cso_get_aux_vertex_buffer_slot(struct cso_context *ctx);


void cso_set_stream_outputs(struct cso_context *ctx,
                            unsigned num_targets,
                            struct pipe_stream_output_target **targets,
                            unsigned append_bitmask);
void cso_save_stream_outputs(struct cso_context *ctx);
void cso_restore_stream_outputs(struct cso_context *ctx);


/*
 * We don't provide shader caching in CSO.  Most of the time the api provides
d115 1
a115 1
 * (eg mesa's internally-generated texenv programs), it will be up to
d118 2
a119 2

void cso_set_fragment_shader_handle(struct cso_context *ctx, void *handle);
d121 4
d129 2
a130 1
void cso_set_vertex_shader_handle(struct cso_context *ctx, void *handle);
d132 4
d140 2
a141 1
void cso_set_geometry_shader_handle(struct cso_context *ctx, void *handle);
d147 2
a148 2
void cso_set_framebuffer(struct cso_context *cso,
                         const struct pipe_framebuffer_state *fb);
d153 2
a154 2
void cso_set_viewport(struct cso_context *cso,
                      const struct pipe_viewport_state *vp);
d159 2
a160 2
void cso_set_blend_color(struct cso_context *cso,
                         const struct pipe_blend_color *bc);
d162 2
a163 3
void cso_set_sample_mask(struct cso_context *cso, unsigned stencil_mask);
void cso_save_sample_mask(struct cso_context *ctx);
void cso_restore_sample_mask(struct cso_context *ctx);
d165 2
a166 2
void cso_set_stencil_ref(struct cso_context *cso,
                         const struct pipe_stencil_ref *sr);
a169 6
void cso_set_render_condition(struct cso_context *cso,
                              struct pipe_query *query,
                              boolean condition, uint mode);
void cso_save_render_condition(struct cso_context *cso);
void cso_restore_render_condition(struct cso_context *cso);

d184 1
a184 1
/* sampler view state */
d187 3
a189 4
cso_set_sampler_views(struct cso_context *cso,
                      unsigned shader_stage,
                      unsigned count,
                      struct pipe_sampler_view **views);
d192 1
a192 1
cso_save_sampler_views(struct cso_context *cso, unsigned shader_stage);
d195 1
a195 1
cso_restore_sampler_views(struct cso_context *cso, unsigned shader_stage);
d198 1
a198 12
/* constant buffers */

void cso_set_constant_buffer(struct cso_context *cso, unsigned shader_stage,
                             unsigned index, struct pipe_constant_buffer *cb);
void cso_set_constant_buffer_resource(struct cso_context *cso,
                                      unsigned shader_stage,
                                      unsigned index,
                                      struct pipe_resource *buffer);
void cso_save_constant_buffer_slot0(struct cso_context *cso,
                                    unsigned shader_stage);
void cso_restore_constant_buffer_slot0(struct cso_context *cso,
                                       unsigned shader_stage);
d200 4
a203 2

/* drawing */
d206 1
a206 2
cso_set_index_buffer(struct cso_context *cso,
                     const struct pipe_index_buffer *ib);
d209 1
a209 2
cso_draw_vbo(struct cso_context *cso,
             const struct pipe_draw_info *info);
a210 3
/* helper drawing function */
void
cso_draw_arrays(struct cso_context *cso, uint mode, uint start, uint count);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007-2008 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d118 1
a118 1
                            const unsigned *offsets);
a166 4
void cso_set_min_samples(struct cso_context *cso, unsigned min_samples);
void cso_save_min_samples(struct cso_context *ctx);
void cso_restore_min_samples(struct cso_context *ctx);

a229 5

void
cso_draw_arrays_instanced(struct cso_context *cso, uint mode,
                          uint start, uint count,
                          uint start_instance, uint instance_count);
@


