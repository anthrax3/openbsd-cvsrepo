head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.51;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.14;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.13.59.34;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.50;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.42;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.06.13;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.43.21;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

/**
 * @@file
 * Helper arithmetic functions.
 *
 * @@author Jose Fonseca <jfonseca@@vmware.com>
 */


#ifndef LP_BLD_ARIT_H
#define LP_BLD_ARIT_H


#include "gallivm/lp_bld.h"


struct lp_type;
struct lp_build_context;
struct gallivm_state;


/**
 * Complement, i.e., 1 - a.
 */
LLVMValueRef
lp_build_comp(struct lp_build_context *bld,
              LLVMValueRef a);

LLVMValueRef
lp_build_add(struct lp_build_context *bld,
             LLVMValueRef a,
             LLVMValueRef b);

LLVMValueRef
lp_build_horizontal_add(struct lp_build_context *bld,
                        LLVMValueRef a);

LLVMValueRef
lp_build_hadd_partial4(struct lp_build_context *bld,
                       LLVMValueRef vectors[],
                       unsigned num_vecs);

LLVMValueRef
lp_build_sub(struct lp_build_context *bld,
             LLVMValueRef a,
             LLVMValueRef b);

LLVMValueRef
lp_build_mul(struct lp_build_context *bld,
             LLVMValueRef a,
             LLVMValueRef b);

LLVMValueRef
lp_build_mul_imm(struct lp_build_context *bld,
                 LLVMValueRef a,
                 int b);

LLVMValueRef
lp_build_div(struct lp_build_context *bld,
             LLVMValueRef a,
             LLVMValueRef b);


/**
 * Set when the weights for normalized are prescaled, that is, in range
 * 0..2**n, as opposed to range 0..2**(n-1).
 */
#define LP_BLD_LERP_PRESCALED_WEIGHTS (1 << 0)

/**
 * Used internally when using wide intermediates for normalized lerps.
 *
 * Do not use.
 */
#define LP_BLD_LERP_WIDE_NORMALIZED (1 << 1)

LLVMValueRef
lp_build_lerp(struct lp_build_context *bld,
              LLVMValueRef x,
              LLVMValueRef v0,
              LLVMValueRef v1,
              unsigned flags);

LLVMValueRef
lp_build_lerp_2d(struct lp_build_context *bld,
                 LLVMValueRef x,
                 LLVMValueRef y,
                 LLVMValueRef v00,
                 LLVMValueRef v01,
                 LLVMValueRef v10,
                 LLVMValueRef v11,
                 unsigned flags);

LLVMValueRef
lp_build_lerp_3d(struct lp_build_context *bld,
                 LLVMValueRef x,
                 LLVMValueRef y,
                 LLVMValueRef z,
                 LLVMValueRef v000,
                 LLVMValueRef v001,
                 LLVMValueRef v010,
                 LLVMValueRef v011,
                 LLVMValueRef v100,
                 LLVMValueRef v101,
                 LLVMValueRef v110,
                 LLVMValueRef v111,
                 unsigned flags);

/**
 * Specifies floating point NaN behavior.
 */
enum gallivm_nan_behavior {
   /* Results are undefined with NaN. Results in fastest code */
   GALLIVM_NAN_BEHAVIOR_UNDEFINED,
   /* If input is NaN, NaN is returned */
   GALLIVM_NAN_RETURN_NAN,
   /* If one of the inputs is NaN, the other operand is returned */
   GALLIVM_NAN_RETURN_OTHER,
   /* If one of the inputs is NaN, the other operand is returned,
    * but we guarantee the second operand is not a NaN.
    * In min/max it will be as fast as undefined with sse opcodes,
    * and archs having native return_other can benefit too. */
   GALLIVM_NAN_RETURN_OTHER_SECOND_NONNAN
};

LLVMValueRef
lp_build_min(struct lp_build_context *bld,
             LLVMValueRef a,
             LLVMValueRef b);

LLVMValueRef
lp_build_min_ext(struct lp_build_context *bld,
                 LLVMValueRef a,
                 LLVMValueRef b,
                 enum gallivm_nan_behavior nan_behavior);

LLVMValueRef
lp_build_max(struct lp_build_context *bld,
             LLVMValueRef a,
             LLVMValueRef b);

LLVMValueRef
lp_build_max_ext(struct lp_build_context *bld,
                 LLVMValueRef a,
                 LLVMValueRef b,
                 enum gallivm_nan_behavior nan_behavior);

LLVMValueRef
lp_build_clamp(struct lp_build_context *bld,
               LLVMValueRef a,
               LLVMValueRef min,
               LLVMValueRef max);

LLVMValueRef
lp_build_clamp_zero_one_nanzero(struct lp_build_context *bld,
                                LLVMValueRef a);

LLVMValueRef
lp_build_abs(struct lp_build_context *bld,
             LLVMValueRef a);

LLVMValueRef
lp_build_negate(struct lp_build_context *bld,
                LLVMValueRef a);

LLVMValueRef
lp_build_sgn(struct lp_build_context *bld,
             LLVMValueRef a);

LLVMValueRef
lp_build_set_sign(struct lp_build_context *bld,
                  LLVMValueRef a, LLVMValueRef sign);

LLVMValueRef
lp_build_int_to_float(struct lp_build_context *bld,
                      LLVMValueRef a);

LLVMValueRef
lp_build_round(struct lp_build_context *bld,
               LLVMValueRef a);

LLVMValueRef
lp_build_floor(struct lp_build_context *bld,
               LLVMValueRef a);

LLVMValueRef
lp_build_ceil(struct lp_build_context *bld,
              LLVMValueRef a);

LLVMValueRef
lp_build_trunc(struct lp_build_context *bld,
               LLVMValueRef a);

LLVMValueRef
lp_build_fract(struct lp_build_context *bld,
               LLVMValueRef a);

LLVMValueRef
lp_build_fract_safe(struct lp_build_context *bld,
                    LLVMValueRef a);

LLVMValueRef
lp_build_ifloor(struct lp_build_context *bld,
                LLVMValueRef a);
LLVMValueRef
lp_build_iceil(struct lp_build_context *bld,
               LLVMValueRef a);

LLVMValueRef
lp_build_iround(struct lp_build_context *bld,
                LLVMValueRef a);

LLVMValueRef
lp_build_itrunc(struct lp_build_context *bld,
                LLVMValueRef a);

void
lp_build_ifloor_fract(struct lp_build_context *bld,
                      LLVMValueRef a,
                      LLVMValueRef *out_ipart,
                      LLVMValueRef *out_fpart);

void
lp_build_ifloor_fract_safe(struct lp_build_context *bld,
                           LLVMValueRef a,
                           LLVMValueRef *out_ipart,
                           LLVMValueRef *out_fpart);

LLVMValueRef
lp_build_sqrt(struct lp_build_context *bld,
              LLVMValueRef a);

LLVMValueRef
lp_build_rcp(struct lp_build_context *bld,
             LLVMValueRef a);

LLVMValueRef
lp_build_rsqrt(struct lp_build_context *bld,
               LLVMValueRef a);

boolean
lp_build_fast_rsqrt_available(struct lp_type type);

LLVMValueRef
lp_build_fast_rsqrt(struct lp_build_context *bld,
                    LLVMValueRef a);

LLVMValueRef
lp_build_polynomial(struct lp_build_context *bld,
                    LLVMValueRef x,
                    const double *coeffs,
                    unsigned num_coeffs);

LLVMValueRef
lp_build_cos(struct lp_build_context *bld,
             LLVMValueRef a);

LLVMValueRef
lp_build_sin(struct lp_build_context *bld,
             LLVMValueRef a);

LLVMValueRef
lp_build_pow(struct lp_build_context *bld,
             LLVMValueRef a,
             LLVMValueRef b);

LLVMValueRef
lp_build_exp(struct lp_build_context *bld,
             LLVMValueRef a);

LLVMValueRef
lp_build_log(struct lp_build_context *bld,
             LLVMValueRef a);

LLVMValueRef
lp_build_log_safe(struct lp_build_context *bld,
                  LLVMValueRef a);

LLVMValueRef
lp_build_exp2(struct lp_build_context *bld,
              LLVMValueRef a);

LLVMValueRef
lp_build_extract_exponent(struct lp_build_context *bld,
                          LLVMValueRef x,
                          int bias);

LLVMValueRef
lp_build_extract_mantissa(struct lp_build_context *bld,
                          LLVMValueRef x);

LLVMValueRef
lp_build_log2(struct lp_build_context *bld,
              LLVMValueRef a);

LLVMValueRef
lp_build_log2_safe(struct lp_build_context *bld,
                   LLVMValueRef a);

LLVMValueRef
lp_build_fast_log2(struct lp_build_context *bld,
                   LLVMValueRef a);

LLVMValueRef
lp_build_ilog2(struct lp_build_context *bld,
               LLVMValueRef x);

void
lp_build_log2_approx(struct lp_build_context *bld,
                     LLVMValueRef x,
                     LLVMValueRef *p_exp,
                     LLVMValueRef *p_floor_log2,
                     LLVMValueRef *p_log2,
                     boolean handle_nans);

LLVMValueRef
lp_build_mod(struct lp_build_context *bld,
             LLVMValueRef x,
             LLVMValueRef y);

LLVMValueRef
lp_build_isnan(struct lp_build_context *bld,
               LLVMValueRef x);

LLVMValueRef
lp_build_isfinite(struct lp_build_context *bld,
                  LLVMValueRef x);


LLVMValueRef
lp_build_is_inf_or_nan(struct gallivm_state *gallivm,
                       const struct lp_type type,
                       LLVMValueRef x);


LLVMValueRef
lp_build_fpstate_get(struct gallivm_state *gallivm);

void
lp_build_fpstate_set_denorms_zero(struct gallivm_state *gallivm,
                                  boolean zero);
void
lp_build_fpstate_set(struct gallivm_state *gallivm,
                     LLVMValueRef mxcsr);

#endif /* !LP_BLD_ARIT_H */
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d141 1
a141 1
   /* If one of the inputs is NaN, NaN is returned */
d149 1
a149 7
   GALLIVM_NAN_RETURN_OTHER_SECOND_NONNAN,
   /* If one of the inputs is NaN, NaN is returned,
    * but we guarantee the first operand is not a NaN.
    * In min/max it will be as fast as undefined with sse opcodes,
    * and archs having native return_nan can benefit too. */
   GALLIVM_NAN_RETURN_NAN_FIRST_NONNAN,

@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d141 1
a141 1
   /* If input is NaN, NaN is returned */
d149 7
a155 1
   GALLIVM_NAN_RETURN_OTHER_SECOND_NONNAN
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d45 1
d135 16
d158 6
d169 6
d181 4
d302 4
d323 4
a334 7
lp_build_exp2_approx(struct lp_build_context *bld,
                     LLVMValueRef x,
                     LLVMValueRef *p_exp2_int_part,
                     LLVMValueRef *p_frac_part,
                     LLVMValueRef *p_exp2);

void
d339 2
a340 1
                     LLVMValueRef *p_log2);
d346 25
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d60 7
a66 2
lp_build_sum_vector(struct lp_build_context *bld,
                    LLVMValueRef a);
d88 14
d106 2
a107 1
              LLVMValueRef v1);
a108 5
/**
 * Bilinear interpolation.
 *
 * Values indices are in v_{yx}.
 */
d116 18
a133 1
                 LLVMValueRef v11);
d192 4
d216 6
d234 13
d306 5
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d40 1
a40 1
#include <llvm-c/Core.h>  
d60 4
d174 6
d218 9
d229 8
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d40 1
a40 1
#include "gallivm/lp_bld.h"
a59 4
lp_build_sum_vector(struct lp_build_context *bld,
                    LLVMValueRef a);

LLVMValueRef
a169 6
void
lp_build_ifloor_fract(struct lp_build_context *bld,
                      LLVMValueRef a,
                      LLVMValueRef *out_ipart,
                      LLVMValueRef *out_fpart);

a207 9
lp_build_extract_exponent(struct lp_build_context *bld,
                          LLVMValueRef x,
                          int bias);

LLVMValueRef
lp_build_extract_mantissa(struct lp_build_context *bld,
                          LLVMValueRef x);

LLVMValueRef
a209 8

LLVMValueRef
lp_build_fast_log2(struct lp_build_context *bld,
                   LLVMValueRef a);

LLVMValueRef
lp_build_ilog2(struct lp_build_context *bld,
               LLVMValueRef x);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d60 2
a61 7
lp_build_horizontal_add(struct lp_build_context *bld,
                        LLVMValueRef a);

LLVMValueRef
lp_build_hadd_partial4(struct lp_build_context *bld,
                       LLVMValueRef vectors[],
                       unsigned num_vecs);
a82 14

/**
 * Set when the weights for normalized are prescaled, that is, in range
 * 0..2**n, as opposed to range 0..2**(n-1).
 */
#define LP_BLD_LERP_PRESCALED_WEIGHTS (1 << 0)

/**
 * Used internally when using wide intermediates for normalized lerps.
 *
 * Do not use.
 */
#define LP_BLD_LERP_WIDE_NORMALIZED (1 << 1)

d87 1
a87 2
              LLVMValueRef v1,
              unsigned flags);
d89 5
d101 1
a101 18
                 LLVMValueRef v11,
                 unsigned flags);

LLVMValueRef
lp_build_lerp_3d(struct lp_build_context *bld,
                 LLVMValueRef x,
                 LLVMValueRef y,
                 LLVMValueRef z,
                 LLVMValueRef v000,
                 LLVMValueRef v001,
                 LLVMValueRef v010,
                 LLVMValueRef v011,
                 LLVMValueRef v100,
                 LLVMValueRef v101,
                 LLVMValueRef v110,
                 LLVMValueRef v111,
                 unsigned flags);

a159 4
lp_build_fract_safe(struct lp_build_context *bld,
                    LLVMValueRef a);

LLVMValueRef
a179 6
void
lp_build_ifloor_fract_safe(struct lp_build_context *bld,
                           LLVMValueRef a,
                           LLVMValueRef *out_ipart,
                           LLVMValueRef *out_fpart);

a191 13
boolean
lp_build_fast_rsqrt_available(struct lp_type type);

LLVMValueRef
lp_build_fast_rsqrt(struct lp_build_context *bld,
                    LLVMValueRef a);

LLVMValueRef
lp_build_polynomial(struct lp_build_context *bld,
                    LLVMValueRef x,
                    const double *coeffs,
                    unsigned num_coeffs);

a250 5

LLVMValueRef
lp_build_mod(struct lp_build_context *bld,
             LLVMValueRef x,
             LLVMValueRef y);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a44 1
struct gallivm_state;
a133 16
/**
 * Specifies floating point NaN behavior.
 */
enum gallivm_nan_behavior {
   /* Results are undefined with NaN. Results in fastest code */
   GALLIVM_NAN_BEHAVIOR_UNDEFINED,
   /* If input is NaN, NaN is returned */
   GALLIVM_NAN_RETURN_NAN,
   /* If one of the inputs is NaN, the other operand is returned */
   GALLIVM_NAN_RETURN_OTHER,
   /* If one of the inputs is NaN, the other operand is returned,
    * but we guarantee the second operand is not a NaN.
    * In min/max it will be as fast as undefined with sse opcodes,
    * and archs having native return_other can benefit too. */
   GALLIVM_NAN_RETURN_OTHER_SECOND_NONNAN
};
a140 6
lp_build_min_ext(struct lp_build_context *bld,
                 LLVMValueRef a,
                 LLVMValueRef b,
                 enum gallivm_nan_behavior nan_behavior);

LLVMValueRef
a145 6
lp_build_max_ext(struct lp_build_context *bld,
                 LLVMValueRef a,
                 LLVMValueRef b,
                 enum gallivm_nan_behavior nan_behavior);

LLVMValueRef
a151 4
lp_build_clamp_zero_one_nanzero(struct lp_build_context *bld,
                                LLVMValueRef a);

LLVMValueRef
a268 4
lp_build_log_safe(struct lp_build_context *bld,
                  LLVMValueRef a);

LLVMValueRef
a285 4
lp_build_log2_safe(struct lp_build_context *bld,
                   LLVMValueRef a);

LLVMValueRef
d294 7
d305 1
a305 2
                     LLVMValueRef *p_log2,
                     boolean handle_nans);
a310 25

LLVMValueRef
lp_build_isnan(struct lp_build_context *bld,
               LLVMValueRef x);

LLVMValueRef
lp_build_isfinite(struct lp_build_context *bld,
                  LLVMValueRef x);


LLVMValueRef
lp_build_is_inf_or_nan(struct gallivm_state *gallivm,
                       const struct lp_type type,
                       LLVMValueRef x);


LLVMValueRef
lp_build_fpstate_get(struct gallivm_state *gallivm);

void
lp_build_fpstate_set_denorms_zero(struct gallivm_state *gallivm,
                                  boolean zero);
void
lp_build_fpstate_set(struct gallivm_state *gallivm,
                     LLVMValueRef mxcsr);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d141 1
a141 1
   /* If one of the inputs is NaN, NaN is returned */
d149 1
a149 7
   GALLIVM_NAN_RETURN_OTHER_SECOND_NONNAN,
   /* If one of the inputs is NaN, NaN is returned,
    * but we guarantee the first operand is not a NaN.
    * In min/max it will be as fast as undefined with sse opcodes,
    * and archs having native return_nan can benefit too. */
   GALLIVM_NAN_RETURN_NAN_FIRST_NONNAN,

@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d141 1
a141 1
   /* If input is NaN, NaN is returned */
d149 7
a155 1
   GALLIVM_NAN_RETURN_OTHER_SECOND_NONNAN
@


