head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.51;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.14;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.52;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.35;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.54;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.42;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.06.14;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.43.21;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


#ifndef LP_BLD_DEBUG_H
#define LP_BLD_DEBUG_H


#include "gallivm/lp_bld.h"

#include "pipe/p_compiler.h"
#include "util/u_string.h"


#define GALLIVM_DEBUG_TGSI          (1 << 0)
#define GALLIVM_DEBUG_IR            (1 << 1)
#define GALLIVM_DEBUG_ASM           (1 << 2)
#define GALLIVM_DEBUG_NO_OPT        (1 << 3)
#define GALLIVM_DEBUG_PERF          (1 << 4)
#define GALLIVM_DEBUG_NO_BRILINEAR  (1 << 5)
#define GALLIVM_DEBUG_NO_RHO_APPROX (1 << 6)
#define GALLIVM_DEBUG_NO_QUAD_LOD   (1 << 7)
#define GALLIVM_DEBUG_GC            (1 << 8)


#ifdef __cplusplus
extern "C" {
#endif


#ifdef DEBUG
extern unsigned gallivm_debug;
#else
#define gallivm_debug 0
#endif


static INLINE void
lp_build_name(LLVMValueRef val, const char *format, ...)
{
#ifdef DEBUG
   char name[32];
   va_list ap;
   va_start(ap, format);
   util_vsnprintf(name, sizeof name, format, ap);
   va_end(ap);
   LLVMSetValueName(val, name);
#else
   (void)val;
   (void)format;
#endif
}


void
lp_debug_dump_value(LLVMValueRef value);


boolean
lp_check_alignment(const void *ptr, unsigned alignment);


void
lp_disassemble(LLVMValueRef func, const void *code);


void
lp_profile(LLVMValueRef func, const void *code);


#ifdef __cplusplus
}
#endif


#endif /* !LP_BLD_DEBUG_H */
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a78 4
const char *
lp_get_module_id(LLVMModuleRef module);


@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d79 4
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d46 2
a47 1
#define GALLIVM_DEBUG_GC            (1 << 7)
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d45 2
a46 1
#define GALLIVM_DEBUG_GC            (1 << 6)
d87 5
a91 1
lp_disassemble(const void* func);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d48 5
d87 5
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d33 1
a33 1
#include <llvm-c/Core.h>
d39 16
d70 4
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d33 1
a33 1
#include "gallivm/lp_bld.h"
a38 16
#define GALLIVM_DEBUG_TGSI          (1 << 0)
#define GALLIVM_DEBUG_IR            (1 << 1)
#define GALLIVM_DEBUG_ASM           (1 << 2)
#define GALLIVM_DEBUG_NO_OPT        (1 << 3)
#define GALLIVM_DEBUG_PERF          (1 << 4)
#define GALLIVM_DEBUG_NO_BRILINEAR  (1 << 5)
#define GALLIVM_DEBUG_GC            (1 << 6)


#ifdef DEBUG
extern unsigned gallivm_debug;
#else
#define gallivm_debug 0
#endif


a53 4


void
lp_debug_dump_value(LLVMValueRef value);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d45 1
a45 7
#define GALLIVM_DEBUG_NO_RHO_APPROX (1 << 6)
#define GALLIVM_DEBUG_GC            (1 << 7)


#ifdef __cplusplus
extern "C" {
#endif
d81 1
a81 10
lp_disassemble(LLVMValueRef func, const void *code);


void
lp_profile(LLVMValueRef func, const void *code);


#ifdef __cplusplus
}
#endif
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d46 1
a46 2
#define GALLIVM_DEBUG_NO_QUAD_LOD   (1 << 7)
#define GALLIVM_DEBUG_GC            (1 << 8)
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a78 4
const char *
lp_get_module_id(LLVMModuleRef module);


@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d79 4
@


