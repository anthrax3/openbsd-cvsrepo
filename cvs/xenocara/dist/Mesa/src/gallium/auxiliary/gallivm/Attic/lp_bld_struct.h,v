head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2013.09.05.13.59.36;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.10.06;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

/**
 * @@file
 * Helper functions for type conversions.
 *
 * @@author Jose Fonseca <jfonseca@@vmware.com>
 */


#ifndef LP_BLD_STRUCT_H
#define LP_BLD_STRUCT_H


#include "gallivm/lp_bld.h"
#include "gallivm/lp_bld_init.h"

#include "util/u_debug.h"
#include "util/u_memory.h"


#define LP_CHECK_STRUCT_SIZE(_ctype, _ltarget, _ltype) \
      assert(LLVMABISizeOfType(_ltarget, _ltype) == \
             sizeof(_ctype))

#define LP_CHECK_MEMBER_OFFSET(_ctype, _cmember, _ltarget, _ltype, _lindex) \
      assert(LLVMOffsetOfElement(_ltarget, _ltype, _lindex) == \
             offsetof(_ctype, _cmember))


/**
 * Get value pointer to a structure member.
 */
LLVMValueRef
lp_build_struct_get_ptr(struct gallivm_state *gallivm,
                        LLVMValueRef ptr,
                        unsigned member,
                        const char *name);

/**
 * Get the value of a structure member.
 */
LLVMValueRef
lp_build_struct_get(struct gallivm_state *gallivm,
                    LLVMValueRef ptr,
                    unsigned member,
                    const char *name);

/**
 * Get value pointer to an array element.
 */
LLVMValueRef
lp_build_array_get_ptr(struct gallivm_state *gallivm,
                       LLVMValueRef ptr,
                       LLVMValueRef index);

/**
 * Get the value of an array element.
 */
LLVMValueRef
lp_build_array_get(struct gallivm_state *gallivm,
                   LLVMValueRef ptr,
                   LLVMValueRef index);

/**
 * Set the value of an array element.
 */
void
lp_build_array_set(struct gallivm_state *gallivm,
                   LLVMValueRef ptr,
                   LLVMValueRef index,
                   LLVMValueRef value);

/**
 * Get the value of an array element.
 */
LLVMValueRef
lp_build_pointer_get(LLVMBuilderRef builder,
                   LLVMValueRef ptr,
                   LLVMValueRef index);

/**
 * Get the value of an array element, with explicit alignment.
 *
 * If the element size is different from the alignment this will
 * cause llvm to emit an unaligned load
 */
LLVMValueRef
lp_build_pointer_get_unaligned(LLVMBuilderRef builder,
                               LLVMValueRef ptr,
                               LLVMValueRef index,
                               unsigned alignment);

/**
 * Set the value of an array element.
 */
void
lp_build_pointer_set(LLVMBuilderRef builder,
                     LLVMValueRef ptr,
                     LLVMValueRef index,
                     LLVMValueRef value);

/**
 * Set the value of an array element, with explicit alignment.
 *
 * If the element size is different from the alignment this will
 * cause llvm to emit an unaligned store
 */
void
lp_build_pointer_set_unaligned(LLVMBuilderRef builder,
                               LLVMValueRef ptr,
                               LLVMValueRef index,
                               LLVMValueRef value,
                               unsigned alignment);

#endif /* !LP_BLD_STRUCT_H */
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d108 12
d127 13
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d40 2
a41 2
#include <llvm-c/Core.h>  
#include <llvm-c/Target.h>
d60 1
a60 1
lp_build_struct_get_ptr(LLVMBuilderRef builder,
d69 1
a69 1
lp_build_struct_get(LLVMBuilderRef builder,
d74 41
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d40 2
a41 2
#include "gallivm/lp_bld.h"
#include "gallivm/lp_bld_init.h"
d60 1
a60 1
lp_build_struct_get_ptr(struct gallivm_state *gallivm,
d69 1
a69 1
lp_build_struct_get(struct gallivm_state *gallivm,
a73 41
/**
 * Get value pointer to an array element.
 */
LLVMValueRef
lp_build_array_get_ptr(struct gallivm_state *gallivm,
                       LLVMValueRef ptr,
                       LLVMValueRef index);

/**
 * Get the value of an array element.
 */
LLVMValueRef
lp_build_array_get(struct gallivm_state *gallivm,
                   LLVMValueRef ptr,
                   LLVMValueRef index);

/**
 * Set the value of an array element.
 */
void
lp_build_array_set(struct gallivm_state *gallivm,
                   LLVMValueRef ptr,
                   LLVMValueRef index,
                   LLVMValueRef value);

/**
 * Get the value of an array element.
 */
LLVMValueRef
lp_build_pointer_get(LLVMBuilderRef builder,
                   LLVMValueRef ptr,
                   LLVMValueRef index);

/**
 * Set the value of an array element.
 */
void
lp_build_pointer_set(LLVMBuilderRef builder,
                     LLVMValueRef ptr,
                     LLVMValueRef index,
                     LLVMValueRef value);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a107 12
 * Get the value of an array element, with explicit alignment.
 *
 * If the element size is different from the alignment this will
 * cause llvm to emit an unaligned load
 */
LLVMValueRef
lp_build_pointer_get_unaligned(LLVMBuilderRef builder,
                               LLVMValueRef ptr,
                               LLVMValueRef index,
                               unsigned alignment);

/**
a114 13

/**
 * Set the value of an array element, with explicit alignment.
 *
 * If the element size is different from the alignment this will
 * cause llvm to emit an unaligned store
 */
void
lp_build_pointer_set_unaligned(LLVMBuilderRef builder,
                               LLVMValueRef ptr,
                               LLVMValueRef index,
                               LLVMValueRef value,
                               unsigned alignment);
@


