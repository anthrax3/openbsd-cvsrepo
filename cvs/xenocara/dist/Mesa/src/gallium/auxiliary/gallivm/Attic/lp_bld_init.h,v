head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.02.20.23.09.51;	author jsg;	state Exp;
branches;
next	1.4;
commitid	4ry2gvZGMXkCUD2n;

1.4
date	2015.01.25.14.41.14;	author jsg;	state Exp;
branches;
next	1.3;
commitid	mcxB0JvoI9gTDYXU;

1.3
date	2013.09.05.13.59.35;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.58;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2015.01.25.14.06.15;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.43.23;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


#ifndef LP_BLD_INIT_H
#define LP_BLD_INIT_H


#include "pipe/p_compiler.h"
#include "util/u_pointer.h" // for func_pointer
#include "lp_bld.h"
#include <llvm-c/ExecutionEngine.h>


struct gallivm_state
{
   LLVMModuleRef module;
   LLVMExecutionEngineRef engine;
   LLVMModuleProviderRef provider;
   LLVMTargetDataRef target;
   LLVMPassManagerRef passmgr;
   LLVMContextRef context;
   LLVMBuilderRef builder;
   unsigned compiled;
};


void
lp_build_init(void);


struct gallivm_state *
gallivm_create(void);

void
gallivm_destroy(struct gallivm_state *gallivm);


void
gallivm_verify_function(struct gallivm_state *gallivm,
                        LLVMValueRef func);

void
gallivm_compile_module(struct gallivm_state *gallivm);

func_pointer
gallivm_jit_function(struct gallivm_state *gallivm,
                     LLVMValueRef func);

void
gallivm_free_function(struct gallivm_state *gallivm,
                      LLVMValueRef func,
                      const void * code);

void
lp_set_load_alignment(LLVMValueRef Inst,
                       unsigned Align);

void
lp_set_store_alignment(LLVMValueRef Inst,
		       unsigned Align);

#endif /* !LP_BLD_INIT_H */
@


1.5
log
@Merge Mesa 10.2.9
@
text
@@


1.4
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d43 1
a47 2
   LLVMMCJITMemoryManagerRef memorymgr;
   struct lp_generated_code *code;
d52 1
a52 1
boolean
d57 1
a57 1
gallivm_create(const char *name, LLVMContextRef context);
a61 2
void
gallivm_free_ir(struct gallivm_state *gallivm);
d73 5
@


1.3
log
@Merge Mesa 9.2.0
@
text
@a42 1
   LLVMModuleProviderRef provider;
d47 2
d53 1
a53 1
void
d58 1
a58 1
gallivm_create(void);
d63 2
a75 5

void
gallivm_free_function(struct gallivm_state *gallivm,
                      LLVMValueRef func,
                      const void * code);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d34 1
d48 1
d56 2
a57 3
extern void
lp_func_delete_body(LLVMValueRef func);

d60 1
a60 2
gallivm_garbage_collect(struct gallivm_state *gallivm);

a61 1
typedef void (*garbage_collect_callback_func)(void *cb_data);
d64 2
a65 2
gallivm_register_garbage_collector_callback(garbage_collect_callback_func func,
                                            void *cb_data);
d68 1
a68 2
gallivm_remove_garbage_collector_callback(garbage_collect_callback_func func,
                                          void *cb_data);
d70 3
d74 4
a77 2
struct gallivm_state *
gallivm_create(void);
d80 2
a81 6
gallivm_destroy(struct gallivm_state *gallivm);


extern LLVMValueRef
lp_build_load_volatile(LLVMBuilderRef B, LLVMValueRef PointerVal,
                       const char *Name);
d83 3
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d33 15
a47 3
#ifdef __cplusplus
extern "C" {
#endif
d54 29
a82 3
#ifdef __cplusplus
}
#endif
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d33 3
a35 15
#include "pipe/p_compiler.h"
#include "lp_bld.h"
#include <llvm-c/ExecutionEngine.h>


struct gallivm_state
{
   LLVMModuleRef module;
   LLVMExecutionEngineRef engine;
   LLVMModuleProviderRef provider;
   LLVMTargetDataRef target;
   LLVMPassManagerRef passmgr;
   LLVMContextRef context;
   LLVMBuilderRef builder;
};
d42 3
a44 29
extern void
lp_func_delete_body(LLVMValueRef func);


void
gallivm_garbage_collect(struct gallivm_state *gallivm);


typedef void (*garbage_collect_callback_func)(void *cb_data);

void
gallivm_register_garbage_collector_callback(garbage_collect_callback_func func,
                                            void *cb_data);

void
gallivm_remove_garbage_collector_callback(garbage_collect_callback_func func,
                                          void *cb_data);


struct gallivm_state *
gallivm_create(void);

void
gallivm_destroy(struct gallivm_state *gallivm);


extern LLVMValueRef
lp_build_load_volatile(LLVMBuilderRef B, LLVMValueRef PointerVal,
                       const char *Name);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a33 1
#include "util/u_pointer.h" // for func_pointer
a46 1
   unsigned compiled;
d54 3
a56 2
struct gallivm_state *
gallivm_create(void);
d59 2
a60 1
gallivm_destroy(struct gallivm_state *gallivm);
d62 1
d65 2
a66 2
gallivm_verify_function(struct gallivm_state *gallivm,
                        LLVMValueRef func);
d69 3
a71 1
gallivm_compile_module(struct gallivm_state *gallivm);
d73 2
a74 3
func_pointer
gallivm_jit_function(struct gallivm_state *gallivm,
                     LLVMValueRef func);
d77 1
a77 3
gallivm_free_function(struct gallivm_state *gallivm,
                      LLVMValueRef func,
                      const void * code);
a78 3
void
lp_set_load_alignment(LLVMValueRef Inst,
                       unsigned Align);
d80 4
a83 3
void
lp_set_store_alignment(LLVMValueRef Inst,
		       unsigned Align);
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d43 1
a47 2
   LLVMMCJITMemoryManagerRef memorymgr;
   struct lp_generated_code *code;
d52 1
a52 1
boolean
d57 1
a57 1
gallivm_create(const char *name, LLVMContextRef context);
a61 2
void
gallivm_free_ir(struct gallivm_state *gallivm);
d73 5
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@a42 1
   LLVMModuleProviderRef provider;
d47 2
d53 1
a53 1
void
d58 1
a58 1
gallivm_create(void);
d63 2
a75 5

void
gallivm_free_function(struct gallivm_state *gallivm,
                      LLVMValueRef func,
                      const void * code);
@


