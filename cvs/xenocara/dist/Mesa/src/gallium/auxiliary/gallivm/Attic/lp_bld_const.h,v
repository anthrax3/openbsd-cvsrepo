head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.26;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2013.09.05.13.59.34;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.53;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

/**
 * @@file
 * Helper functions for constant building.
 *
 * @@author Jose Fonseca <jfonseca@@vmware.com>
 */


#ifndef LP_BLD_CONST_H
#define LP_BLD_CONST_H


#include "pipe/p_compiler.h"
#include "gallivm/lp_bld.h"
#include "gallivm/lp_bld_init.h"



struct lp_type;


unsigned
lp_mantissa(struct lp_type type);


unsigned
lp_const_shift(struct lp_type type);


unsigned
lp_const_offset(struct lp_type type);


double
lp_const_scale(struct lp_type type);

double
lp_const_min(struct lp_type type);


double
lp_const_max(struct lp_type type);


double
lp_const_eps(struct lp_type type);


LLVMValueRef
lp_build_undef(struct gallivm_state *gallivm, struct lp_type type);


LLVMValueRef
lp_build_zero(struct gallivm_state *gallivm, struct lp_type type);


LLVMValueRef
lp_build_one(struct gallivm_state *gallivm, struct lp_type type);


LLVMValueRef
lp_build_const_elem(struct gallivm_state *gallivm, struct lp_type type,
                    double val);

LLVMValueRef
lp_build_const_vec(struct gallivm_state *gallivm, struct lp_type type,
                   double val);


LLVMValueRef
lp_build_const_int_vec(struct gallivm_state *gallivm,
                       struct lp_type type, long long val);


LLVMValueRef
lp_build_const_aos(struct gallivm_state *gallivm, struct lp_type type, 
                   double r, double g, double b, double a, 
                   const unsigned char *swizzle);


LLVMValueRef
lp_build_const_mask_aos(struct gallivm_state *gallivm,
                        struct lp_type type,
                        unsigned mask,
                        unsigned channels);


LLVMValueRef
lp_build_const_mask_aos_swizzled(struct gallivm_state *gallivm,
                                 struct lp_type type,
                                 unsigned mask,
                                 unsigned channels,
                                 const unsigned char *swizzle);


static INLINE LLVMValueRef
lp_build_const_int32(struct gallivm_state *gallivm, int i)
{
   return LLVMConstInt(LLVMInt32TypeInContext(gallivm->context), i, 0);
}


static INLINE LLVMValueRef
lp_build_const_float(struct gallivm_state *gallivm, float x)
{
   return LLVMConstReal(LLVMFloatTypeInContext(gallivm->context), x);
}


/** Return constant-valued pointer to int */
static INLINE LLVMValueRef
lp_build_const_int_pointer(struct gallivm_state *gallivm, const void *ptr)
{
   LLVMTypeRef int_type;
   LLVMValueRef v;

   /* int type large enough to hold a pointer */
   int_type = LLVMIntTypeInContext(gallivm->context, 8 * sizeof(void *));
   v = LLVMConstInt(int_type, (uintptr_t) ptr, 0);
   v = LLVMBuildIntToPtr(gallivm->builder, v,
                         LLVMPointerType(int_type, 0),
                         "cast int to ptr");
   return v;
}


LLVMValueRef
lp_build_const_string(struct gallivm_state *gallivm,
                      const char *str);


LLVMValueRef
lp_build_const_func_pointer(struct gallivm_state *gallivm,
                            const void *ptr,
                            LLVMTypeRef ret_type,
                            LLVMTypeRef *arg_types,
                            unsigned num_args,
                            const char *name);


#endif /* !LP_BLD_CONST_H */
@


1.4
log
@Merge Mesa 9.2.0
@
text
@@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d111 10
a120 1
                        unsigned mask);
d153 13
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d137 1
a137 1
   v = LLVMConstInt(int_type, (unsigned long long) ptr, 0);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d40 3
a42 1
#include <llvm-c/Core.h>  
a43 1
#include <pipe/p_compiler.h>
d77 1
a77 1
lp_build_undef(struct lp_type type);
d81 1
a81 1
lp_build_zero(struct lp_type type);
d85 1
a85 1
lp_build_one(struct lp_type type);
d89 6
a94 2
lp_build_const_scalar(struct lp_type type,
                      double val);
d98 2
a99 2
lp_build_int_const_scalar(struct lp_type type,
                          long long val);
d103 1
a103 1
lp_build_const_aos(struct lp_type type, 
d109 35
a143 2
lp_build_const_mask_aos(struct lp_type type,
                        const boolean cond[4]);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d40 1
a40 3
#include "pipe/p_compiler.h"
#include "gallivm/lp_bld.h"
#include "gallivm/lp_bld_init.h"
d42 1
d76 1
a76 1
lp_build_undef(struct gallivm_state *gallivm, struct lp_type type);
d80 1
a80 1
lp_build_zero(struct gallivm_state *gallivm, struct lp_type type);
d84 1
a84 1
lp_build_one(struct gallivm_state *gallivm, struct lp_type type);
d88 2
a89 6
lp_build_const_elem(struct gallivm_state *gallivm, struct lp_type type,
                    double val);

LLVMValueRef
lp_build_const_vec(struct gallivm_state *gallivm, struct lp_type type,
                   double val);
d93 2
a94 2
lp_build_const_int_vec(struct gallivm_state *gallivm,
                       struct lp_type type, long long val);
d98 1
a98 1
lp_build_const_aos(struct gallivm_state *gallivm, struct lp_type type, 
d104 2
a105 35
lp_build_const_mask_aos(struct gallivm_state *gallivm,
                        struct lp_type type,
                        unsigned mask);


static INLINE LLVMValueRef
lp_build_const_int32(struct gallivm_state *gallivm, int i)
{
   return LLVMConstInt(LLVMInt32TypeInContext(gallivm->context), i, 0);
}


static INLINE LLVMValueRef
lp_build_const_float(struct gallivm_state *gallivm, float x)
{
   return LLVMConstReal(LLVMFloatTypeInContext(gallivm->context), x);
}


/** Return constant-valued pointer to int */
static INLINE LLVMValueRef
lp_build_const_int_pointer(struct gallivm_state *gallivm, const void *ptr)
{
   LLVMTypeRef int_type;
   LLVMValueRef v;

   /* int type large enough to hold a pointer */
   int_type = LLVMIntTypeInContext(gallivm->context, 8 * sizeof(void *));
   v = LLVMConstInt(int_type, (unsigned long long) ptr, 0);
   v = LLVMBuildIntToPtr(gallivm->builder, v,
                         LLVMPointerType(int_type, 0),
                         "cast int to ptr");
   return v;
}

@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d111 1
a111 10
                        unsigned mask,
                        unsigned channels);


LLVMValueRef
lp_build_const_mask_aos_swizzled(struct gallivm_state *gallivm,
                                 struct lp_type type,
                                 unsigned mask,
                                 unsigned channels,
                                 const unsigned char *swizzle);
d137 1
a137 1
   v = LLVMConstInt(int_type, (uintptr_t) ptr, 0);
a143 13

LLVMValueRef
lp_build_const_string(struct gallivm_state *gallivm,
                      const char *str);


LLVMValueRef
lp_build_const_func_pointer(struct gallivm_state *gallivm,
                            const void *ptr,
                            LLVMTypeRef ret_type,
                            LLVMTypeRef *arg_types,
                            unsigned num_args,
                            const char *name);
@


