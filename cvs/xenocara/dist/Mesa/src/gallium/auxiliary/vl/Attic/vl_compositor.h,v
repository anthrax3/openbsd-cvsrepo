head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.28;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.53;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.13.59.54;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.10.56;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.33.49;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 Younes Manton.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#ifndef vl_compositor_h
#define vl_compositor_h

#include "pipe/p_state.h"
#include "pipe/p_video_codec.h"
#include "pipe/p_video_state.h"

#include "util/u_rect.h"

#include "vl_types.h"
#include "vl_csc.h"

struct pipe_context;

/**
 * composing and displaying of image data
 */

#define VL_COMPOSITOR_MAX_LAYERS 16

/* deinterlace allgorithem */
enum vl_compositor_deinterlace
{
   VL_COMPOSITOR_WEAVE,
   VL_COMPOSITOR_BOB_TOP,
   VL_COMPOSITOR_BOB_BOTTOM
};

/* clockwise degree */
enum vl_compositor_rotation
{
   VL_COMPOSITOR_ROTATE_0,
   VL_COMPOSITOR_ROTATE_90,
   VL_COMPOSITOR_ROTATE_180,
   VL_COMPOSITOR_ROTATE_270
};

struct vl_compositor_layer
{
   bool clearing;

   bool viewport_valid;
   struct pipe_viewport_state viewport;

   void *fs;
   void *samplers[3];
   void *blend;

   struct pipe_sampler_view *sampler_views[3];
   struct {
      struct vertex2f tl, br;
   } src, dst;
   struct vertex2f zw;
   struct vertex4f colors[4];
   enum vl_compositor_rotation rotate;
};

struct vl_compositor_state
{
   struct pipe_context *pipe;

   bool scissor_valid;
   struct pipe_scissor_state scissor;
   struct pipe_resource *csc_matrix;

   union pipe_color_union clear_color;

   unsigned used_layers:VL_COMPOSITOR_MAX_LAYERS;
   struct vl_compositor_layer layers[VL_COMPOSITOR_MAX_LAYERS];
};

struct vl_compositor
{
   struct pipe_context *pipe;
   struct u_upload_mgr *upload;

   struct pipe_framebuffer_state fb_state;
   struct pipe_vertex_buffer vertex_buf;

   void *sampler_linear;
   void *sampler_nearest;
   void *blend_clear, *blend_add;
   void *rast;
   void *dsa;
   void *vertex_elems_state;

   void *vs;
   void *fs_video_buffer;
   void *fs_weave;
   void *fs_rgba;

   struct {
      void *rgb;
      void *yuv;
   } fs_palette;
};

/**
 * initialize this compositor
 */
bool
vl_compositor_init(struct vl_compositor *compositor, struct pipe_context *pipe);

/**
 * init state bag
 */
bool
vl_compositor_init_state(struct vl_compositor_state *state, struct pipe_context *pipe);

/**
 * set yuv -> rgba conversion matrix
 */
void
vl_compositor_set_csc_matrix(struct vl_compositor_state *settings, const vl_csc_matrix *matrix);

/**
 * reset dirty area, so it's cleared with the clear colour
 */
void
vl_compositor_reset_dirty_area(struct u_rect *dirty);

/**
 * set the clear color
 */
void
vl_compositor_set_clear_color(struct vl_compositor_state *settings, union pipe_color_union *color);

/**
 * get the clear color
 */
void
vl_compositor_get_clear_color(struct vl_compositor_state *settings, union pipe_color_union *color);

/**
 * set the destination clipping
 */
void
vl_compositor_set_dst_clip(struct vl_compositor_state *settings, struct u_rect *dst_clip);

/**
 * set overlay samplers
 */
/*@@{*/

/**
 * reset all currently set layers
 */
void
vl_compositor_clear_layers(struct vl_compositor_state *state);

/**
 * set the blender used to render a layer
 */
void
vl_compositor_set_layer_blend(struct vl_compositor_state *state,
                              unsigned layer, void *blend, bool is_clearing);

/**
 * set the layer destination area
 */
void
vl_compositor_set_layer_dst_area(struct vl_compositor_state *settings,
                                 unsigned layer, struct u_rect *dst_area);

/**
 * set a video buffer as a layer to render
 */
void
vl_compositor_set_buffer_layer(struct vl_compositor_state *state,
                               struct vl_compositor *compositor,
                               unsigned layer,
                               struct pipe_video_buffer *buffer,
                               struct u_rect *src_rect,
                               struct u_rect *dst_rect,
                               enum vl_compositor_deinterlace deinterlace);

/**
 * set a paletted sampler as a layer to render
 */
void
vl_compositor_set_palette_layer(struct vl_compositor_state *state,
                                struct vl_compositor *compositor,
                                unsigned layer,
                                struct pipe_sampler_view *indexes,
                                struct pipe_sampler_view *palette,
                                struct u_rect *src_rect,
                                struct u_rect *dst_rect,
                                bool include_color_conversion);

/**
 * set a rgba sampler as a layer to render
 */
void
vl_compositor_set_rgba_layer(struct vl_compositor_state *state,
                             struct vl_compositor *compositor,
                             unsigned layer,
                             struct pipe_sampler_view *rgba,
                             struct u_rect *src_rect,
                             struct u_rect *dst_rect,
                             struct vertex4f *colors);

/**
 * set the layer rotation
 */
void
vl_compositor_set_layer_rotation(struct vl_compositor_state *state,
                                 unsigned layer,
                                 enum vl_compositor_rotation rotate);

/*@@}*/

/**
 * render the layers to the frontbuffer
 */
void
vl_compositor_render(struct vl_compositor_state *state,
                     struct vl_compositor       *compositor,
                     struct pipe_surface        *dst_surface,
                     struct u_rect              *dirty_area,
                     bool                        clear_dirty);

/**
 * destroy this compositor
 */
void
vl_compositor_cleanup(struct vl_compositor *compositor);

/**
 * destroy this state bag
 */
void
vl_compositor_cleanup_state(struct vl_compositor_state *state);

#endif /* vl_compositor_h */
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d32 1
a32 1
#include "pipe/p_video_decoder.h"
d56 9
d82 1
d102 1
d228 8
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d2 1
a2 1
 * 
d5 1
a5 1
 * 
d13 1
a13 1
 * 
d17 1
a17 1
 * 
d25 1
a25 1
 * 
d31 8
a38 3
#include <pipe/p_compiler.h>
#include <pipe/p_state.h>
#include <pipe/p_video_state.h>
a40 1
struct pipe_texture;
d42 34
a75 1
struct vl_compositor
d79 1
a79 5
   struct pipe_framebuffer_state fb_state;
   void *sampler;
   void *vertex_shader;
   void *fragment_shader;
   struct pipe_viewport_state viewport;
d81 6
a86 3
   struct pipe_vertex_buffer vertex_bufs[2];
   struct pipe_vertex_element vertex_elems[2];
   struct pipe_buffer *vs_const_buf, *fs_const_buf;
d89 3
a91 1
bool vl_compositor_init(struct vl_compositor *compositor, struct pipe_context *pipe);
d93 2
a94 1
void vl_compositor_cleanup(struct vl_compositor *compositor);
d96 17
a112 17
void vl_compositor_render(struct vl_compositor          *compositor,
                          /*struct pipe_texture         *backround,
                          struct pipe_video_rect        *backround_area,*/
                          struct pipe_texture           *src_surface,
                          enum pipe_mpeg12_picture_type picture_type,
                          /*unsigned                    num_past_surfaces,
                          struct pipe_texture           *past_surfaces,
                          unsigned                      num_future_surfaces,
                          struct pipe_texture           *future_surfaces,*/
                          struct pipe_video_rect        *src_area,
                          struct pipe_texture           *dst_surface,
                          struct pipe_video_rect        *dst_area,
                          /*unsigned                      num_layers,
                          struct pipe_texture           *layers,
                          struct pipe_video_rect        *layer_src_areas,
                          struct pipe_video_rect        *layer_dst_areas,*/
                          struct pipe_fence_handle      **fence);
d114 127
a240 1
void vl_compositor_set_csc_matrix(struct vl_compositor *compositor, const float *mat);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@d2 1
a2 1
 *
d5 1
a5 1
 *
d13 1
a13 1
 *
d17 1
a17 1
 *
d25 1
a25 1
 *
d31 3
a33 8
#include "pipe/p_state.h"
#include "pipe/p_video_decoder.h"
#include "pipe/p_video_state.h"

#include "util/u_rect.h"

#include "vl_types.h"
#include "vl_csc.h"
d36 1
d38 1
a38 8
/**
 * composing and displaying of image data
 */

#define VL_COMPOSITOR_MAX_LAYERS 16

/* deinterlace allgorithem */
enum vl_compositor_deinterlace
d40 1
a40 4
   VL_COMPOSITOR_WEAVE,
   VL_COMPOSITOR_BOB_TOP,
   VL_COMPOSITOR_BOB_BOTTOM
};
d42 4
a45 5
struct vl_compositor_layer
{
   bool clearing;

   bool viewport_valid;
a46 18

   void *fs;
   void *samplers[3];
   void *blend;

   struct pipe_sampler_view *sampler_views[3];
   struct {
      struct vertex2f tl, br;
   } src, dst;
   struct vertex2f zw;
   struct vertex4f colors[4];
};

struct vl_compositor_state
{
   struct pipe_context *pipe;

   bool scissor_valid;
d48 3
a50 6
   struct pipe_resource *csc_matrix;

   union pipe_color_union clear_color;

   unsigned used_layers:VL_COMPOSITOR_MAX_LAYERS;
   struct vl_compositor_layer layers[VL_COMPOSITOR_MAX_LAYERS];
d53 1
a53 3
struct vl_compositor
{
   struct pipe_context *pipe;
d55 1
a55 2
   struct pipe_framebuffer_state fb_state;
   struct pipe_vertex_buffer vertex_buf;
d57 17
a73 17
   void *sampler_linear;
   void *sampler_nearest;
   void *blend_clear, *blend_add;
   void *rast;
   void *dsa;
   void *vertex_elems_state;

   void *vs;
   void *fs_video_buffer;
   void *fs_weave;
   void *fs_rgba;

   struct {
      void *rgb;
      void *yuv;
   } fs_palette;
};
d75 1
a75 127
/**
 * initialize this compositor
 */
bool
vl_compositor_init(struct vl_compositor *compositor, struct pipe_context *pipe);

/**
 * init state bag
 */
bool
vl_compositor_init_state(struct vl_compositor_state *state, struct pipe_context *pipe);

/**
 * set yuv -> rgba conversion matrix
 */
void
vl_compositor_set_csc_matrix(struct vl_compositor_state *settings, const vl_csc_matrix *matrix);

/**
 * reset dirty area, so it's cleared with the clear colour
 */
void
vl_compositor_reset_dirty_area(struct u_rect *dirty);

/**
 * set the clear color
 */
void
vl_compositor_set_clear_color(struct vl_compositor_state *settings, union pipe_color_union *color);

/**
 * get the clear color
 */
void
vl_compositor_get_clear_color(struct vl_compositor_state *settings, union pipe_color_union *color);

/**
 * set the destination clipping
 */
void
vl_compositor_set_dst_clip(struct vl_compositor_state *settings, struct u_rect *dst_clip);

/**
 * set overlay samplers
 */
/*@@{*/

/**
 * reset all currently set layers
 */
void
vl_compositor_clear_layers(struct vl_compositor_state *state);

/**
 * set the blender used to render a layer
 */
void
vl_compositor_set_layer_blend(struct vl_compositor_state *state,
                              unsigned layer, void *blend, bool is_clearing);

/**
 * set the layer destination area
 */
void
vl_compositor_set_layer_dst_area(struct vl_compositor_state *settings,
                                 unsigned layer, struct u_rect *dst_area);

/**
 * set a video buffer as a layer to render
 */
void
vl_compositor_set_buffer_layer(struct vl_compositor_state *state,
                               struct vl_compositor *compositor,
                               unsigned layer,
                               struct pipe_video_buffer *buffer,
                               struct u_rect *src_rect,
                               struct u_rect *dst_rect,
                               enum vl_compositor_deinterlace deinterlace);

/**
 * set a paletted sampler as a layer to render
 */
void
vl_compositor_set_palette_layer(struct vl_compositor_state *state,
                                struct vl_compositor *compositor,
                                unsigned layer,
                                struct pipe_sampler_view *indexes,
                                struct pipe_sampler_view *palette,
                                struct u_rect *src_rect,
                                struct u_rect *dst_rect,
                                bool include_color_conversion);

/**
 * set a rgba sampler as a layer to render
 */
void
vl_compositor_set_rgba_layer(struct vl_compositor_state *state,
                             struct vl_compositor *compositor,
                             unsigned layer,
                             struct pipe_sampler_view *rgba,
                             struct u_rect *src_rect,
                             struct u_rect *dst_rect,
                             struct vertex4f *colors);

/*@@}*/

/**
 * render the layers to the frontbuffer
 */
void
vl_compositor_render(struct vl_compositor_state *state,
                     struct vl_compositor       *compositor,
                     struct pipe_surface        *dst_surface,
                     struct u_rect              *dirty_area,
                     bool                        clear_dirty);

/**
 * destroy this compositor
 */
void
vl_compositor_cleanup(struct vl_compositor *compositor);

/**
 * destroy this state bag
 */
void
vl_compositor_cleanup_state(struct vl_compositor_state *state);
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d32 1
a32 1
#include "pipe/p_video_codec.h"
a55 9
/* clockwise degree */
enum vl_compositor_rotation
{
   VL_COMPOSITOR_ROTATE_0,
   VL_COMPOSITOR_ROTATE_90,
   VL_COMPOSITOR_ROTATE_180,
   VL_COMPOSITOR_ROTATE_270
};

a72 1
   enum vl_compositor_rotation rotate;
a91 1
   struct u_upload_mgr *upload;
a216 8

/**
 * set the layer rotation
 */
void
vl_compositor_set_layer_rotation(struct vl_compositor_state *state,
                                 unsigned layer,
                                 enum vl_compositor_rotation rotate);
@


