head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2015.12.23.05.17.29;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2013.09.05.13.59.55;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.26;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.00;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@.. _blend:

Blend
=====

This state controls blending of the final fragments into the target rendering
buffers.

Blend Factors
-------------

The blend factors largely follow the same pattern as their counterparts
in other modern and legacy drawing APIs.

Dual source blend factors are supported for up to 1 MRT, although
you can advertise > 1 MRT, the stack cannot handle them for a few reasons.
There is no definition on how the 1D array of shader outputs should be mapped
to something that would be a 2D array (location, index). No current hardware
exposes > 1 MRT, and we should revisit this issue if anyone ever does.

Logical Operations
------------------

Logical operations, also known as logicops, lops, or rops, are supported.
Only two-operand logicops are available. When logicops are enabled, all other
blend state is ignored, including per-render-target state, so logicops are
performed on all render targets.

.. warning::
   The blend_enable flag is ignored for all render targets when logical
   operations are enabled.

For a source component `s` and destination component `d`, the logical
operations are defined as taking the bits of each channel of each component,
and performing one of the following operations per-channel:

* ``CLEAR``: 0
* ``NOR``: :math:`\lnot(s \lor d)`
* ``AND_INVERTED``: :math:`\lnot s \land d`
* ``COPY_INVERTED``: :math:`\lnot s`
* ``AND_REVERSE``: :math:`s \land \lnot d`
* ``INVERT``: :math:`\lnot d`
* ``XOR``: :math:`s \oplus d`
* ``NAND``: :math:`\lnot(s \land d)`
* ``AND``: :math:`s \land d`
* ``EQUIV``: :math:`\lnot(s \oplus d)`
* ``NOOP``: :math:`d`
* ``OR_INVERTED``: :math:`\lnot s \lor d`
* ``COPY``: :math:`s`
* ``OR_REVERSE``: :math:`s \lor \lnot d`
* ``OR``: :math:`s \lor d`
* ``SET``: 1

.. note::
   The logical operation names and definitions match those of the OpenGL API,
   and are similar to the ROP2 and ROP3 definitions of GDI. This is
   intentional, to ease transitions to Gallium.

Members
-------

These members affect all render targets.

dither
%%%%%%

Whether dithering is enabled.

.. note::
   Dithering is completely implementation-dependent. It may be ignored by
   drivers for any reason, and some render targets may always or never be
   dithered depending on their format or usage flags.

logicop_enable
%%%%%%%%%%%%%%

Whether the blender should perform a logicop instead of blending.

logicop_func
%%%%%%%%%%%%

The logicop to use. One of ``PIPE_LOGICOP``.

independent_blend_enable
   If enabled, blend state is different for each render target, and
   for each render target set in the respective member of the rt array.
   If disabled, blend state is the same for all render targets, and only
   the first member of the rt array contains valid data.
rt
   Contains the per-rendertarget blend state.

Per-rendertarget Members
------------------------

blend_enable
   If blending is enabled, perform a blend calculation according to blend
   functions and source/destination factors. Otherwise, the incoming fragment
   color gets passed unmodified (but colormask still applies).
rgb_func
   The blend function to use for rgb channels. One of PIPE_BLEND.
rgb_src_factor
   The blend source factor to use for rgb channels. One of PIPE_BLENDFACTOR.
rgb_dst_factor
   The blend destination factor to use for rgb channels. One of PIPE_BLENDFACTOR.
alpha_func
   The blend function to use for the alpha channel. One of PIPE_BLEND.
alpha_src_factor
   The blend source factor to use for the alpha channel. One of PIPE_BLENDFACTOR.
alpha_dst_factor
   The blend destination factor to use for alpha channel. One of PIPE_BLENDFACTOR.
colormask
   Bitmask of which channels to write. Combination of PIPE_MASK bits.
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d15 5
a19 1
XXX blurb about dual-source blends
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d17 38
d58 22
a84 7
logicop_enable
   Enables logic ops. Cannot be enabled at the same time as blending, and
   is always the same for all render targets.
logicop_func
   The logic operation to use if logic ops are enabled. One of PIPE_LOGICOP.
dither
   Whether dithering is enabled.
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a16 38
Logical Operations
------------------

Logical operations, also known as logicops, lops, or rops, are supported.
Only two-operand logicops are available. When logicops are enabled, all other
blend state is ignored, including per-render-target state, so logicops are
performed on all render targets.

.. warning::
   The blend_enable flag is ignored for all render targets when logical
   operations are enabled.

For a source component `s` and destination component `d`, the logical
operations are defined as taking the bits of each channel of each component,
and performing one of the following operations per-channel:

* ``CLEAR``: 0
* ``NOR``: :math:`\lnot(s \lor d)`
* ``AND_INVERTED``: :math:`\lnot s \land d`
* ``COPY_INVERTED``: :math:`\lnot s`
* ``AND_REVERSE``: :math:`s \land \lnot d`
* ``INVERT``: :math:`\lnot d`
* ``XOR``: :math:`s \oplus d`
* ``NAND``: :math:`\lnot(s \land d)`
* ``AND``: :math:`s \land d`
* ``EQUIV``: :math:`\lnot(s \oplus d)`
* ``NOOP``: :math:`d`
* ``OR_INVERTED``: :math:`\lnot s \lor d`
* ``COPY``: :math:`s`
* ``OR_REVERSE``: :math:`s \lor \lnot d`
* ``OR``: :math:`s \lor d`
* ``SET``: 1

.. note::
   The logical operation names and definitions match those of the OpenGL API,
   and are similar to the ROP2 and ROP3 definitions of GDI. This is
   intentional, to ease transitions to Gallium.

a19 22
These members affect all render targets.

dither
%%%%%%

Whether dithering is enabled.

.. note::
   Dithering is completely implementation-dependent. It may be ignored by
   drivers for any reason, and some render targets may always or never be
   dithered depending on their format or usage flags.

logicop_enable
%%%%%%%%%%%%%%

Whether the blender should perform a logicop instead of blending.

logicop_func
%%%%%%%%%%%%

The logicop to use. One of ``PIPE_LOGICOP``.

d25 7
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d15 1
a15 5
Dual source blend factors are supported for up to 1 MRT, although
you can advertise > 1 MRT, the stack cannot handle them for a few reasons.
There is no definition on how the 1D array of shader outputs should be mapped
to something that would be a 2D array (location, index). No current hardware
exposes > 1 MRT, and we should revisit this issue if anyone ever does.
@


