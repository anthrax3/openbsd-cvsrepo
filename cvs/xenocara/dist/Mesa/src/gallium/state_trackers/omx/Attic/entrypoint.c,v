head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.3.0.4
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	v10_2_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2015.12.23.05.17.37;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2014.07.09.20.34.19;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.1
date	2014.07.09.20.34.19;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.2
date	2015.01.25.14.09.24;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.3
date	2015.02.20.22.46.31;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2013 Advanced Micro Devices, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

/*
 * Authors:
 *      Christian KÃ¶nig <christian.koenig@@amd.com>
 *
 */

#include <assert.h>
#include <string.h>

#include <X11/Xlib.h>

#include "os/os_thread.h"
#include "util/u_memory.h"

#include "entrypoint.h"
#include "vid_dec.h"
#include "vid_enc.h"

pipe_static_mutex(omx_lock);
static Display *omx_display = NULL;
static struct vl_screen *omx_screen = NULL;
static unsigned omx_usecount = 0;

int omx_component_library_Setup(stLoaderComponentType **stComponents)
{
   OMX_ERRORTYPE r;
   unsigned i = 0;

   if (stComponents == NULL)
      return 2;

   /* component 0 - video decoder */
   r = vid_dec_LoaderComponent(stComponents[i]);
   if (r == OMX_ErrorNone)
      ++i;

   /* component 1 - video encoder */
   r = vid_enc_LoaderComponent(stComponents[i]);
   if (r == OMX_ErrorNone)
      ++i;

   return i;
}

struct vl_screen *omx_get_screen(void)
{
   pipe_mutex_lock(omx_lock);

   if (!omx_display) {
      omx_display = XOpenDisplay(NULL);
      if (!omx_display) {
         pipe_mutex_unlock(omx_lock);
         return NULL;
      }
   }

   if (!omx_screen) {
      omx_screen = vl_screen_create(omx_display, 0);
      if (!omx_screen) {
         pipe_mutex_unlock(omx_lock);
         return NULL;
      }
   }

   ++omx_usecount;

   pipe_mutex_unlock(omx_lock);
   return omx_screen;
}

void omx_put_screen(void)
{
   pipe_mutex_lock(omx_lock);
   if ((--omx_usecount) == 0) {
      vl_screen_destroy(omx_screen);
      XCloseDisplay(omx_display);
      omx_screen = NULL;
      omx_display = NULL;
   }
   pipe_mutex_unlock(omx_lock);
}

OMX_ERRORTYPE omx_workaround_Destructor(OMX_COMPONENTTYPE *comp)
{
   omx_base_component_PrivateType* priv = (omx_base_component_PrivateType*)comp->pComponentPrivate;

   priv->state = OMX_StateInvalid;
   tsem_up(priv->messageSem);

   /* wait for thread to exit */;
   pthread_join(priv->messageHandlerThread, NULL);

   return omx_base_component_Destructor(comp);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 10.2.3
@
text
@@


1.1.1.2
log
@Import Mesa 10.4.3
@
text
@d54 1
d60 3
a62 3
   r = vid_dec_LoaderComponent(stComponents[0]);
   if (r != OMX_ErrorNone)
      return OMX_ErrorInsufficientResources;
d65 3
a67 3
   r = vid_enc_LoaderComponent(stComponents[1]);
   if (r != OMX_ErrorNone)
      return OMX_ErrorInsufficientResources;
d69 1
a69 1
   return 2;
@


1.1.1.3
log
@Import Mesa 10.2.9
@
text
@a53 1
   unsigned i = 0;
d59 3
a61 3
   r = vid_dec_LoaderComponent(stComponents[i]);
   if (r == OMX_ErrorNone)
      ++i;
d64 3
a66 3
   r = vid_enc_LoaderComponent(stComponents[i]);
   if (r == OMX_ErrorNone)
      ++i;
d68 1
a68 1
   return i;
@


