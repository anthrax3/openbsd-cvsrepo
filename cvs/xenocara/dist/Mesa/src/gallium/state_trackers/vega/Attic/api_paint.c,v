head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.12
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.10
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.37;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2012.08.17.13.58.07;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.35;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.30;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.22;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#include "VG/openvg.h"

#include "vg_context.h"
#include "paint.h"
#include "api.h"
#include "handle.h"


VGPaint vegaCreatePaint(void)
{
   return paint_to_handle(paint_create(vg_current_context()));
}

void vegaDestroyPaint(VGPaint p)
{
   struct vg_context *ctx = vg_current_context();

   if (p == VG_INVALID_HANDLE) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }

   paint_destroy(handle_to_paint(p));
}

void vegaSetPaint(VGPaint paint, VGbitfield paintModes)
{
   struct vg_context *ctx = vg_current_context();

   if (paint == VG_INVALID_HANDLE) {
      /* restore the default */
      paint = paint_to_handle(ctx->default_paint);
   } else if (!vg_object_is_valid(paint, VG_OBJECT_PAINT)) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }

   if (!(paintModes & ((VG_FILL_PATH|VG_STROKE_PATH)))) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }

   if (paintModes & VG_FILL_PATH) {
      ctx->state.vg.fill_paint = handle_to_paint(paint);
   }
   if (paintModes & VG_STROKE_PATH) {
      ctx->state.vg.stroke_paint = handle_to_paint(paint);
   }

   ctx->state.dirty |= PAINT_DIRTY;
}

VGPaint vegaGetPaint(VGPaintMode paintMode)
{
   struct vg_context *ctx = vg_current_context();
   VGPaint paint = VG_INVALID_HANDLE;

   if (paintMode < VG_STROKE_PATH || paintMode > VG_FILL_PATH) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return VG_INVALID_HANDLE;
   }

   if (paintMode == VG_FILL_PATH)
      paint = paint_to_handle(ctx->state.vg.fill_paint);
   else if (paintMode == VG_STROKE_PATH)
      paint = paint_to_handle(ctx->state.vg.stroke_paint);

   if (paint == paint_to_handle(ctx->default_paint))
      paint = VG_INVALID_HANDLE;

   return paint;
}

void vegaSetColor(VGPaint paint, VGuint rgba)
{
   struct vg_context *ctx = vg_current_context();
   struct vg_paint *p;

   if (paint == VG_INVALID_HANDLE) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }

   if (!vg_object_is_valid(paint, VG_OBJECT_PAINT)) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }

   p = handle_to_paint(paint);
   paint_set_colori(p, rgba);

   if (ctx->state.vg.fill_paint == p ||
       ctx->state.vg.stroke_paint == p)
      ctx->state.dirty |= PAINT_DIRTY;
}

VGuint vegaGetColor(VGPaint paint)
{
   struct vg_context *ctx = vg_current_context();
   struct vg_paint *p;
   VGuint rgba = 0;

   if (paint == VG_INVALID_HANDLE) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return rgba;
   }

   if (!vg_object_is_valid(paint, VG_OBJECT_PAINT)) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return rgba;
   }
   p = handle_to_paint(paint);

   return paint_colori(p);
}

void vegaPaintPattern(VGPaint paint, VGImage pattern)
{
   struct vg_context *ctx = vg_current_context();

   if (paint == VG_INVALID_HANDLE ||
       !vg_context_is_object_valid(ctx, VG_OBJECT_PAINT, paint)) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }

   if (pattern == VG_INVALID_HANDLE) {
      paint_set_type(handle_to_paint(paint), VG_PAINT_TYPE_COLOR);
      return;
   }

   if (!vg_context_is_object_valid(ctx, VG_OBJECT_IMAGE, pattern)) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }


   if (!vg_object_is_valid(paint, VG_OBJECT_PAINT) ||
       !vg_object_is_valid(pattern, VG_OBJECT_IMAGE)) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }
   paint_set_pattern(handle_to_paint(paint),
                     handle_to_image(pattern));
}

@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d32 2
d37 1
a37 1
   return (VGPaint) paint_create(vg_current_context());
a42 1
   struct vg_paint *paint;
d49 1
a49 2
   paint = (struct vg_paint *)p;
   paint_destroy(paint);
d58 2
a59 2
      paint = (VGPaint)ctx->default_paint;
   } else if (!vg_object_is_valid((void*)paint, VG_OBJECT_PAINT)) {
d70 1
a70 1
      ctx->state.vg.fill_paint = (struct vg_paint *)paint;
d73 1
a73 1
      ctx->state.vg.stroke_paint = (struct vg_paint *)paint;
d75 2
d90 1
a90 1
      paint = (VGPaint)ctx->state.vg.fill_paint;
d92 1
a92 1
      paint = (VGPaint)ctx->state.vg.stroke_paint;
d94 1
a94 1
   if (paint == (VGPaint)ctx->default_paint)
d103 1
d110 1
a110 1
   if (!vg_object_is_valid((void*)paint, VG_OBJECT_PAINT)) {
d114 7
a120 4
   {
      struct vg_paint *p = (struct vg_paint *)paint;
      paint_set_colori(p, rgba);
   }
d134 1
a134 1
   if (!vg_object_is_valid((void*)paint, VG_OBJECT_PAINT)) {
d138 1
a138 1
   p = (struct vg_paint *)paint;
d148 1
a148 1
       !vg_context_is_object_valid(ctx, VG_OBJECT_PAINT, (void *)paint)) {
d154 1
a154 1
      paint_set_type((struct vg_paint*)paint, VG_PAINT_TYPE_COLOR);
d158 1
a158 1
   if (!vg_context_is_object_valid(ctx, VG_OBJECT_IMAGE, (void *)pattern)) {
d164 2
a165 2
   if (!vg_object_is_valid((void*)paint, VG_OBJECT_PAINT) ||
       !vg_object_is_valid((void*)pattern, VG_OBJECT_IMAGE)) {
d169 2
a170 2
   paint_set_pattern((struct vg_paint*)paint,
                     (struct vg_image*)pattern);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d31 1
a31 1
#include "image.h"
d33 1
a33 1
VGPaint vgCreatePaint(void)
d38 1
a38 1
void vgDestroyPaint(VGPaint p)
d52 1
a52 1
void vgSetPaint(VGPaint paint, VGbitfield paintModes)
d77 1
a77 1
VGPaint vgGetPaint(VGPaintMode paintMode)
d98 1
a98 1
void vgSetColor(VGPaint paint, VGuint rgba)
d117 1
a117 1
VGuint vgGetColor(VGPaint paint)
d137 1
a137 1
void vgPaintPattern(VGPaint paint, VGImage pattern)
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d31 1
a31 1
#include "api.h"
d33 1
a33 1
VGPaint vegaCreatePaint(void)
d38 1
a38 1
void vegaDestroyPaint(VGPaint p)
d52 1
a52 1
void vegaSetPaint(VGPaint paint, VGbitfield paintModes)
d77 1
a77 1
VGPaint vegaGetPaint(VGPaintMode paintMode)
d98 1
a98 1
void vegaSetColor(VGPaint paint, VGuint rgba)
d117 1
a117 1
VGuint vegaGetColor(VGPaint paint)
d137 1
a137 1
void vegaPaintPattern(VGPaint paint, VGImage pattern)
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a31 2
#include "handle.h"

d35 1
a35 1
   return paint_to_handle(paint_create(vg_current_context()));
d41 1
d48 2
a49 1
   paint_destroy(handle_to_paint(p));
d58 2
a59 2
      paint = paint_to_handle(ctx->default_paint);
   } else if (!vg_object_is_valid(paint, VG_OBJECT_PAINT)) {
d70 1
a70 1
      ctx->state.vg.fill_paint = handle_to_paint(paint);
d73 1
a73 1
      ctx->state.vg.stroke_paint = handle_to_paint(paint);
a74 2

   ctx->state.dirty |= PAINT_DIRTY;
d88 1
a88 1
      paint = paint_to_handle(ctx->state.vg.fill_paint);
d90 1
a90 1
      paint = paint_to_handle(ctx->state.vg.stroke_paint);
d92 1
a92 1
   if (paint == paint_to_handle(ctx->default_paint))
a100 1
   struct vg_paint *p;
d107 1
a107 1
   if (!vg_object_is_valid(paint, VG_OBJECT_PAINT)) {
d111 4
a114 7

   p = handle_to_paint(paint);
   paint_set_colori(p, rgba);

   if (ctx->state.vg.fill_paint == p ||
       ctx->state.vg.stroke_paint == p)
      ctx->state.dirty |= PAINT_DIRTY;
d128 1
a128 1
   if (!vg_object_is_valid(paint, VG_OBJECT_PAINT)) {
d132 1
a132 1
   p = handle_to_paint(paint);
d142 1
a142 1
       !vg_context_is_object_valid(ctx, VG_OBJECT_PAINT, paint)) {
d148 1
a148 1
      paint_set_type(handle_to_paint(paint), VG_PAINT_TYPE_COLOR);
d152 1
a152 1
   if (!vg_context_is_object_valid(ctx, VG_OBJECT_IMAGE, pattern)) {
d158 2
a159 2
   if (!vg_object_is_valid(paint, VG_OBJECT_PAINT) ||
       !vg_object_is_valid(pattern, VG_OBJECT_IMAGE)) {
d163 2
a164 2
   paint_set_pattern(handle_to_paint(paint),
                     handle_to_image(pattern));
@


