head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.37;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2013.09.05.14.01.50;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.07;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.35;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.30;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.22;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#include "image.h"

#include "VG/openvg.h"

#include "vg_context.h"
#include "vg_translate.h"
#include "api_consts.h"
#include "api.h"
#include "handle.h"

#include "pipe/p_context.h"
#include "pipe/p_screen.h"
#include "util/u_inlines.h"
#include "util/u_tile.h"
#include "util/u_math.h"

static INLINE VGboolean supported_image_format(VGImageFormat format)
{
   switch(format) {
   case VG_sRGBX_8888:
   case VG_sRGBA_8888:
   case VG_sRGBA_8888_PRE:
   case VG_sRGB_565:
   case VG_sRGBA_5551:
   case VG_sRGBA_4444:
   case VG_sL_8:
   case VG_lRGBX_8888:
   case VG_lRGBA_8888:
   case VG_lRGBA_8888_PRE:
   case VG_lL_8:
   case VG_A_8:
   case VG_BW_1:
#ifdef OPENVG_VERSION_1_1
   case VG_A_1:
   case VG_A_4:
#endif
   case VG_sXRGB_8888:
   case VG_sARGB_8888:
   case VG_sARGB_8888_PRE:
   case VG_sARGB_1555:
   case VG_sARGB_4444:
   case VG_lXRGB_8888:
   case VG_lARGB_8888:
   case VG_lARGB_8888_PRE:
   case VG_sBGRX_8888:
   case VG_sBGRA_8888:
   case VG_sBGRA_8888_PRE:
   case VG_sBGR_565:
   case VG_sBGRA_5551:
   case VG_sBGRA_4444:
   case VG_lBGRX_8888:
   case VG_lBGRA_8888:
   case VG_lBGRA_8888_PRE:
   case VG_sXBGR_8888:
   case VG_sABGR_8888:
   case VG_sABGR_8888_PRE:
   case VG_sABGR_1555:
   case VG_sABGR_4444:
   case VG_lXBGR_8888:
   case VG_lABGR_8888:
   case VG_lABGR_8888_PRE:
      return VG_TRUE;
   default:
      return VG_FALSE;
   }
   return VG_FALSE;
}

VGImage vegaCreateImage(VGImageFormat format,
                        VGint width, VGint height,
                        VGbitfield allowedQuality)
{
   struct vg_context *ctx = vg_current_context();

   if (!supported_image_format(format)) {
      vg_set_error(ctx, VG_UNSUPPORTED_IMAGE_FORMAT_ERROR);
      return VG_INVALID_HANDLE;
   }
   if (width <= 0 || height <= 0) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return VG_INVALID_HANDLE;
   }
   if (width > vegaGeti(VG_MAX_IMAGE_WIDTH) ||
       height > vegaGeti(VG_MAX_IMAGE_HEIGHT)) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return VG_INVALID_HANDLE;
   }
   if (width * height > vegaGeti(VG_MAX_IMAGE_PIXELS)) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return VG_INVALID_HANDLE;
   }

   if (!(allowedQuality & ((VG_IMAGE_QUALITY_NONANTIALIASED |
                           VG_IMAGE_QUALITY_FASTER |
                           VG_IMAGE_QUALITY_BETTER)))) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return VG_INVALID_HANDLE;
   }

   return image_to_handle(image_create(format, width, height));
}

void vegaDestroyImage(VGImage image)
{
   struct vg_context *ctx = vg_current_context();
   struct vg_image *img = handle_to_image(image);

   if (image == VG_INVALID_HANDLE) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }
   if (!vg_object_is_valid(image, VG_OBJECT_IMAGE)) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }
   image_destroy(img);
}

void vegaClearImage(VGImage image,
                    VGint x, VGint y,
                    VGint width, VGint height)
{
   struct vg_context *ctx = vg_current_context();
   struct vg_image *img;

   if (image == VG_INVALID_HANDLE) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }
   if (width <= 0 || height <= 0) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }

   img = handle_to_image(image);

   if (x + width < 0 || y + height < 0)
      return;

   image_clear(img, x, y, width, height);

}

void vegaImageSubData(VGImage image,
                      const void * data,
                      VGint dataStride,
                      VGImageFormat dataFormat,
                      VGint x, VGint y,
                      VGint width, VGint height)
{
   struct vg_context *ctx = vg_current_context();
   struct vg_image *img;

   if (image == VG_INVALID_HANDLE) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }
   if (!supported_image_format(dataFormat)) {
      vg_set_error(ctx, VG_UNSUPPORTED_IMAGE_FORMAT_ERROR);
      return;
   }
   if (width <= 0 || height <= 0 || !data || !is_aligned(data)) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }

   img = handle_to_image(image);
   image_sub_data(img, data, dataStride, dataFormat,
                  x, y, width, height);
}

void vegaGetImageSubData(VGImage image,
                         void * data,
                         VGint dataStride,
                         VGImageFormat dataFormat,
                         VGint x, VGint y,
                         VGint width, VGint height)
{
   struct vg_context *ctx = vg_current_context();
   struct vg_image *img;

   if (image == VG_INVALID_HANDLE) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }
   if (!supported_image_format(dataFormat)) {
      vg_set_error(ctx, VG_UNSUPPORTED_IMAGE_FORMAT_ERROR);
      return;
   }
   if (width <= 0 || height <= 0 || !data || !is_aligned(data)) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }
   img = handle_to_image(image);
   image_get_sub_data(img, data, dataStride, dataFormat,
                      x, y, width, height);
}

VGImage vegaChildImage(VGImage parent,
                       VGint x, VGint y,
                       VGint width, VGint height)
{
   struct vg_context *ctx = vg_current_context();
   struct vg_image *p;

   if (parent == VG_INVALID_HANDLE ||
       !vg_context_is_object_valid(ctx, VG_OBJECT_IMAGE, parent) ||
       !vg_object_is_valid(parent, VG_OBJECT_IMAGE)) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return VG_INVALID_HANDLE;
   }
   if (width <= 0 || height <= 0 || x < 0 || y < 0) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return VG_INVALID_HANDLE;
   }
   p = handle_to_image(parent);
   if (x > p->width  || y > p->height) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return VG_INVALID_HANDLE;
   }
   if (x + width > p->width  || y + height > p->height) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return VG_INVALID_HANDLE;
   }

   return image_to_handle(image_child_image(p, x, y, width, height));
}

VGImage vegaGetParent(VGImage image)
{
   struct vg_context *ctx = vg_current_context();
   struct vg_image *img;

   if (image == VG_INVALID_HANDLE) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return VG_INVALID_HANDLE;
   }

   img = handle_to_image(image);
   if (img->parent)
      return image_to_handle(img->parent);
   else
      return image;
}

void vegaCopyImage(VGImage dst, VGint dx, VGint dy,
                   VGImage src, VGint sx, VGint sy,
                   VGint width, VGint height,
                   VGboolean dither)
{
   struct vg_context *ctx = vg_current_context();

   if (src == VG_INVALID_HANDLE || dst == VG_INVALID_HANDLE) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }

   if (width <= 0 || height <= 0) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }
   vg_validate_state(ctx);
   image_copy(handle_to_image(dst), dx, dy,
              handle_to_image(src), sx, sy,
              width, height, dither);
}

void vegaDrawImage(VGImage image)
{
   struct vg_context *ctx = vg_current_context();

   if (!ctx)
      return;

   if (image == VG_INVALID_HANDLE) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }

   vg_validate_state(ctx);
   image_draw(handle_to_image(image),
         &ctx->state.vg.image_user_to_surface_matrix);
}

void vegaSetPixels(VGint dx, VGint dy,
                   VGImage src, VGint sx, VGint sy,
                   VGint width, VGint height)
{
   struct vg_context *ctx = vg_current_context();

   vg_validate_state(ctx);

   if (src == VG_INVALID_HANDLE) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }
   if (width <= 0 || height <= 0) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }
   image_set_pixels(dx, dy, handle_to_image(src), sx, sy, width,
                    height);
}

void vegaGetPixels(VGImage dst, VGint dx, VGint dy,
                   VGint sx, VGint sy,
                   VGint width, VGint height)
{
   struct vg_context *ctx = vg_current_context();
   struct vg_image *img;

   if (dst == VG_INVALID_HANDLE) {
      vg_set_error(ctx, VG_BAD_HANDLE_ERROR);
      return;
   }
   if (width <= 0 || height <= 0) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }

   img = handle_to_image(dst);

   image_get_pixels(img, dx, dy,
                    sx, sy, width, height);
}

void vegaWritePixels(const void * data, VGint dataStride,
                     VGImageFormat dataFormat,
                     VGint dx, VGint dy,
                     VGint width, VGint height)
{
   struct vg_context *ctx = vg_current_context();

   if (!supported_image_format(dataFormat)) {
      vg_set_error(ctx, VG_UNSUPPORTED_IMAGE_FORMAT_ERROR);
      return;
   }
   if (!data || !is_aligned(data)) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }
   if (width <= 0 || height <= 0) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }

   vg_validate_state(ctx);
   {
      struct vg_image *img = image_create(dataFormat, width, height);
      image_sub_data(img, data, dataStride, dataFormat, 0, 0,
                     width, height);
#if 0
      struct matrix *matrix = &ctx->state.vg.image_user_to_surface_matrix;
      matrix_translate(matrix, dx, dy);
      image_draw(img);
      matrix_translate(matrix, -dx, -dy);
#else
      /* this looks like a better approach */
      image_set_pixels(dx, dy, img, 0, 0, width, height);
#endif
      image_destroy(img);
   }
}

void vegaReadPixels(void * data, VGint dataStride,
                    VGImageFormat dataFormat,
                    VGint sx, VGint sy,
                    VGint width, VGint height)
{
   struct vg_context *ctx = vg_current_context();
   struct pipe_context *pipe = ctx->pipe;

   struct st_framebuffer *stfb = ctx->draw_buffer;
   struct st_renderbuffer *strb = stfb->strb;

   VGfloat temp[VEGA_MAX_IMAGE_WIDTH][4];
   VGfloat *df = (VGfloat*)temp;
   VGint i;
   VGubyte *dst = (VGubyte *)data;
   VGint xoffset = 0, yoffset = 0;

   if (!supported_image_format(dataFormat)) {
      vg_set_error(ctx, VG_UNSUPPORTED_IMAGE_FORMAT_ERROR);
      return;
   }
   if (!data || !is_aligned(data)) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }
   if (width <= 0 || height <= 0) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }

   if (sx < 0) {
      xoffset = -sx;
      xoffset *= _vega_size_for_format(dataFormat);
      width += sx;
      sx = 0;
   }
   if (sy < 0) {
      yoffset = -sy;
      yoffset *= dataStride;
      height += sy;
      sy = 0;
   }

   if (sx + width > stfb->width || sy + height > stfb->height) {
      width = stfb->width - sx;
      height = stfb->height - sy;
      /* nothing to read */
      if (width <= 0 || height <= 0)
         return;
   }

   {
      VGint y = (stfb->height - sy) - 1, yStep = -1;
      struct pipe_transfer *transfer;
      void *map;

      map = pipe_transfer_map(pipe, strb->texture,  0, 0,
                              PIPE_TRANSFER_READ,
                              0, 0, sx + width, stfb->height - sy,
                              &transfer);

      /* Do a row at a time to flip image data vertically */
      for (i = 0; i < height; i++) {
#if 0
         debug_printf("%d-%d  == %d\n", sy, height, y);
#endif
         pipe_get_tile_rgba(transfer, map, sx, y, width, 1, df);
         y += yStep;
         _vega_pack_rgba_span_float(ctx, width, temp, dataFormat,
                                    dst + yoffset + xoffset);
         dst += dataStride;
      }

      pipe->transfer_unmap(pipe, transfer);
   }
}

void vegaCopyPixels(VGint dx, VGint dy,
                    VGint sx, VGint sy,
                    VGint width, VGint height)
{
   struct vg_context *ctx = vg_current_context();
   struct st_framebuffer *stfb = ctx->draw_buffer;
   struct st_renderbuffer *strb = stfb->strb;

   if (width <= 0 || height <= 0) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }

   /* do nothing if we copy from outside the fb */
   if (dx >= (VGint)stfb->width || dy >= (VGint)stfb->height ||
       sx >= (VGint)stfb->width || sy >= (VGint)stfb->height)
      return;

   vg_validate_state(ctx);
   /* make sure rendering has completed */
   vegaFinish();

   vg_copy_surface(ctx, strb->surface, dx, dy,
                   strb->surface, sx, sy, width, height);
}
@


1.4
log
@Merge Mesa 9.2.0
@
text
@@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d445 1
d447 4
a450 3
      transfer = pipe_get_transfer(pipe, strb->texture,  0, 0,
                                   PIPE_TRANSFER_READ,
                                   0, 0, sx + width, stfb->height - sy);
d457 1
a457 1
         pipe_get_tile_rgba(pipe, transfer, sx, y, width, 1, df);
d464 1
a464 1
      pipe->transfer_destroy(pipe, transfer);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d35 1
d109 2
a110 2
   if (width > vgGeti(VG_MAX_IMAGE_WIDTH) ||
       height > vgGeti(VG_MAX_IMAGE_HEIGHT)) {
d114 1
a114 1
   if (width * height > vgGeti(VG_MAX_IMAGE_PIXELS)) {
d126 1
a126 1
   return (VGImage)image_create(format, width, height);
d132 1
a132 1
   struct vg_image *img = (struct vg_image *)image;
d138 1
a138 1
   if (!vg_object_is_valid((void*)image, VG_OBJECT_IMAGE)) {
d161 1
a161 1
   img = (struct vg_image*)image;
d193 1
a193 1
   img = (struct vg_image*)(image);
d220 1
a220 1
   img = (struct vg_image*)image;
d233 2
a234 2
       !vg_context_is_object_valid(ctx, VG_OBJECT_IMAGE, (void*)parent) ||
       !vg_object_is_valid((void*)parent, VG_OBJECT_IMAGE)) {
d242 1
a242 1
   p = (struct vg_image *)parent;
d252 1
a252 1
   return (VGImage)image_child_image(p, x, y, width, height);
d265 1
a265 1
   img = (struct vg_image*)image;
d267 1
a267 1
      return (VGImage)img->parent;
d289 2
a290 2
   image_copy((struct vg_image*)dst, dx, dy,
              (struct vg_image*)src, sx, sy,
d307 1
a307 1
   image_draw((struct vg_image*)image,
d327 1
a327 1
   image_set_pixels(dx, dy, (struct vg_image*)src, sx, sy, width,
d347 1
a347 1
   img = (struct vg_image*)dst;
a358 1
   struct pipe_context *pipe = ctx->pipe;
a388 2
   /* make sure rendering has completed */
   pipe->flush(pipe, PIPE_FLUSH_RENDER_CACHE, NULL);
a420 2
   /* make sure rendering has completed */
   pipe->flush(pipe, PIPE_FLUSH_RENDER_CACHE, NULL);
d486 1
a486 1
   vgFinish();
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d34 1
a34 1
#include "image.h"
a38 1
#include "util/u_blit.h"
d40 1
a40 1
#include "util/u_memory.h"
d94 3
a96 3
VGImage vgCreateImage(VGImageFormat format,
                      VGint width, VGint height,
                      VGbitfield allowedQuality)
d128 1
a128 1
void vgDestroyImage(VGImage image)
d144 3
a146 3
void vgClearImage(VGImage image,
                  VGint x, VGint y,
                  VGint width, VGint height)
d169 6
a174 6
void vgImageSubData(VGImage image,
                    const void * data,
                    VGint dataStride,
                    VGImageFormat dataFormat,
                    VGint x, VGint y,
                    VGint width, VGint height)
d197 6
a202 6
void vgGetImageSubData(VGImage image,
                       void * data,
                       VGint dataStride,
                       VGImageFormat dataFormat,
                       VGint x, VGint y,
                       VGint width, VGint height)
d224 3
a226 3
VGImage vgChildImage(VGImage parent,
                     VGint x, VGint y,
                     VGint width, VGint height)
d254 1
a254 1
VGImage vgGetParent(VGImage image)
d271 4
a274 4
void vgCopyImage(VGImage dst, VGint dx, VGint dy,
                 VGImage src, VGint sx, VGint sy,
                 VGint width, VGint height,
                 VGboolean dither)
d293 1
a293 1
void vgDrawImage(VGImage image)
d306 2
a307 1
   image_draw((struct vg_image*)image);
d310 3
a312 3
void vgSetPixels(VGint dx, VGint dy,
                 VGImage src, VGint sx, VGint sy,
                 VGint width, VGint height)
d330 3
a332 3
void vgGetPixels(VGImage dst, VGint dx, VGint dy,
                 VGint sx, VGint sy,
                 VGint width, VGint height)
d352 4
a355 4
void vgWritePixels(const void * data, VGint dataStride,
                   VGImageFormat dataFormat,
                   VGint dx, VGint dy,
                   VGint width, VGint height)
d393 4
a396 4
void vgReadPixels(void * data, VGint dataStride,
                  VGImageFormat dataFormat,
                  VGint sx, VGint sy,
                  VGint width, VGint height)
a399 1
   struct pipe_screen *screen = pipe->screen;
a402 1
   struct pipe_framebuffer_state *fb = &ctx->state.g3d.fb;
a405 1
   VGint y = (fb->height - sy) - 1, yStep = -1;
d433 1
d436 8
a443 2
      y = (fb->height - sy) - 1;
      yoffset *= dataStride;
d447 1
d450 3
a452 3
      transfer = screen->get_tex_transfer(screen, strb->texture,  0, 0, 0,
                                          PIPE_TRANSFER_READ,
                                          0, 0, width, height);
d459 1
a459 1
         pipe_get_tile_rgba(transfer, sx, y, width, 1, df);
d466 1
a466 1
      screen->tex_transfer_destroy(transfer);
d470 3
a472 3
void vgCopyPixels(VGint dx, VGint dy,
                  VGint sx, VGint sy,
                  VGint width, VGint height)
d475 2
a476 2
   struct pipe_framebuffer_state *fb = &ctx->state.g3d.fb;
   struct st_renderbuffer *strb = ctx->draw_buffer->strb;
d484 2
a485 2
   if (dx >= (VGint)fb->width || dy >= (VGint)fb->height ||
       sx >= (VGint)fb->width || sy >= (VGint)fb->height)
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d34 1
a34 1
#include "api.h"
d39 1
d41 1
a41 1
#include "util/u_math.h"
d95 3
a97 3
VGImage vegaCreateImage(VGImageFormat format,
                        VGint width, VGint height,
                        VGbitfield allowedQuality)
d129 1
a129 1
void vegaDestroyImage(VGImage image)
d145 3
a147 3
void vegaClearImage(VGImage image,
                    VGint x, VGint y,
                    VGint width, VGint height)
d170 6
a175 6
void vegaImageSubData(VGImage image,
                      const void * data,
                      VGint dataStride,
                      VGImageFormat dataFormat,
                      VGint x, VGint y,
                      VGint width, VGint height)
d198 6
a203 6
void vegaGetImageSubData(VGImage image,
                         void * data,
                         VGint dataStride,
                         VGImageFormat dataFormat,
                         VGint x, VGint y,
                         VGint width, VGint height)
d225 3
a227 3
VGImage vegaChildImage(VGImage parent,
                       VGint x, VGint y,
                       VGint width, VGint height)
d255 1
a255 1
VGImage vegaGetParent(VGImage image)
d272 4
a275 4
void vegaCopyImage(VGImage dst, VGint dx, VGint dy,
                   VGImage src, VGint sx, VGint sy,
                   VGint width, VGint height,
                   VGboolean dither)
d294 1
a294 1
void vegaDrawImage(VGImage image)
d307 1
a307 2
   image_draw((struct vg_image*)image,
         &ctx->state.vg.image_user_to_surface_matrix);
d310 3
a312 3
void vegaSetPixels(VGint dx, VGint dy,
                   VGImage src, VGint sx, VGint sy,
                   VGint width, VGint height)
d330 3
a332 3
void vegaGetPixels(VGImage dst, VGint dx, VGint dy,
                   VGint sx, VGint sy,
                   VGint width, VGint height)
d352 4
a355 4
void vegaWritePixels(const void * data, VGint dataStride,
                     VGImageFormat dataFormat,
                     VGint dx, VGint dy,
                     VGint width, VGint height)
d393 4
a396 4
void vegaReadPixels(void * data, VGint dataStride,
                    VGImageFormat dataFormat,
                    VGint sx, VGint sy,
                    VGint width, VGint height)
d400 1
d404 1
d408 1
a435 1
      yoffset *= dataStride;
d438 2
a439 8
   }

   if (sx + width > stfb->width || sy + height > stfb->height) {
      width = stfb->width - sx;
      height = stfb->height - sy;
      /* nothing to read */
      if (width <= 0 || height <= 0)
         return;
a442 1
      VGint y = (stfb->height - sy) - 1, yStep = -1;
d445 3
a447 3
      transfer = pipe_get_transfer(pipe, strb->texture,  0, 0,
                                   PIPE_TRANSFER_READ,
                                   0, 0, sx + width, stfb->height - sy);
d454 1
a454 1
         pipe_get_tile_rgba(pipe, transfer, sx, y, width, 1, df);
d461 1
a461 1
      pipe->transfer_destroy(pipe, transfer);
d465 3
a467 3
void vegaCopyPixels(VGint dx, VGint dy,
                    VGint sx, VGint sy,
                    VGint width, VGint height)
d470 2
a471 2
   struct st_framebuffer *stfb = ctx->draw_buffer;
   struct st_renderbuffer *strb = stfb->strb;
d479 2
a480 2
   if (dx >= (VGint)stfb->width || dy >= (VGint)stfb->height ||
       sx >= (VGint)stfb->width || sy >= (VGint)stfb->height)
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a34 1
#include "handle.h"
d108 2
a109 2
   if (width > vegaGeti(VG_MAX_IMAGE_WIDTH) ||
       height > vegaGeti(VG_MAX_IMAGE_HEIGHT)) {
d113 1
a113 1
   if (width * height > vegaGeti(VG_MAX_IMAGE_PIXELS)) {
d125 1
a125 1
   return image_to_handle(image_create(format, width, height));
d131 1
a131 1
   struct vg_image *img = handle_to_image(image);
d137 1
a137 1
   if (!vg_object_is_valid(image, VG_OBJECT_IMAGE)) {
d160 1
a160 1
   img = handle_to_image(image);
d192 1
a192 1
   img = handle_to_image(image);
d219 1
a219 1
   img = handle_to_image(image);
d232 2
a233 2
       !vg_context_is_object_valid(ctx, VG_OBJECT_IMAGE, parent) ||
       !vg_object_is_valid(parent, VG_OBJECT_IMAGE)) {
d241 1
a241 1
   p = handle_to_image(parent);
d251 1
a251 1
   return image_to_handle(image_child_image(p, x, y, width, height));
d264 1
a264 1
   img = handle_to_image(image);
d266 1
a266 1
      return image_to_handle(img->parent);
d288 2
a289 2
   image_copy(handle_to_image(dst), dx, dy,
              handle_to_image(src), sx, sy,
d306 1
a306 1
   image_draw(handle_to_image(image),
d326 1
a326 1
   image_set_pixels(dx, dy, handle_to_image(src), sx, sy, width,
d346 1
a346 1
   img = handle_to_image(dst);
d358 1
d389 2
d423 2
a448 1
      void *map;
d450 3
a452 4
      map = pipe_transfer_map(pipe, strb->texture,  0, 0,
                              PIPE_TRANSFER_READ,
                              0, 0, sx + width, stfb->height - sy,
                              &transfer);
d459 1
a459 1
         pipe_get_tile_rgba(transfer, map, sx, y, width, 1, df);
d466 1
a466 1
      pipe->transfer_unmap(pipe, transfer);
d490 1
a490 1
   vegaFinish();
@


