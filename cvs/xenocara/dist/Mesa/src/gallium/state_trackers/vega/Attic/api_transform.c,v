head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.16
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.14
	OPENBSD_5_7_BASE:1.2
	v10_2_9:1.1.1.1
	v10_4_3:1.1.1.1
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	v10_2_3:1.1.1.1
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.12.23.05.17.37;	author jsg;	state dead;
branches;
next	1.2;
commitid	TnlogFl9nOv2eaRf;

1.2
date	2011.10.23.13.37.35;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#include "VG/openvg.h"

#include "vg_context.h"

#include "matrix.h"
#include "api.h"

void vegaLoadIdentity(void)
{
   struct vg_context *ctx = vg_current_context();
   struct  matrix *mat = vg_state_matrix(&ctx->state.vg);
   matrix_load_identity(mat);
}

void vegaLoadMatrix(const VGfloat * m)
{
   struct vg_context *ctx = vg_current_context();
   struct  matrix *mat;

   if (!ctx)
      return;

   if (!m || !is_aligned(m)) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }

   mat = vg_state_matrix(&ctx->state.vg);
   matrix_init(mat, m);
   if (!matrix_is_affine(mat)) {
      if (ctx->state.vg.matrix_mode != VG_MATRIX_IMAGE_USER_TO_SURFACE) {
         matrix_make_affine(mat);
      }
   }
}

void vegaGetMatrix(VGfloat * m)
{
   struct vg_context *ctx = vg_current_context();
   struct matrix *mat;

   if (!ctx)
      return;

   if (!m || !is_aligned(m)) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }

   mat = vg_state_matrix(&ctx->state.vg);
   memcpy(m, mat->m, sizeof(VGfloat)*9);
}

void vegaMultMatrix(const VGfloat * m)
{
   struct vg_context *ctx = vg_current_context();
   struct matrix *dst, src;

   if (!ctx)
      return;

   if (!m || !is_aligned(m)) {
      vg_set_error(ctx, VG_ILLEGAL_ARGUMENT_ERROR);
      return;
   }
   matrix_init(&src, m);
   dst = vg_state_matrix(&ctx->state.vg);
   if (!matrix_is_affine(&src)) {
      if (ctx->state.vg.matrix_mode != VG_MATRIX_IMAGE_USER_TO_SURFACE) {
         matrix_make_affine(&src);
      }
   }
   matrix_mult(dst, &src);

}

void vegaTranslate(VGfloat tx, VGfloat ty)
{
   struct vg_context *ctx = vg_current_context();
   struct matrix *dst = vg_state_matrix(&ctx->state.vg);
   matrix_translate(dst, tx, ty);
}

void vegaScale(VGfloat sx, VGfloat sy)
{
   struct vg_context *ctx = vg_current_context();
   struct matrix *dst = vg_state_matrix(&ctx->state.vg);
   matrix_scale(dst, sx, sy);
}

void vegaShear(VGfloat shx, VGfloat shy)
{
   struct vg_context *ctx = vg_current_context();
   struct matrix *dst = vg_state_matrix(&ctx->state.vg);
   matrix_shear(dst, shx, shy);
}

void vegaRotate(VGfloat angle)
{
   struct vg_context *ctx = vg_current_context();
   struct matrix *dst = vg_state_matrix(&ctx->state.vg);
   matrix_rotate(dst, angle);
}
@


1.2
log
@Merge Mesa 7.10.3
@
text
@@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d32 1
d34 1
a34 1
void vgLoadIdentity(void)
d41 1
a41 1
void vgLoadMatrix(const VGfloat * m)
d63 1
a63 1
void vgGetMatrix(VGfloat * m)
d80 1
a80 1
void vgMultMatrix(const VGfloat * m)
d103 1
a103 1
void vgTranslate(VGfloat tx, VGfloat ty)
d110 1
a110 1
void vgScale(VGfloat sx, VGfloat sy)
d117 1
a117 1
void vgShear(VGfloat shx, VGfloat shy)
d124 1
a124 1
void vgRotate(VGfloat angle)
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a31 1
#include "api.h"
d33 1
a33 1
void vegaLoadIdentity(void)
d40 1
a40 1
void vegaLoadMatrix(const VGfloat * m)
d62 1
a62 1
void vegaGetMatrix(VGfloat * m)
d79 1
a79 1
void vegaMultMatrix(const VGfloat * m)
d102 1
a102 1
void vegaTranslate(VGfloat tx, VGfloat ty)
d109 1
a109 1
void vegaScale(VGfloat sx, VGfloat sy)
d116 1
a116 1
void vegaShear(VGfloat shx, VGfloat shy)
d123 1
a123 1
void vegaRotate(VGfloat angle)
@

