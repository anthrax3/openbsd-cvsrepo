head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.16
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.14
	OPENBSD_5_7_BASE:1.2
	v10_2_9:1.1.1.1
	v10_4_3:1.1.1.1
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	v10_2_3:1.1.1.1
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.12.23.05.17.37;	author jsg;	state dead;
branches;
next	1.2;
commitid	TnlogFl9nOv2eaRf;

1.2
date	2011.10.23.13.37.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009 VMware, Inc.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#ifndef UTIL_ARRAY_H
#define UTIL_ARRAY_H

#include "util/u_memory.h"

#define DEFAULT_ARRAY_SIZE 256

struct array {
   VGint          datatype_size;
   void          *data;
   VGint          size;
   VGint          num_elements;
};

static INLINE struct array *array_create(VGint datatype_size)
{
   struct array *array = CALLOC_STRUCT(array);
   array->datatype_size = datatype_size;

   array->size = DEFAULT_ARRAY_SIZE;
   array->data = malloc(array->size * array->datatype_size);

   return array;
}


static INLINE struct array *array_create_size(VGint datatype_size, VGint size)
{
   struct array *array = CALLOC_STRUCT(array);
   array->datatype_size = datatype_size;

   array->size = size;
   array->data = malloc(array->size * array->datatype_size);

   return array;
}

static INLINE void array_destroy(struct array *array)
{
   if (array)
      free(array->data);
   FREE(array);
}

static INLINE void array_resize(struct array *array, int num)
{
   VGint size = array->datatype_size * num;
   void *data = malloc(size);
   memcpy(data, array->data, array->size * array->datatype_size);
   free(array->data);
   array->data = data;
   array->size = num;
   array->num_elements = (array->num_elements > num) ? num :
                         array->num_elements;
}

static INLINE void array_append_data(struct array *array,
                              const void *data, int num_elements)
{
   VGbyte *adata;

   while (array->num_elements + num_elements > array->size) {
      array_resize(array, (array->num_elements + num_elements) * 1.5);
   }
   adata = (VGbyte *)array->data;
   memcpy(adata + (array->num_elements * array->datatype_size), data,
          num_elements * array->datatype_size);
   array->num_elements += num_elements;
}

static INLINE void array_change_data(struct array *array,
                              const void *data,
                              int start_idx,
                              int num_elements)
{
   VGbyte *adata = (VGbyte *)array->data;
   memcpy(adata + (start_idx * array->datatype_size), data,
          num_elements * array->datatype_size);
}

static INLINE void array_remove_element(struct array *array,
                                        int idx)
{
   VGbyte *adata = (VGbyte *)array->data;
   memmove(adata + (idx * array->datatype_size),
           adata + ((idx + 1) * array->datatype_size),
           (array->num_elements - idx - 1) * array->datatype_size);
   --array->num_elements;
}

static INLINE void array_reset(struct array *array)
{
   array->num_elements = 0;
}

#endif
@


1.2
log
@Merge Mesa 7.10.3
@
text
@@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d68 1
a68 1
   free(array);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d68 1
a68 1
   FREE(array);
@

