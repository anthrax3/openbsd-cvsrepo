head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#include "core/event.hpp"
#include "pipe/p_screen.h"

using namespace clover;

_cl_event::_cl_event(clover::context &ctx,
                     std::vector<clover::event *> deps,
                     action action_ok, action action_fail) :
   ctx(ctx), __status(0), wait_count(1),
   action_ok(action_ok), action_fail(action_fail) {
   for (auto ev : deps)
      ev->chain(this);
}

_cl_event::~_cl_event() {
}

void
_cl_event::trigger() {
   if (!--wait_count) {
      action_ok(*this);

      while (!__chain.empty()) {
         __chain.back()->trigger();
         __chain.pop_back();
      }
   }
}

void
_cl_event::abort(cl_int status) {
   __status = status;
   action_fail(*this);

   while (!__chain.empty()) {
      __chain.back()->abort(status);
      __chain.pop_back();
   }
}

bool
_cl_event::signalled() const {
   return !wait_count;
}

void
_cl_event::chain(clover::event *ev) {
   if (wait_count) {
      ev->wait_count++;
      __chain.push_back(ev);
      ev->deps.push_back(this);
   }
}

hard_event::hard_event(clover::command_queue &q, cl_command_type command,
                       std::vector<clover::event *> deps, action action) :
   _cl_event(q.ctx, deps, action, [](event &ev){}),
   __queue(q), __command(command), __fence(NULL) {
   q.sequence(this);
   trigger();
}

hard_event::~hard_event() {
   pipe_screen *screen = queue()->dev.pipe;
   screen->fence_reference(screen, &__fence, NULL);
}

cl_int
hard_event::status() const {
   pipe_screen *screen = queue()->dev.pipe;

   if (__status < 0)
      return __status;

   else if (!__fence)
      return CL_QUEUED;

   else if (!screen->fence_signalled(screen, __fence))
      return CL_SUBMITTED;

   else
      return CL_COMPLETE;
}

cl_command_queue
hard_event::queue() const {
   return &__queue;
}

cl_command_type
hard_event::command() const {
   return __command;
}

void
hard_event::wait() const {
   pipe_screen *screen = queue()->dev.pipe;

   if (status() == CL_QUEUED)
      queue()->flush();

   if (!__fence ||
       !screen->fence_finish(screen, __fence, PIPE_TIMEOUT_INFINITE))
      throw error(CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST);
}

void
hard_event::fence(pipe_fence_handle *fence) {
   pipe_screen *screen = queue()->dev.pipe;
   screen->fence_reference(screen, &__fence, fence);
}

soft_event::soft_event(clover::context &ctx,
                       std::vector<clover::event *> deps,
                       bool __trigger, action action) :
   _cl_event(ctx, deps, action, action) {
   if (__trigger)
      trigger();
}

cl_int
soft_event::status() const {
   if (__status < 0)
      return __status;

   else if (!signalled() ||
            any_of([](const ref_ptr<event> &ev) {
                  return ev->status() != CL_COMPLETE;
               }, deps.begin(), deps.end()))
      return CL_SUBMITTED;

   else
      return CL_COMPLETE;
}

cl_command_queue
soft_event::queue() const {
   return NULL;
}

cl_command_type
soft_event::command() const {
   return CL_COMMAND_USER;
}

void
soft_event::wait() const {
   for (auto ev : deps)
      ev->wait();

   if (status() != CL_COMPLETE)
      throw error(CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d28 4
a31 3
event::event(clover::context &ctx, const ref_vector<event> &deps,
             action action_ok, action action_fail) :
   context(ctx), _status(0), wait_count(1),
d33 2
a34 2
   for (auto &ev : deps)
      ev.chain(*this);
d37 1
a37 1
event::~event() {
d41 1
a41 1
event::trigger() {
d45 3
a47 3
      while (!_chain.empty()) {
         _chain.back()().trigger();
         _chain.pop_back();
d53 2
a54 2
event::abort(cl_int status) {
   _status = status;
d57 3
a59 3
   while (!_chain.empty()) {
      _chain.back()().abort(status);
      _chain.pop_back();
d64 1
a64 1
event::signalled() const {
d69 1
a69 1
event::chain(event &ev) {
d71 3
a73 2
      ev.wait_count++;
      _chain.push_back(ev);
a74 1
   ev.deps.push_back(*this);
d77 5
a81 8
hard_event::hard_event(command_queue &q, cl_command_type command,
                       const ref_vector<event> &deps, action action) :
   event(q.context(), deps, profile(q, action), [](event &ev){}),
   _queue(q), _command(command), _fence(NULL) {
   if (q.profiling_enabled())
      _time_queued = timestamp::current(q);

   q.sequence(*this);
d86 2
a87 2
   pipe_screen *screen = queue()->device().pipe;
   screen->fence_reference(screen, &_fence, NULL);
d92 1
a92 1
   pipe_screen *screen = queue()->device().pipe;
d94 2
a95 2
   if (_status < 0)
      return _status;
d97 1
a97 1
   else if (!_fence)
d100 1
a100 1
   else if (!screen->fence_signalled(screen, _fence))
d107 1
a107 1
command_queue *
d109 1
a109 1
   return &_queue();
d114 1
a114 1
   return _command;
d119 1
a119 1
   pipe_screen *screen = queue()->device().pipe;
d124 2
a125 2
   if (!_fence ||
       !screen->fence_finish(screen, _fence, PIPE_TIMEOUT_INFINITE))
a128 20
const lazy<cl_ulong> &
hard_event::time_queued() const {
   return _time_queued;
}

const lazy<cl_ulong> &
hard_event::time_submit() const {
   return _time_submit;
}

const lazy<cl_ulong> &
hard_event::time_start() const {
   return _time_start;
}

const lazy<cl_ulong> &
hard_event::time_end() const {
   return _time_end;
}

d131 2
a132 21
   pipe_screen *screen = queue()->device().pipe;
   screen->fence_reference(screen, &_fence, fence);
}

event::action
hard_event::profile(command_queue &q, const action &action) const {
   if (q.profiling_enabled()) {
      return [&q, action] (event &ev) {
         auto &hev = static_cast<hard_event &>(ev);

         hev._time_submit = timestamp::current(q);
         hev._time_start = timestamp::query(q);

         action(ev);

         hev._time_end = timestamp::query(q);
      };

   } else {
      return action;
   }
d135 5
a139 4
soft_event::soft_event(clover::context &ctx, const ref_vector<event> &deps,
                       bool _trigger, action action) :
   event(ctx, deps, action, action) {
   if (_trigger)
d145 2
a146 2
   if (_status < 0)
      return _status;
d149 3
a151 3
            any_of([](const event &ev) {
                  return ev.status() != CL_COMPLETE;
               }, deps))
d158 1
a158 1
command_queue *
d170 2
a171 2
   for (event &ev : deps)
      ev.wait();
@

