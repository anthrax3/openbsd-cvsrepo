head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#ifndef __CORE_CONTEXT_HPP__
#define __CORE_CONTEXT_HPP__

#include "core/base.hpp"
#include "core/device.hpp"

namespace clover {
   typedef struct _cl_context context;
}

struct _cl_context : public clover::ref_counter {
public:
   _cl_context(const std::vector<cl_context_properties> &props,
               const std::vector<clover::device *> &devs);
   _cl_context(const _cl_context &ctx) = delete;

   bool has_device(clover::device *dev) const;

   const std::vector<cl_context_properties> &props() const {
      return __props;
   }

   const std::vector<clover::device *> devs;

private:
   std::vector<cl_context_properties> __props;
};

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d23 2
a24 2
#ifndef CLOVER_CORE_CONTEXT_HPP
#define CLOVER_CORE_CONTEXT_HPP
d26 1
a26 1
#include "core/object.hpp"
a27 1
#include "core/property.hpp"
d30 1
a30 29
   class context : public ref_counter, public _cl_context {
   private:
      typedef adaptor_range<
            evals, const std::vector<intrusive_ref<device>> &
         > device_range;
      typedef clover::property_list<cl_context_properties> property_list;

   public:
      context(const property_list &props, const ref_vector<device> &devs);

      context(const context &ctx) = delete;
      context &
      operator=(const context &ctx) = delete;

      bool
      operator==(const context &ctx) const;
      bool
      operator!=(const context &ctx) const;

      const property_list &
      properties() const;

      device_range
      devices() const;

   private:
      property_list props;
      const std::vector<intrusive_ref<device>> devs;
   };
d32 18
@

