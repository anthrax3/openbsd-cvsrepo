head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#ifndef __CORE_QUEUE_HPP__
#define __CORE_QUEUE_HPP__

#include "core/base.hpp"
#include "core/context.hpp"
#include "pipe/p_context.h"

namespace clover {
   typedef struct _cl_command_queue command_queue;
   class resource;
   class mapping;
   class hard_event;
}

struct _cl_command_queue : public clover::ref_counter {
public:
   _cl_command_queue(clover::context &ctx, clover::device &dev,
                     cl_command_queue_properties props);
   _cl_command_queue(const _cl_command_queue &q) = delete;
   ~_cl_command_queue();

   void flush();

   cl_command_queue_properties props() const {
      return __props;
   }

   clover::context &ctx;
   clover::device &dev;

   friend class clover::resource;
   friend class clover::root_resource;
   friend class clover::mapping;
   friend class clover::hard_event;
   friend struct _cl_sampler;
   friend struct _cl_kernel;

private:
   /// Serialize a hardware event with respect to the previous ones,
   /// and push it to the pending list.
   void sequence(clover::hard_event *ev);

   cl_command_queue_properties __props;
   pipe_context *pipe;

   typedef clover::ref_ptr<clover::hard_event> event_ptr;
   std::vector<event_ptr> queued_events;
};

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d23 2
a24 2
#ifndef CLOVER_CORE_QUEUE_HPP
#define CLOVER_CORE_QUEUE_HPP
d26 1
a26 3
#include <deque>

#include "core/object.hpp"
a27 1
#include "core/timestamp.hpp"
d31 1
d35 1
d37 34
a70 37
   class command_queue : public ref_counter, public _cl_command_queue {
   public:
      command_queue(clover::context &ctx, clover::device &dev,
                    cl_command_queue_properties props);
      ~command_queue();

      command_queue(const command_queue &q) = delete;
      command_queue &
      operator=(const command_queue &q) = delete;

      void flush();

      cl_command_queue_properties properties() const;
      bool profiling_enabled() const;

      const intrusive_ref<clover::context> context;
      const intrusive_ref<clover::device> device;

      friend class resource;
      friend class root_resource;
      friend class mapping;
      friend class hard_event;
      friend class sampler;
      friend class kernel;
      friend class clover::timestamp::query;
      friend class clover::timestamp::current;

   private:
      /// Serialize a hardware event with respect to the previous ones,
      /// and push it to the pending list.
      void sequence(hard_event &ev);

      cl_command_queue_properties props;
      pipe_context *pipe;
      std::deque<intrusive_ref<hard_event>> queued_events;
   };
}
@

