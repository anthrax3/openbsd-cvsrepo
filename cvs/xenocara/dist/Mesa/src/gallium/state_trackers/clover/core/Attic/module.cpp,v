head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.09.10;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.46.21;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#include <type_traits>
#include <algorithm>

#include "core/module.hpp"

using namespace clover;

namespace {
   template<typename T, typename = void>
   struct __serializer;

   /// Serialize the specified object.
   template<typename T>
   void
   __proc(compat::ostream &os, const T &x) {
      __serializer<T>::proc(os, x);
   }

   /// Deserialize the specified object.
   template<typename T>
   void
   __proc(compat::istream &is, T &x) {
      __serializer<T>::proc(is, x);
   }

   template<typename T>
   T
   __proc(compat::istream &is) {
      T x;
      __serializer<T>::proc(is, x);
      return x;
   }

   /// (De)serialize a scalar value.
   template<typename T>
   struct __serializer<T, typename std::enable_if<
                             std::is_scalar<T>::value>::type> {
      static void
      proc(compat::ostream &os, const T &x) {
         os.write(reinterpret_cast<const char *>(&x), sizeof(x));
      }

      static void
      proc(compat::istream &is, T &x) {
         is.read(reinterpret_cast<char *>(&x), sizeof(x));
      }
   };

   /// (De)serialize a vector.
   template<typename T>
   struct __serializer<compat::vector<T>> {
      static void
      proc(compat::ostream &os, const compat::vector<T> &v) {
         __proc<uint32_t>(os, v.size());

         for (size_t i = 0; i < v.size(); i++)
            __proc<T>(os, v[i]);
      }

      static void
      proc(compat::istream &is, compat::vector<T> &v) {
         v.reserve(__proc<uint32_t>(is));

         for (size_t i = 0; i < v.size(); i++)
            new(&v[i]) T(__proc<T>(is));
      }
   };

   /// (De)serialize a module::section.
   template<>
   struct __serializer<module::section> {
      template<typename S, typename QT>
      static void
      proc(S &s, QT &x) {
         __proc(s, x.id);
         __proc(s, x.type);
         __proc(s, x.size);
         __proc(s, x.data);
      }
   };

   /// (De)serialize a module::argument.
   template<>
   struct __serializer<module::argument> {
      template<typename S, typename QT>
      static void
      proc(S &s, QT &x) {
         __proc(s, x.type);
         __proc(s, x.size);
      }
   };

   /// (De)serialize a module::symbol.
   template<>
   struct __serializer<module::symbol> {
      template<typename S, typename QT>
      static void
      proc(S &s, QT &x) {
         __proc(s, x.name);
         __proc(s, x.section);
         __proc(s, x.offset);
         __proc(s, x.args);
      }
   };

   /// (De)serialize a module.
   template<>
   struct __serializer<module> {
      template<typename S, typename QT>
      static void
      proc(S &s, QT &x) {
         __proc(s, x.syms);
         __proc(s, x.secs);
      }
   };
};

namespace clover {
   void
   module::serialize(compat::ostream &os) const {
      __proc(os, *this);
   }

   module
   module::deserialize(compat::istream &is) {
      return __proc<module>(is);
   }

   const module::symbol &
   module::sym(compat::string name) const {
      auto it = std::find_if(syms.begin(), syms.end(), [&](const symbol &x) {
            return compat::string(x.name) == name;
         });

      if (it == syms.end())
         throw noent_error();

      return *it;
   }

   const module::section &
   module::sec(typename section::type type) const {
      auto it = std::find_if(secs.begin(), secs.end(), [&](const section &x) {
            return x.type == type;
         });

      if (it == secs.end())
         throw noent_error();

      return *it;
   }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d24 1
d32 1
a32 1
   struct _serializer;
d37 2
a38 2
   _proc(compat::ostream &os, const T &x) {
      _serializer<T>::proc(os, x);
d44 2
a45 2
   _proc(compat::istream &is, T &x) {
      _serializer<T>::proc(is, x);
d50 1
a50 1
   _proc(compat::istream &is) {
d52 1
a52 1
      _serializer<T>::proc(is, x);
d58 2
a59 2
   struct _serializer<T, typename std::enable_if<
                            std::is_scalar<T>::value>::type> {
d73 1
a73 1
   struct _serializer<compat::vector<T>> {
d76 1
a76 1
         _proc<uint32_t>(os, v.size());
d79 1
a79 1
            _proc<T>(os, v[i]);
d84 1
a84 1
         v.reserve(_proc<uint32_t>(is));
d87 1
a87 1
            new(&v[i]) T(_proc<T>(is));
d93 1
a93 1
   struct _serializer<module::section> {
d97 4
a100 4
         _proc(s, x.id);
         _proc(s, x.type);
         _proc(s, x.size);
         _proc(s, x.data);
d106 1
a106 1
   struct _serializer<module::argument> {
d110 2
a111 5
         _proc(s, x.type);
         _proc(s, x.size);
         _proc(s, x.target_size);
         _proc(s, x.target_align);
         _proc(s, x.ext_type);
d117 1
a117 1
   struct _serializer<module::symbol> {
d121 4
a124 4
         _proc(s, x.name);
         _proc(s, x.section);
         _proc(s, x.offset);
         _proc(s, x.args);
d130 1
a130 1
   struct _serializer<module> {
d134 2
a135 2
         _proc(s, x.syms);
         _proc(s, x.secs);
d143 1
a143 1
      _proc(os, *this);
d148 25
a172 1
      return _proc<module>(is);
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@a54 7
   /// Calculate the size of the specified object.
   template<typename T>
   void
   _proc(module::size_t &sz, const T &x) {
      _serializer<T>::proc(sz, x);
   }

a67 5

      static void
      proc(module::size_t &sz, const T &x) {
         sz += sizeof(x);
      }
d72 1
a72 3
   struct _serializer<compat::vector<T>,
                      typename std::enable_if<
                         !std::is_scalar<T>::value>::type> {
d83 1
a83 1
         v.resize(_proc<uint32_t>(is));
a87 32

      static void
      proc(module::size_t &sz, const compat::vector<T> &v) {
         sz += sizeof(uint32_t);

         for (size_t i = 0; i < v.size(); i++)
            _proc<T>(sz, v[i]);
      }
   };

   template<typename T>
   struct _serializer<compat::vector<T>,
                      typename std::enable_if<
                         std::is_scalar<T>::value>::type> {
      static void
      proc(compat::ostream &os, const compat::vector<T> &v) {
         _proc<uint32_t>(os, v.size());
         os.write(reinterpret_cast<const char *>(v.begin()),
                  v.size() * sizeof(T));
      }

      static void
      proc(compat::istream &is, compat::vector<T> &v) {
         v.resize(_proc<uint32_t>(is));
         is.read(reinterpret_cast<char *>(v.begin()),
                 v.size() * sizeof(T));
      }

      static void
      proc(module::size_t &sz, const compat::vector<T> &v) {
         sz += sizeof(uint32_t) + sizeof(T) * v.size();
      }
a113 1
         _proc(s, x.semantic);
a150 7
   }

   module::size_t
   module::size() const {
      size_t sz = 0;
      _proc(sz, *this);
      return sz;
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d55 7
d75 5
d84 3
a86 1
   struct _serializer<compat::vector<T>> {
d97 1
a97 1
         v.reserve(_proc<uint32_t>(is));
d102 32
d160 1
d198 7
@


