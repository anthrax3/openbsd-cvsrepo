head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#include <algorithm>

#include "core/queue.hpp"
#include "core/event.hpp"
#include "pipe/p_screen.h"
#include "pipe/p_context.h"

using namespace clover;

_cl_command_queue::_cl_command_queue(context &ctx, device &dev,
                                     cl_command_queue_properties props) :
   ctx(ctx), dev(dev), __props(props) {
   pipe = dev.pipe->context_create(dev.pipe, NULL);
   if (!pipe)
      throw error(CL_INVALID_DEVICE);
}

_cl_command_queue::~_cl_command_queue() {
   pipe->destroy(pipe);
}

void
_cl_command_queue::flush() {
   pipe_screen *screen = dev.pipe;
   pipe_fence_handle *fence = NULL;

   if (!queued_events.empty()) {
      // Find out which events have already been signalled.
      auto first = queued_events.begin();
      auto last = std::find_if(queued_events.begin(), queued_events.end(),
                               [](event_ptr &ev) { return !ev->signalled(); });

      // Flush and fence them.
      pipe->flush(pipe, &fence, 0);
      std::for_each(first, last, [&](event_ptr &ev) { ev->fence(fence); });
      screen->fence_reference(screen, &fence, NULL);
      queued_events.erase(first, last);
   }
}

void
_cl_command_queue::sequence(clover::hard_event *ev) {
   if (!queued_events.empty())
      queued_events.back()->chain(ev);

   queued_events.push_back(ev);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d23 2
d32 3
a34 3
command_queue::command_queue(clover::context &ctx, clover::device &dev,
                             cl_command_queue_properties props) :
   context(ctx), device(dev), props(props) {
d40 1
a40 1
command_queue::~command_queue() {
d45 2
a46 2
command_queue::flush() {
   pipe_screen *screen = device().pipe;
d50 6
d57 1
a57 7

      while (!queued_events.empty() &&
             queued_events.front()().signalled()) {
         queued_events.front()().fence(fence);
         queued_events.pop_front();
      }

d59 1
a62 10
cl_command_queue_properties
command_queue::properties() const {
   return props;
}

bool
command_queue::profiling_enabled() const {
   return props & CL_QUEUE_PROFILING_ENABLE;
}

d64 1
a64 1
command_queue::sequence(hard_event &ev) {
d66 1
a66 1
      queued_events.back()().chain(ev);
@

