head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.10;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.10;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.09.08;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.46.20;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#include "api/util.hpp"
#include "core/sampler.hpp"

using namespace clover;

PUBLIC cl_sampler
clCreateSampler(cl_context ctx, cl_bool norm_mode,
                cl_addressing_mode addr_mode, cl_filter_mode filter_mode,
                cl_int *errcode_ret) try {
   if (!ctx)
      throw error(CL_INVALID_CONTEXT);

   ret_error(errcode_ret, CL_SUCCESS);
   return new sampler(*ctx, norm_mode, addr_mode, filter_mode);

} catch (error &e) {
   ret_error(errcode_ret, e);
   return NULL;
}

PUBLIC cl_int
clRetainSampler(cl_sampler s) {
   if (!s)
      throw error(CL_INVALID_SAMPLER);

   s->retain();
   return CL_SUCCESS;
}

PUBLIC cl_int
clReleaseSampler(cl_sampler s) {
   if (!s)
      throw error(CL_INVALID_SAMPLER);

   if (s->release())
      delete s;

   return CL_SUCCESS;
}

PUBLIC cl_int
clGetSamplerInfo(cl_sampler s, cl_sampler_info param,
                 size_t size, void *buf, size_t *size_ret) {
   if (!s)
      throw error(CL_INVALID_SAMPLER);

   switch (param) {
   case CL_SAMPLER_REFERENCE_COUNT:
      return scalar_property<cl_uint>(buf, size, size_ret, s->ref_count());

   case CL_SAMPLER_CONTEXT:
      return scalar_property<cl_context>(buf, size, size_ret, &s->ctx);

   case CL_SAMPLER_NORMALIZED_COORDS:
      return scalar_property<cl_bool>(buf, size, size_ret, s->norm_mode());

   case CL_SAMPLER_ADDRESSING_MODE:
      return scalar_property<cl_addressing_mode>(buf, size, size_ret,
                                                 s->addr_mode());

   case CL_SAMPLER_FILTER_MODE:
      return scalar_property<cl_filter_mode>(buf, size, size_ret,
                                             s->filter_mode());

   default:
      return CL_INVALID_VALUE;
   }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d28 2
a29 2
CLOVER_API cl_sampler
clCreateSampler(cl_context d_ctx, cl_bool norm_mode,
d31 3
a33 2
                cl_int *r_errcode) try {
   auto &ctx = obj(d_ctx);
d35 2
a36 2
   ret_error(r_errcode, CL_SUCCESS);
   return new sampler(ctx, norm_mode, addr_mode, filter_mode);
d39 1
a39 1
   ret_error(r_errcode, e);
d43 6
a48 3
CLOVER_API cl_int
clRetainSampler(cl_sampler d_s) try {
   obj(d_s).retain();
d50 1
d52 4
a55 3
} catch (error &e) {
   return e.get();
}
d57 2
a58 4
CLOVER_API cl_int
clReleaseSampler(cl_sampler d_s) try {
   if (obj(d_s).release())
      delete pobj(d_s);
a60 3

} catch (error &e) {
   return e.get();
d63 5
a67 5
CLOVER_API cl_int
clGetSamplerInfo(cl_sampler d_s, cl_sampler_info param,
                 size_t size, void *r_buf, size_t *r_size) try {
   property_buffer buf { r_buf, size, r_size };
   auto &s = obj(d_s);
d71 1
a71 2
      buf.as_scalar<cl_uint>() = s.ref_count();
      break;
d74 1
a74 2
      buf.as_scalar<cl_context>() = desc(s.context());
      break;
d77 1
a77 2
      buf.as_scalar<cl_bool>() = s.norm_mode();
      break;
d80 2
a81 2
      buf.as_scalar<cl_addressing_mode>() = s.addr_mode();
      break;
d84 2
a85 2
      buf.as_scalar<cl_filter_mode>() = s.filter_mode();
      break;
d88 1
a88 1
      throw error(CL_INVALID_VALUE);
a89 5

   return CL_SUCCESS;

} catch (error &e) {
   return e.get();
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@a33 3
   if (!any_of(std::mem_fn(&device::image_support), ctx.devices()))
      throw error(CL_INVALID_OPERATION);

@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d34 3
@


