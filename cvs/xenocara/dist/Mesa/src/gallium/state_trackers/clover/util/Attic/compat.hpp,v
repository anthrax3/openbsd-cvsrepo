head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.3.0.4
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	v10_2_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.1
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.2
date	2015.01.25.14.09.10;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.3
date	2015.02.20.22.46.22;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#ifndef CLOVER_UTIL_COMPAT_HPP
#define CLOVER_UTIL_COMPAT_HPP

#include <new>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stdint.h>

namespace clover {
   namespace compat {
      // XXX - For cases where we can't rely on STL...  I.e. the
      //       interface between code compiled as C++98 and C++11
      //       source.  Get rid of this as soon as everything can be
      //       compiled as C++11.

      template<typename T>
      class vector {
      protected:
         static T *
         alloc(int n, const T *q, int m) {
            T *p = reinterpret_cast<T *>(std::malloc(n * sizeof(T)));

            for (int i = 0; i < m; ++i)
               new(&p[i]) T(q[i]);

            return p;
         }

         static void
         free(int n, T *p) {
            for (int i = 0; i < n; ++i)
               p[i].~T();

            std::free(p);
         }

      public:
         typedef T *iterator;
         typedef const T *const_iterator;
         typedef T value_type;
         typedef T &reference;
         typedef const T &const_reference;
         typedef std::ptrdiff_t difference_type;
         typedef std::size_t size_type;

         vector() : p(NULL), n(0) {
         }

         vector(const vector &v) : p(alloc(v.n, v.p, v.n)), n(v.n) {
         }

         vector(iterator p, size_type n) : p(alloc(n, p, n)), n(n) {
         }

         template<typename C>
         vector(const C &v) :
            p(alloc(v.size(), &*v.begin(), v.size())), n(v.size()) {
         }

         ~vector() {
            free(n, p);
         }

         vector &
         operator=(const vector &v) {
            free(n, p);

            p = alloc(v.n, v.p, v.n);
            n = v.n;

            return *this;
         }

         void
         reserve(size_type m) {
            if (n < m) {
               T *q = alloc(m, p, n);
               free(n, p);

               p = q;
               n = m;
            }
         }

         void
         resize(size_type m, T x = T()) {
            size_type n = size();

            reserve(m);

            for (size_type i = n; i < m; ++i)
               new(&p[i]) T(x);
         }

         void
         push_back(const T &x) {
            size_type n = size();
            reserve(n + 1);
            new(&p[n]) T(x);
         }

         size_type
         size() const {
            return n;
         }

         iterator
         begin() {
            return p;
         }

         const_iterator
         begin() const {
            return p;
         }

         iterator
         end() {
            return p + n;
         }

         const_iterator
         end() const {
            return p + n;
         }

         reference
         operator[](size_type i) {
            return p[i];
         }

         const_reference
         operator[](size_type i) const {
            return p[i];
         }

      private:
         iterator p;
         size_type n;
      };

      template<typename T>
      class vector_ref {
      public:
         typedef T *iterator;
         typedef const T *const_iterator;
         typedef T value_type;
         typedef T &reference;
         typedef const T &const_reference;
         typedef std::ptrdiff_t difference_type;
         typedef std::size_t size_type;

         vector_ref(iterator p, size_type n) : p(p), n(n) {
         }

         template<typename C>
         vector_ref(C &v) : p(&*v.begin()), n(v.size()) {
         }

         size_type
         size() const {
            return n;
         }

         iterator
         begin() {
            return p;
         }

         const_iterator
         begin() const {
            return p;
         }

         iterator
         end() {
            return p + n;
         }

         const_iterator
         end() const {
            return p + n;
         }

         reference
         operator[](int i) {
            return p[i];
         }

         const_reference
         operator[](int i) const {
            return p[i];
         }

      private:
         iterator p;
         size_type n;
      };

      class istream {
      public:
         typedef vector_ref<const unsigned char> buffer_t;

         class error {
         public:
            virtual ~error() {}
         };

         istream(const buffer_t &buf) : buf(buf), offset(0) {}

         void
         read(char *p, size_t n) {
            if (offset + n > buf.size())
               throw error();

            std::memcpy(p, buf.begin() + offset, n);
            offset += n;
         }

      private:
         const buffer_t &buf;
         size_t offset;
      };

      class ostream {
      public:
         typedef vector<unsigned char> buffer_t;

         ostream(buffer_t &buf) : buf(buf), offset(buf.size()) {}

         void
         write(const char *p, size_t n) {
            buf.resize(offset + n);
            std::memcpy(buf.begin() + offset, p, n);
            offset += n;
         }

      private:
         buffer_t &buf;
         size_t offset;
      };

      class string : public vector_ref<const char> {
      public:
         string(const char *p) : vector_ref(p, std::strlen(p)) {
         }

         template<typename C>
         string(const C &v) : vector_ref(v) {
         }

         operator std::string() const {
            return std::string(begin(), end());
         }

         const char *
         c_str() const {
            return begin();
         }

         const char *
         find(const string &s) const {
            for (size_t i = 0; i + s.size() < size(); ++i) {
               if (!std::memcmp(begin() + i, s.begin(), s.size()))
                  return begin() + i;
            }

            return end();
         }
      };

      template<typename T>
      bool
      operator==(const vector_ref<T> &a, const vector_ref<T> &b) {
         if (a.size() != b.size())
            return false;

         for (size_t i = 0; i < a.size(); ++i)
            if (a[i] != b[i])
               return false;

         return true;
      }

      class exception {
      public:
         exception() {}
         virtual ~exception();

         virtual const char *what() const;
      };

      class runtime_error : public exception {
      public:
         runtime_error(const string &what) : _what(what) {}

         virtual const char *what() const;

      protected:
         string _what;
      };
   }
}

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 10.2.3
@
text
@@


1.1.1.2
log
@Import Mesa 10.4.3
@
text
@a38 15
      namespace detail {
         template<typename R, typename S>
         bool
         ranges_equal(const R &a, const S &b) {
            if (a.size() != b.size())
               return false;

            for (size_t i = 0; i < a.size(); ++i)
               if (a[i] != b[i])
                  return false;

            return true;
         }
      }

d69 1
a69 1
         vector() : p(NULL), _size(0), _capacity(0) {
d72 1
a72 3
         vector(const vector &v) :
            p(alloc(v._size, v.p, v._size)),
            _size(v._size), _capacity(v._size) {
d75 1
a75 2
         vector(const_iterator p, size_type n) :
            p(alloc(n, p, n)), _size(n), _capacity(n) {
d80 1
a80 4
            p(alloc(v.size(), NULL, 0)), _size(0),
            _capacity(v.size()) {
            for (typename C::const_iterator it = v.begin(); it != v.end(); ++it)
               new(&p[_size++]) T(*it);
d84 1
a84 1
            free(_size, p);
d89 1
a89 1
            free(_size, p);
d91 2
a92 3
            p = alloc(v._size, v.p, v._size);
            _size = v._size;
            _capacity = v._size;
a96 5
         bool
         operator==(const vector &v) const {
            return detail::ranges_equal(*this, v);
         }

d98 4
a101 4
         reserve(size_type n) {
            if (_capacity < n) {
               T *q = alloc(n, p, _size);
               free(_size, p);
d104 1
a104 1
               _capacity = n;
d109 2
a110 4
         resize(size_type n, T x = T()) {
            if (n <= _size) {
               for (size_type i = n; i < _size; ++i)
                  p[i].~T();
d112 1
a112 6
            } else {
               reserve(n);

               for (size_type i = _size; i < n; ++i)
                  new(&p[i]) T(x);
            }
d114 2
a115 1
            _size = n;
d120 3
a122 3
            reserve(_size + 1);
            new(&p[_size]) T(x);
            ++_size;
d127 1
a127 6
            return _size;
         }

         size_type
         capacity() const {
            return _capacity;
d142 1
a142 1
            return p + _size;
d147 1
a147 1
            return p + _size;
d162 1
a162 2
         size_type _size;
         size_type _capacity;
a182 5
         bool
         operator==(const vector_ref &v) const {
            return detail::ranges_equal(*this, v);
         }

d266 1
a266 1
      class string {
d268 1
a268 12
         typedef char *iterator;
         typedef const char *const_iterator;
         typedef char value_type;
         typedef char &reference;
         typedef const char &const_reference;
         typedef std::ptrdiff_t difference_type;
         typedef std::size_t size_type;

         string() : v() {
         }

         string(const char *p) : v(p, std::strlen(p)) {
d272 1
a272 1
         string(const C &v) : v(v) {
d276 1
a276 61
            return std::string(v.begin(), v.end());
         }

         bool
         operator==(const string &s) const {
            return this->v == s.v;
         }

         void
         reserve(size_type n) {
            v.reserve(n);
         }

         void
         resize(size_type n, char x = char()) {
            v.resize(n, x);
         }

         void
         push_back(char x) {
            v.push_back(x);
         }

         size_type
         size() const {
            return v.size();
         }

         size_type
         capacity() const {
            return v.capacity();
         }

         iterator
         begin() {
            return v.begin();
         }

         const_iterator
         begin() const {
            return v.begin();
         }

         iterator
         end() {
            return v.end();
         }

         const_iterator
         end() const {
            return v.end();
         }

         reference
         operator[](size_type i) {
            return v[i];
         }

         const_reference
         operator[](size_type i) const {
            return v[i];
d281 1
a281 3
            v.reserve(size() + 1);
            *v.end() = 0;
            return v.begin();
d293 1
d295 5
a299 3
      private:
         mutable vector<char> v;
      };
d301 3
a303 4
      template<typename T, typename S>
      struct pair {
         pair(T first, S second) :
            first(first), second(second) {}
d305 2
a306 3
         T first;
         S second;
      };
@


1.1.1.3
log
@Import Mesa 10.2.9
@
text
@d39 15
d84 1
a84 1
         vector() : p(NULL), n(0) {
d87 3
a89 1
         vector(const vector &v) : p(alloc(v.n, v.p, v.n)), n(v.n) {
d92 2
a93 1
         vector(iterator p, size_type n) : p(alloc(n, p, n)), n(n) {
d98 4
a101 1
            p(alloc(v.size(), &*v.begin(), v.size())), n(v.size()) {
d105 1
a105 1
            free(n, p);
d110 1
a110 1
            free(n, p);
d112 3
a114 2
            p = alloc(v.n, v.p, v.n);
            n = v.n;
d119 5
d125 4
a128 4
         reserve(size_type m) {
            if (n < m) {
               T *q = alloc(m, p, n);
               free(n, p);
d131 1
a131 1
               n = m;
d136 4
a139 2
         resize(size_type m, T x = T()) {
            size_type n = size();
d141 6
a146 1
            reserve(m);
d148 1
a148 2
            for (size_type i = n; i < m; ++i)
               new(&p[i]) T(x);
d153 3
a155 3
            size_type n = size();
            reserve(n + 1);
            new(&p[n]) T(x);
d160 6
a165 1
            return n;
d180 1
a180 1
            return p + n;
d185 1
a185 1
            return p + n;
d200 2
a201 1
         size_type n;
d222 5
d310 1
a310 1
      class string : public vector_ref<const char> {
d312 12
a323 1
         string(const char *p) : vector_ref(p, std::strlen(p)) {
d327 1
a327 1
         string(const C &v) : vector_ref(v) {
d331 61
a391 1
            return std::string(begin(), end());
d396 3
a398 1
            return begin();
d410 3
d415 4
a418 5
      template<typename T>
      bool
      operator==(const vector_ref<T> &a, const vector_ref<T> &b) {
         if (a.size() != b.size())
            return false;
d420 3
a422 6
         for (size_t i = 0; i < a.size(); ++i)
            if (a[i] != b[i])
               return false;

         return true;
      }
@


