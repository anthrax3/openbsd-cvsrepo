head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#ifndef __CORE_RESOURCE_HPP__
#define __CORE_RESOURCE_HPP__

#include <list>

#include "core/base.hpp"
#include "core/memory.hpp"
#include "core/geometry.hpp"
#include "pipe/p_state.h"

namespace clover {
   class mapping;

   ///
   /// Class that represents a device-specific instance of some memory
   /// object.
   ///
   class resource {
   public:
      typedef clover::point<size_t, 3> point;

      resource(const resource &r) = delete;
      virtual ~resource();

      void copy(command_queue &q, const point &origin, const point &region,
                resource &src_resource, const point &src_origin);

      void *add_map(command_queue &q, cl_map_flags flags, bool blocking,
                    const point &origin, const point &region);
      void del_map(void *p);
      unsigned map_count() const;

      clover::device &dev;
      clover::memory_obj &obj;

      friend class sub_resource;
      friend class mapping;
      friend struct ::_cl_kernel;

   protected:
      resource(clover::device &dev, clover::memory_obj &obj);

      pipe_sampler_view *bind_sampler_view(clover::command_queue &q);
      void unbind_sampler_view(clover::command_queue &q,
                               pipe_sampler_view *st);

      pipe_surface *bind_surface(clover::command_queue &q, bool rw);
      void unbind_surface(clover::command_queue &q, pipe_surface *st);

      pipe_resource *pipe;
      point offset;

   private:
      std::list<mapping> maps;
   };

   ///
   /// Resource associated with its own top-level data storage
   /// allocated in some device.
   ///
   class root_resource : public resource {
   public:
      root_resource(clover::device &dev, clover::memory_obj &obj,
                    clover::command_queue &q, const std::string &data);
      root_resource(clover::device &dev, clover::memory_obj &obj,
                    root_resource &r);
      virtual ~root_resource();
   };

   ///
   /// Resource that reuses a portion of some other resource as data
   /// storage.
   ///
   class sub_resource : public resource {
   public:
      sub_resource(clover::resource &r, point offset);
   };

   ///
   /// Class that represents a mapping of some resource into the CPU
   /// memory space.
   ///
   class mapping {
   public:
      mapping(command_queue &q, resource &r, cl_map_flags flags,
              bool blocking, const resource::point &origin,
              const resource::point &region);
      mapping(const mapping &m) = delete;
      mapping(mapping &&m);
      ~mapping();

      operator void *() {
         return p;
      }

      operator char *() {
         return (char *)p;
      }

   private:
      pipe_context *pctx;
      pipe_transfer *pxfer;
      void *p;
   };
}

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d23 2
a24 2
#ifndef CLOVER_CORE_RESOURCE_HPP
#define CLOVER_CORE_RESOURCE_HPP
d28 3
a30 2
#include "core/queue.hpp"
#include "util/algebra.hpp"
a33 1
   class memory_obj;
d42 1
a42 1
      typedef std::array<size_t, 3> vector;
d44 1
d47 2
a48 6
      resource(const resource &r) = delete;
      resource &
      operator=(const resource &r) = delete;

      void copy(command_queue &q, const vector &origin, const vector &region,
                resource &src_resource, const vector &src_origin);
d51 1
a51 1
                    const vector &origin, const vector &region);
d55 2
a56 2
      const intrusive_ref<clover::device> device;
      memory_obj &obj;
d60 1
a60 1
      friend class kernel;
d63 1
a63 1
      resource(clover::device &dev, memory_obj &obj);
d65 2
a66 2
      pipe_sampler_view *bind_sampler_view(command_queue &q);
      void unbind_sampler_view(command_queue &q,
d69 2
a70 2
      pipe_surface *bind_surface(command_queue &q, bool rw);
      void unbind_surface(command_queue &q, pipe_surface *st);
d73 1
a73 1
      vector offset;
d85 4
a88 3
      root_resource(clover::device &dev, memory_obj &obj,
                    command_queue &q, const std::string &data);
      root_resource(clover::device &dev, memory_obj &obj, root_resource &r);
d98 1
a98 1
      sub_resource(resource &r, const vector &offset);
d108 3
a110 2
              bool blocking, const resource::vector &origin,
              const resource::vector &region);
d114 3
a116 4
      mapping &
      operator=(mapping m);

      mapping(const mapping &m) = delete;
d118 2
a119 3
      template<typename T>
      operator T *() const {
         return (T *)p;
@

