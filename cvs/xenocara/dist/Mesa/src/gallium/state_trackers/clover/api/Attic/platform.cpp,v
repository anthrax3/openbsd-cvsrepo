head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.10;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.10;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.09.08;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.46.20;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#include "api/util.hpp"
#include "core/platform.hpp"

using namespace clover;

static platform __platform;

PUBLIC cl_int
clGetPlatformIDs(cl_uint num_entries, cl_platform_id *platforms,
                 cl_uint *num_platforms) {
   if ((!num_entries && platforms) ||
       (!num_platforms && !platforms))
      return CL_INVALID_VALUE;

   if (num_platforms)
      *num_platforms = 1;
   if (platforms)
      *platforms = &__platform;

   return CL_SUCCESS;
}

PUBLIC cl_int
clGetPlatformInfo(cl_platform_id platform, cl_platform_info param_name,
                  size_t size, void *buf, size_t *size_ret) {
   if (platform != &__platform)
      return CL_INVALID_PLATFORM;

   switch (param_name) {
   case CL_PLATFORM_PROFILE:
      return string_property(buf, size, size_ret, "FULL_PROFILE");

   case CL_PLATFORM_VERSION:
      return string_property(buf, size, size_ret,
                             "OpenCL 1.1 MESA " PACKAGE_VERSION);

   case CL_PLATFORM_NAME:
      return string_property(buf, size, size_ret, "Default");

   case CL_PLATFORM_VENDOR:
      return string_property(buf, size, size_ret, "Mesa");

   case CL_PLATFORM_EXTENSIONS:
      return string_property(buf, size, size_ret, "");

   default:
      return CL_INVALID_VALUE;
   }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d28 1
a28 3
namespace {
   platform _clover_platform;
}
d30 5
a34 5
CLOVER_API cl_int
clGetPlatformIDs(cl_uint num_entries, cl_platform_id *rd_platforms,
                 cl_uint *rnum_platforms) {
   if ((!num_entries && rd_platforms) ||
       (!rnum_platforms && !rd_platforms))
d37 4
a40 4
   if (rnum_platforms)
      *rnum_platforms = 1;
   if (rd_platforms)
      *rd_platforms = desc(_clover_platform);
d45 5
a49 6
cl_int
clover::GetPlatformInfo(cl_platform_id d_platform, cl_platform_info param,
                        size_t size, void *r_buf, size_t *r_size) try {
   property_buffer buf { r_buf, size, r_size };

   obj(d_platform);
d51 1
a51 1
   switch (param) {
d53 1
a53 2
      buf.as_string() = "FULL_PROFILE";
      break;
d56 2
a57 2
      buf.as_string() = "OpenCL 1.1 MESA " PACKAGE_VERSION;
      break;
d60 1
a60 2
      buf.as_string() = "Default";
      break;
d63 1
a63 2
      buf.as_string() = "Mesa";
      break;
d66 1
a66 6
      buf.as_string() = "cl_khr_icd";
      break;

   case CL_PLATFORM_ICD_SUFFIX_KHR:
      buf.as_string() = "MESA";
      break;
d69 1
a69 1
      throw error(CL_INVALID_VALUE);
a70 38

   return CL_SUCCESS;

} catch (error &e) {
   return e.get();
}

void *
clover::GetExtensionFunctionAddress(const char *p_name) {
   std::string name { p_name };

   if (name == "clIcdGetPlatformIDsKHR")
      return reinterpret_cast<void *>(IcdGetPlatformIDsKHR);
   else
      return NULL;
}

cl_int
clover::IcdGetPlatformIDsKHR(cl_uint num_entries, cl_platform_id *rd_platforms,
                             cl_uint *rnum_platforms) {
   return clGetPlatformIDs(num_entries, rd_platforms, rnum_platforms);
}

CLOVER_ICD_API cl_int
clGetPlatformInfo(cl_platform_id d_platform, cl_platform_info param,
                  size_t size, void *r_buf, size_t *r_size) {
   return GetPlatformInfo(d_platform, param, size, r_buf, r_size);
}

CLOVER_ICD_API void *
clGetExtensionFunctionAddress(const char *p_name) {
   return GetExtensionFunctionAddress(p_name);
}

CLOVER_ICD_API cl_int
clIcdGetPlatformIDsKHR(cl_uint num_entries, cl_platform_id *rd_platforms,
                       cl_uint *rnum_platforms) {
   return IcdGetPlatformIDsKHR(num_entries, rd_platforms, rnum_platforms);
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d64 1
a64 1
      buf.as_string() = "Clover";
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d64 1
a64 1
      buf.as_string() = "Default";
@


