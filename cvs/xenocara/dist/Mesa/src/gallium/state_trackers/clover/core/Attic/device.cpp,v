head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.09.09;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.46.21;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#include "core/device.hpp"
#include "pipe/p_screen.h"
#include "pipe/p_state.h"

using namespace clover;

namespace {
   template<typename T>
   std::vector<T>
   get_compute_param(pipe_screen *pipe, pipe_compute_cap cap) {
      int sz = pipe->get_compute_param(pipe, cap, NULL);
      std::vector<T> v(sz / sizeof(T));

      pipe->get_compute_param(pipe, cap, &v.front());
      return v;
   }
}

_cl_device_id::_cl_device_id(clover::platform &platform,
                             pipe_loader_device *ldev) :
   platform(platform), ldev(ldev) {
   pipe = pipe_loader_create_screen(ldev, PIPE_SEARCH_DIR);
   if (!pipe || !pipe->get_param(pipe, PIPE_CAP_COMPUTE))
      throw error(CL_INVALID_DEVICE);
}

_cl_device_id::_cl_device_id(_cl_device_id &&dev) :
   platform(dev.platform), pipe(dev.pipe), ldev(dev.ldev) {
   dev.pipe = NULL;
   dev.ldev = NULL;
}

_cl_device_id::~_cl_device_id() {
   if (pipe)
      pipe->destroy(pipe);
   if (ldev)
      pipe_loader_release(&ldev, 1);
}

_cl_device_id &
_cl_device_id::operator=(_cl_device_id dev) {
   assert(&platform == &dev.platform);

   std::swap(pipe, dev.pipe);
   std::swap(ldev, dev.ldev);

   return *this;
}

cl_device_type
_cl_device_id::type() const {
   switch (ldev->type) {
   case PIPE_LOADER_DEVICE_SOFTWARE:
      return CL_DEVICE_TYPE_CPU;
   case PIPE_LOADER_DEVICE_PCI:
      return CL_DEVICE_TYPE_GPU;
   default:
      assert(0);
      return 0;
   }
}

cl_uint
_cl_device_id::vendor_id() const {
   switch (ldev->type) {
   case PIPE_LOADER_DEVICE_SOFTWARE:
      return 0;
   case PIPE_LOADER_DEVICE_PCI:
      return ldev->u.pci.vendor_id;
   default:
      assert(0);
      return 0;
   }
}

size_t
_cl_device_id::max_images_read() const {
   return PIPE_MAX_SHADER_RESOURCES;
}

size_t
_cl_device_id::max_images_write() const {
   return PIPE_MAX_SHADER_RESOURCES;
}

cl_uint
_cl_device_id::max_image_levels_2d() const {
   return pipe->get_param(pipe, PIPE_CAP_MAX_TEXTURE_2D_LEVELS);
}

cl_uint
_cl_device_id::max_image_levels_3d() const {
   return pipe->get_param(pipe, PIPE_CAP_MAX_TEXTURE_3D_LEVELS);
}

cl_uint
_cl_device_id::max_samplers() const {
   return pipe->get_shader_param(pipe, PIPE_SHADER_COMPUTE,
                                 PIPE_SHADER_CAP_MAX_TEXTURE_SAMPLERS);
}

cl_ulong
_cl_device_id::max_mem_global() const {
   return get_compute_param<uint64_t>(pipe,
                                      PIPE_COMPUTE_CAP_MAX_GLOBAL_SIZE)[0];
}

cl_ulong
_cl_device_id::max_mem_local() const {
   return get_compute_param<uint64_t>(pipe,
                                      PIPE_COMPUTE_CAP_MAX_LOCAL_SIZE)[0];
}

cl_ulong
_cl_device_id::max_mem_input() const {
   return get_compute_param<uint64_t>(pipe,
                                      PIPE_COMPUTE_CAP_MAX_INPUT_SIZE)[0];
}

cl_ulong
_cl_device_id::max_const_buffer_size() const {
   return pipe->get_shader_param(pipe, PIPE_SHADER_COMPUTE,
                                 PIPE_SHADER_CAP_MAX_CONSTS) * 16;
}

cl_uint
_cl_device_id::max_const_buffers() const {
   return pipe->get_shader_param(pipe, PIPE_SHADER_COMPUTE,
                                 PIPE_SHADER_CAP_MAX_CONST_BUFFERS);
}

size_t
_cl_device_id::max_threads_per_block() const {
   return get_compute_param<uint64_t>(
      pipe, PIPE_COMPUTE_CAP_MAX_THREADS_PER_BLOCK)[0];
}

cl_ulong
_cl_device_id::max_mem_alloc_size() const {
   return get_compute_param<uint64_t>(pipe,
                                      PIPE_COMPUTE_CAP_MAX_MEM_ALLOC_SIZE)[0];
}

std::vector<size_t>
_cl_device_id::max_block_size() const {
   auto v = get_compute_param<uint64_t>(pipe, PIPE_COMPUTE_CAP_MAX_BLOCK_SIZE);
   return { v.begin(), v.end() };
}

std::string
_cl_device_id::device_name() const {
   return pipe->get_name(pipe);
}

std::string
_cl_device_id::vendor_name() const {
   return pipe->get_vendor(pipe);
}

enum pipe_shader_ir
_cl_device_id::ir_format() const {
   return (enum pipe_shader_ir) pipe->get_shader_param(pipe,
                                                  PIPE_SHADER_COMPUTE,
                                                  PIPE_SHADER_CAP_PREFERRED_IR);
}

std::string
_cl_device_id::ir_target() const {
   std::vector<char> target = get_compute_param<char>(pipe,
                                                    PIPE_COMPUTE_CAP_IR_TARGET);
   return { target.data() };
}

enum pipe_endian
_cl_device_id::endianness() const {
   return (enum pipe_endian)pipe->get_param(pipe, PIPE_CAP_ENDIANNESS);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@a23 1
#include "core/platform.hpp"
d41 2
a42 1
device::device(clover::platform &platform, pipe_loader_device *ldev) :
d45 1
a45 3
   if (!pipe || !pipe->get_param(pipe, PIPE_CAP_COMPUTE)) {
      if (pipe)
         pipe->destroy(pipe);
a46 1
   }
d49 7
a55 1
device::~device() {
d62 8
a69 3
bool
device::operator==(const device &dev) const {
   return this == &dev;
d73 1
a73 1
device::type() const {
a77 1
   case PIPE_LOADER_DEVICE_PLATFORM:
d86 1
a86 1
device::vendor_id() const {
a88 1
   case PIPE_LOADER_DEVICE_PLATFORM:
d99 1
a99 1
device::max_images_read() const {
d104 1
a104 1
device::max_images_write() const {
d109 1
a109 1
device::max_image_levels_2d() const {
d114 1
a114 1
device::max_image_levels_3d() const {
d119 1
a119 1
device::max_samplers() const {
d125 1
a125 1
device::max_mem_global() const {
d131 1
a131 1
device::max_mem_local() const {
d137 1
a137 1
device::max_mem_input() const {
d143 1
a143 1
device::max_const_buffer_size() const {
d149 1
a149 1
device::max_const_buffers() const {
d155 1
a155 1
device::max_threads_per_block() const {
d161 1
a161 1
device::max_mem_alloc_size() const {
a165 6
cl_uint
device::max_clock_frequency() const {
   return get_compute_param<uint32_t>(pipe,
                                      PIPE_COMPUTE_CAP_MAX_CLOCK_FREQUENCY)[0];
}

d167 1
a167 1
device::max_block_size() const {
d173 1
a173 1
device::device_name() const {
d178 1
a178 1
device::vendor_name() const {
d183 4
a186 3
device::ir_format() const {
   return (enum pipe_shader_ir) pipe->get_shader_param(
      pipe, PIPE_SHADER_COMPUTE, PIPE_SHADER_CAP_PREFERRED_IR);
d190 3
a192 3
device::ir_target() const {
   std::vector<char> target = get_compute_param<char>(
      pipe, PIPE_COMPUTE_CAP_IR_TARGET);
d197 1
a197 1
device::endianness() const {
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d73 2
a74 1
      unreachable("Unknown device type.");
d87 2
a88 1
      unreachable("Unknown device type.");
d139 1
a139 1
                                 PIPE_SHADER_CAP_MAX_CONST_BUFFER_SIZE);
a163 12
}

cl_uint
device::max_compute_units() const {
   return get_compute_param<uint32_t>(pipe,
                                      PIPE_COMPUTE_CAP_MAX_COMPUTE_UNITS)[0];
}

bool
device::image_support() const {
   return get_compute_param<uint32_t>(pipe,
                                      PIPE_COMPUTE_CAP_IMAGES_SUPPORTED)[0];
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d73 1
a73 2
      assert(0);
      return 0;
d86 1
a86 2
      assert(0);
      return 0;
d137 1
a137 1
                                 PIPE_SHADER_CAP_MAX_CONSTS) * 16;
d162 12
@


