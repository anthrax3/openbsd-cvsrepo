head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.09.09;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.46.21;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#include "core/kernel.hpp"
#include "core/resource.hpp"
#include "util/u_math.h"
#include "pipe/p_context.h"

using namespace clover;

_cl_kernel::_cl_kernel(clover::program &prog,
                       const std::string &name,
                       const std::vector<clover::module::argument> &margs) :
   prog(prog), __name(name), exec(*this) {
   for (auto marg : margs) {
      if (marg.type == module::argument::scalar)
         args.emplace_back(new scalar_argument(marg.size));
      else if (marg.type == module::argument::global)
         args.emplace_back(new global_argument);
      else if (marg.type == module::argument::local)
         args.emplace_back(new local_argument);
      else if (marg.type == module::argument::constant)
         args.emplace_back(new constant_argument);
      else if (marg.type == module::argument::image2d_rd ||
               marg.type == module::argument::image3d_rd)
         args.emplace_back(new image_rd_argument);
      else if (marg.type == module::argument::image2d_wr ||
               marg.type == module::argument::image3d_wr)
         args.emplace_back(new image_wr_argument);
      else if (marg.type == module::argument::sampler)
         args.emplace_back(new sampler_argument);
      else
         throw error(CL_INVALID_KERNEL_DEFINITION);
   }
}

template<typename T, typename V>
static inline std::vector<T>
pad_vector(clover::command_queue &q, const V &v, T x) {
   std::vector<T> w { v.begin(), v.end() };
   w.resize(q.dev.max_block_size().size(), x);
   return w;
}

void
_cl_kernel::launch(clover::command_queue &q,
                   const std::vector<size_t> &grid_offset,
                   const std::vector<size_t> &grid_size,
                   const std::vector<size_t> &block_size) {
   void *st = exec.bind(&q);
   auto g_handles = map([&](size_t h) { return (uint32_t *)&exec.input[h]; },
                        exec.g_handles.begin(), exec.g_handles.end());

   q.pipe->bind_compute_state(q.pipe, st);
   q.pipe->bind_compute_sampler_states(q.pipe, 0, exec.samplers.size(),
                                       exec.samplers.data());
   q.pipe->set_compute_sampler_views(q.pipe, 0, exec.sviews.size(),
                                     exec.sviews.data());
   q.pipe->set_compute_resources(q.pipe, 0, exec.resources.size(),
                                     exec.resources.data());
   q.pipe->set_global_binding(q.pipe, 0, exec.g_buffers.size(),
                              exec.g_buffers.data(), g_handles.data());

   q.pipe->launch_grid(q.pipe,
                       pad_vector<uint>(q, block_size, 1).data(),
                       pad_vector<uint>(q, grid_size, 1).data(),
                       module(q).sym(__name).offset,
                       exec.input.data());

   q.pipe->set_global_binding(q.pipe, 0, exec.g_buffers.size(), NULL, NULL);
   q.pipe->set_compute_resources(q.pipe, 0, exec.resources.size(), NULL);
   q.pipe->set_compute_sampler_views(q.pipe, 0, exec.sviews.size(), NULL);
   q.pipe->bind_compute_sampler_states(q.pipe, 0, exec.samplers.size(), NULL);
   exec.unbind();
}

size_t
_cl_kernel::mem_local() const {
   size_t sz = 0;

   for (auto &arg : args) {
      if (dynamic_cast<local_argument *>(arg.get()))
         sz += arg->storage();
   }

   return sz;
}

size_t
_cl_kernel::mem_private() const {
   return 0;
}

size_t
_cl_kernel::max_block_size() const {
   return SIZE_MAX;
}

const std::string &
_cl_kernel::name() const {
   return __name;
}

std::vector<size_t>
_cl_kernel::block_size() const {
   return { 0, 0, 0 };
}

const clover::module &
_cl_kernel::module(const clover::command_queue &q) const {
   return prog.binaries().find(&q.dev)->second;
}

_cl_kernel::exec_context::exec_context(clover::kernel &kern) :
   kern(kern), q(NULL), mem_local(0), st(NULL) {
}

_cl_kernel::exec_context::~exec_context() {
   if (st)
      q->pipe->delete_compute_state(q->pipe, st);
}

void *
_cl_kernel::exec_context::bind(clover::command_queue *__q) {
   std::swap(q, __q);

   // Bind kernel arguments.
   auto margs = kern.module(*q).sym(kern.name()).args;
   for_each([=](std::unique_ptr<kernel::argument> &karg,
                const module::argument &marg) {
         karg->bind(*this, marg);
      }, kern.args.begin(), kern.args.end(), margs.begin());

   // Create a new compute state if anything changed.
   if (!st || q != __q ||
       cs.req_local_mem != mem_local ||
       cs.req_input_mem != input.size()) {
      if (st)
         __q->pipe->delete_compute_state(__q->pipe, st);

      cs.prog = kern.module(*q).sec(module::section::text).data.begin();
      cs.req_local_mem = mem_local;
      cs.req_input_mem = input.size();
      st = q->pipe->create_compute_state(q->pipe, &cs);
   }

   return st;
}

void
_cl_kernel::exec_context::unbind() {
   for (auto &arg : kern.args)
      arg->unbind(*this);

   input.clear();
   samplers.clear();
   sviews.clear();
   resources.clear();
   g_buffers.clear();
   g_handles.clear();
   mem_local = 0;
}

namespace {
   template<typename T>
   std::vector<uint8_t>
   bytes(const T& x) {
      return { (uint8_t *)&x, (uint8_t *)&x + sizeof(x) };
   }

   ///
   /// Transform buffer \a v from the native byte order into the byte
   /// order specified by \a e.
   ///
   template<typename T>
   void
   byteswap(T &v, pipe_endian e) {
      if (PIPE_ENDIAN_NATIVE != e)
         std::reverse(v.begin(), v.end());
   }

   ///
   /// Pad buffer \a v to the next multiple of \a n.
   ///
   template<typename T>
   void
   align(T &v, size_t n) {
      v.resize(util_align_npot(v.size(), n));
   }

   bool
   msb(const std::vector<uint8_t> &s) {
      if (PIPE_ENDIAN_NATIVE == PIPE_ENDIAN_LITTLE)
         return s.back() & 0x80;
      else
         return s.front() & 0x80;
   }

   ///
   /// Resize buffer \a v to size \a n using sign or zero extension
   /// according to \a ext.
   ///
   template<typename T>
   void
   extend(T &v, enum clover::module::argument::ext_type ext, size_t n) {
      const size_t m = std::min(v.size(), n);
      const bool sign_ext = (ext == module::argument::sign_ext);
      const uint8_t fill = (sign_ext && msb(v) ? ~0 : 0);
      T w(n, fill);

      if (PIPE_ENDIAN_NATIVE == PIPE_ENDIAN_LITTLE)
         std::copy_n(v.begin(), m, w.begin());
      else
         std::copy_n(v.end() - m, m, w.end() - m);

      std::swap(v, w);
   }

   ///
   /// Append buffer \a w to \a v.
   ///
   template<typename T>
   void
   insert(T &v, const T &w) {
      v.insert(v.end(), w.begin(), w.end());
   }

   ///
   /// Append \a n elements to the end of buffer \a v.
   ///
   template<typename T>
   size_t
   allocate(T &v, size_t n) {
      size_t pos = v.size();
      v.resize(pos + n);
      return pos;
   }
}

_cl_kernel::argument::argument() : __set(false) {
}

bool
_cl_kernel::argument::set() const {
   return __set;
}

size_t
_cl_kernel::argument::storage() const {
   return 0;
}

_cl_kernel::scalar_argument::scalar_argument(size_t size) : size(size) {
}

void
_cl_kernel::scalar_argument::set(size_t size, const void *value) {
   if (size != this->size)
      throw error(CL_INVALID_ARG_SIZE);

   v = { (uint8_t *)value, (uint8_t *)value + size };
   __set = true;
}

void
_cl_kernel::scalar_argument::bind(exec_context &ctx,
                                  const clover::module::argument &marg) {
   auto w = v;

   extend(w, marg.ext_type, marg.target_size);
   byteswap(w, ctx.q->dev.endianness());
   align(ctx.input, marg.target_align);
   insert(ctx.input, w);
}

void
_cl_kernel::scalar_argument::unbind(exec_context &ctx) {
}

void
_cl_kernel::global_argument::set(size_t size, const void *value) {
   if (size != sizeof(cl_mem))
      throw error(CL_INVALID_ARG_SIZE);

   obj = dynamic_cast<clover::buffer *>(*(cl_mem *)value);
   if (!obj)
      throw error(CL_INVALID_MEM_OBJECT);

   __set = true;
}

void
_cl_kernel::global_argument::bind(exec_context &ctx,
                                  const clover::module::argument &marg) {
   align(ctx.input, marg.target_align);
   ctx.g_handles.push_back(allocate(ctx.input, marg.target_size));
   ctx.g_buffers.push_back(obj->resource(ctx.q).pipe);
}

void
_cl_kernel::global_argument::unbind(exec_context &ctx) {
}

size_t
_cl_kernel::local_argument::storage() const {
   return __storage;
}

void
_cl_kernel::local_argument::set(size_t size, const void *value) {
   if (value)
      throw error(CL_INVALID_ARG_VALUE);

   __storage = size;
   __set = true;
}

void
_cl_kernel::local_argument::bind(exec_context &ctx,
                                 const clover::module::argument &marg) {
   auto v = bytes(ctx.mem_local);

   extend(v, module::argument::zero_ext, marg.target_size);
   byteswap(v, ctx.q->dev.endianness());
   align(ctx.input, marg.target_align);
   insert(ctx.input, v);

   ctx.mem_local += __storage;
}

void
_cl_kernel::local_argument::unbind(exec_context &ctx) {
}

void
_cl_kernel::constant_argument::set(size_t size, const void *value) {
   if (size != sizeof(cl_mem))
      throw error(CL_INVALID_ARG_SIZE);

   obj = dynamic_cast<clover::buffer *>(*(cl_mem *)value);
   if (!obj)
      throw error(CL_INVALID_MEM_OBJECT);

   __set = true;
}

void
_cl_kernel::constant_argument::bind(exec_context &ctx,
                                    const clover::module::argument &marg) {
   auto v = bytes(ctx.resources.size() << 24);

   extend(v, module::argument::zero_ext, marg.target_size);
   byteswap(v, ctx.q->dev.endianness());
   align(ctx.input, marg.target_align);
   insert(ctx.input, v);

   st = obj->resource(ctx.q).bind_surface(*ctx.q, false);
   ctx.resources.push_back(st);
}

void
_cl_kernel::constant_argument::unbind(exec_context &ctx) {
   obj->resource(ctx.q).unbind_surface(*ctx.q, st);
}

void
_cl_kernel::image_rd_argument::set(size_t size, const void *value) {
   if (size != sizeof(cl_mem))
      throw error(CL_INVALID_ARG_SIZE);

   obj = dynamic_cast<clover::image *>(*(cl_mem *)value);
   if (!obj)
      throw error(CL_INVALID_MEM_OBJECT);

   __set = true;
}

void
_cl_kernel::image_rd_argument::bind(exec_context &ctx,
                                    const clover::module::argument &marg) {
   auto v = bytes(ctx.sviews.size());

   extend(v, module::argument::zero_ext, marg.target_size);
   byteswap(v, ctx.q->dev.endianness());
   align(ctx.input, marg.target_align);
   insert(ctx.input, v);

   st = obj->resource(ctx.q).bind_sampler_view(*ctx.q);
   ctx.sviews.push_back(st);
}

void
_cl_kernel::image_rd_argument::unbind(exec_context &ctx) {
   obj->resource(ctx.q).unbind_sampler_view(*ctx.q, st);
}

void
_cl_kernel::image_wr_argument::set(size_t size, const void *value) {
   if (size != sizeof(cl_mem))
      throw error(CL_INVALID_ARG_SIZE);

   obj = dynamic_cast<clover::image *>(*(cl_mem *)value);
   if (!obj)
      throw error(CL_INVALID_MEM_OBJECT);

   __set = true;
}

void
_cl_kernel::image_wr_argument::bind(exec_context &ctx,
                                    const clover::module::argument &marg) {
   auto v = bytes(ctx.resources.size());

   extend(v, module::argument::zero_ext, marg.target_size);
   byteswap(v, ctx.q->dev.endianness());
   align(ctx.input, marg.target_align);
   insert(ctx.input, v);

   st = obj->resource(ctx.q).bind_surface(*ctx.q, true);
   ctx.resources.push_back(st);
}

void
_cl_kernel::image_wr_argument::unbind(exec_context &ctx) {
   obj->resource(ctx.q).unbind_surface(*ctx.q, st);
}

void
_cl_kernel::sampler_argument::set(size_t size, const void *value) {
   if (size != sizeof(cl_sampler))
      throw error(CL_INVALID_ARG_SIZE);

   obj = *(cl_sampler *)value;
   __set = true;
}

void
_cl_kernel::sampler_argument::bind(exec_context &ctx,
                                   const clover::module::argument &marg) {
   st = obj->bind(*ctx.q);
   ctx.samplers.push_back(st);
}

void
_cl_kernel::sampler_argument::unbind(exec_context &ctx) {
   obj->unbind(*ctx.q, st);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@a24 1
#include "util/factor.hpp"
d30 5
a34 4
kernel::kernel(clover::program &prog, const std::string &name,
               const std::vector<module::argument> &margs) :
   program(prog), _name(name), exec(*this) {
   for (auto &marg : margs) {
d36 1
a36 1
         _args.emplace_back(new scalar_argument(marg.size));
d38 1
a38 1
         _args.emplace_back(new global_argument);
d40 1
a40 1
         _args.emplace_back(new local_argument);
d42 1
a42 1
         _args.emplace_back(new constant_argument);
d45 1
a45 1
         _args.emplace_back(new image_rd_argument);
d48 1
a48 1
         _args.emplace_back(new image_wr_argument);
d50 1
a50 1
         _args.emplace_back(new sampler_argument);
d56 5
a60 5
template<typename V>
static inline std::vector<uint>
pad_vector(command_queue &q, const V &v, uint x) {
   std::vector<uint> w { v.begin(), v.end() };
   w.resize(q.device().max_block_size().size(), x);
d65 4
a68 7
kernel::launch(command_queue &q,
               const std::vector<size_t> &grid_offset,
               const std::vector<size_t> &grid_size,
               const std::vector<size_t> &block_size) {
   const auto m = program().binary(q.device());
   const auto reduced_grid_size =
      map(divides(), grid_size, block_size);
d70 2
a71 6

   // The handles are created during exec_context::bind(), so we need make
   // sure to call exec_context::bind() before retrieving them.
   std::vector<uint32_t *> g_handles = map([&](size_t h) {
         return (uint32_t *)&exec.input[h];
      }, exec.g_handles);
d74 4
a77 6
   q.pipe->bind_sampler_states(q.pipe, PIPE_SHADER_COMPUTE,
                               0, exec.samplers.size(),
                               exec.samplers.data());

   q.pipe->set_sampler_views(q.pipe, PIPE_SHADER_COMPUTE, 0,
                             exec.sviews.size(), exec.sviews.data());
d79 1
a79 1
                                 exec.resources.data());
d84 3
a86 3
                       pad_vector(q, block_size, 1).data(),
                       pad_vector(q, reduced_grid_size, 1).data(),
                       find(name_equals(_name), m.syms).offset,
d91 2
a92 4
   q.pipe->set_sampler_views(q.pipe, PIPE_SHADER_COMPUTE, 0,
                             exec.sviews.size(), NULL);
   q.pipe->bind_sampler_states(q.pipe, PIPE_SHADER_COMPUTE, 0,
                               exec.samplers.size(), NULL);
d97 1
a97 1
kernel::mem_local() const {
d100 3
a102 3
   for (auto &arg : args()) {
      if (dynamic_cast<local_argument *>(&arg))
         sz += arg.storage();
d109 1
a109 1
kernel::mem_private() const {
d113 3
a115 3
const std::string &
kernel::name() const {
   return _name;
d118 3
a120 6
std::vector<size_t>
kernel::optimal_block_size(const command_queue &q,
                           const std::vector<size_t> &grid_size) const {
   return factor::find_grid_optimal_factor<size_t>(
      q.device().max_threads_per_block(), q.device().max_block_size(),
      grid_size);
d124 1
a124 1
kernel::required_block_size() const {
d128 3
a130 3
kernel::argument_range
kernel::args() {
   return map(derefs(), _args);
d133 2
a134 3
kernel::const_argument_range
kernel::args() const {
   return map(derefs(), _args);
d137 1
a137 10
const module &
kernel::module(const command_queue &q) const {
   return program().binary(q.device());
}

kernel::exec_context::exec_context(kernel &kern) :
   kern(kern), q(NULL), mem_local(0), st(NULL), cs() {
}

kernel::exec_context::~exec_context() {
d143 2
a144 2
kernel::exec_context::bind(intrusive_ptr<command_queue> _q) {
   std::swap(q, _q);
d147 5
a151 7
   auto &m = kern.program().binary(q->device());
   auto margs = find(name_equals(kern.name()), m.syms).args;
   auto msec = find(type_equals(module::section::text), m.secs);

   for_each([=](kernel::argument &karg, const module::argument &marg) {
               karg.bind(*this, marg);
            }, kern.args(), margs);
d154 1
a154 1
   if (!st || q != _q ||
d158 1
a158 1
         _q->pipe->delete_compute_state(_q->pipe, st);
d160 1
a160 1
      cs.prog = msec.data.begin();
d170 3
a172 3
kernel::exec_context::unbind() {
   for (auto &arg : kern.args())
      arg.unbind(*this);
d224 1
a224 1
   extend(T &v, enum module::argument::ext_type ext, size_t n) {
d259 1
a259 1
kernel::argument::argument() : _set(false) {
d263 2
a264 2
kernel::argument::set() const {
   return _set;
d268 1
a268 1
kernel::argument::storage() const {
d272 1
a272 1
kernel::scalar_argument::scalar_argument(size_t size) : size(size) {
d276 1
a276 1
kernel::scalar_argument::set(size_t size, const void *value) {
d281 1
a281 1
   _set = true;
d285 2
a286 2
kernel::scalar_argument::bind(exec_context &ctx,
                              const module::argument &marg) {
d290 1
a290 1
   byteswap(w, ctx.q->device().endianness());
d296 1
a296 1
kernel::scalar_argument::unbind(exec_context &ctx) {
d300 1
a300 1
kernel::global_argument::set(size_t size, const void *value) {
d304 5
a308 2
   buf = pobj<buffer>(value ? *(cl_mem *)value : NULL);
   _set = true;
d312 2
a313 2
kernel::global_argument::bind(exec_context &ctx,
                              const module::argument &marg) {
d315 2
a316 17

   if (buf) {
      const resource &r = buf->resource(*ctx.q);
      ctx.g_handles.push_back(ctx.input.size());
      ctx.g_buffers.push_back(r.pipe);

      // How to handle multi-demensional offsets?
      // We don't need to.  Buffer offsets are always
      // one-dimensional.
      auto v = bytes(r.offset[0]);
      extend(v, marg.ext_type, marg.target_size);
      byteswap(v, ctx.q->device().endianness());
      insert(ctx.input, v);
   } else {
      // Null pointer.
      allocate(ctx.input, marg.target_size);
   }
d320 1
a320 1
kernel::global_argument::unbind(exec_context &ctx) {
d324 2
a325 2
kernel::local_argument::storage() const {
   return _storage;
d329 1
a329 1
kernel::local_argument::set(size_t size, const void *value) {
d333 2
a334 2
   _storage = size;
   _set = true;
d338 2
a339 2
kernel::local_argument::bind(exec_context &ctx,
                             const module::argument &marg) {
d343 1
a343 1
   byteswap(v, ctx.q->device().endianness());
d347 1
a347 1
   ctx.mem_local += _storage;
d351 1
a351 1
kernel::local_argument::unbind(exec_context &ctx) {
d355 1
a355 1
kernel::constant_argument::set(size_t size, const void *value) {
d359 5
a363 2
   buf = pobj<buffer>(value ? *(cl_mem *)value : NULL);
   _set = true;
d367 6
a372 2
kernel::constant_argument::bind(exec_context &ctx,
                                const module::argument &marg) {
d374 1
d376 2
a377 14
   if (buf) {
      resource &r = buf->resource(*ctx.q);
      auto v = bytes(ctx.resources.size() << 24 | r.offset[0]);

      extend(v, module::argument::zero_ext, marg.target_size);
      byteswap(v, ctx.q->device().endianness());
      insert(ctx.input, v);

      st = r.bind_surface(*ctx.q, false);
      ctx.resources.push_back(st);
   } else {
      // Null pointer.
      allocate(ctx.input, marg.target_size);
   }
d381 2
a382 3
kernel::constant_argument::unbind(exec_context &ctx) {
   if (buf)
      buf->resource(*ctx.q).unbind_surface(*ctx.q, st);
d386 1
a386 1
kernel::image_rd_argument::set(size_t size, const void *value) {
d390 5
a394 2
   img = &obj<image>(*(cl_mem *)value);
   _set = true;
d398 2
a399 2
kernel::image_rd_argument::bind(exec_context &ctx,
                                const module::argument &marg) {
d403 1
a403 1
   byteswap(v, ctx.q->device().endianness());
d407 1
a407 1
   st = img->resource(*ctx.q).bind_sampler_view(*ctx.q);
d412 2
a413 2
kernel::image_rd_argument::unbind(exec_context &ctx) {
   img->resource(*ctx.q).unbind_sampler_view(*ctx.q, st);
d417 1
a417 1
kernel::image_wr_argument::set(size_t size, const void *value) {
d421 5
a425 2
   img = &obj<image>(*(cl_mem *)value);
   _set = true;
d429 2
a430 2
kernel::image_wr_argument::bind(exec_context &ctx,
                                const module::argument &marg) {
d434 1
a434 1
   byteswap(v, ctx.q->device().endianness());
d438 1
a438 1
   st = img->resource(*ctx.q).bind_surface(*ctx.q, true);
d443 2
a444 2
kernel::image_wr_argument::unbind(exec_context &ctx) {
   img->resource(*ctx.q).unbind_surface(*ctx.q, st);
d448 1
a448 1
kernel::sampler_argument::set(size_t size, const void *value) {
d452 2
a453 2
   s = &obj(*(cl_sampler *)value);
   _set = true;
d457 3
a459 3
kernel::sampler_argument::bind(exec_context &ctx,
                               const module::argument &marg) {
   st = s->bind(*ctx.q);
d464 2
a465 2
kernel::sampler_argument::unbind(exec_context &ctx) {
   s->unbind(*ctx.q, st);
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d33 1
a33 2
   program(prog), _name(name), exec(*this),
   program_ref(prog._kernel_ref_counter) {
d35 18
a52 2
      if (marg.semantic == module::argument::general)
         _args.emplace_back(argument::create(marg));
d72 1
a72 1
   void *st = exec.bind(&q, grid_offset);
d167 1
a167 2
kernel::exec_context::bind(intrusive_ptr<command_queue> _q,
                           const std::vector<size_t> &grid_offset) {
a173 1
   auto explicit_arg = kern._args.begin();
d175 3
a177 25
   for (auto &marg : margs) {
      switch (marg.semantic) {
      case module::argument::general:
         (*(explicit_arg++))->bind(*this, marg);
         break;

      case module::argument::grid_dimension: {
         const cl_uint dimension = grid_offset.size();
         auto arg = argument::create(marg);

         arg->set(sizeof(dimension), &dimension);
         arg->bind(*this, marg);
         break;
      }
      case module::argument::grid_offset: {
         for (cl_uint x : pad_vector(*q, grid_offset, 1)) {
            auto arg = argument::create(marg);

            arg->set(sizeof(x), &x);
            arg->bind(*this, marg);
         }
         break;
      }
      }
   }
a282 36
}

std::unique_ptr<kernel::argument>
kernel::argument::create(const module::argument &marg) {
      if (marg.type == module::argument::scalar)
         return std::unique_ptr<kernel::argument>(
            new scalar_argument(marg.size));

      else if (marg.type == module::argument::global)
         return std::unique_ptr<kernel::argument>(
            new global_argument);

      else if (marg.type == module::argument::local)
         return std::unique_ptr<kernel::argument>(
            new local_argument);

      else if (marg.type == module::argument::constant)
         return std::unique_ptr<kernel::argument>(
            new constant_argument);

      else if (marg.type == module::argument::image2d_rd ||
               marg.type == module::argument::image3d_rd)
         return std::unique_ptr<kernel::argument>(
            new image_rd_argument);

      else if (marg.type == module::argument::image2d_wr ||
               marg.type == module::argument::image3d_wr)
         return std::unique_ptr<kernel::argument>(
            new image_wr_argument);

      else if (marg.type == module::argument::sampler)
         return std::unique_ptr<kernel::argument>(
            new sampler_argument);

      else
         throw error(CL_INVALID_KERNEL_DEFINITION);
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d33 2
a34 1
   program(prog), _name(name), exec(*this) {
d36 2
a37 18
      if (marg.type == module::argument::scalar)
         _args.emplace_back(new scalar_argument(marg.size));
      else if (marg.type == module::argument::global)
         _args.emplace_back(new global_argument);
      else if (marg.type == module::argument::local)
         _args.emplace_back(new local_argument);
      else if (marg.type == module::argument::constant)
         _args.emplace_back(new constant_argument);
      else if (marg.type == module::argument::image2d_rd ||
               marg.type == module::argument::image3d_rd)
         _args.emplace_back(new image_rd_argument);
      else if (marg.type == module::argument::image2d_wr ||
               marg.type == module::argument::image3d_wr)
         _args.emplace_back(new image_wr_argument);
      else if (marg.type == module::argument::sampler)
         _args.emplace_back(new sampler_argument);
      else
         throw error(CL_INVALID_KERNEL_DEFINITION);
d57 1
a57 1
   void *st = exec.bind(&q);
d152 2
a153 1
kernel::exec_context::bind(intrusive_ptr<command_queue> _q) {
d160 1
d162 25
a186 3
   for_each([=](kernel::argument &karg, const module::argument &marg) {
               karg.bind(*this, marg);
            }, kern.args(), margs);
d292 36
@


