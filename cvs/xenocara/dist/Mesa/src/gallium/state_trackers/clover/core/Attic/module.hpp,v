head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.09.10;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.46.21;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#ifndef __CORE_MODULE_HPP__
#define __CORE_MODULE_HPP__

#include "core/compat.hpp"

namespace clover {
   struct module {
      class noent_error {
      public:
         virtual ~noent_error() {}
      };

      typedef uint32_t resource_id;
      typedef uint32_t size_t;

      struct section {
         enum type {
            text,
            data_constant,
            data_global,
            data_local,
            data_private
         };

         section(resource_id id, enum type type, size_t size,
                 const clover::compat::vector<char> &data) :
                 id(id), type(type), size(size), data(data) { }
         section() : id(0), type(text), size(0), data() { }

         resource_id id;
         type type;
         size_t size;
         clover::compat::vector<char> data;
      };

      struct argument {
         enum type {
            scalar,
            constant,
            global,
            local,
            image2d_rd,
            image2d_wr,
            image3d_rd,
            image3d_wr,
            sampler
         };

         enum ext_type {
            zero_ext,
            sign_ext
         };

         argument(enum type type, size_t size,
                  size_t target_size, size_t target_align,
                  enum ext_type ext_type) :
            type(type), size(size),
            target_size(target_size), target_align(target_align),
            ext_type(ext_type) { }

         argument(enum type type, size_t size) :
            type(type), size(size),
            target_size(size), target_align(1),
            ext_type(zero_ext) { }

         argument() : type(scalar), size(0),
                      target_size(0), target_align(1),
                      ext_type(zero_ext) { }

         type type;
         size_t size;
         size_t target_size;
         size_t target_align;
         ext_type ext_type;
      };

      struct symbol {
         symbol(const clover::compat::vector<char> &name, resource_id section,
                size_t offset, const clover::compat::vector<argument> &args) :
                name(name), section(section), offset(offset), args(args) { }
         symbol() : name(), section(0), offset(0), args() { }

         clover::compat::vector<char> name;
         resource_id section;
         size_t offset;
         clover::compat::vector<argument> args;
      };

      void serialize(compat::ostream &os) const;
      static module deserialize(compat::istream &is);

      /// Look up a symbol by name.  Throws module::noent_error if not
      /// found.
      const symbol &sym(compat::string name) const;

      /// Look up a section by type.  Throws module::noent_error if not
      /// found.
      const section &sec(typename section::type type) const;

      clover::compat::vector<symbol> syms;
      clover::compat::vector<section> secs;
   };
}

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d23 2
a24 2
#ifndef CLOVER_CORE_MODULE_HPP
#define CLOVER_CORE_MODULE_HPP
d26 1
a26 1
#include "util/compat.hpp"
d30 5
d48 1
a48 1
                 const compat::vector<char> &data) :
d55 1
a55 1
         compat::vector<char> data;
d100 2
a101 2
         symbol(const compat::vector<char> &name, resource_id section,
                size_t offset, const compat::vector<argument> &args) :
d105 1
a105 1
         compat::vector<char> name;
d108 1
a108 1
         compat::vector<argument> args;
d114 10
a123 2
      compat::vector<symbol> syms;
      compat::vector<section> secs;
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@a70 6
         enum semantic {
            general,
            grid_dimension,
            grid_offset
         };

d73 1
a73 2
                  enum ext_type ext_type,
                  enum semantic semantic = general) :
d76 1
a76 1
            ext_type(ext_type), semantic(semantic) { }
d81 1
a81 1
            ext_type(zero_ext), semantic(general) { }
d85 1
a85 1
                      ext_type(zero_ext), semantic(general) { }
a91 1
         semantic semantic;
a107 1
      size_t size() const;
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d71 6
d79 2
a80 1
                  enum ext_type ext_type) :
d83 1
a83 1
            ext_type(ext_type) { }
d88 1
a88 1
            ext_type(zero_ext) { }
d92 1
a92 1
                      ext_type(zero_ext) { }
d99 1
d116 1
@


