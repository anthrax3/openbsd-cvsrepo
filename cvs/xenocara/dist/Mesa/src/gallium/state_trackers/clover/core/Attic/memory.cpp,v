head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.09.09;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.46.21;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#include "core/memory.hpp"
#include "core/resource.hpp"

using namespace clover;

_cl_mem::_cl_mem(clover::context &ctx, cl_mem_flags flags,
                 size_t size, void *host_ptr) :
   ctx(ctx), __flags(flags),
   __size(size), __host_ptr(host_ptr),
   __destroy_notify([]{}) {
   if (flags & CL_MEM_COPY_HOST_PTR)
      data.append((char *)host_ptr, size);
}

_cl_mem::~_cl_mem() {
   __destroy_notify();
}

void
_cl_mem::destroy_notify(std::function<void ()> f) {
   __destroy_notify = f;
}

cl_mem_flags
_cl_mem::flags() const {
   return __flags;
}

size_t
_cl_mem::size() const {
   return __size;
}

void *
_cl_mem::host_ptr() const {
   return __host_ptr;
}

buffer::buffer(clover::context &ctx, cl_mem_flags flags,
               size_t size, void *host_ptr) :
   memory_obj(ctx, flags, size, host_ptr) {
}

cl_mem_object_type
buffer::type() const {
   return CL_MEM_OBJECT_BUFFER;
}

root_buffer::root_buffer(clover::context &ctx, cl_mem_flags flags,
                         size_t size, void *host_ptr) :
   buffer(ctx, flags, size, host_ptr) {
}

clover::resource &
root_buffer::resource(cl_command_queue q) {
   // Create a new resource if there's none for this device yet.
   if (!resources.count(&q->dev)) {
      auto r = (!resources.empty() ?
                new root_resource(q->dev, *this, *resources.begin()->second) :
                new root_resource(q->dev, *this, *q, data));

      resources.insert(std::make_pair(&q->dev,
                                      std::unique_ptr<root_resource>(r)));
      data.clear();
   }

   return *resources.find(&q->dev)->second;
}

sub_buffer::sub_buffer(clover::root_buffer &parent, cl_mem_flags flags,
                       size_t offset, size_t size) :
   buffer(parent.ctx, flags, size,
          (char *)parent.host_ptr() + offset),
   parent(parent), __offset(offset) {
}

clover::resource &
sub_buffer::resource(cl_command_queue q) {
   // Create a new resource if there's none for this device yet.
   if (!resources.count(&q->dev)) {
      auto r = new sub_resource(parent.resource(q), { offset() });

      resources.insert(std::make_pair(&q->dev,
                                      std::unique_ptr<sub_resource>(r)));
   }

   return *resources.find(&q->dev)->second;
}

size_t
sub_buffer::offset() const {
   return __offset;
}

image::image(clover::context &ctx, cl_mem_flags flags,
             const cl_image_format *format,
             size_t width, size_t height, size_t depth,
             size_t row_pitch, size_t slice_pitch, size_t size,
             void *host_ptr) :
   memory_obj(ctx, flags, size, host_ptr),
   __format(*format), __width(width), __height(height), __depth(depth),
   __row_pitch(row_pitch), __slice_pitch(slice_pitch) {
}

clover::resource &
image::resource(cl_command_queue q) {
   // Create a new resource if there's none for this device yet.
   if (!resources.count(&q->dev)) {
      auto r = (!resources.empty() ?
                new root_resource(q->dev, *this, *resources.begin()->second) :
                new root_resource(q->dev, *this, *q, data));

      resources.insert(std::make_pair(&q->dev,
                                      std::unique_ptr<root_resource>(r)));
      data.clear();
   }

   return *resources.find(&q->dev)->second;
}

cl_image_format
image::format() const {
   return __format;
}

size_t
image::width() const {
   return __width;
}

size_t
image::height() const {
   return __height;
}

size_t
image::depth() const {
   return __depth;
}

size_t
image::row_pitch() const {
   return __row_pitch;
}

size_t
image::slice_pitch() const {
   return __slice_pitch;
}

image2d::image2d(clover::context &ctx, cl_mem_flags flags,
                 const cl_image_format *format, size_t width,
                 size_t height, size_t row_pitch,
                 void *host_ptr) :
   image(ctx, flags, format, width, height, 0,
         row_pitch, 0, height * row_pitch, host_ptr) {
}

cl_mem_object_type
image2d::type() const {
   return CL_MEM_OBJECT_IMAGE2D;
}

image3d::image3d(clover::context &ctx, cl_mem_flags flags,
                 const cl_image_format *format,
                 size_t width, size_t height, size_t depth,
                 size_t row_pitch, size_t slice_pitch,
                 void *host_ptr) :
   image(ctx, flags, format, width, height, depth,
         row_pitch, slice_pitch, depth * slice_pitch,
         host_ptr) {
}

cl_mem_object_type
image3d::type() const {
   return CL_MEM_OBJECT_IMAGE3D;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@a24 1
#include "util/u_format.h"
d28 6
a33 6
memory_obj::memory_obj(clover::context &ctx, cl_mem_flags flags,
                       size_t size, void *host_ptr) :
   context(ctx), _flags(flags),
   _size(size), _host_ptr(host_ptr),
   _destroy_notify([]{}) {
   if (flags & (CL_MEM_COPY_HOST_PTR | CL_MEM_USE_HOST_PTR))
d37 2
a38 7
memory_obj::~memory_obj() {
   _destroy_notify();
}

bool
memory_obj::operator==(const memory_obj &obj) const {
   return this == &obj;
d42 2
a43 2
memory_obj::destroy_notify(std::function<void ()> f) {
   _destroy_notify = f;
d47 2
a48 2
memory_obj::flags() const {
   return _flags;
d52 2
a53 2
memory_obj::size() const {
   return _size;
d57 2
a58 2
memory_obj::host_ptr() const {
   return _host_ptr;
d76 2
a77 2
resource &
root_buffer::resource(command_queue &q) {
d79 1
a79 1
   if (!resources.count(&q.device())) {
d81 2
a82 3
                new root_resource(q.device(), *this,
                                  *resources.begin()->second) :
                new root_resource(q.device(), *this, q, data));
d84 1
a84 1
      resources.insert(std::make_pair(&q.device(),
d89 1
a89 1
   return *resources.find(&q.device())->second;
d92 1
a92 1
sub_buffer::sub_buffer(root_buffer &parent, cl_mem_flags flags,
d94 1
a94 1
   buffer(parent.context(), flags, size,
d96 1
a96 1
   parent(parent), _offset(offset) {
d99 2
a100 2
resource &
sub_buffer::resource(command_queue &q) {
d102 2
a103 2
   if (!resources.count(&q.device())) {
      auto r = new sub_resource(parent().resource(q), {{ offset() }});
d105 1
a105 1
      resources.insert(std::make_pair(&q.device(),
d109 1
a109 1
   return *resources.find(&q.device())->second;
d114 1
a114 1
   return _offset;
d123 2
a124 2
   _format(*format), _width(width), _height(height), _depth(depth),
   _row_pitch(row_pitch), _slice_pitch(slice_pitch) {
d127 2
a128 2
resource &
image::resource(command_queue &q) {
d130 1
a130 1
   if (!resources.count(&q.device())) {
d132 2
a133 3
                new root_resource(q.device(), *this,
                                  *resources.begin()->second) :
                new root_resource(q.device(), *this, q, data));
d135 1
a135 1
      resources.insert(std::make_pair(&q.device(),
d140 1
a140 1
   return *resources.find(&q.device())->second;
d145 1
a145 1
   return _format;
d150 1
a150 1
   return _width;
d155 1
a155 1
   return _height;
d160 1
a160 6
   return _depth;
}

size_t
image::pixel_size() const {
   return util_format_get_blocksize(translate_format(_format));
d165 1
a165 1
   return _row_pitch;
d170 1
a170 1
   return _slice_pitch;
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d32 2
a33 1
   _size(size), _host_ptr(host_ptr) {
d39 1
a39 4
   while (_destroy_notify.size()) {
      _destroy_notify.top()();
      _destroy_notify.pop();
   }
d49 1
a49 1
   _destroy_notify.push(f);
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d32 1
a32 2
   _size(size), _host_ptr(host_ptr),
   _destroy_notify([]{}) {
d38 4
a41 1
   _destroy_notify();
d51 1
a51 1
   _destroy_notify = f;
@


