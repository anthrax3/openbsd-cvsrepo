head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.09.09;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.46.21;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#ifndef __CORE_MEMORY_HPP__
#define __CORE_MEMORY_HPP__

#include <functional>
#include <map>
#include <memory>

#include "core/base.hpp"
#include "core/queue.hpp"

namespace clover {
   typedef struct _cl_mem memory_obj;

   class resource;
   class sub_resource;
}

struct _cl_mem : public clover::ref_counter {
protected:
   _cl_mem(clover::context &ctx, cl_mem_flags flags,
           size_t size, void *host_ptr);
   _cl_mem(const _cl_mem &obj) = delete;

public:
   virtual ~_cl_mem();

   virtual cl_mem_object_type type() const = 0;
   virtual clover::resource &resource(cl_command_queue q) = 0;

   void destroy_notify(std::function<void ()> f);
   cl_mem_flags flags() const;
   size_t size() const;
   void *host_ptr() const;

   clover::context &ctx;

private:
   cl_mem_flags __flags;
   size_t __size;
   void *__host_ptr;
   std::function<void ()> __destroy_notify;

protected:
   std::string data;
};

namespace clover {
   struct buffer : public memory_obj {
   protected:
      buffer(clover::context &ctx, cl_mem_flags flags,
             size_t size, void *host_ptr);

   public:
      virtual cl_mem_object_type type() const;
   };

   struct root_buffer : public buffer {
   public:
      root_buffer(clover::context &ctx, cl_mem_flags flags,
                  size_t size, void *host_ptr);

      virtual clover::resource &resource(cl_command_queue q);

   private:
      std::map<clover::device *,
               std::unique_ptr<clover::root_resource>> resources;
   };

   struct sub_buffer : public buffer {
   public:
      sub_buffer(clover::root_buffer &parent, cl_mem_flags flags,
                 size_t offset, size_t size);

      virtual clover::resource &resource(cl_command_queue q);
      size_t offset() const;

      clover::root_buffer &parent;

   private:
      size_t __offset;
      std::map<clover::device *,
               std::unique_ptr<clover::sub_resource>> resources;
   };

   struct image : public memory_obj {
   protected:
      image(clover::context &ctx, cl_mem_flags flags,
            const cl_image_format *format,
            size_t width, size_t height, size_t depth,
            size_t row_pitch, size_t slice_pitch, size_t size,
            void *host_ptr);

   public:
      virtual clover::resource &resource(cl_command_queue q);
      cl_image_format format() const;
      size_t width() const;
      size_t height() const;
      size_t depth() const;
      size_t row_pitch() const;
      size_t slice_pitch() const;

   private:
      cl_image_format __format;
      size_t __width;
      size_t __height;
      size_t __depth;
      size_t __row_pitch;
      size_t __slice_pitch;
      std::map<clover::device *,
               std::unique_ptr<clover::root_resource>> resources;
   };

   struct image2d : public image {
   public:
      image2d(clover::context &ctx, cl_mem_flags flags,
              const cl_image_format *format, size_t width,
              size_t height, size_t row_pitch,
              void *host_ptr);

      virtual cl_mem_object_type type() const;
   };

   struct image3d : public image {
   public:
      image3d(clover::context &ctx, cl_mem_flags flags,
              const cl_image_format *format,
              size_t width, size_t height, size_t depth,
              size_t row_pitch, size_t slice_pitch,
              void *host_ptr);

      virtual cl_mem_object_type type() const;
   };
}

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d23 2
a24 2
#ifndef CLOVER_CORE_MEMORY_HPP
#define CLOVER_CORE_MEMORY_HPP
d30 1
a30 1
#include "core/object.hpp"
a31 1
#include "core/resource.hpp"
d34 1
a34 4
   class memory_obj : public ref_counter, public _cl_mem {
   protected:
      memory_obj(clover::context &ctx, cl_mem_flags flags,
                 size_t size, void *host_ptr);
d36 32
a67 3
      memory_obj(const memory_obj &obj) = delete;
      memory_obj &
      operator=(const memory_obj &obj) = delete;
d69 2
a70 27
   public:
      virtual ~memory_obj();

      bool
      operator==(const memory_obj &obj) const;

      virtual cl_mem_object_type type() const = 0;
      virtual clover::resource &resource(command_queue &q) = 0;

      void destroy_notify(std::function<void ()> f);
      cl_mem_flags flags() const;
      size_t size() const;
      void *host_ptr() const;

      const intrusive_ref<clover::context> context;

   private:
      cl_mem_flags _flags;
      size_t _size;
      void *_host_ptr;
      std::function<void ()> _destroy_notify;

   protected:
      std::string data;
   };

   class buffer : public memory_obj {
d79 1
a79 1
   class root_buffer : public buffer {
d84 1
a84 1
      virtual clover::resource &resource(command_queue &q);
d87 2
a88 2
      std::map<device *,
               std::unique_ptr<root_resource>> resources;
d91 1
a91 1
   class sub_buffer : public buffer {
d93 1
a93 1
      sub_buffer(root_buffer &parent, cl_mem_flags flags,
d96 1
a96 1
      virtual clover::resource &resource(command_queue &q);
d99 1
a99 1
      const intrusive_ref<root_buffer> parent;
d102 3
a104 3
      size_t _offset;
      std::map<device *,
               std::unique_ptr<sub_resource>> resources;
d107 1
a107 1
   class image : public memory_obj {
d116 1
a116 1
      virtual clover::resource &resource(command_queue &q);
a120 1
      size_t pixel_size() const;
d125 8
a132 8
      cl_image_format _format;
      size_t _width;
      size_t _height;
      size_t _depth;
      size_t _row_pitch;
      size_t _slice_pitch;
      std::map<device *,
               std::unique_ptr<root_resource>> resources;
d135 1
a135 1
   class image2d : public image {
d145 1
a145 1
   class image3d : public image {
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@a28 1
#include <stack>
d64 1
a64 1
      std::stack<std::function<void ()>> _destroy_notify;
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d29 1
d65 1
a65 1
      std::function<void ()> _destroy_notify;
@


