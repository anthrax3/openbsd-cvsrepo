head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.3.0.4
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.10;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.10;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2014.09.07.15.03.38;	author jsg;	state Exp;
branches;
next	;
commitid	dm8VnQHhowGHmemJ;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#include "api/util.hpp"
#include "core/queue.hpp"

using namespace clover;

PUBLIC cl_command_queue
clCreateCommandQueue(cl_context ctx, cl_device_id dev,
                     cl_command_queue_properties props,
                     cl_int *errcode_ret) try {
   if (!ctx)
      throw error(CL_INVALID_CONTEXT);

   if (!ctx->has_device(dev))
      throw error(CL_INVALID_DEVICE);

   if (props & ~(CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE |
                 CL_QUEUE_PROFILING_ENABLE))
      throw error(CL_INVALID_VALUE);

   ret_error(errcode_ret, CL_SUCCESS);
   return new command_queue(*ctx, *dev, props);

} catch (error &e) {
   ret_error(errcode_ret, e);
   return NULL;
}

PUBLIC cl_int
clRetainCommandQueue(cl_command_queue q) {
   if (!q)
      return CL_INVALID_COMMAND_QUEUE;

   q->retain();
   return CL_SUCCESS;
}

PUBLIC cl_int
clReleaseCommandQueue(cl_command_queue q) {
   if (!q)
      return CL_INVALID_COMMAND_QUEUE;

   if (q->release())
      delete q;

   return CL_SUCCESS;
}

PUBLIC cl_int
clGetCommandQueueInfo(cl_command_queue q, cl_command_queue_info param,
                      size_t size, void *buf, size_t *size_ret) {
   if (!q)
      return CL_INVALID_COMMAND_QUEUE;

   switch (param) {
   case CL_QUEUE_CONTEXT:
      return scalar_property<cl_context>(buf, size, size_ret, &q->ctx);

   case CL_QUEUE_DEVICE:
      return scalar_property<cl_device_id>(buf, size, size_ret, &q->dev);

   case CL_QUEUE_REFERENCE_COUNT:
      return scalar_property<cl_uint>(buf, size, size_ret, q->ref_count());

   case CL_QUEUE_PROPERTIES:
      return scalar_property<cl_command_queue_properties>(buf, size, size_ret,
                                                          q->props());

   default:
      return CL_INVALID_VALUE;
   }
}

PUBLIC cl_int
clFlush(cl_command_queue q) {
   if (!q)
      return CL_INVALID_COMMAND_QUEUE;

   q->flush();
   return CL_SUCCESS;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d28 2
a29 2
CLOVER_API cl_command_queue
clCreateCommandQueue(cl_context d_ctx, cl_device_id d_dev,
d31 3
a33 3
                     cl_int *r_errcode) try {
   auto &ctx = obj(d_ctx);
   auto &dev = obj(d_dev);
d35 1
a35 1
   if (!count(dev, ctx.devices()))
d42 2
a43 2
   ret_error(r_errcode, CL_SUCCESS);
   return new command_queue(ctx, dev, props);
d46 1
a46 1
   ret_error(r_errcode, e);
d50 6
a55 3
CLOVER_API cl_int
clRetainCommandQueue(cl_command_queue d_q) try {
   obj(d_q).retain();
d57 1
d59 4
a62 3
} catch (error &e) {
   return e.get();
}
d64 2
a65 4
CLOVER_API cl_int
clReleaseCommandQueue(cl_command_queue d_q) try {
   if (obj(d_q).release())
      delete pobj(d_q);
a67 3

} catch (error &e) {
   return e.get();
d70 5
a74 5
CLOVER_API cl_int
clGetCommandQueueInfo(cl_command_queue d_q, cl_command_queue_info param,
                      size_t size, void *r_buf, size_t *r_size) try {
   property_buffer buf { r_buf, size, r_size };
   auto &q = obj(d_q);
d78 1
a78 2
      buf.as_scalar<cl_context>() = desc(q.context());
      break;
d81 1
a81 2
      buf.as_scalar<cl_device_id>() = desc(q.device());
      break;
d84 1
a84 2
      buf.as_scalar<cl_uint>() = q.ref_count();
      break;
d87 2
a88 2
      buf.as_scalar<cl_command_queue_properties>() = q.properties();
      break;
d91 1
a91 1
      throw error(CL_INVALID_VALUE);
d93 1
d95 4
a98 1
   return CL_SUCCESS;
d100 1
a100 7
} catch (error &e) {
   return e.get();
}

CLOVER_API cl_int
clFlush(cl_command_queue d_q) try {
   obj(d_q).flush();
a101 3

} catch (error &e) {
   return e.get();
@


1.1.1.3
log
@Import Mesa 10.2.7
@
text
@d61 1
a61 5
   auto &q = obj(d_q);

   q.flush();

   if (q.release())
@


