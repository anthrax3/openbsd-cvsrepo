head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.10;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.10;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#include "api/util.hpp"
#include "core/event.hpp"

using namespace clover;

PUBLIC cl_event
clCreateUserEvent(cl_context ctx, cl_int *errcode_ret) try {
   if (!ctx)
      throw error(CL_INVALID_CONTEXT);

   ret_error(errcode_ret, CL_SUCCESS);
   return new soft_event(*ctx, {}, false);

} catch(error &e) {
   ret_error(errcode_ret, e);
   return NULL;
}

PUBLIC cl_int
clSetUserEventStatus(cl_event ev, cl_int status) {
   if (!dynamic_cast<soft_event *>(ev))
      return CL_INVALID_EVENT;

   if (status > 0)
      return CL_INVALID_VALUE;

   if (ev->status() <= 0)
      return CL_INVALID_OPERATION;

   if (status)
      ev->abort(status);
   else
      ev->trigger();

   return CL_SUCCESS;
}

PUBLIC cl_int
clWaitForEvents(cl_uint num_evs, const cl_event *evs) try {
   if (!num_evs || !evs)
      throw error(CL_INVALID_VALUE);

   std::for_each(evs, evs + num_evs, [&](const cl_event ev) {
         if (!ev)
            throw error(CL_INVALID_EVENT);

         if (&ev->ctx != &evs[0]->ctx)
            throw error(CL_INVALID_CONTEXT);

         if (ev->status() < 0)
            throw error(CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST);
      });

   // Create a temporary soft event that depends on all the events in
   // the wait list
   ref_ptr<soft_event> sev = transfer(
      new soft_event(evs[0]->ctx, { evs, evs + num_evs }, true));

   // ...and wait on it.
   sev->wait();

   return CL_SUCCESS;

} catch(error &e) {
   return e.get();
}

PUBLIC cl_int
clGetEventInfo(cl_event ev, cl_event_info param,
               size_t size, void *buf, size_t *size_ret) {
   if (!ev)
      return CL_INVALID_EVENT;

   switch (param) {
   case CL_EVENT_COMMAND_QUEUE:
      return scalar_property<cl_command_queue>(buf, size, size_ret, ev->queue());

   case CL_EVENT_CONTEXT:
      return scalar_property<cl_context>(buf, size, size_ret, &ev->ctx);

   case CL_EVENT_COMMAND_TYPE:
      return scalar_property<cl_command_type>(buf, size, size_ret, ev->command());

   case CL_EVENT_COMMAND_EXECUTION_STATUS:
      return scalar_property<cl_int>(buf, size, size_ret, ev->status());

   case CL_EVENT_REFERENCE_COUNT:
      return scalar_property<cl_uint>(buf, size, size_ret, ev->ref_count());

   default:
      return CL_INVALID_VALUE;
   }
}

PUBLIC cl_int
clSetEventCallback(cl_event ev, cl_int type,
                   void (CL_CALLBACK *pfn_event_notify)(cl_event, cl_int,
                                                        void *),
                   void *user_data) try {
   if (!ev)
      throw error(CL_INVALID_EVENT);

   if (!pfn_event_notify || type != CL_COMPLETE)
      throw error(CL_INVALID_VALUE);

   // Create a temporary soft event that depends on ev, with
   // pfn_event_notify as completion action.
   ref_ptr<soft_event> sev = transfer(
      new soft_event(ev->ctx, { ev }, true,
                     [=](event &) {
                        ev->wait();
                        pfn_event_notify(ev, ev->status(), user_data);
                     }));

   return CL_SUCCESS;

} catch(error &e) {
   return e.get();
}

PUBLIC cl_int
clRetainEvent(cl_event ev) {
   if (!ev)
      return CL_INVALID_EVENT;

   ev->retain();
   return CL_SUCCESS;
}

PUBLIC cl_int
clReleaseEvent(cl_event ev) {
   if (!ev)
      return CL_INVALID_EVENT;

   if (ev->release())
      delete ev;

   return CL_SUCCESS;
}

PUBLIC cl_int
clEnqueueMarker(cl_command_queue q, cl_event *ev) try {
   if (!q)
      throw error(CL_INVALID_COMMAND_QUEUE);

   if (!ev)
      throw error(CL_INVALID_VALUE);

   *ev = new hard_event(*q, CL_COMMAND_MARKER, {});

   return CL_SUCCESS;

} catch(error &e) {
   return e.get();
}

PUBLIC cl_int
clEnqueueBarrier(cl_command_queue q) {
   if (!q)
      return CL_INVALID_COMMAND_QUEUE;

   // No need to do anything, q preserves data ordering strictly.
   return CL_SUCCESS;
}

PUBLIC cl_int
clEnqueueWaitForEvents(cl_command_queue q, cl_uint num_evs,
                       const cl_event *evs) try {
   if (!q)
      throw error(CL_INVALID_COMMAND_QUEUE);

   if (!num_evs || !evs)
      throw error(CL_INVALID_VALUE);

   std::for_each(evs, evs + num_evs, [&](const cl_event ev) {
         if (!ev)
            throw error(CL_INVALID_EVENT);

         if (&ev->ctx != &q->ctx)
            throw error(CL_INVALID_CONTEXT);
      });

   // Create a hard event that depends on the events in the wait list:
   // subsequent commands in the same queue will be implicitly
   // serialized with respect to it -- hard events always are.
   ref_ptr<hard_event> hev = transfer(
      new hard_event(*q, 0, { evs, evs + num_evs }));

   return CL_SUCCESS;

} catch(error &e) {
   return e.get();
}

PUBLIC cl_int
clGetEventProfilingInfo(cl_event ev, cl_profiling_info param,
                        size_t size, void *buf, size_t *size_ret) {
   return CL_PROFILING_INFO_NOT_AVAILABLE;
}

PUBLIC cl_int
clFinish(cl_command_queue q) try {
   if (!q)
      throw error(CL_INVALID_COMMAND_QUEUE);

   // Create a temporary hard event -- it implicitly depends on all
   // the previously queued hard events.
   ref_ptr<hard_event> hev = transfer(new hard_event(*q, 0, { }));

   // And wait on it.
   hev->wait();

   return CL_SUCCESS;

} catch(error &e) {
   return e.get();
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d28 4
a31 3
CLOVER_API cl_event
clCreateUserEvent(cl_context d_ctx, cl_int *r_errcode) try {
   auto &ctx = obj(d_ctx);
d33 2
a34 2
   ret_error(r_errcode, CL_SUCCESS);
   return desc(new soft_event(ctx, {}, false));
d36 2
a37 2
} catch (error &e) {
   ret_error(r_errcode, e);
d41 4
a44 3
CLOVER_API cl_int
clSetUserEventStatus(cl_event d_ev, cl_int status) try {
   auto &sev = obj<soft_event>(d_ev);
d49 1
a49 1
   if (sev.status() <= 0)
d53 1
a53 1
      sev.abort(status);
d55 1
a55 1
      sev.trigger();
a57 3

} catch (error &e) {
   return e.get();
d60 4
a63 7
CLOVER_API cl_int
clWaitForEvents(cl_uint num_evs, const cl_event *d_evs) try {
   auto evs = objs(d_evs, num_evs);

   for (auto &ev : evs) {
      if (ev.context() != evs.front().context())
         throw error(CL_INVALID_CONTEXT);
d65 10
a74 3
      if (ev.status() < 0)
         throw error(CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST);
   }
d78 2
a79 1
   auto sev = create<soft_event>(evs.front().context(), evs, true);
d82 1
a82 1
   sev().wait();
d86 1
a86 1
} catch (error &e) {
d90 5
a94 5
CLOVER_API cl_int
clGetEventInfo(cl_event d_ev, cl_event_info param,
               size_t size, void *r_buf, size_t *r_size) try {
   property_buffer buf { r_buf, size, r_size };
   auto &ev = obj(d_ev);
d98 1
a98 2
      buf.as_scalar<cl_command_queue>() = desc(ev.queue());
      break;
d101 1
a101 2
      buf.as_scalar<cl_context>() = desc(ev.context());
      break;
d104 1
a104 2
      buf.as_scalar<cl_command_type>() = ev.command();
      break;
d107 1
a107 2
      buf.as_scalar<cl_int>() = ev.status();
      break;
d110 1
a110 2
      buf.as_scalar<cl_uint>() = ev.ref_count();
      break;
d113 1
a113 1
      throw error(CL_INVALID_VALUE);
a114 5

   return CL_SUCCESS;

} catch (error &e) {
   return e.get();
d117 4
a120 3
CLOVER_API cl_int
clSetEventCallback(cl_event d_ev, cl_int type,
                   void (CL_CALLBACK *pfn_notify)(cl_event, cl_int, void *),
d122 2
a123 1
   auto &ev = obj(d_ev);
d125 1
a125 1
   if (!pfn_notify || type != CL_COMPLETE)
d129 7
a135 6
   // pfn_notify as completion action.
   create<soft_event>(ev.context(), ref_vector<event> { ev }, true,
                      [=, &ev](event &) {
                         ev.wait();
                         pfn_notify(desc(ev), ev.status(), user_data);
                      });
d139 1
a139 1
} catch (error &e) {
d143 6
a148 3
CLOVER_API cl_int
clRetainEvent(cl_event d_ev) try {
   obj(d_ev).retain();
d150 1
d152 4
a155 3
} catch (error &e) {
   return e.get();
}
d157 2
a158 4
CLOVER_API cl_int
clReleaseEvent(cl_event d_ev) try {
   if (obj(d_ev).release())
      delete pobj(d_ev);
a160 3

} catch (error &e) {
   return e.get();
d163 4
a166 3
CLOVER_API cl_int
clEnqueueMarker(cl_command_queue d_q, cl_event *rd_ev) try {
   auto &q = obj(d_q);
d168 1
a168 1
   if (!rd_ev)
d171 1
a171 1
   *rd_ev = desc(new hard_event(q, CL_COMMAND_MARKER, {}));
d175 1
a175 1
} catch (error &e) {
d179 4
a182 10
CLOVER_API cl_int
clEnqueueMarkerWithWaitList(cl_command_queue d_q, cl_uint num_deps,
                            const cl_event *d_deps, cl_event *rd_ev) try {
   auto &q = obj(d_q);
   auto deps = objs<wait_list_tag>(d_deps, num_deps);

   for (auto &ev : deps) {
      if (ev.context() != q.context())
         throw error(CL_INVALID_CONTEXT);
   }
d184 1
a184 6
   // Create a hard event that depends on the events in the wait list:
   // previous commands in the same queue are implicitly serialized
   // with respect to it -- hard events always are.
   auto hev = create<hard_event>(q, CL_COMMAND_MARKER, deps);

   ret_object(rd_ev, hev);
a185 3

} catch (error &e) {
   return e.get();
d188 5
a192 3
CLOVER_API cl_int
clEnqueueBarrier(cl_command_queue d_q) try {
   obj(d_q);
d194 2
a195 1
   // No need to do anything, q preserves data ordering strictly.
d197 7
a203 16
   return CL_SUCCESS;

} catch (error &e) {
   return e.get();
}

CLOVER_API cl_int
clEnqueueBarrierWithWaitList(cl_command_queue d_q, cl_uint num_deps,
                             const cl_event *d_deps, cl_event *rd_ev) try {
   auto &q = obj(d_q);
   auto deps = objs<wait_list_tag>(d_deps, num_deps);

   for (auto &ev : deps) {
      if (ev.context() != q.context())
         throw error(CL_INVALID_CONTEXT);
   }
d208 2
a209 1
   auto hev = create<hard_event>(q, CL_COMMAND_BARRIER, deps);
a210 1
   ret_object(rd_ev, hev);
d213 1
a213 13
} catch (error &e) {
   return e.get();
}

CLOVER_API cl_int
clEnqueueWaitForEvents(cl_command_queue d_q, cl_uint num_evs,
                       const cl_event *d_evs) try {
   // The wait list is mandatory for clEnqueueWaitForEvents().
   objs(d_evs, num_evs);

   return clEnqueueBarrierWithWaitList(d_q, num_evs, d_evs, NULL);

} catch (error &e) {
d217 3
a219 36
CLOVER_API cl_int
clGetEventProfilingInfo(cl_event d_ev, cl_profiling_info param,
                        size_t size, void *r_buf, size_t *r_size) try {
   property_buffer buf { r_buf, size, r_size };
   hard_event &hev = dynamic_cast<hard_event &>(obj(d_ev));

   if (hev.status() != CL_COMPLETE)
      throw error(CL_PROFILING_INFO_NOT_AVAILABLE);

   switch (param) {
   case CL_PROFILING_COMMAND_QUEUED:
      buf.as_scalar<cl_ulong>() = hev.time_queued();
      break;

   case CL_PROFILING_COMMAND_SUBMIT:
      buf.as_scalar<cl_ulong>() = hev.time_submit();
      break;

   case CL_PROFILING_COMMAND_START:
      buf.as_scalar<cl_ulong>() = hev.time_start();
      break;

   case CL_PROFILING_COMMAND_END:
      buf.as_scalar<cl_ulong>() = hev.time_end();
      break;

   default:
      throw error(CL_INVALID_VALUE);
   }

   return CL_SUCCESS;

} catch (std::bad_cast &e) {
   return CL_PROFILING_INFO_NOT_AVAILABLE;

} catch (lazy<cl_ulong>::undefined_error &e) {
a220 3

} catch (error &e) {
   return e.get();
d223 4
a226 3
CLOVER_API cl_int
clFinish(cl_command_queue d_q) try {
   auto &q = obj(d_q);
d230 1
a230 1
   auto hev = create<hard_event>(q, 0, ref_vector<event> {});
d233 1
a233 1
   hev().wait();
d237 1
a237 1
} catch (error &e) {
@

