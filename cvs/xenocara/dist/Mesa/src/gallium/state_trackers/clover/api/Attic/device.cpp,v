head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.10;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.10;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.09.08;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.46.19;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#include "api/util.hpp"
#include "core/platform.hpp"
#include "core/device.hpp"

using namespace clover;

PUBLIC cl_int
clGetDeviceIDs(cl_platform_id platform, cl_device_type device_type,
               cl_uint num_entries, cl_device_id *devices,
               cl_uint *num_devices) {
   std::vector<cl_device_id> devs;

   if ((!num_entries && devices) ||
       (!num_devices && !devices))
      return CL_INVALID_VALUE;

   // Collect matching devices
   for (device &dev : *platform) {
      if (((device_type & CL_DEVICE_TYPE_DEFAULT) &&
           &dev == &platform->front()) ||
          (device_type & dev.type()))
         devs.push_back(&dev);
   }

   if (devs.empty())
      return CL_DEVICE_NOT_FOUND;

   // ...and return the requested data.
   if (num_devices)
      *num_devices = devs.size();
   if (devices)
      std::copy_n(devs.begin(),
                  std::min((cl_uint)devs.size(), num_entries),
                  devices);

   return CL_SUCCESS;
}

PUBLIC cl_int
clGetDeviceInfo(cl_device_id dev, cl_device_info param,
                size_t size, void *buf, size_t *size_ret) {
   if (!dev)
      return CL_INVALID_DEVICE;

   switch (param) {
   case CL_DEVICE_TYPE:
      return scalar_property<cl_device_type>(buf, size, size_ret, dev->type());

   case CL_DEVICE_VENDOR_ID:
      return scalar_property<cl_uint>(buf, size, size_ret, dev->vendor_id());

   case CL_DEVICE_MAX_COMPUTE_UNITS:
      return scalar_property<cl_uint>(buf, size, size_ret, 1);

   case CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS:
      return scalar_property<cl_uint>(buf, size, size_ret,
                                      dev->max_block_size().size());

   case CL_DEVICE_MAX_WORK_ITEM_SIZES:
      return vector_property<size_t>(buf, size, size_ret,
                                     dev->max_block_size());

   case CL_DEVICE_MAX_WORK_GROUP_SIZE:
      return scalar_property<size_t>(buf, size, size_ret,
                                     dev->max_threads_per_block());

   case CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR:
      return scalar_property<cl_uint>(buf, size, size_ret, 16);

   case CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT:
      return scalar_property<cl_uint>(buf, size, size_ret, 8);

   case CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT:
      return scalar_property<cl_uint>(buf, size, size_ret, 4);

   case CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG:
      return scalar_property<cl_uint>(buf, size, size_ret, 2);

   case CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT:
      return scalar_property<cl_uint>(buf, size, size_ret, 4);

   case CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE:
      return scalar_property<cl_uint>(buf, size, size_ret, 2);

   case CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF:
      return scalar_property<cl_uint>(buf, size, size_ret, 0);

   case CL_DEVICE_MAX_CLOCK_FREQUENCY:
      return scalar_property<cl_uint>(buf, size, size_ret, 0);

   case CL_DEVICE_ADDRESS_BITS:
      return scalar_property<cl_uint>(buf, size, size_ret, 32);

   case CL_DEVICE_MAX_READ_IMAGE_ARGS:
      return scalar_property<cl_uint>(buf, size, size_ret,
                                      dev->max_images_read());

   case CL_DEVICE_MAX_WRITE_IMAGE_ARGS:
      return scalar_property<cl_uint>(buf, size, size_ret,
                                      dev->max_images_write());

   case CL_DEVICE_MAX_MEM_ALLOC_SIZE:
      return scalar_property<cl_ulong>(buf, size, size_ret,
                                       dev->max_mem_alloc_size());

   case CL_DEVICE_IMAGE2D_MAX_WIDTH:
   case CL_DEVICE_IMAGE2D_MAX_HEIGHT:
      return scalar_property<size_t>(buf, size, size_ret,
                                     1 << dev->max_image_levels_2d());

   case CL_DEVICE_IMAGE3D_MAX_WIDTH:
   case CL_DEVICE_IMAGE3D_MAX_HEIGHT:
   case CL_DEVICE_IMAGE3D_MAX_DEPTH:
      return scalar_property<size_t>(buf, size, size_ret,
                                     1 << dev->max_image_levels_3d());

   case CL_DEVICE_IMAGE_SUPPORT:
      return scalar_property<cl_bool>(buf, size, size_ret, CL_TRUE);

   case CL_DEVICE_MAX_PARAMETER_SIZE:
      return scalar_property<size_t>(buf, size, size_ret,
                                     dev->max_mem_input());

   case CL_DEVICE_MAX_SAMPLERS:
      return scalar_property<cl_uint>(buf, size, size_ret,
                                      dev->max_samplers());

   case CL_DEVICE_MEM_BASE_ADDR_ALIGN:
   case CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE:
      return scalar_property<cl_uint>(buf, size, size_ret, 128);

   case CL_DEVICE_SINGLE_FP_CONFIG:
      return scalar_property<cl_device_fp_config>(buf, size, size_ret,
         CL_FP_DENORM | CL_FP_INF_NAN | CL_FP_ROUND_TO_NEAREST);

   case CL_DEVICE_GLOBAL_MEM_CACHE_TYPE:
      return scalar_property<cl_device_mem_cache_type>(buf, size, size_ret,
                                                       CL_NONE);

   case CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE:
      return scalar_property<cl_uint>(buf, size, size_ret, 0);

   case CL_DEVICE_GLOBAL_MEM_CACHE_SIZE:
      return scalar_property<cl_ulong>(buf, size, size_ret, 0);

   case CL_DEVICE_GLOBAL_MEM_SIZE:
      return scalar_property<cl_ulong>(buf, size, size_ret,
                                       dev->max_mem_global());

   case CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE:
      return scalar_property<cl_ulong>(buf, size, size_ret,
                                       dev->max_const_buffer_size());

   case CL_DEVICE_MAX_CONSTANT_ARGS:
      return scalar_property<cl_uint>(buf, size, size_ret,
                                      dev->max_const_buffers());

   case CL_DEVICE_LOCAL_MEM_TYPE:
      return scalar_property<cl_device_local_mem_type>(buf, size, size_ret,
                                                       CL_LOCAL);

   case CL_DEVICE_LOCAL_MEM_SIZE:
      return scalar_property<cl_ulong>(buf, size, size_ret,
                                       dev->max_mem_local());

   case CL_DEVICE_ERROR_CORRECTION_SUPPORT:
      return scalar_property<cl_bool>(buf, size, size_ret, CL_FALSE);

   case CL_DEVICE_PROFILING_TIMER_RESOLUTION:
      return scalar_property<size_t>(buf, size, size_ret, 0);

   case CL_DEVICE_ENDIAN_LITTLE:
      return scalar_property<cl_bool>(buf, size, size_ret,
                                      dev->endianness() == PIPE_ENDIAN_LITTLE);

   case CL_DEVICE_AVAILABLE:
   case CL_DEVICE_COMPILER_AVAILABLE:
      return scalar_property<cl_bool>(buf, size, size_ret, CL_TRUE);

   case CL_DEVICE_EXECUTION_CAPABILITIES:
      return scalar_property<cl_device_exec_capabilities>(buf, size, size_ret,
                                                          CL_EXEC_KERNEL);

   case CL_DEVICE_QUEUE_PROPERTIES:
      return scalar_property<cl_command_queue_properties>(buf, size, size_ret,
         CL_QUEUE_PROFILING_ENABLE);

   case CL_DEVICE_NAME:
      return string_property(buf, size, size_ret, dev->device_name());

   case CL_DEVICE_VENDOR:
      return string_property(buf, size, size_ret, dev->vendor_name());

   case CL_DRIVER_VERSION:
      return string_property(buf, size, size_ret, PACKAGE_VERSION);

   case CL_DEVICE_PROFILE:
      return string_property(buf, size, size_ret, "FULL_PROFILE");

   case CL_DEVICE_VERSION:
      return string_property(buf, size, size_ret,
                             "OpenCL 1.1 MESA " PACKAGE_VERSION);

   case CL_DEVICE_EXTENSIONS:
      return string_property(buf, size, size_ret, "");

   case CL_DEVICE_PLATFORM:
      return scalar_property<cl_platform_id>(buf, size, size_ret,
                                             &dev->platform);

   case CL_DEVICE_HOST_UNIFIED_MEMORY:
      return scalar_property<cl_bool>(buf, size, size_ret, CL_TRUE);

   case CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR:
      return scalar_property<cl_uint>(buf, size, size_ret, 16);

   case CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT:
      return scalar_property<cl_uint>(buf, size, size_ret, 8);

   case CL_DEVICE_NATIVE_VECTOR_WIDTH_INT:
      return scalar_property<cl_uint>(buf, size, size_ret, 4);

   case CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG:
      return scalar_property<cl_uint>(buf, size, size_ret, 2);

   case CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT:
      return scalar_property<cl_uint>(buf, size, size_ret, 4);

   case CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE:
      return scalar_property<cl_uint>(buf, size, size_ret, 2);

   case CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF:
      return scalar_property<cl_uint>(buf, size, size_ret, 0);

   case CL_DEVICE_OPENCL_C_VERSION:
      return string_property(buf, size, size_ret, "OpenCL C 1.1");

   default:
      return CL_INVALID_VALUE;
   }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d29 9
a37 10
CLOVER_API cl_int
clGetDeviceIDs(cl_platform_id d_platform, cl_device_type device_type,
               cl_uint num_entries, cl_device_id *rd_devices,
               cl_uint *rnum_devices) try {
   auto &platform = obj(d_platform);
   std::vector<cl_device_id> d_devs;

   if ((!num_entries && rd_devices) ||
       (!rnum_devices && !rd_devices))
      throw error(CL_INVALID_VALUE);
d40 1
a40 1
   for (device &dev : platform) {
d42 1
a42 1
           dev == platform.front()) ||
d44 1
a44 1
         d_devs.push_back(desc(dev));
d47 2
a48 2
   if (d_devs.empty())
      throw error(CL_DEVICE_NOT_FOUND);
d51 6
a56 6
   if (rnum_devices)
      *rnum_devices = d_devs.size();
   if (rd_devices)
      copy(range(d_devs.begin(),
                 std::min((unsigned)d_devs.size(), num_entries)),
           rd_devices);
a58 12

} catch (error &e) {
   return e.get();
}

CLOVER_API cl_int
clCreateSubDevices(cl_device_id d_dev,
                   const cl_device_partition_property *props,
                   cl_uint num_devs, cl_device_id *rd_devs,
                   cl_uint *rnum_devs) {
   // There are no currently supported partitioning schemes.
   return CL_INVALID_VALUE;
d61 5
a65 27
CLOVER_API cl_int
clRetainDevice(cl_device_id d_dev) try {
   obj(d_dev);

   // The reference count doesn't change for root devices.
   return CL_SUCCESS;

} catch (error &e) {
   return e.get();
}

CLOVER_API cl_int
clReleaseDevice(cl_device_id d_dev) try {
   obj(d_dev);

   // The reference count doesn't change for root devices.
   return CL_SUCCESS;

} catch (error &e) {
   return e.get();
}

CLOVER_API cl_int
clGetDeviceInfo(cl_device_id d_dev, cl_device_info param,
                size_t size, void *r_buf, size_t *r_size) try {
   property_buffer buf { r_buf, size, r_size };
   auto &dev = obj(d_dev);
d69 1
a69 2
      buf.as_scalar<cl_device_type>() = dev.type();
      break;
d72 1
a72 2
      buf.as_scalar<cl_uint>() = dev.vendor_id();
      break;
d75 1
a75 2
      buf.as_scalar<cl_uint>() = 1;
      break;
d78 2
a79 2
      buf.as_scalar<cl_uint>() = dev.max_block_size().size();
      break;
d82 2
a83 2
      buf.as_vector<size_t>() = dev.max_block_size();
      break;
d86 2
a87 2
      buf.as_scalar<size_t>() = dev.max_threads_per_block();
      break;
d90 1
a90 2
      buf.as_scalar<cl_uint>() = 16;
      break;
d93 1
a93 2
      buf.as_scalar<cl_uint>() = 8;
      break;
d96 1
a96 2
      buf.as_scalar<cl_uint>() = 4;
      break;
d99 1
a99 2
      buf.as_scalar<cl_uint>() = 2;
      break;
d102 1
a102 2
      buf.as_scalar<cl_uint>() = 4;
      break;
d105 1
a105 2
      buf.as_scalar<cl_uint>() = 2;
      break;
d108 1
a108 2
      buf.as_scalar<cl_uint>() = 0;
      break;
d111 1
a111 2
      buf.as_scalar<cl_uint>() = dev.max_clock_frequency();
      break;
d114 1
a114 2
      buf.as_scalar<cl_uint>() = 32;
      break;
d117 2
a118 2
      buf.as_scalar<cl_uint>() = dev.max_images_read();
      break;
d121 2
a122 2
      buf.as_scalar<cl_uint>() = dev.max_images_write();
      break;
d125 2
a126 2
      buf.as_scalar<cl_ulong>() = dev.max_mem_alloc_size();
      break;
d130 2
a131 2
      buf.as_scalar<size_t>() = 1 << dev.max_image_levels_2d();
      break;
d136 2
a137 2
      buf.as_scalar<size_t>() = 1 << dev.max_image_levels_3d();
      break;
d140 1
a140 2
      buf.as_scalar<cl_bool>() = CL_TRUE;
      break;
d143 2
a144 2
      buf.as_scalar<size_t>() = dev.max_mem_input();
      break;
d147 2
a148 2
      buf.as_scalar<cl_uint>() = dev.max_samplers();
      break;
d152 1
a152 2
      buf.as_scalar<cl_uint>() = 128;
      break;
d155 2
a156 3
      buf.as_scalar<cl_device_fp_config>() =
         CL_FP_DENORM | CL_FP_INF_NAN | CL_FP_ROUND_TO_NEAREST;
      break;
d159 2
a160 2
      buf.as_scalar<cl_device_mem_cache_type>() = CL_NONE;
      break;
d163 1
a163 2
      buf.as_scalar<cl_uint>() = 0;
      break;
d166 1
a166 2
      buf.as_scalar<cl_ulong>() = 0;
      break;
d169 2
a170 2
      buf.as_scalar<cl_ulong>() = dev.max_mem_global();
      break;
d173 2
a174 2
      buf.as_scalar<cl_ulong>() = dev.max_const_buffer_size();
      break;
d177 2
a178 2
      buf.as_scalar<cl_uint>() = dev.max_const_buffers();
      break;
d181 2
a182 2
      buf.as_scalar<cl_device_local_mem_type>() = CL_LOCAL;
      break;
d185 2
a186 2
      buf.as_scalar<cl_ulong>() = dev.max_mem_local();
      break;
d189 1
a189 2
      buf.as_scalar<cl_bool>() = CL_FALSE;
      break;
d192 1
a192 2
      buf.as_scalar<size_t>() = 0;
      break;
d195 2
a196 2
      buf.as_scalar<cl_bool>() = (dev.endianness() == PIPE_ENDIAN_LITTLE);
      break;
d200 1
a200 2
      buf.as_scalar<cl_bool>() = CL_TRUE;
      break;
d203 2
a204 2
      buf.as_scalar<cl_device_exec_capabilities>() = CL_EXEC_KERNEL;
      break;
d207 2
a208 2
      buf.as_scalar<cl_command_queue_properties>() = CL_QUEUE_PROFILING_ENABLE;
      break;
d211 1
a211 2
      buf.as_string() = dev.device_name();
      break;
d214 1
a214 2
      buf.as_string() = dev.vendor_name();
      break;
d217 1
a217 2
      buf.as_string() = PACKAGE_VERSION;
      break;
d220 1
a220 2
      buf.as_string() = "FULL_PROFILE";
      break;
d223 2
a224 2
      buf.as_string() = "OpenCL 1.1 MESA " PACKAGE_VERSION;
      break;
d227 1
a227 2
      buf.as_string() = "";
      break;
d230 2
a231 2
      buf.as_scalar<cl_platform_id>() = desc(dev.platform);
      break;
d234 1
a234 2
      buf.as_scalar<cl_bool>() = CL_TRUE;
      break;
d237 1
a237 2
      buf.as_scalar<cl_uint>() = 16;
      break;
d240 1
a240 2
      buf.as_scalar<cl_uint>() = 8;
      break;
d243 1
a243 2
      buf.as_scalar<cl_uint>() = 4;
      break;
d246 1
a246 2
      buf.as_scalar<cl_uint>() = 2;
      break;
d249 1
a249 2
      buf.as_scalar<cl_uint>() = 4;
      break;
d252 1
a252 2
      buf.as_scalar<cl_uint>() = 2;
      break;
d255 1
a255 2
      buf.as_scalar<cl_uint>() = 0;
      break;
d258 1
a258 28
      buf.as_string() = "OpenCL C 1.1";
      break;

   case CL_DEVICE_PARENT_DEVICE:
      buf.as_scalar<cl_device_id>() = NULL;
      break;

   case CL_DEVICE_PARTITION_MAX_SUB_DEVICES:
      buf.as_scalar<cl_uint>() = 0;
      break;

   case CL_DEVICE_PARTITION_PROPERTIES:
      buf.as_vector<cl_device_partition_property>() =
         desc(property_list<cl_device_partition_property>());
      break;

   case CL_DEVICE_PARTITION_AFFINITY_DOMAIN:
      buf.as_scalar<cl_device_affinity_domain>() = 0;
      break;

   case CL_DEVICE_PARTITION_TYPE:
      buf.as_vector<cl_device_partition_property>() =
         desc(property_list<cl_device_partition_property>());
      break;

   case CL_DEVICE_REFERENCE_COUNT:
      buf.as_scalar<cl_uint>() = 1;
      break;
d261 1
a261 1
      throw error(CL_INVALID_VALUE);
a262 5

   return CL_SUCCESS;

} catch (error &e) {
   return e.get();
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d112 1
a112 1
      buf.as_scalar<cl_uint>() = dev.max_compute_units();
d187 1
a187 1
      buf.as_scalar<cl_bool>() = dev.image_support();
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d112 1
a112 1
      buf.as_scalar<cl_uint>() = 1;
d187 1
a187 1
      buf.as_scalar<cl_bool>() = CL_TRUE;
@


