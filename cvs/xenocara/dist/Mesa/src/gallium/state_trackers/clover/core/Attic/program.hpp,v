head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.11;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.09.10;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.46.21;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#ifndef __CORE_PROGRAM_HPP__
#define __CORE_PROGRAM_HPP__

#include <map>

#include "core/base.hpp"
#include "core/context.hpp"
#include "core/module.hpp"

namespace clover {
   typedef struct _cl_program program;
}

struct _cl_program : public clover::ref_counter {
public:
   _cl_program(clover::context &ctx,
               const std::string &source);
   _cl_program(clover::context &ctx,
               const std::vector<clover::device *> &devs,
               const std::vector<clover::module> &binaries);

   void build(const std::vector<clover::device *> &devs, const char *opts);

   const std::string &source() const;
   const std::map<clover::device *, clover::module> &binaries() const;

   cl_build_status build_status(clover::device *dev) const;
   std::string build_opts(clover::device *dev) const;
   std::string build_log(clover::device *dev) const;

   clover::context &ctx;

private:
   std::map<clover::device *, clover::module> __binaries;
   std::map<clover::device *, std::string> __logs;
   std::map<clover::device *, std::string> __opts;
   std::string __source;
};

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d23 2
a24 2
#ifndef CLOVER_CORE_PROGRAM_HPP
#define CLOVER_CORE_PROGRAM_HPP
d28 1
a28 1
#include "core/object.hpp"
d33 1
a33 39
   class program : public ref_counter, public _cl_program {
   private:
      typedef adaptor_range<
         evals, const std::vector<intrusive_ref<device>> &> device_range;

   public:
      program(clover::context &ctx,
              const std::string &source);
      program(clover::context &ctx,
              const ref_vector<device> &devs,
              const std::vector<module> &binaries);

      program(const program &prog) = delete;
      program &
      operator=(const program &prog) = delete;

      void build(const ref_vector<device> &devs, const char *opts);

      const bool has_source;
      const std::string &source() const;

      device_range devices() const;

      const module &binary(const device &dev) const;
      cl_build_status build_status(const device &dev) const;
      std::string build_opts(const device &dev) const;
      std::string build_log(const device &dev) const;

      const compat::vector<module::symbol> &symbols() const;

      const intrusive_ref<clover::context> context;

   private:
      std::vector<intrusive_ref<device>> _devices;
      std::map<const device *, module> _binaries;
      std::map<const device *, std::string> _logs;
      std::map<const device *, std::string> _opts;
      std::string _source;
   };
d35 26
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@a30 1
#include "core/compiler.hpp"
d49 1
a49 2
      void build(const ref_vector<device> &devs, const char *opts,
                 const header_map &headers = {});
a62 2
      unsigned kernel_ref_count() const;

a64 2
      friend class kernel;

a70 1
      ref_counter _kernel_ref_counter;
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d31 1
d50 2
a51 1
      void build(const ref_vector<device> &devs, const char *opts);
d65 2
d69 2
d77 1
@


