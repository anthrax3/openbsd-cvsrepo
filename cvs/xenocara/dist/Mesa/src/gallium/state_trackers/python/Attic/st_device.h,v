head	1.3;
access;
symbols
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2012.08.17.13.58.07;	author mpi;	state dead;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@/**************************************************************************
 * 
 * Copyright 2008 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/


#ifndef ST_DEVICE_H_
#define ST_DEVICE_H_


#include "pipe/p_state.h"

struct cso_context;
struct pipe_screen;
struct pipe_context;
struct st_winsys; 


struct st_surface
{
   struct pipe_resource *texture;
   unsigned level;
   unsigned layer;
};


struct st_context
{
   struct st_device *st_dev;
   
   struct pipe_context *pipe;
   
   struct cso_context *cso;
   
   void *vs;
   void *fs;
   void *gs;

   struct pipe_resource *default_texture;
   struct pipe_sampler_view *fragment_sampler_views[PIPE_MAX_SAMPLERS];
   struct pipe_sampler_view *vertex_sampler_views[PIPE_MAX_VERTEX_SAMPLERS];
   
   unsigned num_vertex_buffers;
   struct pipe_vertex_buffer vertex_buffers[PIPE_MAX_ATTRIBS];
   
   unsigned num_vertex_elements;
   struct pipe_vertex_element vertex_elements[PIPE_MAX_ATTRIBS];
   
   struct pipe_framebuffer_state framebuffer;
};


struct st_device
{
   /* FIXME: we also need to refcount for textures and surfaces... */
   struct pipe_reference reference;

   struct pipe_screen *screen;
};


static INLINE struct pipe_surface *
st_pipe_surface(struct pipe_context *pipe, struct st_surface *surface, unsigned usage) 
{
   struct pipe_resource *texture = surface->texture;
   struct pipe_surface surf_tmpl;
   memset(&surf_tmpl, 0, sizeof(surf_tmpl));
   surf_tmpl.format = texture->format;
   surf_tmpl.usage = usage;
   surf_tmpl.u.tex.level = surface->level;
   surf_tmpl.u.tex.first_layer = surface->layer;
   surf_tmpl.u.tex.last_layer = surface->layer;
   return pipe->create_surface(pipe, texture, &surf_tmpl);
}

struct st_context *
st_context_create(struct st_device *st_dev);

void
st_context_destroy(struct st_context *st_ctx);

struct st_device *
st_device_create(boolean hardware);

void
st_device_destroy(struct st_device *st_dev);


#endif /* ST_DEVICE_H_ */
@


1.2
log
@Merge Mesa 7.10.3
@
text
@@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d43 1
a43 2
   struct pipe_texture *texture;
   unsigned face;
d45 1
a45 1
   unsigned zslice;
d49 2
a50 1
struct st_context {
d61 3
a63 3
   struct pipe_texture *default_texture;
   struct pipe_texture *fragment_sampler_textures[PIPE_MAX_SAMPLERS];
   struct pipe_texture *vertex_sampler_textures[PIPE_MAX_VERTEX_SAMPLERS];
d75 2
a76 1
struct st_device {
a79 3
   const struct st_winsys *st_ws; 

   struct pipe_screen *real_screen;
d85 1
a85 1
st_pipe_surface(struct st_surface *surface, unsigned usage) 
d87 9
a95 3
   struct pipe_texture *texture = surface->texture;
   struct pipe_screen *screen = texture->screen;
   return screen->get_tex_surface(screen, texture, surface->face, surface->level, surface->zslice, usage);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d43 2
a44 1
   struct pipe_resource *texture;
d46 1
a46 1
   unsigned layer;
d50 1
a50 2
struct st_context
{
d61 3
a63 3
   struct pipe_resource *default_texture;
   struct pipe_sampler_view *fragment_sampler_views[PIPE_MAX_SAMPLERS];
   struct pipe_sampler_view *vertex_sampler_views[PIPE_MAX_VERTEX_SAMPLERS];
d75 1
a75 2
struct st_device
{
d79 3
d87 1
a87 1
st_pipe_surface(struct pipe_context *pipe, struct st_surface *surface, unsigned usage) 
d89 3
a91 9
   struct pipe_resource *texture = surface->texture;
   struct pipe_surface surf_tmpl;
   memset(&surf_tmpl, 0, sizeof(surf_tmpl));
   surf_tmpl.format = texture->format;
   surf_tmpl.usage = usage;
   surf_tmpl.u.tex.level = surface->level;
   surf_tmpl.u.tex.first_layer = surface->layer;
   surf_tmpl.u.tex.last_layer = surface->layer;
   return pipe->create_surface(pipe, texture, &surf_tmpl);
@

