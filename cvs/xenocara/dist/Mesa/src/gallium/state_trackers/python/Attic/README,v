head	1.2;
access;
symbols
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2012.08.17.13.58.07;	author mpi;	state dead;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@This directory contains Python bindings to Gallium3D. It looks like a state
tracker from the pipe driver perspective, and it looks like a pipe driver from
the python script perspective.


To build you'll need:
* Python (with development packages)
* SCons
* SWIG, http://www.swig.org/download.html
* Python Imaging Library with TK support, http://www.pythonware.com/products/pil/, 
  for the samples

On a debian-based distro you can simply do:

  aptitude install python-dev scons swig python-imaging python-imaging-tk

On a Windows machine ensure the swig command is in your PATH.

Invoke scons on the top dir as
 
  scons debug=yes statetrackers=python drivers=softpipe winsys=none

To use it set PYTHONPATH appropriately, e.g, in Linux do:

  export PYTHONPATH=$PWD/build/linux-x86-debug/gallium/state_trackers/python

or (in Windows)

  set PYTHONPATH=%CD%\build\windows-x86-debug\gallium\state_trackers\python

and then try running

  python progs/gallium/python/samples/tri.py

which should show a triangle.


This is still work in progress:
- errors are not handled properly and almost always result in crash
- state atoms with array members are awkward to set

--
Jose Fonseca <jfonseca@@vmware.com>
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@

