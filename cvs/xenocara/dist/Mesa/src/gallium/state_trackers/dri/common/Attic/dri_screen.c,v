head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.17;	author jsg;	state dead;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.01.43;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.07;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.13;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.02.20.22.46.24;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009, VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/
/*
 * Author: Keith Whitwell <keithw@@vmware.com>
 * Author: Jakob Bornecrantz <wallbraker@@gmail.com>
 */

#include "utils.h"
#include "xmlpool.h"

#include "dri_screen.h"

#include "util/u_inlines.h"
#include "pipe/p_screen.h"
#include "pipe/p_format.h"
#include "state_tracker/st_gl_api.h" /* for st_gl_api_create */
#include "state_tracker/drm_driver.h"

#include "util/u_debug.h"
#include "util/u_format_s3tc.h"

#define MSAA_VISUAL_MAX_SAMPLES 32

#undef false

const __DRIconfigOptionsExtension gallium_config_options = {
   .base = { __DRI_CONFIG_OPTIONS, 1 },
   .xml =

   DRI_CONF_BEGIN
      DRI_CONF_SECTION_QUALITY
         DRI_CONF_FORCE_S3TC_ENABLE("false")
         DRI_CONF_PP_CELSHADE(0)
         DRI_CONF_PP_NORED(0)
         DRI_CONF_PP_NOGREEN(0)
         DRI_CONF_PP_NOBLUE(0)
         DRI_CONF_PP_JIMENEZMLAA(0, 0, 32)
         DRI_CONF_PP_JIMENEZMLAA_COLOR(0, 0, 32)
      DRI_CONF_SECTION_END

      DRI_CONF_SECTION_DEBUG
         DRI_CONF_FORCE_GLSL_EXTENSIONS_WARN("false")
         DRI_CONF_DISABLE_GLSL_LINE_CONTINUATIONS("false")
         DRI_CONF_DISABLE_BLEND_FUNC_EXTENDED("false")
         DRI_CONF_DISABLE_SHADER_BIT_ENCODING("false")
         DRI_CONF_FORCE_GLSL_VERSION(0)
      DRI_CONF_SECTION_END

      DRI_CONF_SECTION_MISCELLANEOUS
         DRI_CONF_ALWAYS_HAVE_DEPTH_BUFFER("false")
      DRI_CONF_SECTION_END
   DRI_CONF_END
};

#define false 0

static const __DRIconfig **
dri_fill_in_modes(struct dri_screen *screen)
{
   static const mesa_format mesa_formats[3] = {
      MESA_FORMAT_B8G8R8A8_UNORM,
      MESA_FORMAT_B8G8R8X8_UNORM,
      MESA_FORMAT_B5G6R5_UNORM,
   };
   static const enum pipe_format pipe_formats[3] = {
      PIPE_FORMAT_BGRA8888_UNORM,
      PIPE_FORMAT_BGRX8888_UNORM,
      PIPE_FORMAT_B5G6R5_UNORM,
   };
   mesa_format format;
   __DRIconfig **configs = NULL;
   uint8_t depth_bits_array[5];
   uint8_t stencil_bits_array[5];
   unsigned depth_buffer_factor;
   unsigned msaa_samples_max;
   unsigned i;
   struct pipe_screen *p_screen = screen->base.screen;
   boolean pf_z16, pf_x8z24, pf_z24x8, pf_s8z24, pf_z24s8, pf_z32;

   static const GLenum back_buffer_modes[] = {
      GLX_NONE, GLX_SWAP_UNDEFINED_OML, GLX_SWAP_COPY_OML
   };

   if (driQueryOptionb(&screen->optionCache, "always_have_depth_buffer")) {
      /* all visuals will have a depth buffer */
      depth_buffer_factor = 0;
   }
   else {
      depth_bits_array[0] = 0;
      stencil_bits_array[0] = 0;
      depth_buffer_factor = 1;
   }
 
   msaa_samples_max = (screen->st_api->feature_mask & ST_API_FEATURE_MS_VISUALS_MASK)
      ? MSAA_VISUAL_MAX_SAMPLES : 1;

   pf_x8z24 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_Z24X8_UNORM,
					    PIPE_TEXTURE_2D, 0,
                                            PIPE_BIND_DEPTH_STENCIL);
   pf_z24x8 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_X8Z24_UNORM,
					    PIPE_TEXTURE_2D, 0,
                                            PIPE_BIND_DEPTH_STENCIL);
   pf_s8z24 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_Z24_UNORM_S8_UINT,
					    PIPE_TEXTURE_2D, 0,
                                            PIPE_BIND_DEPTH_STENCIL);
   pf_z24s8 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_S8_UINT_Z24_UNORM,
					    PIPE_TEXTURE_2D, 0,
                                            PIPE_BIND_DEPTH_STENCIL);
   pf_z16 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_Z16_UNORM,
                                          PIPE_TEXTURE_2D, 0,
                                          PIPE_BIND_DEPTH_STENCIL);
   pf_z32 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_Z32_UNORM,
                                          PIPE_TEXTURE_2D, 0,
                                          PIPE_BIND_DEPTH_STENCIL);

   if (pf_z16) {
      depth_bits_array[depth_buffer_factor] = 16;
      stencil_bits_array[depth_buffer_factor++] = 0;
   }
   if (pf_x8z24 || pf_z24x8) {
      depth_bits_array[depth_buffer_factor] = 24;
      stencil_bits_array[depth_buffer_factor++] = 0;
      screen->d_depth_bits_last = pf_x8z24;
   }
   if (pf_s8z24 || pf_z24s8) {
      depth_bits_array[depth_buffer_factor] = 24;
      stencil_bits_array[depth_buffer_factor++] = 8;
      screen->sd_depth_bits_last = pf_s8z24;
   }
   if (pf_z32) {
      depth_bits_array[depth_buffer_factor] = 32;
      stencil_bits_array[depth_buffer_factor++] = 0;
   }

   assert(Elements(mesa_formats) == Elements(pipe_formats));

   /* Add configs. */
   for (format = 0; format < Elements(mesa_formats); format++) {
      __DRIconfig **new_configs = NULL;
      unsigned num_msaa_modes = 0; /* includes a single-sample mode */
      uint8_t msaa_modes[MSAA_VISUAL_MAX_SAMPLES];

      for (i = 1; i <= msaa_samples_max; i++) {
         int samples = i > 1 ? i : 0;

         if (p_screen->is_format_supported(p_screen, pipe_formats[format],
                                           PIPE_TEXTURE_2D, samples,
                                           PIPE_BIND_RENDER_TARGET)) {
            msaa_modes[num_msaa_modes++] = samples;
         }
      }

      if (num_msaa_modes) {
         /* Single-sample configs with an accumulation buffer. */
         new_configs = driCreateConfigs(mesa_formats[format],
                                        depth_bits_array, stencil_bits_array,
                                        depth_buffer_factor, back_buffer_modes,
                                        Elements(back_buffer_modes),
                                        msaa_modes, 1,
                                        GL_TRUE);
         configs = driConcatConfigs(configs, new_configs);

         /* Multi-sample configs without an accumulation buffer. */
         if (num_msaa_modes > 1) {
            new_configs = driCreateConfigs(mesa_formats[format],
                                           depth_bits_array, stencil_bits_array,
                                           depth_buffer_factor, back_buffer_modes,
                                           Elements(back_buffer_modes),
                                           msaa_modes+1, num_msaa_modes-1,
                                           GL_FALSE);
            configs = driConcatConfigs(configs, new_configs);
         }
      }
   }

   if (configs == NULL) {
      debug_printf("%s: driCreateConfigs failed\n", __FUNCTION__);
      return NULL;
   }

   return (const __DRIconfig **)configs;
}

/**
 * Roughly the converse of dri_fill_in_modes.
 */
void
dri_fill_st_visual(struct st_visual *stvis, struct dri_screen *screen,
                   const struct gl_config *mode)
{
   memset(stvis, 0, sizeof(*stvis));

   if (!mode)
      return;

   if (mode->redBits == 8) {
      if (mode->alphaBits == 8)
         stvis->color_format = PIPE_FORMAT_BGRA8888_UNORM;
      else
         stvis->color_format = PIPE_FORMAT_BGRX8888_UNORM;
   } else {
      stvis->color_format = PIPE_FORMAT_B5G6R5_UNORM;
   }

   if (mode->sampleBuffers) {
      stvis->samples = mode->samples;
   }

   switch (mode->depthBits) {
   default:
   case 0:
      stvis->depth_stencil_format = PIPE_FORMAT_NONE;
      break;
   case 16:
      stvis->depth_stencil_format = PIPE_FORMAT_Z16_UNORM;
      break;
   case 24:
      if (mode->stencilBits == 0) {
	 stvis->depth_stencil_format = (screen->d_depth_bits_last) ?
                                          PIPE_FORMAT_Z24X8_UNORM:
                                          PIPE_FORMAT_X8Z24_UNORM;
      } else {
	 stvis->depth_stencil_format = (screen->sd_depth_bits_last) ?
                                          PIPE_FORMAT_Z24_UNORM_S8_UINT:
                                          PIPE_FORMAT_S8_UINT_Z24_UNORM;
      }
      break;
   case 32:
      stvis->depth_stencil_format = PIPE_FORMAT_Z32_UNORM;
      break;
   }

   stvis->accum_format = (mode->haveAccumBuffer) ?
      PIPE_FORMAT_R16G16B16A16_SNORM : PIPE_FORMAT_NONE;

   stvis->buffer_mask |= ST_ATTACHMENT_FRONT_LEFT_MASK;
   stvis->render_buffer = ST_ATTACHMENT_FRONT_LEFT;
   if (mode->doubleBufferMode) {
      stvis->buffer_mask |= ST_ATTACHMENT_BACK_LEFT_MASK;
      stvis->render_buffer = ST_ATTACHMENT_BACK_LEFT;
   }
   if (mode->stereoMode) {
      stvis->buffer_mask |= ST_ATTACHMENT_FRONT_RIGHT_MASK;
      if (mode->doubleBufferMode)
         stvis->buffer_mask |= ST_ATTACHMENT_BACK_RIGHT_MASK;
   }

   if (mode->haveDepthBuffer || mode->haveStencilBuffer)
      stvis->buffer_mask |= ST_ATTACHMENT_DEPTH_STENCIL_MASK;
   /* let the state tracker allocate the accum buffer */
}

static boolean
dri_get_egl_image(struct st_manager *smapi,
                  void *egl_image,
                  struct st_egl_image *stimg)
{
   struct dri_screen *screen = (struct dri_screen *)smapi;
   __DRIimage *img = NULL;

   if (screen->lookup_egl_image) {
      img = screen->lookup_egl_image(screen, egl_image);
   }

   if (!img)
      return FALSE;

   stimg->texture = NULL;
   pipe_resource_reference(&stimg->texture, img->texture);
   stimg->level = img->level;
   stimg->layer = img->layer;

   return TRUE;
}

static int
dri_get_param(struct st_manager *smapi,
              enum st_manager_param param)
{
   struct dri_screen *screen = (struct dri_screen *)smapi;

   switch(param) {
   case ST_MANAGER_BROKEN_INVALIDATE:
      return screen->broken_invalidate;
   default:
      return 0;
   }
}

static void
dri_destroy_option_cache(struct dri_screen * screen)
{
   int i;

   if (screen->optionCache.info) {
      for (i = 0; i < (1 << screen->optionCache.tableSize); ++i) {
         free(screen->optionCache.info[i].name);
         free(screen->optionCache.info[i].ranges);
      }
      free(screen->optionCache.info);
   }

   free(screen->optionCache.values);

   /* Default values are copied to screen->optionCache->values in
    * initOptionCache. The info field, however, is a pointer copy, so don't free
    * that twice.
    */
   free(screen->optionCacheDefaults.values);
}

void
dri_destroy_screen_helper(struct dri_screen * screen)
{
   if (screen->st_api && screen->st_api->destroy)
      screen->st_api->destroy(screen->st_api);

   if (screen->base.screen)
      screen->base.screen->destroy(screen->base.screen);

   dri_destroy_option_cache(screen);
}

void
dri_destroy_screen(__DRIscreen * sPriv)
{
   struct dri_screen *screen = dri_screen(sPriv);

   dri_destroy_screen_helper(screen);

   free(screen);
   sPriv->driverPrivate = NULL;
   sPriv->extensions = NULL;
}

static void
dri_postprocessing_init(struct dri_screen *screen)
{
   unsigned i;

   for (i = 0; i < PP_FILTERS; i++) {
      screen->pp_enabled[i] = driQueryOptioni(&screen->optionCache,
                                              pp_filters[i].name);
   }
}

const __DRIconfig **
dri_init_screen_helper(struct dri_screen *screen,
                       struct pipe_screen *pscreen)
{
   screen->base.screen = pscreen;
   if (!screen->base.screen) {
      debug_printf("%s: failed to create pipe_screen\n", __FUNCTION__);
      return NULL;
   }

   screen->base.get_egl_image = dri_get_egl_image;
   screen->base.get_param = dri_get_param;

   screen->st_api = st_gl_api_create();
   if (!screen->st_api)
      return NULL;

   if(pscreen->get_param(pscreen, PIPE_CAP_NPOT_TEXTURES))
      screen->target = PIPE_TEXTURE_2D;
   else
      screen->target = PIPE_TEXTURE_RECT;

   driParseOptionInfo(&screen->optionCacheDefaults, gallium_config_options.xml);

   driParseConfigFiles(&screen->optionCache,
		       &screen->optionCacheDefaults,
                       screen->sPriv->myNum,
                       driver_descriptor.name);

   /* Handle force_s3tc_enable. */
   if (!util_format_s3tc_enabled &&
       driQueryOptionb(&screen->optionCache, "force_s3tc_enable")) {
      /* Ensure libtxc_dxtn has been loaded if available.
       * Forcing S3TC on before calling this would prevent loading
       * the library.
       * This is just a precaution, the driver should have called it
       * already.
       */
      util_format_s3tc_init();

      util_format_s3tc_enabled = TRUE;
   }

   dri_postprocessing_init(screen);

   /* gallium drivers don't declare what version of GL they support, so we
    * check the computed Mesa context version after context creation and fail
    * out then.
    */
   if (screen->st_api->profile_mask & ST_PROFILE_DEFAULT_MASK)
      screen->sPriv->max_gl_compat_version = 30;
   if (screen->st_api->profile_mask & ST_PROFILE_OPENGL_CORE_MASK)
      screen->sPriv->max_gl_core_version = 33;
   if (screen->st_api->profile_mask & ST_PROFILE_OPENGL_ES1_MASK)
      screen->sPriv->max_gl_es1_version = 11;
   if (screen->st_api->profile_mask & ST_PROFILE_OPENGL_ES2_MASK)
      screen->sPriv->max_gl_es2_version = 30;

   return dri_fill_in_modes(screen);
}

/* vim: set sw=3 ts=8 sts=3 expandtab: */
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a207 31
/* The Gallium way to force MSAA. */
DEBUG_GET_ONCE_NUM_OPTION(msaa, "GALLIUM_MSAA", 0);

/* The NVIDIA way to force MSAA. The same variable is used by the NVIDIA
 * driver. */
DEBUG_GET_ONCE_NUM_OPTION(msaa_nv, "__GL_FSAA_MODE", 0);

static void
dri_force_msaa_visual(struct st_visual *stvis,
                      struct pipe_screen *screen)
{
   int i;
   int samples = debug_get_option_msaa();

   if (!samples)
      samples = debug_get_option_msaa_nv();

   if (samples <= 1)
      return; /* nothing to do */

   /* Choose a supported sample count greater than or equal to samples. */
   for (i = samples; i <= MSAA_VISUAL_MAX_SAMPLES; i++) {
      if (screen->is_format_supported(screen, stvis->color_format,
                                      PIPE_TEXTURE_2D, i,
                                      PIPE_BIND_RENDER_TARGET)) {
         stvis->samples = i;
         break;
      }
   }
}

a230 4
   }
   else {
      /* This must be done after stvis->color_format is set. */
      dri_force_msaa_visual(stvis, screen->base.screen);
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d50 4
a53 1
PUBLIC const char __driConfigOptions[] =
d76 2
a77 1
   DRI_CONF_END;
a80 2
static const uint __driNConfigOptions = 13;

d84 4
a87 4
   static const gl_format mesa_formats[3] = {
      MESA_FORMAT_ARGB8888,
      MESA_FORMAT_XRGB8888,
      MESA_FORMAT_RGB565,
d94 1
a94 1
   gl_format format;
d363 6
d395 11
d428 1
a428 2
   driParseOptionInfo(&screen->optionCacheDefaults,
                      __driConfigOptions, __driNConfigOptions);
d448 15
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d41 1
d44 5
d51 23
a73 7
   DRI_CONF_BEGIN DRI_CONF_SECTION_PERFORMANCE
   DRI_CONF_FTHROTTLE_MODE(DRI_CONF_FTHROTTLE_IRQS)
   DRI_CONF_VBLANK_MODE(DRI_CONF_VBLANK_DEF_INTERVAL_0)
   DRI_CONF_SECTION_END DRI_CONF_SECTION_QUALITY
/* DRI_CONF_FORCE_S3TC_ENABLE(false) */
   DRI_CONF_ALLOW_LARGE_TEXTURES(1)
   DRI_CONF_SECTION_END DRI_CONF_END;
d75 3
a77 1
static const uint __driNConfigOptions = 3;
d80 1
a80 2
dri_fill_in_modes(struct dri_screen *screen,
		  unsigned pixel_bits)
d82 11
a93 3
   __DRIconfig **configs_r5g6b5 = NULL;
   __DRIconfig **configs_a8r8g8b8 = NULL;
   __DRIconfig **configs_x8r8g8b8 = NULL;
a95 1
   uint8_t msaa_samples_array[5];
d97 1
a97 2
   unsigned back_buffer_factor;
   unsigned msaa_samples_factor;
a99 1
   boolean pf_r5g6b5, pf_a8r8g8b8, pf_x8r8g8b8;
d106 12
a117 3
   depth_bits_array[0] = 0;
   stencil_bits_array[0] = 0;
   depth_buffer_factor = 1;
d125 1
a125 1
   pf_s8z24 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_Z24_UNORM_S8_USCALED,
d128 1
a128 1
   pf_z24s8 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_S8_USCALED_Z24_UNORM,
d131 6
a136 22
   pf_a8r8g8b8 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_B8G8R8A8_UNORM,
					       PIPE_TEXTURE_2D, 0,
                                               PIPE_BIND_RENDER_TARGET);
   pf_x8r8g8b8 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_B8G8R8X8_UNORM,
					       PIPE_TEXTURE_2D, 0,
                                               PIPE_BIND_RENDER_TARGET);
   pf_r5g6b5 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_B5G6R5_UNORM,
					     PIPE_TEXTURE_2D, 0,
                                             PIPE_BIND_RENDER_TARGET);

   /* We can only get a 16 or 32 bit depth buffer with getBuffersWithFormat */
   if (dri_with_format(screen->sPriv)) {
      pf_z16 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_Z16_UNORM,
                                             PIPE_TEXTURE_2D, 0,
                                             PIPE_BIND_DEPTH_STENCIL);
      pf_z32 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_Z32_UNORM,
                                             PIPE_TEXTURE_2D, 0,
                                             PIPE_BIND_DEPTH_STENCIL);
   } else {
      pf_z16 = FALSE;
      pf_z32 = FALSE;
   }
d157 1
a157 2
   msaa_samples_array[0] = 0;
   back_buffer_factor = 3;
d159 13
a171 9
   /* also test color for msaa 2/4/6/8 - just assume it'll work for all depth buffers */
   if (pf_r5g6b5) {
      msaa_samples_factor = 1;
      for (i = 1; i < 5; i++) {
         if (p_screen->is_format_supported(p_screen, PIPE_FORMAT_B5G6R5_UNORM,
						   PIPE_TEXTURE_2D, i*2,
                                                   PIPE_BIND_RENDER_TARGET)) {
            msaa_samples_array[msaa_samples_factor] = i * 2;
            msaa_samples_factor++;
d175 3
a177 1
      configs_r5g6b5 = driCreateConfigs(GL_RGB, GL_UNSIGNED_SHORT_5_6_5,
d180 2
a181 2
                                        back_buffer_factor,
                                        msaa_samples_array, msaa_samples_factor,
d183 1
a183 1
   }
d185 9
a193 8
   if (pf_a8r8g8b8) {
      msaa_samples_factor = 1;
      for (i = 1; i < 5; i++) {
         if (p_screen->is_format_supported(p_screen, PIPE_FORMAT_B8G8R8A8_UNORM,
						   PIPE_TEXTURE_2D, i*2,
                                                   PIPE_BIND_RENDER_TARGET)) {
            msaa_samples_array[msaa_samples_factor] = i * 2;
            msaa_samples_factor++;
a195 46

      configs_a8r8g8b8 = driCreateConfigs(GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV,
                                          depth_bits_array,
                                          stencil_bits_array,
                                          depth_buffer_factor,
                                          back_buffer_modes,
                                          back_buffer_factor,
                                          msaa_samples_array,
                                          msaa_samples_factor,
                                          GL_TRUE);
   }

   if (pf_x8r8g8b8) {
      msaa_samples_factor = 1;
      for (i = 1; i < 5; i++) {
         if (p_screen->is_format_supported(p_screen, PIPE_FORMAT_B8G8R8X8_UNORM,
						   PIPE_TEXTURE_2D, i*2,
                                                   PIPE_BIND_RENDER_TARGET)) {
            msaa_samples_array[msaa_samples_factor] = i * 2;
            msaa_samples_factor++;
         }
      }

      configs_x8r8g8b8 = driCreateConfigs(GL_BGR, GL_UNSIGNED_INT_8_8_8_8_REV,
                                          depth_bits_array,
                                          stencil_bits_array,
                                          depth_buffer_factor,
                                          back_buffer_modes,
                                          back_buffer_factor,
                                          msaa_samples_array,
                                          msaa_samples_factor,
                                          GL_TRUE);
   }

   if (pixel_bits == 16) {
      configs = configs_r5g6b5;
      if (configs_a8r8g8b8)
         configs = configs ? driConcatConfigs(configs, configs_a8r8g8b8) : configs_a8r8g8b8;
      if (configs_x8r8g8b8)
	 configs = configs ? driConcatConfigs(configs, configs_x8r8g8b8) : configs_x8r8g8b8;
   } else {
      configs = configs_a8r8g8b8;
      if (configs_x8r8g8b8)
	 configs = configs ? driConcatConfigs(configs, configs_x8r8g8b8) : configs_x8r8g8b8;
      if (configs_r5g6b5)
         configs = configs ? driConcatConfigs(configs, configs_r5g6b5) : configs_r5g6b5;
d206 31
a248 2
   stvis->samples = mode->samples;

d251 1
a251 1
         stvis->color_format = PIPE_FORMAT_B8G8R8A8_UNORM;
d253 1
a253 1
         stvis->color_format = PIPE_FORMAT_B8G8R8X8_UNORM;
d258 8
d281 2
a282 2
                                          PIPE_FORMAT_Z24_UNORM_S8_USCALED:
                                          PIPE_FORMAT_S8_USCALED_Z24_UNORM;
d354 2
a355 2
         FREE(screen->optionCache.info[i].name);
         FREE(screen->optionCache.info[i].ranges);
d357 1
a357 1
      FREE(screen->optionCache.info);
d360 1
a360 1
   FREE(screen->optionCache.values);
d382 2
a383 2
   FREE(screen);
   sPriv->private = NULL;
d389 1
a389 2
                       struct pipe_screen *pscreen,
                       unsigned pixel_bits)
d409 1
a409 1
   driParseOptionInfo(&screen->optionCache,
d412 20
a431 1
   return dri_fill_in_modes(screen, pixel_bits);
@


1.1
log
@Initial revision
@
text
@d84 1
a84 1
					    PIPE_BIND_DEPTH_STENCIL, 0);
d87 1
a87 1
					    PIPE_BIND_DEPTH_STENCIL, 0);
d90 1
a90 1
					    PIPE_BIND_DEPTH_STENCIL, 0);
d93 1
a93 1
					    PIPE_BIND_DEPTH_STENCIL, 0);
d96 1
a96 1
					       PIPE_BIND_RENDER_TARGET, 0);
d99 1
a99 1
					       PIPE_BIND_RENDER_TARGET, 0);
d102 1
a102 1
					     PIPE_BIND_RENDER_TARGET, 0);
d108 1
a108 1
                                             PIPE_BIND_DEPTH_STENCIL, 0);
d111 1
a111 1
                                             PIPE_BIND_DEPTH_STENCIL, 0);
d145 1
a145 1
						   PIPE_BIND_RENDER_TARGET, 0)) {
d164 1
a164 1
						   PIPE_BIND_RENDER_TARGET, 0)) {
d186 1
a186 1
						   PIPE_BIND_RENDER_TARGET, 0)) {
a237 1
   stvis->render_buffer = ST_ATTACHMENT_INVALID;
d276 2
a277 1
   if (mode->doubleBufferMode)
d279 2
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a40 1
#include "state_tracker/drm_driver.h"
a42 5
#include "util/u_format_s3tc.h"

#define MSAA_VISUAL_MAX_SAMPLES 32

#undef false
d45 7
a51 25
   DRI_CONF_BEGIN
      DRI_CONF_SECTION_QUALITY
         DRI_CONF_FORCE_S3TC_ENABLE("false")
         DRI_CONF_PP_CELSHADE(0)
         DRI_CONF_PP_NORED(0)
         DRI_CONF_PP_NOGREEN(0)
         DRI_CONF_PP_NOBLUE(0)
         DRI_CONF_PP_JIMENEZMLAA(0, 0, 32)
         DRI_CONF_PP_JIMENEZMLAA_COLOR(0, 0, 32)
      DRI_CONF_SECTION_END

      DRI_CONF_SECTION_DEBUG
         DRI_CONF_FORCE_GLSL_EXTENSIONS_WARN("false")
         DRI_CONF_DISABLE_GLSL_LINE_CONTINUATIONS("false")
         DRI_CONF_DISABLE_BLEND_FUNC_EXTENDED("false")
         DRI_CONF_DISABLE_SHADER_BIT_ENCODING("false")
         DRI_CONF_FORCE_GLSL_VERSION(0)
      DRI_CONF_SECTION_END

      DRI_CONF_SECTION_MISCELLANEOUS
         DRI_CONF_ALWAYS_HAVE_DEPTH_BUFFER("false")
      DRI_CONF_SECTION_END
   DRI_CONF_END;

#define false 0
d53 1
a53 1
static const uint __driNConfigOptions = 13;
d56 2
a57 1
dri_fill_in_modes(struct dri_screen *screen)
a58 11
   static const gl_format mesa_formats[3] = {
      MESA_FORMAT_ARGB8888,
      MESA_FORMAT_XRGB8888,
      MESA_FORMAT_RGB565,
   };
   static const enum pipe_format pipe_formats[3] = {
      PIPE_FORMAT_BGRA8888_UNORM,
      PIPE_FORMAT_BGRX8888_UNORM,
      PIPE_FORMAT_B5G6R5_UNORM,
   };
   gl_format format;
d60 3
d65 1
d67 2
a68 1
   unsigned msaa_samples_max;
d71 1
d78 3
a80 12
   if (driQueryOptionb(&screen->optionCache, "always_have_depth_buffer")) {
      /* all visuals will have a depth buffer */
      depth_buffer_factor = 0;
   }
   else {
      depth_bits_array[0] = 0;
      stencil_bits_array[0] = 0;
      depth_buffer_factor = 1;
   }
 
   msaa_samples_max = (screen->st_api->feature_mask & ST_API_FEATURE_MS_VISUALS_MASK)
      ? MSAA_VISUAL_MAX_SAMPLES : 1;
d84 1
a84 1
                                            PIPE_BIND_DEPTH_STENCIL);
d87 2
a88 2
                                            PIPE_BIND_DEPTH_STENCIL);
   pf_s8z24 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_Z24_UNORM_S8_UINT,
d90 2
a91 2
                                            PIPE_BIND_DEPTH_STENCIL);
   pf_z24s8 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_S8_UINT_Z24_UNORM,
d93 23
a115 7
                                            PIPE_BIND_DEPTH_STENCIL);
   pf_z16 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_Z16_UNORM,
                                          PIPE_TEXTURE_2D, 0,
                                          PIPE_BIND_DEPTH_STENCIL);
   pf_z32 = p_screen->is_format_supported(p_screen, PIPE_FORMAT_Z32_UNORM,
                                          PIPE_TEXTURE_2D, 0,
                                          PIPE_BIND_DEPTH_STENCIL);
d136 2
a137 1
   assert(Elements(mesa_formats) == Elements(pipe_formats));
d139 9
a147 13
   /* Add configs. */
   for (format = 0; format < Elements(mesa_formats); format++) {
      __DRIconfig **new_configs = NULL;
      unsigned num_msaa_modes = 0; /* includes a single-sample mode */
      uint8_t msaa_modes[MSAA_VISUAL_MAX_SAMPLES];

      for (i = 1; i <= msaa_samples_max; i++) {
         int samples = i > 1 ? i : 0;

         if (p_screen->is_format_supported(p_screen, pipe_formats[format],
                                           PIPE_TEXTURE_2D, samples,
                                           PIPE_BIND_RENDER_TARGET)) {
            msaa_modes[num_msaa_modes++] = samples;
d151 1
a151 3
      if (num_msaa_modes) {
         /* Single-sample configs with an accumulation buffer. */
         new_configs = driCreateConfigs(mesa_formats[format],
d154 2
a155 2
                                        Elements(back_buffer_modes),
                                        msaa_modes, 1,
d157 1
a157 1
         configs = driConcatConfigs(configs, new_configs);
d159 8
a166 9
         /* Multi-sample configs without an accumulation buffer. */
         if (num_msaa_modes > 1) {
            new_configs = driCreateConfigs(mesa_formats[format],
                                           depth_bits_array, stencil_bits_array,
                                           depth_buffer_factor, back_buffer_modes,
                                           Elements(back_buffer_modes),
                                           msaa_modes+1, num_msaa_modes-1,
                                           GL_FALSE);
            configs = driConcatConfigs(configs, new_configs);
d169 46
a224 31
/* The Gallium way to force MSAA. */
DEBUG_GET_ONCE_NUM_OPTION(msaa, "GALLIUM_MSAA", 0);

/* The NVIDIA way to force MSAA. The same variable is used by the NVIDIA
 * driver. */
DEBUG_GET_ONCE_NUM_OPTION(msaa_nv, "__GL_FSAA_MODE", 0);

static void
dri_force_msaa_visual(struct st_visual *stvis,
                      struct pipe_screen *screen)
{
   int i;
   int samples = debug_get_option_msaa();

   if (!samples)
      samples = debug_get_option_msaa_nv();

   if (samples <= 1)
      return; /* nothing to do */

   /* Choose a supported sample count greater than or equal to samples. */
   for (i = samples; i <= MSAA_VISUAL_MAX_SAMPLES; i++) {
      if (screen->is_format_supported(screen, stvis->color_format,
                                      PIPE_TEXTURE_2D, i,
                                      PIPE_BIND_RENDER_TARGET)) {
         stvis->samples = i;
         break;
      }
   }
}

d237 3
d242 1
a242 1
         stvis->color_format = PIPE_FORMAT_BGRA8888_UNORM;
d244 1
a244 1
         stvis->color_format = PIPE_FORMAT_BGRX8888_UNORM;
a248 8
   if (mode->sampleBuffers) {
      stvis->samples = mode->samples;
   }
   else {
      /* This must be done after stvis->color_format is set. */
      dri_force_msaa_visual(stvis, screen->base.screen);
   }

d264 2
a265 2
                                          PIPE_FORMAT_Z24_UNORM_S8_UINT:
                                          PIPE_FORMAT_S8_UINT_Z24_UNORM;
d277 1
a277 2
   stvis->render_buffer = ST_ATTACHMENT_FRONT_LEFT;
   if (mode->doubleBufferMode) {
a278 2
      stvis->render_buffer = ST_ATTACHMENT_BACK_LEFT;
   }
d334 2
a335 2
         free(screen->optionCache.info[i].name);
         free(screen->optionCache.info[i].ranges);
d337 1
a337 1
      free(screen->optionCache.info);
d340 1
a340 1
   free(screen->optionCache.values);
d362 2
a363 2
   free(screen);
   sPriv->driverPrivate = NULL;
d369 2
a370 1
                       struct pipe_screen *pscreen)
d390 1
a390 1
   driParseOptionInfo(&screen->optionCacheDefaults,
d393 1
a393 20
   driParseConfigFiles(&screen->optionCache,
		       &screen->optionCacheDefaults,
                       screen->sPriv->myNum,
                       driver_descriptor.name);

   /* Handle force_s3tc_enable. */
   if (!util_format_s3tc_enabled &&
       driQueryOptionb(&screen->optionCache, "force_s3tc_enable")) {
      /* Ensure libtxc_dxtn has been loaded if available.
       * Forcing S3TC on before calling this would prevent loading
       * the library.
       * This is just a precaution, the driver should have called it
       * already.
       */
      util_format_s3tc_init();

      util_format_s3tc_enabled = TRUE;
   }

   return dri_fill_in_modes(screen);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d50 1
a50 4
const __DRIconfigOptionsExtension gallium_config_options = {
   .base = { __DRI_CONFIG_OPTIONS, 1 },
   .xml =

d73 1
a73 2
   DRI_CONF_END
};
d77 2
d82 4
a85 4
   static const mesa_format mesa_formats[3] = {
      MESA_FORMAT_B8G8R8A8_UNORM,
      MESA_FORMAT_B8G8R8X8_UNORM,
      MESA_FORMAT_B5G6R5_UNORM,
d92 1
a92 1
   mesa_format format;
a360 6

   /* Default values are copied to screen->optionCache->values in
    * initOptionCache. The info field, however, is a pointer copy, so don't free
    * that twice.
    */
   free(screen->optionCacheDefaults.values);
a386 11
static void
dri_postprocessing_init(struct dri_screen *screen)
{
   unsigned i;

   for (i = 0; i < PP_FILTERS; i++) {
      screen->pp_enabled[i] = driQueryOptioni(&screen->optionCache,
                                              pp_filters[i].name);
   }
}

d409 2
a410 1
   driParseOptionInfo(&screen->optionCacheDefaults, gallium_config_options.xml);
a429 15

   dri_postprocessing_init(screen);

   /* gallium drivers don't declare what version of GL they support, so we
    * check the computed Mesa context version after context creation and fail
    * out then.
    */
   if (screen->st_api->profile_mask & ST_PROFILE_DEFAULT_MASK)
      screen->sPriv->max_gl_compat_version = 30;
   if (screen->st_api->profile_mask & ST_PROFILE_OPENGL_CORE_MASK)
      screen->sPriv->max_gl_core_version = 33;
   if (screen->st_api->profile_mask & ST_PROFILE_OPENGL_ES1_MASK)
      screen->sPriv->max_gl_es1_version = 11;
   if (screen->st_api->profile_mask & ST_PROFILE_OPENGL_ES2_MASK)
      screen->sPriv->max_gl_es2_version = 30;
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d208 31
d262 4
@


