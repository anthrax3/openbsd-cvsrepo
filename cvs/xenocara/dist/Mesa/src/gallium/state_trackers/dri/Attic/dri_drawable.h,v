head	1.4;
access;
symbols
	v10_4_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.02.20.23.09.53;	author jsg;	state dead;
branches;
next	1.3;
commitid	4ry2gvZGMXkCUD2n;

1.3
date	2015.01.25.14.41.17;	author jsg;	state Exp;
branches;
next	1.2;
commitid	mcxB0JvoI9gTDYXU;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2015.01.25.14.09.12;	author jsg;	state Exp;
branches;
next	;
commitid	ce2W5rH5aF7VS9gi;


desc
@@


1.4
log
@Merge Mesa 10.2.9
@
text
@/**************************************************************************
 *
 * Copyright 2009, VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#ifndef DRI_DRAWABLE_H
#define DRI_DRAWABLE_H

#include "pipe/p_compiler.h"
#include "pipe/p_format.h"
#include "state_tracker/st_api.h"

struct pipe_surface;
struct st_framebuffer;
struct dri_context;

#define DRI_SWAP_FENCES_MAX 4
#define DRI_SWAP_FENCES_MASK 3
#define DRI_SWAP_FENCES_DEFAULT 1

struct dri_drawable
{
   struct st_framebuffer_iface base;
   struct st_visual stvis;

   struct dri_screen *screen;

   /* dri */
   __DRIdrawable *dPriv;
   __DRIscreen *sPriv;

   __DRIbuffer old[8];
   unsigned old_num;
   unsigned old_w;
   unsigned old_h;

   struct pipe_resource *textures[ST_ATTACHMENT_COUNT];
   struct pipe_resource *msaa_textures[ST_ATTACHMENT_COUNT];
   unsigned int texture_mask, texture_stamp;

   struct pipe_fence_handle *swap_fences[DRI_SWAP_FENCES_MAX];
   unsigned int cur_fences;
   unsigned int head;
   unsigned int tail;
   unsigned int desired_fences;
   boolean flushing; /* prevents recursion in dri_flush */

   /* used only by DRISW */
   struct pipe_surface *drisw_surface;

   /* hooks filled in by dri2 & drisw */
   void (*allocate_textures)(struct dri_context *ctx,
                             struct dri_drawable *drawable,
                             const enum st_attachment_type *statts,
                             unsigned count);

   void (*update_drawable_info)(struct dri_drawable *drawable);

   void (*flush_frontbuffer)(struct dri_context *ctx,
                             struct dri_drawable *drawable,
                             enum st_attachment_type statt);

   void (*update_tex_buffer)(struct dri_drawable *drawable,
                             struct dri_context *ctx,
                             struct pipe_resource *res);
};

static INLINE struct dri_drawable *
dri_drawable(__DRIdrawable * driDrawPriv)
{
   return (struct dri_drawable *) (driDrawPriv)
      ? driDrawPriv->driverPrivate : NULL;
}

/***********************************************************************
 * dri_drawable.c
 */
boolean
dri_create_buffer(__DRIscreen * sPriv,
		  __DRIdrawable * dPriv,
		  const struct gl_config * visual, boolean isPixmap);

void dri_destroy_buffer(__DRIdrawable * dPriv);

void
dri_drawable_get_format(struct dri_drawable *drawable,
                        enum st_attachment_type statt,
                        enum pipe_format *format,
                        unsigned *bind);

void
dri_pipe_blit(struct pipe_context *pipe,
              struct pipe_resource *dst,
              struct pipe_resource *src);

void
dri_flush(__DRIcontext *cPriv,
          __DRIdrawable *dPriv,
          unsigned flags,
          enum __DRI2throttleReason reason);

extern const __DRItexBufferExtension driTexBufferExtension;
extern const __DRI2throttleExtension dri2ThrottleExtension;
#endif

/* vim: set sw=3 ts=8 sts=3 expandtab: */
@


1.3
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d32 2
a35 1
struct pipe_fence_handle;
d39 3
a41 2
#define DRI_SWAP_FENCES_MAX  8
#define DRI_SWAP_FENCES_MASK 7
d45 5
a53 5
   unsigned attachments[8];
   unsigned num_attachments;

   boolean is_pixmap;

d59 4
a62 2
   /* gallium */
   struct st_framebuffer *stfb;
d64 1
d68 4
a71 1
   unsigned int cur_fences;
d73 15
a87 2
   enum pipe_format color_format;
   enum pipe_format depth_stencil_format;
d93 2
a94 1
   return (struct dri_drawable *)driDrawPriv->driverPrivate;
d103 1
a103 1
		  const __GLcontextModes * visual, boolean isPixmap);
d105 1
a105 2
void
dri_update_buffer(struct pipe_screen *screen, void *context_private);
d108 4
a111 4
dri_flush_frontbuffer(struct pipe_screen *screen,
		      struct pipe_surface *surf, void *context_private);

void dri_swap_buffers(__DRIdrawable * dPriv);
d114 3
a116 11
dri_copy_sub_buffer(__DRIdrawable * dPriv, int x, int y, int w, int h);

void dri_get_buffers(__DRIdrawable * dPriv);

void dri_destroy_buffer(__DRIdrawable * dPriv);

void dri2_set_tex_buffer2(__DRIcontext *pDRICtx, GLint target,
                          GLint glx_texture_format, __DRIdrawable *dPriv);

void dri2_set_tex_buffer(__DRIcontext *pDRICtx, GLint target,
                         __DRIdrawable *dPriv);
d119 4
a122 2
dri1_update_drawables(struct dri_context *ctx,
		      struct dri_drawable *draw, struct dri_drawable *read);
d124 2
a125 3
void
dri1_flush_frontbuffer(struct pipe_screen *screen,
		       struct pipe_surface *surf, void *context_private);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@@


1.1.1.1
log
@Import Mesa 10.4.3
@
text
@a31 2
#include "pipe/p_format.h"
#include "state_tracker/st_api.h"
d34 1
d38 2
a39 3
#define DRI_SWAP_FENCES_MAX 4
#define DRI_SWAP_FENCES_MASK 3
#define DRI_SWAP_FENCES_DEFAULT 1
a42 5
   struct st_framebuffer_iface base;
   struct st_visual stvis;

   struct dri_screen *screen;

d47 5
d57 2
a58 4
   struct pipe_resource *textures[ST_ATTACHMENT_COUNT];
   struct pipe_resource *msaa_textures[ST_ATTACHMENT_COUNT];
   unsigned int texture_mask, texture_stamp;

a59 1
   unsigned int cur_fences;
d63 1
a63 1
   boolean flushing; /* prevents recursion in dri_flush */
d65 2
a66 18
   /* used only by DRISW */
   struct pipe_surface *drisw_surface;

   /* hooks filled in by dri2 & drisw */
   void (*allocate_textures)(struct dri_context *ctx,
                             struct dri_drawable *drawable,
                             const enum st_attachment_type *statts,
                             unsigned count);

   void (*update_drawable_info)(struct dri_drawable *drawable);

   void (*flush_frontbuffer)(struct dri_context *ctx,
                             struct dri_drawable *drawable,
                             enum st_attachment_type statt);

   void (*update_tex_buffer)(struct dri_drawable *drawable,
                             struct dri_context *ctx,
                             struct pipe_resource *res);
d72 1
a72 2
   return (struct dri_drawable *) (driDrawPriv)
      ? driDrawPriv->driverPrivate : NULL;
d81 1
a81 1
		  const struct gl_config * visual, boolean isPixmap);
d83 2
a84 1
void dri_destroy_buffer(__DRIdrawable * dPriv);
d87 4
a90 4
dri_drawable_get_format(struct dri_drawable *drawable,
                        enum st_attachment_type statt,
                        enum pipe_format *format,
                        unsigned *bind);
d93 11
a103 3
dri_pipe_blit(struct pipe_context *pipe,
              struct pipe_resource *dst,
              struct pipe_resource *src);
d106 2
a107 4
dri_flush(__DRIcontext *cPriv,
          __DRIdrawable *dPriv,
          unsigned flags,
          enum __DRI2throttleReason reason);
d109 3
a111 2
extern const __DRItexBufferExtension driTexBufferExtension;
extern const __DRI2throttleExtension dri2ThrottleExtension;
@


