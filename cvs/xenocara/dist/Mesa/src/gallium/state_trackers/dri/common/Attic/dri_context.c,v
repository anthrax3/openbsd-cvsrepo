head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.17;	author jsg;	state dead;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.01.43;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.07;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.13;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.18;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009, VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/
/*
 * Author: Keith Whitwell <keithw@@vmware.com>
 * Author: Jakob Bornecrantz <wallbraker@@gmail.com>
 */

#include "utils.h"

#include "dri_screen.h"
#include "dri_drawable.h"
#include "dri_context.h"
#include "state_tracker/drm_driver.h"

#include "pipe/p_context.h"
#include "state_tracker/st_context.h"

static void
dri_fill_st_options(struct st_config_options *options,
                    const struct driOptionCache * optionCache)
{
   options->disable_blend_func_extended =
      driQueryOptionb(optionCache, "disable_blend_func_extended");
   options->disable_glsl_line_continuations =
      driQueryOptionb(optionCache, "disable_glsl_line_continuations");
   options->disable_shader_bit_encoding =
      driQueryOptionb(optionCache, "disable_shader_bit_encoding");
   options->force_glsl_extensions_warn =
      driQueryOptionb(optionCache, "force_glsl_extensions_warn");
   options->force_glsl_version =
      driQueryOptioni(optionCache, "force_glsl_version");
   options->force_s3tc_enable =
      driQueryOptionb(optionCache, "force_s3tc_enable");
}

GLboolean
dri_create_context(gl_api api, const struct gl_config * visual,
		   __DRIcontext * cPriv,
		   unsigned major_version,
		   unsigned minor_version,
		   uint32_t flags,
                   bool notify_reset,
		   unsigned *error,
		   void *sharedContextPrivate)
{
   __DRIscreen *sPriv = cPriv->driScreenPriv;
   struct dri_screen *screen = dri_screen(sPriv);
   struct st_api *stapi = screen->st_api;
   struct dri_context *ctx = NULL;
   struct st_context_iface *st_share = NULL;
   struct st_context_attribs attribs;
   enum st_context_error ctx_err = 0;

   memset(&attribs, 0, sizeof(attribs));
   switch (api) {
   case API_OPENGLES:
      attribs.profile = ST_PROFILE_OPENGL_ES1;
      break;
   case API_OPENGLES2:
      attribs.profile = ST_PROFILE_OPENGL_ES2;
      break;
   case API_OPENGL_COMPAT:
   case API_OPENGL_CORE:
      attribs.profile = api == API_OPENGL_COMPAT ? ST_PROFILE_DEFAULT
                                                 : ST_PROFILE_OPENGL_CORE;
      attribs.major = major_version;
      attribs.minor = minor_version;

      if ((flags & __DRI_CTX_FLAG_DEBUG) != 0)
	 attribs.flags |= ST_CONTEXT_FLAG_DEBUG;

      if ((flags & __DRI_CTX_FLAG_FORWARD_COMPATIBLE) != 0)
	 attribs.flags |= ST_CONTEXT_FLAG_FORWARD_COMPATIBLE;
      break;
   default:
      *error = __DRI_CTX_ERROR_BAD_API;
      goto fail;
   }

   if (flags & ~(__DRI_CTX_FLAG_DEBUG | __DRI_CTX_FLAG_FORWARD_COMPATIBLE)) {
      *error = __DRI_CTX_ERROR_UNKNOWN_FLAG;
      goto fail;
   }

   if (notify_reset) {
      *error = __DRI_CTX_ERROR_UNKNOWN_ATTRIBUTE;
      goto fail;
   }

   if (sharedContextPrivate) {
      st_share = ((struct dri_context *)sharedContextPrivate)->st;
   }

   ctx = CALLOC_STRUCT(dri_context);
   if (ctx == NULL) {
      *error = __DRI_CTX_ERROR_NO_MEMORY;
      goto fail;
   }

   cPriv->driverPrivate = ctx;
   ctx->cPriv = cPriv;
   ctx->sPriv = sPriv;

   dri_fill_st_options(&attribs.options, &screen->optionCache);
   dri_fill_st_visual(&attribs.visual, screen, visual);
   ctx->st = stapi->create_context(stapi, &screen->base, &attribs, &ctx_err,
				   st_share);
   if (ctx->st == NULL) {
      switch (ctx_err) {
      case ST_CONTEXT_SUCCESS:
	 *error = __DRI_CTX_ERROR_SUCCESS;
	 break;
      case ST_CONTEXT_ERROR_NO_MEMORY:
	 *error = __DRI_CTX_ERROR_NO_MEMORY;
	 break;
      case ST_CONTEXT_ERROR_BAD_API:
	 *error = __DRI_CTX_ERROR_BAD_API;
	 break;
      case ST_CONTEXT_ERROR_BAD_VERSION:
	 *error = __DRI_CTX_ERROR_BAD_VERSION;
	 break;
      case ST_CONTEXT_ERROR_BAD_FLAG:
	 *error = __DRI_CTX_ERROR_BAD_FLAG;
	 break;
      case ST_CONTEXT_ERROR_UNKNOWN_ATTRIBUTE:
	 *error = __DRI_CTX_ERROR_UNKNOWN_ATTRIBUTE;
	 break;
      case ST_CONTEXT_ERROR_UNKNOWN_FLAG:
	 *error = __DRI_CTX_ERROR_UNKNOWN_FLAG;
	 break;
      }
      goto fail;
   }
   ctx->st->st_manager_private = (void *) ctx;
   ctx->stapi = stapi;

   if (ctx->st->cso_context) {
      ctx->pp = pp_init(ctx->st->pipe, screen->pp_enabled, ctx->st->cso_context);
      ctx->hud = hud_create(ctx->st->pipe, ctx->st->cso_context);
   }

   *error = __DRI_CTX_ERROR_SUCCESS;
   return GL_TRUE;

 fail:
   if (ctx && ctx->st)
      ctx->st->destroy(ctx->st);

   free(ctx);
   return GL_FALSE;
}

void
dri_destroy_context(__DRIcontext * cPriv)
{
   struct dri_context *ctx = dri_context(cPriv);

   if (ctx->hud) {
      hud_destroy(ctx->hud);
   }

   /* No particular reason to wait for command completion before
    * destroying a context, but we flush the context here
    * to avoid having to add code elsewhere to cope with flushing a
    * partially destroyed context.
    */
   ctx->st->flush(ctx->st, 0, NULL);
   ctx->st->destroy(ctx->st);

   if (ctx->pp)
      pp_free(ctx->pp);

   free(ctx);
}

GLboolean
dri_unbind_context(__DRIcontext * cPriv)
{
   /* dri_util.c ensures cPriv is not null */
   struct dri_screen *screen = dri_screen(cPriv->driScreenPriv);
   struct dri_context *ctx = dri_context(cPriv);
   struct st_api *stapi = screen->st_api;

   if (--ctx->bind_count == 0) {
      if (ctx->st == ctx->stapi->get_current(ctx->stapi)) {
         /* For conformance, unbind is supposed to flush the context.
          * However, if we do it here we might end up flushing a partially
          * destroyed context. Instead, we flush in dri_make_current and
          * in dri_destroy_context which should cover all the cases.
          */
         stapi->make_current(stapi, NULL, NULL, NULL);
      }
   }

   return GL_TRUE;
}

GLboolean
dri_make_current(__DRIcontext * cPriv,
		 __DRIdrawable * driDrawPriv,
		 __DRIdrawable * driReadPriv)
{
   /* dri_util.c ensures cPriv is not null */
   struct dri_context *ctx = dri_context(cPriv);
   struct dri_drawable *draw = dri_drawable(driDrawPriv);
   struct dri_drawable *read = dri_drawable(driReadPriv);
   struct st_context_iface *old_st = ctx->stapi->get_current(ctx->stapi);

   /* Flush the old context here so we don't have to flush on unbind() */
   if (old_st && old_st != ctx->st)
      old_st->flush(old_st, ST_FLUSH_FRONT, NULL);

   ++ctx->bind_count;

   if (!draw && !read)
      return ctx->stapi->make_current(ctx->stapi, ctx->st, NULL, NULL);
   else if (!draw || !read)
      return GL_FALSE;

   if (ctx->dPriv != driDrawPriv) {
      ctx->dPriv = driDrawPriv;
      draw->texture_stamp = driDrawPriv->lastStamp - 1;
   }
   if (ctx->rPriv != driReadPriv) {
      ctx->rPriv = driReadPriv;
      read->texture_stamp = driReadPriv->lastStamp - 1;
   }

   ctx->stapi->make_current(ctx->stapi, ctx->st, &draw->base, &read->base);

   // This is ok to call here. If they are already init, it's a no-op.
   if (draw->textures[ST_ATTACHMENT_BACK_LEFT] && draw->textures[ST_ATTACHMENT_DEPTH_STENCIL]
      && ctx->pp)
         pp_init_fbos(ctx->pp, draw->textures[ST_ATTACHMENT_BACK_LEFT]->width0,
            draw->textures[ST_ATTACHMENT_BACK_LEFT]->height0);

   return GL_TRUE;
}

struct dri_context *
dri_get_current(__DRIscreen *sPriv)
{
   struct dri_screen *screen = dri_screen(sPriv);
   struct st_api *stapi = screen->st_api;
   struct st_context_iface *st;

   st = stapi->get_current(stapi);

   return (struct dri_context *) st ? st->st_manager_private : NULL;
}

/* vim: set sw=3 ts=8 sts=3 expandtab: */
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d43 2
a44 11
dri_pp_query(struct dri_context *ctx)
{
   unsigned int i;

   for (i = 0; i < PP_FILTERS; i++) {
      ctx->pp_enabled[i] = driQueryOptioni(&ctx->optionCache, pp_filters[i].name);
   }
}

static void dri_fill_st_options(struct st_config_options *options,
                                const struct driOptionCache * optionCache)
d66 1
d104 10
d128 1
a128 5
   driParseConfigFiles(&ctx->optionCache,
		       &screen->optionCacheDefaults,
                       sPriv->myNum, driver_descriptor.name);

   dri_fill_st_options(&attribs.options, &ctx->optionCache);
a160 3
   // Context successfully created. See if post-processing is requested.
   dri_pp_query(ctx);

d162 1
a162 1
      ctx->pp = pp_init(ctx->st->pipe, ctx->pp_enabled, ctx->st->cso_context);
a185 6
   /* note: we are freeing values and nothing more because
    * driParseConfigFiles allocated values only - the rest
    * is owned by screen optionCacheDefaults.
    */
   free(ctx->optionCache.values);

d194 2
a195 1
   if (ctx->pp) pp_free(ctx->pp);
d239 1
a239 1
   if (!driDrawPriv && !driReadPriv)
d241 1
a241 1
   else if (!driDrawPriv || !driReadPriv)
d273 1
a273 1
   return (struct dri_context *) (st) ? st->st_manager_private : NULL;
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d37 1
d43 1
a43 1
dri_init_extensions(struct dri_context *ctx)
d45 1
a45 1
   struct st_context *st = (struct st_context *) ctx->st;
d47 20
a66 3
   /* New extensions should be added in mesa/state_tracker/st_extensions.c
    * and not in this file. */
   driInitExtensions(st->ctx, NULL, GL_FALSE);
d71 6
a76 1
		   __DRIcontext * cPriv, void *sharedContextPrivate)
d84 1
d94 13
d108 2
a109 2
      attribs.profile = ST_PROFILE_DEFAULT;
      break;
d117 2
a118 1
   if (ctx == NULL)
d120 1
a124 1
   ctx->lock = screen->drmLock;
d127 2
a128 1
		       &screen->optionCache, sPriv->myNum, "dri");
d130 1
d132 26
a157 2
   ctx->st = stapi->create_context(stapi, &screen->base, &attribs, st_share);
   if (ctx->st == NULL)
d159 1
d163 7
a169 9
   /*
    * libmesagallium.a that this state tracker will be linked to expects
    * OpenGL's _glapi_table.  That is, it expects libGL.so instead of
    * libGLESv1_CM.so or libGLESv2.so.  As there is no clean way to know the
    * shared library the app links to, use the api as a simple check.
    * It might be as well to simply remove this function call though.
    */
   if (api == API_OPENGL)
      dri_init_extensions(ctx);
d171 1
d178 1
a178 1
   FREE(ctx);
d187 4
d193 1
a193 1
    * is owned by screen optionCache.
d195 1
a195 1
   FREE(ctx->optionCache.values);
d198 1
a198 1
    * destroying a context, but it is probably worthwhile flushing it
d205 3
a207 1
   FREE(ctx);
a215 2
   struct dri_drawable *draw = dri_drawable(ctx->dPriv);
   struct dri_drawable *read = dri_drawable(ctx->rPriv);
d220 5
a224 1
         ctx->st->flush(ctx->st, ST_FLUSH_FRONT, NULL);
a225 2
         draw->context = NULL;
         read->context = NULL;
d243 1
a253 1
   draw->context = ctx;
a257 1
   read->context = ctx;
d264 6
@


1.1
log
@Initial revision
@
text
@d152 1
a152 1
         ctx->st->flush(ctx->st, PIPE_FLUSH_RENDER_CACHE, NULL);
d174 1
a174 1
      old_st->flush(old_st, PIPE_FLUSH_RENDER_CACHE, NULL);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a36 1
#include "state_tracker/drm_driver.h"
d42 1
a42 1
dri_pp_query(struct dri_context *ctx)
d44 1
a44 1
   unsigned int i;
d46 3
a48 20
   for (i = 0; i < PP_FILTERS; i++) {
      ctx->pp_enabled[i] = driQueryOptioni(&ctx->optionCache, pp_filters[i].name);
   }
}

static void dri_fill_st_options(struct st_config_options *options,
                                const struct driOptionCache * optionCache)
{
   options->disable_blend_func_extended =
      driQueryOptionb(optionCache, "disable_blend_func_extended");
   options->disable_glsl_line_continuations =
      driQueryOptionb(optionCache, "disable_glsl_line_continuations");
   options->disable_shader_bit_encoding =
      driQueryOptionb(optionCache, "disable_shader_bit_encoding");
   options->force_glsl_extensions_warn =
      driQueryOptionb(optionCache, "force_glsl_extensions_warn");
   options->force_glsl_version =
      driQueryOptioni(optionCache, "force_glsl_version");
   options->force_s3tc_enable =
      driQueryOptionb(optionCache, "force_s3tc_enable");
d53 1
a53 6
		   __DRIcontext * cPriv,
		   unsigned major_version,
		   unsigned minor_version,
		   uint32_t flags,
		   unsigned *error,
		   void *sharedContextPrivate)
a60 1
   enum st_context_error ctx_err = 0;
d70 2
a71 12
   case API_OPENGL_COMPAT:
   case API_OPENGL_CORE:
      attribs.profile = api == API_OPENGL_COMPAT ? ST_PROFILE_DEFAULT
                                                 : ST_PROFILE_OPENGL_CORE;
      attribs.major = major_version;
      attribs.minor = minor_version;

      if ((flags & __DRI_CTX_FLAG_DEBUG) != 0)
	 attribs.flags |= ST_CONTEXT_FLAG_DEBUG;

      if ((flags & __DRI_CTX_FLAG_FORWARD_COMPATIBLE) != 0)
	 attribs.flags |= ST_CONTEXT_FLAG_FORWARD_COMPATIBLE;
a72 3
   default:
      *error = __DRI_CTX_ERROR_BAD_API;
      goto fail;
d80 1
a80 2
   if (ctx == NULL) {
      *error = __DRI_CTX_ERROR_NO_MEMORY;
a81 1
   }
d86 1
d89 1
a89 2
		       &screen->optionCacheDefaults,
                       sPriv->myNum, driver_descriptor.name);
a90 1
   dri_fill_st_options(&attribs.options, &ctx->optionCache);
d92 2
a93 26
   ctx->st = stapi->create_context(stapi, &screen->base, &attribs, &ctx_err,
				   st_share);
   if (ctx->st == NULL) {
      switch (ctx_err) {
      case ST_CONTEXT_SUCCESS:
	 *error = __DRI_CTX_ERROR_SUCCESS;
	 break;
      case ST_CONTEXT_ERROR_NO_MEMORY:
	 *error = __DRI_CTX_ERROR_NO_MEMORY;
	 break;
      case ST_CONTEXT_ERROR_BAD_API:
	 *error = __DRI_CTX_ERROR_BAD_API;
	 break;
      case ST_CONTEXT_ERROR_BAD_VERSION:
	 *error = __DRI_CTX_ERROR_BAD_VERSION;
	 break;
      case ST_CONTEXT_ERROR_BAD_FLAG:
	 *error = __DRI_CTX_ERROR_BAD_FLAG;
	 break;
      case ST_CONTEXT_ERROR_UNKNOWN_ATTRIBUTE:
	 *error = __DRI_CTX_ERROR_UNKNOWN_ATTRIBUTE;
	 break;
      case ST_CONTEXT_ERROR_UNKNOWN_FLAG:
	 *error = __DRI_CTX_ERROR_UNKNOWN_FLAG;
	 break;
      }
a94 1
   }
d98 9
a106 7
   // Context successfully created. See if post-processing is requested.
   dri_pp_query(ctx);

   if (ctx->st->cso_context) {
      ctx->pp = pp_init(ctx->st->pipe, ctx->pp_enabled, ctx->st->cso_context);
      ctx->hud = hud_create(ctx->st->pipe, ctx->st->cso_context);
   }
a107 1
   *error = __DRI_CTX_ERROR_SUCCESS;
d114 1
a114 1
   free(ctx);
a122 4
   if (ctx->hud) {
      hud_destroy(ctx->hud);
   }

d125 1
a125 1
    * is owned by screen optionCacheDefaults.
d127 1
a127 1
   free(ctx->optionCache.values);
d130 1
a130 1
    * destroying a context, but we flush the context here
d137 1
a137 3
   if (ctx->pp) pp_free(ctx->pp);

   free(ctx);
d146 2
d152 1
a152 5
         /* For conformance, unbind is supposed to flush the context.
          * However, if we do it here we might end up flushing a partially
          * destroyed context. Instead, we flush in dri_make_current and
          * in dri_destroy_context which should cover all the cases.
          */
d154 2
a172 1
   /* Flush the old context here so we don't have to flush on unbind() */
d174 1
a174 1
      old_st->flush(old_st, ST_FLUSH_FRONT, NULL);
d183 1
d188 1
a194 6

   // This is ok to call here. If they are already init, it's a no-op.
   if (draw->textures[ST_ATTACHMENT_BACK_LEFT] && draw->textures[ST_ATTACHMENT_DEPTH_STENCIL]
      && ctx->pp)
         pp_init_fbos(ctx->pp, draw->textures[ST_ATTACHMENT_BACK_LEFT]->width0,
            draw->textures[ST_ATTACHMENT_BACK_LEFT]->height0);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d43 11
a53 2
dri_fill_st_options(struct st_config_options *options,
                    const struct driOptionCache * optionCache)
a74 1
                   bool notify_reset,
a111 10
   if (flags & ~(__DRI_CTX_FLAG_DEBUG | __DRI_CTX_FLAG_FORWARD_COMPATIBLE)) {
      *error = __DRI_CTX_ERROR_UNKNOWN_FLAG;
      goto fail;
   }

   if (notify_reset) {
      *error = __DRI_CTX_ERROR_UNKNOWN_ATTRIBUTE;
      goto fail;
   }

d126 5
a130 1
   dri_fill_st_options(&attribs.options, &screen->optionCache);
d163 3
d167 1
a167 1
      ctx->pp = pp_init(ctx->st->pipe, screen->pp_enabled, ctx->st->cso_context);
d191 6
d205 1
a205 2
   if (ctx->pp)
      pp_free(ctx->pp);
d249 1
a249 1
   if (!draw && !read)
d251 1
a251 1
   else if (!draw || !read)
d283 1
a283 1
   return (struct dri_context *) st ? st->st_manager_private : NULL;
@


