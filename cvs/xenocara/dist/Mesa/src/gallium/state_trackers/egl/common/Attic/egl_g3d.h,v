head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2013.09.05.14.01.45;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.07;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.14;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 2009-2010 Chia-I Wu <olv@@0xlab.org>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef _EGL_G3D_H_
#define _EGL_G3D_H_

#include "pipe/p_compiler.h"
#include "pipe/p_screen.h"
#include "pipe/p_context.h"
#include "pipe/p_format.h"
#include "os/os_thread.h"
#include "egldriver.h"
#include "egldisplay.h"
#include "eglcontext.h"
#include "eglsurface.h"
#include "eglconfig.h"
#include "eglimage.h"
#include "eglsync.h"
#include "eglscreen.h"
#include "eglmode.h"

#include "native.h"
#include "egl_g3d_st.h"
#include "egl_g3d_loader.h"

struct egl_g3d_driver {
   _EGLDriver base;
   const struct egl_g3d_loader *loader;
   const struct native_platform *platforms[_EGL_NUM_PLATFORMS];
};

struct egl_g3d_display {
   struct native_display *native;

   const struct egl_g3d_loader *loader;
   struct st_manager *smapi;
};

struct egl_g3d_context {
   _EGLContext base;

   struct st_api *stapi;

   struct st_context_iface *stctxi;
};

struct egl_g3d_surface {
   _EGLSurface base;

   struct st_visual stvis;
   struct st_framebuffer_iface *stfbi;

   /* the native surface;  NULL for pbuffers */
   struct native_surface *native;
   struct pipe_resource *render_texture;

   EGLenum client_buffer_type;
   EGLClientBuffer client_buffer;

   unsigned int sequence_number;
};

struct egl_g3d_config {
   _EGLConfig base;
   const struct native_config *native;
   struct st_visual stvis;
};

struct egl_g3d_image {
   _EGLImage base;
   struct pipe_resource *texture;
   unsigned level;
   unsigned layer;
};

/* standard typecasts */
_EGL_DRIVER_STANDARD_TYPECASTS(egl_g3d)
_EGL_DRIVER_TYPECAST(egl_g3d_image, _EGLImage, obj)

struct egl_g3d_sync {
   _EGLSync base;

   /* the mutex protects only the condvar, not the struct */
   pipe_mutex mutex;
   pipe_condvar condvar;

   /* for fence sync */
   struct pipe_fence_handle *fence;
};
_EGL_DRIVER_TYPECAST(egl_g3d_sync, _EGLSync, obj)

#ifdef EGL_MESA_screen_surface

struct egl_g3d_screen {
   _EGLScreen base;
   const struct native_connector *native;
   const struct native_mode **native_modes;
};
_EGL_DRIVER_TYPECAST(egl_g3d_screen, _EGLScreen, obj)

#endif /* EGL_MESA_screen_surface */

static INLINE struct st_api *
egl_g3d_get_st_api(_EGLDriver *drv, enum st_api_type api)
{
   struct egl_g3d_driver *gdrv = egl_g3d_driver(drv);

   return gdrv->loader->get_st_api(api);
}

#endif /* _EGL_G3D_H_ */
@


1.4
log
@Merge Mesa 9.2.0
@
text
@@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.8
a100 2
#ifdef EGL_KHR_reusable_sync

a111 2

#endif /* EGL_KHR_reusable_sync */
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a58 1
   struct pipe_context *pipe;
d128 8
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d17 2
a18 2
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
d20 4
a23 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d33 1
d40 1
d45 2
a46 1
#include "egl_st.h"
d50 2
a51 4
   const struct egl_g3d_st *stapis[NUM_EGL_G3D_STS];
   EGLint api_mask;

   EGLint probe_key;
a55 1
};
d57 3
a59 3
struct egl_g3d_buffer {
   struct st_framebuffer *st_fb;
   uint attachment_mask;
d65 1
a65 2
   const struct egl_g3d_st *stapi;
   struct pipe_context *pipe;
d67 1
a67 3
   struct st_context *st_ctx;
   EGLBoolean force_validate;
   struct egl_g3d_buffer draw, read;
d72 5
d78 5
a82 2
   enum native_attachment render_att;
   struct pipe_surface *render_surface;
d89 1
d94 1
a94 2
   struct pipe_texture *texture;
   unsigned face;
d96 18
a113 1
   unsigned zslice;
d115 5
a125 3

/* standard typecasts */
_EGL_DRIVER_STANDARD_TYPECASTS(egl_g3d)
a126 2
_EGL_DRIVER_TYPECAST(egl_g3d_image, _EGLImage, obj)

d128 1
a128 2
_EGLConfig *
egl_g3d_find_pixmap_config(_EGLDisplay *dpy, EGLNativePixmapType pix);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d17 2
a18 2
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
a31 1
#include "os/os_thread.h"
a37 1
#include "eglsync.h"
d42 1
a42 2
#include "egl_g3d_st.h"
#include "egl_g3d_loader.h"
d46 4
a49 2
   const struct egl_g3d_loader *loader;
   const struct native_platform *platforms[_EGL_NUM_PLATFORMS];
d54 1
d56 3
a58 3
   const struct egl_g3d_loader *loader;
   struct st_manager *smapi;
   struct pipe_context *pipe;
d64 2
a65 1
   struct st_api *stapi;
d67 3
a69 1
   struct st_context_iface *stctxi;
a73 5

   struct st_visual stvis;
   struct st_framebuffer_iface *stfbi;

   /* the native surface;  NULL for pbuffers */
d75 2
a76 5
   struct pipe_resource *render_texture;

   EGLenum client_buffer_type;
   EGLClientBuffer client_buffer;

a82 1
   struct st_visual stvis;
d87 2
a88 1
   struct pipe_resource *texture;
d90 1
a90 18
   unsigned layer;
};

/* standard typecasts */
_EGL_DRIVER_STANDARD_TYPECASTS(egl_g3d)
_EGL_DRIVER_TYPECAST(egl_g3d_image, _EGLImage, obj)

#ifdef EGL_KHR_reusable_sync

struct egl_g3d_sync {
   _EGLSync base;

   /* the mutex protects only the condvar, not the struct */
   pipe_mutex mutex;
   pipe_condvar condvar;

   /* for fence sync */
   struct pipe_fence_handle *fence;
a91 5
_EGL_DRIVER_TYPECAST(egl_g3d_sync, _EGLSync, obj)

#endif /* EGL_KHR_reusable_sync */

#ifdef EGL_MESA_screen_surface
d98 3
d102 2
d105 2
a106 1
#endif /* EGL_MESA_screen_surface */
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d3 1
d59 1
d103 2
d117 2
a128 8

static INLINE struct st_api *
egl_g3d_get_st_api(_EGLDriver *drv, enum st_api_type api)
{
   struct egl_g3d_driver *gdrv = egl_g3d_driver(drv);

   return gdrv->loader->get_st_api(api);
}
@


