head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.37;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2013.09.05.14.01.47;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.07;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.16;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 2009-2010 Chia-I Wu <olv@@0xlab.org>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include "util/u_debug.h"
#include "util/u_memory.h"
#include "util/u_string.h"
#include "egllog.h"

#include "native_x11.h"

static const struct native_event_handler *x11_event_handler;

static struct native_display *
native_create_display(void *dpy, boolean use_sw)
{
   struct native_display *ndpy = NULL;
   boolean force_sw;

   force_sw = debug_get_bool_option("EGL_SOFTWARE", FALSE);

   if (force_sw || use_sw) {
      _eglLog(_EGL_INFO, "use software fallback");
      ndpy = x11_create_ximage_display((Display *) dpy, x11_event_handler);
   }
   else {
      ndpy = x11_create_dri2_display((Display *) dpy, x11_event_handler);
   }

   return ndpy;
}

static const struct native_platform x11_platform = {
   "X11", /* name */
   native_create_display
};

const struct native_platform *
native_get_x11_platform(const struct native_event_handler *event_handler)
{
   x11_event_handler = event_handler;
   return &x11_platform;
}
@


1.4
log
@Merge Mesa 9.2.0
@
text
@@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.8
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d33 2
d36 1
a36 2
native_create_display(void *dpy, struct native_event_handler *event_handler,
                      void *user_data)
d42 4
a45 3
   if (!force_sw) {
      ndpy = x11_create_dri2_display((Display *) dpy,
            event_handler, user_data);
d47 2
a48 7

   if (!ndpy) {
      EGLint level = (force_sw) ? _EGL_INFO : _EGL_WARNING;

      _eglLog(level, "use software fallback");
      ndpy = x11_create_ximage_display((Display *) dpy,
            event_handler, user_data);
d60 1
a60 1
native_get_x11_platform(void)
d62 1
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d17 2
a18 2
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
d20 4
a23 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
a25 2
#include <stdio.h>
#include <string.h>
d28 1
a28 1
#include "state_tracker/drm_api.h"
a31 1
#include "x11_screen.h"
d33 3
a35 96
#define X11_PROBE_MAGIC 0x11980BE /* "X11PROBE" */

static struct drm_api *api;

static void
x11_probe_destroy(struct native_probe *nprobe)
{
   if (nprobe->data)
      free(nprobe->data);
   free(nprobe);
}

struct native_probe *
native_create_probe(EGLNativeDisplayType dpy)
{
   struct native_probe *nprobe;
   struct x11_screen *xscr;
   int scr;
   const char *driver_name = NULL;
   Display *xdpy;

   nprobe = CALLOC_STRUCT(native_probe);
   if (!nprobe)
      return NULL;

   xdpy = dpy;
   if (!xdpy) {
      xdpy = XOpenDisplay(NULL);
      if (!xdpy) {
         free(nprobe);
         return NULL;
      }
   }

   scr = DefaultScreen(xdpy);
   xscr = x11_screen_create(xdpy, scr);
   if (xscr) {
      if (x11_screen_support(xscr, X11_SCREEN_EXTENSION_DRI2)) {
         driver_name = x11_screen_probe_dri2(xscr, NULL, NULL);
         if (driver_name)
            nprobe->data = strdup(driver_name);
      }

      x11_screen_destroy(xscr);
   }

   if (xdpy != dpy)
      XCloseDisplay(xdpy);

   nprobe->magic = X11_PROBE_MAGIC;
   nprobe->display = dpy;

   nprobe->destroy = x11_probe_destroy;

   return nprobe;
}

enum native_probe_result
native_get_probe_result(struct native_probe *nprobe)
{
   if (!nprobe || nprobe->magic != X11_PROBE_MAGIC)
      return NATIVE_PROBE_UNKNOWN;

   if (!api)
      api = drm_api_create();

   /* this is a software driver */
   if (!api)
      return NATIVE_PROBE_SUPPORTED;

   /* the display does not support DRI2 or the driver mismatches */
   if (!nprobe->data || strcmp(api->name, (const char *) nprobe->data) != 0)
      return NATIVE_PROBE_FALLBACK;

   return NATIVE_PROBE_EXACT;
}

const char *
native_get_name(void)
{
   static char x11_name[32];

   if (!api)
      api = drm_api_create();

   if (api)
      snprintf(x11_name, sizeof(x11_name), "X11/%s", api->name);
   else
      snprintf(x11_name, sizeof(x11_name), "X11");

   return x11_name;
}

struct native_display *
native_create_display(EGLNativeDisplayType dpy,
                      struct native_event_handler *event_handler)
a39 3
   if (!api)
      api = drm_api_create();

d41 3
a43 2
   if (api && !force_sw) {
      ndpy = x11_create_dri2_display(dpy, event_handler, api);
a47 1
      boolean use_shm;
d49 3
a51 8
      /*
       * XXX st/mesa calls pipe_screen::update_buffer in st_validate_state.
       * When SHM is used, there is a good chance that the shared memory
       * segment is detached before the softpipe tile cache is flushed.
       */
      use_shm = FALSE;
      _eglLog(level, "use software%s fallback", (use_shm) ? " (SHM)" : "");
      ndpy = x11_create_ximage_display(dpy, event_handler, use_shm);
d55 11
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d17 2
a18 2
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
d25 2
d29 1
a29 1
#include "util/u_string.h"
d33 1
d35 96
a130 3
static struct native_display *
native_create_display(void *dpy, struct native_event_handler *event_handler,
                      void *user_data)
d135 3
d139 2
a140 3
   if (!force_sw) {
      ndpy = x11_create_dri2_display((Display *) dpy,
            event_handler, user_data);
d145 1
d147 8
a154 3
      _eglLog(level, "use software fallback");
      ndpy = x11_create_ximage_display((Display *) dpy,
            event_handler, user_data);
a157 11
}

static const struct native_platform x11_platform = {
   "X11", /* name */
   native_create_display
};

const struct native_platform *
native_get_x11_platform(void)
{
   return &x11_platform;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d3 1
a32 2
static const struct native_event_handler *x11_event_handler;

d34 2
a35 1
native_create_display(void *dpy, boolean use_sw)
d41 4
d46 6
a51 6
   if (force_sw || use_sw) {
      _eglLog(_EGL_INFO, "use software fallback");
      ndpy = x11_create_ximage_display((Display *) dpy, x11_event_handler);
   }
   else {
      ndpy = x11_create_dri2_display((Display *) dpy, x11_event_handler);
d63 1
a63 1
native_get_x11_platform(const struct native_event_handler *event_handler)
a64 1
   x11_event_handler = event_handler;
@


