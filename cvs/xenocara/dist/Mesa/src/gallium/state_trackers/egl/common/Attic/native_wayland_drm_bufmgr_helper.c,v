head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.07.09.21.08.55;	author jsg;	state dead;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.11.24.06.19.52;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2013.09.05.14.01.46;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.07;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.15;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.11.24.05.57.08;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@#include <stdint.h>
#include <string.h>

#include "native.h"
#include "util/u_inlines.h"
#include "state_tracker/drm_driver.h"

#ifdef HAVE_WAYLAND_BACKEND

#include <wayland-server.h>
#include <wayland-drm-server-protocol.h>

#include "native_wayland_drm_bufmgr_helper.h"

void
egl_g3d_wl_drm_helper_reference_buffer(void *user_data, uint32_t name, int fd,
                                       struct wl_drm_buffer *buffer)
{
   struct native_display *ndpy = user_data;
   struct pipe_resource templ;
   struct winsys_handle wsh;
   enum pipe_format pf;

   switch (buffer->format) {
   case WL_DRM_FORMAT_ARGB8888:
      pf = PIPE_FORMAT_B8G8R8A8_UNORM;
      break;
   case WL_DRM_FORMAT_XRGB8888:
      pf = PIPE_FORMAT_B8G8R8X8_UNORM;
      break;
   default:
      pf = PIPE_FORMAT_NONE;
      break;
   }

   if (pf == PIPE_FORMAT_NONE)
      return;

   memset(&templ, 0, sizeof(templ));
   templ.target = PIPE_TEXTURE_2D;
   templ.format = pf;
   templ.bind = PIPE_BIND_RENDER_TARGET | PIPE_BIND_SAMPLER_VIEW;
   templ.width0 = buffer->buffer.width;
   templ.height0 = buffer->buffer.height;
   templ.depth0 = 1;
   templ.array_size = 1;

   memset(&wsh, 0, sizeof(wsh));
   wsh.handle = name;
   wsh.stride = buffer->stride[0];

   buffer->driver_buffer =
      ndpy->screen->resource_from_handle(ndpy->screen, &templ, &wsh);
}

void
egl_g3d_wl_drm_helper_unreference_buffer(void *user_data,
                                         struct wl_drm_buffer *buffer)
{
   struct pipe_resource *resource = buffer->driver_buffer;

   pipe_resource_reference(&resource, NULL);
}

struct pipe_resource *
egl_g3d_wl_drm_common_wl_buffer_get_resource(struct native_display *ndpy,
                                             struct wl_buffer *buffer)
{
   return wayland_drm_buffer_get_buffer(buffer);
}

EGLBoolean
egl_g3d_wl_drm_common_query_buffer(struct native_display *ndpy,
                                   struct wl_buffer *_buffer,
                                   EGLint attribute, EGLint *value)
{
   struct wl_drm_buffer *buffer = (struct wl_drm_buffer *) _buffer;
   struct pipe_resource *resource = buffer->driver_buffer;

   if (!wayland_buffer_is_drm(ndpy->wl_server_drm, &buffer->buffer))
      return EGL_FALSE;

   switch (attribute) {
   case EGL_TEXTURE_FORMAT:
      switch (resource->format) {
      case PIPE_FORMAT_B8G8R8A8_UNORM:
         *value = EGL_TEXTURE_RGBA;
         return EGL_TRUE;
      case PIPE_FORMAT_B8G8R8X8_UNORM:
         *value = EGL_TEXTURE_RGB;
         return EGL_TRUE;
      default:
         return EGL_FALSE;
      }
   case EGL_WIDTH:
      *value = buffer->buffer.width;
      return EGL_TRUE;
   case EGL_HEIGHT:
      *value = buffer->buffer.height;
      return EGL_TRUE;
   default:
      return EGL_FALSE;
   }
}

#endif
@


1.3
log
@Merge Mesa 9.2.3
ok mpi@@ kettenis@@
@
text
@@


1.2
log
@Merge Mesa 9.2.0
@
text
@d80 1
a80 1
   if (!wayland_buffer_is_drm(&buffer->buffer))
@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d15 3
a17 5
void *
egl_g3d_wl_drm_helper_reference_buffer(void *user_data, uint32_t name,
                                       int32_t width, int32_t height,
                                       uint32_t stride,
                                       struct wl_visual *visual)
d22 16
a37 1
   enum pipe_format format = PIPE_FORMAT_B8G8R8A8_UNORM;
d41 1
a41 1
   templ.format = format;
d43 2
a44 2
   templ.width0 = width;
   templ.height0 = height;
d50 1
a50 1
   wsh.stride = stride;
d52 2
a53 1
   return ndpy->screen->resource_from_handle(ndpy->screen, &templ, &wsh);
d57 2
a58 1
egl_g3d_wl_drm_helper_unreference_buffer(void *user_data, void *buffer)
d60 1
a60 1
   struct pipe_resource *resource = buffer;
d70 34
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@d15 5
a19 3
void
egl_g3d_wl_drm_helper_reference_buffer(void *user_data, uint32_t name, int fd,
                                       struct wl_drm_buffer *buffer)
d24 1
a24 16
   enum pipe_format pf;

   switch (buffer->format) {
   case WL_DRM_FORMAT_ARGB8888:
      pf = PIPE_FORMAT_B8G8R8A8_UNORM;
      break;
   case WL_DRM_FORMAT_XRGB8888:
      pf = PIPE_FORMAT_B8G8R8X8_UNORM;
      break;
   default:
      pf = PIPE_FORMAT_NONE;
      break;
   }

   if (pf == PIPE_FORMAT_NONE)
      return;
d28 1
a28 1
   templ.format = pf;
d30 2
a31 2
   templ.width0 = buffer->buffer.width;
   templ.height0 = buffer->buffer.height;
d37 1
a37 1
   wsh.stride = buffer->stride[0];
d39 1
a39 2
   buffer->driver_buffer =
      ndpy->screen->resource_from_handle(ndpy->screen, &templ, &wsh);
d43 1
a43 2
egl_g3d_wl_drm_helper_unreference_buffer(void *user_data,
                                         struct wl_drm_buffer *buffer)
d45 1
a45 1
   struct pipe_resource *resource = buffer->driver_buffer;
a54 34
}

EGLBoolean
egl_g3d_wl_drm_common_query_buffer(struct native_display *ndpy,
                                   struct wl_buffer *_buffer,
                                   EGLint attribute, EGLint *value)
{
   struct wl_drm_buffer *buffer = (struct wl_drm_buffer *) _buffer;
   struct pipe_resource *resource = buffer->driver_buffer;

   if (!wayland_buffer_is_drm(&buffer->buffer))
      return EGL_FALSE;

   switch (attribute) {
   case EGL_TEXTURE_FORMAT:
      switch (resource->format) {
      case PIPE_FORMAT_B8G8R8A8_UNORM:
         *value = EGL_TEXTURE_RGBA;
         return EGL_TRUE;
      case PIPE_FORMAT_B8G8R8X8_UNORM:
         *value = EGL_TEXTURE_RGB;
         return EGL_TRUE;
      default:
         return EGL_FALSE;
      }
   case EGL_WIDTH:
      *value = buffer->buffer.width;
      return EGL_TRUE;
   case EGL_HEIGHT:
      *value = buffer->buffer.height;
      return EGL_TRUE;
   default:
      return EGL_FALSE;
   }
@


1.1.1.2
log
@Import Mesa 9.2.3
@
text
@d80 1
a80 1
   if (!wayland_buffer_is_drm(ndpy->wl_server_drm, &buffer->buffer))
@


