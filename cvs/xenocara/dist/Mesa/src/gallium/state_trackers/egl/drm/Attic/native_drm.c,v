head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.36;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.11.24.06.19.52;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2013.09.05.14.01.46;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.07;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.16;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.11.24.05.57.08;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.19;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 2010 Chia-I Wu <olv@@0xlab.org>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>

#include "util/u_memory.h"
#include "egllog.h"
#include "loader.h"

#include "native_drm.h"

#include "gbm_gallium_drmint.h"

static boolean
drm_display_is_format_supported(struct native_display *ndpy,
                                enum pipe_format fmt, boolean is_color)
{
   return ndpy->screen->is_format_supported(ndpy->screen,
         fmt, PIPE_TEXTURE_2D, 0,
         (is_color) ? PIPE_BIND_RENDER_TARGET :
         PIPE_BIND_DEPTH_STENCIL);
}

static const struct native_config **
drm_display_get_configs(struct native_display *ndpy, int *num_configs)
{
   struct drm_display *drmdpy = drm_display(ndpy);
   const struct native_config **configs;

   /* first time */
   if (!drmdpy->config) {
      struct native_config *nconf;
      enum pipe_format format;

      drmdpy->config = CALLOC(1, sizeof(*drmdpy->config));
      if (!drmdpy->config)
         return NULL;

      nconf = &drmdpy->config->base;

      nconf->buffer_mask =
         (1 << NATIVE_ATTACHMENT_FRONT_LEFT) |
         (1 << NATIVE_ATTACHMENT_BACK_LEFT);

      format = PIPE_FORMAT_B8G8R8A8_UNORM;
      if (!drm_display_is_format_supported(&drmdpy->base, format, TRUE)) {
         format = PIPE_FORMAT_A8R8G8B8_UNORM;
         if (!drm_display_is_format_supported(&drmdpy->base, format, TRUE))
            format = PIPE_FORMAT_NONE;
      }
      if (format == PIPE_FORMAT_NONE) {
         FREE(drmdpy->config);
         drmdpy->config = NULL;
         return NULL;
      }

      nconf->color_format = format;

      /* support KMS */
      if (drmdpy->resources)
         nconf->scanout_bit = TRUE;
   }

   configs = MALLOC(sizeof(*configs));
   if (configs) {
      configs[0] = &drmdpy->config->base;
      if (num_configs)
         *num_configs = 1;
   }

   return configs;
}

static int
drm_display_get_param(struct native_display *ndpy,
                      enum native_param_type param)
{
   int val;

   switch (param) {
   case NATIVE_PARAM_USE_NATIVE_BUFFER:
   case NATIVE_PARAM_PRESERVE_BUFFER:
   case NATIVE_PARAM_MAX_SWAP_INTERVAL:
   default:
      val = 0;
      break;
   }

   return val;
}

static void
drm_display_destroy(struct native_display *ndpy)
{
   struct drm_display *drmdpy = drm_display(ndpy);

   FREE(drmdpy->config);

   drm_display_fini_modeset(&drmdpy->base);

   /* gbm owns screen */
   ndpy->screen = NULL;
   ndpy_uninit(ndpy);

   FREE(drmdpy->device_name);

#ifdef HAVE_WAYLAND_BACKEND
   wayland_drm_bufmgr_destroy(ndpy->wayland_bufmgr);
#endif

   if (drmdpy->own_gbm) {
      gbm_device_destroy(&drmdpy->gbmdrm->base.base);
      if (drmdpy->fd >= 0)
         close(drmdpy->fd);
   }

   FREE(drmdpy);
}

static struct native_display_buffer drm_display_buffer = {
   /* use the helpers */
   drm_display_import_native_buffer,
   drm_display_export_native_buffer
};

#ifdef HAVE_WAYLAND_BACKEND

static int
drm_display_authenticate(void *user_data, uint32_t magic)
{
   struct native_display *ndpy = user_data;
   struct drm_display *drmdpy = drm_display(ndpy);

   return drmAuthMagic(drmdpy->fd, magic);
}

#endif /* HAVE_WAYLAND_BACKEND */

static struct native_surface *
drm_create_pixmap_surface(struct native_display *ndpy,
                              EGLNativePixmapType pix,
                              const struct native_config *nconf)
{
   struct gbm_gallium_drm_bo *bo = (void *) pix;

   return drm_display_create_surface_from_resource(ndpy, bo->resource);
}

static boolean
drm_display_init_screen(struct native_display *ndpy)
{
   return TRUE;
}

static struct native_display *
drm_create_display(struct gbm_gallium_drm_device *gbmdrm, int own_gbm,
                   const struct native_event_handler *event_handler)
{
   struct drm_display *drmdpy;

   drmdpy = CALLOC_STRUCT(drm_display);
   if (!drmdpy)
      return NULL;

   drmdpy->gbmdrm = gbmdrm;
   drmdpy->own_gbm = own_gbm;
   drmdpy->fd = gbmdrm->base.base.fd;
   drmdpy->device_name = loader_get_device_name_for_fd(drmdpy->fd);

   gbmdrm->lookup_egl_image = (struct pipe_resource *(*)(void *, void *))
      event_handler->lookup_egl_image;
   gbmdrm->lookup_egl_image_data = &drmdpy->base;

   drmdpy->event_handler = event_handler;

   drmdpy->base.screen = gbmdrm->screen;

   drmdpy->base.init_screen = drm_display_init_screen;
   drmdpy->base.destroy = drm_display_destroy;
   drmdpy->base.get_param = drm_display_get_param;
   drmdpy->base.get_configs = drm_display_get_configs;

   drmdpy->base.create_pixmap_surface = drm_create_pixmap_surface;

   drmdpy->base.buffer = &drm_display_buffer;
#ifdef HAVE_WAYLAND_BACKEND
   if (drmdpy->device_name)
      drmdpy->base.wayland_bufmgr = wayland_drm_bufmgr_create(
             drm_display_authenticate, drmdpy, drmdpy->device_name);
#endif
   drm_display_init_modeset(&drmdpy->base);

   return &drmdpy->base;
}

static const struct native_event_handler *drm_event_handler;

static struct native_display *
native_create_display(void *dpy, boolean use_sw)
{
   struct gbm_gallium_drm_device *gbm;
   int fd;
   int own_gbm = 0;

   gbm = dpy;

   if (gbm == NULL) {
      const char *device_name="/dev/dri/card0";
#ifdef O_CLOEXEC
      fd = open(device_name, O_RDWR | O_CLOEXEC);
      if (fd == -1 && errno == EINVAL)
#endif
      {
         fd = open(device_name, O_RDWR);
         if (fd != -1)
            fcntl(fd, F_SETFD, fcntl(fd, F_GETFD) | FD_CLOEXEC);
      }
      /* FIXME: Use an internal constructor to create a gbm
       * device with gallium backend directly, without setenv */
      setenv("GBM_BACKEND", "gbm_gallium_drm.so", 1);
      gbm = gbm_gallium_drm_device(gbm_create_device(fd));
      own_gbm = 1;
   }

   if (gbm == NULL)
      return NULL;
   
   if (strcmp(gbm_device_get_backend_name(&gbm->base.base), "drm") != 0 ||
       gbm->base.type != GBM_DRM_DRIVER_TYPE_GALLIUM) {
      if (own_gbm)
         gbm_device_destroy(&gbm->base.base);
      return NULL;
   }

   return drm_create_display(gbm, own_gbm, drm_event_handler);
}

static const struct native_platform drm_platform = {
   "DRM", /* name */
   native_create_display
};

const struct native_platform *
native_get_drm_platform(const struct native_event_handler *event_handler)
{
   drm_event_handler = event_handler;
   return &drm_platform;
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.3
ok mpi@@ kettenis@@
@
text
@d33 1
a38 8
#ifdef HAVE_LIBUDEV
#include <libudev.h>
#endif

#ifdef HAVE_WAYLAND_BACKEND
#include "common/native_wayland_drm_bufmgr_helper.h"
#endif

d132 4
a150 37
static char *
drm_get_device_name(int fd)
{
   char *device_name = NULL;
#ifdef HAVE_LIBUDEV
   struct udev *udev;
   struct udev_device *device;
   struct stat buf;
   const char *tmp;

   udev = udev_new();
   if (fstat(fd, &buf) < 0) {
      _eglLog(_EGL_WARNING, "failed to stat fd %d", fd);
      goto outudev;
   }

   device = udev_device_new_from_devnum(udev, 'c', buf.st_rdev);
   if (device == NULL) {
      _eglLog(_EGL_WARNING,
              "could not create udev device for fd %d", fd);
      goto outdevice;
   }

   tmp = udev_device_get_devnode(device);
   if (!tmp)
      goto outdevice;
   device_name = strdup(tmp);

outdevice:
   udev_device_unref(device);
outudev:
   udev_unref(udev);

#endif
   return device_name;
}

a161 45
static struct wayland_drm_callbacks wl_drm_callbacks = {
   drm_display_authenticate,
   egl_g3d_wl_drm_helper_reference_buffer,
   egl_g3d_wl_drm_helper_unreference_buffer
};

static boolean
drm_display_bind_wayland_display(struct native_display *ndpy,
                                  struct wl_display *wl_dpy)
{
   struct drm_display *drmdpy = drm_display(ndpy);

   if (ndpy->wl_server_drm)
      return FALSE;

   ndpy->wl_server_drm = wayland_drm_init(wl_dpy,
         drmdpy->device_name,
         &wl_drm_callbacks, ndpy, 0);

   if (!ndpy->wl_server_drm)
      return FALSE;
   
   return TRUE;
}

static boolean
drm_display_unbind_wayland_display(struct native_display *ndpy,
                                    struct wl_display *wl_dpy)
{
   if (!ndpy->wl_server_drm)
      return FALSE;

   wayland_drm_uninit(ndpy->wl_server_drm);
   ndpy->wl_server_drm = NULL;

   return TRUE;
}

static struct native_display_wayland_bufmgr drm_display_wayland_bufmgr = {
   drm_display_bind_wayland_display,
   drm_display_unbind_wayland_display,
   egl_g3d_wl_drm_common_wl_buffer_get_resource,
   egl_g3d_wl_drm_common_query_buffer
};

d193 1
a193 1
   drmdpy->device_name = drm_get_device_name(drmdpy->fd);
d213 2
a214 1
      drmdpy->base.wayland_bufmgr = &drm_display_wayland_bufmgr;
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d42 4
d214 1
a214 1
   if (drmdpy->wl_server_drm)
d217 1
a217 1
   drmdpy->wl_server_drm = wayland_drm_init(wl_dpy,
d221 1
a221 1
   if (!drmdpy->wl_server_drm)
d231 1
a231 3
   struct drm_display *drmdpy = drm_display(ndpy);

   if (!drmdpy->wl_server_drm)
d234 2
a235 2
   wayland_drm_uninit(drmdpy->wl_server_drm);
   drmdpy->wl_server_drm = NULL;
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.8
d29 1
d125 1
a125 2
   if (drmdpy->config)
      FREE(drmdpy->config);
d133 1
a133 2
   if (drmdpy->device_name)
      FREE(drmdpy->device_name);
d135 5
a139 2
   if (drmdpy->fd >= 0)
      close(drmdpy->fd);
a149 9
static int
drm_display_authenticate(void *user_data, uint32_t magic)
{
   struct native_display *ndpy = user_data;
   struct drm_display *drmdpy = drm_display(ndpy);

   return drmAuthMagic(drmdpy->fd, magic);
}

d163 1
a163 1
      goto out;
d170 1
a170 1
      goto out;
d175 1
a175 1
      goto out;
d178 1
a178 1
out:
d180 1
d189 9
d215 1
a215 1
         &wl_drm_callbacks, ndpy);
d241 2
a242 1
   egl_g3d_wl_drm_common_wl_buffer_get_resource
d264 1
a264 1
drm_create_display(struct gbm_gallium_drm_device *gbmdrm,
d273 2
d310 1
d315 13
a327 1
      fd = open("/dev/dri/card0", O_RDWR);
d329 1
d336 3
a338 1
       gbm->base.type != GBM_DRM_DRIVER_TYPE_GALLIUM)
d340 1
d342 1
a342 1
   return drm_create_display(gbm, drm_event_handler);
@


1.1
log
@Initial revision
@
text
@d26 1
d36 5
a40 3
/* see get_drm_screen_name */
#include <radeon_drm.h>
#include "radeon/drm/radeon_drm_public.h"
d49 1
a49 1
         PIPE_BIND_DEPTH_STENCIL, 0);
d130 6
a135 2
   if (drmdpy->base.screen)
      drmdpy->base.screen->destroy(drmdpy->base.screen);
d143 8
a150 2
static const char *
get_drm_screen_name(int fd, drmVersionPtr version)
d152 5
a156 1
   const char *name = version->name;
d158 15
a172 9
   if (name && !strcmp(name, "radeon")) {
      int chip_id;
      struct drm_radeon_info info;

      memset(&info, 0, sizeof(info));
      info.request = RADEON_INFO_DEVICE_ID;
      info.value = pointer_to_intptr(&chip_id);
      if (drmCommandWriteRead(fd, DRM_RADEON_INFO, &info, sizeof(info)) != 0)
         return NULL;
d174 5
a178 1
      name = is_r3xx(chip_id) ? "r300" : "r600";
d181 11
a191 1
   return name;
d194 8
a201 3
/**
 * Initialize KMS and pipe screen.
 */
d203 2
a204 1
drm_display_init_screen(struct native_display *ndpy)
a206 2
   drmVersionPtr version;
   const char *name;
d208 8
a215 3
   version = drmGetVersion(drmdpy->fd);
   if (!version) {
      _eglLog(_EGL_WARNING, "invalid fd %d", drmdpy->fd);
d217 3
a219 1
   }
d221 5
a225 6
   name = get_drm_screen_name(drmdpy->fd, version);
   if (name) {
      drmdpy->base.screen =
         drmdpy->event_handler->new_drm_screen(&drmdpy->base, name, drmdpy->fd);
   }
   drmFreeVersion(version);
d227 1
a227 2
   if (!drmdpy->base.screen) {
      _eglLog(_EGL_WARNING, "failed to create DRM screen");
d229 3
a231 1
   }
d236 12
a247 4
static struct pipe_resource *
drm_display_import_buffer(struct native_display *ndpy,
                          const struct pipe_resource *templ,
                          void *buf)
d249 3
a251 2
   return ndpy->screen->resource_from_handle(ndpy->screen,
         templ, (struct winsys_handle *) buf);
d255 1
a255 3
drm_display_export_buffer(struct native_display *ndpy,
                          struct pipe_resource *res,
                          void *buf)
d257 1
a257 2
   return ndpy->screen->resource_get_handle(ndpy->screen,
         res, (struct winsys_handle *) buf);
a259 5
static struct native_display_buffer drm_display_buffer = {
   drm_display_import_buffer,
   drm_display_export_buffer
};

d261 2
a262 2
drm_create_display(int fd, struct native_event_handler *event_handler,
                   void *user_data)
d270 7
a276 1
   drmdpy->fd = fd;
a277 1
   drmdpy->base.user_data = user_data;
d279 1
a279 4
   if (!drm_display_init_screen(&drmdpy->base)) {
      drm_display_destroy(&drmdpy->base);
      return NULL;
   }
d281 1
d286 2
d289 4
d298 2
d301 1
a301 2
native_create_display(void *dpy, struct native_event_handler *event_handler,
                      void *user_data)
d303 1
d306 3
a308 4
   if (dpy) {
      fd = dup((int) pointer_to_intptr(dpy));
   }
   else {
d310 1
d312 6
a317 1
   if (fd < 0)
d320 1
a320 1
   return drm_create_display(fd, event_handler, user_data);
d329 1
a329 1
native_get_drm_platform(void)
d331 1
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d3 1
a25 1
#include <string.h>
a28 1
#include <errno.h>
d35 3
a37 5
#include "gbm_gallium_drmint.h"

#ifdef HAVE_LIBUDEV
#include <libudev.h>
#endif
d46 1
a46 1
         PIPE_BIND_DEPTH_STENCIL);
d122 2
a123 1
   FREE(drmdpy->config);
d127 5
a131 11
   /* gbm owns screen */
   ndpy->screen = NULL;
   ndpy_uninit(ndpy);

   FREE(drmdpy->device_name);

   if (drmdpy->own_gbm) {
      gbm_device_destroy(&drmdpy->gbmdrm->base.base);
      if (drmdpy->fd >= 0)
         close(drmdpy->fd);
   }
d136 4
a139 5
static struct native_display_buffer drm_display_buffer = {
   /* use the helpers */
   drm_display_import_native_buffer,
   drm_display_export_native_buffer
};
d141 9
a149 15
static char *
drm_get_device_name(int fd)
{
   char *device_name = NULL;
#ifdef HAVE_LIBUDEV
   struct udev *udev;
   struct udev_device *device;
   struct stat buf;
   const char *tmp;

   udev = udev_new();
   if (fstat(fd, &buf) < 0) {
      _eglLog(_EGL_WARNING, "failed to stat fd %d", fd);
      goto outudev;
   }
d151 1
a151 5
   device = udev_device_new_from_devnum(udev, 'c', buf.st_rdev);
   if (device == NULL) {
      _eglLog(_EGL_WARNING,
              "could not create udev device for fd %d", fd);
      goto outdevice;
d154 1
a154 12
   tmp = udev_device_get_devnode(device);
   if (!tmp)
      goto outdevice;
   device_name = strdup(tmp);

outdevice:
   udev_device_unref(device);
outudev:
   udev_unref(udev);

#endif
   return device_name;
d157 3
a159 17
#ifdef HAVE_WAYLAND_BACKEND

static int
drm_display_authenticate(void *user_data, uint32_t magic)
{
   struct native_display *ndpy = user_data;
   struct drm_display *drmdpy = drm_display(ndpy);

   return drmAuthMagic(drmdpy->fd, magic);
}

static struct wayland_drm_callbacks wl_drm_callbacks = {
   drm_display_authenticate,
   egl_g3d_wl_drm_helper_reference_buffer,
   egl_g3d_wl_drm_helper_unreference_buffer
};

d161 1
a161 2
drm_display_bind_wayland_display(struct native_display *ndpy,
                                  struct wl_display *wl_dpy)
d164 2
d167 3
a169 1
   if (drmdpy->wl_server_drm)
d171 1
d173 6
a178 3
   drmdpy->wl_server_drm = wayland_drm_init(wl_dpy,
         drmdpy->device_name,
         &wl_drm_callbacks, ndpy, 0);
d180 2
a181 1
   if (!drmdpy->wl_server_drm)
d183 1
a183 15
   
   return TRUE;
}

static boolean
drm_display_unbind_wayland_display(struct native_display *ndpy,
                                    struct wl_display *wl_dpy)
{
   struct drm_display *drmdpy = drm_display(ndpy);

   if (!drmdpy->wl_server_drm)
      return FALSE;

   wayland_drm_uninit(drmdpy->wl_server_drm);
   drmdpy->wl_server_drm = NULL;
d188 4
a191 13
static struct native_display_wayland_bufmgr drm_display_wayland_bufmgr = {
   drm_display_bind_wayland_display,
   drm_display_unbind_wayland_display,
   egl_g3d_wl_drm_common_wl_buffer_get_resource,
   egl_g3d_wl_drm_common_query_buffer
};

#endif /* HAVE_WAYLAND_BACKEND */

static struct native_surface *
drm_create_pixmap_surface(struct native_display *ndpy,
                              EGLNativePixmapType pix,
                              const struct native_config *nconf)
d193 2
a194 3
   struct gbm_gallium_drm_bo *bo = (void *) pix;

   return drm_display_create_surface_from_resource(ndpy, bo->resource);
d198 3
a200 1
drm_display_init_screen(struct native_display *ndpy)
d202 2
a203 1
   return TRUE;
d206 5
d212 2
a213 2
drm_create_display(struct gbm_gallium_drm_device *gbmdrm, int own_gbm,
                   const struct native_event_handler *event_handler)
d221 1
a221 9
   drmdpy->gbmdrm = gbmdrm;
   drmdpy->own_gbm = own_gbm;
   drmdpy->fd = gbmdrm->base.base.fd;
   drmdpy->device_name = drm_get_device_name(drmdpy->fd);

   gbmdrm->lookup_egl_image = (struct pipe_resource *(*)(void *, void *))
      event_handler->lookup_egl_image;
   gbmdrm->lookup_egl_image_data = &drmdpy->base;

d223 1
d225 4
a228 1
   drmdpy->base.screen = gbmdrm->screen;
a229 1
   drmdpy->base.init_screen = drm_display_init_screen;
a233 2
   drmdpy->base.create_pixmap_surface = drm_create_pixmap_surface;

a234 4
#ifdef HAVE_WAYLAND_BACKEND
   if (drmdpy->device_name)
      drmdpy->base.wayland_bufmgr = &drm_display_wayland_bufmgr;
#endif
a239 2
static const struct native_event_handler *drm_event_handler;

d241 2
a242 1
native_create_display(void *dpy, boolean use_sw)
a243 1
   struct gbm_gallium_drm_device *gbm;
a244 1
   int own_gbm = 0;
d246 5
a250 18
   gbm = dpy;

   if (gbm == NULL) {
      const char *device_name="/dev/dri/card0";
#ifdef O_CLOEXEC
      fd = open(device_name, O_RDWR | O_CLOEXEC);
      if (fd == -1 && errno == EINVAL)
#endif
      {
         fd = open(device_name, O_RDWR);
         if (fd != -1)
            fcntl(fd, F_SETFD, fcntl(fd, F_GETFD) | FD_CLOEXEC);
      }
      /* FIXME: Use an internal constructor to create a gbm
       * device with gallium backend directly, without setenv */
      setenv("GBM_BACKEND", "gbm_gallium_drm.so", 1);
      gbm = gbm_gallium_drm_device(gbm_create_device(fd));
      own_gbm = 1;
d252 1
a252 8

   if (gbm == NULL)
      return NULL;
   
   if (strcmp(gbm_device_get_backend_name(&gbm->base.base), "drm") != 0 ||
       gbm->base.type != GBM_DRM_DRIVER_TYPE_GALLIUM) {
      if (own_gbm)
         gbm_device_destroy(&gbm->base.base);
a253 1
   }
d255 1
a255 1
   return drm_create_display(gbm, own_gbm, drm_event_handler);
d264 1
a264 1
native_get_drm_platform(const struct native_event_handler *event_handler)
a265 1
   drm_event_handler = event_handler;
@


1.1.1.3
log
@Import Mesa 9.2.3
@
text
@a41 4
#ifdef HAVE_WAYLAND_BACKEND
#include "common/native_wayland_drm_bufmgr_helper.h"
#endif

d210 1
a210 1
   if (ndpy->wl_server_drm)
d213 1
a213 1
   ndpy->wl_server_drm = wayland_drm_init(wl_dpy,
d217 1
a217 1
   if (!ndpy->wl_server_drm)
d227 3
a229 1
   if (!ndpy->wl_server_drm)
d232 2
a233 2
   wayland_drm_uninit(ndpy->wl_server_drm);
   ndpy->wl_server_drm = NULL;
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@a32 1
#include "loader.h"
d38 8
a138 4
#ifdef HAVE_WAYLAND_BACKEND
   wayland_drm_bufmgr_destroy(ndpy->wayland_bufmgr);
#endif

d154 37
d202 45
d278 1
a278 1
   drmdpy->device_name = loader_get_device_name_for_fd(drmdpy->fd);
d298 1
a298 2
      drmdpy->base.wayland_bufmgr = wayland_drm_bufmgr_create(
             drm_display_authenticate, drmdpy, drmdpy->device_name);
@


