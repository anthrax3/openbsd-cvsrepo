head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2015.02.22.09.30.34;	author jsg;	state Exp;
branches;
next	1.7;
commitid	yhStanAcs6cSYmBc;

1.7
date	2015.02.20.23.09.53;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.16;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.14;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.00;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.25;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.02;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.09;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#ifndef PIPE_DEFINES_H
#define PIPE_DEFINES_H

#include "p_compiler.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Gallium error codes.
 *
 * - A zero value always means success.
 * - A negative value always means failure.
 * - The meaning of a positive value is function dependent.
 */
enum pipe_error {
   PIPE_OK = 0,
   PIPE_ERROR = -1,    /**< Generic error */
   PIPE_ERROR_BAD_INPUT = -2,
   PIPE_ERROR_OUT_OF_MEMORY = -3,
   PIPE_ERROR_RETRY = -4
   /* TODO */
};


#define PIPE_BLENDFACTOR_ONE                 0x1
#define PIPE_BLENDFACTOR_SRC_COLOR           0x2
#define PIPE_BLENDFACTOR_SRC_ALPHA           0x3
#define PIPE_BLENDFACTOR_DST_ALPHA           0x4
#define PIPE_BLENDFACTOR_DST_COLOR           0x5
#define PIPE_BLENDFACTOR_SRC_ALPHA_SATURATE  0x6
#define PIPE_BLENDFACTOR_CONST_COLOR         0x7
#define PIPE_BLENDFACTOR_CONST_ALPHA         0x8
#define PIPE_BLENDFACTOR_SRC1_COLOR          0x9
#define PIPE_BLENDFACTOR_SRC1_ALPHA          0x0A
#define PIPE_BLENDFACTOR_ZERO                0x11
#define PIPE_BLENDFACTOR_INV_SRC_COLOR       0x12
#define PIPE_BLENDFACTOR_INV_SRC_ALPHA       0x13
#define PIPE_BLENDFACTOR_INV_DST_ALPHA       0x14
#define PIPE_BLENDFACTOR_INV_DST_COLOR       0x15
#define PIPE_BLENDFACTOR_INV_CONST_COLOR     0x17
#define PIPE_BLENDFACTOR_INV_CONST_ALPHA     0x18
#define PIPE_BLENDFACTOR_INV_SRC1_COLOR      0x19
#define PIPE_BLENDFACTOR_INV_SRC1_ALPHA      0x1A

#define PIPE_BLEND_ADD               0
#define PIPE_BLEND_SUBTRACT          1
#define PIPE_BLEND_REVERSE_SUBTRACT  2
#define PIPE_BLEND_MIN               3
#define PIPE_BLEND_MAX               4

#define PIPE_LOGICOP_CLEAR            0
#define PIPE_LOGICOP_NOR              1
#define PIPE_LOGICOP_AND_INVERTED     2
#define PIPE_LOGICOP_COPY_INVERTED    3
#define PIPE_LOGICOP_AND_REVERSE      4
#define PIPE_LOGICOP_INVERT           5
#define PIPE_LOGICOP_XOR              6
#define PIPE_LOGICOP_NAND             7
#define PIPE_LOGICOP_AND              8
#define PIPE_LOGICOP_EQUIV            9
#define PIPE_LOGICOP_NOOP             10
#define PIPE_LOGICOP_OR_INVERTED      11
#define PIPE_LOGICOP_COPY             12
#define PIPE_LOGICOP_OR_REVERSE       13
#define PIPE_LOGICOP_OR               14
#define PIPE_LOGICOP_SET              15  

#define PIPE_MASK_R  0x1
#define PIPE_MASK_G  0x2
#define PIPE_MASK_B  0x4
#define PIPE_MASK_A  0x8
#define PIPE_MASK_RGBA 0xf
#define PIPE_MASK_Z  0x10
#define PIPE_MASK_S  0x20
#define PIPE_MASK_ZS 0x30
#define PIPE_MASK_RGBAZS (PIPE_MASK_RGBA|PIPE_MASK_ZS)


/**
 * Inequality functions.  Used for depth test, stencil compare, alpha
 * test, shadow compare, etc.
 */
#define PIPE_FUNC_NEVER    0
#define PIPE_FUNC_LESS     1
#define PIPE_FUNC_EQUAL    2
#define PIPE_FUNC_LEQUAL   3
#define PIPE_FUNC_GREATER  4
#define PIPE_FUNC_NOTEQUAL 5
#define PIPE_FUNC_GEQUAL   6
#define PIPE_FUNC_ALWAYS   7

/** Polygon fill mode */
#define PIPE_POLYGON_MODE_FILL  0
#define PIPE_POLYGON_MODE_LINE  1
#define PIPE_POLYGON_MODE_POINT 2

/** Polygon face specification, eg for culling */
#define PIPE_FACE_NONE           0
#define PIPE_FACE_FRONT          1
#define PIPE_FACE_BACK           2
#define PIPE_FACE_FRONT_AND_BACK (PIPE_FACE_FRONT | PIPE_FACE_BACK)

/** Stencil ops */
#define PIPE_STENCIL_OP_KEEP       0
#define PIPE_STENCIL_OP_ZERO       1
#define PIPE_STENCIL_OP_REPLACE    2
#define PIPE_STENCIL_OP_INCR       3
#define PIPE_STENCIL_OP_DECR       4
#define PIPE_STENCIL_OP_INCR_WRAP  5
#define PIPE_STENCIL_OP_DECR_WRAP  6
#define PIPE_STENCIL_OP_INVERT     7

/** Texture types.
 * See the documentation for info on PIPE_TEXTURE_RECT vs PIPE_TEXTURE_2D */
enum pipe_texture_target {
   PIPE_BUFFER           = 0,
   PIPE_TEXTURE_1D       = 1,
   PIPE_TEXTURE_2D       = 2,
   PIPE_TEXTURE_3D       = 3,
   PIPE_TEXTURE_CUBE     = 4,
   PIPE_TEXTURE_RECT     = 5,
   PIPE_TEXTURE_1D_ARRAY = 6,
   PIPE_TEXTURE_2D_ARRAY = 7,
   PIPE_TEXTURE_CUBE_ARRAY = 8,
   PIPE_MAX_TEXTURE_TYPES
};

#define PIPE_TEX_FACE_POS_X 0
#define PIPE_TEX_FACE_NEG_X 1
#define PIPE_TEX_FACE_POS_Y 2
#define PIPE_TEX_FACE_NEG_Y 3
#define PIPE_TEX_FACE_POS_Z 4
#define PIPE_TEX_FACE_NEG_Z 5
#define PIPE_TEX_FACE_MAX   6

#define PIPE_TEX_WRAP_REPEAT                   0
#define PIPE_TEX_WRAP_CLAMP                    1
#define PIPE_TEX_WRAP_CLAMP_TO_EDGE            2
#define PIPE_TEX_WRAP_CLAMP_TO_BORDER          3
#define PIPE_TEX_WRAP_MIRROR_REPEAT            4
#define PIPE_TEX_WRAP_MIRROR_CLAMP             5
#define PIPE_TEX_WRAP_MIRROR_CLAMP_TO_EDGE     6
#define PIPE_TEX_WRAP_MIRROR_CLAMP_TO_BORDER   7

/* Between mipmaps, ie mipfilter
 */
#define PIPE_TEX_MIPFILTER_NEAREST  0
#define PIPE_TEX_MIPFILTER_LINEAR   1
#define PIPE_TEX_MIPFILTER_NONE     2

/* Within a mipmap, ie min/mag filter 
 */
#define PIPE_TEX_FILTER_NEAREST      0
#define PIPE_TEX_FILTER_LINEAR       1

#define PIPE_TEX_COMPARE_NONE          0
#define PIPE_TEX_COMPARE_R_TO_TEXTURE  1

/**
 * Clear buffer bits
 */
#define PIPE_CLEAR_DEPTH        (1 << 0)
#define PIPE_CLEAR_STENCIL      (1 << 1)
#define PIPE_CLEAR_COLOR0       (1 << 2)
#define PIPE_CLEAR_COLOR1       (1 << 3)
#define PIPE_CLEAR_COLOR2       (1 << 4)
#define PIPE_CLEAR_COLOR3       (1 << 5)
#define PIPE_CLEAR_COLOR4       (1 << 6)
#define PIPE_CLEAR_COLOR5       (1 << 7)
#define PIPE_CLEAR_COLOR6       (1 << 8)
#define PIPE_CLEAR_COLOR7       (1 << 9)
/** Combined flags */
/** All color buffers currently bound */
#define PIPE_CLEAR_COLOR        (PIPE_CLEAR_COLOR0 | PIPE_CLEAR_COLOR1 | \
                                 PIPE_CLEAR_COLOR2 | PIPE_CLEAR_COLOR3 | \
                                 PIPE_CLEAR_COLOR4 | PIPE_CLEAR_COLOR5 | \
                                 PIPE_CLEAR_COLOR6 | PIPE_CLEAR_COLOR7)
#define PIPE_CLEAR_DEPTHSTENCIL (PIPE_CLEAR_DEPTH | PIPE_CLEAR_STENCIL)

/**
 * Transfer object usage flags
 */
enum pipe_transfer_usage {
   /**
    * Resource contents read back (or accessed directly) at transfer
    * create time.
    */
   PIPE_TRANSFER_READ = (1 << 0),
   
   /**
    * Resource contents will be written back at transfer_unmap
    * time (or modified as a result of being accessed directly).
    */
   PIPE_TRANSFER_WRITE = (1 << 1),

   /**
    * Read/modify/write
    */
   PIPE_TRANSFER_READ_WRITE = PIPE_TRANSFER_READ | PIPE_TRANSFER_WRITE,

   /** 
    * The transfer should map the texture storage directly. The driver may
    * return NULL if that isn't possible, and the state tracker needs to cope
    * with that and use an alternative path without this flag.
    *
    * E.g. the state tracker could have a simpler path which maps textures and
    * does read/modify/write cycles on them directly, and a more complicated
    * path which uses minimal read and write transfers.
    */
   PIPE_TRANSFER_MAP_DIRECTLY = (1 << 2),

   /**
    * Discards the memory within the mapped region.
    *
    * It should not be used with PIPE_TRANSFER_READ.
    *
    * See also:
    * - OpenGL's ARB_map_buffer_range extension, MAP_INVALIDATE_RANGE_BIT flag.
    */
   PIPE_TRANSFER_DISCARD_RANGE = (1 << 8),

   /**
    * Fail if the resource cannot be mapped immediately.
    *
    * See also:
    * - Direct3D's D3DLOCK_DONOTWAIT flag.
    * - Mesa3D's MESA_MAP_NOWAIT_BIT flag.
    * - WDDM's D3DDDICB_LOCKFLAGS.DonotWait flag.
    */
   PIPE_TRANSFER_DONTBLOCK = (1 << 9),

   /**
    * Do not attempt to synchronize pending operations on the resource when mapping.
    *
    * It should not be used with PIPE_TRANSFER_READ.
    *
    * See also:
    * - OpenGL's ARB_map_buffer_range extension, MAP_UNSYNCHRONIZED_BIT flag.
    * - Direct3D's D3DLOCK_NOOVERWRITE flag.
    * - WDDM's D3DDDICB_LOCKFLAGS.IgnoreSync flag.
    */
   PIPE_TRANSFER_UNSYNCHRONIZED = (1 << 10),

   /**
    * Written ranges will be notified later with
    * pipe_context::transfer_flush_region.
    *
    * It should not be used with PIPE_TRANSFER_READ.
    *
    * See also:
    * - pipe_context::transfer_flush_region
    * - OpenGL's ARB_map_buffer_range extension, MAP_FLUSH_EXPLICIT_BIT flag.
    */
   PIPE_TRANSFER_FLUSH_EXPLICIT = (1 << 11),

   /**
    * Discards all memory backing the resource.
    *
    * It should not be used with PIPE_TRANSFER_READ.
    *
    * This is equivalent to:
    * - OpenGL's ARB_map_buffer_range extension, MAP_INVALIDATE_BUFFER_BIT
    * - BufferData(NULL) on a GL buffer
    * - Direct3D's D3DLOCK_DISCARD flag.
    * - WDDM's D3DDDICB_LOCKFLAGS.Discard flag.
    * - D3D10 DDI's D3D10_DDI_MAP_WRITE_DISCARD flag
    * - D3D10's D3D10_MAP_WRITE_DISCARD flag.
    */
   PIPE_TRANSFER_DISCARD_WHOLE_RESOURCE = (1 << 12),

   /**
    * Allows the resource to be used for rendering while mapped.
    *
    * PIPE_RESOURCE_FLAG_MAP_PERSISTENT must be set when creating
    * the resource.
    *
    * If COHERENT is not set, memory_barrier(PIPE_BARRIER_MAPPED_BUFFER)
    * must be called to ensure the device can see what the CPU has written.
    */
   PIPE_TRANSFER_PERSISTENT = (1 << 13),

   /**
    * If PERSISTENT is set, this ensures any writes done by the device are
    * immediately visible to the CPU and vice versa.
    *
    * PIPE_RESOURCE_FLAG_MAP_COHERENT must be set when creating
    * the resource.
    */
   PIPE_TRANSFER_COHERENT = (1 << 14)
};

/**
 * Flags for the flush function.
 */
enum pipe_flush_flags {
   PIPE_FLUSH_END_OF_FRAME = (1 << 0)
};

/**
 * Flags for pipe_context::memory_barrier.
 */
#define PIPE_BARRIER_MAPPED_BUFFER     (1 << 0)

/*
 * Resource binding flags -- state tracker must specify in advance all
 * the ways a resource might be used.
 */
#define PIPE_BIND_DEPTH_STENCIL        (1 << 0) /* create_surface */
#define PIPE_BIND_RENDER_TARGET        (1 << 1) /* create_surface */
#define PIPE_BIND_BLENDABLE            (1 << 2) /* create_surface */
#define PIPE_BIND_SAMPLER_VIEW         (1 << 3) /* create_sampler_view */
#define PIPE_BIND_VERTEX_BUFFER        (1 << 4) /* set_vertex_buffers */
#define PIPE_BIND_INDEX_BUFFER         (1 << 5) /* draw_elements */
#define PIPE_BIND_CONSTANT_BUFFER      (1 << 6) /* set_constant_buffer */
#define PIPE_BIND_DISPLAY_TARGET       (1 << 8) /* flush_front_buffer */
#define PIPE_BIND_TRANSFER_WRITE       (1 << 9) /* transfer_map */
#define PIPE_BIND_TRANSFER_READ        (1 << 10) /* transfer_map */
#define PIPE_BIND_STREAM_OUTPUT        (1 << 11) /* set_stream_output_buffers */
#define PIPE_BIND_CURSOR               (1 << 16) /* mouse cursor */
#define PIPE_BIND_CUSTOM               (1 << 17) /* state-tracker/winsys usages */
#define PIPE_BIND_GLOBAL               (1 << 18) /* set_global_binding */
#define PIPE_BIND_SHADER_RESOURCE      (1 << 19) /* set_shader_resources */
#define PIPE_BIND_COMPUTE_RESOURCE     (1 << 20) /* set_compute_resources */

/* The first two flags above were previously part of the amorphous
 * TEXTURE_USAGE, most of which are now descriptions of the ways a
 * particular texture can be bound to the gallium pipeline.  The two flags
 * below do not fit within that and probably need to be migrated to some
 * other place.
 *
 * It seems like scanout is used by the Xorg state tracker to ask for
 * a texture suitable for actual scanout (hence the name), which
 * implies extra layout constraints on some hardware.  It may also
 * have some special meaning regarding mouse cursor images.
 *
 * The shared flag is quite underspecified, but certainly isn't a
 * binding flag - it seems more like a message to the winsys to create
 * a shareable allocation.
 * 
 * The third flag has been added to be able to force textures to be created
 * in linear mode (no tiling).
 */
#define PIPE_BIND_SCANOUT     (1 << 14) /*  */
#define PIPE_BIND_SHARED      (1 << 15) /* get_texture_handle ??? */
#define PIPE_BIND_LINEAR      (1 << 21)


/* Flags for the driver about resource behaviour:
 */
#define PIPE_RESOURCE_FLAG_MAP_PERSISTENT (1 << 0)
#define PIPE_RESOURCE_FLAG_MAP_COHERENT   (1 << 1)
#define PIPE_RESOURCE_FLAG_DRV_PRIV    (1 << 16) /* driver/winsys private */
#define PIPE_RESOURCE_FLAG_ST_PRIV     (1 << 24) /* state-tracker/winsys private */

/* Hint about the expected lifecycle of a resource.
 * Sorted according to GPU vs CPU access.
 */
#define PIPE_USAGE_DEFAULT        0 /* fast GPU access */
#define PIPE_USAGE_IMMUTABLE      1 /* fast GPU access, immutable */
#define PIPE_USAGE_DYNAMIC        2 /* uploaded data is used multiple times */
#define PIPE_USAGE_STREAM         3 /* uploaded data is used once */
#define PIPE_USAGE_STAGING        4 /* fast CPU access */


/**
 * Shaders
 */
#define PIPE_SHADER_VERTEX   0
#define PIPE_SHADER_FRAGMENT 1
#define PIPE_SHADER_GEOMETRY 2
#define PIPE_SHADER_COMPUTE  3
#define PIPE_SHADER_TYPES    4


/**
 * Primitive types:
 */
#define PIPE_PRIM_POINTS               0
#define PIPE_PRIM_LINES                1
#define PIPE_PRIM_LINE_LOOP            2
#define PIPE_PRIM_LINE_STRIP           3
#define PIPE_PRIM_TRIANGLES            4
#define PIPE_PRIM_TRIANGLE_STRIP       5
#define PIPE_PRIM_TRIANGLE_FAN         6
#define PIPE_PRIM_QUADS                7
#define PIPE_PRIM_QUAD_STRIP           8
#define PIPE_PRIM_POLYGON              9
#define PIPE_PRIM_LINES_ADJACENCY          10
#define PIPE_PRIM_LINE_STRIP_ADJACENCY    11
#define PIPE_PRIM_TRIANGLES_ADJACENCY      12
#define PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY 13
#define PIPE_PRIM_MAX                      14


/**
 * Query object types
 */
#define PIPE_QUERY_OCCLUSION_COUNTER     0
#define PIPE_QUERY_OCCLUSION_PREDICATE   1
#define PIPE_QUERY_TIMESTAMP             2
#define PIPE_QUERY_TIMESTAMP_DISJOINT    3
#define PIPE_QUERY_TIME_ELAPSED          4
#define PIPE_QUERY_PRIMITIVES_GENERATED  5
#define PIPE_QUERY_PRIMITIVES_EMITTED    6
#define PIPE_QUERY_SO_STATISTICS         7
#define PIPE_QUERY_SO_OVERFLOW_PREDICATE 8
#define PIPE_QUERY_GPU_FINISHED          9
#define PIPE_QUERY_PIPELINE_STATISTICS  10
#define PIPE_QUERY_TYPES                11

/* start of driver queries,
 * see pipe_screen::get_driver_query_info */
#define PIPE_QUERY_DRIVER_SPECIFIC     256


/**
 * Conditional rendering modes
 */
#define PIPE_RENDER_COND_WAIT              0
#define PIPE_RENDER_COND_NO_WAIT           1
#define PIPE_RENDER_COND_BY_REGION_WAIT    2
#define PIPE_RENDER_COND_BY_REGION_NO_WAIT 3


/**
 * Point sprite coord modes
 */
#define PIPE_SPRITE_COORD_UPPER_LEFT 0
#define PIPE_SPRITE_COORD_LOWER_LEFT 1


/**
 * Texture swizzles
 */
#define PIPE_SWIZZLE_RED   0
#define PIPE_SWIZZLE_GREEN 1
#define PIPE_SWIZZLE_BLUE  2
#define PIPE_SWIZZLE_ALPHA 3
#define PIPE_SWIZZLE_ZERO  4
#define PIPE_SWIZZLE_ONE   5


#define PIPE_TIMEOUT_INFINITE 0xffffffffffffffffull

/**
 * Implementation capabilities/limits which are queried through
 * pipe_screen::get_param()
 */
enum pipe_cap {
   PIPE_CAP_NPOT_TEXTURES = 1,
   PIPE_CAP_TWO_SIDED_STENCIL = 2,
   PIPE_CAP_MAX_DUAL_SOURCE_RENDER_TARGETS = 4,
   PIPE_CAP_ANISOTROPIC_FILTER = 5,
   PIPE_CAP_POINT_SPRITE = 6,
   PIPE_CAP_MAX_RENDER_TARGETS = 7,
   PIPE_CAP_OCCLUSION_QUERY = 8,
   PIPE_CAP_QUERY_TIME_ELAPSED = 9,
   PIPE_CAP_TEXTURE_SHADOW_MAP = 10,
   PIPE_CAP_TEXTURE_SWIZZLE = 11,
   PIPE_CAP_MAX_TEXTURE_2D_LEVELS = 12,
   PIPE_CAP_MAX_TEXTURE_3D_LEVELS = 13,
   PIPE_CAP_MAX_TEXTURE_CUBE_LEVELS = 14,
   PIPE_CAP_TEXTURE_MIRROR_CLAMP = 25,
   PIPE_CAP_BLEND_EQUATION_SEPARATE = 28,
   PIPE_CAP_SM3 = 29,  /*< Shader Model, supported */
   PIPE_CAP_MAX_STREAM_OUTPUT_BUFFERS = 30,
   PIPE_CAP_PRIMITIVE_RESTART = 31,
   /** blend enables and write masks per rendertarget */
   PIPE_CAP_INDEP_BLEND_ENABLE = 33,
   /** different blend funcs per rendertarget */
   PIPE_CAP_INDEP_BLEND_FUNC = 34,
   PIPE_CAP_MAX_TEXTURE_ARRAY_LAYERS = 36,
   PIPE_CAP_TGSI_FS_COORD_ORIGIN_UPPER_LEFT = 37,
   PIPE_CAP_TGSI_FS_COORD_ORIGIN_LOWER_LEFT = 38,
   PIPE_CAP_TGSI_FS_COORD_PIXEL_CENTER_HALF_INTEGER = 39,
   PIPE_CAP_TGSI_FS_COORD_PIXEL_CENTER_INTEGER = 40,
   PIPE_CAP_DEPTH_CLIP_DISABLE = 41,
   PIPE_CAP_SHADER_STENCIL_EXPORT = 42,
   PIPE_CAP_TGSI_INSTANCEID = 43,
   PIPE_CAP_VERTEX_ELEMENT_INSTANCE_DIVISOR = 44,
   PIPE_CAP_FRAGMENT_COLOR_CLAMPED = 45,
   PIPE_CAP_MIXED_COLORBUFFER_FORMATS = 46,
   PIPE_CAP_SEAMLESS_CUBE_MAP = 47,
   PIPE_CAP_SEAMLESS_CUBE_MAP_PER_TEXTURE = 48,
   PIPE_CAP_MIN_TEXEL_OFFSET = 50,
   PIPE_CAP_MAX_TEXEL_OFFSET = 51,
   PIPE_CAP_CONDITIONAL_RENDER = 52,
   PIPE_CAP_TEXTURE_BARRIER = 53,
   PIPE_CAP_MAX_STREAM_OUTPUT_SEPARATE_COMPONENTS = 55,
   PIPE_CAP_MAX_STREAM_OUTPUT_INTERLEAVED_COMPONENTS = 56,
   PIPE_CAP_STREAM_OUTPUT_PAUSE_RESUME = 57,
   PIPE_CAP_TGSI_CAN_COMPACT_CONSTANTS = 59, /* temporary */
   PIPE_CAP_VERTEX_COLOR_UNCLAMPED = 60,
   PIPE_CAP_VERTEX_COLOR_CLAMPED = 61,
   PIPE_CAP_GLSL_FEATURE_LEVEL = 62,
   PIPE_CAP_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 63,
   PIPE_CAP_USER_VERTEX_BUFFERS = 64,
   PIPE_CAP_VERTEX_BUFFER_OFFSET_4BYTE_ALIGNED_ONLY = 65,
   PIPE_CAP_VERTEX_BUFFER_STRIDE_4BYTE_ALIGNED_ONLY = 66,
   PIPE_CAP_VERTEX_ELEMENT_SRC_OFFSET_4BYTE_ALIGNED_ONLY = 67,
   PIPE_CAP_COMPUTE = 68,
   PIPE_CAP_USER_INDEX_BUFFERS = 69,
   PIPE_CAP_USER_CONSTANT_BUFFERS = 70,
   PIPE_CAP_CONSTANT_BUFFER_OFFSET_ALIGNMENT = 71,
   PIPE_CAP_START_INSTANCE = 72,
   PIPE_CAP_QUERY_TIMESTAMP = 73,
   PIPE_CAP_TEXTURE_MULTISAMPLE = 74,
   PIPE_CAP_MIN_MAP_BUFFER_ALIGNMENT = 75,
   PIPE_CAP_CUBE_MAP_ARRAY = 76,
   PIPE_CAP_TEXTURE_BUFFER_OBJECTS = 77,
   PIPE_CAP_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 78,
   PIPE_CAP_TGSI_TEXCOORD = 79,
   PIPE_CAP_PREFER_BLIT_BASED_TEXTURE_TRANSFER = 80,
   PIPE_CAP_QUERY_PIPELINE_STATISTICS = 81,
   PIPE_CAP_TEXTURE_BORDER_COLOR_QUIRK = 82,
   PIPE_CAP_MAX_TEXTURE_BUFFER_SIZE = 83,
   PIPE_CAP_MAX_VIEWPORTS = 84,
   PIPE_CAP_ENDIANNESS = 85,
   PIPE_CAP_MIXED_FRAMEBUFFER_SIZES = 86,
   PIPE_CAP_TGSI_VS_LAYER = 87,
   PIPE_CAP_MAX_GEOMETRY_OUTPUT_VERTICES = 88,
   PIPE_CAP_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 89,
   PIPE_CAP_MAX_TEXTURE_GATHER_COMPONENTS = 90,
   PIPE_CAP_TEXTURE_GATHER_SM5 = 91,
   PIPE_CAP_BUFFER_MAP_PERSISTENT_COHERENT = 92,
   PIPE_CAP_FAKE_SW_MSAA = 93,
   PIPE_CAP_TEXTURE_QUERY_LOD = 94,
   PIPE_CAP_MIN_TEXTURE_GATHER_OFFSET = 95,
   PIPE_CAP_MAX_TEXTURE_GATHER_OFFSET = 96,
   PIPE_CAP_SAMPLE_SHADING = 97,
   PIPE_CAP_VENDOR_ID = 103,
   PIPE_CAP_DEVICE_ID = 104,
   PIPE_CAP_ACCELERATED = 105,
   PIPE_CAP_VIDEO_MEMORY = 106,
   PIPE_CAP_UMA = 107,
};

#define PIPE_QUIRK_TEXTURE_BORDER_COLOR_SWIZZLE_NV50 (1 << 0)
#define PIPE_QUIRK_TEXTURE_BORDER_COLOR_SWIZZLE_R600 (1 << 1)

enum pipe_endian {
   PIPE_ENDIAN_LITTLE = 0,
   PIPE_ENDIAN_BIG = 1,
#if defined(PIPE_ARCH_LITTLE_ENDIAN)
   PIPE_ENDIAN_NATIVE = PIPE_ENDIAN_LITTLE
#elif defined(PIPE_ARCH_BIG_ENDIAN)
   PIPE_ENDIAN_NATIVE = PIPE_ENDIAN_BIG
#endif
};

/**
 * Implementation limits which are queried through
 * pipe_screen::get_paramf()
 */
enum pipe_capf
{
   PIPE_CAPF_MAX_LINE_WIDTH = 15,
   PIPE_CAPF_MAX_LINE_WIDTH_AA = 16,
   PIPE_CAPF_MAX_POINT_WIDTH = 17,
   PIPE_CAPF_MAX_POINT_WIDTH_AA = 18,
   PIPE_CAPF_MAX_TEXTURE_ANISOTROPY = 19,
   PIPE_CAPF_MAX_TEXTURE_LOD_BIAS = 20,
   PIPE_CAPF_GUARD_BAND_LEFT = 21,
   PIPE_CAPF_GUARD_BAND_TOP = 22,
   PIPE_CAPF_GUARD_BAND_RIGHT = 23,
   PIPE_CAPF_GUARD_BAND_BOTTOM = 24
};

/* Shader caps not specific to any single stage */
enum pipe_shader_cap
{
   PIPE_SHADER_CAP_MAX_INSTRUCTIONS = 0, /* if 0, it means the stage is unsupported */
   PIPE_SHADER_CAP_MAX_ALU_INSTRUCTIONS = 1,
   PIPE_SHADER_CAP_MAX_TEX_INSTRUCTIONS = 2,
   PIPE_SHADER_CAP_MAX_TEX_INDIRECTIONS = 3,
   PIPE_SHADER_CAP_MAX_CONTROL_FLOW_DEPTH = 4,
   PIPE_SHADER_CAP_MAX_INPUTS = 5,
   PIPE_SHADER_CAP_MAX_CONSTS = 6,
   PIPE_SHADER_CAP_MAX_CONST_BUFFERS = 7,
   PIPE_SHADER_CAP_MAX_TEMPS = 8,
   PIPE_SHADER_CAP_MAX_ADDRS = 9,
   PIPE_SHADER_CAP_MAX_PREDS = 10,
   /* boolean caps */
   PIPE_SHADER_CAP_TGSI_CONT_SUPPORTED = 11,
   PIPE_SHADER_CAP_INDIRECT_INPUT_ADDR = 12,
   PIPE_SHADER_CAP_INDIRECT_OUTPUT_ADDR = 13,
   PIPE_SHADER_CAP_INDIRECT_TEMP_ADDR = 14,
   PIPE_SHADER_CAP_INDIRECT_CONST_ADDR = 15,
   PIPE_SHADER_CAP_SUBROUTINES = 16, /* BGNSUB, ENDSUB, CAL, RET */
   PIPE_SHADER_CAP_INTEGERS = 17,
   PIPE_SHADER_CAP_MAX_TEXTURE_SAMPLERS = 18,
   PIPE_SHADER_CAP_PREFERRED_IR = 19,
   PIPE_SHADER_CAP_TGSI_SQRT_SUPPORTED = 20,
   PIPE_SHADER_CAP_MAX_SAMPLER_VIEWS = 21
};

/**
 * Shader intermediate representation.
 */
enum pipe_shader_ir
{
   PIPE_SHADER_IR_TGSI,
   PIPE_SHADER_IR_LLVM
};

/**
 * Compute-specific implementation capability.  They can be queried
 * using pipe_screen::get_compute_param.
 */
enum pipe_compute_cap
{
   PIPE_COMPUTE_CAP_IR_TARGET,
   PIPE_COMPUTE_CAP_GRID_DIMENSION,
   PIPE_COMPUTE_CAP_MAX_GRID_SIZE,
   PIPE_COMPUTE_CAP_MAX_BLOCK_SIZE,
   PIPE_COMPUTE_CAP_MAX_THREADS_PER_BLOCK,
   PIPE_COMPUTE_CAP_MAX_GLOBAL_SIZE,
   PIPE_COMPUTE_CAP_MAX_LOCAL_SIZE,
   PIPE_COMPUTE_CAP_MAX_PRIVATE_SIZE,
   PIPE_COMPUTE_CAP_MAX_INPUT_SIZE,
   PIPE_COMPUTE_CAP_MAX_MEM_ALLOC_SIZE,
   PIPE_COMPUTE_CAP_MAX_CLOCK_FREQUENCY
};

/**
 * Composite query types
 */

/**
 * Query result for PIPE_QUERY_SO_STATISTICS.
 */
struct pipe_query_data_so_statistics
{
   uint64_t num_primitives_written;
   uint64_t primitives_storage_needed;
};

/**
 * Query result for PIPE_QUERY_TIMESTAMP_DISJOINT.
 */
struct pipe_query_data_timestamp_disjoint
{
   uint64_t frequency;
   boolean  disjoint;
};

/**
 * Query result for PIPE_QUERY_PIPELINE_STATISTICS.
 */
struct pipe_query_data_pipeline_statistics
{
   uint64_t ia_vertices;    /**< Num vertices read by the vertex fetcher. */
   uint64_t ia_primitives;  /**< Num primitives read by the vertex fetcher. */
   uint64_t vs_invocations; /**< Num vertex shader invocations. */
   uint64_t gs_invocations; /**< Num geometry shader invocations. */
   uint64_t gs_primitives;  /**< Num primitives output by a geometry shader. */
   uint64_t c_invocations;  /**< Num primitives sent to the rasterizer. */
   uint64_t c_primitives;   /**< Num primitives that were rendered. */
   uint64_t ps_invocations; /**< Num pixel shader invocations. */
   uint64_t hs_invocations; /**< Num hull shader invocations. */
   uint64_t ds_invocations; /**< Num domain shader invocations. */
   uint64_t cs_invocations; /**< Num compute shader invocations. */
};

/**
 * Query result (returned by pipe_context::get_query_result).
 */
union pipe_query_result
{
   /* PIPE_QUERY_OCCLUSION_PREDICATE */
   /* PIPE_QUERY_SO_OVERFLOW_PREDICATE */
   /* PIPE_QUERY_GPU_FINISHED */
   boolean b;

   /* PIPE_QUERY_OCCLUSION_COUNTER */
   /* PIPE_QUERY_TIMESTAMP */
   /* PIPE_QUERY_TIME_ELAPSED */
   /* PIPE_QUERY_PRIMITIVES_GENERATED */
   /* PIPE_QUERY_PRIMITIVES_EMITTED */
   uint64_t u64;

   /* PIPE_QUERY_SO_STATISTICS */
   struct pipe_query_data_so_statistics so_statistics;

   /* PIPE_QUERY_TIMESTAMP_DISJOINT */
   struct pipe_query_data_timestamp_disjoint timestamp_disjoint;

   /* PIPE_QUERY_PIPELINE_STATISTICS */
   struct pipe_query_data_pipeline_statistics pipeline_statistics;
};

union pipe_color_union
{
   float f[4];
   int i[4];
   unsigned int ui[4];
};

struct pipe_driver_query_info
{
   const char *name;
   unsigned query_type; /* PIPE_QUERY_DRIVER_SPECIFIC + i */
   uint64_t max_value; /* max value that can be returned */
   boolean uses_byte_units; /* whether the result is in bytes */
};

#ifdef __cplusplus
}
#endif

#endif
@


1.8
log
@Backport support for GLX_MESA_query_renderer for non Intel drivers.
This is desirable as the chromium port now uses this extension to
obtain pci vendor/device ids for use in feature/extension blacklists.

Prompted by a mail from byrnet@@, tested on r600g by krw@@

The newly added os_get_total_physical_memory() was passing the length of
a pointer rather than the type which made the sysctl call fail on
non 64 bit archs.  And it was passing the wrong pointer for the result.
Fixes for these problems have been submitted back upstream.
@
text
@@


1.7
log
@Merge Mesa 10.2.9
@
text
@d560 5
@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a352 1
#define PIPE_BIND_COMMAND_ARGS_BUFFER  (1 << 21) /* pipe_draw_info.indirect */
d549 1
a549 1
   PIPE_CAP_TGSI_VS_LAYER_VIEWPORT = 87,
a559 14
   PIPE_CAP_TEXTURE_GATHER_OFFSETS = 98,
   PIPE_CAP_TGSI_VS_WINDOW_SPACE_POSITION = 99,
   PIPE_CAP_MAX_VERTEX_STREAMS = 100,
   PIPE_CAP_DRAW_INDIRECT = 101,
   PIPE_CAP_TGSI_FS_FINE_DERIVATIVE = 102,
   PIPE_CAP_VENDOR_ID = 103,
   PIPE_CAP_DEVICE_ID = 104,
   PIPE_CAP_ACCELERATED = 105,
   PIPE_CAP_VIDEO_MEMORY = 106,
   PIPE_CAP_UMA = 107,
   PIPE_CAP_CONDITIONAL_RENDER_INVERTED = 108,
   PIPE_CAP_MAX_VERTEX_ATTRIB_STRIDE = 109,
   PIPE_CAP_SAMPLER_VIEW_TARGET = 110,
   PIPE_CAP_CLIP_HALFZ = 111,
d581 10
a590 10
   PIPE_CAPF_MAX_LINE_WIDTH,
   PIPE_CAPF_MAX_LINE_WIDTH_AA,
   PIPE_CAPF_MAX_POINT_WIDTH,
   PIPE_CAPF_MAX_POINT_WIDTH_AA,
   PIPE_CAPF_MAX_TEXTURE_ANISOTROPY,
   PIPE_CAPF_MAX_TEXTURE_LOD_BIAS,
   PIPE_CAPF_GUARD_BAND_LEFT,
   PIPE_CAPF_GUARD_BAND_TOP,
   PIPE_CAPF_GUARD_BAND_RIGHT,
   PIPE_CAPF_GUARD_BAND_BOTTOM
d596 11
a606 11
   PIPE_SHADER_CAP_MAX_INSTRUCTIONS, /* if 0, it means the stage is unsupported */
   PIPE_SHADER_CAP_MAX_ALU_INSTRUCTIONS,
   PIPE_SHADER_CAP_MAX_TEX_INSTRUCTIONS,
   PIPE_SHADER_CAP_MAX_TEX_INDIRECTIONS,
   PIPE_SHADER_CAP_MAX_CONTROL_FLOW_DEPTH,
   PIPE_SHADER_CAP_MAX_INPUTS,
   PIPE_SHADER_CAP_MAX_OUTPUTS,
   PIPE_SHADER_CAP_MAX_CONST_BUFFER_SIZE,
   PIPE_SHADER_CAP_MAX_CONST_BUFFERS,
   PIPE_SHADER_CAP_MAX_TEMPS,
   PIPE_SHADER_CAP_MAX_PREDS,
d608 11
a618 12
   PIPE_SHADER_CAP_TGSI_CONT_SUPPORTED,
   PIPE_SHADER_CAP_INDIRECT_INPUT_ADDR,
   PIPE_SHADER_CAP_INDIRECT_OUTPUT_ADDR,
   PIPE_SHADER_CAP_INDIRECT_TEMP_ADDR,
   PIPE_SHADER_CAP_INDIRECT_CONST_ADDR,
   PIPE_SHADER_CAP_SUBROUTINES, /* BGNSUB, ENDSUB, CAL, RET */
   PIPE_SHADER_CAP_INTEGERS,
   PIPE_SHADER_CAP_MAX_TEXTURE_SAMPLERS,
   PIPE_SHADER_CAP_PREFERRED_IR,
   PIPE_SHADER_CAP_TGSI_SQRT_SUPPORTED,
   PIPE_SHADER_CAP_MAX_SAMPLER_VIEWS,
   PIPE_SHADER_CAP_DOUBLES
d627 1
a627 2
   PIPE_SHADER_IR_LLVM,
   PIPE_SHADER_IR_NATIVE
d646 1
a646 3
   PIPE_COMPUTE_CAP_MAX_CLOCK_FREQUENCY,
   PIPE_COMPUTE_CAP_MAX_COMPUTE_UNITS,
   PIPE_COMPUTE_CAP_IMAGES_SUPPORTED
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d353 1
d550 1
a550 1
   PIPE_CAP_TGSI_VS_LAYER = 87,
d561 14
d596 10
a605 10
   PIPE_CAPF_MAX_LINE_WIDTH = 15,
   PIPE_CAPF_MAX_LINE_WIDTH_AA = 16,
   PIPE_CAPF_MAX_POINT_WIDTH = 17,
   PIPE_CAPF_MAX_POINT_WIDTH_AA = 18,
   PIPE_CAPF_MAX_TEXTURE_ANISOTROPY = 19,
   PIPE_CAPF_MAX_TEXTURE_LOD_BIAS = 20,
   PIPE_CAPF_GUARD_BAND_LEFT = 21,
   PIPE_CAPF_GUARD_BAND_TOP = 22,
   PIPE_CAPF_GUARD_BAND_RIGHT = 23,
   PIPE_CAPF_GUARD_BAND_BOTTOM = 24
d611 11
a621 11
   PIPE_SHADER_CAP_MAX_INSTRUCTIONS = 0, /* if 0, it means the stage is unsupported */
   PIPE_SHADER_CAP_MAX_ALU_INSTRUCTIONS = 1,
   PIPE_SHADER_CAP_MAX_TEX_INSTRUCTIONS = 2,
   PIPE_SHADER_CAP_MAX_TEX_INDIRECTIONS = 3,
   PIPE_SHADER_CAP_MAX_CONTROL_FLOW_DEPTH = 4,
   PIPE_SHADER_CAP_MAX_INPUTS = 5,
   PIPE_SHADER_CAP_MAX_CONSTS = 6,
   PIPE_SHADER_CAP_MAX_CONST_BUFFERS = 7,
   PIPE_SHADER_CAP_MAX_TEMPS = 8,
   PIPE_SHADER_CAP_MAX_ADDRS = 9,
   PIPE_SHADER_CAP_MAX_PREDS = 10,
d623 12
a634 11
   PIPE_SHADER_CAP_TGSI_CONT_SUPPORTED = 11,
   PIPE_SHADER_CAP_INDIRECT_INPUT_ADDR = 12,
   PIPE_SHADER_CAP_INDIRECT_OUTPUT_ADDR = 13,
   PIPE_SHADER_CAP_INDIRECT_TEMP_ADDR = 14,
   PIPE_SHADER_CAP_INDIRECT_CONST_ADDR = 15,
   PIPE_SHADER_CAP_SUBROUTINES = 16, /* BGNSUB, ENDSUB, CAL, RET */
   PIPE_SHADER_CAP_INTEGERS = 17,
   PIPE_SHADER_CAP_MAX_TEXTURE_SAMPLERS = 18,
   PIPE_SHADER_CAP_PREFERRED_IR = 19,
   PIPE_SHADER_CAP_TGSI_SQRT_SUPPORTED = 20,
   PIPE_SHADER_CAP_MAX_SAMPLER_VIEWS = 21
d643 2
a644 1
   PIPE_SHADER_IR_LLVM
d663 3
a665 1
   PIPE_COMPUTE_CAP_MAX_CLOCK_FREQUENCY
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d191 11
d203 4
a206 4
#define PIPE_CLEAR_COLOR        (1 << 0)
#define PIPE_CLEAR_DEPTH        (1 << 1)
#define PIPE_CLEAR_STENCIL      (1 << 2)
/** Depth/stencil combined */
d298 1
a298 1
   PIPE_TRANSFER_DISCARD_WHOLE_RESOURCE = (1 << 12)
d300 19
d328 5
d368 3
d374 1
d379 2
a380 1
#define PIPE_RESOURCE_FLAG_GEN_MIPS    (1 << 0)  /* Driver performs autogen mips */
d385 1
d387 5
a391 6
#define PIPE_USAGE_DEFAULT        0 /* many uploads, draws intermixed */
#define PIPE_USAGE_DYNAMIC        1 /* many uploads, draws intermixed */
#define PIPE_USAGE_STATIC         2 /* same as immutable?? */
#define PIPE_USAGE_IMMUTABLE      3 /* no change after first upload */
#define PIPE_USAGE_STREAM         4 /* upload, draw, upload, draw */
#define PIPE_USAGE_STAGING        5 /* supports data transfers from the GPU to the CPU */
a496 3
   /** Maximum texture image units accessible from vertex and fragment shaders
    * combined */
   PIPE_CAP_MAX_COMBINED_SAMPLERS = 32,
a513 1
   PIPE_CAP_SCALED_RESOLVE = 49,
d547 13
a559 1
   PIPE_CAP_ENDIANNESS = 85
d617 2
a618 1
   PIPE_SHADER_CAP_TGSI_SQRT_SUPPORTED = 20
d645 2
a646 1
   PIPE_COMPUTE_CAP_MAX_MEM_ALLOC_SIZE
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d102 4
d153 1
d209 1
a209 1
    * Resource contents will be written back at transfer_destroy
a237 1
   PIPE_TRANSFER_DISCARD = (1 << 8), /* DEPRECATED */
a260 1
   PIPE_TRANSFER_NOOVERWRITE = (1 << 10), /* are these really the same?? */
d291 6
d304 5
a308 4
#define PIPE_BIND_SAMPLER_VIEW         (1 << 2) /* create_sampler_view */
#define PIPE_BIND_VERTEX_BUFFER        (1 << 3) /* set_vertex_buffers */
#define PIPE_BIND_INDEX_BUFFER         (1 << 4) /* draw_elements */
#define PIPE_BIND_CONSTANT_BUFFER      (1 << 5) /* set_constant_buffer */
d310 2
a311 2
#define PIPE_BIND_TRANSFER_WRITE       (1 << 9) /* get_transfer */
#define PIPE_BIND_TRANSFER_READ        (1 << 10) /* get_transfer */
d315 3
d360 2
a361 1
#define PIPE_SHADER_TYPES    3
d388 15
a402 8
#define PIPE_QUERY_PRIMITIVES_GENERATED  1
#define PIPE_QUERY_PRIMITIVES_EMITTED    2
#define PIPE_QUERY_TIME_ELAPSED          3
#define PIPE_QUERY_SO_STATISTICS         5
#define PIPE_QUERY_GPU_FINISHED          6
#define PIPE_QUERY_TIMESTAMP_DISJOINT    7
#define PIPE_QUERY_OCCLUSION_PREDICATE   8
#define PIPE_QUERY_TYPES                 9
d436 1
a436 1
 * pipe_screen::get_param() and pipe_screen::get_paramf().
a438 1
   PIPE_CAP_MAX_TEXTURE_IMAGE_UNITS = 0,
d441 1
a441 2
   PIPE_CAP_GLSL = 3,  /* XXX need something better */
   PIPE_CAP_DUAL_SOURCE_BLEND = 4,
d446 1
a446 1
   PIPE_CAP_TIMER_QUERY = 9,
a451 10
   PIPE_CAP_MAX_LINE_WIDTH = 15,
   PIPE_CAP_MAX_LINE_WIDTH_AA = 16,
   PIPE_CAP_MAX_POINT_WIDTH = 17,
   PIPE_CAP_MAX_POINT_WIDTH_AA = 18,
   PIPE_CAP_MAX_TEXTURE_ANISOTROPY = 19,
   PIPE_CAP_MAX_TEXTURE_LOD_BIAS = 20,
   PIPE_CAP_GUARD_BAND_LEFT = 21,  /*< float */
   PIPE_CAP_GUARD_BAND_TOP = 22,  /*< float */
   PIPE_CAP_GUARD_BAND_RIGHT = 23,  /*< float */
   PIPE_CAP_GUARD_BAND_BOTTOM = 24,  /*< float */
a452 2
   PIPE_CAP_TEXTURE_MIRROR_REPEAT = 26,
   PIPE_CAP_MAX_VERTEX_TEXTURE_UNITS = 27,
d455 1
a455 1
   PIPE_CAP_STREAM_OUTPUT = 30,
d464 1
a464 2
   PIPE_CAP_DEPTHSTENCIL_CLEAR_SEPARATE = 35,
   PIPE_CAP_ARRAY_TEXTURES = 36,
d469 1
a469 1
   PIPE_CAP_DEPTH_CLAMP = 41,
d473 1
a473 1
   PIPE_CAP_FRAGMENT_COLOR_CLAMP_CONTROL = 45,
d477 66
d566 4
d572 26
d602 4
d611 4
d619 60
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d228 1
a228 1
    * It should not be used with PIPE_TRANSFER_CPU_READ.
a231 1
    * - Direct3D's D3DLOCK_DISCARD flag.
d233 2
a234 1
   PIPE_TRANSFER_DISCARD = (1 << 8),
d249 1
a249 1
    * It should not be used with PIPE_TRANSFER_CPU_READ.
d263 1
a263 1
    * It should not be used with PIPE_TRANSFER_CPU_READ.
d269 16
a284 1
   PIPE_TRANSFER_FLUSH_EXPLICIT = (1 << 11)
d303 2
a304 1
#define PIPE_BIND_CUSTOM               (1 << 16) /* state-tracker/winsys usages */
a340 19
/* These are intended to be used in calls to is_format_supported, but
 * no driver actually uses these flags, and only the glx/xlib state
 * tracker issues them.
 *
 * Deprecate?
 */
#define PIPE_TEXTURE_GEOM_NON_SQUARE       0x1
#define PIPE_TEXTURE_GEOM_NON_POWER_OF_TWO 0x2


/** 
 * Flush types:
 */
#define PIPE_FLUSH_RENDER_CACHE   0x1
#define PIPE_FLUSH_TEXTURE_CACHE  0x2
#define PIPE_FLUSH_SWAPBUFFERS    0x4
#define PIPE_FLUSH_FRAME          0x8 /**< Mark the end of a frame */


d380 2
a381 1
#define PIPE_QUERY_TYPES                 8
d411 2
d418 32
a449 32
   PIPE_CAP_MAX_TEXTURE_IMAGE_UNITS,
   PIPE_CAP_NPOT_TEXTURES,
   PIPE_CAP_TWO_SIDED_STENCIL,
   PIPE_CAP_GLSL,  /* XXX need something better */
   PIPE_CAP_DUAL_SOURCE_BLEND,
   PIPE_CAP_ANISOTROPIC_FILTER,
   PIPE_CAP_POINT_SPRITE,
   PIPE_CAP_MAX_RENDER_TARGETS,
   PIPE_CAP_OCCLUSION_QUERY,
   PIPE_CAP_TIMER_QUERY,
   PIPE_CAP_TEXTURE_SHADOW_MAP,
   PIPE_CAP_TEXTURE_SWIZZLE,
   PIPE_CAP_MAX_TEXTURE_2D_LEVELS,
   PIPE_CAP_MAX_TEXTURE_3D_LEVELS,
   PIPE_CAP_MAX_TEXTURE_CUBE_LEVELS,
   PIPE_CAP_MAX_LINE_WIDTH,
   PIPE_CAP_MAX_LINE_WIDTH_AA,
   PIPE_CAP_MAX_POINT_WIDTH,
   PIPE_CAP_MAX_POINT_WIDTH_AA,
   PIPE_CAP_MAX_TEXTURE_ANISOTROPY,
   PIPE_CAP_MAX_TEXTURE_LOD_BIAS,
   PIPE_CAP_GUARD_BAND_LEFT,  /*< float */
   PIPE_CAP_GUARD_BAND_TOP,  /*< float */
   PIPE_CAP_GUARD_BAND_RIGHT,  /*< float */
   PIPE_CAP_GUARD_BAND_BOTTOM,  /*< float */
   PIPE_CAP_TEXTURE_MIRROR_CLAMP,
   PIPE_CAP_TEXTURE_MIRROR_REPEAT,
   PIPE_CAP_MAX_VERTEX_TEXTURE_UNITS,
   PIPE_CAP_BLEND_EQUATION_SEPARATE,
   PIPE_CAP_SM3,  /*< Shader Model, supported */
   PIPE_CAP_STREAM_OUTPUT,
   PIPE_CAP_PRIMITIVE_RESTART,
d452 1
a452 1
   PIPE_CAP_MAX_COMBINED_SAMPLERS,
d454 1
a454 1
   PIPE_CAP_INDEP_BLEND_ENABLE,
d456 15
a470 9
   PIPE_CAP_INDEP_BLEND_FUNC,
   PIPE_CAP_DEPTHSTENCIL_CLEAR_SEPARATE,
   PIPE_CAP_ARRAY_TEXTURES,
   PIPE_CAP_TGSI_FS_COORD_ORIGIN_UPPER_LEFT,
   PIPE_CAP_TGSI_FS_COORD_ORIGIN_LOWER_LEFT,
   PIPE_CAP_TGSI_FS_COORD_PIXEL_CENTER_HALF_INTEGER,
   PIPE_CAP_TGSI_FS_COORD_PIXEL_CENTER_INTEGER,
   PIPE_CAP_DEPTH_CLAMP,
   PIPE_CAP_SHADER_STENCIL_EXPORT,
d476 11
a486 11
   PIPE_SHADER_CAP_MAX_INSTRUCTIONS, /* if 0, it means the stage is unsupported */
   PIPE_SHADER_CAP_MAX_ALU_INSTRUCTIONS,
   PIPE_SHADER_CAP_MAX_TEX_INSTRUCTIONS,
   PIPE_SHADER_CAP_MAX_TEX_INDIRECTIONS,
   PIPE_SHADER_CAP_MAX_CONTROL_FLOW_DEPTH,
   PIPE_SHADER_CAP_MAX_INPUTS,
   PIPE_SHADER_CAP_MAX_CONSTS,
   PIPE_SHADER_CAP_MAX_CONST_BUFFERS,
   PIPE_SHADER_CAP_MAX_TEMPS,
   PIPE_SHADER_CAP_MAX_ADDRS,
   PIPE_SHADER_CAP_MAX_PREDS,
d488 6
a493 6
   PIPE_SHADER_CAP_TGSI_CONT_SUPPORTED,
   PIPE_SHADER_CAP_INDIRECT_INPUT_ADDR,
   PIPE_SHADER_CAP_INDIRECT_OUTPUT_ADDR,
   PIPE_SHADER_CAP_INDIRECT_TEMP_ADDR,
   PIPE_SHADER_CAP_INDIRECT_CONST_ADDR,
   PIPE_SHADER_CAP_SUBROUTINES, /* BGNSUB, ENDSUB, CAL, RET */
a495 7
/**
 * Referenced query flags.
 */

#define PIPE_UNREFERENCED         0
#define PIPE_REFERENCED_FOR_READ  (1 << 0)
#define PIPE_REFERENCED_FOR_WRITE (1 << 1)
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d31 1
a31 1
#include "p_format.h"
d122 5
a126 5
/** Polygon front/back window, also for culling */
#define PIPE_WINDING_NONE 0
#define PIPE_WINDING_CW   1
#define PIPE_WINDING_CCW  2
#define PIPE_WINDING_BOTH (PIPE_WINDING_CW | PIPE_WINDING_CCW)
d138 2
a139 1
/** Texture types */
d141 8
a148 4
   PIPE_TEXTURE_1D   = 0,
   PIPE_TEXTURE_2D   = 1,
   PIPE_TEXTURE_3D   = 2,
   PIPE_TEXTURE_CUBE = 3,
a182 19
#define PIPE_TEXTURE_USAGE_RENDER_TARGET   0x1
#define PIPE_TEXTURE_USAGE_DISPLAY_TARGET  0x2 /* ie a backbuffer */
#define PIPE_TEXTURE_USAGE_PRIMARY         0x4 /* ie a frontbuffer */
#define PIPE_TEXTURE_USAGE_DEPTH_STENCIL   0x8
#define PIPE_TEXTURE_USAGE_SAMPLER         0x10
#define PIPE_TEXTURE_USAGE_DYNAMIC         0x20
/** Pipe driver custom usage flags should be greater or equal to this value */
#define PIPE_TEXTURE_USAGE_CUSTOM          (1 << 16)

#define PIPE_TEXTURE_GEOM_NON_SQUARE       0x1
#define PIPE_TEXTURE_GEOM_NON_POWER_OF_TWO 0x2


/**
 * Surface layout
 */
#define PIPE_SURFACE_LAYOUT_LINEAR  0


d188 2
d191 1
a191 2
#define PIPE_CLEAR_DEPTHSTENCIL (1 << 1)

d197 4
d202 5
d208 4
a211 1
   /** Read/modify/write */
d213 1
d223 48
a270 1
   PIPE_TRANSFER_MAP_DIRECTLY = (1 << 2)
d275 2
a276 1
 * Buffer usage flags
d278 17
a294 12

#define PIPE_BUFFER_USAGE_CPU_READ  (1 << 0)
#define PIPE_BUFFER_USAGE_CPU_WRITE (1 << 1)
#define PIPE_BUFFER_USAGE_GPU_READ  (1 << 2)
#define PIPE_BUFFER_USAGE_GPU_WRITE (1 << 3)
#define PIPE_BUFFER_USAGE_PIXEL     (1 << 4)
#define PIPE_BUFFER_USAGE_VERTEX    (1 << 5)
#define PIPE_BUFFER_USAGE_INDEX     (1 << 6)
#define PIPE_BUFFER_USAGE_CONSTANT  (1 << 7)

/*
 * CPU access flags.
d296 4
a299 2
 * These flags should only be used for texture transfers or when mapping
 * buffers.
d301 3
a303 3
 * Note that the PIPE_BUFFER_USAGE_CPU_xxx flags above are also used for
 * mapping. Either PIPE_BUFFER_USAGE_CPU_READ or PIPE_BUFFER_USAGE_CPU_WRITE
 * must be set.
d305 2
d308 2
a309 8
/**
 * Discards the memory within the mapped region.
 *
 * It should not be used with PIPE_BUFFER_USAGE_CPU_READ.
 *
 * See also:
 * - OpenGL's ARB_map_buffer_range extension, MAP_INVALIDATE_RANGE_BIT flag.
 * - Direct3D's D3DLOCK_DISCARD flag.
d311 3
a313 1
#define PIPE_BUFFER_USAGE_DISCARD   (1 << 8)
d315 1
a315 7
/**
 * Fail if the resource cannot be mapped immediately.
 *
 * See also:
 * - Direct3D's D3DLOCK_DONOTWAIT flag.
 * - Mesa3D's MESA_MAP_NOWAIT_BIT flag.
 * - WDDM's D3DDDICB_LOCKFLAGS.DonotWait flag.
d317 6
a322 1
#define PIPE_BUFFER_USAGE_DONTBLOCK (1 << 9)
d324 4
a327 2
/**
 * Do not attempt to synchronize pending operations on the resource when mapping.
d329 1
a329 6
 * It should not be used with PIPE_BUFFER_USAGE_CPU_READ.
 *
 * See also:
 * - OpenGL's ARB_map_buffer_range extension, MAP_UNSYNCHRONIZED_BIT flag.
 * - Direct3D's D3DLOCK_NOOVERWRITE flag.
 * - WDDM's D3DDDICB_LOCKFLAGS.IgnoreSync flag.
d331 2
a332 24
#define PIPE_BUFFER_USAGE_UNSYNCHRONIZED (1 << 10)

/**
 * Written ranges will be notified later with
 * pipe_screen::buffer_flush_mapped_range.
 *
 * It should not be used with PIPE_BUFFER_USAGE_CPU_READ.
 *
 * See also:
 * - pipe_screen::buffer_flush_mapped_range
 * - OpenGL's ARB_map_buffer_range extension, MAP_FLUSH_EXPLICIT_BIT flag.
 */
#define PIPE_BUFFER_USAGE_FLUSH_EXPLICIT (1 << 11)

/** Pipe driver custom usage flags should be greater or equal to this value */
#define PIPE_BUFFER_USAGE_CUSTOM    (1 << 16)

/* Convenient shortcuts */
#define PIPE_BUFFER_USAGE_CPU_READ_WRITE \
   ( PIPE_BUFFER_USAGE_CPU_READ | PIPE_BUFFER_USAGE_CPU_WRITE )
#define PIPE_BUFFER_USAGE_GPU_READ_WRITE \
   ( PIPE_BUFFER_USAGE_GPU_READ | PIPE_BUFFER_USAGE_GPU_WRITE )
#define PIPE_BUFFER_USAGE_WRITE \
   ( PIPE_BUFFER_USAGE_CPU_WRITE | PIPE_BUFFER_USAGE_GPU_WRITE )
d379 5
a383 1
#define PIPE_QUERY_TYPES                 3
d403 11
d417 49
a465 40
#define PIPE_CAP_MAX_TEXTURE_IMAGE_UNITS 1
#define PIPE_CAP_NPOT_TEXTURES           2
#define PIPE_CAP_TWO_SIDED_STENCIL       3
#define PIPE_CAP_GLSL                    4  /* XXX need something better */
#define PIPE_CAP_DUAL_SOURCE_BLEND       5  
#define PIPE_CAP_ANISOTROPIC_FILTER      6
#define PIPE_CAP_POINT_SPRITE            7
#define PIPE_CAP_MAX_RENDER_TARGETS      8
#define PIPE_CAP_OCCLUSION_QUERY         9
#define PIPE_CAP_TEXTURE_SHADOW_MAP      10
#define PIPE_CAP_MAX_TEXTURE_2D_LEVELS   11
#define PIPE_CAP_MAX_TEXTURE_3D_LEVELS   12
#define PIPE_CAP_MAX_TEXTURE_CUBE_LEVELS 13
#define PIPE_CAP_MAX_LINE_WIDTH          14
#define PIPE_CAP_MAX_LINE_WIDTH_AA       15
#define PIPE_CAP_MAX_POINT_WIDTH         16
#define PIPE_CAP_MAX_POINT_WIDTH_AA      17
#define PIPE_CAP_MAX_TEXTURE_ANISOTROPY  18
#define PIPE_CAP_MAX_TEXTURE_LOD_BIAS    19
#define PIPE_CAP_GUARD_BAND_LEFT         20  /*< float */
#define PIPE_CAP_GUARD_BAND_TOP          21  /*< float */
#define PIPE_CAP_GUARD_BAND_RIGHT        22  /*< float */
#define PIPE_CAP_GUARD_BAND_BOTTOM       23  /*< float */
#define PIPE_CAP_TEXTURE_MIRROR_CLAMP    24
#define PIPE_CAP_TEXTURE_MIRROR_REPEAT   25
#define PIPE_CAP_MAX_VERTEX_TEXTURE_UNITS 26
#define PIPE_CAP_TGSI_CONT_SUPPORTED     27
#define PIPE_CAP_BLEND_EQUATION_SEPARATE 28
#define PIPE_CAP_SM3                     29  /*< Shader Model 3 supported */
#define PIPE_CAP_MAX_PREDICATE_REGISTERS 30
#define PIPE_CAP_MAX_COMBINED_SAMPLERS   31  /*< Maximum texture image units accessible from vertex
                                                 and fragment shaders combined */
#define PIPE_CAP_MAX_CONST_BUFFERS       32
#define PIPE_CAP_MAX_CONST_BUFFER_SIZE   33  /*< In bytes */
#define PIPE_CAP_INDEP_BLEND_ENABLE      34  /*< blend enables and write masks per rendertarget */
#define PIPE_CAP_INDEP_BLEND_FUNC        35  /*< different blend funcs per rendertarget */
#define PIPE_CAP_TGSI_FS_COORD_ORIGIN_UPPER_LEFT 36
#define PIPE_CAP_TGSI_FS_COORD_ORIGIN_LOWER_LEFT 37
#define PIPE_CAP_TGSI_FS_COORD_PIXEL_CENTER_HALF_INTEGER 38
#define PIPE_CAP_TGSI_FS_COORD_PIXEL_CENTER_INTEGER 39
d467 22
d498 4
a501 2

enum pipe_video_codec
d503 2
a504 5
   PIPE_VIDEO_CODEC_UNKNOWN = 0,
   PIPE_VIDEO_CODEC_MPEG12,   /**< MPEG1, MPEG2 */
   PIPE_VIDEO_CODEC_MPEG4,    /**< DIVX, XVID */
   PIPE_VIDEO_CODEC_VC1,      /**< WMV */
   PIPE_VIDEO_CODEC_MPEG4_AVC /**< H.264 */
d506 1
a506 2

enum pipe_video_profile
d508 2
a509 11
   PIPE_VIDEO_PROFILE_MPEG1,
   PIPE_VIDEO_PROFILE_MPEG2_SIMPLE,
   PIPE_VIDEO_PROFILE_MPEG2_MAIN,
   PIPE_VIDEO_PROFILE_MPEG4_SIMPLE,
   PIPE_VIDEO_PROFILE_MPEG4_ADVANCED_SIMPLE,
   PIPE_VIDEO_PROFILE_VC1_SIMPLE,
   PIPE_VIDEO_PROFILE_VC1_MAIN,
   PIPE_VIDEO_PROFILE_VC1_ADVANCED,
   PIPE_VIDEO_PROFILE_MPEG4_AVC_BASELINE,
   PIPE_VIDEO_PROFILE_MPEG4_AVC_MAIN,
   PIPE_VIDEO_PROFILE_MPEG4_AVC_HIGH
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d31 1
a31 1
#include "p_compiler.h"
d122 5
a126 5
/** Polygon face specification, eg for culling */
#define PIPE_FACE_NONE           0
#define PIPE_FACE_FRONT          1
#define PIPE_FACE_BACK           2
#define PIPE_FACE_FRONT_AND_BACK (PIPE_FACE_FRONT | PIPE_FACE_BACK)
d138 1
a138 2
/** Texture types.
 * See the documentation for info on PIPE_TEXTURE_RECT vs PIPE_TEXTURE_2D */
d140 4
a143 8
   PIPE_BUFFER           = 0,
   PIPE_TEXTURE_1D       = 1,
   PIPE_TEXTURE_2D       = 2,
   PIPE_TEXTURE_3D       = 3,
   PIPE_TEXTURE_CUBE     = 4,
   PIPE_TEXTURE_RECT     = 5,
   PIPE_TEXTURE_1D_ARRAY = 6,
   PIPE_TEXTURE_2D_ARRAY = 7,
d178 19
a201 2
#define PIPE_CLEAR_DEPTH        (1 << 1)
#define PIPE_CLEAR_STENCIL      (1 << 2)
d203 2
a204 1
#define PIPE_CLEAR_DEPTHSTENCIL (PIPE_CLEAR_DEPTH | PIPE_CLEAR_STENCIL)
a209 4
   /**
    * Resource contents read back (or accessed directly) at transfer
    * create time.
    */
a210 5
   
   /**
    * Resource contents will be written back at transfer_destroy
    * time (or modified as a result of being accessed directly).
    */
d212 1
a212 4

   /**
    * Read/modify/write
    */
a213 1

d223 2
a224 1
   PIPE_TRANSFER_MAP_DIRECTLY = (1 << 2),
a225 10
   /**
    * Discards the memory within the mapped region.
    *
    * It should not be used with PIPE_TRANSFER_CPU_READ.
    *
    * See also:
    * - OpenGL's ARB_map_buffer_range extension, MAP_INVALIDATE_RANGE_BIT flag.
    * - Direct3D's D3DLOCK_DISCARD flag.
    */
   PIPE_TRANSFER_DISCARD = (1 << 8),
d227 3
a229 36
   /**
    * Fail if the resource cannot be mapped immediately.
    *
    * See also:
    * - Direct3D's D3DLOCK_DONOTWAIT flag.
    * - Mesa3D's MESA_MAP_NOWAIT_BIT flag.
    * - WDDM's D3DDDICB_LOCKFLAGS.DonotWait flag.
    */
   PIPE_TRANSFER_DONTBLOCK = (1 << 9),

   /**
    * Do not attempt to synchronize pending operations on the resource when mapping.
    *
    * It should not be used with PIPE_TRANSFER_CPU_READ.
    *
    * See also:
    * - OpenGL's ARB_map_buffer_range extension, MAP_UNSYNCHRONIZED_BIT flag.
    * - Direct3D's D3DLOCK_NOOVERWRITE flag.
    * - WDDM's D3DDDICB_LOCKFLAGS.IgnoreSync flag.
    */
   PIPE_TRANSFER_UNSYNCHRONIZED = (1 << 10),
   PIPE_TRANSFER_NOOVERWRITE = (1 << 10), /* are these really the same?? */

   /**
    * Written ranges will be notified later with
    * pipe_context::transfer_flush_region.
    *
    * It should not be used with PIPE_TRANSFER_CPU_READ.
    *
    * See also:
    * - pipe_context::transfer_flush_region
    * - OpenGL's ARB_map_buffer_range extension, MAP_FLUSH_EXPLICIT_BIT flag.
    */
   PIPE_TRANSFER_FLUSH_EXPLICIT = (1 << 11)

};
d231 8
d241 8
a248 2
 * Resource binding flags -- state tracker must specify in advance all
 * the ways a resource might be used.
d250 3
a252 17
#define PIPE_BIND_DEPTH_STENCIL        (1 << 0) /* create_surface */
#define PIPE_BIND_RENDER_TARGET        (1 << 1) /* create_surface */
#define PIPE_BIND_SAMPLER_VIEW         (1 << 2) /* create_sampler_view */
#define PIPE_BIND_VERTEX_BUFFER        (1 << 3) /* set_vertex_buffers */
#define PIPE_BIND_INDEX_BUFFER         (1 << 4) /* draw_elements */
#define PIPE_BIND_CONSTANT_BUFFER      (1 << 5) /* set_constant_buffer */
#define PIPE_BIND_DISPLAY_TARGET       (1 << 8) /* flush_front_buffer */
#define PIPE_BIND_TRANSFER_WRITE       (1 << 9) /* get_transfer */
#define PIPE_BIND_TRANSFER_READ        (1 << 10) /* get_transfer */
#define PIPE_BIND_STREAM_OUTPUT        (1 << 11) /* set_stream_output_buffers */
#define PIPE_BIND_CUSTOM               (1 << 16) /* state-tracker/winsys usages */

/* The first two flags above were previously part of the amorphous
 * TEXTURE_USAGE, most of which are now descriptions of the ways a
 * particular texture can be bound to the gallium pipeline.  The two flags
 * below do not fit within that and probably need to be migrated to some
 * other place.
d254 1
a254 4
 * It seems like scanout is used by the Xorg state tracker to ask for
 * a texture suitable for actual scanout (hence the name), which
 * implies extra layout constraints on some hardware.  It may also
 * have some special meaning regarding mouse cursor images.
d256 3
a258 3
 * The shared flag is quite underspecified, but certainly isn't a
 * binding flag - it seems more like a message to the winsys to create
 * a shareable allocation.
d260 1
a260 2
#define PIPE_BIND_SCANOUT     (1 << 14) /*  */
#define PIPE_BIND_SHARED      (1 << 15) /* get_texture_handle ??? */
d262 7
a268 2

/* Flags for the driver about resource behaviour:
d270 1
a270 3
#define PIPE_RESOURCE_FLAG_GEN_MIPS    (1 << 0)  /* Driver performs autogen mips */
#define PIPE_RESOURCE_FLAG_DRV_PRIV    (1 << 16) /* driver/winsys private */
#define PIPE_RESOURCE_FLAG_ST_PRIV     (1 << 24) /* state-tracker/winsys private */
d272 9
a280 1
/* Hint about the expected lifecycle of a resource.
d282 1
a282 6
#define PIPE_USAGE_DEFAULT        0 /* many uploads, draws intermixed */
#define PIPE_USAGE_DYNAMIC        1 /* many uploads, draws intermixed */
#define PIPE_USAGE_STATIC         2 /* same as immutable?? */
#define PIPE_USAGE_IMMUTABLE      3 /* no change after first upload */
#define PIPE_USAGE_STREAM         4 /* upload, draw, upload, draw */
#define PIPE_USAGE_STAGING        5 /* supports data transfers from the GPU to the CPU */
d284 5
a288 4

/* These are intended to be used in calls to is_format_supported, but
 * no driver actually uses these flags, and only the glx/xlib state
 * tracker issues them.
d290 16
a305 4
 * Deprecate?
 */
#define PIPE_TEXTURE_GEOM_NON_SQUARE       0x1
#define PIPE_TEXTURE_GEOM_NON_POWER_OF_TWO 0x2
d352 1
a352 5
#define PIPE_QUERY_TIME_ELAPSED          3
#define PIPE_QUERY_SO_STATISTICS         5
#define PIPE_QUERY_GPU_FINISHED          6
#define PIPE_QUERY_TIMESTAMP_DISJOINT    7
#define PIPE_QUERY_TYPES                 8
a371 11
 * Texture swizzles
 */
#define PIPE_SWIZZLE_RED   0
#define PIPE_SWIZZLE_GREEN 1
#define PIPE_SWIZZLE_BLUE  2
#define PIPE_SWIZZLE_ALPHA 3
#define PIPE_SWIZZLE_ZERO  4
#define PIPE_SWIZZLE_ONE   5


/**
d375 40
a414 49
enum pipe_cap {
   PIPE_CAP_MAX_TEXTURE_IMAGE_UNITS,
   PIPE_CAP_NPOT_TEXTURES,
   PIPE_CAP_TWO_SIDED_STENCIL,
   PIPE_CAP_GLSL,  /* XXX need something better */
   PIPE_CAP_DUAL_SOURCE_BLEND,
   PIPE_CAP_ANISOTROPIC_FILTER,
   PIPE_CAP_POINT_SPRITE,
   PIPE_CAP_MAX_RENDER_TARGETS,
   PIPE_CAP_OCCLUSION_QUERY,
   PIPE_CAP_TIMER_QUERY,
   PIPE_CAP_TEXTURE_SHADOW_MAP,
   PIPE_CAP_TEXTURE_SWIZZLE,
   PIPE_CAP_MAX_TEXTURE_2D_LEVELS,
   PIPE_CAP_MAX_TEXTURE_3D_LEVELS,
   PIPE_CAP_MAX_TEXTURE_CUBE_LEVELS,
   PIPE_CAP_MAX_LINE_WIDTH,
   PIPE_CAP_MAX_LINE_WIDTH_AA,
   PIPE_CAP_MAX_POINT_WIDTH,
   PIPE_CAP_MAX_POINT_WIDTH_AA,
   PIPE_CAP_MAX_TEXTURE_ANISOTROPY,
   PIPE_CAP_MAX_TEXTURE_LOD_BIAS,
   PIPE_CAP_GUARD_BAND_LEFT,  /*< float */
   PIPE_CAP_GUARD_BAND_TOP,  /*< float */
   PIPE_CAP_GUARD_BAND_RIGHT,  /*< float */
   PIPE_CAP_GUARD_BAND_BOTTOM,  /*< float */
   PIPE_CAP_TEXTURE_MIRROR_CLAMP,
   PIPE_CAP_TEXTURE_MIRROR_REPEAT,
   PIPE_CAP_MAX_VERTEX_TEXTURE_UNITS,
   PIPE_CAP_BLEND_EQUATION_SEPARATE,
   PIPE_CAP_SM3,  /*< Shader Model, supported */
   PIPE_CAP_STREAM_OUTPUT,
   PIPE_CAP_PRIMITIVE_RESTART,
   /** Maximum texture image units accessible from vertex and fragment shaders
    * combined */
   PIPE_CAP_MAX_COMBINED_SAMPLERS,
   /** blend enables and write masks per rendertarget */
   PIPE_CAP_INDEP_BLEND_ENABLE,
   /** different blend funcs per rendertarget */
   PIPE_CAP_INDEP_BLEND_FUNC,
   PIPE_CAP_DEPTHSTENCIL_CLEAR_SEPARATE,
   PIPE_CAP_ARRAY_TEXTURES,
   PIPE_CAP_TGSI_FS_COORD_ORIGIN_UPPER_LEFT,
   PIPE_CAP_TGSI_FS_COORD_ORIGIN_LOWER_LEFT,
   PIPE_CAP_TGSI_FS_COORD_PIXEL_CENTER_HALF_INTEGER,
   PIPE_CAP_TGSI_FS_COORD_PIXEL_CENTER_INTEGER,
   PIPE_CAP_DEPTH_CLAMP,
   PIPE_CAP_SHADER_STENCIL_EXPORT,
};
a415 22
/* Shader caps not specific to any single stage */
enum pipe_shader_cap
{
   PIPE_SHADER_CAP_MAX_INSTRUCTIONS, /* if 0, it means the stage is unsupported */
   PIPE_SHADER_CAP_MAX_ALU_INSTRUCTIONS,
   PIPE_SHADER_CAP_MAX_TEX_INSTRUCTIONS,
   PIPE_SHADER_CAP_MAX_TEX_INDIRECTIONS,
   PIPE_SHADER_CAP_MAX_CONTROL_FLOW_DEPTH,
   PIPE_SHADER_CAP_MAX_INPUTS,
   PIPE_SHADER_CAP_MAX_CONSTS,
   PIPE_SHADER_CAP_MAX_CONST_BUFFERS,
   PIPE_SHADER_CAP_MAX_TEMPS,
   PIPE_SHADER_CAP_MAX_ADDRS,
   PIPE_SHADER_CAP_MAX_PREDS,
   /* boolean caps */
   PIPE_SHADER_CAP_TGSI_CONT_SUPPORTED,
   PIPE_SHADER_CAP_INDIRECT_INPUT_ADDR,
   PIPE_SHADER_CAP_INDIRECT_OUTPUT_ADDR,
   PIPE_SHADER_CAP_INDIRECT_TEMP_ADDR,
   PIPE_SHADER_CAP_INDIRECT_CONST_ADDR,
   PIPE_SHADER_CAP_SUBROUTINES, /* BGNSUB, ENDSUB, CAL, RET */
};
d425 2
a426 4
/**
 * Composite query types
 */
struct pipe_query_data_so_statistics
d428 5
a432 2
   uint64_t num_primitives_written;
   uint64_t primitives_storage_needed;
d434 2
a435 1
struct pipe_query_data_timestamp_disjoint
d437 11
a447 2
   uint64_t frequency;
   boolean  disjoint;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a101 4
#define PIPE_MASK_Z  0x10
#define PIPE_MASK_S  0x20
#define PIPE_MASK_ZS 0x30
#define PIPE_MASK_RGBAZS (PIPE_MASK_RGBA|PIPE_MASK_ZS)
a148 1
   PIPE_TEXTURE_CUBE_ARRAY = 8,
d204 1
a204 1
    * Resource contents will be written back at transfer_unmap
d228 1
a228 1
    * It should not be used with PIPE_TRANSFER_READ.
d232 1
d234 1
a234 1
   PIPE_TRANSFER_DISCARD_RANGE = (1 << 8),
d249 1
a249 1
    * It should not be used with PIPE_TRANSFER_READ.
d257 1
d263 1
a263 1
    * It should not be used with PIPE_TRANSFER_READ.
d269 1
a269 16
   PIPE_TRANSFER_FLUSH_EXPLICIT = (1 << 11),

   /**
    * Discards all memory backing the resource.
    *
    * It should not be used with PIPE_TRANSFER_READ.
    *
    * This is equivalent to:
    * - OpenGL's ARB_map_buffer_range extension, MAP_INVALIDATE_BUFFER_BIT
    * - BufferData(NULL) on a GL buffer
    * - Direct3D's D3DLOCK_DISCARD flag.
    * - WDDM's D3DDDICB_LOCKFLAGS.Discard flag.
    * - D3D10 DDI's D3D10_DDI_MAP_WRITE_DISCARD flag
    * - D3D10's D3D10_MAP_WRITE_DISCARD flag.
    */
   PIPE_TRANSFER_DISCARD_WHOLE_RESOURCE = (1 << 12)
a272 6
/**
 * Flags for the flush function.
 */
enum pipe_flush_flags {
   PIPE_FLUSH_END_OF_FRAME = (1 << 0)
};
d280 4
a283 5
#define PIPE_BIND_BLENDABLE            (1 << 2) /* create_surface */
#define PIPE_BIND_SAMPLER_VIEW         (1 << 3) /* create_sampler_view */
#define PIPE_BIND_VERTEX_BUFFER        (1 << 4) /* set_vertex_buffers */
#define PIPE_BIND_INDEX_BUFFER         (1 << 5) /* draw_elements */
#define PIPE_BIND_CONSTANT_BUFFER      (1 << 6) /* set_constant_buffer */
d285 2
a286 2
#define PIPE_BIND_TRANSFER_WRITE       (1 << 9) /* transfer_map */
#define PIPE_BIND_TRANSFER_READ        (1 << 10) /* transfer_map */
d288 1
a288 5
#define PIPE_BIND_CURSOR               (1 << 16) /* mouse cursor */
#define PIPE_BIND_CUSTOM               (1 << 17) /* state-tracker/winsys usages */
#define PIPE_BIND_GLOBAL               (1 << 18) /* set_global_binding */
#define PIPE_BIND_SHADER_RESOURCE      (1 << 19) /* set_shader_resources */
#define PIPE_BIND_COMPUTE_RESOURCE     (1 << 20) /* set_compute_resources */
d325 19
d350 1
a350 2
#define PIPE_SHADER_COMPUTE  3
#define PIPE_SHADER_TYPES    4
d377 7
a383 15
#define PIPE_QUERY_OCCLUSION_PREDICATE   1
#define PIPE_QUERY_TIMESTAMP             2
#define PIPE_QUERY_TIMESTAMP_DISJOINT    3
#define PIPE_QUERY_TIME_ELAPSED          4
#define PIPE_QUERY_PRIMITIVES_GENERATED  5
#define PIPE_QUERY_PRIMITIVES_EMITTED    6
#define PIPE_QUERY_SO_STATISTICS         7
#define PIPE_QUERY_SO_OVERFLOW_PREDICATE 8
#define PIPE_QUERY_GPU_FINISHED          9
#define PIPE_QUERY_PIPELINE_STATISTICS  10
#define PIPE_QUERY_TYPES                11

/* start of driver queries,
 * see pipe_screen::get_driver_query_info */
#define PIPE_QUERY_DRIVER_SPECIFIC     256
a412 2
#define PIPE_TIMEOUT_INFINITE 0xffffffffffffffffull

d415 1
a415 1
 * pipe_screen::get_param()
d418 32
a449 18
   PIPE_CAP_NPOT_TEXTURES = 1,
   PIPE_CAP_TWO_SIDED_STENCIL = 2,
   PIPE_CAP_MAX_DUAL_SOURCE_RENDER_TARGETS = 4,
   PIPE_CAP_ANISOTROPIC_FILTER = 5,
   PIPE_CAP_POINT_SPRITE = 6,
   PIPE_CAP_MAX_RENDER_TARGETS = 7,
   PIPE_CAP_OCCLUSION_QUERY = 8,
   PIPE_CAP_QUERY_TIME_ELAPSED = 9,
   PIPE_CAP_TEXTURE_SHADOW_MAP = 10,
   PIPE_CAP_TEXTURE_SWIZZLE = 11,
   PIPE_CAP_MAX_TEXTURE_2D_LEVELS = 12,
   PIPE_CAP_MAX_TEXTURE_3D_LEVELS = 13,
   PIPE_CAP_MAX_TEXTURE_CUBE_LEVELS = 14,
   PIPE_CAP_TEXTURE_MIRROR_CLAMP = 25,
   PIPE_CAP_BLEND_EQUATION_SEPARATE = 28,
   PIPE_CAP_SM3 = 29,  /*< Shader Model, supported */
   PIPE_CAP_MAX_STREAM_OUTPUT_BUFFERS = 30,
   PIPE_CAP_PRIMITIVE_RESTART = 31,
d452 1
a452 1
   PIPE_CAP_MAX_COMBINED_SAMPLERS = 32,
d454 1
a454 1
   PIPE_CAP_INDEP_BLEND_ENABLE = 33,
d456 9
a464 80
   PIPE_CAP_INDEP_BLEND_FUNC = 34,
   PIPE_CAP_MAX_TEXTURE_ARRAY_LAYERS = 36,
   PIPE_CAP_TGSI_FS_COORD_ORIGIN_UPPER_LEFT = 37,
   PIPE_CAP_TGSI_FS_COORD_ORIGIN_LOWER_LEFT = 38,
   PIPE_CAP_TGSI_FS_COORD_PIXEL_CENTER_HALF_INTEGER = 39,
   PIPE_CAP_TGSI_FS_COORD_PIXEL_CENTER_INTEGER = 40,
   PIPE_CAP_DEPTH_CLIP_DISABLE = 41,
   PIPE_CAP_SHADER_STENCIL_EXPORT = 42,
   PIPE_CAP_TGSI_INSTANCEID = 43,
   PIPE_CAP_VERTEX_ELEMENT_INSTANCE_DIVISOR = 44,
   PIPE_CAP_FRAGMENT_COLOR_CLAMPED = 45,
   PIPE_CAP_MIXED_COLORBUFFER_FORMATS = 46,
   PIPE_CAP_SEAMLESS_CUBE_MAP = 47,
   PIPE_CAP_SEAMLESS_CUBE_MAP_PER_TEXTURE = 48,
   PIPE_CAP_SCALED_RESOLVE = 49,
   PIPE_CAP_MIN_TEXEL_OFFSET = 50,
   PIPE_CAP_MAX_TEXEL_OFFSET = 51,
   PIPE_CAP_CONDITIONAL_RENDER = 52,
   PIPE_CAP_TEXTURE_BARRIER = 53,
   PIPE_CAP_MAX_STREAM_OUTPUT_SEPARATE_COMPONENTS = 55,
   PIPE_CAP_MAX_STREAM_OUTPUT_INTERLEAVED_COMPONENTS = 56,
   PIPE_CAP_STREAM_OUTPUT_PAUSE_RESUME = 57,
   PIPE_CAP_TGSI_CAN_COMPACT_CONSTANTS = 59, /* temporary */
   PIPE_CAP_VERTEX_COLOR_UNCLAMPED = 60,
   PIPE_CAP_VERTEX_COLOR_CLAMPED = 61,
   PIPE_CAP_GLSL_FEATURE_LEVEL = 62,
   PIPE_CAP_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 63,
   PIPE_CAP_USER_VERTEX_BUFFERS = 64,
   PIPE_CAP_VERTEX_BUFFER_OFFSET_4BYTE_ALIGNED_ONLY = 65,
   PIPE_CAP_VERTEX_BUFFER_STRIDE_4BYTE_ALIGNED_ONLY = 66,
   PIPE_CAP_VERTEX_ELEMENT_SRC_OFFSET_4BYTE_ALIGNED_ONLY = 67,
   PIPE_CAP_COMPUTE = 68,
   PIPE_CAP_USER_INDEX_BUFFERS = 69,
   PIPE_CAP_USER_CONSTANT_BUFFERS = 70,
   PIPE_CAP_CONSTANT_BUFFER_OFFSET_ALIGNMENT = 71,
   PIPE_CAP_START_INSTANCE = 72,
   PIPE_CAP_QUERY_TIMESTAMP = 73,
   PIPE_CAP_TEXTURE_MULTISAMPLE = 74,
   PIPE_CAP_MIN_MAP_BUFFER_ALIGNMENT = 75,
   PIPE_CAP_CUBE_MAP_ARRAY = 76,
   PIPE_CAP_TEXTURE_BUFFER_OBJECTS = 77,
   PIPE_CAP_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 78,
   PIPE_CAP_TGSI_TEXCOORD = 79,
   PIPE_CAP_PREFER_BLIT_BASED_TEXTURE_TRANSFER = 80,
   PIPE_CAP_QUERY_PIPELINE_STATISTICS = 81,
   PIPE_CAP_TEXTURE_BORDER_COLOR_QUIRK = 82,
   PIPE_CAP_MAX_TEXTURE_BUFFER_SIZE = 83,
   PIPE_CAP_MAX_VIEWPORTS = 84,
   PIPE_CAP_ENDIANNESS = 85
};

#define PIPE_QUIRK_TEXTURE_BORDER_COLOR_SWIZZLE_NV50 (1 << 0)
#define PIPE_QUIRK_TEXTURE_BORDER_COLOR_SWIZZLE_R600 (1 << 1)

enum pipe_endian {
   PIPE_ENDIAN_LITTLE = 0,
   PIPE_ENDIAN_BIG = 1,
#if defined(PIPE_ARCH_LITTLE_ENDIAN)
   PIPE_ENDIAN_NATIVE = PIPE_ENDIAN_LITTLE
#elif defined(PIPE_ARCH_BIG_ENDIAN)
   PIPE_ENDIAN_NATIVE = PIPE_ENDIAN_BIG
#endif
};

/**
 * Implementation limits which are queried through
 * pipe_screen::get_paramf()
 */
enum pipe_capf
{
   PIPE_CAPF_MAX_LINE_WIDTH = 15,
   PIPE_CAPF_MAX_LINE_WIDTH_AA = 16,
   PIPE_CAPF_MAX_POINT_WIDTH = 17,
   PIPE_CAPF_MAX_POINT_WIDTH_AA = 18,
   PIPE_CAPF_MAX_TEXTURE_ANISOTROPY = 19,
   PIPE_CAPF_MAX_TEXTURE_LOD_BIAS = 20,
   PIPE_CAPF_GUARD_BAND_LEFT = 21,
   PIPE_CAPF_GUARD_BAND_TOP = 22,
   PIPE_CAPF_GUARD_BAND_RIGHT = 23,
   PIPE_CAPF_GUARD_BAND_BOTTOM = 24
d470 11
a480 11
   PIPE_SHADER_CAP_MAX_INSTRUCTIONS = 0, /* if 0, it means the stage is unsupported */
   PIPE_SHADER_CAP_MAX_ALU_INSTRUCTIONS = 1,
   PIPE_SHADER_CAP_MAX_TEX_INSTRUCTIONS = 2,
   PIPE_SHADER_CAP_MAX_TEX_INDIRECTIONS = 3,
   PIPE_SHADER_CAP_MAX_CONTROL_FLOW_DEPTH = 4,
   PIPE_SHADER_CAP_MAX_INPUTS = 5,
   PIPE_SHADER_CAP_MAX_CONSTS = 6,
   PIPE_SHADER_CAP_MAX_CONST_BUFFERS = 7,
   PIPE_SHADER_CAP_MAX_TEMPS = 8,
   PIPE_SHADER_CAP_MAX_ADDRS = 9,
   PIPE_SHADER_CAP_MAX_PREDS = 10,
d482 6
a487 10
   PIPE_SHADER_CAP_TGSI_CONT_SUPPORTED = 11,
   PIPE_SHADER_CAP_INDIRECT_INPUT_ADDR = 12,
   PIPE_SHADER_CAP_INDIRECT_OUTPUT_ADDR = 13,
   PIPE_SHADER_CAP_INDIRECT_TEMP_ADDR = 14,
   PIPE_SHADER_CAP_INDIRECT_CONST_ADDR = 15,
   PIPE_SHADER_CAP_SUBROUTINES = 16, /* BGNSUB, ENDSUB, CAL, RET */
   PIPE_SHADER_CAP_INTEGERS = 17,
   PIPE_SHADER_CAP_MAX_TEXTURE_SAMPLERS = 18,
   PIPE_SHADER_CAP_PREFERRED_IR = 19,
   PIPE_SHADER_CAP_TGSI_SQRT_SUPPORTED = 20
d491 1
a491 1
 * Shader intermediate representation.
a492 5
enum pipe_shader_ir
{
   PIPE_SHADER_IR_TGSI,
   PIPE_SHADER_IR_LLVM
};
d494 3
a496 17
/**
 * Compute-specific implementation capability.  They can be queried
 * using pipe_screen::get_compute_param.
 */
enum pipe_compute_cap
{
   PIPE_COMPUTE_CAP_IR_TARGET,
   PIPE_COMPUTE_CAP_GRID_DIMENSION,
   PIPE_COMPUTE_CAP_MAX_GRID_SIZE,
   PIPE_COMPUTE_CAP_MAX_BLOCK_SIZE,
   PIPE_COMPUTE_CAP_MAX_THREADS_PER_BLOCK,
   PIPE_COMPUTE_CAP_MAX_GLOBAL_SIZE,
   PIPE_COMPUTE_CAP_MAX_LOCAL_SIZE,
   PIPE_COMPUTE_CAP_MAX_PRIVATE_SIZE,
   PIPE_COMPUTE_CAP_MAX_INPUT_SIZE,
   PIPE_COMPUTE_CAP_MAX_MEM_ALLOC_SIZE
};
a500 4

/**
 * Query result for PIPE_QUERY_SO_STATISTICS.
 */
a505 4

/**
 * Query result for PIPE_QUERY_TIMESTAMP_DISJOINT.
 */
a509 60
};

/**
 * Query result for PIPE_QUERY_PIPELINE_STATISTICS.
 */
struct pipe_query_data_pipeline_statistics
{
   uint64_t ia_vertices;    /**< Num vertices read by the vertex fetcher. */
   uint64_t ia_primitives;  /**< Num primitives read by the vertex fetcher. */
   uint64_t vs_invocations; /**< Num vertex shader invocations. */
   uint64_t gs_invocations; /**< Num geometry shader invocations. */
   uint64_t gs_primitives;  /**< Num primitives output by a geometry shader. */
   uint64_t c_invocations;  /**< Num primitives sent to the rasterizer. */
   uint64_t c_primitives;   /**< Num primitives that were rendered. */
   uint64_t ps_invocations; /**< Num pixel shader invocations. */
   uint64_t hs_invocations; /**< Num hull shader invocations. */
   uint64_t ds_invocations; /**< Num domain shader invocations. */
   uint64_t cs_invocations; /**< Num compute shader invocations. */
};

/**
 * Query result (returned by pipe_context::get_query_result).
 */
union pipe_query_result
{
   /* PIPE_QUERY_OCCLUSION_PREDICATE */
   /* PIPE_QUERY_SO_OVERFLOW_PREDICATE */
   /* PIPE_QUERY_GPU_FINISHED */
   boolean b;

   /* PIPE_QUERY_OCCLUSION_COUNTER */
   /* PIPE_QUERY_TIMESTAMP */
   /* PIPE_QUERY_TIME_ELAPSED */
   /* PIPE_QUERY_PRIMITIVES_GENERATED */
   /* PIPE_QUERY_PRIMITIVES_EMITTED */
   uint64_t u64;

   /* PIPE_QUERY_SO_STATISTICS */
   struct pipe_query_data_so_statistics so_statistics;

   /* PIPE_QUERY_TIMESTAMP_DISJOINT */
   struct pipe_query_data_timestamp_disjoint timestamp_disjoint;

   /* PIPE_QUERY_PIPELINE_STATISTICS */
   struct pipe_query_data_pipeline_statistics pipeline_statistics;
};

union pipe_color_union
{
   float f[4];
   int i[4];
   unsigned int ui[4];
};

struct pipe_driver_query_info
{
   const char *name;
   unsigned query_type; /* PIPE_QUERY_DRIVER_SPECIFIC + i */
   uint64_t max_value; /* max value that can be returned */
   boolean uses_byte_units; /* whether the result is in bytes */
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
a190 11
#define PIPE_CLEAR_DEPTH        (1 << 0)
#define PIPE_CLEAR_STENCIL      (1 << 1)
#define PIPE_CLEAR_COLOR0       (1 << 2)
#define PIPE_CLEAR_COLOR1       (1 << 3)
#define PIPE_CLEAR_COLOR2       (1 << 4)
#define PIPE_CLEAR_COLOR3       (1 << 5)
#define PIPE_CLEAR_COLOR4       (1 << 6)
#define PIPE_CLEAR_COLOR5       (1 << 7)
#define PIPE_CLEAR_COLOR6       (1 << 8)
#define PIPE_CLEAR_COLOR7       (1 << 9)
/** Combined flags */
d192 4
a195 4
#define PIPE_CLEAR_COLOR        (PIPE_CLEAR_COLOR0 | PIPE_CLEAR_COLOR1 | \
                                 PIPE_CLEAR_COLOR2 | PIPE_CLEAR_COLOR3 | \
                                 PIPE_CLEAR_COLOR4 | PIPE_CLEAR_COLOR5 | \
                                 PIPE_CLEAR_COLOR6 | PIPE_CLEAR_COLOR7)
d287 1
a287 1
   PIPE_TRANSFER_DISCARD_WHOLE_RESOURCE = (1 << 12),
a288 19
   /**
    * Allows the resource to be used for rendering while mapped.
    *
    * PIPE_RESOURCE_FLAG_MAP_PERSISTENT must be set when creating
    * the resource.
    *
    * If COHERENT is not set, memory_barrier(PIPE_BARRIER_MAPPED_BUFFER)
    * must be called to ensure the device can see what the CPU has written.
    */
   PIPE_TRANSFER_PERSISTENT = (1 << 13),

   /**
    * If PERSISTENT is set, this ensures any writes done by the device are
    * immediately visible to the CPU and vice versa.
    *
    * PIPE_RESOURCE_FLAG_MAP_COHERENT must be set when creating
    * the resource.
    */
   PIPE_TRANSFER_COHERENT = (1 << 14)
a297 5
/**
 * Flags for pipe_context::memory_barrier.
 */
#define PIPE_BARRIER_MAPPED_BUFFER     (1 << 0)

a332 3
 * 
 * The third flag has been added to be able to force textures to be created
 * in linear mode (no tiling).
a335 1
#define PIPE_BIND_LINEAR      (1 << 21)
d340 1
a340 2
#define PIPE_RESOURCE_FLAG_MAP_PERSISTENT (1 << 0)
#define PIPE_RESOURCE_FLAG_MAP_COHERENT   (1 << 1)
a344 1
 * Sorted according to GPU vs CPU access.
d346 6
a351 5
#define PIPE_USAGE_DEFAULT        0 /* fast GPU access */
#define PIPE_USAGE_IMMUTABLE      1 /* fast GPU access, immutable */
#define PIPE_USAGE_DYNAMIC        2 /* uploaded data is used multiple times */
#define PIPE_USAGE_STREAM         3 /* uploaded data is used once */
#define PIPE_USAGE_STAGING        4 /* fast CPU access */
d457 3
d477 1
d511 1
a511 13
   PIPE_CAP_ENDIANNESS = 85,
   PIPE_CAP_MIXED_FRAMEBUFFER_SIZES = 86,
   PIPE_CAP_TGSI_VS_LAYER = 87,
   PIPE_CAP_MAX_GEOMETRY_OUTPUT_VERTICES = 88,
   PIPE_CAP_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 89,
   PIPE_CAP_MAX_TEXTURE_GATHER_COMPONENTS = 90,
   PIPE_CAP_TEXTURE_GATHER_SM5 = 91,
   PIPE_CAP_BUFFER_MAP_PERSISTENT_COHERENT = 92,
   PIPE_CAP_FAKE_SW_MSAA = 93,
   PIPE_CAP_TEXTURE_QUERY_LOD = 94,
   PIPE_CAP_MIN_TEXTURE_GATHER_OFFSET = 95,
   PIPE_CAP_MAX_TEXTURE_GATHER_OFFSET = 96,
   PIPE_CAP_SAMPLE_SHADING = 97,
d569 1
a569 2
   PIPE_SHADER_CAP_TGSI_SQRT_SUPPORTED = 20,
   PIPE_SHADER_CAP_MAX_SAMPLER_VIEWS = 21
d596 1
a596 2
   PIPE_COMPUTE_CAP_MAX_MEM_ALLOC_SIZE,
   PIPE_COMPUTE_CAP_MAX_CLOCK_FREQUENCY
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a352 1
#define PIPE_BIND_COMMAND_ARGS_BUFFER  (1 << 21) /* pipe_draw_info.indirect */
d549 1
a549 1
   PIPE_CAP_TGSI_VS_LAYER_VIEWPORT = 87,
a559 14
   PIPE_CAP_TEXTURE_GATHER_OFFSETS = 98,
   PIPE_CAP_TGSI_VS_WINDOW_SPACE_POSITION = 99,
   PIPE_CAP_MAX_VERTEX_STREAMS = 100,
   PIPE_CAP_DRAW_INDIRECT = 101,
   PIPE_CAP_TGSI_FS_FINE_DERIVATIVE = 102,
   PIPE_CAP_VENDOR_ID = 103,
   PIPE_CAP_DEVICE_ID = 104,
   PIPE_CAP_ACCELERATED = 105,
   PIPE_CAP_VIDEO_MEMORY = 106,
   PIPE_CAP_UMA = 107,
   PIPE_CAP_CONDITIONAL_RENDER_INVERTED = 108,
   PIPE_CAP_MAX_VERTEX_ATTRIB_STRIDE = 109,
   PIPE_CAP_SAMPLER_VIEW_TARGET = 110,
   PIPE_CAP_CLIP_HALFZ = 111,
d581 10
a590 10
   PIPE_CAPF_MAX_LINE_WIDTH,
   PIPE_CAPF_MAX_LINE_WIDTH_AA,
   PIPE_CAPF_MAX_POINT_WIDTH,
   PIPE_CAPF_MAX_POINT_WIDTH_AA,
   PIPE_CAPF_MAX_TEXTURE_ANISOTROPY,
   PIPE_CAPF_MAX_TEXTURE_LOD_BIAS,
   PIPE_CAPF_GUARD_BAND_LEFT,
   PIPE_CAPF_GUARD_BAND_TOP,
   PIPE_CAPF_GUARD_BAND_RIGHT,
   PIPE_CAPF_GUARD_BAND_BOTTOM
d596 11
a606 11
   PIPE_SHADER_CAP_MAX_INSTRUCTIONS, /* if 0, it means the stage is unsupported */
   PIPE_SHADER_CAP_MAX_ALU_INSTRUCTIONS,
   PIPE_SHADER_CAP_MAX_TEX_INSTRUCTIONS,
   PIPE_SHADER_CAP_MAX_TEX_INDIRECTIONS,
   PIPE_SHADER_CAP_MAX_CONTROL_FLOW_DEPTH,
   PIPE_SHADER_CAP_MAX_INPUTS,
   PIPE_SHADER_CAP_MAX_OUTPUTS,
   PIPE_SHADER_CAP_MAX_CONST_BUFFER_SIZE,
   PIPE_SHADER_CAP_MAX_CONST_BUFFERS,
   PIPE_SHADER_CAP_MAX_TEMPS,
   PIPE_SHADER_CAP_MAX_PREDS,
d608 11
a618 12
   PIPE_SHADER_CAP_TGSI_CONT_SUPPORTED,
   PIPE_SHADER_CAP_INDIRECT_INPUT_ADDR,
   PIPE_SHADER_CAP_INDIRECT_OUTPUT_ADDR,
   PIPE_SHADER_CAP_INDIRECT_TEMP_ADDR,
   PIPE_SHADER_CAP_INDIRECT_CONST_ADDR,
   PIPE_SHADER_CAP_SUBROUTINES, /* BGNSUB, ENDSUB, CAL, RET */
   PIPE_SHADER_CAP_INTEGERS,
   PIPE_SHADER_CAP_MAX_TEXTURE_SAMPLERS,
   PIPE_SHADER_CAP_PREFERRED_IR,
   PIPE_SHADER_CAP_TGSI_SQRT_SUPPORTED,
   PIPE_SHADER_CAP_MAX_SAMPLER_VIEWS,
   PIPE_SHADER_CAP_DOUBLES
d627 1
a627 2
   PIPE_SHADER_IR_LLVM,
   PIPE_SHADER_IR_NATIVE
d646 1
a646 3
   PIPE_COMPUTE_CAP_MAX_CLOCK_FREQUENCY,
   PIPE_COMPUTE_CAP_MAX_COMPUTE_UNITS,
   PIPE_COMPUTE_CAP_IMAGES_SUPPORTED
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d353 1
d550 1
a550 1
   PIPE_CAP_TGSI_VS_LAYER = 87,
d561 14
d596 10
a605 10
   PIPE_CAPF_MAX_LINE_WIDTH = 15,
   PIPE_CAPF_MAX_LINE_WIDTH_AA = 16,
   PIPE_CAPF_MAX_POINT_WIDTH = 17,
   PIPE_CAPF_MAX_POINT_WIDTH_AA = 18,
   PIPE_CAPF_MAX_TEXTURE_ANISOTROPY = 19,
   PIPE_CAPF_MAX_TEXTURE_LOD_BIAS = 20,
   PIPE_CAPF_GUARD_BAND_LEFT = 21,
   PIPE_CAPF_GUARD_BAND_TOP = 22,
   PIPE_CAPF_GUARD_BAND_RIGHT = 23,
   PIPE_CAPF_GUARD_BAND_BOTTOM = 24
d611 11
a621 11
   PIPE_SHADER_CAP_MAX_INSTRUCTIONS = 0, /* if 0, it means the stage is unsupported */
   PIPE_SHADER_CAP_MAX_ALU_INSTRUCTIONS = 1,
   PIPE_SHADER_CAP_MAX_TEX_INSTRUCTIONS = 2,
   PIPE_SHADER_CAP_MAX_TEX_INDIRECTIONS = 3,
   PIPE_SHADER_CAP_MAX_CONTROL_FLOW_DEPTH = 4,
   PIPE_SHADER_CAP_MAX_INPUTS = 5,
   PIPE_SHADER_CAP_MAX_CONSTS = 6,
   PIPE_SHADER_CAP_MAX_CONST_BUFFERS = 7,
   PIPE_SHADER_CAP_MAX_TEMPS = 8,
   PIPE_SHADER_CAP_MAX_ADDRS = 9,
   PIPE_SHADER_CAP_MAX_PREDS = 10,
d623 12
a634 11
   PIPE_SHADER_CAP_TGSI_CONT_SUPPORTED = 11,
   PIPE_SHADER_CAP_INDIRECT_INPUT_ADDR = 12,
   PIPE_SHADER_CAP_INDIRECT_OUTPUT_ADDR = 13,
   PIPE_SHADER_CAP_INDIRECT_TEMP_ADDR = 14,
   PIPE_SHADER_CAP_INDIRECT_CONST_ADDR = 15,
   PIPE_SHADER_CAP_SUBROUTINES = 16, /* BGNSUB, ENDSUB, CAL, RET */
   PIPE_SHADER_CAP_INTEGERS = 17,
   PIPE_SHADER_CAP_MAX_TEXTURE_SAMPLERS = 18,
   PIPE_SHADER_CAP_PREFERRED_IR = 19,
   PIPE_SHADER_CAP_TGSI_SQRT_SUPPORTED = 20,
   PIPE_SHADER_CAP_MAX_SAMPLER_VIEWS = 21
d643 2
a644 1
   PIPE_SHADER_IR_LLVM
d663 3
a665 1
   PIPE_COMPUTE_CAP_MAX_CLOCK_FREQUENCY
@


