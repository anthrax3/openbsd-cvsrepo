head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.35;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.01.14;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.06;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.00;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.25;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/**
 * @@file
 * 
 * Screen, Adapter or GPU
 *
 * These are driver functions/facilities that are context independent.
 */


#ifndef P_SCREEN_H
#define P_SCREEN_H


#include "pipe/p_compiler.h"
#include "pipe/p_format.h"
#include "pipe/p_defines.h"
#include "pipe/p_video_enums.h"



#ifdef __cplusplus
extern "C" {
#endif


/** Opaque types */
struct winsys_handle;
struct pipe_fence_handle;
struct pipe_resource;
struct pipe_surface;
struct pipe_transfer;
struct pipe_box;


/**
 * Gallium screen/adapter context.  Basically everything
 * hardware-specific that doesn't actually require a rendering
 * context.
 */
struct pipe_screen {
   void (*destroy)( struct pipe_screen * );

   const char *(*get_name)( struct pipe_screen * );

   const char *(*get_vendor)( struct pipe_screen * );

   /**
    * Query an integer-valued capability/parameter/limit
    * \param param  one of PIPE_CAP_x
    */
   int (*get_param)( struct pipe_screen *, enum pipe_cap param );

   /**
    * Query a float-valued capability/parameter/limit
    * \param param  one of PIPE_CAP_x
    */
   float (*get_paramf)( struct pipe_screen *, enum pipe_capf param );

   /**
    * Query a per-shader-stage integer-valued capability/parameter/limit
    * \param param  one of PIPE_CAP_x
    */
   int (*get_shader_param)( struct pipe_screen *, unsigned shader, enum pipe_shader_cap param );

   /**
    * Query an integer-valued capability/parameter/limit for a codec/profile
    * \param param  one of PIPE_VIDEO_CAP_x
    */
   int (*get_video_param)( struct pipe_screen *,
			   enum pipe_video_profile profile,
			   enum pipe_video_entrypoint entrypoint,
			   enum pipe_video_cap param );

   /**
    * Query a compute-specific capability/parameter/limit.
    * \param param  one of PIPE_COMPUTE_CAP_x
    * \param ret    pointer to a preallocated buffer that will be
    *               initialized to the parameter value, or NULL.
    * \return       size in bytes of the parameter value that would be
    *               returned.
    */
   int (*get_compute_param)(struct pipe_screen *,
			    enum pipe_compute_cap param,
			    void *ret);

   /**
    * Query a timestamp in nanoseconds. The returned value should match
    * PIPE_QUERY_TIMESTAMP. This function returns immediately and doesn't
    * wait for rendering to complete (which cannot be achieved with queries).
    */
   uint64_t (*get_timestamp)(struct pipe_screen *);

   struct pipe_context * (*context_create)( struct pipe_screen *,
					    void *priv );

   /**
    * Check if the given pipe_format is supported as a texture or
    * drawing surface.
    * \param bindings  bitmask of PIPE_BIND_*
    */
   boolean (*is_format_supported)( struct pipe_screen *,
                                   enum pipe_format format,
                                   enum pipe_texture_target target,
                                   unsigned sample_count,
                                   unsigned bindings );

   /**
    * Check if the given pipe_format is supported as output for this codec/profile.
    * \param profile  profile to check, may also be PIPE_VIDEO_PROFILE_UNKNOWN
    */
   boolean (*is_video_format_supported)( struct pipe_screen *,
                                         enum pipe_format format,
                                         enum pipe_video_profile profile,
                                         enum pipe_video_entrypoint entrypoint );

   /**
    * Check if we can actually create the given resource (test the dimension,
    * overall size, etc).  Used to implement proxy textures.
    * \return TRUE if size is OK, FALSE if too large.
    */
   boolean (*can_create_resource)(struct pipe_screen *screen,
                                  const struct pipe_resource *templat);
                               
   /**
    * Create a new texture object, using the given template info.
    */
   struct pipe_resource * (*resource_create)(struct pipe_screen *,
					     const struct pipe_resource *templat);

   /**
    * Create a texture from a winsys_handle. The handle is often created in
    * another process by first creating a pipe texture and then calling
    * resource_get_handle.
    */
   struct pipe_resource * (*resource_from_handle)(struct pipe_screen *,
						  const struct pipe_resource *templat,
						  struct winsys_handle *handle);

   /**
    * Get a winsys_handle from a texture. Some platforms/winsys requires
    * that the texture is created with a special usage flag like
    * DISPLAYTARGET or PRIMARY.
    */
   boolean (*resource_get_handle)(struct pipe_screen *,
				  struct pipe_resource *tex,
				  struct winsys_handle *handle);


   void (*resource_destroy)(struct pipe_screen *,
			    struct pipe_resource *pt);


   /**
    * Do any special operations to ensure frontbuffer contents are
    * displayed, eg copy fake frontbuffer.
    * \param winsys_drawable_handle  an opaque handle that the calling context
    *                                gets out-of-band
    * \param subbox an optional sub region to flush
    */
   void (*flush_frontbuffer)( struct pipe_screen *screen,
                              struct pipe_resource *resource,
                              unsigned level, unsigned layer,
                              void *winsys_drawable_handle,
                              struct pipe_box *subbox );

   /** Set ptr = fence, with reference counting */
   void (*fence_reference)( struct pipe_screen *screen,
                            struct pipe_fence_handle **ptr,
                            struct pipe_fence_handle *fence );

   /**
    * Checks whether the fence has been signalled.
    */
   boolean (*fence_signalled)( struct pipe_screen *screen,
                               struct pipe_fence_handle *fence );

   /**
    * Wait for the fence to finish.
    * \param timeout  in nanoseconds (may be PIPE_TIMEOUT_INFINITE).
    */
   boolean (*fence_finish)( struct pipe_screen *screen,
                            struct pipe_fence_handle *fence,
                            uint64_t timeout );

   /**
    * Returns a driver-specific query.
    *
    * If \p info is NULL, the number of available queries is returned.
    * Otherwise, the driver query at the specified \p index is returned
    * in \p info. The function returns non-zero on success.
    */
   int (*get_driver_query_info)(struct pipe_screen *screen,
                                unsigned index,
                                struct pipe_driver_query_info *info);

};


#ifdef __cplusplus
}
#endif

#endif /* P_SCREEN_H */
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d59 1
d98 1
d140 2
a141 1
                                         enum pipe_video_profile profile );
d185 1
d190 2
a191 3
                              void *winsys_drawable_handle );


@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d44 1
d53 1
a53 1
/** Opaque type */
a54 1
/** Opaque type */
a55 1
struct pipe_winsys;
a66 2
   struct pipe_winsys *winsys;

a68 1

d83 1
a83 1
   float (*get_paramf)( struct pipe_screen *, enum pipe_cap param );
d91 27
d133 16
a177 26
    * Create a buffer that wraps user-space data.
    *
    * Effectively this schedules a delayed call to buffer_create
    * followed by an upload of the data at *some point in the future*,
    * or perhaps never.  Basically the allocate/upload is delayed
    * until the buffer is actually passed to hardware.
    *
    * The intention is to provide a quick way to turn regular data
    * into a buffer, and secondly to avoid a copy operation if that
    * data subsequently turns out to be only accessed by the CPU.
    *
    * Common example is OpenGL vertex buffers that are subsequently
    * processed either by software TNL in the driver or by passing to
    * hardware.
    *
    * XXX: What happens if the delayed call to buffer_create() fails?
    *
    * Note that ptr may be accessed at any time upto the time when the
    * buffer is destroyed, so the data must not be freed before then.
    */
   struct pipe_resource *(*user_buffer_create)(struct pipe_screen *screen,
					       void *ptr,
					       unsigned bytes,
					       unsigned bind_flags);

   /**
d203 1
a203 1
    * \param timeout  in nanoseconds
d208 11
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a101 1
    * \param geom_flags  bitmask of PIPE_TEXTURE_GEOM_*
d107 1
a107 2
                                   unsigned bindings,
                                   unsigned geom_flags );
a183 2
    * \param flags  driver-specific meaning
    * \return zero on success.
d185 2
a186 3
   int (*fence_signalled)( struct pipe_screen *screen,
                           struct pipe_fence_handle *fence,
                           unsigned flags );
d190 1
a190 2
    * \param flags  driver-specific meaning
    * \return zero on success.
d192 3
a194 3
   int (*fence_finish)( struct pipe_screen *screen,
                        struct pipe_fence_handle *fence,
                        unsigned flags );
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d53 2
d57 1
a57 2
struct pipe_buffer;
struct pipe_texture;
a58 1
struct pipe_video_surface;
d81 1
a81 1
   int (*get_param)( struct pipe_screen *, int param );
d87 7
a93 1
   float (*get_paramf)( struct pipe_screen *, int param );
d97 1
a97 1
   
d101 1
a101 1
    * \param tex_usage  bitmask of PIPE_TEXTURE_USAGE_*
d107 2
a108 1
                                   unsigned tex_usage, 
d114 2
a115 2
   struct pipe_texture * (*texture_create)(struct pipe_screen *,
                                           const struct pipe_texture *templat);
d118 7
a124 41
    * Create a new texture object, using the given template info, but on top of
    * existing memory.
    * 
    * It is assumed that the buffer data is layed out according to the expected
    * by the hardware. NULL will be returned if any inconsistency is found.  
    */
   struct pipe_texture * (*texture_blanket)(struct pipe_screen *,
                                            const struct pipe_texture *templat,
                                            const unsigned *stride,
                                            struct pipe_buffer *buffer);

   void (*texture_destroy)(struct pipe_texture *pt);

   /** Get a 2D surface which is a "view" into a texture
    * \param usage  bitmaks of PIPE_BUFFER_USAGE_* read/write flags
    */
   struct pipe_surface *(*get_tex_surface)(struct pipe_screen *,
                                           struct pipe_texture *texture,
                                           unsigned face, unsigned level,
                                           unsigned zslice,
                                           unsigned usage );

   void (*tex_surface_destroy)(struct pipe_surface *);
   

   /** Get a transfer object for transferring data to/from a texture */
   struct pipe_transfer *(*get_tex_transfer)(struct pipe_screen *,
                                             struct pipe_texture *texture,
                                             unsigned face, unsigned level,
                                             unsigned zslice,
                                             enum pipe_transfer_usage usage,
                                             unsigned x, unsigned y,
                                             unsigned w, unsigned h);

   void (*tex_transfer_destroy)(struct pipe_transfer *);
   
   void *(*transfer_map)( struct pipe_screen *,
                          struct pipe_transfer *transfer );

   void (*transfer_unmap)( struct pipe_screen *,
                           struct pipe_transfer *transfer );
d126 12
a138 10
   /**
    * Create a new buffer.
    * \param alignment  buffer start address alignment in bytes
    * \param usage  bitmask of PIPE_BUFFER_USAGE_x
    * \param size  size in bytes
    */
   struct pipe_buffer *(*buffer_create)( struct pipe_screen *screen,
                                         unsigned alignment,
                                         unsigned usage,
                                         unsigned size );
d161 4
a164 93
   struct pipe_buffer *(*user_buffer_create)(struct pipe_screen *screen,
                                             void *ptr,
                                             unsigned bytes);

   /**
    * Allocate storage for a display target surface.
    *
    * Often surfaces which are meant to be blitted to the front screen (i.e.,
    * display targets) must be allocated with special characteristics, memory
    * pools, or obtained directly from the windowing system.
    *
    * This callback is invoked by the pipe_screenwhen creating a texture marked
    * with the PIPE_TEXTURE_USAGE_DISPLAY_TARGET flag  to get the underlying
    * buffer storage.
    */
   struct pipe_buffer *(*surface_buffer_create)(struct pipe_screen *screen,
						unsigned width, unsigned height,
						enum pipe_format format,
						unsigned usage,
						unsigned tex_usage,
						unsigned *stride);


   /**
    * Map the entire data store of a buffer object into the client's address.
    * flags is bitmask of PIPE_BUFFER_USAGE_CPU_READ/WRITE flags.
    */
   void *(*buffer_map)( struct pipe_screen *screen,
			struct pipe_buffer *buf,
			unsigned usage );
   /**
    * Map a subrange of the buffer data store into the client's address space.
    *
    * The returned pointer is always relative to buffer start, regardless of 
    * the specified range. This is different from the ARB_map_buffer_range
    * semantics because we don't forbid multiple mappings of the same buffer
    * (yet).
    */
   void *(*buffer_map_range)( struct pipe_screen *screen,
                              struct pipe_buffer *buf,
                              unsigned offset,
                              unsigned length,
                              unsigned usage);

   /**
    * Notify a range that was actually written into.
    * 
    * Can only be used if the buffer was mapped with the 
    * PIPE_BUFFER_USAGE_CPU_WRITE and PIPE_BUFFER_USAGE_FLUSH_EXPLICIT flags 
    * set.
    * 
    * The range is relative to the buffer start, regardless of the range 
    * specified to buffer_map_range. This is different from the 
    * ARB_map_buffer_range semantics because we don't forbid multiple mappings 
    * of the same buffer (yet).
    * 
    */
   void (*buffer_flush_mapped_range)( struct pipe_screen *screen,
                                      struct pipe_buffer *buf,
                                      unsigned offset,
                                      unsigned length);

   /**
    * Unmap buffer.
    * 
    * If the buffer was mapped with PIPE_BUFFER_USAGE_CPU_WRITE flag but not
    * PIPE_BUFFER_USAGE_FLUSH_EXPLICIT then the pipe driver will
    * assume that the whole buffer was written. This is mostly for backward 
    * compatibility purposes and may affect performance -- the state tracker 
    * should always specify exactly what got written while the buffer was 
    * mapped.
    */
   void (*buffer_unmap)( struct pipe_screen *screen,
                         struct pipe_buffer *buf );

   void (*buffer_destroy)( struct pipe_buffer *buf );

   /**
    * Create a video surface suitable for use as a decoding target by the
    * driver's pipe_video_context.
    */
   struct pipe_video_surface*
   (*video_surface_create)( struct pipe_screen *screen,
                            enum pipe_video_chroma_format chroma_format,
                            unsigned width, unsigned height );

   void (*video_surface_destroy)( struct pipe_video_surface *vsfc );

   /**
    * Do any special operations to ensure buffer size is correct
    */
   void (*update_buffer)( struct pipe_screen *ws,
                          void *context_private );
d169 2
d173 3
a175 2
                              struct pipe_surface *surf,
                              void *context_private );
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a52 2
struct winsys_handle;
/** Opaque type */
d55 2
a56 1
struct pipe_resource;
d58 1
d81 1
a81 1
   int (*get_param)( struct pipe_screen *, enum pipe_cap param );
d87 1
a87 7
   float (*get_paramf)( struct pipe_screen *, enum pipe_cap param );

   /**
    * Query a per-shader-stage integer-valued capability/parameter/limit
    * \param param  one of PIPE_CAP_x
    */
   int (*get_shader_param)( struct pipe_screen *, unsigned shader, enum pipe_shader_cap param );
d91 1
a91 1

d95 1
a95 1
    * \param bindings  bitmask of PIPE_BIND_*
d101 1
a101 2
                                   unsigned sample_count,
                                   unsigned bindings,
d107 2
a108 2
   struct pipe_resource * (*resource_create)(struct pipe_screen *,
					     const struct pipe_resource *templat);
d111 42
a152 7
    * Create a texture from a winsys_handle. The handle is often created in
    * another process by first creating a pipe texture and then calling
    * resource_get_handle.
    */
   struct pipe_resource * (*resource_from_handle)(struct pipe_screen *,
						  const struct pipe_resource *templat,
						  struct winsys_handle *handle);
d155 9
a163 12
    * Get a winsys_handle from a texture. Some platforms/winsys requires
    * that the texture is created with a special usage flag like
    * DISPLAYTARGET or PRIMARY.
    */
   boolean (*resource_get_handle)(struct pipe_screen *,
				  struct pipe_resource *tex,
				  struct winsys_handle *handle);


   void (*resource_destroy)(struct pipe_screen *,
			    struct pipe_resource *pt);

d186 93
a278 4
   struct pipe_resource *(*user_buffer_create)(struct pipe_screen *screen,
					       void *ptr,
					       unsigned bytes,
					       unsigned bind_flags);
a282 2
    * \param winsys_drawable_handle  an opaque handle that the calling context
    *                                gets out-of-band
d285 2
a286 3
                              struct pipe_resource *resource,
                              unsigned level, unsigned layer,
                              void *winsys_drawable_handle );
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a43 1
#include "pipe/p_video_enums.h"
d52 1
a52 1
/** Opaque types */
d54 1
d56 1
d68 2
d72 1
d87 1
a87 1
   float (*get_paramf)( struct pipe_screen *, enum pipe_capf param );
a94 27
   /**
    * Query an integer-valued capability/parameter/limit for a codec/profile
    * \param param  one of PIPE_VIDEO_CAP_x
    */
   int (*get_video_param)( struct pipe_screen *,
			   enum pipe_video_profile profile,
			   enum pipe_video_cap param );

   /**
    * Query a compute-specific capability/parameter/limit.
    * \param param  one of PIPE_COMPUTE_CAP_x
    * \param ret    pointer to a preallocated buffer that will be
    *               initialized to the parameter value, or NULL.
    * \return       size in bytes of the parameter value that would be
    *               returned.
    */
   int (*get_compute_param)(struct pipe_screen *,
			    enum pipe_compute_cap param,
			    void *ret);

   /**
    * Query a timestamp in nanoseconds. The returned value should match
    * PIPE_QUERY_TIMESTAMP. This function returns immediately and doesn't
    * wait for rendering to complete (which cannot be achieved with queries).
    */
   uint64_t (*get_timestamp)(struct pipe_screen *);

d102 1
d108 2
a109 9
                                   unsigned bindings );

   /**
    * Check if the given pipe_format is supported as output for this codec/profile.
    * \param profile  profile to check, may also be PIPE_VIDEO_PROFILE_UNKNOWN
    */
   boolean (*is_video_format_supported)( struct pipe_screen *,
                                         enum pipe_format format,
                                         enum pipe_video_profile profile );
a111 8
    * Check if we can actually create the given resource (test the dimension,
    * overall size, etc).  Used to implement proxy textures.
    * \return TRUE if size is OK, FALSE if too large.
    */
   boolean (*can_create_resource)(struct pipe_screen *screen,
                                  const struct pipe_resource *templat);
                               
   /**
d141 26
d186 2
d189 3
a191 2
   boolean (*fence_signalled)( struct pipe_screen *screen,
                               struct pipe_fence_handle *fence );
d195 2
a196 1
    * \param timeout  in nanoseconds (may be PIPE_TIMEOUT_INFINITE).
d198 3
a200 14
   boolean (*fence_finish)( struct pipe_screen *screen,
                            struct pipe_fence_handle *fence,
                            uint64_t timeout );

   /**
    * Returns a driver-specific query.
    *
    * If \p info is NULL, the number of available queries is returned.
    * Otherwise, the driver query at the specified \p index is returned
    * in \p info. The function returns non-zero on success.
    */
   int (*get_driver_query_info)(struct pipe_screen *screen,
                                unsigned index,
                                struct pipe_driver_query_info *info);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
a58 1
struct pipe_box;
a96 1
			   enum pipe_video_entrypoint entrypoint,
d138 1
a138 2
                                         enum pipe_video_profile profile,
                                         enum pipe_video_entrypoint entrypoint );
a181 1
    * \param subbox an optional sub region to flush
d186 3
a188 2
                              void *winsys_drawable_handle,
                              struct pipe_box *subbox );
@


