head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.39;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.02.20.23.09.55;	author jsg;	state Exp;
branches;
next	1.4;
commitid	4ry2gvZGMXkCUD2n;

1.4
date	2015.01.25.14.41.17;	author jsg;	state Exp;
branches;
next	1.3;
commitid	mcxB0JvoI9gTDYXU;

1.3
date	2014.07.09.21.08.56;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.14.01.58;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.08;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.13.40;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.22;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.09.44;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.46.47;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 2011 LunarG Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Chia-I Wu <olv@@lunarg.com>
 */
#include "target-helpers/inline_debug_helper.h"
#include "target-helpers/inline_sw_helper.h"
#include "egl_pipe.h"

/* for i915 */
#if _EGL_PIPE_I915
#include "i915/drm/i915_drm_public.h"
#include "i915/i915_public.h"
#include "target-helpers/inline_wrapper_sw_helper.h"
#endif
/* for ilo */
#if _EGL_PIPE_ILO
#include "intel/intel_winsys.h"
#include "ilo/ilo_public.h"
#endif
/* for nouveau */
#if _EGL_PIPE_NOUVEAU
#include "nouveau/drm/nouveau_drm_public.h"
#endif
/* for r300 */
#if _EGL_PIPE_R300
#include "radeon/drm/radeon_winsys.h"
#include "radeon/drm/radeon_drm_public.h"
#include "r300/r300_public.h"
#endif
/* for r600 */
#if _EGL_PIPE_R600
#include "radeon/drm/radeon_winsys.h"
#include "radeon/drm/radeon_drm_public.h"
#include "r600/r600_public.h"
#endif
/* for radeonsi */
#if _EGL_PIPE_RADEONSI
#include "radeon/drm/radeon_winsys.h"
#include "radeon/drm/radeon_drm_public.h"
#include "radeonsi/si_public.h"
#endif
/* for vmwgfx */
#if _EGL_PIPE_VMWGFX
#include "svga/drm/svga_drm_public.h"
#include "svga/svga_public.h"
#endif
/* for freedreno */
#if _EGL_PIPE_FREEDRENO
#include "freedreno/drm/freedreno_drm_public.h"
#endif

static struct pipe_screen *
pipe_i915_create_screen(int fd)
{
#if _EGL_PIPE_I915
   struct i915_winsys *iws;
   struct pipe_screen *screen;

   iws = i915_drm_winsys_create(fd);
   if (!iws)
      return NULL;

   screen = i915_screen_create(iws);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_ilo_create_screen(int fd)
{
#if _EGL_PIPE_ILO
   struct intel_winsys *iws;
   struct pipe_screen *screen;

   iws = intel_winsys_create_for_fd(fd);
   if (!iws)
      return NULL;

   screen = ilo_screen_create(iws);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_nouveau_create_screen(int fd)
{
#if _EGL_PIPE_NOUVEAU
   struct pipe_screen *screen;

   screen = nouveau_drm_screen_create(fd);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_r300_create_screen(int fd)
{
#if _EGL_PIPE_R300
   struct radeon_winsys *sws;

   sws = radeon_drm_winsys_create(fd, r300_screen_create);
   return sws ? debug_screen_wrap(sws->screen) : NULL;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_r600_create_screen(int fd)
{
#if _EGL_PIPE_R600
   struct radeon_winsys *rw;

   rw = radeon_drm_winsys_create(fd, r600_screen_create);
   return rw ? debug_screen_wrap(rw->screen) : NULL;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_radeonsi_create_screen(int fd)
{
#if _EGL_PIPE_RADEONSI
   struct radeon_winsys *rw;

   rw = radeon_drm_winsys_create(fd, radeonsi_screen_create);
   return rw ? debug_screen_wrap(rw->screen) : NULL;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_vmwgfx_create_screen(int fd)
{
#if _EGL_PIPE_VMWGFX
   struct svga_winsys_screen *sws;
   struct pipe_screen *screen;

   sws = svga_drm_winsys_screen_create(fd);
   if (!sws)
      return NULL;

   screen = svga_screen_create(sws);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_freedreno_create_screen(int fd)
{
#if _EGL_PIPE_FREEDRENO
   struct pipe_screen *screen;

   screen = fd_drm_screen_create(fd);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

struct pipe_screen *
egl_pipe_create_drm_screen(const char *name, int fd)
{
   if (strcmp(name, "i915") == 0)
      return pipe_i915_create_screen(fd);
   else if (strcmp(name, "i965") == 0)
      return pipe_ilo_create_screen(fd);
   else if (strcmp(name, "nouveau") == 0)
      return pipe_nouveau_create_screen(fd);
   else if (strcmp(name, "r300") == 0)
      return pipe_r300_create_screen(fd);
   else if (strcmp(name, "r600") == 0)
      return pipe_r600_create_screen(fd);
   else if (strcmp(name, "radeonsi") == 0)
      return pipe_radeonsi_create_screen(fd);
   else if (strcmp(name, "vmwgfx") == 0)
      return pipe_vmwgfx_create_screen(fd);
   else if ((strcmp(name, "kgsl") == 0) || (strcmp(name, "msm") == 0))
      return pipe_freedreno_create_screen(fd);
   else
      return NULL;
}

struct pipe_screen *
egl_pipe_create_swrast_screen(struct sw_winsys *ws)
{
   struct pipe_screen *screen;

   screen = sw_screen_create(ws);
   if (screen)
      screen = debug_screen_wrap(screen);

   return screen;
}
@


1.5
log
@Merge Mesa 10.2.9
@
text
@@


1.4
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d31 210
@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@a30 210
/* for i915 */
#if _EGL_PIPE_I915
#include "i915/drm/i915_drm_public.h"
#include "i915/i915_public.h"
#include "target-helpers/inline_wrapper_sw_helper.h"
#endif
/* for ilo */
#if _EGL_PIPE_ILO
#include "intel/intel_winsys.h"
#include "ilo/ilo_public.h"
#endif
/* for nouveau */
#if _EGL_PIPE_NOUVEAU
#include "nouveau/drm/nouveau_drm_public.h"
#endif
/* for r300 */
#if _EGL_PIPE_R300
#include "radeon/drm/radeon_winsys.h"
#include "radeon/drm/radeon_drm_public.h"
#include "r300/r300_public.h"
#endif
/* for r600 */
#if _EGL_PIPE_R600
#include "radeon/drm/radeon_winsys.h"
#include "radeon/drm/radeon_drm_public.h"
#include "r600/r600_public.h"
#endif
/* for radeonsi */
#if _EGL_PIPE_RADEONSI
#include "radeon/drm/radeon_winsys.h"
#include "radeon/drm/radeon_drm_public.h"
#include "radeonsi/si_public.h"
#endif
/* for vmwgfx */
#if _EGL_PIPE_VMWGFX
#include "svga/drm/svga_drm_public.h"
#include "svga/svga_public.h"
#endif
/* for freedreno */
#if _EGL_PIPE_FREEDRENO
#include "freedreno/drm/freedreno_drm_public.h"
#endif

static struct pipe_screen *
pipe_i915_create_screen(int fd)
{
#if _EGL_PIPE_I915
   struct i915_winsys *iws;
   struct pipe_screen *screen;

   iws = i915_drm_winsys_create(fd);
   if (!iws)
      return NULL;

   screen = i915_screen_create(iws);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_ilo_create_screen(int fd)
{
#if _EGL_PIPE_ILO
   struct intel_winsys *iws;
   struct pipe_screen *screen;

   iws = intel_winsys_create_for_fd(fd);
   if (!iws)
      return NULL;

   screen = ilo_screen_create(iws);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_nouveau_create_screen(int fd)
{
#if _EGL_PIPE_NOUVEAU
   struct pipe_screen *screen;

   screen = nouveau_drm_screen_create(fd);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_r300_create_screen(int fd)
{
#if _EGL_PIPE_R300
   struct radeon_winsys *sws;

   sws = radeon_drm_winsys_create(fd, r300_screen_create);
   return sws ? debug_screen_wrap(sws->screen) : NULL;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_r600_create_screen(int fd)
{
#if _EGL_PIPE_R600
   struct radeon_winsys *rw;

   rw = radeon_drm_winsys_create(fd, r600_screen_create);
   return rw ? debug_screen_wrap(rw->screen) : NULL;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_radeonsi_create_screen(int fd)
{
#if _EGL_PIPE_RADEONSI
   struct radeon_winsys *rw;

   rw = radeon_drm_winsys_create(fd, radeonsi_screen_create);
   return rw ? debug_screen_wrap(rw->screen) : NULL;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_vmwgfx_create_screen(int fd)
{
#if _EGL_PIPE_VMWGFX
   struct svga_winsys_screen *sws;
   struct pipe_screen *screen;

   sws = svga_drm_winsys_screen_create(fd);
   if (!sws)
      return NULL;

   screen = svga_screen_create(sws);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_freedreno_create_screen(int fd)
{
#if _EGL_PIPE_FREEDRENO
   struct pipe_screen *screen;

   screen = fd_drm_screen_create(fd);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

struct pipe_screen *
egl_pipe_create_drm_screen(const char *name, int fd)
{
   if (strcmp(name, "i915") == 0)
      return pipe_i915_create_screen(fd);
   else if (strcmp(name, "i965") == 0)
      return pipe_ilo_create_screen(fd);
   else if (strcmp(name, "nouveau") == 0)
      return pipe_nouveau_create_screen(fd);
   else if (strcmp(name, "r300") == 0)
      return pipe_r300_create_screen(fd);
   else if (strcmp(name, "r600") == 0)
      return pipe_r600_create_screen(fd);
   else if (strcmp(name, "radeonsi") == 0)
      return pipe_radeonsi_create_screen(fd);
   else if (strcmp(name, "vmwgfx") == 0)
      return pipe_vmwgfx_create_screen(fd);
   else if ((strcmp(name, "kgsl") == 0) || (strcmp(name, "msm") == 0))
      return pipe_freedreno_create_screen(fd);
   else
      return NULL;
}

@


1.2
log
@Merge Mesa 9.2.0
@
text
@d32 1
d36 1
d38 1
d41 1
d43 1
d45 1
d47 2
d51 1
d53 3
d57 1
d59 5
a63 1
#include "radeonsi/radeonsi_public.h"
d65 1
d68 1
d70 1
d72 1
a142 11
   struct pipe_screen *screen;

   sws = radeon_drm_winsys_create(fd);
   if (!sws)
      return NULL;

   screen = r300_screen_create(sws);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);
d144 2
a145 1
   return screen;
a155 1
   struct pipe_screen *screen;
d157 2
a158 11
   rw = radeon_drm_winsys_create(fd);
   if (!rw)
      return NULL;

   screen = r600_screen_create(rw);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
a168 1
   struct pipe_screen *screen;
d170 2
a171 11
   rw = radeon_drm_winsys_create(fd);
   if (!rw)
      return NULL;

   screen = radeonsi_screen_create(rw);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
d235 1
a235 1
   else if (strcmp(name, "kgsl") == 0)
@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.10
a33 1
/* for i965 */
d35 3
a37 2
#include "i965/drm/i965_drm_public.h"
#include "i965/brw_public.h"
a43 1
#include "r600/drm/r600_drm_public.h"
d45 2
d50 2
d77 1
a77 1
pipe_i965_create_screen(int fd)
d79 2
a80 2
#if _EGL_PIPE_I965
   struct brw_winsys_screen *bws;
d83 2
a84 2
   bws = i965_drm_winsys_screen_create(fd);
   if (!bws)
d87 1
a87 1
   screen = brw_screen_create(bws);
a90 2
   screen = sw_screen_wrap(screen);

d144 1
a144 1
   struct radeon *rw;
d147 1
a147 1
   rw = r600_drm_winsys_create(fd);
d164 23
d209 18
d233 1
a233 1
      return pipe_i965_create_screen(fd);
d240 2
d244 2
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@d3 1
d35 1
d37 2
a38 3
/* for ilo */
#include "intel/intel_winsys.h"
#include "ilo/ilo_public.h"
d45 1
a46 2
/* for radeonsi */
#include "radeonsi/radeonsi_public.h"
a49 2
/* for freedreno */
#include "freedreno/drm/freedreno_drm_public.h"
d75 1
a75 1
pipe_ilo_create_screen(int fd)
d77 2
a78 2
#if _EGL_PIPE_ILO
   struct intel_winsys *iws;
d81 2
a82 2
   iws = intel_winsys_create_for_fd(fd);
   if (!iws)
d85 1
a85 1
   screen = ilo_screen_create(iws);
d89 2
d144 1
a144 1
   struct radeon_winsys *rw;
d147 1
a147 1
   rw = radeon_drm_winsys_create(fd);
a163 23
pipe_radeonsi_create_screen(int fd)
{
#if _EGL_PIPE_RADEONSI
   struct radeon_winsys *rw;
   struct pipe_screen *screen;

   rw = radeon_drm_winsys_create(fd);
   if (!rw)
      return NULL;

   screen = radeonsi_screen_create(rw);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

static struct pipe_screen *
a185 18
static struct pipe_screen *
pipe_freedreno_create_screen(int fd)
{
#if _EGL_PIPE_FREEDRENO
   struct pipe_screen *screen;

   screen = fd_drm_screen_create(fd);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

d192 1
a192 1
      return pipe_ilo_create_screen(fd);
a198 2
   else if (strcmp(name, "radeonsi") == 0)
      return pipe_radeonsi_create_screen(fd);
a200 2
   else if (strcmp(name, "kgsl") == 0)
      return pipe_freedreno_create_screen(fd);
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@a31 1
#if _EGL_PIPE_I915
a34 1
#endif
a35 1
#if _EGL_PIPE_ILO
a37 1
#endif
a38 1
#if _EGL_PIPE_NOUVEAU
a39 1
#endif
a40 2
#if _EGL_PIPE_R300
#include "radeon/drm/radeon_winsys.h"
a42 1
#endif
a43 3
#if _EGL_PIPE_R600
#include "radeon/drm/radeon_winsys.h"
#include "radeon/drm/radeon_drm_public.h"
a44 1
#endif
d46 1
a46 5
#if _EGL_PIPE_RADEONSI
#include "radeon/drm/radeon_winsys.h"
#include "radeon/drm/radeon_drm_public.h"
#include "radeonsi/si_public.h"
#endif
a47 1
#if _EGL_PIPE_VMWGFX
a49 1
#endif
a50 1
#if _EGL_PIPE_FREEDRENO
a51 1
#endif
d122 11
d134 1
a134 2
   sws = radeon_drm_winsys_create(fd, r300_screen_create);
   return sws ? debug_screen_wrap(sws->screen) : NULL;
d145 1
d147 11
a157 2
   rw = radeon_drm_winsys_create(fd, r600_screen_create);
   return rw ? debug_screen_wrap(rw->screen) : NULL;
d168 1
d170 11
a180 2
   rw = radeon_drm_winsys_create(fd, radeonsi_screen_create);
   return rw ? debug_screen_wrap(rw->screen) : NULL;
d244 1
a244 1
   else if ((strcmp(name, "kgsl") == 0) || (strcmp(name, "msm") == 0))
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d31 210
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@a30 210
/* for i915 */
#if _EGL_PIPE_I915
#include "i915/drm/i915_drm_public.h"
#include "i915/i915_public.h"
#include "target-helpers/inline_wrapper_sw_helper.h"
#endif
/* for ilo */
#if _EGL_PIPE_ILO
#include "intel/intel_winsys.h"
#include "ilo/ilo_public.h"
#endif
/* for nouveau */
#if _EGL_PIPE_NOUVEAU
#include "nouveau/drm/nouveau_drm_public.h"
#endif
/* for r300 */
#if _EGL_PIPE_R300
#include "radeon/drm/radeon_winsys.h"
#include "radeon/drm/radeon_drm_public.h"
#include "r300/r300_public.h"
#endif
/* for r600 */
#if _EGL_PIPE_R600
#include "radeon/drm/radeon_winsys.h"
#include "radeon/drm/radeon_drm_public.h"
#include "r600/r600_public.h"
#endif
/* for radeonsi */
#if _EGL_PIPE_RADEONSI
#include "radeon/drm/radeon_winsys.h"
#include "radeon/drm/radeon_drm_public.h"
#include "radeonsi/si_public.h"
#endif
/* for vmwgfx */
#if _EGL_PIPE_VMWGFX
#include "svga/drm/svga_drm_public.h"
#include "svga/svga_public.h"
#endif
/* for freedreno */
#if _EGL_PIPE_FREEDRENO
#include "freedreno/drm/freedreno_drm_public.h"
#endif

static struct pipe_screen *
pipe_i915_create_screen(int fd)
{
#if _EGL_PIPE_I915
   struct i915_winsys *iws;
   struct pipe_screen *screen;

   iws = i915_drm_winsys_create(fd);
   if (!iws)
      return NULL;

   screen = i915_screen_create(iws);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_ilo_create_screen(int fd)
{
#if _EGL_PIPE_ILO
   struct intel_winsys *iws;
   struct pipe_screen *screen;

   iws = intel_winsys_create_for_fd(fd);
   if (!iws)
      return NULL;

   screen = ilo_screen_create(iws);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_nouveau_create_screen(int fd)
{
#if _EGL_PIPE_NOUVEAU
   struct pipe_screen *screen;

   screen = nouveau_drm_screen_create(fd);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_r300_create_screen(int fd)
{
#if _EGL_PIPE_R300
   struct radeon_winsys *sws;

   sws = radeon_drm_winsys_create(fd, r300_screen_create);
   return sws ? debug_screen_wrap(sws->screen) : NULL;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_r600_create_screen(int fd)
{
#if _EGL_PIPE_R600
   struct radeon_winsys *rw;

   rw = radeon_drm_winsys_create(fd, r600_screen_create);
   return rw ? debug_screen_wrap(rw->screen) : NULL;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_radeonsi_create_screen(int fd)
{
#if _EGL_PIPE_RADEONSI
   struct radeon_winsys *rw;

   rw = radeon_drm_winsys_create(fd, radeonsi_screen_create);
   return rw ? debug_screen_wrap(rw->screen) : NULL;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_vmwgfx_create_screen(int fd)
{
#if _EGL_PIPE_VMWGFX
   struct svga_winsys_screen *sws;
   struct pipe_screen *screen;

   sws = svga_drm_winsys_screen_create(fd);
   if (!sws)
      return NULL;

   screen = svga_screen_create(sws);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

static struct pipe_screen *
pipe_freedreno_create_screen(int fd)
{
#if _EGL_PIPE_FREEDRENO
   struct pipe_screen *screen;

   screen = fd_drm_screen_create(fd);
   if (!screen)
      return NULL;

   screen = debug_screen_wrap(screen);

   return screen;
#else
   return NULL;
#endif
}

struct pipe_screen *
egl_pipe_create_drm_screen(const char *name, int fd)
{
   if (strcmp(name, "i915") == 0)
      return pipe_i915_create_screen(fd);
   else if (strcmp(name, "i965") == 0)
      return pipe_ilo_create_screen(fd);
   else if (strcmp(name, "nouveau") == 0)
      return pipe_nouveau_create_screen(fd);
   else if (strcmp(name, "r300") == 0)
      return pipe_r300_create_screen(fd);
   else if (strcmp(name, "r600") == 0)
      return pipe_r600_create_screen(fd);
   else if (strcmp(name, "radeonsi") == 0)
      return pipe_radeonsi_create_screen(fd);
   else if (strcmp(name, "vmwgfx") == 0)
      return pipe_vmwgfx_create_screen(fd);
   else if ((strcmp(name, "kgsl") == 0) || (strcmp(name, "msm") == 0))
      return pipe_freedreno_create_screen(fd);
   else
      return NULL;
}

@


