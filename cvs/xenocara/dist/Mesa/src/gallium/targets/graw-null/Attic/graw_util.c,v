head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.39;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2013.09.05.14.02.01;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.08;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.30;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.13.48;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@
#include "pipe/p_compiler.h"
#include "pipe/p_context.h"
#include "pipe/p_shader_tokens.h"
#include "pipe/p_state.h"
#include "tgsi/tgsi_text.h"
#include "util/u_debug.h"
#include "util/u_memory.h"
#include "state_tracker/graw.h"


/* Helper functions.  These are the same for all graw implementations.
 */
PUBLIC void *
graw_parse_geometry_shader(struct pipe_context *pipe,
                           const char *text)
{
   struct tgsi_token tokens[1024];
   struct pipe_shader_state state;

   if (!tgsi_text_translate(text, tokens, Elements(tokens)))
      return NULL;

   memset(&state, 0, sizeof state);
   state.tokens = tokens;
   return pipe->create_gs_state(pipe, &state);
}

PUBLIC void *
graw_parse_vertex_shader(struct pipe_context *pipe,
                         const char *text)
{
   struct tgsi_token tokens[1024];
   struct pipe_shader_state state;

   if (!tgsi_text_translate(text, tokens, Elements(tokens)))
      return NULL;

   memset(&state, 0, sizeof state);
   state.tokens = tokens;
   return pipe->create_vs_state(pipe, &state);
}

PUBLIC void *
graw_parse_fragment_shader(struct pipe_context *pipe,
                           const char *text)
{
   struct tgsi_token tokens[1024];
   struct pipe_shader_state state;

   if (!tgsi_text_translate(text, tokens, Elements(tokens)))
      return NULL;

   memset(&state, 0, sizeof state);
   state.tokens = tokens;
   return pipe->create_fs_state(pipe, &state);
}

static char out_filename[256] = "";

PUBLIC boolean
graw_parse_args(int *argi,
                int argc,
                char *argv[])
{
   if (strcmp(argv[*argi], "-o") == 0) {
      if (*argi + 1 >= argc) {
         return FALSE;
      }

      strncpy(out_filename, argv[*argi + 1], sizeof(out_filename) - 1);
      out_filename[sizeof(out_filename) - 1] = '\0';
      *argi += 2;
      return TRUE;
   }

   return FALSE;
}

PUBLIC boolean
graw_save_surface_to_file(struct pipe_context *pipe,
                          struct pipe_surface *surface,
                          const char *filename)
{
   if (!filename || !*filename) {
      filename = out_filename;
      if (!filename || !*filename) {
         return FALSE;
      }
   }

   /* XXX: Make that working in release builds.
    */
   debug_dump_surface_bmp(pipe, filename, surface);
   return TRUE;
}
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d24 1
d39 1
d54 1
@


1.1
log
@Initial revision
@
text
@d4 1
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a3 1
#include "pipe/p_shader_tokens.h"
a22 1
   memset(&state, 0, sizeof state);
a36 1
   memset(&state, 0, sizeof state);
a50 1
   memset(&state, 0, sizeof state);
@

