head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.0.22
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.20
	OPENBSD_5_7_BASE:1.1
	v10_2_9:1.1.1.1
	v10_4_3:1.1.1.1
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.1.0.18
	OPENBSD_5_6_BASE:1.1
	v10_2_3:1.1.1.1
	OPENBSD_5_5:1.1.0.16
	OPENBSD_5_5_BASE:1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	OPENBSD_5_4:1.1.0.14
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.12.23.05.17.46;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2010.05.22.20.06.14;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.34;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@AppleSGLX Release Notes

o OpenGL Support

AppleSGLX supports the same version of OpenGL as Leopard (OpenGL 2.1).
Many extensions from the OpenGL framework are now builtin.

This adds support for GLSL, and a variety of other features.

o Thread Support

Thread support has been improved since the libGL in XQuartz 2.3.2.1.

o GLX 1.4 Support

The GLX 1.3 and 1.4 functions should all work with a few exceptions
as outlined in this document.

o glXMakeContextCurrent (a GLX 1.3 feature)

glXMakeContextCurrent should work with the readable drawable.  The
OpenGL functions: glReadPixels, glCopyPixels, and glCopyColorTable, 
should use the readable drawable if it's different than the rendering 
drawable.

o glXGetProcAddress (a GLX 1.4 feature and ARB extension)

glXGetProcAddress should work and allow getting the address of any 
extension functions you may need from the X11 libGL, or OpenGL framework
libGL.  Previous versions of the X11 libGL didn't allow getting the newer 
OpenGL framework addresses.

o GLXPixmaps

New support for GLXPixmaps works well with mixed X11 and OpenGL drawing
operations.  You can create them using glXCreateGLXPixmap or
glXCreatePixmap.

o GLXPbuffers

Support for GLXPbuffers has been added.  These are drawables that are
not possible to render to with X11, which is allowed by the spec.
A GLXPbuffer will never generate a clobber event, however 
glXSelectEvent and glXGetSelectedEvent should operate normally.

Clobber events are not generated due to low-level architectural
differences.  The contents of your pbuffers will not be clobbered.

o Shared Contexts

Due to basic low-level architectural differences the usage of shared 
contexts requires a similar visual or GLXFBConfig be used in the 
creation of a shared context.  It's best if you specify the same
visual.  This is due to a CGL design difference, and not something 
that is easily worked around.  UPDATE: some changes made seem to
help resolve this issue in many cases, so you may be able to use a
shared context without this restriction.


o Indirect

The X server supports indirect fairly well, so OpenGL applications
can be run remotely and displayed by XQuartz.  This means you can run
applications from a remote host on an XQuartz X server.

AppleSGLX does not support indirect rendering.  Any indirect context
created will appear to glXIsDirect as an indirect context, but it
does not actually support indirect rendering to a remote X server.

AppleSGLX supports GLXPixmaps and GLXPbuffers with direct and indirect
contexts, though they are all direct contexts by definition (see above).
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@

