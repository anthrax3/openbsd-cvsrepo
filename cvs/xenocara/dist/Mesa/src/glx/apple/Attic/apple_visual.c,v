head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.46;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.20;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.58;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.03.46;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.13;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.38;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.14;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.34;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.44;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.35;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.44;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.52;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (c) 2008, 2009 Apple Inc.
 
 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software and associated documentation files
 (the "Software"), to deal in the Software without restriction,
 including without limitation the rights to use, copy, modify, merge,
 publish, distribute, sublicense, and/or sell copies of the Software,
 and to permit persons to whom the Software is furnished to do so,
 subject to the following conditions:
 
 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT.  IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT
 HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 DEALINGS IN THE SOFTWARE.
 
 Except as contained in this notice, the name(s) of the above
 copyright holders shall not be used in advertising or otherwise to
 promote the sale, use or other dealings in this Software without
 prior written authorization.
*/

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <GL/gl.h>

/* <rdar://problem/6953344> */
#define glTexImage1D glTexImage1D_OSX
#define glTexImage2D glTexImage2D_OSX
#define glTexImage3D glTexImage3D_OSX
#include <OpenGL/OpenGL.h>
#include <OpenGL/CGLContext.h>
#include <OpenGL/CGLRenderers.h>
#include <OpenGL/CGLTypes.h>
#undef glTexImage1D
#undef glTexImage2D
#undef glTexImage3D

#ifndef kCGLPFAOpenGLProfile
#define kCGLPFAOpenGLProfile 99
#endif

#ifndef kCGLOGLPVersion_3_2_Core
#define kCGLOGLPVersion_3_2_Core 0x3200
#endif

#include "apple_cgl.h"
#include "apple_visual.h"
#include "apple_glx.h"
#include "glxconfig.h"

enum
{
   MAX_ATTR = 60
};

void
apple_visual_create_pfobj(CGLPixelFormatObj * pfobj, const struct glx_config * mode,
                          bool * double_buffered, bool * uses_stereo,
                          bool offscreen)
{
   CGLPixelFormatAttribute attr[MAX_ATTR];
   int numattr = 0;
   GLint vsref = 0;
   CGLError error = 0;

   /* Request an OpenGL 3.2 profile if one is available and supported */
   attr[numattr++] = kCGLPFAOpenGLProfile;
   attr[numattr++] = kCGLOGLPVersion_3_2_Core;

   /* Test for kCGLPFAOpenGLProfile support at runtime and roll it out if not supported */
   attr[numattr] = 0;
   error = apple_cgl.choose_pixel_format(attr, pfobj, &vsref);
   if (error == kCGLBadAttribute)
      numattr -= 2;

   if (offscreen) {
      apple_glx_diagnostic
         ("offscreen rendering enabled.  Using kCGLPFAOffScreen\n");

      attr[numattr++] = kCGLPFAOffScreen;
      attr[numattr++] = kCGLPFAColorSize;
      attr[numattr++] = 32;
   }
   else if (getenv("LIBGL_ALWAYS_SOFTWARE") != NULL) {
      apple_glx_diagnostic
         ("Software rendering requested.  Using kCGLRendererGenericFloatID.\n");
      attr[numattr++] = kCGLPFARendererID;
      attr[numattr++] = kCGLRendererGenericFloatID;
   }
   else if (getenv("LIBGL_ALLOW_SOFTWARE") != NULL) {
      apple_glx_diagnostic
         ("Software rendering is not being excluded.  Not using kCGLPFAAccelerated.\n");
   }
   else {
      attr[numattr++] = kCGLPFAAccelerated;
   }

   /* 
    * The program chose a config based on the fbconfigs or visuals.
    * Those are based on the attributes from CGL, so we probably
    * do want the closest match for the color, depth, and accum.
    */
   attr[numattr++] = kCGLPFAClosestPolicy;

   if (mode->stereoMode) {
      attr[numattr++] = kCGLPFAStereo;
      *uses_stereo = true;
   }
   else {
      *uses_stereo = false;
   }

   if (!offscreen && mode->doubleBufferMode) {
      attr[numattr++] = kCGLPFADoubleBuffer;
      *double_buffered = true;
   }
   else {
      *double_buffered = false;
   }

   attr[numattr++] = kCGLPFAColorSize;
   attr[numattr++] = mode->redBits + mode->greenBits + mode->blueBits;
   attr[numattr++] = kCGLPFAAlphaSize;
   attr[numattr++] = mode->alphaBits;

   if ((mode->accumRedBits + mode->accumGreenBits + mode->accumBlueBits) > 0) {
      attr[numattr++] = kCGLPFAAccumSize;
      attr[numattr++] = mode->accumRedBits + mode->accumGreenBits +
         mode->accumBlueBits + mode->accumAlphaBits;
   }

   if (mode->depthBits > 0) {
      attr[numattr++] = kCGLPFADepthSize;
      attr[numattr++] = mode->depthBits;
   }

   if (mode->stencilBits > 0) {
      attr[numattr++] = kCGLPFAStencilSize;
      attr[numattr++] = mode->stencilBits;
   }

   if (mode->sampleBuffers > 0) {
      attr[numattr++] = kCGLPFAMultisample;
      attr[numattr++] = kCGLPFASampleBuffers;
      attr[numattr++] = mode->sampleBuffers;
      attr[numattr++] = kCGLPFASamples;
      attr[numattr++] = mode->samples;
   }

   attr[numattr++] = 0;

   assert(numattr < MAX_ATTR);

   error = apple_cgl.choose_pixel_format(attr, pfobj, &vsref);

   if (error) {
      fprintf(stderr, "error: %s\n", apple_cgl.error_string(error));
      abort();
   }
}
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a65 10
static char __crashreporter_info_buff__[4096] = { 0 };
static const char *__crashreporter_info__ __attribute__((__used__)) =
    &__crashreporter_info_buff__[0];
#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1050
// This is actually a toolchain requirement, but I'm not sure the correct check,
// but it should be fine to just only include it for Leopard and later.  This line
// just tells the linker to never strip this symbol (such as for space optimization)
__asm__ (".desc ___crashreporter_info__, 0x10");
#endif

d75 10
a84 1
   bool use_core_profile = getenv("LIBGL_PROFILE_CORE");
d91 2
a159 6
   /* Debugging support for Core profiles to support newer versions of OpenGL */
   if (use_core_profile) {
      attr[numattr++] = kCGLPFAOpenGLProfile;
      attr[numattr++] = kCGLOGLPVersion_3_2_Core;
   }

a165 13
   if ((error == kCGLBadAttribute || vsref == 0) && use_core_profile) {
      apple_glx_diagnostic
         ("Trying again without CoreProfile: error=%s, vsref=%d\n", apple_cgl.error_string(error), vsref);

      if (!error)
         apple_cgl.destroy_pixel_format(*pfobj);

      numattr -= 3;
      attr[numattr++] = 0;

      error = apple_cgl.choose_pixel_format(attr, pfobj, &vsref);
   }

d167 1
a167 10
      snprintf(__crashreporter_info_buff__, sizeof(__crashreporter_info_buff__),
               "CGLChoosePixelFormat error: %s\n", apple_cgl.error_string(error));
      fprintf(stderr, "%s", __crashreporter_info_buff__);
      abort();
   }

   if (!*pfobj) {
      snprintf(__crashreporter_info_buff__, sizeof(__crashreporter_info_buff__),
               "No matching pixelformats found, perhaps try using LIBGL_ALLOW_SOFTWARE\n");
      fprintf(stderr, "%s", __crashreporter_info_buff__);
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d66 10
d85 1
a85 10

   /* Request an OpenGL 3.2 profile if one is available and supported */
   attr[numattr++] = kCGLPFAOpenGLProfile;
   attr[numattr++] = kCGLOGLPVersion_3_2_Core;

   /* Test for kCGLPFAOpenGLProfile support at runtime and roll it out if not supported */
   attr[numattr] = 0;
   error = apple_cgl.choose_pixel_format(attr, pfobj, &vsref);
   if (error == kCGLBadAttribute)
      numattr -= 2;
a91 2
      attr[numattr++] = kCGLPFAColorSize;
      attr[numattr++] = 32;
d159 6
d171 13
d185 10
a194 1
      fprintf(stderr, "error: %s\n", apple_cgl.error_string(error));
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d76 9
a84 5
   /* Request an OpenGL 3.2 profile if one is available */
   if(apple_cgl.version_major > 1 || (apple_cgl.version_major == 1 && apple_cgl.version_minor >= 3)) {
      attr[numattr++] = kCGLPFAOpenGLProfile;
      attr[numattr++] = kCGLOGLPVersion_3_2_Core;
   }
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d119 1
a119 1
   if (mode->doubleBufferMode) {
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d43 1
d48 8
a65 1
/*mode is a __GlcontextModes*/
d67 1
a67 1
apple_visual_create_pfobj(CGLPixelFormatObj * pfobj, const void *mode,
a71 1
   const struct glx_config *c = mode;
d76 6
d111 1
a111 1
   if (c->stereoMode) {
d119 1
a119 1
   if (c->doubleBufferMode) {
d128 1
a128 1
   attr[numattr++] = c->redBits + c->greenBits + c->blueBits;
d130 1
a130 1
   attr[numattr++] = c->alphaBits;
d132 1
a132 1
   if ((c->accumRedBits + c->accumGreenBits + c->accumBlueBits) > 0) {
d134 2
a135 2
      attr[numattr++] = c->accumRedBits + c->accumGreenBits +
         c->accumBlueBits + c->accumAlphaBits;
d138 1
a138 1
   if (c->depthBits > 0) {
d140 1
a140 1
      attr[numattr++] = c->depthBits;
d143 1
a143 1
   if (c->stencilBits > 0) {
d145 1
a145 1
      attr[numattr++] = c->stencilBits;
d148 1
a148 1
   if (c->sampleBuffers > 0) {
d151 1
a151 1
      attr[numattr++] = c->sampleBuffers;
d153 1
a153 1
      attr[numattr++] = c->samples;
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d50 1
a50 1
#include "glcontextmodes.h"
d64 1
a64 1
   const __GLcontextModes *c = mode;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d50 1
a50 1
#include "glxconfig.h"
d64 1
a64 1
   const struct glx_config *c = mode;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a42 1
#include <OpenGL/CGLTypes.h>
a46 8
#ifndef kCGLPFAOpenGLProfile
#define kCGLPFAOpenGLProfile 99
#endif

#ifndef kCGLOGLPVersion_3_2_Core
#define kCGLOGLPVersion_3_2_Core 0x3200
#endif

d57 1
d59 1
a59 1
apple_visual_create_pfobj(CGLPixelFormatObj * pfobj, const struct glx_config * mode,
d64 1
a68 6
   /* Request an OpenGL 3.2 profile if one is available */
   if(apple_cgl.version_major > 1 || (apple_cgl.version_major == 1 && apple_cgl.version_minor >= 3)) {
      attr[numattr++] = kCGLPFAOpenGLProfile;
      attr[numattr++] = kCGLOGLPVersion_3_2_Core;
   }

d98 1
a98 1
   if (mode->stereoMode) {
d106 1
a106 1
   if (!offscreen && mode->doubleBufferMode) {
d115 1
a115 1
   attr[numattr++] = mode->redBits + mode->greenBits + mode->blueBits;
d117 1
a117 1
   attr[numattr++] = mode->alphaBits;
d119 1
a119 1
   if ((mode->accumRedBits + mode->accumGreenBits + mode->accumBlueBits) > 0) {
d121 2
a122 2
      attr[numattr++] = mode->accumRedBits + mode->accumGreenBits +
         mode->accumBlueBits + mode->accumAlphaBits;
d125 1
a125 1
   if (mode->depthBits > 0) {
d127 1
a127 1
      attr[numattr++] = mode->depthBits;
d130 1
a130 1
   if (mode->stencilBits > 0) {
d132 1
a132 1
      attr[numattr++] = mode->stencilBits;
d135 1
a135 1
   if (mode->sampleBuffers > 0) {
d138 1
a138 1
      attr[numattr++] = mode->sampleBuffers;
d140 1
a140 1
      attr[numattr++] = mode->samples;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d76 5
a80 9
   /* Request an OpenGL 3.2 profile if one is available and supported */
   attr[numattr++] = kCGLPFAOpenGLProfile;
   attr[numattr++] = kCGLOGLPVersion_3_2_Core;

   /* Test for kCGLPFAOpenGLProfile support at runtime and roll it out if not supported */
   attr[numattr] = 0;
   error = apple_cgl.choose_pixel_format(attr, pfobj, &vsref);
   if (error == kCGLBadAttribute)
      numattr -= 2;
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a65 10
static char __crashreporter_info_buff__[4096] = { 0 };
static const char *__crashreporter_info__ __attribute__((__used__)) =
    &__crashreporter_info_buff__[0];
#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1050
// This is actually a toolchain requirement, but I'm not sure the correct check,
// but it should be fine to just only include it for Leopard and later.  This line
// just tells the linker to never strip this symbol (such as for space optimization)
__asm__ (".desc ___crashreporter_info__, 0x10");
#endif

d75 10
a84 1
   bool use_core_profile = getenv("LIBGL_PROFILE_CORE");
d91 2
a159 6
   /* Debugging support for Core profiles to support newer versions of OpenGL */
   if (use_core_profile) {
      attr[numattr++] = kCGLPFAOpenGLProfile;
      attr[numattr++] = kCGLOGLPVersion_3_2_Core;
   }

a165 13
   if ((error == kCGLBadAttribute || vsref == 0) && use_core_profile) {
      apple_glx_diagnostic
         ("Trying again without CoreProfile: error=%s, vsref=%d\n", apple_cgl.error_string(error), vsref);

      if (!error)
         apple_cgl.destroy_pixel_format(*pfobj);

      numattr -= 3;
      attr[numattr++] = 0;

      error = apple_cgl.choose_pixel_format(attr, pfobj, &vsref);
   }

d167 1
a167 10
      snprintf(__crashreporter_info_buff__, sizeof(__crashreporter_info_buff__),
               "CGLChoosePixelFormat error: %s\n", apple_cgl.error_string(error));
      fprintf(stderr, "%s", __crashreporter_info_buff__);
      abort();
   }

   if (!*pfobj) {
      snprintf(__crashreporter_info_buff__, sizeof(__crashreporter_info_buff__),
               "No matching pixelformats found, perhaps try using LIBGL_ALLOW_SOFTWARE\n");
      fprintf(stderr, "%s", __crashreporter_info_buff__);
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d66 10
d85 1
a85 10

   /* Request an OpenGL 3.2 profile if one is available and supported */
   attr[numattr++] = kCGLPFAOpenGLProfile;
   attr[numattr++] = kCGLOGLPVersion_3_2_Core;

   /* Test for kCGLPFAOpenGLProfile support at runtime and roll it out if not supported */
   attr[numattr] = 0;
   error = apple_cgl.choose_pixel_format(attr, pfobj, &vsref);
   if (error == kCGLBadAttribute)
      numattr -= 2;
a91 2
      attr[numattr++] = kCGLPFAColorSize;
      attr[numattr++] = 32;
d159 6
d171 13
d185 10
a194 1
      fprintf(stderr, "error: %s\n", apple_cgl.error_string(error));
@


