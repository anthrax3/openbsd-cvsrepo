head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.16
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.14
	OPENBSD_5_7_BASE:1.2
	v10_2_9:1.1.1.1
	v10_4_3:1.1.1.1
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	v10_2_3:1.1.1.1
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.12.23.05.17.46;	author jsg;	state dead;
branches;
next	1.2;
commitid	TnlogFl9nOv2eaRf;

1.2
date	2011.10.23.13.37.38;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.14;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.34;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove the now unused Mesa 10.2.9 code
@
text
@#include "glxclient.h"
#include "glxextensions.h"
#include "glxconfig.h"

/*
** GLX_SGI_swap_control
*/
int
glXSwapIntervalSGI(int interval)
{
   (void) interval;
   return 0;
}


/*
** GLX_MESA_swap_control
*/
int
glXSwapIntervalMESA(unsigned int interval)
{
   (void) interval;
   return GLX_BAD_CONTEXT;
}


int
glXGetSwapIntervalMESA(void)
{
   return 0;
}


/*
** GLX_SGI_video_sync
*/
int
glXGetVideoSyncSGI(unsigned int *count)
{
   (void) count;
   return GLX_BAD_CONTEXT;
}

int
glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int *count)
{
   (void) count;
   return GLX_BAD_CONTEXT;
}


/*
** GLX_SGIX_swap_group
*/
void
glXJoinSwapGroupSGIX(Display * dpy, GLXDrawable drawable, GLXDrawable member)
{
   (void) dpy;
   (void) drawable;
   (void) member;
}


/*
** GLX_SGIX_swap_barrier
*/
void
glXBindSwapBarrierSGIX(Display * dpy, GLXDrawable drawable, int barrier)
{
   (void) dpy;
   (void) drawable;
   (void) barrier;
}

Bool
glXQueryMaxSwapBarriersSGIX(Display * dpy, int screen, int *max)
{
   (void) dpy;
   (void) screen;
   (void) max;
   return False;
}


/*
** GLX_OML_sync_control
*/
Bool
glXGetSyncValuesOML(Display * dpy, GLXDrawable drawable,
                    int64_t * ust, int64_t * msc, int64_t * sbc)
{
   (void) dpy;
   (void) drawable;
   (void) ust;
   (void) msc;
   (void) sbc;
   return False;
}

int64_t
glXSwapBuffersMscOML(Display * dpy, GLXDrawable drawable,
                     int64_t target_msc, int64_t divisor, int64_t remainder)
{
   (void) dpy;
   (void) drawable;
   (void) target_msc;
   (void) divisor;
   (void) remainder;
   return 0;
}


Bool
glXWaitForMscOML(Display * dpy, GLXDrawable drawable,
                 int64_t target_msc, int64_t divisor,
                 int64_t remainder, int64_t * ust,
                 int64_t * msc, int64_t * sbc)
{
   (void) dpy;
   (void) drawable;
   (void) target_msc;
   (void) divisor;
   (void) remainder;
   (void) ust;
   (void) msc;
   (void) sbc;
   return False;
}


Bool
glXWaitForSbcOML(Display * dpy, GLXDrawable drawable,
                 int64_t target_sbc, int64_t * ust,
                 int64_t * msc, int64_t * sbc)
{
   (void) dpy;
   (void) drawable;
   (void) target_sbc;
   (void) ust;
   (void) msc;
   (void) sbc;
   return False;
}


Bool
glXReleaseBuffersMESA(Display * dpy, GLXDrawable d)
{
   (void) dpy;
   (void) d;
   return False;
}


_X_EXPORT GLXPixmap
glXCreateGLXPixmapMESA(Display * dpy, XVisualInfo * visual,
                       Pixmap pixmap, Colormap cmap)
{
   (void) dpy;
   (void) visual;
   (void) pixmap;
   (void) cmap;
   return 0;
}


/**
 * GLX_MESA_copy_sub_buffer
 */
void
glXCopySubBufferMESA(Display * dpy, GLXDrawable drawable,
                     int x, int y, int width, int height)
{
   (void) dpy;
   (void) drawable;
   (void) x;
   (void) y;
   (void) width;
   (void) height;
}


_X_EXPORT int
glXQueryGLXPbufferSGIX(Display * dpy, GLXDrawable drawable,
                       int attribute, unsigned int *value)
{
   (void) dpy;
   (void) drawable;
   (void) attribute;
   (void) value;
   return 0;
}

_X_EXPORT GLXDrawable
glXCreateGLXPbufferSGIX(Display * dpy, GLXFBConfig config,
                        unsigned int width, unsigned int height,
                        int *attrib_list)
{
   (void) dpy;
   (void) config;
   (void) width;
   (void) height;
   (void) attrib_list;
   return None;
}

#if 0
/* GLX_SGIX_fbconfig */
_X_EXPORT int
glXGetFBConfigAttribSGIX(Display * dpy, void *config, int a, int *b)
{
   (void) dpy;
   (void) config;
   (void) a;
   (void) b;
   return 0;
}

_X_EXPORT void *
glXChooseFBConfigSGIX(Display * dpy, int a, int *b, int *c)
{
   (void) dpy;
   (void) a;
   (void) b;
   (void) c;
   return NULL;
}

_X_EXPORT GLXPixmap
glXCreateGLXPixmapWithConfigSGIX(Display * dpy, void *config, Pixmap p)
{
   (void) dpy;
   (void) config;
   (void) p;
   return None;
}

_X_EXPORT GLXContext
glXCreateContextWithConfigSGIX(Display * dpy, void *config, int a,
                               GLXContext b, Bool c)
{
   (void) dpy;
   (void) config;
   (void) a;
   (void) b;
   (void) c;
   return NULL;
}

_X_EXPORT XVisualInfo *
glXGetVisualFromFBConfigSGIX(Display * dpy, void *config)
{
   (void) dpy;
   (void) config;
   return NULL;
}

_X_EXPORT void *
glXGetFBConfigFromVisualSGIX(Display * dpy, XVisualInfo * visinfo)
{
   (void) dpy;
   (void) visinfo;
   return NULL;
}
#endif


_X_EXPORT
GLX_ALIAS_VOID(glXDestroyGLXPbufferSGIX,
               (Display * dpy, GLXDrawable pbuf),
               (dpy, pbuf), glXDestroyPbuffer)

     _X_EXPORT GLX_ALIAS_VOID(glXSelectEventSGIX,
                           (Display * dpy, GLXDrawable drawable,
                            unsigned long mask), (dpy, drawable, mask),
                           glXSelectEvent)

     _X_EXPORT GLX_ALIAS_VOID(glXGetSelectedEventSGIX,
                           (Display * dpy, GLXDrawable drawable,
                            unsigned long *mask), (dpy, drawable, mask),
                           glXGetSelectedEvent)
@


1.2
log
@Merge Mesa 7.10.3
@
text
@@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d3 1
a3 1
#include "glcontextmodes.h"
a34 48
** GLX_MESA_swap_frame_usage
*/

int
glXBeginFrameTrackingMESA(Display * dpy, GLXDrawable drawable)
{
   int status = GLX_BAD_CONTEXT;
   (void) dpy;
   (void) drawable;
   return status;
}


int
glXEndFrameTrackingMESA(Display * dpy, GLXDrawable drawable)
{
   int status = GLX_BAD_CONTEXT;
   (void) dpy;
   (void) drawable;
   return status;
}


int
glXGetFrameUsageMESA(Display * dpy, GLXDrawable drawable, GLfloat * usage)
{
   int status = GLX_BAD_CONTEXT;
   (void) dpy;
   (void) drawable;
   (void) usage;
   return status;
}

int
glXQueryFrameTrackingMESA(Display * dpy, GLXDrawable drawable,
                          int64_t * sbc, int64_t * missedFrames,
                          GLfloat * lastMissedUsage)
{
   int status = GLX_BAD_CONTEXT;
   (void) dpy;
   (void) drawable;
   (void) sbc;
   (void) missedFrames;
   (void) lastMissedUsage;
   return status;
}

/*
a145 46
/**
 * GLX_MESA_allocate_memory
 */
/*@@{*/

PUBLIC void *
glXAllocateMemoryMESA(Display * dpy, int scrn,
                      size_t size, float readFreq,
                      float writeFreq, float priority)
{
   (void) dpy;
   (void) scrn;
   (void) size;
   (void) readFreq;
   (void) writeFreq;
   (void) priority;
   return NULL;
}


PUBLIC void
glXFreeMemoryMESA(Display * dpy, int scrn, void *pointer)
{
#ifdef __DRI_ALLOCATE
   __GLXscreenConfigs *const psc = GetGLXScreenConfigs(dpy, scrn);

   if (psc && psc->allocate)
      (*psc->allocate->freeMemory) (psc->__driScreen, pointer);

#else
   (void) dpy;
   (void) scrn;
   (void) pointer;
#endif /* __DRI_ALLOCATE */
}


PUBLIC GLuint
glXGetMemoryOffsetMESA(Display * dpy, int scrn, const void *pointer)
{
   (void) dpy;
   (void) scrn;
   (void) pointer;
   return ~0L;
}

d155 1
a155 1
PUBLIC GLXPixmap
d183 1
a183 1
PUBLIC int
d194 1
a194 1
PUBLIC GLXDrawable
d209 1
a209 1
PUBLIC int
d219 1
a219 1
PUBLIC void *
d229 1
a229 1
PUBLIC GLXPixmap
d238 1
a238 1
PUBLIC GLXContext
d250 1
a250 1
PUBLIC XVisualInfo *
d258 1
a258 1
PUBLIC void *
d268 1
a268 1
PUBLIC
d273 1
a273 1
     PUBLIC GLX_ALIAS_VOID(glXSelectEventSGIX,
d278 1
a278 1
     PUBLIC GLX_ALIAS_VOID(glXGetSelectedEventSGIX,
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d3 1
a3 1
#include "glxconfig.h"
d35 48
d194 46
d249 1
a249 1
_X_EXPORT GLXPixmap
d277 1
a277 1
_X_EXPORT int
d288 1
a288 1
_X_EXPORT GLXDrawable
d303 1
a303 1
_X_EXPORT int
d313 1
a313 1
_X_EXPORT void *
d323 1
a323 1
_X_EXPORT GLXPixmap
d332 1
a332 1
_X_EXPORT GLXContext
d344 1
a344 1
_X_EXPORT XVisualInfo *
d352 1
a352 1
_X_EXPORT void *
d362 1
a362 1
_X_EXPORT
d367 1
a367 1
     _X_EXPORT GLX_ALIAS_VOID(glXSelectEventSGIX,
d372 1
a372 1
     _X_EXPORT GLX_ALIAS_VOID(glXGetSelectedEventSGIX,
@

