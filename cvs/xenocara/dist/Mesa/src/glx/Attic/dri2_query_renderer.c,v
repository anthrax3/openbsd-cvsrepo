head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.2
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.1
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	v10_2_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.45;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.03.18.05.30.10;	author jsg;	state Exp;
branches;
next	1.4;
commitid	cYcpjcQ2ssz9kwVh;

1.4
date	2015.02.22.09.30.34;	author jsg;	state Exp;
branches;
next	1.3;
commitid	yhStanAcs6cSYmBc;

1.3
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.2;
commitid	4ry2gvZGMXkCUD2n;

1.2
date	2015.01.25.14.41.20;	author jsg;	state dead;
branches;
next	1.1;
commitid	mcxB0JvoI9gTDYXU;

1.1
date	2014.07.09.20.34.33;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.1
date	2014.07.09.20.34.33;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2013 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#if defined(GLX_DIRECT_RENDERING) && !defined(GLX_USE_APPLEGL)

#include "glxclient.h"
#include "glx_error.h"
#include "dri2.h"
#include "dri_interface.h"
#include "dri2_priv.h"
#if defined(HAVE_DRI3)
#include "dri3_priv.h"
#endif
#include "drisw_priv.h"

#define __RENDERER(attrib) \
    { GLX_RENDERER_##attrib##_MESA, __DRI2_RENDERER_##attrib }

static const struct {
   unsigned int glx_attrib, dri2_attrib;
} query_renderer_map[] = {
  __RENDERER(VENDOR_ID),
  __RENDERER(DEVICE_ID),
  __RENDERER(VERSION),
  __RENDERER(ACCELERATED),
  __RENDERER(VIDEO_MEMORY),
  __RENDERER(UNIFIED_MEMORY_ARCHITECTURE),
  __RENDERER(PREFERRED_PROFILE),
  __RENDERER(OPENGL_CORE_PROFILE_VERSION),
  __RENDERER(OPENGL_COMPATIBILITY_PROFILE_VERSION),
  __RENDERER(OPENGL_ES_PROFILE_VERSION),
  __RENDERER(OPENGL_ES2_PROFILE_VERSION),
};

#undef __RENDERER

static int
dri2_convert_glx_query_renderer_attribs(int attribute)
{
   int i;

   for (i = 0; i < ARRAY_SIZE(query_renderer_map); i++)
      if (query_renderer_map[i].glx_attrib == attribute)
         return query_renderer_map[i].dri2_attrib;

   return -1;
}

/* Convert internal dri context profile bits into GLX context profile bits */
static inline void
dri_convert_context_profile_bits(int attribute, unsigned int *value)
{
   if (attribute == GLX_RENDERER_PREFERRED_PROFILE_MESA) {
      if (value[0] == (1U << __DRI_API_OPENGL_CORE))
         value[0] = GLX_CONTEXT_CORE_PROFILE_BIT_ARB;
      else if (value[0] == (1U << __DRI_API_OPENGL))
         value[0] = GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB;
   }
}

_X_HIDDEN int
dri2_query_renderer_integer(struct glx_screen *base, int attribute,
                            unsigned int *value)
{
   int ret;
   struct dri2_screen *const psc = (struct dri2_screen *) base;

   /* Even though there are invalid values (and
    * dri2_convert_glx_query_renderer_attribs may return -1), the higher level
    * GLX code is required to perform the filtering.  Assume that we got a
    * good value.
    */
   const int dri_attribute = dri2_convert_glx_query_renderer_attribs(attribute);

   if (psc->rendererQuery == NULL)
      return -1;

   ret = psc->rendererQuery->queryInteger(psc->driScreen, dri_attribute,
                                          value);
   dri_convert_context_profile_bits(attribute, value);

   return ret;
}

_X_HIDDEN int
dri2_query_renderer_string(struct glx_screen *base, int attribute,
                           const char **value)
{
   struct dri2_screen *const psc = (struct dri2_screen *) base;

   /* Even though queryString only accepts a subset of the possible GLX
    * queries, the higher level GLX code is required to perform the filtering.
    * Assume that we got a good value.
    */
   const int dri_attribute = dri2_convert_glx_query_renderer_attribs(attribute);

   if (psc->rendererQuery == NULL)
      return -1;

   return psc->rendererQuery->queryString(psc->driScreen, dri_attribute, value);
}

#if defined(HAVE_DRI3)
_X_HIDDEN int
dri3_query_renderer_integer(struct glx_screen *base, int attribute,
                            unsigned int *value)
{
   int ret;
   struct dri3_screen *const psc = (struct dri3_screen *) base;

   /* Even though there are invalid values (and
    * dri2_convert_glx_query_renderer_attribs may return -1), the higher level
    * GLX code is required to perform the filtering.  Assume that we got a
    * good value.
    */
   const int dri_attribute = dri2_convert_glx_query_renderer_attribs(attribute);

   if (psc->rendererQuery == NULL)
      return -1;

   ret = psc->rendererQuery->queryInteger(psc->driScreen, dri_attribute,
                                          value);
   dri_convert_context_profile_bits(attribute, value);

   return ret;
}

_X_HIDDEN int
dri3_query_renderer_string(struct glx_screen *base, int attribute,
                           const char **value)
{
   struct dri3_screen *const psc = (struct dri3_screen *) base;

   /* Even though queryString only accepts a subset of the possible GLX
    * queries, the higher level GLX code is required to perform the filtering.
    * Assume that we got a good value.
    */
   const int dri_attribute = dri2_convert_glx_query_renderer_attribs(attribute);

   if (psc->rendererQuery == NULL)
      return -1;

   return psc->rendererQuery->queryString(psc->driScreen, dri_attribute, value);
}
#endif /* HAVE_DRI3 */

_X_HIDDEN int
drisw_query_renderer_integer(struct glx_screen *base, int attribute,
                             unsigned int *value)
{
   int ret;
   struct drisw_screen *const psc = (struct drisw_screen *) base;

   /* Even though there are invalid values (and
    * dri2_convert_glx_query_renderer_attribs may return -1), the higher level
    * GLX code is required to perform the filtering.  Assume that we got a
    * good value.
    */
   const int dri_attribute = dri2_convert_glx_query_renderer_attribs(attribute);

   if (psc->rendererQuery == NULL)
      return -1;

   ret = psc->rendererQuery->queryInteger(psc->driScreen, dri_attribute,
                                          value);
   dri_convert_context_profile_bits(attribute, value);

   return ret;
}

_X_HIDDEN int
drisw_query_renderer_string(struct glx_screen *base, int attribute,
                            const char **value)
{
   struct drisw_screen *const psc = (struct drisw_screen *) base;

   /* Even though queryString only accepts a subset of the possible GLX
    * queries, the higher level GLX code is required to perform the filtering.
    * Assume that we got a good value.
    */
   const int dri_attribute = dri2_convert_glx_query_renderer_attribs(attribute);

   if (psc->rendererQuery == NULL)
      return -1;

   return psc->rendererQuery->queryString(psc->driScreen, dri_attribute, value);
}


#endif /* GLX_DIRECT_RENDERING */
@


1.5
log
@Backport a Mesa fix from Andreas Boll.

glx: Fix returned values of GLX_RENDERER_PREFERRED_PROFILE_MESA
@
text
@@


1.4
log
@Backport support for GLX_MESA_query_renderer for non Intel drivers.
This is desirable as the chromium port now uses this extension to
obtain pci vendor/device ids for use in feature/extension blacklists.

Prompted by a mail from byrnet@@, tested on r600g by krw@@

The newly added os_get_total_physical_memory() was passing the length of
a pointer rather than the type which made the sysctl call fail on
non 64 bit archs.  And it was passing the wrong pointer for the result.
Fixes for these problems have been submitted back upstream.
@
text
@d69 12
d85 1
d98 5
a102 2
   return psc->rendererQuery->queryInteger(psc->driScreen, dri_attribute,
                                           value);
d128 1
d141 5
a145 2
   return psc->rendererQuery->queryInteger(psc->driScreen, dri_attribute,
                                           value);
d171 1
d184 5
a188 2
   return psc->rendererQuery->queryInteger(psc->driScreen, dri_attribute,
                                           value);
@


1.3
log
@Merge Mesa 10.2.9
@
text
@d34 22
d60 7
a66 26
   switch (attribute) {
   case GLX_RENDERER_VENDOR_ID_MESA:
      return __DRI2_RENDERER_VENDOR_ID;
   case GLX_RENDERER_DEVICE_ID_MESA:
      return __DRI2_RENDERER_DEVICE_ID;
   case GLX_RENDERER_VERSION_MESA:
      return __DRI2_RENDERER_VERSION;
   case GLX_RENDERER_ACCELERATED_MESA:
      return __DRI2_RENDERER_ACCELERATED;
   case GLX_RENDERER_VIDEO_MEMORY_MESA:
      return __DRI2_RENDERER_VIDEO_MEMORY;
   case GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA:
      return __DRI2_RENDERER_UNIFIED_MEMORY_ARCHITECTURE;
   case GLX_RENDERER_PREFERRED_PROFILE_MESA:
      return __DRI2_RENDERER_PREFERRED_PROFILE;
   case GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA:
      return __DRI2_RENDERER_OPENGL_CORE_PROFILE_VERSION;
   case GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA:
      return __DRI2_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION;
   case GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA:
      return __DRI2_RENDERER_OPENGL_ES_PROFILE_VERSION;
   case GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA:
      return __DRI2_RENDERER_OPENGL_ES2_PROFILE_VERSION;
   default:
      return -1;
   }
d146 39
@


1.2
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 10.2.3
@
text
@@
