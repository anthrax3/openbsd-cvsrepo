head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.46;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.58;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.03.45;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.38;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.14;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.34;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.41;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.34;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008)
 * Copyright (C) 1991-2000 Silicon Graphics, Inc. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice including the dates of first publication and
 * either this permission notice or a reference to
 * http://oss.sgi.com/projects/FreeB/
 * shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of Silicon Graphics, Inc.
 * shall not be used in advertising or otherwise to promote the sale, use or
 * other dealings in this Software without prior written authorization from
 * Silicon Graphics, Inc.
 */

#include "packsingle.h"
#include "indirect.h"
#include "glapi.h"
#include <GL/glxproto.h>

void
__indirect_glGetSeparableFilter(GLenum target, GLenum format, GLenum type,
                                GLvoid * row, GLvoid * column, GLvoid * span)
{
   __GLX_SINGLE_DECLARE_VARIABLES();
   const __GLXattribute *state;
   xGLXGetSeparableFilterReply reply;
   GLubyte *rowBuf, *colBuf;

   if (!dpy)
      return;
   __GLX_SINGLE_LOAD_VARIABLES();
   state = gc->client_state_private;

   /* Send request */
   __GLX_SINGLE_BEGIN(X_GLsop_GetSeparableFilter, __GLX_PAD(13));
   __GLX_SINGLE_PUT_LONG(0, target);
   __GLX_SINGLE_PUT_LONG(4, format);
   __GLX_SINGLE_PUT_LONG(8, type);
   __GLX_SINGLE_PUT_CHAR(12, state->storePack.swapEndian);
   __GLX_SINGLE_READ_XREPLY();
   compsize = reply.length << 2;

   if (compsize != 0) {
      GLint width, height;
      GLint widthsize, heightsize;

      width = reply.width;
      height = reply.height;

      widthsize = __glImageSize(width, 1, 1, format, type, 0);
      heightsize = __glImageSize(height, 1, 1, format, type, 0);

      /* Allocate a holding buffer to transform the data from */
      rowBuf = malloc(widthsize);
      if (!rowBuf) {
         /* Throw data away */
         _XEatData(dpy, compsize);
         __glXSetError(gc, GL_OUT_OF_MEMORY);
         UnlockDisplay(dpy);
         SyncHandle();
         return;
      }
      else {
         __GLX_SINGLE_GET_CHAR_ARRAY(((char *) rowBuf), widthsize);
         __glEmptyImage(gc, 1, width, 1, 1, format, type, rowBuf, row);
         free((char *) rowBuf);
      }
      colBuf = malloc(heightsize);
      if (!colBuf) {
         /* Throw data away */
         _XEatData(dpy, compsize - __GLX_PAD(widthsize));
         __glXSetError(gc, GL_OUT_OF_MEMORY);
         UnlockDisplay(dpy);
         SyncHandle();
         return;
      }
      else {
         __GLX_SINGLE_GET_CHAR_ARRAY(((char *) colBuf), heightsize);
         __glEmptyImage(gc, 1, height, 1, 1, format, type, colBuf, column);
         free((char *) colBuf);
      }
   }
   else {
      /*
       ** don't modify user's buffer.
       */
   }
   __GLX_SINGLE_END();

}


/* it is defined to gl_dispatch_stub_NNN in indirect.h */
void gl_dispatch_stub_GetSeparableFilterEXT (GLenum target, GLenum format,
                                             GLenum type, GLvoid * row,
                                             GLvoid * column, GLvoid * span)
{
   struct glx_context *const gc = __glXGetCurrentContext();

#if defined(GLX_DIRECT_RENDERING) && !defined(GLX_USE_APPLEGL)
   if (gc->isDirect) {
      const _glapi_proc *const table = (_glapi_proc *) GET_DISPATCH();
      PFNGLGETSEPARABLEFILTEREXTPROC p =
         (PFNGLGETSEPARABLEFILTEREXTPROC) table[359];

      p(target, format, type, row, column, span);
      return;
   }
   else
#endif
   {
      Display *const dpy = gc->currentDpy;
      const GLuint cmdlen = __GLX_PAD(13);

      if (dpy != NULL) {
         const __GLXattribute *const state = gc->client_state_private;
         xGLXGetSeparableFilterReply reply;
         GLubyte const *pc =
            __glXSetupVendorRequest(gc, X_GLXVendorPrivateWithReply,
                                    X_GLvop_GetSeparableFilterEXT, cmdlen);
         unsigned compsize;


         (void) memcpy((void *) (pc + 0), (void *) (&target), 4);
         (void) memcpy((void *) (pc + 4), (void *) (&format), 4);
         (void) memcpy((void *) (pc + 8), (void *) (&type), 4);
         *(int8_t *) (pc + 12) = state->storePack.swapEndian;

         (void) _XReply(dpy, (xReply *) & reply, 0, False);

         compsize = reply.length << 2;

         if (compsize != 0) {
            const GLint width = reply.width;
            const GLint height = reply.height;
            const GLint widthsize =
               __glImageSize(width, 1, 1, format, type, 0);
            const GLint heightsize =
               __glImageSize(height, 1, 1, format, type, 0);
            GLubyte *const buf =
               malloc((widthsize > heightsize) ? widthsize : heightsize);

            if (buf == NULL) {
               /* Throw data away */
               _XEatData(dpy, compsize);
               __glXSetError(gc, GL_OUT_OF_MEMORY);

               UnlockDisplay(dpy);
               SyncHandle();
               return;
            }
            else {
               int extra;

               extra = 4 - (widthsize & 3);
               _XRead(dpy, (char *) buf, widthsize);
               if (extra < 4) {
                  _XEatData(dpy, extra);
               }

               __glEmptyImage(gc, 1, width, 1, 1, format, type, buf, row);

               extra = 4 - (heightsize & 3);
               _XRead(dpy, (char *) buf, heightsize);
               if (extra < 4) {
                  _XEatData(dpy, extra);
               }

               __glEmptyImage(gc, 1, height, 1, 1, format, type, buf, column);

               free((char *) buf);
            }
         }
      }
   }
}
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@a33 1
#include "glthread.h"
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a32 1
#include "glapitable.h"
d71 1
a71 1
      rowBuf = (GLubyte *) Xmalloc(widthsize);
d83 1
a83 1
         Xfree((char *) rowBuf);
d85 1
a85 1
      colBuf = (GLubyte *) Xmalloc(heightsize);
d97 1
a97 1
         Xfree((char *) colBuf);
d119 5
a123 2
      GET_DISPATCH()->GetSeparableFilter(target, format, type,
                                         row, column, span);
d158 1
a158 2
               (GLubyte *) Xmalloc((widthsize > heightsize) ? widthsize :
                                   heightsize);
d188 1
a188 1
               Xfree((char *) buf);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a33 1
#include "glapidispatch.h"
a35 1
#include "glapioffsets.h"
d111 4
a114 6
#define CONCAT(a,b) a ## b
#define NAME(o) CONCAT(gl_dispatch_stub_, o)

void NAME(_gloffset_GetSeparableFilter) (GLenum target, GLenum format,
                                         GLenum type, GLvoid * row,
                                         GLvoid * column, GLvoid * span)
d116 1
a116 1
   __GLXcontext *const gc = __glXGetCurrentContext();
d119 3
a121 3
   if (gc->driContext) {
      CALL_GetSeparableFilter(GET_DISPATCH(),
                              (target, format, type, row, column, span));
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d34 1
d37 1
d113 6
a118 4
/* it is defined to gl_dispatch_stub_NNN in indirect.h */
void gl_dispatch_stub_GetSeparableFilterEXT (GLenum target, GLenum format,
                                             GLenum type, GLvoid * row,
                                             GLvoid * column, GLvoid * span)
d120 1
a120 1
   struct glx_context *const gc = __glXGetCurrentContext();
d123 3
a125 3
   if (gc->isDirect) {
      GET_DISPATCH()->GetSeparableFilter(target, format, type,
                                         row, column, span);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d33 1
d72 1
a72 1
      rowBuf = malloc(widthsize);
d84 1
a84 1
         free((char *) rowBuf);
d86 1
a86 1
      colBuf = malloc(heightsize);
d98 1
a98 1
         free((char *) colBuf);
d120 2
a121 5
      const _glapi_proc *const table = (_glapi_proc *) GET_DISPATCH();
      PFNGLGETSEPARABLEFILTEREXTPROC p =
         (PFNGLGETSEPARABLEFILTEREXTPROC) table[359];

      p(target, format, type, row, column, span);
d156 2
a157 1
               malloc((widthsize > heightsize) ? widthsize : heightsize);
d187 1
a187 1
               free((char *) buf);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d34 1
@


