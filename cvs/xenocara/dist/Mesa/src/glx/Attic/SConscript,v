head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2015.12.23.05.17.45;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.14.35;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.14.35;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.33;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.10.36;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.47.42;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@Import('*')

if not env['x11'] or not env['xcb'] or not env['drm']:
    Return()

from sys import executable as python_cmd

env = env.Clone()

env.Prepend(CPPPATH = [
	'.',           # the build/<platform>/glx/ directory
	'#include',
	'#include/GL/internal',
	'#src/mesa',
	'#src/mapi',
	'#src/mapi/glapi',
	#$(LIBDRM_CFLAGS)
	#$(DRI2PROTO_CFLAGS)
	#$(GLPROTO_CFLAGS)
	#$(X11_INCLUDES)
])

env.Append(CPPDEFINES = [
    '_REENTRANT',
    #('DEFAULT_DRIVER_DIR', 'DRI_DRIVER_SEARCH_DIR')
])

env.Prepend(LIBS = [
    glapi
])

env.PkgUseModules('X11')
env.PkgUseModules('XCB')
env.PkgUseModules('DRM')

if env['HAVE_XF86VIDMODE']:
    env.Append(CPPDEFINES = ['XF86VIDMODE'])
    env.PkgUseModules('XF86VIDMODE')

if False: # XXX: SHARED_GLAPI
    env.Append(CPPDEFINES = ['GLX_SHARED_GLAPI'])

sources = [
    'clientattrib.c',
    'clientinfo.c',
    'create_context.c',
    'compsize.c',
    'eval.c',
    'glx_error.c',
    'glxconfig.c',
    'glxcmds.c',
    'glxcurrent.c',
    'glxext.c',
    'glxextensions.c',
    'indirect_glx.c',
    'indirect.c',
    'indirect_init.c',
    'indirect_size.c',
    'indirect_window_pos.c',
    'indirect_texture_compression.c',
    'indirect_transpose_matrix.c',
    'indirect_vertex_array.c',
    'indirect_vertex_program.c',
    'pixel.c',
    'pixelstore.c',
    'render2.c',
    'renderpix.c',
    'single2.c',
    'singlepix.c',
    'vertarr.c',
    'xfont.c',
    'glx_pbuffer.c',
    'glx_query.c',
    'drisw_glx.c',
    'dri_common.c',
    'dri_glx.c',
    'XF86dri.c',
    'glxhash.c',
    'dri2_glx.c',
    'dri2.c',
    'applegl_glx.c',
]

libgl = env.SharedLibrary(
    target ='GL',
    source = sources,
)


# Generate GLX-specific .c and .h files here.  Other GL API-related
# files are used, but they're generated in mapi/glapi/gen/ since they're
# used by other targets as well.

GLAPI = '#src/mapi/glapi/'

env.CodeGenerate(
    target = 'indirect.c',
    script = GLAPI + 'gen/glX_proto_send.py',
    source = GLAPI + 'gen/gl_and_es_API.xml',
    command = python_cmd + ' $SCRIPT -f $SOURCE -m proto > $TARGET'
    )

env.CodeGenerate(
    target = 'indirect_size.c', 
    script = GLAPI + 'gen/glX_proto_size.py',
    source = GLAPI + 'gen/gl_API.xml',
    command = python_cmd + ' $SCRIPT -f $SOURCE -m size_c --only-set > $TARGET'
)

env.CodeGenerate(
    target = 'indirect_init.c', 
    script = GLAPI + 'gen/glX_proto_send.py',
    source = GLAPI + 'gen/gl_API.xml',
    command = python_cmd + ' $SCRIPT -f $SOURCE -m init_c > $TARGET'
)

env.CodeGenerate(
    target = 'indirect_size.h',
    script = GLAPI + 'gen/glX_proto_size.py',
    source = GLAPI + 'gen/gl_API.xml',
    command = python_cmd + ' $SCRIPT -f $SOURCE -m size_h --only-set -h _INDIRECT_SIZE_H > $TARGET'
)

env.CodeGenerate(
    target = 'indirect.h',
    script = GLAPI + 'gen/glX_proto_send.py',
    source = GLAPI + 'gen/gl_API.xml',
    command = python_cmd + ' $SCRIPT -m init_h -f $SOURCE > $TARGET',
    )


libgl = env.InstallSharedLibrary(libgl, version=(1, 2))

env.Alias('glx', libgl)
env.Alias('libgl', libgl)
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@a13 1
	'#src/loader',
a28 1
    libloader,
a65 1
    'query_renderer.c',
a80 2
    'dri2_query_renderer.c',
    #'dri3_glx.c',
a94 1
sources = [GLAPI + 'gen/gl_API.xml'] + env.Glob(GLAPI + 'gen/*.xml')
d99 1
a99 1
    source = sources,
d106 1
a106 1
    source = sources,
d113 1
a113 1
    source = sources,
d120 1
a120 1
    source = sources,
d127 1
a127 1
    source = sources,
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d84 1
a84 1
    'dri_common_query_renderer.c',
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d84 1
a84 1
    'dri2_query_renderer.c',
@


