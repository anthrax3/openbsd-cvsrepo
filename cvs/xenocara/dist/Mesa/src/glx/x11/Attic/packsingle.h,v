head	1.4;
access;
symbols
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2010.05.22.20.06.15;	author matthieu;	state dead;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.38;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.54.44;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.54.44;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@#ifndef __GLX_packsingle_h__
#define __GLX_packsingle_h__

/*
 * SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008)
 * Copyright (C) 1991-2000 Silicon Graphics, Inc. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice including the dates of first publication and
 * either this permission notice or a reference to
 * http://oss.sgi.com/projects/FreeB/
 * shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of Silicon Graphics, Inc.
 * shall not be used in advertising or otherwise to promote the sale, use or
 * other dealings in this Software without prior written authorization from
 * Silicon Graphics, Inc.
 */

#include "packrender.h"

/*
** The macros in this header convert wire protocol data types to the client
** machine's native data types.  The header is part of the porting layer of
** the client library, and it is intended that hardware vendors will rewrite
** this header to suit their own machines.
*/

/*
** Dummy define to make the GetReqExtra macro happy.  The value is not
** used, but instead the code in __GLX_SINGLE_BEGIN issues its own store
** to req->reqType with the proper code (our extension code).
*/
#define X_GLXSingle 0

/* Declare common variables used during a single command */
#define __GLX_SINGLE_DECLARE_VARIABLES()         \
   __GLXcontext *gc = __glXGetCurrentContext();  \
   GLubyte *pc, *pixelHeaderPC;                  \
   GLuint compsize, cmdlen;                      \
   Display *dpy = gc->currentDpy;                \
   xGLXSingleReq *req

#define __GLX_SINGLE_LOAD_VARIABLES()           \
   pc = gc->pc;                                 \
   /* Muffle compilers */                       \
   pixelHeaderPC = 0;  (void)pixelHeaderPC;     \
   compsize = 0;       (void)compsize;          \
   cmdlen = 0;         (void)cmdlen

/* Start a single command */
#define __GLX_SINGLE_BEGIN(opcode,bytes)        \
   if (dpy) {                                   \
   (void) __glXFlushRenderBuffer(gc, pc);       \
   LockDisplay(dpy);                            \
   GetReqExtra(GLXSingle,bytes,req);            \
   req->reqType = gc->majorOpcode;              \
   req->glxCode = opcode;                       \
   req->contextTag = gc->currentContextTag;     \
   pc = ((GLubyte *)(req) + sz_xGLXSingleReq)

/* End a single command */
#define __GLX_SINGLE_END()       \
   UnlockDisplay(dpy);           \
   SyncHandle();                 \
   }

/* Store data to sending for a single command */
#define __GLX_SINGLE_PUT_CHAR(offset,a)         \
   *((INT8 *) (pc + offset)) = a

#ifndef CRAY
#define __GLX_SINGLE_PUT_SHORT(offset,a)        \
   *((INT16 *) (pc + offset)) = a

#define __GLX_SINGLE_PUT_LONG(offset,a)         \
   *((INT32 *) (pc + offset)) = a

#define __GLX_SINGLE_PUT_FLOAT(offset,a)        \
   *((FLOAT32 *) (pc + offset)) = a

#else
#define __GLX_SINGLE_PUT_SHORT(offset,a)        \
   { GLubyte *cp = (pc+offset);                    \
      int shift = (64-16) - ((int)(cp) >> (64-6));                      \
      *(int *)cp = (*(int *)cp & ~(0xffff << shift)) | ((a & 0xffff) << shift); }

#define __GLX_SINGLE_PUT_LONG(offset,a)         \
   { GLubyte *cp = (pc+offset);                    \
      int shift = (64-32) - ((int)(cp) >> (64-6));                      \
      *(int *)cp = (*(int *)cp & ~(0xffffffff << shift)) | ((a & 0xffffffff) << shift); }

#define __GLX_SINGLE_PUT_FLOAT(offset,a)        \
   gl_put_float(pc + offset, a)
#endif

/* Read support macros */
#define __GLX_SINGLE_READ_XREPLY()                    \
   (void) _XReply(dpy, (xReply*) &reply, 0, False)

#define __GLX_SINGLE_GET_RETVAL(a,cast)         \
   a = (cast) reply.retval

#define __GLX_SINGLE_GET_SIZE(a)                \
   a = (GLint) reply.size

#ifndef _CRAY
#define __GLX_SINGLE_GET_CHAR(p)                \
   *p = *(GLbyte *)&reply.pad3;

#define __GLX_SINGLE_GET_SHORT(p)               \
   *p = *(GLshort *)&reply.pad3;

#define __GLX_SINGLE_GET_LONG(p)                \
   *p = *(GLint *)&reply.pad3;

#define __GLX_SINGLE_GET_FLOAT(p)               \
   *p = *(GLfloat *)&reply.pad3;

#else
#define __GLX_SINGLE_GET_CHAR(p)                \
   *p = reply.pad3 >> 24;

#define __GLX_SINGLE_GET_SHORT(p)               \
   {int t = reply.pad3 >> 16;                            \
      *p = (t & 0x8000) ? (t | ~0xffff) : (t & 0xffff);}

#define __GLX_SINGLE_GET_LONG(p)                \
   {int t = reply.pad3;                                              \
      *p = (t & 0x80000000) ? (t | ~0xffffffff) : (t & 0xffffffff);}

#define PAD3OFFSET 16
#define __GLX_SINGLE_GET_FLOAT(p)                        \
   *p = gl_ntoh_float((GLubyte *)&reply + PAD3OFFSET);

#define __GLX_SINGLE_GET_DOUBLE(p)                       \
   *p = gl_ntoh_double((GLubyte *)&reply + PAD3OFFSET);

extern float gl_ntoh_float(GLubyte *);
extern float gl_ntoh_double(GLubyte *);
#endif

#ifndef _CRAY

#ifdef __GLX_ALIGN64
#define __GLX_SINGLE_GET_DOUBLE(p)              \
   __GLX_MEM_COPY(p, &reply.pad3, 8)
#else
#define __GLX_SINGLE_GET_DOUBLE(p)              \
   *p = *(GLdouble *)&reply.pad3
#endif

#endif

/* Get an array of typed data */
#define __GLX_SINGLE_GET_VOID_ARRAY(a,alen)     \
   {                                            \
      GLint slop = alen*__GLX_SIZE_INT8 & 3;    \
      _XRead(dpy,(char *)a,alen*__GLX_SIZE_INT8);  \
      if (slop) _XEatData(dpy,4-slop);             \
   }

#define __GLX_SINGLE_GET_CHAR_ARRAY(a,alen)     \
   {                                            \
      GLint slop = alen*__GLX_SIZE_INT8 & 3;    \
      _XRead(dpy,(char *)a,alen*__GLX_SIZE_INT8);  \
      if (slop) _XEatData(dpy,4-slop);             \
   }


#define __GLX_SINGLE_GET_SHORT_ARRAY(a,alen)    \
   {                                            \
      GLint slop = (alen*__GLX_SIZE_INT16) & 3;    \
      _XRead(dpy,(char *)a,alen*__GLX_SIZE_INT16); \
      if (slop) _XEatData(dpy,4-slop);             \
   }

#define __GLX_SINGLE_GET_LONG_ARRAY(a,alen)        \
   _XRead(dpy,(char *)a,alen*__GLX_SIZE_INT32);

#ifndef _CRAY
#define __GLX_SINGLE_GET_FLOAT_ARRAY(a,alen)       \
   _XRead(dpy,(char *)a,alen*__GLX_SIZE_FLOAT32);

#define __GLX_SINGLE_GET_DOUBLE_ARRAY(a,alen)      \
   _XRead(dpy,(char *)a,alen*__GLX_SIZE_FLOAT64);

#else
#define __GLX_SINGLE_GET_FLOAT_ARRAY(a,alen)    \
   gl_get_float_array(dpy,a,alen);

#define __GLX_SINGLE_GET_DOUBLE_ARRAY(a,alen)   \
   gl_get_double_array(dpy, a, alen);

extern void gl_get_float_array(Display * dpy, float *a, int alen);
extern void gl_get_double_array(Display * dpy, double *a, int alen);
#endif

#endif /* !__GLX_packsingle_h__ */
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d51 13
a63 13
#define __GLX_SINGLE_DECLARE_VARIABLES()	 \
    __GLXcontext *gc = __glXGetCurrentContext(); \
    GLubyte *pc, *pixelHeaderPC;		 \
    GLuint compsize, cmdlen;			 \
    Display *dpy = gc->currentDpy;		 \
    xGLXSingleReq *req

#define __GLX_SINGLE_LOAD_VARIABLES() \
    pc = gc->pc;           \
    /* Muffle compilers */		     \
    pixelHeaderPC = 0;  (void)pixelHeaderPC; \
    compsize = 0;       (void)compsize;	     \
    cmdlen = 0;         (void)cmdlen
d66 9
a74 9
#define __GLX_SINGLE_BEGIN(opcode,bytes)	   \
    if (dpy) {					   \
	(void) __glXFlushRenderBuffer(gc, pc);	   \
	LockDisplay(dpy);			   \
	GetReqExtra(GLXSingle,bytes,req);	   \
	req->reqType = gc->majorOpcode;		   \
	req->glxCode = opcode;			   \
	req->contextTag = gc->currentContextTag;   \
	pc = ((GLubyte *)(req) + sz_xGLXSingleReq)
d77 4
a80 4
#define __GLX_SINGLE_END()			   \
	UnlockDisplay(dpy);			   \
	SyncHandle();				   \
    }
d83 2
a84 2
#define __GLX_SINGLE_PUT_CHAR(offset,a)	\
    *((INT8 *) (pc + offset)) = a
d87 2
a88 2
#define __GLX_SINGLE_PUT_SHORT(offset,a) \
    *((INT16 *) (pc + offset)) = a
d90 2
a91 2
#define __GLX_SINGLE_PUT_LONG(offset,a)	\
    *((INT32 *) (pc + offset)) = a
d93 2
a94 2
#define __GLX_SINGLE_PUT_FLOAT(offset,a) \
    *((FLOAT32 *) (pc + offset)) = a
d97 3
a99 3
#define __GLX_SINGLE_PUT_SHORT(offset,a) \
    { GLubyte *cp = (pc+offset); \
      int shift = (64-16) - ((int)(cp) >> (64-6)); \
d102 3
a104 3
#define __GLX_SINGLE_PUT_LONG(offset,a) \
    { GLubyte *cp = (pc+offset); \
      int shift = (64-32) - ((int)(cp) >> (64-6)); \
d107 2
a108 2
#define __GLX_SINGLE_PUT_FLOAT(offset,a) \
    gl_put_float(pc + offset, a)
d112 2
a113 2
#define __GLX_SINGLE_READ_XREPLY()		    \
    (void) _XReply(dpy, (xReply*) &reply, 0, False)
d115 2
a116 2
#define __GLX_SINGLE_GET_RETVAL(a,cast)	\
    a = (cast) reply.retval
d118 2
a119 2
#define __GLX_SINGLE_GET_SIZE(a) \
    a = (GLint) reply.size
d122 2
a123 2
#define __GLX_SINGLE_GET_CHAR(p) \
    *p = *(GLbyte *)&reply.pad3;
d125 2
a126 2
#define __GLX_SINGLE_GET_SHORT(p) \
    *p = *(GLshort *)&reply.pad3;
d128 2
a129 2
#define __GLX_SINGLE_GET_LONG(p) \
    *p = *(GLint *)&reply.pad3;
d131 2
a132 2
#define __GLX_SINGLE_GET_FLOAT(p) \
    *p = *(GLfloat *)&reply.pad3;
d135 2
a136 2
#define __GLX_SINGLE_GET_CHAR(p) \
    *p = reply.pad3 >> 24;
d138 7
a144 7
#define __GLX_SINGLE_GET_SHORT(p) \
    {int t = reply.pad3 >> 16; \
     *p = (t & 0x8000) ? (t | ~0xffff) : (t & 0xffff);}

#define __GLX_SINGLE_GET_LONG(p) \
    {int t = reply.pad3; \
     *p = (t & 0x80000000) ? (t | ~0xffffffff) : (t & 0xffffffff);}
d147 2
a148 2
#define __GLX_SINGLE_GET_FLOAT(p) \
    *p = gl_ntoh_float((GLubyte *)&reply + PAD3OFFSET);
d150 2
a151 2
#define __GLX_SINGLE_GET_DOUBLE(p) \
    *p = gl_ntoh_double((GLubyte *)&reply + PAD3OFFSET);
d160 2
a161 2
#define __GLX_SINGLE_GET_DOUBLE(p) \
    __GLX_MEM_COPY(p, &reply.pad3, 8)
d163 2
a164 2
#define __GLX_SINGLE_GET_DOUBLE(p) \
    *p = *(GLdouble *)&reply.pad3
d168 1
a168 1
	  
d170 21
a190 21
#define __GLX_SINGLE_GET_VOID_ARRAY(a,alen)	\
{						\
    GLint slop = alen*__GLX_SIZE_INT8 & 3;	\
    _XRead(dpy,(char *)a,alen*__GLX_SIZE_INT8);	\
    if (slop) _XEatData(dpy,4-slop);		\
}

#define __GLX_SINGLE_GET_CHAR_ARRAY(a,alen)	\
{						\
    GLint slop = alen*__GLX_SIZE_INT8 & 3;	\
    _XRead(dpy,(char *)a,alen*__GLX_SIZE_INT8);	\
    if (slop) _XEatData(dpy,4-slop);		\
}
					

#define __GLX_SINGLE_GET_SHORT_ARRAY(a,alen)	\
{						\
    GLint slop = (alen*__GLX_SIZE_INT16) & 3;	\
    _XRead(dpy,(char *)a,alen*__GLX_SIZE_INT16);\
    if (slop) _XEatData(dpy,4-slop);		\
}
d192 2
a193 2
#define __GLX_SINGLE_GET_LONG_ARRAY(a,alen) \
    _XRead(dpy,(char *)a,alen*__GLX_SIZE_INT32);  	
d196 2
a197 2
#define __GLX_SINGLE_GET_FLOAT_ARRAY(a,alen) \
    _XRead(dpy,(char *)a,alen*__GLX_SIZE_FLOAT32);  	
d199 2
a200 2
#define __GLX_SINGLE_GET_DOUBLE_ARRAY(a,alen) \
    _XRead(dpy,(char *)a,alen*__GLX_SIZE_FLOAT64);  	
d203 2
a204 2
#define __GLX_SINGLE_GET_FLOAT_ARRAY(a,alen) \
    gl_get_float_array(dpy,a,alen);
d206 2
a207 2
#define __GLX_SINGLE_GET_DOUBLE_ARRAY(a,alen) \
    gl_get_double_array(dpy, a, alen);
d209 2
a210 2
extern void gl_get_float_array(Display *dpy, float *a, int alen);
extern void gl_get_double_array(Display *dpy, double *a, int alen);
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86: xc/lib/GL/glx/packsingle.h,v 1.5tsi Exp $ */
d5 28
a32 33
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
** 
** http://oss.sgi.com/projects/FreeB
** 
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
** 
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
** Copyright in any portions created by third parties is as indicated
** elsewhere herein. All Rights Reserved.
** 
** Additional Notice Provisions: The application programming interfaces
** established by SGI in conjunction with the Original Code are The
** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
** Window System(R) (Version 1.3), released October 19, 1998. This software
** was created using the OpenGL(R) version 1.2.1 Sample Implementation
** published by SGI, but has not been independently verified as being
** compliant with the OpenGL(R) version 1.2.1 Specification.
**
*/
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@
