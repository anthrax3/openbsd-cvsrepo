head	1.5;
access;
symbols
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.6
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2010.05.22.20.06.15;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.38;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.12;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.04.22.11.20;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.54.43;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.54.43;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@/*
 * (C) Copyright IBM Corporation 2005
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sub license,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * IBM,
 * AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <inttypes.h>
#include <GL/gl.h>
#include "indirect.h"
#include "glxclient.h"
#include "indirect_vertex_array.h"
#include <GL/glxproto.h>

#if !defined __GNUC__ || __GNUC__ < 3
#  define __builtin_expect(x, y) x
#endif

static void
do_vertex_attrib_enable(GLuint index, GLboolean val)
{
   __GLXcontext *gc = __glXGetCurrentContext();
   __GLXattribute *state = (__GLXattribute *) (gc->client_state_private);

   if (!__glXSetArrayEnable(state, GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB,
                            index, val)) {
      __glXSetError(gc, GL_INVALID_ENUM);
   }
}


void
__indirect_glEnableVertexAttribArrayARB(GLuint index)
{
   do_vertex_attrib_enable(index, GL_TRUE);
}


void
__indirect_glDisableVertexAttribArrayARB(GLuint index)
{
   do_vertex_attrib_enable(index, GL_FALSE);
}


static void
get_parameter(unsigned opcode, unsigned size, GLenum target, GLuint index,
              void *params)
{
   __GLXcontext *const gc = __glXGetCurrentContext();
   Display *const dpy = gc->currentDpy;
   const GLuint cmdlen = 12;

   if (__builtin_expect(dpy != NULL, 1)) {
      GLubyte const *pc = __glXSetupVendorRequest(gc,
                                                  X_GLXVendorPrivateWithReply,
                                                  opcode, cmdlen);

      *((GLenum *) (pc + 0)) = target;
      *((GLuint *) (pc + 4)) = index;
      *((GLuint *) (pc + 8)) = 0;

      (void) __glXReadReply(dpy, size, params, GL_FALSE);
      UnlockDisplay(dpy);
      SyncHandle();
   }
   return;
}


void
__indirect_glGetProgramEnvParameterfvARB(GLenum target, GLuint index,
                                         GLfloat * params)
{
   get_parameter(1296, 4, target, index, params);
}


void
__indirect_glGetProgramEnvParameterdvARB(GLenum target, GLuint index,
                                         GLdouble * params)
{
   get_parameter(1297, 8, target, index, params);
}


void
__indirect_glGetProgramLocalParameterfvARB(GLenum target, GLuint index,
                                           GLfloat * params)
{
   get_parameter(1305, 4, target, index, params);
}


void
__indirect_glGetProgramLocalParameterdvARB(GLenum target, GLuint index,
                                           GLdouble * params)
{
   get_parameter(1306, 8, target, index, params);
}


void
__indirect_glGetVertexAttribPointervNV(GLuint index, GLenum pname,
                                       GLvoid ** pointer)
{
   __GLXcontext *const gc = __glXGetCurrentContext();
   __GLXattribute *state = (__GLXattribute *) (gc->client_state_private);

   if (pname != GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB) {
      __glXSetError(gc, GL_INVALID_ENUM);
   }

   if (!__glXGetArrayPointer(state, GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB,
                             index, pointer)) {
      __glXSetError(gc, GL_INVALID_VALUE);
   }
}


/**
 * Get the selected attribute from the vertex array state vector.
 * 
 * \returns
 * On success \c GL_TRUE is returned.  Otherwise, \c GL_FALSE is returned.
 */
static GLboolean
get_attrib_array_data(__GLXattribute * state, GLuint index, GLenum cap,
                      GLintptr * data)
{
   GLboolean retval = GL_FALSE;
   const GLenum attrib = GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB;

   switch (cap) {
   case GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB:
      retval = __glXGetArrayEnable(state, attrib, index, data);
      break;

   case GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB:
      retval = __glXGetArraySize(state, attrib, index, data);
      break;

   case GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB:
      retval = __glXGetArrayStride(state, attrib, index, data);
      break;

   case GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB:
      retval = __glXGetArrayType(state, attrib, index, data);
      break;

   case GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB:
      retval = __glXGetArrayNormalized(state, attrib, index, data);
      break;
   }


   return retval;
}


static void
get_vertex_attrib(__GLXcontext * gc, unsigned vop,
                  GLuint index, GLenum pname, xReply * reply)
{
   Display *const dpy = gc->currentDpy;
   GLubyte *const pc = __glXSetupVendorRequest(gc,
                                               X_GLXVendorPrivateWithReply,
                                               vop, 8);

   *((uint32_t *) (pc + 0)) = index;
   *((uint32_t *) (pc + 4)) = pname;

   (void) _XReply(dpy, reply, 0, False);
}


void
__indirect_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint * params)
{
   __GLXcontext *const gc = __glXGetCurrentContext();
   Display *const dpy = gc->currentDpy;
   __GLXattribute *state = (__GLXattribute *) (gc->client_state_private);
   xGLXSingleReply reply;


   get_vertex_attrib(gc, 1303, index, pname, (xReply *) & reply);

   if (reply.size != 0) {
      GLintptr data;


      if (get_attrib_array_data(state, index, pname, &data)) {
         *params = (GLint) data;
      }
      else {
         if (reply.size == 1) {
            *params = (GLint) reply.pad3;
         }
         else {
            _XRead(dpy, (void *) params, 4 * reply.size);
         }
      }
   }

   UnlockDisplay(dpy);
   SyncHandle();
}


void
__indirect_glGetVertexAttribfvARB(GLuint index, GLenum pname,
                                  GLfloat * params)
{
   __GLXcontext *const gc = __glXGetCurrentContext();
   Display *const dpy = gc->currentDpy;
   __GLXattribute *state = (__GLXattribute *) (gc->client_state_private);
   xGLXSingleReply reply;


   get_vertex_attrib(gc, 1302, index, pname, (xReply *) & reply);

   if (reply.size != 0) {
      GLintptr data;


      if (get_attrib_array_data(state, index, pname, &data)) {
         *params = (GLfloat) data;
      }
      else {
         if (reply.size == 1) {
            (void) memcpy(params, &reply.pad3, sizeof(GLfloat));
         }
         else {
            _XRead(dpy, (void *) params, 4 * reply.size);
         }
      }
   }

   UnlockDisplay(dpy);
   SyncHandle();
}


void
__indirect_glGetVertexAttribdvARB(GLuint index, GLenum pname,
                                  GLdouble * params)
{
   __GLXcontext *const gc = __glXGetCurrentContext();
   Display *const dpy = gc->currentDpy;
   __GLXattribute *state = (__GLXattribute *) (gc->client_state_private);
   xGLXSingleReply reply;


   get_vertex_attrib(gc, 1301, index, pname, (xReply *) & reply);

   if (reply.size != 0) {
      GLintptr data;


      if (get_attrib_array_data(state, index, pname, &data)) {
         *params = (GLdouble) data;
      }
      else {
         if (reply.size == 1) {
            (void) memcpy(params, &reply.pad3, sizeof(GLdouble));
         }
         else {
            _XRead(dpy, (void *) params, 8 * reply.size);
         }
      }
   }

   UnlockDisplay(dpy);
   SyncHandle();
}
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a25 1
#include "glheader.h"
d33 4
d38 1
a38 1
do_vertex_attrib_enable( GLuint index, GLboolean val )
d40 2
a41 2
    __GLXcontext *gc = __glXGetCurrentContext();
    __GLXattribute * state = (__GLXattribute *)(gc->client_state_private);
d43 4
a46 4
    if ( ! __glXSetArrayEnable( state, GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB,
				index, val ) ) {
	__glXSetError(gc, GL_INVALID_ENUM);
    }
d50 2
a51 1
void __indirect_glEnableVertexAttribArrayARB( GLuint index )
d53 1
a53 1
    do_vertex_attrib_enable( index, GL_TRUE );
d57 2
a58 1
void __indirect_glDisableVertexAttribArrayARB( GLuint index )
d60 1
a60 1
    do_vertex_attrib_enable( index, GL_FALSE );
d65 2
a66 2
get_parameter( unsigned opcode, unsigned size, GLenum target, GLuint index,
	       void * params )
d68 3
a70 3
    __GLXcontext * const gc = __glXGetCurrentContext();
    Display * const dpy = gc->currentDpy;
    const GLuint cmdlen = 12;
d72 4
a75 4
    if (__builtin_expect(dpy != NULL, 1)) {
        GLubyte const * pc = __glXSetupVendorRequest(gc,
						     X_GLXVendorPrivateWithReply,
						     opcode, cmdlen);
d77 3
a79 3
	*((GLenum *)(pc +  0)) = target;
	*((GLuint *)(pc +  4)) = index;
	*((GLuint *)(pc +  8)) = 0;
d81 5
a85 4
        (void) __glXReadReply(dpy, size, params, GL_FALSE);
        UnlockDisplay(dpy); SyncHandle();
    }
    return;
d89 3
a91 2
void __indirect_glGetProgramEnvParameterfvARB( GLenum target, GLuint index,
					       GLfloat * params )
d93 1
a93 1
    get_parameter( 1296, 4, target, index, params );
d97 3
a99 2
void __indirect_glGetProgramEnvParameterdvARB( GLenum target, GLuint index,
					       GLdouble * params )
d101 1
a101 1
    get_parameter( 1297, 8, target, index, params );
d105 3
a107 2
void __indirect_glGetProgramLocalParameterfvARB( GLenum target, GLuint index,
						 GLfloat * params )
d109 1
a109 1
    get_parameter( 1305, 4, target, index, params );
d113 3
a115 2
void __indirect_glGetProgramLocalParameterdvARB( GLenum target, GLuint index,
						 GLdouble * params )
d117 1
a117 1
    get_parameter( 1306, 8, target, index, params );
d121 3
a123 2
void __indirect_glGetVertexAttribPointervNV( GLuint index, GLenum pname,
					     GLvoid ** pointer )
d125 11
a135 11
    __GLXcontext * const gc = __glXGetCurrentContext();
    __GLXattribute * state = (__GLXattribute *)(gc->client_state_private);
 
    if ( pname != GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB ) {
	__glXSetError( gc, GL_INVALID_ENUM );
    }
    
    if ( ! __glXGetArrayPointer( state, GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB,
				 index, pointer ) ) {
	__glXSetError( gc, GL_INVALID_VALUE );
    }
d146 2
a147 2
get_attrib_array_data( __GLXattribute * state, GLuint index, GLenum cap,
		       GLintptr * data )
d149 2
a150 2
    GLboolean retval = GL_FALSE;
    const GLenum attrib = GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB;
d152 4
a155 4
    switch( cap ) {
    case GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB:
	retval = __glXGetArrayEnable( state, attrib, index, data );
	break;
d157 3
a159 3
    case GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB:
	retval = __glXGetArraySize( state, attrib, index, data );
	break;
d161 3
a163 3
    case GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB:
	retval = __glXGetArrayStride( state, attrib, index, data );
	break;
d165 3
a167 3
    case GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB:
	retval = __glXGetArrayType( state, attrib, index, data );
	break;
d169 4
a172 4
    case GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB:
	retval = __glXGetArrayNormalized( state, attrib, index, data );
	break;
    }
d174 2
a175 2
    
    return retval;
d179 3
a181 3
static void get_vertex_attrib( __GLXcontext * gc, unsigned vop,
			       GLuint index, GLenum pname,
			       xReply * reply )
d183 7
a189 7
    Display * const dpy = gc->currentDpy;
    GLubyte * const pc = __glXSetupVendorRequest(gc,
						 X_GLXVendorPrivateWithReply,
						 vop, 8);
						     
    *((uint32_t *)(pc +  0)) = index;
    *((uint32_t *)(pc +  4)) = pname;
d191 1
a191 1
    (void) _XReply( dpy, reply, 0, False );
d195 2
a196 2
void __indirect_glGetVertexAttribivARB( GLuint index, GLenum pname,
					GLint * params )
d198 4
a201 4
    __GLXcontext * const gc = __glXGetCurrentContext();
    Display * const dpy = gc->currentDpy;
    __GLXattribute * state = (__GLXattribute *)(gc->client_state_private);
    xGLXSingleReply reply;
d204 1
a204 1
    get_vertex_attrib( gc, 1303, index, pname, (xReply *) & reply );
d206 2
a207 2
    if ( reply.size != 0 ) {
	GLintptr data;
d210 12
a221 12
	if ( get_attrib_array_data( state, index, pname, & data ) ) {
	    *params = (GLint) data;
	}
	else {
	    if (reply.size == 1) {
		*params = (GLint) reply.pad3;
	    } 
	    else {
		_XRead(dpy, (void *) params, 4 * reply.size);
	    }
	}
    }
d223 2
a224 2
    UnlockDisplay(dpy);
    SyncHandle();
d228 3
a230 2
void __indirect_glGetVertexAttribfvARB( GLuint index, GLenum pname,
					GLfloat * params )
d232 4
a235 4
    __GLXcontext * const gc = __glXGetCurrentContext();
    Display * const dpy = gc->currentDpy;
    __GLXattribute * state = (__GLXattribute *)(gc->client_state_private);
    xGLXSingleReply reply;
d238 1
a238 1
    get_vertex_attrib( gc, 1302, index, pname, (xReply *) & reply );
d240 2
a241 2
    if ( reply.size != 0 ) {
	GLintptr data;
d244 12
a255 12
	if ( get_attrib_array_data( state, index, pname, & data ) ) {
	    *params = (GLfloat) data;
	}
	else {
	    if (reply.size == 1) {
		(void) memcpy( params, & reply.pad3, sizeof( GLfloat ) );
	    } 
	    else {
		_XRead(dpy, (void *) params, 4 * reply.size);
	    }
	}
    }
d257 2
a258 2
    UnlockDisplay(dpy);
    SyncHandle();
d262 3
a264 2
void __indirect_glGetVertexAttribdvARB( GLuint index, GLenum pname,
					GLdouble * params )
d266 4
a269 4
    __GLXcontext * const gc = __glXGetCurrentContext();
    Display * const dpy = gc->currentDpy;
    __GLXattribute * state = (__GLXattribute *)(gc->client_state_private);
    xGLXSingleReply reply;
d272 1
a272 1
    get_vertex_attrib( gc, 1301, index, pname, (xReply *) & reply );
d274 2
a275 2
    if ( reply.size != 0 ) {
	GLintptr data;
d278 12
a289 12
	if ( get_attrib_array_data( state, index, pname, & data ) ) {
	    *params = (GLdouble) data;
	}
	else {
	    if (reply.size == 1) {
		(void) memcpy( params, & reply.pad3, sizeof( GLdouble ) );
	    } 
	    else {
		_XRead(dpy, (void *) params, 8 * reply.size);
	    }
	}
    }
d291 2
a292 2
    UnlockDisplay(dpy);
    SyncHandle();
@


1.2
log
@Include "glheader.h" to get a definition of __builtin_expect for gcc 2.95.
@
text
@d26 1
a32 1
#include "glheader.h"
d196 7
a202 1
	if ( ! get_attrib_array_data( state, index, pname, params ) ) {
@


1.1
log
@Initial revision
@
text
@d32 1
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@
