head	1.3;
access;
symbols
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2010.05.22.20.06.15;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.38;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.54.42;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.54.42;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@/*
 * (C) Copyright IBM Corporation 2004
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDERS AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include <GL/gl.h>
#include "indirect.h"

static void
TransposeMatrixf(const GLfloat s[16], GLfloat d[16])
{
   int i, j;
   for (i = 0; i < 4; i++) {
      for (j = 0; j < 4; j++) {
         d[i * 4 + j] = s[j * 4 + i];
      }
   }
}

static void
TransposeMatrixd(const GLdouble s[16], GLdouble d[16])
{
   int i, j;
   for (i = 0; i < 4; i++) {
      for (j = 0; j < 4; j++) {
         d[i * 4 + j] = s[j * 4 + i];
      }
   }
}


void
__indirect_glLoadTransposeMatrixdARB(const GLdouble * m)
{
   GLdouble mt[16];

   TransposeMatrixd(m, mt);
   __indirect_glLoadMatrixd(mt);
}

void
__indirect_glLoadTransposeMatrixfARB(const GLfloat * m)
{
   GLfloat mt[16];

   TransposeMatrixf(m, mt);
   __indirect_glLoadMatrixf(mt);
}

void
__indirect_glMultTransposeMatrixdARB(const GLdouble * m)
{
   GLdouble mt[16];

   TransposeMatrixd(m, mt);
   __indirect_glMultMatrixd(mt);
}

void
__indirect_glMultTransposeMatrixfARB(const GLfloat * m)
{
   GLfloat mt[16];

   TransposeMatrixf(m, mt);
   __indirect_glMultMatrixf(mt);
}
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@@


1.1
log
@Initial revision
@
text
@d28 2
a29 1
static void TransposeMatrixf(const GLfloat s[16], GLfloat d[16])
d31 6
a36 6
    int i, j;
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            d[i*4+j] = s[j*4+i];
        }
    }
d39 2
a40 1
static void TransposeMatrixd(const GLdouble s[16], GLdouble d[16])
d42 6
a47 6
    int i, j;
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            d[i*4+j] = s[j*4+i];
        }
    }
d52 1
a52 1
__indirect_glLoadTransposeMatrixdARB( const GLdouble * m )
d55 3
a57 3
   
   TransposeMatrixd( m, mt );
   __indirect_glLoadMatrixd( mt );
d61 1
a61 1
__indirect_glLoadTransposeMatrixfARB( const GLfloat * m )
d65 2
a66 2
   TransposeMatrixf( m, mt );
   __indirect_glLoadMatrixf( mt );
d70 1
a70 1
__indirect_glMultTransposeMatrixdARB( const GLdouble * m )
d73 3
a75 3
   
   TransposeMatrixd( m, mt );
   __indirect_glMultMatrixd( mt );
d79 1
a79 1
__indirect_glMultTransposeMatrixfARB( const GLfloat * m )
d83 2
a84 2
   TransposeMatrixf( m, mt );
   __indirect_glMultMatrixf( mt );
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@
