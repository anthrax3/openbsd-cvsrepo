head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.0.14
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@// @;


1.2
date	2013.09.05.14.03.19;	author jsg;	state dead;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.13;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge Mesa 9.2.0
@
text
@/***********************************************************
 *	Copyright (C) 1997, Be Inc.  Copyright (C) 1999, Jake Hamby.
 *
 * This program is freely distributable without licensing fees
 * and is provided without guarantee or warrantee expressed or
 * implied. This program is -not- in the public domain.
 *
 *  FILE:	glutBlocker.cpp
 *
 *	DESCRIPTION:	helper class for GLUT event loop.
 *		if a window receives an event, wake up the event loop.
 ***********************************************************/

/***********************************************************
 *	Headers
 ***********************************************************/
#include "glutBlocker.h"

/***********************************************************
 *	Global variable
 ***********************************************************/
GlutBlocker gBlock;

/***********************************************************
 *	Member functions
 ***********************************************************/
GlutBlocker::GlutBlocker() {
	gSem = create_sem(1, "gSem");
	eSem = create_sem(0, "eSem");
	events = false;
	sleeping = false;
}

GlutBlocker::~GlutBlocker() {
	delete_sem(eSem);
	delete_sem(gSem);
}

void GlutBlocker::WaitEvent() {
	acquire_sem(gSem);
	if(!events) {			// wait for new event
		sleeping = true;
		release_sem(gSem);
		acquire_sem(eSem);	// next event will release eSem
	} else {
		release_sem(gSem);
	}
}

void GlutBlocker::WaitEvent(bigtime_t usecs) {
	acquire_sem(gSem);
	if(!events) {			// wait for new event
		sleeping = true;
		release_sem(gSem);
		acquire_sem_etc(eSem, 1, B_TIMEOUT, usecs);	// wait for next event or timeout
	} else {
		release_sem(gSem);
	}
}

void GlutBlocker::NewEvent() {
	acquire_sem(gSem);
	events = true;		// next call to WaitEvent returns immediately
	if(sleeping) {
		sleeping = false;
		release_sem(eSem);	// if event loop is blocking, wake it up
	}
	release_sem(gSem);
}
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@

