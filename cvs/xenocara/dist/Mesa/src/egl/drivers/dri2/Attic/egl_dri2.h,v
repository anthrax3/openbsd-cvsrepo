head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.25;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.02.20.23.09.51;	author jsg;	state Exp;
branches;
next	1.4;
commitid	4ry2gvZGMXkCUD2n;

1.4
date	2015.01.25.14.41.14;	author jsg;	state Exp;
branches;
next	1.3;
commitid	mcxB0JvoI9gTDYXU;

1.3
date	2014.07.09.21.08.51;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.13.59.22;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.02;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.09.15;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.33.40;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.05.57;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.43.05;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright © 2011 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Kristian Høgsberg <krh@@bitplanet.net>
 */

#ifndef EGL_DRI2_INCLUDED
#define EGL_DRI2_INCLUDED

#ifdef HAVE_X11_PLATFORM
#include <xcb/xcb.h>
#include <xcb/dri2.h>
#include <xcb/xfixes.h>
#include <X11/Xlib-xcb.h>
#endif

#ifdef HAVE_WAYLAND_PLATFORM
#include <wayland-client.h>
#include "wayland-egl-priv.h"
#endif

#include <GL/gl.h>
#include <GL/internal/dri_interface.h>

#ifdef HAVE_DRM_PLATFORM
#include <gbm_driint.h>
#endif

#ifdef HAVE_ANDROID_PLATFORM
#define LOG_TAG "EGL-DRI2"

#if ANDROID_VERSION >= 0x0400
#  include <system/window.h>
#else
#  define android_native_buffer_t ANativeWindowBuffer
#  include <ui/egl/android_natives.h>
#  include <ui/android_native_buffer.h>
#endif

#include <hardware/gralloc.h>
#include <gralloc_drm_handle.h>
#include <cutils/log.h>

#endif /* HAVE_ANDROID_PLATFORM */

#include "eglconfig.h"
#include "eglcontext.h"
#include "egldisplay.h"
#include "egldriver.h"
#include "eglcurrent.h"
#include "egllog.h"
#include "eglsurface.h"
#include "eglimage.h"

#define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))

struct wl_buffer;

struct dri2_egl_driver
{
   _EGLDriver base;

   void *handle;
   _EGLProc (*get_proc_address)(const char *procname);
   void (*glFlush)(void);
};

struct dri2_egl_display_vtbl {
   int (*authenticate)(_EGLDisplay *disp, uint32_t id);

   _EGLSurface* (*create_window_surface)(_EGLDriver *drv, _EGLDisplay *dpy,
                                         _EGLConfig *config,
                                         void *native_window,
                                         const EGLint *attrib_list);

   _EGLSurface* (*create_pixmap_surface)(_EGLDriver *drv, _EGLDisplay *dpy,
                                         _EGLConfig *config,
                                         void *native_pixmap,
                                         const EGLint *attrib_list);

   _EGLSurface* (*create_pbuffer_surface)(_EGLDriver *drv, _EGLDisplay *dpy,
                                          _EGLConfig *config,
                                          const EGLint *attrib_list);

   EGLBoolean (*destroy_surface)(_EGLDriver *drv, _EGLDisplay *dpy,
                                 _EGLSurface *surface);

   EGLBoolean (*swap_interval)(_EGLDriver *drv, _EGLDisplay *dpy,
                               _EGLSurface *surf, EGLint interval);

   _EGLImage* (*create_image)(_EGLDriver *drv, _EGLDisplay *dpy,
                              _EGLContext *ctx, EGLenum target,
                              EGLClientBuffer buffer,
                              const EGLint *attr_list);

   EGLBoolean (*swap_buffers)(_EGLDriver *drv, _EGLDisplay *dpy,
                              _EGLSurface *surf);

   EGLBoolean (*swap_buffers_with_damage)(_EGLDriver *drv, _EGLDisplay *dpy,     
                                          _EGLSurface *surface,                  
                                          const EGLint *rects, EGLint n_rects);  

   EGLBoolean (*swap_buffers_region)(_EGLDriver *drv, _EGLDisplay *dpy,
                                     _EGLSurface *surf, EGLint numRects,
                                     const EGLint *rects);

   EGLBoolean (*post_sub_buffer)(_EGLDriver *drv, _EGLDisplay *dpy,
                                 _EGLSurface *surf,
                                 EGLint x, EGLint y,
                                 EGLint width, EGLint height);

   EGLBoolean (*copy_buffers)(_EGLDriver *drv, _EGLDisplay *dpy,
                              _EGLSurface *surf, void *native_pixmap_target);

   EGLint (*query_buffer_age)(_EGLDriver *drv, _EGLDisplay *dpy,
                              _EGLSurface *surf);

   struct wl_buffer* (*create_wayland_buffer_from_image)(
                        _EGLDriver *drv, _EGLDisplay *dpy, _EGLImage *img);
};

struct dri2_egl_display
{
   const struct dri2_egl_display_vtbl *vtbl;

   int                       dri2_major;
   int                       dri2_minor;
   __DRIscreen              *dri_screen;
   int                       own_dri_screen;
   const __DRIconfig       **driver_configs;
   void                     *driver;
   const __DRIcoreExtension       *core;
   const __DRIdri2Extension       *dri2;
   const __DRIswrastExtension     *swrast;
   const __DRI2flushExtension     *flush;
   const __DRItexBufferExtension  *tex_buffer;
   const __DRIimageExtension      *image;
   const __DRIrobustnessExtension *robustness;
   const __DRI2configQueryExtension *config;
   int                       fd;

   int                       own_device;
   int                       swap_available;
   int                       invalidate_available;
   int                       min_swap_interval;
   int                       max_swap_interval;
   int                       default_swap_interval;
#ifdef HAVE_DRM_PLATFORM
   struct gbm_dri_device    *gbm_dri;
#endif

   char                     *device_name;
   char                     *driver_name;

   __DRIdri2LoaderExtension    dri2_loader_extension;
   __DRIswrastLoaderExtension  swrast_loader_extension;
   const __DRIextension     *extensions[5];
   const __DRIextension    **driver_extensions;

#ifdef HAVE_X11_PLATFORM
   xcb_connection_t         *conn;
#endif

#ifdef HAVE_WAYLAND_PLATFORM
   struct wl_display        *wl_dpy;
   struct wl_registry       *wl_registry;
   struct wl_drm            *wl_server_drm;
   struct wl_drm            *wl_drm;
   struct wl_event_queue    *wl_queue;
   int			     authenticated;
   int			     formats;
   uint32_t                  capabilities;
#endif
};

struct dri2_egl_context
{
   _EGLContext   base;
   __DRIcontext *dri_context;
};

#ifdef HAVE_WAYLAND_PLATFORM
enum wayland_buffer_type {
   WL_BUFFER_FRONT,
   WL_BUFFER_BACK,
   WL_BUFFER_THIRD,
   WL_BUFFER_COUNT
};
#endif

struct dri2_egl_surface
{
   _EGLSurface          base;
   __DRIdrawable       *dri_drawable;
   __DRIbuffer          buffers[5];
   int                  buffer_count;
   int                  have_fake_front;

#ifdef HAVE_X11_PLATFORM
   xcb_drawable_t       drawable;
   xcb_xfixes_region_t  region;
   int                  depth;
   int                  bytes_per_pixel;
   xcb_gcontext_t       gc;
   xcb_gcontext_t       swapgc;
#endif

#ifdef HAVE_WAYLAND_PLATFORM
   struct wl_egl_window  *wl_win;
   int                    dx;
   int                    dy;
   struct wl_callback    *throttle_callback;
   int			  format;
#endif

#ifdef HAVE_DRM_PLATFORM
   struct gbm_dri_surface *gbm_surf;
#endif

#if defined(HAVE_WAYLAND_PLATFORM) || defined(HAVE_DRM_PLATFORM)
   __DRIbuffer           *dri_buffers[__DRI_BUFFER_COUNT];
   struct {
#ifdef HAVE_WAYLAND_PLATFORM
      struct wl_buffer   *wl_buffer;
      __DRIimage         *dri_image;
#endif
#ifdef HAVE_DRM_PLATFORM
      struct gbm_bo       *bo;
#endif
      int                 locked;
      int                 age;
   } color_buffers[4], *back, *current;
#endif

#ifdef HAVE_ANDROID_PLATFORM
   struct ANativeWindow *window;
   struct ANativeWindowBuffer *buffer;

   /* EGL-owned buffers */
   __DRIbuffer           *local_buffers[__DRI_BUFFER_COUNT];
#endif
};


struct dri2_egl_config
{
   _EGLConfig         base;
   const __DRIconfig *dri_single_config;
   const __DRIconfig *dri_double_config;
};

struct dri2_egl_image
{
   _EGLImage   base;
   __DRIimage *dri_image;
};

/* From xmlpool/options.h, user exposed so should be stable */
#define DRI_CONF_VBLANK_NEVER 0
#define DRI_CONF_VBLANK_DEF_INTERVAL_0 1
#define DRI_CONF_VBLANK_DEF_INTERVAL_1 2
#define DRI_CONF_VBLANK_ALWAYS_SYNC 3

/* standard typecasts */
_EGL_DRIVER_STANDARD_TYPECASTS(dri2_egl)
_EGL_DRIVER_TYPECAST(dri2_egl_image, _EGLImage, obj)

extern const __DRIimageLookupExtension image_lookup_extension;
extern const __DRIuseInvalidateExtension use_invalidate;

EGLBoolean
dri2_load_driver(_EGLDisplay *disp);

/* Helper for platforms not using dri2_create_screen */
void
dri2_setup_screen(_EGLDisplay *disp);

EGLBoolean
dri2_load_driver_swrast(_EGLDisplay *disp);

EGLBoolean
dri2_create_screen(_EGLDisplay *disp);

__DRIimage *
dri2_lookup_egl_image(__DRIscreen *screen, void *image, void *data);

struct dri2_egl_config *
dri2_add_config(_EGLDisplay *disp, const __DRIconfig *dri_config, int id,
		EGLint surface_type, const EGLint *attr_list,
		const unsigned int *rgba_masks);

_EGLImage *
dri2_create_image_khr(_EGLDriver *drv, _EGLDisplay *disp,
		      _EGLContext *ctx, EGLenum target,
		      EGLClientBuffer buffer, const EGLint *attr_list);

EGLBoolean
dri2_initialize_x11(_EGLDriver *drv, _EGLDisplay *disp);

EGLBoolean
dri2_initialize_drm(_EGLDriver *drv, _EGLDisplay *disp);

EGLBoolean
dri2_initialize_wayland(_EGLDriver *drv, _EGLDisplay *disp);

EGLBoolean
dri2_initialize_android(_EGLDriver *drv, _EGLDisplay *disp);

#endif /* EGL_DRI2_INCLUDED */
@


1.5
log
@Merge Mesa 10.2.9
@
text
@@


1.4
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a140 4

   EGLBoolean (*get_sync_values)(_EGLDisplay *display, _EGLSurface *surface,
                                 EGLuint64KHR *ust, EGLuint64KHR *msc,
                                 EGLuint64KHR *sbc);
a182 1
   int                      screen;
@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d141 4
d187 1
@


1.2
log
@Merge Mesa 9.2.0
@
text
@a39 1
#include "wayland-drm.h"
d78 2
d89 54
d145 2
d153 8
a160 8
   __DRIcoreExtension       *core;
   __DRIdri2Extension       *dri2;
   __DRIswrastExtension     *swrast;
   __DRI2flushExtension     *flush;
   __DRItexBufferExtension  *tex_buffer;
   __DRIimageExtension      *image;
   __DRIrobustnessExtension *robustness;
   __DRI2configQueryExtension *config;
d178 2
a179 1
   const __DRIextension     *extensions[4];
a194 2

   int (*authenticate) (_EGLDisplay *disp, uint32_t id);
a218 1
   int                  swap_interval;
d233 1
a233 1
   struct wl_callback    *frame_callback;
a246 1
      int                 pitch, name;
d253 1
a253 1
   } color_buffers[3], *back, *current;
d279 6
d310 1
a310 1
		int depth, EGLint surface_type, const EGLint *attr_list,
a328 5

char *
dri2_get_driver_for_fd(int fd);
char *
dri2_get_device_name_for_fd(int fd);
@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d51 17
d102 2
d106 6
d129 1
d132 1
d134 2
a153 2

#define __DRI_BUFFER_COUNT 10
a155 6
enum dri2_surface_type {
   DRI2_WINDOW_SURFACE,
   DRI2_PIXMAP_SURFACE,
   DRI2_PBUFFER_SURFACE
};

a173 1
   enum dri2_surface_type type;
a175 3
   struct wl_egl_pixmap  *wl_pix;
   struct wl_buffer      *wl_drm_buffer[WL_BUFFER_COUNT];
   int                    wl_buffer_lock[WL_BUFFER_COUNT];
d178 9
d188 12
a199 3
   __DRIbuffer           *third_buffer;
   __DRIbuffer           *pending_buffer;
   EGLBoolean             block_swap_buffers;
a200 1
};
d202 7
a208 3
struct dri2_egl_buffer {
   __DRIbuffer *dri_buffer;
   struct dri2_egl_display *dri2_dpy;
d250 2
a251 1
		int depth, EGLint surface_type, const EGLint *attr_list);
d266 3
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@a50 17
#ifdef HAVE_ANDROID_PLATFORM
#define LOG_TAG "EGL-DRI2"

#if ANDROID_VERSION >= 0x0400
#  include <system/window.h>
#else
#  define android_native_buffer_t ANativeWindowBuffer
#  include <ui/egl/android_natives.h>
#  include <ui/android_native_buffer.h>
#endif

#include <hardware/gralloc.h>
#include <gralloc_drm_handle.h>
#include <cutils/log.h>

#endif /* HAVE_ANDROID_PLATFORM */

a84 2
   __DRIrobustnessExtension *robustness;
   __DRI2configQueryExtension *config;
a86 6
   int                       own_device;
   int                       swap_available;
   int                       invalidate_available;
   int                       min_swap_interval;
   int                       max_swap_interval;
   int                       default_swap_interval;
a103 1
   struct wl_registry       *wl_registry;
a105 1
   struct wl_event_queue    *wl_queue;
a106 2
   int			     formats;
   uint32_t                  capabilities;
d125 2
d129 6
d153 1
d156 3
a160 9
   struct wl_callback    *frame_callback;
   int			  format;
#endif

#ifdef HAVE_DRM_PLATFORM
   struct gbm_dri_surface *gbm_surf;
#endif

#if defined(HAVE_WAYLAND_PLATFORM) || defined(HAVE_DRM_PLATFORM)
d162 3
a164 5
   struct {
#ifdef HAVE_WAYLAND_PLATFORM
      struct wl_buffer   *wl_buffer;
      __DRIimage         *dri_image;
      int                 pitch, name;
d166 1
a166 11
#ifdef HAVE_DRM_PLATFORM
      struct gbm_bo       *bo;
#endif
      int                 locked;
      int                 age;
   } color_buffers[3], *back, *current;
#endif

#ifdef HAVE_ANDROID_PLATFORM
   struct ANativeWindow *window;
   struct ANativeWindowBuffer *buffer;
d168 3
a170 3
   /* EGL-owned buffers */
   __DRIbuffer           *local_buffers[__DRI_BUFFER_COUNT];
#endif
d212 1
a212 2
		int depth, EGLint surface_type, const EGLint *attr_list,
		const unsigned int *rgba_masks);
a226 3

EGLBoolean
dri2_initialize_android(_EGLDriver *drv, _EGLDisplay *disp);
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d40 1
a78 2
struct wl_buffer;

a87 54
struct dri2_egl_display_vtbl {
   int (*authenticate)(_EGLDisplay *disp, uint32_t id);

   _EGLSurface* (*create_window_surface)(_EGLDriver *drv, _EGLDisplay *dpy,
                                         _EGLConfig *config,
                                         void *native_window,
                                         const EGLint *attrib_list);

   _EGLSurface* (*create_pixmap_surface)(_EGLDriver *drv, _EGLDisplay *dpy,
                                         _EGLConfig *config,
                                         void *native_pixmap,
                                         const EGLint *attrib_list);

   _EGLSurface* (*create_pbuffer_surface)(_EGLDriver *drv, _EGLDisplay *dpy,
                                          _EGLConfig *config,
                                          const EGLint *attrib_list);

   EGLBoolean (*destroy_surface)(_EGLDriver *drv, _EGLDisplay *dpy,
                                 _EGLSurface *surface);

   EGLBoolean (*swap_interval)(_EGLDriver *drv, _EGLDisplay *dpy,
                               _EGLSurface *surf, EGLint interval);

   _EGLImage* (*create_image)(_EGLDriver *drv, _EGLDisplay *dpy,
                              _EGLContext *ctx, EGLenum target,
                              EGLClientBuffer buffer,
                              const EGLint *attr_list);

   EGLBoolean (*swap_buffers)(_EGLDriver *drv, _EGLDisplay *dpy,
                              _EGLSurface *surf);

   EGLBoolean (*swap_buffers_with_damage)(_EGLDriver *drv, _EGLDisplay *dpy,     
                                          _EGLSurface *surface,                  
                                          const EGLint *rects, EGLint n_rects);  

   EGLBoolean (*swap_buffers_region)(_EGLDriver *drv, _EGLDisplay *dpy,
                                     _EGLSurface *surf, EGLint numRects,
                                     const EGLint *rects);

   EGLBoolean (*post_sub_buffer)(_EGLDriver *drv, _EGLDisplay *dpy,
                                 _EGLSurface *surf,
                                 EGLint x, EGLint y,
                                 EGLint width, EGLint height);

   EGLBoolean (*copy_buffers)(_EGLDriver *drv, _EGLDisplay *dpy,
                              _EGLSurface *surf, void *native_pixmap_target);

   EGLint (*query_buffer_age)(_EGLDriver *drv, _EGLDisplay *dpy,
                              _EGLSurface *surf);

   struct wl_buffer* (*create_wayland_buffer_from_image)(
                        _EGLDriver *drv, _EGLDisplay *dpy, _EGLImage *img);
};

a89 2
   const struct dri2_egl_display_vtbl *vtbl;

d96 8
a103 8
   const __DRIcoreExtension       *core;
   const __DRIdri2Extension       *dri2;
   const __DRIswrastExtension     *swrast;
   const __DRI2flushExtension     *flush;
   const __DRItexBufferExtension  *tex_buffer;
   const __DRIimageExtension      *image;
   const __DRIrobustnessExtension *robustness;
   const __DRI2configQueryExtension *config;
d121 1
a121 2
   const __DRIextension     *extensions[5];
   const __DRIextension    **driver_extensions;
d137 2
d163 1
d178 1
a178 1
   struct wl_callback    *throttle_callback;
d192 1
d199 1
a199 1
   } color_buffers[4], *back, *current;
a224 6
/* From xmlpool/options.h, user exposed so should be stable */
#define DRI_CONF_VBLANK_NEVER 0
#define DRI_CONF_VBLANK_DEF_INTERVAL_0 1
#define DRI_CONF_VBLANK_DEF_INTERVAL_1 2
#define DRI_CONF_VBLANK_ALWAYS_SYNC 3

d250 1
a250 1
		EGLint surface_type, const EGLint *attr_list,
d269 5
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@a140 4

   EGLBoolean (*get_sync_values)(_EGLDisplay *display, _EGLSurface *surface,
                                 EGLuint64KHR *ust, EGLuint64KHR *msc,
                                 EGLuint64KHR *sbc);
a182 1
   int                      screen;
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d141 4
d187 1
@


