head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.25;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.51;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.11.24.06.19.52;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2013.09.05.13.59.26;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.09.26;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.11.24.05.52.48;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.40;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright © 2011 Kristian Høgsberg
 * Copyright © 2011 Benjamin Franzke
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Kristian Høgsberg <krh@@bitplanet.net>
 *    Benjamin Franzke <benjaminfranzke@@googlemail.com>
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>
#include <unistd.h>

#include <wayland-server.h>
#include "wayland-drm.h"
#include "wayland-drm-server-protocol.h"

#define MIN(x,y) (((x)<(y))?(x):(y))

struct wl_drm {
	struct wl_display *display;
	struct wl_global *wl_drm_global;

	void *user_data;
	char *device_name;
        uint32_t flags;

	struct wayland_drm_callbacks *callbacks;

        struct wl_buffer_interface buffer_interface;
};

static void
destroy_buffer(struct wl_resource *resource)
{
	struct wl_drm_buffer *buffer = resource->data;
	struct wl_drm *drm = buffer->drm;

	drm->callbacks->release_buffer(drm->user_data, buffer);
	free(buffer);
}

static void
buffer_destroy(struct wl_client *client, struct wl_resource *resource)
{
	wl_resource_destroy(resource);
}

static void
create_buffer(struct wl_client *client, struct wl_resource *resource,
              uint32_t id, uint32_t name, int fd,
              int32_t width, int32_t height,
              uint32_t format,
              int32_t offset0, int32_t stride0,
              int32_t offset1, int32_t stride1,
              int32_t offset2, int32_t stride2)
{
	struct wl_drm *drm = resource->data;
	struct wl_drm_buffer *buffer;

	buffer = calloc(1, sizeof *buffer);
	if (buffer == NULL) {
		wl_resource_post_no_memory(resource);
		return;
	}

	buffer->drm = drm;
	buffer->width = width;
	buffer->height = height;
	buffer->format = format;
	buffer->offset[0] = offset0;
	buffer->stride[0] = stride0;
	buffer->offset[1] = offset1;
	buffer->stride[1] = stride1;
	buffer->offset[2] = offset2;
	buffer->stride[2] = stride2;

        drm->callbacks->reference_buffer(drm->user_data, name, fd, buffer);
	if (buffer->driver_buffer == NULL) {
		wl_resource_post_error(resource,
				       WL_DRM_ERROR_INVALID_NAME,
				       "invalid name");
		return;
	}

	buffer->resource =
		wl_resource_create(client, &wl_buffer_interface, 1, id);
	if (!buffer->resource) {
		wl_resource_post_no_memory(resource);
		free(buffer);
		return;
	}

	wl_resource_set_implementation(buffer->resource,
				       (void (**)(void)) &drm->buffer_interface,
				       buffer, destroy_buffer);
}

static void
drm_create_buffer(struct wl_client *client, struct wl_resource *resource,
		  uint32_t id, uint32_t name, int32_t width, int32_t height,
		  uint32_t stride, uint32_t format)
{
        switch (format) {
        case WL_DRM_FORMAT_ARGB8888:
        case WL_DRM_FORMAT_XRGB8888:
        case WL_DRM_FORMAT_YUYV:
        case WL_DRM_FORMAT_RGB565:
                break;
        default:
                wl_resource_post_error(resource,
                                       WL_DRM_ERROR_INVALID_FORMAT,
                                       "invalid format");
           return;
        }

        create_buffer(client, resource, id,
                      name, -1, width, height, format, 0, stride, 0, 0, 0, 0);
}

static void
drm_create_planar_buffer(struct wl_client *client,
                         struct wl_resource *resource,
                         uint32_t id, uint32_t name,
                         int32_t width, int32_t height, uint32_t format,
                         int32_t offset0, int32_t stride0,
                         int32_t offset1, int32_t stride1,
                         int32_t offset2, int32_t stride2)
{
        switch (format) {
	case WL_DRM_FORMAT_YUV410:
	case WL_DRM_FORMAT_YUV411:
	case WL_DRM_FORMAT_YUV420:
	case WL_DRM_FORMAT_YUV422:
	case WL_DRM_FORMAT_YUV444:
	case WL_DRM_FORMAT_NV12:
        case WL_DRM_FORMAT_NV16:
                break;
        default:
                wl_resource_post_error(resource,
                                       WL_DRM_ERROR_INVALID_FORMAT,
                                       "invalid format");
           return;
        }

        create_buffer(client, resource, id, name, -1, width, height, format,
                      offset0, stride0, offset1, stride1, offset2, stride2);
}

static void
drm_create_prime_buffer(struct wl_client *client,
                        struct wl_resource *resource,
                        uint32_t id, int fd,
                        int32_t width, int32_t height, uint32_t format,
                        int32_t offset0, int32_t stride0,
                        int32_t offset1, int32_t stride1,
                        int32_t offset2, int32_t stride2)
{
        create_buffer(client, resource, id, 0, fd, width, height, format,
                      offset0, stride0, offset1, stride1, offset2, stride2);
        close(fd);
}

static void
drm_authenticate(struct wl_client *client,
		 struct wl_resource *resource, uint32_t id)
{
	struct wl_drm *drm = resource->data;

	if (drm->callbacks->authenticate(drm->user_data, id) < 0)
		wl_resource_post_error(resource,
				       WL_DRM_ERROR_AUTHENTICATE_FAIL,
				       "authenicate failed");
	else
		wl_resource_post_event(resource, WL_DRM_AUTHENTICATED);
}

const static struct wl_drm_interface drm_interface = {
	drm_authenticate,
	drm_create_buffer,
        drm_create_planar_buffer,
        drm_create_prime_buffer
};

static void
bind_drm(struct wl_client *client, void *data, uint32_t version, uint32_t id)
{
	struct wl_drm *drm = data;
	struct wl_resource *resource;
        uint32_t capabilities;

	resource = wl_resource_create(client, &wl_drm_interface,
				      MIN(version, 2), id);
	if (!resource) {
		wl_client_post_no_memory(client);
		return;
	}

	wl_resource_set_implementation(resource, &drm_interface, data, NULL);

	wl_resource_post_event(resource, WL_DRM_DEVICE, drm->device_name);
	wl_resource_post_event(resource, WL_DRM_FORMAT,
			       WL_DRM_FORMAT_ARGB8888);
	wl_resource_post_event(resource, WL_DRM_FORMAT,
			       WL_DRM_FORMAT_XRGB8888);
        wl_resource_post_event(resource, WL_DRM_FORMAT,
                               WL_DRM_FORMAT_RGB565);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV410);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV411);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV420);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV422);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV444);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_NV12);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_NV16);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUYV);

        capabilities = 0;
        if (drm->flags & WAYLAND_DRM_PRIME)
           capabilities |= WL_DRM_CAPABILITY_PRIME;

        if (version >= 2)
           wl_resource_post_event(resource, WL_DRM_CAPABILITIES, capabilities);
}

struct wl_drm_buffer *
wayland_drm_buffer_get(struct wl_drm *drm, struct wl_resource *resource)
{
	if (resource == NULL)
		return NULL;

        if (wl_resource_instance_of(resource, &wl_buffer_interface,
                                    &drm->buffer_interface))
		return wl_resource_get_user_data(resource);
        else
		return NULL;
}

struct wl_drm *
wayland_drm_init(struct wl_display *display, char *device_name,
                 struct wayland_drm_callbacks *callbacks, void *user_data,
                 uint32_t flags)
{
	struct wl_drm *drm;

	drm = malloc(sizeof *drm);

	drm->display = display;
	drm->device_name = strdup(device_name);
	drm->callbacks = callbacks;
	drm->user_data = user_data;
        drm->flags = flags;

        drm->buffer_interface.destroy = buffer_destroy;

	drm->wl_drm_global =
		wl_global_create(display, &wl_drm_interface, 2,
				 drm, bind_drm);

	return drm;
}

void
wayland_drm_uninit(struct wl_drm *drm)
{
	free(drm->device_name);

	wl_global_destroy(drm->wl_drm_global);

	free(drm);
}

uint32_t
wayland_drm_buffer_get_format(struct wl_drm_buffer *buffer)
{
	return buffer->format;
}

void *
wayland_drm_buffer_get_buffer(struct wl_drm_buffer *buffer)
{
	return buffer->driver_buffer;
}
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.3
ok mpi@@ kettenis@@
@
text
@d40 2
d44 1
d51 1
d90 2
a91 2
	buffer->buffer.width = width;
	buffer->buffer.height = height;
d108 7
a114 5
	buffer->buffer.resource.object.id = id;
	buffer->buffer.resource.object.interface = &wl_buffer_interface;
	buffer->buffer.resource.object.implementation =
		(void (**)(void)) &drm->buffer_interface;
	buffer->buffer.resource.data = buffer;
d116 3
a118 4
	buffer->buffer.resource.destroy = destroy_buffer;
	buffer->buffer.resource.client = resource->client;

	wl_client_add_resource(resource->client, &buffer->buffer.resource);
d130 1
d214 9
a222 2
	resource = wl_client_add_object(client, &wl_drm_interface,
					&drm_interface, id, data);
d228 2
d247 13
d274 1
d277 3
a279 1
	wl_display_add_global(display, &wl_drm_interface, drm, bind_drm);
d289 1
a289 1
	/* FIXME: need wl_display_del_{object,global} */
a293 7
int
wayland_buffer_is_drm(struct wl_drm *drm, struct wl_buffer *buffer)
{
	return buffer->resource.object.implementation == 
		(void (**)(void)) &drm->buffer_interface;
}

d295 1
a295 1
wayland_drm_buffer_get_format(struct wl_buffer *buffer_base)
a296 2
	struct wl_drm_buffer *buffer = (struct wl_drm_buffer *) buffer_base;

d301 1
a301 1
wayland_drm_buffer_get_buffer(struct wl_buffer *buffer_base)
a302 2
	struct wl_drm_buffer *buffer = (struct wl_drm_buffer *) buffer_base;

@


1.2
log
@Merge Mesa 9.2.0
@
text
@d48 1
a66 4
const static struct wl_buffer_interface drm_buffer_interface = {
	buffer_destroy
};

d107 1
a107 1
		(void (**)(void)) &drm_buffer_interface;
d246 1
d264 1
a264 1
wayland_buffer_is_drm(struct wl_buffer *buffer)
d267 1
a267 1
		(void (**)(void)) &drm_buffer_interface;
@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d34 1
a40 1
	struct wl_object object;
d45 1
a49 13
struct wl_drm_buffer {
	struct wl_buffer buffer;
	struct wl_drm *drm;
	
	void *driver_buffer;
};

static void
buffer_damage(struct wl_client *client, struct wl_buffer *buffer,
	      int32_t x, int32_t y, int32_t width, int32_t height)
{
}

d51 1
a51 1
destroy_buffer(struct wl_resource *resource, struct wl_client *client)
d53 1
a53 1
	struct wl_drm_buffer *buffer = (struct wl_drm_buffer *) resource;
d56 1
a56 2
	drm->callbacks->release_buffer(drm->user_data,
				       buffer->driver_buffer);
d61 1
a61 1
buffer_destroy(struct wl_client *client, struct wl_buffer *buffer)
d63 1
a63 1
	wl_resource_destroy(&buffer->resource, client, 0);
a66 1
	buffer_damage,
d71 7
a77 3
drm_create_buffer(struct wl_client *client, struct wl_drm *drm,
		  uint32_t id, uint32_t name, int32_t width, int32_t height,
		  uint32_t stride, struct wl_visual *visual)
d79 1
d84 1
a84 1
		wl_client_post_no_memory(client);
d91 7
a97 14
	buffer->buffer.visual = visual;
	buffer->buffer.client = client;

	if (!visual || visual->object.interface != &wl_visual_interface) {
		wl_client_post_error(client, &drm->object,
				     WL_DRM_ERROR_INVALID_VISUAL,
				     "invalid visual");
		return;
	}

	buffer->driver_buffer =
		drm->callbacks->reference_buffer(drm->user_data, name,
						 width, height,
						 stride, visual);
d99 1
d101 3
a103 3
		wl_client_post_error(client, &drm->object,
				     WL_DRM_ERROR_INVALID_NAME,
				     "invalid name");
d109 3
a111 2
	buffer->buffer.resource.object.implementation = (void (**)(void))
		&drm_buffer_interface;
d114 1
d116 65
a180 1
	wl_client_add_resource(client, &buffer->buffer.resource);
d185 1
a185 1
		 struct wl_drm *drm, uint32_t id)
d187 2
d190 3
a192 3
		wl_client_post_error(client, &drm->object,
				     WL_DRM_ERROR_AUTHENTICATE_FAIL,
				     "authenicate failed");
d194 1
a194 2
		wl_client_post_event(client, &drm->object,
				     WL_DRM_AUTHENTICATED);
d199 3
a201 1
	drm_create_buffer
d205 1
a205 2
post_drm_device(struct wl_client *client, 
		struct wl_object *global, uint32_t version)
d207 23
a229 1
	struct wl_drm *drm = (struct wl_drm *) global;
d231 2
a232 1
	wl_client_post_event(client, global, WL_DRM_DEVICE, drm->device_name);
d237 2
a238 1
                 struct wayland_drm_callbacks *callbacks, void *user_data)
d248 1
d250 1
a250 4
	drm->object.interface = &wl_drm_interface;
	drm->object.implementation = (void (**)(void)) &drm_interface;
	wl_display_add_object(display, &drm->object);
	wl_display_add_global(display, &drm->object, post_drm_device);
d270 8
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@a33 1
#include <unistd.h>
d40 1
a44 1
        uint32_t flags;
d49 13
d63 1
a63 1
destroy_buffer(struct wl_resource *resource)
d65 1
a65 1
	struct wl_drm_buffer *buffer = resource->data;
d68 2
a69 1
	drm->callbacks->release_buffer(drm->user_data, buffer);
d74 1
a74 1
buffer_destroy(struct wl_client *client, struct wl_resource *resource)
d76 1
a76 1
	wl_resource_destroy(resource);
d80 1
d85 3
a87 7
create_buffer(struct wl_client *client, struct wl_resource *resource,
              uint32_t id, uint32_t name, int fd,
              int32_t width, int32_t height,
              uint32_t format,
              int32_t offset0, int32_t stride0,
              int32_t offset1, int32_t stride1,
              int32_t offset2, int32_t stride2)
a88 1
	struct wl_drm *drm = resource->data;
d93 1
a93 1
		wl_resource_post_no_memory(resource);
d100 14
a113 7
	buffer->format = format;
	buffer->offset[0] = offset0;
	buffer->stride[0] = stride0;
	buffer->offset[1] = offset1;
	buffer->stride[1] = stride1;
	buffer->offset[2] = offset2;
	buffer->stride[2] = stride2;
a114 1
        drm->callbacks->reference_buffer(drm->user_data, name, fd, buffer);
d116 3
a118 3
		wl_resource_post_error(resource,
				       WL_DRM_ERROR_INVALID_NAME,
				       "invalid name");
d124 2
a125 3
	buffer->buffer.resource.object.implementation =
		(void (**)(void)) &drm_buffer_interface;
	buffer->buffer.resource.data = buffer;
a127 1
	buffer->buffer.resource.client = resource->client;
d129 1
a129 65
	wl_client_add_resource(resource->client, &buffer->buffer.resource);
}

static void
drm_create_buffer(struct wl_client *client, struct wl_resource *resource,
		  uint32_t id, uint32_t name, int32_t width, int32_t height,
		  uint32_t stride, uint32_t format)
{
        switch (format) {
        case WL_DRM_FORMAT_ARGB8888:
        case WL_DRM_FORMAT_XRGB8888:
        case WL_DRM_FORMAT_YUYV:
                break;
        default:
                wl_resource_post_error(resource,
                                       WL_DRM_ERROR_INVALID_FORMAT,
                                       "invalid format");
           return;
        }

        create_buffer(client, resource, id,
                      name, -1, width, height, format, 0, stride, 0, 0, 0, 0);
}

static void
drm_create_planar_buffer(struct wl_client *client,
                         struct wl_resource *resource,
                         uint32_t id, uint32_t name,
                         int32_t width, int32_t height, uint32_t format,
                         int32_t offset0, int32_t stride0,
                         int32_t offset1, int32_t stride1,
                         int32_t offset2, int32_t stride2)
{
        switch (format) {
	case WL_DRM_FORMAT_YUV410:
	case WL_DRM_FORMAT_YUV411:
	case WL_DRM_FORMAT_YUV420:
	case WL_DRM_FORMAT_YUV422:
	case WL_DRM_FORMAT_YUV444:
	case WL_DRM_FORMAT_NV12:
        case WL_DRM_FORMAT_NV16:
                break;
        default:
                wl_resource_post_error(resource,
                                       WL_DRM_ERROR_INVALID_FORMAT,
                                       "invalid format");
           return;
        }

        create_buffer(client, resource, id, name, -1, width, height, format,
                      offset0, stride0, offset1, stride1, offset2, stride2);
}

static void
drm_create_prime_buffer(struct wl_client *client,
                        struct wl_resource *resource,
                        uint32_t id, int fd,
                        int32_t width, int32_t height, uint32_t format,
                        int32_t offset0, int32_t stride0,
                        int32_t offset1, int32_t stride1,
                        int32_t offset2, int32_t stride2)
{
        create_buffer(client, resource, id, 0, fd, width, height, format,
                      offset0, stride0, offset1, stride1, offset2, stride2);
        close(fd);
d134 1
a134 1
		 struct wl_resource *resource, uint32_t id)
a135 2
	struct wl_drm *drm = resource->data;

d137 3
a139 3
		wl_resource_post_error(resource,
				       WL_DRM_ERROR_AUTHENTICATE_FAIL,
				       "authenicate failed");
d141 2
a142 1
		wl_resource_post_event(resource, WL_DRM_AUTHENTICATED);
d147 1
a147 3
	drm_create_buffer,
        drm_create_planar_buffer,
        drm_create_prime_buffer
d151 2
a152 1
bind_drm(struct wl_client *client, void *data, uint32_t version, uint32_t id)
d154 1
a154 23
	struct wl_drm *drm = data;
	struct wl_resource *resource;
        uint32_t capabilities;

	resource = wl_client_add_object(client, &wl_drm_interface,
					&drm_interface, id, data);
	wl_resource_post_event(resource, WL_DRM_DEVICE, drm->device_name);
	wl_resource_post_event(resource, WL_DRM_FORMAT,
			       WL_DRM_FORMAT_ARGB8888);
	wl_resource_post_event(resource, WL_DRM_FORMAT,
			       WL_DRM_FORMAT_XRGB8888);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV410);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV411);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV420);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV422);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUV444);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_NV12);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_NV16);
        wl_resource_post_event(resource, WL_DRM_FORMAT, WL_DRM_FORMAT_YUYV);

        capabilities = 0;
        if (drm->flags & WAYLAND_DRM_PRIME)
           capabilities |= WL_DRM_CAPABILITY_PRIME;
d156 1
a156 2
        if (version >= 2)
           wl_resource_post_event(resource, WL_DRM_CAPABILITIES, capabilities);
d161 1
a161 2
                 struct wayland_drm_callbacks *callbacks, void *user_data,
                 uint32_t flags)
a170 1
        drm->flags = flags;
d172 4
a175 1
	wl_display_add_global(display, &wl_drm_interface, drm, bind_drm);
a194 8
}

uint32_t
wayland_drm_buffer_get_format(struct wl_buffer *buffer_base)
{
	struct wl_drm_buffer *buffer = (struct wl_drm_buffer *) buffer_base;

	return buffer->format;
@


1.1.1.2
log
@Import Mesa 9.2.3
@
text
@a47 1
        struct wl_buffer_interface buffer_interface;
d66 4
d110 1
a110 1
		(void (**)(void)) &drm->buffer_interface;
a248 1
        drm->buffer_interface.destroy = buffer_destroy;
d266 1
a266 1
wayland_buffer_is_drm(struct wl_drm *drm, struct wl_buffer *buffer)
d269 1
a269 1
		(void (**)(void)) &drm->buffer_interface;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a39 2
#define MIN(x,y) (((x)<(y))?(x):(y))

a41 1
	struct wl_global *wl_drm_global;
a47 1

d86 2
a87 2
	buffer->width = width;
	buffer->height = height;
d104 8
a111 7
	buffer->resource =
		wl_resource_create(client, &wl_buffer_interface, 1, id);
	if (!buffer->resource) {
		wl_resource_post_no_memory(resource);
		free(buffer);
		return;
	}
d113 1
a113 3
	wl_resource_set_implementation(buffer->resource,
				       (void (**)(void)) &drm->buffer_interface,
				       buffer, destroy_buffer);
a124 1
        case WL_DRM_FORMAT_RGB565:
d208 2
a209 9
	resource = wl_resource_create(client, &wl_drm_interface,
				      MIN(version, 2), id);
	if (!resource) {
		wl_client_post_no_memory(client);
		return;
	}

	wl_resource_set_implementation(resource, &drm_interface, data, NULL);

a214 2
        wl_resource_post_event(resource, WL_DRM_FORMAT,
                               WL_DRM_FORMAT_RGB565);
a231 13
struct wl_drm_buffer *
wayland_drm_buffer_get(struct wl_drm *drm, struct wl_resource *resource)
{
	if (resource == NULL)
		return NULL;

        if (wl_resource_instance_of(resource, &wl_buffer_interface,
                                    &drm->buffer_interface))
		return wl_resource_get_user_data(resource);
        else
		return NULL;
}

a245 1

d248 1
a248 3
	drm->wl_drm_global =
		wl_global_create(display, &wl_drm_interface, 2,
				 drm, bind_drm);
d258 1
a258 1
	wl_global_destroy(drm->wl_drm_global);
d263 7
d271 1
a271 1
wayland_drm_buffer_get_format(struct wl_drm_buffer *buffer)
d273 2
d279 1
a279 1
wayland_drm_buffer_get_buffer(struct wl_drm_buffer *buffer)
d281 2
@


