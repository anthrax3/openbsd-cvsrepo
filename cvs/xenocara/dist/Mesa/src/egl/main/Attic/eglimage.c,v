head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.25;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.51;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.25;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.03;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.23;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.40;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2009-2010 Chia-I Wu <olvaffe@@gmail.com>
 * Copyright 2010-2011 LunarG, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


#include <assert.h>
#include <string.h>

#include "eglimage.h"
#include "egllog.h"


/**
 * Parse the list of image attributes and return the proper error code.
 */
EGLint
_eglParseImageAttribList(_EGLImageAttribs *attrs, _EGLDisplay *dpy,
                         const EGLint *attrib_list)
{
   EGLint i, err = EGL_SUCCESS;

   (void) dpy;

   memset(attrs, 0, sizeof(*attrs));
   attrs->ImagePreserved = EGL_FALSE;
   attrs->GLTextureLevel = 0;
   attrs->GLTextureZOffset = 0;

   if (!attrib_list)
      return err;

   for (i = 0; attrib_list[i] != EGL_NONE; i++) {
      EGLint attr = attrib_list[i++];
      EGLint val = attrib_list[i];

      switch (attr) {
      /* EGL_KHR_image_base */
      case EGL_IMAGE_PRESERVED_KHR:
         attrs->ImagePreserved = val;
         break;

      /* EGL_KHR_gl_image */
      case EGL_GL_TEXTURE_LEVEL_KHR:
         attrs->GLTextureLevel = val;
         break;
      case EGL_GL_TEXTURE_ZOFFSET_KHR:
         attrs->GLTextureZOffset = val;
         break;

      /* EGL_MESA_drm_image */
      case EGL_WIDTH:
         attrs->Width = val;
         break;
      case EGL_HEIGHT:
         attrs->Height = val;
         break;
      case EGL_DRM_BUFFER_FORMAT_MESA:
         attrs->DRMBufferFormatMESA = val;
         break;
      case EGL_DRM_BUFFER_USE_MESA:
         attrs->DRMBufferUseMESA = val;
         break;
      case EGL_DRM_BUFFER_STRIDE_MESA:
         attrs->DRMBufferStrideMESA = val;
         break;

      /* EGL_WL_bind_wayland_display */
      case EGL_WAYLAND_PLANE_WL:
         attrs->PlaneWL = val;
         break;

      case EGL_LINUX_DRM_FOURCC_EXT:
         attrs->DMABufFourCC.Value = val;
         attrs->DMABufFourCC.IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE0_FD_EXT:
         attrs->DMABufPlaneFds[0].Value = val;
         attrs->DMABufPlaneFds[0].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE0_OFFSET_EXT:
         attrs->DMABufPlaneOffsets[0].Value = val;
         attrs->DMABufPlaneOffsets[0].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE0_PITCH_EXT:
         attrs->DMABufPlanePitches[0].Value = val;
         attrs->DMABufPlanePitches[0].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE1_FD_EXT:
         attrs->DMABufPlaneFds[1].Value = val;
         attrs->DMABufPlaneFds[1].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE1_OFFSET_EXT:
         attrs->DMABufPlaneOffsets[1].Value = val;
         attrs->DMABufPlaneOffsets[1].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE1_PITCH_EXT:
         attrs->DMABufPlanePitches[1].Value = val;
         attrs->DMABufPlanePitches[1].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE2_FD_EXT:
         attrs->DMABufPlaneFds[2].Value = val;
         attrs->DMABufPlaneFds[2].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE2_OFFSET_EXT:
         attrs->DMABufPlaneOffsets[2].Value = val;
         attrs->DMABufPlaneOffsets[2].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE2_PITCH_EXT:
         attrs->DMABufPlanePitches[2].Value = val;
         attrs->DMABufPlanePitches[2].IsPresent = EGL_TRUE;
         break;
      case EGL_YUV_COLOR_SPACE_HINT_EXT:
         if (val != EGL_ITU_REC601_EXT && val != EGL_ITU_REC709_EXT &&
             val != EGL_ITU_REC2020_EXT) {
            err = EGL_BAD_ATTRIBUTE;
         } else {
            attrs->DMABufYuvColorSpaceHint.Value = val;
            attrs->DMABufYuvColorSpaceHint.IsPresent = EGL_TRUE;
         }
         break;
      case EGL_SAMPLE_RANGE_HINT_EXT:
         if (val != EGL_YUV_FULL_RANGE_EXT && val != EGL_YUV_NARROW_RANGE_EXT) {
            err = EGL_BAD_ATTRIBUTE;
         } else {
            attrs->DMABufSampleRangeHint.Value = val;
            attrs->DMABufSampleRangeHint.IsPresent = EGL_TRUE;
         }
         break;
      case EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT:
         if (val != EGL_YUV_CHROMA_SITING_0_EXT &&
             val != EGL_YUV_CHROMA_SITING_0_5_EXT) {
            err = EGL_BAD_ATTRIBUTE;
         } else {
            attrs->DMABufChromaHorizontalSiting.Value = val;
            attrs->DMABufChromaHorizontalSiting.IsPresent = EGL_TRUE;
         }
         break;
      case EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT:
         if (val != EGL_YUV_CHROMA_SITING_0_EXT &&
             val != EGL_YUV_CHROMA_SITING_0_5_EXT) {
            err = EGL_BAD_ATTRIBUTE;
         } else {
            attrs->DMABufChromaVerticalSiting.Value = val;
            attrs->DMABufChromaVerticalSiting.IsPresent = EGL_TRUE;
         }
         break;

      default:
         /* unknown attrs are ignored */
         break;
      }

      if (err != EGL_SUCCESS) {
         _eglLog(_EGL_DEBUG, "bad image attribute 0x%04x", attr);
         break;
      }
   }

   return err;
}


EGLBoolean
_eglInitImage(_EGLImage *img, _EGLDisplay *dpy)
{
   _eglInitResource(&img->Resource, sizeof(*img), dpy);

   return EGL_TRUE;
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d96 76
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a36 3
#ifdef EGL_KHR_image_base


d48 1
a48 1
   memset(attrs, 0, sizeof(attrs));
d91 5
a117 3


#endif /* EGL_KHR_image_base */
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d1 29
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a4 1
#include "eglcurrent.h"
d14 3
a16 2
static EGLint
_eglParseImageAttribList(_EGLImage *img, const EGLint *attrib_list)
d20 7
d28 1
a28 1
      return EGL_SUCCESS;
d35 1
d37 1
a37 1
         img->Preserved = val;
d39 2
d42 1
a42 1
         img->GLTextureLevel = val;
d45 9
a53 1
         img->GLTextureZOffset = val;
d55 10
d81 1
a81 1
_eglInitImage(_EGLImage *img, _EGLDisplay *dpy, const EGLint *attrib_list)
d83 1
a83 12
   EGLint err;

   memset(img, 0, sizeof(_EGLImage));
   img->Resource.Display = dpy;

   img->Preserved = EGL_FALSE;
   img->GLTextureLevel = 0;
   img->GLTextureZOffset = 0;

   err = _eglParseImageAttribList(img, attrib_list);
   if (err != EGL_SUCCESS)
      return _eglError(err, "eglCreateImageKHR");
a85 18
}


_EGLImage *
_eglCreateImageKHR(_EGLDriver *drv, _EGLDisplay *dpy, _EGLContext *ctx,
                   EGLenum target, EGLClientBuffer buffer,
                   const EGLint *attr_list)
{
   /* driver should override this function */
   return NULL;
}


EGLBoolean
_eglDestroyImageKHR(_EGLDriver *drv, _EGLDisplay *dpy, _EGLImage *image)
{
   /* driver should override this function */
   return EGL_FALSE;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d5 1
d15 2
a16 3
EGLint
_eglParseImageAttribList(_EGLImageAttribs *attrs, _EGLDisplay *dpy,
                         const EGLint *attrib_list)
a19 7
   (void) dpy;

   memset(attrs, 0, sizeof(attrs));
   attrs->ImagePreserved = EGL_FALSE;
   attrs->GLTextureLevel = 0;
   attrs->GLTextureZOffset = 0;

d21 1
a21 1
      return err;
a27 1
      /* EGL_KHR_image_base */
d29 1
a29 1
         attrs->ImagePreserved = val;
a30 2

      /* EGL_KHR_gl_image */
d32 1
a32 1
         attrs->GLTextureLevel = val;
d35 1
a35 9
         attrs->GLTextureZOffset = val;
         break;

      /* EGL_MESA_drm_image */
      case EGL_WIDTH:
         attrs->Width = val;
         break;
      case EGL_HEIGHT:
         attrs->Height = val;
a36 10
      case EGL_DRM_BUFFER_FORMAT_MESA:
         attrs->DRMBufferFormatMESA = val;
         break;
      case EGL_DRM_BUFFER_USE_MESA:
         attrs->DRMBufferUseMESA = val;
         break;
      case EGL_DRM_BUFFER_STRIDE_MESA:
         attrs->DRMBufferStrideMESA = val;
         break;

d53 1
a53 1
_eglInitImage(_EGLImage *img, _EGLDisplay *dpy)
d55 12
a66 1
   _eglInitResource(&img->Resource, sizeof(*img), dpy);
d69 18
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a0 29
/**************************************************************************
 *
 * Copyright 2009-2010 Chia-I Wu <olvaffe@@gmail.com>
 * Copyright 2010-2011 LunarG, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


d8 3
d22 1
a22 1
   memset(attrs, 0, sizeof(*attrs));
a64 5
      /* EGL_WL_bind_wayland_display */
      case EGL_WAYLAND_PLANE_WL:
         attrs->PlaneWL = val;
         break;

d87 3
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a95 76
      case EGL_LINUX_DRM_FOURCC_EXT:
         attrs->DMABufFourCC.Value = val;
         attrs->DMABufFourCC.IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE0_FD_EXT:
         attrs->DMABufPlaneFds[0].Value = val;
         attrs->DMABufPlaneFds[0].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE0_OFFSET_EXT:
         attrs->DMABufPlaneOffsets[0].Value = val;
         attrs->DMABufPlaneOffsets[0].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE0_PITCH_EXT:
         attrs->DMABufPlanePitches[0].Value = val;
         attrs->DMABufPlanePitches[0].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE1_FD_EXT:
         attrs->DMABufPlaneFds[1].Value = val;
         attrs->DMABufPlaneFds[1].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE1_OFFSET_EXT:
         attrs->DMABufPlaneOffsets[1].Value = val;
         attrs->DMABufPlaneOffsets[1].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE1_PITCH_EXT:
         attrs->DMABufPlanePitches[1].Value = val;
         attrs->DMABufPlanePitches[1].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE2_FD_EXT:
         attrs->DMABufPlaneFds[2].Value = val;
         attrs->DMABufPlaneFds[2].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE2_OFFSET_EXT:
         attrs->DMABufPlaneOffsets[2].Value = val;
         attrs->DMABufPlaneOffsets[2].IsPresent = EGL_TRUE;
         break;
      case EGL_DMA_BUF_PLANE2_PITCH_EXT:
         attrs->DMABufPlanePitches[2].Value = val;
         attrs->DMABufPlanePitches[2].IsPresent = EGL_TRUE;
         break;
      case EGL_YUV_COLOR_SPACE_HINT_EXT:
         if (val != EGL_ITU_REC601_EXT && val != EGL_ITU_REC709_EXT &&
             val != EGL_ITU_REC2020_EXT) {
            err = EGL_BAD_ATTRIBUTE;
         } else {
            attrs->DMABufYuvColorSpaceHint.Value = val;
            attrs->DMABufYuvColorSpaceHint.IsPresent = EGL_TRUE;
         }
         break;
      case EGL_SAMPLE_RANGE_HINT_EXT:
         if (val != EGL_YUV_FULL_RANGE_EXT && val != EGL_YUV_NARROW_RANGE_EXT) {
            err = EGL_BAD_ATTRIBUTE;
         } else {
            attrs->DMABufSampleRangeHint.Value = val;
            attrs->DMABufSampleRangeHint.IsPresent = EGL_TRUE;
         }
         break;
      case EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT:
         if (val != EGL_YUV_CHROMA_SITING_0_EXT &&
             val != EGL_YUV_CHROMA_SITING_0_5_EXT) {
            err = EGL_BAD_ATTRIBUTE;
         } else {
            attrs->DMABufChromaHorizontalSiting.Value = val;
            attrs->DMABufChromaHorizontalSiting.IsPresent = EGL_TRUE;
         }
         break;
      case EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT:
         if (val != EGL_YUV_CHROMA_SITING_0_EXT &&
             val != EGL_YUV_CHROMA_SITING_0_5_EXT) {
            err = EGL_BAD_ATTRIBUTE;
         } else {
            attrs->DMABufChromaVerticalSiting.Value = val;
            attrs->DMABufChromaVerticalSiting.IsPresent = EGL_TRUE;
         }
         break;

@


