head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.25;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.51;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.14;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.51;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.59.25;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.03;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.03;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.09.24;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.40;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.06.01;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.43.09;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2008 VMware, Inc.
 * Copyright 2009-2010 Chia-I Wu <olvaffe@@gmail.com>
 * Copyright 2010-2011 LunarG, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


/**
 * Small/misc EGL functions
 */


#include <assert.h>
#include <string.h>
#include "eglcurrent.h"
#include "eglmisc.h"
#include "egldisplay.h"
#include "egldriver.h"
#include "eglstring.h"


/**
 * Copy the extension into the string and update the string pointer.
 */
static EGLint
_eglAppendExtension(char **str, const char *ext)
{
   char *s = *str;
   size_t len = strlen(ext);

   if (s) {
      memcpy(s, ext, len);
      s[len++] = ' ';
      s[len] = '\0';

      *str += len;
   }
   else {
      len++;
   }

   return (EGLint) len;
}


/**
 * Examine the individual extension enable/disable flags and recompute
 * the driver's Extensions string.
 */
static void
_eglUpdateExtensionsString(_EGLDisplay *dpy)
{
#define _EGL_CHECK_EXTENSION(ext)                                          \
   do {                                                                    \
      if (dpy->Extensions.ext) {                                           \
         _eglAppendExtension(&exts, "EGL_" #ext);                          \
         assert(exts <= dpy->ExtensionsString + _EGL_MAX_EXTENSIONS_LEN);  \
      }                                                                    \
   } while (0)

   char *exts = dpy->ExtensionsString;

   if (exts[0])
      return;

   _EGL_CHECK_EXTENSION(MESA_screen_surface);
   _EGL_CHECK_EXTENSION(MESA_copy_context);
   _EGL_CHECK_EXTENSION(MESA_drm_display);
   _EGL_CHECK_EXTENSION(MESA_drm_image);
   _EGL_CHECK_EXTENSION(MESA_configless_context);

   _EGL_CHECK_EXTENSION(WL_bind_wayland_display);
   _EGL_CHECK_EXTENSION(WL_create_wayland_buffer_from_image);

   _EGL_CHECK_EXTENSION(KHR_image_base);
   _EGL_CHECK_EXTENSION(KHR_image_pixmap);
   if (dpy->Extensions.KHR_image_base && dpy->Extensions.KHR_image_pixmap)
      _eglAppendExtension(&exts, "EGL_KHR_image");

   _EGL_CHECK_EXTENSION(KHR_vg_parent_image);
   _EGL_CHECK_EXTENSION(KHR_gl_texture_2D_image);
   _EGL_CHECK_EXTENSION(KHR_gl_texture_cubemap_image);
   _EGL_CHECK_EXTENSION(KHR_gl_texture_3D_image);
   _EGL_CHECK_EXTENSION(KHR_gl_renderbuffer_image);

   _EGL_CHECK_EXTENSION(KHR_reusable_sync);
   _EGL_CHECK_EXTENSION(KHR_fence_sync);

   _EGL_CHECK_EXTENSION(KHR_surfaceless_context);
   _EGL_CHECK_EXTENSION(KHR_create_context);

   _EGL_CHECK_EXTENSION(NOK_swap_region);
   _EGL_CHECK_EXTENSION(NOK_texture_from_pixmap);

   _EGL_CHECK_EXTENSION(ANDROID_image_native_buffer);

   _EGL_CHECK_EXTENSION(EXT_create_context_robustness);
   _EGL_CHECK_EXTENSION(EXT_buffer_age);
   _EGL_CHECK_EXTENSION(EXT_swap_buffers_with_damage);
   _EGL_CHECK_EXTENSION(EXT_image_dma_buf_import);

   _EGL_CHECK_EXTENSION(NV_post_sub_buffer);
#undef _EGL_CHECK_EXTENSION
}


static void
_eglUpdateAPIsString(_EGLDisplay *dpy)
{
   char *apis = dpy->ClientAPIsString;

   if (apis[0] || !dpy->ClientAPIs)
      return;

   if (dpy->ClientAPIs & EGL_OPENGL_BIT)
      strcat(apis, "OpenGL ");

   if (dpy->ClientAPIs & EGL_OPENGL_ES_BIT)
      strcat(apis, "OpenGL_ES ");

   if (dpy->ClientAPIs & EGL_OPENGL_ES2_BIT)
      strcat(apis, "OpenGL_ES2 ");

   if (dpy->ClientAPIs & EGL_OPENGL_ES3_BIT_KHR)
      strcat(apis, "OpenGL_ES3 ");

   if (dpy->ClientAPIs & EGL_OPENVG_BIT)
      strcat(apis, "OpenVG ");

   assert(strlen(apis) < sizeof(dpy->ClientAPIsString));
}


const char *
_eglQueryString(_EGLDriver *drv, _EGLDisplay *dpy, EGLint name)
{
   (void) drv;

   switch (name) {
   case EGL_VENDOR:
      return _EGL_VENDOR_STRING;
   case EGL_VERSION:
      _eglsnprintf(dpy->VersionString, sizeof(dpy->VersionString),
              "%d.%d (%s)", dpy->VersionMajor, dpy->VersionMinor,
              dpy->Driver->Name);
      return dpy->VersionString;
   case EGL_EXTENSIONS:
      _eglUpdateExtensionsString(dpy);
      return dpy->ExtensionsString;
   case EGL_CLIENT_APIS:
      _eglUpdateAPIsString(dpy);
      return dpy->ClientAPIsString;
   default:
      _eglError(EGL_BAD_PARAMETER, "eglQueryString");
      return NULL;
   }
}
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a119 2
   _EGL_CHECK_EXTENSION(CHROMIUM_sync_control);

@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d120 2
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2008 Tungsten Graphics, Inc., Cedar Park, Texas.
d93 1
d96 1
d123 1
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d110 2
a111 3
   _EGL_CHECK_EXTENSION(KHR_surfaceless_gles1);
   _EGL_CHECK_EXTENSION(KHR_surfaceless_gles2);
   _EGL_CHECK_EXTENSION(KHR_surfaceless_opengl);
d115 8
d143 3
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d2 1
a2 1
 * 
d4 2
d7 1
a7 1
 * 
d15 1
a15 1
 * 
d19 9
a27 9
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
d41 2
d80 1
a80 1
         assert(exts <= dpy->Extensions.String + _EGL_MAX_EXTENSIONS_LEN); \
d84 1
a84 1
   char *exts = dpy->Extensions.String;
d94 2
d123 1
a123 1
   char *apis = dpy->ClientAPIs;
d125 1
a125 1
   if (apis[0] || !dpy->ClientAPIsMask)
d128 1
a128 1
   if (dpy->ClientAPIsMask & EGL_OPENGL_BIT)
d131 1
a131 1
   if (dpy->ClientAPIsMask & EGL_OPENGL_ES_BIT)
d134 1
a134 1
   if (dpy->ClientAPIsMask & EGL_OPENGL_ES2_BIT)
d137 1
a137 1
   if (dpy->ClientAPIsMask & EGL_OPENVG_BIT)
d140 1
a140 1
   assert(strlen(apis) < sizeof(dpy->ClientAPIs));
d148 1
a148 1
   (void) dpy;
d153 4
a156 1
      return dpy->Version;
d159 1
a159 2
      return dpy->Extensions.String;
#ifdef EGL_VERSION_1_2
d162 1
a162 2
      return dpy->ClientAPIs;
#endif
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d48 1
a48 1
   EGLint len = strlen(ext);
d61 1
a61 1
   return len;
d87 2
d101 9
a159 29
}


EGLBoolean
_eglWaitClient(_EGLDriver *drv, _EGLDisplay *dpy, _EGLContext *ctx)
{
   /* just a placeholder */
   (void) drv;
   (void) dpy;
   (void) ctx;
   return EGL_TRUE;
}


EGLBoolean
_eglWaitNative(_EGLDriver *drv, _EGLDisplay *dpy, EGLint engine)
{
   /* just a placeholder */
   (void) drv;
   (void) dpy;
   switch (engine) {
   case EGL_CORE_NATIVE_ENGINE:
      break;
   default:
      _eglError(EGL_BAD_PARAMETER, "eglWaitNative(engine)");
      return EGL_FALSE;
   }

   return EGL_TRUE;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d48 1
a48 1
   size_t len = strlen(ext);
d61 1
a61 1
   return (EGLint) len;
a86 2
   _EGL_CHECK_EXTENSION(MESA_drm_display);
   _EGL_CHECK_EXTENSION(MESA_drm_image);
a98 9
   _EGL_CHECK_EXTENSION(KHR_reusable_sync);
   _EGL_CHECK_EXTENSION(KHR_fence_sync);

   _EGL_CHECK_EXTENSION(KHR_surfaceless_gles1);
   _EGL_CHECK_EXTENSION(KHR_surfaceless_gles2);
   _EGL_CHECK_EXTENSION(KHR_surfaceless_opengl);

   _EGL_CHECK_EXTENSION(NOK_swap_region);
   _EGL_CHECK_EXTENSION(NOK_texture_from_pixmap);
d149 29
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d2 1
a2 1
 *
a3 2
 * Copyright 2009-2010 Chia-I Wu <olvaffe@@gmail.com>
 * Copyright 2010-2011 LunarG, Inc.
d5 1
a5 1
 *
d13 1
a13 1
 *
d17 9
a25 9
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
a38 2
#include "egldriver.h"
#include "eglstring.h"
d76 1
a76 1
         assert(exts <= dpy->ExtensionsString + _EGL_MAX_EXTENSIONS_LEN);  \
d80 1
a80 1
   char *exts = dpy->ExtensionsString;
a89 2
   _EGL_CHECK_EXTENSION(WL_bind_wayland_display);

d104 3
a106 2
   _EGL_CHECK_EXTENSION(KHR_surfaceless_context);
   _EGL_CHECK_EXTENSION(KHR_create_context);
a109 8

   _EGL_CHECK_EXTENSION(ANDROID_image_native_buffer);

   _EGL_CHECK_EXTENSION(EXT_create_context_robustness);
   _EGL_CHECK_EXTENSION(EXT_buffer_age);
   _EGL_CHECK_EXTENSION(EXT_swap_buffers_with_damage);

   _EGL_CHECK_EXTENSION(NV_post_sub_buffer);
d117 1
a117 1
   char *apis = dpy->ClientAPIsString;
d119 1
a119 1
   if (apis[0] || !dpy->ClientAPIs)
d122 1
a122 1
   if (dpy->ClientAPIs & EGL_OPENGL_BIT)
d125 1
a125 1
   if (dpy->ClientAPIs & EGL_OPENGL_ES_BIT)
d128 1
a128 1
   if (dpy->ClientAPIs & EGL_OPENGL_ES2_BIT)
d131 1
a131 4
   if (dpy->ClientAPIs & EGL_OPENGL_ES3_BIT_KHR)
      strcat(apis, "OpenGL_ES3 ");

   if (dpy->ClientAPIs & EGL_OPENVG_BIT)
d134 1
a134 1
   assert(strlen(apis) < sizeof(dpy->ClientAPIsString));
d142 1
a142 1

d147 1
a147 4
      _eglsnprintf(dpy->VersionString, sizeof(dpy->VersionString),
              "%d.%d (%s)", dpy->VersionMajor, dpy->VersionMinor,
              dpy->Driver->Name);
      return dpy->VersionString;
d150 2
a151 1
      return dpy->ExtensionsString;
d154 2
a155 1
      return dpy->ClientAPIsString;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2008 VMware, Inc.
a92 1
   _EGL_CHECK_EXTENSION(MESA_configless_context);
a94 1
   _EGL_CHECK_EXTENSION(WL_create_wayland_buffer_from_image);
a120 1
   _EGL_CHECK_EXTENSION(EXT_image_dma_buf_import);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a119 2
   _EGL_CHECK_EXTENSION(CHROMIUM_sync_control);

@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d120 2
@


