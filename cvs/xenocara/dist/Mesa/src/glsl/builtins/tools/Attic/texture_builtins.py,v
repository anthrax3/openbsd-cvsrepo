head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2014.07.09.21.08.58;	author jsg;	state dead;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.02.42;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.11;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.34;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@#!/usr/bin/python

import sys
import StringIO

# Bitfield constants for the 'variant' argument to generate_sigs
Proj = 1
Offset = 2
Single = 4

def vec_type(g, size):
    if size == 1:
        if g == "i":
            return "int"
        elif g == "u":
            return "uint"
        return "float"
    return g + "vec" + str(size)

# Get the sampler dimension - i.e. sampler3D gives 3
def get_sampler_dim(sampler_type):
    if sampler_type[0].isdigit():
        sampler_dim = int(sampler_type[0])
    elif sampler_type.startswith("Cube"):
        sampler_dim = 3
    elif sampler_type == "ExternalOES":
        sampler_dim = 2
    elif sampler_type == "Buffer":
        sampler_dim = 1
    else:
        assert False ("coord_dim: invalid sampler_type: " + sampler_type)
    return sampler_dim

# Get the coordinate dimension for a given sampler type.
# Array samplers also get +1 here since the layer is really an extra coordinate
def get_coord_dim(sampler_type, tex_inst):
    coord_dim = get_sampler_dim(sampler_type)
    if sampler_type.find("Array") != -1 and tex_inst != "lod":
        coord_dim += 1
    return coord_dim

# Get the number of extra vector components (i.e. shadow comparitor)
def get_extra_dim(sampler_type, use_proj, unused_fields, tex_inst):
    extra_dim = unused_fields
    if sampler_type == "CubeArrayShadow":
        return 0
    if sampler_type.find("Shadow") != -1 and tex_inst != "lod":
        extra_dim += 1
    if use_proj:
        extra_dim += 1
    return extra_dim

def get_txs_dim(sampler_type, tex_inst):
    if sampler_type.startswith("CubeArray"):
        return 3
    if sampler_type.startswith("Cube"):
        return 2
    return get_coord_dim(sampler_type, tex_inst)

def has_lod(sampler_type):
    if 'Buffer' in sampler_type: return False
    if 'Rect' in sampler_type: return False
    if 'MS' in sampler_type: return False
    return True

def generate_sigs(g, tex_inst, sampler_type, variant = 0, unused_fields = 0):
    coord_dim = get_coord_dim(sampler_type, tex_inst)
    extra_dim = get_extra_dim(sampler_type, variant & Proj, unused_fields, tex_inst)
    sampler_dim = get_sampler_dim(sampler_type)

    if variant & Single:
        return_type = "float"
    elif tex_inst == "txs":
        return_type = vec_type("i", get_txs_dim(sampler_type, tex_inst))
    elif tex_inst == "lod":
        return_type = "vec2"
    else:
        return_type = g + "vec4"

    # Print parameters
    print "   (signature", return_type
    print "     (parameters"
    print "       (declare (in) " + g + "sampler" + sampler_type + " sampler)",
    if tex_inst != "txs":
        print "\n       (declare (in) " + vec_type("i" if tex_inst in ['txf','txf_ms'] else "", coord_dim + extra_dim) + " P)",
    if tex_inst == "txl":
        print "\n       (declare (in) float lod)",
    elif tex_inst in ['txf', 'txs'] and has_lod(sampler_type):
        print "\n       (declare (in) int lod)",
    elif tex_inst == "txf_ms":
        print "\n       (declare (in) int sample)",
    elif tex_inst == "txd":
        grad_type = vec_type("", sampler_dim)
        print "\n       (declare (in) " + grad_type + " dPdx)",
        print "\n       (declare (in) " + grad_type + " dPdy)",
    if sampler_type == "CubeArrayShadow" and tex_inst == "tex":
        print "\n       (declare (in) float compare)",

    if variant & Offset:
        print "\n       (declare (const_in) " + vec_type("i", sampler_dim) + " offset)",
    if tex_inst == "txb":
        print "\n       (declare (in) float bias)",

    print ")\n     ((return (" + tex_inst, return_type, "(var_ref sampler)",

    if tex_inst != "txs":
        # Coordinate
        if extra_dim > 0:
            print "(swiz " + "xyzw"[:coord_dim] + " (var_ref P))",
        else:
            print "(var_ref P)",

    if tex_inst not in ['txf_ms', 'txs', 'lod']:
        # Coordinate offset
        if variant & Offset:
            print "(var_ref offset)",
        else:
            print "0",

    if tex_inst not in ['txf', 'txf_ms', 'txs', 'lod']:
        # Projective divisor
        if variant & Proj:
            print "(swiz " + "xyzw"[coord_dim + extra_dim-1] + " (var_ref P))",
        else:
            print "1",

        # Shadow comparitor
        if sampler_type == "CubeArrayShadow": # a special case
            print "(var_ref compare)",
        elif sampler_type == "2DArrayShadow" or sampler_type == "CubeShadow": # a special case:
            print "(swiz w (var_ref P))",   # ...array layer is z; shadow is w
        elif sampler_type.endswith("Shadow"):
            print "(swiz z (var_ref P))",
        else:
            print "()",

    # Bias/explicit LOD/gradient:
    if tex_inst == "txb":
        print "(var_ref bias)",
    elif tex_inst in ['txs', 'txf', 'txf_ms']:
        if has_lod(sampler_type):
            print "(var_ref lod)",
        elif tex_inst == 'txf_ms':
            print "(var_ref sample)",
        else:
            print "(constant int (0))",
    elif tex_inst == "txl":
        print "(var_ref lod)",
    elif tex_inst == "txd":
        print "((var_ref dPdx) (var_ref dPdy))",
    print "))))\n"

def generate_fiu_sigs(tex_inst, sampler_type, variant = 0, unused_fields = 0):
    generate_sigs("",  tex_inst, sampler_type, variant, unused_fields)
    generate_sigs("i", tex_inst, sampler_type, variant, unused_fields)
    generate_sigs("u", tex_inst, sampler_type, variant, unused_fields)

def start_function(name):
    sys.stdout = StringIO.StringIO()
    print "((function " + name

def end_function(fs, name):
    print "))"
    fs[name] = sys.stdout.getvalue();
    sys.stdout.close()

# Generate all the functions and store them in the supplied dictionary.
# This is better than writing them to actual files since they should never be
# edited; it'd also be easy to confuse them with the many hand-generated files.
#
# Takes a dictionary as an argument.
def generate_texture_functions(fs):
    start_function("textureSize")
    generate_fiu_sigs("txs", "1D")
    generate_fiu_sigs("txs", "2D")
    generate_fiu_sigs("txs", "3D")
    generate_fiu_sigs("txs", "Cube")
    generate_fiu_sigs("txs", "1DArray")
    generate_fiu_sigs("txs", "2DArray")
    generate_sigs("", "txs", "1DShadow")
    generate_sigs("", "txs", "2DShadow")
    generate_sigs("", "txs", "CubeShadow")
    generate_sigs("", "txs", "1DArrayShadow")
    generate_sigs("", "txs", "2DArrayShadow")
    generate_fiu_sigs("txs", "2DRect")
    generate_sigs("", "txs", "2DRectShadow")
    generate_fiu_sigs("txs", "Buffer")
    generate_fiu_sigs("txs", "CubeArray")
    generate_sigs("", "txs", "CubeArrayShadow")
    generate_fiu_sigs("txs", "2DMS")
    generate_fiu_sigs("txs", "2DMSArray")
    end_function(fs, "textureSize")

    start_function("texture")
    generate_fiu_sigs("tex", "1D")
    generate_fiu_sigs("tex", "2D")
    generate_fiu_sigs("tex", "3D")
    generate_fiu_sigs("tex", "Cube")
    generate_fiu_sigs("tex", "1DArray")
    generate_fiu_sigs("tex", "2DArray")
    generate_sigs("", "tex", "1DShadow", Single, 1);
    generate_sigs("", "tex", "2DShadow", Single);
    generate_sigs("", "tex", "CubeShadow", Single);
    generate_sigs("", "tex", "1DArrayShadow", Single);
    generate_sigs("", "tex", "2DArrayShadow", Single);
    generate_fiu_sigs("tex", "2DRect")
    generate_sigs("", "tex", "2DRectShadow", Single);
    # ARB_texture_cube_map_array extension
    generate_fiu_sigs("tex", "CubeArray")
    generate_sigs("", "tex", "CubeArrayShadow", Single);

    generate_fiu_sigs("txb", "1D")
    generate_fiu_sigs("txb", "2D")
    generate_fiu_sigs("txb", "3D")
    generate_fiu_sigs("txb", "Cube")
    generate_fiu_sigs("txb", "1DArray")
    generate_fiu_sigs("txb", "2DArray")
    generate_fiu_sigs("txb", "CubeArray")
    generate_sigs("", "txb", "1DShadow", Single, 1);
    generate_sigs("", "txb", "2DShadow", Single);
    generate_sigs("", "txb", "CubeShadow", Single);
    generate_sigs("", "txb", "1DArrayShadow", Single);
    generate_sigs("", "txb", "2DArrayShadow", Single);
    end_function(fs, "texture")

    start_function("textureProj")
    generate_fiu_sigs("tex", "1D", Proj)
    generate_fiu_sigs("tex", "1D", Proj, 2)
    generate_fiu_sigs("tex", "2D", Proj)
    generate_fiu_sigs("tex", "2D", Proj, 1)
    generate_fiu_sigs("tex", "3D", Proj)
    generate_sigs("", "tex", "1DShadow", Proj | Single, 1);
    generate_sigs("", "tex", "2DShadow", Proj | Single);
    generate_fiu_sigs("tex", "2DRect", Proj)
    generate_fiu_sigs("tex", "2DRect", Proj, 1)
    generate_sigs("", "tex", "2DRectShadow", Proj | Single);

    generate_fiu_sigs("txb", "1D", Proj)
    generate_fiu_sigs("txb", "1D", Proj, 2)
    generate_fiu_sigs("txb", "2D", Proj)
    generate_fiu_sigs("txb", "2D", Proj, 1)
    generate_fiu_sigs("txb", "3D", Proj)
    generate_sigs("", "txb", "1DShadow", Proj | Single, 1);
    generate_sigs("", "txb", "2DShadow", Proj | Single);
    end_function(fs, "textureProj")

    start_function("textureLod")
    generate_fiu_sigs("txl", "1D")
    generate_fiu_sigs("txl", "2D")
    generate_fiu_sigs("txl", "3D")
    generate_fiu_sigs("txl", "Cube")
    generate_fiu_sigs("txl", "1DArray")
    generate_fiu_sigs("txl", "2DArray")
    generate_sigs("", "txl", "1DShadow", Single, 1);
    generate_sigs("", "txl", "2DShadow", Single);
    generate_sigs("", "txl", "1DArrayShadow", Single);
    # ARB_texture_cube_map_array extension
    generate_fiu_sigs("txl", "CubeArray")
    end_function(fs, "textureLod")

    start_function("textureLodOffset")
    generate_fiu_sigs("txl", "1D", Offset)
    generate_fiu_sigs("txl", "2D", Offset)
    generate_fiu_sigs("txl", "3D", Offset)
    generate_fiu_sigs("txl", "1DArray", Offset)
    generate_fiu_sigs("txl", "2DArray", Offset)
    generate_sigs("", "txl", "1DShadow", Offset | Single, 1);
    generate_sigs("", "txl", "2DShadow", Offset | Single);
    generate_sigs("", "txl", "1DArrayShadow", Offset | Single);
    end_function(fs, "textureLodOffset")

    start_function("textureOffset")
    generate_fiu_sigs("tex", "1D", Offset)
    generate_fiu_sigs("tex", "2D", Offset)
    generate_fiu_sigs("tex", "3D", Offset)
    generate_fiu_sigs("tex", "2DRect", Offset)
    generate_sigs("", "tex", "2DRectShadow", Offset | Single);
    generate_fiu_sigs("tex", "1DArray", Offset)
    generate_fiu_sigs("tex", "2DArray", Offset)
    generate_sigs("", "tex", "1DShadow", Offset | Single, 1);
    generate_sigs("", "tex", "2DShadow", Offset | Single);
    generate_sigs("", "tex", "1DArrayShadow", Offset | Single);

    generate_fiu_sigs("txb", "1D", Offset)
    generate_fiu_sigs("txb", "2D", Offset)
    generate_fiu_sigs("txb", "3D", Offset)
    generate_fiu_sigs("txb", "1DArray", Offset)
    generate_fiu_sigs("txb", "2DArray", Offset)
    generate_sigs("", "txb", "1DShadow", Offset | Single, 1);
    generate_sigs("", "txb", "2DShadow", Offset | Single);
    generate_sigs("", "txb", "1DArrayShadow", Offset | Single);
    end_function(fs, "textureOffset")

    start_function("texelFetch")
    generate_fiu_sigs("txf", "1D")
    generate_fiu_sigs("txf", "2D")
    generate_fiu_sigs("txf", "3D")
    generate_fiu_sigs("txf", "2DRect")
    generate_fiu_sigs("txf", "1DArray")
    generate_fiu_sigs("txf", "2DArray")
    generate_fiu_sigs("txf", "Buffer")
    generate_fiu_sigs("txf_ms", "2DMS")
    generate_fiu_sigs("txf_ms", "2DMSArray")
    end_function(fs, "texelFetch")

    start_function("texelFetchOffset")
    generate_fiu_sigs("txf", "1D", Offset)
    generate_fiu_sigs("txf", "2D", Offset)
    generate_fiu_sigs("txf", "3D", Offset)
    generate_fiu_sigs("txf", "2DRect", Offset)
    generate_fiu_sigs("txf", "1DArray", Offset)
    generate_fiu_sigs("txf", "2DArray", Offset)
    end_function(fs, "texelFetchOffset")

    start_function("textureProjOffset")
    generate_fiu_sigs("tex", "1D", Proj | Offset)
    generate_fiu_sigs("tex", "1D", Proj | Offset, 2)
    generate_fiu_sigs("tex", "2D", Proj | Offset)
    generate_fiu_sigs("tex", "2D", Proj | Offset, 1)
    generate_fiu_sigs("tex", "3D", Proj | Offset)
    generate_fiu_sigs("tex", "2DRect", Proj | Offset)
    generate_fiu_sigs("tex", "2DRect", Proj | Offset, 1)
    generate_sigs("", "tex", "2DRectShadow", Proj | Offset | Single);
    generate_sigs("", "tex", "1DShadow", Proj | Offset | Single, 1);
    generate_sigs("", "tex", "2DShadow", Proj | Offset | Single);

    generate_fiu_sigs("txb", "1D", Proj | Offset)
    generate_fiu_sigs("txb", "1D", Proj | Offset, 2)
    generate_fiu_sigs("txb", "2D", Proj | Offset)
    generate_fiu_sigs("txb", "2D", Proj | Offset, 1)
    generate_fiu_sigs("txb", "3D", Proj | Offset)
    generate_sigs("", "txb", "1DShadow", Proj | Offset | Single, 1);
    generate_sigs("", "txb", "2DShadow", Proj | Offset | Single);
    end_function(fs, "textureProjOffset")

    start_function("textureProjLod")
    generate_fiu_sigs("txl", "1D", Proj)
    generate_fiu_sigs("txl", "1D", Proj, 2)
    generate_fiu_sigs("txl", "2D", Proj)
    generate_fiu_sigs("txl", "2D", Proj, 1)
    generate_fiu_sigs("txl", "3D", Proj)
    generate_sigs("", "txl", "1DShadow", Proj | Single, 1);
    generate_sigs("", "txl", "2DShadow", Proj | Single);
    end_function(fs, "textureProjLod")

    start_function("textureProjLodOffset")
    generate_fiu_sigs("txl", "1D", Proj | Offset)
    generate_fiu_sigs("txl", "1D", Proj | Offset, 2)
    generate_fiu_sigs("txl", "2D", Proj | Offset)
    generate_fiu_sigs("txl", "2D", Proj | Offset, 1)
    generate_fiu_sigs("txl", "3D", Proj | Offset)
    generate_sigs("", "txl", "1DShadow", Proj | Offset | Single, 1);
    generate_sigs("", "txl", "2DShadow", Proj | Offset | Single);
    end_function(fs, "textureProjLodOffset")

    start_function("textureGrad")
    generate_fiu_sigs("txd", "1D")
    generate_fiu_sigs("txd", "2D")
    generate_fiu_sigs("txd", "3D")
    generate_fiu_sigs("txd", "Cube")
    generate_fiu_sigs("txd", "1DArray")
    generate_fiu_sigs("txd", "2DArray")
    generate_fiu_sigs("txd", "2DRect")
    generate_sigs("", "txd", "2DRectShadow", Single);
    generate_sigs("", "txd", "1DShadow", Single, 1);
    generate_sigs("", "txd", "2DShadow", Single);
    generate_sigs("", "txd", "CubeShadow", Single);
    generate_sigs("", "txd", "1DArrayShadow", Single);
    generate_sigs("", "txd", "2DArrayShadow", Single);
    # ARB_texture_cube_map_array extension
    generate_fiu_sigs("txd", "CubeArray")
    end_function(fs, "textureGrad")

    start_function("textureGradOffset")
    generate_fiu_sigs("txd", "1D", Offset)
    generate_fiu_sigs("txd", "2D", Offset)
    generate_fiu_sigs("txd", "3D", Offset)
    generate_fiu_sigs("txd", "2DRect", Offset)
    generate_sigs("", "txd", "2DRectShadow", Offset | Single);
    generate_fiu_sigs("txd", "1DArray", Offset)
    generate_fiu_sigs("txd", "2DArray", Offset)
    generate_sigs("", "txd", "1DShadow", Offset | Single, 1);
    generate_sigs("", "txd", "2DShadow", Offset | Single);
    generate_sigs("", "txd", "1DArrayShadow", Offset | Single);
    generate_sigs("", "txd", "2DArrayShadow", Offset | Single);
    end_function(fs, "textureGradOffset")

    start_function("textureProjGrad")
    generate_fiu_sigs("txd", "1D", Proj)
    generate_fiu_sigs("txd", "1D", Proj, 2)
    generate_fiu_sigs("txd", "2D", Proj)
    generate_fiu_sigs("txd", "2D", Proj, 1)
    generate_fiu_sigs("txd", "3D", Proj)
    generate_fiu_sigs("txd", "2DRect", Proj)
    generate_fiu_sigs("txd", "2DRect", Proj, 1)
    generate_sigs("", "txd", "2DRectShadow", Proj | Single);
    generate_sigs("", "txd", "1DShadow", Proj | Single, 1);
    generate_sigs("", "txd", "2DShadow", Proj | Single);
    end_function(fs, "textureProjGrad")

    start_function("textureProjGradOffset")
    generate_fiu_sigs("txd", "1D", Proj | Offset)
    generate_fiu_sigs("txd", "1D", Proj | Offset, 2)
    generate_fiu_sigs("txd", "2D", Proj | Offset)
    generate_fiu_sigs("txd", "2D", Proj | Offset, 1)
    generate_fiu_sigs("txd", "3D", Proj | Offset)
    generate_fiu_sigs("txd", "2DRect", Proj | Offset)
    generate_fiu_sigs("txd", "2DRect", Proj | Offset, 1)
    generate_sigs("", "txd", "2DRectShadow", Proj | Offset | Single);
    generate_sigs("", "txd", "1DShadow", Proj | Offset | Single, 1);
    generate_sigs("", "txd", "2DShadow", Proj | Offset | Single);
    end_function(fs, "textureProjGradOffset")


    # ARB_texture_rectangle extension
    start_function("texture2DRect")
    generate_sigs("", "tex", "2DRect")
    end_function(fs, "texture2DRect")

    start_function("texture2DRectProj")
    generate_sigs("", "tex", "2DRect", Proj)
    generate_sigs("", "tex", "2DRect", Proj, 1)
    end_function(fs, "texture2DRectProj")

    start_function("shadow2DRect")
    generate_sigs("", "tex", "2DRectShadow")
    end_function(fs, "shadow2DRect")

    start_function("shadow2DRectProj")
    generate_sigs("", "tex", "2DRectShadow", Proj)
    end_function(fs, "shadow2DRectProj")

    # EXT_texture_array extension
    start_function("texture1DArray")
    generate_sigs("", "tex", "1DArray")
    generate_sigs("", "txb", "1DArray")
    end_function(fs, "texture1DArray")

    start_function("texture1DArrayLod")
    generate_sigs("", "txl", "1DArray")
    end_function(fs, "texture1DArrayLod")

    start_function("texture2DArray")
    generate_sigs("", "tex", "2DArray")
    generate_sigs("", "txb", "2DArray")
    end_function(fs, "texture2DArray")

    start_function("texture2DArrayLod")
    generate_sigs("", "txl", "2DArray")
    end_function(fs, "texture2DArrayLod")

    start_function("shadow1DArray")
    generate_sigs("", "tex", "1DArrayShadow")
    generate_sigs("", "txb", "1DArrayShadow")
    end_function(fs, "shadow1DArray")

    start_function("shadow1DArrayLod")
    generate_sigs("", "txl", "1DArrayShadow")
    end_function(fs, "shadow1DArrayLod")

    start_function("shadow2DArray")
    generate_sigs("", "tex", "2DArrayShadow")
    end_function(fs, "shadow2DArray")

    # ARB_shader_texture_lod extension
    start_function("texture1DGradARB")
    generate_fiu_sigs("txd", "1D")
    end_function(fs, "texture1DGradARB")

    start_function("texture2DGradARB")
    generate_fiu_sigs("txd", "2D")
    end_function(fs, "texture2DGradARB")

    start_function("texture3DGradARB")
    generate_fiu_sigs("txd", "3D")
    end_function(fs, "texture3DGradARB")

    start_function("textureCubeGradARB")
    generate_fiu_sigs("txd", "Cube")
    end_function(fs, "textureCubeGradARB")

    start_function("texture1DProjGradARB")
    generate_fiu_sigs("txd", "1D", True)
    generate_fiu_sigs("txd", "1D", True, 2)
    end_function(fs, "texture1DProjGradARB")

    start_function("texture2DProjGradARB")
    generate_fiu_sigs("txd", "2D", True)
    generate_fiu_sigs("txd", "2D", True, 1)
    end_function(fs, "texture2DProjGradARB")

    start_function("texture3DProjGradARB")
    generate_fiu_sigs("txd", "3D", True)
    end_function(fs, "texture3DProjGradARB")

    start_function("shadow1DGradARB")
    generate_sigs("", "txd", "1DShadow", False, 1)
    end_function(fs, "shadow1DGradARB")

    start_function("shadow1DProjGradARB")
    generate_sigs("", "txd", "1DShadow", True, 1)
    end_function(fs, "shadow1DProjGradARB")

    start_function("shadow2DGradARB")
    generate_sigs("", "txd", "2DShadow", False)
    end_function(fs, "shadow2DGradARB")

    start_function("shadow2DProjGradARB")
    generate_sigs("", "txd", "2DShadow", True)
    end_function(fs, "shadow2DProjGradARB")

    start_function("texture2DRectGradARB")
    generate_sigs("", "txd", "2DRect")
    end_function(fs, "texture2DRectGradARB")

    start_function("texture2DRectProjGradARB")
    generate_sigs("", "txd", "2DRect", True)
    generate_sigs("", "txd", "2DRect", True, 1)
    end_function(fs, "texture2DRectProjGradARB")

    start_function("shadow2DRectGradARB")
    generate_sigs("", "txd", "2DRectShadow", False)
    end_function(fs, "shadow2DRectGradARB")

    start_function("shadow2DRectProjGradARB")
    generate_sigs("", "txd", "2DRectShadow", True)
    end_function(fs, "shadow2DRectProjGradARB")

    # Deprecated (110/120 style) functions with silly names:
    start_function("texture1D")
    generate_sigs("", "tex", "1D")
    generate_sigs("", "txb", "1D")
    end_function(fs, "texture1D")

    start_function("texture1DLod")
    generate_sigs("", "txl", "1D")
    end_function(fs, "texture1DLod")

    start_function("texture1DProj")
    generate_sigs("", "tex", "1D", Proj)
    generate_sigs("", "tex", "1D", Proj, 2)
    generate_sigs("", "txb", "1D", Proj)
    generate_sigs("", "txb", "1D", Proj, 2)
    end_function(fs, "texture1DProj")

    start_function("texture1DProjLod")
    generate_sigs("", "txl", "1D", Proj)
    generate_sigs("", "txl", "1D", Proj, 2)
    end_function(fs, "texture1DProjLod")

    start_function("texture2D")
    generate_sigs("", "tex", "2D")
    generate_sigs("", "txb", "2D")
    # OES_EGL_image_external
    generate_sigs("", "tex", "ExternalOES")
    end_function(fs, "texture2D")

    start_function("texture2DLod")
    generate_sigs("", "txl", "2D")
    end_function(fs, "texture2DLod")

    start_function("texture2DProj")
    generate_sigs("", "tex", "2D", Proj)
    generate_sigs("", "tex", "2D", Proj, 1)
    generate_sigs("", "txb", "2D", Proj)
    generate_sigs("", "txb", "2D", Proj, 1)
    # OES_EGL_image_external
    generate_sigs("", "tex", "ExternalOES", Proj)
    generate_sigs("", "tex", "ExternalOES", Proj, 1)
    end_function(fs, "texture2DProj")

    start_function("texture2DProjLod")
    generate_sigs("", "txl", "2D", Proj)
    generate_sigs("", "txl", "2D", Proj, 1)
    end_function(fs, "texture2DProjLod")

    start_function("texture3D")
    generate_sigs("", "tex", "3D")
    generate_sigs("", "txb", "3D")
    end_function(fs, "texture3D")

    start_function("texture3DLod")
    generate_sigs("", "txl", "3D")
    end_function(fs, "texture3DLod")

    start_function("texture3DProj")
    generate_sigs("", "tex", "3D", Proj)
    generate_sigs("", "txb", "3D", Proj)
    end_function(fs, "texture3DProj")

    start_function("texture3DProjLod")
    generate_sigs("", "txl", "3D", Proj)
    end_function(fs, "texture3DProjLod")

    start_function("textureCube")
    generate_sigs("", "tex", "Cube")
    generate_sigs("", "txb", "Cube")
    end_function(fs, "textureCube")

    start_function("textureCubeLod")
    generate_sigs("", "txl", "Cube")
    end_function(fs, "textureCubeLod")

    start_function("shadow1D")
    generate_sigs("", "tex", "1DShadow", False, 1)
    generate_sigs("", "txb", "1DShadow", False, 1)
    end_function(fs, "shadow1D")

    start_function("shadow1DLod")
    generate_sigs("", "txl", "1DShadow", False, 1)
    end_function(fs, "shadow1DLod")

    start_function("shadow1DProj")
    generate_sigs("", "tex", "1DShadow", Proj, 1)
    generate_sigs("", "txb", "1DShadow", Proj, 1)
    end_function(fs, "shadow1DProj")

    start_function("shadow1DProjLod")
    generate_sigs("", "txl", "1DShadow", Proj, 1)
    end_function(fs, "shadow1DProjLod")

    start_function("shadow2D")
    generate_sigs("", "tex", "2DShadow")
    generate_sigs("", "txb", "2DShadow")
    end_function(fs, "shadow2D")

    start_function("shadow2DLod")
    generate_sigs("", "txl", "2DShadow")
    end_function(fs, "shadow2DLod")

    start_function("shadow2DProj")
    generate_sigs("", "tex", "2DShadow", Proj)
    generate_sigs("", "txb", "2DShadow", Proj)
    end_function(fs, "shadow2DProj")

    start_function("shadow2DProjLod")
    generate_sigs("", "txl", "2DShadow", Proj)
    end_function(fs, "shadow2DProjLod")

    start_function("textureQueryLOD")
    generate_fiu_sigs("lod", "1D")
    generate_fiu_sigs("lod", "2D")
    generate_fiu_sigs("lod", "3D")
    generate_fiu_sigs("lod", "Cube")
    generate_fiu_sigs("lod", "1DArray")
    generate_fiu_sigs("lod", "2DArray")
    generate_fiu_sigs("lod", "CubeArray")
    generate_sigs("", "lod", "1DShadow")
    generate_sigs("", "lod", "2DShadow")
    generate_sigs("", "lod", "CubeShadow")
    generate_sigs("", "lod", "1DArrayShadow")
    generate_sigs("", "lod", "2DArrayShadow")
    generate_sigs("", "lod", "CubeArrayShadow")
    end_function(fs, "textureQueryLOD")

    sys.stdout = sys.__stdout__
    return fs

# If you actually run this script, it'll print out all the functions.
if __name__ == "__main__":
    fs = {}
    generate_texture_functions(fs);
    for k, v in fs.iteritems():
        print v
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d26 4
d36 1
a36 1
def get_coord_dim(sampler_type):
d38 1
a38 1
    if sampler_type.find("Array") != -1:
d43 1
a43 1
def get_extra_dim(sampler_type, use_proj, unused_fields):
d45 3
a47 1
    if sampler_type.find("Shadow") != -1:
d53 13
d67 3
a69 3
    coord_dim = get_coord_dim(sampler_type)
    extra_dim = get_extra_dim(sampler_type, variant & Proj, unused_fields)
    offset_dim = get_sampler_dim(sampler_type)
d73 4
d83 3
a85 2
    print "       (declare (in) " + g + "sampler" + sampler_type + " sampler)"
    print "       (declare (in) " + vec_type("i" if tex_inst == "txf" else "", coord_dim + extra_dim) + " P)",
d88 1
a88 1
    elif tex_inst == "txf":
d90 2
d93 1
a93 1
        grad_type = vec_type("", coord_dim)
d96 2
d100 1
a100 1
        print "\n       (declare (const_in) " + vec_type("i", offset_dim) + " offset)",
d106 6
a111 5
    # Coordinate
    if extra_dim > 0:
        print "(swiz " + "xyzw"[:coord_dim] + " (var_ref P))",
    else:
        print "(var_ref P)",
d113 6
a118 4
    if variant & Offset:
        print "(var_ref offset)",
    else:
        print "0",
d120 1
a120 1
    if tex_inst != "txf":
d128 3
a130 1
        if sampler_type == "2DArrayShadow": # a special case:
d140 8
a147 1
    elif tex_inst == "txl" or tex_inst == "txf":
d173 21
d206 5
d218 1
d234 3
d257 2
d276 2
d298 1
d301 3
d310 1
d321 3
d363 2
d370 2
d378 2
a379 1
    generate_fiu_sigs("txd", "Cube", Offset)
d394 3
d407 3
d554 2
d567 3
d639 16
@


1.1
log
@Initial revision
@
text
@d6 5
d20 2
a21 3
# Get the base dimension - i.e. sampler3D gives 3
# Array samplers also get +1 here since the layer is really an extra coordinate
def get_coord_dim(sampler_type):
d23 1
a23 1
        coord_dim = int(sampler_type[0])
d25 1
a25 1
        coord_dim = 3
d28 1
d30 4
d47 1
a47 1
def generate_sigs(g, tex_inst, sampler_type, use_proj = False, unused_fields = 0):
d49 7
a55 1
    extra_dim = get_extra_dim(sampler_type, use_proj, unused_fields)
d58 1
a58 1
    print "   (signature " + g + "vec4"
d62 1
a62 3
    if tex_inst == "txb":
        print "\n       (declare (in) float bias)",
    elif tex_inst == "txl":
d71 6
a76 1
    print ")\n     ((return (" + tex_inst + " (var_ref sampler)",
d84 4
a87 2
    # Offset
    print "(0 0 0)",
d91 1
a91 1
        if use_proj:
d113 4
a116 4
def generate_fiu_sigs(tex_inst, sampler_type, use_proj = False, unused_fields = 0):
    generate_sigs("",  tex_inst, sampler_type, use_proj, unused_fields)
    generate_sigs("i", tex_inst, sampler_type, use_proj, unused_fields)
    generate_sigs("u", tex_inst, sampler_type, use_proj, unused_fields)
d140 5
d152 5
d160 15
a174 11
    generate_fiu_sigs("tex", "1D", True)
    generate_fiu_sigs("tex", "1D", True, 2)
    generate_fiu_sigs("tex", "2D", True)
    generate_fiu_sigs("tex", "2D", True, 1)
    generate_fiu_sigs("tex", "3D", True)

    generate_fiu_sigs("txb", "1D", True)
    generate_fiu_sigs("txb", "1D", True, 2)
    generate_fiu_sigs("txb", "2D", True)
    generate_fiu_sigs("txb", "2D", True, 1)
    generate_fiu_sigs("txb", "3D", True)
d184 3
d189 31
d228 26
d255 7
a261 5
    generate_fiu_sigs("txl", "1D", True)
    generate_fiu_sigs("txl", "1D", True, 2)
    generate_fiu_sigs("txl", "2D", True)
    generate_fiu_sigs("txl", "2D", True, 1)
    generate_fiu_sigs("txl", "3D", True)
d264 10
d281 5
d288 13
d302 7
a308 5
    generate_fiu_sigs("txd", "1D", True)
    generate_fiu_sigs("txd", "1D", True, 2)
    generate_fiu_sigs("txd", "2D", True)
    generate_fiu_sigs("txd", "2D", True, 1)
    generate_fiu_sigs("txd", "3D", True)
d311 11
d328 2
a329 2
    generate_sigs("", "tex", "2DRect", True)
    generate_sigs("", "tex", "2DRect", True, 1)
d337 1
a337 1
    generate_sigs("", "tex", "2DRectShadow", True)
d372 64
d447 4
a450 4
    generate_sigs("", "tex", "1D", True)
    generate_sigs("", "tex", "1D", True, 2)
    generate_sigs("", "txb", "1D", True)
    generate_sigs("", "txb", "1D", True, 2)
d454 2
a455 2
    generate_sigs("", "txl", "1D", True)
    generate_sigs("", "txl", "1D", True, 2)
d468 4
a471 4
    generate_sigs("", "tex", "2D", True)
    generate_sigs("", "tex", "2D", True, 1)
    generate_sigs("", "txb", "2D", True)
    generate_sigs("", "txb", "2D", True, 1)
d475 2
a476 2
    generate_sigs("", "txl", "2D", True)
    generate_sigs("", "txl", "2D", True, 1)
d489 2
a490 2
    generate_sigs("", "tex", "3D", True)
    generate_sigs("", "txb", "3D", True)
d494 1
a494 1
    generate_sigs("", "txl", "3D", True)
d516 2
a517 2
    generate_sigs("", "tex", "1DShadow", True, 1)
    generate_sigs("", "txb", "1DShadow", True, 1)
d521 1
a521 1
    generate_sigs("", "txl", "1DShadow", True, 1)
d534 2
a535 2
    generate_sigs("", "tex", "2DShadow", True)
    generate_sigs("", "txb", "2DShadow", True)
d539 1
a539 1
    generate_sigs("", "txl", "2DShadow", True)
d550 1
a550 1
	print v
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a5 5
# Bitfield constants for the 'variant' argument to generate_sigs
Proj = 1
Offset = 2
Single = 4

d15 3
a17 2
# Get the sampler dimension - i.e. sampler3D gives 3
def get_sampler_dim(sampler_type):
d19 1
a19 1
        sampler_dim = int(sampler_type[0])
d21 1
a21 5
        sampler_dim = 3
    elif sampler_type == "ExternalOES":
        sampler_dim = 2
    elif sampler_type == "Buffer":
        sampler_dim = 1
a23 1
    return sampler_dim
d25 1
a25 5
# Get the coordinate dimension for a given sampler type.
# Array samplers also get +1 here since the layer is really an extra coordinate
def get_coord_dim(sampler_type, tex_inst):
    coord_dim = get_sampler_dim(sampler_type)
    if sampler_type.find("Array") != -1 and tex_inst != "lod":
d30 1
a30 1
def get_extra_dim(sampler_type, use_proj, unused_fields, tex_inst):
d32 1
a32 3
    if sampler_type == "CubeArrayShadow":
        return 0
    if sampler_type.find("Shadow") != -1 and tex_inst != "lod":
d38 3
a40 26
def get_txs_dim(sampler_type, tex_inst):
    if sampler_type.startswith("CubeArray"):
        return 3
    if sampler_type.startswith("Cube"):
        return 2
    return get_coord_dim(sampler_type, tex_inst)

def has_lod(sampler_type):
    if 'Buffer' in sampler_type: return False
    if 'Rect' in sampler_type: return False
    if 'MS' in sampler_type: return False
    return True

def generate_sigs(g, tex_inst, sampler_type, variant = 0, unused_fields = 0):
    coord_dim = get_coord_dim(sampler_type, tex_inst)
    extra_dim = get_extra_dim(sampler_type, variant & Proj, unused_fields, tex_inst)
    sampler_dim = get_sampler_dim(sampler_type)

    if variant & Single:
        return_type = "float"
    elif tex_inst == "txs":
        return_type = vec_type("i", get_txs_dim(sampler_type, tex_inst))
    elif tex_inst == "lod":
        return_type = "vec2"
    else:
        return_type = g + "vec4"
d43 1
a43 1
    print "   (signature", return_type
d45 5
a49 4
    print "       (declare (in) " + g + "sampler" + sampler_type + " sampler)",
    if tex_inst != "txs":
        print "\n       (declare (in) " + vec_type("i" if tex_inst in ['txf','txf_ms'] else "", coord_dim + extra_dim) + " P)",
    if tex_inst == "txl":
d51 1
a51 1
    elif tex_inst in ['txf', 'txs'] and has_lod(sampler_type):
a52 2
    elif tex_inst == "txf_ms":
        print "\n       (declare (in) int sample)",
d54 1
a54 1
        grad_type = vec_type("", sampler_dim)
a56 2
    if sampler_type == "CubeArrayShadow" and tex_inst == "tex":
        print "\n       (declare (in) float compare)",
d58 1
a58 4
    if variant & Offset:
        print "\n       (declare (const_in) " + vec_type("i", sampler_dim) + " offset)",
    if tex_inst == "txb":
        print "\n       (declare (in) float bias)",
d60 5
a64 1
    print ")\n     ((return (" + tex_inst, return_type, "(var_ref sampler)",
d66 2
a67 6
    if tex_inst != "txs":
        # Coordinate
        if extra_dim > 0:
            print "(swiz " + "xyzw"[:coord_dim] + " (var_ref P))",
        else:
            print "(var_ref P)",
d69 1
a69 8
    if tex_inst not in ['txf_ms', 'txs', 'lod']:
        # Coordinate offset
        if variant & Offset:
            print "(var_ref offset)",
        else:
            print "0",

    if tex_inst not in ['txf', 'txf_ms', 'txs', 'lod']:
d71 1
a71 1
        if variant & Proj:
d77 1
a77 3
        if sampler_type == "CubeArrayShadow": # a special case
            print "(var_ref compare)",
        elif sampler_type == "2DArrayShadow" or sampler_type == "CubeShadow": # a special case:
d87 1
a87 8
    elif tex_inst in ['txs', 'txf', 'txf_ms']:
        if has_lod(sampler_type):
            print "(var_ref lod)",
        elif tex_inst == 'txf_ms':
            print "(var_ref sample)",
        else:
            print "(constant int (0))",
    elif tex_inst == "txl":
d93 4
a96 4
def generate_fiu_sigs(tex_inst, sampler_type, variant = 0, unused_fields = 0):
    generate_sigs("",  tex_inst, sampler_type, variant, unused_fields)
    generate_sigs("i", tex_inst, sampler_type, variant, unused_fields)
    generate_sigs("u", tex_inst, sampler_type, variant, unused_fields)
a112 21
    start_function("textureSize")
    generate_fiu_sigs("txs", "1D")
    generate_fiu_sigs("txs", "2D")
    generate_fiu_sigs("txs", "3D")
    generate_fiu_sigs("txs", "Cube")
    generate_fiu_sigs("txs", "1DArray")
    generate_fiu_sigs("txs", "2DArray")
    generate_sigs("", "txs", "1DShadow")
    generate_sigs("", "txs", "2DShadow")
    generate_sigs("", "txs", "CubeShadow")
    generate_sigs("", "txs", "1DArrayShadow")
    generate_sigs("", "txs", "2DArrayShadow")
    generate_fiu_sigs("txs", "2DRect")
    generate_sigs("", "txs", "2DRectShadow")
    generate_fiu_sigs("txs", "Buffer")
    generate_fiu_sigs("txs", "CubeArray")
    generate_sigs("", "txs", "CubeArrayShadow")
    generate_fiu_sigs("txs", "2DMS")
    generate_fiu_sigs("txs", "2DMSArray")
    end_function(fs, "textureSize")

a119 10
    generate_sigs("", "tex", "1DShadow", Single, 1);
    generate_sigs("", "tex", "2DShadow", Single);
    generate_sigs("", "tex", "CubeShadow", Single);
    generate_sigs("", "tex", "1DArrayShadow", Single);
    generate_sigs("", "tex", "2DArrayShadow", Single);
    generate_fiu_sigs("tex", "2DRect")
    generate_sigs("", "tex", "2DRectShadow", Single);
    # ARB_texture_cube_map_array extension
    generate_fiu_sigs("tex", "CubeArray")
    generate_sigs("", "tex", "CubeArrayShadow", Single);
a126 6
    generate_fiu_sigs("txb", "CubeArray")
    generate_sigs("", "txb", "1DShadow", Single, 1);
    generate_sigs("", "txb", "2DShadow", Single);
    generate_sigs("", "txb", "CubeShadow", Single);
    generate_sigs("", "txb", "1DArrayShadow", Single);
    generate_sigs("", "txb", "2DArrayShadow", Single);
d130 11
a140 18
    generate_fiu_sigs("tex", "1D", Proj)
    generate_fiu_sigs("tex", "1D", Proj, 2)
    generate_fiu_sigs("tex", "2D", Proj)
    generate_fiu_sigs("tex", "2D", Proj, 1)
    generate_fiu_sigs("tex", "3D", Proj)
    generate_sigs("", "tex", "1DShadow", Proj | Single, 1);
    generate_sigs("", "tex", "2DShadow", Proj | Single);
    generate_fiu_sigs("tex", "2DRect", Proj)
    generate_fiu_sigs("tex", "2DRect", Proj, 1)
    generate_sigs("", "tex", "2DRectShadow", Proj | Single);

    generate_fiu_sigs("txb", "1D", Proj)
    generate_fiu_sigs("txb", "1D", Proj, 2)
    generate_fiu_sigs("txb", "2D", Proj)
    generate_fiu_sigs("txb", "2D", Proj, 1)
    generate_fiu_sigs("txb", "3D", Proj)
    generate_sigs("", "txb", "1DShadow", Proj | Single, 1);
    generate_sigs("", "txb", "2DShadow", Proj | Single);
a149 5
    generate_sigs("", "txl", "1DShadow", Single, 1);
    generate_sigs("", "txl", "2DShadow", Single);
    generate_sigs("", "txl", "1DArrayShadow", Single);
    # ARB_texture_cube_map_array extension
    generate_fiu_sigs("txl", "CubeArray")
a151 33
    start_function("textureLodOffset")
    generate_fiu_sigs("txl", "1D", Offset)
    generate_fiu_sigs("txl", "2D", Offset)
    generate_fiu_sigs("txl", "3D", Offset)
    generate_fiu_sigs("txl", "1DArray", Offset)
    generate_fiu_sigs("txl", "2DArray", Offset)
    generate_sigs("", "txl", "1DShadow", Offset | Single, 1);
    generate_sigs("", "txl", "2DShadow", Offset | Single);
    generate_sigs("", "txl", "1DArrayShadow", Offset | Single);
    end_function(fs, "textureLodOffset")

    start_function("textureOffset")
    generate_fiu_sigs("tex", "1D", Offset)
    generate_fiu_sigs("tex", "2D", Offset)
    generate_fiu_sigs("tex", "3D", Offset)
    generate_fiu_sigs("tex", "2DRect", Offset)
    generate_sigs("", "tex", "2DRectShadow", Offset | Single);
    generate_fiu_sigs("tex", "1DArray", Offset)
    generate_fiu_sigs("tex", "2DArray", Offset)
    generate_sigs("", "tex", "1DShadow", Offset | Single, 1);
    generate_sigs("", "tex", "2DShadow", Offset | Single);
    generate_sigs("", "tex", "1DArrayShadow", Offset | Single);

    generate_fiu_sigs("txb", "1D", Offset)
    generate_fiu_sigs("txb", "2D", Offset)
    generate_fiu_sigs("txb", "3D", Offset)
    generate_fiu_sigs("txb", "1DArray", Offset)
    generate_fiu_sigs("txb", "2DArray", Offset)
    generate_sigs("", "txb", "1DShadow", Offset | Single, 1);
    generate_sigs("", "txb", "2DShadow", Offset | Single);
    generate_sigs("", "txb", "1DArrayShadow", Offset | Single);
    end_function(fs, "textureOffset")

a155 1
    generate_fiu_sigs("txf", "2DRect")
a157 3
    generate_fiu_sigs("txf", "Buffer")
    generate_fiu_sigs("txf_ms", "2DMS")
    generate_fiu_sigs("txf_ms", "2DMSArray")
a159 30
    start_function("texelFetchOffset")
    generate_fiu_sigs("txf", "1D", Offset)
    generate_fiu_sigs("txf", "2D", Offset)
    generate_fiu_sigs("txf", "3D", Offset)
    generate_fiu_sigs("txf", "2DRect", Offset)
    generate_fiu_sigs("txf", "1DArray", Offset)
    generate_fiu_sigs("txf", "2DArray", Offset)
    end_function(fs, "texelFetchOffset")

    start_function("textureProjOffset")
    generate_fiu_sigs("tex", "1D", Proj | Offset)
    generate_fiu_sigs("tex", "1D", Proj | Offset, 2)
    generate_fiu_sigs("tex", "2D", Proj | Offset)
    generate_fiu_sigs("tex", "2D", Proj | Offset, 1)
    generate_fiu_sigs("tex", "3D", Proj | Offset)
    generate_fiu_sigs("tex", "2DRect", Proj | Offset)
    generate_fiu_sigs("tex", "2DRect", Proj | Offset, 1)
    generate_sigs("", "tex", "2DRectShadow", Proj | Offset | Single);
    generate_sigs("", "tex", "1DShadow", Proj | Offset | Single, 1);
    generate_sigs("", "tex", "2DShadow", Proj | Offset | Single);

    generate_fiu_sigs("txb", "1D", Proj | Offset)
    generate_fiu_sigs("txb", "1D", Proj | Offset, 2)
    generate_fiu_sigs("txb", "2D", Proj | Offset)
    generate_fiu_sigs("txb", "2D", Proj | Offset, 1)
    generate_fiu_sigs("txb", "3D", Proj | Offset)
    generate_sigs("", "txb", "1DShadow", Proj | Offset | Single, 1);
    generate_sigs("", "txb", "2DShadow", Proj | Offset | Single);
    end_function(fs, "textureProjOffset")

d161 5
a165 7
    generate_fiu_sigs("txl", "1D", Proj)
    generate_fiu_sigs("txl", "1D", Proj, 2)
    generate_fiu_sigs("txl", "2D", Proj)
    generate_fiu_sigs("txl", "2D", Proj, 1)
    generate_fiu_sigs("txl", "3D", Proj)
    generate_sigs("", "txl", "1DShadow", Proj | Single, 1);
    generate_sigs("", "txl", "2DShadow", Proj | Single);
a167 10
    start_function("textureProjLodOffset")
    generate_fiu_sigs("txl", "1D", Proj | Offset)
    generate_fiu_sigs("txl", "1D", Proj | Offset, 2)
    generate_fiu_sigs("txl", "2D", Proj | Offset)
    generate_fiu_sigs("txl", "2D", Proj | Offset, 1)
    generate_fiu_sigs("txl", "3D", Proj | Offset)
    generate_sigs("", "txl", "1DShadow", Proj | Offset | Single, 1);
    generate_sigs("", "txl", "2DShadow", Proj | Offset | Single);
    end_function(fs, "textureProjLodOffset")

a174 9
    generate_fiu_sigs("txd", "2DRect")
    generate_sigs("", "txd", "2DRectShadow", Single);
    generate_sigs("", "txd", "1DShadow", Single, 1);
    generate_sigs("", "txd", "2DShadow", Single);
    generate_sigs("", "txd", "CubeShadow", Single);
    generate_sigs("", "txd", "1DArrayShadow", Single);
    generate_sigs("", "txd", "2DArrayShadow", Single);
    # ARB_texture_cube_map_array extension
    generate_fiu_sigs("txd", "CubeArray")
a176 14
    start_function("textureGradOffset")
    generate_fiu_sigs("txd", "1D", Offset)
    generate_fiu_sigs("txd", "2D", Offset)
    generate_fiu_sigs("txd", "3D", Offset)
    generate_fiu_sigs("txd", "2DRect", Offset)
    generate_sigs("", "txd", "2DRectShadow", Offset | Single);
    generate_fiu_sigs("txd", "1DArray", Offset)
    generate_fiu_sigs("txd", "2DArray", Offset)
    generate_sigs("", "txd", "1DShadow", Offset | Single, 1);
    generate_sigs("", "txd", "2DShadow", Offset | Single);
    generate_sigs("", "txd", "1DArrayShadow", Offset | Single);
    generate_sigs("", "txd", "2DArrayShadow", Offset | Single);
    end_function(fs, "textureGradOffset")

d178 5
a182 10
    generate_fiu_sigs("txd", "1D", Proj)
    generate_fiu_sigs("txd", "1D", Proj, 2)
    generate_fiu_sigs("txd", "2D", Proj)
    generate_fiu_sigs("txd", "2D", Proj, 1)
    generate_fiu_sigs("txd", "3D", Proj)
    generate_fiu_sigs("txd", "2DRect", Proj)
    generate_fiu_sigs("txd", "2DRect", Proj, 1)
    generate_sigs("", "txd", "2DRectShadow", Proj | Single);
    generate_sigs("", "txd", "1DShadow", Proj | Single, 1);
    generate_sigs("", "txd", "2DShadow", Proj | Single);
a184 14
    start_function("textureProjGradOffset")
    generate_fiu_sigs("txd", "1D", Proj | Offset)
    generate_fiu_sigs("txd", "1D", Proj | Offset, 2)
    generate_fiu_sigs("txd", "2D", Proj | Offset)
    generate_fiu_sigs("txd", "2D", Proj | Offset, 1)
    generate_fiu_sigs("txd", "3D", Proj | Offset)
    generate_fiu_sigs("txd", "2DRect", Proj | Offset)
    generate_fiu_sigs("txd", "2DRect", Proj | Offset, 1)
    generate_sigs("", "txd", "2DRectShadow", Proj | Offset | Single);
    generate_sigs("", "txd", "1DShadow", Proj | Offset | Single, 1);
    generate_sigs("", "txd", "2DShadow", Proj | Offset | Single);
    end_function(fs, "textureProjGradOffset")


d191 2
a192 2
    generate_sigs("", "tex", "2DRect", Proj)
    generate_sigs("", "tex", "2DRect", Proj, 1)
d200 1
a200 1
    generate_sigs("", "tex", "2DRectShadow", Proj)
a234 64
    # ARB_shader_texture_lod extension
    start_function("texture1DGradARB")
    generate_fiu_sigs("txd", "1D")
    end_function(fs, "texture1DGradARB")

    start_function("texture2DGradARB")
    generate_fiu_sigs("txd", "2D")
    end_function(fs, "texture2DGradARB")

    start_function("texture3DGradARB")
    generate_fiu_sigs("txd", "3D")
    end_function(fs, "texture3DGradARB")

    start_function("textureCubeGradARB")
    generate_fiu_sigs("txd", "Cube")
    end_function(fs, "textureCubeGradARB")

    start_function("texture1DProjGradARB")
    generate_fiu_sigs("txd", "1D", True)
    generate_fiu_sigs("txd", "1D", True, 2)
    end_function(fs, "texture1DProjGradARB")

    start_function("texture2DProjGradARB")
    generate_fiu_sigs("txd", "2D", True)
    generate_fiu_sigs("txd", "2D", True, 1)
    end_function(fs, "texture2DProjGradARB")

    start_function("texture3DProjGradARB")
    generate_fiu_sigs("txd", "3D", True)
    end_function(fs, "texture3DProjGradARB")

    start_function("shadow1DGradARB")
    generate_sigs("", "txd", "1DShadow", False, 1)
    end_function(fs, "shadow1DGradARB")

    start_function("shadow1DProjGradARB")
    generate_sigs("", "txd", "1DShadow", True, 1)
    end_function(fs, "shadow1DProjGradARB")

    start_function("shadow2DGradARB")
    generate_sigs("", "txd", "2DShadow", False)
    end_function(fs, "shadow2DGradARB")

    start_function("shadow2DProjGradARB")
    generate_sigs("", "txd", "2DShadow", True)
    end_function(fs, "shadow2DProjGradARB")

    start_function("texture2DRectGradARB")
    generate_sigs("", "txd", "2DRect")
    end_function(fs, "texture2DRectGradARB")

    start_function("texture2DRectProjGradARB")
    generate_sigs("", "txd", "2DRect", True)
    generate_sigs("", "txd", "2DRect", True, 1)
    end_function(fs, "texture2DRectProjGradARB")

    start_function("shadow2DRectGradARB")
    generate_sigs("", "txd", "2DRectShadow", False)
    end_function(fs, "shadow2DRectGradARB")

    start_function("shadow2DRectProjGradARB")
    generate_sigs("", "txd", "2DRectShadow", True)
    end_function(fs, "shadow2DRectProjGradARB")

d246 4
a249 4
    generate_sigs("", "tex", "1D", Proj)
    generate_sigs("", "tex", "1D", Proj, 2)
    generate_sigs("", "txb", "1D", Proj)
    generate_sigs("", "txb", "1D", Proj, 2)
d253 2
a254 2
    generate_sigs("", "txl", "1D", Proj)
    generate_sigs("", "txl", "1D", Proj, 2)
a259 2
    # OES_EGL_image_external
    generate_sigs("", "tex", "ExternalOES")
d267 4
a270 7
    generate_sigs("", "tex", "2D", Proj)
    generate_sigs("", "tex", "2D", Proj, 1)
    generate_sigs("", "txb", "2D", Proj)
    generate_sigs("", "txb", "2D", Proj, 1)
    # OES_EGL_image_external
    generate_sigs("", "tex", "ExternalOES", Proj)
    generate_sigs("", "tex", "ExternalOES", Proj, 1)
d274 2
a275 2
    generate_sigs("", "txl", "2D", Proj)
    generate_sigs("", "txl", "2D", Proj, 1)
d288 2
a289 2
    generate_sigs("", "tex", "3D", Proj)
    generate_sigs("", "txb", "3D", Proj)
d293 1
a293 1
    generate_sigs("", "txl", "3D", Proj)
d315 2
a316 2
    generate_sigs("", "tex", "1DShadow", Proj, 1)
    generate_sigs("", "txb", "1DShadow", Proj, 1)
d320 1
a320 1
    generate_sigs("", "txl", "1DShadow", Proj, 1)
d333 2
a334 2
    generate_sigs("", "tex", "2DShadow", Proj)
    generate_sigs("", "txb", "2DShadow", Proj)
d338 1
a338 1
    generate_sigs("", "txl", "2DShadow", Proj)
a340 16
    start_function("textureQueryLOD")
    generate_fiu_sigs("lod", "1D")
    generate_fiu_sigs("lod", "2D")
    generate_fiu_sigs("lod", "3D")
    generate_fiu_sigs("lod", "Cube")
    generate_fiu_sigs("lod", "1DArray")
    generate_fiu_sigs("lod", "2DArray")
    generate_fiu_sigs("lod", "CubeArray")
    generate_sigs("", "lod", "1DShadow")
    generate_sigs("", "lod", "2DShadow")
    generate_sigs("", "lod", "CubeShadow")
    generate_sigs("", "lod", "1DArrayShadow")
    generate_sigs("", "lod", "2DArrayShadow")
    generate_sigs("", "lod", "CubeArrayShadow")
    end_function(fs, "textureQueryLOD")

d349 1
a349 1
        print v
@

