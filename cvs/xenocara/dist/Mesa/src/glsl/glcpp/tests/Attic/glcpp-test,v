head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2015.12.23.05.17.45;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.4;
commitid	4ry2gvZGMXkCUD2n;

1.4
date	2015.01.25.14.41.19;	author jsg;	state Exp;
branches;
next	1.3;
commitid	mcxB0JvoI9gTDYXU;

1.3
date	2013.09.05.14.02.43;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.12;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.31;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2015.01.25.14.10.34;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.47.40;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@#!/bin/sh

if [ ! -z "$srcdir" ]; then
   testdir=$srcdir/glcpp/tests
   glcpp=`pwd`/glcpp/glcpp
else
   testdir=.
   glcpp=../glcpp
fi

trap 'rm $test.valgrind-errors; exit 1' INT QUIT

usage ()
{
    cat <<EOF
Usage: glcpp [options...]

Run the test suite for mesa's GLSL pre-processor.

Valid options include:

	--valgrind	Run the test suite a second time under valgrind
EOF
}

test_specific_args ()
{
    test="$1"

    grep 'glcpp-args:' "$test" | sed -e 's,^.*glcpp-args: *,,'
}

# Parse command-line options
for option; do
    if [ "${option}" = '--help' ] ; then
	usage
	exit 0
    elif [ "${option}" = '--valgrind' ] ; then
	do_valgrind=yes
    else
	echo "Unrecognized option: $option" >&2
	echo >&2
	usage
	exit 1
    fi
done

total=0
pass=0
clean=0

echo "====== Testing for correctness ======"
for test in $testdir/*.c; do
    echo -n "Testing $test..."
    $glcpp $(test_specific_args $test) < $test > $test.out 2>&1
    total=$((total+1))
    if cmp $test.expected $test.out >/dev/null 2>&1; then
	echo "PASS"
	pass=$((pass+1))
    else
	echo "FAIL"
	diff -u $test.expected $test.out
    fi
done

echo ""
echo "$pass/$total tests returned correct results"
echo ""

if [ "$do_valgrind" = "yes" ]; then
    echo "====== Testing for valgrind cleanliness ======"
    for test in $testdir/*.c; do
	echo -n "Testing $test with valgrind..."
	valgrind --error-exitcode=31 --log-file=$test.valgrind-errors $glcpp $(test_specific_args $test) < $test >/dev/null 2>&1
	if [ "$?" = "31" ]; then
	    echo "ERRORS"
	    cat $test.valgrind-errors
	else
	    echo "CLEAN"
	    clean=$((clean+1))
	    rm $test.valgrind-errors
	fi
    done

    echo ""
    echo "$pass/$total tests returned correct results"
    echo "$clean/$total tests are valgrind-clean"
fi

if [ "$pass" = "$total" ] && [ "$do_valgrind" != "yes" ] || [ "$pass" = "$total" ]; then
    exit 0
else
    exit 1
fi

@


1.5
log
@Merge Mesa 10.2.9
@
text
@@


1.4
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a21 1
	--testdir=<DIR>	Use tests in the given <DIR> (default is ".")
d30 1
a30 1
    tr "\r" "\n" < "$test" | grep 'glcpp-args:' | sed -e 's,^.*glcpp-args: *,,'
d35 11
a45 18
    case "${option}" in
        "--help")
            usage
            exit 0
            ;;
        "--valgrind")
	    do_valgrind=yes
            ;;
        "--testdir="*)
            testdir="${option#--testdir=}"
            ;;
        *)
	    echo "Unrecognized option: $option" >&2
	    echo >&2
	    usage
	    exit 1
            ;;
        esac
d54 1
a54 1
    printf "Testing $test..."
d73 1
a73 1
	printf "Testing $test with valgrind..."
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d22 1
d31 1
a31 1
    grep 'glcpp-args:' "$test" | sed -e 's,^.*glcpp-args: *,,'
d36 18
a53 11
    if [ "${option}" = '--help' ] ; then
	usage
	exit 0
    elif [ "${option}" = '--valgrind' ] ; then
	do_valgrind=yes
    else
	echo "Unrecognized option: $option" >&2
	echo >&2
	usage
	exit 1
    fi
d62 1
a62 1
    echo -n "Testing $test..."
d81 1
a81 1
	echo -n "Testing $test with valgrind..."
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d3 8
d26 7
d53 1
a53 1
for test in *.c; do
d55 1
a55 1
    ../glcpp < $test > $test.out 2>&1
d72 1
a72 1
    for test in *.c; do
d74 1
a74 1
	valgrind --error-exitcode=31 --log-file=$test.valgrind-errors ../glcpp < $test >/dev/null 2>&1
d90 1
a90 1
if [ "$pass" = "$total" ] && [ "$clean" = "$total" ]; then
@


1.1
log
@Initial revision
@
text
@d5 28
d55 14
a68 13
echo "====== Testing for valgrind cleanliness ======"
for test in *.c; do
    echo -n "Testing $test with valgrind..."
    valgrind --error-exitcode=31 --log-file=$test.valgrind-errors ../glcpp < $test >/dev/null 2>&1
    if [ "$?" = "31" ]; then
	echo "ERRORS"
	cat $test.valgrind-errors
    else
	echo "CLEAN"
	clean=$((clean+1))
	rm $test.valgrind-errors
    fi
done
d70 4
a73 3
echo ""
echo "$pass/$total tests returned correct results"
echo "$clean/$total tests are valgrind-clean"
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a2 8
if [ ! -z "$srcdir" ]; then
   testdir=$srcdir/glcpp/tests
   glcpp=`pwd`/glcpp/glcpp
else
   testdir=.
   glcpp=../glcpp
fi

a4 35
usage ()
{
    cat <<EOF
Usage: glcpp [options...]

Run the test suite for mesa's GLSL pre-processor.

Valid options include:

	--valgrind	Run the test suite a second time under valgrind
EOF
}

test_specific_args ()
{
    test="$1"

    grep 'glcpp-args:' "$test" | sed -e 's,^.*glcpp-args: *,,'
}

# Parse command-line options
for option; do
    if [ "${option}" = '--help' ] ; then
	usage
	exit 0
    elif [ "${option}" = '--valgrind' ] ; then
	do_valgrind=yes
    else
	echo "Unrecognized option: $option" >&2
	echo >&2
	usage
	exit 1
    fi
done

d10 1
a10 1
for test in $testdir/*.c; do
d12 1
a12 1
    $glcpp $(test_specific_args $test) < $test > $test.out 2>&1
d27 17
a43 19
if [ "$do_valgrind" = "yes" ]; then
    echo "====== Testing for valgrind cleanliness ======"
    for test in $testdir/*.c; do
	echo -n "Testing $test with valgrind..."
	valgrind --error-exitcode=31 --log-file=$test.valgrind-errors $glcpp $(test_specific_args $test) < $test >/dev/null 2>&1
	if [ "$?" = "31" ]; then
	    echo "ERRORS"
	    cat $test.valgrind-errors
	else
	    echo "CLEAN"
	    clean=$((clean+1))
	    rm $test.valgrind-errors
	fi
    done

    echo ""
    echo "$pass/$total tests returned correct results"
    echo "$clean/$total tests are valgrind-clean"
fi
d45 1
a45 1
if [ "$pass" = "$total" ] && [ "$do_valgrind" != "yes" ] || [ "$pass" = "$total" ]; then
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@a21 1
	--testdir=<DIR>	Use tests in the given <DIR> (default is ".")
d30 1
a30 1
    tr "\r" "\n" < "$test" | grep 'glcpp-args:' | sed -e 's,^.*glcpp-args: *,,'
d35 11
a45 18
    case "${option}" in
        "--help")
            usage
            exit 0
            ;;
        "--valgrind")
	    do_valgrind=yes
            ;;
        "--testdir="*)
            testdir="${option#--testdir=}"
            ;;
        *)
	    echo "Unrecognized option: $option" >&2
	    echo >&2
	    usage
	    exit 1
            ;;
        esac
d54 1
a54 1
    printf "Testing $test..."
d73 1
a73 1
	printf "Testing $test with valgrind..."
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d22 1
d31 1
a31 1
    grep 'glcpp-args:' "$test" | sed -e 's,^.*glcpp-args: *,,'
d36 18
a53 11
    if [ "${option}" = '--help' ] ; then
	usage
	exit 0
    elif [ "${option}" = '--valgrind' ] ; then
	do_valgrind=yes
    else
	echo "Unrecognized option: $option" >&2
	echo >&2
	usage
	exit 1
    fi
d62 1
a62 1
    echo -n "Testing $test..."
d81 1
a81 1
	echo -n "Testing $test with valgrind..."
@


