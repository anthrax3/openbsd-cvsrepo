head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.44;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.19;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.58;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.02.43;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.11;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.30;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.32;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.34;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.40;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <getopt.h>

#include "glcpp.h"
#include "main/mtypes.h"
#include "main/shaderobj.h"

extern int glcpp_parser_debug;

void
_mesa_reference_shader(struct gl_context *ctx, struct gl_shader **ptr,
                       struct gl_shader *sh)
{
   (void) ctx;
   *ptr = sh;
}

/* Read from fp until EOF and return a string of everything read.
 */
static char *
load_text_fp (void *ctx, FILE *fp)
{
#define CHUNK 4096
	char *text = NULL;
	size_t text_size = 0;
	size_t total_read = 0;
	size_t bytes;

	while (1) {
		if (total_read + CHUNK + 1 > text_size) {
			text_size = text_size ? text_size * 2 : CHUNK + 1;
			text = reralloc_size (ctx, text, text_size);
			if (text == NULL) {
				fprintf (stderr, "Out of memory\n");
				return NULL;
			}
		}
		bytes = fread (text + total_read, 1, CHUNK, fp);
		total_read += bytes;

		if (bytes < CHUNK) {
			break;
		}
	}

	text[total_read] = '\0';

	return text;
}

static char *
load_text_file(void *ctx, const char *filename)
{
	char *text;
	FILE *fp;

	if (filename == NULL || strcmp (filename, "-") == 0)
		return load_text_fp (ctx, stdin);

	fp = fopen (filename, "r");
	if (fp == NULL) {
		fprintf (stderr, "Failed to open file %s: %s\n",
			 filename, strerror (errno));
		return NULL;
	}

	text = load_text_fp (ctx, fp);

	fclose(fp);

	return text;
}

/* Initialize only those things that glcpp cares about.
 */
static void
init_fake_gl_context (struct gl_context *gl_ctx)
{
	gl_ctx->API = API_OPENGL_COMPAT;
	gl_ctx->Const.DisableGLSLLineContinuations = false;
}

static void
usage (void)
{
	fprintf (stderr,
		 "Usage: glcpp [OPTIONS] [--] [<filename>]\n"
		 "\n"
		 "Pre-process the given filename (stdin if no filename given).\n"
		 "The following options are supported:\n"
		 "    --disable-line-continuations      Do not interpret lines ending with a\n"
		 "                                      backslash ('\\') as a line continuation.\n");
}

enum {
	DISABLE_LINE_CONTINUATIONS_OPT = CHAR_MAX + 1
};

const static struct option
long_options[] = {
	{"disable-line-continuations", no_argument, 0, DISABLE_LINE_CONTINUATIONS_OPT },
	{0,                            0,           0, 0 }
};

int
main (int argc, char *argv[])
{
	char *filename = NULL;
	void *ctx = ralloc(NULL, void*);
	char *info_log = ralloc_strdup(ctx, "");
	const char *shader;
	int ret;
	struct gl_context gl_ctx;
	int c;

	init_fake_gl_context (&gl_ctx);

	while ((c = getopt_long(argc, argv, "", long_options, NULL)) != -1) {
		switch (c) {
		case DISABLE_LINE_CONTINUATIONS_OPT:
			gl_ctx.Const.DisableGLSLLineContinuations = true;
			break;
		default:
			usage ();
			exit (1);
		}
	}

	if (optind + 1 < argc) {
		printf ("Unexpected argument: %s\n", argv[optind+1]);
		usage ();
		exit (1);
	}
	if (optind < argc) {
		filename = argv[optind];
	}

	shader = load_text_file (ctx, filename);
	if (shader == NULL)
	   return 1;

	ret = glcpp_preprocess(ctx, &shader, &info_log, NULL, &gl_ctx);

	printf("%s", shader);
	fprintf(stderr, "%s", info_log);

	ralloc_free(ctx);

	return ret;
}
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a126 1
        {"debug",                      no_argument, 0, 'd'},
d143 1
a143 1
	while ((c = getopt_long(argc, argv, "d", long_options, NULL)) != -1) {
a146 3
			break;
                case 'd':
			glcpp_parser_debug = 1;
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d127 1
d144 1
a144 1
	while ((c = getopt_long(argc, argv, "", long_options, NULL)) != -1) {
d148 3
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d33 1
a33 1
extern int yydebug;
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d27 2
d39 1
d99 31
d138 4
d143 18
a160 2
	if (argc) {
		filename = argv[1];
d167 1
a167 1
	ret = preprocess(ctx, &shader, &info_log, NULL, API_OPENGL);
@


1.1
log
@Initial revision
@
text
@d24 1
a24 4
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
d40 1
a40 1
/* Read from fd until EOF and return a string of everything read.
d43 1
a43 1
load_text_fd (void *ctx, int fd)
d47 3
a49 3
	ssize_t text_size = 0;
	ssize_t total_read = 0;
	ssize_t bytes;
d60 2
a61 7
		bytes = read (fd, text + total_read, CHUNK);
		if (bytes < 0) {
			fprintf (stderr, "Error while reading: %s\n",
				 strerror (errno));
			ralloc_free (text);
			return NULL;
		}
d63 1
a63 1
		if (bytes == 0) {
a65 2

		total_read += bytes;
d77 1
a77 1
	int fd;
d80 1
a80 1
		return load_text_fd (ctx, STDIN_FILENO);
d82 2
a83 2
	fd = open (filename, O_RDONLY);
	if (fd < 0) {
d89 1
a89 1
	text = load_text_fd (ctx, fd);
d91 1
a91 1
	close(fd);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d24 4
a27 1
#include <stdio.h>
a29 2
#include <getopt.h>

a39 1
   (void) ctx;
d43 1
a43 1
/* Read from fp until EOF and return a string of everything read.
d46 1
a46 1
load_text_fp (void *ctx, FILE *fp)
d50 3
a52 3
	size_t text_size = 0;
	size_t total_read = 0;
	size_t bytes;
d63 7
a69 2
		bytes = fread (text + total_read, 1, CHUNK, fp);
		total_read += bytes;
d71 1
a71 1
		if (bytes < CHUNK) {
d74 2
d87 1
a87 1
	FILE *fp;
d90 1
a90 1
		return load_text_fp (ctx, stdin);
d92 2
a93 2
	fp = fopen (filename, "r");
	if (fp == NULL) {
d99 1
a99 1
	text = load_text_fp (ctx, fp);
d101 1
a101 1
	fclose(fp);
a105 31
/* Initialize only those things that glcpp cares about.
 */
static void
init_fake_gl_context (struct gl_context *gl_ctx)
{
	gl_ctx->API = API_OPENGL_COMPAT;
	gl_ctx->Const.DisableGLSLLineContinuations = false;
}

static void
usage (void)
{
	fprintf (stderr,
		 "Usage: glcpp [OPTIONS] [--] [<filename>]\n"
		 "\n"
		 "Pre-process the given filename (stdin if no filename given).\n"
		 "The following options are supported:\n"
		 "    --disable-line-continuations      Do not interpret lines ending with a\n"
		 "                                      backslash ('\\') as a line continuation.\n");
}

enum {
	DISABLE_LINE_CONTINUATIONS_OPT = CHAR_MAX + 1
};

const static struct option
long_options[] = {
	{"disable-line-continuations", no_argument, 0, DISABLE_LINE_CONTINUATIONS_OPT },
	{0,                            0,           0, 0 }
};

a113 2
	struct gl_context gl_ctx;
	int c;
d115 2
a116 20
	init_fake_gl_context (&gl_ctx);

	while ((c = getopt_long(argc, argv, "", long_options, NULL)) != -1) {
		switch (c) {
		case DISABLE_LINE_CONTINUATIONS_OPT:
			gl_ctx.Const.DisableGLSLLineContinuations = true;
			break;
		default:
			usage ();
			exit (1);
		}
	}

	if (optind + 1 < argc) {
		printf ("Unexpected argument: %s\n", argv[optind+1]);
		usage ();
		exit (1);
	}
	if (optind < argc) {
		filename = argv[optind];
d123 1
a123 1
	ret = glcpp_preprocess(ctx, &shader, &info_log, NULL, &gl_ctx);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d33 1
a33 1
extern int glcpp_parser_debug;
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a126 1
        {"debug",                      no_argument, 0, 'd'},
d143 1
a143 1
	while ((c = getopt_long(argc, argv, "d", long_options, NULL)) != -1) {
a146 3
			break;
                case 'd':
			glcpp_parser_debug = 1;
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d127 1
d144 1
a144 1
	while ((c = getopt_long(argc, argv, "", long_options, NULL)) != -1) {
d148 3
@


