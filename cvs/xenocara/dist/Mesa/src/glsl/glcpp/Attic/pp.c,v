head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.5.0.4
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.2
	OPENBSD_5_6_BASE:1.1.1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.1.1.2.0.2
	OPENBSD_5_5_BASE:1.1.1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2015.12.23.05.17.44;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.30;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.32;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.34;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.40;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <assert.h>
#include <string.h>
#include <ctype.h>
#include "glcpp.h"
#include "main/core.h" /* for isblank() on MSVC */

void
glcpp_error (YYLTYPE *locp, glcpp_parser_t *parser, const char *fmt, ...)
{
	va_list ap;

	parser->error = 1;
	ralloc_asprintf_append(&parser->info_log, "%u:%u(%u): "
						  "preprocessor error: ",
						  locp->source,
						  locp->first_line,
						  locp->first_column);
	va_start(ap, fmt);
	ralloc_vasprintf_append(&parser->info_log, fmt, ap);
	va_end(ap);
	ralloc_strcat(&parser->info_log, "\n");
}

void
glcpp_warning (YYLTYPE *locp, glcpp_parser_t *parser, const char *fmt, ...)
{
	va_list ap;

	ralloc_asprintf_append(&parser->info_log, "%u:%u(%u): "
						  "preprocessor warning: ",
						  locp->source,
						  locp->first_line,
						  locp->first_column);
	va_start(ap, fmt);
	ralloc_vasprintf_append(&parser->info_log, fmt, ap);
	va_end(ap);
	ralloc_strcat(&parser->info_log, "\n");
}

/* Searches backwards for '^ *#' from a given starting point. */
static int
in_directive(const char *shader, const char *ptr)
{
	assert(ptr >= shader);

	/* Search backwards for '#'. If we find a \n first, it doesn't count */
	for (; ptr >= shader && *ptr != '#'; ptr--) {
		if (*ptr == '\n')
			return 0;
	}
	if (ptr >= shader) {
		/* Found '#'...look for spaces preceded by a newline */
		for (ptr--; ptr >= shader && isblank(*ptr); ptr--);
		// FIXME: I don't think the '\n' case can happen
		if (ptr < shader || *ptr == '\n')
			return 1;
	}
	return 0;
}

/* Remove any line continuation characters in preprocessing directives.
 * However, ignore any in GLSL code, as "There is no line continuation
 * character" (1.30 page 9) in GLSL.
 */
static char *
remove_line_continuations(glcpp_parser_t *ctx, const char *shader)
{
	int in_continued_line = 0;
	int extra_newlines = 0;
	char *clean = ralloc_strdup(ctx, "");
	const char *search_start = shader;
	const char *newline;
	while ((newline = strchr(search_start, '\n')) != NULL) {
		const char *backslash = NULL;

		/* # of characters preceding the newline. */
		int n = newline - shader;

		/* Find the preceding '\', if it exists */
		if (n >= 1 && newline[-1] == '\\')
			backslash = newline - 1;
		else if (n >= 2 && newline[-1] == '\r' && newline[-2] == '\\')
			backslash = newline - 2;

		/* Double backslashes don't count (the backslash is escaped) */
		if (backslash != NULL && backslash[-1] == '\\') {
			backslash = NULL;
		}

		if (backslash != NULL) {
			/* We found a line continuation, but do we care? */
			if (!in_continued_line) {
				if (in_directive(shader, backslash)) {
					in_continued_line = 1;
					extra_newlines = 0;
				}
			}
			if (in_continued_line) {
				/* Copy everything before the \ */
				ralloc_strncat(&clean, shader, backslash - shader);
				shader = newline + 1;
				extra_newlines++;
			}
		} else if (in_continued_line) {
			/* Copy everything up to and including the \n */
			ralloc_strncat(&clean, shader, newline - shader + 1);
			shader = newline + 1;
			/* Output extra newlines to make line numbers match */
			for (; extra_newlines > 0; extra_newlines--)
				ralloc_strcat(&clean, "\n");
			in_continued_line = 0;
		}
		search_start = newline + 1;
	}
	ralloc_strcat(&clean, shader);
	return clean;
}

int
preprocess(void *ralloc_ctx, const char **shader, char **info_log,
	   const struct gl_extensions *extensions, int api)
{
	int errors;
	glcpp_parser_t *parser = glcpp_parser_create (extensions, api);
	*shader = remove_line_continuations(parser, *shader);

	glcpp_lex_set_source_string (parser, *shader);

	glcpp_parser_parse (parser);

	if (parser->skip_stack)
		glcpp_error (&parser->skip_stack->loc, parser, "Unterminated #if\n");

	ralloc_strcat(info_log, parser->info_log);

	ralloc_steal(ralloc_ctx, parser->output);
	*shader = parser->output;

	errors = parser->error;
	glcpp_parser_destroy (parser);
	return errors;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d36 5
a40 7
	ralloc_asprintf_rewrite_tail(&parser->info_log,
				     &parser->info_log_length,
				     "%u:%u(%u): "
				     "preprocessor error: ",
				     locp->source,
				     locp->first_line,
				     locp->first_column);
d42 1
a42 3
	ralloc_vasprintf_rewrite_tail(&parser->info_log,
				      &parser->info_log_length,
				      fmt, ap);
d44 1
a44 2
	ralloc_asprintf_rewrite_tail(&parser->info_log,
				     &parser->info_log_length, "\n");
d52 5
a56 7
	ralloc_asprintf_rewrite_tail(&parser->info_log,
				     &parser->info_log_length,
				     "%u:%u(%u): "
				     "preprocessor warning: ",
				     locp->source,
				     locp->first_line,
				     locp->first_column);
d58 1
a58 3
	ralloc_vasprintf_rewrite_tail(&parser->info_log,
				      &parser->info_log_length,
				      fmt, ap);
d60 1
a60 2
	ralloc_asprintf_rewrite_tail(&parser->info_log,
				     &parser->info_log_length, "\n");
d63 24
a86 2
/* Remove any line continuation characters in the shader, (whether in
 * preprocessing directives or in GLSL code).
d91 2
d94 18
a111 7
	const char *backslash, *newline, *search_start;
	int collapsed_newlines = 0;

	search_start = shader;

	while (true) {
		backslash = strchr(search_start, '\\');
d113 6
a118 15
		/* If we have previously collapsed any line-continuations,
		 * then we want to insert additional newlines at the next
		 * occurrence of a newline character to avoid changing any
		 * line numbers.
		 */
		if (collapsed_newlines) {
			newline = strchr(search_start, '\n');
			if (newline &&
			    (backslash == NULL || newline < backslash))
			{
				ralloc_strncat(&clean, shader,
					       newline - shader + 1);
				while (collapsed_newlines) {
					ralloc_strcat(&clean, "\n");
					collapsed_newlines--;
d120 4
d125 1
a125 1
				search_start = shader;
d127 8
d136 1
a136 22

		search_start = backslash + 1;

		if (backslash == NULL)
			break;

		/* At each line continuation, (backslash followed by a
		 * newline), copy all preceding text to the output, then
		 * advance the shader pointer to the character after the
		 * newline.
		 */
		if (backslash[1] == '\n' ||
		    (backslash[1] == '\r' && backslash[2] == '\n'))
		{
			collapsed_newlines++;
			ralloc_strncat(&clean, shader, backslash - shader);
			if (backslash[1] == '\n')
				shader = backslash + 2;
			else
				shader = backslash + 3;
			search_start = shader;
		}
a137 1

a138 1

d143 2
a144 2
glcpp_preprocess(void *ralloc_ctx, const char **shader, char **info_log,
	   const struct gl_extensions *extensions, struct gl_context *gl_ctx)
d147 2
a148 4
	glcpp_parser_t *parser = glcpp_parser_create (extensions, gl_ctx->API);

	if (! gl_ctx->Const.DisableGLSLLineContinuations)
		*shader = remove_line_continuations(parser, *shader);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a153 2
	glcpp_parser_resolve_implicit_version(parser);

@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a72 36
/* Given str, (that's expected to start with a newline terminator of some
 * sort), return a pointer to the first character in str after the newline.
 *
 * A newline terminator can be any of the following sequences:
 *
 *	"\r\n"
 *	"\n\r"
 *	"\n"
 *	"\r"
 *
 * And the longest such sequence will be skipped.
 */
static const char *
skip_newline (const char *str)
{
	const char *ret = str;

	if (ret == NULL)
		return ret;

	if (*ret == '\0')
		return ret;

	if (*ret == '\r') {
		ret++;
		if (*ret && *ret == '\n')
			ret++;
	} else if (*ret == '\n') {
		ret++;
		if (*ret && *ret == '\r')
			ret++;
	}

	return ret;
}

a80 2
        const char *cr, *lf;
        char newline_separator[3];
a84 37
	/* Determine what flavor of newlines this shader is using. GLSL
	 * provides for 4 different possible ways to separate lines, (using
	 * one or two characters):
	 *
	 *	"\n" (line-feed, like Linux, Unix, and new Mac OS)
	 *	"\r" (carriage-return, like old Mac files)
	 *	"\r\n" (carriage-return + line-feed, like DOS files)
	 *	"\n\r" (line-feed + carriage-return, like nothing, really)
	 *
	 * This code explicitly supports a shader that uses a mixture of
	 * newline terminators and will properly handle line continuation
	 * backslashes followed by any of the above.
	 *
	 * But, since we must also insert additional newlines in the output
	 * (for any collapsed lines) we attempt to maintain consistency by
	 * examining the first encountered newline terminator, and using the
	 * same terminator for any newlines we insert.
	 */
	cr = strchr(search_start, '\r');
	lf = strchr(search_start, '\n');

	newline_separator[0] = '\n';
	newline_separator[1] = '\0';
	newline_separator[2] = '\0';

	if (cr == NULL) {
		/* Nothing to do. */
	} else if (lf == NULL) {
		newline_separator[0] = '\r';
	} else if (lf == cr + 1) {
		newline_separator[0] = '\r';
		newline_separator[1] = '\n';
	} else if (cr == lf + 1) {
		newline_separator[0] = '\n';
		newline_separator[1] = '\r';
	}

d94 1
a94 8
			cr = strchr (search_start, '\r');
			lf = strchr (search_start, '\n');
			if (cr && lf)
				newline = cr < lf ? cr : lf;
			else if (cr)
				newline = cr;
			else
				newline = lf;
d101 1
a101 1
					ralloc_strcat(&clean, newline_separator);
d104 1
a104 1
				shader = skip_newline (newline);
d119 2
a120 1
		if (backslash[1] == '\r' || backslash[1] == '\n')
d124 4
a127 1
			shader = skip_newline (backslash + 1);
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d73 36
d117 2
d123 37
d169 8
a176 1
			newline = strchr(search_start, '\n');
d183 1
a183 1
					ralloc_strcat(&clean, "\n");
d186 1
a186 1
				shader = newline + 1;
d201 1
a201 2
		if (backslash[1] == '\n' ||
		    (backslash[1] == '\r' && backslash[2] == '\n'))
d205 1
a205 4
			if (backslash[1] == '\n')
				shader = backslash + 2;
			else
				shader = backslash + 3;
@


