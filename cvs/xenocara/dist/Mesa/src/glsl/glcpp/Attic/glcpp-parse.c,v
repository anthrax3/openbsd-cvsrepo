head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.23.05.17.44;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.7;
commitid	4ry2gvZGMXkCUD2n;

1.7
date	2015.01.25.14.41.19;	author jsg;	state Exp;
branches;
next	1.6;
commitid	mcxB0JvoI9gTDYXU;

1.6
date	2014.07.09.21.08.58;	author jsg;	state Exp;
branches;
next	1.5;
commitid	WPD6rgPryPkvXOr9;

1.5
date	2013.10.05.09.53.56;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2013.09.05.14.02.42;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.16.21.19;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.11;	author mpi;	state dead;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.29;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.10.05.09.24.12;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.32;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.10.33;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.47.39;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         glcpp_parser_parse
#define yylex           glcpp_parser_lex
#define yyerror         glcpp_parser_error
#define yydebug         glcpp_parser_debug
#define yynerrs         glcpp_parser_nerrs


/* Copy the first part of user declarations.  */
#line 1 "glcpp/glcpp-parse.y" /* yacc.c:339  */

/*
 * Copyright Â© 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <inttypes.h>

#include "glcpp.h"
#include "main/core.h" /* for struct gl_extensions */
#include "main/mtypes.h" /* for gl_api enum */

static void
yyerror (YYLTYPE *locp, glcpp_parser_t *parser, const char *error);

static void
_define_object_macro (glcpp_parser_t *parser,
		      YYLTYPE *loc,
		      const char *macro,
		      token_list_t *replacements);

static void
_define_function_macro (glcpp_parser_t *parser,
			YYLTYPE *loc,
			const char *macro,
			string_list_t *parameters,
			token_list_t *replacements);

static string_list_t *
_string_list_create (void *ctx);

static void
_string_list_append_item (string_list_t *list, const char *str);

static int
_string_list_contains (string_list_t *list, const char *member, int *index);

static int
_string_list_length (string_list_t *list);

static int
_string_list_equal (string_list_t *a, string_list_t *b);

static argument_list_t *
_argument_list_create (void *ctx);

static void
_argument_list_append (argument_list_t *list, token_list_t *argument);

static int
_argument_list_length (argument_list_t *list);

static token_list_t *
_argument_list_member_at (argument_list_t *list, int index);

/* Note: This function ralloc_steal()s the str pointer. */
static token_t *
_token_create_str (void *ctx, int type, char *str);

static token_t *
_token_create_ival (void *ctx, int type, int ival);

static token_list_t *
_token_list_create (void *ctx);

static void
_token_list_append (token_list_t *list, token_t *token);

static void
_token_list_append_list (token_list_t *list, token_list_t *tail);

static int
_token_list_equal_ignoring_space (token_list_t *a, token_list_t *b);

static void
_parser_active_list_push (glcpp_parser_t *parser,
			  const char *identifier,
			  token_node_t *marker);

static void
_parser_active_list_pop (glcpp_parser_t *parser);

static int
_parser_active_list_contains (glcpp_parser_t *parser, const char *identifier);

/* Expand list, and begin lexing from the result (after first
 * prefixing a token of type 'head_token_type').
 */
static void
_glcpp_parser_expand_and_lex_from (glcpp_parser_t *parser,
				   int head_token_type,
				   token_list_t *list);

/* Perform macro expansion in-place on the given list. */
static void
_glcpp_parser_expand_token_list (glcpp_parser_t *parser,
				 token_list_t *list);

static void
_glcpp_parser_print_expanded_token_list (glcpp_parser_t *parser,
					 token_list_t *list);

static void
_glcpp_parser_skip_stack_push_if (glcpp_parser_t *parser, YYLTYPE *loc,
				  int condition);

static void
_glcpp_parser_skip_stack_change_if (glcpp_parser_t *parser, YYLTYPE *loc,
				    const char *type, int condition);

static void
_glcpp_parser_skip_stack_pop (glcpp_parser_t *parser, YYLTYPE *loc);

static void
_glcpp_parser_handle_version_declaration(glcpp_parser_t *parser, intmax_t version,
                                         const char *ident, bool explicitly_set);

static int
glcpp_parser_lex (YYSTYPE *yylval, YYLTYPE *yylloc, glcpp_parser_t *parser);

static void
glcpp_parser_lex_from (glcpp_parser_t *parser, token_list_t *list);

static void
add_builtin_define(glcpp_parser_t *parser, const char *name, int value);


#line 222 "glcpp/glcpp-parse.c" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 1
#endif

/* In a future release of Bison, this section will be replaced
   by #include "glcpp-parse.h".  */
#ifndef YY_GLCPP_PARSER_SRC_GLSL_GLCPP_GLCPP_PARSE_H_INCLUDED
# define YY_GLCPP_PARSER_SRC_GLSL_GLCPP_GLCPP_PARSE_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int glcpp_parser_debug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    COMMA_FINAL = 258,
    DEFINED = 259,
    ELIF_EXPANDED = 260,
    HASH = 261,
    HASH_DEFINE = 262,
    FUNC_IDENTIFIER = 263,
    OBJ_IDENTIFIER = 264,
    HASH_ELIF = 265,
    HASH_ELSE = 266,
    HASH_ENDIF = 267,
    HASH_IF = 268,
    HASH_IFDEF = 269,
    HASH_IFNDEF = 270,
    HASH_LINE = 271,
    HASH_UNDEF = 272,
    HASH_VERSION = 273,
    IDENTIFIER = 274,
    IF_EXPANDED = 275,
    INTEGER = 276,
    INTEGER_STRING = 277,
    LINE_EXPANDED = 278,
    NEWLINE = 279,
    OTHER = 280,
    PLACEHOLDER = 281,
    SPACE = 282,
    PASTE = 283,
    OR = 284,
    AND = 285,
    EQUAL = 286,
    NOT_EQUAL = 287,
    LESS_OR_EQUAL = 288,
    GREATER_OR_EQUAL = 289,
    LEFT_SHIFT = 290,
    RIGHT_SHIFT = 291,
    UNARY = 292
  };
#endif

/* Value type.  */

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int glcpp_parser_parse (glcpp_parser_t *parser);

#endif /* !YY_GLCPP_PARSER_SRC_GLSL_GLCPP_GLCPP_PARSE_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 319 "glcpp/glcpp-parse.c" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  2
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   695

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  60
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  26
/* YYNRULES -- Number of rules.  */
#define YYNRULES  115
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  181

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   292

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    50,     2,     2,     2,    46,    33,     2,
      48,    49,    44,    42,    52,    43,    57,    45,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,    58,
      36,    59,    37,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    53,     2,    54,    32,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    55,    31,    56,    51,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    34,    35,    38,    39,
      40,    41,    47
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   188,   188,   190,   194,   197,   197,   208,   213,   214,
     218,   221,   224,   232,   245,   248,   251,   257,   257,   260,
     260,   270,   270,   292,   302,   302,   309,   309,   316,   341,
     361,   361,   374,   374,   377,   383,   389,   395,   404,   409,
     410,   415,   418,   421,   424,   427,   430,   433,   436,   439,
     442,   445,   448,   451,   454,   457,   460,   468,   476,   479,
     482,   485,   488,   491,   497,   502,   510,   511,   515,   521,
     522,   525,   527,   534,   538,   542,   547,   551,   558,   563,
     570,   574,   578,   582,   586,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 1
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "COMMA_FINAL", "DEFINED",
  "ELIF_EXPANDED", "HASH", "HASH_DEFINE", "FUNC_IDENTIFIER",
  "OBJ_IDENTIFIER", "HASH_ELIF", "HASH_ELSE", "HASH_ENDIF", "HASH_IF",
  "HASH_IFDEF", "HASH_IFNDEF", "HASH_LINE", "HASH_UNDEF", "HASH_VERSION",
  "IDENTIFIER", "IF_EXPANDED", "INTEGER", "INTEGER_STRING",
  "LINE_EXPANDED", "NEWLINE", "OTHER", "PLACEHOLDER", "SPACE", "PASTE",
  "OR", "AND", "'|'", "'^'", "'&'", "EQUAL", "NOT_EQUAL", "'<'", "'>'",
  "LESS_OR_EQUAL", "GREATER_OR_EQUAL", "LEFT_SHIFT", "RIGHT_SHIFT", "'+'",
  "'-'", "'*'", "'/'", "'%'", "UNARY", "'('", "')'", "'!'", "'~'", "','",
  "'['", "']'", "'{'", "'}'", "'.'", "';'", "'='", "$accept", "input",
  "line", "$@@1", "expanded_line", "define", "control_line", "$@@2", "$@@3",
  "$@@4", "$@@5", "$@@6", "$@@7", "$@@8", "integer_constant", "expression",
  "identifier_list", "text_line", "non_directive", "replacement_list",
  "junk", "conditional_token", "conditional_tokens", "pp_tokens",
  "preprocessing_token", "operator", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   124,    94,    38,   286,   287,    60,    62,   288,   289,
     290,   291,    43,    45,    42,    47,    37,   292,    40,    41,
      33,   126,    44,    91,    93,   123,   125,    46,    59,    61
};
# endif

#define YYPACT_NINF -166

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-166)))

#define YYTABLE_NINF -1

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
    -166,   147,  -166,    87,   -10,  -166,   190,  -166,  -166,   -17,
    -166,  -166,  -166,  -166,    52,  -166,    87,  -166,    52,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,   360,  -166,  -166,
    -166,  -166,  -166,    87,    87,    87,    87,    87,  -166,   519,
    -166,  -166,   401,   105,    31,  -166,  -166,   233,  -166,    34,
      44,  -166,   319,    67,    86,   483,    88,    -8,   542,    48,
    -166,  -166,  -166,  -166,   560,  -166,  -166,  -166,    87,    87,
      87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
      87,    87,    87,    87,    87,    87,  -166,   -35,   483,  -166,
    -166,    96,  -166,  -166,  -166,  -166,   276,   483,   483,   442,
      92,    93,  -166,  -166,  -166,    94,  -166,   580,   596,   611,
     625,   638,   649,   649,    19,    19,    19,    19,    38,    38,
      66,    66,  -166,  -166,  -166,    18,    95,   483,    72,  -166,
      98,   483,   100,  -166,  -166,  -166,  -166,  -166,   483,    26,
    -166,  -166,  -166,  -166,   101,   483,   107,  -166,   108,  -166,
    -166
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint8 yydefact[] =
{
       2,     0,     1,     0,     0,    17,     0,    30,    32,    21,
      24,    26,     5,    19,     0,    80,     0,    81,     0,    66,
      83,    84,   115,   111,   110,   109,   108,    92,   106,   107,
     102,   103,   104,   105,   100,   101,    94,    95,    93,    98,
      99,    87,    88,    97,    96,   113,    85,    86,    89,    90,
      91,   112,   114,     3,     8,     4,     7,     0,    78,    82,
      40,    38,    37,     0,     0,     0,     0,     0,    39,     0,
      36,     9,     0,     0,     0,    29,    76,     0,    75,     0,
       0,    23,     0,     0,     0,     0,     0,     0,     0,     0,
      67,    79,    62,    61,     0,    59,    60,    11,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    68,     0,    69,    18,
      73,     0,    28,    77,    31,    33,     0,    71,    71,     0,
       0,     0,    34,    10,    12,     0,    63,    41,    42,    43,
      44,    45,    47,    46,    51,    50,    49,    48,    53,    52,
      55,    54,    58,    57,    56,     0,     0,    70,     0,    22,
       0,    72,     0,     6,    20,    35,    13,    64,    69,     0,
      14,    74,    25,    27,     0,    69,     0,    15,     0,    65,
      16
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,   -12,   -11,  -166,  -166,  -166,  -165,
       3,   -69,    51,     0,    -6,  -166
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     1,    53,    85,    54,   119,    55,    73,    86,    82,
      83,    84,    79,    80,    68,    69,   169,    56,    71,   156,
     160,    76,    77,   157,    58,    59
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_uint8 yytable[] =
{
      78,    57,    87,   174,    72,    88,    89,    81,   123,    15,
     178,   131,    17,   155,    70,    20,   132,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,   167,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
     120,    91,    92,    93,    94,    95,    96,   123,   124,   109,
     110,   111,   112,   113,   114,   115,    91,   168,   125,    61,
      62,    78,   134,    61,    62,   175,    78,   135,   176,   121,
     111,   112,   113,   114,   115,   129,   127,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   128,    60,   130,    61,    62,
     113,   114,   115,   117,   118,   158,   164,   165,   166,   170,
      78,   171,   172,    91,   173,   177,   179,   161,   161,    63,
      64,   162,   180,   126,     0,    65,     0,    66,    67,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,    91,     3,     4,     5,    91,     0,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,     0,    17,
      18,    19,    20,     0,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    74,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,     0,     0,    15,
       0,     0,    17,     0,    75,    20,     0,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    74,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
       0,     0,    15,     0,     0,    17,     0,   122,    20,     0,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      74,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,     0,     0,    15,     0,     0,    17,     0,
     159,    20,     0,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    74,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,     0,     0,    15,     0,
       0,    17,     0,     0,    20,     0,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,     0,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    15,
       0,     0,    17,     0,    90,    20,     0,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,     0,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      15,     0,     0,    17,     0,   116,    20,     0,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    15,     0,     0,    17,     0,   163,    20,     0,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,     0,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    15,     0,     0,    17,     0,     0,    20,     0,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
       0,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    97,     0,     0,     0,     0,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   133,     0,     0,     0,
       0,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,     0,     0,   136,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115
};

static const yytype_int16 yycheck[] =
{
       6,     1,    14,   168,     4,    16,    18,    24,    77,    19,
     175,    19,    22,    48,    24,    25,    24,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    19,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      19,    57,    63,    64,    65,    66,    67,   126,    24,    40,
      41,    42,    43,    44,    45,    46,    72,    49,    24,    21,
      22,    77,    24,    21,    22,    49,    82,    89,    52,    48,
      42,    43,    44,    45,    46,    85,    19,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    19,    19,    19,    21,    22,
      44,    45,    46,     8,     9,    19,    24,    24,    24,    24,
     126,    49,    24,   129,    24,    24,    19,   127,   128,    42,
      43,   128,    24,    82,    -1,    48,    -1,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,
      -1,   157,     5,     6,     7,   161,    -1,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,     4,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    -1,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,     4,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    -1,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
       4,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,     4,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    -1,    19,    -1,
      -1,    22,    -1,    -1,    25,    -1,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    19,
      -1,    -1,    22,    -1,    24,    25,    -1,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      19,    -1,    -1,    22,    -1,    24,    25,    -1,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    19,    -1,    -1,    22,    -1,    24,    25,    -1,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    19,    -1,    -1,    22,    -1,    -1,    25,    -1,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    24,    -1,    -1,    -1,    -1,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    24,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    -1,    -1,    49,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    61,     0,     5,     6,     7,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    22,    23,    24,
      25,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    62,    64,    66,    77,    83,    84,    85,
      19,    21,    22,    42,    43,    48,    50,    51,    74,    75,
      24,    78,    83,    67,     4,    24,    81,    82,    84,    72,
      73,    24,    69,    70,    71,    63,    68,    74,    75,    74,
      24,    84,    75,    75,    75,    75,    75,    24,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    24,     8,     9,    65,
      19,    48,    24,    81,    24,    24,    82,    19,    19,    83,
      19,    19,    24,    24,    24,    74,    49,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    48,    79,    83,    19,    24,
      80,    83,    80,    24,    24,    24,    24,    19,    49,    76,
      24,    49,    24,    24,    79,    49,    52,    24,    79,    19,
      24
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    60,    61,    61,    62,    63,    62,    62,    62,    62,
      64,    64,    64,    64,    65,    65,    65,    67,    66,    68,
      66,    69,    66,    66,    70,    66,    71,    66,    66,    66,
      72,    66,    73,    66,    66,    66,    66,    74,    74,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    76,    76,    77,    77,    78,    79,
      79,    80,    80,    81,    81,    81,    82,    82,    83,    83,
      84,    84,    84,    84,    84,    85,    85,    85,    85,    85,
      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
      85,    85,    85,    85,    85,    85
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     0,     2,     1,     0,     4,     1,     1,     2,
       3,     3,     3,     4,     3,     5,     6,     0,     3,     0,
       4,     0,     4,     2,     0,     5,     0,     5,     3,     2,
       0,     3,     0,     3,     3,     4,     2,     1,     1,     1,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     2,     2,     3,     1,     3,     1,     2,     2,     0,
       1,     0,     1,     2,     4,     1,     1,     2,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, parser, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, glcpp_parser_t *parser)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  YYUSE (parser);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, glcpp_parser_t *parser)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, parser);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, glcpp_parser_t *parser)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, parser); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, glcpp_parser_t *parser)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (parser);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (glcpp_parser_t *parser)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

/* User initialization code.  */
#line 155 "glcpp/glcpp-parse.y" /* yacc.c:1429  */
{
	yylloc.first_line = 1;
	yylloc.first_column = 1;
	yylloc.last_line = 1;
	yylloc.last_column = 1;
	yylloc.source = 0;
}

#line 1561 "glcpp/glcpp-parse.c" /* yacc.c:1429  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, parser);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 4:
#line 194 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		ralloc_asprintf_rewrite_tail (&parser->output, &parser->output_length, "\n");
	}
#line 1752 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 5:
#line 197 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1760 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 6:
#line 199 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {

		if (parser->skip_stack == NULL ||
		    parser->skip_stack->type == SKIP_NO_SKIP)
		{
			_glcpp_parser_expand_and_lex_from (parser,
							   LINE_EXPANDED, (yyvsp[-1].token_list));
		}
	}
#line 1774 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 7:
#line 208 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		_glcpp_parser_print_expanded_token_list (parser, (yyvsp[0].token_list));
		ralloc_asprintf_rewrite_tail (&parser->output, &parser->output_length, "\n");
		ralloc_free ((yyvsp[0].token_list));
	}
#line 1784 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 10:
#line 218 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-2]), (yyvsp[-1].ival));
	}
#line 1792 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 11:
#line 221 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-2]), "elif", (yyvsp[-1].ival));
	}
#line 1800 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 12:
#line 224 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		parser->has_new_line_number = 1;
		parser->new_line_number = (yyvsp[-1].ival);
		ralloc_asprintf_rewrite_tail (&parser->output,
					      &parser->output_length,
					      "#line %" PRIiMAX "\n",
					      (yyvsp[-1].ival));
	}
#line 1813 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 13:
#line 232 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		parser->has_new_line_number = 1;
		parser->new_line_number = (yyvsp[-2].ival);
		parser->has_new_source_number = 1;
		parser->new_source_number = (yyvsp[-1].ival);
		ralloc_asprintf_rewrite_tail (&parser->output,
					      &parser->output_length,
					      "#line %" PRIiMAX " %" PRIiMAX "\n",
					      (yyvsp[-2].ival), (yyvsp[-1].ival));
	}
#line 1828 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 14:
#line 245 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		_define_object_macro (parser, & (yylsp[-2]), (yyvsp[-2].str), (yyvsp[-1].token_list));
	}
#line 1836 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 15:
#line 248 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		_define_function_macro (parser, & (yylsp[-4]), (yyvsp[-4].str), NULL, (yyvsp[-1].token_list));
	}
#line 1844 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 16:
#line 251 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		_define_function_macro (parser, & (yylsp[-5]), (yyvsp[-5].str), (yyvsp[-3].string_list), (yyvsp[-1].token_list));
	}
#line 1852 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 17:
#line 257 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1860 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 19:
#line 260 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1868 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 20:
#line 262 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		macro_t *macro = hash_table_find (parser->defines, (yyvsp[-1].str));
		if (macro) {
			hash_table_remove (parser->defines, (yyvsp[-1].str));
			ralloc_free (macro);
		}
		ralloc_free ((yyvsp[-1].str));
	}
#line 1881 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 21:
#line 270 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1889 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 22:
#line 272 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		/* Be careful to only evaluate the 'if' expression if
		 * we are not skipping. When we are skipping, we
		 * simply push a new 0-valued 'if' onto the skip
		 * stack.
		 *
		 * This avoids generating diagnostics for invalid
		 * expressions that are being skipped. */
		if (parser->skip_stack == NULL ||
		    parser->skip_stack->type == SKIP_NO_SKIP)
		{
			_glcpp_parser_expand_and_lex_from (parser,
							   IF_EXPANDED, (yyvsp[-1].token_list));
		}	
		else
		{
			_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-3]), 0);
			parser->skip_stack->type = SKIP_TO_ENDIF;
		}
	}
#line 1914 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 23:
#line 292 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		/* #if without an expression is only an error if we
		 *  are not skipping */
		if (parser->skip_stack == NULL ||
		    parser->skip_stack->type == SKIP_NO_SKIP)
		{
			glcpp_error(& (yylsp[-1]), parser, "#if with no expression");
		}	
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-1]), 0);
	}
#line 1929 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 24:
#line 302 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1937 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 25:
#line 304 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		macro_t *macro = hash_table_find (parser->defines, (yyvsp[-2].str));
		ralloc_free ((yyvsp[-2].str));
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-4]), macro != NULL);
	}
#line 1947 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 26:
#line 309 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1955 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 27:
#line 311 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		macro_t *macro = hash_table_find (parser->defines, (yyvsp[-2].str));
		ralloc_free ((yyvsp[-2].str));
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-3]), macro == NULL);
	}
#line 1965 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 28:
#line 316 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		/* Be careful to only evaluate the 'elif' expression
		 * if we are not skipping. When we are skipping, we
		 * simply change to a 0-valued 'elif' on the skip
		 * stack.
		 *
		 * This avoids generating diagnostics for invalid
		 * expressions that are being skipped. */
		if (parser->skip_stack &&
		    parser->skip_stack->type == SKIP_TO_ELSE)
		{
			_glcpp_parser_expand_and_lex_from (parser,
							   ELIF_EXPANDED, (yyvsp[-1].token_list));
		}
		else if (parser->skip_stack &&
		    parser->skip_stack->has_else)
		{
			glcpp_error(& (yylsp[-2]), parser, "#elif after #else");
		}
		else
		{
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-2]),
							    "elif", 0);
		}
	}
#line 1995 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 29:
#line 341 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		/* #elif without an expression is an error unless we
		 * are skipping. */
		if (parser->skip_stack &&
		    parser->skip_stack->type == SKIP_TO_ELSE)
		{
			glcpp_error(& (yylsp[-1]), parser, "#elif with no expression");
		}
		else if (parser->skip_stack &&
		    parser->skip_stack->has_else)
		{
			glcpp_error(& (yylsp[-1]), parser, "#elif after #else");
		}
		else
		{
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-1]),
							    "elif", 0);
			glcpp_warning(& (yylsp[-1]), parser, "ignoring illegal #elif without expression");
		}
	}
#line 2020 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 30:
#line 361 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		if (parser->skip_stack &&
		    parser->skip_stack->has_else)
		{
			glcpp_error(& (yylsp[0]), parser, "multiple #else");
		}
		else
		{
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[0]), "else", 1);
			if (parser->skip_stack)
				parser->skip_stack->has_else = true;
		}
	}
#line 2038 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 32:
#line 374 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		_glcpp_parser_skip_stack_pop (parser, & (yylsp[0]));
	}
#line 2046 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 34:
#line 377 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		if (parser->version_resolved) {
			glcpp_error(& (yylsp[-2]), parser, "#version must appear on the first line");
		}
		_glcpp_parser_handle_version_declaration(parser, (yyvsp[-1].ival), NULL, true);
	}
#line 2057 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 35:
#line 383 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		if (parser->version_resolved) {
			glcpp_error(& (yylsp[-3]), parser, "#version must appear on the first line");
		}
		_glcpp_parser_handle_version_declaration(parser, (yyvsp[-2].ival), (yyvsp[-1].str), true);
	}
#line 2068 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 36:
#line 389 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 2076 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 37:
#line 395 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		if (strlen ((yyvsp[0].str)) >= 3 && strncmp ((yyvsp[0].str), "0x", 2) == 0) {
			(yyval.ival) = strtoll ((yyvsp[0].str) + 2, NULL, 16);
		} else if ((yyvsp[0].str)[0] == '0') {
			(yyval.ival) = strtoll ((yyvsp[0].str), NULL, 8);
		} else {
			(yyval.ival) = strtoll ((yyvsp[0].str), NULL, 10);
		}
	}
#line 2090 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 38:
#line 404 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[0].ival);
	}
#line 2098 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 40:
#line 410 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		if (parser->is_gles)
			glcpp_error(& (yylsp[0]), parser, "undefined macro %s in expression (illegal in GLES)", (yyvsp[0].str));
		(yyval.ival) = 0;
	}
#line 2108 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 41:
#line 415 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) || (yyvsp[0].ival);
	}
#line 2116 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 42:
#line 418 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) && (yyvsp[0].ival);
	}
#line 2124 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 43:
#line 421 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival);
	}
#line 2132 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 44:
#line 424 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) ^ (yyvsp[0].ival);
	}
#line 2140 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 45:
#line 427 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) & (yyvsp[0].ival);
	}
#line 2148 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 46:
#line 430 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) != (yyvsp[0].ival);
	}
#line 2156 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 47:
#line 433 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) == (yyvsp[0].ival);
	}
#line 2164 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 48:
#line 436 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) >= (yyvsp[0].ival);
	}
#line 2172 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 49:
#line 439 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) <= (yyvsp[0].ival);
	}
#line 2180 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 50:
#line 442 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) > (yyvsp[0].ival);
	}
#line 2188 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 51:
#line 445 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) < (yyvsp[0].ival);
	}
#line 2196 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 52:
#line 448 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) >> (yyvsp[0].ival);
	}
#line 2204 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 53:
#line 451 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) << (yyvsp[0].ival);
	}
#line 2212 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 54:
#line 454 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) - (yyvsp[0].ival);
	}
#line 2220 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 55:
#line 457 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) + (yyvsp[0].ival);
	}
#line 2228 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 56:
#line 460 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		if ((yyvsp[0].ival) == 0) {
			yyerror (& (yylsp[-2]), parser,
				 "zero modulus in preprocessor directive");
		} else {
			(yyval.ival) = (yyvsp[-2].ival) % (yyvsp[0].ival);
		}
	}
#line 2241 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 57:
#line 468 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		if ((yyvsp[0].ival) == 0) {
			yyerror (& (yylsp[-2]), parser,
				 "division by 0 in preprocessor directive");
		} else {
			(yyval.ival) = (yyvsp[-2].ival) / (yyvsp[0].ival);
		}
	}
#line 2254 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 58:
#line 476 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-2].ival) * (yyvsp[0].ival);
	}
#line 2262 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 59:
#line 479 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = ! (yyvsp[0].ival);
	}
#line 2270 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 60:
#line 482 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = ~ (yyvsp[0].ival);
	}
#line 2278 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 61:
#line 485 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = - (yyvsp[0].ival);
	}
#line 2286 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 62:
#line 488 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = + (yyvsp[0].ival);
	}
#line 2294 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 63:
#line 491 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[-1].ival);
	}
#line 2302 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 64:
#line 497 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.string_list) = _string_list_create (parser);
		_string_list_append_item ((yyval.string_list), (yyvsp[0].str));
		ralloc_steal ((yyval.string_list), (yyvsp[0].str));
	}
#line 2312 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 65:
#line 502 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.string_list) = (yyvsp[-2].string_list);	
		_string_list_append_item ((yyval.string_list), (yyvsp[0].str));
		ralloc_steal ((yyval.string_list), (yyvsp[0].str));
	}
#line 2322 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 66:
#line 510 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.token_list) = NULL; }
#line 2328 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 68:
#line 515 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		yyerror (& (yylsp[-1]), parser, "Invalid tokens after #");
	}
#line 2336 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 69:
#line 521 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.token_list) = NULL; }
#line 2342 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 72:
#line 527 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_warning(&(yylsp[0]), parser, "extra tokens at end of directive");
	}
#line 2350 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 73:
#line 534 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		int v = hash_table_find (parser->defines, (yyvsp[0].str)) ? 1 : 0;
		(yyval.token) = _token_create_ival (parser, INTEGER, v);
	}
#line 2359 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 74:
#line 538 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		int v = hash_table_find (parser->defines, (yyvsp[-1].str)) ? 1 : 0;
		(yyval.token) = _token_create_ival (parser, INTEGER, v);
	}
#line 2368 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 76:
#line 547 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.token_list) = _token_list_create (parser);
		_token_list_append ((yyval.token_list), (yyvsp[0].token));
	}
#line 2377 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 77:
#line 551 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.token_list) = (yyvsp[-1].token_list);
		_token_list_append ((yyval.token_list), (yyvsp[0].token));
	}
#line 2386 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 78:
#line 558 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		parser->space_tokens = 1;
		(yyval.token_list) = _token_list_create (parser);
		_token_list_append ((yyval.token_list), (yyvsp[0].token));
	}
#line 2396 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 79:
#line 563 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.token_list) = (yyvsp[-1].token_list);
		_token_list_append ((yyval.token_list), (yyvsp[0].token));
	}
#line 2405 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 80:
#line 570 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.token) = _token_create_str (parser, IDENTIFIER, (yyvsp[0].str));
		(yyval.token)->location = yylloc;
	}
#line 2414 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 81:
#line 574 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.token) = _token_create_str (parser, INTEGER_STRING, (yyvsp[0].str));
		(yyval.token)->location = yylloc;
	}
#line 2423 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 82:
#line 578 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.token) = _token_create_ival (parser, (yyvsp[0].ival), (yyvsp[0].ival));
		(yyval.token)->location = yylloc;
	}
#line 2432 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 83:
#line 582 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.token) = _token_create_str (parser, OTHER, (yyvsp[0].str));
		(yyval.token)->location = yylloc;
	}
#line 2441 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 84:
#line 586 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.token) = _token_create_ival (parser, SPACE, SPACE);
		(yyval.token)->location = yylloc;
	}
#line 2450 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 85:
#line 593 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '['; }
#line 2456 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 86:
#line 594 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = ']'; }
#line 2462 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 87:
#line 595 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '('; }
#line 2468 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 88:
#line 596 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = ')'; }
#line 2474 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 89:
#line 597 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '{'; }
#line 2480 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 90:
#line 598 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '}'; }
#line 2486 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 91:
#line 599 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '.'; }
#line 2492 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 92:
#line 600 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '&'; }
#line 2498 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 93:
#line 601 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '*'; }
#line 2504 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 94:
#line 602 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '+'; }
#line 2510 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 95:
#line 603 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '-'; }
#line 2516 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 96:
#line 604 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '~'; }
#line 2522 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 97:
#line 605 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '!'; }
#line 2528 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 98:
#line 606 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '/'; }
#line 2534 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 99:
#line 607 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '%'; }
#line 2540 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 100:
#line 608 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = LEFT_SHIFT; }
#line 2546 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 101:
#line 609 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = RIGHT_SHIFT; }
#line 2552 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 102:
#line 610 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '<'; }
#line 2558 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 103:
#line 611 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '>'; }
#line 2564 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 104:
#line 612 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = LESS_OR_EQUAL; }
#line 2570 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 105:
#line 613 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = GREATER_OR_EQUAL; }
#line 2576 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 106:
#line 614 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = EQUAL; }
#line 2582 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 107:
#line 615 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = NOT_EQUAL; }
#line 2588 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 108:
#line 616 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '^'; }
#line 2594 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 109:
#line 617 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '|'; }
#line 2600 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 110:
#line 618 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = AND; }
#line 2606 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 111:
#line 619 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = OR; }
#line 2612 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 112:
#line 620 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = ';'; }
#line 2618 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 113:
#line 621 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = ','; }
#line 2624 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 114:
#line 622 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '='; }
#line 2630 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 115:
#line 623 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = PASTE; }
#line 2636 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;


#line 2640 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, parser, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, parser, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, parser);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, parser, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, parser);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 626 "glcpp/glcpp-parse.y" /* yacc.c:1906  */


string_list_t *
_string_list_create (void *ctx)
{
	string_list_t *list;

	list = ralloc (ctx, string_list_t);
	list->head = NULL;
	list->tail = NULL;

	return list;
}

void
_string_list_append_item (string_list_t *list, const char *str)
{
	string_node_t *node;

	node = ralloc (list, string_node_t);
	node->str = ralloc_strdup (node, str);

	node->next = NULL;

	if (list->head == NULL) {
		list->head = node;
	} else {
		list->tail->next = node;
	}

	list->tail = node;
}

int
_string_list_contains (string_list_t *list, const char *member, int *index)
{
	string_node_t *node;
	int i;

	if (list == NULL)
		return 0;

	for (i = 0, node = list->head; node; i++, node = node->next) {
		if (strcmp (node->str, member) == 0) {
			if (index)
				*index = i;
			return 1;
		}
	}

	return 0;
}

int
_string_list_length (string_list_t *list)
{
	int length = 0;
	string_node_t *node;

	if (list == NULL)
		return 0;

	for (node = list->head; node; node = node->next)
		length++;

	return length;
}

int
_string_list_equal (string_list_t *a, string_list_t *b)
{
	string_node_t *node_a, *node_b;

	if (a == NULL && b == NULL)
		return 1;

	if (a == NULL || b == NULL)
		return 0;

	for (node_a = a->head, node_b = b->head;
	     node_a && node_b;
	     node_a = node_a->next, node_b = node_b->next)
	{
		if (strcmp (node_a->str, node_b->str))
			return 0;
	}

	/* Catch the case of lists being different lengths, (which
	 * would cause the loop above to terminate after the shorter
	 * list). */
	return node_a == node_b;
}

argument_list_t *
_argument_list_create (void *ctx)
{
	argument_list_t *list;

	list = ralloc (ctx, argument_list_t);
	list->head = NULL;
	list->tail = NULL;

	return list;
}

void
_argument_list_append (argument_list_t *list, token_list_t *argument)
{
	argument_node_t *node;

	node = ralloc (list, argument_node_t);
	node->argument = argument;

	node->next = NULL;

	if (list->head == NULL) {
		list->head = node;
	} else {
		list->tail->next = node;
	}

	list->tail = node;
}

int
_argument_list_length (argument_list_t *list)
{
	int length = 0;
	argument_node_t *node;

	if (list == NULL)
		return 0;

	for (node = list->head; node; node = node->next)
		length++;

	return length;
}

token_list_t *
_argument_list_member_at (argument_list_t *list, int index)
{
	argument_node_t *node;
	int i;

	if (list == NULL)
		return NULL;

	node = list->head;
	for (i = 0; i < index; i++) {
		node = node->next;
		if (node == NULL)
			break;
	}

	if (node)
		return node->argument;

	return NULL;
}

/* Note: This function ralloc_steal()s the str pointer. */
token_t *
_token_create_str (void *ctx, int type, char *str)
{
	token_t *token;

	token = ralloc (ctx, token_t);
	token->type = type;
	token->value.str = str;

	ralloc_steal (token, str);

	return token;
}

token_t *
_token_create_ival (void *ctx, int type, int ival)
{
	token_t *token;

	token = ralloc (ctx, token_t);
	token->type = type;
	token->value.ival = ival;

	return token;
}

token_list_t *
_token_list_create (void *ctx)
{
	token_list_t *list;

	list = ralloc (ctx, token_list_t);
	list->head = NULL;
	list->tail = NULL;
	list->non_space_tail = NULL;

	return list;
}

void
_token_list_append (token_list_t *list, token_t *token)
{
	token_node_t *node;

	node = ralloc (list, token_node_t);
	node->token = token;
	node->next = NULL;

	if (list->head == NULL) {
		list->head = node;
	} else {
		list->tail->next = node;
	}

	list->tail = node;
	if (token->type != SPACE)
		list->non_space_tail = node;
}

void
_token_list_append_list (token_list_t *list, token_list_t *tail)
{
	if (tail == NULL || tail->head == NULL)
		return;

	if (list->head == NULL) {
		list->head = tail->head;
	} else {
		list->tail->next = tail->head;
	}

	list->tail = tail->tail;
	list->non_space_tail = tail->non_space_tail;
}

static token_list_t *
_token_list_copy (void *ctx, token_list_t *other)
{
	token_list_t *copy;
	token_node_t *node;

	if (other == NULL)
		return NULL;

	copy = _token_list_create (ctx);
	for (node = other->head; node; node = node->next) {
		token_t *new_token = ralloc (copy, token_t);
		*new_token = *node->token;
		_token_list_append (copy, new_token);
	}

	return copy;
}

static void
_token_list_trim_trailing_space (token_list_t *list)
{
	token_node_t *tail, *next;

	if (list->non_space_tail) {
		tail = list->non_space_tail->next;
		list->non_space_tail->next = NULL;
		list->tail = list->non_space_tail;

		while (tail) {
			next = tail->next;
			ralloc_free (tail);
			tail = next;
		}
	}
}

static int
_token_list_is_empty_ignoring_space (token_list_t *l)
{
	token_node_t *n;

	if (l == NULL)
		return 1;

	n = l->head;
	while (n != NULL && n->token->type == SPACE)
		n = n->next;

	return n == NULL;
}

int
_token_list_equal_ignoring_space (token_list_t *a, token_list_t *b)
{
	token_node_t *node_a, *node_b;

	if (a == NULL || b == NULL) {
		int a_empty = _token_list_is_empty_ignoring_space(a);
		int b_empty = _token_list_is_empty_ignoring_space(b);
		return a_empty == b_empty;
	}

	node_a = a->head;
	node_b = b->head;

	while (1)
	{
		if (node_a == NULL && node_b == NULL)
			break;

		if (node_a == NULL || node_b == NULL)
			return 0;

		if (node_a->token->type == SPACE) {
			node_a = node_a->next;
			continue;
		}

		if (node_b->token->type == SPACE) {
			node_b = node_b->next;
			continue;
		}

		if (node_a->token->type != node_b->token->type)
			return 0;

		switch (node_a->token->type) {
		case INTEGER:
			if (node_a->token->value.ival != 
			    node_b->token->value.ival)
			{
				return 0;
			}
			break;
		case IDENTIFIER:
		case INTEGER_STRING:
		case OTHER:
			if (strcmp (node_a->token->value.str,
				    node_b->token->value.str))
			{
				return 0;
			}
			break;
		}

		node_a = node_a->next;
		node_b = node_b->next;
	}

	return 1;
}

static void
_token_print (char **out, size_t *len, token_t *token)
{
	if (token->type < 256) {
		ralloc_asprintf_rewrite_tail (out, len, "%c", token->type);
		return;
	}

	switch (token->type) {
	case INTEGER:
		ralloc_asprintf_rewrite_tail (out, len, "%" PRIiMAX, token->value.ival);
		break;
	case IDENTIFIER:
	case INTEGER_STRING:
	case OTHER:
		ralloc_asprintf_rewrite_tail (out, len, "%s", token->value.str);
		break;
	case SPACE:
		ralloc_asprintf_rewrite_tail (out, len, " ");
		break;
	case LEFT_SHIFT:
		ralloc_asprintf_rewrite_tail (out, len, "<<");
		break;
	case RIGHT_SHIFT:
		ralloc_asprintf_rewrite_tail (out, len, ">>");
		break;
	case LESS_OR_EQUAL:
		ralloc_asprintf_rewrite_tail (out, len, "<=");
		break;
	case GREATER_OR_EQUAL:
		ralloc_asprintf_rewrite_tail (out, len, ">=");
		break;
	case EQUAL:
		ralloc_asprintf_rewrite_tail (out, len, "==");
		break;
	case NOT_EQUAL:
		ralloc_asprintf_rewrite_tail (out, len, "!=");
		break;
	case AND:
		ralloc_asprintf_rewrite_tail (out, len, "&&");
		break;
	case OR:
		ralloc_asprintf_rewrite_tail (out, len, "||");
		break;
	case PASTE:
		ralloc_asprintf_rewrite_tail (out, len, "##");
		break;
	case COMMA_FINAL:
		ralloc_asprintf_rewrite_tail (out, len, ",");
		break;
	case PLACEHOLDER:
		/* Nothing to print. */
		break;
	default:
		assert(!"Error: Don't know how to print token.");
		break;
	}
}

/* Return a new token (ralloc()ed off of 'token') formed by pasting
 * 'token' and 'other'. Note that this function may return 'token' or
 * 'other' directly rather than allocating anything new.
 *
 * Caution: Only very cursory error-checking is performed to see if
 * the final result is a valid single token. */
static token_t *
_token_paste (glcpp_parser_t *parser, token_t *token, token_t *other)
{
	token_t *combined = NULL;

	/* Pasting a placeholder onto anything makes no change. */
	if (other->type == PLACEHOLDER)
		return token;

	/* When 'token' is a placeholder, just return 'other'. */
	if (token->type == PLACEHOLDER)
		return other;

	/* A very few single-character punctuators can be combined
	 * with another to form a multi-character punctuator. */
	switch (token->type) {
	case '<':
		if (other->type == '<')
			combined = _token_create_ival (token, LEFT_SHIFT, LEFT_SHIFT);
		else if (other->type == '=')
			combined = _token_create_ival (token, LESS_OR_EQUAL, LESS_OR_EQUAL);
		break;
	case '>':
		if (other->type == '>')
			combined = _token_create_ival (token, RIGHT_SHIFT, RIGHT_SHIFT);
		else if (other->type == '=')
			combined = _token_create_ival (token, GREATER_OR_EQUAL, GREATER_OR_EQUAL);
		break;
	case '=':
		if (other->type == '=')
			combined = _token_create_ival (token, EQUAL, EQUAL);
		break;
	case '!':
		if (other->type == '=')
			combined = _token_create_ival (token, NOT_EQUAL, NOT_EQUAL);
		break;
	case '&':
		if (other->type == '&')
			combined = _token_create_ival (token, AND, AND);
		break;
	case '|':
		if (other->type == '|')
			combined = _token_create_ival (token, OR, OR);
		break;
	}

	if (combined != NULL) {
		/* Inherit the location from the first token */
		combined->location = token->location;
		return combined;
	}

	/* Two string-valued (or integer) tokens can usually just be
	 * mashed together. (We also handle a string followed by an
	 * integer here as well.)
	 *
	 * There are some exceptions here. Notably, if the first token
	 * is an integer (or a string representing an integer), then
	 * the second token must also be an integer or must be a
	 * string representing an integer that begins with a digit.
	 */
	if ((token->type == IDENTIFIER || token->type == OTHER || token->type == INTEGER_STRING || token->type == INTEGER) &&
	    (other->type == IDENTIFIER || other->type == OTHER || other->type == INTEGER_STRING || other->type == INTEGER))
	{
		char *str;
		int combined_type;

		/* Check that pasting onto an integer doesn't create a
		 * non-integer, (that is, only digits can be
		 * pasted. */
		if (token->type == INTEGER_STRING || token->type == INTEGER)
		{
			switch (other->type) {
			case INTEGER_STRING:
				if (other->value.str[0] < '0' ||
				    other->value.str[0] > '9')
					goto FAIL;
				break;
			case INTEGER:
				if (other->value.ival < 0)
					goto FAIL;
				break;
			default:
				goto FAIL;
			}
		}

		if (token->type == INTEGER)
			str = ralloc_asprintf (token, "%" PRIiMAX,
					       token->value.ival);
		else
			str = ralloc_strdup (token, token->value.str);
					       

		if (other->type == INTEGER)
			ralloc_asprintf_append (&str, "%" PRIiMAX,
						other->value.ival);
		else
			ralloc_strcat (&str, other->value.str);

		/* New token is same type as original token, unless we
		 * started with an integer, in which case we will be
		 * creating an integer-string. */
		combined_type = token->type;
		if (combined_type == INTEGER)
			combined_type = INTEGER_STRING;

		combined = _token_create_str (token, combined_type, str);
		combined->location = token->location;
		return combined;
	}

    FAIL:
	glcpp_error (&token->location, parser, "");
	ralloc_asprintf_rewrite_tail (&parser->info_log, &parser->info_log_length, "Pasting \"");
	_token_print (&parser->info_log, &parser->info_log_length, token);
	ralloc_asprintf_rewrite_tail (&parser->info_log, &parser->info_log_length, "\" and \"");
	_token_print (&parser->info_log, &parser->info_log_length, other);
	ralloc_asprintf_rewrite_tail (&parser->info_log, &parser->info_log_length, "\" does not give a valid preprocessing token.\n");

	return token;
}

static void
_token_list_print (glcpp_parser_t *parser, token_list_t *list)
{
	token_node_t *node;

	if (list == NULL)
		return;

	for (node = list->head; node; node = node->next)
		_token_print (&parser->output, &parser->output_length, node->token);
}

void
yyerror (YYLTYPE *locp, glcpp_parser_t *parser, const char *error)
{
	glcpp_error(locp, parser, "%s", error);
}

static void add_builtin_define(glcpp_parser_t *parser,
			       const char *name, int value)
{
   token_t *tok;
   token_list_t *list;

   tok = _token_create_ival (parser, INTEGER, value);

   list = _token_list_create(parser);
   _token_list_append(list, tok);
   _define_object_macro(parser, NULL, name, list);
}

glcpp_parser_t *
glcpp_parser_create (const struct gl_extensions *extensions, gl_api api)
{
	glcpp_parser_t *parser;

	parser = ralloc (NULL, glcpp_parser_t);

	glcpp_lex_init_extra (parser, &parser->scanner);
	parser->defines = hash_table_ctor (32, hash_table_string_hash,
					   hash_table_string_compare);
	parser->active = NULL;
	parser->lexing_if = 0;
	parser->space_tokens = 1;
	parser->newline_as_space = 0;
	parser->in_control_line = 0;
	parser->paren_count = 0;
        parser->commented_newlines = 0;

	parser->skip_stack = NULL;

	parser->lex_from_list = NULL;
	parser->lex_from_node = NULL;

	parser->output = ralloc_strdup(parser, "");
	parser->output_length = 0;
	parser->info_log = ralloc_strdup(parser, "");
	parser->info_log_length = 0;
	parser->error = 0;

        parser->extensions = extensions;
        parser->api = api;
        parser->version_resolved = false;

	parser->has_new_line_number = 0;
	parser->new_line_number = 1;
	parser->has_new_source_number = 0;
	parser->new_source_number = 0;

	return parser;
}

void
glcpp_parser_destroy (glcpp_parser_t *parser)
{
	glcpp_lex_destroy (parser->scanner);
	hash_table_dtor (parser->defines);
	ralloc_free (parser);
}

typedef enum function_status
{
	FUNCTION_STATUS_SUCCESS,
	FUNCTION_NOT_A_FUNCTION,
	FUNCTION_UNBALANCED_PARENTHESES
} function_status_t;

/* Find a set of function-like macro arguments by looking for a
 * balanced set of parentheses.
 *
 * When called, 'node' should be the opening-parenthesis token, (or
 * perhaps preceeding SPACE tokens). Upon successful return *last will
 * be the last consumed node, (corresponding to the closing right
 * parenthesis).
 *
 * Return values:
 *
 *   FUNCTION_STATUS_SUCCESS:
 *
 *	Successfully parsed a set of function arguments.	
 *
 *   FUNCTION_NOT_A_FUNCTION:
 *
 *	Macro name not followed by a '('. This is not an error, but
 *	simply that the macro name should be treated as a non-macro.
 *
 *   FUNCTION_UNBALANCED_PARENTHESES
 *
 *	Macro name is not followed by a balanced set of parentheses.
 */
static function_status_t
_arguments_parse (argument_list_t *arguments,
		  token_node_t *node,
		  token_node_t **last)
{
	token_list_t *argument;
	int paren_count;

	node = node->next;

	/* Ignore whitespace before first parenthesis. */
	while (node && node->token->type == SPACE)
		node = node->next;

	if (node == NULL || node->token->type != '(')
		return FUNCTION_NOT_A_FUNCTION;

	node = node->next;

	argument = _token_list_create (arguments);
	_argument_list_append (arguments, argument);

	for (paren_count = 1; node; node = node->next) {
		if (node->token->type == '(')
		{
			paren_count++;
		}
		else if (node->token->type == ')')
		{
			paren_count--;
			if (paren_count == 0)
				break;
		}

		if (node->token->type == ',' &&
			 paren_count == 1)
		{
			_token_list_trim_trailing_space (argument);
			argument = _token_list_create (arguments);
			_argument_list_append (arguments, argument);
		}
		else {
			if (argument->head == NULL) {
				/* Don't treat initial whitespace as
				 * part of the arguement. */
				if (node->token->type == SPACE)
					continue;
			}
			_token_list_append (argument, node->token);
		}
	}

	if (paren_count)
		return FUNCTION_UNBALANCED_PARENTHESES;

	*last = node;

	return FUNCTION_STATUS_SUCCESS;
}

static token_list_t *
_token_list_create_with_one_ival (void *ctx, int type, int ival)
{
	token_list_t *list;
	token_t *node;

	list = _token_list_create (ctx);
	node = _token_create_ival (list, type, ival);
	_token_list_append (list, node);

	return list;
}

static token_list_t *
_token_list_create_with_one_space (void *ctx)
{
	return _token_list_create_with_one_ival (ctx, SPACE, SPACE);
}

static token_list_t *
_token_list_create_with_one_integer (void *ctx, int ival)
{
	return _token_list_create_with_one_ival (ctx, INTEGER, ival);
}

/* Perform macro expansion on 'list', placing the resulting tokens
 * into a new list which is initialized with a first token of type
 * 'head_token_type'. Then begin lexing from the resulting list,
 * (return to the current lexing source when this list is exhausted).
 */
static void
_glcpp_parser_expand_and_lex_from (glcpp_parser_t *parser,
				   int head_token_type,
				   token_list_t *list)
{
	token_list_t *expanded;
	token_t *token;

	expanded = _token_list_create (parser);
	token = _token_create_ival (parser, head_token_type, head_token_type);
	_token_list_append (expanded, token);
	_glcpp_parser_expand_token_list (parser, list);
	_token_list_append_list (expanded, list);
	glcpp_parser_lex_from (parser, expanded);
}

static void
_glcpp_parser_apply_pastes (glcpp_parser_t *parser, token_list_t *list)
{
	token_node_t *node;

	node = list->head;
	while (node)
	{
		token_node_t *next_non_space;

		/* Look ahead for a PASTE token, skipping space. */
		next_non_space = node->next;
		while (next_non_space && next_non_space->token->type == SPACE)
			next_non_space = next_non_space->next;

		if (next_non_space == NULL)
			break;

		if (next_non_space->token->type != PASTE) {
			node = next_non_space;
			continue;
		}

		/* Now find the next non-space token after the PASTE. */
		next_non_space = next_non_space->next;
		while (next_non_space && next_non_space->token->type == SPACE)
			next_non_space = next_non_space->next;

		if (next_non_space == NULL) {
			yyerror (&node->token->location, parser, "'##' cannot appear at either end of a macro expansion\n");
			return;
		}

		node->token = _token_paste (parser, node->token, next_non_space->token);
		node->next = next_non_space->next;
		if (next_non_space == list->tail)
			list->tail = node;
	}

	list->non_space_tail = list->tail;
}

/* This is a helper function that's essentially part of the
 * implementation of _glcpp_parser_expand_node. It shouldn't be called
 * except for by that function.
 *
 * Returns NULL if node is a simple token with no expansion, (that is,
 * although 'node' corresponds to an identifier defined as a
 * function-like macro, it is not followed with a parenthesized
 * argument list).
 *
 * Compute the complete expansion of node (which is a function-like
 * macro) and subsequent nodes which are arguments.
 *
 * Returns the token list that results from the expansion and sets
 * *last to the last node in the list that was consumed by the
 * expansion. Specifically, *last will be set as follows: as the
 * token of the closing right parenthesis.
 */
static token_list_t *
_glcpp_parser_expand_function (glcpp_parser_t *parser,
			       token_node_t *node,
			       token_node_t **last)
			       
{
	macro_t *macro;
	const char *identifier;
	argument_list_t *arguments;
	function_status_t status;
	token_list_t *substituted;
	int parameter_index;

	identifier = node->token->value.str;

	macro = hash_table_find (parser->defines, identifier);

	assert (macro->is_function);

	arguments = _argument_list_create (parser);
	status = _arguments_parse (arguments, node, last);

	switch (status) {
	case FUNCTION_STATUS_SUCCESS:
		break;
	case FUNCTION_NOT_A_FUNCTION:
		return NULL;
	case FUNCTION_UNBALANCED_PARENTHESES:
		glcpp_error (&node->token->location, parser, "Macro %s call has unbalanced parentheses\n", identifier);
		return NULL;
	}

	/* Replace a macro defined as empty with a SPACE token. */
	if (macro->replacements == NULL) {
		ralloc_free (arguments);
		return _token_list_create_with_one_space (parser);
	}

	if (! ((_argument_list_length (arguments) == 
		_string_list_length (macro->parameters)) ||
	       (_string_list_length (macro->parameters) == 0 &&
		_argument_list_length (arguments) == 1 &&
		arguments->head->argument->head == NULL)))
	{
		glcpp_error (&node->token->location, parser,
			      "Error: macro %s invoked with %d arguments (expected %d)\n",
			      identifier,
			      _argument_list_length (arguments),
			      _string_list_length (macro->parameters));
		return NULL;
	}

	/* Perform argument substitution on the replacement list. */
	substituted = _token_list_create (arguments);

	for (node = macro->replacements->head; node; node = node->next)
	{
		if (node->token->type == IDENTIFIER &&
		    _string_list_contains (macro->parameters,
					   node->token->value.str,
					   &parameter_index))
		{
			token_list_t *argument;
			argument = _argument_list_member_at (arguments,
							     parameter_index);
			/* Before substituting, we expand the argument
			 * tokens, or append a placeholder token for
			 * an empty argument. */
			if (argument->head) {
				token_list_t *expanded_argument;
				expanded_argument = _token_list_copy (parser,
								      argument);
				_glcpp_parser_expand_token_list (parser,
								 expanded_argument);
				_token_list_append_list (substituted,
							 expanded_argument);
			} else {
				token_t *new_token;

				new_token = _token_create_ival (substituted,
								PLACEHOLDER,
								PLACEHOLDER);
				_token_list_append (substituted, new_token);
			}
		} else {
			_token_list_append (substituted, node->token);
		}
	}

	/* After argument substitution, and before further expansion
	 * below, implement token pasting. */

	_token_list_trim_trailing_space (substituted);

	_glcpp_parser_apply_pastes (parser, substituted);

	return substituted;
}

/* Compute the complete expansion of node, (and subsequent nodes after
 * 'node' in the case that 'node' is a function-like macro and
 * subsequent nodes are arguments).
 *
 * Returns NULL if node is a simple token with no expansion.
 *
 * Otherwise, returns the token list that results from the expansion
 * and sets *last to the last node in the list that was consumed by
 * the expansion. Specifically, *last will be set as follows:
 *
 *	As 'node' in the case of object-like macro expansion.
 *
 *	As the token of the closing right parenthesis in the case of
 *	function-like macro expansion.
 */
static token_list_t *
_glcpp_parser_expand_node (glcpp_parser_t *parser,
			   token_node_t *node,
			   token_node_t **last)
{
	token_t *token = node->token;
	const char *identifier;
	macro_t *macro;

	/* We only expand identifiers */
	if (token->type != IDENTIFIER) {
		/* We change any COMMA into a COMMA_FINAL to prevent
		 * it being mistaken for an argument separator
		 * later. */
		if (token->type == ',') {
			token->type = COMMA_FINAL;
			token->value.ival = COMMA_FINAL;
		}

		return NULL;
	}

	*last = node;
	identifier = token->value.str;

	/* Special handling for __LINE__ and __FILE__, (not through
	 * the hash table). */
	if (strcmp(identifier, "__LINE__") == 0)
		return _token_list_create_with_one_integer (parser, node->token->location.first_line);

	if (strcmp(identifier, "__FILE__") == 0)
		return _token_list_create_with_one_integer (parser, node->token->location.source);

	/* Look up this identifier in the hash table. */
	macro = hash_table_find (parser->defines, identifier);

	/* Not a macro, so no expansion needed. */
	if (macro == NULL)
		return NULL;

	/* Finally, don't expand this macro if we're already actively
	 * expanding it, (to avoid infinite recursion). */
	if (_parser_active_list_contains (parser, identifier)) {
		/* We change the token type here from IDENTIFIER to
		 * OTHER to prevent any future expansion of this
		 * unexpanded token. */
		char *str;
		token_list_t *expansion;
		token_t *final;

		str = ralloc_strdup (parser, token->value.str);
		final = _token_create_str (parser, OTHER, str);
		expansion = _token_list_create (parser);
		_token_list_append (expansion, final);
		return expansion;
	}

	if (! macro->is_function)
	{
		token_list_t *replacement;

		/* Replace a macro defined as empty with a SPACE token. */
		if (macro->replacements == NULL)
			return _token_list_create_with_one_space (parser);

		replacement = _token_list_copy (parser, macro->replacements);
		_glcpp_parser_apply_pastes (parser, replacement);
		return replacement;
	}

	return _glcpp_parser_expand_function (parser, node, last);
}

/* Push a new identifier onto the parser's active list.
 *
 * Here, 'marker' is the token node that appears in the list after the
 * expansion of 'identifier'. That is, when the list iterator begins
 * examining 'marker', then it is time to pop this node from the
 * active stack.
 */
static void
_parser_active_list_push (glcpp_parser_t *parser,
			  const char *identifier,
			  token_node_t *marker)
{
	active_list_t *node;

	node = ralloc (parser->active, active_list_t);
	node->identifier = ralloc_strdup (node, identifier);
	node->marker = marker;
	node->next = parser->active;

	parser->active = node;
}

static void
_parser_active_list_pop (glcpp_parser_t *parser)
{
	active_list_t *node = parser->active;

	if (node == NULL) {
		parser->active = NULL;
		return;
	}

	node = parser->active->next;
	ralloc_free (parser->active);

	parser->active = node;
}

static int
_parser_active_list_contains (glcpp_parser_t *parser, const char *identifier)
{
	active_list_t *node;

	if (parser->active == NULL)
		return 0;

	for (node = parser->active; node; node = node->next)
		if (strcmp (node->identifier, identifier) == 0)
			return 1;

	return 0;
}

/* Walk over the token list replacing nodes with their expansion.
 * Whenever nodes are expanded the walking will walk over the new
 * nodes, continuing to expand as necessary. The results are placed in
 * 'list' itself;
 */
static void
_glcpp_parser_expand_token_list (glcpp_parser_t *parser,
				 token_list_t *list)
{
	token_node_t *node_prev;
	token_node_t *node, *last = NULL;
	token_list_t *expansion;
	active_list_t *active_initial = parser->active;

	if (list == NULL)
		return;

	_token_list_trim_trailing_space (list);

	node_prev = NULL;
	node = list->head;

	while (node) {

		while (parser->active && parser->active->marker == node)
			_parser_active_list_pop (parser);

		expansion = _glcpp_parser_expand_node (parser, node, &last);
		if (expansion) {
			token_node_t *n;

			for (n = node; n != last->next; n = n->next)
				while (parser->active &&
				       parser->active->marker == n)
				{
					_parser_active_list_pop (parser);
				}

			_parser_active_list_push (parser,
						  node->token->value.str,
						  last->next);
			
			/* Splice expansion into list, supporting a
			 * simple deletion if the expansion is
			 * empty. */
			if (expansion->head) {
				if (node_prev)
					node_prev->next = expansion->head;
				else
					list->head = expansion->head;
				expansion->tail->next = last->next;
				if (last == list->tail)
					list->tail = expansion->tail;
			} else {
				if (node_prev)
					node_prev->next = last->next;
				else
					list->head = last->next;
				if (last == list->tail)
					list->tail = NULL;
			}
		} else {
			node_prev = node;
		}
		node = node_prev ? node_prev->next : list->head;
	}

	/* Remove any lingering effects of this invocation on the
	 * active list. That is, pop until the list looks like it did
	 * at the beginning of this function. */
	while (parser->active && parser->active != active_initial)
		_parser_active_list_pop (parser);

	list->non_space_tail = list->tail;
}

void
_glcpp_parser_print_expanded_token_list (glcpp_parser_t *parser,
					 token_list_t *list)
{
	if (list == NULL)
		return;

	_glcpp_parser_expand_token_list (parser, list);

	_token_list_trim_trailing_space (list);

	_token_list_print (parser, list);
}

static void
_check_for_reserved_macro_name (glcpp_parser_t *parser, YYLTYPE *loc,
				const char *identifier)
{
	/* Section 3.3 (Preprocessor) of the GLSL 1.30 spec (and later) and
	 * the GLSL ES spec (all versions) say:
	 *
	 *     "All macro names containing two consecutive underscores ( __ )
	 *     are reserved for future use as predefined macro names. All
	 *     macro names prefixed with "GL_" ("GL" followed by a single
	 *     underscore) are also reserved."
	 *
	 * The intention is that names containing __ are reserved for internal
	 * use by the implementation, and names prefixed with GL_ are reserved
	 * for use by Khronos.  Since every extension adds a name prefixed
	 * with GL_ (i.e., the name of the extension), that should be an
	 * error.  Names simply containing __ are dangerous to use, but should
	 * be allowed.
	 *
	 * A future version of the GLSL specification will clarify this.
	 */
	if (strstr(identifier, "__")) {
		glcpp_warning(loc, parser,
			      "Macro names containing \"__\" are reserved "
			      "for use by the implementation.\n");
	}
	if (strncmp(identifier, "GL_", 3) == 0) {
		glcpp_error (loc, parser, "Macro names starting with \"GL_\" are reserved.\n");
	}
}

static int
_macro_equal (macro_t *a, macro_t *b)
{
	if (a->is_function != b->is_function)
		return 0;

	if (a->is_function) {
		if (! _string_list_equal (a->parameters, b->parameters))
			return 0;
	}

	return _token_list_equal_ignoring_space (a->replacements,
						 b->replacements);
}

void
_define_object_macro (glcpp_parser_t *parser,
		      YYLTYPE *loc,
		      const char *identifier,
		      token_list_t *replacements)
{
	macro_t *macro, *previous;

	if (loc != NULL)
		_check_for_reserved_macro_name(parser, loc, identifier);

	macro = ralloc (parser, macro_t);

	macro->is_function = 0;
	macro->parameters = NULL;
	macro->identifier = ralloc_strdup (macro, identifier);
	macro->replacements = replacements;
	ralloc_steal (macro, replacements);

	previous = hash_table_find (parser->defines, identifier);
	if (previous) {
		if (_macro_equal (macro, previous)) {
			ralloc_free (macro);
			return;
		}
		glcpp_error (loc, parser, "Redefinition of macro %s\n",
			     identifier);
	}

	hash_table_insert (parser->defines, macro, identifier);
}

void
_define_function_macro (glcpp_parser_t *parser,
			YYLTYPE *loc,
			const char *identifier,
			string_list_t *parameters,
			token_list_t *replacements)
{
	macro_t *macro, *previous;

	_check_for_reserved_macro_name(parser, loc, identifier);

	macro = ralloc (parser, macro_t);
	ralloc_steal (macro, parameters);
	ralloc_steal (macro, replacements);

	macro->is_function = 1;
	macro->parameters = parameters;
	macro->identifier = ralloc_strdup (macro, identifier);
	macro->replacements = replacements;
	previous = hash_table_find (parser->defines, identifier);
	if (previous) {
		if (_macro_equal (macro, previous)) {
			ralloc_free (macro);
			return;
		}
		glcpp_error (loc, parser, "Redefinition of macro %s\n",
			     identifier);
	}

	hash_table_insert (parser->defines, macro, identifier);
}

static int
glcpp_parser_lex (YYSTYPE *yylval, YYLTYPE *yylloc, glcpp_parser_t *parser)
{
	token_node_t *node;
	int ret;

	if (parser->lex_from_list == NULL) {
		ret = glcpp_lex (yylval, yylloc, parser->scanner);

		/* XXX: This ugly block of code exists for the sole
		 * purpose of converting a NEWLINE token into a SPACE
		 * token, but only in the case where we have seen a
		 * function-like macro name, but have not yet seen its
		 * closing parenthesis.
		 *
		 * There's perhaps a more compact way to do this with
		 * mid-rule actions in the grammar.
		 *
		 * I'm definitely not pleased with the complexity of
		 * this code here.
		 */
		if (parser->newline_as_space)
		{
			if (ret == '(') {
				parser->paren_count++;
			} else if (ret == ')') {
				parser->paren_count--;
				if (parser->paren_count == 0)
					parser->newline_as_space = 0;
			} else if (ret == NEWLINE) {
				ret = SPACE;
			} else if (ret != SPACE) {
				if (parser->paren_count == 0)
					parser->newline_as_space = 0;
			}
		}
		else if (parser->in_control_line)
		{
			if (ret == NEWLINE)
				parser->in_control_line = 0;
		}
		else if (ret == HASH_DEFINE ||
			   ret == HASH_UNDEF || ret == HASH_IF ||
			   ret == HASH_IFDEF || ret == HASH_IFNDEF ||
			   ret == HASH_ELIF || ret == HASH_ELSE ||
			   ret == HASH_ENDIF || ret == HASH)
		{
			parser->in_control_line = 1;
		}
		else if (ret == IDENTIFIER)
		{
			macro_t *macro;
			macro = hash_table_find (parser->defines,
						 yylval->str);
			if (macro && macro->is_function) {
				parser->newline_as_space = 1;
				parser->paren_count = 0;
			}
		}

		return ret;
	}

	node = parser->lex_from_node;

	if (node == NULL) {
		ralloc_free (parser->lex_from_list);
		parser->lex_from_list = NULL;
		return NEWLINE;
	}

	*yylval = node->token->value;
	ret = node->token->type;

	parser->lex_from_node = node->next;

	return ret;
}

static void
glcpp_parser_lex_from (glcpp_parser_t *parser, token_list_t *list)
{
	token_node_t *node;

	assert (parser->lex_from_list == NULL);

	/* Copy list, eliminating any space tokens. */
	parser->lex_from_list = _token_list_create (parser);

	for (node = list->head; node; node = node->next) {
		if (node->token->type == SPACE)
			continue;
		_token_list_append (parser->lex_from_list, node->token);
	}

	ralloc_free (list);

	parser->lex_from_node = parser->lex_from_list->head;

	/* It's possible the list consisted of nothing but whitespace. */
	if (parser->lex_from_node == NULL) {
		ralloc_free (parser->lex_from_list);
		parser->lex_from_list = NULL;
	}
}

static void
_glcpp_parser_skip_stack_push_if (glcpp_parser_t *parser, YYLTYPE *loc,
				  int condition)
{
	skip_type_t current = SKIP_NO_SKIP;
	skip_node_t *node;

	if (parser->skip_stack)
		current = parser->skip_stack->type;

	node = ralloc (parser, skip_node_t);
	node->loc = *loc;

	if (current == SKIP_NO_SKIP) {
		if (condition)
			node->type = SKIP_NO_SKIP;
		else
			node->type = SKIP_TO_ELSE;
	} else {
		node->type = SKIP_TO_ENDIF;
	}

	node->has_else = false;
	node->next = parser->skip_stack;
	parser->skip_stack = node;
}

static void
_glcpp_parser_skip_stack_change_if (glcpp_parser_t *parser, YYLTYPE *loc,
				    const char *type, int condition)
{
	if (parser->skip_stack == NULL) {
		glcpp_error (loc, parser, "%s without #if\n", type);
		return;
	}

	if (parser->skip_stack->type == SKIP_TO_ELSE) {
		if (condition)
			parser->skip_stack->type = SKIP_NO_SKIP;
	} else {
		parser->skip_stack->type = SKIP_TO_ENDIF;
	}
}

static void
_glcpp_parser_skip_stack_pop (glcpp_parser_t *parser, YYLTYPE *loc)
{
	skip_node_t *node;

	if (parser->skip_stack == NULL) {
		glcpp_error (loc, parser, "#endif without #if\n");
		return;
	}

	node = parser->skip_stack;
	parser->skip_stack = node->next;
	ralloc_free (node);
}

static void
_glcpp_parser_handle_version_declaration(glcpp_parser_t *parser, intmax_t version,
                                         const char *es_identifier,
                                         bool explicitly_set)
{
	const struct gl_extensions *extensions = parser->extensions;

	if (parser->version_resolved)
		return;

	parser->version_resolved = true;

	add_builtin_define (parser, "__VERSION__", version);

	parser->is_gles = (version == 100) ||
			   (es_identifier &&
			    (strcmp(es_identifier, "es") == 0));

	/* Add pre-defined macros. */
	if (parser->is_gles) {
	   add_builtin_define(parser, "GL_ES", 1);
           add_builtin_define(parser, "GL_EXT_separate_shader_objects", 1);

	   if (extensions != NULL) {
	      if (extensions->OES_EGL_image_external)
	         add_builtin_define(parser, "GL_OES_EGL_image_external", 1);
	   }
	} else {
	   add_builtin_define(parser, "GL_ARB_draw_buffers", 1);
           add_builtin_define(parser, "GL_ARB_separate_shader_objects", 1);
	   add_builtin_define(parser, "GL_ARB_texture_rectangle", 1);
           add_builtin_define(parser, "GL_AMD_shader_trinary_minmax", 1);


	   if (extensions != NULL) {
	      if (extensions->EXT_texture_array)
	         add_builtin_define(parser, "GL_EXT_texture_array", 1);

	      if (extensions->ARB_arrays_of_arrays)
	          add_builtin_define(parser, "GL_ARB_arrays_of_arrays", 1);

	      if (extensions->ARB_fragment_coord_conventions)
	         add_builtin_define(parser, "GL_ARB_fragment_coord_conventions",
				    1);

	      if (extensions->ARB_explicit_attrib_location)
	         add_builtin_define(parser, "GL_ARB_explicit_attrib_location", 1);

	      if (extensions->ARB_shader_texture_lod)
	         add_builtin_define(parser, "GL_ARB_shader_texture_lod", 1);

	      if (extensions->ARB_draw_instanced)
	         add_builtin_define(parser, "GL_ARB_draw_instanced", 1);

	      if (extensions->ARB_conservative_depth) {
	         add_builtin_define(parser, "GL_AMD_conservative_depth", 1);
	         add_builtin_define(parser, "GL_ARB_conservative_depth", 1);
	      }

	      if (extensions->ARB_shader_bit_encoding)
	         add_builtin_define(parser, "GL_ARB_shader_bit_encoding", 1);

	      if (extensions->ARB_uniform_buffer_object)
	         add_builtin_define(parser, "GL_ARB_uniform_buffer_object", 1);

	      if (extensions->ARB_texture_cube_map_array)
	         add_builtin_define(parser, "GL_ARB_texture_cube_map_array", 1);

	      if (extensions->ARB_shading_language_packing)
	         add_builtin_define(parser, "GL_ARB_shading_language_packing", 1);

	      if (extensions->ARB_texture_multisample)
	         add_builtin_define(parser, "GL_ARB_texture_multisample", 1);

	      if (extensions->ARB_texture_query_levels)
	         add_builtin_define(parser, "GL_ARB_texture_query_levels", 1);

	      if (extensions->ARB_texture_query_lod)
	         add_builtin_define(parser, "GL_ARB_texture_query_lod", 1);

	      if (extensions->ARB_gpu_shader5)
	         add_builtin_define(parser, "GL_ARB_gpu_shader5", 1);

	      if (extensions->AMD_vertex_shader_layer)
	         add_builtin_define(parser, "GL_AMD_vertex_shader_layer", 1);

	      if (extensions->ARB_shading_language_420pack)
	         add_builtin_define(parser, "GL_ARB_shading_language_420pack", 1);

	      if (extensions->ARB_sample_shading)
	         add_builtin_define(parser, "GL_ARB_sample_shading", 1);

	      if (extensions->ARB_texture_gather)
	         add_builtin_define(parser, "GL_ARB_texture_gather", 1);

	      if (extensions->ARB_shader_atomic_counters)
	         add_builtin_define(parser, "GL_ARB_shader_atomic_counters", 1);

	      if (extensions->ARB_viewport_array)
	         add_builtin_define(parser, "GL_ARB_viewport_array", 1);

              if (extensions->ARB_compute_shader)
                 add_builtin_define(parser, "GL_ARB_compute_shader", 1);

	      if (extensions->ARB_shader_image_load_store)
	         add_builtin_define(parser, "GL_ARB_shader_image_load_store", 1);
	   }
	}

	if (extensions != NULL) {
	   if (extensions->EXT_shader_integer_mix)
	      add_builtin_define(parser, "GL_EXT_shader_integer_mix", 1);
	}

	if (version >= 150)
		add_builtin_define(parser, "GL_core_profile", 1);

	/* Currently, all ES2/ES3 implementations support highp in the
	 * fragment shader, so we always define this macro in ES2/ES3.
	 * If we ever get a driver that doesn't support highp, we'll
	 * need to add a flag to the gl_context and check that here.
	 */
	if (version >= 130 || parser->is_gles)
		add_builtin_define (parser, "GL_FRAGMENT_PRECISION_HIGH", 1);

	if (explicitly_set) {
	   ralloc_asprintf_rewrite_tail (&parser->output, &parser->output_length,
					 "#version %" PRIiMAX "%s%s", version,
					 es_identifier ? " " : "",
					 es_identifier ? es_identifier : "");
	}
}

/* GLSL version if no version is explicitly specified. */
#define IMPLICIT_GLSL_VERSION 110

/* GLSL ES version if no version is explicitly specified. */
#define IMPLICIT_GLSL_ES_VERSION 100

void
glcpp_parser_resolve_implicit_version(glcpp_parser_t *parser)
{
	int language_version = parser->api == API_OPENGLES2 ?
			       IMPLICIT_GLSL_ES_VERSION :
			       IMPLICIT_GLSL_VERSION;

	_glcpp_parser_handle_version_declaration(parser, language_version,
						 NULL, false);
}
@


1.8
log
@Merge Mesa 10.2.9
@
text
@@


1.7
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a130 3
static const char *
_string_list_has_duplicate (string_list_t *list);

a178 5
typedef enum {
	EXPANSION_MODE_IGNORE_DEFINED,
	EXPANSION_MODE_EVALUATE_DEFINED
} expansion_mode_t;

d185 1
a185 2
				   token_list_t *list,
				   expansion_mode_t mode);
d190 1
a190 2
				 token_list_t *list,
				 expansion_mode_t mode);
d221 1
a221 1
#line 232 "glcpp/glcpp-parse.c" /* yacc.c:339  */
d245 1
a245 1
# define YYDEBUG 1
d256 35
a290 39
    DEFINED = 258,
    ELIF_EXPANDED = 259,
    HASH_TOKEN = 260,
    DEFINE_TOKEN = 261,
    FUNC_IDENTIFIER = 262,
    OBJ_IDENTIFIER = 263,
    ELIF = 264,
    ELSE = 265,
    ENDIF = 266,
    ERROR_TOKEN = 267,
    IF = 268,
    IFDEF = 269,
    IFNDEF = 270,
    LINE = 271,
    PRAGMA = 272,
    UNDEF = 273,
    VERSION_TOKEN = 274,
    GARBAGE = 275,
    IDENTIFIER = 276,
    IF_EXPANDED = 277,
    INTEGER = 278,
    INTEGER_STRING = 279,
    LINE_EXPANDED = 280,
    NEWLINE = 281,
    OTHER = 282,
    PLACEHOLDER = 283,
    SPACE = 284,
    PLUS_PLUS = 285,
    MINUS_MINUS = 286,
    PASTE = 287,
    OR = 288,
    AND = 289,
    EQUAL = 290,
    NOT_EQUAL = 291,
    LESS_OR_EQUAL = 292,
    GREATER_OR_EQUAL = 293,
    LEFT_SHIFT = 294,
    RIGHT_SHIFT = 295,
    UNARY = 296
d318 1
a318 1
#line 333 "glcpp/glcpp-parse.c" /* yacc.c:358  */
d562 1
a562 1
#define YYLAST   652
d565 1
a565 1
#define YYNTOKENS  64
d567 1
a567 1
#define YYNNTS  25
d569 1
a569 1
#define YYNRULES  118
d571 1
a571 1
#define YYNSTATES  185
d576 1
a576 1
#define YYMAXUTOK   296
d588 4
a591 4
       2,     2,     2,    54,     2,     2,     2,    50,    37,     2,
      52,    53,    48,    46,    56,    47,    61,    49,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,    62,
      40,    63,    41,     2,     2,     2,     2,     2,     2,     2,
d594 1
a594 1
       2,    57,     2,    58,    36,     2,     2,     2,     2,     2,
d597 1
a597 1
       2,     2,     2,    59,    35,    60,    55,     2,     2,     2,
d613 2
a614 2
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      38,    39,    42,    43,    44,    45,    51
d621 12
a632 12
       0,   205,   205,   207,   211,   212,   213,   218,   222,   227,
     232,   240,   253,   256,   259,   265,   268,   269,   269,   284,
     284,   287,   287,   304,   304,   327,   337,   337,   344,   344,
     351,   377,   397,   397,   410,   410,   413,   419,   425,   428,
     434,   437,   440,   446,   455,   460,   464,   471,   482,   493,
     500,   507,   514,   521,   528,   535,   542,   549,   556,   563,
     570,   577,   584,   596,   608,   615,   619,   623,   627,   631,
     637,   642,   650,   651,   655,   656,   659,   661,   667,   672,
     679,   683,   687,   691,   695,   699,   706,   707,   708,   709,
     710,   711,   712,   713,   714,   715,   716,   717,   718,   719,
     720,   721,   722,   723,   724,   725,   726,   727,   728,   729,
     730,   731,   732,   733,   734,   735,   736,   737,   738
d641 15
a655 15
  "$end", "error", "$undefined", "DEFINED", "ELIF_EXPANDED", "HASH_TOKEN",
  "DEFINE_TOKEN", "FUNC_IDENTIFIER", "OBJ_IDENTIFIER", "ELIF", "ELSE",
  "ENDIF", "ERROR_TOKEN", "IF", "IFDEF", "IFNDEF", "LINE", "PRAGMA",
  "UNDEF", "VERSION_TOKEN", "GARBAGE", "IDENTIFIER", "IF_EXPANDED",
  "INTEGER", "INTEGER_STRING", "LINE_EXPANDED", "NEWLINE", "OTHER",
  "PLACEHOLDER", "SPACE", "PLUS_PLUS", "MINUS_MINUS", "PASTE", "OR", "AND",
  "'|'", "'^'", "'&'", "EQUAL", "NOT_EQUAL", "'<'", "'>'", "LESS_OR_EQUAL",
  "GREATER_OR_EQUAL", "LEFT_SHIFT", "RIGHT_SHIFT", "'+'", "'-'", "'*'",
  "'/'", "'%'", "UNARY", "'('", "')'", "'!'", "'~'", "','", "'['", "']'",
  "'{'", "'}'", "'.'", "';'", "'='", "$accept", "input", "line",
  "expanded_line", "define", "control_line", "$@@1", "control_line_success",
  "$@@2", "$@@3", "$@@4", "$@@5", "$@@6", "$@@7", "$@@8", "control_line_error",
  "integer_constant", "expression", "identifier_list", "text_line",
  "replacement_list", "junk", "pp_tokens", "preprocessing_token",
  "operator", YY_NULLPTR
d667 3
a669 4
     285,   286,   287,   288,   289,   124,    94,    38,   290,   291,
      60,    62,   292,   293,   294,   295,    43,    45,    42,    47,
      37,   296,    40,    41,    33,   126,    44,    91,    93,   123,
     125,    46,    59,    61
d673 1
a673 1
#define YYPACT_NINF -142
d676 1
a676 1
  (!!((Yystate) == (-142)))
d687 19
a705 19
    -142,   134,  -142,  -142,   -18,   578,  -142,   -18,  -142,   -15,
    -142,  -142,    26,  -142,  -142,  -142,  -142,  -142,  -142,  -142,
    -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,
    -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,
    -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,
    -142,  -142,   182,  -142,  -142,  -142,  -142,  -142,   -18,   -18,
     -18,   -18,   -18,  -142,   508,     7,   230,  -142,  -142,     9,
      25,  -142,  -142,  -142,    35,  -142,   -15,   470,  -142,   533,
      81,  -142,  -142,  -142,  -142,  -142,  -142,   -23,  -142,  -142,
    -142,   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,
     -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,  -142,
      65,  -142,   278,    38,    58,  -142,  -142,   470,    90,    91,
     470,  -142,    92,    37,   326,  -142,  -142,    89,  -142,   571,
     587,   602,    83,   102,     0,     0,    33,    33,    33,    33,
      20,    20,    60,    60,  -142,  -142,  -142,    66,   470,  -142,
    -142,  -142,  -142,   374,   470,   470,   422,   109,   110,  -142,
    -142,  -142,   -14,   131,   470,  -142,   136,   470,   172,  -142,
    -142,  -142,  -142,   470,     4,  -142,  -142,  -142,   173,   470,
     179,  -142,   175,  -142,  -142
d713 19
a731 19
       2,     0,     1,    83,     0,     0,    80,     0,    81,     0,
      72,    84,    85,   117,   118,   116,   112,   111,   110,   109,
      93,   107,   108,   103,   104,   105,   106,   101,   102,    95,
      96,    94,    99,   100,    88,    89,    98,    97,   114,    86,
      87,    90,    91,    92,   113,   115,     3,     7,     4,    15,
      16,     6,     0,    78,    82,    46,    44,    43,     0,     0,
       0,     0,     0,    45,     0,    19,     0,    32,    34,     0,
      23,    26,    28,    17,     0,    21,     0,     0,    38,     0,
       0,     5,    73,    85,    79,    68,    67,     0,    65,    66,
       9,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,    31,     0,     0,     0,    40,    25,     0,     0,     0,
       0,    39,     0,     0,     0,     8,    10,     0,    69,    47,
      48,    49,    50,    51,    53,    52,    57,    56,    55,    54,
      59,    58,    61,    60,    64,    63,    62,     0,    74,    20,
      30,    33,    35,     0,    76,    76,     0,     0,     0,    36,
      42,    11,     0,     0,    75,    24,     0,    77,     0,    18,
      22,    37,    70,    74,     0,    12,    27,    29,     0,    74,
       0,    13,     0,    71,    14
d737 3
a739 3
    -142,  -142,  -142,  -142,  -142,    47,  -142,  -142,  -142,  -142,
    -142,  -142,  -142,  -142,  -142,  -142,    -5,    -6,  -142,  -142,
    -141,    49,    -1,   -50,  -142
d745 3
a747 3
      -1,     1,    46,    47,   149,    48,   120,    49,   110,   122,
     117,   118,   119,   113,   114,    50,    63,    64,   174,    51,
     163,   166,   164,    53,    54
d755 26
a780 22
      52,    79,    84,    55,    80,    56,    57,   172,    56,    57,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,    58,    59,
     128,     5,   178,   109,    60,   115,    61,    62,   182,   173,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   116,    85,    86,    87,    88,    89,   179,   158,    81,
     180,   121,    84,   159,   151,   112,   104,   105,   106,   107,
     108,   123,   147,   148,    84,   127,   124,   102,   103,   104,
     105,   106,   107,   108,   152,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,    84,    56,    57,    84,   126,   106,   107,
     108,   154,   155,   157,    84,   161,   153,    84,   162,   156,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,     2,   170,   171,     3,     4,     5,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   167,   167,     6,     7,   175,     8,     9,
      10,    11,   176,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,     3,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,   177,   181,
     183,   184,     0,     6,   168,     0,     8,     0,    82,    11,
       0,    83,    13,    14,    15,    16,    17,    18,    19,    20,
d782 16
a797 4
      31,    32,    33,     3,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,     0,     0,     0,     0,
       0,     6,     0,     0,     8,     0,   111,    11,     0,    83,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
d799 7
a805 18
      33,     3,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,     0,     0,     0,     0,     0,     6,
       0,     0,     8,     0,   150,    11,     0,    83,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,     3,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,     0,     0,     0,     0,     0,     6,     0,     0,
       8,     0,   160,    11,     0,    83,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,     3,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
       0,     0,     0,     0,     0,     6,     0,     0,     8,     0,
     165,    11,     0,    83,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,     3,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     6,     0,     0,     8,     0,   169,    11,
       0,    83,    13,    14,    15,    16,    17,    18,    19,    20,
d807 18
a824 19
      31,    32,    33,     3,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,     0,     0,     0,     0,
       0,     6,     0,     0,     8,     0,     0,    11,     0,    83,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,     0,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    90,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   125,
       0,     0,     0,     0,     0,     0,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,    65,     0,     0,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,     0,
       0,     0,     0,     0,    78,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108
d829 18
a846 1
       1,     7,    52,    21,     9,    23,    24,    21,    23,    24,
d848 33
a880 10
      43,    44,    45,    46,    47,    48,    49,    50,    46,    47,
      53,     5,   173,    26,    52,    26,    54,    55,   179,    53,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    26,    58,    59,    60,    61,    62,    53,    21,    12,
      56,    26,   112,    26,    26,    66,    46,    47,    48,    49,
      50,    76,     7,     8,   124,    80,    77,    44,    45,    46,
      47,    48,    49,    50,    26,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   153,    23,    24,   156,    26,    48,    49,
      50,    21,    21,    21,   164,    26,   117,   167,    52,   120,
d882 4
a885 8
      47,    48,    49,    50,     0,    26,    26,     3,     4,     5,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,   154,   155,    21,    22,    26,    24,    25,
      26,    27,    26,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,     3,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    26,    26,
      21,    26,    -1,    21,   155,    -1,    24,    -1,    26,    27,
d887 3
a889 4
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,     3,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,
      -1,    21,    -1,    -1,    24,    -1,    26,    27,    -1,    29,
d891 1
a891 9
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,     3,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    21,
      -1,    -1,    24,    -1,    26,    27,    -1,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,     3,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    -1,    -1,    -1,    -1,    -1,    21,    -1,    -1,
      24,    -1,    26,    27,    -1,    29,    30,    31,    32,    33,
d893 6
a898 29
      44,    45,    46,    47,    48,    49,    50,     3,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    21,    -1,    -1,    24,    -1,
      26,    27,    -1,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,     3,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    -1,    -1,
      -1,    -1,    -1,    21,    -1,    -1,    24,    -1,    26,    27,
      -1,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,     3,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,
      -1,    21,    -1,    -1,    24,    -1,    -1,    27,    -1,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    26,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    26,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,     6,    -1,    -1,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    26,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50
d905 19
a923 19
       0,    65,     0,     3,     4,     5,    21,    22,    24,    25,
      26,    27,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    66,    67,    69,    71,
      79,    83,    86,    87,    88,    21,    23,    24,    46,    47,
      52,    54,    55,    80,    81,     6,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    26,    81,
      80,    69,    26,    29,    87,    81,    81,    81,    81,    81,
      26,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    26,
      72,    26,    86,    77,    78,    26,    26,    74,    75,    76,
      70,    26,    73,    80,    86,    26,    26,    80,    53,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,     7,     8,    68,
      26,    26,    26,    86,    21,    21,    86,    21,    21,    26,
      26,    26,    52,    84,    86,    26,    85,    86,    85,    26,
      26,    26,    21,    53,    82,    26,    26,    26,    84,    53,
      56,    26,    84,    21,    26
d929 12
a940 12
       0,    64,    65,    65,    66,    66,    66,    66,    67,    67,
      67,    67,    68,    68,    68,    69,    69,    70,    69,    72,
      71,    73,    71,    74,    71,    71,    75,    71,    76,    71,
      71,    71,    77,    71,    78,    71,    71,    71,    71,    71,
      79,    79,    79,    80,    80,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      82,    82,    83,    83,    84,    84,    85,    85,    86,    86,
      87,    87,    87,    87,    87,    87,    88,    88,    88,    88,
      88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
      88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
      88,    88,    88,    88,    88,    88,    88,    88,    88
d946 8
a953 8
       0,     2,     0,     2,     1,     2,     1,     1,     3,     3,
       3,     4,     3,     5,     6,     1,     1,     0,     5,     0,
       4,     0,     5,     0,     5,     3,     0,     6,     0,     6,
       4,     3,     0,     4,     0,     4,     4,     5,     2,     3,
       3,     3,     4,     1,     1,     1,     1,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     2,     2,     3,
       1,     3,     1,     2,     0,     1,     0,     1,     1,     2,
d957 1
a957 1
       1,     1,     1,     1,     1,     1,     1,     1,     1
d1551 1
a1551 1
#line 165 "glcpp/glcpp-parse.y" /* yacc.c:1429  */
d1560 1
a1560 1
#line 1568 "glcpp/glcpp-parse.c" /* yacc.c:1429  */
d1746 32
a1777 2
        case 6:
#line 213 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1783 1
a1783 1
#line 1761 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1786 2
a1787 2
  case 8:
#line 222 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1789 1
a1789 3
		if (parser->is_gles && (yyvsp[-1].expression_value).undefined_macro)
			glcpp_error(& (yylsp[-2]), parser, "undefined macro %s in expression (illegal in GLES)", (yyvsp[-1].expression_value).undefined_macro);
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-2]), (yyvsp[-1].expression_value).value);
d1791 1
a1791 1
#line 1771 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1794 2
a1795 2
  case 9:
#line 227 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1797 1
a1797 3
		if (parser->is_gles && (yyvsp[-1].expression_value).undefined_macro)
			glcpp_error(& (yylsp[-2]), parser, "undefined macro %s in expression (illegal in GLES)", (yyvsp[-1].expression_value).undefined_macro);
		_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-2]), "elif", (yyvsp[-1].expression_value).value);
d1799 1
a1799 1
#line 1781 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1802 2
a1803 2
  case 10:
#line 232 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1812 1
a1812 1
#line 1794 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1815 2
a1816 2
  case 11:
#line 240 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1827 1
a1827 1
#line 1809 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1830 2
a1831 2
  case 12:
#line 253 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1835 1
a1835 1
#line 1817 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1838 2
a1839 2
  case 13:
#line 256 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1843 1
a1843 1
#line 1825 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1846 2
a1847 2
  case 14:
#line 259 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1851 1
a1851 9
#line 1833 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 15:
#line 265 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		ralloc_asprintf_rewrite_tail (&parser->output, &parser->output_length, "\n");
	}
#line 1841 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1855 1
a1855 1
#line 269 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1859 1
a1859 16
#line 1849 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 18:
#line 271 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {

		if (parser->skip_stack == NULL ||
		    parser->skip_stack->type == SKIP_NO_SKIP)
		{
			_glcpp_parser_expand_and_lex_from (parser,
							   LINE_EXPANDED, (yyvsp[-1].token_list),
							   EXPANSION_MODE_IGNORE_DEFINED);
		}
	}
#line 1864 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1863 1
a1863 1
#line 284 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1867 1
a1867 1
#line 1872 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1870 2
a1871 2
  case 21:
#line 287 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1873 1
a1873 16
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1880 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 22:
#line 289 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		macro_t *macro;
		if (strcmp("__LINE__", (yyvsp[-1].str)) == 0
		    || strcmp("__FILE__", (yyvsp[-1].str)) == 0
		    || strcmp("__VERSION__", (yyvsp[-1].str)) == 0)
			glcpp_error(& (yylsp[-4]), parser, "Built-in (pre-defined)"
				    " macro names can not be undefined.");

		macro = hash_table_find (parser->defines, (yyvsp[-1].str));
d1880 1
a1880 1
#line 1900 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1883 2
a1884 2
  case 23:
#line 304 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1888 1
a1888 1
#line 1908 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1891 2
a1892 2
  case 24:
#line 306 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1905 1
a1905 2
							   IF_EXPANDED, (yyvsp[-1].token_list),
							   EXPANSION_MODE_EVALUATE_DEFINED);
d1909 1
a1909 1
			_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-4]), 0);
d1913 1
a1913 1
#line 1934 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1916 2
a1917 2
  case 25:
#line 327 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1924 1
a1924 1
			glcpp_error(& (yylsp[-2]), parser, "#if with no expression");
d1926 1
a1926 1
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-2]), 0);
d1928 1
a1928 1
#line 1949 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1931 2
a1932 2
  case 26:
#line 337 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1936 1
a1936 1
#line 1957 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1939 2
a1940 2
  case 27:
#line 339 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1944 1
a1944 1
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-5]), macro != NULL);
d1946 1
a1946 1
#line 1967 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1949 2
a1950 2
  case 28:
#line 344 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1954 1
a1954 1
#line 1975 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1957 2
a1958 2
  case 29:
#line 346 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1964 1
a1964 1
#line 1985 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1967 2
a1968 2
  case 30:
#line 351 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1981 1
a1981 2
							   ELIF_EXPANDED, (yyvsp[-1].token_list),
							   EXPANSION_MODE_EVALUATE_DEFINED);
d1986 1
a1986 1
			glcpp_error(& (yylsp[-3]), parser, "#elif after #else");
d1990 1
a1990 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-3]),
d1994 1
a1994 1
#line 2016 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1997 2
a1998 2
  case 31:
#line 377 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2005 1
a2005 1
			glcpp_error(& (yylsp[-2]), parser, "#elif with no expression");
d2010 1
a2010 1
			glcpp_error(& (yylsp[-2]), parser, "#elif after #else");
d2014 1
a2014 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-2]),
d2016 1
a2016 1
			glcpp_warning(& (yylsp[-2]), parser, "ignoring illegal #elif without expression");
d2019 1
a2019 1
#line 2041 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2022 2
a2023 8
  case 32:
#line 397 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { parser->lexing_directive = 1; }
#line 2047 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 33:
#line 397 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2028 1
a2028 1
			glcpp_error(& (yylsp[-3]), parser, "multiple #else");
d2032 1
a2032 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-3]), "else", 1);
d2037 1
a2037 1
#line 2065 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2040 2
a2041 2
  case 34:
#line 410 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2043 1
a2043 1
		_glcpp_parser_skip_stack_pop (parser, & (yylsp[-1]));
d2045 1
a2045 1
#line 2073 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2048 2
a2049 2
  case 36:
#line 413 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2052 1
a2052 1
			glcpp_error(& (yylsp[-3]), parser, "#version must appear on the first line");
d2056 1
a2056 1
#line 2084 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2059 2
a2060 2
  case 37:
#line 419 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2063 1
a2063 1
			glcpp_error(& (yylsp[-4]), parser, "#version must appear on the first line");
d2067 1
a2067 1
#line 2095 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2070 2
a2071 2
  case 38:
#line 425 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2075 1
a2075 1
#line 2103 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2078 2
a2079 2
  case 39:
#line 428 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2081 15
a2095 1
		ralloc_asprintf_rewrite_tail (&parser->output, &parser->output_length, "#%s", (yyvsp[-1].str));
d2097 1
a2097 1
#line 2111 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2101 1
a2101 1
#line 434 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2103 3
a2105 1
		glcpp_error(& (yylsp[-2]), parser, "#%s", (yyvsp[-1].str));
d2107 1
a2107 1
#line 2119 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2111 1
a2111 1
#line 437 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2113 1
a2113 1
		glcpp_error (& (yylsp[-2]), parser, "#define without macro name");
d2115 1
a2115 1
#line 2127 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2119 1
a2119 1
#line 440 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2121 1
a2121 1
		glcpp_error (& (yylsp[-3]), parser, "Illegal non-directive after #");
d2123 1
a2123 1
#line 2135 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2127 1
a2127 1
#line 446 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2129 1
a2129 7
		if (strlen ((yyvsp[0].str)) >= 3 && strncmp ((yyvsp[0].str), "0x", 2) == 0) {
			(yyval.ival) = strtoll ((yyvsp[0].str) + 2, NULL, 16);
		} else if ((yyvsp[0].str)[0] == '0') {
			(yyval.ival) = strtoll ((yyvsp[0].str), NULL, 8);
		} else {
			(yyval.ival) = strtoll ((yyvsp[0].str), NULL, 10);
		}
d2131 1
a2131 1
#line 2149 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2135 1
a2135 1
#line 455 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2137 1
a2137 1
		(yyval.ival) = (yyvsp[0].ival);
d2139 1
a2139 1
#line 2157 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2143 1
a2143 1
#line 460 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2145 1
a2145 2
		(yyval.expression_value).value = (yyvsp[0].ival);
		(yyval.expression_value).undefined_macro = NULL;
d2147 1
a2147 1
#line 2166 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2151 1
a2151 1
#line 464 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2153 1
a2153 5
		(yyval.expression_value).value = 0;
		if (parser->is_gles)
			(yyval.expression_value).undefined_macro = ralloc_strdup (parser, (yyvsp[0].str));
		else
			(yyval.expression_value).undefined_macro = NULL;
d2155 1
a2155 1
#line 2178 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2159 1
a2159 1
#line 471 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2161 1
a2161 9
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value || (yyvsp[0].expression_value).value;

		/* Short-circuit: Only flag undefined from right side
		 * if left side evaluates to false.
		 */
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else if (! (yyvsp[-2].expression_value).value)
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2163 1
a2163 1
#line 2194 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2167 1
a2167 1
#line 482 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2169 1
a2169 9
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value && (yyvsp[0].expression_value).value;

		/* Short-circuit: Only flag undefined from right-side
		 * if left side evaluates to true.
		 */
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else if ((yyvsp[-2].expression_value).value)
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2171 1
a2171 1
#line 2210 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2175 1
a2175 1
#line 493 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2177 1
a2177 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value | (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2179 1
a2179 1
#line 2222 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2183 1
a2183 1
#line 500 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2185 1
a2185 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value ^ (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2187 1
a2187 1
#line 2234 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2191 1
a2191 1
#line 507 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2193 1
a2193 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value & (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2195 1
a2195 1
#line 2246 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2199 1
a2199 1
#line 514 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2201 1
a2201 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value != (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2203 1
a2203 1
#line 2258 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2207 1
a2207 1
#line 521 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2209 1
a2209 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value == (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2211 1
a2211 1
#line 2270 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2215 1
a2215 1
#line 528 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2217 1
a2217 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value >= (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2219 1
a2219 1
#line 2282 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2223 1
a2223 1
#line 535 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2225 1
a2225 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value <= (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2227 1
a2227 1
#line 2294 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2231 1
a2231 1
#line 542 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2233 6
a2238 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value > (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2240 1
a2240 1
#line 2306 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2244 1
a2244 1
#line 549 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2246 6
a2251 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value < (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2253 1
a2253 1
#line 2318 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2257 1
a2257 1
#line 556 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2259 1
a2259 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value >> (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2261 1
a2261 1
#line 2330 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2265 1
a2265 1
#line 563 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2267 1
a2267 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value << (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2269 1
a2269 1
#line 2342 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2273 1
a2273 1
#line 570 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2275 1
a2275 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value - (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2277 1
a2277 1
#line 2354 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2281 1
a2281 1
#line 577 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2283 1
a2283 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value + (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2285 1
a2285 1
#line 2366 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2289 1
a2289 1
#line 584 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2291 1
a2291 10
		if ((yyvsp[0].expression_value).value == 0) {
			yyerror (& (yylsp[-2]), parser,
				 "zero modulus in preprocessor directive");
		} else {
			(yyval.expression_value).value = (yyvsp[-2].expression_value).value % (yyvsp[0].expression_value).value;
		}
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2293 1
a2293 1
#line 2383 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2297 1
a2297 1
#line 596 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2299 1
a2299 10
		if ((yyvsp[0].expression_value).value == 0) {
			yyerror (& (yylsp[-2]), parser,
				 "division by 0 in preprocessor directive");
		} else {
			(yyval.expression_value).value = (yyvsp[-2].expression_value).value / (yyvsp[0].expression_value).value;
		}
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2301 1
a2301 1
#line 2400 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2305 1
a2305 1
#line 608 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2307 3
a2309 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value * (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2311 1
a2311 1
#line 2412 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2315 1
a2315 1
#line 615 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2317 3
a2319 2
		(yyval.expression_value).value = ! (yyvsp[0].expression_value).value;
		(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2321 1
a2321 1
#line 2421 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2325 7
a2331 1
#line 619 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2333 1
a2333 2
		(yyval.expression_value).value = ~ (yyvsp[0].expression_value).value;
		(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2335 1
a2335 1
#line 2430 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2338 4
a2341 7
  case 67:
#line 623 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.expression_value).value = - (yyvsp[0].expression_value).value;
		(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
	}
#line 2439 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2344 2
a2345 2
  case 68:
#line 627 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2347 1
a2347 2
		(yyval.expression_value).value = + (yyvsp[0].expression_value).value;
		(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2349 1
a2349 1
#line 2448 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2352 2
a2353 2
  case 69:
#line 631 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2355 2
a2356 1
		(yyval.expression_value) = (yyvsp[-1].expression_value);
d2358 1
a2358 1
#line 2456 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2361 2
a2362 2
  case 70:
#line 637 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2364 2
a2365 3
		(yyval.string_list) = _string_list_create (parser);
		_string_list_append_item ((yyval.string_list), (yyvsp[0].str));
		ralloc_steal ((yyval.string_list), (yyvsp[0].str));
d2367 1
a2367 1
#line 2466 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2370 2
a2371 2
  case 71:
#line 642 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2373 2
a2374 3
		(yyval.string_list) = (yyvsp[-2].string_list);	
		_string_list_append_item ((yyval.string_list), (yyvsp[0].str));
		ralloc_steal ((yyval.string_list), (yyvsp[0].str));
d2376 1
a2376 13
#line 2476 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 72:
#line 650 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.token_list) = NULL; }
#line 2482 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 74:
#line 655 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.token_list) = NULL; }
#line 2488 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2380 1
a2380 1
#line 661 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2382 2
a2383 1
		glcpp_error(&(yylsp[0]), parser, "extra tokens at end of directive");
d2385 1
a2385 1
#line 2496 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2389 1
a2389 1
#line 667 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2395 1
a2395 1
#line 2506 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2399 1
a2399 1
#line 672 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2404 1
a2404 1
#line 2515 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2408 1
a2408 1
#line 679 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2413 1
a2413 1
#line 2524 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2417 1
a2417 1
#line 683 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2422 1
a2422 1
#line 2533 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2426 1
a2426 1
#line 687 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2431 1
a2431 1
#line 2542 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2435 1
a2435 1
#line 691 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2437 1
a2437 1
		(yyval.token) = _token_create_ival (parser, DEFINED, DEFINED);
d2440 1
a2440 1
#line 2551 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2444 1
a2444 1
#line 695 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2446 1
a2446 1
		(yyval.token) = _token_create_str (parser, OTHER, (yyvsp[0].str));
d2449 1
a2449 1
#line 2560 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2453 3
a2455 6
#line 699 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.token) = _token_create_ival (parser, SPACE, SPACE);
		(yyval.token)->location = yylloc;
	}
#line 2569 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2459 3
a2461 3
#line 706 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '['; }
#line 2575 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2465 3
a2467 3
#line 707 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = ']'; }
#line 2581 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2471 3
a2473 3
#line 708 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '('; }
#line 2587 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2477 3
a2479 3
#line 709 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = ')'; }
#line 2593 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2483 3
a2485 3
#line 710 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '{'; }
#line 2599 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2489 3
a2491 3
#line 711 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '}'; }
#line 2605 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2495 3
a2497 3
#line 712 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '.'; }
#line 2611 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2501 3
a2503 3
#line 713 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '&'; }
#line 2617 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2507 3
a2509 3
#line 714 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '*'; }
#line 2623 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2513 3
a2515 3
#line 715 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '+'; }
#line 2629 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2519 3
a2521 3
#line 716 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '-'; }
#line 2635 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2525 3
a2527 3
#line 717 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '~'; }
#line 2641 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2531 3
a2533 3
#line 718 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '!'; }
#line 2647 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2537 3
a2539 3
#line 719 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '/'; }
#line 2653 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2543 3
a2545 3
#line 720 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '%'; }
#line 2659 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2549 3
a2551 3
#line 721 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = LEFT_SHIFT; }
#line 2665 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2555 3
a2557 3
#line 722 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = RIGHT_SHIFT; }
#line 2671 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2561 3
a2563 3
#line 723 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '<'; }
#line 2677 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2567 3
a2569 3
#line 724 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '>'; }
#line 2683 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2573 3
a2575 3
#line 725 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = LESS_OR_EQUAL; }
#line 2689 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2579 3
a2581 3
#line 726 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = GREATER_OR_EQUAL; }
#line 2695 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2585 3
a2587 3
#line 727 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = EQUAL; }
#line 2701 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2591 3
a2593 3
#line 728 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = NOT_EQUAL; }
#line 2707 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2597 3
a2599 3
#line 729 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '^'; }
#line 2713 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2603 3
a2605 3
#line 730 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '|'; }
#line 2719 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2609 3
a2611 3
#line 731 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = AND; }
#line 2725 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2615 3
a2617 3
#line 732 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = OR; }
#line 2731 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2621 3
a2623 3
#line 733 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = ';'; }
#line 2737 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2627 3
a2629 3
#line 734 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = ','; }
#line 2743 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2633 1
a2633 7
#line 735 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '='; }
#line 2749 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 116:
#line 736 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2635 1
a2635 1
#line 2755 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
a2637 5
  case 117:
#line 737 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = PLUS_PLUS; }
#line 2761 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;
d2639 1
a2639 8
  case 118:
#line 738 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = MINUS_MINUS; }
#line 2767 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;


#line 2771 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2874 1
a2874 1
#line 741 "glcpp/glcpp-parse.y" /* yacc.c:1906  */
a2927 19
/* Return duplicate string in list (if any), NULL otherwise. */
const char *
_string_list_has_duplicate (string_list_t *list)
{
	string_node_t *node, *dup;

	if (list == NULL)
		return NULL;

	for (node = list->head; node; node = node->next) {
		for (dup = node->next; dup; dup = dup->next) {
			if (strcmp (node->str, dup->str) == 0)
				return node->str;
		}
	}

	return NULL;
}

d3185 8
a3192 10
		/* Make sure whitespace appears in the same places in both.
		 * It need not be exactly the same amount of whitespace,
		 * though.
		 */
		if (node_a->token->type == SPACE
		    && node_b->token->type == SPACE) {
			while (node_a->token->type == SPACE)
				node_a = node_a->next;
			while (node_b->token->type == SPACE)
				node_b = node_b->next;
d3272 2
a3273 8
        case PLUS_PLUS:
		ralloc_asprintf_rewrite_tail (out, len, "++");
		break;
        case MINUS_MINUS:
		ralloc_asprintf_rewrite_tail (out, len, "--");
		break;
	case DEFINED:
		ralloc_asprintf_rewrite_tail (out, len, "defined");
a3279 1

d3455 1
a3455 1
	parser->lexing_directive = 0;
a3456 3
	parser->last_token_was_newline = 0;
	parser->last_token_was_space = 0;
	parser->first_non_space_token_this_line = 1;
a3462 1
	parser->skipping = 0;
a3607 124
/* Evaluate a DEFINED token node (based on subsequent tokens in the list).
 *
 * Note: This function must only be called when "node" is a DEFINED token,
 * (and will abort with an assertion failure otherwise).
 *
 * If "node" is followed, (ignoring any SPACE tokens), by an IDENTIFIER token
 * (optionally preceded and followed by '(' and ')' tokens) then the following
 * occurs:
 *
 *	If the identifier is a defined macro, this function returns 1.
 *
 *	If the identifier is not a defined macro, this function returns 0.
 *
 *	In either case, *last will be updated to the last node in the list
 *	consumed by the evaluation, (either the token of the identifier or the
 *	token of the closing parenthesis).
 *
 * In all other cases, (such as "node is the final node of the list", or
 * "missing closing parenthesis", etc.), this function generates a
 * preprocessor error, returns -1 and *last will not be set.
 */
static int
_glcpp_parser_evaluate_defined (glcpp_parser_t *parser,
				token_node_t *node,
				token_node_t **last)
{
	token_node_t *argument, *defined = node;

	assert (node->token->type == DEFINED);

	node = node->next;

	/* Ignore whitespace after DEFINED token. */
	while (node && node->token->type == SPACE)
		node = node->next;

	if (node == NULL)
		goto FAIL;

	if (node->token->type == IDENTIFIER || node->token->type == OTHER) {
		argument = node;
	} else if (node->token->type == '(') {
		node = node->next;

		/* Ignore whitespace after '(' token. */
		while (node && node->token->type == SPACE)
			node = node->next;

		if (node == NULL || (node->token->type != IDENTIFIER &&
				     node->token->type != OTHER))
		{
			goto FAIL;
		}

		argument = node;

		node = node->next;

		/* Ignore whitespace after identifier, before ')' token. */
		while (node && node->token->type == SPACE)
			node = node->next;

		if (node == NULL || node->token->type != ')')
			goto FAIL;
	} else {
		goto FAIL;
	}

	*last = node;

	return hash_table_find (parser->defines,
				argument->token->value.str) ? 1 : 0;

FAIL:
	glcpp_error (&defined->token->location, parser,
		     "\"defined\" not followed by an identifier");
	return -1;
}

/* Evaluate all DEFINED nodes in a given list, modifying the list in place.
 */
static void
_glcpp_parser_evaluate_defined_in_list (glcpp_parser_t *parser,
					token_list_t *list)
{
	token_node_t *node, *node_prev, *replacement, *last = NULL;
	int value;

	if (list == NULL)
		return;

	node_prev = NULL;
	node = list->head;

	while (node) {

		if (node->token->type != DEFINED)
			goto NEXT;

		value = _glcpp_parser_evaluate_defined (parser, node, &last);
		if (value == -1)
			goto NEXT;

		replacement = ralloc (list, token_node_t);
		replacement->token = _token_create_ival (list, INTEGER, value);

		/* Splice replacement node into list, replacing from "node"
		 * through "last". */
		if (node_prev)
			node_prev->next = replacement;
		else
			list->head = replacement;
		replacement->next = last->next;
		if (last == list->tail)
			list->tail = replacement;

		node = replacement;

	NEXT:
		node_prev = node;
		node = node->next;
	}
}

a3611 3
 *
 * See the documentation of _glcpp_parser_expand_token_list for a description
 * of the "mode" parameter.
d3616 1
a3616 2
				   token_list_t *list,
				   expansion_mode_t mode)
d3624 1
a3624 1
	_glcpp_parser_expand_token_list (parser, list, mode);
a3686 3
 *
 * See the documentation of _glcpp_parser_expand_token_list for a description
 * of the "mode" parameter.
d3691 2
a3692 2
			       token_node_t **last,
			       expansion_mode_t mode)
d3761 1
a3761 2
								 expanded_argument,
								 mode);
a3800 3
 *
 * See the documentation of _glcpp_parser_expand_token_list for a description
 * of the "mode" parameter.
d3805 1
a3805 2
			   token_node_t **last,
			   expansion_mode_t mode)
d3813 8
d3872 1
a3872 1
	return _glcpp_parser_expand_function (parser, node, last, mode);
d3931 1
a3931 17
 * 'list' itself.
 *
 * The "mode" argument controls the handling of any DEFINED tokens that
 * result from expansion as follows:
 *
 *	EXPANSION_MODE_IGNORE_DEFINED: Any resulting DEFINED tokens will be
 *		left in the final list, unevaluated. This is the correct mode
 *		for expanding any list in any context other than a
 *		preprocessor conditional, (#if or #elif).
 *
 *	EXPANSION_MODE_EVALUATE_DEFINED: Any resulting DEFINED tokens will be
 *		evaluated to 0 or 1 tokens depending on whether the following
 *		token is the name of a defined macro. If the DEFINED token is
 *		not followed by an (optionally parenthesized) identifier, then
 *		an error will be generated. This the correct mode for
 *		expanding any list in the context of a preprocessor
 *		conditional, (#if or #elif).
d3935 1
a3935 2
				 token_list_t *list,
				 expansion_mode_t mode)
a3949 3
	if (mode == EXPANSION_MODE_EVALUATE_DEFINED)
		_glcpp_parser_evaluate_defined_in_list (parser, list);

d3955 1
a3955 1
		expansion = _glcpp_parser_expand_node (parser, node, &last, mode);
a3958 5
			if (mode == EXPANSION_MODE_EVALUATE_DEFINED) {
				_glcpp_parser_evaluate_defined_in_list (parser,
									expansion);
			}

d4011 1
a4011 1
	_glcpp_parser_expand_token_list (parser, list, EXPANSION_MODE_IGNORE_DEFINED);
a4071 4
	/* We define pre-defined macros before we've started parsing the
         * actual file. So if there's no location defined yet, that's what
         * were doing and we don't want to generate an error for using the
         * reserved names. */
a4103 1
	const char *dup;
a4106 6
        /* Check for any duplicate parameter names. */
	if ((dup = _string_list_has_duplicate (parameters)) != NULL) {
		glcpp_error (loc, parser, "Duplicate macro parameter \"%s\"",
			     dup);
	}

d4169 5
a4173 5
		else if (ret == DEFINE_TOKEN ||
			 ret == UNDEF || ret == IF ||
			 ret == IFDEF || ret == IFNDEF ||
			 ret == ELIF || ret == ELSE ||
			 ret == ENDIF || ret == HASH_TOKEN)
d4266 1
a4266 1
		glcpp_error (loc, parser, "#%s without #if\n", type);
a4318 2
              if (extensions->OES_standard_derivatives)
                 add_builtin_define(parser, "GL_OES_standard_derivatives", 1);
a4337 3
              if (extensions->ARB_fragment_layer_viewport)
                 add_builtin_define(parser, "GL_ARB_fragment_layer_viewport", 1);

a4340 3
	      if (extensions->ARB_explicit_uniform_location)
	         add_builtin_define(parser, "GL_ARB_explicit_uniform_location", 1);

a4378 3
	      if (extensions->AMD_vertex_shader_viewport_index)
	         add_builtin_define(parser, "GL_AMD_vertex_shader_viewport_index", 1);

a4398 3

              if (extensions->ARB_derivative_control)
                 add_builtin_define(parser, "GL_ARB_derivative_control", 1);
@


1.6
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d131 3
d182 5
d193 2
a194 1
				   token_list_t *list);
d199 2
a200 1
				 token_list_t *list);
d231 1
a231 1
#line 222 "glcpp/glcpp-parse.c" /* yacc.c:339  */
d255 1
a255 1
# define YYDEBUG 0
d266 39
a304 35
    COMMA_FINAL = 258,
    DEFINED = 259,
    ELIF_EXPANDED = 260,
    HASH = 261,
    HASH_DEFINE = 262,
    FUNC_IDENTIFIER = 263,
    OBJ_IDENTIFIER = 264,
    HASH_ELIF = 265,
    HASH_ELSE = 266,
    HASH_ENDIF = 267,
    HASH_IF = 268,
    HASH_IFDEF = 269,
    HASH_IFNDEF = 270,
    HASH_LINE = 271,
    HASH_UNDEF = 272,
    HASH_VERSION = 273,
    IDENTIFIER = 274,
    IF_EXPANDED = 275,
    INTEGER = 276,
    INTEGER_STRING = 277,
    LINE_EXPANDED = 278,
    NEWLINE = 279,
    OTHER = 280,
    PLACEHOLDER = 281,
    SPACE = 282,
    PASTE = 283,
    OR = 284,
    AND = 285,
    EQUAL = 286,
    NOT_EQUAL = 287,
    LESS_OR_EQUAL = 288,
    GREATER_OR_EQUAL = 289,
    LEFT_SHIFT = 290,
    RIGHT_SHIFT = 291,
    UNARY = 292
d332 1
a332 1
#line 319 "glcpp/glcpp-parse.c" /* yacc.c:358  */
d576 1
a576 1
#define YYLAST   695
d579 1
a579 1
#define YYNTOKENS  60
d581 1
a581 1
#define YYNNTS  26
d583 1
a583 1
#define YYNRULES  115
d585 1
a585 1
#define YYNSTATES  181
d590 1
a590 1
#define YYMAXUTOK   292
d602 4
a605 4
       2,     2,     2,    50,     2,     2,     2,    46,    33,     2,
      48,    49,    44,    42,    52,    43,    57,    45,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,    58,
      36,    59,    37,     2,     2,     2,     2,     2,     2,     2,
d608 1
a608 1
       2,    53,     2,    54,    32,     2,     2,     2,     2,     2,
d611 1
a611 1
       2,     2,     2,    55,    31,    56,    51,     2,     2,     2,
d627 2
a628 2
      25,    26,    27,    28,    29,    30,    34,    35,    38,    39,
      40,    41,    47
d635 12
a646 12
       0,   188,   188,   190,   194,   197,   197,   208,   213,   214,
     218,   221,   224,   232,   245,   248,   251,   257,   257,   260,
     260,   270,   270,   292,   302,   302,   309,   309,   316,   341,
     361,   361,   374,   374,   377,   383,   389,   395,   404,   409,
     410,   415,   418,   421,   424,   427,   430,   433,   436,   439,
     442,   445,   448,   451,   454,   457,   460,   468,   476,   479,
     482,   485,   488,   491,   497,   502,   510,   511,   515,   521,
     522,   525,   527,   534,   538,   542,   547,   551,   558,   563,
     570,   574,   578,   582,   586,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623
d655 15
a669 15
  "$end", "error", "$undefined", "COMMA_FINAL", "DEFINED",
  "ELIF_EXPANDED", "HASH", "HASH_DEFINE", "FUNC_IDENTIFIER",
  "OBJ_IDENTIFIER", "HASH_ELIF", "HASH_ELSE", "HASH_ENDIF", "HASH_IF",
  "HASH_IFDEF", "HASH_IFNDEF", "HASH_LINE", "HASH_UNDEF", "HASH_VERSION",
  "IDENTIFIER", "IF_EXPANDED", "INTEGER", "INTEGER_STRING",
  "LINE_EXPANDED", "NEWLINE", "OTHER", "PLACEHOLDER", "SPACE", "PASTE",
  "OR", "AND", "'|'", "'^'", "'&'", "EQUAL", "NOT_EQUAL", "'<'", "'>'",
  "LESS_OR_EQUAL", "GREATER_OR_EQUAL", "LEFT_SHIFT", "RIGHT_SHIFT", "'+'",
  "'-'", "'*'", "'/'", "'%'", "UNARY", "'('", "')'", "'!'", "'~'", "','",
  "'['", "']'", "'{'", "'}'", "'.'", "';'", "'='", "$accept", "input",
  "line", "$@@1", "expanded_line", "define", "control_line", "$@@2", "$@@3",
  "$@@4", "$@@5", "$@@6", "$@@7", "$@@8", "integer_constant", "expression",
  "identifier_list", "text_line", "non_directive", "replacement_list",
  "junk", "conditional_token", "conditional_tokens", "pp_tokens",
  "preprocessing_token", "operator", YY_NULLPTR
d681 4
a684 3
     285,   124,    94,    38,   286,   287,    60,    62,   288,   289,
     290,   291,    43,    45,    42,    47,    37,   292,    40,    41,
      33,   126,    44,    91,    93,   123,   125,    46,    59,    61
d688 1
a688 1
#define YYPACT_NINF -166
d691 1
a691 1
  (!!((Yystate) == (-166)))
d702 19
a720 19
    -166,   147,  -166,    87,   -10,  -166,   190,  -166,  -166,   -17,
    -166,  -166,  -166,  -166,    52,  -166,    87,  -166,    52,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,   360,  -166,  -166,
    -166,  -166,  -166,    87,    87,    87,    87,    87,  -166,   519,
    -166,  -166,   401,   105,    31,  -166,  -166,   233,  -166,    34,
      44,  -166,   319,    67,    86,   483,    88,    -8,   542,    48,
    -166,  -166,  -166,  -166,   560,  -166,  -166,  -166,    87,    87,
      87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
      87,    87,    87,    87,    87,    87,  -166,   -35,   483,  -166,
    -166,    96,  -166,  -166,  -166,  -166,   276,   483,   483,   442,
      92,    93,  -166,  -166,  -166,    94,  -166,   580,   596,   611,
     625,   638,   649,   649,    19,    19,    19,    19,    38,    38,
      66,    66,  -166,  -166,  -166,    18,    95,   483,    72,  -166,
      98,   483,   100,  -166,  -166,  -166,  -166,  -166,   483,    26,
    -166,  -166,  -166,  -166,   101,   483,   107,  -166,   108,  -166,
    -166
d728 19
a746 19
       2,     0,     1,     0,     0,    17,     0,    30,    32,    21,
      24,    26,     5,    19,     0,    80,     0,    81,     0,    66,
      83,    84,   115,   111,   110,   109,   108,    92,   106,   107,
     102,   103,   104,   105,   100,   101,    94,    95,    93,    98,
      99,    87,    88,    97,    96,   113,    85,    86,    89,    90,
      91,   112,   114,     3,     8,     4,     7,     0,    78,    82,
      40,    38,    37,     0,     0,     0,     0,     0,    39,     0,
      36,     9,     0,     0,     0,    29,    76,     0,    75,     0,
       0,    23,     0,     0,     0,     0,     0,     0,     0,     0,
      67,    79,    62,    61,     0,    59,    60,    11,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    68,     0,    69,    18,
      73,     0,    28,    77,    31,    33,     0,    71,    71,     0,
       0,     0,    34,    10,    12,     0,    63,    41,    42,    43,
      44,    45,    47,    46,    51,    50,    49,    48,    53,    52,
      55,    54,    58,    57,    56,     0,     0,    70,     0,    22,
       0,    72,     0,     6,    20,    35,    13,    64,    69,     0,
      14,    74,    25,    27,     0,    69,     0,    15,     0,    65,
      16
d752 3
a754 3
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,   -12,   -11,  -166,  -166,  -166,  -165,
       3,   -69,    51,     0,    -6,  -166
d760 3
a762 3
      -1,     1,    53,    85,    54,   119,    55,    73,    86,    82,
      83,    84,    79,    80,    68,    69,   169,    56,    71,   156,
     160,    76,    77,   157,    58,    59
d770 22
a791 26
      78,    57,    87,   174,    72,    88,    89,    81,   123,    15,
     178,   131,    17,   155,    70,    20,   132,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,   167,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
     120,    91,    92,    93,    94,    95,    96,   123,   124,   109,
     110,   111,   112,   113,   114,   115,    91,   168,   125,    61,
      62,    78,   134,    61,    62,   175,    78,   135,   176,   121,
     111,   112,   113,   114,   115,   129,   127,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   128,    60,   130,    61,    62,
     113,   114,   115,   117,   118,   158,   164,   165,   166,   170,
      78,   171,   172,    91,   173,   177,   179,   161,   161,    63,
      64,   162,   180,   126,     0,    65,     0,    66,    67,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,    91,     3,     4,     5,    91,     0,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,     0,    17,
      18,    19,    20,     0,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    74,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,     0,     0,    15,
       0,     0,    17,     0,    75,    20,     0,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    74,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
       0,     0,    15,     0,     0,    17,     0,   122,    20,     0,
d793 4
a796 16
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      74,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,     0,     0,    15,     0,     0,    17,     0,
     159,    20,     0,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    74,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,     0,     0,    15,     0,
       0,    17,     0,     0,    20,     0,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,     0,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    15,
       0,     0,    17,     0,    90,    20,     0,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,     0,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      15,     0,     0,    17,     0,   116,    20,     0,    21,    22,
d798 18
a815 7
      33,    34,    35,    36,    37,    38,    39,    40,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    15,     0,     0,    17,     0,   163,    20,     0,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,     0,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    15,     0,     0,    17,     0,     0,    20,     0,
d817 19
a835 18
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
       0,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    97,     0,     0,     0,     0,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   133,     0,     0,     0,
       0,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,     0,     0,   136,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115
d840 1
a840 18
       6,     1,    14,   168,     4,    16,    18,    24,    77,    19,
     175,    19,    22,    48,    24,    25,    24,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    19,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      19,    57,    63,    64,    65,    66,    67,   126,    24,    40,
      41,    42,    43,    44,    45,    46,    72,    49,    24,    21,
      22,    77,    24,    21,    22,    49,    82,    89,    52,    48,
      42,    43,    44,    45,    46,    85,    19,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    19,    19,    19,    21,    22,
      44,    45,    46,     8,     9,    19,    24,    24,    24,    24,
     126,    49,    24,   129,    24,    24,    19,   127,   128,    42,
      43,   128,    24,    82,    -1,    48,    -1,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,
      -1,   157,     5,     6,     7,   161,    -1,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    31,    32,
d842 24
a865 3
      43,    44,    45,    46,     4,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    -1,    27,    28,    29,
d867 9
a875 8
      40,    41,    42,    43,    44,    45,    46,     4,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    -1,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
       4,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
d877 13
a889 7
      44,    45,    46,     4,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    -1,    19,    -1,
      -1,    22,    -1,    -1,    25,    -1,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    19,
      -1,    -1,    22,    -1,    24,    25,    -1,    27,    28,    29,
d891 6
a896 12
      40,    41,    42,    43,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      19,    -1,    -1,    22,    -1,    24,    25,    -1,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    19,    -1,    -1,    22,    -1,    24,    25,    -1,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    19,    -1,    -1,    22,    -1,    -1,    25,    -1,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
d898 8
a905 17
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    24,    -1,    -1,    -1,    -1,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    24,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    -1,    -1,    49,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46
d912 19
a930 19
       0,    61,     0,     5,     6,     7,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    22,    23,    24,
      25,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    62,    64,    66,    77,    83,    84,    85,
      19,    21,    22,    42,    43,    48,    50,    51,    74,    75,
      24,    78,    83,    67,     4,    24,    81,    82,    84,    72,
      73,    24,    69,    70,    71,    63,    68,    74,    75,    74,
      24,    84,    75,    75,    75,    75,    75,    24,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    24,     8,     9,    65,
      19,    48,    24,    81,    24,    24,    82,    19,    19,    83,
      19,    19,    24,    24,    24,    74,    49,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    48,    79,    83,    19,    24,
      80,    83,    80,    24,    24,    24,    24,    19,    49,    76,
      24,    49,    24,    24,    79,    49,    52,    24,    79,    19,
      24
d936 12
a947 12
       0,    60,    61,    61,    62,    63,    62,    62,    62,    62,
      64,    64,    64,    64,    65,    65,    65,    67,    66,    68,
      66,    69,    66,    66,    70,    66,    71,    66,    66,    66,
      72,    66,    73,    66,    66,    66,    66,    74,    74,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    76,    76,    77,    77,    78,    79,
      79,    80,    80,    81,    81,    81,    82,    82,    83,    83,
      84,    84,    84,    84,    84,    85,    85,    85,    85,    85,
      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
      85,    85,    85,    85,    85,    85
d953 8
a960 8
       0,     2,     0,     2,     1,     0,     4,     1,     1,     2,
       3,     3,     3,     4,     3,     5,     6,     0,     3,     0,
       4,     0,     4,     2,     0,     5,     0,     5,     3,     2,
       0,     3,     0,     3,     3,     4,     2,     1,     1,     1,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     2,     2,     3,     1,     3,     1,     2,     2,     0,
       1,     0,     1,     2,     4,     1,     1,     2,     1,     2,
d964 1
a964 1
       1,     1,     1,     1,     1,     1
d1558 1
a1558 1
#line 155 "glcpp/glcpp-parse.y" /* yacc.c:1429  */
d1567 1
a1567 1
#line 1561 "glcpp/glcpp-parse.c" /* yacc.c:1429  */
d1753 2
a1754 32
        case 4:
#line 194 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		ralloc_asprintf_rewrite_tail (&parser->output, &parser->output_length, "\n");
	}
#line 1752 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 5:
#line 197 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1760 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 6:
#line 199 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {

		if (parser->skip_stack == NULL ||
		    parser->skip_stack->type == SKIP_NO_SKIP)
		{
			_glcpp_parser_expand_and_lex_from (parser,
							   LINE_EXPANDED, (yyvsp[-1].token_list));
		}
	}
#line 1774 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 7:
#line 208 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1760 1
a1760 1
#line 1784 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1763 2
a1764 2
  case 10:
#line 218 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1766 3
a1768 1
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-2]), (yyvsp[-1].ival));
d1770 1
a1770 1
#line 1792 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1773 2
a1774 2
  case 11:
#line 221 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1776 3
a1778 1
		_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-2]), "elif", (yyvsp[-1].ival));
d1780 1
a1780 1
#line 1800 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1783 2
a1784 2
  case 12:
#line 224 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1793 1
a1793 1
#line 1813 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1796 2
a1797 2
  case 13:
#line 232 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1808 1
a1808 1
#line 1828 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1811 2
a1812 2
  case 14:
#line 245 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1816 1
a1816 1
#line 1836 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1819 2
a1820 2
  case 15:
#line 248 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1824 1
a1824 1
#line 1844 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1827 2
a1828 2
  case 16:
#line 251 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1832 9
a1840 1
#line 1852 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1844 1
a1844 1
#line 257 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1848 16
a1863 1
#line 1860 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1867 1
a1867 1
#line 260 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1871 1
a1871 1
#line 1868 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1874 2
a1875 2
  case 20:
#line 262 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1877 16
a1892 1
		macro_t *macro = hash_table_find (parser->defines, (yyvsp[-1].str));
d1899 1
a1899 1
#line 1881 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1902 2
a1903 2
  case 21:
#line 270 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1907 1
a1907 1
#line 1889 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1910 2
a1911 2
  case 22:
#line 272 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1924 2
a1925 1
							   IF_EXPANDED, (yyvsp[-1].token_list));
d1929 1
a1929 1
			_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-3]), 0);
d1933 1
a1933 1
#line 1914 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1936 2
a1937 2
  case 23:
#line 292 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1944 1
a1944 1
			glcpp_error(& (yylsp[-1]), parser, "#if with no expression");
d1946 1
a1946 1
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-1]), 0);
d1948 1
a1948 1
#line 1929 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1951 2
a1952 2
  case 24:
#line 302 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1956 1
a1956 1
#line 1937 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1959 2
a1960 2
  case 25:
#line 304 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1964 1
a1964 1
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-4]), macro != NULL);
d1966 1
a1966 1
#line 1947 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1969 2
a1970 2
  case 26:
#line 309 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1974 1
a1974 1
#line 1955 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1977 2
a1978 2
  case 27:
#line 311 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1984 1
a1984 1
#line 1965 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1987 2
a1988 2
  case 28:
#line 316 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2001 2
a2002 1
							   ELIF_EXPANDED, (yyvsp[-1].token_list));
d2007 1
a2007 1
			glcpp_error(& (yylsp[-2]), parser, "#elif after #else");
d2011 1
a2011 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-2]),
d2015 1
a2015 1
#line 1995 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2018 2
a2019 2
  case 29:
#line 341 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2026 1
a2026 1
			glcpp_error(& (yylsp[-1]), parser, "#elif with no expression");
d2031 1
a2031 1
			glcpp_error(& (yylsp[-1]), parser, "#elif after #else");
d2035 1
a2035 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-1]),
d2037 1
a2037 1
			glcpp_warning(& (yylsp[-1]), parser, "ignoring illegal #elif without expression");
d2040 7
a2046 1
#line 2020 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2049 2
a2050 2
  case 30:
#line 361 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2055 1
a2055 1
			glcpp_error(& (yylsp[0]), parser, "multiple #else");
d2059 1
a2059 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[0]), "else", 1);
d2064 1
a2064 1
#line 2038 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2067 2
a2068 2
  case 32:
#line 374 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2070 1
a2070 1
		_glcpp_parser_skip_stack_pop (parser, & (yylsp[0]));
d2072 1
a2072 1
#line 2046 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2075 2
a2076 2
  case 34:
#line 377 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2079 1
a2079 1
			glcpp_error(& (yylsp[-2]), parser, "#version must appear on the first line");
d2083 1
a2083 1
#line 2057 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2086 2
a2087 2
  case 35:
#line 383 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2090 1
a2090 1
			glcpp_error(& (yylsp[-3]), parser, "#version must appear on the first line");
d2094 1
a2094 1
#line 2068 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2097 2
a2098 2
  case 36:
#line 389 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2102 1
a2102 1
#line 2076 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2105 2
a2106 2
  case 37:
#line 395 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2108 1
a2108 15
		if (strlen ((yyvsp[0].str)) >= 3 && strncmp ((yyvsp[0].str), "0x", 2) == 0) {
			(yyval.ival) = strtoll ((yyvsp[0].str) + 2, NULL, 16);
		} else if ((yyvsp[0].str)[0] == '0') {
			(yyval.ival) = strtoll ((yyvsp[0].str), NULL, 8);
		} else {
			(yyval.ival) = strtoll ((yyvsp[0].str), NULL, 10);
		}
	}
#line 2090 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 38:
#line 404 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[0].ival);
d2110 1
a2110 1
#line 2098 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2114 1
a2114 1
#line 410 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2116 1
a2116 3
		if (parser->is_gles)
			glcpp_error(& (yylsp[0]), parser, "undefined macro %s in expression (illegal in GLES)", (yyvsp[0].str));
		(yyval.ival) = 0;
d2118 1
a2118 1
#line 2108 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2122 1
a2122 1
#line 415 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2124 1
a2124 1
		(yyval.ival) = (yyvsp[-2].ival) || (yyvsp[0].ival);
d2126 1
a2126 1
#line 2116 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2130 1
a2130 1
#line 418 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2132 1
a2132 1
		(yyval.ival) = (yyvsp[-2].ival) && (yyvsp[0].ival);
d2134 1
a2134 1
#line 2124 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2138 1
a2138 1
#line 421 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2140 7
a2146 1
		(yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival);
d2148 1
a2148 1
#line 2132 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2152 1
a2152 1
#line 424 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2154 1
a2154 1
		(yyval.ival) = (yyvsp[-2].ival) ^ (yyvsp[0].ival);
d2156 1
a2156 1
#line 2140 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2160 1
a2160 1
#line 427 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2162 2
a2163 1
		(yyval.ival) = (yyvsp[-2].ival) & (yyvsp[0].ival);
d2165 1
a2165 1
#line 2148 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2169 1
a2169 1
#line 430 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2171 5
a2175 1
		(yyval.ival) = (yyvsp[-2].ival) != (yyvsp[0].ival);
d2177 1
a2177 1
#line 2156 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2181 1
a2181 1
#line 433 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2183 9
a2191 1
		(yyval.ival) = (yyvsp[-2].ival) == (yyvsp[0].ival);
d2193 1
a2193 1
#line 2164 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2197 1
a2197 1
#line 436 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2199 9
a2207 1
		(yyval.ival) = (yyvsp[-2].ival) >= (yyvsp[0].ival);
d2209 1
a2209 1
#line 2172 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2213 1
a2213 1
#line 439 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2215 5
a2219 1
		(yyval.ival) = (yyvsp[-2].ival) <= (yyvsp[0].ival);
d2221 1
a2221 1
#line 2180 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2225 1
a2225 1
#line 442 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2227 5
a2231 1
		(yyval.ival) = (yyvsp[-2].ival) > (yyvsp[0].ival);
d2233 1
a2233 1
#line 2188 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2237 1
a2237 1
#line 445 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2239 5
a2243 1
		(yyval.ival) = (yyvsp[-2].ival) < (yyvsp[0].ival);
d2245 1
a2245 1
#line 2196 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2249 1
a2249 1
#line 448 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2251 5
a2255 1
		(yyval.ival) = (yyvsp[-2].ival) >> (yyvsp[0].ival);
d2257 1
a2257 1
#line 2204 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2261 1
a2261 1
#line 451 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2263 5
a2267 1
		(yyval.ival) = (yyvsp[-2].ival) << (yyvsp[0].ival);
d2269 1
a2269 1
#line 2212 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2273 1
a2273 1
#line 454 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2275 5
a2279 1
		(yyval.ival) = (yyvsp[-2].ival) - (yyvsp[0].ival);
d2281 1
a2281 1
#line 2220 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2285 1
a2285 1
#line 457 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2287 5
a2291 1
		(yyval.ival) = (yyvsp[-2].ival) + (yyvsp[0].ival);
d2293 1
a2293 1
#line 2228 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2297 1
a2297 1
#line 460 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2299 5
a2303 6
		if ((yyvsp[0].ival) == 0) {
			yyerror (& (yylsp[-2]), parser,
				 "zero modulus in preprocessor directive");
		} else {
			(yyval.ival) = (yyvsp[-2].ival) % (yyvsp[0].ival);
		}
d2305 1
a2305 1
#line 2241 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2309 1
a2309 1
#line 468 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2311 5
a2315 6
		if ((yyvsp[0].ival) == 0) {
			yyerror (& (yylsp[-2]), parser,
				 "division by 0 in preprocessor directive");
		} else {
			(yyval.ival) = (yyvsp[-2].ival) / (yyvsp[0].ival);
		}
d2317 1
a2317 1
#line 2254 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2321 1
a2321 1
#line 476 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2323 5
a2327 1
		(yyval.ival) = (yyvsp[-2].ival) * (yyvsp[0].ival);
d2329 1
a2329 1
#line 2262 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2333 1
a2333 1
#line 479 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2335 5
a2339 1
		(yyval.ival) = ! (yyvsp[0].ival);
d2341 1
a2341 1
#line 2270 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2345 1
a2345 1
#line 482 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2347 5
a2351 1
		(yyval.ival) = ~ (yyvsp[0].ival);
d2353 1
a2353 1
#line 2278 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2357 1
a2357 1
#line 485 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2359 5
a2363 1
		(yyval.ival) = - (yyvsp[0].ival);
d2365 1
a2365 1
#line 2286 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2369 1
a2369 1
#line 488 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2371 10
a2380 1
		(yyval.ival) = + (yyvsp[0].ival);
d2382 1
a2382 1
#line 2294 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2386 1
a2386 1
#line 491 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2388 10
a2397 1
		(yyval.ival) = (yyvsp[-1].ival);
d2399 1
a2399 1
#line 2302 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2403 1
a2403 1
#line 497 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2405 5
a2409 3
		(yyval.string_list) = _string_list_create (parser);
		_string_list_append_item ((yyval.string_list), (yyvsp[0].str));
		ralloc_steal ((yyval.string_list), (yyvsp[0].str));
d2411 1
a2411 1
#line 2312 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2415 1
a2415 1
#line 502 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2417 2
a2418 3
		(yyval.string_list) = (yyvsp[-2].string_list);	
		_string_list_append_item ((yyval.string_list), (yyvsp[0].str));
		ralloc_steal ((yyval.string_list), (yyvsp[0].str));
d2420 1
a2420 1
#line 2322 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2424 15
a2438 3
#line 510 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.token_list) = NULL; }
#line 2328 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2442 1
a2442 1
#line 515 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2444 2
a2445 1
		yyerror (& (yylsp[-1]), parser, "Invalid tokens after #");
d2447 1
a2447 1
#line 2336 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2451 5
a2455 3
#line 521 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.token_list) = NULL; }
#line 2342 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2458 2
a2459 2
  case 72:
#line 527 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2461 3
a2463 1
		glcpp_warning(&(yylsp[0]), parser, "extra tokens at end of directive");
d2465 1
a2465 1
#line 2350 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2468 2
a2469 2
  case 73:
#line 534 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2471 3
a2473 2
		int v = hash_table_find (parser->defines, (yyvsp[0].str)) ? 1 : 0;
		(yyval.token) = _token_create_ival (parser, INTEGER, v);
d2475 1
a2475 1
#line 2359 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2478 4
a2481 7
  case 74:
#line 538 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		int v = hash_table_find (parser->defines, (yyvsp[-1].str)) ? 1 : 0;
		(yyval.token) = _token_create_ival (parser, INTEGER, v);
	}
#line 2368 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2484 4
a2487 7
  case 76:
#line 547 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.token_list) = _token_list_create (parser);
		_token_list_append ((yyval.token_list), (yyvsp[0].token));
	}
#line 2377 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2491 1
a2491 1
#line 551 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2493 1
a2493 2
		(yyval.token_list) = (yyvsp[-1].token_list);
		_token_list_append ((yyval.token_list), (yyvsp[0].token));
d2495 1
a2495 1
#line 2386 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2499 1
a2499 1
#line 558 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2505 1
a2505 1
#line 2396 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2509 1
a2509 1
#line 563 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2514 1
a2514 1
#line 2405 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2518 1
a2518 1
#line 570 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2523 1
a2523 1
#line 2414 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2527 1
a2527 1
#line 574 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2532 1
a2532 1
#line 2423 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2536 1
a2536 1
#line 578 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2541 1
a2541 1
#line 2432 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2545 10
a2554 1
#line 582 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2559 1
a2559 1
#line 2441 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2562 2
a2563 2
  case 84:
#line 586 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2568 1
a2568 1
#line 2450 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2571 2
a2572 2
  case 85:
#line 593 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2574 1
a2574 1
#line 2456 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2577 2
a2578 2
  case 86:
#line 594 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2580 1
a2580 1
#line 2462 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2583 2
a2584 2
  case 87:
#line 595 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2586 1
a2586 1
#line 2468 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2589 2
a2590 2
  case 88:
#line 596 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2592 1
a2592 1
#line 2474 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2595 2
a2596 2
  case 89:
#line 597 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2598 1
a2598 1
#line 2480 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2601 2
a2602 2
  case 90:
#line 598 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2604 1
a2604 1
#line 2486 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2607 2
a2608 2
  case 91:
#line 599 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2610 1
a2610 1
#line 2492 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2613 2
a2614 2
  case 92:
#line 600 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2616 1
a2616 1
#line 2498 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2619 2
a2620 2
  case 93:
#line 601 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2622 1
a2622 1
#line 2504 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2625 2
a2626 2
  case 94:
#line 602 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2628 1
a2628 1
#line 2510 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2631 2
a2632 2
  case 95:
#line 603 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2634 1
a2634 1
#line 2516 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2637 2
a2638 2
  case 96:
#line 604 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2640 1
a2640 1
#line 2522 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2643 2
a2644 2
  case 97:
#line 605 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2646 1
a2646 1
#line 2528 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2649 2
a2650 2
  case 98:
#line 606 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2652 1
a2652 1
#line 2534 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2655 2
a2656 2
  case 99:
#line 607 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2658 1
a2658 1
#line 2540 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2661 2
a2662 2
  case 100:
#line 608 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2664 1
a2664 1
#line 2546 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2667 2
a2668 2
  case 101:
#line 609 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2670 1
a2670 1
#line 2552 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2673 2
a2674 2
  case 102:
#line 610 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2676 1
a2676 1
#line 2558 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2679 2
a2680 2
  case 103:
#line 611 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2682 1
a2682 1
#line 2564 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2685 2
a2686 2
  case 104:
#line 612 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2688 1
a2688 1
#line 2570 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2691 2
a2692 2
  case 105:
#line 613 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2694 1
a2694 1
#line 2576 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2697 2
a2698 2
  case 106:
#line 614 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2700 1
a2700 1
#line 2582 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2703 2
a2704 2
  case 107:
#line 615 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2706 1
a2706 1
#line 2588 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2709 2
a2710 2
  case 108:
#line 616 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2712 1
a2712 1
#line 2594 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2715 2
a2716 2
  case 109:
#line 617 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2718 1
a2718 1
#line 2600 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2721 2
a2722 2
  case 110:
#line 618 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2724 1
a2724 1
#line 2606 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2727 2
a2728 2
  case 111:
#line 619 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2730 1
a2730 1
#line 2612 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2733 2
a2734 2
  case 112:
#line 620 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2736 1
a2736 1
#line 2618 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2739 2
a2740 2
  case 113:
#line 621 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2742 1
a2742 1
#line 2624 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2745 2
a2746 2
  case 114:
#line 622 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2748 1
a2748 1
#line 2630 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2751 2
a2752 2
  case 115:
#line 623 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2754 1
a2754 1
#line 2636 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2757 5
d2763 8
a2770 1
#line 2640 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d3005 1
a3005 1
#line 626 "glcpp/glcpp-parse.y" /* yacc.c:1906  */
d3059 19
d3335 10
a3344 8

		if (node_a->token->type == SPACE) {
			node_a = node_a->next;
			continue;
		}

		if (node_b->token->type == SPACE) {
			node_b = node_b->next;
d3424 8
a3431 2
	case COMMA_FINAL:
		ralloc_asprintf_rewrite_tail (out, len, ",");
d3438 1
d3614 1
a3614 1
	parser->lexing_if = 0;
d3616 3
d3625 1
d3771 124
d3899 3
d3906 2
a3907 1
				   token_list_t *list)
d3915 1
a3915 1
	_glcpp_parser_expand_token_list (parser, list);
d3978 3
d3985 2
a3986 2
			       token_node_t **last)
			       
d4055 2
a4056 1
								 expanded_argument);
d4096 3
d4103 2
a4104 1
			   token_node_t **last)
a4111 8
		/* We change any COMMA into a COMMA_FINAL to prevent
		 * it being mistaken for an argument separator
		 * later. */
		if (token->type == ',') {
			token->type = COMMA_FINAL;
			token->value.ival = COMMA_FINAL;
		}

d4163 1
a4163 1
	return _glcpp_parser_expand_function (parser, node, last);
d4222 17
a4238 1
 * 'list' itself;
d4242 2
a4243 1
				 token_list_t *list)
d4258 3
d4266 1
a4266 1
		expansion = _glcpp_parser_expand_node (parser, node, &last);
d4270 5
d4327 1
a4327 1
	_glcpp_parser_expand_token_list (parser, list);
d4388 4
d4424 1
d4428 6
d4496 5
a4500 5
		else if (ret == HASH_DEFINE ||
			   ret == HASH_UNDEF || ret == HASH_IF ||
			   ret == HASH_IFDEF || ret == HASH_IFNDEF ||
			   ret == HASH_ELIF || ret == HASH_ELSE ||
			   ret == HASH_ENDIF || ret == HASH)
d4593 1
a4593 1
		glcpp_error (loc, parser, "%s without #if\n", type);
d4646 2
d4667 3
d4673 3
d4714 3
d4737 3
@


1.5
log
@Merge Mesa 9.2.1
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.7.12-4996.  */
d4 3
a6 3
   
      Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
   
d11 1
a11 1
   
d16 1
a16 1
   
d29 1
a29 1
   
d47 1
a47 1
#define YYBISON_VERSION "2.7.12-4996"
a65 2
#define yylval          glcpp_parser_lval
#define yychar          glcpp_parser_char
d68 1
a68 1
#define yylloc          glcpp_parser_lloc
d71 1
a71 2
/* Line 371 of yacc.c  */
#line 1 "glcpp/glcpp-parse.y"
d209 1
a209 1
                                         const char *ident);
d221 1
a221 2
/* Line 371 of yacc.c  */
#line 226 "glcpp/glcpp-parse.c"
d223 1
a223 1
# ifndef YY_NULL
d225 1
a225 1
#   define YY_NULL nullptr
d227 1
a227 1
#   define YY_NULL 0
d243 1
a243 1
/* Enabling traces.  */
d251 1
a251 1
/* Tokens.  */
d254 38
a291 39
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     COMMA_FINAL = 258,
     DEFINED = 259,
     ELIF_EXPANDED = 260,
     HASH = 261,
     HASH_DEFINE = 262,
     FUNC_IDENTIFIER = 263,
     OBJ_IDENTIFIER = 264,
     HASH_ELIF = 265,
     HASH_ELSE = 266,
     HASH_ENDIF = 267,
     HASH_IF = 268,
     HASH_IFDEF = 269,
     HASH_IFNDEF = 270,
     HASH_LINE = 271,
     HASH_UNDEF = 272,
     HASH_VERSION = 273,
     IDENTIFIER = 274,
     IF_EXPANDED = 275,
     INTEGER = 276,
     INTEGER_STRING = 277,
     LINE_EXPANDED = 278,
     NEWLINE = 279,
     OTHER = 280,
     PLACEHOLDER = 281,
     SPACE = 282,
     PASTE = 283,
     OR = 284,
     AND = 285,
     NOT_EQUAL = 286,
     EQUAL = 287,
     GREATER_OR_EQUAL = 288,
     LESS_OR_EQUAL = 289,
     RIGHT_SHIFT = 290,
     LEFT_SHIFT = 291,
     UNARY = 292
   };
d294 1
d296 1
a296 6
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

d298 2
a299 1
typedef struct YYLTYPE
d305 1
a305 2
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
d311 1
a311 8
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int glcpp_parser_parse (void *YYPARSE_PARAM);
#else
int glcpp_parser_parse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
a312 4
#else
int glcpp_parser_parse ();
#endif
#endif /* ! YYPARSE_PARAM */
d318 1
a318 2
/* Line 390 of yacc.c  */
#line 340 "glcpp/glcpp-parse.c"
d332 1
a332 2
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a333 2
#else
typedef short int yytype_int8;
d353 1
a353 2
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
d375 24
a398 5
#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5))
#  define __attribute__(Spec) /* empty */
d409 8
a416 4

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
d418 5
a422 8
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
d424 2
a425 3
{
  return yyi;
}
d428 1
d446 1
a446 2
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
d458 2
a459 2
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
d475 1
a475 1
	     && (defined YYFREE || defined free)))
d483 1
a483 2
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
d489 1
a489 2
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
d499 2
a500 2
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
d526 10
a535 10
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))
d554 1
a554 1
      while (YYID (0))
d562 1
a562 1
#define YYLAST   670
d567 1
a567 1
#define YYNNTS  19
d569 3
a571 3
#define YYNRULES  108
/* YYNRULES -- Number of states.  */
#define YYNSTATES  174
d573 2
a574 1
/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
d578 1
a578 1
#define YYTRANSLATE(YYX)						\
d581 2
a582 1
/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
d618 1
a618 55
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     4,     7,     9,    13,    15,    17,    20,
      24,    28,    32,    37,    42,    49,    57,    61,    65,    68,
      73,    78,    82,    85,    86,    90,    91,    95,    99,   104,
     107,   109,   111,   113,   115,   119,   123,   127,   131,   135,
     139,   143,   147,   151,   155,   159,   163,   167,   171,   175,
     179,   183,   187,   190,   193,   196,   199,   203,   205,   209,
     211,   214,   217,   218,   220,   221,   223,   226,   231,   233,
     235,   238,   240,   243,   245,   247,   249,   251,   253,   255,
     257,   259,   261,   263,   265,   267,   269,   271,   273,   275,
     277,   279,   281,   283,   285,   287,   289,   291,   293,   295,
     297,   299,   301,   303,   305,   307,   309,   311,   313
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int8 yyrhs[] =
{
      61,     0,    -1,    -1,    61,    62,    -1,    64,    -1,    16,
      76,    24,    -1,    70,    -1,    63,    -1,     6,    71,    -1,
      20,    68,    24,    -1,     5,    68,    24,    -1,    23,    67,
      24,    -1,    23,    67,    67,    24,    -1,     7,     9,    72,
      24,    -1,     7,     8,    48,    49,    72,    24,    -1,     7,
       8,    48,    69,    49,    72,    24,    -1,    17,    19,    24,
      -1,    13,    75,    24,    -1,    13,    24,    -1,    14,    19,
      73,    24,    -1,    15,    19,    73,    24,    -1,    10,    75,
      24,    -1,    10,    24,    -1,    -1,    11,    65,    24,    -1,
      -1,    12,    66,    24,    -1,    18,    67,    24,    -1,    18,
      67,    19,    24,    -1,     6,    24,    -1,    22,    -1,    21,
      -1,    67,    -1,    19,    -1,    68,    29,    68,    -1,    68,
      30,    68,    -1,    68,    31,    68,    -1,    68,    32,    68,
      -1,    68,    33,    68,    -1,    68,    34,    68,    -1,    68,
      35,    68,    -1,    68,    38,    68,    -1,    68,    39,    68,
      -1,    68,    37,    68,    -1,    68,    36,    68,    -1,    68,
      40,    68,    -1,    68,    41,    68,    -1,    68,    43,    68,
      -1,    68,    42,    68,    -1,    68,    46,    68,    -1,    68,
      45,    68,    -1,    68,    44,    68,    -1,    50,    68,    -1,
      51,    68,    -1,    43,    68,    -1,    42,    68,    -1,    48,
      68,    49,    -1,    19,    -1,    69,    52,    19,    -1,    24,
      -1,    76,    24,    -1,    76,    24,    -1,    -1,    76,    -1,
      -1,    76,    -1,     4,    19,    -1,     4,    48,    19,    49,
      -1,    77,    -1,    74,    -1,    75,    74,    -1,    77,    -1,
      76,    77,    -1,    19,    -1,    22,    -1,    78,    -1,    25,
      -1,    27,    -1,    53,    -1,    54,    -1,    48,    -1,    49,
      -1,    55,    -1,    56,    -1,    57,    -1,    33,    -1,    44,
      -1,    42,    -1,    43,    -1,    51,    -1,    50,    -1,    45,
      -1,    46,    -1,    41,    -1,    40,    -1,    36,    -1,    37,
      -1,    39,    -1,    38,    -1,    35,    -1,    34,    -1,    32,
      -1,    31,    -1,    30,    -1,    29,    -1,    58,    -1,    52,
      -1,    59,    -1,    28,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
d621 12
a632 11
       0,   188,   188,   190,   194,   197,   205,   210,   211,   215,
     218,   221,   229,   242,   245,   248,   251,   259,   279,   289,
     294,   299,   319,   334,   334,   337,   337,   340,   343,   346,
     350,   359,   364,   365,   370,   373,   376,   379,   382,   385,
     388,   391,   394,   397,   400,   403,   406,   409,   412,   415,
     423,   431,   434,   437,   440,   443,   446,   452,   457,   465,
     466,   470,   476,   477,   480,   482,   489,   493,   497,   502,
     506,   513,   518,   525,   529,   533,   537,   541,   548,   549,
     550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
     560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,   574,   575,   576,   577,   578
d647 2
a648 2
  "OR", "AND", "'|'", "'^'", "'&'", "NOT_EQUAL", "EQUAL", "'<'", "'>'",
  "GREATER_OR_EQUAL", "LESS_OR_EQUAL", "RIGHT_SHIFT", "LEFT_SHIFT", "'+'",
d651 5
a655 4
  "line", "expanded_line", "control_line", "$@@1", "$@@2",
  "integer_constant", "expression", "identifier_list", "text_line",
  "non_directive", "replacement_list", "junk", "conditional_token",
  "conditional_tokens", "pp_tokens", "preprocessing_token", "operator", YY_NULL
d660 2
a661 2
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
d673 9
a681 15
/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    60,    61,    61,    62,    62,    62,    62,    62,    63,
      63,    63,    63,    64,    64,    64,    64,    64,    64,    64,
      64,    64,    64,    65,    64,    66,    64,    64,    64,    64,
      67,    67,    68,    68,    68,    68,    68,    68,    68,    68,
      68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
      68,    68,    68,    68,    68,    68,    68,    69,    69,    70,
      70,    71,    72,    72,    73,    73,    74,    74,    74,    75,
      75,    76,    76,    77,    77,    77,    77,    77,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78
};
d683 3
a685 2
/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
d687 19
a705 11
       0,     2,     0,     2,     1,     3,     1,     1,     2,     3,
       3,     3,     4,     4,     6,     7,     3,     3,     2,     4,
       4,     3,     2,     0,     3,     0,     3,     3,     4,     2,
       1,     1,     1,     1,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     2,     2,     3,     1,     3,     1,
       2,     2,     0,     1,     0,     1,     2,     4,     1,     1,
       2,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1
d708 3
a710 3
/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
d713 10
a722 10
       2,     0,     1,     0,     0,     0,     0,    23,    25,     0,
       0,     0,     0,     0,     0,    73,     0,    74,     0,    59,
      76,    77,   108,   104,   103,   102,   101,    85,   100,    99,
      95,    96,    98,    97,    94,    93,    87,    88,    86,    91,
      92,    80,    81,    90,    89,   106,    78,    79,    82,    83,
      84,   105,   107,     3,     7,     4,     6,     0,    71,    75,
      33,    31,    30,     0,     0,     0,     0,     0,    32,     0,
      29,     8,     0,     0,    62,     0,    22,    69,     0,    68,
       0,     0,    18,     0,    64,    64,     0,     0,     0,     0,
       0,    60,    72,    55,    54,     0,    52,    53,    10,     0,
d724 8
a731 7
       0,     0,     0,     0,     0,     0,     0,    61,     0,     0,
      63,    66,     0,    21,    70,    24,    26,    17,     0,    65,
       0,     5,    16,     0,    27,     9,    11,     0,    56,    34,
      35,    36,    37,    38,    39,    40,    44,    43,    41,    42,
      45,    46,    48,    47,    51,    50,    49,    57,    62,     0,
      13,     0,    19,    20,    28,    12,     0,    62,     0,    67,
      14,     0,    58,    15
d734 2
a735 2
/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
d737 3
a739 2
      -1,     1,    53,    54,    55,    80,    81,    68,    69,   159,
      56,    71,   119,   128,    77,    78,   120,    58,    59
d742 2
a743 4
/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -151
static const yytype_int16 yypact[] =
d745 3
a747 18
    -151,   115,  -151,   492,    -9,   108,   158,  -151,  -151,   201,
      -8,    48,   451,    50,    97,  -151,   492,  -151,    97,  -151,
    -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,
    -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,
    -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,
    -151,  -151,  -151,  -151,  -151,  -151,  -151,   328,  -151,  -151,
    -151,  -151,  -151,   492,   492,   492,   492,   492,  -151,   515,
    -151,  -151,   369,   -41,   451,    38,  -151,  -151,   244,  -151,
      47,    51,  -151,   287,   451,   451,   410,    57,   -10,   538,
      52,  -151,  -151,  -151,  -151,   487,  -151,  -151,  -151,   492,
     492,   492,   492,   492,   492,   492,   492,   492,   492,   492,
     492,   492,   492,   492,   492,   492,   492,  -151,    19,    59,
     451,  -151,    68,  -151,  -151,  -151,  -151,  -151,   100,   451,
     112,  -151,  -151,   117,  -151,  -151,  -151,   151,  -151,   555,
     571,   586,   600,   613,   624,   624,    18,    18,    18,    18,
      64,    64,    67,    67,  -151,  -151,  -151,  -151,   451,    30,
    -151,   127,  -151,  -151,  -151,  -151,   154,   451,   160,  -151,
    -151,   157,  -151,  -151
d750 3
a752 11
/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -151,  -151,  -151,  -151,  -151,  -151,  -151,   -12,   -11,  -151,
    -151,  -151,  -150,    99,   -13,   209,     0,    -6,  -151
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1
d755 18
a772 32
      79,    57,    88,    79,    72,    89,    90,   118,   166,   133,
      15,    84,    86,    17,   134,    70,    20,   171,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,   157,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    92,    93,    94,    95,    96,    97,   121,   110,   111,
     112,   113,   114,   115,   116,   124,    92,    85,   158,    87,
     124,   125,    79,    61,    62,   126,   136,    79,   137,   167,
      92,   132,   168,   160,   129,   129,   122,   161,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   112,   113,   114,   115,
     116,   114,   115,   116,    92,     2,    73,    74,    61,    62,
       3,     4,     5,    92,   162,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,   163,    17,    18,    19,
      20,   164,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    75,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,   165,   169,    15,   170,   172,
      17,   173,    76,    20,   130,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    75,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    83,     0,
      15,     0,     0,    17,     0,    82,    20,     0,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    75,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,     0,     0,    15,     0,     0,    17,     0,   123,    20,
       0,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    75,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,     0,     0,    15,     0,     0,    17,
       0,   127,    20,     0,    21,    22,    23,    24,    25,    26,
d774 16
a789 7
      37,    38,    39,    40,     0,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    15,     0,     0,
      17,     0,    91,    20,     0,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,     0,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    15,     0,
       0,    17,     0,   117,    20,     0,    21,    22,    23,    24,
d793 1
a793 1
       0,     0,    17,     0,   131,    20,     0,    21,    22,    23,
d797 1
a797 1
      15,     0,     0,    17,     0,     0,    20,     0,    21,    22,
d801 17
a817 1
      52,    60,     0,    61,    62,     0,    99,   100,   101,   102,
d819 2
a820 9
     113,   114,   115,   116,    63,    64,   138,     0,     0,    98,
      65,     0,    66,    67,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   135,     0,     0,     0,     0,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   102,   103,
d822 3
a824 5
     114,   115,   116,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116
a826 6
#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-151)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

d829 9
a837 9
       6,     1,    14,     9,     4,    16,    18,    48,   158,    19,
      19,    19,    12,    22,    24,    24,    25,   167,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    19,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    57,    63,    64,    65,    66,    67,    19,    40,    41,
      42,    43,    44,    45,    46,    78,    72,    19,    49,    19,
      83,    24,    78,    21,    22,    24,    24,    83,    90,    49,
      86,    24,    52,    24,    84,    85,    48,    19,    99,   100,
d839 8
a846 22
     111,   112,   113,   114,   115,   116,    42,    43,    44,    45,
      46,    44,    45,    46,   120,     0,     8,     9,    21,    22,
       5,     6,     7,   129,    24,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    24,    22,    23,    24,
      25,    24,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,     4,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    24,    49,    19,    24,    19,
      22,    24,    24,    25,    85,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,     4,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,     9,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    -1,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,     4,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      -1,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,     4,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    -1,    27,    28,    29,    30,    31,    32,
d848 16
a863 7
      43,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    19,    -1,    -1,
      22,    -1,    24,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    19,    -1,
      -1,    22,    -1,    24,    25,    -1,    27,    28,    29,    30,
d871 1
a871 1
      19,    -1,    -1,    22,    -1,    -1,    25,    -1,    27,    28,
d875 20
a894 4
      59,    19,    -1,    21,    22,    -1,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    42,    43,    49,    -1,    -1,    24,
      48,    -1,    50,    51,    29,    30,    31,    32,    33,    34,
d896 3
a898 12
      45,    46,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46
d901 2
a902 2
/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
d910 48
a957 13
      57,    58,    59,    62,    63,    64,    70,    76,    77,    78,
      19,    21,    22,    42,    43,    48,    50,    51,    67,    68,
      24,    71,    76,     8,     9,     4,    24,    74,    75,    77,
      65,    66,    24,    75,    19,    19,    76,    19,    67,    68,
      67,    24,    77,    68,    68,    68,    68,    68,    24,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    24,    48,    72,
      76,    19,    48,    24,    74,    24,    24,    24,    73,    76,
      73,    24,    24,    19,    24,    24,    24,    67,    49,    68,
      68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
      68,    68,    68,    68,    68,    68,    68,    19,    49,    69,
      24,    19,    24,    24,    24,    24,    72,    49,    52,    49,
      24,    72,    19,    24
d960 10
a969 24
#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif
d986 3
a988 3
      YYERROR;							\
    }								\
while (YYID (0))
d991 2
a992 2
#define YYTERROR	1
#define YYERRCODE	256
d1002 1
a1002 1
      if (YYID (N))                                                     \
d1016 1
a1016 1
    while (YYID (0))
d1022 15
d1046 1
a1046 3
__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1048 6
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
d1054 1
a1054 1
      res += fprintf (yyo, "%d", yylocp->first_line);
d1056 1
a1056 1
        res += fprintf (yyo, ".%d", yylocp->first_column);
d1062 1
a1062 1
          res += fprintf (yyo, "-%d", yylocp->last_line);
d1064 1
a1064 1
            res += fprintf (yyo, ".%d", end_col);
d1067 1
a1067 1
        res += fprintf (yyo, "-%d", end_col);
d1081 10
a1090 6
/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, &yylloc, parser)
#endif
a1091 24
/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location, parser); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))
d1093 3
a1096 7
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1098 9
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, parser)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
    glcpp_parser_t *parser;
#endif
d1102 2
a1105 2
  YYUSE (yylocationp);
  YYUSE (parser);
a1108 2
# else
  YYUSE (yyoutput);
a1117 2
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1119 9
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp, parser)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
    glcpp_parser_t *parser;
#endif
d1121 2
a1122 4
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
a1134 2
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1136 6
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
d1147 5
a1151 5
# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))
a1157 2
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
d1159 1
a1159 9
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, glcpp_parser_t *parser)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule, parser)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
    glcpp_parser_t *parser;
#endif
d1161 1
a1163 1
  unsigned long int yylno = yyrline[yyrule];
d1165 1
a1165 1
	     yyrule - 1, yylno);
d1170 4
a1173 3
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       , parser);
d1178 5
a1182 5
# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule, parser); \
} while (YYID (0))
d1196 1
a1196 1
#ifndef	YYINITDEPTH
a1218 2
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1220 5
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
a1235 2
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1237 6
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
d1267 21
a1287 21
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
d1310 1
a1310 1
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
d1314 1
a1314 1
  const char *yyformat = YY_NULL;
a1321 4
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
d1371 1
a1371 1
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
a1437 3
/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1439 9
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp, parser)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
    glcpp_parser_t *parser;
#endif
a1443 1

d1448 1
d1450 1
a1459 13
#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1461 6
#else
int
yyparse (parser)
    glcpp_parser_t *parser;
#endif
#endif
d1467 1
a1467 9
#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
d1470 4
a1473 3
static YYSTYPE yyval_default;
# define YY_INITIAL_VALUE(Value) = Value
#endif
a1478 12
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

/* Location data for the lookahead symbol.  */
a1480 1

d1489 3
a1491 3
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.
d1551 1
a1551 2
/* Line 1570 of yacc.c  */
#line 155 "glcpp/glcpp-parse.y"
d1559 2
a1560 2
/* Line 1570 of yacc.c  */
#line 1748 "glcpp/glcpp-parse.c"
d1582 20
a1601 20
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
d1609 1
a1609 1
	goto yyexhaustedlab;
d1612 1
a1612 1
	yystacksize = YYMAXDEPTH;
d1615 8
a1622 8
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
d1624 2
a1625 2
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
d1635 1
a1635 1
		  (unsigned long int) yystacksize));
d1638 1
a1638 1
	YYABORT;
d1667 1
a1667 1
      yychar = YYLEX;
d1732 1
a1732 1
     `$$ = $1'.
d1747 1
a1747 2
/* Line 1787 of yacc.c  */
#line 194 "glcpp/glcpp-parse.y"
d1751 1
d1755 9
a1763 2
/* Line 1787 of yacc.c  */
#line 197 "glcpp/glcpp-parse.y"
d1765 1
d1770 1
a1770 1
							   LINE_EXPANDED, (yyvsp[(2) - (3)].token_list));
d1773 1
d1776 2
a1777 3
  case 6:
/* Line 1787 of yacc.c  */
#line 205 "glcpp/glcpp-parse.y"
d1779 1
a1779 1
		_glcpp_parser_print_expanded_token_list (parser, (yyvsp[(1) - (1)].token_list));
d1781 1
a1781 1
		ralloc_free ((yyvsp[(1) - (1)].token_list));
d1783 1
d1786 2
a1787 3
  case 9:
/* Line 1787 of yacc.c  */
#line 215 "glcpp/glcpp-parse.y"
d1789 1
a1789 1
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[(1) - (3)]), (yyvsp[(2) - (3)].ival));
d1791 1
d1794 2
a1795 3
  case 10:
/* Line 1787 of yacc.c  */
#line 218 "glcpp/glcpp-parse.y"
d1797 1
a1797 1
		_glcpp_parser_skip_stack_change_if (parser, & (yylsp[(1) - (3)]), "elif", (yyvsp[(2) - (3)].ival));
d1799 1
d1802 2
a1803 3
  case 11:
/* Line 1787 of yacc.c  */
#line 221 "glcpp/glcpp-parse.y"
d1806 1
a1806 1
		parser->new_line_number = (yyvsp[(2) - (3)].ival);
d1810 1
a1810 1
					      (yyvsp[(2) - (3)].ival));
d1812 1
d1815 2
a1816 3
  case 12:
/* Line 1787 of yacc.c  */
#line 229 "glcpp/glcpp-parse.y"
d1819 1
a1819 1
		parser->new_line_number = (yyvsp[(2) - (4)].ival);
d1821 1
a1821 1
		parser->new_source_number = (yyvsp[(3) - (4)].ival);
d1825 1
a1825 1
					      (yyvsp[(2) - (4)].ival), (yyvsp[(3) - (4)].ival));
d1827 1
d1830 18
a1847 3
  case 13:
/* Line 1787 of yacc.c  */
#line 242 "glcpp/glcpp-parse.y"
d1849 1
a1849 1
		_define_object_macro (parser, & (yylsp[(2) - (4)]), (yyvsp[(2) - (4)].str), (yyvsp[(3) - (4)].token_list));
d1851 1
d1854 2
a1855 3
  case 14:
/* Line 1787 of yacc.c  */
#line 245 "glcpp/glcpp-parse.y"
d1857 1
a1857 1
		_define_function_macro (parser, & (yylsp[(2) - (6)]), (yyvsp[(2) - (6)].str), NULL, (yyvsp[(5) - (6)].token_list));
d1859 1
d1862 2
a1863 3
  case 15:
/* Line 1787 of yacc.c  */
#line 248 "glcpp/glcpp-parse.y"
d1865 1
a1865 1
		_define_function_macro (parser, & (yylsp[(2) - (7)]), (yyvsp[(2) - (7)].str), (yyvsp[(4) - (7)].string_list), (yyvsp[(6) - (7)].token_list));
d1867 1
d1870 2
a1871 3
  case 16:
/* Line 1787 of yacc.c  */
#line 251 "glcpp/glcpp-parse.y"
d1873 1
a1873 1
		macro_t *macro = hash_table_find (parser->defines, (yyvsp[(2) - (3)].str));
d1875 1
a1875 1
			hash_table_remove (parser->defines, (yyvsp[(2) - (3)].str));
d1878 9
a1886 1
		ralloc_free ((yyvsp[(2) - (3)].str));
d1888 1
d1891 2
a1892 3
  case 17:
/* Line 1787 of yacc.c  */
#line 259 "glcpp/glcpp-parse.y"
d1905 1
a1905 1
							   IF_EXPANDED, (yyvsp[(2) - (3)].token_list));
d1909 1
a1909 1
			_glcpp_parser_skip_stack_push_if (parser, & (yylsp[(1) - (3)]), 0);
d1913 1
d1916 2
a1917 3
  case 18:
/* Line 1787 of yacc.c  */
#line 279 "glcpp/glcpp-parse.y"
d1924 1
a1924 1
			glcpp_error(& (yylsp[(1) - (2)]), parser, "#if with no expression");
d1926 1
a1926 1
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[(1) - (2)]), 0);
d1928 1
d1931 20
a1950 3
  case 19:
/* Line 1787 of yacc.c  */
#line 289 "glcpp/glcpp-parse.y"
d1952 1
a1952 3
		macro_t *macro = hash_table_find (parser->defines, (yyvsp[(2) - (4)].str));
		ralloc_free ((yyvsp[(2) - (4)].str));
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[(1) - (4)]), macro != NULL);
d1954 1
d1957 2
a1958 3
  case 20:
/* Line 1787 of yacc.c  */
#line 294 "glcpp/glcpp-parse.y"
d1960 3
a1962 3
		macro_t *macro = hash_table_find (parser->defines, (yyvsp[(2) - (4)].str));
		ralloc_free ((yyvsp[(2) - (4)].str));
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[(1) - (4)]), macro == NULL);
d1964 1
d1967 2
a1968 3
  case 21:
/* Line 1787 of yacc.c  */
#line 299 "glcpp/glcpp-parse.y"
d1981 6
a1986 1
							   ELIF_EXPANDED, (yyvsp[(2) - (3)].token_list));
d1990 1
a1990 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[(1) - (3)]),
d1994 1
d1997 2
a1998 3
  case 22:
/* Line 1787 of yacc.c  */
#line 319 "glcpp/glcpp-parse.y"
d2005 6
a2010 1
			glcpp_error(& (yylsp[(1) - (2)]), parser, "#elif with no expression");
d2014 1
a2014 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[(1) - (2)]),
d2016 19
a2034 1
			glcpp_warning(& (yylsp[(1) - (2)]), parser, "ignoring illegal #elif without expression");
d2037 1
d2040 2
a2041 3
  case 23:
/* Line 1787 of yacc.c  */
#line 334 "glcpp/glcpp-parse.y"
d2043 1
a2043 1
		_glcpp_parser_skip_stack_change_if (parser, & (yylsp[(1) - (1)]), "else", 1);
d2045 1
d2048 2
a2049 3
  case 25:
/* Line 1787 of yacc.c  */
#line 337 "glcpp/glcpp-parse.y"
d2051 4
a2054 1
		_glcpp_parser_skip_stack_pop (parser, & (yylsp[(1) - (1)]));
d2056 1
d2059 2
a2060 3
  case 27:
/* Line 1787 of yacc.c  */
#line 340 "glcpp/glcpp-parse.y"
d2062 4
a2065 1
		_glcpp_parser_handle_version_declaration(parser, (yyvsp[(2) - (3)].ival), NULL);
d2067 1
d2070 2
a2071 3
  case 28:
/* Line 1787 of yacc.c  */
#line 343 "glcpp/glcpp-parse.y"
d2073 1
a2073 1
		_glcpp_parser_handle_version_declaration(parser, (yyvsp[(2) - (4)].ival), (yyvsp[(3) - (4)].str));
d2075 1
d2078 2
a2079 3
  case 30:
/* Line 1787 of yacc.c  */
#line 350 "glcpp/glcpp-parse.y"
d2081 4
a2084 4
		if (strlen ((yyvsp[(1) - (1)].str)) >= 3 && strncmp ((yyvsp[(1) - (1)].str), "0x", 2) == 0) {
			(yyval.ival) = strtoll ((yyvsp[(1) - (1)].str) + 2, NULL, 16);
		} else if ((yyvsp[(1) - (1)].str)[0] == '0') {
			(yyval.ival) = strtoll ((yyvsp[(1) - (1)].str), NULL, 8);
d2086 1
a2086 1
			(yyval.ival) = strtoll ((yyvsp[(1) - (1)].str), NULL, 10);
d2089 1
d2092 2
a2093 3
  case 31:
/* Line 1787 of yacc.c  */
#line 359 "glcpp/glcpp-parse.y"
d2095 1
a2095 1
		(yyval.ival) = (yyvsp[(1) - (1)].ival);
d2097 1
d2100 2
a2101 3
  case 33:
/* Line 1787 of yacc.c  */
#line 365 "glcpp/glcpp-parse.y"
d2104 1
a2104 1
			glcpp_error(& (yylsp[(1) - (1)]), parser, "undefined macro %s in expression (illegal in GLES)", (yyvsp[(1) - (1)].str));
d2107 1
d2110 2
a2111 3
  case 34:
/* Line 1787 of yacc.c  */
#line 370 "glcpp/glcpp-parse.y"
d2113 1
a2113 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) || (yyvsp[(3) - (3)].ival);
d2115 1
d2118 2
a2119 3
  case 35:
/* Line 1787 of yacc.c  */
#line 373 "glcpp/glcpp-parse.y"
d2121 1
a2121 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) && (yyvsp[(3) - (3)].ival);
d2123 1
d2126 2
a2127 3
  case 36:
/* Line 1787 of yacc.c  */
#line 376 "glcpp/glcpp-parse.y"
d2129 1
a2129 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival);
d2131 1
d2134 2
a2135 3
  case 37:
/* Line 1787 of yacc.c  */
#line 379 "glcpp/glcpp-parse.y"
d2137 1
a2137 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) ^ (yyvsp[(3) - (3)].ival);
d2139 1
d2142 2
a2143 3
  case 38:
/* Line 1787 of yacc.c  */
#line 382 "glcpp/glcpp-parse.y"
d2145 1
a2145 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) & (yyvsp[(3) - (3)].ival);
d2147 1
d2150 2
a2151 3
  case 39:
/* Line 1787 of yacc.c  */
#line 385 "glcpp/glcpp-parse.y"
d2153 1
a2153 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) != (yyvsp[(3) - (3)].ival);
d2155 1
d2158 2
a2159 3
  case 40:
/* Line 1787 of yacc.c  */
#line 388 "glcpp/glcpp-parse.y"
d2161 1
a2161 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) == (yyvsp[(3) - (3)].ival);
d2163 1
d2166 2
a2167 3
  case 41:
/* Line 1787 of yacc.c  */
#line 391 "glcpp/glcpp-parse.y"
d2169 1
a2169 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) >= (yyvsp[(3) - (3)].ival);
d2171 1
d2174 2
a2175 3
  case 42:
/* Line 1787 of yacc.c  */
#line 394 "glcpp/glcpp-parse.y"
d2177 1
a2177 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) <= (yyvsp[(3) - (3)].ival);
d2179 1
d2182 2
a2183 3
  case 43:
/* Line 1787 of yacc.c  */
#line 397 "glcpp/glcpp-parse.y"
d2185 1
a2185 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) > (yyvsp[(3) - (3)].ival);
d2187 1
d2190 2
a2191 3
  case 44:
/* Line 1787 of yacc.c  */
#line 400 "glcpp/glcpp-parse.y"
d2193 1
a2193 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) < (yyvsp[(3) - (3)].ival);
d2195 1
d2198 2
a2199 3
  case 45:
/* Line 1787 of yacc.c  */
#line 403 "glcpp/glcpp-parse.y"
d2201 1
a2201 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) >> (yyvsp[(3) - (3)].ival);
d2203 1
d2206 2
a2207 3
  case 46:
/* Line 1787 of yacc.c  */
#line 406 "glcpp/glcpp-parse.y"
d2209 1
a2209 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) << (yyvsp[(3) - (3)].ival);
d2211 1
d2214 2
a2215 3
  case 47:
/* Line 1787 of yacc.c  */
#line 409 "glcpp/glcpp-parse.y"
d2217 1
a2217 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) - (yyvsp[(3) - (3)].ival);
d2219 1
d2222 2
a2223 3
  case 48:
/* Line 1787 of yacc.c  */
#line 412 "glcpp/glcpp-parse.y"
d2225 1
a2225 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) + (yyvsp[(3) - (3)].ival);
d2227 1
d2230 2
a2231 3
  case 49:
/* Line 1787 of yacc.c  */
#line 415 "glcpp/glcpp-parse.y"
d2233 2
a2234 2
		if ((yyvsp[(3) - (3)].ival) == 0) {
			yyerror (& (yylsp[(1) - (3)]), parser,
d2237 1
a2237 1
			(yyval.ival) = (yyvsp[(1) - (3)].ival) % (yyvsp[(3) - (3)].ival);
d2240 1
d2243 2
a2244 3
  case 50:
/* Line 1787 of yacc.c  */
#line 423 "glcpp/glcpp-parse.y"
d2246 2
a2247 2
		if ((yyvsp[(3) - (3)].ival) == 0) {
			yyerror (& (yylsp[(1) - (3)]), parser,
d2250 1
a2250 1
			(yyval.ival) = (yyvsp[(1) - (3)].ival) / (yyvsp[(3) - (3)].ival);
d2253 1
d2256 2
a2257 3
  case 51:
/* Line 1787 of yacc.c  */
#line 431 "glcpp/glcpp-parse.y"
d2259 1
a2259 1
		(yyval.ival) = (yyvsp[(1) - (3)].ival) * (yyvsp[(3) - (3)].ival);
d2261 1
d2264 2
a2265 3
  case 52:
/* Line 1787 of yacc.c  */
#line 434 "glcpp/glcpp-parse.y"
d2267 1
a2267 1
		(yyval.ival) = ! (yyvsp[(2) - (2)].ival);
d2269 1
d2272 2
a2273 3
  case 53:
/* Line 1787 of yacc.c  */
#line 437 "glcpp/glcpp-parse.y"
d2275 1
a2275 1
		(yyval.ival) = ~ (yyvsp[(2) - (2)].ival);
d2277 1
d2280 2
a2281 3
  case 54:
/* Line 1787 of yacc.c  */
#line 440 "glcpp/glcpp-parse.y"
d2283 1
a2283 1
		(yyval.ival) = - (yyvsp[(2) - (2)].ival);
d2285 1
d2288 2
a2289 3
  case 55:
/* Line 1787 of yacc.c  */
#line 443 "glcpp/glcpp-parse.y"
d2291 1
a2291 1
		(yyval.ival) = + (yyvsp[(2) - (2)].ival);
d2293 1
d2296 2
a2297 3
  case 56:
/* Line 1787 of yacc.c  */
#line 446 "glcpp/glcpp-parse.y"
d2299 1
a2299 1
		(yyval.ival) = (yyvsp[(2) - (3)].ival);
d2301 1
d2304 2
a2305 3
  case 57:
/* Line 1787 of yacc.c  */
#line 452 "glcpp/glcpp-parse.y"
d2308 2
a2309 2
		_string_list_append_item ((yyval.string_list), (yyvsp[(1) - (1)].str));
		ralloc_steal ((yyval.string_list), (yyvsp[(1) - (1)].str));
d2311 1
d2314 2
a2315 3
  case 58:
/* Line 1787 of yacc.c  */
#line 457 "glcpp/glcpp-parse.y"
d2317 3
a2319 3
		(yyval.string_list) = (yyvsp[(1) - (3)].string_list);	
		_string_list_append_item ((yyval.string_list), (yyvsp[(3) - (3)].str));
		ralloc_steal ((yyval.string_list), (yyvsp[(3) - (3)].str));
d2321 1
d2324 2
a2325 3
  case 59:
/* Line 1787 of yacc.c  */
#line 465 "glcpp/glcpp-parse.y"
d2327 1
d2330 2
a2331 3
  case 61:
/* Line 1787 of yacc.c  */
#line 470 "glcpp/glcpp-parse.y"
d2333 1
a2333 1
		yyerror (& (yylsp[(1) - (2)]), parser, "Invalid tokens after #");
d2335 1
d2338 2
a2339 3
  case 62:
/* Line 1787 of yacc.c  */
#line 476 "glcpp/glcpp-parse.y"
d2341 1
d2344 2
a2345 3
  case 65:
/* Line 1787 of yacc.c  */
#line 482 "glcpp/glcpp-parse.y"
d2347 1
a2347 1
		glcpp_warning(&(yylsp[(1) - (1)]), parser, "extra tokens at end of directive");
d2349 1
d2352 2
a2353 3
  case 66:
/* Line 1787 of yacc.c  */
#line 489 "glcpp/glcpp-parse.y"
d2355 1
a2355 1
		int v = hash_table_find (parser->defines, (yyvsp[(2) - (2)].str)) ? 1 : 0;
d2358 1
d2361 2
a2362 3
  case 67:
/* Line 1787 of yacc.c  */
#line 493 "glcpp/glcpp-parse.y"
d2364 1
a2364 1
		int v = hash_table_find (parser->defines, (yyvsp[(3) - (4)].str)) ? 1 : 0;
d2367 1
d2370 2
a2371 3
  case 69:
/* Line 1787 of yacc.c  */
#line 502 "glcpp/glcpp-parse.y"
d2374 1
a2374 1
		_token_list_append ((yyval.token_list), (yyvsp[(1) - (1)].token));
d2376 1
d2379 2
a2380 3
  case 70:
/* Line 1787 of yacc.c  */
#line 506 "glcpp/glcpp-parse.y"
d2382 2
a2383 2
		(yyval.token_list) = (yyvsp[(1) - (2)].token_list);
		_token_list_append ((yyval.token_list), (yyvsp[(2) - (2)].token));
d2385 1
d2388 2
a2389 3
  case 71:
/* Line 1787 of yacc.c  */
#line 513 "glcpp/glcpp-parse.y"
d2393 1
a2393 1
		_token_list_append ((yyval.token_list), (yyvsp[(1) - (1)].token));
d2395 1
d2398 2
a2399 3
  case 72:
/* Line 1787 of yacc.c  */
#line 518 "glcpp/glcpp-parse.y"
d2401 2
a2402 2
		(yyval.token_list) = (yyvsp[(1) - (2)].token_list);
		_token_list_append ((yyval.token_list), (yyvsp[(2) - (2)].token));
d2404 1
d2407 2
a2408 3
  case 73:
/* Line 1787 of yacc.c  */
#line 525 "glcpp/glcpp-parse.y"
d2410 1
a2410 1
		(yyval.token) = _token_create_str (parser, IDENTIFIER, (yyvsp[(1) - (1)].str));
d2413 1
d2416 2
a2417 3
  case 74:
/* Line 1787 of yacc.c  */
#line 529 "glcpp/glcpp-parse.y"
d2419 1
a2419 1
		(yyval.token) = _token_create_str (parser, INTEGER_STRING, (yyvsp[(1) - (1)].str));
d2422 1
d2425 2
a2426 3
  case 75:
/* Line 1787 of yacc.c  */
#line 533 "glcpp/glcpp-parse.y"
d2428 1
a2428 1
		(yyval.token) = _token_create_ival (parser, (yyvsp[(1) - (1)].ival), (yyvsp[(1) - (1)].ival));
d2431 1
d2434 2
a2435 3
  case 76:
/* Line 1787 of yacc.c  */
#line 537 "glcpp/glcpp-parse.y"
d2437 1
a2437 1
		(yyval.token) = _token_create_str (parser, OTHER, (yyvsp[(1) - (1)].str));
d2440 1
d2443 2
a2444 3
  case 77:
/* Line 1787 of yacc.c  */
#line 541 "glcpp/glcpp-parse.y"
d2449 1
d2452 2
a2453 3
  case 78:
/* Line 1787 of yacc.c  */
#line 548 "glcpp/glcpp-parse.y"
d2455 1
d2458 2
a2459 3
  case 79:
/* Line 1787 of yacc.c  */
#line 549 "glcpp/glcpp-parse.y"
d2461 1
d2464 2
a2465 3
  case 80:
/* Line 1787 of yacc.c  */
#line 550 "glcpp/glcpp-parse.y"
d2467 1
d2470 2
a2471 3
  case 81:
/* Line 1787 of yacc.c  */
#line 551 "glcpp/glcpp-parse.y"
d2473 1
d2476 2
a2477 3
  case 82:
/* Line 1787 of yacc.c  */
#line 552 "glcpp/glcpp-parse.y"
d2479 1
d2482 2
a2483 3
  case 83:
/* Line 1787 of yacc.c  */
#line 553 "glcpp/glcpp-parse.y"
d2485 1
d2488 2
a2489 3
  case 84:
/* Line 1787 of yacc.c  */
#line 554 "glcpp/glcpp-parse.y"
d2491 1
d2494 2
a2495 3
  case 85:
/* Line 1787 of yacc.c  */
#line 555 "glcpp/glcpp-parse.y"
d2497 1
d2500 2
a2501 3
  case 86:
/* Line 1787 of yacc.c  */
#line 556 "glcpp/glcpp-parse.y"
d2503 1
d2506 2
a2507 3
  case 87:
/* Line 1787 of yacc.c  */
#line 557 "glcpp/glcpp-parse.y"
d2509 1
d2512 2
a2513 3
  case 88:
/* Line 1787 of yacc.c  */
#line 558 "glcpp/glcpp-parse.y"
d2515 1
d2518 2
a2519 3
  case 89:
/* Line 1787 of yacc.c  */
#line 559 "glcpp/glcpp-parse.y"
d2521 1
d2524 2
a2525 3
  case 90:
/* Line 1787 of yacc.c  */
#line 560 "glcpp/glcpp-parse.y"
d2527 1
d2530 2
a2531 3
  case 91:
/* Line 1787 of yacc.c  */
#line 561 "glcpp/glcpp-parse.y"
d2533 1
d2536 2
a2537 3
  case 92:
/* Line 1787 of yacc.c  */
#line 562 "glcpp/glcpp-parse.y"
d2539 1
d2542 2
a2543 3
  case 93:
/* Line 1787 of yacc.c  */
#line 563 "glcpp/glcpp-parse.y"
d2545 1
d2548 2
a2549 3
  case 94:
/* Line 1787 of yacc.c  */
#line 564 "glcpp/glcpp-parse.y"
d2551 1
d2554 2
a2555 3
  case 95:
/* Line 1787 of yacc.c  */
#line 565 "glcpp/glcpp-parse.y"
d2557 1
d2560 2
a2561 3
  case 96:
/* Line 1787 of yacc.c  */
#line 566 "glcpp/glcpp-parse.y"
d2563 1
d2566 2
a2567 3
  case 97:
/* Line 1787 of yacc.c  */
#line 567 "glcpp/glcpp-parse.y"
d2569 1
d2572 2
a2573 3
  case 98:
/* Line 1787 of yacc.c  */
#line 568 "glcpp/glcpp-parse.y"
d2575 1
d2578 2
a2579 3
  case 99:
/* Line 1787 of yacc.c  */
#line 569 "glcpp/glcpp-parse.y"
d2581 1
d2584 2
a2585 3
  case 100:
/* Line 1787 of yacc.c  */
#line 570 "glcpp/glcpp-parse.y"
d2587 1
d2590 2
a2591 3
  case 101:
/* Line 1787 of yacc.c  */
#line 571 "glcpp/glcpp-parse.y"
d2593 1
d2596 2
a2597 3
  case 102:
/* Line 1787 of yacc.c  */
#line 572 "glcpp/glcpp-parse.y"
d2599 1
d2602 2
a2603 3
  case 103:
/* Line 1787 of yacc.c  */
#line 573 "glcpp/glcpp-parse.y"
d2605 1
d2608 2
a2609 3
  case 104:
/* Line 1787 of yacc.c  */
#line 574 "glcpp/glcpp-parse.y"
d2611 1
d2614 2
a2615 3
  case 105:
/* Line 1787 of yacc.c  */
#line 575 "glcpp/glcpp-parse.y"
d2617 1
d2620 2
a2621 3
  case 106:
/* Line 1787 of yacc.c  */
#line 576 "glcpp/glcpp-parse.y"
d2623 1
d2626 2
a2627 3
  case 107:
/* Line 1787 of yacc.c  */
#line 577 "glcpp/glcpp-parse.y"
d2629 1
d2632 2
a2633 3
  case 108:
/* Line 1787 of yacc.c  */
#line 578 "glcpp/glcpp-parse.y"
d2635 1
d2639 1
a2639 2
/* Line 1787 of yacc.c  */
#line 2745 "glcpp/glcpp-parse.c"
d2662 1
a2662 1
  /* Now `shift' the result of the reduction.  Determine what state
d2677 3
a2679 3
/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
d2730 1
a2730 1
	 error, discard it.  */
d2733 5
a2737 5
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
d2739 5
a2743 5
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc, parser);
	  yychar = YYEMPTY;
	}
d2763 1
a2763 1
  /* Do not reclaim the symbols of the rule which action triggered
d2776 1
a2776 1
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */
d2782 9
a2790 9
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}
d2794 1
a2794 1
	YYABORT;
d2798 1
a2798 1
		  yystos[yystate], yyvsp, yylsp, parser);
d2854 1
a2854 1
  /* Do not reclaim the symbols of the rule which action triggered
d2861 1
a2861 1
		  yystos[*yyssp], yyvsp, yylsp, parser);
d2872 1
a2872 2
  /* Make sure YYID is used.  */
  return YYID (yyresult);
d2874 1
a2874 4


/* Line 2050 of yacc.c  */
#line 581 "glcpp/glcpp-parse.y"
d3445 1
a3445 1
glcpp_parser_create (const struct gl_extensions *extensions, int api)
a3447 1
	int language_version;
d3460 1
d3473 4
a3481 70
	parser->is_gles = false;

	/* Add pre-defined macros. */
	if (api == API_OPENGLES2) {
           parser->is_gles = true;
           add_builtin_define(parser, "GL_ES", 1);

           if (extensions != NULL) {
              if (extensions->OES_EGL_image_external)
                 add_builtin_define(parser, "GL_OES_EGL_image_external", 1);
           }
	} else {
	   add_builtin_define(parser, "GL_ARB_draw_buffers", 1);
	   add_builtin_define(parser, "GL_ARB_texture_rectangle", 1);

	   if (extensions != NULL) {
	      if (extensions->EXT_texture_array) {
	         add_builtin_define(parser, "GL_EXT_texture_array", 1);
	      }

	      if (extensions->ARB_fragment_coord_conventions)
	         add_builtin_define(parser, "GL_ARB_fragment_coord_conventions",
				    1);

	      if (extensions->ARB_explicit_attrib_location)
	         add_builtin_define(parser, "GL_ARB_explicit_attrib_location", 1);

	      if (extensions->ARB_shader_texture_lod)
	         add_builtin_define(parser, "GL_ARB_shader_texture_lod", 1);

	      if (extensions->ARB_draw_instanced)
	         add_builtin_define(parser, "GL_ARB_draw_instanced", 1);

	      if (extensions->ARB_conservative_depth) {
	         add_builtin_define(parser, "GL_AMD_conservative_depth", 1);
	         add_builtin_define(parser, "GL_ARB_conservative_depth", 1);
	      }

	      if (extensions->ARB_shader_bit_encoding)
	         add_builtin_define(parser, "GL_ARB_shader_bit_encoding", 1);

	      if (extensions->ARB_uniform_buffer_object)
	         add_builtin_define(parser, "GL_ARB_uniform_buffer_object", 1);

	      if (extensions->ARB_texture_cube_map_array)
	         add_builtin_define(parser, "GL_ARB_texture_cube_map_array", 1);

	      if (extensions->ARB_shading_language_packing)
	         add_builtin_define(parser, "GL_ARB_shading_language_packing", 1);

	      if (extensions->ARB_texture_multisample)
	         add_builtin_define(parser, "GL_ARB_texture_multisample", 1);

	      if (extensions->ARB_texture_query_lod)
	         add_builtin_define(parser, "GL_ARB_texture_query_lod", 1);

	      if (extensions->ARB_gpu_shader5)
	         add_builtin_define(parser, "GL_ARB_gpu_shader5", 1);

	      if (extensions->AMD_vertex_shader_layer)
	         add_builtin_define(parser, "GL_AMD_vertex_shader_layer", 1);

	      if (extensions->ARB_shading_language_420pack)
	         add_builtin_define(parser, "GL_ARB_shading_language_420pack", 1);
	   }
	}

	language_version = 110;
	add_builtin_define(parser, "__VERSION__", language_version);

d4022 16
a4037 2
	/* According to the GLSL specification, macro names starting with "__"
	 * or "GL_" are reserved for future use.  So, don't allow them.
d4040 3
a4042 1
		glcpp_error (loc, parser, "Macro names containing \"__\" are reserved.\n");
d4256 1
d4295 2
a4296 1
                                         const char *es_identifier)
d4298 102
a4399 4
	macro_t *macro = hash_table_find (parser->defines, "__VERSION__");
	if (macro) {
		hash_table_remove (parser->defines, "__VERSION__");
		ralloc_free (macro);
a4400 1
	add_builtin_define (parser, "__VERSION__", version);
d4402 3
a4404 9
	/* If we didn't have a GLES context to begin with, (indicated
	 * by parser->api), then the version declaration here might
	 * indicate GLES. */
	if (! parser->is_gles &&
	    (version == 100 ||
	     (es_identifier && (strcmp(es_identifier, "es") == 0))))
	{
		parser->is_gles = true;
		add_builtin_define (parser, "GL_ES", 1);
d4418 23
a4440 4
	ralloc_asprintf_rewrite_tail (&parser->output, &parser->output_length,
                                      "#version %" PRIiMAX "%s%s", version,
                                      es_identifier ? " " : "",
                                      es_identifier ? es_identifier : "");
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.6.1.  */
d5 1
a5 1
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
d47 1
a47 1
#define YYBISON_VERSION "2.6.1"
d73 1
a73 1
/* Line 336 of yacc.c  */
d224 1
a224 1
/* Line 336 of yacc.c  */
d245 2
a246 2
#ifndef GLCPP_PARSER_SRC_GLSL_GLCPP_GLCPP_PARSE_H
# define GLCPP_PARSER_SRC_GLSL_GLCPP_GLCPP_PARSE_H
d334 1
a334 1
#endif /* !GLCPP_PARSER_SRC_GLSL_GLCPP_GLCPP_PARSE_H  */
d338 1
a338 1
/* Line 353 of yacc.c  */
d392 1
a392 1
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
d396 9
a404 1
#  define YY_(msgid) msgid
d410 1
a410 1
# define YYUSE(e) ((void) (e))
d412 1
a412 1
# define YYUSE(e) /* empty */
d415 1
d418 1
a418 1
# define YYID(n) (n)
d903 2
a904 2
#define yypact_value_is_default(yystate) \
  ((yystate) == (-151))
d906 1
a906 1
#define yytable_value_is_error(yytable_value) \
d1049 1
a1049 1

d1053 1
a1080 1

d1087 40
a1126 4
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
a1133 1

d1197 1
a1197 5
  switch (yytype)
    {
      default:
	break;
    }
a1443 1
  YYSIZE_T yysize1;
d1506 7
a1512 5
                yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                if (! (yysize <= yysize1
                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                  return 2;
                yysize = yysize1;
d1532 6
a1537 4
  yysize1 = yysize + yystrlen (yyformat);
  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
    return 2;
  yysize = yysize1;
d1597 1
a1597 6
  switch (yytype)
    {

      default:
	break;
    }
d1632 28
d1661 1
a1661 1
YYSTYPE yylval;
d1664 2
a1665 1
YYLTYPE yylloc;
d1705 1
a1705 1
  int yytoken;
d1724 3
a1726 4
  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
a1735 14
  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

d1737 1
a1737 1
/* Line 1572 of yacc.c  */
d1746 2
a1747 2
/* Line 1572 of yacc.c  */
#line 1696 "glcpp/glcpp-parse.c"
d1894 1
d1896 1
d2744 1
a2744 1
#line 2691 "glcpp/glcpp-parse.c"
d2909 1
d2911 1
d2982 1
a2982 1
/* Line 2048 of yacc.c  */
a4488 1

@


1.3
log
@Re-add generated files and unbreak the build. I shouldn't have deleted
those during the update. Spotted by matthieu@@
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.3.  */
d3 5
a7 6
/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
d9 3
a11 3
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

d16 1
a16 1

d18 1
a18 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
d29 1
a29 1

d47 1
a47 1
#define YYBISON_VERSION "2.3"
d55 2
a56 78
/* Using locations.  */
#define YYLSP_NEEDED 1



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     COMMA_FINAL = 258,
     DEFINED = 259,
     ELIF_EXPANDED = 260,
     HASH = 261,
     HASH_DEFINE_FUNC = 262,
     HASH_DEFINE_OBJ = 263,
     HASH_ELIF = 264,
     HASH_ELSE = 265,
     HASH_ENDIF = 266,
     HASH_IF = 267,
     HASH_IFDEF = 268,
     HASH_IFNDEF = 269,
     HASH_UNDEF = 270,
     HASH_VERSION = 271,
     IDENTIFIER = 272,
     IF_EXPANDED = 273,
     INTEGER = 274,
     INTEGER_STRING = 275,
     NEWLINE = 276,
     OTHER = 277,
     PLACEHOLDER = 278,
     SPACE = 279,
     PASTE = 280,
     OR = 281,
     AND = 282,
     NOT_EQUAL = 283,
     EQUAL = 284,
     GREATER_OR_EQUAL = 285,
     LESS_OR_EQUAL = 286,
     RIGHT_SHIFT = 287,
     LEFT_SHIFT = 288,
     UNARY = 289
   };
#endif
/* Tokens.  */
#define COMMA_FINAL 258
#define DEFINED 259
#define ELIF_EXPANDED 260
#define HASH 261
#define HASH_DEFINE_FUNC 262
#define HASH_DEFINE_OBJ 263
#define HASH_ELIF 264
#define HASH_ELSE 265
#define HASH_ENDIF 266
#define HASH_IF 267
#define HASH_IFDEF 268
#define HASH_IFNDEF 269
#define HASH_UNDEF 270
#define HASH_VERSION 271
#define IDENTIFIER 272
#define IF_EXPANDED 273
#define INTEGER 274
#define INTEGER_STRING 275
#define NEWLINE 276
#define OTHER 277
#define PLACEHOLDER 278
#define SPACE 279
#define PASTE 280
#define OR 281
#define AND 282
#define NOT_EQUAL 283
#define EQUAL 284
#define GREATER_OR_EQUAL 285
#define LESS_OR_EQUAL 286
#define RIGHT_SHIFT 287
#define LEFT_SHIFT 288
#define UNARY 289
d58 2
d62 9
d73 1
a161 1
/* Note: This function calls ralloc_steal on token. */
d182 3
d186 3
a188 1
_glcpp_parser_expand_if (glcpp_parser_t *parser, int type, token_list_t *list);
d190 1
d210 3
a212 1
#define yylex glcpp_parser_lex
d224 2
d227 7
a233 4
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
d243 54
a296 3
/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
d299 1
d301 1
a301 1
typedef int YYSTYPE;
a303 1
# define YYSTYPE_IS_TRIVIAL 1
d320 16
d338 2
a339 3

/* Line 216 of yacc.c.  */
#line 329 "glcpp/glcpp-parse.c"
d389 1
a389 1
# if YYENABLE_NLS
d414 1
a414 1
YYID (int i)
d417 2
a418 2
YYID (i)
    int i;
d421 1
a421 1
  return i;
d442 1
a442 1
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
d445 3
a447 2
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
d470 1
a470 1
#  if (defined __cplusplus && ! defined _STDLIB_H \
d474 2
a475 2
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
d480 1
a480 1
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
d487 1
a487 1
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
d504 3
a506 3
  yytype_int16 yyss;
  YYSTYPE yyvs;
    YYLTYPE yyls;
d518 1
a518 17
/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif
d525 1
a525 1
# define YYSTACK_RELOCATE(Stack)					\
d529 2
a530 2
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
d538 20
d561 1
a561 1
#define YYLAST   606
d564 1
a564 1
#define YYNTOKENS  57
d566 1
a566 1
#define YYNNTS  17
d568 1
a568 1
#define YYNRULES  101
d570 1
a570 1
#define YYNSTATES  162
d574 1
a574 1
#define YYMAXUTOK   289
d585 4
a588 4
       2,     2,     2,    47,     2,     2,     2,    43,    30,     2,
      45,    46,    41,    39,    49,    40,    54,    42,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,    55,
      33,    56,    34,     2,     2,     2,     2,     2,     2,     2,
d591 1
a591 1
       2,    50,     2,    51,    29,     2,     2,     2,     2,     2,
d594 1
a594 1
       2,     2,     2,    52,    28,    53,    48,     2,     2,     2,
d610 2
a611 1
      25,    26,    27,    31,    32,    35,    36,    37,    38,    44
d619 11
a629 11
       0,     0,     3,     4,     7,     9,    11,    13,    16,    20,
      24,    29,    36,    44,    48,    52,    55,    60,    65,    69,
      72,    75,    78,    82,    85,    87,    89,    91,    95,    99,
     103,   107,   111,   115,   119,   123,   127,   131,   135,   139,
     143,   147,   151,   155,   159,   163,   166,   169,   172,   175,
     179,   181,   185,   187,   190,   193,   194,   196,   197,   199,
     202,   207,   209,   211,   214,   216,   219,   221,   223,   225,
     227,   229,   231,   233,   235,   237,   239,   241,   243,   245,
     247,   249,   251,   253,   255,   257,   259,   261,   263,   265,
     267,   269,   271,   273,   275,   277,   279,   281,   283,   285,
     287,   289
d635 32
a666 30
      58,     0,    -1,    -1,    58,    59,    -1,    61,    -1,    65,
      -1,    60,    -1,     6,    66,    -1,    18,    63,    21,    -1,
       5,    63,    21,    -1,     8,    17,    67,    21,    -1,     7,
      17,    45,    46,    67,    21,    -1,     7,    17,    45,    64,
      46,    67,    21,    -1,    15,    17,    21,    -1,    12,    70,
      21,    -1,    12,    21,    -1,    13,    17,    68,    21,    -1,
      14,    17,    68,    21,    -1,     9,    70,    21,    -1,     9,
      21,    -1,    10,    21,    -1,    11,    21,    -1,    16,    62,
      21,    -1,     6,    21,    -1,    20,    -1,    19,    -1,    62,
      -1,    63,    26,    63,    -1,    63,    27,    63,    -1,    63,
      28,    63,    -1,    63,    29,    63,    -1,    63,    30,    63,
      -1,    63,    31,    63,    -1,    63,    32,    63,    -1,    63,
      35,    63,    -1,    63,    36,    63,    -1,    63,    34,    63,
      -1,    63,    33,    63,    -1,    63,    37,    63,    -1,    63,
      38,    63,    -1,    63,    40,    63,    -1,    63,    39,    63,
      -1,    63,    43,    63,    -1,    63,    42,    63,    -1,    63,
      41,    63,    -1,    47,    63,    -1,    48,    63,    -1,    40,
      63,    -1,    39,    63,    -1,    45,    63,    46,    -1,    17,
      -1,    64,    49,    17,    -1,    21,    -1,    71,    21,    -1,
      71,    21,    -1,    -1,    71,    -1,    -1,    71,    -1,     4,
      17,    -1,     4,    45,    17,    46,    -1,    72,    -1,    69,
      -1,    70,    69,    -1,    72,    -1,    71,    72,    -1,    17,
      -1,    20,    -1,    73,    -1,    22,    -1,    24,    -1,    50,
      -1,    51,    -1,    45,    -1,    46,    -1,    52,    -1,    53,
      -1,    54,    -1,    30,    -1,    41,    -1,    39,    -1,    40,
      -1,    48,    -1,    47,    -1,    42,    -1,    43,    -1,    38,
      -1,    37,    -1,    33,    -1,    34,    -1,    36,    -1,    35,
      -1,    32,    -1,    31,    -1,    29,    -1,    28,    -1,    27,
      -1,    26,    -1,    55,    -1,    49,    -1,    56,    -1,    25,
      -1
d672 11
a682 11
       0,   181,   181,   183,   187,   190,   195,   196,   200,   203,
     209,   212,   215,   218,   226,   245,   255,   260,   265,   284,
     299,   302,   305,   326,   330,   339,   344,   345,   348,   351,
     354,   357,   360,   363,   366,   369,   372,   375,   378,   381,
     384,   387,   390,   398,   406,   409,   412,   415,   418,   421,
     427,   432,   440,   441,   445,   451,   452,   455,   457,   464,
     468,   472,   477,   481,   488,   493,   500,   504,   508,   512,
     516,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553
d686 1
a686 1
#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
d692 13
a704 12
  "ELIF_EXPANDED", "HASH", "HASH_DEFINE_FUNC", "HASH_DEFINE_OBJ",
  "HASH_ELIF", "HASH_ELSE", "HASH_ENDIF", "HASH_IF", "HASH_IFDEF",
  "HASH_IFNDEF", "HASH_UNDEF", "HASH_VERSION", "IDENTIFIER", "IF_EXPANDED",
  "INTEGER", "INTEGER_STRING", "NEWLINE", "OTHER", "PLACEHOLDER", "SPACE",
  "PASTE", "OR", "AND", "'|'", "'^'", "'&'", "NOT_EQUAL", "EQUAL", "'<'",
  "'>'", "GREATER_OR_EQUAL", "LESS_OR_EQUAL", "RIGHT_SHIFT", "LEFT_SHIFT",
  "'+'", "'-'", "'*'", "'/'", "'%'", "UNARY", "'('", "')'", "'!'", "'~'",
  "','", "'['", "']'", "'{'", "'}'", "'.'", "';'", "'='", "$accept",
  "input", "line", "expanded_line", "control_line", "integer_constant",
  "expression", "identifier_list", "text_line", "non_directive",
  "replacement_list", "junk", "conditional_token", "conditional_tokens",
  "pp_tokens", "preprocessing_token", "operator", 0
d715 4
a718 4
     275,   276,   277,   278,   279,   280,   281,   282,   124,    94,
      38,   283,   284,    60,    62,   285,   286,   287,   288,    43,
      45,    42,    47,    37,   289,    40,    41,    33,   126,    44,
      91,    93,   123,   125,    46,    59,    61
d725 11
a735 11
       0,    57,    58,    58,    59,    59,    59,    59,    60,    60,
      61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
      61,    61,    61,    61,    62,    62,    63,    63,    63,    63,
      63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
      63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
      64,    64,    65,    65,    66,    67,    67,    68,    68,    69,
      69,    69,    70,    70,    71,    71,    72,    72,    72,    72,
      72,    73,    73,    73,    73,    73,    73,    73,    73,    73,
      73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
      73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
      73,    73
d741 4
a744 3
       0,     2,     0,     2,     1,     1,     1,     2,     3,     3,
       4,     6,     7,     3,     3,     2,     4,     4,     3,     2,
       2,     2,     3,     2,     1,     1,     1,     3,     3,     3,
d746 3
a748 3
       3,     3,     3,     3,     3,     2,     2,     2,     2,     3,
       1,     3,     1,     2,     2,     0,     1,     0,     1,     2,
       4,     1,     1,     2,     1,     2,     1,     1,     1,     1,
d751 1
a751 2
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1
d754 2
a755 2
/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
d759 10
a768 10
       2,     0,     1,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    66,     0,    67,    52,    69,
      70,   101,    97,    96,    95,    94,    78,    93,    92,    88,
      89,    91,    90,    87,    86,    80,    81,    79,    84,    85,
      73,    74,    83,    82,    99,    71,    72,    75,    76,    77,
      98,   100,     3,     6,     4,     5,     0,    64,    68,    25,
      24,     0,     0,     0,     0,     0,    26,     0,    23,     7,
       0,     0,    55,     0,    19,    62,     0,    61,    20,    21,
      15,     0,    57,    57,     0,     0,     0,    53,    65,    48,
      47,     0,    45,    46,     9,     0,     0,     0,     0,     0,
d770 7
a776 6
       0,     0,     0,    54,     0,     0,    56,    59,     0,    18,
      63,    14,     0,    58,     0,    13,    22,     8,    49,    27,
      28,    29,    30,    31,    32,    33,    37,    36,    34,    35,
      38,    39,    41,    40,    44,    43,    42,    50,    55,     0,
      10,     0,    16,    17,     0,    55,     0,    60,    11,     0,
      51,    12
d782 2
a783 2
      -1,     1,    52,    53,    54,    66,    67,   149,    55,    69,
     115,   122,    75,    76,   116,    57,    58
d788 1
a788 1
#define YYPACT_NINF -147
d791 18
a808 17
    -147,   112,  -147,    28,   -10,    55,    62,   152,   -15,    59,
     192,    85,    86,    87,    51,  -147,    28,  -147,  -147,  -147,
    -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,
    -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,
    -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,
    -147,  -147,  -147,  -147,  -147,  -147,   312,  -147,  -147,  -147,
    -147,    28,    28,    28,    28,    28,  -147,   428,  -147,  -147,
     352,    63,   392,    17,  -147,  -147,   232,  -147,  -147,  -147,
    -147,   272,   392,   392,    84,    89,   451,  -147,  -147,  -147,
    -147,   469,  -147,  -147,  -147,    28,    28,    28,    28,    28,
      28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
      28,    28,    28,  -147,    60,    90,   392,  -147,    96,  -147,
    -147,  -147,    93,   392,    94,  -147,  -147,  -147,  -147,   489,
     505,   520,   534,   547,   558,   558,    18,    18,    18,    18,
     563,   563,    23,    23,  -147,  -147,  -147,  -147,   392,    32,
    -147,    61,  -147,  -147,   110,   392,   118,  -147,  -147,   149,
    -147,  -147
d814 2
a815 2
    -147,  -147,  -147,  -147,  -147,   157,   -11,  -147,  -147,  -147,
    -146,    92,   -68,   200,     0,    -7,  -147
d820 1
a820 2
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
d824 36
a859 2
      77,    56,   154,    77,    70,    86,    78,    15,   120,   159,
      17,    68,    19,   120,    20,    21,    22,    23,    24,    25,
d861 7
a867 27
      36,    37,    38,    39,   117,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    59,    60,    88,
      89,    90,    91,    92,    93,   106,   107,   108,   109,   110,
     111,   112,   118,    88,   110,   111,   112,    61,    62,    77,
      59,    60,    71,    63,    77,    64,    65,   147,   155,    72,
      79,   156,   123,   123,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,    82,    83,    84,   125,   148,   157,   114,    88,
     126,   150,     2,   151,   152,   153,    88,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,   158,    17,    18,    19,   160,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    73,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    15,
     161,    85,    17,    74,    19,   124,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    73,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    15,
      81,     0,    17,    80,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    73,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    15,
       0,     0,    17,   119,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    73,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    15,
       0,     0,    17,   121,    19,     0,    20,    21,    22,    23,
d869 12
a880 27
      34,    35,    36,    37,    38,    39,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    15,
       0,     0,    17,    87,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    15,
       0,     0,    17,   113,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    15,
       0,     0,    17,     0,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    94,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   127,     0,     0,     0,     0,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,     0,     0,   128,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   100,   101,
d882 10
a891 2
     112,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   108,   109,   110,   111,   112
d894 6
d902 9
a910 9
       7,     1,   148,    10,     4,    16,    21,    17,    76,   155,
      20,    21,    22,    81,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    17,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    19,    20,    56,
      61,    62,    63,    64,    65,    37,    38,    39,    40,    41,
      42,    43,    45,    70,    41,    42,    43,    39,    40,    76,
      19,    20,    17,    45,    81,    47,    48,    17,    46,    17,
      21,    49,    82,    83,    95,    96,    97,    98,    99,   100,
d912 9
a920 36
     111,   112,    17,    17,    17,    21,    46,    46,    45,   116,
      21,    21,     0,    17,    21,    21,   123,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    21,    20,    21,    22,    17,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     4,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    17,
      21,    14,    20,    21,    22,    83,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     4,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    17,
      10,    -1,    20,    21,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     4,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    17,
      -1,    -1,    20,    21,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     4,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    17,
      -1,    -1,    20,    21,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    17,
      -1,    -1,    20,    21,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    17,
      -1,    -1,    20,    21,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    17,
      -1,    -1,    20,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    21,
      -1,    -1,    -1,    -1,    26,    27,    28,    29,    30,    31,
d922 3
a924 1
      42,    43,    21,    -1,    -1,    -1,    -1,    26,    27,    28,
d926 16
a941 3
      39,    40,    41,    42,    43,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    -1,    -1,    46,    27,    28,    29,    30,
d943 3
a945 2
      41,    42,    43,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    29,
d947 7
a953 2
      40,    41,    42,    43,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    31,    32,
d955 15
a969 2
      43,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    39,    40,    41,    42,    43
d976 18
a993 17
       0,    58,     0,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    20,    21,    22,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    59,    60,    61,    65,    71,    72,    73,    19,
      20,    39,    40,    45,    47,    48,    62,    63,    21,    66,
      71,    17,    17,     4,    21,    69,    70,    72,    21,    21,
      21,    70,    17,    17,    17,    62,    63,    21,    72,    63,
      63,    63,    63,    63,    21,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    21,    45,    67,    71,    17,    45,    21,
      69,    21,    68,    71,    68,    21,    21,    21,    46,    63,
      63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
      63,    63,    63,    63,    63,    63,    63,    17,    46,    64,
      21,    17,    21,    21,    67,    46,    49,    46,    21,    67,
      17,    21
d1008 4
a1011 1
   Once GCC version 2 has supplanted version 1, this can go.  */
d1014 6
d1023 12
a1034 12
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
a1043 1

a1047 1
#define YYRHSLOC(Rhs, K) ((Rhs)[K])
d1049 16
a1064 16
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
d1068 3
d1077 1
a1077 1
# if YYLTYPE_IS_TRIVIAL
d1141 2
d1198 1
a1198 1
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
d1201 3
a1203 3
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
d1207 5
a1211 2
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
d1247 1
a1247 1
      fprintf (stderr, "   $%d = ", yyi + 1);
d1251 1
a1251 1
      fprintf (stderr, "\n");
a1287 1

d1390 11
a1400 9
/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
d1402 73
a1474 1
  int yyn = yypact[yystate];
d1476 1
a1476 3
  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
d1478 12
a1489 37
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;
d1491 13
a1503 2
      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);
d1505 19
a1523 49
      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
a1525 1

a1560 19


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (glcpp_parser_t *parser);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


d1591 1
a1591 1
  /* The look-ahead symbol.  */
d1594 1
a1594 1
/* The semantic value of the look-ahead symbol.  */
d1597 1
a1597 3
/* Number of syntax errors so far.  */
int yynerrs;
/* Location data for the look-ahead symbol.  */
d1600 35
a1634 1
  int yystate;
d1637 7
a1643 4
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
a1650 25
  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;

  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[2];

a1652 7
  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

d1657 6
d1668 1
a1668 1
  yychar = YYEMPTY;		/* Cause a token to be read.  */
a1673 1

d1677 2
a1678 1
#if YYLTYPE_IS_TRIVIAL
d1681 1
a1681 1
  yylloc.first_column = yylloc.last_column = 0;
d1684 3
a1686 3

  /* User initialization code.  */
#line 148 "glcpp/glcpp-parse.y"
d1694 2
a1695 2
/* Line 1078 of yacc.c.  */
#line 1623 "glcpp/glcpp-parse.c"
d1733 1
d1755 3
a1757 3
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
	YYSTACK_RELOCATE (yyls);
d1778 3
d1789 1
a1789 1
     look-ahead token if we need one and don't already have one.  */
d1791 1
a1791 1
  /* First try to decide what to do without reference to look-ahead token.  */
d1793 1
a1793 1
  if (yyn == YYPACT_NINF)
d1796 1
a1796 1
  /* Not known => get a look-ahead token if don't already have one.  */
d1798 1
a1798 1
  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
d1824 2
a1825 2
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
a1829 3
  if (yyn == YYFINAL)
    YYACCEPT;

d1835 1
a1835 1
  /* Shift the look-ahead token.  */
d1838 2
a1839 3
  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;
d1880 2
a1881 1
#line 187 "glcpp/glcpp-parse.y"
d1883 2
a1884 2
		ralloc_strcat (&parser->output, "\n");
	;}
d1888 15
a1902 1
#line 190 "glcpp/glcpp-parse.y"
d1905 1
a1905 1
		ralloc_strcat (&parser->output, "\n");
d1907 1
a1907 1
	;}
d1910 3
a1912 2
  case 8:
#line 200 "glcpp/glcpp-parse.y"
d1915 1
a1915 1
	;}
d1918 3
a1920 2
  case 9:
#line 203 "glcpp/glcpp-parse.y"
d1923 29
a1951 1
	;}
d1954 3
a1956 2
  case 10:
#line 209 "glcpp/glcpp-parse.y"
d1959 1
a1959 1
	;}
d1962 3
a1964 2
  case 11:
#line 212 "glcpp/glcpp-parse.y"
d1967 1
a1967 1
	;}
d1970 3
a1972 2
  case 12:
#line 215 "glcpp/glcpp-parse.y"
d1975 1
a1975 1
	;}
d1978 3
a1980 2
  case 13:
#line 218 "glcpp/glcpp-parse.y"
d1988 1
a1988 1
	;}
d1991 3
a1993 2
  case 14:
#line 226 "glcpp/glcpp-parse.y"
d2005 2
a2006 1
			_glcpp_parser_expand_if (parser, IF_EXPANDED, (yyvsp[(2) - (3)].token_list));
d2013 1
a2013 1
	;}
d2016 3
a2018 2
  case 15:
#line 245 "glcpp/glcpp-parse.y"
d2028 1
a2028 1
	;}
d2031 3
a2033 2
  case 16:
#line 255 "glcpp/glcpp-parse.y"
d2038 1
a2038 1
	;}
d2041 3
a2043 2
  case 17:
#line 260 "glcpp/glcpp-parse.y"
d2048 1
a2048 1
	;}
d2051 3
a2053 2
  case 18:
#line 265 "glcpp/glcpp-parse.y"
d2065 2
a2066 1
			_glcpp_parser_expand_if (parser, ELIF_EXPANDED, (yyvsp[(2) - (3)].token_list));
d2073 1
a2073 1
	;}
d2076 3
a2078 2
  case 19:
#line 284 "glcpp/glcpp-parse.y"
d2093 1
a2093 1
	;}
d2096 3
a2098 2
  case 20:
#line 299 "glcpp/glcpp-parse.y"
d2100 2
a2101 2
		_glcpp_parser_skip_stack_change_if (parser, & (yylsp[(1) - (2)]), "else", 1);
	;}
d2104 3
a2106 2
  case 21:
#line 302 "glcpp/glcpp-parse.y"
d2108 2
a2109 2
		_glcpp_parser_skip_stack_pop (parser, & (yylsp[(1) - (2)]));
	;}
d2112 3
a2114 2
  case 22:
#line 305 "glcpp/glcpp-parse.y"
d2116 3
a2118 6
		macro_t *macro = hash_table_find (parser->defines, "__VERSION__");
		if (macro) {
			hash_table_remove (parser->defines, "__VERSION__");
			ralloc_free (macro);
		}
		add_builtin_define (parser, "__VERSION__", (yyvsp[(2) - (3)].ival));
d2120 6
a2125 13
		if ((yyvsp[(2) - (3)].ival) == 100)
			add_builtin_define (parser, "GL_ES", 1);

		/* Currently, all ES2 implementations support highp in the
		 * fragment shader, so we always define this macro in ES2.
		 * If we ever get a driver that doesn't support highp, we'll
		 * need to add a flag to the gl_context and check that here.
		 */
		if ((yyvsp[(2) - (3)].ival) >= 130 || (yyvsp[(2) - (3)].ival) == 100)
			add_builtin_define (parser, "GL_FRAGMENT_PRECISION_HIGH", 1);

		ralloc_asprintf_append (&parser->output, "#version %" PRIiMAX, (yyvsp[(2) - (3)].ival));
	;}
d2128 3
a2130 2
  case 24:
#line 330 "glcpp/glcpp-parse.y"
d2139 1
a2139 1
	;}
d2142 11
a2152 2
  case 25:
#line 339 "glcpp/glcpp-parse.y"
d2154 4
a2157 2
		(yyval.ival) = (yyvsp[(1) - (1)].ival);
	;}
d2160 3
a2162 2
  case 27:
#line 345 "glcpp/glcpp-parse.y"
d2165 1
a2165 1
	;}
d2168 3
a2170 2
  case 28:
#line 348 "glcpp/glcpp-parse.y"
d2173 1
a2173 1
	;}
d2176 3
a2178 2
  case 29:
#line 351 "glcpp/glcpp-parse.y"
d2181 1
a2181 1
	;}
d2184 3
a2186 2
  case 30:
#line 354 "glcpp/glcpp-parse.y"
d2189 1
a2189 1
	;}
d2192 3
a2194 2
  case 31:
#line 357 "glcpp/glcpp-parse.y"
d2197 1
a2197 1
	;}
d2200 3
a2202 2
  case 32:
#line 360 "glcpp/glcpp-parse.y"
d2205 1
a2205 1
	;}
d2208 3
a2210 2
  case 33:
#line 363 "glcpp/glcpp-parse.y"
d2213 1
a2213 1
	;}
d2216 3
a2218 2
  case 34:
#line 366 "glcpp/glcpp-parse.y"
d2221 1
a2221 1
	;}
d2224 3
a2226 2
  case 35:
#line 369 "glcpp/glcpp-parse.y"
d2229 1
a2229 1
	;}
d2232 3
a2234 2
  case 36:
#line 372 "glcpp/glcpp-parse.y"
d2237 1
a2237 1
	;}
d2240 3
a2242 2
  case 37:
#line 375 "glcpp/glcpp-parse.y"
d2245 1
a2245 1
	;}
d2248 3
a2250 2
  case 38:
#line 378 "glcpp/glcpp-parse.y"
d2253 1
a2253 1
	;}
d2256 3
a2258 2
  case 39:
#line 381 "glcpp/glcpp-parse.y"
d2261 1
a2261 1
	;}
d2264 3
a2266 2
  case 40:
#line 384 "glcpp/glcpp-parse.y"
d2269 1
a2269 1
	;}
d2272 3
a2274 2
  case 41:
#line 387 "glcpp/glcpp-parse.y"
d2277 1
a2277 1
	;}
d2280 3
a2282 2
  case 42:
#line 390 "glcpp/glcpp-parse.y"
d2290 1
a2290 1
	;}
d2293 3
a2295 2
  case 43:
#line 398 "glcpp/glcpp-parse.y"
d2303 1
a2303 1
	;}
d2306 3
a2308 2
  case 44:
#line 406 "glcpp/glcpp-parse.y"
d2311 1
a2311 1
	;}
d2314 3
a2316 2
  case 45:
#line 409 "glcpp/glcpp-parse.y"
d2319 1
a2319 1
	;}
d2322 3
a2324 2
  case 46:
#line 412 "glcpp/glcpp-parse.y"
d2327 1
a2327 1
	;}
d2330 3
a2332 2
  case 47:
#line 415 "glcpp/glcpp-parse.y"
d2335 1
a2335 1
	;}
d2338 3
a2340 2
  case 48:
#line 418 "glcpp/glcpp-parse.y"
d2343 1
a2343 1
	;}
d2346 3
a2348 2
  case 49:
#line 421 "glcpp/glcpp-parse.y"
d2351 1
a2351 1
	;}
d2354 3
a2356 2
  case 50:
#line 427 "glcpp/glcpp-parse.y"
d2361 1
a2361 1
	;}
d2364 3
a2366 2
  case 51:
#line 432 "glcpp/glcpp-parse.y"
d2371 1
a2371 1
	;}
d2374 4
a2377 3
  case 52:
#line 440 "glcpp/glcpp-parse.y"
    { (yyval.token_list) = NULL; ;}
d2380 3
a2382 2
  case 54:
#line 445 "glcpp/glcpp-parse.y"
d2385 1
a2385 1
	;}
d2388 4
a2391 3
  case 55:
#line 451 "glcpp/glcpp-parse.y"
    { (yyval.token_list) = NULL; ;}
d2394 3
a2396 2
  case 58:
#line 457 "glcpp/glcpp-parse.y"
d2399 1
a2399 1
	;}
d2402 3
a2404 2
  case 59:
#line 464 "glcpp/glcpp-parse.y"
d2408 1
a2408 1
	;}
d2411 3
a2413 2
  case 60:
#line 468 "glcpp/glcpp-parse.y"
d2417 1
a2417 1
	;}
d2420 3
a2422 2
  case 62:
#line 477 "glcpp/glcpp-parse.y"
d2426 1
a2426 1
	;}
d2429 3
a2431 2
  case 63:
#line 481 "glcpp/glcpp-parse.y"
d2435 1
a2435 1
	;}
d2438 3
a2440 2
  case 64:
#line 488 "glcpp/glcpp-parse.y"
d2445 1
a2445 1
	;}
d2448 3
a2450 2
  case 65:
#line 493 "glcpp/glcpp-parse.y"
d2454 1
a2454 1
	;}
d2457 3
a2459 2
  case 66:
#line 500 "glcpp/glcpp-parse.y"
d2463 1
a2463 1
	;}
d2466 3
a2468 2
  case 67:
#line 504 "glcpp/glcpp-parse.y"
d2472 1
a2472 1
	;}
d2475 3
a2477 2
  case 68:
#line 508 "glcpp/glcpp-parse.y"
d2481 1
a2481 1
	;}
d2484 3
a2486 2
  case 69:
#line 512 "glcpp/glcpp-parse.y"
d2490 1
a2490 1
	;}
d2493 3
a2495 2
  case 70:
#line 516 "glcpp/glcpp-parse.y"
d2499 1
a2499 36
	;}
    break;

  case 71:
#line 523 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '['; ;}
    break;

  case 72:
#line 524 "glcpp/glcpp-parse.y"
    { (yyval.ival) = ']'; ;}
    break;

  case 73:
#line 525 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '('; ;}
    break;

  case 74:
#line 526 "glcpp/glcpp-parse.y"
    { (yyval.ival) = ')'; ;}
    break;

  case 75:
#line 527 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '{'; ;}
    break;

  case 76:
#line 528 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '}'; ;}
    break;

  case 77:
#line 529 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '.'; ;}
d2503 3
a2505 2
#line 530 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '&'; ;}
d2509 3
a2511 2
#line 531 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '*'; ;}
d2515 3
a2517 2
#line 532 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '+'; ;}
d2521 3
a2523 2
#line 533 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '-'; ;}
d2527 3
a2529 2
#line 534 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '~'; ;}
d2533 3
a2535 2
#line 535 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '!'; ;}
d2539 3
a2541 2
#line 536 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '/'; ;}
d2545 3
a2547 2
#line 537 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '%'; ;}
d2551 3
a2553 2
#line 538 "glcpp/glcpp-parse.y"
    { (yyval.ival) = LEFT_SHIFT; ;}
d2557 3
a2559 2
#line 539 "glcpp/glcpp-parse.y"
    { (yyval.ival) = RIGHT_SHIFT; ;}
d2563 3
a2565 2
#line 540 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '<'; ;}
d2569 3
a2571 2
#line 541 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '>'; ;}
d2575 3
a2577 2
#line 542 "glcpp/glcpp-parse.y"
    { (yyval.ival) = LESS_OR_EQUAL; ;}
d2581 3
a2583 2
#line 543 "glcpp/glcpp-parse.y"
    { (yyval.ival) = GREATER_OR_EQUAL; ;}
d2587 3
a2589 2
#line 544 "glcpp/glcpp-parse.y"
    { (yyval.ival) = EQUAL; ;}
d2593 3
a2595 2
#line 545 "glcpp/glcpp-parse.y"
    { (yyval.ival) = NOT_EQUAL; ;}
d2599 3
a2601 2
#line 546 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '^'; ;}
d2605 3
a2607 2
#line 547 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '|'; ;}
d2611 3
a2613 2
#line 548 "glcpp/glcpp-parse.y"
    { (yyval.ival) = AND; ;}
d2617 3
a2619 2
#line 549 "glcpp/glcpp-parse.y"
    { (yyval.ival) = OR; ;}
d2623 3
a2625 2
#line 550 "glcpp/glcpp-parse.y"
    { (yyval.ival) = ';'; ;}
d2629 3
a2631 2
#line 551 "glcpp/glcpp-parse.y"
    { (yyval.ival) = ','; ;}
d2635 3
a2637 2
#line 552 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '='; ;}
d2641 45
a2685 2
#line 553 "glcpp/glcpp-parse.y"
    { (yyval.ival) = PASTE; ;}
d2689 2
a2690 2
/* Line 1267 of yacc.c.  */
#line 2485 "glcpp/glcpp-parse.c"
d2693 11
d2732 4
d2743 2
d2746 25
a2770 29
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (&yylloc, parser, yymsg);
	  }
	else
	  {
	    yyerror (&yylloc, parser, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
d2772 1
d2776 1
a2776 1
  yyerror_range[0] = yylloc;
d2780 1
a2780 1
      /* If just tried and failed to reuse look-ahead token after an
d2797 1
a2797 1
  /* Else will try to reuse look-ahead token after shifting the error
d2813 1
a2813 1
  yyerror_range[0] = yylsp[1-yylen];
d2832 1
a2832 1
      if (yyn != YYPACT_NINF)
d2847 1
a2847 1
      yyerror_range[0] = *yylsp;
a2854 3
  if (yyn == YYFINAL)
    YYACCEPT;

d2857 1
a2857 1
  yyerror_range[1] = yylloc;
d2859 2
a2860 2
     the look-ahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
d2884 1
a2884 1
#ifndef yyoverflow
d2895 8
a2902 3
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc, parser);
d2926 2
a2927 1
#line 556 "glcpp/glcpp-parse.y"
a3137 2
	ralloc_steal (list, token);

d3279 1
a3279 1
_token_print (char **out, token_t *token)
d3282 1
a3282 1
		ralloc_asprintf_append (out, "%c", token->type);
d3288 1
a3288 1
		ralloc_asprintf_append (out, "%" PRIiMAX, token->value.ival);
d3293 1
a3293 1
		ralloc_strcat (out, token->value.str);
d3296 1
a3296 1
		ralloc_strcat (out, " ");
d3299 1
a3299 1
		ralloc_strcat (out, "<<");
d3302 1
a3302 1
		ralloc_strcat (out, ">>");
d3305 1
a3305 1
		ralloc_strcat (out, "<=");
d3308 1
a3308 1
		ralloc_strcat (out, ">=");
d3311 1
a3311 1
		ralloc_strcat (out, "==");
d3314 1
a3314 1
		ralloc_strcat (out, "!=");
d3317 1
a3317 1
		ralloc_strcat (out, "&&");
d3320 1
a3320 1
		ralloc_strcat (out, "||");
d3323 1
a3323 1
		ralloc_strcat (out, "##");
d3326 1
a3326 1
		ralloc_strcat (out, ",");
d3395 3
a3397 2
	/* Two string-valued tokens can usually just be mashed
	 * together.
d3399 7
a3405 7
	 * XXX: This isn't actually legitimate. Several things here
	 * should result in a diagnostic since the result cannot be a
	 * valid, single pre-processing token. For example, pasting
	 * "123" and "abc" is not legal, but we don't catch that
	 * here. */
	if ((token->type == IDENTIFIER || token->type == OTHER || token->type == INTEGER_STRING) &&
	    (other->type == IDENTIFIER || other->type == OTHER || other->type == INTEGER_STRING))
d3408 21
d3430 21
a3450 3
		str = ralloc_asprintf (token, "%s%s", token->value.str,
				       other->value.str);
		combined = _token_create_str (token, token->type, str);
d3455 1
d3457 5
a3461 5
	ralloc_strcat (&parser->info_log, "Pasting \"");
	_token_print (&parser->info_log, token);
	ralloc_strcat (&parser->info_log, "\" and \"");
	_token_print (&parser->info_log, other);
	ralloc_strcat (&parser->info_log, "\" does not give a valid preprocessing token.\n");
d3475 1
a3475 1
		_token_print (&parser->output, node->token);
d3521 1
d3523 1
d3526 7
d3534 11
a3544 2
	add_builtin_define(parser, "GL_ARB_draw_buffers", 1);
	add_builtin_define(parser, "GL_ARB_texture_rectangle", 1);
d3546 25
a3570 2
	if (api == API_OPENGLES2)
		add_builtin_define(parser, "GL_ES", 1);
d3572 11
a3582 4
	if (extensions != NULL) {
	   if (extensions->EXT_texture_array) {
	      add_builtin_define(parser, "GL_EXT_texture_array", 1);
	   }
d3584 2
a3585 3
	   if (extensions->ARB_fragment_coord_conventions)
	      add_builtin_define(parser, "GL_ARB_fragment_coord_conventions",
				 1);
d3587 2
a3588 2
	   if (extensions->ARB_explicit_attrib_location)
	      add_builtin_define(parser, "GL_ARB_explicit_attrib_location", 1);
d3590 2
a3591 2
	   if (extensions->ARB_shader_texture_lod)
	      add_builtin_define(parser, "GL_ARB_shader_texture_lod", 1);
d3593 3
a3595 2
	   if (extensions->AMD_conservative_depth)
	      add_builtin_define(parser, "GL_AMD_conservative_depth", 1);
a3603 6
int
glcpp_parser_parse (glcpp_parser_t *parser)
{
	return yyparse (parser);
}

d3703 1
a3703 1
_token_list_create_with_one_space (void *ctx)
d3706 1
a3706 1
	token_t *space;
d3709 2
a3710 2
	space = _token_create_ival (list, SPACE, SPACE);
	_token_list_append (list, space);
d3715 17
d3733 3
a3735 1
_glcpp_parser_expand_if (glcpp_parser_t *parser, int type, token_list_t *list)
d3741 1
a3741 1
	token = _token_create_ival (parser, type, type);
d3943 11
a3954 1
	identifier = token->value.str;
a3974 1
		*last = node;
a3980 1
		*last = node;
d4272 1
a4272 1
		else if (ret == HASH_DEFINE_OBJ || ret == HASH_DEFINE_FUNC ||
d4393 39
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.4.3.  */
d4 5
a8 5
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2009, 2010 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
d10 3
a12 3
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
d17 1
a17 1
   
d19 3
a21 1
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
d32 1
a32 1
   
d50 1
a50 1
#define YYBISON_VERSION "2.4.3"
d58 3
a60 2
/* Push parsers.  */
#define YYPUSH 0
a61 2
/* Pull parsers.  */
#define YYPULL 1
d63 74
a136 2
/* Using locations.  */
#define YYLSP_NEEDED 1
a140 2

/* Line 189 of yacc.c  */
a284 3
/* Line 189 of yacc.c  */
#line 216 "glcpp/glcpp-parse.c"

a302 44

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     COMMA_FINAL = 258,
     DEFINED = 259,
     ELIF_EXPANDED = 260,
     HASH = 261,
     HASH_DEFINE_FUNC = 262,
     HASH_DEFINE_OBJ = 263,
     HASH_ELIF = 264,
     HASH_ELSE = 265,
     HASH_ENDIF = 266,
     HASH_IF = 267,
     HASH_IFDEF = 268,
     HASH_IFNDEF = 269,
     HASH_UNDEF = 270,
     HASH_VERSION = 271,
     IDENTIFIER = 272,
     IF_EXPANDED = 273,
     INTEGER = 274,
     INTEGER_STRING = 275,
     NEWLINE = 276,
     OTHER = 277,
     PLACEHOLDER = 278,
     SPACE = 279,
     PASTE = 280,
     OR = 281,
     AND = 282,
     NOT_EQUAL = 283,
     EQUAL = 284,
     GREATER_OR_EQUAL = 285,
     LESS_OR_EQUAL = 286,
     RIGHT_SHIFT = 287,
     LEFT_SHIFT = 288,
     UNARY = 289
   };
#endif



d304 1
a304 1

d307 1
d327 2
a328 2
/* Line 264 of yacc.c  */
#line 304 "glcpp/glcpp-parse.c"
d378 1
a378 1
# if defined YYENABLE_NLS && YYENABLE_NLS
d403 1
a403 1
YYID (int yyi)
d406 2
a407 2
YYID (yyi)
    int yyi;
d410 1
a410 1
  return yyi;
d492 3
a494 3
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
d529 1
a529 1
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
d533 2
a534 2
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
d966 1
a966 4
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */
a968 6
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif
d1025 1
a1025 1
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
d1144 1
a1144 1
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
d1147 3
a1149 3
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
d1153 2
a1154 5
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
d1190 1
a1190 1
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
d1194 1
a1194 1
      YYFPRINTF (stderr, "\n");
d1478 1
d1481 1
d1500 4
a1503 3
/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/
d1527 1
a1527 1
/* The lookahead symbol.  */
d1530 1
a1530 1
/* The semantic value of the lookahead symbol.  */
d1533 3
a1535 1
/* Location data for the lookahead symbol.  */
d1538 1
a1538 35
    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

d1541 4
a1544 7
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

d1552 25
d1579 7
a1589 6
  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

d1595 1
a1595 1
  yychar = YYEMPTY; /* Cause a token to be read.  */
d1601 1
d1605 1
a1605 2

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
d1608 1
a1608 1
  yylloc.first_column = yylloc.last_column = 1;
a1610 1
/* User initialization code.  */
d1612 1
a1612 1
/* Line 1251 of yacc.c  */
d1621 2
a1622 3

/* Line 1251 of yacc.c  */
#line 1618 "glcpp/glcpp-parse.c"
a1623 1

a1659 1

d1681 3
a1683 3
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
a1703 3
  if (yystate == YYFINAL)
    YYACCEPT;

d1712 1
a1712 1
     lookahead token if we need one and don't already have one.  */
d1714 1
a1714 1
  /* First try to decide what to do without reference to lookahead token.  */
d1719 1
a1719 1
  /* Not known => get a lookahead token if don't already have one.  */
d1721 1
a1721 1
  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
d1753 3
d1761 1
a1761 1
  /* Shift the lookahead token.  */
d1764 3
a1766 2
  /* Discard the shifted token.  */
  yychar = YYEMPTY;
a1806 2

/* Line 1464 of yacc.c  */
a1813 2

/* Line 1464 of yacc.c  */
a1822 2

/* Line 1464 of yacc.c  */
a1829 2

/* Line 1464 of yacc.c  */
a1836 2

/* Line 1464 of yacc.c  */
a1843 2

/* Line 1464 of yacc.c  */
a1850 2

/* Line 1464 of yacc.c  */
a1857 2

/* Line 1464 of yacc.c  */
a1869 2

/* Line 1464 of yacc.c  */
a1892 2

/* Line 1464 of yacc.c  */
a1906 2

/* Line 1464 of yacc.c  */
a1915 2

/* Line 1464 of yacc.c  */
a1924 2

/* Line 1464 of yacc.c  */
a1947 2

/* Line 1464 of yacc.c  */
a1966 2

/* Line 1464 of yacc.c  */
a1973 2

/* Line 1464 of yacc.c  */
a1980 2

/* Line 1464 of yacc.c  */
a2005 2

/* Line 1464 of yacc.c  */
a2018 2

/* Line 1464 of yacc.c  */
a2025 2

/* Line 1464 of yacc.c  */
a2032 2

/* Line 1464 of yacc.c  */
a2039 2

/* Line 1464 of yacc.c  */
a2046 2

/* Line 1464 of yacc.c  */
a2053 2

/* Line 1464 of yacc.c  */
a2060 2

/* Line 1464 of yacc.c  */
a2067 2

/* Line 1464 of yacc.c  */
a2074 2

/* Line 1464 of yacc.c  */
a2081 2

/* Line 1464 of yacc.c  */
a2088 2

/* Line 1464 of yacc.c  */
a2095 2

/* Line 1464 of yacc.c  */
a2102 2

/* Line 1464 of yacc.c  */
a2109 2

/* Line 1464 of yacc.c  */
a2116 2

/* Line 1464 of yacc.c  */
a2123 2

/* Line 1464 of yacc.c  */
a2130 2

/* Line 1464 of yacc.c  */
a2142 2

/* Line 1464 of yacc.c  */
a2154 2

/* Line 1464 of yacc.c  */
a2161 2

/* Line 1464 of yacc.c  */
a2168 2

/* Line 1464 of yacc.c  */
a2175 2

/* Line 1464 of yacc.c  */
a2182 2

/* Line 1464 of yacc.c  */
a2189 2

/* Line 1464 of yacc.c  */
a2196 2

/* Line 1464 of yacc.c  */
a2205 2

/* Line 1464 of yacc.c  */
a2214 2

/* Line 1464 of yacc.c  */
a2219 2

/* Line 1464 of yacc.c  */
a2226 2

/* Line 1464 of yacc.c  */
a2231 2

/* Line 1464 of yacc.c  */
a2238 2

/* Line 1464 of yacc.c  */
a2246 2

/* Line 1464 of yacc.c  */
a2254 2

/* Line 1464 of yacc.c  */
a2262 2

/* Line 1464 of yacc.c  */
a2270 2

/* Line 1464 of yacc.c  */
a2279 2

/* Line 1464 of yacc.c  */
a2287 2

/* Line 1464 of yacc.c  */
a2295 2

/* Line 1464 of yacc.c  */
a2303 2

/* Line 1464 of yacc.c  */
a2311 2

/* Line 1464 of yacc.c  */
a2319 2

/* Line 1464 of yacc.c  */
a2327 2

/* Line 1464 of yacc.c  */
a2332 2

/* Line 1464 of yacc.c  */
a2337 2

/* Line 1464 of yacc.c  */
a2342 2

/* Line 1464 of yacc.c  */
a2347 2

/* Line 1464 of yacc.c  */
a2352 2

/* Line 1464 of yacc.c  */
a2357 2

/* Line 1464 of yacc.c  */
a2362 2

/* Line 1464 of yacc.c  */
a2367 2

/* Line 1464 of yacc.c  */
a2372 2

/* Line 1464 of yacc.c  */
a2377 2

/* Line 1464 of yacc.c  */
a2382 2

/* Line 1464 of yacc.c  */
a2387 2

/* Line 1464 of yacc.c  */
a2392 2

/* Line 1464 of yacc.c  */
a2397 2

/* Line 1464 of yacc.c  */
a2402 2

/* Line 1464 of yacc.c  */
a2407 2

/* Line 1464 of yacc.c  */
a2412 2

/* Line 1464 of yacc.c  */
a2417 2

/* Line 1464 of yacc.c  */
a2422 2

/* Line 1464 of yacc.c  */
a2427 2

/* Line 1464 of yacc.c  */
a2432 2

/* Line 1464 of yacc.c  */
a2437 2

/* Line 1464 of yacc.c  */
a2442 2

/* Line 1464 of yacc.c  */
a2447 2

/* Line 1464 of yacc.c  */
a2452 2

/* Line 1464 of yacc.c  */
a2457 2

/* Line 1464 of yacc.c  */
a2462 2

/* Line 1464 of yacc.c  */
a2467 2

/* Line 1464 of yacc.c  */
a2472 2

/* Line 1464 of yacc.c  */
a2477 2

/* Line 1464 of yacc.c  */
d2483 2
a2484 3

/* Line 1464 of yacc.c  */
#line 2662 "glcpp/glcpp-parse.c"
d2556 1
a2556 1
  yyerror_range[1] = yylloc;
d2560 1
a2560 1
      /* If just tried and failed to reuse lookahead token after an
d2577 1
a2577 1
  /* Else will try to reuse lookahead token after shifting the error
d2593 1
a2593 1
  yyerror_range[1] = yylsp[1-yylen];
d2627 1
a2627 1
      yyerror_range[1] = *yylsp;
d2635 3
d2640 1
a2640 1
  yyerror_range[2] = yylloc;
d2642 2
a2643 2
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
d2667 1
a2667 1
#if !defined(yyoverflow) || YYERROR_VERBOSE
d2678 1
a2678 1
  if (yychar != YYEMPTY)
a2703 2

/* Line 1684 of yacc.c  */
d3280 6
d3425 42
d3578 1
a3578 37
	node = substituted->head;
	while (node)
	{
		token_node_t *next_non_space;

		/* Look ahead for a PASTE token, skipping space. */
		next_non_space = node->next;
		while (next_non_space && next_non_space->token->type == SPACE)
			next_non_space = next_non_space->next;

		if (next_non_space == NULL)
			break;

		if (next_non_space->token->type != PASTE) {
			node = next_non_space;
			continue;
		}

		/* Now find the next non-space token after the PASTE. */
		next_non_space = next_non_space->next;
		while (next_non_space && next_non_space->token->type == SPACE)
			next_non_space = next_non_space->next;

		if (next_non_space == NULL) {
			yyerror (&node->token->location, parser, "'##' cannot appear at either end of a macro expansion\n");
			return NULL;
		}

		node->token = _token_paste (parser, node->token, next_non_space->token);
		node->next = next_non_space->next;
		if (next_non_space == substituted->tail)
			substituted->tail = node;

		node = node->next;
	}

	substituted->non_space_tail = substituted->tail;
d3648 1
d3655 3
a3657 1
		return _token_list_copy (parser, macro->replacements);
d3813 2
a3814 2
	if (strncmp(identifier, "__", 2) == 0) {
		glcpp_error (loc, parser, "Macro names starting with \"__\" are reserved.\n");
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.6.1.  */
d3 1
a3 1
/* Bison implementation for Yacc-like parsers in C
d5 2
a6 1
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
d48 1
a48 1
#define YYBISON_VERSION "2.6.1"
d62 3
a65 9
/* Substitute the variable and function names.  */
#define yyparse         glcpp_parser_parse
#define yylex           glcpp_parser_lex
#define yyerror         glcpp_parser_error
#define yylval          glcpp_parser_lval
#define yychar          glcpp_parser_char
#define yydebug         glcpp_parser_debug
#define yynerrs         glcpp_parser_nerrs
#define yylloc          glcpp_parser_lloc
d68 2
a69 1
/* Line 336 of yacc.c  */
d158 1
a178 3
/* Expand list, and begin lexing from the result (after first
 * prefixing a token of type 'head_token_type').
 */
d180 1
a180 3
_glcpp_parser_expand_and_lex_from (glcpp_parser_t *parser,
				   int head_token_type,
				   token_list_t *list);
a181 1
/* Perform macro expansion in-place on the given list. */
d201 1
a201 3
static void
_glcpp_parser_handle_version_declaration(glcpp_parser_t *parser, intmax_t version,
                                         const char *ident);
a212 2
/* Line 336 of yacc.c  */
#line 226 "glcpp/glcpp-parse.c"
d214 7
a220 7
# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif
d230 3
a232 10
/* In a future release of Bison, this section will be replaced
   by #include "glcpp-parse.h".  */
#ifndef GLCPP_PARSER_SRC_GLSL_GLCPP_GLCPP_PARSE_H
# define GLCPP_PARSER_SRC_GLSL_GLCPP_GLCPP_PARSE_H
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int glcpp_parser_debug;
d234 1
d246 28
a273 31
     HASH_DEFINE = 262,
     FUNC_IDENTIFIER = 263,
     OBJ_IDENTIFIER = 264,
     HASH_ELIF = 265,
     HASH_ELSE = 266,
     HASH_ENDIF = 267,
     HASH_IF = 268,
     HASH_IFDEF = 269,
     HASH_IFNDEF = 270,
     HASH_LINE = 271,
     HASH_UNDEF = 272,
     HASH_VERSION = 273,
     IDENTIFIER = 274,
     IF_EXPANDED = 275,
     INTEGER = 276,
     INTEGER_STRING = 277,
     LINE_EXPANDED = 278,
     NEWLINE = 279,
     OTHER = 280,
     PLACEHOLDER = 281,
     SPACE = 282,
     PASTE = 283,
     OR = 284,
     AND = 285,
     NOT_EQUAL = 286,
     EQUAL = 287,
     GREATER_OR_EQUAL = 288,
     LESS_OR_EQUAL = 289,
     RIGHT_SHIFT = 290,
     LEFT_SHIFT = 291,
     UNARY = 292
d278 1
d299 1
a299 13
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int glcpp_parser_parse (void *YYPARSE_PARAM);
#else
int glcpp_parser_parse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int glcpp_parser_parse (glcpp_parser_t *parser);
#else
int glcpp_parser_parse ();
#endif
#endif /* ! YYPARSE_PARAM */
a300 1
#endif /* !GLCPP_PARSER_SRC_GLSL_GLCPP_GLCPP_PARSE_H  */
d302 2
a303 4
/* Copy the second part of user declarations.  */

/* Line 353 of yacc.c  */
#line 340 "glcpp/glcpp-parse.c"
d406 1
a406 1
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
d409 2
a410 3
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
d433 1
a433 1
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
d437 2
a438 2
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
d443 1
a443 1
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
d450 1
a450 1
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
d481 17
a497 1
# define YYCOPY_NEEDED 1
a516 20
#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

d520 1
a520 1
#define YYLAST   670
d523 1
a523 1
#define YYNTOKENS  60
d525 1
a525 1
#define YYNNTS  19
d527 1
a527 1
#define YYNRULES  108
d529 1
a529 1
#define YYNSTATES  174
d533 1
a533 1
#define YYMAXUTOK   292
d544 4
a547 4
       2,     2,     2,    50,     2,     2,     2,    46,    33,     2,
      48,    49,    44,    42,    52,    43,    57,    45,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,    58,
      36,    59,    37,     2,     2,     2,     2,     2,     2,     2,
d550 1
a550 1
       2,    53,     2,    54,    32,     2,     2,     2,     2,     2,
d553 1
a553 1
       2,     2,     2,    55,    31,    56,    51,     2,     2,     2,
d569 1
a569 2
      25,    26,    27,    28,    29,    30,    34,    35,    38,    39,
      40,    41,    47
d577 11
a587 11
       0,     0,     3,     4,     7,     9,    13,    15,    17,    20,
      24,    28,    32,    37,    42,    49,    57,    61,    65,    68,
      73,    78,    82,    85,    86,    90,    91,    95,    99,   104,
     107,   109,   111,   113,   115,   119,   123,   127,   131,   135,
     139,   143,   147,   151,   155,   159,   163,   167,   171,   175,
     179,   183,   187,   190,   193,   196,   199,   203,   205,   209,
     211,   214,   217,   218,   220,   221,   223,   226,   231,   233,
     235,   238,   240,   243,   245,   247,   249,   251,   253,   255,
     257,   259,   261,   263,   265,   267,   269,   271,   273,   275,
     277,   279,   281,   283,   285,   287,   289,   291,   293,   295,
     297,   299,   301,   303,   305,   307,   309,   311,   313
d593 30
a622 32
      61,     0,    -1,    -1,    61,    62,    -1,    64,    -1,    16,
      76,    24,    -1,    70,    -1,    63,    -1,     6,    71,    -1,
      20,    68,    24,    -1,     5,    68,    24,    -1,    23,    67,
      24,    -1,    23,    67,    67,    24,    -1,     7,     9,    72,
      24,    -1,     7,     8,    48,    49,    72,    24,    -1,     7,
       8,    48,    69,    49,    72,    24,    -1,    17,    19,    24,
      -1,    13,    75,    24,    -1,    13,    24,    -1,    14,    19,
      73,    24,    -1,    15,    19,    73,    24,    -1,    10,    75,
      24,    -1,    10,    24,    -1,    -1,    11,    65,    24,    -1,
      -1,    12,    66,    24,    -1,    18,    67,    24,    -1,    18,
      67,    19,    24,    -1,     6,    24,    -1,    22,    -1,    21,
      -1,    67,    -1,    19,    -1,    68,    29,    68,    -1,    68,
      30,    68,    -1,    68,    31,    68,    -1,    68,    32,    68,
      -1,    68,    33,    68,    -1,    68,    34,    68,    -1,    68,
      35,    68,    -1,    68,    38,    68,    -1,    68,    39,    68,
      -1,    68,    37,    68,    -1,    68,    36,    68,    -1,    68,
      40,    68,    -1,    68,    41,    68,    -1,    68,    43,    68,
      -1,    68,    42,    68,    -1,    68,    46,    68,    -1,    68,
      45,    68,    -1,    68,    44,    68,    -1,    50,    68,    -1,
      51,    68,    -1,    43,    68,    -1,    42,    68,    -1,    48,
      68,    49,    -1,    19,    -1,    69,    52,    19,    -1,    24,
      -1,    76,    24,    -1,    76,    24,    -1,    -1,    76,    -1,
      -1,    76,    -1,     4,    19,    -1,     4,    48,    19,    49,
      -1,    77,    -1,    74,    -1,    75,    74,    -1,    77,    -1,
      76,    77,    -1,    19,    -1,    22,    -1,    78,    -1,    25,
      -1,    27,    -1,    53,    -1,    54,    -1,    48,    -1,    49,
      -1,    55,    -1,    56,    -1,    57,    -1,    33,    -1,    44,
      -1,    42,    -1,    43,    -1,    51,    -1,    50,    -1,    45,
      -1,    46,    -1,    41,    -1,    40,    -1,    36,    -1,    37,
      -1,    39,    -1,    38,    -1,    35,    -1,    34,    -1,    32,
      -1,    31,    -1,    30,    -1,    29,    -1,    58,    -1,    52,
      -1,    59,    -1,    28,    -1
d628 11
a638 11
       0,   188,   188,   190,   194,   197,   205,   210,   211,   215,
     218,   221,   229,   242,   245,   248,   251,   259,   279,   289,
     294,   299,   319,   334,   334,   337,   337,   340,   343,   346,
     350,   359,   364,   365,   370,   373,   376,   379,   382,   385,
     388,   391,   394,   397,   400,   403,   406,   409,   412,   415,
     423,   431,   434,   437,   440,   443,   446,   452,   457,   465,
     466,   470,   476,   477,   480,   482,   489,   493,   497,   502,
     506,   513,   518,   525,   529,   533,   537,   541,   548,   549,
     550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
     560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,   574,   575,   576,   577,   578
d642 1
a642 1
#if YYDEBUG || YYERROR_VERBOSE || 1
d648 12
a659 13
  "ELIF_EXPANDED", "HASH", "HASH_DEFINE", "FUNC_IDENTIFIER",
  "OBJ_IDENTIFIER", "HASH_ELIF", "HASH_ELSE", "HASH_ENDIF", "HASH_IF",
  "HASH_IFDEF", "HASH_IFNDEF", "HASH_LINE", "HASH_UNDEF", "HASH_VERSION",
  "IDENTIFIER", "IF_EXPANDED", "INTEGER", "INTEGER_STRING",
  "LINE_EXPANDED", "NEWLINE", "OTHER", "PLACEHOLDER", "SPACE", "PASTE",
  "OR", "AND", "'|'", "'^'", "'&'", "NOT_EQUAL", "EQUAL", "'<'", "'>'",
  "GREATER_OR_EQUAL", "LESS_OR_EQUAL", "RIGHT_SHIFT", "LEFT_SHIFT", "'+'",
  "'-'", "'*'", "'/'", "'%'", "UNARY", "'('", "')'", "'!'", "'~'", "','",
  "'['", "']'", "'{'", "'}'", "'.'", "';'", "'='", "$accept", "input",
  "line", "expanded_line", "control_line", "$@@1", "$@@2",
  "integer_constant", "expression", "identifier_list", "text_line",
  "non_directive", "replacement_list", "junk", "conditional_token",
  "conditional_tokens", "pp_tokens", "preprocessing_token", "operator", YY_NULL
d670 4
a673 4
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   124,    94,    38,   286,   287,    60,    62,   288,   289,
     290,   291,    43,    45,    42,    47,    37,   292,    40,    41,
      33,   126,    44,    91,    93,   123,   125,    46,    59,    61
d680 11
a690 11
       0,    60,    61,    61,    62,    62,    62,    62,    62,    63,
      63,    63,    63,    64,    64,    64,    64,    64,    64,    64,
      64,    64,    64,    65,    64,    66,    64,    64,    64,    64,
      67,    67,    68,    68,    68,    68,    68,    68,    68,    68,
      68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
      68,    68,    68,    68,    68,    68,    68,    69,    69,    70,
      70,    71,    72,    72,    73,    73,    74,    74,    74,    75,
      75,    76,    76,    77,    77,    77,    77,    77,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78
d696 3
a698 4
       0,     2,     0,     2,     1,     3,     1,     1,     2,     3,
       3,     3,     4,     4,     6,     7,     3,     3,     2,     4,
       4,     3,     2,     0,     3,     0,     3,     3,     4,     2,
       1,     1,     1,     1,     3,     3,     3,     3,     3,     3,
d700 4
a703 3
       3,     3,     2,     2,     2,     2,     3,     1,     3,     1,
       2,     2,     0,     1,     0,     1,     2,     4,     1,     1,
       2,     1,     2,     1,     1,     1,     1,     1,     1,     1,
d706 1
a706 1
       1,     1,     1,     1,     1,     1,     1,     1,     1
d709 2
a710 2
/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
d714 10
a723 10
       2,     0,     1,     0,     0,     0,     0,    23,    25,     0,
       0,     0,     0,     0,     0,    73,     0,    74,     0,    59,
      76,    77,   108,   104,   103,   102,   101,    85,   100,    99,
      95,    96,    98,    97,    94,    93,    87,    88,    86,    91,
      92,    80,    81,    90,    89,   106,    78,    79,    82,    83,
      84,   105,   107,     3,     7,     4,     6,     0,    71,    75,
      33,    31,    30,     0,     0,     0,     0,     0,    32,     0,
      29,     8,     0,     0,    62,     0,    22,    69,     0,    68,
       0,     0,    18,     0,    64,    64,     0,     0,     0,     0,
       0,    60,    72,    55,    54,     0,    52,    53,    10,     0,
d725 6
a730 7
       0,     0,     0,     0,     0,     0,     0,    61,     0,     0,
      63,    66,     0,    21,    70,    24,    26,    17,     0,    65,
       0,     5,    16,     0,    27,     9,    11,     0,    56,    34,
      35,    36,    37,    38,    39,    40,    44,    43,    41,    42,
      45,    46,    48,    47,    51,    50,    49,    57,    62,     0,
      13,     0,    19,    20,    28,    12,     0,    62,     0,    67,
      14,     0,    58,    15
d736 2
a737 2
      -1,     1,    53,    54,    55,    80,    81,    68,    69,   159,
      56,    71,   119,   128,    77,    78,   120,    58,    59
d742 1
a742 1
#define YYPACT_NINF -151
d745 17
a761 18
    -151,   115,  -151,   492,    -9,   108,   158,  -151,  -151,   201,
      -8,    48,   451,    50,    97,  -151,   492,  -151,    97,  -151,
    -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,
    -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,
    -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,
    -151,  -151,  -151,  -151,  -151,  -151,  -151,   328,  -151,  -151,
    -151,  -151,  -151,   492,   492,   492,   492,   492,  -151,   515,
    -151,  -151,   369,   -41,   451,    38,  -151,  -151,   244,  -151,
      47,    51,  -151,   287,   451,   451,   410,    57,   -10,   538,
      52,  -151,  -151,  -151,  -151,   487,  -151,  -151,  -151,   492,
     492,   492,   492,   492,   492,   492,   492,   492,   492,   492,
     492,   492,   492,   492,   492,   492,   492,  -151,    19,    59,
     451,  -151,    68,  -151,  -151,  -151,  -151,  -151,   100,   451,
     112,  -151,  -151,   117,  -151,  -151,  -151,   151,  -151,   555,
     571,   586,   600,   613,   624,   624,    18,    18,    18,    18,
      64,    64,    67,    67,  -151,  -151,  -151,  -151,   451,    30,
    -151,   127,  -151,  -151,  -151,  -151,   154,   451,   160,  -151,
    -151,   157,  -151,  -151
d767 2
a768 2
    -151,  -151,  -151,  -151,  -151,  -151,  -151,   -12,   -11,  -151,
    -151,  -151,  -150,    99,   -13,   209,     0,    -6,  -151
d773 2
a774 1
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
d778 2
a779 19
      79,    57,    88,    79,    72,    89,    90,   118,   166,   133,
      15,    84,    86,    17,   134,    70,    20,   171,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,   157,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    92,    93,    94,    95,    96,    97,   121,   110,   111,
     112,   113,   114,   115,   116,   124,    92,    85,   158,    87,
     124,   125,    79,    61,    62,   126,   136,    79,   137,   167,
      92,   132,   168,   160,   129,   129,   122,   161,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   112,   113,   114,   115,
     116,   114,   115,   116,    92,     2,    73,    74,    61,    62,
       3,     4,     5,    92,   162,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,   163,    17,    18,    19,
      20,   164,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    75,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,   165,   169,    15,   170,   172,
      17,   173,    76,    20,   130,    21,    22,    23,    24,    25,
d781 39
a819 24
      36,    37,    38,    39,    40,    75,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    83,     0,
      15,     0,     0,    17,     0,    82,    20,     0,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    75,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,     0,     0,    15,     0,     0,    17,     0,   123,    20,
       0,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    75,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,     0,     0,    15,     0,     0,    17,
       0,   127,    20,     0,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,     0,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    15,     0,     0,
      17,     0,    91,    20,     0,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,     0,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    15,     0,
       0,    17,     0,   117,    20,     0,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,     0,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    15,
       0,     0,    17,     0,   131,    20,     0,    21,    22,    23,
d821 15
a835 12
      34,    35,    36,    37,    38,    39,    40,     0,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      15,     0,     0,    17,     0,     0,    20,     0,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    60,     0,    61,    62,     0,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    63,    64,   138,     0,     0,    98,
      65,     0,    66,    67,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   135,     0,     0,     0,     0,    99,   100,   101,
d837 2
a838 10
     112,   113,   114,   115,   116,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116
a840 6
#define yypact_value_is_default(yystate) \
  ((yystate) == (-151))

#define yytable_value_is_error(yytable_value) \
  YYID (0)

d843 9
a851 9
       6,     1,    14,     9,     4,    16,    18,    48,   158,    19,
      19,    19,    12,    22,    24,    24,    25,   167,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    19,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    57,    63,    64,    65,    66,    67,    19,    40,    41,
      42,    43,    44,    45,    46,    78,    72,    19,    49,    19,
      83,    24,    78,    21,    22,    24,    24,    83,    90,    49,
      86,    24,    52,    24,    84,    85,    48,    19,    99,   100,
d853 36
a888 9
     111,   112,   113,   114,   115,   116,    42,    43,    44,    45,
      46,    44,    45,    46,   120,     0,     8,     9,    21,    22,
       5,     6,     7,   129,    24,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    24,    22,    23,    24,
      25,    24,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,     4,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    24,    49,    19,    24,    19,
      22,    24,    24,    25,    85,    27,    28,    29,    30,    31,
d890 1
a890 3
      42,    43,    44,    45,    46,     4,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,     9,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    -1,    27,    28,
d892 3
a894 16
      39,    40,    41,    42,    43,    44,    45,    46,     4,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      -1,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,     4,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    -1,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    19,    -1,    -1,
      22,    -1,    24,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    19,    -1,
      -1,    22,    -1,    24,    25,    -1,    27,    28,    29,    30,
d896 2
a897 3
      41,    42,    43,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    19,
      -1,    -1,    22,    -1,    24,    25,    -1,    27,    28,    29,
d899 2
a900 7
      40,    41,    42,    43,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      19,    -1,    -1,    22,    -1,    -1,    25,    -1,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    19,    -1,    21,    22,    -1,    29,    30,    31,    32,
d902 2
a903 15
      43,    44,    45,    46,    42,    43,    49,    -1,    -1,    24,
      48,    -1,    50,    51,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46
d910 17
a926 18
       0,    61,     0,     5,     6,     7,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    22,    23,    24,
      25,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    62,    63,    64,    70,    76,    77,    78,
      19,    21,    22,    42,    43,    48,    50,    51,    67,    68,
      24,    71,    76,     8,     9,     4,    24,    74,    75,    77,
      65,    66,    24,    75,    19,    19,    76,    19,    67,    68,
      67,    24,    77,    68,    68,    68,    68,    68,    24,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    24,    48,    72,
      76,    19,    48,    24,    74,    24,    24,    24,    73,    76,
      73,    24,    24,    19,    24,    24,    24,    67,    49,    68,
      68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
      68,    68,    68,    68,    68,    68,    68,    19,    49,    69,
      24,    19,    24,    24,    24,    24,    72,    49,    52,    49,
      24,    72,    19,    24
d956 12
a967 12
#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
d977 1
d982 1
d984 16
a999 16
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
a1002 3
#define YYRHSLOC(Rhs, K) ((Rhs)[K])


a1072 2
  FILE *yyo = yyoutput;
  YYUSE (yyo);
d1218 1
d1321 9
a1329 11
/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
d1331 1
a1331 73
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  YYSIZE_T yysize1;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                if (! (yysize <= yysize1
                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                  return 2;
                yysize = yysize1;
              }
        }
    }
d1333 3
a1335 1
  switch (yycount)
d1337 66
a1402 12
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }
d1404 22
a1425 12
  yysize1 = yysize + yystrlen (yyformat);
  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
    return 2;
  yysize = yysize1;

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
a1426 20

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
d1429 1
d1466 14
d1483 5
a1487 3
/*----------.
| yyparse.  |
`----------*/
d1532 1
a1532 1
       Refer to the stacks through separate pointers, to allow yyoverflow
d1605 3
a1607 2
/* Line 1572 of yacc.c  */
#line 155 "glcpp/glcpp-parse.y"
d1615 3
a1617 2
/* Line 1572 of yacc.c  */
#line 1696 "glcpp/glcpp-parse.c"
d1619 1
d1716 1
a1716 1
  if (yypact_value_is_default (yyn))
d1747 2
a1748 2
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
d1803 3
a1805 2
/* Line 1787 of yacc.c  */
#line 194 "glcpp/glcpp-parse.y"
d1807 2
a1808 2
		ralloc_asprintf_rewrite_tail (&parser->output, &parser->output_length, "\n");
	}
a1811 11
/* Line 1787 of yacc.c  */
#line 197 "glcpp/glcpp-parse.y"
    {
		if (parser->skip_stack == NULL ||
		    parser->skip_stack->type == SKIP_NO_SKIP)
		{
			_glcpp_parser_expand_and_lex_from (parser,
							   LINE_EXPANDED, (yyvsp[(2) - (3)].token_list));
		}
	}
    break;
d1813 2
a1814 3
  case 6:
/* Line 1787 of yacc.c  */
#line 205 "glcpp/glcpp-parse.y"
d1817 1
a1817 1
		ralloc_asprintf_rewrite_tail (&parser->output, &parser->output_length, "\n");
d1819 1
a1819 1
	}
d1822 4
a1825 3
  case 9:
/* Line 1787 of yacc.c  */
#line 215 "glcpp/glcpp-parse.y"
d1828 1
a1828 1
	}
d1831 4
a1834 3
  case 10:
/* Line 1787 of yacc.c  */
#line 218 "glcpp/glcpp-parse.y"
d1837 1
a1837 1
	}
d1840 1
a1840 12
  case 11:
/* Line 1787 of yacc.c  */
#line 221 "glcpp/glcpp-parse.y"
    {
		parser->has_new_line_number = 1;
		parser->new_line_number = (yyvsp[(2) - (3)].ival);
		ralloc_asprintf_rewrite_tail (&parser->output,
					      &parser->output_length,
					      "#line %" PRIiMAX "\n",
					      (yyvsp[(2) - (3)].ival));
	}
    break;
d1842 2
a1843 3
  case 12:
/* Line 1787 of yacc.c  */
#line 229 "glcpp/glcpp-parse.y"
d1845 2
a1846 9
		parser->has_new_line_number = 1;
		parser->new_line_number = (yyvsp[(2) - (4)].ival);
		parser->has_new_source_number = 1;
		parser->new_source_number = (yyvsp[(3) - (4)].ival);
		ralloc_asprintf_rewrite_tail (&parser->output,
					      &parser->output_length,
					      "#line %" PRIiMAX " %" PRIiMAX "\n",
					      (yyvsp[(2) - (4)].ival), (yyvsp[(3) - (4)].ival));
	}
d1849 1
a1849 7
  case 13:
/* Line 1787 of yacc.c  */
#line 242 "glcpp/glcpp-parse.y"
    {
		_define_object_macro (parser, & (yylsp[(2) - (4)]), (yyvsp[(2) - (4)].str), (yyvsp[(3) - (4)].token_list));
	}
    break;
d1851 2
a1852 3
  case 14:
/* Line 1787 of yacc.c  */
#line 245 "glcpp/glcpp-parse.y"
d1855 1
a1855 1
	}
d1858 4
a1861 3
  case 15:
/* Line 1787 of yacc.c  */
#line 248 "glcpp/glcpp-parse.y"
d1864 1
a1864 1
	}
d1867 4
a1870 3
  case 16:
/* Line 1787 of yacc.c  */
#line 251 "glcpp/glcpp-parse.y"
d1878 1
a1878 1
	}
d1881 4
a1884 3
  case 17:
/* Line 1787 of yacc.c  */
#line 259 "glcpp/glcpp-parse.y"
d1896 1
a1896 2
			_glcpp_parser_expand_and_lex_from (parser,
							   IF_EXPANDED, (yyvsp[(2) - (3)].token_list));
d1903 1
a1903 1
	}
d1906 4
a1909 3
  case 18:
/* Line 1787 of yacc.c  */
#line 279 "glcpp/glcpp-parse.y"
d1919 1
a1919 1
	}
d1922 4
a1925 3
  case 19:
/* Line 1787 of yacc.c  */
#line 289 "glcpp/glcpp-parse.y"
d1930 1
a1930 1
	}
d1933 4
a1936 3
  case 20:
/* Line 1787 of yacc.c  */
#line 294 "glcpp/glcpp-parse.y"
d1941 1
a1941 1
	}
d1944 4
a1947 3
  case 21:
/* Line 1787 of yacc.c  */
#line 299 "glcpp/glcpp-parse.y"
d1959 1
a1959 2
			_glcpp_parser_expand_and_lex_from (parser,
							   ELIF_EXPANDED, (yyvsp[(2) - (3)].token_list));
d1966 1
a1966 1
	}
d1969 4
a1972 3
  case 22:
/* Line 1787 of yacc.c  */
#line 319 "glcpp/glcpp-parse.y"
d1987 1
a1987 1
	}
d1990 4
a1993 3
  case 23:
/* Line 1787 of yacc.c  */
#line 334 "glcpp/glcpp-parse.y"
d1995 2
a1996 2
		_glcpp_parser_skip_stack_change_if (parser, & (yylsp[(1) - (1)]), "else", 1);
	}
d1999 4
a2002 3
  case 25:
/* Line 1787 of yacc.c  */
#line 337 "glcpp/glcpp-parse.y"
d2004 2
a2005 2
		_glcpp_parser_skip_stack_pop (parser, & (yylsp[(1) - (1)]));
	}
d2008 4
a2011 3
  case 27:
/* Line 1787 of yacc.c  */
#line 340 "glcpp/glcpp-parse.y"
d2013 20
a2032 2
		_glcpp_parser_handle_version_declaration(parser, (yyvsp[(2) - (3)].ival), NULL);
	}
d2035 1
a2035 7
  case 28:
/* Line 1787 of yacc.c  */
#line 343 "glcpp/glcpp-parse.y"
    {
		_glcpp_parser_handle_version_declaration(parser, (yyvsp[(2) - (4)].ival), (yyvsp[(3) - (4)].str));
	}
    break;
d2037 2
a2038 3
  case 30:
/* Line 1787 of yacc.c  */
#line 350 "glcpp/glcpp-parse.y"
d2047 1
a2047 1
	}
d2050 4
a2053 3
  case 31:
/* Line 1787 of yacc.c  */
#line 359 "glcpp/glcpp-parse.y"
d2056 1
a2056 1
	}
d2059 1
a2059 9
  case 33:
/* Line 1787 of yacc.c  */
#line 365 "glcpp/glcpp-parse.y"
    {
		if (parser->is_gles)
			glcpp_error(& (yylsp[(1) - (1)]), parser, "undefined macro %s in expression (illegal in GLES)", (yyvsp[(1) - (1)].str));
		(yyval.ival) = 0;
	}
    break;
d2061 2
a2062 3
  case 34:
/* Line 1787 of yacc.c  */
#line 370 "glcpp/glcpp-parse.y"
d2065 1
a2065 1
	}
d2068 4
a2071 3
  case 35:
/* Line 1787 of yacc.c  */
#line 373 "glcpp/glcpp-parse.y"
d2074 1
a2074 1
	}
d2077 4
a2080 3
  case 36:
/* Line 1787 of yacc.c  */
#line 376 "glcpp/glcpp-parse.y"
d2083 1
a2083 1
	}
d2086 4
a2089 3
  case 37:
/* Line 1787 of yacc.c  */
#line 379 "glcpp/glcpp-parse.y"
d2092 1
a2092 1
	}
d2095 4
a2098 3
  case 38:
/* Line 1787 of yacc.c  */
#line 382 "glcpp/glcpp-parse.y"
d2101 1
a2101 1
	}
d2104 4
a2107 3
  case 39:
/* Line 1787 of yacc.c  */
#line 385 "glcpp/glcpp-parse.y"
d2110 1
a2110 1
	}
d2113 4
a2116 3
  case 40:
/* Line 1787 of yacc.c  */
#line 388 "glcpp/glcpp-parse.y"
d2119 1
a2119 1
	}
d2122 4
a2125 3
  case 41:
/* Line 1787 of yacc.c  */
#line 391 "glcpp/glcpp-parse.y"
d2128 1
a2128 1
	}
d2131 4
a2134 3
  case 42:
/* Line 1787 of yacc.c  */
#line 394 "glcpp/glcpp-parse.y"
d2137 1
a2137 1
	}
d2140 4
a2143 3
  case 43:
/* Line 1787 of yacc.c  */
#line 397 "glcpp/glcpp-parse.y"
d2146 1
a2146 1
	}
d2149 4
a2152 3
  case 44:
/* Line 1787 of yacc.c  */
#line 400 "glcpp/glcpp-parse.y"
d2155 1
a2155 1
	}
d2158 4
a2161 3
  case 45:
/* Line 1787 of yacc.c  */
#line 403 "glcpp/glcpp-parse.y"
d2164 1
a2164 1
	}
d2167 4
a2170 3
  case 46:
/* Line 1787 of yacc.c  */
#line 406 "glcpp/glcpp-parse.y"
d2173 1
a2173 1
	}
d2176 4
a2179 3
  case 47:
/* Line 1787 of yacc.c  */
#line 409 "glcpp/glcpp-parse.y"
d2182 1
a2182 1
	}
d2185 4
a2188 3
  case 48:
/* Line 1787 of yacc.c  */
#line 412 "glcpp/glcpp-parse.y"
d2191 1
a2191 1
	}
d2194 4
a2197 3
  case 49:
/* Line 1787 of yacc.c  */
#line 415 "glcpp/glcpp-parse.y"
d2205 1
a2205 1
	}
d2208 4
a2211 3
  case 50:
/* Line 1787 of yacc.c  */
#line 423 "glcpp/glcpp-parse.y"
d2219 1
a2219 1
	}
d2222 4
a2225 3
  case 51:
/* Line 1787 of yacc.c  */
#line 431 "glcpp/glcpp-parse.y"
d2228 1
a2228 1
	}
d2231 4
a2234 3
  case 52:
/* Line 1787 of yacc.c  */
#line 434 "glcpp/glcpp-parse.y"
d2237 1
a2237 1
	}
d2240 4
a2243 3
  case 53:
/* Line 1787 of yacc.c  */
#line 437 "glcpp/glcpp-parse.y"
d2246 1
a2246 1
	}
d2249 4
a2252 3
  case 54:
/* Line 1787 of yacc.c  */
#line 440 "glcpp/glcpp-parse.y"
d2255 1
a2255 1
	}
d2258 4
a2261 3
  case 55:
/* Line 1787 of yacc.c  */
#line 443 "glcpp/glcpp-parse.y"
d2264 1
a2264 1
	}
d2267 4
a2270 3
  case 56:
/* Line 1787 of yacc.c  */
#line 446 "glcpp/glcpp-parse.y"
d2273 1
a2273 1
	}
d2276 4
a2279 3
  case 57:
/* Line 1787 of yacc.c  */
#line 452 "glcpp/glcpp-parse.y"
d2284 1
a2284 1
	}
d2287 4
a2290 3
  case 58:
/* Line 1787 of yacc.c  */
#line 457 "glcpp/glcpp-parse.y"
d2295 1
a2295 1
	}
d2298 5
a2302 4
  case 59:
/* Line 1787 of yacc.c  */
#line 465 "glcpp/glcpp-parse.y"
    { (yyval.token_list) = NULL; }
d2305 4
a2308 3
  case 61:
/* Line 1787 of yacc.c  */
#line 470 "glcpp/glcpp-parse.y"
d2311 1
a2311 1
	}
d2314 5
a2318 4
  case 62:
/* Line 1787 of yacc.c  */
#line 476 "glcpp/glcpp-parse.y"
    { (yyval.token_list) = NULL; }
d2321 4
a2324 3
  case 65:
/* Line 1787 of yacc.c  */
#line 482 "glcpp/glcpp-parse.y"
d2327 1
a2327 1
	}
d2330 4
a2333 3
  case 66:
/* Line 1787 of yacc.c  */
#line 489 "glcpp/glcpp-parse.y"
d2337 1
a2337 1
	}
d2340 4
a2343 3
  case 67:
/* Line 1787 of yacc.c  */
#line 493 "glcpp/glcpp-parse.y"
d2347 1
a2347 1
	}
d2350 4
a2353 3
  case 69:
/* Line 1787 of yacc.c  */
#line 502 "glcpp/glcpp-parse.y"
d2357 1
a2357 1
	}
d2360 4
a2363 3
  case 70:
/* Line 1787 of yacc.c  */
#line 506 "glcpp/glcpp-parse.y"
d2367 1
a2367 1
	}
d2370 4
a2373 3
  case 71:
/* Line 1787 of yacc.c  */
#line 513 "glcpp/glcpp-parse.y"
d2378 1
a2378 1
	}
d2381 4
a2384 3
  case 72:
/* Line 1787 of yacc.c  */
#line 518 "glcpp/glcpp-parse.y"
d2388 1
a2388 1
	}
d2391 4
a2394 3
  case 73:
/* Line 1787 of yacc.c  */
#line 525 "glcpp/glcpp-parse.y"
d2398 1
a2398 1
	}
d2401 4
a2404 3
  case 74:
/* Line 1787 of yacc.c  */
#line 529 "glcpp/glcpp-parse.y"
d2408 1
a2408 1
	}
d2411 4
a2414 3
  case 75:
/* Line 1787 of yacc.c  */
#line 533 "glcpp/glcpp-parse.y"
d2418 1
a2418 1
	}
d2421 4
a2424 3
  case 76:
/* Line 1787 of yacc.c  */
#line 537 "glcpp/glcpp-parse.y"
d2428 1
a2428 1
	}
d2431 4
a2434 3
  case 77:
/* Line 1787 of yacc.c  */
#line 541 "glcpp/glcpp-parse.y"
d2438 50
a2487 1
	}
d2491 4
a2494 3
/* Line 1787 of yacc.c  */
#line 548 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '['; }
d2498 4
a2501 3
/* Line 1787 of yacc.c  */
#line 549 "glcpp/glcpp-parse.y"
    { (yyval.ival) = ']'; }
d2505 4
a2508 3
/* Line 1787 of yacc.c  */
#line 550 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '('; }
d2512 4
a2515 3
/* Line 1787 of yacc.c  */
#line 551 "glcpp/glcpp-parse.y"
    { (yyval.ival) = ')'; }
d2519 4
a2522 3
/* Line 1787 of yacc.c  */
#line 552 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '{'; }
d2526 4
a2529 3
/* Line 1787 of yacc.c  */
#line 553 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '}'; }
d2533 4
a2536 3
/* Line 1787 of yacc.c  */
#line 554 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '.'; }
d2540 4
a2543 3
/* Line 1787 of yacc.c  */
#line 555 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '&'; }
d2547 4
a2550 3
/* Line 1787 of yacc.c  */
#line 556 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '*'; }
d2554 4
a2557 3
/* Line 1787 of yacc.c  */
#line 557 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '+'; }
d2561 4
a2564 3
/* Line 1787 of yacc.c  */
#line 558 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '-'; }
d2568 4
a2571 3
/* Line 1787 of yacc.c  */
#line 559 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '~'; }
d2575 4
a2578 3
/* Line 1787 of yacc.c  */
#line 560 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '!'; }
d2582 4
a2585 3
/* Line 1787 of yacc.c  */
#line 561 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '/'; }
d2589 4
a2592 3
/* Line 1787 of yacc.c  */
#line 562 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '%'; }
d2596 4
a2599 3
/* Line 1787 of yacc.c  */
#line 563 "glcpp/glcpp-parse.y"
    { (yyval.ival) = LEFT_SHIFT; }
d2603 4
a2606 3
/* Line 1787 of yacc.c  */
#line 564 "glcpp/glcpp-parse.y"
    { (yyval.ival) = RIGHT_SHIFT; }
d2610 4
a2613 3
/* Line 1787 of yacc.c  */
#line 565 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '<'; }
d2617 4
a2620 3
/* Line 1787 of yacc.c  */
#line 566 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '>'; }
d2624 4
a2627 3
/* Line 1787 of yacc.c  */
#line 567 "glcpp/glcpp-parse.y"
    { (yyval.ival) = LESS_OR_EQUAL; }
d2631 4
a2634 3
/* Line 1787 of yacc.c  */
#line 568 "glcpp/glcpp-parse.y"
    { (yyval.ival) = GREATER_OR_EQUAL; }
d2638 4
a2641 3
/* Line 1787 of yacc.c  */
#line 569 "glcpp/glcpp-parse.y"
    { (yyval.ival) = EQUAL; }
d2645 4
a2648 3
/* Line 1787 of yacc.c  */
#line 570 "glcpp/glcpp-parse.y"
    { (yyval.ival) = NOT_EQUAL; }
a2651 4
/* Line 1787 of yacc.c  */
#line 571 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '^'; }
    break;
d2653 3
a2655 34
  case 102:
/* Line 1787 of yacc.c  */
#line 572 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '|'; }
    break;

  case 103:
/* Line 1787 of yacc.c  */
#line 573 "glcpp/glcpp-parse.y"
    { (yyval.ival) = AND; }
    break;

  case 104:
/* Line 1787 of yacc.c  */
#line 574 "glcpp/glcpp-parse.y"
    { (yyval.ival) = OR; }
    break;

  case 105:
/* Line 1787 of yacc.c  */
#line 575 "glcpp/glcpp-parse.y"
    { (yyval.ival) = ';'; }
    break;

  case 106:
/* Line 1787 of yacc.c  */
#line 576 "glcpp/glcpp-parse.y"
    { (yyval.ival) = ','; }
    break;

  case 107:
/* Line 1787 of yacc.c  */
#line 577 "glcpp/glcpp-parse.y"
    { (yyval.ival) = '='; }
a2657 5
  case 108:
/* Line 1787 of yacc.c  */
#line 578 "glcpp/glcpp-parse.y"
    { (yyval.ival) = PASTE; }
    break;
d2660 2
a2661 2
/* Line 1787 of yacc.c  */
#line 2691 "glcpp/glcpp-parse.c"
a2663 11
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
a2691 4
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

a2698 2
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
d2700 29
a2728 25
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, parser, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
a2729 1
# undef YYSYNTAX_ERROR
d2789 1
a2789 1
      if (!yypact_value_is_default (yyn))
d2841 1
a2841 1
#if !defined yyoverflow || YYERROR_VERBOSE
d2853 2
a2854 7
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, parser);
    }
d2878 3
a2880 2
/* Line 2048 of yacc.c  */
#line 581 "glcpp/glcpp-parse.y"
d3091 2
d3234 1
a3234 1
_token_print (char **out, size_t *len, token_t *token)
d3237 1
a3237 1
		ralloc_asprintf_rewrite_tail (out, len, "%c", token->type);
d3243 1
a3243 1
		ralloc_asprintf_rewrite_tail (out, len, "%" PRIiMAX, token->value.ival);
d3248 1
a3248 1
		ralloc_asprintf_rewrite_tail (out, len, "%s", token->value.str);
d3251 1
a3251 1
		ralloc_asprintf_rewrite_tail (out, len, " ");
d3254 1
a3254 1
		ralloc_asprintf_rewrite_tail (out, len, "<<");
d3257 1
a3257 1
		ralloc_asprintf_rewrite_tail (out, len, ">>");
d3260 1
a3260 1
		ralloc_asprintf_rewrite_tail (out, len, "<=");
d3263 1
a3263 1
		ralloc_asprintf_rewrite_tail (out, len, ">=");
d3266 1
a3266 1
		ralloc_asprintf_rewrite_tail (out, len, "==");
d3269 1
a3269 1
		ralloc_asprintf_rewrite_tail (out, len, "!=");
d3272 1
a3272 1
		ralloc_asprintf_rewrite_tail (out, len, "&&");
d3275 1
a3275 1
		ralloc_asprintf_rewrite_tail (out, len, "||");
d3278 1
a3278 1
		ralloc_asprintf_rewrite_tail (out, len, "##");
d3281 1
a3281 1
		ralloc_asprintf_rewrite_tail (out, len, ",");
d3350 2
a3351 3
	/* Two string-valued (or integer) tokens can usually just be
	 * mashed together. (We also handle a string followed by an
	 * integer here as well.)
d3353 7
a3359 7
	 * There are some exceptions here. Notably, if the first token
	 * is an integer (or a string representing an integer), then
	 * the second token must also be an integer or must be a
	 * string representing an integer that begins with a digit.
	 */
	if ((token->type == IDENTIFIER || token->type == OTHER || token->type == INTEGER_STRING || token->type == INTEGER) &&
	    (other->type == IDENTIFIER || other->type == OTHER || other->type == INTEGER_STRING || other->type == INTEGER))
a3361 41
		int combined_type;

		/* Check that pasting onto an integer doesn't create a
		 * non-integer, (that is, only digits can be
		 * pasted. */
		if (token->type == INTEGER_STRING || token->type == INTEGER)
		{
			switch (other->type) {
			case INTEGER_STRING:
				if (other->value.str[0] < '0' ||
				    other->value.str[0] > '9')
					goto FAIL;
				break;
			case INTEGER:
				if (other->value.ival < 0)
					goto FAIL;
				break;
			default:
				goto FAIL;
			}
		}

		if (token->type == INTEGER)
			str = ralloc_asprintf (token, "%" PRIiMAX,
					       token->value.ival);
		else
			str = ralloc_strdup (token, token->value.str);
					       

		if (other->type == INTEGER)
			ralloc_asprintf_append (&str, "%" PRIiMAX,
						other->value.ival);
		else
			ralloc_strcat (&str, other->value.str);

		/* New token is same type as original token, unless we
		 * started with an integer, in which case we will be
		 * creating an integer-string. */
		combined_type = token->type;
		if (combined_type == INTEGER)
			combined_type = INTEGER_STRING;
d3363 3
a3365 1
		combined = _token_create_str (token, combined_type, str);
a3369 1
    FAIL:
d3371 5
a3375 5
	ralloc_asprintf_rewrite_tail (&parser->info_log, &parser->info_log_length, "Pasting \"");
	_token_print (&parser->info_log, &parser->info_log_length, token);
	ralloc_asprintf_rewrite_tail (&parser->info_log, &parser->info_log_length, "\" and \"");
	_token_print (&parser->info_log, &parser->info_log_length, other);
	ralloc_asprintf_rewrite_tail (&parser->info_log, &parser->info_log_length, "\" does not give a valid preprocessing token.\n");
d3389 1
a3389 1
		_token_print (&parser->output, &parser->output_length, node->token);
a3434 1
	parser->output_length = 0;
a3435 1
	parser->info_log_length = 0;
a3437 7
	parser->has_new_line_number = 0;
	parser->new_line_number = 1;
	parser->has_new_source_number = 0;
	parser->new_source_number = 0;

	parser->is_gles = false;

d3439 2
a3440 34
	if (api == API_OPENGLES2) {
           parser->is_gles = true;
           add_builtin_define(parser, "GL_ES", 1);

           if (extensions != NULL) {
              if (extensions->OES_EGL_image_external)
                 add_builtin_define(parser, "GL_OES_EGL_image_external", 1);
           }
	} else {
	   add_builtin_define(parser, "GL_ARB_draw_buffers", 1);
	   add_builtin_define(parser, "GL_ARB_texture_rectangle", 1);

	   if (extensions != NULL) {
	      if (extensions->EXT_texture_array) {
	         add_builtin_define(parser, "GL_EXT_texture_array", 1);
	      }

	      if (extensions->ARB_fragment_coord_conventions)
	         add_builtin_define(parser, "GL_ARB_fragment_coord_conventions",
				    1);

	      if (extensions->ARB_explicit_attrib_location)
	         add_builtin_define(parser, "GL_ARB_explicit_attrib_location", 1);

	      if (extensions->ARB_shader_texture_lod)
	         add_builtin_define(parser, "GL_ARB_shader_texture_lod", 1);

	      if (extensions->ARB_draw_instanced)
	         add_builtin_define(parser, "GL_ARB_draw_instanced", 1);

	      if (extensions->ARB_conservative_depth) {
	         add_builtin_define(parser, "GL_AMD_conservative_depth", 1);
	         add_builtin_define(parser, "GL_ARB_conservative_depth", 1);
	      }
d3442 2
a3443 2
	      if (extensions->ARB_shader_bit_encoding)
	         add_builtin_define(parser, "GL_ARB_shader_bit_encoding", 1);
d3445 4
a3448 14
	      if (extensions->ARB_uniform_buffer_object)
	         add_builtin_define(parser, "GL_ARB_uniform_buffer_object", 1);

	      if (extensions->ARB_texture_cube_map_array)
	         add_builtin_define(parser, "GL_ARB_texture_cube_map_array", 1);

	      if (extensions->ARB_shading_language_packing)
	         add_builtin_define(parser, "GL_ARB_shading_language_packing", 1);

	      if (extensions->ARB_texture_multisample)
	         add_builtin_define(parser, "GL_ARB_texture_multisample", 1);

	      if (extensions->ARB_texture_query_lod)
	         add_builtin_define(parser, "GL_ARB_texture_query_lod", 1);
d3450 3
a3452 2
	      if (extensions->ARB_gpu_shader5)
	         add_builtin_define(parser, "GL_ARB_gpu_shader5", 1);
d3454 2
a3455 6
	      if (extensions->AMD_vertex_shader_layer)
	         add_builtin_define(parser, "GL_AMD_vertex_shader_layer", 1);

	      if (extensions->ARB_shading_language_420pack)
	         add_builtin_define(parser, "GL_ARB_shading_language_420pack", 1);
	   }
d3464 6
d3569 1
a3569 1
_token_list_create_with_one_ival (void *ctx, int type, int ival)
d3572 1
a3572 1
	token_t *node;
d3575 2
a3576 2
	node = _token_create_ival (list, type, ival);
	_token_list_append (list, node);
a3580 17
static token_list_t *
_token_list_create_with_one_space (void *ctx)
{
	return _token_list_create_with_one_ival (ctx, SPACE, SPACE);
}

static token_list_t *
_token_list_create_with_one_integer (void *ctx, int ival)
{
	return _token_list_create_with_one_ival (ctx, INTEGER, ival);
}

/* Perform macro expansion on 'list', placing the resulting tokens
 * into a new list which is initialized with a first token of type
 * 'head_token_type'. Then begin lexing from the resulting list,
 * (return to the current lexing source when this list is exhausted).
 */
d3582 1
a3582 3
_glcpp_parser_expand_and_lex_from (glcpp_parser_t *parser,
				   int head_token_type,
				   token_list_t *list)
d3588 1
a3588 1
	token = _token_create_ival (parser, head_token_type, head_token_type);
a3594 42
static void
_glcpp_parser_apply_pastes (glcpp_parser_t *parser, token_list_t *list)
{
	token_node_t *node;

	node = list->head;
	while (node)
	{
		token_node_t *next_non_space;

		/* Look ahead for a PASTE token, skipping space. */
		next_non_space = node->next;
		while (next_non_space && next_non_space->token->type == SPACE)
			next_non_space = next_non_space->next;

		if (next_non_space == NULL)
			break;

		if (next_non_space->token->type != PASTE) {
			node = next_non_space;
			continue;
		}

		/* Now find the next non-space token after the PASTE. */
		next_non_space = next_non_space->next;
		while (next_non_space && next_non_space->token->type == SPACE)
			next_non_space = next_non_space->next;

		if (next_non_space == NULL) {
			yyerror (&node->token->location, parser, "'##' cannot appear at either end of a macro expansion\n");
			return;
		}

		node->token = _token_paste (parser, node->token, next_non_space->token);
		node->next = next_non_space->next;
		if (next_non_space == list->tail)
			list->tail = node;
	}

	list->non_space_tail = list->tail;
}

d3706 37
a3742 1
	_glcpp_parser_apply_pastes (parser, substituted);
d3784 1
a3784 1
	*last = node;
a3785 10

	/* Special handling for __LINE__ and __FILE__, (not through
	 * the hash table). */
	if (strcmp(identifier, "__LINE__") == 0)
		return _token_list_create_with_one_integer (parser, node->token->location.first_line);

	if (strcmp(identifier, "__FILE__") == 0)
		return _token_list_create_with_one_integer (parser, node->token->location.source);

	/* Look up this identifier in the hash table. */
d3806 1
d3812 1
a3812 1
		token_list_t *replacement;
d3818 1
a3818 3
		replacement = _token_list_copy (parser, macro->replacements);
		_glcpp_parser_apply_pastes (parser, replacement);
		return replacement;
d3974 2
a3975 2
	if (strstr(identifier, "__")) {
		glcpp_error (loc, parser, "Macro names containing \"__\" are reserved.\n");
d4102 1
a4102 1
		else if (ret == HASH_DEFINE ||
a4222 39
}

static void
_glcpp_parser_handle_version_declaration(glcpp_parser_t *parser, intmax_t version,
                                         const char *es_identifier)
{
	macro_t *macro = hash_table_find (parser->defines, "__VERSION__");
	if (macro) {
		hash_table_remove (parser->defines, "__VERSION__");
		ralloc_free (macro);
	}
	add_builtin_define (parser, "__VERSION__", version);

	/* If we didn't have a GLES context to begin with, (indicated
	 * by parser->api), then the version declaration here might
	 * indicate GLES. */
	if (! parser->is_gles &&
	    (version == 100 ||
	     (es_identifier && (strcmp(es_identifier, "es") == 0))))
	{
		parser->is_gles = true;
		add_builtin_define (parser, "GL_ES", 1);
	}

	if (version >= 150)
		add_builtin_define(parser, "GL_core_profile", 1);

	/* Currently, all ES2/ES3 implementations support highp in the
	 * fragment shader, so we always define this macro in ES2/ES3.
	 * If we ever get a driver that doesn't support highp, we'll
	 * need to add a flag to the gl_context and check that here.
	 */
	if (version >= 130 || parser->is_gles)
		add_builtin_define (parser, "GL_FRAGMENT_PRECISION_HIGH", 1);

	ralloc_asprintf_rewrite_tail (&parser->output, &parser->output_length,
                                      "#version %" PRIiMAX "%s%s", version,
                                      es_identifier ? " " : "",
                                      es_identifier ? es_identifier : "");
@


1.1.1.3
log
@Import Mesa 9.2.1
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.7.12-4996.  */
d5 1
a5 1
      Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
d47 1
a47 1
#define YYBISON_VERSION "2.7.12-4996"
d73 1
a73 1
/* Line 371 of yacc.c  */
d224 1
a224 1
/* Line 371 of yacc.c  */
d245 2
a246 2
#ifndef YY_GLCPP_PARSER_SRC_GLSL_GLCPP_GLCPP_PARSE_H_INCLUDED
# define YY_GLCPP_PARSER_SRC_GLSL_GLCPP_GLCPP_PARSE_H_INCLUDED
d334 1
a334 1
#endif /* !YY_GLCPP_PARSER_SRC_GLSL_GLCPP_GLCPP_PARSE_H_INCLUDED  */
d338 1
a338 1
/* Line 390 of yacc.c  */
d392 1
a392 1
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
d396 1
a396 9
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5))
#  define __attribute__(Spec) /* empty */
d402 1
a402 1
# define YYUSE(E) ((void) (E))
d404 1
a404 1
# define YYUSE(E) /* empty */
a406 1

d409 1
a409 1
# define YYID(N) (N)
d894 2
a895 2
#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-151)))
d897 1
a897 1
#define yytable_value_is_error(Yytable_value) \
d1040 1
a1040 1
/* Error token number */
a1043 1

d1071 1
d1078 4
a1081 40

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += fprintf (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += fprintf (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += fprintf (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += fprintf (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += fprintf (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

d1089 1
d1153 5
a1157 1
  YYUSE (yytype);
d1404 1
d1467 5
a1471 7
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
d1491 4
a1494 6
  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }
d1554 6
a1559 1
  YYUSE (yytype);
a1593 28

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
static YYSTYPE yyval_default;
# define YY_INITIAL_VALUE(Value) = Value
#endif
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

d1595 1
a1595 1
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);
d1598 1
a1598 2
YYLTYPE yylloc = yyloc_default;

d1638 1
a1638 1
  int yytoken = 0;
d1657 4
a1660 3
  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
d1670 14
d1685 1
a1685 1
/* Line 1570 of yacc.c  */
d1694 2
a1695 2
/* Line 1570 of yacc.c  */
#line 1748 "glcpp/glcpp-parse.c"
a1841 1
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
a1842 1
  YY_IGNORE_MAYBE_UNINITIALIZED_END
d2690 1
a2690 1
#line 2745 "glcpp/glcpp-parse.c"
a2854 1
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
a2855 1
  YY_IGNORE_MAYBE_UNINITIALIZED_END
d2926 1
a2926 1
/* Line 2050 of yacc.c  */
d4433 1
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 3.0.2.  */
d4 3
a6 3

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

d11 1
a11 1

d16 1
a16 1

d29 1
a29 1

d47 1
a47 1
#define YYBISON_VERSION "3.0.2"
d66 2
d70 1
a70 1

d73 2
a74 1
#line 1 "glcpp/glcpp-parse.y" /* yacc.c:339  */
d212 1
a212 1
                                         const char *ident, bool explicitly_set);
d224 2
a225 1
#line 222 "glcpp/glcpp-parse.c" /* yacc.c:339  */
d227 1
a227 1
# ifndef YY_NULLPTR
d229 1
a229 1
#   define YY_NULLPTR nullptr
d231 1
a231 1
#   define YY_NULLPTR 0
d247 1
a247 1
/* Debug traces.  */
d255 1
a255 1
/* Token type.  */
d258 39
a296 38
  enum yytokentype
  {
    COMMA_FINAL = 258,
    DEFINED = 259,
    ELIF_EXPANDED = 260,
    HASH = 261,
    HASH_DEFINE = 262,
    FUNC_IDENTIFIER = 263,
    OBJ_IDENTIFIER = 264,
    HASH_ELIF = 265,
    HASH_ELSE = 266,
    HASH_ENDIF = 267,
    HASH_IF = 268,
    HASH_IFDEF = 269,
    HASH_IFNDEF = 270,
    HASH_LINE = 271,
    HASH_UNDEF = 272,
    HASH_VERSION = 273,
    IDENTIFIER = 274,
    IF_EXPANDED = 275,
    INTEGER = 276,
    INTEGER_STRING = 277,
    LINE_EXPANDED = 278,
    NEWLINE = 279,
    OTHER = 280,
    PLACEHOLDER = 281,
    SPACE = 282,
    PASTE = 283,
    OR = 284,
    AND = 285,
    EQUAL = 286,
    NOT_EQUAL = 287,
    LESS_OR_EQUAL = 288,
    GREATER_OR_EQUAL = 289,
    LEFT_SHIFT = 290,
    RIGHT_SHIFT = 291,
    UNARY = 292
  };
a298 1
/* Value type.  */
d300 6
a305 1
/* Location type.  */
d307 1
a307 2
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
d313 2
a314 1
};
d320 8
a327 1

d329 4
d338 2
a339 1
#line 319 "glcpp/glcpp-parse.c" /* yacc.c:358  */
d353 3
d357 1
a357 1
typedef signed char yytype_int8;
d377 2
a378 1
# elif ! defined YYSIZE_T
d400 5
a404 24
#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
d415 9
a423 8
#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
d425 3
a427 1
# define YY_INITIAL_VALUE(Value) Value
d429 3
a431 6
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
a433 1

d451 2
a452 1
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
d464 2
a465 2
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
d481 1
a481 1
             && (defined YYFREE || defined free)))
d489 2
a490 1
#   if ! defined malloc && ! defined EXIT_SUCCESS
d496 2
a497 1
#   if ! defined free && ! defined EXIT_SUCCESS
d507 2
a508 2
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
d534 10
a543 10
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)
d562 1
a562 1
      while (0)
d570 1
a570 1
#define YYLAST   695
d575 1
a575 1
#define YYNNTS  26
d577 3
a579 3
#define YYNRULES  115
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  181
d581 1
a581 2
/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
d585 1
a585 1
#define YYTRANSLATE(YYX)                                                \
d588 1
a588 2
/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
d624 55
a678 1
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
d681 11
a691 12
       0,   188,   188,   190,   194,   197,   197,   208,   213,   214,
     218,   221,   224,   232,   245,   248,   251,   257,   257,   260,
     260,   270,   270,   292,   302,   302,   309,   309,   316,   341,
     361,   361,   374,   374,   377,   383,   389,   395,   404,   409,
     410,   415,   418,   421,   424,   427,   430,   433,   436,   439,
     442,   445,   448,   451,   454,   457,   460,   468,   476,   479,
     482,   485,   488,   491,   497,   502,   510,   511,   515,   521,
     522,   525,   527,   534,   538,   542,   547,   551,   558,   563,
     570,   574,   578,   582,   586,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623
d706 2
a707 2
  "OR", "AND", "'|'", "'^'", "'&'", "EQUAL", "NOT_EQUAL", "'<'", "'>'",
  "LESS_OR_EQUAL", "GREATER_OR_EQUAL", "LEFT_SHIFT", "RIGHT_SHIFT", "'+'",
d710 4
a713 5
  "line", "$@@1", "expanded_line", "define", "control_line", "$@@2", "$@@3",
  "$@@4", "$@@5", "$@@6", "$@@7", "$@@8", "integer_constant", "expression",
  "identifier_list", "text_line", "non_directive", "replacement_list",
  "junk", "conditional_token", "conditional_tokens", "pp_tokens",
  "preprocessing_token", "operator", YY_NULLPTR
d718 2
a719 2
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
d731 15
a745 1
#define YYPACT_NINF -166
d747 2
a748 11
#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-166)))

#define YYTABLE_NINF -1

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
d750 11
a760 19
    -166,   147,  -166,    87,   -10,  -166,   190,  -166,  -166,   -17,
    -166,  -166,  -166,  -166,    52,  -166,    87,  -166,    52,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,   360,  -166,  -166,
    -166,  -166,  -166,    87,    87,    87,    87,    87,  -166,   519,
    -166,  -166,   401,   105,    31,  -166,  -166,   233,  -166,    34,
      44,  -166,   319,    67,    86,   483,    88,    -8,   542,    48,
    -166,  -166,  -166,  -166,   560,  -166,  -166,  -166,    87,    87,
      87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
      87,    87,    87,    87,    87,    87,  -166,   -35,   483,  -166,
    -166,    96,  -166,  -166,  -166,  -166,   276,   483,   483,   442,
      92,    93,  -166,  -166,  -166,    94,  -166,   580,   596,   611,
     625,   638,   649,   649,    19,    19,    19,    19,    38,    38,
      66,    66,  -166,  -166,  -166,    18,    95,   483,    72,  -166,
      98,   483,   100,  -166,  -166,  -166,  -166,  -166,   483,    26,
    -166,  -166,  -166,  -166,   101,   483,   107,  -166,   108,  -166,
    -166
d763 3
a765 3
  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
d768 10
a777 10
       2,     0,     1,     0,     0,    17,     0,    30,    32,    21,
      24,    26,     5,    19,     0,    80,     0,    81,     0,    66,
      83,    84,   115,   111,   110,   109,   108,    92,   106,   107,
     102,   103,   104,   105,   100,   101,    94,    95,    93,    98,
      99,    87,    88,    97,    96,   113,    85,    86,    89,    90,
      91,   112,   114,     3,     8,     4,     7,     0,    78,    82,
      40,    38,    37,     0,     0,     0,     0,     0,    39,     0,
      36,     9,     0,     0,     0,    29,    76,     0,    75,     0,
       0,    23,     0,     0,     0,     0,     0,     0,     0,     0,
      67,    79,    62,    61,     0,    59,    60,    11,     0,     0,
d779 14
a792 8
       0,     0,     0,     0,     0,     0,    68,     0,    69,    18,
      73,     0,    28,    77,    31,    33,     0,    71,    71,     0,
       0,     0,    34,    10,    12,     0,    63,    41,    42,    43,
      44,    45,    47,    46,    51,    50,    49,    48,    53,    52,
      55,    54,    58,    57,    56,     0,     0,    70,     0,    22,
       0,    72,     0,     6,    20,    35,    13,    64,    69,     0,
      14,    74,    25,    27,     0,    69,     0,    15,     0,    65,
      16
d795 4
a798 2
  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
d800 18
a817 3
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,   -12,   -11,  -166,  -166,  -166,  -165,
       3,   -69,    51,     0,    -6,  -166
d820 2
a821 2
  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
d823 2
a824 3
      -1,     1,    53,    85,    54,   119,    55,    73,    86,    82,
      83,    84,    79,    80,    68,    69,   169,    56,    71,   156,
     160,    76,    77,   157,    58,    59
d827 4
a830 3
  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
d833 32
a864 18
      78,    57,    87,   174,    72,    88,    89,    81,   123,    15,
     178,   131,    17,   155,    70,    20,   132,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,   167,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
     120,    91,    92,    93,    94,    95,    96,   123,   124,   109,
     110,   111,   112,   113,   114,   115,    91,   168,   125,    61,
      62,    78,   134,    61,    62,   175,    78,   135,   176,   121,
     111,   112,   113,   114,   115,   129,   127,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   128,    60,   130,    61,    62,
     113,   114,   115,   117,   118,   158,   164,   165,   166,   170,
      78,   171,   172,    91,   173,   177,   179,   161,   161,    63,
      64,   162,   180,   126,     0,    65,     0,    66,    67,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,    91,     3,     4,     5,    91,     0,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,     0,    17,
      18,    19,    20,     0,    21,    22,    23,    24,    25,    26,
d866 7
a872 16
      37,    38,    39,    40,    74,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,     0,     0,    15,
       0,     0,    17,     0,    75,    20,     0,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    74,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
       0,     0,    15,     0,     0,    17,     0,   122,    20,     0,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      74,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,     0,     0,    15,     0,     0,    17,     0,
     159,    20,     0,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    74,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,     0,     0,    15,     0,
       0,    17,     0,     0,    20,     0,    21,    22,    23,    24,
d876 1
a876 1
       0,     0,    17,     0,    90,    20,     0,    21,    22,    23,
d880 1
a880 1
      15,     0,     0,    17,     0,   116,    20,     0,    21,    22,
d884 1
a884 17
      52,    15,     0,     0,    17,     0,   163,    20,     0,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,     0,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    15,     0,     0,    17,     0,     0,    20,     0,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
       0,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    97,     0,     0,     0,     0,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   133,     0,     0,     0,
       0,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,     0,     0,   136,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   100,   101,   102,
d886 9
a894 2
     113,   114,   115,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   102,   103,
d896 5
a900 3
     114,   115,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115
d903 6
d911 9
a919 9
       6,     1,    14,   168,     4,    16,    18,    24,    77,    19,
     175,    19,    22,    48,    24,    25,    24,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    19,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      19,    57,    63,    64,    65,    66,    67,   126,    24,    40,
      41,    42,    43,    44,    45,    46,    72,    49,    24,    21,
      22,    77,    24,    21,    22,    49,    82,    89,    52,    48,
      42,    43,    44,    45,    46,    85,    19,    98,    99,   100,
d921 22
a942 8
     111,   112,   113,   114,   115,    19,    19,    19,    21,    22,
      44,    45,    46,     8,     9,    19,    24,    24,    24,    24,
     126,    49,    24,   129,    24,    24,    19,   127,   128,    42,
      43,   128,    24,    82,    -1,    48,    -1,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,
      -1,   157,     5,     6,     7,   161,    -1,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    31,    32,
d944 7
a950 16
      43,    44,    45,    46,     4,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    -1,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,     4,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    -1,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
       4,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,     4,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    -1,    19,    -1,
      -1,    22,    -1,    -1,    25,    -1,    27,    28,    29,    30,
d958 1
a958 1
      19,    -1,    -1,    22,    -1,    24,    25,    -1,    27,    28,
d962 14
a975 6
      59,    19,    -1,    -1,    22,    -1,    24,    25,    -1,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    19,    -1,    -1,    22,    -1,    -1,    25,    -1,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
d977 2
a978 17
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    24,    -1,    -1,    -1,    -1,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    24,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    -1,    -1,    49,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46
d981 2
a982 2
  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
d990 13
a1002 14
      57,    58,    59,    62,    64,    66,    77,    83,    84,    85,
      19,    21,    22,    42,    43,    48,    50,    51,    74,    75,
      24,    78,    83,    67,     4,    24,    81,    82,    84,    72,
      73,    24,    69,    70,    71,    63,    68,    74,    75,    74,
      24,    84,    75,    75,    75,    75,    75,    24,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    24,     8,     9,    65,
      19,    48,    24,    81,    24,    24,    82,    19,    19,    83,
      19,    19,    24,    24,    24,    74,    49,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    48,    79,    83,    19,    24,
      80,    83,    80,    24,    24,    24,    24,    19,    49,    76,
      24,    49,    24,    24,    79,    49,    52,    24,    79,    19,
      24
d1005 24
a1028 44
  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    60,    61,    61,    62,    63,    62,    62,    62,    62,
      64,    64,    64,    64,    65,    65,    65,    67,    66,    68,
      66,    69,    66,    66,    70,    66,    71,    66,    66,    66,
      72,    66,    73,    66,    66,    66,    66,    74,    74,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    76,    76,    77,    77,    78,    79,
      79,    80,    80,    81,    81,    81,    82,    82,    83,    83,
      84,    84,    84,    84,    84,    85,    85,    85,    85,    85,
      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
      85,    85,    85,    85,    85,    85
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     0,     2,     1,     0,     4,     1,     1,     2,
       3,     3,     3,     4,     3,     5,     6,     0,     3,     0,
       4,     0,     4,     2,     0,     5,     0,     5,     3,     2,
       0,     3,     0,     3,     3,     4,     2,     1,     1,     1,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     2,     2,     3,     1,     3,     1,     2,     2,     0,
       1,     0,     1,     2,     4,     1,     1,     2,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab

d1045 3
a1047 3
      YYERROR;                                                  \
    }                                                           \
while (0)
d1050 2
a1051 2
#define YYTERROR        1
#define YYERRCODE       256
d1061 1
a1061 1
      if (N)                                                            \
d1075 1
a1075 1
    while (0)
a1080 15
/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


d1090 3
a1092 1
YY_ATTRIBUTE_UNUSED
d1095 6
d1106 1
a1106 1
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
d1108 1
a1108 1
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
d1114 1
a1114 1
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
d1116 1
a1116 1
            res += YYFPRINTF (yyo, ".%d", end_col);
d1119 1
a1119 1
        res += YYFPRINTF (yyo, "-%d", end_col);
d1133 6
a1138 10
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)
d1140 24
a1164 3
/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/
d1166 7
d1175 9
d1187 2
a1190 2
  if (!yyvaluep)
    return;
d1194 2
d1205 2
d1209 9
d1219 4
a1222 2
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);
d1235 2
d1239 6
d1255 5
a1259 5
# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)
d1266 2
d1269 9
a1277 1
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, glcpp_parser_t *parser)
a1278 1
  unsigned long int yylno = yyrline[yyrule];
d1281 1
d1283 1
a1283 1
             yyrule - 1, yylno);
d1288 3
a1290 4
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , parser);
d1295 5
a1299 5
# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, parser); \
} while (0)
d1313 1
a1313 1
#ifndef YYINITDEPTH
d1336 2
d1340 5
d1360 2
d1364 6
d1399 21
a1419 21
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
d1442 1
a1442 1
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
d1446 1
a1446 1
  const char *yyformat = YY_NULLPTR;
d1454 4
d1507 1
a1507 1
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
d1574 3
d1579 9
d1592 1
a1596 1
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
a1597 1
  YY_IGNORE_MAYBE_UNINITIALIZED_END
d1607 13
d1622 6
d1633 9
a1641 1
/* The semantic value of the lookahead symbol.  */
d1644 3
a1646 4
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
d1652 12
d1666 1
d1675 3
a1677 3
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.
d1737 2
a1738 1
#line 155 "glcpp/glcpp-parse.y" /* yacc.c:1429  */
d1746 2
a1747 2

#line 1561 "glcpp/glcpp-parse.c" /* yacc.c:1429  */
d1769 20
a1788 20
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
d1796 1
a1796 1
        goto yyexhaustedlab;
d1799 1
a1799 1
        yystacksize = YYMAXDEPTH;
d1802 8
a1809 8
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
d1811 2
a1812 2
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
d1822 1
a1822 1
                  (unsigned long int) yystacksize));
d1825 1
a1825 1
        YYABORT;
d1854 1
a1854 1
      yychar = yylex (&yylval, &yylloc, parser);
d1919 1
a1919 1
     '$$ = $1'.
d1934 2
a1935 1
#line 194 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a1938 1
#line 1752 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1942 2
a1943 9
#line 197 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1760 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 6:
#line 199 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a1944 1

d1949 1
a1949 1
							   LINE_EXPANDED, (yyvsp[-1].token_list));
a1951 1
#line 1774 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1954 3
a1956 2
  case 7:
#line 208 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1958 1
a1958 1
		_glcpp_parser_print_expanded_token_list (parser, (yyvsp[0].token_list));
d1960 1
a1960 1
		ralloc_free ((yyvsp[0].token_list));
a1961 1
#line 1784 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1964 3
a1966 2
  case 10:
#line 218 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1968 1
a1968 1
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-2]), (yyvsp[-1].ival));
a1969 1
#line 1792 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1972 3
a1974 2
  case 11:
#line 221 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1976 1
a1976 1
		_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-2]), "elif", (yyvsp[-1].ival));
a1977 1
#line 1800 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1980 3
a1982 2
  case 12:
#line 224 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1985 1
a1985 1
		parser->new_line_number = (yyvsp[-1].ival);
d1989 1
a1989 1
					      (yyvsp[-1].ival));
a1990 1
#line 1813 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1993 3
a1995 2
  case 13:
#line 232 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1998 1
a1998 1
		parser->new_line_number = (yyvsp[-2].ival);
d2000 1
a2000 1
		parser->new_source_number = (yyvsp[-1].ival);
d2004 1
a2004 1
					      (yyvsp[-2].ival), (yyvsp[-1].ival));
a2005 1
#line 1828 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2008 3
a2010 2
  case 14:
#line 245 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2012 1
a2012 1
		_define_object_macro (parser, & (yylsp[-2]), (yyvsp[-2].str), (yyvsp[-1].token_list));
a2013 1
#line 1836 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2016 3
a2018 2
  case 15:
#line 248 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2020 1
a2020 1
		_define_function_macro (parser, & (yylsp[-4]), (yyvsp[-4].str), NULL, (yyvsp[-1].token_list));
a2021 1
#line 1844 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2024 3
a2026 2
  case 16:
#line 251 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2028 1
a2028 1
		_define_function_macro (parser, & (yylsp[-5]), (yyvsp[-5].str), (yyvsp[-3].string_list), (yyvsp[-1].token_list));
a2029 1
#line 1852 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2032 3
a2034 2
  case 17:
#line 257 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2036 1
a2036 17
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1860 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 19:
#line 260 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1868 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 20:
#line 262 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		macro_t *macro = hash_table_find (parser->defines, (yyvsp[-1].str));
d2038 1
a2038 1
			hash_table_remove (parser->defines, (yyvsp[-1].str));
d2041 1
a2041 1
		ralloc_free ((yyvsp[-1].str));
a2042 1
#line 1881 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2045 3
a2047 10
  case 21:
#line 270 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1889 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 22:
#line 272 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2060 1
a2060 1
							   IF_EXPANDED, (yyvsp[-1].token_list));
d2064 1
a2064 1
			_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-3]), 0);
a2067 1
#line 1914 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2070 3
a2072 2
  case 23:
#line 292 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2079 1
a2079 1
			glcpp_error(& (yylsp[-1]), parser, "#if with no expression");
d2081 1
a2081 1
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-1]), 0);
a2082 1
#line 1929 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2085 3
a2087 2
  case 24:
#line 302 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2089 3
a2091 1
		glcpp_parser_resolve_implicit_version(parser);
a2092 1
#line 1937 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2095 3
a2097 2
  case 25:
#line 304 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2099 3
a2101 3
		macro_t *macro = hash_table_find (parser->defines, (yyvsp[-2].str));
		ralloc_free ((yyvsp[-2].str));
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-4]), macro != NULL);
a2102 1
#line 1947 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2105 3
a2107 20
  case 26:
#line 309 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1955 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 27:
#line 311 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		macro_t *macro = hash_table_find (parser->defines, (yyvsp[-2].str));
		ralloc_free ((yyvsp[-2].str));
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-3]), macro == NULL);
	}
#line 1965 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 28:
#line 316 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2120 1
a2120 6
							   ELIF_EXPANDED, (yyvsp[-1].token_list));
		}
		else if (parser->skip_stack &&
		    parser->skip_stack->has_else)
		{
			glcpp_error(& (yylsp[-2]), parser, "#elif after #else");
d2124 1
a2124 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-2]),
a2127 1
#line 1995 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2130 3
a2132 2
  case 29:
#line 341 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2139 1
a2139 6
			glcpp_error(& (yylsp[-1]), parser, "#elif with no expression");
		}
		else if (parser->skip_stack &&
		    parser->skip_stack->has_else)
		{
			glcpp_error(& (yylsp[-1]), parser, "#elif after #else");
d2143 1
a2143 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-1]),
d2145 1
a2145 1
			glcpp_warning(& (yylsp[-1]), parser, "ignoring illegal #elif without expression");
a2147 1
#line 2020 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2150 3
a2152 2
  case 30:
#line 361 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2154 1
a2154 11
		if (parser->skip_stack &&
		    parser->skip_stack->has_else)
		{
			glcpp_error(& (yylsp[0]), parser, "multiple #else");
		}
		else
		{
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[0]), "else", 1);
			if (parser->skip_stack)
				parser->skip_stack->has_else = true;
		}
a2155 1
#line 2038 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2158 3
a2160 2
  case 32:
#line 374 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2162 1
a2162 1
		_glcpp_parser_skip_stack_pop (parser, & (yylsp[0]));
a2163 1
#line 2046 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2166 3
a2168 2
  case 34:
#line 377 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2170 1
a2170 4
		if (parser->version_resolved) {
			glcpp_error(& (yylsp[-2]), parser, "#version must appear on the first line");
		}
		_glcpp_parser_handle_version_declaration(parser, (yyvsp[-1].ival), NULL, true);
a2171 1
#line 2057 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2174 3
a2176 2
  case 35:
#line 383 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2178 1
a2178 4
		if (parser->version_resolved) {
			glcpp_error(& (yylsp[-3]), parser, "#version must appear on the first line");
		}
		_glcpp_parser_handle_version_declaration(parser, (yyvsp[-2].ival), (yyvsp[-1].str), true);
a2179 1
#line 2068 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2182 3
a2184 10
  case 36:
#line 389 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 2076 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 37:
#line 395 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2186 4
a2189 4
		if (strlen ((yyvsp[0].str)) >= 3 && strncmp ((yyvsp[0].str), "0x", 2) == 0) {
			(yyval.ival) = strtoll ((yyvsp[0].str) + 2, NULL, 16);
		} else if ((yyvsp[0].str)[0] == '0') {
			(yyval.ival) = strtoll ((yyvsp[0].str), NULL, 8);
d2191 1
a2191 1
			(yyval.ival) = strtoll ((yyvsp[0].str), NULL, 10);
a2193 1
#line 2090 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2196 3
a2198 2
  case 38:
#line 404 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2200 1
a2200 1
		(yyval.ival) = (yyvsp[0].ival);
a2201 1
#line 2098 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2204 3
a2206 2
  case 40:
#line 410 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2209 1
a2209 1
			glcpp_error(& (yylsp[0]), parser, "undefined macro %s in expression (illegal in GLES)", (yyvsp[0].str));
a2211 1
#line 2108 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2214 3
a2216 2
  case 41:
#line 415 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2218 1
a2218 1
		(yyval.ival) = (yyvsp[-2].ival) || (yyvsp[0].ival);
a2219 1
#line 2116 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2222 3
a2224 2
  case 42:
#line 418 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2226 1
a2226 1
		(yyval.ival) = (yyvsp[-2].ival) && (yyvsp[0].ival);
a2227 1
#line 2124 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2230 3
a2232 2
  case 43:
#line 421 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2234 1
a2234 1
		(yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival);
a2235 1
#line 2132 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2238 3
a2240 2
  case 44:
#line 424 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2242 1
a2242 1
		(yyval.ival) = (yyvsp[-2].ival) ^ (yyvsp[0].ival);
a2243 1
#line 2140 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2246 3
a2248 2
  case 45:
#line 427 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2250 1
a2250 1
		(yyval.ival) = (yyvsp[-2].ival) & (yyvsp[0].ival);
a2251 1
#line 2148 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2254 3
a2256 2
  case 46:
#line 430 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2258 1
a2258 1
		(yyval.ival) = (yyvsp[-2].ival) != (yyvsp[0].ival);
a2259 1
#line 2156 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2262 3
a2264 2
  case 47:
#line 433 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2266 1
a2266 1
		(yyval.ival) = (yyvsp[-2].ival) == (yyvsp[0].ival);
a2267 1
#line 2164 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2270 3
a2272 2
  case 48:
#line 436 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2274 1
a2274 1
		(yyval.ival) = (yyvsp[-2].ival) >= (yyvsp[0].ival);
a2275 1
#line 2172 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2278 3
a2280 2
  case 49:
#line 439 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2282 1
a2282 1
		(yyval.ival) = (yyvsp[-2].ival) <= (yyvsp[0].ival);
a2283 1
#line 2180 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2286 3
a2288 2
  case 50:
#line 442 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2290 1
a2290 1
		(yyval.ival) = (yyvsp[-2].ival) > (yyvsp[0].ival);
a2291 1
#line 2188 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2294 3
a2296 2
  case 51:
#line 445 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2298 1
a2298 1
		(yyval.ival) = (yyvsp[-2].ival) < (yyvsp[0].ival);
a2299 1
#line 2196 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2302 3
a2304 2
  case 52:
#line 448 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2306 1
a2306 1
		(yyval.ival) = (yyvsp[-2].ival) >> (yyvsp[0].ival);
a2307 1
#line 2204 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2310 3
a2312 2
  case 53:
#line 451 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2314 1
a2314 1
		(yyval.ival) = (yyvsp[-2].ival) << (yyvsp[0].ival);
a2315 1
#line 2212 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2318 3
a2320 2
  case 54:
#line 454 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2322 1
a2322 1
		(yyval.ival) = (yyvsp[-2].ival) - (yyvsp[0].ival);
a2323 1
#line 2220 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2326 3
a2328 2
  case 55:
#line 457 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2330 1
a2330 1
		(yyval.ival) = (yyvsp[-2].ival) + (yyvsp[0].ival);
a2331 1
#line 2228 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2334 3
a2336 2
  case 56:
#line 460 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2338 2
a2339 2
		if ((yyvsp[0].ival) == 0) {
			yyerror (& (yylsp[-2]), parser,
d2342 1
a2342 1
			(yyval.ival) = (yyvsp[-2].ival) % (yyvsp[0].ival);
a2344 1
#line 2241 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2347 3
a2349 2
  case 57:
#line 468 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2351 2
a2352 2
		if ((yyvsp[0].ival) == 0) {
			yyerror (& (yylsp[-2]), parser,
d2355 1
a2355 1
			(yyval.ival) = (yyvsp[-2].ival) / (yyvsp[0].ival);
a2357 1
#line 2254 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2360 3
a2362 2
  case 58:
#line 476 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2364 1
a2364 1
		(yyval.ival) = (yyvsp[-2].ival) * (yyvsp[0].ival);
a2365 1
#line 2262 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2368 3
a2370 2
  case 59:
#line 479 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2372 1
a2372 1
		(yyval.ival) = ! (yyvsp[0].ival);
a2373 1
#line 2270 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2376 3
a2378 2
  case 60:
#line 482 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2380 1
a2380 1
		(yyval.ival) = ~ (yyvsp[0].ival);
a2381 1
#line 2278 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2384 3
a2386 2
  case 61:
#line 485 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2388 1
a2388 1
		(yyval.ival) = - (yyvsp[0].ival);
a2389 1
#line 2286 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2392 3
a2394 2
  case 62:
#line 488 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2396 1
a2396 1
		(yyval.ival) = + (yyvsp[0].ival);
a2397 1
#line 2294 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2400 3
a2402 2
  case 63:
#line 491 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2404 1
a2404 1
		(yyval.ival) = (yyvsp[-1].ival);
a2405 1
#line 2302 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2408 3
a2410 2
  case 64:
#line 497 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2413 2
a2414 2
		_string_list_append_item ((yyval.string_list), (yyvsp[0].str));
		ralloc_steal ((yyval.string_list), (yyvsp[0].str));
a2415 1
#line 2312 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2418 3
a2420 2
  case 65:
#line 502 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2422 3
a2424 3
		(yyval.string_list) = (yyvsp[-2].string_list);	
		_string_list_append_item ((yyval.string_list), (yyvsp[0].str));
		ralloc_steal ((yyval.string_list), (yyvsp[0].str));
a2425 1
#line 2322 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2428 3
a2430 2
  case 66:
#line 510 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2431 1
#line 2328 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2434 3
a2436 2
  case 68:
#line 515 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2438 1
a2438 1
		yyerror (& (yylsp[-1]), parser, "Invalid tokens after #");
a2439 1
#line 2336 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2442 3
a2444 2
  case 69:
#line 521 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2445 1
#line 2342 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2448 3
a2450 2
  case 72:
#line 527 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2452 1
a2452 1
		glcpp_warning(&(yylsp[0]), parser, "extra tokens at end of directive");
a2453 1
#line 2350 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2456 3
a2458 2
  case 73:
#line 534 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2460 1
a2460 1
		int v = hash_table_find (parser->defines, (yyvsp[0].str)) ? 1 : 0;
a2462 1
#line 2359 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2465 3
a2467 2
  case 74:
#line 538 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2469 1
a2469 1
		int v = hash_table_find (parser->defines, (yyvsp[-1].str)) ? 1 : 0;
a2471 1
#line 2368 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2474 3
a2476 2
  case 76:
#line 547 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2479 1
a2479 1
		_token_list_append ((yyval.token_list), (yyvsp[0].token));
a2480 1
#line 2377 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2483 3
a2485 2
  case 77:
#line 551 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2487 2
a2488 2
		(yyval.token_list) = (yyvsp[-1].token_list);
		_token_list_append ((yyval.token_list), (yyvsp[0].token));
a2489 1
#line 2386 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2492 3
a2494 2
  case 78:
#line 558 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2498 1
a2498 1
		_token_list_append ((yyval.token_list), (yyvsp[0].token));
a2499 1
#line 2396 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2502 3
a2504 2
  case 79:
#line 563 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2506 2
a2507 2
		(yyval.token_list) = (yyvsp[-1].token_list);
		_token_list_append ((yyval.token_list), (yyvsp[0].token));
a2508 1
#line 2405 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2511 3
a2513 2
  case 80:
#line 570 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2515 1
a2515 1
		(yyval.token) = _token_create_str (parser, IDENTIFIER, (yyvsp[0].str));
a2517 1
#line 2414 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2520 3
a2522 2
  case 81:
#line 574 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2524 1
a2524 1
		(yyval.token) = _token_create_str (parser, INTEGER_STRING, (yyvsp[0].str));
a2526 1
#line 2423 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2529 3
a2531 2
  case 82:
#line 578 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2533 1
a2533 1
		(yyval.token) = _token_create_ival (parser, (yyvsp[0].ival), (yyvsp[0].ival));
a2535 1
#line 2432 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2538 3
a2540 2
  case 83:
#line 582 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2542 1
a2542 1
		(yyval.token) = _token_create_str (parser, OTHER, (yyvsp[0].str));
a2544 1
#line 2441 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2547 3
a2549 2
  case 84:
#line 586 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2553 1
#line 2450 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2556 3
a2558 2
  case 85:
#line 593 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2559 1
#line 2456 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2562 3
a2564 2
  case 86:
#line 594 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2565 1
#line 2462 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2568 3
a2570 2
  case 87:
#line 595 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2571 1
#line 2468 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2574 3
a2576 2
  case 88:
#line 596 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2577 1
#line 2474 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2580 3
a2582 2
  case 89:
#line 597 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2583 1
#line 2480 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2586 3
a2588 2
  case 90:
#line 598 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2589 1
#line 2486 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2592 3
a2594 2
  case 91:
#line 599 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2595 1
#line 2492 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2598 3
a2600 2
  case 92:
#line 600 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2601 1
#line 2498 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2604 3
a2606 2
  case 93:
#line 601 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2607 1
#line 2504 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2610 3
a2612 2
  case 94:
#line 602 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2613 1
#line 2510 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2616 3
a2618 2
  case 95:
#line 603 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2619 1
#line 2516 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2622 3
a2624 2
  case 96:
#line 604 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2625 1
#line 2522 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2628 3
a2630 2
  case 97:
#line 605 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2631 1
#line 2528 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2634 3
a2636 2
  case 98:
#line 606 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2637 1
#line 2534 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2640 3
a2642 2
  case 99:
#line 607 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2643 1
#line 2540 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2646 3
a2648 2
  case 100:
#line 608 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2649 1
#line 2546 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2652 3
a2654 2
  case 101:
#line 609 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2655 1
#line 2552 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2658 3
a2660 2
  case 102:
#line 610 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2661 1
#line 2558 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2664 3
a2666 2
  case 103:
#line 611 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2667 1
#line 2564 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2670 3
a2672 2
  case 104:
#line 612 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2673 1
#line 2570 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2676 3
a2678 2
  case 105:
#line 613 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2679 1
#line 2576 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2682 3
a2684 2
  case 106:
#line 614 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2685 1
#line 2582 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2688 3
a2690 2
  case 107:
#line 615 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2691 1
#line 2588 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2694 3
a2696 2
  case 108:
#line 616 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2697 1
#line 2594 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2700 3
a2702 2
  case 109:
#line 617 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2703 1
#line 2600 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2706 3
a2708 2
  case 110:
#line 618 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2709 1
#line 2606 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2712 3
a2714 2
  case 111:
#line 619 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2715 1
#line 2612 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2718 3
a2720 2
  case 112:
#line 620 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2721 1
#line 2618 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2724 3
a2726 2
  case 113:
#line 621 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2727 1
#line 2624 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2730 3
a2732 2
  case 114:
#line 622 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2733 1
#line 2630 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2736 3
a2738 2
  case 115:
#line 623 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
a2739 1
#line 2636 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2743 2
a2744 1
#line 2640 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2767 1
a2767 1
  /* Now 'shift' the result of the reduction.  Determine what state
d2782 3
a2784 3
/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
d2835 1
a2835 1
         error, discard it.  */
d2838 5
a2842 5
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
d2844 5
a2848 5
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, parser);
          yychar = YYEMPTY;
        }
d2868 1
a2868 1
  /* Do not reclaim the symbols of the rule whose action triggered
d2881 1
a2881 1
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */
d2887 9
a2895 9
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }
d2899 1
a2899 1
        YYABORT;
d2903 1
a2903 1
                  yystos[yystate], yyvsp, yylsp, parser);
d2959 1
a2959 1
  /* Do not reclaim the symbols of the rule whose action triggered
d2966 1
a2966 1
                  yystos[*yyssp], yyvsp, yylsp, parser);
d2977 2
a2978 1
  return yyresult;
d2980 4
a2983 1
#line 626 "glcpp/glcpp-parse.y" /* yacc.c:1906  */
d3554 1
a3554 1
glcpp_parser_create (const struct gl_extensions *extensions, gl_api api)
d3557 1
a3569 1
        parser->commented_newlines = 0;
a3581 4
        parser->extensions = extensions;
        parser->api = api;
        parser->version_resolved = false;

d3587 70
d4197 2
a4198 16
	/* Section 3.3 (Preprocessor) of the GLSL 1.30 spec (and later) and
	 * the GLSL ES spec (all versions) say:
	 *
	 *     "All macro names containing two consecutive underscores ( __ )
	 *     are reserved for future use as predefined macro names. All
	 *     macro names prefixed with "GL_" ("GL" followed by a single
	 *     underscore) are also reserved."
	 *
	 * The intention is that names containing __ are reserved for internal
	 * use by the implementation, and names prefixed with GL_ are reserved
	 * for use by Khronos.  Since every extension adds a name prefixed
	 * with GL_ (i.e., the name of the extension), that should be an
	 * error.  Names simply containing __ are dangerous to use, but should
	 * be allowed.
	 *
	 * A future version of the GLSL specification will clarify this.
d4201 1
a4201 3
		glcpp_warning(loc, parser,
			      "Macro names containing \"__\" are reserved "
			      "for use by the implementation.\n");
a4414 1
	node->has_else = false;
d4453 1
a4453 2
                                         const char *es_identifier,
                                         bool explicitly_set)
d4455 5
a4459 7
	const struct gl_extensions *extensions = parser->extensions;

	if (parser->version_resolved)
		return;

	parser->version_resolved = true;

d4462 9
a4470 98
	parser->is_gles = (version == 100) ||
			   (es_identifier &&
			    (strcmp(es_identifier, "es") == 0));

	/* Add pre-defined macros. */
	if (parser->is_gles) {
	   add_builtin_define(parser, "GL_ES", 1);
           add_builtin_define(parser, "GL_EXT_separate_shader_objects", 1);

	   if (extensions != NULL) {
	      if (extensions->OES_EGL_image_external)
	         add_builtin_define(parser, "GL_OES_EGL_image_external", 1);
	   }
	} else {
	   add_builtin_define(parser, "GL_ARB_draw_buffers", 1);
           add_builtin_define(parser, "GL_ARB_separate_shader_objects", 1);
	   add_builtin_define(parser, "GL_ARB_texture_rectangle", 1);
           add_builtin_define(parser, "GL_AMD_shader_trinary_minmax", 1);


	   if (extensions != NULL) {
	      if (extensions->EXT_texture_array)
	         add_builtin_define(parser, "GL_EXT_texture_array", 1);

	      if (extensions->ARB_arrays_of_arrays)
	          add_builtin_define(parser, "GL_ARB_arrays_of_arrays", 1);

	      if (extensions->ARB_fragment_coord_conventions)
	         add_builtin_define(parser, "GL_ARB_fragment_coord_conventions",
				    1);

	      if (extensions->ARB_explicit_attrib_location)
	         add_builtin_define(parser, "GL_ARB_explicit_attrib_location", 1);

	      if (extensions->ARB_shader_texture_lod)
	         add_builtin_define(parser, "GL_ARB_shader_texture_lod", 1);

	      if (extensions->ARB_draw_instanced)
	         add_builtin_define(parser, "GL_ARB_draw_instanced", 1);

	      if (extensions->ARB_conservative_depth) {
	         add_builtin_define(parser, "GL_AMD_conservative_depth", 1);
	         add_builtin_define(parser, "GL_ARB_conservative_depth", 1);
	      }

	      if (extensions->ARB_shader_bit_encoding)
	         add_builtin_define(parser, "GL_ARB_shader_bit_encoding", 1);

	      if (extensions->ARB_uniform_buffer_object)
	         add_builtin_define(parser, "GL_ARB_uniform_buffer_object", 1);

	      if (extensions->ARB_texture_cube_map_array)
	         add_builtin_define(parser, "GL_ARB_texture_cube_map_array", 1);

	      if (extensions->ARB_shading_language_packing)
	         add_builtin_define(parser, "GL_ARB_shading_language_packing", 1);

	      if (extensions->ARB_texture_multisample)
	         add_builtin_define(parser, "GL_ARB_texture_multisample", 1);

	      if (extensions->ARB_texture_query_levels)
	         add_builtin_define(parser, "GL_ARB_texture_query_levels", 1);

	      if (extensions->ARB_texture_query_lod)
	         add_builtin_define(parser, "GL_ARB_texture_query_lod", 1);

	      if (extensions->ARB_gpu_shader5)
	         add_builtin_define(parser, "GL_ARB_gpu_shader5", 1);

	      if (extensions->AMD_vertex_shader_layer)
	         add_builtin_define(parser, "GL_AMD_vertex_shader_layer", 1);

	      if (extensions->ARB_shading_language_420pack)
	         add_builtin_define(parser, "GL_ARB_shading_language_420pack", 1);

	      if (extensions->ARB_sample_shading)
	         add_builtin_define(parser, "GL_ARB_sample_shading", 1);

	      if (extensions->ARB_texture_gather)
	         add_builtin_define(parser, "GL_ARB_texture_gather", 1);

	      if (extensions->ARB_shader_atomic_counters)
	         add_builtin_define(parser, "GL_ARB_shader_atomic_counters", 1);

	      if (extensions->ARB_viewport_array)
	         add_builtin_define(parser, "GL_ARB_viewport_array", 1);

              if (extensions->ARB_compute_shader)
                 add_builtin_define(parser, "GL_ARB_compute_shader", 1);

	      if (extensions->ARB_shader_image_load_store)
	         add_builtin_define(parser, "GL_ARB_shader_image_load_store", 1);
	   }
	}

	if (extensions != NULL) {
	   if (extensions->EXT_shader_integer_mix)
	      add_builtin_define(parser, "GL_EXT_shader_integer_mix", 1);
d4484 4
a4487 23
	if (explicitly_set) {
	   ralloc_asprintf_rewrite_tail (&parser->output, &parser->output_length,
					 "#version %" PRIiMAX "%s%s", version,
					 es_identifier ? " " : "",
					 es_identifier ? es_identifier : "");
	}
}

/* GLSL version if no version is explicitly specified. */
#define IMPLICIT_GLSL_VERSION 110

/* GLSL ES version if no version is explicitly specified. */
#define IMPLICIT_GLSL_ES_VERSION 100

void
glcpp_parser_resolve_implicit_version(glcpp_parser_t *parser)
{
	int language_version = parser->api == API_OPENGLES2 ?
			       IMPLICIT_GLSL_ES_VERSION :
			       IMPLICIT_GLSL_VERSION;

	_glcpp_parser_handle_version_declaration(parser, language_version,
						 NULL, false);
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@a130 3
static const char *
_string_list_has_duplicate (string_list_t *list);

a178 5
typedef enum {
	EXPANSION_MODE_IGNORE_DEFINED,
	EXPANSION_MODE_EVALUATE_DEFINED
} expansion_mode_t;

d185 1
a185 2
				   token_list_t *list,
				   expansion_mode_t mode);
d190 1
a190 2
				 token_list_t *list,
				 expansion_mode_t mode);
d221 1
a221 1
#line 232 "glcpp/glcpp-parse.c" /* yacc.c:339  */
d245 1
a245 1
# define YYDEBUG 1
d256 35
a290 39
    DEFINED = 258,
    ELIF_EXPANDED = 259,
    HASH_TOKEN = 260,
    DEFINE_TOKEN = 261,
    FUNC_IDENTIFIER = 262,
    OBJ_IDENTIFIER = 263,
    ELIF = 264,
    ELSE = 265,
    ENDIF = 266,
    ERROR_TOKEN = 267,
    IF = 268,
    IFDEF = 269,
    IFNDEF = 270,
    LINE = 271,
    PRAGMA = 272,
    UNDEF = 273,
    VERSION_TOKEN = 274,
    GARBAGE = 275,
    IDENTIFIER = 276,
    IF_EXPANDED = 277,
    INTEGER = 278,
    INTEGER_STRING = 279,
    LINE_EXPANDED = 280,
    NEWLINE = 281,
    OTHER = 282,
    PLACEHOLDER = 283,
    SPACE = 284,
    PLUS_PLUS = 285,
    MINUS_MINUS = 286,
    PASTE = 287,
    OR = 288,
    AND = 289,
    EQUAL = 290,
    NOT_EQUAL = 291,
    LESS_OR_EQUAL = 292,
    GREATER_OR_EQUAL = 293,
    LEFT_SHIFT = 294,
    RIGHT_SHIFT = 295,
    UNARY = 296
d318 1
a318 1
#line 333 "glcpp/glcpp-parse.c" /* yacc.c:358  */
d562 1
a562 1
#define YYLAST   652
d565 1
a565 1
#define YYNTOKENS  64
d567 1
a567 1
#define YYNNTS  25
d569 1
a569 1
#define YYNRULES  118
d571 1
a571 1
#define YYNSTATES  185
d576 1
a576 1
#define YYMAXUTOK   296
d588 4
a591 4
       2,     2,     2,    54,     2,     2,     2,    50,    37,     2,
      52,    53,    48,    46,    56,    47,    61,    49,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,    62,
      40,    63,    41,     2,     2,     2,     2,     2,     2,     2,
d594 1
a594 1
       2,    57,     2,    58,    36,     2,     2,     2,     2,     2,
d597 1
a597 1
       2,     2,     2,    59,    35,    60,    55,     2,     2,     2,
d613 2
a614 2
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      38,    39,    42,    43,    44,    45,    51
d621 12
a632 12
       0,   205,   205,   207,   211,   212,   213,   218,   222,   227,
     232,   240,   253,   256,   259,   265,   268,   269,   269,   284,
     284,   287,   287,   304,   304,   327,   337,   337,   344,   344,
     351,   377,   397,   397,   410,   410,   413,   419,   425,   428,
     434,   437,   440,   446,   455,   460,   464,   471,   482,   493,
     500,   507,   514,   521,   528,   535,   542,   549,   556,   563,
     570,   577,   584,   596,   608,   615,   619,   623,   627,   631,
     637,   642,   650,   651,   655,   656,   659,   661,   667,   672,
     679,   683,   687,   691,   695,   699,   706,   707,   708,   709,
     710,   711,   712,   713,   714,   715,   716,   717,   718,   719,
     720,   721,   722,   723,   724,   725,   726,   727,   728,   729,
     730,   731,   732,   733,   734,   735,   736,   737,   738
d641 15
a655 15
  "$end", "error", "$undefined", "DEFINED", "ELIF_EXPANDED", "HASH_TOKEN",
  "DEFINE_TOKEN", "FUNC_IDENTIFIER", "OBJ_IDENTIFIER", "ELIF", "ELSE",
  "ENDIF", "ERROR_TOKEN", "IF", "IFDEF", "IFNDEF", "LINE", "PRAGMA",
  "UNDEF", "VERSION_TOKEN", "GARBAGE", "IDENTIFIER", "IF_EXPANDED",
  "INTEGER", "INTEGER_STRING", "LINE_EXPANDED", "NEWLINE", "OTHER",
  "PLACEHOLDER", "SPACE", "PLUS_PLUS", "MINUS_MINUS", "PASTE", "OR", "AND",
  "'|'", "'^'", "'&'", "EQUAL", "NOT_EQUAL", "'<'", "'>'", "LESS_OR_EQUAL",
  "GREATER_OR_EQUAL", "LEFT_SHIFT", "RIGHT_SHIFT", "'+'", "'-'", "'*'",
  "'/'", "'%'", "UNARY", "'('", "')'", "'!'", "'~'", "','", "'['", "']'",
  "'{'", "'}'", "'.'", "';'", "'='", "$accept", "input", "line",
  "expanded_line", "define", "control_line", "$@@1", "control_line_success",
  "$@@2", "$@@3", "$@@4", "$@@5", "$@@6", "$@@7", "$@@8", "control_line_error",
  "integer_constant", "expression", "identifier_list", "text_line",
  "replacement_list", "junk", "pp_tokens", "preprocessing_token",
  "operator", YY_NULLPTR
d667 3
a669 4
     285,   286,   287,   288,   289,   124,    94,    38,   290,   291,
      60,    62,   292,   293,   294,   295,    43,    45,    42,    47,
      37,   296,    40,    41,    33,   126,    44,    91,    93,   123,
     125,    46,    59,    61
d673 1
a673 1
#define YYPACT_NINF -142
d676 1
a676 1
  (!!((Yystate) == (-142)))
d687 19
a705 19
    -142,   134,  -142,  -142,   -18,   578,  -142,   -18,  -142,   -15,
    -142,  -142,    26,  -142,  -142,  -142,  -142,  -142,  -142,  -142,
    -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,
    -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,
    -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,
    -142,  -142,   182,  -142,  -142,  -142,  -142,  -142,   -18,   -18,
     -18,   -18,   -18,  -142,   508,     7,   230,  -142,  -142,     9,
      25,  -142,  -142,  -142,    35,  -142,   -15,   470,  -142,   533,
      81,  -142,  -142,  -142,  -142,  -142,  -142,   -23,  -142,  -142,
    -142,   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,
     -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,  -142,
      65,  -142,   278,    38,    58,  -142,  -142,   470,    90,    91,
     470,  -142,    92,    37,   326,  -142,  -142,    89,  -142,   571,
     587,   602,    83,   102,     0,     0,    33,    33,    33,    33,
      20,    20,    60,    60,  -142,  -142,  -142,    66,   470,  -142,
    -142,  -142,  -142,   374,   470,   470,   422,   109,   110,  -142,
    -142,  -142,   -14,   131,   470,  -142,   136,   470,   172,  -142,
    -142,  -142,  -142,   470,     4,  -142,  -142,  -142,   173,   470,
     179,  -142,   175,  -142,  -142
d713 19
a731 19
       2,     0,     1,    83,     0,     0,    80,     0,    81,     0,
      72,    84,    85,   117,   118,   116,   112,   111,   110,   109,
      93,   107,   108,   103,   104,   105,   106,   101,   102,    95,
      96,    94,    99,   100,    88,    89,    98,    97,   114,    86,
      87,    90,    91,    92,   113,   115,     3,     7,     4,    15,
      16,     6,     0,    78,    82,    46,    44,    43,     0,     0,
       0,     0,     0,    45,     0,    19,     0,    32,    34,     0,
      23,    26,    28,    17,     0,    21,     0,     0,    38,     0,
       0,     5,    73,    85,    79,    68,    67,     0,    65,    66,
       9,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,    31,     0,     0,     0,    40,    25,     0,     0,     0,
       0,    39,     0,     0,     0,     8,    10,     0,    69,    47,
      48,    49,    50,    51,    53,    52,    57,    56,    55,    54,
      59,    58,    61,    60,    64,    63,    62,     0,    74,    20,
      30,    33,    35,     0,    76,    76,     0,     0,     0,    36,
      42,    11,     0,     0,    75,    24,     0,    77,     0,    18,
      22,    37,    70,    74,     0,    12,    27,    29,     0,    74,
       0,    13,     0,    71,    14
d737 3
a739 3
    -142,  -142,  -142,  -142,  -142,    47,  -142,  -142,  -142,  -142,
    -142,  -142,  -142,  -142,  -142,  -142,    -5,    -6,  -142,  -142,
    -141,    49,    -1,   -50,  -142
d745 3
a747 3
      -1,     1,    46,    47,   149,    48,   120,    49,   110,   122,
     117,   118,   119,   113,   114,    50,    63,    64,   174,    51,
     163,   166,   164,    53,    54
d755 26
a780 22
      52,    79,    84,    55,    80,    56,    57,   172,    56,    57,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,    58,    59,
     128,     5,   178,   109,    60,   115,    61,    62,   182,   173,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   116,    85,    86,    87,    88,    89,   179,   158,    81,
     180,   121,    84,   159,   151,   112,   104,   105,   106,   107,
     108,   123,   147,   148,    84,   127,   124,   102,   103,   104,
     105,   106,   107,   108,   152,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,    84,    56,    57,    84,   126,   106,   107,
     108,   154,   155,   157,    84,   161,   153,    84,   162,   156,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,     2,   170,   171,     3,     4,     5,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   167,   167,     6,     7,   175,     8,     9,
      10,    11,   176,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,     3,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,   177,   181,
     183,   184,     0,     6,   168,     0,     8,     0,    82,    11,
       0,    83,    13,    14,    15,    16,    17,    18,    19,    20,
d782 16
a797 4
      31,    32,    33,     3,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,     0,     0,     0,     0,
       0,     6,     0,     0,     8,     0,   111,    11,     0,    83,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
d799 7
a805 18
      33,     3,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,     0,     0,     0,     0,     0,     6,
       0,     0,     8,     0,   150,    11,     0,    83,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,     3,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,     0,     0,     0,     0,     0,     6,     0,     0,
       8,     0,   160,    11,     0,    83,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,     3,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
       0,     0,     0,     0,     0,     6,     0,     0,     8,     0,
     165,    11,     0,    83,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,     3,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     6,     0,     0,     8,     0,   169,    11,
       0,    83,    13,    14,    15,    16,    17,    18,    19,    20,
d807 18
a824 19
      31,    32,    33,     3,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,     0,     0,     0,     0,
       0,     6,     0,     0,     8,     0,     0,    11,     0,    83,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,     0,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    90,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   125,
       0,     0,     0,     0,     0,     0,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,    65,     0,     0,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,     0,
       0,     0,     0,     0,    78,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108
d829 18
a846 1
       1,     7,    52,    21,     9,    23,    24,    21,    23,    24,
d848 33
a880 10
      43,    44,    45,    46,    47,    48,    49,    50,    46,    47,
      53,     5,   173,    26,    52,    26,    54,    55,   179,    53,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    26,    58,    59,    60,    61,    62,    53,    21,    12,
      56,    26,   112,    26,    26,    66,    46,    47,    48,    49,
      50,    76,     7,     8,   124,    80,    77,    44,    45,    46,
      47,    48,    49,    50,    26,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   153,    23,    24,   156,    26,    48,    49,
      50,    21,    21,    21,   164,    26,   117,   167,    52,   120,
d882 4
a885 8
      47,    48,    49,    50,     0,    26,    26,     3,     4,     5,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,   154,   155,    21,    22,    26,    24,    25,
      26,    27,    26,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,     3,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    26,    26,
      21,    26,    -1,    21,   155,    -1,    24,    -1,    26,    27,
d887 3
a889 4
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,     3,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,
      -1,    21,    -1,    -1,    24,    -1,    26,    27,    -1,    29,
d891 1
a891 9
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,     3,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    21,
      -1,    -1,    24,    -1,    26,    27,    -1,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,     3,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    -1,    -1,    -1,    -1,    -1,    21,    -1,    -1,
      24,    -1,    26,    27,    -1,    29,    30,    31,    32,    33,
d893 6
a898 29
      44,    45,    46,    47,    48,    49,    50,     3,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    21,    -1,    -1,    24,    -1,
      26,    27,    -1,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,     3,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    -1,    -1,
      -1,    -1,    -1,    21,    -1,    -1,    24,    -1,    26,    27,
      -1,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,     3,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,
      -1,    21,    -1,    -1,    24,    -1,    -1,    27,    -1,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    26,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    26,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,     6,    -1,    -1,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    26,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50
d905 19
a923 19
       0,    65,     0,     3,     4,     5,    21,    22,    24,    25,
      26,    27,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    66,    67,    69,    71,
      79,    83,    86,    87,    88,    21,    23,    24,    46,    47,
      52,    54,    55,    80,    81,     6,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    26,    81,
      80,    69,    26,    29,    87,    81,    81,    81,    81,    81,
      26,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    26,
      72,    26,    86,    77,    78,    26,    26,    74,    75,    76,
      70,    26,    73,    80,    86,    26,    26,    80,    53,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,     7,     8,    68,
      26,    26,    26,    86,    21,    21,    86,    21,    21,    26,
      26,    26,    52,    84,    86,    26,    85,    86,    85,    26,
      26,    26,    21,    53,    82,    26,    26,    26,    84,    53,
      56,    26,    84,    21,    26
d929 12
a940 12
       0,    64,    65,    65,    66,    66,    66,    66,    67,    67,
      67,    67,    68,    68,    68,    69,    69,    70,    69,    72,
      71,    73,    71,    74,    71,    71,    75,    71,    76,    71,
      71,    71,    77,    71,    78,    71,    71,    71,    71,    71,
      79,    79,    79,    80,    80,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      82,    82,    83,    83,    84,    84,    85,    85,    86,    86,
      87,    87,    87,    87,    87,    87,    88,    88,    88,    88,
      88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
      88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
      88,    88,    88,    88,    88,    88,    88,    88,    88
d946 8
a953 8
       0,     2,     0,     2,     1,     2,     1,     1,     3,     3,
       3,     4,     3,     5,     6,     1,     1,     0,     5,     0,
       4,     0,     5,     0,     5,     3,     0,     6,     0,     6,
       4,     3,     0,     4,     0,     4,     4,     5,     2,     3,
       3,     3,     4,     1,     1,     1,     1,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     2,     2,     3,
       1,     3,     1,     2,     0,     1,     0,     1,     1,     2,
d957 1
a957 1
       1,     1,     1,     1,     1,     1,     1,     1,     1
d1551 1
a1551 1
#line 165 "glcpp/glcpp-parse.y" /* yacc.c:1429  */
d1560 1
a1560 1
#line 1568 "glcpp/glcpp-parse.c" /* yacc.c:1429  */
d1746 32
a1777 2
        case 6:
#line 213 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1783 1
a1783 1
#line 1761 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1786 2
a1787 2
  case 8:
#line 222 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1789 1
a1789 3
		if (parser->is_gles && (yyvsp[-1].expression_value).undefined_macro)
			glcpp_error(& (yylsp[-2]), parser, "undefined macro %s in expression (illegal in GLES)", (yyvsp[-1].expression_value).undefined_macro);
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-2]), (yyvsp[-1].expression_value).value);
d1791 1
a1791 1
#line 1771 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1794 2
a1795 2
  case 9:
#line 227 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1797 1
a1797 3
		if (parser->is_gles && (yyvsp[-1].expression_value).undefined_macro)
			glcpp_error(& (yylsp[-2]), parser, "undefined macro %s in expression (illegal in GLES)", (yyvsp[-1].expression_value).undefined_macro);
		_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-2]), "elif", (yyvsp[-1].expression_value).value);
d1799 1
a1799 1
#line 1781 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1802 2
a1803 2
  case 10:
#line 232 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1812 1
a1812 1
#line 1794 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1815 2
a1816 2
  case 11:
#line 240 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1827 1
a1827 1
#line 1809 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1830 2
a1831 2
  case 12:
#line 253 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1835 1
a1835 1
#line 1817 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1838 2
a1839 2
  case 13:
#line 256 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1843 1
a1843 1
#line 1825 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1846 2
a1847 2
  case 14:
#line 259 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1851 1
a1851 9
#line 1833 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 15:
#line 265 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		ralloc_asprintf_rewrite_tail (&parser->output, &parser->output_length, "\n");
	}
#line 1841 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1855 1
a1855 1
#line 269 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1859 1
a1859 16
#line 1849 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 18:
#line 271 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {

		if (parser->skip_stack == NULL ||
		    parser->skip_stack->type == SKIP_NO_SKIP)
		{
			_glcpp_parser_expand_and_lex_from (parser,
							   LINE_EXPANDED, (yyvsp[-1].token_list),
							   EXPANSION_MODE_IGNORE_DEFINED);
		}
	}
#line 1864 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1863 1
a1863 1
#line 284 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1867 1
a1867 1
#line 1872 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1870 2
a1871 2
  case 21:
#line 287 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1873 1
a1873 16
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1880 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 22:
#line 289 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		macro_t *macro;
		if (strcmp("__LINE__", (yyvsp[-1].str)) == 0
		    || strcmp("__FILE__", (yyvsp[-1].str)) == 0
		    || strcmp("__VERSION__", (yyvsp[-1].str)) == 0)
			glcpp_error(& (yylsp[-4]), parser, "Built-in (pre-defined)"
				    " macro names can not be undefined.");

		macro = hash_table_find (parser->defines, (yyvsp[-1].str));
d1880 1
a1880 1
#line 1900 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1883 2
a1884 2
  case 23:
#line 304 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1888 1
a1888 1
#line 1908 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1891 2
a1892 2
  case 24:
#line 306 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1905 1
a1905 2
							   IF_EXPANDED, (yyvsp[-1].token_list),
							   EXPANSION_MODE_EVALUATE_DEFINED);
d1909 1
a1909 1
			_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-4]), 0);
d1913 1
a1913 1
#line 1934 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1916 2
a1917 2
  case 25:
#line 327 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1924 1
a1924 1
			glcpp_error(& (yylsp[-2]), parser, "#if with no expression");
d1926 1
a1926 1
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-2]), 0);
d1928 1
a1928 1
#line 1949 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1931 2
a1932 2
  case 26:
#line 337 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1936 1
a1936 1
#line 1957 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1939 2
a1940 2
  case 27:
#line 339 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1944 1
a1944 1
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-5]), macro != NULL);
d1946 1
a1946 1
#line 1967 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1949 2
a1950 2
  case 28:
#line 344 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1954 1
a1954 1
#line 1975 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1957 2
a1958 2
  case 29:
#line 346 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1964 1
a1964 1
#line 1985 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1967 2
a1968 2
  case 30:
#line 351 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1981 1
a1981 2
							   ELIF_EXPANDED, (yyvsp[-1].token_list),
							   EXPANSION_MODE_EVALUATE_DEFINED);
d1986 1
a1986 1
			glcpp_error(& (yylsp[-3]), parser, "#elif after #else");
d1990 1
a1990 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-3]),
d1994 1
a1994 1
#line 2016 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1997 2
a1998 2
  case 31:
#line 377 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2005 1
a2005 1
			glcpp_error(& (yylsp[-2]), parser, "#elif with no expression");
d2010 1
a2010 1
			glcpp_error(& (yylsp[-2]), parser, "#elif after #else");
d2014 1
a2014 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-2]),
d2016 1
a2016 1
			glcpp_warning(& (yylsp[-2]), parser, "ignoring illegal #elif without expression");
d2019 1
a2019 1
#line 2041 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2022 2
a2023 8
  case 32:
#line 397 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { parser->lexing_directive = 1; }
#line 2047 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 33:
#line 397 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2028 1
a2028 1
			glcpp_error(& (yylsp[-3]), parser, "multiple #else");
d2032 1
a2032 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-3]), "else", 1);
d2037 1
a2037 1
#line 2065 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2040 2
a2041 2
  case 34:
#line 410 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2043 1
a2043 1
		_glcpp_parser_skip_stack_pop (parser, & (yylsp[-1]));
d2045 1
a2045 1
#line 2073 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2048 2
a2049 2
  case 36:
#line 413 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2052 1
a2052 1
			glcpp_error(& (yylsp[-3]), parser, "#version must appear on the first line");
d2056 1
a2056 1
#line 2084 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2059 2
a2060 2
  case 37:
#line 419 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2063 1
a2063 1
			glcpp_error(& (yylsp[-4]), parser, "#version must appear on the first line");
d2067 1
a2067 1
#line 2095 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2070 2
a2071 2
  case 38:
#line 425 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2075 1
a2075 1
#line 2103 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2078 2
a2079 2
  case 39:
#line 428 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2081 15
a2095 1
		ralloc_asprintf_rewrite_tail (&parser->output, &parser->output_length, "#%s", (yyvsp[-1].str));
d2097 1
a2097 1
#line 2111 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2101 1
a2101 1
#line 434 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2103 3
a2105 1
		glcpp_error(& (yylsp[-2]), parser, "#%s", (yyvsp[-1].str));
d2107 1
a2107 1
#line 2119 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2111 1
a2111 1
#line 437 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2113 1
a2113 1
		glcpp_error (& (yylsp[-2]), parser, "#define without macro name");
d2115 1
a2115 1
#line 2127 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2119 1
a2119 1
#line 440 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2121 1
a2121 1
		glcpp_error (& (yylsp[-3]), parser, "Illegal non-directive after #");
d2123 1
a2123 1
#line 2135 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2127 1
a2127 1
#line 446 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2129 1
a2129 7
		if (strlen ((yyvsp[0].str)) >= 3 && strncmp ((yyvsp[0].str), "0x", 2) == 0) {
			(yyval.ival) = strtoll ((yyvsp[0].str) + 2, NULL, 16);
		} else if ((yyvsp[0].str)[0] == '0') {
			(yyval.ival) = strtoll ((yyvsp[0].str), NULL, 8);
		} else {
			(yyval.ival) = strtoll ((yyvsp[0].str), NULL, 10);
		}
d2131 1
a2131 1
#line 2149 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2135 1
a2135 1
#line 455 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2137 1
a2137 1
		(yyval.ival) = (yyvsp[0].ival);
d2139 1
a2139 1
#line 2157 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2143 1
a2143 1
#line 460 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2145 1
a2145 2
		(yyval.expression_value).value = (yyvsp[0].ival);
		(yyval.expression_value).undefined_macro = NULL;
d2147 1
a2147 1
#line 2166 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2151 1
a2151 1
#line 464 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2153 1
a2153 5
		(yyval.expression_value).value = 0;
		if (parser->is_gles)
			(yyval.expression_value).undefined_macro = ralloc_strdup (parser, (yyvsp[0].str));
		else
			(yyval.expression_value).undefined_macro = NULL;
d2155 1
a2155 1
#line 2178 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2159 1
a2159 1
#line 471 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2161 1
a2161 9
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value || (yyvsp[0].expression_value).value;

		/* Short-circuit: Only flag undefined from right side
		 * if left side evaluates to false.
		 */
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else if (! (yyvsp[-2].expression_value).value)
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2163 1
a2163 1
#line 2194 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2167 1
a2167 1
#line 482 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2169 1
a2169 9
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value && (yyvsp[0].expression_value).value;

		/* Short-circuit: Only flag undefined from right-side
		 * if left side evaluates to true.
		 */
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else if ((yyvsp[-2].expression_value).value)
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2171 1
a2171 1
#line 2210 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2175 1
a2175 1
#line 493 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2177 1
a2177 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value | (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2179 1
a2179 1
#line 2222 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2183 1
a2183 1
#line 500 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2185 1
a2185 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value ^ (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2187 1
a2187 1
#line 2234 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2191 1
a2191 1
#line 507 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2193 1
a2193 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value & (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2195 1
a2195 1
#line 2246 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2199 1
a2199 1
#line 514 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2201 1
a2201 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value != (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2203 1
a2203 1
#line 2258 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2207 1
a2207 1
#line 521 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2209 1
a2209 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value == (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2211 1
a2211 1
#line 2270 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2215 1
a2215 1
#line 528 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2217 1
a2217 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value >= (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2219 1
a2219 1
#line 2282 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2223 1
a2223 1
#line 535 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2225 1
a2225 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value <= (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2227 1
a2227 1
#line 2294 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2231 1
a2231 1
#line 542 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2233 6
a2238 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value > (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2240 1
a2240 1
#line 2306 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2244 1
a2244 1
#line 549 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2246 6
a2251 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value < (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2253 1
a2253 1
#line 2318 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2257 1
a2257 1
#line 556 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2259 1
a2259 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value >> (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2261 1
a2261 1
#line 2330 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2265 1
a2265 1
#line 563 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2267 1
a2267 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value << (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2269 1
a2269 1
#line 2342 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2273 1
a2273 1
#line 570 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2275 1
a2275 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value - (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2277 1
a2277 1
#line 2354 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2281 1
a2281 1
#line 577 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2283 1
a2283 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value + (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2285 1
a2285 1
#line 2366 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2289 1
a2289 1
#line 584 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2291 1
a2291 10
		if ((yyvsp[0].expression_value).value == 0) {
			yyerror (& (yylsp[-2]), parser,
				 "zero modulus in preprocessor directive");
		} else {
			(yyval.expression_value).value = (yyvsp[-2].expression_value).value % (yyvsp[0].expression_value).value;
		}
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2293 1
a2293 1
#line 2383 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2297 1
a2297 1
#line 596 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2299 1
a2299 10
		if ((yyvsp[0].expression_value).value == 0) {
			yyerror (& (yylsp[-2]), parser,
				 "division by 0 in preprocessor directive");
		} else {
			(yyval.expression_value).value = (yyvsp[-2].expression_value).value / (yyvsp[0].expression_value).value;
		}
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2301 1
a2301 1
#line 2400 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2305 1
a2305 1
#line 608 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2307 3
a2309 5
		(yyval.expression_value).value = (yyvsp[-2].expression_value).value * (yyvsp[0].expression_value).value;
		if ((yyvsp[-2].expression_value).undefined_macro)
			(yyval.expression_value).undefined_macro = (yyvsp[-2].expression_value).undefined_macro;
                else
			(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2311 1
a2311 1
#line 2412 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2315 1
a2315 1
#line 615 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2317 3
a2319 2
		(yyval.expression_value).value = ! (yyvsp[0].expression_value).value;
		(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2321 1
a2321 1
#line 2421 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2325 7
a2331 1
#line 619 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2333 1
a2333 2
		(yyval.expression_value).value = ~ (yyvsp[0].expression_value).value;
		(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2335 1
a2335 1
#line 2430 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2338 4
a2341 7
  case 67:
#line 623 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.expression_value).value = - (yyvsp[0].expression_value).value;
		(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
	}
#line 2439 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2344 2
a2345 2
  case 68:
#line 627 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2347 1
a2347 2
		(yyval.expression_value).value = + (yyvsp[0].expression_value).value;
		(yyval.expression_value).undefined_macro = (yyvsp[0].expression_value).undefined_macro;
d2349 1
a2349 1
#line 2448 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2352 2
a2353 2
  case 69:
#line 631 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2355 2
a2356 1
		(yyval.expression_value) = (yyvsp[-1].expression_value);
d2358 1
a2358 1
#line 2456 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2361 2
a2362 2
  case 70:
#line 637 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2364 2
a2365 3
		(yyval.string_list) = _string_list_create (parser);
		_string_list_append_item ((yyval.string_list), (yyvsp[0].str));
		ralloc_steal ((yyval.string_list), (yyvsp[0].str));
d2367 1
a2367 1
#line 2466 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2370 2
a2371 2
  case 71:
#line 642 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2373 2
a2374 3
		(yyval.string_list) = (yyvsp[-2].string_list);	
		_string_list_append_item ((yyval.string_list), (yyvsp[0].str));
		ralloc_steal ((yyval.string_list), (yyvsp[0].str));
d2376 1
a2376 13
#line 2476 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 72:
#line 650 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.token_list) = NULL; }
#line 2482 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 74:
#line 655 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.token_list) = NULL; }
#line 2488 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2380 1
a2380 1
#line 661 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2382 2
a2383 1
		glcpp_error(&(yylsp[0]), parser, "extra tokens at end of directive");
d2385 1
a2385 1
#line 2496 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2389 1
a2389 1
#line 667 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2395 1
a2395 1
#line 2506 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2399 1
a2399 1
#line 672 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2404 1
a2404 1
#line 2515 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2408 1
a2408 1
#line 679 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2413 1
a2413 1
#line 2524 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2417 1
a2417 1
#line 683 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2422 1
a2422 1
#line 2533 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2426 1
a2426 1
#line 687 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2431 1
a2431 1
#line 2542 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2435 1
a2435 1
#line 691 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2437 1
a2437 1
		(yyval.token) = _token_create_ival (parser, DEFINED, DEFINED);
d2440 1
a2440 1
#line 2551 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2444 1
a2444 1
#line 695 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2446 1
a2446 1
		(yyval.token) = _token_create_str (parser, OTHER, (yyvsp[0].str));
d2449 1
a2449 1
#line 2560 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2453 3
a2455 6
#line 699 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.token) = _token_create_ival (parser, SPACE, SPACE);
		(yyval.token)->location = yylloc;
	}
#line 2569 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2459 3
a2461 3
#line 706 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '['; }
#line 2575 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2465 3
a2467 3
#line 707 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = ']'; }
#line 2581 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2471 3
a2473 3
#line 708 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '('; }
#line 2587 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2477 3
a2479 3
#line 709 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = ')'; }
#line 2593 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2483 3
a2485 3
#line 710 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '{'; }
#line 2599 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2489 3
a2491 3
#line 711 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '}'; }
#line 2605 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2495 3
a2497 3
#line 712 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '.'; }
#line 2611 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2501 3
a2503 3
#line 713 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '&'; }
#line 2617 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2507 3
a2509 3
#line 714 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '*'; }
#line 2623 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2513 3
a2515 3
#line 715 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '+'; }
#line 2629 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2519 3
a2521 3
#line 716 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '-'; }
#line 2635 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2525 3
a2527 3
#line 717 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '~'; }
#line 2641 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2531 3
a2533 3
#line 718 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '!'; }
#line 2647 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2537 3
a2539 3
#line 719 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '/'; }
#line 2653 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2543 3
a2545 3
#line 720 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '%'; }
#line 2659 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2549 3
a2551 3
#line 721 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = LEFT_SHIFT; }
#line 2665 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2555 3
a2557 3
#line 722 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = RIGHT_SHIFT; }
#line 2671 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2561 3
a2563 3
#line 723 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '<'; }
#line 2677 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2567 3
a2569 3
#line 724 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '>'; }
#line 2683 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2573 3
a2575 3
#line 725 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = LESS_OR_EQUAL; }
#line 2689 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2579 3
a2581 3
#line 726 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = GREATER_OR_EQUAL; }
#line 2695 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2585 3
a2587 3
#line 727 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = EQUAL; }
#line 2701 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2591 3
a2593 3
#line 728 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = NOT_EQUAL; }
#line 2707 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2597 3
a2599 3
#line 729 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '^'; }
#line 2713 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2603 3
a2605 3
#line 730 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '|'; }
#line 2719 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2609 3
a2611 3
#line 731 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = AND; }
#line 2725 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2615 3
a2617 3
#line 732 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = OR; }
#line 2731 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2621 3
a2623 3
#line 733 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = ';'; }
#line 2737 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2627 3
a2629 3
#line 734 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = ','; }
#line 2743 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2633 1
a2633 7
#line 735 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = '='; }
#line 2749 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 116:
#line 736 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2635 1
a2635 1
#line 2755 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
a2637 5
  case 117:
#line 737 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = PLUS_PLUS; }
#line 2761 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;
d2639 1
a2639 8
  case 118:
#line 738 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.ival) = MINUS_MINUS; }
#line 2767 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;


#line 2771 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2874 1
a2874 1
#line 741 "glcpp/glcpp-parse.y" /* yacc.c:1906  */
a2927 19
/* Return duplicate string in list (if any), NULL otherwise. */
const char *
_string_list_has_duplicate (string_list_t *list)
{
	string_node_t *node, *dup;

	if (list == NULL)
		return NULL;

	for (node = list->head; node; node = node->next) {
		for (dup = node->next; dup; dup = dup->next) {
			if (strcmp (node->str, dup->str) == 0)
				return node->str;
		}
	}

	return NULL;
}

d3185 8
a3192 10
		/* Make sure whitespace appears in the same places in both.
		 * It need not be exactly the same amount of whitespace,
		 * though.
		 */
		if (node_a->token->type == SPACE
		    && node_b->token->type == SPACE) {
			while (node_a->token->type == SPACE)
				node_a = node_a->next;
			while (node_b->token->type == SPACE)
				node_b = node_b->next;
d3272 2
a3273 8
        case PLUS_PLUS:
		ralloc_asprintf_rewrite_tail (out, len, "++");
		break;
        case MINUS_MINUS:
		ralloc_asprintf_rewrite_tail (out, len, "--");
		break;
	case DEFINED:
		ralloc_asprintf_rewrite_tail (out, len, "defined");
a3279 1

d3455 1
a3455 1
	parser->lexing_directive = 0;
a3456 3
	parser->last_token_was_newline = 0;
	parser->last_token_was_space = 0;
	parser->first_non_space_token_this_line = 1;
a3462 1
	parser->skipping = 0;
a3607 124
/* Evaluate a DEFINED token node (based on subsequent tokens in the list).
 *
 * Note: This function must only be called when "node" is a DEFINED token,
 * (and will abort with an assertion failure otherwise).
 *
 * If "node" is followed, (ignoring any SPACE tokens), by an IDENTIFIER token
 * (optionally preceded and followed by '(' and ')' tokens) then the following
 * occurs:
 *
 *	If the identifier is a defined macro, this function returns 1.
 *
 *	If the identifier is not a defined macro, this function returns 0.
 *
 *	In either case, *last will be updated to the last node in the list
 *	consumed by the evaluation, (either the token of the identifier or the
 *	token of the closing parenthesis).
 *
 * In all other cases, (such as "node is the final node of the list", or
 * "missing closing parenthesis", etc.), this function generates a
 * preprocessor error, returns -1 and *last will not be set.
 */
static int
_glcpp_parser_evaluate_defined (glcpp_parser_t *parser,
				token_node_t *node,
				token_node_t **last)
{
	token_node_t *argument, *defined = node;

	assert (node->token->type == DEFINED);

	node = node->next;

	/* Ignore whitespace after DEFINED token. */
	while (node && node->token->type == SPACE)
		node = node->next;

	if (node == NULL)
		goto FAIL;

	if (node->token->type == IDENTIFIER || node->token->type == OTHER) {
		argument = node;
	} else if (node->token->type == '(') {
		node = node->next;

		/* Ignore whitespace after '(' token. */
		while (node && node->token->type == SPACE)
			node = node->next;

		if (node == NULL || (node->token->type != IDENTIFIER &&
				     node->token->type != OTHER))
		{
			goto FAIL;
		}

		argument = node;

		node = node->next;

		/* Ignore whitespace after identifier, before ')' token. */
		while (node && node->token->type == SPACE)
			node = node->next;

		if (node == NULL || node->token->type != ')')
			goto FAIL;
	} else {
		goto FAIL;
	}

	*last = node;

	return hash_table_find (parser->defines,
				argument->token->value.str) ? 1 : 0;

FAIL:
	glcpp_error (&defined->token->location, parser,
		     "\"defined\" not followed by an identifier");
	return -1;
}

/* Evaluate all DEFINED nodes in a given list, modifying the list in place.
 */
static void
_glcpp_parser_evaluate_defined_in_list (glcpp_parser_t *parser,
					token_list_t *list)
{
	token_node_t *node, *node_prev, *replacement, *last = NULL;
	int value;

	if (list == NULL)
		return;

	node_prev = NULL;
	node = list->head;

	while (node) {

		if (node->token->type != DEFINED)
			goto NEXT;

		value = _glcpp_parser_evaluate_defined (parser, node, &last);
		if (value == -1)
			goto NEXT;

		replacement = ralloc (list, token_node_t);
		replacement->token = _token_create_ival (list, INTEGER, value);

		/* Splice replacement node into list, replacing from "node"
		 * through "last". */
		if (node_prev)
			node_prev->next = replacement;
		else
			list->head = replacement;
		replacement->next = last->next;
		if (last == list->tail)
			list->tail = replacement;

		node = replacement;

	NEXT:
		node_prev = node;
		node = node->next;
	}
}

a3611 3
 *
 * See the documentation of _glcpp_parser_expand_token_list for a description
 * of the "mode" parameter.
d3616 1
a3616 2
				   token_list_t *list,
				   expansion_mode_t mode)
d3624 1
a3624 1
	_glcpp_parser_expand_token_list (parser, list, mode);
a3686 3
 *
 * See the documentation of _glcpp_parser_expand_token_list for a description
 * of the "mode" parameter.
d3691 2
a3692 2
			       token_node_t **last,
			       expansion_mode_t mode)
d3761 1
a3761 2
								 expanded_argument,
								 mode);
a3800 3
 *
 * See the documentation of _glcpp_parser_expand_token_list for a description
 * of the "mode" parameter.
d3805 1
a3805 2
			   token_node_t **last,
			   expansion_mode_t mode)
d3813 8
d3872 1
a3872 1
	return _glcpp_parser_expand_function (parser, node, last, mode);
d3931 1
a3931 17
 * 'list' itself.
 *
 * The "mode" argument controls the handling of any DEFINED tokens that
 * result from expansion as follows:
 *
 *	EXPANSION_MODE_IGNORE_DEFINED: Any resulting DEFINED tokens will be
 *		left in the final list, unevaluated. This is the correct mode
 *		for expanding any list in any context other than a
 *		preprocessor conditional, (#if or #elif).
 *
 *	EXPANSION_MODE_EVALUATE_DEFINED: Any resulting DEFINED tokens will be
 *		evaluated to 0 or 1 tokens depending on whether the following
 *		token is the name of a defined macro. If the DEFINED token is
 *		not followed by an (optionally parenthesized) identifier, then
 *		an error will be generated. This the correct mode for
 *		expanding any list in the context of a preprocessor
 *		conditional, (#if or #elif).
d3935 1
a3935 2
				 token_list_t *list,
				 expansion_mode_t mode)
a3949 3
	if (mode == EXPANSION_MODE_EVALUATE_DEFINED)
		_glcpp_parser_evaluate_defined_in_list (parser, list);

d3955 1
a3955 1
		expansion = _glcpp_parser_expand_node (parser, node, &last, mode);
a3958 5
			if (mode == EXPANSION_MODE_EVALUATE_DEFINED) {
				_glcpp_parser_evaluate_defined_in_list (parser,
									expansion);
			}

d4011 1
a4011 1
	_glcpp_parser_expand_token_list (parser, list, EXPANSION_MODE_IGNORE_DEFINED);
a4071 4
	/* We define pre-defined macros before we've started parsing the
         * actual file. So if there's no location defined yet, that's what
         * were doing and we don't want to generate an error for using the
         * reserved names. */
a4103 1
	const char *dup;
a4106 6
        /* Check for any duplicate parameter names. */
	if ((dup = _string_list_has_duplicate (parameters)) != NULL) {
		glcpp_error (loc, parser, "Duplicate macro parameter \"%s\"",
			     dup);
	}

d4169 5
a4173 5
		else if (ret == DEFINE_TOKEN ||
			 ret == UNDEF || ret == IF ||
			 ret == IFDEF || ret == IFNDEF ||
			 ret == ELIF || ret == ELSE ||
			 ret == ENDIF || ret == HASH_TOKEN)
d4266 1
a4266 1
		glcpp_error (loc, parser, "#%s without #if\n", type);
a4318 2
              if (extensions->OES_standard_derivatives)
                 add_builtin_define(parser, "GL_OES_standard_derivatives", 1);
a4337 3
              if (extensions->ARB_fragment_layer_viewport)
                 add_builtin_define(parser, "GL_ARB_fragment_layer_viewport", 1);

a4340 3
	      if (extensions->ARB_explicit_uniform_location)
	         add_builtin_define(parser, "GL_ARB_explicit_uniform_location", 1);

a4378 3
	      if (extensions->AMD_vertex_shader_viewport_index)
	         add_builtin_define(parser, "GL_AMD_vertex_shader_viewport_index", 1);

a4398 3

              if (extensions->ARB_derivative_control)
                 add_builtin_define(parser, "GL_ARB_derivative_control", 1);
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d131 3
d182 5
d193 2
a194 1
				   token_list_t *list);
d199 2
a200 1
				 token_list_t *list);
d231 1
a231 1
#line 222 "glcpp/glcpp-parse.c" /* yacc.c:339  */
d255 1
a255 1
# define YYDEBUG 0
d266 39
a304 35
    COMMA_FINAL = 258,
    DEFINED = 259,
    ELIF_EXPANDED = 260,
    HASH = 261,
    HASH_DEFINE = 262,
    FUNC_IDENTIFIER = 263,
    OBJ_IDENTIFIER = 264,
    HASH_ELIF = 265,
    HASH_ELSE = 266,
    HASH_ENDIF = 267,
    HASH_IF = 268,
    HASH_IFDEF = 269,
    HASH_IFNDEF = 270,
    HASH_LINE = 271,
    HASH_UNDEF = 272,
    HASH_VERSION = 273,
    IDENTIFIER = 274,
    IF_EXPANDED = 275,
    INTEGER = 276,
    INTEGER_STRING = 277,
    LINE_EXPANDED = 278,
    NEWLINE = 279,
    OTHER = 280,
    PLACEHOLDER = 281,
    SPACE = 282,
    PASTE = 283,
    OR = 284,
    AND = 285,
    EQUAL = 286,
    NOT_EQUAL = 287,
    LESS_OR_EQUAL = 288,
    GREATER_OR_EQUAL = 289,
    LEFT_SHIFT = 290,
    RIGHT_SHIFT = 291,
    UNARY = 292
d332 1
a332 1
#line 319 "glcpp/glcpp-parse.c" /* yacc.c:358  */
d576 1
a576 1
#define YYLAST   695
d579 1
a579 1
#define YYNTOKENS  60
d581 1
a581 1
#define YYNNTS  26
d583 1
a583 1
#define YYNRULES  115
d585 1
a585 1
#define YYNSTATES  181
d590 1
a590 1
#define YYMAXUTOK   292
d602 4
a605 4
       2,     2,     2,    50,     2,     2,     2,    46,    33,     2,
      48,    49,    44,    42,    52,    43,    57,    45,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,    58,
      36,    59,    37,     2,     2,     2,     2,     2,     2,     2,
d608 1
a608 1
       2,    53,     2,    54,    32,     2,     2,     2,     2,     2,
d611 1
a611 1
       2,     2,     2,    55,    31,    56,    51,     2,     2,     2,
d627 2
a628 2
      25,    26,    27,    28,    29,    30,    34,    35,    38,    39,
      40,    41,    47
d635 12
a646 12
       0,   188,   188,   190,   194,   197,   197,   208,   213,   214,
     218,   221,   224,   232,   245,   248,   251,   257,   257,   260,
     260,   270,   270,   292,   302,   302,   309,   309,   316,   341,
     361,   361,   374,   374,   377,   383,   389,   395,   404,   409,
     410,   415,   418,   421,   424,   427,   430,   433,   436,   439,
     442,   445,   448,   451,   454,   457,   460,   468,   476,   479,
     482,   485,   488,   491,   497,   502,   510,   511,   515,   521,
     522,   525,   527,   534,   538,   542,   547,   551,   558,   563,
     570,   574,   578,   582,   586,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623
d655 15
a669 15
  "$end", "error", "$undefined", "COMMA_FINAL", "DEFINED",
  "ELIF_EXPANDED", "HASH", "HASH_DEFINE", "FUNC_IDENTIFIER",
  "OBJ_IDENTIFIER", "HASH_ELIF", "HASH_ELSE", "HASH_ENDIF", "HASH_IF",
  "HASH_IFDEF", "HASH_IFNDEF", "HASH_LINE", "HASH_UNDEF", "HASH_VERSION",
  "IDENTIFIER", "IF_EXPANDED", "INTEGER", "INTEGER_STRING",
  "LINE_EXPANDED", "NEWLINE", "OTHER", "PLACEHOLDER", "SPACE", "PASTE",
  "OR", "AND", "'|'", "'^'", "'&'", "EQUAL", "NOT_EQUAL", "'<'", "'>'",
  "LESS_OR_EQUAL", "GREATER_OR_EQUAL", "LEFT_SHIFT", "RIGHT_SHIFT", "'+'",
  "'-'", "'*'", "'/'", "'%'", "UNARY", "'('", "')'", "'!'", "'~'", "','",
  "'['", "']'", "'{'", "'}'", "'.'", "';'", "'='", "$accept", "input",
  "line", "$@@1", "expanded_line", "define", "control_line", "$@@2", "$@@3",
  "$@@4", "$@@5", "$@@6", "$@@7", "$@@8", "integer_constant", "expression",
  "identifier_list", "text_line", "non_directive", "replacement_list",
  "junk", "conditional_token", "conditional_tokens", "pp_tokens",
  "preprocessing_token", "operator", YY_NULLPTR
d681 4
a684 3
     285,   124,    94,    38,   286,   287,    60,    62,   288,   289,
     290,   291,    43,    45,    42,    47,    37,   292,    40,    41,
      33,   126,    44,    91,    93,   123,   125,    46,    59,    61
d688 1
a688 1
#define YYPACT_NINF -166
d691 1
a691 1
  (!!((Yystate) == (-166)))
d702 19
a720 19
    -166,   147,  -166,    87,   -10,  -166,   190,  -166,  -166,   -17,
    -166,  -166,  -166,  -166,    52,  -166,    87,  -166,    52,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,  -166,  -166,  -166,   360,  -166,  -166,
    -166,  -166,  -166,    87,    87,    87,    87,    87,  -166,   519,
    -166,  -166,   401,   105,    31,  -166,  -166,   233,  -166,    34,
      44,  -166,   319,    67,    86,   483,    88,    -8,   542,    48,
    -166,  -166,  -166,  -166,   560,  -166,  -166,  -166,    87,    87,
      87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
      87,    87,    87,    87,    87,    87,  -166,   -35,   483,  -166,
    -166,    96,  -166,  -166,  -166,  -166,   276,   483,   483,   442,
      92,    93,  -166,  -166,  -166,    94,  -166,   580,   596,   611,
     625,   638,   649,   649,    19,    19,    19,    19,    38,    38,
      66,    66,  -166,  -166,  -166,    18,    95,   483,    72,  -166,
      98,   483,   100,  -166,  -166,  -166,  -166,  -166,   483,    26,
    -166,  -166,  -166,  -166,   101,   483,   107,  -166,   108,  -166,
    -166
d728 19
a746 19
       2,     0,     1,     0,     0,    17,     0,    30,    32,    21,
      24,    26,     5,    19,     0,    80,     0,    81,     0,    66,
      83,    84,   115,   111,   110,   109,   108,    92,   106,   107,
     102,   103,   104,   105,   100,   101,    94,    95,    93,    98,
      99,    87,    88,    97,    96,   113,    85,    86,    89,    90,
      91,   112,   114,     3,     8,     4,     7,     0,    78,    82,
      40,    38,    37,     0,     0,     0,     0,     0,    39,     0,
      36,     9,     0,     0,     0,    29,    76,     0,    75,     0,
       0,    23,     0,     0,     0,     0,     0,     0,     0,     0,
      67,    79,    62,    61,     0,    59,    60,    11,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    68,     0,    69,    18,
      73,     0,    28,    77,    31,    33,     0,    71,    71,     0,
       0,     0,    34,    10,    12,     0,    63,    41,    42,    43,
      44,    45,    47,    46,    51,    50,    49,    48,    53,    52,
      55,    54,    58,    57,    56,     0,     0,    70,     0,    22,
       0,    72,     0,     6,    20,    35,    13,    64,    69,     0,
      14,    74,    25,    27,     0,    69,     0,    15,     0,    65,
      16
d752 3
a754 3
    -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
    -166,  -166,  -166,  -166,   -12,   -11,  -166,  -166,  -166,  -165,
       3,   -69,    51,     0,    -6,  -166
d760 3
a762 3
      -1,     1,    53,    85,    54,   119,    55,    73,    86,    82,
      83,    84,    79,    80,    68,    69,   169,    56,    71,   156,
     160,    76,    77,   157,    58,    59
d770 22
a791 26
      78,    57,    87,   174,    72,    88,    89,    81,   123,    15,
     178,   131,    17,   155,    70,    20,   132,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,   167,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
     120,    91,    92,    93,    94,    95,    96,   123,   124,   109,
     110,   111,   112,   113,   114,   115,    91,   168,   125,    61,
      62,    78,   134,    61,    62,   175,    78,   135,   176,   121,
     111,   112,   113,   114,   115,   129,   127,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   128,    60,   130,    61,    62,
     113,   114,   115,   117,   118,   158,   164,   165,   166,   170,
      78,   171,   172,    91,   173,   177,   179,   161,   161,    63,
      64,   162,   180,   126,     0,    65,     0,    66,    67,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,    91,     3,     4,     5,    91,     0,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,     0,    17,
      18,    19,    20,     0,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    74,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,     0,     0,    15,
       0,     0,    17,     0,    75,    20,     0,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    74,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
       0,     0,    15,     0,     0,    17,     0,   122,    20,     0,
d793 4
a796 16
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      74,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,     0,     0,    15,     0,     0,    17,     0,
     159,    20,     0,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    74,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,     0,     0,    15,     0,
       0,    17,     0,     0,    20,     0,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,     0,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    15,
       0,     0,    17,     0,    90,    20,     0,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,     0,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      15,     0,     0,    17,     0,   116,    20,     0,    21,    22,
d798 18
a815 7
      33,    34,    35,    36,    37,    38,    39,    40,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    15,     0,     0,    17,     0,   163,    20,     0,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,     0,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    15,     0,     0,    17,     0,     0,    20,     0,
d817 19
a835 18
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
       0,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    97,     0,     0,     0,     0,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   133,     0,     0,     0,
       0,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,     0,     0,   136,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115
d840 1
a840 18
       6,     1,    14,   168,     4,    16,    18,    24,    77,    19,
     175,    19,    22,    48,    24,    25,    24,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    19,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      19,    57,    63,    64,    65,    66,    67,   126,    24,    40,
      41,    42,    43,    44,    45,    46,    72,    49,    24,    21,
      22,    77,    24,    21,    22,    49,    82,    89,    52,    48,
      42,    43,    44,    45,    46,    85,    19,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    19,    19,    19,    21,    22,
      44,    45,    46,     8,     9,    19,    24,    24,    24,    24,
     126,    49,    24,   129,    24,    24,    19,   127,   128,    42,
      43,   128,    24,    82,    -1,    48,    -1,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,
      -1,   157,     5,     6,     7,   161,    -1,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    31,    32,
d842 24
a865 3
      43,    44,    45,    46,     4,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    -1,    27,    28,    29,
d867 9
a875 8
      40,    41,    42,    43,    44,    45,    46,     4,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    -1,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
       4,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
d877 13
a889 7
      44,    45,    46,     4,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    -1,    19,    -1,
      -1,    22,    -1,    -1,    25,    -1,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    19,
      -1,    -1,    22,    -1,    24,    25,    -1,    27,    28,    29,
d891 6
a896 12
      40,    41,    42,    43,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      19,    -1,    -1,    22,    -1,    24,    25,    -1,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    19,    -1,    -1,    22,    -1,    24,    25,    -1,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    19,    -1,    -1,    22,    -1,    -1,    25,    -1,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
d898 8
a905 17
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    24,    -1,    -1,    -1,    -1,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    24,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    -1,    -1,    49,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46
d912 19
a930 19
       0,    61,     0,     5,     6,     7,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    22,    23,    24,
      25,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    62,    64,    66,    77,    83,    84,    85,
      19,    21,    22,    42,    43,    48,    50,    51,    74,    75,
      24,    78,    83,    67,     4,    24,    81,    82,    84,    72,
      73,    24,    69,    70,    71,    63,    68,    74,    75,    74,
      24,    84,    75,    75,    75,    75,    75,    24,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    24,     8,     9,    65,
      19,    48,    24,    81,    24,    24,    82,    19,    19,    83,
      19,    19,    24,    24,    24,    74,    49,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    48,    79,    83,    19,    24,
      80,    83,    80,    24,    24,    24,    24,    19,    49,    76,
      24,    49,    24,    24,    79,    49,    52,    24,    79,    19,
      24
d936 12
a947 12
       0,    60,    61,    61,    62,    63,    62,    62,    62,    62,
      64,    64,    64,    64,    65,    65,    65,    67,    66,    68,
      66,    69,    66,    66,    70,    66,    71,    66,    66,    66,
      72,    66,    73,    66,    66,    66,    66,    74,    74,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    76,    76,    77,    77,    78,    79,
      79,    80,    80,    81,    81,    81,    82,    82,    83,    83,
      84,    84,    84,    84,    84,    85,    85,    85,    85,    85,
      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
      85,    85,    85,    85,    85,    85
d953 8
a960 8
       0,     2,     0,     2,     1,     0,     4,     1,     1,     2,
       3,     3,     3,     4,     3,     5,     6,     0,     3,     0,
       4,     0,     4,     2,     0,     5,     0,     5,     3,     2,
       0,     3,     0,     3,     3,     4,     2,     1,     1,     1,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     2,     2,     3,     1,     3,     1,     2,     2,     0,
       1,     0,     1,     2,     4,     1,     1,     2,     1,     2,
d964 1
a964 1
       1,     1,     1,     1,     1,     1
d1558 1
a1558 1
#line 155 "glcpp/glcpp-parse.y" /* yacc.c:1429  */
d1567 1
a1567 1
#line 1561 "glcpp/glcpp-parse.c" /* yacc.c:1429  */
d1753 2
a1754 32
        case 4:
#line 194 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		ralloc_asprintf_rewrite_tail (&parser->output, &parser->output_length, "\n");
	}
#line 1752 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 5:
#line 197 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		glcpp_parser_resolve_implicit_version(parser);
	}
#line 1760 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 6:
#line 199 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {

		if (parser->skip_stack == NULL ||
		    parser->skip_stack->type == SKIP_NO_SKIP)
		{
			_glcpp_parser_expand_and_lex_from (parser,
							   LINE_EXPANDED, (yyvsp[-1].token_list));
		}
	}
#line 1774 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 7:
#line 208 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1760 1
a1760 1
#line 1784 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1763 2
a1764 2
  case 10:
#line 218 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1766 3
a1768 1
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-2]), (yyvsp[-1].ival));
d1770 1
a1770 1
#line 1792 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1773 2
a1774 2
  case 11:
#line 221 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1776 3
a1778 1
		_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-2]), "elif", (yyvsp[-1].ival));
d1780 1
a1780 1
#line 1800 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1783 2
a1784 2
  case 12:
#line 224 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1793 1
a1793 1
#line 1813 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1796 2
a1797 2
  case 13:
#line 232 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1808 1
a1808 1
#line 1828 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1811 2
a1812 2
  case 14:
#line 245 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1816 1
a1816 1
#line 1836 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1819 2
a1820 2
  case 15:
#line 248 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1824 1
a1824 1
#line 1844 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1827 2
a1828 2
  case 16:
#line 251 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1832 9
a1840 1
#line 1852 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1844 1
a1844 1
#line 257 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1848 16
a1863 1
#line 1860 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1867 1
a1867 1
#line 260 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1871 1
a1871 1
#line 1868 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1874 2
a1875 2
  case 20:
#line 262 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1877 16
a1892 1
		macro_t *macro = hash_table_find (parser->defines, (yyvsp[-1].str));
d1899 1
a1899 1
#line 1881 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1902 2
a1903 2
  case 21:
#line 270 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1907 1
a1907 1
#line 1889 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1910 2
a1911 2
  case 22:
#line 272 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1924 2
a1925 1
							   IF_EXPANDED, (yyvsp[-1].token_list));
d1929 1
a1929 1
			_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-3]), 0);
d1933 1
a1933 1
#line 1914 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1936 2
a1937 2
  case 23:
#line 292 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1944 1
a1944 1
			glcpp_error(& (yylsp[-1]), parser, "#if with no expression");
d1946 1
a1946 1
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-1]), 0);
d1948 1
a1948 1
#line 1929 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1951 2
a1952 2
  case 24:
#line 302 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1956 1
a1956 1
#line 1937 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1959 2
a1960 2
  case 25:
#line 304 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1964 1
a1964 1
		_glcpp_parser_skip_stack_push_if (parser, & (yylsp[-4]), macro != NULL);
d1966 1
a1966 1
#line 1947 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1969 2
a1970 2
  case 26:
#line 309 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1974 1
a1974 1
#line 1955 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1977 2
a1978 2
  case 27:
#line 311 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d1984 1
a1984 1
#line 1965 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d1987 2
a1988 2
  case 28:
#line 316 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2001 2
a2002 1
							   ELIF_EXPANDED, (yyvsp[-1].token_list));
d2007 1
a2007 1
			glcpp_error(& (yylsp[-2]), parser, "#elif after #else");
d2011 1
a2011 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-2]),
d2015 1
a2015 1
#line 1995 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2018 2
a2019 2
  case 29:
#line 341 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2026 1
a2026 1
			glcpp_error(& (yylsp[-1]), parser, "#elif with no expression");
d2031 1
a2031 1
			glcpp_error(& (yylsp[-1]), parser, "#elif after #else");
d2035 1
a2035 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[-1]),
d2037 1
a2037 1
			glcpp_warning(& (yylsp[-1]), parser, "ignoring illegal #elif without expression");
d2040 7
a2046 1
#line 2020 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2049 2
a2050 2
  case 30:
#line 361 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2055 1
a2055 1
			glcpp_error(& (yylsp[0]), parser, "multiple #else");
d2059 1
a2059 1
			_glcpp_parser_skip_stack_change_if (parser, & (yylsp[0]), "else", 1);
d2064 1
a2064 1
#line 2038 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2067 2
a2068 2
  case 32:
#line 374 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2070 1
a2070 1
		_glcpp_parser_skip_stack_pop (parser, & (yylsp[0]));
d2072 1
a2072 1
#line 2046 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2075 2
a2076 2
  case 34:
#line 377 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2079 1
a2079 1
			glcpp_error(& (yylsp[-2]), parser, "#version must appear on the first line");
d2083 1
a2083 1
#line 2057 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2086 2
a2087 2
  case 35:
#line 383 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2090 1
a2090 1
			glcpp_error(& (yylsp[-3]), parser, "#version must appear on the first line");
d2094 1
a2094 1
#line 2068 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2097 2
a2098 2
  case 36:
#line 389 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2102 1
a2102 1
#line 2076 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2105 2
a2106 2
  case 37:
#line 395 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2108 1
a2108 15
		if (strlen ((yyvsp[0].str)) >= 3 && strncmp ((yyvsp[0].str), "0x", 2) == 0) {
			(yyval.ival) = strtoll ((yyvsp[0].str) + 2, NULL, 16);
		} else if ((yyvsp[0].str)[0] == '0') {
			(yyval.ival) = strtoll ((yyvsp[0].str), NULL, 8);
		} else {
			(yyval.ival) = strtoll ((yyvsp[0].str), NULL, 10);
		}
	}
#line 2090 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
    break;

  case 38:
#line 404 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.ival) = (yyvsp[0].ival);
d2110 1
a2110 1
#line 2098 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2114 1
a2114 1
#line 410 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2116 1
a2116 3
		if (parser->is_gles)
			glcpp_error(& (yylsp[0]), parser, "undefined macro %s in expression (illegal in GLES)", (yyvsp[0].str));
		(yyval.ival) = 0;
d2118 1
a2118 1
#line 2108 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2122 1
a2122 1
#line 415 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2124 1
a2124 1
		(yyval.ival) = (yyvsp[-2].ival) || (yyvsp[0].ival);
d2126 1
a2126 1
#line 2116 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2130 1
a2130 1
#line 418 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2132 1
a2132 1
		(yyval.ival) = (yyvsp[-2].ival) && (yyvsp[0].ival);
d2134 1
a2134 1
#line 2124 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2138 1
a2138 1
#line 421 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2140 7
a2146 1
		(yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival);
d2148 1
a2148 1
#line 2132 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2152 1
a2152 1
#line 424 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2154 1
a2154 1
		(yyval.ival) = (yyvsp[-2].ival) ^ (yyvsp[0].ival);
d2156 1
a2156 1
#line 2140 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2160 1
a2160 1
#line 427 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2162 2
a2163 1
		(yyval.ival) = (yyvsp[-2].ival) & (yyvsp[0].ival);
d2165 1
a2165 1
#line 2148 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2169 1
a2169 1
#line 430 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2171 5
a2175 1
		(yyval.ival) = (yyvsp[-2].ival) != (yyvsp[0].ival);
d2177 1
a2177 1
#line 2156 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2181 1
a2181 1
#line 433 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2183 9
a2191 1
		(yyval.ival) = (yyvsp[-2].ival) == (yyvsp[0].ival);
d2193 1
a2193 1
#line 2164 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2197 1
a2197 1
#line 436 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2199 9
a2207 1
		(yyval.ival) = (yyvsp[-2].ival) >= (yyvsp[0].ival);
d2209 1
a2209 1
#line 2172 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2213 1
a2213 1
#line 439 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2215 5
a2219 1
		(yyval.ival) = (yyvsp[-2].ival) <= (yyvsp[0].ival);
d2221 1
a2221 1
#line 2180 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2225 1
a2225 1
#line 442 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2227 5
a2231 1
		(yyval.ival) = (yyvsp[-2].ival) > (yyvsp[0].ival);
d2233 1
a2233 1
#line 2188 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2237 1
a2237 1
#line 445 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2239 5
a2243 1
		(yyval.ival) = (yyvsp[-2].ival) < (yyvsp[0].ival);
d2245 1
a2245 1
#line 2196 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2249 1
a2249 1
#line 448 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2251 5
a2255 1
		(yyval.ival) = (yyvsp[-2].ival) >> (yyvsp[0].ival);
d2257 1
a2257 1
#line 2204 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2261 1
a2261 1
#line 451 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2263 5
a2267 1
		(yyval.ival) = (yyvsp[-2].ival) << (yyvsp[0].ival);
d2269 1
a2269 1
#line 2212 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2273 1
a2273 1
#line 454 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2275 5
a2279 1
		(yyval.ival) = (yyvsp[-2].ival) - (yyvsp[0].ival);
d2281 1
a2281 1
#line 2220 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2285 1
a2285 1
#line 457 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2287 5
a2291 1
		(yyval.ival) = (yyvsp[-2].ival) + (yyvsp[0].ival);
d2293 1
a2293 1
#line 2228 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2297 1
a2297 1
#line 460 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2299 5
a2303 6
		if ((yyvsp[0].ival) == 0) {
			yyerror (& (yylsp[-2]), parser,
				 "zero modulus in preprocessor directive");
		} else {
			(yyval.ival) = (yyvsp[-2].ival) % (yyvsp[0].ival);
		}
d2305 1
a2305 1
#line 2241 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2309 1
a2309 1
#line 468 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2311 5
a2315 6
		if ((yyvsp[0].ival) == 0) {
			yyerror (& (yylsp[-2]), parser,
				 "division by 0 in preprocessor directive");
		} else {
			(yyval.ival) = (yyvsp[-2].ival) / (yyvsp[0].ival);
		}
d2317 1
a2317 1
#line 2254 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2321 1
a2321 1
#line 476 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2323 5
a2327 1
		(yyval.ival) = (yyvsp[-2].ival) * (yyvsp[0].ival);
d2329 1
a2329 1
#line 2262 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2333 1
a2333 1
#line 479 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2335 5
a2339 1
		(yyval.ival) = ! (yyvsp[0].ival);
d2341 1
a2341 1
#line 2270 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2345 1
a2345 1
#line 482 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2347 5
a2351 1
		(yyval.ival) = ~ (yyvsp[0].ival);
d2353 1
a2353 1
#line 2278 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2357 1
a2357 1
#line 485 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2359 5
a2363 1
		(yyval.ival) = - (yyvsp[0].ival);
d2365 1
a2365 1
#line 2286 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2369 1
a2369 1
#line 488 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2371 10
a2380 1
		(yyval.ival) = + (yyvsp[0].ival);
d2382 1
a2382 1
#line 2294 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2386 1
a2386 1
#line 491 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2388 10
a2397 1
		(yyval.ival) = (yyvsp[-1].ival);
d2399 1
a2399 1
#line 2302 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2403 1
a2403 1
#line 497 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2405 5
a2409 3
		(yyval.string_list) = _string_list_create (parser);
		_string_list_append_item ((yyval.string_list), (yyvsp[0].str));
		ralloc_steal ((yyval.string_list), (yyvsp[0].str));
d2411 1
a2411 1
#line 2312 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2415 1
a2415 1
#line 502 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2417 2
a2418 3
		(yyval.string_list) = (yyvsp[-2].string_list);	
		_string_list_append_item ((yyval.string_list), (yyvsp[0].str));
		ralloc_steal ((yyval.string_list), (yyvsp[0].str));
d2420 1
a2420 1
#line 2322 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2424 15
a2438 3
#line 510 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.token_list) = NULL; }
#line 2328 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2442 1
a2442 1
#line 515 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2444 2
a2445 1
		yyerror (& (yylsp[-1]), parser, "Invalid tokens after #");
d2447 1
a2447 1
#line 2336 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2451 5
a2455 3
#line 521 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    { (yyval.token_list) = NULL; }
#line 2342 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2458 2
a2459 2
  case 72:
#line 527 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2461 3
a2463 1
		glcpp_warning(&(yylsp[0]), parser, "extra tokens at end of directive");
d2465 1
a2465 1
#line 2350 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2468 2
a2469 2
  case 73:
#line 534 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2471 3
a2473 2
		int v = hash_table_find (parser->defines, (yyvsp[0].str)) ? 1 : 0;
		(yyval.token) = _token_create_ival (parser, INTEGER, v);
d2475 1
a2475 1
#line 2359 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2478 4
a2481 7
  case 74:
#line 538 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		int v = hash_table_find (parser->defines, (yyvsp[-1].str)) ? 1 : 0;
		(yyval.token) = _token_create_ival (parser, INTEGER, v);
	}
#line 2368 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2484 4
a2487 7
  case 76:
#line 547 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
    {
		(yyval.token_list) = _token_list_create (parser);
		_token_list_append ((yyval.token_list), (yyvsp[0].token));
	}
#line 2377 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2491 1
a2491 1
#line 551 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2493 1
a2493 2
		(yyval.token_list) = (yyvsp[-1].token_list);
		_token_list_append ((yyval.token_list), (yyvsp[0].token));
d2495 1
a2495 1
#line 2386 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2499 1
a2499 1
#line 558 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2505 1
a2505 1
#line 2396 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2509 1
a2509 1
#line 563 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2514 1
a2514 1
#line 2405 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2518 1
a2518 1
#line 570 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2523 1
a2523 1
#line 2414 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2527 1
a2527 1
#line 574 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2532 1
a2532 1
#line 2423 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2536 1
a2536 1
#line 578 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2541 1
a2541 1
#line 2432 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2545 10
a2554 1
#line 582 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2559 1
a2559 1
#line 2441 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2562 2
a2563 2
  case 84:
#line 586 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2568 1
a2568 1
#line 2450 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2571 2
a2572 2
  case 85:
#line 593 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2574 1
a2574 1
#line 2456 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2577 2
a2578 2
  case 86:
#line 594 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2580 1
a2580 1
#line 2462 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2583 2
a2584 2
  case 87:
#line 595 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2586 1
a2586 1
#line 2468 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2589 2
a2590 2
  case 88:
#line 596 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2592 1
a2592 1
#line 2474 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2595 2
a2596 2
  case 89:
#line 597 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2598 1
a2598 1
#line 2480 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2601 2
a2602 2
  case 90:
#line 598 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2604 1
a2604 1
#line 2486 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2607 2
a2608 2
  case 91:
#line 599 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2610 1
a2610 1
#line 2492 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2613 2
a2614 2
  case 92:
#line 600 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2616 1
a2616 1
#line 2498 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2619 2
a2620 2
  case 93:
#line 601 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2622 1
a2622 1
#line 2504 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2625 2
a2626 2
  case 94:
#line 602 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2628 1
a2628 1
#line 2510 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2631 2
a2632 2
  case 95:
#line 603 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2634 1
a2634 1
#line 2516 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2637 2
a2638 2
  case 96:
#line 604 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2640 1
a2640 1
#line 2522 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2643 2
a2644 2
  case 97:
#line 605 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2646 1
a2646 1
#line 2528 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2649 2
a2650 2
  case 98:
#line 606 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2652 1
a2652 1
#line 2534 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2655 2
a2656 2
  case 99:
#line 607 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2658 1
a2658 1
#line 2540 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2661 2
a2662 2
  case 100:
#line 608 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2664 1
a2664 1
#line 2546 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2667 2
a2668 2
  case 101:
#line 609 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2670 1
a2670 1
#line 2552 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2673 2
a2674 2
  case 102:
#line 610 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2676 1
a2676 1
#line 2558 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2679 2
a2680 2
  case 103:
#line 611 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2682 1
a2682 1
#line 2564 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2685 2
a2686 2
  case 104:
#line 612 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2688 1
a2688 1
#line 2570 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2691 2
a2692 2
  case 105:
#line 613 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2694 1
a2694 1
#line 2576 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2697 2
a2698 2
  case 106:
#line 614 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2700 1
a2700 1
#line 2582 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2703 2
a2704 2
  case 107:
#line 615 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2706 1
a2706 1
#line 2588 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2709 2
a2710 2
  case 108:
#line 616 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2712 1
a2712 1
#line 2594 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2715 2
a2716 2
  case 109:
#line 617 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2718 1
a2718 1
#line 2600 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2721 2
a2722 2
  case 110:
#line 618 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2724 1
a2724 1
#line 2606 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2727 2
a2728 2
  case 111:
#line 619 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2730 1
a2730 1
#line 2612 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2733 2
a2734 2
  case 112:
#line 620 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2736 1
a2736 1
#line 2618 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2739 2
a2740 2
  case 113:
#line 621 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2742 1
a2742 1
#line 2624 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2745 2
a2746 2
  case 114:
#line 622 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2748 1
a2748 1
#line 2630 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2751 2
a2752 2
  case 115:
#line 623 "glcpp/glcpp-parse.y" /* yacc.c:1646  */
d2754 1
a2754 1
#line 2636 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d2757 5
d2763 8
a2770 1
#line 2640 "glcpp/glcpp-parse.c" /* yacc.c:1646  */
d3005 1
a3005 1
#line 626 "glcpp/glcpp-parse.y" /* yacc.c:1906  */
d3059 19
d3335 10
a3344 8

		if (node_a->token->type == SPACE) {
			node_a = node_a->next;
			continue;
		}

		if (node_b->token->type == SPACE) {
			node_b = node_b->next;
d3424 8
a3431 2
	case COMMA_FINAL:
		ralloc_asprintf_rewrite_tail (out, len, ",");
d3438 1
d3614 1
a3614 1
	parser->lexing_if = 0;
d3616 3
d3625 1
d3771 124
d3899 3
d3906 2
a3907 1
				   token_list_t *list)
d3915 1
a3915 1
	_glcpp_parser_expand_token_list (parser, list);
d3978 3
d3985 2
a3986 2
			       token_node_t **last)
			       
d4055 2
a4056 1
								 expanded_argument);
d4096 3
d4103 2
a4104 1
			   token_node_t **last)
a4111 8
		/* We change any COMMA into a COMMA_FINAL to prevent
		 * it being mistaken for an argument separator
		 * later. */
		if (token->type == ',') {
			token->type = COMMA_FINAL;
			token->value.ival = COMMA_FINAL;
		}

d4163 1
a4163 1
	return _glcpp_parser_expand_function (parser, node, last);
d4222 17
a4238 1
 * 'list' itself;
d4242 2
a4243 1
				 token_list_t *list)
d4258 3
d4266 1
a4266 1
		expansion = _glcpp_parser_expand_node (parser, node, &last);
d4270 5
d4327 1
a4327 1
	_glcpp_parser_expand_token_list (parser, list);
d4388 4
d4424 1
d4428 6
d4496 5
a4500 5
		else if (ret == HASH_DEFINE ||
			   ret == HASH_UNDEF || ret == HASH_IF ||
			   ret == HASH_IFDEF || ret == HASH_IFNDEF ||
			   ret == HASH_ELIF || ret == HASH_ELSE ||
			   ret == HASH_ENDIF || ret == HASH)
d4593 1
a4593 1
		glcpp_error (loc, parser, "%s without #if\n", type);
d4646 2
d4667 3
d4673 3
d4714 3
d4737 3
@


