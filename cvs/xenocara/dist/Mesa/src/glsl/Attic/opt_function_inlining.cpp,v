head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.7
date	2015.12.23.05.17.44;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.19;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.58;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.02.29;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.10;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.22;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.31;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.30;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.36;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * \file opt_function_inlining.cpp
 *
 * Replaces calls to functions with the body of the function.
 */

#include "ir.h"
#include "ir_visitor.h"
#include "ir_function_inlining.h"
#include "ir_expression_flattening.h"
#include "glsl_types.h"
#include "program/hash_table.h"

static void
do_variable_replacement(exec_list *instructions,
                        ir_variable *orig,
                        ir_dereference *repl);

namespace {

class ir_function_inlining_visitor : public ir_hierarchical_visitor {
public:
   ir_function_inlining_visitor()
   {
      progress = false;
   }

   virtual ~ir_function_inlining_visitor()
   {
      /* empty */
   }

   virtual ir_visitor_status visit_enter(ir_expression *);
   virtual ir_visitor_status visit_enter(ir_call *);
   virtual ir_visitor_status visit_enter(ir_return *);
   virtual ir_visitor_status visit_enter(ir_texture *);
   virtual ir_visitor_status visit_enter(ir_swizzle *);

   bool progress;
};

} /* unnamed namespace */

bool
do_function_inlining(exec_list *instructions)
{
   ir_function_inlining_visitor v;

   v.run(instructions);

   return v.progress;
}

static void
replace_return_with_assignment(ir_instruction *ir, void *data)
{
   void *ctx = ralloc_parent(ir);
   ir_dereference *orig_deref = (ir_dereference *) data;
   ir_return *ret = ir->as_return();

   if (ret) {
      if (ret->value) {
	 ir_rvalue *lhs = orig_deref->clone(ctx, NULL);
	 ret->replace_with(new(ctx) ir_assignment(lhs, ret->value, NULL));
      } else {
	 /* un-valued return has to be the last return, or we shouldn't
	  * have reached here. (see can_inline()).
	  */
	 assert(ret->next->is_tail_sentinel());
	 ret->remove();
      }
   }
}

void
ir_call::generate_inline(ir_instruction *next_ir)
{
   void *ctx = ralloc_parent(this);
   ir_variable **parameters;
   int num_parameters;
   int i;
   struct hash_table *ht;

   ht = hash_table_ctor(0, hash_table_pointer_hash, hash_table_pointer_compare);

   num_parameters = 0;
   foreach_list(n, &this->callee->parameters)
      num_parameters++;

   parameters = new ir_variable *[num_parameters];

   /* Generate the declarations for the parameters to our inlined code,
    * and set up the mapping of real function body variables to ours.
    */
   i = 0;
   foreach_two_lists(formal_node, &this->callee->parameters,
                     actual_node, &this->actual_parameters) {
      ir_variable *sig_param = (ir_variable *) formal_node;
      ir_rvalue *param = (ir_rvalue *) actual_node;

      /* Generate a new variable for the parameter. */
      if (sig_param->type->contains_opaque()) {
	 /* For opaque types, we want the inlined variable references
	  * referencing the passed in variable, since that will have
	  * the location information, which an assignment of an opaque
	  * variable wouldn't.  Fix it up below.
	  */
	 parameters[i] = NULL;
      } else {
	 parameters[i] = sig_param->clone(ctx, ht);
	 parameters[i]->data.mode = ir_var_auto;

	 /* Remove the read-only decoration becuase we're going to write
	  * directly to this variable.  If the cloned variable is left
	  * read-only and the inlined function is inside a loop, the loop
	  * analysis code will get confused.
	  */
	 parameters[i]->data.read_only = false;
	 next_ir->insert_before(parameters[i]);
      }

      /* Move the actual param into our param variable if it's an 'in' type. */
      if (parameters[i] && (sig_param->data.mode == ir_var_function_in ||
			    sig_param->data.mode == ir_var_const_in ||
			    sig_param->data.mode == ir_var_function_inout)) {
	 ir_assignment *assign;

	 assign = new(ctx) ir_assignment(new(ctx) ir_dereference_variable(parameters[i]),
					 param, NULL);
	 next_ir->insert_before(assign);
      }

      ++i;
   }

   exec_list new_instructions;

   /* Generate the inlined body of the function to a new list */
   foreach_list(n, &callee->body) {
      ir_instruction *ir = (ir_instruction *) n;
      ir_instruction *new_ir = ir->clone(ctx, ht);

      new_instructions.push_tail(new_ir);
      visit_tree(new_ir, replace_return_with_assignment, this->return_deref);
   }

   /* If any opaque types were passed in, replace any deref of the
    * opaque variable with a deref of the argument.
    */
   foreach_two_lists(formal_node, &this->callee->parameters,
                     actual_node, &this->actual_parameters) {
      ir_rvalue *const param = (ir_rvalue *) actual_node;
      ir_variable *sig_param = (ir_variable *) formal_node;

      if (sig_param->type->contains_opaque()) {
	 ir_dereference *deref = param->as_dereference();

	 assert(deref);
	 do_variable_replacement(&new_instructions, sig_param, deref);
      }
   }

   /* Now push those new instructions in. */
   next_ir->insert_before(&new_instructions);

   /* Copy back the value of any 'out' parameters from the function body
    * variables to our own.
    */
   i = 0;
   foreach_two_lists(formal_node, &this->callee->parameters,
                     actual_node, &this->actual_parameters) {
      ir_rvalue *const param = (ir_rvalue *) actual_node;
      const ir_variable *const sig_param = (ir_variable *) formal_node;

      /* Move our param variable into the actual param if it's an 'out' type. */
      if (parameters[i] && (sig_param->data.mode == ir_var_function_out ||
			    sig_param->data.mode == ir_var_function_inout)) {
	 ir_assignment *assign;

	 assign = new(ctx) ir_assignment(param->clone(ctx, NULL)->as_rvalue(),
					 new(ctx) ir_dereference_variable(parameters[i]),
					 NULL);
	 next_ir->insert_before(assign);
      }

      ++i;
   }

   delete [] parameters;

   hash_table_dtor(ht);
}


ir_visitor_status
ir_function_inlining_visitor::visit_enter(ir_expression *ir)
{
   (void) ir;
   return visit_continue_with_parent;
}


ir_visitor_status
ir_function_inlining_visitor::visit_enter(ir_return *ir)
{
   (void) ir;
   return visit_continue_with_parent;
}


ir_visitor_status
ir_function_inlining_visitor::visit_enter(ir_texture *ir)
{
   (void) ir;
   return visit_continue_with_parent;
}


ir_visitor_status
ir_function_inlining_visitor::visit_enter(ir_swizzle *ir)
{
   (void) ir;
   return visit_continue_with_parent;
}


ir_visitor_status
ir_function_inlining_visitor::visit_enter(ir_call *ir)
{
   if (can_inline(ir)) {
      ir->generate_inline(ir);
      ir->remove();
      this->progress = true;
   }

   return visit_continue;
}


/**
 * Replaces references to the "orig" variable with a clone of "repl."
 *
 * From the spec, opaque types can appear in the tree as function
 * (non-out) parameters and as the result of array indexing and
 * structure field selection.  In our builtin implementation, they
 * also appear in the sampler field of an ir_tex instruction.
 */

class ir_variable_replacement_visitor : public ir_hierarchical_visitor {
public:
   ir_variable_replacement_visitor(ir_variable *orig, ir_dereference *repl)
   {
      this->orig = orig;
      this->repl = repl;
   }

   virtual ~ir_variable_replacement_visitor()
   {
   }

   virtual ir_visitor_status visit_leave(ir_call *);
   virtual ir_visitor_status visit_leave(ir_dereference_array *);
   virtual ir_visitor_status visit_leave(ir_dereference_record *);
   virtual ir_visitor_status visit_leave(ir_texture *);

   void replace_deref(ir_dereference **deref);
   void replace_rvalue(ir_rvalue **rvalue);

   ir_variable *orig;
   ir_dereference *repl;
};

void
ir_variable_replacement_visitor::replace_deref(ir_dereference **deref)
{
   ir_dereference_variable *deref_var = (*deref)->as_dereference_variable();
   if (deref_var && deref_var->var == this->orig) {
      *deref = this->repl->clone(ralloc_parent(*deref), NULL);
   }
}

void
ir_variable_replacement_visitor::replace_rvalue(ir_rvalue **rvalue)
{
   if (!*rvalue)
      return;

   ir_dereference *deref = (*rvalue)->as_dereference();

   if (!deref)
      return;

   replace_deref(&deref);
   *rvalue = deref;
}

ir_visitor_status
ir_variable_replacement_visitor::visit_leave(ir_texture *ir)
{
   replace_deref(&ir->sampler);

   return visit_continue;
}

ir_visitor_status
ir_variable_replacement_visitor::visit_leave(ir_dereference_array *ir)
{
   replace_rvalue(&ir->array);
   return visit_continue;
}

ir_visitor_status
ir_variable_replacement_visitor::visit_leave(ir_dereference_record *ir)
{
   replace_rvalue(&ir->record);
   return visit_continue;
}

ir_visitor_status
ir_variable_replacement_visitor::visit_leave(ir_call *ir)
{
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
      ir_rvalue *new_param = param;
      replace_rvalue(&new_param);

      if (new_param != param) {
	 param->replace_with(new_param);
      }
   }
   return visit_continue;
}

static void
do_variable_replacement(exec_list *instructions,
                        ir_variable *orig,
                        ir_dereference *repl)
{
   ir_variable_replacement_visitor v(orig, repl);

   visit_list_elements(&v, instructions);
}
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d103 1
a103 1
   unsigned num_parameters;
d109 4
a112 1
   num_parameters = this->callee->parameters.length();
d162 2
a163 1
   foreach_in_list(ir_instruction, ir, &callee->body) {
d345 2
a346 1
   foreach_in_list_safe(ir_rvalue, param, &ir->actual_parameters) {
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d103 1
a103 1
   int num_parameters;
d109 1
a109 4
   num_parameters = 0;
   foreach_list(n, &this->callee->parameters)
      num_parameters++;

d159 1
a159 2
   foreach_list(n, &callee->body) {
      ir_instruction *ir = (ir_instruction *) n;
d341 1
a341 2
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d38 3
a40 3
do_sampler_replacement(exec_list *instructions,
		       ir_variable *sampler,
		       ir_dereference *deref);
d110 1
a110 1
   foreach_iter(exec_list_iterator, iter_sig, this->callee->parameters)
d119 4
a122 5
   exec_list_iterator sig_param_iter = this->callee->parameters.iterator();
   exec_list_iterator param_iter = this->actual_parameters.iterator();
   for (i = 0; i < num_parameters; i++) {
      ir_variable *sig_param = (ir_variable *) sig_param_iter.get();
      ir_rvalue *param = (ir_rvalue *) param_iter.get();
d125 5
a129 5
      if (sig_param->type->base_type == GLSL_TYPE_SAMPLER) {
	 /* For samplers, we want the inlined sampler references
	  * referencing the passed in sampler variable, since that
	  * will have the location information, which an assignment of
	  * a sampler wouldn't.  Fix it up below.
d134 1
a134 1
	 parameters[i]->mode = ir_var_auto;
d141 1
a141 1
	 parameters[i]->read_only = false;
d146 3
a148 3
      if (parameters[i] && (sig_param->mode == ir_var_function_in ||
			    sig_param->mode == ir_var_const_in ||
			    sig_param->mode == ir_var_function_inout)) {
d156 1
a156 2
      sig_param_iter.next();
      param_iter.next();
d162 2
a163 2
   foreach_iter(exec_list_iterator, iter, callee->body) {
      ir_instruction *ir = (ir_instruction *)iter.get();
d170 2
a171 2
   /* If any samplers were passed in, replace any deref of the sampler
    * with a deref of the sampler argument.
d173 4
a176 5
   param_iter = this->actual_parameters.iterator();
   sig_param_iter = this->callee->parameters.iterator();
   for (i = 0; i < num_parameters; i++) {
      ir_instruction *const param = (ir_instruction *) param_iter.get();
      ir_variable *sig_param = (ir_variable *) sig_param_iter.get();
d178 1
a178 1
      if (sig_param->type->base_type == GLSL_TYPE_SAMPLER) {
d182 1
a182 1
	 do_sampler_replacement(&new_instructions, sig_param, deref);
a183 2
      param_iter.next();
      sig_param_iter.next();
d193 4
a196 5
   param_iter = this->actual_parameters.iterator();
   sig_param_iter = this->callee->parameters.iterator();
   for (i = 0; i < num_parameters; i++) {
      ir_instruction *const param = (ir_instruction *) param_iter.get();
      const ir_variable *const sig_param = (ir_variable *) sig_param_iter.get();
d199 2
a200 2
      if (parameters[i] && (sig_param->mode == ir_var_function_out ||
			    sig_param->mode == ir_var_function_inout)) {
d209 1
a209 2
      param_iter.next();
      sig_param_iter.next();
d264 1
a264 1
 * Replaces references to the "sampler" variable with a clone of "deref."
d266 1
a266 1
 * From the spec, samplers can appear in the tree as function
d272 1
a272 1
class ir_sampler_replacement_visitor : public ir_hierarchical_visitor {
d274 1
a274 1
   ir_sampler_replacement_visitor(ir_variable *sampler, ir_dereference *deref)
d276 2
a277 2
      this->sampler = sampler;
      this->deref = deref;
d280 1
a280 1
   virtual ~ir_sampler_replacement_visitor()
d292 2
a293 2
   ir_variable *sampler;
   ir_dereference *deref;
d297 1
a297 1
ir_sampler_replacement_visitor::replace_deref(ir_dereference **deref)
d300 2
a301 2
   if (deref_var && deref_var->var == this->sampler) {
      *deref = this->deref->clone(ralloc_parent(*deref), NULL);
d306 1
a306 1
ir_sampler_replacement_visitor::replace_rvalue(ir_rvalue **rvalue)
d321 1
a321 1
ir_sampler_replacement_visitor::visit_leave(ir_texture *ir)
d329 1
a329 1
ir_sampler_replacement_visitor::visit_leave(ir_dereference_array *ir)
d336 1
a336 1
ir_sampler_replacement_visitor::visit_leave(ir_dereference_record *ir)
d343 1
a343 1
ir_sampler_replacement_visitor::visit_leave(ir_call *ir)
d345 2
a346 2
   foreach_iter(exec_list_iterator, iter, *ir) {
      ir_rvalue *param = (ir_rvalue *)iter.get();
d358 3
a360 3
do_sampler_replacement(exec_list *instructions,
		       ir_variable *sampler,
		       ir_dereference *deref)
d362 1
a362 1
   ir_sampler_replacement_visitor v(sampler, deref);
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a29 1
#include <inttypes.h>
d42 2
a57 1
   virtual ir_visitor_status visit_enter(ir_assignment *);
d65 1
a65 11

bool
automatic_inlining_predicate(ir_instruction *ir)
{
   ir_call *call = ir->as_call();

   if (call && can_inline(call))
      return true;

   return false;
}
a71 2
   do_expression_flattening(instructions, automatic_inlining_predicate);

d81 1
a81 1
   ir_variable *retval = (ir_variable *)data;
d86 1
a86 1
	 ir_rvalue *lhs = new(ctx) ir_dereference_variable(retval);
d98 1
a98 1
ir_rvalue *
a104 1
   ir_variable *retval = NULL;
a114 7
   /* Generate storage for the return value. */
   if (!this->callee->return_type->is_void()) {
      retval = new(ctx) ir_variable(this->callee->return_type, "_ret_val",
				    ir_var_auto);
      next_ir->insert_before(retval);
   }

d147 1
a147 1
      if (parameters[i] && (sig_param->mode == ir_var_in ||
d149 1
a149 1
			    sig_param->mode == ir_var_inout)) {
d169 1
a169 1
      visit_tree(new_ir, replace_return_with_assignment, retval);
d205 2
a206 2
      if (parameters[i] && (sig_param->mode == ir_var_out ||
			    sig_param->mode == ir_var_inout)) {
a221 5

   if (retval)
      return new(ctx) ir_dereference_variable(retval);
   else
      return NULL;
d261 1
a261 7
      /* If the call was part of some tree, then it should have been
       * flattened out or we shouldn't have seen it because of a
       * visit_continue_with_parent in this visitor.
       */
      assert(ir == base_ir);

      (void) ir->generate_inline(ir);
a268 19

ir_visitor_status
ir_function_inlining_visitor::visit_enter(ir_assignment *ir)
{
   ir_call *call = ir->rhs->as_call();
   if (!call || !can_inline(call))
      return visit_continue;

   /* generates the parameter setup, function body, and returns the return
    * value of the function
    */
   ir_rvalue *rhs = call->generate_inline(ir);
   assert(rhs);

   ir->rhs = rhs;
   this->progress = true;

   return visit_continue;
}
@


1.1
log
@Initial revision
@
text
@d168 1
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d30 1
a42 2
namespace {

d57 1
d65 11
a75 1
} /* unnamed namespace */
d82 2
d93 1
a93 1
   ir_dereference *orig_deref = (ir_dereference *) data;
d98 1
a98 1
	 ir_rvalue *lhs = orig_deref->clone(ctx, NULL);
d110 1
a110 1
void
d117 1
d128 7
d167 2
a168 3
      if (parameters[i] && (sig_param->mode == ir_var_function_in ||
			    sig_param->mode == ir_var_const_in ||
			    sig_param->mode == ir_var_function_inout)) {
d188 1
a188 1
      visit_tree(new_ir, replace_return_with_assignment, this->return_deref);
d224 2
a225 2
      if (parameters[i] && (sig_param->mode == ir_var_function_out ||
			    sig_param->mode == ir_var_function_inout)) {
d241 5
d285 7
a291 1
      ir->generate_inline(ir);
d299 19
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d38 3
a40 3
do_variable_replacement(exec_list *instructions,
                        ir_variable *orig,
                        ir_dereference *repl);
d110 1
a110 1
   foreach_list(n, &this->callee->parameters)
d119 5
a123 4
   foreach_two_lists(formal_node, &this->callee->parameters,
                     actual_node, &this->actual_parameters) {
      ir_variable *sig_param = (ir_variable *) formal_node;
      ir_rvalue *param = (ir_rvalue *) actual_node;
d126 5
a130 5
      if (sig_param->type->contains_opaque()) {
	 /* For opaque types, we want the inlined variable references
	  * referencing the passed in variable, since that will have
	  * the location information, which an assignment of an opaque
	  * variable wouldn't.  Fix it up below.
d135 1
a135 1
	 parameters[i]->data.mode = ir_var_auto;
d142 1
a142 1
	 parameters[i]->data.read_only = false;
d147 3
a149 3
      if (parameters[i] && (sig_param->data.mode == ir_var_function_in ||
			    sig_param->data.mode == ir_var_const_in ||
			    sig_param->data.mode == ir_var_function_inout)) {
d157 2
a158 1
      ++i;
d164 2
a165 2
   foreach_list(n, &callee->body) {
      ir_instruction *ir = (ir_instruction *) n;
d172 2
a173 2
   /* If any opaque types were passed in, replace any deref of the
    * opaque variable with a deref of the argument.
d175 5
a179 4
   foreach_two_lists(formal_node, &this->callee->parameters,
                     actual_node, &this->actual_parameters) {
      ir_rvalue *const param = (ir_rvalue *) actual_node;
      ir_variable *sig_param = (ir_variable *) formal_node;
d181 1
a181 1
      if (sig_param->type->contains_opaque()) {
d185 1
a185 1
	 do_variable_replacement(&new_instructions, sig_param, deref);
d187 2
d198 5
a202 4
   foreach_two_lists(formal_node, &this->callee->parameters,
                     actual_node, &this->actual_parameters) {
      ir_rvalue *const param = (ir_rvalue *) actual_node;
      const ir_variable *const sig_param = (ir_variable *) formal_node;
d205 2
a206 2
      if (parameters[i] && (sig_param->data.mode == ir_var_function_out ||
			    sig_param->data.mode == ir_var_function_inout)) {
d215 2
a216 1
      ++i;
d271 1
a271 1
 * Replaces references to the "orig" variable with a clone of "repl."
d273 1
a273 1
 * From the spec, opaque types can appear in the tree as function
d279 1
a279 1
class ir_variable_replacement_visitor : public ir_hierarchical_visitor {
d281 1
a281 1
   ir_variable_replacement_visitor(ir_variable *orig, ir_dereference *repl)
d283 2
a284 2
      this->orig = orig;
      this->repl = repl;
d287 1
a287 1
   virtual ~ir_variable_replacement_visitor()
d299 2
a300 2
   ir_variable *orig;
   ir_dereference *repl;
d304 1
a304 1
ir_variable_replacement_visitor::replace_deref(ir_dereference **deref)
d307 2
a308 2
   if (deref_var && deref_var->var == this->orig) {
      *deref = this->repl->clone(ralloc_parent(*deref), NULL);
d313 1
a313 1
ir_variable_replacement_visitor::replace_rvalue(ir_rvalue **rvalue)
d328 1
a328 1
ir_variable_replacement_visitor::visit_leave(ir_texture *ir)
d336 1
a336 1
ir_variable_replacement_visitor::visit_leave(ir_dereference_array *ir)
d343 1
a343 1
ir_variable_replacement_visitor::visit_leave(ir_dereference_record *ir)
d350 1
a350 1
ir_variable_replacement_visitor::visit_leave(ir_call *ir)
d352 2
a353 2
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
d365 3
a367 3
do_variable_replacement(exec_list *instructions,
                        ir_variable *orig,
                        ir_dereference *repl)
d369 1
a369 1
   ir_variable_replacement_visitor v(orig, repl);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d103 1
a103 1
   unsigned num_parameters;
d109 4
a112 1
   num_parameters = this->callee->parameters.length();
d162 2
a163 1
   foreach_in_list(ir_instruction, ir, &callee->body) {
d345 2
a346 1
   foreach_in_list_safe(ir_rvalue, param, &ir->actual_parameters) {
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d103 1
a103 1
   int num_parameters;
d109 1
a109 4
   num_parameters = 0;
   foreach_list(n, &this->callee->parameters)
      num_parameters++;

d159 1
a159 2
   foreach_list(n, &callee->body) {
      ir_instruction *ir = (ir_instruction *) n;
d341 1
a341 2
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
@


