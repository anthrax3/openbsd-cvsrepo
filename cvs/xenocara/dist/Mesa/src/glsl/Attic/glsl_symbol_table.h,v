head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.5.0.4
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.2
	OPENBSD_5_6_BASE:1.1.1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.1.1.2.0.2
	OPENBSD_5_5_BASE:1.1.1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2015.12.23.05.17.43;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.13;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.27;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.18;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.25;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/* -*- c++ -*- */
/*
 * Copyright Â© 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#pragma once
#ifndef GLSL_SYMBOL_TABLE
#define GLSL_SYMBOL_TABLE

#include <new>

extern "C" {
#include "program/symbol_table.h"
}
#include "ir.h"
#include "glsl_types.h"

class symbol_table_entry;

/**
 * Facade class for _mesa_symbol_table
 *
 * Wraps the existing \c _mesa_symbol_table data structure to enforce some
 * type safe and some symbol table invariants.
 */
struct glsl_symbol_table {
private:
   static void
   _glsl_symbol_table_destructor (glsl_symbol_table *table)
   {
      table->~glsl_symbol_table();
   }

public:
   /* Callers of this ralloc-based new need not call delete. It's
    * easier to just ralloc_free 'ctx' (or any of its ancestors). */
   static void* operator new(size_t size, void *ctx)
   {
      void *table;

      table = ralloc_size(ctx, size);
      assert(table != NULL);

      ralloc_set_destructor(table, (void (*)(void*)) _glsl_symbol_table_destructor);

      return table;
   }

   /* If the user *does* call delete, that's OK, we will just
    * ralloc_free in that case. Here, C++ will have already called the
    * destructor so tell ralloc not to do that again. */
   static void operator delete(void *table)
   {
      ralloc_set_destructor(table, NULL);
      ralloc_free(table);
   }
   
   glsl_symbol_table();
   ~glsl_symbol_table();

   unsigned int language_version;

   void push_scope();
   void pop_scope();

   /**
    * Determine whether a name was declared at the current scope
    */
   bool name_declared_this_scope(const char *name);

   /**
    * \name Methods to add symbols to the table
    *
    * There is some temptation to rename all these functions to \c add_symbol
    * or similar.  However, this breaks symmetry with the getter functions and
    * reduces the clarity of the intention of code that uses these methods.
    */
   /*@@{*/
   bool add_variable(ir_variable *v);
   bool add_type(const char *name, const glsl_type *t);
   bool add_function(ir_function *f);
   /*@@}*/

   /**
    * Add an function at global scope without checking for scoping conflicts.
    */
   void add_global_function(ir_function *f);

   /**
    * \name Methods to get symbols from the table
    */
   /*@@{*/
   ir_variable *get_variable(const char *name);
   const glsl_type *get_type(const char *name);
   ir_function *get_function(const char *name);
   /*@@}*/

private:
   symbol_table_entry *get_entry(const char *name);

   struct _mesa_symbol_table *table;
   void *mem_ctx;
};

#endif /* GLSL_SYMBOL_TABLE */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d80 1
a80 2
   /* In 1.10, functions and variables have separate namespaces. */
   bool separate_function_namespace;
a99 1
   bool add_type_ast(const char *name, const class ast_type_specifier *t);
a100 2
   bool add_interface(const char *name, const glsl_type *i,
                      enum ir_variable_mode mode);
a113 1
   const class ast_type_specifier *get_type_ast(const char *name);
a114 2
   const glsl_type *get_interface(const char *name,
                                  enum ir_variable_mode mode);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d101 1
d118 1
a122 8

   /**
    * Disable a previously-added variable so that it no longer appears to be
    * in the symbol table.  This is necessary when gl_PerVertex is redeclared,
    * to ensure that previously-available built-in variables are no longer
    * available.
    */
   void disable_variable(const char *name);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d35 1
a37 1
struct glsl_type;
d46 6
a51 1
   DECLARE_RALLOC_CXX_OPERATORS(glsl_symbol_table)
d53 24
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@a34 1
#include "glsl_types.h"
d37 1
d46 1
a46 6
private:
   static void
   _glsl_symbol_table_destructor (glsl_symbol_table *table)
   {
      table->~glsl_symbol_table();
   }
a47 24
public:
   /* Callers of this ralloc-based new need not call delete. It's
    * easier to just ralloc_free 'ctx' (or any of its ancestors). */
   static void* operator new(size_t size, void *ctx)
   {
      void *table;

      table = ralloc_size(ctx, size);
      assert(table != NULL);

      ralloc_set_destructor(table, (void (*)(void*)) _glsl_symbol_table_destructor);

      return table;
   }

   /* If the user *does* call delete, that's OK, we will just
    * ralloc_free in that case. Here, C++ will have already called the
    * destructor so tell ralloc not to do that again. */
   static void operator delete(void *table)
   {
      ralloc_set_destructor(table, NULL);
      ralloc_free(table);
   }
   
@


