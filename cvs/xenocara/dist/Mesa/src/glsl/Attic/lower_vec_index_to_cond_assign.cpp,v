head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.7
date	2015.12.23.05.17.44;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.19;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.57;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.02.28;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.10;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.21;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.31;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.28;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.34;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * \file lower_vec_index_to_cond_assign.cpp
 *
 * Turns indexing into vector types to a series of conditional moves
 * of each channel's swizzle into a temporary.
 *
 * Most GPUs don't have a native way to do this operation, and this
 * works around that.  For drivers using both this pass and
 * ir_vec_index_to_swizzle, there's a risk that this pass will happen
 * before sufficient constant folding to find that the array index is
 * constant.  However, we hope that other optimization passes,
 * particularly constant folding of assignment conditions and copy
 * propagation, will result in the same code in the end.
 */

#include "ir.h"
#include "ir_visitor.h"
#include "ir_optimization.h"
#include "glsl_types.h"

namespace {

/**
 * Visitor class for replacing expressions with ir_constant values.
 */

class ir_vec_index_to_cond_assign_visitor : public ir_hierarchical_visitor {
public:
   ir_vec_index_to_cond_assign_visitor()
   {
      progress = false;
   }

   ir_rvalue *convert_vec_index_to_cond_assign(void *mem_ctx,
                                               ir_rvalue *orig_vector,
                                               ir_rvalue *orig_index,
                                               const glsl_type *type);

   ir_rvalue *convert_vector_extract_to_cond_assign(ir_rvalue *ir);

   virtual ir_visitor_status visit_enter(ir_expression *);
   virtual ir_visitor_status visit_enter(ir_swizzle *);
   virtual ir_visitor_status visit_leave(ir_assignment *);
   virtual ir_visitor_status visit_enter(ir_return *);
   virtual ir_visitor_status visit_enter(ir_call *);
   virtual ir_visitor_status visit_enter(ir_if *);

   bool progress;
};

} /* anonymous namespace */

ir_rvalue *
ir_vec_index_to_cond_assign_visitor::convert_vec_index_to_cond_assign(void *mem_ctx,
                                                                      ir_rvalue *orig_vector,
                                                                      ir_rvalue *orig_index,
                                                                      const glsl_type *type)
{
   ir_assignment *assign, *value_assign;
   ir_variable *index, *var, *value;
   ir_dereference *deref, *deref_value;
   unsigned i;


   exec_list list;

   /* Store the index to a temporary to avoid reusing its tree. */
   index = new(base_ir) ir_variable(glsl_type::int_type,
				    "vec_index_tmp_i",
				    ir_var_temporary);
   list.push_tail(index);
   deref = new(base_ir) ir_dereference_variable(index);
   assign = new(base_ir) ir_assignment(deref, orig_index, NULL);
   list.push_tail(assign);

   /* Store the value inside a temp, thus avoiding matrixes duplication */
   value = new(base_ir) ir_variable(orig_vector->type, "vec_value_tmp",
                                    ir_var_temporary);
   list.push_tail(value);
   deref_value = new(base_ir) ir_dereference_variable(value);
   value_assign = new(base_ir) ir_assignment(deref_value, orig_vector);
   list.push_tail(value_assign);

   /* Temporary where we store whichever value we swizzle out. */
   var = new(base_ir) ir_variable(type, "vec_index_tmp_v",
				  ir_var_temporary);
   list.push_tail(var);

   /* Generate a single comparison condition "mask" for all of the components
    * in the vector.
    */
   ir_rvalue *const cond_deref =
      compare_index_block(&list, index, 0,
                          orig_vector->type->vector_elements,
			  mem_ctx);

   /* Generate a conditional move of each vector element to the temp. */
   for (i = 0; i < orig_vector->type->vector_elements; i++) {
      ir_rvalue *condition_swizzle =
         new(base_ir) ir_swizzle(cond_deref->clone(mem_ctx, NULL),
                                 i, 0, 0, 0, 1);

      /* Just clone the rest of the deref chain when trying to get at the
       * underlying variable.
       */
      ir_rvalue *swizzle =
	 new(base_ir) ir_swizzle(deref_value->clone(mem_ctx, NULL),
				 i, 0, 0, 0, 1);

      deref = new(base_ir) ir_dereference_variable(var);
      assign = new(base_ir) ir_assignment(deref, swizzle, condition_swizzle);
      list.push_tail(assign);
   }

   /* Put all of the new instructions in the IR stream before the old
    * instruction.
    */
   base_ir->insert_before(&list);

   this->progress = true;
   return new(base_ir) ir_dereference_variable(var);
}

ir_rvalue *
ir_vec_index_to_cond_assign_visitor::convert_vector_extract_to_cond_assign(ir_rvalue *ir)
{
   ir_expression *const expr = ir->as_expression();

   if (expr == NULL || expr->operation != ir_binop_vector_extract)
      return ir;

   return convert_vec_index_to_cond_assign(ralloc_parent(ir),
                                           expr->operands[0],
                                           expr->operands[1],
                                           ir->type);
}

ir_visitor_status
ir_vec_index_to_cond_assign_visitor::visit_enter(ir_expression *ir)
{
   unsigned int i;

   for (i = 0; i < ir->get_num_operands(); i++) {
      ir->operands[i] = convert_vector_extract_to_cond_assign(ir->operands[i]);
   }

   return visit_continue;
}

ir_visitor_status
ir_vec_index_to_cond_assign_visitor::visit_enter(ir_swizzle *ir)
{
   /* Can't be hit from normal GLSL, since you can't swizzle a scalar (which
    * the result of indexing a vector is.  But maybe at some point we'll end up
    * using swizzling of scalars for vector construction.
    */
   ir->val = convert_vector_extract_to_cond_assign(ir->val);

   return visit_continue;
}

ir_visitor_status
ir_vec_index_to_cond_assign_visitor::visit_leave(ir_assignment *ir)
{
   ir->rhs = convert_vector_extract_to_cond_assign(ir->rhs);

   if (ir->condition) {
      ir->condition = convert_vector_extract_to_cond_assign(ir->condition);
   }

   return visit_continue;
}

ir_visitor_status
ir_vec_index_to_cond_assign_visitor::visit_enter(ir_call *ir)
{
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
      ir_rvalue *new_param = convert_vector_extract_to_cond_assign(param);

      if (new_param != param) {
	 param->replace_with(new_param);
      }
   }

   return visit_continue;
}

ir_visitor_status
ir_vec_index_to_cond_assign_visitor::visit_enter(ir_return *ir)
{
   if (ir->value) {
      ir->value = convert_vector_extract_to_cond_assign(ir->value);
   }

   return visit_continue;
}

ir_visitor_status
ir_vec_index_to_cond_assign_visitor::visit_enter(ir_if *ir)
{
   ir->condition = convert_vector_extract_to_cond_assign(ir->condition);

   return visit_continue;
}

bool
do_vec_index_to_cond_assign(exec_list *instructions)
{
   ir_vec_index_to_cond_assign_visitor v;

   visit_list_elements(&v, instructions);

   return v.progress;
}
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d200 2
a201 1
   foreach_in_list_safe(ir_rvalue, param, &ir->actual_parameters) {
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d200 1
a200 2
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d44 2
d74 2
d200 2
a201 2
   foreach_iter(exec_list_iterator, iter, *ir) {
      ir_rvalue *param = (ir_rvalue *)iter.get();
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d55 6
a60 1
   ir_rvalue *convert_vec_index_to_cond_assign(ir_rvalue *val);
d73 9
a81 9
ir_vec_index_to_cond_assign_visitor::convert_vec_index_to_cond_assign(ir_rvalue *ir)
{
   ir_dereference_array *orig_deref = ir->as_dereference_array();
   ir_assignment *assign;
   ir_variable *index, *var;
   ir_dereference *deref;
   ir_expression *condition;
   ir_swizzle *swizzle;
   int i;
a82 2
   if (!orig_deref)
      return ir;
d84 1
a84 7
   if (orig_deref->array->type->is_matrix() ||
       orig_deref->array->type->is_array())
      return ir;

   void *mem_ctx = ralloc_parent(ir);

   assert(orig_deref->array_index->type->base_type == GLSL_TYPE_INT);
d90 1
a90 1
   base_ir->insert_before(index);
d92 10
a101 2
   assign = new(base_ir) ir_assignment(deref, orig_deref->array_index, NULL);
   base_ir->insert_before(assign);
d104 1
a104 1
   var = new(base_ir) ir_variable(ir->type, "vec_index_tmp_v",
d106 9
a114 1
   base_ir->insert_before(var);
d117 4
a120 6
   for (i = 0; i < orig_deref->array->type->vector_elements; i++) {
      deref = new(base_ir) ir_dereference_variable(index);
      condition = new(base_ir) ir_expression(ir_binop_equal,
					     glsl_type::bool_type,
					     deref,
					     new(base_ir) ir_constant(i));
d125 3
a127 2
      swizzle = new(base_ir) ir_swizzle(orig_deref->array->clone(mem_ctx, NULL),
					i, 0, 0, 0, 1);
d130 2
a131 2
      assign = new(base_ir) ir_assignment(deref, swizzle, condition);
      base_ir->insert_before(assign);
d134 5
d143 14
d163 1
a163 1
      ir->operands[i] = convert_vec_index_to_cond_assign(ir->operands[i]);
d176 1
a176 1
   ir->val = convert_vec_index_to_cond_assign(ir->val);
d184 1
a184 20
   ir_variable *index, *var;
   ir_dereference_variable *deref;
   ir_assignment *assign;
   int i;

   ir->rhs = convert_vec_index_to_cond_assign(ir->rhs);
   if (ir->condition)
      ir->condition = convert_vec_index_to_cond_assign(ir->condition);

   /* Last, handle the LHS */
   ir_dereference_array *orig_deref = ir->lhs->as_dereference_array();

   if (!orig_deref ||
       orig_deref->array->type->is_matrix() ||
       orig_deref->array->type->is_array())
      return visit_continue;

   void *mem_ctx = ralloc_parent(ir);

   assert(orig_deref->array_index->type->base_type == GLSL_TYPE_INT);
d186 2
a187 53
   exec_list list;

   /* Store the index to a temporary to avoid reusing its tree. */
   index = new(ir) ir_variable(glsl_type::int_type, "vec_index_tmp_i",
			       ir_var_temporary);
   list.push_tail(index);
   deref = new(ir) ir_dereference_variable(index);
   assign = new(ir) ir_assignment(deref, orig_deref->array_index, NULL);
   list.push_tail(assign);

   /* Store the RHS to a temporary to avoid reusing its tree. */
   var = new(ir) ir_variable(ir->rhs->type, "vec_index_tmp_v",
			     ir_var_temporary);
   list.push_tail(var);
   deref = new(ir) ir_dereference_variable(var);
   assign = new(ir) ir_assignment(deref, ir->rhs, NULL);
   list.push_tail(assign);

   /* Generate a conditional move of each vector element to the temp. */
   for (i = 0; i < orig_deref->array->type->vector_elements; i++) {
      ir_rvalue *condition, *swizzle;

      deref = new(ir) ir_dereference_variable(index);
      condition = new(ir) ir_expression(ir_binop_equal,
					glsl_type::bool_type,
					deref,
					new(ir) ir_constant(i));

      /* Just clone the rest of the deref chain when trying to get at the
       * underlying variable.
       */
      swizzle = new(ir) ir_swizzle(orig_deref->array->clone(mem_ctx, NULL),
				   i, 0, 0, 0, 1);

      deref = new(ir) ir_dereference_variable(var);
      assign = new(ir) ir_assignment(swizzle, deref, condition);
      list.push_tail(assign);
   }

   /* If the original assignment has a condition, respect that original
    * condition!  This is acomplished by wrapping the new conditional
    * assignments in an if-statement that uses the original condition.
    */
   if (ir->condition != NULL) {
      /* No need to clone the condition because the IR that it hangs on is
       * going to be removed from the instruction sequence.
       */
      ir_if *if_stmt = new(mem_ctx) ir_if(ir->condition);

      list.move_nodes_to(&if_stmt->then_instructions);
      ir->insert_before(if_stmt);
   } else {
      ir->insert_before(&list);
a189 4
   ir->remove();

   this->progress = true;

d198 1
a198 1
      ir_rvalue *new_param = convert_vec_index_to_cond_assign(param);
d212 1
a212 1
      ir->value = convert_vec_index_to_cond_assign(ir->value);
d221 1
a221 1
   ir->condition = convert_vec_index_to_cond_assign(ir->condition);
@


1.1
log
@Initial revision
@
text
@d174 2
d179 1
a179 1
   ir->insert_before(index);
d182 1
a182 1
   ir->insert_before(assign);
d187 1
a187 1
   ir->insert_before(var);
d190 1
a190 1
   ir->insert_before(assign);
d210 17
a226 1
      ir->insert_before(assign);
d228 1
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d55 1
a55 6
   ir_rvalue *convert_vec_index_to_cond_assign(void *mem_ctx,
                                               ir_rvalue *orig_vector,
                                               ir_rvalue *orig_index,
                                               const glsl_type *type);

   ir_rvalue *convert_vector_extract_to_cond_assign(ir_rvalue *ir);
d68 12
a79 9
ir_vec_index_to_cond_assign_visitor::convert_vec_index_to_cond_assign(void *mem_ctx,
                                                                      ir_rvalue *orig_vector,
                                                                      ir_rvalue *orig_index,
                                                                      const glsl_type *type)
{
   ir_assignment *assign, *value_assign;
   ir_variable *index, *var, *value;
   ir_dereference *deref, *deref_value;
   unsigned i;
d81 5
d87 1
a87 1
   exec_list list;
d93 1
a93 1
   list.push_tail(index);
d95 2
a96 10
   assign = new(base_ir) ir_assignment(deref, orig_index, NULL);
   list.push_tail(assign);

   /* Store the value inside a temp, thus avoiding matrixes duplication */
   value = new(base_ir) ir_variable(orig_vector->type, "vec_value_tmp",
                                    ir_var_temporary);
   list.push_tail(value);
   deref_value = new(base_ir) ir_dereference_variable(value);
   value_assign = new(base_ir) ir_assignment(deref_value, orig_vector);
   list.push_tail(value_assign);
d99 1
a99 1
   var = new(base_ir) ir_variable(type, "vec_index_tmp_v",
d101 1
a101 9
   list.push_tail(var);

   /* Generate a single comparison condition "mask" for all of the components
    * in the vector.
    */
   ir_rvalue *const cond_deref =
      compare_index_block(&list, index, 0,
                          orig_vector->type->vector_elements,
			  mem_ctx);
d104 6
a109 4
   for (i = 0; i < orig_vector->type->vector_elements; i++) {
      ir_rvalue *condition_swizzle =
         new(base_ir) ir_swizzle(cond_deref->clone(mem_ctx, NULL),
                                 i, 0, 0, 0, 1);
d114 2
a115 3
      ir_rvalue *swizzle =
	 new(base_ir) ir_swizzle(deref_value->clone(mem_ctx, NULL),
				 i, 0, 0, 0, 1);
d118 2
a119 2
      assign = new(base_ir) ir_assignment(deref, swizzle, condition_swizzle);
      list.push_tail(assign);
a121 5
   /* Put all of the new instructions in the IR stream before the old
    * instruction.
    */
   base_ir->insert_before(&list);

a125 14
ir_rvalue *
ir_vec_index_to_cond_assign_visitor::convert_vector_extract_to_cond_assign(ir_rvalue *ir)
{
   ir_expression *const expr = ir->as_expression();

   if (expr == NULL || expr->operation != ir_binop_vector_extract)
      return ir;

   return convert_vec_index_to_cond_assign(ralloc_parent(ir),
                                           expr->operands[0],
                                           expr->operands[1],
                                           ir->type);
}

d132 1
a132 1
      ir->operands[i] = convert_vector_extract_to_cond_assign(ir->operands[i]);
d145 1
a145 1
   ir->val = convert_vector_extract_to_cond_assign(ir->val);
d153 40
a192 1
   ir->rhs = convert_vector_extract_to_cond_assign(ir->rhs);
d194 15
a208 2
   if (ir->condition) {
      ir->condition = convert_vector_extract_to_cond_assign(ir->condition);
d210 3
d222 1
a222 1
      ir_rvalue *new_param = convert_vector_extract_to_cond_assign(param);
d236 1
a236 1
      ir->value = convert_vector_extract_to_cond_assign(ir->value);
d245 1
a245 1
   ir->condition = convert_vector_extract_to_cond_assign(ir->condition);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a43 2
namespace {

a71 2
} /* anonymous namespace */

d196 2
a197 2
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d200 2
a201 1
   foreach_in_list_safe(ir_rvalue, param, &ir->actual_parameters) {
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d200 1
a200 2
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
@


