head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.7
date	2015.12.23.05.17.44;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.19;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.57;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.02.28;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.10;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.21;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.31;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.29;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.35;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * \file lower_vec_index_to_swizzle.cpp
 *
 * Turns constant indexing into vector types to swizzles.  This will
 * let other swizzle-aware optimization passes catch these constructs,
 * and codegen backends not have to worry about this case.
 */

#include "ir.h"
#include "ir_visitor.h"
#include "ir_optimization.h"
#include "glsl_types.h"
#include "main/macros.h"

/**
 * Visitor class for replacing expressions with ir_constant values.
 */

namespace {

class ir_vec_index_to_swizzle_visitor : public ir_hierarchical_visitor {
public:
   ir_vec_index_to_swizzle_visitor()
   {
      progress = false;
   }

   ir_rvalue *convert_vector_extract_to_swizzle(ir_rvalue *val);

   virtual ir_visitor_status visit_enter(ir_expression *);
   virtual ir_visitor_status visit_enter(ir_swizzle *);
   virtual ir_visitor_status visit_enter(ir_assignment *);
   virtual ir_visitor_status visit_enter(ir_return *);
   virtual ir_visitor_status visit_enter(ir_call *);
   virtual ir_visitor_status visit_enter(ir_if *);

   bool progress;
};

} /* anonymous namespace */

ir_rvalue *
ir_vec_index_to_swizzle_visitor::convert_vector_extract_to_swizzle(ir_rvalue *ir)
{
   ir_expression *const expr = ir->as_expression();
   if (expr == NULL || expr->operation != ir_binop_vector_extract)
      return ir;

   ir_constant *const idx = expr->operands[1]->constant_expression_value();
   if (idx == NULL)
      return ir;

   void *ctx = ralloc_parent(ir);
   this->progress = true;

   /* Page 40 of the GLSL 1.20 spec says:
    *
    *     "When indexing with non-constant expressions, behavior is undefined
    *     if the index is negative, or greater than or equal to the size of
    *     the vector."
    *
    * The quoted spec text mentions non-constant expressions, but this code
    * operates on constants.  These constants are the result of non-constant
    * expressions that have been optimized to constants.  The common case here
    * is a loop counter from an unrolled loop that is used to index a vector.
    *
    * The ir_swizzle constructor gets angry if the index is negative or too
    * large.  For simplicity sake, just clamp the index to [0, size-1].
    */
   const int i = CLAMP(idx->value.i[0], 0,
                       (int) expr->operands[0]->type->vector_elements - 1);

   return new(ctx) ir_swizzle(expr->operands[0], i, 0, 0, 0, 1);
}

ir_visitor_status
ir_vec_index_to_swizzle_visitor::visit_enter(ir_expression *ir)
{
   unsigned int i;

   for (i = 0; i < ir->get_num_operands(); i++) {
      ir->operands[i] = convert_vector_extract_to_swizzle(ir->operands[i]);
   }

   return visit_continue;
}

ir_visitor_status
ir_vec_index_to_swizzle_visitor::visit_enter(ir_swizzle *ir)
{
   /* Can't be hit from normal GLSL, since you can't swizzle a scalar (which
    * the result of indexing a vector is.  But maybe at some point we'll end up
    * using swizzling of scalars for vector construction.
    */
   ir->val = convert_vector_extract_to_swizzle(ir->val);

   return visit_continue;
}

ir_visitor_status
ir_vec_index_to_swizzle_visitor::visit_enter(ir_assignment *ir)
{
   ir->rhs = convert_vector_extract_to_swizzle(ir->rhs);

   return visit_continue;
}

ir_visitor_status
ir_vec_index_to_swizzle_visitor::visit_enter(ir_call *ir)
{
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
      ir_rvalue *new_param = convert_vector_extract_to_swizzle(param);

      if (new_param != param) {
	 param->replace_with(new_param);
      }
   }

   return visit_continue;
}

ir_visitor_status
ir_vec_index_to_swizzle_visitor::visit_enter(ir_return *ir)
{
   if (ir->value) {
      ir->value = convert_vector_extract_to_swizzle(ir->value);
   }

   return visit_continue;
}

ir_visitor_status
ir_vec_index_to_swizzle_visitor::visit_enter(ir_if *ir)
{
   ir->condition = convert_vector_extract_to_swizzle(ir->condition);

   return visit_continue;
}

bool
do_vec_index_to_swizzle(exec_list *instructions)
{
   ir_vec_index_to_swizzle_visitor v;

   v.run(instructions);

   return v.progress;
}
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d134 2
a135 1
   foreach_in_list_safe(ir_rvalue, param, &ir->actual_parameters) {
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d134 1
a134 2
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d42 2
d63 2
d134 2
a135 2
   foreach_iter(exec_list_iterator, iter, *ir) {
      ir_rvalue *param = (ir_rvalue *)iter.get();
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d49 1
a49 1
   ir_rvalue *convert_vec_index_to_swizzle(ir_rvalue *val);
d62 1
a62 1
ir_vec_index_to_swizzle_visitor::convert_vec_index_to_swizzle(ir_rvalue *ir)
d64 2
a65 7
   ir_dereference_array *deref = ir->as_dereference_array();
   ir_constant *ir_constant;

   if (!deref)
      return ir;

   if (deref->array->type->is_matrix() || deref->array->type->is_array())
d68 2
a69 3
   assert(deref->array_index->type->base_type == GLSL_TYPE_INT);
   ir_constant = deref->array_index->constant_expression_value();
   if (!ir_constant)
d89 2
a90 2
   const int i = MIN2(MAX2(ir_constant->value.i[0], 0),
		      (deref->array->type->vector_elements - 1));
d92 1
a92 1
   return new(ctx) ir_swizzle(deref->array, i, 0, 0, 0, 1);
d101 1
a101 1
      ir->operands[i] = convert_vec_index_to_swizzle(ir->operands[i]);
d114 1
a114 1
   ir->val = convert_vec_index_to_swizzle(ir->val);
d122 1
a122 2
   ir->set_lhs(convert_vec_index_to_swizzle(ir->lhs));
   ir->rhs = convert_vec_index_to_swizzle(ir->rhs);
d132 1
a132 1
      ir_rvalue *new_param = convert_vec_index_to_swizzle(param);
d146 1
a146 1
      ir->value = convert_vec_index_to_swizzle(ir->value);
d155 1
a155 1
   ir->condition = convert_vec_index_to_swizzle(ir->condition);
@


1.1
log
@Initial revision
@
text
@d36 1
d80 19
a98 2
   return new(ctx) ir_swizzle(deref->array,
			      ir_constant->value.i[0], 0, 0, 0, 1);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a35 1
#include "main/macros.h"
d48 1
a48 1
   ir_rvalue *convert_vector_extract_to_swizzle(ir_rvalue *val);
d61 1
a61 1
ir_vec_index_to_swizzle_visitor::convert_vector_extract_to_swizzle(ir_rvalue *ir)
d63 7
a69 2
   ir_expression *const expr = ir->as_expression();
   if (expr == NULL || expr->operation != ir_binop_vector_extract)
d72 3
a74 2
   ir_constant *const idx = expr->operands[1]->constant_expression_value();
   if (idx == NULL)
d79 2
a80 19

   /* Page 40 of the GLSL 1.20 spec says:
    *
    *     "When indexing with non-constant expressions, behavior is undefined
    *     if the index is negative, or greater than or equal to the size of
    *     the vector."
    *
    * The quoted spec text mentions non-constant expressions, but this code
    * operates on constants.  These constants are the result of non-constant
    * expressions that have been optimized to constants.  The common case here
    * is a loop counter from an unrolled loop that is used to index a vector.
    *
    * The ir_swizzle constructor gets angry if the index is negative or too
    * large.  For simplicity sake, just clamp the index to [0, size-1].
    */
   const int i = CLAMP(idx->value.i[0], 0,
                       (int) expr->operands[0]->type->vector_elements - 1);

   return new(ctx) ir_swizzle(expr->operands[0], i, 0, 0, 0, 1);
d89 1
a89 1
      ir->operands[i] = convert_vector_extract_to_swizzle(ir->operands[i]);
d102 1
a102 1
   ir->val = convert_vector_extract_to_swizzle(ir->val);
d110 2
a111 1
   ir->rhs = convert_vector_extract_to_swizzle(ir->rhs);
d121 1
a121 1
      ir_rvalue *new_param = convert_vector_extract_to_swizzle(param);
d135 1
a135 1
      ir->value = convert_vector_extract_to_swizzle(ir->value);
d144 1
a144 1
   ir->condition = convert_vector_extract_to_swizzle(ir->condition);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a41 2
namespace {

a60 2
} /* anonymous namespace */

d130 2
a131 2
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d134 2
a135 1
   foreach_in_list_safe(ir_rvalue, param, &ir->actual_parameters) {
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d134 1
a134 2
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
@


