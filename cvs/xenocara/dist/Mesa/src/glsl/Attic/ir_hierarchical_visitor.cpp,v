head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.5.0.4
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.2
	OPENBSD_5_6_BASE:1.1.1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.1.1.2.0.2
	OPENBSD_5_5_BASE:1.1.1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2015.12.23.05.17.43;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.16;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.29;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.22;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.28;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include "ir.h"
#include "ir_hierarchical_visitor.h"

ir_hierarchical_visitor::ir_hierarchical_visitor()
{
   this->base_ir = NULL;
   this->callback = NULL;
   this->data = NULL;
   this->in_assignee = false;
}

ir_visitor_status
ir_hierarchical_visitor::visit(ir_variable *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit(ir_constant *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit(ir_loop_jump *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit(ir_dereference_variable *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_loop *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_loop *ir)
{
   (void) ir;
   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_function_signature *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_function_signature *ir)
{
   (void) ir;
   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_function *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_function *ir)
{
   (void) ir;
   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_expression *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_expression *ir)
{
   (void) ir;
   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_texture *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_texture *ir)
{
   (void) ir;
   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_swizzle *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_swizzle *ir)
{
   (void) ir;
   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_dereference_array *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_dereference_array *ir)
{
   (void) ir;
   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_dereference_record *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_dereference_record *ir)
{
   (void) ir;
   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_assignment *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_assignment *ir)
{
   (void) ir;
   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_call *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_call *ir)
{
   (void) ir;
   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_return *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_return *ir)
{
   (void) ir;
   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_discard *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_discard *ir)
{
   (void) ir;
   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_if *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_if *ir)
{
   (void) ir;
   return visit_continue;
}

void
ir_hierarchical_visitor::run(exec_list *instructions)
{
   visit_list_elements(this, instructions);
}


void
visit_tree(ir_instruction *ir,
	   void (*callback)(class ir_instruction *ir, void *data),
	   void *data)
{
   ir_hierarchical_visitor v;

   v.callback = callback;
   v.data = data;

   ir->accept(&v);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a35 9
ir_hierarchical_visitor::visit(ir_rvalue *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a71 18
ir_hierarchical_visitor::visit(ir_emit_vertex *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit(ir_end_primitive *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d30 2
a31 4
   this->callback_enter = NULL;
   this->callback_leave = NULL;
   this->data_enter = NULL;
   this->data_leave = NULL;
d38 2
a39 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d47 2
a48 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d56 2
a57 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d65 20
a84 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d92 2
a93 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d101 2
a102 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d110 1
a110 3
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

d117 2
a118 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d126 1
a126 3
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

d133 2
a134 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d142 1
a142 3
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

d149 2
a150 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d158 1
a158 3
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

d165 2
a166 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d174 1
a174 3
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

d181 2
a182 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d190 1
a190 3
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

d197 2
a198 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d206 1
a206 3
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

d213 2
a214 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d222 1
a222 3
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

d229 2
a230 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d238 1
a238 3
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

d245 2
a246 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d254 1
a254 3
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

d261 2
a262 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d270 1
a270 3
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

d277 2
a278 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d286 1
a286 3
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

d293 2
a294 2
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);
d302 1
a302 39
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_emit_vertex *ir)
{
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_emit_vertex *ir)
{
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_enter(ir_end_primitive *ir)
{
   if (this->callback_enter != NULL)
      this->callback_enter(ir, this->data_enter);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit_leave(ir_end_primitive *ir)
{
   if (this->callback_leave != NULL)
      this->callback_leave(ir, this->data_leave);

d315 2
a316 4
	   void (*callback_enter)(class ir_instruction *ir, void *data),
	   void *data_enter,
	   void (*callback_leave)(class ir_instruction *ir, void *data),
           void *data_leave)
d320 2
a321 4
   v.callback_enter = callback_enter;
   v.callback_leave = callback_leave;
   v.data_enter = data_enter;
   v.data_leave = data_leave;
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d30 4
a33 2
   this->callback = NULL;
   this->data = NULL;
d40 2
a41 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d49 2
a50 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d58 2
a59 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d67 2
a68 20
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit(ir_emit_vertex *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);

   return visit_continue;
}

ir_visitor_status
ir_hierarchical_visitor::visit(ir_end_primitive *ir)
{
   if (this->callback != NULL)
      this->callback(ir, this->data);
d76 2
a77 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d85 2
a86 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d94 3
a96 1
   (void) ir;
d103 2
a104 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d112 3
a114 1
   (void) ir;
d121 2
a122 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d130 3
a132 1
   (void) ir;
d139 2
a140 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d148 3
a150 1
   (void) ir;
d157 2
a158 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d166 3
a168 1
   (void) ir;
d175 2
a176 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d184 3
a186 1
   (void) ir;
d193 2
a194 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d202 3
a204 1
   (void) ir;
d211 2
a212 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d220 3
a222 1
   (void) ir;
d229 2
a230 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d238 3
a240 1
   (void) ir;
d247 2
a248 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d256 3
a258 1
   (void) ir;
d265 2
a266 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d274 3
a276 1
   (void) ir;
d283 2
a284 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d292 3
a294 1
   (void) ir;
d301 2
a302 2
   if (this->callback != NULL)
      this->callback(ir, this->data);
d310 39
a348 1
   (void) ir;
d361 4
a364 2
	   void (*callback)(class ir_instruction *ir, void *data),
	   void *data)
d368 4
a371 2
   v.callback = callback;
   v.data = data;
@


