head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.44;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.14.22;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.14.22;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.31;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.10.30;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.47.36;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2013 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * \file opt_flip_matrices.cpp
 *
 * Convert (matrix * vector) operations to (vector * matrixTranspose),
 * which can be done using dot products rather than multiplies and adds.
 * On some hardware, this is more efficient.
 *
 * This currently only does the conversion for built-in matrices which
 * already have transposed equivalents.  Namely, gl_ModelViewProjectionMatrix
 * and gl_TextureMatrix.
 */
#include "ir.h"
#include "ir_optimization.h"
#include "main/macros.h"

namespace {
class matrix_flipper : public ir_hierarchical_visitor {
public:
   matrix_flipper(exec_list *instructions)
   {
      progress = false;
      mvp_transpose = NULL;
      texmat_transpose = NULL;

      foreach_list(n, instructions) {
         ir_instruction *ir = (ir_instruction *) n;
         ir_variable *var = ir->as_variable();
         if (!var)
            continue;
         if (strcmp(var->name, "gl_ModelViewProjectionMatrixTranspose") == 0)
            mvp_transpose = var;
         if (strcmp(var->name, "gl_TextureMatrixTranspose") == 0)
            texmat_transpose = var;
      }
   }

   ir_visitor_status visit_enter(ir_expression *ir);

   bool progress;

private:
   ir_variable *mvp_transpose;
   ir_variable *texmat_transpose;
};
}

ir_visitor_status
matrix_flipper::visit_enter(ir_expression *ir)
{
   if (ir->operation != ir_binop_mul ||
       !ir->operands[0]->type->is_matrix() ||
       !ir->operands[1]->type->is_vector())
      return visit_continue;

   ir_variable *mat_var = ir->operands[0]->variable_referenced();
   if (!mat_var)
      return visit_continue;

   if (mvp_transpose &&
       strcmp(mat_var->name, "gl_ModelViewProjectionMatrix") == 0) {
#ifndef NDEBUG
      ir_dereference_variable *deref = ir->operands[0]->as_dereference_variable();
      assert(deref && deref->var == mat_var);
#endif

      void *mem_ctx = ralloc_parent(ir);

      ir->operands[0] = ir->operands[1];
      ir->operands[1] = new(mem_ctx) ir_dereference_variable(mvp_transpose);

      progress = true;
   } else if (texmat_transpose &&
              strcmp(mat_var->name, "gl_TextureMatrix") == 0) {
      ir_dereference_array *array_ref = ir->operands[0]->as_dereference_array();
      assert(array_ref != NULL);
      ir_dereference_variable *var_ref = array_ref->array->as_dereference_variable();
      assert(var_ref && var_ref->var == mat_var);

      ir->operands[0] = ir->operands[1];
      ir->operands[1] = array_ref;

      var_ref->var = texmat_transpose;

      texmat_transpose->max_array_access =
         MAX2(texmat_transpose->max_array_access, mat_var->max_array_access);

      progress = true;
   }

   return visit_continue;
}

bool
opt_flip_matrices(struct exec_list *instructions)
{
   matrix_flipper v(instructions);

   visit_list_elements(&v, instructions);

   return v.progress;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d107 2
a108 2
      texmat_transpose->data.max_array_access =
         MAX2(texmat_transpose->data.max_array_access, mat_var->data.max_array_access);
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d48 2
a49 1
      foreach_in_list(ir_instruction, ir, instructions) {
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d48 1
a48 2
      foreach_list(n, instructions) {
         ir_instruction *ir = (ir_instruction *) n;
@


