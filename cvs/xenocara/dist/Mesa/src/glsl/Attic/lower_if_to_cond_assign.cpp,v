head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.7
date	2015.12.23.05.17.44;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.19;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.57;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.02.27;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.10;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.19;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.31;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.26;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.32;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * \file lower_if_to_cond_assign.cpp
 *
 * This attempts to flatten if-statements to conditional assignments for
 * GPUs with limited or no flow control support.
 *
 * It can't handle other control flow being inside of its block, such
 * as calls or loops.  Hopefully loop unrolling and inlining will take
 * care of those.
 *
 * Drivers for GPUs with no control flow support should simply call
 *
 *    lower_if_to_cond_assign(instructions)
 *
 * to attempt to flatten all if-statements.
 *
 * Some GPUs (such as i965 prior to gen6) do support control flow, but have a
 * maximum nesting depth N.  Drivers for such hardware can call
 *
 *    lower_if_to_cond_assign(instructions, N)
 *
 * to attempt to flatten any if-statements appearing at depth > N.
 */

#include "glsl_types.h"
#include "ir.h"
#include "program/hash_table.h"

namespace {

class ir_if_to_cond_assign_visitor : public ir_hierarchical_visitor {
public:
   ir_if_to_cond_assign_visitor(unsigned max_depth)
   {
      this->progress = false;
      this->max_depth = max_depth;
      this->depth = 0;

      this->condition_variables = hash_table_ctor(0, hash_table_pointer_hash,
						  hash_table_pointer_compare);
   }

   ~ir_if_to_cond_assign_visitor()
   {
      hash_table_dtor(this->condition_variables);
   }

   ir_visitor_status visit_enter(ir_if *);
   ir_visitor_status visit_leave(ir_if *);

   bool progress;
   unsigned max_depth;
   unsigned depth;

   struct hash_table *condition_variables;
};

} /* anonymous namespace */

bool
lower_if_to_cond_assign(exec_list *instructions, unsigned max_depth)
{
   if (max_depth == UINT_MAX)
      return false;

   ir_if_to_cond_assign_visitor v(max_depth);

   visit_list_elements(&v, instructions);

   return v.progress;
}

void
check_control_flow(ir_instruction *ir, void *data)
{
   bool *found_control_flow = (bool *)data;
   switch (ir->ir_type) {
   case ir_type_call:
   case ir_type_discard:
   case ir_type_loop:
   case ir_type_loop_jump:
   case ir_type_return:
      *found_control_flow = true;
      break;
   default:
      break;
   }
}

void
move_block_to_cond_assign(void *mem_ctx,
			  ir_if *if_ir, ir_rvalue *cond_expr,
			  exec_list *instructions,
			  struct hash_table *ht)
{
   foreach_list_safe(node, instructions) {
      ir_instruction *ir = (ir_instruction *) node;

      if (ir->ir_type == ir_type_assignment) {
	 ir_assignment *assign = (ir_assignment *)ir;

	 if (hash_table_find(ht, assign) == NULL) {
	    hash_table_insert(ht, assign, assign);

	    /* If the LHS of the assignment is a condition variable that was
	     * previously added, insert an additional assignment of false to
	     * the variable.
	     */
	    const bool assign_to_cv =
	       hash_table_find(ht, assign->lhs->variable_referenced()) != NULL;

	    if (!assign->condition) {
	       if (assign_to_cv) {
		  assign->rhs =
		     new(mem_ctx) ir_expression(ir_binop_logic_and,
						glsl_type::bool_type,
						cond_expr->clone(mem_ctx, NULL),
						assign->rhs);
	       } else {
		  assign->condition = cond_expr->clone(mem_ctx, NULL);
	       }
	    } else {
	       assign->condition =
		  new(mem_ctx) ir_expression(ir_binop_logic_and,
					     glsl_type::bool_type,
					     cond_expr->clone(mem_ctx, NULL),
					     assign->condition);
	    }
	 }
      }

      /* Now, move from the if block to the block surrounding it. */
      ir->remove();
      if_ir->insert_before(ir);
   }
}

ir_visitor_status
ir_if_to_cond_assign_visitor::visit_enter(ir_if *ir)
{
   (void) ir;
   this->depth++;

   return visit_continue;
}

ir_visitor_status
ir_if_to_cond_assign_visitor::visit_leave(ir_if *ir)
{
   /* Only flatten when beyond the GPU's maximum supported nesting depth. */
   if (this->depth-- <= this->max_depth)
      return visit_continue;

   bool found_control_flow = false;
   ir_assignment *assign;

   /* Check that both blocks don't contain anything we can't support. */
   foreach_list(n, &ir->then_instructions) {
      ir_instruction *then_ir = (ir_instruction *) n;
      visit_tree(then_ir, check_control_flow, &found_control_flow);
   }
   foreach_list(n, &ir->else_instructions) {
      ir_instruction *else_ir = (ir_instruction *) n;
      visit_tree(else_ir, check_control_flow, &found_control_flow);
   }
   if (found_control_flow)
      return visit_continue;

   void *mem_ctx = ralloc_parent(ir);

   /* Store the condition to a variable.  Move all of the instructions from
    * the then-clause of the if-statement.  Use the condition variable as a
    * condition for all assignments.
    */
   ir_variable *const then_var =
      new(mem_ctx) ir_variable(glsl_type::bool_type,
			       "if_to_cond_assign_then",
			       ir_var_temporary);
   ir->insert_before(then_var);

   ir_dereference_variable *then_cond =
      new(mem_ctx) ir_dereference_variable(then_var);

   assign = new(mem_ctx) ir_assignment(then_cond, ir->condition);
   ir->insert_before(assign);

   move_block_to_cond_assign(mem_ctx, ir, then_cond,
			     &ir->then_instructions,
			     this->condition_variables);

   /* Add the new condition variable to the hash table.  This allows us to
    * find this variable when lowering other (enclosing) if-statements.
    */
   hash_table_insert(this->condition_variables, then_var, then_var);

   /* If there are instructions in the else-clause, store the inverse of the
    * condition to a variable.  Move all of the instructions from the
    * else-clause if the if-statement.  Use the (inverse) condition variable
    * as a condition for all assignments.
    */
   if (!ir->else_instructions.is_empty()) {
      ir_variable *const else_var =
	 new(mem_ctx) ir_variable(glsl_type::bool_type,
				  "if_to_cond_assign_else",
				  ir_var_temporary);
      ir->insert_before(else_var);

      ir_dereference_variable *else_cond =
	 new(mem_ctx) ir_dereference_variable(else_var);

      ir_rvalue *inverse =
	 new(mem_ctx) ir_expression(ir_unop_logic_not,
				    then_cond->clone(mem_ctx, NULL));

      assign = new(mem_ctx) ir_assignment(else_cond, inverse);
      ir->insert_before(assign);

      move_block_to_cond_assign(mem_ctx, ir, else_cond,
				&ir->else_instructions,
				this->condition_variables);

      /* Add the new condition variable to the hash table.  This allows us to
       * find this variable when lowering other (enclosing) if-statements.
       */
      hash_table_insert(this->condition_variables, else_var, else_var);
   }

   ir->remove();

   this->progress = true;

   return visit_continue;
}
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d119 3
a121 1
   foreach_in_list_safe(ir_instruction, ir, instructions) {
d181 2
a182 1
   foreach_in_list(ir_instruction, then_ir, &ir->then_instructions) {
d185 2
a186 1
   foreach_in_list(ir_instruction, else_ir, &ir->else_instructions) {
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d119 1
a119 3
   foreach_list_safe(node, instructions) {
      ir_instruction *ir = (ir_instruction *) node;

d179 1
a179 2
   foreach_list(n, &ir->then_instructions) {
      ir_instruction *then_ir = (ir_instruction *) n;
d182 1
a182 2
   foreach_list(n, &ir->else_instructions) {
      ir_instruction *else_ir = (ir_instruction *) n;
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d52 2
d81 2
d181 2
a182 2
   foreach_iter(exec_list_iterator, then_iter, ir->then_instructions) {
      ir_instruction *then_ir = (ir_instruction *)then_iter.get();
d185 2
a186 2
   foreach_iter(exec_list_iterator, else_iter, ir->else_instructions) {
      ir_instruction *else_ir = (ir_instruction *)else_iter.get();
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d50 1
d59 8
d75 2
d82 3
d111 3
a113 1
			  ir_if *if_ir, ir_variable *cond_var, bool then)
d115 2
a116 10
   exec_list *instructions;

   if (then) {
      instructions = &if_ir->then_instructions;
   } else {
      instructions = &if_ir->else_instructions;
   }

   foreach_iter(exec_list_iterator, iter, *instructions) {
      ir_instruction *ir = (ir_instruction *)iter.get();
a119 2
	 ir_rvalue *cond_expr;
	 ir_dereference *deref = new(mem_ctx) ir_dereference_variable(cond_var);
d121 2
a122 8
	 if (then) {
	    cond_expr = deref;
	 } else {
	    cond_expr = new(mem_ctx) ir_expression(ir_unop_logic_not,
						   glsl_type::bool_type,
						   deref,
						   NULL);
	 }
d124 24
a147 7
	 if (!assign->condition) {
	    assign->condition = cond_expr;
	 } else {
	    assign->condition = new(mem_ctx) ir_expression(ir_binop_logic_and,
							   glsl_type::bool_type,
							   cond_expr,
							   assign->condition);
d162 1
a173 1
   ir_variable *cond_var;
a174 1
   ir_dereference_variable *deref;
d190 3
a192 2
   /* Store the condition to a variable so the assignment conditions are
    * simpler.
d194 10
a203 8
   cond_var = new(mem_ctx) ir_variable(glsl_type::bool_type,
				       "if_to_cond_assign_condition",
				       ir_var_temporary);
   ir->insert_before(cond_var);

   deref = new(mem_ctx) ir_dereference_variable(cond_var);
   assign = new(mem_ctx) ir_assignment(deref,
				       ir->condition, NULL);
d206 13
a218 2
   /* Now, move all of the instructions out of the if blocks, putting
    * conditions on assignments.
d220 26
a245 2
   move_block_to_cond_assign(mem_ctx, ir, cond_var, true);
   move_block_to_cond_assign(mem_ctx, ir, cond_var, false);
@


1.1
log
@Initial revision
@
text
@d152 1
a152 1
   if (this->depth <= this->max_depth)
a153 2

   this->depth--;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a49 1
#include "program/hash_table.h"
a57 8

      this->condition_variables = hash_table_ctor(0, hash_table_pointer_hash,
						  hash_table_pointer_compare);
   }

   ~ir_if_to_cond_assign_visitor()
   {
      hash_table_dtor(this->condition_variables);
a65 2

   struct hash_table *condition_variables;
a70 3
   if (max_depth == UINT_MAX)
      return false;

d97 1
a97 3
			  ir_if *if_ir, ir_rvalue *cond_expr,
			  exec_list *instructions,
			  struct hash_table *ht)
d99 10
a108 2
   foreach_list_safe(node, instructions) {
      ir_instruction *ir = (ir_instruction *) node;
d112 2
d115 8
a122 2
	 if (hash_table_find(ht, assign) == NULL) {
	    hash_table_insert(ht, assign, assign);
d124 7
a130 24
	    /* If the LHS of the assignment is a condition variable that was
	     * previously added, insert an additional assignment of false to
	     * the variable.
	     */
	    const bool assign_to_cv =
	       hash_table_find(ht, assign->lhs->variable_referenced()) != NULL;

	    if (!assign->condition) {
	       if (assign_to_cv) {
		  assign->rhs =
		     new(mem_ctx) ir_expression(ir_binop_logic_and,
						glsl_type::bool_type,
						cond_expr->clone(mem_ctx, NULL),
						assign->rhs);
	       } else {
		  assign->condition = cond_expr->clone(mem_ctx, NULL);
	       }
	    } else {
	       assign->condition =
		  new(mem_ctx) ir_expression(ir_binop_logic_and,
					     glsl_type::bool_type,
					     cond_expr->clone(mem_ctx, NULL),
					     assign->condition);
	    }
a144 1

d152 1
a152 1
   if (this->depth-- <= this->max_depth)
d155 2
d158 1
d160 1
d176 2
a177 3
   /* Store the condition to a variable.  Move all of the instructions from
    * the then-clause of the if-statement.  Use the condition variable as a
    * condition for all assignments.
d179 8
a186 10
   ir_variable *const then_var =
      new(mem_ctx) ir_variable(glsl_type::bool_type,
			       "if_to_cond_assign_then",
			       ir_var_temporary);
   ir->insert_before(then_var);

   ir_dereference_variable *then_cond =
      new(mem_ctx) ir_dereference_variable(then_var);

   assign = new(mem_ctx) ir_assignment(then_cond, ir->condition);
d189 2
a190 13
   move_block_to_cond_assign(mem_ctx, ir, then_cond,
			     &ir->then_instructions,
			     this->condition_variables);

   /* Add the new condition variable to the hash table.  This allows us to
    * find this variable when lowering other (enclosing) if-statements.
    */
   hash_table_insert(this->condition_variables, then_var, then_var);

   /* If there are instructions in the else-clause, store the inverse of the
    * condition to a variable.  Move all of the instructions from the
    * else-clause if the if-statement.  Use the (inverse) condition variable
    * as a condition for all assignments.
d192 2
a193 26
   if (!ir->else_instructions.is_empty()) {
      ir_variable *const else_var =
	 new(mem_ctx) ir_variable(glsl_type::bool_type,
				  "if_to_cond_assign_else",
				  ir_var_temporary);
      ir->insert_before(else_var);

      ir_dereference_variable *else_cond =
	 new(mem_ctx) ir_dereference_variable(else_var);

      ir_rvalue *inverse =
	 new(mem_ctx) ir_expression(ir_unop_logic_not,
				    then_cond->clone(mem_ctx, NULL));

      assign = new(mem_ctx) ir_assignment(else_cond, inverse);
      ir->insert_before(assign);

      move_block_to_cond_assign(mem_ctx, ir, else_cond,
				&ir->else_instructions,
				this->condition_variables);

      /* Add the new condition variable to the hash table.  This allows us to
       * find this variable when lowering other (enclosing) if-statements.
       */
      hash_table_insert(this->condition_variables, else_var, else_var);
   }
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a51 2
namespace {

a78 2
} /* anonymous namespace */

d177 2
a178 2
   foreach_list(n, &ir->then_instructions) {
      ir_instruction *then_ir = (ir_instruction *) n;
d181 2
a182 2
   foreach_list(n, &ir->else_instructions) {
      ir_instruction *else_ir = (ir_instruction *) n;
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d119 3
a121 1
   foreach_in_list_safe(ir_instruction, ir, instructions) {
d181 2
a182 1
   foreach_in_list(ir_instruction, then_ir, &ir->then_instructions) {
d185 2
a186 1
   foreach_in_list(ir_instruction, else_ir, &ir->else_instructions) {
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d119 1
a119 3
   foreach_list_safe(node, instructions) {
      ir_instruction *ir = (ir_instruction *) node;

d179 1
a179 2
   foreach_list(n, &ir->then_instructions) {
      ir_instruction *then_ir = (ir_instruction *) n;
d182 1
a182 2
   foreach_list(n, &ir->else_instructions) {
      ir_instruction *else_ir = (ir_instruction *) n;
@


