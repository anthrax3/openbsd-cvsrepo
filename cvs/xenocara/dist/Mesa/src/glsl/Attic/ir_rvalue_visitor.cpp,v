head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.7
date	2015.12.23.05.17.43;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.19;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.57;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.02.27;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.10;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.17;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.29;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.22;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.29;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * \file ir_rvalue_visitor.cpp
 *
 * Generic class to implement the common pattern we have of wanting to
 * visit each ir_rvalue * and possibly change that node to a different
 * class.
 */

#include "ir.h"
#include "ir_visitor.h"
#include "ir_rvalue_visitor.h"
#include "glsl_types.h"

ir_visitor_status
ir_rvalue_base_visitor::rvalue_visit(ir_expression *ir)
{
   unsigned int operand;

   for (operand = 0; operand < ir->get_num_operands(); operand++) {
      handle_rvalue(&ir->operands[operand]);
   }

   return visit_continue;
}

ir_visitor_status
ir_rvalue_base_visitor::rvalue_visit(ir_texture *ir)
{
   handle_rvalue(&ir->coordinate);
   handle_rvalue(&ir->projector);
   handle_rvalue(&ir->shadow_comparitor);
   handle_rvalue(&ir->offset);

   switch (ir->op) {
   case ir_tex:
   case ir_lod:
   case ir_query_levels:
      break;
   case ir_txb:
      handle_rvalue(&ir->lod_info.bias);
      break;
   case ir_txf:
   case ir_txl:
   case ir_txs:
      handle_rvalue(&ir->lod_info.lod);
      break;
   case ir_txf_ms:
      handle_rvalue(&ir->lod_info.sample_index);
      break;
   case ir_txd:
      handle_rvalue(&ir->lod_info.grad.dPdx);
      handle_rvalue(&ir->lod_info.grad.dPdy);
      break;
   case ir_tg4:
      handle_rvalue(&ir->lod_info.component);
      break;
   }

   return visit_continue;
}

ir_visitor_status
ir_rvalue_base_visitor::rvalue_visit(ir_swizzle *ir)
{
   handle_rvalue(&ir->val);
   return visit_continue;
}

ir_visitor_status
ir_rvalue_base_visitor::rvalue_visit(ir_dereference_array *ir)
{
   /* The array index is not the target of the assignment, so clear the
    * 'in_assignee' flag.  Restore it after returning from the array index.
    */
   const bool was_in_assignee = this->in_assignee;
   this->in_assignee = false;
   handle_rvalue(&ir->array_index);
   this->in_assignee = was_in_assignee;

   handle_rvalue(&ir->array);
   return visit_continue;
}

ir_visitor_status
ir_rvalue_base_visitor::rvalue_visit(ir_dereference_record *ir)
{
   handle_rvalue(&ir->record);
   return visit_continue;
}

ir_visitor_status
ir_rvalue_base_visitor::rvalue_visit(ir_assignment *ir)
{
   handle_rvalue(&ir->rhs);
   handle_rvalue(&ir->condition);

   return visit_continue;
}

ir_visitor_status
ir_rvalue_base_visitor::rvalue_visit(ir_call *ir)
{
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
      ir_rvalue *new_param = param;
      handle_rvalue(&new_param);

      if (new_param != param) {
	 param->replace_with(new_param);
      }
   }
   return visit_continue;
}

ir_visitor_status
ir_rvalue_base_visitor::rvalue_visit(ir_return *ir)
{
   handle_rvalue(&ir->value);;
   return visit_continue;
}

ir_visitor_status
ir_rvalue_base_visitor::rvalue_visit(ir_if *ir)
{
   handle_rvalue(&ir->condition);
   return visit_continue;
}


ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_expression *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_texture *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_swizzle *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_dereference_array *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_dereference_record *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_assignment *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_call *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_return *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_if *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_expression *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_texture *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_swizzle *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_dereference_array *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_dereference_record *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_assignment *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_call *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_return *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_if *ir)
{
   return rvalue_visit(ir);
}
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d126 2
a127 1
   foreach_in_list_safe(ir_rvalue, param, &ir->actual_parameters) {
a151 13
ir_visitor_status
ir_rvalue_base_visitor::rvalue_visit(ir_emit_vertex *ir)
{
   handle_rvalue(&ir->stream);
   return visit_continue;
}

ir_visitor_status
ir_rvalue_base_visitor::rvalue_visit(ir_end_primitive *ir)
{
   handle_rvalue(&ir->stream);
   return visit_continue;
}
a207 12
ir_rvalue_visitor::visit_leave(ir_emit_vertex *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_end_primitive *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
a256 12
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_emit_vertex *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_end_primitive *ir)
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d126 1
a126 2
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
d151 13
d220 12
d281 12
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d60 1
d77 3
d126 2
a127 2
   foreach_iter(exec_list_iterator, iter, *ir) {
      ir_rvalue *param = (ir_rvalue *)iter.get();
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a34 1
#include "ir_print_visitor.h"
d38 1
a38 1
ir_rvalue_visitor::visit_leave(ir_expression *ir)
d50 1
a50 1
ir_rvalue_visitor::visit_leave(ir_texture *ir)
d59 1
d66 1
d69 3
d82 1
a82 1
ir_rvalue_visitor::visit_leave(ir_swizzle *ir)
d89 1
a89 1
ir_rvalue_visitor::visit_leave(ir_dereference_array *ir)
d104 1
a104 1
ir_rvalue_visitor::visit_leave(ir_dereference_record *ir)
d111 1
a111 1
ir_rvalue_visitor::visit_leave(ir_assignment *ir)
d120 1
a120 1
ir_rvalue_visitor::visit_leave(ir_call *ir)
d135 1
a135 1
ir_rvalue_visitor::visit_leave(ir_return *ir)
d142 1
a142 1
ir_rvalue_visitor::visit_leave(ir_if *ir)
d146 109
@


1.1
log
@Initial revision
@
text
@d56 1
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d35 1
d39 1
a39 1
ir_rvalue_base_visitor::rvalue_visit(ir_expression *ir)
d51 1
a51 1
ir_rvalue_base_visitor::rvalue_visit(ir_texture *ir)
a55 1
   handle_rvalue(&ir->offset);
a58 1
   case ir_lod:
a64 1
   case ir_txs:
a66 3
   case ir_txf_ms:
      handle_rvalue(&ir->lod_info.sample_index);
      break;
d77 1
a77 1
ir_rvalue_base_visitor::rvalue_visit(ir_swizzle *ir)
d84 1
a84 1
ir_rvalue_base_visitor::rvalue_visit(ir_dereference_array *ir)
d99 1
a99 1
ir_rvalue_base_visitor::rvalue_visit(ir_dereference_record *ir)
d106 1
a106 1
ir_rvalue_base_visitor::rvalue_visit(ir_assignment *ir)
d115 1
a115 1
ir_rvalue_base_visitor::rvalue_visit(ir_call *ir)
d130 1
a130 1
ir_rvalue_base_visitor::rvalue_visit(ir_return *ir)
d137 1
a137 1
ir_rvalue_base_visitor::rvalue_visit(ir_if *ir)
a140 109
}


ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_expression *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_texture *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_swizzle *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_dereference_array *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_dereference_record *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_assignment *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_call *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_return *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_if *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_expression *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_texture *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_swizzle *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_dereference_array *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_dereference_record *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_assignment *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_call *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_return *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_if *ir)
{
   return rvalue_visit(ir);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a59 1
   case ir_query_levels:
a75 3
   case ir_tg4:
      handle_rvalue(&ir->lod_info.component);
      break;
d122 2
a123 2
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d126 2
a127 1
   foreach_in_list_safe(ir_rvalue, param, &ir->actual_parameters) {
a151 13
ir_visitor_status
ir_rvalue_base_visitor::rvalue_visit(ir_emit_vertex *ir)
{
   handle_rvalue(&ir->stream);
   return visit_continue;
}

ir_visitor_status
ir_rvalue_base_visitor::rvalue_visit(ir_end_primitive *ir)
{
   handle_rvalue(&ir->stream);
   return visit_continue;
}
a207 12
ir_rvalue_visitor::visit_leave(ir_emit_vertex *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_visitor::visit_leave(ir_end_primitive *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
a256 12
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_emit_vertex *ir)
{
   return rvalue_visit(ir);
}

ir_visitor_status
ir_rvalue_enter_visitor::visit_enter(ir_end_primitive *ir)
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d126 1
a126 2
   foreach_list_safe(n, &ir->actual_parameters) {
      ir_rvalue *param = (ir_rvalue *) n;
d151 13
d220 12
d281 12
@


