head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2015.12.23.05.17.43;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.19;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.57;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.02.22;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.10;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.38;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.11;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.09;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.26;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.11;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.18;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@import common

Import('*')

from sys import executable as python_cmd

env = env.Clone()

env.Prepend(CPPPATH = [
    '#include',
    '#src/mapi',
    '#src/mesa',
    '#src/glsl',
    '#src/glsl/glcpp',
])

# Make glcpp-parse.h and glsl_parser.h reachable from the include path.
env.Append(CPPPATH = [Dir('.').abspath, Dir('glcpp').abspath])

env.Append(YACCFLAGS = '-d -p "glcpp_parser_"')

parser_env = env.Clone()
parser_env.Append(YACCFLAGS = [
    '--defines=%s' % File('glsl_parser.h').abspath,
    '-p', '_mesa_glsl_',
])

# without this line scons will expect "glsl_parser.hpp" instead of
# "glsl_parser.h", causing glsl_parser.cpp to be regenerated every time
parser_env['YACCHXXFILESUFFIX'] = '.h'

glcpp_lexer = env.CFile('glcpp/glcpp-lex.c', 'glcpp/glcpp-lex.l')
glcpp_parser = env.CFile('glcpp/glcpp-parse.c', 'glcpp/glcpp-parse.y')
glsl_lexer = parser_env.CXXFile('glsl_lexer.cpp', 'glsl_lexer.ll')
glsl_parser = parser_env.CXXFile('glsl_parser.cpp', 'glsl_parser.yy')

# common generated sources
glsl_sources = [
    glcpp_lexer,
    glcpp_parser[0],
    glsl_lexer,
    glsl_parser[0],
] 

# parse Makefile.sources
source_lists = env.ParseSourceList('Makefile.sources')

# add non-generated sources
for l in ('LIBGLCPP_FILES', 'LIBGLSL_FILES'):
    glsl_sources += source_lists[l]

if env['msvc']:
    env.Prepend(CPPPATH = ['#/src/getopt'])
    env.PrependUnique(LIBS = [getopt])

# Copy these files to avoid generation object files into src/mesa/program
env.Prepend(CPPPATH = ['#src/mesa/main'])
env.Command('hash_table.c', '#src/mesa/main/hash_table.c', Copy('$TARGET', '$SOURCE'))
env.Command('imports.c', '#src/mesa/main/imports.c', Copy('$TARGET', '$SOURCE'))
# Copy these files to avoid generation object files into src/mesa/program
env.Prepend(CPPPATH = ['#src/mesa/program'])
env.Command('prog_hash_table.c', '#src/mesa/program/prog_hash_table.c', Copy('$TARGET', '$SOURCE'))
env.Command('symbol_table.c', '#src/mesa/program/symbol_table.c', Copy('$TARGET', '$SOURCE'))

compiler_objs = env.StaticObject(source_lists['GLSL_COMPILER_CXX_FILES'])

mesa_objs = env.StaticObject([
    'hash_table.c',
    'imports.c',
    'prog_hash_table.c',
    'symbol_table.c',
])

compiler_objs += mesa_objs

glsl = env.ConvenienceLibrary(
    target = 'glsl',
    source = glsl_sources,
)

# SCons builtin dependency scanner doesn't detect that glsl_lexer.ll depends on
# glsl_parser.h
env.Depends(glsl, glsl_parser)

Export('glsl')

# Skip building these programs as they will cause SCons error "Two environments
# with different actions were specified for the same target"
if env['crosscompile'] or env['embedded']:
    Return()

env = env.Clone()

if env['platform'] == 'windows':
    env.PrependUnique(LIBS = [
        'user32',
    ])

env.Prepend(LIBS = [glsl])

glsl_compiler = env.Program(
    target = 'glsl_compiler',
    source = compiler_objs,
)
env.Alias('glsl_compiler', glsl_compiler)

glcpp = env.Program(
    target = 'glcpp/glcpp',
    source = ['glcpp/glcpp.c'] + mesa_objs,
)
env.Alias('glcpp', glcpp)
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a10 1
    '#src',
a16 2
env.Prepend(LIBS = [mesautil])

d58 1
d68 1
d109 1
a109 1
    source = ['glcpp/glcpp.c', 'tests/common.c'] + mesa_objs,
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d11 1
d18 2
a60 1
env.Command('hash_table.c', '#src/mesa/main/hash_table.c', Copy('$TARGET', '$SOURCE'))
a69 1
    'hash_table.c',
d110 1
a110 1
    source = ['glcpp/glcpp.c'] + mesa_objs,
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d56 17
a72 47
if env['crosscompile'] and not env['embedded']:
    Import('builtin_glsl_function')
else:
    # Copy these files to avoid generation object files into src/mesa/program
    env.Prepend(CPPPATH = ['#src/mesa/main'])
    env.Command('hash_table.c', '#src/mesa/main/hash_table.c', Copy('$TARGET', '$SOURCE'))
    env.Command('imports.c', '#src/mesa/main/imports.c', Copy('$TARGET', '$SOURCE'))
    # Copy these files to avoid generation object files into src/mesa/program
    env.Prepend(CPPPATH = ['#src/mesa/program'])
    env.Command('prog_hash_table.c', '#src/mesa/program/prog_hash_table.c', Copy('$TARGET', '$SOURCE'))
    env.Command('symbol_table.c', '#src/mesa/program/symbol_table.c', Copy('$TARGET', '$SOURCE'))

    compiler_objs = env.StaticObject(source_lists['GLSL_COMPILER_CXX_FILES'])

    mesa_objs = env.StaticObject([
        'hash_table.c',
        'imports.c',
        'prog_hash_table.c',
        'symbol_table.c',
    ])

    compiler_objs += mesa_objs

    builtin_compiler = env.Program(
        target = 'builtin_compiler/builtin_compiler',
        source = compiler_objs + glsl_sources + \
            source_lists['BUILTIN_COMPILER_CXX_FILES'],
    )

    # SCons builtin dependency scanner doesn't detect that glsl_lexer.ll
    # depends on glsl_parser.h
    env.Depends(builtin_compiler, glsl_parser)

    builtin_glsl_function = env.CodeGenerate(
        target = 'builtin_function.cpp',
        script = 'builtins/tools/generate_builtins.py',
        source = builtin_compiler,
        command = python_cmd + ' $SCRIPT $SOURCE > $TARGET'
    )

    env.Depends(builtin_glsl_function, ['builtins/tools/generate_builtins.py', '#src/glsl/builtins/tools/texture_builtins.py'] + Glob('builtins/ir/*'))

    Export('builtin_glsl_function')

    if env['hostonly']:
        Return()

d74 1
a74 1
glsl_sources += builtin_glsl_function
d101 2
a102 2
glsl2 = env.Program(
    target = 'glsl2',
d105 1
a105 1
env.Alias('glsl2', glsl2)
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d17 2
a18 2
# Make glcpp/glcpp-parse.h and glsl_parser.h reacheable from the include path
env.Append(CPPPATH = [Dir('.').abspath])
d20 1
a20 1
env.Append(YACCFLAGS = '-d')
d28 4
d37 1
a40 5
    'glcpp/pp.c',
    'ast_expr.cpp',
    'ast_function.cpp',
    'ast_to_hir.cpp',
    'ast_type.cpp',
a42 57
    'glsl_parser_extras.cpp',
    'glsl_types.cpp',
    'glsl_symbol_table.cpp',
    'hir_field_selection.cpp',
    'ir_basic_block.cpp',
    'ir_clone.cpp',
    'ir_constant_expression.cpp',
    'ir.cpp',
    'ir_expression_flattening.cpp',
    'ir_function_can_inline.cpp',
    'ir_function_detect_recursion.cpp',
    'ir_function.cpp',
    'ir_hierarchical_visitor.cpp',
    'ir_hv_accept.cpp',
    'ir_import_prototypes.cpp',
    'ir_print_visitor.cpp',
    'ir_reader.cpp',
    'ir_rvalue_visitor.cpp',
    'ir_set_program_inouts.cpp',
    'ir_validate.cpp',
    'ir_variable.cpp',
    'ir_variable_refcount.cpp',
    'linker.cpp',
    'link_functions.cpp',
    'loop_analysis.cpp',
    'loop_controls.cpp',
    'loop_unroll.cpp',
    'lower_discard.cpp',
    'lower_if_to_cond_assign.cpp',
    'lower_instructions.cpp',
    'lower_jumps.cpp',
    'lower_mat_op_to_vec.cpp',
    'lower_noise.cpp',
    'lower_variable_index_to_cond_assign.cpp',
    'lower_vec_index_to_cond_assign.cpp',
    'lower_vec_index_to_swizzle.cpp',
    'lower_vector.cpp',
    'opt_algebraic.cpp',
    'opt_constant_folding.cpp',
    'opt_constant_propagation.cpp',
    'opt_constant_variable.cpp',
    'opt_copy_propagation.cpp',
    'opt_copy_propagation_elements.cpp',
    'opt_dead_code.cpp',
    'opt_dead_code_local.cpp',
    'opt_dead_functions.cpp',
    'opt_discard_simplification.cpp',
    'opt_function_inlining.cpp',
    'opt_if_simplification.cpp',
    'opt_noop_swizzle.cpp',
    'opt_redundant_jumps.cpp',
    'opt_structure_splitting.cpp',
    'opt_swizzle_swizzle.cpp',
    'opt_tree_grafting.cpp',
    'ralloc.c',
    's_expression.cpp',
    'strtod.c',
d45 7
d60 4
d65 1
a65 1
    env.Command('hash_table.c', '#src/mesa/program/hash_table.c', Copy('$TARGET', '$SOURCE'))
d68 1
a68 1
    main_obj = env.StaticObject('main.cpp')
d72 2
d77 2
d80 3
a82 2
        target = 'builtin_compiler',
        source = main_obj + glsl_sources + ['builtin_stubs.cpp'] + mesa_objs,
d96 1
a96 1
    env.Depends(builtin_glsl_function, ['builtins/tools/generate_builtins.py', 'builtins/tools/texture_builtins.py'] + Glob('builtins/ir/*'))
d133 1
a133 1
    source = main_obj + mesa_objs,
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d5 2
d10 1
d14 12
d28 8
a35 3
sources = [
    'glcpp/glcpp-lex.c',
    'glcpp/glcpp-parse.c',
d41 2
a42 3
    'builtin_function.cpp',
    'glsl_lexer.cpp',
    'glsl_parser.cpp',
d53 1
d85 1
d100 46
a145 1
]
d149 1
a149 1
    source = sources,
d152 4
d158 4
a161 2
# FIXME: We can't build the programs because there's a cyclic dependency between tis directory and src/mesa
Return()
d172 1
a172 1
env.Program(
d174 1
a174 3
    source = [
        'main.cpp',
    ]
d176 1
d178 3
a180 3
env.Program(
    target = 'glcpp',
    source = ['glcpp/glcpp.c'],
d182 1
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d7 6
d14 65
a78 16
    'pp/sl_pp_context.c',
    'pp/sl_pp_define.c',
    'pp/sl_pp_dict.c',
    'pp/sl_pp_error.c',
    'pp/sl_pp_expression.c',
    'pp/sl_pp_extension.c',
    'pp/sl_pp_if.c',
    'pp/sl_pp_line.c',
    'pp/sl_pp_macro.c',
    'pp/sl_pp_pragma.c',
    'pp/sl_pp_process.c',
    'pp/sl_pp_purify.c',
    'pp/sl_pp_token.c',
    'pp/sl_pp_token_util.c',
    'pp/sl_pp_version.c',
    'cl/sl_cl_parse.c',
d88 3
d101 4
a104 7
    target = 'purify',
    source = ['apps/purify.c'],
)

env.Program(
    target = 'tokenise',
    source = ['apps/tokenise.c'],
d108 2
a109 2
    target = 'version',
    source = ['apps/version.c'],
a110 14

env.Program(
    target = 'process',
    source = ['apps/process.c'],
)

glsl_compile = env.Program(
    target = 'compile',
    source = ['apps/compile.c'],
)

if env['platform'] == common.default_platform:
    # Only export the GLSL compiler when building for the host platform
    Export('glsl_compile')
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a6 6
env.Prepend(CPPPATH = [
    '#src/mapi',
    '#src/mesa',
    '#src/glsl',
])

d8 16
a23 65
    'glcpp/glcpp-lex.c',
    'glcpp/glcpp-parse.c',
    'glcpp/pp.c',
    'ast_expr.cpp',
    'ast_function.cpp',
    'ast_to_hir.cpp',
    'ast_type.cpp',
    'builtin_function.cpp',
    'glsl_lexer.cpp',
    'glsl_parser.cpp',
    'glsl_parser_extras.cpp',
    'glsl_types.cpp',
    'glsl_symbol_table.cpp',
    'hir_field_selection.cpp',
    'ir_basic_block.cpp',
    'ir_clone.cpp',
    'ir_constant_expression.cpp',
    'ir.cpp',
    'ir_expression_flattening.cpp',
    'ir_function_can_inline.cpp',
    'ir_function.cpp',
    'ir_hierarchical_visitor.cpp',
    'ir_hv_accept.cpp',
    'ir_import_prototypes.cpp',
    'ir_print_visitor.cpp',
    'ir_reader.cpp',
    'ir_rvalue_visitor.cpp',
    'ir_set_program_inouts.cpp',
    'ir_validate.cpp',
    'ir_variable.cpp',
    'ir_variable_refcount.cpp',
    'linker.cpp',
    'link_functions.cpp',
    'loop_analysis.cpp',
    'loop_controls.cpp',
    'loop_unroll.cpp',
    'lower_discard.cpp',
    'lower_if_to_cond_assign.cpp',
    'lower_instructions.cpp',
    'lower_jumps.cpp',
    'lower_mat_op_to_vec.cpp',
    'lower_noise.cpp',
    'lower_variable_index_to_cond_assign.cpp',
    'lower_vec_index_to_cond_assign.cpp',
    'lower_vec_index_to_swizzle.cpp',
    'lower_vector.cpp',
    'opt_algebraic.cpp',
    'opt_constant_folding.cpp',
    'opt_constant_propagation.cpp',
    'opt_constant_variable.cpp',
    'opt_copy_propagation.cpp',
    'opt_dead_code.cpp',
    'opt_dead_code_local.cpp',
    'opt_dead_functions.cpp',
    'opt_discard_simplification.cpp',
    'opt_function_inlining.cpp',
    'opt_if_simplification.cpp',
    'opt_noop_swizzle.cpp',
    'opt_redundant_jumps.cpp',
    'opt_structure_splitting.cpp',
    'opt_swizzle_swizzle.cpp',
    'opt_tree_grafting.cpp',
    'ralloc.c',
    's_expression.cpp',
    'strtod.c',
a32 3
# FIXME: We can't build the programs because there's a cyclic dependency between tis directory and src/mesa
Return()

d43 7
a49 4
    target = 'glsl2',
    source = [
        'main.cpp',
    ]
d53 2
a54 2
    target = 'glcpp',
    source = ['glcpp/glcpp.c'],
d56 14
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a4 2
from sys import executable as python_cmd

a7 1
    '#include',
a10 12
    '#src/glsl/glcpp',
])

# Make glcpp-parse.h and glsl_parser.h reachable from the include path.
env.Append(CPPPATH = [Dir('.').abspath, Dir('glcpp').abspath])

env.Append(YACCFLAGS = '-d -p "glcpp_parser_"')

parser_env = env.Clone()
parser_env.Append(YACCFLAGS = [
    '--defines=%s' % File('glsl_parser.h').abspath,
    '-p', '_mesa_glsl_',
d13 67
a79 77
# without this line scons will expect "glsl_parser.hpp" instead of
# "glsl_parser.h", causing glsl_parser.cpp to be regenerated every time
parser_env['YACCHXXFILESUFFIX'] = '.h'

glcpp_lexer = env.CFile('glcpp/glcpp-lex.c', 'glcpp/glcpp-lex.l')
glcpp_parser = env.CFile('glcpp/glcpp-parse.c', 'glcpp/glcpp-parse.y')
glsl_lexer = parser_env.CXXFile('glsl_lexer.cpp', 'glsl_lexer.ll')
glsl_parser = parser_env.CXXFile('glsl_parser.cpp', 'glsl_parser.yy')

# common generated sources
glsl_sources = [
    glcpp_lexer,
    glcpp_parser[0],
    glsl_lexer,
    glsl_parser[0],
] 

# parse Makefile.sources
source_lists = env.ParseSourceList('Makefile.sources')

# add non-generated sources
for l in ('LIBGLCPP_FILES', 'LIBGLSL_FILES'):
    glsl_sources += source_lists[l]

if env['msvc']:
    env.Prepend(CPPPATH = ['#/src/getopt'])
    env.PrependUnique(LIBS = [getopt])

if env['crosscompile'] and not env['embedded']:
    Import('builtin_glsl_function')
else:
    # Copy these files to avoid generation object files into src/mesa/program
    env.Prepend(CPPPATH = ['#src/mesa/main'])
    env.Command('hash_table.c', '#src/mesa/main/hash_table.c', Copy('$TARGET', '$SOURCE'))
    env.Command('imports.c', '#src/mesa/main/imports.c', Copy('$TARGET', '$SOURCE'))
    # Copy these files to avoid generation object files into src/mesa/program
    env.Prepend(CPPPATH = ['#src/mesa/program'])
    env.Command('prog_hash_table.c', '#src/mesa/program/prog_hash_table.c', Copy('$TARGET', '$SOURCE'))
    env.Command('symbol_table.c', '#src/mesa/program/symbol_table.c', Copy('$TARGET', '$SOURCE'))

    compiler_objs = env.StaticObject(source_lists['GLSL_COMPILER_CXX_FILES'])

    mesa_objs = env.StaticObject([
        'hash_table.c',
        'imports.c',
        'prog_hash_table.c',
        'symbol_table.c',
    ])

    compiler_objs += mesa_objs

    builtin_compiler = env.Program(
        target = 'builtin_compiler/builtin_compiler',
        source = compiler_objs + glsl_sources + \
            source_lists['BUILTIN_COMPILER_CXX_FILES'],
    )

    # SCons builtin dependency scanner doesn't detect that glsl_lexer.ll
    # depends on glsl_parser.h
    env.Depends(builtin_compiler, glsl_parser)

    builtin_glsl_function = env.CodeGenerate(
        target = 'builtin_function.cpp',
        script = 'builtins/tools/generate_builtins.py',
        source = builtin_compiler,
        command = python_cmd + ' $SCRIPT $SOURCE > $TARGET'
    )

    env.Depends(builtin_glsl_function, ['builtins/tools/generate_builtins.py', '#src/glsl/builtins/tools/texture_builtins.py'] + Glob('builtins/ir/*'))

    Export('builtin_glsl_function')

    if env['hostonly']:
        Return()


glsl_sources += builtin_glsl_function
d83 1
a83 1
    source = glsl_sources,
a85 4
# SCons builtin dependency scanner doesn't detect that glsl_lexer.ll depends on
# glsl_parser.h
env.Depends(glsl, glsl_parser)

d88 2
a89 4
# Skip building these programs as they will cause SCons error "Two environments
# with different actions were specified for the same target"
if env['crosscompile'] or env['embedded']:
    Return()
d100 1
a100 1
glsl2 = env.Program(
d102 3
a104 1
    source = compiler_objs,
a105 1
env.Alias('glsl2', glsl2)
d107 3
a109 3
glcpp = env.Program(
    target = 'glcpp/glcpp',
    source = ['glcpp/glcpp.c'] + mesa_objs,
a110 1
env.Alias('glcpp', glcpp)
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d56 47
a102 17
# Copy these files to avoid generation object files into src/mesa/program
env.Prepend(CPPPATH = ['#src/mesa/main'])
env.Command('hash_table.c', '#src/mesa/main/hash_table.c', Copy('$TARGET', '$SOURCE'))
env.Command('imports.c', '#src/mesa/main/imports.c', Copy('$TARGET', '$SOURCE'))
# Copy these files to avoid generation object files into src/mesa/program
env.Prepend(CPPPATH = ['#src/mesa/program'])
env.Command('prog_hash_table.c', '#src/mesa/program/prog_hash_table.c', Copy('$TARGET', '$SOURCE'))
env.Command('symbol_table.c', '#src/mesa/program/symbol_table.c', Copy('$TARGET', '$SOURCE'))

compiler_objs = env.StaticObject(source_lists['GLSL_COMPILER_CXX_FILES'])

mesa_objs = env.StaticObject([
    'hash_table.c',
    'imports.c',
    'prog_hash_table.c',
    'symbol_table.c',
])
d104 1
a104 1
compiler_objs += mesa_objs
d131 2
a132 2
glsl_compiler = env.Program(
    target = 'glsl_compiler',
d135 1
a135 1
env.Alias('glsl_compiler', glsl_compiler)
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a10 1
    '#src',
a16 2
env.Prepend(LIBS = [mesautil])

d58 1
d68 1
d109 1
a109 1
    source = ['glcpp/glcpp.c', 'tests/common.c'] + mesa_objs,
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d11 1
d18 2
a60 1
env.Command('hash_table.c', '#src/mesa/main/hash_table.c', Copy('$TARGET', '$SOURCE'))
a69 1
    'hash_table.c',
d110 1
a110 1
    source = ['glcpp/glcpp.c'] + mesa_objs,
@


