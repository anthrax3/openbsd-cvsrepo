head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.7
date	2015.12.23.05.17.44;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.19;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.58;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.02.29;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.10;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.22;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.31;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.30;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.36;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright © 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * \file opt_dead_functions.cpp
 *
 * Eliminates unused functions from the linked program.
 */

#include "ir.h"
#include "ir_visitor.h"
#include "ir_expression_flattening.h"
#include "glsl_types.h"

namespace {

class signature_entry : public exec_node
{
public:
   signature_entry(ir_function_signature *sig)
   {
      this->signature = sig;
      this->used = false;
   }

   ir_function_signature *signature;
   bool used;
};

class ir_dead_functions_visitor : public ir_hierarchical_visitor {
public:
   ir_dead_functions_visitor()
   {
      this->mem_ctx = ralloc_context(NULL);
   }

   ~ir_dead_functions_visitor()
   {
      ralloc_free(this->mem_ctx);
   }

   virtual ir_visitor_status visit_enter(ir_function_signature *);
   virtual ir_visitor_status visit_enter(ir_call *);

   signature_entry *get_signature_entry(ir_function_signature *var);

   /* List of signature_entry */
   exec_list signature_list;
   void *mem_ctx;
};

} /* unnamed namespace */

signature_entry *
ir_dead_functions_visitor::get_signature_entry(ir_function_signature *sig)
{
   foreach_list(n, &this->signature_list) {
      signature_entry *entry = (signature_entry *) n;
      if (entry->signature == sig)
	 return entry;
   }

   signature_entry *entry = new(mem_ctx) signature_entry(sig);
   this->signature_list.push_tail(entry);
   return entry;
}


ir_visitor_status
ir_dead_functions_visitor::visit_enter(ir_function_signature *ir)
{
   signature_entry *entry = this->get_signature_entry(ir);

   if (strcmp(ir->function_name(), "main") == 0) {
      entry->used = true;
   }



   return visit_continue;
}


ir_visitor_status
ir_dead_functions_visitor::visit_enter(ir_call *ir)
{
   signature_entry *entry = this->get_signature_entry(ir->callee);

   entry->used = true;

   return visit_continue;
}

bool
do_dead_functions(exec_list *instructions)
{
   ir_dead_functions_visitor v;
   bool progress = false;

   visit_list_elements(&v, instructions);

   /* Now that we've figured out which function signatures are used, remove
    * the unused ones, and remove function definitions that have no more
    * signatures.
    */
    foreach_list_safe(n, &v.signature_list) {
      signature_entry *entry = (signature_entry *) n;

      if (!entry->used) {
	 entry->signature->remove();
	 delete entry->signature;
	 progress = true;
      }
      delete(entry);
   }

   /* We don't just do this above when we nuked a signature because of
    * const pointers.
    */
   foreach_list_safe(n, instructions) {
      ir_instruction *ir = (ir_instruction *) n;
      ir_function *func = ir->as_function();

      if (func && func->signatures.is_empty()) {
	 /* At this point (post-linking), the symbol table is no
	  * longer in use, so not removing the function from the
	  * symbol table should be OK.
	  */
	 func->remove();
	 delete func;
	 progress = true;
      }
   }

   return progress;
}
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d77 2
a78 1
   foreach_in_list(signature_entry, entry, &this->signature_list) {
d126 3
a128 1
    foreach_in_list_safe(signature_entry, entry, &v.signature_list) {
d140 2
a141 1
   foreach_in_list_safe(ir_instruction, ir, instructions) {
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d77 1
a77 2
   foreach_list(n, &this->signature_list) {
      signature_entry *entry = (signature_entry *) n;
d125 1
a125 3
    foreach_list_safe(n, &v.signature_list) {
      signature_entry *entry = (signature_entry *) n;

d137 1
a137 2
   foreach_list_safe(n, instructions) {
      ir_instruction *ir = (ir_instruction *) n;
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d77 2
a78 2
   foreach_iter(exec_list_iterator, iter, this->signature_list) {
      signature_entry *entry = (signature_entry *)iter.get();
d126 2
a127 2
    foreach_iter(exec_list_iterator, iter, v.signature_list) {
      signature_entry *entry = (signature_entry *)iter.get();
d140 2
a141 2
   foreach_iter(exec_list_iterator, iter, *instructions) {
      ir_instruction *ir = (ir_instruction *)iter.get();
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d35 2
a66 2
   bool (*predicate)(ir_instruction *ir);

d72 1
d107 1
a107 1
   signature_entry *entry = this->get_signature_entry(ir->get_callee());
@


1.1
log
@Initial revision
@
text
@d1 106
a106 104
 /*
  * Copyright © 2010 Intel Corporation
  *
  * Permission is hereby granted, free of charge, to any person obtaining a
  * copy of this software and associated documentation files (the "Software"),
  * to deal in the Software without restriction, including without limitation
  * the rights to use, copy, modify, merge, publish, distribute, sublicense,
  * and/or sell copies of the Software, and to permit persons to whom the
  * Software is furnished to do so, subject to the following conditions:
  *
  * The above copyright notice and this permission notice (including the next
  * paragraph) shall be included in all copies or substantial portions of the
  * Software.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  * DEALINGS IN THE SOFTWARE.
  */

 /**
  * \file opt_dead_functions.cpp
  *
  * Eliminates unused functions from the linked program.
  */

 #include "ir.h"
 #include "ir_visitor.h"
 #include "ir_expression_flattening.h"
 #include "glsl_types.h"

 class signature_entry : public exec_node
 {
 public:
    signature_entry(ir_function_signature *sig)
    {
       this->signature = sig;
       this->used = false;
    }

    ir_function_signature *signature;
    bool used;
 };

 class ir_dead_functions_visitor : public ir_hierarchical_visitor {
 public:
    ir_dead_functions_visitor()
    {
       this->mem_ctx = ralloc_context(NULL);
    }

    ~ir_dead_functions_visitor()
    {
       ralloc_free(this->mem_ctx);
    }

    virtual ir_visitor_status visit_enter(ir_function_signature *);
    virtual ir_visitor_status visit_enter(ir_call *);

    signature_entry *get_signature_entry(ir_function_signature *var);

    bool (*predicate)(ir_instruction *ir);

    /* List of signature_entry */
    exec_list signature_list;
    void *mem_ctx;
 };


 signature_entry *
 ir_dead_functions_visitor::get_signature_entry(ir_function_signature *sig)
 {
    foreach_iter(exec_list_iterator, iter, this->signature_list) {
       signature_entry *entry = (signature_entry *)iter.get();
       if (entry->signature == sig)
	  return entry;
    }

    signature_entry *entry = new(mem_ctx) signature_entry(sig);
    this->signature_list.push_tail(entry);
    return entry;
 }


 ir_visitor_status
 ir_dead_functions_visitor::visit_enter(ir_function_signature *ir)
 {
    signature_entry *entry = this->get_signature_entry(ir);

    if (strcmp(ir->function_name(), "main") == 0) {
       entry->used = true;
    }

    return visit_continue;
 }


 ir_visitor_status
 ir_dead_functions_visitor::visit_enter(ir_call *ir)
 {
    signature_entry *entry = this->get_signature_entry(ir->get_callee());
d108 1
a108 1
    entry->used = true;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d1 104
a104 107
/*
 * Copyright © 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * \file opt_dead_functions.cpp
 *
 * Eliminates unused functions from the linked program.
 */

#include "ir.h"
#include "ir_visitor.h"
#include "ir_expression_flattening.h"
#include "glsl_types.h"

namespace {

class signature_entry : public exec_node
{
public:
   signature_entry(ir_function_signature *sig)
   {
      this->signature = sig;
      this->used = false;
   }

   ir_function_signature *signature;
   bool used;
};

class ir_dead_functions_visitor : public ir_hierarchical_visitor {
public:
   ir_dead_functions_visitor()
   {
      this->mem_ctx = ralloc_context(NULL);
   }

   ~ir_dead_functions_visitor()
   {
      ralloc_free(this->mem_ctx);
   }

   virtual ir_visitor_status visit_enter(ir_function_signature *);
   virtual ir_visitor_status visit_enter(ir_call *);

   signature_entry *get_signature_entry(ir_function_signature *var);

   /* List of signature_entry */
   exec_list signature_list;
   void *mem_ctx;
};

} /* unnamed namespace */

signature_entry *
ir_dead_functions_visitor::get_signature_entry(ir_function_signature *sig)
{
   foreach_iter(exec_list_iterator, iter, this->signature_list) {
      signature_entry *entry = (signature_entry *)iter.get();
      if (entry->signature == sig)
	 return entry;
   }

   signature_entry *entry = new(mem_ctx) signature_entry(sig);
   this->signature_list.push_tail(entry);
   return entry;
}


ir_visitor_status
ir_dead_functions_visitor::visit_enter(ir_function_signature *ir)
{
   signature_entry *entry = this->get_signature_entry(ir);

   if (strcmp(ir->function_name(), "main") == 0) {
      entry->used = true;
   }



   return visit_continue;
}


ir_visitor_status
ir_dead_functions_visitor::visit_enter(ir_call *ir)
{
   signature_entry *entry = this->get_signature_entry(ir->callee);
d106 1
a106 1
   entry->used = true;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d77 2
a78 2
   foreach_list(n, &this->signature_list) {
      signature_entry *entry = (signature_entry *) n;
d126 2
a127 2
    foreach_list_safe(n, &v.signature_list) {
      signature_entry *entry = (signature_entry *) n;
d140 2
a141 2
   foreach_list_safe(n, instructions) {
      ir_instruction *ir = (ir_instruction *) n;
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d77 2
a78 1
   foreach_in_list(signature_entry, entry, &this->signature_list) {
d126 3
a128 1
    foreach_in_list_safe(signature_entry, entry, &v.signature_list) {
d140 2
a141 1
   foreach_in_list_safe(ir_instruction, ir, instructions) {
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d77 1
a77 2
   foreach_list(n, &this->signature_list) {
      signature_entry *entry = (signature_entry *) n;
d125 1
a125 3
    foreach_list_safe(n, &v.signature_list) {
      signature_entry *entry = (signature_entry *) n;

d137 1
a137 2
   foreach_list_safe(n, instructions) {
      ir_instruction *ir = (ir_instruction *) n;
@


