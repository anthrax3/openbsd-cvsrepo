head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.3.0.4
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	v10_2_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2015.12.23.05.17.44;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2014.07.09.20.34.31;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.1
date	2014.07.09.20.34.31;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.2
date	2015.01.25.14.10.27;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.3
date	2015.02.20.22.47.33;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2013 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * \file brw_lower_offset_array.cpp
 *
 * IR lower pass to decompose ir_texture ir_tg4 with an array of offsets
 * into four ir_tg4s with a single ivec2 offset, select the .w component of each,
 * and return those four values packed into a gvec4.
 *
 * \author Chris Forbes <chrisf@@ijw.co.nz>
 */

#include "glsl_types.h"
#include "ir.h"
#include "ir_builder.h"
#include "ir_optimization.h"
#include "ir_rvalue_visitor.h"

using namespace ir_builder;

class brw_lower_offset_array_visitor : public ir_rvalue_visitor {
public:
   brw_lower_offset_array_visitor()
   {
      progress = false;
   }

   void handle_rvalue(ir_rvalue **rv);

   bool progress;
};

void
brw_lower_offset_array_visitor::handle_rvalue(ir_rvalue **rv)
{
   if (*rv == NULL || (*rv)->ir_type != ir_type_texture)
      return;

   ir_texture *ir = (ir_texture *) *rv;
   if (ir->op != ir_tg4 || !ir->offset || !ir->offset->type->is_array())
      return;

   void *mem_ctx = ralloc_parent(ir);

   ir_variable *var = new (mem_ctx) ir_variable(ir->type, "result", ir_var_auto);
   base_ir->insert_before(var);

   for (int i = 0; i < 4; i++) {
      ir_texture *tex = ir->clone(mem_ctx, NULL);
      tex->offset = new (mem_ctx) ir_dereference_array(tex->offset,
            new (mem_ctx) ir_constant(i));

      base_ir->insert_before(assign(var, swizzle_w(tex), 1 << i));
   }

   *rv = new (mem_ctx) ir_dereference_variable(var);

   progress = true;
}

bool
lower_offset_arrays(exec_list *instructions)
{
   brw_lower_offset_array_visitor v;

   visit_list_elements(&v, instructions);

   return v.progress;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 10.2.3
@
text
@@


1.1.1.2
log
@Import Mesa 10.4.3
@
text
@d25 1
a25 1
 * \file lower_offset_array.cpp
d42 1
a42 1
class lower_offset_array_visitor : public ir_rvalue_visitor {
d44 1
a44 1
   lower_offset_array_visitor()
d55 1
a55 1
lower_offset_array_visitor::handle_rvalue(ir_rvalue **rv)
d66 1
a66 2
   ir_variable *var =
      new (mem_ctx) ir_variable(ir->type, "result", ir_var_temporary);
d85 1
a85 1
   lower_offset_array_visitor v;
@


1.1.1.3
log
@Import Mesa 10.2.9
@
text
@d25 1
a25 1
 * \file brw_lower_offset_array.cpp
d42 1
a42 1
class brw_lower_offset_array_visitor : public ir_rvalue_visitor {
d44 1
a44 1
   brw_lower_offset_array_visitor()
d55 1
a55 1
brw_lower_offset_array_visitor::handle_rvalue(ir_rvalue **rv)
d66 2
a67 1
   ir_variable *var = new (mem_ctx) ir_variable(ir->type, "result", ir_var_auto);
d86 1
a86 1
   brw_lower_offset_array_visitor v;
@


