head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.43;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.19;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.57;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.02.26;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.10;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.16;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.29;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.22;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.28;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */


/**
 * \file ir_optimization.h
 *
 * Prototypes for optimization passes to be called by the compiler and drivers.
 */

/* Operations for lower_instructions() */
#define SUB_TO_ADD_NEG     0x01
#define DIV_TO_MUL_RCP     0x02
#define EXP_TO_EXP2        0x04
#define POW_TO_EXP2        0x08
#define LOG_TO_LOG2        0x10
#define MOD_TO_FRACT       0x20
#define INT_DIV_TO_MUL_RCP 0x40
#define BITFIELD_INSERT_TO_BFM_BFI 0x80
#define LDEXP_TO_ARITH     0x100
#define CARRY_TO_ARITH     0x200
#define BORROW_TO_ARITH    0x400

/**
 * \see class lower_packing_builtins_visitor
 */
enum lower_packing_builtins_op {
   LOWER_PACK_UNPACK_NONE               = 0x0000,

   LOWER_PACK_SNORM_2x16                = 0x0001,
   LOWER_UNPACK_SNORM_2x16              = 0x0002,

   LOWER_PACK_UNORM_2x16                = 0x0004,
   LOWER_UNPACK_UNORM_2x16              = 0x0008,

   LOWER_PACK_HALF_2x16                 = 0x0010,
   LOWER_UNPACK_HALF_2x16               = 0x0020,

   LOWER_PACK_HALF_2x16_TO_SPLIT        = 0x0040,
   LOWER_UNPACK_HALF_2x16_TO_SPLIT      = 0x0080,

   LOWER_PACK_SNORM_4x8                 = 0x0100,
   LOWER_UNPACK_SNORM_4x8               = 0x0200,

   LOWER_PACK_UNORM_4x8                 = 0x0400,
   LOWER_UNPACK_UNORM_4x8               = 0x0800
};

bool do_common_optimization(exec_list *ir, bool linked,
			    bool uniform_locations_assigned,
                            const struct gl_shader_compiler_options *options,
                            bool native_integers);

bool do_algebraic(exec_list *instructions, bool native_integers);
bool do_constant_folding(exec_list *instructions);
bool do_constant_variable(exec_list *instructions);
bool do_constant_variable_unlinked(exec_list *instructions);
bool do_copy_propagation(exec_list *instructions);
bool do_copy_propagation_elements(exec_list *instructions);
bool do_constant_propagation(exec_list *instructions);
bool do_cse(exec_list *instructions);
void do_dead_builtin_varyings(struct gl_context *ctx,
                              gl_shader *producer, gl_shader *consumer,
                              unsigned num_tfeedback_decls,
                              class tfeedback_decl *tfeedback_decls);
bool do_dead_code(exec_list *instructions, bool uniform_locations_assigned);
bool do_dead_code_local(exec_list *instructions);
bool do_dead_code_unlinked(exec_list *instructions);
bool do_dead_functions(exec_list *instructions);
bool opt_flip_matrices(exec_list *instructions);
bool do_function_inlining(exec_list *instructions);
bool do_lower_jumps(exec_list *instructions, bool pull_out_jumps = true, bool lower_sub_return = true, bool lower_main_return = false, bool lower_continue = false, bool lower_break = false);
bool do_lower_texture_projection(exec_list *instructions);
bool do_if_simplification(exec_list *instructions);
bool opt_flatten_nested_if_blocks(exec_list *instructions);
bool do_discard_simplification(exec_list *instructions);
bool lower_if_to_cond_assign(exec_list *instructions, unsigned max_depth = 0);
bool do_mat_op_to_vec(exec_list *instructions);
bool do_noop_swizzle(exec_list *instructions);
bool do_structure_splitting(exec_list *instructions);
bool do_swizzle_swizzle(exec_list *instructions);
bool do_vectorize(exec_list *instructions);
bool do_tree_grafting(exec_list *instructions);
bool do_vec_index_to_cond_assign(exec_list *instructions);
bool do_vec_index_to_swizzle(exec_list *instructions);
bool lower_discard(exec_list *instructions);
void lower_discard_flow(exec_list *instructions);
bool lower_instructions(exec_list *instructions, unsigned what_to_lower);
bool lower_noise(exec_list *instructions);
bool lower_variable_index_to_cond_assign(exec_list *instructions,
    bool lower_input, bool lower_output, bool lower_temp, bool lower_uniform);
bool lower_quadop_vector(exec_list *instructions, bool dont_lower_swz);
bool lower_clip_distance(gl_shader *shader);
void lower_output_reads(exec_list *instructions);
bool lower_packing_builtins(exec_list *instructions, int op_mask);
void lower_ubo_reference(struct gl_shader *shader, exec_list *instructions);
void lower_packed_varyings(void *mem_ctx,
                           unsigned locations_used, ir_variable_mode mode,
                           unsigned gs_input_vertices, gl_shader *shader);
bool lower_vector_insert(exec_list *instructions, bool lower_nonconstant_index);
void lower_named_interface_blocks(void *mem_ctx, gl_shader *shader);
bool optimize_redundant_jumps(exec_list *instructions);
bool optimize_split_arrays(exec_list *instructions, bool linked);
bool lower_offset_arrays(exec_list *instructions);

ir_rvalue *
compare_index_block(exec_list *instructions, ir_variable *index,
		    unsigned base, unsigned components, void *mem_ctx);
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a42 1
#define SAT_TO_CLAMP       0x800
d74 1
a74 3
bool do_rebalance_tree(exec_list *instructions);
bool do_algebraic(exec_list *instructions, bool native_integers,
                  const struct gl_shader_compiler_options *options);
a98 1
bool do_minmax_prune(exec_list *instructions);
a112 1
bool lower_const_arrays_to_uniforms(exec_list *instructions);
a124 4
void optimize_dead_builtin_variables(exec_list *instructions,
                                     enum ir_variable_mode other);

bool lower_vertex_id(gl_shader *shader);
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d43 1
d75 3
a77 1
bool do_algebraic(exec_list *instructions, bool native_integers);
d102 1
d117 1
d130 4
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d39 4
a42 2
#define LRP_TO_ARITH       0x80
#define BITFIELD_INSERT_TO_BFM_BFI 0x100
d71 2
a72 2
			    unsigned max_unroll_iterations,
                            const struct gl_shader_compiler_options *options);
d74 1
a74 1
bool do_algebraic(exec_list *instructions);
d81 1
d102 1
d117 1
a117 1
void lower_packed_varyings(void *mem_ctx, unsigned location_base,
d119 1
a119 1
                           gl_shader *shader);
d124 1
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d32 9
a40 6
#define SUB_TO_ADD_NEG 0x01
#define DIV_TO_MUL_RCP 0x02
#define EXP_TO_EXP2    0x04
#define POW_TO_EXP2    0x08
#define LOG_TO_LOG2    0x10
#define MOD_TO_FRACT   0x20
d42 29
a70 1
bool do_common_optimization(exec_list *ir, bool linked, unsigned max_unroll_iterations);
d79 5
a83 1
bool do_dead_code(exec_list *instructions);
d87 1
d92 1
a95 1
bool do_mod_to_fract(exec_list *instructions);
a97 1
bool do_sub_to_add_neg(exec_list *instructions);
d103 1
d109 9
d119 5
@


1.1
log
@Initial revision
@
text
@d46 1
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d32 6
a37 9
#define SUB_TO_ADD_NEG     0x01
#define DIV_TO_MUL_RCP     0x02
#define EXP_TO_EXP2        0x04
#define POW_TO_EXP2        0x08
#define LOG_TO_LOG2        0x10
#define MOD_TO_FRACT       0x20
#define INT_DIV_TO_MUL_RCP 0x40
#define LRP_TO_ARITH       0x80
#define BITFIELD_INSERT_TO_BFM_BFI 0x100
d39 1
a39 29
/**
 * \see class lower_packing_builtins_visitor
 */
enum lower_packing_builtins_op {
   LOWER_PACK_UNPACK_NONE               = 0x0000,

   LOWER_PACK_SNORM_2x16                = 0x0001,
   LOWER_UNPACK_SNORM_2x16              = 0x0002,

   LOWER_PACK_UNORM_2x16                = 0x0004,
   LOWER_UNPACK_UNORM_2x16              = 0x0008,

   LOWER_PACK_HALF_2x16                 = 0x0010,
   LOWER_UNPACK_HALF_2x16               = 0x0020,

   LOWER_PACK_HALF_2x16_TO_SPLIT        = 0x0040,
   LOWER_UNPACK_HALF_2x16_TO_SPLIT      = 0x0080,

   LOWER_PACK_SNORM_4x8                 = 0x0100,
   LOWER_UNPACK_SNORM_4x8               = 0x0200,

   LOWER_PACK_UNORM_4x8                 = 0x0400,
   LOWER_UNPACK_UNORM_4x8               = 0x0800
};

bool do_common_optimization(exec_list *ir, bool linked,
			    bool uniform_locations_assigned,
			    unsigned max_unroll_iterations,
                            const struct gl_shader_compiler_options *options);
a45 1
bool do_copy_propagation_elements(exec_list *instructions);
d47 1
a47 5
void do_dead_builtin_varyings(struct gl_context *ctx,
                              gl_shader *producer, gl_shader *consumer,
                              unsigned num_tfeedback_decls,
                              class tfeedback_decl *tfeedback_decls);
bool do_dead_code(exec_list *instructions, bool uniform_locations_assigned);
a50 1
bool opt_flip_matrices(exec_list *instructions);
a54 1
bool opt_flatten_nested_if_blocks(exec_list *instructions);
d58 1
d61 1
a66 1
void lower_discard_flow(exec_list *instructions);
a71 9
bool lower_clip_distance(gl_shader *shader);
void lower_output_reads(exec_list *instructions);
bool lower_packing_builtins(exec_list *instructions, int op_mask);
void lower_ubo_reference(struct gl_shader *shader, exec_list *instructions);
void lower_packed_varyings(void *mem_ctx, unsigned location_base,
                           unsigned locations_used, ir_variable_mode mode,
                           gl_shader *shader);
bool lower_vector_insert(exec_list *instructions, bool lower_nonconstant_index);
void lower_named_interface_blocks(void *mem_ctx, gl_shader *shader);
a72 5
bool optimize_split_arrays(exec_list *instructions, bool linked);

ir_rvalue *
compare_index_block(exec_list *instructions, ir_variable *index,
		    unsigned base, unsigned components, void *mem_ctx);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d39 2
a40 4
#define BITFIELD_INSERT_TO_BFM_BFI 0x80
#define LDEXP_TO_ARITH     0x100
#define CARRY_TO_ARITH     0x200
#define BORROW_TO_ARITH    0x400
d69 2
a70 2
                            const struct gl_shader_compiler_options *options,
                            bool native_integers);
d72 1
a72 1
bool do_algebraic(exec_list *instructions, bool native_integers);
a78 1
bool do_cse(exec_list *instructions);
a98 1
bool do_vectorize(exec_list *instructions);
d113 1
a113 1
void lower_packed_varyings(void *mem_ctx,
d115 1
a115 1
                           unsigned gs_input_vertices, gl_shader *shader);
a119 1
bool lower_offset_arrays(exec_list *instructions);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a42 1
#define SAT_TO_CLAMP       0x800
d74 1
a74 3
bool do_rebalance_tree(exec_list *instructions);
bool do_algebraic(exec_list *instructions, bool native_integers,
                  const struct gl_shader_compiler_options *options);
a98 1
bool do_minmax_prune(exec_list *instructions);
a112 1
bool lower_const_arrays_to_uniforms(exec_list *instructions);
a124 4
void optimize_dead_builtin_variables(exec_list *instructions,
                                     enum ir_variable_mode other);

bool lower_vertex_id(gl_shader *shader);
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d43 1
d75 3
a77 1
bool do_algebraic(exec_list *instructions, bool native_integers);
d102 1
d117 1
d130 4
@


