head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.5
date	2015.12.23.05.17.44;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.58;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.02.29;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.10;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.22;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.31;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * \file opt_if_simplification.cpp
 *
 * Moves constant branches of if statements out to the surrounding
 * instruction stream, and inverts if conditionals to avoid empty
 * "then" blocks.
 */

#include "ir.h"

namespace {

class ir_if_simplification_visitor : public ir_hierarchical_visitor {
public:
   ir_if_simplification_visitor()
   {
      this->made_progress = false;
   }

   ir_visitor_status visit_leave(ir_if *);
   ir_visitor_status visit_enter(ir_assignment *);

   bool made_progress;
};

} /* unnamed namespace */

/* We only care about the top level "if" instructions, so don't
 * descend into expressions.
 */
ir_visitor_status
ir_if_simplification_visitor::visit_enter(ir_assignment *ir)
{
   (void) ir;
   return visit_continue_with_parent;
}

bool
do_if_simplification(exec_list *instructions)
{
   ir_if_simplification_visitor v;

   v.run(instructions);
   return v.made_progress;
}


ir_visitor_status
ir_if_simplification_visitor::visit_leave(ir_if *ir)
{
   /* If the if statement has nothing on either side, remove it. */
   if (ir->then_instructions.is_empty() &&
       ir->else_instructions.is_empty()) {
      ir->remove();
      this->made_progress = true;
      return visit_continue;
   }

   /* FINISHME: Ideally there would be a way to note that the condition results
    * FINISHME: in a constant before processing both of the other subtrees.
    * FINISHME: This can probably be done with some flags, but it would take
    * FINISHME: some work to get right.
    */
   ir_constant *condition_constant = ir->condition->constant_expression_value();
   if (condition_constant) {
      /* Move the contents of the one branch of the conditional
       * that matters out.
       */
      if (condition_constant->value.b[0]) {
         ir->insert_before(&ir->then_instructions);
      } else {
         ir->insert_before(&ir->else_instructions);
      }
      ir->remove();
      this->made_progress = true;
      return visit_continue;
   }

   /* Turn:
    *
    *     if (cond) {
    *     } else {
    *         do_work();
    *     }
    *
    * into :
    *
    *     if (!cond)
    *         do_work();
    *
    * which avoids control flow for "else" (which is usually more
    * expensive than normal operations), and the "not" can usually be
    * folded into the generation of "cond" anyway.
    */
   if (ir->then_instructions.is_empty()) {
      ir->condition = new(ralloc_parent(ir->condition))
	 ir_expression(ir_unop_logic_not, ir->condition);
      ir->else_instructions.move_nodes_to(&ir->then_instructions);
      this->made_progress = true;
   }

   return visit_continue;
}
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d93 1
a93 4
	 foreach_iter(exec_list_iterator, then_iter, ir->then_instructions) {
	    ir_instruction *then_ir = (ir_instruction *)then_iter.get();
	    ir->insert_before(then_ir);
	 }
d95 1
a95 4
	 foreach_iter(exec_list_iterator, else_iter, ir->else_instructions) {
	    ir_instruction *else_ir = (ir_instruction *)else_iter.get();
	    ir->insert_before(else_ir);
	 }
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d28 2
a29 1
 * instruction stream.
d34 2
d49 2
d57 1
d74 8
d104 24
@


1.1
log
@Initial revision
@
text
@d41 1
d45 9
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d28 1
a28 2
 * instruction stream, and inverts if conditionals to avoid empty
 * "then" blocks.
a32 2
namespace {

a40 1
   ir_visitor_status visit_enter(ir_assignment *);
a44 12
} /* unnamed namespace */

/* We only care about the top level "if" instructions, so don't
 * descend into expressions.
 */
ir_visitor_status
ir_if_simplification_visitor::visit_enter(ir_assignment *ir)
{
   (void) ir;
   return visit_continue_with_parent;
}

a57 8
   /* If the if statement has nothing on either side, remove it. */
   if (ir->then_instructions.is_empty() &&
       ir->else_instructions.is_empty()) {
      ir->remove();
      this->made_progress = true;
      return visit_continue;
   }

a79 24
      this->made_progress = true;
      return visit_continue;
   }

   /* Turn:
    *
    *     if (cond) {
    *     } else {
    *         do_work();
    *     }
    *
    * into :
    *
    *     if (!cond)
    *         do_work();
    *
    * which avoids control flow for "else" (which is usually more
    * expensive than normal operations), and the "not" can usually be
    * folded into the generation of "cond" anyway.
    */
   if (ir->then_instructions.is_empty()) {
      ir->condition = new(ralloc_parent(ir->condition))
	 ir_expression(ir_unop_logic_not, ir->condition);
      ir->else_instructions.move_nodes_to(&ir->then_instructions);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d93 4
a96 1
         ir->insert_before(&ir->then_instructions);
d98 4
a101 1
         ir->insert_before(&ir->else_instructions);
@


