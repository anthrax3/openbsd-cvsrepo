head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.9
date	2015.12.23.05.17.43;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.7;
commitid	4ry2gvZGMXkCUD2n;

1.7
date	2015.01.25.14.41.19;	author jsg;	state Exp;
branches;
next	1.6;
commitid	mcxB0JvoI9gTDYXU;

1.6
date	2014.07.09.21.08.57;	author jsg;	state Exp;
branches;
next	1.5;
commitid	WPD6rgPryPkvXOr9;

1.5
date	2013.10.05.09.53.55;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2013.09.05.14.02.25;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.16.21.19;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.10;	author mpi;	state dead;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.06;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.10.05.09.23.49;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.26;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.10.08;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.47.15;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         _mesa_glsl_parse
#define yylex           _mesa_glsl_lex
#define yyerror         _mesa_glsl_error
#define yydebug         _mesa_glsl_debug
#define yynerrs         _mesa_glsl_nerrs


/* Copy the first part of user declarations.  */
#line 1 "glsl_parser.yy" /* yacc.c:339  */

/*
 * Copyright Â© 2008, 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

#include "ast.h"
#include "glsl_parser_extras.h"
#include "glsl_types.h"
#include "main/context.h"

#undef yyerror

static void yyerror(YYLTYPE *loc, _mesa_glsl_parse_state *st, const char *msg)
{
   _mesa_glsl_error(loc, st, "%s", msg);
}

static int
_mesa_glsl_lex(YYSTYPE *val, YYLTYPE *loc, _mesa_glsl_parse_state *state)
{
   return _mesa_glsl_lexer_lex(val, loc, state->scanner);
}

static bool match_layout_qualifier(const char *s1, const char *s2,
                                   _mesa_glsl_parse_state *state)
{
   /* From the GLSL 1.50 spec, section 4.3.8 (Layout Qualifiers):
    *
    *     "The tokens in any layout-qualifier-id-list ... are not case
    *     sensitive, unless explicitly noted otherwise."
    *
    * The text "unless explicitly noted otherwise" appears to be
    * vacuous--no desktop GLSL spec (up through GLSL 4.40) notes
    * otherwise.
    *
    * However, the GLSL ES 3.00 spec says, in section 4.3.8 (Layout
    * Qualifiers):
    *
    *     "As for other identifiers, they are case sensitive."
    *
    * So we need to do a case-sensitive or a case-insensitive match,
    * depending on whether we are compiling for GLSL ES.
    */
   if (state->es_shader)
      return strcmp(s1, s2);
   else
      return strcasecmp(s1, s2);
}

#line 145 "glsl_parser.cpp" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 1
#endif

/* In a future release of Bison, this section will be replaced
   by #include "glsl_parser.h".  */
#ifndef YY__MESA_GLSL_SRC_GLSL_GLSL_PARSER_H_INCLUDED
# define YY__MESA_GLSL_SRC_GLSL_GLSL_PARSER_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int _mesa_glsl_debug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    ATTRIBUTE = 258,
    CONST_TOK = 259,
    BOOL_TOK = 260,
    FLOAT_TOK = 261,
    INT_TOK = 262,
    UINT_TOK = 263,
    BREAK = 264,
    CONTINUE = 265,
    DO = 266,
    ELSE = 267,
    FOR = 268,
    IF = 269,
    DISCARD = 270,
    RETURN = 271,
    SWITCH = 272,
    CASE = 273,
    DEFAULT = 274,
    BVEC2 = 275,
    BVEC3 = 276,
    BVEC4 = 277,
    IVEC2 = 278,
    IVEC3 = 279,
    IVEC4 = 280,
    UVEC2 = 281,
    UVEC3 = 282,
    UVEC4 = 283,
    VEC2 = 284,
    VEC3 = 285,
    VEC4 = 286,
    CENTROID = 287,
    IN_TOK = 288,
    OUT_TOK = 289,
    INOUT_TOK = 290,
    UNIFORM = 291,
    VARYING = 292,
    NOPERSPECTIVE = 293,
    FLAT = 294,
    SMOOTH = 295,
    MAT2X2 = 296,
    MAT2X3 = 297,
    MAT2X4 = 298,
    MAT3X2 = 299,
    MAT3X3 = 300,
    MAT3X4 = 301,
    MAT4X2 = 302,
    MAT4X3 = 303,
    MAT4X4 = 304,
    SAMPLER1D = 305,
    SAMPLER2D = 306,
    SAMPLER3D = 307,
    SAMPLERCUBE = 308,
    SAMPLER1DSHADOW = 309,
    SAMPLER2DSHADOW = 310,
    SAMPLERCUBESHADOW = 311,
    SAMPLER1DARRAY = 312,
    SAMPLER2DARRAY = 313,
    SAMPLER1DARRAYSHADOW = 314,
    SAMPLER2DARRAYSHADOW = 315,
    SAMPLERCUBEARRAY = 316,
    SAMPLERCUBEARRAYSHADOW = 317,
    ISAMPLER1D = 318,
    ISAMPLER2D = 319,
    ISAMPLER3D = 320,
    ISAMPLERCUBE = 321,
    ISAMPLER1DARRAY = 322,
    ISAMPLER2DARRAY = 323,
    ISAMPLERCUBEARRAY = 324,
    USAMPLER1D = 325,
    USAMPLER2D = 326,
    USAMPLER3D = 327,
    USAMPLERCUBE = 328,
    USAMPLER1DARRAY = 329,
    USAMPLER2DARRAY = 330,
    USAMPLERCUBEARRAY = 331,
    SAMPLER2DRECT = 332,
    ISAMPLER2DRECT = 333,
    USAMPLER2DRECT = 334,
    SAMPLER2DRECTSHADOW = 335,
    SAMPLERBUFFER = 336,
    ISAMPLERBUFFER = 337,
    USAMPLERBUFFER = 338,
    SAMPLER2DMS = 339,
    ISAMPLER2DMS = 340,
    USAMPLER2DMS = 341,
    SAMPLER2DMSARRAY = 342,
    ISAMPLER2DMSARRAY = 343,
    USAMPLER2DMSARRAY = 344,
    SAMPLEREXTERNALOES = 345,
    IMAGE1D = 346,
    IMAGE2D = 347,
    IMAGE3D = 348,
    IMAGE2DRECT = 349,
    IMAGECUBE = 350,
    IMAGEBUFFER = 351,
    IMAGE1DARRAY = 352,
    IMAGE2DARRAY = 353,
    IMAGECUBEARRAY = 354,
    IMAGE2DMS = 355,
    IMAGE2DMSARRAY = 356,
    IIMAGE1D = 357,
    IIMAGE2D = 358,
    IIMAGE3D = 359,
    IIMAGE2DRECT = 360,
    IIMAGECUBE = 361,
    IIMAGEBUFFER = 362,
    IIMAGE1DARRAY = 363,
    IIMAGE2DARRAY = 364,
    IIMAGECUBEARRAY = 365,
    IIMAGE2DMS = 366,
    IIMAGE2DMSARRAY = 367,
    UIMAGE1D = 368,
    UIMAGE2D = 369,
    UIMAGE3D = 370,
    UIMAGE2DRECT = 371,
    UIMAGECUBE = 372,
    UIMAGEBUFFER = 373,
    UIMAGE1DARRAY = 374,
    UIMAGE2DARRAY = 375,
    UIMAGECUBEARRAY = 376,
    UIMAGE2DMS = 377,
    UIMAGE2DMSARRAY = 378,
    IMAGE1DSHADOW = 379,
    IMAGE2DSHADOW = 380,
    IMAGE1DARRAYSHADOW = 381,
    IMAGE2DARRAYSHADOW = 382,
    COHERENT = 383,
    VOLATILE = 384,
    RESTRICT = 385,
    READONLY = 386,
    WRITEONLY = 387,
    ATOMIC_UINT = 388,
    STRUCT = 389,
    VOID_TOK = 390,
    WHILE = 391,
    IDENTIFIER = 392,
    TYPE_IDENTIFIER = 393,
    NEW_IDENTIFIER = 394,
    FLOATCONSTANT = 395,
    INTCONSTANT = 396,
    UINTCONSTANT = 397,
    BOOLCONSTANT = 398,
    FIELD_SELECTION = 399,
    LEFT_OP = 400,
    RIGHT_OP = 401,
    INC_OP = 402,
    DEC_OP = 403,
    LE_OP = 404,
    GE_OP = 405,
    EQ_OP = 406,
    NE_OP = 407,
    AND_OP = 408,
    OR_OP = 409,
    XOR_OP = 410,
    MUL_ASSIGN = 411,
    DIV_ASSIGN = 412,
    ADD_ASSIGN = 413,
    MOD_ASSIGN = 414,
    LEFT_ASSIGN = 415,
    RIGHT_ASSIGN = 416,
    AND_ASSIGN = 417,
    XOR_ASSIGN = 418,
    OR_ASSIGN = 419,
    SUB_ASSIGN = 420,
    INVARIANT = 421,
    LOWP = 422,
    MEDIUMP = 423,
    HIGHP = 424,
    SUPERP = 425,
    PRECISION = 426,
    VERSION_TOK = 427,
    EXTENSION = 428,
    LINE = 429,
    COLON = 430,
    EOL = 431,
    INTERFACE = 432,
    OUTPUT = 433,
    PRAGMA_DEBUG_ON = 434,
    PRAGMA_DEBUG_OFF = 435,
    PRAGMA_OPTIMIZE_ON = 436,
    PRAGMA_OPTIMIZE_OFF = 437,
    PRAGMA_INVARIANT_ALL = 438,
    LAYOUT_TOK = 439,
    ASM = 440,
    CLASS = 441,
    UNION = 442,
    ENUM = 443,
    TYPEDEF = 444,
    TEMPLATE = 445,
    THIS = 446,
    PACKED_TOK = 447,
    GOTO = 448,
    INLINE_TOK = 449,
    NOINLINE = 450,
    PUBLIC_TOK = 451,
    STATIC = 452,
    EXTERN = 453,
    EXTERNAL = 454,
    LONG_TOK = 455,
    SHORT_TOK = 456,
    DOUBLE_TOK = 457,
    HALF = 458,
    FIXED_TOK = 459,
    UNSIGNED = 460,
    INPUT_TOK = 461,
    OUPTUT = 462,
    HVEC2 = 463,
    HVEC3 = 464,
    HVEC4 = 465,
    DVEC2 = 466,
    DVEC3 = 467,
    DVEC4 = 468,
    FVEC2 = 469,
    FVEC3 = 470,
    FVEC4 = 471,
    SAMPLER3DRECT = 472,
    SIZEOF = 473,
    CAST = 474,
    NAMESPACE = 475,
    USING = 476,
    RESOURCE = 477,
    PATCH = 478,
    SAMPLE = 479,
    SUBROUTINE = 480,
    ERROR_TOK = 481,
    COMMON = 482,
    PARTITION = 483,
    ACTIVE = 484,
    FILTER = 485,
    ROW_MAJOR = 486,
    THEN = 487
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
{
#line 91 "glsl_parser.yy" /* yacc.c:355  */

   int n;
   float real;
   const char *identifier;

   struct ast_type_qualifier type_qualifier;

   ast_node *node;
   ast_type_specifier *type_specifier;
   ast_array_specifier *array_specifier;
   ast_fully_specified_type *fully_specified_type;
   ast_function *function;
   ast_parameter_declarator *parameter_declarator;
   ast_function_definition *function_definition;
   ast_compound_statement *compound_statement;
   ast_expression *expression;
   ast_declarator_list *declarator_list;
   ast_struct_specifier *struct_specifier;
   ast_declaration *declaration;
   ast_switch_body *switch_body;
   ast_case_label *case_label;
   ast_case_label_list *case_label_list;
   ast_case_statement *case_statement;
   ast_case_statement_list *case_statement_list;
   ast_interface_block *interface_block;

   struct {
      ast_node *cond;
      ast_expression *rest;
   } for_rest_statement;

   struct {
      ast_node *then_statement;
      ast_node *else_statement;
   } selection_rest_statement;

#line 455 "glsl_parser.cpp" /* yacc.c:355  */
};
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int _mesa_glsl_parse (struct _mesa_glsl_parse_state *state);

#endif /* !YY__MESA_GLSL_SRC_GLSL_GLSL_PARSER_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 483 "glsl_parser.cpp" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  5
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   5407

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  257
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  108
/* YYNRULES -- Number of rules.  */
#define YYNRULES  380
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  532

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   487

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   241,     2,     2,     2,   245,   248,     2,
     233,   234,   243,   239,   238,   240,   237,   244,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   252,   254,
     246,   253,   247,   251,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   235,     2,   236,   249,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   255,   250,   256,   242,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   295,   295,   294,   306,   308,   315,   325,   326,   327,
     328,   329,   342,   344,   348,   349,   350,   354,   363,   371,
     382,   383,   387,   394,   401,   408,   415,   422,   429,   430,
     436,   440,   447,   453,   462,   466,   470,   471,   480,   481,
     485,   486,   490,   496,   508,   512,   518,   526,   537,   538,
     542,   543,   547,   553,   565,   577,   578,   584,   590,   600,
     601,   602,   603,   607,   608,   614,   620,   629,   630,   636,
     645,   646,   652,   661,   662,   668,   674,   680,   689,   690,
     696,   705,   706,   715,   716,   725,   726,   735,   736,   745,
     746,   755,   756,   765,   766,   775,   776,   785,   786,   787,
     788,   789,   790,   791,   792,   793,   794,   795,   799,   803,
     819,   823,   828,   832,   837,   844,   848,   849,   853,   858,
     866,   880,   890,   904,   909,   923,   926,   934,   946,   959,
     964,   969,   978,   982,   983,   993,  1003,  1013,  1027,  1034,
    1044,  1054,  1064,  1074,  1089,  1096,  1107,  1114,  1115,  1125,
    1126,  1130,  1315,  1438,  1464,  1469,  1477,  1482,  1487,  1496,
    1501,  1502,  1503,  1504,  1505,  1523,  1536,  1564,  1587,  1602,
    1622,  1636,  1641,  1649,  1654,  1659,  1664,  1669,  1674,  1679,
    1684,  1689,  1695,  1700,  1708,  1714,  1720,  1734,  1749,  1750,
    1758,  1764,  1770,  1779,  1780,  1781,  1782,  1783,  1784,  1785,
    1786,  1787,  1788,  1789,  1790,  1791,  1792,  1793,  1794,  1795,
    1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,  1805,
    1806,  1807,  1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,
    1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,  1824,  1825,
    1826,  1827,  1828,  1829,  1830,  1831,  1832,  1833,  1834,  1835,
    1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,  1844,  1845,
    1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,  1854,  1855,
    1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,  1865,
    1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,  1875,
    1876,  1877,  1878,  1879,  1883,  1888,  1893,  1901,  1908,  1917,
    1922,  1930,  1949,  1954,  1962,  1968,  1977,  1978,  1982,  1989,
    1996,  2003,  2009,  2010,  2014,  2015,  2016,  2017,  2018,  2019,
    2023,  2030,  2029,  2043,  2044,  2048,  2054,  2063,  2073,  2085,
    2091,  2100,  2109,  2114,  2122,  2126,  2144,  2152,  2157,  2165,
    2170,  2178,  2186,  2194,  2202,  2210,  2218,  2226,  2233,  2240,
    2250,  2251,  2255,  2257,  2263,  2268,  2277,  2283,  2289,  2295,
    2301,  2310,  2311,  2312,  2313,  2317,  2331,  2335,  2346,  2443,
    2448,  2453,  2462,  2466,  2472,  2481,  2486,  2494,  2518,  2526,
    2534
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 1
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ATTRIBUTE", "CONST_TOK", "BOOL_TOK",
  "FLOAT_TOK", "INT_TOK", "UINT_TOK", "BREAK", "CONTINUE", "DO", "ELSE",
  "FOR", "IF", "DISCARD", "RETURN", "SWITCH", "CASE", "DEFAULT", "BVEC2",
  "BVEC3", "BVEC4", "IVEC2", "IVEC3", "IVEC4", "UVEC2", "UVEC3", "UVEC4",
  "VEC2", "VEC3", "VEC4", "CENTROID", "IN_TOK", "OUT_TOK", "INOUT_TOK",
  "UNIFORM", "VARYING", "NOPERSPECTIVE", "FLAT", "SMOOTH", "MAT2X2",
  "MAT2X3", "MAT2X4", "MAT3X2", "MAT3X3", "MAT3X4", "MAT4X2", "MAT4X3",
  "MAT4X4", "SAMPLER1D", "SAMPLER2D", "SAMPLER3D", "SAMPLERCUBE",
  "SAMPLER1DSHADOW", "SAMPLER2DSHADOW", "SAMPLERCUBESHADOW",
  "SAMPLER1DARRAY", "SAMPLER2DARRAY", "SAMPLER1DARRAYSHADOW",
  "SAMPLER2DARRAYSHADOW", "SAMPLERCUBEARRAY", "SAMPLERCUBEARRAYSHADOW",
  "ISAMPLER1D", "ISAMPLER2D", "ISAMPLER3D", "ISAMPLERCUBE",
  "ISAMPLER1DARRAY", "ISAMPLER2DARRAY", "ISAMPLERCUBEARRAY", "USAMPLER1D",
  "USAMPLER2D", "USAMPLER3D", "USAMPLERCUBE", "USAMPLER1DARRAY",
  "USAMPLER2DARRAY", "USAMPLERCUBEARRAY", "SAMPLER2DRECT",
  "ISAMPLER2DRECT", "USAMPLER2DRECT", "SAMPLER2DRECTSHADOW",
  "SAMPLERBUFFER", "ISAMPLERBUFFER", "USAMPLERBUFFER", "SAMPLER2DMS",
  "ISAMPLER2DMS", "USAMPLER2DMS", "SAMPLER2DMSARRAY", "ISAMPLER2DMSARRAY",
  "USAMPLER2DMSARRAY", "SAMPLEREXTERNALOES", "IMAGE1D", "IMAGE2D",
  "IMAGE3D", "IMAGE2DRECT", "IMAGECUBE", "IMAGEBUFFER", "IMAGE1DARRAY",
  "IMAGE2DARRAY", "IMAGECUBEARRAY", "IMAGE2DMS", "IMAGE2DMSARRAY",
  "IIMAGE1D", "IIMAGE2D", "IIMAGE3D", "IIMAGE2DRECT", "IIMAGECUBE",
  "IIMAGEBUFFER", "IIMAGE1DARRAY", "IIMAGE2DARRAY", "IIMAGECUBEARRAY",
  "IIMAGE2DMS", "IIMAGE2DMSARRAY", "UIMAGE1D", "UIMAGE2D", "UIMAGE3D",
  "UIMAGE2DRECT", "UIMAGECUBE", "UIMAGEBUFFER", "UIMAGE1DARRAY",
  "UIMAGE2DARRAY", "UIMAGECUBEARRAY", "UIMAGE2DMS", "UIMAGE2DMSARRAY",
  "IMAGE1DSHADOW", "IMAGE2DSHADOW", "IMAGE1DARRAYSHADOW",
  "IMAGE2DARRAYSHADOW", "COHERENT", "VOLATILE", "RESTRICT", "READONLY",
  "WRITEONLY", "ATOMIC_UINT", "STRUCT", "VOID_TOK", "WHILE", "IDENTIFIER",
  "TYPE_IDENTIFIER", "NEW_IDENTIFIER", "FLOATCONSTANT", "INTCONSTANT",
  "UINTCONSTANT", "BOOLCONSTANT", "FIELD_SELECTION", "LEFT_OP", "RIGHT_OP",
  "INC_OP", "DEC_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP",
  "OR_OP", "XOR_OP", "MUL_ASSIGN", "DIV_ASSIGN", "ADD_ASSIGN",
  "MOD_ASSIGN", "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN",
  "OR_ASSIGN", "SUB_ASSIGN", "INVARIANT", "LOWP", "MEDIUMP", "HIGHP",
  "SUPERP", "PRECISION", "VERSION_TOK", "EXTENSION", "LINE", "COLON",
  "EOL", "INTERFACE", "OUTPUT", "PRAGMA_DEBUG_ON", "PRAGMA_DEBUG_OFF",
  "PRAGMA_OPTIMIZE_ON", "PRAGMA_OPTIMIZE_OFF", "PRAGMA_INVARIANT_ALL",
  "LAYOUT_TOK", "ASM", "CLASS", "UNION", "ENUM", "TYPEDEF", "TEMPLATE",
  "THIS", "PACKED_TOK", "GOTO", "INLINE_TOK", "NOINLINE", "PUBLIC_TOK",
  "STATIC", "EXTERN", "EXTERNAL", "LONG_TOK", "SHORT_TOK", "DOUBLE_TOK",
  "HALF", "FIXED_TOK", "UNSIGNED", "INPUT_TOK", "OUPTUT", "HVEC2", "HVEC3",
  "HVEC4", "DVEC2", "DVEC3", "DVEC4", "FVEC2", "FVEC3", "FVEC4",
  "SAMPLER3DRECT", "SIZEOF", "CAST", "NAMESPACE", "USING", "RESOURCE",
  "PATCH", "SAMPLE", "SUBROUTINE", "ERROR_TOK", "COMMON", "PARTITION",
  "ACTIVE", "FILTER", "ROW_MAJOR", "THEN", "'('", "')'", "'['", "']'",
  "'.'", "','", "'+'", "'-'", "'!'", "'~'", "'*'", "'/'", "'%'", "'<'",
  "'>'", "'&'", "'^'", "'|'", "'?'", "':'", "'='", "';'", "'{'", "'}'",
  "$accept", "translation_unit", "$@@1", "version_statement",
  "pragma_statement", "extension_statement_list", "any_identifier",
  "extension_statement", "external_declaration_list",
  "variable_identifier", "primary_expression", "postfix_expression",
  "integer_expression", "function_call", "function_call_or_method",
  "function_call_generic", "function_call_header_no_parameters",
  "function_call_header_with_parameters", "function_call_header",
  "function_identifier", "method_call_generic",
  "method_call_header_no_parameters", "method_call_header_with_parameters",
  "method_call_header", "unary_expression", "unary_operator",
  "multiplicative_expression", "additive_expression", "shift_expression",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_xor_expression",
  "logical_or_expression", "conditional_expression",
  "assignment_expression", "assignment_operator", "expression",
  "constant_expression", "declaration", "function_prototype",
  "function_declarator", "function_header_with_parameters",
  "function_header", "parameter_declarator", "parameter_declaration",
  "parameter_qualifier", "parameter_direction_qualifier",
  "parameter_type_specifier", "init_declarator_list", "single_declaration",
  "fully_specified_type", "layout_qualifier", "layout_qualifier_id_list",
  "integer_constant", "layout_qualifier_id",
  "interface_block_layout_qualifier", "interpolation_qualifier",
  "type_qualifier", "auxiliary_storage_qualifier", "storage_qualifier",
  "array_specifier", "type_specifier", "type_specifier_nonarray",
  "basic_type_specifier_nonarray", "precision_qualifier",
  "struct_specifier", "struct_declaration_list", "struct_declaration",
  "struct_declarator_list", "struct_declarator", "initializer",
  "initializer_list", "declaration_statement", "statement",
  "simple_statement", "compound_statement", "$@@2",
  "statement_no_new_scope", "compound_statement_no_new_scope",
  "statement_list", "expression_statement", "selection_statement",
  "selection_rest_statement", "condition", "switch_statement",
  "switch_body", "case_label", "case_label_list", "case_statement",
  "case_statement_list", "iteration_statement", "for_init_statement",
  "conditionopt", "for_rest_statement", "jump_statement",
  "external_declaration", "function_definition", "interface_block",
  "basic_interface_block", "interface_qualifier", "instance_name_opt",
  "member_list", "member_declaration", "layout_defaults", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    40,    41,    91,    93,    46,    44,    43,
      45,    33,   126,    42,    47,    37,    60,    62,    38,    94,
     124,    63,    58,    61,    59,   123,   125
};
# endif

#define YYPACT_NINF -393

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-393)))

#define YYTABLE_NINF -372

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     -85,   -88,    33,  -393,   -94,  -393,  -133,  -393,  -393,  -393,
    -393,   -80,   -75,  4754,  -393,  -393,   -67,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,    12,    19,    36,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -115,  -393,  -393,   261,  -393,  -393,  -393,    41,
     -64,   -48,    24,    29,    37,   -51,  -393,  -393,  4754,  -393,
    -132,   -41,   -23,     1,  -147,  -393,    86,    35,  5064,  5269,
    5064,  5064,  -393,    -6,  -393,  5064,  -393,  -393,  -393,  -393,
    -393,    88,  -393,   -75,  4943,   -24,  -393,  -393,  -393,  -393,
    -393,  5064,  -393,  5064,  -393,  5269,  -393,  -393,  -393,  -393,
    -393,   -83,  -393,  -393,   517,  -393,  -393,    17,    17,  -393,
    -393,  -393,  -393,  5269,    17,    17,   -75,  -393,    10,    27,
    -204,    38,  -125,  -121,  -113,  -393,  -393,  -393,  -393,  -393,
    -393,  3639,    15,  -393,     2,    69,   -75,  1265,  -393,  4943,
      22,  -393,  -393,    13,  -148,  -393,  -393,    23,    25,  1999,
      45,    50,    31,  3176,    53,    54,  -393,  -393,  -393,  -393,
    -393,  4085,  4085,  4085,  -393,  -393,  -393,  -393,  -393,    34,
    -393,    56,  -393,  -101,  -393,  -393,  -393,    57,  -145,  4308,
      63,   181,  4085,    -3,   -96,    42,  -108,    66,    55,    60,
      52,   151,   152,  -126,  -393,  -393,  -140,  -393,    59,  5083,
      77,  -393,  -393,  -393,  -393,   771,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,   -75,  -393,  -393,  -187,  2953,
    -175,  -393,  -393,  -393,  -393,  -393,  -393,  -393,    75,  -393,
    3862,  4943,  -393,    -6,  -138,  -393,  -393,  -393,  1502,  -393,
      79,  -393,   -83,  -393,  -393,   176,  2492,  4085,  -393,  -393,
    -127,  4085,  3416,  -393,  -393,  -117,  -393,  1999,  -393,  -393,
    4085,    86,  -393,  -393,  4085,    80,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  4085,
    -393,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,
    4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,
    4085,  4085,  -393,  -393,  -393,    -6,  2953,  -159,  2953,  -393,
    -393,  2953,  -393,  -393,    81,   -75,    62,  4943,    15,   -75,
    -393,  -393,  -393,  -393,  -393,  -393,    83,  -393,  -393,  3416,
     -89,  -393,   -58,    82,   -75,    85,  -393,  1025,    90,    82,
    -393,    89,  -393,    87,   -40,  4531,  -393,  -393,  -393,  -393,
    -393,    -3,    -3,   -96,   -96,    42,    42,    42,    42,  -108,
    -108,    66,    55,    60,    52,   151,   152,  -173,  -393,    15,
    -393,  2953,  -393,  -161,  -393,  -393,  -112,   185,  -393,  -393,
    4085,  -393,    73,    94,  1999,    76,    95,  2252,  -393,  -393,
    -393,  -393,  -393,  4085,    96,  -393,  4085,  -393,  2730,  -393,
    -393,    -6,    93,   -39,  4085,  2252,   321,  -393,   -10,  -393,
    2953,  -393,  -393,  -393,  -393,  -393,  -393,  -393,    15,  -393,
      98,    82,  -393,  1999,  4085,    97,  -393,  -393,  1746,  1999,
      -8,  -393,  -393,  -393,  -139,  -393,  -393,  -393,  -393,  -393,
    1999,  -393
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       4,     0,     0,    12,     0,     1,     2,    14,    15,    16,
       5,     0,     0,     0,    13,     6,     0,   174,   173,   197,
     194,   195,   196,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   198,   199,   200,   171,   176,   177,   178,   175,
     158,   157,   156,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   222,   223,   225,   226,   228,   229,
     230,   231,   232,   234,   235,   236,   237,   239,   240,   241,
     242,   244,   245,   246,   248,   249,   250,   251,   253,   221,
     238,   247,   227,   233,   243,   252,   254,   255,   256,   257,
     258,   259,   224,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   179,   180,   181,   182,
     183,   293,     0,   193,   192,   159,   296,   295,   294,     0,
       0,     0,     0,     0,     0,     0,   172,   363,     3,   362,
       0,     0,   117,   125,     0,   133,   138,   163,   162,     0,
     160,   161,   144,   188,   190,   164,   191,    18,   361,   114,
     366,     0,   364,     0,     0,     0,   176,   177,   178,    20,
      21,   159,   143,   163,   165,     0,     7,     8,     9,    10,
      11,     0,    19,   111,     0,   365,   115,   125,   125,   129,
     130,   131,   118,     0,   125,   125,     0,   112,    14,    16,
     139,     0,   176,   177,   178,   167,   367,   166,   145,   168,
     169,     0,   189,   170,     0,     0,     0,     0,   299,     0,
       0,   155,   154,   151,     0,   147,   153,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,    23,    24,    26,
      47,     0,     0,     0,    59,    60,    61,    62,   329,   321,
     325,    22,    28,    55,    30,    35,    36,     0,     0,    41,
       0,    63,     0,    67,    70,    73,    78,    81,    83,    85,
      87,    89,    91,    93,    95,   108,     0,   311,     0,   163,
     144,   314,   327,   313,   312,     0,   315,   316,   317,   318,
     319,   119,   126,   123,   124,   132,   127,   128,   134,     0,
     140,   120,   379,   380,   378,   184,    63,   110,     0,    45,
       0,     0,    17,   304,     0,   302,   298,   300,     0,   113,
       0,   146,     0,   357,   356,     0,     0,     0,   360,   358,
       0,     0,     0,    56,    57,     0,   320,     0,    32,    33,
       0,     0,    39,    38,     0,   193,    42,    44,    98,    99,
     101,   100,   103,   104,   105,   106,   107,   102,    97,     0,
      58,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,   326,   328,   121,     0,   135,     0,   306,
     142,     0,   185,   186,     0,     0,     0,   375,   305,     0,
     301,   297,   149,   150,   152,   148,     0,   351,   350,   353,
       0,   359,     0,   334,     0,     0,    27,     0,     0,    34,
      31,     0,    37,     0,     0,    51,    43,    96,    64,    65,
      66,    68,    69,    71,    72,    76,    77,    74,    75,    79,
      80,    82,    84,    86,    88,    90,    92,     0,   109,   122,
     137,     0,   309,     0,   141,   187,     0,   372,   376,   303,
       0,   352,     0,     0,     0,     0,     0,     0,   322,    29,
      54,    49,    48,     0,   193,    52,     0,   136,     0,   307,
     377,   373,     0,     0,   354,     0,   333,   331,     0,   336,
       0,   324,   347,   323,    53,    94,   308,   310,   374,   368,
       0,   355,   349,     0,     0,     0,   337,   341,     0,   345,
       0,   335,   348,   332,     0,   340,   343,   342,   344,   338,
     346,   339
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -393,  -393,  -393,  -393,  -393,  -393,     0,  -393,  -393,  -119,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,   -14,  -393,  -141,  -124,  -111,  -110,
     -49,   -35,   -33,   -32,   -34,   -12,  -393,  -196,  -239,  -393,
    -240,    61,     6,     7,  -393,  -393,  -393,  -393,   159,   -27,
    -393,  -393,  -393,  -393,  -168,   -11,  -393,  -393,    44,  -393,
    -393,   -77,  -393,  -393,  -203,   -13,  -393,  -393,    58,  -393,
     149,  -210,   -26,   -29,  -369,  -393,    46,  -238,  -392,  -393,
    -393,  -109,   233,    40,    48,  -393,  -393,   -31,  -393,  -393,
    -123,  -393,  -135,  -393,  -393,  -393,  -393,  -393,  -393,   248,
    -393,  -393,  -142,  -393,  -393,    -5,  -393,  -393
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     2,    13,     3,   147,     6,   323,    14,   148,   261,
     262,   263,   428,   264,   265,   266,   267,   268,   269,   270,
     432,   433,   434,   435,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   369,
     286,   318,   287,   288,   151,   152,   153,   303,   202,   203,
     204,   304,   154,   155,   156,   183,   234,   414,   235,   236,
     158,   159,   160,   161,   222,   319,   163,   164,   165,   166,
     227,   228,   324,   325,   400,   463,   291,   292,   293,   294,
     347,   502,   503,   295,   296,   297,   497,   425,   298,   499,
     517,   518,   519,   520,   299,   419,   472,   473,   300,   167,
     168,   169,   170,   171,   492,   406,   407,   172
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     162,   335,   157,   340,    11,   198,   226,   310,   514,   515,
     514,   515,    16,   345,  -369,   216,   182,   327,  -370,   149,
     150,   198,     7,     8,     9,   317,  -371,   460,   389,   462,
     356,   221,   464,     5,   199,   200,   201,   211,    17,    18,
      12,   378,   379,     7,     8,     9,   348,   349,   221,   309,
     199,   200,   201,     4,     7,     8,     9,   394,   184,   226,
     320,   226,     7,     8,     9,   391,   396,    35,   212,   213,
     399,   214,    39,    40,    41,    42,   320,   488,   401,   486,
     215,   217,    10,   219,   220,   501,   331,     1,   223,   353,
     332,   206,   487,   354,   461,   489,    15,   420,   391,   391,
     409,   422,   423,   501,   184,   397,   215,   207,   173,   231,
     429,   391,   186,   531,   392,   436,   410,   426,   327,   507,
     408,   391,   193,   194,   317,   390,   409,   421,   187,   312,
     437,   521,   175,   313,   350,   162,   351,   157,   380,   381,
     174,   314,   490,   374,   375,   474,   218,   216,   232,   391,
     457,  -369,   458,   405,   149,   150,   210,   399,  -370,   399,
     226,   162,   399,   126,   127,   128,   129,   130,   136,   137,
     138,   302,   230,   225,   424,  -371,   475,   306,   307,   423,
     391,   290,   191,   289,   136,   137,   138,   376,   377,   394,
     305,   233,   459,   196,   482,   510,   485,   185,   483,   391,
     188,   181,   136,   137,   138,   189,   308,   316,   136,   137,
     138,   205,   215,   190,   162,   197,   162,   382,   383,   145,
     412,   413,   399,   208,     8,   209,   290,   224,   289,   221,
     493,   229,   431,   441,   442,  -116,   496,   343,   344,   405,
     371,   372,   373,   -20,   504,   322,   516,   505,   529,   399,
     320,   424,   443,   444,   511,   205,   205,   321,   370,   146,
     -21,   399,   205,   205,    17,    18,   330,   445,   446,   447,
     448,   311,   449,   450,   524,   523,   329,   333,   336,   334,
     526,   528,   290,   337,   289,   338,   341,   342,   508,   -46,
     346,   352,   528,    35,   176,   177,   357,   178,    39,    40,
      41,    42,   386,   384,   387,   395,   316,   388,   162,   385,
     -45,   402,   416,   193,   -40,   162,   470,   465,   467,   477,
     391,   481,   480,   290,   491,   289,   479,   494,   495,   290,
     -50,   498,   233,   513,   290,   451,   289,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   509,   500,   525,
     452,   430,   522,   453,   455,   454,   301,   438,   439,   440,
     316,   316,   316,   316,   316,   316,   316,   316,   316,   316,
     316,   316,   316,   316,   316,   316,   415,   456,   328,   466,
     469,   404,   417,   195,   418,   530,   512,   427,   471,   126,
     127,   128,   129,   130,   162,   527,   192,     0,   179,     0,
     180,     0,   468,     0,     0,     0,   290,     0,     0,     0,
       0,     0,     0,     0,   290,     0,   289,     0,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   181,   136,   137,
     138,     0,     0,     0,   368,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   145,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   290,     0,   289,   290,     0,   289,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   290,     0,   289,   146,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     290,     0,   289,     0,     0,   290,   290,   289,   289,     0,
       0,     0,     0,     0,     0,     0,     0,   290,     0,   289,
      17,    18,    19,    20,    21,    22,   237,   238,   239,     0,
     240,   241,   242,   243,   244,     0,     0,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,     0,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,     0,     0,     0,     0,   126,   127,   128,   129,   130,
     131,   132,   133,   245,   179,   134,   180,   246,   247,   248,
     249,   250,     0,     0,   251,   252,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   135,   136,   137,   138,     0,   139,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   145,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   146,     0,     0,     0,     0,     0,     0,     0,     0,
     253,     0,     0,     0,     0,     0,   254,   255,   256,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   258,   259,   260,    17,    18,    19,    20,    21,    22,
     237,   238,   239,     0,   240,   241,   242,   243,   244,     0,
       0,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,     0,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,     0,     0,     0,     0,   126,
     127,   128,   129,   130,   131,   132,   133,   245,   179,   134,
     180,   246,   247,   248,   249,   250,     0,     0,   251,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   135,   136,   137,
     138,     0,   139,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   145,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   146,     0,     0,     0,     0,
       0,     0,     0,     0,   253,     0,     0,     0,     0,     0,
     254,   255,   256,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   258,   259,   393,    17,    18,
      19,    20,    21,    22,   237,   238,   239,     0,   240,   241,
     242,   243,   244,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
       0,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,     0,
       0,     0,     0,   126,   127,   128,   129,   130,   131,   132,
     133,   245,   179,   134,   180,   246,   247,   248,   249,   250,
       0,     0,   251,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   135,   136,   137,   138,     0,   139,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   145,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   146,
       0,     0,     0,     0,     0,     0,     0,     0,   253,     0,
       0,     0,     0,     0,   254,   255,   256,   257,    17,    18,
      19,    20,    21,    22,     0,     0,     0,     0,     0,   258,
     259,   478,     0,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,   176,   177,
       0,   178,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,     0,
       0,     0,     0,   126,   127,   128,   129,   130,   131,   132,
     133,     0,     0,   134,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   181,   136,   137,   138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   145,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   146,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    17,    18,    19,    20,    21,
      22,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   326,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,   176,   177,     0,   178,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
     126,   127,   128,   129,   130,   131,   132,   133,     0,     0,
     134,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   181,   136,
     137,   138,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   146,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    17,
      18,    19,    20,    21,    22,   237,   238,   239,   411,   240,
     241,   242,   243,   244,   514,   515,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,     0,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,   126,   127,   128,   129,   130,   131,
     132,   133,   245,   179,   134,   180,   246,   247,   248,   249,
     250,     0,     0,   251,   252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   135,   136,   137,   138,     0,   139,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     145,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     146,     0,     0,     0,     0,     0,     0,     0,     0,   253,
       0,     0,     0,     0,     0,   254,   255,   256,   257,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     258,   259,    17,    18,    19,    20,    21,    22,   237,   238,
     239,     0,   240,   241,   242,   243,   244,     0,     0,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,     0,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,     0,     0,     0,     0,   126,   127,   128,
     129,   130,   131,   132,   133,   245,   179,   134,   180,   246,
     247,   248,   249,   250,     0,     0,   251,   252,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   135,   136,   137,   138,     0,
     139,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   145,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   146,     0,     0,     0,     0,     0,     0,
       0,     0,   253,     0,     0,     0,     0,     0,   254,   255,
     256,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   258,   259,    17,    18,    19,    20,    21,
      22,   237,   238,   239,     0,   240,   241,   242,   243,   244,
       0,     0,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,     0,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
     126,   127,   128,   129,   130,   131,   132,   133,   245,   179,
     134,   180,   246,   247,   248,   249,   250,     0,     0,   251,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   135,   136,
     137,   138,     0,   139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   146,     0,     0,     0,
       0,     0,     0,     0,     0,   253,     0,     0,     0,     0,
       0,   254,   255,   256,   257,    17,    18,    19,    20,    21,
      22,     0,     0,     0,     0,     0,   258,   194,     0,     0,
       0,     0,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,     0,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
     126,   127,   128,   129,   130,   131,   132,   133,     0,   179,
     134,   180,   246,   247,   248,   249,   250,     0,     0,   251,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   135,   136,
     137,   138,     0,   139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   146,     0,     0,     0,
       0,     0,     0,     0,     0,   253,     0,     0,     0,     0,
       0,   254,   255,   256,   257,    19,    20,    21,    22,     0,
       0,     0,     0,     0,     0,     0,   258,     0,     0,     0,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,   133,     0,   179,   134,   180,
     246,   247,   248,   249,   250,     0,     0,   251,   252,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    19,    20,
      21,    22,     0,   253,     0,     0,     0,     0,     0,   254,
     255,   256,   257,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,   398,   506,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,   133,     0,
     179,   134,   180,   246,   247,   248,   249,   250,     0,     0,
     251,   252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    19,    20,    21,    22,     0,   253,     0,     0,     0,
       0,     0,   254,   255,   256,   257,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   398,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,   133,     0,   179,   134,   180,   246,   247,   248,   249,
     250,     0,     0,   251,   252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   253,
       0,     0,     0,     0,     0,   254,   255,   256,   257,    17,
      18,    19,    20,    21,    22,     0,     0,     0,     0,     0,
     339,     0,     0,     0,     0,     0,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,   176,
     177,     0,   178,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,   126,   127,   128,   129,   130,   131,
     132,   133,     0,   179,   134,   180,   246,   247,   248,   249,
     250,     0,     0,   251,   252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   181,   136,   137,   138,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     145,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     146,     0,     0,     0,    19,    20,    21,    22,     0,   253,
       0,     0,     0,     0,     0,   254,   255,   256,   257,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,   133,     0,   179,   134,   180,   246,
     247,   248,   249,   250,     0,     0,   251,   252,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    19,    20,    21,
      22,     0,   253,     0,     0,   315,     0,     0,   254,   255,
     256,   257,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,   133,     0,   179,
     134,   180,   246,   247,   248,   249,   250,     0,     0,   251,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      19,    20,    21,    22,     0,   253,     0,     0,   403,     0,
       0,   254,   255,   256,   257,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
     133,     0,   179,   134,   180,   246,   247,   248,   249,   250,
       0,     0,   251,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    19,    20,    21,    22,     0,   253,     0,
       0,     0,     0,     0,   254,   255,   256,   257,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,   355,     0,   179,   134,   180,   246,   247,
     248,   249,   250,     0,     0,   251,   252,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    19,    20,    21,    22,
       0,   253,     0,     0,     0,     0,     0,   254,   255,   256,
     257,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,   132,   484,     0,   179,   134,
     180,   246,   247,   248,   249,   250,     0,     0,   251,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    17,    18,    19,
      20,    21,    22,     0,   253,     0,     0,     0,     0,     0,
     254,   255,   256,   257,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,     0,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,     0,     0,
       0,     0,   126,   127,   128,   129,   130,   131,   132,   133,
       0,     0,   134,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     135,   136,   137,   138,     0,   139,     0,     0,     0,     0,
       0,     0,     0,   140,   141,   142,   143,   144,   145,     0,
       0,     0,     0,     0,     0,     0,    17,    18,    19,    20,
      21,    22,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,   176,   177,   146,   178,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,    17,    18,     0,
       0,   126,   127,   128,   129,   130,   131,   132,   133,     0,
       0,   134,     0,     0,     0,     0,    17,    18,     0,     0,
       0,     0,     0,     0,     0,     0,    35,   176,   177,     0,
     178,    39,    40,    41,    42,     0,     0,     0,     0,   181,
     136,   137,   138,     0,     0,    35,    36,    37,     0,    38,
      39,    40,    41,    42,     0,     0,     0,   145,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   146,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   126,   127,   128,   129,   130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   126,   127,   128,   129,   130,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     181,   136,   137,   138,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   145,   181,
     136,   137,   138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   145,     0,     0,
       0,     0,     0,     0,    19,    20,    21,    22,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   146,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,   146,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,   133,     0,     0,   134
};

static const yytype_int16 yycheck[] =
{
      13,   239,    13,   243,     4,     4,   174,   210,    18,    19,
      18,    19,    12,   253,   139,   157,   135,   227,   139,    13,
      13,     4,   137,   138,   139,   221,   139,   396,   154,   398,
     269,   235,   401,     0,    33,    34,    35,   156,     3,     4,
     173,   149,   150,   137,   138,   139,   147,   148,   235,   253,
      33,    34,    35,   141,   137,   138,   139,   295,   135,   227,
     235,   229,   137,   138,   139,   238,   253,    32,    33,    34,
     309,    36,    37,    38,    39,    40,   235,   238,   253,   252,
     157,   158,   176,   160,   161,   477,   234,   172,   165,   234,
     238,   238,   461,   238,   253,   256,   176,   337,   238,   238,
     238,   341,   342,   495,   181,   308,   183,   254,   175,   192,
     350,   238,   176,   252,   254,   354,   254,   234,   328,   488,
     323,   238,   254,   255,   320,   251,   238,   254,   176,   254,
     369,   500,   132,   254,   235,   148,   237,   148,   246,   247,
     255,   254,   254,   239,   240,   234,   159,   289,   231,   238,
     390,   139,   391,   321,   148,   148,   156,   396,   139,   398,
     328,   174,   401,   128,   129,   130,   131,   132,   167,   168,
     169,   198,   185,   173,   342,   139,   234,   204,   205,   419,
     238,   194,   233,   194,   167,   168,   169,   145,   146,   427,
     203,   191,   395,   234,   234,   234,   435,   139,   238,   238,
     176,   166,   167,   168,   169,   176,   206,   221,   167,   168,
     169,   153,   289,   176,   227,   238,   229,   151,   152,   184,
     141,   142,   461,   137,   138,   139,   239,   139,   239,   235,
     470,   255,   351,   374,   375,   234,   474,   251,   252,   407,
     243,   244,   245,   233,   483,   176,   256,   486,   256,   488,
     235,   419,   376,   377,   494,   197,   198,   255,   272,   224,
     233,   500,   204,   205,     3,     4,   253,   378,   379,   380,
     381,   233,   382,   383,   514,   513,   254,   254,   233,   254,
     518,   519,   295,   233,   295,   254,   233,   233,   491,   233,
     256,   234,   530,    32,    33,    34,   233,    36,    37,    38,
      39,    40,   250,   248,   153,   305,   320,   155,   321,   249,
     233,   236,   136,   254,   234,   328,   233,   236,   256,   234,
     238,   234,   233,   336,   139,   336,   236,   254,   234,   342,
     234,   255,   332,    12,   347,   384,   347,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   254,   253,   252,
     385,   351,   254,   386,   388,   387,   197,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   332,   389,   229,   405,
     409,   320,   336,   150,   336,   520,   495,   347,   419,   128,
     129,   130,   131,   132,   407,   518,   148,    -1,   137,    -1,
     139,    -1,   407,    -1,    -1,    -1,   419,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   427,    -1,   427,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   424,    -1,    -1,   166,   167,   168,
     169,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   474,    -1,   474,   477,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   495,    -1,   495,   224,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     513,    -1,   513,    -1,    -1,   518,   519,   518,   519,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,   530,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    -1,
      13,    14,    15,    16,    17,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,    -1,    -1,    -1,    -1,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   166,   167,   168,   169,    -1,   171,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     233,    -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   254,   255,   256,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    -1,    13,    14,    15,    16,    17,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,    -1,    -1,   147,   148,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,   168,
     169,    -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,
     239,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   254,   255,   256,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    -1,    13,    14,
      15,    16,    17,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
      -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   166,   167,   168,   169,    -1,   171,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,
      -1,    -1,    -1,    -1,   239,   240,   241,   242,     3,     4,
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,   254,
     255,   256,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,   128,   129,   130,   131,   132,   133,   134,
     135,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,
       8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   256,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,   131,   132,   133,   134,   135,    -1,    -1,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,
     168,   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,   256,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   166,   167,   168,   169,    -1,   171,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     254,   255,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    -1,    13,    14,    15,    16,    17,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,    -1,    -1,   147,   148,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   166,   167,   168,   169,    -1,
     171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,   239,   240,
     241,   242,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   254,   255,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    -1,    13,    14,    15,    16,    17,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,    -1,    -1,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,
     168,   169,    -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,
      -1,   239,   240,   241,   242,     3,     4,     5,     6,     7,
       8,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,   140,   141,   142,   143,   144,    -1,    -1,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,
     168,   169,    -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,
      -1,   239,   240,   241,   242,     5,     6,     7,     8,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,   141,   142,   143,   144,    -1,    -1,   147,   148,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,
       7,     8,    -1,   233,    -1,    -1,    -1,    -1,    -1,   239,
     240,   241,   242,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,   141,   142,   143,   144,    -1,    -1,
     147,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     5,     6,     7,     8,    -1,   233,    -1,    -1,    -1,
      -1,    -1,   239,   240,   241,   242,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,   255,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,     3,
       4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
     254,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,    -1,    -1,    -1,     5,     6,     7,     8,    -1,   233,
      -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
     141,   142,   143,   144,    -1,    -1,   147,   148,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,
       8,    -1,   233,    -1,    -1,   236,    -1,    -1,   239,   240,
     241,   242,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,   141,   142,   143,   144,    -1,    -1,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,     6,     7,     8,    -1,   233,    -1,    -1,   236,    -1,
      -1,   239,   240,   241,   242,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,   141,   142,   143,   144,
      -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     5,     6,     7,     8,    -1,   233,    -1,
      -1,    -1,    -1,    -1,   239,   240,   241,   242,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,   141,
     142,   143,   144,    -1,    -1,   147,   148,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,     8,
      -1,   233,    -1,    -1,    -1,    -1,    -1,   239,   240,   241,
     242,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,   141,   142,   143,   144,    -1,    -1,   147,   148,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
       6,     7,     8,    -1,   233,    -1,    -1,    -1,    -1,    -1,
     239,   240,   241,   242,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,    -1,    -1,
      -1,    -1,   128,   129,   130,   131,   132,   133,   134,   135,
      -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     166,   167,   168,   169,    -1,   171,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   224,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,     3,     4,    -1,
      -1,   128,   129,   130,   131,   132,   133,   134,   135,    -1,
      -1,   138,    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    33,    34,    -1,
      36,    37,    38,    39,    40,    -1,    -1,    -1,    -1,   166,
     167,   168,   169,    -1,    -1,    32,    33,    34,    -1,    36,
      37,    38,    39,    40,    -1,    -1,    -1,   184,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,   130,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   166,
     167,   168,   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,
      -1,    -1,    -1,    -1,     5,     6,     7,     8,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   134,   135,    -1,    -1,   138
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   172,   258,   260,   141,     0,   262,   137,   138,   139,
     176,   263,   173,   259,   264,   176,   263,     3,     4,     5,
       6,     7,     8,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   128,   129,   130,   131,
     132,   133,   134,   135,   138,   166,   167,   168,   169,   171,
     179,   180,   181,   182,   183,   184,   224,   261,   265,   299,
     300,   301,   302,   303,   309,   310,   311,   312,   317,   318,
     319,   320,   322,   323,   324,   325,   326,   356,   357,   358,
     359,   360,   364,   175,   255,   263,    33,    34,    36,   137,
     139,   166,   266,   312,   318,   325,   176,   176,   176,   176,
     176,   233,   356,   254,   255,   339,   234,   238,     4,    33,
      34,    35,   305,   306,   307,   325,   238,   254,   137,   139,
     263,   266,    33,    34,    36,   318,   359,   318,   322,   318,
     318,   235,   321,   318,   139,   263,   311,   327,   328,   255,
     322,   192,   231,   263,   313,   315,   316,     9,    10,    11,
      13,    14,    15,    16,    17,   136,   140,   141,   142,   143,
     144,   147,   148,   233,   239,   240,   241,   242,   254,   255,
     256,   266,   267,   268,   270,   271,   272,   273,   274,   275,
     276,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   297,   299,   300,   312,
     322,   333,   334,   335,   336,   340,   341,   342,   345,   351,
     355,   305,   306,   304,   308,   322,   306,   306,   263,   253,
     321,   233,   254,   254,   254,   236,   281,   294,   298,   322,
     235,   255,   176,   263,   329,   330,   256,   328,   327,   254,
     253,   234,   238,   254,   254,   334,   233,   233,   254,   254,
     297,   233,   233,   281,   281,   297,   256,   337,   147,   148,
     235,   237,   234,   234,   238,   135,   295,   233,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   253,   296,
     281,   243,   244,   245,   239,   240,   145,   146,   149,   150,
     246,   247,   151,   152,   248,   249,   250,   153,   155,   154,
     251,   238,   254,   256,   334,   263,   253,   321,   255,   295,
     331,   253,   236,   236,   298,   311,   362,   363,   321,   238,
     254,   256,   141,   142,   314,   315,   136,   333,   341,   352,
     297,   254,   297,   297,   311,   344,   234,   340,   269,   297,
     263,   266,   277,   278,   279,   280,   295,   295,   281,   281,
     281,   283,   283,   284,   284,   285,   285,   285,   285,   286,
     286,   287,   288,   289,   290,   291,   292,   297,   295,   321,
     331,   253,   331,   332,   331,   236,   329,   256,   362,   330,
     233,   344,   353,   354,   234,   234,   263,   234,   256,   236,
     233,   234,   234,   238,   135,   295,   252,   331,   238,   256,
     254,   139,   361,   297,   254,   234,   334,   343,   255,   346,
     253,   335,   338,   339,   295,   295,   256,   331,   321,   254,
     234,   297,   338,    12,    18,    19,   256,   347,   348,   349,
     350,   331,   254,   334,   297,   252,   334,   347,   334,   256,
     349,   252
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   257,   259,   258,   260,   260,   260,   261,   261,   261,
     261,   261,   262,   262,   263,   263,   263,   264,   265,   265,
     266,   266,   267,   267,   267,   267,   267,   267,   268,   268,
     268,   268,   268,   268,   269,   270,   271,   271,   272,   272,
     273,   273,   274,   274,   275,   276,   276,   276,   277,   277,
     278,   278,   279,   279,   280,   281,   281,   281,   281,   282,
     282,   282,   282,   283,   283,   283,   283,   284,   284,   284,
     285,   285,   285,   286,   286,   286,   286,   286,   287,   287,
     287,   288,   288,   289,   289,   290,   290,   291,   291,   292,
     292,   293,   293,   294,   294,   295,   295,   296,   296,   296,
     296,   296,   296,   296,   296,   296,   296,   296,   297,   297,
     298,   299,   299,   299,   299,   300,   301,   301,   302,   302,
     303,   304,   304,   305,   305,   306,   306,   306,   306,   307,
     307,   307,   308,   309,   309,   309,   309,   309,   310,   310,
     310,   310,   310,   310,   311,   311,   312,   313,   313,   314,
     314,   315,   315,   315,   316,   316,   317,   317,   317,   318,
     318,   318,   318,   318,   318,   318,   318,   318,   318,   318,
     318,   319,   319,   320,   320,   320,   320,   320,   320,   320,
     320,   320,   320,   320,   321,   321,   321,   321,   322,   322,
     323,   323,   323,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   325,   325,   325,   326,   326,   327,
     327,   328,   329,   329,   330,   330,   331,   331,   331,   332,
     332,   333,   334,   334,   335,   335,   335,   335,   335,   335,
     336,   337,   336,   338,   338,   339,   339,   340,   340,   341,
     341,   342,   343,   343,   344,   344,   345,   346,   346,   347,
     347,   348,   348,   349,   349,   350,   350,   351,   351,   351,
     352,   352,   353,   353,   354,   354,   355,   355,   355,   355,
     355,   356,   356,   356,   356,   357,   358,   358,   359,   360,
     360,   360,   361,   361,   361,   362,   362,   363,   364,   364,
     364
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     0,     4,     0,     3,     4,     2,     2,     2,
       2,     2,     0,     2,     1,     1,     1,     5,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     4,
       1,     3,     2,     2,     1,     1,     1,     3,     2,     2,
       2,     1,     2,     3,     2,     1,     1,     1,     2,     2,
       2,     1,     2,     3,     2,     1,     2,     2,     2,     1,
       1,     1,     1,     1,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
       3,     1,     3,     1,     5,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     2,     2,     4,     1,     2,     1,     1,     2,     3,
       3,     2,     3,     2,     2,     0,     2,     2,     2,     1,
       1,     1,     1,     1,     3,     4,     6,     5,     1,     2,
       3,     5,     4,     2,     1,     2,     4,     1,     3,     1,
       1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     3,     3,     4,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     5,     4,     1,
       2,     3,     1,     3,     1,     2,     1,     3,     4,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     0,     4,     1,     1,     2,     3,     1,     2,     1,
       2,     5,     3,     1,     1,     4,     5,     2,     3,     3,
       2,     1,     2,     2,     2,     1,     2,     5,     7,     6,
       1,     1,     1,     0,     2,     3,     2,     2,     2,     3,
       2,     1,     1,     1,     1,     2,     1,     2,     7,     1,
       1,     1,     0,     1,     2,     1,     2,     3,     3,     3,
       3
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, state, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, state); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, struct _mesa_glsl_parse_state *state)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  YYUSE (state);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, struct _mesa_glsl_parse_state *state)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, state);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, struct _mesa_glsl_parse_state *state)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , state);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, state); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, struct _mesa_glsl_parse_state *state)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (state);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (struct _mesa_glsl_parse_state *state)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

/* User initialization code.  */
#line 80 "glsl_parser.yy" /* yacc.c:1429  */
{
   yylloc.first_line = 1;
   yylloc.first_column = 1;
   yylloc.last_line = 1;
   yylloc.last_column = 1;
   yylloc.source = 0;
}

#line 2981 "glsl_parser.cpp" /* yacc.c:1429  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, state);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 295 "glsl_parser.yy" /* yacc.c:1646  */
    {
      _mesa_glsl_initialize_types(state);
   }
#line 3172 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 3:
#line 299 "glsl_parser.yy" /* yacc.c:1646  */
    {
      delete state->symbols;
      state->symbols = new(ralloc_parent(state)) glsl_symbol_table;
      _mesa_glsl_initialize_types(state);
   }
#line 3182 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 5:
#line 309 "glsl_parser.yy" /* yacc.c:1646  */
    {
      state->process_version_directive(&(yylsp[-1]), (yyvsp[-1].n), NULL);
      if (state->error) {
         YYERROR;
      }
   }
#line 3193 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 6:
#line 316 "glsl_parser.yy" /* yacc.c:1646  */
    {
      state->process_version_directive(&(yylsp[-2]), (yyvsp[-2].n), (yyvsp[-1].identifier));
      if (state->error) {
         YYERROR;
      }
   }
#line 3204 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 11:
#line 330 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if (!state->is_version(120, 100)) {
         _mesa_glsl_warning(& (yylsp[-1]), state,
                            "pragma `invariant(all)' not supported in %s "
                            "(GLSL ES 1.00 or GLSL 1.20 required)",
                            state->get_version_string());
      } else {
         state->all_invariant = true;
      }
   }
#line 3219 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 17:
#line 355 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if (!_mesa_glsl_process_extension((yyvsp[-3].identifier), & (yylsp[-3]), (yyvsp[-1].identifier), & (yylsp[-1]), state)) {
         YYERROR;
      }
   }
#line 3229 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 18:
#line 364 "glsl_parser.yy" /* yacc.c:1646  */
    {
      /* FINISHME: The NULL test is required because pragmas are set to
       * FINISHME: NULL. (See production rule for external_declaration.)
       */
      if ((yyvsp[0].node) != NULL)
         state->translation_unit.push_tail(& (yyvsp[0].node)->link);
   }
#line 3241 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 19:
#line 372 "glsl_parser.yy" /* yacc.c:1646  */
    {
      /* FINISHME: The NULL test is required because pragmas are set to
       * FINISHME: NULL. (See production rule for external_declaration.)
       */
      if ((yyvsp[0].node) != NULL)
         state->translation_unit.push_tail(& (yyvsp[0].node)->link);
   }
#line 3253 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 22:
#line 388 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_identifier, NULL, NULL, NULL);
      (yyval.expression)->set_location((yylsp[0]));
      (yyval.expression)->primary_expression.identifier = (yyvsp[0].identifier);
   }
#line 3264 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 23:
#line 395 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_int_constant, NULL, NULL, NULL);
      (yyval.expression)->set_location((yylsp[0]));
      (yyval.expression)->primary_expression.int_constant = (yyvsp[0].n);
   }
#line 3275 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 24:
#line 402 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_uint_constant, NULL, NULL, NULL);
      (yyval.expression)->set_location((yylsp[0]));
      (yyval.expression)->primary_expression.uint_constant = (yyvsp[0].n);
   }
#line 3286 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 25:
#line 409 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_float_constant, NULL, NULL, NULL);
      (yyval.expression)->set_location((yylsp[0]));
      (yyval.expression)->primary_expression.float_constant = (yyvsp[0].real);
   }
#line 3297 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 26:
#line 416 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_bool_constant, NULL, NULL, NULL);
      (yyval.expression)->set_location((yylsp[0]));
      (yyval.expression)->primary_expression.bool_constant = (yyvsp[0].n);
   }
#line 3308 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 27:
#line 423 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.expression) = (yyvsp[-1].expression);
   }
#line 3316 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 29:
#line 431 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_array_index, (yyvsp[-3].expression), (yyvsp[-1].expression), NULL);
      (yyval.expression)->set_location_range((yylsp[-3]), (yylsp[0]));
   }
#line 3326 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 30:
#line 437 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.expression) = (yyvsp[0].expression);
   }
#line 3334 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 31:
#line 441 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_field_selection, (yyvsp[-2].expression), NULL, NULL);
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
      (yyval.expression)->primary_expression.identifier = (yyvsp[0].identifier);
   }
#line 3345 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 32:
#line 448 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_post_inc, (yyvsp[-1].expression), NULL, NULL);
      (yyval.expression)->set_location_range((yylsp[-1]), (yylsp[0]));
   }
#line 3355 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 33:
#line 454 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_post_dec, (yyvsp[-1].expression), NULL, NULL);
      (yyval.expression)->set_location_range((yylsp[-1]), (yylsp[0]));
   }
#line 3365 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 37:
#line 472 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_field_selection, (yyvsp[-2].expression), (yyvsp[0].expression), NULL);
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3375 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 42:
#line 491 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.expression) = (yyvsp[-1].expression);
      (yyval.expression)->set_location((yylsp[-1]));
      (yyval.expression)->expressions.push_tail(& (yyvsp[0].expression)->link);
   }
#line 3385 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 43:
#line 497 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.expression) = (yyvsp[-2].expression);
      (yyval.expression)->set_location((yylsp[-2]));
      (yyval.expression)->expressions.push_tail(& (yyvsp[0].expression)->link);
   }
#line 3395 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 45:
#line 513 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_function_expression((yyvsp[0].type_specifier));
      (yyval.expression)->set_location((yylsp[0]));
      }
#line 3405 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 46:
#line 519 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_expression *callee = new(ctx) ast_expression((yyvsp[0].identifier));
      callee->set_location((yylsp[0]));
      (yyval.expression) = new(ctx) ast_function_expression(callee);
      (yyval.expression)->set_location((yylsp[0]));
      }
#line 3417 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 47:
#line 527 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_expression *callee = new(ctx) ast_expression((yyvsp[0].identifier));
      callee->set_location((yylsp[0]));
      (yyval.expression) = new(ctx) ast_function_expression(callee);
      (yyval.expression)->set_location((yylsp[0]));
      }
#line 3429 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 52:
#line 548 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.expression) = (yyvsp[-1].expression);
      (yyval.expression)->set_location((yylsp[-1]));
      (yyval.expression)->expressions.push_tail(& (yyvsp[0].expression)->link);
   }
#line 3439 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 53:
#line 554 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.expression) = (yyvsp[-2].expression);
      (yyval.expression)->set_location((yylsp[-2]));
      (yyval.expression)->expressions.push_tail(& (yyvsp[0].expression)->link);
   }
#line 3449 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 54:
#line 566 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_expression *callee = new(ctx) ast_expression((yyvsp[-1].identifier));
      callee->set_location((yylsp[-1]));
      (yyval.expression) = new(ctx) ast_function_expression(callee);
      (yyval.expression)->set_location((yylsp[-1]));
   }
#line 3461 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 56:
#line 579 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_pre_inc, (yyvsp[0].expression), NULL, NULL);
      (yyval.expression)->set_location((yylsp[-1]));
   }
#line 3471 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 57:
#line 585 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_pre_dec, (yyvsp[0].expression), NULL, NULL);
      (yyval.expression)->set_location((yylsp[-1]));
   }
#line 3481 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 58:
#line 591 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression((yyvsp[-1].n), (yyvsp[0].expression), NULL, NULL);
      (yyval.expression)->set_location_range((yylsp[-1]), (yylsp[0]));
   }
#line 3491 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 59:
#line 600 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_plus; }
#line 3497 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 60:
#line 601 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_neg; }
#line 3503 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 61:
#line 602 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_logic_not; }
#line 3509 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 62:
#line 603 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_bit_not; }
#line 3515 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 64:
#line 609 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_mul, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3525 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 65:
#line 615 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_div, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3535 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 66:
#line 621 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_mod, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3545 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 68:
#line 631 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_add, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3555 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 69:
#line 637 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_sub, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3565 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 71:
#line 647 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_lshift, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3575 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 72:
#line 653 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_rshift, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3585 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 74:
#line 663 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_less, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3595 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 75:
#line 669 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_greater, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3605 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 76:
#line 675 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_lequal, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3615 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 77:
#line 681 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_gequal, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3625 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 79:
#line 691 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_equal, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3635 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 80:
#line 697 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_nequal, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3645 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 82:
#line 707 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_and, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3655 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 84:
#line 717 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_xor, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3665 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 86:
#line 727 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_or, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3675 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 88:
#line 737 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_and, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3685 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 90:
#line 747 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_xor, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3695 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 92:
#line 757 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_or, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3705 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 94:
#line 767 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_conditional, (yyvsp[-4].expression), (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-4]), (yylsp[0]));
   }
#line 3715 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 96:
#line 777 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression((yyvsp[-1].n), (yyvsp[-2].expression), (yyvsp[0].expression), NULL);
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 3725 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 97:
#line 785 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_assign; }
#line 3731 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 98:
#line 786 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_mul_assign; }
#line 3737 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 99:
#line 787 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_div_assign; }
#line 3743 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 100:
#line 788 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_mod_assign; }
#line 3749 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 101:
#line 789 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_add_assign; }
#line 3755 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 102:
#line 790 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_sub_assign; }
#line 3761 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 103:
#line 791 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_ls_assign; }
#line 3767 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 104:
#line 792 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_rs_assign; }
#line 3773 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 105:
#line 793 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_and_assign; }
#line 3779 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 106:
#line 794 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_xor_assign; }
#line 3785 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 107:
#line 795 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = ast_or_assign; }
#line 3791 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 108:
#line 800 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.expression) = (yyvsp[0].expression);
   }
#line 3799 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 109:
#line 804 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      if ((yyvsp[-2].expression)->oper != ast_sequence) {
         (yyval.expression) = new(ctx) ast_expression(ast_sequence, NULL, NULL, NULL);
         (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
         (yyval.expression)->expressions.push_tail(& (yyvsp[-2].expression)->link);
      } else {
         (yyval.expression) = (yyvsp[-2].expression);
      }

      (yyval.expression)->expressions.push_tail(& (yyvsp[0].expression)->link);
   }
#line 3816 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 111:
#line 824 "glsl_parser.yy" /* yacc.c:1646  */
    {
      state->symbols->pop_scope();
      (yyval.node) = (yyvsp[-1].function);
   }
#line 3825 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 112:
#line 829 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[-1].declarator_list);
   }
#line 3833 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 113:
#line 833 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyvsp[-1].type_specifier)->default_precision = (yyvsp[-2].n);
      (yyval.node) = (yyvsp[-1].type_specifier);
   }
#line 3842 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 114:
#line 838 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
   }
#line 3850 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 118:
#line 854 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.function) = (yyvsp[-1].function);
      (yyval.function)->parameters.push_tail(& (yyvsp[0].parameter_declarator)->link);
   }
#line 3859 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 119:
#line 859 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.function) = (yyvsp[-2].function);
      (yyval.function)->parameters.push_tail(& (yyvsp[0].parameter_declarator)->link);
   }
#line 3868 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 120:
#line 867 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.function) = new(ctx) ast_function();
      (yyval.function)->set_location((yylsp[-1]));
      (yyval.function)->return_type = (yyvsp[-2].fully_specified_type);
      (yyval.function)->identifier = (yyvsp[-1].identifier);

      state->symbols->add_function(new(state) ir_function((yyvsp[-1].identifier)));
      state->symbols->push_scope();
   }
#line 3883 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 121:
#line 881 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.parameter_declarator) = new(ctx) ast_parameter_declarator();
      (yyval.parameter_declarator)->set_location_range((yylsp[-1]), (yylsp[0]));
      (yyval.parameter_declarator)->type = new(ctx) ast_fully_specified_type();
      (yyval.parameter_declarator)->type->set_location((yylsp[-1]));
      (yyval.parameter_declarator)->type->specifier = (yyvsp[-1].type_specifier);
      (yyval.parameter_declarator)->identifier = (yyvsp[0].identifier);
   }
#line 3897 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 122:
#line 891 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.parameter_declarator) = new(ctx) ast_parameter_declarator();
      (yyval.parameter_declarator)->set_location_range((yylsp[-2]), (yylsp[0]));
      (yyval.parameter_declarator)->type = new(ctx) ast_fully_specified_type();
      (yyval.parameter_declarator)->type->set_location((yylsp[-2]));
      (yyval.parameter_declarator)->type->specifier = (yyvsp[-2].type_specifier);
      (yyval.parameter_declarator)->identifier = (yyvsp[-1].identifier);
      (yyval.parameter_declarator)->array_specifier = (yyvsp[0].array_specifier);
   }
#line 3912 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 123:
#line 905 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.parameter_declarator) = (yyvsp[0].parameter_declarator);
      (yyval.parameter_declarator)->type->qualifier = (yyvsp[-1].type_qualifier);
   }
#line 3921 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 124:
#line 910 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.parameter_declarator) = new(ctx) ast_parameter_declarator();
      (yyval.parameter_declarator)->set_location((yylsp[0]));
      (yyval.parameter_declarator)->type = new(ctx) ast_fully_specified_type();
      (yyval.parameter_declarator)->type->set_location_range((yylsp[-1]), (yylsp[0]));
      (yyval.parameter_declarator)->type->qualifier = (yyvsp[-1].type_qualifier);
      (yyval.parameter_declarator)->type->specifier = (yyvsp[0].type_specifier);
   }
#line 3935 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 125:
#line 923 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
   }
#line 3943 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 126:
#line 927 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if ((yyvsp[0].type_qualifier).flags.q.constant)
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate const qualifier");

      (yyval.type_qualifier) = (yyvsp[0].type_qualifier);
      (yyval.type_qualifier).flags.q.constant = 1;
   }
#line 3955 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 127:
#line 935 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if (((yyvsp[-1].type_qualifier).flags.q.in || (yyvsp[-1].type_qualifier).flags.q.out) && ((yyvsp[0].type_qualifier).flags.q.in || (yyvsp[0].type_qualifier).flags.q.out))
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate in/out/inout qualifier");

      if (!state->ARB_shading_language_420pack_enable && (yyvsp[0].type_qualifier).flags.q.constant)
         _mesa_glsl_error(&(yylsp[-1]), state, "const must be specified before "
                          "in/out/inout");

      (yyval.type_qualifier) = (yyvsp[-1].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[-1]), state, (yyvsp[0].type_qualifier));
   }
#line 3971 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 128:
#line 947 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if ((yyvsp[0].type_qualifier).precision != ast_precision_none)
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate precision qualifier");

      if (!state->ARB_shading_language_420pack_enable && (yyvsp[0].type_qualifier).flags.i != 0)
         _mesa_glsl_error(&(yylsp[-1]), state, "precision qualifiers must come last");

      (yyval.type_qualifier) = (yyvsp[0].type_qualifier);
      (yyval.type_qualifier).precision = (yyvsp[-1].n);
   }
#line 3986 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 129:
#line 960 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.in = 1;
   }
#line 3995 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 130:
#line 965 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.out = 1;
   }
#line 4004 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 131:
#line 970 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.in = 1;
      (yyval.type_qualifier).flags.q.out = 1;
   }
#line 4014 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 134:
#line 984 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[0].identifier), NULL, NULL);
      decl->set_location((yylsp[0]));

      (yyval.declarator_list) = (yyvsp[-2].declarator_list);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[0].identifier), ir_var_auto));
   }
#line 4028 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 135:
#line 994 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[-1].identifier), (yyvsp[0].array_specifier), NULL);
      decl->set_location_range((yylsp[-1]), (yylsp[0]));

      (yyval.declarator_list) = (yyvsp[-3].declarator_list);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[-1].identifier), ir_var_auto));
   }
#line 4042 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 136:
#line 1004 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[-3].identifier), (yyvsp[-2].array_specifier), (yyvsp[0].expression));
      decl->set_location_range((yylsp[-3]), (yylsp[-2]));

      (yyval.declarator_list) = (yyvsp[-5].declarator_list);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[-3].identifier), ir_var_auto));
   }
#line 4056 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 137:
#line 1014 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[-2].identifier), NULL, (yyvsp[0].expression));
      decl->set_location((yylsp[-2]));

      (yyval.declarator_list) = (yyvsp[-4].declarator_list);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[-2].identifier), ir_var_auto));
   }
#line 4070 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 138:
#line 1028 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      /* Empty declaration list is valid. */
      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[0].fully_specified_type));
      (yyval.declarator_list)->set_location((yylsp[0]));
   }
#line 4081 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 139:
#line 1035 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[0].identifier), NULL, NULL);
      decl->set_location((yylsp[0]));

      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[-1].fully_specified_type));
      (yyval.declarator_list)->set_location_range((yylsp[-1]), (yylsp[0]));
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
   }
#line 4095 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 140:
#line 1045 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[-1].identifier), (yyvsp[0].array_specifier), NULL);
      decl->set_location_range((yylsp[-1]), (yylsp[0]));

      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[-2].fully_specified_type));
      (yyval.declarator_list)->set_location_range((yylsp[-2]), (yylsp[0]));
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
   }
#line 4109 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 141:
#line 1055 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[-3].identifier), (yyvsp[-2].array_specifier), (yyvsp[0].expression));
      decl->set_location_range((yylsp[-3]), (yylsp[-2]));

      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[-4].fully_specified_type));
      (yyval.declarator_list)->set_location_range((yylsp[-4]), (yylsp[-2]));
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
   }
#line 4123 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 142:
#line 1065 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[-2].identifier), NULL, (yyvsp[0].expression));
      decl->set_location((yylsp[-2]));

      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[-3].fully_specified_type));
      (yyval.declarator_list)->set_location_range((yylsp[-3]), (yylsp[-2]));
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
   }
#line 4137 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 143:
#line 1075 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[0].identifier), NULL, NULL);
      decl->set_location((yylsp[0]));

      (yyval.declarator_list) = new(ctx) ast_declarator_list(NULL);
      (yyval.declarator_list)->set_location_range((yylsp[-1]), (yylsp[0]));
      (yyval.declarator_list)->invariant = true;

      (yyval.declarator_list)->declarations.push_tail(&decl->link);
   }
#line 4153 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 144:
#line 1090 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.fully_specified_type) = new(ctx) ast_fully_specified_type();
      (yyval.fully_specified_type)->set_location((yylsp[0]));
      (yyval.fully_specified_type)->specifier = (yyvsp[0].type_specifier);
   }
#line 4164 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 145:
#line 1097 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.fully_specified_type) = new(ctx) ast_fully_specified_type();
      (yyval.fully_specified_type)->set_location_range((yylsp[-1]), (yylsp[0]));
      (yyval.fully_specified_type)->qualifier = (yyvsp[-1].type_qualifier);
      (yyval.fully_specified_type)->specifier = (yyvsp[0].type_specifier);
   }
#line 4176 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 146:
#line 1108 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.type_qualifier) = (yyvsp[-1].type_qualifier);
   }
#line 4184 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 148:
#line 1116 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.type_qualifier) = (yyvsp[-2].type_qualifier);
      if (!(yyval.type_qualifier).merge_qualifier(& (yylsp[0]), state, (yyvsp[0].type_qualifier))) {
         YYERROR;
      }
   }
#line 4195 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 149:
#line 1125 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = (yyvsp[0].n); }
#line 4201 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 150:
#line 1126 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = (yyvsp[0].n); }
#line 4207 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 151:
#line 1131 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));

      /* Layout qualifiers for ARB_fragment_coord_conventions. */
      if (!(yyval.type_qualifier).flags.i && (state->ARB_fragment_coord_conventions_enable ||
                          state->is_version(150, 0))) {
         if (match_layout_qualifier((yyvsp[0].identifier), "origin_upper_left", state) == 0) {
            (yyval.type_qualifier).flags.q.origin_upper_left = 1;
         } else if (match_layout_qualifier((yyvsp[0].identifier), "pixel_center_integer",
                                           state) == 0) {
            (yyval.type_qualifier).flags.q.pixel_center_integer = 1;
         }

         if ((yyval.type_qualifier).flags.i && state->ARB_fragment_coord_conventions_warn) {
            _mesa_glsl_warning(& (yylsp[0]), state,
                               "GL_ARB_fragment_coord_conventions layout "
                               "identifier `%s' used", (yyvsp[0].identifier));
         }
      }

      /* Layout qualifiers for AMD/ARB_conservative_depth. */
      if (!(yyval.type_qualifier).flags.i &&
          (state->AMD_conservative_depth_enable ||
           state->ARB_conservative_depth_enable)) {
         if (match_layout_qualifier((yyvsp[0].identifier), "depth_any", state) == 0) {
            (yyval.type_qualifier).flags.q.depth_any = 1;
         } else if (match_layout_qualifier((yyvsp[0].identifier), "depth_greater", state) == 0) {
            (yyval.type_qualifier).flags.q.depth_greater = 1;
         } else if (match_layout_qualifier((yyvsp[0].identifier), "depth_less", state) == 0) {
            (yyval.type_qualifier).flags.q.depth_less = 1;
         } else if (match_layout_qualifier((yyvsp[0].identifier), "depth_unchanged",
                                           state) == 0) {
            (yyval.type_qualifier).flags.q.depth_unchanged = 1;
         }

         if ((yyval.type_qualifier).flags.i && state->AMD_conservative_depth_warn) {
            _mesa_glsl_warning(& (yylsp[0]), state,
                               "GL_AMD_conservative_depth "
                               "layout qualifier `%s' is used", (yyvsp[0].identifier));
         }
         if ((yyval.type_qualifier).flags.i && state->ARB_conservative_depth_warn) {
            _mesa_glsl_warning(& (yylsp[0]), state,
                               "GL_ARB_conservative_depth "
                               "layout qualifier `%s' is used", (yyvsp[0].identifier));
         }
      }

      /* See also interface_block_layout_qualifier. */
      if (!(yyval.type_qualifier).flags.i && state->has_uniform_buffer_objects()) {
         if (match_layout_qualifier((yyvsp[0].identifier), "std140", state) == 0) {
            (yyval.type_qualifier).flags.q.std140 = 1;
         } else if (match_layout_qualifier((yyvsp[0].identifier), "shared", state) == 0) {
            (yyval.type_qualifier).flags.q.shared = 1;
         } else if (match_layout_qualifier((yyvsp[0].identifier), "column_major", state) == 0) {
            (yyval.type_qualifier).flags.q.column_major = 1;
         /* "row_major" is a reserved word in GLSL 1.30+. Its token is parsed
          * below in the interface_block_layout_qualifier rule.
          *
          * It is not a reserved word in GLSL ES 3.00, so it's handled here as
          * an identifier.
          *
          * Also, this takes care of alternate capitalizations of
          * "row_major" (which is necessary because layout qualifiers
          * are case-insensitive in desktop GLSL).
          */
         } else if (match_layout_qualifier((yyvsp[0].identifier), "row_major", state) == 0) {
            (yyval.type_qualifier).flags.q.row_major = 1;
         /* "packed" is a reserved word in GLSL, and its token is
          * parsed below in the interface_block_layout_qualifier rule.
          * However, we must take care of alternate capitalizations of
          * "packed", because layout qualifiers are case-insensitive
          * in desktop GLSL.
          */
         } else if (match_layout_qualifier((yyvsp[0].identifier), "packed", state) == 0) {
           (yyval.type_qualifier).flags.q.packed = 1;
         }

         if ((yyval.type_qualifier).flags.i && state->ARB_uniform_buffer_object_warn) {
            _mesa_glsl_warning(& (yylsp[0]), state,
                               "#version 140 / GL_ARB_uniform_buffer_object "
                               "layout qualifier `%s' is used", (yyvsp[0].identifier));
         }
      }

      /* Layout qualifiers for GLSL 1.50 geometry shaders. */
      if (!(yyval.type_qualifier).flags.i) {
         static const struct {
            const char *s;
            GLenum e;
         } map[] = {
                 { "points", GL_POINTS },
                 { "lines", GL_LINES },
                 { "lines_adjacency", GL_LINES_ADJACENCY },
                 { "line_strip", GL_LINE_STRIP },
                 { "triangles", GL_TRIANGLES },
                 { "triangles_adjacency", GL_TRIANGLES_ADJACENCY },
                 { "triangle_strip", GL_TRIANGLE_STRIP },
         };
         for (unsigned i = 0; i < Elements(map); i++) {
            if (match_layout_qualifier((yyvsp[0].identifier), map[i].s, state) == 0) {
               (yyval.type_qualifier).flags.q.prim_type = 1;
               (yyval.type_qualifier).prim_type = map[i].e;
               break;
            }
         }

         if ((yyval.type_qualifier).flags.i && !state->is_version(150, 0)) {
            _mesa_glsl_error(& (yylsp[0]), state, "#version 150 layout "
                             "qualifier `%s' used", (yyvsp[0].identifier));
         }
      }

      /* Layout qualifiers for ARB_shader_image_load_store. */
      if (state->ARB_shader_image_load_store_enable ||
          state->is_version(420, 0)) {
         if (!(yyval.type_qualifier).flags.i) {
            static const struct {
               const char *name;
               GLenum format;
               glsl_base_type base_type;
            } map[] = {
               { "rgba32f", GL_RGBA32F, GLSL_TYPE_FLOAT },
               { "rgba16f", GL_RGBA16F, GLSL_TYPE_FLOAT },
               { "rg32f", GL_RG32F, GLSL_TYPE_FLOAT },
               { "rg16f", GL_RG16F, GLSL_TYPE_FLOAT },
               { "r11f_g11f_b10f", GL_R11F_G11F_B10F, GLSL_TYPE_FLOAT },
               { "r32f", GL_R32F, GLSL_TYPE_FLOAT },
               { "r16f", GL_R16F, GLSL_TYPE_FLOAT },
               { "rgba32ui", GL_RGBA32UI, GLSL_TYPE_UINT },
               { "rgba16ui", GL_RGBA16UI, GLSL_TYPE_UINT },
               { "rgb10_a2ui", GL_RGB10_A2UI, GLSL_TYPE_UINT },
               { "rgba8ui", GL_RGBA8UI, GLSL_TYPE_UINT },
               { "rg32ui", GL_RG32UI, GLSL_TYPE_UINT },
               { "rg16ui", GL_RG16UI, GLSL_TYPE_UINT },
               { "rg8ui", GL_RG8UI, GLSL_TYPE_UINT },
               { "r32ui", GL_R32UI, GLSL_TYPE_UINT },
               { "r16ui", GL_R16UI, GLSL_TYPE_UINT },
               { "r8ui", GL_R8UI, GLSL_TYPE_UINT },
               { "rgba32i", GL_RGBA32I, GLSL_TYPE_INT },
               { "rgba16i", GL_RGBA16I, GLSL_TYPE_INT },
               { "rgba8i", GL_RGBA8I, GLSL_TYPE_INT },
               { "rg32i", GL_RG32I, GLSL_TYPE_INT },
               { "rg16i", GL_RG16I, GLSL_TYPE_INT },
               { "rg8i", GL_RG8I, GLSL_TYPE_INT },
               { "r32i", GL_R32I, GLSL_TYPE_INT },
               { "r16i", GL_R16I, GLSL_TYPE_INT },
               { "r8i", GL_R8I, GLSL_TYPE_INT },
               { "rgba16", GL_RGBA16, GLSL_TYPE_FLOAT },
               { "rgb10_a2", GL_RGB10_A2, GLSL_TYPE_FLOAT },
               { "rgba8", GL_RGBA8, GLSL_TYPE_FLOAT },
               { "rg16", GL_RG16, GLSL_TYPE_FLOAT },
               { "rg8", GL_RG8, GLSL_TYPE_FLOAT },
               { "r16", GL_R16, GLSL_TYPE_FLOAT },
               { "r8", GL_R8, GLSL_TYPE_FLOAT },
               { "rgba16_snorm", GL_RGBA16_SNORM, GLSL_TYPE_FLOAT },
               { "rgba8_snorm", GL_RGBA8_SNORM, GLSL_TYPE_FLOAT },
               { "rg16_snorm", GL_RG16_SNORM, GLSL_TYPE_FLOAT },
               { "rg8_snorm", GL_RG8_SNORM, GLSL_TYPE_FLOAT },
               { "r16_snorm", GL_R16_SNORM, GLSL_TYPE_FLOAT },
               { "r8_snorm", GL_R8_SNORM, GLSL_TYPE_FLOAT }
            };

            for (unsigned i = 0; i < Elements(map); i++) {
               if (match_layout_qualifier((yyvsp[0].identifier), map[i].name, state) == 0) {
                  (yyval.type_qualifier).flags.q.explicit_image_format = 1;
                  (yyval.type_qualifier).image_format = map[i].format;
                  (yyval.type_qualifier).image_base_type = map[i].base_type;
                  break;
               }
            }
         }

         if (!(yyval.type_qualifier).flags.i &&
             match_layout_qualifier((yyvsp[0].identifier), "early_fragment_tests", state) == 0) {
            (yyval.type_qualifier).flags.q.early_fragment_tests = 1;
         }
      }

      if (!(yyval.type_qualifier).flags.i) {
         _mesa_glsl_error(& (yylsp[0]), state, "unrecognized layout identifier "
                          "`%s'", (yyvsp[0].identifier));
         YYERROR;
      }
   }
#line 4396 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 152:
#line 1316 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));

      if (match_layout_qualifier("location", (yyvsp[-2].identifier), state) == 0) {
         (yyval.type_qualifier).flags.q.explicit_location = 1;

         if ((yyval.type_qualifier).flags.q.attribute == 1 &&
             state->ARB_explicit_attrib_location_warn) {
            _mesa_glsl_warning(& (yylsp[-2]), state,
                               "GL_ARB_explicit_attrib_location layout "
                               "identifier `%s' used", (yyvsp[-2].identifier));
         }

         if ((yyvsp[0].n) >= 0) {
            (yyval.type_qualifier).location = (yyvsp[0].n);
         } else {
             _mesa_glsl_error(& (yylsp[0]), state, "invalid location %d specified", (yyvsp[0].n));
             YYERROR;
         }
      }

      if (match_layout_qualifier("index", (yyvsp[-2].identifier), state) == 0) {
         (yyval.type_qualifier).flags.q.explicit_index = 1;

         if ((yyvsp[0].n) >= 0) {
            (yyval.type_qualifier).index = (yyvsp[0].n);
         } else {
            _mesa_glsl_error(& (yylsp[0]), state, "invalid index %d specified", (yyvsp[0].n));
            YYERROR;
         }
      }

      if ((state->ARB_shading_language_420pack_enable ||
           state->ARB_shader_atomic_counters_enable) &&
          match_layout_qualifier("binding", (yyvsp[-2].identifier), state) == 0) {
         (yyval.type_qualifier).flags.q.explicit_binding = 1;
         (yyval.type_qualifier).binding = (yyvsp[0].n);
      }

      if (state->ARB_shader_atomic_counters_enable &&
          match_layout_qualifier("offset", (yyvsp[-2].identifier), state) == 0) {
         (yyval.type_qualifier).flags.q.explicit_offset = 1;
         (yyval.type_qualifier).offset = (yyvsp[0].n);
      }

      if (match_layout_qualifier("max_vertices", (yyvsp[-2].identifier), state) == 0) {
         (yyval.type_qualifier).flags.q.max_vertices = 1;

         if ((yyvsp[0].n) < 0) {
            _mesa_glsl_error(& (yylsp[0]), state,
                             "invalid max_vertices %d specified", (yyvsp[0].n));
            YYERROR;
         } else {
            (yyval.type_qualifier).max_vertices = (yyvsp[0].n);
            if (!state->is_version(150, 0)) {
               _mesa_glsl_error(& (yylsp[0]), state,
                                "#version 150 max_vertices qualifier "
                                "specified", (yyvsp[0].n));
            }
         }
      }

      static const char * const local_size_qualifiers[3] = {
         "local_size_x",
         "local_size_y",
         "local_size_z",
      };
      for (int i = 0; i < 3; i++) {
         if (match_layout_qualifier(local_size_qualifiers[i], (yyvsp[-2].identifier),
                                    state) == 0) {
            if ((yyvsp[0].n) <= 0) {
               _mesa_glsl_error(& (yylsp[0]), state,
                                "invalid %s of %d specified",
                                local_size_qualifiers[i], (yyvsp[0].n));
               YYERROR;
            } else if (!state->is_version(430, 0) &&
                       !state->ARB_compute_shader_enable) {
               _mesa_glsl_error(& (yylsp[0]), state,
                                "%s qualifier requires GLSL 4.30 or "
                                "ARB_compute_shader",
                                local_size_qualifiers[i]);
               YYERROR;
            } else {
               (yyval.type_qualifier).flags.q.local_size |= (1 << i);
               (yyval.type_qualifier).local_size[i] = (yyvsp[0].n);
            }
            break;
         }
      }

      if (match_layout_qualifier("invocations", (yyvsp[-2].identifier), state) == 0) {
         (yyval.type_qualifier).flags.q.invocations = 1;

         if ((yyvsp[0].n) <= 0) {
            _mesa_glsl_error(& (yylsp[0]), state,
                             "invalid invocations %d specified", (yyvsp[0].n));
            YYERROR;
         } else if ((yyvsp[0].n) > MAX_GEOMETRY_SHADER_INVOCATIONS) {
            _mesa_glsl_error(& (yylsp[0]), state,
                             "invocations (%d) exceeds "
                             "GL_MAX_GEOMETRY_SHADER_INVOCATIONS", (yyvsp[0].n));
            YYERROR;
         } else {
            (yyval.type_qualifier).invocations = (yyvsp[0].n);
            if (!state->is_version(400, 0) &&
                !state->ARB_gpu_shader5_enable) {
               _mesa_glsl_error(& (yylsp[0]), state,
                                "GL_ARB_gpu_shader5 invocations "
                                "qualifier specified", (yyvsp[0].n));
            }
         }
      }

      /* If the identifier didn't match any known layout identifiers,
       * emit an error.
       */
      if (!(yyval.type_qualifier).flags.i) {
         _mesa_glsl_error(& (yylsp[-2]), state, "unrecognized layout identifier "
                          "`%s'", (yyvsp[-2].identifier));
         YYERROR;
      }
   }
#line 4523 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 153:
#line 1439 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.type_qualifier) = (yyvsp[0].type_qualifier);
      /* Layout qualifiers for ARB_uniform_buffer_object. */
      if ((yyval.type_qualifier).flags.q.uniform && !state->has_uniform_buffer_objects()) {
         _mesa_glsl_error(& (yylsp[0]), state,
                          "#version 140 / GL_ARB_uniform_buffer_object "
                          "layout qualifier `%s' is used", (yyvsp[0].type_qualifier));
      } else if ((yyval.type_qualifier).flags.q.uniform && state->ARB_uniform_buffer_object_warn) {
         _mesa_glsl_warning(& (yylsp[0]), state,
                            "#version 140 / GL_ARB_uniform_buffer_object "
                            "layout qualifier `%s' is used", (yyvsp[0].type_qualifier));
      }
   }
#line 4541 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 154:
#line 1465 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.row_major = 1;
   }
#line 4550 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 155:
#line 1470 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.packed = 1;
   }
#line 4559 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 156:
#line 1478 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.smooth = 1;
   }
#line 4568 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 157:
#line 1483 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.flat = 1;
   }
#line 4577 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 158:
#line 1488 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.noperspective = 1;
   }
#line 4586 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 159:
#line 1497 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.invariant = 1;
   }
#line 4595 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 164:
#line 1506 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(&(yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).precision = (yyvsp[0].n);
   }
#line 4604 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 165:
#line 1524 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if ((yyvsp[0].type_qualifier).flags.q.invariant)
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate \"invariant\" qualifier");

      if ((yyvsp[0].type_qualifier).has_layout()) {
         _mesa_glsl_error(&(yylsp[-1]), state,
                          "\"invariant\" cannot be used with layout(...)");
      }

      (yyval.type_qualifier) = (yyvsp[0].type_qualifier);
      (yyval.type_qualifier).flags.q.invariant = 1;
   }
#line 4621 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 166:
#line 1537 "glsl_parser.yy" /* yacc.c:1646  */
    {
      /* Section 4.3 of the GLSL 1.40 specification states:
       * "...qualified with one of these interpolation qualifiers"
       *
       * GLSL 1.30 claims to allow "one or more", but insists that:
       * "These interpolation qualifiers may only precede the qualifiers in,
       *  centroid in, out, or centroid out in a declaration."
       *
       * ...which means that e.g. smooth can't precede smooth, so there can be
       * only one after all, and the 1.40 text is a clarification, not a change.
       */
      if ((yyvsp[0].type_qualifier).has_interpolation())
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate interpolation qualifier");

      if ((yyvsp[0].type_qualifier).has_layout()) {
         _mesa_glsl_error(&(yylsp[-1]), state, "interpolation qualifiers cannot be used "
                          "with layout(...)");
      }

      if (!state->ARB_shading_language_420pack_enable && (yyvsp[0].type_qualifier).flags.q.invariant) {
         _mesa_glsl_error(&(yylsp[-1]), state, "interpolation qualifiers must come "
                          "after \"invariant\"");
      }

      (yyval.type_qualifier) = (yyvsp[-1].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[-1]), state, (yyvsp[0].type_qualifier));
   }
#line 4653 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 167:
#line 1565 "glsl_parser.yy" /* yacc.c:1646  */
    {
      /* The GLSL 1.50 grammar indicates that a layout(...) declaration can be
       * used standalone or immediately before a storage qualifier.  It cannot
       * be used with interpolation qualifiers or invariant.  There does not
       * appear to be any text indicating that it must come before the storage
       * qualifier, but always seems to in examples.
       */
      if (!state->ARB_shading_language_420pack_enable && (yyvsp[0].type_qualifier).has_layout())
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate layout(...) qualifiers");

      if ((yyvsp[0].type_qualifier).flags.q.invariant)
         _mesa_glsl_error(&(yylsp[-1]), state, "layout(...) cannot be used with "
                          "the \"invariant\" qualifier");

      if ((yyvsp[0].type_qualifier).has_interpolation()) {
         _mesa_glsl_error(&(yylsp[-1]), state, "layout(...) cannot be used with "
                          "interpolation qualifiers");
      }

      (yyval.type_qualifier) = (yyvsp[-1].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[-1]), state, (yyvsp[0].type_qualifier));
   }
#line 4680 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 168:
#line 1588 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if ((yyvsp[0].type_qualifier).has_auxiliary_storage()) {
         _mesa_glsl_error(&(yylsp[-1]), state,
                          "duplicate auxiliary storage qualifier (centroid or sample)");
      }

      if (!state->ARB_shading_language_420pack_enable &&
          ((yyvsp[0].type_qualifier).flags.q.invariant || (yyvsp[0].type_qualifier).has_interpolation() || (yyvsp[0].type_qualifier).has_layout())) {
         _mesa_glsl_error(&(yylsp[-1]), state, "auxiliary storage qualifiers must come "
                          "just before storage qualifiers");
      }
      (yyval.type_qualifier) = (yyvsp[-1].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[-1]), state, (yyvsp[0].type_qualifier));
   }
#line 4699 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 169:
#line 1603 "glsl_parser.yy" /* yacc.c:1646  */
    {
      /* Section 4.3 of the GLSL 1.20 specification states:
       * "Variable declarations may have a storage qualifier specified..."
       *  1.30 clarifies this to "may have one storage qualifier".
       */
      if ((yyvsp[0].type_qualifier).has_storage())
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate storage qualifier");

      if (!state->ARB_shading_language_420pack_enable &&
          ((yyvsp[0].type_qualifier).flags.q.invariant || (yyvsp[0].type_qualifier).has_interpolation() || (yyvsp[0].type_qualifier).has_layout() ||
           (yyvsp[0].type_qualifier).has_auxiliary_storage())) {
         _mesa_glsl_error(&(yylsp[-1]), state, "storage qualifiers must come after "
                          "invariant, interpolation, layout and auxiliary "
                          "storage qualifiers");
      }

      (yyval.type_qualifier) = (yyvsp[-1].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[-1]), state, (yyvsp[0].type_qualifier));
   }
#line 4723 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 170:
#line 1623 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if ((yyvsp[0].type_qualifier).precision != ast_precision_none)
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate precision qualifier");

      if (!state->ARB_shading_language_420pack_enable && (yyvsp[0].type_qualifier).flags.i != 0)
         _mesa_glsl_error(&(yylsp[-1]), state, "precision qualifiers must come last");

      (yyval.type_qualifier) = (yyvsp[0].type_qualifier);
      (yyval.type_qualifier).precision = (yyvsp[-1].n);
   }
#line 4738 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 171:
#line 1637 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.centroid = 1;
   }
#line 4747 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 172:
#line 1642 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.sample = 1;
   }
#line 4756 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 173:
#line 1650 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.constant = 1;
   }
#line 4765 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 174:
#line 1655 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.attribute = 1;
   }
#line 4774 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 175:
#line 1660 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.varying = 1;
   }
#line 4783 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 176:
#line 1665 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.in = 1;
   }
#line 4792 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 177:
#line 1670 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.out = 1;
   }
#line 4801 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 178:
#line 1675 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.uniform = 1;
   }
#line 4810 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 179:
#line 1680 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.coherent = 1;
   }
#line 4819 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 180:
#line 1685 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q._volatile = 1;
   }
#line 4828 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 181:
#line 1690 "glsl_parser.yy" /* yacc.c:1646  */
    {
      STATIC_ASSERT(sizeof((yyval.type_qualifier).flags.q) <= sizeof((yyval.type_qualifier).flags.i));
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.restrict_flag = 1;
   }
#line 4838 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 182:
#line 1696 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.read_only = 1;
   }
#line 4847 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 183:
#line 1701 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.write_only = 1;
   }
#line 4856 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 184:
#line 1709 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.array_specifier) = new(ctx) ast_array_specifier((yylsp[-1]));
      (yyval.array_specifier)->set_location_range((yylsp[-1]), (yylsp[0]));
   }
#line 4866 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 185:
#line 1715 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.array_specifier) = new(ctx) ast_array_specifier((yylsp[-2]), (yyvsp[-1].expression));
      (yyval.array_specifier)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 4876 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 186:
#line 1721 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.array_specifier) = (yyvsp[-2].array_specifier);

      if (!state->ARB_arrays_of_arrays_enable) {
         _mesa_glsl_error(& (yylsp[-2]), state,
                          "GL_ARB_arrays_of_arrays "
                          "required for defining arrays of arrays");
      } else {
         _mesa_glsl_error(& (yylsp[-2]), state,
                          "only the outermost array dimension can "
                          "be unsized");
      }
   }
#line 4894 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 187:
#line 1735 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.array_specifier) = (yyvsp[-3].array_specifier);

      if (!state->ARB_arrays_of_arrays_enable) {
         _mesa_glsl_error(& (yylsp[-3]), state,
                          "GL_ARB_arrays_of_arrays "
                          "required for defining arrays of arrays");
      }

      (yyval.array_specifier)->add_dimension((yyvsp[-1].expression));
   }
#line 4910 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 189:
#line 1751 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.type_specifier) = (yyvsp[-1].type_specifier);
      (yyval.type_specifier)->array_specifier = (yyvsp[0].array_specifier);
   }
#line 4919 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 190:
#line 1759 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[0].identifier));
      (yyval.type_specifier)->set_location((yylsp[0]));
   }
#line 4929 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 191:
#line 1765 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[0].struct_specifier));
      (yyval.type_specifier)->set_location((yylsp[0]));
   }
#line 4939 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 192:
#line 1771 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[0].identifier));
      (yyval.type_specifier)->set_location((yylsp[0]));
   }
#line 4949 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 193:
#line 1779 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "void"; }
#line 4955 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 194:
#line 1780 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "float"; }
#line 4961 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 195:
#line 1781 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "int"; }
#line 4967 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 196:
#line 1782 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uint"; }
#line 4973 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 197:
#line 1783 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "bool"; }
#line 4979 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 198:
#line 1784 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "vec2"; }
#line 4985 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 199:
#line 1785 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "vec3"; }
#line 4991 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 200:
#line 1786 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "vec4"; }
#line 4997 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 201:
#line 1787 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "bvec2"; }
#line 5003 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 202:
#line 1788 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "bvec3"; }
#line 5009 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 203:
#line 1789 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "bvec4"; }
#line 5015 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 204:
#line 1790 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "ivec2"; }
#line 5021 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 205:
#line 1791 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "ivec3"; }
#line 5027 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 206:
#line 1792 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "ivec4"; }
#line 5033 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 207:
#line 1793 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uvec2"; }
#line 5039 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 208:
#line 1794 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uvec3"; }
#line 5045 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 209:
#line 1795 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uvec4"; }
#line 5051 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 210:
#line 1796 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "mat2"; }
#line 5057 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 211:
#line 1797 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "mat2x3"; }
#line 5063 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 212:
#line 1798 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "mat2x4"; }
#line 5069 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 213:
#line 1799 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "mat3x2"; }
#line 5075 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 214:
#line 1800 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "mat3"; }
#line 5081 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 215:
#line 1801 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "mat3x4"; }
#line 5087 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 216:
#line 1802 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "mat4x2"; }
#line 5093 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 217:
#line 1803 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "mat4x3"; }
#line 5099 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 218:
#line 1804 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "mat4"; }
#line 5105 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 219:
#line 1805 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler1D"; }
#line 5111 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 220:
#line 1806 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2D"; }
#line 5117 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 221:
#line 1807 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2DRect"; }
#line 5123 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 222:
#line 1808 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler3D"; }
#line 5129 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 223:
#line 1809 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "samplerCube"; }
#line 5135 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 224:
#line 1810 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "samplerExternalOES"; }
#line 5141 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 225:
#line 1811 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler1DShadow"; }
#line 5147 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 226:
#line 1812 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2DShadow"; }
#line 5153 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 227:
#line 1813 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2DRectShadow"; }
#line 5159 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 228:
#line 1814 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "samplerCubeShadow"; }
#line 5165 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 229:
#line 1815 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler1DArray"; }
#line 5171 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 230:
#line 1816 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2DArray"; }
#line 5177 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 231:
#line 1817 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler1DArrayShadow"; }
#line 5183 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 232:
#line 1818 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2DArrayShadow"; }
#line 5189 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 233:
#line 1819 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "samplerBuffer"; }
#line 5195 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 234:
#line 1820 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "samplerCubeArray"; }
#line 5201 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 235:
#line 1821 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "samplerCubeArrayShadow"; }
#line 5207 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 236:
#line 1822 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler1D"; }
#line 5213 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 237:
#line 1823 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler2D"; }
#line 5219 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 238:
#line 1824 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler2DRect"; }
#line 5225 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 239:
#line 1825 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler3D"; }
#line 5231 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 240:
#line 1826 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isamplerCube"; }
#line 5237 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 241:
#line 1827 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler1DArray"; }
#line 5243 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 242:
#line 1828 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler2DArray"; }
#line 5249 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 243:
#line 1829 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isamplerBuffer"; }
#line 5255 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 244:
#line 1830 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isamplerCubeArray"; }
#line 5261 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 245:
#line 1831 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler1D"; }
#line 5267 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 246:
#line 1832 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler2D"; }
#line 5273 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 247:
#line 1833 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler2DRect"; }
#line 5279 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 248:
#line 1834 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler3D"; }
#line 5285 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 249:
#line 1835 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usamplerCube"; }
#line 5291 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 250:
#line 1836 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler1DArray"; }
#line 5297 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 251:
#line 1837 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler2DArray"; }
#line 5303 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 252:
#line 1838 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usamplerBuffer"; }
#line 5309 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 253:
#line 1839 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usamplerCubeArray"; }
#line 5315 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 254:
#line 1840 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2DMS"; }
#line 5321 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 255:
#line 1841 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler2DMS"; }
#line 5327 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 256:
#line 1842 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler2DMS"; }
#line 5333 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 257:
#line 1843 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2DMSArray"; }
#line 5339 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 258:
#line 1844 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler2DMSArray"; }
#line 5345 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 259:
#line 1845 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler2DMSArray"; }
#line 5351 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 260:
#line 1846 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image1D"; }
#line 5357 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 261:
#line 1847 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image2D"; }
#line 5363 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 262:
#line 1848 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image3D"; }
#line 5369 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 263:
#line 1849 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image2DRect"; }
#line 5375 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 264:
#line 1850 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "imageCube"; }
#line 5381 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 265:
#line 1851 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "imageBuffer"; }
#line 5387 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 266:
#line 1852 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image1DArray"; }
#line 5393 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 267:
#line 1853 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image2DArray"; }
#line 5399 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 268:
#line 1854 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "imageCubeArray"; }
#line 5405 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 269:
#line 1855 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image2DMS"; }
#line 5411 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 270:
#line 1856 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image2DMSArray"; }
#line 5417 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 271:
#line 1857 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage1D"; }
#line 5423 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 272:
#line 1858 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage2D"; }
#line 5429 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 273:
#line 1859 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage3D"; }
#line 5435 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 274:
#line 1860 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage2DRect"; }
#line 5441 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 275:
#line 1861 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimageCube"; }
#line 5447 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 276:
#line 1862 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimageBuffer"; }
#line 5453 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 277:
#line 1863 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage1DArray"; }
#line 5459 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 278:
#line 1864 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage2DArray"; }
#line 5465 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 279:
#line 1865 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimageCubeArray"; }
#line 5471 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 280:
#line 1866 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage2DMS"; }
#line 5477 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 281:
#line 1867 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage2DMSArray"; }
#line 5483 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 282:
#line 1868 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage1D"; }
#line 5489 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 283:
#line 1869 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage2D"; }
#line 5495 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 284:
#line 1870 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage3D"; }
#line 5501 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 285:
#line 1871 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage2DRect"; }
#line 5507 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 286:
#line 1872 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimageCube"; }
#line 5513 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 287:
#line 1873 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimageBuffer"; }
#line 5519 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 288:
#line 1874 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage1DArray"; }
#line 5525 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 289:
#line 1875 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage2DArray"; }
#line 5531 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 290:
#line 1876 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimageCubeArray"; }
#line 5537 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 291:
#line 1877 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage2DMS"; }
#line 5543 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 292:
#line 1878 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage2DMSArray"; }
#line 5549 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 293:
#line 1879 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "atomic_uint"; }
#line 5555 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 294:
#line 1884 "glsl_parser.yy" /* yacc.c:1646  */
    {
      state->check_precision_qualifiers_allowed(&(yylsp[0]));
      (yyval.n) = ast_precision_high;
   }
#line 5564 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 295:
#line 1889 "glsl_parser.yy" /* yacc.c:1646  */
    {
      state->check_precision_qualifiers_allowed(&(yylsp[0]));
      (yyval.n) = ast_precision_medium;
   }
#line 5573 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 296:
#line 1894 "glsl_parser.yy" /* yacc.c:1646  */
    {
      state->check_precision_qualifiers_allowed(&(yylsp[0]));
      (yyval.n) = ast_precision_low;
   }
#line 5582 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 297:
#line 1902 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.struct_specifier) = new(ctx) ast_struct_specifier((yyvsp[-3].identifier), (yyvsp[-1].declarator_list));
      (yyval.struct_specifier)->set_location_range((yylsp[-3]), (yylsp[0]));
      state->symbols->add_type((yyvsp[-3].identifier), glsl_type::void_type);
   }
#line 5593 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 298:
#line 1909 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.struct_specifier) = new(ctx) ast_struct_specifier(NULL, (yyvsp[-1].declarator_list));
      (yyval.struct_specifier)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 5603 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 299:
#line 1918 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.declarator_list) = (yyvsp[0].declarator_list);
      (yyvsp[0].declarator_list)->link.self_link();
   }
#line 5612 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 300:
#line 1923 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.declarator_list) = (yyvsp[-1].declarator_list);
      (yyval.declarator_list)->link.insert_before(& (yyvsp[0].declarator_list)->link);
   }
#line 5621 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 301:
#line 1931 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_fully_specified_type *const type = (yyvsp[-2].fully_specified_type);
      type->set_location((yylsp[-2]));

      if (type->qualifier.flags.i != 0)
         _mesa_glsl_error(&(yylsp[-2]), state,
			  "only precision qualifiers may be applied to "
			  "structure members");

      (yyval.declarator_list) = new(ctx) ast_declarator_list(type);
      (yyval.declarator_list)->set_location((yylsp[-1]));

      (yyval.declarator_list)->declarations.push_degenerate_list_at_head(& (yyvsp[-1].declaration)->link);
   }
#line 5641 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 302:
#line 1950 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.declaration) = (yyvsp[0].declaration);
      (yyvsp[0].declaration)->link.self_link();
   }
#line 5650 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 303:
#line 1955 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.declaration) = (yyvsp[-2].declaration);
      (yyval.declaration)->link.insert_before(& (yyvsp[0].declaration)->link);
   }
#line 5659 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 304:
#line 1963 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.declaration) = new(ctx) ast_declaration((yyvsp[0].identifier), NULL, NULL);
      (yyval.declaration)->set_location((yylsp[0]));
   }
#line 5669 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 305:
#line 1969 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.declaration) = new(ctx) ast_declaration((yyvsp[-1].identifier), (yyvsp[0].array_specifier), NULL);
      (yyval.declaration)->set_location_range((yylsp[-1]), (yylsp[0]));
   }
#line 5679 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 307:
#line 1979 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.expression) = (yyvsp[-1].expression);
   }
#line 5687 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 308:
#line 1983 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.expression) = (yyvsp[-2].expression);
   }
#line 5695 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 309:
#line 1990 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_aggregate_initializer();
      (yyval.expression)->set_location((yylsp[0]));
      (yyval.expression)->expressions.push_tail(& (yyvsp[0].expression)->link);
   }
#line 5706 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 310:
#line 1997 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyvsp[-2].expression)->expressions.push_tail(& (yyvsp[0].expression)->link);
   }
#line 5714 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 312:
#line 2009 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.node) = (ast_node *) (yyvsp[0].compound_statement); }
#line 5720 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 320:
#line 2024 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.compound_statement) = new(ctx) ast_compound_statement(true, NULL);
      (yyval.compound_statement)->set_location_range((yylsp[-1]), (yylsp[0]));
   }
#line 5730 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 321:
#line 2030 "glsl_parser.yy" /* yacc.c:1646  */
    {
      state->symbols->push_scope();
   }
#line 5738 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 322:
#line 2034 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.compound_statement) = new(ctx) ast_compound_statement(true, (yyvsp[-1].node));
      (yyval.compound_statement)->set_location_range((yylsp[-3]), (yylsp[0]));
      state->symbols->pop_scope();
   }
#line 5749 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 323:
#line 2043 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.node) = (ast_node *) (yyvsp[0].compound_statement); }
#line 5755 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 325:
#line 2049 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.compound_statement) = new(ctx) ast_compound_statement(false, NULL);
      (yyval.compound_statement)->set_location_range((yylsp[-1]), (yylsp[0]));
   }
#line 5765 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 326:
#line 2055 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.compound_statement) = new(ctx) ast_compound_statement(false, (yyvsp[-1].node));
      (yyval.compound_statement)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 5775 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 327:
#line 2064 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if ((yyvsp[0].node) == NULL) {
         _mesa_glsl_error(& (yylsp[0]), state, "<nil> statement");
         assert((yyvsp[0].node) != NULL);
      }

      (yyval.node) = (yyvsp[0].node);
      (yyval.node)->link.self_link();
   }
#line 5789 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 328:
#line 2074 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if ((yyvsp[0].node) == NULL) {
         _mesa_glsl_error(& (yylsp[0]), state, "<nil> statement");
         assert((yyvsp[0].node) != NULL);
      }
      (yyval.node) = (yyvsp[-1].node);
      (yyval.node)->link.insert_before(& (yyvsp[0].node)->link);
   }
#line 5802 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 329:
#line 2086 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.node) = new(ctx) ast_expression_statement(NULL);
      (yyval.node)->set_location((yylsp[0]));
   }
#line 5812 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 330:
#line 2092 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.node) = new(ctx) ast_expression_statement((yyvsp[-1].expression));
      (yyval.node)->set_location((yylsp[-1]));
   }
#line 5822 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 331:
#line 2101 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.node) = new(state) ast_selection_statement((yyvsp[-2].expression), (yyvsp[0].selection_rest_statement).then_statement,
                                              (yyvsp[0].selection_rest_statement).else_statement);
      (yyval.node)->set_location_range((yylsp[-4]), (yylsp[0]));
   }
#line 5832 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 332:
#line 2110 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.selection_rest_statement).then_statement = (yyvsp[-2].node);
      (yyval.selection_rest_statement).else_statement = (yyvsp[0].node);
   }
#line 5841 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 333:
#line 2115 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.selection_rest_statement).then_statement = (yyvsp[0].node);
      (yyval.selection_rest_statement).else_statement = NULL;
   }
#line 5850 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 334:
#line 2123 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.node) = (ast_node *) (yyvsp[0].expression);
   }
#line 5858 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 335:
#line 2127 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[-2].identifier), NULL, (yyvsp[0].expression));
      ast_declarator_list *declarator = new(ctx) ast_declarator_list((yyvsp[-3].fully_specified_type));
      decl->set_location_range((yylsp[-2]), (yylsp[0]));
      declarator->set_location((yylsp[-3]));

      declarator->declarations.push_tail(&decl->link);
      (yyval.node) = declarator;
   }
#line 5873 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 336:
#line 2145 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.node) = new(state) ast_switch_statement((yyvsp[-2].expression), (yyvsp[0].switch_body));
      (yyval.node)->set_location_range((yylsp[-4]), (yylsp[0]));
   }
#line 5882 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 337:
#line 2153 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.switch_body) = new(state) ast_switch_body(NULL);
      (yyval.switch_body)->set_location_range((yylsp[-1]), (yylsp[0]));
   }
#line 5891 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 338:
#line 2158 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.switch_body) = new(state) ast_switch_body((yyvsp[-1].case_statement_list));
      (yyval.switch_body)->set_location_range((yylsp[-2]), (yylsp[0]));
   }
#line 5900 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 339:
#line 2166 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.case_label) = new(state) ast_case_label((yyvsp[-1].expression));
      (yyval.case_label)->set_location((yylsp[-1]));
   }
#line 5909 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 340:
#line 2171 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.case_label) = new(state) ast_case_label(NULL);
      (yyval.case_label)->set_location((yylsp[0]));
   }
#line 5918 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 341:
#line 2179 "glsl_parser.yy" /* yacc.c:1646  */
    {
      ast_case_label_list *labels = new(state) ast_case_label_list();

      labels->labels.push_tail(& (yyvsp[0].case_label)->link);
      (yyval.case_label_list) = labels;
      (yyval.case_label_list)->set_location((yylsp[0]));
   }
#line 5930 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 342:
#line 2187 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.case_label_list) = (yyvsp[-1].case_label_list);
      (yyval.case_label_list)->labels.push_tail(& (yyvsp[0].case_label)->link);
   }
#line 5939 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 343:
#line 2195 "glsl_parser.yy" /* yacc.c:1646  */
    {
      ast_case_statement *stmts = new(state) ast_case_statement((yyvsp[-1].case_label_list));
      stmts->set_location((yylsp[0]));

      stmts->stmts.push_tail(& (yyvsp[0].node)->link);
      (yyval.case_statement) = stmts;
   }
#line 5951 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 344:
#line 2203 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.case_statement) = (yyvsp[-1].case_statement);
      (yyval.case_statement)->stmts.push_tail(& (yyvsp[0].node)->link);
   }
#line 5960 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 345:
#line 2211 "glsl_parser.yy" /* yacc.c:1646  */
    {
      ast_case_statement_list *cases= new(state) ast_case_statement_list();
      cases->set_location((yylsp[0]));

      cases->cases.push_tail(& (yyvsp[0].case_statement)->link);
      (yyval.case_statement_list) = cases;
   }
#line 5972 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 346:
#line 2219 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.case_statement_list) = (yyvsp[-1].case_statement_list);
      (yyval.case_statement_list)->cases.push_tail(& (yyvsp[0].case_statement)->link);
   }
#line 5981 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 347:
#line 2227 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.node) = new(ctx) ast_iteration_statement(ast_iteration_statement::ast_while,
                                            NULL, (yyvsp[-2].node), NULL, (yyvsp[0].node));
      (yyval.node)->set_location_range((yylsp[-4]), (yylsp[-1]));
   }
#line 5992 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 348:
#line 2234 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.node) = new(ctx) ast_iteration_statement(ast_iteration_statement::ast_do_while,
                                            NULL, (yyvsp[-2].expression), NULL, (yyvsp[-5].node));
      (yyval.node)->set_location_range((yylsp[-6]), (yylsp[-1]));
   }
#line 6003 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 349:
#line 2241 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.node) = new(ctx) ast_iteration_statement(ast_iteration_statement::ast_for,
                                            (yyvsp[-3].node), (yyvsp[-2].for_rest_statement).cond, (yyvsp[-2].for_rest_statement).rest, (yyvsp[0].node));
      (yyval.node)->set_location_range((yylsp[-5]), (yylsp[0]));
   }
#line 6014 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 353:
#line 2257 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
   }
#line 6022 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 354:
#line 2264 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.for_rest_statement).cond = (yyvsp[-1].node);
      (yyval.for_rest_statement).rest = NULL;
   }
#line 6031 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 355:
#line 2269 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.for_rest_statement).cond = (yyvsp[-2].node);
      (yyval.for_rest_statement).rest = (yyvsp[0].expression);
   }
#line 6040 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 356:
#line 2278 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_continue, NULL);
      (yyval.node)->set_location((yylsp[-1]));
   }
#line 6050 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 357:
#line 2284 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_break, NULL);
      (yyval.node)->set_location((yylsp[-1]));
   }
#line 6060 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 358:
#line 2290 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_return, NULL);
      (yyval.node)->set_location((yylsp[-1]));
   }
#line 6070 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 359:
#line 2296 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_return, (yyvsp[-1].expression));
      (yyval.node)->set_location_range((yylsp[-2]), (yylsp[-1]));
   }
#line 6080 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 360:
#line 2302 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_discard, NULL);
      (yyval.node)->set_location((yylsp[-1]));
   }
#line 6090 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 361:
#line 2310 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].function_definition); }
#line 6096 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 362:
#line 2311 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 6102 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 363:
#line 2312 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 6108 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 364:
#line 2313 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 6114 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 365:
#line 2318 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.function_definition) = new(ctx) ast_function_definition();
      (yyval.function_definition)->set_location_range((yylsp[-1]), (yylsp[0]));
      (yyval.function_definition)->prototype = (yyvsp[-1].function);
      (yyval.function_definition)->body = (yyvsp[0].compound_statement);

      state->symbols->pop_scope();
   }
#line 6128 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 366:
#line 2332 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].interface_block);
   }
#line 6136 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 367:
#line 2336 "glsl_parser.yy" /* yacc.c:1646  */
    {
      ast_interface_block *block = (yyvsp[0].interface_block);
      if (!block->layout.merge_qualifier(& (yylsp[-1]), state, (yyvsp[-1].type_qualifier))) {
         YYERROR;
      }
      (yyval.node) = block;
   }
#line 6148 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 368:
#line 2347 "glsl_parser.yy" /* yacc.c:1646  */
    {
      ast_interface_block *const block = (yyvsp[-1].interface_block);

      block->block_name = (yyvsp[-5].identifier);
      block->declarations.push_degenerate_list_at_head(& (yyvsp[-3].declarator_list)->link);

      if ((yyvsp[-6].type_qualifier).flags.q.uniform) {
         if (!state->has_uniform_buffer_objects()) {
            _mesa_glsl_error(& (yylsp[-6]), state,
                             "#version 140 / GL_ARB_uniform_buffer_object "
                             "required for defining uniform blocks");
         } else if (state->ARB_uniform_buffer_object_warn) {
            _mesa_glsl_warning(& (yylsp[-6]), state,
                               "#version 140 / GL_ARB_uniform_buffer_object "
                               "required for defining uniform blocks");
         }
      } else {
         if (state->es_shader || state->language_version < 150) {
            _mesa_glsl_error(& (yylsp[-6]), state,
                             "#version 150 required for using "
                             "interface blocks");
         }
      }

      /* From the GLSL 1.50.11 spec, section 4.3.7 ("Interface Blocks"):
       * "It is illegal to have an input block in a vertex shader
       *  or an output block in a fragment shader"
       */
      if ((state->stage == MESA_SHADER_VERTEX) && (yyvsp[-6].type_qualifier).flags.q.in) {
         _mesa_glsl_error(& (yylsp[-6]), state,
                          "`in' interface block is not allowed for "
                          "a vertex shader");
      } else if ((state->stage == MESA_SHADER_FRAGMENT) && (yyvsp[-6].type_qualifier).flags.q.out) {
         _mesa_glsl_error(& (yylsp[-6]), state,
                          "`out' interface block is not allowed for "
                          "a fragment shader");
      }

      /* Since block arrays require names, and both features are added in
       * the same language versions, we don't have to explicitly
       * version-check both things.
       */
      if (block->instance_name != NULL) {
         state->check_version(150, 300, & (yylsp[-6]), "interface blocks with "
                               "an instance name are not allowed");
      }

      uint64_t interface_type_mask;
      struct ast_type_qualifier temp_type_qualifier;

      /* Get a bitmask containing only the in/out/uniform flags, allowing us
       * to ignore other irrelevant flags like interpolation qualifiers.
       */
      temp_type_qualifier.flags.i = 0;
      temp_type_qualifier.flags.q.uniform = true;
      temp_type_qualifier.flags.q.in = true;
      temp_type_qualifier.flags.q.out = true;
      interface_type_mask = temp_type_qualifier.flags.i;

      /* Get the block's interface qualifier.  The interface_qualifier
       * production rule guarantees that only one bit will be set (and
       * it will be in/out/uniform).
       */
      uint64_t block_interface_qualifier = (yyvsp[-6].type_qualifier).flags.i;

      block->layout.flags.i |= block_interface_qualifier;

      foreach_list_typed (ast_declarator_list, member, link, &block->declarations) {
         ast_type_qualifier& qualifier = member->type->qualifier;
         if ((qualifier.flags.i & interface_type_mask) == 0) {
            /* GLSLangSpec.1.50.11, 4.3.7 (Interface Blocks):
             * "If no optional qualifier is used in a member declaration, the
             *  qualifier of the variable is just in, out, or uniform as declared
             *  by interface-qualifier."
             */
            qualifier.flags.i |= block_interface_qualifier;
         } else if ((qualifier.flags.i & interface_type_mask) !=
                    block_interface_qualifier) {
            /* GLSLangSpec.1.50.11, 4.3.7 (Interface Blocks):
             * "If optional qualifiers are used, they can include interpolation
             *  and storage qualifiers and they must declare an input, output,
             *  or uniform variable consistent with the interface qualifier of
             *  the block."
             */
            _mesa_glsl_error(& (yylsp[-6]), state,
                             "uniform/in/out qualifier on "
                             "interface block member does not match "
                             "the interface block");
         }
      }

      (yyval.interface_block) = block;
   }
#line 6246 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 369:
#line 2444 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.in = 1;
   }
#line 6255 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 370:
#line 2449 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.out = 1;
   }
#line 6264 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 371:
#line 2454 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.uniform = 1;
   }
#line 6273 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 372:
#line 2462 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.interface_block) = new(state) ast_interface_block(*state->default_uniform_qualifier,
                                          NULL, NULL);
   }
#line 6282 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 373:
#line 2467 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.interface_block) = new(state) ast_interface_block(*state->default_uniform_qualifier,
                                          (yyvsp[0].identifier), NULL);
      (yyval.interface_block)->set_location((yylsp[0]));
   }
#line 6292 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 374:
#line 2473 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.interface_block) = new(state) ast_interface_block(*state->default_uniform_qualifier,
                                          (yyvsp[-1].identifier), (yyvsp[0].array_specifier));
      (yyval.interface_block)->set_location_range((yylsp[-1]), (yylsp[0]));
   }
#line 6302 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 375:
#line 2482 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.declarator_list) = (yyvsp[0].declarator_list);
      (yyvsp[0].declarator_list)->link.self_link();
   }
#line 6311 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 376:
#line 2487 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.declarator_list) = (yyvsp[-1].declarator_list);
      (yyvsp[0].declarator_list)->link.insert_before(& (yyval.declarator_list)->link);
   }
#line 6320 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 377:
#line 2495 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_fully_specified_type *type = (yyvsp[-2].fully_specified_type);
      type->set_location((yylsp[-2]));

      if (type->qualifier.flags.q.attribute) {
         _mesa_glsl_error(& (yylsp[-2]), state,
                          "keyword 'attribute' cannot be used with "
                          "interface block member");
      } else if (type->qualifier.flags.q.varying) {
         _mesa_glsl_error(& (yylsp[-2]), state,
                          "keyword 'varying' cannot be used with "
                          "interface block member");
      }

      (yyval.declarator_list) = new(ctx) ast_declarator_list(type);
      (yyval.declarator_list)->set_location((yylsp[-1]));

      (yyval.declarator_list)->declarations.push_degenerate_list_at_head(& (yyvsp[-1].declaration)->link);
   }
#line 6345 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 378:
#line 2519 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if (!state->default_uniform_qualifier->merge_qualifier(& (yylsp[-2]), state, (yyvsp[-2].type_qualifier))) {
         YYERROR;
      }
      (yyval.node) = NULL;
   }
#line 6356 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 379:
#line 2527 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
      if (!state->in_qualifier->merge_in_qualifier(& (yylsp[-2]), state, (yyvsp[-2].type_qualifier), (yyval.node))) {
         YYERROR;
      }
   }
#line 6367 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 380:
#line 2535 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if (state->stage != MESA_SHADER_GEOMETRY) {
         _mesa_glsl_error(& (yylsp[-2]), state,
                          "out layout qualifiers only valid in "
                          "geometry shaders");
      } else {
         if ((yyvsp[-2].type_qualifier).flags.q.prim_type) {
            /* Make sure this is a valid output primitive type. */
            switch ((yyvsp[-2].type_qualifier).prim_type) {
            case GL_POINTS:
            case GL_LINE_STRIP:
            case GL_TRIANGLE_STRIP:
               break;
            default:
               _mesa_glsl_error(&(yylsp[-2]), state, "invalid geometry shader output "
                                "primitive type");
               break;
            }
         }
         if (!state->out_qualifier->merge_qualifier(& (yylsp[-2]), state, (yyvsp[-2].type_qualifier)))
            YYERROR;
      }
      (yyval.node) = NULL;
   }
#line 6396 "glsl_parser.cpp" /* yacc.c:1646  */
    break;


#line 6400 "glsl_parser.cpp" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, state, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, state, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, state);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, state);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, state, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, state);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp, state);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
@


1.8
log
@Merge Mesa 10.2.9
@
text
@@


1.7
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a97 3
#ifndef _MSC_VER
#include <strings.h>
#endif
d144 1
a144 1
#line 148 "glsl_parser.cpp" /* yacc.c:339  */
d214 187
a400 187
    SAMPLE = 293,
    NOPERSPECTIVE = 294,
    FLAT = 295,
    SMOOTH = 296,
    MAT2X2 = 297,
    MAT2X3 = 298,
    MAT2X4 = 299,
    MAT3X2 = 300,
    MAT3X3 = 301,
    MAT3X4 = 302,
    MAT4X2 = 303,
    MAT4X3 = 304,
    MAT4X4 = 305,
    SAMPLER1D = 306,
    SAMPLER2D = 307,
    SAMPLER3D = 308,
    SAMPLERCUBE = 309,
    SAMPLER1DSHADOW = 310,
    SAMPLER2DSHADOW = 311,
    SAMPLERCUBESHADOW = 312,
    SAMPLER1DARRAY = 313,
    SAMPLER2DARRAY = 314,
    SAMPLER1DARRAYSHADOW = 315,
    SAMPLER2DARRAYSHADOW = 316,
    SAMPLERCUBEARRAY = 317,
    SAMPLERCUBEARRAYSHADOW = 318,
    ISAMPLER1D = 319,
    ISAMPLER2D = 320,
    ISAMPLER3D = 321,
    ISAMPLERCUBE = 322,
    ISAMPLER1DARRAY = 323,
    ISAMPLER2DARRAY = 324,
    ISAMPLERCUBEARRAY = 325,
    USAMPLER1D = 326,
    USAMPLER2D = 327,
    USAMPLER3D = 328,
    USAMPLERCUBE = 329,
    USAMPLER1DARRAY = 330,
    USAMPLER2DARRAY = 331,
    USAMPLERCUBEARRAY = 332,
    SAMPLER2DRECT = 333,
    ISAMPLER2DRECT = 334,
    USAMPLER2DRECT = 335,
    SAMPLER2DRECTSHADOW = 336,
    SAMPLERBUFFER = 337,
    ISAMPLERBUFFER = 338,
    USAMPLERBUFFER = 339,
    SAMPLER2DMS = 340,
    ISAMPLER2DMS = 341,
    USAMPLER2DMS = 342,
    SAMPLER2DMSARRAY = 343,
    ISAMPLER2DMSARRAY = 344,
    USAMPLER2DMSARRAY = 345,
    SAMPLEREXTERNALOES = 346,
    IMAGE1D = 347,
    IMAGE2D = 348,
    IMAGE3D = 349,
    IMAGE2DRECT = 350,
    IMAGECUBE = 351,
    IMAGEBUFFER = 352,
    IMAGE1DARRAY = 353,
    IMAGE2DARRAY = 354,
    IMAGECUBEARRAY = 355,
    IMAGE2DMS = 356,
    IMAGE2DMSARRAY = 357,
    IIMAGE1D = 358,
    IIMAGE2D = 359,
    IIMAGE3D = 360,
    IIMAGE2DRECT = 361,
    IIMAGECUBE = 362,
    IIMAGEBUFFER = 363,
    IIMAGE1DARRAY = 364,
    IIMAGE2DARRAY = 365,
    IIMAGECUBEARRAY = 366,
    IIMAGE2DMS = 367,
    IIMAGE2DMSARRAY = 368,
    UIMAGE1D = 369,
    UIMAGE2D = 370,
    UIMAGE3D = 371,
    UIMAGE2DRECT = 372,
    UIMAGECUBE = 373,
    UIMAGEBUFFER = 374,
    UIMAGE1DARRAY = 375,
    UIMAGE2DARRAY = 376,
    UIMAGECUBEARRAY = 377,
    UIMAGE2DMS = 378,
    UIMAGE2DMSARRAY = 379,
    IMAGE1DSHADOW = 380,
    IMAGE2DSHADOW = 381,
    IMAGE1DARRAYSHADOW = 382,
    IMAGE2DARRAYSHADOW = 383,
    COHERENT = 384,
    VOLATILE = 385,
    RESTRICT = 386,
    READONLY = 387,
    WRITEONLY = 388,
    ATOMIC_UINT = 389,
    STRUCT = 390,
    VOID_TOK = 391,
    WHILE = 392,
    IDENTIFIER = 393,
    TYPE_IDENTIFIER = 394,
    NEW_IDENTIFIER = 395,
    FLOATCONSTANT = 396,
    INTCONSTANT = 397,
    UINTCONSTANT = 398,
    BOOLCONSTANT = 399,
    FIELD_SELECTION = 400,
    LEFT_OP = 401,
    RIGHT_OP = 402,
    INC_OP = 403,
    DEC_OP = 404,
    LE_OP = 405,
    GE_OP = 406,
    EQ_OP = 407,
    NE_OP = 408,
    AND_OP = 409,
    OR_OP = 410,
    XOR_OP = 411,
    MUL_ASSIGN = 412,
    DIV_ASSIGN = 413,
    ADD_ASSIGN = 414,
    MOD_ASSIGN = 415,
    LEFT_ASSIGN = 416,
    RIGHT_ASSIGN = 417,
    AND_ASSIGN = 418,
    XOR_ASSIGN = 419,
    OR_ASSIGN = 420,
    SUB_ASSIGN = 421,
    INVARIANT = 422,
    PRECISE = 423,
    LOWP = 424,
    MEDIUMP = 425,
    HIGHP = 426,
    SUPERP = 427,
    PRECISION = 428,
    VERSION_TOK = 429,
    EXTENSION = 430,
    LINE = 431,
    COLON = 432,
    EOL = 433,
    INTERFACE = 434,
    OUTPUT = 435,
    PRAGMA_DEBUG_ON = 436,
    PRAGMA_DEBUG_OFF = 437,
    PRAGMA_OPTIMIZE_ON = 438,
    PRAGMA_OPTIMIZE_OFF = 439,
    PRAGMA_INVARIANT_ALL = 440,
    LAYOUT_TOK = 441,
    ASM = 442,
    CLASS = 443,
    UNION = 444,
    ENUM = 445,
    TYPEDEF = 446,
    TEMPLATE = 447,
    THIS = 448,
    PACKED_TOK = 449,
    GOTO = 450,
    INLINE_TOK = 451,
    NOINLINE = 452,
    PUBLIC_TOK = 453,
    STATIC = 454,
    EXTERN = 455,
    EXTERNAL = 456,
    LONG_TOK = 457,
    SHORT_TOK = 458,
    DOUBLE_TOK = 459,
    HALF = 460,
    FIXED_TOK = 461,
    UNSIGNED = 462,
    INPUT_TOK = 463,
    HVEC2 = 464,
    HVEC3 = 465,
    HVEC4 = 466,
    DVEC2 = 467,
    DVEC3 = 468,
    DVEC4 = 469,
    FVEC2 = 470,
    FVEC3 = 471,
    FVEC4 = 472,
    SAMPLER3DRECT = 473,
    SIZEOF = 474,
    CAST = 475,
    NAMESPACE = 476,
    USING = 477,
    RESOURCE = 478,
    PATCH = 479,
d417 1
a417 1
#line 94 "glsl_parser.yy" /* yacc.c:355  */
d454 1
a454 1
#line 458 "glsl_parser.cpp" /* yacc.c:355  */
d482 1
a482 1
#line 486 "glsl_parser.cpp" /* yacc.c:358  */
d726 1
a726 1
#define YYLAST   5400
d733 1
a733 1
#define YYNRULES  385
d735 1
a735 1
#define YYNSTATES  539
d804 39
a842 39
       0,   298,   298,   297,   309,   311,   318,   328,   329,   330,
     331,   332,   345,   347,   351,   352,   353,   357,   366,   374,
     382,   393,   394,   398,   405,   412,   419,   426,   433,   440,
     441,   447,   451,   458,   464,   473,   477,   481,   482,   491,
     492,   496,   497,   501,   507,   519,   523,   529,   537,   548,
     549,   553,   554,   558,   564,   576,   588,   589,   595,   601,
     611,   612,   613,   614,   618,   619,   625,   631,   640,   641,
     647,   656,   657,   663,   672,   673,   679,   685,   691,   700,
     701,   707,   716,   717,   726,   727,   736,   737,   746,   747,
     756,   757,   766,   767,   776,   777,   786,   787,   796,   797,
     798,   799,   800,   801,   802,   803,   804,   805,   806,   810,
     814,   830,   834,   839,   843,   848,   855,   859,   860,   864,
     869,   877,   891,   901,   915,   920,   934,   937,   945,   953,
     965,   978,   983,   988,   997,  1001,  1002,  1012,  1022,  1032,
    1046,  1053,  1063,  1073,  1083,  1093,  1105,  1120,  1127,  1138,
    1145,  1146,  1156,  1157,  1161,  1346,  1485,  1511,  1516,  1524,
    1529,  1534,  1543,  1548,  1553,  1554,  1555,  1556,  1557,  1575,
    1583,  1595,  1619,  1636,  1652,  1672,  1686,  1691,  1699,  1704,
    1709,  1714,  1719,  1738,  1743,  1748,  1753,  1759,  1764,  1772,
    1778,  1784,  1798,  1813,  1814,  1822,  1828,  1834,  1843,  1844,
    1845,  1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,  1854,
    1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,
    1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,
    1875,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,  1884,
    1885,  1886,  1887,  1888,  1889,  1890,  1891,  1892,  1893,  1894,
    1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,  1903,  1904,
    1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,  1913,  1914,
    1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,  1924,
    1925,  1926,  1927,  1928,  1929,  1930,  1931,  1932,  1933,  1934,
    1935,  1936,  1937,  1938,  1939,  1940,  1941,  1942,  1943,  1947,
    1952,  1957,  1965,  1972,  1981,  1986,  1994,  2013,  2018,  2026,
    2032,  2041,  2042,  2046,  2053,  2060,  2067,  2073,  2074,  2078,
    2079,  2080,  2081,  2082,  2083,  2087,  2094,  2093,  2107,  2108,
    2112,  2118,  2127,  2137,  2149,  2155,  2164,  2173,  2178,  2186,
    2190,  2208,  2216,  2221,  2229,  2234,  2242,  2250,  2258,  2266,
    2274,  2282,  2290,  2297,  2304,  2314,  2315,  2319,  2321,  2327,
    2332,  2341,  2347,  2353,  2359,  2365,  2374,  2375,  2376,  2377,
    2381,  2395,  2399,  2422,  2527,  2532,  2537,  2546,  2550,  2556,
    2565,  2570,  2578,  2602,  2610,  2618
d856 3
a858 3
  "UNIFORM", "VARYING", "SAMPLE", "NOPERSPECTIVE", "FLAT", "SMOOTH",
  "MAT2X2", "MAT2X3", "MAT2X4", "MAT3X2", "MAT3X3", "MAT3X4", "MAT4X2",
  "MAT4X3", "MAT4X4", "SAMPLER1D", "SAMPLER2D", "SAMPLER3D", "SAMPLERCUBE",
d885 11
a895 11
  "OR_ASSIGN", "SUB_ASSIGN", "INVARIANT", "PRECISE", "LOWP", "MEDIUMP",
  "HIGHP", "SUPERP", "PRECISION", "VERSION_TOK", "EXTENSION", "LINE",
  "COLON", "EOL", "INTERFACE", "OUTPUT", "PRAGMA_DEBUG_ON",
  "PRAGMA_DEBUG_OFF", "PRAGMA_OPTIMIZE_ON", "PRAGMA_OPTIMIZE_OFF",
  "PRAGMA_INVARIANT_ALL", "LAYOUT_TOK", "ASM", "CLASS", "UNION", "ENUM",
  "TYPEDEF", "TEMPLATE", "THIS", "PACKED_TOK", "GOTO", "INLINE_TOK",
  "NOINLINE", "PUBLIC_TOK", "STATIC", "EXTERN", "EXTERNAL", "LONG_TOK",
  "SHORT_TOK", "DOUBLE_TOK", "HALF", "FIXED_TOK", "UNSIGNED", "INPUT_TOK",
  "HVEC2", "HVEC3", "HVEC4", "DVEC2", "DVEC3", "DVEC4", "FVEC2", "FVEC3",
  "FVEC4", "SAMPLER3DRECT", "SIZEOF", "CAST", "NAMESPACE", "USING",
  "RESOURCE", "PATCH", "SUBROUTINE", "ERROR_TOK", "COMMON", "PARTITION",
d976 1
a976 1
#define YYPACT_NINF -405
d979 1
a979 1
  (!!((Yystate) == (-405)))
d981 1
a981 1
#define YYTABLE_NINF -377
d990 54
a1043 54
     -98,   -37,    78,  -405,   -85,  -405,   -72,  -405,  -405,  -405,
    -405,   -70,    68,  4796,  -405,  -405,   -59,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,   -17,     2,    14,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -115,  -405,  -405,   264,   264,  -405,  -405,
    -405,    43,   -47,   -18,    26,    41,    52,   -66,  -405,  4612,
    -405,  -144,  -114,   -63,    11,  -191,  -405,    77,   313,  5089,
    5261,  5089,  5089,  -405,   -77,  -405,  5089,  -405,  -405,  -405,
    -405,  -405,    49,  -405,    68,  4967,   -83,  -405,  -405,  -405,
    -405,  -405,  5089,  5089,  -405,  5089,  -405,  -405,  -405,  5261,
    -405,  -405,  -405,  -405,  -405,   -80,  -405,  -405,  -405,   524,
    -405,  -405,    32,    32,  -405,  -405,  -405,    32,  -405,  5261,
      32,    32,    68,  -405,   -12,     0,  -203,     3,  -124,  -120,
    -119,  -405,  -405,  -405,  -405,  -405,  -405,  3585,     9,  -405,
      -8,    73,    68,  1272,  -405,  4967,    -2,  -405,  -405,     4,
    -201,  -405,  -405,     8,    10,  1967,    21,    30,    12,  3144,
      38,    39,  -405,  -405,  -405,  -405,  -405,  3987,  3987,  3987,
    -405,  -405,  -405,  -405,  -405,    17,  -405,    42,  -405,  -108,
    -405,  -405,  -405,    40,   -90,  4188,    44,   -76,  3987,   -20,
     -42,    63,   -54,    74,    35,    31,    34,   131,   130,  -125,
    -405,  -405,  -138,  -405,    37,  5109,    56,  -405,  -405,  -405,
    -405,   778,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,    68,  -405,  -405,  -192,  2921,  -161,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,    58,  -405,  3786,  4967,  -405,
     -77,  -137,  -405,  -405,  -405,  1493,  -405,    86,  -405,   -80,
    -405,  -405,   155,  2460,  3987,  -405,  -405,  -126,  3987,  3384,
    -405,  -405,   -75,  -405,  1967,  -405,  -405,  3987,    77,  -405,
    -405,  3987,    61,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  3987,  -405,  3987,  3987,
    3987,  3987,  3987,  3987,  3987,  3987,  3987,  3987,  3987,  3987,
    3987,  3987,  3987,  3987,  3987,  3987,  3987,  3987,  3987,  -405,
    -405,  -405,   -77,  2921,  -158,  2921,  -405,  -405,  2921,  -405,
    -405,    70,    68,    51,  4967,     9,    68,  -405,  -405,  -405,
    -405,  -405,  -405,    66,  -405,  -405,  3384,   -69,  -405,   -64,
      71,    68,    76,  -405,  1032,    72,    71,  -405,    79,  -405,
      80,   -51,  4389,  -405,  -405,  -405,  -405,  -405,   -20,   -20,
     -42,   -42,    63,    63,    63,    63,   -54,   -54,    74,    35,
      31,    34,   131,   130,  -210,  -405,     9,  -405,  2921,  -405,
    -147,  -405,  -405,  -113,   173,  -405,  -405,  3987,  -405,    65,
      87,  1967,    69,    67,  2220,  -405,  -405,  -405,  -405,  -405,
    3987,    89,  -405,  3987,  -405,  2698,  -405,  -405,   -77,    75,
     -39,  3987,  2220,   316,  -405,   -10,  -405,  2921,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,     9,  -405,    83,    71,  -405,
    1967,  3987,    81,  -405,  -405,  1714,  1967,    -6,  -405,  -405,
    -405,  -139,  -405,  -405,  -405,  -405,  -405,  1967,  -405
d1052 53
a1104 53
       5,     0,     0,     0,    13,     6,     0,   179,   178,   202,
     199,   200,   201,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   203,   204,   205,   176,   181,   182,   183,   180,
     177,   161,   160,   159,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   227,   228,   230,   231,   233,
     234,   235,   236,   237,   239,   240,   241,   242,   244,   245,
     246,   247,   249,   250,   251,   253,   254,   255,   256,   258,
     226,   243,   252,   232,   238,   248,   257,   259,   260,   261,
     262,   263,   264,   229,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   184,   185,   186,
     187,   188,   298,     0,   198,   197,   162,   163,   301,   300,
     299,     0,     0,     0,     0,     0,     0,     0,   368,     3,
     367,     0,     0,   118,   126,     0,   135,   140,   167,   166,
       0,   164,   165,   147,   193,   195,   168,   196,    18,   366,
     115,   371,     0,   369,     0,     0,     0,   181,   182,   183,
      21,    22,   162,   163,   145,   167,   170,   146,   169,     0,
       7,     8,     9,    10,    11,     0,    20,    19,   112,     0,
     370,   116,   126,   126,   131,   132,   133,   126,   119,     0,
     126,   126,     0,   113,    14,    16,   141,     0,   181,   182,
     183,   172,   372,   171,   148,   173,   174,     0,   194,   175,
       0,     0,     0,     0,   304,     0,     0,   158,   157,   154,
       0,   150,   156,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,    24,    25,    27,    48,     0,     0,     0,
      60,    61,    62,    63,   334,   326,   330,    23,    29,    56,
      31,    36,    37,     0,     0,    42,     0,    64,     0,    68,
      71,    74,    79,    82,    84,    86,    88,    90,    92,    94,
      96,   109,     0,   316,     0,   167,   147,   319,   332,   318,
     317,     0,   320,   321,   322,   323,   324,   120,   127,   128,
     124,   125,   134,   129,   130,   136,     0,   142,   121,   384,
     385,   383,   189,    64,   111,     0,    46,     0,     0,    17,
     309,     0,   307,   303,   305,     0,   114,     0,   149,     0,
     362,   361,     0,     0,     0,   365,   363,     0,     0,     0,
      57,    58,     0,   325,     0,    33,    34,     0,     0,    40,
      39,     0,   198,    43,    45,    99,   100,   102,   101,   104,
     105,   106,   107,   108,   103,    98,     0,    59,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   335,
     331,   333,   122,     0,   137,     0,   311,   144,     0,   190,
     191,     0,     0,     0,   380,   310,     0,   306,   302,   152,
     153,   155,   151,     0,   356,   355,   358,     0,   364,     0,
     339,     0,     0,    28,     0,     0,    35,    32,     0,    38,
       0,     0,    52,    44,    97,    65,    66,    67,    69,    70,
      72,    73,    77,    78,    75,    76,    80,    81,    83,    85,
      87,    89,    91,    93,     0,   110,   123,   139,     0,   314,
       0,   143,   192,     0,   377,   381,   308,     0,   357,     0,
       0,     0,     0,     0,     0,   327,    30,    55,    50,    49,
       0,   198,    53,     0,   138,     0,   312,   382,   378,     0,
       0,   359,     0,   338,   336,     0,   341,     0,   329,   352,
     328,    54,    95,   313,   315,   379,   373,     0,   360,   354,
       0,     0,     0,   342,   346,     0,   350,     0,   340,   353,
     337,     0,   345,   348,   347,   349,   343,   351,   344
d1110 11
a1120 11
    -405,  -405,  -405,  -405,  -405,  -405,    -1,   176,  -405,  -118,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,    -9,  -405,  -143,  -142,  -317,  -129,
     -52,   -50,   -53,   -46,   -40,   -38,  -405,  -205,  -237,  -405,
    -242,    29,    -3,     1,  -405,  -405,  -405,  -405,   142,   -58,
    -405,  -405,  -405,  -405,  -171,   -11,  -405,  -405,    20,  -405,
    -405,  -110,  -405,  -405,  -211,   -13,  -405,  -405,   124,  -405,
     125,  -198,   -49,   -55,  -374,  -405,    19,  -244,  -404,  -405,
    -405,  -136,   213,    13,    22,  -405,  -405,   -36,  -405,  -405,
    -157,  -405,  -135,  -405,  -405,  -405,  -405,  -405,  -405,   239,
    -405,  -405,  -152,  -405,  -405,   -25,  -405,  -405
d1126 11
a1136 11
      -1,     2,    13,     3,   148,     6,   330,    14,   149,   267,
     268,   269,   435,   270,   271,   272,   273,   274,   275,   276,
     439,   440,   441,   442,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   376,
     292,   325,   293,   294,   152,   153,   154,   310,   208,   209,
     210,   311,   155,   156,   157,   185,   240,   421,   241,   242,
     159,   160,   161,   162,   228,   326,   164,   165,   166,   167,
     233,   234,   331,   332,   407,   470,   297,   298,   299,   300,
     354,   509,   510,   301,   302,   303,   504,   432,   304,   506,
     524,   525,   526,   527,   305,   426,   479,   480,   306,   168,
     169,   170,   171,   172,   499,   413,   414,   173
d1144 190
a1333 68
     163,   342,   158,    11,   232,   317,   222,   347,   521,   522,
     150,    16,   521,   522,   151,   203,  -374,   352,   184,   187,
    -375,  -376,   324,     7,     8,     9,   186,   188,   398,   467,
     396,   469,   227,   338,   471,   334,   203,   339,   363,   217,
     355,   356,   493,   227,   204,   205,   206,   212,   221,   223,
     316,   225,   226,     7,     8,     9,   229,   401,     7,     8,
       9,   403,   232,   213,   232,   204,   205,   206,   452,   453,
     454,   455,   186,   188,   327,   221,     1,   327,     5,   406,
     508,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   495,   408,    10,   494,   468,   385,   386,   508,   398,
     398,   416,   427,    12,   404,     4,   429,   430,    15,   496,
     198,   199,   398,   538,   237,   436,   399,   417,   174,   415,
     201,   514,   324,  -374,   443,   416,   397,   357,   428,   358,
     319,   190,   176,   528,   320,   321,   163,   334,   158,   444,
     175,   497,  -375,   222,   360,   308,   150,   224,   361,   309,
     151,   238,   313,   314,  -376,   464,   216,   412,   227,   433,
     191,   465,   163,   398,   232,   481,   406,   195,   406,   398,
     482,   406,   235,   231,   398,   202,   236,   375,   431,   207,
     138,   139,   140,   489,   430,   221,   296,   490,   295,   230,
     401,   466,   387,   388,   239,   517,   312,   381,   382,   398,
     207,   138,   139,   140,   192,   492,     7,     8,     9,   383,
     384,   315,   138,   139,   140,   214,     8,   215,   323,   193,
     163,   -21,   163,   378,   379,   380,   389,   390,   419,   420,
     194,   406,   296,   -22,   295,   500,   318,   503,   448,   449,
     438,   450,   451,   412,   327,  -117,   523,   328,   350,   351,
     536,   329,   336,   511,   343,   431,   512,   337,   406,   518,
     456,   457,   340,   344,   341,   189,   345,    17,    18,   377,
     406,   348,   349,   353,   359,   -47,   530,   364,   211,   531,
     392,   533,   535,   391,   393,   394,   395,   515,   296,   -46,
     295,   198,   423,   535,   409,   -41,    35,   177,   178,   477,
     179,    39,    40,    41,    42,    43,   472,   474,   486,   398,
     484,   402,   487,   498,   488,   163,    17,    18,   323,   501,
     507,   502,   163,   -51,   505,   196,   211,   211,   520,   516,
     296,   211,   295,   532,   211,   211,   296,   529,   239,   458,
     460,   296,   459,   295,   307,    35,   218,   219,   461,   220,
      39,    40,    41,    42,    43,   462,   411,   437,   463,   422,
     335,   476,   424,   473,   200,   425,   519,   434,   534,   445,
     446,   447,   323,   323,   323,   323,   323,   323,   323,   323,
     323,   323,   323,   323,   323,   323,   323,   323,   197,   475,
     478,     0,   537,   127,   128,   129,   130,   131,     0,     0,
       0,   163,   180,     0,   181,     0,     0,     0,     0,     0,
       0,     0,     0,   296,     0,     0,     0,     0,     0,     0,
       0,   296,     0,   295,     0,     0,     0,     0,     0,     0,
     483,   182,   183,   138,   139,   140,     0,     0,     0,     0,
       0,     0,   127,   128,   129,   130,   131,     0,     0,     0,
     147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   296,     0,
     295,   296,     0,   295,     0,     0,     0,     0,     0,     0,
     182,   183,   138,   139,   140,     0,     0,     0,     0,   296,
       0,   295,     0,     0,     0,     0,     0,     0,     0,   147,
       0,     0,     0,     0,     0,     0,     0,   296,     0,   295,
       0,     0,   296,   296,   295,   295,     0,     0,     0,     0,
       0,     0,     0,     0,   296,     0,   295,    17,    18,    19,
      20,    21,    22,   243,   244,   245,     0,   246,   247,   248,
     249,   250,     0,     0,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,     0,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
       0,     0,     0,   127,   128,   129,   130,   131,   132,   133,
     134,   251,   180,   135,   181,   252,   253,   254,   255,   256,
       0,     0,   257,   258,     0,     0,     0,     0,     0,     0,
d1335 1
a1335 1
       0,   136,   137,   138,   139,   140,     0,   141,     0,     0,
d1337 1
a1337 1
     147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d1341 2
a1342 18
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
       0,     0,     0,   260,   261,   262,   263,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   264,   265,
     266,    17,    18,    19,    20,    21,    22,   243,   244,   245,
       0,   246,   247,   248,   249,   250,     0,     0,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,     0,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,     0,     0,     0,     0,   127,   128,   129,
     130,   131,   132,   133,   134,   251,   180,   135,   181,   252,
     253,   254,   255,   256,     0,     0,   257,   258,     0,     0,
d1344 15
a1358 3
       0,     0,     0,     0,     0,   136,   137,   138,   139,   140,
       0,   141,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   147,     0,     0,     0,     0,     0,
d1360 3
d1366 5
a1370 4
       0,   259,     0,     0,     0,     0,     0,   260,   261,   262,
     263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   264,   265,   400,    17,    18,    19,    20,    21,
      22,   243,   244,   245,     0,   246,   247,   248,   249,   250,
d1381 7
a1387 8
     120,   121,   122,   123,   124,   125,   126,     0,     0,     0,
       0,   127,   128,   129,   130,   131,   132,   133,   134,   251,
     180,   135,   181,   252,   253,   254,   255,   256,     0,     0,
     257,   258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   136,
     137,   138,   139,   140,     0,   141,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   147,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d1391 4
a1394 3
       0,     0,     0,     0,     0,   259,     0,     0,     0,     0,
       0,   260,   261,   262,   263,    17,    18,    19,    20,    21,
      22,     0,     0,     0,     0,     0,   264,   265,   485,     0,
d1396 1
a1396 1
      31,    32,    33,    34,    35,   177,   178,     0,   179,    39,
d1405 29
a1433 7
     120,   121,   122,   123,   124,   125,   126,     0,     0,     0,
       0,   127,   128,   129,   130,   131,   132,   133,   134,     0,
       0,   135,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   182,
     183,   138,   139,   140,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   147,     0,
d1437 7
a1443 5
       0,     0,     0,     0,     0,     0,    17,    18,    19,    20,
      21,    22,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,   177,   178,   333,   179,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
d1451 10
a1460 3
     119,   120,   121,   122,   123,   124,   125,   126,     0,     0,
       0,     0,   127,   128,   129,   130,   131,   132,   133,   134,
       0,     0,   135,     0,     0,     0,     0,     0,     0,     0,
d1462 39
d1502 1
a1502 2
     182,   183,   138,   139,   140,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   147,
d1504 1
a1506 16
       0,     0,     0,     0,     0,     0,     0,    17,    18,    19,
      20,    21,    22,   243,   244,   245,     0,   246,   247,   248,
     249,   250,   521,   522,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,   418,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
       0,     0,     0,   127,   128,   129,   130,   131,   132,   133,
     134,   251,   180,   135,   181,   252,   253,   254,   255,   256,
       0,     0,   257,   258,     0,     0,     0,     0,     0,     0,
d1508 16
a1523 1
       0,   136,   137,   138,   139,   140,     0,   141,     0,     0,
a1524 1
     147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a1527 18
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
       0,     0,     0,   260,   261,   262,   263,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   264,   265,
      17,    18,    19,    20,    21,    22,   243,   244,   245,     0,
     246,   247,   248,   249,   250,     0,     0,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,     0,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,     0,     0,     0,     0,   127,   128,   129,   130,
     131,   132,   133,   134,   251,   180,   135,   181,   252,   253,
     254,   255,   256,     0,     0,   257,   258,     0,     0,     0,
a1528 3
       0,     0,     0,     0,   136,   137,   138,   139,   140,     0,
     141,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   147,     0,     0,     0,     0,     0,     0,
d1530 16
a1548 1
     259,     0,     0,     0,     0,     0,   260,   261,   262,   263,
a1549 15
       0,   264,   265,    17,    18,    19,    20,    21,    22,   243,
     244,   245,     0,   246,   247,   248,   249,   250,     0,     0,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,     0,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,     0,     0,     0,     0,   127,
     128,   129,   130,   131,   132,   133,   134,   251,   180,   135,
     181,   252,   253,   254,   255,   256,     0,     0,   257,   258,
a1550 3
       0,     0,     0,     0,     0,     0,     0,   136,   137,   138,
     139,   140,     0,   141,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   147,     0,     0,     0,
d1553 15
a1569 16
       0,     0,     0,   259,     0,     0,     0,     0,     0,   260,
     261,   262,   263,    17,    18,    19,    20,    21,    22,     0,
       0,     0,     0,     0,   264,   199,     0,     0,     0,     0,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,     0,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,     0,     0,     0,     0,   127,
     128,   129,   130,   131,   132,   133,   134,     0,   180,   135,
     181,   252,   253,   254,   255,   256,     0,     0,   257,   258,
a1570 3
       0,     0,     0,     0,     0,     0,     0,   136,   137,   138,
     139,   140,     0,   141,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   147,     0,     0,     0,
d1575 2
a1576 3
       0,     0,     0,   259,     0,     0,     0,     0,     0,   260,
     261,   262,   263,    19,    20,    21,    22,     0,     0,     0,
       0,     0,     0,     0,   264,     0,     0,     0,    23,    24,
d1578 1
a1578 1
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d1587 3
a1589 3
     124,   125,   126,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,   134,     0,   180,   135,   181,   252,
     253,   254,   255,   256,     0,     0,   257,   258,     0,     0,
d1598 4
a1601 4
       0,   259,     0,     0,     0,     0,     0,   260,   261,   262,
     263,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,   405,   513,     0,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,    47,    48,    49,    50,
d1609 3
a1611 4
     121,   122,   123,   124,   125,   126,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,   133,   134,     0,   180,
     135,   181,   252,   253,   254,   255,   256,     0,     0,   257,
     258,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a1617 16
       0,     0,     0,     0,     0,     0,     0,     0,     0,    19,
      20,    21,    22,     0,   259,     0,     0,     0,     0,     0,
     260,   261,   262,   263,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,   405,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
     134,     0,   180,   135,   181,   252,   253,   254,   255,   256,
       0,     0,   257,   258,     0,     0,     0,     0,     0,     0,
d1619 5
a1623 12
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
       0,     0,     0,   260,   261,   262,   263,    17,    18,    19,
      20,    21,    22,     0,     0,     0,     0,     0,   346,     0,
       0,     0,     0,     0,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,   177,   178,     0,
     179,    39,    40,    41,    42,    43,    44,    45,    46,    47,
d1631 3
a1633 24
     118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
       0,     0,     0,   127,   128,   129,   130,   131,   132,   133,
     134,     0,   180,   135,   181,   252,   253,   254,   255,   256,
       0,     0,   257,   258,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   182,   183,   138,   139,   140,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      19,    20,    21,    22,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,   259,     0,     0,
       0,     0,     0,   260,   261,   262,   263,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   132,
     133,   134,     0,   180,   135,   181,   252,   253,   254,   255,
     256,     0,     0,   257,   258,     0,     0,     0,     0,     0,
d1636 21
d1660 1
a1660 15
       0,    19,    20,    21,    22,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   259,     0,
       0,   322,     0,     0,   260,   261,   262,   263,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,   134,     0,   180,   135,   181,   252,   253,   254,
     255,   256,     0,     0,   257,   258,     0,     0,     0,     0,
d1663 1
d1665 1
d1667 129
a1795 5
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    19,    20,    21,    22,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,   259,
       0,     0,   410,     0,     0,   260,   261,   262,   263,    44,
d1803 15
a1817 11
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   132,   133,   134,     0,   180,   135,   181,   252,   253,
     254,   255,   256,     0,     0,   257,   258,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    19,    20,    21,    22,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    23,    24,
d1819 49
a1867 1
     259,     0,     0,     0,     0,     0,   260,   261,   262,   263,
d1876 18
a1893 100
     124,   125,   126,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,   362,     0,   180,   135,   181,   252,
     253,   254,   255,   256,     0,     0,   257,   258,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    19,    20,    21,    22,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,   259,     0,     0,     0,     0,     0,   260,   261,   262,
     263,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   132,   133,   491,     0,   180,   135,   181,
     252,   253,   254,   255,   256,     0,     0,   257,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    17,    18,    19,    20,    21,
      22,     0,   259,     0,     0,     0,     0,     0,   260,   261,
     262,   263,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,     0,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,     0,     0,     0,
       0,   127,   128,   129,   130,   131,   132,   133,   134,     0,
       0,   135,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   136,
     137,   138,   139,   140,     0,   141,     0,    12,     0,     0,
       0,     0,     0,   142,   143,   144,   145,   146,   147,    17,
      18,    19,    20,    21,    22,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,     0,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,     0,     0,     0,     0,   127,   128,   129,   130,   131,
     132,   133,   134,     0,     0,   135,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   136,   137,   138,   139,   140,     0,   141,
      17,    18,    19,    20,    21,    22,     0,   142,   143,   144,
     145,   146,   147,     0,     0,     0,     0,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
     177,   178,     0,   179,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,    17,    18,     0,     0,   127,   128,   129,   130,
     131,   132,   133,   134,     0,     0,   135,     0,     0,     0,
       0,     0,    17,    18,     0,     0,     0,     0,     0,     0,
       0,    35,   177,   178,     0,   179,    39,    40,    41,    42,
      43,     0,     0,     0,   182,   183,   138,   139,   140,     0,
       0,    35,    36,    37,     0,    38,    39,    40,    41,    42,
      43,     0,     0,   147,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   127,   128,
     129,   130,   131,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   127,   128,
     129,   130,   131,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   182,   183,   138,   139,
     140,     0,     0,     0,     0,     0,    19,    20,    21,    22,
       0,     0,     0,     0,     0,   147,   182,   183,   138,   139,
     140,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,     0,     0,   147,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,    47,    48,    49,    50,
d1901 3
a1903 75
     121,   122,   123,   124,   125,   126,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,   133,   134,     0,     0,
     135
};

static const yytype_int16 yycheck[] =
{
      13,   245,    13,     4,   175,   216,   158,   249,    18,    19,
      13,    12,    18,    19,    13,     4,   140,   259,   136,   137,
     140,   140,   227,   138,   139,   140,   136,   137,   238,   403,
     155,   405,   235,   234,   408,   233,     4,   238,   275,   157,
     148,   149,   252,   235,    33,    34,    35,   238,   158,   159,
     253,   161,   162,   138,   139,   140,   166,   301,   138,   139,
     140,   253,   233,   254,   235,    33,    34,    35,   385,   386,
     387,   388,   182,   183,   235,   185,   174,   235,     0,   316,
     484,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   238,   253,   178,   468,   253,   150,   151,   502,   238,
     238,   238,   344,   175,   315,   142,   348,   349,   178,   256,
     254,   255,   238,   252,   194,   357,   254,   254,   177,   330,
     234,   495,   327,   140,   361,   238,   251,   235,   254,   237,
     254,   178,   133,   507,   254,   254,   149,   335,   149,   376,
     255,   254,   140,   295,   234,   203,   149,   160,   238,   207,
     149,   231,   210,   211,   140,   397,   157,   328,   235,   234,
     178,   398,   175,   238,   335,   234,   403,   233,   405,   238,
     234,   408,   255,   174,   238,   238,   189,   253,   349,   168,
     169,   170,   171,   234,   426,   295,   199,   238,   199,   140,
     434,   402,   246,   247,   195,   234,   209,   239,   240,   238,
     168,   169,   170,   171,   178,   442,   138,   139,   140,   146,
     147,   212,   169,   170,   171,   138,   139,   140,   227,   178,
     233,   233,   235,   243,   244,   245,   152,   153,   142,   143,
     178,   468,   245,   233,   245,   477,   233,   481,   381,   382,
     358,   383,   384,   414,   235,   234,   256,   255,   257,   258,
     256,   178,   254,   490,   233,   426,   493,   253,   495,   501,
     389,   390,   254,   233,   254,   141,   254,     3,     4,   278,
     507,   233,   233,   256,   234,   233,   520,   233,   154,   521,
     249,   525,   526,   248,   250,   154,   156,   498,   301,   233,
     301,   254,   137,   537,   236,   234,    32,    33,    34,   233,
      36,    37,    38,    39,    40,    41,   236,   256,   236,   238,
     234,   312,   233,   140,   234,   328,     3,     4,   327,   254,
     253,   234,   335,   234,   255,   149,   202,   203,    12,   254,
     343,   207,   343,   252,   210,   211,   349,   254,   339,   391,
     393,   354,   392,   354,   202,    32,    33,    34,   394,    36,
      37,    38,    39,    40,    41,   395,   327,   358,   396,   339,
     235,   416,   343,   412,   151,   343,   502,   354,   525,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   149,   414,
     426,    -1,   527,   129,   130,   131,   132,   133,    -1,    -1,
      -1,   414,   138,    -1,   140,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   426,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   434,    -1,   434,    -1,    -1,    -1,    -1,    -1,    -1,
     431,   167,   168,   169,   170,   171,    -1,    -1,    -1,    -1,
      -1,    -1,   129,   130,   131,   132,   133,    -1,    -1,    -1,
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   481,    -1,
     481,   484,    -1,   484,    -1,    -1,    -1,    -1,    -1,    -1,
     167,   168,   169,   170,   171,    -1,    -1,    -1,    -1,   502,
      -1,   502,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,   520,
      -1,    -1,   525,   526,   525,   526,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   537,    -1,   537,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    -1,    13,    14,    15,
      16,    17,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
      -1,    -1,    -1,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
      -1,    -1,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,
d1905 3
a1907 1
      -1,   167,   168,   169,   170,   171,    -1,   173,    -1,    -1,
a1908 1
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1911 4
a1914 30
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,
      -1,    -1,    -1,   239,   240,   241,   242,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   254,   255,
     256,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      -1,    13,    14,    15,    16,    17,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,    -1,    -1,    -1,    -1,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,    -1,    -1,   148,   149,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
      -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,    -1,   239,   240,   241,
     242,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   254,   255,   256,     3,     4,     5,     6,     7,
d1926 7
a1932 8
     118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
      -1,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,    -1,    -1,
     148,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,    -1,   173,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1936 1
d1939 1
a1939 1
       8,    -1,    -1,    -1,    -1,    -1,   254,   255,   256,    -1,
d1950 7
a1956 7
     118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
      -1,   129,   130,   131,   132,   133,   134,   135,   136,    -1,
      -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,
d1960 29
a1988 5
      -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   256,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
d1996 26
a2021 3
     117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
      -1,    -1,   129,   130,   131,   132,   133,   134,   135,   136,
      -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a2023 2
     167,   168,   169,   170,   171,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,
a2026 16
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    -1,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,   256,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
      -1,    -1,    -1,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
      -1,    -1,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,
a2027 1
      -1,   167,   168,   169,   170,   171,    -1,   173,    -1,    -1,
d2029 41
a2069 1
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a2072 18
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,
      -1,    -1,    -1,   239,   240,   241,   242,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   254,   255,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    -1,
      13,    14,    15,    16,    17,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,    -1,    -1,    -1,    -1,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,    -1,    -1,   148,   149,    -1,    -1,    -1,
a2073 3
      -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,    -1,
     173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,
d2075 16
a2093 1
     233,    -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,
a2094 15
      -1,   254,   255,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    -1,    13,    14,    15,    16,    17,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,    -1,    -1,   148,   149,
a2095 3
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,
d2098 15
a2114 16
      -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,   239,
     240,   241,   242,     3,     4,     5,     6,     7,     8,    -1,
      -1,    -1,    -1,    -1,   254,   255,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,
     130,   131,   132,   133,   134,   135,   136,    -1,   138,   139,
     140,   141,   142,   143,   144,   145,    -1,    -1,   148,   149,
a2115 3
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,
d2120 2
a2121 3
      -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,   239,
     240,   241,   242,     5,     6,     7,     8,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,    20,    21,
d2123 1
a2123 1
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d2132 3
a2134 3
     122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,   136,    -1,   138,   139,   140,   141,
     142,   143,   144,   145,    -1,    -1,   148,   149,    -1,    -1,
d2145 2
a2146 2
      29,    30,    31,   255,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    45,    46,    47,    48,
d2154 4
a2157 4
     119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,   135,   136,    -1,   138,
     139,   140,   141,   142,   143,   144,   145,    -1,    -1,   148,
     149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d2164 1
a2164 1
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
a2166 24
      26,    27,    28,    29,    30,    31,   255,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
     136,    -1,   138,   139,   140,   141,   142,   143,   144,   145,
      -1,    -1,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,
      -1,    -1,    -1,   239,   240,   241,   242,     3,     4,     5,
       6,     7,     8,    -1,    -1,    -1,    -1,    -1,   254,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
d2176 3
a2178 24
     116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
      -1,    -1,    -1,   129,   130,   131,   132,   133,   134,   135,
     136,    -1,   138,   139,   140,   141,   142,   143,   144,   145,
      -1,    -1,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,   233,    -1,    -1,
      -1,    -1,    -1,   239,   240,   241,   242,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,   136,    -1,   138,   139,   140,   141,   142,   143,   144,
     145,    -1,    -1,   148,   149,    -1,    -1,    -1,    -1,    -1,
d2181 21
d2205 1
a2205 56
      -1,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,   233,    -1,
      -1,   236,    -1,    -1,   239,   240,   241,   242,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,   135,   136,    -1,   138,   139,   140,   141,   142,   143,
     144,   145,    -1,    -1,   148,   149,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,   233,
      -1,    -1,   236,    -1,    -1,   239,   240,   241,   242,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,   136,    -1,   138,   139,   140,   141,   142,
     143,   144,   145,    -1,    -1,   148,   149,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     5,     6,     7,     8,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
     233,    -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,   136,    -1,   138,   139,   140,   141,
     142,   143,   144,   145,    -1,    -1,   148,   149,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d2208 1
d2210 1
d2212 4
d2217 1
a2217 1
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
d2219 2
a2220 2
      31,   233,    -1,    -1,    -1,    -1,    -1,   239,   240,   241,
     242,    42,    43,    44,    45,    46,    47,    48,    49,    50,
d2228 2
a2229 90
     121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,   136,    -1,   138,   139,   140,
     141,   142,   143,   144,   145,    -1,    -1,   148,   149,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,
       8,    -1,   233,    -1,    -1,    -1,    -1,    -1,   239,   240,
     241,   242,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
      -1,   129,   130,   131,   132,   133,   134,   135,   136,    -1,
      -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,    -1,   173,    -1,   175,    -1,    -1,
      -1,    -1,    -1,   181,   182,   183,   184,   185,   186,     3,
       4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,    -1,    -1,    -1,    -1,   129,   130,   131,   132,   133,
     134,   135,   136,    -1,    -1,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,    -1,   173,
       3,     4,     5,     6,     7,     8,    -1,   181,   182,   183,
     184,   185,   186,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,     3,     4,    -1,    -1,   129,   130,   131,   132,
     133,   134,   135,   136,    -1,    -1,   139,    -1,    -1,    -1,
      -1,    -1,     3,     4,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    33,    34,    -1,    36,    37,    38,    39,    40,
      41,    -1,    -1,    -1,   167,   168,   169,   170,   171,    -1,
      -1,    32,    33,    34,    -1,    36,    37,    38,    39,    40,
      41,    -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
     131,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
     131,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   167,   168,   169,   170,
     171,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,     8,
      -1,    -1,    -1,    -1,    -1,   186,   167,   168,   169,   170,
     171,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,   186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,   135,   136,    -1,    -1,
     139
d2236 2
a2237 2
       0,   174,   258,   260,   142,     0,   262,   138,   139,   140,
     178,   263,   175,   259,   264,   178,   263,     3,     4,     5,
d2248 42
a2289 42
     118,   119,   120,   121,   122,   123,   124,   129,   130,   131,
     132,   133,   134,   135,   136,   139,   167,   168,   169,   170,
     171,   173,   181,   182,   183,   184,   185,   186,   261,   265,
     299,   300,   301,   302,   303,   309,   310,   311,   312,   317,
     318,   319,   320,   322,   323,   324,   325,   326,   356,   357,
     358,   359,   360,   364,   177,   255,   263,    33,    34,    36,
     138,   140,   167,   168,   266,   312,   318,   266,   318,   325,
     178,   178,   178,   178,   178,   233,   264,   356,   254,   255,
     339,   234,   238,     4,    33,    34,    35,   168,   305,   306,
     307,   325,   238,   254,   138,   140,   263,   266,    33,    34,
      36,   318,   359,   318,   322,   318,   318,   235,   321,   318,
     140,   263,   311,   327,   328,   255,   322,   194,   231,   263,
     313,   315,   316,     9,    10,    11,    13,    14,    15,    16,
      17,   137,   141,   142,   143,   144,   145,   148,   149,   233,
     239,   240,   241,   242,   254,   255,   256,   266,   267,   268,
     270,   271,   272,   273,   274,   275,   276,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   297,   299,   300,   312,   322,   333,   334,   335,
     336,   340,   341,   342,   345,   351,   355,   305,   306,   306,
     304,   308,   322,   306,   306,   263,   253,   321,   233,   254,
     254,   254,   236,   281,   294,   298,   322,   235,   255,   178,
     263,   329,   330,   256,   328,   327,   254,   253,   234,   238,
     254,   254,   334,   233,   233,   254,   254,   297,   233,   233,
     281,   281,   297,   256,   337,   148,   149,   235,   237,   234,
     234,   238,   136,   295,   233,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   253,   296,   281,   243,   244,
     245,   239,   240,   146,   147,   150,   151,   246,   247,   152,
     153,   248,   249,   250,   154,   156,   155,   251,   238,   254,
     256,   334,   263,   253,   321,   255,   295,   331,   253,   236,
     236,   298,   311,   362,   363,   321,   238,   254,   256,   142,
     143,   314,   315,   137,   333,   341,   352,   297,   254,   297,
     297,   311,   344,   234,   340,   269,   297,   263,   266,   277,
     278,   279,   280,   295,   295,   281,   281,   281,   283,   283,
     284,   284,   285,   285,   285,   285,   286,   286,   287,   288,
     289,   290,   291,   292,   297,   295,   321,   331,   253,   331,
     332,   331,   236,   329,   256,   362,   330,   233,   344,   353,
     354,   234,   234,   263,   234,   256,   236,   233,   234,   234,
     238,   136,   295,   252,   331,   238,   256,   254,   140,   361,
     297,   254,   234,   334,   343,   255,   346,   253,   335,   338,
     339,   295,   295,   256,   331,   321,   254,   234,   297,   338,
      12,    18,    19,   256,   347,   348,   349,   350,   331,   254,
     334,   297,   252,   334,   347,   334,   256,   349,   252
d2297 18
a2314 18
     265,   266,   266,   267,   267,   267,   267,   267,   267,   268,
     268,   268,   268,   268,   268,   269,   270,   271,   271,   272,
     272,   273,   273,   274,   274,   275,   276,   276,   276,   277,
     277,   278,   278,   279,   279,   280,   281,   281,   281,   281,
     282,   282,   282,   282,   283,   283,   283,   283,   284,   284,
     284,   285,   285,   285,   286,   286,   286,   286,   286,   287,
     287,   287,   288,   288,   289,   289,   290,   290,   291,   291,
     292,   292,   293,   293,   294,   294,   295,   295,   296,   296,
     296,   296,   296,   296,   296,   296,   296,   296,   296,   297,
     297,   298,   299,   299,   299,   299,   300,   301,   301,   302,
     302,   303,   304,   304,   305,   305,   306,   306,   306,   306,
     306,   307,   307,   307,   308,   309,   309,   309,   309,   309,
     310,   310,   310,   310,   310,   310,   310,   311,   311,   312,
     313,   313,   314,   314,   315,   315,   315,   316,   316,   317,
     317,   317,   318,   318,   318,   318,   318,   318,   318,   318,
     318,   318,   318,   318,   318,   318,   319,   319,   320,   320,
     320,   320,   320,   320,   320,   320,   320,   320,   320,   321,
     321,   321,   321,   322,   322,   323,   323,   323,   324,   324,
d2324 10
a2333 10
     324,   324,   324,   324,   324,   324,   324,   324,   324,   325,
     325,   325,   326,   326,   327,   327,   328,   329,   329,   330,
     330,   331,   331,   331,   332,   332,   333,   334,   334,   335,
     335,   335,   335,   335,   335,   336,   337,   336,   338,   338,
     339,   339,   340,   340,   341,   341,   342,   343,   343,   344,
     344,   345,   346,   346,   347,   347,   348,   348,   349,   349,
     350,   350,   351,   351,   351,   352,   352,   353,   353,   354,
     354,   355,   355,   355,   355,   355,   356,   356,   356,   356,
     357,   358,   358,   359,   360,   360,   360,   361,   361,   361,
     362,   362,   363,   364,   364,   364
d2341 17
a2357 8
       2,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       4,     1,     3,     2,     2,     1,     1,     1,     3,     2,
       2,     2,     1,     2,     3,     2,     1,     1,     1,     2,
       2,     2,     1,     2,     3,     2,     1,     2,     2,     2,
       1,     1,     1,     1,     1,     3,     3,     3,     1,     3,
       3,     1,     3,     3,     1,     3,     3,     3,     3,     1,
       3,     3,     1,     3,     1,     3,     1,     3,     1,     3,
       1,     3,     1,     3,     1,     5,     1,     3,     1,     1,
a2358 9
       3,     1,     2,     2,     4,     1,     2,     1,     1,     2,
       3,     3,     2,     3,     2,     2,     0,     2,     2,     2,
       2,     1,     1,     1,     1,     1,     3,     4,     6,     5,
       1,     2,     3,     5,     4,     2,     2,     1,     2,     4,
       1,     3,     1,     1,     1,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     3,     4,     1,     2,     1,     1,     1,     1,     1,
d2368 10
a2377 10
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     5,     4,     1,     2,     3,     1,     3,     1,
       2,     1,     3,     4,     1,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     4,     1,     1,
       2,     3,     1,     2,     1,     2,     5,     3,     1,     1,
       4,     5,     2,     3,     3,     2,     1,     2,     2,     2,
       1,     2,     5,     7,     6,     1,     1,     1,     0,     2,
       3,     2,     2,     2,     3,     2,     1,     1,     1,     1,
       2,     1,     2,     7,     1,     1,     1,     0,     1,     2,
       1,     2,     3,     3,     3,     3
d2971 1
a2971 1
#line 83 "glsl_parser.yy" /* yacc.c:1429  */
d2980 1
a2980 1
#line 2984 "glsl_parser.cpp" /* yacc.c:1429  */
d3167 1
a3167 1
#line 298 "glsl_parser.yy" /* yacc.c:1646  */
d3171 1
a3171 1
#line 3175 "glsl_parser.cpp" /* yacc.c:1646  */
d3175 1
a3175 1
#line 302 "glsl_parser.yy" /* yacc.c:1646  */
d3181 1
a3181 1
#line 3185 "glsl_parser.cpp" /* yacc.c:1646  */
d3185 1
a3185 1
#line 312 "glsl_parser.yy" /* yacc.c:1646  */
d3192 1
a3192 1
#line 3196 "glsl_parser.cpp" /* yacc.c:1646  */
d3196 1
a3196 1
#line 319 "glsl_parser.yy" /* yacc.c:1646  */
d3203 1
a3203 1
#line 3207 "glsl_parser.cpp" /* yacc.c:1646  */
d3207 1
a3207 1
#line 333 "glsl_parser.yy" /* yacc.c:1646  */
d3218 1
a3218 1
#line 3222 "glsl_parser.cpp" /* yacc.c:1646  */
d3222 1
a3222 1
#line 358 "glsl_parser.yy" /* yacc.c:1646  */
d3228 1
a3228 1
#line 3232 "glsl_parser.cpp" /* yacc.c:1646  */
d3232 1
a3232 1
#line 367 "glsl_parser.yy" /* yacc.c:1646  */
d3240 1
a3240 1
#line 3244 "glsl_parser.cpp" /* yacc.c:1646  */
d3244 1
a3244 1
#line 375 "glsl_parser.yy" /* yacc.c:1646  */
d3252 1
a3252 14
#line 3256 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 20:
#line 382 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if (!state->allow_extension_directive_midshader) {
         _mesa_glsl_error(& (yylsp[0]), state,
                          "#extension directive is not allowed "
                          "in the middle of a shader");
         YYERROR;
      }
   }
#line 3269 "glsl_parser.cpp" /* yacc.c:1646  */
d3255 2
a3256 2
  case 23:
#line 399 "glsl_parser.yy" /* yacc.c:1646  */
d3263 1
a3263 1
#line 3280 "glsl_parser.cpp" /* yacc.c:1646  */
d3266 2
a3267 2
  case 24:
#line 406 "glsl_parser.yy" /* yacc.c:1646  */
d3274 1
a3274 1
#line 3291 "glsl_parser.cpp" /* yacc.c:1646  */
d3277 2
a3278 2
  case 25:
#line 413 "glsl_parser.yy" /* yacc.c:1646  */
d3285 1
a3285 1
#line 3302 "glsl_parser.cpp" /* yacc.c:1646  */
d3288 2
a3289 2
  case 26:
#line 420 "glsl_parser.yy" /* yacc.c:1646  */
d3296 1
a3296 1
#line 3313 "glsl_parser.cpp" /* yacc.c:1646  */
d3299 2
a3300 2
  case 27:
#line 427 "glsl_parser.yy" /* yacc.c:1646  */
d3307 1
a3307 1
#line 3324 "glsl_parser.cpp" /* yacc.c:1646  */
d3310 2
a3311 2
  case 28:
#line 434 "glsl_parser.yy" /* yacc.c:1646  */
d3315 1
a3315 1
#line 3332 "glsl_parser.cpp" /* yacc.c:1646  */
d3318 2
a3319 2
  case 30:
#line 442 "glsl_parser.yy" /* yacc.c:1646  */
d3325 1
a3325 1
#line 3342 "glsl_parser.cpp" /* yacc.c:1646  */
d3328 2
a3329 2
  case 31:
#line 448 "glsl_parser.yy" /* yacc.c:1646  */
d3333 1
a3333 1
#line 3350 "glsl_parser.cpp" /* yacc.c:1646  */
d3336 2
a3337 2
  case 32:
#line 452 "glsl_parser.yy" /* yacc.c:1646  */
d3344 1
a3344 1
#line 3361 "glsl_parser.cpp" /* yacc.c:1646  */
d3347 2
a3348 2
  case 33:
#line 459 "glsl_parser.yy" /* yacc.c:1646  */
d3354 1
a3354 1
#line 3371 "glsl_parser.cpp" /* yacc.c:1646  */
d3357 2
a3358 2
  case 34:
#line 465 "glsl_parser.yy" /* yacc.c:1646  */
d3364 1
a3364 1
#line 3381 "glsl_parser.cpp" /* yacc.c:1646  */
d3367 2
a3368 2
  case 38:
#line 483 "glsl_parser.yy" /* yacc.c:1646  */
d3374 1
a3374 1
#line 3391 "glsl_parser.cpp" /* yacc.c:1646  */
d3377 2
a3378 2
  case 43:
#line 502 "glsl_parser.yy" /* yacc.c:1646  */
d3384 1
a3384 1
#line 3401 "glsl_parser.cpp" /* yacc.c:1646  */
d3387 2
a3388 2
  case 44:
#line 508 "glsl_parser.yy" /* yacc.c:1646  */
d3394 1
a3394 1
#line 3411 "glsl_parser.cpp" /* yacc.c:1646  */
d3397 2
a3398 2
  case 46:
#line 524 "glsl_parser.yy" /* yacc.c:1646  */
d3404 1
a3404 1
#line 3421 "glsl_parser.cpp" /* yacc.c:1646  */
d3407 2
a3408 2
  case 47:
#line 530 "glsl_parser.yy" /* yacc.c:1646  */
d3416 1
a3416 1
#line 3433 "glsl_parser.cpp" /* yacc.c:1646  */
d3419 2
a3420 2
  case 48:
#line 538 "glsl_parser.yy" /* yacc.c:1646  */
d3428 1
a3428 1
#line 3445 "glsl_parser.cpp" /* yacc.c:1646  */
d3431 2
a3432 2
  case 53:
#line 559 "glsl_parser.yy" /* yacc.c:1646  */
d3438 1
a3438 1
#line 3455 "glsl_parser.cpp" /* yacc.c:1646  */
d3441 2
a3442 2
  case 54:
#line 565 "glsl_parser.yy" /* yacc.c:1646  */
d3448 1
a3448 1
#line 3465 "glsl_parser.cpp" /* yacc.c:1646  */
d3451 2
a3452 2
  case 55:
#line 577 "glsl_parser.yy" /* yacc.c:1646  */
d3460 1
a3460 1
#line 3477 "glsl_parser.cpp" /* yacc.c:1646  */
d3463 2
a3464 2
  case 57:
#line 590 "glsl_parser.yy" /* yacc.c:1646  */
d3470 1
a3470 1
#line 3487 "glsl_parser.cpp" /* yacc.c:1646  */
d3473 2
a3474 2
  case 58:
#line 596 "glsl_parser.yy" /* yacc.c:1646  */
d3480 1
a3480 1
#line 3497 "glsl_parser.cpp" /* yacc.c:1646  */
d3483 2
a3484 2
  case 59:
#line 602 "glsl_parser.yy" /* yacc.c:1646  */
d3490 1
a3490 1
#line 3507 "glsl_parser.cpp" /* yacc.c:1646  */
d3493 2
a3494 2
  case 60:
#line 611 "glsl_parser.yy" /* yacc.c:1646  */
d3496 1
a3496 1
#line 3513 "glsl_parser.cpp" /* yacc.c:1646  */
d3499 2
a3500 2
  case 61:
#line 612 "glsl_parser.yy" /* yacc.c:1646  */
d3502 1
a3502 1
#line 3519 "glsl_parser.cpp" /* yacc.c:1646  */
d3505 2
a3506 2
  case 62:
#line 613 "glsl_parser.yy" /* yacc.c:1646  */
d3508 1
a3508 1
#line 3525 "glsl_parser.cpp" /* yacc.c:1646  */
d3511 2
a3512 2
  case 63:
#line 614 "glsl_parser.yy" /* yacc.c:1646  */
d3514 1
a3514 1
#line 3531 "glsl_parser.cpp" /* yacc.c:1646  */
d3517 2
a3518 2
  case 65:
#line 620 "glsl_parser.yy" /* yacc.c:1646  */
d3524 1
a3524 1
#line 3541 "glsl_parser.cpp" /* yacc.c:1646  */
d3527 2
a3528 2
  case 66:
#line 626 "glsl_parser.yy" /* yacc.c:1646  */
d3534 1
a3534 1
#line 3551 "glsl_parser.cpp" /* yacc.c:1646  */
d3537 2
a3538 2
  case 67:
#line 632 "glsl_parser.yy" /* yacc.c:1646  */
d3544 1
a3544 1
#line 3561 "glsl_parser.cpp" /* yacc.c:1646  */
d3547 2
a3548 2
  case 69:
#line 642 "glsl_parser.yy" /* yacc.c:1646  */
d3554 1
a3554 1
#line 3571 "glsl_parser.cpp" /* yacc.c:1646  */
d3557 2
a3558 2
  case 70:
#line 648 "glsl_parser.yy" /* yacc.c:1646  */
d3564 1
a3564 1
#line 3581 "glsl_parser.cpp" /* yacc.c:1646  */
d3567 2
a3568 2
  case 72:
#line 658 "glsl_parser.yy" /* yacc.c:1646  */
d3574 1
a3574 1
#line 3591 "glsl_parser.cpp" /* yacc.c:1646  */
d3577 2
a3578 2
  case 73:
#line 664 "glsl_parser.yy" /* yacc.c:1646  */
d3584 1
a3584 1
#line 3601 "glsl_parser.cpp" /* yacc.c:1646  */
d3587 2
a3588 2
  case 75:
#line 674 "glsl_parser.yy" /* yacc.c:1646  */
d3594 1
a3594 1
#line 3611 "glsl_parser.cpp" /* yacc.c:1646  */
d3597 2
a3598 2
  case 76:
#line 680 "glsl_parser.yy" /* yacc.c:1646  */
d3604 1
a3604 1
#line 3621 "glsl_parser.cpp" /* yacc.c:1646  */
d3607 2
a3608 2
  case 77:
#line 686 "glsl_parser.yy" /* yacc.c:1646  */
d3614 1
a3614 1
#line 3631 "glsl_parser.cpp" /* yacc.c:1646  */
d3617 2
a3618 2
  case 78:
#line 692 "glsl_parser.yy" /* yacc.c:1646  */
d3624 1
a3624 1
#line 3641 "glsl_parser.cpp" /* yacc.c:1646  */
d3627 2
a3628 2
  case 80:
#line 702 "glsl_parser.yy" /* yacc.c:1646  */
d3634 1
a3634 1
#line 3651 "glsl_parser.cpp" /* yacc.c:1646  */
d3637 2
a3638 2
  case 81:
#line 708 "glsl_parser.yy" /* yacc.c:1646  */
d3644 1
a3644 1
#line 3661 "glsl_parser.cpp" /* yacc.c:1646  */
d3647 2
a3648 2
  case 83:
#line 718 "glsl_parser.yy" /* yacc.c:1646  */
d3654 1
a3654 1
#line 3671 "glsl_parser.cpp" /* yacc.c:1646  */
d3657 2
a3658 2
  case 85:
#line 728 "glsl_parser.yy" /* yacc.c:1646  */
d3664 1
a3664 1
#line 3681 "glsl_parser.cpp" /* yacc.c:1646  */
d3667 2
a3668 2
  case 87:
#line 738 "glsl_parser.yy" /* yacc.c:1646  */
d3674 1
a3674 1
#line 3691 "glsl_parser.cpp" /* yacc.c:1646  */
d3677 2
a3678 2
  case 89:
#line 748 "glsl_parser.yy" /* yacc.c:1646  */
d3684 1
a3684 1
#line 3701 "glsl_parser.cpp" /* yacc.c:1646  */
d3687 2
a3688 2
  case 91:
#line 758 "glsl_parser.yy" /* yacc.c:1646  */
d3694 1
a3694 1
#line 3711 "glsl_parser.cpp" /* yacc.c:1646  */
d3697 2
a3698 2
  case 93:
#line 768 "glsl_parser.yy" /* yacc.c:1646  */
d3704 1
a3704 1
#line 3721 "glsl_parser.cpp" /* yacc.c:1646  */
d3707 2
a3708 2
  case 95:
#line 778 "glsl_parser.yy" /* yacc.c:1646  */
d3714 1
a3714 1
#line 3731 "glsl_parser.cpp" /* yacc.c:1646  */
d3717 2
a3718 2
  case 97:
#line 788 "glsl_parser.yy" /* yacc.c:1646  */
d3724 1
a3724 1
#line 3741 "glsl_parser.cpp" /* yacc.c:1646  */
d3727 2
a3728 2
  case 98:
#line 796 "glsl_parser.yy" /* yacc.c:1646  */
d3730 1
a3730 1
#line 3747 "glsl_parser.cpp" /* yacc.c:1646  */
d3733 2
a3734 2
  case 99:
#line 797 "glsl_parser.yy" /* yacc.c:1646  */
d3736 1
a3736 1
#line 3753 "glsl_parser.cpp" /* yacc.c:1646  */
d3739 2
a3740 2
  case 100:
#line 798 "glsl_parser.yy" /* yacc.c:1646  */
d3742 1
a3742 1
#line 3759 "glsl_parser.cpp" /* yacc.c:1646  */
d3745 2
a3746 2
  case 101:
#line 799 "glsl_parser.yy" /* yacc.c:1646  */
d3748 1
a3748 1
#line 3765 "glsl_parser.cpp" /* yacc.c:1646  */
d3751 2
a3752 2
  case 102:
#line 800 "glsl_parser.yy" /* yacc.c:1646  */
d3754 1
a3754 1
#line 3771 "glsl_parser.cpp" /* yacc.c:1646  */
d3757 2
a3758 2
  case 103:
#line 801 "glsl_parser.yy" /* yacc.c:1646  */
d3760 1
a3760 1
#line 3777 "glsl_parser.cpp" /* yacc.c:1646  */
d3763 2
a3764 2
  case 104:
#line 802 "glsl_parser.yy" /* yacc.c:1646  */
d3766 1
a3766 1
#line 3783 "glsl_parser.cpp" /* yacc.c:1646  */
d3769 2
a3770 2
  case 105:
#line 803 "glsl_parser.yy" /* yacc.c:1646  */
d3772 1
a3772 1
#line 3789 "glsl_parser.cpp" /* yacc.c:1646  */
d3775 2
a3776 2
  case 106:
#line 804 "glsl_parser.yy" /* yacc.c:1646  */
d3778 1
a3778 1
#line 3795 "glsl_parser.cpp" /* yacc.c:1646  */
d3781 2
a3782 2
  case 107:
#line 805 "glsl_parser.yy" /* yacc.c:1646  */
d3784 1
a3784 1
#line 3801 "glsl_parser.cpp" /* yacc.c:1646  */
d3787 2
a3788 2
  case 108:
#line 806 "glsl_parser.yy" /* yacc.c:1646  */
d3790 1
a3790 1
#line 3807 "glsl_parser.cpp" /* yacc.c:1646  */
d3793 2
a3794 2
  case 109:
#line 811 "glsl_parser.yy" /* yacc.c:1646  */
d3798 1
a3798 1
#line 3815 "glsl_parser.cpp" /* yacc.c:1646  */
d3801 2
a3802 2
  case 110:
#line 815 "glsl_parser.yy" /* yacc.c:1646  */
d3815 1
a3815 1
#line 3832 "glsl_parser.cpp" /* yacc.c:1646  */
d3818 2
a3819 2
  case 112:
#line 835 "glsl_parser.yy" /* yacc.c:1646  */
d3824 1
a3824 1
#line 3841 "glsl_parser.cpp" /* yacc.c:1646  */
d3827 2
a3828 2
  case 113:
#line 840 "glsl_parser.yy" /* yacc.c:1646  */
d3832 1
a3832 1
#line 3849 "glsl_parser.cpp" /* yacc.c:1646  */
d3835 2
a3836 2
  case 114:
#line 844 "glsl_parser.yy" /* yacc.c:1646  */
d3841 1
a3841 1
#line 3858 "glsl_parser.cpp" /* yacc.c:1646  */
d3844 2
a3845 2
  case 115:
#line 849 "glsl_parser.yy" /* yacc.c:1646  */
d3849 1
a3849 1
#line 3866 "glsl_parser.cpp" /* yacc.c:1646  */
d3852 2
a3853 2
  case 119:
#line 865 "glsl_parser.yy" /* yacc.c:1646  */
d3858 1
a3858 1
#line 3875 "glsl_parser.cpp" /* yacc.c:1646  */
d3861 2
a3862 2
  case 120:
#line 870 "glsl_parser.yy" /* yacc.c:1646  */
d3867 1
a3867 1
#line 3884 "glsl_parser.cpp" /* yacc.c:1646  */
d3870 2
a3871 2
  case 121:
#line 878 "glsl_parser.yy" /* yacc.c:1646  */
d3882 1
a3882 1
#line 3899 "glsl_parser.cpp" /* yacc.c:1646  */
d3885 2
a3886 2
  case 122:
#line 892 "glsl_parser.yy" /* yacc.c:1646  */
d3896 1
a3896 1
#line 3913 "glsl_parser.cpp" /* yacc.c:1646  */
d3899 2
a3900 2
  case 123:
#line 902 "glsl_parser.yy" /* yacc.c:1646  */
d3911 1
a3911 1
#line 3928 "glsl_parser.cpp" /* yacc.c:1646  */
d3914 2
a3915 2
  case 124:
#line 916 "glsl_parser.yy" /* yacc.c:1646  */
d3920 1
a3920 1
#line 3937 "glsl_parser.cpp" /* yacc.c:1646  */
d3923 2
a3924 2
  case 125:
#line 921 "glsl_parser.yy" /* yacc.c:1646  */
d3934 1
a3934 1
#line 3951 "glsl_parser.cpp" /* yacc.c:1646  */
d3937 2
a3938 2
  case 126:
#line 934 "glsl_parser.yy" /* yacc.c:1646  */
d3942 1
a3942 1
#line 3959 "glsl_parser.cpp" /* yacc.c:1646  */
d3945 2
a3946 2
  case 127:
#line 938 "glsl_parser.yy" /* yacc.c:1646  */
d3954 1
a3954 1
#line 3971 "glsl_parser.cpp" /* yacc.c:1646  */
d3957 2
a3958 14
  case 128:
#line 946 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if ((yyvsp[0].type_qualifier).flags.q.precise)
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate precise qualifier");

      (yyval.type_qualifier) = (yyvsp[0].type_qualifier);
      (yyval.type_qualifier).flags.q.precise = 1;
   }
#line 3983 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 129:
#line 954 "glsl_parser.yy" /* yacc.c:1646  */
d3964 2
a3965 2
         _mesa_glsl_error(&(yylsp[-1]), state, "in/out/inout must come after const "
                                      "or precise");
d3970 1
a3970 1
#line 3999 "glsl_parser.cpp" /* yacc.c:1646  */
d3973 2
a3974 2
  case 130:
#line 966 "glsl_parser.yy" /* yacc.c:1646  */
d3985 1
a3985 1
#line 4014 "glsl_parser.cpp" /* yacc.c:1646  */
d3988 2
a3989 2
  case 131:
#line 979 "glsl_parser.yy" /* yacc.c:1646  */
d3994 1
a3994 1
#line 4023 "glsl_parser.cpp" /* yacc.c:1646  */
d3997 2
a3998 2
  case 132:
#line 984 "glsl_parser.yy" /* yacc.c:1646  */
d4003 1
a4003 1
#line 4032 "glsl_parser.cpp" /* yacc.c:1646  */
d4006 2
a4007 2
  case 133:
#line 989 "glsl_parser.yy" /* yacc.c:1646  */
d4013 1
a4013 1
#line 4042 "glsl_parser.cpp" /* yacc.c:1646  */
d4016 2
a4017 2
  case 136:
#line 1003 "glsl_parser.yy" /* yacc.c:1646  */
d4027 1
a4027 1
#line 4056 "glsl_parser.cpp" /* yacc.c:1646  */
d4030 2
a4031 2
  case 137:
#line 1013 "glsl_parser.yy" /* yacc.c:1646  */
d4041 1
a4041 1
#line 4070 "glsl_parser.cpp" /* yacc.c:1646  */
d4044 2
a4045 2
  case 138:
#line 1023 "glsl_parser.yy" /* yacc.c:1646  */
d4055 1
a4055 1
#line 4084 "glsl_parser.cpp" /* yacc.c:1646  */
d4058 2
a4059 2
  case 139:
#line 1033 "glsl_parser.yy" /* yacc.c:1646  */
d4069 1
a4069 1
#line 4098 "glsl_parser.cpp" /* yacc.c:1646  */
d4072 2
a4073 2
  case 140:
#line 1047 "glsl_parser.yy" /* yacc.c:1646  */
d4080 1
a4080 1
#line 4109 "glsl_parser.cpp" /* yacc.c:1646  */
d4083 2
a4084 2
  case 141:
#line 1054 "glsl_parser.yy" /* yacc.c:1646  */
d4094 1
a4094 1
#line 4123 "glsl_parser.cpp" /* yacc.c:1646  */
d4097 2
a4098 2
  case 142:
#line 1064 "glsl_parser.yy" /* yacc.c:1646  */
d4108 1
a4108 1
#line 4137 "glsl_parser.cpp" /* yacc.c:1646  */
d4111 2
a4112 2
  case 143:
#line 1074 "glsl_parser.yy" /* yacc.c:1646  */
d4122 1
a4122 1
#line 4151 "glsl_parser.cpp" /* yacc.c:1646  */
d4125 2
a4126 2
  case 144:
#line 1084 "glsl_parser.yy" /* yacc.c:1646  */
d4136 1
a4136 1
#line 4165 "glsl_parser.cpp" /* yacc.c:1646  */
d4139 2
a4140 2
  case 145:
#line 1094 "glsl_parser.yy" /* yacc.c:1646  */
d4152 1
a4152 1
#line 4181 "glsl_parser.cpp" /* yacc.c:1646  */
d4155 2
a4156 18
  case 146:
#line 1106 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[0].identifier), NULL, NULL);
      decl->set_location((yylsp[0]));

      (yyval.declarator_list) = new(ctx) ast_declarator_list(NULL);
      (yyval.declarator_list)->set_location_range((yylsp[-1]), (yylsp[0]));
      (yyval.declarator_list)->precise = true;

      (yyval.declarator_list)->declarations.push_tail(&decl->link);
   }
#line 4197 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 147:
#line 1121 "glsl_parser.yy" /* yacc.c:1646  */
d4163 1
a4163 1
#line 4208 "glsl_parser.cpp" /* yacc.c:1646  */
d4166 2
a4167 2
  case 148:
#line 1128 "glsl_parser.yy" /* yacc.c:1646  */
d4175 1
a4175 1
#line 4220 "glsl_parser.cpp" /* yacc.c:1646  */
d4178 2
a4179 2
  case 149:
#line 1139 "glsl_parser.yy" /* yacc.c:1646  */
d4183 1
a4183 1
#line 4228 "glsl_parser.cpp" /* yacc.c:1646  */
d4186 2
a4187 2
  case 151:
#line 1147 "glsl_parser.yy" /* yacc.c:1646  */
d4194 1
a4194 1
#line 4239 "glsl_parser.cpp" /* yacc.c:1646  */
d4197 2
a4198 2
  case 152:
#line 1156 "glsl_parser.yy" /* yacc.c:1646  */
d4200 1
a4200 1
#line 4245 "glsl_parser.cpp" /* yacc.c:1646  */
d4203 2
a4204 2
  case 153:
#line 1157 "glsl_parser.yy" /* yacc.c:1646  */
d4206 1
a4206 1
#line 4251 "glsl_parser.cpp" /* yacc.c:1646  */
d4209 2
a4210 2
  case 154:
#line 1162 "glsl_parser.yy" /* yacc.c:1646  */
d4395 1
a4395 1
#line 4440 "glsl_parser.cpp" /* yacc.c:1646  */
d4398 2
a4399 2
  case 155:
#line 1347 "glsl_parser.yy" /* yacc.c:1646  */
a4461 16
      if (state->stage == MESA_SHADER_GEOMETRY) {
         if (match_layout_qualifier("stream", (yyvsp[-2].identifier), state) == 0 &&
             state->check_explicit_attrib_stream_allowed(& (yylsp[0]))) {
            (yyval.type_qualifier).flags.q.stream = 1;

            if ((yyvsp[0].n) < 0) {
               _mesa_glsl_error(& (yylsp[0]), state,
                                "invalid stream %d specified", (yyvsp[0].n));
               YYERROR;
            } else {
               (yyval.type_qualifier).flags.q.explicit_stream = 1;
               (yyval.type_qualifier).stream = (yyvsp[0].n);
            }
         }
      }

d4522 1
a4522 1
#line 4583 "glsl_parser.cpp" /* yacc.c:1646  */
d4525 2
a4526 2
  case 156:
#line 1486 "glsl_parser.yy" /* yacc.c:1646  */
d4540 1
a4540 1
#line 4601 "glsl_parser.cpp" /* yacc.c:1646  */
d4543 2
a4544 2
  case 157:
#line 1512 "glsl_parser.yy" /* yacc.c:1646  */
d4549 1
a4549 1
#line 4610 "glsl_parser.cpp" /* yacc.c:1646  */
d4552 2
a4553 2
  case 158:
#line 1517 "glsl_parser.yy" /* yacc.c:1646  */
d4558 1
a4558 1
#line 4619 "glsl_parser.cpp" /* yacc.c:1646  */
d4561 2
a4562 2
  case 159:
#line 1525 "glsl_parser.yy" /* yacc.c:1646  */
d4567 1
a4567 1
#line 4628 "glsl_parser.cpp" /* yacc.c:1646  */
d4570 2
a4571 2
  case 160:
#line 1530 "glsl_parser.yy" /* yacc.c:1646  */
d4576 1
a4576 1
#line 4637 "glsl_parser.cpp" /* yacc.c:1646  */
d4579 2
a4580 2
  case 161:
#line 1535 "glsl_parser.yy" /* yacc.c:1646  */
d4585 1
a4585 1
#line 4646 "glsl_parser.cpp" /* yacc.c:1646  */
d4588 2
a4589 2
  case 162:
#line 1544 "glsl_parser.yy" /* yacc.c:1646  */
d4594 1
a4594 10
#line 4655 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 163:
#line 1549 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.precise = 1;
   }
#line 4664 "glsl_parser.cpp" /* yacc.c:1646  */
d4597 2
a4598 2
  case 168:
#line 1558 "glsl_parser.yy" /* yacc.c:1646  */
d4603 1
a4603 13
#line 4673 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 169:
#line 1576 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if ((yyvsp[0].type_qualifier).flags.q.precise)
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate \"precise\" qualifier");

      (yyval.type_qualifier) = (yyvsp[0].type_qualifier);
      (yyval.type_qualifier).flags.q.precise = 1;
   }
#line 4685 "glsl_parser.cpp" /* yacc.c:1646  */
d4606 2
a4607 2
  case 170:
#line 1584 "glsl_parser.yy" /* yacc.c:1646  */
d4612 1
a4612 1
      if (!state->ARB_shading_language_420pack_enable && (yyvsp[0].type_qualifier).flags.q.precise)
d4614 2
a4615 1
                          "\"invariant\" must come after \"precise\"");
d4620 1
a4620 1
#line 4701 "glsl_parser.cpp" /* yacc.c:1646  */
d4623 2
a4624 2
  case 171:
#line 1596 "glsl_parser.yy" /* yacc.c:1646  */
d4639 6
a4644 2
      if (!state->ARB_shading_language_420pack_enable &&
          ((yyvsp[0].type_qualifier).flags.q.precise || (yyvsp[0].type_qualifier).flags.q.invariant)) {
d4646 1
a4646 1
                          "after \"precise\" or \"invariant\"");
d4652 1
a4652 1
#line 4729 "glsl_parser.cpp" /* yacc.c:1646  */
d4655 2
a4656 2
  case 172:
#line 1620 "glsl_parser.yy" /* yacc.c:1646  */
d4658 5
a4662 8
      /* In the absence of ARB_shading_language_420pack, layout qualifiers may
       * appear no later than auxiliary storage qualifiers. There is no
       * particularly clear spec language mandating this, but in all examples
       * the layout qualifier precedes the storage qualifier.
       *
       * We allow combinations of layout with interpolation, invariant or
       * precise qualifiers since these are useful in ARB_separate_shader_objects.
       * There is no clear spec guidance on this either.
d4667 9
d4679 1
a4679 1
#line 4750 "glsl_parser.cpp" /* yacc.c:1646  */
d4682 2
a4683 2
  case 173:
#line 1637 "glsl_parser.yy" /* yacc.c:1646  */
d4691 1
a4691 2
          ((yyvsp[0].type_qualifier).flags.q.precise || (yyvsp[0].type_qualifier).flags.q.invariant ||
           (yyvsp[0].type_qualifier).has_interpolation() || (yyvsp[0].type_qualifier).has_layout())) {
d4698 1
a4698 1
#line 4770 "glsl_parser.cpp" /* yacc.c:1646  */
d4701 2
a4702 2
  case 174:
#line 1653 "glsl_parser.yy" /* yacc.c:1646  */
d4712 2
a4713 2
          ((yyvsp[0].type_qualifier).flags.q.precise || (yyvsp[0].type_qualifier).flags.q.invariant || (yyvsp[0].type_qualifier).has_interpolation() ||
           (yyvsp[0].type_qualifier).has_layout() || (yyvsp[0].type_qualifier).has_auxiliary_storage())) {
d4715 1
a4715 1
                          "precise, invariant, interpolation, layout and auxiliary "
d4722 1
a4722 1
#line 4794 "glsl_parser.cpp" /* yacc.c:1646  */
d4725 2
a4726 2
  case 175:
#line 1673 "glsl_parser.yy" /* yacc.c:1646  */
d4737 1
a4737 1
#line 4809 "glsl_parser.cpp" /* yacc.c:1646  */
d4740 2
a4741 2
  case 176:
#line 1687 "glsl_parser.yy" /* yacc.c:1646  */
d4746 1
a4746 1
#line 4818 "glsl_parser.cpp" /* yacc.c:1646  */
d4749 2
a4750 2
  case 177:
#line 1692 "glsl_parser.yy" /* yacc.c:1646  */
d4755 1
a4755 1
#line 4827 "glsl_parser.cpp" /* yacc.c:1646  */
d4758 2
a4759 2
  case 178:
#line 1700 "glsl_parser.yy" /* yacc.c:1646  */
d4764 1
a4764 1
#line 4836 "glsl_parser.cpp" /* yacc.c:1646  */
d4767 2
a4768 2
  case 179:
#line 1705 "glsl_parser.yy" /* yacc.c:1646  */
d4773 1
a4773 1
#line 4845 "glsl_parser.cpp" /* yacc.c:1646  */
d4776 2
a4777 2
  case 180:
#line 1710 "glsl_parser.yy" /* yacc.c:1646  */
d4782 1
a4782 1
#line 4854 "glsl_parser.cpp" /* yacc.c:1646  */
d4785 2
a4786 2
  case 181:
#line 1715 "glsl_parser.yy" /* yacc.c:1646  */
d4791 1
a4791 1
#line 4863 "glsl_parser.cpp" /* yacc.c:1646  */
d4794 2
a4795 2
  case 182:
#line 1720 "glsl_parser.yy" /* yacc.c:1646  */
a4798 14

      if (state->stage == MESA_SHADER_GEOMETRY &&
          state->has_explicit_attrib_stream()) {
         /* Section 4.3.8.2 (Output Layout Qualifiers) of the GLSL 4.00
          * spec says:
          *
          *     "If the block or variable is declared with the stream
          *     identifier, it is associated with the specified stream;
          *     otherwise, it is associated with the current default stream."
          */
          (yyval.type_qualifier).flags.q.stream = 1;
          (yyval.type_qualifier).flags.q.explicit_stream = 0;
          (yyval.type_qualifier).stream = state->out_qualifier->stream;
      }
d4800 1
a4800 1
#line 4886 "glsl_parser.cpp" /* yacc.c:1646  */
d4803 2
a4804 2
  case 183:
#line 1739 "glsl_parser.yy" /* yacc.c:1646  */
d4809 1
a4809 1
#line 4895 "glsl_parser.cpp" /* yacc.c:1646  */
d4812 2
a4813 2
  case 184:
#line 1744 "glsl_parser.yy" /* yacc.c:1646  */
d4818 1
a4818 1
#line 4904 "glsl_parser.cpp" /* yacc.c:1646  */
d4821 2
a4822 2
  case 185:
#line 1749 "glsl_parser.yy" /* yacc.c:1646  */
d4827 1
a4827 1
#line 4913 "glsl_parser.cpp" /* yacc.c:1646  */
d4830 2
a4831 2
  case 186:
#line 1754 "glsl_parser.yy" /* yacc.c:1646  */
d4837 1
a4837 1
#line 4923 "glsl_parser.cpp" /* yacc.c:1646  */
d4840 2
a4841 2
  case 187:
#line 1760 "glsl_parser.yy" /* yacc.c:1646  */
d4846 1
a4846 1
#line 4932 "glsl_parser.cpp" /* yacc.c:1646  */
d4849 2
a4850 2
  case 188:
#line 1765 "glsl_parser.yy" /* yacc.c:1646  */
d4855 1
a4855 1
#line 4941 "glsl_parser.cpp" /* yacc.c:1646  */
d4858 2
a4859 2
  case 189:
#line 1773 "glsl_parser.yy" /* yacc.c:1646  */
d4865 1
a4865 1
#line 4951 "glsl_parser.cpp" /* yacc.c:1646  */
d4868 2
a4869 2
  case 190:
#line 1779 "glsl_parser.yy" /* yacc.c:1646  */
d4875 1
a4875 1
#line 4961 "glsl_parser.cpp" /* yacc.c:1646  */
d4878 2
a4879 2
  case 191:
#line 1785 "glsl_parser.yy" /* yacc.c:1646  */
d4893 1
a4893 1
#line 4979 "glsl_parser.cpp" /* yacc.c:1646  */
d4896 2
a4897 2
  case 192:
#line 1799 "glsl_parser.yy" /* yacc.c:1646  */
d4909 1
a4909 1
#line 4995 "glsl_parser.cpp" /* yacc.c:1646  */
d4912 2
a4913 2
  case 194:
#line 1815 "glsl_parser.yy" /* yacc.c:1646  */
d4918 1
a4918 1
#line 5004 "glsl_parser.cpp" /* yacc.c:1646  */
d4921 2
a4922 2
  case 195:
#line 1823 "glsl_parser.yy" /* yacc.c:1646  */
d4928 1
a4928 1
#line 5014 "glsl_parser.cpp" /* yacc.c:1646  */
d4931 2
a4932 2
  case 196:
#line 1829 "glsl_parser.yy" /* yacc.c:1646  */
d4938 1
a4938 1
#line 5024 "glsl_parser.cpp" /* yacc.c:1646  */
d4941 2
a4942 2
  case 197:
#line 1835 "glsl_parser.yy" /* yacc.c:1646  */
d4948 1
a4948 1
#line 5034 "glsl_parser.cpp" /* yacc.c:1646  */
d4951 2
a4952 2
  case 198:
#line 1843 "glsl_parser.yy" /* yacc.c:1646  */
d4954 1
a4954 1
#line 5040 "glsl_parser.cpp" /* yacc.c:1646  */
d4957 2
a4958 2
  case 199:
#line 1844 "glsl_parser.yy" /* yacc.c:1646  */
d4960 1
a4960 1
#line 5046 "glsl_parser.cpp" /* yacc.c:1646  */
d4963 2
a4964 2
  case 200:
#line 1845 "glsl_parser.yy" /* yacc.c:1646  */
d4966 1
a4966 1
#line 5052 "glsl_parser.cpp" /* yacc.c:1646  */
d4969 2
a4970 2
  case 201:
#line 1846 "glsl_parser.yy" /* yacc.c:1646  */
d4972 1
a4972 1
#line 5058 "glsl_parser.cpp" /* yacc.c:1646  */
d4975 2
a4976 2
  case 202:
#line 1847 "glsl_parser.yy" /* yacc.c:1646  */
d4978 1
a4978 1
#line 5064 "glsl_parser.cpp" /* yacc.c:1646  */
d4981 2
a4982 2
  case 203:
#line 1848 "glsl_parser.yy" /* yacc.c:1646  */
d4984 1
a4984 1
#line 5070 "glsl_parser.cpp" /* yacc.c:1646  */
d4987 2
a4988 2
  case 204:
#line 1849 "glsl_parser.yy" /* yacc.c:1646  */
d4990 1
a4990 1
#line 5076 "glsl_parser.cpp" /* yacc.c:1646  */
d4993 2
a4994 2
  case 205:
#line 1850 "glsl_parser.yy" /* yacc.c:1646  */
d4996 1
a4996 1
#line 5082 "glsl_parser.cpp" /* yacc.c:1646  */
d4999 2
a5000 2
  case 206:
#line 1851 "glsl_parser.yy" /* yacc.c:1646  */
d5002 1
a5002 1
#line 5088 "glsl_parser.cpp" /* yacc.c:1646  */
d5005 2
a5006 2
  case 207:
#line 1852 "glsl_parser.yy" /* yacc.c:1646  */
d5008 1
a5008 1
#line 5094 "glsl_parser.cpp" /* yacc.c:1646  */
d5011 2
a5012 2
  case 208:
#line 1853 "glsl_parser.yy" /* yacc.c:1646  */
d5014 1
a5014 1
#line 5100 "glsl_parser.cpp" /* yacc.c:1646  */
d5017 2
a5018 2
  case 209:
#line 1854 "glsl_parser.yy" /* yacc.c:1646  */
d5020 1
a5020 1
#line 5106 "glsl_parser.cpp" /* yacc.c:1646  */
d5023 2
a5024 2
  case 210:
#line 1855 "glsl_parser.yy" /* yacc.c:1646  */
d5026 1
a5026 1
#line 5112 "glsl_parser.cpp" /* yacc.c:1646  */
d5029 2
a5030 2
  case 211:
#line 1856 "glsl_parser.yy" /* yacc.c:1646  */
d5032 1
a5032 1
#line 5118 "glsl_parser.cpp" /* yacc.c:1646  */
d5035 2
a5036 2
  case 212:
#line 1857 "glsl_parser.yy" /* yacc.c:1646  */
d5038 1
a5038 1
#line 5124 "glsl_parser.cpp" /* yacc.c:1646  */
d5041 2
a5042 2
  case 213:
#line 1858 "glsl_parser.yy" /* yacc.c:1646  */
d5044 1
a5044 1
#line 5130 "glsl_parser.cpp" /* yacc.c:1646  */
d5047 2
a5048 2
  case 214:
#line 1859 "glsl_parser.yy" /* yacc.c:1646  */
d5050 1
a5050 1
#line 5136 "glsl_parser.cpp" /* yacc.c:1646  */
d5053 2
a5054 2
  case 215:
#line 1860 "glsl_parser.yy" /* yacc.c:1646  */
d5056 1
a5056 1
#line 5142 "glsl_parser.cpp" /* yacc.c:1646  */
d5059 2
a5060 2
  case 216:
#line 1861 "glsl_parser.yy" /* yacc.c:1646  */
d5062 1
a5062 1
#line 5148 "glsl_parser.cpp" /* yacc.c:1646  */
d5065 2
a5066 2
  case 217:
#line 1862 "glsl_parser.yy" /* yacc.c:1646  */
d5068 1
a5068 1
#line 5154 "glsl_parser.cpp" /* yacc.c:1646  */
d5071 2
a5072 2
  case 218:
#line 1863 "glsl_parser.yy" /* yacc.c:1646  */
d5074 1
a5074 1
#line 5160 "glsl_parser.cpp" /* yacc.c:1646  */
d5077 2
a5078 2
  case 219:
#line 1864 "glsl_parser.yy" /* yacc.c:1646  */
d5080 1
a5080 1
#line 5166 "glsl_parser.cpp" /* yacc.c:1646  */
d5083 2
a5084 2
  case 220:
#line 1865 "glsl_parser.yy" /* yacc.c:1646  */
d5086 1
a5086 1
#line 5172 "glsl_parser.cpp" /* yacc.c:1646  */
d5089 2
a5090 2
  case 221:
#line 1866 "glsl_parser.yy" /* yacc.c:1646  */
d5092 1
a5092 1
#line 5178 "glsl_parser.cpp" /* yacc.c:1646  */
d5095 2
a5096 2
  case 222:
#line 1867 "glsl_parser.yy" /* yacc.c:1646  */
d5098 1
a5098 1
#line 5184 "glsl_parser.cpp" /* yacc.c:1646  */
d5101 2
a5102 2
  case 223:
#line 1868 "glsl_parser.yy" /* yacc.c:1646  */
d5104 1
a5104 1
#line 5190 "glsl_parser.cpp" /* yacc.c:1646  */
d5107 2
a5108 2
  case 224:
#line 1869 "glsl_parser.yy" /* yacc.c:1646  */
d5110 1
a5110 1
#line 5196 "glsl_parser.cpp" /* yacc.c:1646  */
d5113 2
a5114 2
  case 225:
#line 1870 "glsl_parser.yy" /* yacc.c:1646  */
d5116 1
a5116 1
#line 5202 "glsl_parser.cpp" /* yacc.c:1646  */
d5119 2
a5120 2
  case 226:
#line 1871 "glsl_parser.yy" /* yacc.c:1646  */
d5122 1
a5122 1
#line 5208 "glsl_parser.cpp" /* yacc.c:1646  */
d5125 2
a5126 2
  case 227:
#line 1872 "glsl_parser.yy" /* yacc.c:1646  */
d5128 1
a5128 1
#line 5214 "glsl_parser.cpp" /* yacc.c:1646  */
d5131 2
a5132 2
  case 228:
#line 1873 "glsl_parser.yy" /* yacc.c:1646  */
d5134 1
a5134 1
#line 5220 "glsl_parser.cpp" /* yacc.c:1646  */
d5137 2
a5138 2
  case 229:
#line 1874 "glsl_parser.yy" /* yacc.c:1646  */
d5140 1
a5140 1
#line 5226 "glsl_parser.cpp" /* yacc.c:1646  */
d5143 2
a5144 2
  case 230:
#line 1875 "glsl_parser.yy" /* yacc.c:1646  */
d5146 1
a5146 1
#line 5232 "glsl_parser.cpp" /* yacc.c:1646  */
d5149 2
a5150 2
  case 231:
#line 1876 "glsl_parser.yy" /* yacc.c:1646  */
d5152 1
a5152 1
#line 5238 "glsl_parser.cpp" /* yacc.c:1646  */
d5155 2
a5156 2
  case 232:
#line 1877 "glsl_parser.yy" /* yacc.c:1646  */
d5158 1
a5158 1
#line 5244 "glsl_parser.cpp" /* yacc.c:1646  */
d5161 2
a5162 2
  case 233:
#line 1878 "glsl_parser.yy" /* yacc.c:1646  */
d5164 1
a5164 1
#line 5250 "glsl_parser.cpp" /* yacc.c:1646  */
d5167 2
a5168 2
  case 234:
#line 1879 "glsl_parser.yy" /* yacc.c:1646  */
d5170 1
a5170 1
#line 5256 "glsl_parser.cpp" /* yacc.c:1646  */
d5173 2
a5174 2
  case 235:
#line 1880 "glsl_parser.yy" /* yacc.c:1646  */
d5176 1
a5176 1
#line 5262 "glsl_parser.cpp" /* yacc.c:1646  */
d5179 2
a5180 2
  case 236:
#line 1881 "glsl_parser.yy" /* yacc.c:1646  */
d5182 1
a5182 1
#line 5268 "glsl_parser.cpp" /* yacc.c:1646  */
d5185 2
a5186 2
  case 237:
#line 1882 "glsl_parser.yy" /* yacc.c:1646  */
d5188 1
a5188 1
#line 5274 "glsl_parser.cpp" /* yacc.c:1646  */
d5191 2
a5192 2
  case 238:
#line 1883 "glsl_parser.yy" /* yacc.c:1646  */
d5194 1
a5194 1
#line 5280 "glsl_parser.cpp" /* yacc.c:1646  */
d5197 2
a5198 2
  case 239:
#line 1884 "glsl_parser.yy" /* yacc.c:1646  */
d5200 1
a5200 1
#line 5286 "glsl_parser.cpp" /* yacc.c:1646  */
d5203 2
a5204 2
  case 240:
#line 1885 "glsl_parser.yy" /* yacc.c:1646  */
d5206 1
a5206 1
#line 5292 "glsl_parser.cpp" /* yacc.c:1646  */
d5209 2
a5210 2
  case 241:
#line 1886 "glsl_parser.yy" /* yacc.c:1646  */
d5212 1
a5212 1
#line 5298 "glsl_parser.cpp" /* yacc.c:1646  */
d5215 2
a5216 2
  case 242:
#line 1887 "glsl_parser.yy" /* yacc.c:1646  */
d5218 1
a5218 1
#line 5304 "glsl_parser.cpp" /* yacc.c:1646  */
d5221 2
a5222 2
  case 243:
#line 1888 "glsl_parser.yy" /* yacc.c:1646  */
d5224 1
a5224 1
#line 5310 "glsl_parser.cpp" /* yacc.c:1646  */
d5227 2
a5228 2
  case 244:
#line 1889 "glsl_parser.yy" /* yacc.c:1646  */
d5230 1
a5230 1
#line 5316 "glsl_parser.cpp" /* yacc.c:1646  */
d5233 2
a5234 2
  case 245:
#line 1890 "glsl_parser.yy" /* yacc.c:1646  */
d5236 1
a5236 1
#line 5322 "glsl_parser.cpp" /* yacc.c:1646  */
d5239 2
a5240 2
  case 246:
#line 1891 "glsl_parser.yy" /* yacc.c:1646  */
d5242 1
a5242 1
#line 5328 "glsl_parser.cpp" /* yacc.c:1646  */
d5245 2
a5246 2
  case 247:
#line 1892 "glsl_parser.yy" /* yacc.c:1646  */
d5248 1
a5248 1
#line 5334 "glsl_parser.cpp" /* yacc.c:1646  */
d5251 2
a5252 2
  case 248:
#line 1893 "glsl_parser.yy" /* yacc.c:1646  */
d5254 1
a5254 1
#line 5340 "glsl_parser.cpp" /* yacc.c:1646  */
d5257 2
a5258 2
  case 249:
#line 1894 "glsl_parser.yy" /* yacc.c:1646  */
d5260 1
a5260 1
#line 5346 "glsl_parser.cpp" /* yacc.c:1646  */
d5263 2
a5264 2
  case 250:
#line 1895 "glsl_parser.yy" /* yacc.c:1646  */
d5266 1
a5266 1
#line 5352 "glsl_parser.cpp" /* yacc.c:1646  */
d5269 2
a5270 2
  case 251:
#line 1896 "glsl_parser.yy" /* yacc.c:1646  */
d5272 1
a5272 1
#line 5358 "glsl_parser.cpp" /* yacc.c:1646  */
d5275 2
a5276 2
  case 252:
#line 1897 "glsl_parser.yy" /* yacc.c:1646  */
d5278 1
a5278 1
#line 5364 "glsl_parser.cpp" /* yacc.c:1646  */
d5281 2
a5282 2
  case 253:
#line 1898 "glsl_parser.yy" /* yacc.c:1646  */
d5284 1
a5284 1
#line 5370 "glsl_parser.cpp" /* yacc.c:1646  */
d5287 2
a5288 2
  case 254:
#line 1899 "glsl_parser.yy" /* yacc.c:1646  */
d5290 1
a5290 1
#line 5376 "glsl_parser.cpp" /* yacc.c:1646  */
d5293 2
a5294 2
  case 255:
#line 1900 "glsl_parser.yy" /* yacc.c:1646  */
d5296 1
a5296 1
#line 5382 "glsl_parser.cpp" /* yacc.c:1646  */
d5299 2
a5300 2
  case 256:
#line 1901 "glsl_parser.yy" /* yacc.c:1646  */
d5302 1
a5302 1
#line 5388 "glsl_parser.cpp" /* yacc.c:1646  */
d5305 2
a5306 2
  case 257:
#line 1902 "glsl_parser.yy" /* yacc.c:1646  */
d5308 1
a5308 1
#line 5394 "glsl_parser.cpp" /* yacc.c:1646  */
d5311 2
a5312 2
  case 258:
#line 1903 "glsl_parser.yy" /* yacc.c:1646  */
d5314 1
a5314 1
#line 5400 "glsl_parser.cpp" /* yacc.c:1646  */
d5317 2
a5318 2
  case 259:
#line 1904 "glsl_parser.yy" /* yacc.c:1646  */
d5320 1
a5320 1
#line 5406 "glsl_parser.cpp" /* yacc.c:1646  */
d5323 2
a5324 2
  case 260:
#line 1905 "glsl_parser.yy" /* yacc.c:1646  */
d5326 1
a5326 1
#line 5412 "glsl_parser.cpp" /* yacc.c:1646  */
d5329 2
a5330 2
  case 261:
#line 1906 "glsl_parser.yy" /* yacc.c:1646  */
d5332 1
a5332 1
#line 5418 "glsl_parser.cpp" /* yacc.c:1646  */
d5335 2
a5336 2
  case 262:
#line 1907 "glsl_parser.yy" /* yacc.c:1646  */
d5338 1
a5338 1
#line 5424 "glsl_parser.cpp" /* yacc.c:1646  */
d5341 2
a5342 2
  case 263:
#line 1908 "glsl_parser.yy" /* yacc.c:1646  */
d5344 1
a5344 1
#line 5430 "glsl_parser.cpp" /* yacc.c:1646  */
d5347 2
a5348 2
  case 264:
#line 1909 "glsl_parser.yy" /* yacc.c:1646  */
d5350 1
a5350 1
#line 5436 "glsl_parser.cpp" /* yacc.c:1646  */
d5353 2
a5354 2
  case 265:
#line 1910 "glsl_parser.yy" /* yacc.c:1646  */
d5356 1
a5356 1
#line 5442 "glsl_parser.cpp" /* yacc.c:1646  */
d5359 2
a5360 2
  case 266:
#line 1911 "glsl_parser.yy" /* yacc.c:1646  */
d5362 1
a5362 1
#line 5448 "glsl_parser.cpp" /* yacc.c:1646  */
d5365 2
a5366 2
  case 267:
#line 1912 "glsl_parser.yy" /* yacc.c:1646  */
d5368 1
a5368 1
#line 5454 "glsl_parser.cpp" /* yacc.c:1646  */
d5371 2
a5372 2
  case 268:
#line 1913 "glsl_parser.yy" /* yacc.c:1646  */
d5374 1
a5374 1
#line 5460 "glsl_parser.cpp" /* yacc.c:1646  */
d5377 2
a5378 2
  case 269:
#line 1914 "glsl_parser.yy" /* yacc.c:1646  */
d5380 1
a5380 1
#line 5466 "glsl_parser.cpp" /* yacc.c:1646  */
d5383 2
a5384 2
  case 270:
#line 1915 "glsl_parser.yy" /* yacc.c:1646  */
d5386 1
a5386 1
#line 5472 "glsl_parser.cpp" /* yacc.c:1646  */
d5389 2
a5390 2
  case 271:
#line 1916 "glsl_parser.yy" /* yacc.c:1646  */
d5392 1
a5392 1
#line 5478 "glsl_parser.cpp" /* yacc.c:1646  */
d5395 2
a5396 2
  case 272:
#line 1917 "glsl_parser.yy" /* yacc.c:1646  */
d5398 1
a5398 1
#line 5484 "glsl_parser.cpp" /* yacc.c:1646  */
d5401 2
a5402 2
  case 273:
#line 1918 "glsl_parser.yy" /* yacc.c:1646  */
d5404 1
a5404 1
#line 5490 "glsl_parser.cpp" /* yacc.c:1646  */
d5407 2
a5408 2
  case 274:
#line 1919 "glsl_parser.yy" /* yacc.c:1646  */
d5410 1
a5410 1
#line 5496 "glsl_parser.cpp" /* yacc.c:1646  */
d5413 2
a5414 2
  case 275:
#line 1920 "glsl_parser.yy" /* yacc.c:1646  */
d5416 1
a5416 1
#line 5502 "glsl_parser.cpp" /* yacc.c:1646  */
d5419 2
a5420 2
  case 276:
#line 1921 "glsl_parser.yy" /* yacc.c:1646  */
d5422 1
a5422 1
#line 5508 "glsl_parser.cpp" /* yacc.c:1646  */
d5425 2
a5426 2
  case 277:
#line 1922 "glsl_parser.yy" /* yacc.c:1646  */
d5428 1
a5428 1
#line 5514 "glsl_parser.cpp" /* yacc.c:1646  */
d5431 2
a5432 2
  case 278:
#line 1923 "glsl_parser.yy" /* yacc.c:1646  */
d5434 1
a5434 1
#line 5520 "glsl_parser.cpp" /* yacc.c:1646  */
d5437 2
a5438 2
  case 279:
#line 1924 "glsl_parser.yy" /* yacc.c:1646  */
d5440 1
a5440 1
#line 5526 "glsl_parser.cpp" /* yacc.c:1646  */
d5443 2
a5444 2
  case 280:
#line 1925 "glsl_parser.yy" /* yacc.c:1646  */
d5446 1
a5446 1
#line 5532 "glsl_parser.cpp" /* yacc.c:1646  */
d5449 2
a5450 2
  case 281:
#line 1926 "glsl_parser.yy" /* yacc.c:1646  */
d5452 1
a5452 1
#line 5538 "glsl_parser.cpp" /* yacc.c:1646  */
d5455 2
a5456 2
  case 282:
#line 1927 "glsl_parser.yy" /* yacc.c:1646  */
d5458 1
a5458 1
#line 5544 "glsl_parser.cpp" /* yacc.c:1646  */
d5461 2
a5462 2
  case 283:
#line 1928 "glsl_parser.yy" /* yacc.c:1646  */
d5464 1
a5464 1
#line 5550 "glsl_parser.cpp" /* yacc.c:1646  */
d5467 2
a5468 2
  case 284:
#line 1929 "glsl_parser.yy" /* yacc.c:1646  */
d5470 1
a5470 1
#line 5556 "glsl_parser.cpp" /* yacc.c:1646  */
d5473 2
a5474 2
  case 285:
#line 1930 "glsl_parser.yy" /* yacc.c:1646  */
d5476 1
a5476 1
#line 5562 "glsl_parser.cpp" /* yacc.c:1646  */
d5479 2
a5480 2
  case 286:
#line 1931 "glsl_parser.yy" /* yacc.c:1646  */
d5482 1
a5482 1
#line 5568 "glsl_parser.cpp" /* yacc.c:1646  */
d5485 2
a5486 2
  case 287:
#line 1932 "glsl_parser.yy" /* yacc.c:1646  */
d5488 1
a5488 1
#line 5574 "glsl_parser.cpp" /* yacc.c:1646  */
d5491 2
a5492 2
  case 288:
#line 1933 "glsl_parser.yy" /* yacc.c:1646  */
d5494 1
a5494 1
#line 5580 "glsl_parser.cpp" /* yacc.c:1646  */
d5497 2
a5498 2
  case 289:
#line 1934 "glsl_parser.yy" /* yacc.c:1646  */
d5500 1
a5500 1
#line 5586 "glsl_parser.cpp" /* yacc.c:1646  */
d5503 2
a5504 2
  case 290:
#line 1935 "glsl_parser.yy" /* yacc.c:1646  */
d5506 1
a5506 1
#line 5592 "glsl_parser.cpp" /* yacc.c:1646  */
d5509 2
a5510 2
  case 291:
#line 1936 "glsl_parser.yy" /* yacc.c:1646  */
d5512 1
a5512 1
#line 5598 "glsl_parser.cpp" /* yacc.c:1646  */
d5515 2
a5516 2
  case 292:
#line 1937 "glsl_parser.yy" /* yacc.c:1646  */
d5518 1
a5518 1
#line 5604 "glsl_parser.cpp" /* yacc.c:1646  */
d5521 2
a5522 2
  case 293:
#line 1938 "glsl_parser.yy" /* yacc.c:1646  */
d5524 1
a5524 1
#line 5610 "glsl_parser.cpp" /* yacc.c:1646  */
d5527 2
a5528 2
  case 294:
#line 1939 "glsl_parser.yy" /* yacc.c:1646  */
d5530 1
a5530 1
#line 5616 "glsl_parser.cpp" /* yacc.c:1646  */
d5533 2
a5534 2
  case 295:
#line 1940 "glsl_parser.yy" /* yacc.c:1646  */
d5536 1
a5536 1
#line 5622 "glsl_parser.cpp" /* yacc.c:1646  */
d5539 2
a5540 2
  case 296:
#line 1941 "glsl_parser.yy" /* yacc.c:1646  */
d5542 1
a5542 1
#line 5628 "glsl_parser.cpp" /* yacc.c:1646  */
d5545 2
a5546 2
  case 297:
#line 1942 "glsl_parser.yy" /* yacc.c:1646  */
d5548 1
a5548 1
#line 5634 "glsl_parser.cpp" /* yacc.c:1646  */
d5551 2
a5552 2
  case 298:
#line 1943 "glsl_parser.yy" /* yacc.c:1646  */
d5554 1
a5554 1
#line 5640 "glsl_parser.cpp" /* yacc.c:1646  */
d5557 2
a5558 2
  case 299:
#line 1948 "glsl_parser.yy" /* yacc.c:1646  */
d5563 1
a5563 1
#line 5649 "glsl_parser.cpp" /* yacc.c:1646  */
d5566 2
a5567 2
  case 300:
#line 1953 "glsl_parser.yy" /* yacc.c:1646  */
d5572 1
a5572 1
#line 5658 "glsl_parser.cpp" /* yacc.c:1646  */
d5575 2
a5576 2
  case 301:
#line 1958 "glsl_parser.yy" /* yacc.c:1646  */
d5581 1
a5581 1
#line 5667 "glsl_parser.cpp" /* yacc.c:1646  */
d5584 2
a5585 2
  case 302:
#line 1966 "glsl_parser.yy" /* yacc.c:1646  */
d5592 1
a5592 1
#line 5678 "glsl_parser.cpp" /* yacc.c:1646  */
d5595 2
a5596 2
  case 303:
#line 1973 "glsl_parser.yy" /* yacc.c:1646  */
d5602 1
a5602 1
#line 5688 "glsl_parser.cpp" /* yacc.c:1646  */
d5605 2
a5606 2
  case 304:
#line 1982 "glsl_parser.yy" /* yacc.c:1646  */
d5611 1
a5611 1
#line 5697 "glsl_parser.cpp" /* yacc.c:1646  */
d5614 2
a5615 2
  case 305:
#line 1987 "glsl_parser.yy" /* yacc.c:1646  */
d5620 1
a5620 1
#line 5706 "glsl_parser.cpp" /* yacc.c:1646  */
d5623 2
a5624 2
  case 306:
#line 1995 "glsl_parser.yy" /* yacc.c:1646  */
d5640 1
a5640 1
#line 5726 "glsl_parser.cpp" /* yacc.c:1646  */
d5643 2
a5644 2
  case 307:
#line 2014 "glsl_parser.yy" /* yacc.c:1646  */
d5649 1
a5649 1
#line 5735 "glsl_parser.cpp" /* yacc.c:1646  */
d5652 2
a5653 2
  case 308:
#line 2019 "glsl_parser.yy" /* yacc.c:1646  */
d5658 1
a5658 1
#line 5744 "glsl_parser.cpp" /* yacc.c:1646  */
d5661 2
a5662 2
  case 309:
#line 2027 "glsl_parser.yy" /* yacc.c:1646  */
d5668 1
a5668 1
#line 5754 "glsl_parser.cpp" /* yacc.c:1646  */
d5671 2
a5672 2
  case 310:
#line 2033 "glsl_parser.yy" /* yacc.c:1646  */
d5678 1
a5678 1
#line 5764 "glsl_parser.cpp" /* yacc.c:1646  */
d5681 2
a5682 2
  case 312:
#line 2043 "glsl_parser.yy" /* yacc.c:1646  */
d5686 1
a5686 1
#line 5772 "glsl_parser.cpp" /* yacc.c:1646  */
d5689 2
a5690 2
  case 313:
#line 2047 "glsl_parser.yy" /* yacc.c:1646  */
d5694 1
a5694 1
#line 5780 "glsl_parser.cpp" /* yacc.c:1646  */
d5697 2
a5698 2
  case 314:
#line 2054 "glsl_parser.yy" /* yacc.c:1646  */
d5705 1
a5705 1
#line 5791 "glsl_parser.cpp" /* yacc.c:1646  */
d5708 2
a5709 2
  case 315:
#line 2061 "glsl_parser.yy" /* yacc.c:1646  */
d5713 1
a5713 1
#line 5799 "glsl_parser.cpp" /* yacc.c:1646  */
d5716 2
a5717 2
  case 317:
#line 2073 "glsl_parser.yy" /* yacc.c:1646  */
d5719 1
a5719 1
#line 5805 "glsl_parser.cpp" /* yacc.c:1646  */
d5722 2
a5723 2
  case 325:
#line 2088 "glsl_parser.yy" /* yacc.c:1646  */
d5729 1
a5729 1
#line 5815 "glsl_parser.cpp" /* yacc.c:1646  */
d5732 2
a5733 2
  case 326:
#line 2094 "glsl_parser.yy" /* yacc.c:1646  */
d5737 1
a5737 1
#line 5823 "glsl_parser.cpp" /* yacc.c:1646  */
d5740 2
a5741 2
  case 327:
#line 2098 "glsl_parser.yy" /* yacc.c:1646  */
d5748 1
a5748 1
#line 5834 "glsl_parser.cpp" /* yacc.c:1646  */
d5751 2
a5752 2
  case 328:
#line 2107 "glsl_parser.yy" /* yacc.c:1646  */
d5754 1
a5754 1
#line 5840 "glsl_parser.cpp" /* yacc.c:1646  */
d5757 2
a5758 2
  case 330:
#line 2113 "glsl_parser.yy" /* yacc.c:1646  */
d5764 1
a5764 1
#line 5850 "glsl_parser.cpp" /* yacc.c:1646  */
d5767 2
a5768 2
  case 331:
#line 2119 "glsl_parser.yy" /* yacc.c:1646  */
d5774 1
a5774 1
#line 5860 "glsl_parser.cpp" /* yacc.c:1646  */
d5777 2
a5778 2
  case 332:
#line 2128 "glsl_parser.yy" /* yacc.c:1646  */
d5788 1
a5788 1
#line 5874 "glsl_parser.cpp" /* yacc.c:1646  */
d5791 2
a5792 2
  case 333:
#line 2138 "glsl_parser.yy" /* yacc.c:1646  */
d5801 1
a5801 1
#line 5887 "glsl_parser.cpp" /* yacc.c:1646  */
d5804 2
a5805 2
  case 334:
#line 2150 "glsl_parser.yy" /* yacc.c:1646  */
d5811 1
a5811 1
#line 5897 "glsl_parser.cpp" /* yacc.c:1646  */
d5814 2
a5815 2
  case 335:
#line 2156 "glsl_parser.yy" /* yacc.c:1646  */
d5821 1
a5821 1
#line 5907 "glsl_parser.cpp" /* yacc.c:1646  */
d5824 2
a5825 2
  case 336:
#line 2165 "glsl_parser.yy" /* yacc.c:1646  */
d5831 1
a5831 1
#line 5917 "glsl_parser.cpp" /* yacc.c:1646  */
d5834 2
a5835 2
  case 337:
#line 2174 "glsl_parser.yy" /* yacc.c:1646  */
d5840 1
a5840 1
#line 5926 "glsl_parser.cpp" /* yacc.c:1646  */
d5843 2
a5844 2
  case 338:
#line 2179 "glsl_parser.yy" /* yacc.c:1646  */
d5849 1
a5849 1
#line 5935 "glsl_parser.cpp" /* yacc.c:1646  */
d5852 2
a5853 2
  case 339:
#line 2187 "glsl_parser.yy" /* yacc.c:1646  */
d5857 1
a5857 1
#line 5943 "glsl_parser.cpp" /* yacc.c:1646  */
d5860 2
a5861 2
  case 340:
#line 2191 "glsl_parser.yy" /* yacc.c:1646  */
d5872 1
a5872 1
#line 5958 "glsl_parser.cpp" /* yacc.c:1646  */
d5875 2
a5876 2
  case 341:
#line 2209 "glsl_parser.yy" /* yacc.c:1646  */
d5881 1
a5881 1
#line 5967 "glsl_parser.cpp" /* yacc.c:1646  */
d5884 2
a5885 2
  case 342:
#line 2217 "glsl_parser.yy" /* yacc.c:1646  */
d5890 1
a5890 1
#line 5976 "glsl_parser.cpp" /* yacc.c:1646  */
d5893 2
a5894 2
  case 343:
#line 2222 "glsl_parser.yy" /* yacc.c:1646  */
d5899 1
a5899 1
#line 5985 "glsl_parser.cpp" /* yacc.c:1646  */
d5902 2
a5903 2
  case 344:
#line 2230 "glsl_parser.yy" /* yacc.c:1646  */
d5908 1
a5908 1
#line 5994 "glsl_parser.cpp" /* yacc.c:1646  */
d5911 2
a5912 2
  case 345:
#line 2235 "glsl_parser.yy" /* yacc.c:1646  */
d5917 1
a5917 1
#line 6003 "glsl_parser.cpp" /* yacc.c:1646  */
d5920 2
a5921 2
  case 346:
#line 2243 "glsl_parser.yy" /* yacc.c:1646  */
d5929 1
a5929 1
#line 6015 "glsl_parser.cpp" /* yacc.c:1646  */
d5932 2
a5933 2
  case 347:
#line 2251 "glsl_parser.yy" /* yacc.c:1646  */
d5938 1
a5938 1
#line 6024 "glsl_parser.cpp" /* yacc.c:1646  */
d5941 2
a5942 2
  case 348:
#line 2259 "glsl_parser.yy" /* yacc.c:1646  */
d5950 1
a5950 1
#line 6036 "glsl_parser.cpp" /* yacc.c:1646  */
d5953 2
a5954 2
  case 349:
#line 2267 "glsl_parser.yy" /* yacc.c:1646  */
d5959 1
a5959 1
#line 6045 "glsl_parser.cpp" /* yacc.c:1646  */
d5962 2
a5963 2
  case 350:
#line 2275 "glsl_parser.yy" /* yacc.c:1646  */
d5971 1
a5971 1
#line 6057 "glsl_parser.cpp" /* yacc.c:1646  */
d5974 2
a5975 2
  case 351:
#line 2283 "glsl_parser.yy" /* yacc.c:1646  */
d5980 1
a5980 1
#line 6066 "glsl_parser.cpp" /* yacc.c:1646  */
d5983 2
a5984 2
  case 352:
#line 2291 "glsl_parser.yy" /* yacc.c:1646  */
d5991 1
a5991 1
#line 6077 "glsl_parser.cpp" /* yacc.c:1646  */
d5994 2
a5995 2
  case 353:
#line 2298 "glsl_parser.yy" /* yacc.c:1646  */
d6002 1
a6002 1
#line 6088 "glsl_parser.cpp" /* yacc.c:1646  */
d6005 2
a6006 2
  case 354:
#line 2305 "glsl_parser.yy" /* yacc.c:1646  */
d6013 1
a6013 1
#line 6099 "glsl_parser.cpp" /* yacc.c:1646  */
d6016 2
a6017 2
  case 358:
#line 2321 "glsl_parser.yy" /* yacc.c:1646  */
d6021 1
a6021 1
#line 6107 "glsl_parser.cpp" /* yacc.c:1646  */
d6024 2
a6025 2
  case 359:
#line 2328 "glsl_parser.yy" /* yacc.c:1646  */
d6030 1
a6030 1
#line 6116 "glsl_parser.cpp" /* yacc.c:1646  */
d6033 2
a6034 2
  case 360:
#line 2333 "glsl_parser.yy" /* yacc.c:1646  */
d6039 1
a6039 1
#line 6125 "glsl_parser.cpp" /* yacc.c:1646  */
d6042 2
a6043 2
  case 361:
#line 2342 "glsl_parser.yy" /* yacc.c:1646  */
d6049 1
a6049 1
#line 6135 "glsl_parser.cpp" /* yacc.c:1646  */
d6052 2
a6053 2
  case 362:
#line 2348 "glsl_parser.yy" /* yacc.c:1646  */
d6059 1
a6059 1
#line 6145 "glsl_parser.cpp" /* yacc.c:1646  */
d6062 2
a6063 2
  case 363:
#line 2354 "glsl_parser.yy" /* yacc.c:1646  */
d6069 1
a6069 1
#line 6155 "glsl_parser.cpp" /* yacc.c:1646  */
d6072 2
a6073 2
  case 364:
#line 2360 "glsl_parser.yy" /* yacc.c:1646  */
d6079 1
a6079 1
#line 6165 "glsl_parser.cpp" /* yacc.c:1646  */
d6082 2
a6083 2
  case 365:
#line 2366 "glsl_parser.yy" /* yacc.c:1646  */
d6089 1
a6089 1
#line 6175 "glsl_parser.cpp" /* yacc.c:1646  */
d6092 2
a6093 2
  case 366:
#line 2374 "glsl_parser.yy" /* yacc.c:1646  */
d6095 1
a6095 1
#line 6181 "glsl_parser.cpp" /* yacc.c:1646  */
d6098 2
a6099 2
  case 367:
#line 2375 "glsl_parser.yy" /* yacc.c:1646  */
d6101 1
a6101 1
#line 6187 "glsl_parser.cpp" /* yacc.c:1646  */
d6104 2
a6105 2
  case 368:
#line 2376 "glsl_parser.yy" /* yacc.c:1646  */
d6107 1
a6107 1
#line 6193 "glsl_parser.cpp" /* yacc.c:1646  */
d6110 2
a6111 2
  case 369:
#line 2377 "glsl_parser.yy" /* yacc.c:1646  */
d6113 1
a6113 1
#line 6199 "glsl_parser.cpp" /* yacc.c:1646  */
d6116 2
a6117 2
  case 370:
#line 2382 "glsl_parser.yy" /* yacc.c:1646  */
d6127 1
a6127 1
#line 6213 "glsl_parser.cpp" /* yacc.c:1646  */
d6130 2
a6131 2
  case 371:
#line 2396 "glsl_parser.yy" /* yacc.c:1646  */
d6135 1
a6135 1
#line 6221 "glsl_parser.cpp" /* yacc.c:1646  */
d6138 2
a6139 2
  case 372:
#line 2400 "glsl_parser.yy" /* yacc.c:1646  */
a6144 12

      foreach_list_typed (ast_declarator_list, member, link, &block->declarations) {
         ast_type_qualifier& qualifier = member->type->qualifier;
         if (qualifier.flags.q.stream && qualifier.stream != block->layout.stream) {
               _mesa_glsl_error(& (yylsp[-1]), state,
                             "stream layout qualifier on "
                             "interface block member does not match "
                             "the interface block (%d vs %d)",
                             qualifier.stream, block->layout.stream);
               YYERROR;
         }
      }
d6147 1
a6147 1
#line 6245 "glsl_parser.cpp" /* yacc.c:1646  */
d6150 2
a6151 2
  case 373:
#line 2423 "glsl_parser.yy" /* yacc.c:1646  */
a6218 8
      if (state->stage == MESA_SHADER_GEOMETRY &&
          state->has_explicit_attrib_stream()) {
         /* Assign global layout's stream value. */
         block->layout.flags.q.stream = 1;
         block->layout.flags.q.explicit_stream = 0;
         block->layout.stream = state->out_qualifier->stream;
      }

d6245 1
a6245 1
#line 6351 "glsl_parser.cpp" /* yacc.c:1646  */
d6248 2
a6249 2
  case 374:
#line 2528 "glsl_parser.yy" /* yacc.c:1646  */
d6254 1
a6254 1
#line 6360 "glsl_parser.cpp" /* yacc.c:1646  */
d6257 2
a6258 2
  case 375:
#line 2533 "glsl_parser.yy" /* yacc.c:1646  */
d6263 1
a6263 1
#line 6369 "glsl_parser.cpp" /* yacc.c:1646  */
d6266 2
a6267 2
  case 376:
#line 2538 "glsl_parser.yy" /* yacc.c:1646  */
d6272 1
a6272 1
#line 6378 "glsl_parser.cpp" /* yacc.c:1646  */
d6275 2
a6276 2
  case 377:
#line 2546 "glsl_parser.yy" /* yacc.c:1646  */
d6281 1
a6281 1
#line 6387 "glsl_parser.cpp" /* yacc.c:1646  */
d6284 2
a6285 2
  case 378:
#line 2551 "glsl_parser.yy" /* yacc.c:1646  */
d6291 1
a6291 1
#line 6397 "glsl_parser.cpp" /* yacc.c:1646  */
d6294 2
a6295 2
  case 379:
#line 2557 "glsl_parser.yy" /* yacc.c:1646  */
d6301 1
a6301 1
#line 6407 "glsl_parser.cpp" /* yacc.c:1646  */
d6304 2
a6305 2
  case 380:
#line 2566 "glsl_parser.yy" /* yacc.c:1646  */
d6310 1
a6310 1
#line 6416 "glsl_parser.cpp" /* yacc.c:1646  */
d6313 2
a6314 2
  case 381:
#line 2571 "glsl_parser.yy" /* yacc.c:1646  */
d6319 1
a6319 1
#line 6425 "glsl_parser.cpp" /* yacc.c:1646  */
d6322 2
a6323 2
  case 382:
#line 2579 "glsl_parser.yy" /* yacc.c:1646  */
d6344 1
a6344 1
#line 6450 "glsl_parser.cpp" /* yacc.c:1646  */
d6347 2
a6348 2
  case 383:
#line 2603 "glsl_parser.yy" /* yacc.c:1646  */
d6355 1
a6355 1
#line 6461 "glsl_parser.cpp" /* yacc.c:1646  */
d6358 2
a6359 2
  case 384:
#line 2611 "glsl_parser.yy" /* yacc.c:1646  */
d6366 1
a6366 1
#line 6472 "glsl_parser.cpp" /* yacc.c:1646  */
d6369 2
a6370 2
  case 385:
#line 2619 "glsl_parser.yy" /* yacc.c:1646  */
a6391 3

         /* Allow future assigments of global out's stream id value */
         state->out_qualifier->flags.q.explicit_stream = 0;
d6395 1
a6395 1
#line 6504 "glsl_parser.cpp" /* yacc.c:1646  */
d6399 1
a6399 1
#line 6508 "glsl_parser.cpp" /* yacc.c:1646  */
@


1.6
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d98 3
d147 1
a147 1
#line 145 "glsl_parser.cpp" /* yacc.c:339  */
d217 187
a403 187
    NOPERSPECTIVE = 293,
    FLAT = 294,
    SMOOTH = 295,
    MAT2X2 = 296,
    MAT2X3 = 297,
    MAT2X4 = 298,
    MAT3X2 = 299,
    MAT3X3 = 300,
    MAT3X4 = 301,
    MAT4X2 = 302,
    MAT4X3 = 303,
    MAT4X4 = 304,
    SAMPLER1D = 305,
    SAMPLER2D = 306,
    SAMPLER3D = 307,
    SAMPLERCUBE = 308,
    SAMPLER1DSHADOW = 309,
    SAMPLER2DSHADOW = 310,
    SAMPLERCUBESHADOW = 311,
    SAMPLER1DARRAY = 312,
    SAMPLER2DARRAY = 313,
    SAMPLER1DARRAYSHADOW = 314,
    SAMPLER2DARRAYSHADOW = 315,
    SAMPLERCUBEARRAY = 316,
    SAMPLERCUBEARRAYSHADOW = 317,
    ISAMPLER1D = 318,
    ISAMPLER2D = 319,
    ISAMPLER3D = 320,
    ISAMPLERCUBE = 321,
    ISAMPLER1DARRAY = 322,
    ISAMPLER2DARRAY = 323,
    ISAMPLERCUBEARRAY = 324,
    USAMPLER1D = 325,
    USAMPLER2D = 326,
    USAMPLER3D = 327,
    USAMPLERCUBE = 328,
    USAMPLER1DARRAY = 329,
    USAMPLER2DARRAY = 330,
    USAMPLERCUBEARRAY = 331,
    SAMPLER2DRECT = 332,
    ISAMPLER2DRECT = 333,
    USAMPLER2DRECT = 334,
    SAMPLER2DRECTSHADOW = 335,
    SAMPLERBUFFER = 336,
    ISAMPLERBUFFER = 337,
    USAMPLERBUFFER = 338,
    SAMPLER2DMS = 339,
    ISAMPLER2DMS = 340,
    USAMPLER2DMS = 341,
    SAMPLER2DMSARRAY = 342,
    ISAMPLER2DMSARRAY = 343,
    USAMPLER2DMSARRAY = 344,
    SAMPLEREXTERNALOES = 345,
    IMAGE1D = 346,
    IMAGE2D = 347,
    IMAGE3D = 348,
    IMAGE2DRECT = 349,
    IMAGECUBE = 350,
    IMAGEBUFFER = 351,
    IMAGE1DARRAY = 352,
    IMAGE2DARRAY = 353,
    IMAGECUBEARRAY = 354,
    IMAGE2DMS = 355,
    IMAGE2DMSARRAY = 356,
    IIMAGE1D = 357,
    IIMAGE2D = 358,
    IIMAGE3D = 359,
    IIMAGE2DRECT = 360,
    IIMAGECUBE = 361,
    IIMAGEBUFFER = 362,
    IIMAGE1DARRAY = 363,
    IIMAGE2DARRAY = 364,
    IIMAGECUBEARRAY = 365,
    IIMAGE2DMS = 366,
    IIMAGE2DMSARRAY = 367,
    UIMAGE1D = 368,
    UIMAGE2D = 369,
    UIMAGE3D = 370,
    UIMAGE2DRECT = 371,
    UIMAGECUBE = 372,
    UIMAGEBUFFER = 373,
    UIMAGE1DARRAY = 374,
    UIMAGE2DARRAY = 375,
    UIMAGECUBEARRAY = 376,
    UIMAGE2DMS = 377,
    UIMAGE2DMSARRAY = 378,
    IMAGE1DSHADOW = 379,
    IMAGE2DSHADOW = 380,
    IMAGE1DARRAYSHADOW = 381,
    IMAGE2DARRAYSHADOW = 382,
    COHERENT = 383,
    VOLATILE = 384,
    RESTRICT = 385,
    READONLY = 386,
    WRITEONLY = 387,
    ATOMIC_UINT = 388,
    STRUCT = 389,
    VOID_TOK = 390,
    WHILE = 391,
    IDENTIFIER = 392,
    TYPE_IDENTIFIER = 393,
    NEW_IDENTIFIER = 394,
    FLOATCONSTANT = 395,
    INTCONSTANT = 396,
    UINTCONSTANT = 397,
    BOOLCONSTANT = 398,
    FIELD_SELECTION = 399,
    LEFT_OP = 400,
    RIGHT_OP = 401,
    INC_OP = 402,
    DEC_OP = 403,
    LE_OP = 404,
    GE_OP = 405,
    EQ_OP = 406,
    NE_OP = 407,
    AND_OP = 408,
    OR_OP = 409,
    XOR_OP = 410,
    MUL_ASSIGN = 411,
    DIV_ASSIGN = 412,
    ADD_ASSIGN = 413,
    MOD_ASSIGN = 414,
    LEFT_ASSIGN = 415,
    RIGHT_ASSIGN = 416,
    AND_ASSIGN = 417,
    XOR_ASSIGN = 418,
    OR_ASSIGN = 419,
    SUB_ASSIGN = 420,
    INVARIANT = 421,
    LOWP = 422,
    MEDIUMP = 423,
    HIGHP = 424,
    SUPERP = 425,
    PRECISION = 426,
    VERSION_TOK = 427,
    EXTENSION = 428,
    LINE = 429,
    COLON = 430,
    EOL = 431,
    INTERFACE = 432,
    OUTPUT = 433,
    PRAGMA_DEBUG_ON = 434,
    PRAGMA_DEBUG_OFF = 435,
    PRAGMA_OPTIMIZE_ON = 436,
    PRAGMA_OPTIMIZE_OFF = 437,
    PRAGMA_INVARIANT_ALL = 438,
    LAYOUT_TOK = 439,
    ASM = 440,
    CLASS = 441,
    UNION = 442,
    ENUM = 443,
    TYPEDEF = 444,
    TEMPLATE = 445,
    THIS = 446,
    PACKED_TOK = 447,
    GOTO = 448,
    INLINE_TOK = 449,
    NOINLINE = 450,
    PUBLIC_TOK = 451,
    STATIC = 452,
    EXTERN = 453,
    EXTERNAL = 454,
    LONG_TOK = 455,
    SHORT_TOK = 456,
    DOUBLE_TOK = 457,
    HALF = 458,
    FIXED_TOK = 459,
    UNSIGNED = 460,
    INPUT_TOK = 461,
    OUPTUT = 462,
    HVEC2 = 463,
    HVEC3 = 464,
    HVEC4 = 465,
    DVEC2 = 466,
    DVEC3 = 467,
    DVEC4 = 468,
    FVEC2 = 469,
    FVEC3 = 470,
    FVEC4 = 471,
    SAMPLER3DRECT = 472,
    SIZEOF = 473,
    CAST = 474,
    NAMESPACE = 475,
    USING = 476,
    RESOURCE = 477,
    PATCH = 478,
    SAMPLE = 479,
d420 1
a420 1
#line 91 "glsl_parser.yy" /* yacc.c:355  */
d457 1
a457 1
#line 455 "glsl_parser.cpp" /* yacc.c:355  */
d485 1
a485 1
#line 483 "glsl_parser.cpp" /* yacc.c:358  */
d729 1
a729 1
#define YYLAST   5407
d736 1
a736 1
#define YYNRULES  380
d738 1
a738 1
#define YYNSTATES  532
d807 39
a845 39
       0,   295,   295,   294,   306,   308,   315,   325,   326,   327,
     328,   329,   342,   344,   348,   349,   350,   354,   363,   371,
     382,   383,   387,   394,   401,   408,   415,   422,   429,   430,
     436,   440,   447,   453,   462,   466,   470,   471,   480,   481,
     485,   486,   490,   496,   508,   512,   518,   526,   537,   538,
     542,   543,   547,   553,   565,   577,   578,   584,   590,   600,
     601,   602,   603,   607,   608,   614,   620,   629,   630,   636,
     645,   646,   652,   661,   662,   668,   674,   680,   689,   690,
     696,   705,   706,   715,   716,   725,   726,   735,   736,   745,
     746,   755,   756,   765,   766,   775,   776,   785,   786,   787,
     788,   789,   790,   791,   792,   793,   794,   795,   799,   803,
     819,   823,   828,   832,   837,   844,   848,   849,   853,   858,
     866,   880,   890,   904,   909,   923,   926,   934,   946,   959,
     964,   969,   978,   982,   983,   993,  1003,  1013,  1027,  1034,
    1044,  1054,  1064,  1074,  1089,  1096,  1107,  1114,  1115,  1125,
    1126,  1130,  1315,  1438,  1464,  1469,  1477,  1482,  1487,  1496,
    1501,  1502,  1503,  1504,  1505,  1523,  1536,  1564,  1587,  1602,
    1622,  1636,  1641,  1649,  1654,  1659,  1664,  1669,  1674,  1679,
    1684,  1689,  1695,  1700,  1708,  1714,  1720,  1734,  1749,  1750,
    1758,  1764,  1770,  1779,  1780,  1781,  1782,  1783,  1784,  1785,
    1786,  1787,  1788,  1789,  1790,  1791,  1792,  1793,  1794,  1795,
    1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,  1805,
    1806,  1807,  1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,
    1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,  1824,  1825,
    1826,  1827,  1828,  1829,  1830,  1831,  1832,  1833,  1834,  1835,
    1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,  1844,  1845,
    1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,  1854,  1855,
    1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,  1865,
    1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,  1875,
    1876,  1877,  1878,  1879,  1883,  1888,  1893,  1901,  1908,  1917,
    1922,  1930,  1949,  1954,  1962,  1968,  1977,  1978,  1982,  1989,
    1996,  2003,  2009,  2010,  2014,  2015,  2016,  2017,  2018,  2019,
    2023,  2030,  2029,  2043,  2044,  2048,  2054,  2063,  2073,  2085,
    2091,  2100,  2109,  2114,  2122,  2126,  2144,  2152,  2157,  2165,
    2170,  2178,  2186,  2194,  2202,  2210,  2218,  2226,  2233,  2240,
    2250,  2251,  2255,  2257,  2263,  2268,  2277,  2283,  2289,  2295,
    2301,  2310,  2311,  2312,  2313,  2317,  2331,  2335,  2346,  2443,
    2448,  2453,  2462,  2466,  2472,  2481,  2486,  2494,  2518,  2526,
    2534
d859 3
a861 3
  "UNIFORM", "VARYING", "NOPERSPECTIVE", "FLAT", "SMOOTH", "MAT2X2",
  "MAT2X3", "MAT2X4", "MAT3X2", "MAT3X3", "MAT3X4", "MAT4X2", "MAT4X3",
  "MAT4X4", "SAMPLER1D", "SAMPLER2D", "SAMPLER3D", "SAMPLERCUBE",
d888 11
a898 11
  "OR_ASSIGN", "SUB_ASSIGN", "INVARIANT", "LOWP", "MEDIUMP", "HIGHP",
  "SUPERP", "PRECISION", "VERSION_TOK", "EXTENSION", "LINE", "COLON",
  "EOL", "INTERFACE", "OUTPUT", "PRAGMA_DEBUG_ON", "PRAGMA_DEBUG_OFF",
  "PRAGMA_OPTIMIZE_ON", "PRAGMA_OPTIMIZE_OFF", "PRAGMA_INVARIANT_ALL",
  "LAYOUT_TOK", "ASM", "CLASS", "UNION", "ENUM", "TYPEDEF", "TEMPLATE",
  "THIS", "PACKED_TOK", "GOTO", "INLINE_TOK", "NOINLINE", "PUBLIC_TOK",
  "STATIC", "EXTERN", "EXTERNAL", "LONG_TOK", "SHORT_TOK", "DOUBLE_TOK",
  "HALF", "FIXED_TOK", "UNSIGNED", "INPUT_TOK", "OUPTUT", "HVEC2", "HVEC3",
  "HVEC4", "DVEC2", "DVEC3", "DVEC4", "FVEC2", "FVEC3", "FVEC4",
  "SAMPLER3DRECT", "SIZEOF", "CAST", "NAMESPACE", "USING", "RESOURCE",
  "PATCH", "SAMPLE", "SUBROUTINE", "ERROR_TOK", "COMMON", "PARTITION",
d979 1
a979 1
#define YYPACT_NINF -393
d982 1
a982 1
  (!!((Yystate) == (-393)))
d984 1
a984 1
#define YYTABLE_NINF -372
d993 54
a1046 54
     -85,   -88,    33,  -393,   -94,  -393,  -133,  -393,  -393,  -393,
    -393,   -80,   -75,  4754,  -393,  -393,   -67,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,    12,    19,    36,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -115,  -393,  -393,   261,  -393,  -393,  -393,    41,
     -64,   -48,    24,    29,    37,   -51,  -393,  -393,  4754,  -393,
    -132,   -41,   -23,     1,  -147,  -393,    86,    35,  5064,  5269,
    5064,  5064,  -393,    -6,  -393,  5064,  -393,  -393,  -393,  -393,
    -393,    88,  -393,   -75,  4943,   -24,  -393,  -393,  -393,  -393,
    -393,  5064,  -393,  5064,  -393,  5269,  -393,  -393,  -393,  -393,
    -393,   -83,  -393,  -393,   517,  -393,  -393,    17,    17,  -393,
    -393,  -393,  -393,  5269,    17,    17,   -75,  -393,    10,    27,
    -204,    38,  -125,  -121,  -113,  -393,  -393,  -393,  -393,  -393,
    -393,  3639,    15,  -393,     2,    69,   -75,  1265,  -393,  4943,
      22,  -393,  -393,    13,  -148,  -393,  -393,    23,    25,  1999,
      45,    50,    31,  3176,    53,    54,  -393,  -393,  -393,  -393,
    -393,  4085,  4085,  4085,  -393,  -393,  -393,  -393,  -393,    34,
    -393,    56,  -393,  -101,  -393,  -393,  -393,    57,  -145,  4308,
      63,   181,  4085,    -3,   -96,    42,  -108,    66,    55,    60,
      52,   151,   152,  -126,  -393,  -393,  -140,  -393,    59,  5083,
      77,  -393,  -393,  -393,  -393,   771,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,   -75,  -393,  -393,  -187,  2953,
    -175,  -393,  -393,  -393,  -393,  -393,  -393,  -393,    75,  -393,
    3862,  4943,  -393,    -6,  -138,  -393,  -393,  -393,  1502,  -393,
      79,  -393,   -83,  -393,  -393,   176,  2492,  4085,  -393,  -393,
    -127,  4085,  3416,  -393,  -393,  -117,  -393,  1999,  -393,  -393,
    4085,    86,  -393,  -393,  4085,    80,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  4085,
    -393,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,
    4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,
    4085,  4085,  -393,  -393,  -393,    -6,  2953,  -159,  2953,  -393,
    -393,  2953,  -393,  -393,    81,   -75,    62,  4943,    15,   -75,
    -393,  -393,  -393,  -393,  -393,  -393,    83,  -393,  -393,  3416,
     -89,  -393,   -58,    82,   -75,    85,  -393,  1025,    90,    82,
    -393,    89,  -393,    87,   -40,  4531,  -393,  -393,  -393,  -393,
    -393,    -3,    -3,   -96,   -96,    42,    42,    42,    42,  -108,
    -108,    66,    55,    60,    52,   151,   152,  -173,  -393,    15,
    -393,  2953,  -393,  -161,  -393,  -393,  -112,   185,  -393,  -393,
    4085,  -393,    73,    94,  1999,    76,    95,  2252,  -393,  -393,
    -393,  -393,  -393,  4085,    96,  -393,  4085,  -393,  2730,  -393,
    -393,    -6,    93,   -39,  4085,  2252,   321,  -393,   -10,  -393,
    2953,  -393,  -393,  -393,  -393,  -393,  -393,  -393,    15,  -393,
      98,    82,  -393,  1999,  4085,    97,  -393,  -393,  1746,  1999,
      -8,  -393,  -393,  -393,  -139,  -393,  -393,  -393,  -393,  -393,
    1999,  -393
d1055 53
a1107 53
       5,     0,     0,     0,    13,     6,     0,   174,   173,   197,
     194,   195,   196,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   198,   199,   200,   171,   176,   177,   178,   175,
     158,   157,   156,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   222,   223,   225,   226,   228,   229,
     230,   231,   232,   234,   235,   236,   237,   239,   240,   241,
     242,   244,   245,   246,   248,   249,   250,   251,   253,   221,
     238,   247,   227,   233,   243,   252,   254,   255,   256,   257,
     258,   259,   224,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   179,   180,   181,   182,
     183,   293,     0,   193,   192,   159,   296,   295,   294,     0,
       0,     0,     0,     0,     0,     0,   172,   363,     3,   362,
       0,     0,   117,   125,     0,   133,   138,   163,   162,     0,
     160,   161,   144,   188,   190,   164,   191,    18,   361,   114,
     366,     0,   364,     0,     0,     0,   176,   177,   178,    20,
      21,   159,   143,   163,   165,     0,     7,     8,     9,    10,
      11,     0,    19,   111,     0,   365,   115,   125,   125,   129,
     130,   131,   118,     0,   125,   125,     0,   112,    14,    16,
     139,     0,   176,   177,   178,   167,   367,   166,   145,   168,
     169,     0,   189,   170,     0,     0,     0,     0,   299,     0,
       0,   155,   154,   151,     0,   147,   153,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,    23,    24,    26,
      47,     0,     0,     0,    59,    60,    61,    62,   329,   321,
     325,    22,    28,    55,    30,    35,    36,     0,     0,    41,
       0,    63,     0,    67,    70,    73,    78,    81,    83,    85,
      87,    89,    91,    93,    95,   108,     0,   311,     0,   163,
     144,   314,   327,   313,   312,     0,   315,   316,   317,   318,
     319,   119,   126,   123,   124,   132,   127,   128,   134,     0,
     140,   120,   379,   380,   378,   184,    63,   110,     0,    45,
       0,     0,    17,   304,     0,   302,   298,   300,     0,   113,
       0,   146,     0,   357,   356,     0,     0,     0,   360,   358,
       0,     0,     0,    56,    57,     0,   320,     0,    32,    33,
       0,     0,    39,    38,     0,   193,    42,    44,    98,    99,
     101,   100,   103,   104,   105,   106,   107,   102,    97,     0,
      58,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,   326,   328,   121,     0,   135,     0,   306,
     142,     0,   185,   186,     0,     0,     0,   375,   305,     0,
     301,   297,   149,   150,   152,   148,     0,   351,   350,   353,
       0,   359,     0,   334,     0,     0,    27,     0,     0,    34,
      31,     0,    37,     0,     0,    51,    43,    96,    64,    65,
      66,    68,    69,    71,    72,    76,    77,    74,    75,    79,
      80,    82,    84,    86,    88,    90,    92,     0,   109,   122,
     137,     0,   309,     0,   141,   187,     0,   372,   376,   303,
       0,   352,     0,     0,     0,     0,     0,     0,   322,    29,
      54,    49,    48,     0,   193,    52,     0,   136,     0,   307,
     377,   373,     0,     0,   354,     0,   333,   331,     0,   336,
       0,   324,   347,   323,    53,    94,   308,   310,   374,   368,
       0,   355,   349,     0,     0,     0,   337,   341,     0,   345,
       0,   335,   348,   332,     0,   340,   343,   342,   344,   338,
     346,   339
d1113 11
a1123 11
    -393,  -393,  -393,  -393,  -393,  -393,     0,  -393,  -393,  -119,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,   -14,  -393,  -141,  -124,  -111,  -110,
     -49,   -35,   -33,   -32,   -34,   -12,  -393,  -196,  -239,  -393,
    -240,    61,     6,     7,  -393,  -393,  -393,  -393,   159,   -27,
    -393,  -393,  -393,  -393,  -168,   -11,  -393,  -393,    44,  -393,
    -393,   -77,  -393,  -393,  -203,   -13,  -393,  -393,    58,  -393,
     149,  -210,   -26,   -29,  -369,  -393,    46,  -238,  -392,  -393,
    -393,  -109,   233,    40,    48,  -393,  -393,   -31,  -393,  -393,
    -123,  -393,  -135,  -393,  -393,  -393,  -393,  -393,  -393,   248,
    -393,  -393,  -142,  -393,  -393,    -5,  -393,  -393
d1129 11
a1139 11
      -1,     2,    13,     3,   147,     6,   323,    14,   148,   261,
     262,   263,   428,   264,   265,   266,   267,   268,   269,   270,
     432,   433,   434,   435,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   369,
     286,   318,   287,   288,   151,   152,   153,   303,   202,   203,
     204,   304,   154,   155,   156,   183,   234,   414,   235,   236,
     158,   159,   160,   161,   222,   319,   163,   164,   165,   166,
     227,   228,   324,   325,   400,   463,   291,   292,   293,   294,
     347,   502,   503,   295,   296,   297,   497,   425,   298,   499,
     517,   518,   519,   520,   299,   419,   472,   473,   300,   167,
     168,   169,   170,   171,   492,   406,   407,   172
d1147 68
a1214 67
     162,   335,   157,   340,    11,   198,   226,   310,   514,   515,
     514,   515,    16,   345,  -369,   216,   182,   327,  -370,   149,
     150,   198,     7,     8,     9,   317,  -371,   460,   389,   462,
     356,   221,   464,     5,   199,   200,   201,   211,    17,    18,
      12,   378,   379,     7,     8,     9,   348,   349,   221,   309,
     199,   200,   201,     4,     7,     8,     9,   394,   184,   226,
     320,   226,     7,     8,     9,   391,   396,    35,   212,   213,
     399,   214,    39,    40,    41,    42,   320,   488,   401,   486,
     215,   217,    10,   219,   220,   501,   331,     1,   223,   353,
     332,   206,   487,   354,   461,   489,    15,   420,   391,   391,
     409,   422,   423,   501,   184,   397,   215,   207,   173,   231,
     429,   391,   186,   531,   392,   436,   410,   426,   327,   507,
     408,   391,   193,   194,   317,   390,   409,   421,   187,   312,
     437,   521,   175,   313,   350,   162,   351,   157,   380,   381,
     174,   314,   490,   374,   375,   474,   218,   216,   232,   391,
     457,  -369,   458,   405,   149,   150,   210,   399,  -370,   399,
     226,   162,   399,   126,   127,   128,   129,   130,   136,   137,
     138,   302,   230,   225,   424,  -371,   475,   306,   307,   423,
     391,   290,   191,   289,   136,   137,   138,   376,   377,   394,
     305,   233,   459,   196,   482,   510,   485,   185,   483,   391,
     188,   181,   136,   137,   138,   189,   308,   316,   136,   137,
     138,   205,   215,   190,   162,   197,   162,   382,   383,   145,
     412,   413,   399,   208,     8,   209,   290,   224,   289,   221,
     493,   229,   431,   441,   442,  -116,   496,   343,   344,   405,
     371,   372,   373,   -20,   504,   322,   516,   505,   529,   399,
     320,   424,   443,   444,   511,   205,   205,   321,   370,   146,
     -21,   399,   205,   205,    17,    18,   330,   445,   446,   447,
     448,   311,   449,   450,   524,   523,   329,   333,   336,   334,
     526,   528,   290,   337,   289,   338,   341,   342,   508,   -46,
     346,   352,   528,    35,   176,   177,   357,   178,    39,    40,
      41,    42,   386,   384,   387,   395,   316,   388,   162,   385,
     -45,   402,   416,   193,   -40,   162,   470,   465,   467,   477,
     391,   481,   480,   290,   491,   289,   479,   494,   495,   290,
     -50,   498,   233,   513,   290,   451,   289,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   509,   500,   525,
     452,   430,   522,   453,   455,   454,   301,   438,   439,   440,
     316,   316,   316,   316,   316,   316,   316,   316,   316,   316,
     316,   316,   316,   316,   316,   316,   415,   456,   328,   466,
     469,   404,   417,   195,   418,   530,   512,   427,   471,   126,
     127,   128,   129,   130,   162,   527,   192,     0,   179,     0,
     180,     0,   468,     0,     0,     0,   290,     0,     0,     0,
       0,     0,     0,     0,   290,     0,   289,     0,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   181,   136,   137,
     138,     0,     0,     0,   368,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   145,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   290,     0,   289,   290,     0,   289,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   290,     0,   289,   146,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     290,     0,   289,     0,     0,   290,   290,   289,   289,     0,
       0,     0,     0,     0,     0,     0,     0,   290,     0,   289,
      17,    18,    19,    20,    21,    22,   237,   238,   239,     0,
     240,   241,   242,   243,   244,     0,     0,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,     0,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,     0,     0,     0,     0,   126,   127,   128,   129,   130,
     131,   132,   133,   245,   179,   134,   180,   246,   247,   248,
     249,   250,     0,     0,   251,   252,     0,     0,     0,     0,
d1216 1
a1216 1
       0,     0,     0,   135,   136,   137,   138,     0,   139,     0,
d1218 1
a1218 1
       0,   145,     0,     0,     0,     0,     0,     0,     0,     0,
d1222 18
a1239 118
       0,   146,     0,     0,     0,     0,     0,     0,     0,     0,
     253,     0,     0,     0,     0,     0,   254,   255,   256,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   258,   259,   260,    17,    18,    19,    20,    21,    22,
     237,   238,   239,     0,   240,   241,   242,   243,   244,     0,
       0,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,     0,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,     0,     0,     0,     0,   126,
     127,   128,   129,   130,   131,   132,   133,   245,   179,   134,
     180,   246,   247,   248,   249,   250,     0,     0,   251,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   135,   136,   137,
     138,     0,   139,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   145,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   146,     0,     0,     0,     0,
       0,     0,     0,     0,   253,     0,     0,     0,     0,     0,
     254,   255,   256,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   258,   259,   393,    17,    18,
      19,    20,    21,    22,   237,   238,   239,     0,   240,   241,
     242,   243,   244,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
       0,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,     0,
       0,     0,     0,   126,   127,   128,   129,   130,   131,   132,
     133,   245,   179,   134,   180,   246,   247,   248,   249,   250,
       0,     0,   251,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   135,   136,   137,   138,     0,   139,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   145,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   146,
       0,     0,     0,     0,     0,     0,     0,     0,   253,     0,
       0,     0,     0,     0,   254,   255,   256,   257,    17,    18,
      19,    20,    21,    22,     0,     0,     0,     0,     0,   258,
     259,   478,     0,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,   176,   177,
       0,   178,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,     0,
       0,     0,     0,   126,   127,   128,   129,   130,   131,   132,
     133,     0,     0,   134,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   181,   136,   137,   138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   145,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   146,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    17,    18,    19,    20,    21,
      22,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   326,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,   176,   177,     0,   178,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
     126,   127,   128,   129,   130,   131,   132,   133,     0,     0,
     134,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   181,   136,
     137,   138,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   146,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    17,
      18,    19,    20,    21,    22,   237,   238,   239,   411,   240,
     241,   242,   243,   244,   514,   515,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,     0,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,   126,   127,   128,   129,   130,   131,
     132,   133,   245,   179,   134,   180,   246,   247,   248,   249,
     250,     0,     0,   251,   252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   135,   136,   137,   138,     0,   139,     0,     0,
d1241 3
a1243 22
     145,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     146,     0,     0,     0,     0,     0,     0,     0,     0,   253,
       0,     0,     0,     0,     0,   254,   255,   256,   257,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     258,   259,    17,    18,    19,    20,    21,    22,   237,   238,
     239,     0,   240,   241,   242,   243,   244,     0,     0,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,     0,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,     0,     0,     0,     0,   126,   127,   128,
     129,   130,   131,   132,   133,   245,   179,   134,   180,   246,
     247,   248,   249,   250,     0,     0,   251,   252,     0,     0,
a1244 3
       0,     0,     0,     0,     0,   135,   136,   137,   138,     0,
     139,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   145,     0,     0,     0,     0,     0,     0,
d1248 4
a1251 5
       0,     0,     0,   146,     0,     0,     0,     0,     0,     0,
       0,     0,   253,     0,     0,     0,     0,     0,   254,   255,
     256,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   258,   259,    17,    18,    19,    20,    21,
      22,   237,   238,   239,     0,   240,   241,   242,   243,   244,
d1262 8
a1269 7
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
     126,   127,   128,   129,   130,   131,   132,   133,   245,   179,
     134,   180,   246,   247,   248,   249,   250,     0,     0,   251,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   135,   136,
     137,   138,     0,   139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,     0,     0,     0,
d1273 3
a1275 4
       0,     0,     0,     0,     0,     0,   146,     0,     0,     0,
       0,     0,     0,     0,     0,   253,     0,     0,     0,     0,
       0,   254,   255,   256,   257,    17,    18,    19,    20,    21,
      22,     0,     0,     0,     0,     0,   258,   194,     0,     0,
d1277 1
a1277 1
      31,    32,    33,    34,    35,    36,    37,     0,    38,    39,
d1286 7
a1292 7
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
     126,   127,   128,   129,   130,   131,   132,   133,     0,   179,
     134,   180,   246,   247,   248,   249,   250,     0,     0,   251,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   135,   136,
     137,   138,     0,   139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,     0,     0,     0,
d1296 5
a1300 29
       0,     0,     0,     0,     0,     0,   146,     0,     0,     0,
       0,     0,     0,     0,     0,   253,     0,     0,     0,     0,
       0,   254,   255,   256,   257,    19,    20,    21,    22,     0,
       0,     0,     0,     0,     0,     0,   258,     0,     0,     0,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,   133,     0,   179,   134,   180,
     246,   247,   248,   249,   250,     0,     0,   251,   252,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    19,    20,
      21,    22,     0,   253,     0,     0,     0,     0,     0,   254,
     255,   256,   257,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,   398,   506,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
d1308 3
a1310 4
     119,   120,   121,   122,   123,   124,   125,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,   133,     0,
     179,   134,   180,   246,   247,   248,   249,   250,     0,     0,
     251,   252,     0,     0,     0,     0,     0,     0,     0,     0,
d1313 2
d1318 16
d1335 1
d1337 1
a1337 15
       0,    19,    20,    21,    22,     0,   253,     0,     0,     0,
       0,     0,   254,   255,   256,   257,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   398,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,   133,     0,   179,   134,   180,   246,   247,   248,   249,
     250,     0,     0,   251,   252,     0,     0,     0,     0,     0,
d1341 18
d1360 3
a1365 17
       0,     0,     0,     0,     0,     0,     0,     0,     0,   253,
       0,     0,     0,     0,     0,   254,   255,   256,   257,    17,
      18,    19,    20,    21,    22,     0,     0,     0,     0,     0,
     339,     0,     0,     0,     0,     0,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,   176,
     177,     0,   178,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,   126,   127,   128,   129,   130,   131,
     132,   133,     0,   179,   134,   180,   246,   247,   248,   249,
     250,     0,     0,   251,   252,     0,     0,     0,     0,     0,
d1367 1
a1367 1
       0,     0,   181,   136,   137,   138,     0,     0,     0,     0,
d1369 15
a1383 1
     145,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d1385 3
a1389 15
     146,     0,     0,     0,    19,    20,    21,    22,     0,   253,
       0,     0,     0,     0,     0,   254,   255,   256,   257,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,   133,     0,   179,   134,   180,   246,
     247,   248,   249,   250,     0,     0,   251,   252,     0,     0,
d1392 16
d1409 3
d1416 4
a1419 39
       0,     0,     0,     0,     0,     0,     0,    19,    20,    21,
      22,     0,   253,     0,     0,   315,     0,     0,   254,   255,
     256,   257,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,   133,     0,   179,
     134,   180,   246,   247,   248,   249,   250,     0,     0,   251,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      19,    20,    21,    22,     0,   253,     0,     0,   403,     0,
       0,   254,   255,   256,   257,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
     133,     0,   179,   134,   180,   246,   247,   248,   249,   250,
       0,     0,   251,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a1420 9
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    19,    20,    21,    22,     0,   253,     0,
       0,     0,     0,     0,   254,   255,   256,   257,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
d1429 3
a1431 3
     124,   125,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,   355,     0,   179,   134,   180,   246,   247,
     248,   249,   250,     0,     0,   251,   252,     0,     0,     0,
d1440 4
a1443 4
       0,   253,     0,     0,     0,     0,     0,   254,   255,   256,
     257,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,    49,    50,
d1451 26
a1476 3
     121,   122,   123,   124,   125,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,   132,   484,     0,   179,   134,
     180,   246,   247,   248,   249,   250,     0,     0,   251,   252,
d1484 6
a1489 5
       0,     0,     0,     0,     0,     0,     0,    17,    18,    19,
      20,    21,    22,     0,   253,     0,     0,     0,     0,     0,
     254,   255,   256,   257,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,     0,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
d1497 24
a1520 3
     118,   119,   120,   121,   122,   123,   124,   125,     0,     0,
       0,     0,   126,   127,   128,   129,   130,   131,   132,   133,
       0,     0,   134,     0,     0,     0,     0,     0,     0,     0,
a1522 21
     135,   136,   137,   138,     0,   139,     0,     0,     0,     0,
       0,     0,     0,   140,   141,   142,   143,   144,   145,     0,
       0,     0,     0,     0,     0,     0,    17,    18,    19,    20,
      21,    22,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,   176,   177,   146,   178,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,    17,    18,     0,
       0,   126,   127,   128,   129,   130,   131,   132,   133,     0,
       0,   134,     0,     0,     0,     0,    17,    18,     0,     0,
       0,     0,     0,     0,     0,     0,    35,   176,   177,     0,
     178,    39,    40,    41,    42,     0,     0,     0,     0,   181,
     136,   137,   138,     0,     0,    35,    36,    37,     0,    38,
      39,    40,    41,    42,     0,     0,     0,   145,     0,     0,
d1526 56
a1581 1
       0,     0,     0,     0,     0,     0,     0,   146,     0,     0,
a1583 1
       0,     0,   126,   127,   128,   129,   130,     0,     0,     0,
a1584 1
       0,   126,   127,   128,   129,   130,     0,     0,     0,     0,
a1585 4
     181,   136,   137,   138,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   145,   181,
     136,   137,   138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   145,     0,     0,
d1587 1
a1587 1
       0,     0,     0,     0,     0,     0,     0,     0,   146,    23,
d1589 2
a1590 2
      34,     0,     0,     0,     0,     0,     0,   146,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
d1598 50
a1647 113
     123,   124,   125,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,   133,     0,     0,   134
};

static const yytype_int16 yycheck[] =
{
      13,   239,    13,   243,     4,     4,   174,   210,    18,    19,
      18,    19,    12,   253,   139,   157,   135,   227,   139,    13,
      13,     4,   137,   138,   139,   221,   139,   396,   154,   398,
     269,   235,   401,     0,    33,    34,    35,   156,     3,     4,
     173,   149,   150,   137,   138,   139,   147,   148,   235,   253,
      33,    34,    35,   141,   137,   138,   139,   295,   135,   227,
     235,   229,   137,   138,   139,   238,   253,    32,    33,    34,
     309,    36,    37,    38,    39,    40,   235,   238,   253,   252,
     157,   158,   176,   160,   161,   477,   234,   172,   165,   234,
     238,   238,   461,   238,   253,   256,   176,   337,   238,   238,
     238,   341,   342,   495,   181,   308,   183,   254,   175,   192,
     350,   238,   176,   252,   254,   354,   254,   234,   328,   488,
     323,   238,   254,   255,   320,   251,   238,   254,   176,   254,
     369,   500,   132,   254,   235,   148,   237,   148,   246,   247,
     255,   254,   254,   239,   240,   234,   159,   289,   231,   238,
     390,   139,   391,   321,   148,   148,   156,   396,   139,   398,
     328,   174,   401,   128,   129,   130,   131,   132,   167,   168,
     169,   198,   185,   173,   342,   139,   234,   204,   205,   419,
     238,   194,   233,   194,   167,   168,   169,   145,   146,   427,
     203,   191,   395,   234,   234,   234,   435,   139,   238,   238,
     176,   166,   167,   168,   169,   176,   206,   221,   167,   168,
     169,   153,   289,   176,   227,   238,   229,   151,   152,   184,
     141,   142,   461,   137,   138,   139,   239,   139,   239,   235,
     470,   255,   351,   374,   375,   234,   474,   251,   252,   407,
     243,   244,   245,   233,   483,   176,   256,   486,   256,   488,
     235,   419,   376,   377,   494,   197,   198,   255,   272,   224,
     233,   500,   204,   205,     3,     4,   253,   378,   379,   380,
     381,   233,   382,   383,   514,   513,   254,   254,   233,   254,
     518,   519,   295,   233,   295,   254,   233,   233,   491,   233,
     256,   234,   530,    32,    33,    34,   233,    36,    37,    38,
      39,    40,   250,   248,   153,   305,   320,   155,   321,   249,
     233,   236,   136,   254,   234,   328,   233,   236,   256,   234,
     238,   234,   233,   336,   139,   336,   236,   254,   234,   342,
     234,   255,   332,    12,   347,   384,   347,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   254,   253,   252,
     385,   351,   254,   386,   388,   387,   197,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   332,   389,   229,   405,
     409,   320,   336,   150,   336,   520,   495,   347,   419,   128,
     129,   130,   131,   132,   407,   518,   148,    -1,   137,    -1,
     139,    -1,   407,    -1,    -1,    -1,   419,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   427,    -1,   427,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   424,    -1,    -1,   166,   167,   168,
     169,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   474,    -1,   474,   477,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   495,    -1,   495,   224,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     513,    -1,   513,    -1,    -1,   518,   519,   518,   519,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,   530,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    -1,
      13,    14,    15,    16,    17,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,    -1,    -1,    -1,    -1,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   166,   167,   168,   169,    -1,   171,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     233,    -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   254,   255,   256,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    -1,    13,    14,    15,    16,    17,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,    -1,    -1,   147,   148,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,   168,
     169,    -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,
     239,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   254,   255,   256,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    -1,    13,    14,
      15,    16,    17,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    36,    37,    38,    39,    40,    41,    42,    43,    44,
d1655 23
a1677 91
     115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
      -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   166,   167,   168,   169,    -1,   171,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,
      -1,    -1,    -1,    -1,   239,   240,   241,   242,     3,     4,
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,   254,
     255,   256,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,   128,   129,   130,   131,   132,   133,   134,
     135,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,
       8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   256,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,   131,   132,   133,   134,   135,    -1,    -1,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,
     168,   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,   256,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   166,   167,   168,   169,    -1,   171,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     254,   255,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    -1,    13,    14,    15,    16,    17,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
d1685 75
a1759 3
     121,   122,   123,    -1,    -1,    -1,    -1,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,    -1,    -1,   147,   148,    -1,    -1,
d1761 1
a1761 3
      -1,    -1,    -1,    -1,    -1,   166,   167,   168,   169,    -1,
     171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,
d1763 1
d1766 30
a1795 4
      -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,   239,   240,
     241,   242,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   254,   255,     3,     4,     5,     6,     7,
d1807 8
a1814 7
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,    -1,    -1,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,
     168,   169,    -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,
a1817 1
      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
d1820 1
a1820 1
       8,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,    -1,
d1831 7
a1837 7
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,   140,   141,   142,   143,   144,    -1,    -1,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,
     168,   169,    -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,
d1841 5
a1845 29
      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,
      -1,   239,   240,   241,   242,     5,     6,     7,     8,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,   141,   142,   143,   144,    -1,    -1,   147,   148,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,
       7,     8,    -1,   233,    -1,    -1,    -1,    -1,    -1,   239,
     240,   241,   242,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
d1853 3
a1855 5
     117,   118,   119,   120,   121,   122,   123,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,   141,   142,   143,   144,    -1,    -1,
     147,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1858 2
d1863 16
d1880 1
a1880 15
      -1,     5,     6,     7,     8,    -1,   233,    -1,    -1,    -1,
      -1,    -1,   239,   240,   241,   242,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,   255,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,
d1882 1
d1886 18
d1905 3
a1909 17
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,     3,
       4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
     254,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,
a1910 1
      -1,    -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
d1912 1
a1912 1
     184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1914 15
d1930 3
a1933 15
     224,    -1,    -1,    -1,     5,     6,     7,     8,    -1,   233,
      -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
     141,   142,   143,   144,    -1,    -1,   147,   148,    -1,    -1,
d1937 16
d1954 3
a1959 16
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,
       8,    -1,   233,    -1,    -1,   236,    -1,    -1,   239,   240,
     241,   242,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,   141,   142,   143,   144,    -1,    -1,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1961 4
a1965 31
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,     6,     7,     8,    -1,   233,    -1,    -1,   236,    -1,
      -1,   239,   240,   241,   242,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,   141,   142,   143,   144,
      -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     5,     6,     7,     8,    -1,   233,    -1,
      -1,    -1,    -1,    -1,   239,   240,   241,   242,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
d1974 3
a1976 3
     122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,   141,
     142,   143,   144,    -1,    -1,   147,   148,    -1,    -1,    -1,
d1987 2
a1988 2
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
d1996 4
a1999 3
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,   141,   142,   143,   144,    -1,    -1,   147,   148,
d2006 1
a2006 2
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
d2009 24
d2042 65
a2106 3
     116,   117,   118,   119,   120,   121,   122,   123,    -1,    -1,
      -1,    -1,   128,   129,   130,   131,   132,   133,   134,   135,
      -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a2108 21
     166,   167,   168,   169,    -1,   171,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   224,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,     3,     4,    -1,
      -1,   128,   129,   130,   131,   132,   133,   134,   135,    -1,
      -1,   138,    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    33,    34,    -1,
      36,    37,    38,    39,    40,    -1,    -1,    -1,    -1,   166,
     167,   168,   169,    -1,    -1,    32,    33,    34,    -1,    36,
      37,    38,    39,    40,    -1,    -1,    -1,   184,    -1,    -1,
d2111 15
a2126 1
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,
a2128 1
      -1,    -1,   128,   129,   130,   131,   132,    -1,    -1,    -1,
a2129 1
      -1,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
a2130 4
     166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   166,
     167,   168,   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,
d2132 1
a2132 1
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    20,
d2134 2
a2135 2
      31,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
d2141 92
a2232 4
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   134,   135,    -1,    -1,   138
d2239 2
a2240 2
       0,   172,   258,   260,   141,     0,   262,   137,   138,   139,
     176,   263,   173,   259,   264,   176,   263,     3,     4,     5,
d2251 42
a2292 42
     118,   119,   120,   121,   122,   123,   128,   129,   130,   131,
     132,   133,   134,   135,   138,   166,   167,   168,   169,   171,
     179,   180,   181,   182,   183,   184,   224,   261,   265,   299,
     300,   301,   302,   303,   309,   310,   311,   312,   317,   318,
     319,   320,   322,   323,   324,   325,   326,   356,   357,   358,
     359,   360,   364,   175,   255,   263,    33,    34,    36,   137,
     139,   166,   266,   312,   318,   325,   176,   176,   176,   176,
     176,   233,   356,   254,   255,   339,   234,   238,     4,    33,
      34,    35,   305,   306,   307,   325,   238,   254,   137,   139,
     263,   266,    33,    34,    36,   318,   359,   318,   322,   318,
     318,   235,   321,   318,   139,   263,   311,   327,   328,   255,
     322,   192,   231,   263,   313,   315,   316,     9,    10,    11,
      13,    14,    15,    16,    17,   136,   140,   141,   142,   143,
     144,   147,   148,   233,   239,   240,   241,   242,   254,   255,
     256,   266,   267,   268,   270,   271,   272,   273,   274,   275,
     276,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   297,   299,   300,   312,
     322,   333,   334,   335,   336,   340,   341,   342,   345,   351,
     355,   305,   306,   304,   308,   322,   306,   306,   263,   253,
     321,   233,   254,   254,   254,   236,   281,   294,   298,   322,
     235,   255,   176,   263,   329,   330,   256,   328,   327,   254,
     253,   234,   238,   254,   254,   334,   233,   233,   254,   254,
     297,   233,   233,   281,   281,   297,   256,   337,   147,   148,
     235,   237,   234,   234,   238,   135,   295,   233,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   253,   296,
     281,   243,   244,   245,   239,   240,   145,   146,   149,   150,
     246,   247,   151,   152,   248,   249,   250,   153,   155,   154,
     251,   238,   254,   256,   334,   263,   253,   321,   255,   295,
     331,   253,   236,   236,   298,   311,   362,   363,   321,   238,
     254,   256,   141,   142,   314,   315,   136,   333,   341,   352,
     297,   254,   297,   297,   311,   344,   234,   340,   269,   297,
     263,   266,   277,   278,   279,   280,   295,   295,   281,   281,
     281,   283,   283,   284,   284,   285,   285,   285,   285,   286,
     286,   287,   288,   289,   290,   291,   292,   297,   295,   321,
     331,   253,   331,   332,   331,   236,   329,   256,   362,   330,
     233,   344,   353,   354,   234,   234,   263,   234,   256,   236,
     233,   234,   234,   238,   135,   295,   252,   331,   238,   256,
     254,   139,   361,   297,   254,   234,   334,   343,   255,   346,
     253,   335,   338,   339,   295,   295,   256,   331,   321,   254,
     234,   297,   338,    12,    18,    19,   256,   347,   348,   349,
     350,   331,   254,   334,   297,   252,   334,   347,   334,   256,
     349,   252
d2300 18
a2317 18
     266,   266,   267,   267,   267,   267,   267,   267,   268,   268,
     268,   268,   268,   268,   269,   270,   271,   271,   272,   272,
     273,   273,   274,   274,   275,   276,   276,   276,   277,   277,
     278,   278,   279,   279,   280,   281,   281,   281,   281,   282,
     282,   282,   282,   283,   283,   283,   283,   284,   284,   284,
     285,   285,   285,   286,   286,   286,   286,   286,   287,   287,
     287,   288,   288,   289,   289,   290,   290,   291,   291,   292,
     292,   293,   293,   294,   294,   295,   295,   296,   296,   296,
     296,   296,   296,   296,   296,   296,   296,   296,   297,   297,
     298,   299,   299,   299,   299,   300,   301,   301,   302,   302,
     303,   304,   304,   305,   305,   306,   306,   306,   306,   307,
     307,   307,   308,   309,   309,   309,   309,   309,   310,   310,
     310,   310,   310,   310,   311,   311,   312,   313,   313,   314,
     314,   315,   315,   315,   316,   316,   317,   317,   317,   318,
     318,   318,   318,   318,   318,   318,   318,   318,   318,   318,
     318,   319,   319,   320,   320,   320,   320,   320,   320,   320,
     320,   320,   320,   320,   321,   321,   321,   321,   322,   322,
     323,   323,   323,   324,   324,   324,   324,   324,   324,   324,
d2327 10
a2336 10
     324,   324,   324,   324,   325,   325,   325,   326,   326,   327,
     327,   328,   329,   329,   330,   330,   331,   331,   331,   332,
     332,   333,   334,   334,   335,   335,   335,   335,   335,   335,
     336,   337,   336,   338,   338,   339,   339,   340,   340,   341,
     341,   342,   343,   343,   344,   344,   345,   346,   346,   347,
     347,   348,   348,   349,   349,   350,   350,   351,   351,   351,
     352,   352,   353,   353,   354,   354,   355,   355,   355,   355,
     355,   356,   356,   356,   356,   357,   358,   358,   359,   360,
     360,   360,   361,   361,   361,   362,   362,   363,   364,   364,
     364
d2344 8
a2351 17
       1,     1,     1,     1,     1,     1,     1,     3,     1,     4,
       1,     3,     2,     2,     1,     1,     1,     3,     2,     2,
       2,     1,     2,     3,     2,     1,     1,     1,     2,     2,
       2,     1,     2,     3,     2,     1,     2,     2,     2,     1,
       1,     1,     1,     1,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
       3,     1,     3,     1,     5,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     2,     2,     4,     1,     2,     1,     1,     2,     3,
       3,     2,     3,     2,     2,     0,     2,     2,     2,     1,
       1,     1,     1,     1,     3,     4,     6,     5,     1,     2,
       3,     5,     4,     2,     1,     2,     4,     1,     3,     1,
       1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     3,     3,     4,     1,     2,
d2353 9
d2371 10
a2380 10
       1,     1,     1,     1,     1,     1,     1,     5,     4,     1,
       2,     3,     1,     3,     1,     2,     1,     3,     4,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     0,     4,     1,     1,     2,     3,     1,     2,     1,
       2,     5,     3,     1,     1,     4,     5,     2,     3,     3,
       2,     1,     2,     2,     2,     1,     2,     5,     7,     6,
       1,     1,     1,     0,     2,     3,     2,     2,     2,     3,
       2,     1,     1,     1,     1,     2,     1,     2,     7,     1,
       1,     1,     0,     1,     2,     1,     2,     3,     3,     3,
       3
d2974 1
a2974 1
#line 80 "glsl_parser.yy" /* yacc.c:1429  */
d2983 1
a2983 1
#line 2981 "glsl_parser.cpp" /* yacc.c:1429  */
d3170 1
a3170 1
#line 295 "glsl_parser.yy" /* yacc.c:1646  */
d3174 1
a3174 1
#line 3172 "glsl_parser.cpp" /* yacc.c:1646  */
d3178 1
a3178 1
#line 299 "glsl_parser.yy" /* yacc.c:1646  */
d3184 1
a3184 1
#line 3182 "glsl_parser.cpp" /* yacc.c:1646  */
d3188 1
a3188 1
#line 309 "glsl_parser.yy" /* yacc.c:1646  */
d3195 1
a3195 1
#line 3193 "glsl_parser.cpp" /* yacc.c:1646  */
d3199 1
a3199 1
#line 316 "glsl_parser.yy" /* yacc.c:1646  */
d3206 1
a3206 1
#line 3204 "glsl_parser.cpp" /* yacc.c:1646  */
d3210 1
a3210 1
#line 330 "glsl_parser.yy" /* yacc.c:1646  */
d3221 1
a3221 1
#line 3219 "glsl_parser.cpp" /* yacc.c:1646  */
d3225 1
a3225 1
#line 355 "glsl_parser.yy" /* yacc.c:1646  */
d3231 1
a3231 1
#line 3229 "glsl_parser.cpp" /* yacc.c:1646  */
d3235 1
a3235 1
#line 364 "glsl_parser.yy" /* yacc.c:1646  */
d3243 1
a3243 1
#line 3241 "glsl_parser.cpp" /* yacc.c:1646  */
d3247 1
a3247 1
#line 372 "glsl_parser.yy" /* yacc.c:1646  */
d3255 14
a3268 1
#line 3253 "glsl_parser.cpp" /* yacc.c:1646  */
d3271 2
a3272 2
  case 22:
#line 388 "glsl_parser.yy" /* yacc.c:1646  */
d3279 1
a3279 1
#line 3264 "glsl_parser.cpp" /* yacc.c:1646  */
d3282 2
a3283 2
  case 23:
#line 395 "glsl_parser.yy" /* yacc.c:1646  */
d3290 1
a3290 1
#line 3275 "glsl_parser.cpp" /* yacc.c:1646  */
d3293 2
a3294 2
  case 24:
#line 402 "glsl_parser.yy" /* yacc.c:1646  */
d3301 1
a3301 1
#line 3286 "glsl_parser.cpp" /* yacc.c:1646  */
d3304 2
a3305 2
  case 25:
#line 409 "glsl_parser.yy" /* yacc.c:1646  */
d3312 1
a3312 1
#line 3297 "glsl_parser.cpp" /* yacc.c:1646  */
d3315 2
a3316 2
  case 26:
#line 416 "glsl_parser.yy" /* yacc.c:1646  */
d3323 1
a3323 1
#line 3308 "glsl_parser.cpp" /* yacc.c:1646  */
d3326 2
a3327 2
  case 27:
#line 423 "glsl_parser.yy" /* yacc.c:1646  */
d3331 1
a3331 1
#line 3316 "glsl_parser.cpp" /* yacc.c:1646  */
d3334 2
a3335 2
  case 29:
#line 431 "glsl_parser.yy" /* yacc.c:1646  */
d3341 1
a3341 1
#line 3326 "glsl_parser.cpp" /* yacc.c:1646  */
d3344 2
a3345 2
  case 30:
#line 437 "glsl_parser.yy" /* yacc.c:1646  */
d3349 1
a3349 1
#line 3334 "glsl_parser.cpp" /* yacc.c:1646  */
d3352 2
a3353 2
  case 31:
#line 441 "glsl_parser.yy" /* yacc.c:1646  */
d3360 1
a3360 1
#line 3345 "glsl_parser.cpp" /* yacc.c:1646  */
d3363 2
a3364 2
  case 32:
#line 448 "glsl_parser.yy" /* yacc.c:1646  */
d3370 1
a3370 1
#line 3355 "glsl_parser.cpp" /* yacc.c:1646  */
d3373 2
a3374 2
  case 33:
#line 454 "glsl_parser.yy" /* yacc.c:1646  */
d3380 1
a3380 1
#line 3365 "glsl_parser.cpp" /* yacc.c:1646  */
d3383 2
a3384 2
  case 37:
#line 472 "glsl_parser.yy" /* yacc.c:1646  */
d3390 1
a3390 1
#line 3375 "glsl_parser.cpp" /* yacc.c:1646  */
d3393 2
a3394 2
  case 42:
#line 491 "glsl_parser.yy" /* yacc.c:1646  */
d3400 1
a3400 1
#line 3385 "glsl_parser.cpp" /* yacc.c:1646  */
d3403 2
a3404 2
  case 43:
#line 497 "glsl_parser.yy" /* yacc.c:1646  */
d3410 1
a3410 1
#line 3395 "glsl_parser.cpp" /* yacc.c:1646  */
d3413 2
a3414 2
  case 45:
#line 513 "glsl_parser.yy" /* yacc.c:1646  */
d3420 1
a3420 1
#line 3405 "glsl_parser.cpp" /* yacc.c:1646  */
d3423 2
a3424 2
  case 46:
#line 519 "glsl_parser.yy" /* yacc.c:1646  */
d3432 1
a3432 1
#line 3417 "glsl_parser.cpp" /* yacc.c:1646  */
d3435 2
a3436 2
  case 47:
#line 527 "glsl_parser.yy" /* yacc.c:1646  */
d3444 1
a3444 1
#line 3429 "glsl_parser.cpp" /* yacc.c:1646  */
d3447 2
a3448 2
  case 52:
#line 548 "glsl_parser.yy" /* yacc.c:1646  */
d3454 1
a3454 1
#line 3439 "glsl_parser.cpp" /* yacc.c:1646  */
d3457 2
a3458 2
  case 53:
#line 554 "glsl_parser.yy" /* yacc.c:1646  */
d3464 1
a3464 1
#line 3449 "glsl_parser.cpp" /* yacc.c:1646  */
d3467 2
a3468 2
  case 54:
#line 566 "glsl_parser.yy" /* yacc.c:1646  */
d3476 1
a3476 1
#line 3461 "glsl_parser.cpp" /* yacc.c:1646  */
d3479 2
a3480 2
  case 56:
#line 579 "glsl_parser.yy" /* yacc.c:1646  */
d3486 1
a3486 1
#line 3471 "glsl_parser.cpp" /* yacc.c:1646  */
d3489 2
a3490 2
  case 57:
#line 585 "glsl_parser.yy" /* yacc.c:1646  */
d3496 1
a3496 1
#line 3481 "glsl_parser.cpp" /* yacc.c:1646  */
d3499 2
a3500 2
  case 58:
#line 591 "glsl_parser.yy" /* yacc.c:1646  */
d3506 1
a3506 1
#line 3491 "glsl_parser.cpp" /* yacc.c:1646  */
d3509 2
a3510 2
  case 59:
#line 600 "glsl_parser.yy" /* yacc.c:1646  */
d3512 1
a3512 1
#line 3497 "glsl_parser.cpp" /* yacc.c:1646  */
d3515 2
a3516 2
  case 60:
#line 601 "glsl_parser.yy" /* yacc.c:1646  */
d3518 1
a3518 1
#line 3503 "glsl_parser.cpp" /* yacc.c:1646  */
d3521 2
a3522 2
  case 61:
#line 602 "glsl_parser.yy" /* yacc.c:1646  */
d3524 1
a3524 1
#line 3509 "glsl_parser.cpp" /* yacc.c:1646  */
d3527 2
a3528 2
  case 62:
#line 603 "glsl_parser.yy" /* yacc.c:1646  */
d3530 1
a3530 1
#line 3515 "glsl_parser.cpp" /* yacc.c:1646  */
d3533 2
a3534 2
  case 64:
#line 609 "glsl_parser.yy" /* yacc.c:1646  */
d3540 1
a3540 1
#line 3525 "glsl_parser.cpp" /* yacc.c:1646  */
d3543 2
a3544 2
  case 65:
#line 615 "glsl_parser.yy" /* yacc.c:1646  */
d3550 1
a3550 1
#line 3535 "glsl_parser.cpp" /* yacc.c:1646  */
d3553 2
a3554 2
  case 66:
#line 621 "glsl_parser.yy" /* yacc.c:1646  */
d3560 1
a3560 1
#line 3545 "glsl_parser.cpp" /* yacc.c:1646  */
d3563 2
a3564 2
  case 68:
#line 631 "glsl_parser.yy" /* yacc.c:1646  */
d3570 1
a3570 1
#line 3555 "glsl_parser.cpp" /* yacc.c:1646  */
d3573 2
a3574 2
  case 69:
#line 637 "glsl_parser.yy" /* yacc.c:1646  */
d3580 1
a3580 1
#line 3565 "glsl_parser.cpp" /* yacc.c:1646  */
d3583 2
a3584 2
  case 71:
#line 647 "glsl_parser.yy" /* yacc.c:1646  */
d3590 1
a3590 1
#line 3575 "glsl_parser.cpp" /* yacc.c:1646  */
d3593 2
a3594 2
  case 72:
#line 653 "glsl_parser.yy" /* yacc.c:1646  */
d3600 1
a3600 1
#line 3585 "glsl_parser.cpp" /* yacc.c:1646  */
d3603 2
a3604 2
  case 74:
#line 663 "glsl_parser.yy" /* yacc.c:1646  */
d3610 1
a3610 1
#line 3595 "glsl_parser.cpp" /* yacc.c:1646  */
d3613 2
a3614 2
  case 75:
#line 669 "glsl_parser.yy" /* yacc.c:1646  */
d3620 1
a3620 1
#line 3605 "glsl_parser.cpp" /* yacc.c:1646  */
d3623 2
a3624 2
  case 76:
#line 675 "glsl_parser.yy" /* yacc.c:1646  */
d3630 1
a3630 1
#line 3615 "glsl_parser.cpp" /* yacc.c:1646  */
d3633 2
a3634 2
  case 77:
#line 681 "glsl_parser.yy" /* yacc.c:1646  */
d3640 1
a3640 1
#line 3625 "glsl_parser.cpp" /* yacc.c:1646  */
d3643 2
a3644 2
  case 79:
#line 691 "glsl_parser.yy" /* yacc.c:1646  */
d3650 1
a3650 1
#line 3635 "glsl_parser.cpp" /* yacc.c:1646  */
d3653 2
a3654 2
  case 80:
#line 697 "glsl_parser.yy" /* yacc.c:1646  */
d3660 1
a3660 1
#line 3645 "glsl_parser.cpp" /* yacc.c:1646  */
d3663 2
a3664 2
  case 82:
#line 707 "glsl_parser.yy" /* yacc.c:1646  */
d3670 1
a3670 1
#line 3655 "glsl_parser.cpp" /* yacc.c:1646  */
d3673 2
a3674 2
  case 84:
#line 717 "glsl_parser.yy" /* yacc.c:1646  */
d3680 1
a3680 1
#line 3665 "glsl_parser.cpp" /* yacc.c:1646  */
d3683 2
a3684 2
  case 86:
#line 727 "glsl_parser.yy" /* yacc.c:1646  */
d3690 1
a3690 1
#line 3675 "glsl_parser.cpp" /* yacc.c:1646  */
d3693 2
a3694 2
  case 88:
#line 737 "glsl_parser.yy" /* yacc.c:1646  */
d3700 1
a3700 1
#line 3685 "glsl_parser.cpp" /* yacc.c:1646  */
d3703 2
a3704 2
  case 90:
#line 747 "glsl_parser.yy" /* yacc.c:1646  */
d3710 1
a3710 1
#line 3695 "glsl_parser.cpp" /* yacc.c:1646  */
d3713 2
a3714 2
  case 92:
#line 757 "glsl_parser.yy" /* yacc.c:1646  */
d3720 1
a3720 1
#line 3705 "glsl_parser.cpp" /* yacc.c:1646  */
d3723 2
a3724 2
  case 94:
#line 767 "glsl_parser.yy" /* yacc.c:1646  */
d3730 1
a3730 1
#line 3715 "glsl_parser.cpp" /* yacc.c:1646  */
d3733 2
a3734 2
  case 96:
#line 777 "glsl_parser.yy" /* yacc.c:1646  */
d3740 1
a3740 1
#line 3725 "glsl_parser.cpp" /* yacc.c:1646  */
d3743 2
a3744 2
  case 97:
#line 785 "glsl_parser.yy" /* yacc.c:1646  */
d3746 1
a3746 1
#line 3731 "glsl_parser.cpp" /* yacc.c:1646  */
d3749 2
a3750 2
  case 98:
#line 786 "glsl_parser.yy" /* yacc.c:1646  */
d3752 1
a3752 1
#line 3737 "glsl_parser.cpp" /* yacc.c:1646  */
d3755 2
a3756 2
  case 99:
#line 787 "glsl_parser.yy" /* yacc.c:1646  */
d3758 1
a3758 1
#line 3743 "glsl_parser.cpp" /* yacc.c:1646  */
d3761 2
a3762 2
  case 100:
#line 788 "glsl_parser.yy" /* yacc.c:1646  */
d3764 1
a3764 1
#line 3749 "glsl_parser.cpp" /* yacc.c:1646  */
d3767 2
a3768 2
  case 101:
#line 789 "glsl_parser.yy" /* yacc.c:1646  */
d3770 1
a3770 1
#line 3755 "glsl_parser.cpp" /* yacc.c:1646  */
d3773 2
a3774 2
  case 102:
#line 790 "glsl_parser.yy" /* yacc.c:1646  */
d3776 1
a3776 1
#line 3761 "glsl_parser.cpp" /* yacc.c:1646  */
d3779 2
a3780 2
  case 103:
#line 791 "glsl_parser.yy" /* yacc.c:1646  */
d3782 1
a3782 1
#line 3767 "glsl_parser.cpp" /* yacc.c:1646  */
d3785 2
a3786 2
  case 104:
#line 792 "glsl_parser.yy" /* yacc.c:1646  */
d3788 1
a3788 1
#line 3773 "glsl_parser.cpp" /* yacc.c:1646  */
d3791 2
a3792 2
  case 105:
#line 793 "glsl_parser.yy" /* yacc.c:1646  */
d3794 1
a3794 1
#line 3779 "glsl_parser.cpp" /* yacc.c:1646  */
d3797 2
a3798 2
  case 106:
#line 794 "glsl_parser.yy" /* yacc.c:1646  */
d3800 1
a3800 1
#line 3785 "glsl_parser.cpp" /* yacc.c:1646  */
d3803 2
a3804 2
  case 107:
#line 795 "glsl_parser.yy" /* yacc.c:1646  */
d3806 1
a3806 1
#line 3791 "glsl_parser.cpp" /* yacc.c:1646  */
d3809 2
a3810 2
  case 108:
#line 800 "glsl_parser.yy" /* yacc.c:1646  */
d3814 1
a3814 1
#line 3799 "glsl_parser.cpp" /* yacc.c:1646  */
d3817 2
a3818 2
  case 109:
#line 804 "glsl_parser.yy" /* yacc.c:1646  */
d3831 1
a3831 1
#line 3816 "glsl_parser.cpp" /* yacc.c:1646  */
d3834 2
a3835 2
  case 111:
#line 824 "glsl_parser.yy" /* yacc.c:1646  */
d3840 1
a3840 1
#line 3825 "glsl_parser.cpp" /* yacc.c:1646  */
d3843 2
a3844 2
  case 112:
#line 829 "glsl_parser.yy" /* yacc.c:1646  */
d3848 1
a3848 1
#line 3833 "glsl_parser.cpp" /* yacc.c:1646  */
d3851 2
a3852 2
  case 113:
#line 833 "glsl_parser.yy" /* yacc.c:1646  */
d3857 1
a3857 1
#line 3842 "glsl_parser.cpp" /* yacc.c:1646  */
d3860 2
a3861 2
  case 114:
#line 838 "glsl_parser.yy" /* yacc.c:1646  */
d3865 1
a3865 1
#line 3850 "glsl_parser.cpp" /* yacc.c:1646  */
d3868 2
a3869 2
  case 118:
#line 854 "glsl_parser.yy" /* yacc.c:1646  */
d3874 1
a3874 1
#line 3859 "glsl_parser.cpp" /* yacc.c:1646  */
d3877 2
a3878 2
  case 119:
#line 859 "glsl_parser.yy" /* yacc.c:1646  */
d3883 1
a3883 1
#line 3868 "glsl_parser.cpp" /* yacc.c:1646  */
d3886 2
a3887 2
  case 120:
#line 867 "glsl_parser.yy" /* yacc.c:1646  */
d3898 1
a3898 1
#line 3883 "glsl_parser.cpp" /* yacc.c:1646  */
d3901 2
a3902 2
  case 121:
#line 881 "glsl_parser.yy" /* yacc.c:1646  */
d3912 1
a3912 1
#line 3897 "glsl_parser.cpp" /* yacc.c:1646  */
d3915 2
a3916 2
  case 122:
#line 891 "glsl_parser.yy" /* yacc.c:1646  */
d3927 1
a3927 1
#line 3912 "glsl_parser.cpp" /* yacc.c:1646  */
d3930 2
a3931 2
  case 123:
#line 905 "glsl_parser.yy" /* yacc.c:1646  */
d3936 1
a3936 1
#line 3921 "glsl_parser.cpp" /* yacc.c:1646  */
d3939 2
a3940 2
  case 124:
#line 910 "glsl_parser.yy" /* yacc.c:1646  */
d3950 1
a3950 1
#line 3935 "glsl_parser.cpp" /* yacc.c:1646  */
d3953 2
a3954 2
  case 125:
#line 923 "glsl_parser.yy" /* yacc.c:1646  */
d3958 1
a3958 1
#line 3943 "glsl_parser.cpp" /* yacc.c:1646  */
d3961 2
a3962 2
  case 126:
#line 927 "glsl_parser.yy" /* yacc.c:1646  */
d3970 13
a3982 1
#line 3955 "glsl_parser.cpp" /* yacc.c:1646  */
d3985 2
a3986 2
  case 127:
#line 935 "glsl_parser.yy" /* yacc.c:1646  */
d3992 2
a3993 2
         _mesa_glsl_error(&(yylsp[-1]), state, "const must be specified before "
                          "in/out/inout");
d3998 1
a3998 1
#line 3971 "glsl_parser.cpp" /* yacc.c:1646  */
d4001 2
a4002 2
  case 128:
#line 947 "glsl_parser.yy" /* yacc.c:1646  */
d4013 1
a4013 1
#line 3986 "glsl_parser.cpp" /* yacc.c:1646  */
d4016 2
a4017 2
  case 129:
#line 960 "glsl_parser.yy" /* yacc.c:1646  */
d4022 1
a4022 1
#line 3995 "glsl_parser.cpp" /* yacc.c:1646  */
d4025 2
a4026 2
  case 130:
#line 965 "glsl_parser.yy" /* yacc.c:1646  */
d4031 1
a4031 1
#line 4004 "glsl_parser.cpp" /* yacc.c:1646  */
d4034 2
a4035 2
  case 131:
#line 970 "glsl_parser.yy" /* yacc.c:1646  */
d4041 1
a4041 1
#line 4014 "glsl_parser.cpp" /* yacc.c:1646  */
d4044 2
a4045 2
  case 134:
#line 984 "glsl_parser.yy" /* yacc.c:1646  */
d4055 1
a4055 1
#line 4028 "glsl_parser.cpp" /* yacc.c:1646  */
d4058 2
a4059 2
  case 135:
#line 994 "glsl_parser.yy" /* yacc.c:1646  */
d4069 1
a4069 1
#line 4042 "glsl_parser.cpp" /* yacc.c:1646  */
d4072 2
a4073 2
  case 136:
#line 1004 "glsl_parser.yy" /* yacc.c:1646  */
d4083 1
a4083 1
#line 4056 "glsl_parser.cpp" /* yacc.c:1646  */
d4086 2
a4087 2
  case 137:
#line 1014 "glsl_parser.yy" /* yacc.c:1646  */
d4097 1
a4097 1
#line 4070 "glsl_parser.cpp" /* yacc.c:1646  */
d4100 2
a4101 2
  case 138:
#line 1028 "glsl_parser.yy" /* yacc.c:1646  */
d4108 1
a4108 1
#line 4081 "glsl_parser.cpp" /* yacc.c:1646  */
d4111 2
a4112 2
  case 139:
#line 1035 "glsl_parser.yy" /* yacc.c:1646  */
d4122 1
a4122 1
#line 4095 "glsl_parser.cpp" /* yacc.c:1646  */
d4125 2
a4126 2
  case 140:
#line 1045 "glsl_parser.yy" /* yacc.c:1646  */
d4136 1
a4136 1
#line 4109 "glsl_parser.cpp" /* yacc.c:1646  */
d4139 2
a4140 2
  case 141:
#line 1055 "glsl_parser.yy" /* yacc.c:1646  */
d4150 1
a4150 1
#line 4123 "glsl_parser.cpp" /* yacc.c:1646  */
d4153 2
a4154 2
  case 142:
#line 1065 "glsl_parser.yy" /* yacc.c:1646  */
d4164 1
a4164 1
#line 4137 "glsl_parser.cpp" /* yacc.c:1646  */
d4167 2
a4168 2
  case 143:
#line 1075 "glsl_parser.yy" /* yacc.c:1646  */
d4180 17
a4196 1
#line 4153 "glsl_parser.cpp" /* yacc.c:1646  */
d4199 2
a4200 2
  case 144:
#line 1090 "glsl_parser.yy" /* yacc.c:1646  */
d4207 1
a4207 1
#line 4164 "glsl_parser.cpp" /* yacc.c:1646  */
d4210 2
a4211 2
  case 145:
#line 1097 "glsl_parser.yy" /* yacc.c:1646  */
d4219 1
a4219 1
#line 4176 "glsl_parser.cpp" /* yacc.c:1646  */
d4222 2
a4223 2
  case 146:
#line 1108 "glsl_parser.yy" /* yacc.c:1646  */
d4227 1
a4227 1
#line 4184 "glsl_parser.cpp" /* yacc.c:1646  */
d4230 2
a4231 2
  case 148:
#line 1116 "glsl_parser.yy" /* yacc.c:1646  */
d4238 1
a4238 1
#line 4195 "glsl_parser.cpp" /* yacc.c:1646  */
d4241 2
a4242 2
  case 149:
#line 1125 "glsl_parser.yy" /* yacc.c:1646  */
d4244 1
a4244 1
#line 4201 "glsl_parser.cpp" /* yacc.c:1646  */
d4247 2
a4248 2
  case 150:
#line 1126 "glsl_parser.yy" /* yacc.c:1646  */
d4250 1
a4250 1
#line 4207 "glsl_parser.cpp" /* yacc.c:1646  */
d4253 2
a4254 2
  case 151:
#line 1131 "glsl_parser.yy" /* yacc.c:1646  */
d4439 1
a4439 1
#line 4396 "glsl_parser.cpp" /* yacc.c:1646  */
d4442 2
a4443 2
  case 152:
#line 1316 "glsl_parser.yy" /* yacc.c:1646  */
d4506 16
d4582 1
a4582 1
#line 4523 "glsl_parser.cpp" /* yacc.c:1646  */
d4585 2
a4586 2
  case 153:
#line 1439 "glsl_parser.yy" /* yacc.c:1646  */
d4600 1
a4600 1
#line 4541 "glsl_parser.cpp" /* yacc.c:1646  */
d4603 2
a4604 2
  case 154:
#line 1465 "glsl_parser.yy" /* yacc.c:1646  */
d4609 1
a4609 1
#line 4550 "glsl_parser.cpp" /* yacc.c:1646  */
d4612 2
a4613 2
  case 155:
#line 1470 "glsl_parser.yy" /* yacc.c:1646  */
d4618 1
a4618 1
#line 4559 "glsl_parser.cpp" /* yacc.c:1646  */
d4621 2
a4622 2
  case 156:
#line 1478 "glsl_parser.yy" /* yacc.c:1646  */
d4627 1
a4627 1
#line 4568 "glsl_parser.cpp" /* yacc.c:1646  */
d4630 2
a4631 2
  case 157:
#line 1483 "glsl_parser.yy" /* yacc.c:1646  */
d4636 1
a4636 1
#line 4577 "glsl_parser.cpp" /* yacc.c:1646  */
d4639 2
a4640 2
  case 158:
#line 1488 "glsl_parser.yy" /* yacc.c:1646  */
d4645 1
a4645 1
#line 4586 "glsl_parser.cpp" /* yacc.c:1646  */
d4648 2
a4649 2
  case 159:
#line 1497 "glsl_parser.yy" /* yacc.c:1646  */
d4654 10
a4663 1
#line 4595 "glsl_parser.cpp" /* yacc.c:1646  */
d4666 2
a4667 2
  case 164:
#line 1506 "glsl_parser.yy" /* yacc.c:1646  */
d4672 13
a4684 1
#line 4604 "glsl_parser.cpp" /* yacc.c:1646  */
d4687 2
a4688 2
  case 165:
#line 1524 "glsl_parser.yy" /* yacc.c:1646  */
d4693 1
a4693 1
      if ((yyvsp[0].type_qualifier).has_layout()) {
d4695 1
a4695 2
                          "\"invariant\" cannot be used with layout(...)");
      }
d4700 1
a4700 1
#line 4621 "glsl_parser.cpp" /* yacc.c:1646  */
d4703 2
a4704 2
  case 166:
#line 1537 "glsl_parser.yy" /* yacc.c:1646  */
d4719 2
a4720 6
      if ((yyvsp[0].type_qualifier).has_layout()) {
         _mesa_glsl_error(&(yylsp[-1]), state, "interpolation qualifiers cannot be used "
                          "with layout(...)");
      }

      if (!state->ARB_shading_language_420pack_enable && (yyvsp[0].type_qualifier).flags.q.invariant) {
d4722 1
a4722 1
                          "after \"invariant\"");
d4728 1
a4728 1
#line 4653 "glsl_parser.cpp" /* yacc.c:1646  */
d4731 2
a4732 2
  case 167:
#line 1565 "glsl_parser.yy" /* yacc.c:1646  */
d4734 8
a4741 5
      /* The GLSL 1.50 grammar indicates that a layout(...) declaration can be
       * used standalone or immediately before a storage qualifier.  It cannot
       * be used with interpolation qualifiers or invariant.  There does not
       * appear to be any text indicating that it must come before the storage
       * qualifier, but always seems to in examples.
a4745 9
      if ((yyvsp[0].type_qualifier).flags.q.invariant)
         _mesa_glsl_error(&(yylsp[-1]), state, "layout(...) cannot be used with "
                          "the \"invariant\" qualifier");

      if ((yyvsp[0].type_qualifier).has_interpolation()) {
         _mesa_glsl_error(&(yylsp[-1]), state, "layout(...) cannot be used with "
                          "interpolation qualifiers");
      }

d4749 1
a4749 1
#line 4680 "glsl_parser.cpp" /* yacc.c:1646  */
d4752 2
a4753 2
  case 168:
#line 1588 "glsl_parser.yy" /* yacc.c:1646  */
d4761 2
a4762 1
          ((yyvsp[0].type_qualifier).flags.q.invariant || (yyvsp[0].type_qualifier).has_interpolation() || (yyvsp[0].type_qualifier).has_layout())) {
d4769 1
a4769 1
#line 4699 "glsl_parser.cpp" /* yacc.c:1646  */
d4772 2
a4773 2
  case 169:
#line 1603 "glsl_parser.yy" /* yacc.c:1646  */
d4783 2
a4784 2
          ((yyvsp[0].type_qualifier).flags.q.invariant || (yyvsp[0].type_qualifier).has_interpolation() || (yyvsp[0].type_qualifier).has_layout() ||
           (yyvsp[0].type_qualifier).has_auxiliary_storage())) {
d4786 1
a4786 1
                          "invariant, interpolation, layout and auxiliary "
d4793 1
a4793 1
#line 4723 "glsl_parser.cpp" /* yacc.c:1646  */
d4796 2
a4797 2
  case 170:
#line 1623 "glsl_parser.yy" /* yacc.c:1646  */
d4808 1
a4808 1
#line 4738 "glsl_parser.cpp" /* yacc.c:1646  */
d4811 2
a4812 2
  case 171:
#line 1637 "glsl_parser.yy" /* yacc.c:1646  */
d4817 1
a4817 1
#line 4747 "glsl_parser.cpp" /* yacc.c:1646  */
d4820 2
a4821 2
  case 172:
#line 1642 "glsl_parser.yy" /* yacc.c:1646  */
d4826 1
a4826 1
#line 4756 "glsl_parser.cpp" /* yacc.c:1646  */
d4829 2
a4830 2
  case 173:
#line 1650 "glsl_parser.yy" /* yacc.c:1646  */
d4835 1
a4835 1
#line 4765 "glsl_parser.cpp" /* yacc.c:1646  */
d4838 2
a4839 2
  case 174:
#line 1655 "glsl_parser.yy" /* yacc.c:1646  */
d4844 1
a4844 1
#line 4774 "glsl_parser.cpp" /* yacc.c:1646  */
d4847 2
a4848 2
  case 175:
#line 1660 "glsl_parser.yy" /* yacc.c:1646  */
d4853 1
a4853 1
#line 4783 "glsl_parser.cpp" /* yacc.c:1646  */
d4856 2
a4857 2
  case 176:
#line 1665 "glsl_parser.yy" /* yacc.c:1646  */
d4862 1
a4862 1
#line 4792 "glsl_parser.cpp" /* yacc.c:1646  */
d4865 2
a4866 2
  case 177:
#line 1670 "glsl_parser.yy" /* yacc.c:1646  */
d4870 14
d4885 1
a4885 1
#line 4801 "glsl_parser.cpp" /* yacc.c:1646  */
d4888 2
a4889 2
  case 178:
#line 1675 "glsl_parser.yy" /* yacc.c:1646  */
d4894 1
a4894 1
#line 4810 "glsl_parser.cpp" /* yacc.c:1646  */
d4897 2
a4898 2
  case 179:
#line 1680 "glsl_parser.yy" /* yacc.c:1646  */
d4903 1
a4903 1
#line 4819 "glsl_parser.cpp" /* yacc.c:1646  */
d4906 2
a4907 2
  case 180:
#line 1685 "glsl_parser.yy" /* yacc.c:1646  */
d4912 1
a4912 1
#line 4828 "glsl_parser.cpp" /* yacc.c:1646  */
d4915 2
a4916 2
  case 181:
#line 1690 "glsl_parser.yy" /* yacc.c:1646  */
d4922 1
a4922 1
#line 4838 "glsl_parser.cpp" /* yacc.c:1646  */
d4925 2
a4926 2
  case 182:
#line 1696 "glsl_parser.yy" /* yacc.c:1646  */
d4931 1
a4931 1
#line 4847 "glsl_parser.cpp" /* yacc.c:1646  */
d4934 2
a4935 2
  case 183:
#line 1701 "glsl_parser.yy" /* yacc.c:1646  */
d4940 1
a4940 1
#line 4856 "glsl_parser.cpp" /* yacc.c:1646  */
d4943 2
a4944 2
  case 184:
#line 1709 "glsl_parser.yy" /* yacc.c:1646  */
d4950 1
a4950 1
#line 4866 "glsl_parser.cpp" /* yacc.c:1646  */
d4953 2
a4954 2
  case 185:
#line 1715 "glsl_parser.yy" /* yacc.c:1646  */
d4960 1
a4960 1
#line 4876 "glsl_parser.cpp" /* yacc.c:1646  */
d4963 2
a4964 2
  case 186:
#line 1721 "glsl_parser.yy" /* yacc.c:1646  */
d4978 1
a4978 1
#line 4894 "glsl_parser.cpp" /* yacc.c:1646  */
d4981 2
a4982 2
  case 187:
#line 1735 "glsl_parser.yy" /* yacc.c:1646  */
d4994 1
a4994 1
#line 4910 "glsl_parser.cpp" /* yacc.c:1646  */
d4997 2
a4998 2
  case 189:
#line 1751 "glsl_parser.yy" /* yacc.c:1646  */
d5003 1
a5003 1
#line 4919 "glsl_parser.cpp" /* yacc.c:1646  */
d5006 2
a5007 2
  case 190:
#line 1759 "glsl_parser.yy" /* yacc.c:1646  */
d5013 1
a5013 1
#line 4929 "glsl_parser.cpp" /* yacc.c:1646  */
d5016 2
a5017 2
  case 191:
#line 1765 "glsl_parser.yy" /* yacc.c:1646  */
d5023 1
a5023 1
#line 4939 "glsl_parser.cpp" /* yacc.c:1646  */
d5026 2
a5027 2
  case 192:
#line 1771 "glsl_parser.yy" /* yacc.c:1646  */
d5033 1
a5033 1
#line 4949 "glsl_parser.cpp" /* yacc.c:1646  */
d5036 2
a5037 2
  case 193:
#line 1779 "glsl_parser.yy" /* yacc.c:1646  */
d5039 1
a5039 1
#line 4955 "glsl_parser.cpp" /* yacc.c:1646  */
d5042 2
a5043 2
  case 194:
#line 1780 "glsl_parser.yy" /* yacc.c:1646  */
d5045 1
a5045 1
#line 4961 "glsl_parser.cpp" /* yacc.c:1646  */
d5048 2
a5049 2
  case 195:
#line 1781 "glsl_parser.yy" /* yacc.c:1646  */
d5051 1
a5051 1
#line 4967 "glsl_parser.cpp" /* yacc.c:1646  */
d5054 2
a5055 2
  case 196:
#line 1782 "glsl_parser.yy" /* yacc.c:1646  */
d5057 1
a5057 1
#line 4973 "glsl_parser.cpp" /* yacc.c:1646  */
d5060 2
a5061 2
  case 197:
#line 1783 "glsl_parser.yy" /* yacc.c:1646  */
d5063 1
a5063 1
#line 4979 "glsl_parser.cpp" /* yacc.c:1646  */
d5066 2
a5067 2
  case 198:
#line 1784 "glsl_parser.yy" /* yacc.c:1646  */
d5069 1
a5069 1
#line 4985 "glsl_parser.cpp" /* yacc.c:1646  */
d5072 2
a5073 2
  case 199:
#line 1785 "glsl_parser.yy" /* yacc.c:1646  */
d5075 1
a5075 1
#line 4991 "glsl_parser.cpp" /* yacc.c:1646  */
d5078 2
a5079 2
  case 200:
#line 1786 "glsl_parser.yy" /* yacc.c:1646  */
d5081 1
a5081 1
#line 4997 "glsl_parser.cpp" /* yacc.c:1646  */
d5084 2
a5085 2
  case 201:
#line 1787 "glsl_parser.yy" /* yacc.c:1646  */
d5087 1
a5087 1
#line 5003 "glsl_parser.cpp" /* yacc.c:1646  */
d5090 2
a5091 2
  case 202:
#line 1788 "glsl_parser.yy" /* yacc.c:1646  */
d5093 1
a5093 1
#line 5009 "glsl_parser.cpp" /* yacc.c:1646  */
d5096 2
a5097 2
  case 203:
#line 1789 "glsl_parser.yy" /* yacc.c:1646  */
d5099 1
a5099 1
#line 5015 "glsl_parser.cpp" /* yacc.c:1646  */
d5102 2
a5103 2
  case 204:
#line 1790 "glsl_parser.yy" /* yacc.c:1646  */
d5105 1
a5105 1
#line 5021 "glsl_parser.cpp" /* yacc.c:1646  */
d5108 2
a5109 2
  case 205:
#line 1791 "glsl_parser.yy" /* yacc.c:1646  */
d5111 1
a5111 1
#line 5027 "glsl_parser.cpp" /* yacc.c:1646  */
d5114 2
a5115 2
  case 206:
#line 1792 "glsl_parser.yy" /* yacc.c:1646  */
d5117 1
a5117 1
#line 5033 "glsl_parser.cpp" /* yacc.c:1646  */
d5120 2
a5121 2
  case 207:
#line 1793 "glsl_parser.yy" /* yacc.c:1646  */
d5123 1
a5123 1
#line 5039 "glsl_parser.cpp" /* yacc.c:1646  */
d5126 2
a5127 2
  case 208:
#line 1794 "glsl_parser.yy" /* yacc.c:1646  */
d5129 1
a5129 1
#line 5045 "glsl_parser.cpp" /* yacc.c:1646  */
d5132 2
a5133 2
  case 209:
#line 1795 "glsl_parser.yy" /* yacc.c:1646  */
d5135 1
a5135 1
#line 5051 "glsl_parser.cpp" /* yacc.c:1646  */
d5138 2
a5139 2
  case 210:
#line 1796 "glsl_parser.yy" /* yacc.c:1646  */
d5141 1
a5141 1
#line 5057 "glsl_parser.cpp" /* yacc.c:1646  */
d5144 2
a5145 2
  case 211:
#line 1797 "glsl_parser.yy" /* yacc.c:1646  */
d5147 1
a5147 1
#line 5063 "glsl_parser.cpp" /* yacc.c:1646  */
d5150 2
a5151 2
  case 212:
#line 1798 "glsl_parser.yy" /* yacc.c:1646  */
d5153 1
a5153 1
#line 5069 "glsl_parser.cpp" /* yacc.c:1646  */
d5156 2
a5157 2
  case 213:
#line 1799 "glsl_parser.yy" /* yacc.c:1646  */
d5159 1
a5159 1
#line 5075 "glsl_parser.cpp" /* yacc.c:1646  */
d5162 2
a5163 2
  case 214:
#line 1800 "glsl_parser.yy" /* yacc.c:1646  */
d5165 1
a5165 1
#line 5081 "glsl_parser.cpp" /* yacc.c:1646  */
d5168 2
a5169 2
  case 215:
#line 1801 "glsl_parser.yy" /* yacc.c:1646  */
d5171 1
a5171 1
#line 5087 "glsl_parser.cpp" /* yacc.c:1646  */
d5174 2
a5175 2
  case 216:
#line 1802 "glsl_parser.yy" /* yacc.c:1646  */
d5177 1
a5177 1
#line 5093 "glsl_parser.cpp" /* yacc.c:1646  */
d5180 2
a5181 2
  case 217:
#line 1803 "glsl_parser.yy" /* yacc.c:1646  */
d5183 1
a5183 1
#line 5099 "glsl_parser.cpp" /* yacc.c:1646  */
d5186 2
a5187 2
  case 218:
#line 1804 "glsl_parser.yy" /* yacc.c:1646  */
d5189 1
a5189 1
#line 5105 "glsl_parser.cpp" /* yacc.c:1646  */
d5192 2
a5193 2
  case 219:
#line 1805 "glsl_parser.yy" /* yacc.c:1646  */
d5195 1
a5195 1
#line 5111 "glsl_parser.cpp" /* yacc.c:1646  */
d5198 2
a5199 2
  case 220:
#line 1806 "glsl_parser.yy" /* yacc.c:1646  */
d5201 1
a5201 1
#line 5117 "glsl_parser.cpp" /* yacc.c:1646  */
d5204 2
a5205 2
  case 221:
#line 1807 "glsl_parser.yy" /* yacc.c:1646  */
d5207 1
a5207 1
#line 5123 "glsl_parser.cpp" /* yacc.c:1646  */
d5210 2
a5211 2
  case 222:
#line 1808 "glsl_parser.yy" /* yacc.c:1646  */
d5213 1
a5213 1
#line 5129 "glsl_parser.cpp" /* yacc.c:1646  */
d5216 2
a5217 2
  case 223:
#line 1809 "glsl_parser.yy" /* yacc.c:1646  */
d5219 1
a5219 1
#line 5135 "glsl_parser.cpp" /* yacc.c:1646  */
d5222 2
a5223 2
  case 224:
#line 1810 "glsl_parser.yy" /* yacc.c:1646  */
d5225 1
a5225 1
#line 5141 "glsl_parser.cpp" /* yacc.c:1646  */
d5228 2
a5229 2
  case 225:
#line 1811 "glsl_parser.yy" /* yacc.c:1646  */
d5231 1
a5231 1
#line 5147 "glsl_parser.cpp" /* yacc.c:1646  */
d5234 2
a5235 2
  case 226:
#line 1812 "glsl_parser.yy" /* yacc.c:1646  */
d5237 1
a5237 1
#line 5153 "glsl_parser.cpp" /* yacc.c:1646  */
d5240 2
a5241 2
  case 227:
#line 1813 "glsl_parser.yy" /* yacc.c:1646  */
d5243 1
a5243 1
#line 5159 "glsl_parser.cpp" /* yacc.c:1646  */
d5246 2
a5247 2
  case 228:
#line 1814 "glsl_parser.yy" /* yacc.c:1646  */
d5249 1
a5249 1
#line 5165 "glsl_parser.cpp" /* yacc.c:1646  */
d5252 2
a5253 2
  case 229:
#line 1815 "glsl_parser.yy" /* yacc.c:1646  */
d5255 1
a5255 1
#line 5171 "glsl_parser.cpp" /* yacc.c:1646  */
d5258 2
a5259 2
  case 230:
#line 1816 "glsl_parser.yy" /* yacc.c:1646  */
d5261 1
a5261 1
#line 5177 "glsl_parser.cpp" /* yacc.c:1646  */
d5264 2
a5265 2
  case 231:
#line 1817 "glsl_parser.yy" /* yacc.c:1646  */
d5267 1
a5267 1
#line 5183 "glsl_parser.cpp" /* yacc.c:1646  */
d5270 2
a5271 2
  case 232:
#line 1818 "glsl_parser.yy" /* yacc.c:1646  */
d5273 1
a5273 1
#line 5189 "glsl_parser.cpp" /* yacc.c:1646  */
d5276 2
a5277 2
  case 233:
#line 1819 "glsl_parser.yy" /* yacc.c:1646  */
d5279 1
a5279 1
#line 5195 "glsl_parser.cpp" /* yacc.c:1646  */
d5282 2
a5283 2
  case 234:
#line 1820 "glsl_parser.yy" /* yacc.c:1646  */
d5285 1
a5285 1
#line 5201 "glsl_parser.cpp" /* yacc.c:1646  */
d5288 2
a5289 2
  case 235:
#line 1821 "glsl_parser.yy" /* yacc.c:1646  */
d5291 1
a5291 1
#line 5207 "glsl_parser.cpp" /* yacc.c:1646  */
d5294 2
a5295 2
  case 236:
#line 1822 "glsl_parser.yy" /* yacc.c:1646  */
d5297 1
a5297 1
#line 5213 "glsl_parser.cpp" /* yacc.c:1646  */
d5300 2
a5301 2
  case 237:
#line 1823 "glsl_parser.yy" /* yacc.c:1646  */
d5303 1
a5303 1
#line 5219 "glsl_parser.cpp" /* yacc.c:1646  */
d5306 2
a5307 2
  case 238:
#line 1824 "glsl_parser.yy" /* yacc.c:1646  */
d5309 1
a5309 1
#line 5225 "glsl_parser.cpp" /* yacc.c:1646  */
d5312 2
a5313 2
  case 239:
#line 1825 "glsl_parser.yy" /* yacc.c:1646  */
d5315 1
a5315 1
#line 5231 "glsl_parser.cpp" /* yacc.c:1646  */
d5318 2
a5319 2
  case 240:
#line 1826 "glsl_parser.yy" /* yacc.c:1646  */
d5321 1
a5321 1
#line 5237 "glsl_parser.cpp" /* yacc.c:1646  */
d5324 2
a5325 2
  case 241:
#line 1827 "glsl_parser.yy" /* yacc.c:1646  */
d5327 1
a5327 1
#line 5243 "glsl_parser.cpp" /* yacc.c:1646  */
d5330 2
a5331 2
  case 242:
#line 1828 "glsl_parser.yy" /* yacc.c:1646  */
d5333 1
a5333 1
#line 5249 "glsl_parser.cpp" /* yacc.c:1646  */
d5336 2
a5337 2
  case 243:
#line 1829 "glsl_parser.yy" /* yacc.c:1646  */
d5339 1
a5339 1
#line 5255 "glsl_parser.cpp" /* yacc.c:1646  */
d5342 2
a5343 2
  case 244:
#line 1830 "glsl_parser.yy" /* yacc.c:1646  */
d5345 1
a5345 1
#line 5261 "glsl_parser.cpp" /* yacc.c:1646  */
d5348 2
a5349 2
  case 245:
#line 1831 "glsl_parser.yy" /* yacc.c:1646  */
d5351 1
a5351 1
#line 5267 "glsl_parser.cpp" /* yacc.c:1646  */
d5354 2
a5355 2
  case 246:
#line 1832 "glsl_parser.yy" /* yacc.c:1646  */
d5357 1
a5357 1
#line 5273 "glsl_parser.cpp" /* yacc.c:1646  */
d5360 2
a5361 2
  case 247:
#line 1833 "glsl_parser.yy" /* yacc.c:1646  */
d5363 1
a5363 1
#line 5279 "glsl_parser.cpp" /* yacc.c:1646  */
d5366 2
a5367 2
  case 248:
#line 1834 "glsl_parser.yy" /* yacc.c:1646  */
d5369 1
a5369 1
#line 5285 "glsl_parser.cpp" /* yacc.c:1646  */
d5372 2
a5373 2
  case 249:
#line 1835 "glsl_parser.yy" /* yacc.c:1646  */
d5375 1
a5375 1
#line 5291 "glsl_parser.cpp" /* yacc.c:1646  */
d5378 2
a5379 2
  case 250:
#line 1836 "glsl_parser.yy" /* yacc.c:1646  */
d5381 1
a5381 1
#line 5297 "glsl_parser.cpp" /* yacc.c:1646  */
d5384 2
a5385 2
  case 251:
#line 1837 "glsl_parser.yy" /* yacc.c:1646  */
d5387 1
a5387 1
#line 5303 "glsl_parser.cpp" /* yacc.c:1646  */
d5390 2
a5391 2
  case 252:
#line 1838 "glsl_parser.yy" /* yacc.c:1646  */
d5393 1
a5393 1
#line 5309 "glsl_parser.cpp" /* yacc.c:1646  */
d5396 2
a5397 2
  case 253:
#line 1839 "glsl_parser.yy" /* yacc.c:1646  */
d5399 1
a5399 1
#line 5315 "glsl_parser.cpp" /* yacc.c:1646  */
d5402 2
a5403 2
  case 254:
#line 1840 "glsl_parser.yy" /* yacc.c:1646  */
d5405 1
a5405 1
#line 5321 "glsl_parser.cpp" /* yacc.c:1646  */
d5408 2
a5409 2
  case 255:
#line 1841 "glsl_parser.yy" /* yacc.c:1646  */
d5411 1
a5411 1
#line 5327 "glsl_parser.cpp" /* yacc.c:1646  */
d5414 2
a5415 2
  case 256:
#line 1842 "glsl_parser.yy" /* yacc.c:1646  */
d5417 1
a5417 1
#line 5333 "glsl_parser.cpp" /* yacc.c:1646  */
d5420 2
a5421 2
  case 257:
#line 1843 "glsl_parser.yy" /* yacc.c:1646  */
d5423 1
a5423 1
#line 5339 "glsl_parser.cpp" /* yacc.c:1646  */
d5426 2
a5427 2
  case 258:
#line 1844 "glsl_parser.yy" /* yacc.c:1646  */
d5429 1
a5429 1
#line 5345 "glsl_parser.cpp" /* yacc.c:1646  */
d5432 2
a5433 2
  case 259:
#line 1845 "glsl_parser.yy" /* yacc.c:1646  */
d5435 1
a5435 1
#line 5351 "glsl_parser.cpp" /* yacc.c:1646  */
d5438 2
a5439 2
  case 260:
#line 1846 "glsl_parser.yy" /* yacc.c:1646  */
d5441 1
a5441 1
#line 5357 "glsl_parser.cpp" /* yacc.c:1646  */
d5444 2
a5445 2
  case 261:
#line 1847 "glsl_parser.yy" /* yacc.c:1646  */
d5447 1
a5447 1
#line 5363 "glsl_parser.cpp" /* yacc.c:1646  */
d5450 2
a5451 2
  case 262:
#line 1848 "glsl_parser.yy" /* yacc.c:1646  */
d5453 1
a5453 1
#line 5369 "glsl_parser.cpp" /* yacc.c:1646  */
d5456 2
a5457 2
  case 263:
#line 1849 "glsl_parser.yy" /* yacc.c:1646  */
d5459 1
a5459 1
#line 5375 "glsl_parser.cpp" /* yacc.c:1646  */
d5462 2
a5463 2
  case 264:
#line 1850 "glsl_parser.yy" /* yacc.c:1646  */
d5465 1
a5465 1
#line 5381 "glsl_parser.cpp" /* yacc.c:1646  */
d5468 2
a5469 2
  case 265:
#line 1851 "glsl_parser.yy" /* yacc.c:1646  */
d5471 1
a5471 1
#line 5387 "glsl_parser.cpp" /* yacc.c:1646  */
d5474 2
a5475 2
  case 266:
#line 1852 "glsl_parser.yy" /* yacc.c:1646  */
d5477 1
a5477 1
#line 5393 "glsl_parser.cpp" /* yacc.c:1646  */
d5480 2
a5481 2
  case 267:
#line 1853 "glsl_parser.yy" /* yacc.c:1646  */
d5483 1
a5483 1
#line 5399 "glsl_parser.cpp" /* yacc.c:1646  */
d5486 2
a5487 2
  case 268:
#line 1854 "glsl_parser.yy" /* yacc.c:1646  */
d5489 1
a5489 1
#line 5405 "glsl_parser.cpp" /* yacc.c:1646  */
d5492 2
a5493 2
  case 269:
#line 1855 "glsl_parser.yy" /* yacc.c:1646  */
d5495 1
a5495 1
#line 5411 "glsl_parser.cpp" /* yacc.c:1646  */
d5498 2
a5499 2
  case 270:
#line 1856 "glsl_parser.yy" /* yacc.c:1646  */
d5501 1
a5501 1
#line 5417 "glsl_parser.cpp" /* yacc.c:1646  */
d5504 2
a5505 2
  case 271:
#line 1857 "glsl_parser.yy" /* yacc.c:1646  */
d5507 1
a5507 1
#line 5423 "glsl_parser.cpp" /* yacc.c:1646  */
d5510 2
a5511 2
  case 272:
#line 1858 "glsl_parser.yy" /* yacc.c:1646  */
d5513 1
a5513 1
#line 5429 "glsl_parser.cpp" /* yacc.c:1646  */
d5516 2
a5517 2
  case 273:
#line 1859 "glsl_parser.yy" /* yacc.c:1646  */
d5519 1
a5519 1
#line 5435 "glsl_parser.cpp" /* yacc.c:1646  */
d5522 2
a5523 2
  case 274:
#line 1860 "glsl_parser.yy" /* yacc.c:1646  */
d5525 1
a5525 1
#line 5441 "glsl_parser.cpp" /* yacc.c:1646  */
d5528 2
a5529 2
  case 275:
#line 1861 "glsl_parser.yy" /* yacc.c:1646  */
d5531 1
a5531 1
#line 5447 "glsl_parser.cpp" /* yacc.c:1646  */
d5534 2
a5535 2
  case 276:
#line 1862 "glsl_parser.yy" /* yacc.c:1646  */
d5537 1
a5537 1
#line 5453 "glsl_parser.cpp" /* yacc.c:1646  */
d5540 2
a5541 2
  case 277:
#line 1863 "glsl_parser.yy" /* yacc.c:1646  */
d5543 1
a5543 1
#line 5459 "glsl_parser.cpp" /* yacc.c:1646  */
d5546 2
a5547 2
  case 278:
#line 1864 "glsl_parser.yy" /* yacc.c:1646  */
d5549 1
a5549 1
#line 5465 "glsl_parser.cpp" /* yacc.c:1646  */
d5552 2
a5553 2
  case 279:
#line 1865 "glsl_parser.yy" /* yacc.c:1646  */
d5555 1
a5555 1
#line 5471 "glsl_parser.cpp" /* yacc.c:1646  */
d5558 2
a5559 2
  case 280:
#line 1866 "glsl_parser.yy" /* yacc.c:1646  */
d5561 1
a5561 1
#line 5477 "glsl_parser.cpp" /* yacc.c:1646  */
d5564 2
a5565 2
  case 281:
#line 1867 "glsl_parser.yy" /* yacc.c:1646  */
d5567 1
a5567 1
#line 5483 "glsl_parser.cpp" /* yacc.c:1646  */
d5570 2
a5571 2
  case 282:
#line 1868 "glsl_parser.yy" /* yacc.c:1646  */
d5573 1
a5573 1
#line 5489 "glsl_parser.cpp" /* yacc.c:1646  */
d5576 2
a5577 2
  case 283:
#line 1869 "glsl_parser.yy" /* yacc.c:1646  */
d5579 1
a5579 1
#line 5495 "glsl_parser.cpp" /* yacc.c:1646  */
d5582 2
a5583 2
  case 284:
#line 1870 "glsl_parser.yy" /* yacc.c:1646  */
d5585 1
a5585 1
#line 5501 "glsl_parser.cpp" /* yacc.c:1646  */
d5588 2
a5589 2
  case 285:
#line 1871 "glsl_parser.yy" /* yacc.c:1646  */
d5591 1
a5591 1
#line 5507 "glsl_parser.cpp" /* yacc.c:1646  */
d5594 2
a5595 2
  case 286:
#line 1872 "glsl_parser.yy" /* yacc.c:1646  */
d5597 1
a5597 1
#line 5513 "glsl_parser.cpp" /* yacc.c:1646  */
d5600 2
a5601 2
  case 287:
#line 1873 "glsl_parser.yy" /* yacc.c:1646  */
d5603 1
a5603 1
#line 5519 "glsl_parser.cpp" /* yacc.c:1646  */
d5606 2
a5607 2
  case 288:
#line 1874 "glsl_parser.yy" /* yacc.c:1646  */
d5609 1
a5609 1
#line 5525 "glsl_parser.cpp" /* yacc.c:1646  */
d5612 2
a5613 2
  case 289:
#line 1875 "glsl_parser.yy" /* yacc.c:1646  */
d5615 1
a5615 1
#line 5531 "glsl_parser.cpp" /* yacc.c:1646  */
d5618 2
a5619 2
  case 290:
#line 1876 "glsl_parser.yy" /* yacc.c:1646  */
d5621 1
a5621 1
#line 5537 "glsl_parser.cpp" /* yacc.c:1646  */
d5624 2
a5625 2
  case 291:
#line 1877 "glsl_parser.yy" /* yacc.c:1646  */
d5627 1
a5627 1
#line 5543 "glsl_parser.cpp" /* yacc.c:1646  */
d5630 2
a5631 2
  case 292:
#line 1878 "glsl_parser.yy" /* yacc.c:1646  */
d5633 1
a5633 1
#line 5549 "glsl_parser.cpp" /* yacc.c:1646  */
d5636 2
a5637 2
  case 293:
#line 1879 "glsl_parser.yy" /* yacc.c:1646  */
d5639 1
a5639 1
#line 5555 "glsl_parser.cpp" /* yacc.c:1646  */
d5642 2
a5643 2
  case 294:
#line 1884 "glsl_parser.yy" /* yacc.c:1646  */
d5648 1
a5648 1
#line 5564 "glsl_parser.cpp" /* yacc.c:1646  */
d5651 2
a5652 2
  case 295:
#line 1889 "glsl_parser.yy" /* yacc.c:1646  */
d5657 1
a5657 1
#line 5573 "glsl_parser.cpp" /* yacc.c:1646  */
d5660 2
a5661 2
  case 296:
#line 1894 "glsl_parser.yy" /* yacc.c:1646  */
d5666 1
a5666 1
#line 5582 "glsl_parser.cpp" /* yacc.c:1646  */
d5669 2
a5670 2
  case 297:
#line 1902 "glsl_parser.yy" /* yacc.c:1646  */
d5677 1
a5677 1
#line 5593 "glsl_parser.cpp" /* yacc.c:1646  */
d5680 2
a5681 2
  case 298:
#line 1909 "glsl_parser.yy" /* yacc.c:1646  */
d5687 1
a5687 1
#line 5603 "glsl_parser.cpp" /* yacc.c:1646  */
d5690 2
a5691 2
  case 299:
#line 1918 "glsl_parser.yy" /* yacc.c:1646  */
d5696 1
a5696 1
#line 5612 "glsl_parser.cpp" /* yacc.c:1646  */
d5699 2
a5700 2
  case 300:
#line 1923 "glsl_parser.yy" /* yacc.c:1646  */
d5705 1
a5705 1
#line 5621 "glsl_parser.cpp" /* yacc.c:1646  */
d5708 2
a5709 2
  case 301:
#line 1931 "glsl_parser.yy" /* yacc.c:1646  */
d5725 1
a5725 1
#line 5641 "glsl_parser.cpp" /* yacc.c:1646  */
d5728 2
a5729 2
  case 302:
#line 1950 "glsl_parser.yy" /* yacc.c:1646  */
d5734 1
a5734 1
#line 5650 "glsl_parser.cpp" /* yacc.c:1646  */
d5737 2
a5738 2
  case 303:
#line 1955 "glsl_parser.yy" /* yacc.c:1646  */
d5743 1
a5743 1
#line 5659 "glsl_parser.cpp" /* yacc.c:1646  */
d5746 2
a5747 2
  case 304:
#line 1963 "glsl_parser.yy" /* yacc.c:1646  */
d5753 1
a5753 1
#line 5669 "glsl_parser.cpp" /* yacc.c:1646  */
d5756 2
a5757 2
  case 305:
#line 1969 "glsl_parser.yy" /* yacc.c:1646  */
d5763 1
a5763 1
#line 5679 "glsl_parser.cpp" /* yacc.c:1646  */
d5766 2
a5767 2
  case 307:
#line 1979 "glsl_parser.yy" /* yacc.c:1646  */
d5771 1
a5771 1
#line 5687 "glsl_parser.cpp" /* yacc.c:1646  */
d5774 2
a5775 2
  case 308:
#line 1983 "glsl_parser.yy" /* yacc.c:1646  */
d5779 1
a5779 1
#line 5695 "glsl_parser.cpp" /* yacc.c:1646  */
d5782 2
a5783 2
  case 309:
#line 1990 "glsl_parser.yy" /* yacc.c:1646  */
d5790 1
a5790 1
#line 5706 "glsl_parser.cpp" /* yacc.c:1646  */
d5793 2
a5794 2
  case 310:
#line 1997 "glsl_parser.yy" /* yacc.c:1646  */
d5798 1
a5798 1
#line 5714 "glsl_parser.cpp" /* yacc.c:1646  */
d5801 2
a5802 2
  case 312:
#line 2009 "glsl_parser.yy" /* yacc.c:1646  */
d5804 1
a5804 1
#line 5720 "glsl_parser.cpp" /* yacc.c:1646  */
d5807 2
a5808 2
  case 320:
#line 2024 "glsl_parser.yy" /* yacc.c:1646  */
d5814 1
a5814 1
#line 5730 "glsl_parser.cpp" /* yacc.c:1646  */
d5817 2
a5818 2
  case 321:
#line 2030 "glsl_parser.yy" /* yacc.c:1646  */
d5822 1
a5822 1
#line 5738 "glsl_parser.cpp" /* yacc.c:1646  */
d5825 2
a5826 2
  case 322:
#line 2034 "glsl_parser.yy" /* yacc.c:1646  */
d5833 1
a5833 1
#line 5749 "glsl_parser.cpp" /* yacc.c:1646  */
d5836 2
a5837 2
  case 323:
#line 2043 "glsl_parser.yy" /* yacc.c:1646  */
d5839 1
a5839 1
#line 5755 "glsl_parser.cpp" /* yacc.c:1646  */
d5842 2
a5843 2
  case 325:
#line 2049 "glsl_parser.yy" /* yacc.c:1646  */
d5849 1
a5849 1
#line 5765 "glsl_parser.cpp" /* yacc.c:1646  */
d5852 2
a5853 2
  case 326:
#line 2055 "glsl_parser.yy" /* yacc.c:1646  */
d5859 1
a5859 1
#line 5775 "glsl_parser.cpp" /* yacc.c:1646  */
d5862 2
a5863 2
  case 327:
#line 2064 "glsl_parser.yy" /* yacc.c:1646  */
d5873 1
a5873 1
#line 5789 "glsl_parser.cpp" /* yacc.c:1646  */
d5876 2
a5877 2
  case 328:
#line 2074 "glsl_parser.yy" /* yacc.c:1646  */
d5886 1
a5886 1
#line 5802 "glsl_parser.cpp" /* yacc.c:1646  */
d5889 2
a5890 2
  case 329:
#line 2086 "glsl_parser.yy" /* yacc.c:1646  */
d5896 1
a5896 1
#line 5812 "glsl_parser.cpp" /* yacc.c:1646  */
d5899 2
a5900 2
  case 330:
#line 2092 "glsl_parser.yy" /* yacc.c:1646  */
d5906 1
a5906 1
#line 5822 "glsl_parser.cpp" /* yacc.c:1646  */
d5909 2
a5910 2
  case 331:
#line 2101 "glsl_parser.yy" /* yacc.c:1646  */
d5916 1
a5916 1
#line 5832 "glsl_parser.cpp" /* yacc.c:1646  */
d5919 2
a5920 2
  case 332:
#line 2110 "glsl_parser.yy" /* yacc.c:1646  */
d5925 1
a5925 1
#line 5841 "glsl_parser.cpp" /* yacc.c:1646  */
d5928 2
a5929 2
  case 333:
#line 2115 "glsl_parser.yy" /* yacc.c:1646  */
d5934 1
a5934 1
#line 5850 "glsl_parser.cpp" /* yacc.c:1646  */
d5937 2
a5938 2
  case 334:
#line 2123 "glsl_parser.yy" /* yacc.c:1646  */
d5942 1
a5942 1
#line 5858 "glsl_parser.cpp" /* yacc.c:1646  */
d5945 2
a5946 2
  case 335:
#line 2127 "glsl_parser.yy" /* yacc.c:1646  */
d5957 1
a5957 1
#line 5873 "glsl_parser.cpp" /* yacc.c:1646  */
d5960 2
a5961 2
  case 336:
#line 2145 "glsl_parser.yy" /* yacc.c:1646  */
d5966 1
a5966 1
#line 5882 "glsl_parser.cpp" /* yacc.c:1646  */
d5969 2
a5970 2
  case 337:
#line 2153 "glsl_parser.yy" /* yacc.c:1646  */
d5975 1
a5975 1
#line 5891 "glsl_parser.cpp" /* yacc.c:1646  */
d5978 2
a5979 2
  case 338:
#line 2158 "glsl_parser.yy" /* yacc.c:1646  */
d5984 1
a5984 1
#line 5900 "glsl_parser.cpp" /* yacc.c:1646  */
d5987 2
a5988 2
  case 339:
#line 2166 "glsl_parser.yy" /* yacc.c:1646  */
d5993 1
a5993 1
#line 5909 "glsl_parser.cpp" /* yacc.c:1646  */
d5996 2
a5997 2
  case 340:
#line 2171 "glsl_parser.yy" /* yacc.c:1646  */
d6002 1
a6002 1
#line 5918 "glsl_parser.cpp" /* yacc.c:1646  */
d6005 2
a6006 2
  case 341:
#line 2179 "glsl_parser.yy" /* yacc.c:1646  */
d6014 1
a6014 1
#line 5930 "glsl_parser.cpp" /* yacc.c:1646  */
d6017 2
a6018 2
  case 342:
#line 2187 "glsl_parser.yy" /* yacc.c:1646  */
d6023 1
a6023 1
#line 5939 "glsl_parser.cpp" /* yacc.c:1646  */
d6026 2
a6027 2
  case 343:
#line 2195 "glsl_parser.yy" /* yacc.c:1646  */
d6035 1
a6035 1
#line 5951 "glsl_parser.cpp" /* yacc.c:1646  */
d6038 2
a6039 2
  case 344:
#line 2203 "glsl_parser.yy" /* yacc.c:1646  */
d6044 1
a6044 1
#line 5960 "glsl_parser.cpp" /* yacc.c:1646  */
d6047 2
a6048 2
  case 345:
#line 2211 "glsl_parser.yy" /* yacc.c:1646  */
d6056 1
a6056 1
#line 5972 "glsl_parser.cpp" /* yacc.c:1646  */
d6059 2
a6060 2
  case 346:
#line 2219 "glsl_parser.yy" /* yacc.c:1646  */
d6065 1
a6065 1
#line 5981 "glsl_parser.cpp" /* yacc.c:1646  */
d6068 2
a6069 2
  case 347:
#line 2227 "glsl_parser.yy" /* yacc.c:1646  */
d6076 1
a6076 1
#line 5992 "glsl_parser.cpp" /* yacc.c:1646  */
d6079 2
a6080 2
  case 348:
#line 2234 "glsl_parser.yy" /* yacc.c:1646  */
d6087 1
a6087 1
#line 6003 "glsl_parser.cpp" /* yacc.c:1646  */
d6090 2
a6091 2
  case 349:
#line 2241 "glsl_parser.yy" /* yacc.c:1646  */
d6098 1
a6098 1
#line 6014 "glsl_parser.cpp" /* yacc.c:1646  */
d6101 2
a6102 2
  case 353:
#line 2257 "glsl_parser.yy" /* yacc.c:1646  */
d6106 1
a6106 1
#line 6022 "glsl_parser.cpp" /* yacc.c:1646  */
d6109 2
a6110 2
  case 354:
#line 2264 "glsl_parser.yy" /* yacc.c:1646  */
d6115 1
a6115 1
#line 6031 "glsl_parser.cpp" /* yacc.c:1646  */
d6118 2
a6119 2
  case 355:
#line 2269 "glsl_parser.yy" /* yacc.c:1646  */
d6124 1
a6124 1
#line 6040 "glsl_parser.cpp" /* yacc.c:1646  */
d6127 2
a6128 2
  case 356:
#line 2278 "glsl_parser.yy" /* yacc.c:1646  */
d6134 1
a6134 1
#line 6050 "glsl_parser.cpp" /* yacc.c:1646  */
d6137 2
a6138 2
  case 357:
#line 2284 "glsl_parser.yy" /* yacc.c:1646  */
d6144 1
a6144 1
#line 6060 "glsl_parser.cpp" /* yacc.c:1646  */
d6147 2
a6148 2
  case 358:
#line 2290 "glsl_parser.yy" /* yacc.c:1646  */
d6154 1
a6154 1
#line 6070 "glsl_parser.cpp" /* yacc.c:1646  */
d6157 2
a6158 2
  case 359:
#line 2296 "glsl_parser.yy" /* yacc.c:1646  */
d6164 1
a6164 1
#line 6080 "glsl_parser.cpp" /* yacc.c:1646  */
d6167 2
a6168 2
  case 360:
#line 2302 "glsl_parser.yy" /* yacc.c:1646  */
d6174 1
a6174 1
#line 6090 "glsl_parser.cpp" /* yacc.c:1646  */
d6177 2
a6178 2
  case 361:
#line 2310 "glsl_parser.yy" /* yacc.c:1646  */
d6180 1
a6180 1
#line 6096 "glsl_parser.cpp" /* yacc.c:1646  */
d6183 2
a6184 2
  case 362:
#line 2311 "glsl_parser.yy" /* yacc.c:1646  */
d6186 1
a6186 1
#line 6102 "glsl_parser.cpp" /* yacc.c:1646  */
d6189 2
a6190 2
  case 363:
#line 2312 "glsl_parser.yy" /* yacc.c:1646  */
d6192 1
a6192 1
#line 6108 "glsl_parser.cpp" /* yacc.c:1646  */
d6195 2
a6196 2
  case 364:
#line 2313 "glsl_parser.yy" /* yacc.c:1646  */
d6198 1
a6198 1
#line 6114 "glsl_parser.cpp" /* yacc.c:1646  */
d6201 2
a6202 2
  case 365:
#line 2318 "glsl_parser.yy" /* yacc.c:1646  */
d6212 1
a6212 1
#line 6128 "glsl_parser.cpp" /* yacc.c:1646  */
d6215 2
a6216 2
  case 366:
#line 2332 "glsl_parser.yy" /* yacc.c:1646  */
d6220 1
a6220 1
#line 6136 "glsl_parser.cpp" /* yacc.c:1646  */
d6223 2
a6224 2
  case 367:
#line 2336 "glsl_parser.yy" /* yacc.c:1646  */
d6230 12
d6244 1
a6244 1
#line 6148 "glsl_parser.cpp" /* yacc.c:1646  */
d6247 2
a6248 2
  case 368:
#line 2347 "glsl_parser.yy" /* yacc.c:1646  */
d6316 8
d6350 1
a6350 1
#line 6246 "glsl_parser.cpp" /* yacc.c:1646  */
d6353 2
a6354 2
  case 369:
#line 2444 "glsl_parser.yy" /* yacc.c:1646  */
d6359 1
a6359 1
#line 6255 "glsl_parser.cpp" /* yacc.c:1646  */
d6362 2
a6363 2
  case 370:
#line 2449 "glsl_parser.yy" /* yacc.c:1646  */
d6368 1
a6368 1
#line 6264 "glsl_parser.cpp" /* yacc.c:1646  */
d6371 2
a6372 2
  case 371:
#line 2454 "glsl_parser.yy" /* yacc.c:1646  */
d6377 1
a6377 1
#line 6273 "glsl_parser.cpp" /* yacc.c:1646  */
d6380 2
a6381 2
  case 372:
#line 2462 "glsl_parser.yy" /* yacc.c:1646  */
d6386 1
a6386 1
#line 6282 "glsl_parser.cpp" /* yacc.c:1646  */
d6389 2
a6390 2
  case 373:
#line 2467 "glsl_parser.yy" /* yacc.c:1646  */
d6396 1
a6396 1
#line 6292 "glsl_parser.cpp" /* yacc.c:1646  */
d6399 2
a6400 2
  case 374:
#line 2473 "glsl_parser.yy" /* yacc.c:1646  */
d6406 1
a6406 1
#line 6302 "glsl_parser.cpp" /* yacc.c:1646  */
d6409 2
a6410 2
  case 375:
#line 2482 "glsl_parser.yy" /* yacc.c:1646  */
d6415 1
a6415 1
#line 6311 "glsl_parser.cpp" /* yacc.c:1646  */
d6418 2
a6419 2
  case 376:
#line 2487 "glsl_parser.yy" /* yacc.c:1646  */
d6424 1
a6424 1
#line 6320 "glsl_parser.cpp" /* yacc.c:1646  */
d6427 2
a6428 2
  case 377:
#line 2495 "glsl_parser.yy" /* yacc.c:1646  */
d6449 1
a6449 1
#line 6345 "glsl_parser.cpp" /* yacc.c:1646  */
d6452 2
a6453 2
  case 378:
#line 2519 "glsl_parser.yy" /* yacc.c:1646  */
d6460 1
a6460 1
#line 6356 "glsl_parser.cpp" /* yacc.c:1646  */
d6463 2
a6464 2
  case 379:
#line 2527 "glsl_parser.yy" /* yacc.c:1646  */
d6471 1
a6471 1
#line 6367 "glsl_parser.cpp" /* yacc.c:1646  */
d6474 2
a6475 2
  case 380:
#line 2535 "glsl_parser.yy" /* yacc.c:1646  */
d6497 3
d6503 1
a6503 1
#line 6396 "glsl_parser.cpp" /* yacc.c:1646  */
d6507 1
a6507 1
#line 6400 "glsl_parser.cpp" /* yacc.c:1646  */
@


1.5
log
@Merge Mesa 9.2.1
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.7.12-4996.  */
d4 3
a6 3
   
      Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
   
d11 1
a11 1
   
d16 1
a16 1
   
d29 1
a29 1
   
d47 1
a47 1
#define YYBISON_VERSION "2.7.12-4996"
a65 2
#define yylval          _mesa_glsl_lval
#define yychar          _mesa_glsl_char
d68 1
a68 1
#define yylloc          _mesa_glsl_lloc
d71 1
a71 2
/* Line 371 of yacc.c  */
#line 1 "glsl_parser.yy"
d118 27
a144 2
/* Line 371 of yacc.c  */
#line 123 "glsl_parser.cpp"
d146 1
a146 1
# ifndef YY_NULL
d148 1
a148 1
#   define YY_NULL nullptr
d150 1
a150 1
#   define YY_NULL 0
d166 1
a166 1
/* Enabling traces.  */
d174 1
a174 1
/* Tokens.  */
d177 233
a409 222
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ATTRIBUTE = 258,
     CONST_TOK = 259,
     BOOL_TOK = 260,
     FLOAT_TOK = 261,
     INT_TOK = 262,
     UINT_TOK = 263,
     BREAK = 264,
     CONTINUE = 265,
     DO = 266,
     ELSE = 267,
     FOR = 268,
     IF = 269,
     DISCARD = 270,
     RETURN = 271,
     SWITCH = 272,
     CASE = 273,
     DEFAULT = 274,
     BVEC2 = 275,
     BVEC3 = 276,
     BVEC4 = 277,
     IVEC2 = 278,
     IVEC3 = 279,
     IVEC4 = 280,
     UVEC2 = 281,
     UVEC3 = 282,
     UVEC4 = 283,
     VEC2 = 284,
     VEC3 = 285,
     VEC4 = 286,
     CENTROID = 287,
     IN_TOK = 288,
     OUT_TOK = 289,
     INOUT_TOK = 290,
     UNIFORM = 291,
     VARYING = 292,
     NOPERSPECTIVE = 293,
     FLAT = 294,
     SMOOTH = 295,
     MAT2X2 = 296,
     MAT2X3 = 297,
     MAT2X4 = 298,
     MAT3X2 = 299,
     MAT3X3 = 300,
     MAT3X4 = 301,
     MAT4X2 = 302,
     MAT4X3 = 303,
     MAT4X4 = 304,
     SAMPLER1D = 305,
     SAMPLER2D = 306,
     SAMPLER3D = 307,
     SAMPLERCUBE = 308,
     SAMPLER1DSHADOW = 309,
     SAMPLER2DSHADOW = 310,
     SAMPLERCUBESHADOW = 311,
     SAMPLER1DARRAY = 312,
     SAMPLER2DARRAY = 313,
     SAMPLER1DARRAYSHADOW = 314,
     SAMPLER2DARRAYSHADOW = 315,
     SAMPLERCUBEARRAY = 316,
     SAMPLERCUBEARRAYSHADOW = 317,
     ISAMPLER1D = 318,
     ISAMPLER2D = 319,
     ISAMPLER3D = 320,
     ISAMPLERCUBE = 321,
     ISAMPLER1DARRAY = 322,
     ISAMPLER2DARRAY = 323,
     ISAMPLERCUBEARRAY = 324,
     USAMPLER1D = 325,
     USAMPLER2D = 326,
     USAMPLER3D = 327,
     USAMPLERCUBE = 328,
     USAMPLER1DARRAY = 329,
     USAMPLER2DARRAY = 330,
     USAMPLERCUBEARRAY = 331,
     SAMPLER2DRECT = 332,
     ISAMPLER2DRECT = 333,
     USAMPLER2DRECT = 334,
     SAMPLER2DRECTSHADOW = 335,
     SAMPLERBUFFER = 336,
     ISAMPLERBUFFER = 337,
     USAMPLERBUFFER = 338,
     SAMPLER2DMS = 339,
     ISAMPLER2DMS = 340,
     USAMPLER2DMS = 341,
     SAMPLER2DMSARRAY = 342,
     ISAMPLER2DMSARRAY = 343,
     USAMPLER2DMSARRAY = 344,
     SAMPLEREXTERNALOES = 345,
     STRUCT = 346,
     VOID_TOK = 347,
     WHILE = 348,
     IDENTIFIER = 349,
     TYPE_IDENTIFIER = 350,
     NEW_IDENTIFIER = 351,
     FLOATCONSTANT = 352,
     INTCONSTANT = 353,
     UINTCONSTANT = 354,
     BOOLCONSTANT = 355,
     FIELD_SELECTION = 356,
     LEFT_OP = 357,
     RIGHT_OP = 358,
     INC_OP = 359,
     DEC_OP = 360,
     LE_OP = 361,
     GE_OP = 362,
     EQ_OP = 363,
     NE_OP = 364,
     AND_OP = 365,
     OR_OP = 366,
     XOR_OP = 367,
     MUL_ASSIGN = 368,
     DIV_ASSIGN = 369,
     ADD_ASSIGN = 370,
     MOD_ASSIGN = 371,
     LEFT_ASSIGN = 372,
     RIGHT_ASSIGN = 373,
     AND_ASSIGN = 374,
     XOR_ASSIGN = 375,
     OR_ASSIGN = 376,
     SUB_ASSIGN = 377,
     INVARIANT = 378,
     LOWP = 379,
     MEDIUMP = 380,
     HIGHP = 381,
     SUPERP = 382,
     PRECISION = 383,
     VERSION_TOK = 384,
     EXTENSION = 385,
     LINE = 386,
     COLON = 387,
     EOL = 388,
     INTERFACE = 389,
     OUTPUT = 390,
     PRAGMA_DEBUG_ON = 391,
     PRAGMA_DEBUG_OFF = 392,
     PRAGMA_OPTIMIZE_ON = 393,
     PRAGMA_OPTIMIZE_OFF = 394,
     PRAGMA_INVARIANT_ALL = 395,
     LAYOUT_TOK = 396,
     ASM = 397,
     CLASS = 398,
     UNION = 399,
     ENUM = 400,
     TYPEDEF = 401,
     TEMPLATE = 402,
     THIS = 403,
     PACKED_TOK = 404,
     GOTO = 405,
     INLINE_TOK = 406,
     NOINLINE = 407,
     VOLATILE = 408,
     PUBLIC_TOK = 409,
     STATIC = 410,
     EXTERN = 411,
     EXTERNAL = 412,
     LONG_TOK = 413,
     SHORT_TOK = 414,
     DOUBLE_TOK = 415,
     HALF = 416,
     FIXED_TOK = 417,
     UNSIGNED = 418,
     INPUT_TOK = 419,
     OUPTUT = 420,
     HVEC2 = 421,
     HVEC3 = 422,
     HVEC4 = 423,
     DVEC2 = 424,
     DVEC3 = 425,
     DVEC4 = 426,
     FVEC2 = 427,
     FVEC3 = 428,
     FVEC4 = 429,
     SAMPLER3DRECT = 430,
     SIZEOF = 431,
     CAST = 432,
     NAMESPACE = 433,
     USING = 434,
     COHERENT = 435,
     RESTRICT = 436,
     READONLY = 437,
     WRITEONLY = 438,
     RESOURCE = 439,
     ATOMIC_UINT = 440,
     PATCH = 441,
     SAMPLE = 442,
     SUBROUTINE = 443,
     ERROR_TOK = 444,
     COMMON = 445,
     PARTITION = 446,
     ACTIVE = 447,
     FILTER = 448,
     IMAGE1D = 449,
     IMAGE2D = 450,
     IMAGE3D = 451,
     IMAGECUBE = 452,
     IMAGE1DARRAY = 453,
     IMAGE2DARRAY = 454,
     IIMAGE1D = 455,
     IIMAGE2D = 456,
     IIMAGE3D = 457,
     IIMAGECUBE = 458,
     IIMAGE1DARRAY = 459,
     IIMAGE2DARRAY = 460,
     UIMAGE1D = 461,
     UIMAGE2D = 462,
     UIMAGE3D = 463,
     UIMAGECUBE = 464,
     UIMAGE1DARRAY = 465,
     UIMAGE2DARRAY = 466,
     IMAGE1DSHADOW = 467,
     IMAGE2DSHADOW = 468,
     IMAGEBUFFER = 469,
     IIMAGEBUFFER = 470,
     UIMAGEBUFFER = 471,
     IMAGE1DARRAYSHADOW = 472,
     IMAGE2DARRAYSHADOW = 473,
     ROW_MAJOR = 474,
     THEN = 475
   };
d412 1
a412 1

d414 2
a415 1
typedef union YYSTYPE
d417 1
a417 2
/* Line 387 of yacc.c  */
#line 65 "glsl_parser.yy"
d427 1
d454 2
a455 4

/* Line 387 of yacc.c  */
#line 423 "glsl_parser.cpp"
} YYSTYPE;
a456 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
d460 1
d462 2
a463 1
typedef struct YYLTYPE
d469 1
a469 2
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
d475 1
a475 8
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int _mesa_glsl_parse (void *YYPARSE_PARAM);
#else
int _mesa_glsl_parse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
a476 4
#else
int _mesa_glsl_parse ();
#endif
#endif /* ! YYPARSE_PARAM */
d482 1
a482 2
/* Line 390 of yacc.c  */
#line 463 "glsl_parser.cpp"
d496 1
a496 2
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a497 2
#else
typedef short int yytype_int8;
d517 1
a517 2
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
d539 24
a562 5
#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5))
#  define __attribute__(Spec) /* empty */
d573 8
a580 4

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
d582 5
a586 8
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
d588 2
a589 3
{
  return yyi;
}
d592 1
d610 1
a610 2
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
d622 2
a623 2
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
d639 1
a639 1
	     && (defined YYFREE || defined free)))
d647 1
a647 2
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
d653 1
a653 2
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
d663 2
a664 2
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
d690 10
a699 10
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))
d718 1
a718 1
      while (YYID (0))
d726 1
a726 1
#define YYLAST   3639
d729 1
a729 1
#define YYNTOKENS  245
d731 1
a731 1
#define YYNNTS  107
d733 3
a735 3
#define YYNRULES  340
/* YYNRULES -- Number of states.  */
#define YYNSTATES  500
d737 2
a738 1
/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
d740 1
a740 1
#define YYMAXUTOK   475
d742 1
a742 1
#define YYTRANSLATE(YYX)						\
d745 3
a747 2
/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
d752 4
a755 4
       2,     2,     2,   229,     2,     2,     2,   233,   236,     2,
     221,   222,   231,   227,   226,   228,   225,   232,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   240,   242,
     234,   241,   235,   239,     2,     2,     2,     2,     2,     2,
d758 1
a758 1
       2,   223,     2,   224,   237,     2,     2,     2,     2,     2,
d761 1
a761 1
       2,     2,     2,   243,   238,   244,   230,     2,     2,     2,
d796 2
a797 1
     215,   216,   217,   218,   219,   220
d801 1
a801 143
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     4,     9,    10,    14,    19,    22,    25,
      28,    31,    34,    35,    38,    40,    42,    44,    50,    52,
      55,    57,    59,    61,    63,    65,    67,    69,    73,    75,
      80,    82,    86,    89,    92,    94,    96,    98,   102,   105,
     108,   111,   113,   116,   120,   123,   125,   127,   129,   132,
     135,   138,   140,   143,   147,   150,   152,   155,   158,   161,
     163,   165,   167,   169,   171,   175,   179,   183,   185,   189,
     193,   195,   199,   203,   205,   209,   213,   217,   221,   223,
     227,   231,   233,   237,   239,   243,   245,   249,   251,   255,
     257,   261,   263,   267,   269,   275,   277,   281,   283,   285,
     287,   289,   291,   293,   295,   297,   299,   301,   303,   305,
     309,   311,   314,   317,   322,   324,   327,   329,   331,   334,
     338,   342,   345,   351,   354,   357,   358,   361,   364,   367,
     369,   371,   373,   375,   377,   381,   387,   394,   402,   411,
     417,   419,   422,   427,   433,   440,   448,   453,   456,   458,
     461,   466,   468,   472,   474,   476,   478,   482,   484,   486,
     488,   490,   492,   494,   496,   498,   500,   502,   504,   506,
     509,   512,   515,   518,   521,   524,   526,   528,   530,   532,
     534,   536,   538,   540,   544,   549,   551,   553,   555,   557,
     559,   561,   563,   565,   567,   569,   571,   573,   575,   577,
     579,   581,   583,   585,   587,   589,   591,   593,   595,   597,
     599,   601,   603,   605,   607,   609,   611,   613,   615,   617,
     619,   621,   623,   625,   627,   629,   631,   633,   635,   637,
     639,   641,   643,   645,   647,   649,   651,   653,   655,   657,
     659,   661,   663,   665,   667,   669,   671,   673,   675,   677,
     679,   681,   683,   685,   687,   689,   691,   693,   695,   701,
     706,   708,   711,   715,   717,   721,   723,   728,   730,   734,
     739,   741,   745,   747,   749,   751,   753,   755,   757,   759,
     761,   763,   766,   767,   772,   774,   776,   779,   783,   785,
     788,   790,   793,   799,   803,   805,   807,   812,   818,   821,
     825,   829,   832,   834,   837,   840,   843,   845,   848,   854,
     862,   869,   871,   873,   875,   876,   879,   883,   886,   889,
     892,   896,   899,   901,   903,   905,   907,   910,   912,   915,
     923,   925,   927,   929,   930,   932,   937,   941,   943,   946,
     950
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     246,     0,    -1,    -1,   248,   250,   247,   253,    -1,    -1,
     129,    98,   133,    -1,   129,    98,   251,   133,    -1,   136,
     133,    -1,   137,   133,    -1,   138,   133,    -1,   139,   133,
      -1,   140,   133,    -1,    -1,   250,   252,    -1,    94,    -1,
      95,    -1,    96,    -1,   130,   251,   132,   251,   133,    -1,
     343,    -1,   253,   343,    -1,    94,    -1,    96,    -1,   254,
      -1,    98,    -1,    99,    -1,    97,    -1,   100,    -1,   221,
     285,   222,    -1,   255,    -1,   256,   223,   257,   224,    -1,
     258,    -1,   256,   225,   251,    -1,   256,   104,    -1,   256,
     105,    -1,   285,    -1,   259,    -1,   260,    -1,   256,   225,
     265,    -1,   262,   222,    -1,   261,   222,    -1,   263,    92,
      -1,   263,    -1,   263,   283,    -1,   262,   226,   283,    -1,
     264,   221,    -1,   309,    -1,   254,    -1,   101,    -1,   267,
     222,    -1,   266,   222,    -1,   268,    92,    -1,   268,    -1,
     268,   283,    -1,   267,   226,   283,    -1,   254,   221,    -1,
     256,    -1,   104,   269,    -1,   105,   269,    -1,   270,   269,
      -1,   227,    -1,   228,    -1,   229,    -1,   230,    -1,   269,
      -1,   271,   231,   269,    -1,   271,   232,   269,    -1,   271,
     233,   269,    -1,   271,    -1,   272,   227,   271,    -1,   272,
     228,   271,    -1,   272,    -1,   273,   102,   272,    -1,   273,
     103,   272,    -1,   273,    -1,   274,   234,   273,    -1,   274,
     235,   273,    -1,   274,   106,   273,    -1,   274,   107,   273,
      -1,   274,    -1,   275,   108,   274,    -1,   275,   109,   274,
      -1,   275,    -1,   276,   236,   275,    -1,   276,    -1,   277,
     237,   276,    -1,   277,    -1,   278,   238,   277,    -1,   278,
      -1,   279,   110,   278,    -1,   279,    -1,   280,   112,   279,
      -1,   280,    -1,   281,   111,   280,    -1,   281,    -1,   281,
     239,   285,   240,   283,    -1,   282,    -1,   269,   284,   283,
      -1,   241,    -1,   113,    -1,   114,    -1,   116,    -1,   115,
      -1,   122,    -1,   117,    -1,   118,    -1,   119,    -1,   120,
      -1,   121,    -1,   283,    -1,   285,   226,   283,    -1,   282,
      -1,   288,   242,    -1,   297,   242,    -1,   128,   312,   309,
     242,    -1,   345,    -1,   289,   222,    -1,   291,    -1,   290,
      -1,   291,   293,    -1,   290,   226,   293,    -1,   299,   254,
     221,    -1,   309,   251,    -1,   309,   251,   223,   286,   224,
      -1,   294,   292,    -1,   294,   296,    -1,    -1,     4,   294,
      -1,   295,   294,    -1,   312,   294,    -1,    33,    -1,    34,
      -1,    35,    -1,   309,    -1,   298,    -1,   297,   226,   251,
      -1,   297,   226,   251,   223,   224,    -1,   297,   226,   251,
     223,   286,   224,    -1,   297,   226,   251,   223,   224,   241,
     318,    -1,   297,   226,   251,   223,   286,   224,   241,   318,
      -1,   297,   226,   251,   241,   318,    -1,   299,    -1,   299,
     251,    -1,   299,   251,   223,   224,    -1,   299,   251,   223,
     286,   224,    -1,   299,   251,   223,   224,   241,   318,    -1,
     299,   251,   223,   286,   224,   241,   318,    -1,   299,   251,
     241,   318,    -1,   123,   254,    -1,   309,    -1,   306,   309,
      -1,   141,   221,   301,   222,    -1,   303,    -1,   301,   226,
     303,    -1,    98,    -1,    99,    -1,   251,    -1,   251,   241,
     302,    -1,   304,    -1,   219,    -1,   149,    -1,    40,    -1,
      39,    -1,    38,    -1,   123,    -1,   307,    -1,   308,    -1,
     305,    -1,   300,    -1,   312,    -1,   123,   306,    -1,   305,
     306,    -1,   300,   306,    -1,   307,   306,    -1,   308,   306,
      -1,   312,   306,    -1,    32,    -1,     4,    -1,     3,    -1,
      37,    -1,    33,    -1,    34,    -1,    36,    -1,   310,    -1,
     310,   223,   224,    -1,   310,   223,   286,   224,    -1,   311,
      -1,   313,    -1,    95,    -1,    92,    -1,     6,    -1,     7,
      -1,     8,    -1,     5,    -1,    29,    -1,    30,    -1,    31,
      -1,    20,    -1,    21,    -1,    22,    -1,    23,    -1,    24,
      -1,    25,    -1,    26,    -1,    27,    -1,    28,    -1,    41,
      -1,    42,    -1,    43,    -1,    44,    -1,    45,    -1,    46,
      -1,    47,    -1,    48,    -1,    49,    -1,    50,    -1,    51,
      -1,    77,    -1,    52,    -1,    53,    -1,    90,    -1,    54,
      -1,    55,    -1,    80,    -1,    56,    -1,    57,    -1,    58,
      -1,    59,    -1,    60,    -1,    81,    -1,    61,    -1,    62,
      -1,    63,    -1,    64,    -1,    78,    -1,    65,    -1,    66,
      -1,    67,    -1,    68,    -1,    82,    -1,    69,    -1,    70,
      -1,    71,    -1,    79,    -1,    72,    -1,    73,    -1,    74,
      -1,    75,    -1,    83,    -1,    76,    -1,    84,    -1,    85,
      -1,    86,    -1,    87,    -1,    88,    -1,    89,    -1,   126,
      -1,   125,    -1,   124,    -1,    91,   251,   243,   314,   244,
      -1,    91,   243,   314,   244,    -1,   315,    -1,   314,   315,
      -1,   299,   316,   242,    -1,   317,    -1,   316,   226,   317,
      -1,   251,    -1,   251,   223,   286,   224,    -1,   283,    -1,
     243,   319,   244,    -1,   243,   319,   226,   244,    -1,   318,
      -1,   319,   226,   318,    -1,   287,    -1,   323,    -1,   322,
      -1,   320,    -1,   328,    -1,   329,    -1,   332,    -1,   338,
      -1,   342,    -1,   243,   244,    -1,    -1,   243,   324,   327,
     244,    -1,   326,    -1,   322,    -1,   243,   244,    -1,   243,
     327,   244,    -1,   321,    -1,   327,   321,    -1,   242,    -1,
     285,   242,    -1,    14,   221,   285,   222,   330,    -1,   321,
      12,   321,    -1,   321,    -1,   285,    -1,   299,   251,   241,
     318,    -1,    17,   221,   285,   222,   333,    -1,   243,   244,
      -1,   243,   337,   244,    -1,    18,   285,   240,    -1,    19,
     240,    -1,   334,    -1,   335,   334,    -1,   335,   321,    -1,
     336,   321,    -1,   336,    -1,   337,   336,    -1,    93,   221,
     331,   222,   325,    -1,    11,   321,    93,   221,   285,   222,
     242,    -1,    13,   221,   339,   341,   222,   325,    -1,   328,
      -1,   320,    -1,   331,    -1,    -1,   340,   242,    -1,   340,
     242,   285,    -1,    10,   242,    -1,     9,   242,    -1,    16,
     242,    -1,    16,   285,   242,    -1,    15,   242,    -1,   344,
      -1,   287,    -1,   249,    -1,   351,    -1,   288,   326,    -1,
     346,    -1,   300,   346,    -1,   347,    96,   243,   349,   244,
     348,   242,    -1,    33,    -1,    34,    -1,    36,    -1,    -1,
      96,    -1,    96,   223,   286,   224,    -1,    96,   223,   224,
      -1,   350,    -1,   350,   349,    -1,   299,   316,   242,    -1,
     300,    36,   242,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
d804 39
a842 35
       0,   263,   263,   262,   274,   276,   283,   293,   294,   295,
     296,   297,   310,   312,   316,   317,   318,   322,   331,   339,
     350,   351,   355,   362,   369,   376,   383,   390,   397,   398,
     404,   408,   415,   421,   430,   434,   438,   439,   448,   449,
     453,   454,   458,   464,   476,   480,   486,   493,   503,   504,
     508,   509,   513,   519,   531,   542,   543,   549,   555,   565,
     566,   567,   568,   572,   573,   579,   585,   594,   595,   601,
     610,   611,   617,   626,   627,   633,   639,   645,   654,   655,
     661,   670,   671,   680,   681,   690,   691,   700,   701,   710,
     711,   720,   721,   730,   731,   740,   741,   750,   751,   752,
     753,   754,   755,   756,   757,   758,   759,   760,   764,   768,
     784,   788,   793,   797,   802,   809,   813,   814,   818,   823,
     831,   845,   855,   870,   875,   888,   891,   899,   911,   924,
     929,   934,   943,   947,   948,   958,   968,   978,   993,  1008,
    1026,  1033,  1042,  1051,  1060,  1074,  1088,  1100,  1114,  1121,
    1132,  1139,  1140,  1150,  1151,  1155,  1231,  1280,  1302,  1307,
    1315,  1320,  1325,  1334,  1339,  1340,  1341,  1342,  1343,  1361,
    1374,  1402,  1425,  1440,  1460,  1474,  1482,  1487,  1492,  1497,
    1502,  1507,  1515,  1516,  1522,  1531,  1537,  1543,  1552,  1553,
    1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,  1562,  1563,
    1564,  1565,  1566,  1567,  1568,  1569,  1570,  1571,  1572,  1573,
    1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1582,  1583,
    1584,  1585,  1586,  1587,  1588,  1589,  1590,  1591,  1592,  1593,
    1594,  1595,  1596,  1597,  1598,  1599,  1600,  1601,  1602,  1603,
    1604,  1605,  1606,  1607,  1608,  1609,  1610,  1611,  1612,  1613,
    1614,  1615,  1616,  1617,  1618,  1622,  1627,  1632,  1640,  1648,
    1657,  1662,  1670,  1689,  1694,  1702,  1708,  1717,  1718,  1722,
    1729,  1736,  1743,  1749,  1750,  1754,  1755,  1756,  1757,  1758,
    1759,  1763,  1770,  1769,  1783,  1784,  1788,  1794,  1803,  1813,
    1825,  1831,  1840,  1849,  1854,  1862,  1866,  1884,  1892,  1897,
    1905,  1910,  1918,  1926,  1934,  1942,  1950,  1958,  1966,  1973,
    1980,  1990,  1991,  1995,  1997,  2003,  2008,  2017,  2023,  2029,
    2035,  2041,  2050,  2051,  2052,  2053,  2057,  2071,  2075,  2086,
    2183,  2188,  2193,  2202,  2206,  2211,  2216,  2227,  2232,  2240,
    2264
d869 28
a896 25
  "USAMPLER2DMSARRAY", "SAMPLEREXTERNALOES", "STRUCT", "VOID_TOK", "WHILE",
  "IDENTIFIER", "TYPE_IDENTIFIER", "NEW_IDENTIFIER", "FLOATCONSTANT",
  "INTCONSTANT", "UINTCONSTANT", "BOOLCONSTANT", "FIELD_SELECTION",
  "LEFT_OP", "RIGHT_OP", "INC_OP", "DEC_OP", "LE_OP", "GE_OP", "EQ_OP",
  "NE_OP", "AND_OP", "OR_OP", "XOR_OP", "MUL_ASSIGN", "DIV_ASSIGN",
  "ADD_ASSIGN", "MOD_ASSIGN", "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN",
  "XOR_ASSIGN", "OR_ASSIGN", "SUB_ASSIGN", "INVARIANT", "LOWP", "MEDIUMP",
  "HIGHP", "SUPERP", "PRECISION", "VERSION_TOK", "EXTENSION", "LINE",
  "COLON", "EOL", "INTERFACE", "OUTPUT", "PRAGMA_DEBUG_ON",
  "PRAGMA_DEBUG_OFF", "PRAGMA_OPTIMIZE_ON", "PRAGMA_OPTIMIZE_OFF",
  "PRAGMA_INVARIANT_ALL", "LAYOUT_TOK", "ASM", "CLASS", "UNION", "ENUM",
  "TYPEDEF", "TEMPLATE", "THIS", "PACKED_TOK", "GOTO", "INLINE_TOK",
  "NOINLINE", "VOLATILE", "PUBLIC_TOK", "STATIC", "EXTERN", "EXTERNAL",
  "LONG_TOK", "SHORT_TOK", "DOUBLE_TOK", "HALF", "FIXED_TOK", "UNSIGNED",
  "INPUT_TOK", "OUPTUT", "HVEC2", "HVEC3", "HVEC4", "DVEC2", "DVEC3",
  "DVEC4", "FVEC2", "FVEC3", "FVEC4", "SAMPLER3DRECT", "SIZEOF", "CAST",
  "NAMESPACE", "USING", "COHERENT", "RESTRICT", "READONLY", "WRITEONLY",
  "RESOURCE", "ATOMIC_UINT", "PATCH", "SAMPLE", "SUBROUTINE", "ERROR_TOK",
  "COMMON", "PARTITION", "ACTIVE", "FILTER", "IMAGE1D", "IMAGE2D",
  "IMAGE3D", "IMAGECUBE", "IMAGE1DARRAY", "IMAGE2DARRAY", "IIMAGE1D",
  "IIMAGE2D", "IIMAGE3D", "IIMAGECUBE", "IIMAGE1DARRAY", "IIMAGE2DARRAY",
  "UIMAGE1D", "UIMAGE2D", "UIMAGE3D", "UIMAGECUBE", "UIMAGE1DARRAY",
  "UIMAGE2DARRAY", "IMAGE1DSHADOW", "IMAGE2DSHADOW", "IMAGEBUFFER",
  "IIMAGEBUFFER", "UIMAGEBUFFER", "IMAGE1DARRAYSHADOW",
  "IMAGE2DARRAYSHADOW", "ROW_MAJOR", "THEN", "'('", "')'", "'['", "']'",
d924 1
a924 1
  "type_specifier", "type_specifier_nonarray",
d938 1
a938 1
  "member_list", "member_declaration", "layout_defaults", YY_NULL
d943 2
a944 2
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
d969 4
a972 3
     475,    40,    41,    91,    93,    46,    44,    43,    45,    33,
     126,    42,    47,    37,    60,    62,    38,    94,   124,    63,
      58,    61,    59,   123,   125
d976 9
a984 39
/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   245,   247,   246,   248,   248,   248,   249,   249,   249,
     249,   249,   250,   250,   251,   251,   251,   252,   253,   253,
     254,   254,   255,   255,   255,   255,   255,   255,   256,   256,
     256,   256,   256,   256,   257,   258,   259,   259,   260,   260,
     261,   261,   262,   262,   263,   264,   264,   264,   265,   265,
     266,   266,   267,   267,   268,   269,   269,   269,   269,   270,
     270,   270,   270,   271,   271,   271,   271,   272,   272,   272,
     273,   273,   273,   274,   274,   274,   274,   274,   275,   275,
     275,   276,   276,   277,   277,   278,   278,   279,   279,   280,
     280,   281,   281,   282,   282,   283,   283,   284,   284,   284,
     284,   284,   284,   284,   284,   284,   284,   284,   285,   285,
     286,   287,   287,   287,   287,   288,   289,   289,   290,   290,
     291,   292,   292,   293,   293,   294,   294,   294,   294,   295,
     295,   295,   296,   297,   297,   297,   297,   297,   297,   297,
     298,   298,   298,   298,   298,   298,   298,   298,   299,   299,
     300,   301,   301,   302,   302,   303,   303,   303,   304,   304,
     305,   305,   305,   306,   306,   306,   306,   306,   306,   306,
     306,   306,   306,   306,   306,   307,   308,   308,   308,   308,
     308,   308,   309,   309,   309,   310,   310,   310,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   312,   312,   312,   313,   313,
     314,   314,   315,   316,   316,   317,   317,   318,   318,   318,
     319,   319,   320,   321,   321,   322,   322,   322,   322,   322,
     322,   323,   324,   323,   325,   325,   326,   326,   327,   327,
     328,   328,   329,   330,   330,   331,   331,   332,   333,   333,
     334,   334,   335,   335,   336,   336,   337,   337,   338,   338,
     338,   339,   339,   340,   340,   341,   341,   342,   342,   342,
     342,   342,   343,   343,   343,   343,   344,   345,   345,   346,
     347,   347,   347,   348,   348,   348,   348,   349,   349,   350,
     351
};
d986 3
a988 2
/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
d990 54
a1043 35
       0,     2,     0,     4,     0,     3,     4,     2,     2,     2,
       2,     2,     0,     2,     1,     1,     1,     5,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     4,
       1,     3,     2,     2,     1,     1,     1,     3,     2,     2,
       2,     1,     2,     3,     2,     1,     1,     1,     2,     2,
       2,     1,     2,     3,     2,     1,     2,     2,     2,     1,
       1,     1,     1,     1,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
       3,     1,     3,     1,     5,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     2,     2,     4,     1,     2,     1,     1,     2,     3,
       3,     2,     5,     2,     2,     0,     2,     2,     2,     1,
       1,     1,     1,     1,     3,     5,     6,     7,     8,     5,
       1,     2,     4,     5,     6,     7,     4,     2,     1,     2,
       4,     1,     3,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     5,     4,
       1,     2,     3,     1,     3,     1,     4,     1,     3,     4,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     0,     4,     1,     1,     2,     3,     1,     2,
       1,     2,     5,     3,     1,     1,     4,     5,     2,     3,
       3,     2,     1,     2,     2,     2,     1,     2,     5,     7,
       6,     1,     1,     1,     0,     2,     3,     2,     2,     2,
       3,     2,     1,     1,     1,     1,     2,     1,     2,     7,
       1,     1,     1,     0,     1,     4,     3,     1,     2,     3,
       3
d1046 3
a1048 3
/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
d1052 19
a1070 15
       5,     0,     0,     0,    13,     6,     0,   177,   176,   192,
     189,   190,   191,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   193,   194,   195,   175,   179,   180,   181,   178,
     162,   161,   160,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   217,   218,   220,   221,   223,   224,
     225,   226,   227,   229,   230,   231,   232,   234,   235,   236,
     237,   239,   240,   241,   243,   244,   245,   246,   248,   216,
     233,   242,   222,   228,   238,   247,   249,   250,   251,   252,
     253,   254,   219,     0,   188,   187,   163,   257,   256,   255,
       0,     0,     0,     0,     0,     0,     0,   324,     3,   323,
       0,     0,   117,   125,     0,   133,   140,   167,   166,     0,
     164,   165,   148,   182,   185,   168,   186,    18,   322,   114,
     327,     0,   325,     0,     0,     0,   179,   180,   181,    20,
      21,   163,   147,   167,   169,     0,     7,     8,     9,    10,
      11,     0,    19,   111,     0,   326,   115,   125,   125,   129,
d1072 33
a1104 33
     141,     0,   181,   171,   328,   170,   149,   172,   173,     0,
     174,     0,     0,     0,     0,   260,     0,     0,   159,   158,
     155,     0,   151,   157,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,    23,    24,    26,    47,     0,     0,
       0,    59,    60,    61,    62,   290,   282,   286,    22,    28,
      55,    30,    35,    36,     0,     0,    41,     0,    63,     0,
      67,    70,    73,    78,    81,    83,    85,    87,    89,    91,
      93,    95,   108,     0,   272,     0,   167,   148,   275,   288,
     274,   273,     0,   276,   277,   278,   279,   280,   119,   126,
     123,   124,   132,   127,   128,   134,     0,     0,   120,   340,
     183,    63,   110,     0,    45,     0,    17,   265,     0,   263,
     259,   261,     0,   113,     0,   150,     0,   318,   317,     0,
       0,     0,   321,   319,     0,     0,     0,    56,    57,     0,
     281,     0,    32,    33,     0,     0,    39,    38,     0,   188,
      42,    44,    98,    99,   101,   100,   103,   104,   105,   106,
     107,   102,    97,     0,    58,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   291,   287,   289,   121,
       0,     0,   142,     0,     0,   267,   146,   184,     0,     0,
     337,     0,     0,   262,   258,   153,   154,   156,   152,     0,
     312,   311,   314,     0,   320,     0,   295,     0,     0,    27,
       0,     0,    34,    31,     0,    37,     0,     0,    51,    43,
      96,    64,    65,    66,    68,    69,    71,    72,    76,    77,
      74,    75,    79,    80,    82,    84,    86,    88,    90,    92,
       0,   109,     0,   135,     0,   139,     0,   143,   270,     0,
       0,   333,   338,     0,   264,     0,   313,     0,     0,     0,
       0,     0,     0,   283,    29,    54,    49,    48,     0,   188,
      52,     0,     0,     0,   136,   144,     0,     0,   268,   339,
     334,     0,   266,     0,   315,     0,   294,   292,     0,   297,
       0,   285,   308,   284,    53,    94,   122,   137,     0,   145,
     269,   271,     0,   329,     0,   316,   310,     0,     0,     0,
     298,   302,     0,   306,     0,   296,   138,   336,     0,   309,
     293,     0,   301,   304,   303,   305,   299,   307,   335,   300
d1107 2
a1108 2
/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
d1110 11
a1120 11
      -1,     2,    13,     3,   107,     6,   277,    14,   108,   218,
     219,   220,   381,   221,   222,   223,   224,   225,   226,   227,
     385,   386,   387,   388,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   323,
     243,   273,   244,   245,   111,   112,   113,   260,   162,   163,
     164,   261,   114,   115,   116,   143,   191,   367,   192,   193,
     118,   119,   120,   121,   274,   123,   124,   125,   126,   184,
     185,   278,   279,   356,   419,   248,   249,   250,   251,   301,
     462,   463,   252,   253,   254,   457,   378,   255,   459,   481,
     482,   483,   484,   256,   372,   427,   428,   257,   127,   128,
     129,   130,   131,   451,   359,   360,   132
d1123 2
a1124 59
/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -401
static const yytype_int16 yypact[] =
{
    -110,   -39,    82,  -401,   -21,  -401,   -22,  -401,  -401,  -401,
    -401,   -23,    -5,  3372,  -401,  -401,   -16,  -401,  -401,  -401,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,  -401,  -401,  -401,    23,    34,    50,  -401,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,   -71,  -401,  -401,   289,  -401,  -401,  -401,
     134,     5,    15,    36,    41,    43,   -43,  -401,  3372,  -401,
     -61,   -38,   -36,     2,  -197,  -401,   170,   215,   312,   835,
     312,   312,  -401,    -6,  -401,   312,  -401,  -401,  -401,  -401,
    -401,   129,  -401,    -5,  3498,   -10,  -401,  -401,  -401,  -401,
    -401,   312,  -401,   312,  -401,   835,  -401,  -401,  -401,  -401,
    -401,   -42,  -401,  -401,   484,  -401,  -401,    37,    37,  -401,
    -401,  -401,  -401,   835,    37,    37,    -5,  -401,     6,     7,
    -190,     9,   -95,  -401,  -401,  -401,  -401,  -401,  -401,  2511,
    -401,    -3,   105,    -5,  1095,  -401,  3498,     3,  -401,  -401,
      26,  -142,  -401,  -401,     8,    14,  1589,    47,    49,    29,
    2393,    55,    59,  -401,  -401,  -401,  -401,  -401,  1939,  1939,
    1939,  -401,  -401,  -401,  -401,  -401,     0,  -401,    60,  -401,
     -83,  -401,  -401,  -401,    62,  -121,  3144,    65,   360,  1939,
      42,  -171,    57,   -80,    56,    53,    58,    40,   188,   187,
     -81,  -401,  -401,  -165,  -401,    63,   583,    80,  -401,  -401,
    -401,  -401,   726,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,    -5,  -401,  -401,  -177,  2832,  2285,  -401,  -401,
    -401,  -401,  -401,    83,  -401,  3498,  -401,    81,  -159,  -401,
    -401,  -401,  1219,  -401,    94,  -401,   -42,  -401,  -401,   216,
    2058,  1939,  -401,  -401,  -157,  1939,  2621,  -401,  -401,  -113,
    -401,  1589,  -401,  -401,  1939,   170,  -401,  -401,  1939,    86,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,  1939,  -401,  1939,  1939,  1939,  1939,  1939,
    1939,  1939,  1939,  1939,  1939,  1939,  1939,  1939,  1939,  1939,
    1939,  1939,  1939,  1939,  1939,  1939,  -401,  -401,  -401,    87,
    2933,  2285,    71,    89,  2285,  -401,  -401,  -401,    -5,    70,
    3498,  1939,    -5,  -401,  -401,  -401,  -401,  -401,  -401,    97,
    -401,  -401,  2621,  -104,  -401,   -97,    93,    -5,    98,  -401,
     968,   100,    93,  -401,   110,  -401,   111,   -91,  3254,  -401,
    -401,  -401,  -401,  -401,    42,    42,  -171,  -171,    57,    57,
      57,    57,   -80,   -80,    56,    53,    58,    40,   188,   187,
    -178,  -401,  1939,    91,   112,  -401,  2285,   102,  -401,  -176,
    -150,   238,  -401,   130,  -401,  1939,  -401,   113,   131,  1589,
      92,   116,  1830,  -401,  -401,  -401,  -401,  -401,  1939,   136,
    -401,  1939,   137,  2285,   119,  -401,  2285,  2167,  -401,  -401,
     139,   121,  -401,   -69,  1939,  1830,   352,  -401,   -15,  -401,
    2285,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  2285,  -401,
    -401,  -401,  3043,  -401,   124,    93,  -401,  1589,  1939,   128,
    -401,  -401,  1348,  1589,    -7,  -401,  -401,  -401,   146,  -401,
    -401,  -140,  -401,  -401,  -401,  -401,  -401,  1589,  -401,  -401
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
d1126 11
a1136 11
    -401,  -401,  -401,  -401,  -401,  -401,     1,  -401,  -401,   -82,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,  -401,  -130,  -401,  -114,  -109,  -146,  -101,
      33,    38,    32,    35,    44,    30,  -401,  -170,   -51,  -401,
    -193,  -246,    25,    31,  -401,  -401,  -401,  -401,   222,   -77,
    -401,  -401,  -401,  -401,  -126,   -11,  -401,  -401,   103,  -401,
    -401,   -78,  -401,  -401,   -13,  -401,  -401,   217,  -401,   194,
    -168,    39,    22,  -323,  -401,   101,  -186,  -400,  -401,  -401,
     -67,   283,    99,   104,  -401,  -401,    27,  -401,  -401,   -84,
    -401,   -79,  -401,  -401,  -401,  -401,  -401,  -401,   293,  -401,
    -401,  -102,  -401,  -401,    46,  -401,  -401
d1139 3
a1141 4
/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -333
d1144 71
a1214 59
     122,  -332,   117,   478,   479,    11,   158,   294,   183,   272,
     289,   478,   479,    16,   142,   174,   281,   299,   144,     1,
     353,   302,   303,     7,     8,     9,   332,   333,   415,   166,
     343,   418,   461,   266,   171,   159,   160,   161,   109,   173,
     175,   158,   177,   178,   110,   167,   350,   180,   345,   271,
     447,   267,     7,     8,     9,   461,   328,   329,   183,     4,
     183,   345,   441,   144,   351,   173,   348,   362,   448,   345,
     159,   160,   161,     7,     8,     9,   362,   346,   297,   298,
     285,   259,     5,   363,   286,   374,   345,   263,   264,     7,
       8,     9,   449,   445,   135,   122,   272,   117,   373,   324,
     499,   307,   375,   376,   414,   308,   176,   188,    12,   379,
      15,   382,    10,   345,   281,   423,   133,   170,   429,  -330,
     467,   122,   345,   469,   471,   430,    97,    98,    99,   345,
    -331,   437,   187,   109,   182,   438,   271,   485,   146,   110,
     304,   247,   305,   246,   174,   486,  -332,   269,   147,   358,
     262,   410,   190,   474,   334,   335,   183,   345,   344,   330,
     331,    97,    98,    99,   336,   337,   442,   265,   173,   148,
     377,   122,   134,   122,   149,   310,   150,   189,   151,   376,
     272,   153,   154,   247,   156,   246,   398,   399,   400,   401,
     157,   272,   365,   366,   348,   391,   392,   393,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   394,   395,   355,   179,    17,    18,
     271,   396,   397,   384,  -116,   181,   488,   -20,   -21,   480,
     268,   271,   453,   186,   358,   402,   403,   496,   276,   247,
     275,   246,   272,   456,   300,   283,   377,    35,    36,    37,
     287,   172,    39,    40,    41,    42,   288,   389,    97,    98,
      99,   475,   122,   349,   168,     8,   169,   284,   290,   122,
     291,   292,   390,   325,   326,   327,   295,   247,   340,   246,
     296,   -46,   271,   247,   306,   491,   311,   190,   247,   338,
     246,   490,    17,    18,   411,   339,   493,   495,   341,   342,
     355,   -45,   272,   355,   361,   153,   383,   357,   -40,   369,
     412,   495,   416,   417,   421,    17,    18,   145,   425,   345,
     432,    35,   136,   137,   434,   138,    39,    40,    41,    42,
     165,   435,   443,   436,   450,   458,   444,   440,   141,    97,
      98,    99,   271,   446,    35,   136,   137,   122,   138,    39,
      40,    41,    42,   455,   452,   454,   106,   460,   -50,   247,
     468,   466,   472,   473,   477,   355,   489,   247,   492,   246,
     498,   404,   406,   409,   165,   165,   407,   405,   431,   258,
     282,   165,   165,   139,   424,   140,   408,   464,   476,   368,
     465,   370,   355,   155,   371,   355,   355,   420,   494,   426,
     380,   152,     0,     0,     0,   497,   422,     0,     0,   355,
       0,     0,   141,    97,    98,    99,   247,   355,   246,   247,
       0,   246,     0,     0,     0,     0,     0,     0,     0,     0,
     106,     0,     0,     0,     0,   141,    97,    98,    99,     0,
       0,     0,   247,     0,   246,     0,     0,     0,     0,     0,
       0,     0,     0,   106,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   247,     0,   246,     0,     0,   247,
     247,   246,   246,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   247,     0,   246,    17,    18,    19,
      20,    21,    22,   194,   195,   196,     0,   197,   198,   199,
     200,   201,     0,     0,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,     0,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,   202,   139,    95,
     140,   203,   204,   205,   206,   207,    17,    18,   208,   209,
a1215 3
       0,   322,     0,     0,     0,     0,     0,    96,    97,    98,
      99,     0,   100,     0,     0,    35,    36,    37,     0,    38,
      39,    40,    41,    42,     0,   106,     0,     0,     0,     0,
d1218 2
d1221 15
d1237 3
d1243 8
a1250 18
       0,     0,     0,     0,     0,   210,   141,    97,    98,    99,
       0,   211,   212,   213,   214,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   106,     0,   215,   216,   217,    17,
      18,    19,    20,    21,    22,   194,   195,   196,     0,   197,
     198,   199,   200,   201,     0,     0,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,     0,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,   202,
     139,    95,   140,   203,   204,   205,   206,   207,     0,     0,
     208,   209,     0,     0,     0,     0,     0,     0,     0,     0,
      19,    20,    21,    22,     0,     0,     0,     0,     0,    96,
      97,    98,    99,     0,   100,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,   106,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
d1255 12
a1266 16
      87,    88,    89,    90,    91,    92,    93,    94,     0,     0,
      95,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   210,     0,     0,
       0,     0,     0,   211,   212,   213,   214,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   215,   216,
     347,    17,    18,    19,    20,    21,    22,   194,   195,   196,
       0,   197,   198,   199,   200,   201,     0,     0,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,     0,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,   202,   139,    95,   140,   203,   204,   205,   206,   207,
       0,     0,   208,   209,     0,     0,     0,     0,     0,     0,
d1268 7
a1274 5
       0,    96,    97,    98,    99,     0,   100,     0,    17,    18,
      19,    20,    21,    22,     0,     0,     0,     0,     0,   106,
       0,     0,     0,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,   136,   137,
       0,   138,    39,    40,    41,    42,    43,    44,    45,    46,
d1279 34
a1312 2
      87,    88,    89,    90,    91,    92,    93,    94,     0,   210,
      95,     0,     0,     0,     0,   211,   212,   213,   214,     0,
a1313 11
     215,   216,   433,     0,     0,     0,     0,     0,   141,    97,
      98,    99,    17,    18,    19,    20,    21,    22,     0,     0,
       0,     0,     0,     0,     0,     0,   106,     0,     0,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,   136,   137,     0,   138,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,     0,     0,    95,     0,     0,     0,     0,     0,
a1314 16
       0,     0,     0,     0,     0,     0,     0,     0,     0,   280,
       0,     0,   141,    97,    98,    99,     0,     0,     0,     0,
       0,    17,    18,    19,    20,    21,    22,   194,   195,   196,
     106,   197,   198,   199,   200,   201,   478,   479,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,     0,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,   202,   139,    95,   140,   203,   204,   205,   206,   207,
       0,     0,   208,   209,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   364,     0,     0,     0,     0,     0,     0,
       0,    96,    97,    98,    99,     0,   100,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   106,
d1316 1
d1318 16
d1335 1
d1337 1
d1341 2
a1342 2
       0,     0,     0,     0,     0,     0,     0,     0,     0,   210,
       0,     0,     0,     0,     0,   211,   212,   213,   214,     0,
d1344 2
a1345 2
     215,   216,    17,    18,    19,    20,    21,    22,   194,   195,
     196,     0,   197,   198,   199,   200,   201,     0,     0,    23,
d1353 6
a1358 2
      93,    94,   202,   139,    95,   140,   203,   204,   205,   206,
     207,     0,     0,   208,   209,     0,     0,     0,     0,     0,
d1360 3
a1362 1
       0,     0,    96,    97,    98,    99,     0,   100,     0,     0,
a1363 1
     106,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d1366 22
d1391 21
a1413 1
     210,     0,     0,     0,     0,     0,   211,   212,   213,   214,
d1415 4
a1418 2
       0,   215,   216,    17,    18,    19,    20,    21,    22,   194,
     195,   196,     0,   197,   198,   199,   200,   201,     0,     0,
d1420 2
a1421 2
      33,    34,    35,    36,    37,     0,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
d1426 6
a1431 83
      92,    93,    94,   202,   139,    95,   140,   203,   204,   205,
     206,   207,     0,     0,   208,   209,     0,     0,     0,     0,
       0,     0,     0,     0,    19,    20,    21,    22,     0,     0,
       0,     0,     0,    96,    97,    98,    99,     0,   100,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,   106,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,     0,   139,    95,   140,   203,   204,   205,   206,
     207,     0,     0,   208,   209,     0,     0,     0,     0,     0,
       0,   210,     0,     0,     0,     0,     0,   211,   212,   213,
     214,    17,    18,    19,    20,    21,    22,     0,     0,     0,
       0,     0,   215,   154,     0,     0,     0,     0,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,     0,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,     0,   139,    95,   140,   203,   204,   205,   206,   207,
     210,     0,   208,   209,     0,     0,   211,   212,   213,   214,
       0,     0,    19,    20,    21,    22,     0,     0,     0,     0,
       0,    96,    97,    98,    99,     0,   100,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,   106,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
       0,   139,    95,   140,   203,   204,   205,   206,   207,     0,
       0,   208,   209,     0,     0,     0,     0,     0,     0,   210,
       0,     0,     0,     0,     0,   211,   212,   213,   214,     0,
      19,    20,    21,    22,     0,     0,     0,     0,     0,     0,
     215,     0,     0,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,     0,   139,
      95,   140,   203,   204,   205,   206,   207,     0,   210,   208,
     209,     0,     0,     0,   211,   212,   213,   214,    19,    20,
      21,    22,     0,     0,     0,     0,     0,     0,     0,     0,
     354,   470,     0,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,     0,   139,    95,   140,
     203,   204,   205,   206,   207,     0,     0,   208,   209,     0,
       0,     0,     0,     0,     0,     0,   210,     0,     0,     0,
       0,     0,   211,   212,   213,   214,    19,    20,    21,    22,
       0,     0,     0,     0,     0,     0,     0,     0,   354,     0,
       0,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,     0,   139,    95,   140,   203,   204,
     205,   206,   207,     0,   210,   208,   209,     0,     0,     0,
     211,   212,   213,   214,    17,    18,    19,    20,    21,    22,
       0,     0,     0,     0,     0,   293,     0,     0,     0,     0,
       0,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,   136,   137,     0,   138,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,     0,   139,    95,   140,   203,   204,
     205,   206,   207,     0,     0,   208,   209,     0,     0,     0,
       0,     0,   210,     0,     0,   270,     0,     0,   211,   212,
     213,   214,     0,     0,   141,    97,    98,    99,     0,     0,
a1432 1
       0,     0,   106,     0,     0,     0,     0,     0,     0,     0,
a1438 21
       0,     0,     0,     0,     0,     0,     0,    19,    20,    21,
      22,     0,   210,     0,     0,     0,     0,     0,   211,   212,
     213,   214,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,     0,   139,    95,   140,   203,
     204,   205,   206,   207,     0,     0,   208,   209,    19,    20,
      21,    22,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,     0,   139,    95,   140,
     203,   204,   205,   206,   207,     0,     0,   208,   209,     0,
d1440 3
a1442 3
      21,    22,     0,   210,     0,     0,   352,     0,     0,   211,
     212,   213,   214,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,     0,     0,     0,     0,     0,
d1448 87
a1534 29
      89,    90,    91,    92,    93,    94,     0,   139,    95,   140,
     203,   204,   205,   206,   207,     0,     0,   208,   209,    19,
      20,    21,    22,     0,   210,     0,     0,   413,     0,     0,
     211,   212,   213,   214,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,   309,     0,   139,    95,
     140,   203,   204,   205,   206,   207,     0,     0,   208,   209,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    19,
      20,    21,    22,     0,   210,     0,     0,   487,     0,     0,
     211,   212,   213,   214,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,   439,     0,   139,    95,
     140,   203,   204,   205,   206,   207,     0,     0,   208,   209,
       0,     0,     0,     0,     0,   210,     0,     0,     0,     0,
       0,   211,   212,   213,   214,    17,    18,    19,    20,    21,
      22,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,     0,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
d1539 38
a1576 6
      90,    91,    92,    93,    94,     0,     0,    95,     0,     0,
       0,     0,     0,     0,     0,   210,     0,     0,     0,     0,
       0,   211,   212,   213,   214,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    96,    97,    98,    99,     0,
     100,    17,    18,    19,    20,    21,    22,     0,   101,   102,
     103,   104,   105,   106,     0,     0,     0,     0,    23,    24,
d1578 1
a1578 1
      35,   136,   137,     0,   138,    39,    40,    41,    42,    43,
d1584 78
a1661 1
      94,     0,     0,    95,     0,     0,     0,     0,     0,     0,
d1663 1
d1665 20
a1684 2
       0,   141,    97,    98,    99,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   106
a1686 6
#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-401)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

d1689 71
a1759 59
      13,    96,    13,    18,    19,     4,     4,   200,   134,   179,
     196,    18,    19,    12,    96,   117,   184,   210,    96,   129,
     266,   104,   105,    94,    95,    96,   106,   107,   351,   226,
     111,   354,   432,   223,   116,    33,    34,    35,    13,   117,
     118,     4,   120,   121,    13,   242,   223,   125,   226,   179,
     226,   241,    94,    95,    96,   455,   227,   228,   184,    98,
     186,   226,   240,   141,   241,   143,   252,   226,   244,   226,
      33,    34,    35,    94,    95,    96,   226,   242,   208,   209,
     222,   158,     0,   242,   226,   242,   226,   164,   165,    94,
      95,    96,   242,   416,    93,   108,   266,   108,   291,   229,
     240,   222,   295,   296,   350,   226,   119,   149,   130,   222,
     133,   304,   133,   226,   282,   361,   132,   116,   222,    96,
     443,   134,   226,   446,   447,   222,   124,   125,   126,   226,
      96,   222,   145,   108,   133,   226,   266,   460,   133,   108,
     223,   154,   225,   154,   246,   468,    96,   242,   133,   275,
     163,   344,   151,   222,   234,   235,   282,   226,   239,   102,
     103,   124,   125,   126,   108,   109,   412,   166,   246,   133,
     296,   184,   243,   186,   133,   226,   133,   219,   221,   372,
     350,   242,   243,   196,   222,   196,   332,   333,   334,   335,
     226,   361,    98,    99,   380,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   328,   329,   267,   223,     3,     4,
     350,   330,   331,   305,   222,    96,   472,   221,   221,   244,
     221,   361,   425,   243,   360,   336,   337,   244,   133,   252,
     243,   252,   412,   429,   244,   242,   372,    32,    33,    34,
     242,    36,    37,    38,    39,    40,   242,   308,   124,   125,
     126,   454,   275,   262,    94,    95,    96,   241,   221,   282,
     221,   242,   323,   231,   232,   233,   221,   290,   238,   290,
     221,   221,   412,   296,   222,   478,   221,   286,   301,   236,
     301,   477,     3,     4,   345,   237,   482,   483,   110,   112,
     351,   221,   472,   354,   223,   242,   305,   224,   222,    93,
     223,   497,   241,   224,   244,     3,     4,   100,   221,   226,
     222,    32,    33,    34,   224,    36,    37,    38,    39,    40,
     113,   221,   241,   222,    96,   243,   224,   388,   123,   124,
     125,   126,   472,   241,    32,    33,    34,   360,    36,    37,
      38,    39,    40,   222,   224,   242,   141,   241,   222,   372,
     241,   224,   223,   242,    12,   416,   242,   380,   240,   380,
     224,   338,   340,   343,   157,   158,   341,   339,   377,   157,
     186,   164,   165,    94,   362,    96,   342,   438,   455,   286,
     441,   290,   443,   110,   290,   446,   447,   358,   482,   372,
     301,   108,    -1,    -1,    -1,   484,   360,    -1,    -1,   460,
      -1,    -1,   123,   124,   125,   126,   429,   468,   429,   432,
      -1,   432,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     141,    -1,    -1,    -1,    -1,   123,   124,   125,   126,    -1,
      -1,    -1,   455,    -1,   455,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,    -1,   477,    -1,    -1,   482,
     483,   482,   483,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,    -1,   497,    -1,   497,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    -1,    13,    14,    15,
      16,    17,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,     3,     4,   104,   105,
a1760 3
      -1,   241,    -1,    -1,    -1,    -1,    -1,   123,   124,   125,
     126,    -1,   128,    -1,    -1,    32,    33,    34,    -1,    36,
      37,    38,    39,    40,    -1,   141,    -1,    -1,    -1,    -1,
d1763 2
d1766 15
d1782 3
d1788 8
a1795 18
      -1,    -1,    -1,    -1,    -1,   221,   123,   124,   125,   126,
      -1,   227,   228,   229,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   141,    -1,   242,   243,   244,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    -1,    13,
      14,    15,    16,    17,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,   123,
     124,   125,   126,    -1,   128,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,   141,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
d1800 12
a1811 16
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    -1,
      95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,
      -1,    -1,    -1,   227,   228,   229,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   242,   243,
     244,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      -1,    13,    14,    15,    16,    17,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,
d1813 5
a1817 3
      -1,   123,   124,   125,   126,    -1,   128,    -1,     3,     4,
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,   141,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
d1824 34
a1857 2
      85,    86,    87,    88,    89,    90,    91,    92,    -1,   221,
      95,    -1,    -1,    -1,    -1,   227,   228,   229,   230,    -1,
a1858 11
     242,   243,   244,    -1,    -1,    -1,    -1,    -1,   123,   124,
     125,   126,     3,     4,     5,     6,     7,     8,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   141,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,
a1859 16
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,
      -1,    -1,   123,   124,   125,   126,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
     141,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   244,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   123,   124,   125,   126,    -1,   128,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   141,
d1861 1
d1863 16
d1880 1
d1882 1
d1886 2
a1887 2
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,
      -1,    -1,    -1,    -1,    -1,   227,   228,   229,   230,    -1,
d1889 1
a1889 1
     242,   243,     3,     4,     5,     6,     7,     8,     9,    10,
d1899 5
a1903 1
     101,    -1,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,
d1905 3
a1907 1
      -1,    -1,   123,   124,   125,   126,    -1,   128,    -1,    -1,
a1908 1
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1911 22
d1936 21
a1958 1
     221,    -1,    -1,    -1,    -1,    -1,   227,   228,   229,   230,
d1960 4
a1963 2
      -1,   242,   243,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    -1,    13,    14,    15,    16,    17,    -1,    -1,
d1965 2
a1966 2
      30,    31,    32,    33,    34,    -1,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
d1972 83
a2054 3
     100,   101,    -1,    -1,   104,   105,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,     6,     7,     8,    -1,    -1,
      -1,    -1,    -1,   123,   124,   125,   126,    -1,   128,    20,
d2056 1
a2056 1
      31,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d2062 60
a2121 5
      91,    92,    -1,    94,    95,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,
      -1,   221,    -1,    -1,    -1,    -1,    -1,   227,   228,   229,
     230,     3,     4,     5,     6,     7,     8,    -1,    -1,    -1,
      -1,    -1,   242,   243,    -1,    -1,    -1,    -1,    20,    21,
d2123 1
a2123 1
      32,    33,    34,    -1,    36,    37,    38,    39,    40,    41,
d2129 16
a2144 39
      92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
     221,    -1,   104,   105,    -1,    -1,   227,   228,   229,   230,
      -1,    -1,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
      -1,   123,   124,   125,   126,    -1,   128,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,   141,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,   221,
      -1,    -1,    -1,    -1,    -1,   227,   228,   229,   230,    -1,
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
     242,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,   100,   101,    -1,   221,   104,
     105,    -1,    -1,    -1,   227,   228,   229,   230,     5,     6,
       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     243,   244,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,    -1,
      -1,    -1,   227,   228,   229,   230,     5,     6,     7,     8,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
d2151 8
a2158 15
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,   100,   101,    -1,   221,   104,   105,    -1,    -1,    -1,
     227,   228,   229,   230,     3,     4,     5,     6,     7,     8,
      -1,    -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,    -1,    -1,    -1,
      -1,    -1,   221,    -1,    -1,   224,    -1,    -1,   227,   228,
     229,   230,    -1,    -1,   123,   124,   125,   126,    -1,    -1,
a2159 1
      -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d2164 15
d2181 3
a2183 11
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,
       8,    -1,   221,    -1,    -1,    -1,    -1,    -1,   227,   228,
     229,   230,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,     5,     6,
d2186 2
a2187 2
      27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
d2192 17
a2208 58
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,
       7,     8,    -1,   221,    -1,    -1,   224,    -1,    -1,   227,
     228,   229,   230,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,     5,
       6,     7,     8,    -1,   221,    -1,    -1,   224,    -1,    -1,
     227,   228,   229,   230,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
       6,     7,     8,    -1,   221,    -1,    -1,   224,    -1,    -1,
     227,   228,   229,   230,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
      -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,    -1,    -1,
      -1,   227,   228,   229,   230,     3,     4,     5,     6,     7,
       8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    -1,    95,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,    -1,    -1,
      -1,   227,   228,   229,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   123,   124,   125,   126,    -1,
     128,     3,     4,     5,     6,     7,     8,    -1,   136,   137,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,    -1,
d2210 1
d2212 18
a2229 2
      -1,   123,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   141
d2232 2
a2233 2
/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
d2236 2
a2237 2
       0,   129,   246,   248,    98,     0,   250,    94,    95,    96,
     133,   251,   130,   247,   252,   133,   251,     3,     4,     5,
d2241 137
a2377 45
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    95,   123,   124,   125,   126,
     128,   136,   137,   138,   139,   140,   141,   249,   253,   287,
     288,   289,   290,   291,   297,   298,   299,   300,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   343,   344,   345,
     346,   347,   351,   132,   243,   251,    33,    34,    36,    94,
      96,   123,   254,   300,   306,   312,   133,   133,   133,   133,
     133,   221,   343,   242,   243,   326,   222,   226,     4,    33,
      34,    35,   293,   294,   295,   312,   226,   242,    94,    96,
     251,   254,    36,   306,   346,   306,   309,   306,   306,   223,
     306,    96,   251,   299,   314,   315,   243,   309,   149,   219,
     251,   301,   303,   304,     9,    10,    11,    13,    14,    15,
      16,    17,    93,    97,    98,    99,   100,   101,   104,   105,
     221,   227,   228,   229,   230,   242,   243,   244,   254,   255,
     256,   258,   259,   260,   261,   262,   263,   264,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   285,   287,   288,   300,   309,   320,   321,
     322,   323,   327,   328,   329,   332,   338,   342,   293,   294,
     292,   296,   309,   294,   294,   251,   223,   241,   221,   242,
     224,   269,   282,   286,   309,   243,   133,   251,   316,   317,
     244,   315,   314,   242,   241,   222,   226,   242,   242,   321,
     221,   221,   242,   242,   285,   221,   221,   269,   269,   285,
     244,   324,   104,   105,   223,   225,   222,   222,   226,    92,
     283,   221,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   241,   284,   269,   231,   232,   233,   227,   228,
     102,   103,   106,   107,   234,   235,   108,   109,   236,   237,
     238,   110,   112,   111,   239,   226,   242,   244,   321,   251,
     223,   241,   224,   286,   243,   283,   318,   224,   299,   349,
     350,   223,   226,   242,   244,    98,    99,   302,   303,    93,
     320,   328,   339,   285,   242,   285,   285,   299,   331,   222,
     327,   257,   285,   251,   254,   265,   266,   267,   268,   283,
     283,   269,   269,   269,   271,   271,   272,   272,   273,   273,
     273,   273,   274,   274,   275,   276,   277,   278,   279,   280,
     285,   283,   223,   224,   286,   318,   241,   224,   318,   319,
     316,   244,   349,   286,   317,   221,   331,   340,   341,   222,
     222,   251,   222,   244,   224,   221,   222,   222,   226,    92,
     283,   240,   286,   241,   224,   318,   241,   226,   244,   242,
      96,   348,   224,   285,   242,   222,   321,   330,   243,   333,
     241,   322,   325,   326,   283,   283,   224,   318,   241,   318,
     244,   318,   223,   242,   222,   285,   325,    12,    18,    19,
     244,   334,   335,   336,   337,   318,   318,   224,   286,   242,
     321,   285,   240,   321,   334,   321,   244,   336,   224,   240
d2380 10
a2389 24
#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif
d2406 3
a2408 3
      YYERROR;							\
    }								\
while (YYID (0))
d2411 2
a2412 2
#define YYTERROR	1
#define YYERRCODE	256
d2422 1
a2422 1
      if (YYID (N))                                                     \
d2436 1
a2436 1
    while (YYID (0))
d2442 15
d2466 1
a2466 3
__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a2468 6
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
d2474 1
a2474 1
      res += fprintf (yyo, "%d", yylocp->first_line);
d2476 1
a2476 1
        res += fprintf (yyo, ".%d", yylocp->first_column);
d2482 1
a2482 1
          res += fprintf (yyo, "-%d", yylocp->last_line);
d2484 1
a2484 1
            res += fprintf (yyo, ".%d", end_col);
d2487 1
a2487 1
        res += fprintf (yyo, "-%d", end_col);
d2501 10
a2510 31
/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, &yylloc, state)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location, state); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))
d2513 3
a2515 3
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/
a2516 3
/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a2518 9
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, state)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
    struct _mesa_glsl_parse_state *state;
#endif
d2522 2
a2525 2
  YYUSE (yylocationp);
  YYUSE (state);
a2528 2
# else
  YYUSE (yyoutput);
a2537 2
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a2539 9
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp, state)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
    struct _mesa_glsl_parse_state *state;
#endif
d2541 2
a2542 4
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
a2554 2
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a2556 6
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
d2567 5
a2571 5
# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))
a2577 5
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, struct _mesa_glsl_parse_state *state)
#else
d2579 1
a2579 6
yy_reduce_print (yyvsp, yylsp, yyrule, state)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
    struct _mesa_glsl_parse_state *state;
#endif
d2581 1
a2583 1
  unsigned long int yylno = yyrline[yyrule];
d2585 1
a2585 1
	     yyrule - 1, yylno);
d2590 4
a2593 3
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       , state);
d2598 5
a2602 5
# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule, state); \
} while (YYID (0))
d2616 1
a2616 1
#ifndef	YYINITDEPTH
a2638 2
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a2640 5
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
a2655 2
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a2657 6
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
d2687 21
a2707 21
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
d2730 1
a2730 1
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
d2734 1
a2734 1
  const char *yyformat = YY_NULL;
a2741 4
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
d2791 1
a2791 1
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
a2857 3
/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a2859 9
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp, state)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
    struct _mesa_glsl_parse_state *state;
#endif
a2863 1

d2868 1
d2870 1
a2879 13
#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a2881 6
#else
int
yyparse (state)
    struct _mesa_glsl_parse_state *state;
#endif
#endif
d2887 1
a2887 9
#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
d2890 4
a2893 3
static YYSTYPE yyval_default;
# define YY_INITIAL_VALUE(Value) = Value
#endif
a2898 12
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

/* Location data for the lookahead symbol.  */
a2900 1

d2909 3
a2911 3
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.
d2971 1
a2971 2
/* Line 1570 of yacc.c  */
#line 54 "glsl_parser.yy"
d2979 2
a2980 2
/* Line 1570 of yacc.c  */
#line 2845 "glsl_parser.cpp"
d3002 20
a3021 20
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
d3029 1
a3029 1
	goto yyexhaustedlab;
d3032 1
a3032 1
	yystacksize = YYMAXDEPTH;
d3035 8
a3042 8
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
d3044 2
a3045 2
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
d3055 1
a3055 1
		  (unsigned long int) yystacksize));
d3058 1
a3058 1
	YYABORT;
d3087 1
a3087 1
      yychar = YYLEX;
d3152 1
a3152 1
     `$$ = $1'.
d3167 1
a3167 2
/* Line 1787 of yacc.c  */
#line 263 "glsl_parser.yy"
d3171 1
d3175 1
a3175 2
/* Line 1787 of yacc.c  */
#line 267 "glsl_parser.yy"
d3181 1
d3185 1
a3185 2
/* Line 1787 of yacc.c  */
#line 277 "glsl_parser.yy"
d3187 1
a3187 1
      state->process_version_directive(&(yylsp[(2) - (3)]), (yyvsp[(2) - (3)].n), NULL);
d3192 1
d3196 1
a3196 2
/* Line 1787 of yacc.c  */
#line 284 "glsl_parser.yy"
d3198 1
a3198 1
      state->process_version_directive(&(yylsp[(2) - (4)]), (yyvsp[(2) - (4)].n), (yyvsp[(3) - (4)].identifier));
d3203 1
d3207 1
a3207 2
/* Line 1787 of yacc.c  */
#line 298 "glsl_parser.yy"
d3210 1
a3210 1
         _mesa_glsl_warning(& (yylsp[(1) - (2)]), state,
d3212 1
a3212 1
                            "(GLSL ES 1.00 or GLSL 1.20 required).",
d3218 1
d3222 1
a3222 2
/* Line 1787 of yacc.c  */
#line 323 "glsl_parser.yy"
d3224 1
a3224 1
      if (!_mesa_glsl_process_extension((yyvsp[(2) - (5)].identifier), & (yylsp[(2) - (5)]), (yyvsp[(4) - (5)].identifier), & (yylsp[(4) - (5)]), state)) {
d3228 1
d3232 1
a3232 2
/* Line 1787 of yacc.c  */
#line 332 "glsl_parser.yy"
d3237 2
a3238 2
      if ((yyvsp[(1) - (1)].node) != NULL)
         state->translation_unit.push_tail(& (yyvsp[(1) - (1)].node)->link);
d3240 1
d3244 1
a3244 2
/* Line 1787 of yacc.c  */
#line 340 "glsl_parser.yy"
d3249 2
a3250 2
      if ((yyvsp[(2) - (2)].node) != NULL)
         state->translation_unit.push_tail(& (yyvsp[(2) - (2)].node)->link);
d3252 1
d3256 1
a3256 2
/* Line 1787 of yacc.c  */
#line 356 "glsl_parser.yy"
d3260 2
a3261 2
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->primary_expression.identifier = (yyvsp[(1) - (1)].identifier);
d3263 1
d3267 1
a3267 2
/* Line 1787 of yacc.c  */
#line 363 "glsl_parser.yy"
d3271 2
a3272 2
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->primary_expression.int_constant = (yyvsp[(1) - (1)].n);
d3274 1
d3278 1
a3278 2
/* Line 1787 of yacc.c  */
#line 370 "glsl_parser.yy"
d3282 2
a3283 2
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->primary_expression.uint_constant = (yyvsp[(1) - (1)].n);
d3285 1
d3289 1
a3289 2
/* Line 1787 of yacc.c  */
#line 377 "glsl_parser.yy"
d3293 2
a3294 2
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->primary_expression.float_constant = (yyvsp[(1) - (1)].real);
d3296 1
d3300 1
a3300 2
/* Line 1787 of yacc.c  */
#line 384 "glsl_parser.yy"
d3304 2
a3305 2
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->primary_expression.bool_constant = (yyvsp[(1) - (1)].n);
d3307 1
d3311 1
a3311 2
/* Line 1787 of yacc.c  */
#line 391 "glsl_parser.yy"
d3313 1
a3313 1
      (yyval.expression) = (yyvsp[(2) - (3)].expression);
d3315 1
d3319 1
a3319 2
/* Line 1787 of yacc.c  */
#line 399 "glsl_parser.yy"
d3322 2
a3323 2
      (yyval.expression) = new(ctx) ast_expression(ast_array_index, (yyvsp[(1) - (4)].expression), (yyvsp[(3) - (4)].expression), NULL);
      (yyval.expression)->set_location(yylloc);
d3325 1
d3329 1
a3329 2
/* Line 1787 of yacc.c  */
#line 405 "glsl_parser.yy"
d3331 1
a3331 1
      (yyval.expression) = (yyvsp[(1) - (1)].expression);
d3333 1
d3337 1
a3337 2
/* Line 1787 of yacc.c  */
#line 409 "glsl_parser.yy"
d3340 3
a3342 3
      (yyval.expression) = new(ctx) ast_expression(ast_field_selection, (yyvsp[(1) - (3)].expression), NULL, NULL);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->primary_expression.identifier = (yyvsp[(3) - (3)].identifier);
d3344 1
d3348 1
a3348 2
/* Line 1787 of yacc.c  */
#line 416 "glsl_parser.yy"
d3351 2
a3352 2
      (yyval.expression) = new(ctx) ast_expression(ast_post_inc, (yyvsp[(1) - (2)].expression), NULL, NULL);
      (yyval.expression)->set_location(yylloc);
d3354 1
d3358 1
a3358 2
/* Line 1787 of yacc.c  */
#line 422 "glsl_parser.yy"
d3361 2
a3362 2
      (yyval.expression) = new(ctx) ast_expression(ast_post_dec, (yyvsp[(1) - (2)].expression), NULL, NULL);
      (yyval.expression)->set_location(yylloc);
d3364 1
d3368 1
a3368 2
/* Line 1787 of yacc.c  */
#line 440 "glsl_parser.yy"
d3371 2
a3372 2
      (yyval.expression) = new(ctx) ast_expression(ast_field_selection, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression), NULL);
      (yyval.expression)->set_location(yylloc);
d3374 1
d3378 1
a3378 2
/* Line 1787 of yacc.c  */
#line 459 "glsl_parser.yy"
d3380 3
a3382 3
      (yyval.expression) = (yyvsp[(1) - (2)].expression);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->expressions.push_tail(& (yyvsp[(2) - (2)].expression)->link);
d3384 1
d3388 1
a3388 2
/* Line 1787 of yacc.c  */
#line 465 "glsl_parser.yy"
d3390 3
a3392 3
      (yyval.expression) = (yyvsp[(1) - (3)].expression);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->expressions.push_tail(& (yyvsp[(3) - (3)].expression)->link);
d3394 1
d3398 1
a3398 2
/* Line 1787 of yacc.c  */
#line 481 "glsl_parser.yy"
d3401 2
a3402 2
      (yyval.expression) = new(ctx) ast_function_expression((yyvsp[(1) - (1)].type_specifier));
      (yyval.expression)->set_location(yylloc);
d3404 1
d3408 1
a3408 2
/* Line 1787 of yacc.c  */
#line 487 "glsl_parser.yy"
d3411 2
a3412 1
      ast_expression *callee = new(ctx) ast_expression((yyvsp[(1) - (1)].identifier));
d3414 1
a3414 1
      (yyval.expression)->set_location(yylloc);
d3416 1
d3420 1
a3420 2
/* Line 1787 of yacc.c  */
#line 494 "glsl_parser.yy"
d3423 2
a3424 1
      ast_expression *callee = new(ctx) ast_expression((yyvsp[(1) - (1)].identifier));
d3426 1
a3426 1
      (yyval.expression)->set_location(yylloc);
d3428 1
d3432 1
a3432 2
/* Line 1787 of yacc.c  */
#line 514 "glsl_parser.yy"
d3434 3
a3436 3
      (yyval.expression) = (yyvsp[(1) - (2)].expression);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->expressions.push_tail(& (yyvsp[(2) - (2)].expression)->link);
d3438 1
d3442 1
a3442 2
/* Line 1787 of yacc.c  */
#line 520 "glsl_parser.yy"
d3444 3
a3446 3
      (yyval.expression) = (yyvsp[(1) - (3)].expression);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->expressions.push_tail(& (yyvsp[(3) - (3)].expression)->link);
d3448 1
d3452 1
a3452 2
/* Line 1787 of yacc.c  */
#line 532 "glsl_parser.yy"
d3455 2
a3456 1
      ast_expression *callee = new(ctx) ast_expression((yyvsp[(1) - (2)].identifier));
d3458 1
a3458 1
      (yyval.expression)->set_location(yylloc);
d3460 1
d3464 1
a3464 2
/* Line 1787 of yacc.c  */
#line 544 "glsl_parser.yy"
d3467 2
a3468 2
      (yyval.expression) = new(ctx) ast_expression(ast_pre_inc, (yyvsp[(2) - (2)].expression), NULL, NULL);
      (yyval.expression)->set_location(yylloc);
d3470 1
d3474 1
a3474 2
/* Line 1787 of yacc.c  */
#line 550 "glsl_parser.yy"
d3477 2
a3478 2
      (yyval.expression) = new(ctx) ast_expression(ast_pre_dec, (yyvsp[(2) - (2)].expression), NULL, NULL);
      (yyval.expression)->set_location(yylloc);
d3480 1
d3484 1
a3484 2
/* Line 1787 of yacc.c  */
#line 556 "glsl_parser.yy"
d3487 2
a3488 2
      (yyval.expression) = new(ctx) ast_expression((yyvsp[(1) - (2)].n), (yyvsp[(2) - (2)].expression), NULL, NULL);
      (yyval.expression)->set_location(yylloc);
d3490 1
d3494 1
a3494 2
/* Line 1787 of yacc.c  */
#line 565 "glsl_parser.yy"
d3496 1
d3500 1
a3500 2
/* Line 1787 of yacc.c  */
#line 566 "glsl_parser.yy"
d3502 1
d3506 1
a3506 2
/* Line 1787 of yacc.c  */
#line 567 "glsl_parser.yy"
d3508 1
d3512 1
a3512 2
/* Line 1787 of yacc.c  */
#line 568 "glsl_parser.yy"
d3514 1
d3518 1
a3518 2
/* Line 1787 of yacc.c  */
#line 574 "glsl_parser.yy"
d3521 2
a3522 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_mul, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3524 1
d3528 1
a3528 2
/* Line 1787 of yacc.c  */
#line 580 "glsl_parser.yy"
d3531 2
a3532 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_div, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3534 1
d3538 1
a3538 2
/* Line 1787 of yacc.c  */
#line 586 "glsl_parser.yy"
d3541 2
a3542 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_mod, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3544 1
d3548 1
a3548 2
/* Line 1787 of yacc.c  */
#line 596 "glsl_parser.yy"
d3551 2
a3552 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_add, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3554 1
d3558 1
a3558 2
/* Line 1787 of yacc.c  */
#line 602 "glsl_parser.yy"
d3561 2
a3562 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_sub, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3564 1
d3568 1
a3568 2
/* Line 1787 of yacc.c  */
#line 612 "glsl_parser.yy"
d3571 2
a3572 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_lshift, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3574 1
d3578 1
a3578 2
/* Line 1787 of yacc.c  */
#line 618 "glsl_parser.yy"
d3581 2
a3582 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_rshift, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3584 1
d3588 1
a3588 2
/* Line 1787 of yacc.c  */
#line 628 "glsl_parser.yy"
d3591 2
a3592 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_less, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3594 1
d3598 1
a3598 2
/* Line 1787 of yacc.c  */
#line 634 "glsl_parser.yy"
d3601 2
a3602 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_greater, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3604 1
d3608 1
a3608 2
/* Line 1787 of yacc.c  */
#line 640 "glsl_parser.yy"
d3611 2
a3612 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_lequal, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3614 1
d3618 1
a3618 2
/* Line 1787 of yacc.c  */
#line 646 "glsl_parser.yy"
d3621 2
a3622 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_gequal, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3624 1
d3628 1
a3628 2
/* Line 1787 of yacc.c  */
#line 656 "glsl_parser.yy"
d3631 2
a3632 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_equal, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3634 1
d3638 1
a3638 2
/* Line 1787 of yacc.c  */
#line 662 "glsl_parser.yy"
d3641 2
a3642 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_nequal, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3644 1
d3648 1
a3648 2
/* Line 1787 of yacc.c  */
#line 672 "glsl_parser.yy"
d3651 2
a3652 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_and, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3654 1
d3658 1
a3658 2
/* Line 1787 of yacc.c  */
#line 682 "glsl_parser.yy"
d3661 2
a3662 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_xor, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3664 1
d3668 1
a3668 2
/* Line 1787 of yacc.c  */
#line 692 "glsl_parser.yy"
d3671 2
a3672 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_or, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3674 1
d3678 1
a3678 2
/* Line 1787 of yacc.c  */
#line 702 "glsl_parser.yy"
d3681 2
a3682 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_and, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3684 1
d3688 1
a3688 2
/* Line 1787 of yacc.c  */
#line 712 "glsl_parser.yy"
d3691 2
a3692 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_xor, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3694 1
d3698 1
a3698 2
/* Line 1787 of yacc.c  */
#line 722 "glsl_parser.yy"
d3701 2
a3702 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_or, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
d3704 1
d3708 1
a3708 2
/* Line 1787 of yacc.c  */
#line 732 "glsl_parser.yy"
d3711 2
a3712 2
      (yyval.expression) = new(ctx) ast_expression(ast_conditional, (yyvsp[(1) - (5)].expression), (yyvsp[(3) - (5)].expression), (yyvsp[(5) - (5)].expression));
      (yyval.expression)->set_location(yylloc);
d3714 1
d3718 1
a3718 2
/* Line 1787 of yacc.c  */
#line 742 "glsl_parser.yy"
d3721 2
a3722 2
      (yyval.expression) = new(ctx) ast_expression((yyvsp[(2) - (3)].n), (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression), NULL);
      (yyval.expression)->set_location(yylloc);
d3724 1
d3728 1
a3728 2
/* Line 1787 of yacc.c  */
#line 750 "glsl_parser.yy"
d3730 1
d3734 1
a3734 2
/* Line 1787 of yacc.c  */
#line 751 "glsl_parser.yy"
d3736 1
d3740 1
a3740 2
/* Line 1787 of yacc.c  */
#line 752 "glsl_parser.yy"
d3742 1
d3746 1
a3746 2
/* Line 1787 of yacc.c  */
#line 753 "glsl_parser.yy"
d3748 1
d3752 1
a3752 2
/* Line 1787 of yacc.c  */
#line 754 "glsl_parser.yy"
d3754 1
d3758 1
a3758 2
/* Line 1787 of yacc.c  */
#line 755 "glsl_parser.yy"
d3760 1
d3764 1
a3764 2
/* Line 1787 of yacc.c  */
#line 756 "glsl_parser.yy"
d3766 1
d3770 1
a3770 2
/* Line 1787 of yacc.c  */
#line 757 "glsl_parser.yy"
d3772 1
d3776 1
a3776 2
/* Line 1787 of yacc.c  */
#line 758 "glsl_parser.yy"
d3778 1
d3782 1
a3782 2
/* Line 1787 of yacc.c  */
#line 759 "glsl_parser.yy"
d3784 1
d3788 1
a3788 2
/* Line 1787 of yacc.c  */
#line 760 "glsl_parser.yy"
d3790 1
d3794 1
a3794 2
/* Line 1787 of yacc.c  */
#line 765 "glsl_parser.yy"
d3796 1
a3796 1
      (yyval.expression) = (yyvsp[(1) - (1)].expression);
d3798 1
d3802 1
a3802 2
/* Line 1787 of yacc.c  */
#line 769 "glsl_parser.yy"
d3805 1
a3805 1
      if ((yyvsp[(1) - (3)].expression)->oper != ast_sequence) {
d3807 2
a3808 2
         (yyval.expression)->set_location(yylloc);
         (yyval.expression)->expressions.push_tail(& (yyvsp[(1) - (3)].expression)->link);
d3810 1
a3810 1
         (yyval.expression) = (yyvsp[(1) - (3)].expression);
d3813 1
a3813 1
      (yyval.expression)->expressions.push_tail(& (yyvsp[(3) - (3)].expression)->link);
d3815 1
d3819 1
a3819 2
/* Line 1787 of yacc.c  */
#line 789 "glsl_parser.yy"
d3822 1
a3822 1
      (yyval.node) = (yyvsp[(1) - (2)].function);
d3824 1
d3828 1
a3828 2
/* Line 1787 of yacc.c  */
#line 794 "glsl_parser.yy"
d3830 1
a3830 1
      (yyval.node) = (yyvsp[(1) - (2)].declarator_list);
d3832 1
d3836 1
a3836 2
/* Line 1787 of yacc.c  */
#line 798 "glsl_parser.yy"
d3838 2
a3839 2
      (yyvsp[(3) - (4)].type_specifier)->default_precision = (yyvsp[(2) - (4)].n);
      (yyval.node) = (yyvsp[(3) - (4)].type_specifier);
d3841 1
d3845 1
a3845 2
/* Line 1787 of yacc.c  */
#line 803 "glsl_parser.yy"
d3847 1
a3847 1
      (yyval.node) = (yyvsp[(1) - (1)].node);
d3849 1
d3853 1
a3853 2
/* Line 1787 of yacc.c  */
#line 819 "glsl_parser.yy"
d3855 2
a3856 2
      (yyval.function) = (yyvsp[(1) - (2)].function);
      (yyval.function)->parameters.push_tail(& (yyvsp[(2) - (2)].parameter_declarator)->link);
d3858 1
d3862 1
a3862 2
/* Line 1787 of yacc.c  */
#line 824 "glsl_parser.yy"
d3864 2
a3865 2
      (yyval.function) = (yyvsp[(1) - (3)].function);
      (yyval.function)->parameters.push_tail(& (yyvsp[(3) - (3)].parameter_declarator)->link);
d3867 1
d3871 1
a3871 2
/* Line 1787 of yacc.c  */
#line 832 "glsl_parser.yy"
d3875 3
a3877 3
      (yyval.function)->set_location(yylloc);
      (yyval.function)->return_type = (yyvsp[(1) - (3)].fully_specified_type);
      (yyval.function)->identifier = (yyvsp[(2) - (3)].identifier);
d3879 1
a3879 1
      state->symbols->add_function(new(state) ir_function((yyvsp[(2) - (3)].identifier)));
d3882 1
d3886 1
a3886 2
/* Line 1787 of yacc.c  */
#line 846 "glsl_parser.yy"
d3890 1
a3890 1
      (yyval.parameter_declarator)->set_location(yylloc);
d3892 3
a3894 3
      (yyval.parameter_declarator)->type->set_location(yylloc);
      (yyval.parameter_declarator)->type->specifier = (yyvsp[(1) - (2)].type_specifier);
      (yyval.parameter_declarator)->identifier = (yyvsp[(2) - (2)].identifier);
d3896 1
d3900 1
a3900 2
/* Line 1787 of yacc.c  */
#line 856 "glsl_parser.yy"
d3904 1
a3904 1
      (yyval.parameter_declarator)->set_location(yylloc);
d3906 4
a3909 5
      (yyval.parameter_declarator)->type->set_location(yylloc);
      (yyval.parameter_declarator)->type->specifier = (yyvsp[(1) - (5)].type_specifier);
      (yyval.parameter_declarator)->identifier = (yyvsp[(2) - (5)].identifier);
      (yyval.parameter_declarator)->is_array = true;
      (yyval.parameter_declarator)->array_size = (yyvsp[(4) - (5)].expression);
d3911 1
d3915 1
a3915 2
/* Line 1787 of yacc.c  */
#line 871 "glsl_parser.yy"
d3917 2
a3918 2
      (yyval.parameter_declarator) = (yyvsp[(2) - (2)].parameter_declarator);
      (yyval.parameter_declarator)->type->qualifier = (yyvsp[(1) - (2)].type_qualifier);
d3920 1
d3924 1
a3924 2
/* Line 1787 of yacc.c  */
#line 876 "glsl_parser.yy"
d3928 1
a3928 1
      (yyval.parameter_declarator)->set_location(yylloc);
d3930 3
a3932 2
      (yyval.parameter_declarator)->type->qualifier = (yyvsp[(1) - (2)].type_qualifier);
      (yyval.parameter_declarator)->type->specifier = (yyvsp[(2) - (2)].type_specifier);
d3934 1
d3938 1
a3938 2
/* Line 1787 of yacc.c  */
#line 888 "glsl_parser.yy"
d3942 1
d3946 1
a3946 2
/* Line 1787 of yacc.c  */
#line 892 "glsl_parser.yy"
d3948 2
a3949 2
      if ((yyvsp[(2) - (2)].type_qualifier).flags.q.constant)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "duplicate const qualifier.\n");
d3951 1
a3951 1
      (yyval.type_qualifier) = (yyvsp[(2) - (2)].type_qualifier);
d3954 1
d3958 1
a3958 2
/* Line 1787 of yacc.c  */
#line 900 "glsl_parser.yy"
d3960 2
a3961 2
      if (((yyvsp[(1) - (2)].type_qualifier).flags.q.in || (yyvsp[(1) - (2)].type_qualifier).flags.q.out) && ((yyvsp[(2) - (2)].type_qualifier).flags.q.in || (yyvsp[(2) - (2)].type_qualifier).flags.q.out))
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "duplicate in/out/inout qualifier\n");
d3963 3
a3965 3
      if (!state->ARB_shading_language_420pack_enable && (yyvsp[(2) - (2)].type_qualifier).flags.q.constant)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "const must be specified before "
                          "in/out/inout.\n");
d3967 2
a3968 2
      (yyval.type_qualifier) = (yyvsp[(1) - (2)].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[(1) - (2)]), state, (yyvsp[(2) - (2)].type_qualifier));
d3970 1
d3974 1
a3974 2
/* Line 1787 of yacc.c  */
#line 912 "glsl_parser.yy"
d3976 2
a3977 2
      if ((yyvsp[(2) - (2)].type_qualifier).precision != ast_precision_none)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Duplicate precision qualifier.\n");
d3979 2
a3980 2
      if (!state->ARB_shading_language_420pack_enable && (yyvsp[(2) - (2)].type_qualifier).flags.i != 0)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Precision qualifiers must come last.\n");
d3982 2
a3983 2
      (yyval.type_qualifier) = (yyvsp[(2) - (2)].type_qualifier);
      (yyval.type_qualifier).precision = (yyvsp[(1) - (2)].n);
d3985 1
d3989 1
a3989 2
/* Line 1787 of yacc.c  */
#line 925 "glsl_parser.yy"
d3994 1
d3998 1
a3998 2
/* Line 1787 of yacc.c  */
#line 930 "glsl_parser.yy"
d4003 1
d4007 1
a4007 2
/* Line 1787 of yacc.c  */
#line 935 "glsl_parser.yy"
d4013 1
d4017 1
a4017 2
/* Line 1787 of yacc.c  */
#line 949 "glsl_parser.yy"
d4020 2
a4021 2
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (3)].identifier), false, NULL, NULL);
      decl->set_location(yylloc);
d4023 1
a4023 1
      (yyval.declarator_list) = (yyvsp[(1) - (3)].declarator_list);
d4025 1
a4025 1
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (3)].identifier), ir_var_auto));
d4027 1
d4031 1
a4031 2
/* Line 1787 of yacc.c  */
#line 959 "glsl_parser.yy"
d4034 2
a4035 2
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (5)].identifier), true, NULL, NULL);
      decl->set_location(yylloc);
d4037 1
a4037 1
      (yyval.declarator_list) = (yyvsp[(1) - (5)].declarator_list);
d4039 1
a4039 1
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (5)].identifier), ir_var_auto));
d4041 1
d4045 1
a4045 2
/* Line 1787 of yacc.c  */
#line 969 "glsl_parser.yy"
d4048 2
a4049 2
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (6)].identifier), true, (yyvsp[(5) - (6)].expression), NULL);
      decl->set_location(yylloc);
d4051 1
a4051 1
      (yyval.declarator_list) = (yyvsp[(1) - (6)].declarator_list);
d4053 1
a4053 1
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (6)].identifier), ir_var_auto));
d4055 1
d4059 1
a4059 2
/* Line 1787 of yacc.c  */
#line 979 "glsl_parser.yy"
d4062 2
a4063 2
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (7)].identifier), true, NULL, (yyvsp[(7) - (7)].expression));
      decl->set_location(yylloc);
d4065 1
a4065 1
      (yyval.declarator_list) = (yyvsp[(1) - (7)].declarator_list);
d4067 1
a4067 6
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (7)].identifier), ir_var_auto));
      if ((yyvsp[(7) - (7)].expression)->oper == ast_aggregate) {
         ast_aggregate_initializer *ai = (ast_aggregate_initializer *)(yyvsp[(7) - (7)].expression);
         ast_type_specifier *type = new(ctx) ast_type_specifier((yyvsp[(1) - (7)].declarator_list)->type->specifier, true, NULL);
         _mesa_ast_set_aggregate_type(type, ai, state);
      }
d4069 1
d4073 1
a4073 2
/* Line 1787 of yacc.c  */
#line 994 "glsl_parser.yy"
d4076 3
a4078 11
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (8)].identifier), true, (yyvsp[(5) - (8)].expression), (yyvsp[(8) - (8)].expression));
      decl->set_location(yylloc);

      (yyval.declarator_list) = (yyvsp[(1) - (8)].declarator_list);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (8)].identifier), ir_var_auto));
      if ((yyvsp[(8) - (8)].expression)->oper == ast_aggregate) {
         ast_aggregate_initializer *ai = (ast_aggregate_initializer *)(yyvsp[(8) - (8)].expression);
         ast_type_specifier *type = new(ctx) ast_type_specifier((yyvsp[(1) - (8)].declarator_list)->type->specifier, true, (yyvsp[(5) - (8)].expression));
         _mesa_ast_set_aggregate_type(type, ai, state);
      }
d4080 1
d4084 1
a4084 2
/* Line 1787 of yacc.c  */
#line 1009 "glsl_parser.yy"
d4087 2
a4088 2
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (5)].identifier), false, NULL, (yyvsp[(5) - (5)].expression));
      decl->set_location(yylloc);
d4090 2
a4091 1
      (yyval.declarator_list) = (yyvsp[(1) - (5)].declarator_list);
a4092 5
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (5)].identifier), ir_var_auto));
      if ((yyvsp[(5) - (5)].expression)->oper == ast_aggregate) {
         ast_aggregate_initializer *ai = (ast_aggregate_initializer *)(yyvsp[(5) - (5)].expression);
         _mesa_ast_set_aggregate_type((yyvsp[(1) - (5)].declarator_list)->type->specifier, ai, state);
      }
d4094 1
d4098 1
a4098 2
/* Line 1787 of yacc.c  */
#line 1027 "glsl_parser.yy"
d4101 6
a4106 3
      /* Empty declaration list is valid. */
      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (1)].fully_specified_type));
      (yyval.declarator_list)->set_location(yylloc);
d4108 1
d4112 1
a4112 2
/* Line 1787 of yacc.c  */
#line 1034 "glsl_parser.yy"
d4115 2
a4116 1
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (2)].identifier), false, NULL, NULL);
d4118 2
a4119 2
      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (2)].fully_specified_type));
      (yyval.declarator_list)->set_location(yylloc);
d4122 1
d4126 1
a4126 2
/* Line 1787 of yacc.c  */
#line 1043 "glsl_parser.yy"
d4129 2
a4130 1
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (4)].identifier), true, NULL, NULL);
d4132 2
a4133 2
      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (4)].fully_specified_type));
      (yyval.declarator_list)->set_location(yylloc);
d4136 1
d4140 1
a4140 67
/* Line 1787 of yacc.c  */
#line 1052 "glsl_parser.yy"
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (5)].identifier), true, (yyvsp[(4) - (5)].expression), NULL);

      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (5)].fully_specified_type));
      (yyval.declarator_list)->set_location(yylloc);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
   }
    break;

  case 144:
/* Line 1787 of yacc.c  */
#line 1061 "glsl_parser.yy"
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (6)].identifier), true, NULL, (yyvsp[(6) - (6)].expression));

      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (6)].fully_specified_type));
      (yyval.declarator_list)->set_location(yylloc);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      if ((yyvsp[(6) - (6)].expression)->oper == ast_aggregate) {
         ast_aggregate_initializer *ai = (ast_aggregate_initializer *)(yyvsp[(6) - (6)].expression);
         ast_type_specifier *type = new(ctx) ast_type_specifier((yyvsp[(1) - (6)].fully_specified_type)->specifier, true, NULL);
         _mesa_ast_set_aggregate_type(type, ai, state);
      }
   }
    break;

  case 145:
/* Line 1787 of yacc.c  */
#line 1075 "glsl_parser.yy"
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (7)].identifier), true, (yyvsp[(4) - (7)].expression), (yyvsp[(7) - (7)].expression));

      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (7)].fully_specified_type));
      (yyval.declarator_list)->set_location(yylloc);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      if ((yyvsp[(7) - (7)].expression)->oper == ast_aggregate) {
         ast_aggregate_initializer *ai = (ast_aggregate_initializer *)(yyvsp[(7) - (7)].expression);
         ast_type_specifier *type = new(ctx) ast_type_specifier((yyvsp[(1) - (7)].fully_specified_type)->specifier, true, (yyvsp[(4) - (7)].expression));
         _mesa_ast_set_aggregate_type(type, ai, state);
      }
   }
    break;

  case 146:
/* Line 1787 of yacc.c  */
#line 1089 "glsl_parser.yy"
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (4)].identifier), false, NULL, (yyvsp[(4) - (4)].expression));

      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (4)].fully_specified_type));
      (yyval.declarator_list)->set_location(yylloc);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      if ((yyvsp[(4) - (4)].expression)->oper == ast_aggregate) {
         _mesa_ast_set_aggregate_type((yyvsp[(1) - (4)].fully_specified_type)->specifier, (yyvsp[(4) - (4)].expression), state);
      }
   }
    break;

  case 147:
/* Line 1787 of yacc.c  */
#line 1101 "glsl_parser.yy"
d4143 2
a4144 1
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (2)].identifier), false, NULL, NULL);
d4147 1
a4147 1
      (yyval.declarator_list)->set_location(yylloc);
d4152 1
d4155 2
a4156 3
  case 148:
/* Line 1787 of yacc.c  */
#line 1115 "glsl_parser.yy"
d4160 2
a4161 2
      (yyval.fully_specified_type)->set_location(yylloc);
      (yyval.fully_specified_type)->specifier = (yyvsp[(1) - (1)].type_specifier);
d4163 1
d4166 2
a4167 3
  case 149:
/* Line 1787 of yacc.c  */
#line 1122 "glsl_parser.yy"
d4171 3
a4173 3
      (yyval.fully_specified_type)->set_location(yylloc);
      (yyval.fully_specified_type)->qualifier = (yyvsp[(1) - (2)].type_qualifier);
      (yyval.fully_specified_type)->specifier = (yyvsp[(2) - (2)].type_specifier);
d4175 1
d4178 2
a4179 3
  case 150:
/* Line 1787 of yacc.c  */
#line 1133 "glsl_parser.yy"
d4181 1
a4181 1
      (yyval.type_qualifier) = (yyvsp[(3) - (4)].type_qualifier);
d4183 1
d4186 2
a4187 3
  case 152:
/* Line 1787 of yacc.c  */
#line 1141 "glsl_parser.yy"
d4189 2
a4190 2
      (yyval.type_qualifier) = (yyvsp[(1) - (3)].type_qualifier);
      if (!(yyval.type_qualifier).merge_qualifier(& (yylsp[(3) - (3)]), state, (yyvsp[(3) - (3)].type_qualifier))) {
d4194 1
d4197 4
a4200 4
  case 153:
/* Line 1787 of yacc.c  */
#line 1150 "glsl_parser.yy"
    { (yyval.n) = (yyvsp[(1) - (1)].n); }
d4203 4
a4206 4
  case 154:
/* Line 1787 of yacc.c  */
#line 1151 "glsl_parser.yy"
    { (yyval.n) = (yyvsp[(1) - (1)].n); }
d4209 2
a4210 3
  case 155:
/* Line 1787 of yacc.c  */
#line 1156 "glsl_parser.yy"
d4215 3
a4217 2
      if (!(yyval.type_qualifier).flags.i && state->ARB_fragment_coord_conventions_enable) {
         if (strcmp((yyvsp[(1) - (1)].identifier), "origin_upper_left") == 0) {
d4219 2
a4220 1
         } else if (strcmp((yyvsp[(1) - (1)].identifier), "pixel_center_integer") == 0) {
d4225 1
a4225 1
            _mesa_glsl_warning(& (yylsp[(1) - (1)]), state,
d4227 1
a4227 1
                               "identifier `%s' used\n", (yyvsp[(1) - (1)].identifier));
d4235 1
a4235 1
         if (strcmp((yyvsp[(1) - (1)].identifier), "depth_any") == 0) {
d4237 1
a4237 1
         } else if (strcmp((yyvsp[(1) - (1)].identifier), "depth_greater") == 0) {
d4239 1
a4239 1
         } else if (strcmp((yyvsp[(1) - (1)].identifier), "depth_less") == 0) {
d4241 2
a4242 1
         } else if (strcmp((yyvsp[(1) - (1)].identifier), "depth_unchanged") == 0) {
d4247 1
a4247 1
            _mesa_glsl_warning(& (yylsp[(1) - (1)]), state,
d4249 1
a4249 1
                               "layout qualifier `%s' is used\n", (yyvsp[(1) - (1)].identifier));
d4252 1
a4252 1
            _mesa_glsl_warning(& (yylsp[(1) - (1)]), state,
d4254 1
a4254 1
                               "layout qualifier `%s' is used\n", (yyvsp[(1) - (1)].identifier));
d4259 2
a4260 2
      if (!(yyval.type_qualifier).flags.i && state->ARB_uniform_buffer_object_enable) {
         if (strcmp((yyvsp[(1) - (1)].identifier), "std140") == 0) {
d4262 1
a4262 1
         } else if (strcmp((yyvsp[(1) - (1)].identifier), "shared") == 0) {
d4264 1
a4264 1
         } else if (strcmp((yyvsp[(1) - (1)].identifier), "column_major") == 0) {
d4271 4
d4276 1
a4276 1
         } else if (strcmp((yyvsp[(1) - (1)].identifier), "row_major") == 0) {
d4278 8
d4289 1
a4289 1
            _mesa_glsl_warning(& (yylsp[(1) - (1)]), state,
d4291 95
a4385 1
                               "layout qualifier `%s' is used\n", (yyvsp[(1) - (1)].identifier));
d4390 2
a4391 2
         _mesa_glsl_error(& (yylsp[(1) - (1)]), state, "unrecognized layout identifier "
                          "`%s'\n", (yyvsp[(1) - (1)].identifier));
d4395 1
d4398 2
a4399 3
  case 156:
/* Line 1787 of yacc.c  */
#line 1232 "glsl_parser.yy"
d4403 35
a4437 3
      if (state->ARB_explicit_attrib_location_enable) {
         if (strcmp("location", (yyvsp[(1) - (3)].identifier)) == 0) {
            (yyval.type_qualifier).flags.q.explicit_location = 1;
d4439 19
a4457 6
            if ((yyvsp[(3) - (3)].n) >= 0) {
               (yyval.type_qualifier).location = (yyvsp[(3) - (3)].n);
            } else {
               _mesa_glsl_error(& (yylsp[(3) - (3)]), state,
                                "invalid location %d specified\n", (yyvsp[(3) - (3)].n));
               YYERROR;
d4460 1
d4462 20
a4481 5
         if (strcmp("index", (yyvsp[(1) - (3)].identifier)) == 0) {
            (yyval.type_qualifier).flags.q.explicit_index = 1;

            if ((yyvsp[(3) - (3)].n) >= 0) {
               (yyval.type_qualifier).index = (yyvsp[(3) - (3)].n);
d4483 2
a4484 3
               _mesa_glsl_error(& (yylsp[(3) - (3)]), state,
                                "invalid index %d specified\n", (yyvsp[(3) - (3)].n));
               YYERROR;
d4486 1
d4490 21
a4510 4
      if (state->ARB_shading_language_420pack_enable &&
          strcmp("binding", (yyvsp[(1) - (3)].identifier)) == 0) {
         (yyval.type_qualifier).flags.q.explicit_binding = 1;
         (yyval.type_qualifier).binding = (yyvsp[(3) - (3)].n);
d4517 2
a4518 2
         _mesa_glsl_error(& (yylsp[(1) - (3)]), state, "unrecognized layout identifier "
                          "`%s'\n", (yyvsp[(1) - (3)].identifier));
a4519 4
      } else if (state->ARB_explicit_attrib_location_warn) {
         _mesa_glsl_warning(& (yylsp[(1) - (3)]), state,
                            "GL_ARB_explicit_attrib_location layout "
                            "identifier `%s' used\n", (yyvsp[(1) - (3)].identifier));
d4522 1
d4525 2
a4526 3
  case 157:
/* Line 1787 of yacc.c  */
#line 1281 "glsl_parser.yy"
d4528 1
a4528 1
      (yyval.type_qualifier) = (yyvsp[(1) - (1)].type_qualifier);
d4530 2
a4531 2
      if ((yyval.type_qualifier).flags.q.uniform && !state->ARB_uniform_buffer_object_enable) {
         _mesa_glsl_error(& (yylsp[(1) - (1)]), state,
d4533 1
a4533 1
                          "layout qualifier `%s' is used\n", (yyvsp[(1) - (1)].type_qualifier));
d4535 1
a4535 1
         _mesa_glsl_warning(& (yylsp[(1) - (1)]), state,
d4537 1
a4537 1
                            "layout qualifier `%s' is used\n", (yyvsp[(1) - (1)].type_qualifier));
d4540 1
d4543 2
a4544 3
  case 158:
/* Line 1787 of yacc.c  */
#line 1303 "glsl_parser.yy"
d4549 1
d4552 2
a4553 3
  case 159:
/* Line 1787 of yacc.c  */
#line 1308 "glsl_parser.yy"
d4558 1
d4561 2
a4562 3
  case 160:
/* Line 1787 of yacc.c  */
#line 1316 "glsl_parser.yy"
d4567 1
d4570 2
a4571 3
  case 161:
/* Line 1787 of yacc.c  */
#line 1321 "glsl_parser.yy"
d4576 1
d4579 2
a4580 3
  case 162:
/* Line 1787 of yacc.c  */
#line 1326 "glsl_parser.yy"
d4585 1
d4588 2
a4589 3
  case 163:
/* Line 1787 of yacc.c  */
#line 1335 "glsl_parser.yy"
d4594 1
d4597 2
a4598 3
  case 168:
/* Line 1787 of yacc.c  */
#line 1344 "glsl_parser.yy"
d4601 1
a4601 1
      (yyval.type_qualifier).precision = (yyvsp[(1) - (1)].n);
d4603 1
d4606 2
a4607 3
  case 169:
/* Line 1787 of yacc.c  */
#line 1362 "glsl_parser.yy"
d4609 2
a4610 2
      if ((yyvsp[(2) - (2)].type_qualifier).flags.q.invariant)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Duplicate \"invariant\" qualifier.\n");
d4612 3
a4614 3
      if ((yyvsp[(2) - (2)].type_qualifier).has_layout()) {
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state,
                          "\"invariant\" cannot be used with layout(...).\n");
d4617 1
a4617 1
      (yyval.type_qualifier) = (yyvsp[(2) - (2)].type_qualifier);
d4620 1
d4623 2
a4624 3
  case 170:
/* Line 1787 of yacc.c  */
#line 1375 "glsl_parser.yy"
d4636 2
a4637 2
      if ((yyvsp[(2) - (2)].type_qualifier).has_interpolation())
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Duplicate interpolation qualifier.\n");
d4639 3
a4641 3
      if ((yyvsp[(2) - (2)].type_qualifier).has_layout()) {
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Interpolation qualifiers cannot be used "
                          "with layout(...).\n");
d4644 3
a4646 3
      if (!state->ARB_shading_language_420pack_enable && (yyvsp[(2) - (2)].type_qualifier).flags.q.invariant) {
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Interpolation qualifiers must come "
                          "after \"invariant\".\n");
d4649 2
a4650 2
      (yyval.type_qualifier) = (yyvsp[(1) - (2)].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[(1) - (2)]), state, (yyvsp[(2) - (2)].type_qualifier));
d4652 1
d4655 2
a4656 3
  case 171:
/* Line 1787 of yacc.c  */
#line 1403 "glsl_parser.yy"
d4664 69
a4732 2
      if (!state->ARB_shading_language_420pack_enable && (yyvsp[(2) - (2)].type_qualifier).has_layout())
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Duplicate layout(...) qualifiers.\n");
d4734 5
a4738 3
      if ((yyvsp[(2) - (2)].type_qualifier).flags.q.invariant)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "layout(...) cannot be used with "
                          "the \"invariant\" qualifier\n");
d4740 5
a4744 7
      if ((yyvsp[(2) - (2)].type_qualifier).has_interpolation()) {
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "layout(...) cannot be used with "
                          "interpolation qualifiers.\n");
      }

      (yyval.type_qualifier) = (yyvsp[(1) - (2)].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[(1) - (2)]), state, (yyvsp[(2) - (2)].type_qualifier));
d4746 1
d4750 1
a4750 2
/* Line 1787 of yacc.c  */
#line 1426 "glsl_parser.yy"
d4752 2
a4753 12
      if ((yyvsp[(2) - (2)].type_qualifier).has_auxiliary_storage()) {
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state,
                          "Duplicate auxiliary storage qualifier (centroid).\n");
      }

      if (!state->ARB_shading_language_420pack_enable &&
          ((yyvsp[(2) - (2)].type_qualifier).flags.q.invariant || (yyvsp[(2) - (2)].type_qualifier).has_interpolation() || (yyvsp[(2) - (2)].type_qualifier).has_layout())) {
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Auxiliary storage qualifiers must come "
                          "just before storage qualifiers.\n");
      }
      (yyval.type_qualifier) = (yyvsp[(1) - (2)].type_qualifier);
      (yyval.type_qualifier).flags.i |= (yyvsp[(2) - (2)].type_qualifier).flags.i;
d4755 1
d4759 1
a4759 2
/* Line 1787 of yacc.c  */
#line 1441 "glsl_parser.yy"
d4761 2
a4762 17
      /* Section 4.3 of the GLSL 1.20 specification states:
       * "Variable declarations may have a storage qualifier specified..."
       *  1.30 clarifies this to "may have one storage qualifier".
       */
      if ((yyvsp[(2) - (2)].type_qualifier).has_storage())
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Duplicate storage qualifier.\n");

      if (!state->ARB_shading_language_420pack_enable &&
          ((yyvsp[(2) - (2)].type_qualifier).flags.q.invariant || (yyvsp[(2) - (2)].type_qualifier).has_interpolation() || (yyvsp[(2) - (2)].type_qualifier).has_layout() ||
           (yyvsp[(2) - (2)].type_qualifier).has_auxiliary_storage())) {
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Storage qualifiers must come after "
                          "invariant, interpolation, layout and auxiliary "
                          "storage qualifiers.\n");
      }

      (yyval.type_qualifier) = (yyvsp[(1) - (2)].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[(1) - (2)]), state, (yyvsp[(2) - (2)].type_qualifier));
d4764 1
d4768 1
a4768 2
/* Line 1787 of yacc.c  */
#line 1461 "glsl_parser.yy"
d4770 2
a4771 8
      if ((yyvsp[(2) - (2)].type_qualifier).precision != ast_precision_none)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Duplicate precision qualifier.\n");

      if (!state->ARB_shading_language_420pack_enable && (yyvsp[(2) - (2)].type_qualifier).flags.i != 0)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Precision qualifiers must come last.\n");

      (yyval.type_qualifier) = (yyvsp[(2) - (2)].type_qualifier);
      (yyval.type_qualifier).precision = (yyvsp[(1) - (2)].n);
d4773 1
d4777 1
a4777 2
/* Line 1787 of yacc.c  */
#line 1475 "glsl_parser.yy"
d4780 1
a4780 1
      (yyval.type_qualifier).flags.q.centroid = 1;
d4782 1
d4786 1
a4786 2
/* Line 1787 of yacc.c  */
#line 1483 "glsl_parser.yy"
d4789 1
a4789 1
      (yyval.type_qualifier).flags.q.constant = 1;
d4791 1
d4795 1
a4795 2
/* Line 1787 of yacc.c  */
#line 1488 "glsl_parser.yy"
d4798 1
a4798 1
      (yyval.type_qualifier).flags.q.attribute = 1;
d4800 1
d4804 1
a4804 2
/* Line 1787 of yacc.c  */
#line 1493 "glsl_parser.yy"
d4807 1
a4807 1
      (yyval.type_qualifier).flags.q.varying = 1;
d4809 1
d4813 1
a4813 2
/* Line 1787 of yacc.c  */
#line 1498 "glsl_parser.yy"
d4816 1
a4816 1
      (yyval.type_qualifier).flags.q.in = 1;
d4818 1
d4822 1
a4822 2
/* Line 1787 of yacc.c  */
#line 1503 "glsl_parser.yy"
d4825 1
a4825 1
      (yyval.type_qualifier).flags.q.out = 1;
d4827 1
d4831 1
a4831 2
/* Line 1787 of yacc.c  */
#line 1508 "glsl_parser.yy"
d4833 1
d4835 10
a4844 1
      (yyval.type_qualifier).flags.q.uniform = 1;
d4846 1
d4850 1
a4850 2
/* Line 1787 of yacc.c  */
#line 1517 "glsl_parser.yy"
d4852 2
a4853 3
      (yyval.type_specifier) = (yyvsp[(1) - (3)].type_specifier);
      (yyval.type_specifier)->is_array = true;
      (yyval.type_specifier)->array_size = NULL;
d4855 1
d4859 1
a4859 2
/* Line 1787 of yacc.c  */
#line 1523 "glsl_parser.yy"
d4861 3
a4863 3
      (yyval.type_specifier) = (yyvsp[(1) - (4)].type_specifier);
      (yyval.type_specifier)->is_array = true;
      (yyval.type_specifier)->array_size = (yyvsp[(3) - (4)].expression);
d4865 1
d4869 1
a4869 2
/* Line 1787 of yacc.c  */
#line 1532 "glsl_parser.yy"
d4872 2
a4873 2
      (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[(1) - (1)].identifier));
      (yyval.type_specifier)->set_location(yylloc);
d4875 1
d4879 54
a4932 2
/* Line 1787 of yacc.c  */
#line 1538 "glsl_parser.yy"
d4935 2
a4936 2
      (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[(1) - (1)].struct_specifier));
      (yyval.type_specifier)->set_location(yylloc);
d4938 1
d4941 2
a4942 3
  case 187:
/* Line 1787 of yacc.c  */
#line 1544 "glsl_parser.yy"
d4945 2
a4946 2
      (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[(1) - (1)].identifier));
      (yyval.type_specifier)->set_location(yylloc);
d4948 1
d4951 2
a4952 3
  case 188:
/* Line 1787 of yacc.c  */
#line 1552 "glsl_parser.yy"
d4954 1
d4957 2
a4958 3
  case 189:
/* Line 1787 of yacc.c  */
#line 1553 "glsl_parser.yy"
d4960 1
d4963 2
a4964 3
  case 190:
/* Line 1787 of yacc.c  */
#line 1554 "glsl_parser.yy"
d4966 1
d4969 2
a4970 3
  case 191:
/* Line 1787 of yacc.c  */
#line 1555 "glsl_parser.yy"
d4972 1
d4975 2
a4976 3
  case 192:
/* Line 1787 of yacc.c  */
#line 1556 "glsl_parser.yy"
d4978 1
d4981 2
a4982 3
  case 193:
/* Line 1787 of yacc.c  */
#line 1557 "glsl_parser.yy"
d4984 1
d4987 2
a4988 3
  case 194:
/* Line 1787 of yacc.c  */
#line 1558 "glsl_parser.yy"
d4990 1
d4993 2
a4994 3
  case 195:
/* Line 1787 of yacc.c  */
#line 1559 "glsl_parser.yy"
d4996 1
d4999 2
a5000 3
  case 196:
/* Line 1787 of yacc.c  */
#line 1560 "glsl_parser.yy"
d5002 1
d5005 2
a5006 3
  case 197:
/* Line 1787 of yacc.c  */
#line 1561 "glsl_parser.yy"
d5008 1
d5011 2
a5012 3
  case 198:
/* Line 1787 of yacc.c  */
#line 1562 "glsl_parser.yy"
d5014 1
d5017 2
a5018 3
  case 199:
/* Line 1787 of yacc.c  */
#line 1563 "glsl_parser.yy"
d5020 1
d5023 2
a5024 3
  case 200:
/* Line 1787 of yacc.c  */
#line 1564 "glsl_parser.yy"
d5026 1
d5029 2
a5030 3
  case 201:
/* Line 1787 of yacc.c  */
#line 1565 "glsl_parser.yy"
d5032 1
d5035 2
a5036 3
  case 202:
/* Line 1787 of yacc.c  */
#line 1566 "glsl_parser.yy"
d5038 1
d5041 2
a5042 3
  case 203:
/* Line 1787 of yacc.c  */
#line 1567 "glsl_parser.yy"
d5044 1
d5047 2
a5048 3
  case 204:
/* Line 1787 of yacc.c  */
#line 1568 "glsl_parser.yy"
d5050 1
d5053 2
a5054 3
  case 205:
/* Line 1787 of yacc.c  */
#line 1569 "glsl_parser.yy"
d5056 1
d5059 2
a5060 3
  case 206:
/* Line 1787 of yacc.c  */
#line 1570 "glsl_parser.yy"
d5062 1
d5065 2
a5066 3
  case 207:
/* Line 1787 of yacc.c  */
#line 1571 "glsl_parser.yy"
d5068 1
d5071 2
a5072 3
  case 208:
/* Line 1787 of yacc.c  */
#line 1572 "glsl_parser.yy"
d5074 1
d5077 2
a5078 3
  case 209:
/* Line 1787 of yacc.c  */
#line 1573 "glsl_parser.yy"
d5080 1
d5083 2
a5084 3
  case 210:
/* Line 1787 of yacc.c  */
#line 1574 "glsl_parser.yy"
d5086 1
d5089 2
a5090 3
  case 211:
/* Line 1787 of yacc.c  */
#line 1575 "glsl_parser.yy"
d5092 1
d5095 2
a5096 3
  case 212:
/* Line 1787 of yacc.c  */
#line 1576 "glsl_parser.yy"
d5098 205
d5305 4
a5308 4
  case 213:
/* Line 1787 of yacc.c  */
#line 1577 "glsl_parser.yy"
    { (yyval.identifier) = "mat4"; }
d5311 4
a5314 4
  case 214:
/* Line 1787 of yacc.c  */
#line 1578 "glsl_parser.yy"
    { (yyval.identifier) = "sampler1D"; }
d5317 4
a5320 4
  case 215:
/* Line 1787 of yacc.c  */
#line 1579 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2D"; }
d5323 4
a5326 4
  case 216:
/* Line 1787 of yacc.c  */
#line 1580 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2DRect"; }
d5329 4
a5332 4
  case 217:
/* Line 1787 of yacc.c  */
#line 1581 "glsl_parser.yy"
    { (yyval.identifier) = "sampler3D"; }
d5335 4
a5338 4
  case 218:
/* Line 1787 of yacc.c  */
#line 1582 "glsl_parser.yy"
    { (yyval.identifier) = "samplerCube"; }
d5341 4
a5344 4
  case 219:
/* Line 1787 of yacc.c  */
#line 1583 "glsl_parser.yy"
    { (yyval.identifier) = "samplerExternalOES"; }
d5347 4
a5350 4
  case 220:
/* Line 1787 of yacc.c  */
#line 1584 "glsl_parser.yy"
    { (yyval.identifier) = "sampler1DShadow"; }
d5353 4
a5356 4
  case 221:
/* Line 1787 of yacc.c  */
#line 1585 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2DShadow"; }
d5359 4
a5362 4
  case 222:
/* Line 1787 of yacc.c  */
#line 1586 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2DRectShadow"; }
d5365 4
a5368 4
  case 223:
/* Line 1787 of yacc.c  */
#line 1587 "glsl_parser.yy"
    { (yyval.identifier) = "samplerCubeShadow"; }
d5371 4
a5374 4
  case 224:
/* Line 1787 of yacc.c  */
#line 1588 "glsl_parser.yy"
    { (yyval.identifier) = "sampler1DArray"; }
d5377 4
a5380 4
  case 225:
/* Line 1787 of yacc.c  */
#line 1589 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2DArray"; }
d5383 4
a5386 4
  case 226:
/* Line 1787 of yacc.c  */
#line 1590 "glsl_parser.yy"
    { (yyval.identifier) = "sampler1DArrayShadow"; }
d5389 4
a5392 4
  case 227:
/* Line 1787 of yacc.c  */
#line 1591 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2DArrayShadow"; }
d5395 4
a5398 4
  case 228:
/* Line 1787 of yacc.c  */
#line 1592 "glsl_parser.yy"
    { (yyval.identifier) = "samplerBuffer"; }
d5401 4
a5404 4
  case 229:
/* Line 1787 of yacc.c  */
#line 1593 "glsl_parser.yy"
    { (yyval.identifier) = "samplerCubeArray"; }
d5407 4
a5410 4
  case 230:
/* Line 1787 of yacc.c  */
#line 1594 "glsl_parser.yy"
    { (yyval.identifier) = "samplerCubeArrayShadow"; }
d5413 4
a5416 4
  case 231:
/* Line 1787 of yacc.c  */
#line 1595 "glsl_parser.yy"
    { (yyval.identifier) = "isampler1D"; }
d5419 4
a5422 4
  case 232:
/* Line 1787 of yacc.c  */
#line 1596 "glsl_parser.yy"
    { (yyval.identifier) = "isampler2D"; }
d5425 4
a5428 4
  case 233:
/* Line 1787 of yacc.c  */
#line 1597 "glsl_parser.yy"
    { (yyval.identifier) = "isampler2DRect"; }
d5431 4
a5434 4
  case 234:
/* Line 1787 of yacc.c  */
#line 1598 "glsl_parser.yy"
    { (yyval.identifier) = "isampler3D"; }
d5437 4
a5440 4
  case 235:
/* Line 1787 of yacc.c  */
#line 1599 "glsl_parser.yy"
    { (yyval.identifier) = "isamplerCube"; }
d5443 4
a5446 4
  case 236:
/* Line 1787 of yacc.c  */
#line 1600 "glsl_parser.yy"
    { (yyval.identifier) = "isampler1DArray"; }
d5449 4
a5452 4
  case 237:
/* Line 1787 of yacc.c  */
#line 1601 "glsl_parser.yy"
    { (yyval.identifier) = "isampler2DArray"; }
d5455 4
a5458 4
  case 238:
/* Line 1787 of yacc.c  */
#line 1602 "glsl_parser.yy"
    { (yyval.identifier) = "isamplerBuffer"; }
d5461 4
a5464 4
  case 239:
/* Line 1787 of yacc.c  */
#line 1603 "glsl_parser.yy"
    { (yyval.identifier) = "isamplerCubeArray"; }
d5467 4
a5470 4
  case 240:
/* Line 1787 of yacc.c  */
#line 1604 "glsl_parser.yy"
    { (yyval.identifier) = "usampler1D"; }
d5473 4
a5476 4
  case 241:
/* Line 1787 of yacc.c  */
#line 1605 "glsl_parser.yy"
    { (yyval.identifier) = "usampler2D"; }
d5479 4
a5482 4
  case 242:
/* Line 1787 of yacc.c  */
#line 1606 "glsl_parser.yy"
    { (yyval.identifier) = "usampler2DRect"; }
d5485 4
a5488 4
  case 243:
/* Line 1787 of yacc.c  */
#line 1607 "glsl_parser.yy"
    { (yyval.identifier) = "usampler3D"; }
d5491 4
a5494 4
  case 244:
/* Line 1787 of yacc.c  */
#line 1608 "glsl_parser.yy"
    { (yyval.identifier) = "usamplerCube"; }
d5497 4
a5500 4
  case 245:
/* Line 1787 of yacc.c  */
#line 1609 "glsl_parser.yy"
    { (yyval.identifier) = "usampler1DArray"; }
d5503 4
a5506 4
  case 246:
/* Line 1787 of yacc.c  */
#line 1610 "glsl_parser.yy"
    { (yyval.identifier) = "usampler2DArray"; }
d5509 4
a5512 4
  case 247:
/* Line 1787 of yacc.c  */
#line 1611 "glsl_parser.yy"
    { (yyval.identifier) = "usamplerBuffer"; }
d5515 4
a5518 4
  case 248:
/* Line 1787 of yacc.c  */
#line 1612 "glsl_parser.yy"
    { (yyval.identifier) = "usamplerCubeArray"; }
d5521 4
a5524 4
  case 249:
/* Line 1787 of yacc.c  */
#line 1613 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2DMS"; }
d5527 4
a5530 4
  case 250:
/* Line 1787 of yacc.c  */
#line 1614 "glsl_parser.yy"
    { (yyval.identifier) = "isampler2DMS"; }
d5533 4
a5536 4
  case 251:
/* Line 1787 of yacc.c  */
#line 1615 "glsl_parser.yy"
    { (yyval.identifier) = "usampler2DMS"; }
d5539 4
a5542 4
  case 252:
/* Line 1787 of yacc.c  */
#line 1616 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2DMSArray"; }
d5545 4
a5548 4
  case 253:
/* Line 1787 of yacc.c  */
#line 1617 "glsl_parser.yy"
    { (yyval.identifier) = "isampler2DMSArray"; }
d5551 4
a5554 4
  case 254:
/* Line 1787 of yacc.c  */
#line 1618 "glsl_parser.yy"
    { (yyval.identifier) = "usampler2DMSArray"; }
d5557 2
a5558 3
  case 255:
/* Line 1787 of yacc.c  */
#line 1623 "glsl_parser.yy"
d5560 1
a5560 1
      state->check_precision_qualifiers_allowed(&(yylsp[(1) - (1)]));
d5563 1
d5566 2
a5567 3
  case 256:
/* Line 1787 of yacc.c  */
#line 1628 "glsl_parser.yy"
d5569 1
a5569 1
      state->check_precision_qualifiers_allowed(&(yylsp[(1) - (1)]));
d5572 1
d5575 2
a5576 3
  case 257:
/* Line 1787 of yacc.c  */
#line 1633 "glsl_parser.yy"
d5578 1
a5578 1
      state->check_precision_qualifiers_allowed(&(yylsp[(1) - (1)]));
d5581 1
d5584 2
a5585 3
  case 258:
/* Line 1787 of yacc.c  */
#line 1641 "glsl_parser.yy"
d5588 3
a5590 4
      (yyval.struct_specifier) = new(ctx) ast_struct_specifier((yyvsp[(2) - (5)].identifier), (yyvsp[(4) - (5)].declarator_list));
      (yyval.struct_specifier)->set_location(yylloc);
      state->symbols->add_type((yyvsp[(2) - (5)].identifier), glsl_type::void_type);
      state->symbols->add_type_ast((yyvsp[(2) - (5)].identifier), new(ctx) ast_type_specifier((yyval.struct_specifier)));
d5592 1
d5595 2
a5596 3
  case 259:
/* Line 1787 of yacc.c  */
#line 1649 "glsl_parser.yy"
d5599 2
a5600 2
      (yyval.struct_specifier) = new(ctx) ast_struct_specifier(NULL, (yyvsp[(3) - (4)].declarator_list));
      (yyval.struct_specifier)->set_location(yylloc);
d5602 1
d5605 2
a5606 3
  case 260:
/* Line 1787 of yacc.c  */
#line 1658 "glsl_parser.yy"
d5608 2
a5609 2
      (yyval.declarator_list) = (yyvsp[(1) - (1)].declarator_list);
      (yyvsp[(1) - (1)].declarator_list)->link.self_link();
d5611 1
d5614 2
a5615 3
  case 261:
/* Line 1787 of yacc.c  */
#line 1663 "glsl_parser.yy"
d5617 2
a5618 2
      (yyval.declarator_list) = (yyvsp[(1) - (2)].declarator_list);
      (yyval.declarator_list)->link.insert_before(& (yyvsp[(2) - (2)].declarator_list)->link);
d5620 1
d5623 2
a5624 3
  case 262:
/* Line 1787 of yacc.c  */
#line 1671 "glsl_parser.yy"
d5627 2
a5628 2
      ast_fully_specified_type *const type = (yyvsp[(1) - (3)].fully_specified_type);
      type->set_location(yylloc);
d5631 1
a5631 1
         _mesa_glsl_error(&(yylsp[(1) - (3)]), state,
d5636 1
a5636 1
      (yyval.declarator_list)->set_location(yylloc);
d5638 1
a5638 1
      (yyval.declarator_list)->declarations.push_degenerate_list_at_head(& (yyvsp[(2) - (3)].declaration)->link);
d5640 1
d5643 2
a5644 3
  case 263:
/* Line 1787 of yacc.c  */
#line 1690 "glsl_parser.yy"
d5646 2
a5647 2
      (yyval.declaration) = (yyvsp[(1) - (1)].declaration);
      (yyvsp[(1) - (1)].declaration)->link.self_link();
d5649 1
d5652 2
a5653 3
  case 264:
/* Line 1787 of yacc.c  */
#line 1695 "glsl_parser.yy"
d5655 2
a5656 2
      (yyval.declaration) = (yyvsp[(1) - (3)].declaration);
      (yyval.declaration)->link.insert_before(& (yyvsp[(3) - (3)].declaration)->link);
d5658 1
d5661 2
a5662 3
  case 265:
/* Line 1787 of yacc.c  */
#line 1703 "glsl_parser.yy"
d5665 2
a5666 2
      (yyval.declaration) = new(ctx) ast_declaration((yyvsp[(1) - (1)].identifier), false, NULL, NULL);
      (yyval.declaration)->set_location(yylloc);
d5668 1
d5671 2
a5672 3
  case 266:
/* Line 1787 of yacc.c  */
#line 1709 "glsl_parser.yy"
d5675 2
a5676 2
      (yyval.declaration) = new(ctx) ast_declaration((yyvsp[(1) - (4)].identifier), true, (yyvsp[(3) - (4)].expression), NULL);
      (yyval.declaration)->set_location(yylloc);
d5678 1
d5681 2
a5682 3
  case 268:
/* Line 1787 of yacc.c  */
#line 1719 "glsl_parser.yy"
d5684 1
a5684 1
      (yyval.expression) = (yyvsp[(2) - (3)].expression);
d5686 1
d5689 2
a5690 3
  case 269:
/* Line 1787 of yacc.c  */
#line 1723 "glsl_parser.yy"
d5692 1
a5692 1
      (yyval.expression) = (yyvsp[(2) - (4)].expression);
d5694 1
d5697 2
a5698 3
  case 270:
/* Line 1787 of yacc.c  */
#line 1730 "glsl_parser.yy"
d5702 2
a5703 2
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->expressions.push_tail(& (yyvsp[(1) - (1)].expression)->link);
d5705 1
d5708 2
a5709 3
  case 271:
/* Line 1787 of yacc.c  */
#line 1737 "glsl_parser.yy"
d5711 1
a5711 1
      (yyvsp[(1) - (3)].expression)->expressions.push_tail(& (yyvsp[(3) - (3)].expression)->link);
d5713 1
d5716 4
a5719 4
  case 273:
/* Line 1787 of yacc.c  */
#line 1749 "glsl_parser.yy"
    { (yyval.node) = (ast_node *) (yyvsp[(1) - (1)].compound_statement); }
d5722 2
a5723 3
  case 281:
/* Line 1787 of yacc.c  */
#line 1764 "glsl_parser.yy"
d5727 1
a5727 1
      (yyval.compound_statement)->set_location(yylloc);
d5729 1
d5732 2
a5733 3
  case 282:
/* Line 1787 of yacc.c  */
#line 1770 "glsl_parser.yy"
d5737 1
d5740 2
a5741 3
  case 283:
/* Line 1787 of yacc.c  */
#line 1774 "glsl_parser.yy"
d5744 2
a5745 2
      (yyval.compound_statement) = new(ctx) ast_compound_statement(true, (yyvsp[(3) - (4)].node));
      (yyval.compound_statement)->set_location(yylloc);
d5748 1
d5751 4
a5754 4
  case 284:
/* Line 1787 of yacc.c  */
#line 1783 "glsl_parser.yy"
    { (yyval.node) = (ast_node *) (yyvsp[(1) - (1)].compound_statement); }
d5757 2
a5758 3
  case 286:
/* Line 1787 of yacc.c  */
#line 1789 "glsl_parser.yy"
d5762 1
a5762 1
      (yyval.compound_statement)->set_location(yylloc);
d5764 1
d5767 2
a5768 3
  case 287:
/* Line 1787 of yacc.c  */
#line 1795 "glsl_parser.yy"
d5771 2
a5772 2
      (yyval.compound_statement) = new(ctx) ast_compound_statement(false, (yyvsp[(2) - (3)].node));
      (yyval.compound_statement)->set_location(yylloc);
d5774 1
d5777 2
a5778 3
  case 288:
/* Line 1787 of yacc.c  */
#line 1804 "glsl_parser.yy"
d5780 3
a5782 3
      if ((yyvsp[(1) - (1)].node) == NULL) {
         _mesa_glsl_error(& (yylsp[(1) - (1)]), state, "<nil> statement\n");
         assert((yyvsp[(1) - (1)].node) != NULL);
d5785 1
a5785 1
      (yyval.node) = (yyvsp[(1) - (1)].node);
d5788 1
d5791 2
a5792 3
  case 289:
/* Line 1787 of yacc.c  */
#line 1814 "glsl_parser.yy"
d5794 3
a5796 3
      if ((yyvsp[(2) - (2)].node) == NULL) {
         _mesa_glsl_error(& (yylsp[(2) - (2)]), state, "<nil> statement\n");
         assert((yyvsp[(2) - (2)].node) != NULL);
d5798 2
a5799 2
      (yyval.node) = (yyvsp[(1) - (2)].node);
      (yyval.node)->link.insert_before(& (yyvsp[(2) - (2)].node)->link);
d5801 1
d5804 2
a5805 3
  case 290:
/* Line 1787 of yacc.c  */
#line 1826 "glsl_parser.yy"
d5809 1
a5809 1
      (yyval.node)->set_location(yylloc);
d5811 1
d5814 2
a5815 3
  case 291:
/* Line 1787 of yacc.c  */
#line 1832 "glsl_parser.yy"
d5818 2
a5819 2
      (yyval.node) = new(ctx) ast_expression_statement((yyvsp[(1) - (2)].expression));
      (yyval.node)->set_location(yylloc);
d5821 1
d5824 2
a5825 3
  case 292:
/* Line 1787 of yacc.c  */
#line 1841 "glsl_parser.yy"
d5827 3
a5829 3
      (yyval.node) = new(state) ast_selection_statement((yyvsp[(3) - (5)].expression), (yyvsp[(5) - (5)].selection_rest_statement).then_statement,
                                              (yyvsp[(5) - (5)].selection_rest_statement).else_statement);
      (yyval.node)->set_location(yylloc);
d5831 1
d5834 2
a5835 3
  case 293:
/* Line 1787 of yacc.c  */
#line 1850 "glsl_parser.yy"
d5837 2
a5838 2
      (yyval.selection_rest_statement).then_statement = (yyvsp[(1) - (3)].node);
      (yyval.selection_rest_statement).else_statement = (yyvsp[(3) - (3)].node);
d5840 1
d5843 2
a5844 3
  case 294:
/* Line 1787 of yacc.c  */
#line 1855 "glsl_parser.yy"
d5846 1
a5846 1
      (yyval.selection_rest_statement).then_statement = (yyvsp[(1) - (1)].node);
d5849 1
d5852 2
a5853 3
  case 295:
/* Line 1787 of yacc.c  */
#line 1863 "glsl_parser.yy"
d5855 1
a5855 1
      (yyval.node) = (ast_node *) (yyvsp[(1) - (1)].expression);
d5857 1
d5860 2
a5861 3
  case 296:
/* Line 1787 of yacc.c  */
#line 1867 "glsl_parser.yy"
d5864 4
a5867 4
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (4)].identifier), false, NULL, (yyvsp[(4) - (4)].expression));
      ast_declarator_list *declarator = new(ctx) ast_declarator_list((yyvsp[(1) - (4)].fully_specified_type));
      decl->set_location(yylloc);
      declarator->set_location(yylloc);
d5872 1
d5875 2
a5876 3
  case 297:
/* Line 1787 of yacc.c  */
#line 1885 "glsl_parser.yy"
d5878 2
a5879 2
      (yyval.node) = new(state) ast_switch_statement((yyvsp[(3) - (5)].expression), (yyvsp[(5) - (5)].switch_body));
      (yyval.node)->set_location(yylloc);
d5881 1
d5884 2
a5885 3
  case 298:
/* Line 1787 of yacc.c  */
#line 1893 "glsl_parser.yy"
d5888 1
a5888 1
      (yyval.switch_body)->set_location(yylloc);
d5890 1
d5893 2
a5894 3
  case 299:
/* Line 1787 of yacc.c  */
#line 1898 "glsl_parser.yy"
d5896 2
a5897 2
      (yyval.switch_body) = new(state) ast_switch_body((yyvsp[(2) - (3)].case_statement_list));
      (yyval.switch_body)->set_location(yylloc);
d5899 1
d5902 2
a5903 3
  case 300:
/* Line 1787 of yacc.c  */
#line 1906 "glsl_parser.yy"
d5905 2
a5906 2
      (yyval.case_label) = new(state) ast_case_label((yyvsp[(2) - (3)].expression));
      (yyval.case_label)->set_location(yylloc);
d5908 1
d5911 2
a5912 3
  case 301:
/* Line 1787 of yacc.c  */
#line 1911 "glsl_parser.yy"
d5915 1
a5915 1
      (yyval.case_label)->set_location(yylloc);
d5917 1
d5920 2
a5921 3
  case 302:
/* Line 1787 of yacc.c  */
#line 1919 "glsl_parser.yy"
d5925 1
a5925 1
      labels->labels.push_tail(& (yyvsp[(1) - (1)].case_label)->link);
d5927 1
a5927 1
      (yyval.case_label_list)->set_location(yylloc);
d5929 1
d5932 2
a5933 3
  case 303:
/* Line 1787 of yacc.c  */
#line 1927 "glsl_parser.yy"
d5935 2
a5936 2
      (yyval.case_label_list) = (yyvsp[(1) - (2)].case_label_list);
      (yyval.case_label_list)->labels.push_tail(& (yyvsp[(2) - (2)].case_label)->link);
d5938 1
d5941 2
a5942 3
  case 304:
/* Line 1787 of yacc.c  */
#line 1935 "glsl_parser.yy"
d5944 2
a5945 2
      ast_case_statement *stmts = new(state) ast_case_statement((yyvsp[(1) - (2)].case_label_list));
      stmts->set_location(yylloc);
d5947 1
a5947 1
      stmts->stmts.push_tail(& (yyvsp[(2) - (2)].node)->link);
d5950 1
d5953 2
a5954 3
  case 305:
/* Line 1787 of yacc.c  */
#line 1943 "glsl_parser.yy"
d5956 2
a5957 2
      (yyval.case_statement) = (yyvsp[(1) - (2)].case_statement);
      (yyval.case_statement)->stmts.push_tail(& (yyvsp[(2) - (2)].node)->link);
d5959 1
d5962 2
a5963 3
  case 306:
/* Line 1787 of yacc.c  */
#line 1951 "glsl_parser.yy"
d5966 1
a5966 1
      cases->set_location(yylloc);
d5968 1
a5968 1
      cases->cases.push_tail(& (yyvsp[(1) - (1)].case_statement)->link);
d5971 1
d5974 2
a5975 3
  case 307:
/* Line 1787 of yacc.c  */
#line 1959 "glsl_parser.yy"
d5977 2
a5978 2
      (yyval.case_statement_list) = (yyvsp[(1) - (2)].case_statement_list);
      (yyval.case_statement_list)->cases.push_tail(& (yyvsp[(2) - (2)].case_statement)->link);
d5980 1
d5983 2
a5984 3
  case 308:
/* Line 1787 of yacc.c  */
#line 1967 "glsl_parser.yy"
d5988 2
a5989 2
                                            NULL, (yyvsp[(3) - (5)].node), NULL, (yyvsp[(5) - (5)].node));
      (yyval.node)->set_location(yylloc);
d5991 1
d5994 2
a5995 3
  case 309:
/* Line 1787 of yacc.c  */
#line 1974 "glsl_parser.yy"
d5999 2
a6000 2
                                            NULL, (yyvsp[(5) - (7)].expression), NULL, (yyvsp[(2) - (7)].node));
      (yyval.node)->set_location(yylloc);
d6002 1
d6005 2
a6006 3
  case 310:
/* Line 1787 of yacc.c  */
#line 1981 "glsl_parser.yy"
d6010 2
a6011 2
                                            (yyvsp[(3) - (6)].node), (yyvsp[(4) - (6)].for_rest_statement).cond, (yyvsp[(4) - (6)].for_rest_statement).rest, (yyvsp[(6) - (6)].node));
      (yyval.node)->set_location(yylloc);
d6013 1
d6016 2
a6017 3
  case 314:
/* Line 1787 of yacc.c  */
#line 1997 "glsl_parser.yy"
d6021 1
d6024 2
a6025 3
  case 315:
/* Line 1787 of yacc.c  */
#line 2004 "glsl_parser.yy"
d6027 1
a6027 1
      (yyval.for_rest_statement).cond = (yyvsp[(1) - (2)].node);
d6030 1
d6033 2
a6034 3
  case 316:
/* Line 1787 of yacc.c  */
#line 2009 "glsl_parser.yy"
d6036 2
a6037 2
      (yyval.for_rest_statement).cond = (yyvsp[(1) - (3)].node);
      (yyval.for_rest_statement).rest = (yyvsp[(3) - (3)].expression);
d6039 1
d6042 2
a6043 3
  case 317:
/* Line 1787 of yacc.c  */
#line 2018 "glsl_parser.yy"
d6047 1
a6047 1
      (yyval.node)->set_location(yylloc);
d6049 1
d6052 2
a6053 3
  case 318:
/* Line 1787 of yacc.c  */
#line 2024 "glsl_parser.yy"
d6057 1
a6057 1
      (yyval.node)->set_location(yylloc);
d6059 1
d6062 2
a6063 3
  case 319:
/* Line 1787 of yacc.c  */
#line 2030 "glsl_parser.yy"
d6067 1
a6067 1
      (yyval.node)->set_location(yylloc);
d6069 1
d6072 2
a6073 3
  case 320:
/* Line 1787 of yacc.c  */
#line 2036 "glsl_parser.yy"
d6076 2
a6077 2
      (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_return, (yyvsp[(2) - (3)].expression));
      (yyval.node)->set_location(yylloc);
d6079 1
d6082 2
a6083 3
  case 321:
/* Line 1787 of yacc.c  */
#line 2042 "glsl_parser.yy"
d6087 1
a6087 1
      (yyval.node)->set_location(yylloc);
d6089 1
d6092 4
a6095 4
  case 322:
/* Line 1787 of yacc.c  */
#line 2050 "glsl_parser.yy"
    { (yyval.node) = (yyvsp[(1) - (1)].function_definition); }
d6098 4
a6101 4
  case 323:
/* Line 1787 of yacc.c  */
#line 2051 "glsl_parser.yy"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d6104 2
a6105 3
  case 324:
/* Line 1787 of yacc.c  */
#line 2052 "glsl_parser.yy"
d6107 1
d6110 4
a6113 4
  case 325:
/* Line 1787 of yacc.c  */
#line 2053 "glsl_parser.yy"
    { (yyval.node) = NULL; }
d6116 2
a6117 3
  case 326:
/* Line 1787 of yacc.c  */
#line 2058 "glsl_parser.yy"
d6121 3
a6123 3
      (yyval.function_definition)->set_location(yylloc);
      (yyval.function_definition)->prototype = (yyvsp[(1) - (2)].function);
      (yyval.function_definition)->body = (yyvsp[(2) - (2)].compound_statement);
d6127 1
d6130 2
a6131 3
  case 327:
/* Line 1787 of yacc.c  */
#line 2072 "glsl_parser.yy"
d6133 1
a6133 1
      (yyval.node) = (yyvsp[(1) - (1)].interface_block);
d6135 1
d6138 2
a6139 3
  case 328:
/* Line 1787 of yacc.c  */
#line 2076 "glsl_parser.yy"
d6141 2
a6142 2
      ast_interface_block *block = (yyvsp[(2) - (2)].interface_block);
      if (!block->layout.merge_qualifier(& (yylsp[(1) - (2)]), state, (yyvsp[(1) - (2)].type_qualifier))) {
d6147 1
d6150 2
a6151 3
  case 329:
/* Line 1787 of yacc.c  */
#line 2087 "glsl_parser.yy"
d6153 1
a6153 1
      ast_interface_block *const block = (yyvsp[(6) - (7)].interface_block);
d6155 2
a6156 2
      block->block_name = (yyvsp[(2) - (7)].identifier);
      block->declarations.push_degenerate_list_at_head(& (yyvsp[(4) - (7)].declarator_list)->link);
d6158 3
a6160 3
      if ((yyvsp[(1) - (7)].type_qualifier).flags.q.uniform) {
         if (!state->ARB_uniform_buffer_object_enable) {
            _mesa_glsl_error(& (yylsp[(1) - (7)]), state,
d6162 1
a6162 1
                             "required for defining uniform blocks\n");
d6164 1
a6164 1
            _mesa_glsl_warning(& (yylsp[(1) - (7)]), state,
d6166 1
a6166 1
                               "required for defining uniform blocks\n");
d6170 1
a6170 1
            _mesa_glsl_error(& (yylsp[(1) - (7)]), state,
d6172 1
a6172 1
                             "interface blocks.\n");
d6180 2
a6181 2
      if ((state->target == vertex_shader) && (yyvsp[(1) - (7)].type_qualifier).flags.q.in) {
         _mesa_glsl_error(& (yylsp[(1) - (7)]), state,
d6183 3
a6185 3
                          "a vertex shader\n");
      } else if ((state->target == fragment_shader) && (yyvsp[(1) - (7)].type_qualifier).flags.q.out) {
         _mesa_glsl_error(& (yylsp[(1) - (7)]), state,
d6187 1
a6187 1
                          "a fragment shader\n");
d6195 1
a6195 1
         state->check_version(150, 300, & (yylsp[(1) - (7)]), "interface blocks with "
d6199 1
a6199 1
      unsigned interface_type_mask;
d6215 1
a6215 1
       unsigned block_interface_qualifier = (yyvsp[(1) - (7)].type_qualifier).flags.i;
d6236 1
a6236 1
            _mesa_glsl_error(& (yylsp[(1) - (7)]), state,
d6239 1
a6239 1
                             "the interface block\n");
d6245 1
d6248 2
a6249 3
  case 330:
/* Line 1787 of yacc.c  */
#line 2184 "glsl_parser.yy"
d6254 1
d6257 2
a6258 3
  case 331:
/* Line 1787 of yacc.c  */
#line 2189 "glsl_parser.yy"
d6263 1
d6266 2
a6267 3
  case 332:
/* Line 1787 of yacc.c  */
#line 2194 "glsl_parser.yy"
d6272 1
d6275 2
a6276 3
  case 333:
/* Line 1787 of yacc.c  */
#line 2202 "glsl_parser.yy"
d6281 1
d6284 2
a6285 12
  case 334:
/* Line 1787 of yacc.c  */
#line 2207 "glsl_parser.yy"
    {
      (yyval.interface_block) = new(state) ast_interface_block(*state->default_uniform_qualifier,
                                          (yyvsp[(1) - (1)].identifier), NULL);
   }
    break;

  case 335:
/* Line 1787 of yacc.c  */
#line 2212 "glsl_parser.yy"
d6288 2
a6289 1
                                          (yyvsp[(1) - (4)].identifier), (yyvsp[(3) - (4)].expression));
d6291 1
d6294 2
a6295 3
  case 336:
/* Line 1787 of yacc.c  */
#line 2217 "glsl_parser.yy"
a6296 3
      _mesa_glsl_error(& (yylsp[(1) - (3)]), state,
                       "instance block arrays must be explicitly sized\n");

d6298 2
a6299 1
                                          (yyvsp[(1) - (3)].identifier), NULL);
d6301 1
d6304 2
a6305 3
  case 337:
/* Line 1787 of yacc.c  */
#line 2228 "glsl_parser.yy"
d6307 2
a6308 2
      (yyval.declarator_list) = (yyvsp[(1) - (1)].declarator_list);
      (yyvsp[(1) - (1)].declarator_list)->link.self_link();
d6310 1
d6313 2
a6314 3
  case 338:
/* Line 1787 of yacc.c  */
#line 2233 "glsl_parser.yy"
d6316 2
a6317 2
      (yyval.declarator_list) = (yyvsp[(1) - (2)].declarator_list);
      (yyvsp[(2) - (2)].declarator_list)->link.insert_before(& (yyval.declarator_list)->link);
d6319 1
d6322 2
a6323 3
  case 339:
/* Line 1787 of yacc.c  */
#line 2241 "glsl_parser.yy"
d6326 2
a6327 2
      ast_fully_specified_type *type = (yyvsp[(1) - (3)].fully_specified_type);
      type->set_location(yylloc);
d6330 1
a6330 1
         _mesa_glsl_error(& (yylsp[(1) - (3)]), state,
d6332 1
a6332 1
                          "interface block member\n");
d6334 1
a6334 1
         _mesa_glsl_error(& (yylsp[(1) - (3)]), state,
d6336 1
a6336 1
                          "interface block member\n");
d6340 6
a6345 1
      (yyval.declarator_list)->set_location(yylloc);
d6347 7
a6353 1
      (yyval.declarator_list)->declarations.push_degenerate_list_at_head(& (yyvsp[(2) - (3)].declaration)->link);
d6355 1
d6358 2
a6359 3
  case 340:
/* Line 1787 of yacc.c  */
#line 2265 "glsl_parser.yy"
d6361 2
a6362 1
      if (!state->default_uniform_qualifier->merge_qualifier(& (yylsp[(1) - (3)]), state, (yyvsp[(1) - (3)].type_qualifier))) {
d6366 30
d6399 1
a6399 2
/* Line 1787 of yacc.c  */
#line 5823 "glsl_parser.cpp"
d6422 1
a6422 1
  /* Now `shift' the result of the reduction.  Determine what state
d6437 3
a6439 3
/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
d6490 1
a6490 1
	 error, discard it.  */
d6493 5
a6497 5
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
d6499 5
a6503 5
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc, state);
	  yychar = YYEMPTY;
	}
d6523 1
a6523 1
  /* Do not reclaim the symbols of the rule which action triggered
d6536 1
a6536 1
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */
d6542 9
a6550 9
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}
d6554 1
a6554 1
	YYABORT;
d6558 1
a6558 1
		  yystos[yystate], yyvsp, yylsp, state);
d6614 1
a6614 1
  /* Do not reclaim the symbols of the rule which action triggered
d6621 1
a6621 1
		  yystos[*yyssp], yyvsp, yylsp, state);
d6632 1
a6632 2
  /* Make sure YYID is used.  */
  return YYID (yyresult);
a6633 2


@


1.4
log
@Merge Mesa 9.2.0
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.6.1.  */
d5 1
a5 1
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
d47 1
a47 1
#define YYBISON_VERSION "2.6.1"
d73 1
a73 1
/* Line 336 of yacc.c  */
d121 1
a121 1
/* Line 336 of yacc.c  */
d142 2
a143 2
#ifndef _MESA_GLSL_SRC_GLSL_GLSL_PARSER_H
# define _MESA_GLSL_SRC_GLSL_GLSL_PARSER_H
d383 1
a383 1
/* Line 350 of yacc.c  */
d421 1
a421 1
/* Line 350 of yacc.c  */
d457 1
a457 1
#endif /* !_MESA_GLSL_SRC_GLSL_GLSL_PARSER_H  */
d461 1
a461 1
/* Line 353 of yacc.c  */
d515 1
a515 1
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
d519 9
a527 1
#  define YY_(msgid) msgid
d533 1
a533 1
# define YYUSE(e) ((void) (e))
d535 1
a535 1
# define YYUSE(e) /* empty */
d538 1
d541 1
a541 1
# define YYID(n) (n)
d693 1
a693 1
#define YYLAST   3501
d880 1
a880 1
      -1,   309,   316,   242,    -1,   317,    -1,   316,   226,   317,
d936 9
a944 9
    1657,  1662,  1670,  1685,  1690,  1698,  1704,  1713,  1714,  1718,
    1725,  1732,  1739,  1745,  1746,  1750,  1751,  1752,  1753,  1754,
    1755,  1759,  1766,  1765,  1779,  1780,  1784,  1790,  1799,  1809,
    1821,  1827,  1836,  1845,  1850,  1858,  1862,  1880,  1888,  1893,
    1901,  1906,  1914,  1922,  1930,  1938,  1946,  1954,  1962,  1969,
    1976,  1986,  1987,  1991,  1993,  1999,  2004,  2013,  2019,  2025,
    2031,  2037,  2046,  2047,  2048,  2049,  2053,  2067,  2071,  2082,
    2179,  2184,  2189,  2198,  2202,  2207,  2212,  2223,  2228,  2236,
    2260
d1229 1
a1229 1
#define YYPACT_NINF -392
d1232 50
a1281 50
    -100,    -8,   108,  -392,   -50,  -392,     3,  -392,  -392,  -392,
    -392,     9,   127,  3234,  -392,  -392,    24,  -392,  -392,  -392,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,  -392,  -392,  -392,    66,    68,    74,  -392,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,   -80,  -392,  -392,   289,  -392,  -392,  -392,
     109,    39,    41,    51,    60,    92,    15,  -392,  3234,  -392,
    -209,     8,    12,     2,  -166,  -392,   150,   215,   312,  1319,
     312,   312,  -392,    17,  -392,   312,  -392,  -392,  -392,  -392,
    -392,   154,  -392,   127,  1319,    13,  -392,  -392,  -392,  -392,
    -392,   312,  -392,   312,  -392,  1319,  -392,  -392,  -392,  -392,
    -392,   -64,  -392,  -392,   484,  -392,  -392,    34,    34,  -392,
    -392,  -392,  -392,  1319,    34,    34,   127,  -392,    43,    49,
    -161,    50,   -95,  -392,  -392,  -392,  -392,  -392,  -392,  2373,
    -392,    30,   141,   127,   593,  -392,  1319,    33,  -392,  -392,
      35,  -113,  -392,  -392,    36,    38,  1451,    63,    65,    47,
    2255,    77,    80,  -392,  -392,  -392,  -392,  -392,  1801,  1801,
    1801,  -392,  -392,  -392,  -392,  -392,    55,  -392,    83,  -392,
     -33,  -392,  -392,  -392,    59,  -112,  3006,    84,   -63,  1801,
      27,   -46,   -21,   -81,    37,    71,    58,    70,   199,   198,
     -90,  -392,  -392,  -165,  -392,    72,  1067,    91,  -392,  -392,
    -392,  -392,   726,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,   127,  -392,  -392,  -153,  2694,  2147,  -392,  -392,
    -392,  -392,  -392,    89,  -392,  3360,  -392,    94,  -151,  -392,
    -392,  -392,   835,  -392,    78,  -392,   -64,  -392,  -392,   225,
    1920,  1801,  -392,  -392,  -142,  1801,  2483,  -392,  -392,   -97,
    -392,  1451,  -392,  -392,  1801,   150,  -392,  -392,  1801,    97,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,  1801,  -392,  1801,  1801,  1801,  1801,  1801,
    1801,  1801,  1801,  1801,  1801,  1801,  1801,  1801,  1801,  1801,
    1801,  1801,  1801,  1801,  1801,  1801,  -392,  -392,  -392,   101,
    2795,  2147,    79,   107,  2147,  -392,  -392,  -392,   127,    88,
    3360,  1801,   127,  -392,  -392,  -392,  -392,  -392,  -392,   112,
    -392,  -392,  2483,   -87,  -392,   -82,   110,   127,   113,  -392,
     968,   119,   110,  -392,   132,  -392,   133,   -65,  3116,  -392,
    -392,  -392,  -392,  -392,    27,    27,   -46,   -46,   -21,   -21,
     -21,   -21,   -81,   -81,    37,    71,    58,    70,   199,   198,
    -139,  -392,  1801,    93,   130,  -392,  2147,   117,  -392,  -152,
    -137,   266,  -392,   139,  -392,  1801,  -392,   122,   144,  1451,
     125,   129,  1692,  -392,  -392,  -392,  -392,  -392,  1801,   149,
    -392,  1801,   148,  2147,   134,  -392,  2147,  2029,  -392,  -392,
     153,   131,  -392,   -57,  1801,  1692,   365,  -392,   -15,  -392,
    2147,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  2147,  -392,
    -392,  -392,  2905,  -392,   137,   110,  -392,  1451,  1801,   140,
    -392,  -392,  1210,  1451,    -7,  -392,  -392,  -392,   157,  -392,
    -392,  -133,  -392,  -392,  -392,  -392,  -392,  1451,  -392,  -392
d1287 11
a1297 11
    -392,  -392,  -392,  -392,  -392,  -392,     1,  -392,  -392,   -88,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,  -392,  -130,  -392,  -114,  -103,  -146,   -70,
      46,    52,    48,    45,    56,    54,  -392,  -170,   -51,  -392,
    -193,  -246,    10,    11,  -392,  -392,  -392,  -392,   232,   -42,
    -392,  -392,  -392,  -392,  -248,   -11,  -392,  -392,   114,  -392,
    -392,   -78,  -392,  -392,   -13,  -392,  -392,   -27,  -392,   207,
    -162,    44,    32,   -86,  -392,   111,  -186,  -391,  -392,  -392,
     -56,   293,   103,   115,  -392,  -392,    53,  -392,  -392,   -76,
    -392,   -77,  -392,  -392,  -392,  -392,  -392,  -392,   300,  -392,
    -392,   -98,  -392,  -392,    62,  -392,  -392
d1306 20
a1325 20
     122,  -332,   117,   478,   479,    11,   158,   294,   142,   272,
     289,   478,   479,    16,     7,     8,     9,   299,   144,   174,
     353,   343,   281,   109,   110,   332,   333,   358,   171,     1,
       7,     8,     9,   153,   154,   159,   160,   161,   158,   173,
     175,   461,   177,   178,     7,     8,     9,   180,   377,   271,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     166,   345,   266,   144,   461,   173,   348,   159,   160,   161,
     350,   302,   303,   145,   447,   362,   167,   346,   297,   298,
     267,   330,   331,    10,   345,   188,   165,   345,   351,   362,
       4,   363,   448,   345,   135,   122,   272,   117,   373,   324,
     374,   441,   375,   376,   414,   449,   176,   499,     5,   285,
     307,   382,   358,   286,   308,   423,   259,   170,   109,   110,
     281,   183,   263,   264,   377,   379,    97,    98,    99,   345,
     165,   165,   187,    12,   182,   429,   271,   165,   165,   345,
     430,   247,    15,   246,   345,   336,   337,   269,   174,   344,
     262,   410,   190,   334,   335,   189,   133,   437,    97,    98,
      99,   438,  -330,   134,  -331,   474,   442,   265,   173,   345,
    -332,   183,   146,   183,   147,   310,   365,   366,   322,   376,
     272,   328,   329,   247,   148,   246,   398,   399,   400,   401,
     304,   272,   305,   149,   348,   391,   392,   393,   271,   271,
d1327 20
a1346 20
     271,   271,   271,   271,   394,   395,   355,   384,    17,    18,
     271,     7,     8,     9,  -116,   150,   488,   396,   397,   480,
     156,   271,   453,    97,    98,    99,   151,   496,   157,   247,
     179,   246,   272,   456,   168,     8,   169,    35,    36,    37,
     181,   172,    39,    40,    41,    42,   186,   389,   325,   326,
     327,   475,   122,   349,   -20,   415,   402,   403,   418,   183,
     -21,   268,   390,   275,   276,   283,   284,   247,   287,   246,
     288,   306,   271,   247,   290,   491,   291,   190,   247,   292,
     246,   490,    17,    18,   411,   339,   493,   495,   295,   300,
     355,   296,   272,   355,   -46,   311,   383,   338,   340,   341,
     342,   495,   -45,   357,   153,    17,    18,   361,   369,   -40,
     416,    35,   136,   137,   412,   138,    39,    40,    41,    42,
     445,   417,   421,   425,   443,   432,   345,   440,   141,    97,
      98,    99,   271,   434,    35,   136,   137,   122,   138,    39,
      40,    41,    42,   435,   444,   436,   106,   467,   446,   247,
     469,   471,   450,   452,   454,   355,   455,   247,   458,   246,
     460,   -50,   466,   473,   485,   468,   472,   477,   431,   489,
     492,   498,   486,   139,   404,   140,   407,   464,   406,   258,
     465,   405,   355,   282,   424,   355,   355,   409,   408,   476,
     368,   370,   420,   155,   380,   371,   494,   497,   152,   355,
d1348 1
a1348 1
       0,   246,   422,     0,     0,   426,     0,     0,     0,     0,
d1353 2
a1354 2
     247,   246,   246,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   247,     0,   246,    17,    18,    19,
d1364 11
a1374 11
     140,   203,   204,   205,   206,   207,     0,     0,   208,   209,
       0,     0,     0,     0,     0,     0,     0,     0,    19,    20,
      21,    22,     0,     0,     0,     0,     0,    96,    97,    98,
      99,     0,   100,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,   106,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,     0,     0,    95,     0,
d1376 1
a1376 1
       0,     0,     0,     0,     0,   210,     0,     0,     0,     0,
d1378 1
a1378 1
       0,     0,     0,     0,     0,     0,   215,   216,   217,    17,
d1389 1
a1389 1
     208,   209,     0,     0,     0,     0,     0,   280,     0,     0,
d1413 25
a1437 1
      17,    18,   208,   209,     0,     0,     0,     0,     0,   364,
d1439 16
a1454 2
       0,    96,    97,    98,    99,     0,   100,     0,     0,    35,
      36,    37,     0,    38,    39,    40,    41,    42,     0,   106,
d1463 4
a1466 15
     141,    97,    98,    99,     0,   211,   212,   213,   214,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   106,     0,
     215,   216,   433,    17,    18,    19,    20,    21,    22,   194,
     195,   196,     0,   197,   198,   199,   200,   201,   478,   479,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,     0,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,   202,   139,    95,   140,   203,   204,   205,
     206,   207,     0,     0,   208,   209,     0,     0,     0,     0,
       0,     0,     0,     0,    19,    20,    21,    22,     0,     0,
       0,     0,     0,    96,    97,    98,    99,     0,   100,    23,
d1468 1
a1468 1
      34,   106,     0,     0,     0,     0,     0,     0,     0,     0,
d1474 2
a1475 1
      93,    94,     0,     0,    95,     0,     0,     0,     0,     0,
d1477 1
a1477 13
       0,   210,     0,     0,     0,     0,     0,   211,   212,   213,
     214,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   215,   216,    17,    18,    19,    20,    21,    22,
     194,   195,   196,     0,   197,   198,   199,   200,   201,     0,
       0,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,     0,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,   202,   139,    95,   140,   203,   204,
     205,   206,   207,     0,     0,   208,   209,     0,     0,     0,
d1479 1
a1479 1
       0,     0,     0,     0,    96,    97,    98,    99,     0,   100,
a1480 1
       0,     0,   106,     0,     0,     0,     0,     0,     0,     0,
d1487 1
d1489 2
a1490 27
       0,     0,   210,     0,     0,     0,     0,     0,   211,   212,
     213,   214,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   215,   216,    17,    18,    19,    20,    21,
      22,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,     0,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,   202,   139,    95,   140,   203,
     204,   205,   206,   207,     0,     0,   208,   209,     0,     0,
       0,     0,     0,     0,     0,     0,    19,    20,    21,    22,
       0,     0,     0,     0,     0,    96,    97,    98,    99,     0,
     100,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,   106,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,     0,   139,    95,   140,   203,   204,
     205,   206,   207,     0,     0,   208,   209,     0,     0,     0,
       0,     0,     0,   210,     0,     0,     0,     0,     0,   211,
     212,   213,   214,    17,    18,    19,    20,    21,    22,     0,
       0,     0,     0,     0,   215,   154,     0,     0,     0,     0,
d1498 3
a1500 3
      92,    93,    94,     0,   139,    95,   140,   203,   204,   205,
     206,   207,   210,     0,   208,   209,     0,     0,   211,   212,
     213,   214,     0,     0,    19,    20,    21,    22,     0,     0,
d1512 14
a1525 3
     214,     0,    19,    20,    21,    22,     0,     0,     0,     0,
       0,     0,   215,     0,     0,     0,     0,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,     0,
d1533 2
a1534 1
     210,   208,   209,     0,     0,     0,   211,   212,   213,   214,
d1536 1
a1536 1
       0,     0,   354,   470,     0,    23,    24,    25,    26,    27,
d1544 2
a1545 3
      95,   140,   203,   204,   205,   206,   207,     0,     0,   208,
     209,     0,     0,     0,     0,     0,     0,     0,   210,     0,
       0,     0,     0,     0,   211,   212,   213,   214,    19,    20,
d1547 1
a1547 1
     354,     0,     0,    23,    24,    25,    26,    27,    28,    29,
a1554 11
     203,   204,   205,   206,   207,     0,   210,   208,   209,     0,
       0,     0,   211,   212,   213,   214,    17,    18,    19,    20,
      21,    22,     0,     0,     0,     0,     0,   293,     0,     0,
       0,     0,     0,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,   136,   137,     0,   138,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,     0,   139,    95,   140,
d1556 25
a1580 2
       0,     0,     0,     0,   210,     0,     0,   270,     0,     0,
     211,   212,   213,   214,     0,     0,   141,    97,    98,    99,
d1582 1
a1582 1
       0,     0,     0,     0,   106,     0,     0,     0,     0,     0,
d1589 33
a1621 2
       0,     0,     0,     0,     0,     0,     0,     0,     0,    19,
      20,    21,    22,     0,   210,     0,     0,     0,     0,     0,
d1629 1
a1629 1
      88,    89,    90,    91,    92,    93,    94,     0,   139,    95,
d1631 5
a1635 48
      19,    20,    21,    22,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,     0,   139,
      95,   140,   203,   204,   205,   206,   207,     0,     0,   208,
     209,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      19,    20,    21,    22,     0,   210,     0,     0,   352,     0,
       0,   211,   212,   213,   214,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,     0,   139,
      95,   140,   203,   204,   205,   206,   207,     0,     0,   208,
     209,    19,    20,    21,    22,     0,   210,     0,     0,   413,
       0,     0,   211,   212,   213,   214,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,   309,     0,
     139,    95,   140,   203,   204,   205,   206,   207,     0,     0,
     208,   209,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    19,    20,    21,    22,     0,   210,     0,     0,   487,
       0,     0,   211,   212,   213,   214,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,   439,     0,
     139,    95,   140,   203,   204,   205,   206,   207,     0,     0,
     208,   209,     0,     0,     0,     0,     0,   210,     0,     0,
       0,     0,     0,   211,   212,   213,   214,    17,    18,    19,
      20,    21,    22,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,     0,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
d1640 26
a1665 14
      88,    89,    90,    91,    92,    93,    94,     0,     0,    95,
       0,     0,     0,     0,     0,     0,     0,   210,     0,     0,
       0,     0,     0,   211,   212,   213,   214,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    96,    97,    98,
      99,     0,   100,    17,    18,    19,    20,    21,    22,     0,
     101,   102,   103,   104,   105,   106,     0,     0,     0,     0,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,   136,   137,     0,   138,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,     0,     0,    95,     0,     0,     0,     0,
d1668 2
a1669 3
       0,     0,     0,   141,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   106
d1672 2
a1673 2
#define yypact_value_is_default(yystate) \
  ((yystate) == (-392))
d1675 1
a1675 1
#define yytable_value_is_error(yytable_value) \
d1680 20
a1699 20
      13,    96,    13,    18,    19,     4,     4,   200,    96,   179,
     196,    18,    19,    12,    94,    95,    96,   210,    96,   117,
     266,   111,   184,    13,    13,   106,   107,   275,   116,   129,
      94,    95,    96,   242,   243,    33,    34,    35,     4,   117,
     118,   432,   120,   121,    94,    95,    96,   125,   296,   179,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     226,   226,   223,   141,   455,   143,   252,    33,    34,    35,
     223,   104,   105,   100,   226,   226,   242,   242,   208,   209,
     241,   102,   103,   133,   226,   149,   113,   226,   241,   226,
      98,   242,   244,   226,    93,   108,   266,   108,   291,   229,
     242,   240,   295,   296,   350,   242,   119,   240,     0,   222,
     222,   304,   360,   226,   226,   361,   158,   116,   108,   108,
     282,   134,   164,   165,   372,   222,   124,   125,   126,   226,
     157,   158,   145,   130,   133,   222,   266,   164,   165,   226,
     222,   154,   133,   154,   226,   108,   109,   242,   246,   239,
     163,   344,   151,   234,   235,   219,   132,   222,   124,   125,
     126,   226,    96,   243,    96,   222,   412,   166,   246,   226,
      96,   184,   133,   186,   133,   226,    98,    99,   241,   372,
     350,   227,   228,   196,   133,   196,   332,   333,   334,   335,
     223,   361,   225,   133,   380,   325,   326,   327,   328,   329,
d1701 20
a1720 20
     340,   341,   342,   343,   328,   329,   267,   305,     3,     4,
     350,    94,    95,    96,   222,   133,   472,   330,   331,   244,
     222,   361,   425,   124,   125,   126,   221,   244,   226,   252,
     223,   252,   412,   429,    94,    95,    96,    32,    33,    34,
      96,    36,    37,    38,    39,    40,   243,   308,   231,   232,
     233,   454,   275,   262,   221,   351,   336,   337,   354,   282,
     221,   221,   323,   243,   133,   242,   241,   290,   242,   290,
     242,   222,   412,   296,   221,   478,   221,   286,   301,   242,
     301,   477,     3,     4,   345,   237,   482,   483,   221,   244,
     351,   221,   472,   354,   221,   221,   305,   236,   238,   110,
     112,   497,   221,   224,   242,     3,     4,   223,    93,   222,
     241,    32,    33,    34,   223,    36,    37,    38,    39,    40,
     416,   224,   244,   221,   241,   222,   226,   388,   123,   124,
     125,   126,   472,   224,    32,    33,    34,   360,    36,    37,
      38,    39,    40,   221,   224,   222,   141,   443,   241,   372,
     446,   447,    96,   224,   242,   416,   222,   380,   243,   380,
     241,   222,   224,   242,   460,   241,   223,    12,   377,   242,
     240,   224,   468,    94,   338,    96,   341,   438,   340,   157,
     441,   339,   443,   186,   362,   446,   447,   343,   342,   455,
     286,   290,   358,   110,   301,   290,   482,   484,   108,   460,
d1722 1
a1722 1
      -1,   432,   360,    -1,    -1,   372,    -1,    -1,    -1,    -1,
d1727 2
a1728 2
     483,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   497,    -1,   497,     3,     4,     5,
d1738 11
a1748 11
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,
       7,     8,    -1,    -1,    -1,    -1,    -1,   123,   124,   125,
     126,    -1,   128,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,   141,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    -1,    95,    -1,
d1750 1
a1750 1
      -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,    -1,    -1,
d1752 1
a1752 1
      -1,    -1,    -1,    -1,    -1,    -1,   242,   243,   244,     3,
d1763 1
a1763 1
     104,   105,    -1,    -1,    -1,    -1,    -1,   244,    -1,    -1,
d1787 1
a1787 1
       3,     4,   104,   105,    -1,    -1,    -1,    -1,    -1,   244,
d1789 40
a1828 2
      -1,   123,   124,   125,   126,    -1,   128,    -1,    -1,    32,
      33,    34,    -1,    36,    37,    38,    39,    40,    -1,   141,
d1837 4
a1840 15
     123,   124,   125,   126,    -1,   227,   228,   229,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   141,    -1,
     242,   243,   244,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    -1,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,     6,     7,     8,    -1,    -1,
      -1,    -1,    -1,   123,   124,   125,   126,    -1,   128,    20,
d1842 1
a1842 1
      31,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1848 2
a1849 1
      91,    92,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,
d1851 1
a1851 13
      -1,   221,    -1,    -1,    -1,    -1,    -1,   227,   228,   229,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   242,   243,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    -1,    13,    14,    15,    16,    17,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,    -1,    -1,    -1,
d1853 1
a1853 1
      -1,    -1,    -1,    -1,   123,   124,   125,   126,    -1,   128,
a1854 1
      -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1861 1
d1863 2
a1864 27
      -1,    -1,   221,    -1,    -1,    -1,    -1,    -1,   227,   228,
     229,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   242,   243,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    -1,    13,    14,    15,    16,    17,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,     8,
      -1,    -1,    -1,    -1,    -1,   123,   124,   125,   126,    -1,
     128,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,   141,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,    -1,    -1,    -1,
      -1,    -1,    -1,   221,    -1,    -1,    -1,    -1,    -1,   227,
     228,   229,   230,     3,     4,     5,     6,     7,     8,    -1,
      -1,    -1,    -1,    -1,   242,   243,    -1,    -1,    -1,    -1,
d1872 3
a1874 3
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
     100,   101,   221,    -1,   104,   105,    -1,    -1,   227,   228,
     229,   230,    -1,    -1,     5,     6,     7,     8,    -1,    -1,
d1886 14
a1899 3
     230,    -1,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
      -1,    -1,   242,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
d1907 2
a1908 1
     221,   104,   105,    -1,    -1,    -1,   227,   228,   229,   230,
d1910 1
a1910 1
      -1,    -1,   243,   244,    -1,    20,    21,    22,    23,    24,
d1918 2
a1919 3
      95,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,    -1,
      -1,    -1,    -1,    -1,   227,   228,   229,   230,     5,     6,
d1921 1
a1921 1
     243,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
a1928 11
      97,    98,    99,   100,   101,    -1,   221,   104,   105,    -1,
      -1,    -1,   227,   228,   229,   230,     3,     4,     5,     6,
       7,     8,    -1,    -1,    -1,    -1,    -1,   242,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
d1930 25
a1954 2
      -1,    -1,    -1,    -1,   221,    -1,    -1,   224,    -1,    -1,
     227,   228,   229,   230,    -1,    -1,   123,   124,   125,   126,
d1956 1
a1956 1
      -1,    -1,    -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,
d1963 33
a1995 2
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
       6,     7,     8,    -1,   221,    -1,    -1,    -1,    -1,    -1,
d2005 5
a2009 48
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,     6,     7,     8,    -1,   221,    -1,    -1,   224,    -1,
      -1,   227,   228,   229,   230,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,     5,     6,     7,     8,    -1,   221,    -1,    -1,   224,
      -1,    -1,   227,   228,   229,   230,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     5,     6,     7,     8,    -1,   221,    -1,    -1,   224,
      -1,    -1,   227,   228,   229,   230,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,    -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,
      -1,    -1,    -1,   227,   228,   229,   230,     3,     4,     5,
       6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
d2014 26
a2039 15
      86,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,
      -1,    -1,    -1,   227,   228,   229,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,   124,   125,
     126,    -1,   128,     3,     4,     5,     6,     7,     8,    -1,
     136,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    -1,    95,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a2040 1
      -1,    -1,    -1,   123,   124,   125,   126,    -1,    -1,    -1,
d2042 2
a2043 1
      -1,   141
d2068 1
a2068 1
     306,    96,   251,   309,   314,   315,   243,   309,   149,   219,
d2146 1
a2146 1

d2150 1
a2177 1

d2184 40
a2223 4
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
a2230 1

d2294 1
a2294 5
  switch (yytype)
    {
      default:
	break;
    }
a2540 1
  YYSIZE_T yysize1;
d2603 7
a2609 5
                yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                if (! (yysize <= yysize1
                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                  return 2;
                yysize = yysize1;
d2629 6
a2634 4
  yysize1 = yysize + yystrlen (yyformat);
  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
    return 2;
  yysize = yysize1;
d2694 1
a2694 6
  switch (yytype)
    {

      default:
	break;
    }
d2729 28
d2758 1
a2758 1
YYSTYPE yylval;
d2761 2
a2762 1
YYLTYPE yylloc;
d2802 1
a2802 1
  int yytoken;
d2821 3
a2823 4
  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
a2832 14
  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

d2834 1
a2834 1
/* Line 1572 of yacc.c  */
d2843 2
a2844 2
/* Line 1572 of yacc.c  */
#line 2767 "glsl_parser.cpp"
d2991 1
d2993 1
d5081 1
a5081 1
      ast_fully_specified_type *type = new(ctx) ast_fully_specified_type();
d5084 5
a5088 1
      type->specifier = (yyvsp[(1) - (3)].type_specifier);
d5098 1
a5098 1
#line 1686 "glsl_parser.yy"
d5107 1
a5107 1
#line 1691 "glsl_parser.yy"
d5116 1
a5116 1
#line 1699 "glsl_parser.yy"
d5126 1
a5126 1
#line 1705 "glsl_parser.yy"
d5136 1
a5136 1
#line 1715 "glsl_parser.yy"
d5144 1
a5144 1
#line 1719 "glsl_parser.yy"
d5152 1
a5152 1
#line 1726 "glsl_parser.yy"
d5163 1
a5163 1
#line 1733 "glsl_parser.yy"
d5171 1
a5171 1
#line 1745 "glsl_parser.yy"
d5177 1
a5177 1
#line 1760 "glsl_parser.yy"
d5187 1
a5187 1
#line 1766 "glsl_parser.yy"
d5195 1
a5195 1
#line 1770 "glsl_parser.yy"
d5206 1
a5206 1
#line 1779 "glsl_parser.yy"
d5212 1
a5212 1
#line 1785 "glsl_parser.yy"
d5222 1
a5222 1
#line 1791 "glsl_parser.yy"
d5232 1
a5232 1
#line 1800 "glsl_parser.yy"
d5246 1
a5246 1
#line 1810 "glsl_parser.yy"
d5259 1
a5259 1
#line 1822 "glsl_parser.yy"
d5269 1
a5269 1
#line 1828 "glsl_parser.yy"
d5279 1
a5279 1
#line 1837 "glsl_parser.yy"
d5289 1
a5289 1
#line 1846 "glsl_parser.yy"
d5298 1
a5298 1
#line 1851 "glsl_parser.yy"
d5307 1
a5307 1
#line 1859 "glsl_parser.yy"
d5315 1
a5315 1
#line 1863 "glsl_parser.yy"
d5330 1
a5330 1
#line 1881 "glsl_parser.yy"
d5339 1
a5339 1
#line 1889 "glsl_parser.yy"
d5348 1
a5348 1
#line 1894 "glsl_parser.yy"
d5357 1
a5357 1
#line 1902 "glsl_parser.yy"
d5366 1
a5366 1
#line 1907 "glsl_parser.yy"
d5375 1
a5375 1
#line 1915 "glsl_parser.yy"
d5387 1
a5387 1
#line 1923 "glsl_parser.yy"
d5396 1
a5396 1
#line 1931 "glsl_parser.yy"
d5408 1
a5408 1
#line 1939 "glsl_parser.yy"
d5417 1
a5417 1
#line 1947 "glsl_parser.yy"
d5429 1
a5429 1
#line 1955 "glsl_parser.yy"
d5438 1
a5438 1
#line 1963 "glsl_parser.yy"
d5449 1
a5449 1
#line 1970 "glsl_parser.yy"
d5460 1
a5460 1
#line 1977 "glsl_parser.yy"
d5471 1
a5471 1
#line 1993 "glsl_parser.yy"
d5479 1
a5479 1
#line 2000 "glsl_parser.yy"
d5488 1
a5488 1
#line 2005 "glsl_parser.yy"
d5497 1
a5497 1
#line 2014 "glsl_parser.yy"
d5507 1
a5507 1
#line 2020 "glsl_parser.yy"
d5517 1
a5517 1
#line 2026 "glsl_parser.yy"
d5527 1
a5527 1
#line 2032 "glsl_parser.yy"
d5537 1
a5537 1
#line 2038 "glsl_parser.yy"
d5547 1
a5547 1
#line 2046 "glsl_parser.yy"
d5553 1
a5553 1
#line 2047 "glsl_parser.yy"
d5559 1
a5559 1
#line 2048 "glsl_parser.yy"
d5565 1
a5565 1
#line 2049 "glsl_parser.yy"
d5571 1
a5571 1
#line 2054 "glsl_parser.yy"
d5585 1
a5585 1
#line 2068 "glsl_parser.yy"
d5593 1
a5593 1
#line 2072 "glsl_parser.yy"
d5605 1
a5605 1
#line 2083 "glsl_parser.yy"
d5703 1
a5703 1
#line 2180 "glsl_parser.yy"
d5712 1
a5712 1
#line 2185 "glsl_parser.yy"
d5721 1
a5721 1
#line 2190 "glsl_parser.yy"
d5730 1
a5730 1
#line 2198 "glsl_parser.yy"
d5739 1
a5739 1
#line 2203 "glsl_parser.yy"
d5748 1
a5748 1
#line 2208 "glsl_parser.yy"
d5757 1
a5757 1
#line 2213 "glsl_parser.yy"
d5769 1
a5769 1
#line 2224 "glsl_parser.yy"
d5778 1
a5778 1
#line 2229 "glsl_parser.yy"
d5787 1
a5787 1
#line 2237 "glsl_parser.yy"
d5812 1
a5812 1
#line 2261 "glsl_parser.yy"
d5822 1
a5822 1
#line 5739 "glsl_parser.cpp"
d5987 1
d5989 1
a6057 1

@


1.3
log
@Re-add generated files and unbreak the build. I shouldn't have deleted
those during the update. Spotted by matthieu@@
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.3.  */
d3 5
a7 6
/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
d9 3
a11 3
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

d16 1
a16 1

d18 1
a18 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
d29 1
a29 1

d47 1
a47 1
#define YYBISON_VERSION "2.3"
d55 6
a60 2
/* Using locations.  */
#define YYLSP_NEEDED 1
d63 88
a150 8
#define yyparse _mesa_glsl_parse
#define yylex   _mesa_glsl_lex
#define yyerror _mesa_glsl_error
#define yylval  _mesa_glsl_lval
#define yychar  _mesa_glsl_char
#define yydebug _mesa_glsl_debug
#define yynerrs _mesa_glsl_nerrs
#define yylloc _mesa_glsl_lloc
d216 160
a375 135
     ISAMPLER1D = 316,
     ISAMPLER2D = 317,
     ISAMPLER3D = 318,
     ISAMPLERCUBE = 319,
     ISAMPLER1DARRAY = 320,
     ISAMPLER2DARRAY = 321,
     USAMPLER1D = 322,
     USAMPLER2D = 323,
     USAMPLER3D = 324,
     USAMPLERCUBE = 325,
     USAMPLER1DARRAY = 326,
     USAMPLER2DARRAY = 327,
     STRUCT = 328,
     VOID_TOK = 329,
     WHILE = 330,
     IDENTIFIER = 331,
     TYPE_IDENTIFIER = 332,
     NEW_IDENTIFIER = 333,
     FLOATCONSTANT = 334,
     INTCONSTANT = 335,
     UINTCONSTANT = 336,
     BOOLCONSTANT = 337,
     FIELD_SELECTION = 338,
     LEFT_OP = 339,
     RIGHT_OP = 340,
     INC_OP = 341,
     DEC_OP = 342,
     LE_OP = 343,
     GE_OP = 344,
     EQ_OP = 345,
     NE_OP = 346,
     AND_OP = 347,
     OR_OP = 348,
     XOR_OP = 349,
     MUL_ASSIGN = 350,
     DIV_ASSIGN = 351,
     ADD_ASSIGN = 352,
     MOD_ASSIGN = 353,
     LEFT_ASSIGN = 354,
     RIGHT_ASSIGN = 355,
     AND_ASSIGN = 356,
     XOR_ASSIGN = 357,
     OR_ASSIGN = 358,
     SUB_ASSIGN = 359,
     INVARIANT = 360,
     LOWP = 361,
     MEDIUMP = 362,
     HIGHP = 363,
     SUPERP = 364,
     PRECISION = 365,
     VERSION = 366,
     EXTENSION = 367,
     LINE = 368,
     COLON = 369,
     EOL = 370,
     INTERFACE = 371,
     OUTPUT = 372,
     PRAGMA_DEBUG_ON = 373,
     PRAGMA_DEBUG_OFF = 374,
     PRAGMA_OPTIMIZE_ON = 375,
     PRAGMA_OPTIMIZE_OFF = 376,
     PRAGMA_INVARIANT_ALL = 377,
     LAYOUT_TOK = 378,
     ASM = 379,
     CLASS = 380,
     UNION = 381,
     ENUM = 382,
     TYPEDEF = 383,
     TEMPLATE = 384,
     THIS = 385,
     PACKED_TOK = 386,
     GOTO = 387,
     INLINE_TOK = 388,
     NOINLINE = 389,
     VOLATILE = 390,
     PUBLIC_TOK = 391,
     STATIC = 392,
     EXTERN = 393,
     EXTERNAL = 394,
     LONG_TOK = 395,
     SHORT_TOK = 396,
     DOUBLE_TOK = 397,
     HALF = 398,
     FIXED_TOK = 399,
     UNSIGNED = 400,
     INPUT_TOK = 401,
     OUPTUT = 402,
     HVEC2 = 403,
     HVEC3 = 404,
     HVEC4 = 405,
     DVEC2 = 406,
     DVEC3 = 407,
     DVEC4 = 408,
     FVEC2 = 409,
     FVEC3 = 410,
     FVEC4 = 411,
     SAMPLER2DRECT = 412,
     SAMPLER3DRECT = 413,
     SAMPLER2DRECTSHADOW = 414,
     SIZEOF = 415,
     CAST = 416,
     NAMESPACE = 417,
     USING = 418,
     ERROR_TOK = 419,
     COMMON = 420,
     PARTITION = 421,
     ACTIVE = 422,
     SAMPLERBUFFER = 423,
     FILTER = 424,
     IMAGE1D = 425,
     IMAGE2D = 426,
     IMAGE3D = 427,
     IMAGECUBE = 428,
     IMAGE1DARRAY = 429,
     IMAGE2DARRAY = 430,
     IIMAGE1D = 431,
     IIMAGE2D = 432,
     IIMAGE3D = 433,
     IIMAGECUBE = 434,
     IIMAGE1DARRAY = 435,
     IIMAGE2DARRAY = 436,
     UIMAGE1D = 437,
     UIMAGE2D = 438,
     UIMAGE3D = 439,
     UIMAGECUBE = 440,
     UIMAGE1DARRAY = 441,
     UIMAGE2DARRAY = 442,
     IMAGE1DSHADOW = 443,
     IMAGE2DSHADOW = 444,
     IMAGEBUFFER = 445,
     IIMAGEBUFFER = 446,
     UIMAGEBUFFER = 447,
     IMAGE1DARRAYSHADOW = 448,
     IMAGE2DARRAYSHADOW = 449,
     ROW_MAJOR = 450
a377 248
/* Tokens.  */
#define ATTRIBUTE 258
#define CONST_TOK 259
#define BOOL_TOK 260
#define FLOAT_TOK 261
#define INT_TOK 262
#define UINT_TOK 263
#define BREAK 264
#define CONTINUE 265
#define DO 266
#define ELSE 267
#define FOR 268
#define IF 269
#define DISCARD 270
#define RETURN 271
#define SWITCH 272
#define CASE 273
#define DEFAULT 274
#define BVEC2 275
#define BVEC3 276
#define BVEC4 277
#define IVEC2 278
#define IVEC3 279
#define IVEC4 280
#define UVEC2 281
#define UVEC3 282
#define UVEC4 283
#define VEC2 284
#define VEC3 285
#define VEC4 286
#define CENTROID 287
#define IN_TOK 288
#define OUT_TOK 289
#define INOUT_TOK 290
#define UNIFORM 291
#define VARYING 292
#define NOPERSPECTIVE 293
#define FLAT 294
#define SMOOTH 295
#define MAT2X2 296
#define MAT2X3 297
#define MAT2X4 298
#define MAT3X2 299
#define MAT3X3 300
#define MAT3X4 301
#define MAT4X2 302
#define MAT4X3 303
#define MAT4X4 304
#define SAMPLER1D 305
#define SAMPLER2D 306
#define SAMPLER3D 307
#define SAMPLERCUBE 308
#define SAMPLER1DSHADOW 309
#define SAMPLER2DSHADOW 310
#define SAMPLERCUBESHADOW 311
#define SAMPLER1DARRAY 312
#define SAMPLER2DARRAY 313
#define SAMPLER1DARRAYSHADOW 314
#define SAMPLER2DARRAYSHADOW 315
#define ISAMPLER1D 316
#define ISAMPLER2D 317
#define ISAMPLER3D 318
#define ISAMPLERCUBE 319
#define ISAMPLER1DARRAY 320
#define ISAMPLER2DARRAY 321
#define USAMPLER1D 322
#define USAMPLER2D 323
#define USAMPLER3D 324
#define USAMPLERCUBE 325
#define USAMPLER1DARRAY 326
#define USAMPLER2DARRAY 327
#define STRUCT 328
#define VOID_TOK 329
#define WHILE 330
#define IDENTIFIER 331
#define TYPE_IDENTIFIER 332
#define NEW_IDENTIFIER 333
#define FLOATCONSTANT 334
#define INTCONSTANT 335
#define UINTCONSTANT 336
#define BOOLCONSTANT 337
#define FIELD_SELECTION 338
#define LEFT_OP 339
#define RIGHT_OP 340
#define INC_OP 341
#define DEC_OP 342
#define LE_OP 343
#define GE_OP 344
#define EQ_OP 345
#define NE_OP 346
#define AND_OP 347
#define OR_OP 348
#define XOR_OP 349
#define MUL_ASSIGN 350
#define DIV_ASSIGN 351
#define ADD_ASSIGN 352
#define MOD_ASSIGN 353
#define LEFT_ASSIGN 354
#define RIGHT_ASSIGN 355
#define AND_ASSIGN 356
#define XOR_ASSIGN 357
#define OR_ASSIGN 358
#define SUB_ASSIGN 359
#define INVARIANT 360
#define LOWP 361
#define MEDIUMP 362
#define HIGHP 363
#define SUPERP 364
#define PRECISION 365
#define VERSION 366
#define EXTENSION 367
#define LINE 368
#define COLON 369
#define EOL 370
#define INTERFACE 371
#define OUTPUT 372
#define PRAGMA_DEBUG_ON 373
#define PRAGMA_DEBUG_OFF 374
#define PRAGMA_OPTIMIZE_ON 375
#define PRAGMA_OPTIMIZE_OFF 376
#define PRAGMA_INVARIANT_ALL 377
#define LAYOUT_TOK 378
#define ASM 379
#define CLASS 380
#define UNION 381
#define ENUM 382
#define TYPEDEF 383
#define TEMPLATE 384
#define THIS 385
#define PACKED_TOK 386
#define GOTO 387
#define INLINE_TOK 388
#define NOINLINE 389
#define VOLATILE 390
#define PUBLIC_TOK 391
#define STATIC 392
#define EXTERN 393
#define EXTERNAL 394
#define LONG_TOK 395
#define SHORT_TOK 396
#define DOUBLE_TOK 397
#define HALF 398
#define FIXED_TOK 399
#define UNSIGNED 400
#define INPUT_TOK 401
#define OUPTUT 402
#define HVEC2 403
#define HVEC3 404
#define HVEC4 405
#define DVEC2 406
#define DVEC3 407
#define DVEC4 408
#define FVEC2 409
#define FVEC3 410
#define FVEC4 411
#define SAMPLER2DRECT 412
#define SAMPLER3DRECT 413
#define SAMPLER2DRECTSHADOW 414
#define SIZEOF 415
#define CAST 416
#define NAMESPACE 417
#define USING 418
#define ERROR_TOK 419
#define COMMON 420
#define PARTITION 421
#define ACTIVE 422
#define SAMPLERBUFFER 423
#define FILTER 424
#define IMAGE1D 425
#define IMAGE2D 426
#define IMAGE3D 427
#define IMAGECUBE 428
#define IMAGE1DARRAY 429
#define IMAGE2DARRAY 430
#define IIMAGE1D 431
#define IIMAGE2D 432
#define IIMAGE3D 433
#define IIMAGECUBE 434
#define IIMAGE1DARRAY 435
#define IIMAGE2DARRAY 436
#define UIMAGE1D 437
#define UIMAGE2D 438
#define UIMAGE3D 439
#define UIMAGECUBE 440
#define UIMAGE1DARRAY 441
#define UIMAGE2DARRAY 442
#define IMAGE1DSHADOW 443
#define IMAGE2DSHADOW 444
#define IMAGEBUFFER 445
#define IIMAGEBUFFER 446
#define UIMAGEBUFFER 447
#define IMAGE1DARRAYSHADOW 448
#define IMAGE2DARRAYSHADOW 449
#define ROW_MAJOR 450




/* Copy the first part of user declarations.  */
#line 1 "glsl_parser.yy"

/*
 * Copyright Â© 2008, 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
    
#include "ast.h"
#include "glsl_parser_extras.h"
#include "glsl_types.h"

#define YYLEX_PARAM state->scanner



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 1
#endif
a378 4
/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif
a381 1
#line 52 "glsl_parser.yy"
d383 3
d388 1
a388 1
   char *identifier;
d403 6
d419 6
a424 4
}
/* Line 193 of yacc.c.  */
#line 560 "glsl_parser.cpp"
	YYSTYPE;
a426 1
# define YYSTYPE_IS_TRIVIAL 1
d443 16
d461 2
a462 3

/* Line 216 of yacc.c.  */
#line 585 "glsl_parser.cpp"
d512 1
a512 1
# if YYENABLE_NLS
d537 1
a537 1
YYID (int i)
d540 2
a541 2
YYID (i)
    int i;
d544 1
a544 1
  return i;
d565 1
a565 1
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
d568 3
a570 2
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
d593 1
a593 1
#  if (defined __cplusplus && ! defined _STDLIB_H \
d597 2
a598 2
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
d603 1
a603 1
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
d610 1
a610 1
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
d627 3
a629 3
  yytype_int16 yyss;
  YYSTYPE yyvs;
    YYLTYPE yyls;
d641 1
a641 17
/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif
d648 1
a648 1
# define YYSTACK_RELOCATE(Stack)					\
d652 2
a653 2
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
d661 20
d684 1
a684 1
#define YYLAST   3692
d687 1
a687 1
#define YYNTOKENS  220
d689 1
a689 1
#define YYNNTS  93
d691 1
a691 1
#define YYNRULES  291
d693 1
a693 1
#define YYNSTATES  434
d697 1
a697 1
#define YYMAXUTOK   450
d708 4
a711 4
       2,     2,     2,   204,     2,     2,     2,   208,   211,     2,
     196,   197,   206,   202,   201,   203,   200,   207,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   215,   217,
     209,   216,   210,   214,     2,     2,     2,     2,     2,     2,
d714 1
a714 1
       2,   198,     2,   199,   212,     2,     2,     2,     2,     2,
d717 1
a717 1
       2,     2,     2,   218,   213,   219,   205,     2,     2,     2,
d750 3
a752 1
     195
d760 35
a794 30
       0,     0,     3,     4,     9,    10,    14,    17,    20,    23,
      26,    29,    30,    33,    35,    37,    39,    45,    47,    50,
      52,    54,    56,    58,    60,    62,    64,    68,    70,    75,
      77,    81,    84,    87,    89,    91,    93,    97,   100,   103,
     106,   108,   111,   115,   118,   120,   122,   124,   127,   130,
     133,   135,   138,   142,   145,   147,   150,   153,   156,   158,
     160,   162,   164,   166,   170,   174,   178,   180,   184,   188,
     190,   194,   198,   200,   204,   208,   212,   216,   218,   222,
     226,   228,   232,   234,   238,   240,   244,   246,   250,   252,
     256,   258,   262,   264,   270,   272,   276,   278,   280,   282,
     284,   286,   288,   290,   292,   294,   296,   298,   300,   304,
     306,   309,   312,   317,   320,   322,   324,   327,   331,   335,
     338,   344,   348,   351,   355,   358,   359,   361,   363,   365,
     367,   369,   373,   379,   386,   394,   403,   409,   411,   414,
     419,   425,   432,   440,   445,   448,   450,   453,   458,   460,
     464,   466,   470,   472,   474,   476,   478,   480,   482,   485,
     487,   490,   493,   497,   499,   501,   503,   505,   508,   510,
     512,   515,   518,   520,   522,   525,   527,   531,   536,   538,
     540,   542,   544,   546,   548,   550,   552,   554,   556,   558,
     560,   562,   564,   566,   568,   570,   572,   574,   576,   578,
     580,   582,   584,   586,   588,   590,   592,   594,   596,   598,
     600,   602,   604,   606,   608,   610,   612,   614,   616,   618,
     620,   622,   624,   626,   628,   630,   632,   634,   636,   638,
     640,   642,   644,   646,   648,   650,   656,   661,   663,   666,
     670,   672,   676,   678,   683,   685,   687,   689,   691,   693,
     695,   697,   699,   701,   703,   705,   708,   709,   714,   716,
     718,   721,   725,   727,   730,   732,   735,   741,   745,   747,
     749,   754,   760,   764,   767,   773,   781,   788,   790,   792,
     794,   795,   798,   802,   805,   808,   811,   815,   818,   820,
     822,   824
d800 96
a895 83
     221,     0,    -1,    -1,   223,   225,   222,   228,    -1,    -1,
     111,    80,   115,    -1,   118,   115,    -1,   119,   115,    -1,
     120,   115,    -1,   121,   115,    -1,   122,   115,    -1,    -1,
     225,   227,    -1,    76,    -1,    77,    -1,    78,    -1,   112,
     226,   114,   226,   115,    -1,   311,    -1,   228,   311,    -1,
      76,    -1,    78,    -1,   229,    -1,    80,    -1,    81,    -1,
      79,    -1,    82,    -1,   196,   260,   197,    -1,   230,    -1,
     231,   198,   232,   199,    -1,   233,    -1,   231,   200,   226,
      -1,   231,    86,    -1,   231,    87,    -1,   260,    -1,   234,
      -1,   235,    -1,   231,   200,   240,    -1,   237,   197,    -1,
     236,   197,    -1,   238,    74,    -1,   238,    -1,   238,   258,
      -1,   237,   201,   258,    -1,   239,   196,    -1,   281,    -1,
     229,    -1,    83,    -1,   242,   197,    -1,   241,   197,    -1,
     243,    74,    -1,   243,    -1,   243,   258,    -1,   242,   201,
     258,    -1,   229,   196,    -1,   231,    -1,    86,   244,    -1,
      87,   244,    -1,   245,   244,    -1,   202,    -1,   203,    -1,
     204,    -1,   205,    -1,   244,    -1,   246,   206,   244,    -1,
     246,   207,   244,    -1,   246,   208,   244,    -1,   246,    -1,
     247,   202,   246,    -1,   247,   203,   246,    -1,   247,    -1,
     248,    84,   247,    -1,   248,    85,   247,    -1,   248,    -1,
     249,   209,   248,    -1,   249,   210,   248,    -1,   249,    88,
     248,    -1,   249,    89,   248,    -1,   249,    -1,   250,    90,
     249,    -1,   250,    91,   249,    -1,   250,    -1,   251,   211,
     250,    -1,   251,    -1,   252,   212,   251,    -1,   252,    -1,
     253,   213,   252,    -1,   253,    -1,   254,    92,   253,    -1,
     254,    -1,   255,    94,   254,    -1,   255,    -1,   256,    93,
     255,    -1,   256,    -1,   256,   214,   260,   215,   258,    -1,
     257,    -1,   244,   259,   258,    -1,   216,    -1,    95,    -1,
      96,    -1,    98,    -1,    97,    -1,   104,    -1,    99,    -1,
     100,    -1,   101,    -1,   102,    -1,   103,    -1,   258,    -1,
     260,   201,   258,    -1,   257,    -1,   263,   217,    -1,   271,
     217,    -1,   110,   285,   282,   217,    -1,   264,   197,    -1,
     266,    -1,   265,    -1,   266,   268,    -1,   265,   201,   268,
      -1,   273,   229,   196,    -1,   281,   226,    -1,   281,   226,
     198,   261,   199,    -1,   278,   269,   267,    -1,   269,   267,
      -1,   278,   269,   270,    -1,   269,   270,    -1,    -1,    33,
      -1,    34,    -1,    35,    -1,   281,    -1,   272,    -1,   271,
     201,   226,    -1,   271,   201,   226,   198,   199,    -1,   271,
     201,   226,   198,   261,   199,    -1,   271,   201,   226,   198,
     199,   216,   291,    -1,   271,   201,   226,   198,   261,   199,
     216,   291,    -1,   271,   201,   226,   216,   291,    -1,   273,
      -1,   273,   226,    -1,   273,   226,   198,   199,    -1,   273,
     226,   198,   261,   199,    -1,   273,   226,   198,   199,   216,
     291,    -1,   273,   226,   198,   261,   199,   216,   291,    -1,
     273,   226,   216,   291,    -1,   105,   229,    -1,   281,    -1,
     279,   281,    -1,   123,   196,   275,   197,    -1,   276,    -1,
     275,   201,   276,    -1,   226,    -1,   226,   216,    80,    -1,
      40,    -1,    39,    -1,    38,    -1,     4,    -1,   280,    -1,
     274,    -1,   274,   280,    -1,   277,    -1,   277,   280,    -1,
     105,   280,    -1,   105,   277,   280,    -1,   105,    -1,     4,
      -1,     3,    -1,    37,    -1,    32,    37,    -1,    33,    -1,
      34,    -1,    32,    33,    -1,    32,    34,    -1,    36,    -1,
     282,    -1,   285,   282,    -1,   283,    -1,   283,   198,   199,
      -1,   283,   198,   261,   199,    -1,   284,    -1,   286,    -1,
      77,    -1,    74,    -1,     6,    -1,     7,    -1,     8,    -1,
       5,    -1,    29,    -1,    30,    -1,    31,    -1,    20,    -1,
      21,    -1,    22,    -1,    23,    -1,    24,    -1,    25,    -1,
      26,    -1,    27,    -1,    28,    -1,    41,    -1,    42,    -1,
      43,    -1,    44,    -1,    45,    -1,    46,    -1,    47,    -1,
      48,    -1,    49,    -1,    50,    -1,    51,    -1,   157,    -1,
      52,    -1,    53,    -1,    54,    -1,    55,    -1,   159,    -1,
      56,    -1,    57,    -1,    58,    -1,    59,    -1,    60,    -1,
      61,    -1,    62,    -1,    63,    -1,    64,    -1,    65,    -1,
      66,    -1,    67,    -1,    68,    -1,    69,    -1,    70,    -1,
      71,    -1,    72,    -1,   108,    -1,   107,    -1,   106,    -1,
      73,   226,   218,   287,   219,    -1,    73,   218,   287,   219,
      -1,   288,    -1,   287,   288,    -1,   281,   289,   217,    -1,
     290,    -1,   289,   201,   290,    -1,   226,    -1,   226,   198,
     261,   199,    -1,   258,    -1,   262,    -1,   295,    -1,   294,
      -1,   292,    -1,   300,    -1,   301,    -1,   304,    -1,   305,
      -1,   306,    -1,   310,    -1,   218,   219,    -1,    -1,   218,
     296,   299,   219,    -1,   298,    -1,   294,    -1,   218,   219,
      -1,   218,   299,   219,    -1,   293,    -1,   299,   293,    -1,
     217,    -1,   260,   217,    -1,    14,   196,   260,   197,   302,
      -1,   293,    12,   293,    -1,   293,    -1,   260,    -1,   273,
     226,   216,   291,    -1,    17,   196,   260,   197,   295,    -1,
      18,   260,   215,    -1,    19,   215,    -1,    75,   196,   303,
     197,   297,    -1,    11,   293,    75,   196,   260,   197,   217,
      -1,    13,   196,   307,   309,   197,   297,    -1,   300,    -1,
     292,    -1,   303,    -1,    -1,   308,   217,    -1,   308,   217,
     260,    -1,    10,   217,    -1,     9,   217,    -1,    16,   217,
      -1,    16,   260,   217,    -1,    15,   217,    -1,   312,    -1,
     262,    -1,   224,    -1,   263,   298,    -1
d901 35
a935 30
       0,   218,   218,   217,   229,   231,   271,   272,   273,   274,
     275,   287,   289,   293,   294,   295,   299,   308,   316,   327,
     328,   332,   339,   346,   353,   360,   367,   374,   375,   381,
     385,   392,   398,   407,   411,   415,   416,   425,   426,   430,
     431,   435,   441,   453,   457,   463,   470,   480,   481,   485,
     486,   490,   496,   508,   519,   520,   526,   532,   542,   543,
     544,   545,   549,   550,   556,   562,   571,   572,   578,   587,
     588,   594,   603,   604,   610,   616,   622,   631,   632,   638,
     647,   648,   657,   658,   667,   668,   677,   678,   687,   688,
     697,   698,   707,   708,   717,   718,   727,   728,   729,   730,
     731,   732,   733,   734,   735,   736,   737,   741,   745,   761,
     765,   770,   774,   783,   787,   788,   792,   797,   805,   819,
     829,   844,   851,   856,   867,   880,   883,   888,   893,   902,
     906,   907,   917,   927,   937,   947,   957,   971,   978,   987,
     996,  1005,  1014,  1023,  1032,  1046,  1053,  1064,  1071,  1072,
    1091,  1143,  1184,  1189,  1194,  1202,  1210,  1211,  1212,  1217,
    1218,  1223,  1228,  1234,  1242,  1247,  1252,  1257,  1263,  1268,
    1273,  1278,  1283,  1291,  1295,  1303,  1304,  1310,  1319,  1325,
    1331,  1340,  1341,  1342,  1343,  1344,  1345,  1346,  1347,  1348,
    1349,  1350,  1351,  1352,  1353,  1354,  1355,  1356,  1357,  1358,
    1359,  1360,  1361,  1362,  1363,  1364,  1365,  1366,  1367,  1368,
    1369,  1370,  1371,  1372,  1373,  1374,  1375,  1376,  1377,  1378,
    1379,  1380,  1381,  1382,  1383,  1384,  1385,  1386,  1387,  1388,
    1389,  1390,  1394,  1404,  1414,  1427,  1434,  1443,  1448,  1456,
    1471,  1476,  1484,  1491,  1500,  1504,  1510,  1511,  1515,  1516,
    1517,  1518,  1519,  1520,  1521,  1525,  1532,  1531,  1545,  1546,
    1550,  1556,  1565,  1575,  1587,  1593,  1602,  1611,  1616,  1624,
    1628,  1642,  1646,  1647,  1651,  1658,  1665,  1675,  1676,  1680,
    1682,  1688,  1693,  1702,  1708,  1714,  1720,  1726,  1735,  1736,
    1737,  1741
d939 1
a939 1
#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
d954 3
a956 2
  "SAMPLER2DARRAYSHADOW", "ISAMPLER1D", "ISAMPLER2D", "ISAMPLER3D",
  "ISAMPLERCUBE", "ISAMPLER1DARRAY", "ISAMPLER2DARRAY", "USAMPLER1D",
d958 23
a980 18
  "USAMPLER2DARRAY", "STRUCT", "VOID_TOK", "WHILE", "IDENTIFIER",
  "TYPE_IDENTIFIER", "NEW_IDENTIFIER", "FLOATCONSTANT", "INTCONSTANT",
  "UINTCONSTANT", "BOOLCONSTANT", "FIELD_SELECTION", "LEFT_OP", "RIGHT_OP",
  "INC_OP", "DEC_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP",
  "OR_OP", "XOR_OP", "MUL_ASSIGN", "DIV_ASSIGN", "ADD_ASSIGN",
  "MOD_ASSIGN", "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN",
  "OR_ASSIGN", "SUB_ASSIGN", "INVARIANT", "LOWP", "MEDIUMP", "HIGHP",
  "SUPERP", "PRECISION", "VERSION", "EXTENSION", "LINE", "COLON", "EOL",
  "INTERFACE", "OUTPUT", "PRAGMA_DEBUG_ON", "PRAGMA_DEBUG_OFF",
  "PRAGMA_OPTIMIZE_ON", "PRAGMA_OPTIMIZE_OFF", "PRAGMA_INVARIANT_ALL",
  "LAYOUT_TOK", "ASM", "CLASS", "UNION", "ENUM", "TYPEDEF", "TEMPLATE",
  "THIS", "PACKED_TOK", "GOTO", "INLINE_TOK", "NOINLINE", "VOLATILE",
  "PUBLIC_TOK", "STATIC", "EXTERN", "EXTERNAL", "LONG_TOK", "SHORT_TOK",
  "DOUBLE_TOK", "HALF", "FIXED_TOK", "UNSIGNED", "INPUT_TOK", "OUPTUT",
  "HVEC2", "HVEC3", "HVEC4", "DVEC2", "DVEC3", "DVEC4", "FVEC2", "FVEC3",
  "FVEC4", "SAMPLER2DRECT", "SAMPLER3DRECT", "SAMPLER2DRECTSHADOW",
  "SIZEOF", "CAST", "NAMESPACE", "USING", "ERROR_TOK", "COMMON",
  "PARTITION", "ACTIVE", "SAMPLERBUFFER", "FILTER", "IMAGE1D", "IMAGE2D",
d986 9
a994 9
  "IMAGE2DARRAYSHADOW", "ROW_MAJOR", "'('", "')'", "'['", "']'", "'.'",
  "','", "'+'", "'-'", "'!'", "'~'", "'*'", "'/'", "'%'", "'<'", "'>'",
  "'&'", "'^'", "'|'", "'?'", "':'", "'='", "';'", "'{'", "'}'", "$accept",
  "translation_unit", "@@1", "version_statement", "pragma_statement",
  "extension_statement_list", "any_identifier", "extension_statement",
  "external_declaration_list", "variable_identifier", "primary_expression",
  "postfix_expression", "integer_expression", "function_call",
  "function_call_or_method", "function_call_generic",
  "function_call_header_no_parameters",
d1008 14
a1021 12
  "parameter_qualifier", "parameter_type_specifier",
  "init_declarator_list", "single_declaration", "fully_specified_type",
  "layout_qualifier", "layout_qualifier_id_list", "layout_qualifier_id",
  "interpolation_qualifier", "parameter_type_qualifier", "type_qualifier",
  "storage_qualifier", "type_specifier", "type_specifier_no_prec",
  "type_specifier_nonarray", "basic_type_specifier_nonarray",
  "precision_qualifier", "struct_specifier", "struct_declaration_list",
  "struct_declaration", "struct_declarator_list", "struct_declarator",
  "initializer", "declaration_statement", "statement", "simple_statement",
  "compound_statement", "@@2", "statement_no_new_scope",
  "compound_statement_no_new_scope", "statement_list",
  "expression_statement", "selection_statement",
d1023 2
a1024 1
  "case_label", "iteration_statement", "for_init_statement",
d1026 3
a1028 1
  "external_declaration", "function_definition", 0
d1056 6
a1061 3
     445,   446,   447,   448,   449,   450,    40,    41,    91,    93,
      46,    44,    43,    45,    33,   126,    42,    47,    37,    60,
      62,    38,    94,   124,    63,    58,    61,    59,   123,   125
d1068 35
a1102 30
       0,   220,   222,   221,   223,   223,   224,   224,   224,   224,
     224,   225,   225,   226,   226,   226,   227,   228,   228,   229,
     229,   230,   230,   230,   230,   230,   230,   231,   231,   231,
     231,   231,   231,   232,   233,   234,   234,   235,   235,   236,
     236,   237,   237,   238,   239,   239,   239,   240,   240,   241,
     241,   242,   242,   243,   244,   244,   244,   244,   245,   245,
     245,   245,   246,   246,   246,   246,   247,   247,   247,   248,
     248,   248,   249,   249,   249,   249,   249,   250,   250,   250,
     251,   251,   252,   252,   253,   253,   254,   254,   255,   255,
     256,   256,   257,   257,   258,   258,   259,   259,   259,   259,
     259,   259,   259,   259,   259,   259,   259,   260,   260,   261,
     262,   262,   262,   263,   264,   264,   265,   265,   266,   267,
     267,   268,   268,   268,   268,   269,   269,   269,   269,   270,
     271,   271,   271,   271,   271,   271,   271,   272,   272,   272,
     272,   272,   272,   272,   272,   273,   273,   274,   275,   275,
     276,   276,   277,   277,   277,   278,   279,   279,   279,   279,
     279,   279,   279,   279,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   281,   281,   282,   282,   282,   283,   283,
     283,   284,   284,   284,   284,   284,   284,   284,   284,   284,
     284,   284,   284,   284,   284,   284,   284,   284,   284,   284,
     284,   284,   284,   284,   284,   284,   284,   284,   284,   284,
     284,   284,   284,   284,   284,   284,   284,   284,   284,   284,
     284,   284,   284,   284,   284,   284,   284,   284,   284,   284,
     284,   284,   285,   285,   285,   286,   286,   287,   287,   288,
     289,   289,   290,   290,   291,   292,   293,   293,   294,   294,
     294,   294,   294,   294,   294,   295,   296,   295,   297,   297,
     298,   298,   299,   299,   300,   300,   301,   302,   302,   303,
     303,   304,   305,   305,   306,   306,   306,   307,   307,   308,
     308,   309,   309,   310,   310,   310,   310,   310,   311,   311,
     311,   312
d1108 19
a1126 18
       0,     2,     0,     4,     0,     3,     2,     2,     2,     2,
       2,     0,     2,     1,     1,     1,     5,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     4,     1,
       3,     2,     2,     1,     1,     1,     3,     2,     2,     2,
       1,     2,     3,     2,     1,     1,     1,     2,     2,     2,
       1,     2,     3,     2,     1,     2,     2,     2,     1,     1,
       1,     1,     1,     3,     3,     3,     1,     3,     3,     1,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       1,     3,     1,     3,     1,     3,     1,     3,     1,     3,
       1,     3,     1,     5,     1,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       2,     2,     4,     2,     1,     1,     2,     3,     3,     2,
       5,     3,     2,     3,     2,     0,     1,     1,     1,     1,
       1,     3,     5,     6,     7,     8,     5,     1,     2,     4,
       5,     6,     7,     4,     2,     1,     2,     4,     1,     3,
       1,     3,     1,     1,     1,     1,     1,     1,     2,     1,
       2,     2,     3,     1,     1,     1,     1,     2,     1,     1,
       2,     2,     1,     1,     2,     1,     3,     4,     1,     1,
d1132 11
a1142 7
       1,     1,     1,     1,     1,     5,     4,     1,     2,     3,
       1,     3,     1,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     4,     1,     1,
       2,     3,     1,     2,     1,     2,     5,     3,     1,     1,
       4,     5,     3,     2,     5,     7,     6,     1,     1,     1,
       0,     2,     3,     2,     2,     2,     3,     2,     1,     1,
       1,     2
d1145 2
a1146 2
/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
d1150 50
a1199 44
       4,     0,     0,    11,     0,     1,     2,     5,     0,     0,
      12,    13,    14,    15,     0,   165,   164,   185,   182,   183,
     184,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     186,   187,   188,     0,   168,   169,   172,   166,   154,   153,
     152,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   210,   211,   212,   213,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,     0,   181,   180,   163,   234,   233,   232,
       0,     0,     0,     0,     0,     0,     0,   209,   214,   290,
       3,   289,     0,     0,   115,   125,     0,   130,   137,   157,
     159,     0,   156,   145,   173,   175,   178,     0,   179,    17,
     288,     0,   170,   171,   167,     0,     0,    19,    20,   144,
       0,   161,     0,     6,     7,     8,     9,    10,     0,    18,
     110,     0,   291,   113,   125,   155,   126,   127,   128,   116,
       0,   125,     0,   111,    13,    15,   138,     0,   158,   160,
     146,     0,   174,     0,     0,     0,   237,     0,   162,     0,
     150,     0,   148,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    24,    22,    23,    25,    46,     0,
       0,     0,    58,    59,    60,    61,   264,   256,   260,    21,
      27,    54,    29,    34,    35,     0,     0,    40,     0,    62,
       0,    66,    69,    72,    77,    80,    82,    84,    86,    88,
      90,    92,    94,   107,     0,   245,     0,   145,   248,   262,
     247,   246,     0,   249,   250,   251,   252,   253,   254,   117,
     122,   124,   129,     0,   131,     0,     0,   118,   176,    62,
     109,     0,    44,    16,   242,     0,   240,   236,   238,     0,
     112,     0,   147,     0,   284,   283,     0,     0,     0,   287,
     285,     0,     0,     0,   273,     0,    55,    56,     0,   255,
       0,    31,    32,     0,     0,    38,    37,     0,   181,    41,
      43,    97,    98,   100,    99,   102,   103,   104,   105,   106,
     101,    96,     0,    57,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,   261,   263,   119,   121,
     123,     0,     0,   139,     0,   244,   143,   177,     0,     0,
     239,   235,   151,   149,     0,   278,   277,   280,     0,   286,
       0,   272,   163,   269,     0,     0,    26,     0,     0,    33,
      30,     0,    36,     0,     0,    50,    42,    95,    63,    64,
      65,    67,    68,    70,    71,    75,    76,    73,    74,    78,
      79,    81,    83,    85,    87,    89,    91,     0,   108,     0,
     132,     0,   136,     0,   140,     0,   241,     0,   279,     0,
       0,     0,     0,     0,     0,   257,    28,    53,    48,    47,
       0,   181,    51,     0,     0,     0,   133,   141,     0,   243,
       0,   281,     0,   268,   266,   271,     0,   259,   274,   258,
      52,    93,   120,   134,     0,   142,     0,   282,   276,     0,
     270,   135,   275,   267
d1205 11
a1215 10
      -1,     2,     9,     3,    89,     6,   160,    10,    90,   189,
     190,   191,   348,   192,   193,   194,   195,   196,   197,   198,
     352,   353,   354,   355,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   292,
     214,   241,   215,   216,    93,    94,    95,   230,   139,   140,
     231,    96,    97,    98,    99,   161,   162,   100,   141,   101,
     102,   242,   104,   105,   106,   107,   108,   155,   156,   245,
     246,   326,   218,   219,   220,   221,   270,   418,   419,   222,
     223,   224,   414,   345,   225,   226,   227,   337,   389,   390,
     228,   109,   110
d1220 1
a1220 1
#define YYPACT_NINF -366
d1223 50
a1272 44
     -57,   -43,    62,  -366,   -50,  -366,   -30,  -366,    67,  3341,
    -366,  -366,  -366,  -366,    -6,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,     8,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,   -65,  -366,  -366,   226,  -366,  -366,  -366,
      51,   -31,   -28,     6,    13,    15,   -44,  -366,  -366,  -366,
    3341,  -366,  -183,   -47,   -29,    18,  -169,  -366,   140,    24,
      24,  3460,  -366,  -366,  -366,   -24,  -366,  3533,  -366,  -366,
    -366,    67,  -366,  -366,  -366,  3460,   -48,  -366,  -366,  -366,
      24,  -366,  3533,  -366,  -366,  -366,  -366,  -366,    67,  -366,
    -366,   408,  -366,  -366,    55,  -366,  -366,  -366,  -366,  -366,
    3460,   200,    67,  -366,   -20,   -18,  -178,    23,  -366,  -366,
    -366,  2225,  -366,    72,    67,  1598,  -366,  3460,  -366,     4,
      10,   -84,  -366,    11,    14,  1059,    40,    42,    29,  1836,
      43,  2783,    34,    54,  -366,  -366,  -366,  -366,  -366,  2783,
    2783,  2783,  -366,  -366,  -366,  -366,  -366,    32,  -366,    56,
    -366,   -71,  -366,  -366,  -366,    57,   -81,  2969,    61,   -27,
    2783,    35,   -88,   -41,   -70,    33,    60,    41,    59,   181,
     180,   -89,  -366,  -366,  -168,  -366,    58,    80,  -366,  -366,
    -366,  -366,   625,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,    67,  3460,  -177,  2411,  2783,  -366,  -366,  -366,
    -366,    78,  -366,  -366,    81,  -137,  -366,  -366,  -366,  1717,
    -366,   201,  -366,    67,  -366,  -366,   205,  1478,  2783,  -366,
    -366,  -134,  2783,  -115,  -366,  2039,  -366,  -366,   -60,  -366,
    1059,  -366,  -366,  2783,   140,  -366,  -366,  2783,    85,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  2783,  -366,  2783,  2783,  2783,  2783,  2783,  2783,
    2783,  2783,  2783,  2783,  2783,  2783,  2783,  2783,  2783,  2783,
    2783,  2783,  2783,  2783,  2783,  -366,  -366,  -366,    86,  -366,
    -366,  2597,  2783,    69,    87,  -366,  -366,  -366,  2783,    67,
    -366,  -366,  -366,  -366,    91,  -366,  -366,  2039,   -59,  -366,
     -46,  -366,   129,    88,    67,    93,  -366,   842,    89,    88,
    -366,    95,  -366,    96,   -37,  3155,  -366,  -366,  -366,  -366,
    -366,    35,    35,   -88,   -88,   -41,   -41,   -41,   -41,   -70,
     -70,    33,    60,    41,    59,   181,   180,   -96,  -366,  2783,
      76,    97,  -366,  2783,    79,    98,  -366,  2783,  -366,    77,
     101,  1059,    83,    90,  1275,  -366,  -366,  -366,  -366,  -366,
    2783,   102,  -366,  2783,   108,  2783,    94,  -366,  2783,  -366,
     -26,  2783,  1275,   297,  -366,  -366,  2783,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  2783,  -366,   100,    88,  -366,  1059,
    -366,  -366,  -366,  -366
d1278 11
a1288 10
    -366,  -366,  -366,  -366,  -366,  -366,    -7,  -366,  -366,   -62,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -101,  -366,  -113,  -109,  -121,   -61,
       5,     3,     9,    16,     2,     7,  -366,  -142,  -100,  -366,
    -164,  -225,    21,    22,  -366,  -366,  -366,    82,   186,   173,
      92,  -366,  -366,  -242,  -366,  -366,    68,   -73,  -366,  -366,
     -74,    -9,   -67,  -366,  -366,   243,  -366,   170,  -147,  -366,
       0,  -298,    73,  -159,  -365,   -58,  -366,   -80,   239,    63,
      84,  -366,  -366,    -2,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,   246,  -366
d1293 2
a1294 3
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -115
d1297 52
a1348 88
     103,    14,   121,   120,   312,   261,   256,   263,   248,   240,
     324,    11,    12,    13,   119,   271,   272,   268,   301,   302,
     235,   321,   135,   344,   382,   148,   149,    15,    16,   417,
      91,    92,   142,   314,   130,   131,   147,     4,   236,   322,
     152,   112,   113,   299,   300,   114,   158,   417,   143,   315,
     239,   136,   137,   138,     1,   159,    33,    34,    35,   135,
      36,    37,     5,   317,   329,     7,   116,   314,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   266,   267,
     330,   103,     8,   339,   123,   407,   314,   124,   136,   137,
     138,   146,   150,   240,   338,   344,   381,   279,   340,   293,
     341,   343,   248,   385,   153,   314,   154,   423,   111,   349,
     425,    91,    92,   252,   297,   298,   276,   253,   430,   403,
     277,   125,   217,   305,   306,   313,   431,   273,   126,   274,
     127,   232,    15,    16,   239,   234,   325,   346,   391,   303,
     304,   314,   314,    11,    12,    13,   154,   244,   154,   377,
     133,   392,   128,   115,   404,   314,   217,    77,    78,    79,
     399,    33,    34,    35,   400,    36,    37,    38,    39,    40,
     157,   426,   134,   343,   151,   314,   -19,   356,   -20,   240,
     365,   366,   367,   368,   361,   362,   240,   243,   317,   291,
     363,   364,   357,   358,   359,   360,   239,   239,   239,   239,
     239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
     239,   239,   351,   217,   378,  -114,   144,    12,   145,   237,
     239,   250,   325,   410,   232,   318,   251,   239,   254,    15,
      16,   255,   413,   136,   137,   138,   257,   240,   258,   262,
     154,   294,   295,   296,   369,   370,   259,   427,   217,   264,
     265,   269,   -45,   308,   275,   402,   217,   280,    33,    34,
      35,   217,    36,    37,    38,    39,    40,   350,   121,   120,
     433,   307,   309,   310,   311,   130,   -44,   327,   239,   328,
     334,   332,   -39,   325,   379,   383,   384,   387,   396,   314,
     394,   397,   405,   398,   411,   408,   406,   409,   412,   -49,
     420,   187,   117,   421,   118,   325,   416,   422,   325,   429,
     424,   372,   371,   375,   233,   319,   325,   432,   373,   376,
     229,   333,   244,   122,   325,   320,   374,   249,   217,   386,
     335,   132,   428,   347,   415,   388,   129,   393,   217,     0,
       0,   336,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   217,     0,     0,   217,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   217,     0,     0,     0,     0,     0,     0,
       0,    15,    16,    17,    18,    19,    20,   163,   164,   165,
     217,   166,   167,   168,   169,   170,   171,   172,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,     0,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,   173,   117,    75,   118,   174,   175,   176,
     177,   178,     0,     0,   179,   180,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    76,    77,    78,    79,     0,    80,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    86,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    87,     0,    88,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   181,     0,     0,     0,     0,     0,
     182,   183,   184,   185,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   186,   187,   188,    15,    16,
      17,    18,    19,    20,   163,   164,   165,     0,   166,   167,
     168,   169,   170,   171,   172,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
       0,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
     173,   117,    75,   118,   174,   175,   176,   177,   178,     0,
       0,   179,   180,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      76,    77,    78,    79,     0,    80,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    86,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    87,     0,    88,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   181,     0,     0,     0,     0,     0,   182,   183,   184,
     185,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   186,   187,   316,    15,    16,    17,    18,    19,
      20,   163,   164,   165,     0,   166,   167,   168,   169,   170,
     171,   172,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,     0,    36,    37,
d1352 53
a1404 2
      68,    69,    70,    71,    72,    73,    74,   173,   117,    75,
     118,   174,   175,   176,   177,   178,     0,     0,   179,   180,
d1406 2
a1407 3
       0,     0,     0,     0,     0,     0,     0,    76,    77,    78,
      79,     0,    80,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    86,     0,     0,     0,     0,
a1409 2
       0,     0,     0,     0,     0,     0,     0,     0,     0,    87,
       0,    88,     0,     0,     0,     0,     0,     0,     0,     0,
a1411 38
       0,     0,     0,     0,     0,     0,     0,     0,   181,     0,
       0,     0,     0,     0,   182,   183,   184,   185,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   186,
     187,   395,    15,    16,    17,    18,    19,    20,   163,   164,
     165,     0,   166,   167,   168,   169,   170,   171,   172,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,     0,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,   173,   117,    75,   118,   174,   175,
     176,   177,   178,     0,     0,   179,   180,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    76,    77,    78,    79,     0,    80,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    86,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    87,     0,    88,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   181,     0,     0,     0,     0,
       0,   182,   183,   184,   185,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   186,   187,    15,    16,
      17,    18,    19,    20,   163,   164,   165,     0,   166,   167,
     168,   169,   170,   171,   172,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
       0,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
     173,   117,    75,   118,   174,   175,   176,   177,   178,     0,
       0,   179,   180,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      76,    77,    78,    79,     0,    80,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    86,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a1413 1
       0,     0,    87,     0,    88,     0,     0,     0,     0,     0,
d1415 5
a1419 5
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   181,     0,     0,     0,     0,     0,   182,   183,   184,
     185,    15,    16,    17,    18,    19,    20,     0,     0,     0,
       0,     0,   186,   131,     0,     0,     0,     0,    21,    22,
d1421 1
a1421 1
      33,    34,    35,     0,    36,    37,    38,    39,    40,    41,
d1425 8
a1432 21
      72,    73,    74,     0,   117,    75,   118,   174,   175,   176,
     177,   178,     0,     0,   179,   180,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    76,    77,    78,    79,     0,    80,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    86,     0,    17,    18,    19,    20,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
       0,     0,     0,     0,     0,    87,     0,    88,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,     0,   181,    75,     0,     0,     0,     0,
     182,   183,   184,   185,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   186,     0,     0,     0,     0,
       0,     0,     0,     0,    77,    78,    79,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    17,    18,    19,    20,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,     0,
       0,     0,     0,     0,     0,    87,     0,    88,    41,    42,
d1436 17
a1452 1
      73,    74,     0,     0,    75,     0,     0,     0,     0,     0,
d1454 1
a1454 2
       0,     0,     0,     0,     0,     0,     0,   247,     0,     0,
       0,     0,     0,    77,    78,    79,     0,     0,     0,     0,
d1456 1
a1456 11
       0,    17,    18,    19,    20,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,     0,     0,
       0,     0,     0,     0,    87,     0,    88,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,     0,   117,    75,   118,   174,   175,   176,   177,   178,
       0,     0,   179,   180,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,     0,     0,     0,
       0,     0,    77,    78,    79,     0,     0,     0,     0,     0,
a1460 1
       0,     0,     0,    87,     0,    88,     0,     0,     0,     0,
d1464 18
a1481 6
       0,     0,   181,     0,     0,     0,     0,     0,   182,   183,
     184,   185,    15,    16,    17,    18,    19,    20,     0,     0,
       0,     0,     0,   260,     0,     0,     0,     0,     0,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,     0,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
d1484 32
a1515 16
      71,    72,    73,    74,     0,   117,    75,   118,   174,   175,
     176,   177,   178,     0,     0,   179,   180,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   342,    77,    78,    79,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    86,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    87,     0,    88,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      17,    18,    19,    20,     0,   181,     0,     0,     0,     0,
       0,   182,   183,   184,   185,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,    42,    43,    44,
d1519 39
a1557 2
       0,   117,    75,   118,   174,   175,   176,   177,   178,     0,
       0,   179,   180,     0,     0,     0,     0,     0,     0,     0,
d1559 1
a1559 1
       0,    77,    78,    79,     0,     0,     0,     0,     0,     0,
a1563 1
       0,     0,    87,     0,    88,     0,     0,     0,     0,     0,
d1566 15
a1580 42
       0,     0,     0,     0,     0,     0,    17,    18,    19,    20,
       0,   181,     0,     0,   238,     0,     0,   182,   183,   184,
     185,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,     0,   117,    75,   118,
     174,   175,   176,   177,   178,     0,     0,   179,   180,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    77,    78,    79,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    87,     0,
      88,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    17,    18,    19,    20,     0,   181,     0,     0,
     323,     0,     0,   182,   183,   184,   185,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,     0,   117,    75,   118,   174,   175,   176,   177,
     178,     0,     0,   179,   180,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    77,    78,    79,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    87,     0,    88,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    17,    18,
      19,    20,     0,   181,     0,     0,   380,     0,     0,   182,
     183,   184,   185,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,    42,    43,    44,    45,    46,
d1583 9
a1591 73
      67,    68,    69,    70,    71,    72,    73,    74,     0,   117,
      75,   118,   174,   175,   176,   177,   178,     0,     0,   179,
     180,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    77,
      78,    79,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      87,     0,    88,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    17,    18,    19,    20,     0,   181,
       0,     0,     0,     0,     0,   182,   183,   184,   185,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,   278,     0,   117,    75,   118,   174,   175,
     176,   177,   178,     0,     0,   179,   180,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    77,    78,    79,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    87,     0,    88,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      17,    18,    19,    20,     0,   181,     0,     0,     0,     0,
       0,   182,   183,   184,   185,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,   401,
       0,   117,    75,   118,   174,   175,   176,   177,   178,     0,
       0,   179,   180,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    77,    78,    79,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    87,     0,    88,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    15,    16,    17,    18,    19,    20,
       0,   181,     0,     0,     0,     0,     0,   182,   183,   184,
     185,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,     0,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,     0,     0,    75,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    76,    77,    78,    79,
       0,    80,     0,     0,     0,     0,     0,     0,     0,    81,
      82,    83,    84,    85,    86,    17,    18,    19,    20,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,     0,     0,     0,     0,     0,     0,    87,     0,
      88,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,     0,     0,    75,    17,    18,
      19,    20,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,     0,    77,    78,    79,     0,
       0,     0,     0,     0,    41,    42,    43,    44,    45,    46,
d1594 49
a1642 4
      67,    68,    69,    70,    71,    72,    73,    74,     0,     0,
      75,     0,     0,     0,     0,     0,     0,    87,     0,    88,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d1645 1
d1647 1
a1647 3
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      87,     0,    88
d1650 6
d1658 99
a1756 43
       9,     8,    76,    76,    93,   169,   165,   171,   155,   151,
     235,    76,    77,    78,    76,    86,    87,   181,    88,    89,
     198,   198,     4,   265,   322,    99,   100,     3,     4,   394,
       9,     9,   201,   201,   217,   218,    98,    80,   216,   216,
     107,    33,    34,    84,    85,    37,   120,   412,   217,   217,
     151,    33,    34,    35,   111,   122,    32,    33,    34,     4,
      36,    37,     0,   222,   201,   115,    73,   201,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   179,   180,
     217,    90,   112,   217,   115,   383,   201,   115,    33,    34,
      35,    98,   101,   235,   258,   337,   321,   197,   262,   200,
     215,   265,   249,   328,   111,   201,   115,   405,   114,   273,
     408,    90,    90,   197,   202,   203,   197,   201,   416,   215,
     201,   115,   131,    90,    91,   214,   424,   198,   115,   200,
     115,   140,     3,     4,   235,   142,   236,   197,   197,   209,
     210,   201,   201,    76,    77,    78,   155,   154,   157,   313,
     197,   197,   196,   218,   379,   201,   165,   106,   107,   108,
     197,    32,    33,    34,   201,    36,    37,    38,    39,    40,
     218,   197,   201,   337,   198,   201,   196,   277,   196,   321,
     301,   302,   303,   304,   297,   298,   328,   115,   347,   216,
     299,   300,   292,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   274,   222,   314,   197,    76,    77,    78,   196,
     321,   217,   322,   387,   233,   232,   216,   328,   217,     3,
       4,   217,   391,    33,    34,    35,   196,   379,   196,   196,
     249,   206,   207,   208,   305,   306,   217,   411,   257,   215,
     196,   219,   196,   212,   197,   355,   265,   196,    32,    33,
      34,   270,    36,    37,    38,    39,    40,   274,   342,   342,
     429,   211,   213,    92,    94,   217,   196,   199,   379,   198,
      75,    80,   197,   383,   198,   216,   199,   196,   199,   201,
     197,   196,   216,   197,   217,   216,   199,   199,   197,   197,
     400,   218,    76,   403,    78,   405,   216,   199,   408,    12,
     216,   308,   307,   311,   141,   233,   416,   217,   309,   312,
     134,   253,   329,    80,   424,   233,   310,   157,   337,   329,
     257,    92,   412,   270,   392,   337,    90,   344,   347,    -1,
      -1,   257,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   391,    -1,    -1,   394,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   412,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
     429,    13,    14,    15,    16,    17,    18,    19,    20,    21,
d1763 7
a1769 1
      82,    83,    -1,    -1,    86,    87,    -1,    -1,    -1,    -1,
a1770 1
      -1,    -1,    -1,   105,   106,   107,   108,    -1,   110,    -1,
a1771 1
      -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a1773 1
      -1,    -1,    -1,    -1,    -1,   157,    -1,   159,    -1,    -1,
d1776 40
d1817 1
a1817 12
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   217,   218,   219,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    -1,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      -1,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a1818 2
     105,   106,   107,   108,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,
a1821 1
      -1,    -1,   157,    -1,   159,    -1,    -1,    -1,    -1,    -1,
d1825 3
a1827 3
      -1,   196,    -1,    -1,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   217,   218,   219,     3,     4,     5,     6,     7,
d1829 1
a1829 1
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
d1835 28
a1862 16
      78,    79,    80,    81,    82,    83,    -1,    -1,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,
     108,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   157,
      -1,   159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,
     218,   219,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    -1,    13,    14,    15,    16,    17,    18,    19,    20,
d1864 1
a1864 1
      31,    32,    33,    34,    -1,    36,    37,    38,    39,    40,
d1869 6
a1874 60
      81,    82,    83,    -1,    -1,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   105,   106,   107,   108,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   157,    -1,   159,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   217,   218,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    -1,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      -1,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     105,   106,   107,   108,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   157,    -1,   159,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,    -1,   202,   203,   204,
     205,     3,     4,     5,     6,     7,     8,    -1,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    -1,    -1,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   105,   106,   107,   108,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   123,    -1,     5,     6,     7,     8,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,   157,    -1,   159,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    -1,   196,    77,    -1,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,   107,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
d1876 1
a1876 1
      -1,    -1,    -1,    -1,    -1,   157,    -1,   159,    41,    42,
d1880 6
a1885 46
      73,    74,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,   157,    -1,   159,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      -1,    -1,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   219,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   157,    -1,   159,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,   202,   203,
     204,   205,     3,     4,     5,     6,     7,     8,    -1,    -1,
      -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    -1,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   105,   106,   107,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   157,    -1,   159,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,     6,     7,     8,    -1,   196,    -1,    -1,    -1,    -1,
      -1,   202,   203,   204,   205,    20,    21,    22,    23,    24,
d1891 7
a1897 51
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      -1,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   157,    -1,   159,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,     8,
      -1,   196,    -1,    -1,   199,    -1,    -1,   202,   203,   204,
     205,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    -1,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   157,    -1,
     159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     5,     6,     7,     8,    -1,   196,    -1,    -1,
     199,    -1,    -1,   202,   203,   204,   205,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    -1,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   157,    -1,   159,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,
       7,     8,    -1,   196,    -1,    -1,   199,    -1,    -1,   202,
     203,   204,   205,    20,    21,    22,    23,    24,    25,    26,
d1902 17
a1918 5
      67,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    -1,    -1,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1920 1
a1923 1
     157,    -1,   159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a1925 9
      -1,    -1,    -1,    -1,     5,     6,     7,     8,    -1,   196,
      -1,    -1,    -1,    -1,    -1,   202,   203,   204,   205,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    -1,    86,    87,    -1,    -1,    -1,
d1927 24
a1950 11
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   157,    -1,   159,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,     6,     7,     8,    -1,   196,    -1,    -1,    -1,    -1,
      -1,   202,   203,   204,   205,    20,    21,    22,    23,    24,
d1956 40
a1995 25
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      -1,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   157,    -1,   159,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,
      -1,   196,    -1,    -1,    -1,    -1,    -1,   202,   203,   204,
     205,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    -1,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
     119,   120,   121,   122,   123,     5,     6,     7,     8,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1997 2
a1998 2
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,   157,    -1,
     159,    41,    42,    43,    44,    45,    46,    47,    48,    49,
d2001 3
a2003 11
      70,    71,    72,    73,    74,    -1,    -1,    77,     5,     6,
       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,   106,   107,   108,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    -1,    -1,
      77,    -1,    -1,    -1,    -1,    -1,    -1,   157,    -1,   159,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d2006 1
d2008 1
a2008 3
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     157,    -1,   159
d2015 50
a2064 44
       0,   111,   221,   223,    80,     0,   225,   115,   112,   222,
     227,    76,    77,    78,   226,     3,     4,     5,     6,     7,
       8,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    77,   105,   106,   107,   108,
     110,   118,   119,   120,   121,   122,   123,   157,   159,   224,
     228,   262,   263,   264,   265,   266,   271,   272,   273,   274,
     277,   279,   280,   281,   282,   283,   284,   285,   286,   311,
     312,   114,    33,    34,    37,   218,   226,    76,    78,   229,
     277,   280,   285,   115,   115,   115,   115,   115,   196,   311,
     217,   218,   298,   197,   201,     4,    33,    34,    35,   268,
     269,   278,   201,   217,    76,    78,   226,   229,   280,   280,
     281,   198,   282,   226,   281,   287,   288,   218,   280,   282,
     226,   275,   276,     9,    10,    11,    13,    14,    15,    16,
      17,    18,    19,    75,    79,    80,    81,    82,    83,    86,
      87,   196,   202,   203,   204,   205,   217,   218,   219,   229,
     230,   231,   233,   234,   235,   236,   237,   238,   239,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   260,   262,   263,   281,   292,   293,
     294,   295,   299,   300,   301,   304,   305,   306,   310,   268,
     267,   270,   281,   269,   226,   198,   216,   196,   199,   244,
     257,   261,   281,   115,   226,   289,   290,   219,   288,   287,
     217,   216,   197,   201,   217,   217,   293,   196,   196,   217,
     217,   260,   196,   260,   215,   196,   244,   244,   260,   219,
     296,    86,    87,   198,   200,   197,   197,   201,    74,   258,
     196,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   216,   259,   244,   206,   207,   208,   202,   203,    84,
      85,    88,    89,   209,   210,    90,    91,   211,   212,   213,
      92,    94,    93,   214,   201,   217,   219,   293,   226,   267,
     270,   198,   216,   199,   261,   258,   291,   199,   198,   201,
     217,   219,    80,   276,    75,   292,   300,   307,   260,   217,
     260,   215,   105,   260,   273,   303,   197,   299,   232,   260,
     226,   229,   240,   241,   242,   243,   258,   258,   244,   244,
     244,   246,   246,   247,   247,   248,   248,   248,   248,   249,
     249,   250,   251,   252,   253,   254,   255,   260,   258,   198,
     199,   261,   291,   216,   199,   261,   290,   196,   303,   308,
     309,   197,   197,   226,   197,   219,   199,   196,   197,   197,
     201,    74,   258,   215,   261,   216,   199,   291,   216,   199,
     260,   217,   197,   293,   302,   295,   216,   294,   297,   298,
     258,   258,   199,   291,   216,   291,   197,   260,   297,    12,
     291,   291,   217,   293
d2079 4
a2082 1
   Once GCC version 2 has supplanted version 1, this can go.  */
d2085 6
d2094 12
a2105 12
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
a2114 1

a2118 1
#define YYRHSLOC(Rhs, K) ((Rhs)[K])
d2120 16
a2135 16
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
d2139 3
d2148 1
a2148 1
# if YYLTYPE_IS_TRIVIAL
d2164 1
a2164 1
# define YYLEX yylex (&yylval, &yylloc, scanner)
d2212 2
d2269 1
a2269 1
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
d2272 3
a2274 3
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
d2278 5
a2282 2
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
d2318 1
a2318 1
      fprintf (stderr, "   $%d = ", yyi + 1);
d2322 1
a2322 1
      fprintf (stderr, "\n");
a2358 1

d2461 11
a2471 9
/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
d2473 73
a2545 1
  int yyn = yypact[yystate];
d2547 1
a2547 3
  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
d2549 12
a2560 37
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;
d2562 13
a2574 2
      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);
d2576 19
a2594 49
      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
a2596 1

a2631 19


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (struct _mesa_glsl_parse_state *state);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


d2662 1
a2662 1
  /* The look-ahead symbol.  */
d2665 1
a2665 1
/* The semantic value of the look-ahead symbol.  */
d2668 1
a2668 3
/* Number of syntax errors so far.  */
int yynerrs;
/* Location data for the look-ahead symbol.  */
d2671 35
a2705 1
  int yystate;
d2708 7
a2714 4
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
a2721 25
  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;

  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[2];

a2723 7
  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

d2728 6
d2739 1
a2739 1
  yychar = YYEMPTY;		/* Cause a token to be read.  */
a2744 1

d2748 2
a2749 1
#if YYLTYPE_IS_TRIVIAL
d2752 1
a2752 1
  yylloc.first_column = yylloc.last_column = 0;
d2755 3
a2757 3

  /* User initialization code.  */
#line 41 "glsl_parser.yy"
d2765 2
a2766 2
/* Line 1078 of yacc.c.  */
#line 2817 "glsl_parser.cpp"
d2804 1
d2826 3
a2828 3
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
	YYSTACK_RELOCATE (yyls);
d2849 3
d2860 1
a2860 1
     look-ahead token if we need one and don't already have one.  */
d2862 1
a2862 1
  /* First try to decide what to do without reference to look-ahead token.  */
d2864 1
a2864 1
  if (yyn == YYPACT_NINF)
d2867 1
a2867 1
  /* Not known => get a look-ahead token if don't already have one.  */
d2869 1
a2869 1
  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
d2895 2
a2896 2
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
a2900 3
  if (yyn == YYFINAL)
    YYACCEPT;

d2906 1
a2906 1
  /* Shift the look-ahead token.  */
d2909 2
a2910 3
  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;
d2951 2
a2952 1
#line 218 "glsl_parser.yy"
d2954 2
a2955 2
	   _mesa_glsl_initialize_types(state);
	;}
d2959 2
a2960 1
#line 222 "glsl_parser.yy"
d2962 4
a2965 4
	   delete state->symbols;
	   state->symbols = new(ralloc_parent(state)) glsl_symbol_table;
	   _mesa_glsl_initialize_types(state);
	;}
d2969 13
a2981 1
#line 232 "glsl_parser.yy"
d2983 6
a2988 1
	   bool supported = false;
d2990 13
a3002 55
	   switch ((yyvsp[(2) - (3)].n)) {
	   case 100:
	      state->es_shader = true;
	      supported = state->Const.GLSL_100ES;
	      break;
	   case 110:
	      supported = state->Const.GLSL_110;
	      break;
	   case 120:
	      supported = state->Const.GLSL_120;
	      break;
	   case 130:
	      supported = state->Const.GLSL_130;
	      break;
	   default:
	      supported = false;
	      break;
	   }

	   state->language_version = (yyvsp[(2) - (3)].n);
	   state->version_string =
	      ralloc_asprintf(state, "GLSL%s %d.%02d",
			      state->es_shader ? " ES" : "",
			      state->language_version / 100,
			      state->language_version % 100);

	   if (!supported) {
	      _mesa_glsl_error(& (yylsp[(2) - (3)]), state, "%s is not supported. "
			       "Supported versions are: %s\n",
			       state->version_string,
			       state->supported_version_string);
	   }
	;}
    break;

  case 10:
#line 276 "glsl_parser.yy"
    {
	   if (state->language_version < 120) {
	      _mesa_glsl_warning(& (yylsp[(1) - (2)]), state,
				 "pragma `invariant(all)' not supported in %s",
				 state->version_string);
	   } else {
	      state->all_invariant = true;
	   }
	;}
    break;

  case 16:
#line 300 "glsl_parser.yy"
    {
	   if (!_mesa_glsl_process_extension((yyvsp[(2) - (5)].identifier), & (yylsp[(2) - (5)]), (yyvsp[(4) - (5)].identifier), & (yylsp[(4) - (5)]), state)) {
	      YYERROR;
	   }
	;}
d3006 2
a3007 1
#line 309 "glsl_parser.yy"
d3009 4
a3012 6
	   /* FINISHME: The NULL test is required because pragmas are set to
	    * FINISHME: NULL. (See production rule for external_declaration.)
	    */
	   if ((yyvsp[(1) - (1)].node) != NULL)
	      state->translation_unit.push_tail(& (yyvsp[(1) - (1)].node)->link);
	;}
d3016 2
a3017 1
#line 317 "glsl_parser.yy"
d3019 18
a3036 16
	   /* FINISHME: The NULL test is required because pragmas are set to
	    * FINISHME: NULL. (See production rule for external_declaration.)
	    */
	   if ((yyvsp[(2) - (2)].node) != NULL)
	      state->translation_unit.push_tail(& (yyvsp[(2) - (2)].node)->link);
	;}
    break;

  case 21:
#line 333 "glsl_parser.yy"
    {
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression(ast_identifier, NULL, NULL, NULL);
	   (yyval.expression)->set_location(yylloc);
	   (yyval.expression)->primary_expression.identifier = (yyvsp[(1) - (1)].identifier);
	;}
d3040 2
a3041 1
#line 340 "glsl_parser.yy"
d3043 5
a3047 5
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression(ast_int_constant, NULL, NULL, NULL);
	   (yyval.expression)->set_location(yylloc);
	   (yyval.expression)->primary_expression.int_constant = (yyvsp[(1) - (1)].n);
	;}
d3051 2
a3052 1
#line 347 "glsl_parser.yy"
d3054 5
a3058 5
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression(ast_uint_constant, NULL, NULL, NULL);
	   (yyval.expression)->set_location(yylloc);
	   (yyval.expression)->primary_expression.uint_constant = (yyvsp[(1) - (1)].n);
	;}
d3062 2
a3063 1
#line 354 "glsl_parser.yy"
d3065 5
a3069 5
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression(ast_float_constant, NULL, NULL, NULL);
	   (yyval.expression)->set_location(yylloc);
	   (yyval.expression)->primary_expression.float_constant = (yyvsp[(1) - (1)].real);
	;}
d3073 2
a3074 1
#line 361 "glsl_parser.yy"
d3076 5
a3080 5
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression(ast_bool_constant, NULL, NULL, NULL);
	   (yyval.expression)->set_location(yylloc);
	   (yyval.expression)->primary_expression.bool_constant = (yyvsp[(1) - (1)].n);
	;}
d3084 2
a3085 1
#line 368 "glsl_parser.yy"
d3087 10
a3096 6
	   (yyval.expression) = (yyvsp[(2) - (3)].expression);
	;}
    break;

  case 28:
#line 376 "glsl_parser.yy"
d3098 2
a3099 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression(ast_array_index, (yyvsp[(1) - (4)].expression), (yyvsp[(3) - (4)].expression), NULL);
	   (yyval.expression)->set_location(yylloc);
	;}
d3103 2
a3104 1
#line 382 "glsl_parser.yy"
d3106 4
a3109 2
	   (yyval.expression) = (yyvsp[(1) - (1)].expression);
	;}
d3113 2
a3114 1
#line 386 "glsl_parser.yy"
d3116 2
a3117 5
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression(ast_field_selection, (yyvsp[(1) - (3)].expression), NULL, NULL);
	   (yyval.expression)->set_location(yylloc);
	   (yyval.expression)->primary_expression.identifier = (yyvsp[(3) - (3)].identifier);
	;}
d3121 2
a3122 1
#line 393 "glsl_parser.yy"
d3124 5
a3128 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression(ast_post_inc, (yyvsp[(1) - (2)].expression), NULL, NULL);
	   (yyval.expression)->set_location(yylloc);
	;}
d3132 2
a3133 1
#line 399 "glsl_parser.yy"
d3135 4
a3138 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression(ast_post_dec, (yyvsp[(1) - (2)].expression), NULL, NULL);
	   (yyval.expression)->set_location(yylloc);
	;}
d3141 3
a3143 2
  case 36:
#line 417 "glsl_parser.yy"
d3145 4
a3148 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression(ast_field_selection, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression), NULL);
	   (yyval.expression)->set_location(yylloc);
	;}
d3151 3
a3153 2
  case 41:
#line 436 "glsl_parser.yy"
d3155 4
a3158 4
	   (yyval.expression) = (yyvsp[(1) - (2)].expression);
	   (yyval.expression)->set_location(yylloc);
	   (yyval.expression)->expressions.push_tail(& (yyvsp[(2) - (2)].expression)->link);
	;}
d3162 2
a3163 1
#line 442 "glsl_parser.yy"
d3165 14
a3178 4
	   (yyval.expression) = (yyvsp[(1) - (3)].expression);
	   (yyval.expression)->set_location(yylloc);
	   (yyval.expression)->expressions.push_tail(& (yyvsp[(3) - (3)].expression)->link);
	;}
d3181 3
a3183 2
  case 44:
#line 458 "glsl_parser.yy"
d3185 4
a3188 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_function_expression((yyvsp[(1) - (1)].type_specifier));
	   (yyval.expression)->set_location(yylloc);
   	;}
d3191 3
a3193 2
  case 45:
#line 464 "glsl_parser.yy"
d3195 5
a3199 5
	   void *ctx = state;
	   ast_expression *callee = new(ctx) ast_expression((yyvsp[(1) - (1)].identifier));
	   (yyval.expression) = new(ctx) ast_function_expression(callee);
	   (yyval.expression)->set_location(yylloc);
   	;}
d3202 9
a3210 17
  case 46:
#line 471 "glsl_parser.yy"
    {
	   void *ctx = state;
	   ast_expression *callee = new(ctx) ast_expression((yyvsp[(1) - (1)].identifier));
	   (yyval.expression) = new(ctx) ast_function_expression(callee);
	   (yyval.expression)->set_location(yylloc);
   	;}
    break;

  case 51:
#line 491 "glsl_parser.yy"
    {
	   (yyval.expression) = (yyvsp[(1) - (2)].expression);
	   (yyval.expression)->set_location(yylloc);
	   (yyval.expression)->expressions.push_tail(& (yyvsp[(2) - (2)].expression)->link);
	;}
d3214 2
a3215 1
#line 497 "glsl_parser.yy"
d3217 4
a3220 4
	   (yyval.expression) = (yyvsp[(1) - (3)].expression);
	   (yyval.expression)->set_location(yylloc);
	   (yyval.expression)->expressions.push_tail(& (yyvsp[(3) - (3)].expression)->link);
	;}
d3224 2
a3225 1
#line 509 "glsl_parser.yy"
d3227 15
a3241 14
	   void *ctx = state;
	   ast_expression *callee = new(ctx) ast_expression((yyvsp[(1) - (2)].identifier));
	   (yyval.expression) = new(ctx) ast_function_expression(callee);
	   (yyval.expression)->set_location(yylloc);
   	;}
    break;

  case 55:
#line 521 "glsl_parser.yy"
    {
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression(ast_pre_inc, (yyvsp[(2) - (2)].expression), NULL, NULL);
	   (yyval.expression)->set_location(yylloc);
	;}
d3245 2
a3246 1
#line 527 "glsl_parser.yy"
d3248 4
a3251 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression(ast_pre_dec, (yyvsp[(2) - (2)].expression), NULL, NULL);
	   (yyval.expression)->set_location(yylloc);
	;}
d3255 2
a3256 1
#line 533 "glsl_parser.yy"
d3258 4
a3261 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression((yyvsp[(1) - (2)].n), (yyvsp[(2) - (2)].expression), NULL, NULL);
	   (yyval.expression)->set_location(yylloc);
	;}
d3265 7
a3271 2
#line 542 "glsl_parser.yy"
    { (yyval.n) = ast_plus; ;}
d3275 3
a3277 2
#line 543 "glsl_parser.yy"
    { (yyval.n) = ast_neg; ;}
d3281 3
a3283 2
#line 544 "glsl_parser.yy"
    { (yyval.n) = ast_logic_not; ;}
d3287 3
a3289 2
#line 545 "glsl_parser.yy"
    { (yyval.n) = ast_bit_not; ;}
d3292 4
a3295 7
  case 63:
#line 551 "glsl_parser.yy"
    {
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_mul, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3299 2
a3300 1
#line 557 "glsl_parser.yy"
d3302 4
a3305 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_div, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3309 2
a3310 1
#line 563 "glsl_parser.yy"
d3312 14
a3325 13
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_mod, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
    break;

  case 67:
#line 573 "glsl_parser.yy"
    {
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_add, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3329 2
a3330 10
#line 579 "glsl_parser.yy"
    {
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_sub, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
    break;

  case 70:
#line 589 "glsl_parser.yy"
d3332 14
a3345 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_lshift, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3349 2
a3350 10
#line 595 "glsl_parser.yy"
    {
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_rshift, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
    break;

  case 73:
#line 605 "glsl_parser.yy"
d3352 14
a3365 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_less, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3369 2
a3370 1
#line 611 "glsl_parser.yy"
d3372 4
a3375 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_greater, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3379 2
a3380 1
#line 617 "glsl_parser.yy"
d3382 4
a3385 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_lequal, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3389 2
a3390 10
#line 623 "glsl_parser.yy"
    {
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_gequal, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
    break;

  case 78:
#line 633 "glsl_parser.yy"
d3392 14
a3405 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_equal, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3409 2
a3410 1
#line 639 "glsl_parser.yy"
d3412 4
a3415 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_nequal, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3418 3
a3420 2
  case 81:
#line 649 "glsl_parser.yy"
d3422 4
a3425 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_and, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3428 3
a3430 2
  case 83:
#line 659 "glsl_parser.yy"
d3432 4
a3435 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_xor, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3438 3
a3440 2
  case 85:
#line 669 "glsl_parser.yy"
d3442 4
a3445 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_or, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3448 3
a3450 2
  case 87:
#line 679 "glsl_parser.yy"
d3452 4
a3455 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_and, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3458 3
a3460 2
  case 89:
#line 689 "glsl_parser.yy"
d3462 4
a3465 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_xor, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3468 3
a3470 2
  case 91:
#line 699 "glsl_parser.yy"
d3472 4
a3475 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_or, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3478 3
a3480 2
  case 93:
#line 709 "glsl_parser.yy"
d3482 4
a3485 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression(ast_conditional, (yyvsp[(1) - (5)].expression), (yyvsp[(3) - (5)].expression), (yyvsp[(5) - (5)].expression));
	   (yyval.expression)->set_location(yylloc);
	;}
d3488 3
a3490 2
  case 95:
#line 719 "glsl_parser.yy"
d3492 4
a3495 4
	   void *ctx = state;
	   (yyval.expression) = new(ctx) ast_expression((yyvsp[(2) - (3)].n), (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression), NULL);
	   (yyval.expression)->set_location(yylloc);
	;}
d3499 7
a3505 2
#line 727 "glsl_parser.yy"
    { (yyval.n) = ast_assign; ;}
d3509 3
a3511 2
#line 728 "glsl_parser.yy"
    { (yyval.n) = ast_mul_assign; ;}
d3515 3
a3517 2
#line 729 "glsl_parser.yy"
    { (yyval.n) = ast_div_assign; ;}
d3521 3
a3523 2
#line 730 "glsl_parser.yy"
    { (yyval.n) = ast_mod_assign; ;}
d3527 3
a3529 2
#line 731 "glsl_parser.yy"
    { (yyval.n) = ast_add_assign; ;}
d3533 3
a3535 2
#line 732 "glsl_parser.yy"
    { (yyval.n) = ast_sub_assign; ;}
d3539 3
a3541 2
#line 733 "glsl_parser.yy"
    { (yyval.n) = ast_ls_assign; ;}
d3545 3
a3547 2
#line 734 "glsl_parser.yy"
    { (yyval.n) = ast_rs_assign; ;}
d3551 3
a3553 2
#line 735 "glsl_parser.yy"
    { (yyval.n) = ast_and_assign; ;}
d3557 3
a3559 2
#line 736 "glsl_parser.yy"
    { (yyval.n) = ast_xor_assign; ;}
d3563 3
a3565 2
#line 737 "glsl_parser.yy"
    { (yyval.n) = ast_or_assign; ;}
d3569 3
a3571 4
#line 742 "glsl_parser.yy"
    {
	   (yyval.expression) = (yyvsp[(1) - (1)].expression);
	;}
d3575 2
a3576 1
#line 746 "glsl_parser.yy"
d3578 19
a3596 19
	   void *ctx = state;
	   if ((yyvsp[(1) - (3)].expression)->oper != ast_sequence) {
	      (yyval.expression) = new(ctx) ast_expression(ast_sequence, NULL, NULL, NULL);
	      (yyval.expression)->set_location(yylloc);
	      (yyval.expression)->expressions.push_tail(& (yyvsp[(1) - (3)].expression)->link);
	   } else {
	      (yyval.expression) = (yyvsp[(1) - (3)].expression);
	   }

	   (yyval.expression)->expressions.push_tail(& (yyvsp[(3) - (3)].expression)->link);
	;}
    break;

  case 110:
#line 766 "glsl_parser.yy"
    {
	   state->symbols->pop_scope();
	   (yyval.node) = (yyvsp[(1) - (2)].function);
	;}
d3600 2
a3601 1
#line 771 "glsl_parser.yy"
d3603 3
a3605 2
	   (yyval.node) = (yyvsp[(1) - (2)].declarator_list);
	;}
d3609 2
a3610 1
#line 775 "glsl_parser.yy"
d3612 2
a3613 4
	   (yyvsp[(3) - (4)].type_specifier)->precision = (yyvsp[(2) - (4)].n);
	   (yyvsp[(3) - (4)].type_specifier)->is_precision_statement = true;
	   (yyval.node) = (yyvsp[(3) - (4)].type_specifier);
	;}
d3616 3
a3618 2
  case 116:
#line 793 "glsl_parser.yy"
d3620 3
a3622 3
	   (yyval.function) = (yyvsp[(1) - (2)].function);
	   (yyval.function)->parameters.push_tail(& (yyvsp[(2) - (2)].parameter_declarator)->link);
	;}
d3625 3
a3627 2
  case 117:
#line 798 "glsl_parser.yy"
d3629 2
a3630 3
	   (yyval.function) = (yyvsp[(1) - (3)].function);
	   (yyval.function)->parameters.push_tail(& (yyvsp[(3) - (3)].parameter_declarator)->link);
	;}
d3634 2
a3635 1
#line 806 "glsl_parser.yy"
d3637 3
a3639 9
	   void *ctx = state;
	   (yyval.function) = new(ctx) ast_function();
	   (yyval.function)->set_location(yylloc);
	   (yyval.function)->return_type = (yyvsp[(1) - (3)].fully_specified_type);
	   (yyval.function)->identifier = (yyvsp[(2) - (3)].identifier);

	   state->symbols->add_function(new(state) ir_function((yyvsp[(2) - (3)].identifier)));
	   state->symbols->push_scope();
	;}
d3643 2
a3644 1
#line 820 "glsl_parser.yy"
d3646 3
a3648 8
	   void *ctx = state;
	   (yyval.parameter_declarator) = new(ctx) ast_parameter_declarator();
	   (yyval.parameter_declarator)->set_location(yylloc);
	   (yyval.parameter_declarator)->type = new(ctx) ast_fully_specified_type();
	   (yyval.parameter_declarator)->type->set_location(yylloc);
	   (yyval.parameter_declarator)->type->specifier = (yyvsp[(1) - (2)].type_specifier);
	   (yyval.parameter_declarator)->identifier = (yyvsp[(2) - (2)].identifier);
	;}
d3652 2
a3653 1
#line 830 "glsl_parser.yy"
d3655 9
a3663 10
	   void *ctx = state;
	   (yyval.parameter_declarator) = new(ctx) ast_parameter_declarator();
	   (yyval.parameter_declarator)->set_location(yylloc);
	   (yyval.parameter_declarator)->type = new(ctx) ast_fully_specified_type();
	   (yyval.parameter_declarator)->type->set_location(yylloc);
	   (yyval.parameter_declarator)->type->specifier = (yyvsp[(1) - (5)].type_specifier);
	   (yyval.parameter_declarator)->identifier = (yyvsp[(2) - (5)].identifier);
	   (yyval.parameter_declarator)->is_array = true;
	   (yyval.parameter_declarator)->array_size = (yyvsp[(4) - (5)].expression);
	;}
d3667 2
a3668 1
#line 845 "glsl_parser.yy"
d3670 8
a3677 5
	   (yyvsp[(1) - (3)].type_qualifier).flags.i |= (yyvsp[(2) - (3)].type_qualifier).flags.i;

	   (yyval.parameter_declarator) = (yyvsp[(3) - (3)].parameter_declarator);
	   (yyval.parameter_declarator)->type->qualifier = (yyvsp[(1) - (3)].type_qualifier);
	;}
d3681 2
a3682 1
#line 852 "glsl_parser.yy"
d3684 10
a3693 3
	   (yyval.parameter_declarator) = (yyvsp[(2) - (2)].parameter_declarator);
	   (yyval.parameter_declarator)->type->qualifier = (yyvsp[(1) - (2)].type_qualifier);
	;}
d3697 2
a3698 1
#line 857 "glsl_parser.yy"
d3700 3
a3702 9
	   void *ctx = state;
	   (yyvsp[(1) - (3)].type_qualifier).flags.i |= (yyvsp[(2) - (3)].type_qualifier).flags.i;

	   (yyval.parameter_declarator) = new(ctx) ast_parameter_declarator();
	   (yyval.parameter_declarator)->set_location(yylloc);
	   (yyval.parameter_declarator)->type = new(ctx) ast_fully_specified_type();
	   (yyval.parameter_declarator)->type->qualifier = (yyvsp[(1) - (3)].type_qualifier);
	   (yyval.parameter_declarator)->type->specifier = (yyvsp[(3) - (3)].type_specifier);
	;}
d3706 2
a3707 1
#line 868 "glsl_parser.yy"
d3709 7
a3715 7
	   void *ctx = state;
	   (yyval.parameter_declarator) = new(ctx) ast_parameter_declarator();
	   (yyval.parameter_declarator)->set_location(yylloc);
	   (yyval.parameter_declarator)->type = new(ctx) ast_fully_specified_type();
	   (yyval.parameter_declarator)->type->qualifier = (yyvsp[(1) - (2)].type_qualifier);
	   (yyval.parameter_declarator)->type->specifier = (yyvsp[(2) - (2)].type_specifier);
	;}
d3719 2
a3720 1
#line 880 "glsl_parser.yy"
d3722 2
a3723 2
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	;}
d3727 2
a3728 1
#line 884 "glsl_parser.yy"
d3730 6
a3735 3
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.in = 1;
	;}
d3739 2
a3740 1
#line 889 "glsl_parser.yy"
d3742 10
a3751 3
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.out = 1;
	;}
d3755 2
a3756 1
#line 894 "glsl_parser.yy"
d3758 9
a3766 4
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.in = 1;
	   (yyval.type_qualifier).flags.q.out = 1;
	;}
d3769 3
a3771 2
  case 131:
#line 908 "glsl_parser.yy"
d3773 3
a3775 8
	   void *ctx = state;
	   ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (3)].identifier), false, NULL, NULL);
	   decl->set_location(yylloc);

	   (yyval.declarator_list) = (yyvsp[(1) - (3)].declarator_list);
	   (yyval.declarator_list)->declarations.push_tail(&decl->link);
	   state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (3)].identifier), ir_var_auto));
	;}
d3778 3
a3780 2
  case 132:
#line 918 "glsl_parser.yy"
d3782 3
a3784 8
	   void *ctx = state;
	   ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (5)].identifier), true, NULL, NULL);
	   decl->set_location(yylloc);

	   (yyval.declarator_list) = (yyvsp[(1) - (5)].declarator_list);
	   (yyval.declarator_list)->declarations.push_tail(&decl->link);
	   state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (5)].identifier), ir_var_auto));
	;}
d3787 3
a3789 2
  case 133:
#line 928 "glsl_parser.yy"
d3791 4
a3794 8
	   void *ctx = state;
	   ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (6)].identifier), true, (yyvsp[(5) - (6)].expression), NULL);
	   decl->set_location(yylloc);

	   (yyval.declarator_list) = (yyvsp[(1) - (6)].declarator_list);
	   (yyval.declarator_list)->declarations.push_tail(&decl->link);
	   state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (6)].identifier), ir_var_auto));
	;}
d3798 2
a3799 1
#line 938 "glsl_parser.yy"
d3801 8
a3808 8
	   void *ctx = state;
	   ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (7)].identifier), true, NULL, (yyvsp[(7) - (7)].expression));
	   decl->set_location(yylloc);

	   (yyval.declarator_list) = (yyvsp[(1) - (7)].declarator_list);
	   (yyval.declarator_list)->declarations.push_tail(&decl->link);
	   state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (7)].identifier), ir_var_auto));
	;}
d3812 2
a3813 1
#line 948 "glsl_parser.yy"
d3815 8
a3822 8
	   void *ctx = state;
	   ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (8)].identifier), true, (yyvsp[(5) - (8)].expression), (yyvsp[(8) - (8)].expression));
	   decl->set_location(yylloc);

	   (yyval.declarator_list) = (yyvsp[(1) - (8)].declarator_list);
	   (yyval.declarator_list)->declarations.push_tail(&decl->link);
	   state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (8)].identifier), ir_var_auto));
	;}
d3826 2
a3827 1
#line 958 "glsl_parser.yy"
d3829 8
a3836 8
	   void *ctx = state;
	   ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (5)].identifier), false, NULL, (yyvsp[(5) - (5)].expression));
	   decl->set_location(yylloc);

	   (yyval.declarator_list) = (yyvsp[(1) - (5)].declarator_list);
	   (yyval.declarator_list)->declarations.push_tail(&decl->link);
	   state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (5)].identifier), ir_var_auto));
	;}
d3840 2
a3841 1
#line 972 "glsl_parser.yy"
d3843 13
a3855 5
	   void *ctx = state;
	   /* Empty declaration list is valid. */
	   (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (1)].fully_specified_type));
	   (yyval.declarator_list)->set_location(yylloc);
	;}
d3859 2
a3860 1
#line 979 "glsl_parser.yy"
d3862 13
a3874 7
	   void *ctx = state;
	   ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (2)].identifier), false, NULL, NULL);

	   (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (2)].fully_specified_type));
	   (yyval.declarator_list)->set_location(yylloc);
	   (yyval.declarator_list)->declarations.push_tail(&decl->link);
	;}
d3878 2
a3879 1
#line 988 "glsl_parser.yy"
d3881 12
a3892 7
	   void *ctx = state;
	   ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (4)].identifier), true, NULL, NULL);

	   (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (4)].fully_specified_type));
	   (yyval.declarator_list)->set_location(yylloc);
	   (yyval.declarator_list)->declarations.push_tail(&decl->link);
	;}
d3896 2
a3897 1
#line 997 "glsl_parser.yy"
d3899 5
a3903 7
	   void *ctx = state;
	   ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (5)].identifier), true, (yyvsp[(4) - (5)].expression), NULL);

	   (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (5)].fully_specified_type));
	   (yyval.declarator_list)->set_location(yylloc);
	   (yyval.declarator_list)->declarations.push_tail(&decl->link);
	;}
d3907 2
a3908 1
#line 1006 "glsl_parser.yy"
d3910 2
a3911 2
	   void *ctx = state;
	   ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (6)].identifier), true, NULL, (yyvsp[(6) - (6)].expression));
d3913 4
a3916 4
	   (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (6)].fully_specified_type));
	   (yyval.declarator_list)->set_location(yylloc);
	   (yyval.declarator_list)->declarations.push_tail(&decl->link);
	;}
d3920 2
a3921 1
#line 1015 "glsl_parser.yy"
d3923 2
a3924 2
	   void *ctx = state;
	   ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (7)].identifier), true, (yyvsp[(4) - (7)].expression), (yyvsp[(7) - (7)].expression));
d3926 4
a3929 4
	   (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (7)].fully_specified_type));
	   (yyval.declarator_list)->set_location(yylloc);
	   (yyval.declarator_list)->declarations.push_tail(&decl->link);
	;}
d3933 2
a3934 1
#line 1024 "glsl_parser.yy"
d3936 2
a3937 2
	   void *ctx = state;
	   ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (4)].identifier), false, NULL, (yyvsp[(4) - (4)].expression));
d3939 4
a3942 4
	   (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (4)].fully_specified_type));
	   (yyval.declarator_list)->set_location(yylloc);
	   (yyval.declarator_list)->declarations.push_tail(&decl->link);
	;}
d3946 2
a3947 1
#line 1033 "glsl_parser.yy"
d3949 2
a3950 2
	   void *ctx = state;
	   ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (2)].identifier), false, NULL, NULL);
d3952 9
a3960 6
	   (yyval.declarator_list) = new(ctx) ast_declarator_list(NULL);
	   (yyval.declarator_list)->set_location(yylloc);
	   (yyval.declarator_list)->invariant = true;

	   (yyval.declarator_list)->declarations.push_tail(&decl->link);
	;}
d3964 2
a3965 1
#line 1047 "glsl_parser.yy"
d3967 12
a3978 5
	   void *ctx = state;
	   (yyval.fully_specified_type) = new(ctx) ast_fully_specified_type();
	   (yyval.fully_specified_type)->set_location(yylloc);
	   (yyval.fully_specified_type)->specifier = (yyvsp[(1) - (1)].type_specifier);
	;}
d3982 2
a3983 1
#line 1054 "glsl_parser.yy"
d3985 10
a3994 6
	   void *ctx = state;
	   (yyval.fully_specified_type) = new(ctx) ast_fully_specified_type();
	   (yyval.fully_specified_type)->set_location(yylloc);
	   (yyval.fully_specified_type)->qualifier = (yyvsp[(1) - (2)].type_qualifier);
	   (yyval.fully_specified_type)->specifier = (yyvsp[(2) - (2)].type_specifier);
	;}
d3998 2
a3999 1
#line 1065 "glsl_parser.yy"
d4001 20
a4020 2
	  (yyval.type_qualifier) = (yyvsp[(3) - (4)].type_qualifier);
	;}
d4024 2
a4025 1
#line 1073 "glsl_parser.yy"
d4027 6
a4032 14
	   if (((yyvsp[(1) - (3)].type_qualifier).flags.i & (yyvsp[(3) - (3)].type_qualifier).flags.i) != 0) {
	      _mesa_glsl_error(& (yylsp[(3) - (3)]), state,
			       "duplicate layout qualifiers used\n");
	      YYERROR;
	   }

	   (yyval.type_qualifier).flags.i = (yyvsp[(1) - (3)].type_qualifier).flags.i | (yyvsp[(3) - (3)].type_qualifier).flags.i;

	   if ((yyvsp[(1) - (3)].type_qualifier).flags.q.explicit_location)
	      (yyval.type_qualifier).location = (yyvsp[(1) - (3)].type_qualifier).location;

	   if ((yyvsp[(3) - (3)].type_qualifier).flags.q.explicit_location)
	      (yyval.type_qualifier).location = (yyvsp[(3) - (3)].type_qualifier).location;
	;}
d4036 2
a4037 1
#line 1092 "glsl_parser.yy"
d4039 2
a4040 91
	   bool got_one = false;

	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));

	   /* Layout qualifiers for ARB_fragment_coord_conventions. */
	   if (!got_one && state->ARB_fragment_coord_conventions_enable) {
	      if (strcmp((yyvsp[(1) - (1)].identifier), "origin_upper_left") == 0) {
		 got_one = true;
		 (yyval.type_qualifier).flags.q.origin_upper_left = 1;
	      } else if (strcmp((yyvsp[(1) - (1)].identifier), "pixel_center_integer") == 0) {
		 got_one = true;
		 (yyval.type_qualifier).flags.q.pixel_center_integer = 1;
	      }

	      if (got_one && state->ARB_fragment_coord_conventions_warn) {
		 _mesa_glsl_warning(& (yylsp[(1) - (1)]), state,
				    "GL_ARB_fragment_coord_conventions layout "
				    "identifier `%s' used\n", (yyvsp[(1) - (1)].identifier));
	      }
	   }

	   /* Layout qualifiers for AMD_conservative_depth. */
	   if (!got_one && state->AMD_conservative_depth_enable) {
	      if (strcmp((yyvsp[(1) - (1)].identifier), "depth_any") == 0) {
	         got_one = true;
	         (yyval.type_qualifier).flags.q.depth_any = 1;
	      } else if (strcmp((yyvsp[(1) - (1)].identifier), "depth_greater") == 0) {
	         got_one = true;
	         (yyval.type_qualifier).flags.q.depth_greater = 1;
	      } else if (strcmp((yyvsp[(1) - (1)].identifier), "depth_less") == 0) {
	         got_one = true;
	         (yyval.type_qualifier).flags.q.depth_less = 1;
	      } else if (strcmp((yyvsp[(1) - (1)].identifier), "depth_unchanged") == 0) {
	         got_one = true;
	         (yyval.type_qualifier).flags.q.depth_unchanged = 1;
	      }
	
	      if (got_one && state->AMD_conservative_depth_warn) {
	         _mesa_glsl_warning(& (yylsp[(1) - (1)]), state,
	                            "GL_AMD_conservative_depth "
	                            "layout qualifier `%s' is used\n", (yyvsp[(1) - (1)].identifier));
	      }
	   }

	   if (!got_one) {
	      _mesa_glsl_error(& (yylsp[(1) - (1)]), state, "unrecognized layout identifier "
			       "`%s'\n", (yyvsp[(1) - (1)].identifier));
	      YYERROR;
	   }
	;}
    break;

  case 151:
#line 1144 "glsl_parser.yy"
    {
	   bool got_one = false;

	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));

	   if (state->ARB_explicit_attrib_location_enable) {
	      /* FINISHME: Handle 'index' once GL_ARB_blend_func_exteneded and
	       * FINISHME: GLSL 1.30 (or later) are supported.
	       */
	      if (strcmp("location", (yyvsp[(1) - (3)].identifier)) == 0) {
		 got_one = true;

		 (yyval.type_qualifier).flags.q.explicit_location = 1;

		 if ((yyvsp[(3) - (3)].n) >= 0) {
		    (yyval.type_qualifier).location = (yyvsp[(3) - (3)].n);
		 } else {
		    _mesa_glsl_error(& (yylsp[(3) - (3)]), state,
				     "invalid location %d specified\n", (yyvsp[(3) - (3)].n));
		    YYERROR;
		 }
	      }
	   }

	   /* If the identifier didn't match any known layout identifiers,
	    * emit an error.
	    */
	   if (!got_one) {
	      _mesa_glsl_error(& (yylsp[(1) - (3)]), state, "unrecognized layout identifier "
			       "`%s'\n", (yyvsp[(1) - (3)].identifier));
	      YYERROR;
	   } else if (state->ARB_explicit_attrib_location_warn) {
	      _mesa_glsl_warning(& (yylsp[(1) - (3)]), state,
				 "GL_ARB_explicit_attrib_location layout "
				 "identifier `%s' used\n", (yyvsp[(1) - (3)].identifier));
	   }
	;}
d4044 2
a4045 1
#line 1185 "glsl_parser.yy"
d4047 5
a4051 3
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.smooth = 1;
	;}
d4055 3
a4057 5
#line 1190 "glsl_parser.yy"
    {
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.flat = 1;
	;}
d4061 3
a4063 5
#line 1195 "glsl_parser.yy"
    {
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.noperspective = 1;
	;}
d4067 2
a4068 1
#line 1203 "glsl_parser.yy"
d4070 74
a4143 3
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.constant = 1;
	;}
d4146 37
a4182 7
  case 158:
#line 1213 "glsl_parser.yy"
    {
	   (yyval.type_qualifier) = (yyvsp[(1) - (2)].type_qualifier);
	   (yyval.type_qualifier).flags.i |= (yyvsp[(2) - (2)].type_qualifier).flags.i;
	;}
    break;
d4184 13
a4196 6
  case 160:
#line 1219 "glsl_parser.yy"
    {
	   (yyval.type_qualifier) = (yyvsp[(1) - (2)].type_qualifier);
	   (yyval.type_qualifier).flags.i |= (yyvsp[(2) - (2)].type_qualifier).flags.i;
	;}
d4199 16
a4214 6
  case 161:
#line 1224 "glsl_parser.yy"
    {
	   (yyval.type_qualifier) = (yyvsp[(2) - (2)].type_qualifier);
	   (yyval.type_qualifier).flags.q.invariant = 1;
	;}
d4217 3
a4219 2
  case 162:
#line 1229 "glsl_parser.yy"
d4221 3
a4223 4
	   (yyval.type_qualifier) = (yyvsp[(2) - (3)].type_qualifier);
	   (yyval.type_qualifier).flags.i |= (yyvsp[(3) - (3)].type_qualifier).flags.i;
	   (yyval.type_qualifier).flags.q.invariant = 1;
	;}
d4226 3
a4228 2
  case 163:
#line 1235 "glsl_parser.yy"
d4230 3
a4232 3
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.invariant = 1;
	;}
d4235 3
a4237 2
  case 164:
#line 1243 "glsl_parser.yy"
d4239 3
a4241 3
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.constant = 1;
	;}
d4244 3
a4246 2
  case 165:
#line 1248 "glsl_parser.yy"
d4248 3
a4250 3
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.attribute = 1;
	;}
d4253 3
a4255 2
  case 166:
#line 1253 "glsl_parser.yy"
d4257 3
a4259 3
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.varying = 1;
	;}
d4262 3
a4264 2
  case 167:
#line 1258 "glsl_parser.yy"
d4266 3
a4268 4
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.centroid = 1;
	   (yyval.type_qualifier).flags.q.varying = 1;
	;}
d4272 2
a4273 1
#line 1264 "glsl_parser.yy"
d4275 3
a4277 3
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.in = 1;
	;}
d4281 2
a4282 1
#line 1269 "glsl_parser.yy"
d4284 11
a4294 3
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.out = 1;
	;}
d4298 2
a4299 1
#line 1274 "glsl_parser.yy"
d4301 26
a4326 3
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.centroid = 1; (yyval.type_qualifier).flags.q.in = 1;
	;}
d4330 2
a4331 1
#line 1279 "glsl_parser.yy"
d4333 21
a4353 3
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.centroid = 1; (yyval.type_qualifier).flags.q.out = 1;
	;}
d4357 21
a4377 1
#line 1284 "glsl_parser.yy"
d4379 18
a4396 3
	   memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
	   (yyval.type_qualifier).flags.q.uniform = 1;
	;}
d4399 3
a4401 2
  case 173:
#line 1292 "glsl_parser.yy"
d4403 9
a4411 2
	   (yyval.type_specifier) = (yyvsp[(1) - (1)].type_specifier);
	;}
d4414 3
a4416 2
  case 174:
#line 1296 "glsl_parser.yy"
d4418 3
a4420 3
	   (yyval.type_specifier) = (yyvsp[(2) - (2)].type_specifier);
	   (yyval.type_specifier)->precision = (yyvsp[(1) - (2)].n);
	;}
d4424 2
a4425 1
#line 1305 "glsl_parser.yy"
d4427 3
a4429 4
	   (yyval.type_specifier) = (yyvsp[(1) - (3)].type_specifier);
	   (yyval.type_specifier)->is_array = true;
	   (yyval.type_specifier)->array_size = NULL;
	;}
d4433 2
a4434 1
#line 1311 "glsl_parser.yy"
d4436 3
a4438 4
	   (yyval.type_specifier) = (yyvsp[(1) - (4)].type_specifier);
	   (yyval.type_specifier)->is_array = true;
	   (yyval.type_specifier)->array_size = (yyvsp[(3) - (4)].expression);
	;}
d4442 2
a4443 1
#line 1320 "glsl_parser.yy"
d4445 3
a4447 4
	   void *ctx = state;
	   (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[(1) - (1)].n));
	   (yyval.type_specifier)->set_location(yylloc);
	;}
d4451 2
a4452 1
#line 1326 "glsl_parser.yy"
d4454 3
a4456 4
	   void *ctx = state;
	   (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[(1) - (1)].struct_specifier));
	   (yyval.type_specifier)->set_location(yylloc);
	;}
d4460 2
a4461 1
#line 1332 "glsl_parser.yy"
d4463 3
a4465 4
	   void *ctx = state;
	   (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[(1) - (1)].identifier));
	   (yyval.type_specifier)->set_location(yylloc);
	;}
d4469 6
a4474 7
#line 1340 "glsl_parser.yy"
    { (yyval.n) = ast_void; ;}
    break;

  case 182:
#line 1341 "glsl_parser.yy"
    { (yyval.n) = ast_float; ;}
d4478 7
a4484 2
#line 1342 "glsl_parser.yy"
    { (yyval.n) = ast_int; ;}
d4488 7
a4494 2
#line 1343 "glsl_parser.yy"
    { (yyval.n) = ast_uint; ;}
d4498 7
a4504 2
#line 1344 "glsl_parser.yy"
    { (yyval.n) = ast_bool; ;}
d4508 7
a4514 2
#line 1345 "glsl_parser.yy"
    { (yyval.n) = ast_vec2; ;}
d4518 7
a4524 2
#line 1346 "glsl_parser.yy"
    { (yyval.n) = ast_vec3; ;}
d4528 3
a4530 2
#line 1347 "glsl_parser.yy"
    { (yyval.n) = ast_vec4; ;}
d4534 3
a4536 2
#line 1348 "glsl_parser.yy"
    { (yyval.n) = ast_bvec2; ;}
d4540 3
a4542 2
#line 1349 "glsl_parser.yy"
    { (yyval.n) = ast_bvec3; ;}
d4546 3
a4548 2
#line 1350 "glsl_parser.yy"
    { (yyval.n) = ast_bvec4; ;}
d4552 3
a4554 2
#line 1351 "glsl_parser.yy"
    { (yyval.n) = ast_ivec2; ;}
d4558 3
a4560 2
#line 1352 "glsl_parser.yy"
    { (yyval.n) = ast_ivec3; ;}
d4564 3
a4566 2
#line 1353 "glsl_parser.yy"
    { (yyval.n) = ast_ivec4; ;}
d4570 3
a4572 2
#line 1354 "glsl_parser.yy"
    { (yyval.n) = ast_uvec2; ;}
d4576 3
a4578 2
#line 1355 "glsl_parser.yy"
    { (yyval.n) = ast_uvec3; ;}
d4582 3
a4584 2
#line 1356 "glsl_parser.yy"
    { (yyval.n) = ast_uvec4; ;}
d4588 3
a4590 2
#line 1357 "glsl_parser.yy"
    { (yyval.n) = ast_mat2; ;}
d4594 3
a4596 2
#line 1358 "glsl_parser.yy"
    { (yyval.n) = ast_mat2x3; ;}
d4600 3
a4602 2
#line 1359 "glsl_parser.yy"
    { (yyval.n) = ast_mat2x4; ;}
d4606 3
a4608 2
#line 1360 "glsl_parser.yy"
    { (yyval.n) = ast_mat3x2; ;}
d4612 3
a4614 2
#line 1361 "glsl_parser.yy"
    { (yyval.n) = ast_mat3; ;}
d4618 3
a4620 2
#line 1362 "glsl_parser.yy"
    { (yyval.n) = ast_mat3x4; ;}
d4624 3
a4626 2
#line 1363 "glsl_parser.yy"
    { (yyval.n) = ast_mat4x2; ;}
d4630 3
a4632 2
#line 1364 "glsl_parser.yy"
    { (yyval.n) = ast_mat4x3; ;}
d4636 3
a4638 2
#line 1365 "glsl_parser.yy"
    { (yyval.n) = ast_mat4; ;}
d4642 3
a4644 2
#line 1366 "glsl_parser.yy"
    { (yyval.n) = ast_sampler1d; ;}
d4648 3
a4650 2
#line 1367 "glsl_parser.yy"
    { (yyval.n) = ast_sampler2d; ;}
d4654 3
a4656 2
#line 1368 "glsl_parser.yy"
    { (yyval.n) = ast_sampler2drect; ;}
d4660 3
a4662 2
#line 1369 "glsl_parser.yy"
    { (yyval.n) = ast_sampler3d; ;}
d4666 3
a4668 2
#line 1370 "glsl_parser.yy"
    { (yyval.n) = ast_samplercube; ;}
d4672 3
a4674 2
#line 1371 "glsl_parser.yy"
    { (yyval.n) = ast_sampler1dshadow; ;}
d4678 3
a4680 2
#line 1372 "glsl_parser.yy"
    { (yyval.n) = ast_sampler2dshadow; ;}
d4684 3
a4686 2
#line 1373 "glsl_parser.yy"
    { (yyval.n) = ast_sampler2drectshadow; ;}
d4690 3
a4692 2
#line 1374 "glsl_parser.yy"
    { (yyval.n) = ast_samplercubeshadow; ;}
d4696 3
a4698 2
#line 1375 "glsl_parser.yy"
    { (yyval.n) = ast_sampler1darray; ;}
d4702 3
a4704 2
#line 1376 "glsl_parser.yy"
    { (yyval.n) = ast_sampler2darray; ;}
d4708 3
a4710 2
#line 1377 "glsl_parser.yy"
    { (yyval.n) = ast_sampler1darrayshadow; ;}
d4714 3
a4716 2
#line 1378 "glsl_parser.yy"
    { (yyval.n) = ast_sampler2darrayshadow; ;}
d4720 3
a4722 2
#line 1379 "glsl_parser.yy"
    { (yyval.n) = ast_isampler1d; ;}
d4726 3
a4728 2
#line 1380 "glsl_parser.yy"
    { (yyval.n) = ast_isampler2d; ;}
d4732 3
a4734 2
#line 1381 "glsl_parser.yy"
    { (yyval.n) = ast_isampler3d; ;}
d4738 3
a4740 2
#line 1382 "glsl_parser.yy"
    { (yyval.n) = ast_isamplercube; ;}
d4744 3
a4746 2
#line 1383 "glsl_parser.yy"
    { (yyval.n) = ast_isampler1darray; ;}
d4750 3
a4752 2
#line 1384 "glsl_parser.yy"
    { (yyval.n) = ast_isampler2darray; ;}
d4756 3
a4758 2
#line 1385 "glsl_parser.yy"
    { (yyval.n) = ast_usampler1d; ;}
d4762 3
a4764 2
#line 1386 "glsl_parser.yy"
    { (yyval.n) = ast_usampler2d; ;}
d4768 3
a4770 2
#line 1387 "glsl_parser.yy"
    { (yyval.n) = ast_usampler3d; ;}
d4774 3
a4776 2
#line 1388 "glsl_parser.yy"
    { (yyval.n) = ast_usamplercube; ;}
d4780 3
a4782 2
#line 1389 "glsl_parser.yy"
    { (yyval.n) = ast_usampler1darray; ;}
d4786 3
a4788 2
#line 1390 "glsl_parser.yy"
    { (yyval.n) = ast_usampler2darray; ;}
d4792 3
a4794 11
#line 1394 "glsl_parser.yy"
    {
		     if (!state->es_shader && state->language_version < 130)
			_mesa_glsl_error(& (yylsp[(1) - (1)]), state,
				         "precision qualifier forbidden "
					 "in %s (1.30 or later "
					 "required)\n",
					 state->version_string);

		     (yyval.n) = ast_precision_high;
		  ;}
d4798 3
a4800 11
#line 1404 "glsl_parser.yy"
    {
		     if (!state->es_shader && state->language_version < 130)
			_mesa_glsl_error(& (yylsp[(1) - (1)]), state,
					 "precision qualifier forbidden "
					 "in %s (1.30 or later "
					 "required)\n",
					 state->version_string);

		     (yyval.n) = ast_precision_medium;
		  ;}
d4804 3
a4806 11
#line 1414 "glsl_parser.yy"
    {
		     if (!state->es_shader && state->language_version < 130)
			_mesa_glsl_error(& (yylsp[(1) - (1)]), state,
					 "precision qualifier forbidden "
					 "in %s (1.30 or later "
					 "required)\n",
					 state->version_string);

		     (yyval.n) = ast_precision_low;
		  ;}
d4810 3
a4812 7
#line 1428 "glsl_parser.yy"
    {
	   void *ctx = state;
	   (yyval.struct_specifier) = new(ctx) ast_struct_specifier((yyvsp[(2) - (5)].identifier), (yyvsp[(4) - (5)].node));
	   (yyval.struct_specifier)->set_location(yylloc);
	   state->symbols->add_type((yyvsp[(2) - (5)].identifier), glsl_type::void_type);
	;}
d4816 3
a4818 6
#line 1435 "glsl_parser.yy"
    {
	   void *ctx = state;
	   (yyval.struct_specifier) = new(ctx) ast_struct_specifier(NULL, (yyvsp[(3) - (4)].node));
	   (yyval.struct_specifier)->set_location(yylloc);
	;}
d4822 3
a4824 5
#line 1444 "glsl_parser.yy"
    {
	   (yyval.node) = (ast_node *) (yyvsp[(1) - (1)].declarator_list);
	   (yyvsp[(1) - (1)].declarator_list)->link.self_link();
	;}
d4828 3
a4830 5
#line 1449 "glsl_parser.yy"
    {
	   (yyval.node) = (ast_node *) (yyvsp[(1) - (2)].node);
	   (yyval.node)->link.insert_before(& (yyvsp[(2) - (2)].declarator_list)->link);
	;}
d4834 3
a4836 12
#line 1457 "glsl_parser.yy"
    {
	   void *ctx = state;
	   ast_fully_specified_type *type = new(ctx) ast_fully_specified_type();
	   type->set_location(yylloc);

	   type->specifier = (yyvsp[(1) - (3)].type_specifier);
	   (yyval.declarator_list) = new(ctx) ast_declarator_list(type);
	   (yyval.declarator_list)->set_location(yylloc);

	   (yyval.declarator_list)->declarations.push_degenerate_list_at_head(& (yyvsp[(2) - (3)].declaration)->link);
	;}
d4840 3
a4842 5
#line 1472 "glsl_parser.yy"
    {
	   (yyval.declaration) = (yyvsp[(1) - (1)].declaration);
	   (yyvsp[(1) - (1)].declaration)->link.self_link();
	;}
d4846 3
a4848 5
#line 1477 "glsl_parser.yy"
    {
	   (yyval.declaration) = (yyvsp[(1) - (3)].declaration);
	   (yyval.declaration)->link.insert_before(& (yyvsp[(3) - (3)].declaration)->link);
	;}
d4852 3
a4854 7
#line 1485 "glsl_parser.yy"
    {
	   void *ctx = state;
	   (yyval.declaration) = new(ctx) ast_declaration((yyvsp[(1) - (1)].identifier), false, NULL, NULL);
	   (yyval.declaration)->set_location(yylloc);
	   state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(1) - (1)].identifier), ir_var_auto));
	;}
d4858 15
a4872 6
#line 1492 "glsl_parser.yy"
    {
	   void *ctx = state;
	   (yyval.declaration) = new(ctx) ast_declaration((yyvsp[(1) - (4)].identifier), true, (yyvsp[(3) - (4)].expression), NULL);
	   (yyval.declaration)->set_location(yylloc);
	;}
d4876 27
a4902 2
#line 1510 "glsl_parser.yy"
    { (yyval.node) = (ast_node *) (yyvsp[(1) - (1)].compound_statement); ;}
d4906 3
a4908 2
#line 1518 "glsl_parser.yy"
    { (yyval.node) = NULL; ;}
d4912 15
a4926 2
#line 1519 "glsl_parser.yy"
    { (yyval.node) = NULL; ;}
d4930 2
a4931 1
#line 1526 "glsl_parser.yy"
d4933 3
a4935 4
	   void *ctx = state;
	   (yyval.compound_statement) = new(ctx) ast_compound_statement(true, NULL);
	   (yyval.compound_statement)->set_location(yylloc);
	;}
d4939 2
a4940 1
#line 1532 "glsl_parser.yy"
d4942 3
a4944 2
	   state->symbols->push_scope();
	;}
d4948 2
a4949 1
#line 1536 "glsl_parser.yy"
d4951 3
a4953 5
	   void *ctx = state;
	   (yyval.compound_statement) = new(ctx) ast_compound_statement(true, (yyvsp[(3) - (4)].node));
	   (yyval.compound_statement)->set_location(yylloc);
	   state->symbols->pop_scope();
	;}
d4957 19
a4975 2
#line 1545 "glsl_parser.yy"
    { (yyval.node) = (ast_node *) (yyvsp[(1) - (1)].compound_statement); ;}
d4979 2
a4980 1
#line 1551 "glsl_parser.yy"
d4982 3
a4984 4
	   void *ctx = state;
	   (yyval.compound_statement) = new(ctx) ast_compound_statement(false, NULL);
	   (yyval.compound_statement)->set_location(yylloc);
	;}
d4988 2
a4989 1
#line 1557 "glsl_parser.yy"
d4991 3
a4993 4
	   void *ctx = state;
	   (yyval.compound_statement) = new(ctx) ast_compound_statement(false, (yyvsp[(2) - (3)].node));
	   (yyval.compound_statement)->set_location(yylloc);
	;}
d4997 2
a4998 1
#line 1566 "glsl_parser.yy"
d5000 10
a5009 8
	   if ((yyvsp[(1) - (1)].node) == NULL) {
	      _mesa_glsl_error(& (yylsp[(1) - (1)]), state, "<nil> statement\n");
	      assert((yyvsp[(1) - (1)].node) != NULL);
	   }

	   (yyval.node) = (yyvsp[(1) - (1)].node);
	   (yyval.node)->link.self_link();
	;}
d5013 2
a5014 1
#line 1576 "glsl_parser.yy"
d5016 3
a5018 7
	   if ((yyvsp[(2) - (2)].node) == NULL) {
	      _mesa_glsl_error(& (yylsp[(2) - (2)]), state, "<nil> statement\n");
	      assert((yyvsp[(2) - (2)].node) != NULL);
	   }
	   (yyval.node) = (yyvsp[(1) - (2)].node);
	   (yyval.node)->link.insert_before(& (yyvsp[(2) - (2)].node)->link);
	;}
d5022 2
a5023 1
#line 1588 "glsl_parser.yy"
d5025 3
a5027 4
	   void *ctx = state;
	   (yyval.node) = new(ctx) ast_expression_statement(NULL);
	   (yyval.node)->set_location(yylloc);
	;}
d5031 2
a5032 1
#line 1594 "glsl_parser.yy"
d5034 4
a5037 4
	   void *ctx = state;
	   (yyval.node) = new(ctx) ast_expression_statement((yyvsp[(1) - (2)].expression));
	   (yyval.node)->set_location(yylloc);
	;}
d5041 347
a5387 1
#line 1603 "glsl_parser.yy"
d5389 2
a5390 4
	   (yyval.node) = new(state) ast_selection_statement((yyvsp[(3) - (5)].expression), (yyvsp[(5) - (5)].selection_rest_statement).then_statement,
						   (yyvsp[(5) - (5)].selection_rest_statement).else_statement);
	   (yyval.node)->set_location(yylloc);
	;}
d5393 3
a5395 2
  case 267:
#line 1612 "glsl_parser.yy"
d5397 3
a5399 3
	   (yyval.selection_rest_statement).then_statement = (yyvsp[(1) - (3)].node);
	   (yyval.selection_rest_statement).else_statement = (yyvsp[(3) - (3)].node);
	;}
d5402 3
a5404 2
  case 268:
#line 1617 "glsl_parser.yy"
d5406 3
a5408 3
	   (yyval.selection_rest_statement).then_statement = (yyvsp[(1) - (1)].node);
	   (yyval.selection_rest_statement).else_statement = NULL;
	;}
d5411 3
a5413 2
  case 269:
#line 1625 "glsl_parser.yy"
d5415 4
a5418 2
	   (yyval.node) = (ast_node *) (yyvsp[(1) - (1)].expression);
	;}
d5421 3
a5423 2
  case 270:
#line 1629 "glsl_parser.yy"
d5425 5
a5429 5
	   void *ctx = state;
	   ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (4)].identifier), false, NULL, (yyvsp[(4) - (4)].expression));
	   ast_declarator_list *declarator = new(ctx) ast_declarator_list((yyvsp[(1) - (4)].fully_specified_type));
	   decl->set_location(yylloc);
	   declarator->set_location(yylloc);
d5431 8
a5438 3
	   declarator->declarations.push_tail(&decl->link);
	   (yyval.node) = declarator;
	;}
d5441 3
a5443 2
  case 274:
#line 1652 "glsl_parser.yy"
d5445 4
a5448 5
	   void *ctx = state;
	   (yyval.node) = new(ctx) ast_iteration_statement(ast_iteration_statement::ast_while,
	   					    NULL, (yyvsp[(3) - (5)].node), NULL, (yyvsp[(5) - (5)].node));
	   (yyval.node)->set_location(yylloc);
	;}
d5451 3
a5453 2
  case 275:
#line 1659 "glsl_parser.yy"
d5455 10
a5464 5
	   void *ctx = state;
	   (yyval.node) = new(ctx) ast_iteration_statement(ast_iteration_statement::ast_do_while,
						    NULL, (yyvsp[(5) - (7)].expression), NULL, (yyvsp[(2) - (7)].node));
	   (yyval.node)->set_location(yylloc);
	;}
d5467 21
a5487 2
  case 276:
#line 1666 "glsl_parser.yy"
d5489 8
a5496 5
	   void *ctx = state;
	   (yyval.node) = new(ctx) ast_iteration_statement(ast_iteration_statement::ast_for,
						    (yyvsp[(3) - (6)].node), (yyvsp[(4) - (6)].for_rest_statement).cond, (yyvsp[(4) - (6)].for_rest_statement).rest, (yyvsp[(6) - (6)].node));
	   (yyval.node)->set_location(yylloc);
	;}
d5499 3
a5501 2
  case 280:
#line 1682 "glsl_parser.yy"
d5503 2
a5504 2
	   (yyval.node) = NULL;
	;}
d5507 3
a5509 2
  case 281:
#line 1689 "glsl_parser.yy"
d5511 104
a5614 3
	   (yyval.for_rest_statement).cond = (yyvsp[(1) - (2)].node);
	   (yyval.for_rest_statement).rest = NULL;
	;}
d5617 3
a5619 2
  case 282:
#line 1694 "glsl_parser.yy"
d5621 3
a5623 3
	   (yyval.for_rest_statement).cond = (yyvsp[(1) - (3)].node);
	   (yyval.for_rest_statement).rest = (yyvsp[(3) - (3)].expression);
	;}
d5626 3
a5628 2
  case 283:
#line 1703 "glsl_parser.yy"
d5630 3
a5632 4
	   void *ctx = state;
	   (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_continue, NULL);
	   (yyval.node)->set_location(yylloc);
	;}
d5635 3
a5637 2
  case 284:
#line 1709 "glsl_parser.yy"
d5639 3
a5641 4
	   void *ctx = state;
	   (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_break, NULL);
	   (yyval.node)->set_location(yylloc);
	;}
d5644 3
a5646 2
  case 285:
#line 1715 "glsl_parser.yy"
d5648 3
a5650 4
	   void *ctx = state;
	   (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_return, NULL);
	   (yyval.node)->set_location(yylloc);
	;}
d5653 3
a5655 2
  case 286:
#line 1721 "glsl_parser.yy"
d5657 3
a5659 4
	   void *ctx = state;
	   (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_return, (yyvsp[(2) - (3)].expression));
	   (yyval.node)->set_location(yylloc);
	;}
d5662 3
a5664 2
  case 287:
#line 1727 "glsl_parser.yy"
d5666 3
a5668 4
	   void *ctx = state;
	   (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_discard, NULL);
	   (yyval.node)->set_location(yylloc);
	;}
d5671 10
a5680 3
  case 288:
#line 1735 "glsl_parser.yy"
    { (yyval.node) = (yyvsp[(1) - (1)].function_definition); ;}
d5683 7
a5689 3
  case 289:
#line 1736 "glsl_parser.yy"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
d5692 7
a5698 3
  case 290:
#line 1737 "glsl_parser.yy"
    { (yyval.node) = NULL; ;}
d5701 3
a5703 2
  case 291:
#line 1742 "glsl_parser.yy"
d5705 13
a5717 5
	   void *ctx = state;
	   (yyval.function_definition) = new(ctx) ast_function_definition();
	   (yyval.function_definition)->set_location(yylloc);
	   (yyval.function_definition)->prototype = (yyvsp[(1) - (2)].function);
	   (yyval.function_definition)->body = (yyvsp[(2) - (2)].compound_statement);
d5719 15
a5733 2
	   state->symbols->pop_scope();
	;}
d5737 2
a5738 2
/* Line 1267 of yacc.c.  */
#line 4944 "glsl_parser.cpp"
d5741 11
d5780 4
d5791 2
d5794 25
a5818 29
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (&yylloc, state, yymsg);
	  }
	else
	  {
	    yyerror (&yylloc, state, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
d5820 1
d5824 1
a5824 1
  yyerror_range[0] = yylloc;
d5828 1
a5828 1
      /* If just tried and failed to reuse look-ahead token after an
d5845 1
a5845 1
  /* Else will try to reuse look-ahead token after shifting the error
d5861 1
a5861 1
  yyerror_range[0] = yylsp[1-yylen];
d5880 1
a5880 1
      if (yyn != YYPACT_NINF)
d5895 1
a5895 1
      yyerror_range[0] = *yylsp;
a5902 3
  if (yyn == YYFINAL)
    YYACCEPT;

d5905 1
a5905 1
  yyerror_range[1] = yylloc;
d5907 2
a5908 2
     the look-ahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
d5932 1
a5932 1
#ifndef yyoverflow
d5943 8
a5950 3
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc, state);
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.4.3.  */
d4 5
a8 5
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2009, 2010 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
d10 3
a12 3
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
d17 1
a17 1
   
d19 3
a21 1
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
d32 1
a32 1
   
d50 1
a50 1
#define YYBISON_VERSION "2.4.3"
a57 6
/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

d62 8
a69 70
#define yyparse         _mesa_glsl_parse
#define yylex           _mesa_glsl_lex
#define yyerror         _mesa_glsl_error
#define yylval          _mesa_glsl_lval
#define yychar          _mesa_glsl_char
#define yydebug         _mesa_glsl_debug
#define yynerrs         _mesa_glsl_nerrs
#define yylloc          _mesa_glsl_lloc

/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "glsl_parser.ypp"

/*
 * Copyright Â© 2008, 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
    
#include "ast.h"
#include "glsl_parser_extras.h"
#include "glsl_types.h"

#define YYLEX_PARAM state->scanner



/* Line 189 of yacc.c  */
#line 117 "glsl_parser.cpp"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 1
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

d272 240
d513 7
d521 4
d528 1
a529 4

/* Line 214 of yacc.c  */
#line 52 "glsl_parser.ypp"

d557 4
a560 7



/* Line 214 of yacc.c  */
#line 380 "glsl_parser.cpp"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
d563 1
d583 2
a584 2
/* Line 264 of yacc.c  */
#line 405 "glsl_parser.cpp"
d634 1
a634 1
# if defined YYENABLE_NLS && YYENABLE_NLS
d659 1
a659 1
YYID (int yyi)
d662 2
a663 2
YYID (yyi)
    int yyi;
d666 1
a666 1
  return yyi;
d748 3
a750 3
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
d785 1
a785 1
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
d789 2
a790 2
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
d1011 17
a1027 17
     906,   907,   917,   927,   937,   947,   957,   971,   982,   991,
    1000,  1009,  1018,  1027,  1036,  1050,  1057,  1068,  1075,  1076,
    1095,  1124,  1165,  1170,  1175,  1183,  1191,  1192,  1193,  1198,
    1199,  1204,  1209,  1215,  1223,  1228,  1233,  1238,  1244,  1249,
    1254,  1259,  1264,  1272,  1276,  1284,  1285,  1291,  1300,  1306,
    1312,  1321,  1322,  1323,  1324,  1325,  1326,  1327,  1328,  1329,
    1330,  1331,  1332,  1333,  1334,  1335,  1336,  1337,  1338,  1339,
    1340,  1341,  1342,  1343,  1344,  1345,  1346,  1347,  1348,  1349,
    1350,  1351,  1352,  1353,  1354,  1355,  1356,  1357,  1358,  1359,
    1360,  1361,  1362,  1363,  1364,  1365,  1366,  1367,  1368,  1369,
    1370,  1371,  1375,  1385,  1395,  1408,  1415,  1424,  1429,  1437,
    1452,  1457,  1465,  1472,  1481,  1485,  1491,  1492,  1496,  1497,
    1498,  1499,  1500,  1501,  1502,  1506,  1513,  1512,  1526,  1527,
    1531,  1537,  1546,  1556,  1568,  1574,  1583,  1592,  1597,  1605,
    1609,  1623,  1627,  1628,  1632,  1639,  1646,  1656,  1657,  1661,
    1663,  1669,  1674,  1683,  1689,  1695,  1701,  1707,  1716,  1717,
    1718,  1722
d1075 1
a1075 1
  "translation_unit", "$@@1", "version_statement", "pragma_statement",
d1103 1
a1103 1
  "compound_statement", "$@@2", "statement_no_new_scope",
d2160 1
a2160 4
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */
a2162 6
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif
d2219 1
a2219 1
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
d2338 1
a2338 1
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
d2341 3
a2343 3
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
d2347 2
a2348 5
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
d2384 1
a2384 1
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
d2388 1
a2388 1
      YYFPRINTF (stderr, "\n");
d2672 1
d2675 1
d2694 4
a2697 3
/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/
d2721 1
a2721 1
/* The lookahead symbol.  */
d2724 1
a2724 1
/* The semantic value of the lookahead symbol.  */
d2727 3
a2729 1
/* Location data for the lookahead symbol.  */
d2732 1
a2732 35
    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

d2735 4
a2738 7
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

d2746 25
d2773 7
a2783 6
  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

d2789 1
a2789 1
  yychar = YYEMPTY; /* Cause a token to be read.  */
d2795 1
d2799 1
a2799 2

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
d2802 1
a2802 1
  yylloc.first_column = yylloc.last_column = 1;
a2804 1
/* User initialization code.  */
d2806 2
a2807 2
/* Line 1251 of yacc.c  */
#line 41 "glsl_parser.ypp"
d2815 2
a2816 3

/* Line 1251 of yacc.c  */
#line 2657 "glsl_parser.cpp"
a2817 1

a2853 1

d2875 3
a2877 3
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
a2897 3
  if (yystate == YYFINAL)
    YYACCEPT;

d2906 1
a2906 1
     lookahead token if we need one and don't already have one.  */
d2908 1
a2908 1
  /* First try to decide what to do without reference to lookahead token.  */
d2913 1
a2913 1
  /* Not known => get a lookahead token if don't already have one.  */
d2915 1
a2915 1
  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
d2947 3
d2955 1
a2955 1
  /* Shift the lookahead token.  */
d2958 3
a2960 2
  /* Discard the shifted token.  */
  yychar = YYEMPTY;
d3001 1
a3001 3

/* Line 1464 of yacc.c  */
#line 218 "glsl_parser.ypp"
d3008 1
a3008 3

/* Line 1464 of yacc.c  */
#line 222 "glsl_parser.ypp"
d3017 1
a3017 3

/* Line 1464 of yacc.c  */
#line 232 "glsl_parser.ypp"
d3057 1
a3057 3

/* Line 1464 of yacc.c  */
#line 276 "glsl_parser.ypp"
d3070 1
a3070 3

/* Line 1464 of yacc.c  */
#line 300 "glsl_parser.ypp"
d3079 1
a3079 3

/* Line 1464 of yacc.c  */
#line 309 "glsl_parser.ypp"
d3090 1
a3090 3

/* Line 1464 of yacc.c  */
#line 317 "glsl_parser.ypp"
d3101 1
a3101 3

/* Line 1464 of yacc.c  */
#line 333 "glsl_parser.ypp"
d3111 1
a3111 3

/* Line 1464 of yacc.c  */
#line 340 "glsl_parser.ypp"
d3121 1
a3121 3

/* Line 1464 of yacc.c  */
#line 347 "glsl_parser.ypp"
d3131 1
a3131 3

/* Line 1464 of yacc.c  */
#line 354 "glsl_parser.ypp"
d3141 1
a3141 3

/* Line 1464 of yacc.c  */
#line 361 "glsl_parser.ypp"
d3151 1
a3151 3

/* Line 1464 of yacc.c  */
#line 368 "glsl_parser.ypp"
d3158 1
a3158 3

/* Line 1464 of yacc.c  */
#line 376 "glsl_parser.ypp"
d3167 1
a3167 3

/* Line 1464 of yacc.c  */
#line 382 "glsl_parser.ypp"
d3174 1
a3174 3

/* Line 1464 of yacc.c  */
#line 386 "glsl_parser.ypp"
d3184 1
a3184 3

/* Line 1464 of yacc.c  */
#line 393 "glsl_parser.ypp"
d3193 1
a3193 3

/* Line 1464 of yacc.c  */
#line 399 "glsl_parser.ypp"
d3202 1
a3202 3

/* Line 1464 of yacc.c  */
#line 417 "glsl_parser.ypp"
d3211 1
a3211 3

/* Line 1464 of yacc.c  */
#line 436 "glsl_parser.ypp"
d3220 1
a3220 3

/* Line 1464 of yacc.c  */
#line 442 "glsl_parser.ypp"
d3229 1
a3229 3

/* Line 1464 of yacc.c  */
#line 458 "glsl_parser.ypp"
d3238 1
a3238 3

/* Line 1464 of yacc.c  */
#line 464 "glsl_parser.ypp"
d3248 1
a3248 3

/* Line 1464 of yacc.c  */
#line 471 "glsl_parser.ypp"
d3258 1
a3258 3

/* Line 1464 of yacc.c  */
#line 491 "glsl_parser.ypp"
d3267 1
a3267 3

/* Line 1464 of yacc.c  */
#line 497 "glsl_parser.ypp"
d3276 1
a3276 3

/* Line 1464 of yacc.c  */
#line 509 "glsl_parser.ypp"
d3286 1
a3286 3

/* Line 1464 of yacc.c  */
#line 521 "glsl_parser.ypp"
d3295 1
a3295 3

/* Line 1464 of yacc.c  */
#line 527 "glsl_parser.ypp"
d3304 1
a3304 3

/* Line 1464 of yacc.c  */
#line 533 "glsl_parser.ypp"
d3313 1
a3313 3

/* Line 1464 of yacc.c  */
#line 542 "glsl_parser.ypp"
d3318 1
a3318 3

/* Line 1464 of yacc.c  */
#line 543 "glsl_parser.ypp"
d3323 1
a3323 3

/* Line 1464 of yacc.c  */
#line 544 "glsl_parser.ypp"
d3328 1
a3328 3

/* Line 1464 of yacc.c  */
#line 545 "glsl_parser.ypp"
d3333 1
a3333 3

/* Line 1464 of yacc.c  */
#line 551 "glsl_parser.ypp"
d3342 1
a3342 3

/* Line 1464 of yacc.c  */
#line 557 "glsl_parser.ypp"
d3351 1
a3351 3

/* Line 1464 of yacc.c  */
#line 563 "glsl_parser.ypp"
d3360 1
a3360 3

/* Line 1464 of yacc.c  */
#line 573 "glsl_parser.ypp"
d3369 1
a3369 3

/* Line 1464 of yacc.c  */
#line 579 "glsl_parser.ypp"
d3378 1
a3378 3

/* Line 1464 of yacc.c  */
#line 589 "glsl_parser.ypp"
d3387 1
a3387 3

/* Line 1464 of yacc.c  */
#line 595 "glsl_parser.ypp"
d3396 1
a3396 3

/* Line 1464 of yacc.c  */
#line 605 "glsl_parser.ypp"
d3405 1
a3405 3

/* Line 1464 of yacc.c  */
#line 611 "glsl_parser.ypp"
d3414 1
a3414 3

/* Line 1464 of yacc.c  */
#line 617 "glsl_parser.ypp"
d3423 1
a3423 3

/* Line 1464 of yacc.c  */
#line 623 "glsl_parser.ypp"
d3432 1
a3432 3

/* Line 1464 of yacc.c  */
#line 633 "glsl_parser.ypp"
d3441 1
a3441 3

/* Line 1464 of yacc.c  */
#line 639 "glsl_parser.ypp"
d3450 1
a3450 3

/* Line 1464 of yacc.c  */
#line 649 "glsl_parser.ypp"
d3459 1
a3459 3

/* Line 1464 of yacc.c  */
#line 659 "glsl_parser.ypp"
d3468 1
a3468 3

/* Line 1464 of yacc.c  */
#line 669 "glsl_parser.ypp"
d3477 1
a3477 3

/* Line 1464 of yacc.c  */
#line 679 "glsl_parser.ypp"
d3486 1
a3486 3

/* Line 1464 of yacc.c  */
#line 689 "glsl_parser.ypp"
d3495 1
a3495 3

/* Line 1464 of yacc.c  */
#line 699 "glsl_parser.ypp"
d3504 1
a3504 3

/* Line 1464 of yacc.c  */
#line 709 "glsl_parser.ypp"
d3513 1
a3513 3

/* Line 1464 of yacc.c  */
#line 719 "glsl_parser.ypp"
d3522 1
a3522 3

/* Line 1464 of yacc.c  */
#line 727 "glsl_parser.ypp"
d3527 1
a3527 3

/* Line 1464 of yacc.c  */
#line 728 "glsl_parser.ypp"
d3532 1
a3532 3

/* Line 1464 of yacc.c  */
#line 729 "glsl_parser.ypp"
d3537 1
a3537 3

/* Line 1464 of yacc.c  */
#line 730 "glsl_parser.ypp"
d3542 1
a3542 3

/* Line 1464 of yacc.c  */
#line 731 "glsl_parser.ypp"
d3547 1
a3547 3

/* Line 1464 of yacc.c  */
#line 732 "glsl_parser.ypp"
d3552 1
a3552 3

/* Line 1464 of yacc.c  */
#line 733 "glsl_parser.ypp"
d3557 1
a3557 3

/* Line 1464 of yacc.c  */
#line 734 "glsl_parser.ypp"
d3562 1
a3562 3

/* Line 1464 of yacc.c  */
#line 735 "glsl_parser.ypp"
d3567 1
a3567 3

/* Line 1464 of yacc.c  */
#line 736 "glsl_parser.ypp"
d3572 1
a3572 3

/* Line 1464 of yacc.c  */
#line 737 "glsl_parser.ypp"
d3577 1
a3577 3

/* Line 1464 of yacc.c  */
#line 742 "glsl_parser.ypp"
d3584 1
a3584 3

/* Line 1464 of yacc.c  */
#line 746 "glsl_parser.ypp"
d3600 1
a3600 3

/* Line 1464 of yacc.c  */
#line 766 "glsl_parser.ypp"
d3608 1
a3608 3

/* Line 1464 of yacc.c  */
#line 771 "glsl_parser.ypp"
d3615 1
a3615 3

/* Line 1464 of yacc.c  */
#line 775 "glsl_parser.ypp"
d3624 1
a3624 3

/* Line 1464 of yacc.c  */
#line 793 "glsl_parser.ypp"
d3632 1
a3632 3

/* Line 1464 of yacc.c  */
#line 798 "glsl_parser.ypp"
d3640 1
a3640 3

/* Line 1464 of yacc.c  */
#line 806 "glsl_parser.ypp"
d3654 1
a3654 3

/* Line 1464 of yacc.c  */
#line 820 "glsl_parser.ypp"
d3667 1
a3667 3

/* Line 1464 of yacc.c  */
#line 830 "glsl_parser.ypp"
d3682 1
a3682 3

/* Line 1464 of yacc.c  */
#line 845 "glsl_parser.ypp"
d3692 1
a3692 3

/* Line 1464 of yacc.c  */
#line 852 "glsl_parser.ypp"
d3700 1
a3700 3

/* Line 1464 of yacc.c  */
#line 857 "glsl_parser.ypp"
d3714 1
a3714 3

/* Line 1464 of yacc.c  */
#line 868 "glsl_parser.ypp"
d3726 1
a3726 3

/* Line 1464 of yacc.c  */
#line 880 "glsl_parser.ypp"
d3733 1
a3733 3

/* Line 1464 of yacc.c  */
#line 884 "glsl_parser.ypp"
d3741 1
a3741 3

/* Line 1464 of yacc.c  */
#line 889 "glsl_parser.ypp"
d3749 1
a3749 3

/* Line 1464 of yacc.c  */
#line 894 "glsl_parser.ypp"
d3758 1
a3758 3

/* Line 1464 of yacc.c  */
#line 908 "glsl_parser.ypp"
d3771 1
a3771 3

/* Line 1464 of yacc.c  */
#line 918 "glsl_parser.ypp"
d3784 1
a3784 3

/* Line 1464 of yacc.c  */
#line 928 "glsl_parser.ypp"
d3797 1
a3797 3

/* Line 1464 of yacc.c  */
#line 938 "glsl_parser.ypp"
d3810 1
a3810 3

/* Line 1464 of yacc.c  */
#line 948 "glsl_parser.ypp"
d3823 1
a3823 3

/* Line 1464 of yacc.c  */
#line 958 "glsl_parser.ypp"
d3836 1
a3836 3

/* Line 1464 of yacc.c  */
#line 972 "glsl_parser.ypp"
d3839 3
a3841 7
	   if ((yyvsp[(1) - (1)].fully_specified_type)->specifier->type_specifier != ast_struct) {
	      _mesa_glsl_error(& (yylsp[(1) - (1)]), state, "empty declaration list\n");
	      YYERROR;
	   } else {
	      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (1)].fully_specified_type));
	      (yyval.declarator_list)->set_location(yylloc);
	   }
d3846 1
a3846 3

/* Line 1464 of yacc.c  */
#line 983 "glsl_parser.ypp"
d3858 1
a3858 3

/* Line 1464 of yacc.c  */
#line 992 "glsl_parser.ypp"
d3870 1
a3870 3

/* Line 1464 of yacc.c  */
#line 1001 "glsl_parser.ypp"
d3882 1
a3882 3

/* Line 1464 of yacc.c  */
#line 1010 "glsl_parser.ypp"
d3894 1
a3894 3

/* Line 1464 of yacc.c  */
#line 1019 "glsl_parser.ypp"
d3906 1
a3906 3

/* Line 1464 of yacc.c  */
#line 1028 "glsl_parser.ypp"
d3918 1
a3918 3

/* Line 1464 of yacc.c  */
#line 1037 "glsl_parser.ypp"
d3932 1
a3932 3

/* Line 1464 of yacc.c  */
#line 1051 "glsl_parser.ypp"
d3942 1
a3942 3

/* Line 1464 of yacc.c  */
#line 1058 "glsl_parser.ypp"
d3953 1
a3953 3

/* Line 1464 of yacc.c  */
#line 1069 "glsl_parser.ypp"
d3960 1
a3960 3

/* Line 1464 of yacc.c  */
#line 1077 "glsl_parser.ypp"
d3979 1
a3979 3

/* Line 1464 of yacc.c  */
#line 1096 "glsl_parser.ypp"
d3985 2
a3986 1
	   if (state->ARB_fragment_coord_conventions_enable) {
d3994 29
a4024 3
	   /* If the identifier didn't match any known layout identifiers,
	    * emit an error.
	    */
a4028 4
	   } else if (state->ARB_fragment_coord_conventions_warn) {
	      _mesa_glsl_warning(& (yylsp[(1) - (1)]), state,
				 "GL_ARB_fragment_coord_conventions layout "
				 "identifier `%s' used\n", (yyvsp[(1) - (1)].identifier));
d4034 1
a4034 3

/* Line 1464 of yacc.c  */
#line 1125 "glsl_parser.ypp"
d4075 1
a4075 3

/* Line 1464 of yacc.c  */
#line 1166 "glsl_parser.ypp"
d4083 1
a4083 3

/* Line 1464 of yacc.c  */
#line 1171 "glsl_parser.ypp"
d4091 1
a4091 3

/* Line 1464 of yacc.c  */
#line 1176 "glsl_parser.ypp"
d4099 1
a4099 3

/* Line 1464 of yacc.c  */
#line 1184 "glsl_parser.ypp"
d4107 1
a4107 3

/* Line 1464 of yacc.c  */
#line 1194 "glsl_parser.ypp"
d4115 1
a4115 3

/* Line 1464 of yacc.c  */
#line 1200 "glsl_parser.ypp"
d4123 1
a4123 3

/* Line 1464 of yacc.c  */
#line 1205 "glsl_parser.ypp"
d4131 1
a4131 3

/* Line 1464 of yacc.c  */
#line 1210 "glsl_parser.ypp"
d4140 1
a4140 3

/* Line 1464 of yacc.c  */
#line 1216 "glsl_parser.ypp"
d4148 1
a4148 3

/* Line 1464 of yacc.c  */
#line 1224 "glsl_parser.ypp"
d4156 1
a4156 3

/* Line 1464 of yacc.c  */
#line 1229 "glsl_parser.ypp"
d4164 1
a4164 3

/* Line 1464 of yacc.c  */
#line 1234 "glsl_parser.ypp"
d4172 1
a4172 3

/* Line 1464 of yacc.c  */
#line 1239 "glsl_parser.ypp"
d4181 1
a4181 3

/* Line 1464 of yacc.c  */
#line 1245 "glsl_parser.ypp"
d4189 1
a4189 3

/* Line 1464 of yacc.c  */
#line 1250 "glsl_parser.ypp"
d4197 1
a4197 3

/* Line 1464 of yacc.c  */
#line 1255 "glsl_parser.ypp"
d4205 1
a4205 3

/* Line 1464 of yacc.c  */
#line 1260 "glsl_parser.ypp"
d4213 1
a4213 3

/* Line 1464 of yacc.c  */
#line 1265 "glsl_parser.ypp"
d4221 1
a4221 3

/* Line 1464 of yacc.c  */
#line 1273 "glsl_parser.ypp"
d4228 1
a4228 3

/* Line 1464 of yacc.c  */
#line 1277 "glsl_parser.ypp"
d4236 1
a4236 3

/* Line 1464 of yacc.c  */
#line 1286 "glsl_parser.ypp"
d4245 1
a4245 3

/* Line 1464 of yacc.c  */
#line 1292 "glsl_parser.ypp"
d4254 1
a4254 3

/* Line 1464 of yacc.c  */
#line 1301 "glsl_parser.ypp"
d4263 1
a4263 3

/* Line 1464 of yacc.c  */
#line 1307 "glsl_parser.ypp"
d4272 1
a4272 3

/* Line 1464 of yacc.c  */
#line 1313 "glsl_parser.ypp"
d4281 1
a4281 3

/* Line 1464 of yacc.c  */
#line 1321 "glsl_parser.ypp"
d4286 1
a4286 3

/* Line 1464 of yacc.c  */
#line 1322 "glsl_parser.ypp"
d4291 1
a4291 3

/* Line 1464 of yacc.c  */
#line 1323 "glsl_parser.ypp"
d4296 1
a4296 3

/* Line 1464 of yacc.c  */
#line 1324 "glsl_parser.ypp"
d4301 1
a4301 3

/* Line 1464 of yacc.c  */
#line 1325 "glsl_parser.ypp"
d4306 1
a4306 3

/* Line 1464 of yacc.c  */
#line 1326 "glsl_parser.ypp"
d4311 1
a4311 3

/* Line 1464 of yacc.c  */
#line 1327 "glsl_parser.ypp"
d4316 1
a4316 3

/* Line 1464 of yacc.c  */
#line 1328 "glsl_parser.ypp"
d4321 1
a4321 3

/* Line 1464 of yacc.c  */
#line 1329 "glsl_parser.ypp"
d4326 1
a4326 3

/* Line 1464 of yacc.c  */
#line 1330 "glsl_parser.ypp"
d4331 1
a4331 3

/* Line 1464 of yacc.c  */
#line 1331 "glsl_parser.ypp"
d4336 1
a4336 3

/* Line 1464 of yacc.c  */
#line 1332 "glsl_parser.ypp"
d4341 1
a4341 3

/* Line 1464 of yacc.c  */
#line 1333 "glsl_parser.ypp"
d4346 1
a4346 3

/* Line 1464 of yacc.c  */
#line 1334 "glsl_parser.ypp"
d4351 1
a4351 3

/* Line 1464 of yacc.c  */
#line 1335 "glsl_parser.ypp"
d4356 1
a4356 3

/* Line 1464 of yacc.c  */
#line 1336 "glsl_parser.ypp"
d4361 1
a4361 3

/* Line 1464 of yacc.c  */
#line 1337 "glsl_parser.ypp"
d4366 1
a4366 3

/* Line 1464 of yacc.c  */
#line 1338 "glsl_parser.ypp"
d4371 1
a4371 3

/* Line 1464 of yacc.c  */
#line 1339 "glsl_parser.ypp"
d4376 1
a4376 3

/* Line 1464 of yacc.c  */
#line 1340 "glsl_parser.ypp"
d4381 1
a4381 3

/* Line 1464 of yacc.c  */
#line 1341 "glsl_parser.ypp"
d4386 1
a4386 3

/* Line 1464 of yacc.c  */
#line 1342 "glsl_parser.ypp"
d4391 1
a4391 3

/* Line 1464 of yacc.c  */
#line 1343 "glsl_parser.ypp"
d4396 1
a4396 3

/* Line 1464 of yacc.c  */
#line 1344 "glsl_parser.ypp"
d4401 1
a4401 3

/* Line 1464 of yacc.c  */
#line 1345 "glsl_parser.ypp"
d4406 1
a4406 3

/* Line 1464 of yacc.c  */
#line 1346 "glsl_parser.ypp"
d4411 1
a4411 3

/* Line 1464 of yacc.c  */
#line 1347 "glsl_parser.ypp"
d4416 1
a4416 3

/* Line 1464 of yacc.c  */
#line 1348 "glsl_parser.ypp"
d4421 1
a4421 3

/* Line 1464 of yacc.c  */
#line 1349 "glsl_parser.ypp"
d4426 1
a4426 3

/* Line 1464 of yacc.c  */
#line 1350 "glsl_parser.ypp"
d4431 1
a4431 3

/* Line 1464 of yacc.c  */
#line 1351 "glsl_parser.ypp"
d4436 1
a4436 3

/* Line 1464 of yacc.c  */
#line 1352 "glsl_parser.ypp"
d4441 1
a4441 3

/* Line 1464 of yacc.c  */
#line 1353 "glsl_parser.ypp"
d4446 1
a4446 3

/* Line 1464 of yacc.c  */
#line 1354 "glsl_parser.ypp"
d4451 1
a4451 3

/* Line 1464 of yacc.c  */
#line 1355 "glsl_parser.ypp"
d4456 1
a4456 3

/* Line 1464 of yacc.c  */
#line 1356 "glsl_parser.ypp"
d4461 1
a4461 3

/* Line 1464 of yacc.c  */
#line 1357 "glsl_parser.ypp"
d4466 1
a4466 3

/* Line 1464 of yacc.c  */
#line 1358 "glsl_parser.ypp"
d4471 1
a4471 3

/* Line 1464 of yacc.c  */
#line 1359 "glsl_parser.ypp"
d4476 1
a4476 3

/* Line 1464 of yacc.c  */
#line 1360 "glsl_parser.ypp"
d4481 1
a4481 3

/* Line 1464 of yacc.c  */
#line 1361 "glsl_parser.ypp"
d4486 1
a4486 3

/* Line 1464 of yacc.c  */
#line 1362 "glsl_parser.ypp"
d4491 1
a4491 3

/* Line 1464 of yacc.c  */
#line 1363 "glsl_parser.ypp"
d4496 1
a4496 3

/* Line 1464 of yacc.c  */
#line 1364 "glsl_parser.ypp"
d4501 1
a4501 3

/* Line 1464 of yacc.c  */
#line 1365 "glsl_parser.ypp"
d4506 1
a4506 3

/* Line 1464 of yacc.c  */
#line 1366 "glsl_parser.ypp"
d4511 1
a4511 3

/* Line 1464 of yacc.c  */
#line 1367 "glsl_parser.ypp"
d4516 1
a4516 3

/* Line 1464 of yacc.c  */
#line 1368 "glsl_parser.ypp"
d4521 1
a4521 3

/* Line 1464 of yacc.c  */
#line 1369 "glsl_parser.ypp"
d4526 1
a4526 3

/* Line 1464 of yacc.c  */
#line 1370 "glsl_parser.ypp"
d4531 1
a4531 3

/* Line 1464 of yacc.c  */
#line 1371 "glsl_parser.ypp"
d4536 1
a4536 3

/* Line 1464 of yacc.c  */
#line 1375 "glsl_parser.ypp"
d4550 1
a4550 3

/* Line 1464 of yacc.c  */
#line 1385 "glsl_parser.ypp"
d4564 1
a4564 3

/* Line 1464 of yacc.c  */
#line 1395 "glsl_parser.ypp"
d4578 1
a4578 3

/* Line 1464 of yacc.c  */
#line 1409 "glsl_parser.ypp"
d4588 1
a4588 3

/* Line 1464 of yacc.c  */
#line 1416 "glsl_parser.ypp"
d4597 1
a4597 3

/* Line 1464 of yacc.c  */
#line 1425 "glsl_parser.ypp"
d4605 1
a4605 3

/* Line 1464 of yacc.c  */
#line 1430 "glsl_parser.ypp"
d4613 1
a4613 3

/* Line 1464 of yacc.c  */
#line 1438 "glsl_parser.ypp"
d4628 1
a4628 3

/* Line 1464 of yacc.c  */
#line 1453 "glsl_parser.ypp"
d4636 1
a4636 3

/* Line 1464 of yacc.c  */
#line 1458 "glsl_parser.ypp"
d4644 1
a4644 3

/* Line 1464 of yacc.c  */
#line 1466 "glsl_parser.ypp"
d4654 1
a4654 3

/* Line 1464 of yacc.c  */
#line 1473 "glsl_parser.ypp"
d4663 1
a4663 3

/* Line 1464 of yacc.c  */
#line 1491 "glsl_parser.ypp"
d4668 1
a4668 3

/* Line 1464 of yacc.c  */
#line 1499 "glsl_parser.ypp"
d4673 1
a4673 3

/* Line 1464 of yacc.c  */
#line 1500 "glsl_parser.ypp"
d4678 1
a4678 3

/* Line 1464 of yacc.c  */
#line 1507 "glsl_parser.ypp"
d4687 1
a4687 3

/* Line 1464 of yacc.c  */
#line 1513 "glsl_parser.ypp"
d4694 1
a4694 3

/* Line 1464 of yacc.c  */
#line 1517 "glsl_parser.ypp"
d4704 1
a4704 3

/* Line 1464 of yacc.c  */
#line 1526 "glsl_parser.ypp"
d4709 1
a4709 3

/* Line 1464 of yacc.c  */
#line 1532 "glsl_parser.ypp"
d4718 1
a4718 3

/* Line 1464 of yacc.c  */
#line 1538 "glsl_parser.ypp"
d4727 1
a4727 3

/* Line 1464 of yacc.c  */
#line 1547 "glsl_parser.ypp"
d4740 1
a4740 3

/* Line 1464 of yacc.c  */
#line 1557 "glsl_parser.ypp"
d4752 1
a4752 3

/* Line 1464 of yacc.c  */
#line 1569 "glsl_parser.ypp"
d4761 1
a4761 3

/* Line 1464 of yacc.c  */
#line 1575 "glsl_parser.ypp"
d4770 1
a4770 3

/* Line 1464 of yacc.c  */
#line 1584 "glsl_parser.ypp"
d4779 1
a4779 3

/* Line 1464 of yacc.c  */
#line 1593 "glsl_parser.ypp"
d4787 1
a4787 3

/* Line 1464 of yacc.c  */
#line 1598 "glsl_parser.ypp"
d4795 1
a4795 3

/* Line 1464 of yacc.c  */
#line 1606 "glsl_parser.ypp"
d4802 1
a4802 3

/* Line 1464 of yacc.c  */
#line 1610 "glsl_parser.ypp"
d4816 1
a4816 3

/* Line 1464 of yacc.c  */
#line 1633 "glsl_parser.ypp"
d4826 1
a4826 3

/* Line 1464 of yacc.c  */
#line 1640 "glsl_parser.ypp"
d4836 1
a4836 3

/* Line 1464 of yacc.c  */
#line 1647 "glsl_parser.ypp"
d4846 1
a4846 3

/* Line 1464 of yacc.c  */
#line 1663 "glsl_parser.ypp"
d4853 1
a4853 3

/* Line 1464 of yacc.c  */
#line 1670 "glsl_parser.ypp"
d4861 1
a4861 3

/* Line 1464 of yacc.c  */
#line 1675 "glsl_parser.ypp"
d4869 1
a4869 3

/* Line 1464 of yacc.c  */
#line 1684 "glsl_parser.ypp"
d4878 1
a4878 3

/* Line 1464 of yacc.c  */
#line 1690 "glsl_parser.ypp"
d4887 1
a4887 3

/* Line 1464 of yacc.c  */
#line 1696 "glsl_parser.ypp"
d4896 1
a4896 3

/* Line 1464 of yacc.c  */
#line 1702 "glsl_parser.ypp"
d4905 1
a4905 3

/* Line 1464 of yacc.c  */
#line 1708 "glsl_parser.ypp"
d4914 1
a4914 3

/* Line 1464 of yacc.c  */
#line 1716 "glsl_parser.ypp"
d4919 1
a4919 3

/* Line 1464 of yacc.c  */
#line 1717 "glsl_parser.ypp"
d4924 1
a4924 3

/* Line 1464 of yacc.c  */
#line 1718 "glsl_parser.ypp"
d4929 1
a4929 3

/* Line 1464 of yacc.c  */
#line 1723 "glsl_parser.ypp"
d4942 2
a4943 3

/* Line 1464 of yacc.c  */
#line 5217 "glsl_parser.cpp"
d5015 1
a5015 1
  yyerror_range[1] = yylloc;
d5019 1
a5019 1
      /* If just tried and failed to reuse lookahead token after an
d5036 1
a5036 1
  /* Else will try to reuse lookahead token after shifting the error
d5052 1
a5052 1
  yyerror_range[1] = yylsp[1-yylen];
d5086 1
a5086 1
      yyerror_range[1] = *yylsp;
d5094 3
d5099 1
a5099 1
  yyerror_range[2] = yylloc;
d5101 2
a5102 2
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
d5126 1
a5126 1
#if !defined(yyoverflow) || YYERROR_VERBOSE
d5137 1
a5137 1
  if (yychar != YYEMPTY)
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.6.1.  */
d3 1
a3 1
/* Bison implementation for Yacc-like parsers in C
d5 2
a6 1
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
d48 1
a48 1
#define YYBISON_VERSION "2.6.1"
d62 2
d76 3
a78 2
/* Line 336 of yacc.c  */
#line 1 "glsl_parser.yy"
d106 1
a106 1

a109 1
#include "main/context.h"
d111 1
a111 1
#undef yyerror
a112 4
static void yyerror(YYLTYPE *loc, _mesa_glsl_parse_state *st, const char *msg)
{
   _mesa_glsl_error(loc, st, "%s", msg);
}
a113 5
static int
_mesa_glsl_lex(YYSTYPE *val, YYLTYPE *loc, _mesa_glsl_parse_state *state)
{
   return _mesa_glsl_lexer_lex(val, loc, state->scanner);
}
d115 2
a116 2
/* Line 336 of yacc.c  */
#line 123 "glsl_parser.cpp"
d118 4
a121 7
# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif
d131 3
a133 10
/* In a future release of Bison, this section will be replaced
   by #include "glsl_parser.h".  */
#ifndef _MESA_GLSL_SRC_GLSL_GLSL_PARSER_H
# define _MESA_GLSL_SRC_GLSL_GLSL_PARSER_H
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int _mesa_glsl_debug;
d135 1
d201 135
a335 160
     SAMPLERCUBEARRAY = 316,
     SAMPLERCUBEARRAYSHADOW = 317,
     ISAMPLER1D = 318,
     ISAMPLER2D = 319,
     ISAMPLER3D = 320,
     ISAMPLERCUBE = 321,
     ISAMPLER1DARRAY = 322,
     ISAMPLER2DARRAY = 323,
     ISAMPLERCUBEARRAY = 324,
     USAMPLER1D = 325,
     USAMPLER2D = 326,
     USAMPLER3D = 327,
     USAMPLERCUBE = 328,
     USAMPLER1DARRAY = 329,
     USAMPLER2DARRAY = 330,
     USAMPLERCUBEARRAY = 331,
     SAMPLER2DRECT = 332,
     ISAMPLER2DRECT = 333,
     USAMPLER2DRECT = 334,
     SAMPLER2DRECTSHADOW = 335,
     SAMPLERBUFFER = 336,
     ISAMPLERBUFFER = 337,
     USAMPLERBUFFER = 338,
     SAMPLER2DMS = 339,
     ISAMPLER2DMS = 340,
     USAMPLER2DMS = 341,
     SAMPLER2DMSARRAY = 342,
     ISAMPLER2DMSARRAY = 343,
     USAMPLER2DMSARRAY = 344,
     SAMPLEREXTERNALOES = 345,
     STRUCT = 346,
     VOID_TOK = 347,
     WHILE = 348,
     IDENTIFIER = 349,
     TYPE_IDENTIFIER = 350,
     NEW_IDENTIFIER = 351,
     FLOATCONSTANT = 352,
     INTCONSTANT = 353,
     UINTCONSTANT = 354,
     BOOLCONSTANT = 355,
     FIELD_SELECTION = 356,
     LEFT_OP = 357,
     RIGHT_OP = 358,
     INC_OP = 359,
     DEC_OP = 360,
     LE_OP = 361,
     GE_OP = 362,
     EQ_OP = 363,
     NE_OP = 364,
     AND_OP = 365,
     OR_OP = 366,
     XOR_OP = 367,
     MUL_ASSIGN = 368,
     DIV_ASSIGN = 369,
     ADD_ASSIGN = 370,
     MOD_ASSIGN = 371,
     LEFT_ASSIGN = 372,
     RIGHT_ASSIGN = 373,
     AND_ASSIGN = 374,
     XOR_ASSIGN = 375,
     OR_ASSIGN = 376,
     SUB_ASSIGN = 377,
     INVARIANT = 378,
     LOWP = 379,
     MEDIUMP = 380,
     HIGHP = 381,
     SUPERP = 382,
     PRECISION = 383,
     VERSION_TOK = 384,
     EXTENSION = 385,
     LINE = 386,
     COLON = 387,
     EOL = 388,
     INTERFACE = 389,
     OUTPUT = 390,
     PRAGMA_DEBUG_ON = 391,
     PRAGMA_DEBUG_OFF = 392,
     PRAGMA_OPTIMIZE_ON = 393,
     PRAGMA_OPTIMIZE_OFF = 394,
     PRAGMA_INVARIANT_ALL = 395,
     LAYOUT_TOK = 396,
     ASM = 397,
     CLASS = 398,
     UNION = 399,
     ENUM = 400,
     TYPEDEF = 401,
     TEMPLATE = 402,
     THIS = 403,
     PACKED_TOK = 404,
     GOTO = 405,
     INLINE_TOK = 406,
     NOINLINE = 407,
     VOLATILE = 408,
     PUBLIC_TOK = 409,
     STATIC = 410,
     EXTERN = 411,
     EXTERNAL = 412,
     LONG_TOK = 413,
     SHORT_TOK = 414,
     DOUBLE_TOK = 415,
     HALF = 416,
     FIXED_TOK = 417,
     UNSIGNED = 418,
     INPUT_TOK = 419,
     OUPTUT = 420,
     HVEC2 = 421,
     HVEC3 = 422,
     HVEC4 = 423,
     DVEC2 = 424,
     DVEC3 = 425,
     DVEC4 = 426,
     FVEC2 = 427,
     FVEC3 = 428,
     FVEC4 = 429,
     SAMPLER3DRECT = 430,
     SIZEOF = 431,
     CAST = 432,
     NAMESPACE = 433,
     USING = 434,
     COHERENT = 435,
     RESTRICT = 436,
     READONLY = 437,
     WRITEONLY = 438,
     RESOURCE = 439,
     ATOMIC_UINT = 440,
     PATCH = 441,
     SAMPLE = 442,
     SUBROUTINE = 443,
     ERROR_TOK = 444,
     COMMON = 445,
     PARTITION = 446,
     ACTIVE = 447,
     FILTER = 448,
     IMAGE1D = 449,
     IMAGE2D = 450,
     IMAGE3D = 451,
     IMAGECUBE = 452,
     IMAGE1DARRAY = 453,
     IMAGE2DARRAY = 454,
     IIMAGE1D = 455,
     IIMAGE2D = 456,
     IIMAGE3D = 457,
     IIMAGECUBE = 458,
     IIMAGE1DARRAY = 459,
     IIMAGE2DARRAY = 460,
     UIMAGE1D = 461,
     UIMAGE2D = 462,
     UIMAGE3D = 463,
     UIMAGECUBE = 464,
     UIMAGE1DARRAY = 465,
     UIMAGE2DARRAY = 466,
     IMAGE1DSHADOW = 467,
     IMAGE2DSHADOW = 468,
     IMAGEBUFFER = 469,
     IIMAGEBUFFER = 470,
     UIMAGEBUFFER = 471,
     IMAGE1DARRAYSHADOW = 472,
     IMAGE2DARRAYSHADOW = 473,
     ROW_MAJOR = 474,
     THEN = 475
d340 1
d344 3
a346 2
/* Line 350 of yacc.c  */
#line 65 "glsl_parser.yy"
d350 1
a350 1
   const char *identifier;
a364 6
   ast_switch_body *switch_body;
   ast_case_label *case_label;
   ast_case_label_list *case_label_list;
   ast_case_statement *case_statement;
   ast_case_statement_list *case_statement_list;
   ast_interface_block *interface_block;
d377 3
a379 2
/* Line 350 of yacc.c  */
#line 423 "glsl_parser.cpp"
d400 1
a400 15
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int _mesa_glsl_parse (void *YYPARSE_PARAM);
#else
int _mesa_glsl_parse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int _mesa_glsl_parse (struct _mesa_glsl_parse_state *state);
#else
int _mesa_glsl_parse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !_MESA_GLSL_SRC_GLSL_GLSL_PARSER_H  */
a401 1
/* Copy the second part of user declarations.  */
d403 2
a404 2
/* Line 353 of yacc.c  */
#line 463 "glsl_parser.cpp"
d507 1
a507 1
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
d510 2
a511 3
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
d534 1
a534 1
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
d538 2
a539 2
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
d544 1
a544 1
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
d551 1
a551 1
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
d582 17
a598 1
# define YYCOPY_NEEDED 1
a617 20
#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

d621 1
a621 1
#define YYLAST   3501
d624 1
a624 1
#define YYNTOKENS  245
d626 1
a626 1
#define YYNNTS  107
d628 1
a628 1
#define YYNRULES  340
d630 1
a630 1
#define YYNSTATES  500
d634 1
a634 1
#define YYMAXUTOK   475
d645 4
a648 4
       2,     2,     2,   229,     2,     2,     2,   233,   236,     2,
     221,   222,   231,   227,   226,   228,   225,   232,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   240,   242,
     234,   241,   235,   239,     2,     2,     2,     2,     2,     2,
d651 1
a651 1
       2,   223,     2,   224,   237,     2,     2,     2,     2,     2,
d654 1
a654 1
       2,     2,     2,   243,   238,   244,   230,     2,     2,     2,
d687 1
a687 3
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220
d695 30
a724 35
       0,     0,     3,     4,     9,    10,    14,    19,    22,    25,
      28,    31,    34,    35,    38,    40,    42,    44,    50,    52,
      55,    57,    59,    61,    63,    65,    67,    69,    73,    75,
      80,    82,    86,    89,    92,    94,    96,    98,   102,   105,
     108,   111,   113,   116,   120,   123,   125,   127,   129,   132,
     135,   138,   140,   143,   147,   150,   152,   155,   158,   161,
     163,   165,   167,   169,   171,   175,   179,   183,   185,   189,
     193,   195,   199,   203,   205,   209,   213,   217,   221,   223,
     227,   231,   233,   237,   239,   243,   245,   249,   251,   255,
     257,   261,   263,   267,   269,   275,   277,   281,   283,   285,
     287,   289,   291,   293,   295,   297,   299,   301,   303,   305,
     309,   311,   314,   317,   322,   324,   327,   329,   331,   334,
     338,   342,   345,   351,   354,   357,   358,   361,   364,   367,
     369,   371,   373,   375,   377,   381,   387,   394,   402,   411,
     417,   419,   422,   427,   433,   440,   448,   453,   456,   458,
     461,   466,   468,   472,   474,   476,   478,   482,   484,   486,
     488,   490,   492,   494,   496,   498,   500,   502,   504,   506,
     509,   512,   515,   518,   521,   524,   526,   528,   530,   532,
     534,   536,   538,   540,   544,   549,   551,   553,   555,   557,
     559,   561,   563,   565,   567,   569,   571,   573,   575,   577,
     579,   581,   583,   585,   587,   589,   591,   593,   595,   597,
     599,   601,   603,   605,   607,   609,   611,   613,   615,   617,
     619,   621,   623,   625,   627,   629,   631,   633,   635,   637,
     639,   641,   643,   645,   647,   649,   651,   653,   655,   657,
     659,   661,   663,   665,   667,   669,   671,   673,   675,   677,
     679,   681,   683,   685,   687,   689,   691,   693,   695,   701,
     706,   708,   711,   715,   717,   721,   723,   728,   730,   734,
     739,   741,   745,   747,   749,   751,   753,   755,   757,   759,
     761,   763,   766,   767,   772,   774,   776,   779,   783,   785,
     788,   790,   793,   799,   803,   805,   807,   812,   818,   821,
     825,   829,   832,   834,   837,   840,   843,   845,   848,   854,
     862,   869,   871,   873,   875,   876,   879,   883,   886,   889,
     892,   896,   899,   901,   903,   905,   907,   910,   912,   915,
     923,   925,   927,   929,   930,   932,   937,   941,   943,   946,
     950
d730 83
a812 96
     246,     0,    -1,    -1,   248,   250,   247,   253,    -1,    -1,
     129,    98,   133,    -1,   129,    98,   251,   133,    -1,   136,
     133,    -1,   137,   133,    -1,   138,   133,    -1,   139,   133,
      -1,   140,   133,    -1,    -1,   250,   252,    -1,    94,    -1,
      95,    -1,    96,    -1,   130,   251,   132,   251,   133,    -1,
     343,    -1,   253,   343,    -1,    94,    -1,    96,    -1,   254,
      -1,    98,    -1,    99,    -1,    97,    -1,   100,    -1,   221,
     285,   222,    -1,   255,    -1,   256,   223,   257,   224,    -1,
     258,    -1,   256,   225,   251,    -1,   256,   104,    -1,   256,
     105,    -1,   285,    -1,   259,    -1,   260,    -1,   256,   225,
     265,    -1,   262,   222,    -1,   261,   222,    -1,   263,    92,
      -1,   263,    -1,   263,   283,    -1,   262,   226,   283,    -1,
     264,   221,    -1,   309,    -1,   254,    -1,   101,    -1,   267,
     222,    -1,   266,   222,    -1,   268,    92,    -1,   268,    -1,
     268,   283,    -1,   267,   226,   283,    -1,   254,   221,    -1,
     256,    -1,   104,   269,    -1,   105,   269,    -1,   270,   269,
      -1,   227,    -1,   228,    -1,   229,    -1,   230,    -1,   269,
      -1,   271,   231,   269,    -1,   271,   232,   269,    -1,   271,
     233,   269,    -1,   271,    -1,   272,   227,   271,    -1,   272,
     228,   271,    -1,   272,    -1,   273,   102,   272,    -1,   273,
     103,   272,    -1,   273,    -1,   274,   234,   273,    -1,   274,
     235,   273,    -1,   274,   106,   273,    -1,   274,   107,   273,
      -1,   274,    -1,   275,   108,   274,    -1,   275,   109,   274,
      -1,   275,    -1,   276,   236,   275,    -1,   276,    -1,   277,
     237,   276,    -1,   277,    -1,   278,   238,   277,    -1,   278,
      -1,   279,   110,   278,    -1,   279,    -1,   280,   112,   279,
      -1,   280,    -1,   281,   111,   280,    -1,   281,    -1,   281,
     239,   285,   240,   283,    -1,   282,    -1,   269,   284,   283,
      -1,   241,    -1,   113,    -1,   114,    -1,   116,    -1,   115,
      -1,   122,    -1,   117,    -1,   118,    -1,   119,    -1,   120,
      -1,   121,    -1,   283,    -1,   285,   226,   283,    -1,   282,
      -1,   288,   242,    -1,   297,   242,    -1,   128,   312,   309,
     242,    -1,   345,    -1,   289,   222,    -1,   291,    -1,   290,
      -1,   291,   293,    -1,   290,   226,   293,    -1,   299,   254,
     221,    -1,   309,   251,    -1,   309,   251,   223,   286,   224,
      -1,   294,   292,    -1,   294,   296,    -1,    -1,     4,   294,
      -1,   295,   294,    -1,   312,   294,    -1,    33,    -1,    34,
      -1,    35,    -1,   309,    -1,   298,    -1,   297,   226,   251,
      -1,   297,   226,   251,   223,   224,    -1,   297,   226,   251,
     223,   286,   224,    -1,   297,   226,   251,   223,   224,   241,
     318,    -1,   297,   226,   251,   223,   286,   224,   241,   318,
      -1,   297,   226,   251,   241,   318,    -1,   299,    -1,   299,
     251,    -1,   299,   251,   223,   224,    -1,   299,   251,   223,
     286,   224,    -1,   299,   251,   223,   224,   241,   318,    -1,
     299,   251,   223,   286,   224,   241,   318,    -1,   299,   251,
     241,   318,    -1,   123,   254,    -1,   309,    -1,   306,   309,
      -1,   141,   221,   301,   222,    -1,   303,    -1,   301,   226,
     303,    -1,    98,    -1,    99,    -1,   251,    -1,   251,   241,
     302,    -1,   304,    -1,   219,    -1,   149,    -1,    40,    -1,
      39,    -1,    38,    -1,   123,    -1,   307,    -1,   308,    -1,
     305,    -1,   300,    -1,   312,    -1,   123,   306,    -1,   305,
     306,    -1,   300,   306,    -1,   307,   306,    -1,   308,   306,
      -1,   312,   306,    -1,    32,    -1,     4,    -1,     3,    -1,
      37,    -1,    33,    -1,    34,    -1,    36,    -1,   310,    -1,
     310,   223,   224,    -1,   310,   223,   286,   224,    -1,   311,
      -1,   313,    -1,    95,    -1,    92,    -1,     6,    -1,     7,
      -1,     8,    -1,     5,    -1,    29,    -1,    30,    -1,    31,
      -1,    20,    -1,    21,    -1,    22,    -1,    23,    -1,    24,
      -1,    25,    -1,    26,    -1,    27,    -1,    28,    -1,    41,
      -1,    42,    -1,    43,    -1,    44,    -1,    45,    -1,    46,
      -1,    47,    -1,    48,    -1,    49,    -1,    50,    -1,    51,
      -1,    77,    -1,    52,    -1,    53,    -1,    90,    -1,    54,
      -1,    55,    -1,    80,    -1,    56,    -1,    57,    -1,    58,
      -1,    59,    -1,    60,    -1,    81,    -1,    61,    -1,    62,
      -1,    63,    -1,    64,    -1,    78,    -1,    65,    -1,    66,
      -1,    67,    -1,    68,    -1,    82,    -1,    69,    -1,    70,
      -1,    71,    -1,    79,    -1,    72,    -1,    73,    -1,    74,
      -1,    75,    -1,    83,    -1,    76,    -1,    84,    -1,    85,
      -1,    86,    -1,    87,    -1,    88,    -1,    89,    -1,   126,
      -1,   125,    -1,   124,    -1,    91,   251,   243,   314,   244,
      -1,    91,   243,   314,   244,    -1,   315,    -1,   314,   315,
      -1,   309,   316,   242,    -1,   317,    -1,   316,   226,   317,
      -1,   251,    -1,   251,   223,   286,   224,    -1,   283,    -1,
     243,   319,   244,    -1,   243,   319,   226,   244,    -1,   318,
      -1,   319,   226,   318,    -1,   287,    -1,   323,    -1,   322,
      -1,   320,    -1,   328,    -1,   329,    -1,   332,    -1,   338,
      -1,   342,    -1,   243,   244,    -1,    -1,   243,   324,   327,
     244,    -1,   326,    -1,   322,    -1,   243,   244,    -1,   243,
     327,   244,    -1,   321,    -1,   327,   321,    -1,   242,    -1,
     285,   242,    -1,    14,   221,   285,   222,   330,    -1,   321,
      12,   321,    -1,   321,    -1,   285,    -1,   299,   251,   241,
     318,    -1,    17,   221,   285,   222,   333,    -1,   243,   244,
      -1,   243,   337,   244,    -1,    18,   285,   240,    -1,    19,
     240,    -1,   334,    -1,   335,   334,    -1,   335,   321,    -1,
     336,   321,    -1,   336,    -1,   337,   336,    -1,    93,   221,
     331,   222,   325,    -1,    11,   321,    93,   221,   285,   222,
     242,    -1,    13,   221,   339,   341,   222,   325,    -1,   328,
      -1,   320,    -1,   331,    -1,    -1,   340,   242,    -1,   340,
     242,   285,    -1,    10,   242,    -1,     9,   242,    -1,    16,
     242,    -1,    16,   285,   242,    -1,    15,   242,    -1,   344,
      -1,   287,    -1,   249,    -1,   351,    -1,   288,   326,    -1,
     346,    -1,   300,   346,    -1,   347,    96,   243,   349,   244,
     348,   242,    -1,    33,    -1,    34,    -1,    36,    -1,    -1,
      96,    -1,    96,   223,   286,   224,    -1,    96,   223,   224,
      -1,   350,    -1,   350,   349,    -1,   299,   316,   242,    -1,
     300,    36,   242,    -1
d818 30
a847 35
       0,   263,   263,   262,   274,   276,   283,   293,   294,   295,
     296,   297,   310,   312,   316,   317,   318,   322,   331,   339,
     350,   351,   355,   362,   369,   376,   383,   390,   397,   398,
     404,   408,   415,   421,   430,   434,   438,   439,   448,   449,
     453,   454,   458,   464,   476,   480,   486,   493,   503,   504,
     508,   509,   513,   519,   531,   542,   543,   549,   555,   565,
     566,   567,   568,   572,   573,   579,   585,   594,   595,   601,
     610,   611,   617,   626,   627,   633,   639,   645,   654,   655,
     661,   670,   671,   680,   681,   690,   691,   700,   701,   710,
     711,   720,   721,   730,   731,   740,   741,   750,   751,   752,
     753,   754,   755,   756,   757,   758,   759,   760,   764,   768,
     784,   788,   793,   797,   802,   809,   813,   814,   818,   823,
     831,   845,   855,   870,   875,   888,   891,   899,   911,   924,
     929,   934,   943,   947,   948,   958,   968,   978,   993,  1008,
    1026,  1033,  1042,  1051,  1060,  1074,  1088,  1100,  1114,  1121,
    1132,  1139,  1140,  1150,  1151,  1155,  1231,  1280,  1302,  1307,
    1315,  1320,  1325,  1334,  1339,  1340,  1341,  1342,  1343,  1361,
    1374,  1402,  1425,  1440,  1460,  1474,  1482,  1487,  1492,  1497,
    1502,  1507,  1515,  1516,  1522,  1531,  1537,  1543,  1552,  1553,
    1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,  1562,  1563,
    1564,  1565,  1566,  1567,  1568,  1569,  1570,  1571,  1572,  1573,
    1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1582,  1583,
    1584,  1585,  1586,  1587,  1588,  1589,  1590,  1591,  1592,  1593,
    1594,  1595,  1596,  1597,  1598,  1599,  1600,  1601,  1602,  1603,
    1604,  1605,  1606,  1607,  1608,  1609,  1610,  1611,  1612,  1613,
    1614,  1615,  1616,  1617,  1618,  1622,  1627,  1632,  1640,  1648,
    1657,  1662,  1670,  1685,  1690,  1698,  1704,  1713,  1714,  1718,
    1725,  1732,  1739,  1745,  1746,  1750,  1751,  1752,  1753,  1754,
    1755,  1759,  1766,  1765,  1779,  1780,  1784,  1790,  1799,  1809,
    1821,  1827,  1836,  1845,  1850,  1858,  1862,  1880,  1888,  1893,
    1901,  1906,  1914,  1922,  1930,  1938,  1946,  1954,  1962,  1969,
    1976,  1986,  1987,  1991,  1993,  1999,  2004,  2013,  2019,  2025,
    2031,  2037,  2046,  2047,  2048,  2049,  2053,  2067,  2071,  2082,
    2179,  2184,  2189,  2198,  2202,  2207,  2212,  2223,  2228,  2236,
    2260
d851 1
a851 1
#if YYDEBUG || YYERROR_VERBOSE || 1
d866 2
a867 3
  "SAMPLER2DARRAYSHADOW", "SAMPLERCUBEARRAY", "SAMPLERCUBEARRAYSHADOW",
  "ISAMPLER1D", "ISAMPLER2D", "ISAMPLER3D", "ISAMPLERCUBE",
  "ISAMPLER1DARRAY", "ISAMPLER2DARRAY", "ISAMPLERCUBEARRAY", "USAMPLER1D",
d869 18
a886 23
  "USAMPLER2DARRAY", "USAMPLERCUBEARRAY", "SAMPLER2DRECT",
  "ISAMPLER2DRECT", "USAMPLER2DRECT", "SAMPLER2DRECTSHADOW",
  "SAMPLERBUFFER", "ISAMPLERBUFFER", "USAMPLERBUFFER", "SAMPLER2DMS",
  "ISAMPLER2DMS", "USAMPLER2DMS", "SAMPLER2DMSARRAY", "ISAMPLER2DMSARRAY",
  "USAMPLER2DMSARRAY", "SAMPLEREXTERNALOES", "STRUCT", "VOID_TOK", "WHILE",
  "IDENTIFIER", "TYPE_IDENTIFIER", "NEW_IDENTIFIER", "FLOATCONSTANT",
  "INTCONSTANT", "UINTCONSTANT", "BOOLCONSTANT", "FIELD_SELECTION",
  "LEFT_OP", "RIGHT_OP", "INC_OP", "DEC_OP", "LE_OP", "GE_OP", "EQ_OP",
  "NE_OP", "AND_OP", "OR_OP", "XOR_OP", "MUL_ASSIGN", "DIV_ASSIGN",
  "ADD_ASSIGN", "MOD_ASSIGN", "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN",
  "XOR_ASSIGN", "OR_ASSIGN", "SUB_ASSIGN", "INVARIANT", "LOWP", "MEDIUMP",
  "HIGHP", "SUPERP", "PRECISION", "VERSION_TOK", "EXTENSION", "LINE",
  "COLON", "EOL", "INTERFACE", "OUTPUT", "PRAGMA_DEBUG_ON",
  "PRAGMA_DEBUG_OFF", "PRAGMA_OPTIMIZE_ON", "PRAGMA_OPTIMIZE_OFF",
  "PRAGMA_INVARIANT_ALL", "LAYOUT_TOK", "ASM", "CLASS", "UNION", "ENUM",
  "TYPEDEF", "TEMPLATE", "THIS", "PACKED_TOK", "GOTO", "INLINE_TOK",
  "NOINLINE", "VOLATILE", "PUBLIC_TOK", "STATIC", "EXTERN", "EXTERNAL",
  "LONG_TOK", "SHORT_TOK", "DOUBLE_TOK", "HALF", "FIXED_TOK", "UNSIGNED",
  "INPUT_TOK", "OUPTUT", "HVEC2", "HVEC3", "HVEC4", "DVEC2", "DVEC3",
  "DVEC4", "FVEC2", "FVEC3", "FVEC4", "SAMPLER3DRECT", "SIZEOF", "CAST",
  "NAMESPACE", "USING", "COHERENT", "RESTRICT", "READONLY", "WRITEONLY",
  "RESOURCE", "ATOMIC_UINT", "PATCH", "SAMPLE", "SUBROUTINE", "ERROR_TOK",
  "COMMON", "PARTITION", "ACTIVE", "FILTER", "IMAGE1D", "IMAGE2D",
d892 9
a900 9
  "IMAGE2DARRAYSHADOW", "ROW_MAJOR", "THEN", "'('", "')'", "'['", "']'",
  "'.'", "','", "'+'", "'-'", "'!'", "'~'", "'*'", "'/'", "'%'", "'<'",
  "'>'", "'&'", "'^'", "'|'", "'?'", "':'", "'='", "';'", "'{'", "'}'",
  "$accept", "translation_unit", "$@@1", "version_statement",
  "pragma_statement", "extension_statement_list", "any_identifier",
  "extension_statement", "external_declaration_list",
  "variable_identifier", "primary_expression", "postfix_expression",
  "integer_expression", "function_call", "function_call_or_method",
  "function_call_generic", "function_call_header_no_parameters",
d914 12
a925 14
  "parameter_qualifier", "parameter_direction_qualifier",
  "parameter_type_specifier", "init_declarator_list", "single_declaration",
  "fully_specified_type", "layout_qualifier", "layout_qualifier_id_list",
  "integer_constant", "layout_qualifier_id",
  "interface_block_layout_qualifier", "interpolation_qualifier",
  "type_qualifier", "auxiliary_storage_qualifier", "storage_qualifier",
  "type_specifier", "type_specifier_nonarray",
  "basic_type_specifier_nonarray", "precision_qualifier",
  "struct_specifier", "struct_declaration_list", "struct_declaration",
  "struct_declarator_list", "struct_declarator", "initializer",
  "initializer_list", "declaration_statement", "statement",
  "simple_statement", "compound_statement", "$@@2",
  "statement_no_new_scope", "compound_statement_no_new_scope",
  "statement_list", "expression_statement", "selection_statement",
d927 1
a927 2
  "switch_body", "case_label", "case_label_list", "case_statement",
  "case_statement_list", "iteration_statement", "for_init_statement",
d929 1
a929 3
  "external_declaration", "function_definition", "interface_block",
  "basic_interface_block", "interface_qualifier", "instance_name_opt",
  "member_list", "member_declaration", "layout_defaults", YY_NULL
d957 3
a959 6
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,    40,    41,    91,    93,    46,    44,    43,    45,    33,
     126,    42,    47,    37,    60,    62,    38,    94,   124,    63,
      58,    61,    59,   123,   125
d966 30
a995 35
       0,   245,   247,   246,   248,   248,   248,   249,   249,   249,
     249,   249,   250,   250,   251,   251,   251,   252,   253,   253,
     254,   254,   255,   255,   255,   255,   255,   255,   256,   256,
     256,   256,   256,   256,   257,   258,   259,   259,   260,   260,
     261,   261,   262,   262,   263,   264,   264,   264,   265,   265,
     266,   266,   267,   267,   268,   269,   269,   269,   269,   270,
     270,   270,   270,   271,   271,   271,   271,   272,   272,   272,
     273,   273,   273,   274,   274,   274,   274,   274,   275,   275,
     275,   276,   276,   277,   277,   278,   278,   279,   279,   280,
     280,   281,   281,   282,   282,   283,   283,   284,   284,   284,
     284,   284,   284,   284,   284,   284,   284,   284,   285,   285,
     286,   287,   287,   287,   287,   288,   289,   289,   290,   290,
     291,   292,   292,   293,   293,   294,   294,   294,   294,   295,
     295,   295,   296,   297,   297,   297,   297,   297,   297,   297,
     298,   298,   298,   298,   298,   298,   298,   298,   299,   299,
     300,   301,   301,   302,   302,   303,   303,   303,   304,   304,
     305,   305,   305,   306,   306,   306,   306,   306,   306,   306,
     306,   306,   306,   306,   306,   307,   308,   308,   308,   308,
     308,   308,   309,   309,   309,   310,   310,   310,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   312,   312,   312,   313,   313,
     314,   314,   315,   316,   316,   317,   317,   318,   318,   318,
     319,   319,   320,   321,   321,   322,   322,   322,   322,   322,
     322,   323,   324,   323,   325,   325,   326,   326,   327,   327,
     328,   328,   329,   330,   330,   331,   331,   332,   333,   333,
     334,   334,   335,   335,   336,   336,   337,   337,   338,   338,
     338,   339,   339,   340,   340,   341,   341,   342,   342,   342,
     342,   342,   343,   343,   343,   343,   344,   345,   345,   346,
     347,   347,   347,   348,   348,   348,   348,   349,   349,   350,
     351
d1001 18
a1018 19
       0,     2,     0,     4,     0,     3,     4,     2,     2,     2,
       2,     2,     0,     2,     1,     1,     1,     5,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     4,
       1,     3,     2,     2,     1,     1,     1,     3,     2,     2,
       2,     1,     2,     3,     2,     1,     1,     1,     2,     2,
       2,     1,     2,     3,     2,     1,     2,     2,     2,     1,
       1,     1,     1,     1,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
       3,     1,     3,     1,     5,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     2,     2,     4,     1,     2,     1,     1,     2,     3,
       3,     2,     5,     2,     2,     0,     2,     2,     2,     1,
       1,     1,     1,     1,     3,     5,     6,     7,     8,     5,
       1,     2,     4,     5,     6,     7,     4,     2,     1,     2,
       4,     1,     3,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     4,     1,     1,     1,     1,     1,
d1024 7
a1030 11
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     5,     4,
       1,     2,     3,     1,     3,     1,     4,     1,     3,     4,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     0,     4,     1,     1,     2,     3,     1,     2,
       1,     2,     5,     3,     1,     1,     4,     5,     2,     3,
       3,     2,     1,     2,     2,     2,     1,     2,     5,     7,
       6,     1,     1,     1,     0,     2,     3,     2,     2,     2,
       3,     2,     1,     1,     1,     1,     2,     1,     2,     7,
       1,     1,     1,     0,     1,     4,     3,     1,     2,     3,
       3
d1033 2
a1034 2
/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
d1038 44
a1081 50
       4,     0,     0,    12,     0,     1,     2,    14,    15,    16,
       5,     0,     0,     0,    13,     6,     0,   177,   176,   192,
     189,   190,   191,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   193,   194,   195,   175,   179,   180,   181,   178,
     162,   161,   160,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   217,   218,   220,   221,   223,   224,
     225,   226,   227,   229,   230,   231,   232,   234,   235,   236,
     237,   239,   240,   241,   243,   244,   245,   246,   248,   216,
     233,   242,   222,   228,   238,   247,   249,   250,   251,   252,
     253,   254,   219,     0,   188,   187,   163,   257,   256,   255,
       0,     0,     0,     0,     0,     0,     0,   324,     3,   323,
       0,     0,   117,   125,     0,   133,   140,   167,   166,     0,
     164,   165,   148,   182,   185,   168,   186,    18,   322,   114,
     327,     0,   325,     0,     0,     0,   179,   180,   181,    20,
      21,   163,   147,   167,   169,     0,     7,     8,     9,    10,
      11,     0,    19,   111,     0,   326,   115,   125,   125,   129,
     130,   131,   118,     0,   125,   125,     0,   112,    14,    16,
     141,     0,   181,   171,   328,   170,   149,   172,   173,     0,
     174,     0,     0,     0,     0,   260,     0,     0,   159,   158,
     155,     0,   151,   157,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,    23,    24,    26,    47,     0,     0,
       0,    59,    60,    61,    62,   290,   282,   286,    22,    28,
      55,    30,    35,    36,     0,     0,    41,     0,    63,     0,
      67,    70,    73,    78,    81,    83,    85,    87,    89,    91,
      93,    95,   108,     0,   272,     0,   167,   148,   275,   288,
     274,   273,     0,   276,   277,   278,   279,   280,   119,   126,
     123,   124,   132,   127,   128,   134,     0,     0,   120,   340,
     183,    63,   110,     0,    45,     0,    17,   265,     0,   263,
     259,   261,     0,   113,     0,   150,     0,   318,   317,     0,
       0,     0,   321,   319,     0,     0,     0,    56,    57,     0,
     281,     0,    32,    33,     0,     0,    39,    38,     0,   188,
      42,    44,    98,    99,   101,   100,   103,   104,   105,   106,
     107,   102,    97,     0,    58,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   291,   287,   289,   121,
       0,     0,   142,     0,     0,   267,   146,   184,     0,     0,
     337,     0,     0,   262,   258,   153,   154,   156,   152,     0,
     312,   311,   314,     0,   320,     0,   295,     0,     0,    27,
       0,     0,    34,    31,     0,    37,     0,     0,    51,    43,
      96,    64,    65,    66,    68,    69,    71,    72,    76,    77,
      74,    75,    79,    80,    82,    84,    86,    88,    90,    92,
       0,   109,     0,   135,     0,   139,     0,   143,   270,     0,
       0,   333,   338,     0,   264,     0,   313,     0,     0,     0,
       0,     0,     0,   283,    29,    54,    49,    48,     0,   188,
      52,     0,     0,     0,   136,   144,     0,     0,   268,   339,
     334,     0,   266,     0,   315,     0,   294,   292,     0,   297,
       0,   285,   308,   284,    53,    94,   122,   137,     0,   145,
     269,   271,     0,   329,     0,   316,   310,     0,     0,     0,
     298,   302,     0,   306,     0,   296,   138,   336,     0,   309,
     293,     0,   301,   304,   303,   305,   299,   307,   335,   300
d1087 10
a1096 11
      -1,     2,    13,     3,   107,     6,   277,    14,   108,   218,
     219,   220,   381,   221,   222,   223,   224,   225,   226,   227,
     385,   386,   387,   388,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   323,
     243,   273,   244,   245,   111,   112,   113,   260,   162,   163,
     164,   261,   114,   115,   116,   143,   191,   367,   192,   193,
     118,   119,   120,   121,   274,   123,   124,   125,   126,   184,
     185,   278,   279,   356,   419,   248,   249,   250,   251,   301,
     462,   463,   252,   253,   254,   457,   378,   255,   459,   481,
     482,   483,   484,   256,   372,   427,   428,   257,   127,   128,
     129,   130,   131,   451,   359,   360,   132
d1101 1
a1101 1
#define YYPACT_NINF -392
d1104 44
a1147 50
    -100,    -8,   108,  -392,   -50,  -392,     3,  -392,  -392,  -392,
    -392,     9,   127,  3234,  -392,  -392,    24,  -392,  -392,  -392,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,  -392,  -392,  -392,    66,    68,    74,  -392,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,   -80,  -392,  -392,   289,  -392,  -392,  -392,
     109,    39,    41,    51,    60,    92,    15,  -392,  3234,  -392,
    -209,     8,    12,     2,  -166,  -392,   150,   215,   312,  1319,
     312,   312,  -392,    17,  -392,   312,  -392,  -392,  -392,  -392,
    -392,   154,  -392,   127,  1319,    13,  -392,  -392,  -392,  -392,
    -392,   312,  -392,   312,  -392,  1319,  -392,  -392,  -392,  -392,
    -392,   -64,  -392,  -392,   484,  -392,  -392,    34,    34,  -392,
    -392,  -392,  -392,  1319,    34,    34,   127,  -392,    43,    49,
    -161,    50,   -95,  -392,  -392,  -392,  -392,  -392,  -392,  2373,
    -392,    30,   141,   127,   593,  -392,  1319,    33,  -392,  -392,
      35,  -113,  -392,  -392,    36,    38,  1451,    63,    65,    47,
    2255,    77,    80,  -392,  -392,  -392,  -392,  -392,  1801,  1801,
    1801,  -392,  -392,  -392,  -392,  -392,    55,  -392,    83,  -392,
     -33,  -392,  -392,  -392,    59,  -112,  3006,    84,   -63,  1801,
      27,   -46,   -21,   -81,    37,    71,    58,    70,   199,   198,
     -90,  -392,  -392,  -165,  -392,    72,  1067,    91,  -392,  -392,
    -392,  -392,   726,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,   127,  -392,  -392,  -153,  2694,  2147,  -392,  -392,
    -392,  -392,  -392,    89,  -392,  3360,  -392,    94,  -151,  -392,
    -392,  -392,   835,  -392,    78,  -392,   -64,  -392,  -392,   225,
    1920,  1801,  -392,  -392,  -142,  1801,  2483,  -392,  -392,   -97,
    -392,  1451,  -392,  -392,  1801,   150,  -392,  -392,  1801,    97,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,  1801,  -392,  1801,  1801,  1801,  1801,  1801,
    1801,  1801,  1801,  1801,  1801,  1801,  1801,  1801,  1801,  1801,
    1801,  1801,  1801,  1801,  1801,  1801,  -392,  -392,  -392,   101,
    2795,  2147,    79,   107,  2147,  -392,  -392,  -392,   127,    88,
    3360,  1801,   127,  -392,  -392,  -392,  -392,  -392,  -392,   112,
    -392,  -392,  2483,   -87,  -392,   -82,   110,   127,   113,  -392,
     968,   119,   110,  -392,   132,  -392,   133,   -65,  3116,  -392,
    -392,  -392,  -392,  -392,    27,    27,   -46,   -46,   -21,   -21,
     -21,   -21,   -81,   -81,    37,    71,    58,    70,   199,   198,
    -139,  -392,  1801,    93,   130,  -392,  2147,   117,  -392,  -152,
    -137,   266,  -392,   139,  -392,  1801,  -392,   122,   144,  1451,
     125,   129,  1692,  -392,  -392,  -392,  -392,  -392,  1801,   149,
    -392,  1801,   148,  2147,   134,  -392,  2147,  2029,  -392,  -392,
     153,   131,  -392,   -57,  1801,  1692,   365,  -392,   -15,  -392,
    2147,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  2147,  -392,
    -392,  -392,  2905,  -392,   137,   110,  -392,  1451,  1801,   140,
    -392,  -392,  1210,  1451,    -7,  -392,  -392,  -392,   157,  -392,
    -392,  -133,  -392,  -392,  -392,  -392,  -392,  1451,  -392,  -392
d1153 10
a1162 11
    -392,  -392,  -392,  -392,  -392,  -392,     1,  -392,  -392,   -88,
    -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,  -392,
    -392,  -392,  -392,  -392,  -130,  -392,  -114,  -103,  -146,   -70,
      46,    52,    48,    45,    56,    54,  -392,  -170,   -51,  -392,
    -193,  -246,    10,    11,  -392,  -392,  -392,  -392,   232,   -42,
    -392,  -392,  -392,  -392,  -248,   -11,  -392,  -392,   114,  -392,
    -392,   -78,  -392,  -392,   -13,  -392,  -392,   -27,  -392,   207,
    -162,    44,    32,   -86,  -392,   111,  -186,  -391,  -392,  -392,
     -56,   293,   103,   115,  -392,  -392,    53,  -392,  -392,   -76,
    -392,   -77,  -392,  -392,  -392,  -392,  -392,  -392,   300,  -392,
    -392,   -98,  -392,  -392,    62,  -392,  -392
d1167 3
a1169 2
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -333
d1172 88
a1259 52
     122,  -332,   117,   478,   479,    11,   158,   294,   142,   272,
     289,   478,   479,    16,     7,     8,     9,   299,   144,   174,
     353,   343,   281,   109,   110,   332,   333,   358,   171,     1,
       7,     8,     9,   153,   154,   159,   160,   161,   158,   173,
     175,   461,   177,   178,     7,     8,     9,   180,   377,   271,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     166,   345,   266,   144,   461,   173,   348,   159,   160,   161,
     350,   302,   303,   145,   447,   362,   167,   346,   297,   298,
     267,   330,   331,    10,   345,   188,   165,   345,   351,   362,
       4,   363,   448,   345,   135,   122,   272,   117,   373,   324,
     374,   441,   375,   376,   414,   449,   176,   499,     5,   285,
     307,   382,   358,   286,   308,   423,   259,   170,   109,   110,
     281,   183,   263,   264,   377,   379,    97,    98,    99,   345,
     165,   165,   187,    12,   182,   429,   271,   165,   165,   345,
     430,   247,    15,   246,   345,   336,   337,   269,   174,   344,
     262,   410,   190,   334,   335,   189,   133,   437,    97,    98,
      99,   438,  -330,   134,  -331,   474,   442,   265,   173,   345,
    -332,   183,   146,   183,   147,   310,   365,   366,   322,   376,
     272,   328,   329,   247,   148,   246,   398,   399,   400,   401,
     304,   272,   305,   149,   348,   391,   392,   393,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   394,   395,   355,   384,    17,    18,
     271,     7,     8,     9,  -116,   150,   488,   396,   397,   480,
     156,   271,   453,    97,    98,    99,   151,   496,   157,   247,
     179,   246,   272,   456,   168,     8,   169,    35,    36,    37,
     181,   172,    39,    40,    41,    42,   186,   389,   325,   326,
     327,   475,   122,   349,   -20,   415,   402,   403,   418,   183,
     -21,   268,   390,   275,   276,   283,   284,   247,   287,   246,
     288,   306,   271,   247,   290,   491,   291,   190,   247,   292,
     246,   490,    17,    18,   411,   339,   493,   495,   295,   300,
     355,   296,   272,   355,   -46,   311,   383,   338,   340,   341,
     342,   495,   -45,   357,   153,    17,    18,   361,   369,   -40,
     416,    35,   136,   137,   412,   138,    39,    40,    41,    42,
     445,   417,   421,   425,   443,   432,   345,   440,   141,    97,
      98,    99,   271,   434,    35,   136,   137,   122,   138,    39,
      40,    41,    42,   435,   444,   436,   106,   467,   446,   247,
     469,   471,   450,   452,   454,   355,   455,   247,   458,   246,
     460,   -50,   466,   473,   485,   468,   472,   477,   431,   489,
     492,   498,   486,   139,   404,   140,   407,   464,   406,   258,
     465,   405,   355,   282,   424,   355,   355,   409,   408,   476,
     368,   370,   420,   155,   380,   371,   494,   497,   152,   355,
       0,     0,   141,    97,    98,    99,   247,   355,   246,   247,
       0,   246,   422,     0,     0,   426,     0,     0,     0,     0,
     106,     0,     0,     0,     0,   141,    97,    98,    99,     0,
       0,     0,   247,     0,   246,     0,     0,     0,     0,     0,
       0,     0,     0,   106,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   247,     0,   246,     0,     0,   247,
     247,   246,   246,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   247,     0,   246,    17,    18,    19,
      20,    21,    22,   194,   195,   196,     0,   197,   198,   199,
     200,   201,     0,     0,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,     0,
d1263 49
a1311 53
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,   202,   139,    95,
     140,   203,   204,   205,   206,   207,     0,     0,   208,   209,
       0,     0,     0,     0,     0,     0,     0,     0,    19,    20,
      21,    22,     0,     0,     0,     0,     0,    96,    97,    98,
      99,     0,   100,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,   106,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,     0,     0,    95,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   210,     0,     0,     0,     0,
       0,   211,   212,   213,   214,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   215,   216,   217,    17,
      18,    19,    20,    21,    22,   194,   195,   196,     0,   197,
     198,   199,   200,   201,     0,     0,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,     0,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,   202,
     139,    95,   140,   203,   204,   205,   206,   207,     0,     0,
     208,   209,     0,     0,     0,     0,     0,   280,     0,     0,
      19,    20,    21,    22,     0,     0,     0,     0,     0,    96,
      97,    98,    99,     0,   100,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,   106,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,     0,     0,
      95,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   210,     0,     0,
       0,     0,     0,   211,   212,   213,   214,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   215,   216,
     347,    17,    18,    19,    20,    21,    22,   194,   195,   196,
       0,   197,   198,   199,   200,   201,     0,     0,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,     0,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,   202,   139,    95,   140,   203,   204,   205,   206,   207,
      17,    18,   208,   209,     0,     0,     0,     0,     0,   364,
a1312 2
       0,    96,    97,    98,    99,     0,   100,     0,     0,    35,
      36,    37,     0,    38,    39,    40,    41,    42,     0,   106,
d1315 1
d1319 10
d1330 1
d1332 2
a1333 5
       0,     0,     0,     0,     0,     0,     0,     0,     0,   210,
     141,    97,    98,    99,     0,   211,   212,   213,   214,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   106,     0,
     215,   216,   433,    17,    18,    19,    20,    21,    22,   194,
     195,   196,     0,   197,   198,   199,   200,   201,   478,   479,
d1335 1
a1335 1
      33,    34,    35,    36,    37,     0,    38,    39,    40,    41,
d1339 9
a1347 8
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,   202,   139,    95,   140,   203,   204,   205,
     206,   207,     0,     0,   208,   209,     0,     0,     0,     0,
       0,     0,     0,     0,    19,    20,    21,    22,     0,     0,
       0,     0,     0,    96,    97,    98,    99,     0,   100,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,   106,     0,     0,     0,     0,     0,     0,     0,     0,
d1351 29
a1379 10
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,     0,     0,    95,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   210,     0,     0,     0,     0,     0,   211,   212,   213,
     214,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   215,   216,    17,    18,    19,    20,    21,    22,
     194,   195,   196,     0,   197,   198,   199,   200,   201,     0,
       0,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,     0,    38,    39,    40,
d1383 28
a1410 4
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,   202,   139,    95,   140,   203,   204,
     205,   206,   207,     0,     0,   208,   209,     0,     0,     0,
a1411 1
       0,     0,     0,     0,    96,    97,    98,    99,     0,   100,
d1413 9
a1421 1
       0,     0,   106,     0,     0,     0,     0,     0,     0,     0,
d1423 1
d1428 2
d1432 4
a1435 40
       0,     0,   210,     0,     0,     0,     0,     0,   211,   212,
     213,   214,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   215,   216,    17,    18,    19,    20,    21,
      22,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,     0,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,   202,   139,    95,   140,   203,
     204,   205,   206,   207,     0,     0,   208,   209,     0,     0,
       0,     0,     0,     0,     0,     0,    19,    20,    21,    22,
       0,     0,     0,     0,     0,    96,    97,    98,    99,     0,
     100,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,   106,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,     0,   139,    95,   140,   203,   204,
     205,   206,   207,     0,     0,   208,   209,     0,     0,     0,
       0,     0,     0,   210,     0,     0,     0,     0,     0,   211,
     212,   213,   214,    17,    18,    19,    20,    21,    22,     0,
       0,     0,     0,     0,   215,   154,     0,     0,     0,     0,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,     0,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,     0,   139,    95,   140,   203,   204,   205,
     206,   207,   210,     0,   208,   209,     0,     0,   211,   212,
     213,   214,     0,     0,    19,    20,    21,    22,     0,     0,
       0,     0,     0,    96,    97,    98,    99,     0,   100,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,   106,     0,     0,     0,     0,     0,     0,     0,     0,
d1439 53
a1491 9
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,     0,   139,    95,   140,   203,   204,   205,   206,
     207,     0,     0,   208,   209,     0,     0,     0,     0,     0,
       0,   210,     0,     0,     0,     0,     0,   211,   212,   213,
     214,     0,    19,    20,    21,    22,     0,     0,     0,     0,
       0,     0,   215,     0,     0,     0,     0,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
d1494 16
a1509 31
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
       0,   139,    95,   140,   203,   204,   205,   206,   207,     0,
     210,   208,   209,     0,     0,     0,   211,   212,   213,   214,
      19,    20,    21,    22,     0,     0,     0,     0,     0,     0,
       0,     0,   354,   470,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,     0,   139,
      95,   140,   203,   204,   205,   206,   207,     0,     0,   208,
     209,     0,     0,     0,     0,     0,     0,     0,   210,     0,
       0,     0,     0,     0,   211,   212,   213,   214,    19,    20,
      21,    22,     0,     0,     0,     0,     0,     0,     0,     0,
     354,     0,     0,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,     0,   139,    95,   140,
     203,   204,   205,   206,   207,     0,   210,   208,   209,     0,
       0,     0,   211,   212,   213,   214,    17,    18,    19,    20,
      21,    22,     0,     0,     0,     0,     0,   293,     0,     0,
       0,     0,     0,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,   136,   137,     0,   138,
d1513 1
a1513 6
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,     0,   139,    95,   140,
     203,   204,   205,   206,   207,     0,     0,   208,   209,     0,
       0,     0,     0,     0,   210,     0,     0,   270,     0,     0,
     211,   212,   213,   214,     0,     0,   141,    97,    98,    99,
a1514 1
       0,     0,     0,     0,   106,     0,     0,     0,     0,     0,
d1516 3
d1520 14
a1537 77
       0,     0,     0,     0,     0,     0,     0,     0,     0,    19,
      20,    21,    22,     0,   210,     0,     0,     0,     0,     0,
     211,   212,   213,   214,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,     0,   139,    95,
     140,   203,   204,   205,   206,   207,     0,     0,   208,   209,
      19,    20,    21,    22,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,     0,   139,
      95,   140,   203,   204,   205,   206,   207,     0,     0,   208,
     209,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      19,    20,    21,    22,     0,   210,     0,     0,   352,     0,
       0,   211,   212,   213,   214,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,     0,   139,
      95,   140,   203,   204,   205,   206,   207,     0,     0,   208,
     209,    19,    20,    21,    22,     0,   210,     0,     0,   413,
       0,     0,   211,   212,   213,   214,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,   309,     0,
     139,    95,   140,   203,   204,   205,   206,   207,     0,     0,
     208,   209,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    19,    20,    21,    22,     0,   210,     0,     0,   487,
       0,     0,   211,   212,   213,   214,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,   439,     0,
     139,    95,   140,   203,   204,   205,   206,   207,     0,     0,
     208,   209,     0,     0,     0,     0,     0,   210,     0,     0,
       0,     0,     0,   211,   212,   213,   214,    17,    18,    19,
      20,    21,    22,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,     0,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,     0,     0,    95,
       0,     0,     0,     0,     0,     0,     0,   210,     0,     0,
       0,     0,     0,   211,   212,   213,   214,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    96,    97,    98,
      99,     0,   100,    17,    18,    19,    20,    21,    22,     0,
     101,   102,   103,   104,   105,   106,     0,     0,     0,     0,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,   136,   137,     0,   138,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,     0,     0,    95,     0,     0,     0,     0,
a1539 1
       0,     0,     0,   141,    97,    98,    99,     0,     0,     0,
d1541 1
a1541 1
       0,   106
a1543 6
#define yypact_value_is_default(yystate) \
  ((yystate) == (-392))

#define yytable_value_is_error(yytable_value) \
  YYID (0)

d1546 43
a1588 99
      13,    96,    13,    18,    19,     4,     4,   200,    96,   179,
     196,    18,    19,    12,    94,    95,    96,   210,    96,   117,
     266,   111,   184,    13,    13,   106,   107,   275,   116,   129,
      94,    95,    96,   242,   243,    33,    34,    35,     4,   117,
     118,   432,   120,   121,    94,    95,    96,   125,   296,   179,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     226,   226,   223,   141,   455,   143,   252,    33,    34,    35,
     223,   104,   105,   100,   226,   226,   242,   242,   208,   209,
     241,   102,   103,   133,   226,   149,   113,   226,   241,   226,
      98,   242,   244,   226,    93,   108,   266,   108,   291,   229,
     242,   240,   295,   296,   350,   242,   119,   240,     0,   222,
     222,   304,   360,   226,   226,   361,   158,   116,   108,   108,
     282,   134,   164,   165,   372,   222,   124,   125,   126,   226,
     157,   158,   145,   130,   133,   222,   266,   164,   165,   226,
     222,   154,   133,   154,   226,   108,   109,   242,   246,   239,
     163,   344,   151,   234,   235,   219,   132,   222,   124,   125,
     126,   226,    96,   243,    96,   222,   412,   166,   246,   226,
      96,   184,   133,   186,   133,   226,    98,    99,   241,   372,
     350,   227,   228,   196,   133,   196,   332,   333,   334,   335,
     223,   361,   225,   133,   380,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   328,   329,   267,   305,     3,     4,
     350,    94,    95,    96,   222,   133,   472,   330,   331,   244,
     222,   361,   425,   124,   125,   126,   221,   244,   226,   252,
     223,   252,   412,   429,    94,    95,    96,    32,    33,    34,
      96,    36,    37,    38,    39,    40,   243,   308,   231,   232,
     233,   454,   275,   262,   221,   351,   336,   337,   354,   282,
     221,   221,   323,   243,   133,   242,   241,   290,   242,   290,
     242,   222,   412,   296,   221,   478,   221,   286,   301,   242,
     301,   477,     3,     4,   345,   237,   482,   483,   221,   244,
     351,   221,   472,   354,   221,   221,   305,   236,   238,   110,
     112,   497,   221,   224,   242,     3,     4,   223,    93,   222,
     241,    32,    33,    34,   223,    36,    37,    38,    39,    40,
     416,   224,   244,   221,   241,   222,   226,   388,   123,   124,
     125,   126,   472,   224,    32,    33,    34,   360,    36,    37,
      38,    39,    40,   221,   224,   222,   141,   443,   241,   372,
     446,   447,    96,   224,   242,   416,   222,   380,   243,   380,
     241,   222,   224,   242,   460,   241,   223,    12,   377,   242,
     240,   224,   468,    94,   338,    96,   341,   438,   340,   157,
     441,   339,   443,   186,   362,   446,   447,   343,   342,   455,
     286,   290,   358,   110,   301,   290,   482,   484,   108,   460,
      -1,    -1,   123,   124,   125,   126,   429,   468,   429,   432,
      -1,   432,   360,    -1,    -1,   372,    -1,    -1,    -1,    -1,
     141,    -1,    -1,    -1,    -1,   123,   124,   125,   126,    -1,
      -1,    -1,   455,    -1,   455,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,    -1,   477,    -1,    -1,   482,
     483,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   497,    -1,   497,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    -1,    13,    14,    15,
      16,    17,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,
       7,     8,    -1,    -1,    -1,    -1,    -1,   123,   124,   125,
     126,    -1,   128,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,   141,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    -1,    95,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,    -1,    -1,
      -1,   227,   228,   229,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   242,   243,   244,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    -1,    13,
      14,    15,    16,    17,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,    -1,    -1,    -1,    -1,    -1,   244,    -1,    -1,
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,   123,
     124,   125,   126,    -1,   128,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,   141,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    -1,
      95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,
      -1,    -1,    -1,   227,   228,   229,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   242,   243,
     244,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      -1,    13,    14,    15,    16,    17,    -1,    -1,    20,    21,
d1595 1
a1595 3
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
       3,     4,   104,   105,    -1,    -1,    -1,    -1,    -1,   244,
d1597 1
a1597 2
      -1,   123,   124,   125,   126,    -1,   128,    -1,    -1,    32,
      33,    34,    -1,    36,    37,    38,    39,    40,    -1,   141,
d1599 1
d1602 1
d1606 12
d1619 2
a1620 43
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,
     123,   124,   125,   126,    -1,   227,   228,   229,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   141,    -1,
     242,   243,   244,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    -1,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,     6,     7,     8,    -1,    -1,
      -1,    -1,    -1,   123,   124,   125,   126,    -1,   128,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   221,    -1,    -1,    -1,    -1,    -1,   227,   228,   229,
     230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   242,   243,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    -1,    13,    14,    15,    16,    17,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   123,   124,   125,   126,    -1,   128,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1624 1
d1628 3
a1630 3
      -1,    -1,   221,    -1,    -1,    -1,    -1,    -1,   227,   228,
     229,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   242,   243,     3,     4,     5,     6,     7,
d1632 1
a1632 1
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
d1638 16
a1653 28
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,     8,
      -1,    -1,    -1,    -1,    -1,   123,   124,   125,   126,    -1,
     128,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,   141,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,    -1,    -1,    -1,
      -1,    -1,    -1,   221,    -1,    -1,    -1,    -1,    -1,   227,
     228,   229,   230,     3,     4,     5,     6,     7,     8,    -1,
      -1,    -1,    -1,    -1,   242,   243,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
     100,   101,   221,    -1,   104,   105,    -1,    -1,   227,   228,
     229,   230,    -1,    -1,     5,     6,     7,     8,    -1,    -1,
      -1,    -1,    -1,   123,   124,   125,   126,    -1,   128,    20,
d1655 1
a1655 1
      31,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1660 60
a1719 6
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,
      -1,   221,    -1,    -1,    -1,    -1,    -1,   227,   228,   229,
     230,    -1,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
      -1,    -1,   242,    -1,    -1,    -1,    -1,    20,    21,    22,
d1721 1
a1721 1
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,
d1725 46
a1770 6
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,   100,   101,    -1,
     221,   104,   105,    -1,    -1,    -1,   227,   228,   229,   230,
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   243,   244,    -1,    20,    21,    22,    23,    24,
d1776 51
a1826 7
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,    -1,
      -1,    -1,    -1,    -1,   227,   228,   229,   230,     5,     6,
       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     243,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
d1831 23
a1853 17
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,   101,    -1,   221,   104,   105,    -1,
      -1,    -1,   227,   228,   229,   230,     3,     4,     5,     6,
       7,     8,    -1,    -1,    -1,    -1,    -1,   242,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,    -1,
      -1,    -1,    -1,    -1,   221,    -1,    -1,   224,    -1,    -1,
     227,   228,   229,   230,    -1,    -1,   123,   124,   125,   126,
a1854 1
      -1,    -1,    -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,
d1858 1
d1862 2
a1863 13
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
       6,     7,     8,    -1,   221,    -1,    -1,    -1,    -1,    -1,
     227,   228,   229,   230,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
d1869 25
a1893 51
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,     6,     7,     8,    -1,   221,    -1,    -1,   224,    -1,
      -1,   227,   228,   229,   230,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,     5,     6,     7,     8,    -1,   221,    -1,    -1,   224,
      -1,    -1,   227,   228,   229,   230,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     5,     6,     7,     8,    -1,   221,    -1,    -1,   224,
      -1,    -1,   227,   228,   229,   230,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,    -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,
      -1,    -1,    -1,   227,   228,   229,   230,     3,     4,     5,
       6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,
      -1,    -1,    -1,   227,   228,   229,   230,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,   124,   125,
     126,    -1,   128,     3,     4,     5,     6,     7,     8,    -1,
     136,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
d1895 2
a1896 2
      30,    31,    32,    33,    34,    -1,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
d1899 10
a1908 3
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    -1,    95,    -1,    -1,    -1,    -1,
a1910 1
      -1,    -1,    -1,   123,   124,   125,   126,    -1,    -1,    -1,
d1912 4
a1915 1
      -1,   141
d1922 44
a1965 50
       0,   129,   246,   248,    98,     0,   250,    94,    95,    96,
     133,   251,   130,   247,   252,   133,   251,     3,     4,     5,
       6,     7,     8,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    95,   123,   124,   125,   126,
     128,   136,   137,   138,   139,   140,   141,   249,   253,   287,
     288,   289,   290,   291,   297,   298,   299,   300,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   343,   344,   345,
     346,   347,   351,   132,   243,   251,    33,    34,    36,    94,
      96,   123,   254,   300,   306,   312,   133,   133,   133,   133,
     133,   221,   343,   242,   243,   326,   222,   226,     4,    33,
      34,    35,   293,   294,   295,   312,   226,   242,    94,    96,
     251,   254,    36,   306,   346,   306,   309,   306,   306,   223,
     306,    96,   251,   309,   314,   315,   243,   309,   149,   219,
     251,   301,   303,   304,     9,    10,    11,    13,    14,    15,
      16,    17,    93,    97,    98,    99,   100,   101,   104,   105,
     221,   227,   228,   229,   230,   242,   243,   244,   254,   255,
     256,   258,   259,   260,   261,   262,   263,   264,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   285,   287,   288,   300,   309,   320,   321,
     322,   323,   327,   328,   329,   332,   338,   342,   293,   294,
     292,   296,   309,   294,   294,   251,   223,   241,   221,   242,
     224,   269,   282,   286,   309,   243,   133,   251,   316,   317,
     244,   315,   314,   242,   241,   222,   226,   242,   242,   321,
     221,   221,   242,   242,   285,   221,   221,   269,   269,   285,
     244,   324,   104,   105,   223,   225,   222,   222,   226,    92,
     283,   221,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   241,   284,   269,   231,   232,   233,   227,   228,
     102,   103,   106,   107,   234,   235,   108,   109,   236,   237,
     238,   110,   112,   111,   239,   226,   242,   244,   321,   251,
     223,   241,   224,   286,   243,   283,   318,   224,   299,   349,
     350,   223,   226,   242,   244,    98,    99,   302,   303,    93,
     320,   328,   339,   285,   242,   285,   285,   299,   331,   222,
     327,   257,   285,   251,   254,   265,   266,   267,   268,   283,
     283,   269,   269,   269,   271,   271,   272,   272,   273,   273,
     273,   273,   274,   274,   275,   276,   277,   278,   279,   280,
     285,   283,   223,   224,   286,   318,   241,   224,   318,   319,
     316,   244,   349,   286,   317,   221,   331,   340,   341,   222,
     222,   251,   222,   244,   224,   221,   222,   222,   226,    92,
     283,   240,   286,   241,   224,   318,   241,   226,   244,   242,
      96,   348,   224,   285,   242,   222,   321,   330,   243,   333,
     241,   322,   325,   326,   283,   283,   224,   318,   241,   318,
     244,   318,   223,   242,   222,   285,   325,    12,    18,    19,
     244,   334,   335,   336,   337,   318,   318,   224,   286,   242,
     321,   285,   240,   321,   334,   321,   244,   336,   224,   240
d1995 12
a2006 12
#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
d2016 1
d2021 1
d2023 16
a2038 16
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
a2041 3
#define YYRHSLOC(Rhs, K) ((Rhs)[K])


d2064 1
a2064 1
# define YYLEX yylex (&yylval, &yylloc, state)
a2111 2
  FILE *yyo = yyoutput;
  YYUSE (yyo);
d2257 1
d2360 9
a2368 11
/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
d2370 1
a2370 73
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  YYSIZE_T yysize1;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                if (! (yysize <= yysize1
                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                  return 2;
                yysize = yysize1;
              }
        }
    }
d2372 3
a2374 1
  switch (yycount)
d2376 66
a2441 12
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }
d2443 22
a2464 12
  yysize1 = yysize + yystrlen (yyformat);
  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
    return 2;
  yysize = yysize1;

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
a2465 20

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
d2468 1
d2505 15
d2523 4
a2526 3
/*----------.
| yyparse.  |
`----------*/
d2571 1
a2571 1
       Refer to the stacks through separate pointers, to allow yyoverflow
d2644 3
a2646 2
/* Line 1572 of yacc.c  */
#line 54 "glsl_parser.yy"
d2654 3
a2656 2
/* Line 1572 of yacc.c  */
#line 2767 "glsl_parser.cpp"
d2658 1
d2755 1
a2755 1
  if (yypact_value_is_default (yyn))
d2786 2
a2787 2
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
d2842 3
a2844 2
/* Line 1787 of yacc.c  */
#line 263 "glsl_parser.yy"
d2846 2
a2847 2
      _mesa_glsl_initialize_types(state);
   }
d2851 3
a2853 2
/* Line 1787 of yacc.c  */
#line 267 "glsl_parser.yy"
d2855 4
a2858 4
      delete state->symbols;
      state->symbols = new(ralloc_parent(state)) glsl_symbol_table;
      _mesa_glsl_initialize_types(state);
   }
a2861 9
/* Line 1787 of yacc.c  */
#line 277 "glsl_parser.yy"
    {
      state->process_version_directive(&(yylsp[(2) - (3)]), (yyvsp[(2) - (3)].n), NULL);
      if (state->error) {
         YYERROR;
      }
   }
    break;
d2863 2
a2864 3
  case 6:
/* Line 1787 of yacc.c  */
#line 284 "glsl_parser.yy"
d2866 1
a2866 6
      state->process_version_directive(&(yylsp[(2) - (4)]), (yyvsp[(2) - (4)].n), (yyvsp[(3) - (4)].identifier));
      if (state->error) {
         YYERROR;
      }
   }
    break;
d2868 59
a2926 13
  case 11:
/* Line 1787 of yacc.c  */
#line 298 "glsl_parser.yy"
    {
      if (!state->is_version(120, 100)) {
         _mesa_glsl_warning(& (yylsp[(1) - (2)]), state,
                            "pragma `invariant(all)' not supported in %s "
                            "(GLSL ES 1.00 or GLSL 1.20 required).",
                            state->get_version_string());
      } else {
         state->all_invariant = true;
      }
   }
d2930 3
a2932 2
/* Line 1787 of yacc.c  */
#line 323 "glsl_parser.yy"
d2934 6
a2939 4
      if (!_mesa_glsl_process_extension((yyvsp[(2) - (5)].identifier), & (yylsp[(2) - (5)]), (yyvsp[(4) - (5)].identifier), & (yylsp[(4) - (5)]), state)) {
         YYERROR;
      }
   }
d2943 3
a2945 2
/* Line 1787 of yacc.c  */
#line 332 "glsl_parser.yy"
d2947 18
a2964 18
      /* FINISHME: The NULL test is required because pragmas are set to
       * FINISHME: NULL. (See production rule for external_declaration.)
       */
      if ((yyvsp[(1) - (1)].node) != NULL)
         state->translation_unit.push_tail(& (yyvsp[(1) - (1)].node)->link);
   }
    break;

  case 19:
/* Line 1787 of yacc.c  */
#line 340 "glsl_parser.yy"
    {
      /* FINISHME: The NULL test is required because pragmas are set to
       * FINISHME: NULL. (See production rule for external_declaration.)
       */
      if ((yyvsp[(2) - (2)].node) != NULL)
         state->translation_unit.push_tail(& (yyvsp[(2) - (2)].node)->link);
   }
d2968 3
a2970 2
/* Line 1787 of yacc.c  */
#line 356 "glsl_parser.yy"
d2972 5
a2976 5
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_identifier, NULL, NULL, NULL);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->primary_expression.identifier = (yyvsp[(1) - (1)].identifier);
   }
d2980 3
a2982 2
/* Line 1787 of yacc.c  */
#line 363 "glsl_parser.yy"
d2984 5
a2988 5
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_int_constant, NULL, NULL, NULL);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->primary_expression.int_constant = (yyvsp[(1) - (1)].n);
   }
d2992 3
a2994 2
/* Line 1787 of yacc.c  */
#line 370 "glsl_parser.yy"
d2996 5
a3000 5
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_uint_constant, NULL, NULL, NULL);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->primary_expression.uint_constant = (yyvsp[(1) - (1)].n);
   }
d3004 3
a3006 2
/* Line 1787 of yacc.c  */
#line 377 "glsl_parser.yy"
d3008 5
a3012 5
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_float_constant, NULL, NULL, NULL);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->primary_expression.float_constant = (yyvsp[(1) - (1)].real);
   }
d3016 3
a3018 2
/* Line 1787 of yacc.c  */
#line 384 "glsl_parser.yy"
d3020 8
a3027 10
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_bool_constant, NULL, NULL, NULL);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->primary_expression.bool_constant = (yyvsp[(1) - (1)].n);
   }
    break;

  case 27:
/* Line 1787 of yacc.c  */
#line 391 "glsl_parser.yy"
d3029 4
a3032 2
      (yyval.expression) = (yyvsp[(2) - (3)].expression);
   }
d3036 3
a3038 2
/* Line 1787 of yacc.c  */
#line 399 "glsl_parser.yy"
d3040 2
a3041 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_array_index, (yyvsp[(1) - (4)].expression), (yyvsp[(3) - (4)].expression), NULL);
      (yyval.expression)->set_location(yylloc);
   }
d3045 3
a3047 2
/* Line 1787 of yacc.c  */
#line 405 "glsl_parser.yy"
d3049 5
a3053 2
      (yyval.expression) = (yyvsp[(1) - (1)].expression);
   }
d3057 3
a3059 2
/* Line 1787 of yacc.c  */
#line 409 "glsl_parser.yy"
d3061 4
a3064 5
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_field_selection, (yyvsp[(1) - (3)].expression), NULL, NULL);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->primary_expression.identifier = (yyvsp[(3) - (3)].identifier);
   }
d3068 3
a3070 2
/* Line 1787 of yacc.c  */
#line 416 "glsl_parser.yy"
d3072 4
a3075 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_post_inc, (yyvsp[(1) - (2)].expression), NULL, NULL);
      (yyval.expression)->set_location(yylloc);
   }
d3078 4
a3081 3
  case 33:
/* Line 1787 of yacc.c  */
#line 422 "glsl_parser.yy"
d3083 4
a3086 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_post_dec, (yyvsp[(1) - (2)].expression), NULL, NULL);
      (yyval.expression)->set_location(yylloc);
   }
d3089 4
a3092 3
  case 37:
/* Line 1787 of yacc.c  */
#line 440 "glsl_parser.yy"
d3094 4
a3097 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_field_selection, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression), NULL);
      (yyval.expression)->set_location(yylloc);
   }
d3101 14
a3114 2
/* Line 1787 of yacc.c  */
#line 459 "glsl_parser.yy"
d3116 4
a3119 14
      (yyval.expression) = (yyvsp[(1) - (2)].expression);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->expressions.push_tail(& (yyvsp[(2) - (2)].expression)->link);
   }
    break;

  case 43:
/* Line 1787 of yacc.c  */
#line 465 "glsl_parser.yy"
    {
      (yyval.expression) = (yyvsp[(1) - (3)].expression);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->expressions.push_tail(& (yyvsp[(3) - (3)].expression)->link);
   }
d3123 3
a3125 2
/* Line 1787 of yacc.c  */
#line 481 "glsl_parser.yy"
d3127 5
a3131 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_function_expression((yyvsp[(1) - (1)].type_specifier));
      (yyval.expression)->set_location(yylloc);
      }
d3135 3
a3137 2
/* Line 1787 of yacc.c  */
#line 487 "glsl_parser.yy"
d3139 5
a3143 5
      void *ctx = state;
      ast_expression *callee = new(ctx) ast_expression((yyvsp[(1) - (1)].identifier));
      (yyval.expression) = new(ctx) ast_function_expression(callee);
      (yyval.expression)->set_location(yylloc);
      }
d3146 9
a3154 9
  case 47:
/* Line 1787 of yacc.c  */
#line 494 "glsl_parser.yy"
    {
      void *ctx = state;
      ast_expression *callee = new(ctx) ast_expression((yyvsp[(1) - (1)].identifier));
      (yyval.expression) = new(ctx) ast_function_expression(callee);
      (yyval.expression)->set_location(yylloc);
      }
d3158 3
a3160 2
/* Line 1787 of yacc.c  */
#line 514 "glsl_parser.yy"
d3162 4
a3165 4
      (yyval.expression) = (yyvsp[(1) - (2)].expression);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->expressions.push_tail(& (yyvsp[(2) - (2)].expression)->link);
   }
d3169 15
a3183 2
/* Line 1787 of yacc.c  */
#line 520 "glsl_parser.yy"
d3185 4
a3188 15
      (yyval.expression) = (yyvsp[(1) - (3)].expression);
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->expressions.push_tail(& (yyvsp[(3) - (3)].expression)->link);
   }
    break;

  case 54:
/* Line 1787 of yacc.c  */
#line 532 "glsl_parser.yy"
    {
      void *ctx = state;
      ast_expression *callee = new(ctx) ast_expression((yyvsp[(1) - (2)].identifier));
      (yyval.expression) = new(ctx) ast_function_expression(callee);
      (yyval.expression)->set_location(yylloc);
   }
d3192 3
a3194 2
/* Line 1787 of yacc.c  */
#line 544 "glsl_parser.yy"
d3196 4
a3199 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_pre_inc, (yyvsp[(2) - (2)].expression), NULL, NULL);
      (yyval.expression)->set_location(yylloc);
   }
d3203 3
a3205 2
/* Line 1787 of yacc.c  */
#line 550 "glsl_parser.yy"
d3207 4
a3210 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_pre_dec, (yyvsp[(2) - (2)].expression), NULL, NULL);
      (yyval.expression)->set_location(yylloc);
   }
d3214 4
a3217 7
/* Line 1787 of yacc.c  */
#line 556 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression((yyvsp[(1) - (2)].n), (yyvsp[(2) - (2)].expression), NULL, NULL);
      (yyval.expression)->set_location(yylloc);
   }
d3221 4
a3224 3
/* Line 1787 of yacc.c  */
#line 565 "glsl_parser.yy"
    { (yyval.n) = ast_plus; }
d3228 4
a3231 3
/* Line 1787 of yacc.c  */
#line 566 "glsl_parser.yy"
    { (yyval.n) = ast_neg; }
d3235 4
a3238 3
/* Line 1787 of yacc.c  */
#line 567 "glsl_parser.yy"
    { (yyval.n) = ast_logic_not; }
d3241 9
a3249 4
  case 62:
/* Line 1787 of yacc.c  */
#line 568 "glsl_parser.yy"
    { (yyval.n) = ast_bit_not; }
d3253 3
a3255 2
/* Line 1787 of yacc.c  */
#line 574 "glsl_parser.yy"
d3257 4
a3260 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_mul, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3264 3
a3266 2
/* Line 1787 of yacc.c  */
#line 580 "glsl_parser.yy"
d3268 15
a3282 14
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_div, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
    break;

  case 66:
/* Line 1787 of yacc.c  */
#line 586 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_mod, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3286 14
a3299 2
/* Line 1787 of yacc.c  */
#line 596 "glsl_parser.yy"
d3301 4
a3304 14
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_add, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
    break;

  case 69:
/* Line 1787 of yacc.c  */
#line 602 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_sub, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3308 14
a3321 2
/* Line 1787 of yacc.c  */
#line 612 "glsl_parser.yy"
d3323 4
a3326 14
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_lshift, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
    break;

  case 72:
/* Line 1787 of yacc.c  */
#line 618 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_rshift, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3330 3
a3332 2
/* Line 1787 of yacc.c  */
#line 628 "glsl_parser.yy"
d3334 4
a3337 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_less, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3341 3
a3343 2
/* Line 1787 of yacc.c  */
#line 634 "glsl_parser.yy"
d3345 4
a3348 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_greater, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3352 14
a3365 2
/* Line 1787 of yacc.c  */
#line 640 "glsl_parser.yy"
d3367 4
a3370 14
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_lequal, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
    break;

  case 77:
/* Line 1787 of yacc.c  */
#line 646 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_gequal, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3374 3
a3376 2
/* Line 1787 of yacc.c  */
#line 656 "glsl_parser.yy"
d3378 4
a3381 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_equal, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3384 4
a3387 3
  case 80:
/* Line 1787 of yacc.c  */
#line 662 "glsl_parser.yy"
d3389 4
a3392 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_nequal, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3395 4
a3398 3
  case 82:
/* Line 1787 of yacc.c  */
#line 672 "glsl_parser.yy"
d3400 4
a3403 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_and, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3406 4
a3409 3
  case 84:
/* Line 1787 of yacc.c  */
#line 682 "glsl_parser.yy"
d3411 4
a3414 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_xor, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3417 4
a3420 3
  case 86:
/* Line 1787 of yacc.c  */
#line 692 "glsl_parser.yy"
d3422 4
a3425 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_or, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3428 4
a3431 3
  case 88:
/* Line 1787 of yacc.c  */
#line 702 "glsl_parser.yy"
d3433 4
a3436 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_and, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3439 4
a3442 3
  case 90:
/* Line 1787 of yacc.c  */
#line 712 "glsl_parser.yy"
d3444 4
a3447 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_xor, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3450 4
a3453 3
  case 92:
/* Line 1787 of yacc.c  */
#line 722 "glsl_parser.yy"
d3455 4
a3458 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_or, (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3461 4
a3464 3
  case 94:
/* Line 1787 of yacc.c  */
#line 732 "glsl_parser.yy"
d3466 4
a3469 4
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression(ast_conditional, (yyvsp[(1) - (5)].expression), (yyvsp[(3) - (5)].expression), (yyvsp[(5) - (5)].expression));
      (yyval.expression)->set_location(yylloc);
   }
d3473 4
a3476 7
/* Line 1787 of yacc.c  */
#line 742 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_expression((yyvsp[(2) - (3)].n), (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression), NULL);
      (yyval.expression)->set_location(yylloc);
   }
d3480 4
a3483 3
/* Line 1787 of yacc.c  */
#line 750 "glsl_parser.yy"
    { (yyval.n) = ast_assign; }
d3487 4
a3490 3
/* Line 1787 of yacc.c  */
#line 751 "glsl_parser.yy"
    { (yyval.n) = ast_mul_assign; }
d3494 4
a3497 3
/* Line 1787 of yacc.c  */
#line 752 "glsl_parser.yy"
    { (yyval.n) = ast_div_assign; }
d3501 4
a3504 3
/* Line 1787 of yacc.c  */
#line 753 "glsl_parser.yy"
    { (yyval.n) = ast_mod_assign; }
d3508 4
a3511 3
/* Line 1787 of yacc.c  */
#line 754 "glsl_parser.yy"
    { (yyval.n) = ast_add_assign; }
d3515 4
a3518 3
/* Line 1787 of yacc.c  */
#line 755 "glsl_parser.yy"
    { (yyval.n) = ast_sub_assign; }
d3522 4
a3525 3
/* Line 1787 of yacc.c  */
#line 756 "glsl_parser.yy"
    { (yyval.n) = ast_ls_assign; }
d3529 4
a3532 3
/* Line 1787 of yacc.c  */
#line 757 "glsl_parser.yy"
    { (yyval.n) = ast_rs_assign; }
d3536 4
a3539 3
/* Line 1787 of yacc.c  */
#line 758 "glsl_parser.yy"
    { (yyval.n) = ast_and_assign; }
d3543 4
a3546 3
/* Line 1787 of yacc.c  */
#line 759 "glsl_parser.yy"
    { (yyval.n) = ast_xor_assign; }
a3549 4
/* Line 1787 of yacc.c  */
#line 760 "glsl_parser.yy"
    { (yyval.n) = ast_or_assign; }
    break;
d3551 2
a3552 3
  case 108:
/* Line 1787 of yacc.c  */
#line 765 "glsl_parser.yy"
d3554 2
a3555 2
      (yyval.expression) = (yyvsp[(1) - (1)].expression);
   }
d3558 1
a3558 12
  case 109:
/* Line 1787 of yacc.c  */
#line 769 "glsl_parser.yy"
    {
      void *ctx = state;
      if ((yyvsp[(1) - (3)].expression)->oper != ast_sequence) {
         (yyval.expression) = new(ctx) ast_expression(ast_sequence, NULL, NULL, NULL);
         (yyval.expression)->set_location(yylloc);
         (yyval.expression)->expressions.push_tail(& (yyvsp[(1) - (3)].expression)->link);
      } else {
         (yyval.expression) = (yyvsp[(1) - (3)].expression);
      }
d3560 24
a3583 2
      (yyval.expression)->expressions.push_tail(& (yyvsp[(3) - (3)].expression)->link);
   }
d3587 3
a3589 2
/* Line 1787 of yacc.c  */
#line 789 "glsl_parser.yy"
d3591 2
a3592 3
      state->symbols->pop_scope();
      (yyval.node) = (yyvsp[(1) - (2)].function);
   }
d3596 3
a3598 2
/* Line 1787 of yacc.c  */
#line 794 "glsl_parser.yy"
d3600 4
a3603 2
      (yyval.node) = (yyvsp[(1) - (2)].declarator_list);
   }
d3606 4
a3609 3
  case 113:
/* Line 1787 of yacc.c  */
#line 798 "glsl_parser.yy"
d3611 3
a3613 3
      (yyvsp[(3) - (4)].type_specifier)->default_precision = (yyvsp[(2) - (4)].n);
      (yyval.node) = (yyvsp[(3) - (4)].type_specifier);
   }
d3616 4
a3619 3
  case 114:
/* Line 1787 of yacc.c  */
#line 803 "glsl_parser.yy"
d3621 3
a3623 2
      (yyval.node) = (yyvsp[(1) - (1)].node);
   }
d3627 3
a3629 2
/* Line 1787 of yacc.c  */
#line 819 "glsl_parser.yy"
d3631 9
a3639 3
      (yyval.function) = (yyvsp[(1) - (2)].function);
      (yyval.function)->parameters.push_tail(& (yyvsp[(2) - (2)].parameter_declarator)->link);
   }
d3643 3
a3645 2
/* Line 1787 of yacc.c  */
#line 824 "glsl_parser.yy"
d3647 8
a3654 3
      (yyval.function) = (yyvsp[(1) - (3)].function);
      (yyval.function)->parameters.push_tail(& (yyvsp[(3) - (3)].parameter_declarator)->link);
   }
d3658 3
a3660 2
/* Line 1787 of yacc.c  */
#line 832 "glsl_parser.yy"
d3662 10
a3671 9
      void *ctx = state;
      (yyval.function) = new(ctx) ast_function();
      (yyval.function)->set_location(yylloc);
      (yyval.function)->return_type = (yyvsp[(1) - (3)].fully_specified_type);
      (yyval.function)->identifier = (yyvsp[(2) - (3)].identifier);

      state->symbols->add_function(new(state) ir_function((yyvsp[(2) - (3)].identifier)));
      state->symbols->push_scope();
   }
d3675 3
a3677 2
/* Line 1787 of yacc.c  */
#line 846 "glsl_parser.yy"
d3679 5
a3683 8
      void *ctx = state;
      (yyval.parameter_declarator) = new(ctx) ast_parameter_declarator();
      (yyval.parameter_declarator)->set_location(yylloc);
      (yyval.parameter_declarator)->type = new(ctx) ast_fully_specified_type();
      (yyval.parameter_declarator)->type->set_location(yylloc);
      (yyval.parameter_declarator)->type->specifier = (yyvsp[(1) - (2)].type_specifier);
      (yyval.parameter_declarator)->identifier = (yyvsp[(2) - (2)].identifier);
   }
d3687 3
a3689 2
/* Line 1787 of yacc.c  */
#line 856 "glsl_parser.yy"
d3691 3
a3693 10
      void *ctx = state;
      (yyval.parameter_declarator) = new(ctx) ast_parameter_declarator();
      (yyval.parameter_declarator)->set_location(yylloc);
      (yyval.parameter_declarator)->type = new(ctx) ast_fully_specified_type();
      (yyval.parameter_declarator)->type->set_location(yylloc);
      (yyval.parameter_declarator)->type->specifier = (yyvsp[(1) - (5)].type_specifier);
      (yyval.parameter_declarator)->identifier = (yyvsp[(2) - (5)].identifier);
      (yyval.parameter_declarator)->is_array = true;
      (yyval.parameter_declarator)->array_size = (yyvsp[(4) - (5)].expression);
   }
d3697 3
a3699 2
/* Line 1787 of yacc.c  */
#line 871 "glsl_parser.yy"
d3701 9
a3709 3
      (yyval.parameter_declarator) = (yyvsp[(2) - (2)].parameter_declarator);
      (yyval.parameter_declarator)->type->qualifier = (yyvsp[(1) - (2)].type_qualifier);
   }
d3713 3
a3715 2
/* Line 1787 of yacc.c  */
#line 876 "glsl_parser.yy"
d3717 7
a3723 7
      void *ctx = state;
      (yyval.parameter_declarator) = new(ctx) ast_parameter_declarator();
      (yyval.parameter_declarator)->set_location(yylloc);
      (yyval.parameter_declarator)->type = new(ctx) ast_fully_specified_type();
      (yyval.parameter_declarator)->type->qualifier = (yyvsp[(1) - (2)].type_qualifier);
      (yyval.parameter_declarator)->type->specifier = (yyvsp[(2) - (2)].type_specifier);
   }
d3727 3
a3729 2
/* Line 1787 of yacc.c  */
#line 888 "glsl_parser.yy"
d3731 2
a3732 2
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
   }
d3736 3
a3738 2
/* Line 1787 of yacc.c  */
#line 892 "glsl_parser.yy"
d3740 3
a3742 6
      if ((yyvsp[(2) - (2)].type_qualifier).flags.q.constant)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "duplicate const qualifier.\n");

      (yyval.type_qualifier) = (yyvsp[(2) - (2)].type_qualifier);
      (yyval.type_qualifier).flags.q.constant = 1;
   }
d3746 3
a3748 2
/* Line 1787 of yacc.c  */
#line 900 "glsl_parser.yy"
d3750 3
a3752 10
      if (((yyvsp[(1) - (2)].type_qualifier).flags.q.in || (yyvsp[(1) - (2)].type_qualifier).flags.q.out) && ((yyvsp[(2) - (2)].type_qualifier).flags.q.in || (yyvsp[(2) - (2)].type_qualifier).flags.q.out))
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "duplicate in/out/inout qualifier\n");

      if (!state->ARB_shading_language_420pack_enable && (yyvsp[(2) - (2)].type_qualifier).flags.q.constant)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "const must be specified before "
                          "in/out/inout.\n");

      (yyval.type_qualifier) = (yyvsp[(1) - (2)].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[(1) - (2)]), state, (yyvsp[(2) - (2)].type_qualifier));
   }
d3756 3
a3758 2
/* Line 1787 of yacc.c  */
#line 912 "glsl_parser.yy"
d3760 5
a3764 2
      if ((yyvsp[(2) - (2)].type_qualifier).precision != ast_precision_none)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Duplicate precision qualifier.\n");
d3766 8
a3773 2
      if (!state->ARB_shading_language_420pack_enable && (yyvsp[(2) - (2)].type_qualifier).flags.i != 0)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Precision qualifiers must come last.\n");
d3775 4
a3778 3
      (yyval.type_qualifier) = (yyvsp[(2) - (2)].type_qualifier);
      (yyval.type_qualifier).precision = (yyvsp[(1) - (2)].n);
   }
d3781 4
a3784 3
  case 129:
/* Line 1787 of yacc.c  */
#line 925 "glsl_parser.yy"
d3786 8
a3793 3
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.in = 1;
   }
d3796 4
a3799 3
  case 130:
/* Line 1787 of yacc.c  */
#line 930 "glsl_parser.yy"
d3801 3
a3803 4
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.out = 1;
   }
    break;
d3805 4
a3808 8
  case 131:
/* Line 1787 of yacc.c  */
#line 935 "glsl_parser.yy"
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.in = 1;
      (yyval.type_qualifier).flags.q.out = 1;
   }
d3812 3
a3814 2
/* Line 1787 of yacc.c  */
#line 949 "glsl_parser.yy"
d3816 8
a3823 8
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (3)].identifier), false, NULL, NULL);
      decl->set_location(yylloc);

      (yyval.declarator_list) = (yyvsp[(1) - (3)].declarator_list);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (3)].identifier), ir_var_auto));
   }
d3827 3
a3829 2
/* Line 1787 of yacc.c  */
#line 959 "glsl_parser.yy"
d3831 8
a3838 8
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (5)].identifier), true, NULL, NULL);
      decl->set_location(yylloc);

      (yyval.declarator_list) = (yyvsp[(1) - (5)].declarator_list);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (5)].identifier), ir_var_auto));
   }
d3842 3
a3844 2
/* Line 1787 of yacc.c  */
#line 969 "glsl_parser.yy"
d3846 8
a3853 8
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (6)].identifier), true, (yyvsp[(5) - (6)].expression), NULL);
      decl->set_location(yylloc);

      (yyval.declarator_list) = (yyvsp[(1) - (6)].declarator_list);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (6)].identifier), ir_var_auto));
   }
d3857 3
a3859 2
/* Line 1787 of yacc.c  */
#line 979 "glsl_parser.yy"
d3861 9
a3869 13
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (7)].identifier), true, NULL, (yyvsp[(7) - (7)].expression));
      decl->set_location(yylloc);

      (yyval.declarator_list) = (yyvsp[(1) - (7)].declarator_list);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (7)].identifier), ir_var_auto));
      if ((yyvsp[(7) - (7)].expression)->oper == ast_aggregate) {
         ast_aggregate_initializer *ai = (ast_aggregate_initializer *)(yyvsp[(7) - (7)].expression);
         ast_type_specifier *type = new(ctx) ast_type_specifier((yyvsp[(1) - (7)].declarator_list)->type->specifier, true, NULL);
         _mesa_ast_set_aggregate_type(type, ai, state);
      }
   }
d3873 3
a3875 2
/* Line 1787 of yacc.c  */
#line 994 "glsl_parser.yy"
d3877 7
a3883 13
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (8)].identifier), true, (yyvsp[(5) - (8)].expression), (yyvsp[(8) - (8)].expression));
      decl->set_location(yylloc);

      (yyval.declarator_list) = (yyvsp[(1) - (8)].declarator_list);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (8)].identifier), ir_var_auto));
      if ((yyvsp[(8) - (8)].expression)->oper == ast_aggregate) {
         ast_aggregate_initializer *ai = (ast_aggregate_initializer *)(yyvsp[(8) - (8)].expression);
         ast_type_specifier *type = new(ctx) ast_type_specifier((yyvsp[(1) - (8)].declarator_list)->type->specifier, true, (yyvsp[(5) - (8)].expression));
         _mesa_ast_set_aggregate_type(type, ai, state);
      }
   }
d3887 3
a3889 2
/* Line 1787 of yacc.c  */
#line 1009 "glsl_parser.yy"
d3891 7
a3897 12
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(3) - (5)].identifier), false, NULL, (yyvsp[(5) - (5)].expression));
      decl->set_location(yylloc);

      (yyval.declarator_list) = (yyvsp[(1) - (5)].declarator_list);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[(3) - (5)].identifier), ir_var_auto));
      if ((yyvsp[(5) - (5)].expression)->oper == ast_aggregate) {
         ast_aggregate_initializer *ai = (ast_aggregate_initializer *)(yyvsp[(5) - (5)].expression);
         _mesa_ast_set_aggregate_type((yyvsp[(1) - (5)].declarator_list)->type->specifier, ai, state);
      }
   }
d3901 3
a3903 2
/* Line 1787 of yacc.c  */
#line 1027 "glsl_parser.yy"
d3905 7
a3911 5
      void *ctx = state;
      /* Empty declaration list is valid. */
      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (1)].fully_specified_type));
      (yyval.declarator_list)->set_location(yylloc);
   }
d3915 3
a3917 2
/* Line 1787 of yacc.c  */
#line 1034 "glsl_parser.yy"
d3919 2
a3920 2
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (2)].identifier), false, NULL, NULL);
d3922 4
a3925 4
      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (2)].fully_specified_type));
      (yyval.declarator_list)->set_location(yylloc);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
   }
d3929 3
a3931 2
/* Line 1787 of yacc.c  */
#line 1043 "glsl_parser.yy"
d3933 2
a3934 2
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (4)].identifier), true, NULL, NULL);
d3936 4
a3939 4
      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (4)].fully_specified_type));
      (yyval.declarator_list)->set_location(yylloc);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
   }
d3943 3
a3945 2
/* Line 1787 of yacc.c  */
#line 1052 "glsl_parser.yy"
d3947 2
a3948 2
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (5)].identifier), true, (yyvsp[(4) - (5)].expression), NULL);
d3950 4
a3953 4
      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (5)].fully_specified_type));
      (yyval.declarator_list)->set_location(yylloc);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
   }
d3957 3
a3959 2
/* Line 1787 of yacc.c  */
#line 1061 "glsl_parser.yy"
d3961 2
a3962 2
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (6)].identifier), true, NULL, (yyvsp[(6) - (6)].expression));
d3964 6
a3969 9
      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (6)].fully_specified_type));
      (yyval.declarator_list)->set_location(yylloc);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      if ((yyvsp[(6) - (6)].expression)->oper == ast_aggregate) {
         ast_aggregate_initializer *ai = (ast_aggregate_initializer *)(yyvsp[(6) - (6)].expression);
         ast_type_specifier *type = new(ctx) ast_type_specifier((yyvsp[(1) - (6)].fully_specified_type)->specifier, true, NULL);
         _mesa_ast_set_aggregate_type(type, ai, state);
      }
   }
d3973 3
a3975 2
/* Line 1787 of yacc.c  */
#line 1075 "glsl_parser.yy"
d3977 5
a3981 12
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (7)].identifier), true, (yyvsp[(4) - (7)].expression), (yyvsp[(7) - (7)].expression));

      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (7)].fully_specified_type));
      (yyval.declarator_list)->set_location(yylloc);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      if ((yyvsp[(7) - (7)].expression)->oper == ast_aggregate) {
         ast_aggregate_initializer *ai = (ast_aggregate_initializer *)(yyvsp[(7) - (7)].expression);
         ast_type_specifier *type = new(ctx) ast_type_specifier((yyvsp[(1) - (7)].fully_specified_type)->specifier, true, (yyvsp[(4) - (7)].expression));
         _mesa_ast_set_aggregate_type(type, ai, state);
      }
   }
d3985 3
a3987 2
/* Line 1787 of yacc.c  */
#line 1089 "glsl_parser.yy"
d3989 6
a3994 10
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (4)].identifier), false, NULL, (yyvsp[(4) - (4)].expression));

      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[(1) - (4)].fully_specified_type));
      (yyval.declarator_list)->set_location(yylloc);
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
      if ((yyvsp[(4) - (4)].expression)->oper == ast_aggregate) {
         _mesa_ast_set_aggregate_type((yyvsp[(1) - (4)].fully_specified_type)->specifier, (yyvsp[(4) - (4)].expression), state);
      }
   }
a3997 13
/* Line 1787 of yacc.c  */
#line 1101 "glsl_parser.yy"
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (2)].identifier), false, NULL, NULL);

      (yyval.declarator_list) = new(ctx) ast_declarator_list(NULL);
      (yyval.declarator_list)->set_location(yylloc);
      (yyval.declarator_list)->invariant = true;

      (yyval.declarator_list)->declarations.push_tail(&decl->link);
   }
    break;
d3999 2
a4000 3
  case 148:
/* Line 1787 of yacc.c  */
#line 1115 "glsl_parser.yy"
d4002 2
a4003 5
      void *ctx = state;
      (yyval.fully_specified_type) = new(ctx) ast_fully_specified_type();
      (yyval.fully_specified_type)->set_location(yylloc);
      (yyval.fully_specified_type)->specifier = (yyvsp[(1) - (1)].type_specifier);
   }
d4007 3
a4009 2
/* Line 1787 of yacc.c  */
#line 1122 "glsl_parser.yy"
d4011 14
a4024 6
      void *ctx = state;
      (yyval.fully_specified_type) = new(ctx) ast_fully_specified_type();
      (yyval.fully_specified_type)->set_location(yylloc);
      (yyval.fully_specified_type)->qualifier = (yyvsp[(1) - (2)].type_qualifier);
      (yyval.fully_specified_type)->specifier = (yyvsp[(2) - (2)].type_specifier);
   }
d4028 3
a4030 2
/* Line 1787 of yacc.c  */
#line 1133 "glsl_parser.yy"
d4032 70
a4101 2
      (yyval.type_qualifier) = (yyvsp[(3) - (4)].type_qualifier);
   }
d4105 3
a4107 2
/* Line 1787 of yacc.c  */
#line 1141 "glsl_parser.yy"
d4109 3
a4111 5
      (yyval.type_qualifier) = (yyvsp[(1) - (3)].type_qualifier);
      if (!(yyval.type_qualifier).merge_qualifier(& (yylsp[(3) - (3)]), state, (yyvsp[(3) - (3)].type_qualifier))) {
         YYERROR;
      }
   }
d4115 7
a4121 3
/* Line 1787 of yacc.c  */
#line 1150 "glsl_parser.yy"
    { (yyval.n) = (yyvsp[(1) - (1)].n); }
d4125 7
a4131 3
/* Line 1787 of yacc.c  */
#line 1151 "glsl_parser.yy"
    { (yyval.n) = (yyvsp[(1) - (1)].n); }
d4135 3
a4137 2
/* Line 1787 of yacc.c  */
#line 1156 "glsl_parser.yy"
d4139 4
a4142 1
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
d4144 1
a4144 14
      /* Layout qualifiers for ARB_fragment_coord_conventions. */
      if (!(yyval.type_qualifier).flags.i && state->ARB_fragment_coord_conventions_enable) {
         if (strcmp((yyvsp[(1) - (1)].identifier), "origin_upper_left") == 0) {
            (yyval.type_qualifier).flags.q.origin_upper_left = 1;
         } else if (strcmp((yyvsp[(1) - (1)].identifier), "pixel_center_integer") == 0) {
            (yyval.type_qualifier).flags.q.pixel_center_integer = 1;
         }

         if ((yyval.type_qualifier).flags.i && state->ARB_fragment_coord_conventions_warn) {
            _mesa_glsl_warning(& (yylsp[(1) - (1)]), state,
                               "GL_ARB_fragment_coord_conventions layout "
                               "identifier `%s' used\n", (yyvsp[(1) - (1)].identifier));
         }
      }
d4146 7
a4152 25
      /* Layout qualifiers for AMD/ARB_conservative_depth. */
      if (!(yyval.type_qualifier).flags.i &&
          (state->AMD_conservative_depth_enable ||
           state->ARB_conservative_depth_enable)) {
         if (strcmp((yyvsp[(1) - (1)].identifier), "depth_any") == 0) {
            (yyval.type_qualifier).flags.q.depth_any = 1;
         } else if (strcmp((yyvsp[(1) - (1)].identifier), "depth_greater") == 0) {
            (yyval.type_qualifier).flags.q.depth_greater = 1;
         } else if (strcmp((yyvsp[(1) - (1)].identifier), "depth_less") == 0) {
            (yyval.type_qualifier).flags.q.depth_less = 1;
         } else if (strcmp((yyvsp[(1) - (1)].identifier), "depth_unchanged") == 0) {
            (yyval.type_qualifier).flags.q.depth_unchanged = 1;
         }

         if ((yyval.type_qualifier).flags.i && state->AMD_conservative_depth_warn) {
            _mesa_glsl_warning(& (yylsp[(1) - (1)]), state,
                               "GL_AMD_conservative_depth "
                               "layout qualifier `%s' is used\n", (yyvsp[(1) - (1)].identifier));
         }
         if ((yyval.type_qualifier).flags.i && state->ARB_conservative_depth_warn) {
            _mesa_glsl_warning(& (yylsp[(1) - (1)]), state,
                               "GL_ARB_conservative_depth "
                               "layout qualifier `%s' is used\n", (yyvsp[(1) - (1)].identifier));
         }
      }
d4154 1
a4154 24
      /* See also interface_block_layout_qualifier. */
      if (!(yyval.type_qualifier).flags.i && state->ARB_uniform_buffer_object_enable) {
         if (strcmp((yyvsp[(1) - (1)].identifier), "std140") == 0) {
            (yyval.type_qualifier).flags.q.std140 = 1;
         } else if (strcmp((yyvsp[(1) - (1)].identifier), "shared") == 0) {
            (yyval.type_qualifier).flags.q.shared = 1;
         } else if (strcmp((yyvsp[(1) - (1)].identifier), "column_major") == 0) {
            (yyval.type_qualifier).flags.q.column_major = 1;
         /* "row_major" is a reserved word in GLSL 1.30+. Its token is parsed
          * below in the interface_block_layout_qualifier rule.
          *
          * It is not a reserved word in GLSL ES 3.00, so it's handled here as
          * an identifier.
          */
         } else if (strcmp((yyvsp[(1) - (1)].identifier), "row_major") == 0) {
            (yyval.type_qualifier).flags.q.row_major = 1;
         }

         if ((yyval.type_qualifier).flags.i && state->ARB_uniform_buffer_object_warn) {
            _mesa_glsl_warning(& (yylsp[(1) - (1)]), state,
                               "#version 140 / GL_ARB_uniform_buffer_object "
                               "layout qualifier `%s' is used\n", (yyvsp[(1) - (1)].identifier));
         }
      }
d4156 6
a4161 6
      if (!(yyval.type_qualifier).flags.i) {
         _mesa_glsl_error(& (yylsp[(1) - (1)]), state, "unrecognized layout identifier "
                          "`%s'\n", (yyvsp[(1) - (1)].identifier));
         YYERROR;
      }
   }
d4164 1
a4164 31
  case 156:
/* Line 1787 of yacc.c  */
#line 1232 "glsl_parser.yy"
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));

      if (state->ARB_explicit_attrib_location_enable) {
         if (strcmp("location", (yyvsp[(1) - (3)].identifier)) == 0) {
            (yyval.type_qualifier).flags.q.explicit_location = 1;

            if ((yyvsp[(3) - (3)].n) >= 0) {
               (yyval.type_qualifier).location = (yyvsp[(3) - (3)].n);
            } else {
               _mesa_glsl_error(& (yylsp[(3) - (3)]), state,
                                "invalid location %d specified\n", (yyvsp[(3) - (3)].n));
               YYERROR;
            }
         }

         if (strcmp("index", (yyvsp[(1) - (3)].identifier)) == 0) {
            (yyval.type_qualifier).flags.q.explicit_index = 1;

            if ((yyvsp[(3) - (3)].n) >= 0) {
               (yyval.type_qualifier).index = (yyvsp[(3) - (3)].n);
            } else {
               _mesa_glsl_error(& (yylsp[(3) - (3)]), state,
                                "invalid index %d specified\n", (yyvsp[(3) - (3)].n));
               YYERROR;
            }
         }
      }
d4166 6
a4171 19
      if (state->ARB_shading_language_420pack_enable &&
          strcmp("binding", (yyvsp[(1) - (3)].identifier)) == 0) {
         (yyval.type_qualifier).flags.q.explicit_binding = 1;
         (yyval.type_qualifier).binding = (yyvsp[(3) - (3)].n);
      }

      /* If the identifier didn't match any known layout identifiers,
       * emit an error.
       */
      if (!(yyval.type_qualifier).flags.i) {
         _mesa_glsl_error(& (yylsp[(1) - (3)]), state, "unrecognized layout identifier "
                          "`%s'\n", (yyvsp[(1) - (3)].identifier));
         YYERROR;
      } else if (state->ARB_explicit_attrib_location_warn) {
         _mesa_glsl_warning(& (yylsp[(1) - (3)]), state,
                            "GL_ARB_explicit_attrib_location layout "
                            "identifier `%s' used\n", (yyvsp[(1) - (3)].identifier));
      }
   }
d4174 1
a4174 17
  case 157:
/* Line 1787 of yacc.c  */
#line 1281 "glsl_parser.yy"
    {
      (yyval.type_qualifier) = (yyvsp[(1) - (1)].type_qualifier);
      /* Layout qualifiers for ARB_uniform_buffer_object. */
      if ((yyval.type_qualifier).flags.q.uniform && !state->ARB_uniform_buffer_object_enable) {
         _mesa_glsl_error(& (yylsp[(1) - (1)]), state,
                          "#version 140 / GL_ARB_uniform_buffer_object "
                          "layout qualifier `%s' is used\n", (yyvsp[(1) - (1)].type_qualifier));
      } else if ((yyval.type_qualifier).flags.q.uniform && state->ARB_uniform_buffer_object_warn) {
         _mesa_glsl_warning(& (yylsp[(1) - (1)]), state,
                            "#version 140 / GL_ARB_uniform_buffer_object "
                            "layout qualifier `%s' is used\n", (yyvsp[(1) - (1)].type_qualifier));
      }
   }
    break;
d4176 2
a4177 3
  case 158:
/* Line 1787 of yacc.c  */
#line 1303 "glsl_parser.yy"
d4179 4
a4182 3
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.row_major = 1;
   }
d4185 4
a4188 3
  case 159:
/* Line 1787 of yacc.c  */
#line 1308 "glsl_parser.yy"
d4190 3
a4192 3
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.packed = 1;
   }
d4195 4
a4198 3
  case 160:
/* Line 1787 of yacc.c  */
#line 1316 "glsl_parser.yy"
d4200 3
a4202 3
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.smooth = 1;
   }
d4205 4
a4208 3
  case 161:
/* Line 1787 of yacc.c  */
#line 1321 "glsl_parser.yy"
d4210 3
a4212 3
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.flat = 1;
   }
d4215 4
a4218 3
  case 162:
/* Line 1787 of yacc.c  */
#line 1326 "glsl_parser.yy"
d4220 3
a4222 3
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.noperspective = 1;
   }
d4225 4
a4228 3
  case 163:
/* Line 1787 of yacc.c  */
#line 1335 "glsl_parser.yy"
d4230 4
a4233 3
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.invariant = 1;
   }
d4237 3
a4239 2
/* Line 1787 of yacc.c  */
#line 1344 "glsl_parser.yy"
d4241 3
a4243 3
      memset(&(yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).precision = (yyvsp[(1) - (1)].n);
   }
d4247 3
a4249 2
/* Line 1787 of yacc.c  */
#line 1362 "glsl_parser.yy"
d4251 3
a4253 11
      if ((yyvsp[(2) - (2)].type_qualifier).flags.q.invariant)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Duplicate \"invariant\" qualifier.\n");

      if ((yyvsp[(2) - (2)].type_qualifier).has_layout()) {
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state,
                          "\"invariant\" cannot be used with layout(...).\n");
      }

      (yyval.type_qualifier) = (yyvsp[(2) - (2)].type_qualifier);
      (yyval.type_qualifier).flags.q.invariant = 1;
   }
d4257 3
a4259 2
/* Line 1787 of yacc.c  */
#line 1375 "glsl_parser.yy"
d4261 3
a4263 26
      /* Section 4.3 of the GLSL 1.40 specification states:
       * "...qualified with one of these interpolation qualifiers"
       *
       * GLSL 1.30 claims to allow "one or more", but insists that:
       * "These interpolation qualifiers may only precede the qualifiers in,
       *  centroid in, out, or centroid out in a declaration."
       *
       * ...which means that e.g. smooth can't precede smooth, so there can be
       * only one after all, and the 1.40 text is a clarification, not a change.
       */
      if ((yyvsp[(2) - (2)].type_qualifier).has_interpolation())
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Duplicate interpolation qualifier.\n");

      if ((yyvsp[(2) - (2)].type_qualifier).has_layout()) {
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Interpolation qualifiers cannot be used "
                          "with layout(...).\n");
      }

      if (!state->ARB_shading_language_420pack_enable && (yyvsp[(2) - (2)].type_qualifier).flags.q.invariant) {
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Interpolation qualifiers must come "
                          "after \"invariant\".\n");
      }

      (yyval.type_qualifier) = (yyvsp[(1) - (2)].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[(1) - (2)]), state, (yyvsp[(2) - (2)].type_qualifier));
   }
d4267 3
a4269 2
/* Line 1787 of yacc.c  */
#line 1403 "glsl_parser.yy"
d4271 3
a4273 21
      /* The GLSL 1.50 grammar indicates that a layout(...) declaration can be
       * used standalone or immediately before a storage qualifier.  It cannot
       * be used with interpolation qualifiers or invariant.  There does not
       * appear to be any text indicating that it must come before the storage
       * qualifier, but always seems to in examples.
       */
      if (!state->ARB_shading_language_420pack_enable && (yyvsp[(2) - (2)].type_qualifier).has_layout())
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Duplicate layout(...) qualifiers.\n");

      if ((yyvsp[(2) - (2)].type_qualifier).flags.q.invariant)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "layout(...) cannot be used with "
                          "the \"invariant\" qualifier\n");

      if ((yyvsp[(2) - (2)].type_qualifier).has_interpolation()) {
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "layout(...) cannot be used with "
                          "interpolation qualifiers.\n");
      }

      (yyval.type_qualifier) = (yyvsp[(1) - (2)].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[(1) - (2)]), state, (yyvsp[(2) - (2)].type_qualifier));
   }
d4277 3
a4279 2
/* Line 1787 of yacc.c  */
#line 1426 "glsl_parser.yy"
d4281 3
a4283 13
      if ((yyvsp[(2) - (2)].type_qualifier).has_auxiliary_storage()) {
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state,
                          "Duplicate auxiliary storage qualifier (centroid).\n");
      }

      if (!state->ARB_shading_language_420pack_enable &&
          ((yyvsp[(2) - (2)].type_qualifier).flags.q.invariant || (yyvsp[(2) - (2)].type_qualifier).has_interpolation() || (yyvsp[(2) - (2)].type_qualifier).has_layout())) {
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Auxiliary storage qualifiers must come "
                          "just before storage qualifiers.\n");
      }
      (yyval.type_qualifier) = (yyvsp[(1) - (2)].type_qualifier);
      (yyval.type_qualifier).flags.i |= (yyvsp[(2) - (2)].type_qualifier).flags.i;
   }
d4287 3
a4289 2
/* Line 1787 of yacc.c  */
#line 1441 "glsl_parser.yy"
d4291 2
a4292 18
      /* Section 4.3 of the GLSL 1.20 specification states:
       * "Variable declarations may have a storage qualifier specified..."
       *  1.30 clarifies this to "may have one storage qualifier".
       */
      if ((yyvsp[(2) - (2)].type_qualifier).has_storage())
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Duplicate storage qualifier.\n");

      if (!state->ARB_shading_language_420pack_enable &&
          ((yyvsp[(2) - (2)].type_qualifier).flags.q.invariant || (yyvsp[(2) - (2)].type_qualifier).has_interpolation() || (yyvsp[(2) - (2)].type_qualifier).has_layout() ||
           (yyvsp[(2) - (2)].type_qualifier).has_auxiliary_storage())) {
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Storage qualifiers must come after "
                          "invariant, interpolation, layout and auxiliary "
                          "storage qualifiers.\n");
      }

      (yyval.type_qualifier) = (yyvsp[(1) - (2)].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[(1) - (2)]), state, (yyvsp[(2) - (2)].type_qualifier));
   }
a4295 5
/* Line 1787 of yacc.c  */
#line 1461 "glsl_parser.yy"
    {
      if ((yyvsp[(2) - (2)].type_qualifier).precision != ast_precision_none)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Duplicate precision qualifier.\n");
d4297 2
a4298 11
      if (!state->ARB_shading_language_420pack_enable && (yyvsp[(2) - (2)].type_qualifier).flags.i != 0)
         _mesa_glsl_error(&(yylsp[(1) - (2)]), state, "Precision qualifiers must come last.\n");

      (yyval.type_qualifier) = (yyvsp[(2) - (2)].type_qualifier);
      (yyval.type_qualifier).precision = (yyvsp[(1) - (2)].n);
   }
    break;

  case 175:
/* Line 1787 of yacc.c  */
#line 1475 "glsl_parser.yy"
d4300 3
a4302 3
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.centroid = 1;
   }
d4306 3
a4308 2
/* Line 1787 of yacc.c  */
#line 1483 "glsl_parser.yy"
d4310 4
a4313 3
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.constant = 1;
   }
d4317 3
a4319 2
/* Line 1787 of yacc.c  */
#line 1488 "glsl_parser.yy"
d4321 4
a4324 3
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.attribute = 1;
   }
d4328 3
a4330 2
/* Line 1787 of yacc.c  */
#line 1493 "glsl_parser.yy"
d4332 4
a4335 3
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.varying = 1;
   }
d4339 3
a4341 2
/* Line 1787 of yacc.c  */
#line 1498 "glsl_parser.yy"
d4343 4
a4346 3
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.in = 1;
   }
d4350 3
a4352 2
/* Line 1787 of yacc.c  */
#line 1503 "glsl_parser.yy"
d4354 4
a4357 3
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.out = 1;
   }
d4361 11
a4371 6
/* Line 1787 of yacc.c  */
#line 1508 "glsl_parser.yy"
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.uniform = 1;
   }
d4375 4
a4378 7
/* Line 1787 of yacc.c  */
#line 1517 "glsl_parser.yy"
    {
      (yyval.type_specifier) = (yyvsp[(1) - (3)].type_specifier);
      (yyval.type_specifier)->is_array = true;
      (yyval.type_specifier)->array_size = NULL;
   }
d4382 4
a4385 7
/* Line 1787 of yacc.c  */
#line 1523 "glsl_parser.yy"
    {
      (yyval.type_specifier) = (yyvsp[(1) - (4)].type_specifier);
      (yyval.type_specifier)->is_array = true;
      (yyval.type_specifier)->array_size = (yyvsp[(3) - (4)].expression);
   }
d4389 4
a4392 7
/* Line 1787 of yacc.c  */
#line 1532 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[(1) - (1)].identifier));
      (yyval.type_specifier)->set_location(yylloc);
   }
d4396 4
a4399 7
/* Line 1787 of yacc.c  */
#line 1538 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[(1) - (1)].struct_specifier));
      (yyval.type_specifier)->set_location(yylloc);
   }
d4403 4
a4406 7
/* Line 1787 of yacc.c  */
#line 1544 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[(1) - (1)].identifier));
      (yyval.type_specifier)->set_location(yylloc);
   }
d4410 4
a4413 3
/* Line 1787 of yacc.c  */
#line 1552 "glsl_parser.yy"
    { (yyval.identifier) = "void"; }
d4417 4
a4420 3
/* Line 1787 of yacc.c  */
#line 1553 "glsl_parser.yy"
    { (yyval.identifier) = "float"; }
d4424 4
a4427 3
/* Line 1787 of yacc.c  */
#line 1554 "glsl_parser.yy"
    { (yyval.identifier) = "int"; }
d4431 4
a4434 3
/* Line 1787 of yacc.c  */
#line 1555 "glsl_parser.yy"
    { (yyval.identifier) = "uint"; }
d4438 4
a4441 3
/* Line 1787 of yacc.c  */
#line 1556 "glsl_parser.yy"
    { (yyval.identifier) = "bool"; }
d4445 4
a4448 3
/* Line 1787 of yacc.c  */
#line 1557 "glsl_parser.yy"
    { (yyval.identifier) = "vec2"; }
d4452 4
a4455 3
/* Line 1787 of yacc.c  */
#line 1558 "glsl_parser.yy"
    { (yyval.identifier) = "vec3"; }
d4459 4
a4462 3
/* Line 1787 of yacc.c  */
#line 1559 "glsl_parser.yy"
    { (yyval.identifier) = "vec4"; }
d4466 4
a4469 3
/* Line 1787 of yacc.c  */
#line 1560 "glsl_parser.yy"
    { (yyval.identifier) = "bvec2"; }
d4473 4
a4476 3
/* Line 1787 of yacc.c  */
#line 1561 "glsl_parser.yy"
    { (yyval.identifier) = "bvec3"; }
d4480 4
a4483 3
/* Line 1787 of yacc.c  */
#line 1562 "glsl_parser.yy"
    { (yyval.identifier) = "bvec4"; }
d4487 4
a4490 3
/* Line 1787 of yacc.c  */
#line 1563 "glsl_parser.yy"
    { (yyval.identifier) = "ivec2"; }
d4494 4
a4497 3
/* Line 1787 of yacc.c  */
#line 1564 "glsl_parser.yy"
    { (yyval.identifier) = "ivec3"; }
d4501 4
a4504 3
/* Line 1787 of yacc.c  */
#line 1565 "glsl_parser.yy"
    { (yyval.identifier) = "ivec4"; }
d4508 4
a4511 3
/* Line 1787 of yacc.c  */
#line 1566 "glsl_parser.yy"
    { (yyval.identifier) = "uvec2"; }
d4515 4
a4518 3
/* Line 1787 of yacc.c  */
#line 1567 "glsl_parser.yy"
    { (yyval.identifier) = "uvec3"; }
d4522 4
a4525 3
/* Line 1787 of yacc.c  */
#line 1568 "glsl_parser.yy"
    { (yyval.identifier) = "uvec4"; }
d4529 4
a4532 3
/* Line 1787 of yacc.c  */
#line 1569 "glsl_parser.yy"
    { (yyval.identifier) = "mat2"; }
d4536 4
a4539 3
/* Line 1787 of yacc.c  */
#line 1570 "glsl_parser.yy"
    { (yyval.identifier) = "mat2x3"; }
d4543 4
a4546 3
/* Line 1787 of yacc.c  */
#line 1571 "glsl_parser.yy"
    { (yyval.identifier) = "mat2x4"; }
d4550 4
a4553 3
/* Line 1787 of yacc.c  */
#line 1572 "glsl_parser.yy"
    { (yyval.identifier) = "mat3x2"; }
d4557 4
a4560 3
/* Line 1787 of yacc.c  */
#line 1573 "glsl_parser.yy"
    { (yyval.identifier) = "mat3"; }
d4564 4
a4567 3
/* Line 1787 of yacc.c  */
#line 1574 "glsl_parser.yy"
    { (yyval.identifier) = "mat3x4"; }
d4571 4
a4574 3
/* Line 1787 of yacc.c  */
#line 1575 "glsl_parser.yy"
    { (yyval.identifier) = "mat4x2"; }
d4578 4
a4581 3
/* Line 1787 of yacc.c  */
#line 1576 "glsl_parser.yy"
    { (yyval.identifier) = "mat4x3"; }
d4585 4
a4588 3
/* Line 1787 of yacc.c  */
#line 1577 "glsl_parser.yy"
    { (yyval.identifier) = "mat4"; }
d4592 4
a4595 3
/* Line 1787 of yacc.c  */
#line 1578 "glsl_parser.yy"
    { (yyval.identifier) = "sampler1D"; }
d4599 4
a4602 3
/* Line 1787 of yacc.c  */
#line 1579 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2D"; }
d4606 4
a4609 3
/* Line 1787 of yacc.c  */
#line 1580 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2DRect"; }
d4613 4
a4616 3
/* Line 1787 of yacc.c  */
#line 1581 "glsl_parser.yy"
    { (yyval.identifier) = "sampler3D"; }
d4620 4
a4623 3
/* Line 1787 of yacc.c  */
#line 1582 "glsl_parser.yy"
    { (yyval.identifier) = "samplerCube"; }
d4627 4
a4630 3
/* Line 1787 of yacc.c  */
#line 1583 "glsl_parser.yy"
    { (yyval.identifier) = "samplerExternalOES"; }
d4634 4
a4637 3
/* Line 1787 of yacc.c  */
#line 1584 "glsl_parser.yy"
    { (yyval.identifier) = "sampler1DShadow"; }
d4641 4
a4644 3
/* Line 1787 of yacc.c  */
#line 1585 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2DShadow"; }
d4648 4
a4651 3
/* Line 1787 of yacc.c  */
#line 1586 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2DRectShadow"; }
d4655 4
a4658 3
/* Line 1787 of yacc.c  */
#line 1587 "glsl_parser.yy"
    { (yyval.identifier) = "samplerCubeShadow"; }
d4662 4
a4665 3
/* Line 1787 of yacc.c  */
#line 1588 "glsl_parser.yy"
    { (yyval.identifier) = "sampler1DArray"; }
d4669 4
a4672 3
/* Line 1787 of yacc.c  */
#line 1589 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2DArray"; }
d4676 4
a4679 3
/* Line 1787 of yacc.c  */
#line 1590 "glsl_parser.yy"
    { (yyval.identifier) = "sampler1DArrayShadow"; }
d4683 4
a4686 3
/* Line 1787 of yacc.c  */
#line 1591 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2DArrayShadow"; }
d4690 4
a4693 3
/* Line 1787 of yacc.c  */
#line 1592 "glsl_parser.yy"
    { (yyval.identifier) = "samplerBuffer"; }
d4697 4
a4700 3
/* Line 1787 of yacc.c  */
#line 1593 "glsl_parser.yy"
    { (yyval.identifier) = "samplerCubeArray"; }
d4704 4
a4707 3
/* Line 1787 of yacc.c  */
#line 1594 "glsl_parser.yy"
    { (yyval.identifier) = "samplerCubeArrayShadow"; }
d4711 4
a4714 3
/* Line 1787 of yacc.c  */
#line 1595 "glsl_parser.yy"
    { (yyval.identifier) = "isampler1D"; }
a4717 4
/* Line 1787 of yacc.c  */
#line 1596 "glsl_parser.yy"
    { (yyval.identifier) = "isampler2D"; }
    break;
d4719 9
a4727 5
  case 233:
/* Line 1787 of yacc.c  */
#line 1597 "glsl_parser.yy"
    { (yyval.identifier) = "isampler2DRect"; }
    break;
d4729 2
a4730 4
  case 234:
/* Line 1787 of yacc.c  */
#line 1598 "glsl_parser.yy"
    { (yyval.identifier) = "isampler3D"; }
d4733 1
a4733 5
  case 235:
/* Line 1787 of yacc.c  */
#line 1599 "glsl_parser.yy"
    { (yyval.identifier) = "isamplerCube"; }
    break;
d4735 9
a4743 5
  case 236:
/* Line 1787 of yacc.c  */
#line 1600 "glsl_parser.yy"
    { (yyval.identifier) = "isampler1DArray"; }
    break;
d4745 2
a4746 4
  case 237:
/* Line 1787 of yacc.c  */
#line 1601 "glsl_parser.yy"
    { (yyval.identifier) = "isampler2DArray"; }
d4749 1
a4749 5
  case 238:
/* Line 1787 of yacc.c  */
#line 1602 "glsl_parser.yy"
    { (yyval.identifier) = "isamplerBuffer"; }
    break;
d4751 9
a4759 5
  case 239:
/* Line 1787 of yacc.c  */
#line 1603 "glsl_parser.yy"
    { (yyval.identifier) = "isamplerCubeArray"; }
    break;
d4761 2
a4762 4
  case 240:
/* Line 1787 of yacc.c  */
#line 1604 "glsl_parser.yy"
    { (yyval.identifier) = "usampler1D"; }
d4765 1
a4765 5
  case 241:
/* Line 1787 of yacc.c  */
#line 1605 "glsl_parser.yy"
    { (yyval.identifier) = "usampler2D"; }
    break;
d4767 8
a4774 4
  case 242:
/* Line 1787 of yacc.c  */
#line 1606 "glsl_parser.yy"
    { (yyval.identifier) = "usampler2DRect"; }
d4777 1
a4777 5
  case 243:
/* Line 1787 of yacc.c  */
#line 1607 "glsl_parser.yy"
    { (yyval.identifier) = "usampler3D"; }
    break;
d4779 7
a4785 4
  case 244:
/* Line 1787 of yacc.c  */
#line 1608 "glsl_parser.yy"
    { (yyval.identifier) = "usamplerCube"; }
d4788 1
a4788 5
  case 245:
/* Line 1787 of yacc.c  */
#line 1609 "glsl_parser.yy"
    { (yyval.identifier) = "usampler1DArray"; }
    break;
d4790 6
a4795 4
  case 246:
/* Line 1787 of yacc.c  */
#line 1610 "glsl_parser.yy"
    { (yyval.identifier) = "usampler2DArray"; }
d4798 1
a4798 5
  case 247:
/* Line 1787 of yacc.c  */
#line 1611 "glsl_parser.yy"
    { (yyval.identifier) = "usamplerBuffer"; }
    break;
d4800 6
a4805 4
  case 248:
/* Line 1787 of yacc.c  */
#line 1612 "glsl_parser.yy"
    { (yyval.identifier) = "usamplerCubeArray"; }
d4808 1
a4808 5
  case 249:
/* Line 1787 of yacc.c  */
#line 1613 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2DMS"; }
    break;
d4810 10
a4819 5
  case 250:
/* Line 1787 of yacc.c  */
#line 1614 "glsl_parser.yy"
    { (yyval.identifier) = "isampler2DMS"; }
    break;
d4821 2
a4822 4
  case 251:
/* Line 1787 of yacc.c  */
#line 1615 "glsl_parser.yy"
    { (yyval.identifier) = "usampler2DMS"; }
d4825 1
a4825 5
  case 252:
/* Line 1787 of yacc.c  */
#line 1616 "glsl_parser.yy"
    { (yyval.identifier) = "sampler2DMSArray"; }
    break;
d4827 6
a4832 4
  case 253:
/* Line 1787 of yacc.c  */
#line 1617 "glsl_parser.yy"
    { (yyval.identifier) = "isampler2DMSArray"; }
d4835 1
a4835 5
  case 254:
/* Line 1787 of yacc.c  */
#line 1618 "glsl_parser.yy"
    { (yyval.identifier) = "usampler2DMSArray"; }
    break;
d4837 2
a4838 3
  case 255:
/* Line 1787 of yacc.c  */
#line 1623 "glsl_parser.yy"
d4840 3
a4842 3
      state->check_precision_qualifiers_allowed(&(yylsp[(1) - (1)]));
      (yyval.n) = ast_precision_high;
   }
d4845 4
a4848 3
  case 256:
/* Line 1787 of yacc.c  */
#line 1628 "glsl_parser.yy"
d4850 5
a4854 3
      state->check_precision_qualifiers_allowed(&(yylsp[(1) - (1)]));
      (yyval.n) = ast_precision_medium;
   }
d4857 1
a4857 8
  case 257:
/* Line 1787 of yacc.c  */
#line 1633 "glsl_parser.yy"
    {
      state->check_precision_qualifiers_allowed(&(yylsp[(1) - (1)]));
      (yyval.n) = ast_precision_low;
   }
    break;
d4859 2
a4860 3
  case 258:
/* Line 1787 of yacc.c  */
#line 1641 "glsl_parser.yy"
d4862 4
a4865 16
      void *ctx = state;
      (yyval.struct_specifier) = new(ctx) ast_struct_specifier((yyvsp[(2) - (5)].identifier), (yyvsp[(4) - (5)].declarator_list));
      (yyval.struct_specifier)->set_location(yylloc);
      state->symbols->add_type((yyvsp[(2) - (5)].identifier), glsl_type::void_type);
      state->symbols->add_type_ast((yyvsp[(2) - (5)].identifier), new(ctx) ast_type_specifier((yyval.struct_specifier)));
   }
    break;

  case 259:
/* Line 1787 of yacc.c  */
#line 1649 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.struct_specifier) = new(ctx) ast_struct_specifier(NULL, (yyvsp[(3) - (4)].declarator_list));
      (yyval.struct_specifier)->set_location(yylloc);
   }
d4868 1
a4868 8
  case 260:
/* Line 1787 of yacc.c  */
#line 1658 "glsl_parser.yy"
    {
      (yyval.declarator_list) = (yyvsp[(1) - (1)].declarator_list);
      (yyvsp[(1) - (1)].declarator_list)->link.self_link();
   }
    break;
d4870 3
a4872 7
  case 261:
/* Line 1787 of yacc.c  */
#line 1663 "glsl_parser.yy"
    {
      (yyval.declarator_list) = (yyvsp[(1) - (2)].declarator_list);
      (yyval.declarator_list)->link.insert_before(& (yyvsp[(2) - (2)].declarator_list)->link);
   }
d4875 1
a4875 11
  case 262:
/* Line 1787 of yacc.c  */
#line 1671 "glsl_parser.yy"
    {
      void *ctx = state;
      ast_fully_specified_type *type = new(ctx) ast_fully_specified_type();
      type->set_location(yylloc);

      type->specifier = (yyvsp[(1) - (3)].type_specifier);
      (yyval.declarator_list) = new(ctx) ast_declarator_list(type);
      (yyval.declarator_list)->set_location(yylloc);
d4877 3
a4879 2
      (yyval.declarator_list)->declarations.push_degenerate_list_at_head(& (yyvsp[(2) - (3)].declaration)->link);
   }
d4882 1
a4882 8
  case 263:
/* Line 1787 of yacc.c  */
#line 1686 "glsl_parser.yy"
    {
      (yyval.declaration) = (yyvsp[(1) - (1)].declaration);
      (yyvsp[(1) - (1)].declaration)->link.self_link();
   }
    break;
d4884 3
a4886 7
  case 264:
/* Line 1787 of yacc.c  */
#line 1691 "glsl_parser.yy"
    {
      (yyval.declaration) = (yyvsp[(1) - (3)].declaration);
      (yyval.declaration)->link.insert_before(& (yyvsp[(3) - (3)].declaration)->link);
   }
d4889 1
a4889 9
  case 265:
/* Line 1787 of yacc.c  */
#line 1699 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.declaration) = new(ctx) ast_declaration((yyvsp[(1) - (1)].identifier), false, NULL, NULL);
      (yyval.declaration)->set_location(yylloc);
   }
    break;
d4891 2
a4892 3
  case 266:
/* Line 1787 of yacc.c  */
#line 1705 "glsl_parser.yy"
d4894 4
a4897 4
      void *ctx = state;
      (yyval.declaration) = new(ctx) ast_declaration((yyvsp[(1) - (4)].identifier), true, (yyvsp[(3) - (4)].expression), NULL);
      (yyval.declaration)->set_location(yylloc);
   }
d4900 1
a4900 7
  case 268:
/* Line 1787 of yacc.c  */
#line 1715 "glsl_parser.yy"
    {
      (yyval.expression) = (yyvsp[(2) - (3)].expression);
   }
    break;
d4902 2
a4903 3
  case 269:
/* Line 1787 of yacc.c  */
#line 1719 "glsl_parser.yy"
d4905 2
a4906 2
      (yyval.expression) = (yyvsp[(2) - (4)].expression);
   }
d4909 1
a4909 10
  case 270:
/* Line 1787 of yacc.c  */
#line 1726 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.expression) = new(ctx) ast_aggregate_initializer();
      (yyval.expression)->set_location(yylloc);
      (yyval.expression)->expressions.push_tail(& (yyvsp[(1) - (1)].expression)->link);
   }
    break;
d4911 2
a4912 3
  case 271:
/* Line 1787 of yacc.c  */
#line 1733 "glsl_parser.yy"
d4914 5
a4918 2
      (yyvsp[(1) - (3)].expression)->expressions.push_tail(& (yyvsp[(3) - (3)].expression)->link);
   }
d4921 1
a4921 5
  case 273:
/* Line 1787 of yacc.c  */
#line 1745 "glsl_parser.yy"
    { (yyval.node) = (ast_node *) (yyvsp[(1) - (1)].compound_statement); }
    break;
d4923 3
a4925 8
  case 281:
/* Line 1787 of yacc.c  */
#line 1760 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.compound_statement) = new(ctx) ast_compound_statement(true, NULL);
      (yyval.compound_statement)->set_location(yylloc);
   }
d4928 1
a4928 7
  case 282:
/* Line 1787 of yacc.c  */
#line 1766 "glsl_parser.yy"
    {
      state->symbols->push_scope();
   }
    break;
d4930 2
a4931 3
  case 283:
/* Line 1787 of yacc.c  */
#line 1770 "glsl_parser.yy"
d4933 4
a4936 5
      void *ctx = state;
      (yyval.compound_statement) = new(ctx) ast_compound_statement(true, (yyvsp[(3) - (4)].node));
      (yyval.compound_statement)->set_location(yylloc);
      state->symbols->pop_scope();
   }
d4939 1
a4939 5
  case 284:
/* Line 1787 of yacc.c  */
#line 1779 "glsl_parser.yy"
    { (yyval.node) = (ast_node *) (yyvsp[(1) - (1)].compound_statement); }
    break;
d4941 2
a4942 3
  case 286:
/* Line 1787 of yacc.c  */
#line 1785 "glsl_parser.yy"
d4944 4
a4947 4
      void *ctx = state;
      (yyval.compound_statement) = new(ctx) ast_compound_statement(false, NULL);
      (yyval.compound_statement)->set_location(yylloc);
   }
d4950 1
a4950 9
  case 287:
/* Line 1787 of yacc.c  */
#line 1791 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.compound_statement) = new(ctx) ast_compound_statement(false, (yyvsp[(2) - (3)].node));
      (yyval.compound_statement)->set_location(yylloc);
   }
    break;
d4952 2
a4953 3
  case 288:
/* Line 1787 of yacc.c  */
#line 1800 "glsl_parser.yy"
d4955 8
a4962 8
      if ((yyvsp[(1) - (1)].node) == NULL) {
         _mesa_glsl_error(& (yylsp[(1) - (1)]), state, "<nil> statement\n");
         assert((yyvsp[(1) - (1)].node) != NULL);
      }

      (yyval.node) = (yyvsp[(1) - (1)].node);
      (yyval.node)->link.self_link();
   }
d4965 1
a4965 12
  case 289:
/* Line 1787 of yacc.c  */
#line 1810 "glsl_parser.yy"
    {
      if ((yyvsp[(2) - (2)].node) == NULL) {
         _mesa_glsl_error(& (yylsp[(2) - (2)]), state, "<nil> statement\n");
         assert((yyvsp[(2) - (2)].node) != NULL);
      }
      (yyval.node) = (yyvsp[(1) - (2)].node);
      (yyval.node)->link.insert_before(& (yyvsp[(2) - (2)].node)->link);
   }
    break;
d4967 2
a4968 3
  case 290:
/* Line 1787 of yacc.c  */
#line 1822 "glsl_parser.yy"
d4970 7
a4976 4
      void *ctx = state;
      (yyval.node) = new(ctx) ast_expression_statement(NULL);
      (yyval.node)->set_location(yylloc);
   }
d4979 1
a4979 9
  case 291:
/* Line 1787 of yacc.c  */
#line 1828 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.node) = new(ctx) ast_expression_statement((yyvsp[(1) - (2)].expression));
      (yyval.node)->set_location(yylloc);
   }
    break;
d4981 2
a4982 3
  case 292:
/* Line 1787 of yacc.c  */
#line 1837 "glsl_parser.yy"
d4984 4
a4987 4
      (yyval.node) = new(state) ast_selection_statement((yyvsp[(3) - (5)].expression), (yyvsp[(5) - (5)].selection_rest_statement).then_statement,
                                              (yyvsp[(5) - (5)].selection_rest_statement).else_statement);
      (yyval.node)->set_location(yylloc);
   }
d4990 1
a4990 8
  case 293:
/* Line 1787 of yacc.c  */
#line 1846 "glsl_parser.yy"
    {
      (yyval.selection_rest_statement).then_statement = (yyvsp[(1) - (3)].node);
      (yyval.selection_rest_statement).else_statement = (yyvsp[(3) - (3)].node);
   }
    break;
d4992 2
a4993 3
  case 294:
/* Line 1787 of yacc.c  */
#line 1851 "glsl_parser.yy"
d4995 4
a4998 3
      (yyval.selection_rest_statement).then_statement = (yyvsp[(1) - (1)].node);
      (yyval.selection_rest_statement).else_statement = NULL;
   }
d5001 1
a5001 7
  case 295:
/* Line 1787 of yacc.c  */
#line 1859 "glsl_parser.yy"
    {
      (yyval.node) = (ast_node *) (yyvsp[(1) - (1)].expression);
   }
    break;
d5003 2
a5004 3
  case 296:
/* Line 1787 of yacc.c  */
#line 1863 "glsl_parser.yy"
d5006 4
a5009 9
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[(2) - (4)].identifier), false, NULL, (yyvsp[(4) - (4)].expression));
      ast_declarator_list *declarator = new(ctx) ast_declarator_list((yyvsp[(1) - (4)].fully_specified_type));
      decl->set_location(yylloc);
      declarator->set_location(yylloc);

      declarator->declarations.push_tail(&decl->link);
      (yyval.node) = declarator;
   }
d5012 1
a5012 8
  case 297:
/* Line 1787 of yacc.c  */
#line 1881 "glsl_parser.yy"
    {
      (yyval.node) = new(state) ast_switch_statement((yyvsp[(3) - (5)].expression), (yyvsp[(5) - (5)].switch_body));
      (yyval.node)->set_location(yylloc);
   }
    break;
d5014 2
a5015 3
  case 298:
/* Line 1787 of yacc.c  */
#line 1889 "glsl_parser.yy"
d5017 3
a5019 3
      (yyval.switch_body) = new(state) ast_switch_body(NULL);
      (yyval.switch_body)->set_location(yylloc);
   }
d5022 1
a5022 8
  case 299:
/* Line 1787 of yacc.c  */
#line 1894 "glsl_parser.yy"
    {
      (yyval.switch_body) = new(state) ast_switch_body((yyvsp[(2) - (3)].case_statement_list));
      (yyval.switch_body)->set_location(yylloc);
   }
    break;
d5024 2
a5025 3
  case 300:
/* Line 1787 of yacc.c  */
#line 1902 "glsl_parser.yy"
d5027 3
a5029 3
      (yyval.case_label) = new(state) ast_case_label((yyvsp[(2) - (3)].expression));
      (yyval.case_label)->set_location(yylloc);
   }
d5032 1
a5032 8
  case 301:
/* Line 1787 of yacc.c  */
#line 1907 "glsl_parser.yy"
    {
      (yyval.case_label) = new(state) ast_case_label(NULL);
      (yyval.case_label)->set_location(yylloc);
   }
    break;
d5034 2
a5035 3
  case 302:
/* Line 1787 of yacc.c  */
#line 1915 "glsl_parser.yy"
d5037 2
a5038 6
      ast_case_label_list *labels = new(state) ast_case_label_list();

      labels->labels.push_tail(& (yyvsp[(1) - (1)].case_label)->link);
      (yyval.case_label_list) = labels;
      (yyval.case_label_list)->set_location(yylloc);
   }
d5041 1
a5041 8
  case 303:
/* Line 1787 of yacc.c  */
#line 1923 "glsl_parser.yy"
    {
      (yyval.case_label_list) = (yyvsp[(1) - (2)].case_label_list);
      (yyval.case_label_list)->labels.push_tail(& (yyvsp[(2) - (2)].case_label)->link);
   }
    break;
d5043 2
a5044 3
  case 304:
/* Line 1787 of yacc.c  */
#line 1931 "glsl_parser.yy"
d5046 5
a5050 2
      ast_case_statement *stmts = new(state) ast_case_statement((yyvsp[(1) - (2)].case_label_list));
      stmts->set_location(yylloc);
d5052 3
a5054 3
      stmts->stmts.push_tail(& (yyvsp[(2) - (2)].node)->link);
      (yyval.case_statement) = stmts;
   }
d5057 1
a5057 8
  case 305:
/* Line 1787 of yacc.c  */
#line 1939 "glsl_parser.yy"
    {
      (yyval.case_statement) = (yyvsp[(1) - (2)].case_statement);
      (yyval.case_statement)->stmts.push_tail(& (yyvsp[(2) - (2)].node)->link);
   }
    break;
d5059 2
a5060 3
  case 306:
/* Line 1787 of yacc.c  */
#line 1947 "glsl_parser.yy"
d5062 5
a5066 6
      ast_case_statement_list *cases= new(state) ast_case_statement_list();
      cases->set_location(yylloc);

      cases->cases.push_tail(& (yyvsp[(1) - (1)].case_statement)->link);
      (yyval.case_statement_list) = cases;
   }
d5069 1
a5069 8
  case 307:
/* Line 1787 of yacc.c  */
#line 1955 "glsl_parser.yy"
    {
      (yyval.case_statement_list) = (yyvsp[(1) - (2)].case_statement_list);
      (yyval.case_statement_list)->cases.push_tail(& (yyvsp[(2) - (2)].case_statement)->link);
   }
    break;
d5071 2
a5072 3
  case 308:
/* Line 1787 of yacc.c  */
#line 1963 "glsl_parser.yy"
d5074 5
a5078 5
      void *ctx = state;
      (yyval.node) = new(ctx) ast_iteration_statement(ast_iteration_statement::ast_while,
                                            NULL, (yyvsp[(3) - (5)].node), NULL, (yyvsp[(5) - (5)].node));
      (yyval.node)->set_location(yylloc);
   }
d5081 1
a5081 10
  case 309:
/* Line 1787 of yacc.c  */
#line 1970 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.node) = new(ctx) ast_iteration_statement(ast_iteration_statement::ast_do_while,
                                            NULL, (yyvsp[(5) - (7)].expression), NULL, (yyvsp[(2) - (7)].node));
      (yyval.node)->set_location(yylloc);
   }
    break;
d5083 2
a5084 3
  case 310:
/* Line 1787 of yacc.c  */
#line 1977 "glsl_parser.yy"
d5086 5
a5090 5
      void *ctx = state;
      (yyval.node) = new(ctx) ast_iteration_statement(ast_iteration_statement::ast_for,
                                            (yyvsp[(3) - (6)].node), (yyvsp[(4) - (6)].for_rest_statement).cond, (yyvsp[(4) - (6)].for_rest_statement).rest, (yyvsp[(6) - (6)].node));
      (yyval.node)->set_location(yylloc);
   }
d5093 1
a5093 7
  case 314:
/* Line 1787 of yacc.c  */
#line 1993 "glsl_parser.yy"
    {
      (yyval.node) = NULL;
   }
    break;
d5095 2
a5096 3
  case 315:
/* Line 1787 of yacc.c  */
#line 2000 "glsl_parser.yy"
d5098 2
a5099 3
      (yyval.for_rest_statement).cond = (yyvsp[(1) - (2)].node);
      (yyval.for_rest_statement).rest = NULL;
   }
d5102 1
a5102 8
  case 316:
/* Line 1787 of yacc.c  */
#line 2005 "glsl_parser.yy"
    {
      (yyval.for_rest_statement).cond = (yyvsp[(1) - (3)].node);
      (yyval.for_rest_statement).rest = (yyvsp[(3) - (3)].expression);
   }
    break;
d5104 2
a5105 3
  case 317:
/* Line 1787 of yacc.c  */
#line 2014 "glsl_parser.yy"
d5107 3
a5109 4
      void *ctx = state;
      (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_continue, NULL);
      (yyval.node)->set_location(yylloc);
   }
d5112 1
a5112 9
  case 318:
/* Line 1787 of yacc.c  */
#line 2020 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_break, NULL);
      (yyval.node)->set_location(yylloc);
   }
    break;
d5114 2
a5115 3
  case 319:
/* Line 1787 of yacc.c  */
#line 2026 "glsl_parser.yy"
d5117 3
a5119 4
      void *ctx = state;
      (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_return, NULL);
      (yyval.node)->set_location(yylloc);
   }
d5122 1
a5122 9
  case 320:
/* Line 1787 of yacc.c  */
#line 2032 "glsl_parser.yy"
    {
      void *ctx = state;
      (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_return, (yyvsp[(2) - (3)].expression));
      (yyval.node)->set_location(yylloc);
   }
    break;
d5124 2
a5125 3
  case 321:
/* Line 1787 of yacc.c  */
#line 2038 "glsl_parser.yy"
d5127 4
a5130 4
      void *ctx = state;
      (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_discard, NULL);
      (yyval.node)->set_location(yylloc);
   }
d5133 1
a5133 5
  case 322:
/* Line 1787 of yacc.c  */
#line 2046 "glsl_parser.yy"
    { (yyval.node) = (yyvsp[(1) - (1)].function_definition); }
    break;
d5135 7
a5141 4
  case 323:
/* Line 1787 of yacc.c  */
#line 2047 "glsl_parser.yy"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d5144 1
a5144 11
  case 324:
/* Line 1787 of yacc.c  */
#line 2048 "glsl_parser.yy"
    { (yyval.node) = NULL; }
    break;

  case 325:
/* Line 1787 of yacc.c  */
#line 2049 "glsl_parser.yy"
    { (yyval.node) = NULL; }
    break;
d5146 2
a5147 3
  case 326:
/* Line 1787 of yacc.c  */
#line 2054 "glsl_parser.yy"
d5149 4
a5152 8
      void *ctx = state;
      (yyval.function_definition) = new(ctx) ast_function_definition();
      (yyval.function_definition)->set_location(yylloc);
      (yyval.function_definition)->prototype = (yyvsp[(1) - (2)].function);
      (yyval.function_definition)->body = (yyvsp[(2) - (2)].compound_statement);

      state->symbols->pop_scope();
   }
d5155 1
a5155 7
  case 327:
/* Line 1787 of yacc.c  */
#line 2068 "glsl_parser.yy"
    {
      (yyval.node) = (yyvsp[(1) - (1)].interface_block);
   }
    break;
d5157 2
a5158 3
  case 328:
/* Line 1787 of yacc.c  */
#line 2072 "glsl_parser.yy"
d5160 4
a5163 6
      ast_interface_block *block = (yyvsp[(2) - (2)].interface_block);
      if (!block->layout.merge_qualifier(& (yylsp[(1) - (2)]), state, (yyvsp[(1) - (2)].type_qualifier))) {
         YYERROR;
      }
      (yyval.node) = block;
   }
d5166 1
a5166 49
  case 329:
/* Line 1787 of yacc.c  */
#line 2083 "glsl_parser.yy"
    {
      ast_interface_block *const block = (yyvsp[(6) - (7)].interface_block);

      block->block_name = (yyvsp[(2) - (7)].identifier);
      block->declarations.push_degenerate_list_at_head(& (yyvsp[(4) - (7)].declarator_list)->link);

      if ((yyvsp[(1) - (7)].type_qualifier).flags.q.uniform) {
         if (!state->ARB_uniform_buffer_object_enable) {
            _mesa_glsl_error(& (yylsp[(1) - (7)]), state,
                             "#version 140 / GL_ARB_uniform_buffer_object "
                             "required for defining uniform blocks\n");
         } else if (state->ARB_uniform_buffer_object_warn) {
            _mesa_glsl_warning(& (yylsp[(1) - (7)]), state,
                               "#version 140 / GL_ARB_uniform_buffer_object "
                               "required for defining uniform blocks\n");
         }
      } else {
         if (state->es_shader || state->language_version < 150) {
            _mesa_glsl_error(& (yylsp[(1) - (7)]), state,
                             "#version 150 required for using "
                             "interface blocks.\n");
         }
      }

      /* From the GLSL 1.50.11 spec, section 4.3.7 ("Interface Blocks"):
       * "It is illegal to have an input block in a vertex shader
       *  or an output block in a fragment shader"
       */
      if ((state->target == vertex_shader) && (yyvsp[(1) - (7)].type_qualifier).flags.q.in) {
         _mesa_glsl_error(& (yylsp[(1) - (7)]), state,
                          "`in' interface block is not allowed for "
                          "a vertex shader\n");
      } else if ((state->target == fragment_shader) && (yyvsp[(1) - (7)].type_qualifier).flags.q.out) {
         _mesa_glsl_error(& (yylsp[(1) - (7)]), state,
                          "`out' interface block is not allowed for "
                          "a fragment shader\n");
      }

      /* Since block arrays require names, and both features are added in
       * the same language versions, we don't have to explicitly
       * version-check both things.
       */
      if (block->instance_name != NULL) {
         state->check_version(150, 300, & (yylsp[(1) - (7)]), "interface blocks with "
                               "an instance name are not allowed");
      }
d5168 2
a5169 51
      unsigned interface_type_mask;
      struct ast_type_qualifier temp_type_qualifier;

      /* Get a bitmask containing only the in/out/uniform flags, allowing us
       * to ignore other irrelevant flags like interpolation qualifiers.
       */
      temp_type_qualifier.flags.i = 0;
      temp_type_qualifier.flags.q.uniform = true;
      temp_type_qualifier.flags.q.in = true;
      temp_type_qualifier.flags.q.out = true;
      interface_type_mask = temp_type_qualifier.flags.i;

      /* Get the block's interface qualifier.  The interface_qualifier
       * production rule guarantees that only one bit will be set (and
       * it will be in/out/uniform).
       */
       unsigned block_interface_qualifier = (yyvsp[(1) - (7)].type_qualifier).flags.i;

      block->layout.flags.i |= block_interface_qualifier;

      foreach_list_typed (ast_declarator_list, member, link, &block->declarations) {
         ast_type_qualifier& qualifier = member->type->qualifier;
         if ((qualifier.flags.i & interface_type_mask) == 0) {
            /* GLSLangSpec.1.50.11, 4.3.7 (Interface Blocks):
             * "If no optional qualifier is used in a member declaration, the
             *  qualifier of the variable is just in, out, or uniform as declared
             *  by interface-qualifier."
             */
            qualifier.flags.i |= block_interface_qualifier;
         } else if ((qualifier.flags.i & interface_type_mask) !=
                    block_interface_qualifier) {
            /* GLSLangSpec.1.50.11, 4.3.7 (Interface Blocks):
             * "If optional qualifiers are used, they can include interpolation
             *  and storage qualifiers and they must declare an input, output,
             *  or uniform variable consistent with the interface qualifier of
             *  the block."
             */
            _mesa_glsl_error(& (yylsp[(1) - (7)]), state,
                             "uniform/in/out qualifier on "
                             "interface block member does not match "
                             "the interface block\n");
         }
      }

      (yyval.interface_block) = block;
   }
    break;

  case 330:
/* Line 1787 of yacc.c  */
#line 2180 "glsl_parser.yy"
d5171 4
a5174 3
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.in = 1;
   }
d5177 1
a5177 8
  case 331:
/* Line 1787 of yacc.c  */
#line 2185 "glsl_parser.yy"
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.out = 1;
   }
    break;
d5179 3
a5181 7
  case 332:
/* Line 1787 of yacc.c  */
#line 2190 "glsl_parser.yy"
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.uniform = 1;
   }
d5184 1
a5184 8
  case 333:
/* Line 1787 of yacc.c  */
#line 2198 "glsl_parser.yy"
    {
      (yyval.interface_block) = new(state) ast_interface_block(*state->default_uniform_qualifier,
                                          NULL, NULL);
   }
    break;
d5186 3
a5188 7
  case 334:
/* Line 1787 of yacc.c  */
#line 2203 "glsl_parser.yy"
    {
      (yyval.interface_block) = new(state) ast_interface_block(*state->default_uniform_qualifier,
                                          (yyvsp[(1) - (1)].identifier), NULL);
   }
d5191 1
a5191 15
  case 335:
/* Line 1787 of yacc.c  */
#line 2208 "glsl_parser.yy"
    {
      (yyval.interface_block) = new(state) ast_interface_block(*state->default_uniform_qualifier,
                                          (yyvsp[(1) - (4)].identifier), (yyvsp[(3) - (4)].expression));
   }
    break;

  case 336:
/* Line 1787 of yacc.c  */
#line 2213 "glsl_parser.yy"
    {
      _mesa_glsl_error(& (yylsp[(1) - (3)]), state,
                       "instance block arrays must be explicitly sized\n");
d5193 3
a5195 3
      (yyval.interface_block) = new(state) ast_interface_block(*state->default_uniform_qualifier,
                                          (yyvsp[(1) - (3)].identifier), NULL);
   }
d5198 1
a5198 8
  case 337:
/* Line 1787 of yacc.c  */
#line 2224 "glsl_parser.yy"
    {
      (yyval.declarator_list) = (yyvsp[(1) - (1)].declarator_list);
      (yyvsp[(1) - (1)].declarator_list)->link.self_link();
   }
    break;
d5200 2
a5201 3
  case 338:
/* Line 1787 of yacc.c  */
#line 2229 "glsl_parser.yy"
d5203 5
a5207 12
      (yyval.declarator_list) = (yyvsp[(1) - (2)].declarator_list);
      (yyvsp[(2) - (2)].declarator_list)->link.insert_before(& (yyval.declarator_list)->link);
   }
    break;

  case 339:
/* Line 1787 of yacc.c  */
#line 2237 "glsl_parser.yy"
    {
      void *ctx = state;
      ast_fully_specified_type *type = (yyvsp[(1) - (3)].fully_specified_type);
      type->set_location(yylloc);
d5209 2
a5210 15
      if (type->qualifier.flags.q.attribute) {
         _mesa_glsl_error(& (yylsp[(1) - (3)]), state,
                          "keyword 'attribute' cannot be used with "
                          "interface block member\n");
      } else if (type->qualifier.flags.q.varying) {
         _mesa_glsl_error(& (yylsp[(1) - (3)]), state,
                          "keyword 'varying' cannot be used with "
                          "interface block member\n");
      }

      (yyval.declarator_list) = new(ctx) ast_declarator_list(type);
      (yyval.declarator_list)->set_location(yylloc);

      (yyval.declarator_list)->declarations.push_degenerate_list_at_head(& (yyvsp[(2) - (3)].declaration)->link);
   }
a5212 9
  case 340:
/* Line 1787 of yacc.c  */
#line 2261 "glsl_parser.yy"
    {
      if (!state->default_uniform_qualifier->merge_qualifier(& (yylsp[(1) - (3)]), state, (yyvsp[(1) - (3)].type_qualifier))) {
         YYERROR;
      }
   }
    break;
d5215 2
a5216 2
/* Line 1787 of yacc.c  */
#line 5739 "glsl_parser.cpp"
a5218 11
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
a5246 4
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

a5253 2
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
d5255 29
a5283 25
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, state, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
a5284 1
# undef YYSYNTAX_ERROR
d5344 1
a5344 1
      if (!yypact_value_is_default (yyn))
d5396 1
a5396 1
#if !defined yyoverflow || YYERROR_VERBOSE
d5408 2
a5409 7
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, state);
    }
@


1.1.1.3
log
@Import Mesa 9.2.1
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.7.12-4996.  */
d5 1
a5 1
      Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
d47 1
a47 1
#define YYBISON_VERSION "2.7.12-4996"
d73 1
a73 1
/* Line 371 of yacc.c  */
d121 1
a121 1
/* Line 371 of yacc.c  */
d142 2
a143 2
#ifndef YY__MESA_GLSL_SRC_GLSL_GLSL_PARSER_H_INCLUDED
# define YY__MESA_GLSL_SRC_GLSL_GLSL_PARSER_H_INCLUDED
d383 1
a383 1
/* Line 387 of yacc.c  */
d421 1
a421 1
/* Line 387 of yacc.c  */
d457 1
a457 1
#endif /* !YY__MESA_GLSL_SRC_GLSL_GLSL_PARSER_H_INCLUDED  */
d461 1
a461 1
/* Line 390 of yacc.c  */
d515 1
a515 1
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
d519 1
a519 9
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5))
#  define __attribute__(Spec) /* empty */
d525 1
a525 1
# define YYUSE(E) ((void) (E))
d527 1
a527 1
# define YYUSE(E) /* empty */
a529 1

d532 1
a532 1
# define YYID(N) (N)
d684 1
a684 1
#define YYLAST   3639
d871 1
a871 1
      -1,   299,   316,   242,    -1,   317,    -1,   316,   226,   317,
d927 9
a935 9
    1657,  1662,  1670,  1689,  1694,  1702,  1708,  1717,  1718,  1722,
    1729,  1736,  1743,  1749,  1750,  1754,  1755,  1756,  1757,  1758,
    1759,  1763,  1770,  1769,  1783,  1784,  1788,  1794,  1803,  1813,
    1825,  1831,  1840,  1849,  1854,  1862,  1866,  1884,  1892,  1897,
    1905,  1910,  1918,  1926,  1934,  1942,  1950,  1958,  1966,  1973,
    1980,  1990,  1991,  1995,  1997,  2003,  2008,  2017,  2023,  2029,
    2035,  2041,  2050,  2051,  2052,  2053,  2057,  2071,  2075,  2086,
    2183,  2188,  2193,  2202,  2206,  2211,  2216,  2227,  2232,  2240,
    2264
d1220 1
a1220 1
#define YYPACT_NINF -401
d1223 50
a1272 50
    -110,   -39,    82,  -401,   -21,  -401,   -22,  -401,  -401,  -401,
    -401,   -23,    -5,  3372,  -401,  -401,   -16,  -401,  -401,  -401,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,  -401,  -401,  -401,    23,    34,    50,  -401,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,   -71,  -401,  -401,   289,  -401,  -401,  -401,
     134,     5,    15,    36,    41,    43,   -43,  -401,  3372,  -401,
     -61,   -38,   -36,     2,  -197,  -401,   170,   215,   312,   835,
     312,   312,  -401,    -6,  -401,   312,  -401,  -401,  -401,  -401,
    -401,   129,  -401,    -5,  3498,   -10,  -401,  -401,  -401,  -401,
    -401,   312,  -401,   312,  -401,   835,  -401,  -401,  -401,  -401,
    -401,   -42,  -401,  -401,   484,  -401,  -401,    37,    37,  -401,
    -401,  -401,  -401,   835,    37,    37,    -5,  -401,     6,     7,
    -190,     9,   -95,  -401,  -401,  -401,  -401,  -401,  -401,  2511,
    -401,    -3,   105,    -5,  1095,  -401,  3498,     3,  -401,  -401,
      26,  -142,  -401,  -401,     8,    14,  1589,    47,    49,    29,
    2393,    55,    59,  -401,  -401,  -401,  -401,  -401,  1939,  1939,
    1939,  -401,  -401,  -401,  -401,  -401,     0,  -401,    60,  -401,
     -83,  -401,  -401,  -401,    62,  -121,  3144,    65,   360,  1939,
      42,  -171,    57,   -80,    56,    53,    58,    40,   188,   187,
     -81,  -401,  -401,  -165,  -401,    63,   583,    80,  -401,  -401,
    -401,  -401,   726,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,    -5,  -401,  -401,  -177,  2832,  2285,  -401,  -401,
    -401,  -401,  -401,    83,  -401,  3498,  -401,    81,  -159,  -401,
    -401,  -401,  1219,  -401,    94,  -401,   -42,  -401,  -401,   216,
    2058,  1939,  -401,  -401,  -157,  1939,  2621,  -401,  -401,  -113,
    -401,  1589,  -401,  -401,  1939,   170,  -401,  -401,  1939,    86,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,  1939,  -401,  1939,  1939,  1939,  1939,  1939,
    1939,  1939,  1939,  1939,  1939,  1939,  1939,  1939,  1939,  1939,
    1939,  1939,  1939,  1939,  1939,  1939,  -401,  -401,  -401,    87,
    2933,  2285,    71,    89,  2285,  -401,  -401,  -401,    -5,    70,
    3498,  1939,    -5,  -401,  -401,  -401,  -401,  -401,  -401,    97,
    -401,  -401,  2621,  -104,  -401,   -97,    93,    -5,    98,  -401,
     968,   100,    93,  -401,   110,  -401,   111,   -91,  3254,  -401,
    -401,  -401,  -401,  -401,    42,    42,  -171,  -171,    57,    57,
      57,    57,   -80,   -80,    56,    53,    58,    40,   188,   187,
    -178,  -401,  1939,    91,   112,  -401,  2285,   102,  -401,  -176,
    -150,   238,  -401,   130,  -401,  1939,  -401,   113,   131,  1589,
      92,   116,  1830,  -401,  -401,  -401,  -401,  -401,  1939,   136,
    -401,  1939,   137,  2285,   119,  -401,  2285,  2167,  -401,  -401,
     139,   121,  -401,   -69,  1939,  1830,   352,  -401,   -15,  -401,
    2285,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  2285,  -401,
    -401,  -401,  3043,  -401,   124,    93,  -401,  1589,  1939,   128,
    -401,  -401,  1348,  1589,    -7,  -401,  -401,  -401,   146,  -401,
    -401,  -140,  -401,  -401,  -401,  -401,  -401,  1589,  -401,  -401
d1278 11
a1288 11
    -401,  -401,  -401,  -401,  -401,  -401,     1,  -401,  -401,   -82,
    -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,  -401,
    -401,  -401,  -401,  -401,  -130,  -401,  -114,  -109,  -146,  -101,
      33,    38,    32,    35,    44,    30,  -401,  -170,   -51,  -401,
    -193,  -246,    25,    31,  -401,  -401,  -401,  -401,   222,   -77,
    -401,  -401,  -401,  -401,  -126,   -11,  -401,  -401,   103,  -401,
    -401,   -78,  -401,  -401,   -13,  -401,  -401,   217,  -401,   194,
    -168,    39,    22,  -323,  -401,   101,  -186,  -400,  -401,  -401,
     -67,   283,    99,   104,  -401,  -401,    27,  -401,  -401,   -84,
    -401,   -79,  -401,  -401,  -401,  -401,  -401,  -401,   293,  -401,
    -401,  -102,  -401,  -401,    46,  -401,  -401
d1297 20
a1316 20
     122,  -332,   117,   478,   479,    11,   158,   294,   183,   272,
     289,   478,   479,    16,   142,   174,   281,   299,   144,     1,
     353,   302,   303,     7,     8,     9,   332,   333,   415,   166,
     343,   418,   461,   266,   171,   159,   160,   161,   109,   173,
     175,   158,   177,   178,   110,   167,   350,   180,   345,   271,
     447,   267,     7,     8,     9,   461,   328,   329,   183,     4,
     183,   345,   441,   144,   351,   173,   348,   362,   448,   345,
     159,   160,   161,     7,     8,     9,   362,   346,   297,   298,
     285,   259,     5,   363,   286,   374,   345,   263,   264,     7,
       8,     9,   449,   445,   135,   122,   272,   117,   373,   324,
     499,   307,   375,   376,   414,   308,   176,   188,    12,   379,
      15,   382,    10,   345,   281,   423,   133,   170,   429,  -330,
     467,   122,   345,   469,   471,   430,    97,    98,    99,   345,
    -331,   437,   187,   109,   182,   438,   271,   485,   146,   110,
     304,   247,   305,   246,   174,   486,  -332,   269,   147,   358,
     262,   410,   190,   474,   334,   335,   183,   345,   344,   330,
     331,    97,    98,    99,   336,   337,   442,   265,   173,   148,
     377,   122,   134,   122,   149,   310,   150,   189,   151,   376,
     272,   153,   154,   247,   156,   246,   398,   399,   400,   401,
     157,   272,   365,   366,   348,   391,   392,   393,   271,   271,
d1318 20
a1337 20
     271,   271,   271,   271,   394,   395,   355,   179,    17,    18,
     271,   396,   397,   384,  -116,   181,   488,   -20,   -21,   480,
     268,   271,   453,   186,   358,   402,   403,   496,   276,   247,
     275,   246,   272,   456,   300,   283,   377,    35,    36,    37,
     287,   172,    39,    40,    41,    42,   288,   389,    97,    98,
      99,   475,   122,   349,   168,     8,   169,   284,   290,   122,
     291,   292,   390,   325,   326,   327,   295,   247,   340,   246,
     296,   -46,   271,   247,   306,   491,   311,   190,   247,   338,
     246,   490,    17,    18,   411,   339,   493,   495,   341,   342,
     355,   -45,   272,   355,   361,   153,   383,   357,   -40,   369,
     412,   495,   416,   417,   421,    17,    18,   145,   425,   345,
     432,    35,   136,   137,   434,   138,    39,    40,    41,    42,
     165,   435,   443,   436,   450,   458,   444,   440,   141,    97,
      98,    99,   271,   446,    35,   136,   137,   122,   138,    39,
      40,    41,    42,   455,   452,   454,   106,   460,   -50,   247,
     468,   466,   472,   473,   477,   355,   489,   247,   492,   246,
     498,   404,   406,   409,   165,   165,   407,   405,   431,   258,
     282,   165,   165,   139,   424,   140,   408,   464,   476,   368,
     465,   370,   355,   155,   371,   355,   355,   420,   494,   426,
     380,   152,     0,     0,     0,   497,   422,     0,     0,   355,
d1339 1
a1339 1
       0,   246,     0,     0,     0,     0,     0,     0,     0,     0,
d1344 2
a1345 2
     247,   246,   246,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   247,     0,   246,    17,    18,    19,
d1355 11
a1365 1
     140,   203,   204,   205,   206,   207,    17,    18,   208,   209,
d1367 1
a1367 11
       0,   322,     0,     0,     0,     0,     0,    96,    97,    98,
      99,     0,   100,     0,     0,    35,    36,    37,     0,    38,
      39,    40,    41,    42,     0,   106,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   210,   141,    97,    98,    99,
d1369 1
a1369 1
       0,     0,     0,     0,   106,     0,   215,   216,   217,    17,
d1380 1
a1380 1
     208,   209,     0,     0,     0,     0,     0,     0,     0,     0,
d1404 1
a1404 25
       0,     0,   208,   209,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    96,    97,    98,    99,     0,   100,     0,    17,    18,
      19,    20,    21,    22,     0,     0,     0,     0,     0,   106,
       0,     0,     0,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,   136,   137,
       0,   138,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,     0,   210,
      95,     0,     0,     0,     0,   211,   212,   213,   214,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     215,   216,   433,     0,     0,     0,     0,     0,   141,    97,
      98,    99,    17,    18,    19,    20,    21,    22,     0,     0,
       0,     0,     0,     0,     0,     0,   106,     0,     0,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,   136,   137,     0,   138,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,     0,     0,    95,     0,     0,     0,     0,     0,
d1406 2
a1407 16
       0,     0,     0,     0,     0,     0,     0,     0,     0,   280,
       0,     0,   141,    97,    98,    99,     0,     0,     0,     0,
       0,    17,    18,    19,    20,    21,    22,   194,   195,   196,
     106,   197,   198,   199,   200,   201,   478,   479,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,     0,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,   202,   139,    95,   140,   203,   204,   205,   206,   207,
       0,     0,   208,   209,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   364,     0,     0,     0,     0,     0,     0,
       0,    96,    97,    98,    99,     0,   100,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   106,
d1416 15
a1430 4
       0,     0,     0,     0,     0,   211,   212,   213,   214,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     215,   216,    17,    18,    19,    20,    21,    22,   194,   195,
     196,     0,   197,   198,   199,   200,   201,     0,     0,    23,
d1432 1
a1432 1
      34,    35,    36,    37,     0,    38,    39,    40,    41,    42,
d1438 1
a1438 2
      93,    94,   202,   139,    95,   140,   203,   204,   205,   206,
     207,     0,     0,   208,   209,     0,     0,     0,     0,     0,
d1440 13
a1452 1
       0,     0,    96,    97,    98,    99,     0,   100,     0,     0,
d1454 1
a1454 1
     106,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d1456 1
a1462 1
     210,     0,     0,     0,     0,     0,   211,   212,   213,   214,
d1464 27
a1490 2
       0,   215,   216,    17,    18,    19,    20,    21,    22,   194,
     195,   196,     0,   197,   198,   199,   200,   201,     0,     0,
d1498 3
a1500 3
      92,    93,    94,   202,   139,    95,   140,   203,   204,   205,
     206,   207,     0,     0,   208,   209,     0,     0,     0,     0,
       0,     0,     0,     0,    19,    20,    21,    22,     0,     0,
d1512 3
a1514 14
     214,    17,    18,    19,    20,    21,    22,     0,     0,     0,
       0,     0,   215,   154,     0,     0,     0,     0,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,     0,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,     0,   139,    95,   140,   203,   204,   205,   206,   207,
     210,     0,   208,   209,     0,     0,   211,   212,   213,   214,
       0,     0,    19,    20,    21,    22,     0,     0,     0,     0,
       0,    96,    97,    98,    99,     0,   100,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,   106,
d1522 1
a1522 2
       0,   208,   209,     0,     0,     0,     0,     0,     0,   210,
       0,     0,     0,     0,     0,   211,   212,   213,   214,     0,
d1524 1
a1524 1
     215,     0,     0,     0,     0,    23,    24,    25,    26,    27,
d1532 3
a1534 2
      95,   140,   203,   204,   205,   206,   207,     0,   210,   208,
     209,     0,     0,     0,   211,   212,   213,   214,    19,    20,
d1536 1
a1536 1
     354,   470,     0,    23,    24,    25,    26,    27,    28,    29,
d1544 11
d1556 2
a1557 25
       0,     0,     0,     0,     0,     0,   210,     0,     0,     0,
       0,     0,   211,   212,   213,   214,    19,    20,    21,    22,
       0,     0,     0,     0,     0,     0,     0,     0,   354,     0,
       0,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,     0,   139,    95,   140,   203,   204,
     205,   206,   207,     0,   210,   208,   209,     0,     0,     0,
     211,   212,   213,   214,    17,    18,    19,    20,    21,    22,
       0,     0,     0,     0,     0,   293,     0,     0,     0,     0,
       0,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,   136,   137,     0,   138,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,     0,   139,    95,   140,   203,   204,
     205,   206,   207,     0,     0,   208,   209,     0,     0,     0,
       0,     0,   210,     0,     0,   270,     0,     0,   211,   212,
     213,   214,     0,     0,   141,    97,    98,    99,     0,     0,
d1559 1
a1559 1
       0,     0,   106,     0,     0,     0,     0,     0,     0,     0,
d1566 2
a1567 33
       0,     0,     0,     0,     0,     0,     0,    19,    20,    21,
      22,     0,   210,     0,     0,     0,     0,     0,   211,   212,
     213,   214,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,     0,   139,    95,   140,   203,
     204,   205,   206,   207,     0,     0,   208,   209,    19,    20,
      21,    22,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,     0,   139,    95,   140,
     203,   204,   205,   206,   207,     0,     0,   208,   209,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    19,    20,
      21,    22,     0,   210,     0,     0,   352,     0,     0,   211,
     212,   213,   214,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,     0,   139,    95,   140,
     203,   204,   205,   206,   207,     0,     0,   208,   209,    19,
      20,    21,    22,     0,   210,     0,     0,   413,     0,     0,
d1575 1
a1575 1
      88,    89,    90,    91,    92,    93,   309,     0,   139,    95,
d1577 48
a1624 5
       0,     0,     0,     0,     0,     0,     0,     0,     0,    19,
      20,    21,    22,     0,   210,     0,     0,   487,     0,     0,
     211,   212,   213,   214,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
d1629 15
a1643 26
      88,    89,    90,    91,    92,    93,   439,     0,   139,    95,
     140,   203,   204,   205,   206,   207,     0,     0,   208,   209,
       0,     0,     0,     0,     0,   210,     0,     0,     0,     0,
       0,   211,   212,   213,   214,    17,    18,    19,    20,    21,
      22,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,     0,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,     0,     0,    95,     0,     0,
       0,     0,     0,     0,     0,   210,     0,     0,     0,     0,
       0,   211,   212,   213,   214,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    96,    97,    98,    99,     0,
     100,    17,    18,    19,    20,    21,    22,     0,   101,   102,
     103,   104,   105,   106,     0,     0,     0,     0,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,   136,   137,     0,   138,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,     0,     0,    95,     0,     0,     0,     0,     0,     0,
d1645 1
d1647 1
a1647 2
       0,   141,    97,    98,    99,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   106
d1650 2
a1651 2
#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-401)))
d1653 1
a1653 1
#define yytable_value_is_error(Yytable_value) \
d1658 20
a1677 20
      13,    96,    13,    18,    19,     4,     4,   200,   134,   179,
     196,    18,    19,    12,    96,   117,   184,   210,    96,   129,
     266,   104,   105,    94,    95,    96,   106,   107,   351,   226,
     111,   354,   432,   223,   116,    33,    34,    35,    13,   117,
     118,     4,   120,   121,    13,   242,   223,   125,   226,   179,
     226,   241,    94,    95,    96,   455,   227,   228,   184,    98,
     186,   226,   240,   141,   241,   143,   252,   226,   244,   226,
      33,    34,    35,    94,    95,    96,   226,   242,   208,   209,
     222,   158,     0,   242,   226,   242,   226,   164,   165,    94,
      95,    96,   242,   416,    93,   108,   266,   108,   291,   229,
     240,   222,   295,   296,   350,   226,   119,   149,   130,   222,
     133,   304,   133,   226,   282,   361,   132,   116,   222,    96,
     443,   134,   226,   446,   447,   222,   124,   125,   126,   226,
      96,   222,   145,   108,   133,   226,   266,   460,   133,   108,
     223,   154,   225,   154,   246,   468,    96,   242,   133,   275,
     163,   344,   151,   222,   234,   235,   282,   226,   239,   102,
     103,   124,   125,   126,   108,   109,   412,   166,   246,   133,
     296,   184,   243,   186,   133,   226,   133,   219,   221,   372,
     350,   242,   243,   196,   222,   196,   332,   333,   334,   335,
     226,   361,    98,    99,   380,   325,   326,   327,   328,   329,
d1679 20
a1698 20
     340,   341,   342,   343,   328,   329,   267,   223,     3,     4,
     350,   330,   331,   305,   222,    96,   472,   221,   221,   244,
     221,   361,   425,   243,   360,   336,   337,   244,   133,   252,
     243,   252,   412,   429,   244,   242,   372,    32,    33,    34,
     242,    36,    37,    38,    39,    40,   242,   308,   124,   125,
     126,   454,   275,   262,    94,    95,    96,   241,   221,   282,
     221,   242,   323,   231,   232,   233,   221,   290,   238,   290,
     221,   221,   412,   296,   222,   478,   221,   286,   301,   236,
     301,   477,     3,     4,   345,   237,   482,   483,   110,   112,
     351,   221,   472,   354,   223,   242,   305,   224,   222,    93,
     223,   497,   241,   224,   244,     3,     4,   100,   221,   226,
     222,    32,    33,    34,   224,    36,    37,    38,    39,    40,
     113,   221,   241,   222,    96,   243,   224,   388,   123,   124,
     125,   126,   472,   241,    32,    33,    34,   360,    36,    37,
      38,    39,    40,   222,   224,   242,   141,   241,   222,   372,
     241,   224,   223,   242,    12,   416,   242,   380,   240,   380,
     224,   338,   340,   343,   157,   158,   341,   339,   377,   157,
     186,   164,   165,    94,   362,    96,   342,   438,   455,   286,
     441,   290,   443,   110,   290,   446,   447,   358,   482,   372,
     301,   108,    -1,    -1,    -1,   484,   360,    -1,    -1,   460,
d1700 1
a1700 1
      -1,   432,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1705 2
a1706 2
     483,   482,   483,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,    -1,   497,    -1,   497,     3,     4,     5,
d1716 11
a1726 1
      96,    97,    98,    99,   100,   101,     3,     4,   104,   105,
d1728 1
a1728 11
      -1,   241,    -1,    -1,    -1,    -1,    -1,   123,   124,   125,
     126,    -1,   128,    -1,    -1,    32,    33,    34,    -1,    36,
      37,    38,    39,    40,    -1,   141,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   221,   123,   124,   125,   126,
d1730 1
a1730 1
      -1,    -1,    -1,    -1,   141,    -1,   242,   243,   244,     3,
d1741 1
a1741 1
     104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1765 1
a1765 1
      -1,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,
d1767 2
a1768 40
      -1,   123,   124,   125,   126,    -1,   128,    -1,     3,     4,
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,   141,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,   221,
      95,    -1,    -1,    -1,    -1,   227,   228,   229,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     242,   243,   244,    -1,    -1,    -1,    -1,    -1,   123,   124,
     125,   126,     3,     4,     5,     6,     7,     8,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   141,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,
      -1,    -1,   123,   124,   125,   126,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
     141,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   244,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   123,   124,   125,   126,    -1,   128,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   141,
d1777 15
a1791 4
      -1,    -1,    -1,    -1,    -1,   227,   228,   229,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     242,   243,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    -1,    13,    14,    15,    16,    17,    -1,    -1,    20,
d1793 1
a1793 1
      31,    32,    33,    34,    -1,    36,    37,    38,    39,    40,
d1799 1
a1799 2
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,
d1801 13
a1813 1
      -1,    -1,   123,   124,   125,   126,    -1,   128,    -1,    -1,
d1815 1
a1815 1
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1817 1
a1823 1
     221,    -1,    -1,    -1,    -1,    -1,   227,   228,   229,   230,
d1825 27
a1851 2
      -1,   242,   243,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    -1,    13,    14,    15,    16,    17,    -1,    -1,
d1859 3
a1861 3
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,     6,     7,     8,    -1,    -1,
d1873 3
a1875 14
     230,     3,     4,     5,     6,     7,     8,    -1,    -1,    -1,
      -1,    -1,   242,   243,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
     221,    -1,   104,   105,    -1,    -1,   227,   228,   229,   230,
      -1,    -1,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
      -1,   123,   124,   125,   126,    -1,   128,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,   141,
d1883 1
a1883 2
      -1,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,   221,
      -1,    -1,    -1,    -1,    -1,   227,   228,   229,   230,    -1,
d1885 1
a1885 1
     242,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
d1893 3
a1895 2
      95,    96,    97,    98,    99,   100,   101,    -1,   221,   104,
     105,    -1,    -1,    -1,   227,   228,   229,   230,     5,     6,
d1897 1
a1897 1
     243,   244,    -1,    20,    21,    22,    23,    24,    25,    26,
d1905 11
d1917 2
a1918 25
      -1,    -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,    -1,
      -1,    -1,   227,   228,   229,   230,     5,     6,     7,     8,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,   100,   101,    -1,   221,   104,   105,    -1,    -1,    -1,
     227,   228,   229,   230,     3,     4,     5,     6,     7,     8,
      -1,    -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,    -1,    -1,    -1,
      -1,    -1,   221,    -1,    -1,   224,    -1,    -1,   227,   228,
     229,   230,    -1,    -1,   123,   124,   125,   126,    -1,    -1,
d1920 1
a1920 1
      -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1927 2
a1928 33
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,
       8,    -1,   221,    -1,    -1,    -1,    -1,    -1,   227,   228,
     229,   230,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,     5,     6,
       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,
       7,     8,    -1,   221,    -1,    -1,   224,    -1,    -1,   227,
     228,   229,   230,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,     5,
       6,     7,     8,    -1,   221,    -1,    -1,   224,    -1,    -1,
d1938 48
a1985 5
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
       6,     7,     8,    -1,   221,    -1,    -1,   224,    -1,    -1,
     227,   228,   229,   230,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
d1990 15
a2004 26
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
      -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,    -1,    -1,
      -1,   227,   228,   229,   230,     3,     4,     5,     6,     7,
       8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    -1,    95,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,    -1,    -1,
      -1,   227,   228,   229,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   123,   124,   125,   126,    -1,
     128,     3,     4,     5,     6,     7,     8,    -1,   136,   137,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,    -1,
d2006 1
d2008 1
a2008 2
      -1,   123,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   141
d2033 1
a2033 1
     306,    96,   251,   299,   314,   315,   243,   309,   149,   219,
d2111 1
a2111 1
/* Error token number */
a2114 1

d2142 1
d2149 4
a2152 40

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += fprintf (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += fprintf (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += fprintf (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += fprintf (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += fprintf (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

d2160 1
d2224 5
a2228 1
  YYUSE (yytype);
d2475 1
d2538 5
a2542 7
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
d2562 4
a2565 6
  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }
d2625 6
a2630 1
  YYUSE (yytype);
a2664 28

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
static YYSTYPE yyval_default;
# define YY_INITIAL_VALUE(Value) = Value
#endif
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

d2666 1
a2666 1
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);
d2669 1
a2669 2
YYLTYPE yylloc = yyloc_default;

d2709 1
a2709 1
  int yytoken = 0;
d2728 4
a2731 3
  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
d2741 14
d2756 1
a2756 1
/* Line 1570 of yacc.c  */
d2765 2
a2766 2
/* Line 1570 of yacc.c  */
#line 2845 "glsl_parser.cpp"
a2912 1
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
a2913 1
  YY_IGNORE_MAYBE_UNINITIALIZED_END
d5001 1
a5001 1
      ast_fully_specified_type *const type = (yyvsp[(1) - (3)].fully_specified_type);
d5004 1
a5004 5
      if (type->qualifier.flags.i != 0)
         _mesa_glsl_error(&(yylsp[(1) - (3)]), state,
			  "only precision qualifiers may be applied to "
			  "structure members");

d5014 1
a5014 1
#line 1690 "glsl_parser.yy"
d5023 1
a5023 1
#line 1695 "glsl_parser.yy"
d5032 1
a5032 1
#line 1703 "glsl_parser.yy"
d5042 1
a5042 1
#line 1709 "glsl_parser.yy"
d5052 1
a5052 1
#line 1719 "glsl_parser.yy"
d5060 1
a5060 1
#line 1723 "glsl_parser.yy"
d5068 1
a5068 1
#line 1730 "glsl_parser.yy"
d5079 1
a5079 1
#line 1737 "glsl_parser.yy"
d5087 1
a5087 1
#line 1749 "glsl_parser.yy"
d5093 1
a5093 1
#line 1764 "glsl_parser.yy"
d5103 1
a5103 1
#line 1770 "glsl_parser.yy"
d5111 1
a5111 1
#line 1774 "glsl_parser.yy"
d5122 1
a5122 1
#line 1783 "glsl_parser.yy"
d5128 1
a5128 1
#line 1789 "glsl_parser.yy"
d5138 1
a5138 1
#line 1795 "glsl_parser.yy"
d5148 1
a5148 1
#line 1804 "glsl_parser.yy"
d5162 1
a5162 1
#line 1814 "glsl_parser.yy"
d5175 1
a5175 1
#line 1826 "glsl_parser.yy"
d5185 1
a5185 1
#line 1832 "glsl_parser.yy"
d5195 1
a5195 1
#line 1841 "glsl_parser.yy"
d5205 1
a5205 1
#line 1850 "glsl_parser.yy"
d5214 1
a5214 1
#line 1855 "glsl_parser.yy"
d5223 1
a5223 1
#line 1863 "glsl_parser.yy"
d5231 1
a5231 1
#line 1867 "glsl_parser.yy"
d5246 1
a5246 1
#line 1885 "glsl_parser.yy"
d5255 1
a5255 1
#line 1893 "glsl_parser.yy"
d5264 1
a5264 1
#line 1898 "glsl_parser.yy"
d5273 1
a5273 1
#line 1906 "glsl_parser.yy"
d5282 1
a5282 1
#line 1911 "glsl_parser.yy"
d5291 1
a5291 1
#line 1919 "glsl_parser.yy"
d5303 1
a5303 1
#line 1927 "glsl_parser.yy"
d5312 1
a5312 1
#line 1935 "glsl_parser.yy"
d5324 1
a5324 1
#line 1943 "glsl_parser.yy"
d5333 1
a5333 1
#line 1951 "glsl_parser.yy"
d5345 1
a5345 1
#line 1959 "glsl_parser.yy"
d5354 1
a5354 1
#line 1967 "glsl_parser.yy"
d5365 1
a5365 1
#line 1974 "glsl_parser.yy"
d5376 1
a5376 1
#line 1981 "glsl_parser.yy"
d5387 1
a5387 1
#line 1997 "glsl_parser.yy"
d5395 1
a5395 1
#line 2004 "glsl_parser.yy"
d5404 1
a5404 1
#line 2009 "glsl_parser.yy"
d5413 1
a5413 1
#line 2018 "glsl_parser.yy"
d5423 1
a5423 1
#line 2024 "glsl_parser.yy"
d5433 1
a5433 1
#line 2030 "glsl_parser.yy"
d5443 1
a5443 1
#line 2036 "glsl_parser.yy"
d5453 1
a5453 1
#line 2042 "glsl_parser.yy"
d5463 1
a5463 1
#line 2050 "glsl_parser.yy"
d5469 1
a5469 1
#line 2051 "glsl_parser.yy"
d5475 1
a5475 1
#line 2052 "glsl_parser.yy"
d5481 1
a5481 1
#line 2053 "glsl_parser.yy"
d5487 1
a5487 1
#line 2058 "glsl_parser.yy"
d5501 1
a5501 1
#line 2072 "glsl_parser.yy"
d5509 1
a5509 1
#line 2076 "glsl_parser.yy"
d5521 1
a5521 1
#line 2087 "glsl_parser.yy"
d5619 1
a5619 1
#line 2184 "glsl_parser.yy"
d5628 1
a5628 1
#line 2189 "glsl_parser.yy"
d5637 1
a5637 1
#line 2194 "glsl_parser.yy"
d5646 1
a5646 1
#line 2202 "glsl_parser.yy"
d5655 1
a5655 1
#line 2207 "glsl_parser.yy"
d5664 1
a5664 1
#line 2212 "glsl_parser.yy"
d5673 1
a5673 1
#line 2217 "glsl_parser.yy"
d5685 1
a5685 1
#line 2228 "glsl_parser.yy"
d5694 1
a5694 1
#line 2233 "glsl_parser.yy"
d5703 1
a5703 1
#line 2241 "glsl_parser.yy"
d5728 1
a5728 1
#line 2265 "glsl_parser.yy"
d5738 1
a5738 1
#line 5823 "glsl_parser.cpp"
a5902 1
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
a5903 1
  YY_IGNORE_MAYBE_UNINITIALIZED_END
d5972 1
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 3.0.2.  */
d4 3
a6 3

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

d11 1
a11 1

d16 1
a16 1

d29 1
a29 1

d47 1
a47 1
#define YYBISON_VERSION "3.0.2"
d66 2
d70 1
a70 1

d73 2
a74 1
#line 1 "glsl_parser.yy" /* yacc.c:339  */
d121 2
a122 27
static bool match_layout_qualifier(const char *s1, const char *s2,
                                   _mesa_glsl_parse_state *state)
{
   /* From the GLSL 1.50 spec, section 4.3.8 (Layout Qualifiers):
    *
    *     "The tokens in any layout-qualifier-id-list ... are not case
    *     sensitive, unless explicitly noted otherwise."
    *
    * The text "unless explicitly noted otherwise" appears to be
    * vacuous--no desktop GLSL spec (up through GLSL 4.40) notes
    * otherwise.
    *
    * However, the GLSL ES 3.00 spec says, in section 4.3.8 (Layout
    * Qualifiers):
    *
    *     "As for other identifiers, they are case sensitive."
    *
    * So we need to do a case-sensitive or a case-insensitive match,
    * depending on whether we are compiling for GLSL ES.
    */
   if (state->es_shader)
      return strcmp(s1, s2);
   else
      return strcasecmp(s1, s2);
}

#line 145 "glsl_parser.cpp" /* yacc.c:339  */
d124 1
a124 1
# ifndef YY_NULLPTR
d126 1
a126 1
#   define YY_NULLPTR nullptr
d128 1
a128 1
#   define YY_NULLPTR 0
d144 1
a144 1
/* Debug traces.  */
d152 1
a152 1
/* Token type.  */
d155 222
a376 233
  enum yytokentype
  {
    ATTRIBUTE = 258,
    CONST_TOK = 259,
    BOOL_TOK = 260,
    FLOAT_TOK = 261,
    INT_TOK = 262,
    UINT_TOK = 263,
    BREAK = 264,
    CONTINUE = 265,
    DO = 266,
    ELSE = 267,
    FOR = 268,
    IF = 269,
    DISCARD = 270,
    RETURN = 271,
    SWITCH = 272,
    CASE = 273,
    DEFAULT = 274,
    BVEC2 = 275,
    BVEC3 = 276,
    BVEC4 = 277,
    IVEC2 = 278,
    IVEC3 = 279,
    IVEC4 = 280,
    UVEC2 = 281,
    UVEC3 = 282,
    UVEC4 = 283,
    VEC2 = 284,
    VEC3 = 285,
    VEC4 = 286,
    CENTROID = 287,
    IN_TOK = 288,
    OUT_TOK = 289,
    INOUT_TOK = 290,
    UNIFORM = 291,
    VARYING = 292,
    NOPERSPECTIVE = 293,
    FLAT = 294,
    SMOOTH = 295,
    MAT2X2 = 296,
    MAT2X3 = 297,
    MAT2X4 = 298,
    MAT3X2 = 299,
    MAT3X3 = 300,
    MAT3X4 = 301,
    MAT4X2 = 302,
    MAT4X3 = 303,
    MAT4X4 = 304,
    SAMPLER1D = 305,
    SAMPLER2D = 306,
    SAMPLER3D = 307,
    SAMPLERCUBE = 308,
    SAMPLER1DSHADOW = 309,
    SAMPLER2DSHADOW = 310,
    SAMPLERCUBESHADOW = 311,
    SAMPLER1DARRAY = 312,
    SAMPLER2DARRAY = 313,
    SAMPLER1DARRAYSHADOW = 314,
    SAMPLER2DARRAYSHADOW = 315,
    SAMPLERCUBEARRAY = 316,
    SAMPLERCUBEARRAYSHADOW = 317,
    ISAMPLER1D = 318,
    ISAMPLER2D = 319,
    ISAMPLER3D = 320,
    ISAMPLERCUBE = 321,
    ISAMPLER1DARRAY = 322,
    ISAMPLER2DARRAY = 323,
    ISAMPLERCUBEARRAY = 324,
    USAMPLER1D = 325,
    USAMPLER2D = 326,
    USAMPLER3D = 327,
    USAMPLERCUBE = 328,
    USAMPLER1DARRAY = 329,
    USAMPLER2DARRAY = 330,
    USAMPLERCUBEARRAY = 331,
    SAMPLER2DRECT = 332,
    ISAMPLER2DRECT = 333,
    USAMPLER2DRECT = 334,
    SAMPLER2DRECTSHADOW = 335,
    SAMPLERBUFFER = 336,
    ISAMPLERBUFFER = 337,
    USAMPLERBUFFER = 338,
    SAMPLER2DMS = 339,
    ISAMPLER2DMS = 340,
    USAMPLER2DMS = 341,
    SAMPLER2DMSARRAY = 342,
    ISAMPLER2DMSARRAY = 343,
    USAMPLER2DMSARRAY = 344,
    SAMPLEREXTERNALOES = 345,
    IMAGE1D = 346,
    IMAGE2D = 347,
    IMAGE3D = 348,
    IMAGE2DRECT = 349,
    IMAGECUBE = 350,
    IMAGEBUFFER = 351,
    IMAGE1DARRAY = 352,
    IMAGE2DARRAY = 353,
    IMAGECUBEARRAY = 354,
    IMAGE2DMS = 355,
    IMAGE2DMSARRAY = 356,
    IIMAGE1D = 357,
    IIMAGE2D = 358,
    IIMAGE3D = 359,
    IIMAGE2DRECT = 360,
    IIMAGECUBE = 361,
    IIMAGEBUFFER = 362,
    IIMAGE1DARRAY = 363,
    IIMAGE2DARRAY = 364,
    IIMAGECUBEARRAY = 365,
    IIMAGE2DMS = 366,
    IIMAGE2DMSARRAY = 367,
    UIMAGE1D = 368,
    UIMAGE2D = 369,
    UIMAGE3D = 370,
    UIMAGE2DRECT = 371,
    UIMAGECUBE = 372,
    UIMAGEBUFFER = 373,
    UIMAGE1DARRAY = 374,
    UIMAGE2DARRAY = 375,
    UIMAGECUBEARRAY = 376,
    UIMAGE2DMS = 377,
    UIMAGE2DMSARRAY = 378,
    IMAGE1DSHADOW = 379,
    IMAGE2DSHADOW = 380,
    IMAGE1DARRAYSHADOW = 381,
    IMAGE2DARRAYSHADOW = 382,
    COHERENT = 383,
    VOLATILE = 384,
    RESTRICT = 385,
    READONLY = 386,
    WRITEONLY = 387,
    ATOMIC_UINT = 388,
    STRUCT = 389,
    VOID_TOK = 390,
    WHILE = 391,
    IDENTIFIER = 392,
    TYPE_IDENTIFIER = 393,
    NEW_IDENTIFIER = 394,
    FLOATCONSTANT = 395,
    INTCONSTANT = 396,
    UINTCONSTANT = 397,
    BOOLCONSTANT = 398,
    FIELD_SELECTION = 399,
    LEFT_OP = 400,
    RIGHT_OP = 401,
    INC_OP = 402,
    DEC_OP = 403,
    LE_OP = 404,
    GE_OP = 405,
    EQ_OP = 406,
    NE_OP = 407,
    AND_OP = 408,
    OR_OP = 409,
    XOR_OP = 410,
    MUL_ASSIGN = 411,
    DIV_ASSIGN = 412,
    ADD_ASSIGN = 413,
    MOD_ASSIGN = 414,
    LEFT_ASSIGN = 415,
    RIGHT_ASSIGN = 416,
    AND_ASSIGN = 417,
    XOR_ASSIGN = 418,
    OR_ASSIGN = 419,
    SUB_ASSIGN = 420,
    INVARIANT = 421,
    LOWP = 422,
    MEDIUMP = 423,
    HIGHP = 424,
    SUPERP = 425,
    PRECISION = 426,
    VERSION_TOK = 427,
    EXTENSION = 428,
    LINE = 429,
    COLON = 430,
    EOL = 431,
    INTERFACE = 432,
    OUTPUT = 433,
    PRAGMA_DEBUG_ON = 434,
    PRAGMA_DEBUG_OFF = 435,
    PRAGMA_OPTIMIZE_ON = 436,
    PRAGMA_OPTIMIZE_OFF = 437,
    PRAGMA_INVARIANT_ALL = 438,
    LAYOUT_TOK = 439,
    ASM = 440,
    CLASS = 441,
    UNION = 442,
    ENUM = 443,
    TYPEDEF = 444,
    TEMPLATE = 445,
    THIS = 446,
    PACKED_TOK = 447,
    GOTO = 448,
    INLINE_TOK = 449,
    NOINLINE = 450,
    PUBLIC_TOK = 451,
    STATIC = 452,
    EXTERN = 453,
    EXTERNAL = 454,
    LONG_TOK = 455,
    SHORT_TOK = 456,
    DOUBLE_TOK = 457,
    HALF = 458,
    FIXED_TOK = 459,
    UNSIGNED = 460,
    INPUT_TOK = 461,
    OUPTUT = 462,
    HVEC2 = 463,
    HVEC3 = 464,
    HVEC4 = 465,
    DVEC2 = 466,
    DVEC3 = 467,
    DVEC4 = 468,
    FVEC2 = 469,
    FVEC3 = 470,
    FVEC4 = 471,
    SAMPLER3DRECT = 472,
    SIZEOF = 473,
    CAST = 474,
    NAMESPACE = 475,
    USING = 476,
    RESOURCE = 477,
    PATCH = 478,
    SAMPLE = 479,
    SUBROUTINE = 480,
    ERROR_TOK = 481,
    COMMON = 482,
    PARTITION = 483,
    ACTIVE = 484,
    FILTER = 485,
    ROW_MAJOR = 486,
    THEN = 487
  };
d379 1
a379 1
/* Value type.  */
d381 1
a381 2
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
d383 2
a384 1
#line 91 "glsl_parser.yy" /* yacc.c:355  */
a393 1
   ast_array_specifier *array_specifier;
d420 4
a423 2
#line 455 "glsl_parser.cpp" /* yacc.c:355  */
};
d425 1
a428 1
/* Location type.  */
d430 1
a430 2
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
d436 2
a437 1
};
d443 8
a450 1

d452 4
d461 2
a462 1
#line 483 "glsl_parser.cpp" /* yacc.c:358  */
d476 3
d480 1
a480 1
typedef signed char yytype_int8;
d500 2
a501 1
# elif ! defined YYSIZE_T
d523 5
a527 24
#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
d538 9
a546 8
#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
d548 3
a550 1
# define YY_INITIAL_VALUE(Value) Value
d552 3
a554 6
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
a556 1

d574 2
a575 1
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
d587 2
a588 2
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
d604 1
a604 1
             && (defined YYFREE || defined free)))
d612 2
a613 1
#   if ! defined malloc && ! defined EXIT_SUCCESS
d619 2
a620 1
#   if ! defined free && ! defined EXIT_SUCCESS
d630 2
a631 2
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
d657 10
a666 10
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)
d685 1
a685 1
      while (0)
d693 1
a693 1
#define YYLAST   5407
d696 1
a696 1
#define YYNTOKENS  257
d698 1
a698 1
#define YYNNTS  108
d700 3
a702 3
#define YYNRULES  380
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  532
d704 1
a704 2
/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
d706 1
a706 1
#define YYMAXUTOK   487
d708 1
a708 1
#define YYTRANSLATE(YYX)                                                \
d711 2
a712 3
/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint16 yytranslate[] =
d717 4
a720 4
       2,     2,     2,   241,     2,     2,     2,   245,   248,     2,
     233,   234,   243,   239,   238,   240,   237,   244,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   252,   254,
     246,   253,   247,   251,     2,     2,     2,     2,     2,     2,
d723 1
a723 1
       2,   235,     2,   236,   249,     2,     2,     2,     2,     2,
d726 1
a726 1
       2,     2,     2,   255,   250,   256,   242,     2,     2,     2,
d761 1
a761 2
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232
d765 143
a907 1
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
d910 35
a944 39
       0,   295,   295,   294,   306,   308,   315,   325,   326,   327,
     328,   329,   342,   344,   348,   349,   350,   354,   363,   371,
     382,   383,   387,   394,   401,   408,   415,   422,   429,   430,
     436,   440,   447,   453,   462,   466,   470,   471,   480,   481,
     485,   486,   490,   496,   508,   512,   518,   526,   537,   538,
     542,   543,   547,   553,   565,   577,   578,   584,   590,   600,
     601,   602,   603,   607,   608,   614,   620,   629,   630,   636,
     645,   646,   652,   661,   662,   668,   674,   680,   689,   690,
     696,   705,   706,   715,   716,   725,   726,   735,   736,   745,
     746,   755,   756,   765,   766,   775,   776,   785,   786,   787,
     788,   789,   790,   791,   792,   793,   794,   795,   799,   803,
     819,   823,   828,   832,   837,   844,   848,   849,   853,   858,
     866,   880,   890,   904,   909,   923,   926,   934,   946,   959,
     964,   969,   978,   982,   983,   993,  1003,  1013,  1027,  1034,
    1044,  1054,  1064,  1074,  1089,  1096,  1107,  1114,  1115,  1125,
    1126,  1130,  1315,  1438,  1464,  1469,  1477,  1482,  1487,  1496,
    1501,  1502,  1503,  1504,  1505,  1523,  1536,  1564,  1587,  1602,
    1622,  1636,  1641,  1649,  1654,  1659,  1664,  1669,  1674,  1679,
    1684,  1689,  1695,  1700,  1708,  1714,  1720,  1734,  1749,  1750,
    1758,  1764,  1770,  1779,  1780,  1781,  1782,  1783,  1784,  1785,
    1786,  1787,  1788,  1789,  1790,  1791,  1792,  1793,  1794,  1795,
    1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,  1805,
    1806,  1807,  1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,
    1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,  1824,  1825,
    1826,  1827,  1828,  1829,  1830,  1831,  1832,  1833,  1834,  1835,
    1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,  1844,  1845,
    1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,  1854,  1855,
    1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,  1865,
    1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,  1875,
    1876,  1877,  1878,  1879,  1883,  1888,  1893,  1901,  1908,  1917,
    1922,  1930,  1949,  1954,  1962,  1968,  1977,  1978,  1982,  1989,
    1996,  2003,  2009,  2010,  2014,  2015,  2016,  2017,  2018,  2019,
    2023,  2030,  2029,  2043,  2044,  2048,  2054,  2063,  2073,  2085,
    2091,  2100,  2109,  2114,  2122,  2126,  2144,  2152,  2157,  2165,
    2170,  2178,  2186,  2194,  2202,  2210,  2218,  2226,  2233,  2240,
    2250,  2251,  2255,  2257,  2263,  2268,  2277,  2283,  2289,  2295,
    2301,  2310,  2311,  2312,  2313,  2317,  2331,  2335,  2346,  2443,
    2448,  2453,  2462,  2466,  2472,  2481,  2486,  2494,  2518,  2526,
    2534
d971 25
a995 28
  "USAMPLER2DMSARRAY", "SAMPLEREXTERNALOES", "IMAGE1D", "IMAGE2D",
  "IMAGE3D", "IMAGE2DRECT", "IMAGECUBE", "IMAGEBUFFER", "IMAGE1DARRAY",
  "IMAGE2DARRAY", "IMAGECUBEARRAY", "IMAGE2DMS", "IMAGE2DMSARRAY",
  "IIMAGE1D", "IIMAGE2D", "IIMAGE3D", "IIMAGE2DRECT", "IIMAGECUBE",
  "IIMAGEBUFFER", "IIMAGE1DARRAY", "IIMAGE2DARRAY", "IIMAGECUBEARRAY",
  "IIMAGE2DMS", "IIMAGE2DMSARRAY", "UIMAGE1D", "UIMAGE2D", "UIMAGE3D",
  "UIMAGE2DRECT", "UIMAGECUBE", "UIMAGEBUFFER", "UIMAGE1DARRAY",
  "UIMAGE2DARRAY", "UIMAGECUBEARRAY", "UIMAGE2DMS", "UIMAGE2DMSARRAY",
  "IMAGE1DSHADOW", "IMAGE2DSHADOW", "IMAGE1DARRAYSHADOW",
  "IMAGE2DARRAYSHADOW", "COHERENT", "VOLATILE", "RESTRICT", "READONLY",
  "WRITEONLY", "ATOMIC_UINT", "STRUCT", "VOID_TOK", "WHILE", "IDENTIFIER",
  "TYPE_IDENTIFIER", "NEW_IDENTIFIER", "FLOATCONSTANT", "INTCONSTANT",
  "UINTCONSTANT", "BOOLCONSTANT", "FIELD_SELECTION", "LEFT_OP", "RIGHT_OP",
  "INC_OP", "DEC_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP",
  "OR_OP", "XOR_OP", "MUL_ASSIGN", "DIV_ASSIGN", "ADD_ASSIGN",
  "MOD_ASSIGN", "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN",
  "OR_ASSIGN", "SUB_ASSIGN", "INVARIANT", "LOWP", "MEDIUMP", "HIGHP",
  "SUPERP", "PRECISION", "VERSION_TOK", "EXTENSION", "LINE", "COLON",
  "EOL", "INTERFACE", "OUTPUT", "PRAGMA_DEBUG_ON", "PRAGMA_DEBUG_OFF",
  "PRAGMA_OPTIMIZE_ON", "PRAGMA_OPTIMIZE_OFF", "PRAGMA_INVARIANT_ALL",
  "LAYOUT_TOK", "ASM", "CLASS", "UNION", "ENUM", "TYPEDEF", "TEMPLATE",
  "THIS", "PACKED_TOK", "GOTO", "INLINE_TOK", "NOINLINE", "PUBLIC_TOK",
  "STATIC", "EXTERN", "EXTERNAL", "LONG_TOK", "SHORT_TOK", "DOUBLE_TOK",
  "HALF", "FIXED_TOK", "UNSIGNED", "INPUT_TOK", "OUPTUT", "HVEC2", "HVEC3",
  "HVEC4", "DVEC2", "DVEC3", "DVEC4", "FVEC2", "FVEC3", "FVEC4",
  "SAMPLER3DRECT", "SIZEOF", "CAST", "NAMESPACE", "USING", "RESOURCE",
  "PATCH", "SAMPLE", "SUBROUTINE", "ERROR_TOK", "COMMON", "PARTITION",
  "ACTIVE", "FILTER", "ROW_MAJOR", "THEN", "'('", "')'", "'['", "']'",
d1023 1
a1023 1
  "array_specifier", "type_specifier", "type_specifier_nonarray",
d1037 1
a1037 1
  "member_list", "member_declaration", "layout_defaults", YY_NULLPTR
d1042 2
a1043 2
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
d1068 3
a1070 4
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    40,    41,    91,    93,    46,    44,    43,
      45,    33,   126,    42,    47,    37,    60,    62,    38,    94,
     124,    63,    58,    61,    59,   123,   125
d1074 39
a1112 1
#define YYPACT_NINF -393
d1114 2
a1115 11
#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-393)))

#define YYTABLE_NINF -372

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
d1117 35
a1151 54
     -85,   -88,    33,  -393,   -94,  -393,  -133,  -393,  -393,  -393,
    -393,   -80,   -75,  4754,  -393,  -393,   -67,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,    12,    19,    36,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -115,  -393,  -393,   261,  -393,  -393,  -393,    41,
     -64,   -48,    24,    29,    37,   -51,  -393,  -393,  4754,  -393,
    -132,   -41,   -23,     1,  -147,  -393,    86,    35,  5064,  5269,
    5064,  5064,  -393,    -6,  -393,  5064,  -393,  -393,  -393,  -393,
    -393,    88,  -393,   -75,  4943,   -24,  -393,  -393,  -393,  -393,
    -393,  5064,  -393,  5064,  -393,  5269,  -393,  -393,  -393,  -393,
    -393,   -83,  -393,  -393,   517,  -393,  -393,    17,    17,  -393,
    -393,  -393,  -393,  5269,    17,    17,   -75,  -393,    10,    27,
    -204,    38,  -125,  -121,  -113,  -393,  -393,  -393,  -393,  -393,
    -393,  3639,    15,  -393,     2,    69,   -75,  1265,  -393,  4943,
      22,  -393,  -393,    13,  -148,  -393,  -393,    23,    25,  1999,
      45,    50,    31,  3176,    53,    54,  -393,  -393,  -393,  -393,
    -393,  4085,  4085,  4085,  -393,  -393,  -393,  -393,  -393,    34,
    -393,    56,  -393,  -101,  -393,  -393,  -393,    57,  -145,  4308,
      63,   181,  4085,    -3,   -96,    42,  -108,    66,    55,    60,
      52,   151,   152,  -126,  -393,  -393,  -140,  -393,    59,  5083,
      77,  -393,  -393,  -393,  -393,   771,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,   -75,  -393,  -393,  -187,  2953,
    -175,  -393,  -393,  -393,  -393,  -393,  -393,  -393,    75,  -393,
    3862,  4943,  -393,    -6,  -138,  -393,  -393,  -393,  1502,  -393,
      79,  -393,   -83,  -393,  -393,   176,  2492,  4085,  -393,  -393,
    -127,  4085,  3416,  -393,  -393,  -117,  -393,  1999,  -393,  -393,
    4085,    86,  -393,  -393,  4085,    80,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  4085,
    -393,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,
    4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,
    4085,  4085,  -393,  -393,  -393,    -6,  2953,  -159,  2953,  -393,
    -393,  2953,  -393,  -393,    81,   -75,    62,  4943,    15,   -75,
    -393,  -393,  -393,  -393,  -393,  -393,    83,  -393,  -393,  3416,
     -89,  -393,   -58,    82,   -75,    85,  -393,  1025,    90,    82,
    -393,    89,  -393,    87,   -40,  4531,  -393,  -393,  -393,  -393,
    -393,    -3,    -3,   -96,   -96,    42,    42,    42,    42,  -108,
    -108,    66,    55,    60,    52,   151,   152,  -173,  -393,    15,
    -393,  2953,  -393,  -161,  -393,  -393,  -112,   185,  -393,  -393,
    4085,  -393,    73,    94,  1999,    76,    95,  2252,  -393,  -393,
    -393,  -393,  -393,  4085,    96,  -393,  4085,  -393,  2730,  -393,
    -393,    -6,    93,   -39,  4085,  2252,   321,  -393,   -10,  -393,
    2953,  -393,  -393,  -393,  -393,  -393,  -393,  -393,    15,  -393,
      98,    82,  -393,  1999,  4085,    97,  -393,  -393,  1746,  1999,
      -8,  -393,  -393,  -393,  -139,  -393,  -393,  -393,  -393,  -393,
    1999,  -393
d1154 3
a1156 3
  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
d1160 15
a1174 19
       5,     0,     0,     0,    13,     6,     0,   174,   173,   197,
     194,   195,   196,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   198,   199,   200,   171,   176,   177,   178,   175,
     158,   157,   156,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   222,   223,   225,   226,   228,   229,
     230,   231,   232,   234,   235,   236,   237,   239,   240,   241,
     242,   244,   245,   246,   248,   249,   250,   251,   253,   221,
     238,   247,   227,   233,   243,   252,   254,   255,   256,   257,
     258,   259,   224,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   179,   180,   181,   182,
     183,   293,     0,   193,   192,   159,   296,   295,   294,     0,
       0,     0,     0,     0,     0,     0,   172,   363,     3,   362,
       0,     0,   117,   125,     0,   133,   138,   163,   162,     0,
     160,   161,   144,   188,   190,   164,   191,    18,   361,   114,
     366,     0,   364,     0,     0,     0,   176,   177,   178,    20,
      21,   159,   143,   163,   165,     0,     7,     8,     9,    10,
      11,     0,    19,   111,     0,   365,   115,   125,   125,   129,
d1176 49
a1224 33
     139,     0,   176,   177,   178,   167,   367,   166,   145,   168,
     169,     0,   189,   170,     0,     0,     0,     0,   299,     0,
       0,   155,   154,   151,     0,   147,   153,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,    23,    24,    26,
      47,     0,     0,     0,    59,    60,    61,    62,   329,   321,
     325,    22,    28,    55,    30,    35,    36,     0,     0,    41,
       0,    63,     0,    67,    70,    73,    78,    81,    83,    85,
      87,    89,    91,    93,    95,   108,     0,   311,     0,   163,
     144,   314,   327,   313,   312,     0,   315,   316,   317,   318,
     319,   119,   126,   123,   124,   132,   127,   128,   134,     0,
     140,   120,   379,   380,   378,   184,    63,   110,     0,    45,
       0,     0,    17,   304,     0,   302,   298,   300,     0,   113,
       0,   146,     0,   357,   356,     0,     0,     0,   360,   358,
       0,     0,     0,    56,    57,     0,   320,     0,    32,    33,
       0,     0,    39,    38,     0,   193,    42,    44,    98,    99,
     101,   100,   103,   104,   105,   106,   107,   102,    97,     0,
      58,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,   326,   328,   121,     0,   135,     0,   306,
     142,     0,   185,   186,     0,     0,     0,   375,   305,     0,
     301,   297,   149,   150,   152,   148,     0,   351,   350,   353,
       0,   359,     0,   334,     0,     0,    27,     0,     0,    34,
      31,     0,    37,     0,     0,    51,    43,    96,    64,    65,
      66,    68,    69,    71,    72,    76,    77,    74,    75,    79,
      80,    82,    84,    86,    88,    90,    92,     0,   109,   122,
     137,     0,   309,     0,   141,   187,     0,   372,   376,   303,
       0,   352,     0,     0,     0,     0,     0,     0,   322,    29,
      54,    49,    48,     0,   193,    52,     0,   136,     0,   307,
     377,   373,     0,     0,   354,     0,   333,   331,     0,   336,
       0,   324,   347,   323,    53,    94,   308,   310,   374,   368,
       0,   355,   349,     0,     0,     0,   337,   341,     0,   345,
       0,   335,   348,   332,     0,   340,   343,   342,   344,   338,
     346,   339
d1227 4
a1230 2
  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
d1232 50
a1281 11
    -393,  -393,  -393,  -393,  -393,  -393,     0,  -393,  -393,  -119,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,   -14,  -393,  -141,  -124,  -111,  -110,
     -49,   -35,   -33,   -32,   -34,   -12,  -393,  -196,  -239,  -393,
    -240,    61,     6,     7,  -393,  -393,  -393,  -393,   159,   -27,
    -393,  -393,  -393,  -393,  -168,   -11,  -393,  -393,    44,  -393,
    -393,   -77,  -393,  -393,  -203,   -13,  -393,  -393,    58,  -393,
     149,  -210,   -26,   -29,  -369,  -393,    46,  -238,  -392,  -393,
    -393,  -109,   233,    40,    48,  -393,  -393,   -31,  -393,  -393,
    -123,  -393,  -135,  -393,  -393,  -393,  -393,  -393,  -393,   248,
    -393,  -393,  -142,  -393,  -393,    -5,  -393,  -393
d1284 2
a1285 2
  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
d1287 11
a1297 11
      -1,     2,    13,     3,   147,     6,   323,    14,   148,   261,
     262,   263,   428,   264,   265,   266,   267,   268,   269,   270,
     432,   433,   434,   435,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   369,
     286,   318,   287,   288,   151,   152,   153,   303,   202,   203,
     204,   304,   154,   155,   156,   183,   234,   414,   235,   236,
     158,   159,   160,   161,   222,   319,   163,   164,   165,   166,
     227,   228,   324,   325,   400,   463,   291,   292,   293,   294,
     347,   502,   503,   295,   296,   297,   497,   425,   298,   499,
     517,   518,   519,   520,   299,   419,   472,   473,   300,   167,
     168,   169,   170,   171,   492,   406,   407,   172
d1300 4
a1303 3
  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
d1306 59
a1364 45
     162,   335,   157,   340,    11,   198,   226,   310,   514,   515,
     514,   515,    16,   345,  -369,   216,   182,   327,  -370,   149,
     150,   198,     7,     8,     9,   317,  -371,   460,   389,   462,
     356,   221,   464,     5,   199,   200,   201,   211,    17,    18,
      12,   378,   379,     7,     8,     9,   348,   349,   221,   309,
     199,   200,   201,     4,     7,     8,     9,   394,   184,   226,
     320,   226,     7,     8,     9,   391,   396,    35,   212,   213,
     399,   214,    39,    40,    41,    42,   320,   488,   401,   486,
     215,   217,    10,   219,   220,   501,   331,     1,   223,   353,
     332,   206,   487,   354,   461,   489,    15,   420,   391,   391,
     409,   422,   423,   501,   184,   397,   215,   207,   173,   231,
     429,   391,   186,   531,   392,   436,   410,   426,   327,   507,
     408,   391,   193,   194,   317,   390,   409,   421,   187,   312,
     437,   521,   175,   313,   350,   162,   351,   157,   380,   381,
     174,   314,   490,   374,   375,   474,   218,   216,   232,   391,
     457,  -369,   458,   405,   149,   150,   210,   399,  -370,   399,
     226,   162,   399,   126,   127,   128,   129,   130,   136,   137,
     138,   302,   230,   225,   424,  -371,   475,   306,   307,   423,
     391,   290,   191,   289,   136,   137,   138,   376,   377,   394,
     305,   233,   459,   196,   482,   510,   485,   185,   483,   391,
     188,   181,   136,   137,   138,   189,   308,   316,   136,   137,
     138,   205,   215,   190,   162,   197,   162,   382,   383,   145,
     412,   413,   399,   208,     8,   209,   290,   224,   289,   221,
     493,   229,   431,   441,   442,  -116,   496,   343,   344,   405,
     371,   372,   373,   -20,   504,   322,   516,   505,   529,   399,
     320,   424,   443,   444,   511,   205,   205,   321,   370,   146,
     -21,   399,   205,   205,    17,    18,   330,   445,   446,   447,
     448,   311,   449,   450,   524,   523,   329,   333,   336,   334,
     526,   528,   290,   337,   289,   338,   341,   342,   508,   -46,
     346,   352,   528,    35,   176,   177,   357,   178,    39,    40,
      41,    42,   386,   384,   387,   395,   316,   388,   162,   385,
     -45,   402,   416,   193,   -40,   162,   470,   465,   467,   477,
     391,   481,   480,   290,   491,   289,   479,   494,   495,   290,
     -50,   498,   233,   513,   290,   451,   289,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   509,   500,   525,
     452,   430,   522,   453,   455,   454,   301,   438,   439,   440,
     316,   316,   316,   316,   316,   316,   316,   316,   316,   316,
     316,   316,   316,   316,   316,   316,   415,   456,   328,   466,
     469,   404,   417,   195,   418,   530,   512,   427,   471,   126,
     127,   128,   129,   130,   162,   527,   192,     0,   179,     0,
     180,     0,   468,     0,     0,     0,   290,     0,     0,     0,
       0,     0,     0,     0,   290,     0,   289,     0,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   181,   136,   137,
     138,     0,     0,     0,   368,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   145,     0,     0,     0,     0,
d1366 3
a1368 1
       0,   290,     0,   289,   290,     0,   289,     0,     0,     0,
a1369 1
       0,     0,   290,     0,   289,   146,     0,     0,     0,     0,
a1370 17
     290,     0,   289,     0,     0,   290,   290,   289,   289,     0,
       0,     0,     0,     0,     0,     0,     0,   290,     0,   289,
      17,    18,    19,    20,    21,    22,   237,   238,   239,     0,
     240,   241,   242,   243,   244,     0,     0,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,     0,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,     0,     0,     0,     0,   126,   127,   128,   129,   130,
     131,   132,   133,   245,   179,   134,   180,   246,   247,   248,
     249,   250,     0,     0,   251,   252,     0,     0,     0,     0,
a1371 1
       0,     0,     0,   135,   136,   137,   138,     0,   139,     0,
a1372 1
       0,   145,     0,     0,     0,     0,     0,     0,     0,     0,
d1376 18
a1393 33
       0,   146,     0,     0,     0,     0,     0,     0,     0,     0,
     253,     0,     0,     0,     0,     0,   254,   255,   256,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   258,   259,   260,    17,    18,    19,    20,    21,    22,
     237,   238,   239,     0,   240,   241,   242,   243,   244,     0,
       0,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,     0,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,     0,     0,     0,     0,   126,
     127,   128,   129,   130,   131,   132,   133,   245,   179,   134,
     180,   246,   247,   248,   249,   250,     0,     0,   251,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   135,   136,   137,
     138,     0,   139,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   145,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   146,     0,     0,     0,     0,
       0,     0,     0,     0,   253,     0,     0,     0,     0,     0,
     254,   255,   256,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   258,   259,   393,    17,    18,
      19,    20,    21,    22,   237,   238,   239,     0,   240,   241,
     242,   243,   244,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
       0,    38,    39,    40,    41,    42,    43,    44,    45,    46,
d1398 16
a1413 10
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,     0,
       0,     0,     0,   126,   127,   128,   129,   130,   131,   132,
     133,   245,   179,   134,   180,   246,   247,   248,   249,   250,
       0,     0,   251,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   135,   136,   137,   138,     0,   139,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   145,
d1415 5
a1419 9
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   146,
       0,     0,     0,     0,     0,     0,     0,     0,   253,     0,
       0,     0,     0,     0,   254,   255,   256,   257,    17,    18,
      19,    20,    21,    22,     0,     0,     0,     0,     0,   258,
     259,   478,     0,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,   176,   177,
       0,   178,    39,    40,    41,    42,    43,    44,    45,    46,
d1424 2
a1425 34
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,     0,
       0,     0,     0,   126,   127,   128,   129,   130,   131,   132,
     133,     0,     0,   134,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   181,   136,   137,   138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   145,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   146,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    17,    18,    19,    20,    21,
      22,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   326,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,   176,   177,     0,   178,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
     126,   127,   128,   129,   130,   131,   132,   133,     0,     0,
     134,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   181,   136,
     137,   138,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,     0,     0,     0,
d1427 11
d1439 16
a1455 1
       0,     0,     0,     0,     0,     0,   146,     0,     0,     0,
a1456 16
       0,     0,     0,     0,     0,     0,     0,     0,     0,    17,
      18,    19,    20,    21,    22,   237,   238,   239,   411,   240,
     241,   242,   243,   244,   514,   515,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,     0,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,   126,   127,   128,   129,   130,   131,
     132,   133,   245,   179,   134,   180,   246,   247,   248,   249,
     250,     0,     0,   251,   252,     0,     0,     0,     0,     0,
a1457 1
       0,     0,   135,   136,   137,   138,     0,   139,     0,     0,
a1458 1
     145,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d1462 2
a1463 2
     146,     0,     0,     0,     0,     0,     0,     0,     0,   253,
       0,     0,     0,     0,     0,   254,   255,   256,   257,     0,
d1465 2
a1466 2
     258,   259,    17,    18,    19,    20,    21,    22,   237,   238,
     239,     0,   240,   241,   242,   243,   244,     0,     0,    23,
d1474 2
a1475 6
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,     0,     0,     0,     0,   126,   127,   128,
     129,   130,   131,   132,   133,   245,   179,   134,   180,   246,
     247,   248,   249,   250,     0,     0,   251,   252,     0,     0,
d1477 1
a1477 3
       0,     0,     0,     0,     0,   135,   136,   137,   138,     0,
     139,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   145,     0,     0,     0,     0,     0,     0,
d1479 1
a1481 22
       0,     0,     0,   146,     0,     0,     0,     0,     0,     0,
       0,     0,   253,     0,     0,     0,     0,     0,   254,   255,
     256,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   258,   259,    17,    18,    19,    20,    21,
      22,   237,   238,   239,     0,   240,   241,   242,   243,   244,
       0,     0,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,     0,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
     126,   127,   128,   129,   130,   131,   132,   133,   245,   179,
     134,   180,   246,   247,   248,   249,   250,     0,     0,   251,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   135,   136,
     137,   138,     0,   139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,     0,     0,     0,
a1484 21
       0,     0,     0,     0,     0,     0,   146,     0,     0,     0,
       0,     0,     0,     0,     0,   253,     0,     0,     0,     0,
       0,   254,   255,   256,   257,    17,    18,    19,    20,    21,
      22,     0,     0,     0,     0,     0,   258,   194,     0,     0,
       0,     0,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,     0,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
     126,   127,   128,   129,   130,   131,   132,   133,     0,   179,
     134,   180,   246,   247,   248,   249,   250,     0,     0,   251,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   135,   136,
     137,   138,     0,   139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,     0,     0,     0,
d1487 1
d1489 2
a1490 4
       0,     0,     0,     0,     0,     0,   146,     0,     0,     0,
       0,     0,     0,     0,     0,   253,     0,     0,     0,     0,
       0,   254,   255,   256,   257,    19,    20,    21,    22,     0,
       0,     0,     0,     0,     0,     0,   258,     0,     0,     0,
d1492 2
a1493 2
      33,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,    51,
d1498 83
a1580 6
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,   133,     0,   179,   134,   180,
     246,   247,   248,   249,   250,     0,     0,   251,   252,     0,
d1582 1
d1589 21
d1611 3
a1613 3
      21,    22,     0,   253,     0,     0,     0,     0,     0,   254,
     255,   256,   257,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,   398,   506,     0,     0,     0,
d1619 29
a1647 87
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,   133,     0,
     179,   134,   180,   246,   247,   248,   249,   250,     0,     0,
     251,   252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    19,    20,    21,    22,     0,   253,     0,     0,     0,
       0,     0,   254,   255,   256,   257,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   398,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,   133,     0,   179,   134,   180,   246,   247,   248,   249,
     250,     0,     0,   251,   252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   253,
       0,     0,     0,     0,     0,   254,   255,   256,   257,    17,
      18,    19,    20,    21,    22,     0,     0,     0,     0,     0,
     339,     0,     0,     0,     0,     0,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,   176,
     177,     0,   178,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,   126,   127,   128,   129,   130,   131,
     132,   133,     0,   179,   134,   180,   246,   247,   248,   249,
     250,     0,     0,   251,   252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   181,   136,   137,   138,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     145,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     146,     0,     0,     0,    19,    20,    21,    22,     0,   253,
       0,     0,     0,     0,     0,   254,   255,   256,   257,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,   133,     0,   179,   134,   180,   246,
     247,   248,   249,   250,     0,     0,   251,   252,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    19,    20,    21,
      22,     0,   253,     0,     0,   315,     0,     0,   254,   255,
     256,   257,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,    49,
d1652 6
a1657 38
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,   133,     0,   179,
     134,   180,   246,   247,   248,   249,   250,     0,     0,   251,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      19,    20,    21,    22,     0,   253,     0,     0,   403,     0,
       0,   254,   255,   256,   257,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
     133,     0,   179,   134,   180,   246,   247,   248,   249,   250,
       0,     0,   251,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    19,    20,    21,    22,     0,   253,     0,
       0,     0,     0,     0,   254,   255,   256,   257,    23,    24,
d1659 1
a1659 1
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
d1665 1
a1665 78
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,   355,     0,   179,   134,   180,   246,   247,
     248,   249,   250,     0,     0,   251,   252,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    19,    20,    21,    22,
       0,   253,     0,     0,     0,     0,     0,   254,   255,   256,
     257,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,   132,   484,     0,   179,   134,
     180,   246,   247,   248,   249,   250,     0,     0,   251,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    17,    18,    19,
      20,    21,    22,     0,   253,     0,     0,     0,     0,     0,
     254,   255,   256,   257,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,     0,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,     0,     0,
       0,     0,   126,   127,   128,   129,   130,   131,   132,   133,
       0,     0,   134,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     135,   136,   137,   138,     0,   139,     0,     0,     0,     0,
       0,     0,     0,   140,   141,   142,   143,   144,   145,     0,
       0,     0,     0,     0,     0,     0,    17,    18,    19,    20,
      21,    22,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,   176,   177,   146,   178,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,    17,    18,     0,
       0,   126,   127,   128,   129,   130,   131,   132,   133,     0,
       0,   134,     0,     0,     0,     0,    17,    18,     0,     0,
       0,     0,     0,     0,     0,     0,    35,   176,   177,     0,
     178,    39,    40,    41,    42,     0,     0,     0,     0,   181,
     136,   137,   138,     0,     0,    35,    36,    37,     0,    38,
      39,    40,    41,    42,     0,     0,     0,   145,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   146,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a1666 1
       0,     0,   126,   127,   128,   129,   130,     0,     0,     0,
d1668 2
a1669 20
       0,   126,   127,   128,   129,   130,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     181,   136,   137,   138,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   145,   181,
     136,   137,   138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   145,     0,     0,
       0,     0,     0,     0,    19,    20,    21,    22,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   146,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,   146,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,   133,     0,     0,   134
d1672 6
d1680 59
a1738 45
      13,   239,    13,   243,     4,     4,   174,   210,    18,    19,
      18,    19,    12,   253,   139,   157,   135,   227,   139,    13,
      13,     4,   137,   138,   139,   221,   139,   396,   154,   398,
     269,   235,   401,     0,    33,    34,    35,   156,     3,     4,
     173,   149,   150,   137,   138,   139,   147,   148,   235,   253,
      33,    34,    35,   141,   137,   138,   139,   295,   135,   227,
     235,   229,   137,   138,   139,   238,   253,    32,    33,    34,
     309,    36,    37,    38,    39,    40,   235,   238,   253,   252,
     157,   158,   176,   160,   161,   477,   234,   172,   165,   234,
     238,   238,   461,   238,   253,   256,   176,   337,   238,   238,
     238,   341,   342,   495,   181,   308,   183,   254,   175,   192,
     350,   238,   176,   252,   254,   354,   254,   234,   328,   488,
     323,   238,   254,   255,   320,   251,   238,   254,   176,   254,
     369,   500,   132,   254,   235,   148,   237,   148,   246,   247,
     255,   254,   254,   239,   240,   234,   159,   289,   231,   238,
     390,   139,   391,   321,   148,   148,   156,   396,   139,   398,
     328,   174,   401,   128,   129,   130,   131,   132,   167,   168,
     169,   198,   185,   173,   342,   139,   234,   204,   205,   419,
     238,   194,   233,   194,   167,   168,   169,   145,   146,   427,
     203,   191,   395,   234,   234,   234,   435,   139,   238,   238,
     176,   166,   167,   168,   169,   176,   206,   221,   167,   168,
     169,   153,   289,   176,   227,   238,   229,   151,   152,   184,
     141,   142,   461,   137,   138,   139,   239,   139,   239,   235,
     470,   255,   351,   374,   375,   234,   474,   251,   252,   407,
     243,   244,   245,   233,   483,   176,   256,   486,   256,   488,
     235,   419,   376,   377,   494,   197,   198,   255,   272,   224,
     233,   500,   204,   205,     3,     4,   253,   378,   379,   380,
     381,   233,   382,   383,   514,   513,   254,   254,   233,   254,
     518,   519,   295,   233,   295,   254,   233,   233,   491,   233,
     256,   234,   530,    32,    33,    34,   233,    36,    37,    38,
      39,    40,   250,   248,   153,   305,   320,   155,   321,   249,
     233,   236,   136,   254,   234,   328,   233,   236,   256,   234,
     238,   234,   233,   336,   139,   336,   236,   254,   234,   342,
     234,   255,   332,    12,   347,   384,   347,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   254,   253,   252,
     385,   351,   254,   386,   388,   387,   197,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   332,   389,   229,   405,
     409,   320,   336,   150,   336,   520,   495,   347,   419,   128,
     129,   130,   131,   132,   407,   518,   148,    -1,   137,    -1,
     139,    -1,   407,    -1,    -1,    -1,   419,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   427,    -1,   427,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   424,    -1,    -1,   166,   167,   168,
     169,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,
d1740 3
a1742 1
      -1,   474,    -1,   474,   477,    -1,   477,    -1,    -1,    -1,
a1743 1
      -1,    -1,   495,    -1,   495,   224,    -1,    -1,    -1,    -1,
a1744 17
     513,    -1,   513,    -1,    -1,   518,   519,   518,   519,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,   530,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    -1,
      13,    14,    15,    16,    17,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,    -1,    -1,    -1,    -1,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,
a1745 1
      -1,    -1,    -1,   166,   167,   168,   169,    -1,   171,    -1,
a1746 1
      -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1750 18
a1767 33
      -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     233,    -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   254,   255,   256,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    -1,    13,    14,    15,    16,    17,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,    -1,    -1,   147,   148,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,   168,
     169,    -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,
     239,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   254,   255,   256,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    -1,    13,    14,
      15,    16,    17,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    36,    37,    38,    39,    40,    41,    42,    43,    44,
d1772 16
a1787 12
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
      -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   166,   167,   168,   169,    -1,   171,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1789 3
a1791 5
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,
      -1,    -1,    -1,    -1,   239,   240,   241,   242,     3,     4,
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,   254,
     255,   256,    -1,    -1,    -1,    20,    21,    22,    23,    24,
d1798 2
a1799 6
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,   128,   129,   130,   131,   132,   133,   134,
     135,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
d1801 11
d1813 16
a1828 6
      -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
a1829 15
      -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,
       8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   256,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,   131,   132,   133,   134,   135,    -1,    -1,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a1830 3
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,
     168,   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,
a1833 1
      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
a1834 16
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,   256,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,
d1836 2
a1837 1
      -1,    -1,   166,   167,   168,   169,    -1,   171,    -1,    -1,
d1839 1
a1839 8
     184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     254,   255,     3,     4,     5,     6,     7,     8,     9,    10,
d1849 1
a1849 5
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,    -1,    -1,   147,   148,    -1,    -1,
d1851 1
a1851 3
      -1,    -1,    -1,    -1,    -1,   166,   167,   168,   169,    -1,
     171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,
d1853 1
a1855 22
      -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,   239,   240,
     241,   242,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   254,   255,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    -1,    13,    14,    15,    16,    17,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,    -1,    -1,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,
     168,   169,    -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,
a1858 21
      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,
      -1,   239,   240,   241,   242,     3,     4,     5,     6,     7,
       8,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,   140,   141,   142,   143,   144,    -1,    -1,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,
     168,   169,    -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,
d1861 1
d1863 2
a1864 4
      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,
      -1,   239,   240,   241,   242,     5,     6,     7,     8,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,
d1866 2
a1867 2
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
d1873 3
a1875 83
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,   141,   142,   143,   144,    -1,    -1,   147,   148,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,
       7,     8,    -1,   233,    -1,    -1,    -1,    -1,    -1,   239,
     240,   241,   242,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,   141,   142,   143,   144,    -1,    -1,
     147,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     5,     6,     7,     8,    -1,   233,    -1,    -1,    -1,
      -1,    -1,   239,   240,   241,   242,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,   255,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,     3,
       4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
     254,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,    -1,    -1,    -1,     5,     6,     7,     8,    -1,   233,
      -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,    20,
d1877 1
a1877 1
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1883 28
a1910 38
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
     141,   142,   143,   144,    -1,    -1,   147,   148,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,
       8,    -1,   233,    -1,    -1,   236,    -1,    -1,   239,   240,
     241,   242,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,   141,   142,   143,   144,    -1,    -1,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,     6,     7,     8,    -1,   233,    -1,    -1,   236,    -1,
      -1,   239,   240,   241,   242,    20,    21,    22,    23,    24,
d1917 17
a1933 39
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,   141,   142,   143,   144,
      -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     5,     6,     7,     8,    -1,   233,    -1,
      -1,    -1,    -1,    -1,   239,   240,   241,   242,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,   141,
     142,   143,   144,    -1,    -1,   147,   148,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,     8,
      -1,   233,    -1,    -1,    -1,    -1,    -1,   239,   240,   241,
     242,    20,    21,    22,    23,    24,    25,    26,    27,    28,
d1940 15
a1954 6
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,   141,   142,   143,   144,    -1,    -1,   147,   148,
d1956 1
d1963 11
a1973 20
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
       6,     7,     8,    -1,   233,    -1,    -1,    -1,    -1,    -1,
     239,   240,   241,   242,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,    -1,    -1,
      -1,    -1,   128,   129,   130,   131,   132,   133,   134,   135,
      -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     166,   167,   168,   169,    -1,   171,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
d1976 13
a1988 2
      27,    28,    29,    30,    31,    32,    33,    34,   224,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
d1993 28
a2020 48
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,     3,     4,    -1,
      -1,   128,   129,   130,   131,   132,   133,   134,   135,    -1,
      -1,   138,    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    33,    34,    -1,
      36,    37,    38,    39,    40,    -1,    -1,    -1,    -1,   166,
     167,   168,   169,    -1,    -1,    32,    33,    34,    -1,    36,
      37,    38,    39,    40,    -1,    -1,    -1,   184,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,   130,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   166,
     167,   168,   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,
      -1,    -1,    -1,    -1,     5,     6,     7,     8,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   134,   135,    -1,    -1,   138
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   172,   258,   260,   141,     0,   262,   137,   138,   139,
     176,   263,   173,   259,   264,   176,   263,     3,     4,     5,
       6,     7,     8,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    36,    37,
d2026 18
a2043 133
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   128,   129,   130,   131,
     132,   133,   134,   135,   138,   166,   167,   168,   169,   171,
     179,   180,   181,   182,   183,   184,   224,   261,   265,   299,
     300,   301,   302,   303,   309,   310,   311,   312,   317,   318,
     319,   320,   322,   323,   324,   325,   326,   356,   357,   358,
     359,   360,   364,   175,   255,   263,    33,    34,    36,   137,
     139,   166,   266,   312,   318,   325,   176,   176,   176,   176,
     176,   233,   356,   254,   255,   339,   234,   238,     4,    33,
      34,    35,   305,   306,   307,   325,   238,   254,   137,   139,
     263,   266,    33,    34,    36,   318,   359,   318,   322,   318,
     318,   235,   321,   318,   139,   263,   311,   327,   328,   255,
     322,   192,   231,   263,   313,   315,   316,     9,    10,    11,
      13,    14,    15,    16,    17,   136,   140,   141,   142,   143,
     144,   147,   148,   233,   239,   240,   241,   242,   254,   255,
     256,   266,   267,   268,   270,   271,   272,   273,   274,   275,
     276,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   297,   299,   300,   312,
     322,   333,   334,   335,   336,   340,   341,   342,   345,   351,
     355,   305,   306,   304,   308,   322,   306,   306,   263,   253,
     321,   233,   254,   254,   254,   236,   281,   294,   298,   322,
     235,   255,   176,   263,   329,   330,   256,   328,   327,   254,
     253,   234,   238,   254,   254,   334,   233,   233,   254,   254,
     297,   233,   233,   281,   281,   297,   256,   337,   147,   148,
     235,   237,   234,   234,   238,   135,   295,   233,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   253,   296,
     281,   243,   244,   245,   239,   240,   145,   146,   149,   150,
     246,   247,   151,   152,   248,   249,   250,   153,   155,   154,
     251,   238,   254,   256,   334,   263,   253,   321,   255,   295,
     331,   253,   236,   236,   298,   311,   362,   363,   321,   238,
     254,   256,   141,   142,   314,   315,   136,   333,   341,   352,
     297,   254,   297,   297,   311,   344,   234,   340,   269,   297,
     263,   266,   277,   278,   279,   280,   295,   295,   281,   281,
     281,   283,   283,   284,   284,   285,   285,   285,   285,   286,
     286,   287,   288,   289,   290,   291,   292,   297,   295,   321,
     331,   253,   331,   332,   331,   236,   329,   256,   362,   330,
     233,   344,   353,   354,   234,   234,   263,   234,   256,   236,
     233,   234,   234,   238,   135,   295,   252,   331,   238,   256,
     254,   139,   361,   297,   254,   234,   334,   343,   255,   346,
     253,   335,   338,   339,   295,   295,   256,   331,   321,   254,
     234,   297,   338,    12,    18,    19,   256,   347,   348,   349,
     350,   331,   254,   334,   297,   252,   334,   347,   334,   256,
     349,   252
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   257,   259,   258,   260,   260,   260,   261,   261,   261,
     261,   261,   262,   262,   263,   263,   263,   264,   265,   265,
     266,   266,   267,   267,   267,   267,   267,   267,   268,   268,
     268,   268,   268,   268,   269,   270,   271,   271,   272,   272,
     273,   273,   274,   274,   275,   276,   276,   276,   277,   277,
     278,   278,   279,   279,   280,   281,   281,   281,   281,   282,
     282,   282,   282,   283,   283,   283,   283,   284,   284,   284,
     285,   285,   285,   286,   286,   286,   286,   286,   287,   287,
     287,   288,   288,   289,   289,   290,   290,   291,   291,   292,
     292,   293,   293,   294,   294,   295,   295,   296,   296,   296,
     296,   296,   296,   296,   296,   296,   296,   296,   297,   297,
     298,   299,   299,   299,   299,   300,   301,   301,   302,   302,
     303,   304,   304,   305,   305,   306,   306,   306,   306,   307,
     307,   307,   308,   309,   309,   309,   309,   309,   310,   310,
     310,   310,   310,   310,   311,   311,   312,   313,   313,   314,
     314,   315,   315,   315,   316,   316,   317,   317,   317,   318,
     318,   318,   318,   318,   318,   318,   318,   318,   318,   318,
     318,   319,   319,   320,   320,   320,   320,   320,   320,   320,
     320,   320,   320,   320,   321,   321,   321,   321,   322,   322,
     323,   323,   323,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   325,   325,   325,   326,   326,   327,
     327,   328,   329,   329,   330,   330,   331,   331,   331,   332,
     332,   333,   334,   334,   335,   335,   335,   335,   335,   335,
     336,   337,   336,   338,   338,   339,   339,   340,   340,   341,
     341,   342,   343,   343,   344,   344,   345,   346,   346,   347,
     347,   348,   348,   349,   349,   350,   350,   351,   351,   351,
     352,   352,   353,   353,   354,   354,   355,   355,   355,   355,
     355,   356,   356,   356,   356,   357,   358,   358,   359,   360,
     360,   360,   361,   361,   361,   362,   362,   363,   364,   364,
     364
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     0,     4,     0,     3,     4,     2,     2,     2,
       2,     2,     0,     2,     1,     1,     1,     5,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     4,
       1,     3,     2,     2,     1,     1,     1,     3,     2,     2,
       2,     1,     2,     3,     2,     1,     1,     1,     2,     2,
       2,     1,     2,     3,     2,     1,     2,     2,     2,     1,
       1,     1,     1,     1,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
       3,     1,     3,     1,     5,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     2,     2,     4,     1,     2,     1,     1,     2,     3,
       3,     2,     3,     2,     2,     0,     2,     2,     2,     1,
       1,     1,     1,     1,     3,     4,     6,     5,     1,     2,
       3,     5,     4,     2,     1,     2,     4,     1,     3,     1,
       1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     3,     3,     4,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     5,     4,     1,
       2,     3,     1,     3,     1,     2,     1,     3,     4,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     0,     4,     1,     1,     2,     3,     1,     2,     1,
       2,     5,     3,     1,     1,     4,     5,     2,     3,     3,
       2,     1,     2,     2,     2,     1,     2,     5,     7,     6,
       1,     1,     1,     0,     2,     3,     2,     2,     2,     3,
       2,     1,     1,     1,     1,     2,     1,     2,     7,     1,
       1,     1,     0,     1,     2,     1,     2,     3,     3,     3,
       3
d2046 55
d2102 24
a2125 9
#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab

d2142 3
a2144 3
      YYERROR;                                                  \
    }                                                           \
while (0)
d2147 2
a2148 2
#define YYTERROR        1
#define YYERRCODE       256
d2158 1
a2158 1
      if (N)                                                            \
d2172 1
a2172 1
    while (0)
a2177 15
/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


d2187 3
a2189 1
YY_ATTRIBUTE_UNUSED
d2192 6
d2203 1
a2203 1
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
d2205 1
a2205 1
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
d2211 1
a2211 1
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
d2213 1
a2213 1
            res += YYFPRINTF (yyo, ".%d", end_col);
d2216 1
a2216 1
        res += YYFPRINTF (yyo, "-%d", end_col);
d2230 31
a2260 10
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, state); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)
d2263 3
a2265 3
/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/
d2267 3
d2272 9
d2284 2
a2287 2
  if (!yyvaluep)
    return;
d2291 2
d2302 2
d2306 9
d2316 4
a2319 2
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);
d2332 2
d2336 6
d2352 5
a2356 5
# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)
d2363 5
d2369 6
a2374 1
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, struct _mesa_glsl_parse_state *state)
a2375 1
  unsigned long int yylno = yyrline[yyrule];
d2378 1
d2380 1
a2380 1
             yyrule - 1, yylno);
d2385 3
a2387 4
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , state);
d2392 5
a2396 5
# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, state); \
} while (0)
d2410 1
a2410 1
#ifndef YYINITDEPTH
d2433 2
d2437 5
d2457 2
d2461 6
d2496 21
a2516 21
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
d2539 1
a2539 1
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
d2543 1
a2543 1
  const char *yyformat = YY_NULLPTR;
d2551 4
d2604 1
a2604 1
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
d2671 3
d2676 9
d2689 1
a2693 1
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
a2694 1
  YY_IGNORE_MAYBE_UNINITIALIZED_END
d2704 13
d2719 6
d2730 9
a2738 1
/* The semantic value of the lookahead symbol.  */
d2741 3
a2743 4
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
d2749 12
d2763 1
d2772 3
a2774 3
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.
d2834 2
a2835 1
#line 80 "glsl_parser.yy" /* yacc.c:1429  */
d2843 2
a2844 2

#line 2981 "glsl_parser.cpp" /* yacc.c:1429  */
d2866 20
a2885 20
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
d2893 1
a2893 1
        goto yyexhaustedlab;
d2896 1
a2896 1
        yystacksize = YYMAXDEPTH;
d2899 8
a2906 8
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
d2908 2
a2909 2
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
d2919 1
a2919 1
                  (unsigned long int) yystacksize));
d2922 1
a2922 1
        YYABORT;
d2951 1
a2951 1
      yychar = yylex (&yylval, &yylloc, state);
d3016 1
a3016 1
     '$$ = $1'.
d3031 2
a3032 1
#line 295 "glsl_parser.yy" /* yacc.c:1646  */
a3035 1
#line 3172 "glsl_parser.cpp" /* yacc.c:1646  */
d3039 2
a3040 1
#line 299 "glsl_parser.yy" /* yacc.c:1646  */
a3045 1
#line 3182 "glsl_parser.cpp" /* yacc.c:1646  */
d3049 2
a3050 1
#line 309 "glsl_parser.yy" /* yacc.c:1646  */
d3052 1
a3052 1
      state->process_version_directive(&(yylsp[-1]), (yyvsp[-1].n), NULL);
a3056 1
#line 3193 "glsl_parser.cpp" /* yacc.c:1646  */
d3060 2
a3061 1
#line 316 "glsl_parser.yy" /* yacc.c:1646  */
d3063 1
a3063 1
      state->process_version_directive(&(yylsp[-2]), (yyvsp[-2].n), (yyvsp[-1].identifier));
a3067 1
#line 3204 "glsl_parser.cpp" /* yacc.c:1646  */
d3071 2
a3072 1
#line 330 "glsl_parser.yy" /* yacc.c:1646  */
d3075 1
a3075 1
         _mesa_glsl_warning(& (yylsp[-1]), state,
d3077 1
a3077 1
                            "(GLSL ES 1.00 or GLSL 1.20 required)",
a3082 1
#line 3219 "glsl_parser.cpp" /* yacc.c:1646  */
d3086 2
a3087 1
#line 355 "glsl_parser.yy" /* yacc.c:1646  */
d3089 1
a3089 1
      if (!_mesa_glsl_process_extension((yyvsp[-3].identifier), & (yylsp[-3]), (yyvsp[-1].identifier), & (yylsp[-1]), state)) {
a3092 1
#line 3229 "glsl_parser.cpp" /* yacc.c:1646  */
d3096 2
a3097 1
#line 364 "glsl_parser.yy" /* yacc.c:1646  */
d3102 2
a3103 2
      if ((yyvsp[0].node) != NULL)
         state->translation_unit.push_tail(& (yyvsp[0].node)->link);
a3104 1
#line 3241 "glsl_parser.cpp" /* yacc.c:1646  */
d3108 2
a3109 1
#line 372 "glsl_parser.yy" /* yacc.c:1646  */
d3114 2
a3115 2
      if ((yyvsp[0].node) != NULL)
         state->translation_unit.push_tail(& (yyvsp[0].node)->link);
a3116 1
#line 3253 "glsl_parser.cpp" /* yacc.c:1646  */
d3120 2
a3121 1
#line 388 "glsl_parser.yy" /* yacc.c:1646  */
d3125 2
a3126 2
      (yyval.expression)->set_location((yylsp[0]));
      (yyval.expression)->primary_expression.identifier = (yyvsp[0].identifier);
a3127 1
#line 3264 "glsl_parser.cpp" /* yacc.c:1646  */
d3131 2
a3132 1
#line 395 "glsl_parser.yy" /* yacc.c:1646  */
d3136 2
a3137 2
      (yyval.expression)->set_location((yylsp[0]));
      (yyval.expression)->primary_expression.int_constant = (yyvsp[0].n);
a3138 1
#line 3275 "glsl_parser.cpp" /* yacc.c:1646  */
d3142 2
a3143 1
#line 402 "glsl_parser.yy" /* yacc.c:1646  */
d3147 2
a3148 2
      (yyval.expression)->set_location((yylsp[0]));
      (yyval.expression)->primary_expression.uint_constant = (yyvsp[0].n);
a3149 1
#line 3286 "glsl_parser.cpp" /* yacc.c:1646  */
d3153 2
a3154 1
#line 409 "glsl_parser.yy" /* yacc.c:1646  */
d3158 2
a3159 2
      (yyval.expression)->set_location((yylsp[0]));
      (yyval.expression)->primary_expression.float_constant = (yyvsp[0].real);
a3160 1
#line 3297 "glsl_parser.cpp" /* yacc.c:1646  */
d3164 2
a3165 1
#line 416 "glsl_parser.yy" /* yacc.c:1646  */
d3169 2
a3170 2
      (yyval.expression)->set_location((yylsp[0]));
      (yyval.expression)->primary_expression.bool_constant = (yyvsp[0].n);
a3171 1
#line 3308 "glsl_parser.cpp" /* yacc.c:1646  */
d3175 2
a3176 1
#line 423 "glsl_parser.yy" /* yacc.c:1646  */
d3178 1
a3178 1
      (yyval.expression) = (yyvsp[-1].expression);
a3179 1
#line 3316 "glsl_parser.cpp" /* yacc.c:1646  */
d3183 2
a3184 1
#line 431 "glsl_parser.yy" /* yacc.c:1646  */
d3187 2
a3188 2
      (yyval.expression) = new(ctx) ast_expression(ast_array_index, (yyvsp[-3].expression), (yyvsp[-1].expression), NULL);
      (yyval.expression)->set_location_range((yylsp[-3]), (yylsp[0]));
a3189 1
#line 3326 "glsl_parser.cpp" /* yacc.c:1646  */
d3193 2
a3194 1
#line 437 "glsl_parser.yy" /* yacc.c:1646  */
d3196 1
a3196 1
      (yyval.expression) = (yyvsp[0].expression);
a3197 1
#line 3334 "glsl_parser.cpp" /* yacc.c:1646  */
d3201 2
a3202 1
#line 441 "glsl_parser.yy" /* yacc.c:1646  */
d3205 3
a3207 3
      (yyval.expression) = new(ctx) ast_expression(ast_field_selection, (yyvsp[-2].expression), NULL, NULL);
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
      (yyval.expression)->primary_expression.identifier = (yyvsp[0].identifier);
a3208 1
#line 3345 "glsl_parser.cpp" /* yacc.c:1646  */
d3212 2
a3213 1
#line 448 "glsl_parser.yy" /* yacc.c:1646  */
d3216 2
a3217 2
      (yyval.expression) = new(ctx) ast_expression(ast_post_inc, (yyvsp[-1].expression), NULL, NULL);
      (yyval.expression)->set_location_range((yylsp[-1]), (yylsp[0]));
a3218 1
#line 3355 "glsl_parser.cpp" /* yacc.c:1646  */
d3222 2
a3223 1
#line 454 "glsl_parser.yy" /* yacc.c:1646  */
d3226 2
a3227 2
      (yyval.expression) = new(ctx) ast_expression(ast_post_dec, (yyvsp[-1].expression), NULL, NULL);
      (yyval.expression)->set_location_range((yylsp[-1]), (yylsp[0]));
a3228 1
#line 3365 "glsl_parser.cpp" /* yacc.c:1646  */
d3232 2
a3233 1
#line 472 "glsl_parser.yy" /* yacc.c:1646  */
d3236 2
a3237 2
      (yyval.expression) = new(ctx) ast_expression(ast_field_selection, (yyvsp[-2].expression), (yyvsp[0].expression), NULL);
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3238 1
#line 3375 "glsl_parser.cpp" /* yacc.c:1646  */
d3242 2
a3243 1
#line 491 "glsl_parser.yy" /* yacc.c:1646  */
d3245 3
a3247 3
      (yyval.expression) = (yyvsp[-1].expression);
      (yyval.expression)->set_location((yylsp[-1]));
      (yyval.expression)->expressions.push_tail(& (yyvsp[0].expression)->link);
a3248 1
#line 3385 "glsl_parser.cpp" /* yacc.c:1646  */
d3252 2
a3253 1
#line 497 "glsl_parser.yy" /* yacc.c:1646  */
d3255 3
a3257 3
      (yyval.expression) = (yyvsp[-2].expression);
      (yyval.expression)->set_location((yylsp[-2]));
      (yyval.expression)->expressions.push_tail(& (yyvsp[0].expression)->link);
a3258 1
#line 3395 "glsl_parser.cpp" /* yacc.c:1646  */
d3262 2
a3263 1
#line 513 "glsl_parser.yy" /* yacc.c:1646  */
d3266 2
a3267 2
      (yyval.expression) = new(ctx) ast_function_expression((yyvsp[0].type_specifier));
      (yyval.expression)->set_location((yylsp[0]));
a3268 1
#line 3405 "glsl_parser.cpp" /* yacc.c:1646  */
d3272 2
a3273 1
#line 519 "glsl_parser.yy" /* yacc.c:1646  */
d3276 1
a3276 2
      ast_expression *callee = new(ctx) ast_expression((yyvsp[0].identifier));
      callee->set_location((yylsp[0]));
d3278 1
a3278 1
      (yyval.expression)->set_location((yylsp[0]));
a3279 1
#line 3417 "glsl_parser.cpp" /* yacc.c:1646  */
d3283 2
a3284 1
#line 527 "glsl_parser.yy" /* yacc.c:1646  */
d3287 1
a3287 2
      ast_expression *callee = new(ctx) ast_expression((yyvsp[0].identifier));
      callee->set_location((yylsp[0]));
d3289 1
a3289 1
      (yyval.expression)->set_location((yylsp[0]));
a3290 1
#line 3429 "glsl_parser.cpp" /* yacc.c:1646  */
d3294 2
a3295 1
#line 548 "glsl_parser.yy" /* yacc.c:1646  */
d3297 3
a3299 3
      (yyval.expression) = (yyvsp[-1].expression);
      (yyval.expression)->set_location((yylsp[-1]));
      (yyval.expression)->expressions.push_tail(& (yyvsp[0].expression)->link);
a3300 1
#line 3439 "glsl_parser.cpp" /* yacc.c:1646  */
d3304 2
a3305 1
#line 554 "glsl_parser.yy" /* yacc.c:1646  */
d3307 3
a3309 3
      (yyval.expression) = (yyvsp[-2].expression);
      (yyval.expression)->set_location((yylsp[-2]));
      (yyval.expression)->expressions.push_tail(& (yyvsp[0].expression)->link);
a3310 1
#line 3449 "glsl_parser.cpp" /* yacc.c:1646  */
d3314 2
a3315 1
#line 566 "glsl_parser.yy" /* yacc.c:1646  */
d3318 1
a3318 2
      ast_expression *callee = new(ctx) ast_expression((yyvsp[-1].identifier));
      callee->set_location((yylsp[-1]));
d3320 1
a3320 1
      (yyval.expression)->set_location((yylsp[-1]));
a3321 1
#line 3461 "glsl_parser.cpp" /* yacc.c:1646  */
d3325 2
a3326 1
#line 579 "glsl_parser.yy" /* yacc.c:1646  */
d3329 2
a3330 2
      (yyval.expression) = new(ctx) ast_expression(ast_pre_inc, (yyvsp[0].expression), NULL, NULL);
      (yyval.expression)->set_location((yylsp[-1]));
a3331 1
#line 3471 "glsl_parser.cpp" /* yacc.c:1646  */
d3335 2
a3336 1
#line 585 "glsl_parser.yy" /* yacc.c:1646  */
d3339 2
a3340 2
      (yyval.expression) = new(ctx) ast_expression(ast_pre_dec, (yyvsp[0].expression), NULL, NULL);
      (yyval.expression)->set_location((yylsp[-1]));
a3341 1
#line 3481 "glsl_parser.cpp" /* yacc.c:1646  */
d3345 2
a3346 1
#line 591 "glsl_parser.yy" /* yacc.c:1646  */
d3349 2
a3350 2
      (yyval.expression) = new(ctx) ast_expression((yyvsp[-1].n), (yyvsp[0].expression), NULL, NULL);
      (yyval.expression)->set_location_range((yylsp[-1]), (yylsp[0]));
a3351 1
#line 3491 "glsl_parser.cpp" /* yacc.c:1646  */
d3355 2
a3356 1
#line 600 "glsl_parser.yy" /* yacc.c:1646  */
a3357 1
#line 3497 "glsl_parser.cpp" /* yacc.c:1646  */
d3361 2
a3362 1
#line 601 "glsl_parser.yy" /* yacc.c:1646  */
a3363 1
#line 3503 "glsl_parser.cpp" /* yacc.c:1646  */
d3367 2
a3368 1
#line 602 "glsl_parser.yy" /* yacc.c:1646  */
a3369 1
#line 3509 "glsl_parser.cpp" /* yacc.c:1646  */
d3373 2
a3374 1
#line 603 "glsl_parser.yy" /* yacc.c:1646  */
a3375 1
#line 3515 "glsl_parser.cpp" /* yacc.c:1646  */
d3379 2
a3380 1
#line 609 "glsl_parser.yy" /* yacc.c:1646  */
d3383 2
a3384 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_mul, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3385 1
#line 3525 "glsl_parser.cpp" /* yacc.c:1646  */
d3389 2
a3390 1
#line 615 "glsl_parser.yy" /* yacc.c:1646  */
d3393 2
a3394 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_div, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3395 1
#line 3535 "glsl_parser.cpp" /* yacc.c:1646  */
d3399 2
a3400 1
#line 621 "glsl_parser.yy" /* yacc.c:1646  */
d3403 2
a3404 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_mod, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3405 1
#line 3545 "glsl_parser.cpp" /* yacc.c:1646  */
d3409 2
a3410 1
#line 631 "glsl_parser.yy" /* yacc.c:1646  */
d3413 2
a3414 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_add, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3415 1
#line 3555 "glsl_parser.cpp" /* yacc.c:1646  */
d3419 2
a3420 1
#line 637 "glsl_parser.yy" /* yacc.c:1646  */
d3423 2
a3424 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_sub, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3425 1
#line 3565 "glsl_parser.cpp" /* yacc.c:1646  */
d3429 2
a3430 1
#line 647 "glsl_parser.yy" /* yacc.c:1646  */
d3433 2
a3434 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_lshift, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3435 1
#line 3575 "glsl_parser.cpp" /* yacc.c:1646  */
d3439 2
a3440 1
#line 653 "glsl_parser.yy" /* yacc.c:1646  */
d3443 2
a3444 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_rshift, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3445 1
#line 3585 "glsl_parser.cpp" /* yacc.c:1646  */
d3449 2
a3450 1
#line 663 "glsl_parser.yy" /* yacc.c:1646  */
d3453 2
a3454 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_less, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3455 1
#line 3595 "glsl_parser.cpp" /* yacc.c:1646  */
d3459 2
a3460 1
#line 669 "glsl_parser.yy" /* yacc.c:1646  */
d3463 2
a3464 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_greater, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3465 1
#line 3605 "glsl_parser.cpp" /* yacc.c:1646  */
d3469 2
a3470 1
#line 675 "glsl_parser.yy" /* yacc.c:1646  */
d3473 2
a3474 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_lequal, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3475 1
#line 3615 "glsl_parser.cpp" /* yacc.c:1646  */
d3479 2
a3480 1
#line 681 "glsl_parser.yy" /* yacc.c:1646  */
d3483 2
a3484 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_gequal, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3485 1
#line 3625 "glsl_parser.cpp" /* yacc.c:1646  */
d3489 2
a3490 1
#line 691 "glsl_parser.yy" /* yacc.c:1646  */
d3493 2
a3494 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_equal, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3495 1
#line 3635 "glsl_parser.cpp" /* yacc.c:1646  */
d3499 2
a3500 1
#line 697 "glsl_parser.yy" /* yacc.c:1646  */
d3503 2
a3504 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_nequal, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3505 1
#line 3645 "glsl_parser.cpp" /* yacc.c:1646  */
d3509 2
a3510 1
#line 707 "glsl_parser.yy" /* yacc.c:1646  */
d3513 2
a3514 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_and, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3515 1
#line 3655 "glsl_parser.cpp" /* yacc.c:1646  */
d3519 2
a3520 1
#line 717 "glsl_parser.yy" /* yacc.c:1646  */
d3523 2
a3524 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_xor, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3525 1
#line 3665 "glsl_parser.cpp" /* yacc.c:1646  */
d3529 2
a3530 1
#line 727 "glsl_parser.yy" /* yacc.c:1646  */
d3533 2
a3534 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_bit_or, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3535 1
#line 3675 "glsl_parser.cpp" /* yacc.c:1646  */
d3539 2
a3540 1
#line 737 "glsl_parser.yy" /* yacc.c:1646  */
d3543 2
a3544 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_and, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3545 1
#line 3685 "glsl_parser.cpp" /* yacc.c:1646  */
d3549 2
a3550 1
#line 747 "glsl_parser.yy" /* yacc.c:1646  */
d3553 2
a3554 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_xor, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3555 1
#line 3695 "glsl_parser.cpp" /* yacc.c:1646  */
d3559 2
a3560 1
#line 757 "glsl_parser.yy" /* yacc.c:1646  */
d3563 2
a3564 2
      (yyval.expression) = new(ctx) ast_expression_bin(ast_logic_or, (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3565 1
#line 3705 "glsl_parser.cpp" /* yacc.c:1646  */
d3569 2
a3570 1
#line 767 "glsl_parser.yy" /* yacc.c:1646  */
d3573 2
a3574 2
      (yyval.expression) = new(ctx) ast_expression(ast_conditional, (yyvsp[-4].expression), (yyvsp[-2].expression), (yyvsp[0].expression));
      (yyval.expression)->set_location_range((yylsp[-4]), (yylsp[0]));
a3575 1
#line 3715 "glsl_parser.cpp" /* yacc.c:1646  */
d3579 2
a3580 1
#line 777 "glsl_parser.yy" /* yacc.c:1646  */
d3583 2
a3584 2
      (yyval.expression) = new(ctx) ast_expression((yyvsp[-1].n), (yyvsp[-2].expression), (yyvsp[0].expression), NULL);
      (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
a3585 1
#line 3725 "glsl_parser.cpp" /* yacc.c:1646  */
d3589 2
a3590 1
#line 785 "glsl_parser.yy" /* yacc.c:1646  */
a3591 1
#line 3731 "glsl_parser.cpp" /* yacc.c:1646  */
d3595 2
a3596 1
#line 786 "glsl_parser.yy" /* yacc.c:1646  */
a3597 1
#line 3737 "glsl_parser.cpp" /* yacc.c:1646  */
d3601 2
a3602 1
#line 787 "glsl_parser.yy" /* yacc.c:1646  */
a3603 1
#line 3743 "glsl_parser.cpp" /* yacc.c:1646  */
d3607 2
a3608 1
#line 788 "glsl_parser.yy" /* yacc.c:1646  */
a3609 1
#line 3749 "glsl_parser.cpp" /* yacc.c:1646  */
d3613 2
a3614 1
#line 789 "glsl_parser.yy" /* yacc.c:1646  */
a3615 1
#line 3755 "glsl_parser.cpp" /* yacc.c:1646  */
d3619 2
a3620 1
#line 790 "glsl_parser.yy" /* yacc.c:1646  */
a3621 1
#line 3761 "glsl_parser.cpp" /* yacc.c:1646  */
d3625 2
a3626 1
#line 791 "glsl_parser.yy" /* yacc.c:1646  */
a3627 1
#line 3767 "glsl_parser.cpp" /* yacc.c:1646  */
d3631 2
a3632 1
#line 792 "glsl_parser.yy" /* yacc.c:1646  */
a3633 1
#line 3773 "glsl_parser.cpp" /* yacc.c:1646  */
d3637 2
a3638 1
#line 793 "glsl_parser.yy" /* yacc.c:1646  */
a3639 1
#line 3779 "glsl_parser.cpp" /* yacc.c:1646  */
d3643 2
a3644 1
#line 794 "glsl_parser.yy" /* yacc.c:1646  */
a3645 1
#line 3785 "glsl_parser.cpp" /* yacc.c:1646  */
d3649 2
a3650 1
#line 795 "glsl_parser.yy" /* yacc.c:1646  */
a3651 1
#line 3791 "glsl_parser.cpp" /* yacc.c:1646  */
d3655 2
a3656 1
#line 800 "glsl_parser.yy" /* yacc.c:1646  */
d3658 1
a3658 1
      (yyval.expression) = (yyvsp[0].expression);
a3659 1
#line 3799 "glsl_parser.cpp" /* yacc.c:1646  */
d3663 2
a3664 1
#line 804 "glsl_parser.yy" /* yacc.c:1646  */
d3667 1
a3667 1
      if ((yyvsp[-2].expression)->oper != ast_sequence) {
d3669 2
a3670 2
         (yyval.expression)->set_location_range((yylsp[-2]), (yylsp[0]));
         (yyval.expression)->expressions.push_tail(& (yyvsp[-2].expression)->link);
d3672 1
a3672 1
         (yyval.expression) = (yyvsp[-2].expression);
d3675 1
a3675 1
      (yyval.expression)->expressions.push_tail(& (yyvsp[0].expression)->link);
a3676 1
#line 3816 "glsl_parser.cpp" /* yacc.c:1646  */
d3680 2
a3681 1
#line 824 "glsl_parser.yy" /* yacc.c:1646  */
d3684 1
a3684 1
      (yyval.node) = (yyvsp[-1].function);
a3685 1
#line 3825 "glsl_parser.cpp" /* yacc.c:1646  */
d3689 2
a3690 1
#line 829 "glsl_parser.yy" /* yacc.c:1646  */
d3692 1
a3692 1
      (yyval.node) = (yyvsp[-1].declarator_list);
a3693 1
#line 3833 "glsl_parser.cpp" /* yacc.c:1646  */
d3697 2
a3698 1
#line 833 "glsl_parser.yy" /* yacc.c:1646  */
d3700 2
a3701 2
      (yyvsp[-1].type_specifier)->default_precision = (yyvsp[-2].n);
      (yyval.node) = (yyvsp[-1].type_specifier);
a3702 1
#line 3842 "glsl_parser.cpp" /* yacc.c:1646  */
d3706 2
a3707 1
#line 838 "glsl_parser.yy" /* yacc.c:1646  */
d3709 1
a3709 1
      (yyval.node) = (yyvsp[0].node);
a3710 1
#line 3850 "glsl_parser.cpp" /* yacc.c:1646  */
d3714 2
a3715 1
#line 854 "glsl_parser.yy" /* yacc.c:1646  */
d3717 2
a3718 2
      (yyval.function) = (yyvsp[-1].function);
      (yyval.function)->parameters.push_tail(& (yyvsp[0].parameter_declarator)->link);
a3719 1
#line 3859 "glsl_parser.cpp" /* yacc.c:1646  */
d3723 2
a3724 1
#line 859 "glsl_parser.yy" /* yacc.c:1646  */
d3726 2
a3727 2
      (yyval.function) = (yyvsp[-2].function);
      (yyval.function)->parameters.push_tail(& (yyvsp[0].parameter_declarator)->link);
a3728 1
#line 3868 "glsl_parser.cpp" /* yacc.c:1646  */
d3732 2
a3733 1
#line 867 "glsl_parser.yy" /* yacc.c:1646  */
d3737 3
a3739 3
      (yyval.function)->set_location((yylsp[-1]));
      (yyval.function)->return_type = (yyvsp[-2].fully_specified_type);
      (yyval.function)->identifier = (yyvsp[-1].identifier);
d3741 1
a3741 1
      state->symbols->add_function(new(state) ir_function((yyvsp[-1].identifier)));
a3743 1
#line 3883 "glsl_parser.cpp" /* yacc.c:1646  */
d3747 2
a3748 1
#line 881 "glsl_parser.yy" /* yacc.c:1646  */
d3752 1
a3752 1
      (yyval.parameter_declarator)->set_location_range((yylsp[-1]), (yylsp[0]));
d3754 3
a3756 3
      (yyval.parameter_declarator)->type->set_location((yylsp[-1]));
      (yyval.parameter_declarator)->type->specifier = (yyvsp[-1].type_specifier);
      (yyval.parameter_declarator)->identifier = (yyvsp[0].identifier);
a3757 1
#line 3897 "glsl_parser.cpp" /* yacc.c:1646  */
d3761 2
a3762 1
#line 891 "glsl_parser.yy" /* yacc.c:1646  */
d3766 1
a3766 1
      (yyval.parameter_declarator)->set_location_range((yylsp[-2]), (yylsp[0]));
d3768 5
a3772 4
      (yyval.parameter_declarator)->type->set_location((yylsp[-2]));
      (yyval.parameter_declarator)->type->specifier = (yyvsp[-2].type_specifier);
      (yyval.parameter_declarator)->identifier = (yyvsp[-1].identifier);
      (yyval.parameter_declarator)->array_specifier = (yyvsp[0].array_specifier);
a3773 1
#line 3912 "glsl_parser.cpp" /* yacc.c:1646  */
d3777 2
a3778 1
#line 905 "glsl_parser.yy" /* yacc.c:1646  */
d3780 2
a3781 2
      (yyval.parameter_declarator) = (yyvsp[0].parameter_declarator);
      (yyval.parameter_declarator)->type->qualifier = (yyvsp[-1].type_qualifier);
a3782 1
#line 3921 "glsl_parser.cpp" /* yacc.c:1646  */
d3786 2
a3787 1
#line 910 "glsl_parser.yy" /* yacc.c:1646  */
d3791 1
a3791 1
      (yyval.parameter_declarator)->set_location((yylsp[0]));
d3793 2
a3794 3
      (yyval.parameter_declarator)->type->set_location_range((yylsp[-1]), (yylsp[0]));
      (yyval.parameter_declarator)->type->qualifier = (yyvsp[-1].type_qualifier);
      (yyval.parameter_declarator)->type->specifier = (yyvsp[0].type_specifier);
a3795 1
#line 3935 "glsl_parser.cpp" /* yacc.c:1646  */
d3799 2
a3800 1
#line 923 "glsl_parser.yy" /* yacc.c:1646  */
a3803 1
#line 3943 "glsl_parser.cpp" /* yacc.c:1646  */
d3807 2
a3808 1
#line 927 "glsl_parser.yy" /* yacc.c:1646  */
d3810 2
a3811 2
      if ((yyvsp[0].type_qualifier).flags.q.constant)
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate const qualifier");
d3813 1
a3813 1
      (yyval.type_qualifier) = (yyvsp[0].type_qualifier);
a3815 1
#line 3955 "glsl_parser.cpp" /* yacc.c:1646  */
d3819 2
a3820 1
#line 935 "glsl_parser.yy" /* yacc.c:1646  */
d3822 2
a3823 2
      if (((yyvsp[-1].type_qualifier).flags.q.in || (yyvsp[-1].type_qualifier).flags.q.out) && ((yyvsp[0].type_qualifier).flags.q.in || (yyvsp[0].type_qualifier).flags.q.out))
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate in/out/inout qualifier");
d3825 3
a3827 3
      if (!state->ARB_shading_language_420pack_enable && (yyvsp[0].type_qualifier).flags.q.constant)
         _mesa_glsl_error(&(yylsp[-1]), state, "const must be specified before "
                          "in/out/inout");
d3829 2
a3830 2
      (yyval.type_qualifier) = (yyvsp[-1].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[-1]), state, (yyvsp[0].type_qualifier));
a3831 1
#line 3971 "glsl_parser.cpp" /* yacc.c:1646  */
d3835 2
a3836 1
#line 947 "glsl_parser.yy" /* yacc.c:1646  */
d3838 2
a3839 2
      if ((yyvsp[0].type_qualifier).precision != ast_precision_none)
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate precision qualifier");
d3841 2
a3842 2
      if (!state->ARB_shading_language_420pack_enable && (yyvsp[0].type_qualifier).flags.i != 0)
         _mesa_glsl_error(&(yylsp[-1]), state, "precision qualifiers must come last");
d3844 2
a3845 2
      (yyval.type_qualifier) = (yyvsp[0].type_qualifier);
      (yyval.type_qualifier).precision = (yyvsp[-1].n);
a3846 1
#line 3986 "glsl_parser.cpp" /* yacc.c:1646  */
d3850 2
a3851 1
#line 960 "glsl_parser.yy" /* yacc.c:1646  */
a3855 1
#line 3995 "glsl_parser.cpp" /* yacc.c:1646  */
d3859 2
a3860 1
#line 965 "glsl_parser.yy" /* yacc.c:1646  */
a3864 1
#line 4004 "glsl_parser.cpp" /* yacc.c:1646  */
d3868 2
a3869 1
#line 970 "glsl_parser.yy" /* yacc.c:1646  */
a3874 1
#line 4014 "glsl_parser.cpp" /* yacc.c:1646  */
d3878 2
a3879 1
#line 984 "glsl_parser.yy" /* yacc.c:1646  */
d3882 2
a3883 2
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[0].identifier), NULL, NULL);
      decl->set_location((yylsp[0]));
d3885 1
a3885 1
      (yyval.declarator_list) = (yyvsp[-2].declarator_list);
d3887 1
a3887 1
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[0].identifier), ir_var_auto));
a3888 1
#line 4028 "glsl_parser.cpp" /* yacc.c:1646  */
d3892 2
a3893 1
#line 994 "glsl_parser.yy" /* yacc.c:1646  */
d3896 2
a3897 2
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[-1].identifier), (yyvsp[0].array_specifier), NULL);
      decl->set_location_range((yylsp[-1]), (yylsp[0]));
d3899 1
a3899 1
      (yyval.declarator_list) = (yyvsp[-3].declarator_list);
d3901 1
a3901 1
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[-1].identifier), ir_var_auto));
a3902 1
#line 4042 "glsl_parser.cpp" /* yacc.c:1646  */
d3906 2
a3907 1
#line 1004 "glsl_parser.yy" /* yacc.c:1646  */
d3910 2
a3911 2
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[-3].identifier), (yyvsp[-2].array_specifier), (yyvsp[0].expression));
      decl->set_location_range((yylsp[-3]), (yylsp[-2]));
d3913 1
a3913 1
      (yyval.declarator_list) = (yyvsp[-5].declarator_list);
d3915 1
a3915 1
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[-3].identifier), ir_var_auto));
a3916 1
#line 4056 "glsl_parser.cpp" /* yacc.c:1646  */
d3920 2
a3921 1
#line 1014 "glsl_parser.yy" /* yacc.c:1646  */
d3924 2
a3925 2
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[-2].identifier), NULL, (yyvsp[0].expression));
      decl->set_location((yylsp[-2]));
d3927 1
a3927 1
      (yyval.declarator_list) = (yyvsp[-4].declarator_list);
d3929 6
a3934 1
      state->symbols->add_variable(new(state) ir_variable(NULL, (yyvsp[-2].identifier), ir_var_auto));
a3935 1
#line 4070 "glsl_parser.cpp" /* yacc.c:1646  */
d3939 2
a3940 1
#line 1028 "glsl_parser.yy" /* yacc.c:1646  */
d3943 11
a3953 3
      /* Empty declaration list is valid. */
      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[0].fully_specified_type));
      (yyval.declarator_list)->set_location((yylsp[0]));
a3954 1
#line 4081 "glsl_parser.cpp" /* yacc.c:1646  */
d3958 2
a3959 1
#line 1035 "glsl_parser.yy" /* yacc.c:1646  */
d3962 2
a3963 2
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[0].identifier), NULL, NULL);
      decl->set_location((yylsp[0]));
d3965 1
a3965 2
      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[-1].fully_specified_type));
      (yyval.declarator_list)->set_location_range((yylsp[-1]), (yylsp[0]));
d3967 5
a3972 1
#line 4095 "glsl_parser.cpp" /* yacc.c:1646  */
d3976 2
a3977 1
#line 1045 "glsl_parser.yy" /* yacc.c:1646  */
d3980 3
a3982 6
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[-1].identifier), (yyvsp[0].array_specifier), NULL);
      decl->set_location_range((yylsp[-1]), (yylsp[0]));

      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[-2].fully_specified_type));
      (yyval.declarator_list)->set_location_range((yylsp[-2]), (yylsp[0]));
      (yyval.declarator_list)->declarations.push_tail(&decl->link);
a3983 1
#line 4109 "glsl_parser.cpp" /* yacc.c:1646  */
d3987 2
a3988 1
#line 1055 "glsl_parser.yy" /* yacc.c:1646  */
d3991 1
a3991 2
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[-3].identifier), (yyvsp[-2].array_specifier), (yyvsp[0].expression));
      decl->set_location_range((yylsp[-3]), (yylsp[-2]));
d3993 2
a3994 2
      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[-4].fully_specified_type));
      (yyval.declarator_list)->set_location_range((yylsp[-4]), (yylsp[-2]));
a3996 1
#line 4123 "glsl_parser.cpp" /* yacc.c:1646  */
d4000 2
a4001 1
#line 1065 "glsl_parser.yy" /* yacc.c:1646  */
d4004 1
a4004 2
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[-2].identifier), NULL, (yyvsp[0].expression));
      decl->set_location((yylsp[-2]));
d4006 2
a4007 2
      (yyval.declarator_list) = new(ctx) ast_declarator_list((yyvsp[-3].fully_specified_type));
      (yyval.declarator_list)->set_location_range((yylsp[-3]), (yylsp[-2]));
a4009 1
#line 4137 "glsl_parser.cpp" /* yacc.c:1646  */
d4013 67
a4079 1
#line 1075 "glsl_parser.yy" /* yacc.c:1646  */
d4082 1
a4082 2
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[0].identifier), NULL, NULL);
      decl->set_location((yylsp[0]));
d4085 1
a4085 1
      (yyval.declarator_list)->set_location_range((yylsp[-1]), (yylsp[0]));
a4089 1
#line 4153 "glsl_parser.cpp" /* yacc.c:1646  */
d4092 3
a4094 2
  case 144:
#line 1090 "glsl_parser.yy" /* yacc.c:1646  */
d4098 2
a4099 2
      (yyval.fully_specified_type)->set_location((yylsp[0]));
      (yyval.fully_specified_type)->specifier = (yyvsp[0].type_specifier);
a4100 1
#line 4164 "glsl_parser.cpp" /* yacc.c:1646  */
d4103 3
a4105 2
  case 145:
#line 1097 "glsl_parser.yy" /* yacc.c:1646  */
d4109 3
a4111 3
      (yyval.fully_specified_type)->set_location_range((yylsp[-1]), (yylsp[0]));
      (yyval.fully_specified_type)->qualifier = (yyvsp[-1].type_qualifier);
      (yyval.fully_specified_type)->specifier = (yyvsp[0].type_specifier);
a4112 1
#line 4176 "glsl_parser.cpp" /* yacc.c:1646  */
d4115 3
a4117 2
  case 146:
#line 1108 "glsl_parser.yy" /* yacc.c:1646  */
d4119 1
a4119 1
      (yyval.type_qualifier) = (yyvsp[-1].type_qualifier);
a4120 1
#line 4184 "glsl_parser.cpp" /* yacc.c:1646  */
d4123 3
a4125 2
  case 148:
#line 1116 "glsl_parser.yy" /* yacc.c:1646  */
d4127 2
a4128 2
      (yyval.type_qualifier) = (yyvsp[-2].type_qualifier);
      if (!(yyval.type_qualifier).merge_qualifier(& (yylsp[0]), state, (yyvsp[0].type_qualifier))) {
a4131 1
#line 4195 "glsl_parser.cpp" /* yacc.c:1646  */
d4134 4
a4137 4
  case 149:
#line 1125 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = (yyvsp[0].n); }
#line 4201 "glsl_parser.cpp" /* yacc.c:1646  */
d4140 4
a4143 4
  case 150:
#line 1126 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.n) = (yyvsp[0].n); }
#line 4207 "glsl_parser.cpp" /* yacc.c:1646  */
d4146 3
a4148 2
  case 151:
#line 1131 "glsl_parser.yy" /* yacc.c:1646  */
d4153 2
a4154 3
      if (!(yyval.type_qualifier).flags.i && (state->ARB_fragment_coord_conventions_enable ||
                          state->is_version(150, 0))) {
         if (match_layout_qualifier((yyvsp[0].identifier), "origin_upper_left", state) == 0) {
d4156 1
a4156 2
         } else if (match_layout_qualifier((yyvsp[0].identifier), "pixel_center_integer",
                                           state) == 0) {
d4161 1
a4161 1
            _mesa_glsl_warning(& (yylsp[0]), state,
d4163 1
a4163 1
                               "identifier `%s' used", (yyvsp[0].identifier));
d4171 1
a4171 1
         if (match_layout_qualifier((yyvsp[0].identifier), "depth_any", state) == 0) {
d4173 1
a4173 1
         } else if (match_layout_qualifier((yyvsp[0].identifier), "depth_greater", state) == 0) {
d4175 1
a4175 1
         } else if (match_layout_qualifier((yyvsp[0].identifier), "depth_less", state) == 0) {
d4177 1
a4177 2
         } else if (match_layout_qualifier((yyvsp[0].identifier), "depth_unchanged",
                                           state) == 0) {
d4182 1
a4182 1
            _mesa_glsl_warning(& (yylsp[0]), state,
d4184 1
a4184 1
                               "layout qualifier `%s' is used", (yyvsp[0].identifier));
d4187 1
a4187 1
            _mesa_glsl_warning(& (yylsp[0]), state,
d4189 1
a4189 1
                               "layout qualifier `%s' is used", (yyvsp[0].identifier));
d4194 2
a4195 2
      if (!(yyval.type_qualifier).flags.i && state->has_uniform_buffer_objects()) {
         if (match_layout_qualifier((yyvsp[0].identifier), "std140", state) == 0) {
d4197 1
a4197 1
         } else if (match_layout_qualifier((yyvsp[0].identifier), "shared", state) == 0) {
d4199 1
a4199 1
         } else if (match_layout_qualifier((yyvsp[0].identifier), "column_major", state) == 0) {
a4205 4
          *
          * Also, this takes care of alternate capitalizations of
          * "row_major" (which is necessary because layout qualifiers
          * are case-insensitive in desktop GLSL).
d4207 1
a4207 1
         } else if (match_layout_qualifier((yyvsp[0].identifier), "row_major", state) == 0) {
a4208 8
         /* "packed" is a reserved word in GLSL, and its token is
          * parsed below in the interface_block_layout_qualifier rule.
          * However, we must take care of alternate capitalizations of
          * "packed", because layout qualifiers are case-insensitive
          * in desktop GLSL.
          */
         } else if (match_layout_qualifier((yyvsp[0].identifier), "packed", state) == 0) {
           (yyval.type_qualifier).flags.q.packed = 1;
d4212 1
a4212 1
            _mesa_glsl_warning(& (yylsp[0]), state,
d4214 1
a4214 95
                               "layout qualifier `%s' is used", (yyvsp[0].identifier));
         }
      }

      /* Layout qualifiers for GLSL 1.50 geometry shaders. */
      if (!(yyval.type_qualifier).flags.i) {
         static const struct {
            const char *s;
            GLenum e;
         } map[] = {
                 { "points", GL_POINTS },
                 { "lines", GL_LINES },
                 { "lines_adjacency", GL_LINES_ADJACENCY },
                 { "line_strip", GL_LINE_STRIP },
                 { "triangles", GL_TRIANGLES },
                 { "triangles_adjacency", GL_TRIANGLES_ADJACENCY },
                 { "triangle_strip", GL_TRIANGLE_STRIP },
         };
         for (unsigned i = 0; i < Elements(map); i++) {
            if (match_layout_qualifier((yyvsp[0].identifier), map[i].s, state) == 0) {
               (yyval.type_qualifier).flags.q.prim_type = 1;
               (yyval.type_qualifier).prim_type = map[i].e;
               break;
            }
         }

         if ((yyval.type_qualifier).flags.i && !state->is_version(150, 0)) {
            _mesa_glsl_error(& (yylsp[0]), state, "#version 150 layout "
                             "qualifier `%s' used", (yyvsp[0].identifier));
         }
      }

      /* Layout qualifiers for ARB_shader_image_load_store. */
      if (state->ARB_shader_image_load_store_enable ||
          state->is_version(420, 0)) {
         if (!(yyval.type_qualifier).flags.i) {
            static const struct {
               const char *name;
               GLenum format;
               glsl_base_type base_type;
            } map[] = {
               { "rgba32f", GL_RGBA32F, GLSL_TYPE_FLOAT },
               { "rgba16f", GL_RGBA16F, GLSL_TYPE_FLOAT },
               { "rg32f", GL_RG32F, GLSL_TYPE_FLOAT },
               { "rg16f", GL_RG16F, GLSL_TYPE_FLOAT },
               { "r11f_g11f_b10f", GL_R11F_G11F_B10F, GLSL_TYPE_FLOAT },
               { "r32f", GL_R32F, GLSL_TYPE_FLOAT },
               { "r16f", GL_R16F, GLSL_TYPE_FLOAT },
               { "rgba32ui", GL_RGBA32UI, GLSL_TYPE_UINT },
               { "rgba16ui", GL_RGBA16UI, GLSL_TYPE_UINT },
               { "rgb10_a2ui", GL_RGB10_A2UI, GLSL_TYPE_UINT },
               { "rgba8ui", GL_RGBA8UI, GLSL_TYPE_UINT },
               { "rg32ui", GL_RG32UI, GLSL_TYPE_UINT },
               { "rg16ui", GL_RG16UI, GLSL_TYPE_UINT },
               { "rg8ui", GL_RG8UI, GLSL_TYPE_UINT },
               { "r32ui", GL_R32UI, GLSL_TYPE_UINT },
               { "r16ui", GL_R16UI, GLSL_TYPE_UINT },
               { "r8ui", GL_R8UI, GLSL_TYPE_UINT },
               { "rgba32i", GL_RGBA32I, GLSL_TYPE_INT },
               { "rgba16i", GL_RGBA16I, GLSL_TYPE_INT },
               { "rgba8i", GL_RGBA8I, GLSL_TYPE_INT },
               { "rg32i", GL_RG32I, GLSL_TYPE_INT },
               { "rg16i", GL_RG16I, GLSL_TYPE_INT },
               { "rg8i", GL_RG8I, GLSL_TYPE_INT },
               { "r32i", GL_R32I, GLSL_TYPE_INT },
               { "r16i", GL_R16I, GLSL_TYPE_INT },
               { "r8i", GL_R8I, GLSL_TYPE_INT },
               { "rgba16", GL_RGBA16, GLSL_TYPE_FLOAT },
               { "rgb10_a2", GL_RGB10_A2, GLSL_TYPE_FLOAT },
               { "rgba8", GL_RGBA8, GLSL_TYPE_FLOAT },
               { "rg16", GL_RG16, GLSL_TYPE_FLOAT },
               { "rg8", GL_RG8, GLSL_TYPE_FLOAT },
               { "r16", GL_R16, GLSL_TYPE_FLOAT },
               { "r8", GL_R8, GLSL_TYPE_FLOAT },
               { "rgba16_snorm", GL_RGBA16_SNORM, GLSL_TYPE_FLOAT },
               { "rgba8_snorm", GL_RGBA8_SNORM, GLSL_TYPE_FLOAT },
               { "rg16_snorm", GL_RG16_SNORM, GLSL_TYPE_FLOAT },
               { "rg8_snorm", GL_RG8_SNORM, GLSL_TYPE_FLOAT },
               { "r16_snorm", GL_R16_SNORM, GLSL_TYPE_FLOAT },
               { "r8_snorm", GL_R8_SNORM, GLSL_TYPE_FLOAT }
            };

            for (unsigned i = 0; i < Elements(map); i++) {
               if (match_layout_qualifier((yyvsp[0].identifier), map[i].name, state) == 0) {
                  (yyval.type_qualifier).flags.q.explicit_image_format = 1;
                  (yyval.type_qualifier).image_format = map[i].format;
                  (yyval.type_qualifier).image_base_type = map[i].base_type;
                  break;
               }
            }
         }

         if (!(yyval.type_qualifier).flags.i &&
             match_layout_qualifier((yyvsp[0].identifier), "early_fragment_tests", state) == 0) {
            (yyval.type_qualifier).flags.q.early_fragment_tests = 1;
d4219 2
a4220 2
         _mesa_glsl_error(& (yylsp[0]), state, "unrecognized layout identifier "
                          "`%s'", (yyvsp[0].identifier));
a4223 1
#line 4396 "glsl_parser.cpp" /* yacc.c:1646  */
d4226 3
a4228 2
  case 152:
#line 1316 "glsl_parser.yy" /* yacc.c:1646  */
d4232 3
a4234 2
      if (match_layout_qualifier("location", (yyvsp[-2].identifier), state) == 0) {
         (yyval.type_qualifier).flags.q.explicit_location = 1;
d4236 7
a4242 5
         if ((yyval.type_qualifier).flags.q.attribute == 1 &&
             state->ARB_explicit_attrib_location_warn) {
            _mesa_glsl_warning(& (yylsp[-2]), state,
                               "GL_ARB_explicit_attrib_location layout "
                               "identifier `%s' used", (yyvsp[-2].identifier));
d4245 2
a4246 7
         if ((yyvsp[0].n) >= 0) {
            (yyval.type_qualifier).location = (yyvsp[0].n);
         } else {
             _mesa_glsl_error(& (yylsp[0]), state, "invalid location %d specified", (yyvsp[0].n));
             YYERROR;
         }
      }
d4248 5
a4252 60
      if (match_layout_qualifier("index", (yyvsp[-2].identifier), state) == 0) {
         (yyval.type_qualifier).flags.q.explicit_index = 1;

         if ((yyvsp[0].n) >= 0) {
            (yyval.type_qualifier).index = (yyvsp[0].n);
         } else {
            _mesa_glsl_error(& (yylsp[0]), state, "invalid index %d specified", (yyvsp[0].n));
            YYERROR;
         }
      }

      if ((state->ARB_shading_language_420pack_enable ||
           state->ARB_shader_atomic_counters_enable) &&
          match_layout_qualifier("binding", (yyvsp[-2].identifier), state) == 0) {
         (yyval.type_qualifier).flags.q.explicit_binding = 1;
         (yyval.type_qualifier).binding = (yyvsp[0].n);
      }

      if (state->ARB_shader_atomic_counters_enable &&
          match_layout_qualifier("offset", (yyvsp[-2].identifier), state) == 0) {
         (yyval.type_qualifier).flags.q.explicit_offset = 1;
         (yyval.type_qualifier).offset = (yyvsp[0].n);
      }

      if (match_layout_qualifier("max_vertices", (yyvsp[-2].identifier), state) == 0) {
         (yyval.type_qualifier).flags.q.max_vertices = 1;

         if ((yyvsp[0].n) < 0) {
            _mesa_glsl_error(& (yylsp[0]), state,
                             "invalid max_vertices %d specified", (yyvsp[0].n));
            YYERROR;
         } else {
            (yyval.type_qualifier).max_vertices = (yyvsp[0].n);
            if (!state->is_version(150, 0)) {
               _mesa_glsl_error(& (yylsp[0]), state,
                                "#version 150 max_vertices qualifier "
                                "specified", (yyvsp[0].n));
            }
         }
      }

      static const char * const local_size_qualifiers[3] = {
         "local_size_x",
         "local_size_y",
         "local_size_z",
      };
      for (int i = 0; i < 3; i++) {
         if (match_layout_qualifier(local_size_qualifiers[i], (yyvsp[-2].identifier),
                                    state) == 0) {
            if ((yyvsp[0].n) <= 0) {
               _mesa_glsl_error(& (yylsp[0]), state,
                                "invalid %s of %d specified",
                                local_size_qualifiers[i], (yyvsp[0].n));
               YYERROR;
            } else if (!state->is_version(430, 0) &&
                       !state->ARB_compute_shader_enable) {
               _mesa_glsl_error(& (yylsp[0]), state,
                                "%s qualifier requires GLSL 4.30 or "
                                "ARB_compute_shader",
                                local_size_qualifiers[i]);
a4253 3
            } else {
               (yyval.type_qualifier).flags.q.local_size |= (1 << i);
               (yyval.type_qualifier).local_size[i] = (yyvsp[0].n);
a4254 1
            break;
d4258 4
a4261 21
      if (match_layout_qualifier("invocations", (yyvsp[-2].identifier), state) == 0) {
         (yyval.type_qualifier).flags.q.invocations = 1;

         if ((yyvsp[0].n) <= 0) {
            _mesa_glsl_error(& (yylsp[0]), state,
                             "invalid invocations %d specified", (yyvsp[0].n));
            YYERROR;
         } else if ((yyvsp[0].n) > MAX_GEOMETRY_SHADER_INVOCATIONS) {
            _mesa_glsl_error(& (yylsp[0]), state,
                             "invocations (%d) exceeds "
                             "GL_MAX_GEOMETRY_SHADER_INVOCATIONS", (yyvsp[0].n));
            YYERROR;
         } else {
            (yyval.type_qualifier).invocations = (yyvsp[0].n);
            if (!state->is_version(400, 0) &&
                !state->ARB_gpu_shader5_enable) {
               _mesa_glsl_error(& (yylsp[0]), state,
                                "GL_ARB_gpu_shader5 invocations "
                                "qualifier specified", (yyvsp[0].n));
            }
         }
d4268 2
a4269 2
         _mesa_glsl_error(& (yylsp[-2]), state, "unrecognized layout identifier "
                          "`%s'", (yyvsp[-2].identifier));
d4271 4
a4276 1
#line 4523 "glsl_parser.cpp" /* yacc.c:1646  */
d4279 3
a4281 2
  case 153:
#line 1439 "glsl_parser.yy" /* yacc.c:1646  */
d4283 1
a4283 1
      (yyval.type_qualifier) = (yyvsp[0].type_qualifier);
d4285 2
a4286 2
      if ((yyval.type_qualifier).flags.q.uniform && !state->has_uniform_buffer_objects()) {
         _mesa_glsl_error(& (yylsp[0]), state,
d4288 1
a4288 1
                          "layout qualifier `%s' is used", (yyvsp[0].type_qualifier));
d4290 1
a4290 1
         _mesa_glsl_warning(& (yylsp[0]), state,
d4292 1
a4292 1
                            "layout qualifier `%s' is used", (yyvsp[0].type_qualifier));
a4294 1
#line 4541 "glsl_parser.cpp" /* yacc.c:1646  */
d4297 3
a4299 2
  case 154:
#line 1465 "glsl_parser.yy" /* yacc.c:1646  */
a4303 1
#line 4550 "glsl_parser.cpp" /* yacc.c:1646  */
d4306 3
a4308 2
  case 155:
#line 1470 "glsl_parser.yy" /* yacc.c:1646  */
a4312 1
#line 4559 "glsl_parser.cpp" /* yacc.c:1646  */
d4315 3
a4317 2
  case 156:
#line 1478 "glsl_parser.yy" /* yacc.c:1646  */
a4321 1
#line 4568 "glsl_parser.cpp" /* yacc.c:1646  */
d4324 3
a4326 2
  case 157:
#line 1483 "glsl_parser.yy" /* yacc.c:1646  */
a4330 1
#line 4577 "glsl_parser.cpp" /* yacc.c:1646  */
d4333 3
a4335 2
  case 158:
#line 1488 "glsl_parser.yy" /* yacc.c:1646  */
a4339 1
#line 4586 "glsl_parser.cpp" /* yacc.c:1646  */
d4342 3
a4344 2
  case 159:
#line 1497 "glsl_parser.yy" /* yacc.c:1646  */
a4348 1
#line 4595 "glsl_parser.cpp" /* yacc.c:1646  */
d4351 3
a4353 2
  case 164:
#line 1506 "glsl_parser.yy" /* yacc.c:1646  */
d4356 1
a4356 1
      (yyval.type_qualifier).precision = (yyvsp[0].n);
a4357 1
#line 4604 "glsl_parser.cpp" /* yacc.c:1646  */
d4360 3
a4362 2
  case 165:
#line 1524 "glsl_parser.yy" /* yacc.c:1646  */
d4364 2
a4365 2
      if ((yyvsp[0].type_qualifier).flags.q.invariant)
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate \"invariant\" qualifier");
d4367 3
a4369 3
      if ((yyvsp[0].type_qualifier).has_layout()) {
         _mesa_glsl_error(&(yylsp[-1]), state,
                          "\"invariant\" cannot be used with layout(...)");
d4372 1
a4372 1
      (yyval.type_qualifier) = (yyvsp[0].type_qualifier);
a4374 1
#line 4621 "glsl_parser.cpp" /* yacc.c:1646  */
d4377 3
a4379 2
  case 166:
#line 1537 "glsl_parser.yy" /* yacc.c:1646  */
d4391 2
a4392 2
      if ((yyvsp[0].type_qualifier).has_interpolation())
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate interpolation qualifier");
d4394 3
a4396 3
      if ((yyvsp[0].type_qualifier).has_layout()) {
         _mesa_glsl_error(&(yylsp[-1]), state, "interpolation qualifiers cannot be used "
                          "with layout(...)");
d4399 3
a4401 3
      if (!state->ARB_shading_language_420pack_enable && (yyvsp[0].type_qualifier).flags.q.invariant) {
         _mesa_glsl_error(&(yylsp[-1]), state, "interpolation qualifiers must come "
                          "after \"invariant\"");
d4404 2
a4405 2
      (yyval.type_qualifier) = (yyvsp[-1].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[-1]), state, (yyvsp[0].type_qualifier));
a4406 1
#line 4653 "glsl_parser.cpp" /* yacc.c:1646  */
d4409 3
a4411 2
  case 167:
#line 1565 "glsl_parser.yy" /* yacc.c:1646  */
d4419 2
a4420 6
      if (!state->ARB_shading_language_420pack_enable && (yyvsp[0].type_qualifier).has_layout())
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate layout(...) qualifiers");

      if ((yyvsp[0].type_qualifier).flags.q.invariant)
         _mesa_glsl_error(&(yylsp[-1]), state, "layout(...) cannot be used with "
                          "the \"invariant\" qualifier");
d4422 3
a4424 39
      if ((yyvsp[0].type_qualifier).has_interpolation()) {
         _mesa_glsl_error(&(yylsp[-1]), state, "layout(...) cannot be used with "
                          "interpolation qualifiers");
      }

      (yyval.type_qualifier) = (yyvsp[-1].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[-1]), state, (yyvsp[0].type_qualifier));
   }
#line 4680 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 168:
#line 1588 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if ((yyvsp[0].type_qualifier).has_auxiliary_storage()) {
         _mesa_glsl_error(&(yylsp[-1]), state,
                          "duplicate auxiliary storage qualifier (centroid or sample)");
      }

      if (!state->ARB_shading_language_420pack_enable &&
          ((yyvsp[0].type_qualifier).flags.q.invariant || (yyvsp[0].type_qualifier).has_interpolation() || (yyvsp[0].type_qualifier).has_layout())) {
         _mesa_glsl_error(&(yylsp[-1]), state, "auxiliary storage qualifiers must come "
                          "just before storage qualifiers");
      }
      (yyval.type_qualifier) = (yyvsp[-1].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[-1]), state, (yyvsp[0].type_qualifier));
   }
#line 4699 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 169:
#line 1603 "glsl_parser.yy" /* yacc.c:1646  */
    {
      /* Section 4.3 of the GLSL 1.20 specification states:
       * "Variable declarations may have a storage qualifier specified..."
       *  1.30 clarifies this to "may have one storage qualifier".
       */
      if ((yyvsp[0].type_qualifier).has_storage())
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate storage qualifier");
d4426 3
a4428 6
      if (!state->ARB_shading_language_420pack_enable &&
          ((yyvsp[0].type_qualifier).flags.q.invariant || (yyvsp[0].type_qualifier).has_interpolation() || (yyvsp[0].type_qualifier).has_layout() ||
           (yyvsp[0].type_qualifier).has_auxiliary_storage())) {
         _mesa_glsl_error(&(yylsp[-1]), state, "storage qualifiers must come after "
                          "invariant, interpolation, layout and auxiliary "
                          "storage qualifiers");
d4431 2
a4432 26
      (yyval.type_qualifier) = (yyvsp[-1].type_qualifier);
      (yyval.type_qualifier).merge_qualifier(&(yylsp[-1]), state, (yyvsp[0].type_qualifier));
   }
#line 4723 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 170:
#line 1623 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if ((yyvsp[0].type_qualifier).precision != ast_precision_none)
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate precision qualifier");

      if (!state->ARB_shading_language_420pack_enable && (yyvsp[0].type_qualifier).flags.i != 0)
         _mesa_glsl_error(&(yylsp[-1]), state, "precision qualifiers must come last");

      (yyval.type_qualifier) = (yyvsp[0].type_qualifier);
      (yyval.type_qualifier).precision = (yyvsp[-1].n);
   }
#line 4738 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 171:
#line 1637 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.centroid = 1;
a4433 1
#line 4747 "glsl_parser.cpp" /* yacc.c:1646  */
d4437 2
a4438 1
#line 1642 "glsl_parser.yy" /* yacc.c:1646  */
d4440 12
a4451 2
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.sample = 1;
a4452 1
#line 4756 "glsl_parser.cpp" /* yacc.c:1646  */
d4456 2
a4457 1
#line 1650 "glsl_parser.yy" /* yacc.c:1646  */
d4459 17
a4475 2
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.constant = 1;
a4476 1
#line 4765 "glsl_parser.cpp" /* yacc.c:1646  */
d4480 2
a4481 1
#line 1655 "glsl_parser.yy" /* yacc.c:1646  */
d4483 8
a4490 2
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.attribute = 1;
a4491 1
#line 4774 "glsl_parser.cpp" /* yacc.c:1646  */
d4495 2
a4496 1
#line 1660 "glsl_parser.yy" /* yacc.c:1646  */
d4499 1
a4499 1
      (yyval.type_qualifier).flags.q.varying = 1;
a4500 1
#line 4783 "glsl_parser.cpp" /* yacc.c:1646  */
d4504 2
a4505 1
#line 1665 "glsl_parser.yy" /* yacc.c:1646  */
d4508 1
a4508 1
      (yyval.type_qualifier).flags.q.in = 1;
a4509 1
#line 4792 "glsl_parser.cpp" /* yacc.c:1646  */
d4513 2
a4514 1
#line 1670 "glsl_parser.yy" /* yacc.c:1646  */
d4517 1
a4517 1
      (yyval.type_qualifier).flags.q.out = 1;
a4518 1
#line 4801 "glsl_parser.cpp" /* yacc.c:1646  */
d4522 2
a4523 1
#line 1675 "glsl_parser.yy" /* yacc.c:1646  */
d4526 1
a4526 1
      (yyval.type_qualifier).flags.q.uniform = 1;
a4527 1
#line 4810 "glsl_parser.cpp" /* yacc.c:1646  */
d4531 2
a4532 1
#line 1680 "glsl_parser.yy" /* yacc.c:1646  */
d4535 1
a4535 1
      (yyval.type_qualifier).flags.q.coherent = 1;
a4536 1
#line 4819 "glsl_parser.cpp" /* yacc.c:1646  */
d4540 2
a4541 1
#line 1685 "glsl_parser.yy" /* yacc.c:1646  */
d4544 1
a4544 1
      (yyval.type_qualifier).flags.q._volatile = 1;
a4545 1
#line 4828 "glsl_parser.cpp" /* yacc.c:1646  */
d4549 2
a4550 1
#line 1690 "glsl_parser.yy" /* yacc.c:1646  */
a4551 1
      STATIC_ASSERT(sizeof((yyval.type_qualifier).flags.q) <= sizeof((yyval.type_qualifier).flags.i));
d4553 1
a4553 10
      (yyval.type_qualifier).flags.q.restrict_flag = 1;
   }
#line 4838 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 182:
#line 1696 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.read_only = 1;
a4554 1
#line 4847 "glsl_parser.cpp" /* yacc.c:1646  */
d4558 2
a4559 1
#line 1701 "glsl_parser.yy" /* yacc.c:1646  */
d4561 3
a4563 2
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.write_only = 1;
a4564 1
#line 4856 "glsl_parser.cpp" /* yacc.c:1646  */
d4568 2
a4569 1
#line 1709 "glsl_parser.yy" /* yacc.c:1646  */
d4571 3
a4573 3
      void *ctx = state;
      (yyval.array_specifier) = new(ctx) ast_array_specifier((yylsp[-1]));
      (yyval.array_specifier)->set_location_range((yylsp[-1]), (yylsp[0]));
a4574 1
#line 4866 "glsl_parser.cpp" /* yacc.c:1646  */
d4578 2
a4579 1
#line 1715 "glsl_parser.yy" /* yacc.c:1646  */
d4582 2
a4583 2
      (yyval.array_specifier) = new(ctx) ast_array_specifier((yylsp[-2]), (yyvsp[-1].expression));
      (yyval.array_specifier)->set_location_range((yylsp[-2]), (yylsp[0]));
a4584 1
#line 4876 "glsl_parser.cpp" /* yacc.c:1646  */
d4588 2
a4589 1
#line 1721 "glsl_parser.yy" /* yacc.c:1646  */
d4591 3
a4593 11
      (yyval.array_specifier) = (yyvsp[-2].array_specifier);

      if (!state->ARB_arrays_of_arrays_enable) {
         _mesa_glsl_error(& (yylsp[-2]), state,
                          "GL_ARB_arrays_of_arrays "
                          "required for defining arrays of arrays");
      } else {
         _mesa_glsl_error(& (yylsp[-2]), state,
                          "only the outermost array dimension can "
                          "be unsized");
      }
a4594 1
#line 4894 "glsl_parser.cpp" /* yacc.c:1646  */
d4598 2
a4599 46
#line 1735 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.array_specifier) = (yyvsp[-3].array_specifier);

      if (!state->ARB_arrays_of_arrays_enable) {
         _mesa_glsl_error(& (yylsp[-3]), state,
                          "GL_ARB_arrays_of_arrays "
                          "required for defining arrays of arrays");
      }

      (yyval.array_specifier)->add_dimension((yyvsp[-1].expression));
   }
#line 4910 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 189:
#line 1751 "glsl_parser.yy" /* yacc.c:1646  */
    {
      (yyval.type_specifier) = (yyvsp[-1].type_specifier);
      (yyval.type_specifier)->array_specifier = (yyvsp[0].array_specifier);
   }
#line 4919 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 190:
#line 1759 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[0].identifier));
      (yyval.type_specifier)->set_location((yylsp[0]));
   }
#line 4929 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 191:
#line 1765 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[0].struct_specifier));
      (yyval.type_specifier)->set_location((yylsp[0]));
   }
#line 4939 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 192:
#line 1771 "glsl_parser.yy" /* yacc.c:1646  */
d4602 2
a4603 2
      (yyval.type_specifier) = new(ctx) ast_type_specifier((yyvsp[0].identifier));
      (yyval.type_specifier)->set_location((yylsp[0]));
a4604 1
#line 4949 "glsl_parser.cpp" /* yacc.c:1646  */
d4607 3
a4609 2
  case 193:
#line 1779 "glsl_parser.yy" /* yacc.c:1646  */
a4610 1
#line 4955 "glsl_parser.cpp" /* yacc.c:1646  */
d4613 3
a4615 2
  case 194:
#line 1780 "glsl_parser.yy" /* yacc.c:1646  */
a4616 1
#line 4961 "glsl_parser.cpp" /* yacc.c:1646  */
d4619 3
a4621 2
  case 195:
#line 1781 "glsl_parser.yy" /* yacc.c:1646  */
a4622 1
#line 4967 "glsl_parser.cpp" /* yacc.c:1646  */
d4625 3
a4627 2
  case 196:
#line 1782 "glsl_parser.yy" /* yacc.c:1646  */
a4628 1
#line 4973 "glsl_parser.cpp" /* yacc.c:1646  */
d4631 3
a4633 2
  case 197:
#line 1783 "glsl_parser.yy" /* yacc.c:1646  */
a4634 1
#line 4979 "glsl_parser.cpp" /* yacc.c:1646  */
d4637 3
a4639 2
  case 198:
#line 1784 "glsl_parser.yy" /* yacc.c:1646  */
a4640 1
#line 4985 "glsl_parser.cpp" /* yacc.c:1646  */
d4643 3
a4645 2
  case 199:
#line 1785 "glsl_parser.yy" /* yacc.c:1646  */
a4646 1
#line 4991 "glsl_parser.cpp" /* yacc.c:1646  */
d4649 3
a4651 2
  case 200:
#line 1786 "glsl_parser.yy" /* yacc.c:1646  */
a4652 1
#line 4997 "glsl_parser.cpp" /* yacc.c:1646  */
d4655 3
a4657 2
  case 201:
#line 1787 "glsl_parser.yy" /* yacc.c:1646  */
a4658 1
#line 5003 "glsl_parser.cpp" /* yacc.c:1646  */
d4661 3
a4663 2
  case 202:
#line 1788 "glsl_parser.yy" /* yacc.c:1646  */
a4664 1
#line 5009 "glsl_parser.cpp" /* yacc.c:1646  */
d4667 3
a4669 2
  case 203:
#line 1789 "glsl_parser.yy" /* yacc.c:1646  */
a4670 1
#line 5015 "glsl_parser.cpp" /* yacc.c:1646  */
d4673 3
a4675 2
  case 204:
#line 1790 "glsl_parser.yy" /* yacc.c:1646  */
a4676 1
#line 5021 "glsl_parser.cpp" /* yacc.c:1646  */
d4679 3
a4681 2
  case 205:
#line 1791 "glsl_parser.yy" /* yacc.c:1646  */
a4682 1
#line 5027 "glsl_parser.cpp" /* yacc.c:1646  */
d4685 3
a4687 2
  case 206:
#line 1792 "glsl_parser.yy" /* yacc.c:1646  */
a4688 1
#line 5033 "glsl_parser.cpp" /* yacc.c:1646  */
d4691 3
a4693 2
  case 207:
#line 1793 "glsl_parser.yy" /* yacc.c:1646  */
a4694 1
#line 5039 "glsl_parser.cpp" /* yacc.c:1646  */
d4697 3
a4699 2
  case 208:
#line 1794 "glsl_parser.yy" /* yacc.c:1646  */
a4700 1
#line 5045 "glsl_parser.cpp" /* yacc.c:1646  */
d4703 3
a4705 2
  case 209:
#line 1795 "glsl_parser.yy" /* yacc.c:1646  */
a4706 1
#line 5051 "glsl_parser.cpp" /* yacc.c:1646  */
d4709 3
a4711 2
  case 210:
#line 1796 "glsl_parser.yy" /* yacc.c:1646  */
a4712 1
#line 5057 "glsl_parser.cpp" /* yacc.c:1646  */
d4715 3
a4717 2
  case 211:
#line 1797 "glsl_parser.yy" /* yacc.c:1646  */
a4718 1
#line 5063 "glsl_parser.cpp" /* yacc.c:1646  */
d4721 3
a4723 2
  case 212:
#line 1798 "glsl_parser.yy" /* yacc.c:1646  */
a4724 1
#line 5069 "glsl_parser.cpp" /* yacc.c:1646  */
d4727 3
a4729 2
  case 213:
#line 1799 "glsl_parser.yy" /* yacc.c:1646  */
a4730 1
#line 5075 "glsl_parser.cpp" /* yacc.c:1646  */
d4733 3
a4735 2
  case 214:
#line 1800 "glsl_parser.yy" /* yacc.c:1646  */
a4736 1
#line 5081 "glsl_parser.cpp" /* yacc.c:1646  */
d4739 3
a4741 2
  case 215:
#line 1801 "glsl_parser.yy" /* yacc.c:1646  */
a4742 1
#line 5087 "glsl_parser.cpp" /* yacc.c:1646  */
d4745 3
a4747 2
  case 216:
#line 1802 "glsl_parser.yy" /* yacc.c:1646  */
a4748 1
#line 5093 "glsl_parser.cpp" /* yacc.c:1646  */
d4751 3
a4753 2
  case 217:
#line 1803 "glsl_parser.yy" /* yacc.c:1646  */
a4754 1
#line 5099 "glsl_parser.cpp" /* yacc.c:1646  */
d4757 3
a4759 2
  case 218:
#line 1804 "glsl_parser.yy" /* yacc.c:1646  */
a4760 205
#line 5105 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 219:
#line 1805 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler1D"; }
#line 5111 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 220:
#line 1806 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2D"; }
#line 5117 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 221:
#line 1807 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2DRect"; }
#line 5123 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 222:
#line 1808 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler3D"; }
#line 5129 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 223:
#line 1809 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "samplerCube"; }
#line 5135 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 224:
#line 1810 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "samplerExternalOES"; }
#line 5141 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 225:
#line 1811 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler1DShadow"; }
#line 5147 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 226:
#line 1812 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2DShadow"; }
#line 5153 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 227:
#line 1813 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2DRectShadow"; }
#line 5159 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 228:
#line 1814 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "samplerCubeShadow"; }
#line 5165 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 229:
#line 1815 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler1DArray"; }
#line 5171 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 230:
#line 1816 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2DArray"; }
#line 5177 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 231:
#line 1817 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler1DArrayShadow"; }
#line 5183 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 232:
#line 1818 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2DArrayShadow"; }
#line 5189 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 233:
#line 1819 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "samplerBuffer"; }
#line 5195 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 234:
#line 1820 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "samplerCubeArray"; }
#line 5201 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 235:
#line 1821 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "samplerCubeArrayShadow"; }
#line 5207 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 236:
#line 1822 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler1D"; }
#line 5213 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 237:
#line 1823 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler2D"; }
#line 5219 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 238:
#line 1824 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler2DRect"; }
#line 5225 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 239:
#line 1825 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler3D"; }
#line 5231 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 240:
#line 1826 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isamplerCube"; }
#line 5237 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 241:
#line 1827 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler1DArray"; }
#line 5243 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 242:
#line 1828 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler2DArray"; }
#line 5249 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 243:
#line 1829 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isamplerBuffer"; }
#line 5255 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 244:
#line 1830 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isamplerCubeArray"; }
#line 5261 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 245:
#line 1831 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler1D"; }
#line 5267 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 246:
#line 1832 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler2D"; }
#line 5273 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 247:
#line 1833 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler2DRect"; }
#line 5279 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 248:
#line 1834 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler3D"; }
#line 5285 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 249:
#line 1835 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usamplerCube"; }
#line 5291 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 250:
#line 1836 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler1DArray"; }
#line 5297 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 251:
#line 1837 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler2DArray"; }
#line 5303 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 252:
#line 1838 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usamplerBuffer"; }
#line 5309 "glsl_parser.cpp" /* yacc.c:1646  */
d4763 4
a4766 4
  case 253:
#line 1839 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usamplerCubeArray"; }
#line 5315 "glsl_parser.cpp" /* yacc.c:1646  */
d4769 4
a4772 4
  case 254:
#line 1840 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2DMS"; }
#line 5321 "glsl_parser.cpp" /* yacc.c:1646  */
d4775 4
a4778 4
  case 255:
#line 1841 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler2DMS"; }
#line 5327 "glsl_parser.cpp" /* yacc.c:1646  */
d4781 4
a4784 4
  case 256:
#line 1842 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler2DMS"; }
#line 5333 "glsl_parser.cpp" /* yacc.c:1646  */
d4787 4
a4790 4
  case 257:
#line 1843 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "sampler2DMSArray"; }
#line 5339 "glsl_parser.cpp" /* yacc.c:1646  */
d4793 4
a4796 4
  case 258:
#line 1844 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "isampler2DMSArray"; }
#line 5345 "glsl_parser.cpp" /* yacc.c:1646  */
d4799 4
a4802 4
  case 259:
#line 1845 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "usampler2DMSArray"; }
#line 5351 "glsl_parser.cpp" /* yacc.c:1646  */
d4805 4
a4808 4
  case 260:
#line 1846 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image1D"; }
#line 5357 "glsl_parser.cpp" /* yacc.c:1646  */
d4811 4
a4814 4
  case 261:
#line 1847 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image2D"; }
#line 5363 "glsl_parser.cpp" /* yacc.c:1646  */
d4817 4
a4820 4
  case 262:
#line 1848 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image3D"; }
#line 5369 "glsl_parser.cpp" /* yacc.c:1646  */
d4823 4
a4826 4
  case 263:
#line 1849 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image2DRect"; }
#line 5375 "glsl_parser.cpp" /* yacc.c:1646  */
d4829 4
a4832 4
  case 264:
#line 1850 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "imageCube"; }
#line 5381 "glsl_parser.cpp" /* yacc.c:1646  */
d4835 4
a4838 4
  case 265:
#line 1851 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "imageBuffer"; }
#line 5387 "glsl_parser.cpp" /* yacc.c:1646  */
d4841 4
a4844 4
  case 266:
#line 1852 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image1DArray"; }
#line 5393 "glsl_parser.cpp" /* yacc.c:1646  */
d4847 4
a4850 4
  case 267:
#line 1853 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image2DArray"; }
#line 5399 "glsl_parser.cpp" /* yacc.c:1646  */
d4853 4
a4856 4
  case 268:
#line 1854 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "imageCubeArray"; }
#line 5405 "glsl_parser.cpp" /* yacc.c:1646  */
d4859 4
a4862 4
  case 269:
#line 1855 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image2DMS"; }
#line 5411 "glsl_parser.cpp" /* yacc.c:1646  */
d4865 4
a4868 4
  case 270:
#line 1856 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "image2DMSArray"; }
#line 5417 "glsl_parser.cpp" /* yacc.c:1646  */
d4871 4
a4874 4
  case 271:
#line 1857 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage1D"; }
#line 5423 "glsl_parser.cpp" /* yacc.c:1646  */
d4877 4
a4880 4
  case 272:
#line 1858 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage2D"; }
#line 5429 "glsl_parser.cpp" /* yacc.c:1646  */
d4883 4
a4886 4
  case 273:
#line 1859 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage3D"; }
#line 5435 "glsl_parser.cpp" /* yacc.c:1646  */
d4889 4
a4892 4
  case 274:
#line 1860 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage2DRect"; }
#line 5441 "glsl_parser.cpp" /* yacc.c:1646  */
d4895 4
a4898 4
  case 275:
#line 1861 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimageCube"; }
#line 5447 "glsl_parser.cpp" /* yacc.c:1646  */
d4901 4
a4904 4
  case 276:
#line 1862 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimageBuffer"; }
#line 5453 "glsl_parser.cpp" /* yacc.c:1646  */
d4907 4
a4910 4
  case 277:
#line 1863 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage1DArray"; }
#line 5459 "glsl_parser.cpp" /* yacc.c:1646  */
d4913 4
a4916 4
  case 278:
#line 1864 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage2DArray"; }
#line 5465 "glsl_parser.cpp" /* yacc.c:1646  */
d4919 4
a4922 4
  case 279:
#line 1865 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimageCubeArray"; }
#line 5471 "glsl_parser.cpp" /* yacc.c:1646  */
d4925 4
a4928 4
  case 280:
#line 1866 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage2DMS"; }
#line 5477 "glsl_parser.cpp" /* yacc.c:1646  */
d4931 4
a4934 4
  case 281:
#line 1867 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "iimage2DMSArray"; }
#line 5483 "glsl_parser.cpp" /* yacc.c:1646  */
d4937 4
a4940 4
  case 282:
#line 1868 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage1D"; }
#line 5489 "glsl_parser.cpp" /* yacc.c:1646  */
d4943 4
a4946 4
  case 283:
#line 1869 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage2D"; }
#line 5495 "glsl_parser.cpp" /* yacc.c:1646  */
d4949 4
a4952 4
  case 284:
#line 1870 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage3D"; }
#line 5501 "glsl_parser.cpp" /* yacc.c:1646  */
d4955 4
a4958 4
  case 285:
#line 1871 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage2DRect"; }
#line 5507 "glsl_parser.cpp" /* yacc.c:1646  */
d4961 4
a4964 4
  case 286:
#line 1872 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimageCube"; }
#line 5513 "glsl_parser.cpp" /* yacc.c:1646  */
d4967 4
a4970 4
  case 287:
#line 1873 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimageBuffer"; }
#line 5519 "glsl_parser.cpp" /* yacc.c:1646  */
d4973 4
a4976 4
  case 288:
#line 1874 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage1DArray"; }
#line 5525 "glsl_parser.cpp" /* yacc.c:1646  */
d4979 4
a4982 4
  case 289:
#line 1875 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage2DArray"; }
#line 5531 "glsl_parser.cpp" /* yacc.c:1646  */
d4985 4
a4988 4
  case 290:
#line 1876 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimageCubeArray"; }
#line 5537 "glsl_parser.cpp" /* yacc.c:1646  */
d4991 4
a4994 4
  case 291:
#line 1877 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage2DMS"; }
#line 5543 "glsl_parser.cpp" /* yacc.c:1646  */
d4997 4
a5000 4
  case 292:
#line 1878 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "uimage2DMSArray"; }
#line 5549 "glsl_parser.cpp" /* yacc.c:1646  */
d5003 4
a5006 4
  case 293:
#line 1879 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.identifier) = "atomic_uint"; }
#line 5555 "glsl_parser.cpp" /* yacc.c:1646  */
d5009 3
a5011 2
  case 294:
#line 1884 "glsl_parser.yy" /* yacc.c:1646  */
d5013 1
a5013 1
      state->check_precision_qualifiers_allowed(&(yylsp[0]));
a5015 1
#line 5564 "glsl_parser.cpp" /* yacc.c:1646  */
d5018 3
a5020 2
  case 295:
#line 1889 "glsl_parser.yy" /* yacc.c:1646  */
d5022 1
a5022 1
      state->check_precision_qualifiers_allowed(&(yylsp[0]));
a5024 1
#line 5573 "glsl_parser.cpp" /* yacc.c:1646  */
d5027 3
a5029 2
  case 296:
#line 1894 "glsl_parser.yy" /* yacc.c:1646  */
d5031 1
a5031 1
      state->check_precision_qualifiers_allowed(&(yylsp[0]));
a5033 1
#line 5582 "glsl_parser.cpp" /* yacc.c:1646  */
d5036 3
a5038 2
  case 297:
#line 1902 "glsl_parser.yy" /* yacc.c:1646  */
d5041 4
a5044 3
      (yyval.struct_specifier) = new(ctx) ast_struct_specifier((yyvsp[-3].identifier), (yyvsp[-1].declarator_list));
      (yyval.struct_specifier)->set_location_range((yylsp[-3]), (yylsp[0]));
      state->symbols->add_type((yyvsp[-3].identifier), glsl_type::void_type);
a5045 1
#line 5593 "glsl_parser.cpp" /* yacc.c:1646  */
d5048 3
a5050 2
  case 298:
#line 1909 "glsl_parser.yy" /* yacc.c:1646  */
d5053 2
a5054 2
      (yyval.struct_specifier) = new(ctx) ast_struct_specifier(NULL, (yyvsp[-1].declarator_list));
      (yyval.struct_specifier)->set_location_range((yylsp[-2]), (yylsp[0]));
a5055 1
#line 5603 "glsl_parser.cpp" /* yacc.c:1646  */
d5058 3
a5060 2
  case 299:
#line 1918 "glsl_parser.yy" /* yacc.c:1646  */
d5062 2
a5063 2
      (yyval.declarator_list) = (yyvsp[0].declarator_list);
      (yyvsp[0].declarator_list)->link.self_link();
a5064 1
#line 5612 "glsl_parser.cpp" /* yacc.c:1646  */
d5067 3
a5069 2
  case 300:
#line 1923 "glsl_parser.yy" /* yacc.c:1646  */
d5071 2
a5072 2
      (yyval.declarator_list) = (yyvsp[-1].declarator_list);
      (yyval.declarator_list)->link.insert_before(& (yyvsp[0].declarator_list)->link);
a5073 1
#line 5621 "glsl_parser.cpp" /* yacc.c:1646  */
d5076 3
a5078 2
  case 301:
#line 1931 "glsl_parser.yy" /* yacc.c:1646  */
d5081 2
a5082 2
      ast_fully_specified_type *const type = (yyvsp[-2].fully_specified_type);
      type->set_location((yylsp[-2]));
d5085 1
a5085 1
         _mesa_glsl_error(&(yylsp[-2]), state,
d5090 1
a5090 1
      (yyval.declarator_list)->set_location((yylsp[-1]));
d5092 1
a5092 1
      (yyval.declarator_list)->declarations.push_degenerate_list_at_head(& (yyvsp[-1].declaration)->link);
a5093 1
#line 5641 "glsl_parser.cpp" /* yacc.c:1646  */
d5096 3
a5098 2
  case 302:
#line 1950 "glsl_parser.yy" /* yacc.c:1646  */
d5100 2
a5101 2
      (yyval.declaration) = (yyvsp[0].declaration);
      (yyvsp[0].declaration)->link.self_link();
a5102 1
#line 5650 "glsl_parser.cpp" /* yacc.c:1646  */
d5105 3
a5107 2
  case 303:
#line 1955 "glsl_parser.yy" /* yacc.c:1646  */
d5109 2
a5110 2
      (yyval.declaration) = (yyvsp[-2].declaration);
      (yyval.declaration)->link.insert_before(& (yyvsp[0].declaration)->link);
a5111 1
#line 5659 "glsl_parser.cpp" /* yacc.c:1646  */
d5114 3
a5116 2
  case 304:
#line 1963 "glsl_parser.yy" /* yacc.c:1646  */
d5119 2
a5120 2
      (yyval.declaration) = new(ctx) ast_declaration((yyvsp[0].identifier), NULL, NULL);
      (yyval.declaration)->set_location((yylsp[0]));
a5121 1
#line 5669 "glsl_parser.cpp" /* yacc.c:1646  */
d5124 3
a5126 2
  case 305:
#line 1969 "glsl_parser.yy" /* yacc.c:1646  */
d5129 2
a5130 2
      (yyval.declaration) = new(ctx) ast_declaration((yyvsp[-1].identifier), (yyvsp[0].array_specifier), NULL);
      (yyval.declaration)->set_location_range((yylsp[-1]), (yylsp[0]));
a5131 1
#line 5679 "glsl_parser.cpp" /* yacc.c:1646  */
d5134 3
a5136 2
  case 307:
#line 1979 "glsl_parser.yy" /* yacc.c:1646  */
d5138 1
a5138 1
      (yyval.expression) = (yyvsp[-1].expression);
a5139 1
#line 5687 "glsl_parser.cpp" /* yacc.c:1646  */
d5142 3
a5144 2
  case 308:
#line 1983 "glsl_parser.yy" /* yacc.c:1646  */
d5146 1
a5146 1
      (yyval.expression) = (yyvsp[-2].expression);
a5147 1
#line 5695 "glsl_parser.cpp" /* yacc.c:1646  */
d5150 3
a5152 2
  case 309:
#line 1990 "glsl_parser.yy" /* yacc.c:1646  */
d5156 2
a5157 2
      (yyval.expression)->set_location((yylsp[0]));
      (yyval.expression)->expressions.push_tail(& (yyvsp[0].expression)->link);
a5158 1
#line 5706 "glsl_parser.cpp" /* yacc.c:1646  */
d5161 3
a5163 2
  case 310:
#line 1997 "glsl_parser.yy" /* yacc.c:1646  */
d5165 1
a5165 1
      (yyvsp[-2].expression)->expressions.push_tail(& (yyvsp[0].expression)->link);
a5166 1
#line 5714 "glsl_parser.cpp" /* yacc.c:1646  */
d5169 4
a5172 4
  case 312:
#line 2009 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.node) = (ast_node *) (yyvsp[0].compound_statement); }
#line 5720 "glsl_parser.cpp" /* yacc.c:1646  */
d5175 3
a5177 2
  case 320:
#line 2024 "glsl_parser.yy" /* yacc.c:1646  */
d5181 1
a5181 1
      (yyval.compound_statement)->set_location_range((yylsp[-1]), (yylsp[0]));
a5182 1
#line 5730 "glsl_parser.cpp" /* yacc.c:1646  */
d5185 3
a5187 2
  case 321:
#line 2030 "glsl_parser.yy" /* yacc.c:1646  */
a5190 1
#line 5738 "glsl_parser.cpp" /* yacc.c:1646  */
d5193 3
a5195 2
  case 322:
#line 2034 "glsl_parser.yy" /* yacc.c:1646  */
d5198 2
a5199 2
      (yyval.compound_statement) = new(ctx) ast_compound_statement(true, (yyvsp[-1].node));
      (yyval.compound_statement)->set_location_range((yylsp[-3]), (yylsp[0]));
a5201 1
#line 5749 "glsl_parser.cpp" /* yacc.c:1646  */
d5204 4
a5207 4
  case 323:
#line 2043 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.node) = (ast_node *) (yyvsp[0].compound_statement); }
#line 5755 "glsl_parser.cpp" /* yacc.c:1646  */
d5210 3
a5212 2
  case 325:
#line 2049 "glsl_parser.yy" /* yacc.c:1646  */
d5216 1
a5216 1
      (yyval.compound_statement)->set_location_range((yylsp[-1]), (yylsp[0]));
a5217 1
#line 5765 "glsl_parser.cpp" /* yacc.c:1646  */
d5220 3
a5222 2
  case 326:
#line 2055 "glsl_parser.yy" /* yacc.c:1646  */
d5225 2
a5226 2
      (yyval.compound_statement) = new(ctx) ast_compound_statement(false, (yyvsp[-1].node));
      (yyval.compound_statement)->set_location_range((yylsp[-2]), (yylsp[0]));
a5227 1
#line 5775 "glsl_parser.cpp" /* yacc.c:1646  */
d5230 3
a5232 2
  case 327:
#line 2064 "glsl_parser.yy" /* yacc.c:1646  */
d5234 3
a5236 3
      if ((yyvsp[0].node) == NULL) {
         _mesa_glsl_error(& (yylsp[0]), state, "<nil> statement");
         assert((yyvsp[0].node) != NULL);
d5239 1
a5239 1
      (yyval.node) = (yyvsp[0].node);
a5241 1
#line 5789 "glsl_parser.cpp" /* yacc.c:1646  */
d5244 3
a5246 2
  case 328:
#line 2074 "glsl_parser.yy" /* yacc.c:1646  */
d5248 3
a5250 3
      if ((yyvsp[0].node) == NULL) {
         _mesa_glsl_error(& (yylsp[0]), state, "<nil> statement");
         assert((yyvsp[0].node) != NULL);
d5252 2
a5253 2
      (yyval.node) = (yyvsp[-1].node);
      (yyval.node)->link.insert_before(& (yyvsp[0].node)->link);
a5254 1
#line 5802 "glsl_parser.cpp" /* yacc.c:1646  */
d5257 3
a5259 2
  case 329:
#line 2086 "glsl_parser.yy" /* yacc.c:1646  */
d5263 1
a5263 1
      (yyval.node)->set_location((yylsp[0]));
a5264 1
#line 5812 "glsl_parser.cpp" /* yacc.c:1646  */
d5267 3
a5269 2
  case 330:
#line 2092 "glsl_parser.yy" /* yacc.c:1646  */
d5272 2
a5273 2
      (yyval.node) = new(ctx) ast_expression_statement((yyvsp[-1].expression));
      (yyval.node)->set_location((yylsp[-1]));
a5274 1
#line 5822 "glsl_parser.cpp" /* yacc.c:1646  */
d5277 3
a5279 2
  case 331:
#line 2101 "glsl_parser.yy" /* yacc.c:1646  */
d5281 3
a5283 3
      (yyval.node) = new(state) ast_selection_statement((yyvsp[-2].expression), (yyvsp[0].selection_rest_statement).then_statement,
                                              (yyvsp[0].selection_rest_statement).else_statement);
      (yyval.node)->set_location_range((yylsp[-4]), (yylsp[0]));
a5284 1
#line 5832 "glsl_parser.cpp" /* yacc.c:1646  */
d5287 3
a5289 2
  case 332:
#line 2110 "glsl_parser.yy" /* yacc.c:1646  */
d5291 2
a5292 2
      (yyval.selection_rest_statement).then_statement = (yyvsp[-2].node);
      (yyval.selection_rest_statement).else_statement = (yyvsp[0].node);
a5293 1
#line 5841 "glsl_parser.cpp" /* yacc.c:1646  */
d5296 3
a5298 2
  case 333:
#line 2115 "glsl_parser.yy" /* yacc.c:1646  */
d5300 1
a5300 1
      (yyval.selection_rest_statement).then_statement = (yyvsp[0].node);
a5302 1
#line 5850 "glsl_parser.cpp" /* yacc.c:1646  */
d5305 3
a5307 2
  case 334:
#line 2123 "glsl_parser.yy" /* yacc.c:1646  */
d5309 1
a5309 1
      (yyval.node) = (ast_node *) (yyvsp[0].expression);
a5310 1
#line 5858 "glsl_parser.cpp" /* yacc.c:1646  */
d5313 3
a5315 2
  case 335:
#line 2127 "glsl_parser.yy" /* yacc.c:1646  */
d5318 4
a5321 4
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[-2].identifier), NULL, (yyvsp[0].expression));
      ast_declarator_list *declarator = new(ctx) ast_declarator_list((yyvsp[-3].fully_specified_type));
      decl->set_location_range((yylsp[-2]), (yylsp[0]));
      declarator->set_location((yylsp[-3]));
a5325 1
#line 5873 "glsl_parser.cpp" /* yacc.c:1646  */
d5328 3
a5330 2
  case 336:
#line 2145 "glsl_parser.yy" /* yacc.c:1646  */
d5332 2
a5333 2
      (yyval.node) = new(state) ast_switch_statement((yyvsp[-2].expression), (yyvsp[0].switch_body));
      (yyval.node)->set_location_range((yylsp[-4]), (yylsp[0]));
a5334 1
#line 5882 "glsl_parser.cpp" /* yacc.c:1646  */
d5337 3
a5339 2
  case 337:
#line 2153 "glsl_parser.yy" /* yacc.c:1646  */
d5342 1
a5342 1
      (yyval.switch_body)->set_location_range((yylsp[-1]), (yylsp[0]));
a5343 1
#line 5891 "glsl_parser.cpp" /* yacc.c:1646  */
d5346 3
a5348 2
  case 338:
#line 2158 "glsl_parser.yy" /* yacc.c:1646  */
d5350 2
a5351 2
      (yyval.switch_body) = new(state) ast_switch_body((yyvsp[-1].case_statement_list));
      (yyval.switch_body)->set_location_range((yylsp[-2]), (yylsp[0]));
a5352 1
#line 5900 "glsl_parser.cpp" /* yacc.c:1646  */
d5355 3
a5357 2
  case 339:
#line 2166 "glsl_parser.yy" /* yacc.c:1646  */
d5359 2
a5360 2
      (yyval.case_label) = new(state) ast_case_label((yyvsp[-1].expression));
      (yyval.case_label)->set_location((yylsp[-1]));
a5361 1
#line 5909 "glsl_parser.cpp" /* yacc.c:1646  */
d5364 3
a5366 2
  case 340:
#line 2171 "glsl_parser.yy" /* yacc.c:1646  */
d5369 1
a5369 1
      (yyval.case_label)->set_location((yylsp[0]));
a5370 1
#line 5918 "glsl_parser.cpp" /* yacc.c:1646  */
d5373 3
a5375 2
  case 341:
#line 2179 "glsl_parser.yy" /* yacc.c:1646  */
d5379 1
a5379 1
      labels->labels.push_tail(& (yyvsp[0].case_label)->link);
d5381 1
a5381 1
      (yyval.case_label_list)->set_location((yylsp[0]));
a5382 1
#line 5930 "glsl_parser.cpp" /* yacc.c:1646  */
d5385 3
a5387 2
  case 342:
#line 2187 "glsl_parser.yy" /* yacc.c:1646  */
d5389 2
a5390 2
      (yyval.case_label_list) = (yyvsp[-1].case_label_list);
      (yyval.case_label_list)->labels.push_tail(& (yyvsp[0].case_label)->link);
a5391 1
#line 5939 "glsl_parser.cpp" /* yacc.c:1646  */
d5394 3
a5396 2
  case 343:
#line 2195 "glsl_parser.yy" /* yacc.c:1646  */
d5398 2
a5399 2
      ast_case_statement *stmts = new(state) ast_case_statement((yyvsp[-1].case_label_list));
      stmts->set_location((yylsp[0]));
d5401 1
a5401 1
      stmts->stmts.push_tail(& (yyvsp[0].node)->link);
a5403 1
#line 5951 "glsl_parser.cpp" /* yacc.c:1646  */
d5406 3
a5408 2
  case 344:
#line 2203 "glsl_parser.yy" /* yacc.c:1646  */
d5410 2
a5411 2
      (yyval.case_statement) = (yyvsp[-1].case_statement);
      (yyval.case_statement)->stmts.push_tail(& (yyvsp[0].node)->link);
a5412 1
#line 5960 "glsl_parser.cpp" /* yacc.c:1646  */
d5415 3
a5417 2
  case 345:
#line 2211 "glsl_parser.yy" /* yacc.c:1646  */
d5420 1
a5420 1
      cases->set_location((yylsp[0]));
d5422 1
a5422 1
      cases->cases.push_tail(& (yyvsp[0].case_statement)->link);
a5424 1
#line 5972 "glsl_parser.cpp" /* yacc.c:1646  */
d5427 3
a5429 2
  case 346:
#line 2219 "glsl_parser.yy" /* yacc.c:1646  */
d5431 2
a5432 2
      (yyval.case_statement_list) = (yyvsp[-1].case_statement_list);
      (yyval.case_statement_list)->cases.push_tail(& (yyvsp[0].case_statement)->link);
a5433 1
#line 5981 "glsl_parser.cpp" /* yacc.c:1646  */
d5436 3
a5438 2
  case 347:
#line 2227 "glsl_parser.yy" /* yacc.c:1646  */
d5442 2
a5443 2
                                            NULL, (yyvsp[-2].node), NULL, (yyvsp[0].node));
      (yyval.node)->set_location_range((yylsp[-4]), (yylsp[-1]));
a5444 1
#line 5992 "glsl_parser.cpp" /* yacc.c:1646  */
d5447 3
a5449 2
  case 348:
#line 2234 "glsl_parser.yy" /* yacc.c:1646  */
d5453 2
a5454 2
                                            NULL, (yyvsp[-2].expression), NULL, (yyvsp[-5].node));
      (yyval.node)->set_location_range((yylsp[-6]), (yylsp[-1]));
a5455 1
#line 6003 "glsl_parser.cpp" /* yacc.c:1646  */
d5458 3
a5460 2
  case 349:
#line 2241 "glsl_parser.yy" /* yacc.c:1646  */
d5464 2
a5465 2
                                            (yyvsp[-3].node), (yyvsp[-2].for_rest_statement).cond, (yyvsp[-2].for_rest_statement).rest, (yyvsp[0].node));
      (yyval.node)->set_location_range((yylsp[-5]), (yylsp[0]));
a5466 1
#line 6014 "glsl_parser.cpp" /* yacc.c:1646  */
d5469 3
a5471 2
  case 353:
#line 2257 "glsl_parser.yy" /* yacc.c:1646  */
a5474 1
#line 6022 "glsl_parser.cpp" /* yacc.c:1646  */
d5477 3
a5479 2
  case 354:
#line 2264 "glsl_parser.yy" /* yacc.c:1646  */
d5481 1
a5481 1
      (yyval.for_rest_statement).cond = (yyvsp[-1].node);
a5483 1
#line 6031 "glsl_parser.cpp" /* yacc.c:1646  */
d5486 3
a5488 2
  case 355:
#line 2269 "glsl_parser.yy" /* yacc.c:1646  */
d5490 2
a5491 2
      (yyval.for_rest_statement).cond = (yyvsp[-2].node);
      (yyval.for_rest_statement).rest = (yyvsp[0].expression);
a5492 1
#line 6040 "glsl_parser.cpp" /* yacc.c:1646  */
d5495 3
a5497 2
  case 356:
#line 2278 "glsl_parser.yy" /* yacc.c:1646  */
d5501 1
a5501 1
      (yyval.node)->set_location((yylsp[-1]));
a5502 1
#line 6050 "glsl_parser.cpp" /* yacc.c:1646  */
d5505 3
a5507 2
  case 357:
#line 2284 "glsl_parser.yy" /* yacc.c:1646  */
d5511 1
a5511 1
      (yyval.node)->set_location((yylsp[-1]));
a5512 1
#line 6060 "glsl_parser.cpp" /* yacc.c:1646  */
d5515 3
a5517 2
  case 358:
#line 2290 "glsl_parser.yy" /* yacc.c:1646  */
d5521 1
a5521 1
      (yyval.node)->set_location((yylsp[-1]));
a5522 1
#line 6070 "glsl_parser.cpp" /* yacc.c:1646  */
d5525 3
a5527 2
  case 359:
#line 2296 "glsl_parser.yy" /* yacc.c:1646  */
d5530 2
a5531 2
      (yyval.node) = new(ctx) ast_jump_statement(ast_jump_statement::ast_return, (yyvsp[-1].expression));
      (yyval.node)->set_location_range((yylsp[-2]), (yylsp[-1]));
a5532 1
#line 6080 "glsl_parser.cpp" /* yacc.c:1646  */
d5535 3
a5537 2
  case 360:
#line 2302 "glsl_parser.yy" /* yacc.c:1646  */
d5541 1
a5541 1
      (yyval.node)->set_location((yylsp[-1]));
a5542 1
#line 6090 "glsl_parser.cpp" /* yacc.c:1646  */
d5545 4
a5548 4
  case 361:
#line 2310 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].function_definition); }
#line 6096 "glsl_parser.cpp" /* yacc.c:1646  */
d5551 4
a5554 4
  case 362:
#line 2311 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 6102 "glsl_parser.cpp" /* yacc.c:1646  */
d5557 3
a5559 2
  case 363:
#line 2312 "glsl_parser.yy" /* yacc.c:1646  */
a5560 1
#line 6108 "glsl_parser.cpp" /* yacc.c:1646  */
d5563 4
a5566 4
  case 364:
#line 2313 "glsl_parser.yy" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 6114 "glsl_parser.cpp" /* yacc.c:1646  */
d5569 3
a5571 2
  case 365:
#line 2318 "glsl_parser.yy" /* yacc.c:1646  */
d5575 3
a5577 3
      (yyval.function_definition)->set_location_range((yylsp[-1]), (yylsp[0]));
      (yyval.function_definition)->prototype = (yyvsp[-1].function);
      (yyval.function_definition)->body = (yyvsp[0].compound_statement);
a5580 1
#line 6128 "glsl_parser.cpp" /* yacc.c:1646  */
d5583 3
a5585 2
  case 366:
#line 2332 "glsl_parser.yy" /* yacc.c:1646  */
d5587 1
a5587 1
      (yyval.node) = (yyvsp[0].interface_block);
a5588 1
#line 6136 "glsl_parser.cpp" /* yacc.c:1646  */
d5591 3
a5593 2
  case 367:
#line 2336 "glsl_parser.yy" /* yacc.c:1646  */
d5595 2
a5596 2
      ast_interface_block *block = (yyvsp[0].interface_block);
      if (!block->layout.merge_qualifier(& (yylsp[-1]), state, (yyvsp[-1].type_qualifier))) {
a5600 1
#line 6148 "glsl_parser.cpp" /* yacc.c:1646  */
d5603 3
a5605 2
  case 368:
#line 2347 "glsl_parser.yy" /* yacc.c:1646  */
d5607 1
a5607 1
      ast_interface_block *const block = (yyvsp[-1].interface_block);
d5609 2
a5610 2
      block->block_name = (yyvsp[-5].identifier);
      block->declarations.push_degenerate_list_at_head(& (yyvsp[-3].declarator_list)->link);
d5612 3
a5614 3
      if ((yyvsp[-6].type_qualifier).flags.q.uniform) {
         if (!state->has_uniform_buffer_objects()) {
            _mesa_glsl_error(& (yylsp[-6]), state,
d5616 1
a5616 1
                             "required for defining uniform blocks");
d5618 1
a5618 1
            _mesa_glsl_warning(& (yylsp[-6]), state,
d5620 1
a5620 1
                               "required for defining uniform blocks");
d5624 1
a5624 1
            _mesa_glsl_error(& (yylsp[-6]), state,
d5626 1
a5626 1
                             "interface blocks");
d5634 2
a5635 2
      if ((state->stage == MESA_SHADER_VERTEX) && (yyvsp[-6].type_qualifier).flags.q.in) {
         _mesa_glsl_error(& (yylsp[-6]), state,
d5637 3
a5639 3
                          "a vertex shader");
      } else if ((state->stage == MESA_SHADER_FRAGMENT) && (yyvsp[-6].type_qualifier).flags.q.out) {
         _mesa_glsl_error(& (yylsp[-6]), state,
d5641 1
a5641 1
                          "a fragment shader");
d5649 1
a5649 1
         state->check_version(150, 300, & (yylsp[-6]), "interface blocks with "
d5653 1
a5653 1
      uint64_t interface_type_mask;
d5669 1
a5669 1
      uint64_t block_interface_qualifier = (yyvsp[-6].type_qualifier).flags.i;
d5690 1
a5690 1
            _mesa_glsl_error(& (yylsp[-6]), state,
d5693 1
a5693 1
                             "the interface block");
a5698 1
#line 6246 "glsl_parser.cpp" /* yacc.c:1646  */
d5701 3
a5703 2
  case 369:
#line 2444 "glsl_parser.yy" /* yacc.c:1646  */
a5707 1
#line 6255 "glsl_parser.cpp" /* yacc.c:1646  */
d5710 3
a5712 2
  case 370:
#line 2449 "glsl_parser.yy" /* yacc.c:1646  */
a5716 1
#line 6264 "glsl_parser.cpp" /* yacc.c:1646  */
d5719 3
a5721 2
  case 371:
#line 2454 "glsl_parser.yy" /* yacc.c:1646  */
a5725 1
#line 6273 "glsl_parser.cpp" /* yacc.c:1646  */
d5728 3
a5730 2
  case 372:
#line 2462 "glsl_parser.yy" /* yacc.c:1646  */
a5734 1
#line 6282 "glsl_parser.cpp" /* yacc.c:1646  */
d5737 12
a5748 2
  case 373:
#line 2467 "glsl_parser.yy" /* yacc.c:1646  */
d5751 1
a5751 2
                                          (yyvsp[0].identifier), NULL);
      (yyval.interface_block)->set_location((yylsp[0]));
a5752 1
#line 6292 "glsl_parser.cpp" /* yacc.c:1646  */
d5755 3
a5757 2
  case 374:
#line 2473 "glsl_parser.yy" /* yacc.c:1646  */
d5759 3
d5763 1
a5763 2
                                          (yyvsp[-1].identifier), (yyvsp[0].array_specifier));
      (yyval.interface_block)->set_location_range((yylsp[-1]), (yylsp[0]));
a5764 1
#line 6302 "glsl_parser.cpp" /* yacc.c:1646  */
d5767 3
a5769 2
  case 375:
#line 2482 "glsl_parser.yy" /* yacc.c:1646  */
d5771 2
a5772 2
      (yyval.declarator_list) = (yyvsp[0].declarator_list);
      (yyvsp[0].declarator_list)->link.self_link();
a5773 1
#line 6311 "glsl_parser.cpp" /* yacc.c:1646  */
d5776 3
a5778 2
  case 376:
#line 2487 "glsl_parser.yy" /* yacc.c:1646  */
d5780 2
a5781 2
      (yyval.declarator_list) = (yyvsp[-1].declarator_list);
      (yyvsp[0].declarator_list)->link.insert_before(& (yyval.declarator_list)->link);
a5782 1
#line 6320 "glsl_parser.cpp" /* yacc.c:1646  */
d5785 3
a5787 2
  case 377:
#line 2495 "glsl_parser.yy" /* yacc.c:1646  */
d5790 2
a5791 2
      ast_fully_specified_type *type = (yyvsp[-2].fully_specified_type);
      type->set_location((yylsp[-2]));
d5794 1
a5794 1
         _mesa_glsl_error(& (yylsp[-2]), state,
d5796 1
a5796 1
                          "interface block member");
d5798 1
a5798 1
         _mesa_glsl_error(& (yylsp[-2]), state,
d5800 1
a5800 1
                          "interface block member");
d5804 1
a5804 1
      (yyval.declarator_list)->set_location((yylsp[-1]));
d5806 1
a5806 1
      (yyval.declarator_list)->declarations.push_degenerate_list_at_head(& (yyvsp[-1].declaration)->link);
a5807 1
#line 6345 "glsl_parser.cpp" /* yacc.c:1646  */
d5810 3
a5812 13
  case 378:
#line 2519 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if (!state->default_uniform_qualifier->merge_qualifier(& (yylsp[-2]), state, (yyvsp[-2].type_qualifier))) {
         YYERROR;
      }
      (yyval.node) = NULL;
   }
#line 6356 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 379:
#line 2527 "glsl_parser.yy" /* yacc.c:1646  */
d5814 1
a5814 2
      (yyval.node) = NULL;
      if (!state->in_qualifier->merge_in_qualifier(& (yylsp[-2]), state, (yyvsp[-2].type_qualifier), (yyval.node))) {
a5817 30
#line 6367 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 380:
#line 2535 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if (state->stage != MESA_SHADER_GEOMETRY) {
         _mesa_glsl_error(& (yylsp[-2]), state,
                          "out layout qualifiers only valid in "
                          "geometry shaders");
      } else {
         if ((yyvsp[-2].type_qualifier).flags.q.prim_type) {
            /* Make sure this is a valid output primitive type. */
            switch ((yyvsp[-2].type_qualifier).prim_type) {
            case GL_POINTS:
            case GL_LINE_STRIP:
            case GL_TRIANGLE_STRIP:
               break;
            default:
               _mesa_glsl_error(&(yylsp[-2]), state, "invalid geometry shader output "
                                "primitive type");
               break;
            }
         }
         if (!state->out_qualifier->merge_qualifier(& (yylsp[-2]), state, (yyvsp[-2].type_qualifier)))
            YYERROR;
      }
      (yyval.node) = NULL;
   }
#line 6396 "glsl_parser.cpp" /* yacc.c:1646  */
d5821 2
a5822 1
#line 6400 "glsl_parser.cpp" /* yacc.c:1646  */
d5845 1
a5845 1
  /* Now 'shift' the result of the reduction.  Determine what state
d5860 3
a5862 3
/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
d5913 1
a5913 1
         error, discard it.  */
d5916 5
a5920 5
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
d5922 5
a5926 5
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, state);
          yychar = YYEMPTY;
        }
d5946 1
a5946 1
  /* Do not reclaim the symbols of the rule whose action triggered
d5959 1
a5959 1
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */
d5965 9
a5973 9
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }
d5977 1
a5977 1
        YYABORT;
d5981 1
a5981 1
                  yystos[yystate], yyvsp, yylsp, state);
d6037 1
a6037 1
  /* Do not reclaim the symbols of the rule whose action triggered
d6044 1
a6044 1
                  yystos[*yyssp], yyvsp, yylsp, state);
d6055 2
a6056 1
  return yyresult;
d6058 2
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@a97 3
#ifndef _MSC_VER
#include <strings.h>
#endif
d144 1
a144 1
#line 148 "glsl_parser.cpp" /* yacc.c:339  */
d214 187
a400 187
    SAMPLE = 293,
    NOPERSPECTIVE = 294,
    FLAT = 295,
    SMOOTH = 296,
    MAT2X2 = 297,
    MAT2X3 = 298,
    MAT2X4 = 299,
    MAT3X2 = 300,
    MAT3X3 = 301,
    MAT3X4 = 302,
    MAT4X2 = 303,
    MAT4X3 = 304,
    MAT4X4 = 305,
    SAMPLER1D = 306,
    SAMPLER2D = 307,
    SAMPLER3D = 308,
    SAMPLERCUBE = 309,
    SAMPLER1DSHADOW = 310,
    SAMPLER2DSHADOW = 311,
    SAMPLERCUBESHADOW = 312,
    SAMPLER1DARRAY = 313,
    SAMPLER2DARRAY = 314,
    SAMPLER1DARRAYSHADOW = 315,
    SAMPLER2DARRAYSHADOW = 316,
    SAMPLERCUBEARRAY = 317,
    SAMPLERCUBEARRAYSHADOW = 318,
    ISAMPLER1D = 319,
    ISAMPLER2D = 320,
    ISAMPLER3D = 321,
    ISAMPLERCUBE = 322,
    ISAMPLER1DARRAY = 323,
    ISAMPLER2DARRAY = 324,
    ISAMPLERCUBEARRAY = 325,
    USAMPLER1D = 326,
    USAMPLER2D = 327,
    USAMPLER3D = 328,
    USAMPLERCUBE = 329,
    USAMPLER1DARRAY = 330,
    USAMPLER2DARRAY = 331,
    USAMPLERCUBEARRAY = 332,
    SAMPLER2DRECT = 333,
    ISAMPLER2DRECT = 334,
    USAMPLER2DRECT = 335,
    SAMPLER2DRECTSHADOW = 336,
    SAMPLERBUFFER = 337,
    ISAMPLERBUFFER = 338,
    USAMPLERBUFFER = 339,
    SAMPLER2DMS = 340,
    ISAMPLER2DMS = 341,
    USAMPLER2DMS = 342,
    SAMPLER2DMSARRAY = 343,
    ISAMPLER2DMSARRAY = 344,
    USAMPLER2DMSARRAY = 345,
    SAMPLEREXTERNALOES = 346,
    IMAGE1D = 347,
    IMAGE2D = 348,
    IMAGE3D = 349,
    IMAGE2DRECT = 350,
    IMAGECUBE = 351,
    IMAGEBUFFER = 352,
    IMAGE1DARRAY = 353,
    IMAGE2DARRAY = 354,
    IMAGECUBEARRAY = 355,
    IMAGE2DMS = 356,
    IMAGE2DMSARRAY = 357,
    IIMAGE1D = 358,
    IIMAGE2D = 359,
    IIMAGE3D = 360,
    IIMAGE2DRECT = 361,
    IIMAGECUBE = 362,
    IIMAGEBUFFER = 363,
    IIMAGE1DARRAY = 364,
    IIMAGE2DARRAY = 365,
    IIMAGECUBEARRAY = 366,
    IIMAGE2DMS = 367,
    IIMAGE2DMSARRAY = 368,
    UIMAGE1D = 369,
    UIMAGE2D = 370,
    UIMAGE3D = 371,
    UIMAGE2DRECT = 372,
    UIMAGECUBE = 373,
    UIMAGEBUFFER = 374,
    UIMAGE1DARRAY = 375,
    UIMAGE2DARRAY = 376,
    UIMAGECUBEARRAY = 377,
    UIMAGE2DMS = 378,
    UIMAGE2DMSARRAY = 379,
    IMAGE1DSHADOW = 380,
    IMAGE2DSHADOW = 381,
    IMAGE1DARRAYSHADOW = 382,
    IMAGE2DARRAYSHADOW = 383,
    COHERENT = 384,
    VOLATILE = 385,
    RESTRICT = 386,
    READONLY = 387,
    WRITEONLY = 388,
    ATOMIC_UINT = 389,
    STRUCT = 390,
    VOID_TOK = 391,
    WHILE = 392,
    IDENTIFIER = 393,
    TYPE_IDENTIFIER = 394,
    NEW_IDENTIFIER = 395,
    FLOATCONSTANT = 396,
    INTCONSTANT = 397,
    UINTCONSTANT = 398,
    BOOLCONSTANT = 399,
    FIELD_SELECTION = 400,
    LEFT_OP = 401,
    RIGHT_OP = 402,
    INC_OP = 403,
    DEC_OP = 404,
    LE_OP = 405,
    GE_OP = 406,
    EQ_OP = 407,
    NE_OP = 408,
    AND_OP = 409,
    OR_OP = 410,
    XOR_OP = 411,
    MUL_ASSIGN = 412,
    DIV_ASSIGN = 413,
    ADD_ASSIGN = 414,
    MOD_ASSIGN = 415,
    LEFT_ASSIGN = 416,
    RIGHT_ASSIGN = 417,
    AND_ASSIGN = 418,
    XOR_ASSIGN = 419,
    OR_ASSIGN = 420,
    SUB_ASSIGN = 421,
    INVARIANT = 422,
    PRECISE = 423,
    LOWP = 424,
    MEDIUMP = 425,
    HIGHP = 426,
    SUPERP = 427,
    PRECISION = 428,
    VERSION_TOK = 429,
    EXTENSION = 430,
    LINE = 431,
    COLON = 432,
    EOL = 433,
    INTERFACE = 434,
    OUTPUT = 435,
    PRAGMA_DEBUG_ON = 436,
    PRAGMA_DEBUG_OFF = 437,
    PRAGMA_OPTIMIZE_ON = 438,
    PRAGMA_OPTIMIZE_OFF = 439,
    PRAGMA_INVARIANT_ALL = 440,
    LAYOUT_TOK = 441,
    ASM = 442,
    CLASS = 443,
    UNION = 444,
    ENUM = 445,
    TYPEDEF = 446,
    TEMPLATE = 447,
    THIS = 448,
    PACKED_TOK = 449,
    GOTO = 450,
    INLINE_TOK = 451,
    NOINLINE = 452,
    PUBLIC_TOK = 453,
    STATIC = 454,
    EXTERN = 455,
    EXTERNAL = 456,
    LONG_TOK = 457,
    SHORT_TOK = 458,
    DOUBLE_TOK = 459,
    HALF = 460,
    FIXED_TOK = 461,
    UNSIGNED = 462,
    INPUT_TOK = 463,
    HVEC2 = 464,
    HVEC3 = 465,
    HVEC4 = 466,
    DVEC2 = 467,
    DVEC3 = 468,
    DVEC4 = 469,
    FVEC2 = 470,
    FVEC3 = 471,
    FVEC4 = 472,
    SAMPLER3DRECT = 473,
    SIZEOF = 474,
    CAST = 475,
    NAMESPACE = 476,
    USING = 477,
    RESOURCE = 478,
    PATCH = 479,
d417 1
a417 1
#line 94 "glsl_parser.yy" /* yacc.c:355  */
d454 1
a454 1
#line 458 "glsl_parser.cpp" /* yacc.c:355  */
d482 1
a482 1
#line 486 "glsl_parser.cpp" /* yacc.c:358  */
d726 1
a726 1
#define YYLAST   5400
d733 1
a733 1
#define YYNRULES  385
d735 1
a735 1
#define YYNSTATES  539
d804 39
a842 39
       0,   298,   298,   297,   309,   311,   318,   328,   329,   330,
     331,   332,   345,   347,   351,   352,   353,   357,   366,   374,
     382,   393,   394,   398,   405,   412,   419,   426,   433,   440,
     441,   447,   451,   458,   464,   473,   477,   481,   482,   491,
     492,   496,   497,   501,   507,   519,   523,   529,   537,   548,
     549,   553,   554,   558,   564,   576,   588,   589,   595,   601,
     611,   612,   613,   614,   618,   619,   625,   631,   640,   641,
     647,   656,   657,   663,   672,   673,   679,   685,   691,   700,
     701,   707,   716,   717,   726,   727,   736,   737,   746,   747,
     756,   757,   766,   767,   776,   777,   786,   787,   796,   797,
     798,   799,   800,   801,   802,   803,   804,   805,   806,   810,
     814,   830,   834,   839,   843,   848,   855,   859,   860,   864,
     869,   877,   891,   901,   915,   920,   934,   937,   945,   953,
     965,   978,   983,   988,   997,  1001,  1002,  1012,  1022,  1032,
    1046,  1053,  1063,  1073,  1083,  1093,  1105,  1120,  1127,  1138,
    1145,  1146,  1156,  1157,  1161,  1346,  1485,  1511,  1516,  1524,
    1529,  1534,  1543,  1548,  1553,  1554,  1555,  1556,  1557,  1575,
    1583,  1595,  1619,  1636,  1652,  1672,  1686,  1691,  1699,  1704,
    1709,  1714,  1719,  1738,  1743,  1748,  1753,  1759,  1764,  1772,
    1778,  1784,  1798,  1813,  1814,  1822,  1828,  1834,  1843,  1844,
    1845,  1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,  1854,
    1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,
    1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,
    1875,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,  1884,
    1885,  1886,  1887,  1888,  1889,  1890,  1891,  1892,  1893,  1894,
    1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,  1903,  1904,
    1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,  1913,  1914,
    1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,  1924,
    1925,  1926,  1927,  1928,  1929,  1930,  1931,  1932,  1933,  1934,
    1935,  1936,  1937,  1938,  1939,  1940,  1941,  1942,  1943,  1947,
    1952,  1957,  1965,  1972,  1981,  1986,  1994,  2013,  2018,  2026,
    2032,  2041,  2042,  2046,  2053,  2060,  2067,  2073,  2074,  2078,
    2079,  2080,  2081,  2082,  2083,  2087,  2094,  2093,  2107,  2108,
    2112,  2118,  2127,  2137,  2149,  2155,  2164,  2173,  2178,  2186,
    2190,  2208,  2216,  2221,  2229,  2234,  2242,  2250,  2258,  2266,
    2274,  2282,  2290,  2297,  2304,  2314,  2315,  2319,  2321,  2327,
    2332,  2341,  2347,  2353,  2359,  2365,  2374,  2375,  2376,  2377,
    2381,  2395,  2399,  2422,  2527,  2532,  2537,  2546,  2550,  2556,
    2565,  2570,  2578,  2602,  2610,  2618
d856 3
a858 3
  "UNIFORM", "VARYING", "SAMPLE", "NOPERSPECTIVE", "FLAT", "SMOOTH",
  "MAT2X2", "MAT2X3", "MAT2X4", "MAT3X2", "MAT3X3", "MAT3X4", "MAT4X2",
  "MAT4X3", "MAT4X4", "SAMPLER1D", "SAMPLER2D", "SAMPLER3D", "SAMPLERCUBE",
d885 11
a895 11
  "OR_ASSIGN", "SUB_ASSIGN", "INVARIANT", "PRECISE", "LOWP", "MEDIUMP",
  "HIGHP", "SUPERP", "PRECISION", "VERSION_TOK", "EXTENSION", "LINE",
  "COLON", "EOL", "INTERFACE", "OUTPUT", "PRAGMA_DEBUG_ON",
  "PRAGMA_DEBUG_OFF", "PRAGMA_OPTIMIZE_ON", "PRAGMA_OPTIMIZE_OFF",
  "PRAGMA_INVARIANT_ALL", "LAYOUT_TOK", "ASM", "CLASS", "UNION", "ENUM",
  "TYPEDEF", "TEMPLATE", "THIS", "PACKED_TOK", "GOTO", "INLINE_TOK",
  "NOINLINE", "PUBLIC_TOK", "STATIC", "EXTERN", "EXTERNAL", "LONG_TOK",
  "SHORT_TOK", "DOUBLE_TOK", "HALF", "FIXED_TOK", "UNSIGNED", "INPUT_TOK",
  "HVEC2", "HVEC3", "HVEC4", "DVEC2", "DVEC3", "DVEC4", "FVEC2", "FVEC3",
  "FVEC4", "SAMPLER3DRECT", "SIZEOF", "CAST", "NAMESPACE", "USING",
  "RESOURCE", "PATCH", "SUBROUTINE", "ERROR_TOK", "COMMON", "PARTITION",
d976 1
a976 1
#define YYPACT_NINF -405
d979 1
a979 1
  (!!((Yystate) == (-405)))
d981 1
a981 1
#define YYTABLE_NINF -377
d990 54
a1043 54
     -98,   -37,    78,  -405,   -85,  -405,   -72,  -405,  -405,  -405,
    -405,   -70,    68,  4796,  -405,  -405,   -59,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,   -17,     2,    14,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -115,  -405,  -405,   264,   264,  -405,  -405,
    -405,    43,   -47,   -18,    26,    41,    52,   -66,  -405,  4612,
    -405,  -144,  -114,   -63,    11,  -191,  -405,    77,   313,  5089,
    5261,  5089,  5089,  -405,   -77,  -405,  5089,  -405,  -405,  -405,
    -405,  -405,    49,  -405,    68,  4967,   -83,  -405,  -405,  -405,
    -405,  -405,  5089,  5089,  -405,  5089,  -405,  -405,  -405,  5261,
    -405,  -405,  -405,  -405,  -405,   -80,  -405,  -405,  -405,   524,
    -405,  -405,    32,    32,  -405,  -405,  -405,    32,  -405,  5261,
      32,    32,    68,  -405,   -12,     0,  -203,     3,  -124,  -120,
    -119,  -405,  -405,  -405,  -405,  -405,  -405,  3585,     9,  -405,
      -8,    73,    68,  1272,  -405,  4967,    -2,  -405,  -405,     4,
    -201,  -405,  -405,     8,    10,  1967,    21,    30,    12,  3144,
      38,    39,  -405,  -405,  -405,  -405,  -405,  3987,  3987,  3987,
    -405,  -405,  -405,  -405,  -405,    17,  -405,    42,  -405,  -108,
    -405,  -405,  -405,    40,   -90,  4188,    44,   -76,  3987,   -20,
     -42,    63,   -54,    74,    35,    31,    34,   131,   130,  -125,
    -405,  -405,  -138,  -405,    37,  5109,    56,  -405,  -405,  -405,
    -405,   778,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,    68,  -405,  -405,  -192,  2921,  -161,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,    58,  -405,  3786,  4967,  -405,
     -77,  -137,  -405,  -405,  -405,  1493,  -405,    86,  -405,   -80,
    -405,  -405,   155,  2460,  3987,  -405,  -405,  -126,  3987,  3384,
    -405,  -405,   -75,  -405,  1967,  -405,  -405,  3987,    77,  -405,
    -405,  3987,    61,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,  -405,  3987,  -405,  3987,  3987,
    3987,  3987,  3987,  3987,  3987,  3987,  3987,  3987,  3987,  3987,
    3987,  3987,  3987,  3987,  3987,  3987,  3987,  3987,  3987,  -405,
    -405,  -405,   -77,  2921,  -158,  2921,  -405,  -405,  2921,  -405,
    -405,    70,    68,    51,  4967,     9,    68,  -405,  -405,  -405,
    -405,  -405,  -405,    66,  -405,  -405,  3384,   -69,  -405,   -64,
      71,    68,    76,  -405,  1032,    72,    71,  -405,    79,  -405,
      80,   -51,  4389,  -405,  -405,  -405,  -405,  -405,   -20,   -20,
     -42,   -42,    63,    63,    63,    63,   -54,   -54,    74,    35,
      31,    34,   131,   130,  -210,  -405,     9,  -405,  2921,  -405,
    -147,  -405,  -405,  -113,   173,  -405,  -405,  3987,  -405,    65,
      87,  1967,    69,    67,  2220,  -405,  -405,  -405,  -405,  -405,
    3987,    89,  -405,  3987,  -405,  2698,  -405,  -405,   -77,    75,
     -39,  3987,  2220,   316,  -405,   -10,  -405,  2921,  -405,  -405,
    -405,  -405,  -405,  -405,  -405,     9,  -405,    83,    71,  -405,
    1967,  3987,    81,  -405,  -405,  1714,  1967,    -6,  -405,  -405,
    -405,  -139,  -405,  -405,  -405,  -405,  -405,  1967,  -405
d1052 53
a1104 53
       5,     0,     0,     0,    13,     6,     0,   179,   178,   202,
     199,   200,   201,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   203,   204,   205,   176,   181,   182,   183,   180,
     177,   161,   160,   159,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   227,   228,   230,   231,   233,
     234,   235,   236,   237,   239,   240,   241,   242,   244,   245,
     246,   247,   249,   250,   251,   253,   254,   255,   256,   258,
     226,   243,   252,   232,   238,   248,   257,   259,   260,   261,
     262,   263,   264,   229,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   184,   185,   186,
     187,   188,   298,     0,   198,   197,   162,   163,   301,   300,
     299,     0,     0,     0,     0,     0,     0,     0,   368,     3,
     367,     0,     0,   118,   126,     0,   135,   140,   167,   166,
       0,   164,   165,   147,   193,   195,   168,   196,    18,   366,
     115,   371,     0,   369,     0,     0,     0,   181,   182,   183,
      21,    22,   162,   163,   145,   167,   170,   146,   169,     0,
       7,     8,     9,    10,    11,     0,    20,    19,   112,     0,
     370,   116,   126,   126,   131,   132,   133,   126,   119,     0,
     126,   126,     0,   113,    14,    16,   141,     0,   181,   182,
     183,   172,   372,   171,   148,   173,   174,     0,   194,   175,
       0,     0,     0,     0,   304,     0,     0,   158,   157,   154,
       0,   150,   156,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,    24,    25,    27,    48,     0,     0,     0,
      60,    61,    62,    63,   334,   326,   330,    23,    29,    56,
      31,    36,    37,     0,     0,    42,     0,    64,     0,    68,
      71,    74,    79,    82,    84,    86,    88,    90,    92,    94,
      96,   109,     0,   316,     0,   167,   147,   319,   332,   318,
     317,     0,   320,   321,   322,   323,   324,   120,   127,   128,
     124,   125,   134,   129,   130,   136,     0,   142,   121,   384,
     385,   383,   189,    64,   111,     0,    46,     0,     0,    17,
     309,     0,   307,   303,   305,     0,   114,     0,   149,     0,
     362,   361,     0,     0,     0,   365,   363,     0,     0,     0,
      57,    58,     0,   325,     0,    33,    34,     0,     0,    40,
      39,     0,   198,    43,    45,    99,   100,   102,   101,   104,
     105,   106,   107,   108,   103,    98,     0,    59,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   335,
     331,   333,   122,     0,   137,     0,   311,   144,     0,   190,
     191,     0,     0,     0,   380,   310,     0,   306,   302,   152,
     153,   155,   151,     0,   356,   355,   358,     0,   364,     0,
     339,     0,     0,    28,     0,     0,    35,    32,     0,    38,
       0,     0,    52,    44,    97,    65,    66,    67,    69,    70,
      72,    73,    77,    78,    75,    76,    80,    81,    83,    85,
      87,    89,    91,    93,     0,   110,   123,   139,     0,   314,
       0,   143,   192,     0,   377,   381,   308,     0,   357,     0,
       0,     0,     0,     0,     0,   327,    30,    55,    50,    49,
       0,   198,    53,     0,   138,     0,   312,   382,   378,     0,
       0,   359,     0,   338,   336,     0,   341,     0,   329,   352,
     328,    54,    95,   313,   315,   379,   373,     0,   360,   354,
       0,     0,     0,   342,   346,     0,   350,     0,   340,   353,
     337,     0,   345,   348,   347,   349,   343,   351,   344
d1110 11
a1120 11
    -405,  -405,  -405,  -405,  -405,  -405,    -1,   176,  -405,  -118,
    -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,  -405,
    -405,  -405,  -405,  -405,    -9,  -405,  -143,  -142,  -317,  -129,
     -52,   -50,   -53,   -46,   -40,   -38,  -405,  -205,  -237,  -405,
    -242,    29,    -3,     1,  -405,  -405,  -405,  -405,   142,   -58,
    -405,  -405,  -405,  -405,  -171,   -11,  -405,  -405,    20,  -405,
    -405,  -110,  -405,  -405,  -211,   -13,  -405,  -405,   124,  -405,
     125,  -198,   -49,   -55,  -374,  -405,    19,  -244,  -404,  -405,
    -405,  -136,   213,    13,    22,  -405,  -405,   -36,  -405,  -405,
    -157,  -405,  -135,  -405,  -405,  -405,  -405,  -405,  -405,   239,
    -405,  -405,  -152,  -405,  -405,   -25,  -405,  -405
d1126 11
a1136 11
      -1,     2,    13,     3,   148,     6,   330,    14,   149,   267,
     268,   269,   435,   270,   271,   272,   273,   274,   275,   276,
     439,   440,   441,   442,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   376,
     292,   325,   293,   294,   152,   153,   154,   310,   208,   209,
     210,   311,   155,   156,   157,   185,   240,   421,   241,   242,
     159,   160,   161,   162,   228,   326,   164,   165,   166,   167,
     233,   234,   331,   332,   407,   470,   297,   298,   299,   300,
     354,   509,   510,   301,   302,   303,   504,   432,   304,   506,
     524,   525,   526,   527,   305,   426,   479,   480,   306,   168,
     169,   170,   171,   172,   499,   413,   414,   173
d1144 190
a1333 68
     163,   342,   158,    11,   232,   317,   222,   347,   521,   522,
     150,    16,   521,   522,   151,   203,  -374,   352,   184,   187,
    -375,  -376,   324,     7,     8,     9,   186,   188,   398,   467,
     396,   469,   227,   338,   471,   334,   203,   339,   363,   217,
     355,   356,   493,   227,   204,   205,   206,   212,   221,   223,
     316,   225,   226,     7,     8,     9,   229,   401,     7,     8,
       9,   403,   232,   213,   232,   204,   205,   206,   452,   453,
     454,   455,   186,   188,   327,   221,     1,   327,     5,   406,
     508,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   495,   408,    10,   494,   468,   385,   386,   508,   398,
     398,   416,   427,    12,   404,     4,   429,   430,    15,   496,
     198,   199,   398,   538,   237,   436,   399,   417,   174,   415,
     201,   514,   324,  -374,   443,   416,   397,   357,   428,   358,
     319,   190,   176,   528,   320,   321,   163,   334,   158,   444,
     175,   497,  -375,   222,   360,   308,   150,   224,   361,   309,
     151,   238,   313,   314,  -376,   464,   216,   412,   227,   433,
     191,   465,   163,   398,   232,   481,   406,   195,   406,   398,
     482,   406,   235,   231,   398,   202,   236,   375,   431,   207,
     138,   139,   140,   489,   430,   221,   296,   490,   295,   230,
     401,   466,   387,   388,   239,   517,   312,   381,   382,   398,
     207,   138,   139,   140,   192,   492,     7,     8,     9,   383,
     384,   315,   138,   139,   140,   214,     8,   215,   323,   193,
     163,   -21,   163,   378,   379,   380,   389,   390,   419,   420,
     194,   406,   296,   -22,   295,   500,   318,   503,   448,   449,
     438,   450,   451,   412,   327,  -117,   523,   328,   350,   351,
     536,   329,   336,   511,   343,   431,   512,   337,   406,   518,
     456,   457,   340,   344,   341,   189,   345,    17,    18,   377,
     406,   348,   349,   353,   359,   -47,   530,   364,   211,   531,
     392,   533,   535,   391,   393,   394,   395,   515,   296,   -46,
     295,   198,   423,   535,   409,   -41,    35,   177,   178,   477,
     179,    39,    40,    41,    42,    43,   472,   474,   486,   398,
     484,   402,   487,   498,   488,   163,    17,    18,   323,   501,
     507,   502,   163,   -51,   505,   196,   211,   211,   520,   516,
     296,   211,   295,   532,   211,   211,   296,   529,   239,   458,
     460,   296,   459,   295,   307,    35,   218,   219,   461,   220,
      39,    40,    41,    42,    43,   462,   411,   437,   463,   422,
     335,   476,   424,   473,   200,   425,   519,   434,   534,   445,
     446,   447,   323,   323,   323,   323,   323,   323,   323,   323,
     323,   323,   323,   323,   323,   323,   323,   323,   197,   475,
     478,     0,   537,   127,   128,   129,   130,   131,     0,     0,
       0,   163,   180,     0,   181,     0,     0,     0,     0,     0,
       0,     0,     0,   296,     0,     0,     0,     0,     0,     0,
       0,   296,     0,   295,     0,     0,     0,     0,     0,     0,
     483,   182,   183,   138,   139,   140,     0,     0,     0,     0,
       0,     0,   127,   128,   129,   130,   131,     0,     0,     0,
     147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   296,     0,
     295,   296,     0,   295,     0,     0,     0,     0,     0,     0,
     182,   183,   138,   139,   140,     0,     0,     0,     0,   296,
       0,   295,     0,     0,     0,     0,     0,     0,     0,   147,
       0,     0,     0,     0,     0,     0,     0,   296,     0,   295,
       0,     0,   296,   296,   295,   295,     0,     0,     0,     0,
       0,     0,     0,     0,   296,     0,   295,    17,    18,    19,
      20,    21,    22,   243,   244,   245,     0,   246,   247,   248,
     249,   250,     0,     0,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,     0,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
       0,     0,     0,   127,   128,   129,   130,   131,   132,   133,
     134,   251,   180,   135,   181,   252,   253,   254,   255,   256,
       0,     0,   257,   258,     0,     0,     0,     0,     0,     0,
d1335 1
a1335 1
       0,   136,   137,   138,   139,   140,     0,   141,     0,     0,
d1337 1
a1337 1
     147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d1341 2
a1342 18
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
       0,     0,     0,   260,   261,   262,   263,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   264,   265,
     266,    17,    18,    19,    20,    21,    22,   243,   244,   245,
       0,   246,   247,   248,   249,   250,     0,     0,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,     0,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,     0,     0,     0,     0,   127,   128,   129,
     130,   131,   132,   133,   134,   251,   180,   135,   181,   252,
     253,   254,   255,   256,     0,     0,   257,   258,     0,     0,
d1344 15
a1358 3
       0,     0,     0,     0,     0,   136,   137,   138,   139,   140,
       0,   141,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   147,     0,     0,     0,     0,     0,
d1360 3
d1366 5
a1370 4
       0,   259,     0,     0,     0,     0,     0,   260,   261,   262,
     263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   264,   265,   400,    17,    18,    19,    20,    21,
      22,   243,   244,   245,     0,   246,   247,   248,   249,   250,
d1381 7
a1387 8
     120,   121,   122,   123,   124,   125,   126,     0,     0,     0,
       0,   127,   128,   129,   130,   131,   132,   133,   134,   251,
     180,   135,   181,   252,   253,   254,   255,   256,     0,     0,
     257,   258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   136,
     137,   138,   139,   140,     0,   141,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   147,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d1391 4
a1394 3
       0,     0,     0,     0,     0,   259,     0,     0,     0,     0,
       0,   260,   261,   262,   263,    17,    18,    19,    20,    21,
      22,     0,     0,     0,     0,     0,   264,   265,   485,     0,
d1396 1
a1396 1
      31,    32,    33,    34,    35,   177,   178,     0,   179,    39,
d1405 29
a1433 7
     120,   121,   122,   123,   124,   125,   126,     0,     0,     0,
       0,   127,   128,   129,   130,   131,   132,   133,   134,     0,
       0,   135,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   182,
     183,   138,   139,   140,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   147,     0,
d1437 7
a1443 5
       0,     0,     0,     0,     0,     0,    17,    18,    19,    20,
      21,    22,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,   177,   178,   333,   179,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
d1451 10
a1460 3
     119,   120,   121,   122,   123,   124,   125,   126,     0,     0,
       0,     0,   127,   128,   129,   130,   131,   132,   133,   134,
       0,     0,   135,     0,     0,     0,     0,     0,     0,     0,
d1462 39
d1502 1
a1502 2
     182,   183,   138,   139,   140,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   147,
d1504 1
a1506 16
       0,     0,     0,     0,     0,     0,     0,    17,    18,    19,
      20,    21,    22,   243,   244,   245,     0,   246,   247,   248,
     249,   250,   521,   522,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,   418,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
       0,     0,     0,   127,   128,   129,   130,   131,   132,   133,
     134,   251,   180,   135,   181,   252,   253,   254,   255,   256,
       0,     0,   257,   258,     0,     0,     0,     0,     0,     0,
d1508 16
a1523 1
       0,   136,   137,   138,   139,   140,     0,   141,     0,     0,
a1524 1
     147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a1527 18
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
       0,     0,     0,   260,   261,   262,   263,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   264,   265,
      17,    18,    19,    20,    21,    22,   243,   244,   245,     0,
     246,   247,   248,   249,   250,     0,     0,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,     0,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,     0,     0,     0,     0,   127,   128,   129,   130,
     131,   132,   133,   134,   251,   180,   135,   181,   252,   253,
     254,   255,   256,     0,     0,   257,   258,     0,     0,     0,
a1528 3
       0,     0,     0,     0,   136,   137,   138,   139,   140,     0,
     141,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   147,     0,     0,     0,     0,     0,     0,
d1530 16
a1548 1
     259,     0,     0,     0,     0,     0,   260,   261,   262,   263,
a1549 15
       0,   264,   265,    17,    18,    19,    20,    21,    22,   243,
     244,   245,     0,   246,   247,   248,   249,   250,     0,     0,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,     0,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,     0,     0,     0,     0,   127,
     128,   129,   130,   131,   132,   133,   134,   251,   180,   135,
     181,   252,   253,   254,   255,   256,     0,     0,   257,   258,
a1550 3
       0,     0,     0,     0,     0,     0,     0,   136,   137,   138,
     139,   140,     0,   141,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   147,     0,     0,     0,
d1553 15
a1569 16
       0,     0,     0,   259,     0,     0,     0,     0,     0,   260,
     261,   262,   263,    17,    18,    19,    20,    21,    22,     0,
       0,     0,     0,     0,   264,   199,     0,     0,     0,     0,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,     0,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,     0,     0,     0,     0,   127,
     128,   129,   130,   131,   132,   133,   134,     0,   180,   135,
     181,   252,   253,   254,   255,   256,     0,     0,   257,   258,
a1570 3
       0,     0,     0,     0,     0,     0,     0,   136,   137,   138,
     139,   140,     0,   141,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   147,     0,     0,     0,
d1575 2
a1576 3
       0,     0,     0,   259,     0,     0,     0,     0,     0,   260,
     261,   262,   263,    19,    20,    21,    22,     0,     0,     0,
       0,     0,     0,     0,   264,     0,     0,     0,    23,    24,
d1578 1
a1578 1
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d1587 3
a1589 3
     124,   125,   126,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,   134,     0,   180,   135,   181,   252,
     253,   254,   255,   256,     0,     0,   257,   258,     0,     0,
d1598 4
a1601 4
       0,   259,     0,     0,     0,     0,     0,   260,   261,   262,
     263,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,   405,   513,     0,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,    47,    48,    49,    50,
d1609 3
a1611 4
     121,   122,   123,   124,   125,   126,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,   133,   134,     0,   180,
     135,   181,   252,   253,   254,   255,   256,     0,     0,   257,
     258,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a1617 16
       0,     0,     0,     0,     0,     0,     0,     0,     0,    19,
      20,    21,    22,     0,   259,     0,     0,     0,     0,     0,
     260,   261,   262,   263,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,   405,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
     134,     0,   180,   135,   181,   252,   253,   254,   255,   256,
       0,     0,   257,   258,     0,     0,     0,     0,     0,     0,
d1619 5
a1623 12
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
       0,     0,     0,   260,   261,   262,   263,    17,    18,    19,
      20,    21,    22,     0,     0,     0,     0,     0,   346,     0,
       0,     0,     0,     0,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,   177,   178,     0,
     179,    39,    40,    41,    42,    43,    44,    45,    46,    47,
d1631 3
a1633 24
     118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
       0,     0,     0,   127,   128,   129,   130,   131,   132,   133,
     134,     0,   180,   135,   181,   252,   253,   254,   255,   256,
       0,     0,   257,   258,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   182,   183,   138,   139,   140,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      19,    20,    21,    22,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,   259,     0,     0,
       0,     0,     0,   260,   261,   262,   263,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   132,
     133,   134,     0,   180,   135,   181,   252,   253,   254,   255,
     256,     0,     0,   257,   258,     0,     0,     0,     0,     0,
d1636 21
d1660 1
a1660 15
       0,    19,    20,    21,    22,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   259,     0,
       0,   322,     0,     0,   260,   261,   262,   263,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,   134,     0,   180,   135,   181,   252,   253,   254,
     255,   256,     0,     0,   257,   258,     0,     0,     0,     0,
d1663 1
d1665 1
d1667 129
a1795 5
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    19,    20,    21,    22,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,   259,
       0,     0,   410,     0,     0,   260,   261,   262,   263,    44,
d1803 15
a1817 11
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   132,   133,   134,     0,   180,   135,   181,   252,   253,
     254,   255,   256,     0,     0,   257,   258,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    19,    20,    21,    22,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    23,    24,
d1819 49
a1867 1
     259,     0,     0,     0,     0,     0,   260,   261,   262,   263,
d1876 18
a1893 100
     124,   125,   126,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,   362,     0,   180,   135,   181,   252,
     253,   254,   255,   256,     0,     0,   257,   258,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    19,    20,    21,    22,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,   259,     0,     0,     0,     0,     0,   260,   261,   262,
     263,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   132,   133,   491,     0,   180,   135,   181,
     252,   253,   254,   255,   256,     0,     0,   257,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    17,    18,    19,    20,    21,
      22,     0,   259,     0,     0,     0,     0,     0,   260,   261,
     262,   263,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,     0,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,     0,     0,     0,
       0,   127,   128,   129,   130,   131,   132,   133,   134,     0,
       0,   135,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   136,
     137,   138,   139,   140,     0,   141,     0,    12,     0,     0,
       0,     0,     0,   142,   143,   144,   145,   146,   147,    17,
      18,    19,    20,    21,    22,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,     0,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,     0,     0,     0,     0,   127,   128,   129,   130,   131,
     132,   133,   134,     0,     0,   135,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   136,   137,   138,   139,   140,     0,   141,
      17,    18,    19,    20,    21,    22,     0,   142,   143,   144,
     145,   146,   147,     0,     0,     0,     0,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
     177,   178,     0,   179,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,    17,    18,     0,     0,   127,   128,   129,   130,
     131,   132,   133,   134,     0,     0,   135,     0,     0,     0,
       0,     0,    17,    18,     0,     0,     0,     0,     0,     0,
       0,    35,   177,   178,     0,   179,    39,    40,    41,    42,
      43,     0,     0,     0,   182,   183,   138,   139,   140,     0,
       0,    35,    36,    37,     0,    38,    39,    40,    41,    42,
      43,     0,     0,   147,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   127,   128,
     129,   130,   131,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   127,   128,
     129,   130,   131,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   182,   183,   138,   139,
     140,     0,     0,     0,     0,     0,    19,    20,    21,    22,
       0,     0,     0,     0,     0,   147,   182,   183,   138,   139,
     140,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,     0,     0,   147,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,    47,    48,    49,    50,
d1901 3
a1903 75
     121,   122,   123,   124,   125,   126,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,   133,   134,     0,     0,
     135
};

static const yytype_int16 yycheck[] =
{
      13,   245,    13,     4,   175,   216,   158,   249,    18,    19,
      13,    12,    18,    19,    13,     4,   140,   259,   136,   137,
     140,   140,   227,   138,   139,   140,   136,   137,   238,   403,
     155,   405,   235,   234,   408,   233,     4,   238,   275,   157,
     148,   149,   252,   235,    33,    34,    35,   238,   158,   159,
     253,   161,   162,   138,   139,   140,   166,   301,   138,   139,
     140,   253,   233,   254,   235,    33,    34,    35,   385,   386,
     387,   388,   182,   183,   235,   185,   174,   235,     0,   316,
     484,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   238,   253,   178,   468,   253,   150,   151,   502,   238,
     238,   238,   344,   175,   315,   142,   348,   349,   178,   256,
     254,   255,   238,   252,   194,   357,   254,   254,   177,   330,
     234,   495,   327,   140,   361,   238,   251,   235,   254,   237,
     254,   178,   133,   507,   254,   254,   149,   335,   149,   376,
     255,   254,   140,   295,   234,   203,   149,   160,   238,   207,
     149,   231,   210,   211,   140,   397,   157,   328,   235,   234,
     178,   398,   175,   238,   335,   234,   403,   233,   405,   238,
     234,   408,   255,   174,   238,   238,   189,   253,   349,   168,
     169,   170,   171,   234,   426,   295,   199,   238,   199,   140,
     434,   402,   246,   247,   195,   234,   209,   239,   240,   238,
     168,   169,   170,   171,   178,   442,   138,   139,   140,   146,
     147,   212,   169,   170,   171,   138,   139,   140,   227,   178,
     233,   233,   235,   243,   244,   245,   152,   153,   142,   143,
     178,   468,   245,   233,   245,   477,   233,   481,   381,   382,
     358,   383,   384,   414,   235,   234,   256,   255,   257,   258,
     256,   178,   254,   490,   233,   426,   493,   253,   495,   501,
     389,   390,   254,   233,   254,   141,   254,     3,     4,   278,
     507,   233,   233,   256,   234,   233,   520,   233,   154,   521,
     249,   525,   526,   248,   250,   154,   156,   498,   301,   233,
     301,   254,   137,   537,   236,   234,    32,    33,    34,   233,
      36,    37,    38,    39,    40,    41,   236,   256,   236,   238,
     234,   312,   233,   140,   234,   328,     3,     4,   327,   254,
     253,   234,   335,   234,   255,   149,   202,   203,    12,   254,
     343,   207,   343,   252,   210,   211,   349,   254,   339,   391,
     393,   354,   392,   354,   202,    32,    33,    34,   394,    36,
      37,    38,    39,    40,    41,   395,   327,   358,   396,   339,
     235,   416,   343,   412,   151,   343,   502,   354,   525,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   149,   414,
     426,    -1,   527,   129,   130,   131,   132,   133,    -1,    -1,
      -1,   414,   138,    -1,   140,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   426,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   434,    -1,   434,    -1,    -1,    -1,    -1,    -1,    -1,
     431,   167,   168,   169,   170,   171,    -1,    -1,    -1,    -1,
      -1,    -1,   129,   130,   131,   132,   133,    -1,    -1,    -1,
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   481,    -1,
     481,   484,    -1,   484,    -1,    -1,    -1,    -1,    -1,    -1,
     167,   168,   169,   170,   171,    -1,    -1,    -1,    -1,   502,
      -1,   502,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,   520,
      -1,    -1,   525,   526,   525,   526,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   537,    -1,   537,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    -1,    13,    14,    15,
      16,    17,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
      -1,    -1,    -1,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
      -1,    -1,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,
d1905 3
a1907 1
      -1,   167,   168,   169,   170,   171,    -1,   173,    -1,    -1,
a1908 1
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1911 4
a1914 30
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,
      -1,    -1,    -1,   239,   240,   241,   242,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   254,   255,
     256,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      -1,    13,    14,    15,    16,    17,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,    -1,    -1,    -1,    -1,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,    -1,    -1,   148,   149,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
      -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,    -1,   239,   240,   241,
     242,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   254,   255,   256,     3,     4,     5,     6,     7,
d1926 7
a1932 8
     118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
      -1,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,    -1,    -1,
     148,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,    -1,   173,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1936 1
d1939 1
a1939 1
       8,    -1,    -1,    -1,    -1,    -1,   254,   255,   256,    -1,
d1950 7
a1956 7
     118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
      -1,   129,   130,   131,   132,   133,   134,   135,   136,    -1,
      -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,
d1960 29
a1988 5
      -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   256,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
d1996 26
a2021 3
     117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
      -1,    -1,   129,   130,   131,   132,   133,   134,   135,   136,
      -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a2023 2
     167,   168,   169,   170,   171,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,
a2026 16
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    -1,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,   256,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
      -1,    -1,    -1,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
      -1,    -1,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,
a2027 1
      -1,   167,   168,   169,   170,   171,    -1,   173,    -1,    -1,
d2029 41
a2069 1
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a2072 18
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,
      -1,    -1,    -1,   239,   240,   241,   242,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   254,   255,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    -1,
      13,    14,    15,    16,    17,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,    -1,    -1,    -1,    -1,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,    -1,    -1,   148,   149,    -1,    -1,    -1,
a2073 3
      -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,    -1,
     173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,
d2075 16
a2093 1
     233,    -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,
a2094 15
      -1,   254,   255,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    -1,    13,    14,    15,    16,    17,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,    -1,    -1,   148,   149,
a2095 3
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,
d2098 15
a2114 16
      -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,   239,
     240,   241,   242,     3,     4,     5,     6,     7,     8,    -1,
      -1,    -1,    -1,    -1,   254,   255,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,
     130,   131,   132,   133,   134,   135,   136,    -1,   138,   139,
     140,   141,   142,   143,   144,   145,    -1,    -1,   148,   149,
a2115 3
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,
d2120 2
a2121 3
      -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,   239,
     240,   241,   242,     5,     6,     7,     8,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,    20,    21,
d2123 1
a2123 1
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d2132 3
a2134 3
     122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,   136,    -1,   138,   139,   140,   141,
     142,   143,   144,   145,    -1,    -1,   148,   149,    -1,    -1,
d2145 2
a2146 2
      29,    30,    31,   255,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    45,    46,    47,    48,
d2154 4
a2157 4
     119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,   135,   136,    -1,   138,
     139,   140,   141,   142,   143,   144,   145,    -1,    -1,   148,
     149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d2164 1
a2164 1
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
a2166 24
      26,    27,    28,    29,    30,    31,   255,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
     136,    -1,   138,   139,   140,   141,   142,   143,   144,   145,
      -1,    -1,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,
      -1,    -1,    -1,   239,   240,   241,   242,     3,     4,     5,
       6,     7,     8,    -1,    -1,    -1,    -1,    -1,   254,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
d2176 3
a2178 24
     116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
      -1,    -1,    -1,   129,   130,   131,   132,   133,   134,   135,
     136,    -1,   138,   139,   140,   141,   142,   143,   144,   145,
      -1,    -1,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,   233,    -1,    -1,
      -1,    -1,    -1,   239,   240,   241,   242,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,   136,    -1,   138,   139,   140,   141,   142,   143,   144,
     145,    -1,    -1,   148,   149,    -1,    -1,    -1,    -1,    -1,
d2181 21
d2205 1
a2205 56
      -1,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,   233,    -1,
      -1,   236,    -1,    -1,   239,   240,   241,   242,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,   135,   136,    -1,   138,   139,   140,   141,   142,   143,
     144,   145,    -1,    -1,   148,   149,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,   233,
      -1,    -1,   236,    -1,    -1,   239,   240,   241,   242,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,   136,    -1,   138,   139,   140,   141,   142,
     143,   144,   145,    -1,    -1,   148,   149,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     5,     6,     7,     8,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
     233,    -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,   136,    -1,   138,   139,   140,   141,
     142,   143,   144,   145,    -1,    -1,   148,   149,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d2208 1
d2210 1
d2212 4
d2217 1
a2217 1
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
d2219 2
a2220 2
      31,   233,    -1,    -1,    -1,    -1,    -1,   239,   240,   241,
     242,    42,    43,    44,    45,    46,    47,    48,    49,    50,
d2228 2
a2229 90
     121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,   136,    -1,   138,   139,   140,
     141,   142,   143,   144,   145,    -1,    -1,   148,   149,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,
       8,    -1,   233,    -1,    -1,    -1,    -1,    -1,   239,   240,
     241,   242,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
      -1,   129,   130,   131,   132,   133,   134,   135,   136,    -1,
      -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,    -1,   173,    -1,   175,    -1,    -1,
      -1,    -1,    -1,   181,   182,   183,   184,   185,   186,     3,
       4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,    -1,    -1,    -1,    -1,   129,   130,   131,   132,   133,
     134,   135,   136,    -1,    -1,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,    -1,   173,
       3,     4,     5,     6,     7,     8,    -1,   181,   182,   183,
     184,   185,   186,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,     3,     4,    -1,    -1,   129,   130,   131,   132,
     133,   134,   135,   136,    -1,    -1,   139,    -1,    -1,    -1,
      -1,    -1,     3,     4,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    33,    34,    -1,    36,    37,    38,    39,    40,
      41,    -1,    -1,    -1,   167,   168,   169,   170,   171,    -1,
      -1,    32,    33,    34,    -1,    36,    37,    38,    39,    40,
      41,    -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
     131,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
     131,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   167,   168,   169,   170,
     171,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,     8,
      -1,    -1,    -1,    -1,    -1,   186,   167,   168,   169,   170,
     171,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,   186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,   135,   136,    -1,    -1,
     139
d2236 2
a2237 2
       0,   174,   258,   260,   142,     0,   262,   138,   139,   140,
     178,   263,   175,   259,   264,   178,   263,     3,     4,     5,
d2248 42
a2289 42
     118,   119,   120,   121,   122,   123,   124,   129,   130,   131,
     132,   133,   134,   135,   136,   139,   167,   168,   169,   170,
     171,   173,   181,   182,   183,   184,   185,   186,   261,   265,
     299,   300,   301,   302,   303,   309,   310,   311,   312,   317,
     318,   319,   320,   322,   323,   324,   325,   326,   356,   357,
     358,   359,   360,   364,   177,   255,   263,    33,    34,    36,
     138,   140,   167,   168,   266,   312,   318,   266,   318,   325,
     178,   178,   178,   178,   178,   233,   264,   356,   254,   255,
     339,   234,   238,     4,    33,    34,    35,   168,   305,   306,
     307,   325,   238,   254,   138,   140,   263,   266,    33,    34,
      36,   318,   359,   318,   322,   318,   318,   235,   321,   318,
     140,   263,   311,   327,   328,   255,   322,   194,   231,   263,
     313,   315,   316,     9,    10,    11,    13,    14,    15,    16,
      17,   137,   141,   142,   143,   144,   145,   148,   149,   233,
     239,   240,   241,   242,   254,   255,   256,   266,   267,   268,
     270,   271,   272,   273,   274,   275,   276,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   297,   299,   300,   312,   322,   333,   334,   335,
     336,   340,   341,   342,   345,   351,   355,   305,   306,   306,
     304,   308,   322,   306,   306,   263,   253,   321,   233,   254,
     254,   254,   236,   281,   294,   298,   322,   235,   255,   178,
     263,   329,   330,   256,   328,   327,   254,   253,   234,   238,
     254,   254,   334,   233,   233,   254,   254,   297,   233,   233,
     281,   281,   297,   256,   337,   148,   149,   235,   237,   234,
     234,   238,   136,   295,   233,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   253,   296,   281,   243,   244,
     245,   239,   240,   146,   147,   150,   151,   246,   247,   152,
     153,   248,   249,   250,   154,   156,   155,   251,   238,   254,
     256,   334,   263,   253,   321,   255,   295,   331,   253,   236,
     236,   298,   311,   362,   363,   321,   238,   254,   256,   142,
     143,   314,   315,   137,   333,   341,   352,   297,   254,   297,
     297,   311,   344,   234,   340,   269,   297,   263,   266,   277,
     278,   279,   280,   295,   295,   281,   281,   281,   283,   283,
     284,   284,   285,   285,   285,   285,   286,   286,   287,   288,
     289,   290,   291,   292,   297,   295,   321,   331,   253,   331,
     332,   331,   236,   329,   256,   362,   330,   233,   344,   353,
     354,   234,   234,   263,   234,   256,   236,   233,   234,   234,
     238,   136,   295,   252,   331,   238,   256,   254,   140,   361,
     297,   254,   234,   334,   343,   255,   346,   253,   335,   338,
     339,   295,   295,   256,   331,   321,   254,   234,   297,   338,
      12,    18,    19,   256,   347,   348,   349,   350,   331,   254,
     334,   297,   252,   334,   347,   334,   256,   349,   252
d2297 18
a2314 18
     265,   266,   266,   267,   267,   267,   267,   267,   267,   268,
     268,   268,   268,   268,   268,   269,   270,   271,   271,   272,
     272,   273,   273,   274,   274,   275,   276,   276,   276,   277,
     277,   278,   278,   279,   279,   280,   281,   281,   281,   281,
     282,   282,   282,   282,   283,   283,   283,   283,   284,   284,
     284,   285,   285,   285,   286,   286,   286,   286,   286,   287,
     287,   287,   288,   288,   289,   289,   290,   290,   291,   291,
     292,   292,   293,   293,   294,   294,   295,   295,   296,   296,
     296,   296,   296,   296,   296,   296,   296,   296,   296,   297,
     297,   298,   299,   299,   299,   299,   300,   301,   301,   302,
     302,   303,   304,   304,   305,   305,   306,   306,   306,   306,
     306,   307,   307,   307,   308,   309,   309,   309,   309,   309,
     310,   310,   310,   310,   310,   310,   310,   311,   311,   312,
     313,   313,   314,   314,   315,   315,   315,   316,   316,   317,
     317,   317,   318,   318,   318,   318,   318,   318,   318,   318,
     318,   318,   318,   318,   318,   318,   319,   319,   320,   320,
     320,   320,   320,   320,   320,   320,   320,   320,   320,   321,
     321,   321,   321,   322,   322,   323,   323,   323,   324,   324,
d2324 10
a2333 10
     324,   324,   324,   324,   324,   324,   324,   324,   324,   325,
     325,   325,   326,   326,   327,   327,   328,   329,   329,   330,
     330,   331,   331,   331,   332,   332,   333,   334,   334,   335,
     335,   335,   335,   335,   335,   336,   337,   336,   338,   338,
     339,   339,   340,   340,   341,   341,   342,   343,   343,   344,
     344,   345,   346,   346,   347,   347,   348,   348,   349,   349,
     350,   350,   351,   351,   351,   352,   352,   353,   353,   354,
     354,   355,   355,   355,   355,   355,   356,   356,   356,   356,
     357,   358,   358,   359,   360,   360,   360,   361,   361,   361,
     362,   362,   363,   364,   364,   364
d2341 17
a2357 8
       2,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       4,     1,     3,     2,     2,     1,     1,     1,     3,     2,
       2,     2,     1,     2,     3,     2,     1,     1,     1,     2,
       2,     2,     1,     2,     3,     2,     1,     2,     2,     2,
       1,     1,     1,     1,     1,     3,     3,     3,     1,     3,
       3,     1,     3,     3,     1,     3,     3,     3,     3,     1,
       3,     3,     1,     3,     1,     3,     1,     3,     1,     3,
       1,     3,     1,     3,     1,     5,     1,     3,     1,     1,
a2358 9
       3,     1,     2,     2,     4,     1,     2,     1,     1,     2,
       3,     3,     2,     3,     2,     2,     0,     2,     2,     2,
       2,     1,     1,     1,     1,     1,     3,     4,     6,     5,
       1,     2,     3,     5,     4,     2,     2,     1,     2,     4,
       1,     3,     1,     1,     1,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     3,     4,     1,     2,     1,     1,     1,     1,     1,
d2368 10
a2377 10
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     5,     4,     1,     2,     3,     1,     3,     1,
       2,     1,     3,     4,     1,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     4,     1,     1,
       2,     3,     1,     2,     1,     2,     5,     3,     1,     1,
       4,     5,     2,     3,     3,     2,     1,     2,     2,     2,
       1,     2,     5,     7,     6,     1,     1,     1,     0,     2,
       3,     2,     2,     2,     3,     2,     1,     1,     1,     1,
       2,     1,     2,     7,     1,     1,     1,     0,     1,     2,
       1,     2,     3,     3,     3,     3
d2971 1
a2971 1
#line 83 "glsl_parser.yy" /* yacc.c:1429  */
d2980 1
a2980 1
#line 2984 "glsl_parser.cpp" /* yacc.c:1429  */
d3167 1
a3167 1
#line 298 "glsl_parser.yy" /* yacc.c:1646  */
d3171 1
a3171 1
#line 3175 "glsl_parser.cpp" /* yacc.c:1646  */
d3175 1
a3175 1
#line 302 "glsl_parser.yy" /* yacc.c:1646  */
d3181 1
a3181 1
#line 3185 "glsl_parser.cpp" /* yacc.c:1646  */
d3185 1
a3185 1
#line 312 "glsl_parser.yy" /* yacc.c:1646  */
d3192 1
a3192 1
#line 3196 "glsl_parser.cpp" /* yacc.c:1646  */
d3196 1
a3196 1
#line 319 "glsl_parser.yy" /* yacc.c:1646  */
d3203 1
a3203 1
#line 3207 "glsl_parser.cpp" /* yacc.c:1646  */
d3207 1
a3207 1
#line 333 "glsl_parser.yy" /* yacc.c:1646  */
d3218 1
a3218 1
#line 3222 "glsl_parser.cpp" /* yacc.c:1646  */
d3222 1
a3222 1
#line 358 "glsl_parser.yy" /* yacc.c:1646  */
d3228 1
a3228 1
#line 3232 "glsl_parser.cpp" /* yacc.c:1646  */
d3232 1
a3232 1
#line 367 "glsl_parser.yy" /* yacc.c:1646  */
d3240 1
a3240 1
#line 3244 "glsl_parser.cpp" /* yacc.c:1646  */
d3244 1
a3244 1
#line 375 "glsl_parser.yy" /* yacc.c:1646  */
d3252 1
a3252 14
#line 3256 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 20:
#line 382 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if (!state->allow_extension_directive_midshader) {
         _mesa_glsl_error(& (yylsp[0]), state,
                          "#extension directive is not allowed "
                          "in the middle of a shader");
         YYERROR;
      }
   }
#line 3269 "glsl_parser.cpp" /* yacc.c:1646  */
d3255 2
a3256 2
  case 23:
#line 399 "glsl_parser.yy" /* yacc.c:1646  */
d3263 1
a3263 1
#line 3280 "glsl_parser.cpp" /* yacc.c:1646  */
d3266 2
a3267 2
  case 24:
#line 406 "glsl_parser.yy" /* yacc.c:1646  */
d3274 1
a3274 1
#line 3291 "glsl_parser.cpp" /* yacc.c:1646  */
d3277 2
a3278 2
  case 25:
#line 413 "glsl_parser.yy" /* yacc.c:1646  */
d3285 1
a3285 1
#line 3302 "glsl_parser.cpp" /* yacc.c:1646  */
d3288 2
a3289 2
  case 26:
#line 420 "glsl_parser.yy" /* yacc.c:1646  */
d3296 1
a3296 1
#line 3313 "glsl_parser.cpp" /* yacc.c:1646  */
d3299 2
a3300 2
  case 27:
#line 427 "glsl_parser.yy" /* yacc.c:1646  */
d3307 1
a3307 1
#line 3324 "glsl_parser.cpp" /* yacc.c:1646  */
d3310 2
a3311 2
  case 28:
#line 434 "glsl_parser.yy" /* yacc.c:1646  */
d3315 1
a3315 1
#line 3332 "glsl_parser.cpp" /* yacc.c:1646  */
d3318 2
a3319 2
  case 30:
#line 442 "glsl_parser.yy" /* yacc.c:1646  */
d3325 1
a3325 1
#line 3342 "glsl_parser.cpp" /* yacc.c:1646  */
d3328 2
a3329 2
  case 31:
#line 448 "glsl_parser.yy" /* yacc.c:1646  */
d3333 1
a3333 1
#line 3350 "glsl_parser.cpp" /* yacc.c:1646  */
d3336 2
a3337 2
  case 32:
#line 452 "glsl_parser.yy" /* yacc.c:1646  */
d3344 1
a3344 1
#line 3361 "glsl_parser.cpp" /* yacc.c:1646  */
d3347 2
a3348 2
  case 33:
#line 459 "glsl_parser.yy" /* yacc.c:1646  */
d3354 1
a3354 1
#line 3371 "glsl_parser.cpp" /* yacc.c:1646  */
d3357 2
a3358 2
  case 34:
#line 465 "glsl_parser.yy" /* yacc.c:1646  */
d3364 1
a3364 1
#line 3381 "glsl_parser.cpp" /* yacc.c:1646  */
d3367 2
a3368 2
  case 38:
#line 483 "glsl_parser.yy" /* yacc.c:1646  */
d3374 1
a3374 1
#line 3391 "glsl_parser.cpp" /* yacc.c:1646  */
d3377 2
a3378 2
  case 43:
#line 502 "glsl_parser.yy" /* yacc.c:1646  */
d3384 1
a3384 1
#line 3401 "glsl_parser.cpp" /* yacc.c:1646  */
d3387 2
a3388 2
  case 44:
#line 508 "glsl_parser.yy" /* yacc.c:1646  */
d3394 1
a3394 1
#line 3411 "glsl_parser.cpp" /* yacc.c:1646  */
d3397 2
a3398 2
  case 46:
#line 524 "glsl_parser.yy" /* yacc.c:1646  */
d3404 1
a3404 1
#line 3421 "glsl_parser.cpp" /* yacc.c:1646  */
d3407 2
a3408 2
  case 47:
#line 530 "glsl_parser.yy" /* yacc.c:1646  */
d3416 1
a3416 1
#line 3433 "glsl_parser.cpp" /* yacc.c:1646  */
d3419 2
a3420 2
  case 48:
#line 538 "glsl_parser.yy" /* yacc.c:1646  */
d3428 1
a3428 1
#line 3445 "glsl_parser.cpp" /* yacc.c:1646  */
d3431 2
a3432 2
  case 53:
#line 559 "glsl_parser.yy" /* yacc.c:1646  */
d3438 1
a3438 1
#line 3455 "glsl_parser.cpp" /* yacc.c:1646  */
d3441 2
a3442 2
  case 54:
#line 565 "glsl_parser.yy" /* yacc.c:1646  */
d3448 1
a3448 1
#line 3465 "glsl_parser.cpp" /* yacc.c:1646  */
d3451 2
a3452 2
  case 55:
#line 577 "glsl_parser.yy" /* yacc.c:1646  */
d3460 1
a3460 1
#line 3477 "glsl_parser.cpp" /* yacc.c:1646  */
d3463 2
a3464 2
  case 57:
#line 590 "glsl_parser.yy" /* yacc.c:1646  */
d3470 1
a3470 1
#line 3487 "glsl_parser.cpp" /* yacc.c:1646  */
d3473 2
a3474 2
  case 58:
#line 596 "glsl_parser.yy" /* yacc.c:1646  */
d3480 1
a3480 1
#line 3497 "glsl_parser.cpp" /* yacc.c:1646  */
d3483 2
a3484 2
  case 59:
#line 602 "glsl_parser.yy" /* yacc.c:1646  */
d3490 1
a3490 1
#line 3507 "glsl_parser.cpp" /* yacc.c:1646  */
d3493 2
a3494 2
  case 60:
#line 611 "glsl_parser.yy" /* yacc.c:1646  */
d3496 1
a3496 1
#line 3513 "glsl_parser.cpp" /* yacc.c:1646  */
d3499 2
a3500 2
  case 61:
#line 612 "glsl_parser.yy" /* yacc.c:1646  */
d3502 1
a3502 1
#line 3519 "glsl_parser.cpp" /* yacc.c:1646  */
d3505 2
a3506 2
  case 62:
#line 613 "glsl_parser.yy" /* yacc.c:1646  */
d3508 1
a3508 1
#line 3525 "glsl_parser.cpp" /* yacc.c:1646  */
d3511 2
a3512 2
  case 63:
#line 614 "glsl_parser.yy" /* yacc.c:1646  */
d3514 1
a3514 1
#line 3531 "glsl_parser.cpp" /* yacc.c:1646  */
d3517 2
a3518 2
  case 65:
#line 620 "glsl_parser.yy" /* yacc.c:1646  */
d3524 1
a3524 1
#line 3541 "glsl_parser.cpp" /* yacc.c:1646  */
d3527 2
a3528 2
  case 66:
#line 626 "glsl_parser.yy" /* yacc.c:1646  */
d3534 1
a3534 1
#line 3551 "glsl_parser.cpp" /* yacc.c:1646  */
d3537 2
a3538 2
  case 67:
#line 632 "glsl_parser.yy" /* yacc.c:1646  */
d3544 1
a3544 1
#line 3561 "glsl_parser.cpp" /* yacc.c:1646  */
d3547 2
a3548 2
  case 69:
#line 642 "glsl_parser.yy" /* yacc.c:1646  */
d3554 1
a3554 1
#line 3571 "glsl_parser.cpp" /* yacc.c:1646  */
d3557 2
a3558 2
  case 70:
#line 648 "glsl_parser.yy" /* yacc.c:1646  */
d3564 1
a3564 1
#line 3581 "glsl_parser.cpp" /* yacc.c:1646  */
d3567 2
a3568 2
  case 72:
#line 658 "glsl_parser.yy" /* yacc.c:1646  */
d3574 1
a3574 1
#line 3591 "glsl_parser.cpp" /* yacc.c:1646  */
d3577 2
a3578 2
  case 73:
#line 664 "glsl_parser.yy" /* yacc.c:1646  */
d3584 1
a3584 1
#line 3601 "glsl_parser.cpp" /* yacc.c:1646  */
d3587 2
a3588 2
  case 75:
#line 674 "glsl_parser.yy" /* yacc.c:1646  */
d3594 1
a3594 1
#line 3611 "glsl_parser.cpp" /* yacc.c:1646  */
d3597 2
a3598 2
  case 76:
#line 680 "glsl_parser.yy" /* yacc.c:1646  */
d3604 1
a3604 1
#line 3621 "glsl_parser.cpp" /* yacc.c:1646  */
d3607 2
a3608 2
  case 77:
#line 686 "glsl_parser.yy" /* yacc.c:1646  */
d3614 1
a3614 1
#line 3631 "glsl_parser.cpp" /* yacc.c:1646  */
d3617 2
a3618 2
  case 78:
#line 692 "glsl_parser.yy" /* yacc.c:1646  */
d3624 1
a3624 1
#line 3641 "glsl_parser.cpp" /* yacc.c:1646  */
d3627 2
a3628 2
  case 80:
#line 702 "glsl_parser.yy" /* yacc.c:1646  */
d3634 1
a3634 1
#line 3651 "glsl_parser.cpp" /* yacc.c:1646  */
d3637 2
a3638 2
  case 81:
#line 708 "glsl_parser.yy" /* yacc.c:1646  */
d3644 1
a3644 1
#line 3661 "glsl_parser.cpp" /* yacc.c:1646  */
d3647 2
a3648 2
  case 83:
#line 718 "glsl_parser.yy" /* yacc.c:1646  */
d3654 1
a3654 1
#line 3671 "glsl_parser.cpp" /* yacc.c:1646  */
d3657 2
a3658 2
  case 85:
#line 728 "glsl_parser.yy" /* yacc.c:1646  */
d3664 1
a3664 1
#line 3681 "glsl_parser.cpp" /* yacc.c:1646  */
d3667 2
a3668 2
  case 87:
#line 738 "glsl_parser.yy" /* yacc.c:1646  */
d3674 1
a3674 1
#line 3691 "glsl_parser.cpp" /* yacc.c:1646  */
d3677 2
a3678 2
  case 89:
#line 748 "glsl_parser.yy" /* yacc.c:1646  */
d3684 1
a3684 1
#line 3701 "glsl_parser.cpp" /* yacc.c:1646  */
d3687 2
a3688 2
  case 91:
#line 758 "glsl_parser.yy" /* yacc.c:1646  */
d3694 1
a3694 1
#line 3711 "glsl_parser.cpp" /* yacc.c:1646  */
d3697 2
a3698 2
  case 93:
#line 768 "glsl_parser.yy" /* yacc.c:1646  */
d3704 1
a3704 1
#line 3721 "glsl_parser.cpp" /* yacc.c:1646  */
d3707 2
a3708 2
  case 95:
#line 778 "glsl_parser.yy" /* yacc.c:1646  */
d3714 1
a3714 1
#line 3731 "glsl_parser.cpp" /* yacc.c:1646  */
d3717 2
a3718 2
  case 97:
#line 788 "glsl_parser.yy" /* yacc.c:1646  */
d3724 1
a3724 1
#line 3741 "glsl_parser.cpp" /* yacc.c:1646  */
d3727 2
a3728 2
  case 98:
#line 796 "glsl_parser.yy" /* yacc.c:1646  */
d3730 1
a3730 1
#line 3747 "glsl_parser.cpp" /* yacc.c:1646  */
d3733 2
a3734 2
  case 99:
#line 797 "glsl_parser.yy" /* yacc.c:1646  */
d3736 1
a3736 1
#line 3753 "glsl_parser.cpp" /* yacc.c:1646  */
d3739 2
a3740 2
  case 100:
#line 798 "glsl_parser.yy" /* yacc.c:1646  */
d3742 1
a3742 1
#line 3759 "glsl_parser.cpp" /* yacc.c:1646  */
d3745 2
a3746 2
  case 101:
#line 799 "glsl_parser.yy" /* yacc.c:1646  */
d3748 1
a3748 1
#line 3765 "glsl_parser.cpp" /* yacc.c:1646  */
d3751 2
a3752 2
  case 102:
#line 800 "glsl_parser.yy" /* yacc.c:1646  */
d3754 1
a3754 1
#line 3771 "glsl_parser.cpp" /* yacc.c:1646  */
d3757 2
a3758 2
  case 103:
#line 801 "glsl_parser.yy" /* yacc.c:1646  */
d3760 1
a3760 1
#line 3777 "glsl_parser.cpp" /* yacc.c:1646  */
d3763 2
a3764 2
  case 104:
#line 802 "glsl_parser.yy" /* yacc.c:1646  */
d3766 1
a3766 1
#line 3783 "glsl_parser.cpp" /* yacc.c:1646  */
d3769 2
a3770 2
  case 105:
#line 803 "glsl_parser.yy" /* yacc.c:1646  */
d3772 1
a3772 1
#line 3789 "glsl_parser.cpp" /* yacc.c:1646  */
d3775 2
a3776 2
  case 106:
#line 804 "glsl_parser.yy" /* yacc.c:1646  */
d3778 1
a3778 1
#line 3795 "glsl_parser.cpp" /* yacc.c:1646  */
d3781 2
a3782 2
  case 107:
#line 805 "glsl_parser.yy" /* yacc.c:1646  */
d3784 1
a3784 1
#line 3801 "glsl_parser.cpp" /* yacc.c:1646  */
d3787 2
a3788 2
  case 108:
#line 806 "glsl_parser.yy" /* yacc.c:1646  */
d3790 1
a3790 1
#line 3807 "glsl_parser.cpp" /* yacc.c:1646  */
d3793 2
a3794 2
  case 109:
#line 811 "glsl_parser.yy" /* yacc.c:1646  */
d3798 1
a3798 1
#line 3815 "glsl_parser.cpp" /* yacc.c:1646  */
d3801 2
a3802 2
  case 110:
#line 815 "glsl_parser.yy" /* yacc.c:1646  */
d3815 1
a3815 1
#line 3832 "glsl_parser.cpp" /* yacc.c:1646  */
d3818 2
a3819 2
  case 112:
#line 835 "glsl_parser.yy" /* yacc.c:1646  */
d3824 1
a3824 1
#line 3841 "glsl_parser.cpp" /* yacc.c:1646  */
d3827 2
a3828 2
  case 113:
#line 840 "glsl_parser.yy" /* yacc.c:1646  */
d3832 1
a3832 1
#line 3849 "glsl_parser.cpp" /* yacc.c:1646  */
d3835 2
a3836 2
  case 114:
#line 844 "glsl_parser.yy" /* yacc.c:1646  */
d3841 1
a3841 1
#line 3858 "glsl_parser.cpp" /* yacc.c:1646  */
d3844 2
a3845 2
  case 115:
#line 849 "glsl_parser.yy" /* yacc.c:1646  */
d3849 1
a3849 1
#line 3866 "glsl_parser.cpp" /* yacc.c:1646  */
d3852 2
a3853 2
  case 119:
#line 865 "glsl_parser.yy" /* yacc.c:1646  */
d3858 1
a3858 1
#line 3875 "glsl_parser.cpp" /* yacc.c:1646  */
d3861 2
a3862 2
  case 120:
#line 870 "glsl_parser.yy" /* yacc.c:1646  */
d3867 1
a3867 1
#line 3884 "glsl_parser.cpp" /* yacc.c:1646  */
d3870 2
a3871 2
  case 121:
#line 878 "glsl_parser.yy" /* yacc.c:1646  */
d3882 1
a3882 1
#line 3899 "glsl_parser.cpp" /* yacc.c:1646  */
d3885 2
a3886 2
  case 122:
#line 892 "glsl_parser.yy" /* yacc.c:1646  */
d3896 1
a3896 1
#line 3913 "glsl_parser.cpp" /* yacc.c:1646  */
d3899 2
a3900 2
  case 123:
#line 902 "glsl_parser.yy" /* yacc.c:1646  */
d3911 1
a3911 1
#line 3928 "glsl_parser.cpp" /* yacc.c:1646  */
d3914 2
a3915 2
  case 124:
#line 916 "glsl_parser.yy" /* yacc.c:1646  */
d3920 1
a3920 1
#line 3937 "glsl_parser.cpp" /* yacc.c:1646  */
d3923 2
a3924 2
  case 125:
#line 921 "glsl_parser.yy" /* yacc.c:1646  */
d3934 1
a3934 1
#line 3951 "glsl_parser.cpp" /* yacc.c:1646  */
d3937 2
a3938 2
  case 126:
#line 934 "glsl_parser.yy" /* yacc.c:1646  */
d3942 1
a3942 1
#line 3959 "glsl_parser.cpp" /* yacc.c:1646  */
d3945 2
a3946 2
  case 127:
#line 938 "glsl_parser.yy" /* yacc.c:1646  */
d3954 1
a3954 1
#line 3971 "glsl_parser.cpp" /* yacc.c:1646  */
d3957 2
a3958 14
  case 128:
#line 946 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if ((yyvsp[0].type_qualifier).flags.q.precise)
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate precise qualifier");

      (yyval.type_qualifier) = (yyvsp[0].type_qualifier);
      (yyval.type_qualifier).flags.q.precise = 1;
   }
#line 3983 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 129:
#line 954 "glsl_parser.yy" /* yacc.c:1646  */
d3964 2
a3965 2
         _mesa_glsl_error(&(yylsp[-1]), state, "in/out/inout must come after const "
                                      "or precise");
d3970 1
a3970 1
#line 3999 "glsl_parser.cpp" /* yacc.c:1646  */
d3973 2
a3974 2
  case 130:
#line 966 "glsl_parser.yy" /* yacc.c:1646  */
d3985 1
a3985 1
#line 4014 "glsl_parser.cpp" /* yacc.c:1646  */
d3988 2
a3989 2
  case 131:
#line 979 "glsl_parser.yy" /* yacc.c:1646  */
d3994 1
a3994 1
#line 4023 "glsl_parser.cpp" /* yacc.c:1646  */
d3997 2
a3998 2
  case 132:
#line 984 "glsl_parser.yy" /* yacc.c:1646  */
d4003 1
a4003 1
#line 4032 "glsl_parser.cpp" /* yacc.c:1646  */
d4006 2
a4007 2
  case 133:
#line 989 "glsl_parser.yy" /* yacc.c:1646  */
d4013 1
a4013 1
#line 4042 "glsl_parser.cpp" /* yacc.c:1646  */
d4016 2
a4017 2
  case 136:
#line 1003 "glsl_parser.yy" /* yacc.c:1646  */
d4027 1
a4027 1
#line 4056 "glsl_parser.cpp" /* yacc.c:1646  */
d4030 2
a4031 2
  case 137:
#line 1013 "glsl_parser.yy" /* yacc.c:1646  */
d4041 1
a4041 1
#line 4070 "glsl_parser.cpp" /* yacc.c:1646  */
d4044 2
a4045 2
  case 138:
#line 1023 "glsl_parser.yy" /* yacc.c:1646  */
d4055 1
a4055 1
#line 4084 "glsl_parser.cpp" /* yacc.c:1646  */
d4058 2
a4059 2
  case 139:
#line 1033 "glsl_parser.yy" /* yacc.c:1646  */
d4069 1
a4069 1
#line 4098 "glsl_parser.cpp" /* yacc.c:1646  */
d4072 2
a4073 2
  case 140:
#line 1047 "glsl_parser.yy" /* yacc.c:1646  */
d4080 1
a4080 1
#line 4109 "glsl_parser.cpp" /* yacc.c:1646  */
d4083 2
a4084 2
  case 141:
#line 1054 "glsl_parser.yy" /* yacc.c:1646  */
d4094 1
a4094 1
#line 4123 "glsl_parser.cpp" /* yacc.c:1646  */
d4097 2
a4098 2
  case 142:
#line 1064 "glsl_parser.yy" /* yacc.c:1646  */
d4108 1
a4108 1
#line 4137 "glsl_parser.cpp" /* yacc.c:1646  */
d4111 2
a4112 2
  case 143:
#line 1074 "glsl_parser.yy" /* yacc.c:1646  */
d4122 1
a4122 1
#line 4151 "glsl_parser.cpp" /* yacc.c:1646  */
d4125 2
a4126 2
  case 144:
#line 1084 "glsl_parser.yy" /* yacc.c:1646  */
d4136 1
a4136 1
#line 4165 "glsl_parser.cpp" /* yacc.c:1646  */
d4139 2
a4140 2
  case 145:
#line 1094 "glsl_parser.yy" /* yacc.c:1646  */
d4152 1
a4152 1
#line 4181 "glsl_parser.cpp" /* yacc.c:1646  */
d4155 2
a4156 18
  case 146:
#line 1106 "glsl_parser.yy" /* yacc.c:1646  */
    {
      void *ctx = state;
      ast_declaration *decl = new(ctx) ast_declaration((yyvsp[0].identifier), NULL, NULL);
      decl->set_location((yylsp[0]));

      (yyval.declarator_list) = new(ctx) ast_declarator_list(NULL);
      (yyval.declarator_list)->set_location_range((yylsp[-1]), (yylsp[0]));
      (yyval.declarator_list)->precise = true;

      (yyval.declarator_list)->declarations.push_tail(&decl->link);
   }
#line 4197 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 147:
#line 1121 "glsl_parser.yy" /* yacc.c:1646  */
d4163 1
a4163 1
#line 4208 "glsl_parser.cpp" /* yacc.c:1646  */
d4166 2
a4167 2
  case 148:
#line 1128 "glsl_parser.yy" /* yacc.c:1646  */
d4175 1
a4175 1
#line 4220 "glsl_parser.cpp" /* yacc.c:1646  */
d4178 2
a4179 2
  case 149:
#line 1139 "glsl_parser.yy" /* yacc.c:1646  */
d4183 1
a4183 1
#line 4228 "glsl_parser.cpp" /* yacc.c:1646  */
d4186 2
a4187 2
  case 151:
#line 1147 "glsl_parser.yy" /* yacc.c:1646  */
d4194 1
a4194 1
#line 4239 "glsl_parser.cpp" /* yacc.c:1646  */
d4197 2
a4198 2
  case 152:
#line 1156 "glsl_parser.yy" /* yacc.c:1646  */
d4200 1
a4200 1
#line 4245 "glsl_parser.cpp" /* yacc.c:1646  */
d4203 2
a4204 2
  case 153:
#line 1157 "glsl_parser.yy" /* yacc.c:1646  */
d4206 1
a4206 1
#line 4251 "glsl_parser.cpp" /* yacc.c:1646  */
d4209 2
a4210 2
  case 154:
#line 1162 "glsl_parser.yy" /* yacc.c:1646  */
d4395 1
a4395 1
#line 4440 "glsl_parser.cpp" /* yacc.c:1646  */
d4398 2
a4399 2
  case 155:
#line 1347 "glsl_parser.yy" /* yacc.c:1646  */
a4461 16
      if (state->stage == MESA_SHADER_GEOMETRY) {
         if (match_layout_qualifier("stream", (yyvsp[-2].identifier), state) == 0 &&
             state->check_explicit_attrib_stream_allowed(& (yylsp[0]))) {
            (yyval.type_qualifier).flags.q.stream = 1;

            if ((yyvsp[0].n) < 0) {
               _mesa_glsl_error(& (yylsp[0]), state,
                                "invalid stream %d specified", (yyvsp[0].n));
               YYERROR;
            } else {
               (yyval.type_qualifier).flags.q.explicit_stream = 1;
               (yyval.type_qualifier).stream = (yyvsp[0].n);
            }
         }
      }

d4522 1
a4522 1
#line 4583 "glsl_parser.cpp" /* yacc.c:1646  */
d4525 2
a4526 2
  case 156:
#line 1486 "glsl_parser.yy" /* yacc.c:1646  */
d4540 1
a4540 1
#line 4601 "glsl_parser.cpp" /* yacc.c:1646  */
d4543 2
a4544 2
  case 157:
#line 1512 "glsl_parser.yy" /* yacc.c:1646  */
d4549 1
a4549 1
#line 4610 "glsl_parser.cpp" /* yacc.c:1646  */
d4552 2
a4553 2
  case 158:
#line 1517 "glsl_parser.yy" /* yacc.c:1646  */
d4558 1
a4558 1
#line 4619 "glsl_parser.cpp" /* yacc.c:1646  */
d4561 2
a4562 2
  case 159:
#line 1525 "glsl_parser.yy" /* yacc.c:1646  */
d4567 1
a4567 1
#line 4628 "glsl_parser.cpp" /* yacc.c:1646  */
d4570 2
a4571 2
  case 160:
#line 1530 "glsl_parser.yy" /* yacc.c:1646  */
d4576 1
a4576 1
#line 4637 "glsl_parser.cpp" /* yacc.c:1646  */
d4579 2
a4580 2
  case 161:
#line 1535 "glsl_parser.yy" /* yacc.c:1646  */
d4585 1
a4585 1
#line 4646 "glsl_parser.cpp" /* yacc.c:1646  */
d4588 2
a4589 2
  case 162:
#line 1544 "glsl_parser.yy" /* yacc.c:1646  */
d4594 1
a4594 10
#line 4655 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 163:
#line 1549 "glsl_parser.yy" /* yacc.c:1646  */
    {
      memset(& (yyval.type_qualifier), 0, sizeof((yyval.type_qualifier)));
      (yyval.type_qualifier).flags.q.precise = 1;
   }
#line 4664 "glsl_parser.cpp" /* yacc.c:1646  */
d4597 2
a4598 2
  case 168:
#line 1558 "glsl_parser.yy" /* yacc.c:1646  */
d4603 1
a4603 13
#line 4673 "glsl_parser.cpp" /* yacc.c:1646  */
    break;

  case 169:
#line 1576 "glsl_parser.yy" /* yacc.c:1646  */
    {
      if ((yyvsp[0].type_qualifier).flags.q.precise)
         _mesa_glsl_error(&(yylsp[-1]), state, "duplicate \"precise\" qualifier");

      (yyval.type_qualifier) = (yyvsp[0].type_qualifier);
      (yyval.type_qualifier).flags.q.precise = 1;
   }
#line 4685 "glsl_parser.cpp" /* yacc.c:1646  */
d4606 2
a4607 2
  case 170:
#line 1584 "glsl_parser.yy" /* yacc.c:1646  */
d4612 1
a4612 1
      if (!state->ARB_shading_language_420pack_enable && (yyvsp[0].type_qualifier).flags.q.precise)
d4614 2
a4615 1
                          "\"invariant\" must come after \"precise\"");
d4620 1
a4620 1
#line 4701 "glsl_parser.cpp" /* yacc.c:1646  */
d4623 2
a4624 2
  case 171:
#line 1596 "glsl_parser.yy" /* yacc.c:1646  */
d4639 6
a4644 2
      if (!state->ARB_shading_language_420pack_enable &&
          ((yyvsp[0].type_qualifier).flags.q.precise || (yyvsp[0].type_qualifier).flags.q.invariant)) {
d4646 1
a4646 1
                          "after \"precise\" or \"invariant\"");
d4652 1
a4652 1
#line 4729 "glsl_parser.cpp" /* yacc.c:1646  */
d4655 2
a4656 2
  case 172:
#line 1620 "glsl_parser.yy" /* yacc.c:1646  */
d4658 5
a4662 8
      /* In the absence of ARB_shading_language_420pack, layout qualifiers may
       * appear no later than auxiliary storage qualifiers. There is no
       * particularly clear spec language mandating this, but in all examples
       * the layout qualifier precedes the storage qualifier.
       *
       * We allow combinations of layout with interpolation, invariant or
       * precise qualifiers since these are useful in ARB_separate_shader_objects.
       * There is no clear spec guidance on this either.
d4667 9
d4679 1
a4679 1
#line 4750 "glsl_parser.cpp" /* yacc.c:1646  */
d4682 2
a4683 2
  case 173:
#line 1637 "glsl_parser.yy" /* yacc.c:1646  */
d4691 1
a4691 2
          ((yyvsp[0].type_qualifier).flags.q.precise || (yyvsp[0].type_qualifier).flags.q.invariant ||
           (yyvsp[0].type_qualifier).has_interpolation() || (yyvsp[0].type_qualifier).has_layout())) {
d4698 1
a4698 1
#line 4770 "glsl_parser.cpp" /* yacc.c:1646  */
d4701 2
a4702 2
  case 174:
#line 1653 "glsl_parser.yy" /* yacc.c:1646  */
d4712 2
a4713 2
          ((yyvsp[0].type_qualifier).flags.q.precise || (yyvsp[0].type_qualifier).flags.q.invariant || (yyvsp[0].type_qualifier).has_interpolation() ||
           (yyvsp[0].type_qualifier).has_layout() || (yyvsp[0].type_qualifier).has_auxiliary_storage())) {
d4715 1
a4715 1
                          "precise, invariant, interpolation, layout and auxiliary "
d4722 1
a4722 1
#line 4794 "glsl_parser.cpp" /* yacc.c:1646  */
d4725 2
a4726 2
  case 175:
#line 1673 "glsl_parser.yy" /* yacc.c:1646  */
d4737 1
a4737 1
#line 4809 "glsl_parser.cpp" /* yacc.c:1646  */
d4740 2
a4741 2
  case 176:
#line 1687 "glsl_parser.yy" /* yacc.c:1646  */
d4746 1
a4746 1
#line 4818 "glsl_parser.cpp" /* yacc.c:1646  */
d4749 2
a4750 2
  case 177:
#line 1692 "glsl_parser.yy" /* yacc.c:1646  */
d4755 1
a4755 1
#line 4827 "glsl_parser.cpp" /* yacc.c:1646  */
d4758 2
a4759 2
  case 178:
#line 1700 "glsl_parser.yy" /* yacc.c:1646  */
d4764 1
a4764 1
#line 4836 "glsl_parser.cpp" /* yacc.c:1646  */
d4767 2
a4768 2
  case 179:
#line 1705 "glsl_parser.yy" /* yacc.c:1646  */
d4773 1
a4773 1
#line 4845 "glsl_parser.cpp" /* yacc.c:1646  */
d4776 2
a4777 2
  case 180:
#line 1710 "glsl_parser.yy" /* yacc.c:1646  */
d4782 1
a4782 1
#line 4854 "glsl_parser.cpp" /* yacc.c:1646  */
d4785 2
a4786 2
  case 181:
#line 1715 "glsl_parser.yy" /* yacc.c:1646  */
d4791 1
a4791 1
#line 4863 "glsl_parser.cpp" /* yacc.c:1646  */
d4794 2
a4795 2
  case 182:
#line 1720 "glsl_parser.yy" /* yacc.c:1646  */
a4798 14

      if (state->stage == MESA_SHADER_GEOMETRY &&
          state->has_explicit_attrib_stream()) {
         /* Section 4.3.8.2 (Output Layout Qualifiers) of the GLSL 4.00
          * spec says:
          *
          *     "If the block or variable is declared with the stream
          *     identifier, it is associated with the specified stream;
          *     otherwise, it is associated with the current default stream."
          */
          (yyval.type_qualifier).flags.q.stream = 1;
          (yyval.type_qualifier).flags.q.explicit_stream = 0;
          (yyval.type_qualifier).stream = state->out_qualifier->stream;
      }
d4800 1
a4800 1
#line 4886 "glsl_parser.cpp" /* yacc.c:1646  */
d4803 2
a4804 2
  case 183:
#line 1739 "glsl_parser.yy" /* yacc.c:1646  */
d4809 1
a4809 1
#line 4895 "glsl_parser.cpp" /* yacc.c:1646  */
d4812 2
a4813 2
  case 184:
#line 1744 "glsl_parser.yy" /* yacc.c:1646  */
d4818 1
a4818 1
#line 4904 "glsl_parser.cpp" /* yacc.c:1646  */
d4821 2
a4822 2
  case 185:
#line 1749 "glsl_parser.yy" /* yacc.c:1646  */
d4827 1
a4827 1
#line 4913 "glsl_parser.cpp" /* yacc.c:1646  */
d4830 2
a4831 2
  case 186:
#line 1754 "glsl_parser.yy" /* yacc.c:1646  */
d4837 1
a4837 1
#line 4923 "glsl_parser.cpp" /* yacc.c:1646  */
d4840 2
a4841 2
  case 187:
#line 1760 "glsl_parser.yy" /* yacc.c:1646  */
d4846 1
a4846 1
#line 4932 "glsl_parser.cpp" /* yacc.c:1646  */
d4849 2
a4850 2
  case 188:
#line 1765 "glsl_parser.yy" /* yacc.c:1646  */
d4855 1
a4855 1
#line 4941 "glsl_parser.cpp" /* yacc.c:1646  */
d4858 2
a4859 2
  case 189:
#line 1773 "glsl_parser.yy" /* yacc.c:1646  */
d4865 1
a4865 1
#line 4951 "glsl_parser.cpp" /* yacc.c:1646  */
d4868 2
a4869 2
  case 190:
#line 1779 "glsl_parser.yy" /* yacc.c:1646  */
d4875 1
a4875 1
#line 4961 "glsl_parser.cpp" /* yacc.c:1646  */
d4878 2
a4879 2
  case 191:
#line 1785 "glsl_parser.yy" /* yacc.c:1646  */
d4893 1
a4893 1
#line 4979 "glsl_parser.cpp" /* yacc.c:1646  */
d4896 2
a4897 2
  case 192:
#line 1799 "glsl_parser.yy" /* yacc.c:1646  */
d4909 1
a4909 1
#line 4995 "glsl_parser.cpp" /* yacc.c:1646  */
d4912 2
a4913 2
  case 194:
#line 1815 "glsl_parser.yy" /* yacc.c:1646  */
d4918 1
a4918 1
#line 5004 "glsl_parser.cpp" /* yacc.c:1646  */
d4921 2
a4922 2
  case 195:
#line 1823 "glsl_parser.yy" /* yacc.c:1646  */
d4928 1
a4928 1
#line 5014 "glsl_parser.cpp" /* yacc.c:1646  */
d4931 2
a4932 2
  case 196:
#line 1829 "glsl_parser.yy" /* yacc.c:1646  */
d4938 1
a4938 1
#line 5024 "glsl_parser.cpp" /* yacc.c:1646  */
d4941 2
a4942 2
  case 197:
#line 1835 "glsl_parser.yy" /* yacc.c:1646  */
d4948 1
a4948 1
#line 5034 "glsl_parser.cpp" /* yacc.c:1646  */
d4951 2
a4952 2
  case 198:
#line 1843 "glsl_parser.yy" /* yacc.c:1646  */
d4954 1
a4954 1
#line 5040 "glsl_parser.cpp" /* yacc.c:1646  */
d4957 2
a4958 2
  case 199:
#line 1844 "glsl_parser.yy" /* yacc.c:1646  */
d4960 1
a4960 1
#line 5046 "glsl_parser.cpp" /* yacc.c:1646  */
d4963 2
a4964 2
  case 200:
#line 1845 "glsl_parser.yy" /* yacc.c:1646  */
d4966 1
a4966 1
#line 5052 "glsl_parser.cpp" /* yacc.c:1646  */
d4969 2
a4970 2
  case 201:
#line 1846 "glsl_parser.yy" /* yacc.c:1646  */
d4972 1
a4972 1
#line 5058 "glsl_parser.cpp" /* yacc.c:1646  */
d4975 2
a4976 2
  case 202:
#line 1847 "glsl_parser.yy" /* yacc.c:1646  */
d4978 1
a4978 1
#line 5064 "glsl_parser.cpp" /* yacc.c:1646  */
d4981 2
a4982 2
  case 203:
#line 1848 "glsl_parser.yy" /* yacc.c:1646  */
d4984 1
a4984 1
#line 5070 "glsl_parser.cpp" /* yacc.c:1646  */
d4987 2
a4988 2
  case 204:
#line 1849 "glsl_parser.yy" /* yacc.c:1646  */
d4990 1
a4990 1
#line 5076 "glsl_parser.cpp" /* yacc.c:1646  */
d4993 2
a4994 2
  case 205:
#line 1850 "glsl_parser.yy" /* yacc.c:1646  */
d4996 1
a4996 1
#line 5082 "glsl_parser.cpp" /* yacc.c:1646  */
d4999 2
a5000 2
  case 206:
#line 1851 "glsl_parser.yy" /* yacc.c:1646  */
d5002 1
a5002 1
#line 5088 "glsl_parser.cpp" /* yacc.c:1646  */
d5005 2
a5006 2
  case 207:
#line 1852 "glsl_parser.yy" /* yacc.c:1646  */
d5008 1
a5008 1
#line 5094 "glsl_parser.cpp" /* yacc.c:1646  */
d5011 2
a5012 2
  case 208:
#line 1853 "glsl_parser.yy" /* yacc.c:1646  */
d5014 1
a5014 1
#line 5100 "glsl_parser.cpp" /* yacc.c:1646  */
d5017 2
a5018 2
  case 209:
#line 1854 "glsl_parser.yy" /* yacc.c:1646  */
d5020 1
a5020 1
#line 5106 "glsl_parser.cpp" /* yacc.c:1646  */
d5023 2
a5024 2
  case 210:
#line 1855 "glsl_parser.yy" /* yacc.c:1646  */
d5026 1
a5026 1
#line 5112 "glsl_parser.cpp" /* yacc.c:1646  */
d5029 2
a5030 2
  case 211:
#line 1856 "glsl_parser.yy" /* yacc.c:1646  */
d5032 1
a5032 1
#line 5118 "glsl_parser.cpp" /* yacc.c:1646  */
d5035 2
a5036 2
  case 212:
#line 1857 "glsl_parser.yy" /* yacc.c:1646  */
d5038 1
a5038 1
#line 5124 "glsl_parser.cpp" /* yacc.c:1646  */
d5041 2
a5042 2
  case 213:
#line 1858 "glsl_parser.yy" /* yacc.c:1646  */
d5044 1
a5044 1
#line 5130 "glsl_parser.cpp" /* yacc.c:1646  */
d5047 2
a5048 2
  case 214:
#line 1859 "glsl_parser.yy" /* yacc.c:1646  */
d5050 1
a5050 1
#line 5136 "glsl_parser.cpp" /* yacc.c:1646  */
d5053 2
a5054 2
  case 215:
#line 1860 "glsl_parser.yy" /* yacc.c:1646  */
d5056 1
a5056 1
#line 5142 "glsl_parser.cpp" /* yacc.c:1646  */
d5059 2
a5060 2
  case 216:
#line 1861 "glsl_parser.yy" /* yacc.c:1646  */
d5062 1
a5062 1
#line 5148 "glsl_parser.cpp" /* yacc.c:1646  */
d5065 2
a5066 2
  case 217:
#line 1862 "glsl_parser.yy" /* yacc.c:1646  */
d5068 1
a5068 1
#line 5154 "glsl_parser.cpp" /* yacc.c:1646  */
d5071 2
a5072 2
  case 218:
#line 1863 "glsl_parser.yy" /* yacc.c:1646  */
d5074 1
a5074 1
#line 5160 "glsl_parser.cpp" /* yacc.c:1646  */
d5077 2
a5078 2
  case 219:
#line 1864 "glsl_parser.yy" /* yacc.c:1646  */
d5080 1
a5080 1
#line 5166 "glsl_parser.cpp" /* yacc.c:1646  */
d5083 2
a5084 2
  case 220:
#line 1865 "glsl_parser.yy" /* yacc.c:1646  */
d5086 1
a5086 1
#line 5172 "glsl_parser.cpp" /* yacc.c:1646  */
d5089 2
a5090 2
  case 221:
#line 1866 "glsl_parser.yy" /* yacc.c:1646  */
d5092 1
a5092 1
#line 5178 "glsl_parser.cpp" /* yacc.c:1646  */
d5095 2
a5096 2
  case 222:
#line 1867 "glsl_parser.yy" /* yacc.c:1646  */
d5098 1
a5098 1
#line 5184 "glsl_parser.cpp" /* yacc.c:1646  */
d5101 2
a5102 2
  case 223:
#line 1868 "glsl_parser.yy" /* yacc.c:1646  */
d5104 1
a5104 1
#line 5190 "glsl_parser.cpp" /* yacc.c:1646  */
d5107 2
a5108 2
  case 224:
#line 1869 "glsl_parser.yy" /* yacc.c:1646  */
d5110 1
a5110 1
#line 5196 "glsl_parser.cpp" /* yacc.c:1646  */
d5113 2
a5114 2
  case 225:
#line 1870 "glsl_parser.yy" /* yacc.c:1646  */
d5116 1
a5116 1
#line 5202 "glsl_parser.cpp" /* yacc.c:1646  */
d5119 2
a5120 2
  case 226:
#line 1871 "glsl_parser.yy" /* yacc.c:1646  */
d5122 1
a5122 1
#line 5208 "glsl_parser.cpp" /* yacc.c:1646  */
d5125 2
a5126 2
  case 227:
#line 1872 "glsl_parser.yy" /* yacc.c:1646  */
d5128 1
a5128 1
#line 5214 "glsl_parser.cpp" /* yacc.c:1646  */
d5131 2
a5132 2
  case 228:
#line 1873 "glsl_parser.yy" /* yacc.c:1646  */
d5134 1
a5134 1
#line 5220 "glsl_parser.cpp" /* yacc.c:1646  */
d5137 2
a5138 2
  case 229:
#line 1874 "glsl_parser.yy" /* yacc.c:1646  */
d5140 1
a5140 1
#line 5226 "glsl_parser.cpp" /* yacc.c:1646  */
d5143 2
a5144 2
  case 230:
#line 1875 "glsl_parser.yy" /* yacc.c:1646  */
d5146 1
a5146 1
#line 5232 "glsl_parser.cpp" /* yacc.c:1646  */
d5149 2
a5150 2
  case 231:
#line 1876 "glsl_parser.yy" /* yacc.c:1646  */
d5152 1
a5152 1
#line 5238 "glsl_parser.cpp" /* yacc.c:1646  */
d5155 2
a5156 2
  case 232:
#line 1877 "glsl_parser.yy" /* yacc.c:1646  */
d5158 1
a5158 1
#line 5244 "glsl_parser.cpp" /* yacc.c:1646  */
d5161 2
a5162 2
  case 233:
#line 1878 "glsl_parser.yy" /* yacc.c:1646  */
d5164 1
a5164 1
#line 5250 "glsl_parser.cpp" /* yacc.c:1646  */
d5167 2
a5168 2
  case 234:
#line 1879 "glsl_parser.yy" /* yacc.c:1646  */
d5170 1
a5170 1
#line 5256 "glsl_parser.cpp" /* yacc.c:1646  */
d5173 2
a5174 2
  case 235:
#line 1880 "glsl_parser.yy" /* yacc.c:1646  */
d5176 1
a5176 1
#line 5262 "glsl_parser.cpp" /* yacc.c:1646  */
d5179 2
a5180 2
  case 236:
#line 1881 "glsl_parser.yy" /* yacc.c:1646  */
d5182 1
a5182 1
#line 5268 "glsl_parser.cpp" /* yacc.c:1646  */
d5185 2
a5186 2
  case 237:
#line 1882 "glsl_parser.yy" /* yacc.c:1646  */
d5188 1
a5188 1
#line 5274 "glsl_parser.cpp" /* yacc.c:1646  */
d5191 2
a5192 2
  case 238:
#line 1883 "glsl_parser.yy" /* yacc.c:1646  */
d5194 1
a5194 1
#line 5280 "glsl_parser.cpp" /* yacc.c:1646  */
d5197 2
a5198 2
  case 239:
#line 1884 "glsl_parser.yy" /* yacc.c:1646  */
d5200 1
a5200 1
#line 5286 "glsl_parser.cpp" /* yacc.c:1646  */
d5203 2
a5204 2
  case 240:
#line 1885 "glsl_parser.yy" /* yacc.c:1646  */
d5206 1
a5206 1
#line 5292 "glsl_parser.cpp" /* yacc.c:1646  */
d5209 2
a5210 2
  case 241:
#line 1886 "glsl_parser.yy" /* yacc.c:1646  */
d5212 1
a5212 1
#line 5298 "glsl_parser.cpp" /* yacc.c:1646  */
d5215 2
a5216 2
  case 242:
#line 1887 "glsl_parser.yy" /* yacc.c:1646  */
d5218 1
a5218 1
#line 5304 "glsl_parser.cpp" /* yacc.c:1646  */
d5221 2
a5222 2
  case 243:
#line 1888 "glsl_parser.yy" /* yacc.c:1646  */
d5224 1
a5224 1
#line 5310 "glsl_parser.cpp" /* yacc.c:1646  */
d5227 2
a5228 2
  case 244:
#line 1889 "glsl_parser.yy" /* yacc.c:1646  */
d5230 1
a5230 1
#line 5316 "glsl_parser.cpp" /* yacc.c:1646  */
d5233 2
a5234 2
  case 245:
#line 1890 "glsl_parser.yy" /* yacc.c:1646  */
d5236 1
a5236 1
#line 5322 "glsl_parser.cpp" /* yacc.c:1646  */
d5239 2
a5240 2
  case 246:
#line 1891 "glsl_parser.yy" /* yacc.c:1646  */
d5242 1
a5242 1
#line 5328 "glsl_parser.cpp" /* yacc.c:1646  */
d5245 2
a5246 2
  case 247:
#line 1892 "glsl_parser.yy" /* yacc.c:1646  */
d5248 1
a5248 1
#line 5334 "glsl_parser.cpp" /* yacc.c:1646  */
d5251 2
a5252 2
  case 248:
#line 1893 "glsl_parser.yy" /* yacc.c:1646  */
d5254 1
a5254 1
#line 5340 "glsl_parser.cpp" /* yacc.c:1646  */
d5257 2
a5258 2
  case 249:
#line 1894 "glsl_parser.yy" /* yacc.c:1646  */
d5260 1
a5260 1
#line 5346 "glsl_parser.cpp" /* yacc.c:1646  */
d5263 2
a5264 2
  case 250:
#line 1895 "glsl_parser.yy" /* yacc.c:1646  */
d5266 1
a5266 1
#line 5352 "glsl_parser.cpp" /* yacc.c:1646  */
d5269 2
a5270 2
  case 251:
#line 1896 "glsl_parser.yy" /* yacc.c:1646  */
d5272 1
a5272 1
#line 5358 "glsl_parser.cpp" /* yacc.c:1646  */
d5275 2
a5276 2
  case 252:
#line 1897 "glsl_parser.yy" /* yacc.c:1646  */
d5278 1
a5278 1
#line 5364 "glsl_parser.cpp" /* yacc.c:1646  */
d5281 2
a5282 2
  case 253:
#line 1898 "glsl_parser.yy" /* yacc.c:1646  */
d5284 1
a5284 1
#line 5370 "glsl_parser.cpp" /* yacc.c:1646  */
d5287 2
a5288 2
  case 254:
#line 1899 "glsl_parser.yy" /* yacc.c:1646  */
d5290 1
a5290 1
#line 5376 "glsl_parser.cpp" /* yacc.c:1646  */
d5293 2
a5294 2
  case 255:
#line 1900 "glsl_parser.yy" /* yacc.c:1646  */
d5296 1
a5296 1
#line 5382 "glsl_parser.cpp" /* yacc.c:1646  */
d5299 2
a5300 2
  case 256:
#line 1901 "glsl_parser.yy" /* yacc.c:1646  */
d5302 1
a5302 1
#line 5388 "glsl_parser.cpp" /* yacc.c:1646  */
d5305 2
a5306 2
  case 257:
#line 1902 "glsl_parser.yy" /* yacc.c:1646  */
d5308 1
a5308 1
#line 5394 "glsl_parser.cpp" /* yacc.c:1646  */
d5311 2
a5312 2
  case 258:
#line 1903 "glsl_parser.yy" /* yacc.c:1646  */
d5314 1
a5314 1
#line 5400 "glsl_parser.cpp" /* yacc.c:1646  */
d5317 2
a5318 2
  case 259:
#line 1904 "glsl_parser.yy" /* yacc.c:1646  */
d5320 1
a5320 1
#line 5406 "glsl_parser.cpp" /* yacc.c:1646  */
d5323 2
a5324 2
  case 260:
#line 1905 "glsl_parser.yy" /* yacc.c:1646  */
d5326 1
a5326 1
#line 5412 "glsl_parser.cpp" /* yacc.c:1646  */
d5329 2
a5330 2
  case 261:
#line 1906 "glsl_parser.yy" /* yacc.c:1646  */
d5332 1
a5332 1
#line 5418 "glsl_parser.cpp" /* yacc.c:1646  */
d5335 2
a5336 2
  case 262:
#line 1907 "glsl_parser.yy" /* yacc.c:1646  */
d5338 1
a5338 1
#line 5424 "glsl_parser.cpp" /* yacc.c:1646  */
d5341 2
a5342 2
  case 263:
#line 1908 "glsl_parser.yy" /* yacc.c:1646  */
d5344 1
a5344 1
#line 5430 "glsl_parser.cpp" /* yacc.c:1646  */
d5347 2
a5348 2
  case 264:
#line 1909 "glsl_parser.yy" /* yacc.c:1646  */
d5350 1
a5350 1
#line 5436 "glsl_parser.cpp" /* yacc.c:1646  */
d5353 2
a5354 2
  case 265:
#line 1910 "glsl_parser.yy" /* yacc.c:1646  */
d5356 1
a5356 1
#line 5442 "glsl_parser.cpp" /* yacc.c:1646  */
d5359 2
a5360 2
  case 266:
#line 1911 "glsl_parser.yy" /* yacc.c:1646  */
d5362 1
a5362 1
#line 5448 "glsl_parser.cpp" /* yacc.c:1646  */
d5365 2
a5366 2
  case 267:
#line 1912 "glsl_parser.yy" /* yacc.c:1646  */
d5368 1
a5368 1
#line 5454 "glsl_parser.cpp" /* yacc.c:1646  */
d5371 2
a5372 2
  case 268:
#line 1913 "glsl_parser.yy" /* yacc.c:1646  */
d5374 1
a5374 1
#line 5460 "glsl_parser.cpp" /* yacc.c:1646  */
d5377 2
a5378 2
  case 269:
#line 1914 "glsl_parser.yy" /* yacc.c:1646  */
d5380 1
a5380 1
#line 5466 "glsl_parser.cpp" /* yacc.c:1646  */
d5383 2
a5384 2
  case 270:
#line 1915 "glsl_parser.yy" /* yacc.c:1646  */
d5386 1
a5386 1
#line 5472 "glsl_parser.cpp" /* yacc.c:1646  */
d5389 2
a5390 2
  case 271:
#line 1916 "glsl_parser.yy" /* yacc.c:1646  */
d5392 1
a5392 1
#line 5478 "glsl_parser.cpp" /* yacc.c:1646  */
d5395 2
a5396 2
  case 272:
#line 1917 "glsl_parser.yy" /* yacc.c:1646  */
d5398 1
a5398 1
#line 5484 "glsl_parser.cpp" /* yacc.c:1646  */
d5401 2
a5402 2
  case 273:
#line 1918 "glsl_parser.yy" /* yacc.c:1646  */
d5404 1
a5404 1
#line 5490 "glsl_parser.cpp" /* yacc.c:1646  */
d5407 2
a5408 2
  case 274:
#line 1919 "glsl_parser.yy" /* yacc.c:1646  */
d5410 1
a5410 1
#line 5496 "glsl_parser.cpp" /* yacc.c:1646  */
d5413 2
a5414 2
  case 275:
#line 1920 "glsl_parser.yy" /* yacc.c:1646  */
d5416 1
a5416 1
#line 5502 "glsl_parser.cpp" /* yacc.c:1646  */
d5419 2
a5420 2
  case 276:
#line 1921 "glsl_parser.yy" /* yacc.c:1646  */
d5422 1
a5422 1
#line 5508 "glsl_parser.cpp" /* yacc.c:1646  */
d5425 2
a5426 2
  case 277:
#line 1922 "glsl_parser.yy" /* yacc.c:1646  */
d5428 1
a5428 1
#line 5514 "glsl_parser.cpp" /* yacc.c:1646  */
d5431 2
a5432 2
  case 278:
#line 1923 "glsl_parser.yy" /* yacc.c:1646  */
d5434 1
a5434 1
#line 5520 "glsl_parser.cpp" /* yacc.c:1646  */
d5437 2
a5438 2
  case 279:
#line 1924 "glsl_parser.yy" /* yacc.c:1646  */
d5440 1
a5440 1
#line 5526 "glsl_parser.cpp" /* yacc.c:1646  */
d5443 2
a5444 2
  case 280:
#line 1925 "glsl_parser.yy" /* yacc.c:1646  */
d5446 1
a5446 1
#line 5532 "glsl_parser.cpp" /* yacc.c:1646  */
d5449 2
a5450 2
  case 281:
#line 1926 "glsl_parser.yy" /* yacc.c:1646  */
d5452 1
a5452 1
#line 5538 "glsl_parser.cpp" /* yacc.c:1646  */
d5455 2
a5456 2
  case 282:
#line 1927 "glsl_parser.yy" /* yacc.c:1646  */
d5458 1
a5458 1
#line 5544 "glsl_parser.cpp" /* yacc.c:1646  */
d5461 2
a5462 2
  case 283:
#line 1928 "glsl_parser.yy" /* yacc.c:1646  */
d5464 1
a5464 1
#line 5550 "glsl_parser.cpp" /* yacc.c:1646  */
d5467 2
a5468 2
  case 284:
#line 1929 "glsl_parser.yy" /* yacc.c:1646  */
d5470 1
a5470 1
#line 5556 "glsl_parser.cpp" /* yacc.c:1646  */
d5473 2
a5474 2
  case 285:
#line 1930 "glsl_parser.yy" /* yacc.c:1646  */
d5476 1
a5476 1
#line 5562 "glsl_parser.cpp" /* yacc.c:1646  */
d5479 2
a5480 2
  case 286:
#line 1931 "glsl_parser.yy" /* yacc.c:1646  */
d5482 1
a5482 1
#line 5568 "glsl_parser.cpp" /* yacc.c:1646  */
d5485 2
a5486 2
  case 287:
#line 1932 "glsl_parser.yy" /* yacc.c:1646  */
d5488 1
a5488 1
#line 5574 "glsl_parser.cpp" /* yacc.c:1646  */
d5491 2
a5492 2
  case 288:
#line 1933 "glsl_parser.yy" /* yacc.c:1646  */
d5494 1
a5494 1
#line 5580 "glsl_parser.cpp" /* yacc.c:1646  */
d5497 2
a5498 2
  case 289:
#line 1934 "glsl_parser.yy" /* yacc.c:1646  */
d5500 1
a5500 1
#line 5586 "glsl_parser.cpp" /* yacc.c:1646  */
d5503 2
a5504 2
  case 290:
#line 1935 "glsl_parser.yy" /* yacc.c:1646  */
d5506 1
a5506 1
#line 5592 "glsl_parser.cpp" /* yacc.c:1646  */
d5509 2
a5510 2
  case 291:
#line 1936 "glsl_parser.yy" /* yacc.c:1646  */
d5512 1
a5512 1
#line 5598 "glsl_parser.cpp" /* yacc.c:1646  */
d5515 2
a5516 2
  case 292:
#line 1937 "glsl_parser.yy" /* yacc.c:1646  */
d5518 1
a5518 1
#line 5604 "glsl_parser.cpp" /* yacc.c:1646  */
d5521 2
a5522 2
  case 293:
#line 1938 "glsl_parser.yy" /* yacc.c:1646  */
d5524 1
a5524 1
#line 5610 "glsl_parser.cpp" /* yacc.c:1646  */
d5527 2
a5528 2
  case 294:
#line 1939 "glsl_parser.yy" /* yacc.c:1646  */
d5530 1
a5530 1
#line 5616 "glsl_parser.cpp" /* yacc.c:1646  */
d5533 2
a5534 2
  case 295:
#line 1940 "glsl_parser.yy" /* yacc.c:1646  */
d5536 1
a5536 1
#line 5622 "glsl_parser.cpp" /* yacc.c:1646  */
d5539 2
a5540 2
  case 296:
#line 1941 "glsl_parser.yy" /* yacc.c:1646  */
d5542 1
a5542 1
#line 5628 "glsl_parser.cpp" /* yacc.c:1646  */
d5545 2
a5546 2
  case 297:
#line 1942 "glsl_parser.yy" /* yacc.c:1646  */
d5548 1
a5548 1
#line 5634 "glsl_parser.cpp" /* yacc.c:1646  */
d5551 2
a5552 2
  case 298:
#line 1943 "glsl_parser.yy" /* yacc.c:1646  */
d5554 1
a5554 1
#line 5640 "glsl_parser.cpp" /* yacc.c:1646  */
d5557 2
a5558 2
  case 299:
#line 1948 "glsl_parser.yy" /* yacc.c:1646  */
d5563 1
a5563 1
#line 5649 "glsl_parser.cpp" /* yacc.c:1646  */
d5566 2
a5567 2
  case 300:
#line 1953 "glsl_parser.yy" /* yacc.c:1646  */
d5572 1
a5572 1
#line 5658 "glsl_parser.cpp" /* yacc.c:1646  */
d5575 2
a5576 2
  case 301:
#line 1958 "glsl_parser.yy" /* yacc.c:1646  */
d5581 1
a5581 1
#line 5667 "glsl_parser.cpp" /* yacc.c:1646  */
d5584 2
a5585 2
  case 302:
#line 1966 "glsl_parser.yy" /* yacc.c:1646  */
d5592 1
a5592 1
#line 5678 "glsl_parser.cpp" /* yacc.c:1646  */
d5595 2
a5596 2
  case 303:
#line 1973 "glsl_parser.yy" /* yacc.c:1646  */
d5602 1
a5602 1
#line 5688 "glsl_parser.cpp" /* yacc.c:1646  */
d5605 2
a5606 2
  case 304:
#line 1982 "glsl_parser.yy" /* yacc.c:1646  */
d5611 1
a5611 1
#line 5697 "glsl_parser.cpp" /* yacc.c:1646  */
d5614 2
a5615 2
  case 305:
#line 1987 "glsl_parser.yy" /* yacc.c:1646  */
d5620 1
a5620 1
#line 5706 "glsl_parser.cpp" /* yacc.c:1646  */
d5623 2
a5624 2
  case 306:
#line 1995 "glsl_parser.yy" /* yacc.c:1646  */
d5640 1
a5640 1
#line 5726 "glsl_parser.cpp" /* yacc.c:1646  */
d5643 2
a5644 2
  case 307:
#line 2014 "glsl_parser.yy" /* yacc.c:1646  */
d5649 1
a5649 1
#line 5735 "glsl_parser.cpp" /* yacc.c:1646  */
d5652 2
a5653 2
  case 308:
#line 2019 "glsl_parser.yy" /* yacc.c:1646  */
d5658 1
a5658 1
#line 5744 "glsl_parser.cpp" /* yacc.c:1646  */
d5661 2
a5662 2
  case 309:
#line 2027 "glsl_parser.yy" /* yacc.c:1646  */
d5668 1
a5668 1
#line 5754 "glsl_parser.cpp" /* yacc.c:1646  */
d5671 2
a5672 2
  case 310:
#line 2033 "glsl_parser.yy" /* yacc.c:1646  */
d5678 1
a5678 1
#line 5764 "glsl_parser.cpp" /* yacc.c:1646  */
d5681 2
a5682 2
  case 312:
#line 2043 "glsl_parser.yy" /* yacc.c:1646  */
d5686 1
a5686 1
#line 5772 "glsl_parser.cpp" /* yacc.c:1646  */
d5689 2
a5690 2
  case 313:
#line 2047 "glsl_parser.yy" /* yacc.c:1646  */
d5694 1
a5694 1
#line 5780 "glsl_parser.cpp" /* yacc.c:1646  */
d5697 2
a5698 2
  case 314:
#line 2054 "glsl_parser.yy" /* yacc.c:1646  */
d5705 1
a5705 1
#line 5791 "glsl_parser.cpp" /* yacc.c:1646  */
d5708 2
a5709 2
  case 315:
#line 2061 "glsl_parser.yy" /* yacc.c:1646  */
d5713 1
a5713 1
#line 5799 "glsl_parser.cpp" /* yacc.c:1646  */
d5716 2
a5717 2
  case 317:
#line 2073 "glsl_parser.yy" /* yacc.c:1646  */
d5719 1
a5719 1
#line 5805 "glsl_parser.cpp" /* yacc.c:1646  */
d5722 2
a5723 2
  case 325:
#line 2088 "glsl_parser.yy" /* yacc.c:1646  */
d5729 1
a5729 1
#line 5815 "glsl_parser.cpp" /* yacc.c:1646  */
d5732 2
a5733 2
  case 326:
#line 2094 "glsl_parser.yy" /* yacc.c:1646  */
d5737 1
a5737 1
#line 5823 "glsl_parser.cpp" /* yacc.c:1646  */
d5740 2
a5741 2
  case 327:
#line 2098 "glsl_parser.yy" /* yacc.c:1646  */
d5748 1
a5748 1
#line 5834 "glsl_parser.cpp" /* yacc.c:1646  */
d5751 2
a5752 2
  case 328:
#line 2107 "glsl_parser.yy" /* yacc.c:1646  */
d5754 1
a5754 1
#line 5840 "glsl_parser.cpp" /* yacc.c:1646  */
d5757 2
a5758 2
  case 330:
#line 2113 "glsl_parser.yy" /* yacc.c:1646  */
d5764 1
a5764 1
#line 5850 "glsl_parser.cpp" /* yacc.c:1646  */
d5767 2
a5768 2
  case 331:
#line 2119 "glsl_parser.yy" /* yacc.c:1646  */
d5774 1
a5774 1
#line 5860 "glsl_parser.cpp" /* yacc.c:1646  */
d5777 2
a5778 2
  case 332:
#line 2128 "glsl_parser.yy" /* yacc.c:1646  */
d5788 1
a5788 1
#line 5874 "glsl_parser.cpp" /* yacc.c:1646  */
d5791 2
a5792 2
  case 333:
#line 2138 "glsl_parser.yy" /* yacc.c:1646  */
d5801 1
a5801 1
#line 5887 "glsl_parser.cpp" /* yacc.c:1646  */
d5804 2
a5805 2
  case 334:
#line 2150 "glsl_parser.yy" /* yacc.c:1646  */
d5811 1
a5811 1
#line 5897 "glsl_parser.cpp" /* yacc.c:1646  */
d5814 2
a5815 2
  case 335:
#line 2156 "glsl_parser.yy" /* yacc.c:1646  */
d5821 1
a5821 1
#line 5907 "glsl_parser.cpp" /* yacc.c:1646  */
d5824 2
a5825 2
  case 336:
#line 2165 "glsl_parser.yy" /* yacc.c:1646  */
d5831 1
a5831 1
#line 5917 "glsl_parser.cpp" /* yacc.c:1646  */
d5834 2
a5835 2
  case 337:
#line 2174 "glsl_parser.yy" /* yacc.c:1646  */
d5840 1
a5840 1
#line 5926 "glsl_parser.cpp" /* yacc.c:1646  */
d5843 2
a5844 2
  case 338:
#line 2179 "glsl_parser.yy" /* yacc.c:1646  */
d5849 1
a5849 1
#line 5935 "glsl_parser.cpp" /* yacc.c:1646  */
d5852 2
a5853 2
  case 339:
#line 2187 "glsl_parser.yy" /* yacc.c:1646  */
d5857 1
a5857 1
#line 5943 "glsl_parser.cpp" /* yacc.c:1646  */
d5860 2
a5861 2
  case 340:
#line 2191 "glsl_parser.yy" /* yacc.c:1646  */
d5872 1
a5872 1
#line 5958 "glsl_parser.cpp" /* yacc.c:1646  */
d5875 2
a5876 2
  case 341:
#line 2209 "glsl_parser.yy" /* yacc.c:1646  */
d5881 1
a5881 1
#line 5967 "glsl_parser.cpp" /* yacc.c:1646  */
d5884 2
a5885 2
  case 342:
#line 2217 "glsl_parser.yy" /* yacc.c:1646  */
d5890 1
a5890 1
#line 5976 "glsl_parser.cpp" /* yacc.c:1646  */
d5893 2
a5894 2
  case 343:
#line 2222 "glsl_parser.yy" /* yacc.c:1646  */
d5899 1
a5899 1
#line 5985 "glsl_parser.cpp" /* yacc.c:1646  */
d5902 2
a5903 2
  case 344:
#line 2230 "glsl_parser.yy" /* yacc.c:1646  */
d5908 1
a5908 1
#line 5994 "glsl_parser.cpp" /* yacc.c:1646  */
d5911 2
a5912 2
  case 345:
#line 2235 "glsl_parser.yy" /* yacc.c:1646  */
d5917 1
a5917 1
#line 6003 "glsl_parser.cpp" /* yacc.c:1646  */
d5920 2
a5921 2
  case 346:
#line 2243 "glsl_parser.yy" /* yacc.c:1646  */
d5929 1
a5929 1
#line 6015 "glsl_parser.cpp" /* yacc.c:1646  */
d5932 2
a5933 2
  case 347:
#line 2251 "glsl_parser.yy" /* yacc.c:1646  */
d5938 1
a5938 1
#line 6024 "glsl_parser.cpp" /* yacc.c:1646  */
d5941 2
a5942 2
  case 348:
#line 2259 "glsl_parser.yy" /* yacc.c:1646  */
d5950 1
a5950 1
#line 6036 "glsl_parser.cpp" /* yacc.c:1646  */
d5953 2
a5954 2
  case 349:
#line 2267 "glsl_parser.yy" /* yacc.c:1646  */
d5959 1
a5959 1
#line 6045 "glsl_parser.cpp" /* yacc.c:1646  */
d5962 2
a5963 2
  case 350:
#line 2275 "glsl_parser.yy" /* yacc.c:1646  */
d5971 1
a5971 1
#line 6057 "glsl_parser.cpp" /* yacc.c:1646  */
d5974 2
a5975 2
  case 351:
#line 2283 "glsl_parser.yy" /* yacc.c:1646  */
d5980 1
a5980 1
#line 6066 "glsl_parser.cpp" /* yacc.c:1646  */
d5983 2
a5984 2
  case 352:
#line 2291 "glsl_parser.yy" /* yacc.c:1646  */
d5991 1
a5991 1
#line 6077 "glsl_parser.cpp" /* yacc.c:1646  */
d5994 2
a5995 2
  case 353:
#line 2298 "glsl_parser.yy" /* yacc.c:1646  */
d6002 1
a6002 1
#line 6088 "glsl_parser.cpp" /* yacc.c:1646  */
d6005 2
a6006 2
  case 354:
#line 2305 "glsl_parser.yy" /* yacc.c:1646  */
d6013 1
a6013 1
#line 6099 "glsl_parser.cpp" /* yacc.c:1646  */
d6016 2
a6017 2
  case 358:
#line 2321 "glsl_parser.yy" /* yacc.c:1646  */
d6021 1
a6021 1
#line 6107 "glsl_parser.cpp" /* yacc.c:1646  */
d6024 2
a6025 2
  case 359:
#line 2328 "glsl_parser.yy" /* yacc.c:1646  */
d6030 1
a6030 1
#line 6116 "glsl_parser.cpp" /* yacc.c:1646  */
d6033 2
a6034 2
  case 360:
#line 2333 "glsl_parser.yy" /* yacc.c:1646  */
d6039 1
a6039 1
#line 6125 "glsl_parser.cpp" /* yacc.c:1646  */
d6042 2
a6043 2
  case 361:
#line 2342 "glsl_parser.yy" /* yacc.c:1646  */
d6049 1
a6049 1
#line 6135 "glsl_parser.cpp" /* yacc.c:1646  */
d6052 2
a6053 2
  case 362:
#line 2348 "glsl_parser.yy" /* yacc.c:1646  */
d6059 1
a6059 1
#line 6145 "glsl_parser.cpp" /* yacc.c:1646  */
d6062 2
a6063 2
  case 363:
#line 2354 "glsl_parser.yy" /* yacc.c:1646  */
d6069 1
a6069 1
#line 6155 "glsl_parser.cpp" /* yacc.c:1646  */
d6072 2
a6073 2
  case 364:
#line 2360 "glsl_parser.yy" /* yacc.c:1646  */
d6079 1
a6079 1
#line 6165 "glsl_parser.cpp" /* yacc.c:1646  */
d6082 2
a6083 2
  case 365:
#line 2366 "glsl_parser.yy" /* yacc.c:1646  */
d6089 1
a6089 1
#line 6175 "glsl_parser.cpp" /* yacc.c:1646  */
d6092 2
a6093 2
  case 366:
#line 2374 "glsl_parser.yy" /* yacc.c:1646  */
d6095 1
a6095 1
#line 6181 "glsl_parser.cpp" /* yacc.c:1646  */
d6098 2
a6099 2
  case 367:
#line 2375 "glsl_parser.yy" /* yacc.c:1646  */
d6101 1
a6101 1
#line 6187 "glsl_parser.cpp" /* yacc.c:1646  */
d6104 2
a6105 2
  case 368:
#line 2376 "glsl_parser.yy" /* yacc.c:1646  */
d6107 1
a6107 1
#line 6193 "glsl_parser.cpp" /* yacc.c:1646  */
d6110 2
a6111 2
  case 369:
#line 2377 "glsl_parser.yy" /* yacc.c:1646  */
d6113 1
a6113 1
#line 6199 "glsl_parser.cpp" /* yacc.c:1646  */
d6116 2
a6117 2
  case 370:
#line 2382 "glsl_parser.yy" /* yacc.c:1646  */
d6127 1
a6127 1
#line 6213 "glsl_parser.cpp" /* yacc.c:1646  */
d6130 2
a6131 2
  case 371:
#line 2396 "glsl_parser.yy" /* yacc.c:1646  */
d6135 1
a6135 1
#line 6221 "glsl_parser.cpp" /* yacc.c:1646  */
d6138 2
a6139 2
  case 372:
#line 2400 "glsl_parser.yy" /* yacc.c:1646  */
a6144 12

      foreach_list_typed (ast_declarator_list, member, link, &block->declarations) {
         ast_type_qualifier& qualifier = member->type->qualifier;
         if (qualifier.flags.q.stream && qualifier.stream != block->layout.stream) {
               _mesa_glsl_error(& (yylsp[-1]), state,
                             "stream layout qualifier on "
                             "interface block member does not match "
                             "the interface block (%d vs %d)",
                             qualifier.stream, block->layout.stream);
               YYERROR;
         }
      }
d6147 1
a6147 1
#line 6245 "glsl_parser.cpp" /* yacc.c:1646  */
d6150 2
a6151 2
  case 373:
#line 2423 "glsl_parser.yy" /* yacc.c:1646  */
a6218 8
      if (state->stage == MESA_SHADER_GEOMETRY &&
          state->has_explicit_attrib_stream()) {
         /* Assign global layout's stream value. */
         block->layout.flags.q.stream = 1;
         block->layout.flags.q.explicit_stream = 0;
         block->layout.stream = state->out_qualifier->stream;
      }

d6245 1
a6245 1
#line 6351 "glsl_parser.cpp" /* yacc.c:1646  */
d6248 2
a6249 2
  case 374:
#line 2528 "glsl_parser.yy" /* yacc.c:1646  */
d6254 1
a6254 1
#line 6360 "glsl_parser.cpp" /* yacc.c:1646  */
d6257 2
a6258 2
  case 375:
#line 2533 "glsl_parser.yy" /* yacc.c:1646  */
d6263 1
a6263 1
#line 6369 "glsl_parser.cpp" /* yacc.c:1646  */
d6266 2
a6267 2
  case 376:
#line 2538 "glsl_parser.yy" /* yacc.c:1646  */
d6272 1
a6272 1
#line 6378 "glsl_parser.cpp" /* yacc.c:1646  */
d6275 2
a6276 2
  case 377:
#line 2546 "glsl_parser.yy" /* yacc.c:1646  */
d6281 1
a6281 1
#line 6387 "glsl_parser.cpp" /* yacc.c:1646  */
d6284 2
a6285 2
  case 378:
#line 2551 "glsl_parser.yy" /* yacc.c:1646  */
d6291 1
a6291 1
#line 6397 "glsl_parser.cpp" /* yacc.c:1646  */
d6294 2
a6295 2
  case 379:
#line 2557 "glsl_parser.yy" /* yacc.c:1646  */
d6301 1
a6301 1
#line 6407 "glsl_parser.cpp" /* yacc.c:1646  */
d6304 2
a6305 2
  case 380:
#line 2566 "glsl_parser.yy" /* yacc.c:1646  */
d6310 1
a6310 1
#line 6416 "glsl_parser.cpp" /* yacc.c:1646  */
d6313 2
a6314 2
  case 381:
#line 2571 "glsl_parser.yy" /* yacc.c:1646  */
d6319 1
a6319 1
#line 6425 "glsl_parser.cpp" /* yacc.c:1646  */
d6322 2
a6323 2
  case 382:
#line 2579 "glsl_parser.yy" /* yacc.c:1646  */
d6344 1
a6344 1
#line 6450 "glsl_parser.cpp" /* yacc.c:1646  */
d6347 2
a6348 2
  case 383:
#line 2603 "glsl_parser.yy" /* yacc.c:1646  */
d6355 1
a6355 1
#line 6461 "glsl_parser.cpp" /* yacc.c:1646  */
d6358 2
a6359 2
  case 384:
#line 2611 "glsl_parser.yy" /* yacc.c:1646  */
d6366 1
a6366 1
#line 6472 "glsl_parser.cpp" /* yacc.c:1646  */
d6369 2
a6370 2
  case 385:
#line 2619 "glsl_parser.yy" /* yacc.c:1646  */
a6391 3

         /* Allow future assigments of global out's stream id value */
         state->out_qualifier->flags.q.explicit_stream = 0;
d6395 1
a6395 1
#line 6504 "glsl_parser.cpp" /* yacc.c:1646  */
d6399 1
a6399 1
#line 6508 "glsl_parser.cpp" /* yacc.c:1646  */
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d98 3
d147 1
a147 1
#line 145 "glsl_parser.cpp" /* yacc.c:339  */
d217 187
a403 187
    NOPERSPECTIVE = 293,
    FLAT = 294,
    SMOOTH = 295,
    MAT2X2 = 296,
    MAT2X3 = 297,
    MAT2X4 = 298,
    MAT3X2 = 299,
    MAT3X3 = 300,
    MAT3X4 = 301,
    MAT4X2 = 302,
    MAT4X3 = 303,
    MAT4X4 = 304,
    SAMPLER1D = 305,
    SAMPLER2D = 306,
    SAMPLER3D = 307,
    SAMPLERCUBE = 308,
    SAMPLER1DSHADOW = 309,
    SAMPLER2DSHADOW = 310,
    SAMPLERCUBESHADOW = 311,
    SAMPLER1DARRAY = 312,
    SAMPLER2DARRAY = 313,
    SAMPLER1DARRAYSHADOW = 314,
    SAMPLER2DARRAYSHADOW = 315,
    SAMPLERCUBEARRAY = 316,
    SAMPLERCUBEARRAYSHADOW = 317,
    ISAMPLER1D = 318,
    ISAMPLER2D = 319,
    ISAMPLER3D = 320,
    ISAMPLERCUBE = 321,
    ISAMPLER1DARRAY = 322,
    ISAMPLER2DARRAY = 323,
    ISAMPLERCUBEARRAY = 324,
    USAMPLER1D = 325,
    USAMPLER2D = 326,
    USAMPLER3D = 327,
    USAMPLERCUBE = 328,
    USAMPLER1DARRAY = 329,
    USAMPLER2DARRAY = 330,
    USAMPLERCUBEARRAY = 331,
    SAMPLER2DRECT = 332,
    ISAMPLER2DRECT = 333,
    USAMPLER2DRECT = 334,
    SAMPLER2DRECTSHADOW = 335,
    SAMPLERBUFFER = 336,
    ISAMPLERBUFFER = 337,
    USAMPLERBUFFER = 338,
    SAMPLER2DMS = 339,
    ISAMPLER2DMS = 340,
    USAMPLER2DMS = 341,
    SAMPLER2DMSARRAY = 342,
    ISAMPLER2DMSARRAY = 343,
    USAMPLER2DMSARRAY = 344,
    SAMPLEREXTERNALOES = 345,
    IMAGE1D = 346,
    IMAGE2D = 347,
    IMAGE3D = 348,
    IMAGE2DRECT = 349,
    IMAGECUBE = 350,
    IMAGEBUFFER = 351,
    IMAGE1DARRAY = 352,
    IMAGE2DARRAY = 353,
    IMAGECUBEARRAY = 354,
    IMAGE2DMS = 355,
    IMAGE2DMSARRAY = 356,
    IIMAGE1D = 357,
    IIMAGE2D = 358,
    IIMAGE3D = 359,
    IIMAGE2DRECT = 360,
    IIMAGECUBE = 361,
    IIMAGEBUFFER = 362,
    IIMAGE1DARRAY = 363,
    IIMAGE2DARRAY = 364,
    IIMAGECUBEARRAY = 365,
    IIMAGE2DMS = 366,
    IIMAGE2DMSARRAY = 367,
    UIMAGE1D = 368,
    UIMAGE2D = 369,
    UIMAGE3D = 370,
    UIMAGE2DRECT = 371,
    UIMAGECUBE = 372,
    UIMAGEBUFFER = 373,
    UIMAGE1DARRAY = 374,
    UIMAGE2DARRAY = 375,
    UIMAGECUBEARRAY = 376,
    UIMAGE2DMS = 377,
    UIMAGE2DMSARRAY = 378,
    IMAGE1DSHADOW = 379,
    IMAGE2DSHADOW = 380,
    IMAGE1DARRAYSHADOW = 381,
    IMAGE2DARRAYSHADOW = 382,
    COHERENT = 383,
    VOLATILE = 384,
    RESTRICT = 385,
    READONLY = 386,
    WRITEONLY = 387,
    ATOMIC_UINT = 388,
    STRUCT = 389,
    VOID_TOK = 390,
    WHILE = 391,
    IDENTIFIER = 392,
    TYPE_IDENTIFIER = 393,
    NEW_IDENTIFIER = 394,
    FLOATCONSTANT = 395,
    INTCONSTANT = 396,
    UINTCONSTANT = 397,
    BOOLCONSTANT = 398,
    FIELD_SELECTION = 399,
    LEFT_OP = 400,
    RIGHT_OP = 401,
    INC_OP = 402,
    DEC_OP = 403,
    LE_OP = 404,
    GE_OP = 405,
    EQ_OP = 406,
    NE_OP = 407,
    AND_OP = 408,
    OR_OP = 409,
    XOR_OP = 410,
    MUL_ASSIGN = 411,
    DIV_ASSIGN = 412,
    ADD_ASSIGN = 413,
    MOD_ASSIGN = 414,
    LEFT_ASSIGN = 415,
    RIGHT_ASSIGN = 416,
    AND_ASSIGN = 417,
    XOR_ASSIGN = 418,
    OR_ASSIGN = 419,
    SUB_ASSIGN = 420,
    INVARIANT = 421,
    LOWP = 422,
    MEDIUMP = 423,
    HIGHP = 424,
    SUPERP = 425,
    PRECISION = 426,
    VERSION_TOK = 427,
    EXTENSION = 428,
    LINE = 429,
    COLON = 430,
    EOL = 431,
    INTERFACE = 432,
    OUTPUT = 433,
    PRAGMA_DEBUG_ON = 434,
    PRAGMA_DEBUG_OFF = 435,
    PRAGMA_OPTIMIZE_ON = 436,
    PRAGMA_OPTIMIZE_OFF = 437,
    PRAGMA_INVARIANT_ALL = 438,
    LAYOUT_TOK = 439,
    ASM = 440,
    CLASS = 441,
    UNION = 442,
    ENUM = 443,
    TYPEDEF = 444,
    TEMPLATE = 445,
    THIS = 446,
    PACKED_TOK = 447,
    GOTO = 448,
    INLINE_TOK = 449,
    NOINLINE = 450,
    PUBLIC_TOK = 451,
    STATIC = 452,
    EXTERN = 453,
    EXTERNAL = 454,
    LONG_TOK = 455,
    SHORT_TOK = 456,
    DOUBLE_TOK = 457,
    HALF = 458,
    FIXED_TOK = 459,
    UNSIGNED = 460,
    INPUT_TOK = 461,
    OUPTUT = 462,
    HVEC2 = 463,
    HVEC3 = 464,
    HVEC4 = 465,
    DVEC2 = 466,
    DVEC3 = 467,
    DVEC4 = 468,
    FVEC2 = 469,
    FVEC3 = 470,
    FVEC4 = 471,
    SAMPLER3DRECT = 472,
    SIZEOF = 473,
    CAST = 474,
    NAMESPACE = 475,
    USING = 476,
    RESOURCE = 477,
    PATCH = 478,
    SAMPLE = 479,
d420 1
a420 1
#line 91 "glsl_parser.yy" /* yacc.c:355  */
d457 1
a457 1
#line 455 "glsl_parser.cpp" /* yacc.c:355  */
d485 1
a485 1
#line 483 "glsl_parser.cpp" /* yacc.c:358  */
d729 1
a729 1
#define YYLAST   5407
d736 1
a736 1
#define YYNRULES  380
d738 1
a738 1
#define YYNSTATES  532
d807 39
a845 39
       0,   295,   295,   294,   306,   308,   315,   325,   326,   327,
     328,   329,   342,   344,   348,   349,   350,   354,   363,   371,
     382,   383,   387,   394,   401,   408,   415,   422,   429,   430,
     436,   440,   447,   453,   462,   466,   470,   471,   480,   481,
     485,   486,   490,   496,   508,   512,   518,   526,   537,   538,
     542,   543,   547,   553,   565,   577,   578,   584,   590,   600,
     601,   602,   603,   607,   608,   614,   620,   629,   630,   636,
     645,   646,   652,   661,   662,   668,   674,   680,   689,   690,
     696,   705,   706,   715,   716,   725,   726,   735,   736,   745,
     746,   755,   756,   765,   766,   775,   776,   785,   786,   787,
     788,   789,   790,   791,   792,   793,   794,   795,   799,   803,
     819,   823,   828,   832,   837,   844,   848,   849,   853,   858,
     866,   880,   890,   904,   909,   923,   926,   934,   946,   959,
     964,   969,   978,   982,   983,   993,  1003,  1013,  1027,  1034,
    1044,  1054,  1064,  1074,  1089,  1096,  1107,  1114,  1115,  1125,
    1126,  1130,  1315,  1438,  1464,  1469,  1477,  1482,  1487,  1496,
    1501,  1502,  1503,  1504,  1505,  1523,  1536,  1564,  1587,  1602,
    1622,  1636,  1641,  1649,  1654,  1659,  1664,  1669,  1674,  1679,
    1684,  1689,  1695,  1700,  1708,  1714,  1720,  1734,  1749,  1750,
    1758,  1764,  1770,  1779,  1780,  1781,  1782,  1783,  1784,  1785,
    1786,  1787,  1788,  1789,  1790,  1791,  1792,  1793,  1794,  1795,
    1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,  1805,
    1806,  1807,  1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,
    1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,  1824,  1825,
    1826,  1827,  1828,  1829,  1830,  1831,  1832,  1833,  1834,  1835,
    1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,  1844,  1845,
    1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,  1854,  1855,
    1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,  1865,
    1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,  1875,
    1876,  1877,  1878,  1879,  1883,  1888,  1893,  1901,  1908,  1917,
    1922,  1930,  1949,  1954,  1962,  1968,  1977,  1978,  1982,  1989,
    1996,  2003,  2009,  2010,  2014,  2015,  2016,  2017,  2018,  2019,
    2023,  2030,  2029,  2043,  2044,  2048,  2054,  2063,  2073,  2085,
    2091,  2100,  2109,  2114,  2122,  2126,  2144,  2152,  2157,  2165,
    2170,  2178,  2186,  2194,  2202,  2210,  2218,  2226,  2233,  2240,
    2250,  2251,  2255,  2257,  2263,  2268,  2277,  2283,  2289,  2295,
    2301,  2310,  2311,  2312,  2313,  2317,  2331,  2335,  2346,  2443,
    2448,  2453,  2462,  2466,  2472,  2481,  2486,  2494,  2518,  2526,
    2534
d859 3
a861 3
  "UNIFORM", "VARYING", "NOPERSPECTIVE", "FLAT", "SMOOTH", "MAT2X2",
  "MAT2X3", "MAT2X4", "MAT3X2", "MAT3X3", "MAT3X4", "MAT4X2", "MAT4X3",
  "MAT4X4", "SAMPLER1D", "SAMPLER2D", "SAMPLER3D", "SAMPLERCUBE",
d888 11
a898 11
  "OR_ASSIGN", "SUB_ASSIGN", "INVARIANT", "LOWP", "MEDIUMP", "HIGHP",
  "SUPERP", "PRECISION", "VERSION_TOK", "EXTENSION", "LINE", "COLON",
  "EOL", "INTERFACE", "OUTPUT", "PRAGMA_DEBUG_ON", "PRAGMA_DEBUG_OFF",
  "PRAGMA_OPTIMIZE_ON", "PRAGMA_OPTIMIZE_OFF", "PRAGMA_INVARIANT_ALL",
  "LAYOUT_TOK", "ASM", "CLASS", "UNION", "ENUM", "TYPEDEF", "TEMPLATE",
  "THIS", "PACKED_TOK", "GOTO", "INLINE_TOK", "NOINLINE", "PUBLIC_TOK",
  "STATIC", "EXTERN", "EXTERNAL", "LONG_TOK", "SHORT_TOK", "DOUBLE_TOK",
  "HALF", "FIXED_TOK", "UNSIGNED", "INPUT_TOK", "OUPTUT", "HVEC2", "HVEC3",
  "HVEC4", "DVEC2", "DVEC3", "DVEC4", "FVEC2", "FVEC3", "FVEC4",
  "SAMPLER3DRECT", "SIZEOF", "CAST", "NAMESPACE", "USING", "RESOURCE",
  "PATCH", "SAMPLE", "SUBROUTINE", "ERROR_TOK", "COMMON", "PARTITION",
d979 1
a979 1
#define YYPACT_NINF -393
d982 1
a982 1
  (!!((Yystate) == (-393)))
d984 1
a984 1
#define YYTABLE_NINF -372
d993 54
a1046 54
     -85,   -88,    33,  -393,   -94,  -393,  -133,  -393,  -393,  -393,
    -393,   -80,   -75,  4754,  -393,  -393,   -67,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,    12,    19,    36,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -115,  -393,  -393,   261,  -393,  -393,  -393,    41,
     -64,   -48,    24,    29,    37,   -51,  -393,  -393,  4754,  -393,
    -132,   -41,   -23,     1,  -147,  -393,    86,    35,  5064,  5269,
    5064,  5064,  -393,    -6,  -393,  5064,  -393,  -393,  -393,  -393,
    -393,    88,  -393,   -75,  4943,   -24,  -393,  -393,  -393,  -393,
    -393,  5064,  -393,  5064,  -393,  5269,  -393,  -393,  -393,  -393,
    -393,   -83,  -393,  -393,   517,  -393,  -393,    17,    17,  -393,
    -393,  -393,  -393,  5269,    17,    17,   -75,  -393,    10,    27,
    -204,    38,  -125,  -121,  -113,  -393,  -393,  -393,  -393,  -393,
    -393,  3639,    15,  -393,     2,    69,   -75,  1265,  -393,  4943,
      22,  -393,  -393,    13,  -148,  -393,  -393,    23,    25,  1999,
      45,    50,    31,  3176,    53,    54,  -393,  -393,  -393,  -393,
    -393,  4085,  4085,  4085,  -393,  -393,  -393,  -393,  -393,    34,
    -393,    56,  -393,  -101,  -393,  -393,  -393,    57,  -145,  4308,
      63,   181,  4085,    -3,   -96,    42,  -108,    66,    55,    60,
      52,   151,   152,  -126,  -393,  -393,  -140,  -393,    59,  5083,
      77,  -393,  -393,  -393,  -393,   771,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,   -75,  -393,  -393,  -187,  2953,
    -175,  -393,  -393,  -393,  -393,  -393,  -393,  -393,    75,  -393,
    3862,  4943,  -393,    -6,  -138,  -393,  -393,  -393,  1502,  -393,
      79,  -393,   -83,  -393,  -393,   176,  2492,  4085,  -393,  -393,
    -127,  4085,  3416,  -393,  -393,  -117,  -393,  1999,  -393,  -393,
    4085,    86,  -393,  -393,  4085,    80,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  4085,
    -393,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,
    4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,  4085,
    4085,  4085,  -393,  -393,  -393,    -6,  2953,  -159,  2953,  -393,
    -393,  2953,  -393,  -393,    81,   -75,    62,  4943,    15,   -75,
    -393,  -393,  -393,  -393,  -393,  -393,    83,  -393,  -393,  3416,
     -89,  -393,   -58,    82,   -75,    85,  -393,  1025,    90,    82,
    -393,    89,  -393,    87,   -40,  4531,  -393,  -393,  -393,  -393,
    -393,    -3,    -3,   -96,   -96,    42,    42,    42,    42,  -108,
    -108,    66,    55,    60,    52,   151,   152,  -173,  -393,    15,
    -393,  2953,  -393,  -161,  -393,  -393,  -112,   185,  -393,  -393,
    4085,  -393,    73,    94,  1999,    76,    95,  2252,  -393,  -393,
    -393,  -393,  -393,  4085,    96,  -393,  4085,  -393,  2730,  -393,
    -393,    -6,    93,   -39,  4085,  2252,   321,  -393,   -10,  -393,
    2953,  -393,  -393,  -393,  -393,  -393,  -393,  -393,    15,  -393,
      98,    82,  -393,  1999,  4085,    97,  -393,  -393,  1746,  1999,
      -8,  -393,  -393,  -393,  -139,  -393,  -393,  -393,  -393,  -393,
    1999,  -393
d1055 53
a1107 53
       5,     0,     0,     0,    13,     6,     0,   174,   173,   197,
     194,   195,   196,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   198,   199,   200,   171,   176,   177,   178,   175,
     158,   157,   156,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   222,   223,   225,   226,   228,   229,
     230,   231,   232,   234,   235,   236,   237,   239,   240,   241,
     242,   244,   245,   246,   248,   249,   250,   251,   253,   221,
     238,   247,   227,   233,   243,   252,   254,   255,   256,   257,
     258,   259,   224,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   179,   180,   181,   182,
     183,   293,     0,   193,   192,   159,   296,   295,   294,     0,
       0,     0,     0,     0,     0,     0,   172,   363,     3,   362,
       0,     0,   117,   125,     0,   133,   138,   163,   162,     0,
     160,   161,   144,   188,   190,   164,   191,    18,   361,   114,
     366,     0,   364,     0,     0,     0,   176,   177,   178,    20,
      21,   159,   143,   163,   165,     0,     7,     8,     9,    10,
      11,     0,    19,   111,     0,   365,   115,   125,   125,   129,
     130,   131,   118,     0,   125,   125,     0,   112,    14,    16,
     139,     0,   176,   177,   178,   167,   367,   166,   145,   168,
     169,     0,   189,   170,     0,     0,     0,     0,   299,     0,
       0,   155,   154,   151,     0,   147,   153,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,    23,    24,    26,
      47,     0,     0,     0,    59,    60,    61,    62,   329,   321,
     325,    22,    28,    55,    30,    35,    36,     0,     0,    41,
       0,    63,     0,    67,    70,    73,    78,    81,    83,    85,
      87,    89,    91,    93,    95,   108,     0,   311,     0,   163,
     144,   314,   327,   313,   312,     0,   315,   316,   317,   318,
     319,   119,   126,   123,   124,   132,   127,   128,   134,     0,
     140,   120,   379,   380,   378,   184,    63,   110,     0,    45,
       0,     0,    17,   304,     0,   302,   298,   300,     0,   113,
       0,   146,     0,   357,   356,     0,     0,     0,   360,   358,
       0,     0,     0,    56,    57,     0,   320,     0,    32,    33,
       0,     0,    39,    38,     0,   193,    42,    44,    98,    99,
     101,   100,   103,   104,   105,   106,   107,   102,    97,     0,
      58,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,   326,   328,   121,     0,   135,     0,   306,
     142,     0,   185,   186,     0,     0,     0,   375,   305,     0,
     301,   297,   149,   150,   152,   148,     0,   351,   350,   353,
       0,   359,     0,   334,     0,     0,    27,     0,     0,    34,
      31,     0,    37,     0,     0,    51,    43,    96,    64,    65,
      66,    68,    69,    71,    72,    76,    77,    74,    75,    79,
      80,    82,    84,    86,    88,    90,    92,     0,   109,   122,
     137,     0,   309,     0,   141,   187,     0,   372,   376,   303,
       0,   352,     0,     0,     0,     0,     0,     0,   322,    29,
      54,    49,    48,     0,   193,    52,     0,   136,     0,   307,
     377,   373,     0,     0,   354,     0,   333,   331,     0,   336,
       0,   324,   347,   323,    53,    94,   308,   310,   374,   368,
       0,   355,   349,     0,     0,     0,   337,   341,     0,   345,
       0,   335,   348,   332,     0,   340,   343,   342,   344,   338,
     346,   339
d1113 11
a1123 11
    -393,  -393,  -393,  -393,  -393,  -393,     0,  -393,  -393,  -119,
    -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,  -393,
    -393,  -393,  -393,  -393,   -14,  -393,  -141,  -124,  -111,  -110,
     -49,   -35,   -33,   -32,   -34,   -12,  -393,  -196,  -239,  -393,
    -240,    61,     6,     7,  -393,  -393,  -393,  -393,   159,   -27,
    -393,  -393,  -393,  -393,  -168,   -11,  -393,  -393,    44,  -393,
    -393,   -77,  -393,  -393,  -203,   -13,  -393,  -393,    58,  -393,
     149,  -210,   -26,   -29,  -369,  -393,    46,  -238,  -392,  -393,
    -393,  -109,   233,    40,    48,  -393,  -393,   -31,  -393,  -393,
    -123,  -393,  -135,  -393,  -393,  -393,  -393,  -393,  -393,   248,
    -393,  -393,  -142,  -393,  -393,    -5,  -393,  -393
d1129 11
a1139 11
      -1,     2,    13,     3,   147,     6,   323,    14,   148,   261,
     262,   263,   428,   264,   265,   266,   267,   268,   269,   270,
     432,   433,   434,   435,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   369,
     286,   318,   287,   288,   151,   152,   153,   303,   202,   203,
     204,   304,   154,   155,   156,   183,   234,   414,   235,   236,
     158,   159,   160,   161,   222,   319,   163,   164,   165,   166,
     227,   228,   324,   325,   400,   463,   291,   292,   293,   294,
     347,   502,   503,   295,   296,   297,   497,   425,   298,   499,
     517,   518,   519,   520,   299,   419,   472,   473,   300,   167,
     168,   169,   170,   171,   492,   406,   407,   172
d1147 68
a1214 67
     162,   335,   157,   340,    11,   198,   226,   310,   514,   515,
     514,   515,    16,   345,  -369,   216,   182,   327,  -370,   149,
     150,   198,     7,     8,     9,   317,  -371,   460,   389,   462,
     356,   221,   464,     5,   199,   200,   201,   211,    17,    18,
      12,   378,   379,     7,     8,     9,   348,   349,   221,   309,
     199,   200,   201,     4,     7,     8,     9,   394,   184,   226,
     320,   226,     7,     8,     9,   391,   396,    35,   212,   213,
     399,   214,    39,    40,    41,    42,   320,   488,   401,   486,
     215,   217,    10,   219,   220,   501,   331,     1,   223,   353,
     332,   206,   487,   354,   461,   489,    15,   420,   391,   391,
     409,   422,   423,   501,   184,   397,   215,   207,   173,   231,
     429,   391,   186,   531,   392,   436,   410,   426,   327,   507,
     408,   391,   193,   194,   317,   390,   409,   421,   187,   312,
     437,   521,   175,   313,   350,   162,   351,   157,   380,   381,
     174,   314,   490,   374,   375,   474,   218,   216,   232,   391,
     457,  -369,   458,   405,   149,   150,   210,   399,  -370,   399,
     226,   162,   399,   126,   127,   128,   129,   130,   136,   137,
     138,   302,   230,   225,   424,  -371,   475,   306,   307,   423,
     391,   290,   191,   289,   136,   137,   138,   376,   377,   394,
     305,   233,   459,   196,   482,   510,   485,   185,   483,   391,
     188,   181,   136,   137,   138,   189,   308,   316,   136,   137,
     138,   205,   215,   190,   162,   197,   162,   382,   383,   145,
     412,   413,   399,   208,     8,   209,   290,   224,   289,   221,
     493,   229,   431,   441,   442,  -116,   496,   343,   344,   405,
     371,   372,   373,   -20,   504,   322,   516,   505,   529,   399,
     320,   424,   443,   444,   511,   205,   205,   321,   370,   146,
     -21,   399,   205,   205,    17,    18,   330,   445,   446,   447,
     448,   311,   449,   450,   524,   523,   329,   333,   336,   334,
     526,   528,   290,   337,   289,   338,   341,   342,   508,   -46,
     346,   352,   528,    35,   176,   177,   357,   178,    39,    40,
      41,    42,   386,   384,   387,   395,   316,   388,   162,   385,
     -45,   402,   416,   193,   -40,   162,   470,   465,   467,   477,
     391,   481,   480,   290,   491,   289,   479,   494,   495,   290,
     -50,   498,   233,   513,   290,   451,   289,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   509,   500,   525,
     452,   430,   522,   453,   455,   454,   301,   438,   439,   440,
     316,   316,   316,   316,   316,   316,   316,   316,   316,   316,
     316,   316,   316,   316,   316,   316,   415,   456,   328,   466,
     469,   404,   417,   195,   418,   530,   512,   427,   471,   126,
     127,   128,   129,   130,   162,   527,   192,     0,   179,     0,
     180,     0,   468,     0,     0,     0,   290,     0,     0,     0,
       0,     0,     0,     0,   290,     0,   289,     0,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   181,   136,   137,
     138,     0,     0,     0,   368,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   145,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   290,     0,   289,   290,     0,   289,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   290,     0,   289,   146,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     290,     0,   289,     0,     0,   290,   290,   289,   289,     0,
       0,     0,     0,     0,     0,     0,     0,   290,     0,   289,
      17,    18,    19,    20,    21,    22,   237,   238,   239,     0,
     240,   241,   242,   243,   244,     0,     0,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,     0,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,     0,     0,     0,     0,   126,   127,   128,   129,   130,
     131,   132,   133,   245,   179,   134,   180,   246,   247,   248,
     249,   250,     0,     0,   251,   252,     0,     0,     0,     0,
d1216 1
a1216 1
       0,     0,     0,   135,   136,   137,   138,     0,   139,     0,
d1218 1
a1218 1
       0,   145,     0,     0,     0,     0,     0,     0,     0,     0,
d1222 18
a1239 118
       0,   146,     0,     0,     0,     0,     0,     0,     0,     0,
     253,     0,     0,     0,     0,     0,   254,   255,   256,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   258,   259,   260,    17,    18,    19,    20,    21,    22,
     237,   238,   239,     0,   240,   241,   242,   243,   244,     0,
       0,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,     0,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,     0,     0,     0,     0,   126,
     127,   128,   129,   130,   131,   132,   133,   245,   179,   134,
     180,   246,   247,   248,   249,   250,     0,     0,   251,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   135,   136,   137,
     138,     0,   139,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   145,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   146,     0,     0,     0,     0,
       0,     0,     0,     0,   253,     0,     0,     0,     0,     0,
     254,   255,   256,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   258,   259,   393,    17,    18,
      19,    20,    21,    22,   237,   238,   239,     0,   240,   241,
     242,   243,   244,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
       0,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,     0,
       0,     0,     0,   126,   127,   128,   129,   130,   131,   132,
     133,   245,   179,   134,   180,   246,   247,   248,   249,   250,
       0,     0,   251,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   135,   136,   137,   138,     0,   139,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   145,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   146,
       0,     0,     0,     0,     0,     0,     0,     0,   253,     0,
       0,     0,     0,     0,   254,   255,   256,   257,    17,    18,
      19,    20,    21,    22,     0,     0,     0,     0,     0,   258,
     259,   478,     0,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,   176,   177,
       0,   178,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,     0,
       0,     0,     0,   126,   127,   128,   129,   130,   131,   132,
     133,     0,     0,   134,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   181,   136,   137,   138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   145,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   146,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    17,    18,    19,    20,    21,
      22,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   326,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,   176,   177,     0,   178,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
     126,   127,   128,   129,   130,   131,   132,   133,     0,     0,
     134,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   181,   136,
     137,   138,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   146,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    17,
      18,    19,    20,    21,    22,   237,   238,   239,   411,   240,
     241,   242,   243,   244,   514,   515,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,     0,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,   126,   127,   128,   129,   130,   131,
     132,   133,   245,   179,   134,   180,   246,   247,   248,   249,
     250,     0,     0,   251,   252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   135,   136,   137,   138,     0,   139,     0,     0,
d1241 3
a1243 22
     145,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     146,     0,     0,     0,     0,     0,     0,     0,     0,   253,
       0,     0,     0,     0,     0,   254,   255,   256,   257,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     258,   259,    17,    18,    19,    20,    21,    22,   237,   238,
     239,     0,   240,   241,   242,   243,   244,     0,     0,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,     0,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,     0,     0,     0,     0,   126,   127,   128,
     129,   130,   131,   132,   133,   245,   179,   134,   180,   246,
     247,   248,   249,   250,     0,     0,   251,   252,     0,     0,
a1244 3
       0,     0,     0,     0,     0,   135,   136,   137,   138,     0,
     139,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   145,     0,     0,     0,     0,     0,     0,
d1248 4
a1251 5
       0,     0,     0,   146,     0,     0,     0,     0,     0,     0,
       0,     0,   253,     0,     0,     0,     0,     0,   254,   255,
     256,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   258,   259,    17,    18,    19,    20,    21,
      22,   237,   238,   239,     0,   240,   241,   242,   243,   244,
d1262 8
a1269 7
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
     126,   127,   128,   129,   130,   131,   132,   133,   245,   179,
     134,   180,   246,   247,   248,   249,   250,     0,     0,   251,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   135,   136,
     137,   138,     0,   139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,     0,     0,     0,
d1273 3
a1275 4
       0,     0,     0,     0,     0,     0,   146,     0,     0,     0,
       0,     0,     0,     0,     0,   253,     0,     0,     0,     0,
       0,   254,   255,   256,   257,    17,    18,    19,    20,    21,
      22,     0,     0,     0,     0,     0,   258,   194,     0,     0,
d1277 1
a1277 1
      31,    32,    33,    34,    35,    36,    37,     0,    38,    39,
d1286 7
a1292 7
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
     126,   127,   128,   129,   130,   131,   132,   133,     0,   179,
     134,   180,   246,   247,   248,   249,   250,     0,     0,   251,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   135,   136,
     137,   138,     0,   139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,     0,     0,     0,
d1296 5
a1300 29
       0,     0,     0,     0,     0,     0,   146,     0,     0,     0,
       0,     0,     0,     0,     0,   253,     0,     0,     0,     0,
       0,   254,   255,   256,   257,    19,    20,    21,    22,     0,
       0,     0,     0,     0,     0,     0,   258,     0,     0,     0,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,   133,     0,   179,   134,   180,
     246,   247,   248,   249,   250,     0,     0,   251,   252,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    19,    20,
      21,    22,     0,   253,     0,     0,     0,     0,     0,   254,
     255,   256,   257,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,   398,   506,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
d1308 3
a1310 4
     119,   120,   121,   122,   123,   124,   125,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,   133,     0,
     179,   134,   180,   246,   247,   248,   249,   250,     0,     0,
     251,   252,     0,     0,     0,     0,     0,     0,     0,     0,
d1313 2
d1318 16
d1335 1
d1337 1
a1337 15
       0,    19,    20,    21,    22,     0,   253,     0,     0,     0,
       0,     0,   254,   255,   256,   257,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   398,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,   133,     0,   179,   134,   180,   246,   247,   248,   249,
     250,     0,     0,   251,   252,     0,     0,     0,     0,     0,
d1341 18
d1360 3
a1365 17
       0,     0,     0,     0,     0,     0,     0,     0,     0,   253,
       0,     0,     0,     0,     0,   254,   255,   256,   257,    17,
      18,    19,    20,    21,    22,     0,     0,     0,     0,     0,
     339,     0,     0,     0,     0,     0,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,   176,
     177,     0,   178,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,   126,   127,   128,   129,   130,   131,
     132,   133,     0,   179,   134,   180,   246,   247,   248,   249,
     250,     0,     0,   251,   252,     0,     0,     0,     0,     0,
d1367 1
a1367 1
       0,     0,   181,   136,   137,   138,     0,     0,     0,     0,
d1369 15
a1383 1
     145,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d1385 3
a1389 15
     146,     0,     0,     0,    19,    20,    21,    22,     0,   253,
       0,     0,     0,     0,     0,   254,   255,   256,   257,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,   133,     0,   179,   134,   180,   246,
     247,   248,   249,   250,     0,     0,   251,   252,     0,     0,
d1392 16
d1409 3
d1416 4
a1419 39
       0,     0,     0,     0,     0,     0,     0,    19,    20,    21,
      22,     0,   253,     0,     0,   315,     0,     0,   254,   255,
     256,   257,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,   133,     0,   179,
     134,   180,   246,   247,   248,   249,   250,     0,     0,   251,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      19,    20,    21,    22,     0,   253,     0,     0,   403,     0,
       0,   254,   255,   256,   257,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
     133,     0,   179,   134,   180,   246,   247,   248,   249,   250,
       0,     0,   251,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a1420 9
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    19,    20,    21,    22,     0,   253,     0,
       0,     0,     0,     0,   254,   255,   256,   257,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
d1429 3
a1431 3
     124,   125,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,   355,     0,   179,   134,   180,   246,   247,
     248,   249,   250,     0,     0,   251,   252,     0,     0,     0,
d1440 4
a1443 4
       0,   253,     0,     0,     0,     0,     0,   254,   255,   256,
     257,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,    49,    50,
d1451 26
a1476 3
     121,   122,   123,   124,   125,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,   132,   484,     0,   179,   134,
     180,   246,   247,   248,   249,   250,     0,     0,   251,   252,
d1484 6
a1489 5
       0,     0,     0,     0,     0,     0,     0,    17,    18,    19,
      20,    21,    22,     0,   253,     0,     0,     0,     0,     0,
     254,   255,   256,   257,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,     0,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
d1497 24
a1520 3
     118,   119,   120,   121,   122,   123,   124,   125,     0,     0,
       0,     0,   126,   127,   128,   129,   130,   131,   132,   133,
       0,     0,   134,     0,     0,     0,     0,     0,     0,     0,
a1522 21
     135,   136,   137,   138,     0,   139,     0,     0,     0,     0,
       0,     0,     0,   140,   141,   142,   143,   144,   145,     0,
       0,     0,     0,     0,     0,     0,    17,    18,    19,    20,
      21,    22,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,   176,   177,   146,   178,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,    17,    18,     0,
       0,   126,   127,   128,   129,   130,   131,   132,   133,     0,
       0,   134,     0,     0,     0,     0,    17,    18,     0,     0,
       0,     0,     0,     0,     0,     0,    35,   176,   177,     0,
     178,    39,    40,    41,    42,     0,     0,     0,     0,   181,
     136,   137,   138,     0,     0,    35,    36,    37,     0,    38,
      39,    40,    41,    42,     0,     0,     0,   145,     0,     0,
d1526 56
a1581 1
       0,     0,     0,     0,     0,     0,     0,   146,     0,     0,
a1583 1
       0,     0,   126,   127,   128,   129,   130,     0,     0,     0,
a1584 1
       0,   126,   127,   128,   129,   130,     0,     0,     0,     0,
a1585 4
     181,   136,   137,   138,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   145,   181,
     136,   137,   138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   145,     0,     0,
d1587 1
a1587 1
       0,     0,     0,     0,     0,     0,     0,     0,   146,    23,
d1589 2
a1590 2
      34,     0,     0,     0,     0,     0,     0,   146,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
d1598 50
a1647 113
     123,   124,   125,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,   133,     0,     0,   134
};

static const yytype_int16 yycheck[] =
{
      13,   239,    13,   243,     4,     4,   174,   210,    18,    19,
      18,    19,    12,   253,   139,   157,   135,   227,   139,    13,
      13,     4,   137,   138,   139,   221,   139,   396,   154,   398,
     269,   235,   401,     0,    33,    34,    35,   156,     3,     4,
     173,   149,   150,   137,   138,   139,   147,   148,   235,   253,
      33,    34,    35,   141,   137,   138,   139,   295,   135,   227,
     235,   229,   137,   138,   139,   238,   253,    32,    33,    34,
     309,    36,    37,    38,    39,    40,   235,   238,   253,   252,
     157,   158,   176,   160,   161,   477,   234,   172,   165,   234,
     238,   238,   461,   238,   253,   256,   176,   337,   238,   238,
     238,   341,   342,   495,   181,   308,   183,   254,   175,   192,
     350,   238,   176,   252,   254,   354,   254,   234,   328,   488,
     323,   238,   254,   255,   320,   251,   238,   254,   176,   254,
     369,   500,   132,   254,   235,   148,   237,   148,   246,   247,
     255,   254,   254,   239,   240,   234,   159,   289,   231,   238,
     390,   139,   391,   321,   148,   148,   156,   396,   139,   398,
     328,   174,   401,   128,   129,   130,   131,   132,   167,   168,
     169,   198,   185,   173,   342,   139,   234,   204,   205,   419,
     238,   194,   233,   194,   167,   168,   169,   145,   146,   427,
     203,   191,   395,   234,   234,   234,   435,   139,   238,   238,
     176,   166,   167,   168,   169,   176,   206,   221,   167,   168,
     169,   153,   289,   176,   227,   238,   229,   151,   152,   184,
     141,   142,   461,   137,   138,   139,   239,   139,   239,   235,
     470,   255,   351,   374,   375,   234,   474,   251,   252,   407,
     243,   244,   245,   233,   483,   176,   256,   486,   256,   488,
     235,   419,   376,   377,   494,   197,   198,   255,   272,   224,
     233,   500,   204,   205,     3,     4,   253,   378,   379,   380,
     381,   233,   382,   383,   514,   513,   254,   254,   233,   254,
     518,   519,   295,   233,   295,   254,   233,   233,   491,   233,
     256,   234,   530,    32,    33,    34,   233,    36,    37,    38,
      39,    40,   250,   248,   153,   305,   320,   155,   321,   249,
     233,   236,   136,   254,   234,   328,   233,   236,   256,   234,
     238,   234,   233,   336,   139,   336,   236,   254,   234,   342,
     234,   255,   332,    12,   347,   384,   347,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   254,   253,   252,
     385,   351,   254,   386,   388,   387,   197,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   332,   389,   229,   405,
     409,   320,   336,   150,   336,   520,   495,   347,   419,   128,
     129,   130,   131,   132,   407,   518,   148,    -1,   137,    -1,
     139,    -1,   407,    -1,    -1,    -1,   419,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   427,    -1,   427,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   424,    -1,    -1,   166,   167,   168,
     169,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   474,    -1,   474,   477,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   495,    -1,   495,   224,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     513,    -1,   513,    -1,    -1,   518,   519,   518,   519,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,   530,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    -1,
      13,    14,    15,    16,    17,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,    -1,    -1,    -1,    -1,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   166,   167,   168,   169,    -1,   171,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     233,    -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   254,   255,   256,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    -1,    13,    14,    15,    16,    17,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,    -1,    -1,   147,   148,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,   168,
     169,    -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,
     239,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   254,   255,   256,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    -1,    13,    14,
      15,    16,    17,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    36,    37,    38,    39,    40,    41,    42,    43,    44,
d1655 23
a1677 91
     115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
      -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   166,   167,   168,   169,    -1,   171,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,
      -1,    -1,    -1,    -1,   239,   240,   241,   242,     3,     4,
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,   254,
     255,   256,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,   128,   129,   130,   131,   132,   133,   134,
     135,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,
       8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   256,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,   131,   132,   133,   134,   135,    -1,    -1,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,
     168,   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,   256,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   166,   167,   168,   169,    -1,   171,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     254,   255,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    -1,    13,    14,    15,    16,    17,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
d1685 75
a1759 3
     121,   122,   123,    -1,    -1,    -1,    -1,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,    -1,    -1,   147,   148,    -1,    -1,
d1761 1
a1761 3
      -1,    -1,    -1,    -1,    -1,   166,   167,   168,   169,    -1,
     171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,
d1763 1
d1766 30
a1795 4
      -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,   239,   240,
     241,   242,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   254,   255,     3,     4,     5,     6,     7,
d1807 8
a1814 7
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,    -1,    -1,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,
     168,   169,    -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,
a1817 1
      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
d1820 1
a1820 1
       8,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,    -1,
d1831 7
a1837 7
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,   140,   141,   142,   143,   144,    -1,    -1,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,
     168,   169,    -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,
d1841 5
a1845 29
      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,
      -1,   239,   240,   241,   242,     5,     6,     7,     8,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,   141,   142,   143,   144,    -1,    -1,   147,   148,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,
       7,     8,    -1,   233,    -1,    -1,    -1,    -1,    -1,   239,
     240,   241,   242,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
d1853 3
a1855 5
     117,   118,   119,   120,   121,   122,   123,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,   141,   142,   143,   144,    -1,    -1,
     147,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1858 2
d1863 16
d1880 1
a1880 15
      -1,     5,     6,     7,     8,    -1,   233,    -1,    -1,    -1,
      -1,    -1,   239,   240,   241,   242,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,   255,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,
d1882 1
d1886 18
d1905 3
a1909 17
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,     3,
       4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
     254,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,
a1910 1
      -1,    -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
d1912 1
a1912 1
     184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1914 15
d1930 3
a1933 15
     224,    -1,    -1,    -1,     5,     6,     7,     8,    -1,   233,
      -1,    -1,    -1,    -1,    -1,   239,   240,   241,   242,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
     141,   142,   143,   144,    -1,    -1,   147,   148,    -1,    -1,
d1937 16
d1954 3
a1959 16
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,
       8,    -1,   233,    -1,    -1,   236,    -1,    -1,   239,   240,
     241,   242,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,   141,   142,   143,   144,    -1,    -1,   147,
     148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d1961 4
a1965 31
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,     6,     7,     8,    -1,   233,    -1,    -1,   236,    -1,
      -1,   239,   240,   241,   242,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,   141,   142,   143,   144,
      -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     5,     6,     7,     8,    -1,   233,    -1,
      -1,    -1,    -1,    -1,   239,   240,   241,   242,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
d1974 3
a1976 3
     122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,   141,
     142,   143,   144,    -1,    -1,   147,   148,    -1,    -1,    -1,
d1987 2
a1988 2
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
d1996 4
a1999 3
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,   141,   142,   143,   144,    -1,    -1,   147,   148,
d2006 1
a2006 2
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
d2009 24
d2042 65
a2106 3
     116,   117,   118,   119,   120,   121,   122,   123,    -1,    -1,
      -1,    -1,   128,   129,   130,   131,   132,   133,   134,   135,
      -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a2108 21
     166,   167,   168,   169,    -1,   171,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   224,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,     3,     4,    -1,
      -1,   128,   129,   130,   131,   132,   133,   134,   135,    -1,
      -1,   138,    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    33,    34,    -1,
      36,    37,    38,    39,    40,    -1,    -1,    -1,    -1,   166,
     167,   168,   169,    -1,    -1,    32,    33,    34,    -1,    36,
      37,    38,    39,    40,    -1,    -1,    -1,   184,    -1,    -1,
d2111 15
a2126 1
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,
a2128 1
      -1,    -1,   128,   129,   130,   131,   132,    -1,    -1,    -1,
a2129 1
      -1,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
a2130 4
     166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   166,
     167,   168,   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,
d2132 1
a2132 1
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    20,
d2134 2
a2135 2
      31,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
d2141 92
a2232 4
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   134,   135,    -1,    -1,   138
d2239 2
a2240 2
       0,   172,   258,   260,   141,     0,   262,   137,   138,   139,
     176,   263,   173,   259,   264,   176,   263,     3,     4,     5,
d2251 42
a2292 42
     118,   119,   120,   121,   122,   123,   128,   129,   130,   131,
     132,   133,   134,   135,   138,   166,   167,   168,   169,   171,
     179,   180,   181,   182,   183,   184,   224,   261,   265,   299,
     300,   301,   302,   303,   309,   310,   311,   312,   317,   318,
     319,   320,   322,   323,   324,   325,   326,   356,   357,   358,
     359,   360,   364,   175,   255,   263,    33,    34,    36,   137,
     139,   166,   266,   312,   318,   325,   176,   176,   176,   176,
     176,   233,   356,   254,   255,   339,   234,   238,     4,    33,
      34,    35,   305,   306,   307,   325,   238,   254,   137,   139,
     263,   266,    33,    34,    36,   318,   359,   318,   322,   318,
     318,   235,   321,   318,   139,   263,   311,   327,   328,   255,
     322,   192,   231,   263,   313,   315,   316,     9,    10,    11,
      13,    14,    15,    16,    17,   136,   140,   141,   142,   143,
     144,   147,   148,   233,   239,   240,   241,   242,   254,   255,
     256,   266,   267,   268,   270,   271,   272,   273,   274,   275,
     276,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   297,   299,   300,   312,
     322,   333,   334,   335,   336,   340,   341,   342,   345,   351,
     355,   305,   306,   304,   308,   322,   306,   306,   263,   253,
     321,   233,   254,   254,   254,   236,   281,   294,   298,   322,
     235,   255,   176,   263,   329,   330,   256,   328,   327,   254,
     253,   234,   238,   254,   254,   334,   233,   233,   254,   254,
     297,   233,   233,   281,   281,   297,   256,   337,   147,   148,
     235,   237,   234,   234,   238,   135,   295,   233,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   253,   296,
     281,   243,   244,   245,   239,   240,   145,   146,   149,   150,
     246,   247,   151,   152,   248,   249,   250,   153,   155,   154,
     251,   238,   254,   256,   334,   263,   253,   321,   255,   295,
     331,   253,   236,   236,   298,   311,   362,   363,   321,   238,
     254,   256,   141,   142,   314,   315,   136,   333,   341,   352,
     297,   254,   297,   297,   311,   344,   234,   340,   269,   297,
     263,   266,   277,   278,   279,   280,   295,   295,   281,   281,
     281,   283,   283,   284,   284,   285,   285,   285,   285,   286,
     286,   287,   288,   289,   290,   291,   292,   297,   295,   321,
     331,   253,   331,   332,   331,   236,   329,   256,   362,   330,
     233,   344,   353,   354,   234,   234,   263,   234,   256,   236,
     233,   234,   234,   238,   135,   295,   252,   331,   238,   256,
     254,   139,   361,   297,   254,   234,   334,   343,   255,   346,
     253,   335,   338,   339,   295,   295,   256,   331,   321,   254,
     234,   297,   338,    12,    18,    19,   256,   347,   348,   349,
     350,   331,   254,   334,   297,   252,   334,   347,   334,   256,
     349,   252
d2300 18
a2317 18
     266,   266,   267,   267,   267,   267,   267,   267,   268,   268,
     268,   268,   268,   268,   269,   270,   271,   271,   272,   272,
     273,   273,   274,   274,   275,   276,   276,   276,   277,   277,
     278,   278,   279,   279,   280,   281,   281,   281,   281,   282,
     282,   282,   282,   283,   283,   283,   283,   284,   284,   284,
     285,   285,   285,   286,   286,   286,   286,   286,   287,   287,
     287,   288,   288,   289,   289,   290,   290,   291,   291,   292,
     292,   293,   293,   294,   294,   295,   295,   296,   296,   296,
     296,   296,   296,   296,   296,   296,   296,   296,   297,   297,
     298,   299,   299,   299,   299,   300,   301,   301,   302,   302,
     303,   304,   304,   305,   305,   306,   306,   306,   306,   307,
     307,   307,   308,   309,   309,   309,   309,   309,   310,   310,
     310,   310,   310,   310,   311,   311,   312,   313,   313,   314,
     314,   315,   315,   315,   316,   316,   317,   317,   317,   318,
     318,   318,   318,   318,   318,   318,   318,   318,   318,   318,
     318,   319,   319,   320,   320,   320,   320,   320,   320,   320,
     320,   320,   320,   320,   321,   321,   321,   321,   322,   322,
     323,   323,   323,   324,   324,   324,   324,   324,   324,   324,
d2327 10
a2336 10
     324,   324,   324,   324,   325,   325,   325,   326,   326,   327,
     327,   328,   329,   329,   330,   330,   331,   331,   331,   332,
     332,   333,   334,   334,   335,   335,   335,   335,   335,   335,
     336,   337,   336,   338,   338,   339,   339,   340,   340,   341,
     341,   342,   343,   343,   344,   344,   345,   346,   346,   347,
     347,   348,   348,   349,   349,   350,   350,   351,   351,   351,
     352,   352,   353,   353,   354,   354,   355,   355,   355,   355,
     355,   356,   356,   356,   356,   357,   358,   358,   359,   360,
     360,   360,   361,   361,   361,   362,   362,   363,   364,   364,
     364
d2344 8
a2351 17
       1,     1,     1,     1,     1,     1,     1,     3,     1,     4,
       1,     3,     2,     2,     1,     1,     1,     3,     2,     2,
       2,     1,     2,     3,     2,     1,     1,     1,     2,     2,
       2,     1,     2,     3,     2,     1,     2,     2,     2,     1,
       1,     1,     1,     1,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
       3,     1,     3,     1,     5,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     2,     2,     4,     1,     2,     1,     1,     2,     3,
       3,     2,     3,     2,     2,     0,     2,     2,     2,     1,
       1,     1,     1,     1,     3,     4,     6,     5,     1,     2,
       3,     5,     4,     2,     1,     2,     4,     1,     3,     1,
       1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     3,     3,     4,     1,     2,
d2353 9
d2371 10
a2380 10
       1,     1,     1,     1,     1,     1,     1,     5,     4,     1,
       2,     3,     1,     3,     1,     2,     1,     3,     4,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     0,     4,     1,     1,     2,     3,     1,     2,     1,
       2,     5,     3,     1,     1,     4,     5,     2,     3,     3,
       2,     1,     2,     2,     2,     1,     2,     5,     7,     6,
       1,     1,     1,     0,     2,     3,     2,     2,     2,     3,
       2,     1,     1,     1,     1,     2,     1,     2,     7,     1,
       1,     1,     0,     1,     2,     1,     2,     3,     3,     3,
       3
d2974 1
a2974 1
#line 80 "glsl_parser.yy" /* yacc.c:1429  */
d2983 1
a2983 1
#line 2981 "glsl_parser.cpp" /* yacc.c:1429  */
d3170 1
a3170 1
#line 295 "glsl_parser.yy" /* yacc.c:1646  */
d3174 1
a3174 1
#line 3172 "glsl_parser.cpp" /* yacc.c:1646  */
d3178 1
a3178 1
#line 299 "glsl_parser.yy" /* yacc.c:1646  */
d3184 1
a3184 1
#line 3182 "glsl_parser.cpp" /* yacc.c:1646  */
d3188 1
a3188 1
#line 309 "glsl_parser.yy" /* yacc.c:1646  */
d3195 1
a3195 1
#line 3193 "glsl_parser.cpp" /* yacc.c:1646  */
d3199 1
a3199 1
#line 316 "glsl_parser.yy" /* yacc.c:1646  */
d3206 1
a3206 1
#line 3204 "glsl_parser.cpp" /* yacc.c:1646  */
d3210 1
a3210 1
#line 330 "glsl_parser.yy" /* yacc.c:1646  */
d3221 1
a3221 1
#line 3219 "glsl_parser.cpp" /* yacc.c:1646  */
d3225 1
a3225 1
#line 355 "glsl_parser.yy" /* yacc.c:1646  */
d3231 1
a3231 1
#line 3229 "glsl_parser.cpp" /* yacc.c:1646  */
d3235 1
a3235 1
#line 364 "glsl_parser.yy" /* yacc.c:1646  */
d3243 1
a3243 1
#line 3241 "glsl_parser.cpp" /* yacc.c:1646  */
d3247 1
a3247 1
#line 372 "glsl_parser.yy" /* yacc.c:1646  */
d3255 14
a3268 1
#line 3253 "glsl_parser.cpp" /* yacc.c:1646  */
d3271 2
a3272 2
  case 22:
#line 388 "glsl_parser.yy" /* yacc.c:1646  */
d3279 1
a3279 1
#line 3264 "glsl_parser.cpp" /* yacc.c:1646  */
d3282 2
a3283 2
  case 23:
#line 395 "glsl_parser.yy" /* yacc.c:1646  */
d3290 1
a3290 1
#line 3275 "glsl_parser.cpp" /* yacc.c:1646  */
d3293 2
a3294 2
  case 24:
#line 402 "glsl_parser.yy" /* yacc.c:1646  */
d3301 1
a3301 1
#line 3286 "glsl_parser.cpp" /* yacc.c:1646  */
d3304 2
a3305 2
  case 25:
#line 409 "glsl_parser.yy" /* yacc.c:1646  */
d3312 1
a3312 1
#line 3297 "glsl_parser.cpp" /* yacc.c:1646  */
d3315 2
a3316 2
  case 26:
#line 416 "glsl_parser.yy" /* yacc.c:1646  */
d3323 1
a3323 1
#line 3308 "glsl_parser.cpp" /* yacc.c:1646  */
d3326 2
a3327 2
  case 27:
#line 423 "glsl_parser.yy" /* yacc.c:1646  */
d3331 1
a3331 1
#line 3316 "glsl_parser.cpp" /* yacc.c:1646  */
d3334 2
a3335 2
  case 29:
#line 431 "glsl_parser.yy" /* yacc.c:1646  */
d3341 1
a3341 1
#line 3326 "glsl_parser.cpp" /* yacc.c:1646  */
d3344 2
a3345 2
  case 30:
#line 437 "glsl_parser.yy" /* yacc.c:1646  */
d3349 1
a3349 1
#line 3334 "glsl_parser.cpp" /* yacc.c:1646  */
d3352 2
a3353 2
  case 31:
#line 441 "glsl_parser.yy" /* yacc.c:1646  */
d3360 1
a3360 1
#line 3345 "glsl_parser.cpp" /* yacc.c:1646  */
d3363 2
a3364 2
  case 32:
#line 448 "glsl_parser.yy" /* yacc.c:1646  */
d3370 1
a3370 1
#line 3355 "glsl_parser.cpp" /* yacc.c:1646  */
d3373 2
a3374 2
  case 33:
#line 454 "glsl_parser.yy" /* yacc.c:1646  */
d3380 1
a3380 1
#line 3365 "glsl_parser.cpp" /* yacc.c:1646  */
d3383 2
a3384 2
  case 37:
#line 472 "glsl_parser.yy" /* yacc.c:1646  */
d3390 1
a3390 1
#line 3375 "glsl_parser.cpp" /* yacc.c:1646  */
d3393 2
a3394 2
  case 42:
#line 491 "glsl_parser.yy" /* yacc.c:1646  */
d3400 1
a3400 1
#line 3385 "glsl_parser.cpp" /* yacc.c:1646  */
d3403 2
a3404 2
  case 43:
#line 497 "glsl_parser.yy" /* yacc.c:1646  */
d3410 1
a3410 1
#line 3395 "glsl_parser.cpp" /* yacc.c:1646  */
d3413 2
a3414 2
  case 45:
#line 513 "glsl_parser.yy" /* yacc.c:1646  */
d3420 1
a3420 1
#line 3405 "glsl_parser.cpp" /* yacc.c:1646  */
d3423 2
a3424 2
  case 46:
#line 519 "glsl_parser.yy" /* yacc.c:1646  */
d3432 1
a3432 1
#line 3417 "glsl_parser.cpp" /* yacc.c:1646  */
d3435 2
a3436 2
  case 47:
#line 527 "glsl_parser.yy" /* yacc.c:1646  */
d3444 1
a3444 1
#line 3429 "glsl_parser.cpp" /* yacc.c:1646  */
d3447 2
a3448 2
  case 52:
#line 548 "glsl_parser.yy" /* yacc.c:1646  */
d3454 1
a3454 1
#line 3439 "glsl_parser.cpp" /* yacc.c:1646  */
d3457 2
a3458 2
  case 53:
#line 554 "glsl_parser.yy" /* yacc.c:1646  */
d3464 1
a3464 1
#line 3449 "glsl_parser.cpp" /* yacc.c:1646  */
d3467 2
a3468 2
  case 54:
#line 566 "glsl_parser.yy" /* yacc.c:1646  */
d3476 1
a3476 1
#line 3461 "glsl_parser.cpp" /* yacc.c:1646  */
d3479 2
a3480 2
  case 56:
#line 579 "glsl_parser.yy" /* yacc.c:1646  */
d3486 1
a3486 1
#line 3471 "glsl_parser.cpp" /* yacc.c:1646  */
d3489 2
a3490 2
  case 57:
#line 585 "glsl_parser.yy" /* yacc.c:1646  */
d3496 1
a3496 1
#line 3481 "glsl_parser.cpp" /* yacc.c:1646  */
d3499 2
a3500 2
  case 58:
#line 591 "glsl_parser.yy" /* yacc.c:1646  */
d3506 1
a3506 1
#line 3491 "glsl_parser.cpp" /* yacc.c:1646  */
d3509 2
a3510 2
  case 59:
#line 600 "glsl_parser.yy" /* yacc.c:1646  */
d3512 1
a3512 1
#line 3497 "glsl_parser.cpp" /* yacc.c:1646  */
d3515 2
a3516 2
  case 60:
#line 601 "glsl_parser.yy" /* yacc.c:1646  */
d3518 1
a3518 1
#line 3503 "glsl_parser.cpp" /* yacc.c:1646  */
d3521 2
a3522 2
  case 61:
#line 602 "glsl_parser.yy" /* yacc.c:1646  */
d3524 1
a3524 1
#line 3509 "glsl_parser.cpp" /* yacc.c:1646  */
d3527 2
a3528 2
  case 62:
#line 603 "glsl_parser.yy" /* yacc.c:1646  */
d3530 1
a3530 1
#line 3515 "glsl_parser.cpp" /* yacc.c:1646  */
d3533 2
a3534 2
  case 64:
#line 609 "glsl_parser.yy" /* yacc.c:1646  */
d3540 1
a3540 1
#line 3525 "glsl_parser.cpp" /* yacc.c:1646  */
d3543 2
a3544 2
  case 65:
#line 615 "glsl_parser.yy" /* yacc.c:1646  */
d3550 1
a3550 1
#line 3535 "glsl_parser.cpp" /* yacc.c:1646  */
d3553 2
a3554 2
  case 66:
#line 621 "glsl_parser.yy" /* yacc.c:1646  */
d3560 1
a3560 1
#line 3545 "glsl_parser.cpp" /* yacc.c:1646  */
d3563 2
a3564 2
  case 68:
#line 631 "glsl_parser.yy" /* yacc.c:1646  */
d3570 1
a3570 1
#line 3555 "glsl_parser.cpp" /* yacc.c:1646  */
d3573 2
a3574 2
  case 69:
#line 637 "glsl_parser.yy" /* yacc.c:1646  */
d3580 1
a3580 1
#line 3565 "glsl_parser.cpp" /* yacc.c:1646  */
d3583 2
a3584 2
  case 71:
#line 647 "glsl_parser.yy" /* yacc.c:1646  */
d3590 1
a3590 1
#line 3575 "glsl_parser.cpp" /* yacc.c:1646  */
d3593 2
a3594 2
  case 72:
#line 653 "glsl_parser.yy" /* yacc.c:1646  */
d3600 1
a3600 1
#line 3585 "glsl_parser.cpp" /* yacc.c:1646  */
d3603 2
a3604 2
  case 74:
#line 663 "glsl_parser.yy" /* yacc.c:1646  */
d3610 1
a3610 1
#line 3595 "glsl_parser.cpp" /* yacc.c:1646  */
d3613 2
a3614 2
  case 75:
#line 669 "glsl_parser.yy" /* yacc.c:1646  */
d3620 1
a3620 1
#line 3605 "glsl_parser.cpp" /* yacc.c:1646  */
d3623 2
a3624 2
  case 76:
#line 675 "glsl_parser.yy" /* yacc.c:1646  */
d3630 1
a3630 1
#line 3615 "glsl_parser.cpp" /* yacc.c:1646  */
d3633 2
a3634 2
  case 77:
#line 681 "glsl_parser.yy" /* yacc.c:1646  */
d3640 1
a3640 1
#line 3625 "glsl_parser.cpp" /* yacc.c:1646  */
d3643 2
a3644 2
  case 79:
#line 691 "glsl_parser.yy" /* yacc.c:1646  */
d3650 1
a3650 1
#line 3635 "glsl_parser.cpp" /* yacc.c:1646  */
d3653 2
a3654 2
  case 80:
#line 697 "glsl_parser.yy" /* yacc.c:1646  */
d3660 1
a3660 1
#line 3645 "glsl_parser.cpp" /* yacc.c:1646  */
d3663 2
a3664 2
  case 82:
#line 707 "glsl_parser.yy" /* yacc.c:1646  */
d3670 1
a3670 1
#line 3655 "glsl_parser.cpp" /* yacc.c:1646  */
d3673 2
a3674 2
  case 84:
#line 717 "glsl_parser.yy" /* yacc.c:1646  */
d3680 1
a3680 1
#line 3665 "glsl_parser.cpp" /* yacc.c:1646  */
d3683 2
a3684 2
  case 86:
#line 727 "glsl_parser.yy" /* yacc.c:1646  */
d3690 1
a3690 1
#line 3675 "glsl_parser.cpp" /* yacc.c:1646  */
d3693 2
a3694 2
  case 88:
#line 737 "glsl_parser.yy" /* yacc.c:1646  */
d3700 1
a3700 1
#line 3685 "glsl_parser.cpp" /* yacc.c:1646  */
d3703 2
a3704 2
  case 90:
#line 747 "glsl_parser.yy" /* yacc.c:1646  */
d3710 1
a3710 1
#line 3695 "glsl_parser.cpp" /* yacc.c:1646  */
d3713 2
a3714 2
  case 92:
#line 757 "glsl_parser.yy" /* yacc.c:1646  */
d3720 1
a3720 1
#line 3705 "glsl_parser.cpp" /* yacc.c:1646  */
d3723 2
a3724 2
  case 94:
#line 767 "glsl_parser.yy" /* yacc.c:1646  */
d3730 1
a3730 1
#line 3715 "glsl_parser.cpp" /* yacc.c:1646  */
d3733 2
a3734 2
  case 96:
#line 777 "glsl_parser.yy" /* yacc.c:1646  */
d3740 1
a3740 1
#line 3725 "glsl_parser.cpp" /* yacc.c:1646  */
d3743 2
a3744 2
  case 97:
#line 785 "glsl_parser.yy" /* yacc.c:1646  */
d3746 1
a3746 1
#line 3731 "glsl_parser.cpp" /* yacc.c:1646  */
d3749 2
a3750 2
  case 98:
#line 786 "glsl_parser.yy" /* yacc.c:1646  */
d3752 1
a3752 1
#line 3737 "glsl_parser.cpp" /* yacc.c:1646  */
d3755 2
a3756 2
  case 99:
#line 787 "glsl_parser.yy" /* yacc.c:1646  */
d3758 1
a3758 1
#line 3743 "glsl_parser.cpp" /* yacc.c:1646  */
d3761 2
a3762 2
  case 100:
#line 788 "glsl_parser.yy" /* yacc.c:1646  */
d3764 1
a3764 1
#line 3749 "glsl_parser.cpp" /* yacc.c:1646  */
d3767 2
a3768 2
  case 101:
#line 789 "glsl_parser.yy" /* yacc.c:1646  */
d3770 1
a3770 1
#line 3755 "glsl_parser.cpp" /* yacc.c:1646  */
d3773 2
a3774 2
  case 102:
#line 790 "glsl_parser.yy" /* yacc.c:1646  */
d3776 1
a3776 1
#line 3761 "glsl_parser.cpp" /* yacc.c:1646  */
d3779 2
a3780 2
  case 103:
#line 791 "glsl_parser.yy" /* yacc.c:1646  */
d3782 1
a3782 1
#line 3767 "glsl_parser.cpp" /* yacc.c:1646  */
d3785 2
a3786 2
  case 104:
#line 792 "glsl_parser.yy" /* yacc.c:1646  */
d3788 1
a3788 1
#line 3773 "glsl_parser.cpp" /* yacc.c:1646  */
d3791 2
a3792 2
  case 105:
#line 793 "glsl_parser.yy" /* yacc.c:1646  */
d3794 1
a3794 1
#line 3779 "glsl_parser.cpp" /* yacc.c:1646  */
d3797 2
a3798 2
  case 106:
#line 794 "glsl_parser.yy" /* yacc.c:1646  */
d3800 1
a3800 1
#line 3785 "glsl_parser.cpp" /* yacc.c:1646  */
d3803 2
a3804 2
  case 107:
#line 795 "glsl_parser.yy" /* yacc.c:1646  */
d3806 1
a3806 1
#line 3791 "glsl_parser.cpp" /* yacc.c:1646  */
d3809 2
a3810 2
  case 108:
#line 800 "glsl_parser.yy" /* yacc.c:1646  */
d3814 1
a3814 1
#line 3799 "glsl_parser.cpp" /* yacc.c:1646  */
d3817 2
a3818 2
  case 109:
#line 804 "glsl_parser.yy" /* yacc.c:1646  */
d3831 1
a3831 1
#line 3816 "glsl_parser.cpp" /* yacc.c:1646  */
d3834 2
a3835 2
  case 111:
#line 824 "glsl_parser.yy" /* yacc.c:1646  */
d3840 1
a3840 1
#line 3825 "glsl_parser.cpp" /* yacc.c:1646  */
d3843 2
a3844 2
  case 112:
#line 829 "glsl_parser.yy" /* yacc.c:1646  */
d3848 1
a3848 1
#line 3833 "glsl_parser.cpp" /* yacc.c:1646  */
d3851 2
a3852 2
  case 113:
#line 833 "glsl_parser.yy" /* yacc.c:1646  */
d3857 1
a3857 1
#line 3842 "glsl_parser.cpp" /* yacc.c:1646  */
d3860 2
a3861 2
  case 114:
#line 838 "glsl_parser.yy" /* yacc.c:1646  */
d3865 1
a3865 1
#line 3850 "glsl_parser.cpp" /* yacc.c:1646  */
d3868 2
a3869 2
  case 118:
#line 854 "glsl_parser.yy" /* yacc.c:1646  */
d3874 1
a3874 1
#line 3859 "glsl_parser.cpp" /* yacc.c:1646  */
d3877 2
a3878 2
  case 119:
#line 859 "glsl_parser.yy" /* yacc.c:1646  */
d3883 1
a3883 1
#line 3868 "glsl_parser.cpp" /* yacc.c:1646  */
d3886 2
a3887 2
  case 120:
#line 867 "glsl_parser.yy" /* yacc.c:1646  */
d3898 1
a3898 1
#line 3883 "glsl_parser.cpp" /* yacc.c:1646  */
d3901 2
a3902 2
  case 121:
#line 881 "glsl_parser.yy" /* yacc.c:1646  */
d3912 1
a3912 1
#line 3897 "glsl_parser.cpp" /* yacc.c:1646  */
d3915 2
a3916 2
  case 122:
#line 891 "glsl_parser.yy" /* yacc.c:1646  */
d3927 1
a3927 1
#line 3912 "glsl_parser.cpp" /* yacc.c:1646  */
d3930 2
a3931 2
  case 123:
#line 905 "glsl_parser.yy" /* yacc.c:1646  */
d3936 1
a3936 1
#line 3921 "glsl_parser.cpp" /* yacc.c:1646  */
d3939 2
a3940 2
  case 124:
#line 910 "glsl_parser.yy" /* yacc.c:1646  */
d3950 1
a3950 1
#line 3935 "glsl_parser.cpp" /* yacc.c:1646  */
d3953 2
a3954 2
  case 125:
#line 923 "glsl_parser.yy" /* yacc.c:1646  */
d3958 1
a3958 1
#line 3943 "glsl_parser.cpp" /* yacc.c:1646  */
d3961 2
a3962 2
  case 126:
#line 927 "glsl_parser.yy" /* yacc.c:1646  */
d3970 13
a3982 1
#line 3955 "glsl_parser.cpp" /* yacc.c:1646  */
d3985 2
a3986 2
  case 127:
#line 935 "glsl_parser.yy" /* yacc.c:1646  */
d3992 2
a3993 2
         _mesa_glsl_error(&(yylsp[-1]), state, "const must be specified before "
                          "in/out/inout");
d3998 1
a3998 1
#line 3971 "glsl_parser.cpp" /* yacc.c:1646  */
d4001 2
a4002 2
  case 128:
#line 947 "glsl_parser.yy" /* yacc.c:1646  */
d4013 1
a4013 1
#line 3986 "glsl_parser.cpp" /* yacc.c:1646  */
d4016 2
a4017 2
  case 129:
#line 960 "glsl_parser.yy" /* yacc.c:1646  */
d4022 1
a4022 1
#line 3995 "glsl_parser.cpp" /* yacc.c:1646  */
d4025 2
a4026 2
  case 130:
#line 965 "glsl_parser.yy" /* yacc.c:1646  */
d4031 1
a4031 1
#line 4004 "glsl_parser.cpp" /* yacc.c:1646  */
d4034 2
a4035 2
  case 131:
#line 970 "glsl_parser.yy" /* yacc.c:1646  */
d4041 1
a4041 1
#line 4014 "glsl_parser.cpp" /* yacc.c:1646  */
d4044 2
a4045 2
  case 134:
#line 984 "glsl_parser.yy" /* yacc.c:1646  */
d4055 1
a4055 1
#line 4028 "glsl_parser.cpp" /* yacc.c:1646  */
d4058 2
a4059 2
  case 135:
#line 994 "glsl_parser.yy" /* yacc.c:1646  */
d4069 1
a4069 1
#line 4042 "glsl_parser.cpp" /* yacc.c:1646  */
d4072 2
a4073 2
  case 136:
#line 1004 "glsl_parser.yy" /* yacc.c:1646  */
d4083 1
a4083 1
#line 4056 "glsl_parser.cpp" /* yacc.c:1646  */
d4086 2
a4087 2
  case 137:
#line 1014 "glsl_parser.yy" /* yacc.c:1646  */
d4097 1
a4097 1
#line 4070 "glsl_parser.cpp" /* yacc.c:1646  */
d4100 2
a4101 2
  case 138:
#line 1028 "glsl_parser.yy" /* yacc.c:1646  */
d4108 1
a4108 1
#line 4081 "glsl_parser.cpp" /* yacc.c:1646  */
d4111 2
a4112 2
  case 139:
#line 1035 "glsl_parser.yy" /* yacc.c:1646  */
d4122 1
a4122 1
#line 4095 "glsl_parser.cpp" /* yacc.c:1646  */
d4125 2
a4126 2
  case 140:
#line 1045 "glsl_parser.yy" /* yacc.c:1646  */
d4136 1
a4136 1
#line 4109 "glsl_parser.cpp" /* yacc.c:1646  */
d4139 2
a4140 2
  case 141:
#line 1055 "glsl_parser.yy" /* yacc.c:1646  */
d4150 1
a4150 1
#line 4123 "glsl_parser.cpp" /* yacc.c:1646  */
d4153 2
a4154 2
  case 142:
#line 1065 "glsl_parser.yy" /* yacc.c:1646  */
d4164 1
a4164 1
#line 4137 "glsl_parser.cpp" /* yacc.c:1646  */
d4167 2
a4168 2
  case 143:
#line 1075 "glsl_parser.yy" /* yacc.c:1646  */
d4180 17
a4196 1
#line 4153 "glsl_parser.cpp" /* yacc.c:1646  */
d4199 2
a4200 2
  case 144:
#line 1090 "glsl_parser.yy" /* yacc.c:1646  */
d4207 1
a4207 1
#line 4164 "glsl_parser.cpp" /* yacc.c:1646  */
d4210 2
a4211 2
  case 145:
#line 1097 "glsl_parser.yy" /* yacc.c:1646  */
d4219 1
a4219 1
#line 4176 "glsl_parser.cpp" /* yacc.c:1646  */
d4222 2
a4223 2
  case 146:
#line 1108 "glsl_parser.yy" /* yacc.c:1646  */
d4227 1
a4227 1
#line 4184 "glsl_parser.cpp" /* yacc.c:1646  */
d4230 2
a4231 2
  case 148:
#line 1116 "glsl_parser.yy" /* yacc.c:1646  */
d4238 1
a4238 1
#line 4195 "glsl_parser.cpp" /* yacc.c:1646  */
d4241 2
a4242 2
  case 149:
#line 1125 "glsl_parser.yy" /* yacc.c:1646  */
d4244 1
a4244 1
#line 4201 "glsl_parser.cpp" /* yacc.c:1646  */
d4247 2
a4248 2
  case 150:
#line 1126 "glsl_parser.yy" /* yacc.c:1646  */
d4250 1
a4250 1
#line 4207 "glsl_parser.cpp" /* yacc.c:1646  */
d4253 2
a4254 2
  case 151:
#line 1131 "glsl_parser.yy" /* yacc.c:1646  */
d4439 1
a4439 1
#line 4396 "glsl_parser.cpp" /* yacc.c:1646  */
d4442 2
a4443 2
  case 152:
#line 1316 "glsl_parser.yy" /* yacc.c:1646  */
d4506 16
d4582 1
a4582 1
#line 4523 "glsl_parser.cpp" /* yacc.c:1646  */
d4585 2
a4586 2
  case 153:
#line 1439 "glsl_parser.yy" /* yacc.c:1646  */
d4600 1
a4600 1
#line 4541 "glsl_parser.cpp" /* yacc.c:1646  */
d4603 2
a4604 2
  case 154:
#line 1465 "glsl_parser.yy" /* yacc.c:1646  */
d4609 1
a4609 1
#line 4550 "glsl_parser.cpp" /* yacc.c:1646  */
d4612 2
a4613 2
  case 155:
#line 1470 "glsl_parser.yy" /* yacc.c:1646  */
d4618 1
a4618 1
#line 4559 "glsl_parser.cpp" /* yacc.c:1646  */
d4621 2
a4622 2
  case 156:
#line 1478 "glsl_parser.yy" /* yacc.c:1646  */
d4627 1
a4627 1
#line 4568 "glsl_parser.cpp" /* yacc.c:1646  */
d4630 2
a4631 2
  case 157:
#line 1483 "glsl_parser.yy" /* yacc.c:1646  */
d4636 1
a4636 1
#line 4577 "glsl_parser.cpp" /* yacc.c:1646  */
d4639 2
a4640 2
  case 158:
#line 1488 "glsl_parser.yy" /* yacc.c:1646  */
d4645 1
a4645 1
#line 4586 "glsl_parser.cpp" /* yacc.c:1646  */
d4648 2
a4649 2
  case 159:
#line 1497 "glsl_parser.yy" /* yacc.c:1646  */
d4654 10
a4663 1
#line 4595 "glsl_parser.cpp" /* yacc.c:1646  */
d4666 2
a4667 2
  case 164:
#line 1506 "glsl_parser.yy" /* yacc.c:1646  */
d4672 13
a4684 1
#line 4604 "glsl_parser.cpp" /* yacc.c:1646  */
d4687 2
a4688 2
  case 165:
#line 1524 "glsl_parser.yy" /* yacc.c:1646  */
d4693 1
a4693 1
      if ((yyvsp[0].type_qualifier).has_layout()) {
d4695 1
a4695 2
                          "\"invariant\" cannot be used with layout(...)");
      }
d4700 1
a4700 1
#line 4621 "glsl_parser.cpp" /* yacc.c:1646  */
d4703 2
a4704 2
  case 166:
#line 1537 "glsl_parser.yy" /* yacc.c:1646  */
d4719 2
a4720 6
      if ((yyvsp[0].type_qualifier).has_layout()) {
         _mesa_glsl_error(&(yylsp[-1]), state, "interpolation qualifiers cannot be used "
                          "with layout(...)");
      }

      if (!state->ARB_shading_language_420pack_enable && (yyvsp[0].type_qualifier).flags.q.invariant) {
d4722 1
a4722 1
                          "after \"invariant\"");
d4728 1
a4728 1
#line 4653 "glsl_parser.cpp" /* yacc.c:1646  */
d4731 2
a4732 2
  case 167:
#line 1565 "glsl_parser.yy" /* yacc.c:1646  */
d4734 8
a4741 5
      /* The GLSL 1.50 grammar indicates that a layout(...) declaration can be
       * used standalone or immediately before a storage qualifier.  It cannot
       * be used with interpolation qualifiers or invariant.  There does not
       * appear to be any text indicating that it must come before the storage
       * qualifier, but always seems to in examples.
a4745 9
      if ((yyvsp[0].type_qualifier).flags.q.invariant)
         _mesa_glsl_error(&(yylsp[-1]), state, "layout(...) cannot be used with "
                          "the \"invariant\" qualifier");

      if ((yyvsp[0].type_qualifier).has_interpolation()) {
         _mesa_glsl_error(&(yylsp[-1]), state, "layout(...) cannot be used with "
                          "interpolation qualifiers");
      }

d4749 1
a4749 1
#line 4680 "glsl_parser.cpp" /* yacc.c:1646  */
d4752 2
a4753 2
  case 168:
#line 1588 "glsl_parser.yy" /* yacc.c:1646  */
d4761 2
a4762 1
          ((yyvsp[0].type_qualifier).flags.q.invariant || (yyvsp[0].type_qualifier).has_interpolation() || (yyvsp[0].type_qualifier).has_layout())) {
d4769 1
a4769 1
#line 4699 "glsl_parser.cpp" /* yacc.c:1646  */
d4772 2
a4773 2
  case 169:
#line 1603 "glsl_parser.yy" /* yacc.c:1646  */
d4783 2
a4784 2
          ((yyvsp[0].type_qualifier).flags.q.invariant || (yyvsp[0].type_qualifier).has_interpolation() || (yyvsp[0].type_qualifier).has_layout() ||
           (yyvsp[0].type_qualifier).has_auxiliary_storage())) {
d4786 1
a4786 1
                          "invariant, interpolation, layout and auxiliary "
d4793 1
a4793 1
#line 4723 "glsl_parser.cpp" /* yacc.c:1646  */
d4796 2
a4797 2
  case 170:
#line 1623 "glsl_parser.yy" /* yacc.c:1646  */
d4808 1
a4808 1
#line 4738 "glsl_parser.cpp" /* yacc.c:1646  */
d4811 2
a4812 2
  case 171:
#line 1637 "glsl_parser.yy" /* yacc.c:1646  */
d4817 1
a4817 1
#line 4747 "glsl_parser.cpp" /* yacc.c:1646  */
d4820 2
a4821 2
  case 172:
#line 1642 "glsl_parser.yy" /* yacc.c:1646  */
d4826 1
a4826 1
#line 4756 "glsl_parser.cpp" /* yacc.c:1646  */
d4829 2
a4830 2
  case 173:
#line 1650 "glsl_parser.yy" /* yacc.c:1646  */
d4835 1
a4835 1
#line 4765 "glsl_parser.cpp" /* yacc.c:1646  */
d4838 2
a4839 2
  case 174:
#line 1655 "glsl_parser.yy" /* yacc.c:1646  */
d4844 1
a4844 1
#line 4774 "glsl_parser.cpp" /* yacc.c:1646  */
d4847 2
a4848 2
  case 175:
#line 1660 "glsl_parser.yy" /* yacc.c:1646  */
d4853 1
a4853 1
#line 4783 "glsl_parser.cpp" /* yacc.c:1646  */
d4856 2
a4857 2
  case 176:
#line 1665 "glsl_parser.yy" /* yacc.c:1646  */
d4862 1
a4862 1
#line 4792 "glsl_parser.cpp" /* yacc.c:1646  */
d4865 2
a4866 2
  case 177:
#line 1670 "glsl_parser.yy" /* yacc.c:1646  */
d4870 14
d4885 1
a4885 1
#line 4801 "glsl_parser.cpp" /* yacc.c:1646  */
d4888 2
a4889 2
  case 178:
#line 1675 "glsl_parser.yy" /* yacc.c:1646  */
d4894 1
a4894 1
#line 4810 "glsl_parser.cpp" /* yacc.c:1646  */
d4897 2
a4898 2
  case 179:
#line 1680 "glsl_parser.yy" /* yacc.c:1646  */
d4903 1
a4903 1
#line 4819 "glsl_parser.cpp" /* yacc.c:1646  */
d4906 2
a4907 2
  case 180:
#line 1685 "glsl_parser.yy" /* yacc.c:1646  */
d4912 1
a4912 1
#line 4828 "glsl_parser.cpp" /* yacc.c:1646  */
d4915 2
a4916 2
  case 181:
#line 1690 "glsl_parser.yy" /* yacc.c:1646  */
d4922 1
a4922 1
#line 4838 "glsl_parser.cpp" /* yacc.c:1646  */
d4925 2
a4926 2
  case 182:
#line 1696 "glsl_parser.yy" /* yacc.c:1646  */
d4931 1
a4931 1
#line 4847 "glsl_parser.cpp" /* yacc.c:1646  */
d4934 2
a4935 2
  case 183:
#line 1701 "glsl_parser.yy" /* yacc.c:1646  */
d4940 1
a4940 1
#line 4856 "glsl_parser.cpp" /* yacc.c:1646  */
d4943 2
a4944 2
  case 184:
#line 1709 "glsl_parser.yy" /* yacc.c:1646  */
d4950 1
a4950 1
#line 4866 "glsl_parser.cpp" /* yacc.c:1646  */
d4953 2
a4954 2
  case 185:
#line 1715 "glsl_parser.yy" /* yacc.c:1646  */
d4960 1
a4960 1
#line 4876 "glsl_parser.cpp" /* yacc.c:1646  */
d4963 2
a4964 2
  case 186:
#line 1721 "glsl_parser.yy" /* yacc.c:1646  */
d4978 1
a4978 1
#line 4894 "glsl_parser.cpp" /* yacc.c:1646  */
d4981 2
a4982 2
  case 187:
#line 1735 "glsl_parser.yy" /* yacc.c:1646  */
d4994 1
a4994 1
#line 4910 "glsl_parser.cpp" /* yacc.c:1646  */
d4997 2
a4998 2
  case 189:
#line 1751 "glsl_parser.yy" /* yacc.c:1646  */
d5003 1
a5003 1
#line 4919 "glsl_parser.cpp" /* yacc.c:1646  */
d5006 2
a5007 2
  case 190:
#line 1759 "glsl_parser.yy" /* yacc.c:1646  */
d5013 1
a5013 1
#line 4929 "glsl_parser.cpp" /* yacc.c:1646  */
d5016 2
a5017 2
  case 191:
#line 1765 "glsl_parser.yy" /* yacc.c:1646  */
d5023 1
a5023 1
#line 4939 "glsl_parser.cpp" /* yacc.c:1646  */
d5026 2
a5027 2
  case 192:
#line 1771 "glsl_parser.yy" /* yacc.c:1646  */
d5033 1
a5033 1
#line 4949 "glsl_parser.cpp" /* yacc.c:1646  */
d5036 2
a5037 2
  case 193:
#line 1779 "glsl_parser.yy" /* yacc.c:1646  */
d5039 1
a5039 1
#line 4955 "glsl_parser.cpp" /* yacc.c:1646  */
d5042 2
a5043 2
  case 194:
#line 1780 "glsl_parser.yy" /* yacc.c:1646  */
d5045 1
a5045 1
#line 4961 "glsl_parser.cpp" /* yacc.c:1646  */
d5048 2
a5049 2
  case 195:
#line 1781 "glsl_parser.yy" /* yacc.c:1646  */
d5051 1
a5051 1
#line 4967 "glsl_parser.cpp" /* yacc.c:1646  */
d5054 2
a5055 2
  case 196:
#line 1782 "glsl_parser.yy" /* yacc.c:1646  */
d5057 1
a5057 1
#line 4973 "glsl_parser.cpp" /* yacc.c:1646  */
d5060 2
a5061 2
  case 197:
#line 1783 "glsl_parser.yy" /* yacc.c:1646  */
d5063 1
a5063 1
#line 4979 "glsl_parser.cpp" /* yacc.c:1646  */
d5066 2
a5067 2
  case 198:
#line 1784 "glsl_parser.yy" /* yacc.c:1646  */
d5069 1
a5069 1
#line 4985 "glsl_parser.cpp" /* yacc.c:1646  */
d5072 2
a5073 2
  case 199:
#line 1785 "glsl_parser.yy" /* yacc.c:1646  */
d5075 1
a5075 1
#line 4991 "glsl_parser.cpp" /* yacc.c:1646  */
d5078 2
a5079 2
  case 200:
#line 1786 "glsl_parser.yy" /* yacc.c:1646  */
d5081 1
a5081 1
#line 4997 "glsl_parser.cpp" /* yacc.c:1646  */
d5084 2
a5085 2
  case 201:
#line 1787 "glsl_parser.yy" /* yacc.c:1646  */
d5087 1
a5087 1
#line 5003 "glsl_parser.cpp" /* yacc.c:1646  */
d5090 2
a5091 2
  case 202:
#line 1788 "glsl_parser.yy" /* yacc.c:1646  */
d5093 1
a5093 1
#line 5009 "glsl_parser.cpp" /* yacc.c:1646  */
d5096 2
a5097 2
  case 203:
#line 1789 "glsl_parser.yy" /* yacc.c:1646  */
d5099 1
a5099 1
#line 5015 "glsl_parser.cpp" /* yacc.c:1646  */
d5102 2
a5103 2
  case 204:
#line 1790 "glsl_parser.yy" /* yacc.c:1646  */
d5105 1
a5105 1
#line 5021 "glsl_parser.cpp" /* yacc.c:1646  */
d5108 2
a5109 2
  case 205:
#line 1791 "glsl_parser.yy" /* yacc.c:1646  */
d5111 1
a5111 1
#line 5027 "glsl_parser.cpp" /* yacc.c:1646  */
d5114 2
a5115 2
  case 206:
#line 1792 "glsl_parser.yy" /* yacc.c:1646  */
d5117 1
a5117 1
#line 5033 "glsl_parser.cpp" /* yacc.c:1646  */
d5120 2
a5121 2
  case 207:
#line 1793 "glsl_parser.yy" /* yacc.c:1646  */
d5123 1
a5123 1
#line 5039 "glsl_parser.cpp" /* yacc.c:1646  */
d5126 2
a5127 2
  case 208:
#line 1794 "glsl_parser.yy" /* yacc.c:1646  */
d5129 1
a5129 1
#line 5045 "glsl_parser.cpp" /* yacc.c:1646  */
d5132 2
a5133 2
  case 209:
#line 1795 "glsl_parser.yy" /* yacc.c:1646  */
d5135 1
a5135 1
#line 5051 "glsl_parser.cpp" /* yacc.c:1646  */
d5138 2
a5139 2
  case 210:
#line 1796 "glsl_parser.yy" /* yacc.c:1646  */
d5141 1
a5141 1
#line 5057 "glsl_parser.cpp" /* yacc.c:1646  */
d5144 2
a5145 2
  case 211:
#line 1797 "glsl_parser.yy" /* yacc.c:1646  */
d5147 1
a5147 1
#line 5063 "glsl_parser.cpp" /* yacc.c:1646  */
d5150 2
a5151 2
  case 212:
#line 1798 "glsl_parser.yy" /* yacc.c:1646  */
d5153 1
a5153 1
#line 5069 "glsl_parser.cpp" /* yacc.c:1646  */
d5156 2
a5157 2
  case 213:
#line 1799 "glsl_parser.yy" /* yacc.c:1646  */
d5159 1
a5159 1
#line 5075 "glsl_parser.cpp" /* yacc.c:1646  */
d5162 2
a5163 2
  case 214:
#line 1800 "glsl_parser.yy" /* yacc.c:1646  */
d5165 1
a5165 1
#line 5081 "glsl_parser.cpp" /* yacc.c:1646  */
d5168 2
a5169 2
  case 215:
#line 1801 "glsl_parser.yy" /* yacc.c:1646  */
d5171 1
a5171 1
#line 5087 "glsl_parser.cpp" /* yacc.c:1646  */
d5174 2
a5175 2
  case 216:
#line 1802 "glsl_parser.yy" /* yacc.c:1646  */
d5177 1
a5177 1
#line 5093 "glsl_parser.cpp" /* yacc.c:1646  */
d5180 2
a5181 2
  case 217:
#line 1803 "glsl_parser.yy" /* yacc.c:1646  */
d5183 1
a5183 1
#line 5099 "glsl_parser.cpp" /* yacc.c:1646  */
d5186 2
a5187 2
  case 218:
#line 1804 "glsl_parser.yy" /* yacc.c:1646  */
d5189 1
a5189 1
#line 5105 "glsl_parser.cpp" /* yacc.c:1646  */
d5192 2
a5193 2
  case 219:
#line 1805 "glsl_parser.yy" /* yacc.c:1646  */
d5195 1
a5195 1
#line 5111 "glsl_parser.cpp" /* yacc.c:1646  */
d5198 2
a5199 2
  case 220:
#line 1806 "glsl_parser.yy" /* yacc.c:1646  */
d5201 1
a5201 1
#line 5117 "glsl_parser.cpp" /* yacc.c:1646  */
d5204 2
a5205 2
  case 221:
#line 1807 "glsl_parser.yy" /* yacc.c:1646  */
d5207 1
a5207 1
#line 5123 "glsl_parser.cpp" /* yacc.c:1646  */
d5210 2
a5211 2
  case 222:
#line 1808 "glsl_parser.yy" /* yacc.c:1646  */
d5213 1
a5213 1
#line 5129 "glsl_parser.cpp" /* yacc.c:1646  */
d5216 2
a5217 2
  case 223:
#line 1809 "glsl_parser.yy" /* yacc.c:1646  */
d5219 1
a5219 1
#line 5135 "glsl_parser.cpp" /* yacc.c:1646  */
d5222 2
a5223 2
  case 224:
#line 1810 "glsl_parser.yy" /* yacc.c:1646  */
d5225 1
a5225 1
#line 5141 "glsl_parser.cpp" /* yacc.c:1646  */
d5228 2
a5229 2
  case 225:
#line 1811 "glsl_parser.yy" /* yacc.c:1646  */
d5231 1
a5231 1
#line 5147 "glsl_parser.cpp" /* yacc.c:1646  */
d5234 2
a5235 2
  case 226:
#line 1812 "glsl_parser.yy" /* yacc.c:1646  */
d5237 1
a5237 1
#line 5153 "glsl_parser.cpp" /* yacc.c:1646  */
d5240 2
a5241 2
  case 227:
#line 1813 "glsl_parser.yy" /* yacc.c:1646  */
d5243 1
a5243 1
#line 5159 "glsl_parser.cpp" /* yacc.c:1646  */
d5246 2
a5247 2
  case 228:
#line 1814 "glsl_parser.yy" /* yacc.c:1646  */
d5249 1
a5249 1
#line 5165 "glsl_parser.cpp" /* yacc.c:1646  */
d5252 2
a5253 2
  case 229:
#line 1815 "glsl_parser.yy" /* yacc.c:1646  */
d5255 1
a5255 1
#line 5171 "glsl_parser.cpp" /* yacc.c:1646  */
d5258 2
a5259 2
  case 230:
#line 1816 "glsl_parser.yy" /* yacc.c:1646  */
d5261 1
a5261 1
#line 5177 "glsl_parser.cpp" /* yacc.c:1646  */
d5264 2
a5265 2
  case 231:
#line 1817 "glsl_parser.yy" /* yacc.c:1646  */
d5267 1
a5267 1
#line 5183 "glsl_parser.cpp" /* yacc.c:1646  */
d5270 2
a5271 2
  case 232:
#line 1818 "glsl_parser.yy" /* yacc.c:1646  */
d5273 1
a5273 1
#line 5189 "glsl_parser.cpp" /* yacc.c:1646  */
d5276 2
a5277 2
  case 233:
#line 1819 "glsl_parser.yy" /* yacc.c:1646  */
d5279 1
a5279 1
#line 5195 "glsl_parser.cpp" /* yacc.c:1646  */
d5282 2
a5283 2
  case 234:
#line 1820 "glsl_parser.yy" /* yacc.c:1646  */
d5285 1
a5285 1
#line 5201 "glsl_parser.cpp" /* yacc.c:1646  */
d5288 2
a5289 2
  case 235:
#line 1821 "glsl_parser.yy" /* yacc.c:1646  */
d5291 1
a5291 1
#line 5207 "glsl_parser.cpp" /* yacc.c:1646  */
d5294 2
a5295 2
  case 236:
#line 1822 "glsl_parser.yy" /* yacc.c:1646  */
d5297 1
a5297 1
#line 5213 "glsl_parser.cpp" /* yacc.c:1646  */
d5300 2
a5301 2
  case 237:
#line 1823 "glsl_parser.yy" /* yacc.c:1646  */
d5303 1
a5303 1
#line 5219 "glsl_parser.cpp" /* yacc.c:1646  */
d5306 2
a5307 2
  case 238:
#line 1824 "glsl_parser.yy" /* yacc.c:1646  */
d5309 1
a5309 1
#line 5225 "glsl_parser.cpp" /* yacc.c:1646  */
d5312 2
a5313 2
  case 239:
#line 1825 "glsl_parser.yy" /* yacc.c:1646  */
d5315 1
a5315 1
#line 5231 "glsl_parser.cpp" /* yacc.c:1646  */
d5318 2
a5319 2
  case 240:
#line 1826 "glsl_parser.yy" /* yacc.c:1646  */
d5321 1
a5321 1
#line 5237 "glsl_parser.cpp" /* yacc.c:1646  */
d5324 2
a5325 2
  case 241:
#line 1827 "glsl_parser.yy" /* yacc.c:1646  */
d5327 1
a5327 1
#line 5243 "glsl_parser.cpp" /* yacc.c:1646  */
d5330 2
a5331 2
  case 242:
#line 1828 "glsl_parser.yy" /* yacc.c:1646  */
d5333 1
a5333 1
#line 5249 "glsl_parser.cpp" /* yacc.c:1646  */
d5336 2
a5337 2
  case 243:
#line 1829 "glsl_parser.yy" /* yacc.c:1646  */
d5339 1
a5339 1
#line 5255 "glsl_parser.cpp" /* yacc.c:1646  */
d5342 2
a5343 2
  case 244:
#line 1830 "glsl_parser.yy" /* yacc.c:1646  */
d5345 1
a5345 1
#line 5261 "glsl_parser.cpp" /* yacc.c:1646  */
d5348 2
a5349 2
  case 245:
#line 1831 "glsl_parser.yy" /* yacc.c:1646  */
d5351 1
a5351 1
#line 5267 "glsl_parser.cpp" /* yacc.c:1646  */
d5354 2
a5355 2
  case 246:
#line 1832 "glsl_parser.yy" /* yacc.c:1646  */
d5357 1
a5357 1
#line 5273 "glsl_parser.cpp" /* yacc.c:1646  */
d5360 2
a5361 2
  case 247:
#line 1833 "glsl_parser.yy" /* yacc.c:1646  */
d5363 1
a5363 1
#line 5279 "glsl_parser.cpp" /* yacc.c:1646  */
d5366 2
a5367 2
  case 248:
#line 1834 "glsl_parser.yy" /* yacc.c:1646  */
d5369 1
a5369 1
#line 5285 "glsl_parser.cpp" /* yacc.c:1646  */
d5372 2
a5373 2
  case 249:
#line 1835 "glsl_parser.yy" /* yacc.c:1646  */
d5375 1
a5375 1
#line 5291 "glsl_parser.cpp" /* yacc.c:1646  */
d5378 2
a5379 2
  case 250:
#line 1836 "glsl_parser.yy" /* yacc.c:1646  */
d5381 1
a5381 1
#line 5297 "glsl_parser.cpp" /* yacc.c:1646  */
d5384 2
a5385 2
  case 251:
#line 1837 "glsl_parser.yy" /* yacc.c:1646  */
d5387 1
a5387 1
#line 5303 "glsl_parser.cpp" /* yacc.c:1646  */
d5390 2
a5391 2
  case 252:
#line 1838 "glsl_parser.yy" /* yacc.c:1646  */
d5393 1
a5393 1
#line 5309 "glsl_parser.cpp" /* yacc.c:1646  */
d5396 2
a5397 2
  case 253:
#line 1839 "glsl_parser.yy" /* yacc.c:1646  */
d5399 1
a5399 1
#line 5315 "glsl_parser.cpp" /* yacc.c:1646  */
d5402 2
a5403 2
  case 254:
#line 1840 "glsl_parser.yy" /* yacc.c:1646  */
d5405 1
a5405 1
#line 5321 "glsl_parser.cpp" /* yacc.c:1646  */
d5408 2
a5409 2
  case 255:
#line 1841 "glsl_parser.yy" /* yacc.c:1646  */
d5411 1
a5411 1
#line 5327 "glsl_parser.cpp" /* yacc.c:1646  */
d5414 2
a5415 2
  case 256:
#line 1842 "glsl_parser.yy" /* yacc.c:1646  */
d5417 1
a5417 1
#line 5333 "glsl_parser.cpp" /* yacc.c:1646  */
d5420 2
a5421 2
  case 257:
#line 1843 "glsl_parser.yy" /* yacc.c:1646  */
d5423 1
a5423 1
#line 5339 "glsl_parser.cpp" /* yacc.c:1646  */
d5426 2
a5427 2
  case 258:
#line 1844 "glsl_parser.yy" /* yacc.c:1646  */
d5429 1
a5429 1
#line 5345 "glsl_parser.cpp" /* yacc.c:1646  */
d5432 2
a5433 2
  case 259:
#line 1845 "glsl_parser.yy" /* yacc.c:1646  */
d5435 1
a5435 1
#line 5351 "glsl_parser.cpp" /* yacc.c:1646  */
d5438 2
a5439 2
  case 260:
#line 1846 "glsl_parser.yy" /* yacc.c:1646  */
d5441 1
a5441 1
#line 5357 "glsl_parser.cpp" /* yacc.c:1646  */
d5444 2
a5445 2
  case 261:
#line 1847 "glsl_parser.yy" /* yacc.c:1646  */
d5447 1
a5447 1
#line 5363 "glsl_parser.cpp" /* yacc.c:1646  */
d5450 2
a5451 2
  case 262:
#line 1848 "glsl_parser.yy" /* yacc.c:1646  */
d5453 1
a5453 1
#line 5369 "glsl_parser.cpp" /* yacc.c:1646  */
d5456 2
a5457 2
  case 263:
#line 1849 "glsl_parser.yy" /* yacc.c:1646  */
d5459 1
a5459 1
#line 5375 "glsl_parser.cpp" /* yacc.c:1646  */
d5462 2
a5463 2
  case 264:
#line 1850 "glsl_parser.yy" /* yacc.c:1646  */
d5465 1
a5465 1
#line 5381 "glsl_parser.cpp" /* yacc.c:1646  */
d5468 2
a5469 2
  case 265:
#line 1851 "glsl_parser.yy" /* yacc.c:1646  */
d5471 1
a5471 1
#line 5387 "glsl_parser.cpp" /* yacc.c:1646  */
d5474 2
a5475 2
  case 266:
#line 1852 "glsl_parser.yy" /* yacc.c:1646  */
d5477 1
a5477 1
#line 5393 "glsl_parser.cpp" /* yacc.c:1646  */
d5480 2
a5481 2
  case 267:
#line 1853 "glsl_parser.yy" /* yacc.c:1646  */
d5483 1
a5483 1
#line 5399 "glsl_parser.cpp" /* yacc.c:1646  */
d5486 2
a5487 2
  case 268:
#line 1854 "glsl_parser.yy" /* yacc.c:1646  */
d5489 1
a5489 1
#line 5405 "glsl_parser.cpp" /* yacc.c:1646  */
d5492 2
a5493 2
  case 269:
#line 1855 "glsl_parser.yy" /* yacc.c:1646  */
d5495 1
a5495 1
#line 5411 "glsl_parser.cpp" /* yacc.c:1646  */
d5498 2
a5499 2
  case 270:
#line 1856 "glsl_parser.yy" /* yacc.c:1646  */
d5501 1
a5501 1
#line 5417 "glsl_parser.cpp" /* yacc.c:1646  */
d5504 2
a5505 2
  case 271:
#line 1857 "glsl_parser.yy" /* yacc.c:1646  */
d5507 1
a5507 1
#line 5423 "glsl_parser.cpp" /* yacc.c:1646  */
d5510 2
a5511 2
  case 272:
#line 1858 "glsl_parser.yy" /* yacc.c:1646  */
d5513 1
a5513 1
#line 5429 "glsl_parser.cpp" /* yacc.c:1646  */
d5516 2
a5517 2
  case 273:
#line 1859 "glsl_parser.yy" /* yacc.c:1646  */
d5519 1
a5519 1
#line 5435 "glsl_parser.cpp" /* yacc.c:1646  */
d5522 2
a5523 2
  case 274:
#line 1860 "glsl_parser.yy" /* yacc.c:1646  */
d5525 1
a5525 1
#line 5441 "glsl_parser.cpp" /* yacc.c:1646  */
d5528 2
a5529 2
  case 275:
#line 1861 "glsl_parser.yy" /* yacc.c:1646  */
d5531 1
a5531 1
#line 5447 "glsl_parser.cpp" /* yacc.c:1646  */
d5534 2
a5535 2
  case 276:
#line 1862 "glsl_parser.yy" /* yacc.c:1646  */
d5537 1
a5537 1
#line 5453 "glsl_parser.cpp" /* yacc.c:1646  */
d5540 2
a5541 2
  case 277:
#line 1863 "glsl_parser.yy" /* yacc.c:1646  */
d5543 1
a5543 1
#line 5459 "glsl_parser.cpp" /* yacc.c:1646  */
d5546 2
a5547 2
  case 278:
#line 1864 "glsl_parser.yy" /* yacc.c:1646  */
d5549 1
a5549 1
#line 5465 "glsl_parser.cpp" /* yacc.c:1646  */
d5552 2
a5553 2
  case 279:
#line 1865 "glsl_parser.yy" /* yacc.c:1646  */
d5555 1
a5555 1
#line 5471 "glsl_parser.cpp" /* yacc.c:1646  */
d5558 2
a5559 2
  case 280:
#line 1866 "glsl_parser.yy" /* yacc.c:1646  */
d5561 1
a5561 1
#line 5477 "glsl_parser.cpp" /* yacc.c:1646  */
d5564 2
a5565 2
  case 281:
#line 1867 "glsl_parser.yy" /* yacc.c:1646  */
d5567 1
a5567 1
#line 5483 "glsl_parser.cpp" /* yacc.c:1646  */
d5570 2
a5571 2
  case 282:
#line 1868 "glsl_parser.yy" /* yacc.c:1646  */
d5573 1
a5573 1
#line 5489 "glsl_parser.cpp" /* yacc.c:1646  */
d5576 2
a5577 2
  case 283:
#line 1869 "glsl_parser.yy" /* yacc.c:1646  */
d5579 1
a5579 1
#line 5495 "glsl_parser.cpp" /* yacc.c:1646  */
d5582 2
a5583 2
  case 284:
#line 1870 "glsl_parser.yy" /* yacc.c:1646  */
d5585 1
a5585 1
#line 5501 "glsl_parser.cpp" /* yacc.c:1646  */
d5588 2
a5589 2
  case 285:
#line 1871 "glsl_parser.yy" /* yacc.c:1646  */
d5591 1
a5591 1
#line 5507 "glsl_parser.cpp" /* yacc.c:1646  */
d5594 2
a5595 2
  case 286:
#line 1872 "glsl_parser.yy" /* yacc.c:1646  */
d5597 1
a5597 1
#line 5513 "glsl_parser.cpp" /* yacc.c:1646  */
d5600 2
a5601 2
  case 287:
#line 1873 "glsl_parser.yy" /* yacc.c:1646  */
d5603 1
a5603 1
#line 5519 "glsl_parser.cpp" /* yacc.c:1646  */
d5606 2
a5607 2
  case 288:
#line 1874 "glsl_parser.yy" /* yacc.c:1646  */
d5609 1
a5609 1
#line 5525 "glsl_parser.cpp" /* yacc.c:1646  */
d5612 2
a5613 2
  case 289:
#line 1875 "glsl_parser.yy" /* yacc.c:1646  */
d5615 1
a5615 1
#line 5531 "glsl_parser.cpp" /* yacc.c:1646  */
d5618 2
a5619 2
  case 290:
#line 1876 "glsl_parser.yy" /* yacc.c:1646  */
d5621 1
a5621 1
#line 5537 "glsl_parser.cpp" /* yacc.c:1646  */
d5624 2
a5625 2
  case 291:
#line 1877 "glsl_parser.yy" /* yacc.c:1646  */
d5627 1
a5627 1
#line 5543 "glsl_parser.cpp" /* yacc.c:1646  */
d5630 2
a5631 2
  case 292:
#line 1878 "glsl_parser.yy" /* yacc.c:1646  */
d5633 1
a5633 1
#line 5549 "glsl_parser.cpp" /* yacc.c:1646  */
d5636 2
a5637 2
  case 293:
#line 1879 "glsl_parser.yy" /* yacc.c:1646  */
d5639 1
a5639 1
#line 5555 "glsl_parser.cpp" /* yacc.c:1646  */
d5642 2
a5643 2
  case 294:
#line 1884 "glsl_parser.yy" /* yacc.c:1646  */
d5648 1
a5648 1
#line 5564 "glsl_parser.cpp" /* yacc.c:1646  */
d5651 2
a5652 2
  case 295:
#line 1889 "glsl_parser.yy" /* yacc.c:1646  */
d5657 1
a5657 1
#line 5573 "glsl_parser.cpp" /* yacc.c:1646  */
d5660 2
a5661 2
  case 296:
#line 1894 "glsl_parser.yy" /* yacc.c:1646  */
d5666 1
a5666 1
#line 5582 "glsl_parser.cpp" /* yacc.c:1646  */
d5669 2
a5670 2
  case 297:
#line 1902 "glsl_parser.yy" /* yacc.c:1646  */
d5677 1
a5677 1
#line 5593 "glsl_parser.cpp" /* yacc.c:1646  */
d5680 2
a5681 2
  case 298:
#line 1909 "glsl_parser.yy" /* yacc.c:1646  */
d5687 1
a5687 1
#line 5603 "glsl_parser.cpp" /* yacc.c:1646  */
d5690 2
a5691 2
  case 299:
#line 1918 "glsl_parser.yy" /* yacc.c:1646  */
d5696 1
a5696 1
#line 5612 "glsl_parser.cpp" /* yacc.c:1646  */
d5699 2
a5700 2
  case 300:
#line 1923 "glsl_parser.yy" /* yacc.c:1646  */
d5705 1
a5705 1
#line 5621 "glsl_parser.cpp" /* yacc.c:1646  */
d5708 2
a5709 2
  case 301:
#line 1931 "glsl_parser.yy" /* yacc.c:1646  */
d5725 1
a5725 1
#line 5641 "glsl_parser.cpp" /* yacc.c:1646  */
d5728 2
a5729 2
  case 302:
#line 1950 "glsl_parser.yy" /* yacc.c:1646  */
d5734 1
a5734 1
#line 5650 "glsl_parser.cpp" /* yacc.c:1646  */
d5737 2
a5738 2
  case 303:
#line 1955 "glsl_parser.yy" /* yacc.c:1646  */
d5743 1
a5743 1
#line 5659 "glsl_parser.cpp" /* yacc.c:1646  */
d5746 2
a5747 2
  case 304:
#line 1963 "glsl_parser.yy" /* yacc.c:1646  */
d5753 1
a5753 1
#line 5669 "glsl_parser.cpp" /* yacc.c:1646  */
d5756 2
a5757 2
  case 305:
#line 1969 "glsl_parser.yy" /* yacc.c:1646  */
d5763 1
a5763 1
#line 5679 "glsl_parser.cpp" /* yacc.c:1646  */
d5766 2
a5767 2
  case 307:
#line 1979 "glsl_parser.yy" /* yacc.c:1646  */
d5771 1
a5771 1
#line 5687 "glsl_parser.cpp" /* yacc.c:1646  */
d5774 2
a5775 2
  case 308:
#line 1983 "glsl_parser.yy" /* yacc.c:1646  */
d5779 1
a5779 1
#line 5695 "glsl_parser.cpp" /* yacc.c:1646  */
d5782 2
a5783 2
  case 309:
#line 1990 "glsl_parser.yy" /* yacc.c:1646  */
d5790 1
a5790 1
#line 5706 "glsl_parser.cpp" /* yacc.c:1646  */
d5793 2
a5794 2
  case 310:
#line 1997 "glsl_parser.yy" /* yacc.c:1646  */
d5798 1
a5798 1
#line 5714 "glsl_parser.cpp" /* yacc.c:1646  */
d5801 2
a5802 2
  case 312:
#line 2009 "glsl_parser.yy" /* yacc.c:1646  */
d5804 1
a5804 1
#line 5720 "glsl_parser.cpp" /* yacc.c:1646  */
d5807 2
a5808 2
  case 320:
#line 2024 "glsl_parser.yy" /* yacc.c:1646  */
d5814 1
a5814 1
#line 5730 "glsl_parser.cpp" /* yacc.c:1646  */
d5817 2
a5818 2
  case 321:
#line 2030 "glsl_parser.yy" /* yacc.c:1646  */
d5822 1
a5822 1
#line 5738 "glsl_parser.cpp" /* yacc.c:1646  */
d5825 2
a5826 2
  case 322:
#line 2034 "glsl_parser.yy" /* yacc.c:1646  */
d5833 1
a5833 1
#line 5749 "glsl_parser.cpp" /* yacc.c:1646  */
d5836 2
a5837 2
  case 323:
#line 2043 "glsl_parser.yy" /* yacc.c:1646  */
d5839 1
a5839 1
#line 5755 "glsl_parser.cpp" /* yacc.c:1646  */
d5842 2
a5843 2
  case 325:
#line 2049 "glsl_parser.yy" /* yacc.c:1646  */
d5849 1
a5849 1
#line 5765 "glsl_parser.cpp" /* yacc.c:1646  */
d5852 2
a5853 2
  case 326:
#line 2055 "glsl_parser.yy" /* yacc.c:1646  */
d5859 1
a5859 1
#line 5775 "glsl_parser.cpp" /* yacc.c:1646  */
d5862 2
a5863 2
  case 327:
#line 2064 "glsl_parser.yy" /* yacc.c:1646  */
d5873 1
a5873 1
#line 5789 "glsl_parser.cpp" /* yacc.c:1646  */
d5876 2
a5877 2
  case 328:
#line 2074 "glsl_parser.yy" /* yacc.c:1646  */
d5886 1
a5886 1
#line 5802 "glsl_parser.cpp" /* yacc.c:1646  */
d5889 2
a5890 2
  case 329:
#line 2086 "glsl_parser.yy" /* yacc.c:1646  */
d5896 1
a5896 1
#line 5812 "glsl_parser.cpp" /* yacc.c:1646  */
d5899 2
a5900 2
  case 330:
#line 2092 "glsl_parser.yy" /* yacc.c:1646  */
d5906 1
a5906 1
#line 5822 "glsl_parser.cpp" /* yacc.c:1646  */
d5909 2
a5910 2
  case 331:
#line 2101 "glsl_parser.yy" /* yacc.c:1646  */
d5916 1
a5916 1
#line 5832 "glsl_parser.cpp" /* yacc.c:1646  */
d5919 2
a5920 2
  case 332:
#line 2110 "glsl_parser.yy" /* yacc.c:1646  */
d5925 1
a5925 1
#line 5841 "glsl_parser.cpp" /* yacc.c:1646  */
d5928 2
a5929 2
  case 333:
#line 2115 "glsl_parser.yy" /* yacc.c:1646  */
d5934 1
a5934 1
#line 5850 "glsl_parser.cpp" /* yacc.c:1646  */
d5937 2
a5938 2
  case 334:
#line 2123 "glsl_parser.yy" /* yacc.c:1646  */
d5942 1
a5942 1
#line 5858 "glsl_parser.cpp" /* yacc.c:1646  */
d5945 2
a5946 2
  case 335:
#line 2127 "glsl_parser.yy" /* yacc.c:1646  */
d5957 1
a5957 1
#line 5873 "glsl_parser.cpp" /* yacc.c:1646  */
d5960 2
a5961 2
  case 336:
#line 2145 "glsl_parser.yy" /* yacc.c:1646  */
d5966 1
a5966 1
#line 5882 "glsl_parser.cpp" /* yacc.c:1646  */
d5969 2
a5970 2
  case 337:
#line 2153 "glsl_parser.yy" /* yacc.c:1646  */
d5975 1
a5975 1
#line 5891 "glsl_parser.cpp" /* yacc.c:1646  */
d5978 2
a5979 2
  case 338:
#line 2158 "glsl_parser.yy" /* yacc.c:1646  */
d5984 1
a5984 1
#line 5900 "glsl_parser.cpp" /* yacc.c:1646  */
d5987 2
a5988 2
  case 339:
#line 2166 "glsl_parser.yy" /* yacc.c:1646  */
d5993 1
a5993 1
#line 5909 "glsl_parser.cpp" /* yacc.c:1646  */
d5996 2
a5997 2
  case 340:
#line 2171 "glsl_parser.yy" /* yacc.c:1646  */
d6002 1
a6002 1
#line 5918 "glsl_parser.cpp" /* yacc.c:1646  */
d6005 2
a6006 2
  case 341:
#line 2179 "glsl_parser.yy" /* yacc.c:1646  */
d6014 1
a6014 1
#line 5930 "glsl_parser.cpp" /* yacc.c:1646  */
d6017 2
a6018 2
  case 342:
#line 2187 "glsl_parser.yy" /* yacc.c:1646  */
d6023 1
a6023 1
#line 5939 "glsl_parser.cpp" /* yacc.c:1646  */
d6026 2
a6027 2
  case 343:
#line 2195 "glsl_parser.yy" /* yacc.c:1646  */
d6035 1
a6035 1
#line 5951 "glsl_parser.cpp" /* yacc.c:1646  */
d6038 2
a6039 2
  case 344:
#line 2203 "glsl_parser.yy" /* yacc.c:1646  */
d6044 1
a6044 1
#line 5960 "glsl_parser.cpp" /* yacc.c:1646  */
d6047 2
a6048 2
  case 345:
#line 2211 "glsl_parser.yy" /* yacc.c:1646  */
d6056 1
a6056 1
#line 5972 "glsl_parser.cpp" /* yacc.c:1646  */
d6059 2
a6060 2
  case 346:
#line 2219 "glsl_parser.yy" /* yacc.c:1646  */
d6065 1
a6065 1
#line 5981 "glsl_parser.cpp" /* yacc.c:1646  */
d6068 2
a6069 2
  case 347:
#line 2227 "glsl_parser.yy" /* yacc.c:1646  */
d6076 1
a6076 1
#line 5992 "glsl_parser.cpp" /* yacc.c:1646  */
d6079 2
a6080 2
  case 348:
#line 2234 "glsl_parser.yy" /* yacc.c:1646  */
d6087 1
a6087 1
#line 6003 "glsl_parser.cpp" /* yacc.c:1646  */
d6090 2
a6091 2
  case 349:
#line 2241 "glsl_parser.yy" /* yacc.c:1646  */
d6098 1
a6098 1
#line 6014 "glsl_parser.cpp" /* yacc.c:1646  */
d6101 2
a6102 2
  case 353:
#line 2257 "glsl_parser.yy" /* yacc.c:1646  */
d6106 1
a6106 1
#line 6022 "glsl_parser.cpp" /* yacc.c:1646  */
d6109 2
a6110 2
  case 354:
#line 2264 "glsl_parser.yy" /* yacc.c:1646  */
d6115 1
a6115 1
#line 6031 "glsl_parser.cpp" /* yacc.c:1646  */
d6118 2
a6119 2
  case 355:
#line 2269 "glsl_parser.yy" /* yacc.c:1646  */
d6124 1
a6124 1
#line 6040 "glsl_parser.cpp" /* yacc.c:1646  */
d6127 2
a6128 2
  case 356:
#line 2278 "glsl_parser.yy" /* yacc.c:1646  */
d6134 1
a6134 1
#line 6050 "glsl_parser.cpp" /* yacc.c:1646  */
d6137 2
a6138 2
  case 357:
#line 2284 "glsl_parser.yy" /* yacc.c:1646  */
d6144 1
a6144 1
#line 6060 "glsl_parser.cpp" /* yacc.c:1646  */
d6147 2
a6148 2
  case 358:
#line 2290 "glsl_parser.yy" /* yacc.c:1646  */
d6154 1
a6154 1
#line 6070 "glsl_parser.cpp" /* yacc.c:1646  */
d6157 2
a6158 2
  case 359:
#line 2296 "glsl_parser.yy" /* yacc.c:1646  */
d6164 1
a6164 1
#line 6080 "glsl_parser.cpp" /* yacc.c:1646  */
d6167 2
a6168 2
  case 360:
#line 2302 "glsl_parser.yy" /* yacc.c:1646  */
d6174 1
a6174 1
#line 6090 "glsl_parser.cpp" /* yacc.c:1646  */
d6177 2
a6178 2
  case 361:
#line 2310 "glsl_parser.yy" /* yacc.c:1646  */
d6180 1
a6180 1
#line 6096 "glsl_parser.cpp" /* yacc.c:1646  */
d6183 2
a6184 2
  case 362:
#line 2311 "glsl_parser.yy" /* yacc.c:1646  */
d6186 1
a6186 1
#line 6102 "glsl_parser.cpp" /* yacc.c:1646  */
d6189 2
a6190 2
  case 363:
#line 2312 "glsl_parser.yy" /* yacc.c:1646  */
d6192 1
a6192 1
#line 6108 "glsl_parser.cpp" /* yacc.c:1646  */
d6195 2
a6196 2
  case 364:
#line 2313 "glsl_parser.yy" /* yacc.c:1646  */
d6198 1
a6198 1
#line 6114 "glsl_parser.cpp" /* yacc.c:1646  */
d6201 2
a6202 2
  case 365:
#line 2318 "glsl_parser.yy" /* yacc.c:1646  */
d6212 1
a6212 1
#line 6128 "glsl_parser.cpp" /* yacc.c:1646  */
d6215 2
a6216 2
  case 366:
#line 2332 "glsl_parser.yy" /* yacc.c:1646  */
d6220 1
a6220 1
#line 6136 "glsl_parser.cpp" /* yacc.c:1646  */
d6223 2
a6224 2
  case 367:
#line 2336 "glsl_parser.yy" /* yacc.c:1646  */
d6230 12
d6244 1
a6244 1
#line 6148 "glsl_parser.cpp" /* yacc.c:1646  */
d6247 2
a6248 2
  case 368:
#line 2347 "glsl_parser.yy" /* yacc.c:1646  */
d6316 8
d6350 1
a6350 1
#line 6246 "glsl_parser.cpp" /* yacc.c:1646  */
d6353 2
a6354 2
  case 369:
#line 2444 "glsl_parser.yy" /* yacc.c:1646  */
d6359 1
a6359 1
#line 6255 "glsl_parser.cpp" /* yacc.c:1646  */
d6362 2
a6363 2
  case 370:
#line 2449 "glsl_parser.yy" /* yacc.c:1646  */
d6368 1
a6368 1
#line 6264 "glsl_parser.cpp" /* yacc.c:1646  */
d6371 2
a6372 2
  case 371:
#line 2454 "glsl_parser.yy" /* yacc.c:1646  */
d6377 1
a6377 1
#line 6273 "glsl_parser.cpp" /* yacc.c:1646  */
d6380 2
a6381 2
  case 372:
#line 2462 "glsl_parser.yy" /* yacc.c:1646  */
d6386 1
a6386 1
#line 6282 "glsl_parser.cpp" /* yacc.c:1646  */
d6389 2
a6390 2
  case 373:
#line 2467 "glsl_parser.yy" /* yacc.c:1646  */
d6396 1
a6396 1
#line 6292 "glsl_parser.cpp" /* yacc.c:1646  */
d6399 2
a6400 2
  case 374:
#line 2473 "glsl_parser.yy" /* yacc.c:1646  */
d6406 1
a6406 1
#line 6302 "glsl_parser.cpp" /* yacc.c:1646  */
d6409 2
a6410 2
  case 375:
#line 2482 "glsl_parser.yy" /* yacc.c:1646  */
d6415 1
a6415 1
#line 6311 "glsl_parser.cpp" /* yacc.c:1646  */
d6418 2
a6419 2
  case 376:
#line 2487 "glsl_parser.yy" /* yacc.c:1646  */
d6424 1
a6424 1
#line 6320 "glsl_parser.cpp" /* yacc.c:1646  */
d6427 2
a6428 2
  case 377:
#line 2495 "glsl_parser.yy" /* yacc.c:1646  */
d6449 1
a6449 1
#line 6345 "glsl_parser.cpp" /* yacc.c:1646  */
d6452 2
a6453 2
  case 378:
#line 2519 "glsl_parser.yy" /* yacc.c:1646  */
d6460 1
a6460 1
#line 6356 "glsl_parser.cpp" /* yacc.c:1646  */
d6463 2
a6464 2
  case 379:
#line 2527 "glsl_parser.yy" /* yacc.c:1646  */
d6471 1
a6471 1
#line 6367 "glsl_parser.cpp" /* yacc.c:1646  */
d6474 2
a6475 2
  case 380:
#line 2535 "glsl_parser.yy" /* yacc.c:1646  */
d6497 3
d6503 1
a6503 1
#line 6396 "glsl_parser.cpp" /* yacc.c:1646  */
d6507 1
a6507 1
#line 6400 "glsl_parser.cpp" /* yacc.c:1646  */
@


