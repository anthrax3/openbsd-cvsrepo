head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.43;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.56;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.19;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.57;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.11.24.06.19.52;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2013.09.05.14.02.21;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.10;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.14.03;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.11.24.05.58.05;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.25;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.10.04;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.47.11;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2011 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Benjamin Franzke <benjaminfranzke@@googlemail.com>
 */

#ifndef _GBM_DRI_INTERNAL_H_
#define _GBM_DRI_INTERNAL_H_

#include "gbmint.h"

#include "common_drm.h"

#include <GL/gl.h> /* dri_interface needs GL types */
#include "GL/internal/dri_interface.h"

struct gbm_dri_surface;

struct gbm_dri_device {
   struct gbm_drm_device base;

   void *driver;

   __DRIscreen *screen;

   const __DRIcoreExtension   *core;
   const __DRIdri2Extension   *dri2;
   const __DRIimageExtension  *image;
   const __DRI2flushExtension *flush;
   const __DRIdri2LoaderExtension *loader;

   const __DRIconfig   **driver_configs;
   const __DRIextension **extensions;
   const __DRIextension **driver_extensions;

   __DRIimage *(*lookup_image)(__DRIscreen *screen, void *image, void *data);
   void *lookup_user_data;

   __DRIbuffer *(*get_buffers)(__DRIdrawable * driDrawable,
                               int *width, int *height,
                               unsigned int *attachments, int count,
                               int *out_count, void *data);
   void (*flush_front_buffer)(__DRIdrawable * driDrawable, void *data);
   __DRIbuffer *(*get_buffers_with_format)(__DRIdrawable * driDrawable,
			     int *width, int *height,
			     unsigned int *attachments, int count,
			     int *out_count, void *data);
   int (*image_get_buffers)(__DRIdrawable *driDrawable,
                            unsigned int format,
                            uint32_t *stamp,
                            void *loaderPrivate,
                            uint32_t buffer_mask,
                            struct __DRIimageList *buffers);

   struct wl_drm *wl_drm;
};

struct gbm_dri_bo {
   struct gbm_drm_bo base;

   __DRIimage *image;

   /* Only used for cursors */
   uint32_t handle, size;
   void *map;
};

struct gbm_dri_surface {
   struct gbm_surface base;

   void *dri_private;
};

static inline struct gbm_dri_device *
gbm_dri_device(struct gbm_device *gbm)
{
   return (struct gbm_dri_device *) gbm;
}

static inline struct gbm_dri_bo *
gbm_dri_bo(struct gbm_bo *bo)
{
   return (struct gbm_dri_bo *) bo;
}

static inline struct gbm_dri_surface *
gbm_dri_surface(struct gbm_surface *surface)
{
   return (struct gbm_dri_surface *) surface;
}

#endif
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a30 1
#include <sys/mman.h>
a38 1
struct gbm_dri_bo;
a49 1
   const __DRIswrastExtension *swrast;
a74 16
   void (*swrast_put_image2)(__DRIdrawable *driDrawable,
                             int            op,
                             int            x,
                             int            y,
                             int            width,
                             int            height,
                             int            stride,
                             char          *data,
                             void          *loaderPrivate);
   void (*swrast_get_image)(__DRIdrawable *driDrawable,
                            int            x,
                            int            y,
                            int            width,
                            int            height,
                            char          *data,
                            void          *loaderPrivate);
d84 1
a84 1
   /* Used for cursors and the swrast front BO */
a110 36
}

static inline void *
gbm_dri_bo_map(struct gbm_dri_bo *bo)
{
   struct drm_mode_map_dumb map_arg;
   int ret;

   if (bo->image != NULL)
      return NULL;

   if (bo->map != NULL)
      return bo->map;

   memset(&map_arg, 0, sizeof(map_arg));
   map_arg.handle = bo->handle;

   ret = drmIoctl(bo->base.base.gbm->fd, DRM_IOCTL_MODE_MAP_DUMB, &map_arg);
   if (ret)
      return NULL;

   bo->map = mmap(0, bo->size, PROT_WRITE,
                  MAP_SHARED, bo->base.base.gbm->fd, map_arg.offset);
   if (bo->map == MAP_FAILED) {
      bo->map = NULL;
      return NULL;
   }

   return bo->map;
}

static inline void
gbm_dri_bo_unmap(struct gbm_dri_bo *bo)
{
   munmap(bo->map, bo->size);
   bo->map = NULL;
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d31 1
d40 1
d52 1
d78 16
d103 1
a103 1
   /* Only used for cursors */
d130 36
@


1.3
log
@Merge Mesa 9.2.3
ok mpi@@ kettenis@@
@
text
@a32 1
#include "common.h"
d47 5
a51 5
   __DRIcoreExtension   *core;
   __DRIdri2Extension   *dri2;
   __DRIimageExtension  *image;
   __DRI2flushExtension *flush;
   __DRIdri2LoaderExtension *loader;
d54 2
a55 1
   const __DRIextension *extensions[4];
d69 6
a111 3

char *
dri_fd_get_driver_name(int fd);
@


1.2
log
@Merge Mesa 9.2.0
@
text
@d69 2
@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d39 2
d51 2
d55 1
a55 1
   const __DRIextension *extensions[3];
d59 10
d75 10
d97 6
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@a38 2
struct gbm_dri_surface;

a48 2
   __DRI2flushExtension *flush;
   __DRIdri2LoaderExtension *loader;
d51 1
a51 1
   const __DRIextension *extensions[4];
a54 10

   __DRIbuffer *(*get_buffers)(__DRIdrawable * driDrawable,
                               int *width, int *height,
                               unsigned int *attachments, int count,
                               int *out_count, void *data);
   void (*flush_front_buffer)(__DRIdrawable * driDrawable, void *data);
   __DRIbuffer *(*get_buffers_with_format)(__DRIdrawable * driDrawable,
			     int *width, int *height,
			     unsigned int *attachments, int count,
			     int *out_count, void *data);
a60 10

   /* Only used for cursors */
   uint32_t handle, size;
   void *map;
};

struct gbm_dri_surface {
   struct gbm_surface base;

   void *dri_private;
a72 6
}

static inline struct gbm_dri_surface *
gbm_dri_surface(struct gbm_surface *surface)
{
   return (struct gbm_dri_surface *) surface;
@


1.1.1.2
log
@Import Mesa 9.2.3
@
text
@a68 2

   struct wl_drm *wl_drm;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d33 1
d48 5
a52 5
   const __DRIcoreExtension   *core;
   const __DRIdri2Extension   *dri2;
   const __DRIimageExtension  *image;
   const __DRI2flushExtension *flush;
   const __DRIdri2LoaderExtension *loader;
d55 1
a55 2
   const __DRIextension **extensions;
   const __DRIextension **driver_extensions;
a68 6
   int (*image_get_buffers)(__DRIdrawable *driDrawable,
                            unsigned int format,
                            uint32_t *stamp,
                            void *loaderPrivate,
                            uint32_t buffer_mask,
                            struct __DRIimageList *buffers);
d106 3
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a30 1
#include <sys/mman.h>
a38 1
struct gbm_dri_bo;
a49 1
   const __DRIswrastExtension *swrast;
a74 16
   void (*swrast_put_image2)(__DRIdrawable *driDrawable,
                             int            op,
                             int            x,
                             int            y,
                             int            width,
                             int            height,
                             int            stride,
                             char          *data,
                             void          *loaderPrivate);
   void (*swrast_get_image)(__DRIdrawable *driDrawable,
                            int            x,
                            int            y,
                            int            width,
                            int            height,
                            char          *data,
                            void          *loaderPrivate);
d84 1
a84 1
   /* Used for cursors and the swrast front BO */
a110 36
}

static inline void *
gbm_dri_bo_map(struct gbm_dri_bo *bo)
{
   struct drm_mode_map_dumb map_arg;
   int ret;

   if (bo->image != NULL)
      return NULL;

   if (bo->map != NULL)
      return bo->map;

   memset(&map_arg, 0, sizeof(map_arg));
   map_arg.handle = bo->handle;

   ret = drmIoctl(bo->base.base.gbm->fd, DRM_IOCTL_MODE_MAP_DUMB, &map_arg);
   if (ret)
      return NULL;

   bo->map = mmap(0, bo->size, PROT_WRITE,
                  MAP_SHARED, bo->base.base.gbm->fd, map_arg.offset);
   if (bo->map == MAP_FAILED) {
      bo->map = NULL;
      return NULL;
   }

   return bo->map;
}

static inline void
gbm_dri_bo_unmap(struct gbm_dri_bo *bo)
{
   munmap(bo->map, bo->size);
   bo->map = NULL;
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d31 1
d40 1
d52 1
d78 16
d103 1
a103 1
   /* Only used for cursors */
d130 36
@


