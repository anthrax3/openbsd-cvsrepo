head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.41;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.20;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.10;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.13.16;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.50.22;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/**
 * State validation for vertex/fragment shaders.
 * Note that we have to delay most vertex/fragment shader translation
 * until rendering time since the linkage between the vertex outputs and
 * fragment inputs can vary depending on the pairing of shaders.
 *
 * Authors:
 *   Brian Paul
 */

#include "main/imports.h"
#include "main/mtypes.h"
#include "program/program.h"

#include "pipe/p_context.h"

#include "util/u_simple_shaders.h"

#include "cso_cache/cso_context.h"

#include "st_context.h"
#include "st_atom.h"
#include "st_program.h"


/**
 * Return pointer to a pass-through fragment shader.
 * This shader is used when a texture is missing/incomplete.
 */
static void *
get_passthrough_fs(struct st_context *st)
{
   if (!st->passthrough_fs) {
      st->passthrough_fs =
         util_make_fragment_passthrough_shader(st->pipe, TGSI_SEMANTIC_COLOR,
                                               TGSI_INTERPOLATE_PERSPECTIVE,
                                               TRUE);
   }

   return st->passthrough_fs;
}


/**
 * Update fragment program state/atom.  This involves translating the
 * Mesa fragment program into a gallium fragment program and binding it.
 */
static void
update_fp( struct st_context *st )
{
   struct st_fragment_program *stfp;
   struct st_fp_variant_key key;

   assert(st->ctx->FragmentProgram._Current);
   stfp = st_fragment_program(st->ctx->FragmentProgram._Current);
   assert(stfp->Base.Base.Target == GL_FRAGMENT_PROGRAM_ARB);

   memset(&key, 0, sizeof(key));
   key.st = st;

   /* _NEW_FRAG_CLAMP */
   key.clamp_color = st->clamp_frag_color_in_shader &&
                     st->ctx->Color._ClampFragmentColor;

   st->fp_variant = st_get_fp_variant(st, stfp, &key);

   st_reference_fragprog(st, &st->fp, stfp);

   if (st->missing_textures) {
      /* use a pass-through frag shader that uses no textures */
      void *fs = get_passthrough_fs(st);
      cso_set_fragment_shader_handle(st->cso_context, fs);
   }
   else {
      cso_set_fragment_shader_handle(st->cso_context,
                                     st->fp_variant->driver_shader);
   }
}


const struct st_tracked_state st_update_fp = {
   "st_update_fp",					/* name */
   {							/* dirty */
      _NEW_BUFFERS,					/* mesa */
      ST_NEW_FRAGMENT_PROGRAM                           /* st */
   },
   update_fp  					/* update */
};



/**
 * Update vertex program state/atom.  This involves translating the
 * Mesa vertex program into a gallium fragment program and binding it.
 */
static void
update_vp( struct st_context *st )
{
   struct st_vertex_program *stvp;
   struct st_vp_variant_key key;

   /* find active shader and params -- Should be covered by
    * ST_NEW_VERTEX_PROGRAM
    */
   assert(st->ctx->VertexProgram._Current);
   stvp = st_vertex_program(st->ctx->VertexProgram._Current);
   assert(stvp->Base.Base.Target == GL_VERTEX_PROGRAM_ARB);

   memset(&key, 0, sizeof key);
   key.st = st;  /* variants are per-context */

   /* When this is true, we will add an extra input to the vertex
    * shader translation (for edgeflags), an extra output with
    * edgeflag semantics, and extend the vertex shader to pass through
    * the input to the output.  We'll need to use similar logic to set
    * up the extra vertex_element input for edgeflags.
    */
   key.passthrough_edgeflags = st->vertdata_edgeflags;

   key.clamp_color = st->clamp_vert_color_in_shader &&
                     st->ctx->Light._ClampVertexColor;

   st->vp_variant = st_get_vp_variant(st, stvp, &key);

   st_reference_vertprog(st, &st->vp, stvp);

   cso_set_vertex_shader_handle(st->cso_context, 
                                st->vp_variant->driver_shader);

   st->vertex_result_to_slot = stvp->result_to_output;
}


const struct st_tracked_state st_update_vp = {
   "st_update_vp",					/* name */
   {							/* dirty */
      0,                                                /* mesa */
      ST_NEW_VERTEX_PROGRAM                             /* st */
   },
   update_vp						/* update */
};



static void
update_gp( struct st_context *st )
{
   struct st_geometry_program *stgp;
   struct st_gp_variant_key key;

   if (!st->ctx->GeometryProgram._Current) {
      cso_set_geometry_shader_handle(st->cso_context, NULL);
      return;
   }

   stgp = st_geometry_program(st->ctx->GeometryProgram._Current);
   assert(stgp->Base.Base.Target == MESA_GEOMETRY_PROGRAM);

   memset(&key, 0, sizeof(key));
   key.st = st;

   st->gp_variant = st_get_gp_variant(st, stgp, &key);

   st_reference_geomprog(st, &st->gp, stgp);

   cso_set_geometry_shader_handle(st->cso_context,
                                  st->gp_variant->driver_shader);
}

const struct st_tracked_state st_update_gp = {
   "st_update_gp",			/* name */
   {					/* dirty */
      0,				/* mesa */
      ST_NEW_GEOMETRY_PROGRAM           /* st */
   },
   update_gp  				/* update */
};
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a91 4
   /* Ignore sample qualifier while computing this flag. */
   key.persample_shading =
      _mesa_get_min_invocations_per_fragment(st->ctx, &stfp->Base, true) > 1;

d111 1
a111 1
      _NEW_BUFFERS | _NEW_MULTISAMPLE,			/* mesa */
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d92 4
d115 1
a115 1
      _NEW_BUFFERS,					/* mesa */
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
a143 1
    * _NEW_POLYGON, ST_NEW_EDGEFLAGS_DATA
d145 1
a145 3
   key.passthrough_edgeflags = (st->vertdata_edgeflags && (
                                st->ctx->Polygon.FrontMode != GL_FILL ||
                                st->ctx->Polygon.BackMode != GL_FILL));
d164 2
a165 2
      _NEW_POLYGON,					/* mesa */
      ST_NEW_VERTEX_PROGRAM | ST_NEW_EDGEFLAGS_DATA	/* st */
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d62 3
a64 1
         util_make_fragment_passthrough_shader(st->pipe);
d88 4
d111 1
a111 1
      0,						/* mesa */
d149 3
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a52 93

/**
 * Translate fragment program if needed.
 */
static void
translate_fp(struct st_context *st,
             struct st_fragment_program *stfp)
{
   if (!stfp->tgsi.tokens) {
      assert(stfp->Base.Base.NumInstructions > 0);

      st_translate_fragment_program(st, stfp);
   }
}

/*
 * Translate geometry program if needed.
 */
static void
translate_gp(struct st_context *st,
             struct st_geometry_program *stgp)
{
   if (!stgp->tgsi.tokens) {
      assert(stgp->Base.Base.NumInstructions > 1);

      st_translate_geometry_program(st, stgp);
   }
}

/**
 * Find a translated vertex program that corresponds to stvp and
 * has outputs matched to stfp's inputs.
 * This performs vertex and fragment translation (to TGSI) when needed.
 */
static struct st_vp_varient *
find_translated_vp(struct st_context *st,
                   struct st_vertex_program *stvp )
{
   struct st_vp_varient *vpv;
   struct st_vp_varient_key key;

   /* Nothing in our key yet.  This will change:
    */
   memset(&key, 0, sizeof key);

   /* When this is true, we will add an extra input to the vertex
    * shader translation (for edgeflags), an extra output with
    * edgeflag semantics, and extend the vertex shader to pass through
    * the input to the output.  We'll need to use similar logic to set
    * up the extra vertex_element input for edgeflags.
    * _NEW_POLYGON, ST_NEW_EDGEFLAGS_DATA
    */
   key.passthrough_edgeflags = (st->vertdata_edgeflags && (
                                st->ctx->Polygon.FrontMode != GL_FILL ||
                                st->ctx->Polygon.BackMode != GL_FILL));


   /* Do we need to throw away old translations after a change in the
    * GL program string?
    */
   if (stvp->serialNo != stvp->lastSerialNo) {
      /* These may have changed if the program string changed.
       */
      st_prepare_vertex_program( st, stvp );

      /* We are now up-to-date:
       */
      stvp->lastSerialNo = stvp->serialNo;
   }
   
   /* See if we've got a translated vertex program whose outputs match
    * the fragment program's inputs.
    */
   for (vpv = stvp->varients; vpv; vpv = vpv->next) {
      if (memcmp(&vpv->key, &key, sizeof key) == 0) {
         break;
      }
   }

   /* No?  Perform new translation here. */
   if (!vpv) {
      vpv = st_translate_vertex_program(st, stvp, &key);
      if (!vpv)
         return NULL;
      
      vpv->next = stvp->varients;
      stvp->varients = vpv;
   }

   return vpv;
}


d77 1
d83 4
a86 1
   translate_fp(st, stfp);
d96 2
a97 1
      cso_set_fragment_shader_handle(st->cso_context, stfp->driver_shader);
d121 1
d130 15
a144 1
   st->vp_varient = find_translated_vp(st, stvp);
d149 1
a149 1
                                st->vp_varient->driver_shader);
d161 1
a161 1
   update_vp					/* update */
d164 2
a168 1

d170 1
d180 4
a183 1
   translate_gp(st, stgp);
d187 2
a188 1
   cso_set_geometry_shader_handle(st->cso_context, stgp->driver_shader);
d192 4
a195 4
   "st_update_gp",					/* name */
   {							/* dirty */
      0,						/* mesa */
      ST_NEW_GEOMETRY_PROGRAM                           /* st */
d197 1
a197 1
   update_gp  					/* update */
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d40 1
a40 1
#include "shader/program.h"
a42 1
#include "pipe/p_shader_tokens.h"
d68 9
d78 3
d235 30
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d40 1
a40 1
#include "program/program.h"
d43 1
a68 9
/*
 * Translate geometry program if needed.
 */
static void
translate_gp(struct st_context *st,
             struct st_geometry_program *stgp)
{
   if (!stgp->tgsi.tokens) {
      assert(stgp->Base.Base.NumInstructions > 1);
a69 3
      st_translate_geometry_program(st, stgp);
   }
}
a223 30
};

static void
update_gp( struct st_context *st )
{

   struct st_geometry_program *stgp;

   if (!st->ctx->GeometryProgram._Current) {
      cso_set_geometry_shader_handle(st->cso_context, NULL);
      return;
   }

   stgp = st_geometry_program(st->ctx->GeometryProgram._Current);
   assert(stgp->Base.Base.Target == MESA_GEOMETRY_PROGRAM);

   translate_gp(st, stgp);

   st_reference_geomprog(st, &st->gp, stgp);

   cso_set_geometry_shader_handle(st->cso_context, stgp->driver_shader);
}

const struct st_tracked_state st_update_gp = {
   "st_update_gp",					/* name */
   {							/* dirty */
      0,						/* mesa */
      ST_NEW_GEOMETRY_PROGRAM                           /* st */
   },
   update_gp  					/* update */
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d53 93
d155 1
a155 3
         util_make_fragment_passthrough_shader(st->pipe, TGSI_SEMANTIC_COLOR,
                                               TGSI_INTERPOLATE_PERSPECTIVE,
                                               TRUE);
a169 1
   struct st_fp_variant_key key;
d175 1
a175 8
   memset(&key, 0, sizeof(key));
   key.st = st;

   /* _NEW_FRAG_CLAMP */
   key.clamp_color = st->clamp_frag_color_in_shader &&
                     st->ctx->Color._ClampFragmentColor;

   st->fp_variant = st_get_fp_variant(st, stfp, &key);
d185 1
a185 2
      cso_set_fragment_shader_handle(st->cso_context,
                                     st->fp_variant->driver_shader);
d193 1
a193 1
      _NEW_BUFFERS,					/* mesa */
a208 1
   struct st_vp_variant_key key;
d217 1
a217 18
   memset(&key, 0, sizeof key);
   key.st = st;  /* variants are per-context */

   /* When this is true, we will add an extra input to the vertex
    * shader translation (for edgeflags), an extra output with
    * edgeflag semantics, and extend the vertex shader to pass through
    * the input to the output.  We'll need to use similar logic to set
    * up the extra vertex_element input for edgeflags.
    * _NEW_POLYGON, ST_NEW_EDGEFLAGS_DATA
    */
   key.passthrough_edgeflags = (st->vertdata_edgeflags && (
                                st->ctx->Polygon.FrontMode != GL_FILL ||
                                st->ctx->Polygon.BackMode != GL_FILL));

   key.clamp_color = st->clamp_vert_color_in_shader &&
                     st->ctx->Light._ClampVertexColor;

   st->vp_variant = st_get_vp_variant(st, stvp, &key);
d222 1
a222 1
                                st->vp_variant->driver_shader);
d234 1
a234 1
   update_vp						/* update */
a236 2


d240 1
a241 1
   struct st_gp_variant_key key;
d251 1
a251 4
   memset(&key, 0, sizeof(key));
   key.st = st;

   st->gp_variant = st_get_gp_variant(st, stgp, &key);
d255 1
a255 2
   cso_set_geometry_shader_handle(st->cso_context,
                                  st->gp_variant->driver_shader);
d259 4
a262 4
   "st_update_gp",			/* name */
   {					/* dirty */
      0,				/* mesa */
      ST_NEW_GEOMETRY_PROGRAM           /* st */
d264 1
a264 1
   update_gp  				/* update */
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d144 1
d146 3
a148 1
   key.passthrough_edgeflags = st->vertdata_edgeflags;
d167 2
a168 2
      0,                                                /* mesa */
      ST_NEW_VERTEX_PROGRAM                             /* st */
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a91 4
   /* Ignore sample qualifier while computing this flag. */
   key.persample_shading =
      _mesa_get_min_invocations_per_fragment(st->ctx, &stfp->Base, true) > 1;

d111 1
a111 1
      _NEW_BUFFERS | _NEW_MULTISAMPLE,			/* mesa */
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d92 4
d115 1
a115 1
      _NEW_BUFFERS,					/* mesa */
@


