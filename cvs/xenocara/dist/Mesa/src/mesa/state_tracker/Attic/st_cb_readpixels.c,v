head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.44;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.22;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.10;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.13.19;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.50.25;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#include "main/image.h"
#include "main/pbo.h"
#include "main/imports.h"
#include "main/readpix.h"
#include "main/enums.h"
#include "main/framebuffer.h"
#include "util/u_inlines.h"
#include "util/u_format.h"

#include "st_cb_fbo.h"
#include "st_atom.h"
#include "st_context.h"
#include "st_cb_bitmap.h"
#include "st_cb_readpixels.h"
#include "state_tracker/st_cb_texture.h"
#include "state_tracker/st_format.h"
#include "state_tracker/st_texture.h"


/**
 * This uses a blit to copy the read buffer to a texture format which matches
 * the format and type combo and then a fast read-back is done using memcpy.
 * We can do arbitrary X/Y/Z/W/0/1 swizzling here as long as there is
 * a format which matches the swizzling.
 *
 * If such a format isn't available, we fall back to _mesa_readpixels.
 *
 * NOTE: Some drivers use a blit to convert between tiled and linear
 *       texture layouts during texture uploads/downloads, so the blit
 *       we do here should be free in such cases.
 */
static void
st_readpixels(struct gl_context *ctx, GLint x, GLint y,
              GLsizei width, GLsizei height,
              GLenum format, GLenum type,
              const struct gl_pixelstore_attrib *pack,
              GLvoid *pixels)
{
   struct st_context *st = st_context(ctx);
   struct gl_renderbuffer *rb =
         _mesa_get_read_renderbuffer_for_format(ctx, format);
   struct st_renderbuffer *strb = st_renderbuffer(rb);
   struct pipe_context *pipe = st->pipe;
   struct pipe_screen *screen = pipe->screen;
   struct pipe_resource *src;
   struct pipe_resource *dst = NULL;
   struct pipe_resource dst_templ;
   enum pipe_format dst_format, src_format;
   struct pipe_blit_info blit;
   unsigned bind = PIPE_BIND_TRANSFER_READ;
   struct pipe_transfer *tex_xfer;
   ubyte *map = NULL;

   /* Validate state (to be sure we have up-to-date framebuffer surfaces)
    * and flush the bitmap cache prior to reading. */
   st_validate_state(st);
   st_flush_bitmap_cache(st);

   if (!st->prefer_blit_based_texture_transfer) {
      goto fallback;
   }

   /* This must be done after state validation. */
   src = strb->texture;

   /* XXX Fallback for depth-stencil formats due to an incomplete
    * stencil blit implementation in some drivers. */
   if (format == GL_DEPTH_STENCIL) {
      goto fallback;
   }

   /* We are creating a texture of the size of the region being read back.
    * Need to check for NPOT texture support. */
   if (!screen->get_param(screen, PIPE_CAP_NPOT_TEXTURES) &&
       (!util_is_power_of_two(width) ||
        !util_is_power_of_two(height))) {
      goto fallback;
   }

   /* If the base internal format and the texture format don't match, we have
    * to use the slow path. */
   if (rb->_BaseFormat !=
       _mesa_get_format_base_format(rb->Format)) {
      goto fallback;
   }

   /* See if the texture format already matches the format and type,
    * in which case the memcpy-based fast path will likely be used and
    * we don't have to blit. */
   if (_mesa_format_matches_format_and_type(rb->Format, format,
                                            type, pack->SwapBytes)) {
      goto fallback;
   }

   if (_mesa_readpixels_needs_slow_path(ctx, format, type, GL_TRUE)) {
      goto fallback;
   }

   /* Convert the source format to what is expected by ReadPixels
    * and see if it's supported. */
   src_format = util_format_linear(src->format);
   src_format = util_format_luminance_to_red(src_format);
   src_format = util_format_intensity_to_red(src_format);

   if (!src_format ||
       !screen->is_format_supported(screen, src_format, src->target,
                                    src->nr_samples,
                                    PIPE_BIND_SAMPLER_VIEW)) {
      goto fallback;
   }

   if (format == GL_DEPTH_COMPONENT || format == GL_DEPTH_STENCIL)
      bind |= PIPE_BIND_DEPTH_STENCIL;
   else
      bind |= PIPE_BIND_RENDER_TARGET;

   /* Choose the destination format by finding the best match
    * for the format+type combo. */
   dst_format = st_choose_matching_format(screen, bind, format, type,
                                          pack->SwapBytes);
   if (dst_format == PIPE_FORMAT_NONE) {
      goto fallback;
   }

   /* create the destination texture */
   memset(&dst_templ, 0, sizeof(dst_templ));
   dst_templ.target = PIPE_TEXTURE_2D;
   dst_templ.format = dst_format;
   dst_templ.bind = bind;
   dst_templ.usage = PIPE_USAGE_STAGING;

   st_gl_texture_dims_to_pipe_dims(GL_TEXTURE_2D, width, height, 1,
                                   &dst_templ.width0, &dst_templ.height0,
                                   &dst_templ.depth0, &dst_templ.array_size);

   dst = screen->resource_create(screen, &dst_templ);
   if (!dst) {
      goto fallback;
   }

   memset(&blit, 0, sizeof(blit));
   blit.src.resource = src;
   blit.src.level = strb->surface->u.tex.level;
   blit.src.format = src_format;
   blit.dst.resource = dst;
   blit.dst.level = 0;
   blit.dst.format = dst->format;
   blit.src.box.x = x;
   blit.dst.box.x = 0;
   blit.src.box.y = y;
   blit.dst.box.y = 0;
   blit.src.box.z = strb->surface->u.tex.first_layer;
   blit.dst.box.z = 0;
   blit.src.box.width = blit.dst.box.width = width;
   blit.src.box.height = blit.dst.box.height = height;
   blit.src.box.depth = blit.dst.box.depth = 1;
   blit.mask = st_get_blit_mask(rb->_BaseFormat, format);
   blit.filter = PIPE_TEX_FILTER_NEAREST;
   blit.scissor_enable = FALSE;

   if (st_fb_orientation(ctx->ReadBuffer) == Y_0_TOP) {
      blit.src.box.y = rb->Height - blit.src.box.y;
      blit.src.box.height = -blit.src.box.height;
   }

   /* blit */
   st->pipe->blit(st->pipe, &blit);

   /* map resources */
   pixels = _mesa_map_pbo_dest(ctx, pack, pixels);

   map = pipe_transfer_map_3d(pipe, dst, 0, PIPE_TRANSFER_READ,
                              0, 0, 0, width, height, 1, &tex_xfer);
   if (!map) {
      _mesa_unmap_pbo_dest(ctx, pack);
      pipe_resource_reference(&dst, NULL);
      goto fallback;
   }

   /* memcpy data into a user buffer */
   {
      const uint bytesPerRow = width * util_format_get_blocksize(dst_format);
      GLuint row;

      for (row = 0; row < (unsigned) height; row++) {
         GLvoid *dest = _mesa_image_address3d(pack, pixels,
                                              width, height, format,
                                              type, 0, row, 0);
         memcpy(dest, map, bytesPerRow);
         map += tex_xfer->stride;
      }
   }

   pipe_transfer_unmap(pipe, tex_xfer);
   _mesa_unmap_pbo_dest(ctx, pack);
   pipe_resource_reference(&dst, NULL);
   return;

fallback:
   _mesa_readpixels(ctx, x, y, width, height, format, type, pack, pixels);
}

void st_init_readpixels_functions(struct dd_function_table *functions)
{
   functions->ReadPixels = st_readpixels;
}
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d146 1
a146 1
   dst_format = st_choose_matching_format(st, bind, format, type,
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d146 1
a146 1
   dst_format = st_choose_matching_format(screen, bind, format, type,
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d168 1
d170 1
a170 1
   blit.src.level = strb->rtt_level;
d179 1
a179 1
   blit.src.box.z = strb->rtt_face + strb->rtt_slice;
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a27 11

/**
 * glReadPixels interface to pipe
 *
 * \author Brian Paul
 */


#include "main/imports.h"
#include "main/bufferobj.h"
#include "main/context.h"
a28 1
#include "main/pack.h"
d30 5
a34 3

#include "pipe/p_context.h"
#include "pipe/p_defines.h"
a35 2
#include "util/u_inlines.h"
#include "util/u_tile.h"
d37 2
a38 1
#include "st_debug.h"
a39 1
#include "st_atom.h"
d42 3
a44 120
#include "st_cb_fbo.h"

/**
 * Special case for reading stencil buffer.
 * For color/depth we use get_tile().  For stencil, map the stencil buffer.
 */
void
st_read_stencil_pixels(struct gl_context *ctx, GLint x, GLint y,
                       GLsizei width, GLsizei height,
                       GLenum format, GLenum type,
                       const struct gl_pixelstore_attrib *packing,
                       GLvoid *pixels)
{
   struct gl_framebuffer *fb = ctx->ReadBuffer;
   struct pipe_context *pipe = st_context(ctx)->pipe;
   struct st_renderbuffer *strb = st_renderbuffer(fb->_StencilBuffer);
   struct pipe_transfer *pt;
   ubyte *stmap;
   GLint j;

   if (strb->Base.Wrapped) {
      strb = st_renderbuffer(strb->Base.Wrapped);
   }

   if (st_fb_orientation(ctx->DrawBuffer) == Y_0_TOP) {
      y = ctx->DrawBuffer->Height - y - height;
   }

   /* Create a read transfer from the renderbuffer's texture */

   pt = pipe_get_transfer(pipe, strb->texture,
                          strb->rtt_level,
                          strb->rtt_face + strb->rtt_slice,
                          PIPE_TRANSFER_READ,
                          x, y, width, height);

   /* map the stencil buffer */
   stmap = pipe_transfer_map(pipe, pt);

   /* width should never be > MAX_WIDTH since we did clipping earlier */
   ASSERT(width <= MAX_WIDTH);

   /* process image row by row */
   for (j = 0; j < height; j++) {
      GLvoid *dest;
      GLstencil sValues[MAX_WIDTH];
      GLfloat zValues[MAX_WIDTH];
      GLint srcY;

      if (st_fb_orientation(ctx->DrawBuffer) == Y_0_TOP) {
         srcY = height - j - 1;
      }
      else {
         srcY = j;
      }

      /* get stencil (and Z) values */
      switch (pt->resource->format) {
      case PIPE_FORMAT_S8_USCALED:
         {
            const ubyte *src = stmap + srcY * pt->stride;
            memcpy(sValues, src, width);
         }
         break;
      case PIPE_FORMAT_Z24_UNORM_S8_USCALED:
         if (format == GL_DEPTH_STENCIL) {
            const uint *src = (uint *) (stmap + srcY * pt->stride);
            const GLfloat scale = 1.0f / (0xffffff);
            GLint k;
            for (k = 0; k < width; k++) {
               sValues[k] = src[k] >> 24;
               zValues[k] = (src[k] & 0xffffff) * scale;
            }
         }
         else {
            const uint *src = (uint *) (stmap + srcY * pt->stride);
            GLint k;
            for (k = 0; k < width; k++) {
               sValues[k] = src[k] >> 24;
            }
         }
         break;
      case PIPE_FORMAT_S8_USCALED_Z24_UNORM:
         if (format == GL_DEPTH_STENCIL) {
            const uint *src = (uint *) (stmap + srcY * pt->stride);
            const GLfloat scale = 1.0f / (0xffffff);
            GLint k;
            for (k = 0; k < width; k++) {
               sValues[k] = src[k] & 0xff;
               zValues[k] = (src[k] >> 8) * scale;
            }
         }
         else {
            const uint *src = (uint *) (stmap + srcY * pt->stride);
            GLint k;
            for (k = 0; k < width; k++) {
               sValues[k] = src[k] & 0xff;
            }
         }
         break;
      default:
         assert(0);
      }

      /* store */
      dest = _mesa_image_address2d(packing, pixels, width, height,
                                   format, type, j, 0);
      if (format == GL_DEPTH_STENCIL) {
         _mesa_pack_depth_stencil_span(ctx, width, dest,
                                       zValues, sValues, packing);
      }
      else {
         _mesa_pack_stencil_span(ctx, width, type, dest, sValues, packing);
      }
   }

   /* unmap the stencil buffer */
   pipe_transfer_unmap(pipe, pt);
   pipe->transfer_destroy(pipe, pt);
}
d48 10
a57 181
 * Return renderbuffer to use for reading color pixels for glRead/CopyPixel
 * commands.
 */
struct st_renderbuffer *
st_get_color_read_renderbuffer(struct gl_context *ctx)
{
   struct gl_framebuffer *fb = ctx->ReadBuffer;
   struct st_renderbuffer *strb =
      st_renderbuffer(fb->_ColorReadBuffer);

   return strb;
}


/**
 * Try to do glReadPixels in a fast manner for common cases.
 * \return GL_TRUE for success, GL_FALSE for failure
 */
static GLboolean
st_fast_readpixels(struct gl_context *ctx, struct st_renderbuffer *strb,
                   GLint x, GLint y, GLsizei width, GLsizei height,
                   GLenum format, GLenum type,
                   const struct gl_pixelstore_attrib *pack,
                   GLvoid *dest)
{
   GLubyte alphaORoperand;
   enum combination {
      A8R8G8B8_UNORM_TO_RGBA_UBYTE,
      A8R8G8B8_UNORM_TO_RGB_UBYTE,
      A8R8G8B8_UNORM_TO_BGRA_UINT,
      A8R8G8B8_UNORM_TO_RGBA_UINT
   } combo;

   if (ctx->_ImageTransferState)
      return GL_FALSE;

   if (strb->format == PIPE_FORMAT_B8G8R8A8_UNORM) {
      alphaORoperand = 0;
   }
   else if (strb->format == PIPE_FORMAT_B8G8R8X8_UNORM ) {
      alphaORoperand = 0xff;
   }
   else {
      return GL_FALSE;
   }

   if (format == GL_RGBA && type == GL_UNSIGNED_BYTE) {
      combo = A8R8G8B8_UNORM_TO_RGBA_UBYTE;
   }
   else if (format == GL_RGB && type == GL_UNSIGNED_BYTE) {
      combo = A8R8G8B8_UNORM_TO_RGB_UBYTE;
   }
   else if (format == GL_BGRA && type == GL_UNSIGNED_INT_8_8_8_8_REV) {
      combo = A8R8G8B8_UNORM_TO_BGRA_UINT;
   }
   else if (format == GL_RGBA && type == GL_UNSIGNED_INT_8_8_8_8) {
      combo = A8R8G8B8_UNORM_TO_RGBA_UINT;
   }
   else {
      return GL_FALSE;
   }

   /*printf("st_fast_readpixels combo %d\n", (GLint) combo);*/

   {
      struct pipe_context *pipe = st_context(ctx)->pipe;
      struct pipe_transfer *trans;
      const GLubyte *map;
      GLubyte *dst;
      GLint row, col, dy, dstStride;

      if (st_fb_orientation(ctx->ReadBuffer) == Y_0_TOP) {
         /* convert GL Y to Gallium Y */
         y = strb->texture->height0 - y - height;
      }

      trans = pipe_get_transfer(pipe, strb->texture,
                                strb->rtt_level,
                                strb->rtt_face + strb->rtt_slice,
                                PIPE_TRANSFER_READ,
                                x, y, width, height);
      if (!trans) {
         return GL_FALSE;
      }

      map = pipe_transfer_map(pipe, trans);
      if (!map) {
         pipe->transfer_destroy(pipe, trans);
         return GL_FALSE;
      }

      /* We always write to the user/dest buffer from low addr to high addr
       * but the read order depends on renderbuffer orientation
       */
      if (st_fb_orientation(ctx->ReadBuffer) == Y_0_TOP) {
         /* read source rows from bottom to top */
         y = height - 1;
         dy = -1;
      }
      else {
         /* read source rows from top to bottom */
         y = 0;
         dy = 1;
      }

      dst = _mesa_image_address2d(pack, dest, width, height,
                                  format, type, 0, 0);
      dstStride = _mesa_image_row_stride(pack, width, format, type);

      switch (combo) {
      case A8R8G8B8_UNORM_TO_RGBA_UBYTE:
         for (row = 0; row < height; row++) {
            const GLubyte *src = map + y * trans->stride;
            for (col = 0; col < width; col++) {
               GLuint pixel = ((GLuint *) src)[col];
               dst[col*4+0] = (pixel >> 16) & 0xff;
               dst[col*4+1] = (pixel >>  8) & 0xff;
               dst[col*4+2] = (pixel >>  0) & 0xff;
               dst[col*4+3] = ((pixel >> 24) & 0xff) | alphaORoperand;
            }
            dst += dstStride;
            y += dy;
         }
         break;
      case A8R8G8B8_UNORM_TO_RGB_UBYTE:
         for (row = 0; row < height; row++) {
            const GLubyte *src = map + y * trans->stride;
            for (col = 0; col < width; col++) {
               GLuint pixel = ((GLuint *) src)[col];
               dst[col*3+0] = (pixel >> 16) & 0xff;
               dst[col*3+1] = (pixel >>  8) & 0xff;
               dst[col*3+2] = (pixel >>  0) & 0xff;
            }
            dst += dstStride;
            y += dy;
         }
         break;
      case A8R8G8B8_UNORM_TO_BGRA_UINT:
         for (row = 0; row < height; row++) {
            const GLubyte *src = map + y * trans->stride;
            memcpy(dst, src, 4 * width);
            if (alphaORoperand) {
               assert(alphaORoperand == 0xff);
               for (col = 0; col < width; col++) {
                  dst[col*4+3] = 0xff;
               }
            }
            dst += dstStride;
            y += dy;
         }
         break;
      case A8R8G8B8_UNORM_TO_RGBA_UINT:
         for (row = 0; row < height; row++) {
            const GLubyte *src = map + y * trans->stride;
            for (col = 0; col < width; col++) {
               GLuint pixel = ((GLuint *) src)[col];
               dst[col*4+0] = ((pixel >> 24) & 0xff) | alphaORoperand;
               dst[col*4+1] = (pixel >> 0) & 0xff;
               dst[col*4+2] = (pixel >> 8) & 0xff;
               dst[col*4+3] = (pixel >> 16) & 0xff;
            }
            dst += dstStride;
            y += dy;
         }
         break;
      default:
         ; /* nothing */
      }

      pipe_transfer_unmap(pipe, trans);
      pipe->transfer_destroy(pipe, trans);
   }

   return GL_TRUE;
}


/**
 * Do glReadPixels by getting rows from the framebuffer transfer with
 * get_tile().  Convert to requested format/type with Mesa image routines.
 * Image transfer ops are done in software too.
d60 2
a61 1
st_readpixels(struct gl_context *ctx, GLint x, GLint y, GLsizei width, GLsizei height,
d64 1
a64 1
              GLvoid *dest)
d67 3
d71 9
a79 11
   GLfloat (*temp)[4];
   GLbitfield transferOps = ctx->_ImageTransferState;
   GLsizei i, j;
   GLint yStep, dfStride;
   GLfloat *df;
   struct st_renderbuffer *strb;
   struct gl_pixelstore_attrib clippedPacking = *pack;
   struct pipe_transfer *trans;
   enum pipe_format pformat;

   assert(ctx->ReadBuffer->Width > 0);
d81 2
d84 1
d86 2
a87 4
   /* Do all needed clipping here, so that we can forget about it later */
   if (!_mesa_clip_readpixels(ctx, &x, &y, &width, &height, &clippedPacking)) {
      /* The ReadPixels transfer is totally outside the window bounds */
      return;
d90 2
a91 1
   st_flush_bitmap_cache(st);
d93 93
a185 53
   dest = _mesa_map_pbo_dest(ctx, &clippedPacking, dest);
   if (!dest)
      return;

   if (format == GL_STENCIL_INDEX ||
       format == GL_DEPTH_STENCIL) {
      st_read_stencil_pixels(ctx, x, y, width, height,
                             format, type, pack, dest);
      return;
   }
   else if (format == GL_DEPTH_COMPONENT) {
      strb = st_renderbuffer(ctx->ReadBuffer->_DepthBuffer);
      if (strb->Base.Wrapped) {
         strb = st_renderbuffer(strb->Base.Wrapped);
      }
   }
   else {
      /* Read color buffer */
      strb = st_get_color_read_renderbuffer(ctx);
   }

   if (!strb)
      return;

   /* try a fast-path readpixels before anything else */
   if (st_fast_readpixels(ctx, strb, x, y, width, height,
                          format, type, pack, dest)) {
      /* success! */
      _mesa_unmap_pbo_dest(ctx, &clippedPacking);
      return;
   }

   /* allocate temp pixel row buffer */
   temp = (GLfloat (*)[4]) malloc(4 * width * sizeof(GLfloat));
   if (!temp) {
      _mesa_error(ctx, GL_OUT_OF_MEMORY, "glReadPixels");
      return;
   }

   if(ctx->Color._ClampReadColor)
      transferOps |= IMAGE_CLAMP_BIT;

   if (format == GL_RGBA && type == GL_FLOAT && !transferOps) {
      /* write tile(row) directly into user's buffer */
      df = (GLfloat *) _mesa_image_address2d(&clippedPacking, dest, width,
                                             height, format, type, 0, 0);
      dfStride = width * 4;
   }
   else {
      /* write tile(row) into temp row buffer */
      df = (GLfloat *) temp;
      dfStride = 0;
   }
d188 2
a189 2
      /* convert GL Y to Gallium Y */
      y = strb->Base.Height - y - height;
d192 2
a193 6
   /* Create a read transfer from the renderbuffer's texture */
   trans = pipe_get_transfer(pipe, strb->texture,
                             strb->rtt_level, /* level */
                             strb->rtt_face + strb->rtt_slice, /* layer */
                             PIPE_TRANSFER_READ,
                             x, y, width, height);
d195 9
a203 8
   /* determine bottom-to-top vs. top-to-bottom order */
   if (st_fb_orientation(ctx->ReadBuffer) == Y_0_TOP) {
      y = height - 1;
      yStep = -1;
   }
   else {
      y = 0;
      yStep = 1;
d206 4
a209 5
   /* possibly convert sRGB format to linear RGB format */
   pformat = util_format_linear(trans->resource->format);

   if (ST_DEBUG & DEBUG_FALLBACK)
      debug_printf("%s: fallback processing\n", __FUNCTION__);
d211 6
a216 114
   /*
    * Copy pixels from pipe_transfer to user memory
    */
   {
      /* dest of first pixel in client memory */
      GLubyte *dst = _mesa_image_address2d(&clippedPacking, dest, width,
                                           height, format, type, 0, 0);
      /* dest row stride */
      const GLint dstStride = _mesa_image_row_stride(&clippedPacking, width,
                                                     format, type);

      if (pformat == PIPE_FORMAT_Z24_UNORM_S8_USCALED ||
          pformat == PIPE_FORMAT_Z24X8_UNORM) {
         if (format == GL_DEPTH_COMPONENT) {
            for (i = 0; i < height; i++) {
               GLuint ztemp[MAX_WIDTH];
               GLfloat zfloat[MAX_WIDTH];
               const double scale = 1.0 / ((1 << 24) - 1);
               pipe_get_tile_raw(pipe, trans, 0, y, width, 1, ztemp, 0);
               y += yStep;
               for (j = 0; j < width; j++) {
                  zfloat[j] = (float) (scale * (ztemp[j] & 0xffffff));
               }
               _mesa_pack_depth_span(ctx, width, dst, type,
                                     zfloat, &clippedPacking);
               dst += dstStride;
            }
         }
         else {
            /* XXX: unreachable code -- should be before st_read_stencil_pixels */
            assert(format == GL_DEPTH_STENCIL_EXT);
            for (i = 0; i < height; i++) {
               GLuint *zshort = (GLuint *)dst;
               pipe_get_tile_raw(pipe, trans, 0, y, width, 1, dst, 0);
               y += yStep;
               /* Reverse into 24/8 */
               for (j = 0; j < width; j++) {
                  zshort[j] = (zshort[j] << 8) | (zshort[j] >> 24);
               }
               dst += dstStride;
            }
         }
      }
      else if (pformat == PIPE_FORMAT_S8_USCALED_Z24_UNORM ||
               pformat == PIPE_FORMAT_X8Z24_UNORM) {
         if (format == GL_DEPTH_COMPONENT) {
            for (i = 0; i < height; i++) {
               GLuint ztemp[MAX_WIDTH];
               GLfloat zfloat[MAX_WIDTH];
               const double scale = 1.0 / ((1 << 24) - 1);
               pipe_get_tile_raw(pipe, trans, 0, y, width, 1, ztemp, 0);
               y += yStep;
               for (j = 0; j < width; j++) {
                  zfloat[j] = (float) (scale * ((ztemp[j] >> 8) & 0xffffff));
               }
               _mesa_pack_depth_span(ctx, width, dst, type,
                                     zfloat, &clippedPacking);
               dst += dstStride;
            }
         }
         else {
            /* XXX: unreachable code -- should be before st_read_stencil_pixels */
            assert(format == GL_DEPTH_STENCIL_EXT);
            for (i = 0; i < height; i++) {
               pipe_get_tile_raw(pipe, trans, 0, y, width, 1, dst, 0);
               y += yStep;
               dst += dstStride;
            }
         }
      }
      else if (pformat == PIPE_FORMAT_Z16_UNORM) {
         for (i = 0; i < height; i++) {
            GLushort ztemp[MAX_WIDTH];
            GLfloat zfloat[MAX_WIDTH];
            const double scale = 1.0 / 0xffff;
            pipe_get_tile_raw(pipe, trans, 0, y, width, 1, ztemp, 0);
            y += yStep;
            for (j = 0; j < width; j++) {
               zfloat[j] = (float) (scale * ztemp[j]);
            }
            _mesa_pack_depth_span(ctx, width, dst, type,
                                  zfloat, &clippedPacking);
            dst += dstStride;
         }
      }
      else if (pformat == PIPE_FORMAT_Z32_UNORM) {
         for (i = 0; i < height; i++) {
            GLuint ztemp[MAX_WIDTH];
            GLfloat zfloat[MAX_WIDTH];
            const double scale = 1.0 / 0xffffffff;
            pipe_get_tile_raw(pipe, trans, 0, y, width, 1, ztemp, 0);
            y += yStep;
            for (j = 0; j < width; j++) {
               zfloat[j] = (float) (scale * ztemp[j]);
            }
            _mesa_pack_depth_span(ctx, width, dst, type,
                                  zfloat, &clippedPacking);
            dst += dstStride;
         }
      }
      else {
         /* RGBA format */
         /* Do a row at a time to flip image data vertically */
         for (i = 0; i < height; i++) {
            pipe_get_tile_rgba_format(pipe, trans, 0, y, width, 1,
                                      pformat, df);
            y += yStep;
            df += dfStride;
            if (!dfStride) {
               _mesa_pack_rgba_span_float(ctx, width, temp, format, type, dst,
                                          &clippedPacking, transferOps);
               dst += dstStride;
            }
         }
d220 4
a223 3
   free(temp);

   pipe->transfer_destroy(pipe, trans);
d225 2
a226 1
   _mesa_unmap_pbo_dest(ctx, &clippedPacking);
a227 1

@


1.2
log
@Merge Mesa 7.10.3
@
text
@d41 1
d45 1
d202 1
d206 2
a207 1
      A8R8G8B8_UNORM_TO_BGRA_UINT
d213 11
a223 2
   if (strb->format == PIPE_FORMAT_B8G8R8A8_UNORM &&
       format == GL_RGBA && type == GL_UNSIGNED_BYTE) {
d226 1
a226 2
   else if (strb->format == PIPE_FORMAT_B8G8R8A8_UNORM &&
            format == GL_RGB && type == GL_UNSIGNED_BYTE) {
d229 1
a229 2
   else if (strb->format == PIPE_FORMAT_B8G8R8A8_UNORM &&
            format == GL_BGRA && type == GL_UNSIGNED_INT_8_8_8_8_REV) {
d232 3
d295 1
a295 1
               dst[col*4+3] = (pixel >> 24) & 0xff;
d318 20
d368 1
a368 1
   const GLbitfield transferOps = ctx->_ImageTransferState;
d375 1
d428 4
a431 1
   if (format == GL_RGBA && type == GL_FLOAT) {
d465 3
d482 2
a483 2
      if (trans->resource->format == PIPE_FORMAT_Z24_UNORM_S8_USCALED ||
          trans->resource->format == PIPE_FORMAT_Z24X8_UNORM) {
d514 2
a515 2
      else if (trans->resource->format == PIPE_FORMAT_S8_USCALED_Z24_UNORM ||
               trans->resource->format == PIPE_FORMAT_X8Z24_UNORM) {
d541 1
a541 1
      else if (trans->resource->format == PIPE_FORMAT_Z16_UNORM) {
d556 1
a556 1
      else if (trans->resource->format == PIPE_FORMAT_Z32_UNORM) {
d575 2
a576 1
            pipe_get_tile_rgba(pipe, trans, 0, y, width, 1, df);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d40 1
d49 2
a52 3
#include "st_public.h"
#include "st_texture.h"
#include "st_inlines.h"
d59 1
a59 1
st_read_stencil_pixels(GLcontext *ctx, GLint x, GLint y,
d66 1
a66 1
   struct pipe_screen *screen = ctx->st->pipe->screen;
d72 4
d82 5
a86 4
   pt = st_cond_flush_get_tex_transfer(st_context(ctx), strb->texture,
				       0, 0, 0,
				       PIPE_TRANSFER_READ, x, y,
				       width, height);
d89 1
a89 1
   stmap = screen->transfer_map(screen, pt);
d109 2
a110 2
      switch (pt->texture->format) {
      case PIPE_FORMAT_S8_UNORM:
d116 1
a116 1
      case PIPE_FORMAT_Z24S8_UNORM:
d134 1
a134 1
      case PIPE_FORMAT_S8Z24_UNORM:
d169 2
a170 2
   screen->transfer_unmap(screen, pt);
   screen->tex_transfer_destroy(pt);
a176 1
 * Special care is needed for the front buffer.
d179 1
a179 1
st_get_color_read_renderbuffer(GLcontext *ctx)
a183 12
   struct st_renderbuffer *front = 
      st_renderbuffer(fb->Attachment[BUFFER_FRONT_LEFT].Renderbuffer);

   if (strb == front
       && ctx->st->frontbuffer_status == FRONT_STATUS_COPY_OF_BACK) {
      /* reading from front color buffer, which is a logical copy of the
       * back color buffer.
       */
      struct st_renderbuffer *back = 
         st_renderbuffer(fb->Attachment[BUFFER_BACK_LEFT].Renderbuffer);
      strb = back;
   }
d194 1
a194 1
st_fast_readpixels(GLcontext *ctx, struct st_renderbuffer *strb,
d228 1
a228 2
      struct pipe_context *pipe = ctx->st->pipe;
      struct pipe_screen *screen = pipe->screen;
d235 1
d239 5
a243 4
      trans = st_cond_flush_get_tex_transfer(st_context(ctx), strb->texture,
					     0, 0, 0,
					     PIPE_TRANSFER_READ, x, y,
					     width, height);
d248 1
a248 1
      map = screen->transfer_map(screen, trans);
d250 1
a250 1
         screen->tex_transfer_destroy(trans);
d254 3
d258 1
d263 1
d312 2
a313 2
      screen->transfer_unmap(screen, trans);
      screen->tex_transfer_destroy(trans);
d326 1
a326 1
st_readpixels(GLcontext *ctx, GLint x, GLint y, GLsizei width, GLsizei height,
d331 3
a333 3
   struct pipe_context *pipe = ctx->st->pipe;
   struct pipe_screen *screen = pipe->screen;
   GLfloat temp[MAX_WIDTH][4];
d344 1
a344 2
   /* XXX convolution not done yet */
   assert((transferOps & IMAGE_CONVOLUTION_BIT) == 0);
d352 2
a357 2
   st_flush(ctx->st, PIPE_FLUSH_RENDER_CACHE, NULL);

d366 3
d386 7
d406 1
d411 5
a415 4
   trans = st_cond_flush_get_tex_transfer(st_context(ctx), strb->texture,
					  0, 0, 0,
					  PIPE_TRANSFER_READ, x, y,
					  width, height);
d441 2
a442 2
      if (trans->texture->format == PIPE_FORMAT_Z24S8_UNORM ||
          trans->texture->format == PIPE_FORMAT_Z24X8_UNORM) {
d448 1
a448 1
               pipe_get_tile_raw(trans, 0, y, width, 1, ztemp, 0);
d463 1
a463 1
               pipe_get_tile_raw(trans, 0, y, width, 1, dst, 0);
d473 2
a474 2
      else if (trans->texture->format == PIPE_FORMAT_S8Z24_UNORM ||
               trans->texture->format == PIPE_FORMAT_X8Z24_UNORM) {
d480 1
a480 1
               pipe_get_tile_raw(trans, 0, y, width, 1, ztemp, 0);
d494 1
a494 1
               pipe_get_tile_raw(trans, 0, y, width, 1, dst, 0);
d500 1
a500 1
      else if (trans->texture->format == PIPE_FORMAT_Z16_UNORM) {
d505 1
a505 1
            pipe_get_tile_raw(trans, 0, y, width, 1, ztemp, 0);
d515 1
a515 1
      else if (trans->texture->format == PIPE_FORMAT_Z32_UNORM) {
d520 1
a520 1
            pipe_get_tile_raw(trans, 0, y, width, 1, ztemp, 0);
d534 1
a534 1
            pipe_get_tile_rgba(trans, 0, y, width, 1, df);
d546 3
a548 1
   screen->tex_transfer_destroy(trans);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a39 1
#include "main/pack.h"
a47 2
#include "st_atom.h"
#include "st_cb_bitmap.h"
d50 3
d59 1
a59 1
st_read_stencil_pixels(struct gl_context *ctx, GLint x, GLint y,
d66 1
a66 1
   struct pipe_context *pipe = st_context(ctx)->pipe;
a71 4
   if (strb->Base.Wrapped) {
      strb = st_renderbuffer(strb->Base.Wrapped);
   }

d78 4
a81 5
   pt = pipe_get_transfer(pipe, strb->texture,
                          strb->rtt_level,
                          strb->rtt_face + strb->rtt_slice,
                          PIPE_TRANSFER_READ,
                          x, y, width, height);
d84 1
a84 1
   stmap = pipe_transfer_map(pipe, pt);
d104 2
a105 2
      switch (pt->resource->format) {
      case PIPE_FORMAT_S8_USCALED:
d111 1
a111 1
      case PIPE_FORMAT_Z24_UNORM_S8_USCALED:
d129 1
a129 1
      case PIPE_FORMAT_S8_USCALED_Z24_UNORM:
d164 2
a165 2
   pipe_transfer_unmap(pipe, pt);
   pipe->transfer_destroy(pipe, pt);
d172 1
d175 1
a175 1
st_get_color_read_renderbuffer(struct gl_context *ctx)
d180 12
d202 1
a202 1
st_fast_readpixels(struct gl_context *ctx, struct st_renderbuffer *strb,
d236 2
a237 1
      struct pipe_context *pipe = st_context(ctx)->pipe;
a243 1
         /* convert GL Y to Gallium Y */
d247 4
a250 5
      trans = pipe_get_transfer(pipe, strb->texture,
                                strb->rtt_level,
                                strb->rtt_face + strb->rtt_slice,
                                PIPE_TRANSFER_READ,
                                x, y, width, height);
d255 1
a255 1
      map = pipe_transfer_map(pipe, trans);
d257 1
a257 1
         pipe->transfer_destroy(pipe, trans);
a260 3
      /* We always write to the user/dest buffer from low addr to high addr
       * but the read order depends on renderbuffer orientation
       */
a261 1
         /* read source rows from bottom to top */
a265 1
         /* read source rows from top to bottom */
d314 2
a315 2
      pipe_transfer_unmap(pipe, trans);
      pipe->transfer_destroy(pipe, trans);
d328 1
a328 1
st_readpixels(struct gl_context *ctx, GLint x, GLint y, GLsizei width, GLsizei height,
d333 3
a335 3
   struct st_context *st = st_context(ctx);
   struct pipe_context *pipe = st->pipe;
   GLfloat (*temp)[4];
d346 2
a347 1
   st_validate_state(st);
a354 2
   st_flush_bitmap_cache(st);

d359 2
a368 3
      if (strb->Base.Wrapped) {
         strb = st_renderbuffer(strb->Base.Wrapped);
      }
a385 7
   /* allocate temp pixel row buffer */
   temp = (GLfloat (*)[4]) malloc(4 * width * sizeof(GLfloat));
   if (!temp) {
      _mesa_error(ctx, GL_OUT_OF_MEMORY, "glReadPixels");
      return;
   }

a398 1
      /* convert GL Y to Gallium Y */
d403 4
a406 5
   trans = pipe_get_transfer(pipe, strb->texture,
                             strb->rtt_level, /* level */
                             strb->rtt_face + strb->rtt_slice, /* layer */
                             PIPE_TRANSFER_READ,
                             x, y, width, height);
d432 2
a433 2
      if (trans->resource->format == PIPE_FORMAT_Z24_UNORM_S8_USCALED ||
          trans->resource->format == PIPE_FORMAT_Z24X8_UNORM) {
d439 1
a439 1
               pipe_get_tile_raw(pipe, trans, 0, y, width, 1, ztemp, 0);
d454 1
a454 1
               pipe_get_tile_raw(pipe, trans, 0, y, width, 1, dst, 0);
d464 2
a465 2
      else if (trans->resource->format == PIPE_FORMAT_S8_USCALED_Z24_UNORM ||
               trans->resource->format == PIPE_FORMAT_X8Z24_UNORM) {
d471 1
a471 1
               pipe_get_tile_raw(pipe, trans, 0, y, width, 1, ztemp, 0);
d485 1
a485 1
               pipe_get_tile_raw(pipe, trans, 0, y, width, 1, dst, 0);
d491 1
a491 1
      else if (trans->resource->format == PIPE_FORMAT_Z16_UNORM) {
d496 1
a496 1
            pipe_get_tile_raw(pipe, trans, 0, y, width, 1, ztemp, 0);
d506 1
a506 1
      else if (trans->resource->format == PIPE_FORMAT_Z32_UNORM) {
d511 1
a511 1
            pipe_get_tile_raw(pipe, trans, 0, y, width, 1, ztemp, 0);
d525 1
a525 1
            pipe_get_tile_rgba(pipe, trans, 0, y, width, 1, df);
d537 1
a537 3
   free(temp);

   pipe->transfer_destroy(pipe, trans);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d28 11
d40 4
a43 5
#include "main/pbo.h"
#include "main/imports.h"
#include "main/readpix.h"
#include "main/enums.h"
#include "main/framebuffer.h"
d45 1
a45 1
#include "util/u_format.h"
d47 2
a48 1
#include "st_cb_fbo.h"
a49 1
#include "st_context.h"
d52 120
a171 3
#include "state_tracker/st_cb_texture.h"
#include "state_tracker/st_format.h"
#include "state_tracker/st_texture.h"
d175 149
a323 10
 * This uses a blit to copy the read buffer to a texture format which matches
 * the format and type combo and then a fast read-back is done using memcpy.
 * We can do arbitrary X/Y/Z/W/0/1 swizzling here as long as there is
 * a format which matches the swizzling.
 *
 * If such a format isn't available, we fall back to _mesa_readpixels.
 *
 * NOTE: Some drivers use a blit to convert between tiled and linear
 *       texture layouts during texture uploads/downloads, so the blit
 *       we do here should be free in such cases.
d326 1
a326 2
st_readpixels(struct gl_context *ctx, GLint x, GLint y,
              GLsizei width, GLsizei height,
d329 1
a329 1
              GLvoid *pixels)
a331 3
   struct gl_renderbuffer *rb =
         _mesa_get_read_renderbuffer_for_format(ctx, format);
   struct st_renderbuffer *strb = st_renderbuffer(rb);
d333 10
a342 9
   struct pipe_screen *screen = pipe->screen;
   struct pipe_resource *src;
   struct pipe_resource *dst = NULL;
   struct pipe_resource dst_templ;
   enum pipe_format dst_format, src_format;
   struct pipe_blit_info blit;
   unsigned bind = PIPE_BIND_TRANSFER_READ;
   struct pipe_transfer *tex_xfer;
   ubyte *map = NULL;
a343 2
   /* Validate state (to be sure we have up-to-date framebuffer surfaces)
    * and flush the bitmap cache prior to reading. */
a344 1
   st_flush_bitmap_cache(st);
d346 4
a349 2
   if (!st->prefer_blit_based_texture_transfer) {
      goto fallback;
d352 1
a352 2
   /* This must be done after state validation. */
   src = strb->texture;
d354 50
a403 93
   /* XXX Fallback for depth-stencil formats due to an incomplete
    * stencil blit implementation in some drivers. */
   if (format == GL_DEPTH_STENCIL) {
      goto fallback;
   }

   /* We are creating a texture of the size of the region being read back.
    * Need to check for NPOT texture support. */
   if (!screen->get_param(screen, PIPE_CAP_NPOT_TEXTURES) &&
       (!util_is_power_of_two(width) ||
        !util_is_power_of_two(height))) {
      goto fallback;
   }

   /* If the base internal format and the texture format don't match, we have
    * to use the slow path. */
   if (rb->_BaseFormat !=
       _mesa_get_format_base_format(rb->Format)) {
      goto fallback;
   }

   /* See if the texture format already matches the format and type,
    * in which case the memcpy-based fast path will likely be used and
    * we don't have to blit. */
   if (_mesa_format_matches_format_and_type(rb->Format, format,
                                            type, pack->SwapBytes)) {
      goto fallback;
   }

   if (_mesa_readpixels_needs_slow_path(ctx, format, type, GL_TRUE)) {
      goto fallback;
   }

   /* Convert the source format to what is expected by ReadPixels
    * and see if it's supported. */
   src_format = util_format_linear(src->format);
   src_format = util_format_luminance_to_red(src_format);
   src_format = util_format_intensity_to_red(src_format);

   if (!src_format ||
       !screen->is_format_supported(screen, src_format, src->target,
                                    src->nr_samples,
                                    PIPE_BIND_SAMPLER_VIEW)) {
      goto fallback;
   }

   if (format == GL_DEPTH_COMPONENT || format == GL_DEPTH_STENCIL)
      bind |= PIPE_BIND_DEPTH_STENCIL;
   else
      bind |= PIPE_BIND_RENDER_TARGET;

   /* Choose the destination format by finding the best match
    * for the format+type combo. */
   dst_format = st_choose_matching_format(screen, bind, format, type,
                                          pack->SwapBytes);
   if (dst_format == PIPE_FORMAT_NONE) {
      goto fallback;
   }

   /* create the destination texture */
   memset(&dst_templ, 0, sizeof(dst_templ));
   dst_templ.target = PIPE_TEXTURE_2D;
   dst_templ.format = dst_format;
   dst_templ.bind = bind;
   dst_templ.usage = PIPE_USAGE_STAGING;

   st_gl_texture_dims_to_pipe_dims(GL_TEXTURE_2D, width, height, 1,
                                   &dst_templ.width0, &dst_templ.height0,
                                   &dst_templ.depth0, &dst_templ.array_size);

   dst = screen->resource_create(screen, &dst_templ);
   if (!dst) {
      goto fallback;
   }

   blit.src.resource = src;
   blit.src.level = strb->rtt_level;
   blit.src.format = src_format;
   blit.dst.resource = dst;
   blit.dst.level = 0;
   blit.dst.format = dst->format;
   blit.src.box.x = x;
   blit.dst.box.x = 0;
   blit.src.box.y = y;
   blit.dst.box.y = 0;
   blit.src.box.z = strb->rtt_face + strb->rtt_slice;
   blit.dst.box.z = 0;
   blit.src.box.width = blit.dst.box.width = width;
   blit.src.box.height = blit.dst.box.height = height;
   blit.src.box.depth = blit.dst.box.depth = 1;
   blit.mask = st_get_blit_mask(rb->_BaseFormat, format);
   blit.filter = PIPE_TEX_FILTER_NEAREST;
   blit.scissor_enable = FALSE;
d406 2
a407 2
      blit.src.box.y = rb->Height - blit.src.box.y;
      blit.src.box.height = -blit.src.box.height;
d410 6
a415 2
   /* blit */
   st->pipe->blit(st->pipe, &blit);
d417 9
a425 2
   /* map resources */
   pixels = _mesa_map_pbo_dest(ctx, pack, pixels);
d427 2
a428 7
   map = pipe_transfer_map_3d(pipe, dst, 0, PIPE_TRANSFER_READ,
                              0, 0, 0, width, height, 1, &tex_xfer);
   if (!map) {
      _mesa_unmap_pbo_dest(ctx, pack);
      pipe_resource_reference(&dst, NULL);
      goto fallback;
   }
d430 3
a432 1
   /* memcpy data into a user buffer */
d434 109
a542 9
      const uint bytesPerRow = width * util_format_get_blocksize(dst_format);
      GLuint row;

      for (row = 0; row < (unsigned) height; row++) {
         GLvoid *dest = _mesa_image_address3d(pack, pixels,
                                              width, height, format,
                                              type, 0, row, 0);
         memcpy(dest, map, bytesPerRow);
         map += tex_xfer->stride;
d546 1
a546 4
   pipe_transfer_unmap(pipe, tex_xfer);
   _mesa_unmap_pbo_dest(ctx, pack);
   pipe_resource_reference(&dst, NULL);
   return;
d548 3
a550 2
fallback:
   _mesa_readpixels(ctx, x, y, width, height, format, type, pack, pixels);
d552 1
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
a167 1
   memset(&blit, 0, sizeof(blit));
d169 1
a169 1
   blit.src.level = strb->surface->u.tex.level;
d178 1
a178 1
   blit.src.box.z = strb->surface->u.tex.first_layer;
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d146 1
a146 1
   dst_format = st_choose_matching_format(st, bind, format, type,
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d146 1
a146 1
   dst_format = st_choose_matching_format(screen, bind, format, type,
@


