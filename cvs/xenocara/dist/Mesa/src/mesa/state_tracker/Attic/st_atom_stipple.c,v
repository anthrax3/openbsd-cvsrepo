head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.20;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.10;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

 /*
  * \brief polygon stipple state
  *
  * Authors:
  *   Brian Paul
  */
 

#include <assert.h>

#include "st_context.h"
#include "st_atom.h"
#include "pipe/p_context.h"
#include "pipe/p_defines.h"


/**
 * OpenGL's polygon stipple is indexed with window coordinates in which
 * the origin (0,0) is the lower-left corner of the window.
 * With Gallium, the origin is the upper-left corner of the window.
 * To convert GL's polygon stipple to what gallium expects we need to
 * invert the pattern vertically and rotate the stipple rows according
 * to the window height.
 */
static void
invert_stipple(GLuint dest[32], const GLuint src[32], GLuint winHeight)
{
   GLuint i;

   for (i = 0; i < 32; i++) {
      dest[i] = src[(winHeight - 1 - i) & 0x1f];
   }
}



static void 
update_stipple( struct st_context *st )
{
   const struct gl_context *ctx = st->ctx;
   const GLuint sz = sizeof(st->state.poly_stipple);
   assert(sz == sizeof(ctx->PolygonStipple));

   if (memcmp(st->state.poly_stipple, ctx->PolygonStipple, sz)) {
      /* state has changed */
      struct pipe_poly_stipple newStipple;

      memcpy(st->state.poly_stipple, ctx->PolygonStipple, sz);

      invert_stipple(newStipple.stipple, ctx->PolygonStipple,
                     ctx->DrawBuffer->Height);

      st->pipe->set_polygon_stipple(st->pipe, &newStipple);
   }
}


/** Update the stipple when the pattern or window height changes */
const struct st_tracked_state st_update_polygon_stipple = {
   "st_update_polygon_stipple",				/* name */
   {							/* dirty */
      (_NEW_POLYGONSTIPPLE |
       _NEW_BUFFERS),					/* mesa */
      0,						/* st */
   },
   update_stipple					/* update */
};
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d67 1
d69 1
a69 1
   assert(sz == sizeof(st->ctx->PolygonStipple));
d71 1
a71 1
   if (memcmp(st->state.poly_stipple, st->ctx->PolygonStipple, sz)) {
d75 1
a75 1
      memcpy(st->state.poly_stipple, st->ctx->PolygonStipple, sz);
d77 2
a78 2
      invert_stipple(newStipple.stipple, st->ctx->PolygonStipple,
                     st->ctx->DrawBuffer->Height);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d36 2
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a35 2
#include <assert.h>

@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a66 1
   const struct gl_context *ctx = st->ctx;
d68 1
a68 1
   assert(sz == sizeof(ctx->PolygonStipple));
d70 1
a70 1
   if (memcmp(st->state.poly_stipple, ctx->PolygonStipple, sz)) {
d74 1
a74 1
      memcpy(st->state.poly_stipple, ctx->PolygonStipple, sz);
d76 2
a77 2
      invert_stipple(newStipple.stipple, ctx->PolygonStipple,
                     ctx->DrawBuffer->Height);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


