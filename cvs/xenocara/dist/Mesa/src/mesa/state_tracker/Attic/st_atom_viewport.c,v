head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.20;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.10;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.13.16;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.50.23;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/


#include "main/context.h"
#include "st_context.h"
#include "st_atom.h"
#include "pipe/p_context.h"
#include "cso_cache/cso_context.h"

/**
 * Update the viewport transformation matrix.  Depends on:
 *  - viewport pos/size
 *  - depthrange
 *  - window pos/size or FBO size
 */
static void
update_viewport( struct st_context *st )
{
   struct gl_context *ctx = st->ctx;
   GLfloat yScale, yBias;
   int i;
   /* _NEW_BUFFERS
    */
   if (st_fb_orientation(ctx->DrawBuffer) == Y_0_TOP) {
      /* Drawing to a window.  The corresponding gallium surface uses
       * Y=0=TOP but OpenGL is Y=0=BOTTOM.  So we need to invert the viewport.
       */
      yScale = -1;
      yBias = (GLfloat)ctx->DrawBuffer->Height;
   }
   else {
      /* Drawing to an FBO where Y=0=BOTTOM, like OpenGL - don't invert */
      yScale = 1.0;
      yBias = 0.0;
   }

   /* _NEW_VIEWPORT 
    */
   for (i = 0; i < ctx->Const.MaxViewports; i++)
   {
      GLfloat x = ctx->ViewportArray[i].X;
      GLfloat y = ctx->ViewportArray[i].Y;
      GLfloat z = ctx->ViewportArray[i].Near;
      GLfloat half_width = ctx->ViewportArray[i].Width * 0.5f;
      GLfloat half_height = ctx->ViewportArray[i].Height * 0.5f;
      GLfloat half_depth = (GLfloat)(ctx->ViewportArray[i].Far - ctx->ViewportArray[i].Near) * 0.5f;
      
      st->state.viewport[i].scale[0] = half_width;
      st->state.viewport[i].scale[1] = half_height * yScale;
      st->state.viewport[i].scale[2] = half_depth;
      st->state.viewport[i].scale[3] = 1.0;

      st->state.viewport[i].translate[0] = half_width + x;
      st->state.viewport[i].translate[1] = (half_height + y) * yScale + yBias;
      st->state.viewport[i].translate[2] = half_depth + z;
      st->state.viewport[i].translate[3] = 0.0;
   }

   cso_set_viewport(st->cso_context, &st->state.viewport[0]);
   if (ctx->Const.MaxViewports > 1)
      st->pipe->set_viewport_states(st->pipe, 1, ctx->Const.MaxViewports - 1, &st->state.viewport[1]);
}


const struct st_tracked_state st_update_viewport = {
   "st_update_viewport",				/* name */
   {							/* dirty */
      _NEW_BUFFERS | _NEW_VIEWPORT,			/* mesa */
      0,						/* st */
   },
   update_viewport					/* update */
};
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a29 1
#include "main/viewport.h"
d66 10
a75 6
      double scale[3], translate[3];
      _mesa_get_viewport_xform(ctx, i, scale, translate);

      st->state.viewport[i].scale[0] = scale[0];
      st->state.viewport[i].scale[1] = scale[1] * yScale;
      st->state.viewport[i].scale[2] = scale[2];
d78 3
a80 3
      st->state.viewport[i].translate[0] = translate[0];
      st->state.viewport[i].translate[1] = translate[1] * yScale + yBias;
      st->state.viewport[i].translate[2] = translate[2];
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d30 1
d67 6
a72 10
      GLfloat x = ctx->ViewportArray[i].X;
      GLfloat y = ctx->ViewportArray[i].Y;
      GLfloat z = ctx->ViewportArray[i].Near;
      GLfloat half_width = ctx->ViewportArray[i].Width * 0.5f;
      GLfloat half_height = ctx->ViewportArray[i].Height * 0.5f;
      GLfloat half_depth = (GLfloat)(ctx->ViewportArray[i].Far - ctx->ViewportArray[i].Near) * 0.5f;
      
      st->state.viewport[i].scale[0] = half_width;
      st->state.viewport[i].scale[1] = half_height * yScale;
      st->state.viewport[i].scale[2] = half_depth;
d75 3
a77 3
      st->state.viewport[i].translate[0] = half_width + x;
      st->state.viewport[i].translate[1] = (half_height + y) * yScale + yBias;
      st->state.viewport[i].translate[2] = half_depth + z;
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d46 1
a46 1

d64 1
d66 6
a71 6
      GLfloat x = (GLfloat)ctx->Viewport.X;
      GLfloat y = (GLfloat)ctx->Viewport.Y;
      GLfloat z = ctx->Viewport.Near;
      GLfloat half_width = (GLfloat)ctx->Viewport.Width * 0.5f;
      GLfloat half_height = (GLfloat)ctx->Viewport.Height * 0.5f;
      GLfloat half_depth = (GLfloat)(ctx->Viewport.Far - ctx->Viewport.Near) * 0.5f;
d73 10
a82 9
      st->state.viewport.scale[0] = half_width;
      st->state.viewport.scale[1] = half_height * yScale;
      st->state.viewport.scale[2] = half_depth;
      st->state.viewport.scale[3] = 1.0;

      st->state.viewport.translate[0] = half_width + x;
      st->state.viewport.translate[1] = (half_height + y) * yScale + yBias;
      st->state.viewport.translate[2] = half_depth + z;
      st->state.viewport.translate[3] = 0.0;
d84 3
a86 2
      cso_set_viewport(st->cso_context, &st->state.viewport);
   }
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d50 3
d57 1
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d44 1
a44 1
   GLcontext *ctx = st->ctx;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d44 1
a44 1
   struct gl_context *ctx = st->ctx;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a49 3
      /* Drawing to a window.  The corresponding gallium surface uses
       * Y=0=TOP but OpenGL is Y=0=BOTTOM.  So we need to invert the viewport.
       */
a53 1
      /* Drawing to an FBO where Y=0=BOTTOM, like OpenGL - don't invert */
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d46 1
a46 1
   int i;
a63 1
   for (i = 0; i < ctx->Const.MaxViewports; i++)
d65 6
a70 6
      GLfloat x = ctx->ViewportArray[i].X;
      GLfloat y = ctx->ViewportArray[i].Y;
      GLfloat z = ctx->ViewportArray[i].Near;
      GLfloat half_width = ctx->ViewportArray[i].Width * 0.5f;
      GLfloat half_height = ctx->ViewportArray[i].Height * 0.5f;
      GLfloat half_depth = (GLfloat)(ctx->ViewportArray[i].Far - ctx->ViewportArray[i].Near) * 0.5f;
d72 11
a82 9
      st->state.viewport[i].scale[0] = half_width;
      st->state.viewport[i].scale[1] = half_height * yScale;
      st->state.viewport[i].scale[2] = half_depth;
      st->state.viewport[i].scale[3] = 1.0;

      st->state.viewport[i].translate[0] = half_width + x;
      st->state.viewport[i].translate[1] = (half_height + y) * yScale + yBias;
      st->state.viewport[i].translate[2] = half_depth + z;
      st->state.viewport[i].translate[3] = 0.0;
a83 4

   cso_set_viewport(st->cso_context, &st->state.viewport[0]);
   if (ctx->Const.MaxViewports > 1)
      st->pipe->set_viewport_states(st->pipe, 1, ctx->Const.MaxViewports - 1, &st->state.viewport[1]);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a29 1
#include "main/viewport.h"
d66 10
a75 6
      double scale[3], translate[3];
      _mesa_get_viewport_xform(ctx, i, scale, translate);

      st->state.viewport[i].scale[0] = scale[0];
      st->state.viewport[i].scale[1] = scale[1] * yScale;
      st->state.viewport[i].scale[2] = scale[2];
d78 3
a80 3
      st->state.viewport[i].translate[0] = translate[0];
      st->state.viewport[i].translate[1] = translate[1] * yScale + yBias;
      st->state.viewport[i].translate[2] = translate[2];
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d30 1
d67 6
a72 10
      GLfloat x = ctx->ViewportArray[i].X;
      GLfloat y = ctx->ViewportArray[i].Y;
      GLfloat z = ctx->ViewportArray[i].Near;
      GLfloat half_width = ctx->ViewportArray[i].Width * 0.5f;
      GLfloat half_height = ctx->ViewportArray[i].Height * 0.5f;
      GLfloat half_depth = (GLfloat)(ctx->ViewportArray[i].Far - ctx->ViewportArray[i].Near) * 0.5f;
      
      st->state.viewport[i].scale[0] = half_width;
      st->state.viewport[i].scale[1] = half_height * yScale;
      st->state.viewport[i].scale[2] = half_depth;
d75 3
a77 3
      st->state.viewport[i].translate[0] = half_width + x;
      st->state.viewport[i].translate[1] = (half_height + y) * yScale + yBias;
      st->state.viewport[i].translate[2] = half_depth + z;
@


