head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.46;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.27;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.11;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.13.24;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.50.30;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */
    

#ifndef ST_PROGRAM_H
#define ST_PROGRAM_H

#include "main/mtypes.h"
#include "program/program.h"
#include "pipe/p_state.h"
#include "st_context.h"
#include "st_glsl_to_tgsi.h"


/** Fragment program variant key */
struct st_fp_variant_key
{
   struct st_context *st;         /**< variants are per-context */

   /** for glBitmap */
   GLuint bitmap:1;               /**< glBitmap variant? */

   /** for glDrawPixels */
   GLuint drawpixels:1;           /**< glDrawPixels variant */
   GLuint scaleAndBias:1;         /**< glDrawPixels w/ scale and/or bias? */
   GLuint pixelMaps:1;            /**< glDrawPixels w/ pixel lookup map? */
   GLuint drawpixels_z:1;         /**< glDrawPixels(GL_DEPTH) */
   GLuint drawpixels_stencil:1;   /**< glDrawPixels(GL_STENCIL) */

   /** for ARB_color_buffer_float */
   GLuint clamp_color:1;
};


/**
 * Variant of a fragment program.
 */
struct st_fp_variant
{
   /** Parameters which generated this version of fragment program */
   struct st_fp_variant_key key;

   struct pipe_shader_state tgsi;

   /** Driver's compiled shader */
   void *driver_shader;

   /** For glBitmap variants */
   struct gl_program_parameter_list *parameters;
   uint bitmap_sampler;

   /** next in linked list */
   struct st_fp_variant *next;
};


/**
 * Derived from Mesa gl_fragment_program:
 */
struct st_fragment_program
{
   struct gl_fragment_program Base;
   struct glsl_to_tgsi_visitor* glsl_to_tgsi;

   struct st_fp_variant *variants;
};



/** Vertex program variant key */
struct st_vp_variant_key
{
   struct st_context *st;          /**< variants are per-context */
   boolean passthrough_edgeflags;

   /** for ARB_color_buffer_float */
   boolean clamp_color;
};


/**
 * This represents a vertex program, especially translated to match
 * the inputs of a particular fragment shader.
 */
struct st_vp_variant
{
   /* Parameters which generated this translated version of a vertex
    * shader:
    */
   struct st_vp_variant_key key;

   /**
    * TGSI tokens (to later generate a 'draw' module shader for
    * selection/feedback/rasterpos)
    */
   struct pipe_shader_state tgsi;

   /** Driver's compiled shader */
   void *driver_shader;

   /** For using our private draw module (glRasterPos) */
   struct draw_vertex_shader *draw_shader;

   /** Next in linked list */
   struct st_vp_variant *next;  

   /** similar to that in st_vertex_program, but with edgeflags info too */
   GLuint num_inputs;
};


/**
 * Derived from Mesa gl_fragment_program:
 */
struct st_vertex_program
{
   struct gl_vertex_program Base;  /**< The Mesa vertex program */
   struct glsl_to_tgsi_visitor* glsl_to_tgsi;

   /** maps a Mesa VERT_ATTRIB_x to a packed TGSI input index */
   GLuint input_to_index[VERT_ATTRIB_MAX];
   /** maps a TGSI input index back to a Mesa VERT_ATTRIB_x */
   GLuint index_to_input[PIPE_MAX_SHADER_INPUTS];
   GLuint num_inputs;

   /** Maps VARYING_SLOT_x to slot */
   GLuint result_to_output[VARYING_SLOT_MAX];
   ubyte output_semantic_name[VARYING_SLOT_MAX];
   ubyte output_semantic_index[VARYING_SLOT_MAX];
   GLuint num_outputs;

   /** List of translated variants of this vertex program.
    */
   struct st_vp_variant *variants;
};



/** Geometry program variant key */
struct st_gp_variant_key
{
   struct st_context *st;          /**< variants are per-context */
   /* no other fields yet */
};


/**
 * Geometry program variant.
 */
struct st_gp_variant
{
   /* Parameters which generated this translated version of a vertex */
   struct st_gp_variant_key key;

   void *driver_shader;

   struct st_gp_variant *next;
};


/**
 * Derived from Mesa gl_geometry_program:
 */
struct st_geometry_program
{
   struct gl_geometry_program Base;  /**< The Mesa geometry program */
   struct glsl_to_tgsi_visitor* glsl_to_tgsi;

   /** map GP input back to VP output */
   GLuint input_map[PIPE_MAX_SHADER_INPUTS];

   /** maps a Mesa VARYING_SLOT_x to a packed TGSI input index */
   GLuint input_to_index[VARYING_SLOT_MAX];
   /** maps a TGSI input index back to a Mesa VARYING_SLOT_x */
   GLuint index_to_input[PIPE_MAX_SHADER_INPUTS];

   GLuint num_inputs;

   GLuint input_to_slot[VARYING_SLOT_MAX];  /**< Maps VARYING_SLOT_x to slot */
   GLuint num_input_slots;

   ubyte input_semantic_name[PIPE_MAX_SHADER_INPUTS];
   ubyte input_semantic_index[PIPE_MAX_SHADER_INPUTS];

   struct pipe_shader_state tgsi;

   struct st_gp_variant *variants;
};



static INLINE struct st_fragment_program *
st_fragment_program( struct gl_fragment_program *fp )
{
   return (struct st_fragment_program *)fp;
}


static INLINE struct st_vertex_program *
st_vertex_program( struct gl_vertex_program *vp )
{
   return (struct st_vertex_program *)vp;
}

static INLINE struct st_geometry_program *
st_geometry_program( struct gl_geometry_program *gp )
{
   return (struct st_geometry_program *)gp;
}

static INLINE void
st_reference_vertprog(struct st_context *st,
                      struct st_vertex_program **ptr,
                      struct st_vertex_program *prog)
{
   _mesa_reference_program(st->ctx,
                           (struct gl_program **) ptr,
                           (struct gl_program *) prog);
}

static INLINE void
st_reference_geomprog(struct st_context *st,
                      struct st_geometry_program **ptr,
                      struct st_geometry_program *prog)
{
   _mesa_reference_program(st->ctx,
                           (struct gl_program **) ptr,
                           (struct gl_program *) prog);
}

static INLINE void
st_reference_fragprog(struct st_context *st,
                      struct st_fragment_program **ptr,
                      struct st_fragment_program *prog)
{
   _mesa_reference_program(st->ctx,
                           (struct gl_program **) ptr,
                           (struct gl_program *) prog);
}


extern struct st_vp_variant *
st_get_vp_variant(struct st_context *st,
                  struct st_vertex_program *stvp,
                  const struct st_vp_variant_key *key);


extern struct st_fp_variant *
st_get_fp_variant(struct st_context *st,
                  struct st_fragment_program *stfp,
                  const struct st_fp_variant_key *key);


extern struct st_gp_variant *
st_get_gp_variant(struct st_context *st,
                  struct st_geometry_program *stgp,
                  const struct st_gp_variant_key *key);


extern void
st_prepare_vertex_program(struct gl_context *ctx,
                          struct st_vertex_program *stvp);

extern GLboolean
st_prepare_fragment_program(struct gl_context *ctx,
                            struct st_fragment_program *stfp);


extern void
st_release_vp_variants( struct st_context *st,
                        struct st_vertex_program *stvp );

extern void
st_release_fp_variants( struct st_context *st,
                        struct st_fragment_program *stfp );

extern void
st_release_gp_variants(struct st_context *st,
                       struct st_geometry_program *stgp);


extern void
st_print_shaders(struct gl_context *ctx);

extern void
st_destroy_program_variants(struct st_context *st);


extern void
st_print_current_vertex_program(void);


#endif
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a60 3

   /** for ARB_sample_shading */
   GLuint persample_shading:1;
a267 25
}

/**
 * This defines mapping from Mesa VARYING_SLOTs to TGSI GENERIC slots.
 */
static INLINE unsigned
st_get_generic_varying_index(struct st_context *st, GLuint attr)
{
   if (attr >= VARYING_SLOT_VAR0) {
      if (st->needs_texcoord_semantic)
         return attr - VARYING_SLOT_VAR0;
      else
         return 9 + (attr - VARYING_SLOT_VAR0);
   }
   if (attr == VARYING_SLOT_PNTC) {
      assert(!st->needs_texcoord_semantic);
      return 8;
   }
   if (attr >= VARYING_SLOT_TEX0 && attr <= VARYING_SLOT_TEX7) {
      assert(!st->needs_texcoord_semantic);
      return attr - VARYING_SLOT_TEX0;
   }

   assert(0);
   return 0;
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d61 3
d271 25
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d41 1
d58 3
d72 2
d92 1
a92 2

   struct pipe_shader_state tgsi;
d104 3
d147 1
d155 4
a158 4
   /** Maps VERT_RESULT_x to slot */
   GLuint result_to_output[VERT_RESULT_MAX];
   ubyte output_semantic_name[VERT_RESULT_MAX];
   ubyte output_semantic_index[VERT_RESULT_MAX];
d196 1
d201 3
a203 3
   /** maps a Mesa GEOM_ATTRIB_x to a packed TGSI input index */
   GLuint input_to_index[GEOM_ATTRIB_MAX];
   /** maps a TGSI input index back to a Mesa GEOM_ATTRIB_x */
d208 1
a208 1
   GLuint input_to_slot[GEOM_ATTRIB_MAX];  /**< Maps GEOM_ATTRIB_x to slot */
d289 8
d316 4
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d43 37
a85 1
   GLuint serialNo;
a87 1
   void *driver_shader;
d89 1
a89 3
   /** Program prefixed with glBitmap prologue */
   struct st_fragment_program *bitmap_program;
   uint bitmap_sampler;
d94 2
a95 1
struct st_vp_varient_key
d97 1
d106 1
a106 1
struct st_vp_varient
d111 1
a111 1
   struct st_vp_varient_key key;
d126 1
a126 1
   struct st_vp_varient *next;  
d128 1
a128 1
   /** similar to that in st_vertex_program, but with information about edgeflags too */
a138 1
   GLuint serialNo, lastSerialNo;
d152 1
a152 1
   /** List of translated varients of this vertex program.
d154 24
a177 1
   struct st_vp_varient *varients;
d180 1
a186 1
   GLuint serialNo;
d205 2
a206 1
   void *driver_shader;
d209 2
d225 1
a225 1
st_geometry_program( struct gl_geometry_program *vp )
d227 1
a227 1
   return (struct st_geometry_program *)vp;
d261 19
d281 2
a282 2
st_translate_fragment_program(struct st_context *st,
                              struct st_fragment_program *fp);
d285 2
a286 2
st_translate_geometry_program(struct st_context *st,
                              struct st_geometry_program *stgp);
a287 3
/* Called after program string change, discard all previous
 * compilation results.
 */
d289 2
a290 2
st_prepare_vertex_program(struct st_context *st,
                          struct st_vertex_program *stvp);
a291 4
extern struct st_vp_varient *
st_translate_vertex_program(struct st_context *st,
                            struct st_vertex_program *stvp,
                            const struct st_vp_varient_key *key);
d293 2
a294 3
void
st_vp_release_varients( struct st_context *st,
                        struct st_vertex_program *stvp );
d297 1
a297 1
st_print_shaders(struct gl_context *ctx);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d38 3
a40 7
#include "shader/program.h"
#include "pipe/p_shader_tokens.h"


struct cso_fragment_shader;
struct cso_vertex_shader;
struct translated_vertex_program;
a97 2


d123 27
d164 5
d181 10
d205 3
d226 1
a226 1
st_print_shaders(GLcontext *ctx);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d38 7
a44 3
#include "program/program.h"
#include "pipe/p_state.h"
#include "st_context.h"
d102 2
a128 27
/**
 * Derived from Mesa gl_geometry_program:
 */
struct st_geometry_program
{
   struct gl_geometry_program Base;  /**< The Mesa geometry program */
   GLuint serialNo;

   /** map GP input back to VP output */
   GLuint input_map[PIPE_MAX_SHADER_INPUTS];

   /** maps a Mesa GEOM_ATTRIB_x to a packed TGSI input index */
   GLuint input_to_index[GEOM_ATTRIB_MAX];
   /** maps a TGSI input index back to a Mesa GEOM_ATTRIB_x */
   GLuint index_to_input[PIPE_MAX_SHADER_INPUTS];

   GLuint num_inputs;

   GLuint input_to_slot[GEOM_ATTRIB_MAX];  /**< Maps GEOM_ATTRIB_x to slot */
   GLuint num_input_slots;

   ubyte input_semantic_name[PIPE_MAX_SHADER_INPUTS];
   ubyte input_semantic_index[PIPE_MAX_SHADER_INPUTS];

   struct pipe_shader_state tgsi;
   void *driver_shader;
};
a142 5
static INLINE struct st_geometry_program *
st_geometry_program( struct gl_geometry_program *vp )
{
   return (struct st_geometry_program *)vp;
}
a154 10
st_reference_geomprog(struct st_context *st,
                      struct st_geometry_program **ptr,
                      struct st_geometry_program *prog)
{
   _mesa_reference_program(st->ctx,
                           (struct gl_program **) ptr,
                           (struct gl_program *) prog);
}

static INLINE void
a168 3
extern void
st_translate_geometry_program(struct st_context *st,
                              struct st_geometry_program *stgp);
d187 1
a187 1
st_print_shaders(struct gl_context *ctx);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a40 21
#include "st_glsl_to_tgsi.h"


/** Fragment program variant key */
struct st_fp_variant_key
{
   struct st_context *st;         /**< variants are per-context */

   /** for glBitmap */
   GLuint bitmap:1;               /**< glBitmap variant? */

   /** for glDrawPixels */
   GLuint drawpixels:1;           /**< glDrawPixels variant */
   GLuint scaleAndBias:1;         /**< glDrawPixels w/ scale and/or bias? */
   GLuint pixelMaps:1;            /**< glDrawPixels w/ pixel lookup map? */
   GLuint drawpixels_z:1;         /**< glDrawPixels(GL_DEPTH) */
   GLuint drawpixels_stencil:1;   /**< glDrawPixels(GL_STENCIL) */

   /** for ARB_color_buffer_float */
   GLuint clamp_color:1;
};
d44 1
a44 1
 * Variant of a fragment program.
d46 1
a46 1
struct st_fp_variant
d48 2
a49 2
   /** Parameters which generated this version of fragment program */
   struct st_fp_variant_key key;
a51 2

   /** Driver's compiled shader */
d54 2
a55 2
   /** For glBitmap variants */
   struct gl_program_parameter_list *parameters;
a56 3

   /** next in linked list */
   struct st_fp_variant *next;
a59 11
/**
 * Derived from Mesa gl_fragment_program:
 */
struct st_fragment_program
{
   struct gl_fragment_program Base;
   struct glsl_to_tgsi_visitor* glsl_to_tgsi;

   struct st_fp_variant *variants;
};

d61 1
a61 3

/** Vertex program variant key */
struct st_vp_variant_key
a62 1
   struct st_context *st;          /**< variants are per-context */
a63 3

   /** for ARB_color_buffer_float */
   boolean clamp_color;
d71 1
a71 1
struct st_vp_variant
d76 1
a76 1
   struct st_vp_variant_key key;
d91 1
a91 1
   struct st_vp_variant *next;  
d93 1
a93 1
   /** similar to that in st_vertex_program, but with edgeflags info too */
d104 1
a104 1
   struct glsl_to_tgsi_visitor* glsl_to_tgsi;
d112 4
a115 4
   /** Maps VARYING_SLOT_x to slot */
   GLuint result_to_output[VARYING_SLOT_MAX];
   ubyte output_semantic_name[VARYING_SLOT_MAX];
   ubyte output_semantic_index[VARYING_SLOT_MAX];
d118 1
a118 1
   /** List of translated variants of this vertex program.
d120 1
a120 10
   struct st_vp_variant *variants;
};



/** Geometry program variant key */
struct st_gp_variant_key
{
   struct st_context *st;          /**< variants are per-context */
   /* no other fields yet */
a122 15

/**
 * Geometry program variant.
 */
struct st_gp_variant
{
   /* Parameters which generated this translated version of a vertex */
   struct st_gp_variant_key key;

   void *driver_shader;

   struct st_gp_variant *next;
};


d129 1
a129 1
   struct glsl_to_tgsi_visitor* glsl_to_tgsi;
d134 3
a136 3
   /** maps a Mesa VARYING_SLOT_x to a packed TGSI input index */
   GLuint input_to_index[VARYING_SLOT_MAX];
   /** maps a TGSI input index back to a Mesa VARYING_SLOT_x */
d141 1
a141 1
   GLuint input_to_slot[VARYING_SLOT_MAX];  /**< Maps VARYING_SLOT_x to slot */
d148 1
a148 2

   struct st_gp_variant *variants;
a150 2


d165 1
a165 1
st_geometry_program( struct gl_geometry_program *gp )
d167 1
a167 1
   return (struct st_geometry_program *)gp;
d201 3
a203 16
extern struct st_vp_variant *
st_get_vp_variant(struct st_context *st,
                  struct st_vertex_program *stvp,
                  const struct st_vp_variant_key *key);


extern struct st_fp_variant *
st_get_fp_variant(struct st_context *st,
                  struct st_fragment_program *stfp,
                  const struct st_fp_variant_key *key);


extern struct st_gp_variant *
st_get_gp_variant(struct st_context *st,
                  struct st_geometry_program *stgp,
                  const struct st_gp_variant_key *key);
d205 3
d209 3
d213 1
a213 1
st_prepare_vertex_program(struct gl_context *ctx,
d216 4
a219 3
extern GLboolean
st_prepare_fragment_program(struct gl_context *ctx,
                            struct st_fragment_program *stfp);
d221 2
a222 3

extern void
st_release_vp_variants( struct st_context *st,
a225 9
st_release_fp_variants( struct st_context *st,
                        struct st_fragment_program *stfp );

extern void
st_release_gp_variants(struct st_context *st,
                       struct st_geometry_program *stgp);


extern void
a226 7

extern void
st_destroy_program_variants(struct st_context *st);


extern void
st_print_current_vertex_program(void);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keithw@@vmware.com>
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a60 3

   /** for ARB_sample_shading */
   GLuint persample_shading:1;
a267 25
}

/**
 * This defines mapping from Mesa VARYING_SLOTs to TGSI GENERIC slots.
 */
static INLINE unsigned
st_get_generic_varying_index(struct st_context *st, GLuint attr)
{
   if (attr >= VARYING_SLOT_VAR0) {
      if (st->needs_texcoord_semantic)
         return attr - VARYING_SLOT_VAR0;
      else
         return 9 + (attr - VARYING_SLOT_VAR0);
   }
   if (attr == VARYING_SLOT_PNTC) {
      assert(!st->needs_texcoord_semantic);
      return 8;
   }
   if (attr >= VARYING_SLOT_TEX0 && attr <= VARYING_SLOT_TEX7) {
      assert(!st->needs_texcoord_semantic);
      return attr - VARYING_SLOT_TEX0;
   }

   assert(0);
   return 0;
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d61 3
d271 25
@


