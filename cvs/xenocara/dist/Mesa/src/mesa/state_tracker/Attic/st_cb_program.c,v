head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.44;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.22;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.10;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.13.18;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.50.24;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */

#include "main/glheader.h"
#include "main/macros.h"
#include "main/enums.h"
#include "main/shaderapi.h"
#include "program/prog_instruction.h"
#include "program/program.h"

#include "cso_cache/cso_context.h"
#include "draw/draw_context.h"

#include "st_context.h"
#include "st_program.h"
#include "st_mesa_to_tgsi.h"
#include "st_cb_program.h"
#include "st_glsl_to_tgsi.h"



/**
 * Called via ctx->Driver.BindProgram() to bind an ARB vertex or
 * fragment program.
 */
static void
st_bind_program(struct gl_context *ctx, GLenum target, struct gl_program *prog)
{
   struct st_context *st = st_context(ctx);

   switch (target) {
   case GL_VERTEX_PROGRAM_ARB: 
      st->dirty.st |= ST_NEW_VERTEX_PROGRAM;
      break;
   case GL_FRAGMENT_PROGRAM_ARB:
      st->dirty.st |= ST_NEW_FRAGMENT_PROGRAM;
      break;
   case MESA_GEOMETRY_PROGRAM:
      st->dirty.st |= ST_NEW_GEOMETRY_PROGRAM;
      break;
   }
}


/**
 * Called via ctx->Driver.UseProgram() to bind a linked GLSL program
 * (vertex shader + fragment shader).
 */
static void
st_use_program(struct gl_context *ctx, struct gl_shader_program *shProg)
{
   struct st_context *st = st_context(ctx);

   st->dirty.st |= ST_NEW_FRAGMENT_PROGRAM;
   st->dirty.st |= ST_NEW_VERTEX_PROGRAM;
   st->dirty.st |= ST_NEW_GEOMETRY_PROGRAM;
}


/**
 * Called via ctx->Driver.NewProgram() to allocate a new vertex or
 * fragment program.
 */
static struct gl_program *
st_new_program(struct gl_context *ctx, GLenum target, GLuint id)
{
   switch (target) {
   case GL_VERTEX_PROGRAM_ARB: {
      struct st_vertex_program *prog = ST_CALLOC_STRUCT(st_vertex_program);
      return _mesa_init_vertex_program(ctx, &prog->Base, target, id);
   }

   case GL_FRAGMENT_PROGRAM_ARB: {
      struct st_fragment_program *prog = ST_CALLOC_STRUCT(st_fragment_program);
      return _mesa_init_fragment_program(ctx, &prog->Base, target, id);
   }

   case MESA_GEOMETRY_PROGRAM: {
      struct st_geometry_program *prog = ST_CALLOC_STRUCT(st_geometry_program);
      return _mesa_init_geometry_program(ctx, &prog->Base, target, id);
   }

   default:
      assert(0);
      return NULL;
   }
}


/**
 * Called via ctx->Driver.DeleteProgram()
 */
static void
st_delete_program(struct gl_context *ctx, struct gl_program *prog)
{
   struct st_context *st = st_context(ctx);

   switch( prog->Target ) {
   case GL_VERTEX_PROGRAM_ARB:
      {
         struct st_vertex_program *stvp = (struct st_vertex_program *) prog;
         st_release_vp_variants( st, stvp );
         
         if (stvp->glsl_to_tgsi)
            free_glsl_to_tgsi_visitor(stvp->glsl_to_tgsi);
      }
      break;
   case MESA_GEOMETRY_PROGRAM:
      {
         struct st_geometry_program *stgp =
            (struct st_geometry_program *) prog;

         st_release_gp_variants(st, stgp);
         
         if (stgp->glsl_to_tgsi)
            free_glsl_to_tgsi_visitor(stgp->glsl_to_tgsi);

         if (stgp->tgsi.tokens) {
            st_free_tokens((void *) stgp->tgsi.tokens);
            stgp->tgsi.tokens = NULL;
         }
      }
      break;
   case GL_FRAGMENT_PROGRAM_ARB:
      {
         struct st_fragment_program *stfp =
            (struct st_fragment_program *) prog;

         st_release_fp_variants(st, stfp);
         
         if (stfp->glsl_to_tgsi)
            free_glsl_to_tgsi_visitor(stfp->glsl_to_tgsi);
      }
      break;
   default:
      assert(0); /* problem */
   }

   /* delete base class */
   _mesa_delete_program( ctx, prog );
}


/**
 * Called via ctx->Driver.IsProgramNative()
 */
static GLboolean
st_is_program_native(struct gl_context *ctx,
                     GLenum target, 
                     struct gl_program *prog)
{
   return GL_TRUE;
}


/**
 * Called via ctx->Driver.ProgramStringNotify()
 * Called when the program's text/code is changed.  We have to free
 * all shader variants and corresponding gallium shaders when this happens.
 */
static GLboolean
st_program_string_notify( struct gl_context *ctx,
                                           GLenum target,
                                           struct gl_program *prog )
{
   struct st_context *st = st_context(ctx);

   if (target == GL_FRAGMENT_PROGRAM_ARB) {
      struct st_fragment_program *stfp = (struct st_fragment_program *) prog;

      st_release_fp_variants(st, stfp);

      if (st->fp == stfp)
	 st->dirty.st |= ST_NEW_FRAGMENT_PROGRAM;
   }
   else if (target == MESA_GEOMETRY_PROGRAM) {
      struct st_geometry_program *stgp = (struct st_geometry_program *) prog;

      st_release_gp_variants(st, stgp);

      if (stgp->tgsi.tokens) {
         st_free_tokens((void *) stgp->tgsi.tokens);
         stgp->tgsi.tokens = NULL;
      }

      if (st->gp == stgp)
	 st->dirty.st |= ST_NEW_GEOMETRY_PROGRAM;
   }
   else if (target == GL_VERTEX_PROGRAM_ARB) {
      struct st_vertex_program *stvp = (struct st_vertex_program *) prog;

      st_release_vp_variants( st, stvp );

      if (st->vp == stvp)
	 st->dirty.st |= ST_NEW_VERTEX_PROGRAM;
   }

   /* XXX check if program is legal, within limits */
   return GL_TRUE;
}


/**
 * Plug in the program and shader-related device driver functions.
 */
void
st_init_program_functions(struct dd_function_table *functions)
{
   functions->BindProgram = st_bind_program;
   functions->UseProgram = st_use_program;
   functions->NewProgram = st_new_program;
   functions->DeleteProgram = st_delete_program;
   functions->IsProgramNative = st_is_program_native;
   functions->ProgramStringNotify = st_program_string_notify;
   
   functions->NewShader = st_new_shader;
   functions->NewShaderProgram = st_new_shader_program;
   functions->LinkShader = st_link_shader;
}
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d245 2
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@a244 2
   functions->NewShader = st_new_shader;
   functions->NewShaderProgram = st_new_shader_program;
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d47 1
d102 1
a102 2
   case GL_FRAGMENT_PROGRAM_ARB:
   case GL_FRAGMENT_PROGRAM_NV: {
d132 3
d143 3
d160 2
a161 4
         if (stfp->tgsi.tokens) {
            st_free_tokens(stfp->tgsi.tokens);
            stfp->tgsi.tokens = NULL;
         }
a201 5
      if (stfp->tgsi.tokens) {
         st_free_tokens(stfp->tgsi.tokens);
         stfp->tgsi.tokens = NULL;
      }

d244 4
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a48 2
static GLuint SerialNo = 1;

d54 2
a55 3
static void st_bind_program( struct gl_context *ctx,
			     GLenum target, 
			     struct gl_program *prog )
d77 2
a78 1
static void st_use_program( struct gl_context *ctx, struct gl_shader_program *shProg)
a87 1

d92 2
a93 3
static struct gl_program *st_new_program( struct gl_context *ctx,
					  GLenum target,
					  GLuint id )
d98 1
a98 7

      prog->serialNo = SerialNo++;

      return _mesa_init_vertex_program( ctx, 
					&prog->Base,
					target, 
					id );
d104 1
a104 7

      prog->serialNo = SerialNo++;

      return _mesa_init_fragment_program( ctx, 
					  &prog->Base,
					  target, 
					  id );
d109 1
a109 7

      prog->serialNo = SerialNo++;

      return _mesa_init_geometry_program( ctx,
                                          &prog->Base,
                                          target,
                                          id );
d119 4
a122 1
void
d131 1
a131 1
         st_vp_release_varients( st, stvp );
d136 2
a137 1
         struct st_geometry_program *stgp = (struct st_geometry_program *) prog;
d139 1
a139 4
         if (stgp->driver_shader) {
            cso_delete_geometry_shader(st->cso_context, stgp->driver_shader);
            stgp->driver_shader = NULL;
         }
d149 2
a150 1
         struct st_fragment_program *stfp = (struct st_fragment_program *) prog;
d152 1
a152 4
         if (stfp->driver_shader) {
            cso_delete_fragment_shader(st->cso_context, stfp->driver_shader);
            stfp->driver_shader = NULL;
         }
a157 6

         if (stfp->bitmap_program) {
            struct gl_program *prg = &stfp->bitmap_program->Base.Base;
            _mesa_reference_program(ctx, &prg, NULL);
            stfp->bitmap_program = NULL;
         }
d169 7
a175 3
static GLboolean st_is_program_native( struct gl_context *ctx,
				       GLenum target, 
				       struct gl_program *prog )
d181 7
a187 1
static GLboolean st_program_string_notify( struct gl_context *ctx,
d196 1
a196 6
      stfp->serialNo++;

      if (stfp->driver_shader) {
         cso_delete_fragment_shader(st->cso_context, stfp->driver_shader);
         stfp->driver_shader = NULL;
      }
d209 1
a209 6
      stgp->serialNo++;

      if (stgp->driver_shader) {
         cso_delete_geometry_shader(st->cso_context, stgp->driver_shader);
         stgp->driver_shader = NULL;
      }
d222 1
a222 3
      stvp->serialNo++;

      st_vp_release_varients( st, stvp );
d233 5
a237 2

void st_init_program_functions(struct dd_function_table *functions)
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d36 3
a38 4
#include "shader/prog_instruction.h"
#include "shader/prog_parameter.h"
#include "shader/program.h"
#include "shader/shader_api.h"
d56 1
a56 1
static void st_bind_program( GLcontext *ctx,
d69 3
d80 1
a80 2
static void st_use_program( GLcontext *ctx,
			    GLuint program )
d86 1
a86 2

   _mesa_use_program(ctx, program);
d95 1
a95 1
static struct gl_program *st_new_program( GLcontext *ctx,
d123 11
d142 1
a142 1
st_delete_program(GLcontext *ctx, struct gl_program *prog)
d153 15
d198 1
a198 1
static GLboolean st_is_program_native( GLcontext *ctx,
d206 1
a206 1
static GLboolean st_program_string_notify( GLcontext *ctx,
d229 18
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d36 4
a39 3
#include "main/shaderapi.h"
#include "program/prog_instruction.h"
#include "program/program.h"
d57 1
a57 1
static void st_bind_program( struct gl_context *ctx,
a69 3
   case MESA_GEOMETRY_PROGRAM:
      st->dirty.st |= ST_NEW_GEOMETRY_PROGRAM;
      break;
d78 2
a79 1
static void st_use_program( struct gl_context *ctx, struct gl_shader_program *shProg)
d85 2
a86 1
   st->dirty.st |= ST_NEW_GEOMETRY_PROGRAM;
d95 1
a95 1
static struct gl_program *st_new_program( struct gl_context *ctx,
a122 11
   case MESA_GEOMETRY_PROGRAM: {
      struct st_geometry_program *prog = ST_CALLOC_STRUCT(st_geometry_program);

      prog->serialNo = SerialNo++;

      return _mesa_init_geometry_program( ctx,
                                          &prog->Base,
                                          target,
                                          id );
   }

d131 1
a131 1
st_delete_program(struct gl_context *ctx, struct gl_program *prog)
a141 15
   case MESA_GEOMETRY_PROGRAM:
      {
         struct st_geometry_program *stgp = (struct st_geometry_program *) prog;

         if (stgp->driver_shader) {
            cso_delete_geometry_shader(st->cso_context, stgp->driver_shader);
            stgp->driver_shader = NULL;
         }

         if (stgp->tgsi.tokens) {
            st_free_tokens((void *) stgp->tgsi.tokens);
            stgp->tgsi.tokens = NULL;
         }
      }
      break;
d172 1
a172 1
static GLboolean st_is_program_native( struct gl_context *ctx,
d180 1
a180 1
static GLboolean st_program_string_notify( struct gl_context *ctx,
a202 18
   }
   else if (target == MESA_GEOMETRY_PROGRAM) {
      struct st_geometry_program *stgp = (struct st_geometry_program *) prog;

      stgp->serialNo++;

      if (stgp->driver_shader) {
         cso_delete_geometry_shader(st->cso_context, stgp->driver_shader);
         stgp->driver_shader = NULL;
      }

      if (stgp->tgsi.tokens) {
         st_free_tokens((void *) stgp->tgsi.tokens);
         stgp->tgsi.tokens = NULL;
      }

      if (st->gp == stgp)
	 st->dirty.st |= ST_NEW_GEOMETRY_PROGRAM;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a46 1
#include "st_glsl_to_tgsi.h"
d49 2
d56 3
a58 2
static void
st_bind_program(struct gl_context *ctx, GLenum target, struct gl_program *prog)
d80 1
a80 2
static void
st_use_program(struct gl_context *ctx, struct gl_shader_program *shProg)
d90 1
d95 3
a97 2
static struct gl_program *
st_new_program(struct gl_context *ctx, GLenum target, GLuint id)
d102 7
a108 1
      return _mesa_init_vertex_program(ctx, &prog->Base, target, id);
d111 2
a112 1
   case GL_FRAGMENT_PROGRAM_ARB: {
d114 7
a120 1
      return _mesa_init_fragment_program(ctx, &prog->Base, target, id);
d125 7
a131 1
      return _mesa_init_geometry_program(ctx, &prog->Base, target, id);
d141 1
a141 4
/**
 * Called via ctx->Driver.DeleteProgram()
 */
static void
d150 1
a150 4
         st_release_vp_variants( st, stvp );
         
         if (stvp->glsl_to_tgsi)
            free_glsl_to_tgsi_visitor(stvp->glsl_to_tgsi);
d155 1
a155 2
         struct st_geometry_program *stgp =
            (struct st_geometry_program *) prog;
d157 4
a160 4
         st_release_gp_variants(st, stgp);
         
         if (stgp->glsl_to_tgsi)
            free_glsl_to_tgsi_visitor(stgp->glsl_to_tgsi);
d170 1
a170 2
         struct st_fragment_program *stfp =
            (struct st_fragment_program *) prog;
d172 4
a175 1
         st_release_fp_variants(st, stfp);
d177 10
a186 2
         if (stfp->glsl_to_tgsi)
            free_glsl_to_tgsi_visitor(stfp->glsl_to_tgsi);
d198 3
a200 7
/**
 * Called via ctx->Driver.IsProgramNative()
 */
static GLboolean
st_is_program_native(struct gl_context *ctx,
                     GLenum target, 
                     struct gl_program *prog)
d206 1
a206 7
/**
 * Called via ctx->Driver.ProgramStringNotify()
 * Called when the program's text/code is changed.  We have to free
 * all shader variants and corresponding gallium shaders when this happens.
 */
static GLboolean
st_program_string_notify( struct gl_context *ctx,
d215 11
a225 1
      st_release_fp_variants(st, stfp);
d233 6
a238 1
      st_release_gp_variants(st, stgp);
d251 3
a253 1
      st_release_vp_variants( st, stvp );
d264 2
a265 5
/**
 * Plug in the program and shader-related device driver functions.
 */
void
st_init_program_functions(struct dd_function_table *functions)
a272 4
   
   functions->NewShader = st_new_shader;
   functions->NewShaderProgram = st_new_shader_program;
   functions->LinkShader = st_link_shader;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keithw@@vmware.com>
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d245 2
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@a244 2
   functions->NewShader = st_new_shader;
   functions->NewShaderProgram = st_new_shader_program;
@


