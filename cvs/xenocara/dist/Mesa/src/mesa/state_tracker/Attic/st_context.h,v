head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.45;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.23;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.11;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.13.20;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.50.26;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#ifndef ST_CONTEXT_H
#define ST_CONTEXT_H

#include "main/mtypes.h"
#include "pipe/p_state.h"
#include "state_tracker/st_api.h"
#include "main/fbobject.h"

struct bitmap_cache;
struct dd_function_table;
struct draw_context;
struct draw_stage;
struct gen_mipmap_state;
struct st_context;
struct st_fragment_program;
struct u_upload_mgr;


#define ST_NEW_MESA                    (1 << 0) /* Mesa state has changed */
#define ST_NEW_FRAGMENT_PROGRAM        (1 << 1)
#define ST_NEW_VERTEX_PROGRAM          (1 << 2)
#define ST_NEW_FRAMEBUFFER             (1 << 3)
/* gap, re-use it */
#define ST_NEW_GEOMETRY_PROGRAM        (1 << 5)
#define ST_NEW_VERTEX_ARRAYS           (1 << 6)
#define ST_NEW_RASTERIZER              (1 << 7)
#define ST_NEW_UNIFORM_BUFFER          (1 << 8)


struct st_state_flags {
   GLuint mesa;
   GLuint st;
};

struct st_tracked_state {
   const char *name;
   struct st_state_flags dirty;
   void (*update)( struct st_context *st );
};



struct st_context
{
   struct st_context_iface iface;

   struct gl_context *ctx;

   struct pipe_context *pipe;

   struct u_upload_mgr *uploader, *indexbuf_uploader, *constbuf_uploader;

   struct draw_context *draw;  /**< For selection/feedback/rastpos only */
   struct draw_stage *feedback_stage;  /**< For GL_FEEDBACK rendermode */
   struct draw_stage *selection_stage;  /**< For GL_SELECT rendermode */
   struct draw_stage *rastpos_stage;  /**< For glRasterPos */
   GLboolean clamp_frag_color_in_shader;
   GLboolean clamp_vert_color_in_shader;
   boolean has_stencil_export; /**< can do shader stencil export? */
   boolean has_time_elapsed;
   boolean has_shader_model3;
   boolean prefer_blit_based_texture_transfer;

   boolean needs_texcoord_semantic;
   boolean apply_texture_swizzle_to_border_color;

   /* On old libGL's for linux we need to invalidate the drawables
    * on glViewpport calls, this is set via a option.
    */
   boolean invalidate_on_gl_viewport;

   boolean vertex_array_out_of_memory;

   /* Some state is contained in constant objects.
    * Other state is just parameter values.
    */
   struct {
      struct pipe_blend_state               blend;
      struct pipe_depth_stencil_alpha_state depth_stencil;
      struct pipe_rasterizer_state          rasterizer;
      struct pipe_sampler_state samplers[PIPE_SHADER_TYPES][PIPE_MAX_SAMPLERS];
      GLuint num_samplers[PIPE_SHADER_TYPES];
      struct pipe_sampler_view *sampler_views[PIPE_SHADER_TYPES][PIPE_MAX_SAMPLERS];
      GLuint num_sampler_views[PIPE_SHADER_TYPES];
      struct pipe_clip_state clip;
      struct {
         void *ptr;
         unsigned size;
      } constants[PIPE_SHADER_TYPES];
      struct pipe_framebuffer_state framebuffer;
      struct pipe_scissor_state scissor[PIPE_MAX_VIEWPORTS];
      struct pipe_viewport_state viewport[PIPE_MAX_VIEWPORTS];
      unsigned sample_mask;

      GLuint poly_stipple[32];  /**< In OpenGL's bottom-to-top order */

      GLuint fb_orientation;
   } state;

   char vendor[100];
   char renderer[100];

   struct st_state_flags dirty;

   GLboolean missing_textures;
   GLboolean vertdata_edgeflags;
   GLboolean edgeflag_culls_prims;

   /** Mapping from VARYING_SLOT_x to post-transformed vertex slot */
   const GLuint *vertex_result_to_slot;

   struct st_vertex_program *vp;    /**< Currently bound vertex program */
   struct st_fragment_program *fp;  /**< Currently bound fragment program */
   struct st_geometry_program *gp;  /**< Currently bound geometry program */

   struct st_vp_variant *vp_variant;
   struct st_fp_variant *fp_variant;
   struct st_gp_variant *gp_variant;

   struct gl_texture_object *default_texture;

   struct {
      struct gl_program_cache *cache;
      struct st_fragment_program *program;  /**< cur pixel transfer prog */
      GLuint xfer_prog_sn;  /**< pixel xfer program serial no. */
      GLuint user_prog_sn;  /**< user fragment program serial no. */
      struct st_fragment_program *combined_prog;
      GLuint combined_prog_sn;
      struct pipe_resource *pixelmap_texture;
      struct pipe_sampler_view *pixelmap_sampler_view;
      boolean pixelmap_enabled;  /**< use the pixelmap texture? */
   } pixel_xfer;

   /** for glBitmap */
   struct {
      struct pipe_rasterizer_state rasterizer;
      struct pipe_sampler_state samplers[2];
      enum pipe_format tex_format;
      void *vs;
      struct bitmap_cache *cache;
   } bitmap;

   /** for glDraw/CopyPixels */
   struct {
      struct gl_fragment_program *shaders[4];
      void *vert_shaders[2];   /**< ureg shaders */
   } drawpix;

   /** for glClear */
   struct {
      struct pipe_rasterizer_state raster;
      struct pipe_viewport_state viewport;
      void *vs;
      void *fs;
      void *vs_layered;
   } clear;

   /** used for anything using util_draw_vertex_buffer */
   struct pipe_vertex_element velems_util_draw[3];

   void *passthrough_fs;  /**< simple pass-through frag shader */

   enum pipe_texture_target internal_target;

   struct cso_context *cso_context;

   void *winsys_drawable_handle;

   /* The number of vertex buffers from the last call of validate_arrays. */
   unsigned last_num_vbuffers;

   int32_t draw_stamp;
   int32_t read_stamp;

   struct st_config_options options;
};


/* Need this so that we can implement Mesa callbacks in this module.
 */
static INLINE struct st_context *st_context(struct gl_context *ctx)
{
   return ctx->st;
}


/**
 * Wrapper for struct gl_framebuffer.
 * This is an opaque type to the outside world.
 */
struct st_framebuffer
{
   struct gl_framebuffer Base;
   void *Private;

   struct st_framebuffer_iface *iface;
   enum st_attachment_type statts[ST_ATTACHMENT_COUNT];
   unsigned num_statts;
   int32_t stamp;
   int32_t iface_stamp;
};


extern void st_init_driver_functions(struct dd_function_table *functions);

void st_invalidate_state(struct gl_context * ctx, GLuint new_state);



#define Y_0_TOP 1
#define Y_0_BOTTOM 2

static INLINE GLuint
st_fb_orientation(const struct gl_framebuffer *fb)
{
   if (fb && _mesa_is_winsys_fbo(fb)) {
      /* Drawing into a window (on-screen buffer).
       *
       * Negate Y scale to flip image vertically.
       * The NDC Y coords prior to viewport transformation are in the range
       * [y=-1=bottom, y=1=top]
       * Hardware window coords are in the range [y=0=top, y=H-1=bottom] where
       * H is the window height.
       * Use the viewport transformation to invert Y.
       */
      return Y_0_TOP;
   }
   else {
      /* Drawing into user-created FBO (very likely a texture).
       *
       * For textures, T=0=Bottom, so by extension Y=0=Bottom for rendering.
       */
      return Y_0_BOTTOM;
   }
}


/** clear-alloc a struct-sized object, with casting */
#define ST_CALLOC_STRUCT(T)   (struct T *) calloc(1, sizeof(struct T))


extern struct st_context *
st_create_context(gl_api api, struct pipe_context *pipe,
                  const struct gl_config *visual,
                  struct st_context *share,
                  const struct st_config_options *options);

extern void
st_destroy_context(struct st_context *st);


#endif
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d59 1
a59 1
   uint64_t st;
a88 1
   boolean has_etc1;
a182 1
      void *gs_layered;
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d59 1
a59 1
   GLuint st;
d89 1
d184 1
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d50 1
a50 1
#define ST_NEW_EDGEFLAGS_DATA          (1 << 4)
d118 2
a119 2
      struct pipe_scissor_state scissor;
      struct pipe_viewport_state viewport;
d134 1
d182 1
a190 1
   struct gen_mipmap_state *gen_mipmap;
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d34 1
a36 1
struct blit_state;
d43 1
d46 9
a54 6
#define ST_NEW_MESA                    0x1 /* Mesa state has changed */
#define ST_NEW_FRAGMENT_PROGRAM        0x2
#define ST_NEW_VERTEX_PROGRAM          0x4
#define ST_NEW_FRAMEBUFFER             0x8
#define ST_NEW_EDGEFLAGS_DATA          0x10
#define ST_NEW_GEOMETRY_PROGRAM        0x20
d78 2
d84 6
d91 2
d99 2
d108 4
a111 2
      struct pipe_sampler_state             samplers[PIPE_MAX_SAMPLERS];
      struct pipe_sampler_state             vertex_samplers[PIPE_MAX_VERTEX_SAMPLERS];
a117 2
      struct pipe_sampler_view *sampler_views[PIPE_MAX_SAMPLERS];
      struct pipe_sampler_view *sampler_vertex_views[PIPE_MAX_VERTEX_SAMPLERS];
d122 1
a122 4
      GLuint num_samplers;
      GLuint num_vertex_samplers;
      GLuint num_textures;
      GLuint num_vertex_textures;
d124 1
a124 1
      GLuint poly_stipple[32];  /**< In OpenGL's bottom-to-top order */
d135 1
a135 1
   /** Mapping from VERT_RESULT_x to post-transformed vertex slot */
a165 3
      float vertices[4][3][4];  /**< vertex pos + color + texcoord */
      struct pipe_resource *vbuf;
      unsigned vbuf_slot;       /* next free slot in vbuf */
a178 1
      struct pipe_clip_state clip;
a180 4
      float vertices[4][2][4];  /**< vertex pos + color */
      struct pipe_resource *vbuf;
      unsigned vbuf_slot;
      boolean enable_ds_separate;
a189 1
   struct blit_state *blit;
a192 1
   int force_msaa;
d195 2
a196 3
   /* User vertex buffers. */
   struct {
      struct pipe_resource *buffer;
d198 2
a199 2
      /** Element size */
      GLuint element_size;
d201 1
a201 8
      /** Attribute stride */
      GLsizei stride;
   } user_attrib[PIPE_MAX_ATTRIBS];
   unsigned num_user_attribs;

   /* Active render condition. */
   struct pipe_query *render_condition;
   unsigned condition_mode;
d225 2
a226 1
   int32_t revalidate;
d242 1
a242 1
   if (fb && fb->Name == 0) {
a267 3
extern int
st_get_msaa(void);

d271 2
a272 1
                  struct st_context *share);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a0 1
//struct dd_function_table;
d93 1
a93 1
      struct pipe_sampler_state             *sampler_list[PIPE_MAX_SAMPLERS];
d95 4
a98 1
      struct pipe_resource *constants[PIPE_SHADER_TYPES];
d101 1
d107 1
d109 1
a113 9
   struct {
      struct st_tracked_state tracked_state[PIPE_SHADER_TYPES];
   } constants;

   /* XXX unused: */
   struct {
      struct gl_fragment_program *fragment_program;
   } cb;

d129 3
a131 1
   struct st_vp_varient *vp_varient;
d161 1
a161 1
      struct st_fragment_program *shaders[4];
d191 12
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d1 1
a32 1
#include "shader/prog_cache.h"
d34 1
d36 3
a38 4

struct st_context;
struct st_texture_object;
struct st_fragment_program;
a40 2
struct cso_cache;
struct cso_blend;
d42 2
a43 8
struct blit_state;
struct bitmap_cache;


/** XXX we'd like to get rid of these */
#define FRONT_STATUS_UNDEFINED    0
#define FRONT_STATUS_DIRTY        1
#define FRONT_STATUS_COPY_OF_BACK 2
d51 1
d69 3
a71 1
   GLcontext *ctx;
d80 6
d96 1
a96 1
      struct pipe_buffer *constants[2];
d98 1
a98 1
      struct pipe_texture *sampler_texture[PIPE_MAX_SAMPLERS];
d101 1
a117 2
   GLuint frontbuffer_status;  /**< one of FRONT_STATUS_ (XXX to be removed) */

d131 1
d144 2
a145 1
      struct pipe_texture *pixelmap_texture;
d152 1
a152 1
      struct pipe_sampler_state sampler;
d156 1
a156 1
      struct pipe_buffer *vbuf;
d163 1
a163 1
      struct st_fragment_program *z_shader;
d175 1
a175 1
      struct pipe_buffer *vbuf;
d177 1
d180 3
d185 1
d192 5
d202 1
a202 1
static INLINE struct st_context *st_context(GLcontext *ctx)
d209 1
a209 1
 * Wrapper for GLframebuffer.
d214 1
a214 1
   GLframebuffer Base;
d216 5
a220 1
   GLuint InitWidth, InitHeight;
d226 1
a226 1
void st_invalidate_state(GLcontext * ctx, GLuint new_state);
d264 8
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a0 1
//struct dd_function_table;
d32 1
a33 1
#include "state_tracker/st_api.h"
d35 4
a38 3
struct bitmap_cache;
struct blit_state;
struct dd_function_table;
d41 2
d44 8
a51 2
struct st_context;
struct st_fragment_program;
a58 1
#define ST_NEW_GEOMETRY_PROGRAM        0x20
d76 1
a76 3
   struct st_context_iface iface;

   struct gl_context *ctx;
a84 6

   /* On old libGL's for linux we need to invalidate the drawables
    * on glViewpport calls, this is set via a option.
    */
   boolean invalidate_on_gl_viewport;

d95 1
a95 1
      struct pipe_resource *constants[PIPE_SHADER_TYPES];
d97 1
a97 1
      struct pipe_sampler_view *sampler_views[PIPE_MAX_SAMPLERS];
a99 1
      unsigned sample_mask;
d116 2
a130 1
   struct st_geometry_program *gp;  /**< Currently bound geometry program */
d143 1
a143 2
      struct pipe_resource *pixelmap_texture;
      struct pipe_sampler_view *pixelmap_sampler_view;
d150 1
a150 1
      struct pipe_sampler_state samplers[2];
d154 1
a154 1
      struct pipe_resource *vbuf;
d161 1
a161 1
      struct st_fragment_program *shaders[4];
d173 1
a173 1
      struct pipe_resource *vbuf;
a174 1
      boolean enable_ds_separate;
a176 3
   /** used for anything using util_draw_vertex_buffer */
   struct pipe_vertex_element velems_util_draw[3];

a178 1
   enum pipe_texture_target internal_target;
a184 5
   void *winsys_drawable_handle;

   /* Active render condition. */
   struct pipe_query *render_condition;
   unsigned condition_mode;
d190 1
a190 1
static INLINE struct st_context *st_context(struct gl_context *ctx)
d197 1
a197 1
 * Wrapper for struct gl_framebuffer.
d202 1
a202 1
   struct gl_framebuffer Base;
d204 1
a204 5

   struct st_framebuffer_iface *iface;
   enum st_attachment_type statts[ST_ATTACHMENT_COUNT];
   unsigned num_statts;
   int32_t revalidate;
d210 1
a210 1
void st_invalidate_state(struct gl_context * ctx, GLuint new_state);
a247 8

extern struct st_context *
st_create_context(gl_api api, struct pipe_context *pipe,
                  const struct gl_config *visual,
                  struct st_context *share);

extern void
st_destroy_context(struct st_context *st);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d1 1
a34 1
#include "main/fbobject.h"
d37 1
a43 1
struct u_upload_mgr;
d46 6
a51 9
#define ST_NEW_MESA                    (1 << 0) /* Mesa state has changed */
#define ST_NEW_FRAGMENT_PROGRAM        (1 << 1)
#define ST_NEW_VERTEX_PROGRAM          (1 << 2)
#define ST_NEW_FRAMEBUFFER             (1 << 3)
#define ST_NEW_EDGEFLAGS_DATA          (1 << 4)
#define ST_NEW_GEOMETRY_PROGRAM        (1 << 5)
#define ST_NEW_VERTEX_ARRAYS           (1 << 6)
#define ST_NEW_RASTERIZER              (1 << 7)
#define ST_NEW_UNIFORM_BUFFER          (1 << 8)
a74 2
   struct u_upload_mgr *uploader, *indexbuf_uploader, *constbuf_uploader;

a78 6
   GLboolean clamp_frag_color_in_shader;
   GLboolean clamp_vert_color_in_shader;
   boolean has_stencil_export; /**< can do shader stencil export? */
   boolean has_time_elapsed;
   boolean has_shader_model3;
   boolean prefer_blit_based_texture_transfer;
a79 2
   boolean needs_texcoord_semantic;
   boolean apply_texture_swizzle_to_border_color;
a85 2
   boolean vertex_array_out_of_memory;

d93 2
a94 4
      struct pipe_sampler_state samplers[PIPE_SHADER_TYPES][PIPE_MAX_SAMPLERS];
      GLuint num_samplers[PIPE_SHADER_TYPES];
      struct pipe_sampler_view *sampler_views[PIPE_SHADER_TYPES][PIPE_MAX_SAMPLERS];
      GLuint num_sampler_views[PIPE_SHADER_TYPES];
d96 1
a96 4
      struct {
         void *ptr;
         unsigned size;
      } constants[PIPE_SHADER_TYPES];
d98 1
d103 3
d107 5
d113 4
a116 2
      GLuint fb_orientation;
   } state;
d126 1
a126 1
   /** Mapping from VARYING_SLOT_x to post-transformed vertex slot */
d133 1
a133 3
   struct st_vp_variant *vp_variant;
   struct st_fp_variant *fp_variant;
   struct st_gp_variant *gp_variant;
d155 3
d163 1
a163 1
      struct gl_fragment_program *shaders[4];
d171 1
d174 4
d187 1
d191 1
d194 3
a196 7
   /* The number of vertex buffers from the last call of validate_arrays. */
   unsigned last_num_vbuffers;

   int32_t draw_stamp;
   int32_t read_stamp;

   struct st_config_options options;
d220 1
a220 2
   int32_t stamp;
   int32_t iface_stamp;
d236 1
a236 1
   if (fb && _mesa_is_winsys_fbo(fb)) {
d262 3
d268 1
a268 2
                  struct st_context *share,
                  const struct st_config_options *options);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d50 1
a50 1
/* gap, re-use it */
d118 2
a119 2
      struct pipe_scissor_state scissor[PIPE_MAX_VIEWPORTS];
      struct pipe_viewport_state viewport[PIPE_MAX_VIEWPORTS];
a133 1
   GLboolean edgeflag_culls_prims;
a180 1
      void *vs_layered;
d189 1
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d59 1
a59 1
   uint64_t st;
a88 1
   boolean has_etc1;
a182 1
      void *gs_layered;
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d59 1
a59 1
   GLuint st;
d89 1
d184 1
@


