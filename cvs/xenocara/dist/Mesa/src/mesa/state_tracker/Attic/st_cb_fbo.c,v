head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.7;
commitid	4ry2gvZGMXkCUD2n;

1.7
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.6;
commitid	mcxB0JvoI9gTDYXU;

1.6
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.5;
commitid	WPD6rgPryPkvXOr9;

1.5
date	2013.10.05.09.54.01;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2013.09.05.14.06.43;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.21;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.10.05.09.27.01;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.10;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.13.18;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.50.24;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/


/**
 * Framebuffer/renderbuffer functions.
 *
 * \author Brian Paul
 */


#include "main/imports.h"
#include "main/context.h"
#include "main/fbobject.h"
#include "main/framebuffer.h"
#include "main/glformats.h"
#include "main/macros.h"
#include "main/renderbuffer.h"

#include "pipe/p_context.h"
#include "pipe/p_defines.h"
#include "pipe/p_screen.h"
#include "st_context.h"
#include "st_cb_fbo.h"
#include "st_cb_flush.h"
#include "st_cb_texture.h"
#include "st_format.h"
#include "st_texture.h"
#include "st_manager.h"

#include "util/u_format.h"
#include "util/u_inlines.h"
#include "util/u_surface.h"


static GLboolean
st_renderbuffer_alloc_sw_storage(struct gl_context * ctx,
                                 struct gl_renderbuffer *rb,
                                 GLenum internalFormat,
                                 GLuint width, GLuint height)
{
   struct st_context *st = st_context(ctx);
   struct st_renderbuffer *strb = st_renderbuffer(rb);
   enum pipe_format format;
   size_t size;

   free(strb->data);
   strb->data = NULL;

   if (internalFormat == GL_RGBA16_SNORM) {
      /* Special case for software accum buffers.  Otherwise, if the
       * call to st_choose_renderbuffer_format() fails (because the
       * driver doesn't support signed 16-bit/channel colors) we'd
       * just return without allocating the software accum buffer.
       */
      format = PIPE_FORMAT_R16G16B16A16_SNORM;
   }
   else {
      format = st_choose_renderbuffer_format(st, internalFormat, 0);

      /* Not setting gl_renderbuffer::Format here will cause
       * FRAMEBUFFER_UNSUPPORTED and ValidateFramebuffer will not be called.
       */
      if (format == PIPE_FORMAT_NONE) {
         return GL_TRUE;
      }
   }

   strb->Base.Format = st_pipe_format_to_mesa_format(format);

   size = _mesa_format_image_size(strb->Base.Format, width, height, 1);
   strb->data = malloc(size);
   return strb->data != NULL;
}


/**
 * gl_renderbuffer::AllocStorage()
 * This is called to allocate the original drawing surface, and
 * during window resize.
 */
static GLboolean
st_renderbuffer_alloc_storage(struct gl_context * ctx,
                              struct gl_renderbuffer *rb,
                              GLenum internalFormat,
                              GLuint width, GLuint height)
{
   struct st_context *st = st_context(ctx);
   struct pipe_context *pipe = st->pipe;
   struct pipe_screen *screen = st->pipe->screen;
   struct st_renderbuffer *strb = st_renderbuffer(rb);
   enum pipe_format format = PIPE_FORMAT_NONE;
   struct pipe_surface surf_tmpl;
   struct pipe_resource templ;

   /* init renderbuffer fields */
   strb->Base.Width  = width;
   strb->Base.Height = height;
   strb->Base._BaseFormat = _mesa_base_fbo_format(ctx, internalFormat);
   strb->defined = GL_FALSE;  /* undefined contents now */

   if (strb->software) {
      return st_renderbuffer_alloc_sw_storage(ctx, rb, internalFormat,
                                              width, height);
   }

   /* Free the old surface and texture
    */
   pipe_surface_reference( &strb->surface, NULL );
   pipe_resource_reference( &strb->texture, NULL );

   /* If an sRGB framebuffer is unsupported, sRGB formats behave like linear
    * formats.
    */
   if (!ctx->Extensions.EXT_framebuffer_sRGB) {
      internalFormat = _mesa_get_linear_internalformat(internalFormat);
   }

   /* Handle multisample renderbuffers first.
    *
    * From ARB_framebuffer_object:
    *   If <samples> is zero, then RENDERBUFFER_SAMPLES is set to zero.
    *   Otherwise <samples> represents a request for a desired minimum
    *   number of samples. Since different implementations may support
    *   different sample counts for multisampled rendering, the actual
    *   number of samples allocated for the renderbuffer image is
    *   implementation dependent.  However, the resulting value for
    *   RENDERBUFFER_SAMPLES is guaranteed to be greater than or equal
    *   to <samples> and no more than the next larger sample count supported
    *   by the implementation.
    *
    * So let's find the supported number of samples closest to NumSamples.
    * (NumSamples == 1) is treated the same as (NumSamples == 0).
    */
   if (rb->NumSamples > 1) {
      unsigned i;

      for (i = rb->NumSamples; i <= ctx->Const.MaxSamples; i++) {
         format = st_choose_renderbuffer_format(st, internalFormat, i);

         if (format != PIPE_FORMAT_NONE) {
            rb->NumSamples = i;
            break;
         }
      }
   } else {
      format = st_choose_renderbuffer_format(st, internalFormat, 0);
   }

   /* Not setting gl_renderbuffer::Format here will cause
    * FRAMEBUFFER_UNSUPPORTED and ValidateFramebuffer will not be called.
    */
   if (format == PIPE_FORMAT_NONE) {
      return GL_TRUE;
   }

   strb->Base.Format = st_pipe_format_to_mesa_format(format);

   if (width == 0 || height == 0) {
      /* if size is zero, nothing to allocate */
      return GL_TRUE;
   }

   /* Setup new texture template.
    */
   memset(&templ, 0, sizeof(templ));
   templ.target = st->internal_target;
   templ.format = format;
   templ.width0 = width;
   templ.height0 = height;
   templ.depth0 = 1;
   templ.array_size = 1;
   templ.nr_samples = rb->NumSamples;
   if (util_format_is_depth_or_stencil(format)) {
      templ.bind = PIPE_BIND_DEPTH_STENCIL;
   }
   else if (strb->Base.Name != 0) {
      /* this is a user-created renderbuffer */
      templ.bind = PIPE_BIND_RENDER_TARGET;
   }
   else {
      /* this is a window-system buffer */
      templ.bind = (PIPE_BIND_DISPLAY_TARGET |
                    PIPE_BIND_RENDER_TARGET);
   }

   strb->texture = screen->resource_create(screen, &templ);

   if (!strb->texture)
      return FALSE;

   u_surface_default_template(&surf_tmpl, strb->texture);
   strb->surface = pipe->create_surface(pipe,
                                        strb->texture,
                                        &surf_tmpl);
   if (strb->surface) {
      assert(strb->surface->texture);
      assert(strb->surface->format);
      assert(strb->surface->width == width);
      assert(strb->surface->height == height);
   }

   return strb->surface != NULL;
}


/**
 * gl_renderbuffer::Delete()
 */
static void
st_renderbuffer_delete(struct gl_context *ctx, struct gl_renderbuffer *rb)
{
   struct st_renderbuffer *strb = st_renderbuffer(rb);
   if (ctx) {
      struct st_context *st = st_context(ctx);
      pipe_surface_release(st->pipe, &strb->surface);
   }
   pipe_resource_reference(&strb->texture, NULL);
   free(strb->data);
   _mesa_delete_renderbuffer(ctx, rb);
}


/**
 * Called via ctx->Driver.NewFramebuffer()
 */
static struct gl_framebuffer *
st_new_framebuffer(struct gl_context *ctx, GLuint name)
{
   /* XXX not sure we need to subclass gl_framebuffer for pipe */
   return _mesa_new_framebuffer(ctx, name);
}


/**
 * Called via ctx->Driver.NewRenderbuffer()
 */
static struct gl_renderbuffer *
st_new_renderbuffer(struct gl_context *ctx, GLuint name)
{
   struct st_renderbuffer *strb = ST_CALLOC_STRUCT(st_renderbuffer);
   if (strb) {
      assert(name != 0);
      _mesa_init_renderbuffer(&strb->Base, name);
      strb->Base.Delete = st_renderbuffer_delete;
      strb->Base.AllocStorage = st_renderbuffer_alloc_storage;
      return &strb->Base;
   }
   return NULL;
}


/**
 * Allocate a renderbuffer for a an on-screen window (not a user-created
 * renderbuffer).  The window system code determines the format.
 */
struct gl_renderbuffer *
st_new_renderbuffer_fb(enum pipe_format format, int samples, boolean sw)
{
   struct st_renderbuffer *strb;

   strb = ST_CALLOC_STRUCT(st_renderbuffer);
   if (!strb) {
      _mesa_error(NULL, GL_OUT_OF_MEMORY, "creating renderbuffer");
      return NULL;
   }

   _mesa_init_renderbuffer(&strb->Base, 0);
   strb->Base.ClassID = 0x4242; /* just a unique value */
   strb->Base.NumSamples = samples;
   strb->Base.Format = st_pipe_format_to_mesa_format(format);
   strb->Base._BaseFormat = _mesa_get_format_base_format(strb->Base.Format);
   strb->software = sw;

   switch (format) {
   case PIPE_FORMAT_R8G8B8A8_UNORM:
   case PIPE_FORMAT_B8G8R8A8_UNORM:
   case PIPE_FORMAT_A8R8G8B8_UNORM:
      strb->Base.InternalFormat = GL_RGBA8;
      break;
   case PIPE_FORMAT_R8G8B8X8_UNORM:
   case PIPE_FORMAT_B8G8R8X8_UNORM:
   case PIPE_FORMAT_X8R8G8B8_UNORM:
      strb->Base.InternalFormat = GL_RGB8;
      break;
   case PIPE_FORMAT_R8G8B8A8_SRGB:
   case PIPE_FORMAT_B8G8R8A8_SRGB:
   case PIPE_FORMAT_A8R8G8B8_SRGB:
      strb->Base.InternalFormat = GL_SRGB8_ALPHA8;
      break;
   case PIPE_FORMAT_R8G8B8X8_SRGB:
   case PIPE_FORMAT_B8G8R8X8_SRGB:
   case PIPE_FORMAT_X8R8G8B8_SRGB:
      strb->Base.InternalFormat = GL_SRGB8;
      break;
   case PIPE_FORMAT_B5G5R5A1_UNORM:
      strb->Base.InternalFormat = GL_RGB5_A1;
      break;
   case PIPE_FORMAT_B4G4R4A4_UNORM:
      strb->Base.InternalFormat = GL_RGBA4;
      break;
   case PIPE_FORMAT_B5G6R5_UNORM:
      strb->Base.InternalFormat = GL_RGB565;
      break;
   case PIPE_FORMAT_Z16_UNORM:
      strb->Base.InternalFormat = GL_DEPTH_COMPONENT16;
      break;
   case PIPE_FORMAT_Z32_UNORM:
      strb->Base.InternalFormat = GL_DEPTH_COMPONENT32;
      break;
   case PIPE_FORMAT_Z24_UNORM_S8_UINT:
   case PIPE_FORMAT_S8_UINT_Z24_UNORM:
      strb->Base.InternalFormat = GL_DEPTH24_STENCIL8_EXT;
      break;
   case PIPE_FORMAT_Z24X8_UNORM:
   case PIPE_FORMAT_X8Z24_UNORM:
      strb->Base.InternalFormat = GL_DEPTH_COMPONENT24;
      break;
   case PIPE_FORMAT_S8_UINT:
      strb->Base.InternalFormat = GL_STENCIL_INDEX8_EXT;
      break;
   case PIPE_FORMAT_R16G16B16A16_SNORM:
      /* accum buffer */
      strb->Base.InternalFormat = GL_RGBA16_SNORM;
      break;
   case PIPE_FORMAT_R16G16B16A16_UNORM:
      strb->Base.InternalFormat = GL_RGBA16;
      break;
   case PIPE_FORMAT_R8_UNORM:
      strb->Base.InternalFormat = GL_R8;
      break;
   case PIPE_FORMAT_R8G8_UNORM:
      strb->Base.InternalFormat = GL_RG8;
      break;
   case PIPE_FORMAT_R16_UNORM:
      strb->Base.InternalFormat = GL_R16;
      break;
   case PIPE_FORMAT_R16G16_UNORM:
      strb->Base.InternalFormat = GL_RG16;
      break;
   case PIPE_FORMAT_R32G32B32A32_FLOAT:
      strb->Base.InternalFormat = GL_RGBA32F;
      break;
   case PIPE_FORMAT_R16G16B16A16_FLOAT:
      strb->Base.InternalFormat = GL_RGBA16F;
      break;
   default:
      _mesa_problem(NULL,
		    "Unexpected format %s in st_new_renderbuffer_fb",
                    util_format_name(format));
      free(strb);
      return NULL;
   }

   /* st-specific methods */
   strb->Base.Delete = st_renderbuffer_delete;
   strb->Base.AllocStorage = st_renderbuffer_alloc_storage;

   /* surface is allocated in st_renderbuffer_alloc_storage() */
   strb->surface = NULL;

   return &strb->Base;
}


/**
 * Called via ctx->Driver.BindFramebufferEXT().
 */
static void
st_bind_framebuffer(struct gl_context *ctx, GLenum target,
                    struct gl_framebuffer *fb, struct gl_framebuffer *fbread)
{
   /* no-op */
}


/**
 * Create or update the pipe_surface of a FBO renderbuffer.
 * This is usually called after st_finalize_texture.
 */
void
st_update_renderbuffer_surface(struct st_context *st,
                               struct st_renderbuffer *strb)
{
   struct pipe_context *pipe = st->pipe;
   struct pipe_resource *resource = strb->texture;
   int rtt_width = strb->Base.Width;
   int rtt_height = strb->Base.Height;
   int rtt_depth = strb->Base.Depth;
   /*
    * For winsys fbo, it is possible that the renderbuffer is sRGB-capable but
    * the format of strb->texture is linear (because we have no control over
    * the format).  Check strb->Base.Format instead of strb->texture->format
    * to determine if the rb is sRGB-capable.
    */
   boolean enable_srgb = (st->ctx->Color.sRGBEnabled &&
         _mesa_get_format_color_encoding(strb->Base.Format) == GL_SRGB);
   enum pipe_format format = (enable_srgb) ?
      util_format_srgb(resource->format) :
      util_format_linear(resource->format);
   unsigned first_layer, last_layer, level;

   if (resource->target == PIPE_TEXTURE_1D_ARRAY) {
      rtt_depth = rtt_height;
      rtt_height = 1;
   }

   /* find matching mipmap level size */
   for (level = 0; level <= resource->last_level; level++) {
      if (u_minify(resource->width0, level) == rtt_width &&
          u_minify(resource->height0, level) == rtt_height &&
          (resource->target != PIPE_TEXTURE_3D ||
           u_minify(resource->depth0, level) == rtt_depth)) {
         break;
      }
   }
   assert(level <= resource->last_level);

   /* determine the layer bounds */
   if (strb->rtt_layered) {
      first_layer = 0;
      last_layer = util_max_layer(strb->texture, level);
   }
   else {
      first_layer =
      last_layer = strb->rtt_face + strb->rtt_slice;
   }

   if (!strb->surface ||
       strb->surface->texture->nr_samples != strb->Base.NumSamples ||
       strb->surface->format != format ||
       strb->surface->texture != resource ||
       strb->surface->width != rtt_width ||
       strb->surface->height != rtt_height ||
       strb->surface->u.tex.level != level ||
       strb->surface->u.tex.first_layer != first_layer ||
       strb->surface->u.tex.last_layer != last_layer) {
      /* create a new pipe_surface */
      struct pipe_surface surf_tmpl;
      memset(&surf_tmpl, 0, sizeof(surf_tmpl));
      surf_tmpl.format = format;
      surf_tmpl.u.tex.level = level;
      surf_tmpl.u.tex.first_layer = first_layer;
      surf_tmpl.u.tex.last_layer = last_layer;

      pipe_surface_reference(&strb->surface, NULL);

      strb->surface = pipe->create_surface(pipe, resource, &surf_tmpl);
   }
}

/**
 * Called by ctx->Driver.RenderTexture
 */
static void
st_render_texture(struct gl_context *ctx,
                  struct gl_framebuffer *fb,
                  struct gl_renderbuffer_attachment *att)
{
   struct st_context *st = st_context(ctx);
   struct pipe_context *pipe = st->pipe;
   struct gl_renderbuffer *rb = att->Renderbuffer;
   struct st_renderbuffer *strb = st_renderbuffer(rb);
   struct pipe_resource *pt;

   if (!st_finalize_texture(ctx, pipe, att->Texture))
      return;

   pt = st_get_texobj_resource(att->Texture);
   assert(pt);

   /* point renderbuffer at texobject */
   strb->is_rtt = TRUE;
   strb->rtt_face = att->CubeMapFace;
   strb->rtt_slice = att->Zoffset;
   strb->rtt_layered = att->Layered;
   pipe_resource_reference(&strb->texture, pt);

   pipe_surface_release(pipe, &strb->surface);

   st_update_renderbuffer_surface(st, strb);

   strb->Base.Format = st_pipe_format_to_mesa_format(pt->format);

   /* Invalidate buffer state so that the pipe's framebuffer state
    * gets updated.
    * That's where the new renderbuffer (which we just created) gets
    * passed to the pipe as a (color/depth) render target.
    */
   st_invalidate_state(ctx, _NEW_BUFFERS);


   /* Need to trigger a call to update_framebuffer() since we just
    * attached a new renderbuffer.
    */
   ctx->NewState |= _NEW_BUFFERS;
}


/**
 * Called via ctx->Driver.FinishRenderTexture.
 */
static void
st_finish_render_texture(struct gl_context *ctx, struct gl_renderbuffer *rb)
{
   struct st_renderbuffer *strb = st_renderbuffer(rb);

   if (!strb)
      return;

   strb->is_rtt = FALSE;

   /* restore previous framebuffer state */
   st_invalidate_state(ctx, _NEW_BUFFERS);
}


/** Debug helper */
static void
st_fbo_invalid(const char *reason)
{
   if (MESA_DEBUG_FLAGS & DEBUG_INCOMPLETE_FBO) {
      _mesa_debug(NULL, "Invalid FBO: %s\n", reason);
   }
}


/**
 * Validate a renderbuffer attachment for a particular set of bindings.
 */
static GLboolean
st_validate_attachment(struct gl_context *ctx,
		       struct pipe_screen *screen,
		       const struct gl_renderbuffer_attachment *att,
		       unsigned bindings)
{
   const struct st_texture_object *stObj = st_texture_object(att->Texture);
   enum pipe_format format;
   mesa_format texFormat;
   GLboolean valid;

   /* Sanity check: we must be binding the surface as a (color) render target
    * or depth/stencil target.
    */
   assert(bindings == PIPE_BIND_RENDER_TARGET ||
          bindings == PIPE_BIND_DEPTH_STENCIL);

   /* Only validate texture attachments for now, since
    * st_renderbuffer_alloc_storage makes sure that
    * the format is supported.
    */
   if (att->Type != GL_TEXTURE)
      return GL_TRUE;

   if (!stObj || !stObj->pt)
      return GL_FALSE;

   format = stObj->pt->format;
   texFormat = att->Renderbuffer->TexImage->TexFormat;

   /* If the encoding is sRGB and sRGB rendering cannot be enabled,
    * check for linear format support instead.
    * Later when we create a surface, we change the format to a linear one. */
   if (!ctx->Extensions.EXT_framebuffer_sRGB &&
       _mesa_get_format_color_encoding(texFormat) == GL_SRGB) {
      const mesa_format linearFormat = _mesa_get_srgb_format_linear(texFormat);
      format = st_mesa_format_to_pipe_format(linearFormat);
   }

   valid = screen->is_format_supported(screen, format,
                                      PIPE_TEXTURE_2D,
                                      stObj->pt->nr_samples, bindings);
   if (!valid) {
      st_fbo_invalid("Invalid format");
   }

   return valid;
}
 

/**
 * Check that the framebuffer configuration is valid in terms of what
 * the driver can support.
 *
 * For Gallium we only supports combined Z+stencil, not separate buffers.
 */
static void
st_validate_framebuffer(struct gl_context *ctx, struct gl_framebuffer *fb)
{
   struct st_context *st = st_context(ctx);
   struct pipe_screen *screen = st->pipe->screen;
   const struct gl_renderbuffer_attachment *depth =
         &fb->Attachment[BUFFER_DEPTH];
   const struct gl_renderbuffer_attachment *stencil =
         &fb->Attachment[BUFFER_STENCIL];
   GLuint i;
   enum pipe_format first_format = PIPE_FORMAT_NONE;
   boolean mixed_formats =
         screen->get_param(screen, PIPE_CAP_MIXED_COLORBUFFER_FORMATS) != 0;

   if (depth->Type && stencil->Type && depth->Type != stencil->Type) {
      st_fbo_invalid("Different Depth/Stencil buffer formats");
      fb->_Status = GL_FRAMEBUFFER_UNSUPPORTED_EXT;
      return;
   }
   if (depth->Type == GL_RENDERBUFFER_EXT &&
       stencil->Type == GL_RENDERBUFFER_EXT &&
       depth->Renderbuffer != stencil->Renderbuffer) {
      st_fbo_invalid("Separate Depth/Stencil buffers");
      fb->_Status = GL_FRAMEBUFFER_UNSUPPORTED_EXT;
      return;
   }
   if (depth->Type == GL_TEXTURE &&
       stencil->Type == GL_TEXTURE &&
       depth->Texture != stencil->Texture) {
      fb->_Status = GL_FRAMEBUFFER_UNSUPPORTED_EXT;
      st_fbo_invalid("Different Depth/Stencil textures");
      return;
   }

   if (!st_validate_attachment(ctx,
                               screen,
                               depth,
			       PIPE_BIND_DEPTH_STENCIL)) {
      fb->_Status = GL_FRAMEBUFFER_UNSUPPORTED_EXT;
      return;
   }
   if (!st_validate_attachment(ctx,
                               screen,
                               stencil,
			       PIPE_BIND_DEPTH_STENCIL)) {
      fb->_Status = GL_FRAMEBUFFER_UNSUPPORTED_EXT;
      return;
   }
   for (i = 0; i < ctx->Const.MaxColorAttachments; i++) {
      struct gl_renderbuffer_attachment *att =
            &fb->Attachment[BUFFER_COLOR0 + i];
      enum pipe_format format;

      if (!st_validate_attachment(ctx,
                                  screen,
				  att,
				  PIPE_BIND_RENDER_TARGET)) {
	 fb->_Status = GL_FRAMEBUFFER_UNSUPPORTED_EXT;
	 return;
      }

      if (!mixed_formats) {
         /* Disallow mixed formats. */
         if (att->Type != GL_NONE) {
            format = st_renderbuffer(att->Renderbuffer)->surface->format;
         } else {
            continue;
         }

         if (first_format == PIPE_FORMAT_NONE) {
            first_format = format;
         } else if (format != first_format) {
            fb->_Status = GL_FRAMEBUFFER_UNSUPPORTED_EXT;
            st_fbo_invalid("Mixed color formats");
            return;
         }
      }
   }
}


/**
 * Called via glDrawBuffer.
 */
static void
st_DrawBuffers(struct gl_context *ctx, GLsizei count, const GLenum *buffers)
{
   struct st_context *st = st_context(ctx);
   struct gl_framebuffer *fb = ctx->DrawBuffer;
   GLuint i;

   (void) count;
   (void) buffers;

   /* add the renderbuffers on demand */
   for (i = 0; i < fb->_NumColorDrawBuffers; i++) {
      gl_buffer_index idx = fb->_ColorDrawBufferIndexes[i];

      if (idx >= 0) {
         st_manager_add_color_renderbuffer(st, fb, idx);
      }
   }
}


/**
 * Called via glReadBuffer.
 */
static void
st_ReadBuffer(struct gl_context *ctx, GLenum buffer)
{
   struct st_context *st = st_context(ctx);
   struct gl_framebuffer *fb = ctx->ReadBuffer;

   (void) buffer;

   /* add the renderbuffer on demand */
   if (fb->_ColorReadBufferIndex >= 0)
      st_manager_add_color_renderbuffer(st, fb, fb->_ColorReadBufferIndex);
}



/**
 * Called via ctx->Driver.MapRenderbuffer.
 */
static void
st_MapRenderbuffer(struct gl_context *ctx,
                   struct gl_renderbuffer *rb,
                   GLuint x, GLuint y, GLuint w, GLuint h,
                   GLbitfield mode,
                   GLubyte **mapOut, GLint *rowStrideOut)
{
   struct st_context *st = st_context(ctx);
   struct st_renderbuffer *strb = st_renderbuffer(rb);
   struct pipe_context *pipe = st->pipe;
   const GLboolean invert = rb->Name == 0;
   unsigned usage;
   GLuint y2;
   GLubyte *map;

   if (strb->software) {
      /* software-allocated renderbuffer (probably an accum buffer) */
      if (strb->data) {
         GLint bpp = _mesa_get_format_bytes(strb->Base.Format);
         GLint stride = _mesa_format_row_stride(strb->Base.Format,
                                                strb->Base.Width);
         *mapOut = (GLubyte *) strb->data + y * stride + x * bpp;
         *rowStrideOut = stride;
      }
      else {
         *mapOut = NULL;
         *rowStrideOut = 0;
      }
      return;
   }

   usage = 0x0;
   if (mode & GL_MAP_READ_BIT)
      usage |= PIPE_TRANSFER_READ;
   if (mode & GL_MAP_WRITE_BIT)
      usage |= PIPE_TRANSFER_WRITE;
   if (mode & GL_MAP_INVALIDATE_RANGE_BIT)
      usage |= PIPE_TRANSFER_DISCARD_RANGE;

   /* Note: y=0=bottom of buffer while y2=0=top of buffer.
    * 'invert' will be true for window-system buffers and false for
    * user-allocated renderbuffers and textures.
    */
   if (invert)
      y2 = strb->Base.Height - y - h;
   else
      y2 = y;

    map = pipe_transfer_map(pipe,
                            strb->texture,
                            strb->surface->u.tex.level,
                            strb->surface->u.tex.first_layer,
                            usage, x, y2, w, h, &strb->transfer);
   if (map) {
      if (invert) {
         *rowStrideOut = -(int) strb->transfer->stride;
         map += (h - 1) * strb->transfer->stride;
      }
      else {
         *rowStrideOut = strb->transfer->stride;
      }
      *mapOut = map;
   }
   else {
      *mapOut = NULL;
      *rowStrideOut = 0;
   }
}


/**
 * Called via ctx->Driver.UnmapRenderbuffer.
 */
static void
st_UnmapRenderbuffer(struct gl_context *ctx,
                     struct gl_renderbuffer *rb)
{
   struct st_context *st = st_context(ctx);
   struct st_renderbuffer *strb = st_renderbuffer(rb);
   struct pipe_context *pipe = st->pipe;

   if (strb->software) {
      /* software-allocated renderbuffer (probably an accum buffer) */
      return;
   }

   pipe_transfer_unmap(pipe, strb->transfer);
   strb->transfer = NULL;
}



void st_init_fbo_functions(struct dd_function_table *functions)
{
   functions->NewFramebuffer = st_new_framebuffer;
   functions->NewRenderbuffer = st_new_renderbuffer;
   functions->BindFramebuffer = st_bind_framebuffer;
   functions->FramebufferRenderbuffer = _mesa_framebuffer_renderbuffer;
   functions->RenderTexture = st_render_texture;
   functions->FinishRenderTexture = st_finish_render_texture;
   functions->ValidateFramebuffer = st_validate_framebuffer;

   functions->DrawBuffers = st_DrawBuffers;
   functions->ReadBuffer = st_ReadBuffer;

   functions->MapRenderbuffer = st_MapRenderbuffer;
   functions->UnmapRenderbuffer = st_UnmapRenderbuffer;
}


@


1.8
log
@Merge Mesa 10.2.9
@
text
@@


1.7
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a452 11
   /* Adjust for texture views */
   if (strb->is_rtt && resource->array_size > 1 &&
       strb->Base.TexImage->TexObject->Immutable) {
      struct gl_texture_object *tex = strb->Base.TexImage->TexObject;
      first_layer += tex->MinLayer;
      if (!strb->rtt_layered)
         last_layer += tex->MinLayer;
      else
         last_layer = MIN2(first_layer + tex->NumLayers - 1, last_layer);
   }

d591 1
a591 1
      format = st_mesa_format_to_pipe_format(st_context(ctx), linearFormat);
@


1.6
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d453 11
d602 1
a602 1
      format = st_mesa_format_to_pipe_format(linearFormat);
@


1.5
log
@Merge Mesa 9.2.1
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d298 1
a298 1
   
d310 10
d402 75
a488 2
   struct st_texture_object *stObj;
   struct pipe_surface surf_tmpl;
a495 3
   /* get the texture for the texture object */
   stObj = st_texture_object(att->Texture);

d497 1
a497 2
   strb->rtt = stObj;
   strb->rtt_level = att->TextureLevel;
d500 2
a501 2

   pipe_resource_reference( &strb->texture, pt );
d505 1
a505 12
   assert(strb->rtt_level <= strb->texture->last_level);

   /* new surface for rendering into the texture */
   memset(&surf_tmpl, 0, sizeof(surf_tmpl));
   surf_tmpl.format = ctx->Color.sRGBEnabled
      ? strb->texture->format : util_format_linear(strb->texture->format);
   surf_tmpl.u.tex.level = strb->rtt_level;
   surf_tmpl.u.tex.first_layer = strb->rtt_face + strb->rtt_slice;
   surf_tmpl.u.tex.last_layer = strb->rtt_face + strb->rtt_slice;
   strb->surface = pipe->create_surface(pipe,
                                        strb->texture,
                                        &surf_tmpl);
d535 1
a535 1
   strb->rtt = NULL;
d563 1
a563 1
   gl_format texFormat;
d566 6
d590 1
a590 1
      const gl_format linearFormat = _mesa_get_srgb_format_linear(texFormat);
d708 4
a711 1
      st_manager_add_color_renderbuffer(st, fb, idx);
d728 2
a729 1
   st_manager_add_color_renderbuffer(st, fb, fb->_ColorReadBufferIndex);
d787 2
a788 2
                            strb->rtt_level,
                            strb->rtt_face + strb->rtt_slice,
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d505 1
a505 1
   if (!stObj)
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d40 1
a41 1
#include "main/mfeatures.h"
d60 41
d116 1
a116 1
   enum pipe_format format;
d118 1
a118 7

   format = st_choose_renderbuffer_format(screen, internalFormat,
                                          rb->NumSamples);

   if (format == PIPE_FORMAT_NONE) {
      return FALSE;
   }
a122 1
   strb->Base.Format = st_pipe_format_to_mesa_format(format);
a123 3
   strb->Base.DataType = st_format_datatype(format);
   strb->format = format;

d127 2
a128 12
      size_t size;
      
      free(strb->data);

      assert(strb->format != PIPE_FORMAT_NONE);
      
      strb->stride = util_format_get_stride(strb->format, width);
      size = util_format_get_2d_size(strb->format, strb->stride, height);
      
      strb->data = malloc(size);
      
      return strb->data != NULL;
a129 8
   else {
      struct pipe_resource template;
    
      /* Free the old surface and texture
       */
      pipe_surface_reference( &strb->surface, NULL );
      pipe_resource_reference( &strb->texture, NULL );
      pipe_sampler_view_reference(&strb->sampler_view, NULL);
d131 38
a168 17
      /* Setup new texture template.
       */
      memset(&template, 0, sizeof(template));
      template.target = st->internal_target;
      template.format = format;
      template.width0 = width;
      template.height0 = height;
      template.depth0 = 1;
      template.array_size = 1;
      template.last_level = 0;
      template.nr_samples = rb->NumSamples;
      if (util_format_is_depth_or_stencil(format)) {
         template.bind = PIPE_BIND_DEPTH_STENCIL;
      }
      else {
         template.bind = (PIPE_BIND_DISPLAY_TARGET |
                          PIPE_BIND_RENDER_TARGET);
d170 17
d188 22
a209 1
      strb->texture = screen->resource_create(screen, &template);
d211 1
a211 2
      if (!strb->texture) 
         return FALSE;
d213 2
a214 11
      memset(&surf_tmpl, 0, sizeof(surf_tmpl));
      u_surface_default_template(&surf_tmpl, strb->texture, template.bind);
      strb->surface = pipe->create_surface(pipe,
                                           strb->texture,
                                           &surf_tmpl);
      if (strb->surface) {
         assert(strb->surface->texture);
         assert(strb->surface->format);
         assert(strb->surface->width == width);
         assert(strb->surface->height == height);
      }
d216 9
a224 1
      return strb->surface != NULL;
d226 2
d235 1
a235 1
st_renderbuffer_delete(struct gl_renderbuffer *rb)
d238 4
a241 2
   ASSERT(strb);
   pipe_surface_reference(&strb->surface, NULL);
a242 1
   pipe_sampler_view_reference(&strb->sampler_view, NULL);
d244 1
a244 18
   free(strb);
}


/**
 * gl_renderbuffer::GetPointer()
 */
static void *
null_get_pointer(struct gl_context * ctx, struct gl_renderbuffer *rb,
                 GLint x, GLint y)
{
   /* By returning NULL we force all software rendering to go through
    * the span routines.
    */
#if 0
   assert(0);  /* Should never get called with softpipe */
#endif
   return NULL;
d267 1
a270 2
      strb->Base.GetPointer = null_get_pointer;
      strb->format = PIPE_FORMAT_NONE;
a296 2
   strb->Base.DataType = st_format_datatype(format);
   strb->format = format;
d303 2
d308 2
d311 2
d314 2
d317 1
a317 1
      strb->Base.InternalFormat = GL_RGBA;
d325 4
a328 2
   case PIPE_FORMAT_Z24_UNORM_S8_USCALED:
   case PIPE_FORMAT_S8_USCALED_Z24_UNORM:
d331 1
a331 1
      strb->Base.InternalFormat = GL_DEPTH24_STENCIL8_EXT;
d333 1
a333 1
   case PIPE_FORMAT_S8_USCALED:
d340 3
d355 6
d363 2
a364 1
		    "Unexpected format in st_new_renderbuffer_fb");
a371 1
   strb->Base.GetPointer = null_get_pointer;
a379 2


d387 1
a387 14

}

/**
 * Called by ctx->Driver.FramebufferRenderbuffer
 */
static void
st_framebuffer_renderbuffer(struct gl_context *ctx, 
                            struct gl_framebuffer *fb,
                            GLenum attachment,
                            struct gl_renderbuffer *rb)
{
   /* XXX no need for derivation? */
   _mesa_framebuffer_renderbuffer(ctx, fb, attachment, rb);
d401 2
a402 2
   struct st_renderbuffer *strb;
   struct gl_renderbuffer *rb;
a404 1
   const struct gl_texture_image *texImage;
a412 17
   /* get pointer to texture image we're rendeing to */
   texImage = _mesa_get_attachment_teximage(att);

   /* create new renderbuffer which wraps the texture image */
   rb = st_new_renderbuffer(ctx, 0);
   if (!rb) {
      _mesa_error(ctx, GL_OUT_OF_MEMORY, "glFramebufferTexture()");
      return;
   }

   _mesa_reference_renderbuffer(&att->Renderbuffer, rb);
   assert(rb->RefCount == 1);
   rb->AllocStorage = NULL; /* should not get called */
   strb = st_renderbuffer(rb);

   assert(strb->Base.RefCount > 0);

a421 7
   rb->Width = texImage->Width2;
   rb->Height = texImage->Height2;
   rb->_BaseFormat = texImage->_BaseFormat;
   /*printf("***** render to texture level %d: %d x %d\n", att->TextureLevel, rb->Width, rb->Height);*/

   /*printf("***** pipe texture %d x %d\n", pt->width0, pt->height0);*/

d424 1
a424 4
   pipe_surface_reference(&strb->surface, NULL);

   pipe_sampler_view_reference(&strb->sampler_view,
                               st_get_texture_sampler_view(stObj, pipe));
d430 2
a431 2
   surf_tmpl.format = ctx->Color.sRGBEnabled ? strb->texture->format : util_format_linear(strb->texture->format);
   surf_tmpl.usage = PIPE_BIND_RENDER_TARGET;
a438 2
   strb->format = pt->format;

a439 6
   strb->Base.DataType = st_format_datatype(pt->format);

   /*
   printf("RENDER TO TEXTURE obj=%p pt=%p surf=%p  %d x %d\n",
          att->Texture, pt, strb->surface, rb->Width, rb->Height);
   */
d447 6
d460 1
a460 2
st_finish_render_texture(struct gl_context *ctx,
                         struct gl_renderbuffer_attachment *att)
d462 1
a462 1
   struct st_renderbuffer *strb = st_renderbuffer(att->Renderbuffer);
a468 4
   /*
   printf("FINISH RENDER TO TEXTURE surf=%p\n", strb->surface);
   */

d474 10
d496 1
d509 1
a509 1
   texFormat = _mesa_get_attachment_teximage_const(att)->TexFormat;
d514 1
a514 1
   if (!ctx->Const.sRGBCapable &&
d520 1
a520 1
   return screen->is_format_supported(screen, format,
d523 2
a524 21
}


/**
 * Check if two renderbuffer attachments name a combined depth/stencil
 * renderbuffer.
 */
GLboolean
st_is_depth_stencil_combined(const struct gl_renderbuffer_attachment *depth,
                             const struct gl_renderbuffer_attachment *stencil)
{
   assert(depth && stencil);

   if (depth->Type == stencil->Type) {
      if (depth->Type == GL_RENDERBUFFER_EXT &&
          depth->Renderbuffer == stencil->Renderbuffer)
         return GL_TRUE;

      if (depth->Type == GL_TEXTURE &&
          depth->Texture == stencil->Texture)
         return GL_TRUE;
d527 1
a527 1
   return GL_FALSE;
d552 1
d559 1
d567 1
d610 1
d655 96
a752 1
#if FEATURE_EXT_framebuffer_object
d756 1
a756 1
   functions->FramebufferRenderbuffer = st_framebuffer_renderbuffer;
a759 4
#endif
   /* no longer needed by core Mesa, drivers handle resizes...
   functions->ResizeBuffers = st_resize_buffers;
   */
d763 3
a767 8
/* XXX unused ? */
struct pipe_sampler_view *
st_get_renderbuffer_sampler_view(struct st_renderbuffer *rb,
                                 struct pipe_context *pipe)
{
   if (!rb->sampler_view) {
      rb->sampler_view = st_create_texture_sampler_view(pipe, rb->texture);
   }
a768 2
   return rb->sampler_view;
}
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d41 1
d50 1
d66 2
a67 1
st_renderbuffer_alloc_storage(struct gl_context * ctx, struct gl_renderbuffer *rb,
d78 2
a79 8
   if (strb->software && internalFormat == GL_RGBA16_SNORM) {
      /* special case for software accum buffer */
      format = PIPE_FORMAT_R16G16B16A16_SNORM;
   }
   else {
      format = st_choose_renderbuffer_format(screen, internalFormat,
                                             rb->NumSamples);
   }
d274 1
d346 1
a346 1
   struct pipe_resource *pt = st_get_texobj_resource(att->Texture);
d351 1
a351 2
   /* When would this fail?  Perhaps assert? */
   if (!pt) 
d354 3
d358 1
a358 1
   texImage = att->Texture->Image[att->CubeMapFace][att->TextureLevel];
d401 1
a401 1
   surf_tmpl.format = strb->texture->format;
a435 1
   struct st_context *st = st_context(ctx);
a440 2
   st_flush(st, PIPE_FLUSH_RENDER_CACHE, NULL);

d456 2
a457 1
st_validate_attachment(struct pipe_screen *screen,
d462 2
d475 13
a487 1
   return screen->is_format_supported(screen, stObj->pt->format,
d489 1
a489 1
                                      stObj->pt->nr_samples, bindings, 0);
d533 3
d554 2
a555 1
   if (!st_validate_attachment(screen,
d561 2
a562 1
   if (!st_validate_attachment(screen,
d569 7
a575 2
      if (!st_validate_attachment(screen,
				  &fb->Attachment[BUFFER_COLOR0 + i],
d579 16
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d48 1
a49 1
#include "st_public.h"
d51 1
a53 1
#include "util/u_rect.h"
d55 1
d64 1
a64 1
st_renderbuffer_alloc_storage(GLcontext * ctx, struct gl_renderbuffer *rb,
d68 3
a70 1
   struct pipe_screen *screen = ctx->st->pipe->screen;
d73 14
a87 5
   if (strb->format != PIPE_FORMAT_NONE)
      format = strb->format;
   else
      format = st_choose_renderbuffer_format(screen, internalFormat);
      
d92 1
d94 1
d113 1
a113 2
      struct pipe_texture template;
      unsigned surface_usage;
d118 2
a119 1
      pipe_texture_reference( &strb->texture, NULL );
d124 1
a124 1
      template.target = PIPE_TEXTURE_2D;
d129 1
d133 1
a133 1
         template.tex_usage = PIPE_TEXTURE_USAGE_DEPTH_STENCIL;
d136 2
a137 2
         template.tex_usage = (PIPE_TEXTURE_USAGE_DISPLAY_TARGET |
                               PIPE_TEXTURE_USAGE_RENDER_TARGET);
d140 1
a140 10
      /* Probably need dedicated flags for surface usage too: 
       */
      surface_usage = (PIPE_BUFFER_USAGE_GPU_READ |
                       PIPE_BUFFER_USAGE_GPU_WRITE);
#if 0
                       PIPE_BUFFER_USAGE_CPU_READ |
                       PIPE_BUFFER_USAGE_CPU_WRITE);
#endif

      strb->texture = screen->texture_create(screen, &template);
d145 5
a149 4
      strb->surface = screen->get_tex_surface(screen,
                                              strb->texture,
                                              0, 0, 0,
                                              surface_usage);
d171 2
a172 1
   pipe_texture_reference(&strb->texture, NULL);
d182 1
a182 1
null_get_pointer(GLcontext * ctx, struct gl_renderbuffer *rb,
d199 1
a199 1
st_new_framebuffer(GLcontext *ctx, GLuint name)
d210 1
a210 1
st_new_renderbuffer(GLcontext *ctx, GLuint name)
d244 1
d250 1
d253 1
d267 2
a268 2
   case PIPE_FORMAT_Z24S8_UNORM:
   case PIPE_FORMAT_S8Z24_UNORM:
d273 1
a273 1
   case PIPE_FORMAT_S8_UNORM:
d277 13
a289 1
      strb->Base.InternalFormat = GL_RGBA16;
d316 1
a316 1
st_bind_framebuffer(GLcontext *ctx, GLenum target,
d326 1
a326 1
st_framebuffer_renderbuffer(GLcontext *ctx, 
d340 1
a340 1
st_render_texture(GLcontext *ctx,
d344 2
a345 1
   struct pipe_screen *screen = ctx->st->pipe->screen;
d348 1
a348 1
   struct pipe_texture *pt = st_get_texobj_texture(att->Texture);
d351 1
a351 1
   GLint pt_level;
d357 2
a358 3
   /* The first gallium texture level = Mesa BaseLevel */
   pt_level = MAX2(0, (GLint) att->TextureLevel - att->Texture->BaseLevel);
   texImage = att->Texture->Image[att->CubeMapFace][pt_level];
d379 1
a379 1
   strb->rtt_level = pt_level;
d390 1
a390 1
   pipe_texture_reference( &strb->texture, pt );
d394 3
d400 11
a410 7
   strb->surface = screen->get_tex_surface(screen,
                                           strb->texture,
                                           strb->rtt_face,
                                           strb->rtt_level,
                                           strb->rtt_slice,
                                           PIPE_BUFFER_USAGE_GPU_READ |
                                           PIPE_BUFFER_USAGE_GPU_WRITE);
d433 1
a433 1
st_finish_render_texture(GLcontext *ctx,
d436 1
d442 1
a442 1
   st_flush( ctx->st, PIPE_FLUSH_RENDER_CACHE, NULL );
d456 1
a456 1
 * Validate a renderbuffer attachment for a particular usage.
a457 1

d461 1
a461 1
		       GLuint usage)
d463 1
a463 2
   const struct st_texture_object *stObj =
      st_texture_object(att->Texture);
d465 1
a465 2
   /**
    * Only validate texture attachments for now, since
a468 1

d476 26
a501 2
				      PIPE_TEXTURE_2D,
				      usage, 0);
d503 1
d512 1
a512 1
st_validate_framebuffer(GLcontext *ctx, struct gl_framebuffer *fb)
d514 6
a519 5
   struct pipe_screen *screen = ctx->st->pipe->screen;
   const struct gl_renderbuffer *depthRb =
      fb->Attachment[BUFFER_DEPTH].Renderbuffer;
   const struct gl_renderbuffer *stencilRb =
      fb->Attachment[BUFFER_STENCIL].Renderbuffer;
d522 13
a534 1
   if (stencilRb && depthRb && stencilRb != depthRb) {
d540 2
a541 2
			       &fb->Attachment[BUFFER_DEPTH],
			       PIPE_TEXTURE_USAGE_DEPTH_STENCIL)) {
d546 2
a547 2
			       &fb->Attachment[BUFFER_STENCIL],
			       PIPE_TEXTURE_USAGE_DEPTH_STENCIL)) {
d554 1
a554 1
				  PIPE_TEXTURE_USAGE_RENDER_TARGET)) {
d563 1
a563 1
 * Copy back color buffer to front color buffer.
d566 1
a566 96
copy_back_to_front(struct st_context *st,
                   struct gl_framebuffer *fb,
                   gl_buffer_index frontIndex,
                   gl_buffer_index backIndex)

{
   struct st_framebuffer *stfb = (struct st_framebuffer *) fb;
   struct pipe_surface *surf_front, *surf_back;

   (void) st_get_framebuffer_surface(stfb, frontIndex, &surf_front);
   (void) st_get_framebuffer_surface(stfb, backIndex, &surf_back);

   if (surf_front && surf_back) {
      if (st->pipe->surface_copy) {
         st->pipe->surface_copy(st->pipe,
                                surf_front, 0, 0,  /* dest */
                                surf_back, 0, 0,   /* src */
                                fb->Width, fb->Height);
      } else {
         util_surface_copy(st->pipe, FALSE,
                           surf_front, 0, 0,
                           surf_back, 0, 0,
                           fb->Width, fb->Height);
      }
   }
}


/**
 * Check if we're drawing into, or read from, a front color buffer.  If the
 * front buffer is missing, create it now.
 *
 * The back color buffer must exist since we'll use its format/samples info
 * for creating the front buffer.
 *
 * \param frontIndex  either BUFFER_FRONT_LEFT or BUFFER_FRONT_RIGHT
 * \param backIndex  either BUFFER_BACK_LEFT or BUFFER_BACK_RIGHT
 */
static void
check_create_front_buffer(GLcontext *ctx, struct gl_framebuffer *fb,
                          gl_buffer_index frontIndex,
                          gl_buffer_index backIndex)
{
   if (fb->Attachment[frontIndex].Renderbuffer == NULL) {
      GLboolean create = GL_FALSE;

      /* check if drawing to or reading from front buffer */
      if (fb->_ColorReadBufferIndex == frontIndex) {
         create = GL_TRUE;
      }
      else {
         GLuint b;
         for (b = 0; b < fb->_NumColorDrawBuffers; b++) {
            if (fb->_ColorDrawBufferIndexes[b] == frontIndex) {
               create = GL_TRUE;
               break;
            }
         }
      }

      if (create) {
         struct st_renderbuffer *back;
         struct gl_renderbuffer *front;
         enum pipe_format colorFormat;
         uint samples;

         if (0)
            _mesa_debug(ctx, "Allocate new front buffer\n");

         /* get back renderbuffer info */
         back = st_renderbuffer(fb->Attachment[backIndex].Renderbuffer);
         colorFormat = back->format;
         samples = back->Base.NumSamples;

         /* create front renderbuffer */
         front = st_new_renderbuffer_fb(colorFormat, samples, FALSE);
         _mesa_add_renderbuffer(fb, frontIndex, front);

         /* alloc texture/surface for new front buffer */
         front->AllocStorage(ctx, front, front->InternalFormat,
                             fb->Width, fb->Height);

         /* initialize the front color buffer contents by copying
          * the back buffer.
          */
         copy_back_to_front(ctx->st, fb, frontIndex, backIndex);
      }
   }
}


/**
 * If front left/right color buffers are missing, create them now.
 */
static void
check_create_front_buffers(GLcontext *ctx, struct gl_framebuffer *fb)
d568 3
a570 2
   /* check if we need to create the front left buffer now */
   check_create_front_buffer(ctx, fb, BUFFER_FRONT_LEFT, BUFFER_BACK_LEFT);
a571 14
   if (fb->Visual.stereoMode) {
      check_create_front_buffer(ctx, fb, BUFFER_FRONT_RIGHT, BUFFER_BACK_RIGHT);
   }

   st_invalidate_state(ctx, _NEW_BUFFERS);
}


/**
 * Called via glDrawBuffer.
 */
static void
st_DrawBuffers(GLcontext *ctx, GLsizei count, const GLenum *buffers)
{
d574 6
a579 1
   check_create_front_buffers(ctx, ctx->DrawBuffer);
d587 1
a587 1
st_ReadBuffer(GLcontext *ctx, GLenum buffer)
d589 3
d593 3
a595 1
   check_create_front_buffers(ctx, ctx->ReadBuffer);
d601 1
d609 1
d616 12
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a47 1
#include "st_cb_flush.h"
d49 1
a50 1
#include "st_manager.h"
d53 1
a54 1
#include "util/u_surface.h"
d63 1
a63 1
st_renderbuffer_alloc_storage(struct gl_context * ctx, struct gl_renderbuffer *rb,
d67 1
a67 3
   struct st_context *st = st_context(ctx);
   struct pipe_context *pipe = st->pipe;
   struct pipe_screen *screen = st->pipe->screen;
a69 14
   struct pipe_surface surf_tmpl;

   if (strb->software && internalFormat == GL_RGBA16_SNORM) {
      /* special case for software accum buffer */
      format = PIPE_FORMAT_R16G16B16A16_SNORM;
   }
   else {
      format = st_choose_renderbuffer_format(screen, internalFormat,
                                             rb->NumSamples);
   }

   if (format == PIPE_FORMAT_NONE) {
      return FALSE;
   }
d71 5
a79 1
   strb->Base._BaseFormat = _mesa_base_fbo_format(ctx, internalFormat);
a80 1
   strb->format = format;
d99 2
a100 1
      struct pipe_resource template;
d105 1
a105 2
      pipe_resource_reference( &strb->texture, NULL );
      pipe_sampler_view_reference(&strb->sampler_view, NULL);
d110 1
a110 1
      template.target = st->internal_target;
a114 1
      template.array_size = 1;
d118 1
a118 1
         template.bind = PIPE_BIND_DEPTH_STENCIL;
d121 2
a122 2
         template.bind = (PIPE_BIND_DISPLAY_TARGET |
                          PIPE_BIND_RENDER_TARGET);
d125 10
a134 1
      strb->texture = screen->resource_create(screen, &template);
d139 4
a142 5
      memset(&surf_tmpl, 0, sizeof(surf_tmpl));
      u_surface_default_template(&surf_tmpl, strb->texture, template.bind);
      strb->surface = pipe->create_surface(pipe,
                                           strb->texture,
                                           &surf_tmpl);
d164 1
a164 2
   pipe_resource_reference(&strb->texture, NULL);
   pipe_sampler_view_reference(&strb->sampler_view, NULL);
d174 1
a174 1
null_get_pointer(struct gl_context * ctx, struct gl_renderbuffer *rb,
d191 1
a191 1
st_new_framebuffer(struct gl_context *ctx, GLuint name)
d202 1
a202 1
st_new_renderbuffer(struct gl_context *ctx, GLuint name)
a235 1
   strb->Base._BaseFormat = _mesa_get_format_base_format(strb->Base.Format);
a240 1
   case PIPE_FORMAT_R8G8B8A8_UNORM:
a242 1
   case PIPE_FORMAT_R8G8B8X8_UNORM:
d256 2
a257 2
   case PIPE_FORMAT_Z24_UNORM_S8_USCALED:
   case PIPE_FORMAT_S8_USCALED_Z24_UNORM:
d262 1
a262 1
   case PIPE_FORMAT_S8_USCALED:
d266 1
a266 13
      strb->Base.InternalFormat = GL_RGBA16_SNORM;
      break;
   case PIPE_FORMAT_R8_UNORM:
      strb->Base.InternalFormat = GL_R8;
      break;
   case PIPE_FORMAT_R8G8_UNORM:
      strb->Base.InternalFormat = GL_RG8;
      break;
   case PIPE_FORMAT_R16_UNORM:
      strb->Base.InternalFormat = GL_R16;
      break;
   case PIPE_FORMAT_R16G16_UNORM:
      strb->Base.InternalFormat = GL_RG16;
d293 1
a293 1
st_bind_framebuffer(struct gl_context *ctx, GLenum target,
d303 1
a303 1
st_framebuffer_renderbuffer(struct gl_context *ctx, 
d317 1
a317 1
st_render_texture(struct gl_context *ctx,
d321 1
a321 2
   struct st_context *st = st_context(ctx);
   struct pipe_context *pipe = st->pipe;
d324 1
a324 1
   struct pipe_resource *pt = st_get_texobj_resource(att->Texture);
d327 1
a327 1
   struct pipe_surface surf_tmpl;
d333 3
a335 2
   /* get pointer to texture image we're rendeing to */
   texImage = att->Texture->Image[att->CubeMapFace][att->TextureLevel];
d356 1
a356 1
   strb->rtt_level = att->TextureLevel;
d367 1
a367 1
   pipe_resource_reference( &strb->texture, pt );
a370 3
   pipe_sampler_view_reference(&strb->sampler_view,
                               st_get_texture_sampler_view(stObj, pipe));

d374 7
a380 11
   memset(&surf_tmpl, 0, sizeof(surf_tmpl));
   surf_tmpl.format = strb->texture->format;
   surf_tmpl.usage = PIPE_BIND_RENDER_TARGET;
   surf_tmpl.u.tex.level = strb->rtt_level;
   surf_tmpl.u.tex.first_layer = strb->rtt_face + strb->rtt_slice;
   surf_tmpl.u.tex.last_layer = strb->rtt_face + strb->rtt_slice;
   strb->surface = pipe->create_surface(pipe,
                                        strb->texture,
                                        &surf_tmpl);

   strb->format = pt->format;
d403 1
a403 1
st_finish_render_texture(struct gl_context *ctx,
a405 1
   struct st_context *st = st_context(ctx);
d411 1
a411 1
   st_flush(st, PIPE_FLUSH_RENDER_CACHE, NULL);
d425 1
a425 1
 * Validate a renderbuffer attachment for a particular set of bindings.
d427 1
d431 1
a431 1
		       unsigned bindings)
d433 2
a434 1
   const struct st_texture_object *stObj = st_texture_object(att->Texture);
d436 2
a437 1
   /* Only validate texture attachments for now, since
d441 1
d449 2
a450 26
                                      PIPE_TEXTURE_2D,
                                      stObj->pt->nr_samples, bindings, 0);
}


/**
 * Check if two renderbuffer attachments name a combined depth/stencil
 * renderbuffer.
 */
GLboolean
st_is_depth_stencil_combined(const struct gl_renderbuffer_attachment *depth,
                             const struct gl_renderbuffer_attachment *stencil)
{
   assert(depth && stencil);

   if (depth->Type == stencil->Type) {
      if (depth->Type == GL_RENDERBUFFER_EXT &&
          depth->Renderbuffer == stencil->Renderbuffer)
         return GL_TRUE;

      if (depth->Type == GL_TEXTURE &&
          depth->Texture == stencil->Texture)
         return GL_TRUE;
   }

   return GL_FALSE;
a451 1
 
d460 1
a460 1
st_validate_framebuffer(struct gl_context *ctx, struct gl_framebuffer *fb)
d462 5
a466 6
   struct st_context *st = st_context(ctx);
   struct pipe_screen *screen = st->pipe->screen;
   const struct gl_renderbuffer_attachment *depth =
         &fb->Attachment[BUFFER_DEPTH];
   const struct gl_renderbuffer_attachment *stencil =
         &fb->Attachment[BUFFER_STENCIL];
d469 1
a469 13
   if (depth->Type && stencil->Type && depth->Type != stencil->Type) {
      fb->_Status = GL_FRAMEBUFFER_UNSUPPORTED_EXT;
      return;
   }
   if (depth->Type == GL_RENDERBUFFER_EXT &&
       stencil->Type == GL_RENDERBUFFER_EXT &&
       depth->Renderbuffer != stencil->Renderbuffer) {
      fb->_Status = GL_FRAMEBUFFER_UNSUPPORTED_EXT;
      return;
   }
   if (depth->Type == GL_TEXTURE &&
       stencil->Type == GL_TEXTURE &&
       depth->Texture != stencil->Texture) {
d475 2
a476 2
                               depth,
			       PIPE_BIND_DEPTH_STENCIL)) {
d481 2
a482 2
                               stencil,
			       PIPE_BIND_DEPTH_STENCIL)) {
d489 1
a489 1
				  PIPE_BIND_RENDER_TARGET)) {
d498 112
d613 1
a613 1
st_DrawBuffers(struct gl_context *ctx, GLsizei count, const GLenum *buffers)
a614 4
   struct st_context *st = st_context(ctx);
   struct gl_framebuffer *fb = ctx->DrawBuffer;
   GLuint i;

d617 1
a617 6

   /* add the renderbuffers on demand */
   for (i = 0; i < fb->_NumColorDrawBuffers; i++) {
      gl_buffer_index idx = fb->_ColorDrawBufferIndexes[i];
      st_manager_add_color_renderbuffer(st, fb, idx);
   }
d625 1
a625 1
st_ReadBuffer(struct gl_context *ctx, GLenum buffer)
a626 3
   struct st_context *st = st_context(ctx);
   struct gl_framebuffer *fb = ctx->ReadBuffer;

d628 1
a628 3

   /* add the renderbuffer on demand */
   st_manager_add_color_renderbuffer(st, fb, fb->_ColorReadBufferIndex);
a633 1
#if FEATURE_EXT_framebuffer_object
a640 1
#endif
a646 12
}

/* XXX unused ? */
struct pipe_sampler_view *
st_get_renderbuffer_sampler_view(struct st_renderbuffer *rb,
                                 struct pipe_context *pipe)
{
   if (!rb->sampler_view) {
      rb->sampler_view = st_create_texture_sampler_view(pipe, rb->texture);
   }

   return rb->sampler_view;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a39 1
#include "main/glformats.h"
a48 1
#include "st_cb_texture.h"
a57 41
static GLboolean
st_renderbuffer_alloc_sw_storage(struct gl_context * ctx,
                                 struct gl_renderbuffer *rb,
                                 GLenum internalFormat,
                                 GLuint width, GLuint height)
{
   struct st_context *st = st_context(ctx);
   struct st_renderbuffer *strb = st_renderbuffer(rb);
   enum pipe_format format;
   size_t size;

   free(strb->data);
   strb->data = NULL;

   if (internalFormat == GL_RGBA16_SNORM) {
      /* Special case for software accum buffers.  Otherwise, if the
       * call to st_choose_renderbuffer_format() fails (because the
       * driver doesn't support signed 16-bit/channel colors) we'd
       * just return without allocating the software accum buffer.
       */
      format = PIPE_FORMAT_R16G16B16A16_SNORM;
   }
   else {
      format = st_choose_renderbuffer_format(st, internalFormat, 0);

      /* Not setting gl_renderbuffer::Format here will cause
       * FRAMEBUFFER_UNSUPPORTED and ValidateFramebuffer will not be called.
       */
      if (format == PIPE_FORMAT_NONE) {
         return GL_TRUE;
      }
   }

   strb->Base.Format = st_pipe_format_to_mesa_format(format);

   size = _mesa_format_image_size(strb->Base.Format, width, height, 1);
   strb->data = malloc(size);
   return strb->data != NULL;
}


d64 1
a64 2
st_renderbuffer_alloc_storage(struct gl_context * ctx,
                              struct gl_renderbuffer *rb,
d72 1
a72 1
   enum pipe_format format = PIPE_FORMAT_NONE;
d74 13
a86 1
   struct pipe_resource templ;
d91 1
d93 3
d99 12
a110 2
      return st_renderbuffer_alloc_sw_storage(ctx, rb, internalFormat,
                                              width, height);
d112 8
d121 18
a138 4
   /* Free the old surface and texture
    */
   pipe_surface_reference( &strb->surface, NULL );
   pipe_resource_reference( &strb->texture, NULL );
d140 1
a140 25
   /* If an sRGB framebuffer is unsupported, sRGB formats behave like linear
    * formats.
    */
   if (!ctx->Extensions.EXT_framebuffer_sRGB) {
      internalFormat = _mesa_get_linear_internalformat(internalFormat);
   }

   /* Handle multisample renderbuffers first.
    *
    * From ARB_framebuffer_object:
    *   If <samples> is zero, then RENDERBUFFER_SAMPLES is set to zero.
    *   Otherwise <samples> represents a request for a desired minimum
    *   number of samples. Since different implementations may support
    *   different sample counts for multisampled rendering, the actual
    *   number of samples allocated for the renderbuffer image is
    *   implementation dependent.  However, the resulting value for
    *   RENDERBUFFER_SAMPLES is guaranteed to be greater than or equal
    *   to <samples> and no more than the next larger sample count supported
    *   by the implementation.
    *
    * So let's find the supported number of samples closest to NumSamples.
    * (NumSamples == 1) is treated the same as (NumSamples == 0).
    */
   if (rb->NumSamples > 1) {
      unsigned i;
d142 2
a143 2
      for (i = rb->NumSamples; i <= ctx->Const.MaxSamples; i++) {
         format = st_choose_renderbuffer_format(st, internalFormat, i);
d145 10
a154 4
         if (format != PIPE_FORMAT_NONE) {
            rb->NumSamples = i;
            break;
         }
a155 10
   } else {
      format = st_choose_renderbuffer_format(st, internalFormat, 0);
   }

   /* Not setting gl_renderbuffer::Format here will cause
    * FRAMEBUFFER_UNSUPPORTED and ValidateFramebuffer will not be called.
    */
   if (format == PIPE_FORMAT_NONE) {
      return GL_TRUE;
   }
d157 1
a157 23
   strb->Base.Format = st_pipe_format_to_mesa_format(format);

   if (width == 0 || height == 0) {
      /* if size is zero, nothing to allocate */
      return GL_TRUE;
   }

   /* Setup new texture template.
    */
   memset(&templ, 0, sizeof(templ));
   templ.target = st->internal_target;
   templ.format = format;
   templ.width0 = width;
   templ.height0 = height;
   templ.depth0 = 1;
   templ.array_size = 1;
   templ.nr_samples = rb->NumSamples;
   if (util_format_is_depth_or_stencil(format)) {
      templ.bind = PIPE_BIND_DEPTH_STENCIL;
   }
   else if (strb->Base.Name != 0) {
      /* this is a user-created renderbuffer */
      templ.bind = PIPE_BIND_RENDER_TARGET;
a158 23
   else {
      /* this is a window-system buffer */
      templ.bind = (PIPE_BIND_DISPLAY_TARGET |
                    PIPE_BIND_RENDER_TARGET);
   }

   strb->texture = screen->resource_create(screen, &templ);

   if (!strb->texture)
      return FALSE;

   u_surface_default_template(&surf_tmpl, strb->texture);
   strb->surface = pipe->create_surface(pipe,
                                        strb->texture,
                                        &surf_tmpl);
   if (strb->surface) {
      assert(strb->surface->texture);
      assert(strb->surface->format);
      assert(strb->surface->width == width);
      assert(strb->surface->height == height);
   }

   return strb->surface != NULL;
d166 1
a166 1
st_renderbuffer_delete(struct gl_context *ctx, struct gl_renderbuffer *rb)
d169 2
a170 4
   if (ctx) {
      struct st_context *st = st_context(ctx);
      pipe_surface_release(st->pipe, &strb->surface);
   }
d172 1
d174 18
a191 1
   _mesa_delete_renderbuffer(ctx, rb);
a213 1
      assert(name != 0);
d217 2
d245 2
a252 2
      strb->Base.InternalFormat = GL_RGBA8;
      break;
a255 2
      strb->Base.InternalFormat = GL_RGB8;
      break;
a256 2
      strb->Base.InternalFormat = GL_RGB5_A1;
      break;
a257 2
      strb->Base.InternalFormat = GL_RGBA4;
      break;
d259 1
a259 1
      strb->Base.InternalFormat = GL_RGB565;
d267 2
a268 4
   case PIPE_FORMAT_Z24_UNORM_S8_UINT:
   case PIPE_FORMAT_S8_UINT_Z24_UNORM:
      strb->Base.InternalFormat = GL_DEPTH24_STENCIL8_EXT;
      break;
d271 1
a271 1
      strb->Base.InternalFormat = GL_DEPTH_COMPONENT24;
d273 1
a273 1
   case PIPE_FORMAT_S8_UINT:
a276 1
      /* accum buffer */
a278 3
   case PIPE_FORMAT_R16G16B16A16_UNORM:
      strb->Base.InternalFormat = GL_RGBA16;
      break;
a290 6
   case PIPE_FORMAT_R32G32B32A32_FLOAT:
      strb->Base.InternalFormat = GL_RGBA32F;
      break;
   case PIPE_FORMAT_R16G16B16A16_FLOAT:
      strb->Base.InternalFormat = GL_RGBA16F;
      break;
d293 1
a293 2
		    "Unexpected format %s in st_new_renderbuffer_fb",
                    util_format_name(format));
d301 1
d310 2
d319 14
a332 1
   /* no-op */
d346 3
a348 3
   struct gl_renderbuffer *rb = att->Renderbuffer;
   struct st_renderbuffer *strb = st_renderbuffer(rb);
   struct pipe_resource *pt;
d350 1
d353 11
a363 1
   if (!st_finalize_texture(ctx, pipe, att->Texture))
d365 1
d367 6
a372 2
   pt = st_get_texobj_resource(att->Texture);
   assert(pt);
d383 7
d392 4
a395 1
   pipe_surface_release(pipe, &strb->surface);
d401 2
a402 2
   surf_tmpl.format = ctx->Color.sRGBEnabled
      ? strb->texture->format : util_format_linear(strb->texture->format);
d410 2
d413 6
a425 6


   /* Need to trigger a call to update_framebuffer() since we just
    * attached a new renderbuffer.
    */
   ctx->NewState |= _NEW_BUFFERS;
d433 2
a434 1
st_finish_render_texture(struct gl_context *ctx, struct gl_renderbuffer *rb)
d436 2
a437 1
   struct st_renderbuffer *strb = st_renderbuffer(rb);
d442 2
d446 4
a454 10
/** Debug helper */
static void
st_fbo_invalid(const char *reason)
{
   if (MESA_DEBUG_FLAGS & DEBUG_INCOMPLETE_FBO) {
      _mesa_debug(NULL, "Invalid FBO: %s\n", reason);
   }
}


d459 1
a459 2
st_validate_attachment(struct gl_context *ctx,
		       struct pipe_screen *screen,
a463 3
   enum pipe_format format;
   gl_format texFormat;
   GLboolean valid;
d475 5
a479 2
   format = stObj->pt->format;
   texFormat = att->Renderbuffer->TexImage->TexFormat;
d481 14
a494 8
   /* If the encoding is sRGB and sRGB rendering cannot be enabled,
    * check for linear format support instead.
    * Later when we create a surface, we change the format to a linear one. */
   if (!ctx->Extensions.EXT_framebuffer_sRGB &&
       _mesa_get_format_color_encoding(texFormat) == GL_SRGB) {
      const gl_format linearFormat = _mesa_get_srgb_format_linear(texFormat);
      format = st_mesa_format_to_pipe_format(linearFormat);
   }
d496 3
a498 5
   valid = screen->is_format_supported(screen, format,
                                      PIPE_TEXTURE_2D,
                                      stObj->pt->nr_samples, bindings);
   if (!valid) {
      st_fbo_invalid("Invalid format");
d501 1
a501 1
   return valid;
a520 3
   enum pipe_format first_format = PIPE_FORMAT_NONE;
   boolean mixed_formats =
         screen->get_param(screen, PIPE_CAP_MIXED_COLORBUFFER_FORMATS) != 0;
a522 1
      st_fbo_invalid("Different Depth/Stencil buffer formats");
a528 1
      st_fbo_invalid("Separate Depth/Stencil buffers");
a535 1
      st_fbo_invalid("Different Depth/Stencil textures");
d539 1
a539 2
   if (!st_validate_attachment(ctx,
                               screen,
d545 1
a545 2
   if (!st_validate_attachment(ctx,
                               screen,
d552 2
a553 7
      struct gl_renderbuffer_attachment *att =
            &fb->Attachment[BUFFER_COLOR0 + i];
      enum pipe_format format;

      if (!st_validate_attachment(ctx,
                                  screen,
				  att,
a557 17

      if (!mixed_formats) {
         /* Disallow mixed formats. */
         if (att->Type != GL_NONE) {
            format = st_renderbuffer(att->Renderbuffer)->surface->format;
         } else {
            continue;
         }

         if (first_format == PIPE_FORMAT_NONE) {
            first_format = format;
         } else if (format != first_format) {
            fb->_Status = GL_FRAMEBUFFER_UNSUPPORTED_EXT;
            st_fbo_invalid("Mixed color formats");
            return;
         }
      }
a598 96

/**
 * Called via ctx->Driver.MapRenderbuffer.
 */
static void
st_MapRenderbuffer(struct gl_context *ctx,
                   struct gl_renderbuffer *rb,
                   GLuint x, GLuint y, GLuint w, GLuint h,
                   GLbitfield mode,
                   GLubyte **mapOut, GLint *rowStrideOut)
{
   struct st_context *st = st_context(ctx);
   struct st_renderbuffer *strb = st_renderbuffer(rb);
   struct pipe_context *pipe = st->pipe;
   const GLboolean invert = rb->Name == 0;
   unsigned usage;
   GLuint y2;
   GLubyte *map;

   if (strb->software) {
      /* software-allocated renderbuffer (probably an accum buffer) */
      if (strb->data) {
         GLint bpp = _mesa_get_format_bytes(strb->Base.Format);
         GLint stride = _mesa_format_row_stride(strb->Base.Format,
                                                strb->Base.Width);
         *mapOut = (GLubyte *) strb->data + y * stride + x * bpp;
         *rowStrideOut = stride;
      }
      else {
         *mapOut = NULL;
         *rowStrideOut = 0;
      }
      return;
   }

   usage = 0x0;
   if (mode & GL_MAP_READ_BIT)
      usage |= PIPE_TRANSFER_READ;
   if (mode & GL_MAP_WRITE_BIT)
      usage |= PIPE_TRANSFER_WRITE;
   if (mode & GL_MAP_INVALIDATE_RANGE_BIT)
      usage |= PIPE_TRANSFER_DISCARD_RANGE;

   /* Note: y=0=bottom of buffer while y2=0=top of buffer.
    * 'invert' will be true for window-system buffers and false for
    * user-allocated renderbuffers and textures.
    */
   if (invert)
      y2 = strb->Base.Height - y - h;
   else
      y2 = y;

    map = pipe_transfer_map(pipe,
                            strb->texture,
                            strb->rtt_level,
                            strb->rtt_face + strb->rtt_slice,
                            usage, x, y2, w, h, &strb->transfer);
   if (map) {
      if (invert) {
         *rowStrideOut = -(int) strb->transfer->stride;
         map += (h - 1) * strb->transfer->stride;
      }
      else {
         *rowStrideOut = strb->transfer->stride;
      }
      *mapOut = map;
   }
   else {
      *mapOut = NULL;
      *rowStrideOut = 0;
   }
}


/**
 * Called via ctx->Driver.UnmapRenderbuffer.
 */
static void
st_UnmapRenderbuffer(struct gl_context *ctx,
                     struct gl_renderbuffer *rb)
{
   struct st_context *st = st_context(ctx);
   struct st_renderbuffer *strb = st_renderbuffer(rb);
   struct pipe_context *pipe = st->pipe;

   if (strb->software) {
      /* software-allocated renderbuffer (probably an accum buffer) */
      return;
   }

   pipe_transfer_unmap(pipe, strb->transfer);
   strb->transfer = NULL;
}



d601 1
d605 1
a605 1
   functions->FramebufferRenderbuffer = _mesa_framebuffer_renderbuffer;
d609 4
a615 3

   functions->MapRenderbuffer = st_MapRenderbuffer;
   functions->UnmapRenderbuffer = st_UnmapRenderbuffer;
d618 8
d627 2
@


1.1.1.3
log
@Import Mesa 9.2.1
@
text
@d505 1
a505 1
   if (!stObj || !stObj->pt)
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d298 1
a298 1

a309 10
   case PIPE_FORMAT_R8G8B8A8_SRGB:
   case PIPE_FORMAT_B8G8R8A8_SRGB:
   case PIPE_FORMAT_A8R8G8B8_SRGB:
      strb->Base.InternalFormat = GL_SRGB8_ALPHA8;
      break;
   case PIPE_FORMAT_R8G8B8X8_SRGB:
   case PIPE_FORMAT_B8G8R8X8_SRGB:
   case PIPE_FORMAT_X8R8G8B8_SRGB:
      strb->Base.InternalFormat = GL_SRGB8;
      break;
a391 75
 * Create or update the pipe_surface of a FBO renderbuffer.
 * This is usually called after st_finalize_texture.
 */
void
st_update_renderbuffer_surface(struct st_context *st,
                               struct st_renderbuffer *strb)
{
   struct pipe_context *pipe = st->pipe;
   struct pipe_resource *resource = strb->texture;
   int rtt_width = strb->Base.Width;
   int rtt_height = strb->Base.Height;
   int rtt_depth = strb->Base.Depth;
   /*
    * For winsys fbo, it is possible that the renderbuffer is sRGB-capable but
    * the format of strb->texture is linear (because we have no control over
    * the format).  Check strb->Base.Format instead of strb->texture->format
    * to determine if the rb is sRGB-capable.
    */
   boolean enable_srgb = (st->ctx->Color.sRGBEnabled &&
         _mesa_get_format_color_encoding(strb->Base.Format) == GL_SRGB);
   enum pipe_format format = (enable_srgb) ?
      util_format_srgb(resource->format) :
      util_format_linear(resource->format);
   unsigned first_layer, last_layer, level;

   if (resource->target == PIPE_TEXTURE_1D_ARRAY) {
      rtt_depth = rtt_height;
      rtt_height = 1;
   }

   /* find matching mipmap level size */
   for (level = 0; level <= resource->last_level; level++) {
      if (u_minify(resource->width0, level) == rtt_width &&
          u_minify(resource->height0, level) == rtt_height &&
          (resource->target != PIPE_TEXTURE_3D ||
           u_minify(resource->depth0, level) == rtt_depth)) {
         break;
      }
   }
   assert(level <= resource->last_level);

   /* determine the layer bounds */
   if (strb->rtt_layered) {
      first_layer = 0;
      last_layer = util_max_layer(strb->texture, level);
   }
   else {
      first_layer =
      last_layer = strb->rtt_face + strb->rtt_slice;
   }

   if (!strb->surface ||
       strb->surface->texture->nr_samples != strb->Base.NumSamples ||
       strb->surface->format != format ||
       strb->surface->texture != resource ||
       strb->surface->width != rtt_width ||
       strb->surface->height != rtt_height ||
       strb->surface->u.tex.level != level ||
       strb->surface->u.tex.first_layer != first_layer ||
       strb->surface->u.tex.last_layer != last_layer) {
      /* create a new pipe_surface */
      struct pipe_surface surf_tmpl;
      memset(&surf_tmpl, 0, sizeof(surf_tmpl));
      surf_tmpl.format = format;
      surf_tmpl.u.tex.level = level;
      surf_tmpl.u.tex.first_layer = first_layer;
      surf_tmpl.u.tex.last_layer = last_layer;

      pipe_surface_reference(&strb->surface, NULL);

      strb->surface = pipe->create_surface(pipe, resource, &surf_tmpl);
   }
}

/**
d404 2
d413 3
d417 2
a418 1
   strb->is_rtt = TRUE;
d421 2
a422 2
   strb->rtt_layered = att->Layered;
   pipe_resource_reference(&strb->texture, pt);
d426 12
a437 1
   st_update_renderbuffer_surface(st, strb);
d467 1
a467 1
   strb->is_rtt = FALSE;
d495 1
a495 1
   mesa_format texFormat;
a497 6
   /* Sanity check: we must be binding the surface as a (color) render target
    * or depth/stencil target.
    */
   assert(bindings == PIPE_BIND_RENDER_TARGET ||
          bindings == PIPE_BIND_DEPTH_STENCIL);

d516 1
a516 1
      const mesa_format linearFormat = _mesa_get_srgb_format_linear(texFormat);
d634 1
a634 4

      if (idx >= 0) {
         st_manager_add_color_renderbuffer(st, fb, idx);
      }
d651 1
a651 2
   if (fb->_ColorReadBufferIndex >= 0)
      st_manager_add_color_renderbuffer(st, fb, fb->_ColorReadBufferIndex);
d709 2
a710 2
                            strb->surface->u.tex.level,
                            strb->surface->u.tex.first_layer,
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@a452 11
   /* Adjust for texture views */
   if (strb->is_rtt && resource->array_size > 1 &&
       strb->Base.TexImage->TexObject->Immutable) {
      struct gl_texture_object *tex = strb->Base.TexImage->TexObject;
      first_layer += tex->MinLayer;
      if (!strb->rtt_layered)
         last_layer += tex->MinLayer;
      else
         last_layer = MIN2(first_layer + tex->NumLayers - 1, last_layer);
   }

d591 1
a591 1
      format = st_mesa_format_to_pipe_format(st_context(ctx), linearFormat);
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d453 11
d602 1
a602 1
      format = st_mesa_format_to_pipe_format(linearFormat);
@


