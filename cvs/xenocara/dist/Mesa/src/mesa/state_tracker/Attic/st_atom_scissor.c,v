head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.06.41;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.20;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.10;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */
 

#include "main/macros.h"
#include "st_context.h"
#include "pipe/p_context.h"
#include "st_atom.h"


/**
 * Scissor depends on the scissor box, and the framebuffer dimensions.
 */
static void
update_scissor( struct st_context *st )
{
   struct pipe_scissor_state scissor[PIPE_MAX_VIEWPORTS];
   const struct gl_context *ctx = st->ctx;
   const struct gl_framebuffer *fb = ctx->DrawBuffer;
   GLint miny, maxy;
   int i;
   bool changed = false;
   for (i = 0 ; i < ctx->Const.MaxViewports; i++) {
      scissor[i].minx = 0;
      scissor[i].miny = 0;
      scissor[i].maxx = fb->Width;
      scissor[i].maxy = fb->Height;

      if (ctx->Scissor.EnableFlags & (1 << i)) {
         /* need to be careful here with xmax or ymax < 0 */
         GLint xmax = MAX2(0, ctx->Scissor.ScissorArray[i].X + ctx->Scissor.ScissorArray[i].Width);
         GLint ymax = MAX2(0, ctx->Scissor.ScissorArray[i].Y + ctx->Scissor.ScissorArray[i].Height);

         if (ctx->Scissor.ScissorArray[i].X > (GLint)scissor[i].minx)
            scissor[i].minx = ctx->Scissor.ScissorArray[i].X;
         if (ctx->Scissor.ScissorArray[i].Y > (GLint)scissor[i].miny)
            scissor[i].miny = ctx->Scissor.ScissorArray[i].Y;

         if (xmax < (GLint) scissor[i].maxx)
            scissor[i].maxx = xmax;
         if (ymax < (GLint) scissor[i].maxy)
            scissor[i].maxy = ymax;
         
         /* check for null space */
         if (scissor[i].minx >= scissor[i].maxx || scissor[i].miny >= scissor[i].maxy)
            scissor[i].minx = scissor[i].miny = scissor[i].maxx = scissor[i].maxy = 0;
      }

      /* Now invert Y if needed.
       * Gallium drivers use the convention Y=0=top for surfaces.
       */
      if (st_fb_orientation(fb) == Y_0_TOP) {
         miny = fb->Height - scissor[i].maxy;
         maxy = fb->Height - scissor[i].miny;
         scissor[i].miny = miny;
         scissor[i].maxy = maxy;
      }

      if (memcmp(&scissor[i], &st->state.scissor[i], sizeof(scissor[0])) != 0) {
         /* state has changed */
         st->state.scissor[i] = scissor[i];  /* struct copy */
         changed = true;
      }
   }
   if (changed)
      st->pipe->set_scissor_states(st->pipe, 0, ctx->Const.MaxViewports, scissor); /* activate */
}


const struct st_tracked_state st_update_scissor = {
   "st_update_scissor",					/* name */
   {							/* dirty */
      (_NEW_SCISSOR | _NEW_BUFFERS),			/* mesa */
      0,						/* st */
   },
   update_scissor					/* update */
};
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d46 1
a46 1
   struct pipe_scissor_state scissor;
d50 43
a92 40

   scissor.minx = 0;
   scissor.miny = 0;
   scissor.maxx = fb->Width;
   scissor.maxy = fb->Height;

   if (ctx->Scissor.Enabled) {
      /* need to be careful here with xmax or ymax < 0 */
      GLint xmax = MAX2(0, ctx->Scissor.X + ctx->Scissor.Width);
      GLint ymax = MAX2(0, ctx->Scissor.Y + ctx->Scissor.Height);

      if (ctx->Scissor.X > (GLint)scissor.minx)
         scissor.minx = ctx->Scissor.X;
      if (ctx->Scissor.Y > (GLint)scissor.miny)
         scissor.miny = ctx->Scissor.Y;

      if (xmax < (GLint) scissor.maxx)
         scissor.maxx = xmax;
      if (ymax < (GLint) scissor.maxy)
         scissor.maxy = ymax;

      /* check for null space */
      if (scissor.minx >= scissor.maxx || scissor.miny >= scissor.maxy)
         scissor.minx = scissor.miny = scissor.maxx = scissor.maxy = 0;
   }

   /* Now invert Y if needed.
    * Gallium drivers use the convention Y=0=top for surfaces.
    */
   if (st_fb_orientation(fb) == Y_0_TOP) {
      miny = fb->Height - scissor.maxy;
      maxy = fb->Height - scissor.miny;
      scissor.miny = miny;
      scissor.maxy = maxy;
   }

   if (memcmp(&scissor, &st->state.scissor, sizeof(scissor)) != 0) {
      /* state has changed */
      st->state.scissor = scissor;  /* struct copy */
      st->pipe->set_scissor_states(st->pipe, 0, 1, &scissor); /* activate */
d94 2
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d89 1
a89 1
      st->pipe->set_scissor_state(st->pipe, &scissor); /* activate */
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d47 2
a48 1
   const struct gl_framebuffer *fb = st->ctx->DrawBuffer;
d56 1
a56 1
   if (st->ctx->Scissor.Enabled) {
d58 2
a59 2
      GLint xmax = MAX2(0, st->ctx->Scissor.X + st->ctx->Scissor.Width);
      GLint ymax = MAX2(0, st->ctx->Scissor.Y + st->ctx->Scissor.Height);
d61 4
a64 4
      if (st->ctx->Scissor.X > (GLint)scissor.minx)
         scissor.minx = st->ctx->Scissor.X;
      if (st->ctx->Scissor.Y > (GLint)scissor.miny)
         scissor.miny = st->ctx->Scissor.Y;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d47 1
a47 2
   const struct gl_context *ctx = st->ctx;
   const struct gl_framebuffer *fb = ctx->DrawBuffer;
d55 1
a55 1
   if (ctx->Scissor.Enabled) {
d57 2
a58 2
      GLint xmax = MAX2(0, ctx->Scissor.X + ctx->Scissor.Width);
      GLint ymax = MAX2(0, ctx->Scissor.Y + ctx->Scissor.Height);
d60 4
a63 4
      if (ctx->Scissor.X > (GLint)scissor.minx)
         scissor.minx = ctx->Scissor.X;
      if (ctx->Scissor.Y > (GLint)scissor.miny)
         scissor.miny = ctx->Scissor.Y;
d88 1
a88 1
      st->pipe->set_scissor_states(st->pipe, 0, 1, &scissor); /* activate */
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keithw@@vmware.com>
d46 1
a46 1
   struct pipe_scissor_state scissor[PIPE_MAX_VIEWPORTS];
d50 40
a89 43
   int i;
   bool changed = false;
   for (i = 0 ; i < ctx->Const.MaxViewports; i++) {
      scissor[i].minx = 0;
      scissor[i].miny = 0;
      scissor[i].maxx = fb->Width;
      scissor[i].maxy = fb->Height;

      if (ctx->Scissor.EnableFlags & (1 << i)) {
         /* need to be careful here with xmax or ymax < 0 */
         GLint xmax = MAX2(0, ctx->Scissor.ScissorArray[i].X + ctx->Scissor.ScissorArray[i].Width);
         GLint ymax = MAX2(0, ctx->Scissor.ScissorArray[i].Y + ctx->Scissor.ScissorArray[i].Height);

         if (ctx->Scissor.ScissorArray[i].X > (GLint)scissor[i].minx)
            scissor[i].minx = ctx->Scissor.ScissorArray[i].X;
         if (ctx->Scissor.ScissorArray[i].Y > (GLint)scissor[i].miny)
            scissor[i].miny = ctx->Scissor.ScissorArray[i].Y;

         if (xmax < (GLint) scissor[i].maxx)
            scissor[i].maxx = xmax;
         if (ymax < (GLint) scissor[i].maxy)
            scissor[i].maxy = ymax;
         
         /* check for null space */
         if (scissor[i].minx >= scissor[i].maxx || scissor[i].miny >= scissor[i].maxy)
            scissor[i].minx = scissor[i].miny = scissor[i].maxx = scissor[i].maxy = 0;
      }

      /* Now invert Y if needed.
       * Gallium drivers use the convention Y=0=top for surfaces.
       */
      if (st_fb_orientation(fb) == Y_0_TOP) {
         miny = fb->Height - scissor[i].maxy;
         maxy = fb->Height - scissor[i].miny;
         scissor[i].miny = miny;
         scissor[i].maxy = maxy;
      }

      if (memcmp(&scissor[i], &st->state.scissor[i], sizeof(scissor[0])) != 0) {
         /* state has changed */
         st->state.scissor[i] = scissor[i];  /* struct copy */
         changed = true;
      }
a90 2
   if (changed)
      st->pipe->set_scissor_states(st->pipe, 0, ctx->Const.MaxViewports, scissor); /* activate */
@


