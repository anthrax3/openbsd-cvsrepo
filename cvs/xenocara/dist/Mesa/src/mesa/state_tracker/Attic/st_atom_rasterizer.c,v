head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.41;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.20;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.10;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.13.16;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.50.22;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */
 
#include "main/macros.h"
#include "st_context.h"
#include "st_atom.h"
#include "pipe/p_context.h"
#include "pipe/p_defines.h"
#include "cso_cache/cso_context.h"


static GLuint translate_fill( GLenum mode )
{
   switch (mode) {
   case GL_POINT:
      return PIPE_POLYGON_MODE_POINT;
   case GL_LINE:
      return PIPE_POLYGON_MODE_LINE;
   case GL_FILL:
      return PIPE_POLYGON_MODE_FILL;
   default:
      assert(0);
      return 0;
   }
}



static void update_raster_state( struct st_context *st )
{
   struct gl_context *ctx = st->ctx;
   struct pipe_rasterizer_state *raster = &st->state.rasterizer;
   const struct gl_vertex_program *vertProg = ctx->VertexProgram._Current;
   const struct gl_fragment_program *fragProg = ctx->FragmentProgram._Current;
   uint i;

   memset(raster, 0, sizeof(*raster));

   /* _NEW_POLYGON, _NEW_BUFFERS
    */
   {
      raster->front_ccw = (ctx->Polygon.FrontFace == GL_CCW);

      /*
       * Gallium's surfaces are Y=0=TOP orientation.  OpenGL is the
       * opposite.  Window system surfaces are Y=0=TOP.  Mesa's FBOs
       * must match OpenGL conventions so FBOs use Y=0=BOTTOM.  In that
       * case, we must invert Y and flip the notion of front vs. back.
       */
      if (st_fb_orientation(ctx->DrawBuffer) == Y_0_BOTTOM) {
         /* Drawing to an FBO.  The viewport will be inverted. */
         raster->front_ccw ^= 1;
      }
   }

   /* _NEW_LIGHT
    */
   raster->flatshade = ctx->Light.ShadeModel == GL_FLAT;
      
   raster->flatshade_first = ctx->Light.ProvokingVertex ==
                             GL_FIRST_VERTEX_CONVENTION_EXT;

   /* _NEW_LIGHT | _NEW_PROGRAM */
   raster->light_twoside = ctx->VertexProgram._TwoSideEnabled;

   /*_NEW_LIGHT | _NEW_BUFFERS */
   raster->clamp_vertex_color = !st->clamp_vert_color_in_shader &&
                                ctx->Light._ClampVertexColor;

   /* _NEW_POLYGON
    */
   if (ctx->Polygon.CullFlag) {
      switch (ctx->Polygon.CullFaceMode) {
      case GL_FRONT:
	 raster->cull_face = PIPE_FACE_FRONT;
         break;
      case GL_BACK:
	 raster->cull_face = PIPE_FACE_BACK;
         break;
      case GL_FRONT_AND_BACK:
	 raster->cull_face = PIPE_FACE_FRONT_AND_BACK;
         break;
      }
   }
   else {
      raster->cull_face = PIPE_FACE_NONE;
   }

   /* _NEW_POLYGON
    */
   {
      raster->fill_front = translate_fill( ctx->Polygon.FrontMode );
      raster->fill_back = translate_fill( ctx->Polygon.BackMode );

      /* Simplify when culling is active:
       */
      if (raster->cull_face & PIPE_FACE_FRONT) {
	 raster->fill_front = raster->fill_back;
      }
      
      if (raster->cull_face & PIPE_FACE_BACK) {
	 raster->fill_back = raster->fill_front;
      }
   }

   /* _NEW_POLYGON 
    */
   if (ctx->Polygon.OffsetPoint ||
       ctx->Polygon.OffsetLine ||
       ctx->Polygon.OffsetFill) {
      raster->offset_point = ctx->Polygon.OffsetPoint;
      raster->offset_line = ctx->Polygon.OffsetLine;
      raster->offset_tri = ctx->Polygon.OffsetFill;
      raster->offset_units = ctx->Polygon.OffsetUnits;
      raster->offset_scale = ctx->Polygon.OffsetFactor;
   }

   raster->poly_smooth = ctx->Polygon.SmoothFlag;
   raster->poly_stipple_enable = ctx->Polygon.StippleFlag;

   /* _NEW_POINT
    */
   raster->point_size = ctx->Point.Size;
   raster->point_smooth = !ctx->Point.PointSprite && ctx->Point.SmoothFlag;

   /* _NEW_POINT | _NEW_PROGRAM
    */
   if (ctx->Point.PointSprite) {
      /* origin */
      if ((ctx->Point.SpriteOrigin == GL_UPPER_LEFT) ^
          (st_fb_orientation(ctx->DrawBuffer) == Y_0_BOTTOM))
         raster->sprite_coord_mode = PIPE_SPRITE_COORD_UPPER_LEFT;
      else 
         raster->sprite_coord_mode = PIPE_SPRITE_COORD_LOWER_LEFT;

      /* Coord replacement flags.  If bit 'k' is set that means
       * that we need to replace GENERIC[k] attrib with an automatically
       * computed texture coord.
       */
      for (i = 0; i < MAX_TEXTURE_COORD_UNITS; i++) {
         if (ctx->Point.CoordReplace[i]) {
            raster->sprite_coord_enable |= 1 << i;
         }
      }
      if (fragProg->Base.InputsRead & VARYING_BIT_PNTC) {
         raster->sprite_coord_enable |=
            1 << (VARYING_SLOT_PNTC - VARYING_SLOT_TEX0);
      }

      raster->point_quad_rasterization = 1;
   }

   /* ST_NEW_VERTEX_PROGRAM
    */
   if (vertProg) {
      if (vertProg->Base.Id == 0) {
         if (vertProg->Base.OutputsWritten & BITFIELD64_BIT(VARYING_SLOT_PSIZ)) {
            /* generated program which emits point size */
            raster->point_size_per_vertex = TRUE;
         }
      }
      else if (ctx->VertexProgram.PointSizeEnabled) {
         /* user-defined program and GL_VERTEX_PROGRAM_POINT_SIZE set */
         raster->point_size_per_vertex = ctx->VertexProgram.PointSizeEnabled;
      }
   }
   if (!raster->point_size_per_vertex) {
      /* clamp size now */
      raster->point_size = CLAMP(ctx->Point.Size,
                                 ctx->Point.MinSize,
                                 ctx->Point.MaxSize);
   }

   /* _NEW_LINE
    */
   raster->line_smooth = ctx->Line.SmoothFlag;
   if (ctx->Line.SmoothFlag) {
      raster->line_width = CLAMP(ctx->Line.Width,
                                ctx->Const.MinLineWidthAA,
                                ctx->Const.MaxLineWidthAA);
   }
   else {
      raster->line_width = CLAMP(ctx->Line.Width,
                                ctx->Const.MinLineWidth,
                                ctx->Const.MaxLineWidth);
   }

   raster->line_stipple_enable = ctx->Line.StippleFlag;
   raster->line_stipple_pattern = ctx->Line.StipplePattern;
   /* GL stipple factor is in [1,256], remap to [0, 255] here */
   raster->line_stipple_factor = ctx->Line.StippleFactor - 1;

   /* _NEW_MULTISAMPLE */
   raster->multisample = ctx->Multisample._Enabled;

   /* _NEW_SCISSOR */
   raster->scissor = ctx->Scissor.EnableFlags;

   /* _NEW_FRAG_CLAMP */
   raster->clamp_fragment_color = !st->clamp_frag_color_in_shader &&
                                  ctx->Color._ClampFragmentColor;

   raster->half_pixel_center = 1;
   if (st_fb_orientation(ctx->DrawBuffer) == Y_0_TOP)
      raster->bottom_edge_rule = 1;

   /* ST_NEW_RASTERIZER */
   raster->rasterizer_discard = ctx->RasterDiscard;

   if (st->edgeflag_culls_prims) {
      /* All edge flags are FALSE. Cull the affected faces. */
      if (raster->fill_front != PIPE_POLYGON_MODE_FILL)
         raster->cull_face |= PIPE_FACE_FRONT;
      if (raster->fill_back != PIPE_POLYGON_MODE_FILL)
         raster->cull_face |= PIPE_FACE_BACK;
   }

   /* _NEW_TRANSFORM */
   raster->depth_clip = ctx->Transform.DepthClamp == GL_FALSE;
   raster->clip_plane_enable = ctx->Transform.ClipPlanesEnabled;

   cso_set_rasterizer(st->cso_context, raster);
}

const struct st_tracked_state st_update_rasterizer = {
   "st_update_rasterizer",    /* name */
   {
      (_NEW_BUFFERS |
       _NEW_LIGHT |
       _NEW_LINE |
       _NEW_MULTISAMPLE |
       _NEW_POINT |
       _NEW_POLYGON |
       _NEW_PROGRAM |
       _NEW_SCISSOR |
       _NEW_FRAG_CLAMP |
       _NEW_TRANSFORM),      /* mesa state dependencies*/
      (ST_NEW_VERTEX_PROGRAM |
       ST_NEW_RASTERIZER),  /* state tracker dependencies */
   },
   update_raster_state     /* update function */
};
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a35 2
#include "st_debug.h"
#include "st_program.h"
a72 5
      /* _NEW_TRANSFORM */
      if (ctx->Transform.ClipOrigin == GL_UPPER_LEFT) {
         raster->front_ccw ^= 1;
      }

d121 2
a122 8
      if (ST_DEBUG & DEBUG_WIREFRAME) {
         raster->fill_front = PIPE_POLYGON_MODE_LINE;
         raster->fill_back = PIPE_POLYGON_MODE_LINE;
      }
      else {
         raster->fill_front = translate_fill( ctx->Polygon.FrontMode );
         raster->fill_back = translate_fill( ctx->Polygon.BackMode );
      }
d174 1
a174 2
      if (!st->needs_texcoord_semantic &&
          fragProg->Base.InputsRead & VARYING_BIT_PNTC) {
d176 1
a176 1
            1 << st_get_generic_varying_index(st, VARYING_SLOT_PNTC);
a234 3
   /* _NEW_TRANSFORM */
   if (ctx->Transform.ClipOrigin == GL_UPPER_LEFT)
      raster->bottom_edge_rule ^= 1;
d248 1
a248 1
   raster->depth_clip = !ctx->Transform.DepthClamp;
a249 1
   raster->clip_halfz = (ctx->Transform.ClipDepthMode == GL_ZERO_TO_ONE);
d266 1
a266 1
       _NEW_TRANSFORM),     /* mesa state dependencies*/
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d36 2
d75 5
d128 8
a135 2
      raster->fill_front = translate_fill( ctx->Polygon.FrontMode );
      raster->fill_back = translate_fill( ctx->Polygon.BackMode );
d187 2
a188 1
      if (fragProg->Base.InputsRead & VARYING_BIT_PNTC) {
d190 1
a190 1
            1 << (VARYING_SLOT_PNTC - VARYING_SLOT_TEX0);
d249 3
d265 1
a265 1
   raster->depth_clip = ctx->Transform.DepthClamp == GL_FALSE;
d267 1
d284 1
a284 1
       _NEW_TRANSFORM),      /* mesa state dependencies*/
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d226 1
a226 1
   raster->scissor = ctx->Scissor.Enabled;
d238 8
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d87 4
a90 2
   if (ctx->Light.ShadeModel == GL_FLAT)
      raster->flatshade = 1;
d92 2
a93 2
   if (ctx->Light.ProvokingVertex == GL_FIRST_VERTEX_CONVENTION_EXT)
      raster->flatshade_first = 1;
d95 3
a97 23
   /* _NEW_LIGHT | _NEW_PROGRAM
    *
    * Back-face colors can come from traditional lighting (when
    * GL_LIGHT_MODEL_TWO_SIDE is set) or from vertex programs/shaders (when
    * GL_VERTEX_PROGRAM_TWO_SIDE is set).  Note the logic here.
    */
   if (ctx->VertexProgram._Current) {
      if (ctx->VertexProgram._Enabled ||
          (ctx->Shader.CurrentVertexProgram &&
           ctx->Shader.CurrentVertexProgram->LinkStatus)) {
         /* user-defined vertex program or shader */
         raster->light_twoside = ctx->VertexProgram.TwoSideEnabled;
      }
      else {
         /* TNL-generated program */
         raster->light_twoside = ctx->Light.Enabled && ctx->Light.Model.TwoSide;
      }
   }
   else if (ctx->Light.Enabled && ctx->Light.Model.TwoSide) {
      raster->light_twoside = 1;
   }

   raster->clamp_vertex_color = ctx->Light._ClampVertexColor;
d137 3
a139 2
   if (ctx->Polygon.OffsetUnits != 0.0 ||
       ctx->Polygon.OffsetFactor != 0.0) {
a142 5
   }

   if (ctx->Polygon.OffsetPoint ||
       ctx->Polygon.OffsetLine ||
       ctx->Polygon.OffsetFill) {
d147 2
a148 5
   if (ctx->Polygon.SmoothFlag)
      raster->poly_smooth = 1;

   if (ctx->Polygon.StippleFlag)
      raster->poly_stipple_enable = 1;
d153 1
a153 3

   if (!ctx->Point.PointSprite && ctx->Point.SmoothFlag)
      raster->point_smooth = 1;
d174 1
a174 1
      if (fragProg->Base.InputsRead & FRAG_BIT_PNTC) {
d176 1
a176 1
            1 << (FRAG_ATTRIB_PNTC - FRAG_ATTRIB_TEX0);
d186 1
a186 1
         if (vertProg->Base.OutputsWritten & BITFIELD64_BIT(VERT_RESULT_PSIZ)) {
d223 1
a223 2
   if (ctx->Multisample._Enabled || st->force_msaa)
      raster->multisample = 1;
d226 1
a226 2
   if (ctx->Scissor.Enabled)
      raster->scissor = 1;
d229 2
a230 1
   raster->clamp_fragment_color = ctx->Color._ClampFragmentColor;
d232 10
a241 1
   raster->gl_rasterization_rules = 1;
d257 4
a260 2
       _NEW_FRAG_CLAMP),      /* mesa state dependencies*/
      ST_NEW_VERTEX_PROGRAM,  /* state tracker dependencies */
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d73 5
a77 5
      /* XXX
       * I think the intention here is that user-created framebuffer objects
       * use Y=0=TOP layout instead of OpenGL's normal Y=0=bottom layout.
       * Flipping Y changes CW to CCW and vice-versa.
       * But this is an implementation/driver-specific artifact - remove...
d79 2
a80 1
      if (ctx->DrawBuffer && ctx->DrawBuffer->Name != 0)
d82 1
d115 2
d257 3
d275 2
a276 1
       _NEW_SCISSOR),      /* mesa state dependencies*/
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a55 15
static GLboolean get_offset_flag( GLuint fill_mode, 
				  const struct gl_polygon_attrib *p )
{
   switch (fill_mode) {
   case PIPE_POLYGON_MODE_POINT:
      return p->OffsetPoint;
   case PIPE_POLYGON_MODE_LINE:
      return p->OffsetLine;
   case PIPE_POLYGON_MODE_FILL:
      return p->OffsetFill;
   default:
      assert(0);
      return 0;
   }
}
d60 1
a60 1
   GLcontext *ctx = st->ctx;
d63 1
d71 1
a71 4
      if (ctx->Polygon.FrontFace == GL_CCW)
         raster->front_winding = PIPE_WINDING_CCW;
      else
         raster->front_winding = PIPE_WINDING_CW;
d80 1
a80 1
         raster->front_winding ^= PIPE_WINDING_BOTH;
d99 2
a100 3
          (ctx->Shader.CurrentProgram &&
           ctx->Shader.CurrentProgram->VertexProgram &&
           ctx->Shader.CurrentProgram->LinkStatus)) {
d116 10
a125 8
      if (ctx->Polygon.CullFaceMode == GL_FRONT_AND_BACK) {
	 raster->cull_mode = PIPE_WINDING_BOTH;
      }
      else if (ctx->Polygon.CullFaceMode == GL_FRONT) {
	 raster->cull_mode = raster->front_winding;
      }
      else {
	 raster->cull_mode = raster->front_winding ^ PIPE_WINDING_BOTH;
d127 3
d135 2
a136 11
      GLuint fill_front = translate_fill( ctx->Polygon.FrontMode );
      GLuint fill_back = translate_fill( ctx->Polygon.BackMode );
      
      if (raster->front_winding == PIPE_WINDING_CW) {
	 raster->fill_cw = fill_front;
	 raster->fill_ccw = fill_back;
      }
      else {
	 raster->fill_cw = fill_back;
	 raster->fill_ccw = fill_front;
      }
d140 2
a141 2
      if (raster->cull_mode & PIPE_WINDING_CW) {
	 raster->fill_cw = raster->fill_ccw;
d144 2
a145 2
      if (raster->cull_mode & PIPE_WINDING_CCW) {
	 raster->fill_ccw = raster->fill_cw;
d153 8
a160 2
      raster->offset_cw = get_offset_flag( raster->fill_cw, &ctx->Polygon );
      raster->offset_ccw = get_offset_flag( raster->fill_ccw, &ctx->Polygon );
d178 2
d181 1
d187 5
d197 5
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d56 15
d75 1
a75 1
   struct gl_context *ctx = st->ctx;
a77 1
   const struct gl_fragment_program *fragProg = ctx->FragmentProgram._Current;
d85 4
a88 1
      raster->front_ccw = (ctx->Polygon.FrontFace == GL_CCW);
d97 1
a97 1
         raster->front_ccw ^= 1;
d116 3
a118 2
          (ctx->Shader.CurrentVertexProgram &&
           ctx->Shader.CurrentVertexProgram->LinkStatus)) {
d134 8
a141 10
      switch (ctx->Polygon.CullFaceMode) {
      case GL_FRONT:
	 raster->cull_face = PIPE_FACE_FRONT;
         break;
      case GL_BACK:
	 raster->cull_face = PIPE_FACE_BACK;
         break;
      case GL_FRONT_AND_BACK:
	 raster->cull_face = PIPE_FACE_FRONT_AND_BACK;
         break;
a143 3
   else {
      raster->cull_face = PIPE_FACE_NONE;
   }
d148 11
a158 2
      raster->fill_front = translate_fill( ctx->Polygon.FrontMode );
      raster->fill_back = translate_fill( ctx->Polygon.BackMode );
d162 2
a163 2
      if (raster->cull_face & PIPE_FACE_FRONT) {
	 raster->fill_front = raster->fill_back;
d166 2
a167 2
      if (raster->cull_face & PIPE_FACE_BACK) {
	 raster->fill_back = raster->fill_front;
d175 2
a176 8
      raster->offset_point = ctx->Polygon.OffsetPoint;
      raster->offset_line = ctx->Polygon.OffsetLine;
      raster->offset_tri = ctx->Polygon.OffsetFill;
   }

   if (ctx->Polygon.OffsetPoint ||
       ctx->Polygon.OffsetLine ||
       ctx->Polygon.OffsetFill) {
a193 2
   /* _NEW_POINT | _NEW_PROGRAM
    */
a194 1
      /* origin */
a199 5

      /* Coord replacement flags.  If bit 'k' is set that means
       * that we need to replace GENERIC[k] attrib with an automatically
       * computed texture coord.
       */
a204 5
      if (fragProg->Base.InputsRead & FRAG_BIT_PNTC) {
         raster->sprite_coord_enable |=
            1 << (FRAG_ATTRIB_PNTC - FRAG_ATTRIB_TEX0);
      }

@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d73 5
a77 5
      /*
       * Gallium's surfaces are Y=0=TOP orientation.  OpenGL is the
       * opposite.  Window system surfaces are Y=0=TOP.  Mesa's FBOs
       * must match OpenGL conventions so FBOs use Y=0=BOTTOM.  In that
       * case, we must invert Y and flip the notion of front vs. back.
d79 1
a79 2
      if (st_fb_orientation(ctx->DrawBuffer) == Y_0_BOTTOM) {
         /* Drawing to an FBO.  The viewport will be inverted. */
a80 1
      }
d85 2
a86 4
   raster->flatshade = ctx->Light.ShadeModel == GL_FLAT;
      
   raster->flatshade_first = ctx->Light.ProvokingVertex ==
                             GL_FIRST_VERTEX_CONVENTION_EXT;
d88 2
a89 2
   /* _NEW_LIGHT | _NEW_PROGRAM */
   raster->light_twoside = ctx->VertexProgram._TwoSideEnabled;
d91 21
a111 3
   /*_NEW_LIGHT | _NEW_BUFFERS */
   raster->clamp_vertex_color = !st->clamp_vert_color_in_shader &&
                                ctx->Light._ClampVertexColor;
d151 7
a160 3
      raster->offset_point = ctx->Polygon.OffsetPoint;
      raster->offset_line = ctx->Polygon.OffsetLine;
      raster->offset_tri = ctx->Polygon.OffsetFill;
d165 5
a169 2
   raster->poly_smooth = ctx->Polygon.SmoothFlag;
   raster->poly_stipple_enable = ctx->Polygon.StippleFlag;
d174 3
a176 1
   raster->point_smooth = !ctx->Point.PointSprite && ctx->Point.SmoothFlag;
d197 1
a197 1
      if (fragProg->Base.InputsRead & VARYING_BIT_PNTC) {
d199 1
a199 1
            1 << (VARYING_SLOT_PNTC - VARYING_SLOT_TEX0);
d209 1
a209 1
         if (vertProg->Base.OutputsWritten & BITFIELD64_BIT(VARYING_SLOT_PSIZ)) {
d246 2
a247 1
   raster->multisample = ctx->Multisample._Enabled;
d250 2
a251 1
   raster->scissor = ctx->Scissor.Enabled;
d253 1
a253 14
   /* _NEW_FRAG_CLAMP */
   raster->clamp_fragment_color = !st->clamp_frag_color_in_shader &&
                                  ctx->Color._ClampFragmentColor;

   raster->half_pixel_center = 1;
   if (st_fb_orientation(ctx->DrawBuffer) == Y_0_TOP)
      raster->bottom_edge_rule = 1;

   /* ST_NEW_RASTERIZER */
   raster->rasterizer_discard = ctx->RasterDiscard;

   /* _NEW_TRANSFORM */
   raster->depth_clip = ctx->Transform.DepthClamp == GL_FALSE;
   raster->clip_plane_enable = ctx->Transform.ClipPlanesEnabled;
d268 2
a269 5
       _NEW_SCISSOR |
       _NEW_FRAG_CLAMP |
       _NEW_TRANSFORM),      /* mesa state dependencies*/
      (ST_NEW_VERTEX_PROGRAM |
       ST_NEW_RASTERIZER),  /* state tracker dependencies */
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keithw@@vmware.com>
d226 1
a226 1
   raster->scissor = ctx->Scissor.EnableFlags;
a237 8

   if (st->edgeflag_culls_prims) {
      /* All edge flags are FALSE. Cull the affected faces. */
      if (raster->fill_front != PIPE_POLYGON_MODE_FILL)
         raster->cull_face |= PIPE_FACE_FRONT;
      if (raster->fill_back != PIPE_POLYGON_MODE_FILL)
         raster->cull_face |= PIPE_FACE_BACK;
   }
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a35 2
#include "st_debug.h"
#include "st_program.h"
a72 5
      /* _NEW_TRANSFORM */
      if (ctx->Transform.ClipOrigin == GL_UPPER_LEFT) {
         raster->front_ccw ^= 1;
      }

d121 2
a122 8
      if (ST_DEBUG & DEBUG_WIREFRAME) {
         raster->fill_front = PIPE_POLYGON_MODE_LINE;
         raster->fill_back = PIPE_POLYGON_MODE_LINE;
      }
      else {
         raster->fill_front = translate_fill( ctx->Polygon.FrontMode );
         raster->fill_back = translate_fill( ctx->Polygon.BackMode );
      }
d174 1
a174 2
      if (!st->needs_texcoord_semantic &&
          fragProg->Base.InputsRead & VARYING_BIT_PNTC) {
d176 1
a176 1
            1 << st_get_generic_varying_index(st, VARYING_SLOT_PNTC);
a234 3
   /* _NEW_TRANSFORM */
   if (ctx->Transform.ClipOrigin == GL_UPPER_LEFT)
      raster->bottom_edge_rule ^= 1;
d248 1
a248 1
   raster->depth_clip = !ctx->Transform.DepthClamp;
a249 1
   raster->clip_halfz = (ctx->Transform.ClipDepthMode == GL_ZERO_TO_ONE);
d266 1
a266 1
       _NEW_TRANSFORM),     /* mesa state dependencies*/
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d36 2
d75 5
d128 8
a135 2
      raster->fill_front = translate_fill( ctx->Polygon.FrontMode );
      raster->fill_back = translate_fill( ctx->Polygon.BackMode );
d187 2
a188 1
      if (fragProg->Base.InputsRead & VARYING_BIT_PNTC) {
d190 1
a190 1
            1 << (VARYING_SLOT_PNTC - VARYING_SLOT_TEX0);
d249 3
d265 1
a265 1
   raster->depth_clip = ctx->Transform.DepthClamp == GL_FALSE;
d267 1
d284 1
a284 1
       _NEW_TRANSFORM),      /* mesa state dependencies*/
@


