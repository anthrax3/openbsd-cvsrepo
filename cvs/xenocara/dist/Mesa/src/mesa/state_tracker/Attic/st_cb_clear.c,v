head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.42;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.20;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.10;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.13.17;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.50.23;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * Copyright 2009 VMware, Inc.  All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  *   Brian Paul
  *   Michel DÃ¤nzer
  */

#include "main/glheader.h"
#include "main/accum.h"
#include "main/formats.h"
#include "main/macros.h"
#include "main/glformats.h"
#include "program/prog_instruction.h"
#include "st_context.h"
#include "st_atom.h"
#include "st_cb_clear.h"
#include "st_cb_fbo.h"
#include "st_format.h"
#include "st_program.h"

#include "pipe/p_context.h"
#include "pipe/p_shader_tokens.h"
#include "pipe/p_state.h"
#include "pipe/p_defines.h"
#include "util/u_format.h"
#include "util/u_framebuffer.h"
#include "util/u_inlines.h"
#include "util/u_simple_shaders.h"
#include "util/u_draw_quad.h"
#include "util/u_upload_mgr.h"

#include "cso_cache/cso_context.h"


/**
 * Do per-context initialization for glClear.
 */
void
st_init_clear(struct st_context *st)
{
   memset(&st->clear, 0, sizeof(st->clear));

   st->clear.raster.half_pixel_center = 1;
   st->clear.raster.bottom_edge_rule = 1;
   st->clear.raster.depth_clip = 1;
}


/**
 * Free per-context state for glClear.
 */
void
st_destroy_clear(struct st_context *st)
{
   if (st->clear.fs) {
      cso_delete_fragment_shader(st->cso_context, st->clear.fs);
      st->clear.fs = NULL;
   }
   if (st->clear.vs) {
      cso_delete_vertex_shader(st->cso_context, st->clear.vs);
      st->clear.vs = NULL;
   }
}


/**
 * Helper function to set the fragment shaders.
 */
static INLINE void
set_fragment_shader(struct st_context *st)
{
   if (!st->clear.fs)
      st->clear.fs =
         util_make_fragment_passthrough_shader(st->pipe, TGSI_SEMANTIC_GENERIC,
                                               TGSI_INTERPOLATE_CONSTANT,
                                               TRUE);

   cso_set_fragment_shader_handle(st->cso_context, st->clear.fs);
}


/**
 * Helper function to set the vertex shader.
 */
static INLINE void
set_vertex_shader(struct st_context *st)
{
   /* vertex shader - still required to provide the linkage between
    * fragment shader input semantics and vertex_element/buffers.
    */
   if (!st->clear.vs)
   {
      const uint semantic_names[] = { TGSI_SEMANTIC_POSITION,
                                      TGSI_SEMANTIC_GENERIC };
      const uint semantic_indexes[] = { 0, 0 };
      st->clear.vs = util_make_vertex_passthrough_shader(st->pipe, 2,
                                                         semantic_names,
                                                         semantic_indexes);
   }

   cso_set_vertex_shader_handle(st->cso_context, st->clear.vs);
}


static void
set_vertex_shader_layered(struct st_context *st)
{
   struct pipe_context *pipe = st->pipe;

   if (!pipe->screen->get_param(pipe->screen, PIPE_CAP_TGSI_INSTANCEID) ||
       !pipe->screen->get_param(pipe->screen, PIPE_CAP_TGSI_VS_LAYER)) {
      assert(!"Got layered clear, but the VS layer output is unsupported");
      set_vertex_shader(st);
      return;
   }

   if (!st->clear.vs_layered) {
      st->clear.vs_layered = util_make_layered_clear_vertex_shader(pipe);
   }

   cso_set_vertex_shader_handle(st->cso_context, st->clear.vs_layered);
}


/**
 * Draw a screen-aligned quadrilateral.
 * Coords are clip coords with y=0=bottom.
 */
static void
draw_quad(struct st_context *st,
          float x0, float y0, float x1, float y1, GLfloat z,
          unsigned num_instances,
          const union pipe_color_union *color)
{
   struct cso_context *cso = st->cso_context;
   struct pipe_vertex_buffer vb = {0};
   GLuint i;
   float (*vertices)[2][4];  /**< vertex pos + color */

   vb.stride = 8 * sizeof(float);

   if (u_upload_alloc(st->uploader, 0, 4 * sizeof(vertices[0]),
                      &vb.buffer_offset, &vb.buffer,
                      (void **) &vertices) != PIPE_OK) {
      return;
   }

   /* positions */
   vertices[0][0][0] = x0;
   vertices[0][0][1] = y0;

   vertices[1][0][0] = x1;
   vertices[1][0][1] = y0;

   vertices[2][0][0] = x1;
   vertices[2][0][1] = y1;

   vertices[3][0][0] = x0;
   vertices[3][0][1] = y1;

   /* same for all verts: */
   for (i = 0; i < 4; i++) {
      vertices[i][0][2] = z;
      vertices[i][0][3] = 1.0;
      vertices[i][1][0] = color->f[0];
      vertices[i][1][1] = color->f[1];
      vertices[i][1][2] = color->f[2];
      vertices[i][1][3] = color->f[3];
   }

   u_upload_unmap(st->uploader);

   /* draw */
   cso_set_vertex_buffers(cso, cso_get_aux_vertex_buffer_slot(cso), 1, &vb);
   cso_draw_arrays_instanced(cso, PIPE_PRIM_TRIANGLE_FAN, 0, 4,
                             0, num_instances);
   pipe_resource_reference(&vb.buffer, NULL);
}



/**
 * Do glClear by drawing a quadrilateral.
 * The vertices of the quad will be computed from the
 * ctx->DrawBuffer->_X/Ymin/max fields.
 */
static void
clear_with_quad(struct gl_context *ctx, unsigned clear_buffers)
{
   struct st_context *st = st_context(ctx);
   const struct gl_framebuffer *fb = ctx->DrawBuffer;
   const GLfloat fb_width = (GLfloat) fb->Width;
   const GLfloat fb_height = (GLfloat) fb->Height;
   const GLfloat x0 = (GLfloat) ctx->DrawBuffer->_Xmin / fb_width * 2.0f - 1.0f;
   const GLfloat x1 = (GLfloat) ctx->DrawBuffer->_Xmax / fb_width * 2.0f - 1.0f;
   const GLfloat y0 = (GLfloat) ctx->DrawBuffer->_Ymin / fb_height * 2.0f - 1.0f;
   const GLfloat y1 = (GLfloat) ctx->DrawBuffer->_Ymax / fb_height * 2.0f - 1.0f;
   unsigned num_layers =
      util_framebuffer_get_num_layers(&st->state.framebuffer);

   /*
   printf("%s %s%s%s %f,%f %f,%f\n", __FUNCTION__, 
	  color ? "color, " : "",
	  depth ? "depth, " : "",
	  stencil ? "stencil" : "",
	  x0, y0,
	  x1, y1);
   */

   cso_save_blend(st->cso_context);
   cso_save_stencil_ref(st->cso_context);
   cso_save_depth_stencil_alpha(st->cso_context);
   cso_save_rasterizer(st->cso_context);
   cso_save_sample_mask(st->cso_context);
   cso_save_min_samples(st->cso_context);
   cso_save_viewport(st->cso_context);
   cso_save_fragment_shader(st->cso_context);
   cso_save_stream_outputs(st->cso_context);
   cso_save_vertex_shader(st->cso_context);
   cso_save_geometry_shader(st->cso_context);
   cso_save_vertex_elements(st->cso_context);
   cso_save_aux_vertex_buffer_slot(st->cso_context);

   /* blend state: RGBA masking */
   {
      struct pipe_blend_state blend;
      memset(&blend, 0, sizeof(blend));
      if (clear_buffers & PIPE_CLEAR_COLOR) {
         int num_buffers = ctx->Extensions.EXT_draw_buffers2 ?
                           ctx->DrawBuffer->_NumColorDrawBuffers : 1;
         int i;

         blend.independent_blend_enable = num_buffers > 1;

         for (i = 0; i < num_buffers; i++) {
            if (!(clear_buffers & (PIPE_CLEAR_COLOR0 << i)))
               continue;

            if (ctx->Color.ColorMask[i][0])
               blend.rt[i].colormask |= PIPE_MASK_R;
            if (ctx->Color.ColorMask[i][1])
               blend.rt[i].colormask |= PIPE_MASK_G;
            if (ctx->Color.ColorMask[i][2])
               blend.rt[i].colormask |= PIPE_MASK_B;
            if (ctx->Color.ColorMask[i][3])
               blend.rt[i].colormask |= PIPE_MASK_A;
         }

         if (st->ctx->Color.DitherFlag)
            blend.dither = 1;
      }
      cso_set_blend(st->cso_context, &blend);
   }

   /* depth_stencil state: always pass/set to ref value */
   {
      struct pipe_depth_stencil_alpha_state depth_stencil;
      memset(&depth_stencil, 0, sizeof(depth_stencil));
      if (clear_buffers & PIPE_CLEAR_DEPTH) {
         depth_stencil.depth.enabled = 1;
         depth_stencil.depth.writemask = 1;
         depth_stencil.depth.func = PIPE_FUNC_ALWAYS;
      }

      if (clear_buffers & PIPE_CLEAR_STENCIL) {
         struct pipe_stencil_ref stencil_ref;
         memset(&stencil_ref, 0, sizeof(stencil_ref));
         depth_stencil.stencil[0].enabled = 1;
         depth_stencil.stencil[0].func = PIPE_FUNC_ALWAYS;
         depth_stencil.stencil[0].fail_op = PIPE_STENCIL_OP_REPLACE;
         depth_stencil.stencil[0].zpass_op = PIPE_STENCIL_OP_REPLACE;
         depth_stencil.stencil[0].zfail_op = PIPE_STENCIL_OP_REPLACE;
         depth_stencil.stencil[0].valuemask = 0xff;
         depth_stencil.stencil[0].writemask = ctx->Stencil.WriteMask[0] & 0xff;
         stencil_ref.ref_value[0] = ctx->Stencil.Clear;
         cso_set_stencil_ref(st->cso_context, &stencil_ref);
      }

      cso_set_depth_stencil_alpha(st->cso_context, &depth_stencil);
   }

   cso_set_vertex_elements(st->cso_context, 2, st->velems_util_draw);
   cso_set_stream_outputs(st->cso_context, 0, NULL, NULL);
   cso_set_sample_mask(st->cso_context, ~0);
   cso_set_min_samples(st->cso_context, 1);
   cso_set_rasterizer(st->cso_context, &st->clear.raster);

   /* viewport state: viewport matching window dims */
   {
      const GLboolean invert = (st_fb_orientation(fb) == Y_0_TOP);
      struct pipe_viewport_state vp;
      vp.scale[0] = 0.5f * fb_width;
      vp.scale[1] = fb_height * (invert ? -0.5f : 0.5f);
      vp.scale[2] = 1.0f;
      vp.scale[3] = 1.0f;
      vp.translate[0] = 0.5f * fb_width;
      vp.translate[1] = 0.5f * fb_height;
      vp.translate[2] = 0.0f;
      vp.translate[3] = 0.0f;
      cso_set_viewport(st->cso_context, &vp);
   }

   set_fragment_shader(st);
   cso_set_geometry_shader_handle(st->cso_context, NULL);

   if (num_layers > 1)
      set_vertex_shader_layered(st);
   else
      set_vertex_shader(st);

   /* We can't translate the clear color to the colorbuffer format,
    * because different colorbuffers may have different formats.
    */

   /* draw quad matching scissor rect */
   draw_quad(st, x0, y0, x1, y1, (GLfloat) ctx->Depth.Clear, num_layers,
             (union pipe_color_union*)&ctx->Color.ClearColor);

   /* Restore pipe state */
   cso_restore_blend(st->cso_context);
   cso_restore_stencil_ref(st->cso_context);
   cso_restore_depth_stencil_alpha(st->cso_context);
   cso_restore_rasterizer(st->cso_context);
   cso_restore_sample_mask(st->cso_context);
   cso_restore_min_samples(st->cso_context);
   cso_restore_viewport(st->cso_context);
   cso_restore_fragment_shader(st->cso_context);
   cso_restore_vertex_shader(st->cso_context);
   cso_restore_geometry_shader(st->cso_context);
   cso_restore_vertex_elements(st->cso_context);
   cso_restore_aux_vertex_buffer_slot(st->cso_context);
   cso_restore_stream_outputs(st->cso_context);
}


/**
 * Return if the scissor must be enabled during the clear.
 */
static INLINE GLboolean
is_scissor_enabled(struct gl_context *ctx, struct gl_renderbuffer *rb)
{
   return (ctx->Scissor.EnableFlags & 1) &&
          (ctx->Scissor.ScissorArray[0].X > 0 ||
           ctx->Scissor.ScissorArray[0].Y > 0 ||
           (unsigned) ctx->Scissor.ScissorArray[0].Width < rb->Width ||
           (unsigned) ctx->Scissor.ScissorArray[0].Height < rb->Height);
}


/**
 * Return if all of the color channels are masked.
 */
static INLINE GLboolean
is_color_disabled(struct gl_context *ctx, int i)
{
   return !ctx->Color.ColorMask[i][0] &&
          !ctx->Color.ColorMask[i][1] &&
          !ctx->Color.ColorMask[i][2] &&
          !ctx->Color.ColorMask[i][3];
}


/**
 * Return if any of the color channels are masked.
 */
static INLINE GLboolean
is_color_masked(struct gl_context *ctx, int i)
{
   return !ctx->Color.ColorMask[i][0] ||
          !ctx->Color.ColorMask[i][1] ||
          !ctx->Color.ColorMask[i][2] ||
          !ctx->Color.ColorMask[i][3];
}


/**
 * Return if all of the stencil bits are masked.
 */
static INLINE GLboolean
is_stencil_disabled(struct gl_context *ctx, struct gl_renderbuffer *rb)
{
   const GLuint stencilMax = 0xff;

   assert(_mesa_get_format_bits(rb->Format, GL_STENCIL_BITS) > 0);
   return (ctx->Stencil.WriteMask[0] & stencilMax) == 0;
}


/**
 * Return if any of the stencil bits are masked.
 */
static INLINE GLboolean
is_stencil_masked(struct gl_context *ctx, struct gl_renderbuffer *rb)
{
   const GLuint stencilMax = 0xff;

   assert(_mesa_get_format_bits(rb->Format, GL_STENCIL_BITS) > 0);
   return (ctx->Stencil.WriteMask[0] & stencilMax) != stencilMax;
}


/**
 * Called via ctx->Driver.Clear()
 */
static void
st_Clear(struct gl_context *ctx, GLbitfield mask)
{
   struct st_context *st = st_context(ctx);
   struct gl_renderbuffer *depthRb
      = ctx->DrawBuffer->Attachment[BUFFER_DEPTH].Renderbuffer;
   struct gl_renderbuffer *stencilRb
      = ctx->DrawBuffer->Attachment[BUFFER_STENCIL].Renderbuffer;
   GLbitfield quad_buffers = 0x0;
   GLbitfield clear_buffers = 0x0;
   GLuint i;

   /* This makes sure the pipe has the latest scissor, etc values */
   st_validate_state( st );

   if (mask & BUFFER_BITS_COLOR) {
      for (i = 0; i < ctx->DrawBuffer->_NumColorDrawBuffers; i++) {
         GLint b = ctx->DrawBuffer->_ColorDrawBufferIndexes[i];

         if (b >= 0 && mask & (1 << b)) {
            struct gl_renderbuffer *rb
               = ctx->DrawBuffer->Attachment[b].Renderbuffer;
            struct st_renderbuffer *strb = st_renderbuffer(rb);
            int colormask_index = ctx->Extensions.EXT_draw_buffers2 ? i : 0;

            if (!strb || !strb->surface)
               continue;

            if (is_color_disabled(ctx, colormask_index))
               continue;

            if (is_scissor_enabled(ctx, rb) ||
                is_color_masked(ctx, colormask_index))
               quad_buffers |= PIPE_CLEAR_COLOR0 << i;
            else
               clear_buffers |= PIPE_CLEAR_COLOR0 << i;
         }
      }
   }

   if (mask & BUFFER_BIT_DEPTH) {
      struct st_renderbuffer *strb = st_renderbuffer(depthRb);

      if (strb->surface && ctx->Depth.Mask) {
         if (is_scissor_enabled(ctx, depthRb))
            quad_buffers |= PIPE_CLEAR_DEPTH;
         else
            clear_buffers |= PIPE_CLEAR_DEPTH;
      }
   }
   if (mask & BUFFER_BIT_STENCIL) {
      struct st_renderbuffer *strb = st_renderbuffer(stencilRb);

      if (strb->surface && !is_stencil_disabled(ctx, stencilRb)) {
         if (is_scissor_enabled(ctx, stencilRb) ||
             is_stencil_masked(ctx, stencilRb))
            quad_buffers |= PIPE_CLEAR_STENCIL;
         else
            clear_buffers |= PIPE_CLEAR_STENCIL;
      }
   }

   /* Always clear depth and stencil together.
    * This can only happen when the stencil writemask is not a full mask.
    */
   if (quad_buffers & PIPE_CLEAR_DEPTHSTENCIL &&
       clear_buffers & PIPE_CLEAR_DEPTHSTENCIL) {
      quad_buffers |= clear_buffers & PIPE_CLEAR_DEPTHSTENCIL;
      clear_buffers &= ~PIPE_CLEAR_DEPTHSTENCIL;
   }

   /* Only use quad-based clearing for the renderbuffers which cannot
    * use pipe->clear. We want to always use pipe->clear for the other
    * renderbuffers, because it's likely to be faster.
    */
   if (quad_buffers) {
      clear_with_quad(ctx, quad_buffers);
   }
   if (clear_buffers) {
      /* We can't translate the clear color to the colorbuffer format,
       * because different colorbuffers may have different formats.
       */
      st->pipe->clear(st->pipe, clear_buffers,
                      (union pipe_color_union*)&ctx->Color.ClearColor,
                      ctx->Depth.Clear, ctx->Stencil.Clear);
   }
   if (mask & BUFFER_BIT_ACCUM)
      _mesa_clear_accum_buffer(ctx);
}


void
st_init_clear_functions(struct dd_function_table *functions)
{
   functions->Clear = st_Clear;
}
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a90 8
   if (st->clear.vs_layered) {
      cso_delete_vertex_shader(st->cso_context, st->clear.vs_layered);
      st->clear.vs_layered = NULL;
   }
   if (st->clear.gs_layered) {
      cso_delete_geometry_shader(st->cso_context, st->clear.gs_layered);
      st->clear.gs_layered = NULL;
   }
a129 1
   cso_set_geometry_shader_handle(st->cso_context, NULL);
d138 3
a140 2
   if (!pipe->screen->get_param(pipe->screen, PIPE_CAP_TGSI_INSTANCEID)) {
      assert(!"Got layered clear, but VS instancing is unsupported");
d146 1
a146 8
      bool vs_layer =
         pipe->screen->get_param(pipe->screen, PIPE_CAP_TGSI_VS_LAYER_VIEWPORT);
      if (vs_layer) {
         st->clear.vs_layered = util_make_layered_clear_vertex_shader(pipe);
      } else {
         st->clear.vs_layered = util_make_layered_clear_helper_vertex_shader(pipe);
         st->clear.gs_layered = util_make_layered_clear_geometry_shader(pipe);
      }
a149 1
   cso_set_geometry_shader_handle(st->cso_context, st->clear.gs_layered);
a175 3
   /* Convert Z from [0,1] to [-1,1] range */
   z = z * 2.0f - 1.0f;

d322 1
a322 1
      vp.scale[2] = 0.5f;
d326 1
a326 1
      vp.translate[2] = 0.5f;
d332 1
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d91 8
d138 1
d147 2
a148 3
   if (!pipe->screen->get_param(pipe->screen, PIPE_CAP_TGSI_INSTANCEID) ||
       !pipe->screen->get_param(pipe->screen, PIPE_CAP_TGSI_VS_LAYER)) {
      assert(!"Got layered clear, but the VS layer output is unsupported");
d154 8
a161 1
      st->clear.vs_layered = util_make_layered_clear_vertex_shader(pipe);
d165 1
d192 3
d341 1
a341 1
      vp.scale[2] = 1.0f;
d345 1
a345 1
      vp.translate[2] = 0.0f;
a350 1
   cso_set_geometry_shader_handle(st->cso_context, NULL);
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d22 1
a22 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d31 1
a31 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d54 1
d133 20
d160 1
d163 3
a165 3
   struct pipe_context *pipe = st->pipe;
   struct pipe_resource *vbuf = NULL;
   GLuint i, offset;
d168 2
d171 2
a172 1
                      &offset, &vbuf, (void **) &vertices) != PIPE_OK) {
d202 4
a205 10
   util_draw_vertex_buffer(pipe,
                           st->cso_context,
                           vbuf,
                           cso_get_aux_vertex_buffer_slot(st->cso_context),
                           offset,
                           PIPE_PRIM_TRIANGLE_FAN,
                           4,  /* verts */
                           2); /* attribs/vert */

   pipe_resource_reference(&vbuf, NULL);
d216 1
a216 2
clear_with_quad(struct gl_context *ctx,
                GLboolean color, GLboolean depth, GLboolean stencil)
d226 2
a227 1
   union pipe_color_union clearColor;
d243 1
d256 1
a256 1
      if (color) {
d264 3
d287 1
a287 1
      if (depth) {
d293 1
a293 1
      if (stencil) {
d311 1
a311 1
   cso_set_stream_outputs(st->cso_context, 0, NULL, 0);
d313 1
a331 1
   set_vertex_shader(st);
d334 8
a341 9
   if (ctx->DrawBuffer->_ColorDrawBuffers[0]) {
      struct gl_renderbuffer *rb = ctx->DrawBuffer->_ColorDrawBuffers[0];
      GLboolean is_integer = _mesa_is_enum_format_integer(rb->InternalFormat);

      st_translate_color(&ctx->Color.ClearColor,
                         &clearColor,
                         ctx->DrawBuffer->_ColorDrawBuffers[0]->_BaseFormat,
                         is_integer);
   }
d344 2
a345 1
   draw_quad(st, x0, y0, x1, y1, (GLfloat) ctx->Depth.Clear, &clearColor);
d353 1
d370 18
a387 5
   return ctx->Scissor.Enabled &&
          (ctx->Scissor.X > 0 ||
           ctx->Scissor.Y > 0 ||
           (unsigned) ctx->Scissor.Width < rb->Width ||
           (unsigned) ctx->Scissor.Height < rb->Height);
d405 13
d450 1
a450 1
         GLuint b = ctx->DrawBuffer->_ColorDrawBufferIndexes[i];
d452 1
a452 1
         if (mask & (1 << b)) {
d461 3
d466 1
a466 1
               quad_buffers |= PIPE_CLEAR_COLOR;
d468 1
a468 1
               clear_buffers |= PIPE_CLEAR_COLOR;
d476 1
a476 1
      if (strb->surface) {
d486 1
a486 1
      if (strb->surface) {
d495 12
a506 3
   /*
    * If we're going to use clear_with_quad() for any reason, use it for
    * everything possible.
d509 8
a516 19
      quad_buffers |= clear_buffers;
      clear_with_quad(ctx,
                      quad_buffers & PIPE_CLEAR_COLOR,
                      quad_buffers & PIPE_CLEAR_DEPTH,
                      quad_buffers & PIPE_CLEAR_STENCIL);
   } else if (clear_buffers) {
      union pipe_color_union clearColor;

      if (ctx->DrawBuffer->_ColorDrawBuffers[0]) {
         struct gl_renderbuffer *rb = ctx->DrawBuffer->_ColorDrawBuffers[0];
         GLboolean is_integer = _mesa_is_enum_format_integer(rb->InternalFormat);

         st_translate_color(&ctx->Color.ClearColor,
                            &clearColor,
			    ctx->DrawBuffer->_ColorDrawBuffers[0]->_BaseFormat,
			    is_integer);
      }

      st->pipe->clear(st->pipe, clear_buffers, &clearColor,
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d37 1
d40 1
a43 1
#include "st_cb_accum.h"
d57 1
a67 2
   struct pipe_screen *pscreen = st->pipe->screen;

d70 3
a72 2
   st->clear.raster.gl_rasterization_rules = 1;
   st->clear.enable_ds_separate = pscreen->get_param(pscreen, PIPE_CAP_DEPTHSTENCIL_CLEAR_SEPARATE);
a89 4
   if (st->clear.vbuf) {
      pipe_resource_reference(&st->clear.vbuf, NULL);
      st->clear.vbuf = NULL;
   }
d100 4
a103 1
      st->clear.fs = util_make_fragment_passthrough_shader(st->pipe);
d121 1
a121 1
                                      TGSI_SEMANTIC_COLOR };
d139 1
a139 1
          const GLfloat color[4])
d142 7
a148 24

   /* XXX: Need to improve buffer_write to allow NO_WAIT (as well as
    * no_flush) updates to buffers where we know there is no conflict
    * with previous data.  Currently using max_slots > 1 will cause
    * synchronous rendering if the driver flushes its command buffers
    * between one bitmap and the next.  Our flush hook below isn't
    * sufficient to catch this as the driver doesn't tell us when it
    * flushes its own command buffers.  Until this gets fixed, pay the
    * price of allocating a new buffer for each bitmap cache-flush to
    * avoid synchronous rendering.
    */
   const GLuint max_slots = 1; /* 1024 / sizeof(st->clear.vertices); */
   GLuint i;

   if (st->clear.vbuf_slot >= max_slots) {
      pipe_resource_reference(&st->clear.vbuf, NULL);
      st->clear.vbuf_slot = 0;
   }

   if (!st->clear.vbuf) {
      st->clear.vbuf = pipe_buffer_create(pipe->screen,
                                          PIPE_BIND_VERTEX_BUFFER,
                                          PIPE_USAGE_STREAM,
                                          max_slots * sizeof(st->clear.vertices));
d152 2
a153 2
   st->clear.vertices[0][0][0] = x0;
   st->clear.vertices[0][0][1] = y0;
d155 2
a156 2
   st->clear.vertices[1][0][0] = x1;
   st->clear.vertices[1][0][1] = y0;
d158 2
a159 2
   st->clear.vertices[2][0][0] = x1;
   st->clear.vertices[2][0][1] = y1;
d161 2
a162 2
   st->clear.vertices[3][0][0] = x0;
   st->clear.vertices[3][0][1] = y1;
d166 6
a171 6
      st->clear.vertices[i][0][2] = z;
      st->clear.vertices[i][0][3] = 1.0;
      st->clear.vertices[i][1][0] = color[0];
      st->clear.vertices[i][1][1] = color[1];
      st->clear.vertices[i][1][2] = color[2];
      st->clear.vertices[i][1][3] = color[3];
d174 1
a174 6
   /* put vertex data into vbuf */
   pipe_buffer_write_nooverlap(st->pipe, st->clear.vbuf,
                                           st->clear.vbuf_slot
                                             * sizeof(st->clear.vertices),
                                           sizeof(st->clear.vertices),
                                           st->clear.vertices);
d179 3
a181 2
                           st->clear.vbuf, 
                           st->clear.vbuf_slot * sizeof(st->clear.vertices),
d186 1
a186 2
   /* Increment slot */
   st->clear.vbuf_slot++;
d208 1
a208 1
   float clearColor[4];
d223 1
a224 1
   cso_save_clip(st->cso_context);
d226 1
d228 1
d230 1
a230 1
   cso_save_vertex_buffers(st->cso_context);
a235 4
      blend.rt[0].rgb_src_factor = PIPE_BLENDFACTOR_ONE;
      blend.rt[0].alpha_src_factor = PIPE_BLENDFACTOR_ONE;
      blend.rt[0].rgb_dst_factor = PIPE_BLENDFACTOR_ZERO;
      blend.rt[0].alpha_dst_factor = PIPE_BLENDFACTOR_ZERO;
d237 17
a253 8
         if (ctx->Color.ColorMask[0][0])
            blend.rt[0].colormask |= PIPE_MASK_R;
         if (ctx->Color.ColorMask[0][1])
            blend.rt[0].colormask |= PIPE_MASK_G;
         if (ctx->Color.ColorMask[0][2])
            blend.rt[0].colormask |= PIPE_MASK_B;
         if (ctx->Color.ColorMask[0][3])
            blend.rt[0].colormask |= PIPE_MASK_A;
d288 2
a289 1

a306 1
   cso_set_clip(st->cso_context, &st->clear.clip);
d309 1
d312 5
a316 1
      st_translate_color(ctx->Color.ClearColorUnclamped,
d318 1
a318 1
                         clearColor);
d322 1
a322 1
   draw_quad(st, x0, y0, x1, y1, (GLfloat) ctx->Depth.Clear, clearColor);
d329 1
a330 1
   cso_restore_clip(st->cso_context);
d333 1
d335 2
a336 1
   cso_restore_vertex_buffers(st->cso_context);
d341 1
a341 1
 * Determine if we need to clear the depth buffer by drawing a quad.
d344 1
a344 1
check_clear_color_with_quad(struct gl_context *ctx, struct gl_renderbuffer *rb)
d346 5
a350 43
   if (ctx->Scissor.Enabled &&
       (ctx->Scissor.X != 0 ||
        ctx->Scissor.Y != 0 ||
        ctx->Scissor.Width < rb->Width ||
        ctx->Scissor.Height < rb->Height))
      return GL_TRUE;

   if (!ctx->Color.ColorMask[0][0] ||
       !ctx->Color.ColorMask[0][1] ||
       !ctx->Color.ColorMask[0][2] ||
       !ctx->Color.ColorMask[0][3])
      return GL_TRUE;

   return GL_FALSE;
}


/**
 * Determine if we need to clear the combiend depth/stencil buffer by
 * drawing a quad.
 */
static INLINE GLboolean
check_clear_depth_stencil_with_quad(struct gl_context *ctx, struct gl_renderbuffer *rb)
{
   const GLuint stencilMax = 0xff;
   GLboolean maskStencil
      = (ctx->Stencil.WriteMask[0] & stencilMax) != stencilMax;

   assert(rb->Format == MESA_FORMAT_S8 ||
          rb->Format == MESA_FORMAT_Z24_S8 ||
          rb->Format == MESA_FORMAT_S8_Z24);

   if (ctx->Scissor.Enabled &&
       (ctx->Scissor.X != 0 ||
        ctx->Scissor.Y != 0 ||
        ctx->Scissor.Width < rb->Width ||
        ctx->Scissor.Height < rb->Height))
      return GL_TRUE;

   if (maskStencil)
      return GL_TRUE;

   return GL_FALSE;
d355 1
a355 1
 * Determine if we need to clear the depth buffer by drawing a quad.
d358 1
a358 2
check_clear_depth_with_quad(struct gl_context *ctx, struct gl_renderbuffer *rb,
                            boolean ds_separate)
d360 4
a363 14
   const struct st_renderbuffer *strb = st_renderbuffer(rb);
   const GLboolean isDS = util_format_is_depth_and_stencil(strb->surface->format);

   if (ctx->Scissor.Enabled &&
       (ctx->Scissor.X != 0 ||
        ctx->Scissor.Y != 0 ||
        ctx->Scissor.Width < rb->Width ||
        ctx->Scissor.Height < rb->Height))
      return GL_TRUE;

   if (!ds_separate && isDS && ctx->DrawBuffer->Visual.stencilBits > 0)
      return GL_TRUE;

   return GL_FALSE;
d368 1
a368 1
 * Determine if we need to clear the stencil buffer by drawing a quad.
d371 1
a371 2
check_clear_stencil_with_quad(struct gl_context *ctx, struct gl_renderbuffer *rb,
                              boolean ds_separate)
a372 2
   const struct st_renderbuffer *strb = st_renderbuffer(rb);
   const GLboolean isDS = util_format_is_depth_and_stencil(strb->surface->format);
a373 24
   const GLboolean maskStencil
      = (ctx->Stencil.WriteMask[0] & stencilMax) != stencilMax;

   assert(rb->Format == MESA_FORMAT_S8 ||
          rb->Format == MESA_FORMAT_Z24_S8 ||
          rb->Format == MESA_FORMAT_S8_Z24);

   if (maskStencil) 
      return GL_TRUE;

   if (ctx->Scissor.Enabled &&
       (ctx->Scissor.X != 0 ||
        ctx->Scissor.Y != 0 ||
        ctx->Scissor.Width < rb->Width ||
        ctx->Scissor.Height < rb->Height))
      return GL_TRUE;

   /* This is correct, but it is necessary to look at the depth clear
    * value held in the surface when it comes time to issue the clear,
    * rather than taking depth and stencil clear values from the
    * current state.
    */
   if (!ds_separate && isDS && ctx->DrawBuffer->Visual.depthBits > 0)
      return GL_TRUE;
d375 2
a376 1
   return GL_FALSE;
a379 16

/**
 * Called when we need to flush.
 */
void
st_flush_clear(struct st_context *st)
{
   /* Release vertex buffer to avoid synchronous rendering if we were
    * to map it in the next frame.
    */
   pipe_resource_reference(&st->clear.vbuf, NULL);
   st->clear.vbuf_slot = 0;
}
 


a385 2
   static const GLbitfield BUFFER_BITS_DS
      = (BUFFER_BIT_DEPTH | BUFFER_BIT_STENCIL);
d406 1
d411 2
a412 1
            if (check_clear_color_with_quad( ctx, rb ))
d420 1
a420 2
   if ((mask & BUFFER_BITS_DS) == BUFFER_BITS_DS && depthRb == stencilRb) {
      /* clearing combined depth + stencil */
d424 2
a425 2
         if (check_clear_depth_stencil_with_quad(ctx, depthRb))
            quad_buffers |= PIPE_CLEAR_DEPTHSTENCIL;
d427 1
a427 1
            clear_buffers |= PIPE_CLEAR_DEPTHSTENCIL;
d430 2
a431 16
   else {
      /* separate depth/stencil clears */
      /* I don't think truly separate buffers are actually possible in gallium or hw? */
      if (mask & BUFFER_BIT_DEPTH) {
         struct st_renderbuffer *strb = st_renderbuffer(depthRb);

         if (strb->surface) {
            if (check_clear_depth_with_quad(ctx, depthRb,
                                            st->clear.enable_ds_separate))
               quad_buffers |= PIPE_CLEAR_DEPTH;
            else
               clear_buffers |= PIPE_CLEAR_DEPTH;
         }
      }
      if (mask & BUFFER_BIT_STENCIL) {
         struct st_renderbuffer *strb = st_renderbuffer(stencilRb);
d433 6
a438 7
         if (strb->surface) {
            if (check_clear_stencil_with_quad(ctx, stencilRb,
                                              st->clear.enable_ds_separate))
               quad_buffers |= PIPE_CLEAR_STENCIL;
            else
               clear_buffers |= PIPE_CLEAR_STENCIL;
         }
d453 1
a453 13
      /* driver cannot know it can clear everything if the buffer
       * is a combined depth/stencil buffer but this wasn't actually
       * required from the visual. Hence fix this up to avoid potential
       * read-modify-write in the driver.
       */
      float clearColor[4];

      if ((clear_buffers & PIPE_CLEAR_DEPTHSTENCIL) &&
          ((clear_buffers & PIPE_CLEAR_DEPTHSTENCIL) != PIPE_CLEAR_DEPTHSTENCIL) &&
          (depthRb == stencilRb) &&
          (ctx->DrawBuffer->Visual.depthBits == 0 ||
           ctx->DrawBuffer->Visual.stencilBits == 0))
         clear_buffers |= PIPE_CLEAR_DEPTHSTENCIL;
d456 7
a462 3
         st_translate_color(ctx->Color.ClearColor,
                            ctx->DrawBuffer->_ColorDrawBuffers[0]->_BaseFormat,
                            clearColor);
d465 1
a465 1
      st->pipe->clear(st->pipe, clear_buffers, ctx->Color.ClearColorUnclamped,
d469 1
a469 2
      st_clear_accum_buffer(ctx,
                            ctx->DrawBuffer->Attachment[BUFFER_ACCUM].Renderbuffer);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a65 1
   struct pipe_context *pipe = st->pipe;
a71 13

   /* fragment shader state: color pass-through program */
   st->clear.fs = util_make_fragment_passthrough_shader(pipe);

   /* vertex shader state: color/position pass-through */
   {
      const uint semantic_names[] = { TGSI_SEMANTIC_POSITION,
                                      TGSI_SEMANTIC_COLOR };
      const uint semantic_indexes[] = { 0, 0 };
      st->clear.vs = util_make_vertex_passthrough_shader(pipe, 2,
                                                         semantic_names,
                                                         semantic_indexes);
   }
d97 36
d164 1
d199 2
a200 1
   util_draw_vertex_buffer(pipe, 
d250 1
d322 2
a323 2
   cso_set_fragment_shader_handle(st->cso_context, st->clear.fs);
   cso_set_vertex_shader_handle(st->cso_context, st->clear.vs);
d326 1
a326 1
      st_translate_color(ctx->Color.ClearColor,
d344 1
d588 1
a588 1
      st->pipe->clear(st->pipe, clear_buffers, ctx->Color.ClearColor,
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d39 1
a39 1
#include "shader/prog_instruction.h"
d45 1
a46 2
#include "st_public.h"
#include "st_inlines.h"
d49 1
a49 1
#include "util/u_inlines.h"
d53 1
d60 3
d67 1
d72 1
d75 1
a75 2
   st->clear.fs =
      util_make_fragment_passthrough_shader(pipe);
d89 3
d104 1
a104 1
      pipe_buffer_reference(&st->clear.vbuf, NULL);
d115 1
a115 1
draw_quad(GLcontext *ctx,
a118 1
   struct st_context *st = ctx->st;
d135 1
a135 1
      pipe_buffer_reference(&st->clear.vbuf, NULL);
d140 2
a141 1
      st->clear.vbuf = pipe_buffer_create(pipe->screen, 32, PIPE_BUFFER_USAGE_VERTEX,
d169 3
a171 2
   st_no_flush_pipe_buffer_write_nooverlap(st, st->clear.vbuf,
                                           st->clear.vbuf_slot * sizeof(st->clear.vertices),
d195 1
a195 1
clear_with_quad(GLcontext *ctx,
d198 1
a198 1
   struct st_context *st = ctx->st;
d206 1
d225 1
d277 2
d300 8
a307 2
   /* draw quad matching scissor rect (XXX verify coord round-off) */
   draw_quad(ctx, x0, y0, x1, y1, (GLfloat) ctx->Depth.Clear, ctx->Color.ClearColor);
d318 1
d326 1
a326 1
check_clear_color_with_quad(GLcontext *ctx, struct gl_renderbuffer *rb)
d333 1
a333 1
      return TRUE;
d339 1
a339 1
      return TRUE;
d341 1
a341 1
   return FALSE;
d345 4
d350 1
a350 1
check_clear_depth_stencil_with_quad(GLcontext *ctx, struct gl_renderbuffer *rb)
d365 1
a365 1
      return TRUE;
d368 1
a368 1
      return TRUE;
d370 1
a370 1
   return FALSE;
d378 2
a379 1
check_clear_depth_with_quad(GLcontext *ctx, struct gl_renderbuffer *rb)
d389 1
a389 1
      return TRUE;
d391 2
a392 3
   if (isDS && 
       ctx->DrawBuffer->Visual.stencilBits > 0)
      return TRUE;
d394 1
a394 1
   return FALSE;
d402 2
a403 1
check_clear_stencil_with_quad(GLcontext *ctx, struct gl_renderbuffer *rb)
d416 1
a416 1
      return TRUE;
d423 1
a423 1
      return TRUE;
d430 2
a431 3
   if (isDS && 
       ctx->DrawBuffer->Visual.depthBits > 0)
      return TRUE;
d433 1
a433 1
   return FALSE;
d438 5
a442 1
void st_flush_clear( struct st_context *st )
d447 1
a447 1
   pipe_buffer_reference(&st->clear.vbuf, NULL);
a454 2
 * XXX: doesn't pick up the differences between front/back/left/right
 * clears.  Need to sort that out...
d456 2
a457 1
static void st_clear(GLcontext *ctx, GLbitfield mask)
d461 1
a461 1
   struct st_context *st = ctx->st;
d466 2
a467 2
   GLbitfield quad_buffers = 0;
   GLbitfield clear_buffers = 0;
d480 1
a480 1
            struct st_renderbuffer *strb;
d482 1
a482 5
            assert(rb);

            strb = st_renderbuffer(rb);

            if (!strb->surface)
d506 1
d511 3
a513 2
            if (check_clear_depth_with_quad(ctx, depthRb))
               quad_buffers |= PIPE_CLEAR_DEPTHSTENCIL;
d515 1
a515 1
               clear_buffers |= PIPE_CLEAR_DEPTHSTENCIL;
d522 3
a524 2
            if (check_clear_stencil_with_quad(ctx, stencilRb))
               quad_buffers |= PIPE_CLEAR_DEPTHSTENCIL;
d526 1
a526 1
               clear_buffers |= PIPE_CLEAR_DEPTHSTENCIL;
d539 22
a560 5
                      mask & BUFFER_BIT_DEPTH,
                      mask & BUFFER_BIT_STENCIL);
   } else if (clear_buffers)
      ctx->st->pipe->clear(ctx->st->pipe, clear_buffers, ctx->Color.ClearColor,
                           ctx->Depth.Clear, ctx->Stencil.Clear);
d562 3
d571 2
a572 1
void st_init_clear_functions(struct dd_function_table *functions)
d574 1
a574 1
   functions->Clear = st_clear;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d39 1
a39 1
#include "program/prog_instruction.h"
a44 1
#include "st_format.h"
d46 2
d50 1
a50 1
#include "pipe/p_shader_tokens.h"
a53 1
#include "util/u_inlines.h"
a59 3
/**
 * Do per-context initialization for glClear.
 */
a63 1
   struct pipe_screen *pscreen = st->pipe->screen;
a67 1
   st->clear.enable_ds_separate = pscreen->get_param(pscreen, PIPE_CAP_DEPTHSTENCIL_CLEAR_SEPARATE);
d70 2
a71 1
   st->clear.fs = util_make_fragment_passthrough_shader(pipe);
a84 3
/**
 * Free per-context state for glClear.
 */
d97 1
a97 1
      pipe_resource_reference(&st->clear.vbuf, NULL);
d108 1
a108 1
draw_quad(struct st_context *st,
d112 1
d129 1
a129 1
      pipe_resource_reference(&st->clear.vbuf, NULL);
d134 1
a134 2
      st->clear.vbuf = pipe_buffer_create(pipe->screen,
                                          PIPE_BIND_VERTEX_BUFFER,
d162 2
a163 3
   pipe_buffer_write_nooverlap(st->pipe, st->clear.vbuf,
                                           st->clear.vbuf_slot
                                             * sizeof(st->clear.vertices),
d187 1
a187 1
clear_with_quad(struct gl_context *ctx,
d190 1
a190 1
   struct st_context *st = st_context(ctx);
a197 1
   float clearColor[4];
a215 1
   cso_save_vertex_elements(st->cso_context);
a266 2
   cso_set_vertex_elements(st->cso_context, 2, st->velems_util_draw);

d288 2
a289 8
   if (ctx->DrawBuffer->_ColorDrawBuffers[0]) {
      st_translate_color(ctx->Color.ClearColor,
                         ctx->DrawBuffer->_ColorDrawBuffers[0]->_BaseFormat,
                         clearColor);
   }

   /* draw quad matching scissor rect */
   draw_quad(st, x0, y0, x1, y1, (GLfloat) ctx->Depth.Clear, clearColor);
a299 1
   cso_restore_vertex_elements(st->cso_context);
d307 1
a307 1
check_clear_color_with_quad(struct gl_context *ctx, struct gl_renderbuffer *rb)
d314 1
a314 1
      return GL_TRUE;
d320 1
a320 1
      return GL_TRUE;
d322 1
a322 1
   return GL_FALSE;
a325 4
/**
 * Determine if we need to clear the combiend depth/stencil buffer by
 * drawing a quad.
 */
d327 1
a327 1
check_clear_depth_stencil_with_quad(struct gl_context *ctx, struct gl_renderbuffer *rb)
d342 1
a342 1
      return GL_TRUE;
d345 1
a345 1
      return GL_TRUE;
d347 1
a347 1
   return GL_FALSE;
d355 1
a355 2
check_clear_depth_with_quad(struct gl_context *ctx, struct gl_renderbuffer *rb,
                            boolean ds_separate)
d365 1
a365 1
      return GL_TRUE;
d367 3
a369 2
   if (!ds_separate && isDS && ctx->DrawBuffer->Visual.stencilBits > 0)
      return GL_TRUE;
d371 1
a371 1
   return GL_FALSE;
d379 1
a379 2
check_clear_stencil_with_quad(struct gl_context *ctx, struct gl_renderbuffer *rb,
                              boolean ds_separate)
d392 1
a392 1
      return GL_TRUE;
d399 1
a399 1
      return GL_TRUE;
d406 3
a408 2
   if (!ds_separate && isDS && ctx->DrawBuffer->Visual.depthBits > 0)
      return GL_TRUE;
d410 1
a410 1
   return GL_FALSE;
d415 1
a415 5
/**
 * Called when we need to flush.
 */
void
st_flush_clear(struct st_context *st)
d420 1
a420 1
   pipe_resource_reference(&st->clear.vbuf, NULL);
d428 2
d431 1
a431 2
static void
st_Clear(struct gl_context *ctx, GLbitfield mask)
d435 1
a435 1
   struct st_context *st = st_context(ctx);
d440 2
a441 2
   GLbitfield quad_buffers = 0x0;
   GLbitfield clear_buffers = 0x0;
d454 1
a454 1
            struct st_renderbuffer *strb = st_renderbuffer(rb);
d456 5
a460 1
            if (!strb || !strb->surface)
a483 1
      /* I don't think truly separate buffers are actually possible in gallium or hw? */
d488 2
a489 3
            if (check_clear_depth_with_quad(ctx, depthRb,
                                            st->clear.enable_ds_separate))
               quad_buffers |= PIPE_CLEAR_DEPTH;
d491 1
a491 1
               clear_buffers |= PIPE_CLEAR_DEPTH;
d498 2
a499 3
            if (check_clear_stencil_with_quad(ctx, stencilRb,
                                              st->clear.enable_ds_separate))
               quad_buffers |= PIPE_CLEAR_STENCIL;
d501 1
a501 1
               clear_buffers |= PIPE_CLEAR_STENCIL;
d514 5
a518 22
                      quad_buffers & PIPE_CLEAR_DEPTH,
                      quad_buffers & PIPE_CLEAR_STENCIL);
   } else if (clear_buffers) {
      /* driver cannot know it can clear everything if the buffer
       * is a combined depth/stencil buffer but this wasn't actually
       * required from the visual. Hence fix this up to avoid potential
       * read-modify-write in the driver.
       */
      float clearColor[4];

      if ((clear_buffers & PIPE_CLEAR_DEPTHSTENCIL) &&
          ((clear_buffers & PIPE_CLEAR_DEPTHSTENCIL) != PIPE_CLEAR_DEPTHSTENCIL) &&
          (depthRb == stencilRb) &&
          (ctx->DrawBuffer->Visual.depthBits == 0 ||
           ctx->DrawBuffer->Visual.stencilBits == 0))
         clear_buffers |= PIPE_CLEAR_DEPTHSTENCIL;

      if (ctx->DrawBuffer->_ColorDrawBuffers[0]) {
         st_translate_color(ctx->Color.ClearColor,
                            ctx->DrawBuffer->_ColorDrawBuffers[0]->_BaseFormat,
                            clearColor);
      }
a519 3
      st->pipe->clear(st->pipe, clear_buffers, ctx->Color.ClearColor,
                      ctx->Depth.Clear, ctx->Stencil.Clear);
   }
d526 1
a526 2
void
st_init_clear_functions(struct dd_function_table *functions)
d528 1
a528 1
   functions->Clear = st_Clear;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a36 1
#include "main/accum.h"
a38 1
#include "main/glformats.h"
d42 1
a55 1
#include "util/u_upload_mgr.h"
d66 3
d71 15
a85 3
   st->clear.raster.half_pixel_center = 1;
   st->clear.raster.bottom_edge_rule = 1;
   st->clear.raster.depth_clip = 1;
d103 3
a105 36
}


/**
 * Helper function to set the fragment shaders.
 */
static INLINE void
set_fragment_shader(struct st_context *st)
{
   if (!st->clear.fs)
      st->clear.fs =
         util_make_fragment_passthrough_shader(st->pipe, TGSI_SEMANTIC_GENERIC,
                                               TGSI_INTERPOLATE_CONSTANT,
                                               TRUE);

   cso_set_fragment_shader_handle(st->cso_context, st->clear.fs);
}


/**
 * Helper function to set the vertex shader.
 */
static INLINE void
set_vertex_shader(struct st_context *st)
{
   /* vertex shader - still required to provide the linkage between
    * fragment shader input semantics and vertex_element/buffers.
    */
   if (!st->clear.vs)
   {
      const uint semantic_names[] = { TGSI_SEMANTIC_POSITION,
                                      TGSI_SEMANTIC_GENERIC };
      const uint semantic_indexes[] = { 0, 0 };
      st->clear.vs = util_make_vertex_passthrough_shader(st->pipe, 2,
                                                         semantic_names,
                                                         semantic_indexes);
a106 2

   cso_set_vertex_shader_handle(st->cso_context, st->clear.vs);
d117 1
a117 1
          const union pipe_color_union *color)
d120 23
a142 7
   struct pipe_resource *vbuf = NULL;
   GLuint i, offset;
   float (*vertices)[2][4];  /**< vertex pos + color */

   if (u_upload_alloc(st->uploader, 0, 4 * sizeof(vertices[0]),
                      &offset, &vbuf, (void **) &vertices) != PIPE_OK) {
      return;
d146 2
a147 2
   vertices[0][0][0] = x0;
   vertices[0][0][1] = y0;
d149 2
a150 2
   vertices[1][0][0] = x1;
   vertices[1][0][1] = y0;
d152 2
a153 2
   vertices[2][0][0] = x1;
   vertices[2][0][1] = y1;
d155 2
a156 2
   vertices[3][0][0] = x0;
   vertices[3][0][1] = y1;
d160 6
a165 6
      vertices[i][0][2] = z;
      vertices[i][0][3] = 1.0;
      vertices[i][1][0] = color->f[0];
      vertices[i][1][1] = color->f[1];
      vertices[i][1][2] = color->f[2];
      vertices[i][1][3] = color->f[3];
d168 6
a173 1
   u_upload_unmap(st->uploader);
d176 3
a178 5
   util_draw_vertex_buffer(pipe,
                           st->cso_context,
                           vbuf,
                           cso_get_aux_vertex_buffer_slot(st->cso_context),
                           offset,
d183 2
a184 1
   pipe_resource_reference(&vbuf, NULL);
d206 1
a206 1
   union pipe_color_union clearColor;
a220 1
   cso_save_sample_mask(st->cso_context);
d222 1
a223 1
   cso_save_stream_outputs(st->cso_context);
a224 1
   cso_save_geometry_shader(st->cso_context);
a225 1
   cso_save_aux_vertex_buffer_slot(st->cso_context);
d231 4
d236 8
a243 17
         int num_buffers = ctx->Extensions.EXT_draw_buffers2 ?
                           ctx->DrawBuffer->_NumColorDrawBuffers : 1;
         int i;

         blend.independent_blend_enable = num_buffers > 1;

         for (i = 0; i < num_buffers; i++) {
            if (ctx->Color.ColorMask[i][0])
               blend.rt[i].colormask |= PIPE_MASK_R;
            if (ctx->Color.ColorMask[i][1])
               blend.rt[i].colormask |= PIPE_MASK_G;
            if (ctx->Color.ColorMask[i][2])
               blend.rt[i].colormask |= PIPE_MASK_B;
            if (ctx->Color.ColorMask[i][3])
               blend.rt[i].colormask |= PIPE_MASK_A;
         }

d278 1
a278 2
   cso_set_stream_outputs(st->cso_context, 0, NULL, 0);
   cso_set_sample_mask(st->cso_context, ~0);
d296 3
a298 3
   set_fragment_shader(st);
   set_vertex_shader(st);
   cso_set_geometry_shader_handle(st->cso_context, NULL);
d301 1
a301 5
      struct gl_renderbuffer *rb = ctx->DrawBuffer->_ColorDrawBuffers[0];
      GLboolean is_integer = _mesa_is_enum_format_integer(rb->InternalFormat);

      st_translate_color(&ctx->Color.ClearColor,
                         &clearColor,
d303 1
a303 1
                         is_integer);
d307 1
a307 1
   draw_quad(st, x0, y0, x1, y1, (GLfloat) ctx->Depth.Clear, &clearColor);
a313 1
   cso_restore_sample_mask(st->cso_context);
d315 1
a317 1
   cso_restore_geometry_shader(st->cso_context);
a318 2
   cso_restore_aux_vertex_buffer_slot(st->cso_context);
   cso_restore_stream_outputs(st->cso_context);
d323 25
a347 1
 * Return if the scissor must be enabled during the clear.
d350 1
a350 1
is_scissor_enabled(struct gl_context *ctx, struct gl_renderbuffer *rb)
d352 19
a370 5
   return ctx->Scissor.Enabled &&
          (ctx->Scissor.X > 0 ||
           ctx->Scissor.Y > 0 ||
           (unsigned) ctx->Scissor.Width < rb->Width ||
           (unsigned) ctx->Scissor.Height < rb->Height);
d375 1
a375 1
 * Return if any of the color channels are masked.
d378 2
a379 1
is_color_masked(struct gl_context *ctx, int i)
d381 14
a394 4
   return !ctx->Color.ColorMask[i][0] ||
          !ctx->Color.ColorMask[i][1] ||
          !ctx->Color.ColorMask[i][2] ||
          !ctx->Color.ColorMask[i][3];
d399 1
a399 1
 * Return if any of the stencil bits are masked.
d402 2
a403 1
is_stencil_masked(struct gl_context *ctx, struct gl_renderbuffer *rb)
d405 2
d408 2
d411 23
a433 2
   assert(_mesa_get_format_bits(rb->Format, GL_STENCIL_BITS) > 0);
   return (ctx->Stencil.WriteMask[0] & stencilMax) != stencilMax;
d437 16
d459 2
a480 1
            int colormask_index = ctx->Extensions.EXT_draw_buffers2 ? i : 0;
d485 1
a485 2
            if (is_scissor_enabled(ctx, rb) ||
                is_color_masked(ctx, colormask_index))
d493 2
a494 1
   if (mask & BUFFER_BIT_DEPTH) {
d498 2
a499 2
         if (is_scissor_enabled(ctx, depthRb))
            quad_buffers |= PIPE_CLEAR_DEPTH;
d501 1
a501 1
            clear_buffers |= PIPE_CLEAR_DEPTH;
d504 16
a519 2
   if (mask & BUFFER_BIT_STENCIL) {
      struct st_renderbuffer *strb = st_renderbuffer(stencilRb);
d521 7
a527 6
      if (strb->surface) {
         if (is_scissor_enabled(ctx, stencilRb) ||
             is_stencil_masked(ctx, stencilRb))
            quad_buffers |= PIPE_CLEAR_STENCIL;
         else
            clear_buffers |= PIPE_CLEAR_STENCIL;
d542 13
a554 1
      union pipe_color_union clearColor;
d557 3
a559 7
         struct gl_renderbuffer *rb = ctx->DrawBuffer->_ColorDrawBuffers[0];
         GLboolean is_integer = _mesa_is_enum_format_integer(rb->InternalFormat);

         st_translate_color(&ctx->Color.ClearColor,
                            &clearColor,
			    ctx->DrawBuffer->_ColorDrawBuffers[0]->_BaseFormat,
			    is_integer);
d562 1
a562 1
      st->pipe->clear(st->pipe, clear_buffers, &clearColor,
d566 2
a567 1
      _mesa_clear_accum_buffer(ctx);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d22 1
a22 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d31 1
a31 1
  *   Keith Whitwell <keithw@@vmware.com>
a53 1
#include "util/u_framebuffer.h"
a131 20
static void
set_vertex_shader_layered(struct st_context *st)
{
   struct pipe_context *pipe = st->pipe;

   if (!pipe->screen->get_param(pipe->screen, PIPE_CAP_TGSI_INSTANCEID) ||
       !pipe->screen->get_param(pipe->screen, PIPE_CAP_TGSI_VS_LAYER)) {
      assert(!"Got layered clear, but the VS layer output is unsupported");
      set_vertex_shader(st);
      return;
   }

   if (!st->clear.vs_layered) {
      st->clear.vs_layered = util_make_layered_clear_vertex_shader(pipe);
   }

   cso_set_vertex_shader_handle(st->cso_context, st->clear.vs_layered);
}


a138 1
          unsigned num_instances,
d141 3
a143 3
   struct cso_context *cso = st->cso_context;
   struct pipe_vertex_buffer vb = {0};
   GLuint i;
a145 2
   vb.stride = 8 * sizeof(float);

d147 1
a147 2
                      &vb.buffer_offset, &vb.buffer,
                      (void **) &vertices) != PIPE_OK) {
d177 10
a186 4
   cso_set_vertex_buffers(cso, cso_get_aux_vertex_buffer_slot(cso), 1, &vb);
   cso_draw_arrays_instanced(cso, PIPE_PRIM_TRIANGLE_FAN, 0, 4,
                             0, num_instances);
   pipe_resource_reference(&vb.buffer, NULL);
d197 2
a198 1
clear_with_quad(struct gl_context *ctx, unsigned clear_buffers)
d208 1
a208 2
   unsigned num_layers =
      util_framebuffer_get_num_layers(&st->state.framebuffer);
a223 1
   cso_save_min_samples(st->cso_context);
d236 1
a236 1
      if (clear_buffers & PIPE_CLEAR_COLOR) {
a243 3
            if (!(clear_buffers & (PIPE_CLEAR_COLOR0 << i)))
               continue;

d264 1
a264 1
      if (clear_buffers & PIPE_CLEAR_DEPTH) {
d270 1
a270 1
      if (clear_buffers & PIPE_CLEAR_STENCIL) {
d288 1
a288 1
   cso_set_stream_outputs(st->cso_context, 0, NULL, NULL);
a289 1
   cso_set_min_samples(st->cso_context, 1);
d308 1
d311 9
a319 8
   if (num_layers > 1)
      set_vertex_shader_layered(st);
   else
      set_vertex_shader(st);

   /* We can't translate the clear color to the colorbuffer format,
    * because different colorbuffers may have different formats.
    */
d322 1
a322 2
   draw_quad(st, x0, y0, x1, y1, (GLfloat) ctx->Depth.Clear, num_layers,
             (union pipe_color_union*)&ctx->Color.ClearColor);
a329 1
   cso_restore_min_samples(st->cso_context);
d346 5
a350 18
   return (ctx->Scissor.EnableFlags & 1) &&
          (ctx->Scissor.ScissorArray[0].X > 0 ||
           ctx->Scissor.ScissorArray[0].Y > 0 ||
           (unsigned) ctx->Scissor.ScissorArray[0].Width < rb->Width ||
           (unsigned) ctx->Scissor.ScissorArray[0].Height < rb->Height);
}


/**
 * Return if all of the color channels are masked.
 */
static INLINE GLboolean
is_color_disabled(struct gl_context *ctx, int i)
{
   return !ctx->Color.ColorMask[i][0] &&
          !ctx->Color.ColorMask[i][1] &&
          !ctx->Color.ColorMask[i][2] &&
          !ctx->Color.ColorMask[i][3];
a367 13
 * Return if all of the stencil bits are masked.
 */
static INLINE GLboolean
is_stencil_disabled(struct gl_context *ctx, struct gl_renderbuffer *rb)
{
   const GLuint stencilMax = 0xff;

   assert(_mesa_get_format_bits(rb->Format, GL_STENCIL_BITS) > 0);
   return (ctx->Stencil.WriteMask[0] & stencilMax) == 0;
}


/**
d400 1
a400 1
         GLint b = ctx->DrawBuffer->_ColorDrawBufferIndexes[i];
d402 1
a402 1
         if (b >= 0 && mask & (1 << b)) {
a410 3
            if (is_color_disabled(ctx, colormask_index))
               continue;

d413 1
a413 1
               quad_buffers |= PIPE_CLEAR_COLOR0 << i;
d415 1
a415 1
               clear_buffers |= PIPE_CLEAR_COLOR0 << i;
d423 1
a423 1
      if (strb->surface && ctx->Depth.Mask) {
d433 1
a433 1
      if (strb->surface && !is_stencil_disabled(ctx, stencilRb)) {
d442 3
a444 2
   /* Always clear depth and stencil together.
    * This can only happen when the stencil writemask is not a full mask.
d446 18
a463 5
   if (quad_buffers & PIPE_CLEAR_DEPTHSTENCIL &&
       clear_buffers & PIPE_CLEAR_DEPTHSTENCIL) {
      quad_buffers |= clear_buffers & PIPE_CLEAR_DEPTHSTENCIL;
      clear_buffers &= ~PIPE_CLEAR_DEPTHSTENCIL;
   }
d465 1
a465 13
   /* Only use quad-based clearing for the renderbuffers which cannot
    * use pipe->clear. We want to always use pipe->clear for the other
    * renderbuffers, because it's likely to be faster.
    */
   if (quad_buffers) {
      clear_with_quad(ctx, quad_buffers);
   }
   if (clear_buffers) {
      /* We can't translate the clear color to the colorbuffer format,
       * because different colorbuffers may have different formats.
       */
      st->pipe->clear(st->pipe, clear_buffers,
                      (union pipe_color_union*)&ctx->Color.ClearColor,
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a90 8
   if (st->clear.vs_layered) {
      cso_delete_vertex_shader(st->cso_context, st->clear.vs_layered);
      st->clear.vs_layered = NULL;
   }
   if (st->clear.gs_layered) {
      cso_delete_geometry_shader(st->cso_context, st->clear.gs_layered);
      st->clear.gs_layered = NULL;
   }
a129 1
   cso_set_geometry_shader_handle(st->cso_context, NULL);
d138 3
a140 2
   if (!pipe->screen->get_param(pipe->screen, PIPE_CAP_TGSI_INSTANCEID)) {
      assert(!"Got layered clear, but VS instancing is unsupported");
d146 1
a146 8
      bool vs_layer =
         pipe->screen->get_param(pipe->screen, PIPE_CAP_TGSI_VS_LAYER_VIEWPORT);
      if (vs_layer) {
         st->clear.vs_layered = util_make_layered_clear_vertex_shader(pipe);
      } else {
         st->clear.vs_layered = util_make_layered_clear_helper_vertex_shader(pipe);
         st->clear.gs_layered = util_make_layered_clear_geometry_shader(pipe);
      }
a149 1
   cso_set_geometry_shader_handle(st->cso_context, st->clear.gs_layered);
a175 3
   /* Convert Z from [0,1] to [-1,1] range */
   z = z * 2.0f - 1.0f;

d322 1
a322 1
      vp.scale[2] = 0.5f;
d326 1
a326 1
      vp.translate[2] = 0.5f;
d332 1
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d91 8
d138 1
d147 2
a148 3
   if (!pipe->screen->get_param(pipe->screen, PIPE_CAP_TGSI_INSTANCEID) ||
       !pipe->screen->get_param(pipe->screen, PIPE_CAP_TGSI_VS_LAYER)) {
      assert(!"Got layered clear, but the VS layer output is unsupported");
d154 8
a161 1
      st->clear.vs_layered = util_make_layered_clear_vertex_shader(pipe);
d165 1
d192 3
d341 1
a341 1
      vp.scale[2] = 1.0f;
d345 1
a345 1
      vp.translate[2] = 0.0f;
a350 1
   cso_set_geometry_shader_handle(st->cso_context, NULL);
@


