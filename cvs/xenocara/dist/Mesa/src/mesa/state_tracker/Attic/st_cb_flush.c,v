head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.43;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.22;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.10;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  *   Brian Paul
  */

#include "main/glheader.h"
#include "main/macros.h"
#include "main/context.h"
#include "st_context.h"
#include "st_cb_bitmap.h"
#include "st_cb_flush.h"
#include "st_cb_clear.h"
#include "st_cb_fbo.h"
#include "st_manager.h"
#include "pipe/p_context.h"
#include "pipe/p_defines.h"
#include "pipe/p_screen.h"
#include "util/u_gen_mipmap.h"


/** Check if we have a front color buffer and if it's been drawn to. */
static INLINE GLboolean
is_front_buffer_dirty(struct st_context *st)
{
   struct gl_framebuffer *fb = st->ctx->DrawBuffer;
   struct st_renderbuffer *strb
      = st_renderbuffer(fb->Attachment[BUFFER_FRONT_LEFT].Renderbuffer);
   return strb && strb->defined;
}


/**
 * Tell the screen to display the front color buffer on-screen.
 */
static void
display_front_buffer(struct st_context *st)
{
   struct gl_framebuffer *fb = st->ctx->DrawBuffer;
   struct st_renderbuffer *strb
      = st_renderbuffer(fb->Attachment[BUFFER_FRONT_LEFT].Renderbuffer);

   if (strb) {
      /* Hook for copying "fake" frontbuffer if necessary:
       */
      st_manager_flush_frontbuffer(st);
   }
}


void st_flush(struct st_context *st,
              struct pipe_fence_handle **fence,
              unsigned flags)
{
   FLUSH_VERTICES(st->ctx, 0);
   FLUSH_CURRENT(st->ctx, 0);

   st_flush_bitmap_cache(st);

   st->pipe->flush(st->pipe, fence, flags);
}


/**
 * Flush, and wait for completion.
 */
void st_finish( struct st_context *st )
{
   struct pipe_fence_handle *fence = NULL;

   st_flush(st, &fence, 0);

   if(fence) {
      st->pipe->screen->fence_finish(st->pipe->screen, fence,
                                     PIPE_TIMEOUT_INFINITE);
      st->pipe->screen->fence_reference(st->pipe->screen, &fence, NULL);
   }
}



/**
 * Called via ctx->Driver.Flush()
 */
static void st_glFlush(struct gl_context *ctx)
{
   struct st_context *st = st_context(ctx);

   /* Don't call st_finish() here.  It is not the state tracker's
    * responsibilty to inject sleeps in the hope of avoiding buffer
    * synchronization issues.  Calling finish() here will just hide
    * problems that need to be fixed elsewhere.
    */
   st_flush(st, NULL, 0);

   if (is_front_buffer_dirty(st)) {
      display_front_buffer(st);
   }
}


/**
 * Called via ctx->Driver.Finish()
 */
static void st_glFinish(struct gl_context *ctx)
{
   struct st_context *st = st_context(ctx);

   st_finish(st);

   if (is_front_buffer_dirty(st)) {
      display_front_buffer(st);
   }
}


void st_init_flush_functions(struct dd_function_table *functions)
{
   functions->Flush = st_glFlush;
   functions->Finish = st_glFinish;

   /* Windows opengl32.dll calls glFinish prior to every swapbuffers.
    * This is unnecessary and degrades performance.  Luckily we have some
    * scope to work around this, as the externally-visible behaviour of
    * Finish() is identical to Flush() in all cases - no differences in
    * rendering or ReadPixels are visible if we opt not to wait here.
    *
    * Only set this up on windows to avoid suprise elsewhere.
    */
#ifdef PIPE_OS_WINDOWS
   functions->Finish = st_glFlush;
#endif
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a46 1
#include "util/u_blit.h"
d78 3
a80 2
void st_flush( struct st_context *st,
               struct pipe_fence_handle **fence )
d82 1
d85 1
a85 7
   /* Release any vertex buffers that might potentially be accessed in
    * successive frames:
    */
   st_flush_bitmap(st);
   st_flush_clear(st);
   util_blit_flush(st->blit);
   util_gen_mipmap_flush(st->gen_mipmap);
d87 1
a87 1
   st->pipe->flush( st->pipe, fence );
d98 1
a98 1
   st_flush(st, &fence);
d121 1
a121 1
   st_flush(st, NULL);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d79 1
a79 1
void st_flush( struct st_context *st, uint pipeFlushFlags,
d92 1
a92 1
   st->pipe->flush( st->pipe, pipeFlushFlags, fence );
d103 1
a103 1
   st_flush(st, PIPE_FLUSH_RENDER_CACHE | PIPE_FLUSH_FRAME, &fence);
d106 2
a107 1
      st->pipe->screen->fence_finish(st->pipe->screen, fence, 0);
d126 1
a126 1
   st_flush(st, PIPE_FLUSH_RENDER_CACHE | PIPE_FLUSH_FRAME, NULL);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d42 1
a42 1
#include "st_public.h"
d54 4
a57 9
   if (st->frontbuffer_status == FRONT_STATUS_DIRTY) {
      return GL_TRUE;
   }
   else {
      GLframebuffer *fb = st->ctx->DrawBuffer;
      struct st_renderbuffer *strb
         = st_renderbuffer(fb->Attachment[BUFFER_FRONT_LEFT].Renderbuffer);
      return strb && strb->defined;
   }
d67 1
a67 1
   GLframebuffer *fb = st->ctx->DrawBuffer;
a71 2
      struct pipe_surface *front_surf = strb->surface;
      
d74 1
a74 6
      st->pipe->screen->flush_frontbuffer( st->pipe->screen, front_surf,
                                           st->pipe->priv );

      /*
        st->frontbuffer_status = FRONT_STATUS_UNDEFINED;
      */
d116 1
a116 1
static void st_glFlush(GLcontext *ctx)
d118 1
a118 1
   struct st_context *st = ctx->st;
d136 1
a136 1
static void st_glFinish(GLcontext *ctx)
d138 1
a138 1
   struct st_context *st = ctx->st;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d42 1
a42 1
#include "st_manager.h"
d54 9
a62 4
   struct gl_framebuffer *fb = st->ctx->DrawBuffer;
   struct st_renderbuffer *strb
      = st_renderbuffer(fb->Attachment[BUFFER_FRONT_LEFT].Renderbuffer);
   return strb && strb->defined;
d72 1
a72 1
   struct gl_framebuffer *fb = st->ctx->DrawBuffer;
d77 2
d81 6
a86 1
      st_manager_flush_frontbuffer(st);
d128 1
a128 1
static void st_glFlush(struct gl_context *ctx)
d130 1
a130 1
   struct st_context *st = st_context(ctx);
d148 1
a148 1
static void st_glFinish(struct gl_context *ctx)
d150 1
a150 1
   struct st_context *st = st_context(ctx);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d47 1
d79 2
a80 3
void st_flush(struct st_context *st,
              struct pipe_fence_handle **fence,
              unsigned flags)
a81 1
   FLUSH_VERTICES(st->ctx, 0);
d84 7
a90 1
   st_flush_bitmap_cache(st);
d92 1
a92 1
   st->pipe->flush(st->pipe, fence, flags);
d103 1
a103 1
   st_flush(st, &fence, 0);
d106 1
a106 2
      st->pipe->screen->fence_finish(st->pipe->screen, fence,
                                     PIPE_TIMEOUT_INFINITE);
d125 1
a125 1
   st_flush(st, NULL, 0);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keithw@@vmware.com>
@


