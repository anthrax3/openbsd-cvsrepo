head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.41;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.19;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.10;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  *   Brian Paul
  */
 
#include <limits.h>

#include "st_context.h"
#include "st_atom.h"
#include "st_cb_bitmap.h"
#include "st_cb_fbo.h"
#include "st_texture.h"
#include "pipe/p_context.h"
#include "cso_cache/cso_context.h"
#include "util/u_math.h"
#include "util/u_inlines.h"
#include "util/u_format.h"


/**
 * Update framebuffer size.
 *
 * We need to derive pipe_framebuffer size from the bound pipe_surfaces here
 * instead of copying gl_framebuffer size because for certain target types
 * (like PIPE_TEXTURE_1D_ARRAY) gl_framebuffer::Height has the number of layers
 * instead of 1.
 */
static void
update_framebuffer_size(struct pipe_framebuffer_state *framebuffer,
                        struct pipe_surface *surface)
{
   assert(surface);
   assert(surface->width  < UINT_MAX);
   assert(surface->height < UINT_MAX);
   framebuffer->width  = MIN2(framebuffer->width,  surface->width);
   framebuffer->height = MIN2(framebuffer->height, surface->height);
}


/**
 * Update framebuffer state (color, depth, stencil, etc. buffers)
 */
static void
update_framebuffer_state( struct st_context *st )
{
   struct pipe_framebuffer_state *framebuffer = &st->state.framebuffer;
   struct gl_framebuffer *fb = st->ctx->DrawBuffer;
   struct st_renderbuffer *strb;
   GLuint i;

   st_flush_bitmap_cache(st);

   st->state.fb_orientation = st_fb_orientation(fb);
   framebuffer->width  = UINT_MAX;
   framebuffer->height = UINT_MAX;

   /*printf("------ fb size %d x %d\n", fb->Width, fb->Height);*/

   /* Examine Mesa's ctx->DrawBuffer->_ColorDrawBuffers state
    * to determine which surfaces to draw to
    */
   framebuffer->nr_cbufs = fb->_NumColorDrawBuffers;

   for (i = 0; i < fb->_NumColorDrawBuffers; i++) {
      pipe_surface_reference(&framebuffer->cbufs[i], NULL);

      strb = st_renderbuffer(fb->_ColorDrawBuffers[i]);

      if (strb) {
         if (strb->is_rtt || (strb->texture &&
             _mesa_get_format_color_encoding(strb->Base.Format) == GL_SRGB)) {
            /* rendering to a GL texture, may have to update surface */
            st_update_renderbuffer_surface(st, strb);
         }

         if (strb->surface) {
            pipe_surface_reference(&framebuffer->cbufs[i], strb->surface);
            update_framebuffer_size(framebuffer, strb->surface);
         }
         strb->defined = GL_TRUE; /* we'll be drawing something */
      }
   }

   for (i = framebuffer->nr_cbufs; i < PIPE_MAX_COLOR_BUFS; i++) {
      pipe_surface_reference(&framebuffer->cbufs[i], NULL);
   }

   /* Remove trailing GL_NONE draw buffers. */
   while (framebuffer->nr_cbufs &&
          !framebuffer->cbufs[framebuffer->nr_cbufs-1]) {
      framebuffer->nr_cbufs--;
   }

   /*
    * Depth/Stencil renderbuffer/surface.
    */
   strb = st_renderbuffer(fb->Attachment[BUFFER_DEPTH].Renderbuffer);
   if (strb) {
      if (strb->is_rtt) {
         /* rendering to a GL texture, may have to update surface */
         st_update_renderbuffer_surface(st, strb);
      }
      pipe_surface_reference(&framebuffer->zsbuf, strb->surface);
      update_framebuffer_size(framebuffer, strb->surface);
   }
   else {
      strb = st_renderbuffer(fb->Attachment[BUFFER_STENCIL].Renderbuffer);
      if (strb) {
         assert(strb->surface);
         pipe_surface_reference(&framebuffer->zsbuf, strb->surface);
         update_framebuffer_size(framebuffer, strb->surface);
      }
      else
         pipe_surface_reference(&framebuffer->zsbuf, NULL);
   }

#ifdef DEBUG
   /* Make sure the resource binding flags were set properly */
   for (i = 0; i < framebuffer->nr_cbufs; i++) {
      assert(!framebuffer->cbufs[i] ||
             framebuffer->cbufs[i]->texture->bind & PIPE_BIND_RENDER_TARGET);
   }
   if (framebuffer->zsbuf) {
      assert(framebuffer->zsbuf->texture->bind & PIPE_BIND_DEPTH_STENCIL);
   }
#endif

   if (framebuffer->width == UINT_MAX)
      framebuffer->width = 0;
   if (framebuffer->height == UINT_MAX)
      framebuffer->height = 0;

   cso_set_framebuffer(st->cso_context, framebuffer);
}


const struct st_tracked_state st_update_framebuffer = {
   "st_update_framebuffer",				/* name */
   {							/* dirty */
      _NEW_BUFFERS,					/* mesa */
      ST_NEW_FRAMEBUFFER,				/* st */
   },
   update_framebuffer_state				/* update */
};

@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d34 2
d49 6
a54 3
 * When doing GL render to texture, we have to be sure that finalize_texture()
 * didn't yank out the pipe_resource that we earlier created a surface for.
 * Check for that here and create a new surface if needed.
d57 2
a58 2
update_renderbuffer_surface(struct st_context *st,
                            struct st_renderbuffer *strb)
d60 5
a64 38
   struct pipe_context *pipe = st->pipe;
   struct pipe_resource *resource = strb->rtt ? strb->rtt->pt : strb->texture;
   int rtt_width = strb->Base.Width;
   int rtt_height = strb->Base.Height;
   enum pipe_format format = st->ctx->Color.sRGBEnabled ? resource->format : util_format_linear(resource->format);

   if (!strb->surface ||
       strb->surface->texture->nr_samples != strb->Base.NumSamples ||
       strb->surface->format != format ||
       strb->surface->texture != resource ||
       strb->surface->width != rtt_width ||
       strb->surface->height != rtt_height) {
      GLuint level;
      /* find matching mipmap level size */
      for (level = 0; level <= resource->last_level; level++) {
         if (u_minify(resource->width0, level) == rtt_width &&
             u_minify(resource->height0, level) == rtt_height) {
            struct pipe_surface surf_tmpl;
            memset(&surf_tmpl, 0, sizeof(surf_tmpl));
            surf_tmpl.format = format;
            surf_tmpl.u.tex.level = level;
            surf_tmpl.u.tex.first_layer = strb->rtt_face + strb->rtt_slice;
            surf_tmpl.u.tex.last_layer = strb->rtt_face + strb->rtt_slice;

            pipe_surface_reference(&strb->surface, NULL);

            strb->surface = pipe->create_surface(pipe,
                                                 resource,
                                                 &surf_tmpl);
#if 0
            printf("-- alloc new surface %d x %d into tex %p\n",
                   strb->surface->width, strb->surface->height,
                   texture);
#endif
            break;
         }
      }
   }
d82 2
a83 2
   framebuffer->width = fb->Width;
   framebuffer->height = fb->Height;
d90 2
a91 1
   framebuffer->nr_cbufs = 0;
d93 2
d98 2
a99 3
         /*printf("--------- framebuffer surface rtt %p\n", strb->rtt);*/
         if (strb->rtt ||
             (strb->texture && util_format_is_srgb(strb->texture->format))) {
d101 1
a101 1
            update_renderbuffer_surface(st, strb);
d105 2
a106 3
            pipe_surface_reference(&framebuffer->cbufs[framebuffer->nr_cbufs],
                                   strb->surface);
            framebuffer->nr_cbufs++;
d111 1
d116 6
d127 1
a127 1
      if (strb->rtt) {
d129 1
a129 1
         update_renderbuffer_surface(st, strb);
d132 1
d139 1
d148 2
a149 1
      assert(framebuffer->cbufs[i]->texture->bind & PIPE_BIND_RENDER_TARGET);
d155 5
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d36 1
d56 1
a56 1
   struct pipe_resource *resource = strb->rtt->pt;
d62 1
a74 1
            surf_tmpl.usage = PIPE_BIND_RENDER_TARGET;
d107 3
d124 2
a125 1
         if (strb->rtt) {
a146 1
      strb = st_renderbuffer(strb->Base.Wrapped);
a155 1
         strb = st_renderbuffer(strb->Base.Wrapped);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d42 1
a42 1

d58 1
d61 1
d72 1
a72 1
            surf_tmpl.format = resource->format;
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a36 1
#include "st_public.h"
a39 1
#include "util/u_rect.h"
d47 1
a47 1
 * didn't yank out the pipe_texture that we earlier created a surface for.
d54 2
a55 2
   struct pipe_screen *screen = st->pipe->screen;
   struct pipe_texture *texture = strb->rtt->pt;
d60 1
a60 1
       strb->surface->texture != texture ||
d65 10
a74 3
      for (level = 0; level <= texture->last_level; level++) {
         if (u_minify(texture->width0, level) == rtt_width &&
             u_minify(texture->height0, level) == rtt_height) {
d78 3
a80 7
            strb->surface = screen->get_tex_surface(screen,
                                              texture,
                                              strb->rtt_face,
                                              level,
                                              strb->rtt_slice,
                                              PIPE_BUFFER_USAGE_GPU_READ |
                                              PIPE_BUFFER_USAGE_GPU_WRITE);
d158 10
a168 24

   if (fb->_ColorDrawBufferIndexes[0] == BUFFER_FRONT_LEFT) {
      if (st->frontbuffer_status == FRONT_STATUS_COPY_OF_BACK) {
         /* copy back color buffer to front color buffer */
         struct st_framebuffer *stfb = (struct st_framebuffer *) fb;
	 struct pipe_surface *surf_front, *surf_back;
         (void) st_get_framebuffer_surface(stfb, ST_SURFACE_FRONT_LEFT, &surf_front);
         (void) st_get_framebuffer_surface(stfb, ST_SURFACE_BACK_LEFT, &surf_back);

         if (st->pipe->surface_copy) {
            st->pipe->surface_copy(st->pipe,
                                   surf_front, 0, 0,  /* dest */
                                   surf_back, 0, 0,   /* src */
                                   fb->Width, fb->Height);
         } else {
            util_surface_copy(st->pipe, FALSE,
                              surf_front, 0, 0,
                              surf_back, 0, 0,
                              fb->Width, fb->Height);
         }
      }
      /* we're assuming we'll really draw to the front buffer */
      st->frontbuffer_status = FRONT_STATUS_DIRTY;
   }
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d37 1
d41 1
d49 1
a49 1
 * didn't yank out the pipe_resource that we earlier created a surface for.
d56 2
a57 2
   struct pipe_context *pipe = st->pipe;
   struct pipe_resource *resource = strb->rtt->pt;
d62 1
a62 1
       strb->surface->texture != resource ||
d67 3
a69 10
      for (level = 0; level <= resource->last_level; level++) {
         if (u_minify(resource->width0, level) == rtt_width &&
             u_minify(resource->height0, level) == rtt_height) {
            struct pipe_surface surf_tmpl;
            memset(&surf_tmpl, 0, sizeof(surf_tmpl));
            surf_tmpl.format = resource->format;
            surf_tmpl.usage = PIPE_BIND_RENDER_TARGET;
            surf_tmpl.u.tex.level = level;
            surf_tmpl.u.tex.first_layer = strb->rtt_face + strb->rtt_slice;
            surf_tmpl.u.tex.last_layer = strb->rtt_face + strb->rtt_slice;
d73 7
a79 3
            strb->surface = pipe->create_surface(pipe,
                                                 resource,
                                                 &surf_tmpl);
d157 24
a180 4
#ifdef DEBUG
   /* Make sure the resource binding flags were set properly */
   for (i = 0; i < framebuffer->nr_cbufs; i++) {
      assert(framebuffer->cbufs[i]->texture->bind & PIPE_BIND_RENDER_TARGET);
a181 6
   if (framebuffer->zsbuf) {
      assert(framebuffer->zsbuf->texture->bind & PIPE_BIND_DEPTH_STENCIL);
   }
#endif

   cso_set_framebuffer(st->cso_context, framebuffer);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a35 1
#include "st_cb_bitmap.h"
d42 1
a42 1
#include "util/u_format.h"
d55 1
a55 1
   struct pipe_resource *resource = strb->rtt ? strb->rtt->pt : strb->texture;
a57 1
   enum pipe_format format = st->ctx->Color.sRGBEnabled ? resource->format : util_format_linear(resource->format);
a59 2
       strb->surface->texture->nr_samples != strb->Base.NumSamples ||
       strb->surface->format != format ||
d70 2
a71 1
            surf_tmpl.format = format;
a103 3
   st_flush_bitmap_cache(st);

   st->state.fb_orientation = st_fb_orientation(fb);
d118 1
a118 2
         if (strb->rtt ||
             (strb->texture && util_format_is_srgb(strb->texture->format))) {
d140 1
d150 1
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d30 1
a30 1
  *   Keith Whitwell <keithw@@vmware.com>
a33 2
#include <limits.h>

d47 3
a49 6
 * Update framebuffer size.
 *
 * We need to derive pipe_framebuffer size from the bound pipe_surfaces here
 * instead of copying gl_framebuffer size because for certain target types
 * (like PIPE_TEXTURE_1D_ARRAY) gl_framebuffer::Height has the number of layers
 * instead of 1.
d52 2
a53 2
update_framebuffer_size(struct pipe_framebuffer_state *framebuffer,
                        struct pipe_surface *surface)
d55 38
a92 5
   assert(surface);
   assert(surface->width  < UINT_MAX);
   assert(surface->height < UINT_MAX);
   framebuffer->width  = MIN2(framebuffer->width,  surface->width);
   framebuffer->height = MIN2(framebuffer->height, surface->height);
d110 2
a111 2
   framebuffer->width  = UINT_MAX;
   framebuffer->height = UINT_MAX;
d118 1
a118 2
   framebuffer->nr_cbufs = fb->_NumColorDrawBuffers;

a119 2
      pipe_surface_reference(&framebuffer->cbufs[i], NULL);

d123 3
a125 2
         if (strb->is_rtt || (strb->texture &&
             _mesa_get_format_color_encoding(strb->Base.Format) == GL_SRGB)) {
d127 1
a127 1
            st_update_renderbuffer_surface(st, strb);
d131 3
a133 2
            pipe_surface_reference(&framebuffer->cbufs[i], strb->surface);
            update_framebuffer_size(framebuffer, strb->surface);
a137 1

a141 6
   /* Remove trailing GL_NONE draw buffers. */
   while (framebuffer->nr_cbufs &&
          !framebuffer->cbufs[framebuffer->nr_cbufs-1]) {
      framebuffer->nr_cbufs--;
   }

d147 1
a147 1
      if (strb->is_rtt) {
d149 1
a149 1
         st_update_renderbuffer_surface(st, strb);
a151 1
      update_framebuffer_size(framebuffer, strb->surface);
a157 1
         update_framebuffer_size(framebuffer, strb->surface);
d166 1
a166 2
      assert(!framebuffer->cbufs[i] ||
             framebuffer->cbufs[i]->texture->bind & PIPE_BIND_RENDER_TARGET);
a171 5

   if (framebuffer->width == UINT_MAX)
      framebuffer->width = 0;
   if (framebuffer->height == UINT_MAX)
      framebuffer->height = 0;
@


