head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.45;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.24;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.11;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.13.21;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.50.27;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2008 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/


#include "main/imports.h"
#include "main/mipmap.h"
#include "main/teximage.h"

#include "pipe/p_context.h"
#include "pipe/p_defines.h"
#include "util/u_inlines.h"
#include "util/u_format.h"
#include "util/u_gen_mipmap.h"

#include "st_debug.h"
#include "st_context.h"
#include "st_texture.h"
#include "st_gen_mipmap.h"
#include "st_cb_texture.h"


/**
 * Compute the expected number of mipmap levels in the texture given
 * the width/height/depth of the base image and the GL_TEXTURE_BASE_LEVEL/
 * GL_TEXTURE_MAX_LEVEL settings.  This will tell us how many mipmap
 * levels should be generated.
 */
static GLuint
compute_num_levels(struct gl_context *ctx,
                   struct gl_texture_object *texObj,
                   GLenum target)
{
   const struct gl_texture_image *baseImage;
   GLuint numLevels;

   baseImage = _mesa_get_tex_image(ctx, texObj, target, texObj->BaseLevel);

   numLevels = texObj->BaseLevel + baseImage->MaxNumLevels;
   numLevels = MIN2(numLevels, (GLuint) texObj->MaxLevel + 1);
   assert(numLevels >= 1);

   return numLevels;
}


/**
 * Called via ctx->Driver.GenerateMipmap().
 */
void
st_generate_mipmap(struct gl_context *ctx, GLenum target,
                   struct gl_texture_object *texObj)
{
   struct st_context *st = st_context(ctx);
   struct st_texture_object *stObj = st_texture_object(texObj);
   struct pipe_resource *pt = st_get_texobj_resource(texObj);
   const uint baseLevel = texObj->BaseLevel;
   uint lastLevel, first_layer, last_layer;
   uint dstLevel;

   if (!pt)
      return;

   /* not sure if this ultimately actually should work,
      but we're not supporting multisampled textures yet. */
   assert(pt->nr_samples < 2);

   /* find expected last mipmap level to generate*/
   lastLevel = compute_num_levels(ctx, texObj, target) - 1;

   if (lastLevel == 0)
      return;

   /* The texture isn't in a "complete" state yet so set the expected
    * lastLevel here, since it won't get done in st_finalize_texture().
    */
   stObj->lastLevel = lastLevel;

   if (pt->last_level < lastLevel) {
      /* The current gallium texture doesn't have space for all the
       * mipmap levels we need to generate.  So allocate a new texture.
       */
      struct pipe_resource *oldTex = stObj->pt;

      /* create new texture with space for more levels */
      stObj->pt = st_texture_create(st,
                                    oldTex->target,
                                    oldTex->format,
                                    lastLevel,
                                    oldTex->width0,
                                    oldTex->height0,
                                    oldTex->depth0,
                                    oldTex->array_size,
                                    0,
                                    oldTex->bind);

      /* This will copy the old texture's base image into the new texture
       * which we just allocated.
       */
      st_finalize_texture(ctx, st->pipe, texObj);

      /* release the old tex (will likely be freed too) */
      pipe_resource_reference(&oldTex, NULL);
      st_texture_release_all_sampler_views(stObj);
   }
   else {
      /* Make sure that the base texture image data is present in the
       * texture buffer.
       */
      st_finalize_texture(ctx, st->pipe, texObj);
   }

   pt = stObj->pt;

   assert(pt->last_level >= lastLevel);

   if (pt->target == PIPE_TEXTURE_CUBE) {
      first_layer = last_layer = _mesa_tex_target_to_face(target);
   }
   else {
      first_layer = 0;
      last_layer = util_max_layer(pt, baseLevel);
   }

   /* Try to generate the mipmap by rendering/texturing.  If that fails,
    * use the software fallback.
    */
   if (!util_gen_mipmap(st->pipe, pt, pt->format, baseLevel, lastLevel,
                        first_layer, last_layer, PIPE_TEX_FILTER_LINEAR)) {
      _mesa_generate_mipmap(ctx, target, texObj);
   }

   /* Fill in the Mesa gl_texture_image fields */
   for (dstLevel = baseLevel + 1; dstLevel <= lastLevel; dstLevel++) {
      const uint srcLevel = dstLevel - 1;
      const struct gl_texture_image *srcImage
         = _mesa_get_tex_image(ctx, texObj, target, srcLevel);
      struct gl_texture_image *dstImage;
      struct st_texture_image *stImage;
      uint border = srcImage->Border;
      uint dstWidth, dstHeight, dstDepth;

      dstWidth = u_minify(pt->width0, dstLevel);
      if (texObj->Target == GL_TEXTURE_1D_ARRAY) {
         dstHeight = pt->array_size;
      }
      else {
         dstHeight = u_minify(pt->height0, dstLevel);
      }
      if (texObj->Target == GL_TEXTURE_2D_ARRAY ||
          texObj->Target == GL_TEXTURE_CUBE_MAP_ARRAY) {
         dstDepth = pt->array_size;
      }
      else {
         dstDepth = u_minify(pt->depth0, dstLevel);
      }

      dstImage = _mesa_get_tex_image(ctx, texObj, target, dstLevel);
      if (!dstImage) {
         _mesa_error(ctx, GL_OUT_OF_MEMORY, "generating mipmaps");
         return;
      }

      /* Free old image data */
      ctx->Driver.FreeTextureImageBuffer(ctx, dstImage);

      /* initialize new image */
      _mesa_init_teximage_fields(ctx, dstImage, dstWidth, dstHeight,
                                 dstDepth, border, srcImage->InternalFormat,
                                 srcImage->TexFormat);

      stImage = st_texture_image(dstImage);

      pipe_resource_reference(&stImage->pt, pt);
   }
}
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d127 1
a127 1
      st_texture_release_all_sampler_views(st, stObj);
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d127 1
a127 1
      st_texture_release_all_sampler_views(stObj);
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2008 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
a46 58
 * one-time init for generate mipmap
 * XXX Note: there may be other times we need no-op/simple state like this.
 * In that case, some code refactoring would be good.
 */
void
st_init_generate_mipmap(struct st_context *st)
{
   st->gen_mipmap = util_create_gen_mipmap(st->pipe, st->cso_context);
}


void
st_destroy_generate_mipmap(struct st_context *st)
{
   util_destroy_gen_mipmap(st->gen_mipmap);
   st->gen_mipmap = NULL;
}


/**
 * Generate mipmap levels using hardware rendering.
 * \return TRUE if successful, FALSE if not possible
 */
static boolean
st_render_mipmap(struct st_context *st,
                 GLenum target,
                 struct st_texture_object *stObj,
                 uint baseLevel, uint lastLevel)
{
   struct pipe_context *pipe = st->pipe;
   struct pipe_screen *screen = pipe->screen;
   struct pipe_sampler_view *psv;
   const uint face = _mesa_tex_target_to_face(target);

#if 0
   assert(target != GL_TEXTURE_3D); /* implemented but untested */
#endif

   /* check if we can render in the texture's format */
   /* XXX should probably kill this and always use util_gen_mipmap
      since this implements a sw fallback as well */
   if (!screen->is_format_supported(screen, stObj->pt->format,
                                    stObj->pt->target,
                                    0, PIPE_BIND_RENDER_TARGET)) {
      return FALSE;
   }

   psv = st_create_texture_sampler_view(pipe, stObj->pt);

   util_gen_mipmap(st->gen_mipmap, psv, face, baseLevel, lastLevel,
                   PIPE_TEX_FILTER_LINEAR);

   pipe_sampler_view_reference(&psv, NULL);

   return TRUE;
}

/**
d81 1
a81 1
   uint lastLevel;
d127 1
a127 1
      pipe_sampler_view_reference(&stObj->sampler_view, NULL);
d140 8
d151 2
a152 3
   if (!st_render_mipmap(st, target, stObj, baseLevel, lastLevel)) {
      /* since the util code actually also has a fallback, should
         probably make it never fail and kill this */
d173 2
a174 1
      if (texObj->Target == GL_TEXTURE_2D_ARRAY) {
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d78 1
a78 1
   struct pipe_sampler_view *psv = st_get_texture_sampler_view(stObj, pipe);
a80 1
   assert(psv->texture == stObj->pt);
d88 2
a89 1
   if (!screen->is_format_supported(screen, psv->format, psv->texture->target,
d94 1
a94 4
   /* Disable conditional rendering. */
   if (st->render_condition) {
      pipe->render_condition(pipe, NULL, 0);
   }
d99 1
a99 3
   if (st->render_condition) {
      pipe->render_condition(pipe, st->render_condition, st->condition_mode);
   }
a103 203

/**
 * Helper function to decompress an image.  The result is a 32-bpp RGBA
 * image with stride==width.
 */
static void
decompress_image(enum pipe_format format, int datatype,
                 const uint8_t *src, void *dst,
                 unsigned width, unsigned height, unsigned src_stride)
{
   const struct util_format_description *desc = util_format_description(format);
   const uint bw = util_format_get_blockwidth(format);
   const uint bh = util_format_get_blockheight(format);
   uint dst_stride = 4 * MAX2(width, bw);

   if (datatype == GL_FLOAT) {
      desc->unpack_rgba_float((float *)dst, dst_stride * sizeof(GLfloat), src, src_stride, width, height);
      if (width < bw || height < bh) {
	 float *dst_p = (float *)dst;
	 /* We're decompressing an image smaller than the compression
	  * block size.  We don't want garbage pixel values in the region
	  * outside (width x height) so replicate pixels from the (width
	  * x height) region to fill out the (bw x bh) block size.
	  */
	 uint x, y;
	 for (y = 0; y < bh; y++) {
	    for (x = 0; x < bw; x++) {
	       if (x >= width || y >= height) {
		  uint p = (y * bw + x) * 4;
		  dst_p[p + 0] = dst_p[0];
		  dst_p[p + 1] = dst_p[1];
		  dst_p[p + 2] = dst_p[2];
		  dst_p[p + 3] = dst_p[3];
	       }
	    }
	 }
      }
   } else {
      desc->unpack_rgba_8unorm((uint8_t *)dst, dst_stride, src, src_stride, width, height);
      if (width < bw || height < bh) {
	 uint8_t *dst_p = (uint8_t *)dst;
	 /* We're decompressing an image smaller than the compression
	  * block size.  We don't want garbage pixel values in the region
	  * outside (width x height) so replicate pixels from the (width
	  * x height) region to fill out the (bw x bh) block size.
	  */
	 uint x, y;
	 for (y = 0; y < bh; y++) {
	    for (x = 0; x < bw; x++) {
	       if (x >= width || y >= height) {
		  uint p = (y * bw + x) * 4;
		  dst_p[p + 0] = dst_p[0];
		  dst_p[p + 1] = dst_p[1];
		  dst_p[p + 2] = dst_p[2];
		  dst_p[p + 3] = dst_p[3];
	       }
	    }
	 }
      }
   }
}

/**
 * Helper function to compress an image.  The source is a 32-bpp RGBA image
 * with stride==width.
 */
static void
compress_image(enum pipe_format format, int datatype,
               const void *src, uint8_t *dst,
               unsigned width, unsigned height, unsigned dst_stride)
{
   const struct util_format_description *desc = util_format_description(format);
   const uint src_stride = 4 * width;

   if (datatype == GL_FLOAT)
      desc->pack_rgba_float(dst, dst_stride, (GLfloat *)src, src_stride * sizeof(GLfloat), width, height);
   else
      desc->pack_rgba_8unorm(dst, dst_stride, (uint8_t *)src, src_stride, width, height);
}


/**
 * Software fallback for generate mipmap levels.
 */
static void
fallback_generate_mipmap(struct gl_context *ctx, GLenum target,
                         struct gl_texture_object *texObj)
{
   struct pipe_context *pipe = st_context(ctx)->pipe;
   struct pipe_resource *pt = st_get_texobj_resource(texObj);
   const uint baseLevel = texObj->BaseLevel;
   const uint lastLevel = pt->last_level;
   const uint face = _mesa_tex_target_to_face(target);
   uint dstLevel;
   GLenum datatype;
   GLuint comps;
   GLboolean compressed;

   if (ST_DEBUG & DEBUG_FALLBACK)
      debug_printf("%s: fallback processing\n", __FUNCTION__);

   assert(target != GL_TEXTURE_3D); /* not done yet */

   compressed =
      _mesa_is_format_compressed(texObj->Image[face][baseLevel]->TexFormat);

   if (compressed) {
      GLenum type =
         _mesa_get_format_datatype(texObj->Image[face][baseLevel]->TexFormat);

      datatype = type == GL_UNSIGNED_NORMALIZED ? GL_UNSIGNED_BYTE : GL_FLOAT;
      comps = 4;
   }
   else {
      _mesa_format_to_type_and_comps(texObj->Image[face][baseLevel]->TexFormat,
                                     &datatype, &comps);
      assert(comps > 0 && "bad texture format in fallback_generate_mipmap()");
   }

   for (dstLevel = baseLevel + 1; dstLevel <= lastLevel; dstLevel++) {
      const uint srcLevel = dstLevel - 1;
      const uint srcWidth = u_minify(pt->width0, srcLevel);
      const uint srcHeight = u_minify(pt->height0, srcLevel);
      const uint srcDepth = u_minify(pt->depth0, srcLevel);
      const uint dstWidth = u_minify(pt->width0, dstLevel);
      const uint dstHeight = u_minify(pt->height0, dstLevel);
      const uint dstDepth = u_minify(pt->depth0, dstLevel);
      struct pipe_transfer *srcTrans, *dstTrans;
      const ubyte *srcData;
      ubyte *dstData;
      int srcStride, dstStride;

      srcTrans = pipe_get_transfer(pipe, pt, srcLevel,
                                   face,
                                   PIPE_TRANSFER_READ, 0, 0,
                                   srcWidth, srcHeight);

      dstTrans = pipe_get_transfer(pipe, pt, dstLevel,
                                   face,
                                   PIPE_TRANSFER_WRITE, 0, 0,
                                   dstWidth, dstHeight);

      srcData = (ubyte *) pipe_transfer_map(pipe, srcTrans);
      dstData = (ubyte *) pipe_transfer_map(pipe, dstTrans);

      srcStride = srcTrans->stride / util_format_get_blocksize(srcTrans->resource->format);
      dstStride = dstTrans->stride / util_format_get_blocksize(dstTrans->resource->format);

     /* this cannot work correctly for 3d since it does
        not respect layerStride. */
      if (compressed) {
         const enum pipe_format format = pt->format;
         const uint bw = util_format_get_blockwidth(format);
         const uint bh = util_format_get_blockheight(format);
         const uint srcWidth2 = align(srcWidth, bw);
         const uint srcHeight2 = align(srcHeight, bh);
         const uint dstWidth2 = align(dstWidth, bw);
         const uint dstHeight2 = align(dstHeight, bh);
         uint8_t *srcTemp, *dstTemp;

         assert(comps == 4);

         srcTemp = malloc(srcWidth2 * srcHeight2 * comps * (datatype == GL_FLOAT ? 4 : 1));
         dstTemp = malloc(dstWidth2 * dstHeight2 * comps * (datatype == GL_FLOAT ? 4 : 1));

         /* decompress the src image: srcData -> srcTemp */
         decompress_image(format, datatype, srcData, srcTemp, srcWidth2, srcHeight2, srcTrans->stride);

         _mesa_generate_mipmap_level(target, datatype, comps,
                                     0 /*border*/,
                                     srcWidth2, srcHeight2, srcDepth,
                                     srcTemp,
                                     srcWidth2, /* stride in texels */
                                     dstWidth2, dstHeight2, dstDepth,
                                     dstTemp,
                                     dstWidth2); /* stride in texels */

         /* compress the new image: dstTemp -> dstData */
         compress_image(format, datatype, dstTemp, dstData, dstWidth2, dstHeight2, dstTrans->stride);

         free(srcTemp);
         free(dstTemp);
      }
      else {
         _mesa_generate_mipmap_level(target, datatype, comps,
                                     0 /*border*/,
                                     srcWidth, srcHeight, srcDepth,
                                     srcData,
                                     srcStride, /* stride in texels */
                                     dstWidth, dstHeight, dstDepth,
                                     dstData,
                                     dstStride); /* stride in texels */
      }

      pipe_transfer_unmap(pipe, srcTrans);
      pipe_transfer_unmap(pipe, dstTrans);

      pipe->transfer_destroy(pipe, srcTrans);
      pipe->transfer_destroy(pipe, dstTrans);
   }
}


d115 2
a116 17
   if (target == GL_TEXTURE_RECTANGLE_ARB) {
      return 1;
   }
   else {
      const struct gl_texture_image *baseImage = 
         _mesa_get_tex_image(ctx, texObj, target, texObj->BaseLevel);
      GLuint size, numLevels;

      size = MAX2(baseImage->Width2, baseImage->Height2);
      size = MAX2(size, baseImage->Depth2);

      numLevels = texObj->BaseLevel;

      while (size > 0) {
         numLevels++;
         size >>= 1;
      }
d118 1
a118 1
      numLevels = MIN2(numLevels, texObj->MaxLevel + 1);
d120 3
a122 1
      assert(numLevels >= 1);
d124 1
a124 2
      return numLevels;
   }
d175 1
d204 1
a204 1
      fallback_generate_mipmap(ctx, target, texObj);
a213 3
      uint dstWidth = u_minify(pt->width0, dstLevel);
      uint dstHeight = u_minify(pt->height0, dstLevel);
      uint dstDepth = u_minify(pt->depth0, dstLevel); 
d215 15
d238 1
a238 2
      if (dstImage->Data)
         ctx->Driver.FreeTexImageData(ctx, dstImage);
d241 1
a241 1
      _mesa_init_teximage_fields(ctx, target, dstImage, dstWidth, dstHeight,
a245 1
      stImage->level = dstLevel;
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d90 1
a90 1
                                    0, PIPE_BIND_RENDER_TARGET, 0)) {
d115 2
a116 2
decompress_image(enum pipe_format format,
                 const uint8_t *src, uint8_t *dst,
d122 1
a122 1
   const uint dst_stride = 4 * MAX2(width, bw);
d124 43
a166 19
   desc->unpack_rgba_8unorm(dst, dst_stride, src, src_stride, width, height);

   if (width < bw || height < bh) {
      /* We're decompressing an image smaller than the compression
       * block size.  We don't want garbage pixel values in the region
       * outside (width x height) so replicate pixels from the (width
       * x height) region to fill out the (bw x bh) block size.
       */
      uint x, y;
      for (y = 0; y < bh; y++) {
         for (x = 0; x < bw; x++) {
            if (x >= width || y >= height) {
               uint p = (y * bw + x) * 4;
               dst[p + 0] = dst[0];
               dst[p + 1] = dst[1];
               dst[p + 2] = dst[2];
               dst[p + 3] = dst[3];
            }
         }
a170 1

d176 2
a177 2
compress_image(enum pipe_format format,
               const uint8_t *src, uint8_t *dst,
d183 4
a186 1
   desc->pack_rgba_8unorm(dst, dst_stride, src, src_stride, width, height);
d216 4
a219 1
      datatype = GL_UNSIGNED_BYTE;
d241 1
a241 1
      srcTrans = pipe_get_transfer(st_context(ctx)->pipe, pt, srcLevel,
d246 1
a246 1
      dstTrans = pipe_get_transfer(st_context(ctx)->pipe, pt, dstLevel,
d271 2
a272 2
         srcTemp = malloc(srcWidth2 * srcHeight2 * comps + 000);
         dstTemp = malloc(dstWidth2 * dstHeight2 * comps + 000);
d275 1
a275 1
         decompress_image(format, srcData, srcTemp, srcWidth, srcHeight, srcTrans->stride);
d287 1
a287 1
         compress_image(format, dstTemp, dstData, dstWidth, dstHeight, dstTrans->stride);
d377 5
d396 1
a398 5
      /* The texture isn't in a "complete" state yet so set the expected
       * lastLevel here, since it won't get done in st_finalize_texture().
       */
      stObj->lastLevel = lastLevel;

a406 2

      pt = stObj->pt;
d414 2
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a29 1
#include "main/macros.h"
a31 3
#include "main/texformat.h"

#include "shader/prog_instruction.h"
a37 4
#include "util/u_math.h"

#include "cso_cache/cso_cache.h"
#include "cso_cache/cso_context.h"
d41 1
a42 1
#include "st_texture.h"
a43 1
#include "st_inlines.h"
d73 1
a73 1
                 struct pipe_texture *pt,
d78 1
d81 4
a84 1
   assert(target != GL_TEXTURE_3D); /* not done yet */
d87 4
a90 2
   if (!screen->is_format_supported(screen, pt->format, pt->target,
                                    PIPE_TEXTURE_USAGE_RENDER_TARGET, 0)) {
d94 6
a99 1
   util_gen_mipmap(st->gen_mipmap, pt, face, baseLevel, lastLevel,
d102 4
d110 57
d168 1
a168 1
fallback_generate_mipmap(GLcontext *ctx, GLenum target,
d171 2
a172 3
   struct pipe_context *pipe = ctx->st->pipe;
   struct pipe_screen *screen = pipe->screen;
   struct pipe_texture *pt = st_get_texobj_texture(texObj);
d175 1
a175 1
   const uint face = _mesa_tex_target_to_face(target), zslice = 0;
d179 2
a180 1
   
d186 12
a197 2
   _mesa_format_to_type_and_comps(texObj->Image[face][baseLevel]->TexFormat,
                                  &datatype, &comps);
d201 6
d212 44
a255 30
      srcTrans = st_cond_flush_get_tex_transfer(st_context(ctx), pt, face,
						srcLevel, zslice,
						PIPE_TRANSFER_READ, 0, 0,
						u_minify(pt->width0, srcLevel),
						u_minify(pt->height0, srcLevel));

      dstTrans = st_cond_flush_get_tex_transfer(st_context(ctx), pt, face,
						dstLevel, zslice,
						PIPE_TRANSFER_WRITE, 0, 0,
						u_minify(pt->width0, dstLevel),
						u_minify(pt->height0, dstLevel));

      srcData = (ubyte *) screen->transfer_map(screen, srcTrans);
      dstData = (ubyte *) screen->transfer_map(screen, dstTrans);

      srcStride = srcTrans->stride / util_format_get_blocksize(srcTrans->texture->format);
      dstStride = dstTrans->stride / util_format_get_blocksize(dstTrans->texture->format);

      _mesa_generate_mipmap_level(target, datatype, comps,
                                  0 /*border*/,
                                  u_minify(pt->width0, srcLevel),
                                  u_minify(pt->height0, srcLevel),
                                  u_minify(pt->depth0, srcLevel),
                                  srcData,
                                  srcStride, /* stride in texels */
                                  u_minify(pt->width0, dstLevel),
                                  u_minify(pt->height0, dstLevel),
                                  u_minify(pt->depth0, dstLevel),
                                  dstData,
                                  dstStride); /* stride in texels */
d257 2
a258 2
      screen->transfer_unmap(screen, srcTrans);
      screen->transfer_unmap(screen, dstTrans);
d260 19
a278 2
      screen->tex_transfer_destroy(srcTrans);
      screen->tex_transfer_destroy(dstTrans);
d287 1
a287 1
 * level should be generated.
d290 1
a290 1
compute_num_levels(GLcontext *ctx,
a297 1
      const GLuint maxLevels = texObj->MaxLevel - texObj->BaseLevel + 1;
d305 1
a305 1
      numLevels = 0;
d312 3
a314 1
      numLevels = MIN2(numLevels, maxLevels);
d321 3
d325 1
a325 1
st_generate_mipmap(GLcontext *ctx, GLenum target,
d328 3
a330 2
   struct st_context *st = ctx->st;
   struct pipe_texture *pt = st_get_texobj_texture(texObj);
d338 5
a342 1
   /* find expected last mipmap level */
d352 1
a352 3
      struct st_texture_object *stObj = st_texture_object(texObj);
      struct pipe_texture *oldTex = stObj->pt;
      GLboolean needFlush;
d362 1
a362 1
                                    oldTex->tex_usage);
d372 1
a372 1
      st_finalize_texture(ctx, st->pipe, texObj, &needFlush);
d375 2
a376 1
      pipe_texture_reference(&oldTex, NULL);
d380 6
d387 1
a387 1
   assert(lastLevel <= pt->last_level);
d389 2
a390 2
   /* Recall that the Mesa BaseLevel image is stored in the gallium
    * texture's level[0] position.  So pass baseLevel=0 here.
d392 3
a394 1
   if (!st_render_mipmap(st, target, pt, 0, lastLevel)) {
d422 2
a423 3
                                 dstDepth, border, srcImage->InternalFormat);

      dstImage->TexFormat = srcImage->TexFormat;
d428 1
a428 1
      pipe_texture_reference(&stImage->pt, pt);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d30 1
d33 3
d42 4
d49 1
a50 1
#include "st_gen_mipmap.h"
d52 1
d82 1
a82 1
                 struct st_texture_object *stObj,
a86 1
   struct pipe_sampler_view *psv = st_get_texture_sampler_view(stObj, pipe);
d89 1
a89 4
   assert(psv->texture == stObj->pt);
#if 0
   assert(target != GL_TEXTURE_3D); /* implemented but untested */
#endif
d92 2
a93 4
   /* XXX should probably kill this and always use util_gen_mipmap
      since this implements a sw fallback as well */
   if (!screen->is_format_supported(screen, psv->format, psv->texture->target,
                                    0, PIPE_BIND_RENDER_TARGET, 0)) {
d97 1
a97 6
   /* Disable conditional rendering. */
   if (st->render_condition) {
      pipe->render_condition(pipe, NULL, 0);
   }

   util_gen_mipmap(st->gen_mipmap, psv, face, baseLevel, lastLevel,
a99 4
   if (st->render_condition) {
      pipe->render_condition(pipe, st->render_condition, st->condition_mode);
   }

a103 57
/**
 * Helper function to decompress an image.  The result is a 32-bpp RGBA
 * image with stride==width.
 */
static void
decompress_image(enum pipe_format format,
                 const uint8_t *src, uint8_t *dst,
                 unsigned width, unsigned height, unsigned src_stride)
{
   const struct util_format_description *desc = util_format_description(format);
   const uint bw = util_format_get_blockwidth(format);
   const uint bh = util_format_get_blockheight(format);
   const uint dst_stride = 4 * MAX2(width, bw);

   desc->unpack_rgba_8unorm(dst, dst_stride, src, src_stride, width, height);

   if (width < bw || height < bh) {
      /* We're decompressing an image smaller than the compression
       * block size.  We don't want garbage pixel values in the region
       * outside (width x height) so replicate pixels from the (width
       * x height) region to fill out the (bw x bh) block size.
       */
      uint x, y;
      for (y = 0; y < bh; y++) {
         for (x = 0; x < bw; x++) {
            if (x >= width || y >= height) {
               uint p = (y * bw + x) * 4;
               dst[p + 0] = dst[0];
               dst[p + 1] = dst[1];
               dst[p + 2] = dst[2];
               dst[p + 3] = dst[3];
            }
         }
      }
   }
}


/**
 * Helper function to compress an image.  The source is a 32-bpp RGBA image
 * with stride==width.
 */
static void
compress_image(enum pipe_format format,
               const uint8_t *src, uint8_t *dst,
               unsigned width, unsigned height, unsigned dst_stride)
{
   const struct util_format_description *desc = util_format_description(format);
   const uint src_stride = 4 * width;

   desc->pack_rgba_8unorm(dst, dst_stride, src, src_stride, width, height);
}


/**
 * Software fallback for generate mipmap levels.
 */
d105 1
a105 1
fallback_generate_mipmap(struct gl_context *ctx, GLenum target,
d108 3
a110 2
   struct pipe_context *pipe = st_context(ctx)->pipe;
   struct pipe_resource *pt = st_get_texobj_resource(texObj);
d113 1
a113 1
   const uint face = _mesa_tex_target_to_face(target);
d117 1
a117 2
   GLboolean compressed;

d123 2
a124 12
   compressed =
      _mesa_is_format_compressed(texObj->Image[face][baseLevel]->TexFormat);

   if (compressed) {
      datatype = GL_UNSIGNED_BYTE;
      comps = 4;
   }
   else {
      _mesa_format_to_type_and_comps(texObj->Image[face][baseLevel]->TexFormat,
                                     &datatype, &comps);
      assert(comps > 0 && "bad texture format in fallback_generate_mipmap()");
   }
a127 6
      const uint srcWidth = u_minify(pt->width0, srcLevel);
      const uint srcHeight = u_minify(pt->height0, srcLevel);
      const uint srcDepth = u_minify(pt->depth0, srcLevel);
      const uint dstWidth = u_minify(pt->width0, dstLevel);
      const uint dstHeight = u_minify(pt->height0, dstLevel);
      const uint dstDepth = u_minify(pt->depth0, dstLevel);
d133 30
a162 44
      srcTrans = pipe_get_transfer(st_context(ctx)->pipe, pt, srcLevel,
                                   face,
                                   PIPE_TRANSFER_READ, 0, 0,
                                   srcWidth, srcHeight);

      dstTrans = pipe_get_transfer(st_context(ctx)->pipe, pt, dstLevel,
                                   face,
                                   PIPE_TRANSFER_WRITE, 0, 0,
                                   dstWidth, dstHeight);

      srcData = (ubyte *) pipe_transfer_map(pipe, srcTrans);
      dstData = (ubyte *) pipe_transfer_map(pipe, dstTrans);

      srcStride = srcTrans->stride / util_format_get_blocksize(srcTrans->resource->format);
      dstStride = dstTrans->stride / util_format_get_blocksize(dstTrans->resource->format);

     /* this cannot work correctly for 3d since it does
        not respect layerStride. */
      if (compressed) {
         const enum pipe_format format = pt->format;
         const uint bw = util_format_get_blockwidth(format);
         const uint bh = util_format_get_blockheight(format);
         const uint srcWidth2 = align(srcWidth, bw);
         const uint srcHeight2 = align(srcHeight, bh);
         const uint dstWidth2 = align(dstWidth, bw);
         const uint dstHeight2 = align(dstHeight, bh);
         uint8_t *srcTemp, *dstTemp;

         assert(comps == 4);

         srcTemp = malloc(srcWidth2 * srcHeight2 * comps + 000);
         dstTemp = malloc(dstWidth2 * dstHeight2 * comps + 000);

         /* decompress the src image: srcData -> srcTemp */
         decompress_image(format, srcData, srcTemp, srcWidth, srcHeight, srcTrans->stride);

         _mesa_generate_mipmap_level(target, datatype, comps,
                                     0 /*border*/,
                                     srcWidth2, srcHeight2, srcDepth,
                                     srcTemp,
                                     srcWidth2, /* stride in texels */
                                     dstWidth2, dstHeight2, dstDepth,
                                     dstTemp,
                                     dstWidth2); /* stride in texels */
d164 2
a165 2
         /* compress the new image: dstTemp -> dstData */
         compress_image(format, dstTemp, dstData, dstWidth, dstHeight, dstTrans->stride);
d167 2
a168 19
         free(srcTemp);
         free(dstTemp);
      }
      else {
         _mesa_generate_mipmap_level(target, datatype, comps,
                                     0 /*border*/,
                                     srcWidth, srcHeight, srcDepth,
                                     srcData,
                                     srcStride, /* stride in texels */
                                     dstWidth, dstHeight, dstDepth,
                                     dstData,
                                     dstStride); /* stride in texels */
      }

      pipe_transfer_unmap(pipe, srcTrans);
      pipe_transfer_unmap(pipe, dstTrans);

      pipe->transfer_destroy(pipe, srcTrans);
      pipe->transfer_destroy(pipe, dstTrans);
d177 1
a177 1
 * levels should be generated.
d180 1
a180 1
compute_num_levels(struct gl_context *ctx,
d188 1
d196 1
a196 1
      numLevels = texObj->BaseLevel;
d203 1
a203 3
      numLevels = MIN2(numLevels, texObj->MaxLevel + 1);

      assert(numLevels >= 1);
a209 3
/**
 * Called via ctx->Driver.GenerateMipmap().
 */
d211 1
a211 1
st_generate_mipmap(struct gl_context *ctx, GLenum target,
d214 2
a215 3
   struct st_context *st = st_context(ctx);
   struct st_texture_object *stObj = st_texture_object(texObj);
   struct pipe_resource *pt = st_get_texobj_resource(texObj);
d223 1
a223 5
   /* not sure if this ultimately actually should work,
      but we're not supporting multisampled textures yet. */
   assert(pt->nr_samples < 2);

   /* find expected last mipmap level to generate*/
d233 3
a235 1
      struct pipe_resource *oldTex = stObj->pt;
d245 1
a245 1
                                    oldTex->bind);
d255 1
a255 1
      st_finalize_texture(ctx, st->pipe, texObj);
d258 1
a258 2
      pipe_resource_reference(&oldTex, NULL);
      pipe_sampler_view_reference(&stObj->sampler_view, NULL);
a261 6
   else {
      /* Make sure that the base texture image data is present in the
       * texture buffer.
       */
      st_finalize_texture(ctx, st->pipe, texObj);
   }
d263 1
a263 1
   assert(pt->last_level >= lastLevel);
d265 2
a266 2
   /* Try to generate the mipmap by rendering/texturing.  If that fails,
    * use the software fallback.
d268 1
a268 3
   if (!st_render_mipmap(st, target, stObj, baseLevel, lastLevel)) {
      /* since the util code actually also has a fallback, should
         probably make it never fail and kill this */
d296 3
a298 2
                                 dstDepth, border, srcImage->InternalFormat,
                                 srcImage->TexFormat);
d303 1
a303 1
      pipe_resource_reference(&stImage->pt, pt);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d78 1
a78 1
   struct pipe_sampler_view *psv;
d81 1
d89 2
a90 3
   if (!screen->is_format_supported(screen, stObj->pt->format,
                                    stObj->pt->target,
                                    0, PIPE_BIND_RENDER_TARGET)) {
d94 4
a97 1
   psv = st_create_texture_sampler_view(pipe, stObj->pt);
d102 3
a104 1
   pipe_sampler_view_reference(&psv, NULL);
d109 174
d294 17
a310 2
   const struct gl_texture_image *baseImage;
   GLuint numLevels;
d312 1
a312 1
   baseImage = _mesa_get_tex_image(ctx, texObj, target, texObj->BaseLevel);
d314 1
a314 3
   numLevels = texObj->BaseLevel + baseImage->MaxNumLevels;
   numLevels = MIN2(numLevels, (GLuint) texObj->MaxLevel + 1);
   assert(numLevels >= 1);
d316 2
a317 1
   return numLevels;
a347 5
   /* The texture isn't in a "complete" state yet so set the expected
    * lastLevel here, since it won't get done in st_finalize_texture().
    */
   stObj->lastLevel = lastLevel;

a361 2
                                    oldTex->array_size,
                                    0,
d364 5
d377 2
a386 2
   pt = stObj->pt;

d395 1
a395 1
      _mesa_generate_mipmap(ctx, target, texObj);
d405 3
a408 15
      uint dstWidth, dstHeight, dstDepth;

      dstWidth = u_minify(pt->width0, dstLevel);
      if (texObj->Target == GL_TEXTURE_1D_ARRAY) {
         dstHeight = pt->array_size;
      }
      else {
         dstHeight = u_minify(pt->height0, dstLevel);
      }
      if (texObj->Target == GL_TEXTURE_2D_ARRAY) {
         dstDepth = pt->array_size;
      }
      else {
         dstDepth = u_minify(pt->depth0, dstLevel);
      }
d417 2
a418 1
      ctx->Driver.FreeTextureImageBuffer(ctx, dstImage);
d421 1
a421 1
      _mesa_init_teximage_fields(ctx, dstImage, dstWidth, dstHeight,
d426 1
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2008 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d47 58
d139 1
a139 1
   uint lastLevel, first_layer, last_layer;
d185 1
a185 1
      st_texture_release_all_sampler_views(stObj);
a197 8
   if (pt->target == PIPE_TEXTURE_CUBE) {
      first_layer = last_layer = _mesa_tex_target_to_face(target);
   }
   else {
      first_layer = 0;
      last_layer = util_max_layer(pt, baseLevel);
   }

d201 3
a203 2
   if (!util_gen_mipmap(st->pipe, pt, pt->format, baseLevel, lastLevel,
                        first_layer, last_layer, PIPE_TEX_FILTER_LINEAR)) {
d224 1
a224 2
      if (texObj->Target == GL_TEXTURE_2D_ARRAY ||
          texObj->Target == GL_TEXTURE_CUBE_MAP_ARRAY) {
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d127 1
a127 1
      st_texture_release_all_sampler_views(st, stObj);
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d127 1
a127 1
      st_texture_release_all_sampler_views(stObj);
@


