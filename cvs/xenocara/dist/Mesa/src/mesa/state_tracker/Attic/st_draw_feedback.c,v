head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.45;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.23;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.11;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#include "main/imports.h"
#include "main/image.h"
#include "main/macros.h"

#include "vbo/vbo.h"

#include "st_context.h"
#include "st_atom.h"
#include "st_cb_bufferobjects.h"
#include "st_draw.h"
#include "st_program.h"

#include "pipe/p_context.h"
#include "pipe/p_defines.h"
#include "util/u_inlines.h"
#include "util/u_draw.h"

#include "draw/draw_private.h"
#include "draw/draw_context.h"


/**
 * Set the (private) draw module's post-transformed vertex format when in
 * GL_SELECT or GL_FEEDBACK mode or for glRasterPos.
 */
static void
set_feedback_vertex_format(struct gl_context *ctx)
{
#if 0
   struct st_context *st = st_context(ctx);
   struct vertex_info vinfo;
   GLuint i;

   memset(&vinfo, 0, sizeof(vinfo));

   if (ctx->RenderMode == GL_SELECT) {
      assert(ctx->RenderMode == GL_SELECT);
      vinfo.num_attribs = 1;
      vinfo.format[0] = FORMAT_4F;
      vinfo.interp_mode[0] = INTERP_LINEAR;
   }
   else {
      /* GL_FEEDBACK, or glRasterPos */
      /* emit all attribs (pos, color, texcoord) as GLfloat[4] */
      vinfo.num_attribs = st->state.vs->cso->state.num_outputs;
      for (i = 0; i < vinfo.num_attribs; i++) {
         vinfo.format[i] = FORMAT_4F;
         vinfo.interp_mode[i] = INTERP_LINEAR;
      }
   }

   draw_set_vertex_info(st->draw, &vinfo);
#endif
}


/**
 * Helper for drawing current vertex arrays.
 */
static void
draw_arrays(struct draw_context *draw, unsigned mode,
            unsigned start, unsigned count)
{
   struct pipe_draw_info info;

   util_draw_init_info(&info);

   info.mode = mode;
   info.start = start;
   info.count = count;
   info.min_index = start;
   info.max_index = start + count - 1;

   draw_vbo(draw, &info);
}


/**
 * Called by VBO to draw arrays when in selection or feedback mode and
 * to implement glRasterPos.
 * This is very much like the normal draw_vbo() function above.
 * Look at code refactoring some day.
 */
void
st_feedback_draw_vbo(struct gl_context *ctx,
                     const struct _mesa_prim *prims,
                     GLuint nr_prims,
                     const struct _mesa_index_buffer *ib,
		     GLboolean index_bounds_valid,
                     GLuint min_index,
                     GLuint max_index,
                     struct gl_transform_feedback_object *tfb_vertcount,
                     struct gl_buffer_object *indirect)
{
   struct st_context *st = st_context(ctx);
   struct pipe_context *pipe = st->pipe;
   struct draw_context *draw = st->draw;
   const struct st_vertex_program *vp;
   const struct pipe_shader_state *vs;
   struct pipe_vertex_buffer vbuffers[PIPE_MAX_SHADER_INPUTS];
   struct pipe_vertex_element velements[PIPE_MAX_ATTRIBS];
   struct pipe_index_buffer ibuffer;
   struct pipe_transfer *vb_transfer[PIPE_MAX_ATTRIBS] = {NULL};
   struct pipe_transfer *ib_transfer = NULL;
   const struct gl_client_array **arrays = ctx->Array._DrawArrays;
   GLuint attr, i;
   const GLubyte *low_addr = NULL;
   const void *mapped_indices = NULL;

   assert(draw);

   st_validate_state(st);

   if (!index_bounds_valid)
      vbo_get_minmax_indices(ctx, prims, ib, &min_index, &max_index, nr_prims);

   /* must get these after state validation! */
   vp = st->vp;
   vs = &st->vp_variant->tgsi;

   if (!st->vp_variant->draw_shader) {
      st->vp_variant->draw_shader = draw_create_vertex_shader(draw, vs);
   }

   /*
    * Set up the draw module's state.
    *
    * We'd like to do this less frequently, but the normal state-update
    * code sends state updates to the pipe, not to our private draw module.
    */
   assert(draw);
   draw_set_viewport_states(draw, 0, 1, &st->state.viewport[0]);
   draw_set_clip_state(draw, &st->state.clip);
   draw_set_rasterizer_state(draw, &st->state.rasterizer, NULL);
   draw_bind_vertex_shader(draw, st->vp_variant->draw_shader);
   set_feedback_vertex_format(ctx);

   /* Find the lowest address of the arrays we're drawing */
   if (vp->num_inputs) {
      low_addr = arrays[vp->index_to_input[0]]->Ptr;

      for (attr = 1; attr < vp->num_inputs; attr++) {
         const GLubyte *start = arrays[vp->index_to_input[attr]]->Ptr;
         low_addr = MIN2(low_addr, start);
      }
   }

   /* loop over TGSI shader inputs to determine vertex buffer
    * and attribute info
    */
   for (attr = 0; attr < vp->num_inputs; attr++) {
      const GLuint mesaAttr = vp->index_to_input[attr];
      struct gl_buffer_object *bufobj = arrays[mesaAttr]->BufferObj;
      void *map;

      if (bufobj && bufobj->Name) {
         /* Attribute data is in a VBO.
          * Recall that for VBOs, the gl_client_array->Ptr field is
          * really an offset from the start of the VBO, not a pointer.
          */
         struct st_buffer_object *stobj = st_buffer_object(bufobj);
         assert(stobj->buffer);

         vbuffers[attr].buffer = NULL;
         vbuffers[attr].user_buffer = NULL;
         pipe_resource_reference(&vbuffers[attr].buffer, stobj->buffer);
         vbuffers[attr].buffer_offset = pointer_to_offset(low_addr);
         velements[attr].src_offset = arrays[mesaAttr]->Ptr - low_addr;

         /* map the attrib buffer */
         map = pipe_buffer_map(pipe, vbuffers[attr].buffer,
                               PIPE_TRANSFER_READ,
                               &vb_transfer[attr]);
         draw_set_mapped_vertex_buffer(draw, attr, map,
                                       vbuffers[attr].buffer->width0);
      }
      else {
         vbuffers[attr].buffer = NULL;
         vbuffers[attr].user_buffer = arrays[mesaAttr]->Ptr;
         vbuffers[attr].buffer_offset = 0;
         velements[attr].src_offset = 0;

         draw_set_mapped_vertex_buffer(draw, attr, vbuffers[attr].user_buffer,
                                       ~0);
      }

      /* common-case setup */
      vbuffers[attr].stride = arrays[mesaAttr]->StrideB; /* in bytes */
      velements[attr].instance_divisor = 0;
      velements[attr].vertex_buffer_index = attr;
      velements[attr].src_format = 
         st_pipe_vertex_format(arrays[mesaAttr]->Type,
                               arrays[mesaAttr]->Size,
                               arrays[mesaAttr]->Format,
                               arrays[mesaAttr]->Normalized,
                               arrays[mesaAttr]->Integer);
      assert(velements[attr].src_format);

      /* tell draw about this attribute */
#if 0
      draw_set_vertex_buffer(draw, attr, &vbuffer[attr]);
#endif
   }

   draw_set_vertex_buffers(draw, 0, vp->num_inputs, vbuffers);
   draw_set_vertex_elements(draw, vp->num_inputs, velements);

   memset(&ibuffer, 0, sizeof(ibuffer));
   if (ib) {
      struct gl_buffer_object *bufobj = ib->obj;

      ibuffer.index_size = vbo_sizeof_ib_type(ib->type);
      if (ibuffer.index_size == 0)
         goto out_unref_vertex;

      if (bufobj && bufobj->Name) {
         struct st_buffer_object *stobj = st_buffer_object(bufobj);

         pipe_resource_reference(&ibuffer.buffer, stobj->buffer);
         ibuffer.offset = pointer_to_offset(ib->ptr);

         mapped_indices = pipe_buffer_map(pipe, stobj->buffer,
                                          PIPE_TRANSFER_READ, &ib_transfer);
      }
      else {
         /* skip setting ibuffer.buffer as the draw module does not use it */
         mapped_indices = ib->ptr;
      }

      draw_set_indexes(draw,
                       (ubyte *) mapped_indices + ibuffer.offset,
                       ibuffer.index_size, ~0);
   }

   /* set the constant buffer */
   draw_set_mapped_constant_buffer(st->draw, PIPE_SHADER_VERTEX, 0,
                                   st->state.constants[PIPE_SHADER_VERTEX].ptr,
                                   st->state.constants[PIPE_SHADER_VERTEX].size);


   /* draw here */
   for (i = 0; i < nr_prims; i++) {
      draw_arrays(draw, prims[i].mode, prims[i].start, prims[i].count);
   }


   /*
    * unmap vertex/index buffers
    */
   if (ib) {
      draw_set_indexes(draw, NULL, 0, 0);
      if (ib_transfer)
         pipe_buffer_unmap(pipe, ib_transfer);
      pipe_resource_reference(&ibuffer.buffer, NULL);
   }

 out_unref_vertex:
   for (attr = 0; attr < vp->num_inputs; attr++) {
      if (vb_transfer[attr])
         pipe_buffer_unmap(pipe, vb_transfer[attr]);
      draw_set_mapped_vertex_buffer(draw, attr, NULL, 0);
      pipe_resource_reference(&vbuffers[attr].buffer, NULL);
   }
   draw_set_vertex_buffers(draw, 0, vp->num_inputs, NULL);
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d119 2
a120 1
                     struct gl_transform_feedback_object *tfb_vertcount)
d159 1
a159 1
   draw_set_viewport_states(draw, 0, 1, &st->state.viewport);
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a30 1
#include "main/mfeatures.h"
d43 1
a48 2
#if FEATURE_feedback || FEATURE_rastpos

d85 21
a109 1
 * Might move this into the failover module some day.
a112 1
                     const struct gl_client_array **arrays,
d118 2
a119 1
                     GLuint max_index)
d129 1
a129 1
   struct pipe_transfer *vb_transfer[PIPE_MAX_ATTRIBS];
d131 1
d141 1
a141 1
      vbo_get_minmax_index(ctx, prims, ib, &min_index, &max_index);
d158 1
a158 1
   draw_set_viewport_state(draw, &st->state.viewport);
d191 1
d195 7
d204 2
a205 10
         /* attribute data is in user-space memory, not a VBO */
         uint bytes = (arrays[mesaAttr]->Size
                       * _mesa_sizeof_type(arrays[mesaAttr]->Type)
                       * (max_index + 1));

         /* wrap user data */
         vbuffers[attr].buffer
            = pipe_user_buffer_create(pipe->screen, (void *) arrays[mesaAttr]->Ptr,
                                      bytes,
				      PIPE_BIND_VERTEX_BUFFER);
d208 3
d221 2
a222 1
                               arrays[mesaAttr]->Normalized);
a228 6

      /* map the attrib buffer */
      map = pipe_buffer_map(pipe, vbuffers[attr].buffer,
                            PIPE_TRANSFER_READ,
			    &vb_transfer[attr]);
      draw_set_mapped_vertex_buffer(draw, attr, map);
d231 1
a231 1
   draw_set_vertex_buffers(draw, vp->num_inputs, vbuffers);
d238 3
a240 14
      switch (ib->type) {
      case GL_UNSIGNED_INT:
         ibuffer.index_size = 4;
         break;
      case GL_UNSIGNED_SHORT:
         ibuffer.index_size = 2;
         break;
      case GL_UNSIGNED_BYTE:
         ibuffer.index_size = 1;
         break;
      default:
         assert(0);
	 goto out_unref_vertex;
      }
d256 3
a258 2
      draw_set_index_buffer(draw, &ibuffer);
      draw_set_mapped_index_buffer(draw, mapped_indices);
d277 1
a277 3
      draw_set_mapped_index_buffer(draw, NULL);
      draw_set_index_buffer(draw, NULL);

d285 3
a287 2
      pipe_buffer_unmap(pipe, vb_transfer[attr]);
      draw_set_mapped_vertex_buffer(draw, attr, NULL);
d290 1
a290 1
   draw_set_vertex_buffers(draw, 0, NULL);
a291 3

#endif /* FEATURE_feedback || FEATURE_rastpos */

@


1.2
log
@Merge Mesa 7.10.3
@
text
@d31 1
a112 1
   struct pipe_transfer *cb_transfer;
d114 1
a114 1
   ubyte *mapped_constants;
d126 1
a126 1
   vs = &st->vp_varient->tgsi;
d128 2
a129 2
   if (!st->vp_varient->draw_shader) {
      st->vp_varient->draw_shader = draw_create_vertex_shader(draw, vs);
d142 1
a142 1
   draw_bind_vertex_shader(draw, st->vp_varient->draw_shader);
d145 10
d173 2
a174 2
         vbuffers[attr].buffer_offset = pointer_to_offset(arrays[0]->Ptr);
         velements[attr].src_offset = arrays[mesaAttr]->Ptr - arrays[0]->Ptr;
a192 1
      vbuffers[attr].max_index = max_index;
d233 1
a233 1
	 return;
d254 1
a254 5
   /* map constant buffers */
   mapped_constants = pipe_buffer_map(pipe,
                                      st->state.constants[PIPE_SHADER_VERTEX],
                                      PIPE_TRANSFER_READ,
				      &cb_transfer);
d256 2
a257 2
                                   mapped_constants,
                                   st->state.constants[PIPE_SHADER_VERTEX]->width0);
a265 4
   /* unmap constant buffers */
   pipe_buffer_unmap(pipe, st->state.constants[PIPE_SHADER_VERTEX],
		     cb_transfer);

a268 9
   for (i = 0; i < PIPE_MAX_ATTRIBS; i++) {
      if (draw->pt.vertex_buffer[i].buffer) {
         pipe_buffer_unmap(pipe, draw->pt.vertex_buffer[i].buffer, 
			   vb_transfer[i]);
         pipe_resource_reference(&draw->pt.vertex_buffer[i].buffer, NULL);
         draw_set_mapped_vertex_buffer(draw, i, NULL);
      }
   }

d274 1
a274 1
         pipe_buffer_unmap(pipe, ibuffer.buffer, ib_transfer);
d277 8
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d48 1
a48 1
#if FEATURE_feedback || FEATURE_drawpix
d55 1
a55 1
set_feedback_vertex_format(GLcontext *ctx)
d58 1
a58 1
   struct st_context *st = ctx->st;
d93 1
a93 1
st_feedback_draw_vbo(GLcontext *ctx,
d102 1
a102 1
   struct st_context *st = ctx->st;
a106 1
   struct pipe_buffer *index_buffer_handle = 0;
d109 4
d115 1
d119 1
a119 1
   st_validate_state(ctx->st);
d125 1
a125 1
   vp = ctx->st->vp;
d162 1
a162 1
         pipe_buffer_reference(&vbuffers[attr].buffer, stobj->buffer);
d175 2
a176 1
                                      bytes);
a185 1
      velements[attr].nr_components = arrays[mesaAttr]->Size;
d199 3
a201 2
      map = pipe_buffer_map(pipe->screen, vbuffers[attr].buffer,
                            PIPE_BUFFER_USAGE_CPU_READ);
d208 1
a210 2
      unsigned indexSize;
      void *map;
d214 1
a214 1
         indexSize = 4;
d217 4
a220 1
         indexSize = 2;
d230 2
a231 4
         index_buffer_handle = stobj->buffer;

         map = pipe_buffer_map(pipe->screen, index_buffer_handle,
                               PIPE_BUFFER_USAGE_CPU_READ);
d233 2
a234 1
         draw_set_mapped_element_buffer(draw, indexSize, map);
d237 2
a238 1
         draw_set_mapped_element_buffer(draw, indexSize, (void *) ib->ptr);
d240 3
a243 5
   else {
      /* no index/element buffer */
      draw_set_mapped_element_buffer(draw, 0, NULL);
   }

d246 1
a246 1
   mapped_constants = pipe_buffer_map(pipe->screen,
d248 2
a249 1
                                      PIPE_BUFFER_USAGE_CPU_READ);
d252 1
a252 1
                                   st->state.constants[PIPE_SHADER_VERTEX]->size);
d262 2
a263 1
   pipe_buffer_unmap(pipe->screen, st->state.constants[PIPE_SHADER_VERTEX]);
d270 3
a272 2
         pipe_buffer_unmap(pipe->screen, draw->pt.vertex_buffer[i].buffer);
         pipe_buffer_reference(&draw->pt.vertex_buffer[i].buffer, NULL);
d276 8
a283 3
   if (index_buffer_handle) {
      pipe_buffer_unmap(pipe->screen, index_buffer_handle);
      draw_set_mapped_element_buffer(draw, 0, NULL);
d287 1
a287 1
#endif /* FEATURE_feedback || FEATURE_drawpix */
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d48 1
a48 1
#if FEATURE_feedback || FEATURE_rastpos
d55 1
a55 1
set_feedback_vertex_format(struct gl_context *ctx)
d58 1
a58 1
   struct st_context *st = st_context(ctx);
d93 1
a93 1
st_feedback_draw_vbo(struct gl_context *ctx,
d102 1
a102 1
   struct st_context *st = st_context(ctx);
d107 1
a109 4
   struct pipe_index_buffer ibuffer;
   struct pipe_transfer *vb_transfer[PIPE_MAX_ATTRIBS];
   struct pipe_transfer *ib_transfer = NULL;
   struct pipe_transfer *cb_transfer;
a111 1
   const void *mapped_indices = NULL;
d115 1
a115 1
   st_validate_state(st);
d121 1
a121 1
   vp = st->vp;
d158 1
a158 1
         pipe_resource_reference(&vbuffers[attr].buffer, stobj->buffer);
d171 1
a171 2
                                      bytes,
				      PIPE_BIND_VERTEX_BUFFER);
d181 1
d195 2
a196 3
      map = pipe_buffer_map(pipe, vbuffers[attr].buffer,
                            PIPE_TRANSFER_READ,
			    &vb_transfer[attr]);
a202 1
   memset(&ibuffer, 0, sizeof(ibuffer));
d205 2
d210 1
a210 1
         ibuffer.index_size = 4;
d213 1
a213 4
         ibuffer.index_size = 2;
         break;
      case GL_UNSIGNED_BYTE:
         ibuffer.index_size = 1;
d223 4
a226 2
         pipe_resource_reference(&ibuffer.buffer, stobj->buffer);
         ibuffer.offset = pointer_to_offset(ib->ptr);
d228 1
a228 2
         mapped_indices = pipe_buffer_map(pipe, stobj->buffer,
                                          PIPE_TRANSFER_READ, &ib_transfer);
d231 1
a231 2
         /* skip setting ibuffer.buffer as the draw module does not use it */
         mapped_indices = ib->ptr;
d233 5
a238 3
      draw_set_index_buffer(draw, &ibuffer);
      draw_set_mapped_index_buffer(draw, mapped_indices);
   }
d241 1
a241 1
   mapped_constants = pipe_buffer_map(pipe,
d243 1
a243 2
                                      PIPE_TRANSFER_READ,
				      &cb_transfer);
d246 1
a246 1
                                   st->state.constants[PIPE_SHADER_VERTEX]->width0);
d256 1
a256 2
   pipe_buffer_unmap(pipe, st->state.constants[PIPE_SHADER_VERTEX],
		     cb_transfer);
d263 2
a264 3
         pipe_buffer_unmap(pipe, draw->pt.vertex_buffer[i].buffer, 
			   vb_transfer[i]);
         pipe_resource_reference(&draw->pt.vertex_buffer[i].buffer, NULL);
d268 3
a270 8

   if (ib) {
      draw_set_mapped_index_buffer(draw, NULL);
      draw_set_index_buffer(draw, NULL);

      if (ib_transfer)
         pipe_buffer_unmap(pipe, ibuffer.buffer, ib_transfer);
      pipe_resource_reference(&ibuffer.buffer, NULL);
d274 1
a274 1
#endif /* FEATURE_feedback || FEATURE_rastpos */
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a42 1
#include "util/u_draw.h"
d48 2
a85 21
 * Helper for drawing current vertex arrays.
 */
static void
draw_arrays(struct draw_context *draw, unsigned mode,
            unsigned start, unsigned count)
{
   struct pipe_draw_info info;

   util_draw_init_info(&info);

   info.mode = mode;
   info.start = start;
   info.count = count;
   info.min_index = start;
   info.max_index = start + count - 1;

   draw_vbo(draw, &info);
}


/**
d90 1
d94 1
d100 1
a100 2
                     GLuint max_index,
                     struct gl_transform_feedback_object *tfb_vertcount)
d110 1
a110 1
   struct pipe_transfer *vb_transfer[PIPE_MAX_ATTRIBS] = {NULL};
d112 1
a112 1
   const struct gl_client_array **arrays = ctx->Array._DrawArrays;
d114 1
a114 1
   const GLubyte *low_addr = NULL;
d122 1
a122 1
      vbo_get_minmax_indices(ctx, prims, ib, &min_index, &max_index, nr_prims);
d126 1
a126 1
   vs = &st->vp_variant->tgsi;
d128 2
a129 2
   if (!st->vp_variant->draw_shader) {
      st->vp_variant->draw_shader = draw_create_vertex_shader(draw, vs);
d139 1
a139 1
   draw_set_viewport_states(draw, 0, 1, &st->state.viewport);
d142 1
a142 1
   draw_bind_vertex_shader(draw, st->vp_variant->draw_shader);
a144 10
   /* Find the lowest address of the arrays we're drawing */
   if (vp->num_inputs) {
      low_addr = arrays[vp->index_to_input[0]]->Ptr;

      for (attr = 1; attr < vp->num_inputs; attr++) {
         const GLubyte *start = arrays[vp->index_to_input[attr]]->Ptr;
         low_addr = MIN2(low_addr, start);
      }
   }

a161 1
         vbuffers[attr].user_buffer = NULL;
d163 2
a164 9
         vbuffers[attr].buffer_offset = pointer_to_offset(low_addr);
         velements[attr].src_offset = arrays[mesaAttr]->Ptr - low_addr;

         /* map the attrib buffer */
         map = pipe_buffer_map(pipe, vbuffers[attr].buffer,
                               PIPE_TRANSFER_READ,
                               &vb_transfer[attr]);
         draw_set_mapped_vertex_buffer(draw, attr, map,
                                       vbuffers[attr].buffer->width0);
d167 10
a176 2
         vbuffers[attr].buffer = NULL;
         vbuffers[attr].user_buffer = arrays[mesaAttr]->Ptr;
a178 3

         draw_set_mapped_vertex_buffer(draw, attr, vbuffers[attr].user_buffer,
                                       ~0);
d183 1
d190 1
a190 2
                               arrays[mesaAttr]->Normalized,
                               arrays[mesaAttr]->Integer);
d197 6
d205 1
a205 1
   draw_set_vertex_buffers(draw, 0, vp->num_inputs, vbuffers);
d212 14
a225 3
      ibuffer.index_size = vbo_sizeof_ib_type(ib->type);
      if (ibuffer.index_size == 0)
         goto out_unref_vertex;
d241 2
a242 3
      draw_set_indexes(draw,
                       (ubyte *) mapped_indices + ibuffer.offset,
                       ibuffer.index_size, ~0);
d245 5
a249 1
   /* set the constant buffer */
d251 2
a252 2
                                   st->state.constants[PIPE_SHADER_VERTEX].ptr,
                                   st->state.constants[PIPE_SHADER_VERTEX].size);
d261 4
d268 9
d278 3
a280 1
      draw_set_indexes(draw, NULL, 0, 0);
d282 1
a282 1
         pipe_buffer_unmap(pipe, ib_transfer);
d285 3
a288 9
 out_unref_vertex:
   for (attr = 0; attr < vp->num_inputs; attr++) {
      if (vb_transfer[attr])
         pipe_buffer_unmap(pipe, vb_transfer[attr]);
      draw_set_mapped_vertex_buffer(draw, attr, NULL, 0);
      pipe_resource_reference(&vbuffers[attr].buffer, NULL);
   }
   draw_set_vertex_buffers(draw, 0, vp->num_inputs, NULL);
}
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d119 1
a119 2
                     struct gl_transform_feedback_object *tfb_vertcount,
                     struct gl_buffer_object *indirect)
d158 1
a158 1
   draw_set_viewport_states(draw, 0, 1, &st->state.viewport[0]);
@


