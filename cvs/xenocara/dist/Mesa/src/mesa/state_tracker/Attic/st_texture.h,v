head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.46;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.27;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.12;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.13.24;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.50.30;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#ifndef ST_TEXTURE_H
#define ST_TEXTURE_H


#include "pipe/p_context.h"
#include "util/u_sampler.h"

#include "main/mtypes.h"


struct pipe_resource;


/**
 * Subclass of gl_texure_image.
 */
struct st_texture_image
{
   struct gl_texture_image base;

   /** Used to store texture data that doesn't fit in the parent
    * object's mipmap buffer.
    */
   GLubyte *TexData;

   /* If stImage->pt != NULL, image data is stored here.
    * Else if stImage->TexData != NULL, image is stored there.
    * Else there is no image data.
    */
   struct pipe_resource *pt;

   /* List of transfers, allocated on demand.
    * transfer[layer] is a mapping for that layer.
    */
   struct pipe_transfer **transfer;
   unsigned num_transfers;
};


/**
 * Subclass of gl_texure_object.
 */
struct st_texture_object
{
   struct gl_texture_object base;       /* The "parent" object */

   /* The texture must include at levels [0..lastLevel] once validated:
    */
   GLuint lastLevel;

   /** The size of the level=0 mipmap image.
    * Note that the number of 1D array layers will be in height0 and the
    * number of 2D array layers will be in depth0, as in GL.
    */
   GLuint width0, height0, depth0;

   /* On validation any active images held in main memory or in other
    * textures will be copied to this texture and the old storage freed.
    */
   struct pipe_resource *pt;

   /* Number of views in sampler_views array */
   GLuint num_sampler_views;

   /* Array of sampler views (one per context) attached to this texture
    * object. Created lazily on first binding in context.
    */
   struct pipe_sampler_view **sampler_views;

   /* True if this texture comes from the window system. Such a texture
    * cannot be reallocated and the format can only be changed with a sampler
    * view or a surface.
    */
   GLboolean surface_based;

   /* If surface_based is true, this format should be used for all sampler
    * views and surfaces instead of pt->format.
    */
   enum pipe_format surface_format;
};


static INLINE struct st_texture_image *
st_texture_image(struct gl_texture_image *img)
{
   return (struct st_texture_image *) img;
}

static INLINE struct st_texture_object *
st_texture_object(struct gl_texture_object *obj)
{
   return (struct st_texture_object *) obj;
}

static INLINE const struct st_texture_object *
st_texture_object_const(const struct gl_texture_object *obj)
{
   return (const struct st_texture_object *) obj;
}


static INLINE struct pipe_resource *
st_get_texobj_resource(struct gl_texture_object *texObj)
{
   struct st_texture_object *stObj = st_texture_object(texObj);
   return stObj ? stObj->pt : NULL;
}


static INLINE struct pipe_resource *
st_get_stobj_resource(struct st_texture_object *stObj)
{
   return stObj ? stObj->pt : NULL;
}


static INLINE struct pipe_sampler_view *
st_create_texture_sampler_view_format(struct pipe_context *pipe,
                                      struct pipe_resource *texture,
                                      enum pipe_format format)
{
   struct pipe_sampler_view templ;

   u_sampler_view_default_template(&templ, texture, format);

   return pipe->create_sampler_view(pipe, texture, &templ);
}

static INLINE struct pipe_sampler_view *
st_create_texture_sampler_view(struct pipe_context *pipe,
                               struct pipe_resource *texture)
{
   return st_create_texture_sampler_view_format(pipe, texture,
                                                texture->format);
}



extern struct pipe_resource *
st_texture_create(struct st_context *st,
                  enum pipe_texture_target target,
		  enum pipe_format format,
                  GLuint last_level,
                  GLuint width0,
                  GLuint height0,
                  GLuint depth0,
                  GLuint layers,
                  GLuint nr_samples,
                  GLuint tex_usage );


extern void
st_gl_texture_dims_to_pipe_dims(GLenum texture,
                                GLuint widthIn,
                                GLuint heightIn,
                                GLuint depthIn,
                                GLuint *widthOut,
                                GLuint *heightOut,
                                GLuint *depthOut,
                                GLuint *layersOut);

/* Check if an image fits into an existing texture object.
 */
extern GLboolean
st_texture_match_image(const struct pipe_resource *pt,
                       const struct gl_texture_image *image);

/* Return a pointer to an image within a texture.  Return image stride as
 * well.
 */
extern GLubyte *
st_texture_image_map(struct st_context *st, struct st_texture_image *stImage,
                     enum pipe_transfer_usage usage,
                     GLuint x, GLuint y, GLuint z,
                     GLuint w, GLuint h, GLuint d,
                     struct pipe_transfer **transfer);

extern void
st_texture_image_unmap(struct st_context *st,
                       struct st_texture_image *stImage, unsigned slice);


/* Return pointers to each 2d slice within an image.  Indexed by depth
 * value.
 */
extern const GLuint *
st_texture_depth_offsets(struct pipe_resource *pt, GLuint level);


/* Upload an image into a texture
 */
extern void
st_texture_image_data(struct st_context *st,
                      struct pipe_resource *dst,
                      GLuint face, GLuint level, void *src,
                      GLuint src_row_pitch, GLuint src_image_pitch);


/* Copy an image between two textures
 */
extern void
st_texture_image_copy(struct pipe_context *pipe,
                      struct pipe_resource *dst, GLuint dstLevel,
                      struct pipe_resource *src, GLuint srcLevel,
                      GLuint face);


extern struct pipe_resource *
st_create_color_map_texture(struct gl_context *ctx);

extern struct pipe_sampler_view **
st_texture_get_sampler_view(struct st_context *st,
                            struct st_texture_object *stObj);

extern void
st_texture_release_sampler_view(struct st_context *st,
                                struct st_texture_object *stObj);

extern void
st_texture_release_all_sampler_views(struct st_texture_object *stObj);

void
st_texture_free_sampler_views(struct st_texture_object *stObj);

#endif
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a40 10
struct st_texture_image_transfer {
   struct pipe_transfer *transfer;

   /* For ETC fallback. */
   GLubyte *temp_data; /**< Temporary ETC texture storage. */
   unsigned temp_stride; /**< Stride of the ETC texture storage. */
   GLubyte *map; /**< Saved map pointer of the uncompressed transfer. */
};


d62 1
a62 1
   struct st_texture_image_transfer *transfer;
d192 1
a192 2
st_texture_match_image(struct st_context *st,
                       const struct pipe_resource *pt,
d247 1
a247 2
st_texture_release_all_sampler_views(struct st_context *st,
                                     struct st_texture_object *stObj);
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d41 10
d72 1
a72 1
   struct pipe_transfer **transfer;
d202 2
a203 1
st_texture_match_image(const struct pipe_resource *pt,
d258 2
a259 1
st_texture_release_all_sampler_views(struct st_texture_object *stObj);
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2007 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d59 5
a63 1
   struct pipe_transfer *transfer;
d89 5
a93 2
   /* Default sampler view attached to this texture object. Created lazily
    * on first binding.
d95 1
a95 1
   struct pipe_sampler_view *sampler_view;
d122 6
d202 2
a203 1
                     GLuint w, GLuint h, GLuint d);
d207 1
a207 1
                       struct st_texture_image *stImage);
d237 14
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d48 2
a49 1
   /* These aren't stored in gl_texture_image 
d51 1
a51 2
   GLuint level;
   GLuint face;
d54 1
a54 1
    * Else if stImage->base.Data != NULL, image is stored there.
d90 3
a92 2
   /* True if there is/was a surface bound to this texture object.  It helps
    * track whether the texture object is surface based or not.
d95 5
a131 12
st_create_texture_sampler_view(struct pipe_context *pipe,
                               struct pipe_resource *texture)
{
   struct pipe_sampler_view templ;

   u_sampler_view_default_template(&templ, texture, texture->format);

   return pipe->create_sampler_view(pipe, texture, &templ);
}


static INLINE struct pipe_sampler_view *
a142 1

d144 2
a145 2
st_get_texture_sampler_view(struct st_texture_object *stObj,
                            struct pipe_context *pipe)
d147 3
a149 7
   if (!stObj || !stObj->pt) {
      return NULL;
   }

   if (!stObj->sampler_view) {
      stObj->sampler_view = st_create_texture_sampler_view(pipe, stObj->pt);
   }
a150 2
   return stObj->sampler_view;
}
d162 1
d180 1
a180 2
                       const struct gl_texture_image *image,
                       GLuint face, GLuint level);
d186 1
a186 3
st_texture_image_map(struct st_context *st,
                     struct st_texture_image *stImage,
		     GLuint zoffset,
d188 2
a189 2
                     unsigned x, unsigned y,
                     unsigned w, unsigned h);
d219 4
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d74 4
a77 1
   /** The size of the level=0 mipmap image */
d131 1
a131 3
   u_sampler_view_default_template(&templ,
                                   texture,
                                   texture->format);
d144 1
a144 3
   u_sampler_view_default_template(&templ,
                                   texture,
                                   format);
d149 1
a152 1

d174 1
d177 10
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d32 3
d37 2
a38 2
struct pipe_context;
struct pipe_texture;
d41 3
d57 1
a57 1
   struct pipe_texture *pt;
d63 3
a65 1

d74 3
d80 1
a80 1
   struct pipe_texture *pt;
d82 4
a85 1
   GLboolean teximage_realloc;
d107 2
a108 2
static INLINE struct pipe_texture *
st_get_texobj_texture(struct gl_texture_object *texObj)
d115 2
a116 2
static INLINE struct pipe_texture *
st_get_stobj_texture(struct st_texture_object *stObj)
d122 46
a167 1
extern struct pipe_texture *
d181 1
a181 1
st_texture_match_image(const struct pipe_texture *pt,
d205 1
a205 13
st_texture_depth_offsets(struct pipe_texture *pt, GLuint level);


/* Return the linear offset of an image relative to the start of its region.
 */
extern GLuint
st_texture_image_offset(const struct pipe_texture *pt,
                        GLuint face, GLuint level);

extern GLuint
st_texture_texel_offset(const struct pipe_texture * pt,
                        GLuint face, GLuint level,
                        GLuint col, GLuint row, GLuint img);
d212 1
a212 1
                      struct pipe_texture *dst,
d221 2
a222 2
                      struct pipe_texture *dst, GLuint dstLevel,
                      struct pipe_texture *src,
a224 6
extern void
st_teximage_flush_before_map(struct st_context *st,
			     struct pipe_texture *pt,
			     unsigned int face,
			     unsigned int level,
			     enum pipe_transfer_usage usage);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a31 3
#include "pipe/p_context.h"
#include "util/u_sampler.h"

d34 2
a35 2

struct pipe_resource;
a37 3
/**
 * Subclass of gl_texure_image.
 */
d51 1
a51 1
   struct pipe_resource *pt;
d57 1
a57 3
/**
 * Subclass of gl_texure_object.
 */
a65 3
   /** The size of the level=0 mipmap image */
   GLuint width0, height0, depth0;

d69 1
a69 1
   struct pipe_resource *pt;
d71 1
a71 4
   /* Default sampler view attached to this texture object. Created lazily
    * on first binding.
    */
   struct pipe_sampler_view *sampler_view;
d93 2
a94 2
static INLINE struct pipe_resource *
st_get_texobj_resource(struct gl_texture_object *texObj)
d101 2
a102 2
static INLINE struct pipe_resource *
st_get_stobj_resource(struct st_texture_object *stObj)
d108 1
a108 46
static INLINE struct pipe_sampler_view *
st_create_texture_sampler_view(struct pipe_context *pipe,
                               struct pipe_resource *texture)
{
   struct pipe_sampler_view templ;

   u_sampler_view_default_template(&templ,
                                   texture,
                                   texture->format);

   return pipe->create_sampler_view(pipe, texture, &templ);
}


static INLINE struct pipe_sampler_view *
st_create_texture_sampler_view_format(struct pipe_context *pipe,
                                      struct pipe_resource *texture,
                                      enum pipe_format format)
{
   struct pipe_sampler_view templ;

   u_sampler_view_default_template(&templ,
                                   texture,
                                   format);

   return pipe->create_sampler_view(pipe, texture, &templ);
}

static INLINE struct pipe_sampler_view *
st_get_texture_sampler_view(struct st_texture_object *stObj,
                            struct pipe_context *pipe)

{
   if (!stObj || !stObj->pt) {
      return NULL;
   }

   if (!stObj->sampler_view) {
      stObj->sampler_view = st_create_texture_sampler_view(pipe, stObj->pt);
   }

   return stObj->sampler_view;
}


extern struct pipe_resource *
d122 1
a122 1
st_texture_match_image(const struct pipe_resource *pt,
d146 13
a158 1
st_texture_depth_offsets(struct pipe_resource *pt, GLuint level);
d165 1
a165 1
                      struct pipe_resource *dst,
d174 2
a175 2
                      struct pipe_resource *dst, GLuint dstLevel,
                      struct pipe_resource *src, GLuint srcLevel,
d178 6
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d48 1
a48 2
   /** Used to store texture data that doesn't fit in the parent
    * object's mipmap buffer.
d50 2
a51 1
   GLubyte *TexData;
d54 1
a54 1
    * Else if stImage->TexData != NULL, image is stored there.
d74 1
a74 4
   /** The size of the level=0 mipmap image.
    * Note that the number of 1D array layers will be in height0 and the
    * number of 2D array layers will be in depth0, as in GL.
    */
d87 2
a88 3
   /* True if this texture comes from the window system. Such a texture
    * cannot be reallocated and the format can only be changed with a sampler
    * view or a surface.
a90 5

   /* If surface_based is true, this format should be used for all sampler
    * views and surfaces instead of pt->format.
    */
   enum pipe_format surface_format;
d123 14
d143 3
a145 1
   u_sampler_view_default_template(&templ, texture, format);
d151 3
a153 2
st_create_texture_sampler_view(struct pipe_context *pipe,
                               struct pipe_resource *texture)
d155 9
a163 2
   return st_create_texture_sampler_view_format(pipe, texture,
                                                texture->format);
a166 1

a174 2
                  GLuint layers,
                  GLuint nr_samples,
a177 10
extern void
st_gl_texture_dims_to_pipe_dims(GLenum texture,
                                GLuint widthIn,
                                GLuint heightIn,
                                GLuint depthIn,
                                GLuint *widthOut,
                                GLuint *heightOut,
                                GLuint *depthOut,
                                GLuint *layersOut);

d182 2
a183 1
                       const struct gl_texture_image *image);
d189 3
a191 1
st_texture_image_map(struct st_context *st, struct st_texture_image *stImage,
d193 2
a194 2
                     GLuint x, GLuint y, GLuint z,
                     GLuint w, GLuint h, GLuint d);
a223 4


extern struct pipe_resource *
st_create_color_map_texture(struct gl_context *ctx);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2007 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d59 1
a59 5
   /* List of transfers, allocated on demand.
    * transfer[layer] is a mapping for that layer.
    */
   struct pipe_transfer **transfer;
   unsigned num_transfers;
d85 2
a86 5
   /* Number of views in sampler_views array */
   GLuint num_sampler_views;

   /* Array of sampler views (one per context) attached to this texture
    * object. Created lazily on first binding in context.
d88 1
a88 1
   struct pipe_sampler_view **sampler_views;
a114 6
static INLINE const struct st_texture_object *
st_texture_object_const(const struct gl_texture_object *obj)
{
   return (const struct st_texture_object *) obj;
}

d189 1
a189 2
                     GLuint w, GLuint h, GLuint d,
                     struct pipe_transfer **transfer);
d193 1
a193 1
                       struct st_texture_image *stImage, unsigned slice);
a222 14

extern struct pipe_sampler_view **
st_texture_get_sampler_view(struct st_context *st,
                            struct st_texture_object *stObj);

extern void
st_texture_release_sampler_view(struct st_context *st,
                                struct st_texture_object *stObj);

extern void
st_texture_release_all_sampler_views(struct st_texture_object *stObj);

void
st_texture_free_sampler_views(struct st_texture_object *stObj);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a40 10
struct st_texture_image_transfer {
   struct pipe_transfer *transfer;

   /* For ETC fallback. */
   GLubyte *temp_data; /**< Temporary ETC texture storage. */
   unsigned temp_stride; /**< Stride of the ETC texture storage. */
   GLubyte *map; /**< Saved map pointer of the uncompressed transfer. */
};


d62 1
a62 1
   struct st_texture_image_transfer *transfer;
d192 1
a192 2
st_texture_match_image(struct st_context *st,
                       const struct pipe_resource *pt,
d247 1
a247 2
st_texture_release_all_sampler_views(struct st_context *st,
                                     struct st_texture_object *stObj);
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d41 10
d72 1
a72 1
   struct pipe_transfer **transfer;
d202 2
a203 1
st_texture_match_image(const struct pipe_resource *pt,
d258 2
a259 1
st_texture_release_all_sampler_views(struct st_texture_object *stObj);
@


