head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.1.1.0.26
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.24
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.22
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	v7_10_3:1.1.1.1
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.09.05.14.06.56;	author jsg;	state dead;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.39;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.39;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge Mesa 9.2.0
@
text
@
NOTE:

These files are incomplete.  They do not yet form a working
implementation of hte concepts discused below.


OVERVIEW

The t_dd_imm_* files form a set of templates to produce driver -
specific software tnl modules for a small subset of transformation and
lighting states.

The approach is quite different to the large vertex buffers of the
src/tnl module, and is based around a cache of four recent vertices
and a 'current' vertex which is updated directly from the Color,
Normal, Texcoord, SecondaryColor and Fog entrypoints.

The current vertex is actually a composite of the ctx->Current values
and a partial hardware vertex maintained where the hardware values
differ from those in ctx->Current.  For example, clamped color values
are kept in the hardware vertex, while texcoords remain in
ctx->Current.

A crude diagram:

       		+--------------+	+-------------------+
		| ctx->Current |	| Current-HW-vertex |
		+--------------+	+-------------------+
		       \       	       	       	  /
		       	\      			 /
			 \     			/
			  \    		       /
			   ---------   --------
			       	   |   |      
			       	   v   v     
	+--------+   +--------+  +--------+  +--------+ 
	| vert-0 |   | vert-1 |  | vert-2 |  | vert-3 |		       	 
	+--------+   +--------+  +--------+  +--------+		       	 
				     |
				     |
				     v
				     
				    DMA


Here values from ctx->Current and current-HW-vertex are merged to
build vert-2, which is then dumped to hardware (DMA).  A state machine
determines which vertex is built in turn, and how the vertices are
used to present primitives to hardware.  These actions all occur
during a call to Vertex{234}f{v}.

Each vert-n includes clip coordinates and a clipmask in addition to
the hardware (window) coordinates.  This information allows clipping
to take place directly on these vertices, if need be.

t_dd_imm_capi.h
	
	Color{34}{fub}{v}() implementations.  These update both
	ctx->Current (unclamped float colors) and current-HW-vertex
	with hardware-specific color values (typically unsigned
	bytes).

	When lighting is enabled, the functions from src/api_noop.c
	should be used, which just update ctx->Current.  (The
	current-hw-vertex colors are produced from lighting, which is
	keyed to Normal3f).

t_dd_imm_vb.c

	Support functions for clipping and fallback.  See
	t_dd_imm_primtmp.h.

t_dd_imm_napi.c
t_dd_imm_napi.h

	Versions of Normal3f{v} to perform lighting with one or more
	infinite lights.  Updates ctx->Current.Normal and the current
	HW colors.

	When lighting is disabled, use the functions from api_noop.c
	instead.


t_dd_imm_primtmp.h

	State machine to control emission of vertices and primitives
	to hardware.  Called indirectly from Vertex{234}f{v}.  Capable
	of supporting hardware strip and fan primitives, and of
	decomposing to discreet primitives for clipping or fallback,
	or where the native primitive is unavailable.

t_dd_imm_tapi.h

	Implementations of TexCoord{v} and MultiTexCoord4f{v}ARB to
	fire a callback when transitioning to projective texture.
	Most drivers will need to change vertex format at this point,
	some may need to enable a software rasterization fallback.

t_dd_imm_vapi.h

	Implementations of Vertex{234}f{v}.  These perform
	transformation and cliptesting on their arguments, then jump
	into the state machine implemented in primtmp.h.

t_dd_imm_vertex.h

	Support functions for building and clip-interpolating hardware
	vertices.  Called from primtmp.h.


Keith Whitwell, June 2001.@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@
