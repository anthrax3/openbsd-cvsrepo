head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.2.0.16
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.14
	OPENBSD_5_7_BASE:1.1.1.2
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.12
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.2.0.10
	OPENBSD_5_5_BASE:1.1.1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.8
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.6
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.4
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2006.11.25.18.51.37;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.37;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.49;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@#ifndef DO_DEBUG_VERTS
#define DO_DEBUG_VERTS 0
#endif 

#ifndef PRINT_VERTEX
#define PRINT_VERTEX(x) 
#endif

#if defined(USE_X86_ASM)
#define COPY_DWORDS( j, vb, vertsize, v )				\
do {									\
	int __tmp;							\
	__asm__ __volatile__( "rep ; movsl"				\
			      : "=%c" (j), "=D" (vb), "=S" (__tmp)	\
			      : "0" (vertsize),				\
			        "D" ((long)vb),				\
			        "S" ((long)v) );			\
} while (0)
#elif defined(HAVE_LE32_VERTS)
#define COPY_DWORDS( j, vb, vertsize, v )				\
do {									\
   for ( j = 0 ; j < vertsize ; j++ )					\
      vb[j] = CPU_TO_LE32(((GLuint *)v)[j]);				\
   vb += vertsize;							\
} while (0)
#else
#define COPY_DWORDS( j, vb, vertsize, v )				\
do {									\
   for ( j = 0 ; j < vertsize ; j++ )					\
      vb[j] = ((GLuint *)v)[j];						\
   vb += vertsize;							\
} while (0)
#endif



#if HAVE_QUADS
static __inline void TAG(quad)( CTX_ARG,
				VERTEX *v0,
				VERTEX *v1,
				VERTEX *v2,
				VERTEX *v3 )
{
   GLuint vertsize = GET_VERTEX_DWORDS();
   GLuint *vb = (GLuint *)ALLOC_VERTS( 4, vertsize);
   GLuint j;

   if (DO_DEBUG_VERTS) {
      fprintf(stderr, "%s\n", __FUNCTION__);
      PRINT_VERTEX(v0);
      PRINT_VERTEX(v1);
      PRINT_VERTEX(v2);
      PRINT_VERTEX(v3);
   }
      
   COPY_DWORDS( j, vb, vertsize, v0 );
   COPY_DWORDS( j, vb, vertsize, v1 );
   COPY_DWORDS( j, vb, vertsize, v2 );
   COPY_DWORDS( j, vb, vertsize, v3 );
}
#else
static __inline void TAG(quad)( CTX_ARG,
				VERTEX *v0,
				VERTEX *v1,
				VERTEX *v2,
				VERTEX *v3 )
{
   GLuint vertsize = GET_VERTEX_DWORDS();
   GLuint *vb = (GLuint *)ALLOC_VERTS(  6, vertsize);
   GLuint j;

   if (DO_DEBUG_VERTS) {
      fprintf(stderr, "%s\n", __FUNCTION__);
      PRINT_VERTEX(v0);
      PRINT_VERTEX(v1);
      PRINT_VERTEX(v2);
      PRINT_VERTEX(v3);
   }
 
   COPY_DWORDS( j, vb, vertsize, v0 );
   COPY_DWORDS( j, vb, vertsize, v1 );
   COPY_DWORDS( j, vb, vertsize, v3 );
   COPY_DWORDS( j, vb, vertsize, v1 );
   COPY_DWORDS( j, vb, vertsize, v2 );
   COPY_DWORDS( j, vb, vertsize, v3 );
}
#endif


static __inline void TAG(triangle)( CTX_ARG,
				    VERTEX *v0,
				    VERTEX *v1,
				    VERTEX *v2 )
{
   GLuint vertsize = GET_VERTEX_DWORDS();
   GLuint *vb = (GLuint *)ALLOC_VERTS( 3, vertsize);
   GLuint j;

   if (DO_DEBUG_VERTS) {
      fprintf(stderr, "%s\n", __FUNCTION__);
      PRINT_VERTEX(v0);
      PRINT_VERTEX(v1);
      PRINT_VERTEX(v2);
   }

   COPY_DWORDS( j, vb, vertsize, v0 );
   COPY_DWORDS( j, vb, vertsize, v1 );
   COPY_DWORDS( j, vb, vertsize, v2 );
}


#if HAVE_LINES
static __inline void TAG(line)( CTX_ARG,
				VERTEX *v0,
				VERTEX *v1 )
{
   GLuint vertsize = GET_VERTEX_DWORDS();
   GLuint *vb = (GLuint *)ALLOC_VERTS( 2, vertsize);
   GLuint j;

   COPY_DWORDS( j, vb, vertsize, v0 );
   COPY_DWORDS( j, vb, vertsize, v1 );
}
#endif

#if HAVE_POINTS
static __inline void TAG(point)( CTX_ARG,
				 VERTEX *v0 )
{
   GLuint vertsize = GET_VERTEX_DWORDS();
   GLuint *vb = (GLuint *)ALLOC_VERTS( 1, vertsize);
   int j;

   COPY_DWORDS( j, vb, vertsize, v0 );
}
#endif


static void TAG(fast_clipped_poly)( GLcontext *ctx, const GLuint *elts,
				    GLuint n )
{
   LOCAL_VARS
   GLuint vertsize = GET_VERTEX_DWORDS();
   GLuint *vb = (GLuint *)ALLOC_VERTS( (n-2) * 3, vertsize );
   const GLuint *start = (const GLuint *)VERT(elts[0]);
   GLuint i,j;

   if (DO_DEBUG_VERTS) {
      fprintf(stderr, "%s\n", __FUNCTION__);
      PRINT_VERTEX(VERT(elts[0]));
      PRINT_VERTEX(VERT(elts[1]));
   }

   for (i = 2 ; i < n ; i++) {
      if (DO_DEBUG_VERTS) {
	 PRINT_VERTEX(VERT(elts[i]));
      }

      COPY_DWORDS( j, vb, vertsize, VERT(elts[i-1]) );
      COPY_DWORDS( j, vb, vertsize, VERT(elts[i]) );
      COPY_DWORDS( j, vb, vertsize, start );
   }
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d139 1
a139 1
static void TAG(fast_clipped_poly)( struct gl_context *ctx, const GLuint *elts,
@

