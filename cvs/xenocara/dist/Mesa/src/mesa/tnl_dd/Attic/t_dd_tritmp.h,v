head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.6;
commitid	WPD6rgPryPkvXOr9;

1.6
date	2013.09.05.14.06.56;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.46;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.36;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.23;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.49;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.38;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.38;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.49;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.17.43;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.13;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2005  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keithw@@vmware.com>
 */


/* Template for building functions to plug into the driver interface
 * of t_vb_render.c:
 *     ctx->Driver.QuadFunc
 *     ctx->Driver.TriangleFunc
 *     ctx->Driver.LineFunc
 *     ctx->Driver.PointsFunc
 *
 * DO_TWOSIDE:   Plug back-color values from the VB into backfacing triangles,
 *               and restore vertices afterwards.
 * DO_OFFSET:    Calculate offset for triangles and adjust vertices.  Restore
 *               vertices after rendering.
 * DO_FLAT:      For hardware without native flatshading, copy provoking colors
 *               into the other vertices.  Restore after rendering.
 * DO_UNFILLED:  Decompose triangles to lines and points where appropriate.
 * DO_TWOSTENCIL:Gross hack for two-sided stencil.
 *
 * HAVE_SPEC: Vertices have secondary rgba values.
 *
 * VERT_X(v): Alias for vertex x value.
 * VERT_Y(v): Alias for vertex y value.
 * VERT_Z(v): Alias for vertex z value.
 * DEPTH_SCALE: Scale for constant offset.
 * REVERSE_DEPTH: Viewport depth range reversed.
 *
 * VERTEX: Hardware vertex type.
 * GET_VERTEX(n): Retreive vertex with index n.
 * AREA_IS_CCW(a): Return true if triangle with signed area a is ccw.
 *
 * VERT_SET_RGBA: Assign vertex rgba from VB color.
 * VERT_COPY_RGBA: Copy vertex rgba another vertex.
 * VERT_SAVE_RGBA: Save vertex rgba to a local variable.
 * VERT_RESTORE_RGBA: Restore vertex rgba from a local variable.
 *   --> Similar for SPEC.
 *
 * LOCAL_VARS(n): (At least) define local vars for save/restore rgba.
 *
 */

#if HAVE_BACK_COLORS
#define VERT_SET_RGBA( v, c )
#endif

#if !HAVE_SPEC
#define VERT_SET_SPEC( v, c ) (void) c
#define VERT_COPY_SPEC( v0, v1 )
#define VERT_SAVE_SPEC( idx )
#define VERT_RESTORE_SPEC( idx )
#if HAVE_BACK_COLORS
#define VERT_COPY_SPEC1( v )
#endif
#else
#if HAVE_BACK_COLORS
#define VERT_SET_SPEC( v, c )
#endif
#endif

#if !HAVE_BACK_COLORS
#define VERT_COPY_SPEC1( v )
#define VERT_COPY_RGBA1( v )
#endif

#ifndef INSANE_VERTICES
#define VERT_SET_Z(v,val) VERT_Z(v) = val
#define VERT_Z_ADD(v,val) VERT_Z(v) += val
#endif

#ifndef REVERSE_DEPTH
#define REVERSE_DEPTH 0
#endif

/* disable twostencil for un-aware drivers */
#ifndef HAVE_STENCIL_TWOSIDE
#define HAVE_STENCIL_TWOSIDE 0
#endif
#ifndef DO_TWOSTENCIL
#define DO_TWOSTENCIL 0
#endif
#ifndef SETUP_STENCIL
#define SETUP_STENCIL(f)
#endif
#ifndef UNSET_STENCIL
#define UNSET_STENCIL(f)
#endif

#if DO_TRI
static void TAG(triangle)( struct gl_context *ctx, GLuint e0, GLuint e1, GLuint e2 )
{
   struct vertex_buffer *VB = &TNL_CONTEXT( ctx )->vb;
   VERTEX *v[3];
   GLfloat offset = 0;
   GLfloat z[3] = { 0 };
   GLenum mode = GL_FILL;
   GLuint facing = 0;
   LOCAL_VARS(3);

/*     fprintf(stderr, "%s\n", __FUNCTION__); */

   v[0] = (VERTEX *)GET_VERTEX(e0);
   v[1] = (VERTEX *)GET_VERTEX(e1);
   v[2] = (VERTEX *)GET_VERTEX(e2);

   if (DO_TWOSIDE || DO_OFFSET || DO_UNFILLED || DO_TWOSTENCIL)
   {
      GLfloat ex = VERT_X(v[0]) - VERT_X(v[2]);
      GLfloat ey = VERT_Y(v[0]) - VERT_Y(v[2]);
      GLfloat fx = VERT_X(v[1]) - VERT_X(v[2]);
      GLfloat fy = VERT_Y(v[1]) - VERT_Y(v[2]);
      GLfloat cc = ex*fy - ey*fx;

      if (DO_TWOSIDE || DO_UNFILLED || DO_TWOSTENCIL)
      {
	 facing = AREA_IS_CCW( cc ) ^ ctx->Polygon._FrontBit;

	 if (DO_UNFILLED) {
	    if (facing) {
	       mode = ctx->Polygon.BackMode;
	       if (ctx->Polygon.CullFlag &&
		   ctx->Polygon.CullFaceMode != GL_FRONT) {
		  return;
	       }
	    } else {
	       mode = ctx->Polygon.FrontMode;
	       if (ctx->Polygon.CullFlag &&
		   ctx->Polygon.CullFaceMode != GL_BACK) {
		  return;
	       }
	    }
	 }

	 if (DO_TWOSIDE && facing == 1) {
	    if (HAVE_BACK_COLORS) {
	       if (!DO_FLAT) {
		  VERT_SAVE_RGBA( 0 );
		  VERT_SAVE_RGBA( 1 );
		  VERT_COPY_RGBA1( v[0] );
		  VERT_COPY_RGBA1( v[1] );
	       }
	       VERT_SAVE_RGBA( 2 );
	       VERT_COPY_RGBA1( v[2] );
	       if (HAVE_SPEC) {
		  if (!DO_FLAT) {
		     VERT_SAVE_SPEC( 0 );
		     VERT_SAVE_SPEC( 1 );
		     VERT_COPY_SPEC1( v[0] );
		     VERT_COPY_SPEC1( v[1] );
		  }
		  VERT_SAVE_SPEC( 2 );
		  VERT_COPY_SPEC1( v[2] );
	       }
	    }
	    else {
	       GLfloat (*vbcolor)[4] = VB->BackfaceColorPtr->data;
	       (void) vbcolor;

	       if (!DO_FLAT) {
		  VERT_SAVE_RGBA( 0 );
		  VERT_SAVE_RGBA( 1 );
	       }
	       VERT_SAVE_RGBA( 2 );

	       if (VB->BackfaceColorPtr->stride) {
		  ASSERT(VB->BackfaceColorPtr->stride == 4*sizeof(GLfloat));

		  if (!DO_FLAT) {
		     VERT_SET_RGBA( v[0], vbcolor[e0] );
		     VERT_SET_RGBA( v[1], vbcolor[e1] );
		  }
		  VERT_SET_RGBA( v[2], vbcolor[e2] );
	       }
	       else {
		  if (!DO_FLAT) {
		     VERT_SET_RGBA( v[0], vbcolor[0] );
		     VERT_SET_RGBA( v[1], vbcolor[0] );
		  }
		  VERT_SET_RGBA( v[2], vbcolor[0] );
	       }

	       if (HAVE_SPEC && VB->BackfaceSecondaryColorPtr) {
		  GLfloat (*vbspec)[4] = VB->BackfaceSecondaryColorPtr->data;
		  ASSERT(VB->BackfaceSecondaryColorPtr->stride == 4*sizeof(GLfloat));

		  if (!DO_FLAT) {
		     VERT_SAVE_SPEC( 0 );
		     VERT_SAVE_SPEC( 1 );
		     VERT_SET_SPEC( v[0], vbspec[e0] );
		     VERT_SET_SPEC( v[1], vbspec[e1] );
		  }
		  VERT_SAVE_SPEC( 2 );
		  VERT_SET_SPEC( v[2], vbspec[e2] );
	       }
	    }
	 }
      }


      if (DO_OFFSET)
      {
	 offset = ctx->Polygon.OffsetUnits * DEPTH_SCALE;
	 z[0] = VERT_Z(v[0]);
	 z[1] = VERT_Z(v[1]);
	 z[2] = VERT_Z(v[2]);
	 if (cc * cc > 1e-16) {
	    GLfloat ic	= 1.0 / cc;
	    GLfloat ez	= z[0] - z[2];
	    GLfloat fz	= z[1] - z[2];
	    GLfloat a	= ey*fz - ez*fy;
	    GLfloat b	= ez*fx - ex*fz;
	    GLfloat ac	= a * ic;
	    GLfloat bc	= b * ic;
	    if ( ac < 0.0f ) ac = -ac;
	    if ( bc < 0.0f ) bc = -bc;
	    offset += MAX2( ac, bc ) * ctx->Polygon.OffsetFactor / ctx->DrawBuffer->_MRD;
	 }
	 offset *= ctx->DrawBuffer->_MRD * (REVERSE_DEPTH ? -1.0 : 1.0);
      }
   }

   if (DO_FLAT) {
      VERT_SAVE_RGBA( 0 );
      VERT_SAVE_RGBA( 1 );
      VERT_COPY_RGBA( v[0], v[2] );
      VERT_COPY_RGBA( v[1], v[2] );
      if (HAVE_SPEC && VB->AttribPtr[_TNL_ATTRIB_COLOR1]) {
	 VERT_SAVE_SPEC( 0 );
	 VERT_SAVE_SPEC( 1 );
	 VERT_COPY_SPEC( v[0], v[2] );
	 VERT_COPY_SPEC( v[1], v[2] );
      }
   }

   if (mode == GL_POINT) {
      if (DO_OFFSET && ctx->Polygon.OffsetPoint) {
	 VERT_Z_ADD(v[0], offset);
	 VERT_Z_ADD(v[1], offset);
	 VERT_Z_ADD(v[2], offset);
      }
      if (DO_TWOSTENCIL && !HAVE_STENCIL_TWOSIDE && ctx->Stencil.TestTwoSide) {
         SETUP_STENCIL(facing);
         UNFILLED_TRI( ctx, GL_POINT, e0, e1, e2 );
         UNSET_STENCIL(facing);
      } else {
         UNFILLED_TRI( ctx, GL_POINT, e0, e1, e2 );
      }
   } else if (mode == GL_LINE) {
      if (DO_OFFSET && ctx->Polygon.OffsetLine) {
	 VERT_Z_ADD(v[0], offset);
	 VERT_Z_ADD(v[1], offset);
	 VERT_Z_ADD(v[2], offset);
      }
      if (DO_TWOSTENCIL && !HAVE_STENCIL_TWOSIDE && ctx->Stencil.TestTwoSide) {
         SETUP_STENCIL(facing);
         UNFILLED_TRI( ctx, GL_LINE, e0, e1, e2 );
         UNSET_STENCIL(facing);
      } else {
         UNFILLED_TRI( ctx, GL_LINE, e0, e1, e2 );
      }
   } else {
      if (DO_OFFSET && ctx->Polygon.OffsetFill) {
	 VERT_Z_ADD(v[0], offset);
	 VERT_Z_ADD(v[1], offset);
	 VERT_Z_ADD(v[2], offset);
      }
      if (DO_UNFILLED) {
	 RASTERIZE( GL_TRIANGLES );
      }
      if (DO_TWOSTENCIL && !HAVE_STENCIL_TWOSIDE && ctx->Stencil.TestTwoSide) {
         SETUP_STENCIL(facing);
         TRI( v[0], v[1], v[2] );
         UNSET_STENCIL(facing);
      } else {
         TRI( v[0], v[1], v[2] );
      }
   }

   if (DO_OFFSET)
   {
      VERT_SET_Z(v[0], z[0]);
      VERT_SET_Z(v[1], z[1]);
      VERT_SET_Z(v[2], z[2]);
   }

   if (DO_TWOSIDE && facing == 1) {
      if (!DO_FLAT) {
	 VERT_RESTORE_RGBA( 0 );
	 VERT_RESTORE_RGBA( 1 );
      }
      VERT_RESTORE_RGBA( 2 );
      if (HAVE_SPEC) {
	 if (!DO_FLAT) {
	    VERT_RESTORE_SPEC( 0 );
	    VERT_RESTORE_SPEC( 1 );
	 }
	 VERT_RESTORE_SPEC( 2 );
      }
   }


   if (DO_FLAT) {
	 VERT_RESTORE_RGBA( 0 );
	 VERT_RESTORE_RGBA( 1 );
	 if (HAVE_SPEC && VB->AttribPtr[_TNL_ATTRIB_COLOR1]) {
	    VERT_RESTORE_SPEC( 0 );
	    VERT_RESTORE_SPEC( 1 );
	 }
   }
}
#endif

#if DO_QUAD
#if DO_FULL_QUAD
static void TAG(quadr)( struct gl_context *ctx,
		       GLuint e0, GLuint e1, GLuint e2, GLuint e3 )
{
   struct vertex_buffer *VB = &TNL_CONTEXT( ctx )->vb;
   VERTEX *v[4];
   GLfloat offset = 0;
   GLfloat z[4] = { 0 };
   GLenum mode = GL_FILL;
   GLuint facing = 0;
   LOCAL_VARS(4);

   v[0] = (VERTEX *)GET_VERTEX(e0);
   v[1] = (VERTEX *)GET_VERTEX(e1);
   v[2] = (VERTEX *)GET_VERTEX(e2);
   v[3] = (VERTEX *)GET_VERTEX(e3);

   if (DO_TWOSIDE || DO_OFFSET || DO_UNFILLED || DO_TWOSTENCIL)
   {
      GLfloat ex = VERT_X(v[2]) - VERT_X(v[0]);
      GLfloat ey = VERT_Y(v[2]) - VERT_Y(v[0]);
      GLfloat fx = VERT_X(v[3]) - VERT_X(v[1]);
      GLfloat fy = VERT_Y(v[3]) - VERT_Y(v[1]);
      GLfloat cc = ex*fy - ey*fx;

      if (DO_TWOSIDE || DO_UNFILLED || DO_TWOSTENCIL)
      {
	 facing = AREA_IS_CCW( cc ) ^ ctx->Polygon._FrontBit;

	 if (DO_UNFILLED) {
	    if (facing) {
	       mode = ctx->Polygon.BackMode;
	       if (ctx->Polygon.CullFlag &&
		   ctx->Polygon.CullFaceMode != GL_FRONT) {
		  return;
	       }
	    } else {
	       mode = ctx->Polygon.FrontMode;
	       if (ctx->Polygon.CullFlag &&
		   ctx->Polygon.CullFaceMode != GL_BACK) {
		  return;
	       }
	    }
	 }

	 if (DO_TWOSIDE && facing == 1) {
	    GLfloat (*vbcolor)[4] = VB->BackfaceColorPtr->data;
	    (void)vbcolor;

	    if (HAVE_BACK_COLORS) {
	       if (!DO_FLAT) {
		  VERT_SAVE_RGBA( 0 );
		  VERT_SAVE_RGBA( 1 );
		  VERT_SAVE_RGBA( 2 );
		  VERT_COPY_RGBA1( v[0] );
		  VERT_COPY_RGBA1( v[1] );
		  VERT_COPY_RGBA1( v[2] );
	       }
	       VERT_SAVE_RGBA( 3 );
	       VERT_COPY_RGBA1( v[3] );
	       if (HAVE_SPEC) {
		  if (!DO_FLAT) {
		     VERT_SAVE_SPEC( 0 );
		     VERT_SAVE_SPEC( 1 );
		     VERT_SAVE_SPEC( 2 );
		     VERT_COPY_SPEC1( v[0] );
		     VERT_COPY_SPEC1( v[1] );
		     VERT_COPY_SPEC1( v[2] );
		  }
		  VERT_SAVE_SPEC( 3 );
		  VERT_COPY_SPEC1( v[3] );
	       }
	    }
	    else {
	       if (!DO_FLAT) {
		  VERT_SAVE_RGBA( 0 );
		  VERT_SAVE_RGBA( 1 );
		  VERT_SAVE_RGBA( 2 );
	       }
	       VERT_SAVE_RGBA( 3 );

	       if (VB->BackfaceColorPtr->stride) {
		  if (!DO_FLAT) {
		     VERT_SET_RGBA( v[0], vbcolor[e0] );
		     VERT_SET_RGBA( v[1], vbcolor[e1] );
		     VERT_SET_RGBA( v[2], vbcolor[e2] );
		  }
		  VERT_SET_RGBA( v[3], vbcolor[e3] );
	       }
	       else {
		  if (!DO_FLAT) {
		     VERT_SET_RGBA( v[0], vbcolor[0] );
		     VERT_SET_RGBA( v[1], vbcolor[0] );
		     VERT_SET_RGBA( v[2], vbcolor[0] );
		  }
		  VERT_SET_RGBA( v[3], vbcolor[0] );
	       }

	       if (HAVE_SPEC && VB->BackfaceSecondaryColorPtr) {
		  GLfloat (*vbspec)[4] = VB->BackfaceSecondaryColorPtr->data;
		  ASSERT(VB->BackfaceSecondaryColorPtr->stride==4*sizeof(GLfloat));

		  if (!DO_FLAT) {
		     VERT_SAVE_SPEC( 0 );
		     VERT_SAVE_SPEC( 1 );
		     VERT_SAVE_SPEC( 2 );
		     VERT_SET_SPEC( v[0], vbspec[e0] );
		     VERT_SET_SPEC( v[1], vbspec[e1] );
		     VERT_SET_SPEC( v[2], vbspec[e2] );
		  }
		  VERT_SAVE_SPEC( 3 );
		  VERT_SET_SPEC( v[3], vbspec[e3] );
	       }
	    }
	 }
      }


      if (DO_OFFSET)
      {
	 offset = ctx->Polygon.OffsetUnits * DEPTH_SCALE;
	 z[0] = VERT_Z(v[0]);
	 z[1] = VERT_Z(v[1]);
	 z[2] = VERT_Z(v[2]);
	 z[3] = VERT_Z(v[3]);
	 if (cc * cc > 1e-16) {
	    GLfloat ez = z[2] - z[0];
	    GLfloat fz = z[3] - z[1];
	    GLfloat a	= ey*fz - ez*fy;
	    GLfloat b	= ez*fx - ex*fz;
	    GLfloat ic	= 1.0 / cc;
	    GLfloat ac	= a * ic;
	    GLfloat bc	= b * ic;
	    if ( ac < 0.0f ) ac = -ac;
	    if ( bc < 0.0f ) bc = -bc;
	    offset += MAX2( ac, bc ) * ctx->Polygon.OffsetFactor / ctx->DrawBuffer->_MRD;
	 }
	 offset *= ctx->DrawBuffer->_MRD * (REVERSE_DEPTH ? -1.0 : 1.0);
      }
   }

   if (DO_FLAT) {
	 VERT_SAVE_RGBA( 0 );
	 VERT_SAVE_RGBA( 1 );
	 VERT_SAVE_RGBA( 2 );
	 VERT_COPY_RGBA( v[0], v[3] );
	 VERT_COPY_RGBA( v[1], v[3] );
	 VERT_COPY_RGBA( v[2], v[3] );
	 if (HAVE_SPEC && VB->AttribPtr[_TNL_ATTRIB_COLOR1]) {
	    VERT_SAVE_SPEC( 0 );
	    VERT_SAVE_SPEC( 1 );
	    VERT_SAVE_SPEC( 2 );
	    VERT_COPY_SPEC( v[0], v[3] );
	    VERT_COPY_SPEC( v[1], v[3] );
	    VERT_COPY_SPEC( v[2], v[3] );
	 }
   }

   if (mode == GL_POINT) {
      if (( DO_OFFSET) && ctx->Polygon.OffsetPoint) {
	 VERT_Z_ADD(v[0], offset);
	 VERT_Z_ADD(v[1], offset);
	 VERT_Z_ADD(v[2], offset);
	 VERT_Z_ADD(v[3], offset);
      }
      if (DO_TWOSTENCIL && !HAVE_STENCIL_TWOSIDE && ctx->Stencil.TestTwoSide) {
         SETUP_STENCIL(facing);
         UNFILLED_QUAD( ctx, GL_POINT, e0, e1, e2, e3 );
         UNSET_STENCIL(facing);
      } else {
         UNFILLED_QUAD( ctx, GL_POINT, e0, e1, e2, e3 );
      }
   } else if (mode == GL_LINE) {
      if (DO_OFFSET && ctx->Polygon.OffsetLine) {
	 VERT_Z_ADD(v[0], offset);
	 VERT_Z_ADD(v[1], offset);
	 VERT_Z_ADD(v[2], offset);
	 VERT_Z_ADD(v[3], offset);
      }
      if (DO_TWOSTENCIL && !HAVE_STENCIL_TWOSIDE && ctx->Stencil.TestTwoSide) {
         SETUP_STENCIL(facing);
         UNFILLED_QUAD( ctx, GL_LINE, e0, e1, e2, e3 );
         UNSET_STENCIL(facing);
      } else {
         UNFILLED_QUAD( ctx, GL_LINE, e0, e1, e2, e3 );
      }
   } else {
      if (DO_OFFSET && ctx->Polygon.OffsetFill) {
	 VERT_Z_ADD(v[0], offset);
	 VERT_Z_ADD(v[1], offset);
	 VERT_Z_ADD(v[2], offset);
	 VERT_Z_ADD(v[3], offset);
      }
      RASTERIZE( GL_QUADS );
      if (DO_TWOSTENCIL && !HAVE_STENCIL_TWOSIDE && ctx->Stencil.TestTwoSide) {
         SETUP_STENCIL(facing);
         QUAD( (v[0]), (v[1]), (v[2]), (v[3]) );
         UNSET_STENCIL(facing);
      } else {
         QUAD( (v[0]), (v[1]), (v[2]), (v[3]) );
      }
   }

   if (DO_OFFSET)
   {
      VERT_SET_Z(v[0], z[0]);
      VERT_SET_Z(v[1], z[1]);
      VERT_SET_Z(v[2], z[2]);
      VERT_SET_Z(v[3], z[3]);
   }

   if (DO_TWOSIDE && facing == 1) {
      if (!DO_FLAT) {
	 VERT_RESTORE_RGBA( 0 );
	 VERT_RESTORE_RGBA( 1 );
	 VERT_RESTORE_RGBA( 2 );
      }
      VERT_RESTORE_RGBA( 3 );
      if (HAVE_SPEC) {
	 if (!DO_FLAT) {
	    VERT_RESTORE_SPEC( 0 );
	    VERT_RESTORE_SPEC( 1 );
	    VERT_RESTORE_SPEC( 2 );
	 }
	 VERT_RESTORE_SPEC( 3 );
      }
   }


   if (DO_FLAT) {
	 VERT_RESTORE_RGBA( 0 );
	 VERT_RESTORE_RGBA( 1 );
	 VERT_RESTORE_RGBA( 2 );
	 if (HAVE_SPEC && VB->AttribPtr[_TNL_ATTRIB_COLOR1]) {
	    VERT_RESTORE_SPEC( 0 );
	    VERT_RESTORE_SPEC( 1 );
	    VERT_RESTORE_SPEC( 2 );
	 }
   }
}
#else
static void TAG(quadr)( struct gl_context *ctx, GLuint e0,
		       GLuint e1, GLuint e2, GLuint e3 )
{
   if (DO_UNFILLED) {
      struct vertex_buffer *VB = &TNL_CONTEXT(ctx)->vb;
      GLubyte ef1 = VB->EdgeFlag[e1];
      GLubyte ef3 = VB->EdgeFlag[e3];
      VB->EdgeFlag[e1] = 0;
      TAG(triangle)( ctx, e0, e1, e3 );
      VB->EdgeFlag[e1] = ef1;
      VB->EdgeFlag[e3] = 0;
      TAG(triangle)( ctx, e1, e2, e3 );
      VB->EdgeFlag[e3] = ef3;
   } else {
      TAG(triangle)( ctx, e0, e1, e3 );
      TAG(triangle)( ctx, e1, e2, e3 );
   }
}
#endif
#endif

#if DO_LINE
static void TAG(line)( struct gl_context *ctx, GLuint e0, GLuint e1 )
{
   struct vertex_buffer *VB = &TNL_CONTEXT(ctx)->vb;
   VERTEX *v[2];
   LOCAL_VARS(2);

   v[0] = (VERTEX *)GET_VERTEX(e0);
   v[1] = (VERTEX *)GET_VERTEX(e1);

   if (DO_FLAT) {
	 VERT_SAVE_RGBA( 0 );
	 VERT_COPY_RGBA( v[0], v[1] );
	 if (HAVE_SPEC && VB->AttribPtr[_TNL_ATTRIB_COLOR1]) {
	    VERT_SAVE_SPEC( 0 );
	    VERT_COPY_SPEC( v[0], v[1] );
	 }
   }

   LINE( v[0], v[1] );

   if (DO_FLAT) {
	 VERT_RESTORE_RGBA( 0 );

	 if (HAVE_SPEC && VB->AttribPtr[_TNL_ATTRIB_COLOR1]) {
	    VERT_RESTORE_SPEC( 0 );
	 }
   }
}
#endif

#if DO_POINTS
static void TAG(points)( struct gl_context *ctx, GLuint first, GLuint last )
{
   struct vertex_buffer *VB = &TNL_CONTEXT( ctx )->vb;
   GLuint i;
   LOCAL_VARS(1);

   if (VB->Elts == 0) {
      for ( i = first ; i < last ; i++ ) {
	 if ( VB->ClipMask[i] == 0 ) {
	    VERTEX *v = (VERTEX *)GET_VERTEX(i);
	    POINT( v );
	 }
      }
   } else {
      for ( i = first ; i < last ; i++ ) {
	 GLuint e = VB->Elts[i];
	 if ( VB->ClipMask[e] == 0 ) {
	    VERTEX *v = (VERTEX *)GET_VERTEX(e);
	    POINT( v );
	 }
      }
   }
}
#endif

static void TAG(init)( void )
{
#if DO_QUAD
   TAB[IND].quad = TAG(quadr);
#endif
#if DO_TRI
   TAB[IND].triangle = TAG(triangle);
#endif
#if DO_LINE
   TAB[IND].line = TAG(line);
#endif
#if DO_POINTS
   TAB[IND].points = TAG(points);
#endif
}

#undef IND
#undef TAG

#if HAVE_BACK_COLORS
#undef VERT_SET_RGBA
#endif

#if !HAVE_SPEC
#undef VERT_SET_SPEC
#undef VERT_COPY_SPEC
#undef VERT_SAVE_SPEC
#undef VERT_RESTORE_SPEC
#if HAVE_BACK_COLORS
#undef VERT_COPY_SPEC1
#endif
#else
#if HAVE_BACK_COLORS
#undef VERT_SET_SPEC
#endif
#endif

#if !HAVE_BACK_COLORS
#undef VERT_COPY_SPEC1
#undef VERT_COPY_RGBA1
#endif

#ifndef INSANE_VERTICES
#undef VERT_SET_Z
#undef VERT_Z_ADD
#endif
@


1.7
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.6
log
@Merge Mesa 9.2.0
@
text
@d25 1
a25 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
@


1.5
log
@Merge Mesa 7.10.3
@
text
@a2 1
 * Version:  6.3
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d291 1
a291 1
      if (DO_UNFILLED)
d293 1
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d114 1
a114 1
static void TAG(triangle)( GLcontext *ctx, GLuint e0, GLuint e1, GLuint e2 )
d338 1
a338 1
static void TAG(quadr)( GLcontext *ctx,
d578 1
a578 1
static void TAG(quadr)( GLcontext *ctx, GLuint e0,
d600 1
a600 1
static void TAG(line)( GLcontext *ctx, GLuint e0, GLuint e1 )
d631 1
a631 1
static void TAG(points)( GLcontext *ctx, GLuint first, GLuint last )
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a44 1
 * HAVE_RGBA: Vertices have rgba values (otherwise index values).
d61 1
a61 1
 *   --> Similar for IND and SPEC.
a66 5
#if HAVE_RGBA
#define VERT_SET_IND( v, c ) (void) c
#define VERT_COPY_IND( v0, v1 )
#define VERT_SAVE_IND( idx )
#define VERT_RESTORE_IND( idx )
a69 9
#else
#define VERT_SET_RGBA( v, c ) (void) c
#define VERT_COPY_RGBA( v0, v1 )
#define VERT_SAVE_RGBA( idx )
#define VERT_RESTORE_RGBA( idx )
#if HAVE_BACK_COLORS
#define VERT_SET_IND( v, c )
#endif
#endif
a86 1
#define VERT_COPY_IND1( v )
d119 1
a119 1
   GLfloat z[3];
d158 11
a168 4
	 if (DO_TWOSIDE && facing == 1)
	 {
	    if (HAVE_RGBA) {
	       if (HAVE_BACK_COLORS) {
d170 4
a173 4
		     VERT_SAVE_RGBA( 0 );
		     VERT_SAVE_RGBA( 1 );
		     VERT_COPY_RGBA1( v[0] );
		     VERT_COPY_RGBA1( v[1] );
d175 20
a194 11
		  VERT_SAVE_RGBA( 2 );
		  VERT_COPY_RGBA1( v[2] );
		  if (HAVE_SPEC) {
		     if (!DO_FLAT) {
			VERT_SAVE_SPEC( 0 );
			VERT_SAVE_SPEC( 1 );
			VERT_COPY_SPEC1( v[0] );
			VERT_COPY_SPEC1( v[1] );
		     }
		     VERT_SAVE_SPEC( 2 );
		     VERT_COPY_SPEC1( v[2] );
d196 1
a198 3
		  GLfloat (*vbcolor)[4] = VB->ColorPtr[1]->data;
		  (void) vbcolor;

d200 2
a201 2
		     VERT_SAVE_RGBA( 0 );
		     VERT_SAVE_RGBA( 1 );
d203 2
a204 1
		  VERT_SAVE_RGBA( 2 );
d206 3
a208 2
		  if (VB->ColorPtr[1]->stride) {
		     ASSERT(VB->ColorPtr[1]->stride == 4*sizeof(GLfloat));
d210 5
a214 5
		     if (!DO_FLAT) {		  
			VERT_SET_RGBA( v[0], vbcolor[e0] );
			VERT_SET_RGBA( v[1], vbcolor[e1] );
		     }
		     VERT_SET_RGBA( v[2], vbcolor[e2] );
d216 2
a217 30
		  else {
		     if (!DO_FLAT) {		  
			VERT_SET_RGBA( v[0], vbcolor[0] );
			VERT_SET_RGBA( v[1], vbcolor[0] );
		     }
		     VERT_SET_RGBA( v[2], vbcolor[0] );
		  }

		  if (HAVE_SPEC && VB->SecondaryColorPtr[1]) {
		     GLfloat (*vbspec)[4] = VB->SecondaryColorPtr[1]->data;
		     ASSERT(VB->SecondaryColorPtr[1]->stride == 4*sizeof(GLfloat));

		     if (!DO_FLAT) {
			VERT_SAVE_SPEC( 0 );
			VERT_SAVE_SPEC( 1 );
			VERT_SET_SPEC( v[0], vbspec[e0] );
			VERT_SET_SPEC( v[1], vbspec[e1] );
		     }
		     VERT_SAVE_SPEC( 2 );
		     VERT_SET_SPEC( v[2], vbspec[e2] );
		  }
	       }
	    }
	    else {
	       GLfloat (*vbindex) = (GLfloat *)VB->IndexPtr[1]->data;
	       if (!DO_FLAT) {
		  VERT_SAVE_IND( 0 );
		  VERT_SAVE_IND( 1 );
		  VERT_SET_IND( v[0], vbindex[e0] );
		  VERT_SET_IND( v[1], vbindex[e1] );
a218 2
	       VERT_SAVE_IND( 2 );
	       VERT_SET_IND( v[2], vbindex[e2] );
d247 9
a255 17
      if (HAVE_RGBA) {
	 VERT_SAVE_RGBA( 0 );
	 VERT_SAVE_RGBA( 1 );
	 VERT_COPY_RGBA( v[0], v[2] );
	 VERT_COPY_RGBA( v[1], v[2] );
	 if (HAVE_SPEC && VB->SecondaryColorPtr[0]) {
	    VERT_SAVE_SPEC( 0 );
	    VERT_SAVE_SPEC( 1 );
	    VERT_COPY_SPEC( v[0], v[2] );
	    VERT_COPY_SPEC( v[1], v[2] );
	 }
      }
      else {
	 VERT_SAVE_IND( 0 );
	 VERT_SAVE_IND( 1 );
	 VERT_COPY_IND( v[0], v[2] );
	 VERT_COPY_IND( v[1], v[2] );
d309 4
a312 15
   if (DO_TWOSIDE && facing == 1)
   {
      if (HAVE_RGBA) {
	 if (!DO_FLAT) {
	    VERT_RESTORE_RGBA( 0 );
	    VERT_RESTORE_RGBA( 1 );
	 }
	 VERT_RESTORE_RGBA( 2 );
	 if (HAVE_SPEC) {
	    if (!DO_FLAT) {
	       VERT_RESTORE_SPEC( 0 );
	       VERT_RESTORE_SPEC( 1 );
	    }
	    VERT_RESTORE_SPEC( 2 );
	 }
d314 2
a315 1
      else {
d317 2
a318 2
	    VERT_RESTORE_IND( 0 );
	    VERT_RESTORE_IND( 1 );
d320 1
a320 1
	 VERT_RESTORE_IND( 2 );
a325 1
      if (HAVE_RGBA) {
d328 1
a328 1
	 if (HAVE_SPEC && VB->SecondaryColorPtr[0]) {
a331 5
      }
      else {
	 VERT_RESTORE_IND( 0 );
	 VERT_RESTORE_IND( 1 );
      }
d344 1
a344 1
   GLfloat z[4];
d382 23
a404 14
	 if (DO_TWOSIDE && facing == 1)
	 {
	    if (HAVE_RGBA) {
	       GLfloat (*vbcolor)[4] = VB->ColorPtr[1]->data;
	       (void)vbcolor;

	       if (HAVE_BACK_COLORS) {
                  if (!DO_FLAT) {
                     VERT_SAVE_RGBA( 0 );
                     VERT_SAVE_RGBA( 1 );
                     VERT_SAVE_RGBA( 2 );
		     VERT_COPY_RGBA1( v[0] );
		     VERT_COPY_RGBA1( v[1] );
		     VERT_COPY_RGBA1( v[2] );
d406 17
a422 13
		  VERT_SAVE_RGBA( 3 );
		  VERT_COPY_RGBA1( v[3] );
		  if (HAVE_SPEC) {
                     if (!DO_FLAT) {
                        VERT_SAVE_SPEC( 0 );
                        VERT_SAVE_SPEC( 1 );
                        VERT_SAVE_SPEC( 2 );
			VERT_COPY_SPEC1( v[0] );
			VERT_COPY_SPEC1( v[1] );
			VERT_COPY_SPEC1( v[2] );
		     }
		     VERT_SAVE_SPEC( 3 );
		     VERT_COPY_SPEC1( v[3] );
d424 1
d427 4
a430 4
	          if (!DO_FLAT) {
		     VERT_SAVE_RGBA( 0 );
		     VERT_SAVE_RGBA( 1 );
		     VERT_SAVE_RGBA( 2 );
d432 6
a437 1
	          VERT_SAVE_RGBA( 3 );
d439 7
a445 7
		  if (VB->ColorPtr[1]->stride) {
		     if (!DO_FLAT) {
			VERT_SET_RGBA( v[0], vbcolor[e0] );
			VERT_SET_RGBA( v[1], vbcolor[e1] );
			VERT_SET_RGBA( v[2], vbcolor[e2] );
		     }
		     VERT_SET_RGBA( v[3], vbcolor[e3] );
d447 2
a448 24
		  else {
		     if (!DO_FLAT) {
			VERT_SET_RGBA( v[0], vbcolor[0] );
			VERT_SET_RGBA( v[1], vbcolor[0] );
			VERT_SET_RGBA( v[2], vbcolor[0] );
		     }
		     VERT_SET_RGBA( v[3], vbcolor[0] );
		  }

	          if (HAVE_SPEC && VB->SecondaryColorPtr[1]) {
		     GLfloat (*vbspec)[4] = VB->SecondaryColorPtr[1]->data;
		     ASSERT(VB->SecondaryColorPtr[1]->stride==4*sizeof(GLfloat));

		     if (!DO_FLAT) {
		        VERT_SAVE_SPEC( 0 );
		        VERT_SAVE_SPEC( 1 );
		        VERT_SAVE_SPEC( 2 );
		        VERT_SET_SPEC( v[0], vbspec[e0] );
		        VERT_SET_SPEC( v[1], vbspec[e1] );
		        VERT_SET_SPEC( v[2], vbspec[e2] );
		     }
		     VERT_SAVE_SPEC( 3 );
		     VERT_SET_SPEC( v[3], vbspec[e3] );
	          }
a450 13
	    else {
	       GLfloat *vbindex = (GLfloat *)VB->IndexPtr[1]->data;
	       if (!DO_FLAT) {
		  VERT_SAVE_IND( 0 );
		  VERT_SAVE_IND( 1 );
		  VERT_SAVE_IND( 2 );
		  VERT_SET_IND( v[0], vbindex[e0] );
		  VERT_SET_IND( v[1], vbindex[e1] );
		  VERT_SET_IND( v[2], vbindex[e2] );
	       }
	       VERT_SAVE_IND( 3 );
	       VERT_SET_IND( v[3], vbindex[e3] );
	    }
a478 1
      if (HAVE_RGBA) {
d485 1
a485 1
	 if (HAVE_SPEC && VB->SecondaryColorPtr[0]) {
a492 9
      }
      else {
	 VERT_SAVE_IND( 0 );
	 VERT_SAVE_IND( 1 );
	 VERT_SAVE_IND( 2 );
	 VERT_COPY_IND( v[0], v[3] );
	 VERT_COPY_IND( v[1], v[3] );
	 VERT_COPY_IND( v[2], v[3] );
      }
d548 5
a552 17
   if (DO_TWOSIDE && facing == 1)
   {
      if (HAVE_RGBA) {
	 if (!DO_FLAT) {
	    VERT_RESTORE_RGBA( 0 );
	    VERT_RESTORE_RGBA( 1 );
	    VERT_RESTORE_RGBA( 2 );
	 }
	 VERT_RESTORE_RGBA( 3 );
	 if (HAVE_SPEC) {
	    if (!DO_FLAT) {
	       VERT_RESTORE_SPEC( 0 );
	       VERT_RESTORE_SPEC( 1 );
	       VERT_RESTORE_SPEC( 2 );
	    }
	    VERT_RESTORE_SPEC( 3 );
	 }
d554 2
a555 1
      else {
d557 3
a559 3
	    VERT_RESTORE_IND( 0 );
	    VERT_RESTORE_IND( 1 );
	    VERT_RESTORE_IND( 2 );
d561 1
a561 1
	 VERT_RESTORE_IND( 3 );
a566 1
      if (HAVE_RGBA) {
d570 1
a570 1
	 if (HAVE_SPEC && VB->SecondaryColorPtr[0]) {
a574 6
      }
      else {
	 VERT_RESTORE_IND( 0 );
	 VERT_RESTORE_IND( 1 );
	 VERT_RESTORE_IND( 2 );
      }
a609 1
      if (HAVE_RGBA) {
d612 1
a612 1
	 if (HAVE_SPEC && VB->SecondaryColorPtr[0]) {
a615 5
      }
      else {
	 VERT_SAVE_IND( 0 );
	 VERT_COPY_IND( v[0], v[1] );
      }
a620 1
      if (HAVE_RGBA) {
d623 1
a623 1
	 if (HAVE_SPEC && VB->SecondaryColorPtr[0]) {
a625 4
      }
      else {
	 VERT_RESTORE_IND( 0 );
      }
a674 5
#if HAVE_RGBA
#undef VERT_SET_IND
#undef VERT_COPY_IND
#undef VERT_SAVE_IND
#undef VERT_RESTORE_IND
a677 9
#else
#undef VERT_SET_RGBA
#undef VERT_COPY_RGBA
#undef VERT_SAVE_RGBA
#undef VERT_RESTORE_RGBA
#if HAVE_BACK_COLORS
#undef VERT_SET_IND
#endif
#endif
a694 1
#undef VERT_COPY_IND1
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d270 1
a270 1
	    offset += MAX2( ac, bc ) * ctx->Polygon.OffsetFactor;
d392 1
a392 1
static void TAG(quad)( GLcontext *ctx,
d542 1
a542 1
	    offset += MAX2( ac, bc ) * ctx->Polygon.OffsetFactor;
d676 1
a676 1
static void TAG(quad)( GLcontext *ctx, GLuint e0,
d768 1
a768 1
   TAB[IND].quad = TAG(quad);
@


1.1
log
@Initial revision
@
text
@a157 4
         if (DO_TWOSTENCIL && ctx->Stencil.TestTwoSide) {
            ctx->_Facing = facing; /* mixed mode rendering: for 2-sided stencil test */
         }

a418 4

         if (DO_TWOSTENCIL && ctx->Stencil.TestTwoSide) {
            ctx->_Facing = facing; /* mixed mode rendering: for 2-sided stencil test */
         }
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d45 1
d62 1
a62 1
 *   --> Similar for SPEC.
d68 5
d76 9
d102 1
d130 1
a130 1
static void TAG(triangle)( struct gl_context *ctx, GLuint e0, GLuint e1, GLuint e2 )
d135 1
a135 1
   GLfloat z[3] = { 0 };
d158 4
d178 4
a181 11
	 if (DO_TWOSIDE && facing == 1) {
	    if (HAVE_BACK_COLORS) {
	       if (!DO_FLAT) {
		  VERT_SAVE_RGBA( 0 );
		  VERT_SAVE_RGBA( 1 );
		  VERT_COPY_RGBA1( v[0] );
		  VERT_COPY_RGBA1( v[1] );
	       }
	       VERT_SAVE_RGBA( 2 );
	       VERT_COPY_RGBA1( v[2] );
	       if (HAVE_SPEC) {
d183 16
a198 4
		     VERT_SAVE_SPEC( 0 );
		     VERT_SAVE_SPEC( 1 );
		     VERT_COPY_SPEC1( v[0] );
		     VERT_COPY_SPEC1( v[1] );
a199 2
		  VERT_SAVE_SPEC( 2 );
		  VERT_COPY_SPEC1( v[2] );
d201 3
a203 4
	    }
	    else {
	       GLfloat (*vbcolor)[4] = VB->BackfaceColorPtr->data;
	       (void) vbcolor;
d205 5
a209 5
	       if (!DO_FLAT) {
		  VERT_SAVE_RGBA( 0 );
		  VERT_SAVE_RGBA( 1 );
	       }
	       VERT_SAVE_RGBA( 2 );
d211 2
a212 2
	       if (VB->BackfaceColorPtr->stride) {
		  ASSERT(VB->BackfaceColorPtr->stride == 4*sizeof(GLfloat));
d214 5
a218 3
		  if (!DO_FLAT) {
		     VERT_SET_RGBA( v[0], vbcolor[e0] );
		     VERT_SET_RGBA( v[1], vbcolor[e1] );
d220 6
a225 6
		  VERT_SET_RGBA( v[2], vbcolor[e2] );
	       }
	       else {
		  if (!DO_FLAT) {
		     VERT_SET_RGBA( v[0], vbcolor[0] );
		     VERT_SET_RGBA( v[1], vbcolor[0] );
a226 2
		  VERT_SET_RGBA( v[2], vbcolor[0] );
	       }
d228 12
a239 9
	       if (HAVE_SPEC && VB->BackfaceSecondaryColorPtr) {
		  GLfloat (*vbspec)[4] = VB->BackfaceSecondaryColorPtr->data;
		  ASSERT(VB->BackfaceSecondaryColorPtr->stride == 4*sizeof(GLfloat));

		  if (!DO_FLAT) {
		     VERT_SAVE_SPEC( 0 );
		     VERT_SAVE_SPEC( 1 );
		     VERT_SET_SPEC( v[0], vbspec[e0] );
		     VERT_SET_SPEC( v[1], vbspec[e1] );
a240 2
		  VERT_SAVE_SPEC( 2 );
		  VERT_SET_SPEC( v[2], vbspec[e2] );
d243 11
d274 1
a274 1
	    offset += MAX2( ac, bc ) * ctx->Polygon.OffsetFactor / ctx->DrawBuffer->_MRD;
d281 17
a297 9
      VERT_SAVE_RGBA( 0 );
      VERT_SAVE_RGBA( 1 );
      VERT_COPY_RGBA( v[0], v[2] );
      VERT_COPY_RGBA( v[1], v[2] );
      if (HAVE_SPEC && VB->AttribPtr[_TNL_ATTRIB_COLOR1]) {
	 VERT_SAVE_SPEC( 0 );
	 VERT_SAVE_SPEC( 1 );
	 VERT_COPY_SPEC( v[0], v[2] );
	 VERT_COPY_SPEC( v[1], v[2] );
d351 15
a365 4
   if (DO_TWOSIDE && facing == 1) {
      if (!DO_FLAT) {
	 VERT_RESTORE_RGBA( 0 );
	 VERT_RESTORE_RGBA( 1 );
d367 1
a367 2
      VERT_RESTORE_RGBA( 2 );
      if (HAVE_SPEC) {
d369 2
a370 2
	    VERT_RESTORE_SPEC( 0 );
	    VERT_RESTORE_SPEC( 1 );
d372 1
a372 1
	 VERT_RESTORE_SPEC( 2 );
d378 1
d381 1
a381 1
	 if (HAVE_SPEC && VB->AttribPtr[_TNL_ATTRIB_COLOR1]) {
d385 5
d396 1
a396 1
static void TAG(quadr)( struct gl_context *ctx,
d402 1
a402 1
   GLfloat z[4] = { 0 };
d424 4
d444 14
a457 23
	 if (DO_TWOSIDE && facing == 1) {
	    GLfloat (*vbcolor)[4] = VB->BackfaceColorPtr->data;
	    (void)vbcolor;

	    if (HAVE_BACK_COLORS) {
	       if (!DO_FLAT) {
		  VERT_SAVE_RGBA( 0 );
		  VERT_SAVE_RGBA( 1 );
		  VERT_SAVE_RGBA( 2 );
		  VERT_COPY_RGBA1( v[0] );
		  VERT_COPY_RGBA1( v[1] );
		  VERT_COPY_RGBA1( v[2] );
	       }
	       VERT_SAVE_RGBA( 3 );
	       VERT_COPY_RGBA1( v[3] );
	       if (HAVE_SPEC) {
		  if (!DO_FLAT) {
		     VERT_SAVE_SPEC( 0 );
		     VERT_SAVE_SPEC( 1 );
		     VERT_SAVE_SPEC( 2 );
		     VERT_COPY_SPEC1( v[0] );
		     VERT_COPY_SPEC1( v[1] );
		     VERT_COPY_SPEC1( v[2] );
d459 13
a471 17
		  VERT_SAVE_SPEC( 3 );
		  VERT_COPY_SPEC1( v[3] );
	       }
	    }
	    else {
	       if (!DO_FLAT) {
		  VERT_SAVE_RGBA( 0 );
		  VERT_SAVE_RGBA( 1 );
		  VERT_SAVE_RGBA( 2 );
	       }
	       VERT_SAVE_RGBA( 3 );

	       if (VB->BackfaceColorPtr->stride) {
		  if (!DO_FLAT) {
		     VERT_SET_RGBA( v[0], vbcolor[e0] );
		     VERT_SET_RGBA( v[1], vbcolor[e1] );
		     VERT_SET_RGBA( v[2], vbcolor[e2] );
a472 1
		  VERT_SET_RGBA( v[3], vbcolor[e3] );
d475 4
a478 4
		  if (!DO_FLAT) {
		     VERT_SET_RGBA( v[0], vbcolor[0] );
		     VERT_SET_RGBA( v[1], vbcolor[0] );
		     VERT_SET_RGBA( v[2], vbcolor[0] );
d480 1
a480 2
		  VERT_SET_RGBA( v[3], vbcolor[0] );
	       }
d482 16
a497 3
	       if (HAVE_SPEC && VB->BackfaceSecondaryColorPtr) {
		  GLfloat (*vbspec)[4] = VB->BackfaceSecondaryColorPtr->data;
		  ASSERT(VB->BackfaceSecondaryColorPtr->stride==4*sizeof(GLfloat));
d499 26
a524 10
		  if (!DO_FLAT) {
		     VERT_SAVE_SPEC( 0 );
		     VERT_SAVE_SPEC( 1 );
		     VERT_SAVE_SPEC( 2 );
		     VERT_SET_SPEC( v[0], vbspec[e0] );
		     VERT_SET_SPEC( v[1], vbspec[e1] );
		     VERT_SET_SPEC( v[2], vbspec[e2] );
		  }
		  VERT_SAVE_SPEC( 3 );
		  VERT_SET_SPEC( v[3], vbspec[e3] );
d526 2
d550 1
a550 1
	    offset += MAX2( ac, bc ) * ctx->Polygon.OffsetFactor / ctx->DrawBuffer->_MRD;
d557 1
d564 1
a564 1
	 if (HAVE_SPEC && VB->AttribPtr[_TNL_ATTRIB_COLOR1]) {
d572 9
d636 17
a652 5
   if (DO_TWOSIDE && facing == 1) {
      if (!DO_FLAT) {
	 VERT_RESTORE_RGBA( 0 );
	 VERT_RESTORE_RGBA( 1 );
	 VERT_RESTORE_RGBA( 2 );
d654 1
a654 2
      VERT_RESTORE_RGBA( 3 );
      if (HAVE_SPEC) {
d656 3
a658 3
	    VERT_RESTORE_SPEC( 0 );
	    VERT_RESTORE_SPEC( 1 );
	    VERT_RESTORE_SPEC( 2 );
d660 1
a660 1
	 VERT_RESTORE_SPEC( 3 );
d666 1
d670 1
a670 1
	 if (HAVE_SPEC && VB->AttribPtr[_TNL_ATTRIB_COLOR1]) {
d675 6
d684 1
a684 1
static void TAG(quadr)( struct gl_context *ctx, GLuint e0,
d706 1
a706 1
static void TAG(line)( struct gl_context *ctx, GLuint e0, GLuint e1 )
d716 1
d719 1
a719 1
	 if (HAVE_SPEC && VB->AttribPtr[_TNL_ATTRIB_COLOR1]) {
d723 5
d733 1
d736 1
a736 1
	 if (HAVE_SPEC && VB->AttribPtr[_TNL_ATTRIB_COLOR1]) {
d739 4
d748 1
a748 1
static void TAG(points)( struct gl_context *ctx, GLuint first, GLuint last )
d776 1
a776 1
   TAB[IND].quad = TAG(quadr);
d792 5
d800 9
d826 1
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d291 1
a291 1
      if (DO_UNFILLED) {
a292 1
      }
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d25 1
a25 1
 *    Keith Whitwell <keithw@@vmware.com>
@


