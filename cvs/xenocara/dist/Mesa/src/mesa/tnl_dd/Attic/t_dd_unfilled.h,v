head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.3.0.8
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.56;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.23.13.37.46;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.22.20.06.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.38;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.38;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.49;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.17.43;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.13;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keithw@@vmware.com>
 */

#if !HAVE_SPEC
#define VERT_SET_SPEC( v, c )
#define VERT_COPY_SPEC( v0, v1 )
#define VERT_SAVE_SPEC( idx )
#define VERT_RESTORE_SPEC( idx )
#endif

static void TAG(unfilled_tri)( struct gl_context *ctx,
			       GLenum mode,
			       GLuint e0, GLuint e1, GLuint e2 )
{
   struct vertex_buffer *VB = &TNL_CONTEXT(ctx)->vb;
   GLubyte *ef = VB->EdgeFlag;
   VERTEX *v[3];
   LOCAL_VARS(3);

   v[0] = (VERTEX *)GET_VERTEX(e0);
   v[1] = (VERTEX *)GET_VERTEX(e1);
   v[2] = (VERTEX *)GET_VERTEX(e2);

   if (ctx->Light.ShadeModel == GL_FLAT && HAVE_HW_FLATSHADE) {
      VERT_SAVE_RGBA(0);
      VERT_SAVE_RGBA(1);
      VERT_COPY_RGBA(v[0], v[2]);
      VERT_COPY_RGBA(v[1], v[2]);

      if (HAVE_SPEC) {
	 VERT_SAVE_SPEC(0);
	 VERT_SAVE_SPEC(1);
	 VERT_COPY_SPEC(v[0], v[2]);
	 VERT_COPY_SPEC(v[1], v[2]);
      }
   }

/*     fprintf(stderr, "%s %s %d %d %d\n", __FUNCTION__, */
/*  	   _mesa_lookup_enum_by_nr( mode ), */
/*  	   ef[e0], ef[e1], ef[e2]); */

   if (mode == GL_POINT) {
      RASTERIZE(GL_POINTS);
      if (ef[e0]) POINT( v[0] );
      if (ef[e1]) POINT( v[1] );
      if (ef[e2]) POINT( v[2] );
   }
   else {
      RASTERIZE(GL_LINES);
      if (RENDER_PRIMITIVE == GL_POLYGON) {
	 if (ef[e2]) LINE( v[2], v[0] );
	 if (ef[e0]) LINE( v[0], v[1] );
	 if (ef[e1]) LINE( v[1], v[2] );
      }
      else {
	 if (ef[e0]) LINE( v[0], v[1] );
	 if (ef[e1]) LINE( v[1], v[2] );
	 if (ef[e2]) LINE( v[2], v[0] );
      }
   }

   if (ctx->Light.ShadeModel == GL_FLAT && HAVE_HW_FLATSHADE) {
      VERT_RESTORE_RGBA(0);
      VERT_RESTORE_RGBA(1);

      if (HAVE_SPEC) {
	 VERT_RESTORE_SPEC(0);
	 VERT_RESTORE_SPEC(1);
      }
   }
}


static void TAG(unfilled_quad)( struct gl_context *ctx,
				GLenum mode,
				GLuint e0, GLuint e1,
				GLuint e2, GLuint e3 )
{
   struct vertex_buffer *VB = &TNL_CONTEXT(ctx)->vb;
   GLubyte *ef = VB->EdgeFlag;
   VERTEX *v[4];
   LOCAL_VARS(4);

   v[0] = (VERTEX *)GET_VERTEX(e0);
   v[1] = (VERTEX *)GET_VERTEX(e1);
   v[2] = (VERTEX *)GET_VERTEX(e2);
   v[3] = (VERTEX *)GET_VERTEX(e3);

   /* Hardware flatshading breaks down here.  If the hardware doesn't
    * support flatshading, this will already have been done:
    */
   if (ctx->Light.ShadeModel == GL_FLAT && HAVE_HW_FLATSHADE) {
      VERT_SAVE_RGBA(0);
      VERT_SAVE_RGBA(1);
      VERT_SAVE_RGBA(2);
      VERT_COPY_RGBA(v[0], v[3]);
      VERT_COPY_RGBA(v[1], v[3]);
      VERT_COPY_RGBA(v[2], v[3]);

      if (HAVE_SPEC) {
	 VERT_SAVE_SPEC(0);
	 VERT_SAVE_SPEC(1);
	 VERT_SAVE_SPEC(2);
	 VERT_COPY_SPEC(v[0], v[3]);
	 VERT_COPY_SPEC(v[1], v[3]);
	 VERT_COPY_SPEC(v[2], v[3]);
      }
   }

   if (mode == GL_POINT) {
      RASTERIZE(GL_POINTS);
      if (ef[e0]) POINT( v[0] );
      if (ef[e1]) POINT( v[1] );
      if (ef[e2]) POINT( v[2] );
      if (ef[e3]) POINT( v[3] );
   }
   else {
      RASTERIZE(GL_LINES);
      if (ef[e0]) LINE( v[0], v[1] );
      if (ef[e1]) LINE( v[1], v[2] );
      if (ef[e2]) LINE( v[2], v[3] );
      if (ef[e3]) LINE( v[3], v[0] );
   }

   if (ctx->Light.ShadeModel == GL_FLAT && HAVE_HW_FLATSHADE) {
      VERT_RESTORE_RGBA(0);
      VERT_RESTORE_RGBA(1);
      VERT_RESTORE_RGBA(2);

      if (HAVE_SPEC) {
	 VERT_RESTORE_SPEC(0);
	 VERT_RESTORE_SPEC(1);
	 VERT_RESTORE_SPEC(2);
      }
   }
}


#if !HAVE_SPEC
#undef VERT_SET_SPEC
#undef VERT_COPY_SPEC
#undef VERT_SAVE_SPEC
#undef VERT_RESTORE_SPEC
#endif

#undef TAG
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d25 1
a25 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
@


1.3
log
@Merge Mesa 7.10.3
@
text
@a2 1
 * Version:  6.5.1
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
@


1.2
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d35 1
a35 1
static void TAG(unfilled_tri)( GLcontext *ctx,
d98 1
a98 1
static void TAG(unfilled_quad)( GLcontext *ctx,
@


1.1
log
@Initial revision
@
text
@a27 7
#if HAVE_RGBA
#define VERT_SET_IND( v, c )
#define VERT_COPY_IND( v0, v1 )
#define VERT_SAVE_IND( idx )
#define VERT_RESTORE_IND( idx )
#endif

d49 10
a58 17
      if (HAVE_RGBA) {
	 VERT_SAVE_RGBA(0);
	 VERT_SAVE_RGBA(1);
	 VERT_COPY_RGBA(v[0], v[2]);
	 VERT_COPY_RGBA(v[1], v[2]);

	 if (HAVE_SPEC) {
	    VERT_SAVE_SPEC(0);
	    VERT_SAVE_SPEC(1);
	    VERT_COPY_SPEC(v[0], v[2]);
	    VERT_COPY_SPEC(v[1], v[2]);
	 }
      } else {
	 VERT_SAVE_IND(0);
	 VERT_SAVE_IND(1);
	 VERT_COPY_IND(v[0], v[2]);
	 VERT_COPY_IND(v[1], v[2]);
d87 6
a92 11
      if (HAVE_RGBA) {
	 VERT_RESTORE_RGBA(0);
	 VERT_RESTORE_RGBA(1);

	 if (HAVE_SPEC) {
	    VERT_RESTORE_SPEC(0);
	    VERT_RESTORE_SPEC(1);
	 }
      } else {
	 VERT_RESTORE_IND(0);
	 VERT_RESTORE_IND(1);
d117 14
a130 23
      if (HAVE_RGBA) {
	 VERT_SAVE_RGBA(0);
	 VERT_SAVE_RGBA(1);
	 VERT_SAVE_RGBA(2);
	 VERT_COPY_RGBA(v[0], v[3]);
	 VERT_COPY_RGBA(v[1], v[3]);
	 VERT_COPY_RGBA(v[2], v[3]);

	 if (HAVE_SPEC) {
	    VERT_SAVE_SPEC(0);
	    VERT_SAVE_SPEC(1);
	    VERT_SAVE_SPEC(2);
	    VERT_COPY_SPEC(v[0], v[3]);
	    VERT_COPY_SPEC(v[1], v[3]);
	    VERT_COPY_SPEC(v[2], v[3]);
	 }
      } else {
	 VERT_SAVE_IND(0);
	 VERT_SAVE_IND(1);
	 VERT_SAVE_IND(2);
	 VERT_COPY_IND(v[0], v[3]);
	 VERT_COPY_IND(v[1], v[3]);
	 VERT_COPY_IND(v[2], v[3]);
d150 8
a157 14
      if (HAVE_RGBA) {
	 VERT_RESTORE_RGBA(0);
	 VERT_RESTORE_RGBA(1);
	 VERT_RESTORE_RGBA(2);

	 if (HAVE_SPEC) {
	    VERT_RESTORE_SPEC(0);
	    VERT_RESTORE_SPEC(1);
	    VERT_RESTORE_SPEC(2);
	 }
      } else {
	 VERT_RESTORE_IND(0);
	 VERT_RESTORE_IND(1);
	 VERT_RESTORE_IND(2);
a161 7

#if HAVE_RGBA
#undef VERT_SET_IND
#undef VERT_COPY_IND
#undef VERT_SAVE_IND
#undef VERT_RESTORE_IND
#endif
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d28 7
d42 1
a42 1
static void TAG(unfilled_tri)( struct gl_context *ctx,
d56 17
a72 10
      VERT_SAVE_RGBA(0);
      VERT_SAVE_RGBA(1);
      VERT_COPY_RGBA(v[0], v[2]);
      VERT_COPY_RGBA(v[1], v[2]);

      if (HAVE_SPEC) {
	 VERT_SAVE_SPEC(0);
	 VERT_SAVE_SPEC(1);
	 VERT_COPY_SPEC(v[0], v[2]);
	 VERT_COPY_SPEC(v[1], v[2]);
d101 11
a111 6
      VERT_RESTORE_RGBA(0);
      VERT_RESTORE_RGBA(1);

      if (HAVE_SPEC) {
	 VERT_RESTORE_SPEC(0);
	 VERT_RESTORE_SPEC(1);
d117 1
a117 1
static void TAG(unfilled_quad)( struct gl_context *ctx,
d136 23
a158 14
      VERT_SAVE_RGBA(0);
      VERT_SAVE_RGBA(1);
      VERT_SAVE_RGBA(2);
      VERT_COPY_RGBA(v[0], v[3]);
      VERT_COPY_RGBA(v[1], v[3]);
      VERT_COPY_RGBA(v[2], v[3]);

      if (HAVE_SPEC) {
	 VERT_SAVE_SPEC(0);
	 VERT_SAVE_SPEC(1);
	 VERT_SAVE_SPEC(2);
	 VERT_COPY_SPEC(v[0], v[3]);
	 VERT_COPY_SPEC(v[1], v[3]);
	 VERT_COPY_SPEC(v[2], v[3]);
d178 14
a191 8
      VERT_RESTORE_RGBA(0);
      VERT_RESTORE_RGBA(1);
      VERT_RESTORE_RGBA(2);

      if (HAVE_SPEC) {
	 VERT_RESTORE_SPEC(0);
	 VERT_RESTORE_SPEC(1);
	 VERT_RESTORE_SPEC(2);
d196 7
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d25 1
a25 1
 *    Keith Whitwell <keithw@@vmware.com>
@


