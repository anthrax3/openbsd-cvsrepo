head	1.12;
access;
symbols
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.11;
commitid	TnlogFl9nOv2eaRf;

1.11
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.10;
commitid	4ry2gvZGMXkCUD2n;

1.10
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.9;
commitid	mcxB0JvoI9gTDYXU;

1.9
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.8;
commitid	WPD6rgPryPkvXOr9;

1.8
date	2013.09.05.14.06.59;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.46;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.37;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.43;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.23;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.12.21.09.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.17.32.26;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.32.26;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.50;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.17.47;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.14;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.13.39;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.50.44;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.12
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* Author:
 *    Keith Whitwell <keithw@@vmware.com>
 */

#include "main/glheader.h"
#include "main/bufferobj.h"
#include "main/context.h"
#include "main/imports.h"
#include "main/mtypes.h"
#include "main/macros.h"
#include "main/light.h"
#include "main/state.h"

#include "vbo_context.h"


/**
 * After playback, copy everything but the position from the
 * last vertex to the saved state
 */
static void
_playback_copy_to_current(struct gl_context *ctx,
                          const struct vbo_save_vertex_list *node)
{
   struct vbo_context *vbo = vbo_context(ctx);
   GLfloat vertex[VBO_ATTRIB_MAX * 4];
   GLfloat *data;
   GLuint i, offset;

   if (node->current_size == 0)
      return;

   if (node->current_data) {
      data = node->current_data;
   }
   else {
      data = vertex;

      if (node->count)
         offset = (node->buffer_offset + 
                   (node->count-1) * node->vertex_size * sizeof(GLfloat));
      else
         offset = node->buffer_offset;

      ctx->Driver.GetBufferSubData( ctx, offset,
                                    node->vertex_size * sizeof(GLfloat), 
                                    data, node->vertex_store->bufferobj );

      data += node->attrsz[0]; /* skip vertex position */
   }

   for (i = VBO_ATTRIB_POS+1 ; i < VBO_ATTRIB_MAX ; i++) {
      if (node->attrsz[i]) {
	 GLfloat *current = (GLfloat *)vbo->currval[i].Ptr;
         GLfloat tmp[4];

         COPY_CLEAN_4V_TYPE_AS_FLOAT(tmp,
                                     node->attrsz[i],
                                     data,
                                     node->attrtype[i]);
         
         if (node->attrtype[i] != vbo->currval[i].Type ||
             memcmp(current, tmp, 4 * sizeof(GLfloat)) != 0) {
            memcpy(current, tmp, 4 * sizeof(GLfloat));

            vbo->currval[i].Size = node->attrsz[i];
            vbo->currval[i]._ElementSize = vbo->currval[i].Size * sizeof(GLfloat);
            vbo->currval[i].Type = node->attrtype[i];
            vbo->currval[i].Integer =
                  vbo_attrtype_to_integer_flag(node->attrtype[i]);

            if (i >= VBO_ATTRIB_FIRST_MATERIAL &&
                i <= VBO_ATTRIB_LAST_MATERIAL)
               ctx->NewState |= _NEW_LIGHT;

            ctx->NewState |= _NEW_CURRENT_ATTRIB;
         }

	 data += node->attrsz[i];
      }
   }

   /* Colormaterial -- this kindof sucks.
    */
   if (ctx->Light.ColorMaterialEnabled) {
      _mesa_update_color_material(ctx, ctx->Current.Attrib[VBO_ATTRIB_COLOR0]);
   }

   /* CurrentExecPrimitive
    */
   if (node->prim_count) {
      const struct _mesa_prim *prim = &node->prim[node->prim_count - 1];
      if (prim->end)
	 ctx->Driver.CurrentExecPrimitive = PRIM_OUTSIDE_BEGIN_END;
      else
	 ctx->Driver.CurrentExecPrimitive = prim->mode;
   }
}



/**
 * Treat the vertex storage as a VBO, define vertex arrays pointing
 * into it:
 */
static void vbo_bind_vertex_list(struct gl_context *ctx,
                                 const struct vbo_save_vertex_list *node)
{
   struct vbo_context *vbo = vbo_context(ctx);
   struct vbo_save_context *save = &vbo->save;
   struct gl_client_array *arrays = save->arrays;
   GLuint buffer_offset = node->buffer_offset;
   const GLuint *map;
   GLuint attr;
   GLubyte node_attrsz[VBO_ATTRIB_MAX];  /* copy of node->attrsz[] */
   GLenum node_attrtype[VBO_ATTRIB_MAX];  /* copy of node->attrtype[] */
   GLbitfield64 varying_inputs = 0x0;

   memcpy(node_attrsz, node->attrsz, sizeof(node->attrsz));
   memcpy(node_attrtype, node->attrtype, sizeof(node->attrtype));

   /* Install the default (ie Current) attributes first, then overlay
    * all active ones.
    */
   switch (get_program_mode(ctx)) {
   case VP_NONE:
      for (attr = 0; attr < VERT_ATTRIB_FF_MAX; attr++) {
         save->inputs[attr] = &vbo->currval[VBO_ATTRIB_POS+attr];
      }
      for (attr = 0; attr < MAT_ATTRIB_MAX; attr++) {
         save->inputs[VERT_ATTRIB_GENERIC(attr)] =
            &vbo->currval[VBO_ATTRIB_MAT_FRONT_AMBIENT+attr];
      }
      map = vbo->map_vp_none;
      break;
   case VP_ARB:
      for (attr = 0; attr < VERT_ATTRIB_FF_MAX; attr++) {
         save->inputs[attr] = &vbo->currval[VBO_ATTRIB_POS+attr];
      }
      for (attr = 0; attr < VERT_ATTRIB_GENERIC_MAX; attr++) {
         save->inputs[VERT_ATTRIB_GENERIC(attr)] =
            &vbo->currval[VBO_ATTRIB_GENERIC0+attr];
      }
      map = vbo->map_vp_arb;

      /* check if VERT_ATTRIB_POS is not read but VERT_BIT_GENERIC0 is read.
       * In that case we effectively need to route the data from
       * glVertexAttrib(0, val) calls to feed into the GENERIC0 input.
       */
      if ((ctx->VertexProgram._Current->Base.InputsRead & VERT_BIT_POS) == 0 &&
          (ctx->VertexProgram._Current->Base.InputsRead & VERT_BIT_GENERIC0)) {
         save->inputs[VERT_ATTRIB_GENERIC0] = save->inputs[0];
         node_attrsz[VERT_ATTRIB_GENERIC0] = node_attrsz[0];
         node_attrtype[VERT_ATTRIB_GENERIC0] = node_attrtype[0];
         node_attrsz[0] = 0;
      }
      break;
   default:
      assert(0);
   }

   for (attr = 0; attr < VERT_ATTRIB_MAX; attr++) {
      const GLuint src = map[attr];

      if (node_attrsz[src]) {
         /* override the default array set above */
         save->inputs[attr] = &arrays[attr];

	 arrays[attr].Ptr = (const GLubyte *) NULL + buffer_offset;
	 arrays[attr].Size = node_attrsz[src];
	 arrays[attr].StrideB = node->vertex_size * sizeof(GLfloat);
	 arrays[attr].Stride = node->vertex_size * sizeof(GLfloat);
         arrays[attr].Type = node_attrtype[src];
         arrays[attr].Integer =
               vbo_attrtype_to_integer_flag(node_attrtype[src]);
         arrays[attr].Format = GL_RGBA;
	 arrays[attr].Enabled = 1;
         arrays[attr]._ElementSize = arrays[attr].Size * sizeof(GLfloat);
         _mesa_reference_buffer_object(ctx,
                                       &arrays[attr].BufferObj,
                                       node->vertex_store->bufferobj);
	 arrays[attr]._MaxElement = node->count; /* ??? */
	 
	 assert(arrays[attr].BufferObj->Name);

	 buffer_offset += node_attrsz[src] * sizeof(GLfloat);
         varying_inputs |= VERT_BIT(attr);
      }
   }

   _mesa_set_varying_vp_inputs( ctx, varying_inputs );
   ctx->NewDriverState |= ctx->DriverFlags.NewArray;
}


static void
vbo_save_loopback_vertex_list(struct gl_context *ctx,
                              const struct vbo_save_vertex_list *list)
{
   const char *buffer =
      ctx->Driver.MapBufferRange(ctx, 0,
				 list->vertex_store->bufferobj->Size,
				 GL_MAP_READ_BIT, /* ? */
				 list->vertex_store->bufferobj,
                                 MAP_INTERNAL);

   vbo_loopback_vertex_list(ctx,
                            (const GLfloat *)(buffer + list->buffer_offset),
                            list->attrsz,
                            list->prim,
                            list->prim_count,
                            list->wrap_count,
                            list->vertex_size);

   ctx->Driver.UnmapBuffer(ctx, list->vertex_store->bufferobj,
                           MAP_INTERNAL);
}


/**
 * Execute the buffer and save copied verts.
 * This is called from the display list code when executing
 * a drawing command.
 */
void
vbo_save_playback_vertex_list(struct gl_context *ctx, void *data)
{
   const struct vbo_save_vertex_list *node =
      (const struct vbo_save_vertex_list *) data;
   struct vbo_save_context *save = &vbo_context(ctx)->save;
   GLboolean remap_vertex_store = GL_FALSE;

   if (save->vertex_store && save->vertex_store->buffer) {
      /* The vertex store is currently mapped but we're about to replay
       * a display list.  This can happen when a nested display list is
       * being build with GL_COMPILE_AND_EXECUTE.
       * We never want to have mapped vertex buffers when we're drawing.
       * Unmap the vertex store, execute the list, then remap the vertex
       * store.
       */
      vbo_save_unmap_vertex_store(ctx, save->vertex_store);
      remap_vertex_store = GL_TRUE;
   }

   FLUSH_CURRENT(ctx, 0);

   if (node->prim_count > 0) {

      if (_mesa_inside_begin_end(ctx) && node->prim[0].begin) {
         /* Error: we're about to begin a new primitive but we're already
          * inside a glBegin/End pair.
          */
         _mesa_error(ctx, GL_INVALID_OPERATION,
                     "draw operation inside glBegin/End");
         goto end;
      }
      else if (save->replay_flags) {
	 /* Various degnerate cases: translate into immediate mode
	  * calls rather than trying to execute in place.
	  */
	 vbo_save_loopback_vertex_list( ctx, node );

         goto end;
      }
      
      if (ctx->NewState)
	 _mesa_update_state( ctx );

      /* XXX also need to check if shader enabled, but invalid */
      if ((ctx->VertexProgram.Enabled && !ctx->VertexProgram._Enabled) ||
          (ctx->FragmentProgram.Enabled && !ctx->FragmentProgram._Enabled)) {
         _mesa_error(ctx, GL_INVALID_OPERATION,
                     "glBegin (invalid vertex/fragment program)");
         return;
      }

      vbo_bind_vertex_list( ctx, node );

      vbo_draw_method(vbo_context(ctx), DRAW_DISPLAY_LIST);

      /* Again...
       */
      if (ctx->NewState)
	 _mesa_update_state( ctx );

      if (node->count > 0) {
         vbo_context(ctx)->draw_prims(ctx, 
                                      node->prim,
                                      node->prim_count,
                                      NULL,
                                      GL_TRUE,
                                      0,    /* Node is a VBO, so this is ok */
                                      node->count - 1,
                                      NULL, NULL);
      }
   }

   /* Copy to current?
    */
   _playback_copy_to_current( ctx, node );

end:
   if (remap_vertex_store) {
      save->buffer_ptr = vbo_save_map_vertex_store(ctx, save->vertex_store);
   }
}
@


1.11
log
@Merge Mesa 10.2.9
@
text
@@


1.10
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d206 1
@


1.9
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@a205 1
	 arrays[attr]._MaxElement = node->count; /* ??? */
@


1.8
log
@Merge Mesa 9.2.0
@
text
@d26 1
a26 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
d228 2
a229 1
				 list->vertex_store->bufferobj);
d239 2
a240 1
   ctx->Driver.UnmapBuffer(ctx, list->vertex_store->bufferobj);
d318 1
a318 1
                                      NULL);
@


1.7
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.2
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
a32 1
#include "main/mfeatures.h"
a40 3
#if FEATURE_dlist


d69 1
a69 1
      ctx->Driver.GetBufferSubData( ctx, 0, offset, 
d81 4
a84 3
         COPY_CLEAN_4V(tmp, 
                       node->attrsz[i], 
                       data);
d86 2
a87 1
         if (memcmp(current, tmp, 4 * sizeof(GLfloat)) != 0) {
a90 1
            assert(vbo->currval[i].Type == GL_FLOAT);
d92 3
d140 2
a141 1
   GLbitfield varying_inputs = 0x0;
d144 1
d151 2
a152 2
      for (attr = 0; attr < 16; attr++) {
         save->inputs[attr] = &vbo->legacy_currval[attr];
d155 2
a156 1
         save->inputs[attr + 16] = &vbo->mat_currval[attr];
a159 1
   case VP_NV:
d161 6
a166 7
      /* The aliasing of attributes for NV vertex programs has already
       * occurred.  NV vertex programs cannot access material values,
       * nor attributes greater than VERT_ATTRIB_TEX7.  
       */
      for (attr = 0; attr < 16; attr++) {
         save->inputs[attr] = &vbo->legacy_currval[attr];
         save->inputs[attr + 16] = &vbo->generic_currval[attr];
d176 3
a178 2
         save->inputs[16] = save->inputs[0];
         node_attrsz[16] = node_attrsz[0];
d194 1
a194 1
	 arrays[attr].Size = node->attrsz[src];
d197 3
a199 1
	 arrays[attr].Type = GL_FLOAT;
d210 2
a211 3
	 buffer_offset += node->attrsz[src] * sizeof(GLfloat);
         varying_inputs |= 1<<attr;
         ctx->NewState |= _NEW_ARRAY;
d216 1
d224 5
a228 4
   const char *buffer = ctx->Driver.MapBuffer(ctx, 
					      GL_ARRAY_BUFFER_ARB, 
					      GL_READ_ONLY, /* ? */
                                              list->vertex_store->bufferobj);
d238 1
a238 2
   ctx->Driver.UnmapBuffer(ctx, GL_ARRAY_BUFFER_ARB, 
			   list->vertex_store->bufferobj);
d253 13
d271 7
a277 11
      if (ctx->Driver.CurrentExecPrimitive != PRIM_OUTSIDE_BEGIN_END &&
	  node->prim[0].begin) {

	 /* Degenerate case: list is called inside begin/end pair and
	  * includes operations such as glBegin or glDrawArrays.
	  */
	 if (0)
	    printf("displaylist recursive begin");

	 vbo_save_loopback_vertex_list( ctx, node );
	 return;
d284 2
a285 1
	 return;
d301 2
d310 1
a310 2
                                      save->inputs, 
                                      node->prim, 
d315 2
a316 1
                                      node->count - 1);
d323 5
a328 3


#endif /* FEATURE_dlist */
@


1.6
log
@Merge Mesa 7.10.3
@
text
@d33 1
d93 2
d198 1
d208 1
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d41 4
a44 1
/*
d48 3
a50 2
static void _playback_copy_to_current( GLcontext *ctx,
				       const struct vbo_save_vertex_list *node )
d88 1
a88 2
         if (memcmp(current, tmp, 4 * sizeof(GLfloat)) != 0)
         {
d123 2
a124 1
/* Treat the vertex storage as a VBO, define vertex arrays pointing
d127 2
a128 2
static void vbo_bind_vertex_list( GLcontext *ctx,
                                   const struct vbo_save_vertex_list *node )
d182 1
a182 1
      GLuint src = map[attr];
d210 4
a213 2
static void vbo_save_loopback_vertex_list( GLcontext *ctx,
					   const struct vbo_save_vertex_list *list )
d218 1
a218 1
					       list->vertex_store->bufferobj);
d220 7
a226 7
   vbo_loopback_vertex_list( ctx,
			     (const GLfloat *)(buffer + list->buffer_offset),
			     list->attrsz,
			     list->prim,
			     list->prim_count,
			     list->wrap_count,
			     list->vertex_size);
d235 2
d238 2
a239 1
void vbo_save_playback_vertex_list( GLcontext *ctx, void *data )
d241 2
a242 1
   const struct vbo_save_vertex_list *node = (const struct vbo_save_vertex_list *) data;
d247 1
a247 1
   if (node->prim_count > 0 && node->count > 0) {
d287 10
a296 8
      vbo_context(ctx)->draw_prims( ctx, 
				    save->inputs, 
				    node->prim, 
				    node->prim_count,
				    NULL,
				    GL_TRUE,
				    0,	/* Node is a VBO, so this is ok */
				    node->count - 1);
d303 3
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d49 2
a50 1
   GLfloat vertex[VBO_ATTRIB_MAX * 4], *data = vertex;
d53 2
a54 9
   if (node->count)
      offset = (node->buffer_offset + 
		(node->count-1) * node->vertex_size * sizeof(GLfloat));
   else
      offset = node->buffer_offset;

   ctx->Driver.GetBufferSubData( ctx, 0, offset, 
				 node->vertex_size * sizeof(GLfloat), 
				 data, node->vertex_store->bufferobj );
d56 18
a73 1
   data += node->attrsz[0]; /* skip vertex position */
d78 1
d80 13
a92 3
	 COPY_CLEAN_4V(current, 
		       node->attrsz[i], 
		       data);
d94 2
a95 1
	 vbo->currval[i].Size = node->attrsz[i];
a97 4

	 if (i >= VBO_ATTRIB_FIRST_MATERIAL &&
	     i <= VBO_ATTRIB_LAST_MATERIAL)
	    ctx->NewState |= _NEW_LIGHT;
d129 1
a129 1
   GLuint data = node->buffer_offset;
d133 1
d184 1
a184 1
	 arrays[attr].Ptr = (const GLubyte *) data;
d189 1
d198 2
a199 1
	 data += node->attrsz[src] * sizeof(GLfloat);
d202 2
d246 1
a246 1
	    _mesa_printf("displaylist recursive begin");
d272 5
d282 1
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d113 3
d141 11
d153 2
d160 1
a160 1
      if (node->attrsz[src]) {
@


1.2
log
@Update to Mesa 7.0.2. Tested by naddy@@ (full ports build), simon@@
and oga@@ (with dri enabled).
@
text
@d3 1
a3 1
 * Version:  6.1
d5 1
a5 1
 * Copyright (C) 1999-2004  Brian Paul   All Rights Reserved.
d29 8
a36 7
#include "glheader.h"
#include "context.h"
#include "imports.h"
#include "mtypes.h"
#include "macros.h"
#include "light.h"
#include "state.h"
d119 6
a124 2
      memcpy(arrays,      vbo->legacy_currval, 16 * sizeof(arrays[0]));
      memcpy(arrays + 16, vbo->mat_currval,    MAT_ATTRIB_MAX * sizeof(arrays[0]));
d133 4
a136 2
      memcpy(arrays,      vbo->legacy_currval,  16 * sizeof(arrays[0]));
      memcpy(arrays + 16, vbo->generic_currval, 16 * sizeof(arrays[0]));
d141 1
a141 1
   for (attr = 0; attr < VBO_ATTRIB_MAX; attr++) {
d145 4
a148 1
	 arrays[attr].Ptr = (const GLubyte *)data;
d154 3
a156 1
	 arrays[attr].BufferObj = node->vertex_store->bufferobj;
d161 1
a161 1
	 data += node->attrsz[attr] * sizeof(GLfloat);
@


1.1
log
@Initial revision
@
text
@d135 3
a137 1
      if (node->attrsz[attr]) {
d139 1
a139 1
	 arrays[attr].Size = node->attrsz[attr];
@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d3 1
a3 1
 * Version:  7.2
d5 1
a5 1
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
d29 7
a35 8
#include "main/glheader.h"
#include "main/bufferobj.h"
#include "main/context.h"
#include "main/imports.h"
#include "main/mtypes.h"
#include "main/macros.h"
#include "main/light.h"
#include "main/state.h"
d40 1
a40 4
#if FEATURE_dlist


/**
d44 2
a45 3
static void
_playback_copy_to_current(struct gl_context *ctx,
                          const struct vbo_save_vertex_list *node)
d48 1
a48 2
   GLfloat vertex[VBO_ATTRIB_MAX * 4];
   GLfloat *data;
d51 9
a59 14
   if (node->current_size == 0)
      return;

   if (node->current_data) {
      data = node->current_data;
   }
   else {
      data = vertex;

      if (node->count)
         offset = (node->buffer_offset + 
                   (node->count-1) * node->vertex_size * sizeof(GLfloat));
      else
         offset = node->buffer_offset;
d61 1
a61 6
      ctx->Driver.GetBufferSubData( ctx, 0, offset, 
                                    node->vertex_size * sizeof(GLfloat), 
                                    data, node->vertex_store->bufferobj );

      data += node->attrsz[0]; /* skip vertex position */
   }
a65 1
         GLfloat tmp[4];
d67 3
a69 12
         COPY_CLEAN_4V(tmp, 
                       node->attrsz[i], 
                       data);
         
         if (memcmp(current, tmp, 4 * sizeof(GLfloat)) != 0) {
            memcpy(current, tmp, 4 * sizeof(GLfloat));

            vbo->currval[i].Size = node->attrsz[i];

            if (i >= VBO_ATTRIB_FIRST_MATERIAL &&
                i <= VBO_ATTRIB_LAST_MATERIAL)
               ctx->NewState |= _NEW_LIGHT;
d71 1
a71 2
            ctx->NewState |= _NEW_CURRENT_ATTRIB;
         }
d74 4
d100 1
a100 2
/**
 * Treat the vertex storage as a VBO, define vertex arrays pointing
d103 2
a104 2
static void vbo_bind_vertex_list(struct gl_context *ctx,
                                 const struct vbo_save_vertex_list *node)
d109 1
a109 1
   GLuint buffer_offset = node->buffer_offset;
a111 4
   GLubyte node_attrsz[VBO_ATTRIB_MAX];  /* copy of node->attrsz[] */
   GLbitfield varying_inputs = 0x0;

   memcpy(node_attrsz, node->attrsz, sizeof(node->attrsz));
d118 2
a119 6
      for (attr = 0; attr < 16; attr++) {
         save->inputs[attr] = &vbo->legacy_currval[attr];
      }
      for (attr = 0; attr < MAT_ATTRIB_MAX; attr++) {
         save->inputs[attr + 16] = &vbo->mat_currval[attr];
      }
d128 2
a129 4
      for (attr = 0; attr < 16; attr++) {
         save->inputs[attr] = &vbo->legacy_currval[attr];
         save->inputs[attr + 16] = &vbo->generic_currval[attr];
      }
a130 11

      /* check if VERT_ATTRIB_POS is not read but VERT_BIT_GENERIC0 is read.
       * In that case we effectively need to route the data from
       * glVertexAttrib(0, val) calls to feed into the GENERIC0 input.
       */
      if ((ctx->VertexProgram._Current->Base.InputsRead & VERT_BIT_POS) == 0 &&
          (ctx->VertexProgram._Current->Base.InputsRead & VERT_BIT_GENERIC0)) {
         save->inputs[16] = save->inputs[0];
         node_attrsz[16] = node_attrsz[0];
         node_attrsz[0] = 0;
      }
a131 2
   default:
      assert(0);
d134 4
a137 9
   for (attr = 0; attr < VERT_ATTRIB_MAX; attr++) {
      const GLuint src = map[attr];

      if (node_attrsz[src]) {
         /* override the default array set above */
         save->inputs[attr] = &arrays[attr];

	 arrays[attr].Ptr = (const GLubyte *) NULL + buffer_offset;
	 arrays[attr].Size = node->attrsz[src];
a140 1
         arrays[attr].Format = GL_RGBA;
d142 1
a142 3
         _mesa_reference_buffer_object(ctx,
                                       &arrays[attr].BufferObj,
                                       node->vertex_store->bufferobj);
d147 1
a147 2
	 buffer_offset += node->attrsz[src] * sizeof(GLfloat);
         varying_inputs |= 1<<attr;
a149 2

   _mesa_set_varying_vp_inputs( ctx, varying_inputs );
d152 2
a153 4

static void
vbo_save_loopback_vertex_list(struct gl_context *ctx,
                              const struct vbo_save_vertex_list *list)
d158 1
a158 1
                                              list->vertex_store->bufferobj);
d160 7
a166 7
   vbo_loopback_vertex_list(ctx,
                            (const GLfloat *)(buffer + list->buffer_offset),
                            list->attrsz,
                            list->prim,
                            list->prim_count,
                            list->wrap_count,
                            list->vertex_size);
a174 2
 * This is called from the display list code when executing
 * a drawing command.
d176 1
a176 2
void
vbo_save_playback_vertex_list(struct gl_context *ctx, void *data)
d178 1
a178 2
   const struct vbo_save_vertex_list *node =
      (const struct vbo_save_vertex_list *) data;
d183 1
a183 1
   if (node->prim_count > 0) {
d192 1
a192 1
	    printf("displaylist recursive begin");
d218 7
a224 15
      /* Again...
       */
      if (ctx->NewState)
	 _mesa_update_state( ctx );

      if (node->count > 0) {
         vbo_context(ctx)->draw_prims(ctx, 
                                      save->inputs, 
                                      node->prim, 
                                      node->prim_count,
                                      NULL,
                                      GL_TRUE,
                                      0,    /* Node is a VBO, so this is ok */
                                      node->count - 1);
      }
a230 3


#endif /* FEATURE_dlist */
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d41 3
d72 1
a72 1
      ctx->Driver.GetBufferSubData( ctx, offset,
d84 3
a86 4
         COPY_CLEAN_4V_TYPE_AS_FLOAT(tmp,
                                     node->attrsz[i],
                                     data,
                                     node->attrtype[i]);
d88 1
a88 2
         if (node->attrtype[i] != vbo->currval[i].Type ||
             memcmp(current, tmp, 4 * sizeof(GLfloat)) != 0) {
a91 4
            vbo->currval[i]._ElementSize = vbo->currval[i].Size * sizeof(GLfloat);
            vbo->currval[i].Type = node->attrtype[i];
            vbo->currval[i].Integer =
                  vbo_attrtype_to_integer_flag(node->attrtype[i]);
d137 1
a137 2
   GLenum node_attrtype[VBO_ATTRIB_MAX];  /* copy of node->attrtype[] */
   GLbitfield64 varying_inputs = 0x0;
a139 1
   memcpy(node_attrtype, node->attrtype, sizeof(node->attrtype));
d146 2
a147 2
      for (attr = 0; attr < VERT_ATTRIB_FF_MAX; attr++) {
         save->inputs[attr] = &vbo->currval[VBO_ATTRIB_POS+attr];
d150 1
a150 2
         save->inputs[VERT_ATTRIB_GENERIC(attr)] =
            &vbo->currval[VBO_ATTRIB_MAT_FRONT_AMBIENT+attr];
d154 1
d156 7
a162 6
      for (attr = 0; attr < VERT_ATTRIB_FF_MAX; attr++) {
         save->inputs[attr] = &vbo->currval[VBO_ATTRIB_POS+attr];
      }
      for (attr = 0; attr < VERT_ATTRIB_GENERIC_MAX; attr++) {
         save->inputs[VERT_ATTRIB_GENERIC(attr)] =
            &vbo->currval[VBO_ATTRIB_GENERIC0+attr];
d172 2
a173 3
         save->inputs[VERT_ATTRIB_GENERIC0] = save->inputs[0];
         node_attrsz[VERT_ATTRIB_GENERIC0] = node_attrsz[0];
         node_attrtype[VERT_ATTRIB_GENERIC0] = node_attrtype[0];
d189 1
a189 1
	 arrays[attr].Size = node_attrsz[src];
d192 1
a192 3
         arrays[attr].Type = node_attrtype[src];
         arrays[attr].Integer =
               vbo_attrtype_to_integer_flag(node_attrtype[src]);
a194 1
         arrays[attr]._ElementSize = arrays[attr].Size * sizeof(GLfloat);
d202 2
a203 2
	 buffer_offset += node_attrsz[src] * sizeof(GLfloat);
         varying_inputs |= VERT_BIT(attr);
a207 1
   ctx->NewDriverState |= ctx->DriverFlags.NewArray;
d215 4
a218 5
   const char *buffer =
      ctx->Driver.MapBufferRange(ctx, 0,
				 list->vertex_store->bufferobj->Size,
				 GL_MAP_READ_BIT, /* ? */
				 list->vertex_store->bufferobj);
d228 2
a229 1
   ctx->Driver.UnmapBuffer(ctx, list->vertex_store->bufferobj);
a243 13
   GLboolean remap_vertex_store = GL_FALSE;

   if (save->vertex_store && save->vertex_store->buffer) {
      /* The vertex store is currently mapped but we're about to replay
       * a display list.  This can happen when a nested display list is
       * being build with GL_COMPILE_AND_EXECUTE.
       * We never want to have mapped vertex buffers when we're drawing.
       * Unmap the vertex store, execute the list, then remap the vertex
       * store.
       */
      vbo_save_unmap_vertex_store(ctx, save->vertex_store);
      remap_vertex_store = GL_TRUE;
   }
d249 11
a259 7
      if (_mesa_inside_begin_end(ctx) && node->prim[0].begin) {
         /* Error: we're about to begin a new primitive but we're already
          * inside a glBegin/End pair.
          */
         _mesa_error(ctx, GL_INVALID_OPERATION,
                     "draw operation inside glBegin/End");
         goto end;
d266 1
a266 2

         goto end;
a281 2
      vbo_draw_method(vbo_context(ctx), DRAW_DISPLAY_LIST);

d289 2
a290 1
                                      node->prim,
d295 1
a295 2
                                      node->count - 1,
                                      NULL);
d302 2
d305 1
a305 5
end:
   if (remap_vertex_store) {
      save->buffer_ptr = vbo_save_map_vertex_store(ctx, save->vertex_store);
   }
}
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d26 1
a26 1
 *    Keith Whitwell <keithw@@vmware.com>
d228 1
a228 2
				 list->vertex_store->bufferobj,
                                 MAP_INTERNAL);
d238 1
a238 2
   ctx->Driver.UnmapBuffer(ctx, list->vertex_store->bufferobj,
                           MAP_INTERNAL);
d316 1
a316 1
                                      NULL, NULL);
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d206 1
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@a205 1
	 arrays[attr]._MaxElement = node->count; /* ??? */
@


