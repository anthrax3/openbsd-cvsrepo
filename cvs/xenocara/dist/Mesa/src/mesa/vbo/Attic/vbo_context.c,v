head	1.10;
access;
symbols
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.9;
commitid	TnlogFl9nOv2eaRf;

1.9
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.8;
commitid	WPD6rgPryPkvXOr9;

1.8
date	2013.09.05.14.06.58;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.46;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.37;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.43;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.23;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.49;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.17.32.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.32.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.50;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.17.44;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.13;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.10
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2005  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keithw@@vmware.com>
 */

#include "main/imports.h"
#include "main/mtypes.h"
#include "main/api_arrayelt.h"
#include "main/bufferobj.h"
#include "math/m_eval.h"
#include "vbo.h"
#include "vbo_context.h"

#define NR_MAT_ATTRIBS 12

static GLuint check_size( const GLfloat *attr )
{
   if (attr[3] != 1.0) return 4;
   if (attr[2] != 0.0) return 3;
   if (attr[1] != 0.0) return 2;
   return 1;		
}


static void init_legacy_currval(struct gl_context *ctx)
{
   struct vbo_context *vbo = vbo_context(ctx);
   struct gl_client_array *arrays = &vbo->currval[VBO_ATTRIB_POS];
   GLuint i;

   memset(arrays, 0, sizeof(*arrays) * VERT_ATTRIB_FF_MAX);

   /* Set up a constant (StrideB == 0) array for each current
    * attribute:
    */
   for (i = 0; i < VERT_ATTRIB_FF_MAX; i++) {
      struct gl_client_array *cl = &arrays[i];

      /* Size will have to be determined at runtime:
       */
      cl->Size = check_size(ctx->Current.Attrib[i]);
      cl->Stride = 0;
      cl->StrideB = 0;
      cl->Enabled = 1;
      cl->Type = GL_FLOAT;
      cl->Format = GL_RGBA;
      cl->Ptr = (const void *)ctx->Current.Attrib[i];
      cl->_ElementSize = cl->Size * sizeof(GLfloat);
      _mesa_reference_buffer_object(ctx, &cl->BufferObj,
                                    ctx->Shared->NullBufferObj);
   }
}


static void init_generic_currval(struct gl_context *ctx)
{
   struct vbo_context *vbo = vbo_context(ctx);
   struct gl_client_array *arrays = &vbo->currval[VBO_ATTRIB_GENERIC0];
   GLuint i;

   memset(arrays, 0, sizeof(*arrays) * VERT_ATTRIB_GENERIC_MAX);

   for (i = 0; i < VERT_ATTRIB_GENERIC_MAX; i++) {
      struct gl_client_array *cl = &arrays[i];

      /* This will have to be determined at runtime:
       */
      cl->Size = 1;
      cl->Type = GL_FLOAT;
      cl->Format = GL_RGBA;
      cl->Ptr = (const void *)ctx->Current.Attrib[VERT_ATTRIB_GENERIC0 + i];
      cl->Stride = 0;
      cl->StrideB = 0;
      cl->Enabled = 1;
      cl->_ElementSize = cl->Size * sizeof(GLfloat);
      _mesa_reference_buffer_object(ctx, &cl->BufferObj,
                                    ctx->Shared->NullBufferObj);
   }
}


static void init_mat_currval(struct gl_context *ctx)
{
   struct vbo_context *vbo = vbo_context(ctx);
   struct gl_client_array *arrays =
      &vbo->currval[VBO_ATTRIB_MAT_FRONT_AMBIENT];
   GLuint i;

   ASSERT(NR_MAT_ATTRIBS == MAT_ATTRIB_MAX);

   memset(arrays, 0, sizeof(*arrays) * NR_MAT_ATTRIBS);

   /* Set up a constant (StrideB == 0) array for each current
    * attribute:
    */
   for (i = 0; i < NR_MAT_ATTRIBS; i++) {
      struct gl_client_array *cl = &arrays[i];

      /* Size is fixed for the material attributes, for others will
       * be determined at runtime:
       */
      switch (i - VERT_ATTRIB_GENERIC0) {
      case MAT_ATTRIB_FRONT_SHININESS:
      case MAT_ATTRIB_BACK_SHININESS:
	 cl->Size = 1;
	 break;
      case MAT_ATTRIB_FRONT_INDEXES:
      case MAT_ATTRIB_BACK_INDEXES:
	 cl->Size = 3;
	 break;
      default:
	 cl->Size = 4;
	 break;
      }

      cl->Ptr = (const void *)ctx->Light.Material.Attrib[i];
      cl->Type = GL_FLOAT;
      cl->Format = GL_RGBA;
      cl->Stride = 0;
      cl->StrideB = 0;
      cl->Enabled = 1;
      cl->_ElementSize = cl->Size * sizeof(GLfloat);
      _mesa_reference_buffer_object(ctx, &cl->BufferObj,
                                    ctx->Shared->NullBufferObj);
   }
}


GLboolean _vbo_CreateContext( struct gl_context *ctx )
{
   struct vbo_context *vbo = CALLOC_STRUCT(vbo_context);

   ctx->vbo_context = vbo;

   /* Initialize the arrayelt helper
    */
   if (!ctx->aelt_context &&
       !_ae_create_context( ctx )) {
      return GL_FALSE;
   }

   init_legacy_currval( ctx );
   init_generic_currval( ctx );
   init_mat_currval( ctx );

   /* Build mappings from VERT_ATTRIB -> VBO_ATTRIB depending on type
    * of vertex program active.
    */
   {
      GLuint i;

      /* identity mapping */
      for (i = 0; i < Elements(vbo->map_vp_none); i++) 
	 vbo->map_vp_none[i] = i;
      /* map material attribs to generic slots */
      for (i = 0; i < NR_MAT_ATTRIBS; i++) 
	 vbo->map_vp_none[VERT_ATTRIB_GENERIC(i)]
            = VBO_ATTRIB_MAT_FRONT_AMBIENT + i;

      for (i = 0; i < Elements(vbo->map_vp_arb); i++)
	 vbo->map_vp_arb[i] = i;
   }


   /* Hook our functions into exec and compile dispatch tables.  These
    * will pretty much be permanently installed, which means that the
    * vtxfmt mechanism can be removed now.
    */
   vbo_exec_init( ctx );
   if (ctx->API == API_OPENGL_COMPAT)
      vbo_save_init( ctx );

   _math_init_eval();

   return GL_TRUE;
}


void _vbo_InvalidateState( struct gl_context *ctx, GLuint new_state )
{
   vbo_exec_invalidate_state(ctx, new_state);
}


void _vbo_DestroyContext( struct gl_context *ctx )
{
   struct vbo_context *vbo = vbo_context(ctx);

   if (ctx->aelt_context) {
      _ae_destroy_context( ctx );
      ctx->aelt_context = NULL;
   }

   if (vbo) {
      GLuint i;

      for (i = 0; i < VBO_ATTRIB_MAX; i++) {
         _mesa_reference_buffer_object(ctx, &vbo->currval[i].BufferObj, NULL);
      }

      vbo_exec_destroy(ctx);
      if (ctx->API == API_OPENGL_COMPAT)
         vbo_save_destroy(ctx);
      free(vbo);
      ctx->vbo_context = NULL;
   }
}


void vbo_set_draw_func(struct gl_context *ctx, vbo_draw_func func)
{
   struct vbo_context *vbo = vbo_context(ctx);
   vbo->draw_prims = func;
}

@


1.9
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.8
log
@Merge Mesa 9.2.0
@
text
@d25 1
a25 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
d155 1
a155 1
   ctx->swtnl_im = (void *)vbo;
d227 1
a227 1
      ctx->swtnl_im = NULL;
@


1.7
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  6.3
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
a35 4


#define NR_LEGACY_ATTRIBS 16
#define NR_GENERIC_ATTRIBS 16
a37 1

d50 1
a50 1
   struct gl_client_array *arrays = vbo->legacy_currval;
d53 1
a53 1
   memset(arrays, 0, sizeof(*arrays) * NR_LEGACY_ATTRIBS);
d58 1
a58 1
   for (i = 0; i < NR_LEGACY_ATTRIBS; i++) {
d80 1
a80 1
   struct gl_client_array *arrays = vbo->generic_currval;
d83 1
a83 1
   memset(arrays, 0, sizeof(*arrays) * NR_GENERIC_ATTRIBS);
d85 1
a85 1
   for (i = 0; i < NR_GENERIC_ATTRIBS; i++) {
d107 2
a108 1
   struct gl_client_array *arrays = vbo->mat_currval;
a163 6
   /* TODO: remove these pointers.
    */
   vbo->legacy_currval = &vbo->currval[VBO_ATTRIB_POS];
   vbo->generic_currval = &vbo->currval[VBO_ATTRIB_GENERIC0];
   vbo->mat_currval = &vbo->currval[VBO_ATTRIB_MAT_FRONT_AMBIENT];

d174 2
a175 4
      /* When no vertex program, pull in the material attributes in
       * the 16..32 generic range.
       */
      for (i = 0; i < 16; i++) 
d177 5
a181 5
      for (i = 0; i < 12; i++) 
	 vbo->map_vp_none[16+i] = VBO_ATTRIB_MAT_FRONT_AMBIENT + i;
      for (i = 0; i < 4; i++)
	 vbo->map_vp_none[28+i] = i;	
      
d192 1
a192 1
   if (ctx->API == API_OPENGL)
d224 1
a224 1
      if (ctx->API == API_OPENGL)
d226 1
a226 1
      FREE(vbo);
@


1.6
log
@Merge Mesa 7.10.3
@
text
@d75 1
d102 1
d148 1
a214 1
   _ae_invalidate_state(ctx, new_state);
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d52 1
a52 1
static void init_legacy_currval(GLcontext *ctx)
d81 1
a81 1
static void init_generic_currval(GLcontext *ctx)
d107 1
a107 1
static void init_mat_currval(GLcontext *ctx)
d152 1
a152 1
GLboolean _vbo_CreateContext( GLcontext *ctx )
d201 2
a202 3
#if FEATURE_dlist
   vbo_save_init( ctx );
#endif
d210 1
a210 1
void _vbo_InvalidateState( GLcontext *ctx, GLuint new_state )
d217 1
a217 1
void _vbo_DestroyContext( GLcontext *ctx )
d234 2
a235 3
#if FEATURE_dlist
      vbo_save_destroy(ctx);
#endif
d242 1
a242 1
void vbo_set_draw_func(GLcontext *ctx, vbo_draw_func func)
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d31 2
a35 10
/* Reach out and grab this to use as the default:
 */
extern void _tnl_draw_prims( GLcontext *ctx,
			     const struct gl_client_array *arrays[],
			     const struct _mesa_prim *prims,
			     GLuint nr_prims,
			     const struct _mesa_index_buffer *ib,
			     GLuint min_index,
			     GLuint max_index );

d42 1
d51 1
d73 1
d75 2
a76 1
      cl->BufferObj = ctx->Array.NullBufferObj;
d96 1
d101 2
a102 1
      cl->BufferObj = ctx->Array.NullBufferObj;
d142 1
d146 2
a147 1
      cl->BufferObj = ctx->Array.NullBufferObj;
a150 17
#if 0

static void vbo_exec_current_init( struct vbo_exec_context *exec ) 
{
   GLcontext *ctx = exec->ctx;
   GLint i;

   /* setup the pointers for the typical 16 vertex attributes */
   for (i = 0; i < VBO_ATTRIB_FIRST_MATERIAL; i++) 
      exec->vtx.current[i] = ctx->Current.Attrib[i];

   /* setup pointers for the 12 material attributes */
   for (i = 0; i < MAT_ATTRIB_MAX; i++)
      exec->vtx.current[VBO_ATTRIB_FIRST_MATERIAL + i] = 
	 ctx->Light.Material.Attrib[i];
}
#endif
d191 1
a191 1
      for (i = 0; i < VERT_ATTRIB_MAX; i++)
a195 4
   /* By default: 
    */
   vbo->draw_prims = _tnl_draw_prims;

d205 2
d210 1
d220 2
d227 8
a234 1
   vbo_exec_destroy(ctx);
d236 1
a236 1
   vbo_save_destroy(ctx);
d238 3
a240 2
   FREE(vbo_context(ctx));
   ctx->swtnl_im = NULL;
d242 8
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d222 1
d224 1
a225 1
   
d244 1
d246 1
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d28 3
a30 1
#include "mtypes.h"
a32 2
#include "imports.h"
#include "api_arrayelt.h"
d115 2
d142 1
a142 5
      if (i < MAT_ATTRIB_MAX)
	 cl->Ptr = (const void *)ctx->Light.Material.Attrib[i];
      else 
	 cl->Ptr = (const void *)ctx->Current.Attrib[VERT_ATTRIB_GENERIC0 + i];

@


1.1
log
@Initial revision
@
text
@d245 1
@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d28 1
a28 5
#include "main/imports.h"
#include "main/mtypes.h"
#include "main/api_arrayelt.h"
#include "main/bufferobj.h"
#include "math/m_eval.h"
d31 12
a49 1

d58 1
a58 2

static void init_legacy_currval(struct gl_context *ctx)
a78 1
      cl->Format = GL_RGBA;
d80 1
a80 2
      _mesa_reference_buffer_object(ctx, &cl->BufferObj,
                                    ctx->Shared->NullBufferObj);
d85 1
a85 1
static void init_generic_currval(struct gl_context *ctx)
a99 1
      cl->Format = GL_RGBA;
d104 1
a104 2
      _mesa_reference_buffer_object(ctx, &cl->BufferObj,
                                    ctx->Shared->NullBufferObj);
d109 1
a109 1
static void init_mat_currval(struct gl_context *ctx)
a114 2
   ASSERT(NR_MAT_ATTRIBS == MAT_ATTRIB_MAX);

d140 5
a144 1
      cl->Ptr = (const void *)ctx->Light.Material.Attrib[i];
a145 1
      cl->Format = GL_RGBA;
d149 1
a149 2
      _mesa_reference_buffer_object(ctx, &cl->BufferObj,
                                    ctx->Shared->NullBufferObj);
d153 17
d171 1
a171 1
GLboolean _vbo_CreateContext( struct gl_context *ctx )
d210 1
a210 1
      for (i = 0; i < Elements(vbo->map_vp_arb); i++)
d215 4
d224 1
a224 4
   if (ctx->API == API_OPENGL)
      vbo_save_init( ctx );

   _math_init_eval();
d226 1
d230 1
a230 2

void _vbo_InvalidateState( struct gl_context *ctx, GLuint new_state )
d237 1
a237 1
void _vbo_DestroyContext( struct gl_context *ctx )
a238 2
   struct vbo_context *vbo = vbo_context(ctx);

d244 3
a246 13
   if (vbo) {
      GLuint i;

      for (i = 0; i < VBO_ATTRIB_MAX; i++) {
         _mesa_reference_buffer_object(ctx, &vbo->currval[i].BufferObj, NULL);
      }

      vbo_exec_destroy(ctx);
      if (ctx->API == API_OPENGL)
         vbo_save_destroy(ctx);
      FREE(vbo);
      ctx->swtnl_im = NULL;
   }
a247 8


void vbo_set_draw_func(struct gl_context *ctx, vbo_draw_func func)
{
   struct vbo_context *vbo = vbo_context(ctx);
   vbo->draw_prims = func;
}

@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d36 4
d42 1
d55 1
a55 1
   struct gl_client_array *arrays = &vbo->currval[VBO_ATTRIB_POS];
d58 1
a58 1
   memset(arrays, 0, sizeof(*arrays) * VERT_ATTRIB_FF_MAX);
d63 1
a63 1
   for (i = 0; i < VERT_ATTRIB_FF_MAX; i++) {
a74 1
      cl->_ElementSize = cl->Size * sizeof(GLfloat);
d84 1
a84 1
   struct gl_client_array *arrays = &vbo->currval[VBO_ATTRIB_GENERIC0];
d87 1
a87 1
   memset(arrays, 0, sizeof(*arrays) * VERT_ATTRIB_GENERIC_MAX);
d89 1
a89 1
   for (i = 0; i < VERT_ATTRIB_GENERIC_MAX; i++) {
a100 1
      cl->_ElementSize = cl->Size * sizeof(GLfloat);
d110 1
a110 2
   struct gl_client_array *arrays =
      &vbo->currval[VBO_ATTRIB_MAT_FRONT_AMBIENT];
a145 1
      cl->_ElementSize = cl->Size * sizeof(GLfloat);
d165 6
d181 4
a184 2
      /* identity mapping */
      for (i = 0; i < Elements(vbo->map_vp_none); i++) 
d186 5
a190 5
      /* map material attribs to generic slots */
      for (i = 0; i < NR_MAT_ATTRIBS; i++) 
	 vbo->map_vp_none[VERT_ATTRIB_GENERIC(i)]
            = VBO_ATTRIB_MAT_FRONT_AMBIENT + i;

d201 1
a201 1
   if (ctx->API == API_OPENGL_COMPAT)
d212 1
d234 1
a234 1
      if (ctx->API == API_OPENGL_COMPAT)
d236 1
a236 1
      free(vbo);
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d25 1
a25 1
 *    Keith Whitwell <keithw@@vmware.com>
d155 1
a155 1
   ctx->vbo_context = vbo;
d227 1
a227 1
      ctx->vbo_context = NULL;
@


