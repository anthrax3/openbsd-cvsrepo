head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.06.59;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.21;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.46;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.37;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.43;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.17.32.26;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.32.26;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.50;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.17.47;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.14;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@
/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keithw@@vmware.com>
 */


#include "main/mtypes.h"
#include "main/macros.h"
#include "main/enums.h"
#include "main/glformats.h"
#include "vbo_split.h"


#define MAX_PRIM 32

/* Used for splitting without copying. No attempt is made to handle
 * too large indexed vertex buffers: In general you need to copy to do
 * that.
 */
struct split_context {
   struct gl_context *ctx;
   const struct gl_client_array **array;
   const struct _mesa_prim *prim;
   GLuint nr_prims;
   const struct _mesa_index_buffer *ib;
   GLuint min_index;
   GLuint max_index;
   vbo_draw_func draw;

   const struct split_limits *limits;
   GLuint limit;

   struct _mesa_prim dstprim[MAX_PRIM];
   GLuint dstprim_nr;
};




static void flush_vertex( struct split_context *split )
{
   struct gl_context *ctx = split->ctx;
   const struct gl_client_array **saved_arrays = ctx->Array._DrawArrays;
   struct _mesa_index_buffer ib;
   GLuint i;

   if (!split->dstprim_nr) 
      return;

   if (split->ib) {
      ib = *split->ib;

      ib.count = split->max_index - split->min_index + 1;
      ib.ptr = (const void *)((const char *)ib.ptr + 
                              split->min_index * _mesa_sizeof_type(ib.type));

      /* Rebase the primitives to save index buffer entries. */
      for (i = 0; i < split->dstprim_nr; i++)
	 split->dstprim[i].start -= split->min_index;
   }

   assert(split->max_index >= split->min_index);

   ctx->Array._DrawArrays = split->array;
   ctx->NewDriverState |= ctx->DriverFlags.NewArray;

   split->draw(ctx,
	       split->dstprim,
	       split->dstprim_nr,
	       split->ib ? &ib : NULL,
	       !split->ib,
	       split->min_index,
	       split->max_index,
	       NULL, NULL);

   ctx->Array._DrawArrays = saved_arrays;
   ctx->NewDriverState |= ctx->DriverFlags.NewArray;

   split->dstprim_nr = 0;
   split->min_index = ~0;
   split->max_index = 0;
}


static struct _mesa_prim *next_outprim( struct split_context *split )
{
   if (split->dstprim_nr == MAX_PRIM-1) {
      flush_vertex(split);
   }

   {
      struct _mesa_prim *prim = &split->dstprim[split->dstprim_nr++];
      memset(prim, 0, sizeof(*prim));
      return prim;
   }
}

static void update_index_bounds(struct split_context *split,
				const struct _mesa_prim *prim)
{
   split->min_index = MIN2(split->min_index, prim->start);
   split->max_index = MAX2(split->max_index, prim->start + prim->count - 1);
}

/* Return the maximum amount of vertices that can be emitted for a
 * primitive starting at 'prim->start', depending on the previous
 * index bounds.
 */
static GLuint get_max_vertices(struct split_context *split,
			       const struct _mesa_prim *prim)
{
   if ((prim->start > split->min_index &&
	prim->start - split->min_index >= split->limit) ||
       (prim->start < split->max_index &&
        split->max_index - prim->start >= split->limit))
      /* "prim" starts too far away from the old range. */
      return 0;

   return MIN2(split->min_index, prim->start) + split->limit - prim->start;
}

/* Break large primitives into smaller ones.  If not possible, convert
 * the primitive to indexed and pass to split_elts().
 */
static void split_prims( struct split_context *split) 
{
   GLuint i;

   for (i = 0; i < split->nr_prims; i++) {
      const struct _mesa_prim *prim = &split->prim[i];
      GLuint first, incr;
      GLboolean split_inplace = split_prim_inplace(prim->mode, &first, &incr);
      GLuint available = get_max_vertices(split, prim);
      GLuint count = prim->count - (prim->count - first) % incr;

      if (prim->count < first)
	 continue;

      if ((available < count && !split_inplace) ||
	  (available < first && split_inplace)) {
	 flush_vertex(split);
	 available = get_max_vertices(split, prim);
      }
      
      if (available >= count) {
	 struct _mesa_prim *outprim = next_outprim(split);

	 *outprim = *prim;
	 update_index_bounds(split, outprim);
      }
      else if (split_inplace) {
	 GLuint j, nr;

	 for (j = 0 ; j < count ; ) {
	    GLuint remaining = count - j;
	    struct _mesa_prim *outprim = next_outprim(split);

	    nr = MIN2( available, remaining );
	    nr -= (nr - first) % incr;

	    outprim->mode = prim->mode;
	    outprim->begin = (j == 0 && prim->begin);
	    outprim->end = (nr == remaining && prim->end);
	    outprim->start = prim->start + j;
	    outprim->count = nr;
            outprim->num_instances = prim->num_instances;
            outprim->base_instance = prim->base_instance;

	    update_index_bounds(split, outprim);

	    if (nr == remaining) {
	       /* Finished. 
		*/
	       j += nr;
	    }
	    else {
	       /* Wrapped the primitive: 
		*/
	       j += nr - (first - incr);
	       flush_vertex(split);
	       available = get_max_vertices(split, prim);
	    }
	 }
      }
      else if (split->ib == NULL) {
	 /* XXX: could at least send the first max_verts off from the
	  * inplace buffers.
	  */

	 /* else convert to indexed primitive and pass to split_elts,
	  * which will do the necessary copying and turn it back into a
	  * vertex primitive for rendering...
	  */
	 struct _mesa_index_buffer ib;
	 struct _mesa_prim tmpprim;
	 GLuint *elts = malloc(count * sizeof(GLuint));
	 GLuint j;
	 
	 for (j = 0; j < count; j++)
	    elts[j] = prim->start + j;

	 ib.count = count;
	 ib.type = GL_UNSIGNED_INT;
	 ib.obj = split->ctx->Shared->NullBufferObj;
	 ib.ptr = elts;

	 tmpprim = *prim;
	 tmpprim.indexed = 1;
	 tmpprim.start = 0;
	 tmpprim.count = count;
         tmpprim.num_instances = 1;
         tmpprim.base_instance = 0;

	 flush_vertex(split);

	 vbo_split_copy(split->ctx,
			split->array,
			&tmpprim, 1, 
			&ib,
			split->draw,
			split->limits);
	    
	 free(elts);
      }
      else {
	 flush_vertex(split);

	 vbo_split_copy(split->ctx,
			split->array,
			prim, 1, 
			split->ib,
			split->draw,
			split->limits);
      }
   }

   flush_vertex(split);
}


void vbo_split_inplace( struct gl_context *ctx,
			const struct gl_client_array *arrays[],
			const struct _mesa_prim *prim,
			GLuint nr_prims,
			const struct _mesa_index_buffer *ib,
			GLuint min_index,
			GLuint max_index,
			vbo_draw_func draw,
			const struct split_limits *limits )
{
   struct split_context split;

   memset(&split, 0, sizeof(split));

   split.ctx = ctx;
   split.array = arrays;
   split.prim = prim;
   split.nr_prims = nr_prims;
   split.ib = ib;

   /* Empty interval, makes calculations simpler. */
   split.min_index = ~0;
   split.max_index = 0;

   split.draw = draw;
   split.limits = limits;
   split.limit = ib ? limits->max_indices : limits->max_verts;

   split_prims( &split );
}


@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.7
log
@Merge Mesa 9.2.0
@
text
@d26 1
a26 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
d97 1
a97 1
	       NULL);
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a3 1
 * Version:  6.5
d20 4
a23 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d33 1
a33 1
#include "main/image.h"
d65 2
d87 4
a90 2
   split->draw(split->ctx,
	       split->array,
d96 5
a100 1
	       split->max_index);
d183 1
a183 1
	    
d190 1
d229 1
a229 1
	    
d235 1
@


1.5
log
@Merge Mesa 7.10.3
@
text
@d181 1
d225 1
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d44 1
a44 1
   GLcontext *ctx;
d252 1
a252 1
void vbo_split_inplace( GLcontext *ctx,
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d33 1
d39 3
a41 1
/* Used for splitting without copying.
d54 1
d65 2
a66 1
   GLuint min_index, max_index;
d72 1
a72 24
      /* This should basically be multipass rendering over the same
       * unchanging set of VBO's.  Would like the driver not to
       * re-upload the data, or swtnl not to re-transform the
       * vertices.
       */
      assert(split->max_index - split->min_index < split->limits->max_verts);
      min_index = split->min_index;
      max_index = split->max_index;
   }
   else {
      /* Non-indexed rendering.  Cannot assume that the primitives are
       * ordered by increasing vertex, because of entrypoints like
       * MultiDrawArrays.
       */
      GLuint i;
      min_index = split->dstprim[0].start;
      max_index = min_index + split->dstprim[0].count - 1;

      for (i = 1; i < split->dstprim_nr; i++) {
	 GLuint tmp_min = split->dstprim[i].start;
	 GLuint tmp_max = tmp_min + split->dstprim[i].count - 1;

	 if (tmp_min < min_index) 
	    min_index = tmp_min;
d74 7
a80 3
	 if (tmp_max > max_index) 
	    max_index = tmp_max;
      }
d83 1
a83 1
   assert(max_index >= min_index);
d85 8
a92 7
   split->draw( split->ctx, 
		split->array, 
		split->dstprim,
		split->dstprim_nr,
		NULL,
		min_index,
		max_index);
d95 2
d113 2
a114 1
static int align(int value, int alignment)
d116 2
a117 1
   return (value + alignment - 1) & ~(alignment - 1);
d120 13
d134 2
a141 1
   GLuint csr = 0;
d148 2
a149 7
      GLuint count;

      /* Always wrap on an even numbered vertex to avoid problems with
       * triangle strips.  
       */
      GLuint available = align(split->limits->max_verts - csr - 1, 2); 
      assert(split->limits->max_verts >= csr);
a152 3
      
      count = prim->count - (prim->count - first) % incr; 

d154 1
a154 1
      if ((available < count && !split_inplace) || 
d157 1
a157 2
	 csr = 0;
	 available = align(split->limits->max_verts - csr - 1, 2);
d162 1
d164 2
a165 3
	 csr += prim->count;
	 available = align(split->limits->max_verts - csr - 1, 2); 
      } 
a168 1

a173 1
	    
d181 3
a183 1
	    
d187 1
a187 3
	       j += nr;		
	       csr += nr;
	       available = align(split->limits->max_verts - csr - 1, 2); 
d194 1
a194 2
	       csr = 0;
	       available = align(split->limits->max_verts - csr - 1, 2); 
d217 1
a217 1
	 ib.obj = split->ctx->Array.NullBufferObj;
d271 5
a275 2
   split.min_index = min_index;
   split.max_index = max_index;
d278 1
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d61 1
a61 1
   GLint min_index, max_index;
@


1.1
log
@Initial revision
@
text
@d30 3
a32 3
#include "mtypes.h"
#include "macros.h"
#include "enums.h"
@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d30 3
a32 4
#include "main/mtypes.h"
#include "main/macros.h"
#include "main/enums.h"
#include "main/image.h"
d38 1
a38 3
/* Used for splitting without copying. No attempt is made to handle
 * too large indexed vertex buffers: In general you need to copy to do
 * that.
d41 1
a41 1
   struct gl_context *ctx;
a50 1
   GLuint limit;
d61 1
a61 2
   struct _mesa_index_buffer ib;
   GLuint i;
d67 24
a90 1
      ib = *split->ib;
d92 3
a94 7
      ib.count = split->max_index - split->min_index + 1;
      ib.ptr = (const void *)((const char *)ib.ptr + 
                              split->min_index * _mesa_sizeof_type(ib.type));

      /* Rebase the primitives to save index buffer entries. */
      for (i = 0; i < split->dstprim_nr; i++)
	 split->dstprim[i].start -= split->min_index;
d97 1
a97 1
   assert(split->max_index >= split->min_index);
d99 7
a105 8
   split->draw(split->ctx,
	       split->array,
	       split->dstprim,
	       split->dstprim_nr,
	       split->ib ? &ib : NULL,
	       !split->ib,
	       split->min_index,
	       split->max_index);
a107 2
   split->min_index = ~0;
   split->max_index = 0;
d124 1
a124 2
static void update_index_bounds(struct split_context *split,
				const struct _mesa_prim *prim)
d126 1
a126 2
   split->min_index = MIN2(split->min_index, prim->start);
   split->max_index = MAX2(split->max_index, prim->start + prim->count - 1);
a128 13
/* Return the maximum amount of vertices that can be emitted for a
 * primitive starting at 'prim->start', depending on the previous
 * index bounds.
 */
static GLuint get_max_vertices(struct split_context *split,
			       const struct _mesa_prim *prim)
{
   if ((prim->start > split->min_index &&
	prim->start - split->min_index >= split->limit) ||
       (prim->start < split->max_index &&
        split->max_index - prim->start >= split->limit))
      /* "prim" starts too far away from the old range. */
      return 0;
a129 2
   return MIN2(split->min_index, prim->start) + split->limit - prim->start;
}
d136 1
d143 7
a149 2
      GLuint available = get_max_vertices(split, prim);
      GLuint count = prim->count - (prim->count - first) % incr;
d153 3
d157 1
a157 1
      if ((available < count && !split_inplace) ||
d160 2
a161 1
	 available = get_max_vertices(split, prim);
a165 1

d167 3
a169 2
	 update_index_bounds(split, outprim);
      }
d173 1
d179 1
d187 1
a187 3

	    update_index_bounds(split, outprim);

d191 3
a193 1
	       j += nr;
d200 2
a201 1
	       available = get_max_vertices(split, prim);
d224 1
a224 1
	 ib.obj = split->ctx->Shared->NullBufferObj;
d259 1
a259 1
void vbo_split_inplace( struct gl_context *ctx,
d278 2
a279 5

   /* Empty interval, makes calculations simpler. */
   split.min_index = ~0;
   split.max_index = 0;

a281 1
   split.limit = ib ? limits->max_indices : limits->max_verts;
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d4 1
d21 3
a23 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d33 1
a33 1
#include "main/glformats.h"
a64 2
   struct gl_context *ctx = split->ctx;
   const struct gl_client_array **saved_arrays = ctx->Array._DrawArrays;
d85 2
a86 4
   ctx->Array._DrawArrays = split->array;
   ctx->NewDriverState |= ctx->DriverFlags.NewArray;

   split->draw(ctx,
d92 1
a92 5
	       split->max_index,
	       NULL);

   ctx->Array._DrawArrays = saved_arrays;
   ctx->NewDriverState |= ctx->DriverFlags.NewArray;
d175 1
a175 1

a180 2
            outprim->num_instances = prim->num_instances;
            outprim->base_instance = prim->base_instance;
d219 1
a219 1

a223 2
         tmpprim.num_instances = 1;
         tmpprim.base_instance = 0;
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d26 1
a26 1
 *    Keith Whitwell <keithw@@vmware.com>
d97 1
a97 1
	       NULL, NULL);
@


