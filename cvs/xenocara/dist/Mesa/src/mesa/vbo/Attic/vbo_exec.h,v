head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.06.58;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.46;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.37;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.23;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.49;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.17.32.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.32.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.50;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.17.44;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.14;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************

Copyright 2002 VMware, Inc.

All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
on the rights to use, copy, modify, merge, publish, distribute, sub
license, and/or sell copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice (including the next
paragraph) shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
VMWARE AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

/*
 * Authors:
 *   Keith Whitwell <keithw@@vmware.com>
 *
 */

#ifndef __VBO_EXEC_H__
#define __VBO_EXEC_H__

#include "main/mtypes.h"
#include "vbo.h"
#include "vbo_attrib.h"


/**
 * Max number of primitives (number of glBegin/End pairs) per VBO.
 */
#define VBO_MAX_PRIM 64


/**
 * Size of the VBO to use for glBegin/glVertex/glEnd-style rendering.
 */
#define VBO_VERT_BUFFER_SIZE (1024*64)	/* bytes */


/** Current vertex program mode */
enum vp_mode {
   VP_NONE,   /**< fixed function */
   VP_ARB     /**< ARB vertex program or GLSL vertex shader */
};


struct vbo_exec_eval1_map {
   struct gl_1d_map *map;
   GLuint sz;
};

struct vbo_exec_eval2_map {
   struct gl_2d_map *map;
   GLuint sz;
};



struct vbo_exec_copied_vtx {
   GLfloat buffer[VBO_ATTRIB_MAX * 4 * VBO_MAX_COPIED_VERTS];
   GLuint nr;
};


struct vbo_exec_context
{
   struct gl_context *ctx;   
   GLvertexformat vtxfmt;
   GLvertexformat vtxfmt_noop;
   GLboolean validating; /**< if we're in the middle of state validation */

   struct {
      struct gl_buffer_object *bufferobj;

      GLuint vertex_size;       /* in dwords */

      struct _mesa_prim prim[VBO_MAX_PRIM];
      GLuint prim_count;

      GLfloat *buffer_map;
      GLfloat *buffer_ptr;              /* cursor, points into buffer */
      GLuint   buffer_used;             /* in bytes */
      GLfloat vertex[VBO_ATTRIB_MAX*4]; /* current vertex */

      GLuint vert_count;
      GLuint max_vert;
      struct vbo_exec_copied_vtx copied;

      GLubyte attrsz[VBO_ATTRIB_MAX];
      GLenum attrtype[VBO_ATTRIB_MAX];
      GLubyte active_sz[VBO_ATTRIB_MAX];

      GLfloat *attrptr[VBO_ATTRIB_MAX]; 
      struct gl_client_array arrays[VERT_ATTRIB_MAX];

      /* According to program mode, the values above plus current
       * values are squashed down to the 32 attributes passed to the
       * vertex program below:
       */
      const struct gl_client_array *inputs[VERT_ATTRIB_MAX];
   } vtx;

   
   struct {
      GLboolean recalculate_maps;
      struct vbo_exec_eval1_map map1[VERT_ATTRIB_MAX];
      struct vbo_exec_eval2_map map2[VERT_ATTRIB_MAX];
   } eval;

   struct {
      /* Arrays and current values manipulated according to program
       * mode, etc.  These are the attributes as seen by vertex
       * programs:
       */
      const struct gl_client_array *inputs[VERT_ATTRIB_MAX];
      GLboolean recalculate_inputs;
   } array;

   /* Which flags to set in vbo_exec_BeginVertices() */
   GLbitfield begin_vertices_flags;

#ifdef DEBUG
   GLint flush_call_depth;
#endif
};



/* External API:
 */
void vbo_exec_init( struct gl_context *ctx );
void vbo_exec_destroy( struct gl_context *ctx );
void vbo_exec_invalidate_state( struct gl_context *ctx, GLuint new_state );

void vbo_exec_BeginVertices( struct gl_context *ctx );
void vbo_exec_FlushVertices( struct gl_context *ctx, GLuint flags );


/* Internal functions:
 */

void vbo_exec_vtx_init( struct vbo_exec_context *exec );
void vbo_exec_vtx_destroy( struct vbo_exec_context *exec );


void vbo_exec_vtx_flush( struct vbo_exec_context *exec, GLboolean unmap );
void vbo_exec_vtx_map( struct vbo_exec_context *exec );


void vbo_exec_vtx_wrap( struct vbo_exec_context *exec );

void vbo_exec_eval_update( struct vbo_exec_context *exec );

void vbo_exec_do_EvalCoord2f( struct vbo_exec_context *exec, 
				     GLfloat u, GLfloat v );

void vbo_exec_do_EvalCoord1f( struct vbo_exec_context *exec,
				     GLfloat u);

#endif
@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.7
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
Copyright 2002 Tungsten Graphics Inc., Cedar Park, Texas.
d21 1
a21 1
TUNGSTEN GRAPHICS AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
d30 1
a30 1
 *   Keith Whitwell <keith@@tungstengraphics.com>
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a36 1
#include "main/mfeatures.h"
a56 1
   VP_NV,     /**< NV vertex program */
a78 3
typedef void (*vbo_attrfv_func)( const GLfloat * );


d83 2
d104 1
a113 2
      enum vp_mode program_mode;
      GLuint enabled_flags;
a124 10
      enum vp_mode program_mode;
      GLuint enabled_flags;
      GLuint array_obj;

      /* These just mirror the current arrayobj (todo: make arrayobj
       * look like this and remove the mirror):
       */
      const struct gl_client_array *legacy_array[16];
      const struct gl_client_array *generic_array[16];

d130 1
a154 3
void vbo_exec_array_init( struct vbo_exec_context *exec );
void vbo_exec_array_destroy( struct vbo_exec_context *exec );

a158 1
#if FEATURE_beginend
a162 13
#else /* FEATURE_beginend */

static INLINE void
vbo_exec_vtx_flush( struct vbo_exec_context *exec, GLboolean unmap )
{
}

static INLINE void
vbo_exec_vtx_map( struct vbo_exec_context *exec )
{
}

#endif /* FEATURE_beginend */
@


1.5
log
@Merge Mesa 7.10.3
@
text
@d37 1
d43 3
d48 3
a50 1
/* Wierd implementation stuff:
a52 2
#define VBO_MAX_ATTR_CODEGEN 16 
#define ERROR_ATTRIB 16
d146 3
a160 1
void vbo_exec_FlushVertices_internal( struct gl_context *ctx, GLboolean unmap );
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d82 1
a82 1
   GLcontext *ctx;   
d151 4
a154 4
void vbo_exec_init( GLcontext *ctx );
void vbo_exec_destroy( GLcontext *ctx );
void vbo_exec_invalidate_state( GLcontext *ctx, GLuint new_state );
void vbo_exec_FlushVertices_internal( GLcontext *ctx, GLboolean unmap );
d156 2
a157 2
void vbo_exec_BeginVertices( GLcontext *ctx );
void vbo_exec_FlushVertices( GLcontext *ctx, GLuint flags );
a196 3

extern GLboolean 
vbo_validate_shaders(GLcontext *ctx);
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d46 1
a46 1
#define VBO_VERT_BUFFER_SIZE (1024*16)	/* dwords == 64k */
d51 6
a86 1
      GLubyte *buffer_map;
d88 1
a88 1
      GLuint vertex_size;
d93 3
a95 1
      GLfloat *vbptr;		     /* cursor, points into buffer */
d106 1
a106 1
      struct gl_client_array arrays[VBO_ATTRIB_MAX];
d112 1
a112 1
      GLuint program_mode;
d125 1
a125 1
      GLuint program_mode;
d141 4
d154 3
d168 20
a187 1
void vbo_exec_vtx_flush( struct vbo_exec_context *exec );
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d37 1
a37 1
#include "mtypes.h"
@


1.1
log
@Initial revision
@
text
@d165 3
@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d37 1
a37 1
#include "main/mtypes.h"
d46 1
a46 1
#define VBO_VERT_BUFFER_SIZE (1024*64)	/* bytes */
a50 6
/** Current vertex program mode */
enum vp_mode {
   VP_NONE,   /**< fixed function */
   VP_NV,     /**< NV vertex program */
   VP_ARB     /**< ARB vertex program or GLSL vertex shader */
};
d76 1
a76 1
   struct gl_context *ctx;   
d81 1
d83 1
a83 1
      GLuint vertex_size;       /* in dwords */
d88 1
a88 3
      GLfloat *buffer_map;
      GLfloat *buffer_ptr;              /* cursor, points into buffer */
      GLuint   buffer_used;             /* in bytes */
d99 1
a99 1
      struct gl_client_array arrays[VERT_ATTRIB_MAX];
d105 1
a105 1
      enum vp_mode program_mode;
d118 1
a118 1
      enum vp_mode program_mode;
a133 4

#ifdef DEBUG
   GLint flush_call_depth;
#endif
d140 4
a143 7
void vbo_exec_init( struct gl_context *ctx );
void vbo_exec_destroy( struct gl_context *ctx );
void vbo_exec_invalidate_state( struct gl_context *ctx, GLuint new_state );
void vbo_exec_FlushVertices_internal( struct gl_context *ctx, GLboolean unmap );

void vbo_exec_BeginVertices( struct gl_context *ctx );
void vbo_exec_FlushVertices( struct gl_context *ctx, GLuint flags );
d154 1
a154 20

#if FEATURE_beginend

void vbo_exec_vtx_flush( struct vbo_exec_context *exec, GLboolean unmap );
void vbo_exec_vtx_map( struct vbo_exec_context *exec );

#else /* FEATURE_beginend */

static INLINE void
vbo_exec_vtx_flush( struct vbo_exec_context *exec, GLboolean unmap )
{
}

static INLINE void
vbo_exec_vtx_map( struct vbo_exec_context *exec )
{
}

#endif /* FEATURE_beginend */

@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@a41 3
/**
 * Max number of primitives (number of glBegin/End pairs) per VBO.
 */
d44 1
a44 3

/**
 * Size of the VBO to use for glBegin/glVertex/glEnd-style rendering.
d47 2
d54 1
d77 3
a83 2
   GLvertexformat vtxfmt_noop;
   GLboolean validating; /**< if we're in the middle of state validation */
a102 1
      GLenum attrtype[VBO_ATTRIB_MAX];
d112 2
d125 10
a139 1
      GLboolean recalculate_inputs;
a141 3
   /* Which flags to set in vbo_exec_BeginVertices() */
   GLbitfield begin_vertices_flags;

d154 1
d162 3
d169 1
d174 13
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
Copyright 2002 VMware, Inc.
d21 1
a21 1
VMWARE AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
d30 1
a30 1
 *   Keith Whitwell <keithw@@vmware.com>
@


