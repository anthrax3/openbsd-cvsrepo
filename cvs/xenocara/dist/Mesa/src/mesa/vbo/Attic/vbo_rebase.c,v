head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.6;
commitid	WPD6rgPryPkvXOr9;

1.6
date	2013.09.05.14.06.59;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.46;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.17.32.25;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.32.25;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.50;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.17.46;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.14;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@
/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keithw@@vmware.com>
 */

/* Helper for drivers which find themselves rendering a range of
 * indices starting somewhere above zero.  Typically the application
 * is issuing multiple DrawArrays() or DrawElements() to draw
 * successive primitives layed out linearly in the vertex arrays.
 * Unless the vertex arrays are all in a VBO, the OpenGL semantics
 * imply that we need to re-upload the vertex data on each draw call.
 * In that case, we want to avoid starting the upload at zero, as it
 * will mean every draw call uploads an increasing amount of not-used
 * vertex data.  Worse - in the software tnl module, all those
 * vertices will be transformed and lit.
 *
 * If we just upload the new data, however, the indices will be
 * incorrect as we tend to upload each set of vertex data to a new
 * region.  
 *
 * This file provides a helper to adjust the arrays, primitives and
 * indices of a draw call so that it can be re-issued with a min_index
 * of zero.
 */

#include "main/glheader.h"
#include "main/imports.h"
#include "main/mtypes.h"

#include "vbo.h"


#define REBASE(TYPE) 						\
static void *rebase_##TYPE( const void *ptr,			\
			  GLuint count, 			\
			  TYPE min_index )			\
{								\
   GLuint i;							\
   const TYPE *in = (TYPE *)ptr;				\
   TYPE *tmp_indices = malloc(count * sizeof(TYPE));		\
								\
   if (tmp_indices == NULL) {                                   \
      _mesa_error_no_memory(__func__);                          \
      return NULL;                                              \
   }                                                            \
								\
   for (i = 0; i < count; i++)  				\
      tmp_indices[i] = in[i] - min_index;			\
								\
   return (void *)tmp_indices;					\
}


REBASE(GLuint)
REBASE(GLushort)
REBASE(GLubyte)

GLboolean vbo_all_varyings_in_vbos( const struct gl_client_array *arrays[] )
{
   GLuint i;
   
   for (i = 0; i < VERT_ATTRIB_MAX; i++)
      if (arrays[i]->StrideB &&
	  arrays[i]->BufferObj->Name == 0)
	 return GL_FALSE;

   return GL_TRUE;
}

GLboolean vbo_any_varyings_in_vbos( const struct gl_client_array *arrays[] )
{
   GLuint i;

   for (i = 0; i < VERT_ATTRIB_MAX; i++)
      if (arrays[i]->BufferObj->Name != 0)
	 return GL_TRUE;

   return GL_FALSE;
}

/* Adjust primitives, indices and vertex definitions so that min_index
 * becomes zero. There are lots of reasons for wanting to do this, eg:
 *
 * Software tnl:
 *    - any time min_index != 0, otherwise unused vertices lower than
 *      min_index will be transformed.
 *
 * Hardware tnl:
 *    - if ib != NULL and min_index != 0, otherwise vertices lower than 
 *      min_index will be uploaded.  Requires adjusting index values.
 *
 *    - if ib == NULL and min_index != 0, just for convenience so this doesn't
 *      have to be handled within the driver.
 *
 * Hardware tnl with VBO support:
 *    - as above, but only when vertices are not (all?) in VBO's.
 *    - can't save time by trying to upload half a vbo - typically it is
 *      all or nothing.
 */
void vbo_rebase_prims( struct gl_context *ctx,
		       const struct gl_client_array *arrays[],
		       const struct _mesa_prim *prim,
		       GLuint nr_prims,
		       const struct _mesa_index_buffer *ib,
		       GLuint min_index,
		       GLuint max_index,
		       vbo_draw_func draw )
{
   struct gl_client_array tmp_arrays[VERT_ATTRIB_MAX];
   const struct gl_client_array *tmp_array_pointers[VERT_ATTRIB_MAX];

   struct _mesa_index_buffer tmp_ib;
   struct _mesa_prim *tmp_prims = NULL;
   const struct gl_client_array **saved_arrays = ctx->Array._DrawArrays;
   void *tmp_indices = NULL;
   GLuint i;

   assert(min_index != 0);

   if (0)
      printf("%s %d..%d\n", __FUNCTION__, min_index, max_index);


   /* XXX this path is disabled for now.
    * There's rendering corruption in some apps when it's enabled.
    */
   if (0 && ib && ctx->Extensions.ARB_draw_elements_base_vertex) {
      /* If we can just tell the hardware or the TNL to interpret our
       * indices with a different base, do so.
       */
      tmp_prims = malloc(sizeof(*prim) * nr_prims);

      if (tmp_prims == NULL) {
         _mesa_error_no_memory(__func__);
         return;
      }

      for (i = 0; i < nr_prims; i++) {
	 tmp_prims[i] = prim[i];
	 tmp_prims[i].basevertex -= min_index;
      }

      prim = tmp_prims;
   } else if (ib) {
      /* Unfortunately need to adjust each index individually.
       */
      GLboolean map_ib = ib->obj->Name &&
                         !ib->obj->Mappings[MAP_INTERNAL].Pointer;
      void *ptr;

      if (map_ib) 
	 ctx->Driver.MapBufferRange(ctx, 0, ib->obj->Size, GL_MAP_READ_BIT,
				    ib->obj, MAP_INTERNAL);


      ptr = ADD_POINTERS(ib->obj->Mappings[MAP_INTERNAL].Pointer, ib->ptr);

      /* Some users might prefer it if we translated elements to
       * GLuints here.  Others wouldn't...
       */
      switch (ib->type) {
      case GL_UNSIGNED_INT: 
	 tmp_indices = rebase_GLuint( ptr, ib->count, min_index );
	 break;
      case GL_UNSIGNED_SHORT: 
	 tmp_indices = rebase_GLushort( ptr, ib->count, min_index );
	 break;
      case GL_UNSIGNED_BYTE: 
	 tmp_indices = rebase_GLubyte( ptr, ib->count, min_index );
	 break;
      }      

      if (map_ib) 
	 ctx->Driver.UnmapBuffer(ctx, ib->obj, MAP_INTERNAL);

      if (tmp_indices == NULL) {
         return;
      }

      tmp_ib.obj = ctx->Shared->NullBufferObj;
      tmp_ib.ptr = tmp_indices;
      tmp_ib.count = ib->count;
      tmp_ib.type = ib->type;

      ib = &tmp_ib;
   }
   else {
      /* Otherwise the primitives need adjustment.
       */
      tmp_prims = malloc(sizeof(*prim) * nr_prims);

      if (tmp_prims == NULL) {
         _mesa_error_no_memory(__func__);
         return;
      }

      for (i = 0; i < nr_prims; i++) {
	 /* If this fails, it could indicate an application error:
	  */
	 assert(prim[i].start >= min_index);

	 tmp_prims[i] = prim[i];
	 tmp_prims[i].start -= min_index;
      }

      prim = tmp_prims;
   }

   /* Just need to adjust the pointer values on each incoming array.
    * This works for VBO and non-vbo rendering and shouldn't pesimize
    * VBO-based upload schemes.  However this may still not be a fast
    * path for hardware tnl for VBO based rendering as most machines
    * will be happier if you just specify a starting vertex value in
    * each primitive.
    *
    * For drivers with hardware tnl, you only want to do this if you
    * are forced to, eg non-VBO indexed rendering with start != 0.
    */
   for (i = 0; i < VERT_ATTRIB_MAX; i++) {
      tmp_arrays[i] = *arrays[i];
      tmp_arrays[i].Ptr += min_index * tmp_arrays[i].StrideB;
      tmp_array_pointers[i] = &tmp_arrays[i];
   }
   
   /* Re-issue the draw call.
    */
   ctx->Array._DrawArrays = tmp_array_pointers;
   ctx->NewDriverState |= ctx->DriverFlags.NewArray;

   draw( ctx, 
	 prim,
	 nr_prims, 
	 ib, 
	 GL_TRUE,
	 0, 
	 max_index - min_index,
	 NULL, NULL );

   ctx->Array._DrawArrays = saved_arrays;
   ctx->NewDriverState |= ctx->DriverFlags.NewArray;
   
   free(tmp_indices);
   
   free(tmp_prims);
}



@


1.7
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.6
log
@Merge Mesa 9.2.0
@
text
@d26 1
a26 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
d61 1
d63 6
a68 2
   TYPE *tmp_indices = malloc(count * sizeof(TYPE));	\
   GLuint i;							\
d156 5
d170 2
a171 1
      GLboolean map_ib = ib->obj->Name && !ib->obj->Pointer;
d176 1
a176 1
				    ib->obj);
d179 1
a179 1
      ptr = ADD_POINTERS(ib->obj->Pointer, ib->ptr);
d197 5
a201 1
	 ctx->Driver.UnmapBuffer(ctx, ib->obj);
d215 5
d260 1
a260 1
	 NULL );
@


1.5
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a3 1
 * Version:  6.5
d20 4
a23 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d81 2
a82 1
      if (arrays[i]->BufferObj->Name == 0)
d132 1
d149 1
a149 1
      tmp_prims = (struct _mesa_prim *)malloc(sizeof(*prim) * nr_prims);
d164 2
a165 4
	 ctx->Driver.MapBuffer(ctx, 
			       GL_ELEMENT_ARRAY_BUFFER,
			       GL_READ_ONLY_ARB,
			       ib->obj);
d186 1
a186 3
	 ctx->Driver.UnmapBuffer(ctx, 
				 GL_ELEMENT_ARRAY_BUFFER,
				 ib->obj);
d198 1
a198 1
      tmp_prims = (struct _mesa_prim *)malloc(sizeof(*prim) * nr_prims);
d230 3
d234 1
a234 2
	 tmp_array_pointers, 
	 prim, 
d239 5
a243 1
	 max_index - min_index );
d245 1
a245 2
   if (tmp_indices)
      free(tmp_indices);
d247 1
a247 2
   if (tmp_prims)
      free(tmp_prims);
@


1.4
log
@Merge Mesa 7.10.3
@
text
@d81 1
a81 2
      if (arrays[i]->StrideB &&
	  arrays[i]->BufferObj->Name == 0)
d92 1
a92 2
      if (arrays[i]->StrideB &&
	  arrays[i]->BufferObj->Name != 0)
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d88 12
d119 1
a119 1
void vbo_rebase_prims( GLcontext *ctx,
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d127 1
a127 1
      _mesa_printf("%s %d..%d\n", __FUNCTION__, min_index, max_index);
d129 17
a145 1
   if (ib) {
d180 1
a180 1
      tmp_ib.obj = ctx->Array.NullBufferObj;
d190 1
a190 1
      tmp_prims = (struct _mesa_prim *)_mesa_malloc(sizeof(*prim) * nr_prims);
d227 1
d232 1
a232 1
      _mesa_free(tmp_indices);
d235 1
a235 1
      _mesa_free(tmp_prims);
@


1.1
log
@Initial revision
@
text
@d49 3
a51 3
#include "glheader.h"
#include "imports.h"
#include "mtypes.h"
@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d49 3
a51 3
#include "main/glheader.h"
#include "main/imports.h"
#include "main/mtypes.h"
a87 12
GLboolean vbo_any_varyings_in_vbos( const struct gl_client_array *arrays[] )
{
   GLuint i;

   for (i = 0; i < VERT_ATTRIB_MAX; i++)
      if (arrays[i]->StrideB &&
	  arrays[i]->BufferObj->Name != 0)
	 return GL_TRUE;

   return GL_FALSE;
}

d107 1
a107 1
void vbo_rebase_prims( struct gl_context *ctx,
d127 1
a127 2
      printf("%s %d..%d\n", __FUNCTION__, min_index, max_index);

d129 1
a129 16
   /* XXX this path is disabled for now.
    * There's rendering corruption in some apps when it's enabled.
    */
   if (0 && ib && ctx->Extensions.ARB_draw_elements_base_vertex) {
      /* If we can just tell the hardware or the TNL to interpret our
       * indices with a different base, do so.
       */
      tmp_prims = (struct _mesa_prim *)malloc(sizeof(*prim) * nr_prims);

      for (i = 0; i < nr_prims; i++) {
	 tmp_prims[i] = prim[i];
	 tmp_prims[i].basevertex -= min_index;
      }

      prim = tmp_prims;
   } else if (ib) {
d164 1
a164 1
      tmp_ib.obj = ctx->Shared->NullBufferObj;
d174 1
a174 1
      tmp_prims = (struct _mesa_prim *)malloc(sizeof(*prim) * nr_prims);
a210 1
	 GL_TRUE,
d215 1
a215 1
      free(tmp_indices);
d218 1
a218 1
      free(tmp_prims);
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d4 1
d21 3
a23 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d93 2
a94 1
      if (arrays[i]->BufferObj->Name != 0)
a132 1
   const struct gl_client_array **saved_arrays = ctx->Array._DrawArrays;
d149 1
a149 1
      tmp_prims = malloc(sizeof(*prim) * nr_prims);
d164 4
a167 2
	 ctx->Driver.MapBufferRange(ctx, 0, ib->obj->Size, GL_MAP_READ_BIT,
				    ib->obj);
d188 3
a190 1
	 ctx->Driver.UnmapBuffer(ctx, ib->obj);
d202 1
a202 1
      tmp_prims = malloc(sizeof(*prim) * nr_prims);
a233 3
   ctx->Array._DrawArrays = tmp_array_pointers;
   ctx->NewDriverState |= ctx->DriverFlags.NewArray;

d235 2
a236 1
	 prim,
d241 1
a241 5
	 max_index - min_index,
	 NULL );

   ctx->Array._DrawArrays = saved_arrays;
   ctx->NewDriverState |= ctx->DriverFlags.NewArray;
d243 2
a244 1
   free(tmp_indices);
d246 2
a247 1
   free(tmp_prims);
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d26 1
a26 1
 *    Keith Whitwell <keithw@@vmware.com>
d61 2
a63 7
   const TYPE *in = (TYPE *)ptr;				\
   TYPE *tmp_indices = malloc(count * sizeof(TYPE));		\
								\
   if (tmp_indices == NULL) {                                   \
      _mesa_error_no_memory(__func__);                          \
      return NULL;                                              \
   }                                                            \
a150 5
      if (tmp_prims == NULL) {
         _mesa_error_no_memory(__func__);
         return;
      }

d160 1
a160 2
      GLboolean map_ib = ib->obj->Name &&
                         !ib->obj->Mappings[MAP_INTERNAL].Pointer;
d165 1
a165 1
				    ib->obj, MAP_INTERNAL);
d168 1
a168 1
      ptr = ADD_POINTERS(ib->obj->Mappings[MAP_INTERNAL].Pointer, ib->ptr);
d186 1
a186 5
	 ctx->Driver.UnmapBuffer(ctx, ib->obj, MAP_INTERNAL);

      if (tmp_indices == NULL) {
         return;
      }
a199 5
      if (tmp_prims == NULL) {
         _mesa_error_no_memory(__func__);
         return;
      }

d240 1
a240 1
	 NULL, NULL );
@


