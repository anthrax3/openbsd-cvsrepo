head	1.10;
access;
symbols
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.6
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.9;
commitid	TnlogFl9nOv2eaRf;

1.9
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.8;
commitid	4ry2gvZGMXkCUD2n;

1.8
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.7;
commitid	mcxB0JvoI9gTDYXU;

1.7
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.6;
commitid	WPD6rgPryPkvXOr9;

1.6
date	2013.09.05.14.06.58;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.46;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.43;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.17.32.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.32.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.50;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.17.44;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.14;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.13.37;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.50.42;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.10
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * mesa 3-D graphics library
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * \file vbo_context.h
 * \brief VBO builder module datatypes and definitions.
 * \author Keith Whitwell
 */


/**
 * \mainpage The VBO builder module
 *
 * This module hooks into the GL dispatch table and catches all vertex
 * building and drawing commands, such as glVertex3f, glBegin and
 * glDrawArrays.  The module stores all incoming vertex data as arrays
 * in GL vertex buffer objects (VBOs), and translates all drawing
 * commands into calls to a driver supplied DrawPrimitives() callback.
 *
 * The module captures both immediate mode and display list drawing,
 * and manages the allocation, reference counting and deallocation of
 * vertex buffer objects itself.
 * 
 * The DrawPrimitives() callback can be either implemented by the
 * driver itself or hooked to the tnl module's _tnl_draw_primitives()
 * function for hardware without tnl capablilties or during fallbacks.
 */


#ifndef _VBO_CONTEXT_H
#define _VBO_CONTEXT_H

#include "vbo.h"
#include "vbo_attrib.h"
#include "vbo_exec.h"
#include "vbo_save.h"


/** Used to signal when transitioning from one kind of drawing method
 * to another.
 */
enum draw_method
{
   DRAW_NONE,          /**< Initial value only */
   DRAW_BEGIN_END,
   DRAW_DISPLAY_LIST,
   DRAW_ARRAYS
};


struct vbo_context {
   struct gl_client_array currval[VBO_ATTRIB_MAX];
   
   /** Map VERT_ATTRIB_x to VBO_ATTRIB_y */
   GLuint map_vp_none[VERT_ATTRIB_MAX];
   GLuint map_vp_arb[VERT_ATTRIB_MAX];

   struct vbo_exec_context exec;
   struct vbo_save_context save;

   /* Callback into the driver.  This must always succeed, the driver
    * is responsible for initiating any fallback actions required:
    */
   vbo_draw_func draw_prims;

   enum draw_method last_draw_method;
};


static inline struct vbo_context *vbo_context(struct gl_context *ctx) 
{
   return ctx->vbo_context;
}


/**
 * Return VP_x token to indicate whether we're running fixed-function
 * vertex transformation, an NV vertex program or ARB vertex program/shader.
 */
static inline enum vp_mode
get_program_mode( struct gl_context *ctx )
{
   if (!ctx->VertexProgram._Current)
      return VP_NONE;
   else if (ctx->VertexProgram._Current == ctx->VertexProgram._TnlProgram)
      return VP_NONE;
   else
      return VP_ARB;
}


/**
 * This is called by glBegin, glDrawArrays and glDrawElements (and
 * variations of those calls).  When we transition from immediate mode
 * drawing to array drawing we need to invalidate the array state.
 *
 * glBegin/End builds vertex arrays.  Those arrays may look identical
 * to glDrawArrays arrays except that the position of the elements may
 * be different.  For example, arrays of (position3v, normal3f) vs. arrays
 * of (normal3f, position3f).  So we need to make sure we notify drivers
 * that arrays may be changing.
 */
static inline void
vbo_draw_method(struct vbo_context *vbo, enum draw_method method)
{
   if (vbo->last_draw_method != method) {
      struct gl_context *ctx = vbo->exec.ctx;

      switch (method) {
      case DRAW_ARRAYS:
         ctx->Array._DrawArrays = vbo->exec.array.inputs;
         break;
      case DRAW_BEGIN_END:
         ctx->Array._DrawArrays = vbo->exec.vtx.inputs;
         break;
      case DRAW_DISPLAY_LIST:
         ctx->Array._DrawArrays = vbo->save.inputs;
         break;
      default:
         ASSERT(0);
      }

      ctx->NewDriverState |= ctx->DriverFlags.NewArray;
      vbo->last_draw_method = method;
   }
}

/**
 * Return if format is integer. The immediate mode commands only emit floats
 * for non-integer types, thus everything else is integer.
 */
static inline GLboolean
vbo_attrtype_to_integer_flag(GLenum format)
{
   switch (format) {
   case GL_FLOAT:
      return GL_FALSE;
   case GL_INT:
   case GL_UNSIGNED_INT:
      return GL_TRUE;
   default:
      ASSERT(0);
      return GL_FALSE;
   }
}


/**
 * Return default component values for the given format.
 * The return type is an array of floats, because that's how we declare
 * the vertex storage despite the fact we sometimes store integers in there.
 */
static inline const GLfloat *
vbo_get_default_vals_as_float(GLenum format)
{
   static const GLfloat default_float[4] = { 0, 0, 0, 1 };
   static const GLint default_int[4] = { 0, 0, 0, 1 };

   switch (format) {
   case GL_FLOAT:
      return default_float;
   case GL_INT:
   case GL_UNSIGNED_INT:
      return (const GLfloat*)default_int;
   default:
      ASSERT(0);
      return NULL;
   }
}

#endif
@


1.9
log
@Merge Mesa 10.2.9
@
text
@@


1.8
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d60 12
d86 2
d125 1
a125 1
vbo_draw_method(struct vbo_context *vbo, gl_draw_method method)
d127 2
a128 1
   struct gl_context *ctx = vbo->exec.ctx;
a129 1
   if (ctx->Array.DrawMethod != method) {
d145 1
a145 1
      ctx->Array.DrawMethod = method;
@


1.7
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@a59 12
/** Used to signal when transitioning from one kind of drawing method
 * to another.
 */
enum draw_method
{
   DRAW_NONE,          /**< Initial value only */
   DRAW_BEGIN_END,
   DRAW_DISPLAY_LIST,
   DRAW_ARRAYS
};


a73 2

   enum draw_method last_draw_method;
d111 1
a111 1
vbo_draw_method(struct vbo_context *vbo, enum draw_method method)
d113 1
a113 2
   if (vbo->last_draw_method != method) {
      struct gl_context *ctx = vbo->exec.ctx;
d115 1
d131 1
a131 1
      vbo->last_draw_method = method;
@


1.6
log
@Merge Mesa 9.2.0
@
text
@d93 1
a93 1
   return (struct vbo_context *)(ctx->swtnl_im);
@


1.5
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  6.5
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
a53 1
#include "main/mfeatures.h"
d60 12
d75 1
a75 6
   /* These point into the above.  TODO: remove. 
    */
   struct gl_client_array *legacy_currval;
   struct gl_client_array *generic_currval;
   struct gl_client_array *mat_currval;

a78 4
   GLfloat *current[VBO_ATTRIB_MAX]; /* points into ctx->Current, ctx->Light.Material */
   GLfloat CurrentFloatEdgeFlag;


a79 1
#if FEATURE_dlist
a80 1
#endif
d86 2
d91 1
a91 1
static INLINE struct vbo_context *vbo_context(struct gl_context *ctx) 
d101 1
a101 1
static INLINE enum vp_mode
a107 2
   else if (ctx->VertexProgram._Current->IsNVProgram)
      return VP_NV;
d112 79
@


1.4
log
@Merge Mesa 7.10.3
@
text
@d54 1
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a56 1
#if FEATURE_dlist
a57 1
#endif
d88 1
a88 1
static INLINE struct vbo_context *vbo_context(GLcontext *ctx) 
d99 1
a99 1
get_program_mode( GLcontext *ctx )
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d71 2
a72 2
   GLuint map_vp_none[32];
   GLuint map_vp_arb[32];
a94 5
enum {
   VP_NONE = 1,
   VP_NV,
   VP_ARB
};
d96 6
a101 1
static INLINE GLuint get_program_mode( GLcontext *ctx )
d104 2
@


1.1
log
@Initial revision
@
text
@d56 2
d59 1
a59 1
#include "vbo_exec.h"
d79 1
d81 1
@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d56 1
a57 1
#include "vbo_save.h"
d69 2
a70 2
   GLuint map_vp_none[VERT_ATTRIB_MAX];
   GLuint map_vp_arb[VERT_ATTRIB_MAX];
a76 1
#if FEATURE_dlist
a77 1
#endif
d86 1
a86 1
static INLINE struct vbo_context *vbo_context(struct gl_context *ctx) 
d91 5
d97 1
a97 6
/**
 * Return VP_x token to indicate whether we're running fixed-function
 * vertex transformation, an NV vertex program or ARB vertex program/shader.
 */
static INLINE enum vp_mode
get_program_mode( struct gl_context *ctx )
a99 2
      return VP_NONE;
   else if (ctx->VertexProgram._Current == ctx->VertexProgram._TnlProgram)
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
a59 12
/** Used to signal when transitioning from one kind of drawing method
 * to another.
 */
enum draw_method
{
   DRAW_NONE,          /**< Initial value only */
   DRAW_BEGIN_END,
   DRAW_DISPLAY_LIST,
   DRAW_ARRAYS
};


d63 6
a68 1
   /** Map VERT_ATTRIB_x to VBO_ATTRIB_y */
d72 4
d77 1
d79 1
a84 2

   enum draw_method last_draw_method;
d88 1
a88 1
static inline struct vbo_context *vbo_context(struct gl_context *ctx) 
d98 1
a98 1
static inline enum vp_mode
d105 2
a110 79

/**
 * This is called by glBegin, glDrawArrays and glDrawElements (and
 * variations of those calls).  When we transition from immediate mode
 * drawing to array drawing we need to invalidate the array state.
 *
 * glBegin/End builds vertex arrays.  Those arrays may look identical
 * to glDrawArrays arrays except that the position of the elements may
 * be different.  For example, arrays of (position3v, normal3f) vs. arrays
 * of (normal3f, position3f).  So we need to make sure we notify drivers
 * that arrays may be changing.
 */
static inline void
vbo_draw_method(struct vbo_context *vbo, enum draw_method method)
{
   if (vbo->last_draw_method != method) {
      struct gl_context *ctx = vbo->exec.ctx;

      switch (method) {
      case DRAW_ARRAYS:
         ctx->Array._DrawArrays = vbo->exec.array.inputs;
         break;
      case DRAW_BEGIN_END:
         ctx->Array._DrawArrays = vbo->exec.vtx.inputs;
         break;
      case DRAW_DISPLAY_LIST:
         ctx->Array._DrawArrays = vbo->save.inputs;
         break;
      default:
         ASSERT(0);
      }

      ctx->NewDriverState |= ctx->DriverFlags.NewArray;
      vbo->last_draw_method = method;
   }
}

/**
 * Return if format is integer. The immediate mode commands only emit floats
 * for non-integer types, thus everything else is integer.
 */
static inline GLboolean
vbo_attrtype_to_integer_flag(GLenum format)
{
   switch (format) {
   case GL_FLOAT:
      return GL_FALSE;
   case GL_INT:
   case GL_UNSIGNED_INT:
      return GL_TRUE;
   default:
      ASSERT(0);
      return GL_FALSE;
   }
}


/**
 * Return default component values for the given format.
 * The return type is an array of floats, because that's how we declare
 * the vertex storage despite the fact we sometimes store integers in there.
 */
static inline const GLfloat *
vbo_get_default_vals_as_float(GLenum format)
{
   static const GLfloat default_float[4] = { 0, 0, 0, 1 };
   static const GLint default_int[4] = { 0, 0, 0, 1 };

   switch (format) {
   case GL_FLOAT:
      return default_float;
   case GL_INT:
   case GL_UNSIGNED_INT:
      return (const GLfloat*)default_int;
   default:
      ASSERT(0);
      return NULL;
   }
}
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d93 1
a93 1
   return ctx->vbo_context;
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d60 12
d86 2
d125 1
a125 1
vbo_draw_method(struct vbo_context *vbo, gl_draw_method method)
d127 2
a128 1
   struct gl_context *ctx = vbo->exec.ctx;
a129 1
   if (ctx->Array.DrawMethod != method) {
d145 1
a145 1
      ctx->Array.DrawMethod = method;
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@a59 12
/** Used to signal when transitioning from one kind of drawing method
 * to another.
 */
enum draw_method
{
   DRAW_NONE,          /**< Initial value only */
   DRAW_BEGIN_END,
   DRAW_DISPLAY_LIST,
   DRAW_ARRAYS
};


a73 2

   enum draw_method last_draw_method;
d111 1
a111 1
vbo_draw_method(struct vbo_context *vbo, enum draw_method method)
d113 1
a113 2
   if (vbo->last_draw_method != method) {
      struct gl_context *ctx = vbo->exec.ctx;
d115 1
d131 1
a131 1
      vbo->last_draw_method = method;
@


