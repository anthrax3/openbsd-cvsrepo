head	1.4;
access;
symbols
	OPENBSD_5_0:1.3.0.10
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2011.10.23.13.37.45;	author matthieu;	state dead;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.08;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.47;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.31.47;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge Mesa 7.10.3
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  6.5
 *
 * Copyright (C) 2005-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * \file slang_compile_function.c
 * slang front-end compiler
 * \author Michal Krol
 */

#include "main/imports.h"
#include "slang_compile.h"
#include "slang_mem.h"


int
slang_function_construct(slang_function * func)
{
   func->kind = SLANG_FUNC_ORDINARY;
   if (!slang_variable_construct(&func->header))
      return 0;

   func->parameters = (slang_variable_scope *)
      _slang_alloc(sizeof(slang_variable_scope));
   if (func->parameters == NULL) {
      slang_variable_destruct(&func->header);
      return 0;
   }

   _slang_variable_scope_ctr(func->parameters);
   func->param_count = 0;
   func->body = NULL;
   return 1;
}

void
slang_function_destruct(slang_function * func)
{
   slang_variable_destruct(&func->header);
   slang_variable_scope_destruct(func->parameters);
   _slang_free(func->parameters);
   if (func->body != NULL) {
      slang_operation_destruct(func->body);
      _slang_free(func->body);
   }
}


slang_function *
slang_function_new(slang_function_kind kind)
{
   slang_function *fun = (slang_function *)
      _slang_alloc(sizeof(slang_function));
   if (fun) {
      slang_function_construct(fun);
      fun->kind = kind;
   }
   return fun;
}


/*
 * slang_function_scope
 */

GLvoid
_slang_function_scope_ctr(slang_function_scope * self)
{
   self->functions = NULL;
   self->num_functions = 0;
   self->outer_scope = NULL;
}

void
slang_function_scope_destruct(slang_function_scope * scope)
{
   unsigned int i;

   for (i = 0; i < scope->num_functions; i++)
      slang_function_destruct(scope->functions + i);
   _slang_free(scope->functions);
}


/**
 * Does this function have a non-void return value?
 */
GLboolean
_slang_function_has_return_value(const slang_function *fun)
{
   return fun->header.type.specifier.type != SLANG_SPEC_VOID;
}


/**
 * Search a list of functions for a particular function by name.
 * \param funcs  the list of functions to search
 * \param a_name  the name to search for
 * \param all_scopes  if non-zero, search containing scopes too.
 * \return pointer to found function, or NULL.
 */
int
slang_function_scope_find_by_name(slang_function_scope * funcs,
                                  slang_atom a_name, int all_scopes)
{
   unsigned int i;

   for (i = 0; i < funcs->num_functions; i++)
      if (a_name == funcs->functions[i].header.a_name)
         return 1;
   if (all_scopes && funcs->outer_scope != NULL)
      return slang_function_scope_find_by_name(funcs->outer_scope, a_name, 1);
   return 0;
}


/**
 * Search a list of functions for a particular function (for implementing
 * function calls.  Matching is done by first comparing the function's name,
 * then the function's parameter list.
 *
 * \param funcs  the list of functions to search
 * \param fun  the function to search for
 * \param all_scopes  if non-zero, search containing scopes too.
 * \return pointer to found function, or NULL.
 */
slang_function *
slang_function_scope_find(slang_function_scope * funcs, slang_function * fun,
                          int all_scopes)
{
   unsigned int i;

   for (i = 0; i < funcs->num_functions; i++) {
      slang_function *f = &funcs->functions[i];
      const GLuint haveRetValue = 0;
#if 0
         = (f->header.type.specifier.type != SLANG_SPEC_VOID);
#endif
      unsigned int j;

      /*
      printf("Compare name %s to %s  (ret %u, %d, %d)\n",
             (char *) fun->header.a_name, (char *) f->header.a_name,
             haveRetValue,
             fun->param_count, f->param_count);
      */

      if (fun->header.a_name != f->header.a_name)
         continue;
      if (fun->param_count != f->param_count)
         continue;
      for (j = haveRetValue; j < fun->param_count; j++) {
         if (!slang_type_specifier_equal
             (&fun->parameters->variables[j]->type.specifier,
              &f->parameters->variables[j]->type.specifier))
            break;
      }
      if (j == fun->param_count) {
         /*
         printf("Found match\n");
         */
         return f;
      }
   }
   /*
   printf("Not found\n");
   */
   if (all_scopes && funcs->outer_scope != NULL)
      return slang_function_scope_find(funcs->outer_scope, fun, 1);
   return NULL;
}


/**
 * Lookup a function according to name and parameter count/types.
 */
slang_function *
_slang_function_locate(const slang_function_scope * funcs, slang_atom a_name,
                       slang_operation * args, GLuint num_args,
                       const slang_name_space * space, slang_atom_pool * atoms,
                       slang_info_log *log, GLboolean *error)
{
   slang_typeinfo arg_ti[100];
   GLuint i;

   *error = GL_FALSE;

   /* determine type of each argument */
   assert(num_args < 100);
   for (i = 0; i < num_args; i++) {
      if (!slang_typeinfo_construct(&arg_ti[i]))
         return NULL;
      if (!_slang_typeof_operation(&args[i], space, &arg_ti[i], atoms, log)) {
         return NULL;
      }
   }

   /* loop over function scopes */
   while (funcs) {

      /* look for function with matching name and argument/param types */
      for (i = 0; i < funcs->num_functions; i++) {
         slang_function *f = &funcs->functions[i];
         const GLuint haveRetValue = _slang_function_has_return_value(f);
         GLuint j;

         if (a_name != f->header.a_name)
            continue;
         if (f->param_count - haveRetValue != num_args)
            continue;

         /* compare parameter / argument types */
         for (j = 0; j < num_args; j++) {
            if (!slang_type_specifier_compatible(&arg_ti[j].spec,
                              &f->parameters->variables[j]->type.specifier)) {
               /* param/arg types don't match */
               break;
            }

            /* "out" and "inout" formal parameter requires the actual
             * argument to be an l-value.
             */
            if (!arg_ti[j].can_be_referenced &&
                (f->parameters->variables[j]->type.qualifier == SLANG_QUAL_OUT ||
                 f->parameters->variables[j]->type.qualifier == SLANG_QUAL_INOUT)) {
               /* param is not an lvalue! */
               *error = GL_TRUE;
               return NULL;
            }
         }

         if (j == num_args) {
            /* name and args match! */
            return f;
         }
      }

      funcs = funcs->outer_scope;
   }

   return NULL;
}
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a34 36
/* slang_fixup_table */

void
slang_fixup_table_init(slang_fixup_table * fix)
{
   fix->table = NULL;
   fix->count = 0;
}

void
slang_fixup_table_free(slang_fixup_table * fix)
{
   _slang_free(fix->table);
   slang_fixup_table_init(fix);
}

/**
 * Add a new fixup address to the table.
 */
GLboolean
slang_fixup_save(slang_fixup_table *fixups, GLuint address)
{
   fixups->table = (GLuint *)
      _slang_realloc(fixups->table,
                     fixups->count * sizeof(GLuint),
                     (fixups->count + 1) * sizeof(GLuint));
   if (fixups->table == NULL)
      return GL_FALSE;
   fixups->table[fixups->count] = address;
   fixups->count++;
   return GL_TRUE;
}



/* slang_function */
a52 2
   func->address = ~0;
   slang_fixup_table_init(&func->fixups);
a65 1
   slang_fixup_table_free(&func->fixups);
d68 14
d190 71
@


1.1
log
@Initial revision
@
text
@d31 1
a31 1
#include "imports.h"
d33 1
d37 2
a38 1
void slang_fixup_table_init (slang_fixup_table *fix)
d40 2
a41 2
	fix->table = NULL;
	fix->count = 0;
d44 2
a45 1
void slang_fixup_table_free (slang_fixup_table *fix)
d47 2
a48 2
	slang_alloc_free (fix->table);
	slang_fixup_table_init (fix);
d51 19
d72 2
a73 1
int slang_function_construct (slang_function *func)
d75 30
a104 28
	func->kind = slang_func_ordinary;
	if (!slang_variable_construct (&func->header))
		return 0;
	func->parameters = (slang_variable_scope *) slang_alloc_malloc (sizeof (slang_variable_scope));
	if (func->parameters == NULL)
	{
		slang_variable_destruct (&func->header);
		return 0;
	}
   _slang_variable_scope_ctr (func->parameters);
	func->param_count = 0;
	func->body = NULL;
	func->address = ~0;
	slang_fixup_table_init (&func->fixups);
	return 1;
}

void slang_function_destruct (slang_function *func)
{
	slang_variable_destruct (&func->header);
	slang_variable_scope_destruct (func->parameters);
	slang_alloc_free (func->parameters);
	if (func->body != NULL)
	{
		slang_operation_destruct (func->body);
		slang_alloc_free (func->body);
	}
	slang_fixup_table_free (&func->fixups);
d112 1
a112 1
_slang_function_scope_ctr (slang_function_scope *self)
d119 2
a120 1
void slang_function_scope_destruct (slang_function_scope *scope)
d122 1
a122 1
	unsigned int i;
d124 3
a126 43
	for (i = 0; i < scope->num_functions; i++)
		slang_function_destruct (scope->functions + i);
	slang_alloc_free (scope->functions);
}

int slang_function_scope_find_by_name (slang_function_scope *funcs, slang_atom a_name, int all_scopes)
{
	unsigned int i;

	for (i = 0; i < funcs->num_functions; i++)
		if (a_name == funcs->functions[i].header.a_name)
			return 1;
	if (all_scopes && funcs->outer_scope != NULL)
		return slang_function_scope_find_by_name (funcs->outer_scope, a_name, 1);
	return 0;
}

slang_function *slang_function_scope_find (slang_function_scope *funcs, slang_function *fun,
	int all_scopes)
{
	unsigned int i;

	for (i = 0; i < funcs->num_functions; i++)
	{
		slang_function *f = &funcs->functions[i];
		unsigned int j;

		if (fun->header.a_name != f->header.a_name)
			continue;
		if (fun->param_count != f->param_count)
			continue;
		for (j = 0; j < fun->param_count; j++)
		{
			if (!slang_type_specifier_equal (&fun->parameters->variables[j].type.specifier,
					&f->parameters->variables[j].type.specifier))
				break;
		}
		if (j == fun->param_count)
			return f;
	}
	if (all_scopes && funcs->outer_scope != NULL)
		return slang_function_scope_find (funcs->outer_scope, fun, 1);
	return NULL;
d129 3
a131 2
/*
 * _slang_build_export_code_table()
a132 1

d134 1
a134 2
_slang_build_export_code_table (slang_export_code_table *tbl, slang_function_scope *funs,
                                slang_code_unit *unit)
d136 3
a138 2
	slang_atom mainAtom;
	GLuint i;
d140 19
a158 33
	mainAtom = slang_atom_pool_atom (tbl->atoms, "main");
	if (mainAtom == SLANG_ATOM_NULL)
		return GL_FALSE;

	for (i = 0; i < funs->num_functions; i++)
	{
		if (funs->functions[i].header.a_name == mainAtom)
		{
			slang_function *fun = &funs->functions[i];
			slang_export_code_entry *e;
			slang_assemble_ctx A;

			e = slang_export_code_table_add (tbl);
			if (e == NULL)
				return GL_FALSE;
         e->address = unit->object->assembly.count;
			e->name = slang_atom_pool_atom (tbl->atoms, "@@main");
			if (e->name == SLANG_ATOM_NULL)
				return GL_FALSE;

         A.file = &unit->object->assembly;
         A.mach = &unit->object->machine;
         A.atoms = &unit->object->atompool;
         A.space.funcs = &unit->funs;
         A.space.structs = &unit->structs;
         A.space.vars = &unit->vars;
         slang_assembly_file_push_label (&unit->object->assembly, slang_asm_local_alloc, 20);
         slang_assembly_file_push_label (&unit->object->assembly, slang_asm_enter, 20);
			_slang_assemble_function_call (&A, fun, NULL, 0, GL_FALSE);
         slang_assembly_file_push (&unit->object->assembly, slang_asm_exit);
		}
	}
	return GL_TRUE;
d161 56
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d36 1
a36 2
void
slang_fixup_table_init(slang_fixup_table * fix)
d38 2
a39 2
   fix->table = NULL;
   fix->count = 0;
d42 1
a42 2
void
slang_fixup_table_free(slang_fixup_table * fix)
d44 2
a45 2
   slang_alloc_free(fix->table);
   slang_fixup_table_init(fix);
a47 19
/**
 * Add a new fixup address to the table.
 */
GLboolean
slang_fixup_save(slang_fixup_table *fixups, GLuint address)
{
   fixups->table = (GLuint *)
      slang_alloc_realloc(fixups->table,
                          fixups->count * sizeof(GLuint),
                          (fixups->count + 1) * sizeof(GLuint));
   if (fixups->table == NULL)
      return GL_FALSE;
   fixups->table[fixups->count] = address;
   fixups->count++;
   return GL_TRUE;
}



d50 1
a50 2
int
slang_function_construct(slang_function * func)
d52 28
a79 30
   func->kind = slang_func_ordinary;
   if (!slang_variable_construct(&func->header))
      return 0;

   func->parameters = (slang_variable_scope *)
      slang_alloc_malloc(sizeof(slang_variable_scope));
   if (func->parameters == NULL) {
      slang_variable_destruct(&func->header);
      return 0;
   }

   _slang_variable_scope_ctr(func->parameters);
   func->param_count = 0;
   func->body = NULL;
   func->address = ~0;
   slang_fixup_table_init(&func->fixups);
   return 1;
}

void
slang_function_destruct(slang_function * func)
{
   slang_variable_destruct(&func->header);
   slang_variable_scope_destruct(func->parameters);
   slang_alloc_free(func->parameters);
   if (func->body != NULL) {
      slang_operation_destruct(func->body);
      slang_alloc_free(func->body);
   }
   slang_fixup_table_free(&func->fixups);
d87 1
a87 1
_slang_function_scope_ctr(slang_function_scope * self)
d94 1
a94 2
void
slang_function_scope_destruct(slang_function_scope * scope)
d96 1
a96 6
   unsigned int i;

   for (i = 0; i < scope->num_functions; i++)
      slang_function_destruct(scope->functions + i);
   slang_alloc_free(scope->functions);
}
d98 43
a140 59

/**
 * Search a list of functions for a particular function by name.
 * \param funcs  the list of functions to search
 * \param a_name  the name to search for
 * \param all_scopes  if non-zero, search containing scopes too.
 * \return pointer to found function, or NULL.
 */
int
slang_function_scope_find_by_name(slang_function_scope * funcs,
                                  slang_atom a_name, int all_scopes)
{
   unsigned int i;

   for (i = 0; i < funcs->num_functions; i++)
      if (a_name == funcs->functions[i].header.a_name)
         return 1;
   if (all_scopes && funcs->outer_scope != NULL)
      return slang_function_scope_find_by_name(funcs->outer_scope, a_name, 1);
   return 0;
}


/**
 * Search a list of functions for a particular function (for implementing
 * function calls.  Matching is done by first comparing the function's name,
 * then the function's parameter list.
 *
 * \param funcs  the list of functions to search
 * \param fun  the function to search for
 * \param all_scopes  if non-zero, search containing scopes too.
 * \return pointer to found function, or NULL.
 */
slang_function *
slang_function_scope_find(slang_function_scope * funcs, slang_function * fun,
                          int all_scopes)
{
   unsigned int i;

   for (i = 0; i < funcs->num_functions; i++) {
      slang_function *f = &funcs->functions[i];
      unsigned int j;

      if (fun->header.a_name != f->header.a_name)
         continue;
      if (fun->param_count != f->param_count)
         continue;
      for (j = 0; j < fun->param_count; j++) {
         if (!slang_type_specifier_equal
             (&fun->parameters->variables[j].type.specifier,
              &f->parameters->variables[j].type.specifier))
            break;
      }
      if (j == fun->param_count)
         return f;
   }
   if (all_scopes && funcs->outer_scope != NULL)
      return slang_function_scope_find(funcs->outer_scope, fun, 1);
   return NULL;
d148 21
a168 20
_slang_build_export_code_table(slang_export_code_table * tbl,
                               slang_function_scope * funs,
                               slang_code_unit * unit)
{
   slang_atom mainAtom;
   GLuint i;

   mainAtom = slang_atom_pool_atom(tbl->atoms, "main");
   if (mainAtom == SLANG_ATOM_NULL)
      return GL_FALSE;

   for (i = 0; i < funs->num_functions; i++) {
      if (funs->functions[i].header.a_name == mainAtom) {
         slang_function *fun = &funs->functions[i];
         slang_export_code_entry *e;
         slang_assemble_ctx A;

         e = slang_export_code_table_add(tbl);
         if (e == NULL)
            return GL_FALSE;
d170 3
a172 3
         e->name = slang_atom_pool_atom(tbl->atoms, "@@main");
         if (e->name == SLANG_ATOM_NULL)
            return GL_FALSE;
d180 7
a186 9
         slang_assembly_file_push_label(&unit->object->assembly,
                                        slang_asm_local_alloc, 20);
         slang_assembly_file_push_label(&unit->object->assembly,
                                        slang_asm_enter, 20);
         _slang_assemble_function_call(&A, fun, NULL, 0, GL_FALSE);
         slang_assembly_file_push(&unit->object->assembly, slang_asm_exit);
      }
   }
   return GL_TRUE;
d188 1
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@a32 1
#include "slang_mem.h"
d46 1
a46 1
   _slang_free(fix->table);
d57 3
a59 3
      _slang_realloc(fixups->table,
                     fixups->count * sizeof(GLuint),
                     (fixups->count + 1) * sizeof(GLuint));
d74 1
a74 1
   func->kind = SLANG_FUNC_ORDINARY;
d79 1
a79 1
      _slang_alloc(sizeof(slang_variable_scope));
d98 1
a98 1
   _slang_free(func->parameters);
d101 1
a101 1
      _slang_free(func->body);
d125 1
a125 11
   _slang_free(scope->functions);
}


/**
 * Does this function have a non-void return value?
 */
GLboolean
_slang_function_has_return_value(const slang_function *fun)
{
   return fun->header.type.specifier.type != SLANG_SPEC_VOID;
a168 4
      const GLuint haveRetValue = 0;
#if 0
         = (f->header.type.specifier.type != SLANG_SPEC_VOID);
#endif
a170 7
      /*
      printf("Compare name %s to %s  (ret %u, %d, %d)\n",
             (char *) fun->header.a_name, (char *) f->header.a_name,
             haveRetValue,
             fun->param_count, f->param_count);
      */

d175 1
a175 1
      for (j = haveRetValue; j < fun->param_count; j++) {
d177 2
a178 2
             (&fun->parameters->variables[j]->type.specifier,
              &f->parameters->variables[j]->type.specifier))
d181 1
a181 4
      if (j == fun->param_count) {
         /*
         printf("Found match\n");
         */
a182 1
      }
a183 3
   /*
   printf("Not found\n");
   */
d187 47
@


