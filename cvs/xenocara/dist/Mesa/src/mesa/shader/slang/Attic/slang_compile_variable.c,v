head	1.5;
access;
symbols
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2011.10.23.13.37.45;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.33;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.08;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.47;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.31.47;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge Mesa 7.10.3
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  6.5.3
 *
 * Copyright (C) 2005-2007  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * \file slang_compile_variable.c
 * slang front-end compiler
 * \author Michal Krol
 */

#include "main/imports.h"
#include "slang_compile.h"
#include "slang_mem.h"


static slang_variable *
slang_variable_new(void)
{
   slang_variable *v = (slang_variable *) _slang_alloc(sizeof(slang_variable));
   if (v) {
      if (!slang_variable_construct(v)) {
         _slang_free(v);
         v = NULL;
      }
   }
   return v;
}


static void
slang_variable_delete(slang_variable * var)
{
   slang_variable_destruct(var);
   _slang_free(var);
}


/*
 * slang_variable_scope
 */

slang_variable_scope *
_slang_variable_scope_new(slang_variable_scope *parent)
{
   slang_variable_scope *s;
   s = (slang_variable_scope *) _slang_alloc(sizeof(slang_variable_scope));
   if (s)
      s->outer_scope = parent;
   return s;
}


GLvoid
_slang_variable_scope_ctr(slang_variable_scope * self)
{
   self->variables = NULL;
   self->num_variables = 0;
   self->outer_scope = NULL;
}

void
slang_variable_scope_destruct(slang_variable_scope * scope)
{
   unsigned int i;

   if (!scope)
      return;
   for (i = 0; i < scope->num_variables; i++) {
      if (scope->variables[i])
         slang_variable_delete(scope->variables[i]);
   }
   _slang_free(scope->variables);
   /* do not free scope->outer_scope */
}

int
slang_variable_scope_copy(slang_variable_scope * x,
                          const slang_variable_scope * y)
{
   slang_variable_scope z;
   unsigned int i;

   _slang_variable_scope_ctr(&z);
   z.variables = (slang_variable **)
      _slang_alloc(y->num_variables * sizeof(slang_variable *));
   if (z.variables == NULL) {
      slang_variable_scope_destruct(&z);
      return 0;
   }
   for (z.num_variables = 0; z.num_variables < y->num_variables;
        z.num_variables++) {
      z.variables[z.num_variables] = slang_variable_new();
      if (!z.variables[z.num_variables]) {
         slang_variable_scope_destruct(&z);
         return 0;
      }
   }
   for (i = 0; i < z.num_variables; i++) {
      if (!slang_variable_copy(z.variables[i], y->variables[i])) {
         slang_variable_scope_destruct(&z);
         return 0;
      }
   }
   z.outer_scope = y->outer_scope;
   slang_variable_scope_destruct(x);
   *x = z;
   return 1;
}


/**
 * Grow the variable list by one.
 * \return  pointer to space for the new variable (will be initialized)
 */
slang_variable *
slang_variable_scope_grow(slang_variable_scope *scope)
{
   const int n = scope->num_variables;
   scope->variables = (slang_variable **)
         _slang_realloc(scope->variables,
                        n * sizeof(slang_variable *),
                        (n + 1) * sizeof(slang_variable *));
   if (!scope->variables)
      return NULL;

   scope->num_variables++;

   scope->variables[n] = slang_variable_new();
   if (!scope->variables[n])
      return NULL;

   return scope->variables[n];
}



/* slang_variable */

int
slang_variable_construct(slang_variable * var)
{
   if (!slang_fully_specified_type_construct(&var->type))
      return 0;
   var->a_name = SLANG_ATOM_NULL;
   var->array_len = 0;
   var->initializer = NULL;
   var->size = 0;
   var->isTemp = GL_FALSE;
   var->store = NULL;
   var->declared = 0;
   return 1;
}


void
slang_variable_destruct(slang_variable * var)
{
   slang_fully_specified_type_destruct(&var->type);
   if (var->initializer != NULL) {
      slang_operation_destruct(var->initializer);
      _slang_free(var->initializer);
   }
#if 0
   if (var->aux) {
      free(var->aux);
   }
#endif
}


int
slang_variable_copy(slang_variable * x, const slang_variable * y)
{
   slang_variable z;

   if (!slang_variable_construct(&z))
      return 0;
   if (!slang_fully_specified_type_copy(&z.type, &y->type)) {
      slang_variable_destruct(&z);
      return 0;
   }
   z.a_name = y->a_name;
   z.array_len = y->array_len;
   if (y->initializer != NULL) {
      z.initializer
         = (slang_operation *) _slang_alloc(sizeof(slang_operation));
      if (z.initializer == NULL) {
         slang_variable_destruct(&z);
         return 0;
      }
      if (!slang_operation_construct(z.initializer)) {
         _slang_free(z.initializer);
         slang_variable_destruct(&z);
         return 0;
      }
      if (!slang_operation_copy(z.initializer, y->initializer)) {
         slang_variable_destruct(&z);
         return 0;
      }
   }
   z.size = y->size;
   slang_variable_destruct(x);
   *x = z;
   return 1;
}


/**
 * Search for named variable in given scope.
 * \param all  if true, search parent scopes too.
 */
slang_variable *
_slang_variable_locate(const slang_variable_scope * scope,
                       const slang_atom a_name, GLboolean all)
{
   while (scope) {
      GLuint i;
      for (i = 0; i < scope->num_variables; i++)
         if (a_name == scope->variables[i]->a_name)
            return scope->variables[i];
      if (all)
         scope = scope->outer_scope;
      else
         scope = NULL;
   }
   return NULL;
}
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d185 1
a185 1
      _mesa_free(var->aux);
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a35 99
typedef struct
{
   const char *name;
   slang_type_specifier_type type;
} type_specifier_type_name;

static const type_specifier_type_name type_specifier_type_names[] = {
   {"void", SLANG_SPEC_VOID},
   {"bool", SLANG_SPEC_BOOL},
   {"bvec2", SLANG_SPEC_BVEC2},
   {"bvec3", SLANG_SPEC_BVEC3},
   {"bvec4", SLANG_SPEC_BVEC4},
   {"int", SLANG_SPEC_INT},
   {"ivec2", SLANG_SPEC_IVEC2},
   {"ivec3", SLANG_SPEC_IVEC3},
   {"ivec4", SLANG_SPEC_IVEC4},
   {"float", SLANG_SPEC_FLOAT},
   {"vec2", SLANG_SPEC_VEC2},
   {"vec3", SLANG_SPEC_VEC3},
   {"vec4", SLANG_SPEC_VEC4},
   {"mat2", SLANG_SPEC_MAT2},
   {"mat3", SLANG_SPEC_MAT3},
   {"mat4", SLANG_SPEC_MAT4},
   {"mat2x3", SLANG_SPEC_MAT23},
   {"mat3x2", SLANG_SPEC_MAT32},
   {"mat2x4", SLANG_SPEC_MAT24},
   {"mat4x2", SLANG_SPEC_MAT42},
   {"mat3x4", SLANG_SPEC_MAT34},
   {"mat4x3", SLANG_SPEC_MAT43},
   {"sampler1D", SLANG_SPEC_SAMPLER1D},
   {"sampler2D", SLANG_SPEC_SAMPLER2D},
   {"sampler3D", SLANG_SPEC_SAMPLER3D},
   {"samplerCube", SLANG_SPEC_SAMPLERCUBE},
   {"sampler1DShadow", SLANG_SPEC_SAMPLER1DSHADOW},
   {"sampler2DShadow", SLANG_SPEC_SAMPLER2DSHADOW},
   {"sampler2DRect", SLANG_SPEC_SAMPLER2DRECT},
   {"sampler2DRectShadow", SLANG_SPEC_SAMPLER2DRECTSHADOW},
   {NULL, SLANG_SPEC_VOID}
};

slang_type_specifier_type
slang_type_specifier_type_from_string(const char *name)
{
   const type_specifier_type_name *p = type_specifier_type_names;
   while (p->name != NULL) {
      if (slang_string_compare(p->name, name) == 0)
         break;
      p++;
   }
   return p->type;
}

const char *
slang_type_specifier_type_to_string(slang_type_specifier_type type)
{
   const type_specifier_type_name *p = type_specifier_type_names;
   while (p->name != NULL) {
      if (p->type == type)
         break;
      p++;
   }
   return p->name;
}

/* slang_fully_specified_type */

int
slang_fully_specified_type_construct(slang_fully_specified_type * type)
{
   type->qualifier = SLANG_QUAL_NONE;
   slang_type_specifier_ctr(&type->specifier);
   return 1;
}

void
slang_fully_specified_type_destruct(slang_fully_specified_type * type)
{
   slang_type_specifier_dtr(&type->specifier);
}

int
slang_fully_specified_type_copy(slang_fully_specified_type * x,
                                const slang_fully_specified_type * y)
{
   slang_fully_specified_type z;

   if (!slang_fully_specified_type_construct(&z))
      return 0;
   z.qualifier = y->qualifier;
   if (!slang_type_specifier_copy(&z.specifier, &y->specifier)) {
      slang_fully_specified_type_destruct(&z);
      return 0;
   }
   slang_fully_specified_type_destruct(x);
   *x = z;
   return 1;
}


a166 1
   var->address = ~0;
d169 1
a169 1
   var->aux = NULL;
a220 1
   z.address = y->address;
d233 1
a233 1
_slang_locate_variable(const slang_variable_scope * scope,
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.5
d5 1
a5 1
 * Copyright (C) 2005-2006  Brian Paul   All Rights Reserved.
d31 1
a31 1
#include "imports.h"
d33 1
a34 1
/* slang_type_specifier_type */
d38 2
a39 2
	const char *name;
	slang_type_specifier_type type;
d42 32
a73 24
static type_specifier_type_name type_specifier_type_names[] = {
	{ "void", slang_spec_void },
	{ "bool", slang_spec_bool },
	{ "bvec2", slang_spec_bvec2 },
	{ "bvec3", slang_spec_bvec3 },
	{ "bvec4", slang_spec_bvec4 },
	{ "int", slang_spec_int },
	{ "ivec2", slang_spec_ivec2 },
	{ "ivec3", slang_spec_ivec3 },
	{ "ivec4", slang_spec_ivec4 },
	{ "float", slang_spec_float },
	{ "vec2", slang_spec_vec2 },
	{ "vec3", slang_spec_vec3 },
	{ "vec4", slang_spec_vec4 },
	{ "mat2", slang_spec_mat2 },
	{ "mat3", slang_spec_mat3 },
	{ "mat4", slang_spec_mat4 },
	{ "sampler1D", slang_spec_sampler1D },
	{ "sampler2D", slang_spec_sampler2D },
	{ "sampler3D", slang_spec_sampler3D },
	{ "samplerCube", slang_spec_samplerCube },
	{ "sampler1DShadow", slang_spec_sampler1DShadow },
	{ "sampler2DShadow", slang_spec_sampler2DShadow },
	{ NULL, slang_spec_void }
d76 2
a77 1
slang_type_specifier_type slang_type_specifier_type_from_string (const char *name)
d79 19
a97 20
	type_specifier_type_name *p = type_specifier_type_names;
	while (p->name != NULL)
	{
		if (slang_string_compare (p->name, name) == 0)
			break;
		p++;
	}
	return p->type;
}

const char *slang_type_specifier_type_to_string (slang_type_specifier_type type)
{
	type_specifier_type_name *p = type_specifier_type_names;
	while (p->name != NULL)
	{
		if (p->type == type)
			break;
		p++;
	}
	return p->name;
d102 2
a103 1
int slang_fully_specified_type_construct (slang_fully_specified_type *type)
d105 3
a107 3
	type->qualifier = slang_qual_none;
	slang_type_specifier_ctr (&type->specifier);
	return 1;
d110 2
a111 1
void slang_fully_specified_type_destruct (slang_fully_specified_type *type)
d113 1
a113 1
	slang_type_specifier_dtr (&type->specifier);
d116 3
a118 1
int slang_fully_specified_type_copy (slang_fully_specified_type *x, const slang_fully_specified_type *y)
d120 1
a120 1
	slang_fully_specified_type z;
d122 10
a131 11
	if (!slang_fully_specified_type_construct (&z))
		return 0;
	z.qualifier = y->qualifier;
	if (!slang_type_specifier_copy (&z.specifier, &y->specifier))
	{
		slang_fully_specified_type_destruct (&z);
		return 0;
	}
	slang_fully_specified_type_destruct (x);
	*x = z;
	return 1;
d134 23
d161 11
d173 1
a173 1
_slang_variable_scope_ctr (slang_variable_scope *self)
d180 2
a181 1
void slang_variable_scope_destruct (slang_variable_scope *scope)
d183 1
a183 1
	unsigned int i;
d185 42
a226 34
	for (i = 0; i < scope->num_variables; i++)
		slang_variable_destruct (scope->variables + i);
	slang_alloc_free (scope->variables);
	/* do not free scope->outer_scope */
}

int slang_variable_scope_copy (slang_variable_scope *x, const slang_variable_scope *y)
{
	slang_variable_scope z;
	unsigned int i;

   _slang_variable_scope_ctr (&z);
	z.variables = (slang_variable *) slang_alloc_malloc (y->num_variables * sizeof (slang_variable));
	if (z.variables == NULL)
	{
		slang_variable_scope_destruct (&z);
		return 0;
	}
	for (z.num_variables = 0; z.num_variables < y->num_variables; z.num_variables++)
		if (!slang_variable_construct (&z.variables[z.num_variables]))
		{
			slang_variable_scope_destruct (&z);
			return 0;
		}
	for (i = 0; i < z.num_variables; i++)
		if (!slang_variable_copy (&z.variables[i], &y->variables[i]))
		{
			slang_variable_scope_destruct (&z);
			return 0;
		}
	z.outer_scope = y->outer_scope;
	slang_variable_scope_destruct (x);
	*x = z;
	return 1;
a228 1
/* slang_variable */
d230 6
a235 1
int slang_variable_construct (slang_variable *var)
d237 15
a251 72
	if (!slang_fully_specified_type_construct (&var->type))
		return 0;
	var->a_name = SLANG_ATOM_NULL;
	var->array_len = 0;
	var->initializer = NULL;
	var->address = ~0;
	var->size = 0;
	var->global = 0;
	return 1;
}

void slang_variable_destruct (slang_variable *var)
{
	slang_fully_specified_type_destruct (&var->type);
	if (var->initializer != NULL)
	{
		slang_operation_destruct (var->initializer);
		slang_alloc_free (var->initializer);
	}
}

int slang_variable_copy (slang_variable *x, const slang_variable *y)
{
	slang_variable z;

	if (!slang_variable_construct (&z))
		return 0;
	if (!slang_fully_specified_type_copy (&z.type, &y->type))
	{
		slang_variable_destruct (&z);
		return 0;
	}
	z.a_name = y->a_name;
	z.array_len = y->array_len;
	if (y->initializer != NULL)
	{
		z.initializer = (slang_operation *) slang_alloc_malloc (sizeof (slang_operation));
		if (z.initializer == NULL)
		{
			slang_variable_destruct (&z);
			return 0;
		}
		if (!slang_operation_construct (z.initializer))
		{
			slang_alloc_free (z.initializer);
			slang_variable_destruct (&z);
			return 0;
		}
		if (!slang_operation_copy (z.initializer, y->initializer))
		{
			slang_variable_destruct (&z);
			return 0;
		}
	}
	z.address = y->address;
	z.size = y->size;
	z.global = y->global;
	slang_variable_destruct (x);
	*x = z;
	return 1;
}

slang_variable *_slang_locate_variable (slang_variable_scope *scope, slang_atom a_name, GLboolean all)
{
	GLuint i;

	for (i = 0; i < scope->num_variables; i++)
		if (a_name == scope->variables[i].a_name)
			return &scope->variables[i];
	if (all && scope->outer_scope != NULL)
		return _slang_locate_variable (scope->outer_scope, a_name, 1);
	return NULL;
a253 3
/*
 * _slang_build_export_data_table()
 */
d255 5
a259 1
static GLenum gl_type_from_specifier (const slang_type_specifier *type)
d261 65
a325 110
	switch (type->type)
	{
	case slang_spec_bool:
		return GL_BOOL_ARB;
	case slang_spec_bvec2:
		return GL_BOOL_VEC2_ARB;
	case slang_spec_bvec3:
		return GL_BOOL_VEC3_ARB;
	case slang_spec_bvec4:
		return GL_BOOL_VEC4_ARB;
	case slang_spec_int:
		return GL_INT;
	case slang_spec_ivec2:
		return GL_INT_VEC2_ARB;
	case slang_spec_ivec3:
		return GL_INT_VEC3_ARB;
	case slang_spec_ivec4:
		return GL_INT_VEC4_ARB;
	case slang_spec_float:
		return GL_FLOAT;
	case slang_spec_vec2:
		return GL_FLOAT_VEC2_ARB;
	case slang_spec_vec3:
		return GL_FLOAT_VEC3_ARB;
	case slang_spec_vec4:
		return GL_FLOAT_VEC4_ARB;
	case slang_spec_mat2:
		return GL_FLOAT_MAT2_ARB;
	case slang_spec_mat3:
		return GL_FLOAT_MAT3_ARB;
	case slang_spec_mat4:
		return GL_FLOAT_MAT4_ARB;
	case slang_spec_sampler1D:
		return GL_SAMPLER_1D_ARB;
	case slang_spec_sampler2D:
		return GL_SAMPLER_2D_ARB;
	case slang_spec_sampler3D:
		return GL_SAMPLER_3D_ARB;
	case slang_spec_samplerCube:
		return GL_SAMPLER_CUBE_ARB;
	case slang_spec_sampler1DShadow:
		return GL_SAMPLER_1D_SHADOW_ARB;
	case slang_spec_sampler2DShadow:
		return GL_SAMPLER_2D_SHADOW_ARB;
	case slang_spec_array:
		return gl_type_from_specifier (type->_array);
	default:
		return GL_FLOAT;
	}
}

static GLboolean build_quant (slang_export_data_quant *q, slang_variable *var)
{
	slang_type_specifier *spec = &var->type.specifier;

	q->name = var->a_name;
	q->size = var->size;
	if (spec->type == slang_spec_array)
	{
		q->array_len = var->array_len;
		q->size /= var->array_len;
		spec = spec->_array;
	}
	if (spec->type == slang_spec_struct)
	{
		GLuint i;

		q->u.field_count = spec->_struct->fields->num_variables;
		q->structure = (slang_export_data_quant *) slang_alloc_malloc (
			q->u.field_count * sizeof (slang_export_data_quant));
		if (q->structure == NULL)
			return GL_FALSE;

		for (i = 0; i < q->u.field_count; i++)
			slang_export_data_quant_ctr (&q->structure[i]);
		for (i = 0; i < q->u.field_count; i++)
			if (!build_quant (&q->structure[i], &spec->_struct->fields->variables[i]))
				return GL_FALSE;
	}
	else
		q->u.basic_type = gl_type_from_specifier (spec);
	return GL_TRUE;
}

GLboolean _slang_build_export_data_table (slang_export_data_table *tbl, slang_variable_scope *vars)
{
	GLuint i;

	for (i = 0; i < vars->num_variables; i++)
	{
		slang_variable *var = &vars->variables[i];
		slang_export_data_entry *e;
		
		e = slang_export_data_table_add (tbl);
		if (e == NULL)
			return GL_FALSE;
		if (!build_quant (&e->quant, var))
			return GL_FALSE;
		if (var->type.qualifier == slang_qual_uniform)
			e->access = slang_exp_uniform;
		else if (var->type.qualifier == slang_qual_attribute)
			e->access = slang_exp_attribute;
		else
			e->access = slang_exp_varying;
		e->address = var->address;
	}

	if (vars->outer_scope != NULL)
		return _slang_build_export_data_table (tbl, vars->outer_scope);
	return GL_TRUE;
d328 21
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d38 2
a39 2
   const char *name;
   slang_type_specifier_type type;
d42 24
a65 24
static const type_specifier_type_name type_specifier_type_names[] = {
   {"void", slang_spec_void},
   {"bool", slang_spec_bool},
   {"bvec2", slang_spec_bvec2},
   {"bvec3", slang_spec_bvec3},
   {"bvec4", slang_spec_bvec4},
   {"int", slang_spec_int},
   {"ivec2", slang_spec_ivec2},
   {"ivec3", slang_spec_ivec3},
   {"ivec4", slang_spec_ivec4},
   {"float", slang_spec_float},
   {"vec2", slang_spec_vec2},
   {"vec3", slang_spec_vec3},
   {"vec4", slang_spec_vec4},
   {"mat2", slang_spec_mat2},
   {"mat3", slang_spec_mat3},
   {"mat4", slang_spec_mat4},
   {"sampler1D", slang_spec_sampler1D},
   {"sampler2D", slang_spec_sampler2D},
   {"sampler3D", slang_spec_sampler3D},
   {"samplerCube", slang_spec_samplerCube},
   {"sampler1DShadow", slang_spec_sampler1DShadow},
   {"sampler2DShadow", slang_spec_sampler2DShadow},
   {NULL, slang_spec_void}
d68 1
a68 2
slang_type_specifier_type
slang_type_specifier_type_from_string(const char *name)
d70 20
a89 19
   const type_specifier_type_name *p = type_specifier_type_names;
   while (p->name != NULL) {
      if (slang_string_compare(p->name, name) == 0)
         break;
      p++;
   }
   return p->type;
}

const char *
slang_type_specifier_type_to_string(slang_type_specifier_type type)
{
   const type_specifier_type_name *p = type_specifier_type_names;
   while (p->name != NULL) {
      if (p->type == type)
         break;
      p++;
   }
   return p->name;
d94 1
a94 2
int
slang_fully_specified_type_construct(slang_fully_specified_type * type)
d96 3
a98 3
   type->qualifier = slang_qual_none;
   slang_type_specifier_ctr(&type->specifier);
   return 1;
d101 1
a101 2
void
slang_fully_specified_type_destruct(slang_fully_specified_type * type)
d103 1
a103 1
   slang_type_specifier_dtr(&type->specifier);
d106 1
a106 3
int
slang_fully_specified_type_copy(slang_fully_specified_type * x,
                                const slang_fully_specified_type * y)
d108 1
a108 1
   slang_fully_specified_type z;
d110 11
a120 10
   if (!slang_fully_specified_type_construct(&z))
      return 0;
   z.qualifier = y->qualifier;
   if (!slang_type_specifier_copy(&z.specifier, &y->specifier)) {
      slang_fully_specified_type_destruct(&z);
      return 0;
   }
   slang_fully_specified_type_destruct(x);
   *x = z;
   return 1;
d128 1
a128 1
_slang_variable_scope_ctr(slang_variable_scope * self)
d135 1
a135 2
void
slang_variable_scope_destruct(slang_variable_scope * scope)
d137 1
a137 1
   unsigned int i;
d139 34
a172 39
   if (!scope)
      return;
   for (i = 0; i < scope->num_variables; i++)
      slang_variable_destruct(scope->variables + i);
   slang_alloc_free(scope->variables);
   /* do not free scope->outer_scope */
}

int
slang_variable_scope_copy(slang_variable_scope * x,
                          const slang_variable_scope * y)
{
   slang_variable_scope z;
   unsigned int i;

   _slang_variable_scope_ctr(&z);
   z.variables = (slang_variable *)
      slang_alloc_malloc(y->num_variables * sizeof(slang_variable));
   if (z.variables == NULL) {
      slang_variable_scope_destruct(&z);
      return 0;
   }
   for (z.num_variables = 0; z.num_variables < y->num_variables;
        z.num_variables++) {
      if (!slang_variable_construct(&z.variables[z.num_variables])) {
         slang_variable_scope_destruct(&z);
         return 0;
      }
   }
   for (i = 0; i < z.num_variables; i++) {
      if (!slang_variable_copy(&z.variables[i], &y->variables[i])) {
         slang_variable_scope_destruct(&z);
         return 0;
      }
   }
   z.outer_scope = y->outer_scope;
   slang_variable_scope_destruct(x);
   *x = z;
   return 1;
a174 26

/**
 * Grow the variable list by one.
 * \return  pointer to space for the new variable (will be initialized)
 */
slang_variable *
slang_variable_scope_grow(slang_variable_scope *scope)
{
   const int n = scope->num_variables;
   scope->variables = (slang_variable *)
         slang_alloc_realloc(scope->variables,
                             n * sizeof(slang_variable),
                             (n + 1) * sizeof(slang_variable));
   if (!scope->variables)
      return NULL;

   scope->num_variables++;

   if (!slang_variable_construct(scope->variables + n))
      return NULL;

   return scope->variables + n;
}



d177 1
a177 2
int
slang_variable_construct(slang_variable * var)
d179 72
a250 72
   if (!slang_fully_specified_type_construct(&var->type))
      return 0;
   var->a_name = SLANG_ATOM_NULL;
   var->array_len = 0;
   var->initializer = NULL;
   var->address = ~0;
   var->address2 = 0;
   var->size = 0;
   var->global = GL_FALSE;
   return 1;
}

void
slang_variable_destruct(slang_variable * var)
{
   slang_fully_specified_type_destruct(&var->type);
   if (var->initializer != NULL) {
      slang_operation_destruct(var->initializer);
      slang_alloc_free(var->initializer);
   }
}

int
slang_variable_copy(slang_variable * x, const slang_variable * y)
{
   slang_variable z;

   if (!slang_variable_construct(&z))
      return 0;
   if (!slang_fully_specified_type_copy(&z.type, &y->type)) {
      slang_variable_destruct(&z);
      return 0;
   }
   z.a_name = y->a_name;
   z.array_len = y->array_len;
   if (y->initializer != NULL) {
      z.initializer =
         (slang_operation *) slang_alloc_malloc(sizeof(slang_operation));
      if (z.initializer == NULL) {
         slang_variable_destruct(&z);
         return 0;
      }
      if (!slang_operation_construct(z.initializer)) {
         slang_alloc_free(z.initializer);
         slang_variable_destruct(&z);
         return 0;
      }
      if (!slang_operation_copy(z.initializer, y->initializer)) {
         slang_variable_destruct(&z);
         return 0;
      }
   }
   z.address = y->address;
   z.size = y->size;
   z.global = y->global;
   slang_variable_destruct(x);
   *x = z;
   return 1;
}

slang_variable *
_slang_locate_variable(const slang_variable_scope * scope,
                       const slang_atom a_name, GLboolean all)
{
   GLuint i;

   for (i = 0; i < scope->num_variables; i++)
      if (a_name == scope->variables[i].a_name)
         return &scope->variables[i];
   if (all && scope->outer_scope != NULL)
      return _slang_locate_variable(scope->outer_scope, a_name, 1);
   return NULL;
d257 1
a257 2
static GLenum
gl_type_from_specifier(const slang_type_specifier * type)
d259 110
a368 112
   switch (type->type) {
   case slang_spec_bool:
      return GL_BOOL_ARB;
   case slang_spec_bvec2:
      return GL_BOOL_VEC2_ARB;
   case slang_spec_bvec3:
      return GL_BOOL_VEC3_ARB;
   case slang_spec_bvec4:
      return GL_BOOL_VEC4_ARB;
   case slang_spec_int:
      return GL_INT;
   case slang_spec_ivec2:
      return GL_INT_VEC2_ARB;
   case slang_spec_ivec3:
      return GL_INT_VEC3_ARB;
   case slang_spec_ivec4:
      return GL_INT_VEC4_ARB;
   case slang_spec_float:
      return GL_FLOAT;
   case slang_spec_vec2:
      return GL_FLOAT_VEC2_ARB;
   case slang_spec_vec3:
      return GL_FLOAT_VEC3_ARB;
   case slang_spec_vec4:
      return GL_FLOAT_VEC4_ARB;
   case slang_spec_mat2:
      return GL_FLOAT_MAT2_ARB;
   case slang_spec_mat3:
      return GL_FLOAT_MAT3_ARB;
   case slang_spec_mat4:
      return GL_FLOAT_MAT4_ARB;
   case slang_spec_sampler1D:
      return GL_SAMPLER_1D_ARB;
   case slang_spec_sampler2D:
      return GL_SAMPLER_2D_ARB;
   case slang_spec_sampler3D:
      return GL_SAMPLER_3D_ARB;
   case slang_spec_samplerCube:
      return GL_SAMPLER_CUBE_ARB;
   case slang_spec_sampler1DShadow:
      return GL_SAMPLER_1D_SHADOW_ARB;
   case slang_spec_sampler2DShadow:
      return GL_SAMPLER_2D_SHADOW_ARB;
   case slang_spec_array:
      return gl_type_from_specifier(type->_array);
   default:
      return GL_FLOAT;
   }
}

static GLboolean
build_quant(slang_export_data_quant * q, const slang_variable * var)
{
   const slang_type_specifier *spec = &var->type.specifier;

   q->name = var->a_name;
   q->size = var->size;
   if (spec->type == slang_spec_array) {
      q->array_len = var->array_len;
      q->size /= var->array_len;
      spec = spec->_array;
   }
   if (spec->type == slang_spec_struct) {
      GLuint i;

      q->u.field_count = spec->_struct->fields->num_variables;
      q->structure = (slang_export_data_quant *)
         slang_alloc_malloc(q->u.field_count
                            * sizeof(slang_export_data_quant));
      if (q->structure == NULL)
         return GL_FALSE;

      for (i = 0; i < q->u.field_count; i++)
         slang_export_data_quant_ctr(&q->structure[i]);
      for (i = 0; i < q->u.field_count; i++) {
         if (!build_quant(&q->structure[i],
                          &spec->_struct->fields->variables[i]))
            return GL_FALSE;
      }
   }
   else
      q->u.basic_type = gl_type_from_specifier(spec);
   return GL_TRUE;
}

GLboolean
_slang_build_export_data_table(slang_export_data_table * tbl,
                               slang_variable_scope * vars)
{
   GLuint i;

   for (i = 0; i < vars->num_variables; i++) {
      const slang_variable *var = &vars->variables[i];
      slang_export_data_entry *e;

      e = slang_export_data_table_add(tbl);
      if (e == NULL)
         return GL_FALSE;
      if (!build_quant(&e->quant, var))
         return GL_FALSE;
      if (var->type.qualifier == slang_qual_uniform)
         e->access = slang_exp_uniform;
      else if (var->type.qualifier == slang_qual_attribute)
         e->access = slang_exp_attribute;
      else
         e->access = slang_exp_varying;
      e->address = var->address;
   }

   if (vars->outer_scope != NULL)
      return _slang_build_export_data_table(tbl, vars->outer_scope);
   return GL_TRUE;
d370 1
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d3 1
a3 1
 * Version:  6.5.3
d5 1
a5 1
 * Copyright (C) 2005-2007  Brian Paul   All Rights Reserved.
a32 1
#include "slang_mem.h"
d34 1
d43 23
a65 31
   {"void", SLANG_SPEC_VOID},
   {"bool", SLANG_SPEC_BOOL},
   {"bvec2", SLANG_SPEC_BVEC2},
   {"bvec3", SLANG_SPEC_BVEC3},
   {"bvec4", SLANG_SPEC_BVEC4},
   {"int", SLANG_SPEC_INT},
   {"ivec2", SLANG_SPEC_IVEC2},
   {"ivec3", SLANG_SPEC_IVEC3},
   {"ivec4", SLANG_SPEC_IVEC4},
   {"float", SLANG_SPEC_FLOAT},
   {"vec2", SLANG_SPEC_VEC2},
   {"vec3", SLANG_SPEC_VEC3},
   {"vec4", SLANG_SPEC_VEC4},
   {"mat2", SLANG_SPEC_MAT2},
   {"mat3", SLANG_SPEC_MAT3},
   {"mat4", SLANG_SPEC_MAT4},
   {"mat2x3", SLANG_SPEC_MAT23},
   {"mat3x2", SLANG_SPEC_MAT32},
   {"mat2x4", SLANG_SPEC_MAT24},
   {"mat4x2", SLANG_SPEC_MAT42},
   {"mat3x4", SLANG_SPEC_MAT34},
   {"mat4x3", SLANG_SPEC_MAT43},
   {"sampler1D", SLANG_SPEC_SAMPLER1D},
   {"sampler2D", SLANG_SPEC_SAMPLER2D},
   {"sampler3D", SLANG_SPEC_SAMPLER3D},
   {"samplerCube", SLANG_SPEC_SAMPLERCUBE},
   {"sampler1DShadow", SLANG_SPEC_SAMPLER1DSHADOW},
   {"sampler2DShadow", SLANG_SPEC_SAMPLER2DSHADOW},
   {"sampler2DRect", SLANG_SPEC_SAMPLER2DRECT},
   {"sampler2DRectShadow", SLANG_SPEC_SAMPLER2DRECTSHADOW},
   {NULL, SLANG_SPEC_VOID}
d97 1
a97 1
   type->qualifier = SLANG_QUAL_NONE;
a125 23

static slang_variable *
slang_variable_new(void)
{
   slang_variable *v = (slang_variable *) _slang_alloc(sizeof(slang_variable));
   if (v) {
      if (!slang_variable_construct(v)) {
         _slang_free(v);
         v = NULL;
      }
   }
   return v;
}


static void
slang_variable_delete(slang_variable * var)
{
   slang_variable_destruct(var);
   _slang_free(var);
}


a129 11
slang_variable_scope *
_slang_variable_scope_new(slang_variable_scope *parent)
{
   slang_variable_scope *s;
   s = (slang_variable_scope *) _slang_alloc(sizeof(slang_variable_scope));
   if (s)
      s->outer_scope = parent;
   return s;
}


d145 3
a147 5
   for (i = 0; i < scope->num_variables; i++) {
      if (scope->variables[i])
         slang_variable_delete(scope->variables[i]);
   }
   _slang_free(scope->variables);
d159 2
a160 2
   z.variables = (slang_variable **)
      _slang_alloc(y->num_variables * sizeof(slang_variable *));
d167 1
a167 2
      z.variables[z.num_variables] = slang_variable_new();
      if (!z.variables[z.num_variables]) {
d173 1
a173 1
      if (!slang_variable_copy(z.variables[i], y->variables[i])) {
d193 4
a196 4
   scope->variables = (slang_variable **)
         _slang_realloc(scope->variables,
                        n * sizeof(slang_variable *),
                        (n + 1) * sizeof(slang_variable *));
d202 1
a202 2
   scope->variables[n] = slang_variable_new();
   if (!scope->variables[n])
d205 1
a205 1
   return scope->variables[n];
d221 1
d223 1
a223 2
   var->isTemp = GL_FALSE;
   var->aux = NULL;
a226 1

d233 1
a233 5
      _slang_free(var->initializer);
   }
#if 0
   if (var->aux) {
      _mesa_free(var->aux);
a234 1
#endif
a236 1

d251 2
a252 2
      z.initializer
         = (slang_operation *) _slang_alloc(sizeof(slang_operation));
d258 1
a258 1
         _slang_free(z.initializer);
d269 1
a274 1

d282 2
a283 2
      if (a_name == scope->variables[i]->a_name)
         return scope->variables[i];
d287 121
@


