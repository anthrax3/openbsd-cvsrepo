head	1.3;
access;
symbols
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.3.0.6
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2011.10.23.13.37.45;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.08;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.47;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.31.47;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 7.10.3
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  6.5.2
 *
 * Copyright (C) 2005-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef SLANG_COMPILE_FUNCTION_H
#define SLANG_COMPILE_FUNCTION_H


/**
 * Types of functions.
 */
typedef enum slang_function_kind_
{
   SLANG_FUNC_ORDINARY,
   SLANG_FUNC_CONSTRUCTOR,
   SLANG_FUNC_OPERATOR
} slang_function_kind;


/**
 * Description of a compiled shader function.
 */
typedef struct slang_function_
{
   slang_function_kind kind;
   slang_variable header;      /**< The function's name and return type */
   slang_variable_scope *parameters; /**< formal parameters AND local vars */
   unsigned int param_count;   /**< number of formal params (no locals) */
   slang_operation *body;      /**< The instruction tree */
} slang_function;

extern int slang_function_construct(slang_function *);
extern void slang_function_destruct(slang_function *);
extern slang_function *slang_function_new(slang_function_kind kind);

extern GLboolean
_slang_function_has_return_value(const slang_function *fun);


/**
 * Basically, a list of compiled functions.
 */
typedef struct slang_function_scope_
{
   slang_function *functions;
   GLuint num_functions;
   struct slang_function_scope_ *outer_scope;
} slang_function_scope;


extern GLvoid
_slang_function_scope_ctr(slang_function_scope *);

extern void
slang_function_scope_destruct(slang_function_scope *);

extern int
slang_function_scope_find_by_name(slang_function_scope *, slang_atom, int);

extern slang_function *
slang_function_scope_find(slang_function_scope *, slang_function *, int);

extern struct slang_function_ *
_slang_function_locate(const struct slang_function_scope_ *funcs,
                       slang_atom name, struct slang_operation_ *params,
                       GLuint num_params,
                       const struct slang_name_space_ *space,
                       slang_atom_pool *atoms, slang_info_log *log,
                       GLboolean *error);


#endif /* SLANG_COMPILE_FUNCTION_H */
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.5
d25 1
a25 1
#if !defined SLANG_COMPILE_FUNCTION_H
a27 5
#if defined __cplusplus
extern "C" {
#endif

struct slang_code_unit_;
d29 3
d34 3
a36 3
	slang_func_ordinary,
	slang_func_constructor,
	slang_func_operator
a38 8
typedef struct slang_fixup_table_
{
	GLuint *table;
	GLuint count;
} slang_fixup_table;

void slang_fixup_table_init (slang_fixup_table *);
void slang_fixup_table_free (slang_fixup_table *);
d40 3
d45 5
a49 7
	slang_function_kind kind;
	slang_variable header;
	slang_variable_scope *parameters;
	unsigned int param_count;
	slang_operation *body;
	unsigned int address;
	slang_fixup_table fixups;
d52 7
a58 2
int slang_function_construct (slang_function *);
void slang_function_destruct (slang_function *);
d60 3
d65 1
a65 1
	slang_function *functions;
d67 1
a67 1
	struct slang_function_scope_ *outer_scope;
d70 1
d72 4
a75 1
_slang_function_scope_ctr (slang_function_scope *);
d77 2
a78 3
void slang_function_scope_destruct (slang_function_scope *);
int slang_function_scope_find_by_name (slang_function_scope *, slang_atom, int);
slang_function *slang_function_scope_find (slang_function_scope *, slang_function *, int);
d80 2
a81 3
extern GLboolean
_slang_build_export_code_table (slang_export_code_table *, slang_function_scope *,
                                struct slang_code_unit_ *);
d83 7
a89 3
#ifdef __cplusplus
}
#endif
a90 1
#endif
d92 1
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d3 1
a3 1
 * Version:  6.5.2
d25 1
a25 1
#ifndef SLANG_COMPILE_FUNCTION_H
a33 3
/**
 * Types of functions.
 */
d36 3
a38 3
   slang_func_ordinary,
   slang_func_constructor,
   slang_func_operator
a40 5

/**
 * When we need to fill in addresses which we won't know until the future,
 * we keep track of them with a fix-up table.
 */
d43 2
a44 2
   GLuint *table;     /**< array[count] of addresses */
   GLuint count;
d47 2
a48 4
extern void slang_fixup_table_init(slang_fixup_table *);
extern void slang_fixup_table_free(slang_fixup_table *);
extern GLboolean slang_fixup_save(slang_fixup_table *fixups, GLuint address);

a49 3
/**
 * Description of a compiled shader function.
 */
d52 7
a58 7
   slang_function_kind kind;
   slang_variable header;      /**< The function's name and return type */
   slang_variable_scope *parameters; /**< formal parameters AND local vars */
   unsigned int param_count;   /**< number of formal params (no locals) */
   slang_operation *body;      /**< The instruction tree */
   unsigned int address;       /**< Address of this func in memory */
   slang_fixup_table fixups;   /**< Mem locations which need func's address */
d61 2
a62 3
extern int slang_function_construct(slang_function *);
extern void slang_function_destruct(slang_function *);

a63 3
/**
 * Basically, a list of compiled functions.
 */
d66 1
a66 1
   slang_function *functions;
d68 1
a68 1
   struct slang_function_scope_ *outer_scope;
a70 1

d72 1
a72 7
_slang_function_scope_ctr(slang_function_scope *);

extern void
slang_function_scope_destruct(slang_function_scope *);

extern int
slang_function_scope_find_by_name(slang_function_scope *, slang_atom, int);
d74 3
a76 2
extern slang_function *
slang_function_scope_find(slang_function_scope *, slang_function *, int);
d79 2
a80 4
_slang_build_export_code_table(slang_export_code_table *,
                               slang_function_scope *,
                               struct slang_code_unit_ *);

d86 2
a87 1
#endif /* SLANG_COMPILE_FUNCTION_H */
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d28 3
d39 3
a41 3
   SLANG_FUNC_ORDINARY,
   SLANG_FUNC_CONSTRUCTOR,
   SLANG_FUNC_OPERATOR
a94 3
extern GLboolean
_slang_function_has_return_value(const slang_function *fun);

d100 10
@


