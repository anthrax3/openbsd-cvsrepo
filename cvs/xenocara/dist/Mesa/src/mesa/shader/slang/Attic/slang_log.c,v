head	1.5;
access;
symbols
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2011.10.23.13.37.45;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.33;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.17.31.49;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.31.49;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge Mesa 7.10.3
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  7.3
 *
 * Copyright (C) 2005-2007  Brian Paul   All Rights Reserved.
 * Copyright (C) 2009  VMware, Inc.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include "main/imports.h"
#include "slang_log.h"
#include "slang_utility.h"



static char *out_of_memory = "Error: Out of memory.\n";

void
slang_info_log_construct(slang_info_log * log)
{
   log->text = NULL;
   log->dont_free_text = GL_FALSE;
   log->error_flag = GL_FALSE;
}

void
slang_info_log_destruct(slang_info_log * log)
{
   if (!log->dont_free_text)
      free(log->text);
}

static int
slang_info_log_message(slang_info_log * log, const char *prefix,
                       const char *msg)
{
   GLuint size;

   if (log->dont_free_text)
      return 0;
   size = slang_string_length(msg) + 2;
   if (prefix != NULL)
      size += slang_string_length(prefix) + 2;
   if (log->text != NULL) {
      GLuint old_len = slang_string_length(log->text);
      log->text = (char *)
	 _mesa_realloc(log->text, old_len + 1, old_len + size);
   }
   else {
      log->text = (char *) (malloc(size));
      if (log->text != NULL)
         log->text[0] = '\0';
   }
   if (log->text == NULL)
      return 0;
   if (prefix != NULL) {
      slang_string_concat(log->text, prefix);
      slang_string_concat(log->text, ": ");
   }
   slang_string_concat(log->text, msg);
   slang_string_concat(log->text, "\n");

   return 1;
}

int
slang_info_log_print(slang_info_log * log, const char *msg, ...)
{
   va_list va;
   char buf[1024];

   va_start(va, msg);
   vsprintf(buf, msg, va);
   va_end(va);
   return slang_info_log_message(log, NULL, buf);
}

int
slang_info_log_error(slang_info_log * log, const char *msg, ...)
{
   va_list va;
   char buf[1024];

   va_start(va, msg);
   vsprintf(buf, msg, va);
   va_end(va);
   log->error_flag = GL_TRUE;
   if (slang_info_log_message(log, "Error", buf))
      return 1;
   slang_info_log_memory(log);
   return 0;
}

int
slang_info_log_warning(slang_info_log * log, const char *msg, ...)
{
   va_list va;
   char buf[1024];

   va_start(va, msg);
   vsprintf(buf, msg, va);
   va_end(va);
   if (slang_info_log_message(log, "Warning", buf))
      return 1;
   slang_info_log_memory(log);
   return 0;
}

void
slang_info_log_memory(slang_info_log * log)
{
   if (!slang_info_log_message(log, "Error", "Out of memory.")) {
      log->dont_free_text = GL_TRUE;
      log->error_flag = GL_TRUE;
      log->text = out_of_memory;
   }
}
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a26 1
#include "main/context.h"
d46 1
a46 1
      _mesa_free(log->text);
d66 1
a66 1
      log->text = (char *) (_mesa_malloc(size));
a78 4
   if (MESA_VERBOSE & VERBOSE_GLSL) {
      _mesa_printf("Mesa: GLSL %s", log->text);
   }

d89 1
a89 1
   _mesa_vsprintf(buf, msg, va);
d101 1
a101 1
   _mesa_vsprintf(buf, msg, va);
d117 1
a117 1
   _mesa_vsprintf(buf, msg, va);
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d3 1
a3 1
 * Version:  6.5.3
d6 1
d27 1
a46 3
#if 0
      slang_alloc_free(log->text);
#else
a47 1
#endif
a63 3
#if 0
	 slang_alloc_realloc(log->text, old_len + 1, old_len + size);
#else
a64 1
#endif
a66 3
#if 0
      log->text = (char *) (slang_alloc_malloc(size));
#else
a67 1
#endif
d79 5
a83 3
#if 0 /* debug */
   _mesa_printf("Mesa GLSL error/warning: %s\n", log->text);
#endif
@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
#include "imports.h"
d89 3
@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@
