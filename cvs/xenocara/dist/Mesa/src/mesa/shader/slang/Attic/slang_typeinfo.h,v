head	1.5;
access;
symbols
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2011.10.23.13.37.45;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.33;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.17.31.51;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.31.51;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge Mesa 7.10.3
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  6.5
 *
 * Copyright (C) 2005-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef SLANG_TYPEINFO_H
#define SLANG_TYPEINFO_H 1

#include "main/imports.h"
#include "main/mtypes.h"
#include "slang_log.h"
#include "slang_utility.h"
#include "slang_vartable.h"


struct slang_operation_;

struct slang_name_space_;



/**
 * Holds complete information about vector swizzle - the <swizzle>
 * array contains vector component source indices, where 0 is "x", 1
 * is "y", 2 is "z" and 3 is "w".
 * Example: "xwz" --> { 3, { 0, 3, 2, not used } }.
 */
typedef struct slang_swizzle_
{
   GLuint num_components;
   GLuint swizzle[4];
} slang_swizzle;

extern GLboolean
_slang_is_swizzle(const char *field, GLuint rows, slang_swizzle *swz);


typedef enum slang_type_variant_
{
   SLANG_VARIANT,    /* the default */
   SLANG_INVARIANT   /* indicates the "invariant" keyword */
} slang_type_variant;


typedef enum slang_type_centroid_
{
   SLANG_CENTER,    /* the default */
   SLANG_CENTROID   /* indicates the "centroid" keyword */
} slang_type_centroid;


/**
 * These only apply to gl_FragCoord, but other layout qualifiers may
 * appear in the future.
 */
typedef enum slang_layout_qualifier_
{
   SLANG_LAYOUT_NONE                      = 0x0,
   SLANG_LAYOUT_UPPER_LEFT_BIT            = 0x1,
   SLANG_LAYOUT_PIXEL_CENTER_INTEGER_BIT  = 0x2
} slang_layout_qualifier;


typedef enum slang_type_qualifier_
{
   SLANG_QUAL_NONE,
   SLANG_QUAL_CONST,
   SLANG_QUAL_ATTRIBUTE,
   SLANG_QUAL_VARYING,
   SLANG_QUAL_UNIFORM,
   SLANG_QUAL_OUT,
   SLANG_QUAL_INOUT,
   SLANG_QUAL_FIXEDOUTPUT,      /* internal */
   SLANG_QUAL_FIXEDINPUT        /* internal */
} slang_type_qualifier;


typedef enum slang_type_precision_
{
   SLANG_PREC_DEFAULT,
   SLANG_PREC_LOW,
   SLANG_PREC_MEDIUM,
   SLANG_PREC_HIGH
} slang_type_precision;


/**
 * The basic shading language types (float, vec4, mat3, etc)
 */
typedef enum slang_type_specifier_type_
{
   SLANG_SPEC_VOID,
   SLANG_SPEC_BOOL,
   SLANG_SPEC_BVEC2,
   SLANG_SPEC_BVEC3,
   SLANG_SPEC_BVEC4,
   SLANG_SPEC_INT,
   SLANG_SPEC_IVEC2,
   SLANG_SPEC_IVEC3,
   SLANG_SPEC_IVEC4,
   SLANG_SPEC_FLOAT,
   SLANG_SPEC_VEC2,
   SLANG_SPEC_VEC3,
   SLANG_SPEC_VEC4,
   SLANG_SPEC_MAT2,
   SLANG_SPEC_MAT3,
   SLANG_SPEC_MAT4,
   SLANG_SPEC_MAT23,
   SLANG_SPEC_MAT32,
   SLANG_SPEC_MAT24,
   SLANG_SPEC_MAT42,
   SLANG_SPEC_MAT34,
   SLANG_SPEC_MAT43,
   SLANG_SPEC_SAMPLER_1D,
   SLANG_SPEC_SAMPLER_2D,
   SLANG_SPEC_SAMPLER_3D,
   SLANG_SPEC_SAMPLER_CUBE,
   SLANG_SPEC_SAMPLER_RECT,
   SLANG_SPEC_SAMPLER_1D_SHADOW,
   SLANG_SPEC_SAMPLER_2D_SHADOW,
   SLANG_SPEC_SAMPLER_RECT_SHADOW,
   SLANG_SPEC_SAMPLER_1D_ARRAY,
   SLANG_SPEC_SAMPLER_2D_ARRAY,
   SLANG_SPEC_SAMPLER_1D_ARRAY_SHADOW,
   SLANG_SPEC_SAMPLER_2D_ARRAY_SHADOW,
   SLANG_SPEC_STRUCT,
   SLANG_SPEC_ARRAY
} slang_type_specifier_type;


extern slang_type_specifier_type
slang_type_specifier_type_from_string(const char *);

extern const char *
slang_type_specifier_type_to_string(slang_type_specifier_type);


/**
 * Describes more sophisticated types, like structs and arrays.
 */
typedef struct slang_type_specifier_
{
   slang_type_specifier_type type;
   struct slang_struct_ *_struct;         /**< if type == SLANG_SPEC_STRUCT */
   struct slang_type_specifier_ *_array;  /**< if type == SLANG_SPEC_ARRAY */
} slang_type_specifier;


extern GLvoid
slang_type_specifier_ctr(slang_type_specifier *);

extern GLvoid
slang_type_specifier_dtr(slang_type_specifier *);

extern slang_type_specifier *
slang_type_specifier_new(slang_type_specifier_type type,
                         struct slang_struct_ *_struct,
                         struct slang_type_specifier_ *_array);


extern GLboolean
slang_type_specifier_copy(slang_type_specifier *, const slang_type_specifier *);

extern GLboolean
slang_type_specifier_equal(const slang_type_specifier *,
                           const slang_type_specifier *);


extern GLboolean
slang_type_specifier_compatible(const slang_type_specifier *x,
                                const slang_type_specifier *y);


typedef struct slang_fully_specified_type_
{
   slang_type_qualifier qualifier;
   slang_type_specifier specifier;
   slang_type_precision precision;
   slang_type_variant variant;
   slang_type_centroid centroid;
   slang_layout_qualifier layout;
   GLint array_len;           /**< -1 if not an array type */
} slang_fully_specified_type;

extern int
slang_fully_specified_type_construct(slang_fully_specified_type *);

extern void
slang_fully_specified_type_destruct(slang_fully_specified_type *);

extern int
slang_fully_specified_type_copy(slang_fully_specified_type *,
				const slang_fully_specified_type *);

GLboolean
slang_fully_specified_types_compatible(const slang_fully_specified_type * x,
                                       const slang_fully_specified_type * y);


typedef struct slang_typeinfo_
{
   GLboolean can_be_referenced;
   GLboolean is_swizzled;
   slang_swizzle swz;
   slang_type_specifier spec;
   GLuint array_len;
} slang_typeinfo;

extern GLboolean
slang_typeinfo_construct(slang_typeinfo *);

extern GLvoid
slang_typeinfo_destruct(slang_typeinfo *);


extern GLboolean
_slang_typeof_operation(struct slang_operation_ *,
                         const struct slang_name_space_ *,
                         slang_typeinfo *, slang_atom_pool *,
                         slang_info_log *log);

extern GLboolean
_slang_type_is_matrix(slang_type_specifier_type);

extern GLboolean
_slang_type_is_vector(slang_type_specifier_type);

extern GLboolean
_slang_type_is_float_vec_mat(slang_type_specifier_type);

extern slang_type_specifier_type
_slang_type_base(slang_type_specifier_type);

extern GLuint
_slang_type_dim(slang_type_specifier_type);

extern GLenum
_slang_gltype_from_specifier(const slang_type_specifier *type);

#endif
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d71 12
d133 12
a144 8
   SLANG_SPEC_SAMPLER1D,
   SLANG_SPEC_SAMPLER2D,
   SLANG_SPEC_SAMPLER3D,
   SLANG_SPEC_SAMPLERCUBE,
   SLANG_SPEC_SAMPLER2DRECT,
   SLANG_SPEC_SAMPLER1DSHADOW,
   SLANG_SPEC_SAMPLER2DSHADOW,
   SLANG_SPEC_SAMPLER2DRECTSHADOW,
d189 2
a190 2
slang_type_specifier_compatible(const slang_type_specifier * x,
                                const slang_type_specifier * y);
d200 1
d214 3
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d37 3
d53 12
a64 1
typedef struct slang_name_space_
d66 3
a68 26
   struct slang_function_scope_ *funcs;
   struct slang_struct_scope_ *structs;
   struct slang_variable_scope_ *vars;
} slang_name_space;


typedef struct slang_assemble_ctx_
{
   slang_atom_pool *atoms;
   slang_name_space space;
   struct gl_program *program;
   slang_var_table *vartable;
   slang_info_log *log;
   struct slang_label_ *curFuncEndLabel;
   struct slang_ir_node_ *CurLoop;
   struct slang_function_ *CurFunction;
} slang_assemble_ctx;


extern struct slang_function_ *
_slang_locate_function(const struct slang_function_scope_ *funcs,
                       slang_atom name, struct slang_operation_ *params,
                       GLuint num_params,
                       const slang_name_space *space,
                       slang_atom_pool *atoms, slang_info_log *log,
                       GLboolean *error);
d71 12
a82 2
extern GLboolean
_slang_is_swizzle(const char *field, GLuint rows, slang_swizzle *swz);
a83 2
extern GLboolean
_slang_is_swizzle_mask(const slang_swizzle *swz, GLuint rows);
d85 7
a91 3
extern GLvoid
_slang_multiply_swizzles(slang_swizzle *, const slang_swizzle *,
                         const slang_swizzle *);
d134 7
d147 2
a148 2
   struct slang_struct_ *_struct;         /**< used if type == spec_struct */
   struct slang_type_specifier_ *_array;  /**< used if type == spec_array */
d158 6
d172 27
a214 10
/**
 * Retrieves type information about an operation.
 * Returns GL_TRUE on success.
 * Returns GL_FALSE otherwise.
 */
extern GLboolean
_slang_typeof_operation(const slang_assemble_ctx *,
                        struct slang_operation_ *,
                        slang_typeinfo *);

d216 2
a217 2
_slang_typeof_operation_(struct slang_operation_ *,
                         const slang_name_space *,
@


1.1
log
@Initial revision
@
text
@d28 2
a29 2
#include "imports.h"
#include "mtypes.h"
d76 2
a77 1
                       slang_atom_pool *atoms, slang_info_log *log);
d193 3
@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@
