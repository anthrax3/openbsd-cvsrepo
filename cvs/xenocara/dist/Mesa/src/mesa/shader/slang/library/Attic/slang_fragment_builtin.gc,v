head	1.3;
access;
symbols
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.10
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.8
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.6
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2011.10.23.13.37.45;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2010.05.22.20.06.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.17.31.58;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.31.58;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 7.10.3
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  6.5
 *
 * Copyright (C) 2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

//
// From Shader Spec, ver. 1.10, rev. 59
//

__fixed_input vec4 gl_FragCoord;
__fixed_input bool gl_FrontFacing;
__fixed_output vec4 gl_FragColor;
__fixed_output vec4 gl_FragData[gl_MaxDrawBuffers];
__fixed_output float gl_FragDepth;

varying vec4 gl_Color;
varying vec4 gl_SecondaryColor;
varying vec4 gl_TexCoord[gl_MaxTextureCoords];
varying float gl_FogFragCoord;



//// 8.7 Texture Lookup Functions (with bias)

vec4 texture1D(const sampler1D sampler, const float coord, const float bias)
{
   vec4 coord4;
   coord4.x = coord;
   coord4.w = bias;
   __asm vec4_tex_1d_bias __retVal, sampler, coord4;
}

vec4 texture1DProj(const sampler1D sampler, const vec2 coord, const float bias)
{
   // do projection here (there's no vec4_texbp1d instruction)
   vec4 pcoord;
   pcoord.x = coord.x / coord.y;
   pcoord.w = bias;
   __asm vec4_tex_1d_bias __retVal, sampler, pcoord;
}

vec4 texture1DProj(const sampler1D sampler, const vec4 coord, const float bias)
{
   // do projection here (there's no vec4_texbp1d instruction)
   vec4 pcoord;
   pcoord.x = coord.x / coord.z;
   pcoord.w = bias;
   __asm vec4_tex_1d_bias __retVal, sampler, pcoord;
}




vec4 texture2D(const sampler2D sampler, const vec2 coord, const float bias)
{
   vec4 coord4;
   coord4.xy = coord.xy;
   coord4.w = bias;
   __asm vec4_tex_2d_bias __retVal, sampler, coord4;
}

vec4 texture2DProj(const sampler2D sampler, const vec3 coord, const float bias)
{
   // do projection here (there's no vec4_texbp2d instruction)
   vec4 pcoord;
   pcoord.xy = coord.xy / coord.z;
   pcoord.w = bias;
   __asm vec4_tex_2d_bias __retVal, sampler, pcoord;
}

vec4 texture2DProj(const sampler2D sampler, const vec4 coord, const float bias)
{
   // do projection here (there's no vec4_texbp2d instruction)
   vec4 pcoord;
   pcoord.xy = coord.xy / coord.w;
   pcoord.w = bias;
   __asm vec4_tex_2d_bias __retVal, sampler, pcoord;
}




vec4 texture3D(const sampler3D sampler, const vec3 coord, const float bias)
{
   vec4 coord4;
   coord4.xyz = coord.xyz;
   coord4.w = bias;
   __asm vec4_tex_3d_bias __retVal, sampler, coord4;
}

vec4 texture3DProj(const sampler3D sampler, const vec4 coord, const float bias)
{
   // do projection here (there's no vec4_texbp3d instruction)
   vec4 pcoord;
   pcoord.xyz = coord.xyz / coord.w;
   pcoord.w = bias;
   __asm vec4_tex_3d_bias __retVal, sampler, pcoord;
}




vec4 textureCube(const samplerCube sampler, const vec3 coord, const float bias)
{
   vec4 coord4;
   coord4.xyz = coord;
   coord4.w = bias;
   __asm vec4_tex_cube __retVal, sampler, coord4;
}



vec4 shadow1D(const sampler1DShadow sampler, const vec3 coord, const float bias)
{
   vec4 coord4;
   coord4.xyz = coord;
   coord4.w = bias;
   __asm vec4_tex_1d_bias_shadow __retVal, sampler, coord4;
}

vec4 shadow1DProj(const sampler1DShadow sampler, const vec4 coord, const float bias)
{
   vec4 pcoord;
   pcoord.x = coord.x / coord.w;
   pcoord.z = coord.z;
   pcoord.w = bias;
   __asm vec4_tex_1d_bias_shadow __retVal, sampler, pcoord;
}

vec4 shadow2D(const sampler2DShadow sampler, const vec3 coord, const float bias)
{
   vec4 coord4;
   coord4.xyz = coord;
   coord4.w = bias;
   __asm vec4_tex_2d_bias_shadow __retVal, sampler, coord4;
}

vec4 shadow2DProj(const sampler2DShadow sampler, const vec4 coord, const float bias)
{
   vec4 pcoord;
   pcoord.xy = coord.xy / coord.w;
   pcoord.z = coord.z;
   pcoord.w = bias;
   __asm vec4_tex_2d_bias_shadow __retVal, sampler, pcoord;
}



//// GL_EXT_texture_array

vec4 texture1DArray(const sampler1DArray sampler, const vec2 coord)
{
   vec4 coord4;
   coord4.xy = coord;
   __asm vec4_tex_1d_array __retVal, sampler, coord4;
}

vec4 texture1DArray(const sampler1DArray sampler, const vec2 coord, const float bias)
{
   vec4 coord4;
   coord4.xy = coord;
   coord4.w = bias;
   __asm vec4_tex_1d_array_bias __retVal, sampler, coord4;
}

vec4 texure2DArray(const sampler2DArray sampler, const vec3 coord)
{
   vec4 coord4;
   coord4.xyz = coord;
   __asm vec4_tex_2d_array __retVal, sampler, coord4;
}

vec4 texture2DArray(const sampler2DArray sampler, const vec3 coord, const float bias)
{
   vec4 coord4;
   coord4.xyz = coord;
   coord4.w = bias;
   __asm vec4_tex_2d_array_bias __retVal, sampler, coord4;
}

vec4 shadow1DArray(const sampler1DArrayShadow sampler, const vec2 coord)
{
   vec4 coord4;
   coord4.xy = coord;
   __asm vec4_tex_1d_array_shadow __retVal, sampler, coord4;
}

vec4 shadow1DArray(const sampler1DArrayShadow sampler, const vec2 coord, const float bias)
{
   vec4 coord4;
   coord4.xy = coord;
   coord4.w = bias;
   __asm vec4_tex_1d_array_bias_shadow __retVal, sampler, coord4;
}

vec4 shadow2DArray(const sampler2DArrayShadow sampler, const vec3 coord)
{
   vec4 coord4;
   coord4.xyz = coord;
   __asm vec4_tex_2d_array_shadow __retVal, sampler, coord4;
}

vec4 shadow2DArray(const sampler2DArrayShadow sampler, const vec3 coord, const float bias)
{
   vec4 coord4;
   coord4.xyz = coord;
   coord4.w = bias;
   __asm vec4_tex_2d_array_bias_shadow __retVal, sampler, coord4;
}



//
// 8.8 Fragment Processing Functions
//

float dFdx(const float p)
{
   __asm vec4_ddx __retVal.x, p.xxxx;
}

vec2 dFdx(const vec2 p)
{
   __asm vec4_ddx __retVal.xy, p.xyyy;
}

vec3 dFdx(const vec3 p)
{
   __asm vec4_ddx __retVal.xyz, p.xyzz;
}

vec4 dFdx(const vec4 p)
{
   __asm vec4_ddx __retVal, p;
}

float dFdy(const float p)
{
   __asm vec4_ddy __retVal.x, p.xxxx;
}

vec2 dFdy(const vec2 p)
{
   __asm vec4_ddy __retVal.xy, p.xyyy;
}

vec3 dFdy(const vec3 p)
{
   __asm vec4_ddy __retVal.xyz, p.xyzz;
}

vec4 dFdy(const vec4 p)
{
   __asm vec4_ddy __retVal, p;
}

float fwidth (const float p)
{
   // XXX hand-write with __asm
   return abs(dFdx(p)) + abs(dFdy(p));
}

vec2 fwidth(const vec2 p)
{
   // XXX hand-write with __asm
   return abs(dFdx(p)) + abs(dFdy(p));
}

vec3 fwidth(const vec3 p)
{
   // XXX hand-write with __asm
   return abs(dFdx(p)) + abs(dFdy(p));
}

vec4 fwidth(const vec4 p)
{
   // XXX hand-write with __asm
   return abs(dFdx(p)) + abs(dFdy(p));
}

@


1.2
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@@


1.1
log
@Initial revision
@
text
@d49 1
a49 1
   __asm vec4_texb1d __retVal, sampler, coord4;
d58 1
a58 1
   __asm vec4_texb1d __retVal, sampler, pcoord;
d67 1
a67 1
   __asm vec4_texb1d __retVal, sampler, pcoord;
d78 1
a78 1
   __asm vec4_texb2d __retVal, sampler, coord4;
d87 1
a87 1
   __asm vec4_texb2d __retVal, sampler, pcoord;
d96 1
a96 1
   __asm vec4_texb2d __retVal, sampler, pcoord;
d107 1
a107 1
   __asm vec4_texb3d __retVal, sampler, coord4;
d116 1
a116 1
   __asm vec4_texb3d __retVal, sampler, pcoord;
d127 1
a127 1
   __asm vec4_texcube __retVal, sampler, coord4;
a131 4

// For shadow textures, we use the regular tex instructions since they should
// do the depth comparison step.

d137 1
a137 1
   __asm vec4_texb1d __retVal, sampler, coord4;
d146 1
a146 1
   __asm vec4_texb1d __retVal, sampler, pcoord;
d154 1
a154 1
   __asm vec4_texb2d __retVal, sampler, coord4;
d163 65
a227 1
   __asm vec4_texb2d __retVal, sampler, pcoord;
@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@
