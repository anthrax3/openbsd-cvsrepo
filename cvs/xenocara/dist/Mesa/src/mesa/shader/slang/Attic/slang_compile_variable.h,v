head	1.5;
access;
symbols
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2011.10.23.13.37.45;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.33;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.08;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.47;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.31.47;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge Mesa 7.10.3
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  6.5.2
 *
 * Copyright (C) 2005-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef SLANG_COMPILE_VARIABLE_H
#define SLANG_COMPILE_VARIABLE_H


struct slang_ir_storage_;


/**
 * A shading language program variable.
 */
typedef struct slang_variable_
{
   slang_fully_specified_type type; /**< Variable's data type */
   slang_atom a_name;               /**< The variable's name (char *) */
   GLuint array_len;                /**< only if type == SLANG_SPEC_ARRAy */
   struct slang_operation_ *initializer; /**< Optional initializer code */
   GLuint size;                     /**< Variable's size in bytes */
   GLboolean is_global;
   GLboolean isTemp;                /**< a named temporary (__resultTmp) */
   GLboolean declared;              /**< has the var been declared? */
   struct slang_ir_storage_ *store; /**< Storage for this var */
} slang_variable;


/**
 * Basically a list of variables, with a pointer to the parent scope.
 */
typedef struct slang_variable_scope_
{
   slang_variable **variables;  /**< Array [num_variables] of ptrs to vars */
   GLuint num_variables;
   struct slang_variable_scope_ *outer_scope;
} slang_variable_scope;


extern slang_variable_scope *
_slang_variable_scope_new(slang_variable_scope *parent);

extern GLvoid
_slang_variable_scope_ctr(slang_variable_scope *);

extern void
slang_variable_scope_destruct(slang_variable_scope *);

extern int
slang_variable_scope_copy(slang_variable_scope *,
                          const slang_variable_scope *);

extern slang_variable *
slang_variable_scope_grow(slang_variable_scope *);

extern int
slang_variable_construct(slang_variable *);

extern void
slang_variable_destruct(slang_variable *);

extern int
slang_variable_copy(slang_variable *, const slang_variable *);

extern slang_variable *
_slang_variable_locate(const slang_variable_scope *, const slang_atom a_name,
                       GLboolean all);


#endif /* SLANG_COMPILE_VARIABLE_H */
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d42 1
d44 1
a44 1
   GLboolean declared;              /**< for debug */
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a27 3
#if defined __cplusplus
extern "C" {
#endif
d29 1
a29 47

typedef enum slang_type_qualifier_
{
   SLANG_QUAL_NONE,
   SLANG_QUAL_CONST,
   SLANG_QUAL_ATTRIBUTE,
   SLANG_QUAL_VARYING,
   SLANG_QUAL_UNIFORM,
   SLANG_QUAL_OUT,
   SLANG_QUAL_INOUT,
   SLANG_QUAL_FIXEDOUTPUT,      /* internal */
   SLANG_QUAL_FIXEDINPUT        /* internal */
} slang_type_qualifier;

extern slang_type_specifier_type
slang_type_specifier_type_from_string(const char *);

extern const char *
slang_type_specifier_type_to_string(slang_type_specifier_type);



typedef enum slang_type_precision_
{
   SLANG_PREC_DEFAULT,
   SLANG_PREC_LOW,
   SLANG_PREC_MEDIUM,
   SLANG_PREC_HIGH
} slang_type_precision;


typedef struct slang_fully_specified_type_
{
   slang_type_qualifier qualifier;
   slang_type_specifier specifier;
   slang_type_precision precision;
} slang_fully_specified_type;

extern int
slang_fully_specified_type_construct(slang_fully_specified_type *);

extern void
slang_fully_specified_type_destruct(slang_fully_specified_type *);

extern int
slang_fully_specified_type_copy(slang_fully_specified_type *,
				const slang_fully_specified_type *);
a40 1
   GLuint address;                  /**< Storage location */
d44 1
a44 1
   void *aux;                       /**< Used during code gen */
d85 1
a85 1
_slang_locate_variable(const slang_variable_scope *, const slang_atom a_name,
a87 4

#ifdef __cplusplus
}
#endif
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.5
d25 1
a25 1
#if !defined SLANG_COMPILE_VARIABLE_H
d32 1
d35 9
a43 9
	slang_qual_none,
	slang_qual_const,
	slang_qual_attribute,
	slang_qual_varying,
	slang_qual_uniform,
	slang_qual_out,
	slang_qual_inout,
	slang_qual_fixedoutput,	/* internal */
	slang_qual_fixedinput	/* internal */
d46 16
a61 2
slang_type_specifier_type slang_type_specifier_type_from_string (const char *);
const char *slang_type_specifier_type_to_string (slang_type_specifier_type);
d65 3
a67 2
	slang_type_qualifier qualifier;
	slang_type_specifier specifier;
d70 2
a71 3
int slang_fully_specified_type_construct (slang_fully_specified_type *);
void slang_fully_specified_type_destruct (slang_fully_specified_type *);
int slang_fully_specified_type_copy (slang_fully_specified_type *, const slang_fully_specified_type *);
d73 28
d103 1
a103 1
	struct slang_variable_ *variables;
d105 1
a105 1
	struct slang_variable_scope_ *outer_scope;
d108 4
d113 8
a120 1
_slang_variable_scope_ctr (slang_variable_scope *);
d122 2
a123 2
void slang_variable_scope_destruct (slang_variable_scope *);
int slang_variable_scope_copy (slang_variable_scope *, const slang_variable_scope *);
d125 5
a129 10
typedef struct slang_variable_
{
	slang_fully_specified_type type;
	slang_atom a_name;
	GLuint array_len;					/* type: spec_array */
	struct slang_operation_ *initializer;
	unsigned int address;
	unsigned int size;
	int global;
} slang_variable;
d131 2
a132 3
int slang_variable_construct (slang_variable *);
void slang_variable_destruct (slang_variable *);
int slang_variable_copy (slang_variable *, const slang_variable *);
d134 3
a136 1
slang_variable *_slang_locate_variable (slang_variable_scope *, slang_atom a_name, GLboolean all);
a137 1
GLboolean _slang_build_export_data_table (slang_export_data_table *, slang_variable_scope *);
d143 1
a143 2
#endif

@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d3 1
a3 1
 * Version:  6.5.2
d25 1
a25 1
#ifndef SLANG_COMPILE_VARIABLE_H
a31 1

d34 9
a42 9
   slang_qual_none,
   slang_qual_const,
   slang_qual_attribute,
   slang_qual_varying,
   slang_qual_uniform,
   slang_qual_out,
   slang_qual_inout,
   slang_qual_fixedoutput,      /* internal */
   slang_qual_fixedinput        /* internal */
d45 2
a46 7
extern slang_type_specifier_type
slang_type_specifier_type_from_string(const char *);

extern const char *
slang_type_specifier_type_to_string(slang_type_specifier_type);


d50 2
a51 2
   slang_type_qualifier qualifier;
   slang_type_specifier specifier;
d54 3
a56 27
extern int
slang_fully_specified_type_construct(slang_fully_specified_type *);

extern void
slang_fully_specified_type_destruct(slang_fully_specified_type *);

extern int
slang_fully_specified_type_copy(slang_fully_specified_type *,
				const slang_fully_specified_type *);


/**
 * A shading language program variable.
 */
typedef struct slang_variable_
{
   slang_fully_specified_type type; /**< Variable's data type */
   slang_atom a_name;               /**< The variable's name (char *) */
   GLuint array_len;                /**< only if type == slang_spec_array */
   struct slang_operation_ *initializer; /**< Optional initializer code */
   GLuint address;                  /**< Storage location */
   GLuint address2;                 /**< Storage location */
   GLuint size;                     /**< Variable's size in bytes */
   GLboolean global;                /**< A global var? */
   void *aux;                       /**< Used during code gen */
} slang_variable;

a57 3
/**
 * Basically a list of variables, with a pointer to the parent scope.
 */
d60 1
a60 1
   slang_variable *variables;  /**< Array [num_variables] */
d62 1
a62 1
   struct slang_variable_scope_ *outer_scope;
d66 1
a66 1
_slang_variable_scope_ctr(slang_variable_scope *);
d68 2
a69 2
extern void
slang_variable_scope_destruct(slang_variable_scope *);
d71 10
a80 6
extern int
slang_variable_scope_copy(slang_variable_scope *,
                          const slang_variable_scope *);

slang_variable *
slang_variable_scope_grow(slang_variable_scope *);
d82 3
a84 16
extern int
slang_variable_construct(slang_variable *);

extern void
slang_variable_destruct(slang_variable *);

extern int
slang_variable_copy(slang_variable *, const slang_variable *);

extern slang_variable *
_slang_locate_variable(const slang_variable_scope *, const slang_atom a_name,
                       GLboolean all);

extern GLboolean
_slang_build_export_data_table(slang_export_data_table *,
                               slang_variable_scope *);
d86 1
d88 1
d94 2
a95 1
#endif /* SLANG_COMPILE_VARIABLE_H */
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d35 9
a43 9
   SLANG_QUAL_NONE,
   SLANG_QUAL_CONST,
   SLANG_QUAL_ATTRIBUTE,
   SLANG_QUAL_VARYING,
   SLANG_QUAL_UNIFORM,
   SLANG_QUAL_OUT,
   SLANG_QUAL_INOUT,
   SLANG_QUAL_FIXEDOUTPUT,      /* internal */
   SLANG_QUAL_FIXEDINPUT        /* internal */
d78 1
a78 1
   GLuint array_len;                /**< only if type == SLANG_SPEC_ARRAy */
d81 1
d83 1
a83 1
   GLboolean isTemp;                /**< a named temporary (__resultTmp) */
d93 1
a93 1
   slang_variable **variables;  /**< Array [num_variables] of ptrs to vars */
a97 4

extern slang_variable_scope *
_slang_variable_scope_new(slang_variable_scope *parent);

d108 1
a108 1
extern slang_variable *
d123 5
@


