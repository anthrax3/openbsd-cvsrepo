head	1.4;
access;
symbols
	OPENBSD_5_0:1.3.0.10
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2011.10.23.13.37.45;	author matthieu;	state dead;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.17.31.56;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.31.56;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge Mesa 7.10.3
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  6.5
 *
 * Copyright (C) 2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

//
// This file defines nearly all constructors and operators for built-in data
// types, using extended language syntax. In general, compiler treats
// constructors and operators as ordinary functions with some exceptions.
// For example, the language does not allow functions to be called in
// constant expressions - here the exception is made to allow it.
//
// Each implementation provides its own version of this file. Each
// implementation can define the required set of operators and constructors
// in its own fashion.
//
// The extended language syntax is only present when compiling this file.
// It is implicitly included at the very beginning of the compiled shader,
// so no built-in functions can be used.
//
// To communicate with the implementation, a special extended "__asm" keyword
// is used, followed by an instruction name (any valid identifier), a
// destination variable identifier and a list of zero or more source
// variable identifiers.
//
// A variable identifier is a variable name declared earlier in the code
// (as a function parameter, local or global variable).
//
// An instruction name designates an instruction that must be exported
// by the implementation.  Each instruction receives data from source
// variable identifiers and returns data in the destination variable
// identifier.
//
// It is up to the implementation how to define a particular operator
// or constructor. If it is expected to being used rarely, it can be
// defined in terms of other operators and constructors,
// for example:
//
// ivec2 __operator + (const ivec2 x, const ivec2 y) {
//    return ivec2 (x[0] + y[0], x[1] + y[1]);
// }
//
// If a particular operator or constructor is expected to be used very
// often or is an atomic operation (that is, an operation that cannot be
// expressed in terms of other operations or would create a dependency
// cycle) it must be defined using one or more __asm constructs.
//
// Each implementation must define constructors for all scalar types
// (bool, float, int).  There are 9 scalar-to-scalar constructors
// (including identity constructors). However, since the language
// introduces special constructors (like matrix constructor with a single
// scalar value), implementations must also implement these cases.
// The compiler provides the following algorithm when resolving a constructor:
// - try to find a constructor with a prototype matching ours,
// - if no constructor is found and this is a scalar-to-scalar constructor,
//   raise an error,
// - if a constructor is found, execute it and return,
// - count the size of the constructor parameter list - if it is less than
//   the size of our constructor's type, raise an error,
// - for each parameter in the list do a recursive constructor matching for
//   appropriate scalar fields in the constructed variable,
//
// Each implementation must also define a set of operators that deal with
// built-in data types.
// There are four kinds of operators:
// 1) Operators that are implemented only by the compiler: "()" (function
//    call), "," (sequence) and "?:" (selection).
// 2) Operators that are implemented by the compiler by expressing it in
//    terms of other operators:
//    - "." (field selection) - translated to subscript access,
//    - "&&" (logical and) - translated to "<left_expr> ? <right_expr> :
//      false",
//    - "||" (logical or) - translated to "<left_expr> ? true : <right_expr>",
// 3) Operators that can be defined by the implementation and if the required
//    prototype is not found, standard behaviour is used:
//    - "==", "!=", "=" (equality, assignment) - compare or assign
//      matching fields one-by-one;
//      note that at least operators for scalar data types must be defined
//      by the implementation to get it work,
// 4) All other operators not mentioned above. If no required prototype is
//    found, an error is raised. An implementation must follow the language
//    specification to provide all valid operator prototypes.
//



//// Basic, scalar constructors/casts

int __constructor(const float f)
{
   __asm vec4_to_ivec4 __retVal, f;
}

int __constructor(const bool b)
{
   __retVal = b;
}

int __constructor(const int i)
{
   __retVal = i;
}

bool __constructor(const int i)
{
   __asm vec4_sne __retVal, i, 0.0;
}

bool __constructor(const float f)
{
   __asm vec4_sne __retVal, f, 0.0;
}

bool __constructor(const bool b)
{
   __retVal = b;
}

float __constructor(const int i)
{
    __asm ivec4_to_vec4 __retVal, i;
}

float __constructor(const bool b)
{
    __asm ivec4_to_vec4 __retVal, b;
}

float __constructor(const float f)
{
   __retVal = f;
}


//// vec2 constructors

vec2 __constructor(const float x, const float y)
{
   __retVal.x = x;
   __retVal.y = y;
}

vec2 __constructor(const float f)
{
   __asm vec4_move __retVal.xy, f;
}

vec2 __constructor(const int i)
{
   __asm ivec4_to_vec4 __retVal.xy, i;
}

vec2 __constructor(const bool b)
{
   __asm ivec4_to_vec4 __retVal.xy, b;
}

vec2 __constructor(const bvec2 b)
{
//   __retVal = b;
   __asm ivec4_to_vec4 __retVal.xy, b;
}

vec2 __constructor(const vec3 v)
{
   __asm vec4_move __retVal.xy, v.xy;
}

vec2 __constructor(const vec4 v)
{
   __asm vec4_move __retVal.xy, v.xy;
}


//// vec3 constructors

vec3 __constructor(const float x, const float y, const float z)
{
   __retVal.x = x;
   __retVal.y = y;
   __retVal.z = z;
}

vec3 __constructor(const float f)
{
   // Note: this could be "__retVal.xyz = f" but that's an illegal assignment
   __asm vec4_move __retVal.xyz, f;
}

vec3 __constructor(const int i)
{
   __asm ivec4_to_vec4 __retVal.xyz, i;
}

vec3 __constructor(const bool b)
{
   __asm ivec4_to_vec4 __retVal.xyz, b;
}

vec3 __constructor(const bvec3 b)
{
   __asm ivec4_to_vec4 __retVal.xyz, b;
}

vec3 __constructor(const vec4 v)
{
   __asm vec4_move __retVal.xyz, v;
}


//// vec4 constructors

vec4 __constructor(const float x, const float y, const float z, const float w)
{
   __retVal.x = x;
   __retVal.y = y;
   __retVal.z = z;
   __retVal.w = w;
}

vec4 __constructor(const float f)
{
   // Note: this could be "__retVal = f" but that's an illegal assignment
   __asm vec4_move __retVal, f;
}

vec4 __constructor(const int i)
{
   __asm ivec4_to_vec4 __retVal, i;
}

vec4 __constructor(const bool b)
{
   __asm ivec4_to_vec4 __retVal, b;
}

vec4 __constructor(const bvec4 b)
{
   __asm ivec4_to_vec4 __retVal, b;
}

vec4 __constructor(const ivec4 i)
{
   __asm ivec4_to_vec4 __retVal, i;
}

vec4 __constructor(const vec3 v3, const float f)
{
   // XXX this constructor shouldn't be needed anymore
   __retVal.xyz = v3;
   __retVal.w = f;
}

vec4 __constructor(const vec2 v2, const float f1, const float f2)
{
   // XXX this constructor shouldn't be needed anymore
   __retVal.xy = v2;
   __retVal.z = f1;
   __retVal.w = f2;
}


//// ivec2 constructors

ivec2 __constructor(const int i, const int j)
{
   __retVal.x = i;
   __retVal.y = j;
}

ivec2 __constructor(const int i)
{
   __asm vec4_move __retVal.xy, i;
}

ivec2 __constructor(const float f)
{
   __asm vec4_to_ivec4 __retVal.xy, f;
}

ivec2 __constructor(const bool b)
{
   __asm vec4_to_ivec4 __retVal.xy, b;
}


//// ivec3 constructors

ivec3 __constructor(const int i, const int j, const int k)
{
   __retVal.x = i;
   __retVal.y = j;
   __retVal.z = k;
}

ivec3 __constructor(const int i)
{
   __asm vec4_move __retVal.xyz, i;
}

ivec3 __constructor(const float f)
{
   __asm vec4_to_ivec4 __retVal.xyz, f;
}

ivec3 __constructor(const bool b)
{
   __asm vec4_move __retVal.xyz, b;
}


//// ivec4 constructors

ivec4 __constructor(const int x, const int y, const int z, const int w)
{
   __retVal.x = x;
   __retVal.y = y;
   __retVal.z = z;
   __retVal.w = w;
}

ivec4 __constructor(const int i)
{
   __asm vec4_move __retVal, i;
}

ivec4 __constructor(const float f)
{
   __asm vec4_to_ivec4 __retVal, f;
}

ivec4 __constructor(const bool b)
{
   __asm vec4_to_ivec4 __retVal, b;
}


//// bvec2 constructors

bvec2 __constructor(const bool b1, const bool b2)
{
   __retVal.x = b1;
   __retVal.y = b2;
}

bvec2 __constructor(const int i1, const int i2)
{
   __asm vec4_sne __retVal.x, i1, 0.0;
   __asm vec4_sne __retVal.y, i2, 0.0;
}


bvec2 __constructor(const bool b)
{
   __asm vec4_move __retVal.xy, b;
}

bvec2 __constructor(const float f)
{
   __asm vec4_sne __retVal.xy, f, 0.0;
}

bvec2 __constructor(const int i)
{
   __asm vec4_sne __retVal.xy, i, 0.0;
}

bvec2 __constructor(const vec2 v)
{
   __asm vec4_sne __retVal.xy, v, 0.0;
}

bvec2 __constructor(const ivec2 v)
{
   __asm vec4_sne __retVal.xy, v, 0.0;
}



//// bvec3 constructors

bvec3 __constructor(const bool b1, const bool b2, const bool b3)
{
   __retVal.x = b1;
   __retVal.y = b2;
   __retVal.z = b3;
}

bvec3 __constructor(const float f1, const float f2, const float f3)
{
   __asm vec4_sne __retVal.x, f1, 0.0;
   __asm vec4_sne __retVal.y, f2, 0.0;
   __asm vec4_sne __retVal.z, f3, 0.0;
}

bvec3 __constructor(const bool b)
{
   __asm vec4_move __retVal.xyz, b;
}

bvec3 __constructor(const float f)
{
   __asm vec4_sne __retVal.xyz, f, 0.0;
}

bvec3 __constructor(const int i)
{
   __asm vec4_sne __retVal.xyz, i, 0.0;
}

bvec3 __constructor(const vec3 v)
{
   __asm vec4_sne __retVal.xyz, v, 0.0;
}

bvec3 __constructor(const ivec3 v)
{
   __asm vec4_sne __retVal.xyz, v, 0.0;
}



//// bvec4 constructors

bvec4 __constructor(const bool b1, const bool b2, const bool b3, const bool b4)
{
   __retVal.x = b1;
   __retVal.y = b2;
   __retVal.z = b3;
   __retVal.w = b4;
}

bvec4 __constructor(const float f1, const float f2, const float f3, const float f4)
{
   const float zero = 0.0;
   __asm vec4_sne __retVal.x, f1, zero;   
   __asm vec4_sne __retVal.y, f2, zero;   
   __asm vec4_sne __retVal.z, f3, zero;   
   __asm vec4_sne __retVal.w, f4, zero;   
}

bvec4 __constructor(const bool b)
{
   __asm vec4_move __retVal.xyzw, b;
}

bvec4 __constructor(const float f)
{
   __asm vec4_sne __retVal.xyzw, f, 0.0;
}

bvec4 __constructor(const int i)
{
   __asm vec4_sne __retVal.xyzw, i, 0.0;
}

bvec4 __constructor(const vec4 v)
{
   __asm vec4_sne __retVal.xyzw, v, 0.0;
}

bvec4 __constructor(const ivec4 v)
{
   __asm vec4_sne __retVal.xyzw, v, 0.0;
}



//// mat2 constructors

mat2 __constructor(const float m00, const float m10,
                   const float m01, const float m11)
{
   __retVal[0].x = m00;
   __retVal[0].y = m10;
   __retVal[1].x = m01;
   __retVal[1].y = m11;
}

mat2 __constructor(const float f)
{
   __retVal[0].x = f;
   __retVal[0].y = 0.0;
   __retVal[1].x = 0.0;
   __retVal[1].y = f;
}

mat2 __constructor(const int i)
{
   return mat2(float(i));
}

mat2 __constructor(const bool b)
{
   return mat2(float(b));
}

mat2 __constructor(const vec2 c0, const vec2 c1)
{
   __retVal[0] = c0;
   __retVal[1] = c1;
}


//// mat3 constructors

mat3 __constructor(const float m00, const float m10, const float m20,
                   const float m01, const float m11, const float m21,
                   const float m02, const float m12, const float m22)
{
   __retVal[0].x = m00;
   __retVal[0].y = m10;
   __retVal[0].z = m20;
   __retVal[1].x = m01;
   __retVal[1].y = m11;
   __retVal[1].z = m21;
   __retVal[2].x = m02;
   __retVal[2].y = m12;
   __retVal[2].z = m22;
}

mat3 __constructor(const float f)
{
   vec2 v = vec2(f, 0.0);
   __retVal[0] = v.xyy;
   __retVal[1] = v.yxy;
   __retVal[2] = v.yyx;
}

mat3 __constructor(const int i)
{
   return mat3(float(i));
}

mat3 __constructor(const bool b)
{
   return mat3(float(b));
}

mat3 __constructor(const vec3 c0, const vec3 c1, const vec3 c2)
{
   __retVal[0] = c0;
   __retVal[1] = c1;
   __retVal[2] = c2;
}


//// mat4 constructors

mat4 __constructor(const float m00, const float m10, const float m20, const float m30,
                   const float m01, const float m11, const float m21, const float m31,
                   const float m02, const float m12, const float m22, const float m32,
                   const float m03, const float m13, const float m23, const float m33)
{
   __retVal[0].x = m00;
   __retVal[0].y = m10;
   __retVal[0].z = m20;
   __retVal[0].w = m30;
   __retVal[1].x = m01;
   __retVal[1].y = m11;
   __retVal[1].z = m21;
   __retVal[1].w = m31;
   __retVal[2].x = m02;
   __retVal[2].y = m12;
   __retVal[2].z = m22;
   __retVal[2].w = m32;
   __retVal[3].x = m03;
   __retVal[3].y = m13;
   __retVal[3].z = m23;
   __retVal[3].w = m33;
}


mat4 __constructor(const float f)
{
   vec2 v = vec2(f, 0.0);
   __retVal[0] = v.xyyy;
   __retVal[1] = v.yxyy;
   __retVal[2] = v.yyxy;
   __retVal[3] = v.yyyx;
}

mat4 __constructor(const int i)
{
   return mat4(float(i));
}

mat4 __constructor(const bool b)
{
   return mat4(float(b));
}

mat4 __constructor(const vec4 c0, const vec4 c1, const vec4 c2, const vec4 c3)
{
   __retVal[0] = c0;
   __retVal[1] = c1;
   __retVal[2] = c2;
   __retVal[3] = c3;
}



//// Basic int operators

int __operator + (const int a, const int b)
{
   __asm vec4_add __retVal, a, b;
}

int __operator - (const int a, const int b)
{
   __asm vec4_subtract __retVal, a, b;
}

int __operator * (const int a, const int b)
{
   __asm vec4_multiply __retVal, a, b;
}

int __operator / (const int a, const int b)
{
   float bInv, x;
   __asm float_rcp bInv, b;
   __asm vec4_multiply x, a, bInv;
   __asm vec4_to_ivec4 __retVal, x;
}


//// Basic ivec2 operators

ivec2 __operator + (const ivec2 a, const ivec2 b)
{
   __asm vec4_add __retVal, a, b;
}

ivec2 __operator - (const ivec2 a, const ivec2 b)
{
   __asm vec4_subtract __retVal, a, b;
}

ivec2 __operator * (const ivec2 a, const ivec2 b)
{
   __asm vec4_multiply __retVal, a, b;
}

ivec2 __operator / (const ivec2 a, const ivec2 b)
{
   vec2 bInv, x;
   __asm float_rcp bInv.x, b.x;
   __asm float_rcp bInv.y, b.y;
   __asm vec4_multiply x, a, bInv;
   __asm vec4_to_ivec4 __retVal, x;
}


//// Basic ivec3 operators

ivec3 __operator + (const ivec3 a, const ivec3 b)
{
   __asm vec4_add __retVal, a, b;
}

ivec3 __operator - (const ivec3 a, const ivec3 b)
{
   __asm vec4_subtract __retVal, a, b;
}

ivec3 __operator * (const ivec3 a, const ivec3 b)
{
   __asm vec4_multiply __retVal, a, b;
}

ivec3 __operator / (const ivec3 a, const ivec3 b)
{
   vec3 bInv, x;
   __asm float_rcp bInv.x, b.x;
   __asm float_rcp bInv.y, b.y;
   __asm float_rcp bInv.z, b.z;
   __asm vec4_multiply x, a, bInv;
   __asm vec4_to_ivec4 __retVal, x;
}


//// Basic ivec4 operators

ivec4 __operator + (const ivec4 a, const ivec4 b)
{
   __asm vec4_add __retVal, a, b;
}

ivec4 __operator - (const ivec4 a, const ivec4 b)
{
   __asm vec4_subtract __retVal, a, b;
}

ivec4 __operator * (const ivec4 a, const ivec4 b)
{
   __asm vec4_multiply __retVal, a, b;
}

ivec4 __operator / (const ivec4 a, const ivec4 b)
{
   vec4 bInv, x;
   __asm float_rcp bInv.x, b.x;
   __asm float_rcp bInv.y, b.y;
   __asm float_rcp bInv.z, b.z;
   __asm float_rcp bInv.w, b.w;
   __asm vec4_multiply x, a, bInv;
   __asm vec4_to_ivec4 __retVal, x;
}


//// Basic float operators

float __operator + (const float a, const float b)
{
   __asm vec4_add __retVal, a, b;
}

float __operator - (const float a, const float b)
{
   __asm vec4_subtract __retVal, a, b;
}

float __operator * (const float a, const float b)
{
    __asm vec4_multiply __retVal, a, b;
}

float __operator / (const float a, const float b)
{
   float bInv;
   __asm float_rcp bInv.x, b;
   __asm vec4_multiply __retVal, a, bInv;
}


//// Basic vec2 operators

vec2 __operator + (const vec2 v, const vec2 u)
{
   __asm vec4_add __retVal.xy, v, u;
}

vec2 __operator - (const vec2 v, const vec2 u)
{
    __asm vec4_subtract __retVal.xy, v, u;
}

vec2 __operator * (const vec2 v, const vec2 u)
{
    __asm vec4_multiply __retVal.xy, v, u;
}

vec2 __operator / (const vec2 v, const vec2 u)
{
   vec2 w; // = 1 / u
   __asm float_rcp w.x, u.x;
   __asm float_rcp w.y, u.y;
   __asm vec4_multiply __retVal.xy, v, w;
}


//// Basic vec3 operators

vec3 __operator + (const vec3 v, const vec3 u)
{
   __asm vec4_add __retVal.xyz, v, u;
}

vec3 __operator - (const vec3 v, const vec3 u)
{
    __asm vec4_subtract __retVal.xyz, v, u;
}

vec3 __operator * (const vec3 v, const vec3 u)
{
    __asm vec4_multiply __retVal.xyz, v, u;
}

vec3 __operator / (const vec3 v, const vec3 u)
{
   vec3 w; // = 1 / u
   __asm float_rcp w.x, u.x;
   __asm float_rcp w.y, u.y;
   __asm float_rcp w.z, u.z;
   __asm vec4_multiply __retVal.xyz, v, w;
}


//// Basic vec4 operators

vec4 __operator + (const vec4 v, const vec4 u)
{
   __asm vec4_add __retVal, v, u;
}

vec4 __operator - (const vec4 v, const vec4 u)
{
    __asm vec4_subtract __retVal, v, u;
}

vec4 __operator * (const vec4 v, const vec4 u)
{
    __asm vec4_multiply __retVal, v, u;
}

vec4 __operator / (const vec4 v, const vec4 u)
{
   vec4 w; // = 1 / u
   __asm float_rcp w.x, u.x;
   __asm float_rcp w.y, u.y;
   __asm float_rcp w.z, u.z;
   __asm float_rcp w.w, u.w;
   __asm vec4_multiply __retVal, v, w;
}




//// Basic vec2/float operators

vec2 __operator + (const float a, const vec2 u)
{
   __asm vec4_add __retVal.xy, a, u.xy;
}

vec2 __operator + (const vec2 v, const float b)
{
   __asm vec4_add __retVal.xy, v.xy, b;
}

vec2 __operator - (const float a, const vec2 u)
{
   __asm vec4_subtract __retVal.xy, a, u.xy;
}

vec2 __operator - (const vec2 v, const float b)
{
   __asm vec4_subtract __retVal.xy, v.xy, b;
}

vec2 __operator * (const float a, const vec2 u)
{
   __asm vec4_multiply __retVal.xy, a, u.xy;
}

vec2 __operator * (const vec2 v, const float b)
{
   __asm vec4_multiply __retVal.xy, v.xy, b;
}

vec2 __operator / (const float a, const vec2 u)
{
   vec2 invU;
   __asm float_rcp invU.x, u.x;
   __asm float_rcp invU.y, u.y;
   __asm vec4_multiply __retVal.xy, a, invU.xy;
}

vec2 __operator / (const vec2 v, const float b)
{
   float invB;
   __asm float_rcp invB, b;
   __asm vec4_multiply __retVal.xy, v.xy, invB;
}


//// Basic vec3/float operators

vec3 __operator + (const float a, const vec3 u)
{
   __asm vec4_add __retVal.xyz, a, u.xyz;
}

vec3 __operator + (const vec3 v, const float b)
{
   __asm vec4_add __retVal.xyz, v.xyz, b;
}

vec3 __operator - (const float a, const vec3 u)
{
   __asm vec4_subtract __retVal.xyz, a, u.xyz;
}

vec3 __operator - (const vec3 v, const float b)
{
   __asm vec4_subtract __retVal.xyz, v.xyz, b;
}

vec3 __operator * (const float a, const vec3 u)
{
   __asm vec4_multiply __retVal.xyz, a, u.xyz;
}

vec3 __operator * (const vec3 v, const float b)
{
   __asm vec4_multiply __retVal.xyz, v.xyz, b;
}

vec3 __operator / (const float a, const vec3 u)
{
   vec3 invU;
   __asm float_rcp invU.x, u.x;
   __asm float_rcp invU.y, u.y;
   __asm float_rcp invU.z, u.z;
   __asm vec4_multiply __retVal.xyz, a, invU.xyz;
}

vec3 __operator / (const vec3 v, const float b)
{
   float invB;
   __asm float_rcp invB, b;
   __asm vec4_multiply __retVal.xyz, v.xyz, invB;
}


//// Basic vec4/float operators

vec4 __operator + (const float a, const vec4 u)
{
   __asm vec4_add __retVal, a, u;
}

vec4 __operator + (const vec4 v, const float b)
{
   __asm vec4_add __retVal, v, b;
}

vec4 __operator - (const float a, const vec4 u)
{
   __asm vec4_subtract __retVal, a, u;
}

vec4 __operator - (const vec4 v, const float b)
{
   __asm vec4_subtract __retVal, v, b;
}

vec4 __operator * (const float a, const vec4 u)
{
   __asm vec4_multiply __retVal, a, u;
}

vec4 __operator * (const vec4 v, const float b)
{
   __asm vec4_multiply __retVal, v, b;
}

vec4 __operator / (const float a, const vec4 u)
{
   vec4 invU;
   __asm float_rcp invU.x, u.x;
   __asm float_rcp invU.y, u.y;
   __asm float_rcp invU.z, u.z;
   __asm float_rcp invU.w, u.w;
   __asm vec4_multiply __retVal, a, invU;
}

vec4 __operator / (const vec4 v, const float b)
{
   float invB;
   __asm float_rcp invB, b;
   __asm vec4_multiply __retVal, v, invB;
}



//// Basic ivec2/int operators

ivec2 __operator + (const int a, const ivec2 u)
{
   __retVal = ivec2(a) + u;
}

ivec2 __operator + (const ivec2 v, const int b)
{
   __retVal = v + ivec2(b);
}

ivec2 __operator - (const int a, const ivec2 u)
{
   __retVal = ivec2(a) - u;
}

ivec2 __operator - (const ivec2 v, const int b)
{
   __retVal = v - ivec2(b);
}

ivec2 __operator * (const int a, const ivec2 u)
{
   __retVal = ivec2(a) * u;
}

ivec2 __operator * (const ivec2 v, const int b)
{
   __retVal = v * ivec2(b);
}

ivec2 __operator / (const int a, const ivec2 u)
{
   __retVal = ivec2(a) / u;
}

ivec2 __operator / (const ivec2 v, const int b)
{
   __retVal = v / ivec2(b);
}


//// Basic ivec3/int operators

ivec3 __operator + (const int a, const ivec3 u)
{
   __retVal = ivec3(a) + u;
}

ivec3 __operator + (const ivec3 v, const int b)
{
   __retVal = v + ivec3(b);
}

ivec3 __operator - (const int a, const ivec3 u)
{
   __retVal = ivec3(a) - u;
}

ivec3 __operator - (const ivec3 v, const int b)
{
   __retVal = v - ivec3(b);
}

ivec3 __operator * (const int a, const ivec3 u)
{
   __retVal = ivec3(a) * u;
}

ivec3 __operator * (const ivec3 v, const int b)
{
   __retVal = v * ivec3(b);
}

ivec3 __operator / (const int a, const ivec3 u)
{
   __retVal = ivec3(a) / u;
}

ivec3 __operator / (const ivec3 v, const int b)
{
   __retVal = v / ivec3(b);
}


//// Basic ivec4/int operators

ivec4 __operator + (const int a, const ivec4 u)
{
   __retVal = ivec4(a) + u;
}

ivec4 __operator + (const ivec4 v, const int b)
{
   __retVal = v + ivec4(b);
}

ivec4 __operator - (const int a, const ivec4 u)
{
   __retVal = ivec4(a) - u;
}

ivec4 __operator - (const ivec4 v, const int b)
{
   __retVal = v - ivec4(b);
}

ivec4 __operator * (const int a, const ivec4 u)
{
   __retVal = ivec4(a) * u;
}

ivec4 __operator * (const ivec4 v, const int b)
{
   __retVal = v * ivec4(b);
}

ivec4 __operator / (const int a, const ivec4 u)
{
   __retVal = ivec4(a) / u;
}

ivec4 __operator / (const ivec4 v, const int b)
{
   __retVal = v / ivec4(b);
}




//// Unary negation operator

int __operator - (const int a)
{
   __asm vec4_negate __retVal.x, a;
}

ivec2 __operator - (const ivec2 v)
{
   __asm vec4_negate __retVal, v;
}

ivec3 __operator - (const ivec3 v)
{
   __asm vec4_negate __retVal, v;
}

ivec4 __operator - (const ivec4 v)
{
   __asm vec4_negate __retVal, v;
}

float __operator - (const float a)
{
   __asm vec4_negate __retVal.x, a;
}

vec2 __operator - (const vec2 v)
{
   __asm vec4_negate __retVal.xy, v.xy;
}

vec3 __operator - (const vec3 v)
{
   __asm vec4_negate __retVal.xyz, v.xyz;
}

vec4 __operator - (const vec4 v)
{
   __asm vec4_negate __retVal, v;
}

mat2 __operator - (const mat2 m)
{
   __retVal[0] = -m[0];
   __retVal[1] = -m[1];
}

mat3 __operator - (const mat3 m)
{
   __retVal[0] = -m[0];
   __retVal[1] = -m[1];
   __retVal[2] = -m[2];
}

mat4 __operator - (const mat4 m)
{
   __retVal[0] = -m[0];
   __retVal[1] = -m[1];
   __retVal[2] = -m[2];
   __retVal[3] = -m[3];
}



//// dot product

float dot(const float a, const float b)
{
   __retVal = a * b;
}

float dot(const vec2 a, const vec2 b)
{
   __retVal = a.x * b.x + a.y * b.y;
}

float dot(const vec3 a, const vec3 b)
{
    __asm vec3_dot __retVal, a, b;
}

float dot(const vec4 a, const vec4 b)
{
    __asm vec4_dot __retVal, a, b;
}



//// int assignment operators

int __operator += (inout int a, const int b)
{
   a = a + b;
   return a;
}

int __operator -= (inout int a, const int b)
{
   a = a - b;
   return a;
}

int __operator *= (inout int a, const int b)
{
   a = a * b;
   return a;
}

int __operator /= (inout int a, const int b)
{
   a = a / b;
   return a;
}


//// ivec2 assignment operators

ivec2 __operator += (inout ivec2 v, const ivec2 u)
{
   v = v + u;
   return v;
}

ivec2 __operator -= (inout ivec2 v, const ivec2 u)
{
   v = v - u;
   return v;
}

ivec2 __operator *= (inout ivec2 v, const ivec2 u)
{
   v = v * u;
   return v;
}

ivec2 __operator /= (inout ivec2 v, const ivec2 u)
{
   v = v / u;
   return v;
}


//// ivec3 assignment operators

ivec3 __operator += (inout ivec3 v, const ivec3 u)
{
   v = v + u;
   return v;
}

ivec3 __operator -= (inout ivec3 v, const ivec3 u)
{
   v = v - u;
   return v;
}

ivec3 __operator *= (inout ivec3 v, const ivec3 u)
{
   v = v * u;
   return v;
}

ivec3 __operator /= (inout ivec3 v, const ivec3 u)
{
   v = v / u;
   return v;
}


//// ivec4 assignment operators

ivec4 __operator += (inout ivec4 v, const ivec4 u)
{
   v = v + u;
   return v;
}

ivec4 __operator -= (inout ivec4 v, const ivec4 u)
{
   v = v - u;
   return v;
}

ivec4 __operator *= (inout ivec4 v, const ivec4 u)
{
   v = v * u;
   return v;
}

ivec4 __operator /= (inout ivec4 v, const ivec4 u)
{
   v = v / u;
   return v;
}


//// float assignment operators

float __operator += (inout float a, const float b)
{
   a = a + b;
   return a;
}

float __operator -= (inout float a, const float b)
{
   a = a - b;
   return a;
}

float __operator *= (inout float a, const float b)
{
   a = a * b;
   return a;
}

float __operator /= (inout float a, const float b)
{
   a = a / b;
   return a;
}


//// vec2 assignment operators

vec2 __operator += (inout vec2 v, const vec2 u)
{
   v = v + u;
   return v;
}

vec2 __operator -= (inout vec2 v, const vec2 u)
{
   v = v - u;
   return v;
}

vec2 __operator *= (inout vec2 v, const vec2 u)
{
   v = v * u;
   return v;
}

vec2 __operator /= (inout vec2 v, const vec2 u)
{
   v = v / u;
   return v;
}


//// vec3 assignment operators

vec3 __operator += (inout vec3 v, const vec3 u)
{
   v = v + u;
   return v;
}

vec3 __operator -= (inout vec3 v, const vec3 u)
{
   v = v - u;
   return v;
}

vec3 __operator *= (inout vec3 v, const vec3 u)
{
   v = v * u;
   return v;
}

vec3 __operator /= (inout vec3 v, const vec3 u)
{
   v = v / u;
   return v;
}


//// vec4 assignment operators

vec4 __operator += (inout vec4 v, const vec4 u)
{
   v = v + u;
   return v;
}

vec4 __operator -= (inout vec4 v, const vec4 u)
{
   v = v - u;
   return v;
}

vec4 __operator *= (inout vec4 v, const vec4 u)
{
   v = v * u;
   return v;
}

vec4 __operator /= (inout vec4 v, const vec4 u)
{
   v = v / u;
   return v;
}



//// ivec2/int assignment operators

ivec2 __operator += (inout ivec2 v, const int a)
{
   v = v + ivec2(a);
   return v;
}

ivec2 __operator -= (inout ivec2 v, const int a)
{
   v = v - ivec2(a);
   return v;
}

ivec2 __operator *= (inout ivec2 v, const int a)
{
   v = v * ivec2(a);
   return v;
}

ivec2 __operator /= (inout ivec2 v, const int a)
{
   v = v / ivec2(a);
   return v;
}


//// ivec3/int assignment operators

ivec3 __operator += (inout ivec3 v, const int a)
{
   v = v + ivec3(a);
   return v;
}

ivec3 __operator -= (inout ivec3 v, const int a)
{
   v = v - ivec3(a);
   return v;
}

ivec3 __operator *= (inout ivec3 v, const int a)
{
   v = v * ivec3(a);
   return v;
}

ivec4 __operator /= (inout ivec3 v, const int a)
{
   v = v / ivec3(a);
   return v;
}


//// ivec4/int assignment operators

ivec4 __operator += (inout ivec4 v, const int a)
{
   v = v + ivec4(a);
   return v;
}

ivec4 __operator -= (inout ivec4 v, const int a)
{
   v = v - ivec4(a);
   return v;
}

ivec4 __operator *= (inout ivec4 v, const int a)
{
   v = v * ivec4(a);
   return v;
}

ivec4 __operator /= (inout ivec4 v, const int a)
{
   v = v / ivec4(a);
   return v;
}



//// vec2/float assignment operators

vec2 __operator += (inout vec2 v, const float a)
{
   v = v + vec2(a);
   return v;
}

vec2 __operator -= (inout vec2 v, const float a)
{
   v = v - vec2(a);
   return v;
}

vec2 __operator *= (inout vec2 v, const float a)
{
   v = v * vec2(a);
   return v;
}

vec2 __operator /= (inout vec2 v, const float a)
{
   v = v / vec2(a);
   return v;
}


//// vec3/float assignment operators

vec3 __operator += (inout vec3 v, const float a)
{
   v = v + vec3(a);
   return v;
}

vec3 __operator -= (inout vec3 v, const float a)
{
   v = v - vec3(a);
   return v;
}

vec3 __operator *= (inout vec3 v, const float a)
{
   v = v * vec3(a);
   return v;
}

vec3 __operator /= (inout vec3 v, const float a)
{
   v = v / vec3(a);
   return v;
}


//// vec4/float assignment operators

vec4 __operator += (inout vec4 v, const float a)
{
   v = v + vec4(a);
   return v;
}

vec4 __operator -= (inout vec4 v, const float a)
{
   v = v - vec4(a);
   return v;
}

vec4 __operator *= (inout vec4 v, const float a)
{
   v = v * vec4(a);
   return v;
}

vec4 __operator /= (inout vec4 v, const float a)
{
   v = v / vec4(a);
   return v;
}





//// Basic mat2 operations

mat2 __operator + (const mat2 m, const mat2 n)
{
   __retVal[0] = m[0] + n[0];
   __retVal[1] = m[1] + n[1];
}

mat2 __operator - (const mat2 m, const mat2 n)
{
   __retVal[0] = m[0] - n[0];
   __retVal[1] = m[1] - n[1];
}

mat2 __operator * (const mat2 m, const mat2 n)
{
   __retVal[0] = m[0] * n[0].xx + m[1] * n[0].yy;
   __retVal[1] = m[0] * n[1].xx + m[1] * n[1].yy;
}

mat2 __operator / (const mat2 m, const mat2 n)
{
   __retVal[0] = m[0] / n[0];
   __retVal[1] = m[1] / n[1];
}


//// Basic mat3 operations

mat3 __operator + (const mat3 m, const mat3 n)
{
   __retVal[0] = m[0] + n[0];
   __retVal[1] = m[1] + n[1];
   __retVal[2] = m[2] + n[2];
}

mat3 __operator - (const mat3 m, const mat3 n)
{
   __retVal[0] = m[0] - n[0];
   __retVal[1] = m[1] - n[1];
   __retVal[2] = m[2] - n[2];
}

mat3 __operator * (const mat3 m, const mat3 n)
{
   __retVal[0] = m[0] * n[0].xxx + m[1] * n[0].yyy + m[2] * n[0].zzz;
   __retVal[1] = m[0] * n[1].xxx + m[1] * n[1].yyy + m[2] * n[1].zzz;
   __retVal[2] = m[0] * n[2].xxx + m[1] * n[2].yyy + m[2] * n[2].zzz;
}

mat3 __operator / (const mat3 m, const mat3 n)
{
    __retVal[0] = m[0] / n[0];
    __retVal[1] = m[1] / n[1];
    __retVal[2] = m[2] / n[2];
}


//// Basic mat4 operations

mat4 __operator + (const mat4 m, const mat4 n)
{
   __retVal[0] = m[0] + n[0];
   __retVal[1] = m[1] + n[1];
   __retVal[2] = m[2] + n[2];
   __retVal[3] = m[3] + n[3];
}

mat4 __operator - (const mat4 m, const mat4 n)
{
   __retVal[0] = m[0] - n[0];
   __retVal[1] = m[1] - n[1];
   __retVal[2] = m[2] - n[2];
   __retVal[3] = m[3] - n[3];
}

mat4 __operator * (const mat4 m, const mat4 n)
{
   __retVal[0] = m[0] * n[0].xxxx + m[1] * n[0].yyyy + m[2] * n[0].zzzz + m[3] * n[0].wwww;
   __retVal[1] = m[0] * n[1].xxxx + m[1] * n[1].yyyy + m[2] * n[1].zzzz + m[3] * n[1].wwww;
   __retVal[2] = m[0] * n[2].xxxx + m[1] * n[2].yyyy + m[2] * n[2].zzzz + m[3] * n[2].wwww;
   __retVal[3] = m[0] * n[3].xxxx + m[1] * n[3].yyyy + m[2] * n[3].zzzz + m[3] * n[3].wwww;
}

mat4 __operator / (const mat4 m, const mat4 n)
{
    __retVal[0] = m[0] / n[0];
    __retVal[1] = m[1] / n[1];
    __retVal[2] = m[2] / n[2];
    __retVal[3] = m[3] / n[3];
}


//// mat2/float operations

mat2 __operator + (const float a, const mat2 n)
{
   __retVal[0] = a + n[0];
   __retVal[1] = a + n[1];
}

mat2 __operator + (const mat2 m, const float b)
{
   __retVal[0] = m[0] + b;
   __retVal[1] = m[1] + b;
}

mat2 __operator - (const float a, const mat2 n)
{
   __retVal[0] = a - n[0];
   __retVal[1] = a - n[1];
}

mat2 __operator - (const mat2 m, const float b)
{
   __retVal[0] = m[0] - b;
   __retVal[1] = m[1] - b;
}

mat2 __operator * (const float a, const mat2 n)
{
   __retVal[0] = a * n[0];
   __retVal[1] = a * n[1];
}

mat2 __operator * (const mat2 m, const float b)
{
   __retVal[0] = m[0] * b;
   __retVal[1] = m[1] * b;
}

mat2 __operator / (const float a, const mat2 n)
{
   __retVal[0] = a / n[0];
   __retVal[1] = a / n[1];
}

mat2 __operator / (const mat2 m, const float b)
{
   __retVal[0] = m[0] / b;
   __retVal[1] = m[1] / b;
}


//// mat3/float operations

mat3 __operator + (const float a, const mat3 n)
{
   __retVal[0] = a + n[0];
   __retVal[1] = a + n[1];
   __retVal[2] = a + n[2];
}

mat3 __operator + (const mat3 m, const float b)
{
   __retVal[0] = m[0] + b;
   __retVal[1] = m[1] + b;
   __retVal[2] = m[2] + b;
}

mat3 __operator - (const float a, const mat3 n)
{
   __retVal[0] = a - n[0];
   __retVal[1] = a - n[1];
   __retVal[2] = a - n[2];
}

mat3 __operator - (const mat3 m, const float b)
{
   __retVal[0] = m[0] - b;
   __retVal[1] = m[1] - b;
   __retVal[2] = m[2] - b;
}

mat3 __operator * (const float a, const mat3 n)
{
   __retVal[0] = a * n[0];
   __retVal[1] = a * n[1];
   __retVal[2] = a * n[2];
}

mat3 __operator * (const mat3 m, const float b)
{
   __retVal[0] = m[0] * b;
   __retVal[1] = m[1] * b;
   __retVal[2] = m[2] * b;
}

mat3 __operator / (const float a, const mat3 n)
{
   __retVal[0] = a / n[0];
   __retVal[1] = a / n[1];
   __retVal[2] = a / n[2];
}

mat3 __operator / (const mat3 m, const float b)
{
   __retVal[0] = m[0] / b;
   __retVal[1] = m[1] / b;
   __retVal[2] = m[2] / b;
}


//// mat4/float operations

mat4 __operator + (const float a, const mat4 n)
{
   __retVal[0] = a + n[0];
   __retVal[1] = a + n[1];
   __retVal[2] = a + n[2];
   __retVal[3] = a + n[3];
}

mat4 __operator + (const mat4 m, const float b)
{
   __retVal[0] = m[0] + b;
   __retVal[1] = m[1] + b;
   __retVal[2] = m[2] + b;
   __retVal[3] = m[3] + b;
}

mat4 __operator - (const float a, const mat4 n)
{
   __retVal[0] = a - n[0];
   __retVal[1] = a - n[1];
   __retVal[2] = a - n[2];
   __retVal[3] = a - n[3];
}

mat4 __operator - (const mat4 m, const float b)
{
   __retVal[0] = m[0] - b;
   __retVal[1] = m[1] - b;
   __retVal[2] = m[2] - b;
   __retVal[3] = m[3] - b;
}

mat4 __operator * (const float a, const mat4 n)
{
   __retVal[0] = a * n[0];
   __retVal[1] = a * n[1];
   __retVal[2] = a * n[2];
   __retVal[3] = a * n[3];
}

mat4 __operator * (const mat4 m, const float b)
{
   __retVal[0] = m[0] * b;
   __retVal[1] = m[1] * b;
   __retVal[2] = m[2] * b;
   __retVal[3] = m[3] * b;
}

mat4 __operator / (const float a, const mat4 n)
{
   __retVal[0] = a / n[0];
   __retVal[1] = a / n[1];
   __retVal[2] = a / n[2];
   __retVal[3] = a / n[3];
}

mat4 __operator / (const mat4 m, const float b)
{
   __retVal[0] = m[0] / b;
   __retVal[1] = m[1] / b;
   __retVal[2] = m[2] / b;
   __retVal[3] = m[3] / b;
}



//// matrix / vector products

vec2 __operator * (const mat2 m, const vec2 v)
{
   __retVal = m[0] * v.xx
            + m[1] * v.yy;
}

vec2 __operator * (const vec2 v, const mat2 m)
{
   __retVal.x = dot(v, m[0]);
   __retVal.y = dot(v, m[1]);
}

vec3 __operator * (const mat3 m, const vec3 v)
{
   __retVal = m[0] * v.xxx
            + m[1] * v.yyy
            + m[2] * v.zzz;
}

vec3 __operator * (const vec3 v, const mat3 m)
{
   __retVal.x = dot(v, m[0]);
   __retVal.y = dot(v, m[1]);
   __retVal.z = dot(v, m[2]);
}

vec4 __operator * (const mat4 m, const vec4 v)
{
   __retVal = m[0] * v.xxxx
            + m[1] * v.yyyy
            + m[2] * v.zzzz
            + m[3] * v.wwww;
}

vec4 __operator * (const vec4 v, const mat4 m)
{
   __retVal.x = dot(v, m[0]);
   __retVal.y = dot(v, m[1]);
   __retVal.z = dot(v, m[2]);
   __retVal.w = dot(v, m[3]);
}



//// mat2 assignment operators

mat2 __operator += (inout mat2 m, const mat2 n)
{
   m[0] = m[0] + n[0];
   m[1] = m[1] + n[1];
   return m;
}

mat2 __operator -= (inout mat2 m, const mat2 n)
{
   m[0] = m[0] - n[0];
   m[1] = m[1] - n[1];
   return m;
}

mat2 __operator *= (inout mat2 m, const mat2 n)
{
   m = m * n;
   return m;
}

mat2 __operator /= (inout mat2 m, const mat2 n)
{
   m[0] = m[0] / n[0];
   m[1] = m[1] / n[1];
   return m;
}


//// mat3 assignment operators

mat3 __operator += (inout mat3 m, const mat3 n)
{
   m[0] = m[0] + n[0];
   m[1] = m[1] + n[1];
   m[2] = m[2] + n[2];
   return m;
}

mat3 __operator -= (inout mat3 m, const mat3 n)
{
   m[0] = m[0] - n[0];
   m[1] = m[1] - n[1];
   m[2] = m[2] - n[2];
   return m;
}

mat3 __operator *= (inout mat3 m, const mat3 n)
{
   m = m * n;
   return m;
}

mat3 __operator /= (inout mat3 m, const mat3 n)
{
   m[0] = m[0] / n[0];
   m[1] = m[1] / n[1];
   m[2] = m[2] / n[2];
   return m;
}


// mat4 assignment operators

mat4 __operator += (inout mat4 m, const mat4 n)
{
   m[0] = m[0] + n[0];
   m[1] = m[1] + n[1];
   m[2] = m[2] + n[2];
   m[3] = m[3] + n[3];
   return m;
}

mat4 __operator -= (inout mat4 m, const mat4 n)
{
   m[0] = m[0] - n[0];
   m[1] = m[1] - n[1];
   m[2] = m[2] - n[2];
   m[3] = m[3] - n[3];
   return m;
}

mat4 __operator *= (inout mat4 m, const mat4 n)
{
   m = m * n;
   return m;
}

mat4 __operator /= (inout mat4 m, const mat4 n)
{
   m[0] = m[0] / n[0];
   m[1] = m[1] / n[1];
   m[2] = m[2] / n[2];
   m[3] = m[3] / n[3];
   return m;
}


//// mat2/float assignment operators

mat2 __operator += (inout mat2 m, const float a)
{
   vec2 v = vec2(a);
   m[0] = m[0] + v;
   m[1] = m[1] + v;
   return m;
}

mat2 __operator -= (inout mat2 m, const float a)
{
   vec2 v = vec2(a);
   m[0] = m[0] - v;
   m[1] = m[1] - v;
   return m;
}

mat2 __operator *= (inout mat2 m, const float a)
{
   vec2 v = vec2(a);
   m[0] = m[0] * v;
   m[1] = m[1] * v;
   return m;
}

mat2 __operator /= (inout mat2 m, const float a)
{
   vec2 v = vec2(1.0 / a);
   m[0] = m[0] * v;
   m[1] = m[1] * v;
   return m;
}


//// mat3/float assignment operators

mat3 __operator += (inout mat3 m, const float a)
{
   vec3 v = vec3(a);
   m[0] = m[0] + v;
   m[1] = m[1] + v;
   m[2] = m[2] + v;
   return m;
}

mat3 __operator -= (inout mat3 m, const float a)
{
   vec3 v = vec3(a);
   m[0] = m[0] - v;
   m[1] = m[1] - v;
   m[2] = m[2] - v;
   return m;
}

mat3 __operator *= (inout mat3 m, const float a)
{
   vec3 v = vec3(a);
   m[0] = m[0] * v;
   m[1] = m[1] * v;
   m[2] = m[2] * v;
   return m;
}

mat3 __operator /= (inout mat3 m, const float a)
{
   vec3 v = vec3(1.0 / a);
   m[0] = m[0] * v;
   m[1] = m[1] * v;
   m[2] = m[2] * v;
   return m;
}


//// mat4/float assignment operators

mat4 __operator += (inout mat4 m, const float a)
{
   vec4 v = vec4(a);
   m[0] = m[0] + v;
   m[1] = m[1] + v;
   m[2] = m[2] + v;
   m[3] = m[3] + v;
   return m;
}

mat4 __operator -= (inout mat4 m, const float a)
{
   vec4 v = vec4(a);
   m[0] = m[0] - v;
   m[1] = m[1] - v;
   m[2] = m[2] - v;
   m[3] = m[3] - v;
   return m;
}

mat4 __operator *= (inout mat4 m, const float a)
{
   vec4 v = vec4(a);
   m[0] = m[0] * v;
   m[1] = m[1] * v;
   m[2] = m[2] * v;
   m[3] = m[3] * v;
   return m;
}

mat4 __operator /= (inout mat4 m, const float a)
{
   vec4 v = vec4(1.0 / a);
   m[0] = m[0] * v;
   m[1] = m[1] * v;
   m[2] = m[2] * v;
   m[3] = m[3] * v;
   return m;
}



//// vec/mat assignment operators

vec2 __operator *= (inout vec2 v, const mat2 m)
{
   v = v * m;
   return v;
}

vec3 __operator *= (inout vec3 v, const mat3 m)
{
   v = v * m;
   return v;
}

vec4 __operator *= (inout vec4 v, const mat4 m)
{
   v = v * m;
   return v;
}



//// pre-decrement operators

int __operator --(inout int a)
{
    a = a - 1;
   __retVal = a;
}

ivec2 __operator --(inout ivec2 v)
{
   v = v - ivec2(1);
   __retVal = v;
}

ivec3 __operator --(inout ivec3 v)
{
   v = v - ivec3(1);
   __retVal = v;
}

ivec4 __operator --(inout ivec4 v)
{
   v = v - ivec4(1);
   __retVal = v;
}


float __operator --(inout float a)
{
   a = a - 1.0;
   __retVal = a;
}

vec2 __operator --(inout vec2 v)
{
   v = v - vec2(1.0);
   __retVal = v;
}

vec3 __operator --(inout vec3 v)
{
   v = v - vec3(1.0);
   __retVal = v;
}

vec4 __operator --(inout vec4 v)
{
   v = v - vec4(1.0);
   __retVal = v;
}


mat2 __operator --(inout mat2 m)
{
   m[0] = m[0] - vec2(1.0);
   m[1] = m[1] - vec2(1.0);
   __retVal = m;
}

mat3 __operator --(inout mat3 m)
{
   m[0] = m[0] - vec3(1.0);
   m[1] = m[1] - vec3(1.0);
   m[2] = m[2] - vec3(1.0);
   __retVal = m;
}

mat4 __operator --(inout mat4 m)
{
   m[0] = m[0] - vec4(1.0);
   m[1] = m[1] - vec4(1.0);
   m[2] = m[2] - vec4(1.0);
   m[3] = m[3] - vec4(1.0);
   __retVal = m;
}


//// pre-increment operators

int __operator ++(inout int a)
{
    a = a + 1;
    __retVal = a;
}

ivec2 __operator ++(inout ivec2 v)
{
   v = v + ivec2(1);
   __retVal = v;
}

ivec3 __operator ++(inout ivec3 v)
{
   v = v + ivec3(1);
   __retVal = v;
}

ivec4 __operator ++(inout ivec4 v)
{
   v = v + ivec4(1);
   __retVal = v;
}


float __operator ++(inout float a)
{
    a = a + 1.0;
    __retVal = a;
}

vec2 __operator ++(inout vec2 v)
{
   v = v + vec2(1.0);
   __retVal = v;
}

vec3 __operator ++(inout vec3 v)
{
   v = v + vec3(1.0);
   __retVal = v;
}

vec4 __operator ++(inout vec4 v)
{
   v = v + vec4(1.0);
   __retVal = v;
}


mat2 __operator ++(inout mat2 m)
{
   m[0] = m[0] + vec2(1.0);
   m[1] = m[1] + vec2(1.0);
   __retVal = m;
}

mat3 __operator ++(inout mat3 m)
{
   m[0] = m[0] + vec3(1.0);
   m[1] = m[1] + vec3(1.0);
   m[2] = m[2] + vec3(1.0);
   __retVal = m;
}

mat4 __operator ++(inout mat4 m)
{
   m[0] = m[0] + vec4(1.0);
   m[1] = m[1] + vec4(1.0);
   m[2] = m[2] + vec4(1.0);
   m[3] = m[3] + vec4(1.0);
   __retVal = m;
}



//// post-decrement

int __postDecr(inout int a)
{
   __retVal = a;
   a = a - 1;
}

ivec2 __postDecr(inout ivec2 v)
{
   __retVal = v;
   v = v - ivec2(1);
}

ivec3 __postDecr(inout ivec3 v)
{
   __retVal = v;
   v = v - ivec3(1);
}

ivec4 __postDecr(inout ivec4 v)
{
   __retVal = v;
   v = v - ivec4(1);
}


float __postDecr(inout float a)
{
   __retVal = a;
   a = a - 1.0;
}

vec2 __postDecr(inout vec2 v)
{
   __retVal = v;
   v = v - vec2(1.0);
}

vec3 __postDecr(inout vec3 v)
{
   __retVal = v;
   v = v - vec3(1.0);
}

vec4 __postDecr(inout vec4 v)
{
   __retVal = v;
   v = v - vec4(1.0);
}


mat2 __postDecr(inout mat2 m)
{
   __retVal = m;
   m[0] = m[0] - vec2(1.0);
   m[1] = m[1] - vec2(1.0);
}

mat3 __postDecr(inout mat3 m)
{
   __retVal = m;
   m[0] = m[0] - vec3(1.0);
   m[1] = m[1] - vec3(1.0);
   m[2] = m[2] - vec3(1.0);
}

mat4 __postDecr(inout mat4 m)
{
   __retVal = m;
   m[0] = m[0] - vec4(1.0);
   m[1] = m[1] - vec4(1.0);
   m[2] = m[2] - vec4(1.0);
   m[3] = m[3] - vec4(1.0);
}


//// post-increment

float __postIncr(inout float a)
{
   __retVal = a;
   a = a + 1;
}

vec2 __postIncr(inout vec2 v)
{
   __retVal = v;
   v = v + vec2(1.0);
}

vec3 __postIncr(inout vec3 v)
{
   __retVal = v;
   v = v + vec3(1.0);
}

vec4 __postIncr(inout vec4 v)
{
   __retVal = v;
   v = v + vec4(1.0);
}


int __postIncr(inout int a)
{
   __retVal = a;
   a = a + 1;
}

ivec2 __postIncr(inout ivec2 v)
{
   __retVal = v;
   v = v + ivec2(1);
}

ivec3 __postIncr(inout ivec3 v)
{
   __retVal = v;
   v = v + ivec3(1);
}

ivec4 __postIncr(inout ivec4 v)
{
   __retVal = v;
   v = v + ivec3(1);
}


mat2 __postIncr(inout mat2 m)
{
   mat2 n = m;
   m[0] = m[0] + vec2(1.0);
   m[1] = m[1] + vec2(1.0);
   return n;
}

mat3 __postIncr(inout mat3 m)
{
   mat3 n = m;
   m[0] = m[0] + vec3(1.0);
   m[1] = m[1] + vec3(1.0);
   m[2] = m[2] + vec3(1.0);
   return n;
}

mat4 __postIncr(inout mat4 m)
{
   mat4 n = m;
   m[0] = m[0] + vec4(1.0);
   m[1] = m[1] + vec4(1.0);
   m[2] = m[2] + vec4(1.0);
   m[3] = m[3] + vec4(1.0);
   return n;
}



//// inequality operators


// XXX are the inequality operators for floats/ints really needed????
bool __operator < (const float a, const float b)
{
   __asm vec4_sgt __retVal.x, b, a;
}


bool __operator < (const int a, const int b) {
    return float (a) < float (b);
}

bool __operator > (const float a, const float b) {
    bool c;
    __asm float_less c, b, a;
    return c;
}

bool __operator > (const int a, const int b) {
    return float (a) > float (b);
}

bool __operator >= (const float a, const float b) {
    bool g, e;
    __asm float_less  g, b, a;
    __asm float_equal e, a, b;
    return g || e;
}

bool __operator >= (const int a, const int b) {
    return float (a) >= float (b);
}

bool __operator <= (const float a, const float b) {
    bool g, e;
    __asm float_less  g, a, b;
    __asm float_equal e, a, b;
    return g || e;
}

bool __operator <= (const int a, const int b) {
    return float (a) <= float (b);
}



//
// MESA-specific extension functions.
//

void printMESA (const float f) {
    __asm float_print f;
}

void printMESA (const int i) {
    __asm int_print i;
}

void printMESA (const bool b) {
    __asm bool_print b;
}

void printMESA (const vec2 v) {
    printMESA (v.x);
    printMESA (v.y);
}

void printMESA (const vec3 v) {
    printMESA (v.x);
    printMESA (v.y);
    printMESA (v.z);
}

void printMESA (const vec4 v) {
    printMESA (v.x);
    printMESA (v.y);
    printMESA (v.z);
    printMESA (v.w);
}

void printMESA (const ivec2 v) {
    printMESA (v.x);
    printMESA (v.y);
}

void printMESA (const ivec3 v) {
    printMESA (v.x);
    printMESA (v.y);
    printMESA (v.z);
}

void printMESA (const ivec4 v) {
    printMESA (v.x);
    printMESA (v.y);
    printMESA (v.z);
    printMESA (v.w);
}

void printMESA (const bvec2 v) {
    printMESA (v.x);
    printMESA (v.y);
}

void printMESA (const bvec3 v) {
    printMESA (v.x);
    printMESA (v.y);
    printMESA (v.z);
}

void printMESA (const bvec4 v) {
    printMESA (v.x);
    printMESA (v.y);
    printMESA (v.z);
    printMESA (v.w);
}

void printMESA (const mat2 m) {
    printMESA (m[0]);
    printMESA (m[1]);
}

void printMESA (const mat3 m) {
    printMESA (m[0]);
    printMESA (m[1]);
    printMESA (m[2]);
}

void printMESA (const mat4 m) {
    printMESA (m[0]);
    printMESA (m[1]);
    printMESA (m[2]);
    printMESA (m[3]);
}

void printMESA (const sampler1D e) {
    __asm int_print e;
}

void printMESA (const sampler2D e) {
    __asm int_print e;
}

void printMESA (const sampler3D e) {
    __asm int_print e;
}

void printMESA (const samplerCube e) {
    __asm int_print e;
}

void printMESA (const sampler1DShadow e) {
    __asm int_print e;
}

void printMESA (const sampler2DShadow e) {
    __asm int_print e;
}

@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d1210 1
a1210 1
void __operator += (inout int a, const int b)
d1212 2
a1213 1
   __asm vec4_add a, a, b;
d1216 1
a1216 1
void __operator -= (inout int a, const int b)
d1218 2
a1219 1
   __asm vec4_subtract a, a, b;
d1222 1
a1222 1
void __operator *= (inout int a, const int b)
d1224 2
a1225 1
   __asm vec4_multiply a, a, b;
d1228 1
a1228 1
void __operator /= (inout int a, const int b)
d1230 2
a1231 4
   float invB;
   __asm float_rcp invB, b;
   __asm vec4_multiply a, a, invB;
   __asm vec4_to_ivec4 a, a;
d1237 1
a1237 1
void __operator += (inout ivec2 v, const ivec2 u)
d1239 2
a1240 1
   __asm vec4_add v, v, u;
d1243 1
a1243 1
void __operator -= (inout ivec2 v, const ivec2 u)
d1245 2
a1246 1
   __asm vec4_subtract v, v, u;
d1249 1
a1249 1
void __operator *= (inout ivec2 v, const ivec2 u)
d1251 2
a1252 1
   __asm vec4_multiply v, v, u;
d1255 1
a1255 1
void __operator /= (inout ivec2 v, const ivec2 u)
d1257 2
a1258 5
   ivec2 inv, z;
   __asm float_rcp inv.x, u.x;
   __asm float_rcp inv.y, u.y;
   __asm vec4_multiply z, v, inv;
   __asm vec4_to_ivec4 v, z;
d1264 1
a1264 1
void __operator += (inout ivec3 v, const ivec3 u)
d1266 2
a1267 1
   __asm vec4_add v, v, u;
d1270 1
a1270 1
void __operator -= (inout ivec3 v, const ivec3 u)
d1272 2
a1273 1
   __asm vec4_subtract v, v, u;
d1276 1
a1276 1
void __operator *= (inout ivec3 v, const ivec3 u)
d1278 2
a1279 1
   __asm vec4_multiply v, v, u;
d1282 1
a1282 1
void __operator /= (inout ivec3 v, const ivec3 u)
d1284 2
a1285 5
   ivec3 inv, z;
   __asm float_rcp inv.x, u.x;
   __asm float_rcp inv.y, u.y;
   __asm vec4_multiply z, v, inv;
   __asm vec4_to_ivec4 v, z;
d1291 1
a1291 1
void __operator += (inout ivec4 v, const ivec4 u)
d1293 2
a1294 1
   __asm vec4_add v, v, u;
d1297 1
a1297 1
void __operator -= (inout ivec4 v, const ivec4 u)
d1299 2
a1300 1
   __asm vec4_subtract v, v, u;
d1303 1
a1303 1
void __operator *= (inout ivec4 v, const ivec4 u)
d1305 2
a1306 1
   __asm vec4_multiply v, v, u;
d1309 1
a1309 1
void __operator /= (inout ivec4 v, const ivec4 u)
d1311 2
a1312 5
   ivec4 inv, z;
   __asm float_rcp inv.x, u.x;
   __asm float_rcp inv.y, u.y;
   __asm vec4_multiply z, v, inv;
   __asm vec4_to_ivec4 v, z;
d1318 1
a1318 1
void __operator += (inout float a, const float b)
d1320 2
a1321 1
    __asm vec4_add a.x, a.x, b.x;
d1324 1
a1324 1
void __operator -= (inout float a, const float b)
d1326 2
a1327 1
    __asm vec4_subtract a.x, a, b;
d1330 1
a1330 1
void __operator *= (inout float a, const float b)
d1332 2
a1333 1
    __asm vec4_multiply a.x, a, b;
d1336 1
a1336 1
void __operator /= (inout float a, const float b)
d1338 2
a1339 3
   float w; // = 1 / b
   __asm float_rcp w.x, b;
   __asm vec4_multiply a.x, a, w;
d1345 1
a1345 1
void __operator += (inout vec2 v, const vec2 u)
d1347 2
a1348 1
   __asm vec4_add v.xy, v.xy, u.xy;
d1351 1
a1351 1
void __operator -= (inout vec2 v, const vec2 u)
d1353 2
a1354 1
   __asm vec4_subtract v.xy, v.xy, u.xy;
d1357 1
a1357 1
void __operator *= (inout vec2 v, const vec2 u)
d1359 2
a1360 1
   __asm vec4_multiply v.xy, v.xy, u.xy;
d1363 1
a1363 1
void __operator /= (inout vec2 v, const vec2 u)
d1365 2
a1366 4
   vec2 w;
   __asm float_rcp w.x, u.x;
   __asm float_rcp w.y, u.y;
   __asm vec4_multiply v.xy, v.xy, w.xy;
d1372 1
a1372 1
void __operator += (inout vec3 v, const vec3 u)
d1374 2
a1375 1
   __asm vec4_add v.xyz, v, u;
d1378 1
a1378 1
void __operator -= (inout vec3 v, const vec3 u)
d1380 2
a1381 1
   __asm vec4_subtract v.xyz, v, u;
d1384 1
a1384 1
void __operator *= (inout vec3 v, const vec3 u)
d1386 2
a1387 1
   __asm vec4_multiply v.xyz, v, u;
d1390 1
a1390 1
void __operator /= (inout vec3 v, const vec3 u)
d1392 2
a1393 5
   vec3 w;
   __asm float_rcp w.x, u.x;
   __asm float_rcp w.y, u.y;
   __asm float_rcp w.z, u.z;
   __asm vec4_multiply v.xyz, v.xyz, w.xyz;
d1399 1
a1399 1
void __operator += (inout vec4 v, const vec4 u)
d1401 2
a1402 1
   __asm vec4_add v, v, u;
d1405 1
a1405 1
void __operator -= (inout vec4 v, const vec4 u)
d1407 2
a1408 1
   __asm vec4_subtract v, v, u;
d1411 1
a1411 1
void __operator *= (inout vec4 v, const vec4 u)
d1413 2
a1414 1
   __asm vec4_multiply v, v, u;
d1417 1
a1417 1
void __operator /= (inout vec4 v, const vec4 u)
d1419 2
a1420 6
   vec4 w;
   __asm float_rcp w.x, u.x;
   __asm float_rcp w.y, u.y;
   __asm float_rcp w.z, u.z;
   __asm float_rcp w.w, u.w;
   __asm vec4_multiply v, v, w;
d1427 1
a1427 1
void __operator += (inout ivec2 v, const int a)
d1429 2
a1430 1
   __asm vec4_add v.xy, v.xy, a;
d1433 1
a1433 1
void __operator -= (inout ivec2 v, const int a)
d1435 2
a1436 1
   __asm vec4_subtract v.xy, v.xy, a;
d1439 1
a1439 1
void __operator *= (inout ivec2 v, const int a)
d1441 2
a1442 3
   __asm vec4_multiply v.xy, v.xy, a;
   v.x *= a;
   v.y *= a;
d1445 1
a1445 1
void __operator /= (inout ivec2 v, const int a)
d1447 2
a1448 3
// XXX rcp
    v.x /= a;
    v.y /= a;
d1454 1
a1454 1
void __operator += (inout ivec3 v, const int a)
d1456 2
a1457 1
   __asm vec4_add v.xyz, v.xyz, a;
d1460 1
a1460 1
void __operator -= (inout ivec3 v, const int a)
d1462 2
a1463 1
   __asm vec4_subtract v.xyz, v.xyz, a;
d1466 1
a1466 1
void __operator *= (inout ivec3 v, const int a)
d1468 2
a1469 1
   __asm vec4_multiply v.xyz, v.xyz, a;
d1472 1
a1472 1
void __operator /= (inout ivec3 v, const int a)
d1474 2
a1475 4
   // XXX rcp
    v.x /= a;
    v.y /= a;
    v.z /= a;
d1481 1
a1481 1
void __operator += (inout ivec4 v, const int a)
d1483 2
a1484 1
   __asm vec4_add v, v, a;
d1487 1
a1487 1
void __operator -= (inout ivec4 v, const int a)
d1489 2
a1490 1
   __asm vec4_subtract v, v, a;
d1493 1
a1493 1
void __operator *= (inout ivec4 v, const int a)
d1495 2
a1496 1
   __asm vec4_multiply v, v, a;
d1499 1
a1499 1
void __operator /= (inout ivec4 v, const int a)
d1501 2
a1502 4
    v.x /= a;
    v.y /= a;
    v.z /= a;
    v.w /= a;
d1509 1
a1509 1
void __operator += (inout vec2 v, const float a)
d1511 2
a1512 1
   __asm vec4_add v.xy, v, a;
d1515 1
a1515 1
void __operator -= (inout vec2 v, const float a)
d1517 2
a1518 1
   __asm vec4_subtract v.xy, v, a;
d1521 1
a1521 1
void __operator *= (inout vec2 v, const float a)
d1523 2
a1524 1
   __asm vec4_multiply v.xy, v, a;
d1527 1
a1527 1
void __operator /= (inout vec2 v, const float a)
d1529 2
a1530 3
   float invA;
   __asm float_rcp invA, a;
   __asm vec4_multiply v.xy, v.xy, invA;
d1536 1
a1536 1
void __operator += (inout vec3 v, const float a)
d1538 2
a1539 1
   __asm vec4_add v.xyz, v, a;
d1542 1
a1542 1
void __operator -= (inout vec3 v, const float a)
d1544 2
a1545 1
   __asm vec4_subtract v.xyz, v, a;
d1548 1
a1548 1
void __operator *= (inout vec3 v, const float a)
d1550 2
a1551 1
   __asm vec4_multiply v.xyz, v, a;
d1554 1
a1554 1
void __operator /= (inout vec3 v, const float a)
d1556 2
a1557 3
   float invA;
   __asm float_rcp invA, a;
   __asm vec4_multiply v.xyz, v.xyz, invA;
d1563 1
a1563 1
void __operator += (inout vec4 v, const float a)
d1565 2
a1566 1
   __asm vec4_add v, v, a;
d1569 1
a1569 1
void __operator -= (inout vec4 v, const float a)
d1571 2
a1572 1
   __asm vec4_subtract v, v, a;
d1575 1
a1575 1
void __operator *= (inout vec4 v, const float a)
d1577 2
a1578 1
   __asm vec4_multiply v, v, a;
d1581 1
a1581 1
void __operator /= (inout vec4 v, const float a)
d1583 2
a1584 3
   float invA;
   __asm float_rcp invA, a;
   __asm vec4_multiply v, v, invA;
d1910 1
a1910 1
void __operator += (inout mat2 m, const mat2 n)
d1912 3
a1914 2
    m[0] += n[0];
    m[1] += n[1];
d1917 1
a1917 1
void __operator -= (inout mat2 m, const mat2 n)
d1919 3
a1921 2
    m[0] -= n[0];
    m[1] -= n[1];
d1924 1
a1924 1
void __operator *= (inout mat2 m, const mat2 n)
d1926 2
a1927 1
    m = m * n;
d1930 1
a1930 1
void __operator /= (inout mat2 m, const mat2 n)
d1932 3
a1934 2
    m[0] /= n[0];
    m[1] /= n[1];
d1940 1
a1940 1
void __operator += (inout mat3 m, const mat3 n)
d1942 4
a1945 3
    m[0] += n[0];
    m[1] += n[1];
    m[2] += n[2];
d1948 1
a1948 1
void __operator -= (inout mat3 m, const mat3 n)
d1950 4
a1953 3
    m[0] -= n[0];
    m[1] -= n[1];
    m[2] -= n[2];
d1956 1
a1956 1
void __operator *= (inout mat3 m, const mat3 n)
d1958 2
a1959 1
    m = m * n;
d1962 1
a1962 1
void __operator /= (inout mat3 m, const mat3 n)
d1964 4
a1967 3
    m[0] /= n[0];
    m[1] /= n[1];
    m[2] /= n[2];
d1973 1
a1973 1
void __operator += (inout mat4 m, const mat4 n)
d1975 5
a1979 4
    m[0] += n[0];
    m[1] += n[1];
    m[2] += n[2];
    m[3] += n[3];
d1982 7
a1988 5
void __operator -= (inout mat4 m, const mat4 n) {
    m[0] -= n[0];
    m[1] -= n[1];
    m[2] -= n[2];
    m[3] -= n[3];
d1991 1
a1991 1
void __operator *= (inout mat4 m, const mat4 n)
d1993 2
a1994 1
    m = m * n;
d1997 1
a1997 1
void __operator /= (inout mat4 m, const mat4 n)
d1999 5
a2003 4
    m[0] /= n[0];
    m[1] /= n[1];
    m[2] /= n[2];
    m[3] /= n[3];
d2009 6
a2014 3
void __operator += (inout mat2 m, const float a) {
    m[0] += a;
    m[1] += a;
d2017 6
a2022 3
void __operator -= (inout mat2 m, const float a) {
    m[0] -= a;
    m[1] -= a;
d2025 6
a2030 3
void __operator *= (inout mat2 m, const float a) {
    m[0] *= a;
    m[1] *= a;
d2033 6
a2038 3
void __operator /= (inout mat2 m, const float a) {
    m[0] /= a;
    m[1] /= a;
d2044 7
a2050 4
void __operator += (inout mat3 m, const float a) {
    m[0] += a;
    m[1] += a;
    m[2] += a;
d2053 7
a2059 4
void __operator -= (inout mat3 m, const float a) {
    m[0] -= a;
    m[1] -= a;
    m[2] -= a;
d2062 7
a2068 4
void __operator *= (inout mat3 m, const float a) {
    m[0] *= a;
    m[1] *= a;
    m[2] *= a;
d2071 7
a2077 4
void __operator /= (inout mat3 m, const float a) {
    m[0] /= a;
    m[1] /= a;
    m[2] /= a;
d2083 38
a2120 26
void __operator += (inout mat4 m, const float a) {
    m[0] += a;
    m[1] += a;
    m[2] += a;
    m[3] += a;
}

void __operator -= (inout mat4 m, const float a) {
    m[0] -= a;
    m[1] -= a;
    m[2] -= a;
    m[3] -= a;
}

void __operator *= (inout mat4 m, const float a) {
    m[0] *= a;
    m[1] *= a;
    m[2] *= a;
    m[3] *= a;
}

void __operator /= (inout mat4 m, const float a) {
    m[0] /= a;
    m[1] /= a;
    m[2] /= a;
    m[3] /= a;
d2127 1
a2127 1
void __operator *= (inout vec2 v, const mat2 m)
d2129 2
a2130 1
    v = v * m;
d2133 1
a2133 1
void __operator *= (inout vec3 v, const mat3 m)
d2135 2
a2136 1
    v = v * m;
d2139 1
a2139 1
void __operator *= (inout vec4 v, const mat4 m)
d2141 2
a2142 1
    v = v * m;
@


1.1
log
@Initial revision
@
text
@d110 1
a110 1
   __asm float_to_int __retVal, f;
d113 1
a113 1
bool __constructor(const int i)
d115 1
a115 2
   const float zero = 0.0;
   __asm vec4_seq __retVal, i, zero;
d118 1
a118 1
bool __constructor(const float f)
d120 1
a120 2
   const float zero = 0.0;
   __asm vec4_seq __retVal, i, zero;
d123 1
a123 1
int __constructor(const bool b)
d125 1
a125 1
   __retVal = b;
d128 1
a128 1
float __constructor(const bool b)
d130 1
a130 1
   __retVal = b;
d133 1
a133 1
float __constructor(const int i)
d135 1
a135 1
    __asm int_to_float __retVal, i;
d138 1
a138 1
bool __constructor(const bool b)
d140 1
a140 1
   __retVal = b;
d143 1
a143 1
int __constructor(const int i)
d145 1
a145 1
   __retVal = i;
d164 1
a164 1
   __retVal.xy = f.xx;
d169 1
a169 1
   __retVal.xy = i.xx;
d174 7
a180 1
   __retVal.xy = b.xx;
d185 1
a185 1
   __retVal.xy = v.xy;
d190 1
a190 1
   __retVal.xy = v.xy;
d205 2
a206 1
   __retVal.xyz = f.xxx;
d211 1
a211 1
   __asm int_to_float __retVal.xyz, i.xxx;
d216 6
a221 1
   __retVal.xyz = b.xxx;
d226 1
a226 1
   __retVal.xyz = v.xyz;
d242 2
a243 1
   __retVal = f.xxxx;
d248 1
a248 1
   __retVal = i.xxxx;
d253 11
a263 1
   __retVal = b.xxxx;
d273 8
d292 1
a292 1
   __retVal.xy = i.xx;
d297 1
a297 1
   __asm float_to_int __retVal.xy, f.xx;
d302 1
a302 1
   __asm float_to_int __retVal.xy, b.xx;
d317 1
a317 1
   __retVal.xyz = i.xxx;
d322 1
a322 1
   __retVal.xyz = f.xxx;
d327 1
a327 1
   __retVal.xyz = b.xxx;
d343 1
a343 1
   __retVal = i.xxxx;
d348 1
a348 1
   __asm float_to_int __retVal, f.xxxx;
d353 1
a353 1
   __retVal = b.xxxx;
d365 7
d374 1
a374 1
   __retVal.xy = b.xx;
d379 1
a379 2
   const vec2 zero = vec2(0.0, 0.0);
   __asm vec4_seq __retVal.xy, f.xx, zero;
d384 6
a389 2
   const ivec2 zero = ivec2(0, 0);
   __asm vec4_seq __retVal.xy, i.xx, zero;
d392 6
d408 7
d417 1
a417 1
   __retVal.xyz = b.xxx;
d422 1
a422 2
   const vec3 zero = vec3(0.0, 0.0, 0.0);
   __asm vec4_seq __retVal.xyz, f.xxx, zero;
d427 11
a437 2
   const ivec3 zero = ivec3(0, 0, 0);
   __asm vec4_seq __retVal.xyz, i.xxx, zero;
d441 1
d452 9
d463 1
a463 1
   __retVal.xyzw = b.xxxx;
d468 1
a468 2
   const vec4 zero = vec4(0.0, 0.0, 0.0, 0.0);
   __asm vec4_seq __retVal, f.xxxx, zero;
d473 11
a483 2
   const ivec4 zero = ivec4(0, 0, 0, 0);
   __asm vec4_seq __retVal, i.xxxx, zero;
d626 1
a626 10
// XXX If we ever have int registers, we'll do something like this:
// XXX For now, mostly treat ints as floats.
//    float x, y;
//    __asm int_to_float x, a;
//    __asm int_to_float y, b;
//    __asm vec4_add x.x, x.x, y.x;
//    __asm float_to_int __retVal, x;
   float x;
   __asm vec4_add x, a, b;
   __asm float_to_int __retVal, x;
d631 1
a631 3
   float x;
   __asm vec4_subtract x, a, b;
   __asm float_to_int __retVal, x;
d636 1
a636 3
   float x;
   __asm vec4_multiply x, a, b;
   __asm float_to_int __retVal, x;
d644 1
a644 1
   __asm float_to_int __retVal, x;
d652 1
a652 3
   vec2 x;
   __asm vec4_add x, a, b;
   __asm float_to_int __retVal, x;
d657 1
a657 3
   vec2 x;
   __asm vec4_subtract x, a, b;
   __asm float_to_int __retVal, x;
d662 1
a662 3
   vec2 x;
   __asm vec4_multiply x, a, b;
   __asm float_to_int __retVal, x;
d671 1
a671 1
   __asm float_to_int __retVal, x;
d679 1
a679 3
   vec3 x;
   __asm vec4_add x, a, b;
   __asm float_to_int __retVal, x;
d684 1
a684 3
   vec3 x;
   __asm vec4_subtract x, a, b;
   __asm float_to_int __retVal, x;
d689 1
a689 3
   vec3 x;
   __asm vec4_multiply x, a, b;
   __asm float_to_int __retVal, x;
d699 1
a699 1
   __asm float_to_int __retVal, x;
d707 1
a707 3
   vec3 x;
   __asm vec4_add x, a, b;
   __asm float_to_int __retVal, x;
d712 1
a712 3
   vec4 x;
   __asm vec4_subtract x, a, b;
   __asm float_to_int __retVal, x;
d717 1
a717 3
   vec4 x;
   __asm vec4_multiply x, a, b;
   __asm float_to_int __retVal, x;
d728 1
a728 1
   __asm float_to_int __retVal, x;
d736 1
a736 1
   __asm vec4_add __retVal.x, a, b;
d741 1
a741 1
   __asm vec4_subtract __retVal.x, a, b;
d746 1
a746 1
    __asm vec4_multiply __retVal.x, a, b;
d752 2
a753 2
   __asm float_rcp bInv.x, b.x;
   __asm vec4_multiply __retVal.x, a, bInv;
d844 1
a844 1
   __asm vec4_add __retVal.xy, a.xx, u.xy;
d849 1
a849 1
   __asm vec4_add __retVal.xy, v.xy, b.xx;
d854 1
a854 1
   __asm vec4_subtract __retVal.xy, a.xx, u.xy;
d859 1
a859 1
   __asm vec4_subtract __retVal.xy, v.xy, b.xx;
d864 1
a864 1
   __asm vec4_multiply __retVal.xy, a.xx, u.xy;
d869 1
a869 1
   __asm vec4_multiply __retVal.xy, v.xy, b.xx;
d877 1
a877 1
   __asm vec4_multiply __retVal.xy, a.xx, invU.xy;
d884 1
a884 1
   __asm vec4_multiply __retVal.xy, v.xy, invB.xx;
d892 1
a892 1
   __asm vec4_add __retVal.xyz, a.xxx, u.xyz;
d897 1
a897 1
   __asm vec4_add __retVal.xyz, v.xyz, b.xxx;
d902 1
a902 1
   __asm vec4_subtract __retVal.xyz, a.xxx, u.xyz;
d907 1
a907 1
   __asm vec4_subtract __retVal.xyz, v.xyz, b.xxx;
d912 1
a912 1
   __asm vec4_multiply __retVal.xyz, a.xxx, u.xyz;
d917 1
a917 1
   __asm vec4_multiply __retVal.xyz, v.xyz, b.xxx;
d926 1
a926 1
   __asm vec4_multiply __retVal.xyz, a.xxx, invU.xyz;
d933 1
a933 1
   __asm vec4_multiply __retVal.xyz, v.xyz, invB.xxx;
d941 1
a941 1
   __asm vec4_add __retVal, a.xxxx, u;
d946 1
a946 1
   __asm vec4_add __retVal, v, b.xxxx;
d951 1
a951 1
   __asm vec4_subtract __retVal, a.xxxx, u;
d956 1
a956 1
   __asm vec4_subtract __retVal, v, b.xxxx;
d961 1
a961 1
   __asm vec4_multiply __retVal, a.xxxx, u;
d966 1
a966 1
   __asm vec4_multiply __retVal, v, b.xxxx;
d976 1
a976 1
   __asm vec4_multiply __retVal, a.xxxx, invU;
d983 1
a983 1
   __asm vec4_multiply __retVal, v, invB.xxxx;
d1230 1
d1257 1
a1257 1
   __asm float_to_int __retVal, z;
d1284 1
a1284 1
   __asm float_to_int __retVal, z;
d1311 1
a1311 1
   __asm float_to_int __retVal, z;
d1319 1
a1319 1
    __asm vec4_add a.x, a.x, b;
d1426 1
a1426 1
   __asm vec4_add v.xy, v.xy, a.xx;
d1431 1
a1431 1
   __asm vec4_subtract v.xy, v.xy, a.xx;
d1436 1
a1436 1
   __asm vec4_multiply v.xy, v.xy, a.xx;
d1453 1
a1453 1
   __asm vec4_add v.xyz, v.xyz, a.xxx;
d1458 1
a1458 1
   __asm vec4_subtract v.xyz, v.xyz, a.xxx;
d1463 1
a1463 1
   __asm vec4_multiply v.xyz, v.xyz, a.xxx;
d1479 1
a1479 1
   __asm vec4_add v, v, a.xxxx;
d1484 1
a1484 1
   __asm vec4_subtract v, v, a.xxxx;
d1489 1
a1489 1
   __asm vec4_multiply v, v, a.xxxx;
d1506 1
a1506 1
   __asm vec4_add v.xy, v, a.xx;
d1511 1
a1511 1
   __asm vec4_subtract v.xy, v, a.xx;
d1516 1
a1516 1
   __asm vec4_multiply v.xy, v, a.xx;
d1523 1
a1523 1
   __asm vec4_multiply v.xy, v.xy, a.xx;
d1531 1
a1531 1
   __asm vec4_add v.xyz, v, a.xxx;
d1536 1
a1536 1
   __asm vec4_subtract v.xyz, v, a.xxx;
d1541 1
a1541 1
   __asm vec4_multiply v.xyz, v, a.xxx;
d1548 1
a1548 1
   __asm vec4_multiply v.xyz, v.xyz, a.xxx;
d1556 1
a1556 1
   __asm vec4_add v, v, a.xxxx;
d1561 1
a1561 1
   __asm vec4_subtract v, v, a.xxxx;
d1566 1
a1566 1
   __asm vec4_multiply v, v, a.xxxx;
d1573 1
a1573 1
   __asm vec4_multiply v, v, a.xxxx;
d1596 2
a1597 9
   vec2 mRow0, mRow1;
   mRow0.x = m[0].x;
   mRow0.y = m[1].x;
   mRow1.x = m[0].y;
   mRow1.y = m[1].y;
   __retVal[0].x = dot(mRow0, n[0]);
   __retVal[1].x = dot(mRow0, n[1]);
   __retVal[0].y = dot(mRow1, n[0]);
   __retVal[1].y = dot(mRow1, n[1]);
d1625 3
a1627 28
   // sub-blocks to reduce register usage
   {
      vec3 mRow0;
      mRow0.x = m[0].x;
      mRow0.y = m[1].x;
      mRow0.z = m[2].x;
      __retVal[0].x = dot(mRow0, n[0]);
      __retVal[1].x = dot(mRow0, n[1]);
      __retVal[2].x = dot(mRow0, n[2]);
   }
   {
      vec3 mRow1;
      mRow1.x = m[0].y;
      mRow1.y = m[1].y;
      mRow1.z = m[2].y;
      __retVal[0].y = dot(mRow1, n[0]);
      __retVal[1].y = dot(mRow1, n[1]);
      __retVal[2].y = dot(mRow1, n[2]);
   }
   {
      vec3 mRow2;
      mRow2.x = m[0].z;
      mRow2.y = m[1].z;
      mRow2.z = m[2].z;
      __retVal[0].z = dot(mRow2, n[0]);
      __retVal[1].z = dot(mRow2, n[1]);
      __retVal[2].z = dot(mRow2, n[2]);
   }
d1658 4
a1661 45
   // sub-blocks to reduce temporary usage
   {
      vec4 mRow0;
      mRow0.x = m[0].x;
      mRow0.y = m[1].x;
      mRow0.z = m[2].x;
      mRow0.w = m[3].x;
      __retVal[0].x = dot(mRow0, n[0]);
      __retVal[1].x = dot(mRow0, n[1]);
      __retVal[2].x = dot(mRow0, n[2]);
      __retVal[3].x = dot(mRow0, n[3]);
   }
   {
      vec4 mRow1;
      mRow1.x = m[0].y;
      mRow1.y = m[1].y;
      mRow1.z = m[2].y;
      mRow1.w = m[3].y;
      __retVal[0].y = dot(mRow1, n[0]);
      __retVal[1].y = dot(mRow1, n[1]);
      __retVal[2].y = dot(mRow1, n[2]);
      __retVal[3].y = dot(mRow1, n[3]);
   }
   {
      vec4 mRow2;
      mRow2.x = m[0].z;
      mRow2.y = m[1].z;
      mRow2.z = m[2].z;
      mRow2.w = m[3].z;
      __retVal[0].z = dot(mRow2, n[0]);
      __retVal[1].z = dot(mRow2, n[1]);
      __retVal[2].z = dot(mRow2, n[2]);
      __retVal[3].z = dot(mRow2, n[3]);
   }
   {
      vec4 mRow3;
      mRow3.x = m[0].w;
      mRow3.y = m[1].w;
      mRow3.z = m[2].w;
      mRow3.w = m[3].w;
      __retVal[0].w = dot(mRow3, n[0]);
      __retVal[1].w = dot(mRow3, n[1]);
      __retVal[2].w = dot(mRow3, n[2]);
      __retVal[3].w = dot(mRow3, n[3]);
   }
d1855 2
a1856 7
   vec2 r0, r1;
   r0.x = m[0].x;
   r0.y = m[1].x;
   r1.x = m[0].y;
   r1.y = m[1].y;
   __retVal.x = dot(r0, v);
   __retVal.y = dot(r1, v);
d1867 3
a1869 21
   {
      vec3 r0;
      r0.x = m[0].x;
      r0.y = m[1].x;
      r0.z = m[2].x;
      __asm vec3_dot __retVal.x, r0, v;
   }
   {
      vec3 r1;
      r1.x = m[0].y;
      r1.y = m[1].y;
      r1.z = m[2].y;
      __asm vec3_dot __retVal.y, r1, v;
   }
   {
      vec3 r2;
      r2.x = m[0].z;
      r2.y = m[1].z;
      r2.z = m[2].z;
      __asm vec3_dot __retVal.z, r2, v;
   }
d1881 4
a1884 33
   // extract rows, then do dot product
   {
      vec4 r0;
      r0.x = m[0].x;
      r0.y = m[1].x;
      r0.z = m[2].x;
      r0.w = m[3].x;
      __asm vec4_dot __retVal.x, r0, v;
   }
   {
      vec4 r1;
      r1.x = m[0].y;
      r1.y = m[1].y;
      r1.z = m[2].y;
      r1.w = m[3].y;
      __asm vec4_dot __retVal.y, r1, v;
   }
   {
      vec4 r2;
      r2.x = m[0].z;
      r2.y = m[1].z;
      r2.z = m[2].z;
      r2.w = m[3].z;
      __asm vec4_dot __retVal.z, r2, v;
   }
   {
      vec4 r3;
      r3.x = m[0].w;
      r3.y = m[1].w;
      r3.z = m[2].w;
      r3.w = m[3].w;
      __asm vec4_dot __retVal.w, r3, v;
   }
a1888 1
   //mm
@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@
