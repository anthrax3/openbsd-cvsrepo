head	1.2;
access;
symbols
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2007.11.24.17.41.37;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.02;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.02;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.46;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge Mesa 7.0.1
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  6.5
 *
 * Copyright (C) 2004-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * \file shaderobjects.c
 * ARB_shader_objects state management functions
 * \author Michal Krol
 */


#include "glheader.h"
#include "context.h"
#include "hash.h"
#include "shaderobjects.h"
#include "shaderobjects_3dlabs.h"


#if FEATURE_ARB_shader_objects

#define RELEASE_GENERIC(x)\
   (**x)._unknown.Release ((struct gl2_unknown_intf **) (x))

#define RELEASE_CONTAINER(x)\
   (**x)._generic._unknown.Release ((struct gl2_unknown_intf **) (x))

#define RELEASE_PROGRAM(x)\
   (**x)._container._generic._unknown.Release ((struct gl2_unknown_intf **) (x))

#define RELEASE_SHADER(x)\
   (**x)._generic._unknown.Release ((struct gl2_unknown_intf **) (x))

static struct gl2_unknown_intf **
lookup_handle (GLcontext *ctx, GLhandleARB handle, enum gl2_uiid uiid, const char *function)
{
   struct gl2_unknown_intf **unk;

   /*
    * Note: _mesa_HashLookup() requires non-zero input values, so the passed-in handle value
    *       must be checked beforehand.
    */
   if (handle == 0) {
      _mesa_error (ctx, GL_INVALID_VALUE, function);
      return NULL;
   }
   _glthread_LOCK_MUTEX (ctx->Shared->Mutex);
   unk = (struct gl2_unknown_intf **) (_mesa_HashLookup (ctx->Shared->GL2Objects, handle));
   _glthread_UNLOCK_MUTEX (ctx->Shared->Mutex);
   if (unk == NULL)
      _mesa_error (ctx, GL_INVALID_VALUE, function);
   else {
      unk = (**unk).QueryInterface (unk, uiid);
      if (unk == NULL)
         _mesa_error (ctx, GL_INVALID_OPERATION, function);
   }
   return unk;
}

#define GET_GENERIC(x, handle, function)\
   struct gl2_generic_intf **x = (struct gl2_generic_intf **)\
                                 lookup_handle (ctx, handle, UIID_GENERIC, function);

#define GET_CONTAINER(x, handle, function)\
   struct gl2_container_intf **x = (struct gl2_container_intf **)\
                                   lookup_handle (ctx, handle, UIID_CONTAINER, function);

#define GET_PROGRAM(x, handle, function)\
   struct gl2_program_intf **x = (struct gl2_program_intf **)\
                                 lookup_handle (ctx, handle, UIID_PROGRAM, function);

#define GET_SHADER(x, handle, function)\
   struct gl2_shader_intf **x = (struct gl2_shader_intf **)\
                                lookup_handle (ctx, handle, UIID_SHADER, function);

#define GET_LINKED_PROGRAM(x, handle, function)\
   GET_PROGRAM(x, handle, function);\
   if (x != NULL && (**x).GetLinkStatus (x) == GL_FALSE) {\
      RELEASE_PROGRAM(x);\
      x = NULL;\
      _mesa_error (ctx, GL_INVALID_OPERATION, function);\
   }

#define GET_CURRENT_LINKED_PROGRAM(x, function)\
   struct gl2_program_intf **x = NULL;\
   if (ctx->ShaderObjects.CurrentProgram == NULL)\
      _mesa_error (ctx, GL_INVALID_OPERATION, function);\
   else {\
      x = ctx->ShaderObjects.CurrentProgram;\
      if (x != NULL && (**x).GetLinkStatus (x) == GL_FALSE) {\
         x = NULL;\
         _mesa_error (ctx, GL_INVALID_OPERATION, function);\
      }\
   }

#define IS_NAME_WITH_GL_PREFIX(x) ((x)[0] == 'g' && (x)[1] == 'l' && (x)[2] == '_')


GLvoid GLAPIENTRY
_mesa_DeleteObjectARB (GLhandleARB obj)
{
   if (obj != 0)
   {
      GET_CURRENT_CONTEXT(ctx);
      GET_GENERIC(gen, obj, "glDeleteObjectARB");

      if (gen != NULL)
      {
         (**gen).Delete (gen);
         RELEASE_GENERIC(gen);
      }
   }
}

GLhandleARB GLAPIENTRY
_mesa_GetHandleARB (GLenum pname)
{
	GET_CURRENT_CONTEXT(ctx);

	switch (pname)
	{
   case GL_PROGRAM_OBJECT_ARB:
      {
         struct gl2_program_intf **pro = ctx->ShaderObjects.CurrentProgram;

         if (pro != NULL)
            return (**pro)._container._generic.GetName ((struct gl2_generic_intf **) (pro));
      }
      break;
	default:
		_mesa_error (ctx, GL_INVALID_ENUM, "glGetHandleARB");
	}

	return 0;
}

GLvoid GLAPIENTRY
_mesa_DetachObjectARB (GLhandleARB containerObj, GLhandleARB attachedObj)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CONTAINER(con, containerObj, "glDetachObjectARB");

	if (con != NULL)
	{
		GET_GENERIC(att, attachedObj, "glDetachObjectARB");

		if (att != NULL)
		{
			(**con).Detach (con, att);
			RELEASE_GENERIC(att);
		}
		RELEASE_CONTAINER(con);
	}
}

GLhandleARB GLAPIENTRY
_mesa_CreateShaderObjectARB (GLenum shaderType)
{
	return _mesa_3dlabs_create_shader_object (shaderType);
}

GLvoid GLAPIENTRY
_mesa_ShaderSourceARB (GLhandleARB shaderObj, GLsizei count, const GLcharARB **string,
					   const GLint *length)
{
	GET_CURRENT_CONTEXT(ctx);
	GLint *offsets;
	GLsizei i;
	GLcharARB *source;
	GET_SHADER(sha, shaderObj, "glShaderSourceARB");

	if (sha == NULL)
		return;

	if (string == NULL)
	{
		RELEASE_SHADER(sha);
		_mesa_error (ctx, GL_INVALID_VALUE, "glShaderSourceARB");
		return;
	}

	/*
	 * This array holds offsets of where the appropriate string ends, thus the last
	 * element will be set to the total length of the source code.
	 */
	offsets = (GLint *) _mesa_malloc (count * sizeof (GLint));
	if (offsets == NULL)
	{
		RELEASE_SHADER(sha);
		_mesa_error (ctx, GL_OUT_OF_MEMORY, "glShaderSourceARB");
		return;
	}

	for (i = 0; i < count; i++)
	{
		if (string[i] == NULL)
		{
			_mesa_free ((GLvoid *) offsets);
			RELEASE_SHADER(sha);
			_mesa_error (ctx, GL_INVALID_VALUE, "glShaderSourceARB");
			return;
		}
		if (length == NULL || length[i] < 0)
			offsets[i] = _mesa_strlen (string[i]);
		else
			offsets[i] = length[i];
		/* accumulate string lengths */
		if (i > 0)
			offsets[i] += offsets[i - 1];
	}

	source = (GLcharARB *) _mesa_malloc ((offsets[count - 1] + 1) * sizeof (GLcharARB));
	if (source == NULL)
	{
		_mesa_free ((GLvoid *) offsets);
		RELEASE_SHADER(sha);
		_mesa_error (ctx, GL_OUT_OF_MEMORY, "glShaderSourceARB");
		return;
	}

	for (i = 0; i < count; i++)
	{
		GLint start = (i > 0) ? offsets[i - 1] : 0;
		_mesa_memcpy (source + start, string[i], (offsets[i] - start) * sizeof (GLcharARB));
	}
	source[offsets[count - 1]] = '\0';

	(**sha).SetSource (sha, source, offsets, count);
	RELEASE_SHADER(sha);
}

GLvoid  GLAPIENTRY
_mesa_CompileShaderARB (GLhandleARB shaderObj)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_SHADER(sha, shaderObj, "glCompileShaderARB");

	if (sha != NULL)
	{
		(**sha).Compile (sha);
		RELEASE_SHADER(sha);
	}
}

GLhandleARB GLAPIENTRY
_mesa_CreateProgramObjectARB (GLvoid)
{
	return _mesa_3dlabs_create_program_object ();
}

GLvoid GLAPIENTRY
_mesa_AttachObjectARB (GLhandleARB containerObj, GLhandleARB obj)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CONTAINER(con, containerObj, "glAttachObjectARB");

	if (con != NULL)
	{
		GET_GENERIC(att, obj, "glAttachObjectARB");

		if (att != NULL)
		{
			(**con).Attach (con, att);
			RELEASE_GENERIC(att);
		}
		RELEASE_CONTAINER(con);
	}
}

GLvoid GLAPIENTRY
_mesa_LinkProgramARB (GLhandleARB programObj)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_PROGRAM(pro, programObj, "glLinkProgramARB");

	if (pro != NULL)
	{
		(**pro).Link (pro);
		if (pro == ctx->ShaderObjects.CurrentProgram)
		{
			if ((**pro).GetLinkStatus (pro))
				_mesa_UseProgramObjectARB (programObj);
			else
				_mesa_UseProgramObjectARB (0);
		}
		RELEASE_PROGRAM(pro);
	}
}

GLvoid GLAPIENTRY
_mesa_UseProgramObjectARB (GLhandleARB programObj)
{
	GET_CURRENT_CONTEXT(ctx);
   struct gl2_program_intf **program = NULL;

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (programObj != 0)
	{
		GET_PROGRAM(pro, programObj, "glUseProgramObjectARB");

		if (pro == NULL)
			return;

		if ((**pro).GetLinkStatus (pro) == GL_FALSE)
		{
			RELEASE_PROGRAM(pro);
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUseProgramObjectARB");
			return;
		}

		program = pro;

		ctx->ShaderObjects._VertexShaderPresent = (**pro).IsShaderPresent (pro, GL_VERTEX_SHADER_ARB);
		ctx->ShaderObjects._FragmentShaderPresent = (**pro).IsShaderPresent (pro,
			GL_FRAGMENT_SHADER_ARB);
	}
	else
	{
		ctx->ShaderObjects._VertexShaderPresent = GL_FALSE;
		ctx->ShaderObjects._FragmentShaderPresent = GL_FALSE;
	}

	if (ctx->ShaderObjects.CurrentProgram != NULL)
		RELEASE_PROGRAM(ctx->ShaderObjects.CurrentProgram);
	ctx->ShaderObjects.CurrentProgram = program;
}

GLvoid GLAPIENTRY
_mesa_ValidateProgramARB (GLhandleARB programObj)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_PROGRAM(pro, programObj, "glValidateProgramARB");

	if (pro != NULL)
	{
		(**pro).Validate (pro);
		RELEASE_PROGRAM(pro);
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform1fARB (GLint location, GLfloat v0)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform1fARB");

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		if (!(**pro).WriteUniform (pro, location, 1, &v0, GL_FLOAT))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform1fARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform2fARB (GLint location, GLfloat v0, GLfloat v1)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform2fARB");

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		GLfloat v[2];
		v[0] = v0;
		v[1] = v1;

		if (!(**pro).WriteUniform (pro, location, 1, v, GL_FLOAT_VEC2))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform2fARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform3fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform3fARB");

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		GLfloat v[3];
		v[0] = v0;
		v[1] = v1;
		v[2] = v2;

		if (!(**pro).WriteUniform (pro, location, 1, v, GL_FLOAT_VEC3))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform3fARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform4fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform4fARB");

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		GLfloat v[4];
		v[0] = v0;
		v[1] = v1;
		v[2] = v2;
		v[3] = v3;

		if (!(**pro).WriteUniform (pro, location, 1, v, GL_FLOAT_VEC4))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform4fARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform1iARB (GLint location, GLint v0)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform1iARB");

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		if (!(**pro).WriteUniform (pro, location, 1, &v0, GL_INT))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform1iARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform2iARB (GLint location, GLint v0, GLint v1)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform2iARB");

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		GLint v[2];
		v[0] = v0;
		v[1] = v1;

		if (!(**pro).WriteUniform (pro, location, 1, v, GL_INT_VEC2))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform2iARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform3iARB (GLint location, GLint v0, GLint v1, GLint v2)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform3iARB");

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		GLint v[3];
		v[0] = v0;
		v[1] = v1;
		v[2] = v2;

		if (!(**pro).WriteUniform (pro, location, 1, v, GL_INT_VEC3))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform3iARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform4iARB (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform4iARB");

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		GLint v[4];
		v[0] = v0;
		v[1] = v1;
		v[2] = v2;
		v[3] = v3;

		if (!(**pro).WriteUniform (pro, location, 1, v, GL_INT_VEC4))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform4iARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform1fvARB (GLint location, GLsizei count, const GLfloat *value)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform1fvARB");

	if (value == NULL)
	{
		_mesa_error (ctx, GL_INVALID_VALUE, "glUniform1fvARB");
		return;
	}

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		if (!(**pro).WriteUniform (pro, location, count, value, GL_FLOAT))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform1fvARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform2fvARB (GLint location, GLsizei count, const GLfloat *value)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform2fvARB");

	if (value == NULL)
	{
		_mesa_error (ctx, GL_INVALID_VALUE, "glUniform2fvARB");
		return;
	}

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		if (!(**pro).WriteUniform (pro, location, count, value, GL_FLOAT_VEC2))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform2fvARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform3fvARB (GLint location, GLsizei count, const GLfloat *value)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform3fvARB");

	if (value == NULL)
	{
		_mesa_error (ctx, GL_INVALID_VALUE, "glUniform3fvARB");
		return;
	}

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		if (!(**pro).WriteUniform (pro, location, count, value, GL_FLOAT_VEC3))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform3fvARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform4fvARB (GLint location, GLsizei count, const GLfloat *value)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform4fvARB");

	if (value == NULL)
	{
		_mesa_error (ctx, GL_INVALID_VALUE, "glUniform4fvARB");
		return;
	}

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		if (!(**pro).WriteUniform (pro, location, count, value, GL_FLOAT_VEC4))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform4fvARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform1ivARB (GLint location, GLsizei count, const GLint *value)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform1ivARB");

	if (value == NULL)
	{
		_mesa_error (ctx, GL_INVALID_VALUE, "glUniform1ivARB");
		return;
	}

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		if (!(**pro).WriteUniform (pro, location, count, value, GL_INT))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform1ivARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform2ivARB (GLint location, GLsizei count, const GLint *value)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform2ivARB");

	if (value == NULL)
	{
		_mesa_error (ctx, GL_INVALID_VALUE, "glUniform2ivARB");
		return;
	}

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		if (!(**pro).WriteUniform (pro, location, count, value, GL_INT_VEC2))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform2ivARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform3ivARB (GLint location, GLsizei count, const GLint *value)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform3ivARB");

	if (value == NULL)
	{
		_mesa_error (ctx, GL_INVALID_VALUE, "glUniform3ivARB");
		return;
	}

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		if (!(**pro).WriteUniform (pro, location, count, value, GL_INT_VEC3))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform3ivARB");
	}
}

GLvoid GLAPIENTRY
_mesa_Uniform4ivARB (GLint location, GLsizei count, const GLint *value)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniform4ivARB");

	if (value == NULL)
	{
		_mesa_error (ctx, GL_INVALID_VALUE, "glUniform4ivARB");
		return;
	}

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		if (!(**pro).WriteUniform (pro, location, count, value, GL_INT_VEC4))
			_mesa_error (ctx, GL_INVALID_OPERATION, "glUniform4ivARB");
	}
}

GLvoid GLAPIENTRY
_mesa_UniformMatrix2fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniformMatrix2fvARB");

	if (value == NULL)
	{
		_mesa_error (ctx, GL_INVALID_VALUE, "glUniformMatrix2fvARB");
		return;
	}

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		if (transpose)
		{
			GLfloat *trans, *pt;
			const GLfloat *pv;

			trans = (GLfloat *) _mesa_malloc (count * 4 * sizeof (GLfloat));
			if (trans == NULL)
			{
				_mesa_error (ctx, GL_OUT_OF_MEMORY, "glUniformMatrix2fvARB");
				return;
			}
			for (pt = trans, pv = value; pt != trans + count * 4; pt += 4, pv += 4)
			{
				pt[0] = pv[0];
				pt[1] = pv[2];
				pt[2] = pv[1];
				pt[3] = pv[3];
			}
			if (!(**pro).WriteUniform (pro, location, count, trans, GL_FLOAT_MAT2))
				_mesa_error (ctx, GL_INVALID_OPERATION, "glUniformMatrix2fvARB");
			_mesa_free (trans);
		}
		else
		{
			if (!(**pro).WriteUniform (pro, location, count, value, GL_FLOAT_MAT2))
				_mesa_error (ctx, GL_INVALID_OPERATION, "glUniformMatrix2fvARB");
		}
	}
}

GLvoid GLAPIENTRY
_mesa_UniformMatrix3fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniformMatrix3fvARB");

	if (value == NULL)
	{
		_mesa_error (ctx, GL_INVALID_VALUE, "glUniformMatrix3fvARB");
		return;
	}

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		if (transpose)
		{
			GLfloat *trans, *pt;
			const GLfloat *pv;

			trans = (GLfloat *) _mesa_malloc (count * 9 * sizeof (GLfloat));
			if (trans == NULL)
			{
				_mesa_error (ctx, GL_OUT_OF_MEMORY, "glUniformMatrix3fvARB");
				return;
			}
			for (pt = trans, pv = value; pt != trans + count * 9; pt += 9, pv += 9)
			{
				pt[0] = pv[0];
				pt[1] = pv[3];
				pt[2] = pv[6];
				pt[3] = pv[1];
				pt[4] = pv[4];
				pt[5] = pv[7];
				pt[6] = pv[2];
				pt[7] = pv[5];
				pt[8] = pv[8];
			}
			if (!(**pro).WriteUniform (pro, location, count, trans, GL_FLOAT_MAT3))
				_mesa_error (ctx, GL_INVALID_OPERATION, "glUniformMatrix3fvARB");
			_mesa_free (trans);
		}
		else
		{
			if (!(**pro).WriteUniform (pro, location, count, value, GL_FLOAT_MAT3))
				_mesa_error (ctx, GL_INVALID_OPERATION, "glUniformMatrix3fvARB");
		}
	}
}

GLvoid GLAPIENTRY
_mesa_UniformMatrix4fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CURRENT_LINKED_PROGRAM(pro, "glUniformMatrix4fvARB");

	if (value == NULL)
	{
		_mesa_error (ctx, GL_INVALID_VALUE, "glUniformMatrix4fvARB");
		return;
	}

	FLUSH_VERTICES(ctx, _NEW_PROGRAM);

	if (pro != NULL)
	{
		if (transpose)
		{
			GLfloat *trans, *pt;
			const GLfloat *pv;

			trans = (GLfloat *) _mesa_malloc (count * 16 * sizeof (GLfloat));
			if (trans == NULL)
			{
				_mesa_error (ctx, GL_OUT_OF_MEMORY, "glUniformMatrix4fvARB");
				return;
			}
			for (pt = trans, pv = value; pt != trans + count * 16; pt += 16, pv += 16)
			{
				_math_transposef (pt, pv);
			}
			if (!(**pro).WriteUniform (pro, location, count, trans, GL_FLOAT_MAT4))
				_mesa_error (ctx, GL_INVALID_OPERATION, "glUniformMatrix4fvARB");
			_mesa_free (trans);
		}
		else
		{
			if (!(**pro).WriteUniform (pro, location, count, value, GL_FLOAT_MAT4))
				_mesa_error (ctx, GL_INVALID_OPERATION, "glUniformMatrix4fvARB");
		}
	}
}

static GLboolean
_mesa_get_object_parameter (GLhandleARB obj, GLenum pname, GLvoid *params, GLboolean *integral,
	GLint *size)
{
	GET_CURRENT_CONTEXT(ctx);
	GLint *ipar = (GLint *) params;

	/* set default values */
	*integral = GL_TRUE;	/* indicates param type, TRUE: GLint, FALSE: GLfloat */
	*size = 1;				/* param array size */

	switch (pname)
	{
	case GL_OBJECT_TYPE_ARB:
	case GL_OBJECT_DELETE_STATUS_ARB:
	case GL_OBJECT_INFO_LOG_LENGTH_ARB:
		{
			GET_GENERIC(gen, obj, "glGetObjectParameterivARB");

			if (gen == NULL)
				return GL_FALSE;

			switch (pname)
			{
			case GL_OBJECT_TYPE_ARB:
				*ipar = (**gen).GetType (gen);
				break;
			case GL_OBJECT_DELETE_STATUS_ARB:
				*ipar = (**gen).GetDeleteStatus (gen);
				break;
         case GL_OBJECT_INFO_LOG_LENGTH_ARB:
            *ipar = (**gen).GetInfoLogLength (gen);
            break;
			}

			RELEASE_GENERIC(gen);
		}
		break;
	case GL_OBJECT_SUBTYPE_ARB:
	case GL_OBJECT_COMPILE_STATUS_ARB:
	case GL_OBJECT_SHADER_SOURCE_LENGTH_ARB:
		{
			GET_SHADER(sha, obj, "glGetObjectParameterivARB");

			if (sha == NULL)
				return GL_FALSE;

			switch (pname)
			{
			case GL_OBJECT_SUBTYPE_ARB:
				*ipar = (**sha).GetSubType (sha);
				break;
			case GL_OBJECT_COMPILE_STATUS_ARB:
				*ipar = (**sha).GetCompileStatus (sha);
				break;
			case GL_OBJECT_SHADER_SOURCE_LENGTH_ARB:
				{
					const GLcharARB *src = (**sha).GetSource (sha);

					if (src == NULL)
						*ipar = 0;
					else
						*ipar = _mesa_strlen (src) + 1;
				}
				break;
			}

			RELEASE_SHADER(sha);
		}
		break;
	case GL_OBJECT_LINK_STATUS_ARB:
	case GL_OBJECT_VALIDATE_STATUS_ARB:
	case GL_OBJECT_ATTACHED_OBJECTS_ARB:
	case GL_OBJECT_ACTIVE_UNIFORMS_ARB:
	case GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB:
		{
			GET_PROGRAM(pro, obj, "glGetObjectParameterivARB");

			if (pro == NULL)
				return GL_FALSE;

			switch (pname)
			{
			case GL_OBJECT_LINK_STATUS_ARB:
				*ipar = (**pro).GetLinkStatus (pro);
				break;
			case GL_OBJECT_VALIDATE_STATUS_ARB:
				*ipar = (**pro).GetValidateStatus (pro);
				break;
         case GL_OBJECT_ATTACHED_OBJECTS_ARB:
            *ipar = (**pro)._container.GetAttachedCount ((struct gl2_container_intf **) (pro));
            break;
			case GL_OBJECT_ACTIVE_UNIFORMS_ARB:
				*ipar = (**pro).GetActiveUniformCount (pro);
				break;
			case GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB:
				*ipar = (**pro).GetActiveUniformMaxLength (pro);
				break;
			case GL_OBJECT_ACTIVE_ATTRIBUTES_ARB:
				*ipar = (**pro).GetActiveAttribCount (pro);
				break;
			case GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB:
				*ipar = (**pro).GetActiveAttribMaxLength (pro);
				break;
			}

			RELEASE_PROGRAM(pro);
		}
		break;
	default:
		_mesa_error (ctx, GL_INVALID_ENUM, "glGetObjectParameterivARB");
		return GL_FALSE;
	}

	return GL_TRUE;
}

GLvoid GLAPIENTRY
_mesa_GetObjectParameterfvARB (GLhandleARB obj, GLenum pname, GLfloat *params)
{
	GET_CURRENT_CONTEXT(ctx);
	GLboolean integral;
	GLint size;

	if (params == NULL)
	{
		_mesa_error (ctx, GL_INVALID_VALUE, "glGetObjectParameterfvARB");
		return;
	}

	assert (sizeof (GLfloat) == sizeof (GLint));

	if (_mesa_get_object_parameter (obj, pname, (GLvoid *) params, &integral, &size))
		if (integral)
		{
			GLint i;

			for (i = 0; i < size; i++)
				params[i] = (GLfloat) ((GLint *) params)[i];
		}
}

GLvoid GLAPIENTRY
_mesa_GetObjectParameterivARB (GLhandleARB obj, GLenum pname, GLint *params)
{
	GET_CURRENT_CONTEXT(ctx);
	GLboolean integral;
	GLint size;

	if (params == NULL)
	{
		_mesa_error (ctx, GL_INVALID_VALUE, "glGetObjectParameterivARB");
		return;
	}

	assert (sizeof (GLfloat) == sizeof (GLint));

	if (_mesa_get_object_parameter (obj, pname, (GLvoid *) params, &integral, &size))
		if (!integral)
		{
			GLint i;

			for (i = 0; i < size; i++)
				params[i] = (GLint) ((GLfloat *) params)[i];
		}
}


/**
 * Copy string from <src> to <dst>, up to maxLength characters, returning
 * length of <dst> in <length>.
 * \param src  the strings source
 * \param maxLength  max chars to copy
 * \param length  returns numberof chars copied
 * \param dst  the string destination
 */
static GLvoid
copy_string(const GLcharARB *src, GLsizei maxLength, GLsizei *length,
            GLcharARB *dst)
{
	GLsizei len;
	for (len = 0; len < maxLength - 1 && src && src[len]; len++)
		dst[len] = src[len];
	if (maxLength > 0)
		dst[len] = 0;
	if (length)
		*length = len;
}


GLvoid GLAPIENTRY
_mesa_GetInfoLogARB (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_GENERIC(gen, obj, "glGetInfoLogARB");

	if (gen == NULL)
		return;

	if (infoLog == NULL)
		_mesa_error (ctx, GL_INVALID_VALUE, "glGetInfoLogARB");
   else {
      GLsizei actualsize = (**gen).GetInfoLogLength (gen);
      if (actualsize > maxLength)
         actualsize = maxLength;
		(**gen).GetInfoLog (gen, actualsize, infoLog);
      if (length != NULL)
         *length = (actualsize > 0) ? actualsize - 1 : 0;
   }
	RELEASE_GENERIC(gen);
}

GLvoid GLAPIENTRY
_mesa_GetAttachedObjectsARB (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count,
							 GLhandleARB *obj)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_CONTAINER(con, containerObj, "glGetAttachedObjectsARB");

	if (con == NULL)
		return;

	if (obj == NULL)
		_mesa_error (ctx, GL_INVALID_VALUE, "glGetAttachedObjectsARB");
	else
	{
		GLsizei cnt, i;

		cnt = (**con).GetAttachedCount (con);
		if (cnt > maxCount)
			cnt = maxCount;
		if (count != NULL)
			*count = cnt;

		for (i = 0; i < cnt; i++)
		{
         struct gl2_generic_intf **x = (**con).GetAttached (con, i);
			obj[i] = (**x).GetName (x);
			RELEASE_GENERIC(x);
		}
	}
	RELEASE_CONTAINER(con);
}

GLint GLAPIENTRY
_mesa_GetUniformLocationARB (GLhandleARB programObj, const GLcharARB *name)
{
	GET_CURRENT_CONTEXT(ctx);
	GLint loc = -1;
	GET_LINKED_PROGRAM(pro, programObj, "glGetUniformLocationARB");

	if (pro == NULL)
		return -1;

	if (name == NULL)
		_mesa_error (ctx, GL_INVALID_VALUE, "glGetUniformLocationARB");
	else
	{
		if (!IS_NAME_WITH_GL_PREFIX(name))
			loc = (**pro).GetUniformLocation (pro, name);
	}
	RELEASE_PROGRAM(pro);
	return loc;
}

GLvoid GLAPIENTRY
_mesa_GetActiveUniformARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length,
	GLint *size, GLenum *type, GLcharARB *name)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_PROGRAM(pro, programObj, "glGetActiveUniformARB");

	if (pro == NULL)
		return;

	if (size == NULL || type == NULL || name == NULL)
		_mesa_error (ctx, GL_INVALID_VALUE, "glGetActiveUniformARB");
	else
	{
		if (index < (**pro).GetActiveUniformCount (pro))
			(**pro).GetActiveUniform (pro, index, maxLength, length, size, type, name);
		else
			_mesa_error (ctx, GL_INVALID_VALUE, "glGetActiveUniformARB");
	}
	RELEASE_PROGRAM(pro);
}

GLvoid GLAPIENTRY
_mesa_GetUniformfvARB (GLhandleARB programObj, GLint location, GLfloat *params)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_LINKED_PROGRAM(pro, programObj, "glGetUniformfvARB");

	if (pro != NULL)
	{
		/* TODO */
		RELEASE_PROGRAM(pro);
	}
}

GLvoid GLAPIENTRY
_mesa_GetUniformivARB (GLhandleARB programObj, GLint location, GLint *params)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_LINKED_PROGRAM(pro, programObj, "glGetUniformivARB");

	if (pro != NULL)
	{
		/* TODO */
		RELEASE_PROGRAM(pro);
	}
}

GLvoid GLAPIENTRY
_mesa_GetShaderSourceARB (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_SHADER(sha, obj, "glGetShaderSourceARB");

	if (sha == NULL)
		return;

	if (source == NULL)
		_mesa_error (ctx, GL_INVALID_VALUE, "glGetShaderSourceARB");
	else
		copy_string ((**sha).GetSource (sha), maxLength, length, source);
	RELEASE_SHADER(sha);
}

/* GL_ARB_vertex_shader */

GLvoid GLAPIENTRY
_mesa_BindAttribLocationARB (GLhandleARB programObj, GLuint index, const GLcharARB *name)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_PROGRAM(pro, programObj, "glBindAttribLocationARB");

	if (pro == NULL)
		return;

	if (name == NULL || index >= MAX_VERTEX_ATTRIBS)
		_mesa_error (ctx, GL_INVALID_VALUE, "glBindAttribLocationARB");
	else if (IS_NAME_WITH_GL_PREFIX(name))
		_mesa_error (ctx, GL_INVALID_OPERATION, "glBindAttribLocationARB");
	else
		(**pro).OverrideAttribBinding (pro, index, name);
	RELEASE_PROGRAM(pro);
}

GLvoid GLAPIENTRY
_mesa_GetActiveAttribARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length,
                          GLint *size, GLenum *type, GLcharARB *name)
{
	GET_CURRENT_CONTEXT(ctx);
	GET_PROGRAM(pro, programObj, "glGetActiveAttribARB");

	if (pro == NULL)
		return;

	if (name == NULL || index >= (**pro).GetActiveAttribCount (pro))
		_mesa_error (ctx, GL_INVALID_VALUE, "glGetActiveAttribARB");
	else
		(**pro).GetActiveAttrib (pro, index, maxLength, length, size, type, name);
	RELEASE_PROGRAM(pro);
}

GLint GLAPIENTRY
_mesa_GetAttribLocationARB (GLhandleARB programObj, const GLcharARB *name)
{
	GET_CURRENT_CONTEXT(ctx);
	GLint loc = -1;
	GET_LINKED_PROGRAM(pro, programObj, "glGetAttribLocationARB");

	if (pro == NULL)
		return -1;

	if (name == NULL)
		_mesa_error (ctx, GL_INVALID_VALUE, "glGetAttribLocationARB");
	else if (!IS_NAME_WITH_GL_PREFIX(name))
		loc = (**pro).GetAttribLocation (pro, name);
	RELEASE_PROGRAM(pro);
	return loc;
}

#endif

GLvoid
_mesa_init_shaderobjects (GLcontext *ctx)
{
	ctx->ShaderObjects.CurrentProgram = NULL;
	ctx->ShaderObjects._FragmentShaderPresent = GL_FALSE;
	ctx->ShaderObjects._VertexShaderPresent = GL_FALSE;

	_mesa_init_shaderobjects_3dlabs (ctx);
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@a52 2


d54 1
a54 2
lookup_handle(GLcontext * ctx, GLhandleARB handle, enum gl2_uiid uiid,
              const char *function)
d59 2
a60 2
    * Note: _mesa_HashLookup() requires non-zero input values, so the
    * passed-in handle value must be checked beforehand.
d63 1
a63 1
      _mesa_error(ctx, GL_INVALID_VALUE, function);
d66 5
a70 8
   _glthread_LOCK_MUTEX(ctx->Shared->Mutex);
   unk = (struct gl2_unknown_intf **) _mesa_HashLookup(ctx->Shared->GL2Objects,
                                                       handle);
   _glthread_UNLOCK_MUTEX(ctx->Shared->Mutex);

   if (unk == NULL) {
      _mesa_error(ctx, GL_INVALID_VALUE, function);
   }
d72 1
a72 1
      unk = (**unk).QueryInterface(unk, uiid);
d74 1
a74 1
         _mesa_error(ctx, GL_INVALID_OPERATION, function);
d95 18
a112 7

#define GET_LINKED_PROGRAM(x, handle, function)              \
   GET_PROGRAM(x, handle, function);                         \
   if (x && (**x).GetLinkStatus(x) == GL_FALSE) {            \
      RELEASE_PROGRAM(x);                                    \
      _mesa_error(ctx, GL_INVALID_OPERATION, function);      \
      x = NULL;                                              \
a114 9
#define GET_CURRENT_LINKED_PROGRAM(x, function)                         \
   struct gl2_program_intf **x = ctx->ShaderObjects.CurrentProgram;     \
   if (!x || (**x).GetLinkStatus(x) == GL_FALSE) {                      \
      _mesa_error(ctx, GL_INVALID_OPERATION, function);                 \
      return;                                                           \
   }



d119 1
a119 1
_mesa_DeleteObjectARB(GLhandleARB obj)
d121 2
a122 1
   if (obj != 0) {
d126 3
a128 2
      if (gen != NULL) {
         (**gen).Delete(gen);
d135 1
a135 1
_mesa_GetHandleARB(GLenum pname)
d137 1
a137 1
   GET_CURRENT_CONTEXT(ctx);
d139 2
a140 1
   switch (pname) {
d146 1
a146 2
            return (**pro)._container._generic.
               GetName((struct gl2_generic_intf **) (pro));
d149 3
a151 3
   default:
      _mesa_error(ctx, GL_INVALID_ENUM, "glGetHandleARB");
   }
d153 1
a153 1
   return 0;
d157 1
a157 1
_mesa_DetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
d159 2
a160 2
   GET_CURRENT_CONTEXT(ctx);
   GET_CONTAINER(con, containerObj, "glDetachObjectARB");
d162 3
a164 2
   if (con != NULL) {
      GET_GENERIC(att, attachedObj, "glDetachObjectARB");
d166 7
a172 6
      if (att != NULL) {
         (**con).Detach(con, att);
         RELEASE_GENERIC(att);
      }
      RELEASE_CONTAINER(con);
   }
d176 1
a176 8
_mesa_CreateShaderObjectARB(GLenum shaderType)
{
   return _mesa_3dlabs_create_shader_object(shaderType);
}

GLvoid GLAPIENTRY
_mesa_ShaderSourceARB(GLhandleARB shaderObj, GLsizei count,
                      const GLcharARB ** string, const GLint * length)
d178 1
a178 61
   GET_CURRENT_CONTEXT(ctx);
   GLint *offsets;
   GLsizei i;
   GLcharARB *source;
   GET_SHADER(sha, shaderObj, "glShaderSourceARB");

   if (sha == NULL)
      return;

   if (string == NULL) {
      RELEASE_SHADER(sha);
      _mesa_error(ctx, GL_INVALID_VALUE, "glShaderSourceARB");
      return;
   }

   /*
    * This array holds offsets of where the appropriate string ends, thus the last
    * element will be set to the total length of the source code.
    */
   offsets = (GLint *) _mesa_malloc(count * sizeof(GLint));
   if (offsets == NULL) {
      RELEASE_SHADER(sha);
      _mesa_error(ctx, GL_OUT_OF_MEMORY, "glShaderSourceARB");
      return;
   }

   for (i = 0; i < count; i++) {
      if (string[i] == NULL) {
         _mesa_free((GLvoid *) offsets);
         RELEASE_SHADER(sha);
         _mesa_error(ctx, GL_INVALID_VALUE, "glShaderSourceARB");
         return;
      }
      if (length == NULL || length[i] < 0)
         offsets[i] = _mesa_strlen(string[i]);
      else
         offsets[i] = length[i];
      /* accumulate string lengths */
      if (i > 0)
         offsets[i] += offsets[i - 1];
   }

   source =
      (GLcharARB *) _mesa_malloc((offsets[count - 1] + 1) *
                                 sizeof(GLcharARB));
   if (source == NULL) {
      _mesa_free((GLvoid *) offsets);
      RELEASE_SHADER(sha);
      _mesa_error(ctx, GL_OUT_OF_MEMORY, "glShaderSourceARB");
      return;
   }

   for (i = 0; i < count; i++) {
      GLint start = (i > 0) ? offsets[i - 1] : 0;
      _mesa_memcpy(source + start, string[i],
                   (offsets[i] - start) * sizeof(GLcharARB));
   }
   source[offsets[count - 1]] = '\0';

   (**sha).SetSource(sha, source, offsets, count);
   RELEASE_SHADER(sha);
d182 2
a183 1
_mesa_CompileShaderARB(GLhandleARB shaderObj)
d185 77
a261 7
   GET_CURRENT_CONTEXT(ctx);
   GET_SHADER(sha, shaderObj, "glCompileShaderARB");

   if (sha != NULL) {
      (**sha).Compile(sha);
      RELEASE_SHADER(sha);
   }
d265 1
a265 1
_mesa_CreateProgramObjectARB(GLvoid)
d267 1
a267 1
   return _mesa_3dlabs_create_program_object();
d271 1
a271 1
_mesa_AttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
d273 2
a274 2
   GET_CURRENT_CONTEXT(ctx);
   GET_CONTAINER(con, containerObj, "glAttachObjectARB");
d276 3
a278 2
   if (con != NULL) {
      GET_GENERIC(att, obj, "glAttachObjectARB");
d280 7
a286 6
      if (att != NULL) {
         (**con).Attach(con, att);
         RELEASE_GENERIC(att);
      }
      RELEASE_CONTAINER(con);
   }
d290 1
a290 1
_mesa_LinkProgramARB(GLhandleARB programObj)
d292 2
a293 2
   GET_CURRENT_CONTEXT(ctx);
   GET_PROGRAM(pro, programObj, "glLinkProgramARB");
d295 12
a306 10
   if (pro != NULL) {
      (**pro).Link(pro);
      if (pro == ctx->ShaderObjects.CurrentProgram) {
         if ((**pro).GetLinkStatus(pro))
            _mesa_UseProgramObjectARB(programObj);
         else
            _mesa_UseProgramObjectARB(0);
      }
      RELEASE_PROGRAM(pro);
   }
d310 1
a310 1
_mesa_UseProgramObjectARB(GLhandleARB programObj)
d312 1
a312 1
   GET_CURRENT_CONTEXT(ctx);
d315 1
a315 1
   FLUSH_VERTICES(ctx, _NEW_PROGRAM);
d317 3
a319 2
   if (programObj != 0) {
      GET_PROGRAM(pro, programObj, "glUseProgramObjectARB(program)");
d321 2
a322 2
      if (pro == NULL)
         return;
d324 6
a329 5
      if ((**pro).GetLinkStatus(pro) == GL_FALSE) {
         RELEASE_PROGRAM(pro);
         _mesa_error(ctx, GL_INVALID_OPERATION, "glUseProgramObjectARB(not linked)");
         return;
      }
d331 1
a331 1
      program = pro;
d333 9
a341 9
      ctx->ShaderObjects._VertexShaderPresent =
         (**pro).IsShaderPresent(pro, GL_VERTEX_SHADER_ARB);
      ctx->ShaderObjects._FragmentShaderPresent =
         (**pro).IsShaderPresent(pro, GL_FRAGMENT_SHADER_ARB);
   }
   else {
      ctx->ShaderObjects._VertexShaderPresent = GL_FALSE;
      ctx->ShaderObjects._FragmentShaderPresent = GL_FALSE;
   }
d343 3
a345 3
   if (ctx->ShaderObjects.CurrentProgram != NULL)
      RELEASE_PROGRAM(ctx->ShaderObjects.CurrentProgram);
   ctx->ShaderObjects.CurrentProgram = program;
d349 1
a349 1
_mesa_ValidateProgramARB(GLhandleARB programObj)
d351 2
a352 2
   GET_CURRENT_CONTEXT(ctx);
   GET_PROGRAM(pro, programObj, "glValidateProgramARB");
d354 5
a358 4
   if (pro != NULL) {
      (**pro).Validate(pro);
      RELEASE_PROGRAM(pro);
   }
d361 2
a362 7

/**
 * Helper function for all the _mesa_Uniform*() functions below.
 */
static INLINE void
uniform(GLint location, GLsizei count, const GLvoid *values, GLenum type,
        const char *caller)
d364 2
a365 2
   GET_CURRENT_CONTEXT(ctx);
   GET_CURRENT_LINKED_PROGRAM(pro, caller);
d367 1
a367 1
   FLUSH_VERTICES(ctx, _NEW_PROGRAM);
d369 5
a373 2
   if (!(**pro).WriteUniform(pro, location, count, values, type))
      _mesa_error(ctx, GL_INVALID_OPERATION, caller);
a375 1

d377 1
a377 1
_mesa_Uniform1fARB(GLint location, GLfloat v0)
d379 14
a392 1
   uniform(location, 1, &v0, GL_FLOAT, "glUniform1fARB");
d396 1
a396 1
_mesa_Uniform2fARB(GLint location, GLfloat v0, GLfloat v1)
d398 15
a412 4
   GLfloat v[2];
   v[0] = v0;
   v[1] = v1;
   uniform(location, 1, v, GL_FLOAT_VEC2, "glUniform2fARB");
d416 1
a416 1
_mesa_Uniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
d418 16
a433 5
   GLfloat v[3];
   v[0] = v0;
   v[1] = v1;
   v[2] = v2;
   uniform(location, 1, v, GL_FLOAT_VEC3, "glUniform3fARB");
d437 1
a437 2
_mesa_Uniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2,
                   GLfloat v3)
d439 10
a448 6
   GLfloat v[4];
   v[0] = v0;
   v[1] = v1;
   v[2] = v2;
   v[3] = v3;
   uniform(location, 1, v, GL_FLOAT_VEC4, "glUniform4fARB");
d452 1
a452 1
_mesa_Uniform1iARB(GLint location, GLint v0)
d454 14
a467 1
   uniform(location, 1, &v0, GL_INT, "glUniform1iARB");
d471 1
a471 1
_mesa_Uniform2iARB(GLint location, GLint v0, GLint v1)
d473 15
a487 4
   GLint v[2];
   v[0] = v0;
   v[1] = v1;
   uniform(location, 1, v, GL_INT_VEC2, "glUniform2iARB");
d491 1
a491 1
_mesa_Uniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
d493 16
a508 5
   GLint v[3];
   v[0] = v0;
   v[1] = v1;
   v[2] = v2;
   uniform(location, 1, v, GL_INT_VEC3, "glUniform3iARB");
d512 1
a512 1
_mesa_Uniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
d514 16
a529 6
   GLint v[4];
   v[0] = v0;
   v[1] = v1;
   v[2] = v2;
   v[3] = v3;
   uniform(location, 1, v, GL_INT_VEC4, "glUniform4iARB");
d533 1
a533 1
_mesa_Uniform1fvARB(GLint location, GLsizei count, const GLfloat * value)
d535 16
a550 1
   uniform(location, count, value, GL_FLOAT, "glUniform1fvARB");
d554 1
a554 1
_mesa_Uniform2fvARB(GLint location, GLsizei count, const GLfloat * value)
d556 16
a571 1
   uniform(location, count, value, GL_FLOAT_VEC2, "glUniform2fvARB");
d575 1
a575 1
_mesa_Uniform3fvARB(GLint location, GLsizei count, const GLfloat * value)
d577 16
a592 1
   uniform(location, count, value, GL_FLOAT_VEC3, "glUniform3fvARB");
d596 1
a596 1
_mesa_Uniform4fvARB(GLint location, GLsizei count, const GLfloat * value)
d598 16
a613 1
   uniform(location, count, value, GL_FLOAT_VEC4, "glUniform4fvARB");
d617 1
a617 1
_mesa_Uniform1ivARB(GLint location, GLsizei count, const GLint * value)
d619 8
a626 2
   uniform(location, count, value, GL_INT, "glUniform1ivARB");
}
d628 1
a628 5
GLvoid GLAPIENTRY
_mesa_Uniform2ivARB(GLint location, GLsizei count, const GLint * value)
{
   uniform(location, count, value, GL_INT_VEC2, "glUniform2ivARB");
}
d630 5
a634 4
GLvoid GLAPIENTRY
_mesa_Uniform3ivARB(GLint location, GLsizei count, const GLint * value)
{
   uniform(location, count, value, GL_INT_VEC3, "glUniform3ivARB");
d638 1
a638 1
_mesa_Uniform4ivARB(GLint location, GLsizei count, const GLint * value)
d640 2
a641 3
   uniform(location, count, value, GL_INT_VEC4, "glUniform4ivARB");
}

d643 5
a647 19
/**
 * Helper function used by UniformMatrix**vARB() functions below.
 */
static void
uniform_matrix(GLint cols, GLint rows, const char *caller,
               GLenum matrixType,
               GLint location, GLsizei count, GLboolean transpose,
               const GLfloat *values)
{
   const GLint matElements = rows * cols;
   GET_CURRENT_CONTEXT(ctx);
   GET_CURRENT_LINKED_PROGRAM(pro, caller);

   if (values == NULL) {
      _mesa_error(ctx, GL_INVALID_VALUE, caller);
      return;
   }

   FLUSH_VERTICES(ctx, _NEW_PROGRAM);
d649 1
a649 24
   if (transpose) {
      GLfloat *trans, *pt;
      const GLfloat *pv;
      GLint i, j, k;

      trans = (GLfloat *) _mesa_malloc(count * matElements * sizeof(GLfloat));
      if (!trans) {
         _mesa_error(ctx, GL_OUT_OF_MEMORY, caller);
         return;
      }

      pt = trans;
      pv = values;
      for (i = 0; i < count; i++) {
         /* transpose from pv matrix into pt matrix */
         for (j = 0; j < cols; j++) {
            for (k = 0; k < rows; k++) {
               /* XXX verify this */
               pt[j * rows + k] = pv[k * cols + j];
            }
         }
         pt += matElements;
         pv += matElements;
      }
d651 5
a655 8
      if (!(**pro).WriteUniform(pro, location, count, trans, matrixType))
         _mesa_error(ctx, GL_INVALID_OPERATION, caller);
      _mesa_free(trans);
   }
   else {
      if (!(**pro).WriteUniform(pro, location, count, values, matrixType))
         _mesa_error(ctx, GL_INVALID_OPERATION, caller);
   }
a657 1

d659 1
a659 2
_mesa_UniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose,
                          const GLfloat * value)
d661 10
a670 3
   uniform_matrix(2, 2, "glUniformMatrix2fvARB", GL_FLOAT_MAT2,
                  location, count, transpose, value);
}
d672 5
a676 6
GLvoid GLAPIENTRY
_mesa_UniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose,
                          const GLfloat * value)
{
   uniform_matrix(3, 3, "glUniformMatrix3fvARB", GL_FLOAT_MAT3,
                  location, count, transpose, value);
d680 1
a680 2
_mesa_UniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose,
                          const GLfloat * value)
d682 2
a683 3
   uniform_matrix(4, 4, "glUniformMatrix4fvARB", GL_FLOAT_MAT4,
                  location, count, transpose, value);
}
d685 5
a689 6
static GLboolean
_mesa_get_object_parameter(GLhandleARB obj, GLenum pname, GLvoid * params,
                           GLboolean * integral, GLint * size)
{
   GET_CURRENT_CONTEXT(ctx);
   GLint *ipar = (GLint *) params;
d691 1
a691 10
   /* set default values */
   *integral = GL_TRUE; /* indicates param type, TRUE: GLint, FALSE: GLfloat */
   *size = 1;           /* param array size */

   switch (pname) {
   case GL_OBJECT_TYPE_ARB:
   case GL_OBJECT_DELETE_STATUS_ARB:
   case GL_OBJECT_INFO_LOG_LENGTH_ARB:
      {
         GET_GENERIC(gen, obj, "glGetObjectParameterivARB");
d693 6
a698 2
         if (gen == NULL)
            return GL_FALSE;
d700 24
a723 11
         switch (pname) {
         case GL_OBJECT_TYPE_ARB:
            *ipar = (**gen).GetType(gen);
            break;
         case GL_OBJECT_DELETE_STATUS_ARB:
            *ipar = (**gen).GetDeleteStatus(gen);
            break;
         case GL_OBJECT_INFO_LOG_LENGTH_ARB:
            *ipar = (**gen).GetInfoLogLength(gen);
            break;
         }
d725 5
a729 40
         RELEASE_GENERIC(gen);
      }
      break;
   case GL_OBJECT_SUBTYPE_ARB:
   case GL_OBJECT_COMPILE_STATUS_ARB:
   case GL_OBJECT_SHADER_SOURCE_LENGTH_ARB:
      {
         GET_SHADER(sha, obj, "glGetObjectParameterivARB");

         if (sha == NULL)
            return GL_FALSE;

         switch (pname) {
         case GL_OBJECT_SUBTYPE_ARB:
            *ipar = (**sha).GetSubType(sha);
            break;
         case GL_OBJECT_COMPILE_STATUS_ARB:
            *ipar = (**sha).GetCompileStatus(sha);
            break;
         case GL_OBJECT_SHADER_SOURCE_LENGTH_ARB:
            {
               const GLcharARB *src = (**sha).GetSource(sha);
               if (src == NULL)
                  *ipar = 0;
               else
                  *ipar = _mesa_strlen(src) + 1;
            }
            break;
         }

         RELEASE_SHADER(sha);
      }
      break;
   case GL_OBJECT_LINK_STATUS_ARB:
   case GL_OBJECT_VALIDATE_STATUS_ARB:
   case GL_OBJECT_ATTACHED_OBJECTS_ARB:
   case GL_OBJECT_ACTIVE_UNIFORMS_ARB:
   case GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB:
      {
         GET_PROGRAM(pro, obj, "glGetObjectParameterivARB");
d731 5
a735 2
         if (pro == NULL)
            return GL_FALSE;
d737 1
a737 25
         switch (pname) {
         case GL_OBJECT_LINK_STATUS_ARB:
            *ipar = (**pro).GetLinkStatus(pro);
            break;
         case GL_OBJECT_VALIDATE_STATUS_ARB:
            *ipar = (**pro).GetValidateStatus(pro);
            break;
         case GL_OBJECT_ATTACHED_OBJECTS_ARB:
            *ipar =
               (**pro)._container.
               GetAttachedCount((struct gl2_container_intf **) (pro));
            break;
         case GL_OBJECT_ACTIVE_UNIFORMS_ARB:
            *ipar = (**pro).GetActiveUniformCount(pro);
            break;
         case GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB:
            *ipar = (**pro).GetActiveUniformMaxLength(pro);
            break;
         case GL_OBJECT_ACTIVE_ATTRIBUTES_ARB:
            *ipar = (**pro).GetActiveAttribCount(pro);
            break;
         case GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB:
            *ipar = (**pro).GetActiveAttribMaxLength(pro);
            break;
         }
d739 6
a744 7
         RELEASE_PROGRAM(pro);
      }
      break;
   default:
      _mesa_error(ctx, GL_INVALID_ENUM, "glGetObjectParameterivARB");
      return GL_FALSE;
   }
d746 28
a773 1
   return GL_TRUE;
d777 1
a777 1
_mesa_GetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat * params)
d779 8
a786 3
   GET_CURRENT_CONTEXT(ctx);
   GLboolean integral;
   GLint size;
d788 1
a788 4
   if (params == NULL) {
      _mesa_error(ctx, GL_INVALID_VALUE, "glGetObjectParameterfvARB");
      return;
   }
d790 6
a795 1
   assert(sizeof(GLfloat) == sizeof(GLint));
d797 20
a816 8
   if (_mesa_get_object_parameter(obj, pname, (GLvoid *) params,
                                  &integral, &size)) {
      if (integral) {
         GLint i;
         for (i = 0; i < size; i++)
            params[i] = (GLfloat) ((GLint *) params)[i];
      }
   }
d819 3
a821 2
GLvoid GLAPIENTRY
_mesa_GetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint * params)
d823 2
a824 8
   GET_CURRENT_CONTEXT(ctx);
   GLboolean integral;
   GLint size;

   if (params == NULL) {
      _mesa_error(ctx, GL_INVALID_VALUE, "glGetObjectParameterivARB");
      return;
   }
d826 27
a852 1
   assert(sizeof(GLfloat) == sizeof(GLint));
d854 130
a983 8
   if (_mesa_get_object_parameter(obj, pname, (GLvoid *) params,
                                  &integral, &size)) {
      if (!integral) {
         GLint i;
         for (i = 0; i < size; i++)
            params[i] = (GLint) ((GLfloat *) params)[i];
      }
   }
d996 2
a997 2
copy_string(const GLcharARB * src, GLsizei maxLength, GLsizei * length,
            GLcharARB * dst)
d999 7
a1005 7
   GLsizei len;
   for (len = 0; len < maxLength - 1 && src && src[len]; len++)
      dst[len] = src[len];
   if (maxLength > 0)
      dst[len] = 0;
   if (length)
      *length = len;
d1010 1
a1010 2
_mesa_GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length,
                    GLcharARB * infoLog)
d1012 2
a1013 2
   GET_CURRENT_CONTEXT(ctx);
   GET_GENERIC(gen, obj, "glGetInfoLogARB");
d1015 2
a1016 2
   if (gen == NULL)
      return;
d1018 2
a1019 2
   if (infoLog == NULL)
      _mesa_error(ctx, GL_INVALID_VALUE, "glGetInfoLogARB");
d1021 1
a1021 1
      GLsizei actualsize = (**gen).GetInfoLogLength(gen);
d1024 1
a1024 1
      (**gen).GetInfoLog(gen, actualsize, infoLog);
d1028 1
a1028 1
   RELEASE_GENERIC(gen);
d1032 2
a1033 2
_mesa_GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount,
                            GLsizei * count, GLhandleARB * obj)
d1035 26
a1060 24
   GET_CURRENT_CONTEXT(ctx);
   GET_CONTAINER(con, containerObj, "glGetAttachedObjectsARB");

   if (con == NULL)
      return;

   if (obj == NULL)
      _mesa_error(ctx, GL_INVALID_VALUE, "glGetAttachedObjectsARB");
   else {
      GLsizei cnt, i;

      cnt = (**con).GetAttachedCount(con);
      if (cnt > maxCount)
         cnt = maxCount;
      if (count != NULL)
         *count = cnt;

      for (i = 0; i < cnt; i++) {
         struct gl2_generic_intf **x = (**con).GetAttached(con, i);
         obj[i] = (**x).GetName(x);
         RELEASE_GENERIC(x);
      }
   }
   RELEASE_CONTAINER(con);
d1064 1
a1064 1
_mesa_GetUniformLocationARB(GLhandleARB programObj, const GLcharARB * name)
d1066 3
a1068 3
   GET_CURRENT_CONTEXT(ctx);
   GLint loc = -1;
   GET_LINKED_PROGRAM(pro, programObj, "glGetUniformLocationARB");
d1070 2
a1071 2
   if (!pro)
      return -1;
d1073 9
a1081 8
   if (name == NULL)
      _mesa_error(ctx, GL_INVALID_VALUE, "glGetUniformLocationARB");
   else {
      if (!IS_NAME_WITH_GL_PREFIX(name))
         loc = (**pro).GetUniformLocation(pro, name);
   }
   RELEASE_PROGRAM(pro);
   return loc;
d1085 2
a1086 3
_mesa_GetActiveUniformARB(GLhandleARB programObj, GLuint index,
                          GLsizei maxLength, GLsizei * length, GLint * size,
                          GLenum * type, GLcharARB * name)
d1088 2
a1089 2
   GET_CURRENT_CONTEXT(ctx);
   GET_PROGRAM(pro, programObj, "glGetActiveUniformARB");
d1091 2
a1092 2
   if (pro == NULL)
      return;
d1094 10
a1103 10
   if (size == NULL || type == NULL || name == NULL)
      _mesa_error(ctx, GL_INVALID_VALUE, "glGetActiveUniformARB");
   else {
      if (index < (**pro).GetActiveUniformCount(pro))
         (**pro).GetActiveUniform(pro, index, maxLength, length, size, type,
                                  name);
      else
         _mesa_error(ctx, GL_INVALID_VALUE, "glGetActiveUniformARB");
   }
   RELEASE_PROGRAM(pro);
d1107 1
a1107 1
_mesa_GetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat * params)
d1109 2
a1110 5
   GET_CURRENT_CONTEXT(ctx);
   GET_LINKED_PROGRAM(pro, programObj, "glGetUniformfvARB");

   if (!pro)
      return;
d1112 5
a1116 4
   if (!(**pro).ReadUniform(pro, location, 1, params, GL_FLOAT))
      _mesa_error(ctx, GL_INVALID_OPERATION, "glGetUniformfvARB");

   RELEASE_PROGRAM(pro);
d1120 1
a1120 1
_mesa_GetUniformivARB(GLhandleARB programObj, GLint location, GLint * params)
d1122 2
a1123 5
   GET_CURRENT_CONTEXT(ctx);
   GET_LINKED_PROGRAM(pro, programObj, "glGetUniformivARB");

   if (!pro)
      return;
d1125 5
a1129 3
   if (!(**pro).ReadUniform(pro, location, 1, params, GL_INT))
      _mesa_error(ctx, GL_INVALID_OPERATION, "glGetUniformivARB");
   RELEASE_PROGRAM(pro);
d1133 1
a1133 2
_mesa_GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length,
                         GLcharARB * source)
d1135 2
a1136 2
   GET_CURRENT_CONTEXT(ctx);
   GET_SHADER(sha, obj, "glGetShaderSourceARB");
d1138 2
a1139 2
   if (sha == NULL)
      return;
d1141 5
a1145 5
   if (source == NULL)
      _mesa_error(ctx, GL_INVALID_VALUE, "glGetShaderSourceARB");
   else
      copy_string((**sha).GetSource(sha), maxLength, length, source);
   RELEASE_SHADER(sha);
d1151 1
a1151 2
_mesa_BindAttribLocationARB(GLhandleARB programObj, GLuint index,
                            const GLcharARB * name)
d1153 2
a1154 2
   GET_CURRENT_CONTEXT(ctx);
   GET_PROGRAM(pro, programObj, "glBindAttribLocationARB");
d1156 2
a1157 2
   if (pro == NULL)
      return;
d1159 7
a1165 7
   if (name == NULL || index >= MAX_VERTEX_ATTRIBS)
      _mesa_error(ctx, GL_INVALID_VALUE, "glBindAttribLocationARB");
   else if (IS_NAME_WITH_GL_PREFIX(name))
      _mesa_error(ctx, GL_INVALID_OPERATION, "glBindAttribLocationARB");
   else
      (**pro).OverrideAttribBinding(pro, index, name);
   RELEASE_PROGRAM(pro);
d1169 2
a1170 3
_mesa_GetActiveAttribARB(GLhandleARB programObj, GLuint index,
                         GLsizei maxLength, GLsizei * length, GLint * size,
                         GLenum * type, GLcharARB * name)
d1172 2
a1173 2
   GET_CURRENT_CONTEXT(ctx);
   GET_PROGRAM(pro, programObj, "glGetActiveAttribARB");
d1175 2
a1176 2
   if (pro == NULL)
      return;
d1178 5
a1182 6
   if (name == NULL || index >= (**pro).GetActiveAttribCount(pro))
      _mesa_error(ctx, GL_INVALID_VALUE, "glGetActiveAttribARB");
   else
      (**pro).GetActiveAttrib(pro, index, maxLength, length, size, type,
                              name);
   RELEASE_PROGRAM(pro);
d1186 1
a1186 1
_mesa_GetAttribLocationARB(GLhandleARB programObj, const GLcharARB * name)
d1188 13
a1200 13
   GET_CURRENT_CONTEXT(ctx);
   GLint loc = -1;
   GET_LINKED_PROGRAM(pro, programObj, "glGetAttribLocationARB");

   if (!pro)
      return -1;

   if (name == NULL)
      _mesa_error(ctx, GL_INVALID_VALUE, "glGetAttribLocationARB");
   else if (!IS_NAME_WITH_GL_PREFIX(name))
      loc = (**pro).GetAttribLocation(pro, name);
   RELEASE_PROGRAM(pro);
   return loc;
a1202 226

/**
 ** OpenGL 2.0 functions which basically wrap the ARB_shader functions
 **/

void GLAPIENTRY
_mesa_AttachShader(GLuint program, GLuint shader)
{
   _mesa_AttachObjectARB(program, shader);
}


GLuint GLAPIENTRY
_mesa_CreateShader(GLenum type)
{
   return (GLuint) _mesa_CreateShaderObjectARB(type);
}

GLuint GLAPIENTRY
_mesa_CreateProgram(void)
{
   return (GLuint) _mesa_CreateProgramObjectARB();
}

void GLAPIENTRY
_mesa_DeleteProgram(GLuint program)
{
   _mesa_DeleteObjectARB(program);
}


void GLAPIENTRY
_mesa_DeleteShader(GLuint shader)
{
   _mesa_DeleteObjectARB(shader);
}

void GLAPIENTRY
_mesa_DetachShader(GLuint program, GLuint shader)
{
   _mesa_DetachObjectARB(program, shader);
}

void GLAPIENTRY
_mesa_GetAttachedShaders(GLuint program, GLsizei maxCount,
                         GLsizei *count, GLuint *obj)
{
   _mesa_GetAttachedObjectsARB(program, maxCount, count, obj);
}

void GLAPIENTRY
_mesa_GetProgramiv(GLuint program, GLenum pname, GLint *params)
{
   GET_CURRENT_CONTEXT(ctx);
   GET_PROGRAM(pro, program, "glGetProgramiv");

   if (!pro)
      return;

   switch (pname) {
   case GL_DELETE_STATUS:
      *params = (**pro)._container._generic.GetDeleteStatus((struct gl2_generic_intf **) pro);
      break; 
   case GL_LINK_STATUS:
      *params = (**pro).GetLinkStatus(pro);
      break;
   case GL_VALIDATE_STATUS:
      *params = (**pro).GetValidateStatus(pro);
      break;
   case GL_INFO_LOG_LENGTH:
      *params = (**pro)._container._generic.GetInfoLogLength( (struct gl2_generic_intf **) pro );
      break;
   case GL_ATTACHED_SHADERS:
      *params = (**pro)._container.GetAttachedCount( (struct gl2_container_intf **) pro );
      break;
   case GL_ACTIVE_ATTRIBUTES:
      *params = (**pro).GetActiveAttribCount(pro);
      break;
   case GL_ACTIVE_ATTRIBUTE_MAX_LENGTH:
      *params = (**pro).GetActiveAttribMaxLength(pro);
      break;
   case GL_ACTIVE_UNIFORMS:
      *params = (**pro).GetActiveUniformCount(pro);
      break;
   case GL_ACTIVE_UNIFORM_MAX_LENGTH:
      *params = (**pro).GetActiveUniformMaxLength(pro);
      break;
   default:
      _mesa_error(ctx, GL_INVALID_ENUM, "glGetProgramiv(pname)");
      return;
   }
}

void GLAPIENTRY
_mesa_GetProgramInfoLog(GLuint program, GLsizei bufSize,
                        GLsizei *length, GLchar *infoLog)
{
   _mesa_GetInfoLogARB(program, bufSize, length, infoLog);
}

void GLAPIENTRY
_mesa_GetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
   GET_CURRENT_CONTEXT(ctx);
   GET_SHADER(sh, shader, "glGetShaderiv");

   if (!sh)
      return;

   switch (pname) {
   case GL_SHADER_TYPE:
      *params = (**sh).GetSubType(sh);
      break;
   case GL_DELETE_STATUS:
      *params = (**sh)._generic.GetDeleteStatus((struct gl2_generic_intf **) sh);
      break;
   case GL_COMPILE_STATUS:
      *params = (**sh).GetCompileStatus(sh);
      break;
   case GL_INFO_LOG_LENGTH:
      *params = (**sh)._generic.GetInfoLogLength((struct gl2_generic_intf **)sh);
      break;
   case GL_SHADER_SOURCE_LENGTH:
      {
         const GLchar *src = (**sh).GetSource(sh);
         *params = src ? (_mesa_strlen(src) + 1) : 0;
      }
      break;
   default:
      _mesa_error(ctx, GL_INVALID_ENUM, "glGetShaderiv(pname)");
      return;
   }
}

void GLAPIENTRY
_mesa_GetShaderInfoLog(GLuint shader, GLsizei bufSize,
                       GLsizei *length, GLchar *infoLog)
{
   _mesa_GetInfoLogARB(shader, bufSize, length, infoLog);
}

GLboolean GLAPIENTRY
_mesa_IsProgram(GLuint program)
{
   GET_CURRENT_CONTEXT(ctx);
   GET_PROGRAM(pro, program, "glIsProgram");
   if (pro) {
      RELEASE_PROGRAM(pro);
      return GL_TRUE;
   }
   else {
      return GL_FALSE;
   }
}

GLboolean GLAPIENTRY
_mesa_IsShader(GLuint shader)
{
   GET_CURRENT_CONTEXT(ctx);
   GET_SHADER(sh, shader, "glIsProgram");
   if (sh) {
      RELEASE_SHADER(sh);
      return GL_TRUE;
   }
   else {
      return GL_FALSE;
   }
}


/**
 ** 2.1 functions
 **/

void GLAPIENTRY
_mesa_UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose,
                         const GLfloat *value)
{
   uniform_matrix(2, 3, "glUniformMatrix2x3fv", GL_FLOAT_MAT2x3,
                  location, count, transpose, value);
}

void GLAPIENTRY
_mesa_UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose,
                         const GLfloat *value)
{
   uniform_matrix(3, 2, "glUniformMatrix3x2fv", GL_FLOAT_MAT3x2,
                  location, count, transpose, value);
}

void GLAPIENTRY
_mesa_UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose,
                         const GLfloat *value)
{
   uniform_matrix(2, 4, "glUniformMatrix2x4fv", GL_FLOAT_MAT2x4,
                  location, count, transpose, value);
}

void GLAPIENTRY
_mesa_UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose,
                         const GLfloat *value)
{
   uniform_matrix(4, 2, "glUniformMatrix4x2fv", GL_FLOAT_MAT4x2,
                  location, count, transpose, value);
}

void GLAPIENTRY
_mesa_UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose,
                         const GLfloat *value)
{
   uniform_matrix(3, 4, "glUniformMatrix3x4fv", GL_FLOAT_MAT3x4,
                  location, count, transpose, value);
}

void GLAPIENTRY
_mesa_UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose,
                         const GLfloat *value)
{
   uniform_matrix(4, 3, "glUniformMatrix4x3fv", GL_FLOAT_MAT4x3,
                  location, count, transpose, value);
}





d1206 1
a1206 1
_mesa_init_shaderobjects(GLcontext * ctx)
d1208 3
a1210 3
   ctx->ShaderObjects.CurrentProgram = NULL;
   ctx->ShaderObjects._FragmentShaderPresent = GL_FALSE;
   ctx->ShaderObjects._VertexShaderPresent = GL_FALSE;
d1212 1
a1212 1
   _mesa_init_shaderobjects_3dlabs(ctx);
d1214 1
@

