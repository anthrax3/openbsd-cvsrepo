head	1.12;
access;
symbols
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	v10_2_9:1.1.1.8
	v10_4_3:1.1.1.7
	v10_2_7:1.1.1.6
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	v10_2_3:1.1.1.6
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.5
	v9_2_3:1.1.1.5
	v9_2_2:1.1.1.5
	v9_2_1:1.1.1.5
	v9_2_0:1.1.1.5
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.12.23.05.17.52;	author jsg;	state dead;
branches;
next	1.11;
commitid	TnlogFl9nOv2eaRf;

1.11
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.10;
commitid	4ry2gvZGMXkCUD2n;

1.10
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.9;
commitid	mcxB0JvoI9gTDYXU;

1.9
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.8;
commitid	WPD6rgPryPkvXOr9;

1.8
date	2013.09.05.14.06.23;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.17.13.58.19;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.31;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.41;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.21;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.50.10;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.50.10;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.37;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.31.12;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.46;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.09.05.13.16.41;	author jsg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.07.09.20.35.02;	author jsg;	state Exp;
branches;
next	1.1.1.7;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.7
date	2015.01.25.14.12.44;	author jsg;	state Exp;
branches;
next	1.1.1.8;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.8
date	2015.02.20.22.49.51;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.12
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * \file imports.h
 * Standard C library function wrappers.
 *
 * This file provides wrappers for all the standard C library functions
 * like malloc(), free(), printf(), getenv(), etc.
 */


#ifndef IMPORTS_H
#define IMPORTS_H


#include "compiler.h"
#include "glheader.h"
#include "errors.h"

#ifdef __cplusplus
extern "C" {
#endif


/**********************************************************************/
/** Memory macros */
/*@@{*/

/** Allocate a structure of type \p T */
#define MALLOC_STRUCT(T)   (struct T *) malloc(sizeof(struct T))
/** Allocate and zero a structure of type \p T */
#define CALLOC_STRUCT(T)   (struct T *) calloc(1, sizeof(struct T))

/*@@}*/


/*
 * For GL_ARB_vertex_buffer_object we need to treat vertex array pointers
 * as offsets into buffer stores.  Since the vertex array pointer and
 * buffer store pointer are both pointers and we need to add them, we use
 * this macro.
 * Both pointers/offsets are expressed in bytes.
 */
#define ADD_POINTERS(A, B)  ( (GLubyte *) (A) + (uintptr_t) (B) )


/**
 * Sometimes we treat GLfloats as GLints.  On x86 systems, moving a float
 * as a int (thereby using integer registers instead of FP registers) is
 * a performance win.  Typically, this can be done with ordinary casts.
 * But with gcc's -fstrict-aliasing flag (which defaults to on in gcc 3.0)
 * these casts generate warnings.
 * The following union typedef is used to solve that.
 */
typedef union { GLfloat f; GLint i; GLuint u; } fi_type;



/**********************************************************************
 * Math macros
 */

#define MAX_GLUSHORT	0xffff
#define MAX_GLUINT	0xffffffff

/* Degrees to radians conversion: */
#define DEG2RAD (M_PI/180.0)


/**
 * \name Work-arounds for platforms that lack C99 math functions
 */
/*@@{*/
#if (!defined(_XOPEN_SOURCE) || (_XOPEN_SOURCE < 600)) && !defined(_ISOC99_SOURCE) \
   && (!defined(__STDC_VERSION__) || (__STDC_VERSION__ < 199901L)) \
   && (!defined(_MSC_VER) || (_MSC_VER < 1400))
#define acosf(f) ((float) acos(f))
#define asinf(f) ((float) asin(f))
#define atan2f(x,y) ((float) atan2(x,y))
#define atanf(f) ((float) atan(f))
#define ceilf(f) ((float) ceil(f))
#define cosf(f) ((float) cos(f))
#define coshf(f) ((float) cosh(f))
#define expf(f) ((float) exp(f))
#define exp2f(f) ((float) exp2(f))
#define floorf(f) ((float) floor(f))
#define logf(f) ((float) log(f))

#ifdef ANDROID
#define log2f(f) (logf(f) * (float) (1.0 / M_LN2))
#else
#define log2f(f) ((float) log2(f))
#endif

#define powf(x,y) ((float) pow(x,y))
#define sinf(f) ((float) sin(f))
#define sinhf(f) ((float) sinh(f))
#define sqrtf(f) ((float) sqrt(f))
#define tanf(f) ((float) tan(f))
#define tanhf(f) ((float) tanh(f))
#define acoshf(f) ((float) acosh(f))
#define asinhf(f) ((float) asinh(f))
#define atanhf(f) ((float) atanh(f))
#endif

#if defined(_MSC_VER)
#if _MSC_VER < 1800  /* Not req'd on VS2013 and above */
static inline float truncf(float x) { return x < 0.0f ? ceilf(x) : floorf(x); }
static inline float exp2f(float x) { return powf(2.0f, x); }
static inline float log2f(float x) { return logf(x) * 1.442695041f; }
static inline float asinhf(float x) { return logf(x + sqrtf(x * x + 1.0f)); }
static inline float acoshf(float x) { return logf(x + sqrtf(x * x - 1.0f)); }
static inline float atanhf(float x) { return (logf(1.0f + x) - logf(1.0f - x)) / 2.0f; }
static inline int isblank(int ch) { return ch == ' ' || ch == '\t'; }
#define strtoll(p, e, b) _strtoi64(p, e, b)
#endif /* _MSC_VER < 1800 */
#define strcasecmp(s1, s2) _stricmp(s1, s2)
#endif
/*@@}*/


/*
 * signbit() is a macro on Linux.  Not available on Windows.
 */
#ifndef signbit
#define signbit(x) ((x) < 0.0f)
#endif


/** single-precision inverse square root */
static inline float
INV_SQRTF(float x)
{
   /* XXX we could try Quake's fast inverse square root function here */
   return 1.0F / sqrtf(x);
}


/***
 *** LOG2: Log base 2 of float
 ***/
static inline GLfloat LOG2(GLfloat x)
{
#ifdef USE_IEEE
#if 0
   /* This is pretty fast, but not accurate enough (only 2 fractional bits).
    * Based on code from http://www.stereopsis.com/log2.html
    */
   const GLfloat y = x * x * x * x;
   const GLuint ix = *((GLuint *) &y);
   const GLuint exp = (ix >> 23) & 0xFF;
   const GLint log2 = ((GLint) exp) - 127;
   return (GLfloat) log2 * (1.0 / 4.0);  /* 4, because of x^4 above */
#endif
   /* Pretty fast, and accurate.
    * Based on code from http://www.flipcode.com/totd/
    */
   fi_type num;
   GLint log_2;
   num.f = x;
   log_2 = ((num.i >> 23) & 255) - 128;
   num.i &= ~(255 << 23);
   num.i += 127 << 23;
   num.f = ((-1.0f/3) * num.f + 2) * num.f - 2.0f/3;
   return num.f + log_2;
#else
   /*
    * NOTE: log_base_2(x) = log(x) / log(2)
    * NOTE: 1.442695 = 1/log(2).
    */
   return (GLfloat) (log(x) * 1.442695F);
#endif
}



/***
 *** IS_INF_OR_NAN: test if float is infinite or NaN
 ***/
#ifdef USE_IEEE
static inline int IS_INF_OR_NAN( float x )
{
   fi_type tmp;
   tmp.f = x;
   return !(int)((unsigned int)((tmp.i & 0x7fffffff)-0x7f800000) >> 31);
}
#elif defined(isfinite)
#define IS_INF_OR_NAN(x)        (!isfinite(x))
#elif defined(finite)
#define IS_INF_OR_NAN(x)        (!finite(x))
#elif defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#define IS_INF_OR_NAN(x)        (!isfinite(x))
#else
#define IS_INF_OR_NAN(x)        (!finite(x))
#endif


/***
 *** CEILF: ceiling of float
 *** FLOORF: floor of float
 *** FABSF: absolute value of float
 *** LOGF: the natural logarithm (base e) of the value
 *** EXPF: raise e to the value
 *** LDEXPF: multiply value by an integral power of two
 *** FREXPF: extract mantissa and exponent from value
 ***/
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
/* C99 functions */
#define CEILF(x)   ceilf(x)
#define FLOORF(x)  floorf(x)
#define FABSF(x)   fabsf(x)
#define LOGF(x)    logf(x)
#define EXPF(x)    expf(x)
#define LDEXPF(x,y)  ldexpf(x,y)
#define FREXPF(x,y)  frexpf(x,y)
#else
#define CEILF(x)   ((GLfloat) ceil(x))
#define FLOORF(x)  ((GLfloat) floor(x))
#define FABSF(x)   ((GLfloat) fabs(x))
#define LOGF(x)    ((GLfloat) log(x))
#define EXPF(x)    ((GLfloat) exp(x))
#define LDEXPF(x,y)  ((GLfloat) ldexp(x,y))
#define FREXPF(x,y)  ((GLfloat) frexp(x,y))
#endif


/**
 * Convert float to int by rounding to nearest integer, away from zero.
 */
static inline int IROUND(float f)
{
   return (int) ((f >= 0.0F) ? (f + 0.5F) : (f - 0.5F));
}


/**
 * Convert float to int64 by rounding to nearest integer.
 */
static inline GLint64 IROUND64(float f)
{
   return (GLint64) ((f >= 0.0F) ? (f + 0.5F) : (f - 0.5F));
}


/**
 * Convert positive float to int by rounding to nearest integer.
 */
static inline int IROUND_POS(float f)
{
   assert(f >= 0.0F);
   return (int) (f + 0.5F);
}


/**
 * Convert float to int using a fast method.  The rounding mode may vary.
 * XXX We could use an x86-64/SSE2 version here.
 */
static inline int F_TO_I(float f)
{
#if defined(USE_X86_ASM) && defined(__GNUC__) && defined(__i386__)
   int r;
   __asm__ ("fistpl %0" : "=m" (r) : "t" (f) : "st");
   return r;
#elif defined(USE_X86_ASM) && defined(_MSC_VER)
   int r;
   _asm {
	 fld f
	 fistp r
	}
   return r;
#else
   return IROUND(f);
#endif
}


/** Return (as an integer) floor of float */
static inline int IFLOOR(float f)
{
#if defined(USE_X86_ASM) && defined(__GNUC__) && defined(__i386__)
   /*
    * IEEE floor for computers that round to nearest or even.
    * 'f' must be between -4194304 and 4194303.
    * This floor operation is done by "(iround(f + .5) + iround(f - .5)) >> 1",
    * but uses some IEEE specific tricks for better speed.
    * Contributed by Josh Vanderhoof
    */
   int ai, bi;
   double af, bf;
   af = (3 << 22) + 0.5 + (double)f;
   bf = (3 << 22) + 0.5 - (double)f;
   /* GCC generates an extra fstp/fld without this. */
   __asm__ ("fstps %0" : "=m" (ai) : "t" (af) : "st");
   __asm__ ("fstps %0" : "=m" (bi) : "t" (bf) : "st");
   return (ai - bi) >> 1;
#elif defined(USE_IEEE)
   int ai, bi;
   double af, bf;
   fi_type u;
   af = (3 << 22) + 0.5 + (double)f;
   bf = (3 << 22) + 0.5 - (double)f;
   u.f = (float) af;  ai = u.i;
   u.f = (float) bf;  bi = u.i;
   return (ai - bi) >> 1;
#else
   int i = IROUND(f);
   return (i > f) ? i - 1 : i;
#endif
}


/** Return (as an integer) ceiling of float */
static inline int ICEIL(float f)
{
#if defined(USE_X86_ASM) && defined(__GNUC__) && defined(__i386__)
   /*
    * IEEE ceil for computers that round to nearest or even.
    * 'f' must be between -4194304 and 4194303.
    * This ceil operation is done by "(iround(f + .5) + iround(f - .5) + 1) >> 1",
    * but uses some IEEE specific tricks for better speed.
    * Contributed by Josh Vanderhoof
    */
   int ai, bi;
   double af, bf;
   af = (3 << 22) + 0.5 + (double)f;
   bf = (3 << 22) + 0.5 - (double)f;
   /* GCC generates an extra fstp/fld without this. */
   __asm__ ("fstps %0" : "=m" (ai) : "t" (af) : "st");
   __asm__ ("fstps %0" : "=m" (bi) : "t" (bf) : "st");
   return (ai - bi + 1) >> 1;
#elif defined(USE_IEEE)
   int ai, bi;
   double af, bf;
   fi_type u;
   af = (3 << 22) + 0.5 + (double)f;
   bf = (3 << 22) + 0.5 - (double)f;
   u.f = (float) af; ai = u.i;
   u.f = (float) bf; bi = u.i;
   return (ai - bi + 1) >> 1;
#else
   int i = IROUND(f);
   return (i < f) ? i + 1 : i;
#endif
}


/**
 * Is x a power of two?
 */
static inline int
_mesa_is_pow_two(int x)
{
   return !(x & (x - 1));
}

/**
 * Round given integer to next higer power of two
 * If X is zero result is undefined.
 *
 * Source for the fallback implementation is
 * Sean Eron Anderson's webpage "Bit Twiddling Hacks"
 * http://graphics.stanford.edu/~seander/bithacks.html
 *
 * When using builtin function have to do some work
 * for case when passed values 1 to prevent hiting
 * undefined result from __builtin_clz. Undefined
 * results would be different depending on optimization
 * level used for build.
 */
static inline int32_t
_mesa_next_pow_two_32(uint32_t x)
{
#if defined(__GNUC__) && \
	((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
	uint32_t y = (x != 1);
	return (1 + y) << ((__builtin_clz(x - y) ^ 31) );
#else
	x--;
	x |= x >> 1;
	x |= x >> 2;
	x |= x >> 4;
	x |= x >> 8;
	x |= x >> 16;
	x++;
	return x;
#endif
}

static inline int64_t
_mesa_next_pow_two_64(uint64_t x)
{
#if defined(__GNUC__) && \
	((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
	uint64_t y = (x != 1);
	if (sizeof(x) == sizeof(long))
		return (1 + y) << ((__builtin_clzl(x - y) ^ 63));
	else
		return (1 + y) << ((__builtin_clzll(x - y) ^ 63));
#else
	x--;
	x |= x >> 1;
	x |= x >> 2;
	x |= x >> 4;
	x |= x >> 8;
	x |= x >> 16;
	x |= x >> 32;
	x++;
	return x;
#endif
}


/*
 * Returns the floor form of binary logarithm for a 32-bit integer.
 */
static inline GLuint
_mesa_logbase2(GLuint n)
{
#if defined(__GNUC__) && \
   ((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
   return (31 - __builtin_clz(n | 1));
#else
   GLuint pos = 0;
   if (n >= 1<<16) { n >>= 16; pos += 16; }
   if (n >= 1<< 8) { n >>=  8; pos +=  8; }
   if (n >= 1<< 4) { n >>=  4; pos +=  4; }
   if (n >= 1<< 2) { n >>=  2; pos +=  2; }
   if (n >= 1<< 1) {           pos +=  1; }
   return pos;
#endif
}


/**
 * Return 1 if this is a little endian machine, 0 if big endian.
 */
static inline GLboolean
_mesa_little_endian(void)
{
   const GLuint ui = 1; /* intentionally not static */
   return *((const GLubyte *) &ui);
}



/**********************************************************************
 * Functions
 */

extern void *
_mesa_align_malloc( size_t bytes, unsigned long alignment );

extern void *
_mesa_align_calloc( size_t bytes, unsigned long alignment );

extern void
_mesa_align_free( void *ptr );

extern void *
_mesa_align_realloc(void *oldBuffer, size_t oldSize, size_t newSize,
                    unsigned long alignment);

extern void *
_mesa_exec_malloc( GLuint size );

extern void 
_mesa_exec_free( void *addr );

extern void *
_mesa_realloc( void *oldBuffer, size_t oldSize, size_t newSize );


#ifndef FFS_DEFINED
#define FFS_DEFINED 1
#ifdef __GNUC__
#define ffs __builtin_ffs
#define ffsll __builtin_ffsll
#else
extern int ffs(int i);
extern int ffsll(long long int i);
#endif /*__ GNUC__ */
#endif /* FFS_DEFINED */


#if defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
#define _mesa_bitcount(i) __builtin_popcount(i)
#define _mesa_bitcount_64(i) __builtin_popcountll(i)
#else
extern unsigned int
_mesa_bitcount(unsigned int n);
extern unsigned int
_mesa_bitcount_64(uint64_t n);
#endif

/**
 * Find the last (most significant) bit set in a word.
 *
 * Essentially ffs() in the reverse direction.
 */
static inline unsigned int
_mesa_fls(unsigned int n)
{
#if defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 304)
   return n == 0 ? 0 : 32 - __builtin_clz(n);
#else
   unsigned int v = 1;

   if (n == 0)
      return 0;

   while (n >>= 1)
       v++;

   return v;
#endif
}

extern int
_mesa_round_to_even(float val);

extern GLhalfARB
_mesa_float_to_half(float f);

extern float
_mesa_half_to_float(GLhalfARB h);


extern void *
_mesa_bsearch( const void *key, const void *base, size_t nmemb, size_t size, 
               int (*compar)(const void *, const void *) );

extern char *
_mesa_getenv( const char *var );

extern char *
_mesa_strdup( const char *s );

extern float
_mesa_strtof( const char *s, char **end );

extern unsigned int
_mesa_str_checksum(const char *str);

extern int
_mesa_snprintf( char *str, size_t size, const char *fmt, ... ) PRINTFLIKE(3, 4);

extern int
_mesa_vsnprintf(char *str, size_t size, const char *fmt, va_list arg);


#if defined(_MSC_VER) && !defined(snprintf)
#define snprintf _snprintf
#endif


#ifdef __cplusplus
}
#endif


#endif /* IMPORTS_H */
@


1.11
log
@Merge Mesa 10.2.9
@
text
@@


1.10
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d167 1
d189 7
d203 8
a210 1
#if defined(isfinite)
a276 3
#ifdef __x86_64__
#  include <xmmintrin.h>
#endif
d280 1
a294 2
#elif defined(__x86_64__)
   return _mm_cvt_ss2si(_mm_load_ss(&f));
d320 1
a320 1
#else
d329 3
d355 1
a355 1
#else
d364 3
d397 2
a398 1
#ifdef HAVE___BUILTIN_CLZ
d416 2
a417 1
#ifdef HAVE___BUILTIN_CLZLL
d419 4
a422 2
	STATIC_ASSERT(sizeof(x) == sizeof(long long));
	return (1 + y) << ((__builtin_clzll(x - y) ^ 63));
d443 2
a444 1
#ifdef HAVE___BUILTIN_CLZ
d493 3
d499 1
a499 1
#ifdef HAVE___BUILTIN_FFS
d501 1
a503 5
#endif

#ifdef HAVE___BUILTIN_FFSLL
#define ffsll __builtin_ffsll
#else
d505 1
a505 1
#endif
d509 1
a509 1
#ifdef HAVE___BUILTIN_POPCOUNT
d511 1
a514 5
#endif

#ifdef HAVE___BUILTIN_POPCOUNTLL
#define _mesa_bitcount_64(i) __builtin_popcountll(i)
#else
d527 1
a527 1
#ifdef HAVE___BUILTIN_CLZ
d551 7
a557 5
static inline bool
_mesa_half_is_negative(GLhalfARB h)
{
   return h & 0x8000;
}
d561 3
@


1.9
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@a166 1
#ifdef USE_IEEE
a187 7
#else
   /*
    * NOTE: log_base_2(x) = log(x) / log(2)
    * NOTE: 1.442695 = 1/log(2).
    */
   return (GLfloat) (log(x) * 1.442695F);
#endif
d195 1
a195 8
#ifdef USE_IEEE
static inline int IS_INF_OR_NAN( float x )
{
   fi_type tmp;
   tmp.f = x;
   return !(int)((unsigned int)((tmp.i & 0x7fffffff)-0x7f800000) >> 31);
}
#elif defined(isfinite)
d262 3
a267 1
 * XXX We could use an x86-64/SSE2 version here.
d282 2
d309 1
a309 1
#elif defined(USE_IEEE)
a317 3
#else
   int i = IROUND(f);
   return (i > f) ? i - 1 : i;
d341 1
a341 1
#elif defined(USE_IEEE)
a349 3
#else
   int i = IROUND(f);
   return (i < f) ? i + 1 : i;
d380 1
a380 2
#if defined(__GNUC__) && \
	((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
d398 1
a398 2
#if defined(__GNUC__) && \
	((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
d400 2
a401 4
	if (sizeof(x) == sizeof(long))
		return (1 + y) << ((__builtin_clzl(x - y) ^ 63));
	else
		return (1 + y) << ((__builtin_clzll(x - y) ^ 63));
d422 1
a422 2
#if defined(__GNUC__) && \
   ((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
a470 3
extern void *
_mesa_realloc( void *oldBuffer, size_t oldSize, size_t newSize );

d474 1
a474 1
#ifdef __GNUC__
d476 5
a482 1
extern int ffs(int i);
d484 1
a484 1
#endif /*__ GNUC__ */
d488 1
a488 1
#if defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
a489 1
#define _mesa_bitcount_64(i) __builtin_popcountll(i)
d493 5
d510 1
a510 1
#if defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 304)
d534 5
a538 7

extern void *
_mesa_bsearch( const void *key, const void *base, size_t nmemb, size_t size, 
               int (*compar)(const void *, const void *) );

extern char *
_mesa_getenv( const char *var );
a541 3

extern float
_mesa_strtof( const char *s, char **end );
@


1.8
log
@Merge Mesa 9.2.0
@
text
@a51 4
/** Allocate \p BYTES bytes */
#define MALLOC(BYTES)      malloc(BYTES)
/** Allocate and zero \p BYTES bytes */
#define CALLOC(BYTES)      calloc(1, BYTES)
a55 2
/** Free memory */
#define FREE(PTR)          free(PTR)
d130 1
d139 2
@


1.7
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.5
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d41 1
a41 1

d84 1
a84 1
typedef union { GLfloat f; GLint i; } fi_type;
a98 20
/***
 *** SQRTF: single-precision square root
 ***/
#if 0 /* _mesa_sqrtf() not accurate enough - temporarily disabled */
#  define SQRTF(X)  _mesa_sqrtf(X)
#else
#  define SQRTF(X)  (float) sqrt((float) (X))
#endif


/***
 *** INV_SQRTF: single-precision inverse square root
 ***/
#if 0
#define INV_SQRTF(X) _mesa_inv_sqrt(X)
#else
#define INV_SQRTF(X) (1.0F / SQRTF(X))  /* this is faster on a P4 */
#endif


d110 1
a110 1
#define cielf(f) ((float) ciel(f))
d117 4
d122 2
d136 7
a142 7
static INLINE float truncf(float x) { return x < 0.0f ? ceilf(x) : floorf(x); }
static INLINE float exp2f(float x) { return powf(2.0f, x); }
static INLINE float log2f(float x) { return logf(x) * 1.442695041f; }
static INLINE float asinhf(float x) { return logf(x + sqrtf(x * x + 1.0f)); }
static INLINE float acoshf(float x) { return logf(x + sqrtf(x * x - 1.0f)); }
static INLINE float atanhf(float x) { return (logf(1.0f + x) - logf(1.0f - x)) / 2.0f; }
static INLINE int isblank(int ch) { return ch == ' ' || ch == '\t'; }
d147 18
d168 2
d172 3
a174 5
/* This is pretty fast, but not accurate enough (only 2 fractional bits).
 * Based on code from http://www.stereopsis.com/log2.html
 */
static INLINE GLfloat LOG2(GLfloat x)
{
a179 1
}
d181 3
a183 5
/* Pretty fast, and accurate.
 * Based on code from http://www.flipcode.com/totd/
 */
static INLINE GLfloat LOG2(GLfloat val)
{
d186 1
a186 1
   num.f = val;
a191 1
}
d193 5
a197 5
/*
 * NOTE: log_base_2(x) = log(x) / log(2)
 * NOTE: 1.442695 = 1/log(2).
 */
#define LOG2(x)  ((GLfloat) (log(x) * 1.442695F))
d199 2
d207 1
a207 1
static INLINE int IS_INF_OR_NAN( float x )
a216 2
#elif defined(__VMS)
#define IS_INF_OR_NAN(x)        (!finite(x))
a224 29
 *** IS_NEGATIVE: test if float is negative
 ***/
#if defined(USE_IEEE)
static INLINE int GET_FLOAT_BITS( float x )
{
   fi_type fi;
   fi.f = x;
   return fi.i;
}
#define IS_NEGATIVE(x) (GET_FLOAT_BITS(x) < 0)
#else
#define IS_NEGATIVE(x) (x < 0.0F)
#endif


/***
 *** DIFFERENT_SIGNS: test if two floats have opposite signs
 ***/
#if defined(USE_IEEE)
#define DIFFERENT_SIGNS(x,y) ((GET_FLOAT_BITS(x) ^ GET_FLOAT_BITS(y)) & (1<<31))
#else
/* Could just use (x*y<0) except for the flatshading requirements.
 * Maybe there's a better way?
 */
#define DIFFERENT_SIGNS(x,y) ((x) * (y) <= 0.0F && (x) - (y) != 0.0F)
#endif


/***
d233 1
a233 1
#if defined(__gnu_linux__)
d253 34
a286 3
/***
 *** IROUND: return (as an integer) float rounded to nearest integer
 ***/
a287 2
static INLINE int iround(float f)
{
a290 2
}
#define IROUND(x)  iround(x)
a291 2
static INLINE int iround(float f)
{
a297 12
}
#define IROUND(x)  iround(x)
#elif defined(__WATCOMC__) && defined(__386__)
long iround(float f);
#pragma aux iround =                    \
	"push   eax"                        \
	"fistp  dword ptr [esp]"            \
	"pop    eax"                        \
	parm [8087]                         \
	value [eax]                         \
	modify exact [eax];
#define IROUND(x)  iround(x)
d299 1
a299 1
#define IROUND(f)  ((int) (((f) >= 0.0F) ? ((f) + 0.5F) : ((f) - 0.5F)))
d301 1
a302 1
#define IROUND64(f)  ((GLint64) (((f) >= 0.0F) ? ((f) + 0.5F) : ((f) - 0.5F)))
d304 3
a306 13
/***
 *** IROUND_POS: return (as an integer) positive float rounded to nearest int
 ***/
#ifdef DEBUG
#define IROUND_POS(f) (assert((f) >= 0.0F), IROUND(f))
#else
#define IROUND_POS(f) (IROUND(f))
#endif


/***
 *** IFLOOR: return (as an integer) floor of float
 ***/
d308 7
a314 9
/*
 * IEEE floor for computers that round to nearest or even.
 * 'f' must be between -4194304 and 4194303.
 * This floor operation is done by "(iround(f + .5) + iround(f - .5)) >> 1",
 * but uses some IEEE specific tricks for better speed.
 * Contributed by Josh Vanderhoof
 */
static INLINE int ifloor(float f)
{
a322 2
}
#define IFLOOR(x)  ifloor(x)
a323 2
static INLINE int ifloor(float f)
{
a326 1

a331 2
}
#define IFLOOR(x)  ifloor(x)
a332 2
static INLINE int ifloor(float f)
{
d335 1
a336 2
#define IFLOOR(x)  ifloor(x)
#endif
d339 3
a341 3
/***
 *** ICEIL: return (as an integer) ceiling of float
 ***/
d343 7
a349 9
/*
 * IEEE ceil for computers that round to nearest or even.
 * 'f' must be between -4194304 and 4194303.
 * This ceil operation is done by "(iround(f + .5) + iround(f - .5) + 1) >> 1",
 * but uses some IEEE specific tricks for better speed.
 * Contributed by Josh Vanderhoof
 */
static INLINE int iceil(float f)
{
a357 2
}
#define ICEIL(x)  iceil(x)
a358 2
static INLINE int iceil(float f)
{
a366 2
}
#define ICEIL(x)  iceil(x)
a367 2
static INLINE int iceil(float f)
{
d370 1
a371 2
#define ICEIL(x)  iceil(x)
#endif
d377 1
a377 1
static INLINE int
d397 1
a397 1
static INLINE int32_t
d401 1
a401 1
	((__GNUC__ == 3 && __GNUC_MINOR__ >= 4) || __GNUC__ >= 4)
d416 1
a416 1
static INLINE int64_t
d420 1
a420 1
	((__GNUC__ == 3 && __GNUC_MINOR__ >= 4) || __GNUC__ >= 4)
d443 1
a443 1
static INLINE GLuint
d447 1
a447 1
   ((__GNUC__ == 3 && __GNUC_MINOR__ >= 4) || __GNUC__ >= 4)
d464 1
a464 1
static INLINE GLboolean
a498 14
extern void
_mesa_memset16( unsigned short *dst, unsigned short val, size_t n );

extern double
_mesa_sqrtd(double x);

extern float
_mesa_sqrtf(float x);

extern float
_mesa_inv_sqrtf(float x);

extern void
_mesa_init_sqrt_table(void);
d500 2
a502 2

#ifdef __MINGW32__
d505 5
a509 1
#endif
a510 2
#define _mesa_ffs(i)  ffs(i)
#define _mesa_ffsll(i)  ffsll(i)
d512 1
a512 1
#if ((_GNUC__ == 3 && __GNUC_MINOR__ >= 4) || __GNUC__ >= 4)
d514 1
d518 2
d522 10
d533 4
a536 2
extern int
_mesa_ffs(int32_t i);
d538 2
a539 2
extern int
_mesa_ffsll(int64_t i);
d541 1
a541 2
extern unsigned int
_mesa_bitcount(unsigned int n);
d543 4
d574 2
a575 13
struct gl_context;

extern void
_mesa_warning( struct gl_context *gc, const char *fmtString, ... ) PRINTFLIKE(2, 3);

extern void
_mesa_problem( const struct gl_context *ctx, const char *fmtString, ... ) PRINTFLIKE(2, 3);

extern void
_mesa_error( struct gl_context *ctx, GLenum error, const char *fmtString, ... ) PRINTFLIKE(3, 4);

extern void
_mesa_debug( const struct gl_context *ctx, const char *fmtString, ... ) PRINTFLIKE(2, 3);
@


1.6
log
@Merge Mesa 7.10.3
@
text
@d489 21
d563 18
d589 1
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d119 42
a488 36
/***
 *** UNCLAMPED_FLOAT_TO_UBYTE: clamp float to [0,1] and map to ubyte in [0,255]
 *** CLAMPED_FLOAT_TO_UBYTE: map float known to be in [0,1] to ubyte in [0,255]
 ***/
#if defined(USE_IEEE) && !defined(DEBUG)
#define IEEE_0996 0x3f7f0000	/* 0.996 or so */
/* This function/macro is sensitive to precision.  Test very carefully
 * if you change it!
 */
#define UNCLAMPED_FLOAT_TO_UBYTE(UB, F)					\
        do {								\
           fi_type __tmp;						\
           __tmp.f = (F);						\
           if (__tmp.i < 0)						\
              UB = (GLubyte) 0;						\
           else if (__tmp.i >= IEEE_0996)				\
              UB = (GLubyte) 255;					\
           else {							\
              __tmp.f = __tmp.f * (255.0F/256.0F) + 32768.0F;		\
              UB = (GLubyte) __tmp.i;					\
           }								\
        } while (0)
#define CLAMPED_FLOAT_TO_UBYTE(UB, F)					\
        do {								\
           fi_type __tmp;						\
           __tmp.f = (F) * (255.0F/256.0F) + 32768.0F;			\
           UB = (GLubyte) __tmp.i;					\
        } while (0)
#else
#define UNCLAMPED_FLOAT_TO_UBYTE(ub, f) \
	ub = ((GLubyte) IROUND(CLAMP((f), 0.0F, 1.0F) * 255.0F))
#define CLAMPED_FLOAT_TO_UBYTE(ub, f) \
	ub = ((GLubyte) IROUND((f) * 255.0F))
#endif


a530 15
_mesa_sin(double a);

extern float
_mesa_sinf(float a);

extern double
_mesa_cos(double a);

extern float
_mesa_asinf(float x);

extern float
_mesa_atanf(float x);

extern double
a541 3
extern double
_mesa_pow(double x, double y);

d575 3
a577 1
_mesa_snprintf( char *str, size_t size, const char *fmt, ... );
d580 1
a580 1
_mesa_warning( __GLcontext *gc, const char *fmtString, ... );
d583 1
a583 1
_mesa_problem( const __GLcontext *ctx, const char *fmtString, ... );
d586 1
a586 1
_mesa_error( __GLcontext *ctx, GLenum error, const char *fmtString, ... );
d589 7
a595 1
_mesa_debug( const __GLcontext *ctx, const char *fmtString, ... );
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d3 1
a3 1
 * Version:  7.1
d39 1
a39 2
/* XXX some of the stuff in glheader.h should be moved into this file.
 */
a40 1
#include <GL/internal/glcore.h>
a48 20
/** \name General macros */
/*@@{*/

#ifndef NULL
#define NULL 0
#endif


/** gcc -pedantic warns about long string literals, LONGSTRING silences that */
#if !defined(__GNUC__) || (__GNUC__ < 2) || \
    ((__GNUC__ == 2) && (__GNUC_MINOR__ <= 7))
# define LONGSTRING
#else
# define LONGSTRING __extension__
#endif

/*@@}*/


/**********************************************************************/
d53 1
a53 1
#define MALLOC(BYTES)      _mesa_malloc(BYTES)
d55 1
a55 1
#define CALLOC(BYTES)      _mesa_calloc(BYTES)
d57 1
a57 1
#define MALLOC_STRUCT(T)   (struct T *) _mesa_malloc(sizeof(struct T))
d59 1
a59 1
#define CALLOC_STRUCT(T)   (struct T *) _mesa_calloc(sizeof(struct T))
d61 1
a61 17
#define FREE(PTR)          _mesa_free(PTR)

/** Allocate \p BYTES aligned at \p N bytes */
#define ALIGN_MALLOC(BYTES, N)     _mesa_align_malloc(BYTES, N)
/** Allocate and zero \p BYTES bytes aligned at \p N bytes */
#define ALIGN_CALLOC(BYTES, N)     _mesa_align_calloc(BYTES, N)
/** Allocate a structure of type \p T aligned at \p N bytes */
#define ALIGN_MALLOC_STRUCT(T, N)  (struct T *) _mesa_align_malloc(sizeof(struct T), N)
/** Allocate and zero a structure of type \p T aligned at \p N bytes */
#define ALIGN_CALLOC_STRUCT(T, N)  (struct T *) _mesa_align_calloc(sizeof(struct T), N)
/** Free aligned memory */
#define ALIGN_FREE(PTR)            _mesa_align_free(PTR)

/** Copy \p BYTES bytes from \p SRC into \p DST */
#define MEMCPY( DST, SRC, BYTES)   _mesa_memcpy(DST, SRC, BYTES)
/** Set \p N bytes in \p DST to \p VAL */
#define MEMSET( DST, VAL, N )      _mesa_memset(DST, VAL, N)
a94 20
#ifndef M_PI
#define M_PI (3.1415926536)
#endif

#ifndef M_E
#define M_E (2.7182818284590452354)
#endif

#ifndef ONE_DIV_LN2
#define ONE_DIV_LN2 (1.442695040888963456)
#endif

#ifndef ONE_DIV_SQRT_LN2
#define ONE_DIV_SQRT_LN2 (1.201122408786449815)
#endif

#ifndef FLT_MAX_EXP
#define FLT_MAX_EXP 128
#endif

a99 18
 *** USE_IEEE: Determine if we're using IEEE floating point
 ***/
#if defined(__i386__) || defined(__386__) || defined(__sparc__) || \
    defined(__s390x__) || defined(__powerpc__) || \
    defined(__x86_64__) || \
    defined(ia64) || defined(__ia64__) || \
    defined(__hppa__) || defined(hpux) || \
    defined(__mips) || defined(_MIPS_ARCH) || \
    defined(__arm__) || \
    defined(__sh__) || defined(__m32r__) || \
    (defined(__sun) && defined(_IEEE_754)) || \
    (defined(__alpha__) && (defined(__IEEE_FLOAT) || !defined(VMS)))
#define USE_IEEE
#define IEEE_ONE 0x3f800000
#endif


/***
d243 1
a243 11
#if defined(USE_SPARC_ASM) && defined(__GNUC__) && defined(__sparc__)
static INLINE int iround(float f)
{
   int r;
   __asm__ ("fstoi %1, %0" : "=f" (r) : "f" (f));
   return r;
}
#define IROUND(x)  iround(x)
#elif defined(USE_X86_ASM) && defined(__GNUC__) && defined(__i386__) && \
			(!(defined(__BEOS__) || defined(__HAIKU__))  || \
			(__GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)))
d276 1
d390 56
a482 107
/***
 *** START_FAST_MATH: Set x86 FPU to faster, 32-bit precision mode (and save
 ***                  original mode to a temporary).
 *** END_FAST_MATH: Restore x86 FPU to original mode.
 ***/
#if defined(__GNUC__) && defined(__i386__)
/*
 * Set the x86 FPU control word to guarentee only 32 bits of precision
 * are stored in registers.  Allowing the FPU to store more introduces
 * differences between situations where numbers are pulled out of memory
 * vs. situations where the compiler is able to optimize register usage.
 *
 * In the worst case, we force the compiler to use a memory access to
 * truncate the float, by specifying the 'volatile' keyword.
 */
/* Hardware default: All exceptions masked, extended double precision,
 * round to nearest (IEEE compliant):
 */
#define DEFAULT_X86_FPU		0x037f
/* All exceptions masked, single precision, round to nearest:
 */
#define FAST_X86_FPU		0x003f
/* The fldcw instruction will cause any pending FP exceptions to be
 * raised prior to entering the block, and we clear any pending
 * exceptions before exiting the block.  Hence, asm code has free
 * reign over the FPU while in the fast math block.
 */
#if defined(NO_FAST_MATH)
#define START_FAST_MATH(x)						\
do {									\
   static GLuint mask = DEFAULT_X86_FPU;				\
   __asm__ ( "fnstcw %0" : "=m" (*&(x)) );				\
   __asm__ ( "fldcw %0" : : "m" (mask) );				\
} while (0)
#else
#define START_FAST_MATH(x)						\
do {									\
   static GLuint mask = FAST_X86_FPU;					\
   __asm__ ( "fnstcw %0" : "=m" (*&(x)) );				\
   __asm__ ( "fldcw %0" : : "m" (mask) );				\
} while (0)
#endif
/* Restore original FPU mode, and clear any exceptions that may have
 * occurred in the FAST_MATH block.
 */
#define END_FAST_MATH(x)						\
do {									\
   __asm__ ( "fnclex ; fldcw %0" : : "m" (*&(x)) );			\
} while (0)

#elif defined(__WATCOMC__) && defined(__386__)
#define DEFAULT_X86_FPU		0x037f /* See GCC comments above */
#define FAST_X86_FPU		0x003f /* See GCC comments above */
void _watcom_start_fast_math(unsigned short *x,unsigned short *mask);
#pragma aux _watcom_start_fast_math =                                   \
   "fnstcw  word ptr [eax]"                                             \
   "fldcw   word ptr [ecx]"                                             \
   parm [eax] [ecx]                                                     \
   modify exact [];
void _watcom_end_fast_math(unsigned short *x);
#pragma aux _watcom_end_fast_math =                                     \
   "fnclex"                                                             \
   "fldcw   word ptr [eax]"                                             \
   parm [eax]                                                           \
   modify exact [];
#if defined(NO_FAST_MATH)
#define START_FAST_MATH(x)                                              \
do {                                                                    \
   static GLushort mask = DEFAULT_X86_FPU;	                            \
   _watcom_start_fast_math(&x,&mask);                                   \
} while (0)
#else
#define START_FAST_MATH(x)                                              \
do {                                                                    \
   static GLushort mask = FAST_X86_FPU;                                 \
   _watcom_start_fast_math(&x,&mask);                                   \
} while (0)
#endif
#define END_FAST_MATH(x)  _watcom_end_fast_math(&x)

#elif defined(_MSC_VER) && defined(_M_IX86)
#define DEFAULT_X86_FPU		0x037f /* See GCC comments above */
#define FAST_X86_FPU		0x003f /* See GCC comments above */
#if defined(NO_FAST_MATH)
#define START_FAST_MATH(x) do {\
	static GLuint mask = DEFAULT_X86_FPU;\
	__asm fnstcw word ptr [x]\
	__asm fldcw word ptr [mask]\
} while(0)
#else
#define START_FAST_MATH(x) do {\
	static GLuint mask = FAST_X86_FPU;\
	__asm fnstcw word ptr [x]\
	__asm fldcw word ptr [mask]\
} while(0)
#endif
#define END_FAST_MATH(x) do {\
	__asm fnclex\
	__asm fldcw word ptr [x]\
} while(0)

#else
#define START_FAST_MATH(x)  x = 0
#define END_FAST_MATH(x)  (void)(x)
#endif


a499 9
_mesa_malloc( size_t bytes );

extern void *
_mesa_calloc( size_t bytes );

extern void
_mesa_free( void *ptr );

extern void *
a520 6
extern void *
_mesa_memcpy( void *dest, const void *src, size_t n );

extern void
_mesa_memset( void *dst, int val, size_t n );

a523 6
extern void
_mesa_bzero( void *dst, size_t n );

extern int
_mesa_memcmp( const void *s1, const void *s2, size_t n );

d555 1
a555 1
_mesa_ffs(int i);
d558 1
a558 5
#ifdef __MINGW32__
_mesa_ffsll(long i);
#else
_mesa_ffsll(long long i);
#endif
a577 21
_mesa_strstr( const char *haystack, const char *needle );

extern char *
_mesa_strncat( char *dest, const char *src, size_t n );

extern char *
_mesa_strcpy( char *dest, const char *src );

extern char *
_mesa_strncpy( char *dest, const char *src, size_t n );

extern size_t
_mesa_strlen( const char *s );

extern int
_mesa_strcmp( const char *s1, const char *s2 );

extern int
_mesa_strncmp( const char *s1, const char *s2, size_t n );

extern char *
d580 2
a581 2
extern int
_mesa_atoi( const char *s );
d583 2
a584 5
extern double
_mesa_strtod( const char *s, char **end );

extern int
_mesa_sprintf( char *str, const char *fmt, ... );
a589 10
_mesa_printf( const char *fmtString, ... );

extern void
_mesa_fprintf( FILE *f, const char *fmtString, ... );

extern int 
_mesa_vsprintf( char *str, const char *fmt, va_list args );


extern void
a599 4

extern void 
_mesa_exit( int status );

@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d328 2
a329 1
			(!defined(__BEOS__) || (__GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)))
d337 1
a337 1
#elif defined(USE_X86_ASM) && defined(__MSC__) && defined(__WIN32__)
d466 10
d771 3
d776 3
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d3 1
a3 1
 * Version:  7.0.3
d162 1
a162 1
    defined(__amd64__) || defined(__x86_64__) || \
d168 1
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.5.1
d5 1
a5 1
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
d58 9
d141 8
a152 5
/* XXX this is a bit of a hack needed for compilation within XFree86 */
#ifndef FLT_MIN
#define FLT_MIN (1.0e-37)
#endif

d162 1
a162 1
    defined(__amd64__) || \
a178 2
#elif defined(XFree86LOADER) && defined(IN_MODULE) && !defined(NO_LIBCWRAPPER)
#  define SQRTF(X)  (float) xf86sqrt((float) (X))
a224 2
#elif defined(XFree86LOADER) && defined(IN_MODULE) && !defined(NO_LIBCWRAPPER)
#define LOG2(x) ((GLfloat) (xf86log(x) * 1.442695))
d295 1
a295 9
#if defined(XFree86LOADER) && defined(IN_MODULE) && !defined(NO_LIBCWRAPPER)
#define CEILF(x)   ((GLfloat) xf86ceil(x))
#define FLOORF(x)  ((GLfloat) xf86floor(x))
#define FABSF(x)   ((GLfloat) xf86fabs(x))
#define LOGF(x)    ((GLfloat) xf86log(x))
#define EXPF(x)    ((GLfloat) xf86exp(x))
#define LDEXPF(x,y)   ((GLfloat) xf86ldexp(x,y))
#define FREXPF(x,y)   ((GLfloat) xf86frexp(x,y))
#elif defined(__gnu_linux__)
d607 11
d693 3
d702 7
a779 4


extern void
_mesa_init_default_imports( __GLimports *imports, void *driverCtx );
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d3 1
a3 1
 * Version:  6.5.2
a57 9

/** gcc -pedantic warns about long string literals, LONGSTRING silences that */
#if !defined(__GNUC__) || (__GNUC__ < 2) || \
    ((__GNUC__ == 2) && (__GNUC_MINOR__ <= 7))
# define LONGSTRING
#else
# define LONGSTRING __extension__
#endif

a604 11


/**
 * Return 1 if this is a little endian machine, 0 if big endian.
 */
static INLINE GLboolean
_mesa_little_endian(void)
{
   const GLuint ui = 1; /* intentionally not static */
   return *((const GLubyte *) &ui);
}
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d141 2
a142 6
#ifndef ONE_DIV_LN2
#define ONE_DIV_LN2 (1.442695040888963456)
#endif

#ifndef ONE_DIV_SQRT_LN2
#define ONE_DIV_SQRT_LN2 (1.201122408786449815)
d145 3
a147 2
#ifndef FLT_MAX_EXP
#define FLT_MAX_EXP 128
d176 2
d224 2
d296 9
a304 1
#if defined(__gnu_linux__)
a701 3
extern void
_mesa_init_sqrt_table(void);

a707 7
extern int
#ifdef __MINGW32__
_mesa_ffsll(long i);
#else
_mesa_ffsll(long long i);
#endif

d779 4
@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d3 1
a3 1
 * Version:  7.5
d5 1
a5 1
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
d39 2
a40 1
#include "compiler.h"
d42 1
d51 20
d75 1
a75 1
#define MALLOC(BYTES)      malloc(BYTES)
d77 1
a77 1
#define CALLOC(BYTES)      calloc(1, BYTES)
d79 1
a79 1
#define MALLOC_STRUCT(T)   (struct T *) malloc(sizeof(struct T))
d81 1
a81 1
#define CALLOC_STRUCT(T)   (struct T *) calloc(1, sizeof(struct T))
d83 17
a99 1
#define FREE(PTR)          free(PTR)
d133 20
d158 17
a193 42
/**
 * \name Work-arounds for platforms that lack C99 math functions
 */
/*@@{*/
#if (!defined(_XOPEN_SOURCE) || (_XOPEN_SOURCE < 600)) && !defined(_ISOC99_SOURCE) \
   && (!defined(__STDC_VERSION__) || (__STDC_VERSION__ < 199901L)) \
   && (!defined(_MSC_VER) || (_MSC_VER < 1400))
#define acosf(f) ((float) acos(f))
#define asinf(f) ((float) asin(f))
#define atan2f(x,y) ((float) atan2(x,y))
#define atanf(f) ((float) atan(f))
#define cielf(f) ((float) ciel(f))
#define cosf(f) ((float) cos(f))
#define coshf(f) ((float) cosh(f))
#define expf(f) ((float) exp(f))
#define exp2f(f) ((float) exp2(f))
#define floorf(f) ((float) floor(f))
#define logf(f) ((float) log(f))
#define log2f(f) ((float) log2(f))
#define powf(x,y) ((float) pow(x,y))
#define sinf(f) ((float) sin(f))
#define sinhf(f) ((float) sinh(f))
#define sqrtf(f) ((float) sqrt(f))
#define tanf(f) ((float) tan(f))
#define tanhf(f) ((float) tanh(f))
#define acoshf(f) ((float) acosh(f))
#define asinhf(f) ((float) asinh(f))
#define atanhf(f) ((float) atanh(f))
#endif

#if defined(_MSC_VER)
static INLINE float truncf(float x) { return x < 0.0f ? ceilf(x) : floorf(x); }
static INLINE float exp2f(float x) { return powf(2.0f, x); }
static INLINE float log2f(float x) { return logf(x) * 1.442695041f; }
static INLINE float asinhf(float x) { return logf(x + sqrtf(x * x + 1.0f)); }
static INLINE float acoshf(float x) { return logf(x + sqrtf(x * x - 1.0f)); }
static INLINE float atanhf(float x) { return (logf(1.0f + x) - logf(1.0f - x)) / 2.0f; }
static INLINE int isblank(int ch) { return ch == ' ' || ch == '\t'; }
#define strtoll(p, e, b) _strtoi64(p, e, b)
#endif
/*@@}*/

d318 10
a327 1
#if defined(USE_X86_ASM) && defined(__GNUC__) && defined(__i386__)
d335 1
a335 1
#elif defined(USE_X86_ASM) && defined(_MSC_VER)
a359 1
#define IROUND64(f)  ((GLint64) (((f) >= 0.0F) ? ((f) + 0.5F) : ((f) - 0.5F)))
d464 56
a519 2
/**
 * Is x a power of two?
d521 28
a548 5
static INLINE int
_mesa_is_pow_two(int x)
{
   return !(x & (x - 1));
}
d550 50
a599 32
/**
 * Round given integer to next higer power of two
 * If X is zero result is undefined.
 *
 * Source for the fallback implementation is
 * Sean Eron Anderson's webpage "Bit Twiddling Hacks"
 * http://graphics.stanford.edu/~seander/bithacks.html
 *
 * When using builtin function have to do some work
 * for case when passed values 1 to prevent hiting
 * undefined result from __builtin_clz. Undefined
 * results would be different depending on optimization
 * level used for build.
 */
static INLINE int32_t
_mesa_next_pow_two_32(uint32_t x)
{
#if defined(__GNUC__) && \
	((__GNUC__ == 3 && __GNUC_MINOR__ >= 4) || __GNUC__ >= 4)
	uint32_t y = (x != 1);
	return (1 + y) << ((__builtin_clz(x - y) ^ 31) );
#else
	x--;
	x |= x >> 1;
	x |= x >> 2;
	x |= x >> 4;
	x |= x >> 8;
	x |= x >> 16;
	x++;
	return x;
#endif
}
d601 3
a603 20
static INLINE int64_t
_mesa_next_pow_two_64(uint64_t x)
{
#if defined(__GNUC__) && \
	((__GNUC__ == 3 && __GNUC_MINOR__ >= 4) || __GNUC__ >= 4)
	uint64_t y = (x != 1);
	if (sizeof(x) == sizeof(long))
		return (1 + y) << ((__builtin_clzl(x - y) ^ 63));
	else
		return (1 + y) << ((__builtin_clzll(x - y) ^ 63));
#else
	x--;
	x |= x >> 1;
	x |= x >> 2;
	x |= x >> 4;
	x |= x >> 8;
	x |= x >> 16;
	x |= x >> 32;
	x++;
	return x;
a604 1
}
d624 9
d654 6
d663 21
d696 3
d700 1
a700 1
_mesa_ffs(int32_t i);
d703 5
a707 1
_mesa_ffsll(int64_t i);
d727 21
d750 2
a751 2
extern float
_mesa_strtof( const char *s, char **end );
d753 2
a754 2
extern unsigned int
_mesa_str_checksum(const char *str);
d757 7
a763 1
_mesa_snprintf( char *str, size_t size, const char *fmt, ... ) PRINTFLIKE(3, 4);
a764 1
struct gl_context;
d767 1
a767 1
_mesa_warning( struct gl_context *gc, const char *fmtString, ... ) PRINTFLIKE(2, 3);
d770 1
a770 1
_mesa_problem( const struct gl_context *ctx, const char *fmtString, ... ) PRINTFLIKE(2, 3);
d773 1
a773 1
_mesa_error( struct gl_context *ctx, GLenum error, const char *fmtString, ... ) PRINTFLIKE(3, 4);
d776 1
a776 1
_mesa_debug( const struct gl_context *ctx, const char *fmtString, ... ) PRINTFLIKE(2, 3);
d778 2
a779 4

#if defined(_MSC_VER) && !defined(snprintf)
#define snprintf _snprintf
#endif
@


1.1.1.5
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d41 1
a41 1
#include "errors.h"
d84 1
a84 1
typedef union { GLfloat f; GLint i; GLuint u; } fi_type;
d99 20
d130 1
a130 1
#define ceilf(f) ((float) ceil(f))
a136 4

#ifdef ANDROID
#define log2f(f) (logf(f) * (float) (1.0 / M_LN2))
#else
a137 2
#endif

d150 7
a156 7
static inline float truncf(float x) { return x < 0.0f ? ceilf(x) : floorf(x); }
static inline float exp2f(float x) { return powf(2.0f, x); }
static inline float log2f(float x) { return logf(x) * 1.442695041f; }
static inline float asinhf(float x) { return logf(x + sqrtf(x * x + 1.0f)); }
static inline float acoshf(float x) { return logf(x + sqrtf(x * x - 1.0f)); }
static inline float atanhf(float x) { return (logf(1.0f + x) - logf(1.0f - x)) / 2.0f; }
static inline int isblank(int ch) { return ch == ' ' || ch == '\t'; }
a160 18

/*
 * signbit() is a macro on Linux.  Not available on Windows.
 */
#ifndef signbit
#define signbit(x) ((x) < 0.0f)
#endif


/** single-precision inverse square root */
static inline float
INV_SQRTF(float x)
{
   /* XXX we could try Quake's fast inverse square root function here */
   return 1.0F / sqrtf(x);
}


a163 2
static inline GLfloat LOG2(GLfloat x)
{
d166 5
a170 3
   /* This is pretty fast, but not accurate enough (only 2 fractional bits).
    * Based on code from http://www.stereopsis.com/log2.html
    */
d176 1
d178 5
a182 3
   /* Pretty fast, and accurate.
    * Based on code from http://www.flipcode.com/totd/
    */
d185 1
a185 1
   num.f = x;
d191 1
d193 5
a197 5
   /*
    * NOTE: log_base_2(x) = log(x) / log(2)
    * NOTE: 1.442695 = 1/log(2).
    */
   return (GLfloat) (log(x) * 1.442695F);
a198 2
}

d205 1
a205 1
static inline int IS_INF_OR_NAN( float x )
d215 2
d225 29
d282 5
a286 33
/**
 * Convert float to int by rounding to nearest integer, away from zero.
 */
static inline int IROUND(float f)
{
   return (int) ((f >= 0.0F) ? (f + 0.5F) : (f - 0.5F));
}


/**
 * Convert float to int64 by rounding to nearest integer.
 */
static inline GLint64 IROUND64(float f)
{
   return (GLint64) ((f >= 0.0F) ? (f + 0.5F) : (f - 0.5F));
}


/**
 * Convert positive float to int by rounding to nearest integer.
 */
static inline int IROUND_POS(float f)
{
   assert(f >= 0.0F);
   return (int) (f + 0.5F);
}


/**
 * Convert float to int using a fast method.  The rounding mode may vary.
 * XXX We could use an x86-64/SSE2 version here.
 */
static inline int F_TO_I(float f)
a287 1
#if defined(USE_X86_ASM) && defined(__GNUC__) && defined(__i386__)
d291 2
d294 2
d302 23
d326 1
a326 1
   return IROUND(f);
a327 1
}
d330 12
a341 2
/** Return (as an integer) floor of float */
static inline int IFLOOR(float f)
a342 8
#if defined(USE_X86_ASM) && defined(__GNUC__) && defined(__i386__)
   /*
    * IEEE floor for computers that round to nearest or even.
    * 'f' must be between -4194304 and 4194303.
    * This floor operation is done by "(iround(f + .5) + iround(f - .5)) >> 1",
    * but uses some IEEE specific tricks for better speed.
    * Contributed by Josh Vanderhoof
    */
d351 2
d354 2
d359 1
d365 2
d368 2
d372 2
a374 1
}
d377 12
a388 2
/** Return (as an integer) ceiling of float */
static inline int ICEIL(float f)
a389 8
#if defined(USE_X86_ASM) && defined(__GNUC__) && defined(__i386__)
   /*
    * IEEE ceil for computers that round to nearest or even.
    * 'f' must be between -4194304 and 4194303.
    * This ceil operation is done by "(iround(f + .5) + iround(f - .5) + 1) >> 1",
    * but uses some IEEE specific tricks for better speed.
    * Contributed by Josh Vanderhoof
    */
d398 2
d401 2
d411 2
d414 2
d418 2
a420 1
}
d426 1
a426 1
static inline int
d446 1
a446 1
static inline int32_t
d450 1
a450 1
	((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
d465 1
a465 1
static inline int64_t
d469 1
a469 1
	((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
a488 21
/*
 * Returns the floor form of binary logarithm for a 32-bit integer.
 */
static inline GLuint
_mesa_logbase2(GLuint n)
{
#if defined(__GNUC__) && \
   ((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
   return (31 - __builtin_clz(n | 1));
#else
   GLuint pos = 0;
   if (n >= 1<<16) { n >>= 16; pos += 16; }
   if (n >= 1<< 8) { n >>=  8; pos +=  8; }
   if (n >= 1<< 4) { n >>=  4; pos +=  4; }
   if (n >= 1<< 2) { n >>=  2; pos +=  2; }
   if (n >= 1<< 1) {           pos +=  1; }
   return pos;
#endif
}


d492 1
a492 1
static inline GLboolean
d527 2
d530 2
a531 10
#ifndef FFS_DEFINED
#define FFS_DEFINED 1
#ifdef __GNUC__
#define ffs __builtin_ffs
#define ffsll __builtin_ffsll
#else
extern int ffs(int i);
extern int ffsll(long long int i);
#endif /*__ GNUC__ */
#endif /* FFS_DEFINED */
d533 2
d536 2
a537 9
#if defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
#define _mesa_bitcount(i) __builtin_popcount(i)
#define _mesa_bitcount_64(i) __builtin_popcountll(i)
#else
extern unsigned int
_mesa_bitcount(unsigned int n);
extern unsigned int
_mesa_bitcount_64(uint64_t n);
#endif
d539 2
a540 12
/**
 * Find the last (most significant) bit set in a word.
 *
 * Essentially ffs() in the reverse direction.
 */
static inline unsigned int
_mesa_fls(unsigned int n)
{
#if defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 304)
   return n == 0 ? 0 : 32 - __builtin_clz(n);
#else
   unsigned int v = 1;
d542 2
a543 2
   if (n == 0)
      return 0;
d545 2
a546 2
   while (n >>= 1)
       v++;
d548 2
a549 6
   return v;
#endif
}

extern int
_mesa_round_to_even(float val);
d577 13
a589 2
extern int
_mesa_vsnprintf(char *str, size_t size, const char *fmt, va_list arg);
@


1.1.1.6
log
@Import Mesa 10.2.3
@
text
@d52 4
d60 2
a135 1
#if _MSC_VER < 1800  /* Not req'd on VS2013 and above */
a143 2
#endif /* _MSC_VER < 1800 */
#define strcasecmp(s1, s2) _stricmp(s1, s2)
@


1.1.1.7
log
@Import Mesa 10.4.3
@
text
@d167 1
d189 7
d203 8
a210 1
#if defined(isfinite)
a276 3
#ifdef __x86_64__
#  include <xmmintrin.h>
#endif
d280 1
a294 2
#elif defined(__x86_64__)
   return _mm_cvt_ss2si(_mm_load_ss(&f));
d320 1
a320 1
#else
d329 3
d355 1
a355 1
#else
d364 3
d397 2
a398 1
#ifdef HAVE___BUILTIN_CLZ
d416 2
a417 1
#ifdef HAVE___BUILTIN_CLZLL
d419 4
a422 2
	STATIC_ASSERT(sizeof(x) == sizeof(long long));
	return (1 + y) << ((__builtin_clzll(x - y) ^ 63));
d443 2
a444 1
#ifdef HAVE___BUILTIN_CLZ
d493 3
d499 1
a499 1
#ifdef HAVE___BUILTIN_FFS
d501 1
a503 5
#endif

#ifdef HAVE___BUILTIN_FFSLL
#define ffsll __builtin_ffsll
#else
d505 1
a505 1
#endif
d509 1
a509 1
#ifdef HAVE___BUILTIN_POPCOUNT
d511 1
a514 5
#endif

#ifdef HAVE___BUILTIN_POPCOUNTLL
#define _mesa_bitcount_64(i) __builtin_popcountll(i)
#else
d527 1
a527 1
#ifdef HAVE___BUILTIN_CLZ
d551 7
a557 5
static inline bool
_mesa_half_is_negative(GLhalfARB h)
{
   return h & 0x8000;
}
d561 3
@


1.1.1.8
log
@Import Mesa 10.2.9
@
text
@a166 1
#ifdef USE_IEEE
a187 7
#else
   /*
    * NOTE: log_base_2(x) = log(x) / log(2)
    * NOTE: 1.442695 = 1/log(2).
    */
   return (GLfloat) (log(x) * 1.442695F);
#endif
d195 1
a195 8
#ifdef USE_IEEE
static inline int IS_INF_OR_NAN( float x )
{
   fi_type tmp;
   tmp.f = x;
   return !(int)((unsigned int)((tmp.i & 0x7fffffff)-0x7f800000) >> 31);
}
#elif defined(isfinite)
d262 3
a267 1
 * XXX We could use an x86-64/SSE2 version here.
d282 2
d309 1
a309 1
#elif defined(USE_IEEE)
a317 3
#else
   int i = IROUND(f);
   return (i > f) ? i - 1 : i;
d341 1
a341 1
#elif defined(USE_IEEE)
a349 3
#else
   int i = IROUND(f);
   return (i < f) ? i + 1 : i;
d380 1
a380 2
#if defined(__GNUC__) && \
	((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
d398 1
a398 2
#if defined(__GNUC__) && \
	((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
d400 2
a401 4
	if (sizeof(x) == sizeof(long))
		return (1 + y) << ((__builtin_clzl(x - y) ^ 63));
	else
		return (1 + y) << ((__builtin_clzll(x - y) ^ 63));
d422 1
a422 2
#if defined(__GNUC__) && \
   ((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
a470 3
extern void *
_mesa_realloc( void *oldBuffer, size_t oldSize, size_t newSize );

d474 1
a474 1
#ifdef __GNUC__
d476 5
a482 1
extern int ffs(int i);
d484 1
a484 1
#endif /*__ GNUC__ */
d488 1
a488 1
#if defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) /* gcc 3.4 or later */
a489 1
#define _mesa_bitcount_64(i) __builtin_popcountll(i)
d493 5
d510 1
a510 1
#if defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 304)
d534 5
a538 7

extern void *
_mesa_bsearch( const void *key, const void *base, size_t nmemb, size_t size, 
               int (*compar)(const void *, const void *) );

extern char *
_mesa_getenv( const char *var );
a541 3

extern float
_mesa_strtof( const char *s, char **end );
@


