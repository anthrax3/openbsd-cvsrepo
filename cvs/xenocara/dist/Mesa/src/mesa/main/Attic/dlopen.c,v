head	1.4;
access;
symbols
	OPENBSD_5_4:1.3.0.8
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.09.05.14.06.19;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.22.20.06.30;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.17.20.26.41;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.45;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * Wrapper functions for dlopen(), dlsym(), dlclose().
 * Note that the #ifdef tests for various environments should be expanded.
 */


#include "compiler.h"
#include "dlopen.h"

#if defined(_GNU_SOURCE) && !defined(__MINGW32__) && !defined(__blrts)
#include <dlfcn.h>
#endif
#if defined(_WIN32)
#include <windows.h>
#endif


/**
 * Wrapper for dlopen().
 * Note that 'flags' isn't used at this time.
 */
void *
_mesa_dlopen(const char *libname, int flags)
{
#if defined(__blrts)
   return NULL;
#elif defined(_GNU_SOURCE)
   flags = RTLD_LAZY | RTLD_GLOBAL; /* Overriding flags at this time */
   return dlopen(libname, flags);
#elif defined(__MINGW32__)
   return LoadLibraryA(libname);
#else
   return NULL;
#endif
}


/**
 * Wrapper for dlsym() that does a cast to a generic function type,
 * rather than a void *.  This reduces the number of warnings that are
 * generated.
 */
GenericFunc
_mesa_dlsym(void *handle, const char *fname)
{
   union {
      void *v;
      GenericFunc f;
   } u;
#if defined(__blrts)
   u.v = NULL;
#elif defined(__DJGPP__)
   /* need '_' prefix on symbol names */
   char fname2[1000];
   fname2[0] = '_';
   strncpy(fname2 + 1, fname, 998);
   fname2[999] = 0;
   u.v = dlsym(handle, fname2);
#elif defined(_GNU_SOURCE)
   u.v = dlsym(handle, fname);
#elif defined(__MINGW32__)
   u.v = (void *) GetProcAddress(handle, fname);
#else
   u.v = NULL;
#endif
   return u.f;
}


/**
 * Wrapper for dlclose().
 */
void
_mesa_dlclose(void *handle)
{
#if defined(__blrts)
   (void) handle;
#elif defined(_GNU_SOURCE)
   dlclose(handle);
#elif defined(__MINGW32__)
   FreeLibrary(handle);
#else
   (void) handle;
#endif
}



@


1.3
log
@Merge Mesa 7.10.3
@
text
@@


1.2
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d70 4
d75 1
a75 1
   return (GenericFunc) NULL;
d82 1
a82 1
   return (GenericFunc) dlsym(handle, fname2);
d84 1
a84 1
   return (GenericFunc) dlsym(handle, fname);
d86 1
a86 1
   return (GenericFunc) GetProcAddress(handle, fname);
d88 1
a88 1
   return (GenericFunc) NULL;
d90 1
@


1.1
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d31 1
a31 2
#include "glheader.h"
#include "imports.h"
d34 1
a34 1
#if defined(_GNU_SOURCE) && !defined(__MINGW32__)
a36 1

a40 5
#if defined(__HAIKU__)
/* for NULL */
#include <stdio.h>
#endif

d49 3
a51 1
#if defined(_GNU_SOURCE)
d55 1
a55 1
   return LoadLibrary(libname);
d70 3
a72 1
#if defined(__DJGPP__)
d76 1
a76 1
   _mesa_strncpy(fname2 + 1, fname, 998);
d95 3
a97 1
#if defined(_GNU_SOURCE)
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d31 2
a32 1
#include "compiler.h"
d35 1
a35 1
#if defined(_GNU_SOURCE) && !defined(__MINGW32__) && !defined(__blrts)
d38 1
d43 5
d56 1
a56 3
#if defined(__blrts)
   return NULL;
#elif defined(_GNU_SOURCE)
d60 1
a60 1
   return LoadLibraryA(libname);
d75 1
a75 7
   union {
      void *v;
      GenericFunc f;
   } u;
#if defined(__blrts)
   u.v = NULL;
#elif defined(__DJGPP__)
d79 1
a79 1
   strncpy(fname2 + 1, fname, 998);
d81 1
a81 1
   u.v = dlsym(handle, fname2);
d83 1
a83 1
   u.v = dlsym(handle, fname);
d85 1
a85 1
   u.v = (void *) GetProcAddress(handle, fname);
d87 1
a87 1
   u.v = NULL;
a88 1
   return u.f;
d98 1
a98 3
#if defined(__blrts)
   (void) handle;
#elif defined(_GNU_SOURCE)
@


