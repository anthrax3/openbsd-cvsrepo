head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.6
	v10_2_7:1.1.1.6
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	v10_2_3:1.1.1.6
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.5
	v9_2_3:1.1.1.5
	v9_2_2:1.1.1.5
	v9_2_1:1.1.1.5
	v9_2_0:1.1.1.5
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.52;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.6;
commitid	WPD6rgPryPkvXOr9;

1.6
date	2013.09.05.14.06.14;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.30;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.41;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.20;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.49.41;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.49.41;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.31;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.30.47;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.45;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.09.05.13.16.22;	author jsg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.07.09.20.34.58;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**
 * \file api_loopback.c
 *
 * \author Keith Whitwell <keithw@@vmware.com>
 */

/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2004  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


#include "glheader.h"
#include "macros.h"
#include "api_loopback.h"
#include "mtypes.h"
#include "glapi/glapi.h"
#include "main/dispatch.h"
#include "main/context.h"

/* KW: A set of functions to convert unusual Color/Normal/Vertex/etc
 * calls to a smaller set of driver-provided formats.  Currently just
 * go back to dispatch to find these (eg. call glNormal3f directly),
 * hence 'loopback'.
 *
 * The driver must supply all of the remaining entry points, which are
 * listed in dd.h.  The easiest way for a driver to do this is to
 * install the supplied software t&l module.
 */
#define COLORF(r,g,b,a)             CALL_Color4f(GET_DISPATCH(), (r,g,b,a))
#define VERTEX2(x,y)	            CALL_Vertex2f(GET_DISPATCH(), (x,y))
#define VERTEX3(x,y,z)	            CALL_Vertex3f(GET_DISPATCH(), (x,y,z))
#define VERTEX4(x,y,z,w)            CALL_Vertex4f(GET_DISPATCH(), (x,y,z,w))
#define NORMAL(x,y,z)               CALL_Normal3f(GET_DISPATCH(), (x,y,z))
#define TEXCOORD1(s)                CALL_TexCoord1f(GET_DISPATCH(), (s))
#define TEXCOORD2(s,t)              CALL_TexCoord2f(GET_DISPATCH(), (s,t))
#define TEXCOORD3(s,t,u)            CALL_TexCoord3f(GET_DISPATCH(), (s,t,u))
#define TEXCOORD4(s,t,u,v)          CALL_TexCoord4f(GET_DISPATCH(), (s,t,u,v))
#define INDEX(c)		    CALL_Indexf(GET_DISPATCH(), (c))
#define MULTI_TEXCOORD1(z,s)	    CALL_MultiTexCoord1fARB(GET_DISPATCH(), (z,s))
#define MULTI_TEXCOORD2(z,s,t)	    CALL_MultiTexCoord2fARB(GET_DISPATCH(), (z,s,t))
#define MULTI_TEXCOORD3(z,s,t,u)    CALL_MultiTexCoord3fARB(GET_DISPATCH(), (z,s,t,u))
#define MULTI_TEXCOORD4(z,s,t,u,v)  CALL_MultiTexCoord4fARB(GET_DISPATCH(), (z,s,t,u,v))
#define EVALCOORD1(x)               CALL_EvalCoord1f(GET_DISPATCH(), (x))
#define EVALCOORD2(x,y)             CALL_EvalCoord2f(GET_DISPATCH(), (x,y))
#define MATERIALFV(a,b,c)           CALL_Materialfv(GET_DISPATCH(), (a,b,c))
#define RECTF(a,b,c,d)              CALL_Rectf(GET_DISPATCH(), (a,b,c,d))

#define FOGCOORDF(x)                CALL_FogCoordfEXT(GET_DISPATCH(), (x))
#define SECONDARYCOLORF(a,b,c)      CALL_SecondaryColor3fEXT(GET_DISPATCH(), (a,b,c))

#define ATTRIB1NV(index,x)          CALL_VertexAttrib1fNV(GET_DISPATCH(), (index,x))
#define ATTRIB2NV(index,x,y)        CALL_VertexAttrib2fNV(GET_DISPATCH(), (index,x,y))
#define ATTRIB3NV(index,x,y,z)      CALL_VertexAttrib3fNV(GET_DISPATCH(), (index,x,y,z))
#define ATTRIB4NV(index,x,y,z,w)    CALL_VertexAttrib4fNV(GET_DISPATCH(), (index,x,y,z,w))

#define ATTRIB1ARB(index,x)         CALL_VertexAttrib1fARB(GET_DISPATCH(), (index,x))
#define ATTRIB2ARB(index,x,y)       CALL_VertexAttrib2fARB(GET_DISPATCH(), (index,x,y))
#define ATTRIB3ARB(index,x,y,z)     CALL_VertexAttrib3fARB(GET_DISPATCH(), (index,x,y,z))
#define ATTRIB4ARB(index,x,y,z,w)   CALL_VertexAttrib4fARB(GET_DISPATCH(), (index,x,y,z,w))

#define ATTRIBI_1I(index,x)   CALL_VertexAttribI1iEXT(GET_DISPATCH(), (index,x))
#define ATTRIBI_1UI(index,x)   CALL_VertexAttribI1uiEXT(GET_DISPATCH(), (index,x))
#define ATTRIBI_4I(index,x,y,z,w)   CALL_VertexAttribI4iEXT(GET_DISPATCH(), (index,x,y,z,w))

#define ATTRIBI_4UI(index,x,y,z,w)   CALL_VertexAttribI4uiEXT(GET_DISPATCH(), (index,x,y,z,w))


void GLAPIENTRY
_mesa_Color3b( GLbyte red, GLbyte green, GLbyte blue )
{
   COLORF( BYTE_TO_FLOAT(red),
	   BYTE_TO_FLOAT(green),
	   BYTE_TO_FLOAT(blue),
	   1.0 );
}

void GLAPIENTRY
_mesa_Color3d( GLdouble red, GLdouble green, GLdouble blue )
{
   COLORF( (GLfloat) red, (GLfloat) green, (GLfloat) blue, 1.0 );
}

void GLAPIENTRY
_mesa_Color3i( GLint red, GLint green, GLint blue )
{
   COLORF( INT_TO_FLOAT(red), INT_TO_FLOAT(green),
	   INT_TO_FLOAT(blue), 1.0);
}

void GLAPIENTRY
_mesa_Color3s( GLshort red, GLshort green, GLshort blue )
{
   COLORF( SHORT_TO_FLOAT(red), SHORT_TO_FLOAT(green),
	   SHORT_TO_FLOAT(blue), 1.0);
}

void GLAPIENTRY
_mesa_Color3ui( GLuint red, GLuint green, GLuint blue )
{
   COLORF( UINT_TO_FLOAT(red), UINT_TO_FLOAT(green),
	   UINT_TO_FLOAT(blue), 1.0 );
}

void GLAPIENTRY
_mesa_Color3us( GLushort red, GLushort green, GLushort blue )
{
   COLORF( USHORT_TO_FLOAT(red), USHORT_TO_FLOAT(green),
	   USHORT_TO_FLOAT(blue), 1.0 );
}

void GLAPIENTRY
_mesa_Color3ub( GLubyte red, GLubyte green, GLubyte blue )
{
   COLORF( UBYTE_TO_FLOAT(red), UBYTE_TO_FLOAT(green),
	   UBYTE_TO_FLOAT(blue), 1.0 );
}


void GLAPIENTRY
_mesa_Color3bv( const GLbyte *v )
{
   COLORF( BYTE_TO_FLOAT(v[0]), BYTE_TO_FLOAT(v[1]),
	   BYTE_TO_FLOAT(v[2]), 1.0 );
}

void GLAPIENTRY
_mesa_Color3dv( const GLdouble *v )
{
   COLORF( (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2], 1.0 );
}

void GLAPIENTRY
_mesa_Color3iv( const GLint *v )
{
   COLORF( INT_TO_FLOAT(v[0]), INT_TO_FLOAT(v[1]),
	   INT_TO_FLOAT(v[2]), 1.0 );
}

void GLAPIENTRY
_mesa_Color3sv( const GLshort *v )
{
   COLORF( SHORT_TO_FLOAT(v[0]), SHORT_TO_FLOAT(v[1]),
	   SHORT_TO_FLOAT(v[2]), 1.0 );
}

void GLAPIENTRY
_mesa_Color3uiv( const GLuint *v )
{
   COLORF( UINT_TO_FLOAT(v[0]), UINT_TO_FLOAT(v[1]),
	   UINT_TO_FLOAT(v[2]), 1.0 );
}

void GLAPIENTRY
_mesa_Color3usv( const GLushort *v )
{
   COLORF( USHORT_TO_FLOAT(v[0]), USHORT_TO_FLOAT(v[1]),
	   USHORT_TO_FLOAT(v[2]), 1.0 );
}

void GLAPIENTRY
_mesa_Color3ubv( const GLubyte *v )
{
   COLORF( UBYTE_TO_FLOAT(v[0]), UBYTE_TO_FLOAT(v[1]),
	   UBYTE_TO_FLOAT(v[2]), 1.0 );
}


void GLAPIENTRY
_mesa_Color4b( GLbyte red, GLbyte green, GLbyte blue,
			      GLbyte alpha )
{
   COLORF( BYTE_TO_FLOAT(red), BYTE_TO_FLOAT(green),
	   BYTE_TO_FLOAT(blue), BYTE_TO_FLOAT(alpha) );
}

void GLAPIENTRY
_mesa_Color4d( GLdouble red, GLdouble green, GLdouble blue,
			      GLdouble alpha )
{
   COLORF( (GLfloat) red, (GLfloat) green, (GLfloat) blue, (GLfloat) alpha );
}

void GLAPIENTRY
_mesa_Color4i( GLint red, GLint green, GLint blue, GLint alpha )
{
   COLORF( INT_TO_FLOAT(red), INT_TO_FLOAT(green),
	   INT_TO_FLOAT(blue), INT_TO_FLOAT(alpha) );
}

void GLAPIENTRY
_mesa_Color4s( GLshort red, GLshort green, GLshort blue,
			      GLshort alpha )
{
   COLORF( SHORT_TO_FLOAT(red), SHORT_TO_FLOAT(green),
	   SHORT_TO_FLOAT(blue), SHORT_TO_FLOAT(alpha) );
}

void GLAPIENTRY
_mesa_Color4ui( GLuint red, GLuint green, GLuint blue, GLuint alpha )
{
   COLORF( UINT_TO_FLOAT(red), UINT_TO_FLOAT(green),
	   UINT_TO_FLOAT(blue), UINT_TO_FLOAT(alpha) );
}

void GLAPIENTRY
_mesa_Color4us( GLushort red, GLushort green, GLushort blue, GLushort alpha )
{
   COLORF( USHORT_TO_FLOAT(red), USHORT_TO_FLOAT(green),
	   USHORT_TO_FLOAT(blue), USHORT_TO_FLOAT(alpha) );
}

void GLAPIENTRY
_mesa_Color4ub( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha )
{
   COLORF( UBYTE_TO_FLOAT(red), UBYTE_TO_FLOAT(green),
	   UBYTE_TO_FLOAT(blue), UBYTE_TO_FLOAT(alpha) );
}


void GLAPIENTRY
_mesa_Color4iv( const GLint *v )
{
   COLORF( INT_TO_FLOAT(v[0]), INT_TO_FLOAT(v[1]),
	   INT_TO_FLOAT(v[2]), INT_TO_FLOAT(v[3]) );
}


void GLAPIENTRY
_mesa_Color4bv( const GLbyte *v )
{
   COLORF( BYTE_TO_FLOAT(v[0]), BYTE_TO_FLOAT(v[1]),
	   BYTE_TO_FLOAT(v[2]), BYTE_TO_FLOAT(v[3]) );
}

void GLAPIENTRY
_mesa_Color4dv( const GLdouble *v )
{
   COLORF( (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2], (GLfloat) v[3] );
}


void GLAPIENTRY
_mesa_Color4sv( const GLshort *v)
{
   COLORF( SHORT_TO_FLOAT(v[0]), SHORT_TO_FLOAT(v[1]),
	   SHORT_TO_FLOAT(v[2]), SHORT_TO_FLOAT(v[3]) );
}


void GLAPIENTRY
_mesa_Color4uiv( const GLuint *v)
{
   COLORF( UINT_TO_FLOAT(v[0]), UINT_TO_FLOAT(v[1]),
	   UINT_TO_FLOAT(v[2]), UINT_TO_FLOAT(v[3]) );
}

void GLAPIENTRY
_mesa_Color4usv( const GLushort *v)
{
   COLORF( USHORT_TO_FLOAT(v[0]), USHORT_TO_FLOAT(v[1]),
	   USHORT_TO_FLOAT(v[2]), USHORT_TO_FLOAT(v[3]) );
}

void GLAPIENTRY
_mesa_Color4ubv( const GLubyte *v)
{
   COLORF( UBYTE_TO_FLOAT(v[0]), UBYTE_TO_FLOAT(v[1]),
	   UBYTE_TO_FLOAT(v[2]), UBYTE_TO_FLOAT(v[3]) );
}


void GLAPIENTRY
_mesa_FogCoordd( GLdouble d )
{
   FOGCOORDF( (GLfloat) d );
}

void GLAPIENTRY
_mesa_FogCoorddv( const GLdouble *v )
{
   FOGCOORDF( (GLfloat) *v );
}


void GLAPIENTRY
_mesa_Indexd( GLdouble c )
{
   INDEX( (GLfloat) c );
}

void GLAPIENTRY
_mesa_Indexi( GLint c )
{
   INDEX( (GLfloat) c );
}

void GLAPIENTRY
_mesa_Indexs( GLshort c )
{
   INDEX( (GLfloat) c );
}

void GLAPIENTRY
_mesa_Indexub( GLubyte c )
{
   INDEX( (GLfloat) c );
}

void GLAPIENTRY
_mesa_Indexdv( const GLdouble *c )
{
   INDEX( (GLfloat) *c );
}

void GLAPIENTRY
_mesa_Indexiv( const GLint *c )
{
   INDEX( (GLfloat) *c );
}

void GLAPIENTRY
_mesa_Indexsv( const GLshort *c )
{
   INDEX( (GLfloat) *c );
}

void GLAPIENTRY
_mesa_Indexubv( const GLubyte *c )
{
   INDEX( (GLfloat) *c );
}


void GLAPIENTRY
_mesa_EdgeFlagv(const GLboolean *flag)
{
   CALL_EdgeFlag(GET_DISPATCH(), (*flag));
}


void GLAPIENTRY
_mesa_Normal3b( GLbyte nx, GLbyte ny, GLbyte nz )
{
   NORMAL( BYTE_TO_FLOAT(nx), BYTE_TO_FLOAT(ny), BYTE_TO_FLOAT(nz) );
}

void GLAPIENTRY
_mesa_Normal3d( GLdouble nx, GLdouble ny, GLdouble nz )
{
   NORMAL((GLfloat) nx, (GLfloat) ny, (GLfloat) nz);
}

void GLAPIENTRY
_mesa_Normal3i( GLint nx, GLint ny, GLint nz )
{
   NORMAL( INT_TO_FLOAT(nx), INT_TO_FLOAT(ny), INT_TO_FLOAT(nz) );
}

void GLAPIENTRY
_mesa_Normal3s( GLshort nx, GLshort ny, GLshort nz )
{
   NORMAL( SHORT_TO_FLOAT(nx), SHORT_TO_FLOAT(ny), SHORT_TO_FLOAT(nz) );
}

void GLAPIENTRY
_mesa_Normal3bv( const GLbyte *v )
{
   NORMAL( BYTE_TO_FLOAT(v[0]), BYTE_TO_FLOAT(v[1]), BYTE_TO_FLOAT(v[2]) );
}

void GLAPIENTRY
_mesa_Normal3dv( const GLdouble *v )
{
   NORMAL( (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2] );
}

void GLAPIENTRY
_mesa_Normal3iv( const GLint *v )
{
   NORMAL( INT_TO_FLOAT(v[0]), INT_TO_FLOAT(v[1]), INT_TO_FLOAT(v[2]) );
}

void GLAPIENTRY
_mesa_Normal3sv( const GLshort *v )
{
   NORMAL( SHORT_TO_FLOAT(v[0]), SHORT_TO_FLOAT(v[1]), SHORT_TO_FLOAT(v[2]) );
}

void GLAPIENTRY
_mesa_TexCoord1d( GLdouble s )
{
   TEXCOORD1((GLfloat) s);
}

void GLAPIENTRY
_mesa_TexCoord1i( GLint s )
{
   TEXCOORD1((GLfloat) s);
}

void GLAPIENTRY
_mesa_TexCoord1s( GLshort s )
{
   TEXCOORD1((GLfloat) s);
}

void GLAPIENTRY
_mesa_TexCoord2d( GLdouble s, GLdouble t )
{
   TEXCOORD2((GLfloat) s,(GLfloat) t);
}

void GLAPIENTRY
_mesa_TexCoord2s( GLshort s, GLshort t )
{
   TEXCOORD2((GLfloat) s,(GLfloat) t);
}

void GLAPIENTRY
_mesa_TexCoord2i( GLint s, GLint t )
{
   TEXCOORD2((GLfloat) s,(GLfloat) t);
}

void GLAPIENTRY
_mesa_TexCoord3d( GLdouble s, GLdouble t, GLdouble r )
{
   TEXCOORD3((GLfloat) s,(GLfloat) t,(GLfloat) r);
}

void GLAPIENTRY
_mesa_TexCoord3i( GLint s, GLint t, GLint r )
{
   TEXCOORD3((GLfloat) s,(GLfloat) t,(GLfloat) r);
}

void GLAPIENTRY
_mesa_TexCoord3s( GLshort s, GLshort t, GLshort r )
{
   TEXCOORD3((GLfloat) s,(GLfloat) t,(GLfloat) r);
}

void GLAPIENTRY
_mesa_TexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q )
{
   TEXCOORD4((GLfloat) s,(GLfloat) t,(GLfloat) r,(GLfloat) q);
}

void GLAPIENTRY
_mesa_TexCoord4i( GLint s, GLint t, GLint r, GLint q )
{
   TEXCOORD4((GLfloat) s,(GLfloat) t,(GLfloat) r,(GLfloat) q);
}

void GLAPIENTRY
_mesa_TexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q )
{
   TEXCOORD4((GLfloat) s,(GLfloat) t,(GLfloat) r,(GLfloat) q);
}

void GLAPIENTRY
_mesa_TexCoord1dv( const GLdouble *v )
{
   TEXCOORD1((GLfloat) v[0]);
}

void GLAPIENTRY
_mesa_TexCoord1iv( const GLint *v )
{
   TEXCOORD1((GLfloat) v[0]);
}

void GLAPIENTRY
_mesa_TexCoord1sv( const GLshort *v )
{
   TEXCOORD1((GLfloat) v[0]);
}

void GLAPIENTRY
_mesa_TexCoord2dv( const GLdouble *v )
{
   TEXCOORD2((GLfloat) v[0],(GLfloat) v[1]);
}

void GLAPIENTRY
_mesa_TexCoord2iv( const GLint *v )
{
   TEXCOORD2((GLfloat) v[0],(GLfloat) v[1]);
}

void GLAPIENTRY
_mesa_TexCoord2sv( const GLshort *v )
{
   TEXCOORD2((GLfloat) v[0],(GLfloat) v[1]);
}

void GLAPIENTRY
_mesa_TexCoord3dv( const GLdouble *v )
{
   TEXCOORD3((GLfloat) v[0],(GLfloat) v[1],(GLfloat) v[2]);
}

void GLAPIENTRY
_mesa_TexCoord3iv( const GLint *v )
{
   TEXCOORD3((GLfloat) v[0],(GLfloat) v[1],(GLfloat) v[2]);
}

void GLAPIENTRY
_mesa_TexCoord3sv( const GLshort *v )
{
   TEXCOORD3((GLfloat) v[0],(GLfloat) v[1],(GLfloat) v[2]);
}

void GLAPIENTRY
_mesa_TexCoord4dv( const GLdouble *v )
{
   TEXCOORD4((GLfloat) v[0],(GLfloat) v[1],(GLfloat) v[2],(GLfloat) v[3]);
}

void GLAPIENTRY
_mesa_TexCoord4iv( const GLint *v )
{
   TEXCOORD4((GLfloat) v[0],(GLfloat) v[1],(GLfloat) v[2],(GLfloat) v[3]);
}

void GLAPIENTRY
_mesa_TexCoord4sv( const GLshort *v )
{
   TEXCOORD4((GLfloat) v[0],(GLfloat) v[1],(GLfloat) v[2],(GLfloat) v[3]);
}

void GLAPIENTRY
_mesa_Vertex2d( GLdouble x, GLdouble y )
{
   VERTEX2( (GLfloat) x, (GLfloat) y );
}

void GLAPIENTRY
_mesa_Vertex2i( GLint x, GLint y )
{
   VERTEX2( (GLfloat) x, (GLfloat) y );
}

void GLAPIENTRY
_mesa_Vertex2s( GLshort x, GLshort y )
{
   VERTEX2( (GLfloat) x, (GLfloat) y );
}

void GLAPIENTRY
_mesa_Vertex3d( GLdouble x, GLdouble y, GLdouble z )
{
   VERTEX3( (GLfloat) x, (GLfloat) y, (GLfloat) z );
}

void GLAPIENTRY
_mesa_Vertex3i( GLint x, GLint y, GLint z )
{
   VERTEX3( (GLfloat) x, (GLfloat) y, (GLfloat) z );
}

void GLAPIENTRY
_mesa_Vertex3s( GLshort x, GLshort y, GLshort z )
{
   VERTEX3( (GLfloat) x, (GLfloat) y, (GLfloat) z );
}

void GLAPIENTRY
_mesa_Vertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w )
{
   VERTEX4( (GLfloat) x, (GLfloat) y, (GLfloat) z, (GLfloat) w );
}

void GLAPIENTRY
_mesa_Vertex4i( GLint x, GLint y, GLint z, GLint w )
{
   VERTEX4( (GLfloat) x, (GLfloat) y, (GLfloat) z, (GLfloat) w );
}

void GLAPIENTRY
_mesa_Vertex4s( GLshort x, GLshort y, GLshort z, GLshort w )
{
   VERTEX4( (GLfloat) x, (GLfloat) y, (GLfloat) z, (GLfloat) w );
}

void GLAPIENTRY
_mesa_Vertex2dv( const GLdouble *v )
{
   VERTEX2( (GLfloat) v[0], (GLfloat) v[1] );
}

void GLAPIENTRY
_mesa_Vertex2iv( const GLint *v )
{
   VERTEX2( (GLfloat) v[0], (GLfloat) v[1] );
}

void GLAPIENTRY
_mesa_Vertex2sv( const GLshort *v )
{
   VERTEX2( (GLfloat) v[0], (GLfloat) v[1] );
}

void GLAPIENTRY
_mesa_Vertex3dv( const GLdouble *v )
{
   VERTEX3( (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2] );
}

void GLAPIENTRY
_mesa_Vertex3iv( const GLint *v )
{
   VERTEX3( (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2] );
}

void GLAPIENTRY
_mesa_Vertex3sv( const GLshort *v )
{
   VERTEX3( (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2] );
}

void GLAPIENTRY
_mesa_Vertex4dv( const GLdouble *v )
{
   VERTEX4( (GLfloat) v[0], (GLfloat) v[1],
	    (GLfloat) v[2], (GLfloat) v[3] );
}

void GLAPIENTRY
_mesa_Vertex4iv( const GLint *v )
{
   VERTEX4( (GLfloat) v[0], (GLfloat) v[1],
	    (GLfloat) v[2], (GLfloat) v[3] );
}

void GLAPIENTRY
_mesa_Vertex4sv( const GLshort *v )
{
   VERTEX4( (GLfloat) v[0], (GLfloat) v[1],
	    (GLfloat) v[2], (GLfloat) v[3] );
}

void GLAPIENTRY
_mesa_MultiTexCoord1d(GLenum target, GLdouble s)
{
   MULTI_TEXCOORD1( target, (GLfloat) s );
}

void GLAPIENTRY
_mesa_MultiTexCoord1dv(GLenum target, const GLdouble *v)
{
   MULTI_TEXCOORD1( target, (GLfloat) v[0] );
}

void GLAPIENTRY
_mesa_MultiTexCoord1i(GLenum target, GLint s)
{
   MULTI_TEXCOORD1( target, (GLfloat) s );
}

void GLAPIENTRY
_mesa_MultiTexCoord1iv(GLenum target, const GLint *v)
{
   MULTI_TEXCOORD1( target, (GLfloat) v[0] );
}

void GLAPIENTRY
_mesa_MultiTexCoord1s(GLenum target, GLshort s)
{
   MULTI_TEXCOORD1( target, (GLfloat) s );
}

void GLAPIENTRY
_mesa_MultiTexCoord1sv(GLenum target, const GLshort *v)
{
   MULTI_TEXCOORD1( target, (GLfloat) v[0] );
}

void GLAPIENTRY
_mesa_MultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
{
   MULTI_TEXCOORD2( target, (GLfloat) s, (GLfloat) t );
}

void GLAPIENTRY
_mesa_MultiTexCoord2dv(GLenum target, const GLdouble *v)
{
   MULTI_TEXCOORD2( target, (GLfloat) v[0], (GLfloat) v[1] );
}

void GLAPIENTRY
_mesa_MultiTexCoord2i(GLenum target, GLint s, GLint t)
{
   MULTI_TEXCOORD2( target, (GLfloat) s, (GLfloat) t );
}

void GLAPIENTRY
_mesa_MultiTexCoord2iv(GLenum target, const GLint *v)
{
   MULTI_TEXCOORD2( target, (GLfloat) v[0], (GLfloat) v[1] );
}

void GLAPIENTRY
_mesa_MultiTexCoord2s(GLenum target, GLshort s, GLshort t)
{
   MULTI_TEXCOORD2( target, (GLfloat) s, (GLfloat) t );
}

void GLAPIENTRY
_mesa_MultiTexCoord2sv(GLenum target, const GLshort *v)
{
   MULTI_TEXCOORD2( target, (GLfloat) v[0], (GLfloat) v[1] );
}

void GLAPIENTRY
_mesa_MultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
   MULTI_TEXCOORD3( target, (GLfloat) s, (GLfloat) t, (GLfloat) r );
}

void GLAPIENTRY
_mesa_MultiTexCoord3dv(GLenum target, const GLdouble *v)
{
   MULTI_TEXCOORD3( target, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2] );
}

void GLAPIENTRY
_mesa_MultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
{
   MULTI_TEXCOORD3( target, (GLfloat) s, (GLfloat) t, (GLfloat) r );
}

void GLAPIENTRY
_mesa_MultiTexCoord3iv(GLenum target, const GLint *v)
{
   MULTI_TEXCOORD3( target, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2] );
}

void GLAPIENTRY
_mesa_MultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
{
   MULTI_TEXCOORD3( target, (GLfloat) s, (GLfloat) t, (GLfloat) r );
}

void GLAPIENTRY
_mesa_MultiTexCoord3sv(GLenum target, const GLshort *v)
{
   MULTI_TEXCOORD3( target, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2] );
}

void GLAPIENTRY
_mesa_MultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
   MULTI_TEXCOORD4( target, (GLfloat) s, (GLfloat) t, 
		    (GLfloat) r, (GLfloat) q );
}

void GLAPIENTRY
_mesa_MultiTexCoord4dv(GLenum target, const GLdouble *v)
{
   MULTI_TEXCOORD4( target, (GLfloat) v[0], (GLfloat) v[1], 
		    (GLfloat) v[2], (GLfloat) v[3] );
}

void GLAPIENTRY
_mesa_MultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
   MULTI_TEXCOORD4( target, (GLfloat) s, (GLfloat) t,
		    (GLfloat) r, (GLfloat) q );
}

void GLAPIENTRY
_mesa_MultiTexCoord4iv(GLenum target, const GLint *v)
{
   MULTI_TEXCOORD4( target, (GLfloat) v[0], (GLfloat) v[1],
		    (GLfloat) v[2], (GLfloat) v[3] );
}

void GLAPIENTRY
_mesa_MultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
   MULTI_TEXCOORD4( target, (GLfloat) s, (GLfloat) t,
		    (GLfloat) r, (GLfloat) q );
}

void GLAPIENTRY
_mesa_MultiTexCoord4sv(GLenum target, const GLshort *v)
{
   MULTI_TEXCOORD4( target, (GLfloat) v[0], (GLfloat) v[1],
		    (GLfloat) v[2], (GLfloat) v[3] );
}

void GLAPIENTRY
_mesa_EvalCoord2dv( const GLdouble *u )
{
   EVALCOORD2( (GLfloat) u[0], (GLfloat) u[1] );
}

void GLAPIENTRY
_mesa_EvalCoord2fv( const GLfloat *u )
{
   EVALCOORD2( u[0], u[1] );
}

void GLAPIENTRY
_mesa_EvalCoord2d( GLdouble u, GLdouble v )
{
   EVALCOORD2( (GLfloat) u, (GLfloat) v );
}

void GLAPIENTRY
_mesa_EvalCoord1dv( const GLdouble *u )
{
   EVALCOORD1( (GLfloat) *u );
}

void GLAPIENTRY
_mesa_EvalCoord1fv( const GLfloat *u )
{
   EVALCOORD1( (GLfloat) *u );
}

void GLAPIENTRY
_mesa_EvalCoord1d( GLdouble u )
{
   EVALCOORD1( (GLfloat) u );
}

void GLAPIENTRY
_mesa_Materialf( GLenum face, GLenum pname, GLfloat param )
{
   GLfloat fparam[4];
   fparam[0] = param;
   MATERIALFV( face, pname, fparam );
}

void GLAPIENTRY
_mesa_Materiali(GLenum face, GLenum pname, GLint param )
{
   GLfloat p = (GLfloat) param;
   MATERIALFV(face, pname, &p);
}

void GLAPIENTRY
_mesa_Materialiv(GLenum face, GLenum pname, const GLint *params )
{
   GLfloat fparam[4];
   switch (pname) {
   case GL_AMBIENT:
   case GL_DIFFUSE:
   case GL_SPECULAR:
   case GL_EMISSION:
   case GL_AMBIENT_AND_DIFFUSE:
      fparam[0] = INT_TO_FLOAT( params[0] );
      fparam[1] = INT_TO_FLOAT( params[1] );
      fparam[2] = INT_TO_FLOAT( params[2] );
      fparam[3] = INT_TO_FLOAT( params[3] );
      break;
   case GL_SHININESS:
      fparam[0] = (GLfloat) params[0];
      break;
   case GL_COLOR_INDEXES:
      fparam[0] = (GLfloat) params[0];
      fparam[1] = (GLfloat) params[1];
      fparam[2] = (GLfloat) params[2];
      break;
   default:
      ;
   }
   MATERIALFV(face, pname, fparam);
}


void GLAPIENTRY
_mesa_Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
   RECTF((GLfloat) x1, (GLfloat) y1, (GLfloat) x2, (GLfloat) y2);
}

void GLAPIENTRY
_mesa_Rectdv(const GLdouble *v1, const GLdouble *v2)
{
   RECTF((GLfloat) v1[0], (GLfloat) v1[1], (GLfloat) v2[0], (GLfloat) v2[1]);
}

void GLAPIENTRY
_mesa_Rectfv(const GLfloat *v1, const GLfloat *v2)
{
   RECTF(v1[0], v1[1], v2[0], v2[1]);
}

void GLAPIENTRY
_mesa_Recti(GLint x1, GLint y1, GLint x2, GLint y2)
{
   RECTF((GLfloat) x1, (GLfloat) y1, (GLfloat) x2, (GLfloat) y2);
}

void GLAPIENTRY
_mesa_Rectiv(const GLint *v1, const GLint *v2)
{
   RECTF((GLfloat) v1[0], (GLfloat) v1[1], (GLfloat) v2[0], (GLfloat) v2[1]);
}

void GLAPIENTRY
_mesa_Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
   RECTF((GLfloat) x1, (GLfloat) y1, (GLfloat) x2, (GLfloat) y2);
}

void GLAPIENTRY
_mesa_Rectsv(const GLshort *v1, const GLshort *v2)
{
   RECTF((GLfloat) v1[0], (GLfloat) v1[1], (GLfloat) v2[0], (GLfloat) v2[1]);
}

void GLAPIENTRY
_mesa_SecondaryColor3b( GLbyte red, GLbyte green, GLbyte blue )
{
   SECONDARYCOLORF( BYTE_TO_FLOAT(red),
		    BYTE_TO_FLOAT(green),
		    BYTE_TO_FLOAT(blue) );
}

void GLAPIENTRY
_mesa_SecondaryColor3d( GLdouble red, GLdouble green, GLdouble blue )
{
   SECONDARYCOLORF( (GLfloat) red, (GLfloat) green, (GLfloat) blue );
}

void GLAPIENTRY
_mesa_SecondaryColor3i( GLint red, GLint green, GLint blue )
{
   SECONDARYCOLORF( INT_TO_FLOAT(red),
		    INT_TO_FLOAT(green),
		    INT_TO_FLOAT(blue));
}

void GLAPIENTRY
_mesa_SecondaryColor3s( GLshort red, GLshort green, GLshort blue )
{
   SECONDARYCOLORF(SHORT_TO_FLOAT(red),
                   SHORT_TO_FLOAT(green),
                   SHORT_TO_FLOAT(blue));
}

void GLAPIENTRY
_mesa_SecondaryColor3ui( GLuint red, GLuint green, GLuint blue )
{
   SECONDARYCOLORF(UINT_TO_FLOAT(red),
                   UINT_TO_FLOAT(green),
                   UINT_TO_FLOAT(blue));
}

void GLAPIENTRY
_mesa_SecondaryColor3us( GLushort red, GLushort green, GLushort blue )
{
   SECONDARYCOLORF(USHORT_TO_FLOAT(red),
                   USHORT_TO_FLOAT(green),
                   USHORT_TO_FLOAT(blue));
}

void GLAPIENTRY
_mesa_SecondaryColor3ub( GLubyte red, GLubyte green, GLubyte blue )
{
   SECONDARYCOLORF(UBYTE_TO_FLOAT(red),
                   UBYTE_TO_FLOAT(green),
                   UBYTE_TO_FLOAT(blue));
}

void GLAPIENTRY
_mesa_SecondaryColor3bv( const GLbyte *v )
{
   SECONDARYCOLORF(BYTE_TO_FLOAT(v[0]),
                   BYTE_TO_FLOAT(v[1]),
                   BYTE_TO_FLOAT(v[2]));
}

void GLAPIENTRY
_mesa_SecondaryColor3dv( const GLdouble *v )
{
   SECONDARYCOLORF( (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2] );
}
void GLAPIENTRY
_mesa_SecondaryColor3iv( const GLint *v )
{
   SECONDARYCOLORF(INT_TO_FLOAT(v[0]),
                   INT_TO_FLOAT(v[1]),
                   INT_TO_FLOAT(v[2]));
}

void GLAPIENTRY
_mesa_SecondaryColor3sv( const GLshort *v )
{
   SECONDARYCOLORF(SHORT_TO_FLOAT(v[0]),
                   SHORT_TO_FLOAT(v[1]),
                   SHORT_TO_FLOAT(v[2]));
}

void GLAPIENTRY
_mesa_SecondaryColor3uiv( const GLuint *v )
{
   SECONDARYCOLORF(UINT_TO_FLOAT(v[0]),
                   UINT_TO_FLOAT(v[1]),
                   UINT_TO_FLOAT(v[2]));
}

void GLAPIENTRY
_mesa_SecondaryColor3usv( const GLushort *v )
{
   SECONDARYCOLORF(USHORT_TO_FLOAT(v[0]),
                   USHORT_TO_FLOAT(v[1]),
                   USHORT_TO_FLOAT(v[2]));
}

void GLAPIENTRY
_mesa_SecondaryColor3ubv( const GLubyte *v )
{
   SECONDARYCOLORF(UBYTE_TO_FLOAT(v[0]),
                   UBYTE_TO_FLOAT(v[1]),
                   UBYTE_TO_FLOAT(v[2]));
}


/*
 * GL_NV_vertex_program:
 * Always loop-back to one of the VertexAttrib[1234]f[v]NV functions.
 * Note that attribute indexes DO alias conventional vertex attributes.
 */

void GLAPIENTRY
_mesa_VertexAttrib1sNV(GLuint index, GLshort x)
{
   ATTRIB1NV(index, (GLfloat) x);
}

void GLAPIENTRY
_mesa_VertexAttrib1dNV(GLuint index, GLdouble x)
{
   ATTRIB1NV(index, (GLfloat) x);
}

void GLAPIENTRY
_mesa_VertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
{
   ATTRIB2NV(index, (GLfloat) x, y);
}

void GLAPIENTRY
_mesa_VertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
{
   ATTRIB2NV(index, (GLfloat) x, (GLfloat) y);
}

void GLAPIENTRY
_mesa_VertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
{
   ATTRIB3NV(index, (GLfloat) x, (GLfloat) y, (GLfloat) z);
}

void GLAPIENTRY
_mesa_VertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
   ATTRIB4NV(index, (GLfloat) x, (GLfloat) y, (GLfloat) z, 1.0F);
}

void GLAPIENTRY
_mesa_VertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
   ATTRIB4NV(index, (GLfloat) x, (GLfloat) y, (GLfloat) z, (GLfloat) w);
}

void GLAPIENTRY
_mesa_VertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   ATTRIB4NV(index, (GLfloat) x, (GLfloat) y, (GLfloat) z, (GLfloat) w);
}

void GLAPIENTRY
_mesa_VertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
   ATTRIB4NV(index, UBYTE_TO_FLOAT(x), UBYTE_TO_FLOAT(y),
	UBYTE_TO_FLOAT(z), UBYTE_TO_FLOAT(w));
}

void GLAPIENTRY
_mesa_VertexAttrib1svNV(GLuint index, const GLshort *v)
{
   ATTRIB1NV(index, (GLfloat) v[0]);
}

void GLAPIENTRY
_mesa_VertexAttrib1dvNV(GLuint index, const GLdouble *v)
{
   ATTRIB1NV(index, (GLfloat) v[0]);
}

void GLAPIENTRY
_mesa_VertexAttrib2svNV(GLuint index, const GLshort *v)
{
   ATTRIB2NV(index, (GLfloat) v[0], (GLfloat) v[1]);
}

void GLAPIENTRY
_mesa_VertexAttrib2dvNV(GLuint index, const GLdouble *v)
{
   ATTRIB2NV(index, (GLfloat) v[0], (GLfloat) v[1]);
}

void GLAPIENTRY
_mesa_VertexAttrib3svNV(GLuint index, const GLshort *v)
{
   ATTRIB3NV(index, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2]);
}

void GLAPIENTRY
_mesa_VertexAttrib3dvNV(GLuint index, const GLdouble *v)
{
   ATTRIB3NV(index, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2]);
}

void GLAPIENTRY
_mesa_VertexAttrib4svNV(GLuint index, const GLshort *v)
{
   ATTRIB4NV(index, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2], 
	  (GLfloat)v[3]);
}

void GLAPIENTRY
_mesa_VertexAttrib4dvNV(GLuint index, const GLdouble *v)
{
   ATTRIB4NV(index, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2], (GLfloat) v[3]);
}

void GLAPIENTRY
_mesa_VertexAttrib4ubvNV(GLuint index, const GLubyte *v)
{
   ATTRIB4NV(index, UBYTE_TO_FLOAT(v[0]), UBYTE_TO_FLOAT(v[1]),
          UBYTE_TO_FLOAT(v[2]), UBYTE_TO_FLOAT(v[3]));
}


void GLAPIENTRY
_mesa_VertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v)
{
   GLint i;
   for (i = n - 1; i >= 0; i--)
      _mesa_VertexAttrib1svNV(index + i, v + i);
}

void GLAPIENTRY
_mesa_VertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   GLint i;
   for (i = n - 1; i >= 0; i--)
      ATTRIB1NV(index + i, v[i]);
}

void GLAPIENTRY
_mesa_VertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   GLint i;
   for (i = n - 1; i >= 0; i--)
      _mesa_VertexAttrib1dvNV(index + i, v + i);
}

void GLAPIENTRY
_mesa_VertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v)
{
   GLint i;
   for (i = n - 1; i >= 0; i--)
      _mesa_VertexAttrib2svNV(index + i, v + 2 * i);
}

void GLAPIENTRY
_mesa_VertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   GLint i;
   for (i = n - 1; i >= 0; i--)
      ATTRIB2NV(index + i, v[2 * i], v[2 * i + 1]);
}

void GLAPIENTRY
_mesa_VertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   GLint i;
   for (i = n - 1; i >= 0; i--)
      _mesa_VertexAttrib2dvNV(index + i, v + 2 * i);
}

void GLAPIENTRY
_mesa_VertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v)
{
   GLint i;
   for (i = n - 1; i >= 0; i--)
      _mesa_VertexAttrib3svNV(index + i, v + 3 * i);
}

void GLAPIENTRY
_mesa_VertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   GLint i;
   for (i = n - 1; i >= 0; i--)
      ATTRIB3NV(index + i, v[3 * i], v[3 * i + 1], v[3 * i + 2]);
}

void GLAPIENTRY
_mesa_VertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   GLint i;
   for (i = n - 1; i >= 0; i--)
      _mesa_VertexAttrib3dvNV(index + i, v + 3 * i);
}

void GLAPIENTRY
_mesa_VertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v)
{
   GLint i;
   for (i = n - 1; i >= 0; i--)
      _mesa_VertexAttrib4svNV(index + i, v + 4 * i);
}

void GLAPIENTRY
_mesa_VertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   GLint i;
   for (i = n - 1; i >= 0; i--)
      ATTRIB4NV(index + i, v[4 * i], v[4 * i + 1], v[4 * i + 2], v[4 * i + 3]);
}

void GLAPIENTRY
_mesa_VertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   GLint i;
   for (i = n - 1; i >= 0; i--)
      _mesa_VertexAttrib4dvNV(index + i, v + 4 * i);
}

void GLAPIENTRY
_mesa_VertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v)
{
   GLint i;
   for (i = n - 1; i >= 0; i--)
      _mesa_VertexAttrib4ubvNV(index + i, v + 4 * i);
}


/*
 * GL_ARB_vertex_program
 * Always loop-back to one of the VertexAttrib[1234]f[v]ARB functions.
 * Note that attribute indexes do NOT alias conventional attributes.
 */

void GLAPIENTRY
_mesa_VertexAttrib1s(GLuint index, GLshort x)
{
   ATTRIB1ARB(index, (GLfloat) x);
}

void GLAPIENTRY
_mesa_VertexAttrib1d(GLuint index, GLdouble x)
{
   ATTRIB1ARB(index, (GLfloat) x);
}

void GLAPIENTRY
_mesa_VertexAttrib2s(GLuint index, GLshort x, GLshort y)
{
   ATTRIB2ARB(index, (GLfloat) x, y);
}

void GLAPIENTRY
_mesa_VertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
{
   ATTRIB2ARB(index, (GLfloat) x, (GLfloat) y);
}

void GLAPIENTRY
_mesa_VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
{
   ATTRIB3ARB(index, (GLfloat) x, (GLfloat) y, (GLfloat) z);
}

void GLAPIENTRY
_mesa_VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
   ATTRIB4ARB(index, (GLfloat) x, (GLfloat) y, (GLfloat) z, 1.0F);
}

void GLAPIENTRY
_mesa_VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
   ATTRIB4ARB(index, (GLfloat) x, (GLfloat) y, (GLfloat) z, (GLfloat) w);
}

void GLAPIENTRY
_mesa_VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   ATTRIB4ARB(index, (GLfloat) x, (GLfloat) y, (GLfloat) z, (GLfloat) w);
}

void GLAPIENTRY
_mesa_VertexAttrib1sv(GLuint index, const GLshort *v)
{
   ATTRIB1ARB(index, (GLfloat) v[0]);
}

void GLAPIENTRY
_mesa_VertexAttrib1dv(GLuint index, const GLdouble *v)
{
   ATTRIB1ARB(index, (GLfloat) v[0]);
}

void GLAPIENTRY
_mesa_VertexAttrib2sv(GLuint index, const GLshort *v)
{
   ATTRIB2ARB(index, (GLfloat) v[0], (GLfloat) v[1]);
}

void GLAPIENTRY
_mesa_VertexAttrib2dv(GLuint index, const GLdouble *v)
{
   ATTRIB2ARB(index, (GLfloat) v[0], (GLfloat) v[1]);
}

void GLAPIENTRY
_mesa_VertexAttrib3sv(GLuint index, const GLshort *v)
{
   ATTRIB3ARB(index, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2]);
}

void GLAPIENTRY
_mesa_VertexAttrib3dv(GLuint index, const GLdouble *v)
{
   ATTRIB3ARB(index, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2]);
}

void GLAPIENTRY
_mesa_VertexAttrib4sv(GLuint index, const GLshort *v)
{
   ATTRIB4ARB(index, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2], 
	  (GLfloat)v[3]);
}

void GLAPIENTRY
_mesa_VertexAttrib4dv(GLuint index, const GLdouble *v)
{
   ATTRIB4ARB(index, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2], (GLfloat) v[3]);
}

void GLAPIENTRY
_mesa_VertexAttrib4bv(GLuint index, const GLbyte * v)
{
   ATTRIB4ARB(index, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2], (GLfloat) v[3]);
}

void GLAPIENTRY
_mesa_VertexAttrib4iv(GLuint index, const GLint * v)
{
   ATTRIB4ARB(index, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2], (GLfloat) v[3]);
}

void GLAPIENTRY
_mesa_VertexAttrib4ubv(GLuint index, const GLubyte * v)
{
   ATTRIB4ARB(index, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2], (GLfloat) v[3]);
}

void GLAPIENTRY
_mesa_VertexAttrib4usv(GLuint index, const GLushort * v)
{
   ATTRIB4ARB(index, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2], (GLfloat) v[3]);
}

void GLAPIENTRY
_mesa_VertexAttrib4uiv(GLuint index, const GLuint * v)
{
   ATTRIB4ARB(index, (GLfloat) v[0], (GLfloat) v[1], (GLfloat) v[2], (GLfloat) v[3]);
}

void GLAPIENTRY
_mesa_VertexAttrib4Nbv(GLuint index, const GLbyte * v)
{
   ATTRIB4ARB(index, BYTE_TO_FLOAT(v[0]), BYTE_TO_FLOAT(v[1]),
          BYTE_TO_FLOAT(v[2]), BYTE_TO_FLOAT(v[3]));
}

void GLAPIENTRY
_mesa_VertexAttrib4Nsv(GLuint index, const GLshort * v)
{
   ATTRIB4ARB(index, SHORT_TO_FLOAT(v[0]), SHORT_TO_FLOAT(v[1]),
          SHORT_TO_FLOAT(v[2]), SHORT_TO_FLOAT(v[3]));
}

void GLAPIENTRY
_mesa_VertexAttrib4Niv(GLuint index, const GLint * v)
{
   ATTRIB4ARB(index, INT_TO_FLOAT(v[0]), INT_TO_FLOAT(v[1]),
          INT_TO_FLOAT(v[2]), INT_TO_FLOAT(v[3]));
}

void GLAPIENTRY
_mesa_VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
   ATTRIB4ARB(index, UBYTE_TO_FLOAT(x), UBYTE_TO_FLOAT(y),
              UBYTE_TO_FLOAT(z), UBYTE_TO_FLOAT(w));
}

void GLAPIENTRY
_mesa_VertexAttrib4Nubv(GLuint index, const GLubyte * v)
{
   ATTRIB4ARB(index, UBYTE_TO_FLOAT(v[0]), UBYTE_TO_FLOAT(v[1]),
          UBYTE_TO_FLOAT(v[2]), UBYTE_TO_FLOAT(v[3]));
}

void GLAPIENTRY
_mesa_VertexAttrib4Nusv(GLuint index, const GLushort * v)
{
   ATTRIB4ARB(index, USHORT_TO_FLOAT(v[0]), USHORT_TO_FLOAT(v[1]),
          USHORT_TO_FLOAT(v[2]), USHORT_TO_FLOAT(v[3]));
}

void GLAPIENTRY
_mesa_VertexAttrib4Nuiv(GLuint index, const GLuint * v)
{
   ATTRIB4ARB(index, UINT_TO_FLOAT(v[0]), UINT_TO_FLOAT(v[1]),
          UINT_TO_FLOAT(v[2]), UINT_TO_FLOAT(v[3]));
}



/**
 * GL_EXT_gpu_shader / GL 3.0 signed/unsigned integer-valued attributes.
 * Note that attribute indexes do NOT alias conventional attributes.
 */

void GLAPIENTRY
_mesa_VertexAttribI1iv(GLuint index, const GLint *v)
{
   ATTRIBI_1I(index, v[0]);
}

void GLAPIENTRY
_mesa_VertexAttribI1uiv(GLuint index, const GLuint *v)
{
   ATTRIBI_1UI(index, v[0]);
}

void GLAPIENTRY
_mesa_VertexAttribI4bv(GLuint index, const GLbyte *v)
{
   ATTRIBI_4I(index, v[0], v[1], v[2], v[3]);
}

void GLAPIENTRY
_mesa_VertexAttribI4sv(GLuint index, const GLshort *v)
{
   ATTRIBI_4I(index, v[0], v[1], v[2], v[3]);
}

void GLAPIENTRY
_mesa_VertexAttribI4ubv(GLuint index, const GLubyte *v)
{
   ATTRIBI_4UI(index, v[0], v[1], v[2], v[3]);
}

void GLAPIENTRY
_mesa_VertexAttribI4usv(GLuint index, const GLushort *v)
{
   ATTRIBI_4UI(index, v[0], v[1], v[2], v[3]);
}




/*
 * This code never registers handlers for any of the entry points
 * listed in vtxfmt.h.
 */
void
_mesa_loopback_init_api_table(const struct gl_context *ctx,
                              struct _glapi_table *dest)
{
   if (ctx->API != API_OPENGL_CORE && ctx->API != API_OPENGLES2) {
      SET_Color4ub(dest, _mesa_Color4ub);
      SET_Materialf(dest, _mesa_Materialf);
   }
   if (ctx->API == API_OPENGL_COMPAT) {
      SET_Color3b(dest, _mesa_Color3b);
      SET_Color3d(dest, _mesa_Color3d);
      SET_Color3i(dest, _mesa_Color3i);
      SET_Color3s(dest, _mesa_Color3s);
      SET_Color3ui(dest, _mesa_Color3ui);
      SET_Color3us(dest, _mesa_Color3us);
      SET_Color3ub(dest, _mesa_Color3ub);
      SET_Color4b(dest, _mesa_Color4b);
      SET_Color4d(dest, _mesa_Color4d);
      SET_Color4i(dest, _mesa_Color4i);
      SET_Color4s(dest, _mesa_Color4s);
      SET_Color4ui(dest, _mesa_Color4ui);
      SET_Color4us(dest, _mesa_Color4us);
      SET_Color3bv(dest, _mesa_Color3bv);
      SET_Color3dv(dest, _mesa_Color3dv);
      SET_Color3iv(dest, _mesa_Color3iv);
      SET_Color3sv(dest, _mesa_Color3sv);
      SET_Color3uiv(dest, _mesa_Color3uiv);
      SET_Color3usv(dest, _mesa_Color3usv);
      SET_Color3ubv(dest, _mesa_Color3ubv);
      SET_Color4bv(dest, _mesa_Color4bv);
      SET_Color4dv(dest, _mesa_Color4dv);
      SET_Color4iv(dest, _mesa_Color4iv);
      SET_Color4sv(dest, _mesa_Color4sv);
      SET_Color4uiv(dest, _mesa_Color4uiv);
      SET_Color4usv(dest, _mesa_Color4usv);
      SET_Color4ubv(dest, _mesa_Color4ubv);

      SET_SecondaryColor3b(dest, _mesa_SecondaryColor3b);
      SET_SecondaryColor3d(dest, _mesa_SecondaryColor3d);
      SET_SecondaryColor3i(dest, _mesa_SecondaryColor3i);
      SET_SecondaryColor3s(dest, _mesa_SecondaryColor3s);
      SET_SecondaryColor3ui(dest, _mesa_SecondaryColor3ui);
      SET_SecondaryColor3us(dest, _mesa_SecondaryColor3us);
      SET_SecondaryColor3ub(dest, _mesa_SecondaryColor3ub);
      SET_SecondaryColor3bv(dest, _mesa_SecondaryColor3bv);
      SET_SecondaryColor3dv(dest, _mesa_SecondaryColor3dv);
      SET_SecondaryColor3iv(dest, _mesa_SecondaryColor3iv);
      SET_SecondaryColor3sv(dest, _mesa_SecondaryColor3sv);
      SET_SecondaryColor3uiv(dest, _mesa_SecondaryColor3uiv);
      SET_SecondaryColor3usv(dest, _mesa_SecondaryColor3usv);
      SET_SecondaryColor3ubv(dest, _mesa_SecondaryColor3ubv);
      
      SET_EdgeFlagv(dest, _mesa_EdgeFlagv);

      SET_Indexd(dest, _mesa_Indexd);
      SET_Indexi(dest, _mesa_Indexi);
      SET_Indexs(dest, _mesa_Indexs);
      SET_Indexub(dest, _mesa_Indexub);
      SET_Indexdv(dest, _mesa_Indexdv);
      SET_Indexiv(dest, _mesa_Indexiv);
      SET_Indexsv(dest, _mesa_Indexsv);
      SET_Indexubv(dest, _mesa_Indexubv);
      SET_Normal3b(dest, _mesa_Normal3b);
      SET_Normal3d(dest, _mesa_Normal3d);
      SET_Normal3i(dest, _mesa_Normal3i);
      SET_Normal3s(dest, _mesa_Normal3s);
      SET_Normal3bv(dest, _mesa_Normal3bv);
      SET_Normal3dv(dest, _mesa_Normal3dv);
      SET_Normal3iv(dest, _mesa_Normal3iv);
      SET_Normal3sv(dest, _mesa_Normal3sv);
      SET_TexCoord1d(dest, _mesa_TexCoord1d);
      SET_TexCoord1i(dest, _mesa_TexCoord1i);
      SET_TexCoord1s(dest, _mesa_TexCoord1s);
      SET_TexCoord2d(dest, _mesa_TexCoord2d);
      SET_TexCoord2s(dest, _mesa_TexCoord2s);
      SET_TexCoord2i(dest, _mesa_TexCoord2i);
      SET_TexCoord3d(dest, _mesa_TexCoord3d);
      SET_TexCoord3i(dest, _mesa_TexCoord3i);
      SET_TexCoord3s(dest, _mesa_TexCoord3s);
      SET_TexCoord4d(dest, _mesa_TexCoord4d);
      SET_TexCoord4i(dest, _mesa_TexCoord4i);
      SET_TexCoord4s(dest, _mesa_TexCoord4s);
      SET_TexCoord1dv(dest, _mesa_TexCoord1dv);
      SET_TexCoord1iv(dest, _mesa_TexCoord1iv);
      SET_TexCoord1sv(dest, _mesa_TexCoord1sv);
      SET_TexCoord2dv(dest, _mesa_TexCoord2dv);
      SET_TexCoord2iv(dest, _mesa_TexCoord2iv);
      SET_TexCoord2sv(dest, _mesa_TexCoord2sv);
      SET_TexCoord3dv(dest, _mesa_TexCoord3dv);
      SET_TexCoord3iv(dest, _mesa_TexCoord3iv);
      SET_TexCoord3sv(dest, _mesa_TexCoord3sv);
      SET_TexCoord4dv(dest, _mesa_TexCoord4dv);
      SET_TexCoord4iv(dest, _mesa_TexCoord4iv);
      SET_TexCoord4sv(dest, _mesa_TexCoord4sv);
      SET_Vertex2d(dest, _mesa_Vertex2d);
      SET_Vertex2i(dest, _mesa_Vertex2i);
      SET_Vertex2s(dest, _mesa_Vertex2s);
      SET_Vertex3d(dest, _mesa_Vertex3d);
      SET_Vertex3i(dest, _mesa_Vertex3i);
      SET_Vertex3s(dest, _mesa_Vertex3s);
      SET_Vertex4d(dest, _mesa_Vertex4d);
      SET_Vertex4i(dest, _mesa_Vertex4i);
      SET_Vertex4s(dest, _mesa_Vertex4s);
      SET_Vertex2dv(dest, _mesa_Vertex2dv);
      SET_Vertex2iv(dest, _mesa_Vertex2iv);
      SET_Vertex2sv(dest, _mesa_Vertex2sv);
      SET_Vertex3dv(dest, _mesa_Vertex3dv);
      SET_Vertex3iv(dest, _mesa_Vertex3iv);
      SET_Vertex3sv(dest, _mesa_Vertex3sv);
      SET_Vertex4dv(dest, _mesa_Vertex4dv);
      SET_Vertex4iv(dest, _mesa_Vertex4iv);
      SET_Vertex4sv(dest, _mesa_Vertex4sv);
      SET_MultiTexCoord1d(dest, _mesa_MultiTexCoord1d);
      SET_MultiTexCoord1dv(dest, _mesa_MultiTexCoord1dv);
      SET_MultiTexCoord1i(dest, _mesa_MultiTexCoord1i);
      SET_MultiTexCoord1iv(dest, _mesa_MultiTexCoord1iv);
      SET_MultiTexCoord1s(dest, _mesa_MultiTexCoord1s);
      SET_MultiTexCoord1sv(dest, _mesa_MultiTexCoord1sv);
      SET_MultiTexCoord2d(dest, _mesa_MultiTexCoord2d);
      SET_MultiTexCoord2dv(dest, _mesa_MultiTexCoord2dv);
      SET_MultiTexCoord2i(dest, _mesa_MultiTexCoord2i);
      SET_MultiTexCoord2iv(dest, _mesa_MultiTexCoord2iv);
      SET_MultiTexCoord2s(dest, _mesa_MultiTexCoord2s);
      SET_MultiTexCoord2sv(dest, _mesa_MultiTexCoord2sv);
      SET_MultiTexCoord3d(dest, _mesa_MultiTexCoord3d);
      SET_MultiTexCoord3dv(dest, _mesa_MultiTexCoord3dv);
      SET_MultiTexCoord3i(dest, _mesa_MultiTexCoord3i);
      SET_MultiTexCoord3iv(dest, _mesa_MultiTexCoord3iv);
      SET_MultiTexCoord3s(dest, _mesa_MultiTexCoord3s);
      SET_MultiTexCoord3sv(dest, _mesa_MultiTexCoord3sv);
      SET_MultiTexCoord4d(dest, _mesa_MultiTexCoord4d);
      SET_MultiTexCoord4dv(dest, _mesa_MultiTexCoord4dv);
      SET_MultiTexCoord4i(dest, _mesa_MultiTexCoord4i);
      SET_MultiTexCoord4iv(dest, _mesa_MultiTexCoord4iv);
      SET_MultiTexCoord4s(dest, _mesa_MultiTexCoord4s);
      SET_MultiTexCoord4sv(dest, _mesa_MultiTexCoord4sv);
      SET_EvalCoord2dv(dest, _mesa_EvalCoord2dv);
      SET_EvalCoord2fv(dest, _mesa_EvalCoord2fv);
      SET_EvalCoord2d(dest, _mesa_EvalCoord2d);
      SET_EvalCoord1dv(dest, _mesa_EvalCoord1dv);
      SET_EvalCoord1fv(dest, _mesa_EvalCoord1fv);
      SET_EvalCoord1d(dest, _mesa_EvalCoord1d);
      SET_Materiali(dest, _mesa_Materiali);
      SET_Materialiv(dest, _mesa_Materialiv);
      SET_Rectd(dest, _mesa_Rectd);
      SET_Rectdv(dest, _mesa_Rectdv);
      SET_Rectfv(dest, _mesa_Rectfv);
      SET_Recti(dest, _mesa_Recti);
      SET_Rectiv(dest, _mesa_Rectiv);
      SET_Rects(dest, _mesa_Rects);
      SET_Rectsv(dest, _mesa_Rectsv);
      SET_FogCoordd(dest, _mesa_FogCoordd);
      SET_FogCoorddv(dest, _mesa_FogCoorddv);
   }

   if (ctx->API == API_OPENGL_COMPAT) {
      SET_VertexAttrib1sNV(dest, _mesa_VertexAttrib1sNV);
      SET_VertexAttrib1dNV(dest, _mesa_VertexAttrib1dNV);
      SET_VertexAttrib2sNV(dest, _mesa_VertexAttrib2sNV);
      SET_VertexAttrib2dNV(dest, _mesa_VertexAttrib2dNV);
      SET_VertexAttrib3sNV(dest, _mesa_VertexAttrib3sNV);
      SET_VertexAttrib3dNV(dest, _mesa_VertexAttrib3dNV);
      SET_VertexAttrib4sNV(dest, _mesa_VertexAttrib4sNV);
      SET_VertexAttrib4dNV(dest, _mesa_VertexAttrib4dNV);
      SET_VertexAttrib4ubNV(dest, _mesa_VertexAttrib4ubNV);
      SET_VertexAttrib1svNV(dest, _mesa_VertexAttrib1svNV);
      SET_VertexAttrib1dvNV(dest, _mesa_VertexAttrib1dvNV);
      SET_VertexAttrib2svNV(dest, _mesa_VertexAttrib2svNV);
      SET_VertexAttrib2dvNV(dest, _mesa_VertexAttrib2dvNV);
      SET_VertexAttrib3svNV(dest, _mesa_VertexAttrib3svNV);
      SET_VertexAttrib3dvNV(dest, _mesa_VertexAttrib3dvNV);
      SET_VertexAttrib4svNV(dest, _mesa_VertexAttrib4svNV);
      SET_VertexAttrib4dvNV(dest, _mesa_VertexAttrib4dvNV);
      SET_VertexAttrib4ubvNV(dest, _mesa_VertexAttrib4ubvNV);
      SET_VertexAttribs1svNV(dest, _mesa_VertexAttribs1svNV);
      SET_VertexAttribs1fvNV(dest, _mesa_VertexAttribs1fvNV);
      SET_VertexAttribs1dvNV(dest, _mesa_VertexAttribs1dvNV);
      SET_VertexAttribs2svNV(dest, _mesa_VertexAttribs2svNV);
      SET_VertexAttribs2fvNV(dest, _mesa_VertexAttribs2fvNV);
      SET_VertexAttribs2dvNV(dest, _mesa_VertexAttribs2dvNV);
      SET_VertexAttribs3svNV(dest, _mesa_VertexAttribs3svNV);
      SET_VertexAttribs3fvNV(dest, _mesa_VertexAttribs3fvNV);
      SET_VertexAttribs3dvNV(dest, _mesa_VertexAttribs3dvNV);
      SET_VertexAttribs4svNV(dest, _mesa_VertexAttribs4svNV);
      SET_VertexAttribs4fvNV(dest, _mesa_VertexAttribs4fvNV);
      SET_VertexAttribs4dvNV(dest, _mesa_VertexAttribs4dvNV);
      SET_VertexAttribs4ubvNV(dest, _mesa_VertexAttribs4ubvNV);
   }

   if (_mesa_is_desktop_gl(ctx)) {
      SET_VertexAttrib1s(dest, _mesa_VertexAttrib1s);
      SET_VertexAttrib1d(dest, _mesa_VertexAttrib1d);
      SET_VertexAttrib2s(dest, _mesa_VertexAttrib2s);
      SET_VertexAttrib2d(dest, _mesa_VertexAttrib2d);
      SET_VertexAttrib3s(dest, _mesa_VertexAttrib3s);
      SET_VertexAttrib3d(dest, _mesa_VertexAttrib3d);
      SET_VertexAttrib4s(dest, _mesa_VertexAttrib4s);
      SET_VertexAttrib4d(dest, _mesa_VertexAttrib4d);
      SET_VertexAttrib1sv(dest, _mesa_VertexAttrib1sv);
      SET_VertexAttrib1dv(dest, _mesa_VertexAttrib1dv);
      SET_VertexAttrib2sv(dest, _mesa_VertexAttrib2sv);
      SET_VertexAttrib2dv(dest, _mesa_VertexAttrib2dv);
      SET_VertexAttrib3sv(dest, _mesa_VertexAttrib3sv);
      SET_VertexAttrib3dv(dest, _mesa_VertexAttrib3dv);
      SET_VertexAttrib4sv(dest, _mesa_VertexAttrib4sv);
      SET_VertexAttrib4dv(dest, _mesa_VertexAttrib4dv);
      SET_VertexAttrib4Nub(dest, _mesa_VertexAttrib4Nub);
      SET_VertexAttrib4Nubv(dest, _mesa_VertexAttrib4Nubv);
      SET_VertexAttrib4bv(dest, _mesa_VertexAttrib4bv);
      SET_VertexAttrib4iv(dest, _mesa_VertexAttrib4iv);
      SET_VertexAttrib4ubv(dest, _mesa_VertexAttrib4ubv);
      SET_VertexAttrib4usv(dest, _mesa_VertexAttrib4usv);
      SET_VertexAttrib4uiv(dest, _mesa_VertexAttrib4uiv);
      SET_VertexAttrib4Nbv(dest, _mesa_VertexAttrib4Nbv);
      SET_VertexAttrib4Nsv(dest, _mesa_VertexAttrib4Nsv);
      SET_VertexAttrib4Nusv(dest, _mesa_VertexAttrib4Nusv);
      SET_VertexAttrib4Niv(dest, _mesa_VertexAttrib4Niv);
      SET_VertexAttrib4Nuiv(dest, _mesa_VertexAttrib4Nuiv);

      /* GL_EXT_gpu_shader4, GL 3.0 */
      SET_VertexAttribI1iv(dest, _mesa_VertexAttribI1iv);
      SET_VertexAttribI1uiv(dest, _mesa_VertexAttribI1uiv);
      SET_VertexAttribI4bv(dest, _mesa_VertexAttribI4bv);
      SET_VertexAttribI4sv(dest, _mesa_VertexAttribI4sv);
      SET_VertexAttribI4ubv(dest, _mesa_VertexAttribI4ubv);
      SET_VertexAttribI4usv(dest, _mesa_VertexAttribI4usv);
   }
}
@


1.7
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.6
log
@Merge Mesa 9.2.0
@
text
@d4 1
a4 1
 * \author Keith Whitwell <keith@@tungstengraphics.com>
a36 1
#include "glapi/glthread.h"
@


1.5
log
@Merge Mesa 7.10.3
@
text
@a8 1
 * Version:  6.3
d25 4
a28 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d39 1
a39 1
#include "mfeatures.h"
d89 2
a90 5
#if FEATURE_beginend


static void GLAPIENTRY
loopback_Color3b_f( GLbyte red, GLbyte green, GLbyte blue )
d98 2
a99 2
static void GLAPIENTRY
loopback_Color3d_f( GLdouble red, GLdouble green, GLdouble blue )
d104 2
a105 2
static void GLAPIENTRY
loopback_Color3i_f( GLint red, GLint green, GLint blue )
d111 2
a112 2
static void GLAPIENTRY
loopback_Color3s_f( GLshort red, GLshort green, GLshort blue )
d118 2
a119 2
static void GLAPIENTRY
loopback_Color3ui_f( GLuint red, GLuint green, GLuint blue )
d125 2
a126 2
static void GLAPIENTRY
loopback_Color3us_f( GLushort red, GLushort green, GLushort blue )
d132 2
a133 2
static void GLAPIENTRY
loopback_Color3ub_f( GLubyte red, GLubyte green, GLubyte blue )
d140 2
a141 2
static void GLAPIENTRY
loopback_Color3bv_f( const GLbyte *v )
d147 2
a148 2
static void GLAPIENTRY
loopback_Color3dv_f( const GLdouble *v )
d153 2
a154 2
static void GLAPIENTRY
loopback_Color3iv_f( const GLint *v )
d160 2
a161 2
static void GLAPIENTRY
loopback_Color3sv_f( const GLshort *v )
d167 2
a168 2
static void GLAPIENTRY
loopback_Color3uiv_f( const GLuint *v )
d174 2
a175 2
static void GLAPIENTRY
loopback_Color3usv_f( const GLushort *v )
d181 2
a182 2
static void GLAPIENTRY
loopback_Color3ubv_f( const GLubyte *v )
d189 2
a190 2
static void GLAPIENTRY
loopback_Color4b_f( GLbyte red, GLbyte green, GLbyte blue,
d197 2
a198 2
static void GLAPIENTRY
loopback_Color4d_f( GLdouble red, GLdouble green, GLdouble blue,
d204 2
a205 2
static void GLAPIENTRY
loopback_Color4i_f( GLint red, GLint green, GLint blue, GLint alpha )
d211 2
a212 2
static void GLAPIENTRY
loopback_Color4s_f( GLshort red, GLshort green, GLshort blue,
d219 2
a220 2
static void GLAPIENTRY
loopback_Color4ui_f( GLuint red, GLuint green, GLuint blue, GLuint alpha )
d226 2
a227 2
static void GLAPIENTRY
loopback_Color4us_f( GLushort red, GLushort green, GLushort blue, GLushort alpha )
d233 2
a234 2
static void GLAPIENTRY
loopback_Color4ub_f( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha )
d241 2
a242 2
static void GLAPIENTRY
loopback_Color4iv_f( const GLint *v )
d249 2
a250 2
static void GLAPIENTRY
loopback_Color4bv_f( const GLbyte *v )
d256 2
a257 2
static void GLAPIENTRY
loopback_Color4dv_f( const GLdouble *v )
d263 2
a264 2
static void GLAPIENTRY
loopback_Color4sv_f( const GLshort *v)
d271 2
a272 2
static void GLAPIENTRY
loopback_Color4uiv_f( const GLuint *v)
d278 2
a279 2
static void GLAPIENTRY
loopback_Color4usv_f( const GLushort *v)
d285 2
a286 2
static void GLAPIENTRY
loopback_Color4ubv_f( const GLubyte *v)
d293 2
a294 2
static void GLAPIENTRY
loopback_FogCoorddEXT( GLdouble d )
d299 2
a300 2
static void GLAPIENTRY
loopback_FogCoorddvEXT( const GLdouble *v )
d306 2
a307 2
static void GLAPIENTRY
loopback_Indexd( GLdouble c )
d312 2
a313 2
static void GLAPIENTRY
loopback_Indexi( GLint c )
d318 2
a319 2
static void GLAPIENTRY
loopback_Indexs( GLshort c )
d324 2
a325 2
static void GLAPIENTRY
loopback_Indexub( GLubyte c )
d330 2
a331 2
static void GLAPIENTRY
loopback_Indexdv( const GLdouble *c )
d336 2
a337 2
static void GLAPIENTRY
loopback_Indexiv( const GLint *c )
d342 2
a343 2
static void GLAPIENTRY
loopback_Indexsv( const GLshort *c )
d348 2
a349 2
static void GLAPIENTRY
loopback_Indexubv( const GLubyte *c )
d355 2
a356 2
static void GLAPIENTRY
loopback_EdgeFlagv(const GLboolean *flag)
d362 2
a363 2
static void GLAPIENTRY
loopback_Normal3b( GLbyte nx, GLbyte ny, GLbyte nz )
d368 2
a369 2
static void GLAPIENTRY
loopback_Normal3d( GLdouble nx, GLdouble ny, GLdouble nz )
d374 2
a375 2
static void GLAPIENTRY
loopback_Normal3i( GLint nx, GLint ny, GLint nz )
d380 2
a381 2
static void GLAPIENTRY
loopback_Normal3s( GLshort nx, GLshort ny, GLshort nz )
d386 2
a387 2
static void GLAPIENTRY
loopback_Normal3bv( const GLbyte *v )
d392 2
a393 2
static void GLAPIENTRY
loopback_Normal3dv( const GLdouble *v )
d398 2
a399 2
static void GLAPIENTRY
loopback_Normal3iv( const GLint *v )
d404 2
a405 2
static void GLAPIENTRY
loopback_Normal3sv( const GLshort *v )
d410 2
a411 2
static void GLAPIENTRY
loopback_TexCoord1d( GLdouble s )
d416 2
a417 2
static void GLAPIENTRY
loopback_TexCoord1i( GLint s )
d422 2
a423 2
static void GLAPIENTRY
loopback_TexCoord1s( GLshort s )
d428 2
a429 2
static void GLAPIENTRY
loopback_TexCoord2d( GLdouble s, GLdouble t )
d434 2
a435 2
static void GLAPIENTRY
loopback_TexCoord2s( GLshort s, GLshort t )
d440 2
a441 2
static void GLAPIENTRY
loopback_TexCoord2i( GLint s, GLint t )
d446 2
a447 2
static void GLAPIENTRY
loopback_TexCoord3d( GLdouble s, GLdouble t, GLdouble r )
d452 2
a453 2
static void GLAPIENTRY
loopback_TexCoord3i( GLint s, GLint t, GLint r )
d458 2
a459 2
static void GLAPIENTRY
loopback_TexCoord3s( GLshort s, GLshort t, GLshort r )
d464 2
a465 2
static void GLAPIENTRY
loopback_TexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q )
d470 2
a471 2
static void GLAPIENTRY
loopback_TexCoord4i( GLint s, GLint t, GLint r, GLint q )
d476 2
a477 2
static void GLAPIENTRY
loopback_TexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q )
d482 2
a483 2
static void GLAPIENTRY
loopback_TexCoord1dv( const GLdouble *v )
d488 2
a489 2
static void GLAPIENTRY
loopback_TexCoord1iv( const GLint *v )
d494 2
a495 2
static void GLAPIENTRY
loopback_TexCoord1sv( const GLshort *v )
d500 2
a501 2
static void GLAPIENTRY
loopback_TexCoord2dv( const GLdouble *v )
d506 2
a507 2
static void GLAPIENTRY
loopback_TexCoord2iv( const GLint *v )
d512 2
a513 2
static void GLAPIENTRY
loopback_TexCoord2sv( const GLshort *v )
d518 2
a519 2
static void GLAPIENTRY
loopback_TexCoord3dv( const GLdouble *v )
d524 2
a525 2
static void GLAPIENTRY
loopback_TexCoord3iv( const GLint *v )
d530 2
a531 2
static void GLAPIENTRY
loopback_TexCoord3sv( const GLshort *v )
d536 2
a537 2
static void GLAPIENTRY
loopback_TexCoord4dv( const GLdouble *v )
d542 2
a543 2
static void GLAPIENTRY
loopback_TexCoord4iv( const GLint *v )
d548 2
a549 2
static void GLAPIENTRY
loopback_TexCoord4sv( const GLshort *v )
d554 2
a555 2
static void GLAPIENTRY
loopback_Vertex2d( GLdouble x, GLdouble y )
d560 2
a561 2
static void GLAPIENTRY
loopback_Vertex2i( GLint x, GLint y )
d566 2
a567 2
static void GLAPIENTRY
loopback_Vertex2s( GLshort x, GLshort y )
d572 2
a573 2
static void GLAPIENTRY
loopback_Vertex3d( GLdouble x, GLdouble y, GLdouble z )
d578 2
a579 2
static void GLAPIENTRY
loopback_Vertex3i( GLint x, GLint y, GLint z )
d584 2
a585 2
static void GLAPIENTRY
loopback_Vertex3s( GLshort x, GLshort y, GLshort z )
d590 2
a591 2
static void GLAPIENTRY
loopback_Vertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w )
d596 2
a597 2
static void GLAPIENTRY
loopback_Vertex4i( GLint x, GLint y, GLint z, GLint w )
d602 2
a603 2
static void GLAPIENTRY
loopback_Vertex4s( GLshort x, GLshort y, GLshort z, GLshort w )
d608 2
a609 2
static void GLAPIENTRY
loopback_Vertex2dv( const GLdouble *v )
d614 2
a615 2
static void GLAPIENTRY
loopback_Vertex2iv( const GLint *v )
d620 2
a621 2
static void GLAPIENTRY
loopback_Vertex2sv( const GLshort *v )
d626 2
a627 2
static void GLAPIENTRY
loopback_Vertex3dv( const GLdouble *v )
d632 2
a633 2
static void GLAPIENTRY
loopback_Vertex3iv( const GLint *v )
d638 2
a639 2
static void GLAPIENTRY
loopback_Vertex3sv( const GLshort *v )
d644 2
a645 2
static void GLAPIENTRY
loopback_Vertex4dv( const GLdouble *v )
d651 2
a652 2
static void GLAPIENTRY
loopback_Vertex4iv( const GLint *v )
d658 2
a659 2
static void GLAPIENTRY
loopback_Vertex4sv( const GLshort *v )
d665 2
a666 2
static void GLAPIENTRY
loopback_MultiTexCoord1dARB(GLenum target, GLdouble s)
d671 2
a672 2
static void GLAPIENTRY
loopback_MultiTexCoord1dvARB(GLenum target, const GLdouble *v)
d677 2
a678 2
static void GLAPIENTRY
loopback_MultiTexCoord1iARB(GLenum target, GLint s)
d683 2
a684 2
static void GLAPIENTRY
loopback_MultiTexCoord1ivARB(GLenum target, const GLint *v)
d689 2
a690 2
static void GLAPIENTRY
loopback_MultiTexCoord1sARB(GLenum target, GLshort s)
d695 2
a696 2
static void GLAPIENTRY
loopback_MultiTexCoord1svARB(GLenum target, const GLshort *v)
d701 2
a702 2
static void GLAPIENTRY
loopback_MultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
d707 2
a708 2
static void GLAPIENTRY
loopback_MultiTexCoord2dvARB(GLenum target, const GLdouble *v)
d713 2
a714 2
static void GLAPIENTRY
loopback_MultiTexCoord2iARB(GLenum target, GLint s, GLint t)
d719 2
a720 2
static void GLAPIENTRY
loopback_MultiTexCoord2ivARB(GLenum target, const GLint *v)
d725 2
a726 2
static void GLAPIENTRY
loopback_MultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
d731 2
a732 2
static void GLAPIENTRY
loopback_MultiTexCoord2svARB(GLenum target, const GLshort *v)
d737 2
a738 2
static void GLAPIENTRY
loopback_MultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
d743 2
a744 2
static void GLAPIENTRY
loopback_MultiTexCoord3dvARB(GLenum target, const GLdouble *v)
d749 2
a750 2
static void GLAPIENTRY
loopback_MultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
d755 2
a756 2
static void GLAPIENTRY
loopback_MultiTexCoord3ivARB(GLenum target, const GLint *v)
d761 2
a762 2
static void GLAPIENTRY
loopback_MultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
d767 2
a768 2
static void GLAPIENTRY
loopback_MultiTexCoord3svARB(GLenum target, const GLshort *v)
d773 2
a774 2
static void GLAPIENTRY
loopback_MultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
d780 2
a781 2
static void GLAPIENTRY
loopback_MultiTexCoord4dvARB(GLenum target, const GLdouble *v)
d787 2
a788 2
static void GLAPIENTRY
loopback_MultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
d794 2
a795 2
static void GLAPIENTRY
loopback_MultiTexCoord4ivARB(GLenum target, const GLint *v)
d801 2
a802 2
static void GLAPIENTRY
loopback_MultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
d808 2
a809 2
static void GLAPIENTRY
loopback_MultiTexCoord4svARB(GLenum target, const GLshort *v)
d815 2
a816 2
static void GLAPIENTRY
loopback_EvalCoord2dv( const GLdouble *u )
d821 2
a822 2
static void GLAPIENTRY
loopback_EvalCoord2fv( const GLfloat *u )
d827 2
a828 2
static void GLAPIENTRY
loopback_EvalCoord2d( GLdouble u, GLdouble v )
d833 2
a834 2
static void GLAPIENTRY
loopback_EvalCoord1dv( const GLdouble *u )
d839 2
a840 2
static void GLAPIENTRY
loopback_EvalCoord1fv( const GLfloat *u )
d845 2
a846 2
static void GLAPIENTRY
loopback_EvalCoord1d( GLdouble u )
d851 2
a852 2
static void GLAPIENTRY
loopback_Materialf( GLenum face, GLenum pname, GLfloat param )
d859 2
a860 2
static void GLAPIENTRY
loopback_Materiali(GLenum face, GLenum pname, GLint param )
d866 2
a867 2
static void GLAPIENTRY
loopback_Materialiv(GLenum face, GLenum pname, const GLint *params )
d896 2
a897 2
static void GLAPIENTRY
loopback_Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
d902 2
a903 2
static void GLAPIENTRY
loopback_Rectdv(const GLdouble *v1, const GLdouble *v2)
d908 2
a909 2
static void GLAPIENTRY
loopback_Rectfv(const GLfloat *v1, const GLfloat *v2)
d914 2
a915 2
static void GLAPIENTRY
loopback_Recti(GLint x1, GLint y1, GLint x2, GLint y2)
d920 2
a921 2
static void GLAPIENTRY
loopback_Rectiv(const GLint *v1, const GLint *v2)
d926 2
a927 2
static void GLAPIENTRY
loopback_Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
d932 2
a933 2
static void GLAPIENTRY
loopback_Rectsv(const GLshort *v1, const GLshort *v2)
d938 2
a939 2
static void GLAPIENTRY
loopback_SecondaryColor3bEXT_f( GLbyte red, GLbyte green, GLbyte blue )
d946 2
a947 2
static void GLAPIENTRY
loopback_SecondaryColor3dEXT_f( GLdouble red, GLdouble green, GLdouble blue )
d952 2
a953 2
static void GLAPIENTRY
loopback_SecondaryColor3iEXT_f( GLint red, GLint green, GLint blue )
d960 2
a961 2
static void GLAPIENTRY
loopback_SecondaryColor3sEXT_f( GLshort red, GLshort green, GLshort blue )
d968 2
a969 2
static void GLAPIENTRY
loopback_SecondaryColor3uiEXT_f( GLuint red, GLuint green, GLuint blue )
d976 2
a977 2
static void GLAPIENTRY
loopback_SecondaryColor3usEXT_f( GLushort red, GLushort green, GLushort blue )
d984 2
a985 2
static void GLAPIENTRY
loopback_SecondaryColor3ubEXT_f( GLubyte red, GLubyte green, GLubyte blue )
d992 2
a993 2
static void GLAPIENTRY
loopback_SecondaryColor3bvEXT_f( const GLbyte *v )
d1000 2
a1001 2
static void GLAPIENTRY
loopback_SecondaryColor3dvEXT_f( const GLdouble *v )
d1005 2
a1006 2
static void GLAPIENTRY
loopback_SecondaryColor3ivEXT_f( const GLint *v )
d1013 2
a1014 2
static void GLAPIENTRY
loopback_SecondaryColor3svEXT_f( const GLshort *v )
d1021 2
a1022 2
static void GLAPIENTRY
loopback_SecondaryColor3uivEXT_f( const GLuint *v )
d1029 2
a1030 2
static void GLAPIENTRY
loopback_SecondaryColor3usvEXT_f( const GLushort *v )
d1037 2
a1038 2
static void GLAPIENTRY
loopback_SecondaryColor3ubvEXT_f( const GLubyte *v )
d1052 2
a1053 2
static void GLAPIENTRY
loopback_VertexAttrib1sNV(GLuint index, GLshort x)
d1058 2
a1059 2
static void GLAPIENTRY
loopback_VertexAttrib1dNV(GLuint index, GLdouble x)
d1064 2
a1065 2
static void GLAPIENTRY
loopback_VertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
d1070 2
a1071 2
static void GLAPIENTRY
loopback_VertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
d1076 2
a1077 2
static void GLAPIENTRY
loopback_VertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
d1082 2
a1083 2
static void GLAPIENTRY
loopback_VertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
d1088 2
a1089 2
static void GLAPIENTRY
loopback_VertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
d1094 2
a1095 2
static void GLAPIENTRY
loopback_VertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
d1100 2
a1101 2
static void GLAPIENTRY
loopback_VertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
d1107 2
a1108 2
static void GLAPIENTRY
loopback_VertexAttrib1svNV(GLuint index, const GLshort *v)
d1113 2
a1114 2
static void GLAPIENTRY
loopback_VertexAttrib1dvNV(GLuint index, const GLdouble *v)
d1119 2
a1120 2
static void GLAPIENTRY
loopback_VertexAttrib2svNV(GLuint index, const GLshort *v)
d1125 2
a1126 2
static void GLAPIENTRY
loopback_VertexAttrib2dvNV(GLuint index, const GLdouble *v)
d1131 2
a1132 2
static void GLAPIENTRY
loopback_VertexAttrib3svNV(GLuint index, const GLshort *v)
d1137 2
a1138 2
static void GLAPIENTRY
loopback_VertexAttrib3dvNV(GLuint index, const GLdouble *v)
d1143 2
a1144 2
static void GLAPIENTRY
loopback_VertexAttrib4svNV(GLuint index, const GLshort *v)
d1150 2
a1151 2
static void GLAPIENTRY
loopback_VertexAttrib4dvNV(GLuint index, const GLdouble *v)
d1156 2
a1157 2
static void GLAPIENTRY
loopback_VertexAttrib4ubvNV(GLuint index, const GLubyte *v)
d1164 2
a1165 2
static void GLAPIENTRY
loopback_VertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v)
d1169 1
a1169 1
      loopback_VertexAttrib1svNV(index + i, v + i);
d1172 2
a1173 2
static void GLAPIENTRY
loopback_VertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v)
d1180 2
a1181 2
static void GLAPIENTRY
loopback_VertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v)
d1185 1
a1185 1
      loopback_VertexAttrib1dvNV(index + i, v + i);
d1188 2
a1189 2
static void GLAPIENTRY
loopback_VertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v)
d1193 1
a1193 1
      loopback_VertexAttrib2svNV(index + i, v + 2 * i);
d1196 2
a1197 2
static void GLAPIENTRY
loopback_VertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v)
d1204 2
a1205 2
static void GLAPIENTRY
loopback_VertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v)
d1209 1
a1209 1
      loopback_VertexAttrib2dvNV(index + i, v + 2 * i);
d1212 2
a1213 2
static void GLAPIENTRY
loopback_VertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v)
d1217 1
a1217 1
      loopback_VertexAttrib3svNV(index + i, v + 3 * i);
d1220 2
a1221 2
static void GLAPIENTRY
loopback_VertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v)
d1228 2
a1229 2
static void GLAPIENTRY
loopback_VertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v)
d1233 1
a1233 1
      loopback_VertexAttrib3dvNV(index + i, v + 3 * i);
d1236 2
a1237 2
static void GLAPIENTRY
loopback_VertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v)
d1241 1
a1241 1
      loopback_VertexAttrib4svNV(index + i, v + 4 * i);
d1244 2
a1245 2
static void GLAPIENTRY
loopback_VertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v)
d1252 2
a1253 2
static void GLAPIENTRY
loopback_VertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v)
d1257 1
a1257 1
      loopback_VertexAttrib4dvNV(index + i, v + 4 * i);
d1260 2
a1261 2
static void GLAPIENTRY
loopback_VertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v)
d1265 1
a1265 1
      loopback_VertexAttrib4ubvNV(index + i, v + 4 * i);
d1275 2
a1276 2
static void GLAPIENTRY
loopback_VertexAttrib1sARB(GLuint index, GLshort x)
d1281 2
a1282 2
static void GLAPIENTRY
loopback_VertexAttrib1dARB(GLuint index, GLdouble x)
d1287 2
a1288 2
static void GLAPIENTRY
loopback_VertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
d1293 2
a1294 2
static void GLAPIENTRY
loopback_VertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
d1299 2
a1300 2
static void GLAPIENTRY
loopback_VertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
d1305 2
a1306 2
static void GLAPIENTRY
loopback_VertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
d1311 2
a1312 2
static void GLAPIENTRY
loopback_VertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
d1317 2
a1318 2
static void GLAPIENTRY
loopback_VertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
d1323 2
a1324 2
static void GLAPIENTRY
loopback_VertexAttrib1svARB(GLuint index, const GLshort *v)
d1329 2
a1330 2
static void GLAPIENTRY
loopback_VertexAttrib1dvARB(GLuint index, const GLdouble *v)
d1335 2
a1336 2
static void GLAPIENTRY
loopback_VertexAttrib2svARB(GLuint index, const GLshort *v)
d1341 2
a1342 2
static void GLAPIENTRY
loopback_VertexAttrib2dvARB(GLuint index, const GLdouble *v)
d1347 2
a1348 2
static void GLAPIENTRY
loopback_VertexAttrib3svARB(GLuint index, const GLshort *v)
d1353 2
a1354 2
static void GLAPIENTRY
loopback_VertexAttrib3dvARB(GLuint index, const GLdouble *v)
d1359 2
a1360 2
static void GLAPIENTRY
loopback_VertexAttrib4svARB(GLuint index, const GLshort *v)
d1366 2
a1367 2
static void GLAPIENTRY
loopback_VertexAttrib4dvARB(GLuint index, const GLdouble *v)
d1372 2
a1373 2
static void GLAPIENTRY
loopback_VertexAttrib4bvARB(GLuint index, const GLbyte * v)
d1378 2
a1379 2
static void GLAPIENTRY
loopback_VertexAttrib4ivARB(GLuint index, const GLint * v)
d1384 2
a1385 2
static void GLAPIENTRY
loopback_VertexAttrib4ubvARB(GLuint index, const GLubyte * v)
d1390 2
a1391 2
static void GLAPIENTRY
loopback_VertexAttrib4usvARB(GLuint index, const GLushort * v)
d1396 2
a1397 2
static void GLAPIENTRY
loopback_VertexAttrib4uivARB(GLuint index, const GLuint * v)
d1402 2
a1403 2
static void GLAPIENTRY
loopback_VertexAttrib4NbvARB(GLuint index, const GLbyte * v)
d1409 2
a1410 2
static void GLAPIENTRY
loopback_VertexAttrib4NsvARB(GLuint index, const GLshort * v)
d1416 2
a1417 2
static void GLAPIENTRY
loopback_VertexAttrib4NivARB(GLuint index, const GLint * v)
d1423 2
a1424 2
static void GLAPIENTRY
loopback_VertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
d1430 2
a1431 2
static void GLAPIENTRY
loopback_VertexAttrib4NubvARB(GLuint index, const GLubyte * v)
d1437 2
a1438 2
static void GLAPIENTRY
loopback_VertexAttrib4NusvARB(GLuint index, const GLushort * v)
d1444 2
a1445 2
static void GLAPIENTRY
loopback_VertexAttrib4NuivARB(GLuint index, const GLuint * v)
d1458 2
a1459 2
static void GLAPIENTRY
loopback_VertexAttribI1iv(GLuint index, const GLint *v)
d1464 2
a1465 2
static void GLAPIENTRY
loopback_VertexAttribI1uiv(GLuint index, const GLuint *v)
d1470 2
a1471 2
static void GLAPIENTRY
loopback_VertexAttribI4bv(GLuint index, const GLbyte *v)
d1476 2
a1477 2
static void GLAPIENTRY
loopback_VertexAttribI4sv(GLuint index, const GLshort *v)
d1482 2
a1483 2
static void GLAPIENTRY
loopback_VertexAttribI4ubv(GLuint index, const GLubyte *v)
d1488 2
a1489 2
static void GLAPIENTRY
loopback_VertexAttribI4usv(GLuint index, const GLushort *v)
d1502 2
a1503 1
_mesa_loopback_init_api_table( struct _glapi_table *dest )
d1505 47
a1551 43
   SET_Color3b(dest, loopback_Color3b_f);
   SET_Color3d(dest, loopback_Color3d_f);
   SET_Color3i(dest, loopback_Color3i_f);
   SET_Color3s(dest, loopback_Color3s_f);
   SET_Color3ui(dest, loopback_Color3ui_f);
   SET_Color3us(dest, loopback_Color3us_f);
   SET_Color3ub(dest, loopback_Color3ub_f);
   SET_Color4b(dest, loopback_Color4b_f);
   SET_Color4d(dest, loopback_Color4d_f);
   SET_Color4i(dest, loopback_Color4i_f);
   SET_Color4s(dest, loopback_Color4s_f);
   SET_Color4ui(dest, loopback_Color4ui_f);
   SET_Color4us(dest, loopback_Color4us_f);
   SET_Color4ub(dest, loopback_Color4ub_f);
   SET_Color3bv(dest, loopback_Color3bv_f);
   SET_Color3dv(dest, loopback_Color3dv_f);
   SET_Color3iv(dest, loopback_Color3iv_f);
   SET_Color3sv(dest, loopback_Color3sv_f);
   SET_Color3uiv(dest, loopback_Color3uiv_f);
   SET_Color3usv(dest, loopback_Color3usv_f);
   SET_Color3ubv(dest, loopback_Color3ubv_f);
   SET_Color4bv(dest, loopback_Color4bv_f);
   SET_Color4dv(dest, loopback_Color4dv_f);
   SET_Color4iv(dest, loopback_Color4iv_f);
   SET_Color4sv(dest, loopback_Color4sv_f);
   SET_Color4uiv(dest, loopback_Color4uiv_f);
   SET_Color4usv(dest, loopback_Color4usv_f);
   SET_Color4ubv(dest, loopback_Color4ubv_f);

   SET_SecondaryColor3bEXT(dest, loopback_SecondaryColor3bEXT_f);
   SET_SecondaryColor3dEXT(dest, loopback_SecondaryColor3dEXT_f);
   SET_SecondaryColor3iEXT(dest, loopback_SecondaryColor3iEXT_f);
   SET_SecondaryColor3sEXT(dest, loopback_SecondaryColor3sEXT_f);
   SET_SecondaryColor3uiEXT(dest, loopback_SecondaryColor3uiEXT_f);
   SET_SecondaryColor3usEXT(dest, loopback_SecondaryColor3usEXT_f);
   SET_SecondaryColor3ubEXT(dest, loopback_SecondaryColor3ubEXT_f);
   SET_SecondaryColor3bvEXT(dest, loopback_SecondaryColor3bvEXT_f);
   SET_SecondaryColor3dvEXT(dest, loopback_SecondaryColor3dvEXT_f);
   SET_SecondaryColor3ivEXT(dest, loopback_SecondaryColor3ivEXT_f);
   SET_SecondaryColor3svEXT(dest, loopback_SecondaryColor3svEXT_f);
   SET_SecondaryColor3uivEXT(dest, loopback_SecondaryColor3uivEXT_f);
   SET_SecondaryColor3usvEXT(dest, loopback_SecondaryColor3usvEXT_f);
   SET_SecondaryColor3ubvEXT(dest, loopback_SecondaryColor3ubvEXT_f);
d1553 1
a1553 1
   SET_EdgeFlagv(dest, loopback_EdgeFlagv);
d1555 100
a1654 170
   SET_Indexd(dest, loopback_Indexd);
   SET_Indexi(dest, loopback_Indexi);
   SET_Indexs(dest, loopback_Indexs);
   SET_Indexub(dest, loopback_Indexub);
   SET_Indexdv(dest, loopback_Indexdv);
   SET_Indexiv(dest, loopback_Indexiv);
   SET_Indexsv(dest, loopback_Indexsv);
   SET_Indexubv(dest, loopback_Indexubv);
   SET_Normal3b(dest, loopback_Normal3b);
   SET_Normal3d(dest, loopback_Normal3d);
   SET_Normal3i(dest, loopback_Normal3i);
   SET_Normal3s(dest, loopback_Normal3s);
   SET_Normal3bv(dest, loopback_Normal3bv);
   SET_Normal3dv(dest, loopback_Normal3dv);
   SET_Normal3iv(dest, loopback_Normal3iv);
   SET_Normal3sv(dest, loopback_Normal3sv);
   SET_TexCoord1d(dest, loopback_TexCoord1d);
   SET_TexCoord1i(dest, loopback_TexCoord1i);
   SET_TexCoord1s(dest, loopback_TexCoord1s);
   SET_TexCoord2d(dest, loopback_TexCoord2d);
   SET_TexCoord2s(dest, loopback_TexCoord2s);
   SET_TexCoord2i(dest, loopback_TexCoord2i);
   SET_TexCoord3d(dest, loopback_TexCoord3d);
   SET_TexCoord3i(dest, loopback_TexCoord3i);
   SET_TexCoord3s(dest, loopback_TexCoord3s);
   SET_TexCoord4d(dest, loopback_TexCoord4d);
   SET_TexCoord4i(dest, loopback_TexCoord4i);
   SET_TexCoord4s(dest, loopback_TexCoord4s);
   SET_TexCoord1dv(dest, loopback_TexCoord1dv);
   SET_TexCoord1iv(dest, loopback_TexCoord1iv);
   SET_TexCoord1sv(dest, loopback_TexCoord1sv);
   SET_TexCoord2dv(dest, loopback_TexCoord2dv);
   SET_TexCoord2iv(dest, loopback_TexCoord2iv);
   SET_TexCoord2sv(dest, loopback_TexCoord2sv);
   SET_TexCoord3dv(dest, loopback_TexCoord3dv);
   SET_TexCoord3iv(dest, loopback_TexCoord3iv);
   SET_TexCoord3sv(dest, loopback_TexCoord3sv);
   SET_TexCoord4dv(dest, loopback_TexCoord4dv);
   SET_TexCoord4iv(dest, loopback_TexCoord4iv);
   SET_TexCoord4sv(dest, loopback_TexCoord4sv);
   SET_Vertex2d(dest, loopback_Vertex2d);
   SET_Vertex2i(dest, loopback_Vertex2i);
   SET_Vertex2s(dest, loopback_Vertex2s);
   SET_Vertex3d(dest, loopback_Vertex3d);
   SET_Vertex3i(dest, loopback_Vertex3i);
   SET_Vertex3s(dest, loopback_Vertex3s);
   SET_Vertex4d(dest, loopback_Vertex4d);
   SET_Vertex4i(dest, loopback_Vertex4i);
   SET_Vertex4s(dest, loopback_Vertex4s);
   SET_Vertex2dv(dest, loopback_Vertex2dv);
   SET_Vertex2iv(dest, loopback_Vertex2iv);
   SET_Vertex2sv(dest, loopback_Vertex2sv);
   SET_Vertex3dv(dest, loopback_Vertex3dv);
   SET_Vertex3iv(dest, loopback_Vertex3iv);
   SET_Vertex3sv(dest, loopback_Vertex3sv);
   SET_Vertex4dv(dest, loopback_Vertex4dv);
   SET_Vertex4iv(dest, loopback_Vertex4iv);
   SET_Vertex4sv(dest, loopback_Vertex4sv);
   SET_MultiTexCoord1dARB(dest, loopback_MultiTexCoord1dARB);
   SET_MultiTexCoord1dvARB(dest, loopback_MultiTexCoord1dvARB);
   SET_MultiTexCoord1iARB(dest, loopback_MultiTexCoord1iARB);
   SET_MultiTexCoord1ivARB(dest, loopback_MultiTexCoord1ivARB);
   SET_MultiTexCoord1sARB(dest, loopback_MultiTexCoord1sARB);
   SET_MultiTexCoord1svARB(dest, loopback_MultiTexCoord1svARB);
   SET_MultiTexCoord2dARB(dest, loopback_MultiTexCoord2dARB);
   SET_MultiTexCoord2dvARB(dest, loopback_MultiTexCoord2dvARB);
   SET_MultiTexCoord2iARB(dest, loopback_MultiTexCoord2iARB);
   SET_MultiTexCoord2ivARB(dest, loopback_MultiTexCoord2ivARB);
   SET_MultiTexCoord2sARB(dest, loopback_MultiTexCoord2sARB);
   SET_MultiTexCoord2svARB(dest, loopback_MultiTexCoord2svARB);
   SET_MultiTexCoord3dARB(dest, loopback_MultiTexCoord3dARB);
   SET_MultiTexCoord3dvARB(dest, loopback_MultiTexCoord3dvARB);
   SET_MultiTexCoord3iARB(dest, loopback_MultiTexCoord3iARB);
   SET_MultiTexCoord3ivARB(dest, loopback_MultiTexCoord3ivARB);
   SET_MultiTexCoord3sARB(dest, loopback_MultiTexCoord3sARB);
   SET_MultiTexCoord3svARB(dest, loopback_MultiTexCoord3svARB);
   SET_MultiTexCoord4dARB(dest, loopback_MultiTexCoord4dARB);
   SET_MultiTexCoord4dvARB(dest, loopback_MultiTexCoord4dvARB);
   SET_MultiTexCoord4iARB(dest, loopback_MultiTexCoord4iARB);
   SET_MultiTexCoord4ivARB(dest, loopback_MultiTexCoord4ivARB);
   SET_MultiTexCoord4sARB(dest, loopback_MultiTexCoord4sARB);
   SET_MultiTexCoord4svARB(dest, loopback_MultiTexCoord4svARB);
   SET_EvalCoord2dv(dest, loopback_EvalCoord2dv);
   SET_EvalCoord2fv(dest, loopback_EvalCoord2fv);
   SET_EvalCoord2d(dest, loopback_EvalCoord2d);
   SET_EvalCoord1dv(dest, loopback_EvalCoord1dv);
   SET_EvalCoord1fv(dest, loopback_EvalCoord1fv);
   SET_EvalCoord1d(dest, loopback_EvalCoord1d);
   SET_Materialf(dest, loopback_Materialf);
   SET_Materiali(dest, loopback_Materiali);
   SET_Materialiv(dest, loopback_Materialiv);
   SET_Rectd(dest, loopback_Rectd);
   SET_Rectdv(dest, loopback_Rectdv);
   SET_Rectfv(dest, loopback_Rectfv);
   SET_Recti(dest, loopback_Recti);
   SET_Rectiv(dest, loopback_Rectiv);
   SET_Rects(dest, loopback_Rects);
   SET_Rectsv(dest, loopback_Rectsv);
   SET_FogCoorddEXT(dest, loopback_FogCoorddEXT);
   SET_FogCoorddvEXT(dest, loopback_FogCoorddvEXT);

   SET_VertexAttrib1sNV(dest, loopback_VertexAttrib1sNV);
   SET_VertexAttrib1dNV(dest, loopback_VertexAttrib1dNV);
   SET_VertexAttrib2sNV(dest, loopback_VertexAttrib2sNV);
   SET_VertexAttrib2dNV(dest, loopback_VertexAttrib2dNV);
   SET_VertexAttrib3sNV(dest, loopback_VertexAttrib3sNV);
   SET_VertexAttrib3dNV(dest, loopback_VertexAttrib3dNV);
   SET_VertexAttrib4sNV(dest, loopback_VertexAttrib4sNV);
   SET_VertexAttrib4dNV(dest, loopback_VertexAttrib4dNV);
   SET_VertexAttrib4ubNV(dest, loopback_VertexAttrib4ubNV);
   SET_VertexAttrib1svNV(dest, loopback_VertexAttrib1svNV);
   SET_VertexAttrib1dvNV(dest, loopback_VertexAttrib1dvNV);
   SET_VertexAttrib2svNV(dest, loopback_VertexAttrib2svNV);
   SET_VertexAttrib2dvNV(dest, loopback_VertexAttrib2dvNV);
   SET_VertexAttrib3svNV(dest, loopback_VertexAttrib3svNV);
   SET_VertexAttrib3dvNV(dest, loopback_VertexAttrib3dvNV);
   SET_VertexAttrib4svNV(dest, loopback_VertexAttrib4svNV);
   SET_VertexAttrib4dvNV(dest, loopback_VertexAttrib4dvNV);
   SET_VertexAttrib4ubvNV(dest, loopback_VertexAttrib4ubvNV);
   SET_VertexAttribs1svNV(dest, loopback_VertexAttribs1svNV);
   SET_VertexAttribs1fvNV(dest, loopback_VertexAttribs1fvNV);
   SET_VertexAttribs1dvNV(dest, loopback_VertexAttribs1dvNV);
   SET_VertexAttribs2svNV(dest, loopback_VertexAttribs2svNV);
   SET_VertexAttribs2fvNV(dest, loopback_VertexAttribs2fvNV);
   SET_VertexAttribs2dvNV(dest, loopback_VertexAttribs2dvNV);
   SET_VertexAttribs3svNV(dest, loopback_VertexAttribs3svNV);
   SET_VertexAttribs3fvNV(dest, loopback_VertexAttribs3fvNV);
   SET_VertexAttribs3dvNV(dest, loopback_VertexAttribs3dvNV);
   SET_VertexAttribs4svNV(dest, loopback_VertexAttribs4svNV);
   SET_VertexAttribs4fvNV(dest, loopback_VertexAttribs4fvNV);
   SET_VertexAttribs4dvNV(dest, loopback_VertexAttribs4dvNV);
   SET_VertexAttribs4ubvNV(dest, loopback_VertexAttribs4ubvNV);

   SET_VertexAttrib1sARB(dest, loopback_VertexAttrib1sARB);
   SET_VertexAttrib1dARB(dest, loopback_VertexAttrib1dARB);
   SET_VertexAttrib2sARB(dest, loopback_VertexAttrib2sARB);
   SET_VertexAttrib2dARB(dest, loopback_VertexAttrib2dARB);
   SET_VertexAttrib3sARB(dest, loopback_VertexAttrib3sARB);
   SET_VertexAttrib3dARB(dest, loopback_VertexAttrib3dARB);
   SET_VertexAttrib4sARB(dest, loopback_VertexAttrib4sARB);
   SET_VertexAttrib4dARB(dest, loopback_VertexAttrib4dARB);
   SET_VertexAttrib1svARB(dest, loopback_VertexAttrib1svARB);
   SET_VertexAttrib1dvARB(dest, loopback_VertexAttrib1dvARB);
   SET_VertexAttrib2svARB(dest, loopback_VertexAttrib2svARB);
   SET_VertexAttrib2dvARB(dest, loopback_VertexAttrib2dvARB);
   SET_VertexAttrib3svARB(dest, loopback_VertexAttrib3svARB);
   SET_VertexAttrib3dvARB(dest, loopback_VertexAttrib3dvARB);
   SET_VertexAttrib4svARB(dest, loopback_VertexAttrib4svARB);
   SET_VertexAttrib4dvARB(dest, loopback_VertexAttrib4dvARB);
   SET_VertexAttrib4NubARB(dest, loopback_VertexAttrib4NubARB);
   SET_VertexAttrib4NubvARB(dest, loopback_VertexAttrib4NubvARB);
   SET_VertexAttrib4bvARB(dest, loopback_VertexAttrib4bvARB);
   SET_VertexAttrib4ivARB(dest, loopback_VertexAttrib4ivARB);
   SET_VertexAttrib4ubvARB(dest, loopback_VertexAttrib4ubvARB);
   SET_VertexAttrib4usvARB(dest, loopback_VertexAttrib4usvARB);
   SET_VertexAttrib4uivARB(dest, loopback_VertexAttrib4uivARB);
   SET_VertexAttrib4NbvARB(dest, loopback_VertexAttrib4NbvARB);
   SET_VertexAttrib4NsvARB(dest, loopback_VertexAttrib4NsvARB);
   SET_VertexAttrib4NivARB(dest, loopback_VertexAttrib4NivARB);
   SET_VertexAttrib4NusvARB(dest, loopback_VertexAttrib4NusvARB);
   SET_VertexAttrib4NuivARB(dest, loopback_VertexAttrib4NuivARB);

   /* GL_EXT_gpu_shader4, GL 3.0 */
   SET_VertexAttribI1ivEXT(dest, loopback_VertexAttribI1iv);
   SET_VertexAttribI1uivEXT(dest, loopback_VertexAttribI1uiv);
   SET_VertexAttribI4bvEXT(dest, loopback_VertexAttribI4bv);
   SET_VertexAttribI4svEXT(dest, loopback_VertexAttribI4sv);
   SET_VertexAttribI4ubvEXT(dest, loopback_VertexAttribI4ubv);
   SET_VertexAttribI4usvEXT(dest, loopback_VertexAttribI4usv);
}
d1656 33
d1690 39
a1728 1
#endif /* FEATURE_beginend */
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a36 1
#include "glapi/glapitable.h"
d39 1
d69 3
d76 1
d81 6
a86 2
#define FOGCOORDF(x)                CALL_FogCoordfEXT(GET_DISPATCH(), (x))
#define SECONDARYCOLORF(a,b,c)      CALL_SecondaryColor3fEXT(GET_DISPATCH(), (a,b,c))
d1052 1
d1275 1
d1456 43
d1714 8
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d39 1
a39 1
#include "glapi/dispatch.h"
d80 4
d1662 3
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a33 1
#include "colormac.h"
@


1.1
log
@Initial revision
@
text
@a32 2
#include "glapi.h"
#include "glapitable.h"
a35 1
#include "glthread.h"
d37 4
a40 1
#include "dispatch.h"
d149 1
a149 1
	   INT_TO_FLOAT(v[2]), INT_TO_FLOAT(v[3]) );
d513 1
a513 1
   TEXCOORD2((GLfloat) v[0],(GLfloat) v[1]);
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d513 1
a513 1
   TEXCOORD3((GLfloat) v[0],(GLfloat) v[1],(GLfloat) v[2]);
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d149 1
a149 1
	   INT_TO_FLOAT(v[2]), 1.0 );
@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d33 2
d36 1
d38 1
d40 1
a40 4
#include "glapi/glapi.h"
#include "glapi/glthread.h"
#include "main/dispatch.h"
#include "mfeatures.h"
a69 3
#define FOGCOORDF(x)                CALL_FogCoordfEXT(GET_DISPATCH(), (x))
#define SECONDARYCOLORF(a,b,c)      CALL_SecondaryColor3fEXT(GET_DISPATCH(), (a,b,c))

a73 1

d78 2
a79 10

#define ATTRIBI_1I(index,x)   CALL_VertexAttribI1iEXT(GET_DISPATCH(), (index,x))
#define ATTRIBI_1UI(index,x)   CALL_VertexAttribI1uiEXT(GET_DISPATCH(), (index,x))
#define ATTRIBI_4I(index,x,y,z,w)   CALL_VertexAttribI4iEXT(GET_DISPATCH(), (index,x,y,z,w))

#define ATTRIBI_4UI(index,x,y,z,w)   CALL_VertexAttribI4uiEXT(GET_DISPATCH(), (index,x,y,z,w))


#if FEATURE_beginend

a1040 1
 * Note that attribute indexes DO alias conventional vertex attributes.
a1262 1
 * Note that attribute indexes do NOT alias conventional attributes.
a1442 43
/**
 * GL_EXT_gpu_shader / GL 3.0 signed/unsigned integer-valued attributes.
 * Note that attribute indexes do NOT alias conventional attributes.
 */

static void GLAPIENTRY
loopback_VertexAttribI1iv(GLuint index, const GLint *v)
{
   ATTRIBI_1I(index, v[0]);
}

static void GLAPIENTRY
loopback_VertexAttribI1uiv(GLuint index, const GLuint *v)
{
   ATTRIBI_1UI(index, v[0]);
}

static void GLAPIENTRY
loopback_VertexAttribI4bv(GLuint index, const GLbyte *v)
{
   ATTRIBI_4I(index, v[0], v[1], v[2], v[3]);
}

static void GLAPIENTRY
loopback_VertexAttribI4sv(GLuint index, const GLshort *v)
{
   ATTRIBI_4I(index, v[0], v[1], v[2], v[3]);
}

static void GLAPIENTRY
loopback_VertexAttribI4ubv(GLuint index, const GLubyte *v)
{
   ATTRIBI_4UI(index, v[0], v[1], v[2], v[3]);
}

static void GLAPIENTRY
loopback_VertexAttribI4usv(GLuint index, const GLushort *v)
{
   ATTRIBI_4UI(index, v[0], v[1], v[2], v[3]);
}



a1657 8

   /* GL_EXT_gpu_shader4, GL 3.0 */
   SET_VertexAttribI1ivEXT(dest, loopback_VertexAttribI1iv);
   SET_VertexAttribI1uivEXT(dest, loopback_VertexAttribI1uiv);
   SET_VertexAttribI4bvEXT(dest, loopback_VertexAttribI4bv);
   SET_VertexAttribI4svEXT(dest, loopback_VertexAttribI4sv);
   SET_VertexAttribI4ubvEXT(dest, loopback_VertexAttribI4ubv);
   SET_VertexAttribI4usvEXT(dest, loopback_VertexAttribI4usv);
a1658 3


#endif /* FEATURE_beginend */
@


1.1.1.5
log
@Import Mesa 9.2.0
@
text
@d9 1
d26 3
a28 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d39 1
a39 1
#include "main/context.h"
d89 5
a93 2
void GLAPIENTRY
_mesa_Color3b( GLbyte red, GLbyte green, GLbyte blue )
d101 2
a102 2
void GLAPIENTRY
_mesa_Color3d( GLdouble red, GLdouble green, GLdouble blue )
d107 2
a108 2
void GLAPIENTRY
_mesa_Color3i( GLint red, GLint green, GLint blue )
d114 2
a115 2
void GLAPIENTRY
_mesa_Color3s( GLshort red, GLshort green, GLshort blue )
d121 2
a122 2
void GLAPIENTRY
_mesa_Color3ui( GLuint red, GLuint green, GLuint blue )
d128 2
a129 2
void GLAPIENTRY
_mesa_Color3us( GLushort red, GLushort green, GLushort blue )
d135 2
a136 2
void GLAPIENTRY
_mesa_Color3ub( GLubyte red, GLubyte green, GLubyte blue )
d143 2
a144 2
void GLAPIENTRY
_mesa_Color3bv( const GLbyte *v )
d150 2
a151 2
void GLAPIENTRY
_mesa_Color3dv( const GLdouble *v )
d156 2
a157 2
void GLAPIENTRY
_mesa_Color3iv( const GLint *v )
d163 2
a164 2
void GLAPIENTRY
_mesa_Color3sv( const GLshort *v )
d170 2
a171 2
void GLAPIENTRY
_mesa_Color3uiv( const GLuint *v )
d177 2
a178 2
void GLAPIENTRY
_mesa_Color3usv( const GLushort *v )
d184 2
a185 2
void GLAPIENTRY
_mesa_Color3ubv( const GLubyte *v )
d192 2
a193 2
void GLAPIENTRY
_mesa_Color4b( GLbyte red, GLbyte green, GLbyte blue,
d200 2
a201 2
void GLAPIENTRY
_mesa_Color4d( GLdouble red, GLdouble green, GLdouble blue,
d207 2
a208 2
void GLAPIENTRY
_mesa_Color4i( GLint red, GLint green, GLint blue, GLint alpha )
d214 2
a215 2
void GLAPIENTRY
_mesa_Color4s( GLshort red, GLshort green, GLshort blue,
d222 2
a223 2
void GLAPIENTRY
_mesa_Color4ui( GLuint red, GLuint green, GLuint blue, GLuint alpha )
d229 2
a230 2
void GLAPIENTRY
_mesa_Color4us( GLushort red, GLushort green, GLushort blue, GLushort alpha )
d236 2
a237 2
void GLAPIENTRY
_mesa_Color4ub( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha )
d244 2
a245 2
void GLAPIENTRY
_mesa_Color4iv( const GLint *v )
d252 2
a253 2
void GLAPIENTRY
_mesa_Color4bv( const GLbyte *v )
d259 2
a260 2
void GLAPIENTRY
_mesa_Color4dv( const GLdouble *v )
d266 2
a267 2
void GLAPIENTRY
_mesa_Color4sv( const GLshort *v)
d274 2
a275 2
void GLAPIENTRY
_mesa_Color4uiv( const GLuint *v)
d281 2
a282 2
void GLAPIENTRY
_mesa_Color4usv( const GLushort *v)
d288 2
a289 2
void GLAPIENTRY
_mesa_Color4ubv( const GLubyte *v)
d296 2
a297 2
void GLAPIENTRY
_mesa_FogCoordd( GLdouble d )
d302 2
a303 2
void GLAPIENTRY
_mesa_FogCoorddv( const GLdouble *v )
d309 2
a310 2
void GLAPIENTRY
_mesa_Indexd( GLdouble c )
d315 2
a316 2
void GLAPIENTRY
_mesa_Indexi( GLint c )
d321 2
a322 2
void GLAPIENTRY
_mesa_Indexs( GLshort c )
d327 2
a328 2
void GLAPIENTRY
_mesa_Indexub( GLubyte c )
d333 2
a334 2
void GLAPIENTRY
_mesa_Indexdv( const GLdouble *c )
d339 2
a340 2
void GLAPIENTRY
_mesa_Indexiv( const GLint *c )
d345 2
a346 2
void GLAPIENTRY
_mesa_Indexsv( const GLshort *c )
d351 2
a352 2
void GLAPIENTRY
_mesa_Indexubv( const GLubyte *c )
d358 2
a359 2
void GLAPIENTRY
_mesa_EdgeFlagv(const GLboolean *flag)
d365 2
a366 2
void GLAPIENTRY
_mesa_Normal3b( GLbyte nx, GLbyte ny, GLbyte nz )
d371 2
a372 2
void GLAPIENTRY
_mesa_Normal3d( GLdouble nx, GLdouble ny, GLdouble nz )
d377 2
a378 2
void GLAPIENTRY
_mesa_Normal3i( GLint nx, GLint ny, GLint nz )
d383 2
a384 2
void GLAPIENTRY
_mesa_Normal3s( GLshort nx, GLshort ny, GLshort nz )
d389 2
a390 2
void GLAPIENTRY
_mesa_Normal3bv( const GLbyte *v )
d395 2
a396 2
void GLAPIENTRY
_mesa_Normal3dv( const GLdouble *v )
d401 2
a402 2
void GLAPIENTRY
_mesa_Normal3iv( const GLint *v )
d407 2
a408 2
void GLAPIENTRY
_mesa_Normal3sv( const GLshort *v )
d413 2
a414 2
void GLAPIENTRY
_mesa_TexCoord1d( GLdouble s )
d419 2
a420 2
void GLAPIENTRY
_mesa_TexCoord1i( GLint s )
d425 2
a426 2
void GLAPIENTRY
_mesa_TexCoord1s( GLshort s )
d431 2
a432 2
void GLAPIENTRY
_mesa_TexCoord2d( GLdouble s, GLdouble t )
d437 2
a438 2
void GLAPIENTRY
_mesa_TexCoord2s( GLshort s, GLshort t )
d443 2
a444 2
void GLAPIENTRY
_mesa_TexCoord2i( GLint s, GLint t )
d449 2
a450 2
void GLAPIENTRY
_mesa_TexCoord3d( GLdouble s, GLdouble t, GLdouble r )
d455 2
a456 2
void GLAPIENTRY
_mesa_TexCoord3i( GLint s, GLint t, GLint r )
d461 2
a462 2
void GLAPIENTRY
_mesa_TexCoord3s( GLshort s, GLshort t, GLshort r )
d467 2
a468 2
void GLAPIENTRY
_mesa_TexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q )
d473 2
a474 2
void GLAPIENTRY
_mesa_TexCoord4i( GLint s, GLint t, GLint r, GLint q )
d479 2
a480 2
void GLAPIENTRY
_mesa_TexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q )
d485 2
a486 2
void GLAPIENTRY
_mesa_TexCoord1dv( const GLdouble *v )
d491 2
a492 2
void GLAPIENTRY
_mesa_TexCoord1iv( const GLint *v )
d497 2
a498 2
void GLAPIENTRY
_mesa_TexCoord1sv( const GLshort *v )
d503 2
a504 2
void GLAPIENTRY
_mesa_TexCoord2dv( const GLdouble *v )
d509 2
a510 2
void GLAPIENTRY
_mesa_TexCoord2iv( const GLint *v )
d515 2
a516 2
void GLAPIENTRY
_mesa_TexCoord2sv( const GLshort *v )
d521 2
a522 2
void GLAPIENTRY
_mesa_TexCoord3dv( const GLdouble *v )
d527 2
a528 2
void GLAPIENTRY
_mesa_TexCoord3iv( const GLint *v )
d533 2
a534 2
void GLAPIENTRY
_mesa_TexCoord3sv( const GLshort *v )
d539 2
a540 2
void GLAPIENTRY
_mesa_TexCoord4dv( const GLdouble *v )
d545 2
a546 2
void GLAPIENTRY
_mesa_TexCoord4iv( const GLint *v )
d551 2
a552 2
void GLAPIENTRY
_mesa_TexCoord4sv( const GLshort *v )
d557 2
a558 2
void GLAPIENTRY
_mesa_Vertex2d( GLdouble x, GLdouble y )
d563 2
a564 2
void GLAPIENTRY
_mesa_Vertex2i( GLint x, GLint y )
d569 2
a570 2
void GLAPIENTRY
_mesa_Vertex2s( GLshort x, GLshort y )
d575 2
a576 2
void GLAPIENTRY
_mesa_Vertex3d( GLdouble x, GLdouble y, GLdouble z )
d581 2
a582 2
void GLAPIENTRY
_mesa_Vertex3i( GLint x, GLint y, GLint z )
d587 2
a588 2
void GLAPIENTRY
_mesa_Vertex3s( GLshort x, GLshort y, GLshort z )
d593 2
a594 2
void GLAPIENTRY
_mesa_Vertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w )
d599 2
a600 2
void GLAPIENTRY
_mesa_Vertex4i( GLint x, GLint y, GLint z, GLint w )
d605 2
a606 2
void GLAPIENTRY
_mesa_Vertex4s( GLshort x, GLshort y, GLshort z, GLshort w )
d611 2
a612 2
void GLAPIENTRY
_mesa_Vertex2dv( const GLdouble *v )
d617 2
a618 2
void GLAPIENTRY
_mesa_Vertex2iv( const GLint *v )
d623 2
a624 2
void GLAPIENTRY
_mesa_Vertex2sv( const GLshort *v )
d629 2
a630 2
void GLAPIENTRY
_mesa_Vertex3dv( const GLdouble *v )
d635 2
a636 2
void GLAPIENTRY
_mesa_Vertex3iv( const GLint *v )
d641 2
a642 2
void GLAPIENTRY
_mesa_Vertex3sv( const GLshort *v )
d647 2
a648 2
void GLAPIENTRY
_mesa_Vertex4dv( const GLdouble *v )
d654 2
a655 2
void GLAPIENTRY
_mesa_Vertex4iv( const GLint *v )
d661 2
a662 2
void GLAPIENTRY
_mesa_Vertex4sv( const GLshort *v )
d668 2
a669 2
void GLAPIENTRY
_mesa_MultiTexCoord1d(GLenum target, GLdouble s)
d674 2
a675 2
void GLAPIENTRY
_mesa_MultiTexCoord1dv(GLenum target, const GLdouble *v)
d680 2
a681 2
void GLAPIENTRY
_mesa_MultiTexCoord1i(GLenum target, GLint s)
d686 2
a687 2
void GLAPIENTRY
_mesa_MultiTexCoord1iv(GLenum target, const GLint *v)
d692 2
a693 2
void GLAPIENTRY
_mesa_MultiTexCoord1s(GLenum target, GLshort s)
d698 2
a699 2
void GLAPIENTRY
_mesa_MultiTexCoord1sv(GLenum target, const GLshort *v)
d704 2
a705 2
void GLAPIENTRY
_mesa_MultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
d710 2
a711 2
void GLAPIENTRY
_mesa_MultiTexCoord2dv(GLenum target, const GLdouble *v)
d716 2
a717 2
void GLAPIENTRY
_mesa_MultiTexCoord2i(GLenum target, GLint s, GLint t)
d722 2
a723 2
void GLAPIENTRY
_mesa_MultiTexCoord2iv(GLenum target, const GLint *v)
d728 2
a729 2
void GLAPIENTRY
_mesa_MultiTexCoord2s(GLenum target, GLshort s, GLshort t)
d734 2
a735 2
void GLAPIENTRY
_mesa_MultiTexCoord2sv(GLenum target, const GLshort *v)
d740 2
a741 2
void GLAPIENTRY
_mesa_MultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
d746 2
a747 2
void GLAPIENTRY
_mesa_MultiTexCoord3dv(GLenum target, const GLdouble *v)
d752 2
a753 2
void GLAPIENTRY
_mesa_MultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
d758 2
a759 2
void GLAPIENTRY
_mesa_MultiTexCoord3iv(GLenum target, const GLint *v)
d764 2
a765 2
void GLAPIENTRY
_mesa_MultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
d770 2
a771 2
void GLAPIENTRY
_mesa_MultiTexCoord3sv(GLenum target, const GLshort *v)
d776 2
a777 2
void GLAPIENTRY
_mesa_MultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
d783 2
a784 2
void GLAPIENTRY
_mesa_MultiTexCoord4dv(GLenum target, const GLdouble *v)
d790 2
a791 2
void GLAPIENTRY
_mesa_MultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
d797 2
a798 2
void GLAPIENTRY
_mesa_MultiTexCoord4iv(GLenum target, const GLint *v)
d804 2
a805 2
void GLAPIENTRY
_mesa_MultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
d811 2
a812 2
void GLAPIENTRY
_mesa_MultiTexCoord4sv(GLenum target, const GLshort *v)
d818 2
a819 2
void GLAPIENTRY
_mesa_EvalCoord2dv( const GLdouble *u )
d824 2
a825 2
void GLAPIENTRY
_mesa_EvalCoord2fv( const GLfloat *u )
d830 2
a831 2
void GLAPIENTRY
_mesa_EvalCoord2d( GLdouble u, GLdouble v )
d836 2
a837 2
void GLAPIENTRY
_mesa_EvalCoord1dv( const GLdouble *u )
d842 2
a843 2
void GLAPIENTRY
_mesa_EvalCoord1fv( const GLfloat *u )
d848 2
a849 2
void GLAPIENTRY
_mesa_EvalCoord1d( GLdouble u )
d854 2
a855 2
void GLAPIENTRY
_mesa_Materialf( GLenum face, GLenum pname, GLfloat param )
d862 2
a863 2
void GLAPIENTRY
_mesa_Materiali(GLenum face, GLenum pname, GLint param )
d869 2
a870 2
void GLAPIENTRY
_mesa_Materialiv(GLenum face, GLenum pname, const GLint *params )
d899 2
a900 2
void GLAPIENTRY
_mesa_Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
d905 2
a906 2
void GLAPIENTRY
_mesa_Rectdv(const GLdouble *v1, const GLdouble *v2)
d911 2
a912 2
void GLAPIENTRY
_mesa_Rectfv(const GLfloat *v1, const GLfloat *v2)
d917 2
a918 2
void GLAPIENTRY
_mesa_Recti(GLint x1, GLint y1, GLint x2, GLint y2)
d923 2
a924 2
void GLAPIENTRY
_mesa_Rectiv(const GLint *v1, const GLint *v2)
d929 2
a930 2
void GLAPIENTRY
_mesa_Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
d935 2
a936 2
void GLAPIENTRY
_mesa_Rectsv(const GLshort *v1, const GLshort *v2)
d941 2
a942 2
void GLAPIENTRY
_mesa_SecondaryColor3b( GLbyte red, GLbyte green, GLbyte blue )
d949 2
a950 2
void GLAPIENTRY
_mesa_SecondaryColor3d( GLdouble red, GLdouble green, GLdouble blue )
d955 2
a956 2
void GLAPIENTRY
_mesa_SecondaryColor3i( GLint red, GLint green, GLint blue )
d963 2
a964 2
void GLAPIENTRY
_mesa_SecondaryColor3s( GLshort red, GLshort green, GLshort blue )
d971 2
a972 2
void GLAPIENTRY
_mesa_SecondaryColor3ui( GLuint red, GLuint green, GLuint blue )
d979 2
a980 2
void GLAPIENTRY
_mesa_SecondaryColor3us( GLushort red, GLushort green, GLushort blue )
d987 2
a988 2
void GLAPIENTRY
_mesa_SecondaryColor3ub( GLubyte red, GLubyte green, GLubyte blue )
d995 2
a996 2
void GLAPIENTRY
_mesa_SecondaryColor3bv( const GLbyte *v )
d1003 2
a1004 2
void GLAPIENTRY
_mesa_SecondaryColor3dv( const GLdouble *v )
d1008 2
a1009 2
void GLAPIENTRY
_mesa_SecondaryColor3iv( const GLint *v )
d1016 2
a1017 2
void GLAPIENTRY
_mesa_SecondaryColor3sv( const GLshort *v )
d1024 2
a1025 2
void GLAPIENTRY
_mesa_SecondaryColor3uiv( const GLuint *v )
d1032 2
a1033 2
void GLAPIENTRY
_mesa_SecondaryColor3usv( const GLushort *v )
d1040 2
a1041 2
void GLAPIENTRY
_mesa_SecondaryColor3ubv( const GLubyte *v )
d1055 2
a1056 2
void GLAPIENTRY
_mesa_VertexAttrib1sNV(GLuint index, GLshort x)
d1061 2
a1062 2
void GLAPIENTRY
_mesa_VertexAttrib1dNV(GLuint index, GLdouble x)
d1067 2
a1068 2
void GLAPIENTRY
_mesa_VertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
d1073 2
a1074 2
void GLAPIENTRY
_mesa_VertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
d1079 2
a1080 2
void GLAPIENTRY
_mesa_VertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
d1085 2
a1086 2
void GLAPIENTRY
_mesa_VertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
d1091 2
a1092 2
void GLAPIENTRY
_mesa_VertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
d1097 2
a1098 2
void GLAPIENTRY
_mesa_VertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
d1103 2
a1104 2
void GLAPIENTRY
_mesa_VertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
d1110 2
a1111 2
void GLAPIENTRY
_mesa_VertexAttrib1svNV(GLuint index, const GLshort *v)
d1116 2
a1117 2
void GLAPIENTRY
_mesa_VertexAttrib1dvNV(GLuint index, const GLdouble *v)
d1122 2
a1123 2
void GLAPIENTRY
_mesa_VertexAttrib2svNV(GLuint index, const GLshort *v)
d1128 2
a1129 2
void GLAPIENTRY
_mesa_VertexAttrib2dvNV(GLuint index, const GLdouble *v)
d1134 2
a1135 2
void GLAPIENTRY
_mesa_VertexAttrib3svNV(GLuint index, const GLshort *v)
d1140 2
a1141 2
void GLAPIENTRY
_mesa_VertexAttrib3dvNV(GLuint index, const GLdouble *v)
d1146 2
a1147 2
void GLAPIENTRY
_mesa_VertexAttrib4svNV(GLuint index, const GLshort *v)
d1153 2
a1154 2
void GLAPIENTRY
_mesa_VertexAttrib4dvNV(GLuint index, const GLdouble *v)
d1159 2
a1160 2
void GLAPIENTRY
_mesa_VertexAttrib4ubvNV(GLuint index, const GLubyte *v)
d1167 2
a1168 2
void GLAPIENTRY
_mesa_VertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v)
d1172 1
a1172 1
      _mesa_VertexAttrib1svNV(index + i, v + i);
d1175 2
a1176 2
void GLAPIENTRY
_mesa_VertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v)
d1183 2
a1184 2
void GLAPIENTRY
_mesa_VertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v)
d1188 1
a1188 1
      _mesa_VertexAttrib1dvNV(index + i, v + i);
d1191 2
a1192 2
void GLAPIENTRY
_mesa_VertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v)
d1196 1
a1196 1
      _mesa_VertexAttrib2svNV(index + i, v + 2 * i);
d1199 2
a1200 2
void GLAPIENTRY
_mesa_VertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v)
d1207 2
a1208 2
void GLAPIENTRY
_mesa_VertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v)
d1212 1
a1212 1
      _mesa_VertexAttrib2dvNV(index + i, v + 2 * i);
d1215 2
a1216 2
void GLAPIENTRY
_mesa_VertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v)
d1220 1
a1220 1
      _mesa_VertexAttrib3svNV(index + i, v + 3 * i);
d1223 2
a1224 2
void GLAPIENTRY
_mesa_VertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v)
d1231 2
a1232 2
void GLAPIENTRY
_mesa_VertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v)
d1236 1
a1236 1
      _mesa_VertexAttrib3dvNV(index + i, v + 3 * i);
d1239 2
a1240 2
void GLAPIENTRY
_mesa_VertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v)
d1244 1
a1244 1
      _mesa_VertexAttrib4svNV(index + i, v + 4 * i);
d1247 2
a1248 2
void GLAPIENTRY
_mesa_VertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v)
d1255 2
a1256 2
void GLAPIENTRY
_mesa_VertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v)
d1260 1
a1260 1
      _mesa_VertexAttrib4dvNV(index + i, v + 4 * i);
d1263 2
a1264 2
void GLAPIENTRY
_mesa_VertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v)
d1268 1
a1268 1
      _mesa_VertexAttrib4ubvNV(index + i, v + 4 * i);
d1278 2
a1279 2
void GLAPIENTRY
_mesa_VertexAttrib1s(GLuint index, GLshort x)
d1284 2
a1285 2
void GLAPIENTRY
_mesa_VertexAttrib1d(GLuint index, GLdouble x)
d1290 2
a1291 2
void GLAPIENTRY
_mesa_VertexAttrib2s(GLuint index, GLshort x, GLshort y)
d1296 2
a1297 2
void GLAPIENTRY
_mesa_VertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
d1302 2
a1303 2
void GLAPIENTRY
_mesa_VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
d1308 2
a1309 2
void GLAPIENTRY
_mesa_VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
d1314 2
a1315 2
void GLAPIENTRY
_mesa_VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
d1320 2
a1321 2
void GLAPIENTRY
_mesa_VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
d1326 2
a1327 2
void GLAPIENTRY
_mesa_VertexAttrib1sv(GLuint index, const GLshort *v)
d1332 2
a1333 2
void GLAPIENTRY
_mesa_VertexAttrib1dv(GLuint index, const GLdouble *v)
d1338 2
a1339 2
void GLAPIENTRY
_mesa_VertexAttrib2sv(GLuint index, const GLshort *v)
d1344 2
a1345 2
void GLAPIENTRY
_mesa_VertexAttrib2dv(GLuint index, const GLdouble *v)
d1350 2
a1351 2
void GLAPIENTRY
_mesa_VertexAttrib3sv(GLuint index, const GLshort *v)
d1356 2
a1357 2
void GLAPIENTRY
_mesa_VertexAttrib3dv(GLuint index, const GLdouble *v)
d1362 2
a1363 2
void GLAPIENTRY
_mesa_VertexAttrib4sv(GLuint index, const GLshort *v)
d1369 2
a1370 2
void GLAPIENTRY
_mesa_VertexAttrib4dv(GLuint index, const GLdouble *v)
d1375 2
a1376 2
void GLAPIENTRY
_mesa_VertexAttrib4bv(GLuint index, const GLbyte * v)
d1381 2
a1382 2
void GLAPIENTRY
_mesa_VertexAttrib4iv(GLuint index, const GLint * v)
d1387 2
a1388 2
void GLAPIENTRY
_mesa_VertexAttrib4ubv(GLuint index, const GLubyte * v)
d1393 2
a1394 2
void GLAPIENTRY
_mesa_VertexAttrib4usv(GLuint index, const GLushort * v)
d1399 2
a1400 2
void GLAPIENTRY
_mesa_VertexAttrib4uiv(GLuint index, const GLuint * v)
d1405 2
a1406 2
void GLAPIENTRY
_mesa_VertexAttrib4Nbv(GLuint index, const GLbyte * v)
d1412 2
a1413 2
void GLAPIENTRY
_mesa_VertexAttrib4Nsv(GLuint index, const GLshort * v)
d1419 2
a1420 2
void GLAPIENTRY
_mesa_VertexAttrib4Niv(GLuint index, const GLint * v)
d1426 2
a1427 2
void GLAPIENTRY
_mesa_VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
d1433 2
a1434 2
void GLAPIENTRY
_mesa_VertexAttrib4Nubv(GLuint index, const GLubyte * v)
d1440 2
a1441 2
void GLAPIENTRY
_mesa_VertexAttrib4Nusv(GLuint index, const GLushort * v)
d1447 2
a1448 2
void GLAPIENTRY
_mesa_VertexAttrib4Nuiv(GLuint index, const GLuint * v)
d1461 2
a1462 2
void GLAPIENTRY
_mesa_VertexAttribI1iv(GLuint index, const GLint *v)
d1467 2
a1468 2
void GLAPIENTRY
_mesa_VertexAttribI1uiv(GLuint index, const GLuint *v)
d1473 2
a1474 2
void GLAPIENTRY
_mesa_VertexAttribI4bv(GLuint index, const GLbyte *v)
d1479 2
a1480 2
void GLAPIENTRY
_mesa_VertexAttribI4sv(GLuint index, const GLshort *v)
d1485 2
a1486 2
void GLAPIENTRY
_mesa_VertexAttribI4ubv(GLuint index, const GLubyte *v)
d1491 2
a1492 2
void GLAPIENTRY
_mesa_VertexAttribI4usv(GLuint index, const GLushort *v)
d1505 1
a1505 2
_mesa_loopback_init_api_table(const struct gl_context *ctx,
                              struct _glapi_table *dest)
d1507 43
a1549 47
   if (ctx->API != API_OPENGL_CORE && ctx->API != API_OPENGLES2) {
      SET_Color4ub(dest, _mesa_Color4ub);
      SET_Materialf(dest, _mesa_Materialf);
   }
   if (ctx->API == API_OPENGL_COMPAT) {
      SET_Color3b(dest, _mesa_Color3b);
      SET_Color3d(dest, _mesa_Color3d);
      SET_Color3i(dest, _mesa_Color3i);
      SET_Color3s(dest, _mesa_Color3s);
      SET_Color3ui(dest, _mesa_Color3ui);
      SET_Color3us(dest, _mesa_Color3us);
      SET_Color3ub(dest, _mesa_Color3ub);
      SET_Color4b(dest, _mesa_Color4b);
      SET_Color4d(dest, _mesa_Color4d);
      SET_Color4i(dest, _mesa_Color4i);
      SET_Color4s(dest, _mesa_Color4s);
      SET_Color4ui(dest, _mesa_Color4ui);
      SET_Color4us(dest, _mesa_Color4us);
      SET_Color3bv(dest, _mesa_Color3bv);
      SET_Color3dv(dest, _mesa_Color3dv);
      SET_Color3iv(dest, _mesa_Color3iv);
      SET_Color3sv(dest, _mesa_Color3sv);
      SET_Color3uiv(dest, _mesa_Color3uiv);
      SET_Color3usv(dest, _mesa_Color3usv);
      SET_Color3ubv(dest, _mesa_Color3ubv);
      SET_Color4bv(dest, _mesa_Color4bv);
      SET_Color4dv(dest, _mesa_Color4dv);
      SET_Color4iv(dest, _mesa_Color4iv);
      SET_Color4sv(dest, _mesa_Color4sv);
      SET_Color4uiv(dest, _mesa_Color4uiv);
      SET_Color4usv(dest, _mesa_Color4usv);
      SET_Color4ubv(dest, _mesa_Color4ubv);

      SET_SecondaryColor3b(dest, _mesa_SecondaryColor3b);
      SET_SecondaryColor3d(dest, _mesa_SecondaryColor3d);
      SET_SecondaryColor3i(dest, _mesa_SecondaryColor3i);
      SET_SecondaryColor3s(dest, _mesa_SecondaryColor3s);
      SET_SecondaryColor3ui(dest, _mesa_SecondaryColor3ui);
      SET_SecondaryColor3us(dest, _mesa_SecondaryColor3us);
      SET_SecondaryColor3ub(dest, _mesa_SecondaryColor3ub);
      SET_SecondaryColor3bv(dest, _mesa_SecondaryColor3bv);
      SET_SecondaryColor3dv(dest, _mesa_SecondaryColor3dv);
      SET_SecondaryColor3iv(dest, _mesa_SecondaryColor3iv);
      SET_SecondaryColor3sv(dest, _mesa_SecondaryColor3sv);
      SET_SecondaryColor3uiv(dest, _mesa_SecondaryColor3uiv);
      SET_SecondaryColor3usv(dest, _mesa_SecondaryColor3usv);
      SET_SecondaryColor3ubv(dest, _mesa_SecondaryColor3ubv);
d1551 1
a1551 1
      SET_EdgeFlagv(dest, _mesa_EdgeFlagv);
d1553 170
a1722 100
      SET_Indexd(dest, _mesa_Indexd);
      SET_Indexi(dest, _mesa_Indexi);
      SET_Indexs(dest, _mesa_Indexs);
      SET_Indexub(dest, _mesa_Indexub);
      SET_Indexdv(dest, _mesa_Indexdv);
      SET_Indexiv(dest, _mesa_Indexiv);
      SET_Indexsv(dest, _mesa_Indexsv);
      SET_Indexubv(dest, _mesa_Indexubv);
      SET_Normal3b(dest, _mesa_Normal3b);
      SET_Normal3d(dest, _mesa_Normal3d);
      SET_Normal3i(dest, _mesa_Normal3i);
      SET_Normal3s(dest, _mesa_Normal3s);
      SET_Normal3bv(dest, _mesa_Normal3bv);
      SET_Normal3dv(dest, _mesa_Normal3dv);
      SET_Normal3iv(dest, _mesa_Normal3iv);
      SET_Normal3sv(dest, _mesa_Normal3sv);
      SET_TexCoord1d(dest, _mesa_TexCoord1d);
      SET_TexCoord1i(dest, _mesa_TexCoord1i);
      SET_TexCoord1s(dest, _mesa_TexCoord1s);
      SET_TexCoord2d(dest, _mesa_TexCoord2d);
      SET_TexCoord2s(dest, _mesa_TexCoord2s);
      SET_TexCoord2i(dest, _mesa_TexCoord2i);
      SET_TexCoord3d(dest, _mesa_TexCoord3d);
      SET_TexCoord3i(dest, _mesa_TexCoord3i);
      SET_TexCoord3s(dest, _mesa_TexCoord3s);
      SET_TexCoord4d(dest, _mesa_TexCoord4d);
      SET_TexCoord4i(dest, _mesa_TexCoord4i);
      SET_TexCoord4s(dest, _mesa_TexCoord4s);
      SET_TexCoord1dv(dest, _mesa_TexCoord1dv);
      SET_TexCoord1iv(dest, _mesa_TexCoord1iv);
      SET_TexCoord1sv(dest, _mesa_TexCoord1sv);
      SET_TexCoord2dv(dest, _mesa_TexCoord2dv);
      SET_TexCoord2iv(dest, _mesa_TexCoord2iv);
      SET_TexCoord2sv(dest, _mesa_TexCoord2sv);
      SET_TexCoord3dv(dest, _mesa_TexCoord3dv);
      SET_TexCoord3iv(dest, _mesa_TexCoord3iv);
      SET_TexCoord3sv(dest, _mesa_TexCoord3sv);
      SET_TexCoord4dv(dest, _mesa_TexCoord4dv);
      SET_TexCoord4iv(dest, _mesa_TexCoord4iv);
      SET_TexCoord4sv(dest, _mesa_TexCoord4sv);
      SET_Vertex2d(dest, _mesa_Vertex2d);
      SET_Vertex2i(dest, _mesa_Vertex2i);
      SET_Vertex2s(dest, _mesa_Vertex2s);
      SET_Vertex3d(dest, _mesa_Vertex3d);
      SET_Vertex3i(dest, _mesa_Vertex3i);
      SET_Vertex3s(dest, _mesa_Vertex3s);
      SET_Vertex4d(dest, _mesa_Vertex4d);
      SET_Vertex4i(dest, _mesa_Vertex4i);
      SET_Vertex4s(dest, _mesa_Vertex4s);
      SET_Vertex2dv(dest, _mesa_Vertex2dv);
      SET_Vertex2iv(dest, _mesa_Vertex2iv);
      SET_Vertex2sv(dest, _mesa_Vertex2sv);
      SET_Vertex3dv(dest, _mesa_Vertex3dv);
      SET_Vertex3iv(dest, _mesa_Vertex3iv);
      SET_Vertex3sv(dest, _mesa_Vertex3sv);
      SET_Vertex4dv(dest, _mesa_Vertex4dv);
      SET_Vertex4iv(dest, _mesa_Vertex4iv);
      SET_Vertex4sv(dest, _mesa_Vertex4sv);
      SET_MultiTexCoord1d(dest, _mesa_MultiTexCoord1d);
      SET_MultiTexCoord1dv(dest, _mesa_MultiTexCoord1dv);
      SET_MultiTexCoord1i(dest, _mesa_MultiTexCoord1i);
      SET_MultiTexCoord1iv(dest, _mesa_MultiTexCoord1iv);
      SET_MultiTexCoord1s(dest, _mesa_MultiTexCoord1s);
      SET_MultiTexCoord1sv(dest, _mesa_MultiTexCoord1sv);
      SET_MultiTexCoord2d(dest, _mesa_MultiTexCoord2d);
      SET_MultiTexCoord2dv(dest, _mesa_MultiTexCoord2dv);
      SET_MultiTexCoord2i(dest, _mesa_MultiTexCoord2i);
      SET_MultiTexCoord2iv(dest, _mesa_MultiTexCoord2iv);
      SET_MultiTexCoord2s(dest, _mesa_MultiTexCoord2s);
      SET_MultiTexCoord2sv(dest, _mesa_MultiTexCoord2sv);
      SET_MultiTexCoord3d(dest, _mesa_MultiTexCoord3d);
      SET_MultiTexCoord3dv(dest, _mesa_MultiTexCoord3dv);
      SET_MultiTexCoord3i(dest, _mesa_MultiTexCoord3i);
      SET_MultiTexCoord3iv(dest, _mesa_MultiTexCoord3iv);
      SET_MultiTexCoord3s(dest, _mesa_MultiTexCoord3s);
      SET_MultiTexCoord3sv(dest, _mesa_MultiTexCoord3sv);
      SET_MultiTexCoord4d(dest, _mesa_MultiTexCoord4d);
      SET_MultiTexCoord4dv(dest, _mesa_MultiTexCoord4dv);
      SET_MultiTexCoord4i(dest, _mesa_MultiTexCoord4i);
      SET_MultiTexCoord4iv(dest, _mesa_MultiTexCoord4iv);
      SET_MultiTexCoord4s(dest, _mesa_MultiTexCoord4s);
      SET_MultiTexCoord4sv(dest, _mesa_MultiTexCoord4sv);
      SET_EvalCoord2dv(dest, _mesa_EvalCoord2dv);
      SET_EvalCoord2fv(dest, _mesa_EvalCoord2fv);
      SET_EvalCoord2d(dest, _mesa_EvalCoord2d);
      SET_EvalCoord1dv(dest, _mesa_EvalCoord1dv);
      SET_EvalCoord1fv(dest, _mesa_EvalCoord1fv);
      SET_EvalCoord1d(dest, _mesa_EvalCoord1d);
      SET_Materiali(dest, _mesa_Materiali);
      SET_Materialiv(dest, _mesa_Materialiv);
      SET_Rectd(dest, _mesa_Rectd);
      SET_Rectdv(dest, _mesa_Rectdv);
      SET_Rectfv(dest, _mesa_Rectfv);
      SET_Recti(dest, _mesa_Recti);
      SET_Rectiv(dest, _mesa_Rectiv);
      SET_Rects(dest, _mesa_Rects);
      SET_Rectsv(dest, _mesa_Rectsv);
      SET_FogCoordd(dest, _mesa_FogCoordd);
      SET_FogCoorddv(dest, _mesa_FogCoorddv);
   }
a1723 33
   if (ctx->API == API_OPENGL_COMPAT) {
      SET_VertexAttrib1sNV(dest, _mesa_VertexAttrib1sNV);
      SET_VertexAttrib1dNV(dest, _mesa_VertexAttrib1dNV);
      SET_VertexAttrib2sNV(dest, _mesa_VertexAttrib2sNV);
      SET_VertexAttrib2dNV(dest, _mesa_VertexAttrib2dNV);
      SET_VertexAttrib3sNV(dest, _mesa_VertexAttrib3sNV);
      SET_VertexAttrib3dNV(dest, _mesa_VertexAttrib3dNV);
      SET_VertexAttrib4sNV(dest, _mesa_VertexAttrib4sNV);
      SET_VertexAttrib4dNV(dest, _mesa_VertexAttrib4dNV);
      SET_VertexAttrib4ubNV(dest, _mesa_VertexAttrib4ubNV);
      SET_VertexAttrib1svNV(dest, _mesa_VertexAttrib1svNV);
      SET_VertexAttrib1dvNV(dest, _mesa_VertexAttrib1dvNV);
      SET_VertexAttrib2svNV(dest, _mesa_VertexAttrib2svNV);
      SET_VertexAttrib2dvNV(dest, _mesa_VertexAttrib2dvNV);
      SET_VertexAttrib3svNV(dest, _mesa_VertexAttrib3svNV);
      SET_VertexAttrib3dvNV(dest, _mesa_VertexAttrib3dvNV);
      SET_VertexAttrib4svNV(dest, _mesa_VertexAttrib4svNV);
      SET_VertexAttrib4dvNV(dest, _mesa_VertexAttrib4dvNV);
      SET_VertexAttrib4ubvNV(dest, _mesa_VertexAttrib4ubvNV);
      SET_VertexAttribs1svNV(dest, _mesa_VertexAttribs1svNV);
      SET_VertexAttribs1fvNV(dest, _mesa_VertexAttribs1fvNV);
      SET_VertexAttribs1dvNV(dest, _mesa_VertexAttribs1dvNV);
      SET_VertexAttribs2svNV(dest, _mesa_VertexAttribs2svNV);
      SET_VertexAttribs2fvNV(dest, _mesa_VertexAttribs2fvNV);
      SET_VertexAttribs2dvNV(dest, _mesa_VertexAttribs2dvNV);
      SET_VertexAttribs3svNV(dest, _mesa_VertexAttribs3svNV);
      SET_VertexAttribs3fvNV(dest, _mesa_VertexAttribs3fvNV);
      SET_VertexAttribs3dvNV(dest, _mesa_VertexAttribs3dvNV);
      SET_VertexAttribs4svNV(dest, _mesa_VertexAttribs4svNV);
      SET_VertexAttribs4fvNV(dest, _mesa_VertexAttribs4fvNV);
      SET_VertexAttribs4dvNV(dest, _mesa_VertexAttribs4dvNV);
      SET_VertexAttribs4ubvNV(dest, _mesa_VertexAttribs4ubvNV);
   }
d1725 1
a1725 39
   if (_mesa_is_desktop_gl(ctx)) {
      SET_VertexAttrib1s(dest, _mesa_VertexAttrib1s);
      SET_VertexAttrib1d(dest, _mesa_VertexAttrib1d);
      SET_VertexAttrib2s(dest, _mesa_VertexAttrib2s);
      SET_VertexAttrib2d(dest, _mesa_VertexAttrib2d);
      SET_VertexAttrib3s(dest, _mesa_VertexAttrib3s);
      SET_VertexAttrib3d(dest, _mesa_VertexAttrib3d);
      SET_VertexAttrib4s(dest, _mesa_VertexAttrib4s);
      SET_VertexAttrib4d(dest, _mesa_VertexAttrib4d);
      SET_VertexAttrib1sv(dest, _mesa_VertexAttrib1sv);
      SET_VertexAttrib1dv(dest, _mesa_VertexAttrib1dv);
      SET_VertexAttrib2sv(dest, _mesa_VertexAttrib2sv);
      SET_VertexAttrib2dv(dest, _mesa_VertexAttrib2dv);
      SET_VertexAttrib3sv(dest, _mesa_VertexAttrib3sv);
      SET_VertexAttrib3dv(dest, _mesa_VertexAttrib3dv);
      SET_VertexAttrib4sv(dest, _mesa_VertexAttrib4sv);
      SET_VertexAttrib4dv(dest, _mesa_VertexAttrib4dv);
      SET_VertexAttrib4Nub(dest, _mesa_VertexAttrib4Nub);
      SET_VertexAttrib4Nubv(dest, _mesa_VertexAttrib4Nubv);
      SET_VertexAttrib4bv(dest, _mesa_VertexAttrib4bv);
      SET_VertexAttrib4iv(dest, _mesa_VertexAttrib4iv);
      SET_VertexAttrib4ubv(dest, _mesa_VertexAttrib4ubv);
      SET_VertexAttrib4usv(dest, _mesa_VertexAttrib4usv);
      SET_VertexAttrib4uiv(dest, _mesa_VertexAttrib4uiv);
      SET_VertexAttrib4Nbv(dest, _mesa_VertexAttrib4Nbv);
      SET_VertexAttrib4Nsv(dest, _mesa_VertexAttrib4Nsv);
      SET_VertexAttrib4Nusv(dest, _mesa_VertexAttrib4Nusv);
      SET_VertexAttrib4Niv(dest, _mesa_VertexAttrib4Niv);
      SET_VertexAttrib4Nuiv(dest, _mesa_VertexAttrib4Nuiv);

      /* GL_EXT_gpu_shader4, GL 3.0 */
      SET_VertexAttribI1iv(dest, _mesa_VertexAttribI1iv);
      SET_VertexAttribI1uiv(dest, _mesa_VertexAttribI1uiv);
      SET_VertexAttribI4bv(dest, _mesa_VertexAttribI4bv);
      SET_VertexAttribI4sv(dest, _mesa_VertexAttribI4sv);
      SET_VertexAttribI4ubv(dest, _mesa_VertexAttribI4ubv);
      SET_VertexAttribI4usv(dest, _mesa_VertexAttribI4usv);
   }
}
@


1.1.1.6
log
@Import Mesa 10.2.3
@
text
@d4 1
a4 1
 * \author Keith Whitwell <keithw@@vmware.com>
d37 1
@


