head	1.11;
access;
symbols
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.12.23.05.17.53;	author jsg;	state dead;
branches;
next	1.10;
commitid	TnlogFl9nOv2eaRf;

1.10
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.9;
commitid	4ry2gvZGMXkCUD2n;

1.9
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.8;
commitid	mcxB0JvoI9gTDYXU;

1.8
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.06.33;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.19;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.44;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.31;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.50.32;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.50.32;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.16.59;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.07;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.13.04;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.50.10;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.11
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 * Copyright (C) 2009  VMware, Inc.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


#ifndef VARRAY_H
#define VARRAY_H


#include "glheader.h"
#include "bufferobj.h"

struct gl_client_array;
struct gl_context;


/**
 * Compute the index of the last array element that can be safely accessed in
 * a vertex array.  We can really only do this when the array lives in a VBO.
 * The array->_MaxElement field will be updated.
 * Later in glDrawArrays/Elements/etc we can do some bounds checking.
 */
static inline void
_mesa_update_array_max_element(struct gl_client_array *array)
{
   assert(array->Enabled);

   if (array->BufferObj->Name) {
      GLsizeiptrARB offset = (GLsizeiptrARB) array->Ptr;
      GLsizeiptrARB bufSize = (GLsizeiptrARB) array->BufferObj->Size;

      if (offset < bufSize) {
         const GLuint stride = array->StrideB ?
                                 array->StrideB : array->_ElementSize;
         array->_MaxElement = (bufSize - offset + stride
                                  - array->_ElementSize) / stride;
      }
      else {
	 array->_MaxElement = 0;
      }
   }
   else {
      /* user-space array, no idea how big it is */
      array->_MaxElement = 2 * 1000 * 1000 * 1000; /* just a big number */
   }
}


/**
 * Returns a pointer to the vertex attribute data in a client array,
 * or the offset into the vertex buffer for an array that resides in
 * a vertex buffer.
 */
static inline const GLubyte *
_mesa_vertex_attrib_address(const struct gl_vertex_attrib_array *array,
                            const struct gl_vertex_buffer_binding *binding)
{
   if (_mesa_is_bufferobj(binding->BufferObj))
      return (const GLubyte *) (binding->Offset + array->RelativeOffset);
   else
      return array->Ptr;       
}

/**
 * Sets the fields in a gl_client_array to values derived from a
 * gl_vertex_attrib_array and a gl_vertex_buffer_binding.
 */
static inline void
_mesa_update_client_array(struct gl_context *ctx,
                          struct gl_client_array *dst,
                          const struct gl_vertex_attrib_array *src,
                          const struct gl_vertex_buffer_binding *binding)
{
   dst->Size = src->Size;
   dst->Type = src->Type;
   dst->Format = src->Format;
   dst->Stride = src->Stride;
   dst->StrideB = binding->Stride;
   dst->Ptr = _mesa_vertex_attrib_address(src, binding);
   dst->Enabled = src->Enabled;
   dst->Normalized = src->Normalized;
   dst->Integer = src->Integer;
   dst->InstanceDivisor = binding->InstanceDivisor;
   dst->_ElementSize = src->_ElementSize;
   _mesa_reference_buffer_object(ctx, &dst->BufferObj, binding->BufferObj);
}

static inline bool
_mesa_attr_zero_aliases_vertex(struct gl_context *ctx)
{
   const bool is_forward_compatible_context =
      ctx->Const.ContextFlags & GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT;

   /* In OpenGL 3.1 attribute 0 becomes non-magic, just like in OpenGL ES
    * 2.0.  Note that we cannot just check for API_OPENGL_COMPAT here because
    * that will erroneously allow this usage in a 3.0 forward-compatible
    * context too.
    */
   return (ctx->API == API_OPENGLES
           || (ctx->API == API_OPENGL_COMPAT
               && !is_forward_compatible_context));
}

extern void GLAPIENTRY
_mesa_VertexPointer(GLint size, GLenum type, GLsizei stride,
                    const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_NormalPointer(GLenum type, GLsizei stride, const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_ColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_IndexPointer(GLenum type, GLsizei stride, const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_TexCoordPointer(GLint size, GLenum type, GLsizei stride,
                      const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_EdgeFlagPointer(GLsizei stride, const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_VertexPointerEXT(GLint size, GLenum type, GLsizei stride,
                       GLsizei count, const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_NormalPointerEXT(GLenum type, GLsizei stride, GLsizei count,
                       const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_ColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count,
                      const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_IndexPointerEXT(GLenum type, GLsizei stride, GLsizei count,
                      const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_TexCoordPointerEXT(GLint size, GLenum type, GLsizei stride,
                         GLsizei count, const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_EdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *ptr);


extern void GLAPIENTRY
_mesa_FogCoordPointer(GLenum type, GLsizei stride, const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_SecondaryColorPointer(GLint size, GLenum type,
			       GLsizei stride, const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_PointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_VertexAttribPointer(GLuint index, GLint size, GLenum type,
                             GLboolean normalized, GLsizei stride,
                             const GLvoid *pointer);

void GLAPIENTRY
_mesa_VertexAttribIPointer(GLuint index, GLint size, GLenum type,
                           GLsizei stride, const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_EnableVertexAttribArray(GLuint index);


extern void GLAPIENTRY
_mesa_DisableVertexAttribArray(GLuint index);


extern void GLAPIENTRY
_mesa_GetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);


extern void GLAPIENTRY
_mesa_GetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);


extern void GLAPIENTRY
_mesa_GetVertexAttribiv(GLuint index, GLenum pname, GLint *params);


extern void GLAPIENTRY
_mesa_GetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);


extern void GLAPIENTRY
_mesa_GetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);


extern void GLAPIENTRY
_mesa_GetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer);


extern void GLAPIENTRY
_mesa_InterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);


extern void GLAPIENTRY
_mesa_MultiDrawArrays( GLenum mode, const GLint *first,
                          const GLsizei *count, GLsizei primcount );

extern void GLAPIENTRY
_mesa_MultiDrawElementsEXT( GLenum mode, const GLsizei *count, GLenum type,
                            const GLvoid **indices, GLsizei primcount );

extern void GLAPIENTRY
_mesa_MultiDrawElementsBaseVertex( GLenum mode,
				   const GLsizei *count, GLenum type,
				   const GLvoid **indices, GLsizei primcount,
				   const GLint *basevertex);

extern void GLAPIENTRY
_mesa_MultiModeDrawArraysIBM( const GLenum * mode, const GLint * first,
			      const GLsizei * count,
			      GLsizei primcount, GLint modestride );


extern void GLAPIENTRY
_mesa_MultiModeDrawElementsIBM( const GLenum * mode, const GLsizei * count,
				GLenum type, const GLvoid * const * indices,
				GLsizei primcount, GLint modestride );

extern void GLAPIENTRY
_mesa_LockArraysEXT(GLint first, GLsizei count);

extern void GLAPIENTRY
_mesa_UnlockArraysEXT( void );


extern void GLAPIENTRY
_mesa_DrawArrays(GLenum mode, GLint first, GLsizei count);

extern void GLAPIENTRY
_mesa_DrawElements(GLenum mode, GLsizei count, GLenum type,
                   const GLvoid *indices);

extern void GLAPIENTRY
_mesa_DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count,
                        GLenum type, const GLvoid *indices);

extern void GLAPIENTRY
_mesa_DrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type,
			     const GLvoid *indices, GLint basevertex);

extern void GLAPIENTRY
_mesa_DrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end,
				  GLsizei count, GLenum type,
				  const GLvoid *indices,
				  GLint basevertex);

extern void GLAPIENTRY
_mesa_DrawTransformFeedback(GLenum mode, GLuint name);

extern void GLAPIENTRY
_mesa_PrimitiveRestartIndex(GLuint index);


extern void GLAPIENTRY
_mesa_VertexAttribDivisor(GLuint index, GLuint divisor);

extern unsigned
_mesa_primitive_restart_index(const struct gl_context *ctx, GLenum ib_type);

extern void GLAPIENTRY
_mesa_BindVertexBuffer(GLuint bindingIndex, GLuint buffer, GLintptr offset,
                       GLsizei stride);

extern void GLAPIENTRY
_mesa_BindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers,
                        const GLintptr *offsets, const GLsizei *strides);

extern void GLAPIENTRY
_mesa_VertexAttribFormat(GLuint attribIndex, GLint size, GLenum type,
                         GLboolean normalized, GLuint relativeOffset);

extern void GLAPIENTRY
_mesa_VertexAttribIFormat(GLuint attribIndex, GLint size, GLenum type,
                          GLuint relativeOffset);

extern void GLAPIENTRY
_mesa_VertexAttribLFormat(GLuint attribIndex, GLint size, GLenum type,
                          GLuint relativeOffset);

extern void GLAPIENTRY
_mesa_VertexAttribBinding(GLuint attribIndex, GLuint bindingIndex);

extern void GLAPIENTRY
_mesa_VertexBindingDivisor(GLuint bindingIndex, GLuint divisor);


extern void
_mesa_copy_client_array(struct gl_context *ctx,
                        struct gl_client_array *dst,
                        struct gl_client_array *src);

extern void
_mesa_copy_vertex_attrib_array(struct gl_context *ctx,
                               struct gl_vertex_attrib_array *dst,
                               const struct gl_vertex_attrib_array *src);

extern void
_mesa_copy_vertex_buffer_binding(struct gl_context *ctx,
                                 struct gl_vertex_buffer_binding *dst,
                                 const struct gl_vertex_buffer_binding *src);

extern void
_mesa_print_arrays(struct gl_context *ctx);

extern void
_mesa_init_varray( struct gl_context * ctx );

extern void 
_mesa_free_varray_data(struct gl_context *ctx);

#endif
@


1.10
log
@Merge Mesa 10.2.9
@
text
@@


1.9
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d37 33
a272 4

extern void GLAPIENTRY
_mesa_DrawArraysInstanced(GLenum mode, GLint first, GLsizei count,
                          GLsizei primcount);
@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@a36 33

/**
 * Compute the index of the last array element that can be safely accessed in
 * a vertex array.  We can really only do this when the array lives in a VBO.
 * The array->_MaxElement field will be updated.
 * Later in glDrawArrays/Elements/etc we can do some bounds checking.
 */
static inline void
_mesa_update_array_max_element(struct gl_client_array *array)
{
   assert(array->Enabled);

   if (array->BufferObj->Name) {
      GLsizeiptrARB offset = (GLsizeiptrARB) array->Ptr;
      GLsizeiptrARB bufSize = (GLsizeiptrARB) array->BufferObj->Size;

      if (offset < bufSize) {
         const GLuint stride = array->StrideB ?
                                 array->StrideB : array->_ElementSize;
         array->_MaxElement = (bufSize - offset + stride
                                  - array->_ElementSize) / stride;
      }
      else {
	 array->_MaxElement = 0;
      }
   }
   else {
      /* user-space array, no idea how big it is */
      array->_MaxElement = 2 * 1000 * 1000 * 1000; /* just a big number */
   }
}


d240 4
@


1.7
log
@Merge Mesa 9.2.0
@
text
@d32 1
d54 4
a57 2
	 array->_MaxElement = (bufSize - offset + array->StrideB
                               - array->_ElementSize) / array->StrideB;
d70 55
a128 6
extern void GLAPIENTRY
_mesa_UnlockArraysEXT( void );

extern void GLAPIENTRY
_mesa_LockArraysEXT(GLint first, GLsizei count);

d305 27
d337 9
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.6
d20 4
a23 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
a31 1
#include "mfeatures.h"
d43 1
a43 1
static INLINE void
a66 2
#if _HAVE_FULL_GL

d129 1
a129 1
_mesa_FogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *ptr);
d133 1
a133 1
_mesa_SecondaryColorPointerEXT(GLint size, GLenum type,
d138 1
a138 1
_mesa_PointSizePointer(GLenum type, GLsizei stride, const GLvoid *ptr);
d142 1
a142 6
_mesa_VertexAttribPointerNV(GLuint index, GLint size, GLenum type,
                            GLsizei stride, const GLvoid *pointer);


extern void GLAPIENTRY
_mesa_VertexAttribPointerARB(GLuint index, GLint size, GLenum type,
d152 1
a152 1
_mesa_EnableVertexAttribArrayARB(GLuint index);
d156 1
a156 1
_mesa_DisableVertexAttribArrayARB(GLuint index);
d160 1
a160 1
_mesa_GetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params);
d164 1
a164 1
_mesa_GetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params);
d168 1
a168 1
_mesa_GetVertexAttribivARB(GLuint index, GLenum pname, GLint *params);
d180 1
a180 1
_mesa_GetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer);
d188 1
a188 1
_mesa_MultiDrawArraysEXT( GLenum mode, const GLint *first,
d241 3
d250 2
a266 8

#else

/** No-op */
#define _mesa_init_varray( c )  ((void)0)
#define _mesa_free_varray_data( c )  ((void)0)

#endif
@


1.5
log
@Merge Mesa 7.10.3
@
text
@d37 31
d250 4
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d31 5
a35 1
#include "mtypes.h"
d123 36
d165 2
a166 2
_mesa_MultiDrawArraysEXT( GLenum mode, GLint *first,
                          GLsizei *count, GLsizei primcount );
d217 3
d222 1
a222 1
_mesa_copy_client_array(GLcontext *ctx,
d228 1
a228 1
_mesa_print_arrays(GLcontext *ctx);
d231 1
a231 1
_mesa_init_varray( GLcontext * ctx );
d234 1
a234 1
_mesa_free_varray_data(GLcontext *ctx);
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a0 10
/**
 * \file varray.h
 * Vertex arrays.
 *
 * \if subset
 * (No-op)
 *
 * \endif
 */

d3 1
a3 1
 * Version:  4.1
d5 2
a6 1
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
d132 5
d155 32
d190 3
d197 1
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d115 4
@


1.1
log
@Initial revision
@
text
@d149 5
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d1 10
d13 1
a13 1
 * Version:  7.6
d15 1
a15 2
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 * Copyright (C) 2009  VMware, Inc.  All Rights Reserved.
d40 1
a40 5
#include "glheader.h"
#include "mfeatures.h"

struct gl_client_array;
struct gl_context;
a114 4
_mesa_PointSizePointer(GLenum type, GLsizei stride, const GLvoid *ptr);


extern void GLAPIENTRY
a123 36
void GLAPIENTRY
_mesa_VertexAttribIPointer(GLuint index, GLint size, GLenum type,
                           GLsizei stride, const GLvoid *ptr);


extern void GLAPIENTRY
_mesa_EnableVertexAttribArrayARB(GLuint index);


extern void GLAPIENTRY
_mesa_DisableVertexAttribArrayARB(GLuint index);


extern void GLAPIENTRY
_mesa_GetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params);


extern void GLAPIENTRY
_mesa_GetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params);


extern void GLAPIENTRY
_mesa_GetVertexAttribivARB(GLuint index, GLenum pname, GLint *params);


extern void GLAPIENTRY
_mesa_GetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);


extern void GLAPIENTRY
_mesa_GetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);


extern void GLAPIENTRY
_mesa_GetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer);

d130 2
a131 2
_mesa_MultiDrawArraysEXT( GLenum mode, const GLint *first,
                          const GLsizei *count, GLsizei primcount );
a136 5
extern void GLAPIENTRY
_mesa_MultiDrawElementsBaseVertex( GLenum mode,
				   const GLsizei *count, GLenum type,
				   const GLvoid **indices, GLsizei primcount,
				   const GLint *basevertex);
a148 37
extern void GLAPIENTRY
_mesa_LockArraysEXT(GLint first, GLsizei count);

extern void GLAPIENTRY
_mesa_UnlockArraysEXT( void );


extern void GLAPIENTRY
_mesa_DrawArrays(GLenum mode, GLint first, GLsizei count);

extern void GLAPIENTRY
_mesa_DrawElements(GLenum mode, GLsizei count, GLenum type,
                   const GLvoid *indices);

extern void GLAPIENTRY
_mesa_DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count,
                        GLenum type, const GLvoid *indices);

extern void GLAPIENTRY
_mesa_DrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type,
			     const GLvoid *indices, GLint basevertex);

extern void GLAPIENTRY
_mesa_DrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end,
				  GLsizei count, GLenum type,
				  const GLvoid *indices,
				  GLint basevertex);

extern void GLAPIENTRY
_mesa_PrimitiveRestartIndex(GLuint index);


extern void
_mesa_copy_client_array(struct gl_context *ctx,
                        struct gl_client_array *dst,
                        struct gl_client_array *src);

d151 1
a151 7
_mesa_print_arrays(struct gl_context *ctx);

extern void
_mesa_init_varray( struct gl_context * ctx );

extern void 
_mesa_free_varray_data(struct gl_context *ctx);
a156 1
#define _mesa_free_varray_data( c )  ((void)0)
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d3 1
d21 3
a23 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d32 1
d37 1
a37 30

/**
 * Compute the index of the last array element that can be safely accessed in
 * a vertex array.  We can really only do this when the array lives in a VBO.
 * The array->_MaxElement field will be updated.
 * Later in glDrawArrays/Elements/etc we can do some bounds checking.
 */
static inline void
_mesa_update_array_max_element(struct gl_client_array *array)
{
   assert(array->Enabled);

   if (array->BufferObj->Name) {
      GLsizeiptrARB offset = (GLsizeiptrARB) array->Ptr;
      GLsizeiptrARB bufSize = (GLsizeiptrARB) array->BufferObj->Size;

      if (offset < bufSize) {
	 array->_MaxElement = (bufSize - offset + array->StrideB
                               - array->_ElementSize) / array->StrideB;
      }
      else {
	 array->_MaxElement = 0;
      }
   }
   else {
      /* user-space array, no idea how big it is */
      array->_MaxElement = 2 * 1000 * 1000 * 1000; /* just a big number */
   }
}

d101 1
a101 1
_mesa_FogCoordPointer(GLenum type, GLsizei stride, const GLvoid *ptr);
d105 1
a105 1
_mesa_SecondaryColorPointer(GLint size, GLenum type,
d110 1
a110 1
_mesa_PointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *ptr);
d114 6
a119 1
_mesa_VertexAttribPointer(GLuint index, GLint size, GLenum type,
d129 1
a129 1
_mesa_EnableVertexAttribArray(GLuint index);
d133 1
a133 1
_mesa_DisableVertexAttribArray(GLuint index);
d137 1
a137 1
_mesa_GetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);
d141 1
a141 1
_mesa_GetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
d145 1
a145 1
_mesa_GetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
d157 1
a157 1
_mesa_GetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer);
d165 1
a165 1
_mesa_MultiDrawArrays( GLenum mode, const GLint *first,
a217 3
_mesa_DrawTransformFeedback(GLenum mode, GLuint name);

extern void GLAPIENTRY
a220 6
extern void GLAPIENTRY
_mesa_VertexAttribDivisor(GLuint index, GLuint divisor);

extern unsigned
_mesa_primitive_restart_index(const struct gl_context *ctx, GLenum ib_type);

d235 8
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@a31 1
#include "bufferobj.h"
d53 2
a54 4
         const GLuint stride = array->StrideB ?
                                 array->StrideB : array->_ElementSize;
         array->_MaxElement = (bufSize - offset + stride
                                  - array->_ElementSize) / stride;
d67 3
a69 14
/**
 * Returns a pointer to the vertex attribute data in a client array,
 * or the offset into the vertex buffer for an array that resides in
 * a vertex buffer.
 */
static inline const GLubyte *
_mesa_vertex_attrib_address(const struct gl_vertex_attrib_array *array,
                            const struct gl_vertex_buffer_binding *binding)
{
   if (_mesa_is_bufferobj(binding->BufferObj))
      return (const GLubyte *) (binding->Offset + array->RelativeOffset);
   else
      return array->Ptr;       
}
d71 2
a72 39
/**
 * Sets the fields in a gl_client_array to values derived from a
 * gl_vertex_attrib_array and a gl_vertex_buffer_binding.
 */
static inline void
_mesa_update_client_array(struct gl_context *ctx,
                          struct gl_client_array *dst,
                          const struct gl_vertex_attrib_array *src,
                          const struct gl_vertex_buffer_binding *binding)
{
   dst->Size = src->Size;
   dst->Type = src->Type;
   dst->Format = src->Format;
   dst->Stride = src->Stride;
   dst->StrideB = binding->Stride;
   dst->Ptr = _mesa_vertex_attrib_address(src, binding);
   dst->Enabled = src->Enabled;
   dst->Normalized = src->Normalized;
   dst->Integer = src->Integer;
   dst->InstanceDivisor = binding->InstanceDivisor;
   dst->_ElementSize = src->_ElementSize;
   _mesa_reference_buffer_object(ctx, &dst->BufferObj, binding->BufferObj);
}

static inline bool
_mesa_attr_zero_aliases_vertex(struct gl_context *ctx)
{
   const bool is_forward_compatible_context =
      ctx->Const.ContextFlags & GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT;

   /* In OpenGL 3.1 attribute 0 becomes non-magic, just like in OpenGL ES
    * 2.0.  Note that we cannot just check for API_OPENGL_COMPAT here because
    * that will erroneously allow this usage in a 3.0 forward-compatible
    * context too.
    */
   return (ctx->API == API_OPENGLES
           || (ctx->API == API_OPENGL_COMPAT
               && !is_forward_compatible_context));
}
d75 1
a75 2
_mesa_VertexPointer(GLint size, GLenum type, GLsizei stride,
                    const GLvoid *ptr);
a252 27
extern void GLAPIENTRY
_mesa_BindVertexBuffer(GLuint bindingIndex, GLuint buffer, GLintptr offset,
                       GLsizei stride);

extern void GLAPIENTRY
_mesa_BindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers,
                        const GLintptr *offsets, const GLsizei *strides);

extern void GLAPIENTRY
_mesa_VertexAttribFormat(GLuint attribIndex, GLint size, GLenum type,
                         GLboolean normalized, GLuint relativeOffset);

extern void GLAPIENTRY
_mesa_VertexAttribIFormat(GLuint attribIndex, GLint size, GLenum type,
                          GLuint relativeOffset);

extern void GLAPIENTRY
_mesa_VertexAttribLFormat(GLuint attribIndex, GLint size, GLenum type,
                          GLuint relativeOffset);

extern void GLAPIENTRY
_mesa_VertexAttribBinding(GLuint attribIndex, GLuint bindingIndex);

extern void GLAPIENTRY
_mesa_VertexBindingDivisor(GLuint bindingIndex, GLuint divisor);


a257 9
extern void
_mesa_copy_vertex_attrib_array(struct gl_context *ctx,
                               struct gl_vertex_attrib_array *dst,
                               const struct gl_vertex_attrib_array *src);

extern void
_mesa_copy_vertex_buffer_binding(struct gl_context *ctx,
                                 struct gl_vertex_buffer_binding *dst,
                                 const struct gl_vertex_buffer_binding *src);
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d37 33
a272 4

extern void GLAPIENTRY
_mesa_DrawArraysInstanced(GLenum mode, GLint first, GLsizei count,
                          GLsizei primcount);
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@a36 33

/**
 * Compute the index of the last array element that can be safely accessed in
 * a vertex array.  We can really only do this when the array lives in a VBO.
 * The array->_MaxElement field will be updated.
 * Later in glDrawArrays/Elements/etc we can do some bounds checking.
 */
static inline void
_mesa_update_array_max_element(struct gl_client_array *array)
{
   assert(array->Enabled);

   if (array->BufferObj->Name) {
      GLsizeiptrARB offset = (GLsizeiptrARB) array->Ptr;
      GLsizeiptrARB bufSize = (GLsizeiptrARB) array->BufferObj->Size;

      if (offset < bufSize) {
         const GLuint stride = array->StrideB ?
                                 array->StrideB : array->_ElementSize;
         array->_MaxElement = (bufSize - offset + stride
                                  - array->_ElementSize) / stride;
      }
      else {
	 array->_MaxElement = 0;
      }
   }
   else {
      /* user-space array, no idea how big it is */
      array->_MaxElement = 2 * 1000 * 1000 * 1000; /* just a big number */
   }
}


d240 4
@


