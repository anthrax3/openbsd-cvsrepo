head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.52;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.22;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.19;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.46;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.16.38;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.01;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.12.41;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.49.47;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 * Copyright (c) 2008-2009  VMware, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


#include "imports.h"
#include "formats.h"
#include "macros.h"
#include "glformats.h"


/**
 * Information about texture formats.
 */
struct gl_format_info
{
   mesa_format Name;

   /** text name for debugging */
   const char *StrName;

   /**
    * Base format is one of GL_RED, GL_RG, GL_RGB, GL_RGBA, GL_ALPHA,
    * GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_YCBCR_MESA,
    * GL_DEPTH_COMPONENT, GL_STENCIL_INDEX, GL_DEPTH_STENCIL, GL_DUDV_ATI.
    */
   GLenum BaseFormat;

   /**
    * Logical data type: one of  GL_UNSIGNED_NORMALIZED, GL_SIGNED_NORMALIZED,
    * GL_UNSIGNED_INT, GL_INT, GL_FLOAT.
    */
   GLenum DataType;

   GLubyte RedBits;
   GLubyte GreenBits;
   GLubyte BlueBits;
   GLubyte AlphaBits;
   GLubyte LuminanceBits;
   GLubyte IntensityBits;
   GLubyte IndexBits;
   GLubyte DepthBits;
   GLubyte StencilBits;

   /**
    * To describe compressed formats.  If not compressed, Width=Height=1.
    */
   GLubyte BlockWidth, BlockHeight;
   GLubyte BytesPerBlock;
};


/**
 * Info about each format.
 * These must be in the same order as the MESA_FORMAT_* enums so that
 * we can do lookups without searching.
 */
static struct gl_format_info format_info[MESA_FORMAT_COUNT] =
{
   /* Packed unorm formats */
   {
      MESA_FORMAT_NONE,            /* Name */
      "MESA_FORMAT_NONE",          /* StrName */
      GL_NONE,                     /* BaseFormat */
      GL_NONE,                     /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      0, 0, 0                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A8B8G8R8_UNORM,  /* Name */
      "MESA_FORMAT_A8B8G8R8_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_X8B8G8R8_UNORM,  /* Name */
      "MESA_FORMAT_X8B8G8R8_UNORM",/* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R8G8B8A8_UNORM,  /* Name */
      "MESA_FORMAT_R8G8B8A8_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R8G8B8X8_UNORM,  /* Name */
      "MESA_FORMAT_R8G8B8X8_UNORM",/* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B8G8R8A8_UNORM,  /* Name */
      "MESA_FORMAT_B8G8R8A8_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B8G8R8X8_UNORM,  /* Name */
      "MESA_FORMAT_B8G8R8X8_UNORM",/* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A8R8G8B8_UNORM,  /* Name */
      "MESA_FORMAT_A8R8G8B8_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_X8R8G8B8_UNORM,  /* Name */
      "MESA_FORMAT_X8R8G8B8_UNORM",/* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_L16A16_UNORM,    /* Name */
      "MESA_FORMAT_L16A16_UNORM",  /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 16,                 /* Red/Green/Blue/AlphaBits */
      16, 0, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A16L16_UNORM,    /* Name */
      "MESA_FORMAT_A16L16_UNORM",  /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 16,                 /* Red/Green/Blue/AlphaBits */
      16, 0, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B5G6R5_UNORM,    /* Name */
      "MESA_FORMAT_B5G6R5_UNORM",  /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 6, 5, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R5G6B5_UNORM,    /* Name */
      "MESA_FORMAT_R5G6B5_UNORM",  /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 6, 5, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B4G4R4A4_UNORM,  /* Name */
      "MESA_FORMAT_B4G4R4A4_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 4,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B4G4R4X4_UNORM,
      "MESA_FORMAT_B4G4R4X4_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A4R4G4B4_UNORM,  /* Name */
      "MESA_FORMAT_A4R4G4B4_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 4,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A1B5G5R5_UNORM,  /* Name */
      "MESA_FORMAT_A1B5G5R5_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 5, 5, 1,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B5G5R5A1_UNORM,  /* Name */
      "MESA_FORMAT_B5G5R5A1_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 5, 5, 1,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B5G5R5X1_UNORM,
      "MESA_FORMAT_B5G5R5X1_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      5, 5, 5, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A1R5G5B5_UNORM,  /* Name */
      "MESA_FORMAT_A1R5G5B5_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 5, 5, 1,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_L8A8_UNORM,      /* Name */
      "MESA_FORMAT_L8A8_UNORM",    /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 8,                  /* Red/Green/Blue/AlphaBits */
      8, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A8L8_UNORM,      /* Name */
      "MESA_FORMAT_A8L8_UNORM",    /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 8,                  /* Red/Green/Blue/AlphaBits */
      8, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R8G8_UNORM,
      "MESA_FORMAT_R8G8_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_G8R8_UNORM,
      "MESA_FORMAT_G8R8_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L4A4_UNORM,      /* Name */
      "MESA_FORMAT_L4A4_UNORM",    /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 4,                  /* Red/Green/Blue/AlphaBits */
      4, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B2G3R3_UNORM,    /* Name */
      "MESA_FORMAT_B2G3R3_UNORM",  /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      3, 3, 2, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R16G16_UNORM,
      "MESA_FORMAT_R16G16_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_G16R16_UNORM,
      "MESA_FORMAT_G16R16_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_B10G10R10A2_UNORM,
      "MESA_FORMAT_B10G10R10A2_UNORM",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_B10G10R10X2_UNORM,
      "MESA_FORMAT_B10G10R10X2_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      10, 10, 10, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R10G10B10A2_UNORM,
      "MESA_FORMAT_R10G10B10A2_UNORM",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_S8_UINT_Z24_UNORM,   /* Name */
      "MESA_FORMAT_S8_UINT_Z24_UNORM", /* StrName */
      GL_DEPTH_STENCIL,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 8,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_X8_UINT_Z24_UNORM,   /* Name */
      "MESA_FORMAT_X8_UINT_Z24_UNORM", /* StrName */
      GL_DEPTH_COMPONENT,              /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 0,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_Z24_UNORM_S8_UINT,   /* Name */
      "MESA_FORMAT_Z24_UNORM_S8_UINT", /* StrName */
      GL_DEPTH_STENCIL,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 8,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_Z24_UNORM_X8_UINT,   /* Name */
      "MESA_FORMAT_Z24_UNORM_X8_UINT", /* StrName */
      GL_DEPTH_COMPONENT,              /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 0,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_YCBCR,           /* Name */
      "MESA_FORMAT_YCBCR",         /* StrName */
      GL_YCBCR_MESA,               /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_YCBCR_REV,       /* Name */
      "MESA_FORMAT_YCBCR_REV",     /* StrName */
      GL_YCBCR_MESA,               /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },

   /* Array unorm formats */
   {
      MESA_FORMAT_DUDV8,
      "MESA_FORMAT_DUDV8",
      GL_DUDV_ATI,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A_UNORM8,        /* Name */
      "MESA_FORMAT_A_UNORM8",      /* StrName */
      GL_ALPHA,                    /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A_UNORM16,       /* Name */
      "MESA_FORMAT_A_UNORM16",     /* StrName */
      GL_ALPHA,                    /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 16,                 /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_L_UNORM8,        /* Name */
      "MESA_FORMAT_L_UNORM8",      /* StrName */
      GL_LUMINANCE,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      8, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_L_UNORM16,       /* Name */
      "MESA_FORMAT_L_UNORM16",     /* StrName */
      GL_LUMINANCE,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      16, 0, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_I_UNORM8,        /* Name */
      "MESA_FORMAT_I_UNORM8",      /* StrName */
      GL_INTENSITY,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 8, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_I_UNORM16,       /* Name */
      "MESA_FORMAT_I_UNORM16",     /* StrName */
      GL_INTENSITY,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 16, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R_UNORM8,
      "MESA_FORMAT_R_UNORM8",
      GL_RED,
      GL_UNSIGNED_NORMALIZED,
      8, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_R_UNORM16,
      "MESA_FORMAT_R_UNORM16",
      GL_RED,
      GL_UNSIGNED_NORMALIZED,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_BGR_UNORM8,      /* Name */
      "MESA_FORMAT_BGR_UNORM8",    /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 3                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_RGB_UNORM8,      /* Name */
      "MESA_FORMAT_RGB_UNORM8",    /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 3                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_RGBA_UNORM16,
      "MESA_FORMAT_RGBA_UNORM16",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_UNORM16,
      "MESA_FORMAT_RGBX_UNORM16",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_Z_UNORM16,       /* Name */
      "MESA_FORMAT_Z_UNORM16",     /* StrName */
      GL_DEPTH_COMPONENT,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 16, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_Z_UNORM32,       /* Name */
      "MESA_FORMAT_Z_UNORM32",     /* StrName */
      GL_DEPTH_COMPONENT,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_S_UINT8,         /* Name */
      "MESA_FORMAT_S_UINT8",       /* StrName */
      GL_STENCIL_INDEX,            /* BaseFormat */
      GL_UNSIGNED_INT,             /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 8,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },

   /* Packed signed/normalized formats */
   {
      MESA_FORMAT_A8B8G8R8_SNORM,
      "MESA_FORMAT_A8B8G8R8_SNORM",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_X8B8G8R8_SNORM,
      "MESA_FORMAT_X8B8G8R8_SNORM",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4                       /* 4 bpp, but no alpha */
   },
   {
      MESA_FORMAT_R8G8B8A8_SNORM,
      "MESA_FORMAT_R8G8B8A8_SNORM",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R8G8B8X8_SNORM,
      "MESA_FORMAT_R8G8B8X8_SNORM",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R16G16_SNORM,
      "MESA_FORMAT_R16G16_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_G16R16_SNORM,
      "MESA_FORMAT_G16R16_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R8G8_SNORM,
      "MESA_FORMAT_R8G8_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_G8R8_SNORM,
      "MESA_FORMAT_G8R8_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L8A8_SNORM,
      "MESA_FORMAT_L8A8_SNORM",
      GL_LUMINANCE_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },

   /* Array signed/normalized formats */
   {
      MESA_FORMAT_A_SNORM8,
      "MESA_FORMAT_A_SNORM8",
      GL_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 8,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_A_SNORM16,
      "MESA_FORMAT_A_SNORM16",
      GL_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 16,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L_SNORM8,
      "MESA_FORMAT_L_SNORM8",
      GL_LUMINANCE,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_L_SNORM16,
      "MESA_FORMAT_L_SNORM16",
      GL_LUMINANCE,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_I_SNORM8,
      "MESA_FORMAT_I_SNORM8",
      GL_INTENSITY,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_I_SNORM16,
      "MESA_FORMAT_I_SNORM16",
      GL_INTENSITY,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R_SNORM8,         /* Name */
      "MESA_FORMAT_R_SNORM8",       /* StrName */
      GL_RED,                       /* BaseFormat */
      GL_SIGNED_NORMALIZED,         /* DataType */
      8, 0, 0, 0,                   /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,                /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                       /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R_SNORM16,
      "MESA_FORMAT_R_SNORM16",
      GL_RED,
      GL_SIGNED_NORMALIZED,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_LA_SNORM16,
      "MESA_FORMAT_LA_SNORM16",
      GL_LUMINANCE_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGB_SNORM16,
      "MESA_FORMAT_RGB_SNORM16",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGBA_SNORM16,
      "MESA_FORMAT_RGBA_SNORM16",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_SNORM16,
      "MESA_FORMAT_RGBX_SNORM16",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },

   /* Packed sRGB formats */
   {
      MESA_FORMAT_A8B8G8R8_SRGB,
      "MESA_FORMAT_A8B8G8R8_SRGB",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_B8G8R8A8_SRGB,
      "MESA_FORMAT_B8G8R8A8_SRGB",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_B8G8R8X8_SRGB,
      "MESA_FORMAT_B8G8R8X8_SRGB",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R8G8B8A8_SRGB,
      "MESA_FORMAT_R8G8B8A8_SRGB",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R8G8B8X8_SRGB,
      "MESA_FORMAT_R8G8B8X8_SRGB",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_L8A8_SRGB,
      "MESA_FORMAT_L8A8_SRGB",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_NORMALIZED,    
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },

   /* Array sRGB formats */
   {
      MESA_FORMAT_L_SRGB8,
      "MESA_FORMAT_L_SRGB8",
      GL_LUMINANCE,
      GL_UNSIGNED_NORMALIZED,    
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_BGR_SRGB8,
      "MESA_FORMAT_BGR_SRGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 3
   },

   /* Packed float formats */
   {
      MESA_FORMAT_R9G9B9E5_FLOAT,
      "MESA_FORMAT_RGB9_E5",
      GL_RGB,
      GL_FLOAT,
      9, 9, 9, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R11G11B10_FLOAT,
      "MESA_FORMAT_R11G11B10_FLOAT",
      GL_RGB,
      GL_FLOAT,
      11, 11, 10, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_Z32_FLOAT_S8X24_UINT,   /* Name */
      "MESA_FORMAT_Z32_FLOAT_S8X24_UINT", /* StrName */
      GL_DEPTH_STENCIL,                   /* BaseFormat */
      /* DataType here is used to answer GL_TEXTURE_DEPTH_TYPE queries, and is
       * never used for stencil because stencil is always GL_UNSIGNED_INT.
       */
      GL_FLOAT,                    /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 8,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 8                      /* BlockWidth/Height,Bytes */
   },

   /* Array float formats */
   {
      MESA_FORMAT_A_FLOAT16,
      "MESA_FORMAT_A_FLOAT16",
      GL_ALPHA,
      GL_FLOAT,
      0, 0, 0, 16,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A_FLOAT32,
      "MESA_FORMAT_A_FLOAT32",
      GL_ALPHA,
      GL_FLOAT,
      0, 0, 0, 32,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_L_FLOAT16,
      "MESA_FORMAT_L_FLOAT16",
      GL_LUMINANCE,
      GL_FLOAT,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L_FLOAT32,
      "MESA_FORMAT_L_FLOAT32",
      GL_LUMINANCE,
      GL_FLOAT,
      0, 0, 0, 0,
      32, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_FLOAT16,
      "MESA_FORMAT_LA_FLOAT16",
      GL_LUMINANCE_ALPHA,
      GL_FLOAT,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_FLOAT32,
      "MESA_FORMAT_LA_FLOAT32",
      GL_LUMINANCE_ALPHA,
      GL_FLOAT,
      0, 0, 0, 32,
      32, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_I_FLOAT16,
      "MESA_FORMAT_I_FLOAT16",
      GL_INTENSITY,
      GL_FLOAT,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_I_FLOAT32,
      "MESA_FORMAT_I_FLOAT32",
      GL_INTENSITY,
      GL_FLOAT,
      0, 0, 0, 0,
      0, 32, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R_FLOAT16,
      "MESA_FORMAT_R_FLOAT16",
      GL_RED,
      GL_FLOAT,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R_FLOAT32,
      "MESA_FORMAT_R_FLOAT32",
      GL_RED,
      GL_FLOAT,
      32, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_FLOAT16,
      "MESA_FORMAT_RG_FLOAT16",
      GL_RG,
      GL_FLOAT,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_FLOAT32,
      "MESA_FORMAT_RG_FLOAT32",
      GL_RG,
      GL_FLOAT,
      32, 32, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGB_FLOAT16,
      "MESA_FORMAT_RGB_FLOAT16",
      GL_RGB,
      GL_FLOAT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGB_FLOAT32,
      "MESA_FORMAT_RGB_FLOAT32",
      GL_RGB,
      GL_FLOAT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 12
   },
   {
      MESA_FORMAT_RGBA_FLOAT16,
      "MESA_FORMAT_RGBA_FLOAT16",
      GL_RGBA,
      GL_FLOAT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBA_FLOAT32,
      "MESA_FORMAT_RGBA_FLOAT32",
      GL_RGBA,
      GL_FLOAT,
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_RGBX_FLOAT16,
      "MESA_FORMAT_RGBX_FLOAT16",
      GL_RGB,
      GL_FLOAT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_FLOAT32,
      "MESA_FORMAT_RGBX_FLOAT32",
      GL_RGB,
      GL_FLOAT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_Z_FLOAT32,       /* Name */
      "MESA_FORMAT_Z_FLOAT32",     /* StrName */
      GL_DEPTH_COMPONENT,          /* BaseFormat */
      GL_FLOAT,                    /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },

   /* Packed signed/unsigned non-normalized integer formats */
   {
      MESA_FORMAT_B10G10R10A2_UINT,
      "MESA_FORMAT_B10G10R10A2_UINT",
      GL_RGBA,
      GL_UNSIGNED_INT,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R10G10B10A2_UINT,
      "MESA_FORMAT_R10G10B10A2_UINT",
      GL_RGBA,
      GL_UNSIGNED_INT,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },

   /* Array signed/unsigned non-normalized integer formats */
   {
      MESA_FORMAT_A_UINT8,
      "MESA_FORMAT_A_UINT8",
      GL_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 8,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_A_UINT16,
      "MESA_FORMAT_A_UINT16",
      GL_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 16,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A_UINT32,
      "MESA_FORMAT_A_UINT32",
      GL_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 32,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_A_SINT8,
      "MESA_FORMAT_A_SINT8",
      GL_ALPHA,
      GL_INT,
      0, 0, 0, 8,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_A_SINT16,
      "MESA_FORMAT_A_SINT16",
      GL_ALPHA,
      GL_INT,
      0, 0, 0, 16,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A_SINT32,
      "MESA_FORMAT_A_SINT32",
      GL_ALPHA,
      GL_INT,
      0, 0, 0, 32,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_I_UINT8,
      "MESA_FORMAT_I_UINT8",
      GL_INTENSITY,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_I_UINT16,
      "MESA_FORMAT_I_UINT16",
      GL_INTENSITY,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_I_UINT32,
      "MESA_FORMAT_I_UINT32",
      GL_INTENSITY,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      0, 32, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_I_SINT8,
      "MESA_FORMAT_I_SINT8",
      GL_INTENSITY,
      GL_INT,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_I_SINT16,
      "MESA_FORMAT_I_SINT16",
      GL_INTENSITY,
      GL_INT,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_I_SINT32,
      "MESA_FORMAT_I_SINT32",
      GL_INTENSITY,
      GL_INT,
      0, 0, 0, 0,
      0, 32, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_L_UINT8,
      "MESA_FORMAT_L_UINT8",
      GL_LUMINANCE,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_L_UINT16,
      "MESA_FORMAT_L_UINT16",
      GL_LUMINANCE,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L_UINT32,
      "MESA_FORMAT_L_UINT32",
      GL_LUMINANCE,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      32, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_L_SINT8,
      "MESA_FORMAT_L_SINT8",
      GL_LUMINANCE,
      GL_INT,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_L_SINT16,
      "MESA_FORMAT_L_SINT16",
      GL_LUMINANCE,
      GL_INT,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L_SINT32,
      "MESA_FORMAT_L_SINT32",
      GL_LUMINANCE,
      GL_INT,
      0, 0, 0, 0,
      32, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_UINT8,
      "MESA_FORMAT_LA_UINT8",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_LA_UINT16,
      "MESA_FORMAT_LA_UINT16",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_UINT32,
      "MESA_FORMAT_LA_UINT32",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 32,
      32, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_LA_SINT8,
      "MESA_FORMAT_LA_SINT8",
      GL_LUMINANCE_ALPHA,
      GL_INT,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_LA_SINT16,
      "MESA_FORMAT_LA_SINT16",
      GL_LUMINANCE_ALPHA,
      GL_INT,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_SINT32,
      "MESA_FORMAT_LA_SINT32",
      GL_LUMINANCE_ALPHA,
      GL_INT,
      0, 0, 0, 32,
      32, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_R_UINT8,
      "MESA_FORMAT_R_UINT8",
      GL_RED,
      GL_UNSIGNED_INT,
      8, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_R_UINT16,
      "MESA_FORMAT_R_UINT16",
      GL_RED,
      GL_UNSIGNED_INT,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R_UINT32,
      "MESA_FORMAT_R_UINT32",
      GL_RED,
      GL_UNSIGNED_INT,
      32, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R_SINT8,
      "MESA_FORMAT_R_SINT8",
      GL_RED,
      GL_INT,
      8, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_R_SINT16,
      "MESA_FORMAT_R_SINT16",
      GL_RED,
      GL_INT,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R_SINT32,
      "MESA_FORMAT_R_SINT32",
      GL_RED,
      GL_INT,
      32, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_UINT8,
      "MESA_FORMAT_RG_UINT8",
      GL_RG,
      GL_UNSIGNED_INT,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RG_UINT16,
      "MESA_FORMAT_RG_UINT16",
      GL_RG,
      GL_UNSIGNED_INT,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_UINT32,
      "MESA_FORMAT_RG_UINT32",
      GL_RG,
      GL_UNSIGNED_INT,
      32, 32, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RG_SINT8,
      "MESA_FORMAT_RG_SINT8",
      GL_RG,
      GL_INT,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RG_SINT16,
      "MESA_FORMAT_RG_SINT16",
      GL_RG,
      GL_INT,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_SINT32,
      "MESA_FORMAT_RG_SINT32",
      GL_RG,
      GL_INT,
      32, 32, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGB_UINT8,
      "MESA_FORMAT_RGB_UINT8",
      GL_RGB,
      GL_UNSIGNED_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 3
   },
   {
      MESA_FORMAT_RGB_UINT16,
      "MESA_FORMAT_RGB_UINT16",
      GL_RGB,
      GL_UNSIGNED_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGB_UINT32,
      "MESA_FORMAT_RGB_UINT32",
      GL_RGB,
      GL_UNSIGNED_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 12
   },
   {
      MESA_FORMAT_RGB_SINT8,
      "MESA_FORMAT_RGB_SINT8",
      GL_RGB,
      GL_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 3
   },
   {
      MESA_FORMAT_RGB_SINT16,
      "MESA_FORMAT_RGB_SINT16",
      GL_RGB,
      GL_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGB_SINT32,
      "MESA_FORMAT_RGB_SINT32",
      GL_RGB,
      GL_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 12
   },
   {
      MESA_FORMAT_RGBA_UINT8,
      "MESA_FORMAT_RGBA_UINT8",
      GL_RGBA,
      GL_UNSIGNED_INT,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGBA_UINT16,
      "MESA_FORMAT_RGBA_UINT16",
      GL_RGBA,
      GL_UNSIGNED_INT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBA_UINT32,
      "MESA_FORMAT_RGBA_UINT32",
      GL_RGBA,
      GL_UNSIGNED_INT,
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_RGBA_SINT8,
      "MESA_FORMAT_RGBA_SINT8",
      GL_RGBA,
      GL_INT,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGBA_SINT16,
      "MESA_FORMAT_RGBA_SINT16",
      GL_RGBA,
      GL_INT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBA_SINT32,
      "MESA_FORMAT_RGBA_SINT32",
      GL_RGBA,
      GL_INT,
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_RGBX_UINT8,
      "MESA_FORMAT_RGBX_UINT8",
      GL_RGB,
      GL_UNSIGNED_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGBX_UINT16,
      "MESA_FORMAT_RGBX_UINT16",
      GL_RGB,
      GL_UNSIGNED_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_UINT32,
      "MESA_FORMAT_RGBX_UINT32",
      GL_RGB,
      GL_UNSIGNED_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_RGBX_SINT8,
      "MESA_FORMAT_RGBX_SINT8",
      GL_RGB,
      GL_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGBX_SINT16,
      "MESA_FORMAT_RGBX_SINT16",
      GL_RGB,
      GL_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_SINT32,
      "MESA_FORMAT_RGBX_SINT32",
      GL_RGB,
      GL_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 16
   },

   /* DXT compressed formats */
   {
      MESA_FORMAT_RGB_DXT1,        /* Name */
      "MESA_FORMAT_RGB_DXT1",      /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 0,                  /* approx Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      4, 4, 8                      /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_RGBA_DXT1,
      "MESA_FORMAT_RGBA_DXT1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 8                      /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_RGBA_DXT3,
      "MESA_FORMAT_RGBA_DXT3",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_RGBA_DXT5,
      "MESA_FORMAT_RGBA_DXT5",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 16                     /* 16 bytes per 4x4 block */
   },

   /* DXT sRGB compressed formats */
   {
      MESA_FORMAT_SRGB_DXT1,       /* Name */
      "MESA_FORMAT_SRGB_DXT1",     /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 0,                  /* approx Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      4, 4, 8                      /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_SRGBA_DXT1,
      "MESA_FORMAT_SRGBA_DXT1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 8                      /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_SRGBA_DXT3,
      "MESA_FORMAT_SRGBA_DXT3",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_SRGBA_DXT5,
      "MESA_FORMAT_SRGBA_DXT5",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 16                     /* 16 bytes per 4x4 block */
   },

   /* FXT1 compressed formats */
   {
      MESA_FORMAT_RGB_FXT1,
      "MESA_FORMAT_RGB_FXT1",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 0,                  /* approx Red/Green/BlueBits */
      0, 0, 0, 0, 0,
      8, 4, 16                     /* 16 bytes per 8x4 block */
   },
   {
      MESA_FORMAT_RGBA_FXT1,
      "MESA_FORMAT_RGBA_FXT1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 1,                  /* approx Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,
      8, 4, 16                     /* 16 bytes per 8x4 block */
   },

   /* RGTC compressed formats */
   {
     MESA_FORMAT_R_RGTC1_UNORM,
     "MESA_FORMAT_R_RGTC1_UNORM",
     GL_RED,
     GL_UNSIGNED_NORMALIZED,
     8, 0, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_R_RGTC1_SNORM,
     "MESA_FORMAT_R_RGTC1_SNORM",
     GL_RED,
     GL_SIGNED_NORMALIZED,
     8, 0, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_RG_RGTC2_UNORM,
     "MESA_FORMAT_RG_RGTC2_UNORM",
     GL_RG,
     GL_UNSIGNED_NORMALIZED,
     8, 8, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_RG_RGTC2_SNORM,
     "MESA_FORMAT_RG_RGTC2_SNORM",
     GL_RG,
     GL_SIGNED_NORMALIZED,
     8, 8, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },

   /* LATC1/2 compressed formats */
   {
     MESA_FORMAT_L_LATC1_UNORM,
     "MESA_FORMAT_L_LATC1_UNORM",
     GL_LUMINANCE,
     GL_UNSIGNED_NORMALIZED,
     0, 0, 0, 0,
     4, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_L_LATC1_SNORM,
     "MESA_FORMAT_L_LATC1_SNORM",
     GL_LUMINANCE,
     GL_SIGNED_NORMALIZED,
     0, 0, 0, 0,
     4, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_LA_LATC2_UNORM,
     "MESA_FORMAT_LA_LATC2_UNORM",
     GL_LUMINANCE_ALPHA,
     GL_UNSIGNED_NORMALIZED,
     0, 0, 0, 4,
     4, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_LA_LATC2_SNORM,
     "MESA_FORMAT_LA_LATC2_SNORM",
     GL_LUMINANCE_ALPHA,
     GL_SIGNED_NORMALIZED,
     0, 0, 0, 4,
     4, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },

   /* ETC1/2 compressed formats */
   {
      MESA_FORMAT_ETC1_RGB8,
      "MESA_FORMAT_ETC1_RGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_RGB8,
      "MESA_FORMAT_ETC2_RGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SRGB8,
      "MESA_FORMAT_ETC2_SRGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_RGBA8_EAC,
      "MESA_FORMAT_ETC2_RGBA8_EAC",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC,
      "MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_R11_EAC,
      "MESA_FORMAT_ETC2_R11_EAC",
      GL_RED,
      GL_UNSIGNED_NORMALIZED,
      11, 0, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                    /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_RG11_EAC,
      "MESA_FORMAT_ETC2_RG11_EAC",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      11, 11, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SIGNED_R11_EAC,
      "MESA_FORMAT_ETC2_SIGNED_R11_EAC",
      GL_RED,
      GL_SIGNED_NORMALIZED,
      11, 0, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                    /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SIGNED_RG11_EAC,
      "MESA_FORMAT_ETC2_SIGNED_RG11_EAC",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      11, 11, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1,
      "MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 1,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1,
      "MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 1,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
};



static const struct gl_format_info *
_mesa_get_format_info(mesa_format format)
{
   const struct gl_format_info *info = &format_info[format];
   assert(info->Name == format);
   return info;
}


/** Return string name of format (for debugging) */
const char *
_mesa_get_format_name(mesa_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return info->StrName;
}



/**
 * Return bytes needed to store a block of pixels in the given format.
 * Normally, a block is 1x1 (a single pixel).  But for compressed formats
 * a block may be 4x4 or 8x4, etc.
 *
 * Note: not GLuint, so as not to coerce math to unsigned. cf. fdo #37351
 */
GLint
_mesa_get_format_bytes(mesa_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   ASSERT(info->BytesPerBlock);
   ASSERT(info->BytesPerBlock <= MAX_PIXEL_BYTES ||
          _mesa_is_format_compressed(format));
   return info->BytesPerBlock;
}


/**
 * Return bits per component for the given format.
 * \param format  one of MESA_FORMAT_x
 * \param pname  the component, such as GL_RED_BITS, GL_TEXTURE_BLUE_BITS, etc.
 */
GLint
_mesa_get_format_bits(mesa_format format, GLenum pname)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);

   switch (pname) {
   case GL_RED_BITS:
   case GL_TEXTURE_RED_SIZE:
   case GL_RENDERBUFFER_RED_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE:
      return info->RedBits;
   case GL_GREEN_BITS:
   case GL_TEXTURE_GREEN_SIZE:
   case GL_RENDERBUFFER_GREEN_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:
      return info->GreenBits;
   case GL_BLUE_BITS:
   case GL_TEXTURE_BLUE_SIZE:
   case GL_RENDERBUFFER_BLUE_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:
      return info->BlueBits;
   case GL_ALPHA_BITS:
   case GL_TEXTURE_ALPHA_SIZE:
   case GL_RENDERBUFFER_ALPHA_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:
      return info->AlphaBits;
   case GL_TEXTURE_INTENSITY_SIZE:
      return info->IntensityBits;
   case GL_TEXTURE_LUMINANCE_SIZE:
      return info->LuminanceBits;
   case GL_INDEX_BITS:
      return info->IndexBits;
   case GL_DEPTH_BITS:
   case GL_TEXTURE_DEPTH_SIZE_ARB:
   case GL_RENDERBUFFER_DEPTH_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:
      return info->DepthBits;
   case GL_STENCIL_BITS:
   case GL_TEXTURE_STENCIL_SIZE_EXT:
   case GL_RENDERBUFFER_STENCIL_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:
      return info->StencilBits;
   default:
      _mesa_problem(NULL, "bad pname in _mesa_get_format_bits()");
      return 0;
   }
}


GLuint
_mesa_get_format_max_bits(mesa_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   GLuint max = MAX2(info->RedBits, info->GreenBits);
   max = MAX2(max, info->BlueBits);
   max = MAX2(max, info->AlphaBits);
   max = MAX2(max, info->LuminanceBits);
   max = MAX2(max, info->IntensityBits);
   max = MAX2(max, info->DepthBits);
   max = MAX2(max, info->StencilBits);
   return max;
}


/**
 * Return the data type (or more specifically, the data representation)
 * for the given format.
 * The return value will be one of:
 *    GL_UNSIGNED_NORMALIZED = unsigned int representing [0,1]
 *    GL_SIGNED_NORMALIZED = signed int representing [-1, 1]
 *    GL_UNSIGNED_INT = an ordinary unsigned integer
 *    GL_INT = an ordinary signed integer
 *    GL_FLOAT = an ordinary float
 */
GLenum
_mesa_get_format_datatype(mesa_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return info->DataType;
}


/**
 * Return the basic format for the given type.  The result will be one of
 * GL_RGB, GL_RGBA, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY,
 * GL_YCBCR_MESA, GL_DEPTH_COMPONENT, GL_STENCIL_INDEX, GL_DEPTH_STENCIL.
 */
GLenum
_mesa_get_format_base_format(mesa_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return info->BaseFormat;
}


/**
 * Return the block size (in pixels) for the given format.  Normally
 * the block size is 1x1.  But compressed formats will have block sizes
 * of 4x4 or 8x4 pixels, etc.
 * \param bw  returns block width in pixels
 * \param bh  returns block height in pixels
 */
void
_mesa_get_format_block_size(mesa_format format, GLuint *bw, GLuint *bh)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   *bw = info->BlockWidth;
   *bh = info->BlockHeight;
}


/** Is the given format a compressed format? */
GLboolean
_mesa_is_format_compressed(mesa_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return info->BlockWidth > 1 || info->BlockHeight > 1;
}


/**
 * Determine if the given format represents a packed depth/stencil buffer.
 */
GLboolean
_mesa_is_format_packed_depth_stencil(mesa_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);

   return info->BaseFormat == GL_DEPTH_STENCIL;
}


/**
 * Is the given format a signed/unsigned integer color format?
 */
GLboolean
_mesa_is_format_integer_color(mesa_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return (info->DataType == GL_INT || info->DataType == GL_UNSIGNED_INT) &&
      info->BaseFormat != GL_DEPTH_COMPONENT &&
      info->BaseFormat != GL_DEPTH_STENCIL &&
      info->BaseFormat != GL_STENCIL_INDEX;
}


/**
 * Is the given format an unsigned integer format?
 */
GLboolean
_mesa_is_format_unsigned(mesa_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return _mesa_is_type_unsigned(info->DataType);
}


/**
 * Does the given format store signed values?
 */
GLboolean
_mesa_is_format_signed(mesa_format format)
{
   if (format == MESA_FORMAT_R11G11B10_FLOAT || 
       format == MESA_FORMAT_R9G9B9E5_FLOAT) {
      /* these packed float formats only store unsigned values */
      return GL_FALSE;
   }
   else {
      const struct gl_format_info *info = _mesa_get_format_info(format);
      return (info->DataType == GL_SIGNED_NORMALIZED ||
              info->DataType == GL_INT ||
              info->DataType == GL_FLOAT);
   }
}

/**
 * Is the given format an integer format?
 */
GLboolean
_mesa_is_format_integer(mesa_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return (info->DataType == GL_INT || info->DataType == GL_UNSIGNED_INT);
}

/**
 * Return color encoding for given format.
 * \return GL_LINEAR or GL_SRGB
 */
GLenum
_mesa_get_format_color_encoding(mesa_format format)
{
   /* XXX this info should be encoded in gl_format_info */
   switch (format) {
   case MESA_FORMAT_BGR_SRGB8:
   case MESA_FORMAT_A8B8G8R8_SRGB:
   case MESA_FORMAT_B8G8R8A8_SRGB:
   case MESA_FORMAT_R8G8B8A8_SRGB:
   case MESA_FORMAT_L_SRGB8:
   case MESA_FORMAT_L8A8_SRGB:
   case MESA_FORMAT_SRGB_DXT1:
   case MESA_FORMAT_SRGBA_DXT1:
   case MESA_FORMAT_SRGBA_DXT3:
   case MESA_FORMAT_SRGBA_DXT5:
   case MESA_FORMAT_R8G8B8X8_SRGB:
   case MESA_FORMAT_ETC2_SRGB8:
   case MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC:
   case MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1:
   case MESA_FORMAT_B8G8R8X8_SRGB:
      return GL_SRGB;
   default:
      return GL_LINEAR;
   }
}


/**
 * For an sRGB format, return the corresponding linear color space format.
 * For non-sRGB formats, return the format as-is.
 */
mesa_format
_mesa_get_srgb_format_linear(mesa_format format)
{
   switch (format) {
   case MESA_FORMAT_BGR_SRGB8:
      format = MESA_FORMAT_BGR_UNORM8;
      break;
   case MESA_FORMAT_A8B8G8R8_SRGB:
      format = MESA_FORMAT_A8B8G8R8_UNORM;
      break;
   case MESA_FORMAT_B8G8R8A8_SRGB:
      format = MESA_FORMAT_B8G8R8A8_UNORM;
      break;
   case MESA_FORMAT_R8G8B8A8_SRGB:
      format = MESA_FORMAT_R8G8B8A8_UNORM;
      break;
   case MESA_FORMAT_L_SRGB8:
      format = MESA_FORMAT_L_UNORM8;
      break;
   case MESA_FORMAT_L8A8_SRGB:
      format = MESA_FORMAT_L8A8_UNORM;
      break;
   case MESA_FORMAT_SRGB_DXT1:
      format = MESA_FORMAT_RGB_DXT1;
      break;
   case MESA_FORMAT_SRGBA_DXT1:
      format = MESA_FORMAT_RGBA_DXT1;
      break;
   case MESA_FORMAT_SRGBA_DXT3:
      format = MESA_FORMAT_RGBA_DXT3;
      break;
   case MESA_FORMAT_SRGBA_DXT5:
      format = MESA_FORMAT_RGBA_DXT5;
      break;
   case MESA_FORMAT_R8G8B8X8_SRGB:
      format = MESA_FORMAT_R8G8B8X8_UNORM;
      break;
   case MESA_FORMAT_ETC2_SRGB8:
      format = MESA_FORMAT_ETC2_RGB8;
      break;
   case MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC:
      format = MESA_FORMAT_ETC2_RGBA8_EAC;
      break;
   case MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1:
      format = MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1;
      break;
   case MESA_FORMAT_B8G8R8X8_SRGB:
      format = MESA_FORMAT_B8G8R8X8_UNORM;
      break;
   default:
      break;
   }
   return format;
}


/**
 * If the given format is a compressed format, return a corresponding
 * uncompressed format.
 */
mesa_format
_mesa_get_uncompressed_format(mesa_format format)
{
   switch (format) {
   case MESA_FORMAT_RGB_FXT1:
      return MESA_FORMAT_BGR_UNORM8;
   case MESA_FORMAT_RGBA_FXT1:
      return MESA_FORMAT_A8B8G8R8_UNORM;
   case MESA_FORMAT_RGB_DXT1:
   case MESA_FORMAT_SRGB_DXT1:
      return MESA_FORMAT_BGR_UNORM8;
   case MESA_FORMAT_RGBA_DXT1:
   case MESA_FORMAT_SRGBA_DXT1:
      return MESA_FORMAT_A8B8G8R8_UNORM;
   case MESA_FORMAT_RGBA_DXT3:
   case MESA_FORMAT_SRGBA_DXT3:
      return MESA_FORMAT_A8B8G8R8_UNORM;
   case MESA_FORMAT_RGBA_DXT5:
   case MESA_FORMAT_SRGBA_DXT5:
      return MESA_FORMAT_A8B8G8R8_UNORM;
   case MESA_FORMAT_R_RGTC1_UNORM:
      return MESA_FORMAT_R_UNORM8;
   case MESA_FORMAT_R_RGTC1_SNORM:
      return MESA_FORMAT_R_SNORM8;
   case MESA_FORMAT_RG_RGTC2_UNORM:
      return MESA_FORMAT_R8G8_UNORM;
   case MESA_FORMAT_RG_RGTC2_SNORM:
      return MESA_FORMAT_R8G8_SNORM;
   case MESA_FORMAT_L_LATC1_UNORM:
      return MESA_FORMAT_L_UNORM8;
   case MESA_FORMAT_L_LATC1_SNORM:
      return MESA_FORMAT_L_SNORM8;
   case MESA_FORMAT_LA_LATC2_UNORM:
      return MESA_FORMAT_L8A8_UNORM;
   case MESA_FORMAT_LA_LATC2_SNORM:
      return MESA_FORMAT_L8A8_SNORM;
   case MESA_FORMAT_ETC1_RGB8:
   case MESA_FORMAT_ETC2_RGB8:
   case MESA_FORMAT_ETC2_SRGB8:
      return MESA_FORMAT_BGR_UNORM8;
   case MESA_FORMAT_ETC2_RGBA8_EAC:
   case MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC:
   case MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1:
   case MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1:
      return MESA_FORMAT_A8B8G8R8_UNORM;
   case MESA_FORMAT_ETC2_R11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_R11_EAC:
      return MESA_FORMAT_R_UNORM16;
   case MESA_FORMAT_ETC2_RG11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_RG11_EAC:
      return MESA_FORMAT_R16G16_UNORM;
   default:
#ifdef DEBUG
      assert(!_mesa_is_format_compressed(format));
#endif
      return format;
   }
}


GLuint
_mesa_format_num_components(mesa_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return ((info->RedBits > 0) +
           (info->GreenBits > 0) +
           (info->BlueBits > 0) +
           (info->AlphaBits > 0) +
           (info->LuminanceBits > 0) +
           (info->IntensityBits > 0) +
           (info->DepthBits > 0) +
           (info->StencilBits > 0));
}


/**
 * Returns true if a color format has data stored in the R/G/B/A channels,
 * given an index from 0 to 3.
 */
bool
_mesa_format_has_color_component(mesa_format format, int component)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);

   assert(info->BaseFormat != GL_DEPTH_COMPONENT &&
          info->BaseFormat != GL_DEPTH_STENCIL &&
          info->BaseFormat != GL_STENCIL_INDEX);

   switch (component) {
   case 0:
      return (info->RedBits + info->IntensityBits + info->LuminanceBits) > 0;
   case 1:
      return (info->GreenBits + info->IntensityBits + info->LuminanceBits) > 0;
   case 2:
      return (info->BlueBits + info->IntensityBits + info->LuminanceBits) > 0;
   case 3:
      return (info->AlphaBits + info->IntensityBits) > 0;
   default:
      assert(!"Invalid color component: must be 0..3");
      return false;
   }
}


/**
 * Return number of bytes needed to store an image of the given size
 * in the given format.
 */
GLuint
_mesa_format_image_size(mesa_format format, GLsizei width,
                        GLsizei height, GLsizei depth)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   /* Strictly speaking, a conditional isn't needed here */
   if (info->BlockWidth > 1 || info->BlockHeight > 1) {
      /* compressed format (2D only for now) */
      const GLuint bw = info->BlockWidth, bh = info->BlockHeight;
      const GLuint wblocks = (width + bw - 1) / bw;
      const GLuint hblocks = (height + bh - 1) / bh;
      const GLuint sz = wblocks * hblocks * info->BytesPerBlock;
      return sz * depth;
   }
   else {
      /* non-compressed */
      const GLuint sz = width * height * depth * info->BytesPerBlock;
      return sz;
   }
}


/**
 * Same as _mesa_format_image_size() but returns a 64-bit value to
 * accomodate very large textures.
 */
uint64_t
_mesa_format_image_size64(mesa_format format, GLsizei width,
                          GLsizei height, GLsizei depth)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   /* Strictly speaking, a conditional isn't needed here */
   if (info->BlockWidth > 1 || info->BlockHeight > 1) {
      /* compressed format (2D only for now) */
      const uint64_t bw = info->BlockWidth, bh = info->BlockHeight;
      const uint64_t wblocks = (width + bw - 1) / bw;
      const uint64_t hblocks = (height + bh - 1) / bh;
      const uint64_t sz = wblocks * hblocks * info->BytesPerBlock;
      return sz * depth;
   }
   else {
      /* non-compressed */
      const uint64_t sz = ((uint64_t) width *
                           (uint64_t) height *
                           (uint64_t) depth *
                           info->BytesPerBlock);
      return sz;
   }
}



GLint
_mesa_format_row_stride(mesa_format format, GLsizei width)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   /* Strictly speaking, a conditional isn't needed here */
   if (info->BlockWidth > 1 || info->BlockHeight > 1) {
      /* compressed format */
      const GLuint bw = info->BlockWidth;
      const GLuint wblocks = (width + bw - 1) / bw;
      const GLint stride = wblocks * info->BytesPerBlock;
      return stride;
   }
   else {
      const GLint stride = width * info->BytesPerBlock;
      return stride;
   }
}


/**
 * Debug/test: check that all formats are handled in the
 * _mesa_format_to_type_and_comps() function.  When new pixel formats
 * are added to Mesa, that function needs to be updated.
 * This is a no-op after the first call.
 */
static void
check_format_to_type_and_comps(void)
{
   mesa_format f;

   for (f = MESA_FORMAT_NONE + 1; f < MESA_FORMAT_COUNT; f++) {
      GLenum datatype = 0;
      GLuint comps = 0;
      /* This function will emit a problem/warning if the format is
       * not handled.
       */
      _mesa_format_to_type_and_comps(f, &datatype, &comps);
   }
}


/**
 * Do sanity checking of the format info table.
 */
void
_mesa_test_formats(void)
{
   GLuint i;

   STATIC_ASSERT(Elements(format_info) == MESA_FORMAT_COUNT);

   for (i = 0; i < MESA_FORMAT_COUNT; i++) {
      const struct gl_format_info *info = _mesa_get_format_info(i);
      assert(info);

      assert(info->Name == i);

      if (info->Name == MESA_FORMAT_NONE)
         continue;

      if (info->BlockWidth == 1 && info->BlockHeight == 1) {
         if (info->RedBits > 0) {
            GLuint t = info->RedBits + info->GreenBits
               + info->BlueBits + info->AlphaBits;
            assert(t / 8 <= info->BytesPerBlock);
            (void) t;
         }
      }

      assert(info->DataType == GL_UNSIGNED_NORMALIZED ||
             info->DataType == GL_SIGNED_NORMALIZED ||
             info->DataType == GL_UNSIGNED_INT ||
             info->DataType == GL_INT ||
             info->DataType == GL_FLOAT ||
             /* Z32_FLOAT_X24S8 has DataType of GL_NONE */
             info->DataType == GL_NONE);

      if (info->BaseFormat == GL_RGB) {
         assert(info->RedBits > 0);
         assert(info->GreenBits > 0);
         assert(info->BlueBits > 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_RGBA) {
         assert(info->RedBits > 0);
         assert(info->GreenBits > 0);
         assert(info->BlueBits > 0);
         assert(info->AlphaBits > 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_RG) {
         assert(info->RedBits > 0);
         assert(info->GreenBits > 0);
         assert(info->BlueBits == 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_RED) {
         assert(info->RedBits > 0);
         assert(info->GreenBits == 0);
         assert(info->BlueBits == 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_LUMINANCE) {
         assert(info->RedBits == 0);
         assert(info->GreenBits == 0);
         assert(info->BlueBits == 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits > 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_INTENSITY) {
         assert(info->RedBits == 0);
         assert(info->GreenBits == 0);
         assert(info->BlueBits == 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits > 0);
      }
   }

   check_format_to_type_and_comps();
}



/**
 * Return datatype and number of components per texel for the given mesa_format.
 * Only used for mipmap generation code.
 */
void
_mesa_format_to_type_and_comps(mesa_format format,
                               GLenum *datatype, GLuint *comps)
{
   switch (format) {
   case MESA_FORMAT_A8B8G8R8_UNORM:
   case MESA_FORMAT_R8G8B8A8_UNORM:
   case MESA_FORMAT_B8G8R8A8_UNORM:
   case MESA_FORMAT_A8R8G8B8_UNORM:
   case MESA_FORMAT_X8B8G8R8_UNORM:
   case MESA_FORMAT_R8G8B8X8_UNORM:
   case MESA_FORMAT_B8G8R8X8_UNORM:
   case MESA_FORMAT_X8R8G8B8_UNORM:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;
   case MESA_FORMAT_BGR_UNORM8:
   case MESA_FORMAT_RGB_UNORM8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 3;
      return;
   case MESA_FORMAT_B5G6R5_UNORM:
   case MESA_FORMAT_R5G6B5_UNORM:
      *datatype = GL_UNSIGNED_SHORT_5_6_5;
      *comps = 3;
      return;

   case MESA_FORMAT_B4G4R4A4_UNORM:
   case MESA_FORMAT_A4R4G4B4_UNORM:
   case MESA_FORMAT_B4G4R4X4_UNORM:
      *datatype = GL_UNSIGNED_SHORT_4_4_4_4;
      *comps = 4;
      return;

   case MESA_FORMAT_B5G5R5A1_UNORM:
   case MESA_FORMAT_A1R5G5B5_UNORM:
   case MESA_FORMAT_B5G5R5X1_UNORM:
      *datatype = GL_UNSIGNED_SHORT_1_5_5_5_REV;
      *comps = 4;
      return;

   case MESA_FORMAT_B10G10R10A2_UNORM:
      *datatype = GL_UNSIGNED_INT_2_10_10_10_REV;
      *comps = 4;
      return;

   case MESA_FORMAT_A1B5G5R5_UNORM:
      *datatype = GL_UNSIGNED_SHORT_5_5_5_1;
      *comps = 4;
      return;

   case MESA_FORMAT_L4A4_UNORM:
      *datatype = MESA_UNSIGNED_BYTE_4_4;
      *comps = 2;
      return;

   case MESA_FORMAT_L8A8_UNORM:
   case MESA_FORMAT_A8L8_UNORM:
   case MESA_FORMAT_R8G8_UNORM:
   case MESA_FORMAT_G8R8_UNORM:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 2;
      return;

   case MESA_FORMAT_L16A16_UNORM:
   case MESA_FORMAT_A16L16_UNORM:
   case MESA_FORMAT_R16G16_UNORM:
   case MESA_FORMAT_G16R16_UNORM:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 2;
      return;

   case MESA_FORMAT_R_UNORM16:
   case MESA_FORMAT_A_UNORM16:
   case MESA_FORMAT_L_UNORM16:
   case MESA_FORMAT_I_UNORM16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 1;
      return;

   case MESA_FORMAT_B2G3R3_UNORM:
      *datatype = GL_UNSIGNED_BYTE_3_3_2;
      *comps = 3;
      return;

   case MESA_FORMAT_A_UNORM8:
   case MESA_FORMAT_L_UNORM8:
   case MESA_FORMAT_I_UNORM8:
   case MESA_FORMAT_R_UNORM8:
   case MESA_FORMAT_S_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 1;
      return;

   case MESA_FORMAT_YCBCR:
   case MESA_FORMAT_YCBCR_REV:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 2;
      return;

   case MESA_FORMAT_S8_UINT_Z24_UNORM:
      *datatype = GL_UNSIGNED_INT_24_8_MESA;
      *comps = 2;
      return;

   case MESA_FORMAT_Z24_UNORM_S8_UINT:
      *datatype = GL_UNSIGNED_INT_8_24_REV_MESA;
      *comps = 2;
      return;

   case MESA_FORMAT_Z_UNORM16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 1;
      return;

   case MESA_FORMAT_Z24_UNORM_X8_UINT:
      *datatype = GL_UNSIGNED_INT;
      *comps = 1;
      return;

   case MESA_FORMAT_X8_UINT_Z24_UNORM:
      *datatype = GL_UNSIGNED_INT;
      *comps = 1;
      return;

   case MESA_FORMAT_Z_UNORM32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 1;
      return;

   case MESA_FORMAT_Z_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 1;
      return;

   case MESA_FORMAT_Z32_FLOAT_S8X24_UINT:
      *datatype = GL_FLOAT_32_UNSIGNED_INT_24_8_REV;
      *comps = 1;
      return;

   case MESA_FORMAT_DUDV8:
      *datatype = GL_BYTE;
      *comps = 2;
      return;

   case MESA_FORMAT_R_SNORM8:
   case MESA_FORMAT_A_SNORM8:
   case MESA_FORMAT_L_SNORM8:
   case MESA_FORMAT_I_SNORM8:
      *datatype = GL_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_R8G8_SNORM:
   case MESA_FORMAT_L8A8_SNORM:
      *datatype = GL_BYTE;
      *comps = 2;
      return;
   case MESA_FORMAT_A8B8G8R8_SNORM:
   case MESA_FORMAT_R8G8B8A8_SNORM:
   case MESA_FORMAT_X8B8G8R8_SNORM:
      *datatype = GL_BYTE;
      *comps = 4;
      return;

   case MESA_FORMAT_RGBA_UNORM16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 4;
      return;

   case MESA_FORMAT_R_SNORM16:
   case MESA_FORMAT_A_SNORM16:
   case MESA_FORMAT_L_SNORM16:
   case MESA_FORMAT_I_SNORM16:
      *datatype = GL_SHORT;
      *comps = 1;
      return;
   case MESA_FORMAT_R16G16_SNORM:
   case MESA_FORMAT_LA_SNORM16:
      *datatype = GL_SHORT;
      *comps = 2;
      return;
   case MESA_FORMAT_RGB_SNORM16:
      *datatype = GL_SHORT;
      *comps = 3;
      return;
   case MESA_FORMAT_RGBA_SNORM16:
      *datatype = GL_SHORT;
      *comps = 4;
      return;

   case MESA_FORMAT_BGR_SRGB8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 3;
      return;
   case MESA_FORMAT_A8B8G8R8_SRGB:
   case MESA_FORMAT_B8G8R8A8_SRGB:
   case MESA_FORMAT_R8G8B8A8_SRGB:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;
   case MESA_FORMAT_L_SRGB8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_L8A8_SRGB:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 2;
      return;

   case MESA_FORMAT_RGB_FXT1:
   case MESA_FORMAT_RGBA_FXT1:
   case MESA_FORMAT_RGB_DXT1:
   case MESA_FORMAT_RGBA_DXT1:
   case MESA_FORMAT_RGBA_DXT3:
   case MESA_FORMAT_RGBA_DXT5:
   case MESA_FORMAT_SRGB_DXT1:
   case MESA_FORMAT_SRGBA_DXT1:
   case MESA_FORMAT_SRGBA_DXT3:
   case MESA_FORMAT_SRGBA_DXT5:
   case MESA_FORMAT_R_RGTC1_UNORM:
   case MESA_FORMAT_R_RGTC1_SNORM:
   case MESA_FORMAT_RG_RGTC2_UNORM:
   case MESA_FORMAT_RG_RGTC2_SNORM:
   case MESA_FORMAT_L_LATC1_UNORM:
   case MESA_FORMAT_L_LATC1_SNORM:
   case MESA_FORMAT_LA_LATC2_UNORM:
   case MESA_FORMAT_LA_LATC2_SNORM:
   case MESA_FORMAT_ETC1_RGB8:
   case MESA_FORMAT_ETC2_RGB8:
   case MESA_FORMAT_ETC2_SRGB8:
   case MESA_FORMAT_ETC2_RGBA8_EAC:
   case MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC:
   case MESA_FORMAT_ETC2_R11_EAC:
   case MESA_FORMAT_ETC2_RG11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_R11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_RG11_EAC:
   case MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1:
   case MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1:
      /* XXX generate error instead? */
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 0;
      return;

   case MESA_FORMAT_RGBA_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 4;
      return;
   case MESA_FORMAT_RGBA_FLOAT16:
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 4;
      return;
   case MESA_FORMAT_RGB_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 3;
      return;
   case MESA_FORMAT_RGB_FLOAT16:
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 3;
      return;
   case MESA_FORMAT_LA_FLOAT32:
   case MESA_FORMAT_RG_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 2;
      return;
   case MESA_FORMAT_LA_FLOAT16:
   case MESA_FORMAT_RG_FLOAT16:
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 2;
      return;
   case MESA_FORMAT_A_FLOAT32:
   case MESA_FORMAT_L_FLOAT32:
   case MESA_FORMAT_I_FLOAT32:
   case MESA_FORMAT_R_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 1;
      return;
   case MESA_FORMAT_A_FLOAT16:
   case MESA_FORMAT_L_FLOAT16:
   case MESA_FORMAT_I_FLOAT16:
   case MESA_FORMAT_R_FLOAT16:
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 1;
      return;

   case MESA_FORMAT_A_UINT8:
   case MESA_FORMAT_L_UINT8:
   case MESA_FORMAT_I_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_LA_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 2;
      return;

   case MESA_FORMAT_A_UINT16:
   case MESA_FORMAT_L_UINT16:
   case MESA_FORMAT_I_UINT16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 1;
      return;
   case MESA_FORMAT_LA_UINT16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 2;
      return;
   case MESA_FORMAT_A_UINT32:
   case MESA_FORMAT_L_UINT32:
   case MESA_FORMAT_I_UINT32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 1;
      return;
   case MESA_FORMAT_LA_UINT32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 2;
      return;
   case MESA_FORMAT_A_SINT8:
   case MESA_FORMAT_L_SINT8:
   case MESA_FORMAT_I_SINT8:
      *datatype = GL_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_LA_SINT8:
      *datatype = GL_BYTE;
      *comps = 2;
      return;

   case MESA_FORMAT_A_SINT16:
   case MESA_FORMAT_L_SINT16:
   case MESA_FORMAT_I_SINT16:
      *datatype = GL_SHORT;
      *comps = 1;
      return;
   case MESA_FORMAT_LA_SINT16:
      *datatype = GL_SHORT;
      *comps = 2;
      return;

   case MESA_FORMAT_A_SINT32:
   case MESA_FORMAT_L_SINT32:
   case MESA_FORMAT_I_SINT32:
      *datatype = GL_INT;
      *comps = 1;
      return;
   case MESA_FORMAT_LA_SINT32:
      *datatype = GL_INT;
      *comps = 2;
      return;

   case MESA_FORMAT_R_SINT8:
      *datatype = GL_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_RG_SINT8:
      *datatype = GL_BYTE;
      *comps = 2;
      return;
   case MESA_FORMAT_RGB_SINT8:
      *datatype = GL_BYTE;
      *comps = 3;
      return;
   case MESA_FORMAT_RGBA_SINT8:
      *datatype = GL_BYTE;
      *comps = 4;
      return;
   case MESA_FORMAT_R_SINT16:
      *datatype = GL_SHORT;
      *comps = 1;
      return;
   case MESA_FORMAT_RG_SINT16:
      *datatype = GL_SHORT;
      *comps = 2;
      return;
   case MESA_FORMAT_RGB_SINT16:
      *datatype = GL_SHORT;
      *comps = 3;
      return;
   case MESA_FORMAT_RGBA_SINT16:
      *datatype = GL_SHORT;
      *comps = 4;
      return;
   case MESA_FORMAT_R_SINT32:
      *datatype = GL_INT;
      *comps = 1;
      return;
   case MESA_FORMAT_RG_SINT32:
      *datatype = GL_INT;
      *comps = 2;
      return;
   case MESA_FORMAT_RGB_SINT32:
      *datatype = GL_INT;
      *comps = 3;
      return;
   case MESA_FORMAT_RGBA_SINT32:
      *datatype = GL_INT;
      *comps = 4;
      return;

   /**
    * \name Non-normalized unsigned integer formats.
    */
   case MESA_FORMAT_R_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_RG_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 2;
      return;
   case MESA_FORMAT_RGB_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 3;
      return;
   case MESA_FORMAT_RGBA_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;
   case MESA_FORMAT_R_UINT16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 1;
      return;
   case MESA_FORMAT_RG_UINT16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 2;
      return;
   case MESA_FORMAT_RGB_UINT16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 3;
      return;
   case MESA_FORMAT_RGBA_UINT16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 4;
      return;
   case MESA_FORMAT_R_UINT32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 1;
      return;
   case MESA_FORMAT_RG_UINT32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 2;
      return;
   case MESA_FORMAT_RGB_UINT32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 3;
      return;
   case MESA_FORMAT_RGBA_UINT32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 4;
      return;

   case MESA_FORMAT_R9G9B9E5_FLOAT:
      *datatype = GL_UNSIGNED_INT_5_9_9_9_REV;
      *comps = 3;
      return;

   case MESA_FORMAT_R11G11B10_FLOAT:
      *datatype = GL_UNSIGNED_INT_10F_11F_11F_REV;
      *comps = 3;
      return;

   case MESA_FORMAT_B10G10R10A2_UINT:
   case MESA_FORMAT_R10G10B10A2_UINT:
      *datatype = GL_UNSIGNED_INT_2_10_10_10_REV;
      *comps = 4;
      return;

   case MESA_FORMAT_R8G8B8X8_SRGB:
   case MESA_FORMAT_RGBX_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;

   case MESA_FORMAT_R8G8B8X8_SNORM:
   case MESA_FORMAT_RGBX_SINT8:
      *datatype = GL_BYTE;
      *comps = 4;
      return;

   case MESA_FORMAT_B10G10R10X2_UNORM:
      *datatype = GL_UNSIGNED_INT_2_10_10_10_REV;
      *comps = 4;
      return;

   case MESA_FORMAT_RGBX_UNORM16:
   case MESA_FORMAT_RGBX_UINT16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 4;
      return;

   case MESA_FORMAT_RGBX_SNORM16:
   case MESA_FORMAT_RGBX_SINT16:
      *datatype = GL_SHORT;
      *comps = 4;
      return;

   case MESA_FORMAT_RGBX_FLOAT16:
      *datatype = GL_HALF_FLOAT;
      *comps = 4;
      return;

   case MESA_FORMAT_RGBX_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 4;
      return;

   case MESA_FORMAT_RGBX_UINT32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 4;
      return;

   case MESA_FORMAT_RGBX_SINT32:
      *datatype = GL_INT;
      *comps = 4;
      return;

   case MESA_FORMAT_R10G10B10A2_UNORM:
      *datatype = GL_UNSIGNED_INT_2_10_10_10_REV;
      *comps = 4;
      return;

   case MESA_FORMAT_G8R8_SNORM:
      *datatype = GL_BYTE;
      *comps = 2;
      return;

   case MESA_FORMAT_G16R16_SNORM:
      *datatype = GL_SHORT;
      *comps = 2;
      return;

   case MESA_FORMAT_B8G8R8X8_SRGB:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;

   case MESA_FORMAT_COUNT:
      assert(0);
      return;

   case MESA_FORMAT_NONE:
   /* For debug builds, warn if any formats are not handled */
#ifdef DEBUG
   default:
#endif
      _mesa_problem(NULL, "bad format %s in _mesa_format_to_type_and_comps",
                    _mesa_get_format_name(format));
      *datatype = 0;
      *comps = 1;
   }
}

/**
 * Check if a mesa_format exactly matches a GL format/type combination
 * such that we can use memcpy() from one to the other.
 * \param mesa_format  a MESA_FORMAT_x value
 * \param format  the user-specified image format
 * \param type  the user-specified image datatype
 * \param swapBytes  typically the current pixel pack/unpack byteswap state
 * \return GL_TRUE if the formats match, GL_FALSE otherwise.
 */
GLboolean
_mesa_format_matches_format_and_type(mesa_format mesa_format,
				     GLenum format, GLenum type,
                                     GLboolean swapBytes)
{
   const GLboolean littleEndian = _mesa_little_endian();

   /* Note: When reading a GL format/type combination, the format lists channel
    * assignments from most significant channel in the type to least
    * significant.  A type with _REV indicates that the assignments are
    * swapped, so they are listed from least significant to most significant.
    *
    * For sanity, please keep this switch statement ordered the same as the
    * enums in formats.h.
    */

   switch (mesa_format) {

   case MESA_FORMAT_NONE:
   case MESA_FORMAT_COUNT:
      return GL_FALSE;

   case MESA_FORMAT_A8B8G8R8_UNORM:
   case MESA_FORMAT_A8B8G8R8_SRGB:
      if (format == GL_RGBA && type == GL_UNSIGNED_INT_8_8_8_8 && !swapBytes)
         return GL_TRUE;

      if (format == GL_RGBA && type == GL_UNSIGNED_INT_8_8_8_8_REV && swapBytes)
         return GL_TRUE;

      if (format == GL_RGBA && type == GL_UNSIGNED_BYTE && !littleEndian)
         return GL_TRUE;

      if (format == GL_ABGR_EXT && type == GL_UNSIGNED_INT_8_8_8_8_REV
          && !swapBytes)
         return GL_TRUE;

      if (format == GL_ABGR_EXT && type == GL_UNSIGNED_INT_8_8_8_8
          && swapBytes)
         return GL_TRUE;

      if (format == GL_ABGR_EXT && type == GL_UNSIGNED_BYTE && littleEndian)
         return GL_TRUE;

      return GL_FALSE;

   case MESA_FORMAT_R8G8B8A8_UNORM:
   case MESA_FORMAT_R8G8B8A8_SRGB:
      if (format == GL_RGBA && type == GL_UNSIGNED_INT_8_8_8_8_REV &&
          !swapBytes)
         return GL_TRUE;

      if (format == GL_RGBA && type == GL_UNSIGNED_INT_8_8_8_8 && swapBytes)
         return GL_TRUE;

      if (format == GL_RGBA && type == GL_UNSIGNED_BYTE && littleEndian)
         return GL_TRUE;

      if (format == GL_ABGR_EXT && type == GL_UNSIGNED_INT_8_8_8_8 &&
          !swapBytes)
         return GL_TRUE;

      if (format == GL_ABGR_EXT && type == GL_UNSIGNED_INT_8_8_8_8_REV &&
          swapBytes)
         return GL_TRUE;

      if (format == GL_ABGR_EXT && type == GL_UNSIGNED_BYTE && !littleEndian)
         return GL_TRUE;

      return GL_FALSE;

   case MESA_FORMAT_B8G8R8A8_UNORM:
   case MESA_FORMAT_B8G8R8A8_SRGB:
      if (format == GL_BGRA && type == GL_UNSIGNED_INT_8_8_8_8_REV &&
          !swapBytes)
         return GL_TRUE;

      if (format == GL_BGRA && type == GL_UNSIGNED_INT_8_8_8_8 && swapBytes)
         return GL_TRUE;

      if (format == GL_BGRA && type == GL_UNSIGNED_BYTE && littleEndian)
         return GL_TRUE;

      return GL_FALSE;

   case MESA_FORMAT_A8R8G8B8_UNORM:
      if (format == GL_BGRA && type == GL_UNSIGNED_INT_8_8_8_8 && !swapBytes)
         return GL_TRUE;

      if (format == GL_BGRA && type == GL_UNSIGNED_INT_8_8_8_8_REV &&
          swapBytes)
         return GL_TRUE;

      if (format == GL_BGRA && type == GL_UNSIGNED_BYTE && !littleEndian)
         return GL_TRUE;

      return GL_FALSE;

   case MESA_FORMAT_X8B8G8R8_UNORM:
   case MESA_FORMAT_R8G8B8X8_UNORM:
      return GL_FALSE;

   case MESA_FORMAT_B8G8R8X8_UNORM:
   case MESA_FORMAT_X8R8G8B8_UNORM:
      return GL_FALSE;

   case MESA_FORMAT_BGR_UNORM8:
   case MESA_FORMAT_BGR_SRGB8:
      return format == GL_BGR && type == GL_UNSIGNED_BYTE && littleEndian;

   case MESA_FORMAT_RGB_UNORM8:
      return format == GL_RGB && type == GL_UNSIGNED_BYTE && littleEndian;

   case MESA_FORMAT_B5G6R5_UNORM:
      return format == GL_RGB && type == GL_UNSIGNED_SHORT_5_6_5 && !swapBytes;

   case MESA_FORMAT_R5G6B5_UNORM:
      /* Some of the 16-bit MESA_FORMATs that would seem to correspond to
       * GL_UNSIGNED_SHORT_* are byte-swapped instead of channel-reversed,
       * according to formats.h, so they can't be matched.
       */
      return GL_FALSE;

   case MESA_FORMAT_B4G4R4A4_UNORM:
      return format == GL_BGRA && type == GL_UNSIGNED_SHORT_4_4_4_4_REV &&
         !swapBytes;

   case MESA_FORMAT_A4R4G4B4_UNORM:
      return GL_FALSE;

   case MESA_FORMAT_A1B5G5R5_UNORM:
      return format == GL_RGBA && type == GL_UNSIGNED_SHORT_5_5_5_1 &&
         !swapBytes;

   case MESA_FORMAT_B5G5R5A1_UNORM:
      return format == GL_BGRA && type == GL_UNSIGNED_SHORT_1_5_5_5_REV &&
         !swapBytes;

   case MESA_FORMAT_A1R5G5B5_UNORM:
      return GL_FALSE;

   case MESA_FORMAT_L4A4_UNORM:
      return GL_FALSE;
   case MESA_FORMAT_L8A8_UNORM:
   case MESA_FORMAT_L8A8_SRGB:
      return format == GL_LUMINANCE_ALPHA && type == GL_UNSIGNED_BYTE && littleEndian;
   case MESA_FORMAT_A8L8_UNORM:
      return GL_FALSE;

   case MESA_FORMAT_L16A16_UNORM:
      return format == GL_LUMINANCE_ALPHA && type == GL_UNSIGNED_SHORT && littleEndian && !swapBytes;
   case MESA_FORMAT_A16L16_UNORM:
      return GL_FALSE;

   case MESA_FORMAT_B2G3R3_UNORM:
      return format == GL_RGB && type == GL_UNSIGNED_BYTE_3_3_2;

   case MESA_FORMAT_A_UNORM8:
      return format == GL_ALPHA && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_A_UNORM16:
      return format == GL_ALPHA && type == GL_UNSIGNED_SHORT && !swapBytes;
   case MESA_FORMAT_L_UNORM8:
   case MESA_FORMAT_L_SRGB8:
      return format == GL_LUMINANCE && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_L_UNORM16:
      return format == GL_LUMINANCE && type == GL_UNSIGNED_SHORT && !swapBytes;
   case MESA_FORMAT_I_UNORM8:
      return format == GL_RED && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_I_UNORM16:
      return format == GL_RED && type == GL_UNSIGNED_SHORT && !swapBytes;

   case MESA_FORMAT_YCBCR:
      return format == GL_YCBCR_MESA &&
             ((type == GL_UNSIGNED_SHORT_8_8_MESA && littleEndian != swapBytes) ||
              (type == GL_UNSIGNED_SHORT_8_8_REV_MESA && littleEndian == swapBytes));
   case MESA_FORMAT_YCBCR_REV:
      return format == GL_YCBCR_MESA &&
             ((type == GL_UNSIGNED_SHORT_8_8_MESA && littleEndian == swapBytes) ||
              (type == GL_UNSIGNED_SHORT_8_8_REV_MESA && littleEndian != swapBytes));

   case MESA_FORMAT_R_UNORM8:
      return format == GL_RED && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_R8G8_UNORM:
      return format == GL_RG && type == GL_UNSIGNED_BYTE && littleEndian;
   case MESA_FORMAT_G8R8_UNORM:
      return GL_FALSE;

   case MESA_FORMAT_R_UNORM16:
      return format == GL_RED && type == GL_UNSIGNED_SHORT &&
         !swapBytes;
   case MESA_FORMAT_R16G16_UNORM:
      return format == GL_RG && type == GL_UNSIGNED_SHORT && littleEndian &&
         !swapBytes;
   case MESA_FORMAT_G16R16_UNORM:
      return GL_FALSE;

   case MESA_FORMAT_B10G10R10A2_UNORM:
      return format == GL_BGRA && type == GL_UNSIGNED_INT_2_10_10_10_REV &&
         !swapBytes;

   case MESA_FORMAT_S8_UINT_Z24_UNORM:
      return format == GL_DEPTH_STENCIL && type == GL_UNSIGNED_INT_24_8 &&
         !swapBytes;
   case MESA_FORMAT_X8_UINT_Z24_UNORM:
   case MESA_FORMAT_Z24_UNORM_S8_UINT:
      return GL_FALSE;

   case MESA_FORMAT_Z_UNORM16:
      return format == GL_DEPTH_COMPONENT && type == GL_UNSIGNED_SHORT &&
         !swapBytes;

   case MESA_FORMAT_Z24_UNORM_X8_UINT:
      return GL_FALSE;

   case MESA_FORMAT_Z_UNORM32:
      return format == GL_DEPTH_COMPONENT && type == GL_UNSIGNED_INT &&
         !swapBytes;

   case MESA_FORMAT_S_UINT8:
      return format == GL_STENCIL_INDEX && type == GL_UNSIGNED_BYTE;

   case MESA_FORMAT_SRGB_DXT1:
   case MESA_FORMAT_SRGBA_DXT1:
   case MESA_FORMAT_SRGBA_DXT3:
   case MESA_FORMAT_SRGBA_DXT5:
      return GL_FALSE;

   case MESA_FORMAT_RGB_FXT1:
   case MESA_FORMAT_RGBA_FXT1:
   case MESA_FORMAT_RGB_DXT1:
   case MESA_FORMAT_RGBA_DXT1:
   case MESA_FORMAT_RGBA_DXT3:
   case MESA_FORMAT_RGBA_DXT5:
      return GL_FALSE;

   case MESA_FORMAT_RGBA_FLOAT32:
      return format == GL_RGBA && type == GL_FLOAT && !swapBytes;
   case MESA_FORMAT_RGBA_FLOAT16:
      return format == GL_RGBA && type == GL_HALF_FLOAT && !swapBytes;

   case MESA_FORMAT_RGB_FLOAT32:
      return format == GL_RGB && type == GL_FLOAT && !swapBytes;
   case MESA_FORMAT_RGB_FLOAT16:
      return format == GL_RGB && type == GL_HALF_FLOAT && !swapBytes;

   case MESA_FORMAT_A_FLOAT32:
      return format == GL_ALPHA && type == GL_FLOAT && !swapBytes;
   case MESA_FORMAT_A_FLOAT16:
      return format == GL_ALPHA && type == GL_HALF_FLOAT && !swapBytes;

   case MESA_FORMAT_L_FLOAT32:
      return format == GL_LUMINANCE && type == GL_FLOAT && !swapBytes;
   case MESA_FORMAT_L_FLOAT16:
      return format == GL_LUMINANCE && type == GL_HALF_FLOAT && !swapBytes;

   case MESA_FORMAT_LA_FLOAT32:
      return format == GL_LUMINANCE_ALPHA && type == GL_FLOAT && !swapBytes;
   case MESA_FORMAT_LA_FLOAT16:
      return format == GL_LUMINANCE_ALPHA && type == GL_HALF_FLOAT && !swapBytes;

   case MESA_FORMAT_I_FLOAT32:
      return format == GL_RED && type == GL_FLOAT && !swapBytes;
   case MESA_FORMAT_I_FLOAT16:
      return format == GL_RED && type == GL_HALF_FLOAT && !swapBytes;

   case MESA_FORMAT_R_FLOAT32:
      return format == GL_RED && type == GL_FLOAT && !swapBytes;
   case MESA_FORMAT_R_FLOAT16:
      return format == GL_RED && type == GL_HALF_FLOAT && !swapBytes;

   case MESA_FORMAT_RG_FLOAT32:
      return format == GL_RG && type == GL_FLOAT && !swapBytes;
   case MESA_FORMAT_RG_FLOAT16:
      return format == GL_RG && type == GL_HALF_FLOAT && !swapBytes;

   case MESA_FORMAT_A_UINT8:
      return format == GL_ALPHA_INTEGER && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_A_UINT16:
      return format == GL_ALPHA_INTEGER && type == GL_UNSIGNED_SHORT &&
             !swapBytes;
   case MESA_FORMAT_A_UINT32:
      return format == GL_ALPHA_INTEGER && type == GL_UNSIGNED_INT &&
             !swapBytes;
   case MESA_FORMAT_A_SINT8:
      return format == GL_ALPHA_INTEGER && type == GL_BYTE;
   case MESA_FORMAT_A_SINT16:
      return format == GL_ALPHA_INTEGER && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_A_SINT32:
      return format == GL_ALPHA_INTEGER && type == GL_INT && !swapBytes;

   case MESA_FORMAT_I_UINT8:
      return format == GL_RED_INTEGER && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_I_UINT16:
      return format == GL_RED_INTEGER && type == GL_UNSIGNED_SHORT && !swapBytes;
   case MESA_FORMAT_I_UINT32:
      return format == GL_RED_INTEGER && type == GL_UNSIGNED_INT && !swapBytes;
   case MESA_FORMAT_I_SINT8:
      return format == GL_RED_INTEGER && type == GL_BYTE;
   case MESA_FORMAT_I_SINT16:
      return format == GL_RED_INTEGER && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_I_SINT32:
      return format == GL_RED_INTEGER && type == GL_INT && !swapBytes;

   case MESA_FORMAT_L_UINT8:
      return format == GL_LUMINANCE_INTEGER_EXT && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_L_UINT16:
      return format == GL_LUMINANCE_INTEGER_EXT && type == GL_UNSIGNED_SHORT &&
             !swapBytes;
   case MESA_FORMAT_L_UINT32:
      return format == GL_LUMINANCE_INTEGER_EXT && type == GL_UNSIGNED_INT &&
             !swapBytes;
   case MESA_FORMAT_L_SINT8:
      return format == GL_LUMINANCE_INTEGER_EXT && type == GL_BYTE;
   case MESA_FORMAT_L_SINT16:
      return format == GL_LUMINANCE_INTEGER_EXT && type == GL_SHORT &&
             !swapBytes;
   case MESA_FORMAT_L_SINT32:
      return format == GL_LUMINANCE_INTEGER_EXT && type == GL_INT && !swapBytes;

   case MESA_FORMAT_LA_UINT8:
      return format == GL_LUMINANCE_ALPHA_INTEGER_EXT &&
             type == GL_UNSIGNED_BYTE && !swapBytes;
   case MESA_FORMAT_LA_UINT16:
      return format == GL_LUMINANCE_ALPHA_INTEGER_EXT &&
             type == GL_UNSIGNED_SHORT && !swapBytes;
   case MESA_FORMAT_LA_UINT32:
      return format == GL_LUMINANCE_ALPHA_INTEGER_EXT &&
             type == GL_UNSIGNED_INT && !swapBytes;
   case MESA_FORMAT_LA_SINT8:
      return format == GL_LUMINANCE_ALPHA_INTEGER_EXT && type == GL_BYTE &&
             !swapBytes;
   case MESA_FORMAT_LA_SINT16:
      return format == GL_LUMINANCE_ALPHA_INTEGER_EXT && type == GL_SHORT &&
             !swapBytes;
   case MESA_FORMAT_LA_SINT32:
      return format == GL_LUMINANCE_ALPHA_INTEGER_EXT && type == GL_INT &&
             !swapBytes;

   case MESA_FORMAT_R_SINT8:
      return format == GL_RED_INTEGER && type == GL_BYTE;
   case MESA_FORMAT_RG_SINT8:
      return format == GL_RG_INTEGER && type == GL_BYTE && !swapBytes;
   case MESA_FORMAT_RGB_SINT8:
      return format == GL_RGB_INTEGER && type == GL_BYTE && !swapBytes;
   case MESA_FORMAT_RGBA_SINT8:
      return format == GL_RGBA_INTEGER && type == GL_BYTE && !swapBytes;
   case MESA_FORMAT_R_SINT16:
      return format == GL_RED_INTEGER && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_RG_SINT16:
      return format == GL_RG_INTEGER && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_RGB_SINT16:
      return format == GL_RGB_INTEGER && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_RGBA_SINT16:
      return format == GL_RGBA_INTEGER && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_R_SINT32:
      return format == GL_RED_INTEGER && type == GL_INT && !swapBytes;
   case MESA_FORMAT_RG_SINT32:
      return format == GL_RG_INTEGER && type == GL_INT && !swapBytes;
   case MESA_FORMAT_RGB_SINT32:
      return format == GL_RGB_INTEGER && type == GL_INT && !swapBytes;
   case MESA_FORMAT_RGBA_SINT32:
      return format == GL_RGBA_INTEGER && type == GL_INT && !swapBytes;

   case MESA_FORMAT_R_UINT8:
      return format == GL_RED_INTEGER && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_RG_UINT8:
      return format == GL_RG_INTEGER && type == GL_UNSIGNED_BYTE && !swapBytes;
   case MESA_FORMAT_RGB_UINT8:
      return format == GL_RGB_INTEGER && type == GL_UNSIGNED_BYTE && !swapBytes;
   case MESA_FORMAT_RGBA_UINT8:
      return format == GL_RGBA_INTEGER && type == GL_UNSIGNED_BYTE &&
             !swapBytes;
   case MESA_FORMAT_R_UINT16:
      return format == GL_RED_INTEGER && type == GL_UNSIGNED_SHORT &&
             !swapBytes;
   case MESA_FORMAT_RG_UINT16:
      return format == GL_RG_INTEGER && type == GL_UNSIGNED_SHORT && !swapBytes;
   case MESA_FORMAT_RGB_UINT16:
      return format == GL_RGB_INTEGER && type == GL_UNSIGNED_SHORT &&
             !swapBytes;
   case MESA_FORMAT_RGBA_UINT16:
      return format == GL_RGBA_INTEGER && type == GL_UNSIGNED_SHORT &&
             !swapBytes;
   case MESA_FORMAT_R_UINT32:
      return format == GL_RED_INTEGER && type == GL_UNSIGNED_INT && !swapBytes;
   case MESA_FORMAT_RG_UINT32:
      return format == GL_RG_INTEGER && type == GL_UNSIGNED_INT && !swapBytes;
   case MESA_FORMAT_RGB_UINT32:
      return format == GL_RGB_INTEGER && type == GL_UNSIGNED_INT && !swapBytes;
   case MESA_FORMAT_RGBA_UINT32:
      return format == GL_RGBA_INTEGER && type == GL_UNSIGNED_INT && !swapBytes;

   case MESA_FORMAT_DUDV8:
      return (format == GL_DU8DV8_ATI || format == GL_DUDV_ATI) &&
             type == GL_BYTE && littleEndian && !swapBytes;

   case MESA_FORMAT_R_SNORM8:
      return format == GL_RED && type == GL_BYTE;
   case MESA_FORMAT_R8G8_SNORM:
      return format == GL_RG && type == GL_BYTE && littleEndian &&
             !swapBytes;
   case MESA_FORMAT_X8B8G8R8_SNORM:
      return GL_FALSE;

   case MESA_FORMAT_A8B8G8R8_SNORM:
      if (format == GL_RGBA && type == GL_BYTE && !littleEndian)
         return GL_TRUE;

      if (format == GL_ABGR_EXT && type == GL_BYTE && littleEndian)
         return GL_TRUE;

      return GL_FALSE;

   case MESA_FORMAT_R8G8B8A8_SNORM:
      if (format == GL_RGBA && type == GL_BYTE && littleEndian)
         return GL_TRUE;

      if (format == GL_ABGR_EXT && type == GL_BYTE && !littleEndian)
         return GL_TRUE;

      return GL_FALSE;

   case MESA_FORMAT_R_SNORM16:
      return format == GL_RED && type == GL_SHORT &&
             !swapBytes;
   case MESA_FORMAT_R16G16_SNORM:
      return format == GL_RG && type == GL_SHORT && littleEndian && !swapBytes;
   case MESA_FORMAT_RGB_SNORM16:
      return format == GL_RGB && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_RGBA_SNORM16:
      return format == GL_RGBA && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_RGBA_UNORM16:
      return format == GL_RGBA && type == GL_UNSIGNED_SHORT &&
             !swapBytes;

   case MESA_FORMAT_R_RGTC1_UNORM:
   case MESA_FORMAT_R_RGTC1_SNORM:
   case MESA_FORMAT_RG_RGTC2_UNORM:
   case MESA_FORMAT_RG_RGTC2_SNORM:
      return GL_FALSE;

   case MESA_FORMAT_L_LATC1_UNORM:
   case MESA_FORMAT_L_LATC1_SNORM:
   case MESA_FORMAT_LA_LATC2_UNORM:
   case MESA_FORMAT_LA_LATC2_SNORM:
      return GL_FALSE;

   case MESA_FORMAT_ETC1_RGB8:
   case MESA_FORMAT_ETC2_RGB8:
   case MESA_FORMAT_ETC2_SRGB8:
   case MESA_FORMAT_ETC2_RGBA8_EAC:
   case MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC:
   case MESA_FORMAT_ETC2_R11_EAC:
   case MESA_FORMAT_ETC2_RG11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_R11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_RG11_EAC:
   case MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1:
   case MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1:
      return GL_FALSE;

   case MESA_FORMAT_A_SNORM8:
      return format == GL_ALPHA && type == GL_BYTE;
   case MESA_FORMAT_L_SNORM8:
      return format == GL_LUMINANCE && type == GL_BYTE;
   case MESA_FORMAT_L8A8_SNORM:
      return format == GL_LUMINANCE_ALPHA && type == GL_BYTE &&
             littleEndian && !swapBytes;
   case MESA_FORMAT_I_SNORM8:
      return format == GL_RED && type == GL_BYTE;
   case MESA_FORMAT_A_SNORM16:
      return format == GL_ALPHA && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_L_SNORM16:
      return format == GL_LUMINANCE && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_LA_SNORM16:
      return format == GL_LUMINANCE_ALPHA && type == GL_SHORT &&
             littleEndian && !swapBytes;
   case MESA_FORMAT_I_SNORM16:
      return format == GL_RED && type == GL_SHORT && littleEndian &&
             !swapBytes;

   case MESA_FORMAT_B10G10R10A2_UINT:
      return (format == GL_BGRA_INTEGER_EXT &&
              type == GL_UNSIGNED_INT_2_10_10_10_REV &&
              !swapBytes);

   case MESA_FORMAT_R10G10B10A2_UINT:
      return (format == GL_RGBA_INTEGER_EXT &&
              type == GL_UNSIGNED_INT_2_10_10_10_REV &&
              !swapBytes);

   case MESA_FORMAT_R9G9B9E5_FLOAT:
      return format == GL_RGB && type == GL_UNSIGNED_INT_5_9_9_9_REV &&
         !swapBytes;

   case MESA_FORMAT_R11G11B10_FLOAT:
      return format == GL_RGB && type == GL_UNSIGNED_INT_10F_11F_11F_REV &&
         !swapBytes;

   case MESA_FORMAT_Z_FLOAT32:
      return format == GL_DEPTH_COMPONENT && type == GL_FLOAT && !swapBytes;

   case MESA_FORMAT_Z32_FLOAT_S8X24_UINT:
      return format == GL_DEPTH_STENCIL &&
             type == GL_FLOAT_32_UNSIGNED_INT_24_8_REV && !swapBytes;

   case MESA_FORMAT_B4G4R4X4_UNORM:
   case MESA_FORMAT_B5G5R5X1_UNORM:
   case MESA_FORMAT_R8G8B8X8_SNORM:
   case MESA_FORMAT_R8G8B8X8_SRGB:
   case MESA_FORMAT_RGBX_UINT8:
   case MESA_FORMAT_RGBX_SINT8:
   case MESA_FORMAT_B10G10R10X2_UNORM:
   case MESA_FORMAT_RGBX_UNORM16:
   case MESA_FORMAT_RGBX_SNORM16:
   case MESA_FORMAT_RGBX_FLOAT16:
   case MESA_FORMAT_RGBX_UINT16:
   case MESA_FORMAT_RGBX_SINT16:
   case MESA_FORMAT_RGBX_FLOAT32:
   case MESA_FORMAT_RGBX_UINT32:
   case MESA_FORMAT_RGBX_SINT32:
      return GL_FALSE;

   case MESA_FORMAT_R10G10B10A2_UNORM:
      return format == GL_RGBA && type == GL_UNSIGNED_INT_2_10_10_10_REV &&
         !swapBytes;

   case MESA_FORMAT_G8R8_SNORM:
      return format == GL_RG && type == GL_BYTE && !littleEndian &&
         !swapBytes;

   case MESA_FORMAT_G16R16_SNORM:
      return format == GL_RG && type == GL_SHORT && !littleEndian &&
         !swapBytes;

   case MESA_FORMAT_B8G8R8X8_SRGB:
      return GL_FALSE;
   }

   return GL_FALSE;
}

@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a42 2
   enum mesa_format_layout Layout;

d46 1
a46 1
    * GL_DEPTH_COMPONENT, GL_STENCIL_INDEX, GL_DEPTH_STENCIL.
d62 1
d71 1
d73 1743
a1815 1
   uint8_t Swizzle[4];
d1818 1
a1818 1
#include "format_info.c"
d1893 1
a1893 1
      return 0;
a1926 15
 * Return the layout type of the given format.
 * The return value will be one of:
 *    MESA_FORMAT_LAYOUT_ARRAY
 *    MESA_FORMAT_LAYOUT_PACKED
 *    MESA_FORMAT_LAYOUT_OTHER
 */
extern enum mesa_format_layout
_mesa_get_format_layout(mesa_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return info->Layout;
}


/**
a1972 27
/**
 * Returns the an array of four numbers representing the transformation
 * from the RGBA or SZ colorspace to the given format.  For array formats,
 * the i'th RGBA component is given by:
 *
 * if (swizzle[i] <= MESA_FORMAT_SWIZZLE_W)
 *    comp = data[swizzle[i]];
 * else if (swizzle[i] == MESA_FORMAT_SWIZZLE_ZERO)
 *    comp = 0;
 * else if (swizzle[i] == MESA_FORMAT_SWIZZLE_ONE)
 *    comp = 1;
 * else if (swizzle[i] == MESA_FORMAT_SWIZZLE_NONE)
 *    // data does not contain a channel of this format
 *
 * For packed formats, the swizzle gives the number of components left of
 * the least significant bit.
 *
 * Compressed formats have no swizzle.
 */
void
_mesa_get_format_swizzle(mesa_format format, uint8_t swizzle_out[4])
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   memcpy(swizzle_out, info->Swizzle, sizeof(info->Swizzle));
}


a2059 1
   case MESA_FORMAT_A8R8G8B8_SRGB:
a2062 1
   case MESA_FORMAT_A8L8_SRGB:
a2071 1
   case MESA_FORMAT_BPTC_SRGB_ALPHA_UNORM:
a2079 25
 * Return TRUE if format is an ETC2 compressed format specified
 * by GL_ARB_ES3_compatibility.
 */
bool
_mesa_is_format_etc2(mesa_format format)
{
   switch (format) {
   case MESA_FORMAT_ETC2_RGB8:
   case MESA_FORMAT_ETC2_SRGB8:
   case MESA_FORMAT_ETC2_RGBA8_EAC:
   case MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC:
   case MESA_FORMAT_ETC2_R11_EAC:
   case MESA_FORMAT_ETC2_RG11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_R11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_RG11_EAC:
   case MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1:
   case MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1:
      return GL_TRUE;
   default:
      return GL_FALSE;
   }
}


/**
a2095 3
   case MESA_FORMAT_A8R8G8B8_SRGB:
      format = MESA_FORMAT_A8R8G8B8_UNORM;
      break;
a2104 3
   case MESA_FORMAT_A8L8_SRGB:
      format = MESA_FORMAT_A8L8_UNORM;
      break;
a2119 3
   case MESA_FORMAT_X8B8G8R8_SRGB:
      format = MESA_FORMAT_X8B8G8R8_UNORM;
      break;
a2128 3
   case MESA_FORMAT_BPTC_SRGB_ALPHA_UNORM:
      format = MESA_FORMAT_BPTC_RGBA_UNORM;
      break;
a2131 3
   case MESA_FORMAT_X8R8G8B8_SRGB:
      format = MESA_FORMAT_X8R8G8B8_UNORM;
      break;
a2193 6
   case MESA_FORMAT_BPTC_RGBA_UNORM:
   case MESA_FORMAT_BPTC_SRGB_ALPHA_UNORM:
      return MESA_FORMAT_A8B8G8R8_UNORM;
   case MESA_FORMAT_BPTC_RGB_UNSIGNED_FLOAT:
   case MESA_FORMAT_BPTC_RGB_SIGNED_FLOAT:
      return MESA_FORMAT_RGB_FLOAT32;
d2343 1
d2579 5
a2592 1
   case MESA_FORMAT_A8L8_SNORM:
a2634 1
   case MESA_FORMAT_A8R8G8B8_SRGB:
a2643 1
   case MESA_FORMAT_A8L8_SRGB:
a2676 4
   case MESA_FORMAT_BPTC_RGBA_UNORM:
   case MESA_FORMAT_BPTC_SRGB_ALPHA_UNORM:
   case MESA_FORMAT_BPTC_RGB_SIGNED_FLOAT:
   case MESA_FORMAT_BPTC_RGB_UNSIGNED_FLOAT:
a2904 1
   case MESA_FORMAT_X8B8G8R8_SRGB:
a2968 1
   case MESA_FORMAT_X8R8G8B8_SRGB:
a3083 1
   case MESA_FORMAT_A8R8G8B8_SRGB:
a3144 1
   case MESA_FORMAT_A8L8_SRGB:
a3232 6
   case MESA_FORMAT_BPTC_RGBA_UNORM:
   case MESA_FORMAT_BPTC_SRGB_ALPHA_UNORM:
   case MESA_FORMAT_BPTC_RGB_SIGNED_FLOAT:
   case MESA_FORMAT_BPTC_RGB_UNSIGNED_FLOAT:
      return GL_FALSE;

d3390 4
a3464 3
   case MESA_FORMAT_A8L8_SNORM:
      return format == GL_LUMINANCE_ALPHA && type == GL_BYTE &&
             !littleEndian && !swapBytes;
a3506 1
   case MESA_FORMAT_X8B8G8R8_SRGB:
a3532 1
   case MESA_FORMAT_X8R8G8B8_SRGB:
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d43 2
d48 1
a48 1
    * GL_DEPTH_COMPONENT, GL_STENCIL_INDEX, GL_DEPTH_STENCIL, GL_DUDV_ATI.
a63 1
   GLubyte IndexBits;
a71 1
};
d73 1
a73 1743

/**
 * Info about each format.
 * These must be in the same order as the MESA_FORMAT_* enums so that
 * we can do lookups without searching.
 */
static struct gl_format_info format_info[MESA_FORMAT_COUNT] =
{
   /* Packed unorm formats */
   {
      MESA_FORMAT_NONE,            /* Name */
      "MESA_FORMAT_NONE",          /* StrName */
      GL_NONE,                     /* BaseFormat */
      GL_NONE,                     /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      0, 0, 0                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A8B8G8R8_UNORM,  /* Name */
      "MESA_FORMAT_A8B8G8R8_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_X8B8G8R8_UNORM,  /* Name */
      "MESA_FORMAT_X8B8G8R8_UNORM",/* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R8G8B8A8_UNORM,  /* Name */
      "MESA_FORMAT_R8G8B8A8_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R8G8B8X8_UNORM,  /* Name */
      "MESA_FORMAT_R8G8B8X8_UNORM",/* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B8G8R8A8_UNORM,  /* Name */
      "MESA_FORMAT_B8G8R8A8_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B8G8R8X8_UNORM,  /* Name */
      "MESA_FORMAT_B8G8R8X8_UNORM",/* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A8R8G8B8_UNORM,  /* Name */
      "MESA_FORMAT_A8R8G8B8_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_X8R8G8B8_UNORM,  /* Name */
      "MESA_FORMAT_X8R8G8B8_UNORM",/* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_L16A16_UNORM,    /* Name */
      "MESA_FORMAT_L16A16_UNORM",  /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 16,                 /* Red/Green/Blue/AlphaBits */
      16, 0, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A16L16_UNORM,    /* Name */
      "MESA_FORMAT_A16L16_UNORM",  /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 16,                 /* Red/Green/Blue/AlphaBits */
      16, 0, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B5G6R5_UNORM,    /* Name */
      "MESA_FORMAT_B5G6R5_UNORM",  /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 6, 5, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R5G6B5_UNORM,    /* Name */
      "MESA_FORMAT_R5G6B5_UNORM",  /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 6, 5, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B4G4R4A4_UNORM,  /* Name */
      "MESA_FORMAT_B4G4R4A4_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 4,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B4G4R4X4_UNORM,
      "MESA_FORMAT_B4G4R4X4_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A4R4G4B4_UNORM,  /* Name */
      "MESA_FORMAT_A4R4G4B4_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 4,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A1B5G5R5_UNORM,  /* Name */
      "MESA_FORMAT_A1B5G5R5_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 5, 5, 1,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B5G5R5A1_UNORM,  /* Name */
      "MESA_FORMAT_B5G5R5A1_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 5, 5, 1,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B5G5R5X1_UNORM,
      "MESA_FORMAT_B5G5R5X1_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      5, 5, 5, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A1R5G5B5_UNORM,  /* Name */
      "MESA_FORMAT_A1R5G5B5_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 5, 5, 1,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_L8A8_UNORM,      /* Name */
      "MESA_FORMAT_L8A8_UNORM",    /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 8,                  /* Red/Green/Blue/AlphaBits */
      8, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A8L8_UNORM,      /* Name */
      "MESA_FORMAT_A8L8_UNORM",    /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 8,                  /* Red/Green/Blue/AlphaBits */
      8, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R8G8_UNORM,
      "MESA_FORMAT_R8G8_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_G8R8_UNORM,
      "MESA_FORMAT_G8R8_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L4A4_UNORM,      /* Name */
      "MESA_FORMAT_L4A4_UNORM",    /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 4,                  /* Red/Green/Blue/AlphaBits */
      4, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B2G3R3_UNORM,    /* Name */
      "MESA_FORMAT_B2G3R3_UNORM",  /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      3, 3, 2, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R16G16_UNORM,
      "MESA_FORMAT_R16G16_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_G16R16_UNORM,
      "MESA_FORMAT_G16R16_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_B10G10R10A2_UNORM,
      "MESA_FORMAT_B10G10R10A2_UNORM",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_B10G10R10X2_UNORM,
      "MESA_FORMAT_B10G10R10X2_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      10, 10, 10, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R10G10B10A2_UNORM,
      "MESA_FORMAT_R10G10B10A2_UNORM",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_S8_UINT_Z24_UNORM,   /* Name */
      "MESA_FORMAT_S8_UINT_Z24_UNORM", /* StrName */
      GL_DEPTH_STENCIL,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 8,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_X8_UINT_Z24_UNORM,   /* Name */
      "MESA_FORMAT_X8_UINT_Z24_UNORM", /* StrName */
      GL_DEPTH_COMPONENT,              /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 0,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_Z24_UNORM_S8_UINT,   /* Name */
      "MESA_FORMAT_Z24_UNORM_S8_UINT", /* StrName */
      GL_DEPTH_STENCIL,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 8,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_Z24_UNORM_X8_UINT,   /* Name */
      "MESA_FORMAT_Z24_UNORM_X8_UINT", /* StrName */
      GL_DEPTH_COMPONENT,              /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 0,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_YCBCR,           /* Name */
      "MESA_FORMAT_YCBCR",         /* StrName */
      GL_YCBCR_MESA,               /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_YCBCR_REV,       /* Name */
      "MESA_FORMAT_YCBCR_REV",     /* StrName */
      GL_YCBCR_MESA,               /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },

   /* Array unorm formats */
   {
      MESA_FORMAT_DUDV8,
      "MESA_FORMAT_DUDV8",
      GL_DUDV_ATI,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A_UNORM8,        /* Name */
      "MESA_FORMAT_A_UNORM8",      /* StrName */
      GL_ALPHA,                    /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A_UNORM16,       /* Name */
      "MESA_FORMAT_A_UNORM16",     /* StrName */
      GL_ALPHA,                    /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 16,                 /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_L_UNORM8,        /* Name */
      "MESA_FORMAT_L_UNORM8",      /* StrName */
      GL_LUMINANCE,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      8, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_L_UNORM16,       /* Name */
      "MESA_FORMAT_L_UNORM16",     /* StrName */
      GL_LUMINANCE,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      16, 0, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_I_UNORM8,        /* Name */
      "MESA_FORMAT_I_UNORM8",      /* StrName */
      GL_INTENSITY,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 8, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_I_UNORM16,       /* Name */
      "MESA_FORMAT_I_UNORM16",     /* StrName */
      GL_INTENSITY,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 16, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R_UNORM8,
      "MESA_FORMAT_R_UNORM8",
      GL_RED,
      GL_UNSIGNED_NORMALIZED,
      8, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_R_UNORM16,
      "MESA_FORMAT_R_UNORM16",
      GL_RED,
      GL_UNSIGNED_NORMALIZED,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_BGR_UNORM8,      /* Name */
      "MESA_FORMAT_BGR_UNORM8",    /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 3                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_RGB_UNORM8,      /* Name */
      "MESA_FORMAT_RGB_UNORM8",    /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 3                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_RGBA_UNORM16,
      "MESA_FORMAT_RGBA_UNORM16",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_UNORM16,
      "MESA_FORMAT_RGBX_UNORM16",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_Z_UNORM16,       /* Name */
      "MESA_FORMAT_Z_UNORM16",     /* StrName */
      GL_DEPTH_COMPONENT,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 16, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_Z_UNORM32,       /* Name */
      "MESA_FORMAT_Z_UNORM32",     /* StrName */
      GL_DEPTH_COMPONENT,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_S_UINT8,         /* Name */
      "MESA_FORMAT_S_UINT8",       /* StrName */
      GL_STENCIL_INDEX,            /* BaseFormat */
      GL_UNSIGNED_INT,             /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 8,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },

   /* Packed signed/normalized formats */
   {
      MESA_FORMAT_A8B8G8R8_SNORM,
      "MESA_FORMAT_A8B8G8R8_SNORM",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_X8B8G8R8_SNORM,
      "MESA_FORMAT_X8B8G8R8_SNORM",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4                       /* 4 bpp, but no alpha */
   },
   {
      MESA_FORMAT_R8G8B8A8_SNORM,
      "MESA_FORMAT_R8G8B8A8_SNORM",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R8G8B8X8_SNORM,
      "MESA_FORMAT_R8G8B8X8_SNORM",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R16G16_SNORM,
      "MESA_FORMAT_R16G16_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_G16R16_SNORM,
      "MESA_FORMAT_G16R16_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R8G8_SNORM,
      "MESA_FORMAT_R8G8_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_G8R8_SNORM,
      "MESA_FORMAT_G8R8_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L8A8_SNORM,
      "MESA_FORMAT_L8A8_SNORM",
      GL_LUMINANCE_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },

   /* Array signed/normalized formats */
   {
      MESA_FORMAT_A_SNORM8,
      "MESA_FORMAT_A_SNORM8",
      GL_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 8,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_A_SNORM16,
      "MESA_FORMAT_A_SNORM16",
      GL_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 16,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L_SNORM8,
      "MESA_FORMAT_L_SNORM8",
      GL_LUMINANCE,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_L_SNORM16,
      "MESA_FORMAT_L_SNORM16",
      GL_LUMINANCE,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_I_SNORM8,
      "MESA_FORMAT_I_SNORM8",
      GL_INTENSITY,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_I_SNORM16,
      "MESA_FORMAT_I_SNORM16",
      GL_INTENSITY,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R_SNORM8,         /* Name */
      "MESA_FORMAT_R_SNORM8",       /* StrName */
      GL_RED,                       /* BaseFormat */
      GL_SIGNED_NORMALIZED,         /* DataType */
      8, 0, 0, 0,                   /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,                /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                       /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R_SNORM16,
      "MESA_FORMAT_R_SNORM16",
      GL_RED,
      GL_SIGNED_NORMALIZED,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_LA_SNORM16,
      "MESA_FORMAT_LA_SNORM16",
      GL_LUMINANCE_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGB_SNORM16,
      "MESA_FORMAT_RGB_SNORM16",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGBA_SNORM16,
      "MESA_FORMAT_RGBA_SNORM16",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_SNORM16,
      "MESA_FORMAT_RGBX_SNORM16",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },

   /* Packed sRGB formats */
   {
      MESA_FORMAT_A8B8G8R8_SRGB,
      "MESA_FORMAT_A8B8G8R8_SRGB",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_B8G8R8A8_SRGB,
      "MESA_FORMAT_B8G8R8A8_SRGB",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_B8G8R8X8_SRGB,
      "MESA_FORMAT_B8G8R8X8_SRGB",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R8G8B8A8_SRGB,
      "MESA_FORMAT_R8G8B8A8_SRGB",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R8G8B8X8_SRGB,
      "MESA_FORMAT_R8G8B8X8_SRGB",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_L8A8_SRGB,
      "MESA_FORMAT_L8A8_SRGB",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_NORMALIZED,    
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },

   /* Array sRGB formats */
   {
      MESA_FORMAT_L_SRGB8,
      "MESA_FORMAT_L_SRGB8",
      GL_LUMINANCE,
      GL_UNSIGNED_NORMALIZED,    
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_BGR_SRGB8,
      "MESA_FORMAT_BGR_SRGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 3
   },

   /* Packed float formats */
   {
      MESA_FORMAT_R9G9B9E5_FLOAT,
      "MESA_FORMAT_RGB9_E5",
      GL_RGB,
      GL_FLOAT,
      9, 9, 9, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R11G11B10_FLOAT,
      "MESA_FORMAT_R11G11B10_FLOAT",
      GL_RGB,
      GL_FLOAT,
      11, 11, 10, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_Z32_FLOAT_S8X24_UINT,   /* Name */
      "MESA_FORMAT_Z32_FLOAT_S8X24_UINT", /* StrName */
      GL_DEPTH_STENCIL,                   /* BaseFormat */
      /* DataType here is used to answer GL_TEXTURE_DEPTH_TYPE queries, and is
       * never used for stencil because stencil is always GL_UNSIGNED_INT.
       */
      GL_FLOAT,                    /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 8,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 8                      /* BlockWidth/Height,Bytes */
   },

   /* Array float formats */
   {
      MESA_FORMAT_A_FLOAT16,
      "MESA_FORMAT_A_FLOAT16",
      GL_ALPHA,
      GL_FLOAT,
      0, 0, 0, 16,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A_FLOAT32,
      "MESA_FORMAT_A_FLOAT32",
      GL_ALPHA,
      GL_FLOAT,
      0, 0, 0, 32,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_L_FLOAT16,
      "MESA_FORMAT_L_FLOAT16",
      GL_LUMINANCE,
      GL_FLOAT,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L_FLOAT32,
      "MESA_FORMAT_L_FLOAT32",
      GL_LUMINANCE,
      GL_FLOAT,
      0, 0, 0, 0,
      32, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_FLOAT16,
      "MESA_FORMAT_LA_FLOAT16",
      GL_LUMINANCE_ALPHA,
      GL_FLOAT,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_FLOAT32,
      "MESA_FORMAT_LA_FLOAT32",
      GL_LUMINANCE_ALPHA,
      GL_FLOAT,
      0, 0, 0, 32,
      32, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_I_FLOAT16,
      "MESA_FORMAT_I_FLOAT16",
      GL_INTENSITY,
      GL_FLOAT,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_I_FLOAT32,
      "MESA_FORMAT_I_FLOAT32",
      GL_INTENSITY,
      GL_FLOAT,
      0, 0, 0, 0,
      0, 32, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R_FLOAT16,
      "MESA_FORMAT_R_FLOAT16",
      GL_RED,
      GL_FLOAT,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R_FLOAT32,
      "MESA_FORMAT_R_FLOAT32",
      GL_RED,
      GL_FLOAT,
      32, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_FLOAT16,
      "MESA_FORMAT_RG_FLOAT16",
      GL_RG,
      GL_FLOAT,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_FLOAT32,
      "MESA_FORMAT_RG_FLOAT32",
      GL_RG,
      GL_FLOAT,
      32, 32, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGB_FLOAT16,
      "MESA_FORMAT_RGB_FLOAT16",
      GL_RGB,
      GL_FLOAT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGB_FLOAT32,
      "MESA_FORMAT_RGB_FLOAT32",
      GL_RGB,
      GL_FLOAT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 12
   },
   {
      MESA_FORMAT_RGBA_FLOAT16,
      "MESA_FORMAT_RGBA_FLOAT16",
      GL_RGBA,
      GL_FLOAT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBA_FLOAT32,
      "MESA_FORMAT_RGBA_FLOAT32",
      GL_RGBA,
      GL_FLOAT,
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_RGBX_FLOAT16,
      "MESA_FORMAT_RGBX_FLOAT16",
      GL_RGB,
      GL_FLOAT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_FLOAT32,
      "MESA_FORMAT_RGBX_FLOAT32",
      GL_RGB,
      GL_FLOAT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_Z_FLOAT32,       /* Name */
      "MESA_FORMAT_Z_FLOAT32",     /* StrName */
      GL_DEPTH_COMPONENT,          /* BaseFormat */
      GL_FLOAT,                    /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },

   /* Packed signed/unsigned non-normalized integer formats */
   {
      MESA_FORMAT_B10G10R10A2_UINT,
      "MESA_FORMAT_B10G10R10A2_UINT",
      GL_RGBA,
      GL_UNSIGNED_INT,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R10G10B10A2_UINT,
      "MESA_FORMAT_R10G10B10A2_UINT",
      GL_RGBA,
      GL_UNSIGNED_INT,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },

   /* Array signed/unsigned non-normalized integer formats */
   {
      MESA_FORMAT_A_UINT8,
      "MESA_FORMAT_A_UINT8",
      GL_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 8,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_A_UINT16,
      "MESA_FORMAT_A_UINT16",
      GL_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 16,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A_UINT32,
      "MESA_FORMAT_A_UINT32",
      GL_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 32,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_A_SINT8,
      "MESA_FORMAT_A_SINT8",
      GL_ALPHA,
      GL_INT,
      0, 0, 0, 8,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_A_SINT16,
      "MESA_FORMAT_A_SINT16",
      GL_ALPHA,
      GL_INT,
      0, 0, 0, 16,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A_SINT32,
      "MESA_FORMAT_A_SINT32",
      GL_ALPHA,
      GL_INT,
      0, 0, 0, 32,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_I_UINT8,
      "MESA_FORMAT_I_UINT8",
      GL_INTENSITY,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_I_UINT16,
      "MESA_FORMAT_I_UINT16",
      GL_INTENSITY,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_I_UINT32,
      "MESA_FORMAT_I_UINT32",
      GL_INTENSITY,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      0, 32, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_I_SINT8,
      "MESA_FORMAT_I_SINT8",
      GL_INTENSITY,
      GL_INT,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_I_SINT16,
      "MESA_FORMAT_I_SINT16",
      GL_INTENSITY,
      GL_INT,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_I_SINT32,
      "MESA_FORMAT_I_SINT32",
      GL_INTENSITY,
      GL_INT,
      0, 0, 0, 0,
      0, 32, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_L_UINT8,
      "MESA_FORMAT_L_UINT8",
      GL_LUMINANCE,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_L_UINT16,
      "MESA_FORMAT_L_UINT16",
      GL_LUMINANCE,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L_UINT32,
      "MESA_FORMAT_L_UINT32",
      GL_LUMINANCE,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      32, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_L_SINT8,
      "MESA_FORMAT_L_SINT8",
      GL_LUMINANCE,
      GL_INT,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_L_SINT16,
      "MESA_FORMAT_L_SINT16",
      GL_LUMINANCE,
      GL_INT,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L_SINT32,
      "MESA_FORMAT_L_SINT32",
      GL_LUMINANCE,
      GL_INT,
      0, 0, 0, 0,
      32, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_UINT8,
      "MESA_FORMAT_LA_UINT8",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_LA_UINT16,
      "MESA_FORMAT_LA_UINT16",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_UINT32,
      "MESA_FORMAT_LA_UINT32",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 32,
      32, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_LA_SINT8,
      "MESA_FORMAT_LA_SINT8",
      GL_LUMINANCE_ALPHA,
      GL_INT,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_LA_SINT16,
      "MESA_FORMAT_LA_SINT16",
      GL_LUMINANCE_ALPHA,
      GL_INT,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_SINT32,
      "MESA_FORMAT_LA_SINT32",
      GL_LUMINANCE_ALPHA,
      GL_INT,
      0, 0, 0, 32,
      32, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_R_UINT8,
      "MESA_FORMAT_R_UINT8",
      GL_RED,
      GL_UNSIGNED_INT,
      8, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_R_UINT16,
      "MESA_FORMAT_R_UINT16",
      GL_RED,
      GL_UNSIGNED_INT,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R_UINT32,
      "MESA_FORMAT_R_UINT32",
      GL_RED,
      GL_UNSIGNED_INT,
      32, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R_SINT8,
      "MESA_FORMAT_R_SINT8",
      GL_RED,
      GL_INT,
      8, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_R_SINT16,
      "MESA_FORMAT_R_SINT16",
      GL_RED,
      GL_INT,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R_SINT32,
      "MESA_FORMAT_R_SINT32",
      GL_RED,
      GL_INT,
      32, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_UINT8,
      "MESA_FORMAT_RG_UINT8",
      GL_RG,
      GL_UNSIGNED_INT,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RG_UINT16,
      "MESA_FORMAT_RG_UINT16",
      GL_RG,
      GL_UNSIGNED_INT,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_UINT32,
      "MESA_FORMAT_RG_UINT32",
      GL_RG,
      GL_UNSIGNED_INT,
      32, 32, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RG_SINT8,
      "MESA_FORMAT_RG_SINT8",
      GL_RG,
      GL_INT,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RG_SINT16,
      "MESA_FORMAT_RG_SINT16",
      GL_RG,
      GL_INT,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_SINT32,
      "MESA_FORMAT_RG_SINT32",
      GL_RG,
      GL_INT,
      32, 32, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGB_UINT8,
      "MESA_FORMAT_RGB_UINT8",
      GL_RGB,
      GL_UNSIGNED_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 3
   },
   {
      MESA_FORMAT_RGB_UINT16,
      "MESA_FORMAT_RGB_UINT16",
      GL_RGB,
      GL_UNSIGNED_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGB_UINT32,
      "MESA_FORMAT_RGB_UINT32",
      GL_RGB,
      GL_UNSIGNED_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 12
   },
   {
      MESA_FORMAT_RGB_SINT8,
      "MESA_FORMAT_RGB_SINT8",
      GL_RGB,
      GL_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 3
   },
   {
      MESA_FORMAT_RGB_SINT16,
      "MESA_FORMAT_RGB_SINT16",
      GL_RGB,
      GL_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGB_SINT32,
      "MESA_FORMAT_RGB_SINT32",
      GL_RGB,
      GL_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 12
   },
   {
      MESA_FORMAT_RGBA_UINT8,
      "MESA_FORMAT_RGBA_UINT8",
      GL_RGBA,
      GL_UNSIGNED_INT,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGBA_UINT16,
      "MESA_FORMAT_RGBA_UINT16",
      GL_RGBA,
      GL_UNSIGNED_INT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBA_UINT32,
      "MESA_FORMAT_RGBA_UINT32",
      GL_RGBA,
      GL_UNSIGNED_INT,
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_RGBA_SINT8,
      "MESA_FORMAT_RGBA_SINT8",
      GL_RGBA,
      GL_INT,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGBA_SINT16,
      "MESA_FORMAT_RGBA_SINT16",
      GL_RGBA,
      GL_INT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBA_SINT32,
      "MESA_FORMAT_RGBA_SINT32",
      GL_RGBA,
      GL_INT,
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_RGBX_UINT8,
      "MESA_FORMAT_RGBX_UINT8",
      GL_RGB,
      GL_UNSIGNED_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGBX_UINT16,
      "MESA_FORMAT_RGBX_UINT16",
      GL_RGB,
      GL_UNSIGNED_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_UINT32,
      "MESA_FORMAT_RGBX_UINT32",
      GL_RGB,
      GL_UNSIGNED_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_RGBX_SINT8,
      "MESA_FORMAT_RGBX_SINT8",
      GL_RGB,
      GL_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGBX_SINT16,
      "MESA_FORMAT_RGBX_SINT16",
      GL_RGB,
      GL_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_SINT32,
      "MESA_FORMAT_RGBX_SINT32",
      GL_RGB,
      GL_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 16
   },

   /* DXT compressed formats */
   {
      MESA_FORMAT_RGB_DXT1,        /* Name */
      "MESA_FORMAT_RGB_DXT1",      /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 0,                  /* approx Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      4, 4, 8                      /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_RGBA_DXT1,
      "MESA_FORMAT_RGBA_DXT1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 8                      /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_RGBA_DXT3,
      "MESA_FORMAT_RGBA_DXT3",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_RGBA_DXT5,
      "MESA_FORMAT_RGBA_DXT5",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 16                     /* 16 bytes per 4x4 block */
   },

   /* DXT sRGB compressed formats */
   {
      MESA_FORMAT_SRGB_DXT1,       /* Name */
      "MESA_FORMAT_SRGB_DXT1",     /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 0,                  /* approx Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      4, 4, 8                      /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_SRGBA_DXT1,
      "MESA_FORMAT_SRGBA_DXT1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 8                      /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_SRGBA_DXT3,
      "MESA_FORMAT_SRGBA_DXT3",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_SRGBA_DXT5,
      "MESA_FORMAT_SRGBA_DXT5",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 16                     /* 16 bytes per 4x4 block */
   },

   /* FXT1 compressed formats */
   {
      MESA_FORMAT_RGB_FXT1,
      "MESA_FORMAT_RGB_FXT1",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 0,                  /* approx Red/Green/BlueBits */
      0, 0, 0, 0, 0,
      8, 4, 16                     /* 16 bytes per 8x4 block */
   },
   {
      MESA_FORMAT_RGBA_FXT1,
      "MESA_FORMAT_RGBA_FXT1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 1,                  /* approx Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,
      8, 4, 16                     /* 16 bytes per 8x4 block */
   },

   /* RGTC compressed formats */
   {
     MESA_FORMAT_R_RGTC1_UNORM,
     "MESA_FORMAT_R_RGTC1_UNORM",
     GL_RED,
     GL_UNSIGNED_NORMALIZED,
     8, 0, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_R_RGTC1_SNORM,
     "MESA_FORMAT_R_RGTC1_SNORM",
     GL_RED,
     GL_SIGNED_NORMALIZED,
     8, 0, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_RG_RGTC2_UNORM,
     "MESA_FORMAT_RG_RGTC2_UNORM",
     GL_RG,
     GL_UNSIGNED_NORMALIZED,
     8, 8, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_RG_RGTC2_SNORM,
     "MESA_FORMAT_RG_RGTC2_SNORM",
     GL_RG,
     GL_SIGNED_NORMALIZED,
     8, 8, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },

   /* LATC1/2 compressed formats */
   {
     MESA_FORMAT_L_LATC1_UNORM,
     "MESA_FORMAT_L_LATC1_UNORM",
     GL_LUMINANCE,
     GL_UNSIGNED_NORMALIZED,
     0, 0, 0, 0,
     4, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_L_LATC1_SNORM,
     "MESA_FORMAT_L_LATC1_SNORM",
     GL_LUMINANCE,
     GL_SIGNED_NORMALIZED,
     0, 0, 0, 0,
     4, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_LA_LATC2_UNORM,
     "MESA_FORMAT_LA_LATC2_UNORM",
     GL_LUMINANCE_ALPHA,
     GL_UNSIGNED_NORMALIZED,
     0, 0, 0, 4,
     4, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_LA_LATC2_SNORM,
     "MESA_FORMAT_LA_LATC2_SNORM",
     GL_LUMINANCE_ALPHA,
     GL_SIGNED_NORMALIZED,
     0, 0, 0, 4,
     4, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },

   /* ETC1/2 compressed formats */
   {
      MESA_FORMAT_ETC1_RGB8,
      "MESA_FORMAT_ETC1_RGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_RGB8,
      "MESA_FORMAT_ETC2_RGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SRGB8,
      "MESA_FORMAT_ETC2_SRGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_RGBA8_EAC,
      "MESA_FORMAT_ETC2_RGBA8_EAC",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC,
      "MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_R11_EAC,
      "MESA_FORMAT_ETC2_R11_EAC",
      GL_RED,
      GL_UNSIGNED_NORMALIZED,
      11, 0, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                    /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_RG11_EAC,
      "MESA_FORMAT_ETC2_RG11_EAC",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      11, 11, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SIGNED_R11_EAC,
      "MESA_FORMAT_ETC2_SIGNED_R11_EAC",
      GL_RED,
      GL_SIGNED_NORMALIZED,
      11, 0, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                    /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SIGNED_RG11_EAC,
      "MESA_FORMAT_ETC2_SIGNED_RG11_EAC",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      11, 11, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1,
      "MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 1,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1,
      "MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 1,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
d76 1
a76 1

d151 1
a151 1
      return info->IndexBits;
d185 15
d246 27
d360 1
d364 1
d374 1
d383 25
d424 3
d436 3
d454 3
d466 3
d472 3
d537 6
a691 1

a926 5
   case MESA_FORMAT_DUDV8:
      *datatype = GL_BYTE;
      *comps = 2;
      return;

d936 1
d979 1
d989 1
d1023 4
d1255 1
d1320 1
d1436 1
d1498 1
d1587 6
a1749 4
   case MESA_FORMAT_DUDV8:
      return (format == GL_DU8DV8_ATI || format == GL_DUDV_ATI) &&
             type == GL_BYTE && littleEndian && !swapBytes;

d1821 3
d1866 1
d1893 1
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d38 1
a38 1
   gl_format Name;
d81 1
d92 2
a93 2
      MESA_FORMAT_RGBA8888,        /* Name */
      "MESA_FORMAT_RGBA8888",      /* StrName */
d101 3
a103 3
      MESA_FORMAT_RGBA8888_REV,    /* Name */
      "MESA_FORMAT_RGBA8888_REV",  /* StrName */
      GL_RGBA,                     /* BaseFormat */
d105 1
a105 1
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
d110 2
a111 2
      MESA_FORMAT_ARGB8888,        /* Name */
      "MESA_FORMAT_ARGB8888",      /* StrName */
d119 3
a121 3
      MESA_FORMAT_ARGB8888_REV,    /* Name */
      "MESA_FORMAT_ARGB8888_REV",  /* StrName */
      GL_RGBA,                     /* BaseFormat */
d123 1
a123 1
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
d128 3
a130 3
      MESA_FORMAT_RGBX8888,        /* Name */
      "MESA_FORMAT_RGBX8888",      /* StrName */
      GL_RGB,                      /* BaseFormat */
d132 1
a132 1
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
d137 2
a138 2
      MESA_FORMAT_RGBX8888_REV,    /* Name */
      "MESA_FORMAT_RGBX8888_REV",  /* StrName */
d146 3
a148 3
      MESA_FORMAT_XRGB8888,        /* Name */
      "MESA_FORMAT_XRGB8888",      /* StrName */
      GL_RGB,                      /* BaseFormat */
d150 1
a150 1
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
d155 2
a156 2
      MESA_FORMAT_XRGB8888_REV,    /* Name */
      "MESA_FORMAT_XRGB8888_REV",  /* StrName */
d164 3
a166 3
      MESA_FORMAT_RGB888,          /* Name */
      "MESA_FORMAT_RGB888",        /* StrName */
      GL_RGB,                      /* BaseFormat */
d168 3
a170 3
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 3                      /* BlockWidth/Height,Bytes */
d173 3
a175 3
      MESA_FORMAT_BGR888,          /* Name */
      "MESA_FORMAT_BGR888",        /* StrName */
      GL_RGB,                      /* BaseFormat */
d177 3
a179 3
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 3                      /* BlockWidth/Height,Bytes */
d182 2
a183 2
      MESA_FORMAT_RGB565,          /* Name */
      "MESA_FORMAT_RGB565",        /* StrName */
d191 2
a192 2
      MESA_FORMAT_RGB565_REV,      /* Name */
      "MESA_FORMAT_RGB565_REV",    /* StrName */
d200 2
a201 2
      MESA_FORMAT_ARGB4444,        /* Name */
      "MESA_FORMAT_ARGB4444",      /* StrName */
d209 11
a219 2
      MESA_FORMAT_ARGB4444_REV,    /* Name */
      "MESA_FORMAT_ARGB4444_REV",  /* StrName */
d227 2
a228 2
      MESA_FORMAT_RGBA5551,        /* Name */
      "MESA_FORMAT_RGBA5551",      /* StrName */
d236 2
a237 2
      MESA_FORMAT_ARGB1555,        /* Name */
      "MESA_FORMAT_ARGB1555",      /* StrName */
d245 11
a255 2
      MESA_FORMAT_ARGB1555_REV,    /* Name */
      "MESA_FORMAT_ARGB1555_REV",  /* StrName */
d263 2
a264 11
      MESA_FORMAT_AL44,            /* Name */
      "MESA_FORMAT_AL44",          /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 4,                  /* Red/Green/Blue/AlphaBits */
      4, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_AL88,            /* Name */
      "MESA_FORMAT_AL88",          /* StrName */
d272 2
a273 2
      MESA_FORMAT_AL88_REV,        /* Name */
      "MESA_FORMAT_AL88_REV",      /* StrName */
d281 16
a296 7
      MESA_FORMAT_AL1616,          /* Name */
      "MESA_FORMAT_AL1616",        /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 16,                 /* Red/Green/Blue/AlphaBits */
      16, 0, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
d299 2
a300 2
      MESA_FORMAT_AL1616_REV,      /* Name */
      "MESA_FORMAT_AL1616_REV",    /* StrName */
d303 3
a305 3
      0, 0, 0, 16,                 /* Red/Green/Blue/AlphaBits */
      16, 0, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
d308 2
a309 2
      MESA_FORMAT_RGB332,          /* Name */
      "MESA_FORMAT_RGB332",        /* StrName */
d317 112
a428 2
      MESA_FORMAT_A8,              /* Name */
      "MESA_FORMAT_A8",            /* StrName */
d436 2
a437 2
      MESA_FORMAT_A16,             /* Name */
      "MESA_FORMAT_A16",           /* StrName */
d445 2
a446 2
      MESA_FORMAT_L8,              /* Name */
      "MESA_FORMAT_L8",            /* StrName */
d454 2
a455 2
      MESA_FORMAT_L16,             /* Name */
      "MESA_FORMAT_L16",           /* StrName */
d463 2
a464 2
      MESA_FORMAT_I8,              /* Name */
      "MESA_FORMAT_I8",            /* StrName */
d472 2
a473 2
      MESA_FORMAT_I16,             /* Name */
      "MESA_FORMAT_I16",           /* StrName */
d481 2
a482 20
      MESA_FORMAT_YCBCR,           /* Name */
      "MESA_FORMAT_YCBCR",         /* StrName */
      GL_YCBCR_MESA,               /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_YCBCR_REV,       /* Name */
      "MESA_FORMAT_YCBCR_REV",     /* StrName */
      GL_YCBCR_MESA,               /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R8,
      "MESA_FORMAT_R8",
d490 2
a491 20
      MESA_FORMAT_GR88,
      "MESA_FORMAT_GR88",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RG88,
      "MESA_FORMAT_RG88",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R16,
      "MESA_FORMAT_R16",
d499 7
a505 7
      MESA_FORMAT_GR1616,
      "MESA_FORMAT_GR1616",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
d508 7
a514 7
      MESA_FORMAT_RG1616,
      "MESA_FORMAT_RG1616",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
d517 2
a518 2
      MESA_FORMAT_ARGB2101010,
      "MESA_FORMAT_ARGB2101010",
d521 1
a521 1
      10, 10, 10, 2,
d523 1
a523 1
      1, 1, 4
d526 7
a532 16
      MESA_FORMAT_Z24_S8,          /* Name */
      "MESA_FORMAT_Z24_S8",        /* StrName */
      GL_DEPTH_STENCIL,            /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 8,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_S8_Z24,          /* Name */
      "MESA_FORMAT_S8_Z24",        /* StrName */
      GL_DEPTH_STENCIL,            /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 8,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
d535 2
a536 2
      MESA_FORMAT_Z16,             /* Name */
      "MESA_FORMAT_Z16",           /* StrName */
d544 2
a545 20
      MESA_FORMAT_X8_Z24,          /* Name */
      "MESA_FORMAT_X8_Z24",        /* StrName */
      GL_DEPTH_COMPONENT,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_Z24_X8,          /* Name */
      "MESA_FORMAT_Z24_X8",        /* StrName */
      GL_DEPTH_COMPONENT,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_Z32,             /* Name */
      "MESA_FORMAT_Z32",           /* StrName */
d553 2
a554 2
      MESA_FORMAT_S8,              /* Name */
      "MESA_FORMAT_S8",            /* StrName */
d561 11
d573 2
a574 2
      MESA_FORMAT_SRGB8,
      "MESA_FORMAT_SRGB8",
d576 1
a576 1
      GL_UNSIGNED_NORMALIZED,
d579 1
a579 1
      1, 1, 3
d582 2
a583 2
      MESA_FORMAT_SRGBA8,
      "MESA_FORMAT_SRGBA8",
d585 1
a585 1
      GL_UNSIGNED_NORMALIZED,    
d591 5
a595 5
      MESA_FORMAT_SARGB8,
      "MESA_FORMAT_SARGB8",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      8, 8, 8, 8,
d600 7
a606 7
      MESA_FORMAT_SL8,
      "MESA_FORMAT_SL8",
      GL_LUMINANCE,
      GL_UNSIGNED_NORMALIZED,    
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
d609 29
a637 2
      MESA_FORMAT_SLA8,
      "MESA_FORMAT_SLA8",
d639 1
a639 1
      GL_UNSIGNED_NORMALIZED,    
d644 2
d647 7
a653 7
      MESA_FORMAT_SRGB_DXT1,       /* Name */
      "MESA_FORMAT_SRGB_DXT1",     /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 0,                  /* approx Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      4, 4, 8                      /* 8 bytes per 4x4 block */
d656 5
a660 5
      MESA_FORMAT_SRGBA_DXT1,
      "MESA_FORMAT_SRGBA_DXT1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 4,
d662 46
a707 1
      4, 4, 8                      /* 8 bytes per 4x4 block */
d710 5
a714 5
      MESA_FORMAT_SRGBA_DXT3,
      "MESA_FORMAT_SRGBA_DXT3",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 4,
d716 1
a716 1
      4, 4, 16                     /* 16 bytes per 4x4 block */
d719 7
a725 7
      MESA_FORMAT_SRGBA_DXT5,
      "MESA_FORMAT_SRGBA_DXT5",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 16                     /* 16 bytes per 4x4 block */
a726 1

d728 2
a729 2
      MESA_FORMAT_RGB_FXT1,
      "MESA_FORMAT_RGB_FXT1",
d731 2
a732 2
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 0,                  /* approx Red/Green/BlueBits */
d734 1
a734 1
      8, 4, 16                     /* 16 bytes per 8x4 block */
d737 2
a738 2
      MESA_FORMAT_RGBA_FXT1,
      "MESA_FORMAT_RGBA_FXT1",
d740 2
a741 2
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 1,                  /* approx Red/Green/Blue/AlphaBits */
d743 1
a743 1
      8, 4, 16                     /* 16 bytes per 8x4 block */
a744 1

d746 7
a752 7
      MESA_FORMAT_RGB_DXT1,        /* Name */
      "MESA_FORMAT_RGB_DXT1",      /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 0,                  /* approx Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      4, 4, 8                      /* 8 bytes per 4x4 block */
d754 2
d757 2
a758 2
      MESA_FORMAT_RGBA_DXT1,
      "MESA_FORMAT_RGBA_DXT1",
d761 1
a761 1
      4, 4, 4, 4,
d763 1
a763 1
      4, 4, 8                      /* 8 bytes per 4x4 block */
d766 2
a767 2
      MESA_FORMAT_RGBA_DXT3,
      "MESA_FORMAT_RGBA_DXT3",
d770 10
a779 1
      4, 4, 4, 4,
d781 1
a781 1
      4, 4, 16                     /* 16 bytes per 4x4 block */
d784 2
a785 2
      MESA_FORMAT_RGBA_DXT5,
      "MESA_FORMAT_RGBA_DXT5",
d788 1
a788 1
      4, 4, 4, 4,
d790 1
a790 1
      4, 4, 16                     /* 16 bytes per 4x4 block */
d793 5
a797 5
      MESA_FORMAT_RGBA_FLOAT32,
      "MESA_FORMAT_RGBA_FLOAT32",
      GL_RGBA,
      GL_FLOAT,
      32, 32, 32, 32,
d799 10
a808 1
      1, 1, 16
d810 2
d813 7
a819 7
      MESA_FORMAT_RGBA_FLOAT16,
      "MESA_FORMAT_RGBA_FLOAT16",
      GL_RGBA,
      GL_FLOAT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
d822 2
a823 2
      MESA_FORMAT_RGB_FLOAT32,
      "MESA_FORMAT_RGB_FLOAT32",
d825 2
a826 2
      GL_FLOAT,
      32, 32, 32, 0,
d828 1
a828 1
      1, 1, 12
d830 2
d833 2
a834 2
      MESA_FORMAT_RGB_FLOAT16,
      "MESA_FORMAT_RGB_FLOAT16",
d837 1
a837 1
      16, 16, 16, 0,
d839 1
a839 1
      1, 1, 6
d842 3
a844 3
      MESA_FORMAT_ALPHA_FLOAT32,
      "MESA_FORMAT_ALPHA_FLOAT32",
      GL_ALPHA,
d846 1
a846 1
      0, 0, 0, 32,
d851 16
a866 2
      MESA_FORMAT_ALPHA_FLOAT16,
      "MESA_FORMAT_ALPHA_FLOAT16",
d874 3
a876 3
      MESA_FORMAT_LUMINANCE_FLOAT32,
      "MESA_FORMAT_LUMINANCE_FLOAT32",
      GL_LUMINANCE,
d878 2
a879 2
      0, 0, 0, 0,
      32, 0, 0, 0, 0,
d883 2
a884 2
      MESA_FORMAT_LUMINANCE_FLOAT16,
      "MESA_FORMAT_LUMINANCE_FLOAT16",
d892 3
a894 3
      MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32,
      "MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32",
      GL_LUMINANCE_ALPHA,
d896 1
a896 1
      0, 0, 0, 32,
d898 1
a898 1
      1, 1, 8
d901 2
a902 2
      MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16,
      "MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16",
d910 3
a912 3
      MESA_FORMAT_INTENSITY_FLOAT32,
      "MESA_FORMAT_INTENSITY_FLOAT32",
      GL_INTENSITY,
d914 3
a916 3
      0, 0, 0, 0,
      0, 32, 0, 0, 0,
      1, 1, 4
d919 2
a920 2
      MESA_FORMAT_INTENSITY_FLOAT16,
      "MESA_FORMAT_INTENSITY_FLOAT16",
d928 3
a930 3
      MESA_FORMAT_R_FLOAT32,
      "MESA_FORMAT_R_FLOAT32",
      GL_RED,
d932 2
a933 2
      32, 0, 0, 0,
      0, 0, 0, 0, 0,
d946 3
a948 3
      MESA_FORMAT_RG_FLOAT32,
      "MESA_FORMAT_RG_FLOAT32",
      GL_RG,
d950 1
a950 1
      32, 32, 0, 0,
d952 1
a952 1
      1, 1, 8
a962 3

   /* unnormalized signed int formats */
   /* unnormalized unsigned int formats */
d964 96
a1059 2
      MESA_FORMAT_ALPHA_UINT8,
      "MESA_FORMAT_ALPHA_UINT8",
d1067 2
a1068 2
      MESA_FORMAT_ALPHA_UINT16,
      "MESA_FORMAT_ALPHA_UINT16",
d1076 2
a1077 2
      MESA_FORMAT_ALPHA_UINT32,
      "MESA_FORMAT_ALPHA_UINT32",
d1085 2
a1086 2
      MESA_FORMAT_ALPHA_INT8,
      "MESA_FORMAT_ALPHA_INT8",
d1094 2
a1095 2
      MESA_FORMAT_ALPHA_INT16,
      "MESA_FORMAT_ALPHA_INT16",
d1103 2
a1104 2
      MESA_FORMAT_ALPHA_INT32,
      "MESA_FORMAT_ALPHA_INT32",
d1112 2
a1113 2
      MESA_FORMAT_INTENSITY_UINT8,
      "MESA_FORMAT_INTENSITY_UINT8",
d1121 2
a1122 2
      MESA_FORMAT_INTENSITY_UINT16,
      "MESA_FORMAT_INTENSITY_UINT16",
d1130 2
a1131 2
      MESA_FORMAT_INTENSITY_UINT32,
      "MESA_FORMAT_INTENSITY_UINT32",
d1139 2
a1140 2
      MESA_FORMAT_INTENSITY_INT8,
      "MESA_FORMAT_INTENSITY_INT8",
d1148 2
a1149 2
      MESA_FORMAT_INTENSITY_INT16,
      "MESA_FORMAT_INTENSITY_INT16",
d1157 2
a1158 2
      MESA_FORMAT_INTENSITY_INT32,
      "MESA_FORMAT_INTENSITY_INT32",
d1166 2
a1167 2
      MESA_FORMAT_LUMINANCE_UINT8,
      "MESA_FORMAT_LUMINANCE_UINT8",
d1175 2
a1176 2
      MESA_FORMAT_LUMINANCE_UINT16,
      "MESA_FORMAT_LUMINANCE_UINT16",
d1184 2
a1185 2
      MESA_FORMAT_LUMINANCE_UINT32,
      "MESA_FORMAT_LUMINANCE_UINT32",
d1193 2
a1194 2
      MESA_FORMAT_LUMINANCE_INT8,
      "MESA_FORMAT_LUMINANCE_INT8",
d1202 2
a1203 2
      MESA_FORMAT_LUMINANCE_INT16,
      "MESA_FORMAT_LUMINANCE_INT16",
d1211 2
a1212 2
      MESA_FORMAT_LUMINANCE_INT32,
      "MESA_FORMAT_LUMINANCE_INT32",
d1220 2
a1221 2
      MESA_FORMAT_LUMINANCE_ALPHA_UINT8,
      "MESA_FORMAT_LUMINANCE_ALPHA_UINT8",
d1229 2
a1230 2
      MESA_FORMAT_LUMINANCE_ALPHA_UINT16,
      "MESA_FORMAT_LUMINANCE_ALPHA_UINT16",
d1238 2
a1239 2
      MESA_FORMAT_LUMINANCE_ALPHA_UINT32,
      "MESA_FORMAT_LUMINANCE_ALPHA_UINT32",
d1247 2
a1248 2
      MESA_FORMAT_LUMINANCE_ALPHA_INT8,
      "MESA_FORMAT_LUMINANCE_ALPHA_INT8",
d1256 2
a1257 2
      MESA_FORMAT_LUMINANCE_ALPHA_INT16,
      "MESA_FORMAT_LUMINANCE_ALPHA_INT16",
d1265 2
a1266 2
      MESA_FORMAT_LUMINANCE_ALPHA_INT32,
      "MESA_FORMAT_LUMINANCE_ALPHA_INT32",
a1272 1

d1274 2
a1275 2
      MESA_FORMAT_R_INT8,
      "MESA_FORMAT_R_INT8",
d1277 1
a1277 1
      GL_INT,
d1283 5
a1287 5
      MESA_FORMAT_RG_INT8,
      "MESA_FORMAT_RG_INT8",
      GL_RG,
      GL_INT,
      8, 8, 0, 0,
d1292 5
a1296 5
      MESA_FORMAT_RGB_INT8,
      "MESA_FORMAT_RGB_INT8",
      GL_RGB,
      GL_INT,
      8, 8, 8, 0,
d1298 1
a1298 1
      1, 1, 3
d1301 3
a1303 3
      MESA_FORMAT_RGBA_INT8,
      "MESA_FORMAT_RGBA_INT8",
      GL_RGBA,
d1305 1
a1305 1
      8, 8, 8, 8,
d1307 1
a1307 1
      1, 1, 4
d1310 2
a1311 2
      MESA_FORMAT_R_INT16,
      "MESA_FORMAT_R_INT16",
d1319 3
a1321 3
      MESA_FORMAT_RG_INT16,
      "MESA_FORMAT_RG_INT16",
      GL_RG,
d1323 1
a1323 1
      16, 16, 0, 0,
d1328 5
a1332 5
      MESA_FORMAT_RGB_INT16,
      "MESA_FORMAT_RGB_INT16",
      GL_RGB,
      GL_INT,
      16, 16, 16, 0,
d1334 1
a1334 1
      1, 1, 6
d1337 5
a1341 14
      MESA_FORMAT_RGBA_INT16,
      "MESA_FORMAT_RGBA_INT16",
      GL_RGBA,
      GL_INT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_R_INT32,
      "MESA_FORMAT_R_INT32",
      GL_RED,
      GL_INT,
      32, 0, 0, 0,
d1346 2
a1347 2
      MESA_FORMAT_RG_INT32,
      "MESA_FORMAT_RG_INT32",
d1349 1
a1349 1
      GL_INT,
d1355 3
a1357 3
      MESA_FORMAT_RGB_INT32,
      "MESA_FORMAT_RGB_INT32",
      GL_RGB,
d1359 1
a1359 1
      32, 32, 32, 0,
d1361 1
a1361 1
      1, 1, 12
d1364 3
a1366 3
      MESA_FORMAT_RGBA_INT32,
      "MESA_FORMAT_RGBA_INT32",
      GL_RGBA,
d1368 1
a1368 1
      32, 32, 32, 32,
d1370 1
a1370 10
      1, 1, 16
   },
   {
      MESA_FORMAT_R_UINT8,
      "MESA_FORMAT_R_UINT8",
      GL_RED,
      GL_UNSIGNED_INT,
      8, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 1
d1373 2
a1374 2
      MESA_FORMAT_RG_UINT8,
      "MESA_FORMAT_RG_UINT8",
d1376 2
a1377 2
      GL_UNSIGNED_INT,
      8, 8, 0, 0,
d1379 1
a1379 1
      1, 1, 2
d1391 3
a1393 3
      MESA_FORMAT_RGBA_UINT8,
      "MESA_FORMAT_RGBA_UINT8",
      GL_RGBA,
d1395 1
a1395 1
      8, 8, 8, 8,
d1397 1
a1397 1
      1, 1, 4
d1400 3
a1402 3
      MESA_FORMAT_R_UINT16,
      "MESA_FORMAT_R_UINT16",
      GL_RED,
d1404 1
a1404 1
      16, 0, 0, 0,
d1406 1
a1406 1
      1, 1, 2
d1409 5
a1413 5
      MESA_FORMAT_RG_UINT16,
      "MESA_FORMAT_RG_UINT16",
      GL_RG,
      GL_UNSIGNED_INT,
      16, 16, 0, 0,
d1415 1
a1415 1
      1, 1, 4
d1418 2
a1419 2
      MESA_FORMAT_RGB_UINT16,
      "MESA_FORMAT_RGB_UINT16",
d1421 1
a1421 1
      GL_UNSIGNED_INT,
d1427 5
a1431 5
      MESA_FORMAT_RGBA_UINT16,
      "MESA_FORMAT_RGBA_UINT16",
      GL_RGBA,
      GL_UNSIGNED_INT,
      16, 16, 16, 16,
d1433 1
a1433 1
      1, 1, 8
d1436 3
a1438 3
      MESA_FORMAT_R_UINT32,
      "MESA_FORMAT_R_UINT32",
      GL_RED,
d1440 1
a1440 1
      32, 0, 0, 0,
d1445 3
a1447 3
      MESA_FORMAT_RG_UINT32,
      "MESA_FORMAT_RG_UINT32",
      GL_RG,
d1449 1
a1449 1
      32, 32, 0, 0,
a1453 9
      MESA_FORMAT_RGB_UINT32,
      "MESA_FORMAT_RGB_UINT32",
      GL_RGB,
      GL_UNSIGNED_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 12
   },
   {
a1461 2


d1463 5
a1467 5
      MESA_FORMAT_DUDV8,
      "MESA_FORMAT_DUDV8",
      GL_DUDV_ATI,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
d1469 1
a1469 1
      1, 1, 2
a1470 2

   /* Signed 8 bits / channel */
d1472 7
a1478 7
      MESA_FORMAT_SIGNED_R8,        /* Name */
      "MESA_FORMAT_SIGNED_R8",      /* StrName */
      GL_RED,                       /* BaseFormat */
      GL_SIGNED_NORMALIZED,         /* DataType */
      8, 0, 0, 0,                   /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,                /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                       /* BlockWidth/Height,Bytes */
d1481 5
a1485 5
      MESA_FORMAT_SIGNED_RG88_REV,
      "MESA_FORMAT_SIGNED_RG88_REV",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      8, 8, 0, 0,
d1487 1
a1487 1
      1, 1, 2
d1490 2
a1491 2
      MESA_FORMAT_SIGNED_RGBX8888,
      "MESA_FORMAT_SIGNED_RGBX8888",
d1493 1
a1493 1
      GL_SIGNED_NORMALIZED,
a1495 9
      1, 1, 4                       /* 4 bpp, but no alpha */
   },
   {
      MESA_FORMAT_SIGNED_RGBA8888,
      "MESA_FORMAT_SIGNED_RGBA8888",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
d1499 5
a1503 5
      MESA_FORMAT_SIGNED_RGBA8888_REV,
      "MESA_FORMAT_SIGNED_RGBA8888_REV",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 8,
d1505 1
a1505 1
      1, 1, 4
a1506 2

   /* Signed 16 bits / channel */
d1508 5
a1512 5
      MESA_FORMAT_SIGNED_R16,
      "MESA_FORMAT_SIGNED_R16",
      GL_RED,
      GL_SIGNED_NORMALIZED,
      16, 0, 0, 0,
d1514 1
a1514 1
      1, 1, 2
d1517 5
a1521 5
      MESA_FORMAT_SIGNED_GR1616,
      "MESA_FORMAT_SIGNED_GR1616",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      16, 16, 0, 0,
d1526 2
a1527 2
      MESA_FORMAT_SIGNED_RGB_16,
      "MESA_FORMAT_SIGNED_RGB_16",
d1529 1
a1529 1
      GL_SIGNED_NORMALIZED,
a1531 9
      1, 1, 6
   },
   {
      MESA_FORMAT_SIGNED_RGBA_16,
      "MESA_FORMAT_SIGNED_RGBA_16",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
d1535 2
a1536 84
      MESA_FORMAT_RGBA_16,
      "MESA_FORMAT_RGBA_16",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
     MESA_FORMAT_RED_RGTC1,
     "MESA_FORMAT_RED_RGTC1",
     GL_RED,
     GL_UNSIGNED_NORMALIZED,
     8, 0, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_SIGNED_RED_RGTC1,
     "MESA_FORMAT_SIGNED_RED_RGTC1",
     GL_RED,
     GL_SIGNED_NORMALIZED,
     8, 0, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_RG_RGTC2,
     "MESA_FORMAT_RG_RGTC2",
     GL_RG,
     GL_UNSIGNED_NORMALIZED,
     8, 8, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_SIGNED_RG_RGTC2,
     "MESA_FORMAT_SIGNED_RG_RGTC2",
     GL_RG,
     GL_SIGNED_NORMALIZED,
     8, 8, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_L_LATC1,
     "MESA_FORMAT_L_LATC1",
     GL_LUMINANCE,
     GL_UNSIGNED_NORMALIZED,
     0, 0, 0, 0,
     4, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_SIGNED_L_LATC1,
     "MESA_FORMAT_SIGNED_L_LATC1",
     GL_LUMINANCE,
     GL_SIGNED_NORMALIZED,
     0, 0, 0, 0,
     4, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_LA_LATC2,
     "MESA_FORMAT_LA_LATC2",
     GL_LUMINANCE_ALPHA,
     GL_UNSIGNED_NORMALIZED,
     0, 0, 0, 4,
     4, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_SIGNED_LA_LATC2,
     "MESA_FORMAT_SIGNED_LA_LATC2",
     GL_LUMINANCE_ALPHA,
     GL_SIGNED_NORMALIZED,
     0, 0, 0, 4,
     4, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },

   {
      MESA_FORMAT_ETC1_RGB8,
      "MESA_FORMAT_ETC1_RGB8",
d1538 2
a1539 2
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
d1541 1
a1541 1
      4, 4, 8                     /* 8 bytes per 4x4 block */
d1544 1
d1546 7
a1552 7
      MESA_FORMAT_ETC2_RGB8,
      "MESA_FORMAT_ETC2_RGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
a1553 1

d1555 5
a1559 5
      MESA_FORMAT_ETC2_SRGB8,
      "MESA_FORMAT_ETC2_SRGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
d1561 1
a1561 1
      4, 4, 8                     /* 8 bytes per 4x4 block */
a1562 1

d1564 2
a1565 2
      MESA_FORMAT_ETC2_RGBA8_EAC,
      "MESA_FORMAT_ETC2_RGBA8_EAC",
d1567 2
a1568 2
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 8,
d1570 1
a1570 1
      4, 4, 16                    /* 16 bytes per 4x4 block */
a1571 1

d1573 2
a1574 2
      MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC,
      "MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC",
d1576 2
a1577 2
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 8,
d1579 1
a1579 1
      4, 4, 16                    /* 16 bytes per 4x4 block */
d1582 1
d1584 7
a1590 7
      MESA_FORMAT_ETC2_R11_EAC,
      "MESA_FORMAT_ETC2_R11_EAC",
      GL_RED,
      GL_UNSIGNED_NORMALIZED,
      11, 0, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                    /* 8 bytes per 4x4 block */
a1591 1

d1593 3
a1595 3
      MESA_FORMAT_ETC2_RG11_EAC,
      "MESA_FORMAT_ETC2_RG11_EAC",
      GL_RG,
d1597 1
a1597 1
      11, 11, 0, 0,
d1599 1
a1599 1
      4, 4, 16                    /* 16 bytes per 4x4 block */
a1600 1

d1602 2
a1603 22
      MESA_FORMAT_ETC2_SIGNED_R11_EAC,
      "MESA_FORMAT_ETC2_SIGNED_R11_EAC",
      GL_RED,
      GL_SIGNED_NORMALIZED,
      11, 0, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                    /* 8 bytes per 4x4 block */
   },

   {
      MESA_FORMAT_ETC2_SIGNED_RG11_EAC,
      "MESA_FORMAT_ETC2_SIGNED_RG11_EAC",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      11, 11, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },

   {
      MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1,
      "MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1",
d1606 1
a1606 1
      8, 8, 8, 1,
d1608 1
a1608 1
      4, 4, 8                     /* 8 bytes per 4x4 block */
a1609 1

d1611 2
a1612 2
      MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1,
      "MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1",
d1615 1
a1615 1
      8, 8, 8, 1,
d1617 1
a1617 1
      4, 4, 8                     /* 8 bytes per 4x4 block */
d1620 1
a1620 1
   /* Signed formats from EXT_texture_snorm that are not in GL3.1 */
d1622 5
a1626 5
      MESA_FORMAT_SIGNED_A8,
      "MESA_FORMAT_SIGNED_A8",
      GL_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 8,
d1628 1
a1628 1
      1, 1, 1
d1631 5
a1635 32
      MESA_FORMAT_SIGNED_L8,
      "MESA_FORMAT_SIGNED_L8",
      GL_LUMINANCE,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_SIGNED_AL88,
      "MESA_FORMAT_SIGNED_AL88",
      GL_LUMINANCE_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_SIGNED_I8,
      "MESA_FORMAT_SIGNED_I8",
      GL_INTENSITY,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_SIGNED_A16,
      "MESA_FORMAT_SIGNED_A16",
      GL_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 16,
d1637 1
a1637 37
      1, 1, 2
   },
   {
      MESA_FORMAT_SIGNED_L16,
      "MESA_FORMAT_SIGNED_L16",
      GL_LUMINANCE,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_SIGNED_AL1616,
      "MESA_FORMAT_SIGNED_AL1616",
      GL_LUMINANCE_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_SIGNED_I16,
      "MESA_FORMAT_SIGNED_I16",
      GL_INTENSITY,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RGB9_E5_FLOAT,
      "MESA_FORMAT_RGB9_E5",
      GL_RGB,
      GL_FLOAT,
      9, 9, 9, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
d1639 2
d1642 7
a1648 7
      MESA_FORMAT_R11_G11_B10_FLOAT,
      "MESA_FORMAT_R11_G11_B10_FLOAT",
      GL_RGB,
      GL_FLOAT,
      11, 11, 10, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
a1649 1
   /* ARB_depth_buffer_float */
d1651 7
a1657 7
      MESA_FORMAT_Z32_FLOAT,       /* Name */
      "MESA_FORMAT_Z32_FLOAT",     /* StrName */
      GL_DEPTH_COMPONENT,          /* BaseFormat */
      GL_FLOAT,                    /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
d1660 7
a1666 10
      MESA_FORMAT_Z32_FLOAT_X24S8, /* Name */
      "MESA_FORMAT_Z32_FLOAT_X24S8", /* StrName */
      GL_DEPTH_STENCIL,            /* BaseFormat */
      /* DataType here is used to answer GL_TEXTURE_DEPTH_TYPE queries, and is
       * never used for stencil because stencil is always GL_UNSIGNED_INT.
       */
      GL_FLOAT,                    /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 8,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 8                      /* BlockWidth/Height,Bytes */
d1669 7
a1675 7
      MESA_FORMAT_ARGB2101010_UINT,
      "MESA_FORMAT_ARGB2101010_UINT",
      GL_RGBA,
      GL_UNSIGNED_INT,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
d1677 2
d1680 7
a1686 7
      MESA_FORMAT_ABGR2101010_UINT,
      "MESA_FORMAT_ABGR2101010_UINT",
      GL_RGBA,
      GL_UNSIGNED_INT,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
d1689 7
a1695 7
      MESA_FORMAT_XRGB4444_UNORM,
      "MESA_FORMAT_XRGB4444_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
d1698 7
a1704 7
      MESA_FORMAT_XRGB1555_UNORM,
      "MESA_FORMAT_XRGB1555_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      5, 5, 5, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
d1707 7
a1713 7
      MESA_FORMAT_XBGR8888_SNORM,
      "MESA_FORMAT_XBGR8888_SNORM",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
d1715 2
d1718 2
a1719 2
      MESA_FORMAT_XBGR8888_SRGB,
      "MESA_FORMAT_XBGR8888_SRGB",
d1724 1
a1724 1
      1, 1, 4
d1727 2
a1728 2
      MESA_FORMAT_XBGR8888_UINT,
      "MESA_FORMAT_XBGR8888_UINT",
d1730 1
a1730 1
      GL_UNSIGNED_INT,
d1733 1
a1733 1
      1, 1, 4
d1736 2
a1737 2
      MESA_FORMAT_XBGR8888_SINT,
      "MESA_FORMAT_XBGR8888_SINT",
d1739 1
a1739 1
      GL_INT,
d1742 1
a1742 1
      1, 1, 4
d1745 3
a1747 3
      MESA_FORMAT_XRGB2101010_UNORM,
      "MESA_FORMAT_XRGB2101010_UNORM",
      GL_RGB,
d1749 1
a1749 1
      10, 10, 10, 0,
d1751 1
a1751 1
      1, 1, 4
d1754 3
a1756 3
      MESA_FORMAT_XBGR16161616_UNORM,
      "MESA_FORMAT_XBGR16161616_UNORM",
      GL_RGB,
d1758 1
a1758 1
      16, 16, 16, 0,
d1760 1
a1760 1
      1, 1, 8
d1763 5
a1767 5
      MESA_FORMAT_XBGR16161616_SNORM,
      "MESA_FORMAT_XBGR16161616_SNORM",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 0,
d1769 1
a1769 1
      1, 1, 8
d1772 5
a1776 5
      MESA_FORMAT_XBGR16161616_FLOAT,
      "MESA_FORMAT_XBGR16161616_FLOAT",
      GL_RGB,
      GL_FLOAT,
      16, 16, 16, 0,
d1778 1
a1778 1
      1, 1, 8
d1781 5
a1785 5
      MESA_FORMAT_XBGR16161616_UINT,
      "MESA_FORMAT_XBGR16161616_UINT",
      GL_RGB,
      GL_UNSIGNED_INT,
      16, 16, 16, 0,
d1787 1
a1787 1
      1, 1, 8
d1790 5
a1794 5
      MESA_FORMAT_XBGR16161616_SINT,
      "MESA_FORMAT_XBGR16161616_SINT",
      GL_RGB,
      GL_INT,
      16, 16, 16, 0,
d1796 1
a1796 1
      1, 1, 8
d1799 5
a1803 5
      MESA_FORMAT_XBGR32323232_FLOAT,
      "MESA_FORMAT_XBGR32323232_FLOAT",
      GL_RGB,
      GL_FLOAT,
      32, 32, 32, 0,
d1805 1
a1805 1
      1, 1, 16
d1808 5
a1812 5
      MESA_FORMAT_XBGR32323232_UINT,
      "MESA_FORMAT_XBGR32323232_UINT",
      GL_RGB,
      GL_UNSIGNED_INT,
      32, 32, 32, 0,
d1814 1
a1814 10
      1, 1, 16
   },
   {
      MESA_FORMAT_XBGR32323232_SINT,
      "MESA_FORMAT_XBGR32323232_SINT",
      GL_RGB,
      GL_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 16
d1821 1
a1821 1
_mesa_get_format_info(gl_format format)
d1831 1
a1831 1
_mesa_get_format_name(gl_format format)
d1847 1
a1847 1
_mesa_get_format_bytes(gl_format format)
d1863 1
a1863 1
_mesa_get_format_bits(gl_format format, GLenum pname)
d1912 1
a1912 1
_mesa_get_format_max_bits(gl_format format)
d1937 1
a1937 1
_mesa_get_format_datatype(gl_format format)
d1950 1
a1950 1
_mesa_get_format_base_format(gl_format format)
d1965 1
a1965 1
_mesa_get_format_block_size(gl_format format, GLuint *bw, GLuint *bh)
d1975 1
a1975 1
_mesa_is_format_compressed(gl_format format)
d1986 1
a1986 1
_mesa_is_format_packed_depth_stencil(gl_format format)
d1998 1
a1998 1
_mesa_is_format_integer_color(gl_format format)
d2012 1
a2012 1
_mesa_is_format_unsigned(gl_format format)
d2020 29
d2053 1
a2053 1
_mesa_get_format_color_encoding(gl_format format)
d2057 6
a2062 5
   case MESA_FORMAT_SRGB8:
   case MESA_FORMAT_SRGBA8:
   case MESA_FORMAT_SARGB8:
   case MESA_FORMAT_SL8:
   case MESA_FORMAT_SLA8:
d2067 5
a2071 1
   case MESA_FORMAT_XBGR8888_SRGB:
d2083 2
a2084 2
gl_format
_mesa_get_srgb_format_linear(gl_format format)
d2087 2
a2088 2
   case MESA_FORMAT_SRGB8:
      format = MESA_FORMAT_RGB888;
d2090 2
a2091 2
   case MESA_FORMAT_SRGBA8:
      format = MESA_FORMAT_RGBA8888;
d2093 2
a2094 2
   case MESA_FORMAT_SARGB8:
      format = MESA_FORMAT_ARGB8888;
d2096 2
a2097 2
   case MESA_FORMAT_SL8:
      format = MESA_FORMAT_L8;
d2099 5
a2103 2
   case MESA_FORMAT_SLA8:
      format = MESA_FORMAT_AL88;
d2117 14
a2130 2
   case MESA_FORMAT_XBGR8888_SRGB:
      format = MESA_FORMAT_RGBX8888_REV;
d2143 2
a2144 2
gl_format
_mesa_get_uncompressed_format(gl_format format)
d2148 1
a2148 1
      return MESA_FORMAT_RGB888;
d2150 1
a2150 1
      return MESA_FORMAT_RGBA8888;
d2153 1
a2153 1
      return MESA_FORMAT_RGB888;
d2156 1
a2156 1
      return MESA_FORMAT_RGBA8888;
d2159 1
a2159 1
      return MESA_FORMAT_RGBA8888;
d2162 17
a2178 17
      return MESA_FORMAT_RGBA8888;
   case MESA_FORMAT_RED_RGTC1:
      return MESA_FORMAT_R8;
   case MESA_FORMAT_SIGNED_RED_RGTC1:
      return MESA_FORMAT_SIGNED_R8;
   case MESA_FORMAT_RG_RGTC2:
      return MESA_FORMAT_GR88;
   case MESA_FORMAT_SIGNED_RG_RGTC2:
      return MESA_FORMAT_SIGNED_RG88_REV;
   case MESA_FORMAT_L_LATC1:
      return MESA_FORMAT_L8;
   case MESA_FORMAT_SIGNED_L_LATC1:
      return MESA_FORMAT_SIGNED_L8;
   case MESA_FORMAT_LA_LATC2:
      return MESA_FORMAT_AL88;
   case MESA_FORMAT_SIGNED_LA_LATC2:
      return MESA_FORMAT_SIGNED_AL88;
d2182 1
a2182 1
      return MESA_FORMAT_RGB888;
d2187 1
a2187 1
      return MESA_FORMAT_RGBA8888;
d2190 1
a2190 1
      return MESA_FORMAT_R16;
d2193 1
a2193 1
      return MESA_FORMAT_GR1616;
d2204 1
a2204 1
_mesa_format_num_components(gl_format format)
d2219 29
d2252 1
a2252 1
_mesa_format_image_size(gl_format format, GLsizei width,
d2278 1
a2278 1
_mesa_format_image_size64(gl_format format, GLsizei width,
d2304 1
a2304 1
_mesa_format_row_stride(gl_format format, GLsizei width)
d2331 1
a2331 1
   gl_format f;
d2436 1
a2436 1
 * Return datatype and number of components per texel for the given gl_format.
d2440 1
a2440 1
_mesa_format_to_type_and_comps(gl_format format,
d2444 8
a2451 8
   case MESA_FORMAT_RGBA8888:
   case MESA_FORMAT_RGBA8888_REV:
   case MESA_FORMAT_ARGB8888:
   case MESA_FORMAT_ARGB8888_REV:
   case MESA_FORMAT_RGBX8888:
   case MESA_FORMAT_RGBX8888_REV:
   case MESA_FORMAT_XRGB8888:
   case MESA_FORMAT_XRGB8888_REV:
d2455 2
a2456 2
   case MESA_FORMAT_RGB888:
   case MESA_FORMAT_BGR888:
d2460 2
a2461 2
   case MESA_FORMAT_RGB565:
   case MESA_FORMAT_RGB565_REV:
d2466 3
a2468 3
   case MESA_FORMAT_ARGB4444:
   case MESA_FORMAT_ARGB4444_REV:
   case MESA_FORMAT_XRGB4444_UNORM:
d2473 3
a2475 3
   case MESA_FORMAT_ARGB1555:
   case MESA_FORMAT_ARGB1555_REV:
   case MESA_FORMAT_XRGB1555_UNORM:
d2480 1
a2480 1
   case MESA_FORMAT_ARGB2101010:
d2485 1
a2485 1
   case MESA_FORMAT_RGBA5551:
d2490 1
a2490 1
   case MESA_FORMAT_AL44:
d2495 4
a2498 4
   case MESA_FORMAT_AL88:
   case MESA_FORMAT_AL88_REV:
   case MESA_FORMAT_GR88:
   case MESA_FORMAT_RG88:
d2503 4
a2506 4
   case MESA_FORMAT_AL1616:
   case MESA_FORMAT_AL1616_REV:
   case MESA_FORMAT_GR1616:
   case MESA_FORMAT_RG1616:
d2511 4
a2514 4
   case MESA_FORMAT_R16:
   case MESA_FORMAT_A16:
   case MESA_FORMAT_L16:
   case MESA_FORMAT_I16:
d2519 1
a2519 1
   case MESA_FORMAT_RGB332:
d2524 5
a2528 5
   case MESA_FORMAT_A8:
   case MESA_FORMAT_L8:
   case MESA_FORMAT_I8:
   case MESA_FORMAT_R8:
   case MESA_FORMAT_S8:
d2539 1
a2539 1
   case MESA_FORMAT_Z24_S8:
d2544 1
a2544 1
   case MESA_FORMAT_S8_Z24:
d2549 1
a2549 1
   case MESA_FORMAT_Z16:
d2554 1
a2554 1
   case MESA_FORMAT_X8_Z24:
d2559 1
a2559 1
   case MESA_FORMAT_Z24_X8:
d2564 1
a2564 1
   case MESA_FORMAT_Z32:
d2569 1
a2569 1
   case MESA_FORMAT_Z32_FLOAT:
d2574 1
a2574 1
   case MESA_FORMAT_Z32_FLOAT_X24S8:
d2584 4
a2587 4
   case MESA_FORMAT_SIGNED_R8:
   case MESA_FORMAT_SIGNED_A8:
   case MESA_FORMAT_SIGNED_L8:
   case MESA_FORMAT_SIGNED_I8:
d2591 2
a2592 2
   case MESA_FORMAT_SIGNED_RG88_REV:
   case MESA_FORMAT_SIGNED_AL88:
d2596 3
a2598 3
   case MESA_FORMAT_SIGNED_RGBA8888:
   case MESA_FORMAT_SIGNED_RGBA8888_REV:
   case MESA_FORMAT_SIGNED_RGBX8888:
d2603 1
a2603 1
   case MESA_FORMAT_RGBA_16:
d2608 4
a2611 4
   case MESA_FORMAT_SIGNED_R16:
   case MESA_FORMAT_SIGNED_A16:
   case MESA_FORMAT_SIGNED_L16:
   case MESA_FORMAT_SIGNED_I16:
d2615 2
a2616 2
   case MESA_FORMAT_SIGNED_GR1616:
   case MESA_FORMAT_SIGNED_AL1616:
d2620 1
a2620 1
   case MESA_FORMAT_SIGNED_RGB_16:
d2624 1
a2624 1
   case MESA_FORMAT_SIGNED_RGBA_16:
d2629 1
a2629 1
   case MESA_FORMAT_SRGB8:
d2633 3
a2635 2
   case MESA_FORMAT_SRGBA8:
   case MESA_FORMAT_SARGB8:
d2639 1
a2639 1
   case MESA_FORMAT_SL8:
d2643 1
a2643 1
   case MESA_FORMAT_SLA8:
d2658 8
a2665 8
   case MESA_FORMAT_RED_RGTC1:
   case MESA_FORMAT_SIGNED_RED_RGTC1:
   case MESA_FORMAT_RG_RGTC2:
   case MESA_FORMAT_SIGNED_RG_RGTC2:
   case MESA_FORMAT_L_LATC1:
   case MESA_FORMAT_SIGNED_L_LATC1:
   case MESA_FORMAT_LA_LATC2:
   case MESA_FORMAT_SIGNED_LA_LATC2:
d2698 1
a2698 1
   case MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32:
d2703 1
a2703 1
   case MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16:
d2708 3
a2710 3
   case MESA_FORMAT_ALPHA_FLOAT32:
   case MESA_FORMAT_LUMINANCE_FLOAT32:
   case MESA_FORMAT_INTENSITY_FLOAT32:
d2715 3
a2717 3
   case MESA_FORMAT_ALPHA_FLOAT16:
   case MESA_FORMAT_LUMINANCE_FLOAT16:
   case MESA_FORMAT_INTENSITY_FLOAT16:
d2723 3
a2725 3
   case MESA_FORMAT_ALPHA_UINT8:
   case MESA_FORMAT_LUMINANCE_UINT8:
   case MESA_FORMAT_INTENSITY_UINT8:
d2729 1
a2729 1
   case MESA_FORMAT_LUMINANCE_ALPHA_UINT8:
d2734 3
a2736 3
   case MESA_FORMAT_ALPHA_UINT16:
   case MESA_FORMAT_LUMINANCE_UINT16:
   case MESA_FORMAT_INTENSITY_UINT16:
d2740 1
a2740 1
   case MESA_FORMAT_LUMINANCE_ALPHA_UINT16:
d2744 3
a2746 3
   case MESA_FORMAT_ALPHA_UINT32:
   case MESA_FORMAT_LUMINANCE_UINT32:
   case MESA_FORMAT_INTENSITY_UINT32:
d2750 1
a2750 1
   case MESA_FORMAT_LUMINANCE_ALPHA_UINT32:
d2754 3
a2756 3
   case MESA_FORMAT_ALPHA_INT8:
   case MESA_FORMAT_LUMINANCE_INT8:
   case MESA_FORMAT_INTENSITY_INT8:
d2760 1
a2760 1
   case MESA_FORMAT_LUMINANCE_ALPHA_INT8:
d2765 3
a2767 3
   case MESA_FORMAT_ALPHA_INT16:
   case MESA_FORMAT_LUMINANCE_INT16:
   case MESA_FORMAT_INTENSITY_INT16:
d2771 1
a2771 1
   case MESA_FORMAT_LUMINANCE_ALPHA_INT16:
d2776 3
a2778 3
   case MESA_FORMAT_ALPHA_INT32:
   case MESA_FORMAT_LUMINANCE_INT32:
   case MESA_FORMAT_INTENSITY_INT32:
d2782 1
a2782 1
   case MESA_FORMAT_LUMINANCE_ALPHA_INT32:
d2787 1
a2787 1
   case MESA_FORMAT_R_INT8:
d2791 1
a2791 1
   case MESA_FORMAT_RG_INT8:
d2795 1
a2795 1
   case MESA_FORMAT_RGB_INT8:
d2799 1
a2799 1
   case MESA_FORMAT_RGBA_INT8:
d2803 1
a2803 1
   case MESA_FORMAT_R_INT16:
d2807 1
a2807 1
   case MESA_FORMAT_RG_INT16:
d2811 1
a2811 1
   case MESA_FORMAT_RGB_INT16:
d2815 1
a2815 1
   case MESA_FORMAT_RGBA_INT16:
d2819 1
a2819 1
   case MESA_FORMAT_R_INT32:
d2823 1
a2823 1
   case MESA_FORMAT_RG_INT32:
d2827 1
a2827 1
   case MESA_FORMAT_RGB_INT32:
d2831 1
a2831 1
   case MESA_FORMAT_RGBA_INT32:
d2888 1
a2888 1
   case MESA_FORMAT_RGB9_E5_FLOAT:
d2893 1
a2893 1
   case MESA_FORMAT_R11_G11_B10_FLOAT:
d2898 2
a2899 2
   case MESA_FORMAT_ARGB2101010_UINT:
   case MESA_FORMAT_ABGR2101010_UINT:
d2904 2
a2905 2
   case MESA_FORMAT_XBGR8888_SRGB:
   case MESA_FORMAT_XBGR8888_UINT:
d2910 2
a2911 2
   case MESA_FORMAT_XBGR8888_SNORM:
   case MESA_FORMAT_XBGR8888_SINT:
d2916 1
a2916 1
   case MESA_FORMAT_XRGB2101010_UNORM:
d2921 2
a2922 2
   case MESA_FORMAT_XBGR16161616_UNORM:
   case MESA_FORMAT_XBGR16161616_UINT:
d2927 2
a2928 2
   case MESA_FORMAT_XBGR16161616_SNORM:
   case MESA_FORMAT_XBGR16161616_SINT:
d2933 1
a2933 1
   case MESA_FORMAT_XBGR16161616_FLOAT:
d2938 1
a2938 1
   case MESA_FORMAT_XBGR32323232_FLOAT:
d2943 1
a2943 1
   case MESA_FORMAT_XBGR32323232_UINT:
d2948 1
a2948 1
   case MESA_FORMAT_XBGR32323232_SINT:
d2953 20
d2990 1
a2990 1
 * Check if a gl_format exactly matches a GL format/type combination
d2992 1
a2992 1
 * \param gl_format  a MESA_FORMAT_x value
d2999 1
a2999 1
_mesa_format_matches_format_and_type(gl_format gl_format,
d3014 1
a3014 1
   switch (gl_format) {
d3020 2
a3021 2
   case MESA_FORMAT_RGBA8888:
   case MESA_FORMAT_SRGBA8:
d3044 2
a3045 1
   case MESA_FORMAT_RGBA8888_REV:
d3069 2
a3070 2
   case MESA_FORMAT_ARGB8888:
   case MESA_FORMAT_SARGB8:
d3083 1
a3083 1
   case MESA_FORMAT_ARGB8888_REV:
d3096 2
a3097 2
   case MESA_FORMAT_RGBX8888:
   case MESA_FORMAT_RGBX8888_REV:
d3100 2
a3101 2
   case MESA_FORMAT_XRGB8888:
   case MESA_FORMAT_XRGB8888_REV:
d3104 2
a3105 2
   case MESA_FORMAT_RGB888:
   case MESA_FORMAT_SRGB8:
d3108 1
a3108 1
   case MESA_FORMAT_BGR888:
d3111 1
a3111 1
   case MESA_FORMAT_RGB565:
d3114 1
a3114 1
   case MESA_FORMAT_RGB565_REV:
d3121 1
a3121 1
   case MESA_FORMAT_ARGB4444:
d3125 1
a3125 1
   case MESA_FORMAT_ARGB4444_REV:
d3128 1
a3128 1
   case MESA_FORMAT_RGBA5551:
d3132 1
a3132 1
   case MESA_FORMAT_ARGB1555:
d3136 1
a3136 1
   case MESA_FORMAT_ARGB1555_REV:
d3139 1
a3139 1
   case MESA_FORMAT_AL44:
d3141 2
a3142 2
   case MESA_FORMAT_AL88:
   case MESA_FORMAT_SLA8:
d3144 1
a3144 1
   case MESA_FORMAT_AL88_REV:
d3147 1
a3147 1
   case MESA_FORMAT_AL1616:
d3149 1
a3149 1
   case MESA_FORMAT_AL1616_REV:
d3152 1
a3152 1
   case MESA_FORMAT_RGB332:
d3155 1
a3155 1
   case MESA_FORMAT_A8:
d3157 1
a3157 1
   case MESA_FORMAT_A16:
d3159 2
a3160 2
   case MESA_FORMAT_L8:
   case MESA_FORMAT_SL8:
d3162 1
a3162 1
   case MESA_FORMAT_L16:
d3164 4
a3167 4
   case MESA_FORMAT_I8:
      return format == GL_INTENSITY && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_I16:
      return format == GL_INTENSITY && type == GL_UNSIGNED_SHORT && !swapBytes;
d3178 1
a3178 1
   case MESA_FORMAT_R8:
d3180 1
a3180 1
   case MESA_FORMAT_GR88:
d3182 1
a3182 1
   case MESA_FORMAT_RG88:
d3185 1
a3185 1
   case MESA_FORMAT_R16:
d3188 1
a3188 1
   case MESA_FORMAT_GR1616:
d3191 1
a3191 1
   case MESA_FORMAT_RG1616:
d3194 1
a3194 1
   case MESA_FORMAT_ARGB2101010:
d3198 1
a3198 1
   case MESA_FORMAT_Z24_S8:
d3201 2
a3202 2
   case MESA_FORMAT_Z24_X8:
   case MESA_FORMAT_S8_Z24:
d3205 1
a3205 1
   case MESA_FORMAT_Z16:
d3209 1
a3209 1
   case MESA_FORMAT_X8_Z24:
d3212 1
a3212 1
   case MESA_FORMAT_Z32:
d3216 1
a3216 1
   case MESA_FORMAT_S8:
d3243 1
a3243 1
   case MESA_FORMAT_ALPHA_FLOAT32:
d3245 1
a3245 1
   case MESA_FORMAT_ALPHA_FLOAT16:
d3248 1
a3248 1
   case MESA_FORMAT_LUMINANCE_FLOAT32:
d3250 1
a3250 1
   case MESA_FORMAT_LUMINANCE_FLOAT16:
d3253 1
a3253 1
   case MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32:
d3255 1
a3255 1
   case MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16:
d3258 4
a3261 4
   case MESA_FORMAT_INTENSITY_FLOAT32:
      return format == GL_INTENSITY && type == GL_FLOAT && !swapBytes;
   case MESA_FORMAT_INTENSITY_FLOAT16:
      return format == GL_INTENSITY && type == GL_HALF_FLOAT && !swapBytes;
d3273 1
a3273 1
   case MESA_FORMAT_ALPHA_UINT8:
d3275 1
a3275 1
   case MESA_FORMAT_ALPHA_UINT16:
d3278 1
a3278 1
   case MESA_FORMAT_ALPHA_UINT32:
d3281 1
a3281 1
   case MESA_FORMAT_ALPHA_INT8:
d3283 1
a3283 1
   case MESA_FORMAT_ALPHA_INT16:
d3285 1
a3285 1
   case MESA_FORMAT_ALPHA_INT32:
d3288 12
a3299 8
   case MESA_FORMAT_INTENSITY_UINT8:
   case MESA_FORMAT_INTENSITY_UINT16:
   case MESA_FORMAT_INTENSITY_UINT32:
   case MESA_FORMAT_INTENSITY_INT8:
   case MESA_FORMAT_INTENSITY_INT16:
   case MESA_FORMAT_INTENSITY_INT32:
      /* GL_INTENSITY_INTEGER_EXT doesn't exist. */
      return GL_FALSE;
d3301 1
a3301 1
   case MESA_FORMAT_LUMINANCE_UINT8:
d3303 1
a3303 1
   case MESA_FORMAT_LUMINANCE_UINT16:
d3306 1
a3306 1
   case MESA_FORMAT_LUMINANCE_UINT32:
d3309 1
a3309 1
   case MESA_FORMAT_LUMINANCE_INT8:
d3311 1
a3311 1
   case MESA_FORMAT_LUMINANCE_INT16:
d3314 1
a3314 1
   case MESA_FORMAT_LUMINANCE_INT32:
d3317 1
a3317 1
   case MESA_FORMAT_LUMINANCE_ALPHA_UINT8:
d3320 1
a3320 1
   case MESA_FORMAT_LUMINANCE_ALPHA_UINT16:
d3323 1
a3323 1
   case MESA_FORMAT_LUMINANCE_ALPHA_UINT32:
d3326 1
a3326 1
   case MESA_FORMAT_LUMINANCE_ALPHA_INT8:
d3329 1
a3329 1
   case MESA_FORMAT_LUMINANCE_ALPHA_INT16:
d3332 1
a3332 1
   case MESA_FORMAT_LUMINANCE_ALPHA_INT32:
d3336 1
a3336 1
   case MESA_FORMAT_R_INT8:
d3338 1
a3338 1
   case MESA_FORMAT_RG_INT8:
d3340 1
a3340 1
   case MESA_FORMAT_RGB_INT8:
d3342 1
a3342 1
   case MESA_FORMAT_RGBA_INT8:
d3344 1
a3344 1
   case MESA_FORMAT_R_INT16:
d3346 1
a3346 1
   case MESA_FORMAT_RG_INT16:
d3348 1
a3348 1
   case MESA_FORMAT_RGB_INT16:
d3350 1
a3350 1
   case MESA_FORMAT_RGBA_INT16:
d3352 1
a3352 1
   case MESA_FORMAT_R_INT32:
d3354 1
a3354 1
   case MESA_FORMAT_RG_INT32:
d3356 1
a3356 1
   case MESA_FORMAT_RGB_INT32:
d3358 1
a3358 1
   case MESA_FORMAT_RGBA_INT32:
d3394 1
a3394 1
   case MESA_FORMAT_SIGNED_R8:
d3396 1
a3396 1
   case MESA_FORMAT_SIGNED_RG88_REV:
d3399 1
a3399 1
   case MESA_FORMAT_SIGNED_RGBX8888:
d3402 1
a3402 1
   case MESA_FORMAT_SIGNED_RGBA8888:
d3411 1
a3411 1
   case MESA_FORMAT_SIGNED_RGBA8888_REV:
d3420 1
a3420 1
   case MESA_FORMAT_SIGNED_R16:
d3423 1
a3423 1
   case MESA_FORMAT_SIGNED_GR1616:
d3425 1
a3425 1
   case MESA_FORMAT_SIGNED_RGB_16:
d3427 1
a3427 1
   case MESA_FORMAT_SIGNED_RGBA_16:
d3429 1
a3429 1
   case MESA_FORMAT_RGBA_16:
d3433 4
a3436 4
   case MESA_FORMAT_RED_RGTC1:
   case MESA_FORMAT_SIGNED_RED_RGTC1:
   case MESA_FORMAT_RG_RGTC2:
   case MESA_FORMAT_SIGNED_RG_RGTC2:
d3439 4
a3442 4
   case MESA_FORMAT_L_LATC1:
   case MESA_FORMAT_SIGNED_L_LATC1:
   case MESA_FORMAT_LA_LATC2:
   case MESA_FORMAT_SIGNED_LA_LATC2:
d3458 1
a3458 1
   case MESA_FORMAT_SIGNED_A8:
d3460 1
a3460 1
   case MESA_FORMAT_SIGNED_L8:
d3462 1
a3462 1
   case MESA_FORMAT_SIGNED_AL88:
d3465 3
a3467 3
   case MESA_FORMAT_SIGNED_I8:
      return format == GL_INTENSITY && type == GL_BYTE;
   case MESA_FORMAT_SIGNED_A16:
d3469 1
a3469 1
   case MESA_FORMAT_SIGNED_L16:
d3471 1
a3471 1
   case MESA_FORMAT_SIGNED_AL1616:
d3474 2
a3475 2
   case MESA_FORMAT_SIGNED_I16:
      return format == GL_INTENSITY && type == GL_SHORT && littleEndian &&
d3478 1
a3478 1
   case MESA_FORMAT_ARGB2101010_UINT:
d3483 1
a3483 1
   case MESA_FORMAT_ABGR2101010_UINT:
d3488 1
a3488 1
   case MESA_FORMAT_RGB9_E5_FLOAT:
d3492 1
a3492 1
   case MESA_FORMAT_R11_G11_B10_FLOAT:
d3496 1
a3496 1
   case MESA_FORMAT_Z32_FLOAT:
d3499 1
a3499 1
   case MESA_FORMAT_Z32_FLOAT_X24S8:
d3503 30
a3532 15
   case MESA_FORMAT_XRGB4444_UNORM:
   case MESA_FORMAT_XRGB1555_UNORM:
   case MESA_FORMAT_XBGR8888_SNORM:
   case MESA_FORMAT_XBGR8888_SRGB:
   case MESA_FORMAT_XBGR8888_UINT:
   case MESA_FORMAT_XBGR8888_SINT:
   case MESA_FORMAT_XRGB2101010_UNORM:
   case MESA_FORMAT_XBGR16161616_UNORM:
   case MESA_FORMAT_XBGR16161616_SNORM:
   case MESA_FORMAT_XBGR16161616_FLOAT:
   case MESA_FORMAT_XBGR16161616_UINT:
   case MESA_FORMAT_XBGR16161616_SINT:
   case MESA_FORMAT_XBGR32323232_FLOAT:
   case MESA_FORMAT_XBGR32323232_UINT:
   case MESA_FORMAT_XBGR32323232_SINT:
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.7
d20 4
a23 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d29 2
a30 1
#include "mfeatures.h"
d46 1
a46 2
    * GL_COLOR_INDEX, GL_DEPTH_COMPONENT, GL_STENCIL_INDEX,
    * GL_DEPTH_STENCIL, GL_DUDV_ATI.
d51 1
a51 1
    * Logical data type: one of  GL_UNSIGNED_NORMALIZED, GL_SIGNED_NORMALED,
d127 18
a351 9
      MESA_FORMAT_CI8,             /* Name */
      "MESA_FORMAT_CI8",           /* StrName */
      GL_COLOR_INDEX,              /* BaseFormat */
      GL_UNSIGNED_INT,             /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 8, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
d379 2
a380 2
      MESA_FORMAT_RG88,
      "MESA_FORMAT_RG88",
d388 2
a389 2
      MESA_FORMAT_RG88_REV,
      "MESA_FORMAT_RG88_REV",
d406 2
a407 2
      MESA_FORMAT_RG1616,
      "MESA_FORMAT_RG1616",
d415 2
a416 2
      MESA_FORMAT_RG1616_REV,
      "MESA_FORMAT_RG1616_REV",
d436 1
a436 1
      GL_UNSIGNED_INT,             /* DataType */
d445 1
a445 1
      GL_UNSIGNED_INT,             /* DataType */
d454 1
a454 1
      GL_UNSIGNED_INT,             /* DataType */
d463 1
a463 1
      GL_UNSIGNED_INT,             /* DataType */
d472 1
a472 1
      GL_UNSIGNED_INT,             /* DataType */
d481 1
a481 1
      GL_UNSIGNED_INT,             /* DataType */
d778 19
d798 5
a802 5
      MESA_FORMAT_RGBA_INT8,
      "MESA_FORMAT_RGBA_INT8",
      GL_RGBA,
      GL_INT,
      8, 8, 8, 8,
d807 3
a809 3
      MESA_FORMAT_RGBA_INT16,
      "MESA_FORMAT_RGBA_INT16",
      GL_RGBA,
d811 1
a811 1
      16, 16, 16, 16,
d813 1
a813 1
      1, 1, 8
d816 3
a818 3
      MESA_FORMAT_RGBA_INT32,
      "MESA_FORMAT_RGBA_INT32",
      GL_RGBA,
d820 1
a820 1
      32, 32, 32, 32,
d822 1
a822 1
      1, 1, 16
a823 2

   /* unnormalized unsigned int formats */
d825 5
a829 5
      MESA_FORMAT_RGBA_UINT8,
      "MESA_FORMAT_RGBA_UINT8",
      GL_RGBA,
      GL_UNSIGNED_INT,
      8, 8, 8, 8,
d834 3
a836 3
      MESA_FORMAT_RGBA_UINT16,
      "MESA_FORMAT_RGBA_UINT16",
      GL_RGBA,
d838 3
a840 3
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
d843 3
a845 3
      MESA_FORMAT_RGBA_UINT32,
      "MESA_FORMAT_RGBA_UINT32",
      GL_RGBA,
d847 3
a849 3
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
a850 2


d852 4
a855 4
      MESA_FORMAT_DUDV8,
      "MESA_FORMAT_DUDV8",
      GL_DUDV_ATI,
      GL_SIGNED_NORMALIZED,
d857 2
a858 2
      0, 0, 0, 0, 0,
      1, 1, 2
a859 2

   /* Signed 8 bits / channel */
d861 7
a867 7
      MESA_FORMAT_SIGNED_R8,        /* Name */
      "MESA_FORMAT_SIGNED_R8",      /* StrName */
      GL_RED,                       /* BaseFormat */
      GL_SIGNED_NORMALIZED,         /* DataType */
      8, 0, 0, 0,                   /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,                /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                       /* BlockWidth/Height,Bytes */
d870 6
a875 6
      MESA_FORMAT_SIGNED_RG88_REV,
      "MESA_FORMAT_SIGNED_RG88_REV",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
d879 6
a884 15
      MESA_FORMAT_SIGNED_RGBX8888,
      "MESA_FORMAT_SIGNED_RGBX8888",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4                       /* 4 bpp, but no alpha */
   },
   {
      MESA_FORMAT_SIGNED_RGBA8888,
      "MESA_FORMAT_SIGNED_RGBA8888",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
d888 7
a894 7
      MESA_FORMAT_SIGNED_RGBA8888_REV,
      "MESA_FORMAT_SIGNED_RGBA8888_REV",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
a895 2

   /* Signed 16 bits / channel */
d897 6
a902 6
      MESA_FORMAT_SIGNED_R16,
      "MESA_FORMAT_SIGNED_R16",
      GL_RED,
      GL_SIGNED_NORMALIZED,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
d906 6
a911 6
      MESA_FORMAT_SIGNED_GR1616,
      "MESA_FORMAT_SIGNED_GR1616",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
d915 7
a921 7
      MESA_FORMAT_SIGNED_RGB_16,
      "MESA_FORMAT_SIGNED_RGB_16",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
d924 7
a930 7
      MESA_FORMAT_SIGNED_RGBA_16,
      "MESA_FORMAT_SIGNED_RGBA_16",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
d933 7
a939 7
      MESA_FORMAT_RGBA_16,
      "MESA_FORMAT_RGBA_16",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
d942 7
a948 7
     MESA_FORMAT_RED_RGTC1,
     "MESA_FORMAT_RED_RGTC1",
     GL_RED,
     GL_UNSIGNED_NORMALIZED,
     4, 0, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
d951 7
a957 7
     MESA_FORMAT_SIGNED_RED_RGTC1,
     "MESA_FORMAT_SIGNED_RED_RGTC1",
     GL_RED,
     GL_SIGNED_NORMALIZED,
     4, 0, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
d960 7
a966 7
     MESA_FORMAT_RG_RGTC2,
     "MESA_FORMAT_RG_RGTC2",
     GL_RG,
     GL_UNSIGNED_NORMALIZED,
     4, 4, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
d969 7
a975 7
     MESA_FORMAT_SIGNED_RG_RGTC2,
     "MESA_FORMAT_SIGNED_RG_RGTC2",
     GL_RG,
     GL_SIGNED_NORMALIZED,
     4, 4, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
d978 7
a984 7
     MESA_FORMAT_L_LATC1,
     "MESA_FORMAT_L_LATC1",
     GL_LUMINANCE,
     GL_UNSIGNED_NORMALIZED,
     0, 0, 0, 0,
     4, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
d987 7
a993 7
     MESA_FORMAT_SIGNED_L_LATC1,
     "MESA_FORMAT_SIGNED_L_LATC1",
     GL_LUMINANCE,
     GL_SIGNED_NORMALIZED,
     0, 0, 0, 0,
     4, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
d995 1
d997 7
a1003 7
     MESA_FORMAT_LA_LATC2,
     "MESA_FORMAT_LA_LATC2",
     GL_LUMINANCE_ALPHA,
     GL_UNSIGNED_NORMALIZED,
     0, 0, 0, 4,
     4, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
d1006 7
a1012 7
     MESA_FORMAT_SIGNED_LA_LATC2,
     "MESA_FORMAT_SIGNED_LA_LATC2",
     GL_LUMINANCE_ALPHA,
     GL_SIGNED_NORMALIZED,
     0, 0, 0, 4,
     4, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
a1013 2

   /* Signed formats from EXT_texture_snorm that are not in GL3.1 */
d1015 5
a1019 5
      MESA_FORMAT_SIGNED_A8,
      "MESA_FORMAT_SIGNED_A8",
      GL_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 8,
d1021 1
a1021 1
      1, 1, 1
d1024 7
a1030 7
      MESA_FORMAT_SIGNED_L8,
      "MESA_FORMAT_SIGNED_L8",
      GL_LUMINANCE,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
d1033 6
a1038 6
      MESA_FORMAT_SIGNED_AL88,
      "MESA_FORMAT_SIGNED_AL88",
      GL_LUMINANCE_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
d1042 69
a1110 6
      MESA_FORMAT_SIGNED_I8,
      "MESA_FORMAT_SIGNED_I8",
      GL_INTENSITY,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
d1114 5
a1118 5
      MESA_FORMAT_SIGNED_A16,
      "MESA_FORMAT_SIGNED_A16",
      GL_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 16,
d1123 7
a1129 7
      MESA_FORMAT_SIGNED_L16,
      "MESA_FORMAT_SIGNED_L16",
      GL_LUMINANCE,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
d1132 6
a1137 6
      MESA_FORMAT_SIGNED_AL1616,
      "MESA_FORMAT_SIGNED_AL1616",
      GL_LUMINANCE_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
d1141 6
a1146 6
      MESA_FORMAT_SIGNED_I16,
      "MESA_FORMAT_SIGNED_I16",
      GL_INTENSITY,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
d1150 11
a1160 2
      MESA_FORMAT_RGB9_E5_FLOAT,
      "MESA_FORMAT_RGB9_E5",
d1162 20
a1181 2
      GL_FLOAT,
      9, 9, 9, 0,
d1186 11
a1196 2
      MESA_FORMAT_R11_G11_B10_FLOAT,
      "MESA_FORMAT_R11_G11_B10_FLOAT",
d1198 2
a1199 2
      GL_FLOAT,
      11, 11, 10, 0,
d1201 1
a1201 1
      1, 1, 4
d1203 1271
a2473 1
};
d2475 4
d2480 20
d2501 17
a2517 7
static const struct gl_format_info *
_mesa_get_format_info(gl_format format)
{
   const struct gl_format_info *info = &format_info[format];
   assert(info->Name == format);
   return info;
}
d2519 33
d2553 40
a2592 7
/** Return string name of format (for debugging) */
const char *
_mesa_get_format_name(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return info->StrName;
}
d2594 10
d2605 30
d2636 10
a2645 14
/**
 * Return bytes needed to store a block of pixels in the given format.
 * Normally, a block is 1x1 (a single pixel).  But for compressed formats
 * a block may be 4x4 or 8x4, etc.
 *
 * Note: not GLuint, so as not to coerce math to unsigned. cf. fdo #37351
 */
GLint
_mesa_get_format_bytes(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   ASSERT(info->BytesPerBlock);
   return info->BytesPerBlock;
}
d2647 10
d2658 48
a2705 9
/**
 * Return bits per component for the given format.
 * \param format  one of MESA_FORMAT_x
 * \param pname  the component, such as GL_RED_BITS, GL_TEXTURE_BLUE_BITS, etc.
 */
GLint
_mesa_get_format_bits(gl_format format, GLenum pname)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
d2707 51
a2757 43
   switch (pname) {
   case GL_RED_BITS:
   case GL_TEXTURE_RED_SIZE:
   case GL_RENDERBUFFER_RED_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE:
      return info->RedBits;
   case GL_GREEN_BITS:
   case GL_TEXTURE_GREEN_SIZE:
   case GL_RENDERBUFFER_GREEN_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:
      return info->GreenBits;
   case GL_BLUE_BITS:
   case GL_TEXTURE_BLUE_SIZE:
   case GL_RENDERBUFFER_BLUE_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:
      return info->BlueBits;
   case GL_ALPHA_BITS:
   case GL_TEXTURE_ALPHA_SIZE:
   case GL_RENDERBUFFER_ALPHA_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:
      return info->AlphaBits;
   case GL_TEXTURE_INTENSITY_SIZE:
      return info->IntensityBits;
   case GL_TEXTURE_LUMINANCE_SIZE:
      return info->LuminanceBits;
   case GL_INDEX_BITS:
   case GL_TEXTURE_INDEX_SIZE_EXT:
      return info->IndexBits;
   case GL_DEPTH_BITS:
   case GL_TEXTURE_DEPTH_SIZE_ARB:
   case GL_RENDERBUFFER_DEPTH_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:
      return info->DepthBits;
   case GL_STENCIL_BITS:
   case GL_TEXTURE_STENCIL_SIZE_EXT:
   case GL_RENDERBUFFER_STENCIL_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:
      return info->StencilBits;
   default:
      _mesa_problem(NULL, "bad pname in _mesa_get_format_bits()");
      return 0;
   }
}
d2759 4
d2764 4
a2767 16
/**
 * Return the data type (or more specifically, the data representation)
 * for the given format.
 * The return value will be one of:
 *    GL_UNSIGNED_NORMALIZED = unsigned int representing [0,1]
 *    GL_SIGNED_NORMALIZED = signed int representing [-1, 1]
 *    GL_UNSIGNED_INT = an ordinary unsigned integer
 *    GL_INT = an ordinary signed integer
 *    GL_FLOAT = an ordinary float
 */
GLenum
_mesa_get_format_datatype(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return info->DataType;
}
d2769 5
d2775 5
a2779 12
/**
 * Return the basic format for the given type.  The result will be
 * one of GL_RGB, GL_RGBA, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA,
 * GL_INTENSITY, GL_YCBCR_MESA, GL_COLOR_INDEX, GL_DEPTH_COMPONENT,
 * GL_STENCIL_INDEX, GL_DEPTH_STENCIL.
 */
GLenum
_mesa_get_format_base_format(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return info->BaseFormat;
}
d2781 5
d2787 4
a2790 14
/**
 * Return the block size (in pixels) for the given format.  Normally
 * the block size is 1x1.  But compressed formats will have block sizes
 * of 4x4 or 8x4 pixels, etc.
 * \param bw  returns block width in pixels
 * \param bh  returns block height in pixels
 */
void
_mesa_get_format_block_size(gl_format format, GLuint *bw, GLuint *bh)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   *bw = info->BlockWidth;
   *bh = info->BlockHeight;
}
d2792 5
d2798 5
a2802 7
/** Is the given format a compressed format? */
GLboolean
_mesa_is_format_compressed(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return info->BlockWidth > 1 || info->BlockHeight > 1;
}
d2804 4
d2809 4
a2812 7
/**
 * Determine if the given format represents a packed depth/stencil buffer.
 */
GLboolean
_mesa_is_format_packed_depth_stencil(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
d2814 4
a2817 2
   return info->BaseFormat == GL_DEPTH_STENCIL;
}
d2819 4
d2824 3
a2826 12
/**
 * Is the given format a signed/unsigned integer color format?
 */
GLboolean
_mesa_is_format_integer_color(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return (info->DataType == GL_INT || info->DataType == GL_UNSIGNED_INT) &&
      info->BaseFormat != GL_DEPTH_COMPONENT &&
      info->BaseFormat != GL_DEPTH_STENCIL &&
      info->BaseFormat != GL_STENCIL_INDEX;
}
d2828 3
a2830 20

/**
 * Return color encoding for given format.
 * \return GL_LINEAR or GL_SRGB
 */
GLenum
_mesa_get_format_color_encoding(gl_format format)
{
   /* XXX this info should be encoded in gl_format_info */
   switch (format) {
   case MESA_FORMAT_SRGB8:
   case MESA_FORMAT_SRGBA8:
   case MESA_FORMAT_SARGB8:
   case MESA_FORMAT_SL8:
   case MESA_FORMAT_SLA8:
   case MESA_FORMAT_SRGB_DXT1:
   case MESA_FORMAT_SRGBA_DXT1:
   case MESA_FORMAT_SRGBA_DXT3:
   case MESA_FORMAT_SRGBA_DXT5:
      return GL_SRGB;
d2832 5
a2836 42
      return GL_LINEAR;
   }
}


/**
 * For an sRGB format, return the corresponding linear color space format.
 * For non-sRGB formats, return the format as-is.
 */
gl_format
_mesa_get_srgb_format_linear(gl_format format)
{
   switch (format) {
   case MESA_FORMAT_SRGB8:
      format = MESA_FORMAT_RGB888;
      break;
   case MESA_FORMAT_SRGBA8:
      format = MESA_FORMAT_RGBA8888;
      break;
   case MESA_FORMAT_SARGB8:
      format = MESA_FORMAT_ARGB8888;
      break;
   case MESA_FORMAT_SL8:
      format = MESA_FORMAT_L8;
      break;
   case MESA_FORMAT_SLA8:
      format = MESA_FORMAT_AL88;
      break;
   case MESA_FORMAT_SRGB_DXT1:
      format = MESA_FORMAT_RGB_DXT1;
      break;
   case MESA_FORMAT_SRGBA_DXT1:
      format = MESA_FORMAT_RGBA_DXT1;
      break;
   case MESA_FORMAT_SRGBA_DXT3:
      format = MESA_FORMAT_RGBA_DXT3;
      break;
   case MESA_FORMAT_SRGBA_DXT5:
      format = MESA_FORMAT_RGBA_DXT5;
      break;
   default:
      break;
a2837 1
   return format;
a2839 1

d2841 7
a2847 2
 * Return number of bytes needed to store an image of the given size
 * in the given format.
d2849 4
a2852 3
GLuint
_mesa_format_image_size(gl_format format, GLsizei width,
                        GLsizei height, GLsizei depth)
d2854 10
a2863 17
   const struct gl_format_info *info = _mesa_get_format_info(format);
   /* Strictly speaking, a conditional isn't needed here */
   if (info->BlockWidth > 1 || info->BlockHeight > 1) {
      /* compressed format (2D only for now) */
      const GLuint bw = info->BlockWidth, bh = info->BlockHeight;
      const GLuint wblocks = (width + bw - 1) / bw;
      const GLuint hblocks = (height + bh - 1) / bh;
      const GLuint sz = wblocks * hblocks * info->BytesPerBlock;
      assert(depth == 1);
      return sz;
   }
   else {
      /* non-compressed */
      const GLuint sz = width * height * depth * info->BytesPerBlock;
      return sz;
   }
}
d2865 1
d2867 3
a2869 28
/**
 * Same as _mesa_format_image_size() but returns a 64-bit value to
 * accomodate very large textures.
 */
uint64_t
_mesa_format_image_size64(gl_format format, GLsizei width,
                          GLsizei height, GLsizei depth)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   /* Strictly speaking, a conditional isn't needed here */
   if (info->BlockWidth > 1 || info->BlockHeight > 1) {
      /* compressed format (2D only for now) */
      const uint64_t bw = info->BlockWidth, bh = info->BlockHeight;
      const uint64_t wblocks = (width + bw - 1) / bw;
      const uint64_t hblocks = (height + bh - 1) / bh;
      const uint64_t sz = wblocks * hblocks * info->BytesPerBlock;
      assert(depth == 1);
      return sz;
   }
   else {
      /* non-compressed */
      const uint64_t sz = ((uint64_t) width *
                           (uint64_t) height *
                           (uint64_t) depth *
                           info->BytesPerBlock);
      return sz;
   }
}
d2871 4
d2876 2
d2879 2
a2880 17
GLint
_mesa_format_row_stride(gl_format format, GLsizei width)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   /* Strictly speaking, a conditional isn't needed here */
   if (info->BlockWidth > 1 || info->BlockHeight > 1) {
      /* compressed format */
      const GLuint bw = info->BlockWidth;
      const GLuint wblocks = (width + bw - 1) / bw;
      const GLint stride = wblocks * info->BytesPerBlock;
      return stride;
   }
   else {
      const GLint stride = width * info->BytesPerBlock;
      return stride;
   }
}
d2882 3
d2886 3
a2888 10
/**
 * Debug/test: check that all formats are handled in the
 * _mesa_format_to_type_and_comps() function.  When new pixel formats
 * are added to Mesa, that function needs to be updated.
 * This is a no-op after the first call.
 */
static void
check_format_to_type_and_comps(void)
{
   gl_format f;
d2890 2
a2891 9
   for (f = MESA_FORMAT_NONE + 1; f < MESA_FORMAT_COUNT; f++) {
      GLenum datatype = 0;
      GLuint comps = 0;
      /* This function will emit a problem/warning if the format is
       * not handled.
       */
      _mesa_format_to_type_and_comps(f, &datatype, &comps);
   }
}
d2893 1
d2895 4
a2898 7
/**
 * Do sanity checking of the format info table.
 */
void
_mesa_test_formats(void)
{
   GLuint i;
d2900 2
a2901 1
   assert(Elements(format_info) == MESA_FORMAT_COUNT);
d2903 2
a2904 3
   for (i = 0; i < MESA_FORMAT_COUNT; i++) {
      const struct gl_format_info *info = _mesa_get_format_info(i);
      assert(info);
d2906 3
a2908 1
      assert(info->Name == i);
d2910 3
a2912 2
      if (info->Name == MESA_FORMAT_NONE)
         continue;
d2914 2
a2915 8
      if (info->BlockWidth == 1 && info->BlockHeight == 1) {
         if (info->RedBits > 0) {
            GLuint t = info->RedBits + info->GreenBits
               + info->BlueBits + info->AlphaBits;
            assert(t / 8 <= info->BytesPerBlock);
            (void) t;
         }
      }
d2917 1
a2917 5
      assert(info->DataType == GL_UNSIGNED_NORMALIZED ||
             info->DataType == GL_SIGNED_NORMALIZED ||
             info->DataType == GL_UNSIGNED_INT ||
             info->DataType == GL_INT ||
             info->DataType == GL_FLOAT);
d2919 5
a2923 49
      if (info->BaseFormat == GL_RGB) {
         assert(info->RedBits > 0);
         assert(info->GreenBits > 0);
         assert(info->BlueBits > 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_RGBA) {
         assert(info->RedBits > 0);
         assert(info->GreenBits > 0);
         assert(info->BlueBits > 0);
         assert(info->AlphaBits > 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_RG) {
         assert(info->RedBits > 0);
         assert(info->GreenBits > 0);
         assert(info->BlueBits == 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_RED) {
         assert(info->RedBits > 0);
         assert(info->GreenBits == 0);
         assert(info->BlueBits == 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_LUMINANCE) {
         assert(info->RedBits == 0);
         assert(info->GreenBits == 0);
         assert(info->BlueBits == 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits > 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_INTENSITY) {
         assert(info->RedBits == 0);
         assert(info->GreenBits == 0);
         assert(info->BlueBits == 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits > 0);
      }
   }
d2925 2
a2926 2
   check_format_to_type_and_comps();
}
d2928 2
d2931 1
a2932 12
/**
 * Return datatype and number of components per texel for the given gl_format.
 * Only used for mipmap generation code.
 */
void
_mesa_format_to_type_and_comps(gl_format format,
                               GLenum *datatype, GLuint *comps)
{
   switch (format) {
   case MESA_FORMAT_RGBA8888:
   case MESA_FORMAT_RGBA8888_REV:
   case MESA_FORMAT_ARGB8888:
d2934 16
d2952 2
a2953 3
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;
d2955 3
d2959 2
a2960 3
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 3;
      return;
d2962 2
d2965 5
a2969 3
      *datatype = GL_UNSIGNED_SHORT_5_6_5;
      *comps = 3;
      return;
d2972 3
d2976 5
a2980 3
      *datatype = GL_UNSIGNED_SHORT_4_4_4_4;
      *comps = 4;
      return;
d2983 3
d2987 1
a2987 13
      *datatype = GL_UNSIGNED_SHORT_1_5_5_5_REV;
      *comps = 4;
      return;

   case MESA_FORMAT_ARGB2101010:
      *datatype = GL_UNSIGNED_INT_2_10_10_10_REV;
      *comps = 4;
      return;

   case MESA_FORMAT_RGBA5551:
      *datatype = GL_UNSIGNED_SHORT_5_5_5_1;
      *comps = 4;
      return;
d2990 1
a2990 4
      *datatype = MESA_UNSIGNED_BYTE_4_4;
      *comps = 2;
      return;

d2992 2
d2995 1
a2995 5
   case MESA_FORMAT_RG88:
   case MESA_FORMAT_RG88_REV:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 2;
      return;
d2998 1
d3000 1
a3000 13
   case MESA_FORMAT_RG1616:
   case MESA_FORMAT_RG1616_REV:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 2;
      return;

   case MESA_FORMAT_R16:
   case MESA_FORMAT_A16:
   case MESA_FORMAT_L16:
   case MESA_FORMAT_I16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 1;
      return;
d3003 1
a3003 3
      *datatype = GL_UNSIGNED_BYTE_3_3_2;
      *comps = 3;
      return;
d3006 8
a3013 1
   case MESA_FORMAT_L8:
d3015 3
a3017 6
   case MESA_FORMAT_CI8:
   case MESA_FORMAT_R8:
   case MESA_FORMAT_S8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 1;
      return;
d3020 3
d3024 23
a3046 3
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 2;
      return;
d3049 3
a3051 4
      *datatype = GL_UNSIGNED_INT;
      *comps = 1; /* XXX OK? */
      return;

d3053 1
a3053 3
      *datatype = GL_UNSIGNED_INT;
      *comps = 1; /* XXX OK? */
      return;
d3056 2
a3057 3
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 1;
      return;
d3060 1
a3060 8
      *datatype = GL_UNSIGNED_INT;
      *comps = 1;
      return;

   case MESA_FORMAT_Z24_X8:
      *datatype = GL_UNSIGNED_INT;
      *comps = 1;
      return;
d3063 2
a3064 3
      *datatype = GL_UNSIGNED_INT;
      *comps = 1;
      return;
d3066 2
a3067 4
   case MESA_FORMAT_DUDV8:
      *datatype = GL_BYTE;
      *comps = 2;
      return;
d3069 5
a3073 64
   case MESA_FORMAT_SIGNED_R8:
   case MESA_FORMAT_SIGNED_A8:
   case MESA_FORMAT_SIGNED_L8:
   case MESA_FORMAT_SIGNED_I8:
      *datatype = GL_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_SIGNED_RG88_REV:
   case MESA_FORMAT_SIGNED_AL88:
      *datatype = GL_BYTE;
      *comps = 2;
      return;
   case MESA_FORMAT_SIGNED_RGBA8888:
   case MESA_FORMAT_SIGNED_RGBA8888_REV:
   case MESA_FORMAT_SIGNED_RGBX8888:
      *datatype = GL_BYTE;
      *comps = 4;
      return;

   case MESA_FORMAT_RGBA_16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 4;
      return;

   case MESA_FORMAT_SIGNED_R16:
   case MESA_FORMAT_SIGNED_A16:
   case MESA_FORMAT_SIGNED_L16:
   case MESA_FORMAT_SIGNED_I16:
      *datatype = GL_SHORT;
      *comps = 1;
      return;
   case MESA_FORMAT_SIGNED_GR1616:
   case MESA_FORMAT_SIGNED_AL1616:
      *datatype = GL_SHORT;
      *comps = 2;
      return;
   case MESA_FORMAT_SIGNED_RGB_16:
      *datatype = GL_SHORT;
      *comps = 3;
      return;
   case MESA_FORMAT_SIGNED_RGBA_16:
      *datatype = GL_SHORT;
      *comps = 4;
      return;

#if FEATURE_EXT_texture_sRGB
   case MESA_FORMAT_SRGB8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 3;
      return;
   case MESA_FORMAT_SRGBA8:
   case MESA_FORMAT_SARGB8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;
   case MESA_FORMAT_SL8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_SLA8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 2;
      return;
#endif
a3074 1
#if FEATURE_texture_fxt1
a3076 2
#endif
#if FEATURE_texture_s3tc
d3081 1
a3081 19
#if FEATURE_EXT_texture_sRGB
   case MESA_FORMAT_SRGB_DXT1:
   case MESA_FORMAT_SRGBA_DXT1:
   case MESA_FORMAT_SRGBA_DXT3:
   case MESA_FORMAT_SRGBA_DXT5:
#endif
#endif
   case MESA_FORMAT_RED_RGTC1:
   case MESA_FORMAT_SIGNED_RED_RGTC1:
   case MESA_FORMAT_RG_RGTC2:
   case MESA_FORMAT_SIGNED_RG_RGTC2:
   case MESA_FORMAT_L_LATC1:
   case MESA_FORMAT_SIGNED_L_LATC1:
   case MESA_FORMAT_LA_LATC2:
   case MESA_FORMAT_SIGNED_LA_LATC2:
      /* XXX generate error instead? */
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 0;
      return;
d3084 1
a3084 3
      *datatype = GL_FLOAT;
      *comps = 4;
      return;
d3086 2
a3087 3
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 4;
      return;
d3089 1
a3089 3
      *datatype = GL_FLOAT;
      *comps = 3;
      return;
d3091 12
a3102 3
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 3;
      return;
d3104 1
a3104 4
   case MESA_FORMAT_RG_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 2;
      return;
d3106 2
a3107 6
   case MESA_FORMAT_RG_FLOAT16:
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 2;
      return;
   case MESA_FORMAT_ALPHA_FLOAT32:
   case MESA_FORMAT_LUMINANCE_FLOAT32:
d3109 4
d3114 1
a3114 6
      *datatype = GL_FLOAT;
      *comps = 1;
      return;
   case MESA_FORMAT_ALPHA_FLOAT16:
   case MESA_FORMAT_LUMINANCE_FLOAT16:
   case MESA_FORMAT_INTENSITY_FLOAT16:
d3116 6
a3121 3
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 1;
      return;
d3123 65
d3189 7
a3195 3
      *datatype = GL_BYTE;
      *comps = 4;
      return;
d3197 7
a3203 3
      *datatype = GL_SHORT;
      *comps = 4;
      return;
d3205 1
a3205 3
      *datatype = GL_INT;
      *comps = 4;
      return;
d3207 6
a3212 3
   /**
    * \name Non-normalized unsigned integer formats.
    */
d3214 10
a3223 3
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;
d3225 8
a3232 3
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 4;
      return;
d3234 99
a3332 3
      *datatype = GL_UNSIGNED_INT;
      *comps = 4;
      return;
d3335 2
a3336 3
      *datatype = GL_UNSIGNED_INT_5_9_9_9_REV;
      *comps = 3;
      return;
d3339 2
a3340 3
      *datatype = GL_UNSIGNED_INT_10F_11F_11F_REV;
      *comps = 3;
      return;
d3342 2
a3343 3
   case MESA_FORMAT_COUNT:
      assert(0);
      return;
d3345 20
a3364 9
   case MESA_FORMAT_NONE:
   /* For debug builds, warn if any formats are not handled */
#ifdef DEBUG
   default:
#endif
      _mesa_problem(NULL, "bad format %s in _mesa_format_to_type_and_comps",
                    _mesa_get_format_name(format));
      *datatype = 0;
      *comps = 1;
d3366 2
d3369 1
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d43 4
a46 3
    * Base format is one of GL_RGB, GL_RGBA, GL_ALPHA, GL_LUMINANCE,
    * GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_YCBCR_MESA, GL_COLOR_INDEX,
    * GL_DEPTH_COMPONENT, GL_STENCIL_INDEX, GL_DEPTH_STENCIL.
d226 9
d289 9
d307 9
d325 9
d415 9
d680 1
a680 1
      GL_ALPHA,
d689 1
a689 1
      GL_ALPHA,
d731 36
d848 2
a849 2
      MESA_FORMAT_SIGNED_RG88,
      "MESA_FORMAT_SIGNED_RG88",
d886 2
a887 2
      MESA_FORMAT_SIGNED_R_16,
      "MESA_FORMAT_SIGNED_R_16",
d895 2
a896 2
      MESA_FORMAT_SIGNED_RG_16,
      "MESA_FORMAT_SIGNED_RG_16",
d929 165
a1093 1
   }
a1111 1
   ASSERT(info->BytesPerBlock);
d1297 42
d1415 21
d1519 1
d1521 1
a1521 1
   }
d1567 5
d1577 5
d1599 3
d1663 3
d1669 2
a1670 1
   case MESA_FORMAT_SIGNED_RG88:
d1686 4
a1689 1
   case MESA_FORMAT_SIGNED_R_16:
d1693 2
a1694 1
   case MESA_FORMAT_SIGNED_RG_16:
d1743 8
d1773 1
d1778 1
d1785 1
d1792 1
d1826 14
a1840 1
   case MESA_FORMAT_COUNT:
d1842 1
a1842 1
#ifndef DEBUG
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d29 1
a29 1
#include "config.h"
d51 1
a51 1
    * GL_UNSIGNED_INT, GL_SIGNED_INT, GL_FLOAT.
d324 54
d685 60
d754 29
d801 29
d838 9
d876 2
d879 1
a879 1
GLuint
d950 1
d1001 26
d1062 1
a1062 1
      /* compressed format */
d1067 1
d1078 30
d1152 1
a1152 1
            assert(t / 8 == info->BytesPerBlock);
d1160 1
d1179 16
d1231 1
d1258 5
d1265 2
d1273 2
d1279 5
d1293 2
d1340 8
d1350 1
d1354 18
d1412 1
a1416 1
#endif
d1455 33
d1489 3
a1491 1
      _mesa_problem(NULL, "bad format in _mesa_format_to_type_and_comps");
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d29 1
a29 1
#include "mfeatures.h"
d51 1
a51 1
    * GL_UNSIGNED_INT, GL_INT, GL_FLOAT.
a323 54
      MESA_FORMAT_R8,
      "MESA_FORMAT_R8",
      GL_RED,
      GL_UNSIGNED_NORMALIZED,
      8, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_RG88,
      "MESA_FORMAT_RG88",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RG88_REV,
      "MESA_FORMAT_RG88_REV",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R16,
      "MESA_FORMAT_R16",
      GL_RED,
      GL_UNSIGNED_NORMALIZED,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RG1616,
      "MESA_FORMAT_RG1616",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG1616_REV,
      "MESA_FORMAT_RG1616_REV",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
a630 60

   /* unnormalized signed int formats */
   {
      MESA_FORMAT_RGBA_INT8,
      "MESA_FORMAT_RGBA_INT8",
      GL_RGBA,
      GL_INT,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGBA_INT16,
      "MESA_FORMAT_RGBA_INT16",
      GL_RGBA,
      GL_INT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBA_INT32,
      "MESA_FORMAT_RGBA_INT32",
      GL_RGBA,
      GL_INT,
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
   },

   /* unnormalized unsigned int formats */
   {
      MESA_FORMAT_RGBA_UINT8,
      "MESA_FORMAT_RGBA_UINT8",
      GL_RGBA,
      GL_UNSIGNED_INT,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGBA_UINT16,
      "MESA_FORMAT_RGBA_UINT16",
      GL_RGBA,
      GL_UNSIGNED_INT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBA_UINT32,
      "MESA_FORMAT_RGBA_UINT32",
      GL_RGBA,
      GL_UNSIGNED_INT,
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
   },


a639 29

   /* Signed 8 bits / channel */
   {
      MESA_FORMAT_SIGNED_R8,        /* Name */
      "MESA_FORMAT_SIGNED_R8",      /* StrName */
      GL_RED,                       /* BaseFormat */
      GL_SIGNED_NORMALIZED,         /* DataType */
      8, 0, 0, 0,                   /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,                /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                       /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_SIGNED_RG88,
      "MESA_FORMAT_SIGNED_RG88",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_SIGNED_RGBX8888,
      "MESA_FORMAT_SIGNED_RGBX8888",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4                       /* 4 bpp, but no alpha */
   },
a657 29

   /* Signed 16 bits / channel */
   {
      MESA_FORMAT_SIGNED_R_16,
      "MESA_FORMAT_SIGNED_R_16",
      GL_RED,
      GL_SIGNED_NORMALIZED,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_SIGNED_RG_16,
      "MESA_FORMAT_SIGNED_RG_16",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_SIGNED_RGB_16,
      "MESA_FORMAT_SIGNED_RGB_16",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
a665 9
   },
   {
      MESA_FORMAT_RGBA_16,
      "MESA_FORMAT_RGBA_16",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
a694 2
 *
 * Note: not GLuint, so as not to coerce math to unsigned. cf. fdo #37351
d696 1
a696 1
GLint
a766 1
 *    GL_INT = an ordinary signed integer
a816 26
 * Determine if the given format represents a packed depth/stencil buffer.
 */
GLboolean
_mesa_is_format_packed_depth_stencil(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);

   return info->BaseFormat == GL_DEPTH_STENCIL;
}


/**
 * Is the given format a signed/unsigned integer color format?
 */
GLboolean
_mesa_is_format_integer_color(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return (info->DataType == GL_INT || info->DataType == GL_UNSIGNED_INT) &&
      info->BaseFormat != GL_DEPTH_COMPONENT &&
      info->BaseFormat != GL_DEPTH_STENCIL &&
      info->BaseFormat != GL_STENCIL_INDEX;
}


/**
d852 1
a852 1
      /* compressed format (2D only for now) */
a856 1
      assert(depth == 1);
a866 30
/**
 * Same as _mesa_format_image_size() but returns a 64-bit value to
 * accomodate very large textures.
 */
uint64_t
_mesa_format_image_size64(gl_format format, GLsizei width,
                          GLsizei height, GLsizei depth)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   /* Strictly speaking, a conditional isn't needed here */
   if (info->BlockWidth > 1 || info->BlockHeight > 1) {
      /* compressed format (2D only for now) */
      const uint64_t bw = info->BlockWidth, bh = info->BlockHeight;
      const uint64_t wblocks = (width + bw - 1) / bw;
      const uint64_t hblocks = (height + bh - 1) / bh;
      const uint64_t sz = wblocks * hblocks * info->BytesPerBlock;
      assert(depth == 1);
      return sz;
   }
   else {
      /* non-compressed */
      const uint64_t sz = ((uint64_t) width *
                           (uint64_t) height *
                           (uint64_t) depth *
                           info->BytesPerBlock);
      return sz;
   }
}


d911 1
a911 1
            assert(t / 8 <= info->BytesPerBlock);
a918 1
             info->DataType == GL_INT ||
a936 16
      else if (info->BaseFormat == GL_RG) {
         assert(info->RedBits > 0);
         assert(info->GreenBits > 0);
         assert(info->BlueBits == 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_RED) {
         assert(info->RedBits > 0);
         assert(info->GreenBits == 0);
         assert(info->BlueBits == 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits == 0);
      }
a972 1
   case MESA_FORMAT_XRGB8888_REV:
a998 5
   case MESA_FORMAT_RGBA5551:
      *datatype = GL_UNSIGNED_SHORT_5_5_5_1;
      *comps = 4;
      return;

a1000 2
   case MESA_FORMAT_RG88:
   case MESA_FORMAT_RG88_REV:
a1006 2
   case MESA_FORMAT_RG1616:
   case MESA_FORMAT_RG1616_REV:
a1010 5
   case MESA_FORMAT_R16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 1;
      return;

a1019 2
   case MESA_FORMAT_R8:
   case MESA_FORMAT_S8:
a1064 8
   case MESA_FORMAT_SIGNED_R8:
      *datatype = GL_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_SIGNED_RG88:
      *datatype = GL_BYTE;
      *comps = 2;
      return;
a1066 1
   case MESA_FORMAT_SIGNED_RGBX8888:
a1069 18

   case MESA_FORMAT_RGBA_16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 4;
      return;

   case MESA_FORMAT_SIGNED_R_16:
      *datatype = GL_SHORT;
      *comps = 1;
      return;
   case MESA_FORMAT_SIGNED_RG_16:
      *datatype = GL_SHORT;
      *comps = 2;
      return;
   case MESA_FORMAT_SIGNED_RGB_16:
      *datatype = GL_SHORT;
      *comps = 3;
      return;
a1109 1
#endif
d1114 1
a1152 33
   case MESA_FORMAT_RGBA_INT8:
      *datatype = GL_BYTE;
      *comps = 4;
      return;
   case MESA_FORMAT_RGBA_INT16:
      *datatype = GL_SHORT;
      *comps = 4;
      return;
   case MESA_FORMAT_RGBA_INT32:
      *datatype = GL_INT;
      *comps = 4;
      return;

   /**
    * \name Non-normalized unsigned integer formats.
    */
   case MESA_FORMAT_RGBA_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;
   case MESA_FORMAT_RGBA_UINT16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 4;
      return;
   case MESA_FORMAT_RGBA_UINT32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 4;
      return;

   case MESA_FORMAT_NONE:
   case MESA_FORMAT_COUNT:
   /* For debug builds, warn if any formats are not handled */
#ifndef DEBUG
d1154 1
a1154 3
#endif
      _mesa_problem(NULL, "bad format %s in _mesa_format_to_type_and_comps",
                    _mesa_get_format_name(format));
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d3 1
d21 3
a23 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d29 1
a29 2
#include "macros.h"
#include "glformats.h"
d43 3
a45 3
    * Base format is one of GL_RED, GL_RG, GL_RGB, GL_RGBA, GL_ALPHA,
    * GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_YCBCR_MESA,
    * GL_DEPTH_COMPONENT, GL_STENCIL_INDEX, GL_DEPTH_STENCIL, GL_DUDV_ATI.
d50 1
a50 1
    * Logical data type: one of  GL_UNSIGNED_NORMALIZED, GL_SIGNED_NORMALIZED,
a125 18
      MESA_FORMAT_RGBX8888,        /* Name */
      "MESA_FORMAT_RGBX8888",      /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_RGBX8888_REV,    /* Name */
      "MESA_FORMAT_RGBX8888_REV",  /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
a224 9
      MESA_FORMAT_AL44,            /* Name */
      "MESA_FORMAT_AL44",          /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 4,                  /* Red/Green/Blue/AlphaBits */
      4, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
a278 9
      MESA_FORMAT_A16,             /* Name */
      "MESA_FORMAT_A16",           /* StrName */
      GL_ALPHA,                    /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 16,                 /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
a287 9
      MESA_FORMAT_L16,             /* Name */
      "MESA_FORMAT_L16",           /* StrName */
      GL_LUMINANCE,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      16, 0, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
d297 4
a300 4
      MESA_FORMAT_I16,             /* Name */
      "MESA_FORMAT_I16",           /* StrName */
      GL_INTENSITY,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
d302 2
a303 2
      0, 16, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
d333 2
a334 2
      MESA_FORMAT_GR88,
      "MESA_FORMAT_GR88",
d342 2
a343 2
      MESA_FORMAT_RG88,
      "MESA_FORMAT_RG88",
d360 2
a361 2
      MESA_FORMAT_GR1616,
      "MESA_FORMAT_GR1616",
d369 2
a370 2
      MESA_FORMAT_RG1616,
      "MESA_FORMAT_RG1616",
a377 9
      MESA_FORMAT_ARGB2101010,
      "MESA_FORMAT_ARGB2101010",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
d381 1
a381 1
      GL_UNSIGNED_NORMALIZED,      /* DataType */
d390 1
a390 1
      GL_UNSIGNED_NORMALIZED,      /* DataType */
d399 1
a399 1
      GL_UNSIGNED_NORMALIZED,      /* DataType */
d408 1
a408 1
      GL_UNSIGNED_NORMALIZED,      /* DataType */
d417 1
a417 1
      GL_UNSIGNED_NORMALIZED,      /* DataType */
d426 1
a426 1
      GL_UNSIGNED_NORMALIZED,      /* DataType */
d634 1
a634 1
      GL_LUMINANCE,
d643 1
a643 1
      GL_LUMINANCE,
d685 2
d688 5
a692 5
      MESA_FORMAT_R_FLOAT32,
      "MESA_FORMAT_R_FLOAT32",
      GL_RED,
      GL_FLOAT,
      32, 0, 0, 0,
d697 5
a701 14
      MESA_FORMAT_R_FLOAT16,
      "MESA_FORMAT_R_FLOAT16",
      GL_RED,
      GL_FLOAT,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RG_FLOAT32,
      "MESA_FORMAT_RG_FLOAT32",
      GL_RG,
      GL_FLOAT,
      32, 32, 0, 0,
d706 5
a710 5
      MESA_FORMAT_RG_FLOAT16,
      "MESA_FORMAT_RG_FLOAT16",
      GL_RG,
      GL_FLOAT,
      16, 16, 0, 0,
d712 1
a712 1
      1, 1, 4
a714 1
   /* unnormalized signed int formats */
d717 3
a719 3
      MESA_FORMAT_ALPHA_UINT8,
      "MESA_FORMAT_ALPHA_UINT8",
      GL_ALPHA,
d721 1
a721 1
      0, 0, 0, 8,
d723 1
a723 1
      1, 1, 1
d726 3
a728 3
      MESA_FORMAT_ALPHA_UINT16,
      "MESA_FORMAT_ALPHA_UINT16",
      GL_ALPHA,
d730 1
a730 1
      0, 0, 0, 16,
d732 1
a732 1
      1, 1, 2
d735 3
a737 3
      MESA_FORMAT_ALPHA_UINT32,
      "MESA_FORMAT_ALPHA_UINT32",
      GL_ALPHA,
d739 1
a739 1
      0, 0, 0, 32,
d741 1
a741 1
      1, 1, 4
d743 2
d746 5
a750 5
      MESA_FORMAT_ALPHA_INT8,
      "MESA_FORMAT_ALPHA_INT8",
      GL_ALPHA,
      GL_INT,
      0, 0, 0, 8,
d752 12
a763 1
      1, 1, 1
d766 5
a770 5
      MESA_FORMAT_ALPHA_INT16,
      "MESA_FORMAT_ALPHA_INT16",
      GL_ALPHA,
      GL_INT,
      0, 0, 0, 16,
d775 5
a779 5
      MESA_FORMAT_ALPHA_INT32,
      "MESA_FORMAT_ALPHA_INT32",
      GL_ALPHA,
      GL_INT,
      0, 0, 0, 32,
d781 1
a781 1
      1, 1, 4
d784 7
a790 7
      MESA_FORMAT_INTENSITY_UINT8,
      "MESA_FORMAT_INTENSITY_UINT8",
      GL_INTENSITY,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
      1, 1, 1
d793 6
a798 15
      MESA_FORMAT_INTENSITY_UINT16,
      "MESA_FORMAT_INTENSITY_UINT16",
      GL_INTENSITY,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_INTENSITY_UINT32,
      "MESA_FORMAT_INTENSITY_UINT32",
      GL_INTENSITY,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      0, 32, 0, 0, 0,
d801 2
d804 6
a809 15
      MESA_FORMAT_INTENSITY_INT8,
      "MESA_FORMAT_INTENSITY_INT8",
      GL_INTENSITY,
      GL_INT,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_INTENSITY_INT16,
      "MESA_FORMAT_INTENSITY_INT16",
      GL_INTENSITY,
      GL_INT,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
d813 6
a818 6
      MESA_FORMAT_INTENSITY_INT32,
      "MESA_FORMAT_INTENSITY_INT32",
      GL_INTENSITY,
      GL_INT,
      0, 0, 0, 0,
      0, 32, 0, 0, 0,
d822 7
a828 7
      MESA_FORMAT_LUMINANCE_UINT8,
      "MESA_FORMAT_LUMINANCE_UINT8",
      GL_LUMINANCE,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
d831 7
a837 7
      MESA_FORMAT_LUMINANCE_UINT16,
      "MESA_FORMAT_LUMINANCE_UINT16",
      GL_LUMINANCE,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
d840 15
a854 867
      MESA_FORMAT_LUMINANCE_UINT32,
      "MESA_FORMAT_LUMINANCE_UINT32",
      GL_LUMINANCE,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      32, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LUMINANCE_INT8,
      "MESA_FORMAT_LUMINANCE_INT8",
      GL_LUMINANCE,
      GL_INT,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_LUMINANCE_INT16,
      "MESA_FORMAT_LUMINANCE_INT16",
      GL_LUMINANCE,
      GL_INT,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_LUMINANCE_INT32,
      "MESA_FORMAT_LUMINANCE_INT32",
      GL_LUMINANCE,
      GL_INT,
      0, 0, 0, 0,
      32, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LUMINANCE_ALPHA_UINT8,
      "MESA_FORMAT_LUMINANCE_ALPHA_UINT8",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_LUMINANCE_ALPHA_UINT16,
      "MESA_FORMAT_LUMINANCE_ALPHA_UINT16",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LUMINANCE_ALPHA_UINT32,
      "MESA_FORMAT_LUMINANCE_ALPHA_UINT32",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 32,
      32, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_LUMINANCE_ALPHA_INT8,
      "MESA_FORMAT_LUMINANCE_ALPHA_INT8",
      GL_LUMINANCE_ALPHA,
      GL_INT,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_LUMINANCE_ALPHA_INT16,
      "MESA_FORMAT_LUMINANCE_ALPHA_INT16",
      GL_LUMINANCE_ALPHA,
      GL_INT,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LUMINANCE_ALPHA_INT32,
      "MESA_FORMAT_LUMINANCE_ALPHA_INT32",
      GL_LUMINANCE_ALPHA,
      GL_INT,
      0, 0, 0, 32,
      32, 0, 0, 0, 0,
      1, 1, 8
   },

   {
      MESA_FORMAT_R_INT8,
      "MESA_FORMAT_R_INT8",
      GL_RED,
      GL_INT,
      8, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_RG_INT8,
      "MESA_FORMAT_RG_INT8",
      GL_RG,
      GL_INT,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RGB_INT8,
      "MESA_FORMAT_RGB_INT8",
      GL_RGB,
      GL_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 3
   },
   {
      MESA_FORMAT_RGBA_INT8,
      "MESA_FORMAT_RGBA_INT8",
      GL_RGBA,
      GL_INT,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R_INT16,
      "MESA_FORMAT_R_INT16",
      GL_RED,
      GL_INT,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RG_INT16,
      "MESA_FORMAT_RG_INT16",
      GL_RG,
      GL_INT,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGB_INT16,
      "MESA_FORMAT_RGB_INT16",
      GL_RGB,
      GL_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGBA_INT16,
      "MESA_FORMAT_RGBA_INT16",
      GL_RGBA,
      GL_INT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_R_INT32,
      "MESA_FORMAT_R_INT32",
      GL_RED,
      GL_INT,
      32, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_INT32,
      "MESA_FORMAT_RG_INT32",
      GL_RG,
      GL_INT,
      32, 32, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGB_INT32,
      "MESA_FORMAT_RGB_INT32",
      GL_RGB,
      GL_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 12
   },
   {
      MESA_FORMAT_RGBA_INT32,
      "MESA_FORMAT_RGBA_INT32",
      GL_RGBA,
      GL_INT,
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_R_UINT8,
      "MESA_FORMAT_R_UINT8",
      GL_RED,
      GL_UNSIGNED_INT,
      8, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_RG_UINT8,
      "MESA_FORMAT_RG_UINT8",
      GL_RG,
      GL_UNSIGNED_INT,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RGB_UINT8,
      "MESA_FORMAT_RGB_UINT8",
      GL_RGB,
      GL_UNSIGNED_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 3
   },
   {
      MESA_FORMAT_RGBA_UINT8,
      "MESA_FORMAT_RGBA_UINT8",
      GL_RGBA,
      GL_UNSIGNED_INT,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R_UINT16,
      "MESA_FORMAT_R_UINT16",
      GL_RED,
      GL_UNSIGNED_INT,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RG_UINT16,
      "MESA_FORMAT_RG_UINT16",
      GL_RG,
      GL_UNSIGNED_INT,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGB_UINT16,
      "MESA_FORMAT_RGB_UINT16",
      GL_RGB,
      GL_UNSIGNED_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGBA_UINT16,
      "MESA_FORMAT_RGBA_UINT16",
      GL_RGBA,
      GL_UNSIGNED_INT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_R_UINT32,
      "MESA_FORMAT_R_UINT32",
      GL_RED,
      GL_UNSIGNED_INT,
      32, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_UINT32,
      "MESA_FORMAT_RG_UINT32",
      GL_RG,
      GL_UNSIGNED_INT,
      32, 32, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGB_UINT32,
      "MESA_FORMAT_RGB_UINT32",
      GL_RGB,
      GL_UNSIGNED_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 12
   },
   {
      MESA_FORMAT_RGBA_UINT32,
      "MESA_FORMAT_RGBA_UINT32",
      GL_RGBA,
      GL_UNSIGNED_INT,
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
   },


   {
      MESA_FORMAT_DUDV8,
      "MESA_FORMAT_DUDV8",
      GL_DUDV_ATI,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },

   /* Signed 8 bits / channel */
   {
      MESA_FORMAT_SIGNED_R8,        /* Name */
      "MESA_FORMAT_SIGNED_R8",      /* StrName */
      GL_RED,                       /* BaseFormat */
      GL_SIGNED_NORMALIZED,         /* DataType */
      8, 0, 0, 0,                   /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,                /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                       /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_SIGNED_RG88_REV,
      "MESA_FORMAT_SIGNED_RG88_REV",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_SIGNED_RGBX8888,
      "MESA_FORMAT_SIGNED_RGBX8888",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4                       /* 4 bpp, but no alpha */
   },
   {
      MESA_FORMAT_SIGNED_RGBA8888,
      "MESA_FORMAT_SIGNED_RGBA8888",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_SIGNED_RGBA8888_REV,
      "MESA_FORMAT_SIGNED_RGBA8888_REV",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },

   /* Signed 16 bits / channel */
   {
      MESA_FORMAT_SIGNED_R16,
      "MESA_FORMAT_SIGNED_R16",
      GL_RED,
      GL_SIGNED_NORMALIZED,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_SIGNED_GR1616,
      "MESA_FORMAT_SIGNED_GR1616",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_SIGNED_RGB_16,
      "MESA_FORMAT_SIGNED_RGB_16",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_SIGNED_RGBA_16,
      "MESA_FORMAT_SIGNED_RGBA_16",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBA_16,
      "MESA_FORMAT_RGBA_16",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
     MESA_FORMAT_RED_RGTC1,
     "MESA_FORMAT_RED_RGTC1",
     GL_RED,
     GL_UNSIGNED_NORMALIZED,
     8, 0, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_SIGNED_RED_RGTC1,
     "MESA_FORMAT_SIGNED_RED_RGTC1",
     GL_RED,
     GL_SIGNED_NORMALIZED,
     8, 0, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_RG_RGTC2,
     "MESA_FORMAT_RG_RGTC2",
     GL_RG,
     GL_UNSIGNED_NORMALIZED,
     8, 8, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_SIGNED_RG_RGTC2,
     "MESA_FORMAT_SIGNED_RG_RGTC2",
     GL_RG,
     GL_SIGNED_NORMALIZED,
     8, 8, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_L_LATC1,
     "MESA_FORMAT_L_LATC1",
     GL_LUMINANCE,
     GL_UNSIGNED_NORMALIZED,
     0, 0, 0, 0,
     4, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_SIGNED_L_LATC1,
     "MESA_FORMAT_SIGNED_L_LATC1",
     GL_LUMINANCE,
     GL_SIGNED_NORMALIZED,
     0, 0, 0, 0,
     4, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_LA_LATC2,
     "MESA_FORMAT_LA_LATC2",
     GL_LUMINANCE_ALPHA,
     GL_UNSIGNED_NORMALIZED,
     0, 0, 0, 4,
     4, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_SIGNED_LA_LATC2,
     "MESA_FORMAT_SIGNED_LA_LATC2",
     GL_LUMINANCE_ALPHA,
     GL_SIGNED_NORMALIZED,
     0, 0, 0, 4,
     4, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },

   {
      MESA_FORMAT_ETC1_RGB8,
      "MESA_FORMAT_ETC1_RGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },

   {
      MESA_FORMAT_ETC2_RGB8,
      "MESA_FORMAT_ETC2_RGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },

   {
      MESA_FORMAT_ETC2_SRGB8,
      "MESA_FORMAT_ETC2_SRGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },

   {
      MESA_FORMAT_ETC2_RGBA8_EAC,
      "MESA_FORMAT_ETC2_RGBA8_EAC",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },

   {
      MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC,
      "MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },

   {
      MESA_FORMAT_ETC2_R11_EAC,
      "MESA_FORMAT_ETC2_R11_EAC",
      GL_RED,
      GL_UNSIGNED_NORMALIZED,
      11, 0, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                    /* 8 bytes per 4x4 block */
   },

   {
      MESA_FORMAT_ETC2_RG11_EAC,
      "MESA_FORMAT_ETC2_RG11_EAC",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      11, 11, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },

   {
      MESA_FORMAT_ETC2_SIGNED_R11_EAC,
      "MESA_FORMAT_ETC2_SIGNED_R11_EAC",
      GL_RED,
      GL_SIGNED_NORMALIZED,
      11, 0, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                    /* 8 bytes per 4x4 block */
   },

   {
      MESA_FORMAT_ETC2_SIGNED_RG11_EAC,
      "MESA_FORMAT_ETC2_SIGNED_RG11_EAC",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      11, 11, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },

   {
      MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1,
      "MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 1,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },

   {
      MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1,
      "MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 1,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },

   /* Signed formats from EXT_texture_snorm that are not in GL3.1 */
   {
      MESA_FORMAT_SIGNED_A8,
      "MESA_FORMAT_SIGNED_A8",
      GL_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 8,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_SIGNED_L8,
      "MESA_FORMAT_SIGNED_L8",
      GL_LUMINANCE,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_SIGNED_AL88,
      "MESA_FORMAT_SIGNED_AL88",
      GL_LUMINANCE_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_SIGNED_I8,
      "MESA_FORMAT_SIGNED_I8",
      GL_INTENSITY,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_SIGNED_A16,
      "MESA_FORMAT_SIGNED_A16",
      GL_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 16,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_SIGNED_L16,
      "MESA_FORMAT_SIGNED_L16",
      GL_LUMINANCE,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_SIGNED_AL1616,
      "MESA_FORMAT_SIGNED_AL1616",
      GL_LUMINANCE_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_SIGNED_I16,
      "MESA_FORMAT_SIGNED_I16",
      GL_INTENSITY,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RGB9_E5_FLOAT,
      "MESA_FORMAT_RGB9_E5",
      GL_RGB,
      GL_FLOAT,
      9, 9, 9, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R11_G11_B10_FLOAT,
      "MESA_FORMAT_R11_G11_B10_FLOAT",
      GL_RGB,
      GL_FLOAT,
      11, 11, 10, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   /* ARB_depth_buffer_float */
   {
      MESA_FORMAT_Z32_FLOAT,       /* Name */
      "MESA_FORMAT_Z32_FLOAT",     /* StrName */
      GL_DEPTH_COMPONENT,          /* BaseFormat */
      GL_FLOAT,                    /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_Z32_FLOAT_X24S8, /* Name */
      "MESA_FORMAT_Z32_FLOAT_X24S8", /* StrName */
      GL_DEPTH_STENCIL,            /* BaseFormat */
      /* DataType here is used to answer GL_TEXTURE_DEPTH_TYPE queries, and is
       * never used for stencil because stencil is always GL_UNSIGNED_INT.
       */
      GL_FLOAT,                    /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 8,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 8                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_ARGB2101010_UINT,
      "MESA_FORMAT_ARGB2101010_UINT",
      GL_RGBA,
      GL_UNSIGNED_INT,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_ABGR2101010_UINT,
      "MESA_FORMAT_ABGR2101010_UINT",
      GL_RGBA,
      GL_UNSIGNED_INT,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_XRGB4444_UNORM,
      "MESA_FORMAT_XRGB4444_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_XRGB1555_UNORM,
      "MESA_FORMAT_XRGB1555_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      5, 5, 5, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_XBGR8888_SNORM,
      "MESA_FORMAT_XBGR8888_SNORM",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_XBGR8888_SRGB,
      "MESA_FORMAT_XBGR8888_SRGB",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_XBGR8888_UINT,
      "MESA_FORMAT_XBGR8888_UINT",
      GL_RGB,
      GL_UNSIGNED_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_XBGR8888_SINT,
      "MESA_FORMAT_XBGR8888_SINT",
      GL_RGB,
      GL_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_XRGB2101010_UNORM,
      "MESA_FORMAT_XRGB2101010_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      10, 10, 10, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_XBGR16161616_UNORM,
      "MESA_FORMAT_XBGR16161616_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_XBGR16161616_SNORM,
      "MESA_FORMAT_XBGR16161616_SNORM",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_XBGR16161616_FLOAT,
      "MESA_FORMAT_XBGR16161616_FLOAT",
      GL_RGB,
      GL_FLOAT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_XBGR16161616_UINT,
      "MESA_FORMAT_XBGR16161616_UINT",
      GL_RGB,
      GL_UNSIGNED_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_XBGR16161616_SINT,
      "MESA_FORMAT_XBGR16161616_SINT",
      GL_RGB,
      GL_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_XBGR32323232_FLOAT,
      "MESA_FORMAT_XBGR32323232_FLOAT",
      GL_RGB,
      GL_FLOAT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_XBGR32323232_UINT,
      "MESA_FORMAT_XBGR32323232_UINT",
      GL_RGB,
      GL_UNSIGNED_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_XBGR32323232_SINT,
      "MESA_FORMAT_XBGR32323232_SINT",
      GL_RGB,
      GL_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
};



static const struct gl_format_info *
_mesa_get_format_info(gl_format format)
{
d861 8
a868 856
/** Return string name of format (for debugging) */
const char *
_mesa_get_format_name(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return info->StrName;
}



/**
 * Return bytes needed to store a block of pixels in the given format.
 * Normally, a block is 1x1 (a single pixel).  But for compressed formats
 * a block may be 4x4 or 8x4, etc.
 *
 * Note: not GLuint, so as not to coerce math to unsigned. cf. fdo #37351
 */
GLint
_mesa_get_format_bytes(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   ASSERT(info->BytesPerBlock);
   ASSERT(info->BytesPerBlock <= MAX_PIXEL_BYTES ||
          _mesa_is_format_compressed(format));
   return info->BytesPerBlock;
}


/**
 * Return bits per component for the given format.
 * \param format  one of MESA_FORMAT_x
 * \param pname  the component, such as GL_RED_BITS, GL_TEXTURE_BLUE_BITS, etc.
 */
GLint
_mesa_get_format_bits(gl_format format, GLenum pname)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);

   switch (pname) {
   case GL_RED_BITS:
   case GL_TEXTURE_RED_SIZE:
   case GL_RENDERBUFFER_RED_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE:
      return info->RedBits;
   case GL_GREEN_BITS:
   case GL_TEXTURE_GREEN_SIZE:
   case GL_RENDERBUFFER_GREEN_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:
      return info->GreenBits;
   case GL_BLUE_BITS:
   case GL_TEXTURE_BLUE_SIZE:
   case GL_RENDERBUFFER_BLUE_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:
      return info->BlueBits;
   case GL_ALPHA_BITS:
   case GL_TEXTURE_ALPHA_SIZE:
   case GL_RENDERBUFFER_ALPHA_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:
      return info->AlphaBits;
   case GL_TEXTURE_INTENSITY_SIZE:
      return info->IntensityBits;
   case GL_TEXTURE_LUMINANCE_SIZE:
      return info->LuminanceBits;
   case GL_INDEX_BITS:
      return info->IndexBits;
   case GL_DEPTH_BITS:
   case GL_TEXTURE_DEPTH_SIZE_ARB:
   case GL_RENDERBUFFER_DEPTH_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:
      return info->DepthBits;
   case GL_STENCIL_BITS:
   case GL_TEXTURE_STENCIL_SIZE_EXT:
   case GL_RENDERBUFFER_STENCIL_SIZE_EXT:
   case GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:
      return info->StencilBits;
   default:
      _mesa_problem(NULL, "bad pname in _mesa_get_format_bits()");
      return 0;
   }
}


GLuint
_mesa_get_format_max_bits(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   GLuint max = MAX2(info->RedBits, info->GreenBits);
   max = MAX2(max, info->BlueBits);
   max = MAX2(max, info->AlphaBits);
   max = MAX2(max, info->LuminanceBits);
   max = MAX2(max, info->IntensityBits);
   max = MAX2(max, info->DepthBits);
   max = MAX2(max, info->StencilBits);
   return max;
}


/**
 * Return the data type (or more specifically, the data representation)
 * for the given format.
 * The return value will be one of:
 *    GL_UNSIGNED_NORMALIZED = unsigned int representing [0,1]
 *    GL_SIGNED_NORMALIZED = signed int representing [-1, 1]
 *    GL_UNSIGNED_INT = an ordinary unsigned integer
 *    GL_INT = an ordinary signed integer
 *    GL_FLOAT = an ordinary float
 */
GLenum
_mesa_get_format_datatype(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return info->DataType;
}


/**
 * Return the basic format for the given type.  The result will be one of
 * GL_RGB, GL_RGBA, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY,
 * GL_YCBCR_MESA, GL_DEPTH_COMPONENT, GL_STENCIL_INDEX, GL_DEPTH_STENCIL.
 */
GLenum
_mesa_get_format_base_format(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return info->BaseFormat;
}


/**
 * Return the block size (in pixels) for the given format.  Normally
 * the block size is 1x1.  But compressed formats will have block sizes
 * of 4x4 or 8x4 pixels, etc.
 * \param bw  returns block width in pixels
 * \param bh  returns block height in pixels
 */
void
_mesa_get_format_block_size(gl_format format, GLuint *bw, GLuint *bh)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   *bw = info->BlockWidth;
   *bh = info->BlockHeight;
}


/** Is the given format a compressed format? */
GLboolean
_mesa_is_format_compressed(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return info->BlockWidth > 1 || info->BlockHeight > 1;
}


/**
 * Determine if the given format represents a packed depth/stencil buffer.
 */
GLboolean
_mesa_is_format_packed_depth_stencil(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);

   return info->BaseFormat == GL_DEPTH_STENCIL;
}


/**
 * Is the given format a signed/unsigned integer color format?
 */
GLboolean
_mesa_is_format_integer_color(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return (info->DataType == GL_INT || info->DataType == GL_UNSIGNED_INT) &&
      info->BaseFormat != GL_DEPTH_COMPONENT &&
      info->BaseFormat != GL_DEPTH_STENCIL &&
      info->BaseFormat != GL_STENCIL_INDEX;
}


/**
 * Is the given format an unsigned integer format?
 */
GLboolean
_mesa_is_format_unsigned(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return _mesa_is_type_unsigned(info->DataType);
}


/**
 * Return color encoding for given format.
 * \return GL_LINEAR or GL_SRGB
 */
GLenum
_mesa_get_format_color_encoding(gl_format format)
{
   /* XXX this info should be encoded in gl_format_info */
   switch (format) {
   case MESA_FORMAT_SRGB8:
   case MESA_FORMAT_SRGBA8:
   case MESA_FORMAT_SARGB8:
   case MESA_FORMAT_SL8:
   case MESA_FORMAT_SLA8:
   case MESA_FORMAT_SRGB_DXT1:
   case MESA_FORMAT_SRGBA_DXT1:
   case MESA_FORMAT_SRGBA_DXT3:
   case MESA_FORMAT_SRGBA_DXT5:
   case MESA_FORMAT_XBGR8888_SRGB:
      return GL_SRGB;
   default:
      return GL_LINEAR;
   }
}


/**
 * For an sRGB format, return the corresponding linear color space format.
 * For non-sRGB formats, return the format as-is.
 */
gl_format
_mesa_get_srgb_format_linear(gl_format format)
{
   switch (format) {
   case MESA_FORMAT_SRGB8:
      format = MESA_FORMAT_RGB888;
      break;
   case MESA_FORMAT_SRGBA8:
      format = MESA_FORMAT_RGBA8888;
      break;
   case MESA_FORMAT_SARGB8:
      format = MESA_FORMAT_ARGB8888;
      break;
   case MESA_FORMAT_SL8:
      format = MESA_FORMAT_L8;
      break;
   case MESA_FORMAT_SLA8:
      format = MESA_FORMAT_AL88;
      break;
   case MESA_FORMAT_SRGB_DXT1:
      format = MESA_FORMAT_RGB_DXT1;
      break;
   case MESA_FORMAT_SRGBA_DXT1:
      format = MESA_FORMAT_RGBA_DXT1;
      break;
   case MESA_FORMAT_SRGBA_DXT3:
      format = MESA_FORMAT_RGBA_DXT3;
      break;
   case MESA_FORMAT_SRGBA_DXT5:
      format = MESA_FORMAT_RGBA_DXT5;
      break;
   case MESA_FORMAT_XBGR8888_SRGB:
      format = MESA_FORMAT_RGBX8888_REV;
      break;
   default:
      break;
   }
   return format;
}


/**
 * If the given format is a compressed format, return a corresponding
 * uncompressed format.
 */
gl_format
_mesa_get_uncompressed_format(gl_format format)
{
   switch (format) {
   case MESA_FORMAT_RGB_FXT1:
      return MESA_FORMAT_RGB888;
   case MESA_FORMAT_RGBA_FXT1:
      return MESA_FORMAT_RGBA8888;
   case MESA_FORMAT_RGB_DXT1:
   case MESA_FORMAT_SRGB_DXT1:
      return MESA_FORMAT_RGB888;
   case MESA_FORMAT_RGBA_DXT1:
   case MESA_FORMAT_SRGBA_DXT1:
      return MESA_FORMAT_RGBA8888;
   case MESA_FORMAT_RGBA_DXT3:
   case MESA_FORMAT_SRGBA_DXT3:
      return MESA_FORMAT_RGBA8888;
   case MESA_FORMAT_RGBA_DXT5:
   case MESA_FORMAT_SRGBA_DXT5:
      return MESA_FORMAT_RGBA8888;
   case MESA_FORMAT_RED_RGTC1:
      return MESA_FORMAT_R8;
   case MESA_FORMAT_SIGNED_RED_RGTC1:
      return MESA_FORMAT_SIGNED_R8;
   case MESA_FORMAT_RG_RGTC2:
      return MESA_FORMAT_GR88;
   case MESA_FORMAT_SIGNED_RG_RGTC2:
      return MESA_FORMAT_SIGNED_RG88_REV;
   case MESA_FORMAT_L_LATC1:
      return MESA_FORMAT_L8;
   case MESA_FORMAT_SIGNED_L_LATC1:
      return MESA_FORMAT_SIGNED_L8;
   case MESA_FORMAT_LA_LATC2:
      return MESA_FORMAT_AL88;
   case MESA_FORMAT_SIGNED_LA_LATC2:
      return MESA_FORMAT_SIGNED_AL88;
   case MESA_FORMAT_ETC1_RGB8:
   case MESA_FORMAT_ETC2_RGB8:
   case MESA_FORMAT_ETC2_SRGB8:
      return MESA_FORMAT_RGB888;
   case MESA_FORMAT_ETC2_RGBA8_EAC:
   case MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC:
   case MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1:
   case MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1:
      return MESA_FORMAT_RGBA8888;
   case MESA_FORMAT_ETC2_R11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_R11_EAC:
      return MESA_FORMAT_R16;
   case MESA_FORMAT_ETC2_RG11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_RG11_EAC:
      return MESA_FORMAT_GR1616;
   default:
#ifdef DEBUG
      assert(!_mesa_is_format_compressed(format));
#endif
      return format;
   }
}


GLuint
_mesa_format_num_components(gl_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return ((info->RedBits > 0) +
           (info->GreenBits > 0) +
           (info->BlueBits > 0) +
           (info->AlphaBits > 0) +
           (info->LuminanceBits > 0) +
           (info->IntensityBits > 0) +
           (info->DepthBits > 0) +
           (info->StencilBits > 0));
}


/**
 * Return number of bytes needed to store an image of the given size
 * in the given format.
 */
GLuint
_mesa_format_image_size(gl_format format, GLsizei width,
                        GLsizei height, GLsizei depth)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   /* Strictly speaking, a conditional isn't needed here */
   if (info->BlockWidth > 1 || info->BlockHeight > 1) {
      /* compressed format (2D only for now) */
      const GLuint bw = info->BlockWidth, bh = info->BlockHeight;
      const GLuint wblocks = (width + bw - 1) / bw;
      const GLuint hblocks = (height + bh - 1) / bh;
      const GLuint sz = wblocks * hblocks * info->BytesPerBlock;
      return sz * depth;
   }
   else {
      /* non-compressed */
      const GLuint sz = width * height * depth * info->BytesPerBlock;
      return sz;
   }
}


/**
 * Same as _mesa_format_image_size() but returns a 64-bit value to
 * accomodate very large textures.
 */
uint64_t
_mesa_format_image_size64(gl_format format, GLsizei width,
                          GLsizei height, GLsizei depth)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   /* Strictly speaking, a conditional isn't needed here */
   if (info->BlockWidth > 1 || info->BlockHeight > 1) {
      /* compressed format (2D only for now) */
      const uint64_t bw = info->BlockWidth, bh = info->BlockHeight;
      const uint64_t wblocks = (width + bw - 1) / bw;
      const uint64_t hblocks = (height + bh - 1) / bh;
      const uint64_t sz = wblocks * hblocks * info->BytesPerBlock;
      return sz * depth;
   }
   else {
      /* non-compressed */
      const uint64_t sz = ((uint64_t) width *
                           (uint64_t) height *
                           (uint64_t) depth *
                           info->BytesPerBlock);
      return sz;
   }
}



GLint
_mesa_format_row_stride(gl_format format, GLsizei width)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   /* Strictly speaking, a conditional isn't needed here */
   if (info->BlockWidth > 1 || info->BlockHeight > 1) {
      /* compressed format */
      const GLuint bw = info->BlockWidth;
      const GLuint wblocks = (width + bw - 1) / bw;
      const GLint stride = wblocks * info->BytesPerBlock;
      return stride;
   }
   else {
      const GLint stride = width * info->BytesPerBlock;
      return stride;
   }
}


/**
 * Debug/test: check that all formats are handled in the
 * _mesa_format_to_type_and_comps() function.  When new pixel formats
 * are added to Mesa, that function needs to be updated.
 * This is a no-op after the first call.
 */
static void
check_format_to_type_and_comps(void)
{
   gl_format f;

   for (f = MESA_FORMAT_NONE + 1; f < MESA_FORMAT_COUNT; f++) {
      GLenum datatype = 0;
      GLuint comps = 0;
      /* This function will emit a problem/warning if the format is
       * not handled.
       */
      _mesa_format_to_type_and_comps(f, &datatype, &comps);
   }
}


/**
 * Do sanity checking of the format info table.
 */
void
_mesa_test_formats(void)
{
   GLuint i;

   STATIC_ASSERT(Elements(format_info) == MESA_FORMAT_COUNT);

   for (i = 0; i < MESA_FORMAT_COUNT; i++) {
      const struct gl_format_info *info = _mesa_get_format_info(i);
      assert(info);

      assert(info->Name == i);

      if (info->Name == MESA_FORMAT_NONE)
         continue;

      if (info->BlockWidth == 1 && info->BlockHeight == 1) {
         if (info->RedBits > 0) {
            GLuint t = info->RedBits + info->GreenBits
               + info->BlueBits + info->AlphaBits;
            assert(t / 8 <= info->BytesPerBlock);
            (void) t;
         }
      }

      assert(info->DataType == GL_UNSIGNED_NORMALIZED ||
             info->DataType == GL_SIGNED_NORMALIZED ||
             info->DataType == GL_UNSIGNED_INT ||
             info->DataType == GL_INT ||
             info->DataType == GL_FLOAT ||
             /* Z32_FLOAT_X24S8 has DataType of GL_NONE */
             info->DataType == GL_NONE);

      if (info->BaseFormat == GL_RGB) {
         assert(info->RedBits > 0);
         assert(info->GreenBits > 0);
         assert(info->BlueBits > 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_RGBA) {
         assert(info->RedBits > 0);
         assert(info->GreenBits > 0);
         assert(info->BlueBits > 0);
         assert(info->AlphaBits > 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_RG) {
         assert(info->RedBits > 0);
         assert(info->GreenBits > 0);
         assert(info->BlueBits == 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_RED) {
         assert(info->RedBits > 0);
         assert(info->GreenBits == 0);
         assert(info->BlueBits == 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_LUMINANCE) {
         assert(info->RedBits == 0);
         assert(info->GreenBits == 0);
         assert(info->BlueBits == 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits > 0);
         assert(info->IntensityBits == 0);
      }
      else if (info->BaseFormat == GL_INTENSITY) {
         assert(info->RedBits == 0);
         assert(info->GreenBits == 0);
         assert(info->BlueBits == 0);
         assert(info->AlphaBits == 0);
         assert(info->LuminanceBits == 0);
         assert(info->IntensityBits > 0);
      }
   }

   check_format_to_type_and_comps();
}



/**
 * Return datatype and number of components per texel for the given gl_format.
 * Only used for mipmap generation code.
 */
void
_mesa_format_to_type_and_comps(gl_format format,
                               GLenum *datatype, GLuint *comps)
{
   switch (format) {
   case MESA_FORMAT_RGBA8888:
   case MESA_FORMAT_RGBA8888_REV:
   case MESA_FORMAT_ARGB8888:
   case MESA_FORMAT_ARGB8888_REV:
   case MESA_FORMAT_RGBX8888:
   case MESA_FORMAT_RGBX8888_REV:
   case MESA_FORMAT_XRGB8888:
   case MESA_FORMAT_XRGB8888_REV:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;
   case MESA_FORMAT_RGB888:
   case MESA_FORMAT_BGR888:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 3;
      return;
   case MESA_FORMAT_RGB565:
   case MESA_FORMAT_RGB565_REV:
      *datatype = GL_UNSIGNED_SHORT_5_6_5;
      *comps = 3;
      return;

   case MESA_FORMAT_ARGB4444:
   case MESA_FORMAT_ARGB4444_REV:
   case MESA_FORMAT_XRGB4444_UNORM:
      *datatype = GL_UNSIGNED_SHORT_4_4_4_4;
      *comps = 4;
      return;

   case MESA_FORMAT_ARGB1555:
   case MESA_FORMAT_ARGB1555_REV:
   case MESA_FORMAT_XRGB1555_UNORM:
      *datatype = GL_UNSIGNED_SHORT_1_5_5_5_REV;
      *comps = 4;
      return;

   case MESA_FORMAT_ARGB2101010:
      *datatype = GL_UNSIGNED_INT_2_10_10_10_REV;
      *comps = 4;
      return;

   case MESA_FORMAT_RGBA5551:
      *datatype = GL_UNSIGNED_SHORT_5_5_5_1;
      *comps = 4;
      return;

   case MESA_FORMAT_AL44:
      *datatype = MESA_UNSIGNED_BYTE_4_4;
      *comps = 2;
      return;

   case MESA_FORMAT_AL88:
   case MESA_FORMAT_AL88_REV:
   case MESA_FORMAT_GR88:
   case MESA_FORMAT_RG88:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 2;
      return;

   case MESA_FORMAT_AL1616:
   case MESA_FORMAT_AL1616_REV:
   case MESA_FORMAT_GR1616:
   case MESA_FORMAT_RG1616:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 2;
      return;

   case MESA_FORMAT_R16:
   case MESA_FORMAT_A16:
   case MESA_FORMAT_L16:
   case MESA_FORMAT_I16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 1;
      return;

   case MESA_FORMAT_RGB332:
      *datatype = GL_UNSIGNED_BYTE_3_3_2;
      *comps = 3;
      return;

   case MESA_FORMAT_A8:
   case MESA_FORMAT_L8:
   case MESA_FORMAT_I8:
   case MESA_FORMAT_R8:
   case MESA_FORMAT_S8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 1;
      return;

   case MESA_FORMAT_YCBCR:
   case MESA_FORMAT_YCBCR_REV:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 2;
      return;

   case MESA_FORMAT_Z24_S8:
      *datatype = GL_UNSIGNED_INT_24_8_MESA;
      *comps = 2;
      return;

   case MESA_FORMAT_S8_Z24:
      *datatype = GL_UNSIGNED_INT_8_24_REV_MESA;
      *comps = 2;
      return;

   case MESA_FORMAT_Z16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 1;
      return;

   case MESA_FORMAT_X8_Z24:
      *datatype = GL_UNSIGNED_INT;
      *comps = 1;
      return;

   case MESA_FORMAT_Z24_X8:
      *datatype = GL_UNSIGNED_INT;
      *comps = 1;
      return;

   case MESA_FORMAT_Z32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 1;
      return;

   case MESA_FORMAT_Z32_FLOAT:
      *datatype = GL_FLOAT;
      *comps = 1;
      return;

   case MESA_FORMAT_Z32_FLOAT_X24S8:
      *datatype = GL_FLOAT_32_UNSIGNED_INT_24_8_REV;
      *comps = 1;
      return;

   case MESA_FORMAT_DUDV8:
      *datatype = GL_BYTE;
      *comps = 2;
      return;

   case MESA_FORMAT_SIGNED_R8:
   case MESA_FORMAT_SIGNED_A8:
   case MESA_FORMAT_SIGNED_L8:
   case MESA_FORMAT_SIGNED_I8:
      *datatype = GL_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_SIGNED_RG88_REV:
   case MESA_FORMAT_SIGNED_AL88:
      *datatype = GL_BYTE;
      *comps = 2;
      return;
   case MESA_FORMAT_SIGNED_RGBA8888:
   case MESA_FORMAT_SIGNED_RGBA8888_REV:
   case MESA_FORMAT_SIGNED_RGBX8888:
      *datatype = GL_BYTE;
      *comps = 4;
      return;

   case MESA_FORMAT_RGBA_16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 4;
      return;

   case MESA_FORMAT_SIGNED_R16:
   case MESA_FORMAT_SIGNED_A16:
   case MESA_FORMAT_SIGNED_L16:
   case MESA_FORMAT_SIGNED_I16:
      *datatype = GL_SHORT;
      *comps = 1;
      return;
   case MESA_FORMAT_SIGNED_GR1616:
   case MESA_FORMAT_SIGNED_AL1616:
      *datatype = GL_SHORT;
      *comps = 2;
      return;
   case MESA_FORMAT_SIGNED_RGB_16:
      *datatype = GL_SHORT;
      *comps = 3;
      return;
   case MESA_FORMAT_SIGNED_RGBA_16:
      *datatype = GL_SHORT;
      *comps = 4;
      return;

   case MESA_FORMAT_SRGB8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 3;
      return;
   case MESA_FORMAT_SRGBA8:
   case MESA_FORMAT_SARGB8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;
   case MESA_FORMAT_SL8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_SLA8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 2;
      return;

   case MESA_FORMAT_RGB_FXT1:
   case MESA_FORMAT_RGBA_FXT1:
   case MESA_FORMAT_RGB_DXT1:
   case MESA_FORMAT_RGBA_DXT1:
   case MESA_FORMAT_RGBA_DXT3:
   case MESA_FORMAT_RGBA_DXT5:
   case MESA_FORMAT_SRGB_DXT1:
   case MESA_FORMAT_SRGBA_DXT1:
   case MESA_FORMAT_SRGBA_DXT3:
   case MESA_FORMAT_SRGBA_DXT5:
   case MESA_FORMAT_RED_RGTC1:
   case MESA_FORMAT_SIGNED_RED_RGTC1:
   case MESA_FORMAT_RG_RGTC2:
   case MESA_FORMAT_SIGNED_RG_RGTC2:
   case MESA_FORMAT_L_LATC1:
   case MESA_FORMAT_SIGNED_L_LATC1:
   case MESA_FORMAT_LA_LATC2:
   case MESA_FORMAT_SIGNED_LA_LATC2:
   case MESA_FORMAT_ETC1_RGB8:
   case MESA_FORMAT_ETC2_RGB8:
   case MESA_FORMAT_ETC2_SRGB8:
   case MESA_FORMAT_ETC2_RGBA8_EAC:
   case MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC:
   case MESA_FORMAT_ETC2_R11_EAC:
   case MESA_FORMAT_ETC2_RG11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_R11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_RG11_EAC:
   case MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1:
   case MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1:
      /* XXX generate error instead? */
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 0;
      return;

   case MESA_FORMAT_RGBA_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 4;
      return;
   case MESA_FORMAT_RGBA_FLOAT16:
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 4;
      return;
   case MESA_FORMAT_RGB_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 3;
      return;
   case MESA_FORMAT_RGB_FLOAT16:
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 3;
      return;
   case MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32:
   case MESA_FORMAT_RG_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 2;
      return;
   case MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16:
   case MESA_FORMAT_RG_FLOAT16:
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 2;
      return;
   case MESA_FORMAT_ALPHA_FLOAT32:
   case MESA_FORMAT_LUMINANCE_FLOAT32:
   case MESA_FORMAT_INTENSITY_FLOAT32:
   case MESA_FORMAT_R_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 1;
      return;
   case MESA_FORMAT_ALPHA_FLOAT16:
   case MESA_FORMAT_LUMINANCE_FLOAT16:
   case MESA_FORMAT_INTENSITY_FLOAT16:
   case MESA_FORMAT_R_FLOAT16:
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 1;
      return;

   case MESA_FORMAT_ALPHA_UINT8:
   case MESA_FORMAT_LUMINANCE_UINT8:
   case MESA_FORMAT_INTENSITY_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_LUMINANCE_ALPHA_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 2;
      return;

   case MESA_FORMAT_ALPHA_UINT16:
   case MESA_FORMAT_LUMINANCE_UINT16:
   case MESA_FORMAT_INTENSITY_UINT16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 1;
      return;
   case MESA_FORMAT_LUMINANCE_ALPHA_UINT16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 2;
      return;
   case MESA_FORMAT_ALPHA_UINT32:
   case MESA_FORMAT_LUMINANCE_UINT32:
   case MESA_FORMAT_INTENSITY_UINT32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 1;
      return;
   case MESA_FORMAT_LUMINANCE_ALPHA_UINT32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 2;
      return;
   case MESA_FORMAT_ALPHA_INT8:
   case MESA_FORMAT_LUMINANCE_INT8:
   case MESA_FORMAT_INTENSITY_INT8:
      *datatype = GL_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_LUMINANCE_ALPHA_INT8:
      *datatype = GL_BYTE;
      *comps = 2;
      return;
a869 10
   case MESA_FORMAT_ALPHA_INT16:
   case MESA_FORMAT_LUMINANCE_INT16:
   case MESA_FORMAT_INTENSITY_INT16:
      *datatype = GL_SHORT;
      *comps = 1;
      return;
   case MESA_FORMAT_LUMINANCE_ALPHA_INT16:
      *datatype = GL_SHORT;
      *comps = 2;
      return;
a870 10
   case MESA_FORMAT_ALPHA_INT32:
   case MESA_FORMAT_LUMINANCE_INT32:
   case MESA_FORMAT_INTENSITY_INT32:
      *datatype = GL_INT;
      *comps = 1;
      return;
   case MESA_FORMAT_LUMINANCE_ALPHA_INT32:
      *datatype = GL_INT;
      *comps = 2;
      return;
d872 14
a885 48
   case MESA_FORMAT_R_INT8:
      *datatype = GL_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_RG_INT8:
      *datatype = GL_BYTE;
      *comps = 2;
      return;
   case MESA_FORMAT_RGB_INT8:
      *datatype = GL_BYTE;
      *comps = 3;
      return;
   case MESA_FORMAT_RGBA_INT8:
      *datatype = GL_BYTE;
      *comps = 4;
      return;
   case MESA_FORMAT_R_INT16:
      *datatype = GL_SHORT;
      *comps = 1;
      return;
   case MESA_FORMAT_RG_INT16:
      *datatype = GL_SHORT;
      *comps = 2;
      return;
   case MESA_FORMAT_RGB_INT16:
      *datatype = GL_SHORT;
      *comps = 3;
      return;
   case MESA_FORMAT_RGBA_INT16:
      *datatype = GL_SHORT;
      *comps = 4;
      return;
   case MESA_FORMAT_R_INT32:
      *datatype = GL_INT;
      *comps = 1;
      return;
   case MESA_FORMAT_RG_INT32:
      *datatype = GL_INT;
      *comps = 2;
      return;
   case MESA_FORMAT_RGB_INT32:
      *datatype = GL_INT;
      *comps = 3;
      return;
   case MESA_FORMAT_RGBA_INT32:
      *datatype = GL_INT;
      *comps = 4;
      return;
a886 51
   /**
    * \name Non-normalized unsigned integer formats.
    */
   case MESA_FORMAT_R_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_RG_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 2;
      return;
   case MESA_FORMAT_RGB_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 3;
      return;
   case MESA_FORMAT_RGBA_UINT8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;
   case MESA_FORMAT_R_UINT16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 1;
      return;
   case MESA_FORMAT_RG_UINT16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 2;
      return;
   case MESA_FORMAT_RGB_UINT16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 3;
      return;
   case MESA_FORMAT_RGBA_UINT16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 4;
      return;
   case MESA_FORMAT_R_UINT32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 1;
      return;
   case MESA_FORMAT_RG_UINT32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 2;
      return;
   case MESA_FORMAT_RGB_UINT32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 3;
      return;
   case MESA_FORMAT_RGBA_UINT32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 4;
      return;
d888 9
a896 4
   case MESA_FORMAT_RGB9_E5_FLOAT:
      *datatype = GL_UNSIGNED_INT_5_9_9_9_REV;
      *comps = 3;
      return;
d898 43
a940 4
   case MESA_FORMAT_R11_G11_B10_FLOAT:
      *datatype = GL_UNSIGNED_INT_10F_11F_11F_REV;
      *comps = 3;
      return;
a941 5
   case MESA_FORMAT_ARGB2101010_UINT:
   case MESA_FORMAT_ABGR2101010_UINT:
      *datatype = GL_UNSIGNED_INT_2_10_10_10_REV;
      *comps = 4;
      return;
d943 16
a958 5
   case MESA_FORMAT_XBGR8888_SRGB:
   case MESA_FORMAT_XBGR8888_UINT:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;
a959 5
   case MESA_FORMAT_XBGR8888_SNORM:
   case MESA_FORMAT_XBGR8888_SINT:
      *datatype = GL_BYTE;
      *comps = 4;
      return;
d961 12
a972 4
   case MESA_FORMAT_XRGB2101010_UNORM:
      *datatype = GL_UNSIGNED_INT_2_10_10_10_REV;
      *comps = 4;
      return;
a973 5
   case MESA_FORMAT_XBGR16161616_UNORM:
   case MESA_FORMAT_XBGR16161616_UINT:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 4;
      return;
d975 14
a988 5
   case MESA_FORMAT_XBGR16161616_SNORM:
   case MESA_FORMAT_XBGR16161616_SINT:
      *datatype = GL_SHORT;
      *comps = 4;
      return;
a989 4
   case MESA_FORMAT_XBGR16161616_FLOAT:
      *datatype = GL_HALF_FLOAT;
      *comps = 4;
      return;
d991 7
a997 4
   case MESA_FORMAT_XBGR32323232_FLOAT:
      *datatype = GL_FLOAT;
      *comps = 4;
      return;
a998 4
   case MESA_FORMAT_XBGR32323232_UINT:
      *datatype = GL_UNSIGNED_INT;
      *comps = 4;
      return;
d1000 7
a1006 4
   case MESA_FORMAT_XBGR32323232_SINT:
      *datatype = GL_INT;
      *comps = 4;
      return;
d1008 2
a1009 3
   case MESA_FORMAT_COUNT:
      assert(0);
      return;
a1010 11
   case MESA_FORMAT_NONE:
   /* For debug builds, warn if any formats are not handled */
#ifdef DEBUG
   default:
#endif
      _mesa_problem(NULL, "bad format %s in _mesa_format_to_type_and_comps",
                    _mesa_get_format_name(format));
      *datatype = 0;
      *comps = 1;
   }
}
d1013 1
a1013 7
 * Check if a gl_format exactly matches a GL format/type combination
 * such that we can use memcpy() from one to the other.
 * \param gl_format  a MESA_FORMAT_x value
 * \param format  the user-specified image format
 * \param type  the user-specified image datatype
 * \param swapBytes  typically the current pixel pack/unpack byteswap state
 * \return GL_TRUE if the formats match, GL_FALSE otherwise.
d1016 1
a1016 3
_mesa_format_matches_format_and_type(gl_format gl_format,
				     GLenum format, GLenum type,
                                     GLboolean swapBytes)
d1018 6
a1023 1
   const GLboolean littleEndian = _mesa_little_endian();
a1024 8
   /* Note: When reading a GL format/type combination, the format lists channel
    * assignments from most significant channel in the type to least
    * significant.  A type with _REV indicates that the assignments are
    * swapped, so they are listed from least significant to most significant.
    *
    * For sanity, please keep this switch statement ordered the same as the
    * enums in formats.h.
    */
d1026 10
a1035 7
   switch (gl_format) {

   case MESA_FORMAT_NONE:
   case MESA_FORMAT_COUNT:
      return GL_FALSE;

   case MESA_FORMAT_RGBA8888:
d1037 12
a1048 2
      if (format == GL_RGBA && type == GL_UNSIGNED_INT_8_8_8_8 && !swapBytes)
         return GL_TRUE;
a1049 2
      if (format == GL_RGBA && type == GL_UNSIGNED_INT_8_8_8_8_REV && swapBytes)
         return GL_TRUE;
d1051 25
a1075 2
      if (format == GL_RGBA && type == GL_UNSIGNED_BYTE && !littleEndian)
         return GL_TRUE;
a1076 3
      if (format == GL_ABGR_EXT && type == GL_UNSIGNED_INT_8_8_8_8_REV
          && !swapBytes)
         return GL_TRUE;
d1078 28
a1105 3
      if (format == GL_ABGR_EXT && type == GL_UNSIGNED_INT_8_8_8_8
          && swapBytes)
         return GL_TRUE;
a1106 2
      if (format == GL_ABGR_EXT && type == GL_UNSIGNED_BYTE && littleEndian)
         return GL_TRUE;
a1107 1
      return GL_FALSE;
d1109 17
a1125 4
   case MESA_FORMAT_RGBA8888_REV:
      if (format == GL_RGBA && type == GL_UNSIGNED_INT_8_8_8_8_REV &&
          !swapBytes)
         return GL_TRUE;
a1126 2
      if (format == GL_RGBA && type == GL_UNSIGNED_INT_8_8_8_8 && swapBytes)
         return GL_TRUE;
a1127 2
      if (format == GL_RGBA && type == GL_UNSIGNED_BYTE && littleEndian)
         return GL_TRUE;
d1129 7
a1135 3
      if (format == GL_ABGR_EXT && type == GL_UNSIGNED_INT_8_8_8_8 &&
          !swapBytes)
         return GL_TRUE;
d1137 1
a1137 3
      if (format == GL_ABGR_EXT && type == GL_UNSIGNED_INT_8_8_8_8_REV &&
          swapBytes)
         return GL_TRUE;
d1139 3
a1141 2
      if (format == GL_ABGR_EXT && type == GL_UNSIGNED_BYTE && !littleEndian)
         return GL_TRUE;
d1143 1
a1143 1
      return GL_FALSE;
d1145 2
a1146 5
   case MESA_FORMAT_ARGB8888:
   case MESA_FORMAT_SARGB8:
      if (format == GL_BGRA && type == GL_UNSIGNED_INT_8_8_8_8_REV &&
          !swapBytes)
         return GL_TRUE;
d1148 8
a1155 2
      if (format == GL_BGRA && type == GL_UNSIGNED_INT_8_8_8_8 && swapBytes)
         return GL_TRUE;
d1157 5
a1161 2
      if (format == GL_BGRA && type == GL_UNSIGNED_BYTE && littleEndian)
         return GL_TRUE;
d1163 48
a1210 5
      return GL_FALSE;

   case MESA_FORMAT_ARGB8888_REV:
      if (format == GL_BGRA && type == GL_UNSIGNED_INT_8_8_8_8 && !swapBytes)
         return GL_TRUE;
d1212 2
a1213 3
      if (format == GL_BGRA && type == GL_UNSIGNED_INT_8_8_8_8_REV &&
          swapBytes)
         return GL_TRUE;
a1214 2
      if (format == GL_BGRA && type == GL_UNSIGNED_BYTE && !littleEndian)
         return GL_TRUE;
a1215 5
      return GL_FALSE;

   case MESA_FORMAT_RGBX8888:
   case MESA_FORMAT_RGBX8888_REV:
      return GL_FALSE;
d1217 13
d1232 3
a1234 2
      return GL_FALSE;

a1235 3
   case MESA_FORMAT_SRGB8:
      return format == GL_BGR && type == GL_UNSIGNED_BYTE && littleEndian;

d1237 3
a1239 2
      return format == GL_RGB && type == GL_UNSIGNED_BYTE && littleEndian;

a1240 2
      return format == GL_RGB && type == GL_UNSIGNED_SHORT_5_6_5 && !swapBytes;

d1242 3
a1244 5
      /* Some of the 16-bit MESA_FORMATs that would seem to correspond to
       * GL_UNSIGNED_SHORT_* are byte-swapped instead of channel-reversed,
       * according to formats.h, so they can't be matched.
       */
      return GL_FALSE;
a1246 3
      return format == GL_BGRA && type == GL_UNSIGNED_SHORT_4_4_4_4_REV &&
         !swapBytes;

d1248 3
a1250 5
      return GL_FALSE;

   case MESA_FORMAT_RGBA5551:
      return format == GL_RGBA && type == GL_UNSIGNED_SHORT_5_5_5_1 &&
         !swapBytes;
d1253 4
a1256 2
      return format == GL_BGRA && type == GL_UNSIGNED_SHORT_1_5_5_5_REV &&
         !swapBytes;
d1258 4
a1261 2
   case MESA_FORMAT_ARGB1555_REV:
      return GL_FALSE;
a1262 2
   case MESA_FORMAT_AL44:
      return GL_FALSE;
a1263 2
   case MESA_FORMAT_SLA8:
      return format == GL_LUMINANCE_ALPHA && type == GL_UNSIGNED_BYTE && littleEndian;
d1265 5
a1269 1
      return GL_FALSE;
a1271 1
      return format == GL_LUMINANCE_ALPHA && type == GL_UNSIGNED_SHORT && littleEndian && !swapBytes;
d1273 10
a1282 1
      return GL_FALSE;
d1285 3
a1287 1
      return format == GL_RGB && type == GL_UNSIGNED_BYTE_3_3_2;
a1289 3
      return format == GL_ALPHA && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_A16:
      return format == GL_ALPHA && type == GL_UNSIGNED_SHORT && !swapBytes;
a1290 4
   case MESA_FORMAT_SL8:
      return format == GL_LUMINANCE && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_L16:
      return format == GL_LUMINANCE && type == GL_UNSIGNED_SHORT && !swapBytes;
d1292 6
a1297 3
      return format == GL_INTENSITY && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_I16:
      return format == GL_INTENSITY && type == GL_UNSIGNED_SHORT && !swapBytes;
a1299 3
      return format == GL_YCBCR_MESA &&
             ((type == GL_UNSIGNED_SHORT_8_8_MESA && littleEndian != swapBytes) ||
              (type == GL_UNSIGNED_SHORT_8_8_REV_MESA && littleEndian == swapBytes));
d1301 3
a1303 3
      return format == GL_YCBCR_MESA &&
             ((type == GL_UNSIGNED_SHORT_8_8_MESA && littleEndian == swapBytes) ||
              (type == GL_UNSIGNED_SHORT_8_8_REV_MESA && littleEndian != swapBytes));
d1305 4
a1308 19
   case MESA_FORMAT_R8:
      return format == GL_RED && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_GR88:
      return format == GL_RG && type == GL_UNSIGNED_BYTE && littleEndian;
   case MESA_FORMAT_RG88:
      return GL_FALSE;

   case MESA_FORMAT_R16:
      return format == GL_RED && type == GL_UNSIGNED_SHORT &&
         !swapBytes;
   case MESA_FORMAT_GR1616:
      return format == GL_RG && type == GL_UNSIGNED_SHORT && littleEndian &&
         !swapBytes;
   case MESA_FORMAT_RG1616:
      return GL_FALSE;

   case MESA_FORMAT_ARGB2101010:
      return format == GL_BGRA && type == GL_UNSIGNED_INT_2_10_10_10_REV &&
         !swapBytes;
a1309 4
   case MESA_FORMAT_Z24_S8:
      return format == GL_DEPTH_STENCIL && type == GL_UNSIGNED_INT_24_8 &&
         !swapBytes;
   case MESA_FORMAT_Z24_X8:
d1311 3
a1313 1
      return GL_FALSE;
d1316 3
a1318 2
      return format == GL_DEPTH_COMPONENT && type == GL_UNSIGNED_SHORT &&
         !swapBytes;
d1321 8
a1328 1
      return GL_FALSE;
d1331 28
a1358 2
      return format == GL_DEPTH_COMPONENT && type == GL_UNSIGNED_INT &&
         !swapBytes;
d1360 16
a1375 2
   case MESA_FORMAT_S8:
      return format == GL_STENCIL_INDEX && type == GL_UNSIGNED_BYTE;
d1377 19
a1395 5
   case MESA_FORMAT_SRGB_DXT1:
   case MESA_FORMAT_SRGBA_DXT1:
   case MESA_FORMAT_SRGBA_DXT3:
   case MESA_FORMAT_SRGBA_DXT5:
      return GL_FALSE;
d1397 1
d1400 2
d1406 11
a1416 1
      return GL_FALSE;
d1419 3
a1421 1
      return format == GL_RGBA && type == GL_FLOAT && !swapBytes;
d1423 3
a1425 2
      return format == GL_RGBA && type == GL_HALF_FLOAT && !swapBytes;

d1427 3
a1429 1
      return format == GL_RGB && type == GL_FLOAT && !swapBytes;
d1431 11
a1441 2
      return format == GL_RGB && type == GL_HALF_FLOAT && !swapBytes;

d1443 5
a1447 1
      return format == GL_ALPHA && type == GL_FLOAT && !swapBytes;
a1448 4
      return format == GL_ALPHA && type == GL_HALF_FLOAT && !swapBytes;

   case MESA_FORMAT_LUMINANCE_FLOAT32:
      return format == GL_LUMINANCE && type == GL_FLOAT && !swapBytes;
a1449 9
      return format == GL_LUMINANCE && type == GL_HALF_FLOAT && !swapBytes;

   case MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32:
      return format == GL_LUMINANCE_ALPHA && type == GL_FLOAT && !swapBytes;
   case MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16:
      return format == GL_LUMINANCE_ALPHA && type == GL_HALF_FLOAT && !swapBytes;

   case MESA_FORMAT_INTENSITY_FLOAT32:
      return format == GL_INTENSITY && type == GL_FLOAT && !swapBytes;
d1451 3
a1453 1
      return format == GL_INTENSITY && type == GL_HALF_FLOAT && !swapBytes;
a1454 75
   case MESA_FORMAT_R_FLOAT32:
      return format == GL_RED && type == GL_FLOAT && !swapBytes;
   case MESA_FORMAT_R_FLOAT16:
      return format == GL_RED && type == GL_HALF_FLOAT && !swapBytes;

   case MESA_FORMAT_RG_FLOAT32:
      return format == GL_RG && type == GL_FLOAT && !swapBytes;
   case MESA_FORMAT_RG_FLOAT16:
      return format == GL_RG && type == GL_HALF_FLOAT && !swapBytes;

   case MESA_FORMAT_ALPHA_UINT8:
      return format == GL_ALPHA_INTEGER && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_ALPHA_UINT16:
      return format == GL_ALPHA_INTEGER && type == GL_UNSIGNED_SHORT &&
             !swapBytes;
   case MESA_FORMAT_ALPHA_UINT32:
      return format == GL_ALPHA_INTEGER && type == GL_UNSIGNED_INT &&
             !swapBytes;
   case MESA_FORMAT_ALPHA_INT8:
      return format == GL_ALPHA_INTEGER && type == GL_BYTE;
   case MESA_FORMAT_ALPHA_INT16:
      return format == GL_ALPHA_INTEGER && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_ALPHA_INT32:
      return format == GL_ALPHA_INTEGER && type == GL_INT && !swapBytes;

   case MESA_FORMAT_INTENSITY_UINT8:
   case MESA_FORMAT_INTENSITY_UINT16:
   case MESA_FORMAT_INTENSITY_UINT32:
   case MESA_FORMAT_INTENSITY_INT8:
   case MESA_FORMAT_INTENSITY_INT16:
   case MESA_FORMAT_INTENSITY_INT32:
      /* GL_INTENSITY_INTEGER_EXT doesn't exist. */
      return GL_FALSE;

   case MESA_FORMAT_LUMINANCE_UINT8:
      return format == GL_LUMINANCE_INTEGER_EXT && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_LUMINANCE_UINT16:
      return format == GL_LUMINANCE_INTEGER_EXT && type == GL_UNSIGNED_SHORT &&
             !swapBytes;
   case MESA_FORMAT_LUMINANCE_UINT32:
      return format == GL_LUMINANCE_INTEGER_EXT && type == GL_UNSIGNED_INT &&
             !swapBytes;
   case MESA_FORMAT_LUMINANCE_INT8:
      return format == GL_LUMINANCE_INTEGER_EXT && type == GL_BYTE;
   case MESA_FORMAT_LUMINANCE_INT16:
      return format == GL_LUMINANCE_INTEGER_EXT && type == GL_SHORT &&
             !swapBytes;
   case MESA_FORMAT_LUMINANCE_INT32:
      return format == GL_LUMINANCE_INTEGER_EXT && type == GL_INT && !swapBytes;

   case MESA_FORMAT_LUMINANCE_ALPHA_UINT8:
      return format == GL_LUMINANCE_ALPHA_INTEGER_EXT &&
             type == GL_UNSIGNED_BYTE && !swapBytes;
   case MESA_FORMAT_LUMINANCE_ALPHA_UINT16:
      return format == GL_LUMINANCE_ALPHA_INTEGER_EXT &&
             type == GL_UNSIGNED_SHORT && !swapBytes;
   case MESA_FORMAT_LUMINANCE_ALPHA_UINT32:
      return format == GL_LUMINANCE_ALPHA_INTEGER_EXT &&
             type == GL_UNSIGNED_INT && !swapBytes;
   case MESA_FORMAT_LUMINANCE_ALPHA_INT8:
      return format == GL_LUMINANCE_ALPHA_INTEGER_EXT && type == GL_BYTE &&
             !swapBytes;
   case MESA_FORMAT_LUMINANCE_ALPHA_INT16:
      return format == GL_LUMINANCE_ALPHA_INTEGER_EXT && type == GL_SHORT &&
             !swapBytes;
   case MESA_FORMAT_LUMINANCE_ALPHA_INT32:
      return format == GL_LUMINANCE_ALPHA_INTEGER_EXT && type == GL_INT &&
             !swapBytes;

   case MESA_FORMAT_R_INT8:
      return format == GL_RED_INTEGER && type == GL_BYTE;
   case MESA_FORMAT_RG_INT8:
      return format == GL_RG_INTEGER && type == GL_BYTE && !swapBytes;
   case MESA_FORMAT_RGB_INT8:
      return format == GL_RGB_INTEGER && type == GL_BYTE && !swapBytes;
d1456 3
a1458 7
      return format == GL_RGBA_INTEGER && type == GL_BYTE && !swapBytes;
   case MESA_FORMAT_R_INT16:
      return format == GL_RED_INTEGER && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_RG_INT16:
      return format == GL_RG_INTEGER && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_RGB_INT16:
      return format == GL_RGB_INTEGER && type == GL_SHORT && !swapBytes;
d1460 3
a1462 7
      return format == GL_RGBA_INTEGER && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_R_INT32:
      return format == GL_RED_INTEGER && type == GL_INT && !swapBytes;
   case MESA_FORMAT_RG_INT32:
      return format == GL_RG_INTEGER && type == GL_INT && !swapBytes;
   case MESA_FORMAT_RGB_INT32:
      return format == GL_RGB_INTEGER && type == GL_INT && !swapBytes;
d1464 3
a1466 1
      return format == GL_RGBA_INTEGER && type == GL_INT && !swapBytes;
d1468 3
a1470 6
   case MESA_FORMAT_R_UINT8:
      return format == GL_RED_INTEGER && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_RG_UINT8:
      return format == GL_RG_INTEGER && type == GL_UNSIGNED_BYTE && !swapBytes;
   case MESA_FORMAT_RGB_UINT8:
      return format == GL_RGB_INTEGER && type == GL_UNSIGNED_BYTE && !swapBytes;
d1472 3
a1474 10
      return format == GL_RGBA_INTEGER && type == GL_UNSIGNED_BYTE &&
             !swapBytes;
   case MESA_FORMAT_R_UINT16:
      return format == GL_RED_INTEGER && type == GL_UNSIGNED_SHORT &&
             !swapBytes;
   case MESA_FORMAT_RG_UINT16:
      return format == GL_RG_INTEGER && type == GL_UNSIGNED_SHORT && !swapBytes;
   case MESA_FORMAT_RGB_UINT16:
      return format == GL_RGB_INTEGER && type == GL_UNSIGNED_SHORT &&
             !swapBytes;
d1476 3
a1478 8
      return format == GL_RGBA_INTEGER && type == GL_UNSIGNED_SHORT &&
             !swapBytes;
   case MESA_FORMAT_R_UINT32:
      return format == GL_RED_INTEGER && type == GL_UNSIGNED_INT && !swapBytes;
   case MESA_FORMAT_RG_UINT32:
      return format == GL_RG_INTEGER && type == GL_UNSIGNED_INT && !swapBytes;
   case MESA_FORMAT_RGB_UINT32:
      return format == GL_RGB_INTEGER && type == GL_UNSIGNED_INT && !swapBytes;
d1480 3
a1482 1
      return format == GL_RGBA_INTEGER && type == GL_UNSIGNED_INT && !swapBytes;
d1484 10
a1493 129
   case MESA_FORMAT_DUDV8:
      return (format == GL_DU8DV8_ATI || format == GL_DUDV_ATI) &&
             type == GL_BYTE && littleEndian && !swapBytes;

   case MESA_FORMAT_SIGNED_R8:
      return format == GL_RED && type == GL_BYTE;
   case MESA_FORMAT_SIGNED_RG88_REV:
      return format == GL_RG && type == GL_BYTE && littleEndian &&
             !swapBytes;
   case MESA_FORMAT_SIGNED_RGBX8888:
      return GL_FALSE;

   case MESA_FORMAT_SIGNED_RGBA8888:
      if (format == GL_RGBA && type == GL_BYTE && !littleEndian)
         return GL_TRUE;

      if (format == GL_ABGR_EXT && type == GL_BYTE && littleEndian)
         return GL_TRUE;

      return GL_FALSE;

   case MESA_FORMAT_SIGNED_RGBA8888_REV:
      if (format == GL_RGBA && type == GL_BYTE && littleEndian)
         return GL_TRUE;

      if (format == GL_ABGR_EXT && type == GL_BYTE && !littleEndian)
         return GL_TRUE;

      return GL_FALSE;

   case MESA_FORMAT_SIGNED_R16:
      return format == GL_RED && type == GL_SHORT &&
             !swapBytes;
   case MESA_FORMAT_SIGNED_GR1616:
      return format == GL_RG && type == GL_SHORT && littleEndian && !swapBytes;
   case MESA_FORMAT_SIGNED_RGB_16:
      return format == GL_RGB && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_SIGNED_RGBA_16:
      return format == GL_RGBA && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_RGBA_16:
      return format == GL_RGBA && type == GL_UNSIGNED_SHORT &&
             !swapBytes;

   case MESA_FORMAT_RED_RGTC1:
   case MESA_FORMAT_SIGNED_RED_RGTC1:
   case MESA_FORMAT_RG_RGTC2:
   case MESA_FORMAT_SIGNED_RG_RGTC2:
      return GL_FALSE;

   case MESA_FORMAT_L_LATC1:
   case MESA_FORMAT_SIGNED_L_LATC1:
   case MESA_FORMAT_LA_LATC2:
   case MESA_FORMAT_SIGNED_LA_LATC2:
      return GL_FALSE;

   case MESA_FORMAT_ETC1_RGB8:
   case MESA_FORMAT_ETC2_RGB8:
   case MESA_FORMAT_ETC2_SRGB8:
   case MESA_FORMAT_ETC2_RGBA8_EAC:
   case MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC:
   case MESA_FORMAT_ETC2_R11_EAC:
   case MESA_FORMAT_ETC2_RG11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_R11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_RG11_EAC:
   case MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1:
   case MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1:
      return GL_FALSE;

   case MESA_FORMAT_SIGNED_A8:
      return format == GL_ALPHA && type == GL_BYTE;
   case MESA_FORMAT_SIGNED_L8:
      return format == GL_LUMINANCE && type == GL_BYTE;
   case MESA_FORMAT_SIGNED_AL88:
      return format == GL_LUMINANCE_ALPHA && type == GL_BYTE &&
             littleEndian && !swapBytes;
   case MESA_FORMAT_SIGNED_I8:
      return format == GL_INTENSITY && type == GL_BYTE;
   case MESA_FORMAT_SIGNED_A16:
      return format == GL_ALPHA && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_SIGNED_L16:
      return format == GL_LUMINANCE && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_SIGNED_AL1616:
      return format == GL_LUMINANCE_ALPHA && type == GL_SHORT &&
             littleEndian && !swapBytes;
   case MESA_FORMAT_SIGNED_I16:
      return format == GL_INTENSITY && type == GL_SHORT && littleEndian &&
             !swapBytes;

   case MESA_FORMAT_ARGB2101010_UINT:
      return (format == GL_BGRA_INTEGER_EXT &&
              type == GL_UNSIGNED_INT_2_10_10_10_REV &&
              !swapBytes);

   case MESA_FORMAT_ABGR2101010_UINT:
      return (format == GL_RGBA_INTEGER_EXT &&
              type == GL_UNSIGNED_INT_2_10_10_10_REV &&
              !swapBytes);

   case MESA_FORMAT_RGB9_E5_FLOAT:
      return format == GL_RGB && type == GL_UNSIGNED_INT_5_9_9_9_REV &&
         !swapBytes;

   case MESA_FORMAT_R11_G11_B10_FLOAT:
      return format == GL_RGB && type == GL_UNSIGNED_INT_10F_11F_11F_REV &&
         !swapBytes;

   case MESA_FORMAT_Z32_FLOAT:
      return format == GL_DEPTH_COMPONENT && type == GL_FLOAT && !swapBytes;

   case MESA_FORMAT_Z32_FLOAT_X24S8:
      return format == GL_DEPTH_STENCIL &&
             type == GL_FLOAT_32_UNSIGNED_INT_24_8_REV && !swapBytes;

   case MESA_FORMAT_XRGB4444_UNORM:
   case MESA_FORMAT_XRGB1555_UNORM:
   case MESA_FORMAT_XBGR8888_SNORM:
   case MESA_FORMAT_XBGR8888_SRGB:
   case MESA_FORMAT_XBGR8888_UINT:
   case MESA_FORMAT_XBGR8888_SINT:
   case MESA_FORMAT_XRGB2101010_UNORM:
   case MESA_FORMAT_XBGR16161616_UNORM:
   case MESA_FORMAT_XBGR16161616_SNORM:
   case MESA_FORMAT_XBGR16161616_FLOAT:
   case MESA_FORMAT_XBGR16161616_UINT:
   case MESA_FORMAT_XBGR16161616_SINT:
   case MESA_FORMAT_XBGR32323232_FLOAT:
   case MESA_FORMAT_XBGR32323232_UINT:
   case MESA_FORMAT_XBGR32323232_SINT:
      return GL_FALSE;
a1494 2

   return GL_FALSE;
a1495 1

@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d38 1
a38 1
   mesa_format Name;
a80 1
   /* Packed unorm formats */
d91 2
a92 2
      MESA_FORMAT_A8B8G8R8_UNORM,  /* Name */
      "MESA_FORMAT_A8B8G8R8_UNORM",/* StrName */
d100 3
a102 3
      MESA_FORMAT_X8B8G8R8_UNORM,  /* Name */
      "MESA_FORMAT_X8B8G8R8_UNORM",/* StrName */
      GL_RGB,                      /* BaseFormat */
d104 1
a104 1
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
d109 2
a110 2
      MESA_FORMAT_R8G8B8A8_UNORM,  /* Name */
      "MESA_FORMAT_R8G8B8A8_UNORM",/* StrName */
d118 3
a120 3
      MESA_FORMAT_R8G8B8X8_UNORM,  /* Name */
      "MESA_FORMAT_R8G8B8X8_UNORM",/* StrName */
      GL_RGB,                      /* BaseFormat */
d122 1
a122 1
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
d127 3
a129 3
      MESA_FORMAT_B8G8R8A8_UNORM,  /* Name */
      "MESA_FORMAT_B8G8R8A8_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
d131 1
a131 1
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
d136 2
a137 2
      MESA_FORMAT_B8G8R8X8_UNORM,  /* Name */
      "MESA_FORMAT_B8G8R8X8_UNORM",/* StrName */
d145 3
a147 3
      MESA_FORMAT_A8R8G8B8_UNORM,  /* Name */
      "MESA_FORMAT_A8R8G8B8_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
d149 1
a149 1
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
d154 2
a155 2
      MESA_FORMAT_X8R8G8B8_UNORM,  /* Name */
      "MESA_FORMAT_X8R8G8B8_UNORM",/* StrName */
d163 3
a165 3
      MESA_FORMAT_L16A16_UNORM,    /* Name */
      "MESA_FORMAT_L16A16_UNORM",  /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
d167 3
a169 3
      0, 0, 0, 16,                 /* Red/Green/Blue/AlphaBits */
      16, 0, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
d172 3
a174 3
      MESA_FORMAT_A16L16_UNORM,    /* Name */
      "MESA_FORMAT_A16L16_UNORM",  /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
d176 3
a178 3
      0, 0, 0, 16,                 /* Red/Green/Blue/AlphaBits */
      16, 0, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
d181 2
a182 2
      MESA_FORMAT_B5G6R5_UNORM,    /* Name */
      "MESA_FORMAT_B5G6R5_UNORM",  /* StrName */
d190 2
a191 2
      MESA_FORMAT_R5G6B5_UNORM,    /* Name */
      "MESA_FORMAT_R5G6B5_UNORM",  /* StrName */
d199 2
a200 2
      MESA_FORMAT_B4G4R4A4_UNORM,  /* Name */
      "MESA_FORMAT_B4G4R4A4_UNORM",/* StrName */
d208 2
a209 11
      MESA_FORMAT_B4G4R4X4_UNORM,
      "MESA_FORMAT_B4G4R4X4_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A4R4G4B4_UNORM,  /* Name */
      "MESA_FORMAT_A4R4G4B4_UNORM",/* StrName */
d217 2
a218 2
      MESA_FORMAT_A1B5G5R5_UNORM,  /* Name */
      "MESA_FORMAT_A1B5G5R5_UNORM",/* StrName */
d226 2
a227 2
      MESA_FORMAT_B5G5R5A1_UNORM,  /* Name */
      "MESA_FORMAT_B5G5R5A1_UNORM",/* StrName */
d235 2
a236 11
      MESA_FORMAT_B5G5R5X1_UNORM,
      "MESA_FORMAT_B5G5R5X1_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      5, 5, 5, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A1R5G5B5_UNORM,  /* Name */
      "MESA_FORMAT_A1R5G5B5_UNORM",/* StrName */
d244 11
a254 2
      MESA_FORMAT_L8A8_UNORM,      /* Name */
      "MESA_FORMAT_L8A8_UNORM",    /* StrName */
d262 2
a263 2
      MESA_FORMAT_A8L8_UNORM,      /* Name */
      "MESA_FORMAT_A8L8_UNORM",    /* StrName */
d271 7
a277 16
      MESA_FORMAT_R8G8_UNORM,
      "MESA_FORMAT_R8G8_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_G8R8_UNORM,
      "MESA_FORMAT_G8R8_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
d280 2
a281 2
      MESA_FORMAT_L4A4_UNORM,      /* Name */
      "MESA_FORMAT_L4A4_UNORM",    /* StrName */
d284 3
a286 3
      0, 0, 0, 4,                  /* Red/Green/Blue/AlphaBits */
      4, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
d289 2
a290 2
      MESA_FORMAT_B2G3R3_UNORM,    /* Name */
      "MESA_FORMAT_B2G3R3_UNORM",  /* StrName */
d298 2
a299 112
      MESA_FORMAT_R16G16_UNORM,
      "MESA_FORMAT_R16G16_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_G16R16_UNORM,
      "MESA_FORMAT_G16R16_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_B10G10R10A2_UNORM,
      "MESA_FORMAT_B10G10R10A2_UNORM",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_B10G10R10X2_UNORM,
      "MESA_FORMAT_B10G10R10X2_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      10, 10, 10, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R10G10B10A2_UNORM,
      "MESA_FORMAT_R10G10B10A2_UNORM",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_S8_UINT_Z24_UNORM,   /* Name */
      "MESA_FORMAT_S8_UINT_Z24_UNORM", /* StrName */
      GL_DEPTH_STENCIL,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 8,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_X8_UINT_Z24_UNORM,   /* Name */
      "MESA_FORMAT_X8_UINT_Z24_UNORM", /* StrName */
      GL_DEPTH_COMPONENT,              /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 0,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_Z24_UNORM_S8_UINT,   /* Name */
      "MESA_FORMAT_Z24_UNORM_S8_UINT", /* StrName */
      GL_DEPTH_STENCIL,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 8,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_Z24_UNORM_X8_UINT,   /* Name */
      "MESA_FORMAT_Z24_UNORM_X8_UINT", /* StrName */
      GL_DEPTH_COMPONENT,              /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 0,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_YCBCR,           /* Name */
      "MESA_FORMAT_YCBCR",         /* StrName */
      GL_YCBCR_MESA,               /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_YCBCR_REV,       /* Name */
      "MESA_FORMAT_YCBCR_REV",     /* StrName */
      GL_YCBCR_MESA,               /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },

   /* Array unorm formats */
   {
      MESA_FORMAT_DUDV8,
      "MESA_FORMAT_DUDV8",
      GL_DUDV_ATI,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A_UNORM8,        /* Name */
      "MESA_FORMAT_A_UNORM8",      /* StrName */
d307 2
a308 2
      MESA_FORMAT_A_UNORM16,       /* Name */
      "MESA_FORMAT_A_UNORM16",     /* StrName */
d316 2
a317 2
      MESA_FORMAT_L_UNORM8,        /* Name */
      "MESA_FORMAT_L_UNORM8",      /* StrName */
d325 2
a326 2
      MESA_FORMAT_L_UNORM16,       /* Name */
      "MESA_FORMAT_L_UNORM16",     /* StrName */
d334 2
a335 2
      MESA_FORMAT_I_UNORM8,        /* Name */
      "MESA_FORMAT_I_UNORM8",      /* StrName */
d343 2
a344 2
      MESA_FORMAT_I_UNORM16,       /* Name */
      "MESA_FORMAT_I_UNORM16",     /* StrName */
d352 20
a371 2
      MESA_FORMAT_R_UNORM8,
      "MESA_FORMAT_R_UNORM8",
d379 20
a398 2
      MESA_FORMAT_R_UNORM16,
      "MESA_FORMAT_R_UNORM16",
d406 7
a412 7
      MESA_FORMAT_BGR_UNORM8,      /* Name */
      "MESA_FORMAT_BGR_UNORM8",    /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 3                      /* BlockWidth/Height,Bytes */
d415 7
a421 7
      MESA_FORMAT_RGB_UNORM8,      /* Name */
      "MESA_FORMAT_RGB_UNORM8",    /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 3                      /* BlockWidth/Height,Bytes */
d424 2
a425 2
      MESA_FORMAT_RGBA_UNORM16,
      "MESA_FORMAT_RGBA_UNORM16",
d428 1
a428 1
      16, 16, 16, 16,
d430 10
a439 1
      1, 1, 8
d442 7
a448 7
      MESA_FORMAT_RGBX_UNORM16,
      "MESA_FORMAT_RGBX_UNORM16",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
d451 2
a452 2
      MESA_FORMAT_Z_UNORM16,       /* Name */
      "MESA_FORMAT_Z_UNORM16",     /* StrName */
d460 20
a479 2
      MESA_FORMAT_Z_UNORM32,       /* Name */
      "MESA_FORMAT_Z_UNORM32",     /* StrName */
d487 2
a488 2
      MESA_FORMAT_S_UINT8,         /* Name */
      "MESA_FORMAT_S_UINT8",       /* StrName */
a494 11

   /* Packed signed/normalized formats */
   {
      MESA_FORMAT_A8B8G8R8_SNORM,
      "MESA_FORMAT_A8B8G8R8_SNORM",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
d496 2
a497 2
      MESA_FORMAT_X8B8G8R8_SNORM,
      "MESA_FORMAT_X8B8G8R8_SNORM",
d499 1
a499 1
      GL_SIGNED_NORMALIZED,
d502 1
a502 1
      1, 1, 4                       /* 4 bpp, but no alpha */
d505 2
a506 2
      MESA_FORMAT_R8G8B8A8_SNORM,
      "MESA_FORMAT_R8G8B8A8_SNORM",
d508 1
a508 1
      GL_SIGNED_NORMALIZED,
d514 5
a518 5
      MESA_FORMAT_R8G8B8X8_SNORM,
      "MESA_FORMAT_R8G8B8X8_SNORM",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 0,
d523 7
a529 7
      MESA_FORMAT_R16G16_SNORM,
      "MESA_FORMAT_R16G16_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
d532 6
a537 15
      MESA_FORMAT_G16R16_SNORM,
      "MESA_FORMAT_G16R16_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R8G8_SNORM,
      "MESA_FORMAT_R8G8_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
d541 7
a547 7
      MESA_FORMAT_G8R8_SNORM,
      "MESA_FORMAT_G8R8_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
d550 5
a554 16
      MESA_FORMAT_L8A8_SNORM,
      "MESA_FORMAT_L8A8_SNORM",
      GL_LUMINANCE_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },

   /* Array signed/normalized formats */
   {
      MESA_FORMAT_A_SNORM8,
      "MESA_FORMAT_A_SNORM8",
      GL_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 8,
d556 1
a556 1
      1, 1, 1
d559 5
a563 5
      MESA_FORMAT_A_SNORM16,
      "MESA_FORMAT_A_SNORM16",
      GL_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 16,
d565 1
a565 1
      1, 1, 2
d568 5
a572 50
      MESA_FORMAT_L_SNORM8,
      "MESA_FORMAT_L_SNORM8",
      GL_LUMINANCE,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_L_SNORM16,
      "MESA_FORMAT_L_SNORM16",
      GL_LUMINANCE,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_I_SNORM8,
      "MESA_FORMAT_I_SNORM8",
      GL_INTENSITY,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_I_SNORM16,
      "MESA_FORMAT_I_SNORM16",
      GL_INTENSITY,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R_SNORM8,         /* Name */
      "MESA_FORMAT_R_SNORM8",       /* StrName */
      GL_RED,                       /* BaseFormat */
      GL_SIGNED_NORMALIZED,         /* DataType */
      8, 0, 0, 0,                   /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,                /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                       /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R_SNORM16,
      "MESA_FORMAT_R_SNORM16",
      GL_RED,
      GL_SIGNED_NORMALIZED,
      16, 0, 0, 0,
d574 1
a574 1
      1, 1, 2
d576 1
d578 2
a579 11
      MESA_FORMAT_LA_SNORM16,
      "MESA_FORMAT_LA_SNORM16",
      GL_LUMINANCE_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGB_SNORM16,
      "MESA_FORMAT_RGB_SNORM16",
d581 2
a582 2
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 0,
d584 1
a584 1
      1, 1, 6
d587 2
a588 2
      MESA_FORMAT_RGBA_SNORM16,
      "MESA_FORMAT_RGBA_SNORM16",
d590 2
a591 2
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 16,
d593 1
a593 1
      1, 1, 8
d595 1
d597 7
a603 7
      MESA_FORMAT_RGBX_SNORM16,
      "MESA_FORMAT_RGBX_SNORM16",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
a604 2

   /* Packed sRGB formats */
d606 2
a607 2
      MESA_FORMAT_A8B8G8R8_SRGB,
      "MESA_FORMAT_A8B8G8R8_SRGB",
d610 1
a610 1
      8, 8, 8, 8,
d612 1
a612 1
      1, 1, 4
d615 2
a616 2
      MESA_FORMAT_B8G8R8A8_SRGB,
      "MESA_FORMAT_B8G8R8A8_SRGB",
d619 1
a619 1
      8, 8, 8, 8,
d621 1
a621 1
      1, 1, 4
d624 5
a628 5
      MESA_FORMAT_B8G8R8X8_SRGB,
      "MESA_FORMAT_B8G8R8X8_SRGB",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
d630 1
a630 1
      1, 1, 4
d633 2
a634 2
      MESA_FORMAT_R8G8B8A8_SRGB,
      "MESA_FORMAT_R8G8B8A8_SRGB",
d636 2
a637 2
      GL_UNSIGNED_NORMALIZED,    
      8, 8, 8, 8,
d639 1
a639 1
      1, 1, 4
d642 5
a646 5
      MESA_FORMAT_R8G8B8X8_SRGB,
      "MESA_FORMAT_R8G8B8X8_SRGB",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
d648 1
a648 1
      1, 1, 4
d651 2
a652 22
      MESA_FORMAT_L8A8_SRGB,
      "MESA_FORMAT_L8A8_SRGB",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_NORMALIZED,    
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },

   /* Array sRGB formats */
   {
      MESA_FORMAT_L_SRGB8,
      "MESA_FORMAT_L_SRGB8",
      GL_LUMINANCE,
      GL_UNSIGNED_NORMALIZED,    
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_BGR_SRGB8,
      "MESA_FORMAT_BGR_SRGB8",
d654 2
a655 2
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
d657 1
a657 1
      1, 1, 3
a658 2

   /* Packed float formats */
d660 2
a661 2
      MESA_FORMAT_R9G9B9E5_FLOAT,
      "MESA_FORMAT_RGB9_E5",
d664 1
a664 1
      9, 9, 9, 0,
d666 1
a666 1
      1, 1, 4
d669 3
a671 3
      MESA_FORMAT_R11G11B10_FLOAT,
      "MESA_FORMAT_R11G11B10_FLOAT",
      GL_RGB,
d673 1
a673 1
      11, 11, 10, 0,
d678 2
a679 16
      MESA_FORMAT_Z32_FLOAT_S8X24_UINT,   /* Name */
      "MESA_FORMAT_Z32_FLOAT_S8X24_UINT", /* StrName */
      GL_DEPTH_STENCIL,                   /* BaseFormat */
      /* DataType here is used to answer GL_TEXTURE_DEPTH_TYPE queries, and is
       * never used for stencil because stencil is always GL_UNSIGNED_INT.
       */
      GL_FLOAT,                    /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 8,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 8                      /* BlockWidth/Height,Bytes */
   },

   /* Array float formats */
   {
      MESA_FORMAT_A_FLOAT16,
      "MESA_FORMAT_A_FLOAT16",
d687 3
a689 3
      MESA_FORMAT_A_FLOAT32,
      "MESA_FORMAT_A_FLOAT32",
      GL_ALPHA,
d691 2
a692 2
      0, 0, 0, 32,
      0, 0, 0, 0, 0,
d696 2
a697 2
      MESA_FORMAT_L_FLOAT16,
      "MESA_FORMAT_L_FLOAT16",
d705 3
a707 3
      MESA_FORMAT_L_FLOAT32,
      "MESA_FORMAT_L_FLOAT32",
      GL_LUMINANCE,
d709 1
a709 1
      0, 0, 0, 0,
d711 1
a711 1
      1, 1, 4
d714 2
a715 2
      MESA_FORMAT_LA_FLOAT16,
      "MESA_FORMAT_LA_FLOAT16",
d723 3
a725 3
      MESA_FORMAT_LA_FLOAT32,
      "MESA_FORMAT_LA_FLOAT32",
      GL_LUMINANCE_ALPHA,
d727 3
a729 3
      0, 0, 0, 32,
      32, 0, 0, 0, 0,
      1, 1, 8
d732 2
a733 2
      MESA_FORMAT_I_FLOAT16,
      "MESA_FORMAT_I_FLOAT16",
d741 3
a743 3
      MESA_FORMAT_I_FLOAT32,
      "MESA_FORMAT_I_FLOAT32",
      GL_INTENSITY,
d745 2
a746 2
      0, 0, 0, 0,
      0, 32, 0, 0, 0,
d759 3
a761 3
      MESA_FORMAT_R_FLOAT32,
      "MESA_FORMAT_R_FLOAT32",
      GL_RED,
d763 1
a763 1
      32, 0, 0, 0,
d765 1
a765 1
      1, 1, 4
a775 92
   {
      MESA_FORMAT_RG_FLOAT32,
      "MESA_FORMAT_RG_FLOAT32",
      GL_RG,
      GL_FLOAT,
      32, 32, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGB_FLOAT16,
      "MESA_FORMAT_RGB_FLOAT16",
      GL_RGB,
      GL_FLOAT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGB_FLOAT32,
      "MESA_FORMAT_RGB_FLOAT32",
      GL_RGB,
      GL_FLOAT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 12
   },
   {
      MESA_FORMAT_RGBA_FLOAT16,
      "MESA_FORMAT_RGBA_FLOAT16",
      GL_RGBA,
      GL_FLOAT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBA_FLOAT32,
      "MESA_FORMAT_RGBA_FLOAT32",
      GL_RGBA,
      GL_FLOAT,
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_RGBX_FLOAT16,
      "MESA_FORMAT_RGBX_FLOAT16",
      GL_RGB,
      GL_FLOAT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_FLOAT32,
      "MESA_FORMAT_RGBX_FLOAT32",
      GL_RGB,
      GL_FLOAT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_Z_FLOAT32,       /* Name */
      "MESA_FORMAT_Z_FLOAT32",     /* StrName */
      GL_DEPTH_COMPONENT,          /* BaseFormat */
      GL_FLOAT,                    /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },

   /* Packed signed/unsigned non-normalized integer formats */
   {
      MESA_FORMAT_B10G10R10A2_UINT,
      "MESA_FORMAT_B10G10R10A2_UINT",
      GL_RGBA,
      GL_UNSIGNED_INT,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R10G10B10A2_UINT,
      "MESA_FORMAT_R10G10B10A2_UINT",
      GL_RGBA,
      GL_UNSIGNED_INT,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
d777 2
a778 1
   /* Array signed/unsigned non-normalized integer formats */
d780 2
a781 2
      MESA_FORMAT_A_UINT8,
      "MESA_FORMAT_A_UINT8",
d789 2
a790 2
      MESA_FORMAT_A_UINT16,
      "MESA_FORMAT_A_UINT16",
d798 2
a799 2
      MESA_FORMAT_A_UINT32,
      "MESA_FORMAT_A_UINT32",
d807 2
a808 2
      MESA_FORMAT_A_SINT8,
      "MESA_FORMAT_A_SINT8",
d816 2
a817 2
      MESA_FORMAT_A_SINT16,
      "MESA_FORMAT_A_SINT16",
d825 2
a826 2
      MESA_FORMAT_A_SINT32,
      "MESA_FORMAT_A_SINT32",
d834 2
a835 2
      MESA_FORMAT_I_UINT8,
      "MESA_FORMAT_I_UINT8",
d843 2
a844 2
      MESA_FORMAT_I_UINT16,
      "MESA_FORMAT_I_UINT16",
d852 2
a853 2
      MESA_FORMAT_I_UINT32,
      "MESA_FORMAT_I_UINT32",
d861 2
a862 2
      MESA_FORMAT_I_SINT8,
      "MESA_FORMAT_I_SINT8",
d870 2
a871 2
      MESA_FORMAT_I_SINT16,
      "MESA_FORMAT_I_SINT16",
d879 2
a880 2
      MESA_FORMAT_I_SINT32,
      "MESA_FORMAT_I_SINT32",
d888 2
a889 2
      MESA_FORMAT_L_UINT8,
      "MESA_FORMAT_L_UINT8",
d897 2
a898 2
      MESA_FORMAT_L_UINT16,
      "MESA_FORMAT_L_UINT16",
d906 2
a907 2
      MESA_FORMAT_L_UINT32,
      "MESA_FORMAT_L_UINT32",
d915 2
a916 2
      MESA_FORMAT_L_SINT8,
      "MESA_FORMAT_L_SINT8",
d924 2
a925 2
      MESA_FORMAT_L_SINT16,
      "MESA_FORMAT_L_SINT16",
d933 2
a934 2
      MESA_FORMAT_L_SINT32,
      "MESA_FORMAT_L_SINT32",
d942 2
a943 2
      MESA_FORMAT_LA_UINT8,
      "MESA_FORMAT_LA_UINT8",
d951 2
a952 2
      MESA_FORMAT_LA_UINT16,
      "MESA_FORMAT_LA_UINT16",
d960 2
a961 2
      MESA_FORMAT_LA_UINT32,
      "MESA_FORMAT_LA_UINT32",
d969 2
a970 2
      MESA_FORMAT_LA_SINT8,
      "MESA_FORMAT_LA_SINT8",
d978 2
a979 2
      MESA_FORMAT_LA_SINT16,
      "MESA_FORMAT_LA_SINT16",
d987 2
a988 2
      MESA_FORMAT_LA_SINT32,
      "MESA_FORMAT_LA_SINT32",
d995 1
d997 2
a998 2
      MESA_FORMAT_R_UINT8,
      "MESA_FORMAT_R_UINT8",
d1000 1
a1000 1
      GL_UNSIGNED_INT,
d1006 5
a1010 5
      MESA_FORMAT_R_UINT16,
      "MESA_FORMAT_R_UINT16",
      GL_RED,
      GL_UNSIGNED_INT,
      16, 0, 0, 0,
d1015 5
a1019 5
      MESA_FORMAT_R_UINT32,
      "MESA_FORMAT_R_UINT32",
      GL_RED,
      GL_UNSIGNED_INT,
      32, 0, 0, 0,
d1021 1
a1021 1
      1, 1, 4
d1024 3
a1026 3
      MESA_FORMAT_R_SINT8,
      "MESA_FORMAT_R_SINT8",
      GL_RED,
d1028 1
a1028 1
      8, 0, 0, 0,
d1030 1
a1030 1
      1, 1, 1
d1033 2
a1034 2
      MESA_FORMAT_R_SINT16,
      "MESA_FORMAT_R_SINT16",
d1042 3
a1044 3
      MESA_FORMAT_R_SINT32,
      "MESA_FORMAT_R_SINT32",
      GL_RED,
d1046 1
a1046 1
      32, 0, 0, 0,
d1051 14
a1064 5
      MESA_FORMAT_RG_UINT8,
      "MESA_FORMAT_RG_UINT8",
      GL_RG,
      GL_UNSIGNED_INT,
      8, 8, 0, 0,
d1066 1
a1066 1
      1, 1, 2
d1069 5
a1073 5
      MESA_FORMAT_RG_UINT16,
      "MESA_FORMAT_RG_UINT16",
      GL_RG,
      GL_UNSIGNED_INT,
      16, 16, 0, 0,
d1078 2
a1079 2
      MESA_FORMAT_RG_UINT32,
      "MESA_FORMAT_RG_UINT32",
d1081 1
a1081 1
      GL_UNSIGNED_INT,
d1087 3
a1089 3
      MESA_FORMAT_RG_SINT8,
      "MESA_FORMAT_RG_SINT8",
      GL_RG,
d1091 1
a1091 1
      8, 8, 0, 0,
d1093 1
a1093 1
      1, 1, 2
d1096 3
a1098 3
      MESA_FORMAT_RG_SINT16,
      "MESA_FORMAT_RG_SINT16",
      GL_RG,
d1100 10
a1109 1
      16, 16, 0, 0,
d1111 1
a1111 1
      1, 1, 4
d1114 2
a1115 2
      MESA_FORMAT_RG_SINT32,
      "MESA_FORMAT_RG_SINT32",
d1117 2
a1118 2
      GL_INT,
      32, 32, 0, 0,
d1120 1
a1120 1
      1, 1, 8
d1132 3
a1134 3
      MESA_FORMAT_RGB_UINT16,
      "MESA_FORMAT_RGB_UINT16",
      GL_RGB,
d1136 1
a1136 1
      16, 16, 16, 0,
d1138 1
a1138 1
      1, 1, 6
d1141 3
a1143 3
      MESA_FORMAT_RGB_UINT32,
      "MESA_FORMAT_RGB_UINT32",
      GL_RGB,
d1145 1
a1145 1
      32, 32, 32, 0,
d1147 1
a1147 1
      1, 1, 12
d1150 5
a1154 5
      MESA_FORMAT_RGB_SINT8,
      "MESA_FORMAT_RGB_SINT8",
      GL_RGB,
      GL_INT,
      8, 8, 8, 0,
d1156 1
a1156 1
      1, 1, 3
d1159 2
a1160 2
      MESA_FORMAT_RGB_SINT16,
      "MESA_FORMAT_RGB_SINT16",
d1162 1
a1162 1
      GL_INT,
d1168 5
a1172 5
      MESA_FORMAT_RGB_SINT32,
      "MESA_FORMAT_RGB_SINT32",
      GL_RGB,
      GL_INT,
      32, 32, 32, 0,
d1174 1
a1174 1
      1, 1, 12
d1177 3
a1179 3
      MESA_FORMAT_RGBA_UINT8,
      "MESA_FORMAT_RGBA_UINT8",
      GL_RGBA,
d1181 1
a1181 1
      8, 8, 8, 8,
d1186 3
a1188 3
      MESA_FORMAT_RGBA_UINT16,
      "MESA_FORMAT_RGBA_UINT16",
      GL_RGBA,
d1190 1
a1190 1
      16, 16, 16, 16,
d1195 9
d1212 2
d1215 5
a1219 5
      MESA_FORMAT_RGBA_SINT8,
      "MESA_FORMAT_RGBA_SINT8",
      GL_RGBA,
      GL_INT,
      8, 8, 8, 8,
d1221 1
a1221 1
      1, 1, 4
d1223 2
d1226 29
a1254 2
      MESA_FORMAT_RGBA_SINT16,
      "MESA_FORMAT_RGBA_SINT16",
d1256 2
a1257 2
      GL_INT,
      16, 16, 16, 16,
d1259 1
a1259 1
      1, 1, 8
d1262 2
a1263 2
      MESA_FORMAT_RGBA_SINT32,
      "MESA_FORMAT_RGBA_SINT32",
d1265 13
a1277 2
      GL_INT,
      32, 32, 32, 32,
d1279 1
a1279 1
      1, 1, 16
d1282 5
a1286 5
      MESA_FORMAT_RGBX_UINT8,
      "MESA_FORMAT_RGBX_UINT8",
      GL_RGB,
      GL_UNSIGNED_INT,
      8, 8, 8, 0,
d1291 2
a1292 2
      MESA_FORMAT_RGBX_UINT16,
      "MESA_FORMAT_RGBX_UINT16",
d1294 1
a1294 1
      GL_UNSIGNED_INT,
d1297 9
d1309 5
a1313 5
      MESA_FORMAT_RGBX_UINT32,
      "MESA_FORMAT_RGBX_UINT32",
      GL_RGB,
      GL_UNSIGNED_INT,
      32, 32, 32, 0,
d1315 73
a1387 1
      1, 1, 16
d1389 1
d1391 2
a1392 2
      MESA_FORMAT_RGBX_SINT8,
      "MESA_FORMAT_RGBX_SINT8",
d1394 1
a1394 1
      GL_INT,
d1397 1
a1397 1
      1, 1, 4
d1399 1
d1401 2
a1402 2
      MESA_FORMAT_RGBX_SINT16,
      "MESA_FORMAT_RGBX_SINT16",
d1404 2
a1405 2
      GL_INT,
      16, 16, 16, 0,
d1407 1
a1407 1
      1, 1, 8
d1409 1
d1411 2
a1412 2
      MESA_FORMAT_RGBX_SINT32,
      "MESA_FORMAT_RGBX_SINT32",
d1414 2
a1415 2
      GL_INT,
      32, 32, 32, 0,
d1417 1
a1417 1
      1, 1, 16
a1419 1
   /* DXT compressed formats */
d1421 7
a1427 7
      MESA_FORMAT_RGB_DXT1,        /* Name */
      "MESA_FORMAT_RGB_DXT1",      /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 0,                  /* approx Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      4, 4, 8                      /* 8 bytes per 4x4 block */
d1429 1
d1431 2
a1432 2
      MESA_FORMAT_RGBA_DXT1,
      "MESA_FORMAT_RGBA_DXT1",
d1434 2
a1435 2
      GL_UNSIGNED_NORMALIZED,    
      4, 4, 4, 4,
d1437 1
a1437 1
      4, 4, 8                      /* 8 bytes per 4x4 block */
d1439 1
d1441 5
a1445 5
      MESA_FORMAT_RGBA_DXT3,
      "MESA_FORMAT_RGBA_DXT3",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      4, 4, 4, 4,
d1447 1
a1447 1
      4, 4, 16                     /* 16 bytes per 4x4 block */
d1449 1
d1451 5
a1455 5
      MESA_FORMAT_RGBA_DXT5,
      "MESA_FORMAT_RGBA_DXT5",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      4, 4, 4, 4,
d1457 1
a1457 1
      4, 4, 16                     /* 16 bytes per 4x4 block */
a1459 1
   /* DXT sRGB compressed formats */
d1461 7
a1467 7
      MESA_FORMAT_SRGB_DXT1,       /* Name */
      "MESA_FORMAT_SRGB_DXT1",     /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 0,                  /* approx Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      4, 4, 8                      /* 8 bytes per 4x4 block */
d1469 1
d1471 5
a1475 5
      MESA_FORMAT_SRGBA_DXT1,
      "MESA_FORMAT_SRGBA_DXT1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 4,
d1477 1
a1477 1
      4, 4, 8                      /* 8 bytes per 4x4 block */
d1479 1
d1481 2
a1482 2
      MESA_FORMAT_SRGBA_DXT3,
      "MESA_FORMAT_SRGBA_DXT3",
d1485 1
a1485 1
      4, 4, 4, 4,
d1487 1
a1487 1
      4, 4, 16                     /* 16 bytes per 4x4 block */
d1489 1
d1491 2
a1492 2
      MESA_FORMAT_SRGBA_DXT5,
      "MESA_FORMAT_SRGBA_DXT5",
d1495 1
a1495 1
      4, 4, 4, 4,
d1497 1
a1497 1
      4, 4, 16                     /* 16 bytes per 4x4 block */
d1500 10
a1509 1
   /* FXT1 compressed formats */
d1511 32
a1542 5
      MESA_FORMAT_RGB_FXT1,
      "MESA_FORMAT_RGB_FXT1",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 0,                  /* approx Red/Green/BlueBits */
d1544 28
a1571 1
      8, 4, 16                     /* 16 bytes per 8x4 block */
d1574 5
a1578 5
      MESA_FORMAT_RGBA_FXT1,
      "MESA_FORMAT_RGBA_FXT1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 1,                  /* approx Red/Green/Blue/AlphaBits */
d1580 1
a1580 1
      8, 4, 16                     /* 16 bytes per 8x4 block */
a1581 2

   /* RGTC compressed formats */
d1583 7
a1589 7
     MESA_FORMAT_R_RGTC1_UNORM,
     "MESA_FORMAT_R_RGTC1_UNORM",
     GL_RED,
     GL_UNSIGNED_NORMALIZED,
     8, 0, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
d1591 1
d1593 7
a1599 7
     MESA_FORMAT_R_RGTC1_SNORM,
     "MESA_FORMAT_R_RGTC1_SNORM",
     GL_RED,
     GL_SIGNED_NORMALIZED,
     8, 0, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
d1602 10
a1611 7
     MESA_FORMAT_RG_RGTC2_UNORM,
     "MESA_FORMAT_RG_RGTC2_UNORM",
     GL_RG,
     GL_UNSIGNED_NORMALIZED,
     8, 8, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
d1614 7
a1620 7
     MESA_FORMAT_RG_RGTC2_SNORM,
     "MESA_FORMAT_RG_RGTC2_SNORM",
     GL_RG,
     GL_SIGNED_NORMALIZED,
     8, 8, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
a1621 2

   /* LATC1/2 compressed formats */
d1623 7
a1629 7
     MESA_FORMAT_L_LATC1_UNORM,
     "MESA_FORMAT_L_LATC1_UNORM",
     GL_LUMINANCE,
     GL_UNSIGNED_NORMALIZED,
     0, 0, 0, 0,
     4, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
d1632 7
a1638 7
     MESA_FORMAT_L_LATC1_SNORM,
     "MESA_FORMAT_L_LATC1_SNORM",
     GL_LUMINANCE,
     GL_SIGNED_NORMALIZED,
     0, 0, 0, 0,
     4, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
d1641 7
a1647 7
     MESA_FORMAT_LA_LATC2_UNORM,
     "MESA_FORMAT_LA_LATC2_UNORM",
     GL_LUMINANCE_ALPHA,
     GL_UNSIGNED_NORMALIZED,
     0, 0, 0, 4,
     4, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
d1650 7
a1656 7
     MESA_FORMAT_LA_LATC2_SNORM,
     "MESA_FORMAT_LA_LATC2_SNORM",
     GL_LUMINANCE_ALPHA,
     GL_SIGNED_NORMALIZED,
     0, 0, 0, 4,
     4, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
a1657 2

   /* ETC1/2 compressed formats */
d1659 2
a1660 2
      MESA_FORMAT_ETC1_RGB8,
      "MESA_FORMAT_ETC1_RGB8",
d1665 1
a1665 1
      4, 4, 8                     /* 8 bytes per 4x4 block */
d1668 2
a1669 2
      MESA_FORMAT_ETC2_RGB8,
      "MESA_FORMAT_ETC2_RGB8",
d1671 1
a1671 1
      GL_UNSIGNED_NORMALIZED,
d1674 1
a1674 1
      4, 4, 8                     /* 8 bytes per 4x4 block */
d1677 2
a1678 2
      MESA_FORMAT_ETC2_SRGB8,
      "MESA_FORMAT_ETC2_SRGB8",
d1680 1
a1680 1
      GL_UNSIGNED_NORMALIZED,
d1683 1
a1683 1
      4, 4, 8                     /* 8 bytes per 4x4 block */
d1686 3
a1688 3
      MESA_FORMAT_ETC2_RGBA8_EAC,
      "MESA_FORMAT_ETC2_RGBA8_EAC",
      GL_RGBA,
d1690 1
a1690 1
      8, 8, 8, 8,
d1692 1
a1692 1
      4, 4, 16                    /* 16 bytes per 4x4 block */
d1695 3
a1697 3
      MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC,
      "MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC",
      GL_RGBA,
d1699 10
a1708 1
      8, 8, 8, 8,
d1710 1
a1710 1
      4, 4, 16                    /* 16 bytes per 4x4 block */
d1713 5
a1717 5
      MESA_FORMAT_ETC2_R11_EAC,
      "MESA_FORMAT_ETC2_R11_EAC",
      GL_RED,
      GL_UNSIGNED_NORMALIZED,
      11, 0, 0, 0,
d1719 1
a1719 1
      4, 4, 8                    /* 8 bytes per 4x4 block */
d1722 5
a1726 5
      MESA_FORMAT_ETC2_RG11_EAC,
      "MESA_FORMAT_ETC2_RG11_EAC",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      11, 11, 0, 0,
d1728 1
a1728 1
      4, 4, 16                    /* 16 bytes per 4x4 block */
d1731 5
a1735 5
      MESA_FORMAT_ETC2_SIGNED_R11_EAC,
      "MESA_FORMAT_ETC2_SIGNED_R11_EAC",
      GL_RED,
      GL_SIGNED_NORMALIZED,
      11, 0, 0, 0,
d1737 1
a1737 1
      4, 4, 8                    /* 8 bytes per 4x4 block */
d1740 5
a1744 5
      MESA_FORMAT_ETC2_SIGNED_RG11_EAC,
      "MESA_FORMAT_ETC2_SIGNED_RG11_EAC",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      11, 11, 0, 0,
d1746 1
a1746 1
      4, 4, 16                    /* 16 bytes per 4x4 block */
d1749 5
a1753 5
      MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1,
      "MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 1,
d1755 1
a1755 1
      4, 4, 8                     /* 8 bytes per 4x4 block */
d1758 5
a1762 5
      MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1,
      "MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 1,
d1764 1
a1764 1
      4, 4, 8                     /* 8 bytes per 4x4 block */
d1771 1
a1771 1
_mesa_get_format_info(mesa_format format)
d1781 1
a1781 1
_mesa_get_format_name(mesa_format format)
d1797 1
a1797 1
_mesa_get_format_bytes(mesa_format format)
d1813 1
a1813 1
_mesa_get_format_bits(mesa_format format, GLenum pname)
d1862 1
a1862 1
_mesa_get_format_max_bits(mesa_format format)
d1887 1
a1887 1
_mesa_get_format_datatype(mesa_format format)
d1900 1
a1900 1
_mesa_get_format_base_format(mesa_format format)
d1915 1
a1915 1
_mesa_get_format_block_size(mesa_format format, GLuint *bw, GLuint *bh)
d1925 1
a1925 1
_mesa_is_format_compressed(mesa_format format)
d1936 1
a1936 1
_mesa_is_format_packed_depth_stencil(mesa_format format)
d1948 1
a1948 1
_mesa_is_format_integer_color(mesa_format format)
d1962 1
a1962 1
_mesa_is_format_unsigned(mesa_format format)
a1969 29
 * Does the given format store signed values?
 */
GLboolean
_mesa_is_format_signed(mesa_format format)
{
   if (format == MESA_FORMAT_R11G11B10_FLOAT || 
       format == MESA_FORMAT_R9G9B9E5_FLOAT) {
      /* these packed float formats only store unsigned values */
      return GL_FALSE;
   }
   else {
      const struct gl_format_info *info = _mesa_get_format_info(format);
      return (info->DataType == GL_SIGNED_NORMALIZED ||
              info->DataType == GL_INT ||
              info->DataType == GL_FLOAT);
   }
}

/**
 * Is the given format an integer format?
 */
GLboolean
_mesa_is_format_integer(mesa_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return (info->DataType == GL_INT || info->DataType == GL_UNSIGNED_INT);
}

/**
d1974 1
a1974 1
_mesa_get_format_color_encoding(mesa_format format)
d1978 5
a1982 6
   case MESA_FORMAT_BGR_SRGB8:
   case MESA_FORMAT_A8B8G8R8_SRGB:
   case MESA_FORMAT_B8G8R8A8_SRGB:
   case MESA_FORMAT_R8G8B8A8_SRGB:
   case MESA_FORMAT_L_SRGB8:
   case MESA_FORMAT_L8A8_SRGB:
d1987 1
a1987 5
   case MESA_FORMAT_R8G8B8X8_SRGB:
   case MESA_FORMAT_ETC2_SRGB8:
   case MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC:
   case MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1:
   case MESA_FORMAT_B8G8R8X8_SRGB:
d1999 2
a2000 2
mesa_format
_mesa_get_srgb_format_linear(mesa_format format)
d2003 2
a2004 2
   case MESA_FORMAT_BGR_SRGB8:
      format = MESA_FORMAT_BGR_UNORM8;
d2006 2
a2007 2
   case MESA_FORMAT_A8B8G8R8_SRGB:
      format = MESA_FORMAT_A8B8G8R8_UNORM;
d2009 2
a2010 2
   case MESA_FORMAT_B8G8R8A8_SRGB:
      format = MESA_FORMAT_B8G8R8A8_UNORM;
d2012 2
a2013 2
   case MESA_FORMAT_R8G8B8A8_SRGB:
      format = MESA_FORMAT_R8G8B8A8_UNORM;
d2015 2
a2016 5
   case MESA_FORMAT_L_SRGB8:
      format = MESA_FORMAT_L_UNORM8;
      break;
   case MESA_FORMAT_L8A8_SRGB:
      format = MESA_FORMAT_L8A8_UNORM;
d2030 2
a2031 14
   case MESA_FORMAT_R8G8B8X8_SRGB:
      format = MESA_FORMAT_R8G8B8X8_UNORM;
      break;
   case MESA_FORMAT_ETC2_SRGB8:
      format = MESA_FORMAT_ETC2_RGB8;
      break;
   case MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC:
      format = MESA_FORMAT_ETC2_RGBA8_EAC;
      break;
   case MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1:
      format = MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1;
      break;
   case MESA_FORMAT_B8G8R8X8_SRGB:
      format = MESA_FORMAT_B8G8R8X8_UNORM;
d2044 2
a2045 2
mesa_format
_mesa_get_uncompressed_format(mesa_format format)
d2049 1
a2049 1
      return MESA_FORMAT_BGR_UNORM8;
d2051 1
a2051 1
      return MESA_FORMAT_A8B8G8R8_UNORM;
d2054 1
a2054 1
      return MESA_FORMAT_BGR_UNORM8;
d2057 1
a2057 1
      return MESA_FORMAT_A8B8G8R8_UNORM;
d2060 1
a2060 1
      return MESA_FORMAT_A8B8G8R8_UNORM;
d2063 17
a2079 17
      return MESA_FORMAT_A8B8G8R8_UNORM;
   case MESA_FORMAT_R_RGTC1_UNORM:
      return MESA_FORMAT_R_UNORM8;
   case MESA_FORMAT_R_RGTC1_SNORM:
      return MESA_FORMAT_R_SNORM8;
   case MESA_FORMAT_RG_RGTC2_UNORM:
      return MESA_FORMAT_R8G8_UNORM;
   case MESA_FORMAT_RG_RGTC2_SNORM:
      return MESA_FORMAT_R8G8_SNORM;
   case MESA_FORMAT_L_LATC1_UNORM:
      return MESA_FORMAT_L_UNORM8;
   case MESA_FORMAT_L_LATC1_SNORM:
      return MESA_FORMAT_L_SNORM8;
   case MESA_FORMAT_LA_LATC2_UNORM:
      return MESA_FORMAT_L8A8_UNORM;
   case MESA_FORMAT_LA_LATC2_SNORM:
      return MESA_FORMAT_L8A8_SNORM;
d2083 1
a2083 1
      return MESA_FORMAT_BGR_UNORM8;
d2088 1
a2088 1
      return MESA_FORMAT_A8B8G8R8_UNORM;
d2091 1
a2091 1
      return MESA_FORMAT_R_UNORM16;
d2094 1
a2094 1
      return MESA_FORMAT_R16G16_UNORM;
d2105 1
a2105 1
_mesa_format_num_components(mesa_format format)
a2119 29
 * Returns true if a color format has data stored in the R/G/B/A channels,
 * given an index from 0 to 3.
 */
bool
_mesa_format_has_color_component(mesa_format format, int component)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);

   assert(info->BaseFormat != GL_DEPTH_COMPONENT &&
          info->BaseFormat != GL_DEPTH_STENCIL &&
          info->BaseFormat != GL_STENCIL_INDEX);

   switch (component) {
   case 0:
      return (info->RedBits + info->IntensityBits + info->LuminanceBits) > 0;
   case 1:
      return (info->GreenBits + info->IntensityBits + info->LuminanceBits) > 0;
   case 2:
      return (info->BlueBits + info->IntensityBits + info->LuminanceBits) > 0;
   case 3:
      return (info->AlphaBits + info->IntensityBits) > 0;
   default:
      assert(!"Invalid color component: must be 0..3");
      return false;
   }
}


/**
d2124 1
a2124 1
_mesa_format_image_size(mesa_format format, GLsizei width,
d2150 1
a2150 1
_mesa_format_image_size64(mesa_format format, GLsizei width,
d2176 1
a2176 1
_mesa_format_row_stride(mesa_format format, GLsizei width)
d2203 1
a2203 1
   mesa_format f;
d2308 1
a2308 1
 * Return datatype and number of components per texel for the given mesa_format.
d2312 1
a2312 1
_mesa_format_to_type_and_comps(mesa_format format,
d2316 8
a2323 8
   case MESA_FORMAT_A8B8G8R8_UNORM:
   case MESA_FORMAT_R8G8B8A8_UNORM:
   case MESA_FORMAT_B8G8R8A8_UNORM:
   case MESA_FORMAT_A8R8G8B8_UNORM:
   case MESA_FORMAT_X8B8G8R8_UNORM:
   case MESA_FORMAT_R8G8B8X8_UNORM:
   case MESA_FORMAT_B8G8R8X8_UNORM:
   case MESA_FORMAT_X8R8G8B8_UNORM:
d2327 2
a2328 2
   case MESA_FORMAT_BGR_UNORM8:
   case MESA_FORMAT_RGB_UNORM8:
d2332 2
a2333 2
   case MESA_FORMAT_B5G6R5_UNORM:
   case MESA_FORMAT_R5G6B5_UNORM:
d2338 3
a2340 3
   case MESA_FORMAT_B4G4R4A4_UNORM:
   case MESA_FORMAT_A4R4G4B4_UNORM:
   case MESA_FORMAT_B4G4R4X4_UNORM:
d2345 3
a2347 3
   case MESA_FORMAT_B5G5R5A1_UNORM:
   case MESA_FORMAT_A1R5G5B5_UNORM:
   case MESA_FORMAT_B5G5R5X1_UNORM:
d2352 1
a2352 1
   case MESA_FORMAT_B10G10R10A2_UNORM:
d2357 1
a2357 1
   case MESA_FORMAT_A1B5G5R5_UNORM:
d2362 1
a2362 1
   case MESA_FORMAT_L4A4_UNORM:
d2367 4
a2370 4
   case MESA_FORMAT_L8A8_UNORM:
   case MESA_FORMAT_A8L8_UNORM:
   case MESA_FORMAT_R8G8_UNORM:
   case MESA_FORMAT_G8R8_UNORM:
d2375 4
a2378 4
   case MESA_FORMAT_L16A16_UNORM:
   case MESA_FORMAT_A16L16_UNORM:
   case MESA_FORMAT_R16G16_UNORM:
   case MESA_FORMAT_G16R16_UNORM:
d2383 4
a2386 4
   case MESA_FORMAT_R_UNORM16:
   case MESA_FORMAT_A_UNORM16:
   case MESA_FORMAT_L_UNORM16:
   case MESA_FORMAT_I_UNORM16:
d2391 1
a2391 1
   case MESA_FORMAT_B2G3R3_UNORM:
d2396 5
a2400 5
   case MESA_FORMAT_A_UNORM8:
   case MESA_FORMAT_L_UNORM8:
   case MESA_FORMAT_I_UNORM8:
   case MESA_FORMAT_R_UNORM8:
   case MESA_FORMAT_S_UINT8:
d2411 1
a2411 1
   case MESA_FORMAT_S8_UINT_Z24_UNORM:
d2416 1
a2416 1
   case MESA_FORMAT_Z24_UNORM_S8_UINT:
d2421 1
a2421 1
   case MESA_FORMAT_Z_UNORM16:
d2426 1
a2426 1
   case MESA_FORMAT_Z24_UNORM_X8_UINT:
d2431 1
a2431 1
   case MESA_FORMAT_X8_UINT_Z24_UNORM:
d2436 1
a2436 1
   case MESA_FORMAT_Z_UNORM32:
d2441 1
a2441 1
   case MESA_FORMAT_Z_FLOAT32:
d2446 1
a2446 1
   case MESA_FORMAT_Z32_FLOAT_S8X24_UINT:
d2456 4
a2459 4
   case MESA_FORMAT_R_SNORM8:
   case MESA_FORMAT_A_SNORM8:
   case MESA_FORMAT_L_SNORM8:
   case MESA_FORMAT_I_SNORM8:
d2463 2
a2464 2
   case MESA_FORMAT_R8G8_SNORM:
   case MESA_FORMAT_L8A8_SNORM:
d2468 3
a2470 3
   case MESA_FORMAT_A8B8G8R8_SNORM:
   case MESA_FORMAT_R8G8B8A8_SNORM:
   case MESA_FORMAT_X8B8G8R8_SNORM:
d2475 1
a2475 1
   case MESA_FORMAT_RGBA_UNORM16:
d2480 4
a2483 4
   case MESA_FORMAT_R_SNORM16:
   case MESA_FORMAT_A_SNORM16:
   case MESA_FORMAT_L_SNORM16:
   case MESA_FORMAT_I_SNORM16:
d2487 2
a2488 2
   case MESA_FORMAT_R16G16_SNORM:
   case MESA_FORMAT_LA_SNORM16:
d2492 1
a2492 1
   case MESA_FORMAT_RGB_SNORM16:
d2496 1
a2496 1
   case MESA_FORMAT_RGBA_SNORM16:
d2501 1
a2501 1
   case MESA_FORMAT_BGR_SRGB8:
d2505 2
a2506 3
   case MESA_FORMAT_A8B8G8R8_SRGB:
   case MESA_FORMAT_B8G8R8A8_SRGB:
   case MESA_FORMAT_R8G8B8A8_SRGB:
d2510 1
a2510 1
   case MESA_FORMAT_L_SRGB8:
d2514 1
a2514 1
   case MESA_FORMAT_L8A8_SRGB:
d2529 8
a2536 8
   case MESA_FORMAT_R_RGTC1_UNORM:
   case MESA_FORMAT_R_RGTC1_SNORM:
   case MESA_FORMAT_RG_RGTC2_UNORM:
   case MESA_FORMAT_RG_RGTC2_SNORM:
   case MESA_FORMAT_L_LATC1_UNORM:
   case MESA_FORMAT_L_LATC1_SNORM:
   case MESA_FORMAT_LA_LATC2_UNORM:
   case MESA_FORMAT_LA_LATC2_SNORM:
d2569 1
a2569 1
   case MESA_FORMAT_LA_FLOAT32:
d2574 1
a2574 1
   case MESA_FORMAT_LA_FLOAT16:
d2579 3
a2581 3
   case MESA_FORMAT_A_FLOAT32:
   case MESA_FORMAT_L_FLOAT32:
   case MESA_FORMAT_I_FLOAT32:
d2586 3
a2588 3
   case MESA_FORMAT_A_FLOAT16:
   case MESA_FORMAT_L_FLOAT16:
   case MESA_FORMAT_I_FLOAT16:
d2594 3
a2596 3
   case MESA_FORMAT_A_UINT8:
   case MESA_FORMAT_L_UINT8:
   case MESA_FORMAT_I_UINT8:
d2600 1
a2600 1
   case MESA_FORMAT_LA_UINT8:
d2605 3
a2607 3
   case MESA_FORMAT_A_UINT16:
   case MESA_FORMAT_L_UINT16:
   case MESA_FORMAT_I_UINT16:
d2611 1
a2611 1
   case MESA_FORMAT_LA_UINT16:
d2615 3
a2617 3
   case MESA_FORMAT_A_UINT32:
   case MESA_FORMAT_L_UINT32:
   case MESA_FORMAT_I_UINT32:
d2621 1
a2621 1
   case MESA_FORMAT_LA_UINT32:
d2625 3
a2627 3
   case MESA_FORMAT_A_SINT8:
   case MESA_FORMAT_L_SINT8:
   case MESA_FORMAT_I_SINT8:
d2631 1
a2631 1
   case MESA_FORMAT_LA_SINT8:
d2636 3
a2638 3
   case MESA_FORMAT_A_SINT16:
   case MESA_FORMAT_L_SINT16:
   case MESA_FORMAT_I_SINT16:
d2642 1
a2642 1
   case MESA_FORMAT_LA_SINT16:
d2647 3
a2649 3
   case MESA_FORMAT_A_SINT32:
   case MESA_FORMAT_L_SINT32:
   case MESA_FORMAT_I_SINT32:
d2653 1
a2653 1
   case MESA_FORMAT_LA_SINT32:
d2658 1
a2658 1
   case MESA_FORMAT_R_SINT8:
d2662 1
a2662 1
   case MESA_FORMAT_RG_SINT8:
d2666 1
a2666 1
   case MESA_FORMAT_RGB_SINT8:
d2670 1
a2670 1
   case MESA_FORMAT_RGBA_SINT8:
d2674 1
a2674 1
   case MESA_FORMAT_R_SINT16:
d2678 1
a2678 1
   case MESA_FORMAT_RG_SINT16:
d2682 1
a2682 1
   case MESA_FORMAT_RGB_SINT16:
d2686 1
a2686 1
   case MESA_FORMAT_RGBA_SINT16:
d2690 1
a2690 1
   case MESA_FORMAT_R_SINT32:
d2694 1
a2694 1
   case MESA_FORMAT_RG_SINT32:
d2698 1
a2698 1
   case MESA_FORMAT_RGB_SINT32:
d2702 1
a2702 1
   case MESA_FORMAT_RGBA_SINT32:
d2759 1
a2759 1
   case MESA_FORMAT_R9G9B9E5_FLOAT:
d2764 1
a2764 1
   case MESA_FORMAT_R11G11B10_FLOAT:
d2769 2
a2770 2
   case MESA_FORMAT_B10G10R10A2_UINT:
   case MESA_FORMAT_R10G10B10A2_UINT:
d2775 2
a2776 2
   case MESA_FORMAT_R8G8B8X8_SRGB:
   case MESA_FORMAT_RGBX_UINT8:
d2781 2
a2782 2
   case MESA_FORMAT_R8G8B8X8_SNORM:
   case MESA_FORMAT_RGBX_SINT8:
d2787 1
a2787 1
   case MESA_FORMAT_B10G10R10X2_UNORM:
d2792 2
a2793 2
   case MESA_FORMAT_RGBX_UNORM16:
   case MESA_FORMAT_RGBX_UINT16:
d2798 2
a2799 2
   case MESA_FORMAT_RGBX_SNORM16:
   case MESA_FORMAT_RGBX_SINT16:
d2804 1
a2804 1
   case MESA_FORMAT_RGBX_FLOAT16:
d2809 1
a2809 1
   case MESA_FORMAT_RGBX_FLOAT32:
d2814 1
a2814 1
   case MESA_FORMAT_RGBX_UINT32:
d2819 1
a2819 1
   case MESA_FORMAT_RGBX_SINT32:
a2823 20
   case MESA_FORMAT_R10G10B10A2_UNORM:
      *datatype = GL_UNSIGNED_INT_2_10_10_10_REV;
      *comps = 4;
      return;

   case MESA_FORMAT_G8R8_SNORM:
      *datatype = GL_BYTE;
      *comps = 2;
      return;

   case MESA_FORMAT_G16R16_SNORM:
      *datatype = GL_SHORT;
      *comps = 2;
      return;

   case MESA_FORMAT_B8G8R8X8_SRGB:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;

d2841 1
a2841 1
 * Check if a mesa_format exactly matches a GL format/type combination
d2843 1
a2843 1
 * \param mesa_format  a MESA_FORMAT_x value
d2850 1
a2850 1
_mesa_format_matches_format_and_type(mesa_format mesa_format,
d2865 1
a2865 1
   switch (mesa_format) {
d2871 2
a2872 2
   case MESA_FORMAT_A8B8G8R8_UNORM:
   case MESA_FORMAT_A8B8G8R8_SRGB:
d2895 1
a2895 2
   case MESA_FORMAT_R8G8B8A8_UNORM:
   case MESA_FORMAT_R8G8B8A8_SRGB:
d2919 2
a2920 2
   case MESA_FORMAT_B8G8R8A8_UNORM:
   case MESA_FORMAT_B8G8R8A8_SRGB:
d2933 1
a2933 1
   case MESA_FORMAT_A8R8G8B8_UNORM:
d2946 2
a2947 2
   case MESA_FORMAT_X8B8G8R8_UNORM:
   case MESA_FORMAT_R8G8B8X8_UNORM:
d2950 2
a2951 2
   case MESA_FORMAT_B8G8R8X8_UNORM:
   case MESA_FORMAT_X8R8G8B8_UNORM:
d2954 2
a2955 2
   case MESA_FORMAT_BGR_UNORM8:
   case MESA_FORMAT_BGR_SRGB8:
d2958 1
a2958 1
   case MESA_FORMAT_RGB_UNORM8:
d2961 1
a2961 1
   case MESA_FORMAT_B5G6R5_UNORM:
d2964 1
a2964 1
   case MESA_FORMAT_R5G6B5_UNORM:
d2971 1
a2971 1
   case MESA_FORMAT_B4G4R4A4_UNORM:
d2975 1
a2975 1
   case MESA_FORMAT_A4R4G4B4_UNORM:
d2978 1
a2978 1
   case MESA_FORMAT_A1B5G5R5_UNORM:
d2982 1
a2982 1
   case MESA_FORMAT_B5G5R5A1_UNORM:
d2986 1
a2986 1
   case MESA_FORMAT_A1R5G5B5_UNORM:
d2989 1
a2989 1
   case MESA_FORMAT_L4A4_UNORM:
d2991 2
a2992 2
   case MESA_FORMAT_L8A8_UNORM:
   case MESA_FORMAT_L8A8_SRGB:
d2994 1
a2994 1
   case MESA_FORMAT_A8L8_UNORM:
d2997 1
a2997 1
   case MESA_FORMAT_L16A16_UNORM:
d2999 1
a2999 1
   case MESA_FORMAT_A16L16_UNORM:
d3002 1
a3002 1
   case MESA_FORMAT_B2G3R3_UNORM:
d3005 1
a3005 1
   case MESA_FORMAT_A_UNORM8:
d3007 1
a3007 1
   case MESA_FORMAT_A_UNORM16:
d3009 2
a3010 2
   case MESA_FORMAT_L_UNORM8:
   case MESA_FORMAT_L_SRGB8:
d3012 1
a3012 1
   case MESA_FORMAT_L_UNORM16:
d3014 4
a3017 4
   case MESA_FORMAT_I_UNORM8:
      return format == GL_RED && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_I_UNORM16:
      return format == GL_RED && type == GL_UNSIGNED_SHORT && !swapBytes;
d3028 1
a3028 1
   case MESA_FORMAT_R_UNORM8:
d3030 1
a3030 1
   case MESA_FORMAT_R8G8_UNORM:
d3032 1
a3032 1
   case MESA_FORMAT_G8R8_UNORM:
d3035 1
a3035 1
   case MESA_FORMAT_R_UNORM16:
d3038 1
a3038 1
   case MESA_FORMAT_R16G16_UNORM:
d3041 1
a3041 1
   case MESA_FORMAT_G16R16_UNORM:
d3044 1
a3044 1
   case MESA_FORMAT_B10G10R10A2_UNORM:
d3048 1
a3048 1
   case MESA_FORMAT_S8_UINT_Z24_UNORM:
d3051 2
a3052 2
   case MESA_FORMAT_X8_UINT_Z24_UNORM:
   case MESA_FORMAT_Z24_UNORM_S8_UINT:
d3055 1
a3055 1
   case MESA_FORMAT_Z_UNORM16:
d3059 1
a3059 1
   case MESA_FORMAT_Z24_UNORM_X8_UINT:
d3062 1
a3062 1
   case MESA_FORMAT_Z_UNORM32:
d3066 1
a3066 1
   case MESA_FORMAT_S_UINT8:
d3093 1
a3093 1
   case MESA_FORMAT_A_FLOAT32:
d3095 1
a3095 1
   case MESA_FORMAT_A_FLOAT16:
d3098 1
a3098 1
   case MESA_FORMAT_L_FLOAT32:
d3100 1
a3100 1
   case MESA_FORMAT_L_FLOAT16:
d3103 1
a3103 1
   case MESA_FORMAT_LA_FLOAT32:
d3105 1
a3105 1
   case MESA_FORMAT_LA_FLOAT16:
d3108 4
a3111 4
   case MESA_FORMAT_I_FLOAT32:
      return format == GL_RED && type == GL_FLOAT && !swapBytes;
   case MESA_FORMAT_I_FLOAT16:
      return format == GL_RED && type == GL_HALF_FLOAT && !swapBytes;
d3123 1
a3123 1
   case MESA_FORMAT_A_UINT8:
d3125 1
a3125 1
   case MESA_FORMAT_A_UINT16:
d3128 1
a3128 1
   case MESA_FORMAT_A_UINT32:
d3131 1
a3131 1
   case MESA_FORMAT_A_SINT8:
d3133 1
a3133 1
   case MESA_FORMAT_A_SINT16:
d3135 1
a3135 1
   case MESA_FORMAT_A_SINT32:
d3138 8
a3145 12
   case MESA_FORMAT_I_UINT8:
      return format == GL_RED_INTEGER && type == GL_UNSIGNED_BYTE;
   case MESA_FORMAT_I_UINT16:
      return format == GL_RED_INTEGER && type == GL_UNSIGNED_SHORT && !swapBytes;
   case MESA_FORMAT_I_UINT32:
      return format == GL_RED_INTEGER && type == GL_UNSIGNED_INT && !swapBytes;
   case MESA_FORMAT_I_SINT8:
      return format == GL_RED_INTEGER && type == GL_BYTE;
   case MESA_FORMAT_I_SINT16:
      return format == GL_RED_INTEGER && type == GL_SHORT && !swapBytes;
   case MESA_FORMAT_I_SINT32:
      return format == GL_RED_INTEGER && type == GL_INT && !swapBytes;
d3147 1
a3147 1
   case MESA_FORMAT_L_UINT8:
d3149 1
a3149 1
   case MESA_FORMAT_L_UINT16:
d3152 1
a3152 1
   case MESA_FORMAT_L_UINT32:
d3155 1
a3155 1
   case MESA_FORMAT_L_SINT8:
d3157 1
a3157 1
   case MESA_FORMAT_L_SINT16:
d3160 1
a3160 1
   case MESA_FORMAT_L_SINT32:
d3163 1
a3163 1
   case MESA_FORMAT_LA_UINT8:
d3166 1
a3166 1
   case MESA_FORMAT_LA_UINT16:
d3169 1
a3169 1
   case MESA_FORMAT_LA_UINT32:
d3172 1
a3172 1
   case MESA_FORMAT_LA_SINT8:
d3175 1
a3175 1
   case MESA_FORMAT_LA_SINT16:
d3178 1
a3178 1
   case MESA_FORMAT_LA_SINT32:
d3182 1
a3182 1
   case MESA_FORMAT_R_SINT8:
d3184 1
a3184 1
   case MESA_FORMAT_RG_SINT8:
d3186 1
a3186 1
   case MESA_FORMAT_RGB_SINT8:
d3188 1
a3188 1
   case MESA_FORMAT_RGBA_SINT8:
d3190 1
a3190 1
   case MESA_FORMAT_R_SINT16:
d3192 1
a3192 1
   case MESA_FORMAT_RG_SINT16:
d3194 1
a3194 1
   case MESA_FORMAT_RGB_SINT16:
d3196 1
a3196 1
   case MESA_FORMAT_RGBA_SINT16:
d3198 1
a3198 1
   case MESA_FORMAT_R_SINT32:
d3200 1
a3200 1
   case MESA_FORMAT_RG_SINT32:
d3202 1
a3202 1
   case MESA_FORMAT_RGB_SINT32:
d3204 1
a3204 1
   case MESA_FORMAT_RGBA_SINT32:
d3240 1
a3240 1
   case MESA_FORMAT_R_SNORM8:
d3242 1
a3242 1
   case MESA_FORMAT_R8G8_SNORM:
d3245 1
a3245 1
   case MESA_FORMAT_X8B8G8R8_SNORM:
d3248 1
a3248 1
   case MESA_FORMAT_A8B8G8R8_SNORM:
d3257 1
a3257 1
   case MESA_FORMAT_R8G8B8A8_SNORM:
d3266 1
a3266 1
   case MESA_FORMAT_R_SNORM16:
d3269 1
a3269 1
   case MESA_FORMAT_R16G16_SNORM:
d3271 1
a3271 1
   case MESA_FORMAT_RGB_SNORM16:
d3273 1
a3273 1
   case MESA_FORMAT_RGBA_SNORM16:
d3275 1
a3275 1
   case MESA_FORMAT_RGBA_UNORM16:
d3279 4
a3282 4
   case MESA_FORMAT_R_RGTC1_UNORM:
   case MESA_FORMAT_R_RGTC1_SNORM:
   case MESA_FORMAT_RG_RGTC2_UNORM:
   case MESA_FORMAT_RG_RGTC2_SNORM:
d3285 4
a3288 4
   case MESA_FORMAT_L_LATC1_UNORM:
   case MESA_FORMAT_L_LATC1_SNORM:
   case MESA_FORMAT_LA_LATC2_UNORM:
   case MESA_FORMAT_LA_LATC2_SNORM:
d3304 1
a3304 1
   case MESA_FORMAT_A_SNORM8:
d3306 1
a3306 1
   case MESA_FORMAT_L_SNORM8:
d3308 1
a3308 1
   case MESA_FORMAT_L8A8_SNORM:
d3311 3
a3313 3
   case MESA_FORMAT_I_SNORM8:
      return format == GL_RED && type == GL_BYTE;
   case MESA_FORMAT_A_SNORM16:
d3315 1
a3315 1
   case MESA_FORMAT_L_SNORM16:
d3317 1
a3317 1
   case MESA_FORMAT_LA_SNORM16:
d3320 2
a3321 2
   case MESA_FORMAT_I_SNORM16:
      return format == GL_RED && type == GL_SHORT && littleEndian &&
d3324 1
a3324 1
   case MESA_FORMAT_B10G10R10A2_UINT:
d3329 1
a3329 1
   case MESA_FORMAT_R10G10B10A2_UINT:
d3334 1
a3334 1
   case MESA_FORMAT_R9G9B9E5_FLOAT:
d3338 1
a3338 1
   case MESA_FORMAT_R11G11B10_FLOAT:
d3342 1
a3342 1
   case MESA_FORMAT_Z_FLOAT32:
d3345 1
a3345 1
   case MESA_FORMAT_Z32_FLOAT_S8X24_UINT:
d3349 15
a3363 30
   case MESA_FORMAT_B4G4R4X4_UNORM:
   case MESA_FORMAT_B5G5R5X1_UNORM:
   case MESA_FORMAT_R8G8B8X8_SNORM:
   case MESA_FORMAT_R8G8B8X8_SRGB:
   case MESA_FORMAT_RGBX_UINT8:
   case MESA_FORMAT_RGBX_SINT8:
   case MESA_FORMAT_B10G10R10X2_UNORM:
   case MESA_FORMAT_RGBX_UNORM16:
   case MESA_FORMAT_RGBX_SNORM16:
   case MESA_FORMAT_RGBX_FLOAT16:
   case MESA_FORMAT_RGBX_UINT16:
   case MESA_FORMAT_RGBX_SINT16:
   case MESA_FORMAT_RGBX_FLOAT32:
   case MESA_FORMAT_RGBX_UINT32:
   case MESA_FORMAT_RGBX_SINT32:
      return GL_FALSE;

   case MESA_FORMAT_R10G10B10A2_UNORM:
      return format == GL_RGBA && type == GL_UNSIGNED_INT_2_10_10_10_REV &&
         !swapBytes;

   case MESA_FORMAT_G8R8_SNORM:
      return format == GL_RG && type == GL_BYTE && !littleEndian &&
         !swapBytes;

   case MESA_FORMAT_G16R16_SNORM:
      return format == GL_RG && type == GL_SHORT && !littleEndian &&
         !swapBytes;

   case MESA_FORMAT_B8G8R8X8_SRGB:
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a42 2
   enum mesa_format_layout Layout;

d46 1
a46 1
    * GL_DEPTH_COMPONENT, GL_STENCIL_INDEX, GL_DEPTH_STENCIL.
d62 1
d71 1
d73 1743
a1815 1
   uint8_t Swizzle[4];
d1818 1
a1818 1
#include "format_info.c"
d1893 1
a1893 1
      return 0;
a1926 15
 * Return the layout type of the given format.
 * The return value will be one of:
 *    MESA_FORMAT_LAYOUT_ARRAY
 *    MESA_FORMAT_LAYOUT_PACKED
 *    MESA_FORMAT_LAYOUT_OTHER
 */
extern enum mesa_format_layout
_mesa_get_format_layout(mesa_format format)
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   return info->Layout;
}


/**
a1972 27
/**
 * Returns the an array of four numbers representing the transformation
 * from the RGBA or SZ colorspace to the given format.  For array formats,
 * the i'th RGBA component is given by:
 *
 * if (swizzle[i] <= MESA_FORMAT_SWIZZLE_W)
 *    comp = data[swizzle[i]];
 * else if (swizzle[i] == MESA_FORMAT_SWIZZLE_ZERO)
 *    comp = 0;
 * else if (swizzle[i] == MESA_FORMAT_SWIZZLE_ONE)
 *    comp = 1;
 * else if (swizzle[i] == MESA_FORMAT_SWIZZLE_NONE)
 *    // data does not contain a channel of this format
 *
 * For packed formats, the swizzle gives the number of components left of
 * the least significant bit.
 *
 * Compressed formats have no swizzle.
 */
void
_mesa_get_format_swizzle(mesa_format format, uint8_t swizzle_out[4])
{
   const struct gl_format_info *info = _mesa_get_format_info(format);
   memcpy(swizzle_out, info->Swizzle, sizeof(info->Swizzle));
}


a2059 1
   case MESA_FORMAT_A8R8G8B8_SRGB:
a2062 1
   case MESA_FORMAT_A8L8_SRGB:
a2071 1
   case MESA_FORMAT_BPTC_SRGB_ALPHA_UNORM:
a2079 25
 * Return TRUE if format is an ETC2 compressed format specified
 * by GL_ARB_ES3_compatibility.
 */
bool
_mesa_is_format_etc2(mesa_format format)
{
   switch (format) {
   case MESA_FORMAT_ETC2_RGB8:
   case MESA_FORMAT_ETC2_SRGB8:
   case MESA_FORMAT_ETC2_RGBA8_EAC:
   case MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC:
   case MESA_FORMAT_ETC2_R11_EAC:
   case MESA_FORMAT_ETC2_RG11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_R11_EAC:
   case MESA_FORMAT_ETC2_SIGNED_RG11_EAC:
   case MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1:
   case MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1:
      return GL_TRUE;
   default:
      return GL_FALSE;
   }
}


/**
a2095 3
   case MESA_FORMAT_A8R8G8B8_SRGB:
      format = MESA_FORMAT_A8R8G8B8_UNORM;
      break;
a2104 3
   case MESA_FORMAT_A8L8_SRGB:
      format = MESA_FORMAT_A8L8_UNORM;
      break;
a2119 3
   case MESA_FORMAT_X8B8G8R8_SRGB:
      format = MESA_FORMAT_X8B8G8R8_UNORM;
      break;
a2128 3
   case MESA_FORMAT_BPTC_SRGB_ALPHA_UNORM:
      format = MESA_FORMAT_BPTC_RGBA_UNORM;
      break;
a2131 3
   case MESA_FORMAT_X8R8G8B8_SRGB:
      format = MESA_FORMAT_X8R8G8B8_UNORM;
      break;
a2193 6
   case MESA_FORMAT_BPTC_RGBA_UNORM:
   case MESA_FORMAT_BPTC_SRGB_ALPHA_UNORM:
      return MESA_FORMAT_A8B8G8R8_UNORM;
   case MESA_FORMAT_BPTC_RGB_UNSIGNED_FLOAT:
   case MESA_FORMAT_BPTC_RGB_SIGNED_FLOAT:
      return MESA_FORMAT_RGB_FLOAT32;
d2343 1
d2579 5
a2592 1
   case MESA_FORMAT_A8L8_SNORM:
a2634 1
   case MESA_FORMAT_A8R8G8B8_SRGB:
a2643 1
   case MESA_FORMAT_A8L8_SRGB:
a2676 4
   case MESA_FORMAT_BPTC_RGBA_UNORM:
   case MESA_FORMAT_BPTC_SRGB_ALPHA_UNORM:
   case MESA_FORMAT_BPTC_RGB_SIGNED_FLOAT:
   case MESA_FORMAT_BPTC_RGB_UNSIGNED_FLOAT:
a2904 1
   case MESA_FORMAT_X8B8G8R8_SRGB:
a2968 1
   case MESA_FORMAT_X8R8G8B8_SRGB:
a3083 1
   case MESA_FORMAT_A8R8G8B8_SRGB:
a3144 1
   case MESA_FORMAT_A8L8_SRGB:
a3232 6
   case MESA_FORMAT_BPTC_RGBA_UNORM:
   case MESA_FORMAT_BPTC_SRGB_ALPHA_UNORM:
   case MESA_FORMAT_BPTC_RGB_SIGNED_FLOAT:
   case MESA_FORMAT_BPTC_RGB_UNSIGNED_FLOAT:
      return GL_FALSE;

d3390 4
a3464 3
   case MESA_FORMAT_A8L8_SNORM:
      return format == GL_LUMINANCE_ALPHA && type == GL_BYTE &&
             !littleEndian && !swapBytes;
a3506 1
   case MESA_FORMAT_X8B8G8R8_SRGB:
a3532 1
   case MESA_FORMAT_X8R8G8B8_SRGB:
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d43 2
d48 1
a48 1
    * GL_DEPTH_COMPONENT, GL_STENCIL_INDEX, GL_DEPTH_STENCIL, GL_DUDV_ATI.
a63 1
   GLubyte IndexBits;
a71 1
};
d73 1
a73 1743

/**
 * Info about each format.
 * These must be in the same order as the MESA_FORMAT_* enums so that
 * we can do lookups without searching.
 */
static struct gl_format_info format_info[MESA_FORMAT_COUNT] =
{
   /* Packed unorm formats */
   {
      MESA_FORMAT_NONE,            /* Name */
      "MESA_FORMAT_NONE",          /* StrName */
      GL_NONE,                     /* BaseFormat */
      GL_NONE,                     /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      0, 0, 0                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A8B8G8R8_UNORM,  /* Name */
      "MESA_FORMAT_A8B8G8R8_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_X8B8G8R8_UNORM,  /* Name */
      "MESA_FORMAT_X8B8G8R8_UNORM",/* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R8G8B8A8_UNORM,  /* Name */
      "MESA_FORMAT_R8G8B8A8_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R8G8B8X8_UNORM,  /* Name */
      "MESA_FORMAT_R8G8B8X8_UNORM",/* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B8G8R8A8_UNORM,  /* Name */
      "MESA_FORMAT_B8G8R8A8_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B8G8R8X8_UNORM,  /* Name */
      "MESA_FORMAT_B8G8R8X8_UNORM",/* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A8R8G8B8_UNORM,  /* Name */
      "MESA_FORMAT_A8R8G8B8_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_X8R8G8B8_UNORM,  /* Name */
      "MESA_FORMAT_X8R8G8B8_UNORM",/* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_L16A16_UNORM,    /* Name */
      "MESA_FORMAT_L16A16_UNORM",  /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 16,                 /* Red/Green/Blue/AlphaBits */
      16, 0, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A16L16_UNORM,    /* Name */
      "MESA_FORMAT_A16L16_UNORM",  /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 16,                 /* Red/Green/Blue/AlphaBits */
      16, 0, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B5G6R5_UNORM,    /* Name */
      "MESA_FORMAT_B5G6R5_UNORM",  /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 6, 5, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R5G6B5_UNORM,    /* Name */
      "MESA_FORMAT_R5G6B5_UNORM",  /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 6, 5, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B4G4R4A4_UNORM,  /* Name */
      "MESA_FORMAT_B4G4R4A4_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 4,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B4G4R4X4_UNORM,
      "MESA_FORMAT_B4G4R4X4_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A4R4G4B4_UNORM,  /* Name */
      "MESA_FORMAT_A4R4G4B4_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 4,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A1B5G5R5_UNORM,  /* Name */
      "MESA_FORMAT_A1B5G5R5_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 5, 5, 1,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B5G5R5A1_UNORM,  /* Name */
      "MESA_FORMAT_B5G5R5A1_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 5, 5, 1,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B5G5R5X1_UNORM,
      "MESA_FORMAT_B5G5R5X1_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      5, 5, 5, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A1R5G5B5_UNORM,  /* Name */
      "MESA_FORMAT_A1R5G5B5_UNORM",/* StrName */
      GL_RGBA,                     /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      5, 5, 5, 1,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_L8A8_UNORM,      /* Name */
      "MESA_FORMAT_L8A8_UNORM",    /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 8,                  /* Red/Green/Blue/AlphaBits */
      8, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A8L8_UNORM,      /* Name */
      "MESA_FORMAT_A8L8_UNORM",    /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 8,                  /* Red/Green/Blue/AlphaBits */
      8, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R8G8_UNORM,
      "MESA_FORMAT_R8G8_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_G8R8_UNORM,
      "MESA_FORMAT_G8R8_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L4A4_UNORM,      /* Name */
      "MESA_FORMAT_L4A4_UNORM",    /* StrName */
      GL_LUMINANCE_ALPHA,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 4,                  /* Red/Green/Blue/AlphaBits */
      4, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_B2G3R3_UNORM,    /* Name */
      "MESA_FORMAT_B2G3R3_UNORM",  /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      3, 3, 2, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R16G16_UNORM,
      "MESA_FORMAT_R16G16_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_G16R16_UNORM,
      "MESA_FORMAT_G16R16_UNORM",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_B10G10R10A2_UNORM,
      "MESA_FORMAT_B10G10R10A2_UNORM",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_B10G10R10X2_UNORM,
      "MESA_FORMAT_B10G10R10X2_UNORM",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      10, 10, 10, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R10G10B10A2_UNORM,
      "MESA_FORMAT_R10G10B10A2_UNORM",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_S8_UINT_Z24_UNORM,   /* Name */
      "MESA_FORMAT_S8_UINT_Z24_UNORM", /* StrName */
      GL_DEPTH_STENCIL,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 8,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_X8_UINT_Z24_UNORM,   /* Name */
      "MESA_FORMAT_X8_UINT_Z24_UNORM", /* StrName */
      GL_DEPTH_COMPONENT,              /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 0,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_Z24_UNORM_S8_UINT,   /* Name */
      "MESA_FORMAT_Z24_UNORM_S8_UINT", /* StrName */
      GL_DEPTH_STENCIL,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 8,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_Z24_UNORM_X8_UINT,   /* Name */
      "MESA_FORMAT_Z24_UNORM_X8_UINT", /* StrName */
      GL_DEPTH_COMPONENT,              /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,          /* DataType */
      0, 0, 0, 0,                      /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 24, 0,                  /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                          /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_YCBCR,           /* Name */
      "MESA_FORMAT_YCBCR",         /* StrName */
      GL_YCBCR_MESA,               /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_YCBCR_REV,       /* Name */
      "MESA_FORMAT_YCBCR_REV",     /* StrName */
      GL_YCBCR_MESA,               /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },

   /* Array unorm formats */
   {
      MESA_FORMAT_DUDV8,
      "MESA_FORMAT_DUDV8",
      GL_DUDV_ATI,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A_UNORM8,        /* Name */
      "MESA_FORMAT_A_UNORM8",      /* StrName */
      GL_ALPHA,                    /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 8,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_A_UNORM16,       /* Name */
      "MESA_FORMAT_A_UNORM16",     /* StrName */
      GL_ALPHA,                    /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 16,                 /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_L_UNORM8,        /* Name */
      "MESA_FORMAT_L_UNORM8",      /* StrName */
      GL_LUMINANCE,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      8, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_L_UNORM16,       /* Name */
      "MESA_FORMAT_L_UNORM16",     /* StrName */
      GL_LUMINANCE,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      16, 0, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_I_UNORM8,        /* Name */
      "MESA_FORMAT_I_UNORM8",      /* StrName */
      GL_INTENSITY,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 8, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_I_UNORM16,       /* Name */
      "MESA_FORMAT_I_UNORM16",     /* StrName */
      GL_INTENSITY,                /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 16, 0, 0, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R_UNORM8,
      "MESA_FORMAT_R_UNORM8",
      GL_RED,
      GL_UNSIGNED_NORMALIZED,
      8, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_R_UNORM16,
      "MESA_FORMAT_R_UNORM16",
      GL_RED,
      GL_UNSIGNED_NORMALIZED,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_BGR_UNORM8,      /* Name */
      "MESA_FORMAT_BGR_UNORM8",    /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 3                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_RGB_UNORM8,      /* Name */
      "MESA_FORMAT_RGB_UNORM8",    /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      8, 8, 8, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 3                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_RGBA_UNORM16,
      "MESA_FORMAT_RGBA_UNORM16",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_UNORM16,
      "MESA_FORMAT_RGBX_UNORM16",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_Z_UNORM16,       /* Name */
      "MESA_FORMAT_Z_UNORM16",     /* StrName */
      GL_DEPTH_COMPONENT,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 16, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 2                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_Z_UNORM32,       /* Name */
      "MESA_FORMAT_Z_UNORM32",     /* StrName */
      GL_DEPTH_COMPONENT,          /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_S_UINT8,         /* Name */
      "MESA_FORMAT_S_UINT8",       /* StrName */
      GL_STENCIL_INDEX,            /* BaseFormat */
      GL_UNSIGNED_INT,             /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 8,               /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                      /* BlockWidth/Height,Bytes */
   },

   /* Packed signed/normalized formats */
   {
      MESA_FORMAT_A8B8G8R8_SNORM,
      "MESA_FORMAT_A8B8G8R8_SNORM",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_X8B8G8R8_SNORM,
      "MESA_FORMAT_X8B8G8R8_SNORM",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4                       /* 4 bpp, but no alpha */
   },
   {
      MESA_FORMAT_R8G8B8A8_SNORM,
      "MESA_FORMAT_R8G8B8A8_SNORM",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R8G8B8X8_SNORM,
      "MESA_FORMAT_R8G8B8X8_SNORM",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R16G16_SNORM,
      "MESA_FORMAT_R16G16_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_G16R16_SNORM,
      "MESA_FORMAT_G16R16_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R8G8_SNORM,
      "MESA_FORMAT_R8G8_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_G8R8_SNORM,
      "MESA_FORMAT_G8R8_SNORM",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L8A8_SNORM,
      "MESA_FORMAT_L8A8_SNORM",
      GL_LUMINANCE_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },

   /* Array signed/normalized formats */
   {
      MESA_FORMAT_A_SNORM8,
      "MESA_FORMAT_A_SNORM8",
      GL_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 8,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_A_SNORM16,
      "MESA_FORMAT_A_SNORM16",
      GL_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 16,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L_SNORM8,
      "MESA_FORMAT_L_SNORM8",
      GL_LUMINANCE,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_L_SNORM16,
      "MESA_FORMAT_L_SNORM16",
      GL_LUMINANCE,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_I_SNORM8,
      "MESA_FORMAT_I_SNORM8",
      GL_INTENSITY,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_I_SNORM16,
      "MESA_FORMAT_I_SNORM16",
      GL_INTENSITY,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R_SNORM8,         /* Name */
      "MESA_FORMAT_R_SNORM8",       /* StrName */
      GL_RED,                       /* BaseFormat */
      GL_SIGNED_NORMALIZED,         /* DataType */
      8, 0, 0, 0,                   /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,                /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 1                       /* BlockWidth/Height,Bytes */
   },
   {
      MESA_FORMAT_R_SNORM16,
      "MESA_FORMAT_R_SNORM16",
      GL_RED,
      GL_SIGNED_NORMALIZED,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_LA_SNORM16,
      "MESA_FORMAT_LA_SNORM16",
      GL_LUMINANCE_ALPHA,
      GL_SIGNED_NORMALIZED,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGB_SNORM16,
      "MESA_FORMAT_RGB_SNORM16",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGBA_SNORM16,
      "MESA_FORMAT_RGBA_SNORM16",
      GL_RGBA,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_SNORM16,
      "MESA_FORMAT_RGBX_SNORM16",
      GL_RGB,
      GL_SIGNED_NORMALIZED,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },

   /* Packed sRGB formats */
   {
      MESA_FORMAT_A8B8G8R8_SRGB,
      "MESA_FORMAT_A8B8G8R8_SRGB",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_B8G8R8A8_SRGB,
      "MESA_FORMAT_B8G8R8A8_SRGB",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_B8G8R8X8_SRGB,
      "MESA_FORMAT_B8G8R8X8_SRGB",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R8G8B8A8_SRGB,
      "MESA_FORMAT_R8G8B8A8_SRGB",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R8G8B8X8_SRGB,
      "MESA_FORMAT_R8G8B8X8_SRGB",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_L8A8_SRGB,
      "MESA_FORMAT_L8A8_SRGB",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_NORMALIZED,    
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },

   /* Array sRGB formats */
   {
      MESA_FORMAT_L_SRGB8,
      "MESA_FORMAT_L_SRGB8",
      GL_LUMINANCE,
      GL_UNSIGNED_NORMALIZED,    
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_BGR_SRGB8,
      "MESA_FORMAT_BGR_SRGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 3
   },

   /* Packed float formats */
   {
      MESA_FORMAT_R9G9B9E5_FLOAT,
      "MESA_FORMAT_RGB9_E5",
      GL_RGB,
      GL_FLOAT,
      9, 9, 9, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R11G11B10_FLOAT,
      "MESA_FORMAT_R11G11B10_FLOAT",
      GL_RGB,
      GL_FLOAT,
      11, 11, 10, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_Z32_FLOAT_S8X24_UINT,   /* Name */
      "MESA_FORMAT_Z32_FLOAT_S8X24_UINT", /* StrName */
      GL_DEPTH_STENCIL,                   /* BaseFormat */
      /* DataType here is used to answer GL_TEXTURE_DEPTH_TYPE queries, and is
       * never used for stencil because stencil is always GL_UNSIGNED_INT.
       */
      GL_FLOAT,                    /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 8,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 8                      /* BlockWidth/Height,Bytes */
   },

   /* Array float formats */
   {
      MESA_FORMAT_A_FLOAT16,
      "MESA_FORMAT_A_FLOAT16",
      GL_ALPHA,
      GL_FLOAT,
      0, 0, 0, 16,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A_FLOAT32,
      "MESA_FORMAT_A_FLOAT32",
      GL_ALPHA,
      GL_FLOAT,
      0, 0, 0, 32,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_L_FLOAT16,
      "MESA_FORMAT_L_FLOAT16",
      GL_LUMINANCE,
      GL_FLOAT,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L_FLOAT32,
      "MESA_FORMAT_L_FLOAT32",
      GL_LUMINANCE,
      GL_FLOAT,
      0, 0, 0, 0,
      32, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_FLOAT16,
      "MESA_FORMAT_LA_FLOAT16",
      GL_LUMINANCE_ALPHA,
      GL_FLOAT,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_FLOAT32,
      "MESA_FORMAT_LA_FLOAT32",
      GL_LUMINANCE_ALPHA,
      GL_FLOAT,
      0, 0, 0, 32,
      32, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_I_FLOAT16,
      "MESA_FORMAT_I_FLOAT16",
      GL_INTENSITY,
      GL_FLOAT,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_I_FLOAT32,
      "MESA_FORMAT_I_FLOAT32",
      GL_INTENSITY,
      GL_FLOAT,
      0, 0, 0, 0,
      0, 32, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R_FLOAT16,
      "MESA_FORMAT_R_FLOAT16",
      GL_RED,
      GL_FLOAT,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R_FLOAT32,
      "MESA_FORMAT_R_FLOAT32",
      GL_RED,
      GL_FLOAT,
      32, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_FLOAT16,
      "MESA_FORMAT_RG_FLOAT16",
      GL_RG,
      GL_FLOAT,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_FLOAT32,
      "MESA_FORMAT_RG_FLOAT32",
      GL_RG,
      GL_FLOAT,
      32, 32, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGB_FLOAT16,
      "MESA_FORMAT_RGB_FLOAT16",
      GL_RGB,
      GL_FLOAT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGB_FLOAT32,
      "MESA_FORMAT_RGB_FLOAT32",
      GL_RGB,
      GL_FLOAT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 12
   },
   {
      MESA_FORMAT_RGBA_FLOAT16,
      "MESA_FORMAT_RGBA_FLOAT16",
      GL_RGBA,
      GL_FLOAT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBA_FLOAT32,
      "MESA_FORMAT_RGBA_FLOAT32",
      GL_RGBA,
      GL_FLOAT,
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_RGBX_FLOAT16,
      "MESA_FORMAT_RGBX_FLOAT16",
      GL_RGB,
      GL_FLOAT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_FLOAT32,
      "MESA_FORMAT_RGBX_FLOAT32",
      GL_RGB,
      GL_FLOAT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_Z_FLOAT32,       /* Name */
      "MESA_FORMAT_Z_FLOAT32",     /* StrName */
      GL_DEPTH_COMPONENT,          /* BaseFormat */
      GL_FLOAT,                    /* DataType */
      0, 0, 0, 0,                  /* Red/Green/Blue/AlphaBits */
      0, 0, 0, 32, 0,              /* Lum/Int/Index/Depth/StencilBits */
      1, 1, 4                      /* BlockWidth/Height,Bytes */
   },

   /* Packed signed/unsigned non-normalized integer formats */
   {
      MESA_FORMAT_B10G10R10A2_UINT,
      "MESA_FORMAT_B10G10R10A2_UINT",
      GL_RGBA,
      GL_UNSIGNED_INT,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R10G10B10A2_UINT,
      "MESA_FORMAT_R10G10B10A2_UINT",
      GL_RGBA,
      GL_UNSIGNED_INT,
      10, 10, 10, 2,
      0, 0, 0, 0, 0,
      1, 1, 4
   },

   /* Array signed/unsigned non-normalized integer formats */
   {
      MESA_FORMAT_A_UINT8,
      "MESA_FORMAT_A_UINT8",
      GL_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 8,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_A_UINT16,
      "MESA_FORMAT_A_UINT16",
      GL_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 16,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A_UINT32,
      "MESA_FORMAT_A_UINT32",
      GL_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 32,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_A_SINT8,
      "MESA_FORMAT_A_SINT8",
      GL_ALPHA,
      GL_INT,
      0, 0, 0, 8,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_A_SINT16,
      "MESA_FORMAT_A_SINT16",
      GL_ALPHA,
      GL_INT,
      0, 0, 0, 16,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_A_SINT32,
      "MESA_FORMAT_A_SINT32",
      GL_ALPHA,
      GL_INT,
      0, 0, 0, 32,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_I_UINT8,
      "MESA_FORMAT_I_UINT8",
      GL_INTENSITY,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_I_UINT16,
      "MESA_FORMAT_I_UINT16",
      GL_INTENSITY,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_I_UINT32,
      "MESA_FORMAT_I_UINT32",
      GL_INTENSITY,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      0, 32, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_I_SINT8,
      "MESA_FORMAT_I_SINT8",
      GL_INTENSITY,
      GL_INT,
      0, 0, 0, 0,
      0, 8, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_I_SINT16,
      "MESA_FORMAT_I_SINT16",
      GL_INTENSITY,
      GL_INT,
      0, 0, 0, 0,
      0, 16, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_I_SINT32,
      "MESA_FORMAT_I_SINT32",
      GL_INTENSITY,
      GL_INT,
      0, 0, 0, 0,
      0, 32, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_L_UINT8,
      "MESA_FORMAT_L_UINT8",
      GL_LUMINANCE,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_L_UINT16,
      "MESA_FORMAT_L_UINT16",
      GL_LUMINANCE,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L_UINT32,
      "MESA_FORMAT_L_UINT32",
      GL_LUMINANCE,
      GL_UNSIGNED_INT,
      0, 0, 0, 0,
      32, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_L_SINT8,
      "MESA_FORMAT_L_SINT8",
      GL_LUMINANCE,
      GL_INT,
      0, 0, 0, 0,
      8, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_L_SINT16,
      "MESA_FORMAT_L_SINT16",
      GL_LUMINANCE,
      GL_INT,
      0, 0, 0, 0,
      16, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_L_SINT32,
      "MESA_FORMAT_L_SINT32",
      GL_LUMINANCE,
      GL_INT,
      0, 0, 0, 0,
      32, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_UINT8,
      "MESA_FORMAT_LA_UINT8",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_LA_UINT16,
      "MESA_FORMAT_LA_UINT16",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_UINT32,
      "MESA_FORMAT_LA_UINT32",
      GL_LUMINANCE_ALPHA,
      GL_UNSIGNED_INT,
      0, 0, 0, 32,
      32, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_LA_SINT8,
      "MESA_FORMAT_LA_SINT8",
      GL_LUMINANCE_ALPHA,
      GL_INT,
      0, 0, 0, 8,
      8, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_LA_SINT16,
      "MESA_FORMAT_LA_SINT16",
      GL_LUMINANCE_ALPHA,
      GL_INT,
      0, 0, 0, 16,
      16, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_LA_SINT32,
      "MESA_FORMAT_LA_SINT32",
      GL_LUMINANCE_ALPHA,
      GL_INT,
      0, 0, 0, 32,
      32, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_R_UINT8,
      "MESA_FORMAT_R_UINT8",
      GL_RED,
      GL_UNSIGNED_INT,
      8, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_R_UINT16,
      "MESA_FORMAT_R_UINT16",
      GL_RED,
      GL_UNSIGNED_INT,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R_UINT32,
      "MESA_FORMAT_R_UINT32",
      GL_RED,
      GL_UNSIGNED_INT,
      32, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_R_SINT8,
      "MESA_FORMAT_R_SINT8",
      GL_RED,
      GL_INT,
      8, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 1
   },
   {
      MESA_FORMAT_R_SINT16,
      "MESA_FORMAT_R_SINT16",
      GL_RED,
      GL_INT,
      16, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_R_SINT32,
      "MESA_FORMAT_R_SINT32",
      GL_RED,
      GL_INT,
      32, 0, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_UINT8,
      "MESA_FORMAT_RG_UINT8",
      GL_RG,
      GL_UNSIGNED_INT,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RG_UINT16,
      "MESA_FORMAT_RG_UINT16",
      GL_RG,
      GL_UNSIGNED_INT,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_UINT32,
      "MESA_FORMAT_RG_UINT32",
      GL_RG,
      GL_UNSIGNED_INT,
      32, 32, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RG_SINT8,
      "MESA_FORMAT_RG_SINT8",
      GL_RG,
      GL_INT,
      8, 8, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 2
   },
   {
      MESA_FORMAT_RG_SINT16,
      "MESA_FORMAT_RG_SINT16",
      GL_RG,
      GL_INT,
      16, 16, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RG_SINT32,
      "MESA_FORMAT_RG_SINT32",
      GL_RG,
      GL_INT,
      32, 32, 0, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGB_UINT8,
      "MESA_FORMAT_RGB_UINT8",
      GL_RGB,
      GL_UNSIGNED_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 3
   },
   {
      MESA_FORMAT_RGB_UINT16,
      "MESA_FORMAT_RGB_UINT16",
      GL_RGB,
      GL_UNSIGNED_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGB_UINT32,
      "MESA_FORMAT_RGB_UINT32",
      GL_RGB,
      GL_UNSIGNED_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 12
   },
   {
      MESA_FORMAT_RGB_SINT8,
      "MESA_FORMAT_RGB_SINT8",
      GL_RGB,
      GL_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 3
   },
   {
      MESA_FORMAT_RGB_SINT16,
      "MESA_FORMAT_RGB_SINT16",
      GL_RGB,
      GL_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 6
   },
   {
      MESA_FORMAT_RGB_SINT32,
      "MESA_FORMAT_RGB_SINT32",
      GL_RGB,
      GL_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 12
   },
   {
      MESA_FORMAT_RGBA_UINT8,
      "MESA_FORMAT_RGBA_UINT8",
      GL_RGBA,
      GL_UNSIGNED_INT,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGBA_UINT16,
      "MESA_FORMAT_RGBA_UINT16",
      GL_RGBA,
      GL_UNSIGNED_INT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBA_UINT32,
      "MESA_FORMAT_RGBA_UINT32",
      GL_RGBA,
      GL_UNSIGNED_INT,
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_RGBA_SINT8,
      "MESA_FORMAT_RGBA_SINT8",
      GL_RGBA,
      GL_INT,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGBA_SINT16,
      "MESA_FORMAT_RGBA_SINT16",
      GL_RGBA,
      GL_INT,
      16, 16, 16, 16,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBA_SINT32,
      "MESA_FORMAT_RGBA_SINT32",
      GL_RGBA,
      GL_INT,
      32, 32, 32, 32,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_RGBX_UINT8,
      "MESA_FORMAT_RGBX_UINT8",
      GL_RGB,
      GL_UNSIGNED_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGBX_UINT16,
      "MESA_FORMAT_RGBX_UINT16",
      GL_RGB,
      GL_UNSIGNED_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_UINT32,
      "MESA_FORMAT_RGBX_UINT32",
      GL_RGB,
      GL_UNSIGNED_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 16
   },
   {
      MESA_FORMAT_RGBX_SINT8,
      "MESA_FORMAT_RGBX_SINT8",
      GL_RGB,
      GL_INT,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      1, 1, 4
   },
   {
      MESA_FORMAT_RGBX_SINT16,
      "MESA_FORMAT_RGBX_SINT16",
      GL_RGB,
      GL_INT,
      16, 16, 16, 0,
      0, 0, 0, 0, 0,
      1, 1, 8
   },
   {
      MESA_FORMAT_RGBX_SINT32,
      "MESA_FORMAT_RGBX_SINT32",
      GL_RGB,
      GL_INT,
      32, 32, 32, 0,
      0, 0, 0, 0, 0,
      1, 1, 16
   },

   /* DXT compressed formats */
   {
      MESA_FORMAT_RGB_DXT1,        /* Name */
      "MESA_FORMAT_RGB_DXT1",      /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 0,                  /* approx Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      4, 4, 8                      /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_RGBA_DXT1,
      "MESA_FORMAT_RGBA_DXT1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 8                      /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_RGBA_DXT3,
      "MESA_FORMAT_RGBA_DXT3",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_RGBA_DXT5,
      "MESA_FORMAT_RGBA_DXT5",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,    
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 16                     /* 16 bytes per 4x4 block */
   },

   /* DXT sRGB compressed formats */
   {
      MESA_FORMAT_SRGB_DXT1,       /* Name */
      "MESA_FORMAT_SRGB_DXT1",     /* StrName */
      GL_RGB,                      /* BaseFormat */
      GL_UNSIGNED_NORMALIZED,      /* DataType */
      4, 4, 4, 0,                  /* approx Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,               /* Lum/Int/Index/Depth/StencilBits */
      4, 4, 8                      /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_SRGBA_DXT1,
      "MESA_FORMAT_SRGBA_DXT1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 8                      /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_SRGBA_DXT3,
      "MESA_FORMAT_SRGBA_DXT3",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_SRGBA_DXT5,
      "MESA_FORMAT_SRGBA_DXT5",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 4,
      0, 0, 0, 0, 0,
      4, 4, 16                     /* 16 bytes per 4x4 block */
   },

   /* FXT1 compressed formats */
   {
      MESA_FORMAT_RGB_FXT1,
      "MESA_FORMAT_RGB_FXT1",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 0,                  /* approx Red/Green/BlueBits */
      0, 0, 0, 0, 0,
      8, 4, 16                     /* 16 bytes per 8x4 block */
   },
   {
      MESA_FORMAT_RGBA_FXT1,
      "MESA_FORMAT_RGBA_FXT1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      4, 4, 4, 1,                  /* approx Red/Green/Blue/AlphaBits */
      0, 0, 0, 0, 0,
      8, 4, 16                     /* 16 bytes per 8x4 block */
   },

   /* RGTC compressed formats */
   {
     MESA_FORMAT_R_RGTC1_UNORM,
     "MESA_FORMAT_R_RGTC1_UNORM",
     GL_RED,
     GL_UNSIGNED_NORMALIZED,
     8, 0, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_R_RGTC1_SNORM,
     "MESA_FORMAT_R_RGTC1_SNORM",
     GL_RED,
     GL_SIGNED_NORMALIZED,
     8, 0, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_RG_RGTC2_UNORM,
     "MESA_FORMAT_RG_RGTC2_UNORM",
     GL_RG,
     GL_UNSIGNED_NORMALIZED,
     8, 8, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_RG_RGTC2_SNORM,
     "MESA_FORMAT_RG_RGTC2_SNORM",
     GL_RG,
     GL_SIGNED_NORMALIZED,
     8, 8, 0, 0,
     0, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },

   /* LATC1/2 compressed formats */
   {
     MESA_FORMAT_L_LATC1_UNORM,
     "MESA_FORMAT_L_LATC1_UNORM",
     GL_LUMINANCE,
     GL_UNSIGNED_NORMALIZED,
     0, 0, 0, 0,
     4, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_L_LATC1_SNORM,
     "MESA_FORMAT_L_LATC1_SNORM",
     GL_LUMINANCE,
     GL_SIGNED_NORMALIZED,
     0, 0, 0, 0,
     4, 0, 0, 0, 0,
     4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_LA_LATC2_UNORM,
     "MESA_FORMAT_LA_LATC2_UNORM",
     GL_LUMINANCE_ALPHA,
     GL_UNSIGNED_NORMALIZED,
     0, 0, 0, 4,
     4, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },
   {
     MESA_FORMAT_LA_LATC2_SNORM,
     "MESA_FORMAT_LA_LATC2_SNORM",
     GL_LUMINANCE_ALPHA,
     GL_SIGNED_NORMALIZED,
     0, 0, 0, 4,
     4, 0, 0, 0, 0,
     4, 4, 16                     /* 16 bytes per 4x4 block */
   },

   /* ETC1/2 compressed formats */
   {
      MESA_FORMAT_ETC1_RGB8,
      "MESA_FORMAT_ETC1_RGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_RGB8,
      "MESA_FORMAT_ETC2_RGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SRGB8,
      "MESA_FORMAT_ETC2_SRGB8",
      GL_RGB,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_RGBA8_EAC,
      "MESA_FORMAT_ETC2_RGBA8_EAC",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC,
      "MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 8,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_R11_EAC,
      "MESA_FORMAT_ETC2_R11_EAC",
      GL_RED,
      GL_UNSIGNED_NORMALIZED,
      11, 0, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                    /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_RG11_EAC,
      "MESA_FORMAT_ETC2_RG11_EAC",
      GL_RG,
      GL_UNSIGNED_NORMALIZED,
      11, 11, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SIGNED_R11_EAC,
      "MESA_FORMAT_ETC2_SIGNED_R11_EAC",
      GL_RED,
      GL_SIGNED_NORMALIZED,
      11, 0, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 8                    /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SIGNED_RG11_EAC,
      "MESA_FORMAT_ETC2_SIGNED_RG11_EAC",
      GL_RG,
      GL_SIGNED_NORMALIZED,
      11, 11, 0, 0,
      0, 0, 0, 0, 0,
      4, 4, 16                    /* 16 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1,
      "MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 1,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
   {
      MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1,
      "MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1",
      GL_RGBA,
      GL_UNSIGNED_NORMALIZED,
      8, 8, 8, 1,
      0, 0, 0, 0, 0,
      4, 4, 8                     /* 8 bytes per 4x4 block */
   },
d76 1
a76 1

d151 1
a151 1
      return info->IndexBits;
d185 15
d246 27
d360 1
d364 1
d374 1
d383 25
d424 3
d436 3
d454 3
d466 3
d472 3
d537 6
a691 1

a926 5
   case MESA_FORMAT_DUDV8:
      *datatype = GL_BYTE;
      *comps = 2;
      return;

d936 1
d979 1
d989 1
d1023 4
d1255 1
d1320 1
d1436 1
d1498 1
d1587 6
a1749 4
   case MESA_FORMAT_DUDV8:
      return (format == GL_DU8DV8_ATI || format == GL_DUDV_ATI) &&
             type == GL_BYTE && littleEndian && !swapBytes;

d1821 3
d1866 1
d1893 1
@


