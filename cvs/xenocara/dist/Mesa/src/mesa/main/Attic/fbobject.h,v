head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.52;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.6;
commitid	WPD6rgPryPkvXOr9;

1.6
date	2013.09.05.14.06.21;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.17.13.58.19;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.30;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.50.00;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.50.00;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.46;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.16.34;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.00;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


#ifndef FBOBJECT_H
#define FBOBJECT_H

#include "compiler.h"
#include "glheader.h"
#include <stdbool.h>

struct gl_context;
struct gl_texture_object;


/**
 * Is the given FBO a user-created FBO?
 */
static inline GLboolean
_mesa_is_user_fbo(const struct gl_framebuffer *fb)
{
   return fb->Name != 0;
}


/**
 * Is the given FBO a window system FBO (like an X window)?
 */
static inline GLboolean
_mesa_is_winsys_fbo(const struct gl_framebuffer *fb)
{
   return fb->Name == 0;
}



extern void
_mesa_init_fbobjects(struct gl_context *ctx);

extern struct gl_framebuffer *
_mesa_get_incomplete_framebuffer(void);

extern struct gl_renderbuffer *
_mesa_lookup_renderbuffer(struct gl_context *ctx, GLuint id);

extern struct gl_framebuffer *
_mesa_lookup_framebuffer(struct gl_context *ctx, GLuint id);


void
_mesa_update_texture_renderbuffer(struct gl_context *ctx,
                                  struct gl_framebuffer *fb,
                                  struct gl_renderbuffer_attachment *att);

extern void
_mesa_framebuffer_renderbuffer(struct gl_context *ctx,
                               struct gl_framebuffer *fb,
                               GLenum attachment, struct gl_renderbuffer *rb);

extern void
_mesa_validate_framebuffer(struct gl_context *ctx, struct gl_framebuffer *fb);

extern GLboolean
_mesa_has_depthstencil_combined(const struct gl_framebuffer *fb);

extern void
_mesa_test_framebuffer_completeness(struct gl_context *ctx,
                                    struct gl_framebuffer *fb);

extern GLboolean
_mesa_is_legal_color_format(const struct gl_context *ctx, GLenum baseFormat);

extern GLenum
_mesa_base_fbo_format(struct gl_context *ctx, GLenum internalFormat);

extern bool
_mesa_detach_renderbuffer(struct gl_context *ctx,
                          struct gl_framebuffer *fb,
                          const void *att);

extern GLboolean GLAPIENTRY
_mesa_IsRenderbuffer(GLuint renderbuffer);

extern void GLAPIENTRY
_mesa_BindRenderbuffer(GLenum target, GLuint renderbuffer);

extern void GLAPIENTRY
_mesa_BindRenderbufferEXT(GLenum target, GLuint renderbuffer);

extern void GLAPIENTRY
_mesa_DeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);

extern void GLAPIENTRY
_mesa_GenRenderbuffers(GLsizei n, GLuint *renderbuffers);

extern void GLAPIENTRY
_mesa_RenderbufferStorage(GLenum target, GLenum internalformat,
                             GLsizei width, GLsizei height);

extern void GLAPIENTRY
_mesa_RenderbufferStorageMultisample(GLenum target, GLsizei samples,
                                     GLenum internalformat,
                                     GLsizei width, GLsizei height);

extern void GLAPIENTRY
_es_RenderbufferStorageEXT(GLenum target, GLenum internalFormat,
			   GLsizei width, GLsizei height);

extern void GLAPIENTRY
_mesa_EGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image);

extern void GLAPIENTRY
_mesa_GetRenderbufferParameteriv(GLenum target, GLenum pname,
                                    GLint *params);

extern GLboolean GLAPIENTRY
_mesa_IsFramebuffer(GLuint framebuffer);

extern void GLAPIENTRY
_mesa_BindFramebuffer(GLenum target, GLuint framebuffer);

extern void GLAPIENTRY
_mesa_BindFramebufferEXT(GLenum target, GLuint framebuffer);

extern void GLAPIENTRY
_mesa_DeleteFramebuffers(GLsizei n, const GLuint *framebuffers);

extern void GLAPIENTRY
_mesa_GenFramebuffers(GLsizei n, GLuint *framebuffers);

extern GLenum GLAPIENTRY
_mesa_CheckFramebufferStatus(GLenum target);

extern void GLAPIENTRY
_mesa_FramebufferTexture1D(GLenum target, GLenum attachment,
                              GLenum textarget, GLuint texture, GLint level);

extern void GLAPIENTRY
_mesa_FramebufferTexture2D(GLenum target, GLenum attachment,
                              GLenum textarget, GLuint texture, GLint level);

extern void GLAPIENTRY
_mesa_FramebufferTexture3D(GLenum target, GLenum attachment,
                              GLenum textarget, GLuint texture,
                              GLint level, GLint zoffset);

extern void GLAPIENTRY
_mesa_FramebufferTextureLayer(GLenum target, GLenum attachment,
                                 GLuint texture, GLint level, GLint layer);

extern void GLAPIENTRY
_mesa_FramebufferTexture(GLenum target, GLenum attachment,
                         GLuint texture, GLint level);

extern void GLAPIENTRY
_mesa_FramebufferRenderbuffer(GLenum target, GLenum attachment,
                                 GLenum renderbuffertarget,
                                 GLuint renderbuffer);

extern void GLAPIENTRY
_mesa_GetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment,
                                             GLenum pname, GLint *params);

extern void GLAPIENTRY
_mesa_InvalidateSubFramebuffer(GLenum target, GLsizei numAttachments,
                               const GLenum *attachments, GLint x, GLint y,
                               GLsizei width, GLsizei height);

extern void GLAPIENTRY
_mesa_InvalidateFramebuffer(GLenum target, GLsizei numAttachments,
                            const GLenum *attachments);

extern void GLAPIENTRY
_mesa_DiscardFramebufferEXT(GLenum target, GLsizei numAttachments,
                            const GLenum *attachments);

#endif /* FBOBJECT_H */
@


1.7
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.6
log
@Merge Mesa 9.2.0
@
text
@a69 20
extern struct gl_renderbuffer_attachment *
_mesa_get_attachment(struct gl_context *ctx, struct gl_framebuffer *fb,
                     GLenum attachment);

extern void
_mesa_remove_attachment(struct gl_context *ctx,
                        struct gl_renderbuffer_attachment *att);

extern void
_mesa_set_texture_attachment(struct gl_context *ctx,
                             struct gl_framebuffer *fb,
                             struct gl_renderbuffer_attachment *att,
                             struct gl_texture_object *texObj,
                             GLenum texTarget, GLuint level, GLuint zoffset,
                             GLboolean layered);

extern void
_mesa_set_renderbuffer_attachment(struct gl_context *ctx,
                                  struct gl_renderbuffer_attachment *att,
                                  struct gl_renderbuffer *rb);
a183 9

extern void GLAPIENTRY
_mesa_GenerateMipmap(GLenum target);


extern void GLAPIENTRY
_mesa_BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1,
                         GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1,
                         GLbitfield mask, GLenum filter);
@


1.5
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.1
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d31 1
d36 22
a73 19

/** Return the texture image for a renderbuffer attachment */
static INLINE struct gl_texture_image *
_mesa_get_attachment_teximage(struct gl_renderbuffer_attachment *att)
{
   assert(att->Type == GL_TEXTURE);
   return att->Texture->Image[att->CubeMapFace][att->TextureLevel];
}


/** Return the (const) texture image for a renderbuffer attachment */
static INLINE const struct gl_texture_image *
_mesa_get_attachment_teximage_const(const struct gl_renderbuffer_attachment *att)
{
   assert(att->Type == GL_TEXTURE);
   return att->Texture->Image[att->CubeMapFace][att->TextureLevel];
}


d83 2
a84 1
                             GLenum texTarget, GLuint level, GLuint zoffset);
d91 5
d104 3
d117 5
d123 4
a126 1
_mesa_IsRenderbufferEXT(GLuint renderbuffer);
d132 1
a132 1
_mesa_DeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers);
d135 1
a135 1
_mesa_GenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers);
d138 1
a138 1
_mesa_RenderbufferStorageEXT(GLenum target, GLenum internalformat,
d154 1
a154 1
_mesa_GetRenderbufferParameterivEXT(GLenum target, GLenum pname,
d158 4
a161 1
_mesa_IsFramebufferEXT(GLuint framebuffer);
d167 1
a167 1
_mesa_DeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers);
d170 1
a170 1
_mesa_GenFramebuffersEXT(GLsizei n, GLuint *framebuffers);
d173 1
a173 1
_mesa_CheckFramebufferStatusEXT(GLenum target);
d176 1
a176 1
_mesa_FramebufferTexture1DEXT(GLenum target, GLenum attachment,
d180 1
a180 1
_mesa_FramebufferTexture2DEXT(GLenum target, GLenum attachment,
d184 1
a184 1
_mesa_FramebufferTexture3DEXT(GLenum target, GLenum attachment,
d189 1
a189 1
_mesa_FramebufferTextureLayerEXT(GLenum target, GLenum attachment,
d193 5
a197 1
_mesa_FramebufferRenderbufferEXT(GLenum target, GLenum attachment,
d202 1
a202 1
_mesa_GetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment,
d206 1
a206 1
_mesa_GenerateMipmapEXT(GLenum target);
d210 1
a210 1
_mesa_BlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1,
d215 3
a217 2
_mesa_FramebufferTextureARB(GLenum target, GLenum attachment,
                            GLuint texture, GLint level);
d220 2
a221 2
_mesa_FramebufferTextureFaceARB(GLenum target, GLenum attachment,
                                GLuint texture, GLint level, GLenum face);
d223 3
@


1.4
log
@Merge Mesa 7.10.3
@
text
@d29 1
d52 18
d87 2
a88 1
_mesa_framebuffer_renderbuffer(struct gl_context *ctx, struct gl_framebuffer *fb,
d92 8
a99 1
_mesa_test_framebuffer_completeness(struct gl_context *ctx, struct gl_framebuffer *fb);
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d29 4
d35 4
a38 1
_mesa_init_fbobjects(GLcontext *ctx);
d41 1
a41 1
_mesa_lookup_renderbuffer(GLcontext *ctx, GLuint id);
d44 1
a44 1
_mesa_lookup_framebuffer(GLcontext *ctx, GLuint id);
d47 1
a47 1
_mesa_get_attachment(GLcontext *ctx, struct gl_framebuffer *fb,
d52 1
a52 1
_mesa_remove_attachment(GLcontext *ctx,
d56 1
a56 1
_mesa_set_texture_attachment(GLcontext *ctx,
d63 1
a63 1
_mesa_set_renderbuffer_attachment(GLcontext *ctx,
d68 1
a68 1
_mesa_framebuffer_renderbuffer(GLcontext *ctx, struct gl_framebuffer *fb,
d72 1
a72 1
_mesa_test_framebuffer_completeness(GLcontext *ctx, struct gl_framebuffer *fb);
d75 1
a75 1
_mesa_base_fbo_format(GLcontext *ctx, GLenum internalFormat);
d99 4
d158 8
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d87 8
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.5
d5 1
a5 1
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
d30 3
d117 4
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d3 1
a3 1
 * Version:  7.1
d5 1
a5 1
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
a28 10
#include "glheader.h"

struct gl_context;
struct gl_texture_object;

extern void
_mesa_init_fbobjects(struct gl_context *ctx);

extern struct gl_framebuffer *
_mesa_get_incomplete_framebuffer(void);
d31 1
a31 1
_mesa_lookup_renderbuffer(struct gl_context *ctx, GLuint id);
d34 1
a34 1
_mesa_lookup_framebuffer(struct gl_context *ctx, GLuint id);
d37 1
a37 1
_mesa_get_attachment(struct gl_context *ctx, struct gl_framebuffer *fb,
d42 1
a42 1
_mesa_remove_attachment(struct gl_context *ctx,
d46 1
a46 1
_mesa_set_texture_attachment(struct gl_context *ctx,
d53 1
a53 1
_mesa_set_renderbuffer_attachment(struct gl_context *ctx,
d58 1
a58 1
_mesa_framebuffer_renderbuffer(struct gl_context *ctx, struct gl_framebuffer *fb,
d62 1
a62 1
_mesa_test_framebuffer_completeness(struct gl_context *ctx, struct gl_framebuffer *fb);
d65 1
a65 1
_mesa_base_fbo_format(struct gl_context *ctx, GLenum internalFormat);
a83 12
_mesa_RenderbufferStorageMultisample(GLenum target, GLsizei samples,
                                     GLenum internalformat,
                                     GLsizei width, GLsizei height);

extern void GLAPIENTRY
_es_RenderbufferStorageEXT(GLenum target, GLenum internalFormat,
			   GLsizei width, GLsizei height);

extern void GLAPIENTRY
_mesa_EGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image);

extern void GLAPIENTRY
a115 4
_mesa_FramebufferTextureLayerEXT(GLenum target, GLenum attachment,
                                 GLuint texture, GLint level, GLint layer);

extern void GLAPIENTRY
a131 8

extern void GLAPIENTRY
_mesa_FramebufferTextureARB(GLenum target, GLenum attachment,
                            GLuint texture, GLint level);

extern void GLAPIENTRY
_mesa_FramebufferTextureFaceARB(GLenum target, GLenum attachment,
                                GLuint texture, GLint level, GLenum face);
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
a28 1
#include "compiler.h"
a29 1
#include <stdbool.h>
a33 22

/**
 * Is the given FBO a user-created FBO?
 */
static inline GLboolean
_mesa_is_user_fbo(const struct gl_framebuffer *fb)
{
   return fb->Name != 0;
}


/**
 * Is the given FBO a window system FBO (like an X window)?
 */
static inline GLboolean
_mesa_is_winsys_fbo(const struct gl_framebuffer *fb)
{
   return fb->Name == 0;
}



d50 1
d60 1
a60 2
                             GLenum texTarget, GLuint level, GLuint zoffset,
                             GLboolean layered);
a66 5
void
_mesa_update_texture_renderbuffer(struct gl_context *ctx,
                                  struct gl_framebuffer *fb,
                                  struct gl_renderbuffer_attachment *att);

d68 1
a68 2
_mesa_framebuffer_renderbuffer(struct gl_context *ctx,
                               struct gl_framebuffer *fb,
d72 1
a72 11
_mesa_validate_framebuffer(struct gl_context *ctx, struct gl_framebuffer *fb);

extern GLboolean
_mesa_has_depthstencil_combined(const struct gl_framebuffer *fb);

extern void
_mesa_test_framebuffer_completeness(struct gl_context *ctx,
                                    struct gl_framebuffer *fb);

extern GLboolean
_mesa_is_legal_color_format(const struct gl_context *ctx, GLenum baseFormat);
a76 5
extern bool
_mesa_detach_renderbuffer(struct gl_context *ctx,
                          struct gl_framebuffer *fb,
                          const void *att);

d78 1
a78 4
_mesa_IsRenderbuffer(GLuint renderbuffer);

extern void GLAPIENTRY
_mesa_BindRenderbuffer(GLenum target, GLuint renderbuffer);
d84 1
a84 1
_mesa_DeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
d87 1
a87 1
_mesa_GenRenderbuffers(GLsizei n, GLuint *renderbuffers);
d90 1
a90 1
_mesa_RenderbufferStorage(GLenum target, GLenum internalformat,
d106 1
a106 1
_mesa_GetRenderbufferParameteriv(GLenum target, GLenum pname,
d110 1
a110 4
_mesa_IsFramebuffer(GLuint framebuffer);

extern void GLAPIENTRY
_mesa_BindFramebuffer(GLenum target, GLuint framebuffer);
d116 1
a116 1
_mesa_DeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
d119 1
a119 1
_mesa_GenFramebuffers(GLsizei n, GLuint *framebuffers);
d122 1
a122 1
_mesa_CheckFramebufferStatus(GLenum target);
d125 1
a125 1
_mesa_FramebufferTexture1D(GLenum target, GLenum attachment,
d129 1
a129 1
_mesa_FramebufferTexture2D(GLenum target, GLenum attachment,
d133 1
a133 1
_mesa_FramebufferTexture3D(GLenum target, GLenum attachment,
d138 1
a138 1
_mesa_FramebufferTextureLayer(GLenum target, GLenum attachment,
d142 1
a142 5
_mesa_FramebufferTexture(GLenum target, GLenum attachment,
                         GLuint texture, GLint level);

extern void GLAPIENTRY
_mesa_FramebufferRenderbuffer(GLenum target, GLenum attachment,
d147 1
a147 1
_mesa_GetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment,
d151 1
a151 1
_mesa_GenerateMipmap(GLenum target);
d155 1
a155 1
_mesa_BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1,
d160 2
a161 3
_mesa_InvalidateSubFramebuffer(GLenum target, GLsizei numAttachments,
                               const GLenum *attachments, GLint x, GLint y,
                               GLsizei width, GLsizei height);
d164 2
a165 2
_mesa_InvalidateFramebuffer(GLenum target, GLsizei numAttachments,
                            const GLenum *attachments);
a166 3
extern void GLAPIENTRY
_mesa_DiscardFramebufferEXT(GLenum target, GLsizei numAttachments,
                            const GLenum *attachments);
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d70 20
d204 9
@


