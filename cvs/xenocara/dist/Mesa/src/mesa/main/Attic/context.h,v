head	1.12;
access;
symbols
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	v10_2_9:1.1.1.8
	v10_4_3:1.1.1.7
	v10_2_7:1.1.1.6
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	v10_2_3:1.1.1.6
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.5
	v9_2_3:1.1.1.5
	v9_2_2:1.1.1.5
	v9_2_1:1.1.1.5
	v9_2_0:1.1.1.5
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.12.23.05.17.52;	author jsg;	state dead;
branches;
next	1.11;
commitid	TnlogFl9nOv2eaRf;

1.11
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.10;
commitid	4ry2gvZGMXkCUD2n;

1.10
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.9;
commitid	mcxB0JvoI9gTDYXU;

1.9
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.8;
commitid	WPD6rgPryPkvXOr9;

1.8
date	2013.09.05.14.06.17;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.17.13.58.17;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.30;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.41;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.20;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.49.48;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.49.48;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.32;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.30.52;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.45;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.09.05.13.16.26;	author jsg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.07.09.20.34.59;	author jsg;	state Exp;
branches;
next	1.1.1.7;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.7
date	2015.01.25.14.12.30;	author jsg;	state Exp;
branches;
next	1.1.1.8;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.8
date	2015.02.20.22.49.36;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.12
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * \file context.h
 * Mesa context and visual-related functions.
 *
 * There are three large Mesa data types/classes which are meant to be
 * used by device drivers:
 * - struct gl_context: this contains the Mesa rendering state
 * - struct gl_config:  this describes the color buffer (RGB vs. ci), whether
 *   or not there's a depth buffer, stencil buffer, etc.
 * - struct gl_framebuffer:  contains pointers to the depth buffer, stencil
 *   buffer, accum buffer and alpha buffers.
 *
 * These types should be encapsulated by corresponding device driver
 * data types.  See xmesa.h and xmesaP.h for an example.
 *
 * In OOP terms, struct gl_context, struct gl_config, and struct gl_framebuffer
 * are base classes which the device driver must derive from.
 *
 * The following functions create and destroy these data types.
 */


#ifndef CONTEXT_H
#define CONTEXT_H


#include "imports.h"
#include "mtypes.h"


#ifdef __cplusplus
extern "C" {
#endif


struct _glapi_table;


/** \name Visual-related functions */
/*@@{*/
 
extern struct gl_config *
_mesa_create_visual( GLboolean dbFlag,
                     GLboolean stereoFlag,
                     GLint redBits,
                     GLint greenBits,
                     GLint blueBits,
                     GLint alphaBits,
                     GLint depthBits,
                     GLint stencilBits,
                     GLint accumRedBits,
                     GLint accumGreenBits,
                     GLint accumBlueBits,
                     GLint accumAlphaBits,
                     GLint numSamples );

extern GLboolean
_mesa_initialize_visual( struct gl_config *v,
                         GLboolean dbFlag,
                         GLboolean stereoFlag,
                         GLint redBits,
                         GLint greenBits,
                         GLint blueBits,
                         GLint alphaBits,
                         GLint depthBits,
                         GLint stencilBits,
                         GLint accumRedBits,
                         GLint accumGreenBits,
                         GLint accumBlueBits,
                         GLint accumAlphaBits,
                         GLint numSamples );

extern void
_mesa_destroy_visual( struct gl_config *vis );

/*@@}*/


/** \name Context-related functions */
/*@@{*/

extern GLboolean
_mesa_initialize_context( struct gl_context *ctx,
                          gl_api api,
                          const struct gl_config *visual,
                          struct gl_context *share_list,
                          const struct dd_function_table *driverFunctions);

extern struct gl_context *
_mesa_create_context(gl_api api,
                     const struct gl_config *visual,
                     struct gl_context *share_list,
                     const struct dd_function_table *driverFunctions);

extern void
_mesa_free_context_data( struct gl_context *ctx );

extern void
_mesa_destroy_context( struct gl_context *ctx );


extern void
_mesa_copy_context(const struct gl_context *src, struct gl_context *dst, GLuint mask);


extern void
_mesa_check_init_viewport(struct gl_context *ctx, GLuint width, GLuint height);

extern GLboolean
_mesa_make_current( struct gl_context *ctx, struct gl_framebuffer *drawBuffer,
                    struct gl_framebuffer *readBuffer );

extern GLboolean
_mesa_share_state(struct gl_context *ctx, struct gl_context *ctxToShare);

extern struct gl_context *
_mesa_get_current_context(void);

/*@@}*/

extern void
_mesa_init_get_hash(struct gl_context *ctx);

extern void
_mesa_notifySwapBuffers(struct gl_context *gc);


extern struct _glapi_table *
_mesa_get_dispatch(struct gl_context *ctx);


extern GLboolean
_mesa_valid_to_render(struct gl_context *ctx, const char *where);



/** \name Miscellaneous */
/*@@{*/

extern void
_mesa_record_error( struct gl_context *ctx, GLenum error );


extern void
_mesa_finish(struct gl_context *ctx);

extern void
_mesa_flush(struct gl_context *ctx);

extern int
_mesa_generic_nop(void);

extern void GLAPIENTRY
_mesa_Finish( void );

extern void GLAPIENTRY
_mesa_Flush( void );

/*@@}*/


/**
 * Are we currently between glBegin and glEnd?
 * During execution, not display list compilation.
 */
static inline GLboolean
_mesa_inside_begin_end(const struct gl_context *ctx)
{
   return ctx->Driver.CurrentExecPrimitive != PRIM_OUTSIDE_BEGIN_END;
}


/**
 * Are we currently between glBegin and glEnd in a display list?
 */
static inline GLboolean
_mesa_inside_dlist_begin_end(const struct gl_context *ctx)
{
   return ctx->Driver.CurrentSavePrimitive <= PRIM_MAX;
}



/**
 * \name Macros for flushing buffered rendering commands before state changes,
 * checking if inside glBegin/glEnd, etc.
 */
/*@@{*/

/**
 * Flush vertices.
 *
 * \param ctx GL context.
 * \param newstate new state.
 *
 * Checks if dd_function_table::NeedFlush is marked to flush stored vertices,
 * and calls dd_function_table::FlushVertices if so. Marks
 * __struct gl_contextRec::NewState with \p newstate.
 */
#define FLUSH_VERTICES(ctx, newstate)				\
do {								\
   if (MESA_VERBOSE & VERBOSE_STATE)				\
      _mesa_debug(ctx, "FLUSH_VERTICES in %s\n", MESA_FUNCTION);\
   if (ctx->Driver.NeedFlush & FLUSH_STORED_VERTICES)		\
      ctx->Driver.FlushVertices(ctx, FLUSH_STORED_VERTICES);	\
   ctx->NewState |= newstate;					\
} while (0)

/**
 * Flush current state.
 *
 * \param ctx GL context.
 * \param newstate new state.
 *
 * Checks if dd_function_table::NeedFlush is marked to flush current state,
 * and calls dd_function_table::FlushVertices if so. Marks
 * __struct gl_contextRec::NewState with \p newstate.
 */
#define FLUSH_CURRENT(ctx, newstate)				\
do {								\
   if (MESA_VERBOSE & VERBOSE_STATE)				\
      _mesa_debug(ctx, "FLUSH_CURRENT in %s\n", MESA_FUNCTION);	\
   if (ctx->Driver.NeedFlush & FLUSH_UPDATE_CURRENT)		\
      ctx->Driver.FlushVertices(ctx, FLUSH_UPDATE_CURRENT);	\
   ctx->NewState |= newstate;					\
} while (0)

/**
 * Macro to assert that the API call was made outside the
 * glBegin()/glEnd() pair, with return value.
 * 
 * \param ctx GL context.
 * \param retval value to return in case the assertion fails.
 */
#define ASSERT_OUTSIDE_BEGIN_END_WITH_RETVAL(ctx, retval)		\
do {									\
   if (_mesa_inside_begin_end(ctx)) {					\
      _mesa_error(ctx, GL_INVALID_OPERATION, "Inside glBegin/glEnd");	\
      return retval;							\
   }									\
} while (0)

/**
 * Macro to assert that the API call was made outside the
 * glBegin()/glEnd() pair.
 * 
 * \param ctx GL context.
 */
#define ASSERT_OUTSIDE_BEGIN_END(ctx)					\
do {									\
   if (_mesa_inside_begin_end(ctx)) {					\
      _mesa_error(ctx, GL_INVALID_OPERATION, "Inside glBegin/glEnd");	\
      return;								\
   }									\
} while (0)

/*@@}*/


/**
 * Checks if the context is for Desktop GL (Compatibility or Core)
 */
static inline GLboolean
_mesa_is_desktop_gl(const struct gl_context *ctx)
{
   return ctx->API == API_OPENGL_COMPAT || ctx->API == API_OPENGL_CORE;
}


/**
 * Checks if the context is for any GLES version
 */
static inline GLboolean
_mesa_is_gles(const struct gl_context *ctx)
{
   return ctx->API == API_OPENGLES || ctx->API == API_OPENGLES2;
}


/**
 * Checks if the context is for GLES 3.x
 */
static inline GLboolean
_mesa_is_gles3(const struct gl_context *ctx)
{
   return ctx->API == API_OPENGLES2 && ctx->Version >= 30;
}


/**
 * Checks if the context supports geometry shaders.
 */
static inline GLboolean
_mesa_has_geometry_shaders(const struct gl_context *ctx)
{
   return _mesa_is_desktop_gl(ctx) &&
      (ctx->Version >= 32 || ctx->Extensions.ARB_geometry_shader4);
}


#ifdef __cplusplus
}
#endif


#endif /* CONTEXT_H */
@


1.11
log
@Merge Mesa 10.2.9
@
text
@@


1.10
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a146 3
_mesa_init_constants(struct gl_constants *consts, gl_api api);

extern void
@


1.9
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d147 3
@


1.8
log
@Merge Mesa 9.2.0
@
text
@d315 11
@


1.7
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  6.5.1
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d56 5
d112 1
a112 2
                          const struct dd_function_table *driverFunctions,
                          void *driverContext );
d118 1
a118 2
                     const struct dd_function_table *driverFunctions,
                     void *driverContext);
a156 5
void
_mesa_set_mvp_with_dp4( struct gl_context *ctx,
                        GLboolean flag );


d175 2
d188 22
d258 1
a258 1
 * \param retval value to return value in case the assertion fails.
d262 1
a262 1
   if (ctx->Driver.CurrentExecPrimitive != PRIM_OUTSIDE_BEGIN_END) {	\
d276 1
a276 1
   if (ctx->Driver.CurrentExecPrimitive != PRIM_OUTSIDE_BEGIN_END) {	\
d282 3
d286 11
a296 4
 * Macro to assert that the API call was made outside the
 * glBegin()/glEnd() pair and flush the vertices.
 * 
 * \param ctx GL context.
d298 6
a303 5
#define ASSERT_OUTSIDE_BEGIN_END_AND_FLUSH(ctx)				\
do {									\
   ASSERT_OUTSIDE_BEGIN_END(ctx);					\
   FLUSH_VERTICES(ctx, 0);						\
} while (0)
d306 1
a306 5
 * Macro to assert that the API call was made outside the
 * glBegin()/glEnd() pair and flush the vertices, with return value.
 * 
 * \param ctx GL context.
 * \param retval value to return value in case the assertion fails.
d308 5
a312 5
#define ASSERT_OUTSIDE_BEGIN_END_AND_FLUSH_WITH_RETVAL(ctx, retval)	\
do {									\
   ASSERT_OUTSIDE_BEGIN_END_WITH_RETVAL(ctx, retval);			\
   FLUSH_VERTICES(ctx, 0);						\
} while (0)
a313 1
/*@@}*/
d315 3
@


1.6
log
@Merge Mesa 7.10.3
@
text
@d33 4
a36 4
 * - struct gl_config:  this describes the color buffer (RGB vs. ci), whether or not
 *   there's a depth buffer, stencil buffer, etc.
 * - struct gl_framebuffer:  contains pointers to the depth buffer, stencil buffer,
 *   accum buffer and alpha buffers.
d41 2
a42 2
 * In OOP terms, struct gl_context, struct gl_config, and struct gl_framebuffer are base classes
 * which the device driver must derive from.
a101 6
extern struct gl_context *
_mesa_create_context( const struct gl_config *visual,
                      struct gl_context *share_list,
                      const struct dd_function_table *driverFunctions,
                      void *driverContext );

d104 1
d111 5
a115 13
_mesa_create_context_for_api(gl_api api,
			     const struct gl_config *visual,
			     struct gl_context *share_list,
			     const struct dd_function_table *driverFunctions,
			     void *driverContext);

extern GLboolean
_mesa_initialize_context_for_api(struct gl_context *ctx,
				 gl_api api,
				 const struct gl_config *visual,
				 struct gl_context *share_list,
				 const struct dd_function_table *driverFunctions,
				 void *driverContext);
a286 24


/**
 * Is the secondary color needed?
 */
#define NEED_SECONDARY_COLOR(CTX)					\
   (((CTX)->Light.Enabled &&						\
     (CTX)->Light.Model.ColorControl == GL_SEPARATE_SPECULAR_COLOR)	\
    || (CTX)->Fog.ColorSumEnabled					\
    || ((CTX)->VertexProgram._Current &&				\
        ((CTX)->VertexProgram._Current != (CTX)->VertexProgram._TnlProgram) &&    \
        ((CTX)->VertexProgram._Current->Base.InputsRead & VERT_BIT_COLOR1)) \
    || ((CTX)->FragmentProgram._Current &&				\
        ((CTX)->FragmentProgram._Current != (CTX)->FragmentProgram._TexEnvProgram) &&  \
        ((CTX)->FragmentProgram._Current->Base.InputsRead & FRAG_BIT_COL1)) \
   )


/**
 * Is RGBA LogicOp enabled?
 */
#define RGBA_LOGICOP_ENABLED(CTX) \
  ((CTX)->Color.ColorLogicOpEnabled || \
   ((CTX)->Color.BlendEnabled && (CTX)->Color.BlendEquationRGB == GL_LOGIC_OP))
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d32 2
a33 2
 * - GLcontext: this contains the Mesa rendering state
 * - GLvisual:  this describes the color buffer (RGB vs. ci), whether or not
d35 1
a35 1
 * - GLframebuffer:  contains pointers to the depth buffer, stencil buffer,
d41 1
a41 1
 * In OOP terms, GLcontext, GLvisual, and GLframebuffer are base classes
d62 1
a62 1
extern GLvisual *
d78 1
a78 1
_mesa_initialize_visual( GLvisual *v,
d94 1
a94 1
_mesa_destroy_visual( GLvisual *vis );
d102 3
a104 3
extern GLcontext *
_mesa_create_context( const GLvisual *visual,
                      GLcontext *share_list,
d109 3
a111 3
_mesa_initialize_context( GLcontext *ctx,
                          const GLvisual *visual,
                          GLcontext *share_list,
d115 14
a128 2
extern void
_mesa_initialize_context_extra(GLcontext *ctx);
d131 1
a131 1
_mesa_free_context_data( GLcontext *ctx );
d134 1
a134 1
_mesa_destroy_context( GLcontext *ctx );
d138 1
a138 1
_mesa_copy_context(const GLcontext *src, GLcontext *dst, GLuint mask);
d142 1
a142 1
_mesa_check_init_viewport(GLcontext *ctx, GLuint width, GLuint height);
d145 2
a146 2
_mesa_make_current( GLcontext *ctx, GLframebuffer *drawBuffer,
                    GLframebuffer *readBuffer );
d149 1
a149 1
_mesa_share_state(GLcontext *ctx, GLcontext *ctxToShare);
d151 1
a151 1
extern GLcontext *
d156 2
d160 1
a160 1
_mesa_notifySwapBuffers(__GLcontext *gc);
d164 1
a164 1
_mesa_get_dispatch(GLcontext *ctx);
d168 1
a168 1
_mesa_set_mvp_with_dp4( GLcontext *ctx,
d173 1
a173 1
_mesa_valid_to_render(GLcontext *ctx, const char *where);
d181 1
a181 1
_mesa_record_error( GLcontext *ctx, GLenum error );
d185 1
a185 1
_mesa_finish(GLcontext *ctx);
d188 1
a188 1
_mesa_flush(GLcontext *ctx);
d214 1
a214 1
 * __GLcontextRec::NewState with \p newstate.
d233 1
a233 1
 * __GLcontextRec::NewState with \p newstate.
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a51 1
#include "glapi/glapi.h"
d56 3
d63 1
a63 2
_mesa_create_visual( GLboolean rgbFlag,
                     GLboolean dbFlag,
a68 1
                     GLint indexBits,
a78 1
                         GLboolean rgbFlag,
a84 1
                         GLint indexBits,
d130 3
d153 9
d169 8
a183 1

@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d118 3
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d52 1
a52 1
#include "glapi.h"
d276 1
d279 1
@


1.1
log
@Initial revision
@
text
@a140 27
/** \name OpenGL SI-style export functions */
/*@@{*/

extern GLboolean
_mesa_destroyContext(__GLcontext *gc);

extern GLboolean
_mesa_loseCurrent(__GLcontext *gc);

extern GLboolean
_mesa_makeCurrent(__GLcontext *gc);

extern GLboolean
_mesa_shareContext(__GLcontext *gc, __GLcontext *gcShare);

extern GLboolean
_mesa_copyContext(__GLcontext *dst, const __GLcontext *src, GLuint mask);

extern GLboolean
_mesa_forceCurrent(__GLcontext *gc);

extern GLboolean
_mesa_notifyResize(__GLcontext *gc);

extern void
_mesa_notifyDestroy(__GLcontext *gc);

a143 11
extern struct __GLdispatchStateRec *
_mesa_dispatchExec(__GLcontext *gc);

extern void
_mesa_beginDispatchOverride(__GLcontext *gc);

extern void
_mesa_endDispatchOverride(__GLcontext *gc);

/*@@}*/

d275 4
a278 4
    || ((CTX)->VertexProgram._Enabled &&				\
        ((CTX)->VertexProgram.Current->Base.InputsRead & VERT_BIT_COLOR1)) \
    || ((CTX)->FragmentProgram._Enabled &&				\
        ((CTX)->FragmentProgram.Current->Base.InputsRead & FRAG_BIT_COL1)) \
d280 8
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@a319 8
/**
 * Is RGBA LogicOp enabled?
 */
#define RGBA_LOGICOP_ENABLED(CTX) \
  ((CTX)->Color.ColorLogicOpEnabled || \
   ((CTX)->Color.BlendEnabled && (CTX)->Color.BlendEquationRGB == GL_LOGIC_OP))


@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d141 27
d170 11
@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d32 2
a33 2
 * - struct gl_context: this contains the Mesa rendering state
 * - struct gl_config:  this describes the color buffer (RGB vs. ci), whether or not
d35 1
a35 1
 * - struct gl_framebuffer:  contains pointers to the depth buffer, stencil buffer,
d41 1
a41 1
 * In OOP terms, struct gl_context, struct gl_config, and struct gl_framebuffer are base classes
d52 1
a56 3
struct _glapi_table;


d60 3
a62 2
extern struct gl_config *
_mesa_create_visual( GLboolean dbFlag,
d68 1
d78 2
a79 1
_mesa_initialize_visual( struct gl_config *v,
d86 1
d96 1
a96 1
_mesa_destroy_visual( struct gl_config *vis );
d104 3
a106 3
extern struct gl_context *
_mesa_create_context( const struct gl_config *visual,
                      struct gl_context *share_list,
d111 3
a113 3
_mesa_initialize_context( struct gl_context *ctx,
                          const struct gl_config *visual,
                          struct gl_context *share_list,
a116 15
extern struct gl_context *
_mesa_create_context_for_api(gl_api api,
			     const struct gl_config *visual,
			     struct gl_context *share_list,
			     const struct dd_function_table *driverFunctions,
			     void *driverContext);

extern GLboolean
_mesa_initialize_context_for_api(struct gl_context *ctx,
				 gl_api api,
				 const struct gl_config *visual,
				 struct gl_context *share_list,
				 const struct dd_function_table *driverFunctions,
				 void *driverContext);

d118 1
a118 1
_mesa_free_context_data( struct gl_context *ctx );
d121 1
a121 1
_mesa_destroy_context( struct gl_context *ctx );
d125 1
a125 1
_mesa_copy_context(const struct gl_context *src, struct gl_context *dst, GLuint mask);
d129 2
a130 1
_mesa_check_init_viewport(struct gl_context *ctx, GLuint width, GLuint height);
d133 1
a133 2
_mesa_make_current( struct gl_context *ctx, struct gl_framebuffer *drawBuffer,
                    struct gl_framebuffer *readBuffer );
d135 1
a135 4
extern GLboolean
_mesa_share_state(struct gl_context *ctx, struct gl_context *ctxToShare);

extern struct gl_context *
a139 2
extern void
_mesa_init_get_hash(struct gl_context *ctx);
d142 1
a142 1
_mesa_notifySwapBuffers(struct gl_context *gc);
d146 1
a146 10
_mesa_get_dispatch(struct gl_context *ctx);


void
_mesa_set_mvp_with_dp4( struct gl_context *ctx,
                        GLboolean flag );


extern GLboolean
_mesa_valid_to_render(struct gl_context *ctx, const char *where);
d154 1
a154 9
_mesa_record_error( struct gl_context *ctx, GLenum error );


extern void
_mesa_finish(struct gl_context *ctx);

extern void
_mesa_flush(struct gl_context *ctx);

d165 1
d180 1
a180 1
 * __struct gl_contextRec::NewState with \p newstate.
d199 1
a199 1
 * __struct gl_contextRec::NewState with \p newstate.
d275 4
a278 6
    || ((CTX)->VertexProgram._Current &&				\
        ((CTX)->VertexProgram._Current != (CTX)->VertexProgram._TnlProgram) &&    \
        ((CTX)->VertexProgram._Current->Base.InputsRead & VERT_BIT_COLOR1)) \
    || ((CTX)->FragmentProgram._Current &&				\
        ((CTX)->FragmentProgram._Current != (CTX)->FragmentProgram._TexEnvProgram) &&  \
        ((CTX)->FragmentProgram._Current->Base.InputsRead & FRAG_BIT_COL1)) \
@


1.1.1.5
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d33 4
a36 4
 * - struct gl_config:  this describes the color buffer (RGB vs. ci), whether
 *   or not there's a depth buffer, stencil buffer, etc.
 * - struct gl_framebuffer:  contains pointers to the depth buffer, stencil
 *   buffer, accum buffer and alpha buffers.
d41 2
a42 2
 * In OOP terms, struct gl_context, struct gl_config, and struct gl_framebuffer
 * are base classes which the device driver must derive from.
a55 5
#ifdef __cplusplus
extern "C" {
#endif


d102 6
a109 1
                          gl_api api,
d112 2
a113 1
                          const struct dd_function_table *driverFunctions);
d116 13
a128 4
_mesa_create_context(gl_api api,
                     const struct gl_config *visual,
                     struct gl_context *share_list,
                     const struct dd_function_table *driverFunctions);
d167 5
a189 2
extern int
_mesa_generic_nop(void);
a200 22
 * Are we currently between glBegin and glEnd?
 * During execution, not display list compilation.
 */
static inline GLboolean
_mesa_inside_begin_end(const struct gl_context *ctx)
{
   return ctx->Driver.CurrentExecPrimitive != PRIM_OUTSIDE_BEGIN_END;
}


/**
 * Are we currently between glBegin and glEnd in a display list?
 */
static inline GLboolean
_mesa_inside_dlist_begin_end(const struct gl_context *ctx)
{
   return ctx->Driver.CurrentSavePrimitive <= PRIM_MAX;
}



/**
d249 1
a249 1
 * \param retval value to return in case the assertion fails.
d253 1
a253 1
   if (_mesa_inside_begin_end(ctx)) {					\
d267 1
a267 1
   if (_mesa_inside_begin_end(ctx)) {					\
d273 11
a283 2
/*@@}*/

d286 5
a290 1
 * Checks if the context is for Desktop GL (Compatibility or Core)
d292 5
a296 5
static inline GLboolean
_mesa_is_desktop_gl(const struct gl_context *ctx)
{
   return ctx->API == API_OPENGL_COMPAT || ctx->API == API_OPENGL_CORE;
}
d298 1
a299 8
/**
 * Checks if the context is for any GLES version
 */
static inline GLboolean
_mesa_is_gles(const struct gl_context *ctx)
{
   return ctx->API == API_OPENGLES || ctx->API == API_OPENGLES2;
}
d303 1
a303 1
 * Checks if the context is for GLES 3.x
d305 11
a315 5
static inline GLboolean
_mesa_is_gles3(const struct gl_context *ctx)
{
   return ctx->API == API_OPENGLES2 && ctx->Version >= 30;
}
d318 6
a323 3
#ifdef __cplusplus
}
#endif
@


1.1.1.6
log
@Import Mesa 10.2.3
@
text
@a314 11
/**
 * Checks if the context supports geometry shaders.
 */
static inline GLboolean
_mesa_has_geometry_shaders(const struct gl_context *ctx)
{
   return _mesa_is_desktop_gl(ctx) &&
      (ctx->Version >= 32 || ctx->Extensions.ARB_geometry_shader4);
}


@


1.1.1.7
log
@Import Mesa 10.4.3
@
text
@a146 3
_mesa_init_constants(struct gl_constants *consts, gl_api api);

extern void
@


1.1.1.8
log
@Import Mesa 10.2.9
@
text
@d147 3
@


