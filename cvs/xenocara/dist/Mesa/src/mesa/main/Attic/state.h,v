head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.4
	v9_2_3:1.1.1.4
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.4
	v9_2_0:1.1.1.4
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.2.0.8
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.6
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.4
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.53;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2013.09.05.14.06.29;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.17.13.58.19;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.31;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.41;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.50.18;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.50.18;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.39;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.46;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.05.13.16.49;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


#ifndef STATE_H
#define STATE_H

#include "mtypes.h"

extern void
_mesa_update_state(struct gl_context *ctx);

/* As above but can only be called between _mesa_lock_context_textures() and 
 * _mesa_unlock_context_textures().
 */
extern void
_mesa_update_state_locked(struct gl_context *ctx);


extern void
_mesa_set_varying_vp_inputs(struct gl_context *ctx, GLbitfield64 varying_inputs);


extern void
_mesa_set_vp_override(struct gl_context *ctx, GLboolean flag);


/**
 * Is the secondary color needed?
 */
static inline GLboolean
_mesa_need_secondary_color(const struct gl_context *ctx)
{
   if (ctx->Light.Enabled &&
       ctx->Light.Model.ColorControl == GL_SEPARATE_SPECULAR_COLOR)
       return GL_TRUE;

   if (ctx->Fog.ColorSumEnabled)
      return GL_TRUE;

   if (ctx->VertexProgram._Current &&
       (ctx->VertexProgram._Current != ctx->VertexProgram._TnlProgram) &&
       (ctx->VertexProgram._Current->Base.InputsRead & VERT_BIT_COLOR1))
      return GL_TRUE;

   if (ctx->FragmentProgram._Current &&
       (ctx->FragmentProgram._Current != ctx->FragmentProgram._TexEnvProgram) &&
       (ctx->FragmentProgram._Current->Base.InputsRead & VARYING_BIT_COL1))
      return GL_TRUE;

   return GL_FALSE;
}

#endif
@


1.6
log
@Merge Mesa 9.2.0
@
text
@@


1.5
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.3
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d42 1
a42 1
_mesa_set_varying_vp_inputs(struct gl_context *ctx, GLbitfield varying_inputs);
d52 1
a52 1
static INLINE GLboolean
d69 1
a69 1
       (ctx->FragmentProgram._Current->Base.InputsRead & FRAG_BIT_COL1))
a73 13


/**
 * Is RGBA LogicOp enabled?
 */
static INLINE GLboolean
_mesa_rgba_logicop_enabled(const struct gl_context *ctx)
{
   return ctx->Color.ColorLogicOpEnabled ||
      (ctx->Color.BlendEnabled && ctx->Color.Blend[0].EquationRGB == GL_LOGIC_OP);
}


@


1.4
log
@Merge Mesa 7.10.3
@
text
@d49 39
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d32 1
a32 1
_mesa_update_state(GLcontext *ctx);
d38 1
a38 1
_mesa_update_state_locked(GLcontext *ctx);
d42 1
a42 1
_mesa_set_varying_vp_inputs(GLcontext *ctx, GLbitfield varying_inputs);
d46 1
a46 1
_mesa_set_vp_override(GLcontext *ctx, GLboolean flag);
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d3 1
a3 1
 * Version:  7.1
d32 1
a32 1
_mesa_update_state( GLcontext *ctx );
d38 9
a46 1
_mesa_update_state_locked( GLcontext *ctx );
@


1.1
log
@Initial revision
@
text
@a0 5
/**
 * \file state.h
 * State management.
 */

d3 1
a3 1
 * Version:  6.3
d5 1
a5 1
 * Copyright (C) 1999-2004  Brian Paul   All Rights Reserved.
d32 1
a32 1
_mesa_init_exec_table(struct _glapi_table *exec);
d34 3
d38 1
a38 1
_mesa_update_state( GLcontext *ctx );
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@a41 6
/* As above but can only be called between _mesa_lock_context_textures() and 
 * _mesa_unlock_context_textures().
 */
extern void
_mesa_update_state_locked( GLcontext *ctx );

@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@d1 5
d8 1
a8 1
 * Version:  7.3
d10 1
a10 1
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
d37 4
a40 1
_mesa_update_state(struct gl_context *ctx);
d46 1
a46 9
_mesa_update_state_locked(struct gl_context *ctx);


extern void
_mesa_set_varying_vp_inputs(struct gl_context *ctx, GLbitfield varying_inputs);


extern void
_mesa_set_vp_override(struct gl_context *ctx, GLboolean flag);
@


1.1.1.4
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d42 1
a42 1
_mesa_set_varying_vp_inputs(struct gl_context *ctx, GLbitfield64 varying_inputs);
a47 26

/**
 * Is the secondary color needed?
 */
static inline GLboolean
_mesa_need_secondary_color(const struct gl_context *ctx)
{
   if (ctx->Light.Enabled &&
       ctx->Light.Model.ColorControl == GL_SEPARATE_SPECULAR_COLOR)
       return GL_TRUE;

   if (ctx->Fog.ColorSumEnabled)
      return GL_TRUE;

   if (ctx->VertexProgram._Current &&
       (ctx->VertexProgram._Current != ctx->VertexProgram._TnlProgram) &&
       (ctx->VertexProgram._Current->Base.InputsRead & VERT_BIT_COLOR1))
      return GL_TRUE;

   if (ctx->FragmentProgram._Current &&
       (ctx->FragmentProgram._Current != ctx->FragmentProgram._TexEnvProgram) &&
       (ctx->FragmentProgram._Current->Base.InputsRead & VARYING_BIT_COL1))
      return GL_TRUE;

   return GL_FALSE;
}
@


