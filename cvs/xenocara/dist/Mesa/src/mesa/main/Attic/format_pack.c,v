head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.5.0.4
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.52;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.16.35;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.16.35;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.35.01;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2014.09.07.15.07.08;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	dm8VnQHhowGHmemJ;

1.1.1.4
date	2015.01.25.14.12.38;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.49.45;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (c) 2011 VMware, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * Color, depth, stencil packing functions.
 * Used to pack basic color, depth and stencil formats to specific
 * hardware formats.
 *
 * There are both per-pixel and per-row packing functions:
 * - The former will be used by swrast to write values to the color, depth,
 *   stencil buffers when drawing points, lines and masked spans.
 * - The later will be used for image-oriented functions like glDrawPixels,
 *   glAccum, and glTexImage.
 */


#include "colormac.h"
#include "format_pack.h"
#include "macros.h"
#include "../../gallium/auxiliary/util/u_format_rgb9e5.h"
#include "../../gallium/auxiliary/util/u_format_r11g11b10f.h"


/** Helper struct for MESA_FORMAT_Z32_FLOAT_X24S8 */
struct z32f_x24s8
{
   float z;
   uint32_t x24s8;
};


typedef void (*pack_ubyte_rgba_row_func)(GLuint n,
                                         const GLubyte src[][4], void *dst);

typedef void (*pack_float_rgba_row_func)(GLuint n,
                                         const GLfloat src[][4], void *dst);



static inline GLfloat
linear_to_srgb(GLfloat cl)
{
   if (cl < 0.0f)
      return 0.0f;
   else if (cl < 0.0031308f)
      return 12.92f * cl;
   else if (cl < 1.0f)
      return 1.055f * powf(cl, 0.41666f) - 0.055f;
   else
      return 1.0f;
}


static inline GLubyte
linear_float_to_srgb_ubyte(GLfloat cl)
{
   GLubyte res = FLOAT_TO_UBYTE(linear_to_srgb(cl));
   return res;
}


static inline GLubyte
linear_ubyte_to_srgb_ubyte(GLubyte cl)
{
   GLubyte res = FLOAT_TO_UBYTE(linear_to_srgb(cl / 255.0f));
   return res;
}




/*
 * MESA_FORMAT_RGBA8888
 */

static void
pack_ubyte_RGBA8888(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   *d = PACK_COLOR_8888(src[RCOMP], src[GCOMP], src[BCOMP], src[ACOMP]);
}

static void
pack_float_RGBA8888(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   _mesa_unclamped_float_rgba_to_ubyte(v, src);
   pack_ubyte_RGBA8888(v, dst);
}

static void
pack_row_ubyte_RGBA8888(GLuint n, const GLubyte src[][4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      d[i] = PACK_COLOR_8888(src[i][RCOMP], src[i][GCOMP],
                             src[i][BCOMP], src[i][ACOMP]);
   }
}

static void
pack_row_float_RGBA8888(GLuint n, const GLfloat src[][4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      GLubyte v[4];
      _mesa_unclamped_float_rgba_to_ubyte(v, src[i]);
      pack_ubyte_RGBA8888(v, d + i);
   }
}



/*
 * MESA_FORMAT_RGBA8888_REV
 */

static void
pack_ubyte_RGBA8888_REV(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   *d = PACK_COLOR_8888(src[ACOMP], src[BCOMP], src[GCOMP], src[RCOMP]);
}

static void
pack_float_RGBA8888_REV(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   _mesa_unclamped_float_rgba_to_ubyte(v, src);
   pack_ubyte_RGBA8888_REV(v, dst);
}

static void
pack_row_ubyte_RGBA8888_REV(GLuint n, const GLubyte src[][4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      d[i] = PACK_COLOR_8888(src[i][ACOMP], src[i][BCOMP],
                             src[i][GCOMP], src[i][RCOMP]);
   }
}

static void
pack_row_float_RGBA8888_REV(GLuint n, const GLfloat src[][4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      GLubyte v[4];
      _mesa_unclamped_float_rgba_to_ubyte(v, src[i]);
      pack_ubyte_RGBA8888_REV(v, d + i);
   }
}


/*
 * MESA_FORMAT_ARGB8888
 */

static void
pack_ubyte_ARGB8888(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   *d = PACK_COLOR_8888(src[ACOMP], src[RCOMP], src[GCOMP], src[BCOMP]);
}

static void
pack_float_ARGB8888(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   _mesa_unclamped_float_rgba_to_ubyte(v, src);
   pack_ubyte_ARGB8888(v, dst);
}

static void
pack_row_ubyte_ARGB8888(GLuint n, const GLubyte src[][4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      d[i] = PACK_COLOR_8888(src[i][ACOMP], src[i][RCOMP],
                             src[i][GCOMP], src[i][BCOMP]);
   }
}

static void
pack_row_float_ARGB8888(GLuint n, const GLfloat src[][4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      GLubyte v[4];
      _mesa_unclamped_float_rgba_to_ubyte(v, src[i]);
      pack_ubyte_ARGB8888(v, d + i);
   }
}


/*
 * MESA_FORMAT_ARGB8888_REV
 */

static void
pack_ubyte_ARGB8888_REV(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   *d = PACK_COLOR_8888(src[BCOMP], src[GCOMP], src[RCOMP], src[ACOMP]);
}

static void
pack_float_ARGB8888_REV(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   _mesa_unclamped_float_rgba_to_ubyte(v, src);
   pack_ubyte_ARGB8888_REV(v, dst);
}

static void
pack_row_ubyte_ARGB8888_REV(GLuint n, const GLubyte src[][4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      d[i] = PACK_COLOR_8888(src[i][BCOMP], src[i][GCOMP],
                             src[i][RCOMP], src[i][ACOMP]);
   }
}

static void
pack_row_float_ARGB8888_REV(GLuint n, const GLfloat src[][4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      GLubyte v[4];
      _mesa_unclamped_float_rgba_to_ubyte(v, src[i]);
      pack_ubyte_ARGB8888_REV(v, d + i);
   }
}


/*
 * MESA_FORMAT_XRGB8888
 */

static void
pack_ubyte_XRGB8888(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   *d = PACK_COLOR_8888(0x0, src[RCOMP], src[GCOMP], src[BCOMP]);
}

static void
pack_float_XRGB8888(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   _mesa_unclamped_float_rgba_to_ubyte(v, src);
   pack_ubyte_XRGB8888(v, dst);
}

static void
pack_row_ubyte_XRGB8888(GLuint n, const GLubyte src[][4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      d[i] = PACK_COLOR_8888(0, src[i][RCOMP], src[i][GCOMP], src[i][BCOMP]);
   }
}

static void
pack_row_float_XRGB8888(GLuint n, const GLfloat src[][4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      GLubyte v[4];
      _mesa_unclamped_float_rgba_to_ubyte(v, src[i]);
      pack_ubyte_XRGB8888(v, d + i);
   }
}


/*
 * MESA_FORMAT_XRGB8888_REV
 */

static void
pack_ubyte_XRGB8888_REV(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   *d = PACK_COLOR_8888(src[BCOMP], src[GCOMP], src[RCOMP], 0);
}

static void
pack_float_XRGB8888_REV(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   _mesa_unclamped_float_rgba_to_ubyte(v, src);
   pack_ubyte_XRGB8888_REV(v, dst);
}

static void
pack_row_ubyte_XRGB8888_REV(GLuint n, const GLubyte src[][4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      d[i] = PACK_COLOR_8888(src[i][BCOMP], src[i][GCOMP], src[i][RCOMP], 0);
   }
}

static void
pack_row_float_XRGB8888_REV(GLuint n, const GLfloat src[][4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      GLubyte v[4];
      _mesa_unclamped_float_rgba_to_ubyte(v, src[i]);
      pack_ubyte_XRGB8888_REV(v, d + i);
   }
}


/*
 * MESA_FORMAT_RGB888
 */

static void
pack_ubyte_RGB888(const GLubyte src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   d[2] = src[RCOMP];
   d[1] = src[GCOMP];
   d[0] = src[BCOMP];
}

static void
pack_float_RGB888(const GLfloat src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   UNCLAMPED_FLOAT_TO_UBYTE(d[2], src[RCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(d[1], src[GCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(d[0], src[BCOMP]);
}

static void
pack_row_ubyte_RGB888(GLuint n, const GLubyte src[][4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      d[i*3+2] = src[i][RCOMP];
      d[i*3+1] = src[i][GCOMP];
      d[i*3+0] = src[i][BCOMP];
   }
}

static void
pack_row_float_RGB888(GLuint n, const GLfloat src[][4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      GLubyte v[4];
      _mesa_unclamped_float_rgba_to_ubyte(v, src[i]);
      d[i*3+2] = v[RCOMP];
      d[i*3+1] = v[GCOMP];
      d[i*3+0] = v[BCOMP];
   }
}


/*
 * MESA_FORMAT_BGR888
 */

static void
pack_ubyte_BGR888(const GLubyte src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   d[2] = src[BCOMP];
   d[1] = src[GCOMP];
   d[0] = src[RCOMP];
}

static void
pack_float_BGR888(const GLfloat src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   UNCLAMPED_FLOAT_TO_UBYTE(d[2], src[BCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(d[1], src[GCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(d[0], src[RCOMP]);
}

static void
pack_row_ubyte_BGR888(GLuint n, const GLubyte src[][4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      d[i*3+2] = src[i][BCOMP];
      d[i*3+1] = src[i][GCOMP];
      d[i*3+0] = src[i][RCOMP];
   }
}

static void
pack_row_float_BGR888(GLuint n, const GLfloat src[][4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      GLubyte v[4];
      _mesa_unclamped_float_rgba_to_ubyte(v, src[i]);
      d[i*3+2] = v[BCOMP];
      d[i*3+1] = v[GCOMP];
      d[i*3+0] = v[RCOMP];
   }
}


/*
 * MESA_FORMAT_RGB565
 */

static void
pack_ubyte_RGB565(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   *d = PACK_COLOR_565(src[RCOMP], src[GCOMP], src[BCOMP]);
}

static void
pack_float_RGB565(const GLfloat src[4], void *dst)
{
   GLubyte v[3];
   UNCLAMPED_FLOAT_TO_UBYTE(v[0], src[RCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(v[1], src[GCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(v[2], src[BCOMP]);
   pack_ubyte_RGB565(v, dst);
}

static void
pack_row_ubyte_RGB565(GLuint n, const GLubyte src[][4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      pack_ubyte_RGB565(src[i], d + i);
   }
}

static void
pack_row_float_RGB565(GLuint n, const GLfloat src[][4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      GLubyte v[4];
      _mesa_unclamped_float_rgba_to_ubyte(v, src[i]);
      pack_ubyte_RGB565(v, d + i);
   }
}


/*
 * MESA_FORMAT_RGB565_REV
 */

static void
pack_ubyte_RGB565_REV(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   *d = PACK_COLOR_565_REV(src[RCOMP], src[GCOMP], src[BCOMP]);
}

static void
pack_float_RGB565_REV(const GLfloat src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   GLubyte r, g, b;
   UNCLAMPED_FLOAT_TO_UBYTE(r, src[RCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(g, src[GCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(b, src[BCOMP]);
   *d = PACK_COLOR_565_REV(r, g, b);
}

static void
pack_row_ubyte_RGB565_REV(GLuint n, const GLubyte src[][4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      pack_ubyte_RGB565_REV(src[i], d + i);
   }
}

static void
pack_row_float_RGB565_REV(GLuint n, const GLfloat src[][4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   GLuint i;
   for (i = 0; i < n; i++) {
      GLubyte v[4];
      _mesa_unclamped_float_rgba_to_ubyte(v, src[i]);
      pack_ubyte_RGB565_REV(v, d + i);
   }
}


/*
 * MESA_FORMAT_ARGB4444
 */

static void
pack_ubyte_ARGB4444(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   *d = PACK_COLOR_4444(src[ACOMP], src[RCOMP], src[GCOMP], src[BCOMP]);
}

static void
pack_float_ARGB4444(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   _mesa_unclamped_float_rgba_to_ubyte(v, src);
   pack_ubyte_ARGB4444(v, dst);
}

/* use fallback row packing functions */


/*
 * MESA_FORMAT_ARGB4444_REV
 */

static void
pack_ubyte_ARGB4444_REV(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   *d = PACK_COLOR_4444(src[GCOMP], src[BCOMP], src[ACOMP], src[RCOMP]);
}

static void
pack_float_ARGB4444_REV(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   _mesa_unclamped_float_rgba_to_ubyte(v, src);
   pack_ubyte_ARGB4444_REV(v, dst);
}

/* use fallback row packing functions */


/*
 * MESA_FORMAT_RGBA5551
 */

static void
pack_ubyte_RGBA5551(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   *d = PACK_COLOR_5551(src[RCOMP], src[GCOMP], src[BCOMP], src[ACOMP]);
}

static void
pack_float_RGBA5551(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   _mesa_unclamped_float_rgba_to_ubyte(v, src);
   pack_ubyte_RGBA5551(v, dst);
}

/* use fallback row packing functions */


/*
 * MESA_FORMAT_ARGB1555
 */

static void
pack_ubyte_ARGB1555(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   *d = PACK_COLOR_1555(src[ACOMP], src[RCOMP], src[GCOMP], src[BCOMP]);
}

static void
pack_float_ARGB1555(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   _mesa_unclamped_float_rgba_to_ubyte(v, src);
   pack_ubyte_ARGB1555(v, dst);
}


/* MESA_FORMAT_ARGB1555_REV */

static void
pack_ubyte_ARGB1555_REV(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst), tmp;
   tmp = PACK_COLOR_1555(src[ACOMP], src[RCOMP], src[GCOMP], src[BCOMP]);
   *d = (tmp >> 8) | (tmp << 8);
}

static void
pack_float_ARGB1555_REV(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   _mesa_unclamped_float_rgba_to_ubyte(v, src);
   pack_ubyte_ARGB1555_REV(v, dst);
}


/* MESA_FORMAT_AL44 */

static void
pack_ubyte_AL44(const GLubyte src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   *d = PACK_COLOR_44(src[ACOMP], src[RCOMP]);
}

static void
pack_float_AL44(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   UNCLAMPED_FLOAT_TO_UBYTE(v[0], src[RCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(v[3], src[ACOMP]);
   pack_ubyte_AL44(v, dst);
}


/* MESA_FORMAT_AL88 */

static void
pack_ubyte_AL88(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   *d = PACK_COLOR_88(src[ACOMP], src[RCOMP]);
}

static void
pack_float_AL88(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   UNCLAMPED_FLOAT_TO_UBYTE(v[0], src[RCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(v[3], src[ACOMP]);
   pack_ubyte_AL88(v, dst);
}


/* MESA_FORMAT_AL88_REV */

static void
pack_ubyte_AL88_REV(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   *d = PACK_COLOR_88(src[RCOMP], src[ACOMP]);
}

static void
pack_float_AL88_REV(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   UNCLAMPED_FLOAT_TO_UBYTE(v[0], src[RCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(v[3], src[ACOMP]);
   pack_ubyte_AL88_REV(v, dst);
}


/* MESA_FORMAT_AL1616 */

static void
pack_ubyte_AL1616(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort l = UBYTE_TO_USHORT(src[RCOMP]);
   GLushort a = UBYTE_TO_USHORT(src[ACOMP]);
   *d = PACK_COLOR_1616(a, l);
}

static void
pack_float_AL1616(const GLfloat src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort l, a;
   UNCLAMPED_FLOAT_TO_USHORT(l, src[RCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(a, src[ACOMP]);
   *d = PACK_COLOR_1616(a, l);
}


/* MESA_FORMAT_AL1616_REV */

static void
pack_ubyte_AL1616_REV(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort l = UBYTE_TO_USHORT(src[RCOMP]);
   GLushort a = UBYTE_TO_USHORT(src[ACOMP]);
   *d = PACK_COLOR_1616(l, a);
}

static void
pack_float_AL1616_REV(const GLfloat src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort l, a;
   UNCLAMPED_FLOAT_TO_USHORT(l, src[RCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(a, src[ACOMP]);
   *d = PACK_COLOR_1616(l, a);
}


/* MESA_FORMAT_RGB332 */

static void
pack_ubyte_RGB332(const GLubyte src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   *d = PACK_COLOR_332(src[RCOMP], src[GCOMP], src[BCOMP]);
}

static void
pack_float_RGB332(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   UNCLAMPED_FLOAT_TO_UBYTE(v[0], src[RCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(v[1], src[GCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(v[2], src[BCOMP]);
   pack_ubyte_RGB332(v, dst);
}


/* MESA_FORMAT_A8 */

static void
pack_ubyte_A8(const GLubyte src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   *d = src[ACOMP];
}

static void
pack_float_A8(const GLfloat src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   UNCLAMPED_FLOAT_TO_UBYTE(d[0], src[ACOMP]);
}


/* MESA_FORMAT_A16 */

static void
pack_ubyte_A16(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   *d = UBYTE_TO_USHORT(src[ACOMP]);
}

static void
pack_float_A16(const GLfloat src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   UNCLAMPED_FLOAT_TO_USHORT(d[0], src[ACOMP]);
}


/* MESA_FORMAT_L8 */

static void
pack_ubyte_L8(const GLubyte src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   *d = src[RCOMP];
}

static void
pack_float_L8(const GLfloat src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   UNCLAMPED_FLOAT_TO_UBYTE(d[0], src[RCOMP]);
}


/* MESA_FORMAT_L16 */

static void
pack_ubyte_L16(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   *d = UBYTE_TO_USHORT(src[RCOMP]);
}

static void
pack_float_L16(const GLfloat src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   UNCLAMPED_FLOAT_TO_USHORT(d[0], src[RCOMP]);
}


/* MESA_FORMAT_YCBCR */

static void
pack_ubyte_YCBCR(const GLubyte src[4], void *dst)
{
   /* todo */
}

static void
pack_float_YCBCR(const GLfloat src[4], void *dst)
{
   /* todo */
}


/* MESA_FORMAT_YCBCR_REV */

static void
pack_ubyte_YCBCR_REV(const GLubyte src[4], void *dst)
{
   /* todo */
}

static void
pack_float_YCBCR_REV(const GLfloat src[4], void *dst)
{
   /* todo */
}


/* MESA_FORMAT_R8 */

static void
pack_ubyte_R8(const GLubyte src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   *d = src[RCOMP];
}

static void
pack_float_R8(const GLfloat src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   GLubyte r;
   UNCLAMPED_FLOAT_TO_UBYTE(r, src[RCOMP]);
   d[0] = r;
}


/* MESA_FORMAT_GR88 */

static void
pack_ubyte_GR88(const GLubyte src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   *d = PACK_COLOR_88(src[GCOMP], src[RCOMP]);
}

static void
pack_float_GR88(const GLfloat src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   GLubyte r, g;
   UNCLAMPED_FLOAT_TO_UBYTE(r, src[RCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(g, src[GCOMP]);
   *d = PACK_COLOR_88(g, r);
}


/* MESA_FORMAT_RG88 */

static void
pack_ubyte_RG88(const GLubyte src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   *d = PACK_COLOR_88(src[RCOMP], src[GCOMP]);
}

static void
pack_float_RG88(const GLfloat src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   GLubyte r, g;
   UNCLAMPED_FLOAT_TO_UBYTE(r, src[RCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(g, src[GCOMP]);
   *d = PACK_COLOR_88(r, g);
}


/* MESA_FORMAT_R16 */

static void
pack_ubyte_R16(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   *d = UBYTE_TO_USHORT(src[RCOMP]);
}

static void
pack_float_R16(const GLfloat src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   UNCLAMPED_FLOAT_TO_USHORT(d[0], src[RCOMP]);
}


/* MESA_FORMAT_GR1616 */

static void
pack_ubyte_GR1616(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort r = UBYTE_TO_USHORT(src[RCOMP]);
   GLushort g = UBYTE_TO_USHORT(src[GCOMP]);
   *d = PACK_COLOR_1616(g, r);
}

static void
pack_float_GR1616(const GLfloat src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort r, g;
   UNCLAMPED_FLOAT_TO_USHORT(r, src[RCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(g, src[GCOMP]);
   *d = PACK_COLOR_1616(g, r);
}


/* MESA_FORMAT_RG1616 */

static void
pack_ubyte_RG1616(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort r = UBYTE_TO_USHORT(src[RCOMP]);
   GLushort g = UBYTE_TO_USHORT(src[GCOMP]);
   *d = PACK_COLOR_1616(r, g);
}


static void
pack_float_RG1616(const GLfloat src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort r, g;
   UNCLAMPED_FLOAT_TO_USHORT(r, src[RCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(g, src[GCOMP]);
   *d = PACK_COLOR_1616(r, g);
}


/* MESA_FORMAT_ARGB2101010 */

static void
pack_ubyte_ARGB2101010(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort r = UBYTE_TO_USHORT(src[RCOMP]);
   GLushort g = UBYTE_TO_USHORT(src[GCOMP]);
   GLushort b = UBYTE_TO_USHORT(src[BCOMP]);
   GLushort a = UBYTE_TO_USHORT(src[ACOMP]);
   *d = PACK_COLOR_2101010_US(a, r, g, b);
}

static void
pack_float_ARGB2101010(const GLfloat src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort r, g, b, a;
   UNCLAMPED_FLOAT_TO_USHORT(r, src[RCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(g, src[GCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(b, src[BCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(a, src[ACOMP]);
   *d = PACK_COLOR_2101010_US(a, r, g, b);
}


/* MESA_FORMAT_ABGR2101010_UINT */

static void
pack_ubyte_ABGR2101010_UINT(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort r = UBYTE_TO_USHORT(src[RCOMP]);
   GLushort g = UBYTE_TO_USHORT(src[GCOMP]);
   GLushort b = UBYTE_TO_USHORT(src[BCOMP]);
   GLushort a = UBYTE_TO_USHORT(src[ACOMP]);
   *d = PACK_COLOR_2101010_US(a, b, g, r);
}

static void
pack_float_ABGR2101010_UINT(const GLfloat src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort r, g, b, a;
   UNCLAMPED_FLOAT_TO_USHORT(r, src[RCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(g, src[GCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(b, src[BCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(a, src[ACOMP]);
   *d = PACK_COLOR_2101010_US(a, b, g, r);
}


/* MESA_FORMAT_SRGB8 */

static void
pack_ubyte_SRGB8(const GLubyte src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   d[2] = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
   d[1] = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
   d[0] = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
}

static void
pack_float_SRGB8(const GLfloat src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   d[2] = linear_float_to_srgb_ubyte(src[RCOMP]);
   d[1] = linear_float_to_srgb_ubyte(src[GCOMP]);
   d[0] = linear_float_to_srgb_ubyte(src[BCOMP]);
}


/* MESA_FORMAT_SRGBA8 */

static void
pack_ubyte_SRGBA8(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLubyte r = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
   GLubyte g = linear_ubyte_to_srgb_ubyte(src[GCOMP]);
   GLubyte b = linear_ubyte_to_srgb_ubyte(src[BCOMP]);
   *d = PACK_COLOR_8888(r, g, b, src[ACOMP]);
}

static void
pack_float_SRGBA8(const GLfloat src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLubyte r, g, b, a;
   r = linear_float_to_srgb_ubyte(src[RCOMP]);
   g = linear_float_to_srgb_ubyte(src[GCOMP]);
   b = linear_float_to_srgb_ubyte(src[BCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(a, src[ACOMP]);
   *d = PACK_COLOR_8888(r, g, b, a);
}


/* MESA_FORMAT_SARGB8 */

static void
pack_ubyte_SARGB8(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLubyte r = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
   GLubyte g = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
   GLubyte b = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
   *d = PACK_COLOR_8888(src[ACOMP], r, g, b);
}

static void
pack_float_SARGB8(const GLfloat src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLubyte r, g, b, a;
   r = linear_float_to_srgb_ubyte(src[RCOMP]);
   g = linear_float_to_srgb_ubyte(src[GCOMP]);
   b = linear_float_to_srgb_ubyte(src[BCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(a, src[ACOMP]);
   *d = PACK_COLOR_8888(a, r, g, b);
}


/* MESA_FORMAT_SL8 */

static void
pack_ubyte_SL8(const GLubyte src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   *d = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
}

static void
pack_float_SL8(const GLfloat src[4], void *dst)
{
   GLubyte *d = ((GLubyte *) dst);
   GLubyte l = linear_float_to_srgb_ubyte(src[RCOMP]);
   *d = l;
}


/* MESA_FORMAT_SLA8 */

static void
pack_ubyte_SLA8(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   GLubyte l = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
   *d = PACK_COLOR_88(src[ACOMP], l);
}

static void
pack_float_SLA8(const GLfloat src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   GLubyte a, l = linear_float_to_srgb_ubyte(src[RCOMP]);
   CLAMPED_FLOAT_TO_UBYTE(a, src[ACOMP]);
   *d = PACK_COLOR_88(a, l);
}


/* MESA_FORMAT_RGBA_FLOAT32 */

static void
pack_ubyte_RGBA_FLOAT32(const GLubyte src[4], void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   d[0] = UBYTE_TO_FLOAT(src[0]);
   d[1] = UBYTE_TO_FLOAT(src[1]);
   d[2] = UBYTE_TO_FLOAT(src[2]);
   d[3] = UBYTE_TO_FLOAT(src[3]);
}

static void
pack_float_RGBA_FLOAT32(const GLfloat src[4], void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   d[0] = src[0];
   d[1] = src[1];
   d[2] = src[2];
   d[3] = src[3];
}


/* MESA_FORMAT_RGBA_FLOAT16 */

static void
pack_ubyte_RGBA_FLOAT16(const GLubyte src[4], void *dst)
{
   GLhalfARB *d = ((GLhalfARB *) dst);
   d[0] = _mesa_float_to_half(UBYTE_TO_FLOAT(src[0]));
   d[1] = _mesa_float_to_half(UBYTE_TO_FLOAT(src[1]));
   d[2] = _mesa_float_to_half(UBYTE_TO_FLOAT(src[2]));
   d[3] = _mesa_float_to_half(UBYTE_TO_FLOAT(src[3]));
}

static void
pack_float_RGBA_FLOAT16(const GLfloat src[4], void *dst)
{
   GLhalfARB *d = ((GLhalfARB *) dst);
   d[0] = _mesa_float_to_half(src[0]);
   d[1] = _mesa_float_to_half(src[1]);
   d[2] = _mesa_float_to_half(src[2]);
   d[3] = _mesa_float_to_half(src[3]);
}


/* MESA_FORMAT_RGB_FLOAT32 */

static void
pack_ubyte_RGB_FLOAT32(const GLubyte src[4], void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   d[0] = UBYTE_TO_FLOAT(src[0]);
   d[1] = UBYTE_TO_FLOAT(src[1]);
   d[2] = UBYTE_TO_FLOAT(src[2]);
}

static void
pack_float_RGB_FLOAT32(const GLfloat src[4], void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   d[0] = src[0];
   d[1] = src[1];
   d[2] = src[2];
}


/* MESA_FORMAT_RGB_FLOAT16 */

static void
pack_ubyte_RGB_FLOAT16(const GLubyte src[4], void *dst)
{
   GLhalfARB *d = ((GLhalfARB *) dst);
   d[0] = _mesa_float_to_half(UBYTE_TO_FLOAT(src[0]));
   d[1] = _mesa_float_to_half(UBYTE_TO_FLOAT(src[1]));
   d[2] = _mesa_float_to_half(UBYTE_TO_FLOAT(src[2]));
}

static void
pack_float_RGB_FLOAT16(const GLfloat src[4], void *dst)
{
   GLhalfARB *d = ((GLhalfARB *) dst);
   d[0] = _mesa_float_to_half(src[0]);
   d[1] = _mesa_float_to_half(src[1]);
   d[2] = _mesa_float_to_half(src[2]);
}


/* MESA_FORMAT_ALPHA_FLOAT32 */

static void
pack_ubyte_ALPHA_FLOAT32(const GLubyte src[4], void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   d[0] = UBYTE_TO_FLOAT(src[ACOMP]);
}

static void
pack_float_ALPHA_FLOAT32(const GLfloat src[4], void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   d[0] = src[ACOMP];
}


/* MESA_FORMAT_ALPHA_FLOAT16 */

static void
pack_ubyte_ALPHA_FLOAT16(const GLubyte src[4], void *dst)
{
   GLhalfARB *d = ((GLhalfARB *) dst);
   d[0] = _mesa_float_to_half(UBYTE_TO_FLOAT(src[ACOMP]));
}

static void
pack_float_ALPHA_FLOAT16(const GLfloat src[4], void *dst)
{
   GLhalfARB *d = ((GLhalfARB *) dst);
   d[0] = _mesa_float_to_half(src[ACOMP]);
}


/* MESA_FORMAT_LUMINANCE_FLOAT32 (and INTENSITY_FLOAT32, R_FLOAT32) */

static void
pack_ubyte_LUMINANCE_FLOAT32(const GLubyte src[4], void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   d[0] = UBYTE_TO_FLOAT(src[RCOMP]);
}

static void
pack_float_LUMINANCE_FLOAT32(const GLfloat src[4], void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   d[0] = src[RCOMP];
}


/* MESA_FORMAT_LUMINANCE_FLOAT16 (and INTENSITY_FLOAT16, R_FLOAT32) */

static void
pack_ubyte_LUMINANCE_FLOAT16(const GLubyte src[4], void *dst)
{
   GLhalfARB *d = ((GLhalfARB *) dst);
   d[0] = _mesa_float_to_half(UBYTE_TO_FLOAT(src[RCOMP]));
}

static void
pack_float_LUMINANCE_FLOAT16(const GLfloat src[4], void *dst)
{
   GLhalfARB *d = ((GLhalfARB *) dst);
   d[0] = _mesa_float_to_half(src[RCOMP]);
}


/* MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32 */

static void
pack_ubyte_LUMINANCE_ALPHA_FLOAT32(const GLubyte src[4], void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   d[0] = UBYTE_TO_FLOAT(src[RCOMP]);
   d[1] = UBYTE_TO_FLOAT(src[ACOMP]);
}

static void
pack_float_LUMINANCE_ALPHA_FLOAT32(const GLfloat src[4], void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   d[0] = src[RCOMP];
   d[1] = src[ACOMP];
}


/* MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16 */

static void
pack_ubyte_LUMINANCE_ALPHA_FLOAT16(const GLubyte src[4], void *dst)
{
   GLhalfARB *d = ((GLhalfARB *) dst);
   d[0] = _mesa_float_to_half(UBYTE_TO_FLOAT(src[RCOMP]));
   d[1] = _mesa_float_to_half(UBYTE_TO_FLOAT(src[ACOMP]));
}

static void
pack_float_LUMINANCE_ALPHA_FLOAT16(const GLfloat src[4], void *dst)
{
   GLhalfARB *d = ((GLhalfARB *) dst);
   d[0] = _mesa_float_to_half(src[RCOMP]);
   d[1] = _mesa_float_to_half(src[ACOMP]);
}


/* MESA_FORMAT_RG_FLOAT32 */

static void
pack_ubyte_RG_FLOAT32(const GLubyte src[4], void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   d[0] = UBYTE_TO_FLOAT(src[RCOMP]);
   d[1] = UBYTE_TO_FLOAT(src[GCOMP]);
}

static void
pack_float_RG_FLOAT32(const GLfloat src[4], void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   d[0] = src[RCOMP];
   d[1] = src[GCOMP];
}


/* MESA_FORMAT_RG_FLOAT16 */

static void
pack_ubyte_RG_FLOAT16(const GLubyte src[4], void *dst)
{
   GLhalfARB *d = ((GLhalfARB *) dst);
   d[0] = _mesa_float_to_half(UBYTE_TO_FLOAT(src[RCOMP]));
   d[1] = _mesa_float_to_half(UBYTE_TO_FLOAT(src[GCOMP]));
}

static void
pack_float_RG_FLOAT16(const GLfloat src[4], void *dst)
{
   GLhalfARB *d = ((GLhalfARB *) dst);
   d[0] = _mesa_float_to_half(src[RCOMP]);
   d[1] = _mesa_float_to_half(src[GCOMP]);
}


/* MESA_FORMAT_DUDV8 */

static void
pack_ubyte_DUDV8(const GLubyte src[4], void *dst)
{
   /* XXX is this ever used? */
   GLushort *d = ((GLushort *) dst);
   *d = PACK_COLOR_88(src[0], src[1]);
}

static void
pack_float_DUDV8(const GLfloat src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   GLbyte du, dv;
   du = FLOAT_TO_BYTE(CLAMP(src[0], 0.0F, 1.0F));
   dv = FLOAT_TO_BYTE(CLAMP(src[1], 0.0F, 1.0F));
   *d = PACK_COLOR_88(du, dv);
}


/* MESA_FORMAT_RGBA_16 */

static void
pack_ubyte_RGBA_16(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   d[0] = UBYTE_TO_USHORT(src[RCOMP]);
   d[1] = UBYTE_TO_USHORT(src[GCOMP]);
   d[2] = UBYTE_TO_USHORT(src[BCOMP]);
   d[3] = UBYTE_TO_USHORT(src[ACOMP]);
}

static void
pack_float_RGBA_16(const GLfloat src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   UNCLAMPED_FLOAT_TO_USHORT(d[0], src[RCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(d[1], src[GCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(d[2], src[BCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(d[3], src[ACOMP]);
}



/*
 * MESA_FORMAT_SIGNED_R8
 */

static void
pack_float_SIGNED_R8(const GLfloat src[4], void *dst)
{
   GLbyte *d = (GLbyte *) dst;
   *d = FLOAT_TO_BYTE(CLAMP(src[RCOMP], -1.0f, 1.0f));
}


/*
 * MESA_FORMAT_SIGNED_RG88_REV
 */

static void
pack_float_SIGNED_RG88_REV(const GLfloat src[4], void *dst)
{
   GLushort *d = (GLushort *) dst;
   GLbyte r = FLOAT_TO_BYTE(CLAMP(src[RCOMP], -1.0f, 1.0f));
   GLbyte g = FLOAT_TO_BYTE(CLAMP(src[GCOMP], -1.0f, 1.0f));
   *d = (g << 8) | r;
}


/*
 * MESA_FORMAT_SIGNED_RGBX8888
 */

static void
pack_float_SIGNED_RGBX8888(const GLfloat src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   GLbyte r = FLOAT_TO_BYTE(CLAMP(src[RCOMP], -1.0f, 1.0f));
   GLbyte g = FLOAT_TO_BYTE(CLAMP(src[GCOMP], -1.0f, 1.0f));
   GLbyte b = FLOAT_TO_BYTE(CLAMP(src[BCOMP], -1.0f, 1.0f));
   GLbyte a = 127;
   *d = PACK_COLOR_8888(r, g, b, a);
}


/*
 * MESA_FORMAT_SIGNED_RGBA8888
 */

static void
pack_float_SIGNED_RGBA8888(const GLfloat src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   GLbyte r = FLOAT_TO_BYTE(CLAMP(src[RCOMP], -1.0f, 1.0f));
   GLbyte g = FLOAT_TO_BYTE(CLAMP(src[GCOMP], -1.0f, 1.0f));
   GLbyte b = FLOAT_TO_BYTE(CLAMP(src[BCOMP], -1.0f, 1.0f));
   GLbyte a = FLOAT_TO_BYTE(CLAMP(src[ACOMP], -1.0f, 1.0f));
   *d = PACK_COLOR_8888(r, g, b, a);
}


/*
 * MESA_FORMAT_SIGNED_RGBA8888_REV
 */

static void
pack_float_SIGNED_RGBA8888_REV(const GLfloat src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   GLbyte r = FLOAT_TO_BYTE(CLAMP(src[RCOMP], -1.0f, 1.0f));
   GLbyte g = FLOAT_TO_BYTE(CLAMP(src[GCOMP], -1.0f, 1.0f));
   GLbyte b = FLOAT_TO_BYTE(CLAMP(src[BCOMP], -1.0f, 1.0f));
   GLbyte a = FLOAT_TO_BYTE(CLAMP(src[ACOMP], -1.0f, 1.0f));
   *d = PACK_COLOR_8888(a, b, g, r);
}


/*
 * MESA_FORMAT_SIGNED_R16
 */

static void
pack_float_SIGNED_R16(const GLfloat src[4], void *dst)
{
   GLshort *d = (GLshort *) dst;
   *d = FLOAT_TO_SHORT(CLAMP(src[RCOMP], -1.0f, 1.0f));
}


/*
 * MESA_FORMAT_SIGNED_GR1616
 */

static void
pack_float_SIGNED_GR1616(const GLfloat src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   GLshort r = FLOAT_TO_SHORT(CLAMP(src[RCOMP], -1.0f, 1.0f));
   GLshort g = FLOAT_TO_SHORT(CLAMP(src[GCOMP], -1.0f, 1.0f));
   *d = (g << 16) | (r & 0xffff);
}


/*
 * MESA_FORMAT_SIGNED_RGB_16
 */

static void
pack_float_SIGNED_RGB_16(const GLfloat src[4], void *dst)
{
   GLshort *d = (GLshort *) dst;
   d[0] = FLOAT_TO_SHORT(CLAMP(src[RCOMP], -1.0f, 1.0f));
   d[1] = FLOAT_TO_SHORT(CLAMP(src[GCOMP], -1.0f, 1.0f));
   d[2] = FLOAT_TO_SHORT(CLAMP(src[BCOMP], -1.0f, 1.0f));
}


/*
 * MESA_FORMAT_SIGNED_RGBA_16
 */

static void
pack_float_SIGNED_RGBA_16(const GLfloat src[4], void *dst)
{
   GLshort *d = (GLshort *) dst;
   d[0] = FLOAT_TO_SHORT(CLAMP(src[RCOMP], -1.0f, 1.0f));
   d[1] = FLOAT_TO_SHORT(CLAMP(src[GCOMP], -1.0f, 1.0f));
   d[2] = FLOAT_TO_SHORT(CLAMP(src[BCOMP], -1.0f, 1.0f));
   d[3] = FLOAT_TO_SHORT(CLAMP(src[ACOMP], -1.0f, 1.0f));
}


/*
 * MESA_FORMAT_SIGNED_A8
 */

static void
pack_float_SIGNED_A8(const GLfloat src[4], void *dst)
{
   GLbyte *d = (GLbyte *) dst;
   *d = FLOAT_TO_BYTE(CLAMP(src[ACOMP], -1.0f, 1.0f));
}


/*
 * MESA_FORMAT_SIGNED_L8
 */

static void
pack_float_SIGNED_L8(const GLfloat src[4], void *dst)
{
   GLbyte *d = (GLbyte *) dst;
   *d = FLOAT_TO_BYTE(CLAMP(src[RCOMP], -1.0f, 1.0f));
}


/*
 * MESA_FORMAT_SIGNED_AL88
 */

static void
pack_float_SIGNED_AL88(const GLfloat src[4], void *dst)
{
   GLushort *d = (GLushort *) dst;
   GLbyte l = FLOAT_TO_BYTE(CLAMP(src[RCOMP], -1.0f, 1.0f));
   GLbyte a = FLOAT_TO_BYTE(CLAMP(src[ACOMP], -1.0f, 1.0f));
   *d = (a << 8) | l;
}


/*
 * MESA_FORMAT_SIGNED_A16
 */

static void
pack_float_SIGNED_A16(const GLfloat src[4], void *dst)
{
   GLshort *d = (GLshort *) dst;
   *d = FLOAT_TO_SHORT(CLAMP(src[ACOMP], -1.0f, 1.0f));
}


/*
 * MESA_FORMAT_SIGNED_L16
 */

static void
pack_float_SIGNED_L16(const GLfloat src[4], void *dst)
{
   GLshort *d = (GLshort *) dst;
   *d = FLOAT_TO_SHORT(CLAMP(src[RCOMP], -1.0f, 1.0f));
}


/*
 * MESA_FORMAT_SIGNED_AL1616
 */

static void
pack_float_SIGNED_AL1616(const GLfloat src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   GLshort l = FLOAT_TO_SHORT(CLAMP(src[RCOMP], -1.0f, 1.0f));
   GLshort a = FLOAT_TO_SHORT(CLAMP(src[ACOMP], -1.0f, 1.0f));
   *d = PACK_COLOR_1616(a, l);
}


/*
 * MESA_FORMAT_RGB9_E5_FLOAT;
 */

static void
pack_float_RGB9_E5_FLOAT(const GLfloat src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   *d = float3_to_rgb9e5(src);
}

static void
pack_ubyte_RGB9_E5_FLOAT(const GLubyte src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   GLfloat rgb[3];
   rgb[0] = UBYTE_TO_FLOAT(src[RCOMP]);
   rgb[1] = UBYTE_TO_FLOAT(src[GCOMP]);
   rgb[2] = UBYTE_TO_FLOAT(src[BCOMP]);
   *d = float3_to_rgb9e5(rgb);
}



/*
 * MESA_FORMAT_R11_G11_B10_FLOAT;
 */

static void
pack_ubyte_R11_G11_B10_FLOAT(const GLubyte src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   GLfloat rgb[3];
   rgb[0] = UBYTE_TO_FLOAT(src[RCOMP]);
   rgb[1] = UBYTE_TO_FLOAT(src[GCOMP]);
   rgb[2] = UBYTE_TO_FLOAT(src[BCOMP]);
   *d = float3_to_r11g11b10f(rgb);
}

static void
pack_float_R11_G11_B10_FLOAT(const GLfloat src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   *d = float3_to_r11g11b10f(src);
}


/*
 * MESA_FORMAT_XRGB4444_UNORM
 */

static void
pack_ubyte_XRGB4444_UNORM(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   *d = PACK_COLOR_4444(255, src[RCOMP], src[GCOMP], src[BCOMP]);
}

static void
pack_float_XRGB4444_UNORM(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   _mesa_unclamped_float_rgba_to_ubyte(v, src);
   pack_ubyte_XRGB4444_UNORM(v, dst);
}


/*
 * MESA_FORMAT_XRGB1555_UNORM
 */

static void
pack_ubyte_XRGB1555_UNORM(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   *d = PACK_COLOR_1555(255, src[RCOMP], src[GCOMP], src[BCOMP]);
}

static void
pack_float_XRGB1555_UNORM(const GLfloat src[4], void *dst)
{
   GLubyte v[4];
   _mesa_unclamped_float_rgba_to_ubyte(v, src);
   pack_ubyte_XRGB1555_UNORM(v, dst);
}


/*
 * MESA_FORMAT_XBGR8888_SNORM
 */

static void
pack_float_XBGR8888_SNORM(const GLfloat src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   GLbyte r = FLOAT_TO_BYTE(CLAMP(src[RCOMP], -1.0f, 1.0f));
   GLbyte g = FLOAT_TO_BYTE(CLAMP(src[GCOMP], -1.0f, 1.0f));
   GLbyte b = FLOAT_TO_BYTE(CLAMP(src[BCOMP], -1.0f, 1.0f));
   *d = PACK_COLOR_8888(127, b, g, r);
}


/*
 * MESA_FORMAT_XBGR8888_SRGB
 */

static void
pack_float_XBGR8888_SRGB(const GLfloat src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   GLubyte r = linear_float_to_srgb_ubyte(src[RCOMP]);
   GLubyte g = linear_float_to_srgb_ubyte(src[GCOMP]);
   GLubyte b = linear_float_to_srgb_ubyte(src[BCOMP]);
   *d = PACK_COLOR_8888(127, b, g, r);
}


/* MESA_FORMAT_XRGB2101010_UNORM */

static void
pack_ubyte_XRGB2101010_UNORM(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort r = UBYTE_TO_USHORT(src[RCOMP]);
   GLushort g = UBYTE_TO_USHORT(src[GCOMP]);
   GLushort b = UBYTE_TO_USHORT(src[BCOMP]);
   *d = PACK_COLOR_2101010_US(3, r, g, b);
}

static void
pack_float_XRGB2101010_UNORM(const GLfloat src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort r, g, b;
   UNCLAMPED_FLOAT_TO_USHORT(r, src[RCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(g, src[GCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(b, src[BCOMP]);
   *d = PACK_COLOR_2101010_US(3, r, g, b);
}


/* MESA_FORMAT_XBGR16161616_UNORM */

static void
pack_ubyte_XBGR16161616_UNORM(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   d[0] = UBYTE_TO_USHORT(src[RCOMP]);
   d[1] = UBYTE_TO_USHORT(src[GCOMP]);
   d[2] = UBYTE_TO_USHORT(src[BCOMP]);
   d[3] = 65535;
}

static void
pack_float_XBGR16161616_UNORM(const GLfloat src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   UNCLAMPED_FLOAT_TO_USHORT(d[0], src[RCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(d[1], src[GCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(d[2], src[BCOMP]);
   d[3] = 65535;
}


/* MESA_FORMAT_XBGR16161616_SNORM */

static void
pack_float_XBGR16161616_SNORM(const GLfloat src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   UNCLAMPED_FLOAT_TO_SHORT(d[0], src[RCOMP]);
   UNCLAMPED_FLOAT_TO_SHORT(d[1], src[GCOMP]);
   UNCLAMPED_FLOAT_TO_SHORT(d[2], src[BCOMP]);
   d[3] = 32767;
}


/* MESA_FORMAT_XBGR16161616_FLOAT */

static void
pack_float_XBGR16161616_FLOAT(const GLfloat src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   d[0] = _mesa_float_to_half(src[RCOMP]);
   d[1] = _mesa_float_to_half(src[GCOMP]);
   d[2] = _mesa_float_to_half(src[BCOMP]);
   d[3] = _mesa_float_to_half(1.0);
}

/* MESA_FORMAT_XBGR32323232_FLOAT */

static void
pack_float_XBGR32323232_FLOAT(const GLfloat src[4], void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   d[0] = src[RCOMP];
   d[1] = src[GCOMP];
   d[2] = src[BCOMP];
   d[3] = 1.0;
}


/**
 * Return a function that can pack a GLubyte rgba[4] color.
 */
gl_pack_ubyte_rgba_func
_mesa_get_pack_ubyte_rgba_function(gl_format format)
{
   static gl_pack_ubyte_rgba_func table[MESA_FORMAT_COUNT];
   static GLboolean initialized = GL_FALSE;

   if (!initialized) {
      memset(table, 0, sizeof(table));

      table[MESA_FORMAT_NONE] = NULL;

      table[MESA_FORMAT_RGBA8888] = pack_ubyte_RGBA8888;
      table[MESA_FORMAT_RGBA8888_REV] = pack_ubyte_RGBA8888_REV;
      table[MESA_FORMAT_ARGB8888] = pack_ubyte_ARGB8888;
      table[MESA_FORMAT_ARGB8888_REV] = pack_ubyte_ARGB8888_REV;
      table[MESA_FORMAT_RGBX8888] = pack_ubyte_RGBA8888; /* reused */
      table[MESA_FORMAT_RGBX8888_REV] = pack_ubyte_RGBA8888_REV; /* reused */
      table[MESA_FORMAT_XRGB8888] = pack_ubyte_XRGB8888;
      table[MESA_FORMAT_XRGB8888_REV] = pack_ubyte_XRGB8888_REV;
      table[MESA_FORMAT_RGB888] = pack_ubyte_RGB888;
      table[MESA_FORMAT_BGR888] = pack_ubyte_BGR888;
      table[MESA_FORMAT_RGB565] = pack_ubyte_RGB565;
      table[MESA_FORMAT_RGB565_REV] = pack_ubyte_RGB565_REV;
      table[MESA_FORMAT_ARGB4444] = pack_ubyte_ARGB4444;
      table[MESA_FORMAT_ARGB4444_REV] = pack_ubyte_ARGB4444_REV;
      table[MESA_FORMAT_RGBA5551] = pack_ubyte_RGBA5551;
      table[MESA_FORMAT_ARGB1555] = pack_ubyte_ARGB1555;
      table[MESA_FORMAT_ARGB1555_REV] = pack_ubyte_ARGB1555_REV;
      table[MESA_FORMAT_AL44] = pack_ubyte_AL44;
      table[MESA_FORMAT_AL88] = pack_ubyte_AL88;
      table[MESA_FORMAT_AL88_REV] = pack_ubyte_AL88_REV;
      table[MESA_FORMAT_AL1616] = pack_ubyte_AL1616;
      table[MESA_FORMAT_AL1616_REV] = pack_ubyte_AL1616_REV;
      table[MESA_FORMAT_RGB332] = pack_ubyte_RGB332;
      table[MESA_FORMAT_A8] = pack_ubyte_A8;
      table[MESA_FORMAT_A16] = pack_ubyte_A16;
      table[MESA_FORMAT_L8] = pack_ubyte_L8;
      table[MESA_FORMAT_L16] = pack_ubyte_L16;
      table[MESA_FORMAT_I8] = pack_ubyte_L8; /* reuse pack_ubyte_L8 */
      table[MESA_FORMAT_I16] = pack_ubyte_L16; /* reuse pack_ubyte_L16 */
      table[MESA_FORMAT_YCBCR] = pack_ubyte_YCBCR;
      table[MESA_FORMAT_YCBCR_REV] = pack_ubyte_YCBCR_REV;
      table[MESA_FORMAT_R8] = pack_ubyte_R8;
      table[MESA_FORMAT_GR88] = pack_ubyte_GR88;
      table[MESA_FORMAT_RG88] = pack_ubyte_RG88;
      table[MESA_FORMAT_R16] = pack_ubyte_R16;
      table[MESA_FORMAT_GR1616] = pack_ubyte_GR1616;
      table[MESA_FORMAT_RG1616] = pack_ubyte_RG1616;
      table[MESA_FORMAT_ARGB2101010] = pack_ubyte_ARGB2101010;
      table[MESA_FORMAT_ABGR2101010_UINT] = pack_ubyte_ABGR2101010_UINT;

      /* should never convert RGBA to these formats */
      table[MESA_FORMAT_Z24_S8] = NULL;
      table[MESA_FORMAT_S8_Z24] = NULL;
      table[MESA_FORMAT_Z16] = NULL;
      table[MESA_FORMAT_X8_Z24] = NULL;
      table[MESA_FORMAT_Z24_X8] = NULL;
      table[MESA_FORMAT_Z32] = NULL;
      table[MESA_FORMAT_S8] = NULL;

      /* sRGB */
      table[MESA_FORMAT_SRGB8] = pack_ubyte_SRGB8;
      table[MESA_FORMAT_SRGBA8] = pack_ubyte_SRGBA8;
      table[MESA_FORMAT_SARGB8] = pack_ubyte_SARGB8;
      table[MESA_FORMAT_SL8] = pack_ubyte_SL8;
      table[MESA_FORMAT_SLA8] = pack_ubyte_SLA8;

      /* n/a */
      table[MESA_FORMAT_SRGB_DXT1] = NULL; /* pack_ubyte_SRGB_DXT1; */
      table[MESA_FORMAT_SRGBA_DXT1] = NULL; /* pack_ubyte_SRGBA_DXT1; */
      table[MESA_FORMAT_SRGBA_DXT3] = NULL; /* pack_ubyte_SRGBA_DXT3; */
      table[MESA_FORMAT_SRGBA_DXT5] = NULL; /* pack_ubyte_SRGBA_DXT5; */

      table[MESA_FORMAT_RGB_FXT1] = NULL; /* pack_ubyte_RGB_FXT1; */
      table[MESA_FORMAT_RGBA_FXT1] = NULL; /* pack_ubyte_RGBA_FXT1; */
      table[MESA_FORMAT_RGB_DXT1] = NULL; /* pack_ubyte_RGB_DXT1; */
      table[MESA_FORMAT_RGBA_DXT1] = NULL; /* pack_ubyte_RGBA_DXT1; */
      table[MESA_FORMAT_RGBA_DXT3] = NULL; /* pack_ubyte_RGBA_DXT3; */
      table[MESA_FORMAT_RGBA_DXT5] = NULL; /* pack_ubyte_RGBA_DXT5; */

      table[MESA_FORMAT_RGBA_FLOAT32] = pack_ubyte_RGBA_FLOAT32;
      table[MESA_FORMAT_RGBA_FLOAT16] = pack_ubyte_RGBA_FLOAT16;
      table[MESA_FORMAT_RGB_FLOAT32] = pack_ubyte_RGB_FLOAT32;
      table[MESA_FORMAT_RGB_FLOAT16] = pack_ubyte_RGB_FLOAT16;
      table[MESA_FORMAT_ALPHA_FLOAT32] = pack_ubyte_ALPHA_FLOAT32;
      table[MESA_FORMAT_ALPHA_FLOAT16] = pack_ubyte_ALPHA_FLOAT16;
      table[MESA_FORMAT_LUMINANCE_FLOAT32] = pack_ubyte_LUMINANCE_FLOAT32;
      table[MESA_FORMAT_LUMINANCE_FLOAT16] = pack_ubyte_LUMINANCE_FLOAT16;
      table[MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32] = pack_ubyte_LUMINANCE_ALPHA_FLOAT32;
      table[MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16] = pack_ubyte_LUMINANCE_ALPHA_FLOAT16;
      table[MESA_FORMAT_INTENSITY_FLOAT32] = pack_ubyte_LUMINANCE_FLOAT32;
      table[MESA_FORMAT_INTENSITY_FLOAT16] = pack_ubyte_LUMINANCE_FLOAT16;
      table[MESA_FORMAT_R_FLOAT32] = pack_ubyte_LUMINANCE_FLOAT32;
      table[MESA_FORMAT_R_FLOAT16] = pack_ubyte_LUMINANCE_FLOAT16;
      table[MESA_FORMAT_RG_FLOAT32] = pack_ubyte_RG_FLOAT32;
      table[MESA_FORMAT_RG_FLOAT16] = pack_ubyte_RG_FLOAT16;

      /* n/a */
      table[MESA_FORMAT_RGBA_INT8] = NULL; /* pack_ubyte_RGBA_INT8 */
      table[MESA_FORMAT_RGBA_INT16] = NULL; /* pack_ubyte_RGBA_INT16 */
      table[MESA_FORMAT_RGBA_INT32] = NULL; /* pack_ubyte_RGBA_INT32 */
      table[MESA_FORMAT_RGBA_UINT8] = NULL; /* pack_ubyte_RGBA_UINT8 */
      table[MESA_FORMAT_RGBA_UINT16] = NULL; /* pack_ubyte_RGBA_UINT16 */
      table[MESA_FORMAT_RGBA_UINT32] = NULL; /* pack_ubyte_RGBA_UINT32 */

      table[MESA_FORMAT_DUDV8] = pack_ubyte_DUDV8;

      table[MESA_FORMAT_RGBA_16] = pack_ubyte_RGBA_16;

      /* n/a */
      table[MESA_FORMAT_SIGNED_R8] = NULL;
      table[MESA_FORMAT_SIGNED_RG88_REV] = NULL;
      table[MESA_FORMAT_SIGNED_RGBX8888] = NULL;
      table[MESA_FORMAT_SIGNED_RGBA8888] = NULL;
      table[MESA_FORMAT_SIGNED_RGBA8888_REV] = NULL;
      table[MESA_FORMAT_SIGNED_R16] = NULL;
      table[MESA_FORMAT_SIGNED_GR1616] = NULL;
      table[MESA_FORMAT_SIGNED_RGB_16] = NULL;
      table[MESA_FORMAT_SIGNED_RGBA_16] = NULL;
      table[MESA_FORMAT_SIGNED_A8] = NULL;
      table[MESA_FORMAT_SIGNED_L8] = NULL;
      table[MESA_FORMAT_SIGNED_AL88] = NULL;
      table[MESA_FORMAT_SIGNED_I8] = NULL;
      table[MESA_FORMAT_SIGNED_A16] = NULL;
      table[MESA_FORMAT_SIGNED_L16] = NULL;
      table[MESA_FORMAT_SIGNED_AL1616] = NULL;
      table[MESA_FORMAT_SIGNED_I16] = NULL;


      table[MESA_FORMAT_RGBA_16] = pack_ubyte_RGBA_16;

      table[MESA_FORMAT_RGB9_E5_FLOAT] = pack_ubyte_RGB9_E5_FLOAT;
      table[MESA_FORMAT_R11_G11_B10_FLOAT] = pack_ubyte_R11_G11_B10_FLOAT;

      table[MESA_FORMAT_XRGB4444_UNORM] = pack_ubyte_XRGB4444_UNORM;
      table[MESA_FORMAT_XRGB1555_UNORM] = pack_ubyte_XRGB1555_UNORM;
      table[MESA_FORMAT_XBGR8888_SNORM] = NULL;
      table[MESA_FORMAT_XBGR8888_SRGB] = NULL;
      table[MESA_FORMAT_XBGR8888_UINT] = NULL;
      table[MESA_FORMAT_XBGR8888_SINT] = NULL;
      table[MESA_FORMAT_XRGB2101010_UNORM] = pack_ubyte_XRGB2101010_UNORM;
      table[MESA_FORMAT_XBGR16161616_UNORM] = pack_ubyte_XBGR16161616_UNORM;
      table[MESA_FORMAT_XBGR16161616_SNORM] = NULL;
      table[MESA_FORMAT_XBGR16161616_FLOAT] = NULL;
      table[MESA_FORMAT_XBGR16161616_UINT] = NULL;
      table[MESA_FORMAT_XBGR16161616_SINT] = NULL;
      table[MESA_FORMAT_XBGR32323232_FLOAT] = NULL;
      table[MESA_FORMAT_XBGR32323232_UINT] = NULL;
      table[MESA_FORMAT_XBGR32323232_SINT] = NULL;

      initialized = GL_TRUE;
   }

   return table[format];
}



/**
 * Return a function that can pack a GLfloat rgba[4] color.
 */
gl_pack_float_rgba_func
_mesa_get_pack_float_rgba_function(gl_format format)
{
   static gl_pack_float_rgba_func table[MESA_FORMAT_COUNT];
   static GLboolean initialized = GL_FALSE;

   if (!initialized) {
      memset(table, 0, sizeof(table));

      table[MESA_FORMAT_NONE] = NULL;

      table[MESA_FORMAT_RGBA8888] = pack_float_RGBA8888;
      table[MESA_FORMAT_RGBA8888_REV] = pack_float_RGBA8888_REV;
      table[MESA_FORMAT_ARGB8888] = pack_float_ARGB8888;
      table[MESA_FORMAT_ARGB8888_REV] = pack_float_ARGB8888_REV;
      table[MESA_FORMAT_RGBX8888] = pack_float_RGBA8888; /* reused */
      table[MESA_FORMAT_RGBX8888_REV] = pack_float_RGBA8888_REV; /* reused */
      table[MESA_FORMAT_XRGB8888] = pack_float_XRGB8888;
      table[MESA_FORMAT_XRGB8888_REV] = pack_float_XRGB8888_REV;
      table[MESA_FORMAT_RGB888] = pack_float_RGB888;
      table[MESA_FORMAT_BGR888] = pack_float_BGR888;
      table[MESA_FORMAT_RGB565] = pack_float_RGB565;
      table[MESA_FORMAT_RGB565_REV] = pack_float_RGB565_REV;
      table[MESA_FORMAT_ARGB4444] = pack_float_ARGB4444;
      table[MESA_FORMAT_ARGB4444_REV] = pack_float_ARGB4444_REV;
      table[MESA_FORMAT_RGBA5551] = pack_float_RGBA5551;
      table[MESA_FORMAT_ARGB1555] = pack_float_ARGB1555;
      table[MESA_FORMAT_ARGB1555_REV] = pack_float_ARGB1555_REV;

      table[MESA_FORMAT_AL44] = pack_float_AL44;
      table[MESA_FORMAT_AL88] = pack_float_AL88;
      table[MESA_FORMAT_AL88_REV] = pack_float_AL88_REV;
      table[MESA_FORMAT_AL1616] = pack_float_AL1616;
      table[MESA_FORMAT_AL1616_REV] = pack_float_AL1616_REV;
      table[MESA_FORMAT_RGB332] = pack_float_RGB332;
      table[MESA_FORMAT_A8] = pack_float_A8;
      table[MESA_FORMAT_A16] = pack_float_A16;
      table[MESA_FORMAT_L8] = pack_float_L8;
      table[MESA_FORMAT_L16] = pack_float_L16;
      table[MESA_FORMAT_I8] = pack_float_L8; /* reuse pack_float_L8 */
      table[MESA_FORMAT_I16] = pack_float_L16; /* reuse pack_float_L16 */
      table[MESA_FORMAT_YCBCR] = pack_float_YCBCR;
      table[MESA_FORMAT_YCBCR_REV] = pack_float_YCBCR_REV;
      table[MESA_FORMAT_R8] = pack_float_R8;
      table[MESA_FORMAT_GR88] = pack_float_GR88;
      table[MESA_FORMAT_RG88] = pack_float_RG88;
      table[MESA_FORMAT_R16] = pack_float_R16;
      table[MESA_FORMAT_GR1616] = pack_float_GR1616;
      table[MESA_FORMAT_RG1616] = pack_float_RG1616;
      table[MESA_FORMAT_ARGB2101010] = pack_float_ARGB2101010;
      table[MESA_FORMAT_ABGR2101010_UINT] = pack_float_ABGR2101010_UINT;

      /* should never convert RGBA to these formats */
      table[MESA_FORMAT_Z24_S8] = NULL;
      table[MESA_FORMAT_S8_Z24] = NULL;
      table[MESA_FORMAT_Z16] = NULL;
      table[MESA_FORMAT_X8_Z24] = NULL;
      table[MESA_FORMAT_Z24_X8] = NULL;
      table[MESA_FORMAT_Z32] = NULL;
      table[MESA_FORMAT_S8] = NULL;

      table[MESA_FORMAT_SRGB8] = pack_float_SRGB8;
      table[MESA_FORMAT_SRGBA8] = pack_float_SRGBA8;
      table[MESA_FORMAT_SARGB8] = pack_float_SARGB8;
      table[MESA_FORMAT_SL8] = pack_float_SL8;
      table[MESA_FORMAT_SLA8] = pack_float_SLA8;

      /* n/a */
      table[MESA_FORMAT_SRGB_DXT1] = NULL;
      table[MESA_FORMAT_SRGBA_DXT1] = NULL;
      table[MESA_FORMAT_SRGBA_DXT3] = NULL;
      table[MESA_FORMAT_SRGBA_DXT5] = NULL;

      table[MESA_FORMAT_RGB_FXT1] = NULL;
      table[MESA_FORMAT_RGBA_FXT1] = NULL;
      table[MESA_FORMAT_RGB_DXT1] = NULL;
      table[MESA_FORMAT_RGBA_DXT1] = NULL;
      table[MESA_FORMAT_RGBA_DXT3] = NULL;
      table[MESA_FORMAT_RGBA_DXT5] = NULL;

      table[MESA_FORMAT_RGBA_FLOAT32] = pack_float_RGBA_FLOAT32;
      table[MESA_FORMAT_RGBA_FLOAT16] = pack_float_RGBA_FLOAT16;
      table[MESA_FORMAT_RGB_FLOAT32] = pack_float_RGB_FLOAT32;
      table[MESA_FORMAT_RGB_FLOAT16] = pack_float_RGB_FLOAT16;
      table[MESA_FORMAT_ALPHA_FLOAT32] = pack_float_ALPHA_FLOAT32;
      table[MESA_FORMAT_ALPHA_FLOAT16] = pack_float_ALPHA_FLOAT16;
      table[MESA_FORMAT_LUMINANCE_FLOAT32] = pack_float_LUMINANCE_FLOAT32;
      table[MESA_FORMAT_LUMINANCE_FLOAT16] = pack_float_LUMINANCE_FLOAT16;
      table[MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32] = pack_float_LUMINANCE_ALPHA_FLOAT32;
      table[MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16] = pack_float_LUMINANCE_ALPHA_FLOAT16;

      table[MESA_FORMAT_INTENSITY_FLOAT32] = pack_float_LUMINANCE_FLOAT32;
      table[MESA_FORMAT_INTENSITY_FLOAT16] = pack_float_LUMINANCE_FLOAT16;
      table[MESA_FORMAT_R_FLOAT32] = pack_float_LUMINANCE_FLOAT32;
      table[MESA_FORMAT_R_FLOAT16] = pack_float_LUMINANCE_FLOAT16;
      table[MESA_FORMAT_RG_FLOAT32] = pack_float_RG_FLOAT32;
      table[MESA_FORMAT_RG_FLOAT16] = pack_float_RG_FLOAT16;

      /* n/a */
      table[MESA_FORMAT_RGBA_INT8] = NULL;
      table[MESA_FORMAT_RGBA_INT16] = NULL;
      table[MESA_FORMAT_RGBA_INT32] = NULL;
      table[MESA_FORMAT_RGBA_UINT8] = NULL;
      table[MESA_FORMAT_RGBA_UINT16] = NULL;
      table[MESA_FORMAT_RGBA_UINT32] = NULL;

      table[MESA_FORMAT_DUDV8] = pack_float_DUDV8;

      table[MESA_FORMAT_RGBA_16] = pack_float_RGBA_16;

      table[MESA_FORMAT_SIGNED_R8] = pack_float_SIGNED_R8;
      table[MESA_FORMAT_SIGNED_RG88_REV] = pack_float_SIGNED_RG88_REV;
      table[MESA_FORMAT_SIGNED_RGBX8888] = pack_float_SIGNED_RGBX8888;
      table[MESA_FORMAT_SIGNED_RGBA8888] = pack_float_SIGNED_RGBA8888;
      table[MESA_FORMAT_SIGNED_RGBA8888_REV] = pack_float_SIGNED_RGBA8888_REV;
      table[MESA_FORMAT_SIGNED_R16] = pack_float_SIGNED_R16;
      table[MESA_FORMAT_SIGNED_GR1616] = pack_float_SIGNED_GR1616;
      table[MESA_FORMAT_SIGNED_RGB_16] = pack_float_SIGNED_RGB_16;
      table[MESA_FORMAT_SIGNED_RGBA_16] = pack_float_SIGNED_RGBA_16;
      table[MESA_FORMAT_SIGNED_A8] = pack_float_SIGNED_A8;
      table[MESA_FORMAT_SIGNED_L8] = pack_float_SIGNED_L8;
      table[MESA_FORMAT_SIGNED_AL88] = pack_float_SIGNED_AL88;
      table[MESA_FORMAT_SIGNED_I8] = pack_float_SIGNED_L8; /* reused */
      table[MESA_FORMAT_SIGNED_A16] = pack_float_SIGNED_A16;
      table[MESA_FORMAT_SIGNED_L16] = pack_float_SIGNED_L16;
      table[MESA_FORMAT_SIGNED_AL1616] = pack_float_SIGNED_AL1616;
      table[MESA_FORMAT_SIGNED_I16] = pack_float_SIGNED_L16; /* reused */

      table[MESA_FORMAT_RGB9_E5_FLOAT] = pack_float_RGB9_E5_FLOAT;
      table[MESA_FORMAT_R11_G11_B10_FLOAT] = pack_float_R11_G11_B10_FLOAT;

      table[MESA_FORMAT_XRGB4444_UNORM] = pack_float_XRGB4444_UNORM;
      table[MESA_FORMAT_XRGB1555_UNORM] = pack_float_XRGB1555_UNORM;
      table[MESA_FORMAT_XBGR8888_SNORM] = pack_float_XBGR8888_SNORM;
      table[MESA_FORMAT_XBGR8888_SRGB] = pack_float_XBGR8888_SRGB;
      table[MESA_FORMAT_XBGR8888_UINT] = NULL;
      table[MESA_FORMAT_XBGR8888_SINT] = NULL;
      table[MESA_FORMAT_XRGB2101010_UNORM] = pack_float_XRGB2101010_UNORM;
      table[MESA_FORMAT_XBGR16161616_UNORM] = pack_float_XBGR16161616_UNORM;
      table[MESA_FORMAT_XBGR16161616_SNORM] = pack_float_XBGR16161616_SNORM;
      table[MESA_FORMAT_XBGR16161616_FLOAT] = pack_float_XBGR16161616_FLOAT;
      table[MESA_FORMAT_XBGR16161616_UINT] = NULL;
      table[MESA_FORMAT_XBGR16161616_SINT] = NULL;
      table[MESA_FORMAT_XBGR32323232_FLOAT] = pack_float_XBGR32323232_FLOAT;
      table[MESA_FORMAT_XBGR32323232_UINT] = NULL;
      table[MESA_FORMAT_XBGR32323232_SINT] = NULL;

      initialized = GL_TRUE;
   }

   return table[format];
}



static pack_float_rgba_row_func
get_pack_float_rgba_row_function(gl_format format)
{
   static pack_float_rgba_row_func table[MESA_FORMAT_COUNT];
   static GLboolean initialized = GL_FALSE;

   if (!initialized) {
      /* We don't need a special row packing function for each format.
       * There's a generic fallback which uses a per-pixel packing function.
       */
      memset(table, 0, sizeof(table));

      table[MESA_FORMAT_RGBA8888] = pack_row_float_RGBA8888;
      table[MESA_FORMAT_RGBA8888_REV] = pack_row_float_RGBA8888_REV;
      table[MESA_FORMAT_ARGB8888] = pack_row_float_ARGB8888;
      table[MESA_FORMAT_ARGB8888_REV] = pack_row_float_ARGB8888_REV;
      table[MESA_FORMAT_RGBX8888] = pack_row_float_RGBA8888; /* reused */
      table[MESA_FORMAT_RGBX8888_REV] = pack_row_float_RGBA8888_REV; /* reused */
      table[MESA_FORMAT_XRGB8888] = pack_row_float_XRGB8888;
      table[MESA_FORMAT_XRGB8888_REV] = pack_row_float_XRGB8888_REV;
      table[MESA_FORMAT_RGB888] = pack_row_float_RGB888;
      table[MESA_FORMAT_BGR888] = pack_row_float_BGR888;
      table[MESA_FORMAT_RGB565] = pack_row_float_RGB565;
      table[MESA_FORMAT_RGB565_REV] = pack_row_float_RGB565_REV;

      initialized = GL_TRUE;
   }

   return table[format];
}



static pack_ubyte_rgba_row_func
get_pack_ubyte_rgba_row_function(gl_format format)
{
   static pack_ubyte_rgba_row_func table[MESA_FORMAT_COUNT];
   static GLboolean initialized = GL_FALSE;

   if (!initialized) {
      /* We don't need a special row packing function for each format.
       * There's a generic fallback which uses a per-pixel packing function.
       */
      memset(table, 0, sizeof(table));

      table[MESA_FORMAT_RGBA8888] = pack_row_ubyte_RGBA8888;
      table[MESA_FORMAT_RGBA8888_REV] = pack_row_ubyte_RGBA8888_REV;
      table[MESA_FORMAT_ARGB8888] = pack_row_ubyte_ARGB8888;
      table[MESA_FORMAT_ARGB8888_REV] = pack_row_ubyte_ARGB8888_REV;
      table[MESA_FORMAT_RGBX8888] = pack_row_ubyte_RGBA8888; /* reused */
      table[MESA_FORMAT_RGBX8888_REV] = pack_row_ubyte_RGBA8888_REV; /* reused */
      table[MESA_FORMAT_XRGB8888] = pack_row_ubyte_XRGB8888;
      table[MESA_FORMAT_XRGB8888_REV] = pack_row_ubyte_XRGB8888_REV;
      table[MESA_FORMAT_RGB888] = pack_row_ubyte_RGB888;
      table[MESA_FORMAT_BGR888] = pack_row_ubyte_BGR888;
      table[MESA_FORMAT_RGB565] = pack_row_ubyte_RGB565;
      table[MESA_FORMAT_RGB565_REV] = pack_row_ubyte_RGB565_REV;

      initialized = GL_TRUE;
   }

   return table[format];
}



/**
 * Pack a row of GLfloat rgba[4] values to the destination.
 */
void
_mesa_pack_float_rgba_row(gl_format format, GLuint n,
                          const GLfloat src[][4], void *dst)
{
   pack_float_rgba_row_func packrow = get_pack_float_rgba_row_function(format);
   if (packrow) {
      /* use "fast" function */
      packrow(n, src, dst);
   }
   else {
      /* slower fallback */
      gl_pack_float_rgba_func pack = _mesa_get_pack_float_rgba_function(format);
      GLuint dstStride = _mesa_get_format_bytes(format);
      GLubyte *dstPtr = (GLubyte *) dst;
      GLuint i;

      assert(pack);
      if (!pack)
         return;

      for (i = 0; i < n; i++) {
         pack(src[i], dstPtr);
         dstPtr += dstStride;
      }
   }
}


/**
 * Pack a row of GLubyte rgba[4] values to the destination.
 */
void
_mesa_pack_ubyte_rgba_row(gl_format format, GLuint n,
                          const GLubyte src[][4], void *dst)
{
   pack_ubyte_rgba_row_func packrow = get_pack_ubyte_rgba_row_function(format);
   if (packrow) {
      /* use "fast" function */
      packrow(n, src, dst);
   }
   else {
      /* slower fallback */
      gl_pack_ubyte_rgba_func pack = _mesa_get_pack_ubyte_rgba_function(format);
      const GLuint stride = _mesa_get_format_bytes(format);
      GLubyte *d = ((GLubyte *) dst);
      GLuint i;

      assert(pack);
      if (!pack)
         return;

      for (i = 0; i < n; i++) {
         pack(src[i], d);
         d += stride;
      }
   }
}


/**
 * Pack a 2D image of ubyte RGBA pixels in the given format.
 * \param srcRowStride  source image row stride in bytes
 * \param dstRowStride  destination image row stride in bytes
 */
void
_mesa_pack_ubyte_rgba_rect(gl_format format, GLuint width, GLuint height,
                           const GLubyte *src, GLint srcRowStride,
                           void *dst, GLint dstRowStride)
{
   pack_ubyte_rgba_row_func packrow = get_pack_ubyte_rgba_row_function(format);
   GLubyte *dstUB = (GLubyte *) dst;
   GLuint i;

   if (packrow) {
      if (srcRowStride == width * 4 * sizeof(GLubyte) &&
          dstRowStride == _mesa_format_row_stride(format, width)) {
         /* do whole image at once */
         packrow(width * height, (const GLubyte (*)[4]) src, dst);
      }
      else {
         /* row by row */
         for (i = 0; i < height; i++) {
            packrow(width, (const GLubyte (*)[4]) src, dstUB);
            src += srcRowStride;
            dstUB += dstRowStride;
         }
      }
   }
   else {
      /* slower fallback */
      for (i = 0; i < height; i++) {
         _mesa_pack_ubyte_rgba_row(format, width,
                                   (const GLubyte (*)[4]) src, dstUB);
         src += srcRowStride;
         dstUB += dstRowStride;
      }
   }
}



/**
 ** Pack float Z pixels
 **/

static void
pack_float_z_Z24_S8(const GLfloat *src, void *dst)
{
   /* don't disturb the stencil values */
   GLuint *d = ((GLuint *) dst);
   const GLdouble scale = (GLdouble) 0xffffff;
   GLuint s = *d & 0xff;
   GLuint z = (GLuint) (*src * scale);
   assert(z <= 0xffffff);
   *d = (z << 8) | s;
}

static void
pack_float_z_S8_Z24(const GLfloat *src, void *dst)
{
   /* don't disturb the stencil values */
   GLuint *d = ((GLuint *) dst);
   const GLdouble scale = (GLdouble) 0xffffff;
   GLuint s = *d & 0xff000000;
   GLuint z = (GLuint) (*src * scale);
   assert(z <= 0xffffff);
   *d = s | z;
}

static void
pack_float_z_Z16(const GLfloat *src, void *dst)
{
   GLushort *d = ((GLushort *) dst);
   const GLfloat scale = (GLfloat) 0xffff;
   *d = (GLushort) (*src * scale);
}

static void
pack_float_z_Z32(const GLfloat *src, void *dst)
{
   GLuint *d = ((GLuint *) dst);
   const GLdouble scale = (GLdouble) 0xffffffff;
   *d = (GLuint) (*src * scale);
}

static void
pack_float_z_Z32_FLOAT(const GLfloat *src, void *dst)
{
   GLfloat *d = (GLfloat *) dst;
   *d = *src;
}

gl_pack_float_z_func
_mesa_get_pack_float_z_func(gl_format format)
{
   switch (format) {
   case MESA_FORMAT_Z24_S8:
   case MESA_FORMAT_Z24_X8:
      return pack_float_z_Z24_S8;
   case MESA_FORMAT_S8_Z24:
   case MESA_FORMAT_X8_Z24:
      return pack_float_z_S8_Z24;
   case MESA_FORMAT_Z16:
      return pack_float_z_Z16;
   case MESA_FORMAT_Z32:
      return pack_float_z_Z32;
   case MESA_FORMAT_Z32_FLOAT:
   case MESA_FORMAT_Z32_FLOAT_X24S8:
      return pack_float_z_Z32_FLOAT;
   default:
      _mesa_problem(NULL,
                    "unexpected format in _mesa_get_pack_float_z_func()");
      return NULL;
   }
}



/**
 ** Pack uint Z pixels.  The incoming src value is always in
 ** the range [0, 2^32-1].
 **/

static void
pack_uint_z_Z24_S8(const GLuint *src, void *dst)
{
   /* don't disturb the stencil values */
   GLuint *d = ((GLuint *) dst);
   GLuint s = *d & 0xff;
   GLuint z = *src & 0xffffff00;
   *d = z | s;
}

static void
pack_uint_z_S8_Z24(const GLuint *src, void *dst)
{
   /* don't disturb the stencil values */
   GLuint *d = ((GLuint *) dst);
   GLuint s = *d & 0xff000000;
   GLuint z = *src >> 8;
   *d = s | z;
}

static void
pack_uint_z_Z16(const GLuint *src, void *dst)
{
   GLushort *d = ((GLushort *) dst);
   *d = *src >> 16;
}

static void
pack_uint_z_Z32(const GLuint *src, void *dst)
{
   GLuint *d = ((GLuint *) dst);
   *d = *src;
}

static void
pack_uint_z_Z32_FLOAT(const GLuint *src, void *dst)
{
   GLuint *d = ((GLuint *) dst);
   const GLdouble scale = 1.0 / (GLdouble) 0xffffffff;
   *d = (GLuint) (*src * scale);
   assert(*d >= 0.0f);
   assert(*d <= 1.0f);
}

static void
pack_uint_z_Z32_FLOAT_X24S8(const GLuint *src, void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   const GLdouble scale = 1.0 / (GLdouble) 0xffffffff;
   *d = (GLfloat) (*src * scale);
   assert(*d >= 0.0f);
   assert(*d <= 1.0f);
}

gl_pack_uint_z_func
_mesa_get_pack_uint_z_func(gl_format format)
{
   switch (format) {
   case MESA_FORMAT_Z24_S8:
   case MESA_FORMAT_Z24_X8:
      return pack_uint_z_Z24_S8;
   case MESA_FORMAT_S8_Z24:
   case MESA_FORMAT_X8_Z24:
      return pack_uint_z_S8_Z24;
   case MESA_FORMAT_Z16:
      return pack_uint_z_Z16;
   case MESA_FORMAT_Z32:
      return pack_uint_z_Z32;
   case MESA_FORMAT_Z32_FLOAT:
      return pack_uint_z_Z32_FLOAT;
   case MESA_FORMAT_Z32_FLOAT_X24S8:
      return pack_uint_z_Z32_FLOAT_X24S8;
   default:
      _mesa_problem(NULL, "unexpected format in _mesa_get_pack_uint_z_func()");
      return NULL;
   }
}


/**
 ** Pack ubyte stencil pixels
 **/

static void
pack_ubyte_stencil_Z24_S8(const GLubyte *src, void *dst)
{
   /* don't disturb the Z values */
   GLuint *d = ((GLuint *) dst);
   GLuint s = *src;
   GLuint z = *d & 0xffffff00;
   *d = z | s;
}

static void
pack_ubyte_stencil_S8_Z24(const GLubyte *src, void *dst)
{
   /* don't disturb the Z values */
   GLuint *d = ((GLuint *) dst);
   GLuint s = *src << 24;
   GLuint z = *d & 0xffffff;
   *d = s | z;
}

static void
pack_ubyte_stencil_S8(const GLubyte *src, void *dst)
{
   GLubyte *d = (GLubyte *) dst;
   *d = *src;
}

static void
pack_ubyte_stencil_Z32_FLOAT_X24S8(const GLubyte *src, void *dst)
{
   GLfloat *d = ((GLfloat *) dst);
   d[1] = *src;
}


gl_pack_ubyte_stencil_func
_mesa_get_pack_ubyte_stencil_func(gl_format format)
{
   switch (format) {
   case MESA_FORMAT_Z24_S8:
      return pack_ubyte_stencil_Z24_S8;
   case MESA_FORMAT_S8_Z24:
      return pack_ubyte_stencil_S8_Z24;
   case MESA_FORMAT_S8:
      return pack_ubyte_stencil_S8;
   case MESA_FORMAT_Z32_FLOAT_X24S8:
      return pack_ubyte_stencil_Z32_FLOAT_X24S8;
   default:
      _mesa_problem(NULL,
                    "unexpected format in _mesa_pack_ubyte_stencil_func()");
      return NULL;
   }
}



void
_mesa_pack_float_z_row(gl_format format, GLuint n,
                       const GLfloat *src, void *dst)
{
   switch (format) {
   case MESA_FORMAT_Z24_S8:
   case MESA_FORMAT_Z24_X8:
      {
         /* don't disturb the stencil values */
         GLuint *d = ((GLuint *) dst);
         const GLdouble scale = (GLdouble) 0xffffff;
         GLuint i;
         for (i = 0; i < n; i++) {
            GLuint s = d[i] & 0xff;
            GLuint z = (GLuint) (src[i] * scale);
            assert(z <= 0xffffff);
            d[i] = (z << 8) | s;
         }
      }
      break;
   case MESA_FORMAT_S8_Z24:
   case MESA_FORMAT_X8_Z24:
      {
         /* don't disturb the stencil values */
         GLuint *d = ((GLuint *) dst);
         const GLdouble scale = (GLdouble) 0xffffff;
         GLuint i;
         for (i = 0; i < n; i++) {
            GLuint s = d[i] & 0xff000000;
            GLuint z = (GLuint) (src[i] * scale);
            assert(z <= 0xffffff);
            d[i] = s | z;
         }
      }
      break;
   case MESA_FORMAT_Z16:
      {
         GLushort *d = ((GLushort *) dst);
         const GLfloat scale = (GLfloat) 0xffff;
         GLuint i;
         for (i = 0; i < n; i++) {
            d[i] = (GLushort) (src[i] * scale);
         }
      }
      break;
   case MESA_FORMAT_Z32:
      {
         GLuint *d = ((GLuint *) dst);
         const GLdouble scale = (GLdouble) 0xffffffff;
         GLuint i;
         for (i = 0; i < n; i++) {
            d[i] = (GLuint) (src[i] * scale);
         }
      }
      break;
   case MESA_FORMAT_Z32_FLOAT:
      memcpy(dst, src, n * sizeof(GLfloat));
      break;
   case MESA_FORMAT_Z32_FLOAT_X24S8:
      {
         struct z32f_x24s8 *d = (struct z32f_x24s8 *) dst;
         GLuint i;
         for (i = 0; i < n; i++) {
            d[i].z = src[i];
         }
      }
      break;
   default:
      _mesa_problem(NULL, "unexpected format in _mesa_pack_float_z_row()");
   }
}


/**
 * The incoming Z values are always in the range [0, 0xffffffff].
 */
void
_mesa_pack_uint_z_row(gl_format format, GLuint n,
                      const GLuint *src, void *dst)
{
   switch (format) {
   case MESA_FORMAT_Z24_S8:
   case MESA_FORMAT_Z24_X8:
      {
         /* don't disturb the stencil values */
         GLuint *d = ((GLuint *) dst);
         GLuint i;
         for (i = 0; i < n; i++) {
            GLuint s = d[i] & 0xff;
            GLuint z = src[i] & 0xffffff00;
            d[i] = z | s;
         }
      }
      break;
   case MESA_FORMAT_S8_Z24:
   case MESA_FORMAT_X8_Z24:
      {
         /* don't disturb the stencil values */
         GLuint *d = ((GLuint *) dst);
         GLuint i;
         for (i = 0; i < n; i++) {
            GLuint s = d[i] & 0xff000000;
            GLuint z = src[i] >> 8;
            d[i] = s | z;
         }
      }
      break;
   case MESA_FORMAT_Z16:
      {
         GLushort *d = ((GLushort *) dst);
         GLuint i;
         for (i = 0; i < n; i++) {
            d[i] = src[i] >> 16;
         }
      }
      break;
   case MESA_FORMAT_Z32:
      memcpy(dst, src, n * sizeof(GLfloat));
      break;
   case MESA_FORMAT_Z32_FLOAT:
      {
         GLuint *d = ((GLuint *) dst);
         const GLdouble scale = 1.0 / (GLdouble) 0xffffffff;
         GLuint i;
         for (i = 0; i < n; i++) {
            d[i] = (GLuint) (src[i] * scale);
            assert(d[i] >= 0.0f);
            assert(d[i] <= 1.0f);
         }
      }
      break;
   case MESA_FORMAT_Z32_FLOAT_X24S8:
      {
         struct z32f_x24s8 *d = (struct z32f_x24s8 *) dst;
         const GLdouble scale = 1.0 / (GLdouble) 0xffffffff;
         GLuint i;
         for (i = 0; i < n; i++) {
            d[i].z = (GLfloat) (src[i] * scale);
            assert(d[i].z >= 0.0f);
            assert(d[i].z <= 1.0f);
         }
      }
      break;
   default:
      _mesa_problem(NULL, "unexpected format in _mesa_pack_uint_z_row()");
   }
}


void
_mesa_pack_ubyte_stencil_row(gl_format format, GLuint n,
                             const GLubyte *src, void *dst)
{
   switch (format) {
   case MESA_FORMAT_Z24_S8:
      {
         /* don't disturb the Z values */
         GLuint *d = ((GLuint *) dst);
         GLuint i;
         for (i = 0; i < n; i++) {
            GLuint s = src[i];
            GLuint z = d[i] & 0xffffff00;
            d[i] = z | s;
         }
      }
      break;
   case MESA_FORMAT_S8_Z24:
      {
         /* don't disturb the Z values */
         GLuint *d = ((GLuint *) dst);
         GLuint i;
         for (i = 0; i < n; i++) {
            GLuint s = src[i] << 24;
            GLuint z = d[i] & 0xffffff;
            d[i] = s | z;
         }
      }
      break;
   case MESA_FORMAT_S8:
      memcpy(dst, src, n * sizeof(GLubyte));
      break;
   case MESA_FORMAT_Z32_FLOAT_X24S8:
      {
         struct z32f_x24s8 *d = (struct z32f_x24s8 *) dst;
         GLuint i;
         for (i = 0; i < n; i++) {
            d[i].x24s8 = src[i];
         }
      }
      break;
   default:
      _mesa_problem(NULL, "unexpected format in _mesa_pack_ubyte_stencil_row()");
   }
}


/**
 * Incoming Z/stencil values are always in uint_24_8 format.
 */
void
_mesa_pack_uint_24_8_depth_stencil_row(gl_format format, GLuint n,
                                       const GLuint *src, void *dst)
{
   switch (format) {
   case MESA_FORMAT_Z24_S8:
      memcpy(dst, src, n * sizeof(GLuint));
      break;
   case MESA_FORMAT_S8_Z24:
      {
         GLuint *d = ((GLuint *) dst);
         GLuint i;
         for (i = 0; i < n; i++) {
            GLuint s = src[i] << 24;
            GLuint z = src[i] >> 8;
            d[i] = s | z;
         }
      }
      break;
   case MESA_FORMAT_Z32_FLOAT_X24S8:
      {
         const GLdouble scale = 1.0 / (GLdouble) 0xffffff;
         struct z32f_x24s8 *d = (struct z32f_x24s8 *) dst;
         GLuint i;
         for (i = 0; i < n; i++) {
            GLfloat z = (GLfloat) ((src[i] >> 8) * scale);
            d[i].z = z;
            d[i].x24s8 = src[i];
         }
      }
      break;
   default:
      _mesa_problem(NULL, "bad format %s in _mesa_pack_ubyte_s_row",
                    _mesa_get_format_name(format));
      return;
   }
}



/**
 * Convert a boolean color mask to a packed color where each channel of
 * the packed value at dst will be 0 or ~0 depending on the colorMask.
 */
void
_mesa_pack_colormask(gl_format format, const GLubyte colorMask[4], void *dst)
{
   GLfloat maskColor[4];

   switch (_mesa_get_format_datatype(format)) {
   case GL_UNSIGNED_NORMALIZED:
      /* simple: 1.0 will convert to ~0 in the right bit positions */
      maskColor[0] = colorMask[0] ? 1.0f : 0.0f;
      maskColor[1] = colorMask[1] ? 1.0f : 0.0f;
      maskColor[2] = colorMask[2] ? 1.0f : 0.0f;
      maskColor[3] = colorMask[3] ? 1.0f : 0.0f;
      _mesa_pack_float_rgba_row(format, 1,
                                (const GLfloat (*)[4]) maskColor, dst);
      break;
   case GL_SIGNED_NORMALIZED:
   case GL_FLOAT:
      /* These formats are harder because it's hard to know the floating
       * point values that will convert to ~0 for each color channel's bits.
       * This solution just generates a non-zero value for each color channel
       * then fixes up the non-zero values to be ~0.
       * Note: we'll need to add special case code if we ever have to deal
       * with formats with unequal color channel sizes, like R11_G11_B10.
       * We issue a warning below for channel sizes other than 8,16,32.
       */
      {
         GLuint bits = _mesa_get_format_max_bits(format); /* bits per chan */
         GLuint bytes = _mesa_get_format_bytes(format);
         GLuint i;

         /* this should put non-zero values into the channels of dst */
         maskColor[0] = colorMask[0] ? -1.0f : 0.0f;
         maskColor[1] = colorMask[1] ? -1.0f : 0.0f;
         maskColor[2] = colorMask[2] ? -1.0f : 0.0f;
         maskColor[3] = colorMask[3] ? -1.0f : 0.0f;
         _mesa_pack_float_rgba_row(format, 1,
                                   (const GLfloat (*)[4]) maskColor, dst);

         /* fix-up the dst channels by converting non-zero values to ~0 */
         if (bits == 8) {
            GLubyte *d = (GLubyte *) dst;
            for (i = 0; i < bytes; i++) {
               d[i] = d[i] ? 0xff : 0x0;
            }
         }
         else if (bits == 16) {
            GLushort *d = (GLushort *) dst;
            for (i = 0; i < bytes / 2; i++) {
               d[i] = d[i] ? 0xffff : 0x0;
            }
         }
         else if (bits == 32) {
            GLuint *d = (GLuint *) dst;
            for (i = 0; i < bytes / 4; i++) {
               d[i] = d[i] ? 0xffffffffU : 0x0;
            }
         }
         else {
            _mesa_problem(NULL, "unexpected size in _mesa_pack_colormask()");
            return;
         }
      }
      break;
   default:
      _mesa_problem(NULL, "unexpected format data type in gen_color_mask()");
      return;
   }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d46 1
a46 1
/** Helper struct for MESA_FORMAT_Z32_FLOAT_S8X24_UINT */
d95 1
a95 1
 * MESA_FORMAT_A8B8G8R8_UNORM
d99 1
a99 1
pack_ubyte_A8B8G8R8_UNORM(const GLubyte src[4], void *dst)
d106 1
a106 1
pack_float_A8B8G8R8_UNORM(const GLfloat src[4], void *dst)
d110 1
a110 1
   pack_ubyte_A8B8G8R8_UNORM(v, dst);
d114 1
a114 1
pack_row_ubyte_A8B8G8R8_UNORM(GLuint n, const GLubyte src[][4], void *dst)
d125 1
a125 1
pack_row_float_A8B8G8R8_UNORM(GLuint n, const GLfloat src[][4], void *dst)
d132 1
a132 1
      pack_ubyte_A8B8G8R8_UNORM(v, d + i);
d139 1
a139 1
 * MESA_FORMAT_R8G8B8A8_UNORM
d143 1
a143 1
pack_ubyte_R8G8B8A8_UNORM(const GLubyte src[4], void *dst)
d150 1
a150 1
pack_float_R8G8B8A8_UNORM(const GLfloat src[4], void *dst)
d154 1
a154 1
   pack_ubyte_R8G8B8A8_UNORM(v, dst);
d158 1
a158 1
pack_row_ubyte_R8G8B8A8_UNORM(GLuint n, const GLubyte src[][4], void *dst)
d169 1
a169 1
pack_row_float_R8G8B8A8_UNORM(GLuint n, const GLfloat src[][4], void *dst)
d176 1
a176 1
      pack_ubyte_R8G8B8A8_UNORM(v, d + i);
d182 1
a182 1
 * MESA_FORMAT_B8G8R8A8_UNORM
d186 1
a186 1
pack_ubyte_B8G8R8A8_UNORM(const GLubyte src[4], void *dst)
d193 1
a193 1
pack_float_B8G8R8A8_UNORM(const GLfloat src[4], void *dst)
d197 1
a197 1
   pack_ubyte_B8G8R8A8_UNORM(v, dst);
d201 1
a201 1
pack_row_ubyte_B8G8R8A8_UNORM(GLuint n, const GLubyte src[][4], void *dst)
d212 1
a212 1
pack_row_float_B8G8R8A8_UNORM(GLuint n, const GLfloat src[][4], void *dst)
d219 1
a219 1
      pack_ubyte_B8G8R8A8_UNORM(v, d + i);
d225 1
a225 1
 * MESA_FORMAT_A8R8G8B8_UNORM
d229 1
a229 1
pack_ubyte_A8R8G8B8_UNORM(const GLubyte src[4], void *dst)
d236 1
a236 1
pack_float_A8R8G8B8_UNORM(const GLfloat src[4], void *dst)
d240 1
a240 1
   pack_ubyte_A8R8G8B8_UNORM(v, dst);
d244 1
a244 1
pack_row_ubyte_A8R8G8B8_UNORM(GLuint n, const GLubyte src[][4], void *dst)
d255 1
a255 1
pack_row_float_A8R8G8B8_UNORM(GLuint n, const GLfloat src[][4], void *dst)
d262 1
a262 1
      pack_ubyte_A8R8G8B8_UNORM(v, d + i);
d268 1
a268 1
 * MESA_FORMAT_B8G8R8X8_UNORM
d272 1
a272 1
pack_ubyte_B8G8R8X8_UNORM(const GLubyte src[4], void *dst)
d279 1
a279 1
pack_float_B8G8R8X8_UNORM(const GLfloat src[4], void *dst)
d283 1
a283 1
   pack_ubyte_B8G8R8X8_UNORM(v, dst);
d287 1
a287 1
pack_row_ubyte_B8G8R8X8_UNORM(GLuint n, const GLubyte src[][4], void *dst)
d297 1
a297 1
pack_row_float_B8G8R8X8_UNORM(GLuint n, const GLfloat src[][4], void *dst)
d304 1
a304 1
      pack_ubyte_B8G8R8X8_UNORM(v, d + i);
d310 1
a310 1
 * MESA_FORMAT_X8R8G8B8_UNORM
d314 1
a314 1
pack_ubyte_X8R8G8B8_UNORM(const GLubyte src[4], void *dst)
d321 1
a321 1
pack_float_X8R8G8B8_UNORM(const GLfloat src[4], void *dst)
d325 1
a325 1
   pack_ubyte_X8R8G8B8_UNORM(v, dst);
d329 1
a329 1
pack_row_ubyte_X8R8G8B8_UNORM(GLuint n, const GLubyte src[][4], void *dst)
d339 1
a339 1
pack_row_float_X8R8G8B8_UNORM(GLuint n, const GLfloat src[][4], void *dst)
d346 1
a346 1
      pack_ubyte_X8R8G8B8_UNORM(v, d + i);
d352 1
a352 1
 * MESA_FORMAT_BGR_UNORM8
d356 1
a356 1
pack_ubyte_BGR_UNORM8(const GLubyte src[4], void *dst)
d365 1
a365 1
pack_float_BGR_UNORM8(const GLfloat src[4], void *dst)
d374 1
a374 1
pack_row_ubyte_BGR_UNORM8(GLuint n, const GLubyte src[][4], void *dst)
d386 1
a386 1
pack_row_float_BGR_UNORM8(GLuint n, const GLfloat src[][4], void *dst)
d401 1
a401 1
 * MESA_FORMAT_RGB_UNORM8
d405 1
a405 1
pack_ubyte_RGB_UNORM8(const GLubyte src[4], void *dst)
d414 1
a414 1
pack_float_RGB_UNORM8(const GLfloat src[4], void *dst)
d423 1
a423 1
pack_row_ubyte_RGB_UNORM8(GLuint n, const GLubyte src[][4], void *dst)
d435 1
a435 1
pack_row_float_RGB_UNORM8(GLuint n, const GLfloat src[][4], void *dst)
d450 1
a450 1
 * MESA_FORMAT_B5G6R5_UNORM
d454 1
a454 1
pack_ubyte_B5G6R5_UNORM(const GLubyte src[4], void *dst)
d461 1
a461 1
pack_float_B5G6R5_UNORM(const GLfloat src[4], void *dst)
d467 1
a467 1
   pack_ubyte_B5G6R5_UNORM(v, dst);
d471 1
a471 1
pack_row_ubyte_B5G6R5_UNORM(GLuint n, const GLubyte src[][4], void *dst)
d476 1
a476 1
      pack_ubyte_B5G6R5_UNORM(src[i], d + i);
d481 1
a481 1
pack_row_float_B5G6R5_UNORM(GLuint n, const GLfloat src[][4], void *dst)
d488 1
a488 1
      pack_ubyte_B5G6R5_UNORM(v, d + i);
d494 1
a494 3
 * MESA_FORMAT_R5G6B5_UNORM
 * Warning: these functions do not match the current Mesa definition
 * of MESA_FORMAT_R5G6B5_UNORM.
d498 1
a498 1
pack_ubyte_R5G6B5_UNORM(const GLubyte src[4], void *dst)
d505 1
a505 1
pack_float_R5G6B5_UNORM(const GLfloat src[4], void *dst)
d516 1
a516 1
pack_row_ubyte_R5G6B5_UNORM(GLuint n, const GLubyte src[][4], void *dst)
d521 1
a521 1
      pack_ubyte_R5G6B5_UNORM(src[i], d + i);
d526 1
a526 1
pack_row_float_R5G6B5_UNORM(GLuint n, const GLfloat src[][4], void *dst)
d533 1
a533 1
      pack_ubyte_R5G6B5_UNORM(v, d + i);
d539 1
a539 1
 * MESA_FORMAT_B4G4R4A4_UNORM
d543 1
a543 1
pack_ubyte_B4G4R4A4_UNORM(const GLubyte src[4], void *dst)
d550 1
a550 1
pack_float_B4G4R4A4_UNORM(const GLfloat src[4], void *dst)
d554 1
a554 1
   pack_ubyte_B4G4R4A4_UNORM(v, dst);
d561 1
a561 1
 * MESA_FORMAT_A4R4G4B4_UNORM
d565 1
a565 1
pack_ubyte_A4R4G4B4_UNORM(const GLubyte src[4], void *dst)
d568 1
a568 1
   *d = PACK_COLOR_4444(src[BCOMP], src[GCOMP], src[RCOMP], src[ACOMP]);
d572 1
a572 1
pack_float_A4R4G4B4_UNORM(const GLfloat src[4], void *dst)
d576 1
a576 1
   pack_ubyte_A4R4G4B4_UNORM(v, dst);
d583 1
a583 1
 * MESA_FORMAT_A1B5G5R5_UNORM
d587 1
a587 1
pack_ubyte_A1B5G5R5_UNORM(const GLubyte src[4], void *dst)
d594 1
a594 1
pack_float_A1B5G5R5_UNORM(const GLfloat src[4], void *dst)
d598 1
a598 1
   pack_ubyte_A1B5G5R5_UNORM(v, dst);
d605 1
a605 1
 * MESA_FORMAT_B5G5R5A1_UNORM
d609 1
a609 1
pack_ubyte_B5G5R5A1_UNORM(const GLubyte src[4], void *dst)
d616 1
a616 1
pack_float_B5G5R5A1_UNORM(const GLfloat src[4], void *dst)
d620 1
a620 1
   pack_ubyte_B5G5R5A1_UNORM(v, dst);
d624 1
a624 4
/* MESA_FORMAT_A1R5G5B5_UNORM
 * Warning: these functions do not match the current Mesa definition
 * of MESA_FORMAT_A1R5G5B5_UNORM.
 */
d627 1
a627 1
pack_ubyte_A1R5G5B5_UNORM(const GLubyte src[4], void *dst)
d635 1
a635 1
pack_float_A1R5G5B5_UNORM(const GLfloat src[4], void *dst)
d639 1
a639 1
   pack_ubyte_A1R5G5B5_UNORM(v, dst);
d643 1
a643 1
/* MESA_FORMAT_L4A4_UNORM */
d646 1
a646 1
pack_ubyte_L4A4_UNORM(const GLubyte src[4], void *dst)
d653 1
a653 1
pack_float_L4A4_UNORM(const GLfloat src[4], void *dst)
d658 1
a658 1
   pack_ubyte_L4A4_UNORM(v, dst);
d662 1
a662 1
/* MESA_FORMAT_L8A8_UNORM */
d665 1
a665 1
pack_ubyte_L8A8_UNORM(const GLubyte src[4], void *dst)
d672 1
a672 1
pack_float_L8A8_UNORM(const GLfloat src[4], void *dst)
d677 1
a677 1
   pack_ubyte_L8A8_UNORM(v, dst);
d681 1
a681 1
/* MESA_FORMAT_A8L8_UNORM */
d684 1
a684 1
pack_ubyte_A8L8_UNORM(const GLubyte src[4], void *dst)
d691 1
a691 1
pack_float_A8L8_UNORM(const GLfloat src[4], void *dst)
d696 1
a696 1
   pack_ubyte_A8L8_UNORM(v, dst);
d700 1
a700 1
/* MESA_FORMAT_L16A16_UNORM */
d703 1
a703 1
pack_ubyte_L16A16_UNORM(const GLubyte src[4], void *dst)
d712 1
a712 1
pack_float_L16A16_UNORM(const GLfloat src[4], void *dst)
d722 1
a722 1
/* MESA_FORMAT_A16L16_UNORM */
d725 1
a725 1
pack_ubyte_A16L16_UNORM(const GLubyte src[4], void *dst)
d734 1
a734 1
pack_float_A16L16_UNORM(const GLfloat src[4], void *dst)
d744 1
a744 1
/* MESA_FORMAT_B2G3R3_UNORM */
d747 1
a747 1
pack_ubyte_B2G3R3_UNORM(const GLubyte src[4], void *dst)
d754 1
a754 1
pack_float_B2G3R3_UNORM(const GLfloat src[4], void *dst)
d760 1
a760 1
   pack_ubyte_B2G3R3_UNORM(v, dst);
d764 1
a764 1
/* MESA_FORMAT_A_UNORM8 */
d767 1
a767 1
pack_ubyte_A_UNORM8(const GLubyte src[4], void *dst)
d774 1
a774 1
pack_float_A_UNORM8(const GLfloat src[4], void *dst)
d781 1
a781 1
/* MESA_FORMAT_A_UNORM16 */
d784 1
a784 1
pack_ubyte_A_UNORM16(const GLubyte src[4], void *dst)
d791 1
a791 1
pack_float_A_UNORM16(const GLfloat src[4], void *dst)
d798 1
a798 1
/* MESA_FORMAT_L_UNORM8 */
d801 1
a801 1
pack_ubyte_L_UNORM8(const GLubyte src[4], void *dst)
d808 1
a808 1
pack_float_L_UNORM8(const GLfloat src[4], void *dst)
d815 1
a815 1
/* MESA_FORMAT_L_UNORM16 */
d818 1
a818 1
pack_ubyte_L_UNORM16(const GLubyte src[4], void *dst)
d825 1
a825 1
pack_float_L_UNORM16(const GLfloat src[4], void *dst)
d862 1
a862 1
/* MESA_FORMAT_R_UNORM8 */
d865 1
a865 1
pack_ubyte_R_UNORM8(const GLubyte src[4], void *dst)
d872 1
a872 1
pack_float_R_UNORM8(const GLfloat src[4], void *dst)
d881 1
a881 1
/* MESA_FORMAT_R8G8_UNORM */
d884 1
a884 1
pack_ubyte_R8G8_UNORM(const GLubyte src[4], void *dst)
d891 1
a891 1
pack_float_R8G8_UNORM(const GLfloat src[4], void *dst)
d901 1
a901 1
/* MESA_FORMAT_G8R8_UNORM */
d904 1
a904 1
pack_ubyte_G8R8_UNORM(const GLubyte src[4], void *dst)
d911 1
a911 1
pack_float_G8R8_UNORM(const GLfloat src[4], void *dst)
d921 1
a921 1
/* MESA_FORMAT_R_UNORM16 */
d924 1
a924 1
pack_ubyte_R_UNORM16(const GLubyte src[4], void *dst)
d931 1
a931 1
pack_float_R_UNORM16(const GLfloat src[4], void *dst)
d938 1
a938 1
/* MESA_FORMAT_R16G16_UNORM */
d941 1
a941 1
pack_ubyte_R16G16_UNORM(const GLubyte src[4], void *dst)
d950 1
a950 1
pack_float_R16G16_UNORM(const GLfloat src[4], void *dst)
d960 1
a960 1
/* MESA_FORMAT_G16R16_UNORM */
d963 1
a963 1
pack_ubyte_G16R16_UNORM(const GLubyte src[4], void *dst)
d973 1
a973 1
pack_float_G16R16_UNORM(const GLfloat src[4], void *dst)
d983 1
a983 1
/* MESA_FORMAT_B10G10R10A2_UNORM */
d986 1
a986 1
pack_ubyte_B10G10R10A2_UNORM(const GLubyte src[4], void *dst)
d997 1
a997 1
pack_float_B10G10R10A2_UNORM(const GLfloat src[4], void *dst)
d1009 1
a1009 1
/* MESA_FORMAT_R10G10B10A2_UINT */
d1012 1
a1012 1
pack_ubyte_R10G10B10A2_UINT(const GLubyte src[4], void *dst)
d1023 1
a1023 1
pack_float_R10G10B10A2_UINT(const GLfloat src[4], void *dst)
d1035 1
a1035 1
/* MESA_FORMAT_BGR_SRGB8 */
d1038 1
a1038 1
pack_ubyte_BGR_SRGB8(const GLubyte src[4], void *dst)
d1042 2
a1043 2
   d[1] = linear_ubyte_to_srgb_ubyte(src[GCOMP]);
   d[0] = linear_ubyte_to_srgb_ubyte(src[BCOMP]);
d1047 1
a1047 1
pack_float_BGR_SRGB8(const GLfloat src[4], void *dst)
d1056 1
a1056 1
/* MESA_FORMAT_A8B8G8R8_SRGB */
d1059 1
a1059 1
pack_ubyte_A8B8G8R8_SRGB(const GLubyte src[4], void *dst)
d1069 1
a1069 1
pack_float_A8B8G8R8_SRGB(const GLfloat src[4], void *dst)
d1081 1
a1081 1
/* MESA_FORMAT_B8G8R8A8_SRGB */
d1084 1
a1084 1
pack_ubyte_B8G8R8A8_SRGB(const GLubyte src[4], void *dst)
d1088 2
a1089 2
   GLubyte g = linear_ubyte_to_srgb_ubyte(src[GCOMP]);
   GLubyte b = linear_ubyte_to_srgb_ubyte(src[BCOMP]);
d1094 1
a1094 1
pack_float_B8G8R8A8_SRGB(const GLfloat src[4], void *dst)
d1106 1
a1106 11
/* MESA_FORMAT_R8G8B8A8_SRGB */

static void
pack_ubyte_R8G8B8A8_SRGB(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLubyte r = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
   GLubyte g = linear_ubyte_to_srgb_ubyte(src[GCOMP]);
   GLubyte b = linear_ubyte_to_srgb_ubyte(src[BCOMP]);
   *d = PACK_COLOR_8888(src[ACOMP], b, g, r);
}
d1109 1
a1109 16
pack_float_R8G8B8A8_SRGB(const GLfloat src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLubyte r, g, b, a;
   r = linear_float_to_srgb_ubyte(src[RCOMP]);
   g = linear_float_to_srgb_ubyte(src[GCOMP]);
   b = linear_float_to_srgb_ubyte(src[BCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(a, src[ACOMP]);
   *d = PACK_COLOR_8888(a, b, g, r);
}


/* MESA_FORMAT_L_SRGB8 */

static void
pack_ubyte_L_SRGB8(const GLubyte src[4], void *dst)
d1116 1
a1116 1
pack_float_L_SRGB8(const GLfloat src[4], void *dst)
d1124 1
a1124 1
/* MESA_FORMAT_L8A8_SRGB */
d1127 1
a1127 1
pack_ubyte_L8A8_SRGB(const GLubyte src[4], void *dst)
d1135 1
a1135 1
pack_float_L8A8_SRGB(const GLfloat src[4], void *dst)
d1232 1
a1232 1
/* MESA_FORMAT_A_FLOAT32 */
d1235 1
a1235 1
pack_ubyte_A_FLOAT32(const GLubyte src[4], void *dst)
d1242 1
a1242 1
pack_float_A_FLOAT32(const GLfloat src[4], void *dst)
d1249 1
a1249 1
/* MESA_FORMAT_A_FLOAT16 */
d1252 1
a1252 1
pack_ubyte_A_FLOAT16(const GLubyte src[4], void *dst)
d1259 1
a1259 1
pack_float_A_FLOAT16(const GLfloat src[4], void *dst)
d1266 1
a1266 1
/* MESA_FORMAT_L_FLOAT32 (and I_FLOAT32, R_FLOAT32) */
d1269 1
a1269 1
pack_ubyte_L_FLOAT32(const GLubyte src[4], void *dst)
d1276 1
a1276 1
pack_float_L_FLOAT32(const GLfloat src[4], void *dst)
d1283 1
a1283 1
/* MESA_FORMAT_L_FLOAT16 (and I_FLOAT16, R_FLOAT32) */
d1286 1
a1286 1
pack_ubyte_L_FLOAT16(const GLubyte src[4], void *dst)
d1293 1
a1293 1
pack_float_L_FLOAT16(const GLfloat src[4], void *dst)
d1300 1
a1300 1
/* MESA_FORMAT_LA_FLOAT32 */
d1303 1
a1303 1
pack_ubyte_LA_FLOAT32(const GLubyte src[4], void *dst)
d1311 1
a1311 1
pack_float_LA_FLOAT32(const GLfloat src[4], void *dst)
d1319 1
a1319 1
/* MESA_FORMAT_LA_FLOAT16 */
d1322 1
a1322 1
pack_ubyte_LA_FLOAT16(const GLubyte src[4], void *dst)
d1330 1
a1330 1
pack_float_LA_FLOAT16(const GLfloat src[4], void *dst)
d1397 1
a1397 1
/* MESA_FORMAT_RGBA_UNORM16 */
d1422 1
a1422 1
 * MESA_FORMAT_R_SNORM8
d1426 1
a1426 1
pack_float_R_SNORM8(const GLfloat src[4], void *dst)
d1434 1
a1434 1
 * MESA_FORMAT_R8G8_SNORM
d1438 1
a1438 1
pack_float_R8G8_SNORM(const GLfloat src[4], void *dst)
d1448 1
a1448 1
 * MESA_FORMAT_X8B8G8R8_SNORM
d1452 1
a1452 1
pack_float_X8B8G8R8_SNORM(const GLfloat src[4], void *dst)
d1464 1
a1464 1
 * MESA_FORMAT_A8B8G8R8_SNORM
d1468 1
a1468 1
pack_float_A8B8G8R8_SNORM(const GLfloat src[4], void *dst)
d1480 1
a1480 1
 * MESA_FORMAT_R8G8B8A8_SNORM
d1484 1
a1484 1
pack_float_R8G8B8A8_SNORM(const GLfloat src[4], void *dst)
d1496 1
a1496 1
 * MESA_FORMAT_R_SNORM16
d1500 1
a1500 1
pack_float_R_SNORM16(const GLfloat src[4], void *dst)
d1508 1
a1508 1
 * MESA_FORMAT_R16G16_SNORM
d1512 1
a1512 1
pack_float_R16G16_SNORM(const GLfloat src[4], void *dst)
d1522 1
a1522 1
 * MESA_FORMAT_RGB_SNORM16
d1526 1
a1526 1
pack_float_RGB_SNORM16(const GLfloat src[4], void *dst)
d1536 1
a1536 1
 * MESA_FORMAT_RGBA_SNORM16
d1540 1
a1540 1
pack_float_RGBA_SNORM16(const GLfloat src[4], void *dst)
d1551 1
a1551 1
 * MESA_FORMAT_A_SNORM8
d1555 1
a1555 1
pack_float_A_SNORM8(const GLfloat src[4], void *dst)
d1563 1
a1563 1
 * MESA_FORMAT_L_SNORM8
d1567 1
a1567 1
pack_float_L_SNORM8(const GLfloat src[4], void *dst)
d1575 1
a1575 1
 * MESA_FORMAT_L8A8_SNORM
d1579 1
a1579 1
pack_float_L8A8_SNORM(const GLfloat src[4], void *dst)
d1589 1
a1589 1
 * MESA_FORMAT_A_SNORM16
d1593 1
a1593 1
pack_float_A_SNORM16(const GLfloat src[4], void *dst)
d1601 1
a1601 1
 * MESA_FORMAT_L_SNORM16
d1605 1
a1605 1
pack_float_L_SNORM16(const GLfloat src[4], void *dst)
d1613 1
a1613 1
 * MESA_FORMAT_LA_SNORM16
d1617 1
a1617 1
pack_float_LA_SNORM16(const GLfloat src[4], void *dst)
d1627 1
a1627 1
 * MESA_FORMAT_R9G9B9E5_FLOAT;
d1631 1
a1631 1
pack_float_R9G9B9E5_FLOAT(const GLfloat src[4], void *dst)
d1638 1
a1638 1
pack_ubyte_R9G9B9E5_FLOAT(const GLubyte src[4], void *dst)
d1651 1
a1651 1
 * MESA_FORMAT_R11G11B10_FLOAT;
d1655 1
a1655 1
pack_ubyte_R11G11B10_FLOAT(const GLubyte src[4], void *dst)
d1666 1
a1666 1
pack_float_R11G11B10_FLOAT(const GLfloat src[4], void *dst)
d1674 1
a1674 1
 * MESA_FORMAT_B4G4R4X4_UNORM
d1694 1
a1694 1
 * MESA_FORMAT_B5G5R5X1_UNORM
d1714 1
a1714 1
 * MESA_FORMAT_R8G8B8X8_SNORM
d1729 1
a1729 1
 * MESA_FORMAT_R8G8B8X8_SRGB
d1733 1
a1733 1
pack_float_R8G8B8X8_SRGB(const GLfloat src[4], void *dst)
d1743 1
a1743 1
/* MESA_FORMAT_B10G10R10X2_UNORM */
d1746 1
a1746 1
pack_ubyte_B10G10R10X2_UNORM(const GLubyte src[4], void *dst)
d1756 1
a1756 1
pack_float_B10G10R10X2_UNORM(const GLfloat src[4], void *dst)
d1767 1
a1767 1
/* MESA_FORMAT_RGBX_UNORM16 */
d1770 1
a1770 1
pack_ubyte_RGBX_UNORM16(const GLubyte src[4], void *dst)
d1780 1
a1780 1
pack_float_RGBX_UNORM16(const GLfloat src[4], void *dst)
d1790 1
a1790 1
/* MESA_FORMAT_RGBX_SNORM16 */
d1793 1
a1793 1
pack_float_RGBX_SNORM16(const GLfloat src[4], void *dst)
d1803 1
a1803 1
/* MESA_FORMAT_RGBX_FLOAT16 */
d1815 1
a1815 1
/* MESA_FORMAT_RGBX_FLOAT32 */
d1818 1
a1818 1
pack_float_RGBX_FLOAT32(const GLfloat src[4], void *dst)
a1826 64
/* MESA_FORMAT_R10G10B10A2_UNORM */

static void
pack_ubyte_R10G10B10A2_UNORM(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort r = UBYTE_TO_USHORT(src[RCOMP]);
   GLushort g = UBYTE_TO_USHORT(src[GCOMP]);
   GLushort b = UBYTE_TO_USHORT(src[BCOMP]);
   GLushort a = UBYTE_TO_USHORT(src[ACOMP]);
   *d = PACK_COLOR_2101010_US(a, b, g, r);
}

static void
pack_float_R10G10B10A2_UNORM(const GLfloat src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLushort r, g, b, a;
   UNCLAMPED_FLOAT_TO_USHORT(r, src[RCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(g, src[GCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(b, src[BCOMP]);
   UNCLAMPED_FLOAT_TO_USHORT(a, src[ACOMP]);
   *d = PACK_COLOR_2101010_US(a, b, g, r);
}

/*
 * MESA_FORMAT_G8R8_SNORM
 */

static void
pack_float_G8R8_SNORM(const GLfloat src[4], void *dst)
{
   GLushort *d = (GLushort *) dst;
   GLbyte r = FLOAT_TO_BYTE(CLAMP(src[RCOMP], -1.0f, 1.0f));
   GLbyte g = FLOAT_TO_BYTE(CLAMP(src[GCOMP], -1.0f, 1.0f));
   *d = (r << 8) | (g & 0xff);
}

/*
 * MESA_FORMAT_G16R16_SNORM
 */

static void
pack_float_G16R16_SNORM(const GLfloat src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   GLshort r = FLOAT_TO_SHORT(CLAMP(src[RCOMP], -1.0f, 1.0f));
   GLshort g = FLOAT_TO_SHORT(CLAMP(src[GCOMP], -1.0f, 1.0f));
   *d = (r << 16) | (g & 0xffff);
}

/*
 * MESA_FORMAT_B8G8R8X8_SRGB
 */

static void
pack_float_B8G8R8X8_SRGB(const GLfloat src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   GLubyte r = linear_float_to_srgb_ubyte(src[RCOMP]);
   GLubyte g = linear_float_to_srgb_ubyte(src[GCOMP]);
   GLubyte b = linear_float_to_srgb_ubyte(src[BCOMP]);
   *d = PACK_COLOR_8888(127, r, g, b);
}
d1832 1
a1832 1
_mesa_get_pack_ubyte_rgba_function(mesa_format format)
d1842 29
a1870 29
      table[MESA_FORMAT_A8B8G8R8_UNORM] = pack_ubyte_A8B8G8R8_UNORM;
      table[MESA_FORMAT_R8G8B8A8_UNORM] = pack_ubyte_R8G8B8A8_UNORM;
      table[MESA_FORMAT_B8G8R8A8_UNORM] = pack_ubyte_B8G8R8A8_UNORM;
      table[MESA_FORMAT_A8R8G8B8_UNORM] = pack_ubyte_A8R8G8B8_UNORM;
      table[MESA_FORMAT_X8B8G8R8_UNORM] = pack_ubyte_A8B8G8R8_UNORM; /* reused */
      table[MESA_FORMAT_R8G8B8X8_UNORM] = pack_ubyte_R8G8B8A8_UNORM; /* reused */
      table[MESA_FORMAT_B8G8R8X8_UNORM] = pack_ubyte_B8G8R8X8_UNORM;
      table[MESA_FORMAT_X8R8G8B8_UNORM] = pack_ubyte_X8R8G8B8_UNORM;
      table[MESA_FORMAT_BGR_UNORM8] = pack_ubyte_BGR_UNORM8;
      table[MESA_FORMAT_RGB_UNORM8] = pack_ubyte_RGB_UNORM8;
      table[MESA_FORMAT_B5G6R5_UNORM] = pack_ubyte_B5G6R5_UNORM;
      table[MESA_FORMAT_R5G6B5_UNORM] = pack_ubyte_R5G6B5_UNORM;
      table[MESA_FORMAT_B4G4R4A4_UNORM] = pack_ubyte_B4G4R4A4_UNORM;
      table[MESA_FORMAT_A4R4G4B4_UNORM] = pack_ubyte_A4R4G4B4_UNORM;
      table[MESA_FORMAT_A1B5G5R5_UNORM] = pack_ubyte_A1B5G5R5_UNORM;
      table[MESA_FORMAT_B5G5R5A1_UNORM] = pack_ubyte_B5G5R5A1_UNORM;
      table[MESA_FORMAT_A1R5G5B5_UNORM] = pack_ubyte_A1R5G5B5_UNORM;
      table[MESA_FORMAT_L4A4_UNORM] = pack_ubyte_L4A4_UNORM;
      table[MESA_FORMAT_L8A8_UNORM] = pack_ubyte_L8A8_UNORM;
      table[MESA_FORMAT_A8L8_UNORM] = pack_ubyte_A8L8_UNORM;
      table[MESA_FORMAT_L16A16_UNORM] = pack_ubyte_L16A16_UNORM;
      table[MESA_FORMAT_A16L16_UNORM] = pack_ubyte_A16L16_UNORM;
      table[MESA_FORMAT_B2G3R3_UNORM] = pack_ubyte_B2G3R3_UNORM;
      table[MESA_FORMAT_A_UNORM8] = pack_ubyte_A_UNORM8;
      table[MESA_FORMAT_A_UNORM16] = pack_ubyte_A_UNORM16;
      table[MESA_FORMAT_L_UNORM8] = pack_ubyte_L_UNORM8;
      table[MESA_FORMAT_L_UNORM16] = pack_ubyte_L_UNORM16;
      table[MESA_FORMAT_I_UNORM8] = pack_ubyte_L_UNORM8; /* reuse pack_ubyte_L_UNORM8 */
      table[MESA_FORMAT_I_UNORM16] = pack_ubyte_L_UNORM16; /* reuse pack_ubyte_L_UNORM16 */
d1873 8
a1880 8
      table[MESA_FORMAT_R_UNORM8] = pack_ubyte_R_UNORM8;
      table[MESA_FORMAT_R8G8_UNORM] = pack_ubyte_R8G8_UNORM;
      table[MESA_FORMAT_G8R8_UNORM] = pack_ubyte_G8R8_UNORM;
      table[MESA_FORMAT_R_UNORM16] = pack_ubyte_R_UNORM16;
      table[MESA_FORMAT_R16G16_UNORM] = pack_ubyte_R16G16_UNORM;
      table[MESA_FORMAT_G16R16_UNORM] = pack_ubyte_G16R16_UNORM;
      table[MESA_FORMAT_B10G10R10A2_UNORM] = pack_ubyte_B10G10R10A2_UNORM;
      table[MESA_FORMAT_R10G10B10A2_UINT] = pack_ubyte_R10G10B10A2_UINT;
d1883 7
a1889 7
      table[MESA_FORMAT_S8_UINT_Z24_UNORM] = NULL;
      table[MESA_FORMAT_Z24_UNORM_S8_UINT] = NULL;
      table[MESA_FORMAT_Z_UNORM16] = NULL;
      table[MESA_FORMAT_Z24_UNORM_X8_UINT] = NULL;
      table[MESA_FORMAT_X8_UINT_Z24_UNORM] = NULL;
      table[MESA_FORMAT_Z_UNORM32] = NULL;
      table[MESA_FORMAT_S_UINT8] = NULL;
d1892 6
a1897 6
      table[MESA_FORMAT_BGR_SRGB8] = pack_ubyte_BGR_SRGB8;
      table[MESA_FORMAT_A8B8G8R8_SRGB] = pack_ubyte_A8B8G8R8_SRGB;
      table[MESA_FORMAT_B8G8R8A8_SRGB] = pack_ubyte_B8G8R8A8_SRGB;
      table[MESA_FORMAT_R8G8B8A8_SRGB] = pack_ubyte_R8G8B8A8_SRGB;
      table[MESA_FORMAT_L_SRGB8] = pack_ubyte_L_SRGB8;
      table[MESA_FORMAT_L8A8_SRGB] = pack_ubyte_L8A8_SRGB;
d1915 10
a1924 10
      table[MESA_FORMAT_A_FLOAT32] = pack_ubyte_A_FLOAT32;
      table[MESA_FORMAT_A_FLOAT16] = pack_ubyte_A_FLOAT16;
      table[MESA_FORMAT_L_FLOAT32] = pack_ubyte_L_FLOAT32;
      table[MESA_FORMAT_L_FLOAT16] = pack_ubyte_L_FLOAT16;
      table[MESA_FORMAT_LA_FLOAT32] = pack_ubyte_LA_FLOAT32;
      table[MESA_FORMAT_LA_FLOAT16] = pack_ubyte_LA_FLOAT16;
      table[MESA_FORMAT_I_FLOAT32] = pack_ubyte_L_FLOAT32;
      table[MESA_FORMAT_I_FLOAT16] = pack_ubyte_L_FLOAT16;
      table[MESA_FORMAT_R_FLOAT32] = pack_ubyte_L_FLOAT32;
      table[MESA_FORMAT_R_FLOAT16] = pack_ubyte_L_FLOAT16;
d1929 3
a1931 3
      table[MESA_FORMAT_RGBA_SINT8] = NULL; /* pack_ubyte_RGBA_INT8 */
      table[MESA_FORMAT_RGBA_SINT16] = NULL; /* pack_ubyte_RGBA_INT16 */
      table[MESA_FORMAT_RGBA_SINT32] = NULL; /* pack_ubyte_RGBA_INT32 */
d1938 1
a1938 1
      table[MESA_FORMAT_RGBA_UNORM16] = pack_ubyte_RGBA_16;
d1941 39
a1979 43
      table[MESA_FORMAT_R_SNORM8] = NULL;
      table[MESA_FORMAT_R8G8_SNORM] = NULL;
      table[MESA_FORMAT_X8B8G8R8_SNORM] = NULL;
      table[MESA_FORMAT_A8B8G8R8_SNORM] = NULL;
      table[MESA_FORMAT_R8G8B8A8_SNORM] = NULL;
      table[MESA_FORMAT_R_SNORM16] = NULL;
      table[MESA_FORMAT_R16G16_SNORM] = NULL;
      table[MESA_FORMAT_RGB_SNORM16] = NULL;
      table[MESA_FORMAT_RGBA_SNORM16] = NULL;
      table[MESA_FORMAT_A_SNORM8] = NULL;
      table[MESA_FORMAT_L_SNORM8] = NULL;
      table[MESA_FORMAT_L8A8_SNORM] = NULL;
      table[MESA_FORMAT_I_SNORM8] = NULL;
      table[MESA_FORMAT_A_SNORM16] = NULL;
      table[MESA_FORMAT_L_SNORM16] = NULL;
      table[MESA_FORMAT_LA_SNORM16] = NULL;
      table[MESA_FORMAT_I_SNORM16] = NULL;


      table[MESA_FORMAT_RGBA_UNORM16] = pack_ubyte_RGBA_16;

      table[MESA_FORMAT_R9G9B9E5_FLOAT] = pack_ubyte_R9G9B9E5_FLOAT;
      table[MESA_FORMAT_R11G11B10_FLOAT] = pack_ubyte_R11G11B10_FLOAT;

      table[MESA_FORMAT_B4G4R4X4_UNORM] = pack_ubyte_XRGB4444_UNORM;
      table[MESA_FORMAT_B5G5R5X1_UNORM] = pack_ubyte_XRGB1555_UNORM;
      table[MESA_FORMAT_R8G8B8X8_SNORM] = NULL;
      table[MESA_FORMAT_R8G8B8X8_SRGB] = NULL;
      table[MESA_FORMAT_RGBX_UINT8] = NULL;
      table[MESA_FORMAT_RGBX_SINT8] = NULL;
      table[MESA_FORMAT_B10G10R10X2_UNORM] = pack_ubyte_B10G10R10X2_UNORM;
      table[MESA_FORMAT_RGBX_UNORM16] = pack_ubyte_RGBX_UNORM16;
      table[MESA_FORMAT_RGBX_SNORM16] = NULL;
      table[MESA_FORMAT_RGBX_FLOAT16] = NULL;
      table[MESA_FORMAT_RGBX_UINT16] = NULL;
      table[MESA_FORMAT_RGBX_SINT16] = NULL;
      table[MESA_FORMAT_RGBX_FLOAT32] = NULL;
      table[MESA_FORMAT_RGBX_UINT32] = NULL;
      table[MESA_FORMAT_RGBX_SINT32] = NULL;

      table[MESA_FORMAT_R10G10B10A2_UNORM] = pack_ubyte_R10G10B10A2_UNORM;

      table[MESA_FORMAT_B8G8R8X8_SRGB] = NULL;
d1993 1
a1993 1
_mesa_get_pack_float_rgba_function(mesa_format format)
d2003 30
a2032 30
      table[MESA_FORMAT_A8B8G8R8_UNORM] = pack_float_A8B8G8R8_UNORM;
      table[MESA_FORMAT_R8G8B8A8_UNORM] = pack_float_R8G8B8A8_UNORM;
      table[MESA_FORMAT_B8G8R8A8_UNORM] = pack_float_B8G8R8A8_UNORM;
      table[MESA_FORMAT_A8R8G8B8_UNORM] = pack_float_A8R8G8B8_UNORM;
      table[MESA_FORMAT_X8B8G8R8_UNORM] = pack_float_A8B8G8R8_UNORM; /* reused */
      table[MESA_FORMAT_R8G8B8X8_UNORM] = pack_float_R8G8B8A8_UNORM; /* reused */
      table[MESA_FORMAT_B8G8R8X8_UNORM] = pack_float_B8G8R8X8_UNORM;
      table[MESA_FORMAT_X8R8G8B8_UNORM] = pack_float_X8R8G8B8_UNORM;
      table[MESA_FORMAT_BGR_UNORM8] = pack_float_BGR_UNORM8;
      table[MESA_FORMAT_RGB_UNORM8] = pack_float_RGB_UNORM8;
      table[MESA_FORMAT_B5G6R5_UNORM] = pack_float_B5G6R5_UNORM;
      table[MESA_FORMAT_R5G6B5_UNORM] = pack_float_R5G6B5_UNORM;
      table[MESA_FORMAT_B4G4R4A4_UNORM] = pack_float_B4G4R4A4_UNORM;
      table[MESA_FORMAT_A4R4G4B4_UNORM] = pack_float_A4R4G4B4_UNORM;
      table[MESA_FORMAT_A1B5G5R5_UNORM] = pack_float_A1B5G5R5_UNORM;
      table[MESA_FORMAT_B5G5R5A1_UNORM] = pack_float_B5G5R5A1_UNORM;
      table[MESA_FORMAT_A1R5G5B5_UNORM] = pack_float_A1R5G5B5_UNORM;

      table[MESA_FORMAT_L4A4_UNORM] = pack_float_L4A4_UNORM;
      table[MESA_FORMAT_L8A8_UNORM] = pack_float_L8A8_UNORM;
      table[MESA_FORMAT_A8L8_UNORM] = pack_float_A8L8_UNORM;
      table[MESA_FORMAT_L16A16_UNORM] = pack_float_L16A16_UNORM;
      table[MESA_FORMAT_A16L16_UNORM] = pack_float_A16L16_UNORM;
      table[MESA_FORMAT_B2G3R3_UNORM] = pack_float_B2G3R3_UNORM;
      table[MESA_FORMAT_A_UNORM8] = pack_float_A_UNORM8;
      table[MESA_FORMAT_A_UNORM16] = pack_float_A_UNORM16;
      table[MESA_FORMAT_L_UNORM8] = pack_float_L_UNORM8;
      table[MESA_FORMAT_L_UNORM16] = pack_float_L_UNORM16;
      table[MESA_FORMAT_I_UNORM8] = pack_float_L_UNORM8; /* reuse pack_float_L_UNORM8 */
      table[MESA_FORMAT_I_UNORM16] = pack_float_L_UNORM16; /* reuse pack_float_L_UNORM16 */
d2035 8
a2042 8
      table[MESA_FORMAT_R_UNORM8] = pack_float_R_UNORM8;
      table[MESA_FORMAT_R8G8_UNORM] = pack_float_R8G8_UNORM;
      table[MESA_FORMAT_G8R8_UNORM] = pack_float_G8R8_UNORM;
      table[MESA_FORMAT_R_UNORM16] = pack_float_R_UNORM16;
      table[MESA_FORMAT_R16G16_UNORM] = pack_float_R16G16_UNORM;
      table[MESA_FORMAT_G16R16_UNORM] = pack_float_G16R16_UNORM;
      table[MESA_FORMAT_B10G10R10A2_UNORM] = pack_float_B10G10R10A2_UNORM;
      table[MESA_FORMAT_R10G10B10A2_UINT] = pack_float_R10G10B10A2_UINT;
d2045 13
a2057 14
      table[MESA_FORMAT_S8_UINT_Z24_UNORM] = NULL;
      table[MESA_FORMAT_Z24_UNORM_S8_UINT] = NULL;
      table[MESA_FORMAT_Z_UNORM16] = NULL;
      table[MESA_FORMAT_Z24_UNORM_X8_UINT] = NULL;
      table[MESA_FORMAT_X8_UINT_Z24_UNORM] = NULL;
      table[MESA_FORMAT_Z_UNORM32] = NULL;
      table[MESA_FORMAT_S_UINT8] = NULL;

      table[MESA_FORMAT_BGR_SRGB8] = pack_float_BGR_SRGB8;
      table[MESA_FORMAT_A8B8G8R8_SRGB] = pack_float_A8B8G8R8_SRGB;
      table[MESA_FORMAT_B8G8R8A8_SRGB] = pack_float_B8G8R8A8_SRGB;
      table[MESA_FORMAT_R8G8B8A8_SRGB] = pack_float_R8G8B8A8_SRGB;
      table[MESA_FORMAT_L_SRGB8] = pack_float_L_SRGB8;
      table[MESA_FORMAT_L8A8_SRGB] = pack_float_L8A8_SRGB;
d2076 11
a2086 11
      table[MESA_FORMAT_A_FLOAT32] = pack_float_A_FLOAT32;
      table[MESA_FORMAT_A_FLOAT16] = pack_float_A_FLOAT16;
      table[MESA_FORMAT_L_FLOAT32] = pack_float_L_FLOAT32;
      table[MESA_FORMAT_L_FLOAT16] = pack_float_L_FLOAT16;
      table[MESA_FORMAT_LA_FLOAT32] = pack_float_LA_FLOAT32;
      table[MESA_FORMAT_LA_FLOAT16] = pack_float_LA_FLOAT16;

      table[MESA_FORMAT_I_FLOAT32] = pack_float_L_FLOAT32;
      table[MESA_FORMAT_I_FLOAT16] = pack_float_L_FLOAT16;
      table[MESA_FORMAT_R_FLOAT32] = pack_float_L_FLOAT32;
      table[MESA_FORMAT_R_FLOAT16] = pack_float_L_FLOAT16;
d2091 3
a2093 3
      table[MESA_FORMAT_RGBA_SINT8] = NULL;
      table[MESA_FORMAT_RGBA_SINT16] = NULL;
      table[MESA_FORMAT_RGBA_SINT32] = NULL;
d2100 1
a2100 43
      table[MESA_FORMAT_RGBA_UNORM16] = pack_float_RGBA_16;

      table[MESA_FORMAT_R_SNORM8] = pack_float_R_SNORM8;
      table[MESA_FORMAT_R8G8_SNORM] = pack_float_R8G8_SNORM;
      table[MESA_FORMAT_X8B8G8R8_SNORM] = pack_float_X8B8G8R8_SNORM;
      table[MESA_FORMAT_A8B8G8R8_SNORM] = pack_float_A8B8G8R8_SNORM;
      table[MESA_FORMAT_R8G8B8A8_SNORM] = pack_float_R8G8B8A8_SNORM;
      table[MESA_FORMAT_R_SNORM16] = pack_float_R_SNORM16;
      table[MESA_FORMAT_R16G16_SNORM] = pack_float_R16G16_SNORM;
      table[MESA_FORMAT_RGB_SNORM16] = pack_float_RGB_SNORM16;
      table[MESA_FORMAT_RGBA_SNORM16] = pack_float_RGBA_SNORM16;
      table[MESA_FORMAT_A_SNORM8] = pack_float_A_SNORM8;
      table[MESA_FORMAT_L_SNORM8] = pack_float_L_SNORM8;
      table[MESA_FORMAT_L8A8_SNORM] = pack_float_L8A8_SNORM;
      table[MESA_FORMAT_I_SNORM8] = pack_float_L_SNORM8; /* reused */
      table[MESA_FORMAT_A_SNORM16] = pack_float_A_SNORM16;
      table[MESA_FORMAT_L_SNORM16] = pack_float_L_SNORM16;
      table[MESA_FORMAT_LA_SNORM16] = pack_float_LA_SNORM16;
      table[MESA_FORMAT_I_SNORM16] = pack_float_L_SNORM16; /* reused */

      table[MESA_FORMAT_R9G9B9E5_FLOAT] = pack_float_R9G9B9E5_FLOAT;
      table[MESA_FORMAT_R11G11B10_FLOAT] = pack_float_R11G11B10_FLOAT;

      table[MESA_FORMAT_B4G4R4X4_UNORM] = pack_float_XRGB4444_UNORM;
      table[MESA_FORMAT_B5G5R5X1_UNORM] = pack_float_XRGB1555_UNORM;
      table[MESA_FORMAT_R8G8B8X8_SNORM] = pack_float_XBGR8888_SNORM;
      table[MESA_FORMAT_R8G8B8X8_SRGB] = pack_float_R8G8B8X8_SRGB;
      table[MESA_FORMAT_RGBX_UINT8] = NULL;
      table[MESA_FORMAT_RGBX_SINT8] = NULL;
      table[MESA_FORMAT_B10G10R10X2_UNORM] = pack_float_B10G10R10X2_UNORM;
      table[MESA_FORMAT_RGBX_UNORM16] = pack_float_RGBX_UNORM16;
      table[MESA_FORMAT_RGBX_SNORM16] = pack_float_RGBX_SNORM16;
      table[MESA_FORMAT_RGBX_FLOAT16] = pack_float_XBGR16161616_FLOAT;
      table[MESA_FORMAT_RGBX_UINT16] = NULL;
      table[MESA_FORMAT_RGBX_SINT16] = NULL;
      table[MESA_FORMAT_RGBX_FLOAT32] = pack_float_RGBX_FLOAT32;
      table[MESA_FORMAT_RGBX_UINT32] = NULL;
      table[MESA_FORMAT_RGBX_SINT32] = NULL;

      table[MESA_FORMAT_R10G10B10A2_UNORM] = pack_float_R10G10B10A2_UNORM;

      table[MESA_FORMAT_G8R8_SNORM] = pack_float_G8R8_SNORM;
      table[MESA_FORMAT_G16R16_SNORM] = pack_float_G16R16_SNORM;
d2102 36
a2137 1
      table[MESA_FORMAT_B8G8R8X8_SRGB] = pack_float_B8G8R8X8_SRGB;
d2148 1
a2148 1
get_pack_float_rgba_row_function(mesa_format format)
d2159 12
a2170 12
      table[MESA_FORMAT_A8B8G8R8_UNORM] = pack_row_float_A8B8G8R8_UNORM;
      table[MESA_FORMAT_R8G8B8A8_UNORM] = pack_row_float_R8G8B8A8_UNORM;
      table[MESA_FORMAT_B8G8R8A8_UNORM] = pack_row_float_B8G8R8A8_UNORM;
      table[MESA_FORMAT_A8R8G8B8_UNORM] = pack_row_float_A8R8G8B8_UNORM;
      table[MESA_FORMAT_X8B8G8R8_UNORM] = pack_row_float_A8B8G8R8_UNORM; /* reused */
      table[MESA_FORMAT_R8G8B8X8_UNORM] = pack_row_float_R8G8B8A8_UNORM; /* reused */
      table[MESA_FORMAT_B8G8R8X8_UNORM] = pack_row_float_B8G8R8X8_UNORM;
      table[MESA_FORMAT_X8R8G8B8_UNORM] = pack_row_float_X8R8G8B8_UNORM;
      table[MESA_FORMAT_BGR_UNORM8] = pack_row_float_BGR_UNORM8;
      table[MESA_FORMAT_RGB_UNORM8] = pack_row_float_RGB_UNORM8;
      table[MESA_FORMAT_B5G6R5_UNORM] = pack_row_float_B5G6R5_UNORM;
      table[MESA_FORMAT_R5G6B5_UNORM] = pack_row_float_R5G6B5_UNORM;
d2181 1
a2181 1
get_pack_ubyte_rgba_row_function(mesa_format format)
d2192 12
a2203 12
      table[MESA_FORMAT_A8B8G8R8_UNORM] = pack_row_ubyte_A8B8G8R8_UNORM;
      table[MESA_FORMAT_R8G8B8A8_UNORM] = pack_row_ubyte_R8G8B8A8_UNORM;
      table[MESA_FORMAT_B8G8R8A8_UNORM] = pack_row_ubyte_B8G8R8A8_UNORM;
      table[MESA_FORMAT_A8R8G8B8_UNORM] = pack_row_ubyte_A8R8G8B8_UNORM;
      table[MESA_FORMAT_X8B8G8R8_UNORM] = pack_row_ubyte_A8B8G8R8_UNORM; /* reused */
      table[MESA_FORMAT_R8G8B8X8_UNORM] = pack_row_ubyte_R8G8B8A8_UNORM; /* reused */
      table[MESA_FORMAT_B8G8R8X8_UNORM] = pack_row_ubyte_B8G8R8X8_UNORM;
      table[MESA_FORMAT_X8R8G8B8_UNORM] = pack_row_ubyte_X8R8G8B8_UNORM;
      table[MESA_FORMAT_BGR_UNORM8] = pack_row_ubyte_BGR_UNORM8;
      table[MESA_FORMAT_RGB_UNORM8] = pack_row_ubyte_RGB_UNORM8;
      table[MESA_FORMAT_B5G6R5_UNORM] = pack_row_ubyte_B5G6R5_UNORM;
      table[MESA_FORMAT_R5G6B5_UNORM] = pack_row_ubyte_R5G6B5_UNORM;
d2217 1
a2217 1
_mesa_pack_float_rgba_row(mesa_format format, GLuint n,
d2248 1
a2248 1
_mesa_pack_ubyte_rgba_row(mesa_format format, GLuint n,
d2281 1
a2281 1
_mesa_pack_ubyte_rgba_rect(mesa_format format, GLuint width, GLuint height,
d2322 1
a2322 1
pack_float_S8_UINT_Z24_UNORM(const GLfloat *src, void *dst)
d2334 1
a2334 1
pack_float_Z24_UNORM_S8_UINT(const GLfloat *src, void *dst)
d2346 1
a2346 1
pack_float_Z_UNORM16(const GLfloat *src, void *dst)
d2354 1
a2354 1
pack_float_Z_UNORM32(const GLfloat *src, void *dst)
d2362 1
a2362 1
pack_float_Z_FLOAT32(const GLfloat *src, void *dst)
d2369 1
a2369 1
_mesa_get_pack_float_z_func(mesa_format format)
d2372 13
a2384 13
   case MESA_FORMAT_S8_UINT_Z24_UNORM:
   case MESA_FORMAT_X8_UINT_Z24_UNORM:
      return pack_float_S8_UINT_Z24_UNORM;
   case MESA_FORMAT_Z24_UNORM_S8_UINT:
   case MESA_FORMAT_Z24_UNORM_X8_UINT:
      return pack_float_Z24_UNORM_S8_UINT;
   case MESA_FORMAT_Z_UNORM16:
      return pack_float_Z_UNORM16;
   case MESA_FORMAT_Z_UNORM32:
      return pack_float_Z_UNORM32;
   case MESA_FORMAT_Z_FLOAT32:
   case MESA_FORMAT_Z32_FLOAT_S8X24_UINT:
      return pack_float_Z_FLOAT32;
d2400 1
a2400 1
pack_uint_S8_UINT_Z24_UNORM(const GLuint *src, void *dst)
d2410 1
a2410 1
pack_uint_Z24_UNORM_S8_UINT(const GLuint *src, void *dst)
d2420 1
a2420 1
pack_uint_Z_UNORM16(const GLuint *src, void *dst)
d2427 1
a2427 1
pack_uint_Z_UNORM32(const GLuint *src, void *dst)
d2434 1
a2434 1
pack_uint_Z_FLOAT32(const GLuint *src, void *dst)
d2444 1
a2444 1
pack_uint_Z_FLOAT32_X24S8(const GLuint *src, void *dst)
d2454 1
a2454 1
_mesa_get_pack_uint_z_func(mesa_format format)
d2457 14
a2470 14
   case MESA_FORMAT_S8_UINT_Z24_UNORM:
   case MESA_FORMAT_X8_UINT_Z24_UNORM:
      return pack_uint_S8_UINT_Z24_UNORM;
   case MESA_FORMAT_Z24_UNORM_S8_UINT:
   case MESA_FORMAT_Z24_UNORM_X8_UINT:
      return pack_uint_Z24_UNORM_S8_UINT;
   case MESA_FORMAT_Z_UNORM16:
      return pack_uint_Z_UNORM16;
   case MESA_FORMAT_Z_UNORM32:
      return pack_uint_Z_UNORM32;
   case MESA_FORMAT_Z_FLOAT32:
      return pack_uint_Z_FLOAT32;
   case MESA_FORMAT_Z32_FLOAT_S8X24_UINT:
      return pack_uint_Z_FLOAT32_X24S8;
d2518 1
a2518 1
_mesa_get_pack_ubyte_stencil_func(mesa_format format)
d2521 1
a2521 1
   case MESA_FORMAT_S8_UINT_Z24_UNORM:
d2523 1
a2523 1
   case MESA_FORMAT_Z24_UNORM_S8_UINT:
d2525 1
a2525 1
   case MESA_FORMAT_S_UINT8:
d2527 1
a2527 1
   case MESA_FORMAT_Z32_FLOAT_S8X24_UINT:
d2539 1
a2539 1
_mesa_pack_float_z_row(mesa_format format, GLuint n,
d2543 2
a2544 2
   case MESA_FORMAT_S8_UINT_Z24_UNORM:
   case MESA_FORMAT_X8_UINT_Z24_UNORM:
d2558 2
a2559 2
   case MESA_FORMAT_Z24_UNORM_S8_UINT:
   case MESA_FORMAT_Z24_UNORM_X8_UINT:
d2573 1
a2573 1
   case MESA_FORMAT_Z_UNORM16:
d2583 1
a2583 1
   case MESA_FORMAT_Z_UNORM32:
d2593 1
a2593 1
   case MESA_FORMAT_Z_FLOAT32:
d2596 1
a2596 1
   case MESA_FORMAT_Z32_FLOAT_S8X24_UINT:
d2615 1
a2615 1
_mesa_pack_uint_z_row(mesa_format format, GLuint n,
d2619 2
a2620 2
   case MESA_FORMAT_S8_UINT_Z24_UNORM:
   case MESA_FORMAT_X8_UINT_Z24_UNORM:
d2632 2
a2633 2
   case MESA_FORMAT_Z24_UNORM_S8_UINT:
   case MESA_FORMAT_Z24_UNORM_X8_UINT:
d2645 1
a2645 1
   case MESA_FORMAT_Z_UNORM16:
d2654 1
a2654 1
   case MESA_FORMAT_Z_UNORM32:
d2657 1
a2657 1
   case MESA_FORMAT_Z_FLOAT32:
d2669 1
a2669 1
   case MESA_FORMAT_Z32_FLOAT_S8X24_UINT:
d2688 1
a2688 1
_mesa_pack_ubyte_stencil_row(mesa_format format, GLuint n,
d2692 1
a2692 1
   case MESA_FORMAT_S8_UINT_Z24_UNORM:
d2704 1
a2704 1
   case MESA_FORMAT_Z24_UNORM_S8_UINT:
d2716 1
a2716 1
   case MESA_FORMAT_S_UINT8:
d2719 1
a2719 1
   case MESA_FORMAT_Z32_FLOAT_S8X24_UINT:
d2738 1
a2738 1
_mesa_pack_uint_24_8_depth_stencil_row(mesa_format format, GLuint n,
d2742 1
a2742 1
   case MESA_FORMAT_S8_UINT_Z24_UNORM:
d2745 1
a2745 1
   case MESA_FORMAT_Z24_UNORM_S8_UINT:
d2756 1
a2756 1
   case MESA_FORMAT_Z32_FLOAT_S8X24_UINT:
d2782 1
a2782 1
_mesa_pack_colormask(mesa_format format, const GLubyte colorMask[4], void *dst)
@


1.1.1.3
log
@Import Mesa 10.2.7
@
text
@d891 1
a891 1
   GLushort *d = ((GLushort *) dst);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a43 1
#include "util/format_srgb.h"
d61 33
d1046 3
a1048 3
   d[2] = util_format_linear_to_srgb_8unorm(src[RCOMP]);
   d[1] = util_format_linear_to_srgb_8unorm(src[GCOMP]);
   d[0] = util_format_linear_to_srgb_8unorm(src[BCOMP]);
d1055 3
a1057 3
   d[2] = util_format_linear_float_to_srgb_8unorm(src[RCOMP]);
   d[1] = util_format_linear_float_to_srgb_8unorm(src[GCOMP]);
   d[0] = util_format_linear_float_to_srgb_8unorm(src[BCOMP]);
d1067 3
a1069 3
   GLubyte r = util_format_linear_to_srgb_8unorm(src[RCOMP]);
   GLubyte g = util_format_linear_to_srgb_8unorm(src[GCOMP]);
   GLubyte b = util_format_linear_to_srgb_8unorm(src[BCOMP]);
d1078 3
a1080 3
   r = util_format_linear_float_to_srgb_8unorm(src[RCOMP]);
   g = util_format_linear_float_to_srgb_8unorm(src[GCOMP]);
   b = util_format_linear_float_to_srgb_8unorm(src[BCOMP]);
d1092 3
a1094 3
   GLubyte r = util_format_linear_to_srgb_8unorm(src[RCOMP]);
   GLubyte g = util_format_linear_to_srgb_8unorm(src[GCOMP]);
   GLubyte b = util_format_linear_to_srgb_8unorm(src[BCOMP]);
d1103 3
a1105 3
   r = util_format_linear_float_to_srgb_8unorm(src[RCOMP]);
   g = util_format_linear_float_to_srgb_8unorm(src[GCOMP]);
   b = util_format_linear_float_to_srgb_8unorm(src[BCOMP]);
a1110 25
/* MESA_FORMAT_A8R8G8B8_SRGB */

static void
pack_ubyte_A8R8G8B8_SRGB(const GLubyte src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLubyte r = util_format_linear_to_srgb_8unorm(src[RCOMP]);
   GLubyte g = util_format_linear_to_srgb_8unorm(src[GCOMP]);
   GLubyte b = util_format_linear_to_srgb_8unorm(src[BCOMP]);
   *d = PACK_COLOR_8888(b, g, r, src[ACOMP]);
}

static void
pack_float_A8R8G8B8_SRGB(const GLfloat src[4], void *dst)
{
   GLuint *d = ((GLuint *) dst);
   GLubyte r, g, b, a;
   r = util_format_linear_float_to_srgb_8unorm(src[RCOMP]);
   g = util_format_linear_float_to_srgb_8unorm(src[GCOMP]);
   b = util_format_linear_float_to_srgb_8unorm(src[BCOMP]);
   UNCLAMPED_FLOAT_TO_UBYTE(a, src[ACOMP]);
   *d = PACK_COLOR_8888(b, g, r, a);
}


d1117 3
a1119 3
   GLubyte r = util_format_linear_to_srgb_8unorm(src[RCOMP]);
   GLubyte g = util_format_linear_to_srgb_8unorm(src[GCOMP]);
   GLubyte b = util_format_linear_to_srgb_8unorm(src[BCOMP]);
d1128 3
a1130 3
   r = util_format_linear_float_to_srgb_8unorm(src[RCOMP]);
   g = util_format_linear_float_to_srgb_8unorm(src[GCOMP]);
   b = util_format_linear_float_to_srgb_8unorm(src[BCOMP]);
d1142 1
a1142 1
   *d = util_format_linear_to_srgb_8unorm(src[RCOMP]);
d1149 1
a1149 1
   GLubyte l = util_format_linear_float_to_srgb_8unorm(src[RCOMP]);
d1160 1
a1160 1
   GLubyte l = util_format_linear_to_srgb_8unorm(src[RCOMP]);
a1163 10
/* MESA_FORMAT_A8L8_SRGB */

static void
pack_ubyte_A8L8_SRGB(const GLubyte src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   GLubyte l = util_format_linear_to_srgb_8unorm(src[RCOMP]);
   *d = PACK_COLOR_88(l, src[ACOMP]);
}

d1168 1
a1168 1
   GLubyte a, l = util_format_linear_float_to_srgb_8unorm(src[RCOMP]);
a1172 9
static void
pack_float_A8L8_SRGB(const GLfloat src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   GLubyte a, l = util_format_linear_float_to_srgb_8unorm(src[RCOMP]);
   CLAMPED_FLOAT_TO_UBYTE(a, src[ACOMP]);
   *d = PACK_COLOR_88(l, a);
}

d1406 21
a1618 14
 * MESA_FORMAT_A8L8_SNORM
 */

static void
pack_float_A8L8_SNORM(const GLfloat src[4], void *dst)
{
   GLushort *d = (GLushort *) dst;
   GLbyte l = FLOAT_TO_BYTE(CLAMP(src[RCOMP], -1.0f, 1.0f));
   GLbyte a = FLOAT_TO_BYTE(CLAMP(src[ACOMP], -1.0f, 1.0f));
   *d = (l << 8) | a;
}


/*
d1766 4
a1769 19
   GLubyte r = util_format_linear_float_to_srgb_8unorm(src[RCOMP]);
   GLubyte g = util_format_linear_float_to_srgb_8unorm(src[GCOMP]);
   GLubyte b = util_format_linear_float_to_srgb_8unorm(src[BCOMP]);
   *d = PACK_COLOR_8888(255, b, g, r);
}


/*
 * MESA_FORMAT_X8B8G8R8_SRGB
 */

static void
pack_float_X8B8G8R8_SRGB(const GLfloat src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   GLubyte r = util_format_linear_float_to_srgb_8unorm(src[RCOMP]);
   GLubyte g = util_format_linear_float_to_srgb_8unorm(src[GCOMP]);
   GLubyte b = util_format_linear_float_to_srgb_8unorm(src[BCOMP]);
   *d = PACK_COLOR_8888(r, g, b, 255);
d1916 3
a1918 3
   GLubyte r = util_format_linear_float_to_srgb_8unorm(src[RCOMP]);
   GLubyte g = util_format_linear_float_to_srgb_8unorm(src[GCOMP]);
   GLubyte b = util_format_linear_float_to_srgb_8unorm(src[BCOMP]);
a1921 14
/*
 * MESA_FORMAT_X8R8G8B8_SRGB
 */

static void
pack_float_X8R8G8B8_SRGB(const GLfloat src[4], void *dst)
{
   GLuint *d = (GLuint *) dst;
   GLubyte r = util_format_linear_float_to_srgb_8unorm(src[RCOMP]);
   GLubyte g = util_format_linear_float_to_srgb_8unorm(src[GCOMP]);
   GLubyte b = util_format_linear_float_to_srgb_8unorm(src[BCOMP]);
   *d = PACK_COLOR_8888(b, g, r, 255);
}

a1988 1
      table[MESA_FORMAT_A8R8G8B8_SRGB] = pack_ubyte_A8R8G8B8_SRGB;
a1991 1
      table[MESA_FORMAT_A8L8_SRGB] = pack_ubyte_A8L8_SRGB;
d2030 2
a2046 1
      table[MESA_FORMAT_A8L8_SNORM] = NULL;
a2062 1
      table[MESA_FORMAT_X8B8G8R8_SRGB] = NULL;
a2077 1
      table[MESA_FORMAT_X8R8G8B8_SRGB] = NULL;
a2153 1
      table[MESA_FORMAT_A8R8G8B8_SRGB] = pack_float_A8R8G8B8_SRGB;
a2156 1
      table[MESA_FORMAT_A8L8_SRGB] = pack_float_A8L8_SRGB;
d2197 2
a2212 1
      table[MESA_FORMAT_A8L8_SNORM] = pack_float_A8L8_SNORM;
a2225 1
      table[MESA_FORMAT_X8B8G8R8_SRGB] = pack_float_X8B8G8R8_SRGB;
a2243 1
      table[MESA_FORMAT_X8R8G8B8_SRGB] = pack_float_X8R8G8B8_SRGB;
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d44 1
a61 33

static inline GLfloat
linear_to_srgb(GLfloat cl)
{
   if (cl < 0.0f)
      return 0.0f;
   else if (cl < 0.0031308f)
      return 12.92f * cl;
   else if (cl < 1.0f)
      return 1.055f * powf(cl, 0.41666f) - 0.055f;
   else
      return 1.0f;
}


static inline GLubyte
linear_float_to_srgb_ubyte(GLfloat cl)
{
   GLubyte res = FLOAT_TO_UBYTE(linear_to_srgb(cl));
   return res;
}


static inline GLubyte
linear_ubyte_to_srgb_ubyte(GLubyte cl)
{
   GLubyte res = FLOAT_TO_UBYTE(linear_to_srgb(cl / 255.0f));
   return res;
}




d1014 3
a1016 3
   d[2] = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
   d[1] = linear_ubyte_to_srgb_ubyte(src[GCOMP]);
   d[0] = linear_ubyte_to_srgb_ubyte(src[BCOMP]);
d1023 3
a1025 3
   d[2] = linear_float_to_srgb_ubyte(src[RCOMP]);
   d[1] = linear_float_to_srgb_ubyte(src[GCOMP]);
   d[0] = linear_float_to_srgb_ubyte(src[BCOMP]);
d1035 3
a1037 3
   GLubyte r = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
   GLubyte g = linear_ubyte_to_srgb_ubyte(src[GCOMP]);
   GLubyte b = linear_ubyte_to_srgb_ubyte(src[BCOMP]);
d1046 3
a1048 3
   r = linear_float_to_srgb_ubyte(src[RCOMP]);
   g = linear_float_to_srgb_ubyte(src[GCOMP]);
   b = linear_float_to_srgb_ubyte(src[BCOMP]);
d1060 3
a1062 3
   GLubyte r = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
   GLubyte g = linear_ubyte_to_srgb_ubyte(src[GCOMP]);
   GLubyte b = linear_ubyte_to_srgb_ubyte(src[BCOMP]);
d1071 3
a1073 3
   r = linear_float_to_srgb_ubyte(src[RCOMP]);
   g = linear_float_to_srgb_ubyte(src[GCOMP]);
   b = linear_float_to_srgb_ubyte(src[BCOMP]);
d1079 25
d1110 3
a1112 3
   GLubyte r = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
   GLubyte g = linear_ubyte_to_srgb_ubyte(src[GCOMP]);
   GLubyte b = linear_ubyte_to_srgb_ubyte(src[BCOMP]);
d1121 3
a1123 3
   r = linear_float_to_srgb_ubyte(src[RCOMP]);
   g = linear_float_to_srgb_ubyte(src[GCOMP]);
   b = linear_float_to_srgb_ubyte(src[BCOMP]);
d1135 1
a1135 1
   *d = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
d1142 1
a1142 1
   GLubyte l = linear_float_to_srgb_ubyte(src[RCOMP]);
d1153 1
a1153 1
   GLubyte l = linear_ubyte_to_srgb_ubyte(src[RCOMP]);
d1157 10
d1171 1
a1171 1
   GLubyte a, l = linear_float_to_srgb_ubyte(src[RCOMP]);
d1176 9
a1417 21
/* MESA_FORMAT_DUDV8 */

static void
pack_ubyte_DUDV8(const GLubyte src[4], void *dst)
{
   /* XXX is this ever used? */
   GLushort *d = ((GLushort *) dst);
   *d = PACK_COLOR_88(src[0], src[1]);
}

static void
pack_float_DUDV8(const GLfloat src[4], void *dst)
{
   GLushort *d = ((GLushort *) dst);
   GLbyte du, dv;
   du = FLOAT_TO_BYTE(CLAMP(src[0], 0.0F, 1.0F));
   dv = FLOAT_TO_BYTE(CLAMP(src[1], 0.0F, 1.0F));
   *d = PACK_COLOR_88(du, dv);
}


d1610 14
d1771 19
a1789 4
   GLubyte r = linear_float_to_srgb_ubyte(src[RCOMP]);
   GLubyte g = linear_float_to_srgb_ubyte(src[GCOMP]);
   GLubyte b = linear_float_to_srgb_ubyte(src[BCOMP]);
   *d = PACK_COLOR_8888(127, b, g, r);
d1936 3
a1938 3
   GLubyte r = linear_float_to_srgb_ubyte(src[RCOMP]);
   GLubyte g = linear_float_to_srgb_ubyte(src[GCOMP]);
   GLubyte b = linear_float_to_srgb_ubyte(src[BCOMP]);
d1942 14
d2023 1
d2027 1
a2065 2
      table[MESA_FORMAT_DUDV8] = pack_ubyte_DUDV8;

d2081 1
d2098 1
d2114 1
d2191 1
d2195 1
a2235 2
      table[MESA_FORMAT_DUDV8] = pack_float_DUDV8;

d2250 1
d2264 1
d2283 1
@


