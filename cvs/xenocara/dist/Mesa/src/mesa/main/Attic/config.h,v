head	1.11;
access;
symbols
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	v10_2_9:1.1.1.8
	v10_4_3:1.1.1.7
	v10_2_7:1.1.1.6
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.6
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.5
	v9_2_3:1.1.1.5
	v9_2_2:1.1.1.5
	v9_2_1:1.1.1.5
	v9_2_0:1.1.1.5
	OPENBSD_5_4:1.6.0.8
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.6
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.12.23.05.17.52;	author jsg;	state dead;
branches;
next	1.10;
commitid	TnlogFl9nOv2eaRf;

1.10
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.9;
commitid	4ry2gvZGMXkCUD2n;

1.9
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.8;
commitid	mcxB0JvoI9gTDYXU;

1.8
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.06.17;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.30;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.41;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.20;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.49.47;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.49.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.32;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.30.51;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.45;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.09.05.13.16.26;	author jsg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.07.09.20.34.59;	author jsg;	state Exp;
branches;
next	1.1.1.7;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.7
date	2015.01.25.14.12.29;	author jsg;	state Exp;
branches;
next	1.1.1.8;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.8
date	2015.02.20.22.49.36;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.11
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
 * Copyright (C) 2008  VMware, Inc.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * \file config.h
 * Tunable configuration parameters.
 */

#ifndef MESA_CONFIG_H_INCLUDED
#define MESA_CONFIG_H_INCLUDED


/**
 * \name OpenGL implementation limits
 */
/*@@{*/

/** Maximum modelview matrix stack depth */
#define MAX_MODELVIEW_STACK_DEPTH 32

/** Maximum projection matrix stack depth */
#define MAX_PROJECTION_STACK_DEPTH 32

/** Maximum texture matrix stack depth */
#define MAX_TEXTURE_STACK_DEPTH 10

/** Maximum attribute stack depth */
#define MAX_ATTRIB_STACK_DEPTH 16

/** Maximum client attribute stack depth */
#define MAX_CLIENT_ATTRIB_STACK_DEPTH 16

/** Maximum recursion depth of display list calls */
#define MAX_LIST_NESTING 64

/** Maximum number of lights */
#define MAX_LIGHTS 8

/**
 * Maximum number of user-defined clipping planes supported by any driver in
 * Mesa.  This is used to size arrays.
 */
#define MAX_CLIP_PLANES 8

/** Maximum pixel map lookup table size */
#define MAX_PIXEL_MAP_TABLE 256

/** Maximum number of auxillary color buffers */
#define MAX_AUX_BUFFERS 1

/** Maximum order (degree) of curves */
#define MAX_EVAL_ORDER 30

/** Maximum Name stack depth */
#define MAX_NAME_STACK_DEPTH 64

/** Minimum point size */
#define MIN_POINT_SIZE 1.0
/** Maximum point size */
#define MAX_POINT_SIZE 60.0
/** Point size granularity */
#define POINT_SIZE_GRANULARITY 0.1

/** Minimum line width */
#define MIN_LINE_WIDTH 1.0
/** Maximum line width */
#define MAX_LINE_WIDTH 10.0
/** Line width granularity */
#define LINE_WIDTH_GRANULARITY 0.1

/** Max memory to allow for a single texture image (in megabytes) */
#define MAX_TEXTURE_MBYTES 1024

/** Number of 1D/2D texture mipmap levels */
#define MAX_TEXTURE_LEVELS 15

/** Number of 3D texture mipmap levels */
#define MAX_3D_TEXTURE_LEVELS 15

/** Number of cube texture mipmap levels - GL_ARB_texture_cube_map */
#define MAX_CUBE_TEXTURE_LEVELS 15

/** Maximum rectangular texture size - GL_NV_texture_rectangle */
#define MAX_TEXTURE_RECT_SIZE 16384

/**
 * Maximum number of layers in a 1D or 2D array texture - GL_MESA_texture_array
 */
#define MAX_ARRAY_TEXTURE_LAYERS 64

/**
 * Max number of texture coordinate units.  This mainly just applies to
 * the fixed-function vertex code.  This will be difficult to raise above
 * eight because of various vertex attribute bitvectors.
 */
#define MAX_TEXTURE_COORD_UNITS 8

/**
 * Max number of texture image units.  Also determines number of texture
 * samplers in shaders.
 */
#define MAX_TEXTURE_IMAGE_UNITS 32

/**
 * Larger of MAX_TEXTURE_COORD_UNITS and MAX_TEXTURE_IMAGE_UNITS.
 * This value is only used for dimensioning arrays.
 * Either MAX_TEXTURE_COORD_UNITS or MAX_TEXTURE_IMAGE_UNITS (or the
 * corresponding ctx->Const.MaxTextureCoord/ImageUnits fields) should be
 * used almost everywhere else.
 */
#define MAX_TEXTURE_UNITS ((MAX_TEXTURE_COORD_UNITS > MAX_TEXTURE_IMAGE_UNITS) ? MAX_TEXTURE_COORD_UNITS : MAX_TEXTURE_IMAGE_UNITS)


/** Maximum viewport size */
#define MAX_VIEWPORT_WIDTH 16384
#define MAX_VIEWPORT_HEIGHT 16384

/** Maximun number of viewports supported with ARB_viewport_array */
#define MAX_VIEWPORTS 16

/** Maxmimum size for CVA.  May be overridden by the drivers.  */
#define MAX_ARRAY_LOCK_SIZE 3000

/** Subpixel precision for antialiasing, window coordinate snapping */
#define SUB_PIXEL_BITS 4

/** For GL_ARB_texture_compression */
#define MAX_COMPRESSED_TEXTURE_FORMATS 25

/** For GL_EXT_texture_filter_anisotropic */
#define MAX_TEXTURE_MAX_ANISOTROPY 16.0

/** For GL_EXT_texture_lod_bias (typically MAX_TEXTURE_LEVELS - 1) */
#define MAX_TEXTURE_LOD_BIAS 14.0

/** For any program target/extension */
/*@@{*/
#define MAX_PROGRAM_INSTRUCTIONS       (16 * 1024)

/**
 * Per-program constants (power of two)
 *
 * \c MAX_PROGRAM_LOCAL_PARAMS and \c MAX_UNIFORMS are just the assembly shader
 * and GLSL shader names for the same thing.  They should \b always have the
 * same value.  Each refers to the number of vec4 values supplied as
 * per-program parameters.
 */
/*@@{*/
#define MAX_PROGRAM_LOCAL_PARAMS       4096
#define MAX_UNIFORMS                   4096
#define MAX_UNIFORM_BUFFERS            15 /* + 1 default uniform buffer */
/* 6 is for vertex, hull, domain, geometry, fragment, and compute shader. */
#define MAX_COMBINED_UNIFORM_BUFFERS   (MAX_UNIFORM_BUFFERS * 6)
#define MAX_ATOMIC_COUNTERS            4096
/* 6 is for vertex, hull, domain, geometry, fragment, and compute shader. */
#define MAX_COMBINED_ATOMIC_BUFFERS    (MAX_UNIFORM_BUFFERS * 6)
/* Size of an atomic counter in bytes according to ARB_shader_atomic_counters */
#define ATOMIC_COUNTER_SIZE            4
#define MAX_IMAGE_UNIFORMS             16
/* 6 is for vertex, hull, domain, geometry, fragment, and compute shader. */
#define MAX_IMAGE_UNITS                (MAX_IMAGE_UNIFORMS * 6)
/*@@}*/

/**
 * Per-context constants (power of two)
 *
 * \note
 * This value should always be less than or equal to \c MAX_PROGRAM_LOCAL_PARAMS
 * and \c MAX_VERTEX_PROGRAM_PARAMS.  Otherwise some applications will make
 * incorrect assumptions.
 */
#define MAX_PROGRAM_ENV_PARAMS         256

#define MAX_PROGRAM_MATRICES           8
#define MAX_PROGRAM_MATRIX_STACK_DEPTH 4
#define MAX_PROGRAM_CALL_DEPTH         8
#define MAX_PROGRAM_TEMPS              256
#define MAX_PROGRAM_ADDRESS_REGS       1
#define MAX_VARYING                    32    /**< number of float[4] vectors */
#define MAX_SAMPLERS                   MAX_TEXTURE_IMAGE_UNITS
#define MAX_PROGRAM_INPUTS             32
#define MAX_PROGRAM_OUTPUTS            64
/*@@}*/

/** For GL_ARB_vertex_program */
/*@@{*/
#define MAX_VERTEX_PROGRAM_ADDRESS_REGS 1
#define MAX_VERTEX_PROGRAM_PARAMS       MAX_UNIFORMS
/*@@}*/

/** For GL_ARB_fragment_program */
/*@@{*/
#define MAX_FRAGMENT_PROGRAM_ADDRESS_REGS 0
/*@@}*/

/** For GL_NV_fragment_program */
/*@@{*/
#define MAX_NV_FRAGMENT_PROGRAM_INSTRUCTIONS 1024 /* 72 for GL_ARB_f_p */
#define MAX_NV_FRAGMENT_PROGRAM_TEMPS         96
#define MAX_NV_FRAGMENT_PROGRAM_PARAMS        64
#define MAX_NV_FRAGMENT_PROGRAM_INPUTS        12
#define MAX_NV_FRAGMENT_PROGRAM_OUTPUTS        3
#define MAX_NV_FRAGMENT_PROGRAM_WRITE_ONLYS    2
/*@@}*/


/** For GL_ARB_vertex_shader */
/*@@{*/
#define MAX_VERTEX_GENERIC_ATTRIBS 16
/* 6 is for vertex, hull, domain, geometry, fragment, and compute shader. */
#define MAX_COMBINED_TEXTURE_IMAGE_UNITS (MAX_TEXTURE_IMAGE_UNITS * 6)
/*@@}*/


/** For GL_ARB_draw_buffers */
/*@@{*/
#define MAX_DRAW_BUFFERS 8
/*@@}*/


/** For GL_EXT_framebuffer_object */
/*@@{*/
#define MAX_COLOR_ATTACHMENTS 8
#define MAX_RENDERBUFFER_SIZE 16384
/*@@}*/

/** For GL_ATI_envmap_bump - support bump mapping on first 8 units */
#define SUPPORTED_ATI_BUMP_UNITS 0xff

/** For GL_EXT_transform_feedback */
#define MAX_FEEDBACK_BUFFERS 4
#define MAX_FEEDBACK_ATTRIBS 32

/** For GL_ARB_geometry_shader4 */
/*@@{*/
#define MAX_GEOMETRY_UNIFORM_COMPONENTS              512
#define MAX_GEOMETRY_OUTPUT_VERTICES                 256
#define MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS         1024
/*@@}*/

/** For GL_ARB_debug_output and GL_KHR_debug */
/*@@{*/
#define MAX_DEBUG_LOGGED_MESSAGES   10
#define MAX_DEBUG_MESSAGE_LENGTH    4096
/*@@}*/

/** For GL_KHR_debug */
/*@@{*/
#define MAX_LABEL_LENGTH 256
#define MAX_DEBUG_GROUP_STACK_DEPTH 64
/*@@}*/

/** For GL_ARB_gpu_shader5 */
/*@@{*/
#define MAX_GEOMETRY_SHADER_INVOCATIONS     32
#define MIN_FRAGMENT_INTERPOLATION_OFFSET   -0.5
#define MAX_FRAGMENT_INTERPOLATION_OFFSET   0.5
#define FRAGMENT_INTERPOLATION_OFFSET_BITS  4
#define MAX_VERTEX_STREAMS                  4
/*@@}*/

/** For GL_INTEL_performance_query */
/*@@{*/
#define MAX_PERFQUERY_QUERY_NAME_LENGTH     256
#define MAX_PERFQUERY_COUNTER_NAME_LENGTH   256
#define MAX_PERFQUERY_COUNTER_DESC_LENGTH   1024
#define PERFQUERY_HAVE_GPA_EXTENDED_COUNTERS 0
/*@@}*/

/*
 * Color channel component order
 * 
 * \note Changes will almost certainly cause problems at this time.
 */
#define RCOMP 0
#define GCOMP 1
#define BCOMP 2
#define ACOMP 3


/**
 * Maximum number of temporary vertices required for clipping.  
 *
 * Used in array_cache and tnl modules.
 */
#define MAX_CLIPPED_VERTICES ((2 * (6 + MAX_CLIP_PLANES))+1)


#endif /* MESA_CONFIG_H_INCLUDED */
@


1.10
log
@Merge Mesa 10.2.9
@
text
@@


1.9
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a291 11
/** For GL_ARB_compute_shader */
/*@@{*/
#define MAX_COMPUTE_UNIFORM_BLOCKS          12
#define MAX_COMPUTE_TEXTURE_IMAGE_UNITS     16
#define MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS  8
#define MAX_COMPUTE_ATOMIC_COUNTERS         8
#define MAX_COMPUTE_SHARED_MEMORY_SIZE      32768
#define MAX_COMPUTE_UNIFORM_COMPONENTS      512
#define MAX_COMPUTE_IMAGE_UNIFORMS          8
/*@@}*/

@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d292 11
@


1.7
log
@Merge Mesa 9.2.0
@
text
@d124 1
a124 1
#define MAX_TEXTURE_IMAGE_UNITS 16
d140 3
d176 8
d263 1
a263 1
/** For GL_ARB_debug_output */
d269 22
@


1.6
log
@Merge Mesa 7.10.3
@
text
@a2 1
 * Version:  7.5
d20 4
a23 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
a48 3
/** Maximum color matrix stack depth */
#define MAX_COLOR_STACK_DEPTH 4

d61 5
a65 2
/** Maximum user-defined clipping planes */
#define MAX_CLIP_PLANES 6
d74 1
a74 5
#ifdef AMIGA
#   define MAX_EVAL_ORDER 12
#else
#   define MAX_EVAL_ORDER 30
#endif
a92 3
/** Max texture palette / color table size */
#define MAX_COLOR_TABLE_SIZE 256

d108 3
a110 1
/** Maximum number of layers in a 1D or 2D array texture - GL_MESA_texture_array */
d136 3
a138 28
/** 
 * Maximum viewport/image width. Must accomodate all texture sizes too. 
 */

#ifndef MAX_WIDTH
#   define MAX_WIDTH 16384
#endif
/** Maximum viewport/image height */
#ifndef MAX_HEIGHT
#   define MAX_HEIGHT 16384
#endif

/* XXX: hack to prevent stack overflow on windows until all temporary arrays
 * [MAX_WIDTH] are allocated from the heap */
#ifdef WIN32
#undef MAX_TEXTURE_LEVELS
#undef MAX_3D_TEXTURE_LEVELS
#undef MAX_CUBE_TEXTURE_LEVELS
#undef MAX_TEXTURE_RECT_SIZE
#undef MAX_WIDTH
#undef MAX_HEIGHT
#define MAX_TEXTURE_LEVELS 13
#define MAX_3D_TEXTURE_LEVELS 9
#define MAX_CUBE_TEXTURE_LEVELS 13
#define MAX_TEXTURE_RECT_SIZE 4096
#define MAX_WIDTH 4096
#define MAX_HEIGHT 4096
#endif
a145 8
/** Size of histogram tables */
#define HISTOGRAM_TABLE_SIZE 256

/** Max convolution filter width */
#define MAX_CONVOLUTION_WIDTH 9
/** Max convolution filter height */
#define MAX_CONVOLUTION_HEIGHT 9

d168 5
a172 2
#define MAX_PROGRAM_LOCAL_PARAMS       1024
#define MAX_UNIFORMS                   1024
d189 2
a190 2
#define MAX_PROGRAM_ADDRESS_REGS       2
#define MAX_VARYING                    16    /**< number of float[4] vectors */
a206 9
/** For GL_NV_vertex_program */
/*@@{*/
#define MAX_NV_VERTEX_PROGRAM_INSTRUCTIONS 128
#define MAX_NV_VERTEX_PROGRAM_TEMPS         12
#define MAX_NV_VERTEX_PROGRAM_PARAMS        96
#define MAX_NV_VERTEX_PROGRAM_INPUTS        16
#define MAX_NV_VERTEX_PROGRAM_OUTPUTS       15
/*@@}*/

d221 2
a222 3
#define MAX_VERTEX_TEXTURE_IMAGE_UNITS MAX_TEXTURE_IMAGE_UNITS
#define MAX_COMBINED_TEXTURE_IMAGE_UNITS (MAX_VERTEX_TEXTURE_IMAGE_UNITS + \
					  MAX_TEXTURE_IMAGE_UNITS)
d235 1
d242 1
a246 3
#define MAX_GEOMETRY_TEXTURE_IMAGE_UNITS             8
#define MAX_GEOMETRY_VARYING_COMPONENTS              32
#define MAX_VERTEX_VARYING_COMPONENTS                32
d252 1
a252 4

/**
 * \name Mesa-specific parameters
 */
d254 3
a256 34


/**
 * If non-zero use GLdouble for walking triangle edges, for better accuracy.
 */
#define TRIANGLE_WALK_DOUBLE 0


/**
 * Bits per depth buffer value (max is 32).
 */
#ifndef DEFAULT_SOFTWARE_DEPTH_BITS
#define DEFAULT_SOFTWARE_DEPTH_BITS 16
#endif
/** Depth buffer data type */
#if DEFAULT_SOFTWARE_DEPTH_BITS <= 16
#define DEFAULT_SOFTWARE_DEPTH_TYPE GLushort
#else
#define DEFAULT_SOFTWARE_DEPTH_TYPE GLuint
#endif


/**
 * Bits per stencil value: 8
 */
#define STENCIL_BITS 8


/**
 * Bits per color channel:  8, 16 or 32
 */
#ifndef CHAN_BITS
#define CHAN_BITS 8
#endif
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d100 3
d104 1
a104 1
#define MAX_TEXTURE_LEVELS 13
d107 1
a107 1
#define MAX_3D_TEXTURE_LEVELS 9
d110 1
a110 1
#define MAX_CUBE_TEXTURE_LEVELS 13
d113 1
a113 1
#define MAX_TEXTURE_RECT_SIZE 4096
d146 1
a146 1
#   define MAX_WIDTH 4096
d150 18
a167 1
#   define MAX_HEIGHT 4096
d191 1
a191 1
#define MAX_TEXTURE_LOD_BIAS 12.0
d200 1
a200 1
 * \c MAX_PROGRAM_LOCAL_PARAMS and \c MAX_UNIFORMS are just the assmebly shader
d273 1
a273 1
#define MAX_DRAW_BUFFERS 4
d284 14
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d3 1
a3 1
 * Version:  7.3
a34 3
#include "main/mfeatures.h"


d71 1
a71 1
#define MAX_AUX_BUFFERS 4
d101 1
a101 1
#define MAX_TEXTURE_LEVELS 12
d107 1
a107 1
#define MAX_CUBE_TEXTURE_LEVELS 12
d110 1
a110 1
#define MAX_TEXTURE_RECT_SIZE 2048
d141 4
a144 1
#define MAX_WIDTH 4096
d146 3
a148 1
#define MAX_HEIGHT 4096
d171 39
a209 1
#define MAX_TEXTURE_LOD_BIAS 11.0
d214 1
a214 1
#define MAX_VERTEX_PROGRAM_ATTRIBS     16
a219 19
#define MAX_FRAGMENT_PROGRAM_ALU_INSTRUCTIONS 48
#define MAX_FRAGMENT_PROGRAM_TEX_INSTRUCTIONS 24
#define MAX_FRAGMENT_PROGRAM_TEX_INDIRECTIONS  4
/*@@}*/

/** For any program target/extension */
/*@@{*/
#define MAX_PROGRAM_LOCAL_PARAMS 256 /**< per-program constants (power of two) */
#define MAX_PROGRAM_ENV_PARAMS 128
#define MAX_PROGRAM_MATRICES 8
#define MAX_PROGRAM_MATRIX_STACK_DEPTH 4
#define MAX_PROGRAM_CALL_DEPTH 8
#define MAX_PROGRAM_TEMPS 128
#define MAX_PROGRAM_ADDRESS_REGS 2
#define MAX_UNIFORMS 1024  /**< number of vec4 uniforms */
#define MAX_VARYING 8      /**< number of float[4] vectors */
#define MAX_SAMPLERS MAX_TEXTURE_IMAGE_UNITS
#define MAX_PROGRAM_INPUTS 32
#define MAX_PROGRAM_OUTPUTS 32
d226 1
a226 1
#define MAX_NV_VERTEX_PROGRAM_PARAMS        MAX_PROGRAM_ENV_PARAMS
d244 1
a244 1
#define MAX_VERTEX_ATTRIBS 16
d246 2
a247 1
#define MAX_COMBINED_TEXTURE_IMAGE_UNITS MAX_TEXTURE_IMAGE_UNITS
d262 2
a263 1

@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a0 5
/**
 * \file config.h
 * Tunable configuration parameters.
 */

d3 1
a3 1
 * Version:  7.1
d6 1
d26 4
d34 4
d118 6
a123 8
/** Number of texture units - GL_ARB_multitexture
 * This needs to be the larger of MAX_TEXTURE_COORD_UNITS and
 * MAX_TEXTURE_IMAGE_UNITS seen below, since MAX_TEXTURE_UNITS is used
 * to dimension some arrays that store both coord and image data.
*/
#define MAX_TEXTURE_UNITS 8

/*@@}*/
d125 5
d132 5
a136 5
 * \name Separate numbers of texture coordinates and texture image units.
 *
 * These values will eventually replace most instances of MAX_TEXTURE_UNITS.
 * We should always have MAX_TEXTURE_COORD_UNITS <= MAX_TEXTURE_IMAGE_UNITS.
 * And, GL_MAX_TEXTURE_UNITS <= MAX_TEXTURE_COORD_UNITS.
d138 2
a139 4
/*@@{*/
#define MAX_TEXTURE_COORD_UNITS 8
#define MAX_TEXTURE_IMAGE_UNITS 8
/*@@}*/
d187 1
a187 1
#define MAX_PROGRAM_LOCAL_PARAMS 128 /* KW: power of two */
d194 5
a198 3
#define MAX_UNIFORMS 128
#define MAX_VARYING 8
#define MAX_SAMPLERS 8
d224 2
a225 2
#define MAX_VERTEX_TEXTURE_IMAGE_UNITS MAX_TEXTURE_UNITS
#define MAX_COMBINED_TEXTURE_IMAGE_UNITS (MAX_TEXTURE_IMAGE_UNITS + MAX_VERTEX_TEXTURE_IMAGE_UNITS)
a290 35


/*
 * Enable/disable features (blocks of code) by setting FEATURE_xyz to 0 or 1.
 */
#ifndef _HAVE_FULL_GL
#define _HAVE_FULL_GL 1
#endif

#define FEATURE_userclip  _HAVE_FULL_GL
#define FEATURE_texgen  _HAVE_FULL_GL
#define FEATURE_windowpos  _HAVE_FULL_GL
#define FEATURE_ARB_occlusion_query  _HAVE_FULL_GL
#define FEATURE_ARB_fragment_program  _HAVE_FULL_GL
#define FEATURE_ARB_vertex_buffer_object  _HAVE_FULL_GL
#define FEATURE_ARB_vertex_program  _HAVE_FULL_GL

#define FEATURE_ARB_vertex_shader _HAVE_FULL_GL
#define FEATURE_ARB_fragment_shader _HAVE_FULL_GL
#define FEATURE_ARB_shader_objects (FEATURE_ARB_vertex_shader || FEATURE_ARB_fragment_shader)
#define FEATURE_ARB_shading_language_100 FEATURE_ARB_shader_objects
#define FEATURE_ARB_shading_language_120 FEATURE_ARB_shader_objects
#define FEATURE_es2_glsl 0

#define FEATURE_EXT_framebuffer_blit _HAVE_FULL_GL
#define FEATURE_EXT_framebuffer_object _HAVE_FULL_GL
#define FEATURE_EXT_pixel_buffer_object  _HAVE_FULL_GL
#define FEATURE_EXT_texture_sRGB _HAVE_FULL_GL
#define FEATURE_EXT_timer_query  _HAVE_FULL_GL
#define FEATURE_ATI_fragment_shader _HAVE_FULL_GL
#define FEATURE_MESA_program_debug  _HAVE_FULL_GL
#define FEATURE_NV_fence  _HAVE_FULL_GL
#define FEATURE_NV_fragment_program  _HAVE_FULL_GL
#define FEATURE_NV_vertex_program  _HAVE_FULL_GL
/*@@}*/
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d8 1
a8 1
 * Version:  7.0
d85 1
a85 1
#define MAX_POINT_SIZE 20.0
d111 3
a165 19
/** For GL_NV_vertex_program */
/*@@{*/
#define MAX_NV_VERTEX_PROGRAM_INSTRUCTIONS 128
#define MAX_NV_VERTEX_PROGRAM_TEMPS         12
#define MAX_NV_VERTEX_PROGRAM_PARAMS        128	/* KW: power of two */
#define MAX_NV_VERTEX_PROGRAM_INPUTS        16
#define MAX_NV_VERTEX_PROGRAM_OUTPUTS       15
/*@@}*/

/** For GL_NV_fragment_program */
/*@@{*/
#define MAX_NV_FRAGMENT_PROGRAM_INSTRUCTIONS 1024 /* 72 for GL_ARB_f_p */
#define MAX_NV_FRAGMENT_PROGRAM_TEMPS         96
#define MAX_NV_FRAGMENT_PROGRAM_PARAMS        64
#define MAX_NV_FRAGMENT_PROGRAM_INPUTS        12
#define MAX_NV_FRAGMENT_PROGRAM_OUTPUTS        3
#define MAX_NV_FRAGMENT_PROGRAM_WRITE_ONLYS    2
/*@@}*/

d191 1
d194 20
d306 1
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
 * Version:  6.5.1
d10 1
a10 1
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
d31 2
a32 2
#ifndef CONFIG_H
#define CONFIG_H
d199 1
d202 5
a206 5
/*@@}*/

/** For GL_ARB_fragment_shader */
/*@@{*/
#define MAX_FRAGMENT_UNIFORM_COMPONENTS 64
d212 1
a212 3
#define MAX_VERTEX_UNIFORM_COMPONENTS 512
#define MAX_VARYING_FLOATS 32
#define MAX_VERTEX_TEXTURE_IMAGE_UNITS 0
d219 1
a219 1
#define MAX_DRAW_BUFFERS 1
d243 1
a243 4
 * Bits per depth buffer value.  
 *
 * Any reasonable value up to 31 will work.  32 doesn't work because of integer
 * overflow problems in the rasterizer code.
d300 1
d323 1
a323 1
#endif /* CONFIG_H */
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d8 1
a8 1
 * Version:  6.5.2
d31 2
a32 2
#ifndef MESA_CONFIG_H_INCLUDED
#define MESA_CONFIG_H_INCLUDED
a200 1
#define MAX_PROGRAM_CALL_DEPTH 8
d326 1
a326 1
#endif /* MESA_CONFIG_H_INCLUDED */
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d8 1
a8 1
 * Version:  7.0
d10 1
a10 1
 * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
a198 1
#define MAX_PROGRAM_ENV_PARAMS 128
d202 5
a206 4
#define MAX_PROGRAM_TEMPS 128
#define MAX_PROGRAM_ADDRESS_REGS 2
#define MAX_UNIFORMS 128
#define MAX_VARYING 8
d212 2
d221 1
a221 1
#define MAX_DRAW_BUFFERS 4
d245 4
a248 1
 * Bits per depth buffer value (max is 32).
a304 1
#define FEATURE_ARB_shading_language_120 FEATURE_ARB_shader_objects
@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d1 5
d8 1
a8 1
 * Version:  7.5
a10 1
 * Copyright (C) 2008  VMware, Inc.  All Rights Reserved.
a29 4
/**
 * \file config.h
 * Tunable configuration parameters.
 */
a33 1

d70 1
a70 1
#define MAX_AUX_BUFFERS 1
d85 1
a85 1
#define MAX_POINT_SIZE 60.0
a98 3
/** Max memory to allow for a single texture image (in megabytes) */
#define MAX_TEXTURE_MBYTES 1024

d100 1
a100 1
#define MAX_TEXTURE_LEVELS 15
d103 1
a103 1
#define MAX_3D_TEXTURE_LEVELS 15
d106 1
a106 1
#define MAX_CUBE_TEXTURE_LEVELS 15
d109 1
a109 1
#define MAX_TEXTURE_RECT_SIZE 16384
d111 6
a116 2
/** Maximum number of layers in a 1D or 2D array texture - GL_MESA_texture_array */
#define MAX_ARRAY_TEXTURE_LAYERS 64
d118 1
a118 6
/**
 * Max number of texture coordinate units.  This mainly just applies to
 * the fixed-function vertex code.  This will be difficult to raise above
 * eight because of various vertex attribute bitvectors.
 */
#define MAX_TEXTURE_COORD_UNITS 8
a119 5
/**
 * Max number of texture image units.  Also determines number of texture
 * samplers in shaders.
 */
#define MAX_TEXTURE_IMAGE_UNITS 16
d122 5
a126 5
 * Larger of MAX_TEXTURE_COORD_UNITS and MAX_TEXTURE_IMAGE_UNITS.
 * This value is only used for dimensioning arrays.
 * Either MAX_TEXTURE_COORD_UNITS or MAX_TEXTURE_IMAGE_UNITS (or the
 * corresponding ctx->Const.MaxTextureCoord/ImageUnits fields) should be
 * used almost everywhere else.
d128 4
a131 2
#define MAX_TEXTURE_UNITS ((MAX_TEXTURE_COORD_UNITS > MAX_TEXTURE_IMAGE_UNITS) ? MAX_TEXTURE_COORD_UNITS : MAX_TEXTURE_IMAGE_UNITS)

d136 1
a136 4

#ifndef MAX_WIDTH
#   define MAX_WIDTH 16384
#endif
a137 18
#ifndef MAX_HEIGHT
#   define MAX_HEIGHT 16384
#endif

/* XXX: hack to prevent stack overflow on windows until all temporary arrays
 * [MAX_WIDTH] are allocated from the heap */
#ifdef WIN32
#undef MAX_TEXTURE_LEVELS
#undef MAX_3D_TEXTURE_LEVELS
#undef MAX_CUBE_TEXTURE_LEVELS
#undef MAX_TEXTURE_RECT_SIZE
#undef MAX_WIDTH
#undef MAX_HEIGHT
#define MAX_TEXTURE_LEVELS 13
#define MAX_3D_TEXTURE_LEVELS 9
#define MAX_CUBE_TEXTURE_LEVELS 13
#define MAX_TEXTURE_RECT_SIZE 4096
#define MAX_WIDTH 4096
a138 1
#endif
d161 1
a161 50
#define MAX_TEXTURE_LOD_BIAS 14.0

/** For any program target/extension */
/*@@{*/
#define MAX_PROGRAM_INSTRUCTIONS       (16 * 1024)

/**
 * Per-program constants (power of two)
 *
 * \c MAX_PROGRAM_LOCAL_PARAMS and \c MAX_UNIFORMS are just the assembly shader
 * and GLSL shader names for the same thing.  They should \b always have the
 * same value.  Each refers to the number of vec4 values supplied as
 * per-program parameters.
 */
/*@@{*/
#define MAX_PROGRAM_LOCAL_PARAMS       1024
#define MAX_UNIFORMS                   1024
/*@@}*/

/**
 * Per-context constants (power of two)
 *
 * \note
 * This value should always be less than or equal to \c MAX_PROGRAM_LOCAL_PARAMS
 * and \c MAX_VERTEX_PROGRAM_PARAMS.  Otherwise some applications will make
 * incorrect assumptions.
 */
#define MAX_PROGRAM_ENV_PARAMS         256

#define MAX_PROGRAM_MATRICES           8
#define MAX_PROGRAM_MATRIX_STACK_DEPTH 4
#define MAX_PROGRAM_CALL_DEPTH         8
#define MAX_PROGRAM_TEMPS              256
#define MAX_PROGRAM_ADDRESS_REGS       2
#define MAX_VARYING                    16    /**< number of float[4] vectors */
#define MAX_SAMPLERS                   MAX_TEXTURE_IMAGE_UNITS
#define MAX_PROGRAM_INPUTS             32
#define MAX_PROGRAM_OUTPUTS            64
/*@@}*/

/** For GL_ARB_vertex_program */
/*@@{*/
#define MAX_VERTEX_PROGRAM_ADDRESS_REGS 1
#define MAX_VERTEX_PROGRAM_PARAMS       MAX_UNIFORMS
/*@@}*/

/** For GL_ARB_fragment_program */
/*@@{*/
#define MAX_FRAGMENT_PROGRAM_ADDRESS_REGS 0
/*@@}*/
d167 1
a167 1
#define MAX_NV_VERTEX_PROGRAM_PARAMS        96
d182 26
d211 3
a213 4
#define MAX_VERTEX_GENERIC_ATTRIBS 16
#define MAX_VERTEX_TEXTURE_IMAGE_UNITS MAX_TEXTURE_IMAGE_UNITS
#define MAX_COMBINED_TEXTURE_IMAGE_UNITS (MAX_VERTEX_TEXTURE_IMAGE_UNITS + \
					  MAX_TEXTURE_IMAGE_UNITS)
d219 1
a219 1
#define MAX_DRAW_BUFFERS 8
a227 15
/** For GL_ATI_envmap_bump - support bump mapping on first 8 units */
#define SUPPORTED_ATI_BUMP_UNITS 0xff

/** For GL_EXT_transform_feedback */
#define MAX_FEEDBACK_ATTRIBS 32

/** For GL_ARB_geometry_shader4 */
/*@@{*/
#define MAX_GEOMETRY_TEXTURE_IMAGE_UNITS             8
#define MAX_GEOMETRY_VARYING_COMPONENTS              32
#define MAX_VERTEX_VARYING_COMPONENTS                32
#define MAX_GEOMETRY_UNIFORM_COMPONENTS              512
#define MAX_GEOMETRY_OUTPUT_VERTICES                 256
#define MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS         1024
/*@@}*/
d279 34
@


1.1.1.5
log
@Import Mesa 9.2.0
@
text
@d3 1
d21 3
a23 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d49 3
d64 2
a65 5
/**
 * Maximum number of user-defined clipping planes supported by any driver in
 * Mesa.  This is used to size arrays.
 */
#define MAX_CLIP_PLANES 8
d74 5
a78 1
#define MAX_EVAL_ORDER 30
d97 3
d115 1
a115 3
/**
 * Maximum number of layers in a 1D or 2D array texture - GL_MESA_texture_array
 */
d141 28
a168 3
/** Maximum viewport size */
#define MAX_VIEWPORT_WIDTH 16384
#define MAX_VIEWPORT_HEIGHT 16384
d176 8
d206 2
a207 5
#define MAX_PROGRAM_LOCAL_PARAMS       4096
#define MAX_UNIFORMS                   4096
#define MAX_UNIFORM_BUFFERS            15 /* + 1 default uniform buffer */
/* 6 is for vertex, hull, domain, geometry, fragment, and compute shader. */
#define MAX_COMBINED_UNIFORM_BUFFERS   (MAX_UNIFORM_BUFFERS * 6)
d224 2
a225 2
#define MAX_PROGRAM_ADDRESS_REGS       1
#define MAX_VARYING                    32    /**< number of float[4] vectors */
d242 9
d265 3
a267 2
/* 6 is for vertex, hull, domain, geometry, fragment, and compute shader. */
#define MAX_COMBINED_TEXTURE_IMAGE_UNITS (MAX_TEXTURE_IMAGE_UNITS * 6)
a279 1
#define MAX_RENDERBUFFER_SIZE 16384
a285 1
#define MAX_FEEDBACK_BUFFERS 4
d290 3
d298 4
a301 1
/** For GL_ARB_debug_output */
d303 34
a336 3
#define MAX_DEBUG_LOGGED_MESSAGES   10
#define MAX_DEBUG_MESSAGE_LENGTH    4096
/*@@}*/
@


1.1.1.6
log
@Import Mesa 10.2.3
@
text
@d124 1
a124 1
#define MAX_TEXTURE_IMAGE_UNITS 32
a139 3
/** Maximun number of viewports supported with ARB_viewport_array */
#define MAX_VIEWPORTS 16

a172 8
#define MAX_ATOMIC_COUNTERS            4096
/* 6 is for vertex, hull, domain, geometry, fragment, and compute shader. */
#define MAX_COMBINED_ATOMIC_BUFFERS    (MAX_UNIFORM_BUFFERS * 6)
/* Size of an atomic counter in bytes according to ARB_shader_atomic_counters */
#define ATOMIC_COUNTER_SIZE            4
#define MAX_IMAGE_UNIFORMS             16
/* 6 is for vertex, hull, domain, geometry, fragment, and compute shader. */
#define MAX_IMAGE_UNITS                (MAX_IMAGE_UNIFORMS * 6)
d252 1
a252 1
/** For GL_ARB_debug_output and GL_KHR_debug */
a257 22
/** For GL_KHR_debug */
/*@@{*/
#define MAX_LABEL_LENGTH 256
#define MAX_DEBUG_GROUP_STACK_DEPTH 64
/*@@}*/

/** For GL_ARB_gpu_shader5 */
/*@@{*/
#define MAX_GEOMETRY_SHADER_INVOCATIONS     32
#define MIN_FRAGMENT_INTERPOLATION_OFFSET   -0.5
#define MAX_FRAGMENT_INTERPOLATION_OFFSET   0.5
#define FRAGMENT_INTERPOLATION_OFFSET_BITS  4
#define MAX_VERTEX_STREAMS                  4
/*@@}*/

/** For GL_INTEL_performance_query */
/*@@{*/
#define MAX_PERFQUERY_QUERY_NAME_LENGTH     256
#define MAX_PERFQUERY_COUNTER_NAME_LENGTH   256
#define MAX_PERFQUERY_COUNTER_DESC_LENGTH   1024
#define PERFQUERY_HAVE_GPA_EXTENDED_COUNTERS 0
/*@@}*/
@


1.1.1.7
log
@Import Mesa 10.4.3
@
text
@a291 11
/** For GL_ARB_compute_shader */
/*@@{*/
#define MAX_COMPUTE_UNIFORM_BLOCKS          12
#define MAX_COMPUTE_TEXTURE_IMAGE_UNITS     16
#define MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS  8
#define MAX_COMPUTE_ATOMIC_COUNTERS         8
#define MAX_COMPUTE_SHARED_MEMORY_SIZE      32768
#define MAX_COMPUTE_UNIFORM_COMPONENTS      512
#define MAX_COMPUTE_IMAGE_UNIFORMS          8
/*@@}*/

@


1.1.1.8
log
@Import Mesa 10.2.9
@
text
@d292 11
@


