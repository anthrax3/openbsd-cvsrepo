head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.3.0.8
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.52;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.15;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.22.20.06.30;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.49.42;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.49.42;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.45;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.16.23;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.58;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.12.25;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.49.33;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2004  Brian Paul   All Rights Reserved.
 * (C) Copyright IBM Corporation 2006
 * Copyright (C) 2009  VMware, Inc.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef ARRAYOBJ_H
#define ARRAYOBJ_H

#include "glheader.h"
#include "mtypes.h"
#include "glformats.h"

struct gl_context;

/**
 * \file arrayobj.h
 * Functions for the GL_APPLE_vertex_array_object extension.
 *
 * \author Ian Romanick <idr@@us.ibm.com>
 * \author Brian Paul
 */

/*
 * Internal functions
 */

extern struct gl_vertex_array_object *
_mesa_lookup_vao(struct gl_context *ctx, GLuint id);

extern struct gl_vertex_array_object *
_mesa_new_vao(struct gl_context *ctx, GLuint name);

extern void
_mesa_delete_vao(struct gl_context *ctx, struct gl_vertex_array_object *obj);

extern void
_mesa_reference_vao_(struct gl_context *ctx,
                     struct gl_vertex_array_object **ptr,
                     struct gl_vertex_array_object *vao);

static inline void
_mesa_reference_vao(struct gl_context *ctx,
                    struct gl_vertex_array_object **ptr,
                    struct gl_vertex_array_object *vao)
{
   if (*ptr != vao)
      _mesa_reference_vao_(ctx, ptr, vao);
}


extern void
_mesa_initialize_vao(struct gl_context *ctx,
                     struct gl_vertex_array_object *obj, GLuint name);


extern void
_mesa_update_vao_max_element(struct gl_context *ctx,
                             struct gl_vertex_array_object *vao);

extern void
_mesa_update_vao_client_arrays(struct gl_context *ctx,
                               struct gl_vertex_array_object *vao);


/** Returns the bitmask of all enabled arrays in fixed function mode.
 *
 *  In fixed function mode only the traditional fixed function arrays
 *  are available.
 */
static inline GLbitfield64
_mesa_array_object_get_enabled_ff(const struct gl_vertex_array_object *vao)
{
   return vao->_Enabled & VERT_BIT_FF_ALL;
}

/** Returns the bitmask of all enabled arrays in arb/glsl shader mode.
 *
 *  In arb/glsl shader mode all the fixed function and the arb/glsl generic
 *  arrays are available. Only the first generic array takes
 *  precedence over the legacy position array.
 */
static inline GLbitfield64
_mesa_array_object_get_enabled_arb(const struct gl_vertex_array_object *vao)
{
   GLbitfield64 enabled = vao->_Enabled;
   return enabled & ~(VERT_BIT_POS & (enabled >> VERT_ATTRIB_GENERIC0));
}


/*
 * API functions
 */


void GLAPIENTRY _mesa_BindVertexArray( GLuint id );

void GLAPIENTRY _mesa_BindVertexArrayAPPLE( GLuint id );

void GLAPIENTRY _mesa_DeleteVertexArrays(GLsizei n, const GLuint *ids);

void GLAPIENTRY _mesa_GenVertexArrays(GLsizei n, GLuint *arrays);

void GLAPIENTRY _mesa_GenVertexArraysAPPLE(GLsizei n, GLuint *buffer);

GLboolean GLAPIENTRY _mesa_IsVertexArray( GLuint id );

#endif /* ARRAYOBJ_H */
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d78 4
d84 26
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@a77 4
_mesa_update_vao_max_element(struct gl_context *ctx,
                             struct gl_vertex_array_object *vao);

extern void
a79 26


/** Returns the bitmask of all enabled arrays in fixed function mode.
 *
 *  In fixed function mode only the traditional fixed function arrays
 *  are available.
 */
static inline GLbitfield64
_mesa_array_object_get_enabled_ff(const struct gl_vertex_array_object *vao)
{
   return vao->_Enabled & VERT_BIT_FF_ALL;
}

/** Returns the bitmask of all enabled arrays in arb/glsl shader mode.
 *
 *  In arb/glsl shader mode all the fixed function and the arb/glsl generic
 *  arrays are available. Only the first generic array takes
 *  precedence over the legacy position array.
 */
static inline GLbitfield64
_mesa_array_object_get_enabled_arb(const struct gl_vertex_array_object *vao)
{
   GLbitfield64 enabled = vao->_Enabled;
   return enabled & ~(VERT_BIT_POS & (enabled >> VERT_ATTRIB_GENERIC0));
}

@


1.4
log
@Merge Mesa 9.2.0
@
text
@d48 5
a52 2
extern struct gl_array_object *
_mesa_new_array_object( struct gl_context *ctx, GLuint name );
d55 1
a55 1
_mesa_delete_array_object( struct gl_context *ctx, struct gl_array_object *obj );
d58 3
a60 3
_mesa_reference_array_object_(struct gl_context *ctx,
                              struct gl_array_object **ptr,
                              struct gl_array_object *arrayObj);
d63 3
a65 3
_mesa_reference_array_object(struct gl_context *ctx,
                             struct gl_array_object **ptr,
                             struct gl_array_object *arrayObj)
d67 2
a68 2
   if (*ptr != arrayObj)
      _mesa_reference_array_object_(ctx, ptr, arrayObj);
d73 3
a75 2
_mesa_initialize_array_object( struct gl_context *ctx,
                               struct gl_array_object *obj, GLuint name );
d77 3
d82 3
a84 2
_mesa_update_array_object_max_element(struct gl_context *ctx,
                                      struct gl_array_object *arrayObj);
d92 1
a92 1
_mesa_array_object_get_enabled_ff(const struct gl_array_object *arrayObj)
d94 1
a94 1
   return arrayObj->_Enabled & VERT_BIT_FF_ALL;
d104 1
a104 1
_mesa_array_object_get_enabled_arb(const struct gl_array_object *arrayObj)
d106 1
a106 1
   GLbitfield64 enabled = arrayObj->_Enabled;
@


1.3
log
@Merge Mesa 7.10.3
@
text
@a2 1
 * Version:  7.6
d21 4
a24 4
 * BRIAN PAUL OR IBM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
d31 2
d55 5
d62 6
a67 1
                             struct gl_array_object *arrayObj);
d78 24
d112 1
a112 1
void GLAPIENTRY _mesa_DeleteVertexArraysAPPLE(GLsizei n, const GLuint *ids);
d118 1
a118 1
GLboolean GLAPIENTRY _mesa_IsVertexArrayAPPLE( GLuint id );
@


1.2
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d31 3
a33 1
#include "context.h"
d48 1
a48 1
_mesa_new_array_object( GLcontext *ctx, GLuint name );
d51 1
a51 1
_mesa_delete_array_object( GLcontext *ctx, struct gl_array_object *obj );
d54 1
a54 1
_mesa_reference_array_object(GLcontext *ctx,
d59 1
a59 1
_mesa_initialize_array_object( GLcontext *ctx,
d64 1
a64 1
_mesa_update_array_object_max_element(GLcontext *ctx,
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.5
d7 1
d45 2
a46 2
struct gl_array_object * _mesa_new_array_object( GLcontext *ctx,
    GLuint name );
d48 2
a49 1
void _mesa_delete_array_object( GLcontext *ctx, struct gl_array_object *obj );
d51 4
a54 2
void _mesa_initialize_array_object( GLcontext *ctx,
    struct gl_array_object *obj, GLuint name );
d56 3
a58 1
void _mesa_save_array_object( GLcontext *ctx, struct gl_array_object *obj );
a59 1
void _mesa_remove_array_object( GLcontext *ctx, struct gl_array_object *obj );
d61 3
d70 3
d76 2
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d3 1
a3 1
 * Version:  7.6
a6 1
 * Copyright (C) 2009  VMware, Inc.  All Rights Reserved.
d30 1
a30 3
#include "glheader.h"

struct gl_context;
d44 2
a45 2
extern struct gl_array_object *
_mesa_new_array_object( struct gl_context *ctx, GLuint name );
d47 1
a47 2
extern void
_mesa_delete_array_object( struct gl_context *ctx, struct gl_array_object *obj );
d49 2
a50 4
extern void
_mesa_reference_array_object(struct gl_context *ctx,
                             struct gl_array_object **ptr,
                             struct gl_array_object *arrayObj);
d52 1
a52 3
extern void
_mesa_initialize_array_object( struct gl_context *ctx,
                               struct gl_array_object *obj, GLuint name );
d54 1
a55 3
extern void
_mesa_update_array_object_max_element(struct gl_context *ctx,
                                      struct gl_array_object *arrayObj);
a61 3

void GLAPIENTRY _mesa_BindVertexArray( GLuint id );

a64 2

void GLAPIENTRY _mesa_GenVertexArrays(GLsizei n, GLuint *arrays);
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d3 1
d22 4
a25 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
a31 2
#include "mtypes.h"
#include "glformats.h"
a53 5
_mesa_reference_array_object_(struct gl_context *ctx,
                              struct gl_array_object **ptr,
                              struct gl_array_object *arrayObj);

static inline void
d56 1
a56 6
                             struct gl_array_object *arrayObj)
{
   if (*ptr != arrayObj)
      _mesa_reference_array_object_(ctx, ptr, arrayObj);
}

a66 24
/** Returns the bitmask of all enabled arrays in fixed function mode.
 *
 *  In fixed function mode only the traditional fixed function arrays
 *  are available.
 */
static inline GLbitfield64
_mesa_array_object_get_enabled_ff(const struct gl_array_object *arrayObj)
{
   return arrayObj->_Enabled & VERT_BIT_FF_ALL;
}

/** Returns the bitmask of all enabled arrays in arb/glsl shader mode.
 *
 *  In arb/glsl shader mode all the fixed function and the arb/glsl generic
 *  arrays are available. Only the first generic array takes
 *  precedence over the legacy position array.
 */
static inline GLbitfield64
_mesa_array_object_get_enabled_arb(const struct gl_array_object *arrayObj)
{
   GLbitfield64 enabled = arrayObj->_Enabled;
   return enabled & ~(VERT_BIT_POS & (enabled >> VERT_ATTRIB_GENERIC0));
}

d77 1
a77 1
void GLAPIENTRY _mesa_DeleteVertexArrays(GLsizei n, const GLuint *ids);
d83 1
a83 1
GLboolean GLAPIENTRY _mesa_IsVertexArray( GLuint id );
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d48 2
a49 5
extern struct gl_vertex_array_object *
_mesa_lookup_vao(struct gl_context *ctx, GLuint id);

extern struct gl_vertex_array_object *
_mesa_new_vao(struct gl_context *ctx, GLuint name);
d52 1
a52 1
_mesa_delete_vao(struct gl_context *ctx, struct gl_vertex_array_object *obj);
d55 3
a57 3
_mesa_reference_vao_(struct gl_context *ctx,
                     struct gl_vertex_array_object **ptr,
                     struct gl_vertex_array_object *vao);
d60 3
a62 3
_mesa_reference_vao(struct gl_context *ctx,
                    struct gl_vertex_array_object **ptr,
                    struct gl_vertex_array_object *vao)
d64 2
a65 2
   if (*ptr != vao)
      _mesa_reference_vao_(ctx, ptr, vao);
d70 2
a71 3
_mesa_initialize_vao(struct gl_context *ctx,
                     struct gl_vertex_array_object *obj, GLuint name);

a72 3
extern void
_mesa_update_vao_max_element(struct gl_context *ctx,
                             struct gl_vertex_array_object *vao);
d75 2
a76 3
_mesa_update_vao_client_arrays(struct gl_context *ctx,
                               struct gl_vertex_array_object *vao);

d84 1
a84 1
_mesa_array_object_get_enabled_ff(const struct gl_vertex_array_object *vao)
d86 1
a86 1
   return vao->_Enabled & VERT_BIT_FF_ALL;
d96 1
a96 1
_mesa_array_object_get_enabled_arb(const struct gl_vertex_array_object *vao)
d98 1
a98 1
   GLbitfield64 enabled = vao->_Enabled;
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d78 4
d84 26
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@a77 4
_mesa_update_vao_max_element(struct gl_context *ctx,
                             struct gl_vertex_array_object *vao);

extern void
a79 26


/** Returns the bitmask of all enabled arrays in fixed function mode.
 *
 *  In fixed function mode only the traditional fixed function arrays
 *  are available.
 */
static inline GLbitfield64
_mesa_array_object_get_enabled_ff(const struct gl_vertex_array_object *vao)
{
   return vao->_Enabled & VERT_BIT_FF_ALL;
}

/** Returns the bitmask of all enabled arrays in arb/glsl shader mode.
 *
 *  In arb/glsl shader mode all the fixed function and the arb/glsl generic
 *  arrays are available. Only the first generic array takes
 *  precedence over the legacy position array.
 */
static inline GLbitfield64
_mesa_array_object_get_enabled_arb(const struct gl_vertex_array_object *vao)
{
   GLbitfield64 enabled = vao->_Enabled;
   return enabled & ~(VERT_BIT_POS & (enabled >> VERT_ATTRIB_GENERIC0));
}

@


