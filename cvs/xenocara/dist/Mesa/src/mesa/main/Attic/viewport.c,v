head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.53;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.33;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.44;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.16.59;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.07;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.13.04;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.50.11;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 2009  VMware, Inc.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * \file viewport.c
 * glViewport and glDepthRange functions.
 */


#include "context.h"
#include "macros.h"
#include "mtypes.h"
#include "viewport.h"

static void
set_viewport_no_notify(struct gl_context *ctx, unsigned idx,
                       GLfloat x, GLfloat y,
                       GLfloat width, GLfloat height)
{
   /* clamp width and height to the implementation dependent range */
   width  = MIN2(width, (GLfloat) ctx->Const.MaxViewportWidth);
   height = MIN2(height, (GLfloat) ctx->Const.MaxViewportHeight);

   /* The GL_ARB_viewport_array spec says:
    *
    *     "The location of the viewport's bottom-left corner, given by (x,y),
    *     are clamped to be within the implementation-dependent viewport
    *     bounds range.  The viewport bounds range [min, max] tuple may be
    *     determined by calling GetFloatv with the symbolic constant
    *     VIEWPORT_BOUNDS_RANGE (see section 6.1)."
    */
   if (ctx->Extensions.ARB_viewport_array) {
      x = CLAMP(x,
                ctx->Const.ViewportBounds.Min, ctx->Const.ViewportBounds.Max);
      y = CLAMP(y,
                ctx->Const.ViewportBounds.Min, ctx->Const.ViewportBounds.Max);
   }

   ctx->ViewportArray[idx].X = x;
   ctx->ViewportArray[idx].Width = width;
   ctx->ViewportArray[idx].Y = y;
   ctx->ViewportArray[idx].Height = height;
   ctx->NewState |= _NEW_VIEWPORT;

#if 1
   /* XXX remove this someday.  Currently the DRI drivers rely on
    * the WindowMap matrix being up to date in the driver's Viewport
    * and DepthRange functions.
    */
   _math_matrix_viewport(&ctx->ViewportArray[idx]._WindowMap,
                         ctx->ViewportArray[idx].X,
                         ctx->ViewportArray[idx].Y,
                         ctx->ViewportArray[idx].Width,
                         ctx->ViewportArray[idx].Height,
                         ctx->ViewportArray[idx].Near,
                         ctx->ViewportArray[idx].Far,
                         ctx->DrawBuffer->_DepthMaxF);
#endif
}

struct gl_viewport_inputs {
   GLfloat X, Y;                /**< position */
   GLfloat Width, Height;       /**< size */
};

struct gl_depthrange_inputs {
   GLdouble Near, Far;          /**< Depth buffer range */
};

/**
 * Set the viewport.
 * \sa Called via glViewport() or display list execution.
 *
 * Flushes the vertices and calls _mesa_set_viewport() with the given
 * parameters.
 */
void GLAPIENTRY
_mesa_Viewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
   unsigned i;
   GET_CURRENT_CONTEXT(ctx);
   FLUSH_VERTICES(ctx, 0);

   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "glViewport %d %d %d %d\n", x, y, width, height);

   if (width < 0 || height < 0) {
      _mesa_error(ctx,  GL_INVALID_VALUE,
                   "glViewport(%d, %d, %d, %d)", x, y, width, height);
      return;
   }

   /* The GL_ARB_viewport_array spec says:
    *
    *     "Viewport sets the parameters for all viewports to the same values
    *     and is equivalent (assuming no errors are generated) to:
    *
    *     for (uint i = 0; i < MAX_VIEWPORTS; i++)
    *         ViewportIndexedf(i, 1, (float)x, (float)y, (float)w, (float)h);"
    *
    * Set all of the viewports supported by the implementation, but only
    * signal the driver once at the end.
    */
   for (i = 0; i < ctx->Const.MaxViewports; i++)
      set_viewport_no_notify(ctx, i, x, y, width, height);

   if (ctx->Driver.Viewport) {
      /* Many drivers will use this call to check for window size changes
       * and reallocate the z/stencil/accum/etc buffers if needed.
       */
      ctx->Driver.Viewport(ctx);
   }
}


/**
 * Set new viewport parameters and update derived state (the _WindowMap
 * matrix).  Usually called from _mesa_Viewport().
 * 
 * \param ctx GL context.
 * \param idx    Index of the viewport to be updated.
 * \param x, y coordinates of the lower left corner of the viewport rectangle.
 * \param width width of the viewport rectangle.
 * \param height height of the viewport rectangle.
 */
void
_mesa_set_viewport(struct gl_context *ctx, unsigned idx, GLfloat x, GLfloat y,
                    GLfloat width, GLfloat height)
{
   set_viewport_no_notify(ctx, idx, x, y, width, height);

   if (ctx->Driver.Viewport) {
      /* Many drivers will use this call to check for window size changes
       * and reallocate the z/stencil/accum/etc buffers if needed.
       */
      ctx->Driver.Viewport(ctx);
   }
}

void GLAPIENTRY
_mesa_ViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)
{
   int i;
   const struct gl_viewport_inputs *const p = (struct gl_viewport_inputs *) v;
   GET_CURRENT_CONTEXT(ctx);

   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "glViewportArrayv %d %d\n", first, count);

   if ((first + count) > ctx->Const.MaxViewports) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "glViewportArrayv: first (%d) + count (%d) > MaxViewports "
                  "(%d)",
                  first, count, ctx->Const.MaxViewports);
      return;
   }

   /* Verify width & height */
   for (i = 0; i < count; i++) {
      if (p[i].Width < 0 || p[i].Height < 0) {
         _mesa_error(ctx, GL_INVALID_VALUE,
                     "glViewportArrayv: index (%d) width or height < 0 "
                     "(%f, %f)",
                     i + first, p[i].Width, p[i].Height);
         return;
      }
   }

   for (i = 0; i < count; i++)
      set_viewport_no_notify(ctx, i + first,
                             p[i].X, p[i].Y,
                             p[i].Width, p[i].Height);

   if (ctx->Driver.Viewport)
      ctx->Driver.Viewport(ctx);
}

static void
ViewportIndexedf(GLuint index, GLfloat x, GLfloat y,
                 GLfloat w, GLfloat h, const char *function)
{
   GET_CURRENT_CONTEXT(ctx);

   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "%s(%d, %f, %f, %f, %f)\n",
                  function, index, x, y, w, h);

   if (index >= ctx->Const.MaxViewports) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "%s: index (%d) >= MaxViewports (%d)",
                  function, index, ctx->Const.MaxViewports);
      return;
   }

   /* Verify width & height */
   if (w < 0 || h < 0) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "%s: index (%d) width or height < 0 (%f, %f)",
                  function, index, w, h);
      return;
   }

   _mesa_set_viewport(ctx, index, x, y, w, h);
}

void GLAPIENTRY
_mesa_ViewportIndexedf(GLuint index, GLfloat x, GLfloat y,
                       GLfloat w, GLfloat h)
{
   ViewportIndexedf(index, x, y, w, h, "glViewportIndexedf");
}

void GLAPIENTRY
_mesa_ViewportIndexedfv(GLuint index, const GLfloat *v)
{
   ViewportIndexedf(index, v[0], v[1], v[2], v[3], "glViewportIndexedfv");
}

static void
set_depth_range_no_notify(struct gl_context *ctx, unsigned idx,
                          GLclampd nearval, GLclampd farval)
{
   if (ctx->ViewportArray[idx].Near == nearval &&
       ctx->ViewportArray[idx].Far == farval)
      return;

   ctx->ViewportArray[idx].Near = CLAMP(nearval, 0.0, 1.0);
   ctx->ViewportArray[idx].Far = CLAMP(farval, 0.0, 1.0);
   ctx->NewState |= _NEW_VIEWPORT;

#if 1
   /* XXX remove this someday.  Currently the DRI drivers rely on
    * the WindowMap matrix being up to date in the driver's Viewport
    * and DepthRange functions.
    */
   _math_matrix_viewport(&ctx->ViewportArray[idx]._WindowMap,
                         ctx->ViewportArray[idx].X,
                         ctx->ViewportArray[idx].Y,
                         ctx->ViewportArray[idx].Width,
                         ctx->ViewportArray[idx].Height,
                         ctx->ViewportArray[idx].Near,
                         ctx->ViewportArray[idx].Far,
                         ctx->DrawBuffer->_DepthMaxF);
#endif
}

void
_mesa_set_depth_range(struct gl_context *ctx, unsigned idx,
                      GLclampd nearval, GLclampd farval)
{
   set_depth_range_no_notify(ctx, idx, nearval, farval);

   if (ctx->Driver.DepthRange)
      ctx->Driver.DepthRange(ctx);
}

/**
 * Called by glDepthRange
 *
 * \param nearval  specifies the Z buffer value which should correspond to
 *                 the near clip plane
 * \param farval  specifies the Z buffer value which should correspond to
 *                the far clip plane
 */
void GLAPIENTRY
_mesa_DepthRange(GLclampd nearval, GLclampd farval)
{
   unsigned i;
   GET_CURRENT_CONTEXT(ctx);

   FLUSH_VERTICES(ctx, 0);

   if (MESA_VERBOSE&VERBOSE_API)
      _mesa_debug(ctx, "glDepthRange %f %f\n", nearval, farval);

   /* The GL_ARB_viewport_array spec says:
    *
    *     "DepthRange sets the depth range for all viewports to the same
    *     values and is equivalent (assuming no errors are generated) to:
    *
    *     for (uint i = 0; i < MAX_VIEWPORTS; i++)
    *         DepthRangeIndexed(i, n, f);"
    *
    * Set the depth range for all of the viewports supported by the
    * implementation, but only signal the driver once at the end.
    */
   for (i = 0; i < ctx->Const.MaxViewports; i++)
      set_depth_range_no_notify(ctx, i, nearval, farval);

   if (ctx->Driver.DepthRange) {
      ctx->Driver.DepthRange(ctx);
   }
}

void GLAPIENTRY
_mesa_DepthRangef(GLclampf nearval, GLclampf farval)
{
   _mesa_DepthRange(nearval, farval);
}

/**
 * Update a range DepthRange values
 *
 * \param first   starting array index
 * \param count   count of DepthRange items to update
 * \param v       pointer to memory containing
 *                GLclampd near and far clip-plane values
 */
void GLAPIENTRY
_mesa_DepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v)
{
   int i;
   const struct gl_depthrange_inputs *const p =
      (struct gl_depthrange_inputs *) v;
   GET_CURRENT_CONTEXT(ctx);

   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "glDepthRangeArrayv %d %d\n", first, count);

   if ((first + count) > ctx->Const.MaxViewports) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "glDepthRangev: first (%d) + count (%d) >= MaxViewports (%d)",
                  first, count, ctx->Const.MaxViewports);
      return;
   }

   for (i = 0; i < count; i++)
      set_depth_range_no_notify(ctx, i + first, p[i].Near, p[i].Far);

   if (ctx->Driver.DepthRange)
      ctx->Driver.DepthRange(ctx);
}

/**
 * Update a single DepthRange
 *
 * \param index    array index to update
 * \param nearval  specifies the Z buffer value which should correspond to
 *                 the near clip plane
 * \param farval   specifies the Z buffer value which should correspond to
 *                 the far clip plane
 */
void GLAPIENTRY
_mesa_DepthRangeIndexed(GLuint index, GLclampd nearval, GLclampd farval)
{
   GET_CURRENT_CONTEXT(ctx);

   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "glDepthRangeIndexed(%d, %f, %f)\n",
                  index, nearval, farval);

   if (index >= ctx->Const.MaxViewports) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "glDepthRangeIndexed: index (%d) >= MaxViewports (%d)",
                  index, ctx->Const.MaxViewports);
      return;
   }

   _mesa_set_depth_range(ctx, index, nearval, farval);
}

/** 
 * Initialize the context viewport attribute group.
 * \param ctx  the GL context.
 */
void _mesa_init_viewport(struct gl_context *ctx)
{
   GLfloat depthMax = 65535.0F; /* sorf of arbitrary */
   unsigned i;

   /* Note: ctx->Const.MaxViewports may not have been set by the driver yet,
    * so just initialize all of them.
    */
   for (i = 0; i < MAX_VIEWPORTS; i++) {
      /* Viewport group */
      ctx->ViewportArray[i].X = 0;
      ctx->ViewportArray[i].Y = 0;
      ctx->ViewportArray[i].Width = 0;
      ctx->ViewportArray[i].Height = 0;
      ctx->ViewportArray[i].Near = 0.0;
      ctx->ViewportArray[i].Far = 1.0;
      _math_matrix_ctr(&ctx->ViewportArray[i]._WindowMap);

      _math_matrix_viewport(&ctx->ViewportArray[i]._WindowMap, 0, 0, 0, 0,
                            0.0F, 1.0F, depthMax);
   }
}


/** 
 * Free the context viewport attribute group data.
 * \param ctx  the GL context.
 */
void _mesa_free_viewport_data(struct gl_context *ctx)
{
   unsigned i;

   for (i = 0; i < MAX_VIEWPORTS; i++)
      _math_matrix_dtr(&ctx->ViewportArray[i]._WindowMap);
}

@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a32 1
#include "enums.h"
a41 2
   double scale[3], translate[3];

a60 6
   if (ctx->ViewportArray[idx].X == x &&
       ctx->ViewportArray[idx].Width == width &&
       ctx->ViewportArray[idx].Y == y &&
       ctx->ViewportArray[idx].Height == height)
      return;

a71 1
   _mesa_get_viewport_xform(ctx, idx, scale, translate);
d73 7
a79 1
                         scale, translate, ctx->DrawBuffer->_DepthMaxF);
a244 2
   double scale[3], translate[3];

a257 1
   _mesa_get_viewport_xform(ctx, idx, scale, translate);
d259 7
a265 1
                         scale, translate, ctx->DrawBuffer->_DepthMaxF);
a392 3
   ctx->Transform.ClipOrigin = GL_LOWER_LEFT;
   ctx->Transform.ClipDepthMode = GL_NEGATIVE_ONE_TO_ONE;

a396 2
      double scale[3], translate[3];

d406 2
a407 3
      _mesa_get_viewport_xform(ctx, i, scale, translate);
      _math_matrix_viewport(&ctx->ViewportArray[i]._WindowMap,
                            scale, translate, depthMax);
a423 85
extern void GLAPIENTRY
_mesa_ClipControl(GLenum origin, GLenum depth)
{
   GET_CURRENT_CONTEXT(ctx);

   if (MESA_VERBOSE&VERBOSE_API)
      _mesa_debug(ctx, "glClipControl(%s, %s)\n",
	          _mesa_lookup_enum_by_nr(origin),
                  _mesa_lookup_enum_by_nr(depth));

   ASSERT_OUTSIDE_BEGIN_END(ctx);

   if (!ctx->Extensions.ARB_clip_control) {
      _mesa_error(ctx, GL_INVALID_OPERATION, "glClipControl");
      return;
   }

   if (origin != GL_LOWER_LEFT && origin != GL_UPPER_LEFT) {
      _mesa_error(ctx, GL_INVALID_ENUM, "glClipControl");
      return;
   }

   if (depth != GL_NEGATIVE_ONE_TO_ONE && depth != GL_ZERO_TO_ONE) {
      _mesa_error(ctx, GL_INVALID_ENUM, "glClipControl");
      return;
   }

   if (ctx->Transform.ClipOrigin == origin &&
       ctx->Transform.ClipDepthMode == depth)
      return;

   /* Affects transform state and the viewport transform */
   FLUSH_VERTICES(ctx, _NEW_TRANSFORM | _NEW_VIEWPORT);

   if (ctx->Transform.ClipOrigin != origin) {
      ctx->Transform.ClipOrigin = origin;

      /* Affects the winding order of the front face. */
      ctx->NewState |= _NEW_POLYGON;

      if (ctx->Driver.FrontFace)
         ctx->Driver.FrontFace(ctx, ctx->Polygon.FrontFace);
   }

   if (ctx->Transform.ClipDepthMode != depth) {
      ctx->Transform.ClipDepthMode = depth;

      if (ctx->Driver.DepthRange)
         ctx->Driver.DepthRange(ctx);
   }
}

/**
 * Computes the scaling and the translation part of the
 * viewport transform matrix of the \param i-th viewport
 * and writes that into \param scale and \param translate.
 */
void
_mesa_get_viewport_xform(struct gl_context *ctx, unsigned i,
                         double scale[3], double translate[3])
{
   double x = ctx->ViewportArray[i].X;
   double y = ctx->ViewportArray[i].Y;
   double half_width = 0.5*ctx->ViewportArray[i].Width;
   double half_height = 0.5*ctx->ViewportArray[i].Height;
   double n = ctx->ViewportArray[i].Near;
   double f = ctx->ViewportArray[i].Far;

   scale[0] = half_width;
   translate[0] = half_width + x;
   if (ctx->Transform.ClipOrigin == GL_UPPER_LEFT) {
      scale[1] = -half_height;
      translate[1] = half_height - y;
   } else {
      scale[1] = half_height;
      translate[1] = half_height + y;
   }
   if (ctx->Transform.ClipDepthMode == GL_NEGATIVE_ONE_TO_ONE) {
      scale[2] = 0.5*(f - n);
      translate[2] = 0.5*(n + f);
   } else {
      scale[2] = f - n;
      translate[2] = n;
   }
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d33 1
d43 2
d64 6
d81 1
d83 1
a83 7
                         ctx->ViewportArray[idx].X,
                         ctx->ViewportArray[idx].Y,
                         ctx->ViewportArray[idx].Width,
                         ctx->ViewportArray[idx].Height,
                         ctx->ViewportArray[idx].Near,
                         ctx->ViewportArray[idx].Far,
                         ctx->DrawBuffer->_DepthMaxF);
d249 2
d264 1
d266 1
a266 7
                         ctx->ViewportArray[idx].X,
                         ctx->ViewportArray[idx].Y,
                         ctx->ViewportArray[idx].Width,
                         ctx->ViewportArray[idx].Height,
                         ctx->ViewportArray[idx].Near,
                         ctx->ViewportArray[idx].Far,
                         ctx->DrawBuffer->_DepthMaxF);
d394 3
d401 2
d412 3
a414 2
      _math_matrix_viewport(&ctx->ViewportArray[i]._WindowMap, 0, 0, 0, 0,
                            0.0F, 1.0F, depthMax);
d431 85
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d37 54
d102 1
d105 30
a134 1
   _mesa_set_viewport(ctx, x, y, width, height);
d143 1
d149 2
a150 2
_mesa_set_viewport(struct gl_context *ctx, GLint x, GLint y,
                    GLsizei width, GLsizei height)
d152 17
d170 46
a215 1
      _mesa_debug(ctx, "glViewport %d %d %d %d\n", x, y, width, height);
d217 5
a221 3
   if (width < 0 || height < 0) {
      _mesa_error(ctx,  GL_INVALID_VALUE,
                   "glViewport(%d, %d, %d, %d)", x, y, width, height);
d225 23
a247 3
   /* clamp width and height to the implementation dependent range */
   width  = MIN2(width, (GLsizei) ctx->Const.MaxViewportWidth);
   height = MIN2(height, (GLsizei) ctx->Const.MaxViewportHeight);
d249 2
a250 4
   ctx->Viewport.X = x;
   ctx->Viewport.Width = width;
   ctx->Viewport.Y = y;
   ctx->Viewport.Height = height;
d258 7
a264 4
   _math_matrix_viewport(&ctx->Viewport._WindowMap,
                         ctx->Viewport.X, ctx->Viewport.Y,
                         ctx->Viewport.Width, ctx->Viewport.Height,
                         ctx->Viewport.Near, ctx->Viewport.Far,
d267 1
d269 8
a276 6
   if (ctx->Driver.Viewport) {
      /* Many drivers will use this call to check for window size changes
       * and reallocate the z/stencil/accum/etc buffers if needed.
       */
      ctx->Driver.Viewport(ctx, x, y, width, height);
   }
a278 1

d290 1
d298 10
a307 12
   if (ctx->Viewport.Near == nearval &&
       ctx->Viewport.Far == farval)
      return;

   ctx->Viewport.Near = (GLfloat) CLAMP(nearval, 0.0, 1.0);
   ctx->Viewport.Far = (GLfloat) CLAMP(farval, 0.0, 1.0);
   ctx->NewState |= _NEW_VIEWPORT;

#if 1
   /* XXX remove this someday.  Currently the DRI drivers rely on
    * the WindowMap matrix being up to date in the driver's Viewport
    * and DepthRange functions.
d309 2
a310 6
   _math_matrix_viewport(&ctx->Viewport._WindowMap,
                         ctx->Viewport.X, ctx->Viewport.Y,
                         ctx->Viewport.Width, ctx->Viewport.Height,
                         ctx->Viewport.Near, ctx->Viewport.Far,
                         ctx->DrawBuffer->_DepthMaxF);
#endif
d313 1
a313 1
      ctx->Driver.DepthRange(ctx, nearval, farval);
d323 61
d391 1
d393 12
a404 8
   /* Viewport group */
   ctx->Viewport.X = 0;
   ctx->Viewport.Y = 0;
   ctx->Viewport.Width = 0;
   ctx->Viewport.Height = 0;
   ctx->Viewport.Near = 0.0;
   ctx->Viewport.Far = 1.0;
   _math_matrix_ctr(&ctx->Viewport._WindowMap);
d406 3
a408 2
   _math_matrix_viewport(&ctx->Viewport._WindowMap, 0, 0, 0, 0,
                         0.0F, 1.0F, depthMax);
d418 4
a421 1
   _math_matrix_dtr(&ctx->Viewport._WindowMap);
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.5
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d49 1
a49 1
   ASSERT_OUTSIDE_BEGIN_END_AND_FLUSH(ctx);
d119 2
a120 1
   ASSERT_OUTSIDE_BEGIN_END_AND_FLUSH(ctx);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d34 1
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d63 1
a63 1
_mesa_set_viewport(GLcontext *ctx, GLint x, GLint y,
d148 5
a152 1

d158 1
a158 1
void _mesa_init_viewport(GLcontext *ctx)
d180 1
a180 1
void _mesa_free_viewport_data(GLcontext *ctx)
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d63 1
a63 1
_mesa_set_viewport(struct gl_context *ctx, GLint x, GLint y,
d148 1
a148 5
void GLAPIENTRY
_mesa_DepthRangef(GLclampf nearval, GLclampf farval)
{
   _mesa_DepthRange(nearval, farval);
}
d154 1
a154 1
void _mesa_init_viewport(struct gl_context *ctx)
d176 1
a176 1
void _mesa_free_viewport_data(struct gl_context *ctx)
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
a33 1
#include "mtypes.h"
d48 1
a48 1
   FLUSH_VERTICES(ctx, 0);
d118 1
a118 2

   FLUSH_VERTICES(ctx, 0);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a36 54
static void
set_viewport_no_notify(struct gl_context *ctx, unsigned idx,
                       GLfloat x, GLfloat y,
                       GLfloat width, GLfloat height)
{
   /* clamp width and height to the implementation dependent range */
   width  = MIN2(width, (GLfloat) ctx->Const.MaxViewportWidth);
   height = MIN2(height, (GLfloat) ctx->Const.MaxViewportHeight);

   /* The GL_ARB_viewport_array spec says:
    *
    *     "The location of the viewport's bottom-left corner, given by (x,y),
    *     are clamped to be within the implementation-dependent viewport
    *     bounds range.  The viewport bounds range [min, max] tuple may be
    *     determined by calling GetFloatv with the symbolic constant
    *     VIEWPORT_BOUNDS_RANGE (see section 6.1)."
    */
   if (ctx->Extensions.ARB_viewport_array) {
      x = CLAMP(x,
                ctx->Const.ViewportBounds.Min, ctx->Const.ViewportBounds.Max);
      y = CLAMP(y,
                ctx->Const.ViewportBounds.Min, ctx->Const.ViewportBounds.Max);
   }

   ctx->ViewportArray[idx].X = x;
   ctx->ViewportArray[idx].Width = width;
   ctx->ViewportArray[idx].Y = y;
   ctx->ViewportArray[idx].Height = height;
   ctx->NewState |= _NEW_VIEWPORT;

#if 1
   /* XXX remove this someday.  Currently the DRI drivers rely on
    * the WindowMap matrix being up to date in the driver's Viewport
    * and DepthRange functions.
    */
   _math_matrix_viewport(&ctx->ViewportArray[idx]._WindowMap,
                         ctx->ViewportArray[idx].X,
                         ctx->ViewportArray[idx].Y,
                         ctx->ViewportArray[idx].Width,
                         ctx->ViewportArray[idx].Height,
                         ctx->ViewportArray[idx].Near,
                         ctx->ViewportArray[idx].Far,
                         ctx->DrawBuffer->_DepthMaxF);
#endif
}

struct gl_viewport_inputs {
   GLfloat X, Y;                /**< position */
   GLfloat Width, Height;       /**< size */
};

struct gl_depthrange_inputs {
   GLdouble Near, Far;          /**< Depth buffer range */
};
a47 1
   unsigned i;
d50 1
a50 30

   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "glViewport %d %d %d %d\n", x, y, width, height);

   if (width < 0 || height < 0) {
      _mesa_error(ctx,  GL_INVALID_VALUE,
                   "glViewport(%d, %d, %d, %d)", x, y, width, height);
      return;
   }

   /* The GL_ARB_viewport_array spec says:
    *
    *     "Viewport sets the parameters for all viewports to the same values
    *     and is equivalent (assuming no errors are generated) to:
    *
    *     for (uint i = 0; i < MAX_VIEWPORTS; i++)
    *         ViewportIndexedf(i, 1, (float)x, (float)y, (float)w, (float)h);"
    *
    * Set all of the viewports supported by the implementation, but only
    * signal the driver once at the end.
    */
   for (i = 0; i < ctx->Const.MaxViewports; i++)
      set_viewport_no_notify(ctx, i, x, y, width, height);

   if (ctx->Driver.Viewport) {
      /* Many drivers will use this call to check for window size changes
       * and reallocate the z/stencil/accum/etc buffers if needed.
       */
      ctx->Driver.Viewport(ctx);
   }
a58 1
 * \param idx    Index of the viewport to be updated.
d64 2
a65 2
_mesa_set_viewport(struct gl_context *ctx, unsigned idx, GLfloat x, GLfloat y,
                    GLfloat width, GLfloat height)
a66 17
   set_viewport_no_notify(ctx, idx, x, y, width, height);

   if (ctx->Driver.Viewport) {
      /* Many drivers will use this call to check for window size changes
       * and reallocate the z/stencil/accum/etc buffers if needed.
       */
      ctx->Driver.Viewport(ctx);
   }
}

void GLAPIENTRY
_mesa_ViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)
{
   int i;
   const struct gl_viewport_inputs *const p = (struct gl_viewport_inputs *) v;
   GET_CURRENT_CONTEXT(ctx);

d68 1
a68 1
      _mesa_debug(ctx, "glViewportArrayv %d %d\n", first, count);
d70 3
a72 5
   if ((first + count) > ctx->Const.MaxViewports) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "glViewportArrayv: first (%d) + count (%d) > MaxViewports "
                  "(%d)",
                  first, count, ctx->Const.MaxViewports);
d76 3
a78 36
   /* Verify width & height */
   for (i = 0; i < count; i++) {
      if (p[i].Width < 0 || p[i].Height < 0) {
         _mesa_error(ctx, GL_INVALID_VALUE,
                     "glViewportArrayv: index (%d) width or height < 0 "
                     "(%f, %f)",
                     i + first, p[i].Width, p[i].Height);
         return;
      }
   }

   for (i = 0; i < count; i++)
      set_viewport_no_notify(ctx, i + first,
                             p[i].X, p[i].Y,
                             p[i].Width, p[i].Height);

   if (ctx->Driver.Viewport)
      ctx->Driver.Viewport(ctx);
}

static void
ViewportIndexedf(GLuint index, GLfloat x, GLfloat y,
                 GLfloat w, GLfloat h, const char *function)
{
   GET_CURRENT_CONTEXT(ctx);

   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "%s(%d, %f, %f, %f, %f)\n",
                  function, index, x, y, w, h);

   if (index >= ctx->Const.MaxViewports) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "%s: index (%d) >= MaxViewports (%d)",
                  function, index, ctx->Const.MaxViewports);
      return;
   }
d80 4
a83 34
   /* Verify width & height */
   if (w < 0 || h < 0) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "%s: index (%d) width or height < 0 (%f, %f)",
                  function, index, w, h);
      return;
   }

   _mesa_set_viewport(ctx, index, x, y, w, h);
}

void GLAPIENTRY
_mesa_ViewportIndexedf(GLuint index, GLfloat x, GLfloat y,
                       GLfloat w, GLfloat h)
{
   ViewportIndexedf(index, x, y, w, h, "glViewportIndexedf");
}

void GLAPIENTRY
_mesa_ViewportIndexedfv(GLuint index, const GLfloat *v)
{
   ViewportIndexedf(index, v[0], v[1], v[2], v[3], "glViewportIndexedfv");
}

static void
set_depth_range_no_notify(struct gl_context *ctx, unsigned idx,
                          GLclampd nearval, GLclampd farval)
{
   if (ctx->ViewportArray[idx].Near == nearval &&
       ctx->ViewportArray[idx].Far == farval)
      return;

   ctx->ViewportArray[idx].Near = CLAMP(nearval, 0.0, 1.0);
   ctx->ViewportArray[idx].Far = CLAMP(farval, 0.0, 1.0);
d91 4
a94 7
   _math_matrix_viewport(&ctx->ViewportArray[idx]._WindowMap,
                         ctx->ViewportArray[idx].X,
                         ctx->ViewportArray[idx].Y,
                         ctx->ViewportArray[idx].Width,
                         ctx->ViewportArray[idx].Height,
                         ctx->ViewportArray[idx].Near,
                         ctx->ViewportArray[idx].Far,
d97 7
a105 9
void
_mesa_set_depth_range(struct gl_context *ctx, unsigned idx,
                      GLclampd nearval, GLclampd farval)
{
   set_depth_range_no_notify(ctx, idx, nearval, farval);

   if (ctx->Driver.DepthRange)
      ctx->Driver.DepthRange(ctx);
}
a117 1
   unsigned i;
d125 12
a136 10
   /* The GL_ARB_viewport_array spec says:
    *
    *     "DepthRange sets the depth range for all viewports to the same
    *     values and is equivalent (assuming no errors are generated) to:
    *
    *     for (uint i = 0; i < MAX_VIEWPORTS; i++)
    *         DepthRangeIndexed(i, n, f);"
    *
    * Set the depth range for all of the viewports supported by the
    * implementation, but only signal the driver once at the end.
d138 6
a143 2
   for (i = 0; i < ctx->Const.MaxViewports; i++)
      set_depth_range_no_notify(ctx, i, nearval, farval);
d146 1
a146 1
      ctx->Driver.DepthRange(ctx);
a155 61
/**
 * Update a range DepthRange values
 *
 * \param first   starting array index
 * \param count   count of DepthRange items to update
 * \param v       pointer to memory containing
 *                GLclampd near and far clip-plane values
 */
void GLAPIENTRY
_mesa_DepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v)
{
   int i;
   const struct gl_depthrange_inputs *const p =
      (struct gl_depthrange_inputs *) v;
   GET_CURRENT_CONTEXT(ctx);

   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "glDepthRangeArrayv %d %d\n", first, count);

   if ((first + count) > ctx->Const.MaxViewports) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "glDepthRangev: first (%d) + count (%d) >= MaxViewports (%d)",
                  first, count, ctx->Const.MaxViewports);
      return;
   }

   for (i = 0; i < count; i++)
      set_depth_range_no_notify(ctx, i + first, p[i].Near, p[i].Far);

   if (ctx->Driver.DepthRange)
      ctx->Driver.DepthRange(ctx);
}

/**
 * Update a single DepthRange
 *
 * \param index    array index to update
 * \param nearval  specifies the Z buffer value which should correspond to
 *                 the near clip plane
 * \param farval   specifies the Z buffer value which should correspond to
 *                 the far clip plane
 */
void GLAPIENTRY
_mesa_DepthRangeIndexed(GLuint index, GLclampd nearval, GLclampd farval)
{
   GET_CURRENT_CONTEXT(ctx);

   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "glDepthRangeIndexed(%d, %f, %f)\n",
                  index, nearval, farval);

   if (index >= ctx->Const.MaxViewports) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "glDepthRangeIndexed: index (%d) >= MaxViewports (%d)",
                  index, ctx->Const.MaxViewports);
      return;
   }

   _mesa_set_depth_range(ctx, index, nearval, farval);
}

a162 1
   unsigned i;
d164 8
a171 12
   /* Note: ctx->Const.MaxViewports may not have been set by the driver yet,
    * so just initialize all of them.
    */
   for (i = 0; i < MAX_VIEWPORTS; i++) {
      /* Viewport group */
      ctx->ViewportArray[i].X = 0;
      ctx->ViewportArray[i].Y = 0;
      ctx->ViewportArray[i].Width = 0;
      ctx->ViewportArray[i].Height = 0;
      ctx->ViewportArray[i].Near = 0.0;
      ctx->ViewportArray[i].Far = 1.0;
      _math_matrix_ctr(&ctx->ViewportArray[i]._WindowMap);
d173 2
a174 3
      _math_matrix_viewport(&ctx->ViewportArray[i]._WindowMap, 0, 0, 0, 0,
                            0.0F, 1.0F, depthMax);
   }
d184 1
a184 4
   unsigned i;

   for (i = 0; i < MAX_VIEWPORTS; i++)
      _math_matrix_dtr(&ctx->ViewportArray[i]._WindowMap);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a32 1
#include "enums.h"
a41 2
   double scale[3], translate[3];

a60 6
   if (ctx->ViewportArray[idx].X == x &&
       ctx->ViewportArray[idx].Width == width &&
       ctx->ViewportArray[idx].Y == y &&
       ctx->ViewportArray[idx].Height == height)
      return;

a71 1
   _mesa_get_viewport_xform(ctx, idx, scale, translate);
d73 7
a79 1
                         scale, translate, ctx->DrawBuffer->_DepthMaxF);
a244 2
   double scale[3], translate[3];

a257 1
   _mesa_get_viewport_xform(ctx, idx, scale, translate);
d259 7
a265 1
                         scale, translate, ctx->DrawBuffer->_DepthMaxF);
a392 3
   ctx->Transform.ClipOrigin = GL_LOWER_LEFT;
   ctx->Transform.ClipDepthMode = GL_NEGATIVE_ONE_TO_ONE;

a396 2
      double scale[3], translate[3];

d406 2
a407 3
      _mesa_get_viewport_xform(ctx, i, scale, translate);
      _math_matrix_viewport(&ctx->ViewportArray[i]._WindowMap,
                            scale, translate, depthMax);
a423 85
extern void GLAPIENTRY
_mesa_ClipControl(GLenum origin, GLenum depth)
{
   GET_CURRENT_CONTEXT(ctx);

   if (MESA_VERBOSE&VERBOSE_API)
      _mesa_debug(ctx, "glClipControl(%s, %s)\n",
	          _mesa_lookup_enum_by_nr(origin),
                  _mesa_lookup_enum_by_nr(depth));

   ASSERT_OUTSIDE_BEGIN_END(ctx);

   if (!ctx->Extensions.ARB_clip_control) {
      _mesa_error(ctx, GL_INVALID_OPERATION, "glClipControl");
      return;
   }

   if (origin != GL_LOWER_LEFT && origin != GL_UPPER_LEFT) {
      _mesa_error(ctx, GL_INVALID_ENUM, "glClipControl");
      return;
   }

   if (depth != GL_NEGATIVE_ONE_TO_ONE && depth != GL_ZERO_TO_ONE) {
      _mesa_error(ctx, GL_INVALID_ENUM, "glClipControl");
      return;
   }

   if (ctx->Transform.ClipOrigin == origin &&
       ctx->Transform.ClipDepthMode == depth)
      return;

   /* Affects transform state and the viewport transform */
   FLUSH_VERTICES(ctx, _NEW_TRANSFORM | _NEW_VIEWPORT);

   if (ctx->Transform.ClipOrigin != origin) {
      ctx->Transform.ClipOrigin = origin;

      /* Affects the winding order of the front face. */
      ctx->NewState |= _NEW_POLYGON;

      if (ctx->Driver.FrontFace)
         ctx->Driver.FrontFace(ctx, ctx->Polygon.FrontFace);
   }

   if (ctx->Transform.ClipDepthMode != depth) {
      ctx->Transform.ClipDepthMode = depth;

      if (ctx->Driver.DepthRange)
         ctx->Driver.DepthRange(ctx);
   }
}

/**
 * Computes the scaling and the translation part of the
 * viewport transform matrix of the \param i-th viewport
 * and writes that into \param scale and \param translate.
 */
void
_mesa_get_viewport_xform(struct gl_context *ctx, unsigned i,
                         double scale[3], double translate[3])
{
   double x = ctx->ViewportArray[i].X;
   double y = ctx->ViewportArray[i].Y;
   double half_width = 0.5*ctx->ViewportArray[i].Width;
   double half_height = 0.5*ctx->ViewportArray[i].Height;
   double n = ctx->ViewportArray[i].Near;
   double f = ctx->ViewportArray[i].Far;

   scale[0] = half_width;
   translate[0] = half_width + x;
   if (ctx->Transform.ClipOrigin == GL_UPPER_LEFT) {
      scale[1] = -half_height;
      translate[1] = half_height - y;
   } else {
      scale[1] = half_height;
      translate[1] = half_height + y;
   }
   if (ctx->Transform.ClipDepthMode == GL_NEGATIVE_ONE_TO_ONE) {
      scale[2] = 0.5*(f - n);
      translate[2] = 0.5*(n + f);
   } else {
      scale[2] = f - n;
      translate[2] = n;
   }
}
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d33 1
d43 2
d64 6
d81 1
d83 1
a83 7
                         ctx->ViewportArray[idx].X,
                         ctx->ViewportArray[idx].Y,
                         ctx->ViewportArray[idx].Width,
                         ctx->ViewportArray[idx].Height,
                         ctx->ViewportArray[idx].Near,
                         ctx->ViewportArray[idx].Far,
                         ctx->DrawBuffer->_DepthMaxF);
d249 2
d264 1
d266 1
a266 7
                         ctx->ViewportArray[idx].X,
                         ctx->ViewportArray[idx].Y,
                         ctx->ViewportArray[idx].Width,
                         ctx->ViewportArray[idx].Height,
                         ctx->ViewportArray[idx].Near,
                         ctx->ViewportArray[idx].Far,
                         ctx->DrawBuffer->_DepthMaxF);
d394 3
d401 2
d412 3
a414 2
      _math_matrix_viewport(&ctx->ViewportArray[i]._WindowMap, 0, 0, 0, 0,
                            0.0F, 1.0F, depthMax);
d431 85
@


