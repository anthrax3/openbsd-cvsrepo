head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.6
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.4
	v9_2_3:1.1.1.4
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.4
	v9_2_0:1.1.1.4
	OPENBSD_5_4:1.7.0.8
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.2
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.23.05.17.53;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2013.09.05.14.06.26;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.22.20.06.31;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.17.20.26.41;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.02.14.58.21;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.12.21.09.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.50.15;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.50.15;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.31.16;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.46;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.05.13.16.46;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**
 * \file points.c
 * Point operations.
 */

/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


#include "glheader.h"
#include "context.h"
#include "macros.h"
#include "points.h"
#include "mtypes.h"


/**
 * Set current point size.
 * \param size  point diameter in pixels
 * \sa glPointSize().
 */
void GLAPIENTRY
_mesa_PointSize( GLfloat size )
{
   GET_CURRENT_CONTEXT(ctx);

   if (size <= 0.0) {
      _mesa_error( ctx, GL_INVALID_VALUE, "glPointSize" );
      return;
   }

   if (ctx->Point.Size == size)
      return;

   FLUSH_VERTICES(ctx, _NEW_POINT);
   ctx->Point.Size = size;

   if (ctx->Driver.PointSize)
      ctx->Driver.PointSize(ctx, size);
}


void GLAPIENTRY
_mesa_PointParameteri( GLenum pname, GLint param )
{
   GLfloat p[3];
   p[0] = (GLfloat) param;
   p[1] = p[2] = 0.0F;
   _mesa_PointParameterfv(pname, p);
}


void GLAPIENTRY
_mesa_PointParameteriv( GLenum pname, const GLint *params )
{
   GLfloat p[3];
   p[0] = (GLfloat) params[0];
   if (pname == GL_DISTANCE_ATTENUATION_EXT) {
      p[1] = (GLfloat) params[1];
      p[2] = (GLfloat) params[2];
   }
   _mesa_PointParameterfv(pname, p);
}


void GLAPIENTRY
_mesa_PointParameterf( GLenum pname, GLfloat param)
{
   GLfloat p[3];
   p[0] = param;
   p[1] = p[2] = 0.0F;
   _mesa_PointParameterfv(pname, p);
}


void GLAPIENTRY
_mesa_PointParameterfv( GLenum pname, const GLfloat *params)
{
   GET_CURRENT_CONTEXT(ctx);

   /* Drivers that support point sprites must also support point parameters.
    * If point parameters aren't supported, then this function shouldn't even
    * exist.
    */
   ASSERT(!(ctx->Extensions.ARB_point_sprite
            || ctx->Extensions.NV_point_sprite)
          || ctx->Extensions.EXT_point_parameters);

   if (!ctx->Extensions.EXT_point_parameters) {
      _mesa_error(ctx, GL_INVALID_OPERATION,
                  "unsupported function called (unsupported extension)");
      return;
   }

   switch (pname) {
      case GL_DISTANCE_ATTENUATION_EXT:
         if (TEST_EQ_3V(ctx->Point.Params, params))
            return;
         FLUSH_VERTICES(ctx, _NEW_POINT);
         COPY_3V(ctx->Point.Params, params);
         ctx->Point._Attenuated = (ctx->Point.Params[0] != 1.0 ||
                                   ctx->Point.Params[1] != 0.0 ||
                                   ctx->Point.Params[2] != 0.0);
         break;
      case GL_POINT_SIZE_MIN_EXT:
         if (params[0] < 0.0F) {
            _mesa_error( ctx, GL_INVALID_VALUE,
                         "glPointParameterf[v]{EXT,ARB}(param)" );
            return;
         }
         if (ctx->Point.MinSize == params[0])
            return;
         FLUSH_VERTICES(ctx, _NEW_POINT);
         ctx->Point.MinSize = params[0];
         break;
      case GL_POINT_SIZE_MAX_EXT:
         if (params[0] < 0.0F) {
            _mesa_error( ctx, GL_INVALID_VALUE,
                         "glPointParameterf[v]{EXT,ARB}(param)" );
            return;
         }
         if (ctx->Point.MaxSize == params[0])
            return;
         FLUSH_VERTICES(ctx, _NEW_POINT);
         ctx->Point.MaxSize = params[0];
         break;
      case GL_POINT_FADE_THRESHOLD_SIZE_EXT:
         if (params[0] < 0.0F) {
            _mesa_error( ctx, GL_INVALID_VALUE,
                         "glPointParameterf[v]{EXT,ARB}(param)" );
            return;
         }
         if (ctx->Point.Threshold == params[0])
            return;
         FLUSH_VERTICES(ctx, _NEW_POINT);
         ctx->Point.Threshold = params[0];
         break;
      case GL_POINT_SPRITE_R_MODE_NV:
         /* This is one area where ARB_point_sprite and NV_point_sprite
	  * differ.  In ARB_point_sprite the POINT_SPRITE_R_MODE is
	  * always ZERO.  NV_point_sprite adds the S and R modes.
	  */
         if (_mesa_is_desktop_gl(ctx) && ctx->Extensions.NV_point_sprite) {
            GLenum value = (GLenum) params[0];
            if (value != GL_ZERO && value != GL_S && value != GL_R) {
               _mesa_error(ctx, GL_INVALID_VALUE,
                           "glPointParameterf[v]{EXT,ARB}(param)");
               return;
            }
            if (ctx->Point.SpriteRMode == value)
               return;
            FLUSH_VERTICES(ctx, _NEW_POINT);
            ctx->Point.SpriteRMode = value;
         }
         else {
            _mesa_error(ctx, GL_INVALID_ENUM,
                        "glPointParameterf[v]{EXT,ARB}(pname)");
            return;
         }
         break;
      case GL_POINT_SPRITE_COORD_ORIGIN:
	 /* GL_POINT_SPRITE_COORD_ORIGIN was added to point sprites when the
	  * extension was merged into OpenGL 2.0.
	  */
         if ((ctx->API == API_OPENGL_COMPAT && ctx->Version >= 20)
             || ctx->API == API_OPENGL_CORE) {
            GLenum value = (GLenum) params[0];
            if (value != GL_LOWER_LEFT && value != GL_UPPER_LEFT) {
               _mesa_error(ctx, GL_INVALID_VALUE,
                           "glPointParameterf[v]{EXT,ARB}(param)");
               return;
            }
            if (ctx->Point.SpriteOrigin == value)
               return;
            FLUSH_VERTICES(ctx, _NEW_POINT);
            ctx->Point.SpriteOrigin = value;
         }
         else {
            _mesa_error(ctx, GL_INVALID_ENUM,
                        "glPointParameterf[v]{EXT,ARB}(pname)");
            return;
         }
         break;
      default:
         _mesa_error( ctx, GL_INVALID_ENUM,
                      "glPointParameterf[v]{EXT,ARB}(pname)" );
         return;
   }

   if (ctx->Driver.PointParameterfv)
      (*ctx->Driver.PointParameterfv)(ctx, pname, params);
}



/**
 * Initialize the context point state.
 *
 * \param ctx GL context.
 *
 * Initializes __struct gl_contextRec::Point and point related constants in
 * __struct gl_contextRec::Const.
 */
void
_mesa_init_point(struct gl_context *ctx)
{
   GLuint i;

   ctx->Point.SmoothFlag = GL_FALSE;
   ctx->Point.Size = 1.0;
   ctx->Point.Params[0] = 1.0;
   ctx->Point.Params[1] = 0.0;
   ctx->Point.Params[2] = 0.0;
   ctx->Point._Attenuated = GL_FALSE;
   ctx->Point.MinSize = 0.0;
   ctx->Point.MaxSize
      = MAX2(ctx->Const.MaxPointSize, ctx->Const.MaxPointSizeAA);
   ctx->Point.Threshold = 1.0;

   /* Page 403 (page 423 of the PDF) of the OpenGL 3.0 spec says:
    *
    *     "Non-sprite points (section 3.4) - Enable/Disable targets
    *     POINT_SMOOTH and POINT_SPRITE, and all associated state. Point
    *     rasterization is always performed as though POINT_SPRITE were
    *     enabled."
    *
    * In a core context, the state will default to true, and the setters and
    * getters are disabled.
    */
   ctx->Point.PointSprite = (ctx->API == API_OPENGL_CORE ||
                             ctx->API == API_OPENGLES2);

   ctx->Point.SpriteRMode = GL_ZERO; /* GL_NV_point_sprite (only!) */
   ctx->Point.SpriteOrigin = GL_UPPER_LEFT; /* GL_ARB_point_sprite */
   for (i = 0; i < Elements(ctx->Point.CoordReplace); i++) {
      ctx->Point.CoordReplace[i] = GL_FALSE; /* GL_ARB/NV_point_sprite */
   }
}
@


1.8
log
@Merge Mesa 9.2.0
@
text
@@


1.7
log
@Merge Mesa 7.10.3
@
text
@a7 1
 * Version:  7.1
d24 4
a27 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
a46 1
   ASSERT_OUTSIDE_BEGIN_END(ctx);
a63 3
#if _HAVE_FULL_GL


d101 14
a114 1
   ASSERT_OUTSIDE_BEGIN_END(ctx);
d118 1
a118 17
         if (ctx->Extensions.EXT_point_parameters) {
            if (TEST_EQ_3V(ctx->Point.Params, params))
	       return;
	    FLUSH_VERTICES(ctx, _NEW_POINT);
            COPY_3V(ctx->Point.Params, params);
            ctx->Point._Attenuated = (ctx->Point.Params[0] != 1.0 ||
                                      ctx->Point.Params[1] != 0.0 ||
                                      ctx->Point.Params[2] != 0.0);

            if (ctx->Point._Attenuated)
               ctx->_TriangleCaps |= DD_POINT_ATTEN;
            else
               ctx->_TriangleCaps &= ~DD_POINT_ATTEN;
         }
         else {
            _mesa_error(ctx, GL_INVALID_ENUM,
                        "glPointParameterf[v]{EXT,ARB}(pname)");
d120 5
a124 1
         }
d127 4
a130 10
         if (ctx->Extensions.EXT_point_parameters) {
            if (params[0] < 0.0F) {
               _mesa_error( ctx, GL_INVALID_VALUE,
                            "glPointParameterf[v]{EXT,ARB}(param)" );
               return;
            }
            if (ctx->Point.MinSize == params[0])
               return;
            FLUSH_VERTICES(ctx, _NEW_POINT);
            ctx->Point.MinSize = params[0];
d132 1
a132 3
         else {
            _mesa_error(ctx, GL_INVALID_ENUM,
                        "glPointParameterf[v]{EXT,ARB}(pname)");
d134 2
a135 1
         }
d138 4
a141 10
         if (ctx->Extensions.EXT_point_parameters) {
            if (params[0] < 0.0F) {
               _mesa_error( ctx, GL_INVALID_VALUE,
                            "glPointParameterf[v]{EXT,ARB}(param)" );
               return;
            }
            if (ctx->Point.MaxSize == params[0])
               return;
            FLUSH_VERTICES(ctx, _NEW_POINT);
            ctx->Point.MaxSize = params[0];
d143 1
a143 3
         else {
            _mesa_error(ctx, GL_INVALID_ENUM,
                        "glPointParameterf[v]{EXT,ARB}(pname)");
d145 2
a146 1
         }
d149 4
a152 10
         if (ctx->Extensions.EXT_point_parameters) {
            if (params[0] < 0.0F) {
               _mesa_error( ctx, GL_INVALID_VALUE,
                            "glPointParameterf[v]{EXT,ARB}(param)" );
               return;
            }
            if (ctx->Point.Threshold == params[0])
               return;
            FLUSH_VERTICES(ctx, _NEW_POINT);
            ctx->Point.Threshold = params[0];
d154 1
a154 3
         else {
            _mesa_error(ctx, GL_INVALID_ENUM,
                        "glPointParameterf[v]{EXT,ARB}(pname)");
d156 2
a157 1
         }
d164 1
a164 1
         if (ctx->Extensions.NV_point_sprite) {
d183 2
a184 4
	 /* This is not completely correct.  GL_POINT_SPRITE_COORD_ORIGIN was
	  * added to point sprites when the extension was merged into OpenGL
	  * 2.0.  It is expected that an implementation supporting OpenGL 1.4
	  * and GL_ARB_point_sprite will generate an error here.
d186 2
a187 1
         if (ctx->Extensions.ARB_point_sprite) {
a213 1
#endif
d240 14
a253 1
   ctx->Point.PointSprite = GL_FALSE; /* GL_ARB/NV_point_sprite */
@


1.6
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d248 2
a249 2
 * Initializes __GLcontextRec::Point and point related constants in
 * __GLcontextRec::Const.
d252 1
a252 1
_mesa_init_point(GLcontext *ctx)
@


1.5
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a34 1
#include "texstate.h"
d71 4
a74 2
   const GLfloat value = (GLfloat) param;
   _mesa_PointParameterfv(pname, &value);
d94 4
a97 1
   _mesa_PointParameterfv(pname, &param);
d207 6
a212 1
         if (ctx->Extensions.ARB_point_sprite || ctx->Extensions.NV_point_sprite) {
d269 1
a269 1
   for (i = 0; i < MAX_TEXTURE_COORD_UNITS; i++) {
@


1.4
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d68 1
a68 3
/*
 * Added by GL_NV_point_sprite
 */
d70 1
a70 1
_mesa_PointParameteriNV( GLenum pname, GLint param )
d73 1
a73 1
   _mesa_PointParameterfvEXT(pname, &value);
a76 3
/*
 * Added by GL_NV_point_sprite
 */
d78 1
a78 1
_mesa_PointParameterivNV( GLenum pname, const GLint *params )
d86 1
a86 1
   _mesa_PointParameterfvEXT(pname, p);
a89 4

/*
 * Same for both GL_EXT_point_parameters and GL_ARB_point_parameters.
 */
d91 1
a91 1
_mesa_PointParameterfEXT( GLenum pname, GLfloat param)
d93 1
a93 1
   _mesa_PointParameterfvEXT(pname, &param);
a96 4

/*
 * Same for both GL_EXT_point_parameters and GL_ARB_point_parameters.
 */
d98 1
a98 1
_mesa_PointParameterfvEXT( GLenum pname, const GLfloat *params)
d203 1
a203 1
         if (ctx->Extensions.ARB_point_sprite) {
d260 1
a260 1
   for (i = 0; i < MAX_TEXTURE_UNITS; i++) {
@


1.3
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d8 1
a8 1
 * Version:  7.0.3
a59 4
   /* _Size is only used for non-attenuated path */
   ctx->Point._Size = CLAMP(ctx->Point.Size,
			    ctx->Point.MinSize,
			    ctx->Point.MaxSize);
a122 1

a148 4
            /* re-clamp _Size */
            ctx->Point._Size = CLAMP(ctx->Point.Size,
                                     ctx->Point.MinSize,
                                     ctx->Point.MaxSize);
a166 4
            /* re-clamp _Size */
            ctx->Point._Size = CLAMP(ctx->Point.Size,
                                     ctx->Point.MinSize,
                                     ctx->Point.MaxSize);
a261 1
   ctx->Point._Size = 1.0;
@


1.2
log
@Update to Mesa 7.0.2. Tested by naddy@@ (full ports build), simon@@
and oga@@ (with dri enabled).
@
text
@d8 1
a8 1
 * Version:  7.0.1
d60 1
d154 4
d176 4
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
 * Version:  6.5
d10 1
a10 1
 * Copyright (C) 1999-2005  Brian Paul   All Rights Reserved.
d60 3
d88 7
a94 2
   const GLfloat value = (GLfloat) params[0];
   _mesa_PointParameterfvEXT(pname, &value);
d126 9
a247 30



/**
 * Update derived point-related state.
 */
void
_mesa_update_point(GLcontext *ctx)
{
   /* clamp to user-specified limits now, clamp to ctx->Const.Min/Max
    * limits during rasterization.
    */
   ctx->Point._Size = CLAMP(ctx->Point.Size,
			    ctx->Point.MinSize,
			    ctx->Point.MaxSize);

   if (ctx->Point._Size == 1.0F)
      ctx->_TriangleCaps &= ~DD_POINT_SIZE;
   else
      ctx->_TriangleCaps |= DD_POINT_SIZE;

   ctx->Point._Attenuated = (ctx->Point.Params[0] != 1.0 ||
                             ctx->Point.Params[1] != 0.0 ||
                             ctx->Point.Params[2] != 0.0);

   if (ctx->Point._Attenuated)
      ctx->_TriangleCaps |= DD_POINT_ATTEN;
   else
      ctx->_TriangleCaps &= ~DD_POINT_ATTEN;
}
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Mesa 7.0.1
@
text
@d8 1
a8 1
 * Version:  7.0.1
d10 1
a10 1
 * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
a59 3
   ctx->Point._Size = CLAMP(ctx->Point.Size,
			    ctx->Point.MinSize,
			    ctx->Point.MaxSize);
d85 2
a86 7
   GLfloat p[3];
   p[0] = (GLfloat) params[0];
   if (pname == GL_DISTANCE_ATTENUATION_EXT) {
      p[1] = (GLfloat) params[1];
      p[2] = (GLfloat) params[2];
   }
   _mesa_PointParameterfvEXT(pname, p);
a117 3
            ctx->Point._Attenuated = (ctx->Point.Params[0] != 1.0 ||
                                      ctx->Point.Params[1] != 0.0 ||
                                      ctx->Point.Params[2] != 0.0);
d231 30
@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@d8 1
a8 1
 * Version:  7.1
d35 1
d60 3
d71 3
a73 1

d75 1
a75 1
_mesa_PointParameteri( GLenum pname, GLint param )
d77 2
a78 4
   GLfloat p[3];
   p[0] = (GLfloat) param;
   p[1] = p[2] = 0.0F;
   _mesa_PointParameterfv(pname, p);
d82 3
d86 1
a86 1
_mesa_PointParameteriv( GLenum pname, const GLint *params )
d94 1
a94 1
   _mesa_PointParameterfv(pname, p);
d98 4
d103 1
a103 1
_mesa_PointParameterf( GLenum pname, GLfloat param)
d105 1
a105 4
   GLfloat p[3];
   p[0] = param;
   p[1] = p[2] = 0.0F;
   _mesa_PointParameterfv(pname, p);
d109 4
d114 1
a114 1
_mesa_PointParameterfv( GLenum pname, const GLfloat *params)
a128 5

            if (ctx->Point._Attenuated)
               ctx->_TriangleCaps |= DD_POINT_ATTEN;
            else
               ctx->_TriangleCaps &= ~DD_POINT_ATTEN;
a213 5
	 /* This is not completely correct.  GL_POINT_SPRITE_COORD_ORIGIN was
	  * added to point sprites when the extension was merged into OpenGL
	  * 2.0.  It is expected that an implementation supporting OpenGL 1.4
	  * and GL_ARB_point_sprite will generate an error here.
	  */
d250 2
a251 2
 * Initializes __struct gl_contextRec::Point and point related constants in
 * __struct gl_contextRec::Const.
d254 1
a254 1
_mesa_init_point(struct gl_context *ctx)
d260 1
d272 1
a272 1
   for (i = 0; i < Elements(ctx->Point.CoordReplace); i++) {
@


1.1.1.4
log
@Import Mesa 9.2.0
@
text
@d8 1
d25 3
a27 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d47 1
d65 3
d105 1
a105 14

   /* Drivers that support point sprites must also support point parameters.
    * If point parameters aren't supported, then this function shouldn't even
    * exist.
    */
   ASSERT(!(ctx->Extensions.ARB_point_sprite
            || ctx->Extensions.NV_point_sprite)
          || ctx->Extensions.EXT_point_parameters);

   if (!ctx->Extensions.EXT_point_parameters) {
      _mesa_error(ctx, GL_INVALID_OPERATION,
                  "unsupported function called (unsupported extension)");
      return;
   }
d109 17
a125 1
         if (TEST_EQ_3V(ctx->Point.Params, params))
d127 1
a127 5
         FLUSH_VERTICES(ctx, _NEW_POINT);
         COPY_3V(ctx->Point.Params, params);
         ctx->Point._Attenuated = (ctx->Point.Params[0] != 1.0 ||
                                   ctx->Point.Params[1] != 0.0 ||
                                   ctx->Point.Params[2] != 0.0);
d130 14
a143 3
         if (params[0] < 0.0F) {
            _mesa_error( ctx, GL_INVALID_VALUE,
                         "glPointParameterf[v]{EXT,ARB}(param)" );
a145 4
         if (ctx->Point.MinSize == params[0])
            return;
         FLUSH_VERTICES(ctx, _NEW_POINT);
         ctx->Point.MinSize = params[0];
d148 14
a161 3
         if (params[0] < 0.0F) {
            _mesa_error( ctx, GL_INVALID_VALUE,
                         "glPointParameterf[v]{EXT,ARB}(param)" );
a163 4
         if (ctx->Point.MaxSize == params[0])
            return;
         FLUSH_VERTICES(ctx, _NEW_POINT);
         ctx->Point.MaxSize = params[0];
d166 14
a179 3
         if (params[0] < 0.0F) {
            _mesa_error( ctx, GL_INVALID_VALUE,
                         "glPointParameterf[v]{EXT,ARB}(param)" );
a181 4
         if (ctx->Point.Threshold == params[0])
            return;
         FLUSH_VERTICES(ctx, _NEW_POINT);
         ctx->Point.Threshold = params[0];
d188 1
a188 1
         if (_mesa_is_desktop_gl(ctx) && ctx->Extensions.NV_point_sprite) {
d207 4
a210 2
	 /* GL_POINT_SPRITE_COORD_ORIGIN was added to point sprites when the
	  * extension was merged into OpenGL 2.0.
d212 1
a212 2
         if ((ctx->API == API_OPENGL_COMPAT && ctx->Version >= 20)
             || ctx->API == API_OPENGL_CORE) {
d239 1
d266 1
a266 14

   /* Page 403 (page 423 of the PDF) of the OpenGL 3.0 spec says:
    *
    *     "Non-sprite points (section 3.4) - Enable/Disable targets
    *     POINT_SMOOTH and POINT_SPRITE, and all associated state. Point
    *     rasterization is always performed as though POINT_SPRITE were
    *     enabled."
    *
    * In a core context, the state will default to true, and the setters and
    * getters are disabled.
    */
   ctx->Point.PointSprite = (ctx->API == API_OPENGL_CORE ||
                             ctx->API == API_OPENGLES2);

@


