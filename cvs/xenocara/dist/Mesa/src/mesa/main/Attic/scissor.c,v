head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.53;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.5;
commitid	WPD6rgPryPkvXOr9;

1.5
date	2013.09.05.14.06.28;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2012.08.17.13.58.19;	author mpi;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.22.20.06.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.17.20.26.41;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.46;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.16.48;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.04;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


#include "main/glheader.h"
#include "main/context.h"
#include "main/mtypes.h"
#include "main/scissor.h"


/**
 * Set scissor rectangle data directly in ScissorArray
 *
 * This is an internal function that performs no error checking on the
 * supplied data.  It also does \b not call \c dd_function_table::Scissor.
 *
 * \sa _mesa_set_scissor
 */
static void
set_scissor_no_notify(struct gl_context *ctx, unsigned idx,
                      GLint x, GLint y, GLsizei width, GLsizei height)
{
   if (x == ctx->Scissor.ScissorArray[idx].X &&
       y == ctx->Scissor.ScissorArray[idx].Y &&
       width == ctx->Scissor.ScissorArray[idx].Width &&
       height == ctx->Scissor.ScissorArray[idx].Height)
      return;

   FLUSH_VERTICES(ctx, _NEW_SCISSOR);
   ctx->Scissor.ScissorArray[idx].X = x;
   ctx->Scissor.ScissorArray[idx].Y = y;
   ctx->Scissor.ScissorArray[idx].Width = width;
   ctx->Scissor.ScissorArray[idx].Height = height;
}

/**
 * Called via glScissor
 */
void GLAPIENTRY
_mesa_Scissor( GLint x, GLint y, GLsizei width, GLsizei height )
{
   unsigned i;
   GET_CURRENT_CONTEXT(ctx);

   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "glScissor %d %d %d %d\n", x, y, width, height);

   if (width < 0 || height < 0) {
      _mesa_error( ctx, GL_INVALID_VALUE, "glScissor" );
      return;
   }

   /* The GL_ARB_viewport_array spec says:
    *
    *     "Scissor sets the scissor rectangle for all viewports to the same
    *     values and is equivalent (assuming no errors are generated) to:
    *
    *     for (uint i = 0; i < MAX_VIEWPORTS; i++) {
    *         ScissorIndexed(i, left, bottom, width, height);
    *     }"
    *
    * Set the scissor rectangle for all of the viewports supported by the
    * implementation, but only signal the driver once at the end.
    */
   for (i = 0; i < ctx->Const.MaxViewports; i++)
      set_scissor_no_notify(ctx, i, x, y, width, height);

   if (ctx->Driver.Scissor)
      ctx->Driver.Scissor(ctx);
}


/**
 * Define the scissor box.
 *
 * \param x, y coordinates of the scissor box lower-left corner.
 * \param width width of the scissor box.
 * \param height height of the scissor box.
 *
 * \sa glScissor().
 *
 * Verifies the parameters and updates __struct gl_contextRec::Scissor. On a
 * change flushes the vertices and notifies the driver via
 * the dd_function_table::Scissor callback.
 */
void
_mesa_set_scissor(struct gl_context *ctx, unsigned idx,
                  GLint x, GLint y, GLsizei width, GLsizei height)
{
   set_scissor_no_notify(ctx, idx, x, y, width, height);

   if (ctx->Driver.Scissor)
      ctx->Driver.Scissor(ctx);
}

/**
 * Define count scissor boxes starting at index.
 *
 * \param index  index of first scissor records to set
 * \param count  number of scissor records to set
 * \param x, y   pointer to array of struct gl_scissor_rects
 *
 * \sa glScissorArrayv().
 *
 * Verifies the parameters and call set_scissor_no_notify to do the work.
 */
void GLAPIENTRY
_mesa_ScissorArrayv(GLuint first, GLsizei count, const GLint *v)
{
   int i;
   struct gl_scissor_rect *p = (struct gl_scissor_rect *) v;
   GET_CURRENT_CONTEXT(ctx);

   if ((first + count) > ctx->Const.MaxViewports) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "glScissorArrayv: first (%d) + count (%d) >= MaxViewports (%d)",
                  first, count, ctx->Const.MaxViewports);
      return;
   }

   /* Verify width & height */
   for (i = 0; i < count; i++) {
      if (p[i].Width < 0 || p[i].Height < 0) {
         _mesa_error(ctx, GL_INVALID_VALUE,
                     "glScissorArrayv: index (%d) width or height < 0 (%d, %d)",
                     i, p[i].Width, p[i].Height);
         return;
      }
   }

   for (i = 0; i < count; i++)
      set_scissor_no_notify(ctx, i + first,
                            p[i].X, p[i].Y, p[i].Width, p[i].Height);

   if (ctx->Driver.Scissor)
      ctx->Driver.Scissor(ctx);
}

/**
 * Define the scissor box.
 *
 * \param index  index of scissor records to set
 * \param x, y   coordinates of the scissor box lower-left corner.
 * \param width  width of the scissor box.
 * \param height height of the scissor box.
 *
 * Verifies the parameters call set_scissor_no_notify to do the work.
 */
static void
ScissorIndexed(GLuint index, GLint left, GLint bottom,
               GLsizei width, GLsizei height, const char *function)
{
   GET_CURRENT_CONTEXT(ctx);

   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "%s(%d, %d, %d, %d, %d)\n",
                  function, index, left, bottom, width, height);

   if (index >= ctx->Const.MaxViewports) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "%s: index (%d) >= MaxViewports (%d)",
                  function, index, ctx->Const.MaxViewports);
      return;
   }

   if (width < 0 || height < 0) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "%s: index (%d) width or height < 0 (%d, %d)",
                  function, index, width, height);
      return;
   }

   set_scissor_no_notify(ctx, index, left, bottom, width, height);

   if (ctx->Driver.Scissor)
      ctx->Driver.Scissor(ctx);
}

void GLAPIENTRY
_mesa_ScissorIndexed(GLuint index, GLint left, GLint bottom,
                     GLsizei width, GLsizei height)
{
   ScissorIndexed(index, left, bottom, width, height, "glScissorIndexd");
}

void GLAPIENTRY
_mesa_ScissorIndexedv(GLuint index, const GLint *v)
{
   ScissorIndexed(index, v[0], v[1], v[2], v[3], "glScissorIndexdv");
}

/**
 * Initialize the context's scissor state.
 * \param ctx  the GL context.
 */
void
_mesa_init_scissor(struct gl_context *ctx)
{
   unsigned i;

   /* Scissor group */
   ctx->Scissor.EnableFlags = 0;

   /* Note: ctx->Const.MaxViewports may not have been set by the driver yet,
    * so just initialize all of them.
    */
   for (i = 0; i < MAX_VIEWPORTS; i++)
      set_scissor_no_notify(ctx, i, 0, 0, 0, 0);
}
@


1.6
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.5
log
@Merge Mesa 9.2.0
@
text
@d33 25
d63 1
d74 17
a90 1
   _mesa_set_scissor(ctx, x, y, width, height);
d108 1
a108 1
_mesa_set_scissor(struct gl_context *ctx, 
d111 73
a183 4
   if (x == ctx->Scissor.X &&
       y == ctx->Scissor.Y &&
       width == ctx->Scissor.Width &&
       height == ctx->Scissor.Height)
d185 8
d194 1
a194 5
   FLUSH_VERTICES(ctx, _NEW_SCISSOR);
   ctx->Scissor.X = x;
   ctx->Scissor.Y = y;
   ctx->Scissor.Width = width;
   ctx->Scissor.Height = height;
d197 1
a197 1
      ctx->Driver.Scissor( ctx, x, y, width, height );
d200 12
d220 2
d223 7
a229 5
   ctx->Scissor.Enabled = GL_FALSE;
   ctx->Scissor.X = 0;
   ctx->Scissor.Y = 0;
   ctx->Scissor.Width = 0;
   ctx->Scissor.Height = 0;
@


1.4
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.1
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
a38 1
   ASSERT_OUTSIDE_BEGIN_END(ctx);
@


1.3
log
@Merge Mesa 7.10.3
@
text
@d28 1
@


1.2
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d61 1
a61 1
 * Verifies the parameters and updates __GLcontextRec::Scissor. On a
d66 1
a66 1
_mesa_set_scissor(GLcontext *ctx, 
d91 1
a91 1
_mesa_init_scissor(GLcontext *ctx)
@


1.1
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d40 3
a46 3

   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "glScissor %d %d %d %d\n", x, y, width, height);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a39 3
   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "glScissor %d %d %d %d\n", x, y, width, height);

d45 3
d61 1
a61 1
 * Verifies the parameters and updates __struct gl_contextRec::Scissor. On a
d66 1
a66 1
_mesa_set_scissor(struct gl_context *ctx, 
d91 1
a91 1
_mesa_init_scissor(struct gl_context *ctx)
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
a27 1
#include "main/mtypes.h"
d38 1
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a32 25
 * Set scissor rectangle data directly in ScissorArray
 *
 * This is an internal function that performs no error checking on the
 * supplied data.  It also does \b not call \c dd_function_table::Scissor.
 *
 * \sa _mesa_set_scissor
 */
static void
set_scissor_no_notify(struct gl_context *ctx, unsigned idx,
                      GLint x, GLint y, GLsizei width, GLsizei height)
{
   if (x == ctx->Scissor.ScissorArray[idx].X &&
       y == ctx->Scissor.ScissorArray[idx].Y &&
       width == ctx->Scissor.ScissorArray[idx].Width &&
       height == ctx->Scissor.ScissorArray[idx].Height)
      return;

   FLUSH_VERTICES(ctx, _NEW_SCISSOR);
   ctx->Scissor.ScissorArray[idx].X = x;
   ctx->Scissor.ScissorArray[idx].Y = y;
   ctx->Scissor.ScissorArray[idx].Width = width;
   ctx->Scissor.ScissorArray[idx].Height = height;
}

/**
a37 1
   unsigned i;
d48 1
a48 17
   /* The GL_ARB_viewport_array spec says:
    *
    *     "Scissor sets the scissor rectangle for all viewports to the same
    *     values and is equivalent (assuming no errors are generated) to:
    *
    *     for (uint i = 0; i < MAX_VIEWPORTS; i++) {
    *         ScissorIndexed(i, left, bottom, width, height);
    *     }"
    *
    * Set the scissor rectangle for all of the viewports supported by the
    * implementation, but only signal the driver once at the end.
    */
   for (i = 0; i < ctx->Const.MaxViewports; i++)
      set_scissor_no_notify(ctx, i, x, y, width, height);

   if (ctx->Driver.Scissor)
      ctx->Driver.Scissor(ctx);
d66 1
a66 1
_mesa_set_scissor(struct gl_context *ctx, unsigned idx,
d69 4
a72 28
   set_scissor_no_notify(ctx, idx, x, y, width, height);

   if (ctx->Driver.Scissor)
      ctx->Driver.Scissor(ctx);
}

/**
 * Define count scissor boxes starting at index.
 *
 * \param index  index of first scissor records to set
 * \param count  number of scissor records to set
 * \param x, y   pointer to array of struct gl_scissor_rects
 *
 * \sa glScissorArrayv().
 *
 * Verifies the parameters and call set_scissor_no_notify to do the work.
 */
void GLAPIENTRY
_mesa_ScissorArrayv(GLuint first, GLsizei count, const GLint *v)
{
   int i;
   struct gl_scissor_rect *p = (struct gl_scissor_rect *) v;
   GET_CURRENT_CONTEXT(ctx);

   if ((first + count) > ctx->Const.MaxViewports) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "glScissorArrayv: first (%d) + count (%d) >= MaxViewports (%d)",
                  first, count, ctx->Const.MaxViewports);
a73 1
   }
d75 5
a79 53
   /* Verify width & height */
   for (i = 0; i < count; i++) {
      if (p[i].Width < 0 || p[i].Height < 0) {
         _mesa_error(ctx, GL_INVALID_VALUE,
                     "glScissorArrayv: index (%d) width or height < 0 (%d, %d)",
                     i, p[i].Width, p[i].Height);
         return;
      }
   }

   for (i = 0; i < count; i++)
      set_scissor_no_notify(ctx, i + first,
                            p[i].X, p[i].Y, p[i].Width, p[i].Height);

   if (ctx->Driver.Scissor)
      ctx->Driver.Scissor(ctx);
}

/**
 * Define the scissor box.
 *
 * \param index  index of scissor records to set
 * \param x, y   coordinates of the scissor box lower-left corner.
 * \param width  width of the scissor box.
 * \param height height of the scissor box.
 *
 * Verifies the parameters call set_scissor_no_notify to do the work.
 */
static void
ScissorIndexed(GLuint index, GLint left, GLint bottom,
               GLsizei width, GLsizei height, const char *function)
{
   GET_CURRENT_CONTEXT(ctx);

   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "%s(%d, %d, %d, %d, %d)\n",
                  function, index, left, bottom, width, height);

   if (index >= ctx->Const.MaxViewports) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "%s: index (%d) >= MaxViewports (%d)",
                  function, index, ctx->Const.MaxViewports);
      return;
   }

   if (width < 0 || height < 0) {
      _mesa_error(ctx, GL_INVALID_VALUE,
                  "%s: index (%d) width or height < 0 (%d, %d)",
                  function, index, width, height);
      return;
   }

   set_scissor_no_notify(ctx, index, left, bottom, width, height);
d82 1
a82 1
      ctx->Driver.Scissor(ctx);
a84 12
void GLAPIENTRY
_mesa_ScissorIndexed(GLuint index, GLint left, GLint bottom,
                     GLsizei width, GLsizei height)
{
   ScissorIndexed(index, left, bottom, width, height, "glScissorIndexd");
}

void GLAPIENTRY
_mesa_ScissorIndexedv(GLuint index, const GLint *v)
{
   ScissorIndexed(index, v[0], v[1], v[2], v[3], "glScissorIndexdv");
}
a92 2
   unsigned i;

d94 5
a98 7
   ctx->Scissor.EnableFlags = 0;

   /* Note: ctx->Const.MaxViewports may not have been set by the driver yet,
    * so just initialize all of them.
    */
   for (i = 0; i < MAX_VIEWPORTS; i++)
      set_scissor_no_notify(ctx, i, 0, 0, 0, 0);
@


