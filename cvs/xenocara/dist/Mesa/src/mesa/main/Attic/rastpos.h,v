head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.3.0.8
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.53;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2013.09.05.14.06.26;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.22.20.06.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.50.16;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.50.16;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.46;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.16.47;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**
 * \file rastpos.h
 * Raster position operations.
 */

/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


#ifndef RASTPOS_H
#define RASTPOS_H


#include "compiler.h"

struct _glapi_table;
struct gl_context;

extern void 
_mesa_init_rastpos(struct gl_context *ctx);

void GLAPIENTRY
_mesa_RasterPos2d(GLdouble x, GLdouble y);
void GLAPIENTRY
_mesa_RasterPos2f(GLfloat x, GLfloat y);
void GLAPIENTRY
_mesa_RasterPos2i(GLint x, GLint y);
void GLAPIENTRY
_mesa_RasterPos2s(GLshort x, GLshort y);
void GLAPIENTRY
_mesa_RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY
_mesa_RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY
_mesa_RasterPos3i(GLint x, GLint y, GLint z);
void GLAPIENTRY
_mesa_RasterPos3s(GLshort x, GLshort y, GLshort z);
void GLAPIENTRY
_mesa_RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY
_mesa_RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY
_mesa_RasterPos4i(GLint x, GLint y, GLint z, GLint w);
void GLAPIENTRY
_mesa_RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
void GLAPIENTRY
_mesa_RasterPos2dv(const GLdouble *v);
void GLAPIENTRY
_mesa_RasterPos2fv(const GLfloat *v);
void GLAPIENTRY
_mesa_RasterPos2iv(const GLint *v);
void GLAPIENTRY
_mesa_RasterPos2sv(const GLshort *v);
void GLAPIENTRY
_mesa_RasterPos3dv(const GLdouble *v);
void GLAPIENTRY
_mesa_RasterPos3fv(const GLfloat *v);
void GLAPIENTRY
_mesa_RasterPos3iv(const GLint *v);
void GLAPIENTRY
_mesa_RasterPos3sv(const GLshort *v);
void GLAPIENTRY
_mesa_RasterPos4dv(const GLdouble *v);
void GLAPIENTRY
_mesa_RasterPos4fv(const GLfloat *v);
void GLAPIENTRY
_mesa_RasterPos4iv(const GLint *v);
void GLAPIENTRY
_mesa_RasterPos4sv(const GLshort *v);
void GLAPIENTRY
_mesa_WindowPos2d(GLdouble x, GLdouble y);
void GLAPIENTRY
_mesa_WindowPos2f(GLfloat x, GLfloat y);
void GLAPIENTRY
_mesa_WindowPos2i(GLint x, GLint y);
void GLAPIENTRY
_mesa_WindowPos2s(GLshort x, GLshort y);
void GLAPIENTRY
_mesa_WindowPos3d(GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY
_mesa_WindowPos3f(GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY
_mesa_WindowPos3i(GLint x, GLint y, GLint z);
void GLAPIENTRY
_mesa_WindowPos3s(GLshort x, GLshort y, GLshort z);
void GLAPIENTRY
_mesa_WindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY
_mesa_WindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY
_mesa_WindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);
void GLAPIENTRY
_mesa_WindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);
void GLAPIENTRY
_mesa_WindowPos2dv(const GLdouble *v);
void GLAPIENTRY
_mesa_WindowPos2fv(const GLfloat *v);
void GLAPIENTRY
_mesa_WindowPos2iv(const GLint *v);
void GLAPIENTRY
_mesa_WindowPos2sv(const GLshort *v);
void GLAPIENTRY
_mesa_WindowPos3dv(const GLdouble *v);
void GLAPIENTRY
_mesa_WindowPos3fv(const GLfloat *v);
void GLAPIENTRY
_mesa_WindowPos3iv(const GLint *v);
void GLAPIENTRY
_mesa_WindowPos3sv(const GLshort *v);
void GLAPIENTRY
_mesa_WindowPos4dvMESA(const GLdouble *v);
void GLAPIENTRY
_mesa_WindowPos4fvMESA(const GLfloat *v);
void GLAPIENTRY
_mesa_WindowPos4ivMESA(const GLint *v);
void GLAPIENTRY
_mesa_WindowPos4svMESA(const GLshort *v);


/*@@}*/

#endif /* RASTPOS_H */
@


1.4
log
@Merge Mesa 9.2.0
@
text
@@


1.3
log
@Merge Mesa 7.10.3
@
text
@a7 1
 * Version:  4.1
d24 4
a27 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
a35 1
#include "mfeatures.h"
d40 2
a41 6
#if FEATURE_rastpos

extern void
_mesa_init_rastpos_dispatch(struct _glapi_table *disp);

#else /* FEATURE_rastpos */
d43 96
a138 4
static INLINE void
_mesa_init_rastpos_dispatch(struct _glapi_table *disp)
{
}
a139 4
#endif /* FEATURE_rastpos */

extern void 
_mesa_init_rastpos(struct gl_context *ctx);
@


1.2
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d35 2
a36 1
#include "main/mtypes.h"
d38 2
a42 5
#define _MESA_INIT_RASTPOS_FUNCTIONS(driver, impl) \
   do {                                            \
      (driver)->RasterPos = impl ## RasterPos;     \
   } while (0)

a47 2
#define _MESA_INIT_RASTPOS_FUNCTIONS(driver, impl) do { } while (0)

d56 1
a56 1
_mesa_init_rastpos(GLcontext *ctx);
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
#include "glheader.h"
d38 1
a38 2
extern void GLAPIENTRY
_mesa_RasterPos2d(GLdouble x, GLdouble y);
d40 4
a43 2
extern void GLAPIENTRY
_mesa_RasterPos2f(GLfloat x, GLfloat y);
d45 2
a46 2
extern void GLAPIENTRY
_mesa_RasterPos2i(GLint x, GLint y);
d48 1
a48 2
extern void GLAPIENTRY
_mesa_RasterPos2s(GLshort x, GLshort y);
d50 1
a50 2
extern void GLAPIENTRY
_mesa_RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
d52 4
a55 2
extern void GLAPIENTRY
_mesa_RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
d57 1
a57 131
extern void GLAPIENTRY
_mesa_RasterPos3i(GLint x, GLint y, GLint z);

extern void GLAPIENTRY
_mesa_RasterPos3s(GLshort x, GLshort y, GLshort z);

extern void GLAPIENTRY
_mesa_RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);

extern void GLAPIENTRY
_mesa_RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);

extern void GLAPIENTRY
_mesa_RasterPos4i(GLint x, GLint y, GLint z, GLint w);

extern void GLAPIENTRY
_mesa_RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);

extern void GLAPIENTRY
_mesa_RasterPos2dv(const GLdouble *v);

extern void GLAPIENTRY
_mesa_RasterPos2fv(const GLfloat *v);

extern void GLAPIENTRY
_mesa_RasterPos2iv(const GLint *v);

extern void GLAPIENTRY
_mesa_RasterPos2sv(const GLshort *v);

extern void GLAPIENTRY
_mesa_RasterPos3dv(const GLdouble *v);

extern void GLAPIENTRY
_mesa_RasterPos3fv(const GLfloat *v);

extern void GLAPIENTRY
_mesa_RasterPos3iv(const GLint *v);

extern void GLAPIENTRY
_mesa_RasterPos3sv(const GLshort *v);

extern void GLAPIENTRY
_mesa_RasterPos4dv(const GLdouble *v);

extern void GLAPIENTRY
_mesa_RasterPos4fv(const GLfloat *v);

extern void GLAPIENTRY
_mesa_RasterPos4iv(const GLint *v);

extern void GLAPIENTRY
_mesa_RasterPos4sv(const GLshort *v);


/**********************************************************************/
/** \name GL_MESA_window_pos                                          */
/**********************************************************************/
/*@@{*/

extern void GLAPIENTRY
_mesa_WindowPos2dMESA(GLdouble x, GLdouble y);

extern void GLAPIENTRY
_mesa_WindowPos2fMESA(GLfloat x, GLfloat y);

extern void GLAPIENTRY
_mesa_WindowPos2iMESA(GLint x, GLint y);

extern void GLAPIENTRY
_mesa_WindowPos2sMESA(GLshort x, GLshort y);

extern void GLAPIENTRY
_mesa_WindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z);

extern void GLAPIENTRY
_mesa_WindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z);

extern void GLAPIENTRY
_mesa_WindowPos3iMESA(GLint x, GLint y, GLint z);

extern void GLAPIENTRY
_mesa_WindowPos3sMESA(GLshort x, GLshort y, GLshort z);

extern void GLAPIENTRY
_mesa_WindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);

extern void GLAPIENTRY
_mesa_WindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);

extern void GLAPIENTRY
_mesa_WindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);

extern void GLAPIENTRY
_mesa_WindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);

extern void GLAPIENTRY
_mesa_WindowPos2dvMESA(const GLdouble *v);

extern void GLAPIENTRY
_mesa_WindowPos2fvMESA(const GLfloat *v);

extern void GLAPIENTRY
_mesa_WindowPos2ivMESA(const GLint *v);

extern void GLAPIENTRY
_mesa_WindowPos2svMESA(const GLshort *v);

extern void GLAPIENTRY
_mesa_WindowPos3dvMESA(const GLdouble *v);

extern void GLAPIENTRY
_mesa_WindowPos3fvMESA(const GLfloat *v);

extern void GLAPIENTRY
_mesa_WindowPos3ivMESA(const GLint *v);

extern void GLAPIENTRY
_mesa_WindowPos3svMESA(const GLshort *v);

extern void GLAPIENTRY
_mesa_WindowPos4dvMESA(const GLdouble *v);

extern void GLAPIENTRY
_mesa_WindowPos4fvMESA(const GLfloat *v);

extern void GLAPIENTRY
_mesa_WindowPos4ivMESA(const GLint *v);

extern void GLAPIENTRY
_mesa_WindowPos4svMESA(const GLshort *v);
d60 1
a60 1
_mesa_init_rastpos( GLcontext * ctx );
d64 1
a64 1
#endif
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d35 1
a35 2
#include "compiler.h"
#include "mfeatures.h"
a36 2
struct _glapi_table;
struct gl_context;
d38 2
a39 1
#if FEATURE_rastpos
d41 2
a42 2
extern void
_mesa_init_rastpos_dispatch(struct _glapi_table *disp);
d44 2
a45 1
#else /* FEATURE_rastpos */
d47 2
a48 4
static INLINE void
_mesa_init_rastpos_dispatch(struct _glapi_table *disp)
{
}
d50 137
a186 1
#endif /* FEATURE_rastpos */
d189 1
a189 1
_mesa_init_rastpos(struct gl_context *ctx);
d193 1
a193 1
#endif /* RASTPOS_H */
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d8 1
d25 3
a27 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d36 1
d41 14
a56 98

void GLAPIENTRY
_mesa_RasterPos2d(GLdouble x, GLdouble y);
void GLAPIENTRY
_mesa_RasterPos2f(GLfloat x, GLfloat y);
void GLAPIENTRY
_mesa_RasterPos2i(GLint x, GLint y);
void GLAPIENTRY
_mesa_RasterPos2s(GLshort x, GLshort y);
void GLAPIENTRY
_mesa_RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY
_mesa_RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY
_mesa_RasterPos3i(GLint x, GLint y, GLint z);
void GLAPIENTRY
_mesa_RasterPos3s(GLshort x, GLshort y, GLshort z);
void GLAPIENTRY
_mesa_RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY
_mesa_RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY
_mesa_RasterPos4i(GLint x, GLint y, GLint z, GLint w);
void GLAPIENTRY
_mesa_RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
void GLAPIENTRY
_mesa_RasterPos2dv(const GLdouble *v);
void GLAPIENTRY
_mesa_RasterPos2fv(const GLfloat *v);
void GLAPIENTRY
_mesa_RasterPos2iv(const GLint *v);
void GLAPIENTRY
_mesa_RasterPos2sv(const GLshort *v);
void GLAPIENTRY
_mesa_RasterPos3dv(const GLdouble *v);
void GLAPIENTRY
_mesa_RasterPos3fv(const GLfloat *v);
void GLAPIENTRY
_mesa_RasterPos3iv(const GLint *v);
void GLAPIENTRY
_mesa_RasterPos3sv(const GLshort *v);
void GLAPIENTRY
_mesa_RasterPos4dv(const GLdouble *v);
void GLAPIENTRY
_mesa_RasterPos4fv(const GLfloat *v);
void GLAPIENTRY
_mesa_RasterPos4iv(const GLint *v);
void GLAPIENTRY
_mesa_RasterPos4sv(const GLshort *v);
void GLAPIENTRY
_mesa_WindowPos2d(GLdouble x, GLdouble y);
void GLAPIENTRY
_mesa_WindowPos2f(GLfloat x, GLfloat y);
void GLAPIENTRY
_mesa_WindowPos2i(GLint x, GLint y);
void GLAPIENTRY
_mesa_WindowPos2s(GLshort x, GLshort y);
void GLAPIENTRY
_mesa_WindowPos3d(GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY
_mesa_WindowPos3f(GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY
_mesa_WindowPos3i(GLint x, GLint y, GLint z);
void GLAPIENTRY
_mesa_WindowPos3s(GLshort x, GLshort y, GLshort z);
void GLAPIENTRY
_mesa_WindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY
_mesa_WindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY
_mesa_WindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);
void GLAPIENTRY
_mesa_WindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);
void GLAPIENTRY
_mesa_WindowPos2dv(const GLdouble *v);
void GLAPIENTRY
_mesa_WindowPos2fv(const GLfloat *v);
void GLAPIENTRY
_mesa_WindowPos2iv(const GLint *v);
void GLAPIENTRY
_mesa_WindowPos2sv(const GLshort *v);
void GLAPIENTRY
_mesa_WindowPos3dv(const GLdouble *v);
void GLAPIENTRY
_mesa_WindowPos3fv(const GLfloat *v);
void GLAPIENTRY
_mesa_WindowPos3iv(const GLint *v);
void GLAPIENTRY
_mesa_WindowPos3sv(const GLshort *v);
void GLAPIENTRY
_mesa_WindowPos4dvMESA(const GLdouble *v);
void GLAPIENTRY
_mesa_WindowPos4fvMESA(const GLfloat *v);
void GLAPIENTRY
_mesa_WindowPos4ivMESA(const GLint *v);
void GLAPIENTRY
_mesa_WindowPos4svMESA(const GLshort *v);

@


