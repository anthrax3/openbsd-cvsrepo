head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.52;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2013.09.05.14.06.21;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2012.08.17.13.58.19;	author mpi;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.22.20.06.30;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.49.59;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.49.59;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.46;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.16.32;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**
 * \file eval.h
 * Eval operations.
 * 
 * \if subset
 * (No-op)
 *
 * \endif
 */

/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2001  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


#ifndef EVAL_H
#define EVAL_H


#include "main/mtypes.h"
#include <stdbool.h>


extern GLuint _mesa_evaluator_components( GLenum target );


extern GLfloat *_mesa_copy_map_points1f( GLenum target,
                                      GLint ustride, GLint uorder,
                                      const GLfloat *points );

extern GLfloat *_mesa_copy_map_points1d( GLenum target,
                                      GLint ustride, GLint uorder,
                                      const GLdouble *points );

extern GLfloat *_mesa_copy_map_points2f( GLenum target,
                                      GLint ustride, GLint uorder,
                                      GLint vstride, GLint vorder,
                                      const GLfloat *points );

extern GLfloat *_mesa_copy_map_points2d(GLenum target,
                                     GLint ustride, GLint uorder,
                                     GLint vstride, GLint vorder,
                                     const GLdouble *points );

extern void
_mesa_install_eval_vtxfmt(struct _glapi_table *disp,
                          const GLvertexformat *vfmt);

extern void _mesa_init_eval( struct gl_context *ctx );
extern void _mesa_free_eval_data( struct gl_context *ctx );

void GLAPIENTRY
_mesa_Map1f( GLenum target, GLfloat u1, GLfloat u2, GLint stride,
             GLint order, const GLfloat *points );
void GLAPIENTRY
_mesa_Map1d( GLenum target, GLdouble u1, GLdouble u2, GLint stride,
             GLint order, const GLdouble *points );
void GLAPIENTRY
_mesa_Map2f( GLenum target,
             GLfloat u1, GLfloat u2, GLint ustride, GLint uorder,
             GLfloat v1, GLfloat v2, GLint vstride, GLint vorder,
             const GLfloat *points);
void GLAPIENTRY
_mesa_Map2d( GLenum target,
             GLdouble u1, GLdouble u2, GLint ustride, GLint uorder,
             GLdouble v1, GLdouble v2, GLint vstride, GLint vorder,
             const GLdouble *points );
void GLAPIENTRY
_mesa_GetnMapdvARB( GLenum target, GLenum query, GLsizei bufSize,
                    GLdouble *v );
void GLAPIENTRY
_mesa_GetMapdv( GLenum target, GLenum query, GLdouble *v );
void GLAPIENTRY
_mesa_GetnMapfvARB( GLenum target, GLenum query, GLsizei bufSize, GLfloat *v );
void GLAPIENTRY
_mesa_GetMapfv( GLenum target, GLenum query, GLfloat *v );
void GLAPIENTRY
_mesa_GetnMapivARB( GLenum target, GLenum query, GLsizei bufSize, GLint *v );
void GLAPIENTRY
_mesa_GetMapiv( GLenum target, GLenum query, GLint *v );
void GLAPIENTRY
_mesa_MapGrid1f( GLint un, GLfloat u1, GLfloat u2 );
void GLAPIENTRY
_mesa_MapGrid1d( GLint un, GLdouble u1, GLdouble u2 );
void GLAPIENTRY
_mesa_MapGrid2f( GLint un, GLfloat u1, GLfloat u2,
                 GLint vn, GLfloat v1, GLfloat v2 );
void GLAPIENTRY
_mesa_MapGrid2d( GLint un, GLdouble u1, GLdouble u2,
                 GLint vn, GLdouble v1, GLdouble v2 );

#endif /* EVAL_H */
@


1.5
log
@Merge Mesa 9.2.0
@
text
@@


1.4
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a12 1
 * Version:  3.5
d29 4
a32 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
a39 1
#include "main/mfeatures.h"
d41 1
a43 14
#if FEATURE_evaluators

#define _MESA_INIT_EVAL_VTXFMT(vfmt, impl)         \
   do {                                            \
      (vfmt)->EvalCoord1f  = impl ## EvalCoord1f;  \
      (vfmt)->EvalCoord1fv = impl ## EvalCoord1fv; \
      (vfmt)->EvalCoord2f  = impl ## EvalCoord2f;  \
      (vfmt)->EvalCoord2fv = impl ## EvalCoord2fv; \
      (vfmt)->EvalPoint1   = impl ## EvalPoint1;   \
      (vfmt)->EvalPoint2   = impl ## EvalPoint2;   \
      (vfmt)->EvalMesh1    = impl ## EvalMesh1;    \
      (vfmt)->EvalMesh2    = impl ## EvalMesh2;    \
   } while (0)

a46 4
extern void gl_free_control_points( struct gl_context *ctx,
                                    GLenum target, GLfloat *data );


a68 20
extern void
_mesa_init_eval_dispatch(struct _glapi_table *disp);

#else /* FEATURE_evaluators */

#define _MESA_INIT_EVAL_VTXFMT(vfmt, impl) do { } while (0)

static INLINE void
_mesa_install_eval_vtxfmt(struct _glapi_table *disp,
                          const GLvertexformat *vfmt)
{
}

static INLINE void
_mesa_init_eval_dispatch(struct _glapi_table *disp)
{
}

#endif /* FEATURE_evaluators */

d72 39
@


1.3
log
@Merge Mesa 7.10.3
@
text
@d40 1
@


1.2
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d60 1
a60 1
extern void gl_free_control_points( GLcontext *ctx,
d106 2
a107 2
extern void _mesa_init_eval( GLcontext *ctx );
extern void _mesa_free_eval_data( GLcontext *ctx );
@


1.1
log
@Initial revision
@
text
@d40 1
a40 1
#include "mtypes.h"
a41 1
#if _HAVE_FULL_GL
d43 1
a43 2
extern void _mesa_init_eval( GLcontext *ctx );
extern void _mesa_free_eval_data( GLcontext *ctx );
d45 11
d82 3
d86 2
d89 1
a89 3
extern void GLAPIENTRY
_mesa_Map1f( GLenum target, GLfloat u1, GLfloat u2, GLint stride,
             GLint order, const GLfloat *points );
d91 1
a91 5
extern void GLAPIENTRY
_mesa_Map2f( GLenum target,
             GLfloat u1, GLfloat u2, GLint ustride, GLint uorder,
             GLfloat v1, GLfloat v2, GLint vstride, GLint vorder,
             const GLfloat *points );
d93 5
a97 3
extern void GLAPIENTRY
_mesa_Map1d( GLenum target, GLdouble u1, GLdouble u2, GLint stride,
             GLint order, const GLdouble *points );
d99 4
a102 5
extern void GLAPIENTRY
_mesa_Map2d( GLenum target,
             GLdouble u1, GLdouble u2, GLint ustride, GLint uorder,
             GLdouble v1, GLdouble v2, GLint vstride, GLint vorder,
             const GLdouble *points );
d104 1
a104 2
extern void GLAPIENTRY
_mesa_MapGrid1f( GLint un, GLfloat u1, GLfloat u2 );
d106 2
a107 27
extern void GLAPIENTRY
_mesa_MapGrid1d( GLint un, GLdouble u1, GLdouble u2 );

extern void GLAPIENTRY
_mesa_MapGrid2f( GLint un, GLfloat u1, GLfloat u2,
                 GLint vn, GLfloat v1, GLfloat v2 );

extern void GLAPIENTRY
_mesa_MapGrid2d( GLint un, GLdouble u1, GLdouble u2,
                 GLint vn, GLdouble v1, GLdouble v2 );

extern void GLAPIENTRY
_mesa_GetMapdv( GLenum target, GLenum query, GLdouble *v );

extern void GLAPIENTRY
_mesa_GetMapfv( GLenum target, GLenum query, GLfloat *v );

extern void GLAPIENTRY
_mesa_GetMapiv( GLenum target, GLenum query, GLint *v );

#else

/** No-op */
#define _mesa_init_eval( c ) ((void)0)

/** No-op */
#define _mesa_free_eval_data( c ) ((void)0)
a108 1
#endif
d110 1
a110 1
#endif
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d40 1
a40 1
#include "main/mtypes.h"
d42 1
d44 2
a45 1
#if FEATURE_evaluators
a46 11
#define _MESA_INIT_EVAL_VTXFMT(vfmt, impl)         \
   do {                                            \
      (vfmt)->EvalCoord1f  = impl ## EvalCoord1f;  \
      (vfmt)->EvalCoord1fv = impl ## EvalCoord1fv; \
      (vfmt)->EvalCoord2f  = impl ## EvalCoord2f;  \
      (vfmt)->EvalCoord2fv = impl ## EvalCoord2fv; \
      (vfmt)->EvalPoint1   = impl ## EvalPoint1;   \
      (vfmt)->EvalPoint2   = impl ## EvalPoint2;   \
      (vfmt)->EvalMesh1    = impl ## EvalMesh1;    \
      (vfmt)->EvalMesh2    = impl ## EvalMesh2;    \
   } while (0)
d51 1
a51 1
extern void gl_free_control_points( struct gl_context *ctx,
a72 3
extern void
_mesa_install_eval_vtxfmt(struct _glapi_table *disp,
                          const GLvertexformat *vfmt);
a73 2
extern void
_mesa_init_eval_dispatch(struct _glapi_table *disp);
d75 3
a77 1
#else /* FEATURE_evaluators */
d79 5
a83 1
#define _MESA_INIT_EVAL_VTXFMT(vfmt, impl) do { } while (0)
d85 3
a87 5
static INLINE void
_mesa_install_eval_vtxfmt(struct _glapi_table *disp,
                          const GLvertexformat *vfmt)
{
}
d89 5
a93 4
static INLINE void
_mesa_init_eval_dispatch(struct _glapi_table *disp)
{
}
d95 2
a96 1
#endif /* FEATURE_evaluators */
d98 2
a99 2
extern void _mesa_init_eval( struct gl_context *ctx );
extern void _mesa_free_eval_data( struct gl_context *ctx );
d101 3
d105 24
a128 1
#endif /* EVAL_H */
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d13 1
d30 3
a32 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
a40 1
#include <stdbool.h>
d43 14
d60 4
d86 20
a108 39
void GLAPIENTRY
_mesa_Map1f( GLenum target, GLfloat u1, GLfloat u2, GLint stride,
             GLint order, const GLfloat *points );
void GLAPIENTRY
_mesa_Map1d( GLenum target, GLdouble u1, GLdouble u2, GLint stride,
             GLint order, const GLdouble *points );
void GLAPIENTRY
_mesa_Map2f( GLenum target,
             GLfloat u1, GLfloat u2, GLint ustride, GLint uorder,
             GLfloat v1, GLfloat v2, GLint vstride, GLint vorder,
             const GLfloat *points);
void GLAPIENTRY
_mesa_Map2d( GLenum target,
             GLdouble u1, GLdouble u2, GLint ustride, GLint uorder,
             GLdouble v1, GLdouble v2, GLint vstride, GLint vorder,
             const GLdouble *points );
void GLAPIENTRY
_mesa_GetnMapdvARB( GLenum target, GLenum query, GLsizei bufSize,
                    GLdouble *v );
void GLAPIENTRY
_mesa_GetMapdv( GLenum target, GLenum query, GLdouble *v );
void GLAPIENTRY
_mesa_GetnMapfvARB( GLenum target, GLenum query, GLsizei bufSize, GLfloat *v );
void GLAPIENTRY
_mesa_GetMapfv( GLenum target, GLenum query, GLfloat *v );
void GLAPIENTRY
_mesa_GetnMapivARB( GLenum target, GLenum query, GLsizei bufSize, GLint *v );
void GLAPIENTRY
_mesa_GetMapiv( GLenum target, GLenum query, GLint *v );
void GLAPIENTRY
_mesa_MapGrid1f( GLint un, GLfloat u1, GLfloat u2 );
void GLAPIENTRY
_mesa_MapGrid1d( GLint un, GLdouble u1, GLdouble u2 );
void GLAPIENTRY
_mesa_MapGrid2f( GLint un, GLfloat u1, GLfloat u2,
                 GLint vn, GLfloat v1, GLfloat v2 );
void GLAPIENTRY
_mesa_MapGrid2d( GLint un, GLdouble u1, GLdouble u2,
                 GLint vn, GLdouble v1, GLdouble v2 );
@


