head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.23.05.17.53;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.7;
commitid	4ry2gvZGMXkCUD2n;

1.7
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.6;
commitid	mcxB0JvoI9gTDYXU;

1.6
date	2014.09.07.15.20.07;	author jsg;	state Exp;
branches;
next	1.5;
commitid	7kimTMT4YlQauAIU;

1.5
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.28;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.19;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.46;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.16.49;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.05;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2014.09.07.15.07.24;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	dm8VnQHhowGHmemJ;

1.1.1.5
date	2015.01.25.14.12.54;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.50.00;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 2009  VMware, Inc.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * \file shared.c
 * Shared-context state
 */

#include "imports.h"
#include "mtypes.h"
#include "hash.h"
#include "hash_table.h"
#include "atifragshader.h"
#include "bufferobj.h"
#include "shared.h"
#include "program/program.h"
#include "dlist.h"
#include "samplerobj.h"
#include "set.h"
#include "shaderapi.h"
#include "shaderobj.h"
#include "syncobj.h"


/**
 * Allocate and initialize a shared context state structure.
 * Initializes the display list, texture objects and vertex programs hash
 * tables, allocates the texture objects. If it runs out of memory, frees
 * everything already allocated before returning NULL.
 *
 * \return pointer to a gl_shared_state structure on success, or NULL on
 * failure.
 */
struct gl_shared_state *
_mesa_alloc_shared_state(struct gl_context *ctx)
{
   struct gl_shared_state *shared;
   GLuint i;

   shared = CALLOC_STRUCT(gl_shared_state);
   if (!shared)
      return NULL;

   mtx_init(&shared->Mutex, mtx_plain);

   shared->DisplayList = _mesa_NewHashTable();
   shared->TexObjects = _mesa_NewHashTable();
   shared->Programs = _mesa_NewHashTable();

   shared->DefaultVertexProgram =
      gl_vertex_program(ctx->Driver.NewProgram(ctx,
                                               GL_VERTEX_PROGRAM_ARB, 0));
   shared->DefaultFragmentProgram =
      gl_fragment_program(ctx->Driver.NewProgram(ctx,
                                                 GL_FRAGMENT_PROGRAM_ARB, 0));

   shared->ATIShaders = _mesa_NewHashTable();
   shared->DefaultFragmentShader = _mesa_new_ati_fragment_shader(ctx, 0);

   shared->ShaderObjects = _mesa_NewHashTable();

   shared->BufferObjects = _mesa_NewHashTable();

   /* GL_ARB_sampler_objects */
   shared->SamplerObjects = _mesa_NewHashTable();

   /* Allocate the default buffer object */
   shared->NullBufferObj = ctx->Driver.NewBufferObject(ctx, 0, 0);

   /* Create default texture objects */
   for (i = 0; i < NUM_TEXTURE_TARGETS; i++) {
      /* NOTE: the order of these enums matches the TEXTURE_x_INDEX values */
      static const GLenum targets[] = {
         GL_TEXTURE_2D_MULTISAMPLE,
         GL_TEXTURE_2D_MULTISAMPLE_ARRAY,
         GL_TEXTURE_CUBE_MAP_ARRAY,
         GL_TEXTURE_BUFFER,
         GL_TEXTURE_2D_ARRAY_EXT,
         GL_TEXTURE_1D_ARRAY_EXT,
         GL_TEXTURE_EXTERNAL_OES,
         GL_TEXTURE_CUBE_MAP,
         GL_TEXTURE_3D,
         GL_TEXTURE_RECTANGLE_NV,
         GL_TEXTURE_2D,
         GL_TEXTURE_1D
      };
      STATIC_ASSERT(Elements(targets) == NUM_TEXTURE_TARGETS);
      shared->DefaultTex[i] = ctx->Driver.NewTextureObject(ctx, 0, targets[i]);
   }

   /* sanity check */
   assert(shared->DefaultTex[TEXTURE_1D_INDEX]->RefCount == 1);

   /* Mutex and timestamp for texobj state validation */
   mtx_init(&shared->TexMutex, mtx_plain);
   shared->TextureStateStamp = 0;

   shared->FrameBuffers = _mesa_NewHashTable();
   shared->RenderBuffers = _mesa_NewHashTable();

   shared->SyncObjects = _mesa_set_create(NULL, _mesa_key_pointer_equal);

   return shared;
}


/**
 * Callback for deleting a display list.  Called by _mesa_HashDeleteAll().
 */
static void
delete_displaylist_cb(GLuint id, void *data, void *userData)
{
   struct gl_display_list *list = (struct gl_display_list *) data;
   struct gl_context *ctx = (struct gl_context *) userData;
   _mesa_delete_list(ctx, list);
}


/**
 * Callback for deleting a texture object.  Called by _mesa_HashDeleteAll().
 */
static void
delete_texture_cb(GLuint id, void *data, void *userData)
{
   struct gl_texture_object *texObj = (struct gl_texture_object *) data;
   struct gl_context *ctx = (struct gl_context *) userData;
   ctx->Driver.DeleteTexture(ctx, texObj);
}


/**
 * Callback for deleting a program object.  Called by _mesa_HashDeleteAll().
 */
static void
delete_program_cb(GLuint id, void *data, void *userData)
{
   struct gl_program *prog = (struct gl_program *) data;
   struct gl_context *ctx = (struct gl_context *) userData;
   if(prog != &_mesa_DummyProgram) {
      ASSERT(prog->RefCount == 1); /* should only be referenced by hash table */
      prog->RefCount = 0;  /* now going away */
      ctx->Driver.DeleteProgram(ctx, prog);
   }
}


/**
 * Callback for deleting an ATI fragment shader object.
 * Called by _mesa_HashDeleteAll().
 */
static void
delete_fragshader_cb(GLuint id, void *data, void *userData)
{
   struct ati_fragment_shader *shader = (struct ati_fragment_shader *) data;
   struct gl_context *ctx = (struct gl_context *) userData;
   _mesa_delete_ati_fragment_shader(ctx, shader);
}


/**
 * Callback for deleting a buffer object.  Called by _mesa_HashDeleteAll().
 */
static void
delete_bufferobj_cb(GLuint id, void *data, void *userData)
{
   struct gl_buffer_object *bufObj = (struct gl_buffer_object *) data;
   struct gl_context *ctx = (struct gl_context *) userData;

   _mesa_buffer_unmap_all_mappings(ctx, bufObj);
   _mesa_reference_buffer_object(ctx, &bufObj, NULL);
}


/**
 * Callback for freeing shader program data. Call it before delete_shader_cb
 * to avoid memory access error.
 */
static void
free_shader_program_data_cb(GLuint id, void *data, void *userData)
{
   struct gl_context *ctx = (struct gl_context *) userData;
   struct gl_shader_program *shProg = (struct gl_shader_program *) data;

   if (shProg->Type == GL_SHADER_PROGRAM_MESA) {
       _mesa_free_shader_program_data(ctx, shProg);
   }
}


/**
 * Callback for deleting shader and shader programs objects.
 * Called by _mesa_HashDeleteAll().
 */
static void
delete_shader_cb(GLuint id, void *data, void *userData)
{
   struct gl_context *ctx = (struct gl_context *) userData;
   struct gl_shader *sh = (struct gl_shader *) data;
   if (_mesa_validate_shader_target(ctx, sh->Type)) {
      ctx->Driver.DeleteShader(ctx, sh);
   }
   else {
      struct gl_shader_program *shProg = (struct gl_shader_program *) data;
      ASSERT(shProg->Type == GL_SHADER_PROGRAM_MESA);
      ctx->Driver.DeleteShaderProgram(ctx, shProg);
   }
}


/**
 * Callback for deleting a framebuffer object.  Called by _mesa_HashDeleteAll()
 */
static void
delete_framebuffer_cb(GLuint id, void *data, void *userData)
{
   struct gl_framebuffer *fb = (struct gl_framebuffer *) data;
   /* The fact that the framebuffer is in the hashtable means its refcount
    * is one, but we're removing from the hashtable now.  So clear refcount.
    */
   /*assert(fb->RefCount == 1);*/
   fb->RefCount = 0;

   /* NOTE: Delete should always be defined but there are two reports
    * of it being NULL (bugs 13507, 14293).  Work-around for now.
    */
   if (fb->Delete)
      fb->Delete(fb);
}


/**
 * Callback for deleting a renderbuffer object. Called by _mesa_HashDeleteAll()
 */
static void
delete_renderbuffer_cb(GLuint id, void *data, void *userData)
{
   struct gl_context *ctx = (struct gl_context *) userData;
   struct gl_renderbuffer *rb = (struct gl_renderbuffer *) data;
   rb->RefCount = 0;  /* see comment for FBOs above */
   if (rb->Delete)
      rb->Delete(ctx, rb);
}


/**
 * Callback for deleting a sampler object. Called by _mesa_HashDeleteAll()
 */
static void
delete_sampler_object_cb(GLuint id, void *data, void *userData)
{
   struct gl_context *ctx = (struct gl_context *) userData;
   struct gl_sampler_object *sampObj = (struct gl_sampler_object *) data;
   _mesa_reference_sampler_object(ctx, &sampObj, NULL);
}


/**
 * Deallocate a shared state object and all children structures.
 *
 * \param ctx GL context.
 * \param shared shared state pointer.
 * 
 * Frees the display lists, the texture objects (calling the driver texture
 * deletion callback to free its private data) and the vertex programs, as well
 * as their hash tables.
 *
 * \sa alloc_shared_state().
 */
static void
free_shared_state(struct gl_context *ctx, struct gl_shared_state *shared)
{
   GLuint i;

   /* Free the dummy/fallback texture objects */
   for (i = 0; i < NUM_TEXTURE_TARGETS; i++) {
      if (shared->FallbackTex[i])
         ctx->Driver.DeleteTexture(ctx, shared->FallbackTex[i]);
   }

   /*
    * Free display lists
    */
   _mesa_HashDeleteAll(shared->DisplayList, delete_displaylist_cb, ctx);
   _mesa_DeleteHashTable(shared->DisplayList);

   _mesa_HashWalk(shared->ShaderObjects, free_shader_program_data_cb, ctx);
   _mesa_HashDeleteAll(shared->ShaderObjects, delete_shader_cb, ctx);
   _mesa_DeleteHashTable(shared->ShaderObjects);

   _mesa_HashDeleteAll(shared->Programs, delete_program_cb, ctx);
   _mesa_DeleteHashTable(shared->Programs);

   _mesa_reference_vertprog(ctx, &shared->DefaultVertexProgram, NULL);
   _mesa_reference_geomprog(ctx, &shared->DefaultGeometryProgram, NULL);
   _mesa_reference_fragprog(ctx, &shared->DefaultFragmentProgram, NULL);

   _mesa_HashDeleteAll(shared->ATIShaders, delete_fragshader_cb, ctx);
   _mesa_DeleteHashTable(shared->ATIShaders);
   _mesa_delete_ati_fragment_shader(ctx, shared->DefaultFragmentShader);

   _mesa_HashDeleteAll(shared->BufferObjects, delete_bufferobj_cb, ctx);
   _mesa_DeleteHashTable(shared->BufferObjects);

   _mesa_HashDeleteAll(shared->FrameBuffers, delete_framebuffer_cb, ctx);
   _mesa_DeleteHashTable(shared->FrameBuffers);
   _mesa_HashDeleteAll(shared->RenderBuffers, delete_renderbuffer_cb, ctx);
   _mesa_DeleteHashTable(shared->RenderBuffers);

   _mesa_reference_buffer_object(ctx, &shared->NullBufferObj, NULL);

   {
      struct set_entry *entry;

      set_foreach(shared->SyncObjects, entry) {
         _mesa_unref_sync_object(ctx, (struct gl_sync_object *) entry->key);
      }
   }
   _mesa_set_destroy(shared->SyncObjects, NULL);

   _mesa_HashDeleteAll(shared->SamplerObjects, delete_sampler_object_cb, ctx);
   _mesa_DeleteHashTable(shared->SamplerObjects);

   /*
    * Free texture objects (after FBOs since some textures might have
    * been bound to FBOs).
    */
   ASSERT(ctx->Driver.DeleteTexture);
   /* the default textures */
   for (i = 0; i < NUM_TEXTURE_TARGETS; i++) {
      ctx->Driver.DeleteTexture(ctx, shared->DefaultTex[i]);
   }

   /* all other textures */
   _mesa_HashDeleteAll(shared->TexObjects, delete_texture_cb, ctx);
   _mesa_DeleteHashTable(shared->TexObjects);

   mtx_destroy(&shared->Mutex);
   mtx_destroy(&shared->TexMutex);

   free(shared);
}


/**
 * gl_shared_state objects are ref counted.
 * If ptr's refcount goes to zero, free the shared state.
 */
void
_mesa_reference_shared_state(struct gl_context *ctx,
                             struct gl_shared_state **ptr,
                             struct gl_shared_state *state)
{
   if (*ptr == state)
      return;

   if (*ptr) {
      /* unref old state */
      struct gl_shared_state *old = *ptr;
      GLboolean delete;

      mtx_lock(&old->Mutex);
      assert(old->RefCount >= 1);
      old->RefCount--;
      delete = (old->RefCount == 0);
      mtx_unlock(&old->Mutex);

      if (delete) {
         free_shared_state(ctx, old);
      }

      *ptr = NULL;
   }

   if (state) {
      /* reference new state */
      mtx_lock(&state->Mutex);
      state->RefCount++;
      *ptr = state;
      mtx_unlock(&state->Mutex);
   }
}
@


1.8
log
@Merge Mesa 10.2.9
@
text
@@


1.7
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d33 1
a44 1
#include "util/hash_table.h"
d89 1
a89 1
   shared->NullBufferObj = ctx->Driver.NewBufferObject(ctx, 0);
d116 1
a116 1
   mtx_init(&shared->TexMutex, mtx_recursive);
@


1.6
log
@Merge Mesa 10.2.7
@
text
@a32 1
#include "hash_table.h"
d44 1
d89 1
a89 1
   shared->NullBufferObj = ctx->Driver.NewBufferObject(ctx, 0, 0);
d116 1
a116 1
   mtx_init(&shared->TexMutex, mtx_plain);
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d315 1
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d41 1
d65 1
a65 1
   _glthread_INIT_MUTEX(shared->Mutex);
d116 1
a116 1
   _glthread_INIT_MUTEX(shared->TexMutex);
d189 2
a190 4
   if (_mesa_bufferobj_mapped(bufObj)) {
      ctx->Driver.UnmapBuffer(ctx, bufObj);
      bufObj->Pointer = NULL;
   }
d220 1
a220 1
   if (sh->Type == GL_FRAGMENT_SHADER || sh->Type == GL_VERTEX_SHADER) {
d357 2
a358 2
   _glthread_DESTROY_MUTEX(shared->Mutex);
   _glthread_DESTROY_MUTEX(shared->TexMutex);
d381 1
a381 1
      _glthread_LOCK_MUTEX(old->Mutex);
d385 1
a385 1
      _glthread_UNLOCK_MUTEX(old->Mutex);
d396 1
a396 1
      _glthread_LOCK_MUTEX(state->Mutex);
d399 1
a399 1
      _glthread_UNLOCK_MUTEX(state->Mutex);
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.5
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
a30 1
#include "mfeatures.h"
d33 1
a33 1
#if FEATURE_ATI_fragment_shader
a34 1
#endif
a38 1
#if FEATURE_ARB_sampler_objects
d40 1
a40 1
#endif
d70 6
a75 9
#if FEATURE_ARB_vertex_program
   shared->DefaultVertexProgram = (struct gl_vertex_program *)
      ctx->Driver.NewProgram(ctx, GL_VERTEX_PROGRAM_ARB, 0);
#endif

#if FEATURE_ARB_fragment_program
   shared->DefaultFragmentProgram = (struct gl_fragment_program *)
      ctx->Driver.NewProgram(ctx, GL_FRAGMENT_PROGRAM_ARB, 0);
#endif
a76 1
#if FEATURE_ATI_fragment_shader
a78 1
#endif
a79 1
#if FEATURE_ARB_shader_objects
a80 1
#endif
a81 1
#if FEATURE_ARB_vertex_buffer_object || FEATURE_ARB_pixel_buffer_object
a82 1
#endif
a83 1
#if FEATURE_ARB_sampler_objects
a85 1
#endif
d93 4
a96 1
      static const GLenum targets[NUM_TEXTURE_TARGETS] = {
d100 1
d107 1
a107 1
      assert(Elements(targets) == NUM_TEXTURE_TARGETS);
a117 1
#if FEATURE_EXT_framebuffer_object
a119 1
#endif
d121 1
a121 1
   make_empty_list(& shared->SyncObjects);
a166 1
#if FEATURE_ATI_fragment_shader
a177 1
#endif
d189 1
a189 1
      ctx->Driver.UnmapBuffer(ctx, 0, bufObj);
d259 1
d263 1
a263 1
      rb->Delete(rb);
a266 1
#if FEATURE_ARB_sampler_objects
a276 1
#endif
d296 5
a300 3
   /* Free the dummy/fallback texture object */
   if (shared->FallbackTex)
      ctx->Driver.DeleteTexture(ctx, shared->FallbackTex);
a307 1
#if FEATURE_ARB_shader_objects
a310 1
#endif
a314 1
#if FEATURE_ARB_vertex_program
a315 3
#endif

#if FEATURE_ARB_fragment_program
a316 1
#endif
a317 1
#if FEATURE_ATI_fragment_shader
a320 1
#endif
a321 1
#if FEATURE_ARB_vertex_buffer_object || FEATURE_ARB_pixel_buffer_object
a323 1
#endif
a324 1
#if FEATURE_EXT_framebuffer_object
a328 1
#endif
a329 1
#if FEATURE_ARB_vertex_buffer_object
a330 1
#endif
d333 1
a333 2
      struct simple_node *node;
      struct simple_node *temp;
d335 2
a336 2
      foreach_s(node, temp, & shared->SyncObjects) {
	 _mesa_unref_sync_object(ctx, (struct gl_sync_object *) node);
d339 1
a340 1
#if FEATURE_ARB_sampler_objects
a342 1
#endif
d366 2
a367 7
 * Decrement shared state object reference count and potentially free it
 * and all children structures.
 *
 * \param ctx GL context.
 * \param shared shared state pointer.
 *
 * \sa free_shared_state().
d370 17
a386 4
_mesa_release_shared_state(struct gl_context *ctx,
                           struct gl_shared_state *shared)
{
   GLint RefCount;
d388 3
a390 3
   _glthread_LOCK_MUTEX(shared->Mutex);
   RefCount = --shared->RefCount;
   _glthread_UNLOCK_MUTEX(shared->Mutex);
d392 2
a393 1
   assert(RefCount >= 0);
d395 6
a400 3
   if (RefCount == 0) {
      /* free shared state */
      free_shared_state( ctx, shared );
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a29 2


d31 1
d41 3
d47 1
d96 5
d108 1
d117 1
d280 14
d369 5
d405 2
a406 1
_mesa_release_shared_state(struct gl_context *ctx, struct gl_shared_state *shared)
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d35 3
a37 1
#include "arrayobj.h"
d40 1
a40 2
#include "shader/program.h"
#include "shader/shader_api.h"
d42 1
a42 4
#if FEATURE_ATI_fragment_shader
#include "shader/atifragshader.h"
#endif
#if FEATURE_ARB_sync
a43 1
#endif
d55 1
a55 1
_mesa_alloc_shared_state(GLcontext *ctx)
a122 1
#if FEATURE_ARB_sync
a123 1
#endif
d136 1
a136 1
   GLcontext *ctx = (GLcontext *) userData;
d148 1
a148 1
   GLcontext *ctx = (GLcontext *) userData;
d160 1
a160 1
   GLcontext *ctx = (GLcontext *) userData;
d178 1
a178 1
   GLcontext *ctx = (GLcontext *) userData;
d191 1
a191 1
   GLcontext *ctx = (GLcontext *) userData;
d207 1
a207 1
   GLcontext *ctx = (GLcontext *) userData;
d223 1
a223 1
   GLcontext *ctx = (GLcontext *) userData;
d226 1
a226 1
      _mesa_free_shader(ctx, sh);
d231 1
a231 1
      _mesa_free_shader_program(ctx, shProg);
d283 1
a283 1
free_shared_state(GLcontext *ctx, struct gl_shared_state *shared)
d287 4
a335 1
#if FEATURE_ARB_sync
a343 1
#endif
d376 1
a376 1
_mesa_release_shared_state(GLcontext *ctx, struct gl_shared_state *shared)
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d35 1
a35 3
#if FEATURE_ATI_fragment_shader
#include "atifragshader.h"
#endif
d38 2
a39 1
#include "program/program.h"
d41 4
a44 1
#include "shaderobj.h"
d46 1
d58 1
a58 1
_mesa_alloc_shared_state(struct gl_context *ctx)
d126 1
d128 1
d141 1
a141 1
   struct gl_context *ctx = (struct gl_context *) userData;
d153 1
a153 1
   struct gl_context *ctx = (struct gl_context *) userData;
d165 1
a165 1
   struct gl_context *ctx = (struct gl_context *) userData;
d183 1
a183 1
   struct gl_context *ctx = (struct gl_context *) userData;
d196 1
a196 1
   struct gl_context *ctx = (struct gl_context *) userData;
d212 1
a212 1
   struct gl_context *ctx = (struct gl_context *) userData;
d228 1
a228 1
   struct gl_context *ctx = (struct gl_context *) userData;
d231 1
a231 1
      ctx->Driver.DeleteShader(ctx, sh);
d236 1
a236 1
      ctx->Driver.DeleteShaderProgram(ctx, shProg);
d288 1
a288 1
free_shared_state(struct gl_context *ctx, struct gl_shared_state *shared)
a291 4
   /* Free the dummy/fallback texture object */
   if (shared->FallbackTex)
      ctx->Driver.DeleteTexture(ctx, shared->FallbackTex);

d337 1
d346 1
d379 1
a379 1
_mesa_release_shared_state(struct gl_context *ctx, struct gl_shared_state *shared)
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d30 2
d35 1
a35 1
#include "hash_table.h"
d37 1
a41 2
#include "samplerobj.h"
#include "set.h"
a44 1

d70 9
a78 6
   shared->DefaultVertexProgram =
      gl_vertex_program(ctx->Driver.NewProgram(ctx,
                                               GL_VERTEX_PROGRAM_ARB, 0));
   shared->DefaultFragmentProgram =
      gl_fragment_program(ctx->Driver.NewProgram(ctx,
                                                 GL_FRAGMENT_PROGRAM_ARB, 0));
d80 1
d83 1
d85 1
d87 1
d89 1
d91 1
a91 3

   /* GL_ARB_sampler_objects */
   shared->SamplerObjects = _mesa_NewHashTable();
d99 1
a99 5
      static const GLenum targets[] = {
         GL_TEXTURE_2D_MULTISAMPLE,
         GL_TEXTURE_2D_MULTISAMPLE_ARRAY,
         GL_TEXTURE_CUBE_MAP_ARRAY,
         GL_TEXTURE_BUFFER,
a101 1
         GL_TEXTURE_EXTERNAL_OES,
a107 1
      STATIC_ASSERT(Elements(targets) == NUM_TEXTURE_TARGETS);
d118 1
d121 1
d123 1
a123 1
   shared->SyncObjects = _mesa_set_create(NULL, _mesa_key_pointer_equal);
d169 1
d181 1
d193 1
a193 1
      ctx->Driver.UnmapBuffer(ctx, bufObj);
a262 1
   struct gl_context *ctx = (struct gl_context *) userData;
d266 1
a266 13
      rb->Delete(ctx, rb);
}


/**
 * Callback for deleting a sampler object. Called by _mesa_HashDeleteAll()
 */
static void
delete_sampler_object_cb(GLuint id, void *data, void *userData)
{
   struct gl_context *ctx = (struct gl_context *) userData;
   struct gl_sampler_object *sampObj = (struct gl_sampler_object *) data;
   _mesa_reference_sampler_object(ctx, &sampObj, NULL);
d287 3
a289 5
   /* Free the dummy/fallback texture objects */
   for (i = 0; i < NUM_TEXTURE_TARGETS; i++) {
      if (shared->FallbackTex[i])
         ctx->Driver.DeleteTexture(ctx, shared->FallbackTex[i]);
   }
d297 1
d301 1
d306 1
d308 3
d312 1
d314 1
d318 1
d320 1
d323 1
d325 1
d330 1
d332 1
d334 1
d337 2
a338 1
      struct set_entry *entry;
d340 2
a341 2
      set_foreach(shared->SyncObjects, entry) {
         _mesa_unref_sync_object(ctx, (struct gl_sync_object *) entry->key);
a343 4
   _mesa_set_destroy(shared->SyncObjects, NULL);

   _mesa_HashDeleteAll(shared->SamplerObjects, delete_sampler_object_cb, ctx);
   _mesa_DeleteHashTable(shared->SamplerObjects);
d367 7
a373 2
 * gl_shared_state objects are ref counted.
 * If ptr's refcount goes to zero, free the shared state.
d376 3
a378 17
_mesa_reference_shared_state(struct gl_context *ctx,
                             struct gl_shared_state **ptr,
                             struct gl_shared_state *state)
{
   if (*ptr == state)
      return;

   if (*ptr) {
      /* unref old state */
      struct gl_shared_state *old = *ptr;
      GLboolean delete;

      _glthread_LOCK_MUTEX(old->Mutex);
      assert(old->RefCount >= 1);
      old->RefCount--;
      delete = (old->RefCount == 0);
      _glthread_UNLOCK_MUTEX(old->Mutex);
d380 3
a382 3
      if (delete) {
         free_shared_state(ctx, old);
      }
d384 1
a384 2
      *ptr = NULL;
   }
d386 3
a388 6
   if (state) {
      /* reference new state */
      _glthread_LOCK_MUTEX(state->Mutex);
      state->RefCount++;
      *ptr = state;
      _glthread_UNLOCK_MUTEX(state->Mutex);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a40 1
#include "shaderapi.h"
d64 1
a64 1
   mtx_init(&shared->Mutex, mtx_plain);
d115 1
a115 1
   mtx_init(&shared->TexMutex, mtx_plain);
d188 4
a191 2

   _mesa_buffer_unmap_all_mappings(ctx, bufObj);
d221 1
a221 1
   if (_mesa_validate_shader_target(ctx, sh->Type)) {
d358 2
a359 2
   mtx_destroy(&shared->Mutex);
   mtx_destroy(&shared->TexMutex);
d382 1
a382 1
      mtx_lock(&old->Mutex);
d386 1
a386 1
      mtx_unlock(&old->Mutex);
d397 1
a397 1
      mtx_lock(&state->Mutex);
d400 1
a400 1
      mtx_unlock(&state->Mutex);
@


1.1.1.4
log
@Import Mesa 10.2.7
@
text
@a314 1
   _mesa_reference_geomprog(ctx, &shared->DefaultGeometryProgram, NULL);
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d33 1
a44 1
#include "util/hash_table.h"
d89 1
a89 1
   shared->NullBufferObj = ctx->Driver.NewBufferObject(ctx, 0);
d116 1
a116 1
   mtx_init(&shared->TexMutex, mtx_recursive);
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@a32 1
#include "hash_table.h"
d44 1
d89 1
a89 1
   shared->NullBufferObj = ctx->Driver.NewBufferObject(ctx, 0, 0);
d116 1
a116 1
   mtx_init(&shared->TexMutex, mtx_plain);
@


