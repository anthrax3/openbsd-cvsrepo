head	1.10;
access;
symbols
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.12.23.05.17.52;	author jsg;	state dead;
branches;
next	1.9;
commitid	TnlogFl9nOv2eaRf;

1.9
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.8;
commitid	4ry2gvZGMXkCUD2n;

1.8
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.7;
commitid	mcxB0JvoI9gTDYXU;

1.7
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.6;
commitid	WPD6rgPryPkvXOr9;

1.6
date	2013.09.05.14.06.23;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.31;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.41;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.50.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.50.06;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.46;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.16.40;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.02;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.12.43;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.49.50;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.10
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**
 * \file hash.c
 * Generic hash table. 
 *
 * Used for display lists, texture objects, vertex/fragment programs,
 * buffer objects, etc.  The hash functions are thread-safe.
 * 
 * \note key=0 is illegal.
 *
 * \author Brian Paul
 */

/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#include "glheader.h"
#include "imports.h"
#include "hash.h"
#include "hash_table.h"

/**
 * Magic GLuint object name that gets stored outside of the struct hash_table.
 *
 * The hash table needs a particular pointer to be the marker for a key that
 * was deleted from the table, along with NULL for the "never allocated in the
 * table" marker.  Legacy GL allows any GLuint to be used as a GL object name,
 * and we use a 1:1 mapping from GLuints to key pointers, so we need to be
 * able to track a GLuint that happens to match the deleted key outside of
 * struct hash_table.  We tell the hash table to use "1" as the deleted key
 * value, so that we test the deleted-key-in-the-table path as best we can.
 */
#define DELETED_KEY_VALUE 1

/**
 * The hash table data structure.  
 */
struct _mesa_HashTable {
   struct hash_table *ht;
   GLuint MaxKey;                        /**< highest key inserted so far */
   mtx_t Mutex;                /**< mutual exclusion lock */
   mtx_t WalkMutex;            /**< for _mesa_HashWalk() */
   GLboolean InDeleteAll;                /**< Debug check */
   /** Value that would be in the table for DELETED_KEY_VALUE. */
   void *deleted_key_data;
};

/** @@{
 * Mapping from our use of GLuint as both the key and the hash value to the
 * hash_table.h API
 *
 * There exist many integer hash functions, designed to avoid collisions when
 * the integers are spread across key space with some patterns.  In GL, the
 * pattern (in the case of glGen*()ed object IDs) is that the keys are unique
 * contiguous integers starting from 1.  Because of that, we just use the key
 * as the hash value, to minimize the cost of the hash function.  If objects
 * are never deleted, we will never see a collision in the table, because the
 * table resizes itself when it approaches full, and thus key % table_size ==
 * key.
 *
 * The case where we could have collisions for genned objects would be
 * something like: glGenBuffers(&a, 100); glDeleteBuffers(&a + 50, 50);
 * glGenBuffers(&b, 100), because objects 1-50 and 101-200 are allocated at
 * the end of that sequence, instead of 1-150.  So far it doesn't appear to be
 * a problem.
 */
static bool
uint_key_compare(const void *a, const void *b)
{
   return a == b;
}

static uint32_t
uint_hash(GLuint id)
{
   return id;
}

static void *
uint_key(GLuint id)
{
   return (void *)(uintptr_t) id;
}
/** @@} */

/**
 * Create a new hash table.
 * 
 * \return pointer to a new, empty hash table.
 */
struct _mesa_HashTable *
_mesa_NewHashTable(void)
{
   struct _mesa_HashTable *table = CALLOC_STRUCT(_mesa_HashTable);

   if (table) {
      table->ht = _mesa_hash_table_create(NULL, uint_key_compare);
      _mesa_hash_table_set_deleted_key(table->ht, uint_key(DELETED_KEY_VALUE));
      mtx_init(&table->Mutex, mtx_plain);
      mtx_init(&table->WalkMutex, mtx_plain);
   }
   return table;
}



/**
 * Delete a hash table.
 * Frees each entry on the hash table and then the hash table structure itself.
 * Note that the caller should have already traversed the table and deleted
 * the objects in the table (i.e. We don't free the entries' data pointer).
 *
 * \param table the hash table to delete.
 */
void
_mesa_DeleteHashTable(struct _mesa_HashTable *table)
{
   assert(table);

   if (_mesa_hash_table_next_entry(table->ht, NULL) != NULL) {
      _mesa_problem(NULL, "In _mesa_DeleteHashTable, found non-freed data");
   }

   _mesa_hash_table_destroy(table->ht, NULL);

   mtx_destroy(&table->Mutex);
   mtx_destroy(&table->WalkMutex);
   free(table);
}



/**
 * Lookup an entry in the hash table, without locking.
 * \sa _mesa_HashLookup
 */
static inline void *
_mesa_HashLookup_unlocked(struct _mesa_HashTable *table, GLuint key)
{
   const struct hash_entry *entry;

   assert(table);
   assert(key);

   if (key == DELETED_KEY_VALUE)
      return table->deleted_key_data;

   entry = _mesa_hash_table_search(table->ht, uint_hash(key), uint_key(key));
   if (!entry)
      return NULL;

   return entry->data;
}


/**
 * Lookup an entry in the hash table.
 * 
 * \param table the hash table.
 * \param key the key.
 * 
 * \return pointer to user's data or NULL if key not in table
 */
void *
_mesa_HashLookup(struct _mesa_HashTable *table, GLuint key)
{
   void *res;
   assert(table);
   mtx_lock(&table->Mutex);
   res = _mesa_HashLookup_unlocked(table, key);
   mtx_unlock(&table->Mutex);
   return res;
}


/**
 * Lookup an entry in the hash table without locking the mutex.
 *
 * The hash table mutex must be locked manually by calling
 * _mesa_HashLockMutex() before calling this function.
 *
 * \param table the hash table.
 * \param key the key.
 *
 * \return pointer to user's data or NULL if key not in table
 */
void *
_mesa_HashLookupLocked(struct _mesa_HashTable *table, GLuint key)
{
   return _mesa_HashLookup_unlocked(table, key);
}


/**
 * Lock the hash table mutex.
 *
 * This function should be used when multiple objects need
 * to be looked up in the hash table, to avoid having to lock
 * and unlock the mutex each time.
 *
 * \param table the hash table.
 */
void
_mesa_HashLockMutex(struct _mesa_HashTable *table)
{
   assert(table);
   mtx_lock(&table->Mutex);
}


/**
 * Unlock the hash table mutex.
 *
 * \param table the hash table.
 */
void
_mesa_HashUnlockMutex(struct _mesa_HashTable *table)
{
   assert(table);
   mtx_unlock(&table->Mutex);
}


static inline void
_mesa_HashInsert_unlocked(struct _mesa_HashTable *table, GLuint key, void *data)
{
   uint32_t hash = uint_hash(key);
   struct hash_entry *entry;

   assert(table);
   assert(key);

   if (key > table->MaxKey)
      table->MaxKey = key;

   if (key == DELETED_KEY_VALUE) {
      table->deleted_key_data = data;
   } else {
      entry = _mesa_hash_table_search(table->ht, hash, uint_key(key));
      if (entry) {
         entry->data = data;
      } else {
         _mesa_hash_table_insert(table->ht, hash, uint_key(key), data);
      }
   }
}


/**
 * Insert a key/pointer pair into the hash table without locking the mutex.
 * If an entry with this key already exists we'll replace the existing entry.
 *
 * The hash table mutex must be locked manually by calling
 * _mesa_HashLockMutex() before calling this function.
 *
 * \param table the hash table.
 * \param key the key (not zero).
 * \param data pointer to user data.
 */
void
_mesa_HashInsertLocked(struct _mesa_HashTable *table, GLuint key, void *data)
{
   _mesa_HashInsert_unlocked(table, key, data);
}


/**
 * Insert a key/pointer pair into the hash table.
 * If an entry with this key already exists we'll replace the existing entry.
 *
 * \param table the hash table.
 * \param key the key (not zero).
 * \param data pointer to user data.
 */
void
_mesa_HashInsert(struct _mesa_HashTable *table, GLuint key, void *data)
{
   assert(table);
   mtx_lock(&table->Mutex);
   _mesa_HashInsert_unlocked(table, key, data);
   mtx_unlock(&table->Mutex);
}


/**
 * Remove an entry from the hash table.
 * 
 * \param table the hash table.
 * \param key key of entry to remove.
 *
 * While holding the hash table's lock, searches the entry with the matching
 * key and unlinks it.
 */
void
_mesa_HashRemove(struct _mesa_HashTable *table, GLuint key)
{
   struct hash_entry *entry;

   assert(table);
   assert(key);

   /* have to check this outside of mutex lock */
   if (table->InDeleteAll) {
      _mesa_problem(NULL, "_mesa_HashRemove illegally called from "
                    "_mesa_HashDeleteAll callback function");
      return;
   }

   mtx_lock(&table->Mutex);
   if (key == DELETED_KEY_VALUE) {
      table->deleted_key_data = NULL;
   } else {
      entry = _mesa_hash_table_search(table->ht, uint_hash(key), uint_key(key));
      _mesa_hash_table_remove(table->ht, entry);
   }
   mtx_unlock(&table->Mutex);
}



/**
 * Delete all entries in a hash table, but don't delete the table itself.
 * Invoke the given callback function for each table entry.
 *
 * \param table  the hash table to delete
 * \param callback  the callback function
 * \param userData  arbitrary pointer to pass along to the callback
 *                  (this is typically a struct gl_context pointer)
 */
void
_mesa_HashDeleteAll(struct _mesa_HashTable *table,
                    void (*callback)(GLuint key, void *data, void *userData),
                    void *userData)
{
   struct hash_entry *entry;

   ASSERT(table);
   ASSERT(callback);
   mtx_lock(&table->Mutex);
   table->InDeleteAll = GL_TRUE;
   hash_table_foreach(table->ht, entry) {
      callback((uintptr_t)entry->key, entry->data, userData);
      _mesa_hash_table_remove(table->ht, entry);
   }
   if (table->deleted_key_data) {
      callback(DELETED_KEY_VALUE, table->deleted_key_data, userData);
      table->deleted_key_data = NULL;
   }
   table->InDeleteAll = GL_FALSE;
   mtx_unlock(&table->Mutex);
}


/**
 * Clone all entries in a hash table, into a new table.
 *
 * \param table  the hash table to clone
 */
struct _mesa_HashTable *
_mesa_HashClone(const struct _mesa_HashTable *table)
{
   /* cast-away const */
   struct _mesa_HashTable *table2 = (struct _mesa_HashTable *) table;
   struct hash_entry *entry;
   struct _mesa_HashTable *clonetable;

   ASSERT(table);
   mtx_lock(&table2->Mutex);

   clonetable = _mesa_NewHashTable();
   assert(clonetable);
   hash_table_foreach(table->ht, entry) {
      _mesa_HashInsert(clonetable, (GLint)(uintptr_t)entry->key, entry->data);
   }

   mtx_unlock(&table2->Mutex);

   return clonetable;
}


/**
 * Walk over all entries in a hash table, calling callback function for each.
 * Note: we use a separate mutex in this function to avoid a recursive
 * locking deadlock (in case the callback calls _mesa_HashRemove()) and to
 * prevent multiple threads/contexts from getting tangled up.
 * A lock-less version of this function could be used when the table will
 * not be modified.
 * \param table  the hash table to walk
 * \param callback  the callback function
 * \param userData  arbitrary pointer to pass along to the callback
 *                  (this is typically a struct gl_context pointer)
 */
void
_mesa_HashWalk(const struct _mesa_HashTable *table,
               void (*callback)(GLuint key, void *data, void *userData),
               void *userData)
{
   /* cast-away const */
   struct _mesa_HashTable *table2 = (struct _mesa_HashTable *) table;
   struct hash_entry *entry;

   ASSERT(table);
   ASSERT(callback);
   mtx_lock(&table2->WalkMutex);
   hash_table_foreach(table->ht, entry) {
      callback((uintptr_t)entry->key, entry->data, userData);
   }
   if (table->deleted_key_data)
      callback(DELETED_KEY_VALUE, table->deleted_key_data, userData);
   mtx_unlock(&table2->WalkMutex);
}

static void
debug_print_entry(GLuint key, void *data, void *userData)
{
   _mesa_debug(NULL, "%u %p\n", key, data);
}

/**
 * Dump contents of hash table for debugging.
 * 
 * \param table the hash table.
 */
void
_mesa_HashPrint(const struct _mesa_HashTable *table)
{
   if (table->deleted_key_data)
      debug_print_entry(DELETED_KEY_VALUE, table->deleted_key_data, NULL);
   _mesa_HashWalk(table, debug_print_entry, NULL);
}


/**
 * Find a block of adjacent unused hash keys.
 * 
 * \param table the hash table.
 * \param numKeys number of keys needed.
 * 
 * \return Starting key of free block or 0 if failure.
 *
 * If there are enough free keys between the maximum key existing in the table
 * (_mesa_HashTable::MaxKey) and the maximum key possible, then simply return
 * the adjacent key. Otherwise do a full search for a free key block in the
 * allowable key range.
 */
GLuint
_mesa_HashFindFreeKeyBlock(struct _mesa_HashTable *table, GLuint numKeys)
{
   const GLuint maxKey = ~((GLuint) 0) - 1;
   mtx_lock(&table->Mutex);
   if (maxKey - numKeys > table->MaxKey) {
      /* the quick solution */
      mtx_unlock(&table->Mutex);
      return table->MaxKey + 1;
   }
   else {
      /* the slow solution */
      GLuint freeCount = 0;
      GLuint freeStart = 1;
      GLuint key;
      for (key = 1; key != maxKey; key++) {
	 if (_mesa_HashLookup_unlocked(table, key)) {
	    /* darn, this key is already in use */
	    freeCount = 0;
	    freeStart = key+1;
	 }
	 else {
	    /* this key not in use, check if we've found enough */
	    freeCount++;
	    if (freeCount == numKeys) {
               mtx_unlock(&table->Mutex);
	       return freeStart;
	    }
	 }
      }
      /* cannot allocate a block of numKeys consecutive keys */
      mtx_unlock(&table->Mutex);
      return 0;
   }
}


/**
 * Return the number of entries in the hash table.
 */
GLuint
_mesa_HashNumEntries(const struct _mesa_HashTable *table)
{
   struct hash_entry *entry;
   GLuint count = 0;

   if (table->deleted_key_data)
      count++;

   hash_table_foreach(table->ht, entry)
      count++;

   return count;
}
@


1.9
log
@Merge Mesa 10.2.9
@
text
@@


1.8
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d40 1
a40 1
#include "util/hash_table.h"
a117 6
      if (table->ht == NULL) {
         free(table);
         _mesa_error_no_memory(__func__);
         return NULL;
      }

a121 4
   else {
      _mesa_error_no_memory(__func__);
   }

@


1.7
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d40 1
a40 1
#include "hash_table.h"
d118 6
d128 4
@


1.6
log
@Merge Mesa 9.2.0
@
text
@a38 1
#include "glapi/glthread.h"
d61 2
a62 2
   _glthread_Mutex Mutex;                /**< mutual exclusion lock */
   _glthread_Mutex WalkMutex;            /**< for _mesa_HashWalk() */
d119 2
a120 2
      _glthread_INIT_MUTEX(table->Mutex);
      _glthread_INIT_MUTEX(table->WalkMutex);
d146 2
a147 2
   _glthread_DESTROY_MUTEX(table->Mutex);
   _glthread_DESTROY_MUTEX(table->WalkMutex);
d189 1
a189 1
   _glthread_LOCK_MUTEX(table->Mutex);
d191 1
a191 1
   _glthread_UNLOCK_MUTEX(table->Mutex);
d197 37
a233 3
 * Insert a key/pointer pair into the hash table.  
 * If an entry with this key already exists we'll replace the existing entry.
 * 
a234 2
 * \param key the key (not zero).
 * \param data pointer to user data.
d237 9
a245 1
_mesa_HashInsert(struct _mesa_HashTable *table, GLuint key, void *data)
a252 2
   _glthread_LOCK_MUTEX(table->Mutex);

d266 2
d269 15
a283 1
   _glthread_UNLOCK_MUTEX(table->Mutex);
d287 17
d329 1
a329 1
   _glthread_LOCK_MUTEX(table->Mutex);
d336 1
a336 1
   _glthread_UNLOCK_MUTEX(table->Mutex);
d359 1
a359 1
   _glthread_LOCK_MUTEX(table->Mutex);
d370 29
a398 1
   _glthread_UNLOCK_MUTEX(table->Mutex);
d425 1
a425 1
   _glthread_LOCK_MUTEX(table2->WalkMutex);
d431 1
a431 1
   _glthread_UNLOCK_MUTEX(table2->WalkMutex);
d471 1
a471 1
   _glthread_LOCK_MUTEX(table->Mutex);
d474 1
a474 1
      _glthread_UNLOCK_MUTEX(table->Mutex);
d492 1
a492 1
               _glthread_UNLOCK_MUTEX(table->Mutex);
d498 1
a498 1
      _glthread_UNLOCK_MUTEX(table->Mutex);
@


1.5
log
@Merge Mesa 7.10.3
@
text
@a14 1
 * Version:  6.5.1
d31 4
a34 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
a36 1

d41 1
a41 6


#define TABLE_SIZE 1023  /**< Size of lookup table/array */

#define HASH_FUNC(K)  ((K) % TABLE_SIZE)

d44 9
a52 1
 * An entry in the hash table.  
d54 1
a54 6
struct HashEntry {
   GLuint Key;             /**< the entry's key */
   void *Data;             /**< the entry's data */
   struct HashEntry *Next; /**< pointer to next entry */
};

d60 1
a60 1
   struct HashEntry *Table[TABLE_SIZE];  /**< the lookup table */
d65 2
d69 30
d100 6
d116 1
d118 2
a138 1
   GLuint pos;
d140 3
a142 11
   for (pos = 0; pos < TABLE_SIZE; pos++) {
      struct HashEntry *entry = table->Table[pos];
      while (entry) {
	 struct HashEntry *next = entry->Next;
         if (entry->Data) {
            _mesa_problem(NULL,
                          "In _mesa_DeleteHashTable, found non-freed data");
         }
	 free(entry);
	 entry = next;
      }
d144 3
d158 1
a158 1
static INLINE void *
d161 1
a161 2
   GLuint pos;
   const struct HashEntry *entry;
d166 8
a173 9
   pos = HASH_FUNC(key);
   entry = table->Table[pos];
   while (entry) {
      if (entry->Key == key) {
         return entry->Data;
      }
      entry = entry->Next;
   }
   return NULL;
d208 2
a209 3
   /* search for existing entry with this key */
   GLuint pos;
   struct HashEntry *entry;
d219 8
a226 14
   pos = HASH_FUNC(key);

   /* check if replacing an existing entry with same key */
   for (entry = table->Table[pos]; entry; entry = entry->Next) {
      if (entry->Key == key) {
         /* replace entry's data */
#if 0 /* not sure this check is always valid */
         if (entry->Data) {
            _mesa_problem(NULL, "Memory leak detected in _mesa_HashInsert");
         }
#endif
	 entry->Data = data;
         _glthread_UNLOCK_MUTEX(table->Mutex);
	 return;
a229 9
   /* alloc and insert new table entry */
   entry = MALLOC_STRUCT(HashEntry);
   if (entry) {
      entry->Key = key;
      entry->Data = data;
      entry->Next = table->Table[pos];
      table->Table[pos] = entry;
   }

d247 1
a247 2
   GLuint pos;
   struct HashEntry *entry, *prev;
d260 5
a264 19

   pos = HASH_FUNC(key);
   prev = NULL;
   entry = table->Table[pos];
   while (entry) {
      if (entry->Key == key) {
         /* found it! */
         if (prev) {
            prev->Next = entry->Next;
         }
         else {
            table->Table[pos] = entry->Next;
         }
         free(entry);
         _glthread_UNLOCK_MUTEX(table->Mutex);
	 return;
      }
      prev = entry;
      entry = entry->Next;
a265 1

d285 2
a286 1
   GLuint pos;
d291 7
a297 8
   for (pos = 0; pos < TABLE_SIZE; pos++) {
      struct HashEntry *entry, *next;
      for (entry = table->Table[pos]; entry; entry = next) {
         callback(entry->Key, entry->Data, userData);
         next = entry->Next;
         free(entry);
      }
      table->Table[pos] = NULL;
d323 2
a324 1
   GLuint pos;
d328 2
a329 7
   for (pos = 0; pos < TABLE_SIZE; pos++) {
      struct HashEntry *entry, *next;
      for (entry = table->Table[pos]; entry; entry = next) {
         /* save 'next' pointer now in case the callback deletes the entry */
         next = entry->Next;
         callback(entry->Key, entry->Data, userData);
      }
d331 2
d336 2
a337 11

/**
 * Return the key of the "first" entry in the hash table.
 * While holding the lock, walks through all table positions until finding
 * the first entry of the first non-empty one.
 * 
 * \param table  the hash table
 * \return key for the "first" entry in the hash table.
 */
GLuint
_mesa_HashFirstEntry(struct _mesa_HashTable *table)
d339 1
a339 11
   GLuint pos;
   assert(table);
   _glthread_LOCK_MUTEX(table->Mutex);
   for (pos = 0; pos < TABLE_SIZE; pos++) {
      if (table->Table[pos]) {
         _glthread_UNLOCK_MUTEX(table->Mutex);
         return table->Table[pos]->Key;
      }
   }
   _glthread_UNLOCK_MUTEX(table->Mutex);
   return 0;
a341 47

/**
 * Given a hash table key, return the next key.  This is used to walk
 * over all entries in the table.  Note that the keys returned during
 * walking won't be in any particular order.
 * \return next hash key or 0 if end of table.
 */
GLuint
_mesa_HashNextEntry(const struct _mesa_HashTable *table, GLuint key)
{
   const struct HashEntry *entry;
   GLuint pos;

   assert(table);
   assert(key);

   /* Find the entry with given key */
   pos = HASH_FUNC(key);
   for (entry = table->Table[pos]; entry ; entry = entry->Next) {
      if (entry->Key == key) {
         break;
      }
   }

   if (!entry) {
      /* the given key was not found, so we can't find the next entry */
      return 0;
   }

   if (entry->Next) {
      /* return next in linked list */
      return entry->Next->Key;
   }
   else {
      /* look for next non-empty table slot */
      pos++;
      while (pos < TABLE_SIZE) {
         if (table->Table[pos]) {
            return table->Table[pos]->Key;
         }
         pos++;
      }
      return 0;
   }
}


d350 3
a352 9
   GLuint pos;
   assert(table);
   for (pos = 0; pos < TABLE_SIZE; pos++) {
      const struct HashEntry *entry = table->Table[pos];
      while (entry) {
	 _mesa_debug(NULL, "%u %p\n", entry->Key, entry->Data);
	 entry = entry->Next;
      }
   }
a355 1

d372 1
a372 1
   const GLuint maxKey = ~((GLuint) 0);
a405 2
#if 0 /* debug only */

d407 1
a407 1
 * Test walking over all the entries in a hash table.
d409 2
a410 40
static void
test_hash_walking(void)
{
   struct _mesa_HashTable *t = _mesa_NewHashTable();
   const GLuint limit = 50000;
   GLuint i;

   /* create some entries */
   for (i = 0; i < limit; i++) {
      GLuint dummy;
      GLuint k = (rand() % (limit * 10)) + 1;
      while (_mesa_HashLookup(t, k)) {
         /* id already in use, try another */
         k = (rand() % (limit * 10)) + 1;
      }
      _mesa_HashInsert(t, k, &dummy);
   }

   /* walk over all entries */
   {
      GLuint k = _mesa_HashFirstEntry(t);
      GLuint count = 0;
      while (k) {
         GLuint knext = _mesa_HashNextEntry(t, k);
         assert(knext != k);
         _mesa_HashRemove(t, k);
         count++;
         k = knext;
      }
      assert(count == limit);
      k = _mesa_HashFirstEntry(t);
      assert(k==0);
   }

   _mesa_DeleteHashTable(t);
}


void
_mesa_test_hash_functions(void)
d412 2
a413 2
   int a, b, c;
   struct _mesa_HashTable *t;
d415 2
a416 5
   t = _mesa_NewHashTable();
   _mesa_HashInsert(t, 501, &a);
   _mesa_HashInsert(t, 10, &c);
   _mesa_HashInsert(t, 0xfffffff8, &b);
   /*_mesa_HashPrint(t);*/
d418 2
a419 3
   assert(_mesa_HashLookup(t,501));
   assert(!_mesa_HashLookup(t,1313));
   assert(_mesa_HashFindFreeKeyBlock(t, 100));
d421 1
a421 3
   _mesa_DeleteHashTable(t);

   test_hash_walking();
a422 2

#endif
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d280 1
a280 1
 *                  (this is typically a GLcontext pointer)
d316 1
a316 1
 *                  (this is typically a GLcontext pointer)
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d111 1
a111 1
	 _mesa_free(entry);
d117 1
a117 1
   _mesa_free(table);
d123 2
a124 6
 * Lookup an entry in the hash table.
 * 
 * \param table the hash table.
 * \param key the key.
 * 
 * \return pointer to user's data or NULL if key not in table
d126 2
a127 2
void *
_mesa_HashLookup(const struct _mesa_HashTable *table, GLuint key)
d139 1
a139 1
	 return entry->Data;
d147 19
d209 6
a214 4
   entry->Key = key;
   entry->Data = data;
   entry->Next = table->Table[pos];
   table->Table[pos] = entry;
d260 1
a260 1
         _mesa_free(entry);
d297 1
a297 1
         _mesa_free(entry);
d462 1
a462 1
	 if (_mesa_HashLookup(table, key)) {
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d66 1
d83 1
d116 1
d291 5
d311 1
a311 1
   _glthread_UNLOCK_MUTEX(table2->Mutex);
d313 4
a316 2
      struct HashEntry *entry;
      for (entry = table->Table[pos]; entry; entry = entry->Next) {
d320 1
a320 1
   _glthread_UNLOCK_MUTEX(table2->Mutex);
@


1.1
log
@Initial revision
@
text
@d40 1
a40 1
#include "glthread.h"
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d40 1
a40 1
#include "glapi/glthread.h"
a65 1
   _glthread_Mutex WalkMutex;            /**< for _mesa_HashWalk() */
a81 1
      _glthread_INIT_MUTEX(table->WalkMutex);
d109 1
a109 1
	 free(entry);
d114 1
a114 2
   _glthread_DESTROY_MUTEX(table->WalkMutex);
   free(table);
d120 6
a125 2
 * Lookup an entry in the hash table, without locking.
 * \sa _mesa_HashLookup
d127 2
a128 2
static INLINE void *
_mesa_HashLookup_unlocked(struct _mesa_HashTable *table, GLuint key)
d140 1
a140 1
         return entry->Data;
a147 19
/**
 * Lookup an entry in the hash table.
 * 
 * \param table the hash table.
 * \param key the key.
 * 
 * \return pointer to user's data or NULL if key not in table
 */
void *
_mesa_HashLookup(struct _mesa_HashTable *table, GLuint key)
{
   void *res;
   assert(table);
   _glthread_LOCK_MUTEX(table->Mutex);
   res = _mesa_HashLookup_unlocked(table, key);
   _glthread_UNLOCK_MUTEX(table->Mutex);
   return res;
}

d191 4
a194 6
   if (entry) {
      entry->Key = key;
      entry->Data = data;
      entry->Next = table->Table[pos];
      table->Table[pos] = entry;
   }
d240 1
a240 1
         free(entry);
d260 1
a260 1
 *                  (this is typically a struct gl_context pointer)
d277 1
a277 1
         free(entry);
a287 5
 * Note: we use a separate mutex in this function to avoid a recursive
 * locking deadlock (in case the callback calls _mesa_HashRemove()) and to
 * prevent multiple threads/contexts from getting tangled up.
 * A lock-less version of this function could be used when the table will
 * not be modified.
d291 1
a291 1
 *                  (this is typically a struct gl_context pointer)
d303 1
a303 1
   _glthread_LOCK_MUTEX(table2->WalkMutex);
d305 2
a306 4
      struct HashEntry *entry, *next;
      for (entry = table->Table[pos]; entry; entry = next) {
         /* save 'next' pointer now in case the callback deletes the entry */
         next = entry->Next;
d310 1
a310 1
   _glthread_UNLOCK_MUTEX(table2->WalkMutex);
d435 1
a435 1
	 if (_mesa_HashLookup_unlocked(table, key)) {
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d15 1
d32 3
a34 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d37 1
d42 6
a47 1
#include "hash_table.h"
d50 1
a50 9
 * Magic GLuint object name that gets stored outside of the struct hash_table.
 *
 * The hash table needs a particular pointer to be the marker for a key that
 * was deleted from the table, along with NULL for the "never allocated in the
 * table" marker.  Legacy GL allows any GLuint to be used as a GL object name,
 * and we use a 1:1 mapping from GLuints to key pointers, so we need to be
 * able to track a GLuint that happens to match the deleted key outside of
 * struct hash_table.  We tell the hash table to use "1" as the deleted key
 * value, so that we test the deleted-key-in-the-table path as best we can.
d52 6
a57 1
#define DELETED_KEY_VALUE 1
d63 1
a63 1
   struct hash_table *ht;
a67 2
   /** Value that would be in the table for DELETED_KEY_VALUE. */
   void *deleted_key_data;
a69 30
/** @@{
 * Mapping from our use of GLuint as both the key and the hash value to the
 * hash_table.h API
 *
 * There exist many integer hash functions, designed to avoid collisions when
 * the integers are spread across key space with some patterns.  In GL, the
 * pattern (in the case of glGen*()ed object IDs) is that the keys are unique
 * contiguous integers starting from 1.  Because of that, we just use the key
 * as the hash value, to minimize the cost of the hash function.  If objects
 * are never deleted, we will never see a collision in the table, because the
 * table resizes itself when it approaches full, and thus key % table_size ==
 * key.
 *
 * The case where we could have collisions for genned objects would be
 * something like: glGenBuffers(&a, 100); glDeleteBuffers(&a + 50, 50);
 * glGenBuffers(&b, 100), because objects 1-50 and 101-200 are allocated at
 * the end of that sequence, instead of 1-150.  So far it doesn't appear to be
 * a problem.
 */
static bool
uint_key_compare(const void *a, const void *b)
{
   return a == b;
}

static uint32_t
uint_hash(GLuint id)
{
   return id;
}
a70 6
static void *
uint_key(GLuint id)
{
   return (void *)(uintptr_t) id;
}
/** @@} */
a80 1

a81 2
      table->ht = _mesa_hash_table_create(NULL, uint_key_compare);
      _mesa_hash_table_set_deleted_key(table->ht, uint_key(DELETED_KEY_VALUE));
d101 1
d103 11
a113 3

   if (_mesa_hash_table_next_entry(table->ht, NULL) != NULL) {
      _mesa_problem(NULL, "In _mesa_DeleteHashTable, found non-freed data");
a114 3

   _mesa_hash_table_destroy(table->ht, NULL);

d126 1
a126 1
static inline void *
d129 2
a130 1
   const struct hash_entry *entry;
d135 9
a143 8
   if (key == DELETED_KEY_VALUE)
      return table->deleted_key_data;

   entry = _mesa_hash_table_search(table->ht, uint_hash(key), uint_key(key));
   if (!entry)
      return NULL;

   return entry->data;
d178 3
a180 2
   uint32_t hash = uint_hash(key);
   struct hash_entry *entry;
d190 14
a203 8
   if (key == DELETED_KEY_VALUE) {
      table->deleted_key_data = data;
   } else {
      entry = _mesa_hash_table_search(table->ht, hash, uint_key(key));
      if (entry) {
         entry->data = data;
      } else {
         _mesa_hash_table_insert(table->ht, hash, uint_key(key), data);
d207 9
d233 2
a234 1
   struct hash_entry *entry;
d247 19
a265 5
   if (key == DELETED_KEY_VALUE) {
      table->deleted_key_data = NULL;
   } else {
      entry = _mesa_hash_table_search(table->ht, uint_hash(key), uint_key(key));
      _mesa_hash_table_remove(table->ht, entry);
d267 1
d287 1
a287 2
   struct hash_entry *entry;

d292 8
a299 7
   hash_table_foreach(table->ht, entry) {
      callback((uintptr_t)entry->key, entry->data, userData);
      _mesa_hash_table_remove(table->ht, entry);
   }
   if (table->deleted_key_data) {
      callback(DELETED_KEY_VALUE, table->deleted_key_data, userData);
      table->deleted_key_data = NULL;
d325 1
a325 2
   struct hash_entry *entry;

d329 7
a335 2
   hash_table_foreach(table->ht, entry) {
      callback((uintptr_t)entry->key, entry->data, userData);
a336 2
   if (table->deleted_key_data)
      callback(DELETED_KEY_VALUE, table->deleted_key_data, userData);
d340 34
a373 2
static void
debug_print_entry(GLuint key, void *data, void *userData)
d375 34
a408 1
   _mesa_debug(NULL, "%u %p\n", key, data);
d411 1
d420 9
a428 3
   if (table->deleted_key_data)
      debug_print_entry(DELETED_KEY_VALUE, table->deleted_key_data, NULL);
   _mesa_HashWalk(table, debug_print_entry, NULL);
d432 1
d449 1
a449 1
   const GLuint maxKey = ~((GLuint) 0) - 1;
d483 2
d486 1
a486 1
 * Return the number of entries in the hash table.
d488 40
a527 2
GLuint
_mesa_HashNumEntries(const struct _mesa_HashTable *table)
d529 2
a530 2
   struct hash_entry *entry;
   GLuint count = 0;
d532 5
a536 2
   if (table->deleted_key_data)
      count++;
d538 3
a540 2
   hash_table_foreach(table->ht, entry)
      count++;
d542 3
a544 1
   return count;
d546 2
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d39 1
d62 2
a63 2
   mtx_t Mutex;                /**< mutual exclusion lock */
   mtx_t WalkMutex;            /**< for _mesa_HashWalk() */
d120 2
a121 2
      mtx_init(&table->Mutex, mtx_plain);
      mtx_init(&table->WalkMutex, mtx_plain);
d147 2
a148 2
   mtx_destroy(&table->Mutex);
   mtx_destroy(&table->WalkMutex);
d190 1
a190 1
   mtx_lock(&table->Mutex);
d192 1
a192 1
   mtx_unlock(&table->Mutex);
d198 3
a200 24
 * Lookup an entry in the hash table without locking the mutex.
 *
 * The hash table mutex must be locked manually by calling
 * _mesa_HashLockMutex() before calling this function.
 *
 * \param table the hash table.
 * \param key the key.
 *
 * \return pointer to user's data or NULL if key not in table
 */
void *
_mesa_HashLookupLocked(struct _mesa_HashTable *table, GLuint key)
{
   return _mesa_HashLookup_unlocked(table, key);
}


/**
 * Lock the hash table mutex.
 *
 * This function should be used when multiple objects need
 * to be looked up in the hash table, to avoid having to lock
 * and unlock the mutex each time.
 *
d202 2
d206 1
a206 22
_mesa_HashLockMutex(struct _mesa_HashTable *table)
{
   assert(table);
   mtx_lock(&table->Mutex);
}


/**
 * Unlock the hash table mutex.
 *
 * \param table the hash table.
 */
void
_mesa_HashUnlockMutex(struct _mesa_HashTable *table)
{
   assert(table);
   mtx_unlock(&table->Mutex);
}


static inline void
_mesa_HashInsert_unlocked(struct _mesa_HashTable *table, GLuint key, void *data)
d214 2
a228 2
}

d230 1
a230 15
/**
 * Insert a key/pointer pair into the hash table without locking the mutex.
 * If an entry with this key already exists we'll replace the existing entry.
 *
 * The hash table mutex must be locked manually by calling
 * _mesa_HashLockMutex() before calling this function.
 *
 * \param table the hash table.
 * \param key the key (not zero).
 * \param data pointer to user data.
 */
void
_mesa_HashInsertLocked(struct _mesa_HashTable *table, GLuint key, void *data)
{
   _mesa_HashInsert_unlocked(table, key, data);
a233 17
/**
 * Insert a key/pointer pair into the hash table.
 * If an entry with this key already exists we'll replace the existing entry.
 *
 * \param table the hash table.
 * \param key the key (not zero).
 * \param data pointer to user data.
 */
void
_mesa_HashInsert(struct _mesa_HashTable *table, GLuint key, void *data)
{
   assert(table);
   mtx_lock(&table->Mutex);
   _mesa_HashInsert_unlocked(table, key, data);
   mtx_unlock(&table->Mutex);
}

d259 1
a259 1
   mtx_lock(&table->Mutex);
d266 1
a266 1
   mtx_unlock(&table->Mutex);
d289 1
a289 1
   mtx_lock(&table->Mutex);
d300 1
a300 29
   mtx_unlock(&table->Mutex);
}


/**
 * Clone all entries in a hash table, into a new table.
 *
 * \param table  the hash table to clone
 */
struct _mesa_HashTable *
_mesa_HashClone(const struct _mesa_HashTable *table)
{
   /* cast-away const */
   struct _mesa_HashTable *table2 = (struct _mesa_HashTable *) table;
   struct hash_entry *entry;
   struct _mesa_HashTable *clonetable;

   ASSERT(table);
   mtx_lock(&table2->Mutex);

   clonetable = _mesa_NewHashTable();
   assert(clonetable);
   hash_table_foreach(table->ht, entry) {
      _mesa_HashInsert(clonetable, (GLint)(uintptr_t)entry->key, entry->data);
   }

   mtx_unlock(&table2->Mutex);

   return clonetable;
d327 1
a327 1
   mtx_lock(&table2->WalkMutex);
d333 1
a333 1
   mtx_unlock(&table2->WalkMutex);
d373 1
a373 1
   mtx_lock(&table->Mutex);
d376 1
a376 1
      mtx_unlock(&table->Mutex);
d394 1
a394 1
               mtx_unlock(&table->Mutex);
d400 1
a400 1
      mtx_unlock(&table->Mutex);
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d40 1
a40 1
#include "util/hash_table.h"
a117 6
      if (table->ht == NULL) {
         free(table);
         _mesa_error_no_memory(__func__);
         return NULL;
      }

a121 4
   else {
      _mesa_error_no_memory(__func__);
   }

@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d40 1
a40 1
#include "hash_table.h"
d118 6
d128 4
@


