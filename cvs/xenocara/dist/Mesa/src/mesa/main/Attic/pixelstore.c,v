head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.53;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2013.09.05.14.06.26;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2012.08.17.13.58.19;	author mpi;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.23.13.37.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.22.20.06.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.17.20.26.41;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.46;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.16.46;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2015.01.25.14.12.50;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.49.57;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * \file pixelstore.c
 * glPixelStore functions.
 */


#include "glheader.h"
#include "bufferobj.h"
#include "context.h"
#include "pixelstore.h"
#include "mtypes.h"


void GLAPIENTRY
_mesa_PixelStorei( GLenum pname, GLint param )
{
   /* NOTE: this call can't be compiled into the display list */
   GET_CURRENT_CONTEXT(ctx);

   switch (pname) {
      case GL_PACK_SWAP_BYTES:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
	 if (param == (GLint)ctx->Pack.SwapBytes)
	    return;
         ctx->Pack.SwapBytes = param ? GL_TRUE : GL_FALSE;
	 break;
      case GL_PACK_LSB_FIRST:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
	 if (param == (GLint)ctx->Pack.LsbFirst)
	    return;
         ctx->Pack.LsbFirst = param ? GL_TRUE : GL_FALSE;
	 break;
      case GL_PACK_ROW_LENGTH:
         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx))
            goto invalid_enum_error;
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.RowLength == param)
	    return;
	 ctx->Pack.RowLength = param;
	 break;
      case GL_PACK_IMAGE_HEIGHT:
         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx))
            goto invalid_enum_error;
         if (param<0) {
            _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.ImageHeight == param)
	    return;
	 ctx->Pack.ImageHeight = param;
         break;
      case GL_PACK_SKIP_PIXELS:
         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx))
            goto invalid_enum_error;
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.SkipPixels == param)
	    return;
	 ctx->Pack.SkipPixels = param;
	 break;
      case GL_PACK_SKIP_ROWS:
         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx))
            goto invalid_enum_error;
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.SkipRows == param)
	    return;
	 ctx->Pack.SkipRows = param;
	 break;
      case GL_PACK_SKIP_IMAGES:
         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx))
            goto invalid_enum_error;
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.SkipImages == param)
	    return;
	 ctx->Pack.SkipImages = param;
	 break;
      case GL_PACK_ALIGNMENT:
         if (param!=1 && param!=2 && param!=4 && param!=8) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.Alignment == param)
	    return;
	 ctx->Pack.Alignment = param;
	 break;
      case GL_PACK_INVERT_MESA:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (!ctx->Extensions.MESA_pack_invert) {
            _mesa_error( ctx, GL_INVALID_ENUM, "glPixelstore(pname)" );
            return;
         }
         if (ctx->Pack.Invert == param)
            return;
         ctx->Pack.Invert = param;
         break;

      case GL_UNPACK_SWAP_BYTES:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
	 if (param == (GLint)ctx->Unpack.SwapBytes)
	    return;
	 if ((GLint)ctx->Unpack.SwapBytes == param)
	    return;
	 ctx->Unpack.SwapBytes = param ? GL_TRUE : GL_FALSE;
         break;
      case GL_UNPACK_LSB_FIRST:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
	 if (param == (GLint)ctx->Unpack.LsbFirst)
	    return;
	 if ((GLint)ctx->Unpack.LsbFirst == param)
	    return;
	 ctx->Unpack.LsbFirst = param ? GL_TRUE : GL_FALSE;
	 break;
      case GL_UNPACK_ROW_LENGTH:
         if (ctx->API == API_OPENGLES)
            goto invalid_enum_error;
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.RowLength == param)
	    return;
	 ctx->Unpack.RowLength = param;
	 break;
      case GL_UNPACK_IMAGE_HEIGHT:
         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx))
            goto invalid_enum_error;
         if (param<0) {
            _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.ImageHeight == param)
	    return;

	 ctx->Unpack.ImageHeight = param;
         break;
      case GL_UNPACK_SKIP_PIXELS:
         if (ctx->API == API_OPENGLES)
            goto invalid_enum_error;
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.SkipPixels == param)
	    return;
	 ctx->Unpack.SkipPixels = param;
	 break;
      case GL_UNPACK_SKIP_ROWS:
         if (ctx->API == API_OPENGLES)
            goto invalid_enum_error;
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.SkipRows == param)
	    return;
	 ctx->Unpack.SkipRows = param;
	 break;
      case GL_UNPACK_SKIP_IMAGES:
         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx))
            goto invalid_enum_error;
	 if (param < 0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.SkipImages == param)
	    return;
	 ctx->Unpack.SkipImages = param;
	 break;
      case GL_UNPACK_ALIGNMENT:
         if (param!=1 && param!=2 && param!=4 && param!=8) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore" );
	    return;
	 }
	 if (ctx->Unpack.Alignment == param)
	    return;
	 ctx->Unpack.Alignment = param;
	 break;
      default:
         goto invalid_enum_error;
   }

   return;

invalid_enum_error:
   _mesa_error( ctx, GL_INVALID_ENUM, "glPixelStore" );
   return;
}


void GLAPIENTRY
_mesa_PixelStoref( GLenum pname, GLfloat param )
{
   _mesa_PixelStorei( pname, IROUND(param) );
}



/**
 * Initialize the context's pixel store state.
 */
void
_mesa_init_pixelstore( struct gl_context *ctx )
{
   /* Pixel transfer */
   ctx->Pack.Alignment = 4;
   ctx->Pack.RowLength = 0;
   ctx->Pack.ImageHeight = 0;
   ctx->Pack.SkipPixels = 0;
   ctx->Pack.SkipRows = 0;
   ctx->Pack.SkipImages = 0;
   ctx->Pack.SwapBytes = GL_FALSE;
   ctx->Pack.LsbFirst = GL_FALSE;
   ctx->Pack.Invert = GL_FALSE;
   _mesa_reference_buffer_object(ctx, &ctx->Pack.BufferObj,
                                 ctx->Shared->NullBufferObj);
   ctx->Unpack.Alignment = 4;
   ctx->Unpack.RowLength = 0;
   ctx->Unpack.ImageHeight = 0;
   ctx->Unpack.SkipPixels = 0;
   ctx->Unpack.SkipRows = 0;
   ctx->Unpack.SkipImages = 0;
   ctx->Unpack.SwapBytes = GL_FALSE;
   ctx->Unpack.LsbFirst = GL_FALSE;
   ctx->Unpack.Invert = GL_FALSE;
   _mesa_reference_buffer_object(ctx, &ctx->Unpack.BufferObj,
                                 ctx->Shared->NullBufferObj);

   /*
    * _mesa_unpack_image() returns image data in this format.  When we
    * execute image commands (glDrawPixels(), glTexImage(), etc) from
    * within display lists we have to be sure to set the current
    * unpacking parameters to these values!
    */
   ctx->DefaultPacking.Alignment = 1;
   ctx->DefaultPacking.RowLength = 0;
   ctx->DefaultPacking.SkipPixels = 0;
   ctx->DefaultPacking.SkipRows = 0;
   ctx->DefaultPacking.ImageHeight = 0;
   ctx->DefaultPacking.SkipImages = 0;
   ctx->DefaultPacking.SwapBytes = GL_FALSE;
   ctx->DefaultPacking.LsbFirst = GL_FALSE;
   ctx->DefaultPacking.Invert = GL_FALSE;
   _mesa_reference_buffer_object(ctx, &ctx->DefaultPacking.BufferObj,
                                 ctx->Shared->NullBufferObj);
}
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d48 2
d51 1
a51 1
         break;
d55 2
d58 1
a58 1
         break;
d62 8
a69 4
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.RowLength = param;
         break;
d73 7
a79 3
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.ImageHeight = param;
d84 8
a91 4
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.SkipPixels = param;
         break;
d95 8
a102 4
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.SkipRows = param;
         break;
d106 8
a113 4
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.SkipImages = param;
         break;
d115 8
a122 4
         if (param!=1 && param!=2 && param!=4 && param!=8)
            goto invalid_value_error;
         ctx->Pack.Alignment = param;
         break;
d124 1
a124 1
         if (!_mesa_is_desktop_gl(ctx) || !ctx->Extensions.MESA_pack_invert)
d126 6
a133 28
      case GL_PACK_COMPRESSED_BLOCK_WIDTH:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.CompressedBlockWidth = param;
         break;
      case GL_PACK_COMPRESSED_BLOCK_HEIGHT:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.CompressedBlockHeight = param;
         break;
      case GL_PACK_COMPRESSED_BLOCK_DEPTH:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.CompressedBlockDepth = param;
         break;
      case GL_PACK_COMPRESSED_BLOCK_SIZE:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.CompressedBlockSize = param;
         break;
d138 5
a142 1
         ctx->Unpack.SwapBytes = param ? GL_TRUE : GL_FALSE;
d147 6
a152 2
         ctx->Unpack.LsbFirst = param ? GL_TRUE : GL_FALSE;
         break;
d156 8
a163 4
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.RowLength = param;
         break;
d167 8
a174 3
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.ImageHeight = param;
d179 8
a186 4
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.SkipPixels = param;
         break;
d190 8
a197 4
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.SkipRows = param;
         break;
d201 8
a208 4
         if (param < 0)
            goto invalid_value_error;
         ctx->Unpack.SkipImages = param;
         break;
d210 8
a217 32
         if (param!=1 && param!=2 && param!=4 && param!=8)
            goto invalid_value_error;
         ctx->Unpack.Alignment = param;
         break;
      case GL_UNPACK_COMPRESSED_BLOCK_WIDTH:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.CompressedBlockWidth = param;
         break;
      case GL_UNPACK_COMPRESSED_BLOCK_HEIGHT:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.CompressedBlockHeight = param;
         break;
      case GL_UNPACK_COMPRESSED_BLOCK_DEPTH:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.CompressedBlockDepth = param;
         break;
      case GL_UNPACK_COMPRESSED_BLOCK_SIZE:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.CompressedBlockSize = param;
         break;
a226 4

invalid_value_error:
   _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
   return;
a253 4
   ctx->Pack.CompressedBlockWidth = 0;
   ctx->Pack.CompressedBlockHeight = 0;
   ctx->Pack.CompressedBlockDepth = 0;
   ctx->Pack.CompressedBlockSize = 0;
a264 4
   ctx->Unpack.CompressedBlockWidth = 0;
   ctx->Unpack.CompressedBlockHeight = 0;
   ctx->Unpack.CompressedBlockDepth = 0;
   ctx->Unpack.CompressedBlockSize = 0;
a284 42
}


/**
 * Check if the given compressed pixel storage parameters are legal.
 * Record a GL error if illegal.
 * \return  true if legal, false if illegal
 */
bool
_mesa_compressed_pixel_storage_error_check(
   struct gl_context *ctx,
   GLint dimensions,
   const struct gl_pixelstore_attrib *packing,
   const char *caller)
{
   if (!_mesa_is_desktop_gl(ctx) || !packing->CompressedBlockSize)
      return true;

   if (packing->CompressedBlockWidth &&
       packing->SkipPixels % packing->CompressedBlockWidth) {
      _mesa_error(ctx, GL_INVALID_OPERATION,
                  "%s(skip-pixels %% block-width)", caller);
      return false;
   }

   if (dimensions > 1 &&
       packing->CompressedBlockHeight &&
       packing->SkipRows % packing->CompressedBlockHeight) {
      _mesa_error(ctx, GL_INVALID_OPERATION,
                  "%s(skip-rows %% block-height)", caller);
      return false;
   }

   if (dimensions > 2 &&
       packing->CompressedBlockDepth &&
       packing->SkipImages % packing->CompressedBlockDepth) {
      _mesa_error(ctx, GL_INVALID_OPERATION,
                  "%s(skip-images %% block-depth)", caller);
      return false;
   }

   return true;
@


1.5
log
@Merge Mesa 9.2.0
@
text
@a47 2
	 if (param == (GLint)ctx->Pack.SwapBytes)
	    return;
d49 1
a49 1
	 break;
a52 2
	 if (param == (GLint)ctx->Pack.LsbFirst)
	    return;
d54 1
a54 1
	 break;
d58 4
a61 8
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.RowLength == param)
	    return;
	 ctx->Pack.RowLength = param;
	 break;
d65 3
a67 7
         if (param<0) {
            _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.ImageHeight == param)
	    return;
	 ctx->Pack.ImageHeight = param;
d72 4
a75 8
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.SkipPixels == param)
	    return;
	 ctx->Pack.SkipPixels = param;
	 break;
d79 4
a82 8
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.SkipRows == param)
	    return;
	 ctx->Pack.SkipRows = param;
	 break;
d86 4
a89 8
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.SkipImages == param)
	    return;
	 ctx->Pack.SkipImages = param;
	 break;
d91 4
a94 8
         if (param!=1 && param!=2 && param!=4 && param!=8) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.Alignment == param)
	    return;
	 ctx->Pack.Alignment = param;
	 break;
d96 5
d103 24
a126 7
         if (!ctx->Extensions.MESA_pack_invert) {
            _mesa_error( ctx, GL_INVALID_ENUM, "glPixelstore(pname)" );
            return;
         }
         if (ctx->Pack.Invert == param)
            return;
         ctx->Pack.Invert = param;
d132 1
a132 5
	 if (param == (GLint)ctx->Unpack.SwapBytes)
	    return;
	 if ((GLint)ctx->Unpack.SwapBytes == param)
	    return;
	 ctx->Unpack.SwapBytes = param ? GL_TRUE : GL_FALSE;
d137 2
a138 6
	 if (param == (GLint)ctx->Unpack.LsbFirst)
	    return;
	 if ((GLint)ctx->Unpack.LsbFirst == param)
	    return;
	 ctx->Unpack.LsbFirst = param ? GL_TRUE : GL_FALSE;
	 break;
d142 4
a145 8
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.RowLength == param)
	    return;
	 ctx->Unpack.RowLength = param;
	 break;
d149 3
a151 8
         if (param<0) {
            _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.ImageHeight == param)
	    return;

	 ctx->Unpack.ImageHeight = param;
d156 4
a159 8
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.SkipPixels == param)
	    return;
	 ctx->Unpack.SkipPixels = param;
	 break;
d163 4
a166 8
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.SkipRows == param)
	    return;
	 ctx->Unpack.SkipRows = param;
	 break;
d170 4
a173 8
	 if (param < 0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.SkipImages == param)
	    return;
	 ctx->Unpack.SkipImages = param;
	 break;
d175 32
a206 8
         if (param!=1 && param!=2 && param!=4 && param!=8) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore" );
	    return;
	 }
	 if (ctx->Unpack.Alignment == param)
	    return;
	 ctx->Unpack.Alignment = param;
	 break;
d216 4
d247 4
d262 4
d286 42
@


1.4
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.1
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
a34 1
#include "mfeatures.h"
a42 1
   ASSERT_OUTSIDE_BEGIN_END(ctx);
d46 2
a49 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
d53 2
a56 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
d60 2
a67 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
d71 2
a78 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
d82 2
a89 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
d93 2
a100 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
d104 2
a111 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
a120 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
d124 2
a131 1
         FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
d136 2
a141 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
d145 2
a150 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
d154 2
a161 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
d165 2
a173 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
d177 2
a184 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
d188 2
a195 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
d199 2
a206 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
a215 1
	 FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
a217 6
      case GL_UNPACK_CLIENT_STORAGE_APPLE:
         if (param == (GLint)ctx->Unpack.ClientStorage)
            return;
         FLUSH_VERTICES(ctx, _NEW_PACKUNPACK);
         ctx->Unpack.ClientStorage = param ? GL_TRUE : GL_FALSE;
         break;
d219 1
a219 2
	 _mesa_error( ctx, GL_INVALID_ENUM, "glPixelStore" );
	 return;
d221 6
d233 1
a233 1
   _mesa_PixelStorei( pname, (GLint) param );
a252 1
   ctx->Pack.ClientStorage = GL_FALSE;
a253 1
#if FEATURE_EXT_pixel_buffer_object
a255 1
#endif
a263 1
   ctx->Unpack.ClientStorage = GL_FALSE;
a264 1
#if FEATURE_EXT_pixel_buffer_object
a266 1
#endif
a281 1
   ctx->DefaultPacking.ClientStorage = GL_FALSE;
a282 1
#if FEATURE_EXT_pixel_buffer_object
a284 1
#endif
@


1.3
log
@Merge Mesa 7.10.3
@
text
@d35 1
@


1.2
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d231 1
a231 1
_mesa_init_pixelstore( GLcontext *ctx )
@


1.1
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a32 1
#include "colormac.h"
a33 2
#include "image.h"
#include "macros.h"
d245 2
a246 1
   ctx->Pack.BufferObj = ctx->Array.NullBufferObj;
d259 2
a260 1
   ctx->Unpack.BufferObj = ctx->Array.NullBufferObj;
d280 2
a281 1
   ctx->DefaultPacking.BufferObj = ctx->Array.NullBufferObj;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d33 1
d35 2
d234 1
a234 1
_mesa_init_pixelstore( struct gl_context *ctx )
d248 1
a248 2
   _mesa_reference_buffer_object(ctx, &ctx->Pack.BufferObj,
                                 ctx->Shared->NullBufferObj);
d261 1
a261 2
   _mesa_reference_buffer_object(ctx, &ctx->Unpack.BufferObj,
                                 ctx->Shared->NullBufferObj);
d281 1
a281 2
   _mesa_reference_buffer_object(ctx, &ctx->DefaultPacking.BufferObj,
                                 ctx->Shared->NullBufferObj);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d43 1
a46 2
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
d49 1
a52 2
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
d55 1
a58 2
         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx))
            goto invalid_enum_error;
d65 1
a68 2
         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx))
            goto invalid_enum_error;
d75 1
a78 2
         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx))
            goto invalid_enum_error;
d85 1
a88 2
         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx))
            goto invalid_enum_error;
d95 1
a98 2
         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx))
            goto invalid_enum_error;
d105 1
d115 1
a118 2
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
d125 1
a129 2
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
d134 1
a137 2
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
d142 1
a145 2
         if (ctx->API == API_OPENGLES)
            goto invalid_enum_error;
d152 1
a155 2
         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx))
            goto invalid_enum_error;
d163 1
a166 2
         if (ctx->API == API_OPENGLES)
            goto invalid_enum_error;
d173 1
a176 2
         if (ctx->API == API_OPENGLES)
            goto invalid_enum_error;
d183 1
a186 2
         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx))
            goto invalid_enum_error;
d193 1
d203 1
d206 6
d213 2
a214 1
         goto invalid_enum_error;
a215 6

   return;

invalid_enum_error:
   _mesa_error( ctx, GL_INVALID_ENUM, "glPixelStore" );
   return;
d222 1
a222 1
   _mesa_PixelStorei( pname, IROUND(param) );
d242 1
d244 1
d247 1
d256 1
d258 1
d261 1
d277 1
d279 1
d282 1
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d48 2
d51 1
a51 1
         break;
d55 2
d58 1
a58 1
         break;
d62 8
a69 4
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.RowLength = param;
         break;
d73 7
a79 3
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.ImageHeight = param;
d84 8
a91 4
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.SkipPixels = param;
         break;
d95 8
a102 4
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.SkipRows = param;
         break;
d106 8
a113 4
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.SkipImages = param;
         break;
d115 8
a122 4
         if (param!=1 && param!=2 && param!=4 && param!=8)
            goto invalid_value_error;
         ctx->Pack.Alignment = param;
         break;
d124 1
a124 1
         if (!_mesa_is_desktop_gl(ctx) || !ctx->Extensions.MESA_pack_invert)
d126 6
a133 28
      case GL_PACK_COMPRESSED_BLOCK_WIDTH:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.CompressedBlockWidth = param;
         break;
      case GL_PACK_COMPRESSED_BLOCK_HEIGHT:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.CompressedBlockHeight = param;
         break;
      case GL_PACK_COMPRESSED_BLOCK_DEPTH:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.CompressedBlockDepth = param;
         break;
      case GL_PACK_COMPRESSED_BLOCK_SIZE:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Pack.CompressedBlockSize = param;
         break;
d138 5
a142 1
         ctx->Unpack.SwapBytes = param ? GL_TRUE : GL_FALSE;
d147 6
a152 2
         ctx->Unpack.LsbFirst = param ? GL_TRUE : GL_FALSE;
         break;
d156 8
a163 4
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.RowLength = param;
         break;
d167 8
a174 3
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.ImageHeight = param;
d179 8
a186 4
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.SkipPixels = param;
         break;
d190 8
a197 4
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.SkipRows = param;
         break;
d201 8
a208 4
         if (param < 0)
            goto invalid_value_error;
         ctx->Unpack.SkipImages = param;
         break;
d210 8
a217 32
         if (param!=1 && param!=2 && param!=4 && param!=8)
            goto invalid_value_error;
         ctx->Unpack.Alignment = param;
         break;
      case GL_UNPACK_COMPRESSED_BLOCK_WIDTH:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.CompressedBlockWidth = param;
         break;
      case GL_UNPACK_COMPRESSED_BLOCK_HEIGHT:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.CompressedBlockHeight = param;
         break;
      case GL_UNPACK_COMPRESSED_BLOCK_DEPTH:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.CompressedBlockDepth = param;
         break;
      case GL_UNPACK_COMPRESSED_BLOCK_SIZE:
         if (!_mesa_is_desktop_gl(ctx))
            goto invalid_enum_error;
         if (param<0)
            goto invalid_value_error;
         ctx->Unpack.CompressedBlockSize = param;
         break;
a226 4

invalid_value_error:
   _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
   return;
a253 4
   ctx->Pack.CompressedBlockWidth = 0;
   ctx->Pack.CompressedBlockHeight = 0;
   ctx->Pack.CompressedBlockDepth = 0;
   ctx->Pack.CompressedBlockSize = 0;
a264 4
   ctx->Unpack.CompressedBlockWidth = 0;
   ctx->Unpack.CompressedBlockHeight = 0;
   ctx->Unpack.CompressedBlockDepth = 0;
   ctx->Unpack.CompressedBlockSize = 0;
a284 42
}


/**
 * Check if the given compressed pixel storage parameters are legal.
 * Record a GL error if illegal.
 * \return  true if legal, false if illegal
 */
bool
_mesa_compressed_pixel_storage_error_check(
   struct gl_context *ctx,
   GLint dimensions,
   const struct gl_pixelstore_attrib *packing,
   const char *caller)
{
   if (!_mesa_is_desktop_gl(ctx) || !packing->CompressedBlockSize)
      return true;

   if (packing->CompressedBlockWidth &&
       packing->SkipPixels % packing->CompressedBlockWidth) {
      _mesa_error(ctx, GL_INVALID_OPERATION,
                  "%s(skip-pixels %% block-width)", caller);
      return false;
   }

   if (dimensions > 1 &&
       packing->CompressedBlockHeight &&
       packing->SkipRows % packing->CompressedBlockHeight) {
      _mesa_error(ctx, GL_INVALID_OPERATION,
                  "%s(skip-rows %% block-height)", caller);
      return false;
   }

   if (dimensions > 2 &&
       packing->CompressedBlockDepth &&
       packing->SkipImages % packing->CompressedBlockDepth) {
      _mesa_error(ctx, GL_INVALID_OPERATION,
                  "%s(skip-images %% block-depth)", caller);
      return false;
   }

   return true;
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@a47 2
	 if (param == (GLint)ctx->Pack.SwapBytes)
	    return;
d49 1
a49 1
	 break;
a52 2
	 if (param == (GLint)ctx->Pack.LsbFirst)
	    return;
d54 1
a54 1
	 break;
d58 4
a61 8
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.RowLength == param)
	    return;
	 ctx->Pack.RowLength = param;
	 break;
d65 3
a67 7
         if (param<0) {
            _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.ImageHeight == param)
	    return;
	 ctx->Pack.ImageHeight = param;
d72 4
a75 8
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.SkipPixels == param)
	    return;
	 ctx->Pack.SkipPixels = param;
	 break;
d79 4
a82 8
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.SkipRows == param)
	    return;
	 ctx->Pack.SkipRows = param;
	 break;
d86 4
a89 8
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.SkipImages == param)
	    return;
	 ctx->Pack.SkipImages = param;
	 break;
d91 4
a94 8
         if (param!=1 && param!=2 && param!=4 && param!=8) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Pack.Alignment == param)
	    return;
	 ctx->Pack.Alignment = param;
	 break;
d96 5
d103 24
a126 7
         if (!ctx->Extensions.MESA_pack_invert) {
            _mesa_error( ctx, GL_INVALID_ENUM, "glPixelstore(pname)" );
            return;
         }
         if (ctx->Pack.Invert == param)
            return;
         ctx->Pack.Invert = param;
d132 1
a132 5
	 if (param == (GLint)ctx->Unpack.SwapBytes)
	    return;
	 if ((GLint)ctx->Unpack.SwapBytes == param)
	    return;
	 ctx->Unpack.SwapBytes = param ? GL_TRUE : GL_FALSE;
d137 2
a138 6
	 if (param == (GLint)ctx->Unpack.LsbFirst)
	    return;
	 if ((GLint)ctx->Unpack.LsbFirst == param)
	    return;
	 ctx->Unpack.LsbFirst = param ? GL_TRUE : GL_FALSE;
	 break;
d142 4
a145 8
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.RowLength == param)
	    return;
	 ctx->Unpack.RowLength = param;
	 break;
d149 3
a151 8
         if (param<0) {
            _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.ImageHeight == param)
	    return;

	 ctx->Unpack.ImageHeight = param;
d156 4
a159 8
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.SkipPixels == param)
	    return;
	 ctx->Unpack.SkipPixels = param;
	 break;
d163 4
a166 8
	 if (param<0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.SkipRows == param)
	    return;
	 ctx->Unpack.SkipRows = param;
	 break;
d170 4
a173 8
	 if (param < 0) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore(param)" );
	    return;
	 }
	 if (ctx->Unpack.SkipImages == param)
	    return;
	 ctx->Unpack.SkipImages = param;
	 break;
d175 32
a206 8
         if (param!=1 && param!=2 && param!=4 && param!=8) {
	    _mesa_error( ctx, GL_INVALID_VALUE, "glPixelStore" );
	    return;
	 }
	 if (ctx->Unpack.Alignment == param)
	    return;
	 ctx->Unpack.Alignment = param;
	 break;
d216 4
d247 4
d262 4
d286 42
@


