head	1.12;
access;
symbols
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	v10_2_9:1.1.1.8
	v10_4_3:1.1.1.7
	v10_2_7:1.1.1.6
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.5
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.4
	v9_2_3:1.1.1.4
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.4
	v9_2_0:1.1.1.4
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.6
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.4
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.12.23.05.17.53;	author jsg;	state dead;
branches;
next	1.11;
commitid	TnlogFl9nOv2eaRf;

1.11
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.10;
commitid	4ry2gvZGMXkCUD2n;

1.10
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.9;
commitid	mcxB0JvoI9gTDYXU;

1.9
date	2014.09.07.15.20.07;	author jsg;	state Exp;
branches;
next	1.8;
commitid	7kimTMT4YlQauAIU;

1.8
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.06.32;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.19;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.44;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.31;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.50.26;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.50.26;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.39;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.05.13.16.54;	author jsg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.07.09.20.35.06;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.6
date	2014.09.07.15.07.29;	author jsg;	state Exp;
branches;
next	1.1.1.7;
commitid	dm8VnQHhowGHmemJ;

1.1.1.7
date	2015.01.25.14.12.59;	author jsg;	state Exp;
branches;
next	1.1.1.8;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.8
date	2015.02.20.22.50.05;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.12
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**
 * \file teximage.h
 * Texture images manipulation functions.
 */

/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2005  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


#ifndef TEXIMAGE_H
#define TEXIMAGE_H


#include "mtypes.h"
#include "formats.h"

#ifdef __cplusplus
extern "C" {
#endif

/** Is the given value one of the 6 cube faces? */
static inline GLboolean
_mesa_is_cube_face(GLenum target)
{
   return (target >= GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB &&
           target <= GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB);
}

/** Is any of the dimensions of given texture equal to zero? */
static inline GLboolean
_mesa_is_zero_size_texture(const struct gl_texture_image *texImage)
{
   return (texImage->Width == 0 ||
           texImage->Height == 0 ||
           texImage->Depth == 0);
}

/** \name Internal functions */
/*@@{*/

extern GLint
_mesa_base_tex_format( struct gl_context *ctx, GLint internalFormat );


extern GLboolean
_mesa_is_proxy_texture(GLenum target);

extern struct gl_texture_image *
_mesa_new_texture_image( struct gl_context *ctx );


extern void
_mesa_delete_texture_image( struct gl_context *ctx,
                            struct gl_texture_image *teximage );


extern void
_mesa_init_teximage_fields(struct gl_context *ctx,
                           struct gl_texture_image *img,
                           GLsizei width, GLsizei height, GLsizei depth,
                           GLint border, GLenum internalFormat,
                           mesa_format format);


extern mesa_format
_mesa_choose_texture_format(struct gl_context *ctx,
                            struct gl_texture_object *texObj,
                            GLenum target, GLint level,
                            GLenum internalFormat, GLenum format, GLenum type);

extern void
_mesa_update_fbo_texture(struct gl_context *ctx,
                         struct gl_texture_object *texObj,
                         GLuint face, GLuint level);

extern void
_mesa_clear_texture_image(struct gl_context *ctx,
                          struct gl_texture_image *texImage);


extern struct gl_texture_object *
_mesa_get_current_tex_object(struct gl_context *ctx, GLenum target);


extern struct gl_texture_image *
_mesa_select_tex_image(struct gl_context *ctx,
                       const struct gl_texture_object *texObj,
                       GLenum target, GLint level);


extern struct gl_texture_image *
_mesa_get_tex_image(struct gl_context *ctx, struct gl_texture_object *texObj,
                    GLenum target, GLint level);


extern GLint
_mesa_max_texture_levels(struct gl_context *ctx, GLenum target);


extern GLboolean
_mesa_test_proxy_teximage(struct gl_context *ctx, GLenum target, GLint level,
                          mesa_format format,
                          GLint width, GLint height, GLint depth, GLint border);

extern GLboolean
_mesa_target_can_be_compressed(const struct gl_context *ctx, GLenum target,
                               GLenum intFormat);

extern GLuint
_mesa_tex_target_to_face(GLenum target);

extern GLint
_mesa_get_texture_dimensions(GLenum target);

extern GLboolean
_mesa_tex_target_is_layered(GLenum target);

extern GLuint
_mesa_get_texture_layers(const struct gl_texture_object *texObj, GLint level);

extern GLsizei
_mesa_get_tex_max_num_levels(GLenum target, GLsizei width, GLsizei height,
                             GLsizei depth);

extern GLboolean
_mesa_legal_texture_dimensions(struct gl_context *ctx, GLenum target,
                               GLint level, GLint width, GLint height,
                               GLint depth, GLint border);

extern mesa_format
_mesa_validate_texbuffer_format(const struct gl_context *ctx,
                                GLenum internalFormat);


bool
_mesa_legal_texture_base_format_for_target(struct gl_context *ctx,
                                           GLenum target,
                                           GLenum internalFormat,
                                           unsigned dimensions,
                                           const char *caller);

/**
 * Lock a texture for updating.  See also _mesa_lock_context_textures().
 */
static inline void
_mesa_lock_texture(struct gl_context *ctx, struct gl_texture_object *texObj)
{
   mtx_lock(&ctx->Shared->TexMutex);
   ctx->Shared->TextureStateStamp++;
   (void) texObj;
}

static inline void
_mesa_unlock_texture(struct gl_context *ctx, struct gl_texture_object *texObj)
{
   (void) texObj;
   mtx_unlock(&ctx->Shared->TexMutex);
}

/*@@}*/


/** \name API entry point functions */
/*@@{*/

extern void GLAPIENTRY
_mesa_TexImage1D( GLenum target, GLint level, GLint internalformat,
                  GLsizei width, GLint border,
                  GLenum format, GLenum type, const GLvoid *pixels );


extern void GLAPIENTRY
_mesa_TexImage2D( GLenum target, GLint level, GLint internalformat,
                  GLsizei width, GLsizei height, GLint border,
                  GLenum format, GLenum type, const GLvoid *pixels );


extern void GLAPIENTRY
_mesa_TexImage3D( GLenum target, GLint level, GLint internalformat,
                  GLsizei width, GLsizei height, GLsizei depth, GLint border,
                  GLenum format, GLenum type, const GLvoid *pixels );


extern void GLAPIENTRY
_mesa_TexImage3DEXT( GLenum target, GLint level, GLenum internalformat,
                     GLsizei width, GLsizei height, GLsizei depth,
                     GLint border, GLenum format, GLenum type,
                     const GLvoid *pixels );

extern void GLAPIENTRY
_mesa_EGLImageTargetTexture2DOES( GLenum target, GLeglImageOES image );

extern void GLAPIENTRY
_mesa_TexSubImage1D( GLenum target, GLint level, GLint xoffset,
                     GLsizei width,
                     GLenum format, GLenum type,
                     const GLvoid *pixels );


extern void GLAPIENTRY
_mesa_TexSubImage2D( GLenum target, GLint level,
                     GLint xoffset, GLint yoffset,
                     GLsizei width, GLsizei height,
                     GLenum format, GLenum type,
                     const GLvoid *pixels );


extern void GLAPIENTRY
_mesa_TexSubImage3D( GLenum target, GLint level,
                     GLint xoffset, GLint yoffset, GLint zoffset,
                     GLsizei width, GLsizei height, GLsizei depth,
                     GLenum format, GLenum type,
                     const GLvoid *pixels );


extern void GLAPIENTRY
_mesa_CopyTexImage1D( GLenum target, GLint level, GLenum internalformat,
                      GLint x, GLint y, GLsizei width, GLint border );


extern void GLAPIENTRY
_mesa_CopyTexImage2D( GLenum target, GLint level,
                      GLenum internalformat, GLint x, GLint y,
                      GLsizei width, GLsizei height, GLint border );


extern void GLAPIENTRY
_mesa_CopyTexSubImage1D( GLenum target, GLint level, GLint xoffset,
                         GLint x, GLint y, GLsizei width );


extern void GLAPIENTRY
_mesa_CopyTexSubImage2D( GLenum target, GLint level,
                         GLint xoffset, GLint yoffset,
                         GLint x, GLint y, GLsizei width, GLsizei height );


extern void GLAPIENTRY
_mesa_CopyTexSubImage3D( GLenum target, GLint level,
                         GLint xoffset, GLint yoffset, GLint zoffset,
                         GLint x, GLint y, GLsizei width, GLsizei height );



extern void GLAPIENTRY
_mesa_CompressedTexImage1D(GLenum target, GLint level,
                              GLenum internalformat, GLsizei width,
                              GLint border, GLsizei imageSize,
                              const GLvoid *data);

extern void GLAPIENTRY
_mesa_CompressedTexImage2D(GLenum target, GLint level,
                              GLenum internalformat, GLsizei width,
                              GLsizei height, GLint border, GLsizei imageSize,
                              const GLvoid *data);

extern void GLAPIENTRY
_mesa_CompressedTexImage3D(GLenum target, GLint level,
                              GLenum internalformat, GLsizei width,
                              GLsizei height, GLsizei depth, GLint border,
                              GLsizei imageSize, const GLvoid *data);

extern void GLAPIENTRY
_mesa_CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset,
                                 GLsizei width, GLenum format,
                                 GLsizei imageSize, const GLvoid *data);

extern void GLAPIENTRY
_mesa_CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset,
                                 GLint yoffset, GLsizei width, GLsizei height,
                                 GLenum format, GLsizei imageSize,
                                 const GLvoid *data);

extern void GLAPIENTRY
_mesa_CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset,
                                 GLint yoffset, GLint zoffset, GLsizei width,
                                 GLsizei height, GLsizei depth, GLenum format,
                                 GLsizei imageSize, const GLvoid *data);


extern void GLAPIENTRY
_mesa_TexBuffer(GLenum target, GLenum internalFormat, GLuint buffer);

extern void GLAPIENTRY
_mesa_TexBufferRange(GLenum target, GLenum internalFormat, GLuint buffer,
                     GLintptr offset, GLsizeiptr size);


extern void GLAPIENTRY
_mesa_TexImage2DMultisample(GLenum target, GLsizei samples,
                            GLenum internalformat, GLsizei width,
                            GLsizei height, GLboolean fixedsamplelocations);

extern void GLAPIENTRY
_mesa_TexImage3DMultisample(GLenum target, GLsizei samples,
                            GLenum internalformat, GLsizei width,
                            GLsizei height, GLsizei depth,
                            GLboolean fixedsamplelocations);

extern void GLAPIENTRY
_mesa_TexStorage2DMultisample(GLenum target, GLsizei samples,
                              GLenum internalformat, GLsizei width,
                              GLsizei height, GLboolean fixedsamplelocations);

extern void GLAPIENTRY
_mesa_TexStorage3DMultisample(GLenum target, GLsizei samples,
                              GLenum internalformat, GLsizei width,
                              GLsizei height, GLsizei depth,
                              GLboolean fixedsamplelocations);

/*@@}*/

#ifdef __cplusplus
}
#endif

#endif
@


1.11
log
@Merge Mesa 10.2.9
@
text
@@


1.10
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a266 10
_mesa_ClearTexSubImage( GLuint texture, GLint level,
                        GLint xoffset, GLint yoffset, GLint zoffset,
                        GLsizei width, GLsizei height, GLsizei depth,
                        GLenum format, GLenum type, const void *data );

extern void GLAPIENTRY
_mesa_ClearTexImage( GLuint texture, GLint level,
                     GLenum format, GLenum type, const void *data );

extern void GLAPIENTRY
@


1.9
log
@Merge Mesa 10.2.7
@
text
@d267 10
@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d126 3
@


1.7
log
@Merge Mesa 9.2.0
@
text
@a68 3
extern GLenum
_mesa_get_proxy_target(GLenum target);

d83 1
a83 1
                           gl_format format);
d86 1
a86 1
extern gl_format
a102 5
_mesa_select_tex_object(struct gl_context *ctx,
                        const struct gl_texture_unit *texUnit,
                        GLenum target);

extern struct gl_texture_object *
d123 1
a123 1
                          gl_format format,
d133 6
d148 12
d166 1
a166 1
   _glthread_LOCK_MUTEX(ctx->Shared->TexMutex);
d175 1
a175 1
   _glthread_UNLOCK_MUTEX(ctx->Shared->TexMutex);
d309 1
a309 1
                            GLint internalformat, GLsizei width,
d314 1
a314 1
                            GLint internalformat, GLsizei width,
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a7 1
 * Version:  6.5
d24 4
a27 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d38 3
d42 7
a48 5
extern void *
_mesa_alloc_texmemory(GLsizei bytes);

extern void
_mesa_free_texmemory(void *m);
d69 2
a79 4
extern void
_mesa_free_texture_image_data( struct gl_context *ctx, 
			       struct gl_texture_image *texImage );

d82 1
a82 1
_mesa_init_teximage_fields(struct gl_context *ctx, GLenum target,
d95 4
a104 6
extern void
_mesa_set_tex_image(struct gl_texture_object *tObj,
                    GLenum target, GLint level,
                    struct gl_texture_image *texImage);


a124 4
extern struct gl_texture_image *
_mesa_get_proxy_tex_image(struct gl_context *ctx, GLenum target, GLint level);


d131 2
a132 2
                         GLint internalFormat, GLenum format, GLenum type,
                         GLint width, GLint height, GLint depth, GLint border);
d141 9
d153 1
a153 1
static INLINE void
d161 1
a161 1
static INLINE void
d164 1
d254 1
a254 1
_mesa_CompressedTexImage1DARB(GLenum target, GLint level,
d260 1
a260 1
_mesa_CompressedTexImage2DARB(GLenum target, GLint level,
d266 1
a266 1
_mesa_CompressedTexImage3DARB(GLenum target, GLint level,
a270 5
#ifdef VMS
#define _mesa_CompressedTexSubImage1DARB _mesa_CompressedTexSubImage1DAR
#define _mesa_CompressedTexSubImage2DARB _mesa_CompressedTexSubImage2DAR
#define _mesa_CompressedTexSubImage3DARB _mesa_CompressedTexSubImage3DAR
#endif
d272 1
a272 1
_mesa_CompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset,
d277 1
a277 1
_mesa_CompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset,
d283 1
a283 1
_mesa_CompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset,
d292 26
d320 4
@


1.5
log
@Merge Mesa 7.10.3
@
text
@d45 8
d70 2
a71 1
_mesa_delete_texture_image( struct gl_context *ctx, struct gl_texture_image *teximage );
d94 2
a95 1
_mesa_clear_texture_image(struct gl_context *ctx, struct gl_texture_image *texImage);
d105 2
a106 1
_mesa_select_tex_object(struct gl_context *ctx, const struct gl_texture_unit *texUnit,
d114 2
a115 1
_mesa_select_tex_image(struct gl_context *ctx, const struct gl_texture_object *texObj,
d141 2
d285 5
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d36 1
d50 1
a50 1
_mesa_base_tex_format( GLcontext *ctx, GLint internalFormat );
d58 1
a58 1
_mesa_new_texture_image( GLcontext *ctx );
d62 1
a62 1
_mesa_delete_texture_image( GLcontext *ctx, struct gl_texture_image *teximage );
d65 1
a65 1
_mesa_free_texture_image_data( GLcontext *ctx, 
d70 1
a70 1
_mesa_init_teximage_fields(GLcontext *ctx, GLenum target,
d73 9
a81 1
                           GLint border, GLenum internalFormat);
d85 1
a85 1
_mesa_clear_texture_image(GLcontext *ctx, struct gl_texture_image *texImage);
d95 1
a95 1
_mesa_select_tex_object(GLcontext *ctx, const struct gl_texture_unit *texUnit,
d99 1
a99 1
_mesa_get_current_tex_object(GLcontext *ctx, GLenum target);
d103 1
a103 1
_mesa_select_tex_image(GLcontext *ctx, const struct gl_texture_object *texObj,
d108 1
a108 1
_mesa_get_tex_image(GLcontext *ctx, struct gl_texture_object *texObj,
d113 1
a113 1
_mesa_get_proxy_tex_image(GLcontext *ctx, GLenum target, GLint level);
d117 1
a117 1
_mesa_max_texture_levels(GLcontext *ctx, GLenum target);
d121 1
a121 1
_mesa_test_proxy_teximage(GLcontext *ctx, GLenum target, GLint level,
d134 1
a134 1
_mesa_lock_texture(GLcontext *ctx, struct gl_texture_object *texObj)
d142 1
a142 1
_mesa_unlock_texture(GLcontext *ctx, struct gl_texture_object *texObj)
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d76 4
d89 3
a120 4
extern GLboolean
_mesa_is_color_format(GLenum format);


a167 1

d169 1
a169 3
_mesa_GetTexImage( GLenum target, GLint level,
                   GLenum format, GLenum type, GLvoid *pixels );

a261 3

extern void GLAPIENTRY
_mesa_GetCompressedTexImageARB(GLenum target, GLint lod, GLvoid *img);
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d110 8
@


1.1
log
@Initial revision
@
text
@d87 1
a87 1
_mesa_select_tex_image(GLcontext *ctx, const struct gl_texture_unit *texUnit,
d92 1
a92 1
_mesa_get_tex_image(GLcontext *ctx, const struct gl_texture_unit *texUnit,
d108 18
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d87 1
a87 1
_mesa_select_tex_image(GLcontext *ctx, const struct gl_texture_object *texObj,
d92 1
a92 1
_mesa_get_tex_image(GLcontext *ctx, struct gl_texture_object *texObj,
a107 17


/* Lock a texture for updating.  See also _mesa_lock_context_textures().
 */
static INLINE void _mesa_lock_texture(GLcontext *ctx,
				      struct gl_texture_object *texObj)
{
   _glthread_LOCK_MUTEX(ctx->Shared->TexMutex);
   ctx->Shared->TextureStateStamp++;
   (void) texObj;
}

static INLINE void _mesa_unlock_texture(GLcontext *ctx,
					struct gl_texture_object *texObj)
{
   _glthread_UNLOCK_MUTEX(ctx->Shared->TexMutex);
}
@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@a35 1
#include "formats.h"
d49 1
a49 1
_mesa_base_tex_format( struct gl_context *ctx, GLint internalFormat );
d57 1
a57 1
_mesa_new_texture_image( struct gl_context *ctx );
d61 1
a61 1
_mesa_delete_texture_image( struct gl_context *ctx, struct gl_texture_image *teximage );
d64 1
a64 1
_mesa_free_texture_image_data( struct gl_context *ctx, 
d69 1
a69 1
_mesa_init_teximage_fields(struct gl_context *ctx, GLenum target,
d72 1
a72 13
                           GLint border, GLenum internalFormat,
                           gl_format format);


extern gl_format
_mesa_choose_texture_format(struct gl_context *ctx,
                            struct gl_texture_object *texObj,
                            GLenum target, GLint level,
                            GLenum internalFormat, GLenum format, GLenum type);


extern void
_mesa_clear_texture_image(struct gl_context *ctx, struct gl_texture_image *texImage);
d82 1
a82 1
_mesa_select_tex_object(struct gl_context *ctx, const struct gl_texture_unit *texUnit,
a84 3
extern struct gl_texture_object *
_mesa_get_current_tex_object(struct gl_context *ctx, GLenum target);

d87 1
a87 1
_mesa_select_tex_image(struct gl_context *ctx, const struct gl_texture_object *texObj,
d92 1
a92 1
_mesa_get_tex_image(struct gl_context *ctx, struct gl_texture_object *texObj,
d97 1
a97 1
_mesa_get_proxy_tex_image(struct gl_context *ctx, GLenum target, GLint level);
d101 1
a101 1
_mesa_max_texture_levels(struct gl_context *ctx, GLenum target);
d105 1
a105 1
_mesa_test_proxy_teximage(struct gl_context *ctx, GLenum target, GLint level,
d110 1
a110 6
extern GLuint
_mesa_tex_target_to_face(GLenum target);


/**
 * Lock a texture for updating.  See also _mesa_lock_context_textures().
d112 2
a113 2
static INLINE void
_mesa_lock_texture(struct gl_context *ctx, struct gl_texture_object *texObj)
d120 2
a121 2
static INLINE void
_mesa_unlock_texture(struct gl_context *ctx, struct gl_texture_object *texObj)
d156 1
d158 3
a160 1
_mesa_EGLImageTargetTexture2DOES( GLenum target, GLeglImageOES image );
d253 3
@


1.1.1.4
log
@Import Mesa 9.2.0
@
text
@d8 1
d25 3
a27 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
a37 3
#ifdef __cplusplus
extern "C" {
#endif
d39 5
a43 7
/** Is the given value one of the 6 cube faces? */
static inline GLboolean
_mesa_is_cube_face(GLenum target)
{
   return (target >= GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB &&
           target <= GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB);
}
a44 8
/** Is any of the dimensions of given texture equal to zero? */
static inline GLboolean
_mesa_is_zero_size_texture(const struct gl_texture_image *texImage)
{
   return (texImage->Width == 0 ||
           texImage->Height == 0 ||
           texImage->Depth == 0);
}
a55 2
extern GLenum
_mesa_get_proxy_target(GLenum target);
d62 5
a66 2
_mesa_delete_texture_image( struct gl_context *ctx,
                            struct gl_texture_image *teximage );
d70 1
a70 1
_mesa_init_teximage_fields(struct gl_context *ctx,
d83 1
d85 2
a86 3
_mesa_update_fbo_texture(struct gl_context *ctx,
                         struct gl_texture_object *texObj,
                         GLuint face, GLuint level);
d89 3
a91 2
_mesa_clear_texture_image(struct gl_context *ctx,
                          struct gl_texture_image *texImage);
d95 1
a95 2
_mesa_select_tex_object(struct gl_context *ctx,
                        const struct gl_texture_unit *texUnit,
d103 1
a103 2
_mesa_select_tex_image(struct gl_context *ctx,
                       const struct gl_texture_object *texObj,
d112 4
d122 2
a123 2
                          gl_format format,
                          GLint width, GLint height, GLint depth, GLint border);
a128 11
extern GLint
_mesa_get_texture_dimensions(GLenum target);

extern GLsizei
_mesa_get_tex_max_num_levels(GLenum target, GLsizei width, GLsizei height,
                             GLsizei depth);

extern GLboolean
_mesa_legal_texture_dimensions(struct gl_context *ctx, GLenum target,
                               GLint level, GLint width, GLint height,
                               GLint depth, GLint border);
d133 1
a133 1
static inline void
d141 1
a141 1
static inline void
a143 1
   (void) texObj;
d233 1
a233 1
_mesa_CompressedTexImage1D(GLenum target, GLint level,
d239 1
a239 1
_mesa_CompressedTexImage2D(GLenum target, GLint level,
d245 1
a245 1
_mesa_CompressedTexImage3D(GLenum target, GLint level,
d250 5
d256 1
a256 1
_mesa_CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset,
d261 1
a261 1
_mesa_CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset,
d267 1
a267 1
_mesa_CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset,
a271 31

extern void GLAPIENTRY
_mesa_TexBuffer(GLenum target, GLenum internalFormat, GLuint buffer);

extern void GLAPIENTRY
_mesa_TexBufferRange(GLenum target, GLenum internalFormat, GLuint buffer,
                     GLintptr offset, GLsizeiptr size);


extern void GLAPIENTRY
_mesa_TexImage2DMultisample(GLenum target, GLsizei samples,
                            GLint internalformat, GLsizei width,
                            GLsizei height, GLboolean fixedsamplelocations);

extern void GLAPIENTRY
_mesa_TexImage3DMultisample(GLenum target, GLsizei samples,
                            GLint internalformat, GLsizei width,
                            GLsizei height, GLsizei depth,
                            GLboolean fixedsamplelocations);

extern void GLAPIENTRY
_mesa_TexStorage2DMultisample(GLenum target, GLsizei samples,
                              GLenum internalformat, GLsizei width,
                              GLsizei height, GLboolean fixedsamplelocations);

extern void GLAPIENTRY
_mesa_TexStorage3DMultisample(GLenum target, GLsizei samples,
                              GLenum internalformat, GLsizei width,
                              GLsizei height, GLsizei depth,
                              GLboolean fixedsamplelocations);

a272 4

#ifdef __cplusplus
}
#endif
@


1.1.1.5
log
@Import Mesa 10.2.3
@
text
@d69 3
d86 1
a86 1
                           mesa_format format);
d89 1
a89 1
extern mesa_format
d106 5
d131 1
a131 1
                          mesa_format format,
a140 6
extern GLboolean
_mesa_tex_target_is_layered(GLenum target);

extern GLuint
_mesa_get_texture_layers(const struct gl_texture_object *texObj, GLint level);

a149 12
extern mesa_format
_mesa_validate_texbuffer_format(const struct gl_context *ctx,
                                GLenum internalFormat);


bool
_mesa_legal_texture_base_format_for_target(struct gl_context *ctx,
                                           GLenum target,
                                           GLenum internalFormat,
                                           unsigned dimensions,
                                           const char *caller);

d156 1
a156 1
   mtx_lock(&ctx->Shared->TexMutex);
d165 1
a165 1
   mtx_unlock(&ctx->Shared->TexMutex);
d299 1
a299 1
                            GLenum internalformat, GLsizei width,
d304 1
a304 1
                            GLenum internalformat, GLsizei width,
@


1.1.1.6
log
@Import Mesa 10.2.7
@
text
@a125 3
extern GLboolean
_mesa_target_can_be_compressed(const struct gl_context *ctx, GLenum target,
                               GLenum intFormat);
@


1.1.1.7
log
@Import Mesa 10.4.3
@
text
@a266 10
_mesa_ClearTexSubImage( GLuint texture, GLint level,
                        GLint xoffset, GLint yoffset, GLint zoffset,
                        GLsizei width, GLsizei height, GLsizei depth,
                        GLenum format, GLenum type, const void *data );

extern void GLAPIENTRY
_mesa_ClearTexImage( GLuint texture, GLint level,
                     GLenum format, GLenum type, const void *data );

extern void GLAPIENTRY
@


1.1.1.8
log
@Import Mesa 10.2.9
@
text
@d267 10
@


