head	1.12;
access;
symbols
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	v10_2_9:1.1.1.7
	v10_4_3:1.1.1.6
	v10_2_7:1.1.1.5
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	v10_2_3:1.1.1.5
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.4
	v9_2_3:1.1.1.4
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.4
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.12.23.05.17.53;	author jsg;	state dead;
branches;
next	1.11;
commitid	TnlogFl9nOv2eaRf;

1.11
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.10;
commitid	4ry2gvZGMXkCUD2n;

1.10
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.9;
commitid	mcxB0JvoI9gTDYXU;

1.9
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.8;
commitid	WPD6rgPryPkvXOr9;

1.8
date	2013.10.05.09.54.00;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2013.09.05.14.06.31;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.19;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.43;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.31;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.41;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.50.21;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.50.21;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.16.52;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.10.05.09.26.32;	author jsg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.07.09.20.35.05;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.6
date	2015.01.25.14.12.57;	author jsg;	state Exp;
branches;
next	1.1.1.7;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.7
date	2015.02.20.22.50.03;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.12
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 * Copyright (c) 2008-2009 VMware, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * \file texformat.c
 * Texture formats.
 *
 * \author Gareth Hughes
 * \author Brian Paul
 */


#include "context.h"
#include "enums.h"
#include "mtypes.h"
#include "texcompress.h"
#include "texformat.h"

#define RETURN_IF_SUPPORTED(f) do {		\
   if (ctx->TextureFormatSupported[f])		\
      return f;					\
} while (0)

/**
 * Choose an appropriate texture format given the format, type and
 * internalFormat parameters passed to glTexImage().
 *
 * \param ctx  the GL context.
 * \param target  a texture target (GL_TEXTURE_x)
 * \param internalFormat  user's prefered internal texture format.
 * \param format  incoming image pixel format.
 * \param type  incoming image data type.
 *
 * \return the closest mesa_format for the given format/type arguments
 *
 * This is called via dd_function_table::ChooseTextureFormat.  Hardware
 * drivers may override this function with a specialized version.
 */
mesa_format
_mesa_choose_tex_format(struct gl_context *ctx, GLenum target,
                        GLint internalFormat, GLenum format, GLenum type)
{
   (void) format;

   switch (internalFormat) {
   /* shallow RGBA formats */
   case 4:
   case GL_RGBA:
      if (type == GL_UNSIGNED_SHORT_4_4_4_4_REV) {
         RETURN_IF_SUPPORTED(MESA_FORMAT_B4G4R4A4_UNORM);
      } else if (type == GL_UNSIGNED_SHORT_1_5_5_5_REV) {
         RETURN_IF_SUPPORTED(MESA_FORMAT_B5G5R5A1_UNORM);
      } else if (type == GL_UNSIGNED_INT_2_10_10_10_REV) {
         RETURN_IF_SUPPORTED(MESA_FORMAT_B10G10R10A2_UNORM);
      }
      /* fallthrough */

   case GL_RGBA8:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
      break;
   case GL_RGB5_A1:
      RETURN_IF_SUPPORTED(MESA_FORMAT_B5G5R5A1_UNORM);
      break;
   case GL_RGBA2:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A4R4G4B4_UNORM); /* just to test another format*/
      RETURN_IF_SUPPORTED(MESA_FORMAT_B4G4R4A4_UNORM);
      break;
   case GL_RGBA4:
      RETURN_IF_SUPPORTED(MESA_FORMAT_B4G4R4A4_UNORM);
      break;

   /* deep RGBA formats */
   case GL_RGB10_A2:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R10G10B10A2_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B10G10R10A2_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
      break;
   case GL_RGBA12:
   case GL_RGBA16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
      break;

   /* shallow RGB formats */
   case 3:
   case GL_RGB:
      if (type == GL_UNSIGNED_INT_2_10_10_10_REV) {
         RETURN_IF_SUPPORTED(MESA_FORMAT_B10G10R10A2_UNORM);
      }
      /* fallthrough */
   case GL_RGB8:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_UNORM8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8X8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_UNORM);

      RETURN_IF_SUPPORTED(MESA_FORMAT_BGR_UNORM8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8X8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
      break;
   case GL_R3_G3_B2:
      RETURN_IF_SUPPORTED(MESA_FORMAT_B2G3R3_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B5G6R5_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R5G6B5_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_BGR_UNORM8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8X8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
      break;
   case GL_RGB4:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R5G6B5_UNORM); /* just to test another format */
      RETURN_IF_SUPPORTED(MESA_FORMAT_B5G6R5_UNORM);
      break;
   case GL_RGB5:
      RETURN_IF_SUPPORTED(MESA_FORMAT_B5G6R5_UNORM);
      break;

   /* deep RGB formats */
   case GL_RGB10:
   case GL_RGB12:
   case GL_RGB16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8X8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
      break;

   /* Alpha formats */
   case GL_ALPHA:
   case GL_ALPHA4:
   case GL_ALPHA8:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_UNORM8);
      break;

   case GL_ALPHA12:
   case GL_ALPHA16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_UNORM8);
      break;

   /* Luminance formats */
   case 1:
   case GL_LUMINANCE:
   case GL_LUMINANCE4:
   case GL_LUMINANCE8:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_UNORM8);
      break;

   case GL_LUMINANCE12:
   case GL_LUMINANCE16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_UNORM8);
      break;

      /* Luminance/Alpha formats */
   case GL_LUMINANCE4_ALPHA4:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L4A4_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_UNORM);
      break;

   case 2:
   case GL_LUMINANCE_ALPHA:
   case GL_LUMINANCE6_ALPHA2:
   case GL_LUMINANCE8_ALPHA8:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_UNORM);
      break;

   case GL_LUMINANCE12_ALPHA4:
   case GL_LUMINANCE12_ALPHA12:
   case GL_LUMINANCE16_ALPHA16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L16A16_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_UNORM);
      break;

   case GL_INTENSITY:
   case GL_INTENSITY4:
   case GL_INTENSITY8:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_UNORM8);
      break;

   case GL_INTENSITY12:
   case GL_INTENSITY16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_UNORM8);
      break;

   case GL_DEPTH_COMPONENT:
   case GL_DEPTH_COMPONENT24:
   case GL_DEPTH_COMPONENT32:
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z_UNORM32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z24_UNORM_X8_UINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z24_UNORM_S8_UINT);
      break;
   case GL_DEPTH_COMPONENT16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z24_UNORM_X8_UINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z24_UNORM_S8_UINT);
      break;

   case GL_COMPRESSED_ALPHA_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_UNORM8);
      break;
   case GL_COMPRESSED_LUMINANCE_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_UNORM8);
      break;
   case GL_COMPRESSED_LUMINANCE_ALPHA_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_UNORM);
      break;
   case GL_COMPRESSED_INTENSITY_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_UNORM8);
      break;
   case GL_COMPRESSED_RGB_ARB:
      /* We don't use texture compression for 1D and 1D array textures.
       * For 1D textures, compressions doesn't buy us much.
       * For 1D ARRAY textures, there's complicated issues with updating
       * sub-regions on non-block boundaries with glCopyTexSubImage, among
       * other issues.  FWIW, the GL_EXT_texture_array extension prohibits
       * 1D ARRAY textures in S3TC format.
       */
      if (target != GL_TEXTURE_1D && target != GL_TEXTURE_1D_ARRAY) {
         if (ctx->Mesa_DXTn)
            RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_DXT1);
         RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FXT1);
      }
      RETURN_IF_SUPPORTED(MESA_FORMAT_BGR_UNORM8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8X8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
      break;
   case GL_COMPRESSED_RGBA_ARB:
      /* We don't use texture compression for 1D and 1D array textures. */
      if (target != GL_TEXTURE_1D && target != GL_TEXTURE_1D_ARRAY) {
         if (ctx->Mesa_DXTn)
            RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_DXT3); /* Not rgba_dxt1, see spec */
         RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FXT1);
      }
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
      break;

   case GL_RGB565:
      RETURN_IF_SUPPORTED(MESA_FORMAT_B5G6R5_UNORM);
      break;

   case GL_YCBCR_MESA:
      if (type == GL_UNSIGNED_SHORT_8_8_MESA)
         RETURN_IF_SUPPORTED(MESA_FORMAT_YCBCR);
      else
         RETURN_IF_SUPPORTED(MESA_FORMAT_YCBCR_REV);
      break;

   /* For non-generic compressed format we assert two things:
    *
    * 1. The format has already been validated against the set of available
    *    extensions.
    *
    * 2. The driver only enables the extension if it supports all of the
    *    formats that are part of that extension.
    */
   case GL_COMPRESSED_RGB_FXT1_3DFX:
      return MESA_FORMAT_RGB_FXT1;
   case GL_COMPRESSED_RGBA_FXT1_3DFX:
      return MESA_FORMAT_RGBA_FXT1;
   case GL_COMPRESSED_RGB_S3TC_DXT1_EXT:
   case GL_RGB_S3TC:
   case GL_RGB4_S3TC:
      return MESA_FORMAT_RGB_DXT1;
   case GL_COMPRESSED_RGBA_S3TC_DXT1_EXT:
      return MESA_FORMAT_RGBA_DXT1;
   case GL_COMPRESSED_RGBA_S3TC_DXT3_EXT:
   case GL_RGBA_S3TC:
   case GL_RGBA4_S3TC:
      return MESA_FORMAT_RGBA_DXT3;
   case GL_COMPRESSED_RGBA_S3TC_DXT5_EXT:
      return MESA_FORMAT_RGBA_DXT5;
   case GL_COMPRESSED_RED_RGTC1:
      return MESA_FORMAT_R_RGTC1_UNORM;
   case GL_COMPRESSED_SIGNED_RED_RGTC1:
      return MESA_FORMAT_R_RGTC1_SNORM;
   case GL_COMPRESSED_RG_RGTC2:
      return MESA_FORMAT_RG_RGTC2_UNORM;
   case GL_COMPRESSED_SIGNED_RG_RGTC2:
      return MESA_FORMAT_RG_RGTC2_SNORM;
   case GL_COMPRESSED_LUMINANCE_LATC1_EXT:
      return MESA_FORMAT_L_LATC1_UNORM;
   case GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT:
      return MESA_FORMAT_L_LATC1_SNORM;
   case GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT:
      return MESA_FORMAT_LA_LATC2_UNORM;
   case GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT:
      return MESA_FORMAT_LA_LATC2_SNORM;
   case GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI:
      return MESA_FORMAT_LA_LATC2_UNORM;
   case GL_ETC1_RGB8_OES:
      return MESA_FORMAT_ETC1_RGB8;
   case GL_COMPRESSED_RGB8_ETC2:
      return MESA_FORMAT_ETC2_RGB8;
   case GL_COMPRESSED_SRGB8_ETC2:
      return MESA_FORMAT_ETC2_SRGB8;
   case GL_COMPRESSED_RGBA8_ETC2_EAC:
      return MESA_FORMAT_ETC2_RGBA8_EAC;
   case GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:
      return MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC;
   case GL_COMPRESSED_R11_EAC:
      return MESA_FORMAT_ETC2_R11_EAC;
   case GL_COMPRESSED_RG11_EAC:
      return MESA_FORMAT_ETC2_RG11_EAC;
   case GL_COMPRESSED_SIGNED_R11_EAC:
      return MESA_FORMAT_ETC2_SIGNED_R11_EAC;
   case GL_COMPRESSED_SIGNED_RG11_EAC:
      return MESA_FORMAT_ETC2_SIGNED_RG11_EAC;
   case GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:
      return MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1;
   case GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:
      return MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1;
   case GL_COMPRESSED_SRGB_S3TC_DXT1_EXT:
      return MESA_FORMAT_SRGB_DXT1;
   case GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT:
      return MESA_FORMAT_SRGBA_DXT1;
   case GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT:
      return MESA_FORMAT_SRGBA_DXT3;
   case GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT:
      return MESA_FORMAT_SRGBA_DXT5;

   case GL_ALPHA16F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_ALPHA32F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;
   case GL_LUMINANCE16F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_LUMINANCE32F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;
   case GL_LUMINANCE_ALPHA16F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_LUMINANCE_ALPHA32F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;
   case GL_INTENSITY16F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_INTENSITY32F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;
   case GL_RGB16F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_RGB32F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;
   case GL_RGBA16F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_RGBA32F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;

   case GL_RGB9_E5:
      /* GL_EXT_texture_shared_exponent -- just one format to support */
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_R9G9B9E5_FLOAT]);
      return MESA_FORMAT_R9G9B9E5_FLOAT;

   case GL_R11F_G11F_B10F:
      /* GL_EXT_texture_packed_float -- just one format to support */
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_R11G11B10_FLOAT]);
      return MESA_FORMAT_R11G11B10_FLOAT;

   case GL_DEPTH_STENCIL_EXT:
   case GL_DEPTH24_STENCIL8_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_S8_UINT_Z24_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z24_UNORM_S8_UINT);
      break;

   case GL_DEPTH_COMPONENT32F:
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_Z_FLOAT32]);
      return MESA_FORMAT_Z_FLOAT32;
   case GL_DEPTH32F_STENCIL8:
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_Z32_FLOAT_S8X24_UINT]);
      return MESA_FORMAT_Z32_FLOAT_S8X24_UINT;

   case GL_DUDV_ATI:
   case GL_DU8DV8_ATI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_DUDV8);
      break;

   case GL_RED_SNORM:
   case GL_R8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_SNORM8);
      break;
   case GL_RG_SNORM:
   case GL_RG8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8_SNORM);
      break;
   case GL_RGB_SNORM:
   case GL_RGB8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8X8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_X8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      break;
   case GL_RGBA_SNORM:
   case GL_RGBA8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
      break;
   case GL_ALPHA_SNORM:
   case GL_ALPHA8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_SNORM8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
      break;
   case GL_LUMINANCE_SNORM:
   case GL_LUMINANCE8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_SNORM8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_X8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
      break;
   case GL_LUMINANCE_ALPHA_SNORM:
   case GL_LUMINANCE8_ALPHA8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
      break;
   case GL_INTENSITY_SNORM:
   case GL_INTENSITY8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_SNORM8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
      break;
   case GL_R16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_SNORM16);
      break;
   case GL_RG16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R16G16_SNORM);
      break;
   case GL_RGB16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_SNORM16);
      /* FALLTHROUGH */
   case GL_RGBA16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
      break;
   case GL_ALPHA16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
      break;
   case GL_LUMINANCE16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_SNORM16);
      /* FALLTHROUGH */
   case GL_LUMINANCE16_ALPHA16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
      break;
   case GL_INTENSITY16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
      break;

   case GL_SRGB_EXT:
   case GL_SRGB8_EXT:
      /* there is no MESA_FORMAT_RGB_SRGB8 */
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8X8_SRGB);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SRGB);

      RETURN_IF_SUPPORTED(MESA_FORMAT_BGR_SRGB8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
      break;
   case GL_SRGB_ALPHA_EXT:
   case GL_SRGB8_ALPHA8_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SRGB);

      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SRGB);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
      break;
   case GL_SLUMINANCE_EXT:
   case GL_SLUMINANCE8_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_SRGB8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
      break;
   case GL_SLUMINANCE_ALPHA_EXT:
   case GL_SLUMINANCE8_ALPHA8_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_SRGB);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
      break;
   case GL_COMPRESSED_SLUMINANCE_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_SRGB8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
      break;
   case GL_COMPRESSED_SLUMINANCE_ALPHA_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_SRGB);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
      break;
   case GL_COMPRESSED_SRGB_EXT:
      if (ctx->Mesa_DXTn)
         RETURN_IF_SUPPORTED(MESA_FORMAT_SRGB_DXT1);
      RETURN_IF_SUPPORTED(MESA_FORMAT_BGR_SRGB8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
      break;
   case GL_COMPRESSED_SRGB_ALPHA_EXT:
      if (ctx->Mesa_DXTn)
         RETURN_IF_SUPPORTED(MESA_FORMAT_SRGBA_DXT3); /* Not srgba_dxt1, see spec */
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SRGB);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
      break;

   case GL_ALPHA8UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_UINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT8);
      break;
   case GL_ALPHA16UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_UINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT16);
      break;
   case GL_ALPHA32UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_UINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT32);
      break;
   case GL_ALPHA8I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_SINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT8);
      break;
   case GL_ALPHA16I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_SINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT16);
      break;
   case GL_ALPHA32I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_SINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT32);
      break;
   case GL_LUMINANCE8UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_UINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT8);
      break;
   case GL_LUMINANCE16UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_UINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT16);
      break;
   case GL_LUMINANCE32UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_UINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT32);
      break;
   case GL_LUMINANCE8I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_SINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT8);
      break;
   case GL_LUMINANCE16I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_SINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT16);
      break;
   case GL_LUMINANCE32I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_SINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT32);
      break;
   case GL_LUMINANCE_ALPHA8UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_UINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT8);
      break;
   case GL_LUMINANCE_ALPHA16UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_UINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT16);
      break;
   case GL_LUMINANCE_ALPHA32UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_UINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT32);
      break;
   case GL_LUMINANCE_ALPHA8I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_SINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT8);
      break;
   case GL_LUMINANCE_ALPHA16I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_SINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT16);
      break;
   case GL_LUMINANCE_ALPHA32I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_SINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT32);
      break;
   case GL_INTENSITY8UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_UINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT8);
      break;
   case GL_INTENSITY16UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_UINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT16);
      break;
   case GL_INTENSITY32UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_UINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT32);
      break;
   case GL_INTENSITY8I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_SINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT8);
      break;
   case GL_INTENSITY16I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_SINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT16);
      break;
   case GL_INTENSITY32I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_SINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT32);
      break;

   case GL_RGB8UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_UINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_UINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT8);
      break;
   case GL_RGB16UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_UINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_UINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT16);
      break;
   case GL_RGB32UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_UINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_UINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT32);
      break;
   case GL_RGB8I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_SINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_SINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT8);
      break;
   case GL_RGB16I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_SINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_SINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT16);
      break;
   case GL_RGB32I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_SINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_SINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT32);
      break;
   case GL_RGBA8UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT8);
      break;
   case GL_RGBA16UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT16);
      break;
   case GL_RGBA32UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT32);
      break;
   case GL_RGBA8I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT8);
      break;
   case GL_RGBA16I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT16);
      break;
   case GL_RGBA32I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT32);
      break;

   case GL_R8:
   case GL_RED:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_UNORM8);
      break;

   case GL_COMPRESSED_RED:
      if (target != GL_TEXTURE_1D && target != GL_TEXTURE_1D_ARRAY)
         RETURN_IF_SUPPORTED(MESA_FORMAT_R_RGTC1_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_UNORM8);
      break;

   case GL_R16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_UNORM16);
      break;

   case GL_RG:
   case GL_RG8:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8_UNORM);
      break;

   case GL_COMPRESSED_RG:
      if (target != GL_TEXTURE_1D && target != GL_TEXTURE_1D_ARRAY)
         RETURN_IF_SUPPORTED(MESA_FORMAT_RG_RGTC2_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8_UNORM);
      break;

   case GL_RG16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R16G16_UNORM);
      break;

   case GL_R16F:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_R32F:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;
   case GL_RG16F:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_RG32F:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;

   case GL_R8UI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_UINT8);
      break;
   case GL_RG8UI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_UINT8);
      break;
   case GL_R16UI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_UINT16);
      break;
   case GL_RG16UI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_UINT16);
      break;
   case GL_R32UI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_UINT32);
      break;
   case GL_RG32UI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_UINT32);
      break;
   case GL_R8I:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_SINT8);
      break;
   case GL_RG8I:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_SINT8);
      break;
   case GL_R16I:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_SINT16);
      break;
   case GL_RG16I:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_SINT16);
      break;
   case GL_R32I:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_SINT32);
      break;
   case GL_RG32I:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_SINT32);
      break;

   case GL_RGB10_A2UI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_B10G10R10A2_UINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R10G10B10A2_UINT);
      break;

   case GL_BGRA:
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
      break;
   }

   _mesa_problem(ctx, "unexpected format %s in _mesa_choose_tex_format()",
                 _mesa_lookup_enum_by_nr(internalFormat));
   return MESA_FORMAT_NONE;
}

GLboolean
_mesa_tex_target_is_array(GLenum target)
{
   switch (target) {
   case GL_TEXTURE_1D_ARRAY_EXT:
   case GL_TEXTURE_2D_ARRAY_EXT:
   case GL_TEXTURE_2D_MULTISAMPLE_ARRAY:
   case GL_TEXTURE_CUBE_MAP_ARRAY:
      return GL_TRUE;
   default:
      return GL_FALSE;
   }
}
@


1.11
log
@Merge Mesa 10.2.9
@
text
@@


1.10
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a157 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_UNORM);
a163 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_UNORM);
a226 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_UNORM);
a347 8
   case GL_COMPRESSED_RGBA_BPTC_UNORM:
      return MESA_FORMAT_BPTC_RGBA_UNORM;
   case GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM:
      return MESA_FORMAT_BPTC_SRGB_ALPHA_UNORM;
   case GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT:
      return MESA_FORMAT_BPTC_RGB_SIGNED_FLOAT;
   case GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT:
      return MESA_FORMAT_BPTC_RGB_UNSIGNED_FLOAT;
d443 5
a484 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8L8_SNORM);
a538 3

      RETURN_IF_SUPPORTED(MESA_FORMAT_X8B8G8R8_SRGB);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
a545 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
a550 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
a554 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8L8_SRGB);
a555 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
a559 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
a562 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8L8_SRGB);
a563 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
a569 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
a575 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
@


1.9
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d158 1
d165 1
d229 1
d351 8
a453 5
   case GL_DUDV_ATI:
   case GL_DU8DV8_ATI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_DUDV8);
      break;

d491 1
d546 3
d556 1
d562 1
d567 1
d569 1
d574 1
d578 1
d580 1
d587 1
d594 1
@


1.8
log
@Merge Mesa 9.2.1
@
text
@d57 1
a57 1
 * \return the closest gl_format for the given format/type arguments
d62 1
a62 1
gl_format
d73 1
a73 1
         RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB4444);
d75 1
a75 1
         RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB1555);
d77 1
a77 1
         RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB2101010);
d79 1
a79 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
      break;
d82 3
a84 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
d87 1
a87 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB1555);
d90 2
a91 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB4444_REV); /* just to test another format*/
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB4444);
d94 1
a94 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB4444);
d99 3
a101 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB2101010);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
d105 4
a108 4
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
d115 1
a115 1
         RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB2101010);
d119 7
a125 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XRGB8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
d128 6
a133 6
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB332);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565_REV);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XRGB8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
d136 2
a137 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565_REV); /* just to test another format */
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565);
d140 1
a140 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565);
d147 4
a150 4
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR16161616_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XRGB8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
d157 1
a157 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8);
d162 2
a163 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_A16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8);
d171 1
a171 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8);
d176 2
a177 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_L16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8);
d182 2
a183 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_AL44);
      RETURN_IF_SUPPORTED(MESA_FORMAT_AL88);
d190 1
a190 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_AL88);
d196 2
a197 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_AL1616);
      RETURN_IF_SUPPORTED(MESA_FORMAT_AL88);
d203 1
a203 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_I8);
d208 2
a209 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_I16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_I8);
d215 3
a217 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_X8_Z24);
      RETURN_IF_SUPPORTED(MESA_FORMAT_S8_Z24);
d220 3
a222 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_X8_Z24);
      RETURN_IF_SUPPORTED(MESA_FORMAT_S8_Z24);
d226 1
a226 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8);
d229 1
a229 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8);
d232 1
a232 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_AL88);
d235 1
a235 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_I8);
d250 3
a252 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XRGB8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
d261 2
a262 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
d266 1
a266 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565);
d301 1
a301 1
      return MESA_FORMAT_RED_RGTC1;
d303 1
a303 1
      return MESA_FORMAT_SIGNED_RED_RGTC1;
d305 1
a305 1
      return MESA_FORMAT_RG_RGTC2;
d307 1
a307 1
      return MESA_FORMAT_SIGNED_RG_RGTC2;
d309 1
a309 1
      return MESA_FORMAT_L_LATC1;
d311 1
a311 1
      return MESA_FORMAT_SIGNED_L_LATC1;
d313 1
a313 1
      return MESA_FORMAT_LA_LATC2;
d315 1
a315 1
      return MESA_FORMAT_SIGNED_LA_LATC2;
d317 1
a317 1
      return MESA_FORMAT_LA_LATC2;
d350 2
a351 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_FLOAT32);
d356 1
a356 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_FLOAT32);
d358 1
a358 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_FLOAT16);
d362 2
a363 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_FLOAT32);
d368 1
a368 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_FLOAT32);
d370 1
a370 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_FLOAT16);
d374 2
a375 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32);
d380 1
a380 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32);
d382 1
a382 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16);
d386 2
a387 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_FLOAT32);
d392 1
a392 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_FLOAT32);
d394 1
a394 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_FLOAT16);
d399 1
a399 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR16161616_FLOAT);
d406 1
a406 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR32323232_FLOAT);
d422 2
a423 2
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_RGB9_E5_FLOAT]);
      return MESA_FORMAT_RGB9_E5_FLOAT;
d427 2
a428 2
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_R11_G11_B10_FLOAT]);
      return MESA_FORMAT_R11_G11_B10_FLOAT;
d432 2
a433 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z24_S8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_S8_Z24);
d437 2
a438 2
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_Z32_FLOAT]);
      return MESA_FORMAT_Z32_FLOAT;
d440 2
a441 2
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_Z32_FLOAT_X24S8]);
      return MESA_FORMAT_Z32_FLOAT_X24S8;
d450 1
a450 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_R8);
d454 1
a454 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RG88_REV);
d458 5
a462 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBX8888);
      /* FALLTHROUGH */
d465 3
a467 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
d471 3
a473 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_A8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
d477 4
a480 4
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_L8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBX8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
d484 3
a486 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_AL88);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
d490 3
a492 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_I8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
d495 1
a495 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_R16);
d498 1
a498 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_GR1616);
d501 2
a502 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGB_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR16161616_SNORM);
d505 3
a507 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
d510 4
a513 4
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_A16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
d516 1
a516 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_L16);
d519 4
a522 4
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_AL1616);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
d525 4
a528 4
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_I16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
d533 6
a538 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_SRGB8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
d542 4
a545 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_SRGBA8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
d549 2
a550 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_SL8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
d554 2
a555 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_SLA8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
d558 2
a559 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_SL8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
d562 2
a563 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_SLA8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
d568 2
a569 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_SRGB8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
d574 2
a575 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_SRGBA8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
d579 1
a579 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_UINT8);
d583 1
a583 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_UINT16);
d587 1
a587 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_UINT32);
d591 2
a592 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_INT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT8);
d595 2
a596 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_INT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT16);
d599 2
a600 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_INT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT32);
d603 1
a603 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_UINT8);
d607 1
a607 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_UINT16);
d611 1
a611 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_UINT32);
d615 2
a616 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_INT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT8);
d619 2
a620 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_INT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT16);
d623 2
a624 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_INT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT32);
d627 1
a627 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_UINT8);
d631 1
a631 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_UINT16);
d635 1
a635 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_UINT32);
d639 2
a640 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_INT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT8);
d643 2
a644 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_INT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT16);
d647 2
a648 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_INT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT32);
d651 1
a651 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_UINT8);
d655 1
a655 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_UINT16);
d659 1
a659 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_UINT32);
d663 2
a664 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_INT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT8);
d667 2
a668 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_INT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT16);
d671 2
a672 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_INT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT32);
d677 1
a677 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR8888_UINT);
d682 1
a682 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR16161616_UINT);
d687 1
a687 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR32323232_UINT);
d691 3
a693 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_INT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR8888_SINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT8);
d696 3
a698 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_INT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR16161616_SINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT16);
d701 3
a703 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_INT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR32323232_SINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT32);
d715 1
a715 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT8);
d718 1
a718 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT16);
d721 1
a721 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT32);
d726 1
a726 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8);
d731 2
a732 2
         RETURN_IF_SUPPORTED(MESA_FORMAT_RED_RGTC1);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8);
d736 1
a736 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R16);
d741 1
a741 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_GR88);
d746 2
a747 2
         RETURN_IF_SUPPORTED(MESA_FORMAT_RG_RGTC2);
      RETURN_IF_SUPPORTED(MESA_FORMAT_GR88);
d751 1
a751 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_GR1616);
d802 1
a802 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_INT8);
d805 1
a805 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_INT8);
d808 1
a808 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_INT16);
d811 1
a811 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_INT16);
d814 1
a814 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_INT32);
d817 1
a817 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_INT32);
d821 2
a822 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB2101010_UINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ABGR2101010_UINT);
d826 1
a826 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
@


1.7
log
@Merge Mesa 9.2.0
@
text
@d242 1
a242 2
         if (ctx->Extensions.EXT_texture_compression_s3tc ||
             ctx->Extensions.ANGLE_texture_compression_dxt)
d244 1
a244 2
         if (ctx->Extensions.TDFX_texture_compression_FXT1)
            RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FXT1);
d253 1
a253 2
         if (ctx->Extensions.EXT_texture_compression_s3tc ||
             ctx->Extensions.ANGLE_texture_compression_dxt)
d255 1
a255 2
         if (ctx->Extensions.TDFX_texture_compression_FXT1)
            RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FXT1);
d552 2
a553 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_SRGB_DXT1);
d558 2
a559 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_SRGBA_DXT3); /* Not srgba_dxt1, see spec */
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.7
d20 4
a23 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d37 1
a37 1
#include "mfeatures.h"
d52 1
d57 4
a60 5
 * \return a pointer to a gl_texture_format object which describes the
 * choosen texture format, or NULL on failure.
 * 
 * This is called via dd_function_table::ChooseTextureFormat.  Hardware drivers
 * will typically override this function with a specialized version.
d63 2
a64 2
_mesa_choose_tex_format( struct gl_context *ctx, GLint internalFormat,
                         GLenum format, GLenum type )
a66 1
   (void) type;
d69 106
a174 97
      /* shallow RGBA formats */
      case 4:
      case GL_RGBA:
	 if (type == GL_UNSIGNED_SHORT_4_4_4_4_REV) {
	    RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB4444);
	 } else if (type == GL_UNSIGNED_SHORT_1_5_5_5_REV) {
	    RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB1555);
	 }
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA8888);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
	 break;

      case GL_RGBA8:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA8888);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
	 break;
      case GL_RGB5_A1:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB1555);
	 break;
      case GL_RGBA2:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB4444_REV); /* just to test another format*/
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB4444);
	 break;
      case GL_RGBA4:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB4444);
	 break;

      /* deep RGBA formats */
      case GL_RGB10_A2:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB2101010);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
	 break;
      case GL_RGBA12:
      case GL_RGBA16:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_16);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_16);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA8888);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
	 break;

      /* shallow RGB formats */
      case 3:
      case GL_RGB:
      case GL_RGB8:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGB888);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_XRGB8888);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
	 break;
      case GL_R3_G3_B2:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGB332);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGB888);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_XRGB8888);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
	 break;
      case GL_RGB4:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565_REV); /* just to test another format */
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565);
	 break;
      case GL_RGB5:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565);
	 break;

      /* deep RGB formats */
      case GL_RGB10:
      case GL_RGB12:
      case GL_RGB16:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_16);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_XRGB8888);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
	 break;

      /* Alpha formats */
      case GL_ALPHA:
      case GL_ALPHA4:
      case GL_ALPHA8:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_A8);
	 break;

      case GL_ALPHA12:
      case GL_ALPHA16:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_A16);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_A8);
	 break;

      /* Luminance formats */
      case 1:
      case GL_LUMINANCE:
      case GL_LUMINANCE4:
      case GL_LUMINANCE8:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_L8);
	 break;

      case GL_LUMINANCE12:
      case GL_LUMINANCE16:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_L16);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_L8);
	 break;
d177 65
a241 77
      case GL_LUMINANCE4_ALPHA4:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_AL44);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_AL88);
	 break;

      case 2:
      case GL_LUMINANCE_ALPHA:
      case GL_LUMINANCE6_ALPHA2:
      case GL_LUMINANCE8_ALPHA8:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_AL88);
	 break;

      case GL_LUMINANCE12_ALPHA4:
      case GL_LUMINANCE12_ALPHA12:
      case GL_LUMINANCE16_ALPHA16:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_AL1616);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_AL88);
	 break;

      case GL_INTENSITY:
      case GL_INTENSITY4:
      case GL_INTENSITY8:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_I8);
	 break;

      case GL_INTENSITY12:
      case GL_INTENSITY16:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_I16);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_I8);
	 break;

      case GL_COLOR_INDEX:
      case GL_COLOR_INDEX1_EXT:
      case GL_COLOR_INDEX2_EXT:
      case GL_COLOR_INDEX4_EXT:
      case GL_COLOR_INDEX12_EXT:
      case GL_COLOR_INDEX16_EXT:
      case GL_COLOR_INDEX8_EXT:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_CI8);
	 break;

      default:
         ; /* fallthrough */
   }

   if (ctx->Extensions.ARB_depth_texture) {
      switch (internalFormat) {
         case GL_DEPTH_COMPONENT:
         case GL_DEPTH_COMPONENT24:
         case GL_DEPTH_COMPONENT32:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_Z32);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_X8_Z24);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_S8_Z24);
	    break;
         case GL_DEPTH_COMPONENT16:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_Z16);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_X8_Z24);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_S8_Z24);
         default:
            ; /* fallthrough */
      }
   }

   switch (internalFormat) {
      case GL_COMPRESSED_ALPHA_ARB:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_A8);
	 break;
      case GL_COMPRESSED_LUMINANCE_ARB:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_L8);
	 break;
      case GL_COMPRESSED_LUMINANCE_ALPHA_ARB:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_AL88);
	 break;
      case GL_COMPRESSED_INTENSITY_ARB:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_I8);
	 break;
      case GL_COMPRESSED_RGB_ARB:
d243 2
a244 2
             ctx->Extensions.S3_s3tc)
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_DXT1);
d246 9
a254 6
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FXT1);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGB888);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_XRGB8888);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
	 break;
      case GL_COMPRESSED_RGBA_ARB:
d256 2
a257 2
             ctx->Extensions.S3_s3tc)
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_DXT3); /* Not rgba_dxt1, see spec */
d259 1
a259 14
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FXT1);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA8888);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
	 break;
      default:
         ; /* fallthrough */
   }

   if (ctx->Extensions.MESA_ycbcr_texture) {
      if (internalFormat == GL_YCBCR_MESA) {
         if (type == GL_UNSIGNED_SHORT_8_8_MESA)
	    RETURN_IF_SUPPORTED(MESA_FORMAT_YCBCR);
         else
	    RETURN_IF_SUPPORTED(MESA_FORMAT_YCBCR_REV);
d261 555
d818 4
a821 14
#if FEATURE_texture_fxt1
   if (ctx->Extensions.TDFX_texture_compression_FXT1) {
      switch (internalFormat) {
         case GL_COMPRESSED_RGB_FXT1_3DFX:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FXT1);
	 break;
         case GL_COMPRESSED_RGBA_FXT1_3DFX:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FXT1);
	 break;
         default:
            ; /* fallthrough */
      }
   }
#endif
d823 11
a833 420
#if FEATURE_texture_s3tc
   if (ctx->Extensions.EXT_texture_compression_s3tc) {
      switch (internalFormat) {
         case GL_COMPRESSED_RGB_S3TC_DXT1_EXT:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_DXT1);
	    break;
         case GL_COMPRESSED_RGBA_S3TC_DXT1_EXT:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_DXT1);
	    break;
         case GL_COMPRESSED_RGBA_S3TC_DXT3_EXT:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_DXT3);
	    break;
         case GL_COMPRESSED_RGBA_S3TC_DXT5_EXT:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_DXT5);
	    break;
         default:
            ; /* fallthrough */
      }
   }

   if (ctx->Extensions.S3_s3tc) {
      switch (internalFormat) {
         case GL_RGB_S3TC:
         case GL_RGB4_S3TC:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_DXT1);
	    break;
         case GL_RGBA_S3TC:
         case GL_RGBA4_S3TC:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_DXT3);
	    break;
         default:
            ; /* fallthrough */
      }
   }
#endif

   if (ctx->Extensions.ARB_texture_float) {
      switch (internalFormat) {
         case GL_ALPHA16F_ARB:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_FLOAT16);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_FLOAT32);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	    break;
         case GL_ALPHA32F_ARB:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_FLOAT32);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	    break;
         case GL_LUMINANCE16F_ARB:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_FLOAT16);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_FLOAT32);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	    break;
         case GL_LUMINANCE32F_ARB:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_FLOAT32);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	    break;
         case GL_LUMINANCE_ALPHA16F_ARB:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	    break;
         case GL_LUMINANCE_ALPHA32F_ARB:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	    break;
         case GL_INTENSITY16F_ARB:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_FLOAT16);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_FLOAT32);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	    break;
         case GL_INTENSITY32F_ARB:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_FLOAT32);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	    break;
         case GL_RGB16F_ARB:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FLOAT16);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FLOAT32);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	    break;
         case GL_RGB32F_ARB:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FLOAT32);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	    break;
         case GL_RGBA16F_ARB:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	    break;
         case GL_RGBA32F_ARB:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	    break;
         default:
            ; /* fallthrough */
      }
   }

   if (ctx->Extensions.EXT_texture_shared_exponent) {
      switch (internalFormat) {
         case GL_RGB9_E5:
            ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_RGB9_E5_FLOAT]);
            return MESA_FORMAT_RGB9_E5_FLOAT;
         default:
            ; /* fallthrough */
      }
   }

   if (ctx->Extensions.EXT_packed_float) {
      switch (internalFormat) {
         case GL_R11F_G11F_B10F:
            ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_R11_G11_B10_FLOAT]);
            return MESA_FORMAT_R11_G11_B10_FLOAT;
         default:
            ; /* fallthrough */
      }
   }

   if (ctx->Extensions.EXT_packed_depth_stencil) {
      switch (internalFormat) {
         case GL_DEPTH_STENCIL_EXT:
         case GL_DEPTH24_STENCIL8_EXT:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_Z24_S8);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_S8_Z24);
	    break;
         default:
            ; /* fallthrough */
      }
   }

   if (ctx->Extensions.ATI_envmap_bumpmap) {
      switch (internalFormat) {
         case GL_DUDV_ATI:
         case GL_DU8DV8_ATI:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_DUDV8);
	    break;
         default:
            ; /* fallthrough */
      }
   }

   if (ctx->Extensions.EXT_texture_snorm) {
      switch (internalFormat) {
         case GL_RED_SNORM:
         case GL_R8_SNORM:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_R8);
	    break;
         case GL_RG_SNORM:
         case GL_RG8_SNORM:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RG88_REV);
	    break;
         case GL_RGB_SNORM:
         case GL_RGB8_SNORM:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBX8888);
	    /* FALLTHROUGH */
         case GL_RGBA_SNORM:
         case GL_RGBA8_SNORM:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
	    break;
         case GL_ALPHA_SNORM:
         case GL_ALPHA8_SNORM:
            RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_A8);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
            break;
         case GL_LUMINANCE_SNORM:
         case GL_LUMINANCE8_SNORM:
            RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_L8);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBX8888);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
            break;
         case GL_LUMINANCE_ALPHA_SNORM:
         case GL_LUMINANCE8_ALPHA8_SNORM:
            RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_AL88);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
            break;
         case GL_INTENSITY_SNORM:
         case GL_INTENSITY8_SNORM:
            RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_I8);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
            break;
         case GL_R16_SNORM:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_R16);
	    break;
         case GL_RG16_SNORM:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_GR1616);
	    break;
         case GL_RGB16_SNORM:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGB_16);
	    /* FALLTHROUGH */
         case GL_RGBA16_SNORM:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA_16);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
	    break;
         case GL_ALPHA16_SNORM:
            RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_A16);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA_16);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
            break;
         case GL_LUMINANCE16_SNORM:
            RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_L16);
	    /* FALLTHROUGH */
         case GL_LUMINANCE16_ALPHA16_SNORM:
            RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_AL1616);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA_16);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
            break;
         case GL_INTENSITY16_SNORM:
            RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_I16);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA_16);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
            break;
         default:
            ; /* fall-through */
      }
   }

#if FEATURE_EXT_texture_sRGB
   if (ctx->Extensions.EXT_texture_sRGB) {
      switch (internalFormat) {
         case GL_SRGB_EXT:
         case GL_SRGB8_EXT:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SRGB8);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
	    break;
         case GL_SRGB_ALPHA_EXT:
         case GL_SRGB8_ALPHA8_EXT:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SRGBA8);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
	    break;
         case GL_SLUMINANCE_EXT:
         case GL_SLUMINANCE8_EXT:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SL8);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
	    break;
         case GL_SLUMINANCE_ALPHA_EXT:
         case GL_SLUMINANCE8_ALPHA8_EXT:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SLA8);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
	    break;
         case GL_COMPRESSED_SLUMINANCE_EXT:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SL8);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
	    break;
         case GL_COMPRESSED_SLUMINANCE_ALPHA_EXT:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SLA8);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
	    break;
         case GL_COMPRESSED_SRGB_EXT:
#if FEATURE_texture_s3tc
            if (ctx->Extensions.EXT_texture_compression_s3tc)
	       RETURN_IF_SUPPORTED(MESA_FORMAT_SRGB_DXT1);
#endif
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SRGB8);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
	    break;
         case GL_COMPRESSED_SRGB_ALPHA_EXT:
#if FEATURE_texture_s3tc
            if (ctx->Extensions.EXT_texture_compression_s3tc)
	       RETURN_IF_SUPPORTED(MESA_FORMAT_SRGBA_DXT3); /* Not srgba_dxt1, see spec */
#endif
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SRGBA8);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
	    break;
#if FEATURE_texture_s3tc
         case GL_COMPRESSED_SRGB_S3TC_DXT1_EXT:
            if (ctx->Extensions.EXT_texture_compression_s3tc)
	       RETURN_IF_SUPPORTED(MESA_FORMAT_SRGB_DXT1);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
            break;
         case GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT:
            if (ctx->Extensions.EXT_texture_compression_s3tc)
	       RETURN_IF_SUPPORTED(MESA_FORMAT_SRGBA_DXT1);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
            break;
         case GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT:
            if (ctx->Extensions.EXT_texture_compression_s3tc)
	       RETURN_IF_SUPPORTED(MESA_FORMAT_SRGBA_DXT3);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
            break;
         case GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT:
            if (ctx->Extensions.EXT_texture_compression_s3tc)
	       RETURN_IF_SUPPORTED(MESA_FORMAT_SRGBA_DXT5);
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
            break;
#endif
         default:
            ; /* fallthrough */
      }
   }
#endif /* FEATURE_EXT_texture_sRGB */

   if (ctx->Extensions.EXT_texture_integer) {
      switch (internalFormat) {
      case GL_RGBA32UI_EXT:
      case GL_RGB32UI_EXT:
      case GL_ALPHA32UI_EXT:
      case GL_INTENSITY32UI_EXT:
      case GL_LUMINANCE32UI_EXT:
      case GL_LUMINANCE_ALPHA32UI_EXT:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT32);
	 break;
      case GL_RGBA16UI_EXT:
      case GL_RGB16UI_EXT:
      case GL_ALPHA16UI_EXT:
      case GL_INTENSITY16UI_EXT:
      case GL_LUMINANCE16UI_EXT:
      case GL_LUMINANCE_ALPHA16UI_EXT:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT16);
	 break;
      case GL_RGBA8UI_EXT:
      case GL_RGB8UI_EXT:
      case GL_ALPHA8UI_EXT:
      case GL_INTENSITY8UI_EXT:
      case GL_LUMINANCE8UI_EXT:
      case GL_LUMINANCE_ALPHA8UI_EXT:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT8);
	 break;
      case GL_RGBA32I_EXT:
      case GL_RGB32I_EXT:
      case GL_ALPHA32I_EXT:
      case GL_INTENSITY32I_EXT:
      case GL_LUMINANCE32I_EXT:
      case GL_LUMINANCE_ALPHA32I_EXT:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT32);
	 break;
      case GL_RGBA16I_EXT:
      case GL_RGB16I_EXT:
      case GL_ALPHA16I_EXT:
      case GL_INTENSITY16I_EXT:
      case GL_LUMINANCE16I_EXT:
      case GL_LUMINANCE_ALPHA16I_EXT:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT16);
	 break;
      case GL_RGBA8I_EXT:
      case GL_RGB8I_EXT:
      case GL_ALPHA8I_EXT:
      case GL_INTENSITY8I_EXT:
      case GL_LUMINANCE8I_EXT:
      case GL_LUMINANCE_ALPHA8I_EXT:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT8);
	 break;
      }
   }

   if (ctx->Extensions.ARB_texture_rg) {
      switch (internalFormat) {
      case GL_R8:
      case GL_RED:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_R8);
	 break;

      case GL_COMPRESSED_RED:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RED_RGTC1);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_R8);
	 break;

      case GL_R16:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_R16);
	 break;

      case GL_RG:
      case GL_RG8:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RG88);
	 break;

      case GL_COMPRESSED_RG:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RG_RGTC2);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RG88);
	 break;

      case GL_RG16:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RG1616);
	 break;

      default:
         ; /* fallthrough */
      }
   }

   if (ctx->Extensions.ARB_texture_rg && ctx->Extensions.ARB_texture_float) {
      switch (internalFormat) {
      case GL_R16F:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_R_FLOAT16);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_R_FLOAT32);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	 break;
      case GL_R32F:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_R_FLOAT32);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	 break;
      case GL_RG16F:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT16);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT32);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	 break;
      case GL_RG32F:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT32);
	 RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
	 break;

      default:
         ; /* fallthrough */
      }
   }

   if (ctx->Extensions.EXT_texture_format_BGRA8888) {
      switch (internalFormat) {
      case GL_BGRA:
	 RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
	 break;

      default:
         ; /* fallthrough */
      }
a834 51

   if (ctx->Extensions.ARB_texture_compression_rgtc) {
      switch (internalFormat) {
         case GL_COMPRESSED_RED_RGTC1:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RED_RGTC1);
	    break;
         case GL_COMPRESSED_SIGNED_RED_RGTC1:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RED_RGTC1);
	    break;
         case GL_COMPRESSED_RG_RGTC2:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_RG_RGTC2);
	    break;
         case GL_COMPRESSED_SIGNED_RG_RGTC2:
	    RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RG_RGTC2);
	    break;
         default:
            ; /* fallthrough */
      }
   }

   if (ctx->Extensions.EXT_texture_compression_latc) {
      switch (internalFormat) {
         case GL_COMPRESSED_LUMINANCE_LATC1_EXT:
            RETURN_IF_SUPPORTED(MESA_FORMAT_L_LATC1);
            break;
         case GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT:
            RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_L_LATC1);
            break;
         case GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT:
            RETURN_IF_SUPPORTED(MESA_FORMAT_LA_LATC2);
            break;
         case GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT:
            RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_LA_LATC2);
            break;
         default:
            ; /* fallthrough */
      }
   }

   if (ctx->Extensions.ATI_texture_compression_3dc) {
      switch (internalFormat) {
         case GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI:
            RETURN_IF_SUPPORTED(MESA_FORMAT_LA_LATC2);
            break;
         default:
            ; /* fallthrough */
      }
   }

   _mesa_problem(ctx, "unexpected format in _mesa_choose_tex_format()");
   return MESA_FORMAT_NONE;
a835 1

@


1.5
log
@Merge Mesa 7.10.3
@
text
@d37 2
d42 4
d73 9
d83 3
a85 1
         return MESA_FORMAT_RGBA8888;
d87 2
a88 1
         return MESA_FORMAT_ARGB1555;
d90 3
a92 1
         return MESA_FORMAT_ARGB4444_REV; /* just to test another format*/
d94 2
a95 1
         return MESA_FORMAT_ARGB4444;
d99 3
d104 5
a108 1
         return MESA_FORMAT_RGBA_16;
d114 4
a117 1
         return MESA_FORMAT_RGB888;
d119 5
a123 1
         return MESA_FORMAT_RGB332;
d125 3
a127 1
         return MESA_FORMAT_RGB565_REV; /* just to test another format */
d129 2
a130 1
         return MESA_FORMAT_RGB565;
d136 4
a139 1
         return MESA_FORMAT_RGBA_16;
d144 4
d150 3
a152 2
      case GL_ALPHA8:
         return MESA_FORMAT_A8;
d158 4
d164 3
a166 2
      case GL_LUMINANCE8:
         return MESA_FORMAT_L8;
d169 5
a175 1
      case GL_LUMINANCE4_ALPHA4:
d178 2
a179 1
         return MESA_FORMAT_AL88;
d184 3
a186 1
         return MESA_FORMAT_AL1616;
d190 4
d196 3
a198 2
      case GL_INTENSITY8:
         return MESA_FORMAT_I8;
d207 2
a208 1
         return MESA_FORMAT_CI8;
d219 4
a222 1
            return MESA_FORMAT_Z32;
d224 3
a226 1
            return MESA_FORMAT_Z16;
d234 2
a235 1
         return MESA_FORMAT_A8;
d237 2
a238 1
         return MESA_FORMAT_L8;
d240 2
a241 1
         return MESA_FORMAT_AL88;
d243 2
a244 1
         return MESA_FORMAT_I8;
d248 1
a248 1
            return MESA_FORMAT_RGB_DXT1;
d250 5
a254 2
            return MESA_FORMAT_RGB_FXT1;
         return MESA_FORMAT_RGB888;
d258 1
a258 1
            return MESA_FORMAT_RGBA_DXT3; /* Not rgba_dxt1, see spec */
d260 4
a263 2
            return MESA_FORMAT_RGBA_FXT1;
         return MESA_FORMAT_RGBA8888;
d271 1
a271 1
            return MESA_FORMAT_YCBCR;
d273 1
a273 1
            return MESA_FORMAT_YCBCR_REV;
d281 2
a282 1
            return MESA_FORMAT_RGB_FXT1;
d284 2
a285 1
            return MESA_FORMAT_RGBA_FXT1;
d296 2
a297 1
            return MESA_FORMAT_RGB_DXT1;
d299 2
a300 1
            return MESA_FORMAT_RGBA_DXT1;
d302 2
a303 1
            return MESA_FORMAT_RGBA_DXT3;
d305 2
a306 1
            return MESA_FORMAT_RGBA_DXT5;
d316 2
a317 1
            return MESA_FORMAT_RGB_DXT1;
d320 2
a321 1
            return MESA_FORMAT_RGBA_DXT3;
d331 4
a334 1
            return MESA_FORMAT_ALPHA_FLOAT16;
d336 3
a338 1
            return MESA_FORMAT_ALPHA_FLOAT32;
d340 4
a343 1
            return MESA_FORMAT_LUMINANCE_FLOAT16;
d345 3
a347 1
            return MESA_FORMAT_LUMINANCE_FLOAT32;
d349 4
a352 1
            return MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16;
d354 3
a356 1
            return MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32;
d358 4
a361 1
            return MESA_FORMAT_INTENSITY_FLOAT16;
d363 3
a365 1
            return MESA_FORMAT_INTENSITY_FLOAT32;
d367 4
a370 1
            return MESA_FORMAT_RGB_FLOAT16;
d372 3
a374 1
            return MESA_FORMAT_RGB_FLOAT32;
d376 3
a378 1
            return MESA_FORMAT_RGBA_FLOAT16;
d380 22
a401 1
            return MESA_FORMAT_RGBA_FLOAT32;
d411 3
a413 1
            return MESA_FORMAT_Z24_S8;
d423 2
a424 11
            return MESA_FORMAT_DUDV8;
         default:
            ; /* fallthrough */
      }
   }

   if (ctx->Extensions.MESA_texture_signed_rgba) {
      switch (internalFormat) {
         case GL_RGBA_SNORM:
         case GL_RGBA8_SNORM:
            return MESA_FORMAT_SIGNED_RGBA8888;
d430 1
a430 1
   if (ctx->VersionMajor * 10 + ctx->VersionMinor >= 31) {
d434 2
a435 1
            return MESA_FORMAT_SIGNED_R8;
d438 2
a439 1
            return MESA_FORMAT_SIGNED_RG88;
d442 2
a443 1
            return MESA_FORMAT_SIGNED_RGBX8888;
d446 28
a473 1
            return MESA_FORMAT_SIGNED_RGBA8888;
d475 2
a476 1
            return MESA_FORMAT_SIGNED_R_16;
d478 2
a479 1
            return MESA_FORMAT_SIGNED_RG_16;
d481 2
a482 1
            return MESA_FORMAT_SIGNED_RGB_16;
d484 25
a508 1
            return MESA_FORMAT_SIGNED_RGBA_16;
d519 3
a521 1
            return MESA_FORMAT_SRGB8;
d524 3
a526 1
            return MESA_FORMAT_SRGBA8;
d529 3
a531 1
            return MESA_FORMAT_SL8;
d534 3
a536 1
            return MESA_FORMAT_SLA8;
d538 3
a540 1
            return MESA_FORMAT_SL8;
d542 3
a544 1
            return MESA_FORMAT_SLA8;
d548 1
a548 1
               return MESA_FORMAT_SRGB_DXT1;
d550 3
a552 1
            return MESA_FORMAT_SRGB8;
d556 1
a556 1
               return MESA_FORMAT_SRGBA_DXT3; /* Not srgba_dxt1, see spec */
d558 3
a560 1
            return MESA_FORMAT_SRGBA8;
d564 2
a565 1
               return MESA_FORMAT_SRGB_DXT1;
d569 2
a570 1
               return MESA_FORMAT_SRGBA_DXT1;
d574 2
a575 1
               return MESA_FORMAT_SRGBA_DXT3;
d579 2
a580 1
               return MESA_FORMAT_SRGBA_DXT5;
d597 2
a598 1
         return MESA_FORMAT_RGBA_UINT32;
d605 2
a606 1
         return MESA_FORMAT_RGBA_UINT16;
d613 2
a614 1
         return MESA_FORMAT_RGBA_UINT8;
d621 2
a622 1
         return MESA_FORMAT_RGBA_INT32;
d629 2
a630 1
         return MESA_FORMAT_RGBA_INT16;
d637 2
a638 1
         return MESA_FORMAT_RGBA_INT8;
d646 3
d650 3
a652 1
	 return MESA_FORMAT_R8;
d655 2
a656 1
         return MESA_FORMAT_R16;
d660 3
d664 3
a666 1
	 return MESA_FORMAT_RG88;
d669 39
a707 1
	 return MESA_FORMAT_RG1616;
d711 48
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d57 1
a57 1
_mesa_choose_tex_format( GLcontext *ctx, GLint internalFormat,
d64 1
a64 1
      /* RGBA formats */
a66 3
      case GL_RGB10_A2:
      case GL_RGBA12:
      case GL_RGBA16:
d76 7
a82 1
      /* RGB formats */
a84 3
      case GL_RGB10:
      case GL_RGB12:
      case GL_RGB16:
d94 6
d303 26
d384 70
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d3 1
a3 1
 * Version:  6.5.1
d5 2
a6 1
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
d32 1
a35 1
#include "colormac.h"
d37 1
a38 1325
#include "texstore.h"


#if FEATURE_EXT_texture_sRGB

/**
 * Convert an 8-bit sRGB value from non-linear space to a
 * linear RGB value in [0, 1].
 * Implemented with a 256-entry lookup table.
 */
static INLINE GLfloat
nonlinear_to_linear(GLubyte cs8)
{
   static GLfloat table[256];
   static GLboolean tableReady = GL_FALSE;
   if (!tableReady) {
      /* compute lookup table now */
      GLuint i;
      for (i = 0; i < 256; i++) {
         const GLfloat cs = UBYTE_TO_FLOAT(i);
         if (cs <= 0.04045) {
            table[i] = cs / 12.92f;
         }
         else {
            table[i] = (GLfloat) _mesa_pow((cs + 0.055) / 1.055, 2.4);
         }
      }
      tableReady = GL_TRUE;
   }
   return table[cs8];
}


#endif /* FEATURE_EXT_texture_sRGB */


/* Texel fetch routines for all supported formats
 */
#define DIM 1
#include "texformat_tmp.h"

#define DIM 2
#include "texformat_tmp.h"

#define DIM 3
#include "texformat_tmp.h"

/**
 * Null texel fetch function.
 *
 * Have to have this so the FetchTexel function pointer is never NULL.
 */
static void fetch_null_texel( const struct gl_texture_image *texImage,
			      GLint i, GLint j, GLint k, GLchan *texel )
{
   (void) texImage; (void) i; (void) j; (void) k;
   texel[RCOMP] = 0;
   texel[GCOMP] = 0;
   texel[BCOMP] = 0;
   texel[ACOMP] = 0;
   _mesa_warning(NULL, "fetch_null_texel() called!");
}

static void fetch_null_texelf( const struct gl_texture_image *texImage,
                               GLint i, GLint j, GLint k, GLfloat *texel )
{
   (void) texImage; (void) i; (void) j; (void) k;
   texel[RCOMP] = 0.0;
   texel[GCOMP] = 0.0;
   texel[BCOMP] = 0.0;
   texel[ACOMP] = 0.0;
   _mesa_warning(NULL, "fetch_null_texelf() called!");
}

static void store_null_texel(struct gl_texture_image *texImage,
                             GLint i, GLint j, GLint k, const void *texel)
{
   (void) texImage;
   (void) i;
   (void) j;
   (void) k;
   (void) texel;
   /* no-op */
}


/**
 * Notes about the predefined gl_texture_formats:
 *
 * 1. There are 1D, 2D and 3D functions for fetching texels from texture
 *    images, returning both GLchan values and GLfloat values.  (six
 *    functions in total)
 *    You don't have to provide both the GLchan and GLfloat functions;
 *    just one or the other is OK.  Mesa will use an "adaptor" to convert
 *    between GLchan/GLfloat when needed.
 *    Since the adaptors have small performance penalty, we provide both
 *    GLchan and GLfloat functions for some common formats like RGB, RGBA.
 */


/***************************************************************/
/** \name Default GLchan-based formats */
/*@@{*/

const struct gl_texture_format _mesa_texformat_rgba = {
   MESA_FORMAT_RGBA,			/* MesaFormat */
   GL_RGBA,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   CHAN_BITS,				/* RedBits */
   CHAN_BITS,				/* GreenBits */
   CHAN_BITS,				/* BlueBits */
   CHAN_BITS,				/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   4 * sizeof(GLchan),			/* TexelBytes */
   _mesa_texstore_rgba,			/* StoreTexImageFunc */
   fetch_texel_1d_rgba,			/* FetchTexel1D */
   fetch_texel_2d_rgba,			/* FetchTexel2D */
   fetch_texel_3d_rgba,			/* FetchTexel3D */
   fetch_texel_1d_f_rgba,		/* FetchTexel1Df */
   fetch_texel_2d_f_rgba,		/* FetchTexel2Df */
   fetch_texel_3d_f_rgba,		/* FetchTexel3Df */
   store_texel_rgba			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_rgb = {
   MESA_FORMAT_RGB,			/* MesaFormat */
   GL_RGB,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   CHAN_BITS,				/* RedBits */
   CHAN_BITS,				/* GreenBits */
   CHAN_BITS,				/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   3 * sizeof(GLchan),			/* TexelBytes */
   _mesa_texstore_rgba,/*yes*/		/* StoreTexImageFunc */
   fetch_texel_1d_rgb,			/* FetchTexel1D */
   fetch_texel_2d_rgb,			/* FetchTexel2D */
   fetch_texel_3d_rgb,			/* FetchTexel3D */
   fetch_texel_1d_f_rgb,		/* FetchTexel1Df */
   fetch_texel_2d_f_rgb,		/* FetchTexel2Df */
   fetch_texel_3d_f_rgb,		/* FetchTexel3Df */
   store_texel_rgb			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_alpha = {
   MESA_FORMAT_ALPHA,			/* MesaFormat */
   GL_ALPHA,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   CHAN_BITS,				/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   sizeof(GLchan),			/* TexelBytes */
   _mesa_texstore_rgba,/*yes*/		/* StoreTexImageFunc */
   fetch_texel_1d_alpha,		/* FetchTexel1D */
   fetch_texel_2d_alpha,		/* FetchTexel2D */
   fetch_texel_3d_alpha,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_alpha			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_luminance = {
   MESA_FORMAT_LUMINANCE,		/* MesaFormat */
   GL_LUMINANCE,			/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   CHAN_BITS,				/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   sizeof(GLchan),			/* TexelBytes */
   _mesa_texstore_rgba,/*yes*/		/* StoreTexImageFunc */
   fetch_texel_1d_luminance,		/* FetchTexel1D */
   fetch_texel_2d_luminance,		/* FetchTexel2D */
   fetch_texel_3d_luminance,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_luminance		/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_luminance_alpha = {
   MESA_FORMAT_LUMINANCE_ALPHA,		/* MesaFormat */
   GL_LUMINANCE_ALPHA,			/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   CHAN_BITS,				/* AlphaBits */
   CHAN_BITS,				/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2 * sizeof(GLchan),			/* TexelBytes */
   _mesa_texstore_rgba,/*yes*/		/* StoreTexImageFunc */
   fetch_texel_1d_luminance_alpha,	/* FetchTexel1D */
   fetch_texel_2d_luminance_alpha,	/* FetchTexel2D */
   fetch_texel_3d_luminance_alpha,	/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_luminance_alpha		/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_intensity = {
   MESA_FORMAT_INTENSITY,		/* MesaFormat */
   GL_INTENSITY,			/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   CHAN_BITS,				/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   sizeof(GLchan),			/* TexelBytes */
   _mesa_texstore_rgba,/*yes*/		/* StoreTexImageFunc */
   fetch_texel_1d_intensity,		/* FetchTexel1D */
   fetch_texel_2d_intensity,		/* FetchTexel2D */
   fetch_texel_3d_intensity,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_intensity		/* StoreTexel */
};


#if FEATURE_EXT_texture_sRGB

const struct gl_texture_format _mesa_texformat_srgb8 = {
   MESA_FORMAT_SRGB8,			/* MesaFormat */
   GL_RGB,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   8,					/* RedBits */
   8,					/* GreenBits */
   8,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   3,					/* TexelBytes */
   _mesa_texstore_srgb8,		/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel2D */
   NULL,				/* FetchTexel3D */
   fetch_texel_1d_srgb8,		/* FetchTexel1Df */
   fetch_texel_2d_srgb8,		/* FetchTexel2Df */
   fetch_texel_3d_srgb8,		/* FetchTexel3Df */
   store_texel_srgb8			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_srgba8 = {
   MESA_FORMAT_SRGBA8,			/* MesaFormat */
   GL_RGBA,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   8,					/* RedBits */
   8,					/* GreenBits */
   8,					/* BlueBits */
   8,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   4,					/* TexelBytes */
   _mesa_texstore_srgba8,		/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel2D */
   NULL,				/* FetchTexel3D */
   fetch_texel_1d_srgba8,		/* FetchTexel1Df */
   fetch_texel_2d_srgba8,		/* FetchTexel2Df */
   fetch_texel_3d_srgba8,		/* FetchTexel3Df */
   store_texel_srgba8			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_sl8 = {
   MESA_FORMAT_SL8,			/* MesaFormat */
   GL_LUMINANCE,			/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   8,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   1,					/* TexelBytes */
   _mesa_texstore_sl8,			/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel2D */
   NULL,				/* FetchTexel3D */
   fetch_texel_1d_sl8,			/* FetchTexel1Df */
   fetch_texel_2d_sl8,			/* FetchTexel2Df */
   fetch_texel_3d_sl8,			/* FetchTexel3Df */
   store_texel_sl8			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_sla8 = {
   MESA_FORMAT_SLA8,			/* MesaFormat */
   GL_LUMINANCE_ALPHA,			/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   8,					/* AlphaBits */
   8,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2,					/* TexelBytes */
   _mesa_texstore_sla8,			/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel2D */
   NULL,				/* FetchTexel3D */
   fetch_texel_1d_sla8,			/* FetchTexel1Df */
   fetch_texel_2d_sla8,			/* FetchTexel2Df */
   fetch_texel_3d_sla8,			/* FetchTexel3Df */
   store_texel_sla8			/* StoreTexel */
};

#endif /* FEATURE_EXT_texture_sRGB */

const struct gl_texture_format _mesa_texformat_rgba_float32 = {
   MESA_FORMAT_RGBA_FLOAT32,		/* MesaFormat */
   GL_RGBA,				/* BaseFormat */
   GL_FLOAT,				/* DataType */
   8 * sizeof(GLfloat),			/* RedBits */
   8 * sizeof(GLfloat),			/* GreenBits */
   8 * sizeof(GLfloat),			/* BlueBits */
   8 * sizeof(GLfloat),			/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   4 * sizeof(GLfloat),			/* TexelBytes */
   _mesa_texstore_rgba_float32,		/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   fetch_texel_1d_f_rgba_f32,		/* FetchTexel1Df */
   fetch_texel_2d_f_rgba_f32,		/* FetchTexel2Df */
   fetch_texel_3d_f_rgba_f32,		/* FetchTexel3Df */
   store_texel_rgba_f32			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_rgba_float16 = {
   MESA_FORMAT_RGBA_FLOAT16,		/* MesaFormat */
   GL_RGBA,				/* BaseFormat */
   GL_FLOAT,				/* DataType */
   8 * sizeof(GLhalfARB),		/* RedBits */
   8 * sizeof(GLhalfARB),		/* GreenBits */
   8 * sizeof(GLhalfARB),		/* BlueBits */
   8 * sizeof(GLhalfARB),		/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   4 * sizeof(GLhalfARB),		/* TexelBytes */
   _mesa_texstore_rgba_float16,		/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   fetch_texel_1d_f_rgba_f16,		/* FetchTexel1Df */
   fetch_texel_2d_f_rgba_f16,		/* FetchTexel2Df */
   fetch_texel_3d_f_rgba_f16,		/* FetchTexel3Df */
   store_texel_rgba_f16			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_rgb_float32 = {
   MESA_FORMAT_RGB_FLOAT32,		/* MesaFormat */
   GL_RGB,				/* BaseFormat */
   GL_FLOAT,				/* DataType */
   8 * sizeof(GLfloat),			/* RedBits */
   8 * sizeof(GLfloat),			/* GreenBits */
   8 * sizeof(GLfloat),			/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   3 * sizeof(GLfloat),			/* TexelBytes */
   _mesa_texstore_rgba_float32,/*yes*/	/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   fetch_texel_1d_f_rgb_f32,		/* FetchTexel1Df */
   fetch_texel_2d_f_rgb_f32,		/* FetchTexel2Df */
   fetch_texel_3d_f_rgb_f32,		/* FetchTexel3Df */
   store_texel_rgb_f32			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_rgb_float16 = {
   MESA_FORMAT_RGB_FLOAT16,		/* MesaFormat */
   GL_RGB,				/* BaseFormat */
   GL_FLOAT,				/* DataType */
   8 * sizeof(GLhalfARB),		/* RedBits */
   8 * sizeof(GLhalfARB),		/* GreenBits */
   8 * sizeof(GLhalfARB),		/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   3 * sizeof(GLhalfARB),		/* TexelBytes */
   _mesa_texstore_rgba_float16,/*yes*/	/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   fetch_texel_1d_f_rgb_f16,		/* FetchTexel1Df */
   fetch_texel_2d_f_rgb_f16,		/* FetchTexel2Df */
   fetch_texel_3d_f_rgb_f16,		/* FetchTexel3Df */
   store_texel_rgb_f16			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_alpha_float32 = {
   MESA_FORMAT_ALPHA_FLOAT32,		/* MesaFormat */
   GL_ALPHA,				/* BaseFormat */
   GL_FLOAT,				/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   8 * sizeof(GLfloat),			/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   1 * sizeof(GLfloat),			/* TexelBytes */
   _mesa_texstore_rgba_float32,/*yes*/	/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   fetch_texel_1d_f_alpha_f32,		/* FetchTexel1Df */
   fetch_texel_2d_f_alpha_f32,		/* FetchTexel2Df */
   fetch_texel_3d_f_alpha_f32,		/* FetchTexel3Df */
   store_texel_alpha_f32		/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_alpha_float16 = {
   MESA_FORMAT_ALPHA_FLOAT16,		/* MesaFormat */
   GL_ALPHA,				/* BaseFormat */
   GL_FLOAT,				/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   8 * sizeof(GLhalfARB),		/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   1 * sizeof(GLhalfARB),		/* TexelBytes */
   _mesa_texstore_rgba_float16,/*yes*/	/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   fetch_texel_1d_f_alpha_f16,		/* FetchTexel1Df */
   fetch_texel_2d_f_alpha_f16,		/* FetchTexel2Df */
   fetch_texel_3d_f_alpha_f16,		/* FetchTexel3Df */
   store_texel_alpha_f16		/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_luminance_float32 = {
   MESA_FORMAT_LUMINANCE_FLOAT32,	/* MesaFormat */
   GL_LUMINANCE,			/* BaseFormat */
   GL_FLOAT,				/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   8 * sizeof(GLfloat),			/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   1 * sizeof(GLfloat),			/* TexelBytes */
   _mesa_texstore_rgba_float32,/*yes*/	/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel2D */
   NULL,				/* FetchTexel3D */
   fetch_texel_1d_f_luminance_f32,	/* FetchTexel1Df */
   fetch_texel_2d_f_luminance_f32,	/* FetchTexel2Df */
   fetch_texel_3d_f_luminance_f32,	/* FetchTexel3Df */
   store_texel_luminance_f32		/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_luminance_float16 = {
   MESA_FORMAT_LUMINANCE_FLOAT16,	/* MesaFormat */
   GL_LUMINANCE,			/* BaseFormat */
   GL_FLOAT,				/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   8 * sizeof(GLhalfARB),		/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   1 * sizeof(GLhalfARB),		/* TexelBytes */
   _mesa_texstore_rgba_float16,/*yes*/	/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel2D */
   NULL,				/* FetchTexel3D */
   fetch_texel_1d_f_luminance_f16,	/* FetchTexel1Df */
   fetch_texel_2d_f_luminance_f16,	/* FetchTexel2Df */
   fetch_texel_3d_f_luminance_f16,	/* FetchTexel3Df */
   store_texel_luminance_f16		/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_luminance_alpha_float32 = {
   MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32,	/* MesaFormat */
   GL_LUMINANCE_ALPHA,			/* BaseFormat */
   GL_FLOAT,				/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   8 * sizeof(GLfloat),			/* AlphaBits */
   8 * sizeof(GLfloat),			/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2 * sizeof(GLfloat),			/* TexelBytes */
   _mesa_texstore_rgba_float32,		/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel2D */
   NULL,				/* FetchTexel3D */
   fetch_texel_1d_f_luminance_alpha_f32,/* FetchTexel1Df */
   fetch_texel_2d_f_luminance_alpha_f32,/* FetchTexel2Df */
   fetch_texel_3d_f_luminance_alpha_f32,/* FetchTexel3Df */
   store_texel_luminance_alpha_f32	/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_luminance_alpha_float16 = {
   MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16,	/* MesaFormat */
   GL_LUMINANCE_ALPHA,			/* BaseFormat */
   GL_FLOAT,				/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   8 * sizeof(GLhalfARB),		/* AlphaBits */
   8 * sizeof(GLhalfARB),		/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2 * sizeof(GLhalfARB),		/* TexelBytes */
   _mesa_texstore_rgba_float16,		/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel2D */
   NULL,				/* FetchTexel3D */
   fetch_texel_1d_f_luminance_alpha_f16,/* FetchTexel1Df */
   fetch_texel_2d_f_luminance_alpha_f16,/* FetchTexel2Df */
   fetch_texel_3d_f_luminance_alpha_f16,/* FetchTexel3Df */
   store_texel_luminance_alpha_f16	/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_intensity_float32 = {
   MESA_FORMAT_INTENSITY_FLOAT32,	/* MesaFormat */
   GL_INTENSITY,			/* BaseFormat */
   GL_FLOAT,				/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   8 * sizeof(GLfloat),			/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   1 * sizeof(GLfloat),			/* TexelBytes */
   _mesa_texstore_rgba_float32,/*yes*/	/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel2D */
   NULL,				/* FetchTexel3D */
   fetch_texel_1d_f_intensity_f32,	/* FetchTexel1Df */
   fetch_texel_2d_f_intensity_f32,	/* FetchTexel2Df */
   fetch_texel_3d_f_intensity_f32,	/* FetchTexel3Df */
   store_texel_intensity_f32		/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_intensity_float16 = {
   MESA_FORMAT_INTENSITY_FLOAT16,	/* MesaFormat */
   GL_INTENSITY,			/* BaseFormat */
   GL_FLOAT,				/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   8 * sizeof(GLhalfARB),		/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   1 * sizeof(GLhalfARB),		/* TexelBytes */
   _mesa_texstore_rgba_float16,/*yes*/	/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel2D */
   NULL,				/* FetchTexel3D */
   fetch_texel_1d_f_intensity_f16,	/* FetchTexel1Df */
   fetch_texel_2d_f_intensity_f16,	/* FetchTexel2Df */
   fetch_texel_3d_f_intensity_f16,	/* FetchTexel3Df */
   store_texel_intensity_f16		/* StoreTexel */
};


/*@@}*/


/***************************************************************/
/** \name Hardware formats */
/*@@{*/

const struct gl_texture_format _mesa_texformat_rgba8888 = {
   MESA_FORMAT_RGBA8888,		/* MesaFormat */
   GL_RGBA,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   8,					/* RedBits */
   8,					/* GreenBits */
   8,					/* BlueBits */
   8,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   4,					/* TexelBytes */
   _mesa_texstore_rgba8888,		/* StoreTexImageFunc */
   fetch_texel_1d_rgba8888,		/* FetchTexel1D */
   fetch_texel_2d_rgba8888,		/* FetchTexel2D */
   fetch_texel_3d_rgba8888,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_rgba8888			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_rgba8888_rev = {
   MESA_FORMAT_RGBA8888_REV,		/* MesaFormat */
   GL_RGBA,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   8,					/* RedBits */
   8,					/* GreenBits */
   8,					/* BlueBits */
   8,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   4,					/* TexelBytes */
   _mesa_texstore_rgba8888,		/* StoreTexImageFunc */
   fetch_texel_1d_rgba8888_rev,		/* FetchTexel1D */
   fetch_texel_2d_rgba8888_rev,		/* FetchTexel2D */
   fetch_texel_3d_rgba8888_rev,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_rgba8888_rev		/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_argb8888 = {
   MESA_FORMAT_ARGB8888,		/* MesaFormat */
   GL_RGBA,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   8,					/* RedBits */
   8,					/* GreenBits */
   8,					/* BlueBits */
   8,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   4,					/* TexelBytes */
   _mesa_texstore_argb8888,		/* StoreTexImageFunc */
   fetch_texel_1d_argb8888,		/* FetchTexel1D */
   fetch_texel_2d_argb8888,		/* FetchTexel2D */
   fetch_texel_3d_argb8888,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_argb8888			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_argb8888_rev = {
   MESA_FORMAT_ARGB8888_REV,		/* MesaFormat */
   GL_RGBA,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   8,					/* RedBits */
   8,					/* GreenBits */
   8,					/* BlueBits */
   8,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   4,					/* TexelBytes */
   _mesa_texstore_argb8888,		/* StoreTexImageFunc */
   fetch_texel_1d_argb8888_rev,		/* FetchTexel1D */
   fetch_texel_2d_argb8888_rev,		/* FetchTexel2D */
   fetch_texel_3d_argb8888_rev,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_argb8888_rev		/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_rgb888 = {
   MESA_FORMAT_RGB888,			/* MesaFormat */
   GL_RGB,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   8,					/* RedBits */
   8,					/* GreenBits */
   8,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   3,					/* TexelBytes */
   _mesa_texstore_rgb888,		/* StoreTexImageFunc */
   fetch_texel_1d_rgb888,		/* FetchTexel1D */
   fetch_texel_2d_rgb888,		/* FetchTexel2D */
   fetch_texel_3d_rgb888,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_rgb888			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_bgr888 = {
   MESA_FORMAT_BGR888,			/* MesaFormat */
   GL_RGB,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   8,					/* RedBits */
   8,					/* GreenBits */
   8,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   3,					/* TexelBytes */
   _mesa_texstore_bgr888,		/* StoreTexImageFunc */
   fetch_texel_1d_bgr888,		/* FetchTexel1D */
   fetch_texel_2d_bgr888,		/* FetchTexel2D */
   fetch_texel_3d_bgr888,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_bgr888			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_rgb565 = {
   MESA_FORMAT_RGB565,			/* MesaFormat */
   GL_RGB,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   5,					/* RedBits */
   6,					/* GreenBits */
   5,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2,					/* TexelBytes */
   _mesa_texstore_rgb565,		/* StoreTexImageFunc */
   fetch_texel_1d_rgb565,		/* FetchTexel1D */
   fetch_texel_2d_rgb565,		/* FetchTexel2D */
   fetch_texel_3d_rgb565,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_rgb565			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_rgb565_rev = {
   MESA_FORMAT_RGB565_REV,		/* MesaFormat */
   GL_RGB,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   5,					/* RedBits */
   6,					/* GreenBits */
   5,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2,					/* TexelBytes */
   _mesa_texstore_rgb565,		/* StoreTexImageFunc */
   fetch_texel_1d_rgb565_rev,		/* FetchTexel1D */
   fetch_texel_2d_rgb565_rev,		/* FetchTexel2D */
   fetch_texel_3d_rgb565_rev,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_rgb565_rev		/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_rgba4444 = {
   MESA_FORMAT_RGBA4444,		/* MesaFormat */
   GL_RGBA,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   4,					/* RedBits */
   4,					/* GreenBits */
   4,					/* BlueBits */
   4,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2,					/* TexelBytes */
   _mesa_texstore_rgba4444,		/* StoreTexImageFunc */
   fetch_texel_1d_rgba4444,		/* FetchTexel1D */
   fetch_texel_2d_rgba4444,		/* FetchTexel2D */
   fetch_texel_3d_rgba4444,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_rgba4444			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_argb4444 = {
   MESA_FORMAT_ARGB4444,		/* MesaFormat */
   GL_RGBA,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   4,					/* RedBits */
   4,					/* GreenBits */
   4,					/* BlueBits */
   4,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2,					/* TexelBytes */
   _mesa_texstore_argb4444,		/* StoreTexImageFunc */
   fetch_texel_1d_argb4444,		/* FetchTexel1D */
   fetch_texel_2d_argb4444,		/* FetchTexel2D */
   fetch_texel_3d_argb4444,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_argb4444			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_argb4444_rev = {
   MESA_FORMAT_ARGB4444_REV,		/* MesaFormat */
   GL_RGBA,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   4,					/* RedBits */
   4,					/* GreenBits */
   4,					/* BlueBits */
   4,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2,					/* TexelBytes */
   _mesa_texstore_argb4444,		/* StoreTexImageFunc */
   fetch_texel_1d_argb4444_rev,		/* FetchTexel1D */
   fetch_texel_2d_argb4444_rev,		/* FetchTexel2D */
   fetch_texel_3d_argb4444_rev,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_argb4444_rev		/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_rgba5551 = {
   MESA_FORMAT_RGBA5551,		/* MesaFormat */
   GL_RGBA,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   5,					/* RedBits */
   5,					/* GreenBits */
   5,					/* BlueBits */
   1,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2,					/* TexelBytes */
   _mesa_texstore_rgba5551,		/* StoreTexImageFunc */
   fetch_texel_1d_rgba5551,		/* FetchTexel1D */
   fetch_texel_2d_rgba5551,		/* FetchTexel2D */
   fetch_texel_3d_rgba5551,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_rgba5551			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_argb1555 = {
   MESA_FORMAT_ARGB1555,		/* MesaFormat */
   GL_RGBA,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   5,					/* RedBits */
   5,					/* GreenBits */
   5,					/* BlueBits */
   1,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2,					/* TexelBytes */
   _mesa_texstore_argb1555,		/* StoreTexImageFunc */
   fetch_texel_1d_argb1555,		/* FetchTexel1D */
   fetch_texel_2d_argb1555,		/* FetchTexel2D */
   fetch_texel_3d_argb1555,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_argb1555			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_argb1555_rev = {
   MESA_FORMAT_ARGB1555_REV,		/* MesaFormat */
   GL_RGBA,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   5,					/* RedBits */
   5,					/* GreenBits */
   5,					/* BlueBits */
   1,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2,					/* TexelBytes */
   _mesa_texstore_argb1555,		/* StoreTexImageFunc */
   fetch_texel_1d_argb1555_rev,		/* FetchTexel1D */
   fetch_texel_2d_argb1555_rev,		/* FetchTexel2D */
   fetch_texel_3d_argb1555_rev,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_argb1555_rev		/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_al88 = {
   MESA_FORMAT_AL88,			/* MesaFormat */
   GL_LUMINANCE_ALPHA,			/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   8,					/* AlphaBits */
   8,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2,					/* TexelBytes */
   _mesa_texstore_al88,			/* StoreTexImageFunc */
   fetch_texel_1d_al88,			/* FetchTexel1D */
   fetch_texel_2d_al88,			/* FetchTexel2D */
   fetch_texel_3d_al88,			/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_al88			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_al88_rev = {
   MESA_FORMAT_AL88_REV,		/* MesaFormat */
   GL_LUMINANCE_ALPHA,			/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   8,					/* AlphaBits */
   8,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2,					/* TexelBytes */
   _mesa_texstore_al88,			/* StoreTexImageFunc */
   fetch_texel_1d_al88_rev,		/* FetchTexel1D */
   fetch_texel_2d_al88_rev,		/* FetchTexel2D */
   fetch_texel_3d_al88_rev,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_al88_rev			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_rgb332 = {
   MESA_FORMAT_RGB332,			/* MesaFormat */
   GL_RGB,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   3,					/* RedBits */
   3,					/* GreenBits */
   2,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   1,					/* TexelBytes */
   _mesa_texstore_rgb332,		/* StoreTexImageFunc */
   fetch_texel_1d_rgb332,		/* FetchTexel1D */
   fetch_texel_2d_rgb332,		/* FetchTexel2D */
   fetch_texel_3d_rgb332,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_rgb332			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_a8 = {
   MESA_FORMAT_A8,			/* MesaFormat */
   GL_ALPHA,				/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   8,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   1,					/* TexelBytes */
   _mesa_texstore_a8,			/* StoreTexImageFunc */
   fetch_texel_1d_a8,			/* FetchTexel1D */
   fetch_texel_2d_a8,			/* FetchTexel2D */
   fetch_texel_3d_a8,			/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_a8			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_l8 = {
   MESA_FORMAT_L8,			/* MesaFormat */
   GL_LUMINANCE,			/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   8,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   1,					/* TexelBytes */
   _mesa_texstore_a8,/*yes*/		/* StoreTexImageFunc */
   fetch_texel_1d_l8,			/* FetchTexel1D */
   fetch_texel_2d_l8,			/* FetchTexel2D */
   fetch_texel_3d_l8,			/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_l8			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_i8 = {
   MESA_FORMAT_I8,			/* MesaFormat */
   GL_INTENSITY,			/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   8,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   1,					/* TexelBytes */
   _mesa_texstore_a8,/*yes*/		/* StoreTexImageFunc */
   fetch_texel_1d_i8,			/* FetchTexel1D */
   fetch_texel_2d_i8,			/* FetchTexel2D */
   fetch_texel_3d_i8,			/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_i8			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_ci8 = {
   MESA_FORMAT_CI8,			/* MesaFormat */
   GL_COLOR_INDEX,			/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   8,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   1,					/* TexelBytes */
   _mesa_texstore_ci8,			/* StoreTexImageFunc */
   fetch_texel_1d_ci8,			/* FetchTexel1D */
   fetch_texel_2d_ci8,			/* FetchTexel2D */
   fetch_texel_3d_ci8,			/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_ci8			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_ycbcr = {
   MESA_FORMAT_YCBCR,			/* MesaFormat */
   GL_YCBCR_MESA,			/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2,					/* TexelBytes */
   _mesa_texstore_ycbcr,		/* StoreTexImageFunc */
   fetch_texel_1d_ycbcr,		/* FetchTexel1D */
   fetch_texel_2d_ycbcr,		/* FetchTexel2D */
   fetch_texel_3d_ycbcr,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_ycbcr			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_ycbcr_rev = {
   MESA_FORMAT_YCBCR_REV,		/* MesaFormat */
   GL_YCBCR_MESA,			/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   2,					/* TexelBytes */
   _mesa_texstore_ycbcr,		/* StoreTexImageFunc */
   fetch_texel_1d_ycbcr_rev,		/* FetchTexel1D */
   fetch_texel_2d_ycbcr_rev,		/* FetchTexel2D */
   fetch_texel_3d_ycbcr_rev,		/* FetchTexel3D */
   NULL,				/* FetchTexel1Df */
   NULL,				/* FetchTexel2Df */
   NULL,				/* FetchTexel3Df */
   store_texel_ycbcr_rev		/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_z24_s8 = {
   MESA_FORMAT_Z24_S8,			/* MesaFormat */
   GL_DEPTH_STENCIL_EXT,		/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   24,					/* DepthBits */
   8,					/* StencilBits */
   4,					/* TexelBytes */
   _mesa_texstore_z24_s8,		/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel2D */
   NULL,				/* FetchTexel3D */
   fetch_texel_1d_f_z24_s8,		/* FetchTexel1Df */
   fetch_texel_2d_f_z24_s8,		/* FetchTexel2Df */
   fetch_texel_3d_f_z24_s8,		/* FetchTexel3Df */
   store_texel_z24_s8			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_s8_z24 = {
   MESA_FORMAT_S8_Z24,			/* MesaFormat */
   GL_DEPTH_STENCIL_EXT,		/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   24,					/* DepthBits */
   8,					/* StencilBits */
   4,					/* TexelBytes */
   _mesa_texstore_s8_z24,		/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel2D */
   NULL,				/* FetchTexel3D */
   fetch_texel_1d_f_s8_z24,		/* FetchTexel1Df */
   fetch_texel_2d_f_s8_z24,		/* FetchTexel2Df */
   fetch_texel_3d_f_s8_z24,		/* FetchTexel3Df */
   store_texel_s8_z24			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_z16 = {
   MESA_FORMAT_Z16,			/* MesaFormat */
   GL_DEPTH_COMPONENT,			/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   sizeof(GLushort) * 8,		/* DepthBits */
   0,					/* StencilBits */
   sizeof(GLushort),			/* TexelBytes */
   _mesa_texstore_z16,			/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   fetch_texel_1d_f_z16,		/* FetchTexel1Df */
   fetch_texel_2d_f_z16,		/* FetchTexel2Df */
   fetch_texel_3d_f_z16,		/* FetchTexel3Df */
   store_texel_z16			/* StoreTexel */
};

const struct gl_texture_format _mesa_texformat_z32 = {
   MESA_FORMAT_Z32,			/* MesaFormat */
   GL_DEPTH_COMPONENT,			/* BaseFormat */
   GL_UNSIGNED_NORMALIZED_ARB,		/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   sizeof(GLuint) * 8,			/* DepthBits */
   0,					/* StencilBits */
   sizeof(GLuint),			/* TexelBytes */
   _mesa_texstore_z32,			/* StoreTexImageFunc */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   NULL,				/* FetchTexel1D */
   fetch_texel_1d_f_z32,		/* FetchTexel1Df */
   fetch_texel_2d_f_z32,		/* FetchTexel2Df */
   fetch_texel_3d_f_z32,		/* FetchTexel3Df */
   store_texel_z32			/* StoreTexel */
};

/*@@}*/


/***************************************************************/
/** \name Null format (useful for proxy textures) */
/*@@{*/

const struct gl_texture_format _mesa_null_texformat = {
   -1,					/* MesaFormat */
   0,					/* BaseFormat */
   GL_NONE,				/* DataType */
   0,					/* RedBits */
   0,					/* GreenBits */
   0,					/* BlueBits */
   0,					/* AlphaBits */
   0,					/* LuminanceBits */
   0,					/* IntensityBits */
   0,					/* IndexBits */
   0,					/* DepthBits */
   0,					/* StencilBits */
   0,					/* TexelBytes */
   NULL,				/* StoreTexImageFunc */
   fetch_null_texel,			/* FetchTexel1D */
   fetch_null_texel,			/* FetchTexel2D */
   fetch_null_texel,			/* FetchTexel3D */
   fetch_null_texelf,			/* FetchTexel1Df */
   fetch_null_texelf,			/* FetchTexel2Df */
   fetch_null_texelf,			/* FetchTexel3Df */
   store_null_texel			/* StoreTexel */
};

/*@@}*/
d56 1
a56 1
const struct gl_texture_format *
a69 1
         return &_mesa_texformat_rgba;
d71 1
a71 1
         return &_mesa_texformat_rgba8888;
d73 1
a73 1
         return &_mesa_texformat_argb1555;
d75 1
a75 1
         return &_mesa_texformat_argb4444_rev; /* just to test another format*/
d77 1
a77 1
         return &_mesa_texformat_argb4444;
a84 1
         return &_mesa_texformat_rgb;
d86 1
a86 1
         return &_mesa_texformat_rgb888;
d88 1
a88 1
         return &_mesa_texformat_rgb332;
d90 1
a90 1
         return &_mesa_texformat_rgb565_rev; /* just to test another format */
d92 1
a92 1
         return &_mesa_texformat_rgb565;
a98 1
         return &_mesa_texformat_alpha;
d100 1
a100 1
         return &_mesa_texformat_a8;
a107 1
         return &_mesa_texformat_luminance;
d109 1
a109 1
         return &_mesa_texformat_l8;
d116 3
d122 1
a122 3
         return &_mesa_texformat_luminance_alpha;
      case GL_LUMINANCE8_ALPHA8:
         return &_mesa_texformat_al88;
a127 1
         return &_mesa_texformat_intensity;
d129 1
a129 1
         return &_mesa_texformat_i8;
d138 1
a138 1
         return &_mesa_texformat_ci8;
d149 1
a149 1
            return &_mesa_texformat_z32;
d151 1
a151 1
            return &_mesa_texformat_z16;
d157 25
a181 35
   if (ctx->Extensions.ARB_texture_compression) {
      switch (internalFormat) {
         case GL_COMPRESSED_ALPHA_ARB:
            return &_mesa_texformat_alpha;
         case GL_COMPRESSED_LUMINANCE_ARB:
            return &_mesa_texformat_luminance;
         case GL_COMPRESSED_LUMINANCE_ALPHA_ARB:
            return &_mesa_texformat_luminance_alpha;
         case GL_COMPRESSED_INTENSITY_ARB:
            return &_mesa_texformat_intensity;
         case GL_COMPRESSED_RGB_ARB:
#if FEATURE_texture_fxt1
            if (ctx->Extensions.TDFX_texture_compression_FXT1)
               return &_mesa_texformat_rgb_fxt1;
#endif
#if FEATURE_texture_s3tc
            if (ctx->Extensions.EXT_texture_compression_s3tc ||
                ctx->Extensions.S3_s3tc)
               return &_mesa_texformat_rgb_dxt1;
#endif
            return &_mesa_texformat_rgb;
         case GL_COMPRESSED_RGBA_ARB:
#if FEATURE_texture_fxt1
            if (ctx->Extensions.TDFX_texture_compression_FXT1)
               return &_mesa_texformat_rgba_fxt1;
#endif
#if FEATURE_texture_s3tc
            if (ctx->Extensions.EXT_texture_compression_s3tc ||
                ctx->Extensions.S3_s3tc)
               return &_mesa_texformat_rgba_dxt3; /* Not rgba_dxt1, see spec */
#endif
            return &_mesa_texformat_rgba;
         default:
            ; /* fallthrough */
      }
d187 1
a187 1
            return &_mesa_texformat_ycbcr;
d189 1
a189 1
            return &_mesa_texformat_ycbcr_rev;
d197 1
a197 1
            return &_mesa_texformat_rgb_fxt1;
d199 1
a199 1
            return &_mesa_texformat_rgba_fxt1;
d210 1
a210 1
            return &_mesa_texformat_rgb_dxt1;
d212 1
a212 1
            return &_mesa_texformat_rgba_dxt1;
d214 1
a214 1
            return &_mesa_texformat_rgba_dxt3;
d216 1
a216 1
            return &_mesa_texformat_rgba_dxt5;
d226 1
a226 1
            return &_mesa_texformat_rgb_dxt1;
d229 1
a229 1
            return &_mesa_texformat_rgba_dxt3;
d239 1
a239 1
            return &_mesa_texformat_alpha_float16;
d241 1
a241 1
            return &_mesa_texformat_alpha_float32;
d243 1
a243 1
            return &_mesa_texformat_luminance_float16;
d245 1
a245 1
            return &_mesa_texformat_luminance_float32;
d247 1
a247 1
            return &_mesa_texformat_luminance_alpha_float16;
d249 1
a249 1
            return &_mesa_texformat_luminance_alpha_float32;
d251 1
a251 1
            return &_mesa_texformat_intensity_float16;
d253 1
a253 1
            return &_mesa_texformat_intensity_float32;
d255 1
a255 1
            return &_mesa_texformat_rgb_float16;
d257 1
a257 1
            return &_mesa_texformat_rgb_float32;
d259 1
a259 1
            return &_mesa_texformat_rgba_float16;
d261 1
a261 1
            return &_mesa_texformat_rgba_float32;
d271 21
a291 1
            return &_mesa_texformat_z24_s8;
d297 1
d303 1
a303 1
            return &_mesa_texformat_srgb8;
d306 1
a306 1
            return &_mesa_texformat_srgba8;
d309 1
a309 1
            return &_mesa_texformat_sl8;
d312 5
a316 2
            return &_mesa_texformat_sla8;
         /* NOTE: not supporting any compression of sRGB at this time */
d318 5
a322 1
            return &_mesa_texformat_srgb8;
d324 6
a329 5
            return &_mesa_texformat_srgba8;
         case GL_COMPRESSED_SLUMINANCE_EXT:
            return &_mesa_texformat_sl8;
         case GL_COMPRESSED_SLUMINANCE_ALPHA_EXT:
            return &_mesa_texformat_sla8;
d331 3
a333 1
            return &_mesa_texformat_srgb8;
d335 3
d339 3
d343 4
a346 1
            return &_mesa_texformat_srgba8;
d354 1
a354 1
   return NULL;
a356 170


/**
 * Return datatype and number of components per texel for the
 * given gl_texture_format.
 */
void
_mesa_format_to_type_and_comps(const struct gl_texture_format *format,
                               GLenum *datatype, GLuint *comps)
{
   switch (format->MesaFormat) {
   case MESA_FORMAT_RGBA8888:
   case MESA_FORMAT_RGBA8888_REV:
   case MESA_FORMAT_ARGB8888:
   case MESA_FORMAT_ARGB8888_REV:
      *datatype = CHAN_TYPE;
      *comps = 4;
      return;
   case MESA_FORMAT_RGB888:
   case MESA_FORMAT_BGR888:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 3;
      return;
   case MESA_FORMAT_RGB565:
   case MESA_FORMAT_RGB565_REV:
      *datatype = GL_UNSIGNED_SHORT_5_6_5;
      *comps = 3;
      return;

   case MESA_FORMAT_ARGB4444:
   case MESA_FORMAT_ARGB4444_REV:
      *datatype = GL_UNSIGNED_SHORT_4_4_4_4;
      *comps = 4;
      return;

   case MESA_FORMAT_ARGB1555:
   case MESA_FORMAT_ARGB1555_REV:
      *datatype = GL_UNSIGNED_SHORT_1_5_5_5_REV;
      *comps = 4;
      return;

   case MESA_FORMAT_AL88:
   case MESA_FORMAT_AL88_REV:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 2;
      return;
   case MESA_FORMAT_RGB332:
      *datatype = GL_UNSIGNED_BYTE_3_3_2;
      *comps = 3;
      return;

   case MESA_FORMAT_A8:
   case MESA_FORMAT_L8:
   case MESA_FORMAT_I8:
   case MESA_FORMAT_CI8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 1;
      return;

   case MESA_FORMAT_YCBCR:
   case MESA_FORMAT_YCBCR_REV:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 2;
      return;

   case MESA_FORMAT_Z24_S8:
      *datatype = GL_UNSIGNED_INT;
      *comps = 1; /* XXX OK? */
      return;

   case MESA_FORMAT_Z16:
      *datatype = GL_UNSIGNED_SHORT;
      *comps = 1;
      return;

   case MESA_FORMAT_Z32:
      *datatype = GL_UNSIGNED_INT;
      *comps = 1;
      return;

   case MESA_FORMAT_SRGB8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 3;
      return;
   case MESA_FORMAT_SRGBA8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 4;
      return;
   case MESA_FORMAT_SL8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 1;
      return;
   case MESA_FORMAT_SLA8:
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 2;
      return;

   case MESA_FORMAT_RGB_FXT1:
   case MESA_FORMAT_RGBA_FXT1:
   case MESA_FORMAT_RGB_DXT1:
   case MESA_FORMAT_RGBA_DXT1:
   case MESA_FORMAT_RGBA_DXT3:
   case MESA_FORMAT_RGBA_DXT5:
      /* XXX generate error instead? */
      *datatype = GL_UNSIGNED_BYTE;
      *comps = 0;
      return;

   case MESA_FORMAT_RGBA:
      *datatype = CHAN_TYPE;
      *comps = 4;
      return;
   case MESA_FORMAT_RGB:
      *datatype = CHAN_TYPE;
      *comps = 3;
      return;
   case MESA_FORMAT_LUMINANCE_ALPHA:
      *datatype = CHAN_TYPE;
      *comps = 2;
      return;
   case MESA_FORMAT_ALPHA:
   case MESA_FORMAT_LUMINANCE:
   case MESA_FORMAT_INTENSITY:
      *datatype = CHAN_TYPE;
      *comps = 1;
      return;

   case MESA_FORMAT_RGBA_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 4;
      return;
   case MESA_FORMAT_RGBA_FLOAT16:
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 4;
      return;
   case MESA_FORMAT_RGB_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 3;
      return;
   case MESA_FORMAT_RGB_FLOAT16:
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 3;
      return;
   case MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 2;
      return;
   case MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16:
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 2;
      return;
   case MESA_FORMAT_ALPHA_FLOAT32:
   case MESA_FORMAT_LUMINANCE_FLOAT32:
   case MESA_FORMAT_INTENSITY_FLOAT32:
      *datatype = GL_FLOAT;
      *comps = 1;
      return;
   case MESA_FORMAT_ALPHA_FLOAT16:
   case MESA_FORMAT_LUMINANCE_FLOAT16:
   case MESA_FORMAT_INTENSITY_FLOAT16:
      *datatype = GL_HALF_FLOAT_ARB;
      *comps = 1;
      return;

   default:
      _mesa_problem(NULL, "bad format in _mesa_format_to_type_and_comps");
      *datatype = 0;
      *comps = 1;
   }
}
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d58 1
a58 1
            table[i] = cs / 12.92;
d61 1
a61 1
            table[i] = _mesa_pow((cs + 0.055) / 1.055, 2.4);
d874 24
d946 24
d1471 1
a1471 2
   if (ctx->Extensions.SGIX_depth_texture ||
       ctx->Extensions.ARB_depth_texture) {
d1474 2
a1475 2
         case GL_DEPTH_COMPONENT24_SGIX:
         case GL_DEPTH_COMPONENT32_SGIX:
d1477 1
a1477 1
         case GL_DEPTH_COMPONENT16_SGIX:
d1495 1
d1498 4
a1501 2
            else if (ctx->Extensions.EXT_texture_compression_s3tc ||
                     ctx->Extensions.S3_s3tc)
d1503 2
a1504 2
            else
               return &_mesa_texformat_rgb;
d1506 1
d1509 4
a1512 2
            else if (ctx->Extensions.EXT_texture_compression_s3tc ||
                     ctx->Extensions.S3_s3tc)
d1514 2
a1515 2
            else
               return &_mesa_texformat_rgba;
d1530 1
d1541 1
d1543 1
d1571 1
d1652 171
@


1.1
log
@Initial revision
@
text
@d1210 24
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d3 1
a3 1
 * Version:  7.7
d5 1
a5 2
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 * Copyright (c) 2008-2009 VMware, Inc.
a30 1
 * \author Brian Paul
d34 1
a35 1
#include "texcompress.h"
d37 1253
d1307 2
a1308 2
gl_format
_mesa_choose_tex_format( struct gl_context *ctx, GLint internalFormat,
d1315 1
a1315 1
      /* shallow RGBA formats */
d1318 4
d1323 1
a1323 1
         return MESA_FORMAT_RGBA8888;
d1325 1
a1325 1
         return MESA_FORMAT_ARGB1555;
d1327 1
a1327 1
         return MESA_FORMAT_ARGB4444_REV; /* just to test another format*/
d1329 1
a1329 7
         return MESA_FORMAT_ARGB4444;

      /* deep RGBA formats */
      case GL_RGB10_A2:
      case GL_RGBA12:
      case GL_RGBA16:
         return MESA_FORMAT_RGBA_16;
d1331 1
a1331 1
      /* shallow RGB formats */
d1334 4
d1339 1
a1339 1
         return MESA_FORMAT_RGB888;
d1341 1
a1341 1
         return MESA_FORMAT_RGB332;
d1343 1
a1343 1
         return MESA_FORMAT_RGB565_REV; /* just to test another format */
d1345 1
a1345 7
         return MESA_FORMAT_RGB565;

      /* deep RGB formats */
      case GL_RGB10:
      case GL_RGB12:
      case GL_RGB16:
         return MESA_FORMAT_RGBA_16;
d1352 1
d1354 1
a1354 1
         return MESA_FORMAT_A8;
d1362 1
d1364 1
a1364 1
         return MESA_FORMAT_L8;
a1370 3
      case GL_LUMINANCE8_ALPHA8:
         return MESA_FORMAT_AL88;

d1374 3
a1376 1
         return MESA_FORMAT_AL1616;
d1382 1
d1384 1
a1384 1
         return MESA_FORMAT_I8;
d1393 1
a1393 1
         return MESA_FORMAT_CI8;
d1399 2
a1400 1
   if (ctx->Extensions.ARB_depth_texture) {
d1403 5
a1407 5
         case GL_DEPTH_COMPONENT24:
         case GL_DEPTH_COMPONENT32:
            return MESA_FORMAT_Z32;
         case GL_DEPTH_COMPONENT16:
            return MESA_FORMAT_Z16;
d1413 29
a1441 25
   switch (internalFormat) {
      case GL_COMPRESSED_ALPHA_ARB:
         return MESA_FORMAT_A8;
      case GL_COMPRESSED_LUMINANCE_ARB:
         return MESA_FORMAT_L8;
      case GL_COMPRESSED_LUMINANCE_ALPHA_ARB:
         return MESA_FORMAT_AL88;
      case GL_COMPRESSED_INTENSITY_ARB:
         return MESA_FORMAT_I8;
      case GL_COMPRESSED_RGB_ARB:
         if (ctx->Extensions.EXT_texture_compression_s3tc ||
             ctx->Extensions.S3_s3tc)
            return MESA_FORMAT_RGB_DXT1;
         if (ctx->Extensions.TDFX_texture_compression_FXT1)
            return MESA_FORMAT_RGB_FXT1;
         return MESA_FORMAT_RGB888;
      case GL_COMPRESSED_RGBA_ARB:
         if (ctx->Extensions.EXT_texture_compression_s3tc ||
             ctx->Extensions.S3_s3tc)
            return MESA_FORMAT_RGBA_DXT3; /* Not rgba_dxt1, see spec */
         if (ctx->Extensions.TDFX_texture_compression_FXT1)
            return MESA_FORMAT_RGBA_FXT1;
         return MESA_FORMAT_RGBA8888;
      default:
         ; /* fallthrough */
d1447 1
a1447 1
            return MESA_FORMAT_YCBCR;
d1449 1
a1449 1
            return MESA_FORMAT_YCBCR_REV;
a1452 1
#if FEATURE_texture_fxt1
d1456 1
a1456 1
            return MESA_FORMAT_RGB_FXT1;
d1458 1
a1458 1
            return MESA_FORMAT_RGBA_FXT1;
a1462 1
#endif
a1463 1
#if FEATURE_texture_s3tc
d1467 1
a1467 1
            return MESA_FORMAT_RGB_DXT1;
d1469 1
a1469 1
            return MESA_FORMAT_RGBA_DXT1;
d1471 1
a1471 1
            return MESA_FORMAT_RGBA_DXT3;
d1473 1
a1473 1
            return MESA_FORMAT_RGBA_DXT5;
d1483 1
a1483 1
            return MESA_FORMAT_RGB_DXT1;
d1486 1
a1486 1
            return MESA_FORMAT_RGBA_DXT3;
a1490 1
#endif
d1495 1
a1495 1
            return MESA_FORMAT_ALPHA_FLOAT16;
d1497 1
a1497 1
            return MESA_FORMAT_ALPHA_FLOAT32;
d1499 1
a1499 1
            return MESA_FORMAT_LUMINANCE_FLOAT16;
d1501 1
a1501 1
            return MESA_FORMAT_LUMINANCE_FLOAT32;
d1503 1
a1503 1
            return MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16;
d1505 1
a1505 1
            return MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32;
d1507 1
a1507 1
            return MESA_FORMAT_INTENSITY_FLOAT16;
d1509 1
a1509 1
            return MESA_FORMAT_INTENSITY_FLOAT32;
d1511 1
a1511 1
            return MESA_FORMAT_RGB_FLOAT16;
d1513 1
a1513 1
            return MESA_FORMAT_RGB_FLOAT32;
d1515 1
a1515 1
            return MESA_FORMAT_RGBA_FLOAT16;
d1517 1
a1517 1
            return MESA_FORMAT_RGBA_FLOAT32;
d1527 1
a1527 1
            return MESA_FORMAT_Z24_S8;
a1532 47
   if (ctx->Extensions.ATI_envmap_bumpmap) {
      switch (internalFormat) {
         case GL_DUDV_ATI:
         case GL_DU8DV8_ATI:
            return MESA_FORMAT_DUDV8;
         default:
            ; /* fallthrough */
      }
   }

   if (ctx->Extensions.MESA_texture_signed_rgba) {
      switch (internalFormat) {
         case GL_RGBA_SNORM:
         case GL_RGBA8_SNORM:
            return MESA_FORMAT_SIGNED_RGBA8888;
         default:
            ; /* fallthrough */
      }
   }

   if (ctx->VersionMajor * 10 + ctx->VersionMinor >= 31) {
      switch (internalFormat) {
         case GL_RED_SNORM:
         case GL_R8_SNORM:
            return MESA_FORMAT_SIGNED_R8;
         case GL_RG_SNORM:
         case GL_RG8_SNORM:
            return MESA_FORMAT_SIGNED_RG88;
         case GL_RGB_SNORM:
         case GL_RGB8_SNORM:
            return MESA_FORMAT_SIGNED_RGBX8888;
         case GL_RGBA_SNORM:
         case GL_RGBA8_SNORM:
            return MESA_FORMAT_SIGNED_RGBA8888;
         case GL_R16_SNORM:
            return MESA_FORMAT_SIGNED_R_16;
         case GL_RG16_SNORM:
            return MESA_FORMAT_SIGNED_RG_16;
         case GL_RGB16_SNORM:
            return MESA_FORMAT_SIGNED_RGB_16;
         case GL_RGBA16_SNORM:
            return MESA_FORMAT_SIGNED_RGBA_16;
         default:
            ; /* fall-through */
      }
   }

d1538 1
a1538 1
            return MESA_FORMAT_SRGB8;
d1541 1
a1541 1
            return MESA_FORMAT_SRGBA8;
d1544 1
a1544 1
            return MESA_FORMAT_SL8;
d1547 6
a1552 1
            return MESA_FORMAT_SLA8;
d1554 1
a1554 1
            return MESA_FORMAT_SL8;
d1556 1
a1556 14
            return MESA_FORMAT_SLA8;
         case GL_COMPRESSED_SRGB_EXT:
#if FEATURE_texture_s3tc
            if (ctx->Extensions.EXT_texture_compression_s3tc)
               return MESA_FORMAT_SRGB_DXT1;
#endif
            return MESA_FORMAT_SRGB8;
         case GL_COMPRESSED_SRGB_ALPHA_EXT:
#if FEATURE_texture_s3tc
            if (ctx->Extensions.EXT_texture_compression_s3tc)
               return MESA_FORMAT_SRGBA_DXT3; /* Not srgba_dxt1, see spec */
#endif
            return MESA_FORMAT_SRGBA8;
#if FEATURE_texture_s3tc
d1558 1
a1558 3
            if (ctx->Extensions.EXT_texture_compression_s3tc)
               return MESA_FORMAT_SRGB_DXT1;
            break;
a1559 3
            if (ctx->Extensions.EXT_texture_compression_s3tc)
               return MESA_FORMAT_SRGBA_DXT1;
            break;
a1560 3
            if (ctx->Extensions.EXT_texture_compression_s3tc)
               return MESA_FORMAT_SRGBA_DXT3;
            break;
d1562 1
a1562 4
            if (ctx->Extensions.EXT_texture_compression_s3tc)
               return MESA_FORMAT_SRGBA_DXT5;
            break;
#endif
a1568 70
   if (ctx->Extensions.EXT_texture_integer) {
      switch (internalFormat) {
      case GL_RGBA32UI_EXT:
      case GL_RGB32UI_EXT:
      case GL_ALPHA32UI_EXT:
      case GL_INTENSITY32UI_EXT:
      case GL_LUMINANCE32UI_EXT:
      case GL_LUMINANCE_ALPHA32UI_EXT:
         return MESA_FORMAT_RGBA_UINT32;
      case GL_RGBA16UI_EXT:
      case GL_RGB16UI_EXT:
      case GL_ALPHA16UI_EXT:
      case GL_INTENSITY16UI_EXT:
      case GL_LUMINANCE16UI_EXT:
      case GL_LUMINANCE_ALPHA16UI_EXT:
         return MESA_FORMAT_RGBA_UINT16;
      case GL_RGBA8UI_EXT:
      case GL_RGB8UI_EXT:
      case GL_ALPHA8UI_EXT:
      case GL_INTENSITY8UI_EXT:
      case GL_LUMINANCE8UI_EXT:
      case GL_LUMINANCE_ALPHA8UI_EXT:
         return MESA_FORMAT_RGBA_UINT8;
      case GL_RGBA32I_EXT:
      case GL_RGB32I_EXT:
      case GL_ALPHA32I_EXT:
      case GL_INTENSITY32I_EXT:
      case GL_LUMINANCE32I_EXT:
      case GL_LUMINANCE_ALPHA32I_EXT:
         return MESA_FORMAT_RGBA_INT32;
      case GL_RGBA16I_EXT:
      case GL_RGB16I_EXT:
      case GL_ALPHA16I_EXT:
      case GL_INTENSITY16I_EXT:
      case GL_LUMINANCE16I_EXT:
      case GL_LUMINANCE_ALPHA16I_EXT:
         return MESA_FORMAT_RGBA_INT16;
      case GL_RGBA8I_EXT:
      case GL_RGB8I_EXT:
      case GL_ALPHA8I_EXT:
      case GL_INTENSITY8I_EXT:
      case GL_LUMINANCE8I_EXT:
      case GL_LUMINANCE_ALPHA8I_EXT:
         return MESA_FORMAT_RGBA_INT8;
      }
   }

   if (ctx->Extensions.ARB_texture_rg) {
      switch (internalFormat) {
      case GL_R8:
      case GL_RED:
      case GL_COMPRESSED_RED:
	 return MESA_FORMAT_R8;

      case GL_R16:
         return MESA_FORMAT_R16;

      case GL_RG:
      case GL_RG8:
      case GL_COMPRESSED_RG:
	 return MESA_FORMAT_RG88;

      case GL_RG16:
	 return MESA_FORMAT_RG1616;

      default:
         ; /* fallthrough */
      }
   }

d1570 1
a1570 1
   return MESA_FORMAT_NONE;
a1571 1

@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d3 1
d21 3
a23 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
a36 2
#include "enums.h"
#include "mtypes.h"
a39 4
#define RETURN_IF_SUPPORTED(f) do {		\
   if (ctx->TextureFormatSupported[f])		\
      return f;					\
} while (0)
a45 1
 * \param target  a texture target (GL_TEXTURE_x)
d50 5
a54 4
 * \return the closest gl_format for the given format/type arguments
 *
 * This is called via dd_function_table::ChooseTextureFormat.  Hardware
 * drivers may override this function with a specialized version.
d57 2
a58 2
_mesa_choose_tex_format(struct gl_context *ctx, GLenum target,
                        GLint internalFormat, GLenum format, GLenum type)
d61 1
d64 52
a115 106
   /* shallow RGBA formats */
   case 4:
   case GL_RGBA:
      if (type == GL_UNSIGNED_SHORT_4_4_4_4_REV) {
         RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB4444);
      } else if (type == GL_UNSIGNED_SHORT_1_5_5_5_REV) {
         RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB1555);
      } else if (type == GL_UNSIGNED_INT_2_10_10_10_REV) {
         RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB2101010);
      }
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
      break;

   case GL_RGBA8:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
      break;
   case GL_RGB5_A1:
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB1555);
      break;
   case GL_RGBA2:
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB4444_REV); /* just to test another format*/
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB4444);
      break;
   case GL_RGBA4:
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB4444);
      break;

   /* deep RGBA formats */
   case GL_RGB10_A2:
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB2101010);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
      break;
   case GL_RGBA12:
   case GL_RGBA16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
      break;

   /* shallow RGB formats */
   case 3:
   case GL_RGB:
      if (type == GL_UNSIGNED_INT_2_10_10_10_REV) {
         RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB2101010);
      }
      /* fallthrough */
   case GL_RGB8:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XRGB8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
      break;
   case GL_R3_G3_B2:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB332);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565_REV);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XRGB8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
      break;
   case GL_RGB4:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565_REV); /* just to test another format */
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565);
      break;
   case GL_RGB5:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565);
      break;

   /* deep RGB formats */
   case GL_RGB10:
   case GL_RGB12:
   case GL_RGB16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR16161616_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XRGB8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
      break;

   /* Alpha formats */
   case GL_ALPHA:
   case GL_ALPHA4:
   case GL_ALPHA8:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8);
      break;

   case GL_ALPHA12:
   case GL_ALPHA16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8);
      break;

   /* Luminance formats */
   case 1:
   case GL_LUMINANCE:
   case GL_LUMINANCE4:
   case GL_LUMINANCE8:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8);
      break;

   case GL_LUMINANCE12:
   case GL_LUMINANCE16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8);
      break;
d118 55
a172 65
   case GL_LUMINANCE4_ALPHA4:
      RETURN_IF_SUPPORTED(MESA_FORMAT_AL44);
      RETURN_IF_SUPPORTED(MESA_FORMAT_AL88);
      break;

   case 2:
   case GL_LUMINANCE_ALPHA:
   case GL_LUMINANCE6_ALPHA2:
   case GL_LUMINANCE8_ALPHA8:
      RETURN_IF_SUPPORTED(MESA_FORMAT_AL88);
      break;

   case GL_LUMINANCE12_ALPHA4:
   case GL_LUMINANCE12_ALPHA12:
   case GL_LUMINANCE16_ALPHA16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_AL1616);
      RETURN_IF_SUPPORTED(MESA_FORMAT_AL88);
      break;

   case GL_INTENSITY:
   case GL_INTENSITY4:
   case GL_INTENSITY8:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I8);
      break;

   case GL_INTENSITY12:
   case GL_INTENSITY16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_I8);
      break;

   case GL_DEPTH_COMPONENT:
   case GL_DEPTH_COMPONENT24:
   case GL_DEPTH_COMPONENT32:
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_X8_Z24);
      RETURN_IF_SUPPORTED(MESA_FORMAT_S8_Z24);
      break;
   case GL_DEPTH_COMPONENT16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_X8_Z24);
      RETURN_IF_SUPPORTED(MESA_FORMAT_S8_Z24);
      break;

   case GL_COMPRESSED_ALPHA_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8);
      break;
   case GL_COMPRESSED_LUMINANCE_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8);
      break;
   case GL_COMPRESSED_LUMINANCE_ALPHA_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_AL88);
      break;
   case GL_COMPRESSED_INTENSITY_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_I8);
      break;
   case GL_COMPRESSED_RGB_ARB:
      /* We don't use texture compression for 1D and 1D array textures.
       * For 1D textures, compressions doesn't buy us much.
       * For 1D ARRAY textures, there's complicated issues with updating
       * sub-regions on non-block boundaries with glCopyTexSubImage, among
       * other issues.  FWIW, the GL_EXT_texture_array extension prohibits
       * 1D ARRAY textures in S3TC format.
       */
      if (target != GL_TEXTURE_1D && target != GL_TEXTURE_1D_ARRAY) {
d174 2
a175 2
             ctx->Extensions.ANGLE_texture_compression_dxt)
            RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_DXT1);
d177 3
a179 9
            RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FXT1);
      }
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XRGB8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
      break;
   case GL_COMPRESSED_RGBA_ARB:
      /* We don't use texture compression for 1D and 1D array textures. */
      if (target != GL_TEXTURE_1D && target != GL_TEXTURE_1D_ARRAY) {
d181 2
a182 2
             ctx->Extensions.ANGLE_texture_compression_dxt)
            RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_DXT3); /* Not rgba_dxt1, see spec */
d184 12
a195 1
            RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FXT1);
a196 555
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
      break;

   case GL_RGB565:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB565);
      break;

   case GL_YCBCR_MESA:
      if (type == GL_UNSIGNED_SHORT_8_8_MESA)
         RETURN_IF_SUPPORTED(MESA_FORMAT_YCBCR);
      else
         RETURN_IF_SUPPORTED(MESA_FORMAT_YCBCR_REV);
      break;

   /* For non-generic compressed format we assert two things:
    *
    * 1. The format has already been validated against the set of available
    *    extensions.
    *
    * 2. The driver only enables the extension if it supports all of the
    *    formats that are part of that extension.
    */
   case GL_COMPRESSED_RGB_FXT1_3DFX:
      return MESA_FORMAT_RGB_FXT1;
   case GL_COMPRESSED_RGBA_FXT1_3DFX:
      return MESA_FORMAT_RGBA_FXT1;
   case GL_COMPRESSED_RGB_S3TC_DXT1_EXT:
   case GL_RGB_S3TC:
   case GL_RGB4_S3TC:
      return MESA_FORMAT_RGB_DXT1;
   case GL_COMPRESSED_RGBA_S3TC_DXT1_EXT:
      return MESA_FORMAT_RGBA_DXT1;
   case GL_COMPRESSED_RGBA_S3TC_DXT3_EXT:
   case GL_RGBA_S3TC:
   case GL_RGBA4_S3TC:
      return MESA_FORMAT_RGBA_DXT3;
   case GL_COMPRESSED_RGBA_S3TC_DXT5_EXT:
      return MESA_FORMAT_RGBA_DXT5;
   case GL_COMPRESSED_RED_RGTC1:
      return MESA_FORMAT_RED_RGTC1;
   case GL_COMPRESSED_SIGNED_RED_RGTC1:
      return MESA_FORMAT_SIGNED_RED_RGTC1;
   case GL_COMPRESSED_RG_RGTC2:
      return MESA_FORMAT_RG_RGTC2;
   case GL_COMPRESSED_SIGNED_RG_RGTC2:
      return MESA_FORMAT_SIGNED_RG_RGTC2;
   case GL_COMPRESSED_LUMINANCE_LATC1_EXT:
      return MESA_FORMAT_L_LATC1;
   case GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT:
      return MESA_FORMAT_SIGNED_L_LATC1;
   case GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT:
      return MESA_FORMAT_LA_LATC2;
   case GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT:
      return MESA_FORMAT_SIGNED_LA_LATC2;
   case GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI:
      return MESA_FORMAT_LA_LATC2;
   case GL_ETC1_RGB8_OES:
      return MESA_FORMAT_ETC1_RGB8;
   case GL_COMPRESSED_RGB8_ETC2:
      return MESA_FORMAT_ETC2_RGB8;
   case GL_COMPRESSED_SRGB8_ETC2:
      return MESA_FORMAT_ETC2_SRGB8;
   case GL_COMPRESSED_RGBA8_ETC2_EAC:
      return MESA_FORMAT_ETC2_RGBA8_EAC;
   case GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:
      return MESA_FORMAT_ETC2_SRGB8_ALPHA8_EAC;
   case GL_COMPRESSED_R11_EAC:
      return MESA_FORMAT_ETC2_R11_EAC;
   case GL_COMPRESSED_RG11_EAC:
      return MESA_FORMAT_ETC2_RG11_EAC;
   case GL_COMPRESSED_SIGNED_R11_EAC:
      return MESA_FORMAT_ETC2_SIGNED_R11_EAC;
   case GL_COMPRESSED_SIGNED_RG11_EAC:
      return MESA_FORMAT_ETC2_SIGNED_RG11_EAC;
   case GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:
      return MESA_FORMAT_ETC2_RGB8_PUNCHTHROUGH_ALPHA1;
   case GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:
      return MESA_FORMAT_ETC2_SRGB8_PUNCHTHROUGH_ALPHA1;
   case GL_COMPRESSED_SRGB_S3TC_DXT1_EXT:
      return MESA_FORMAT_SRGB_DXT1;
   case GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT:
      return MESA_FORMAT_SRGBA_DXT1;
   case GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT:
      return MESA_FORMAT_SRGBA_DXT3;
   case GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT:
      return MESA_FORMAT_SRGBA_DXT5;

   case GL_ALPHA16F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_ALPHA32F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;
   case GL_LUMINANCE16F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_LUMINANCE32F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;
   case GL_LUMINANCE_ALPHA16F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_LUMINANCE_ALPHA32F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;
   case GL_INTENSITY16F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_INTENSITY32F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;
   case GL_RGB16F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR16161616_FLOAT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_RGB32F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR32323232_FLOAT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;
   case GL_RGBA16F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_RGBA32F_ARB:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;

   case GL_RGB9_E5:
      /* GL_EXT_texture_shared_exponent -- just one format to support */
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_RGB9_E5_FLOAT]);
      return MESA_FORMAT_RGB9_E5_FLOAT;

   case GL_R11F_G11F_B10F:
      /* GL_EXT_texture_packed_float -- just one format to support */
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_R11_G11_B10_FLOAT]);
      return MESA_FORMAT_R11_G11_B10_FLOAT;

   case GL_DEPTH_STENCIL_EXT:
   case GL_DEPTH24_STENCIL8_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z24_S8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_S8_Z24);
      break;

   case GL_DEPTH_COMPONENT32F:
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_Z32_FLOAT]);
      return MESA_FORMAT_Z32_FLOAT;
   case GL_DEPTH32F_STENCIL8:
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_Z32_FLOAT_X24S8]);
      return MESA_FORMAT_Z32_FLOAT_X24S8;

   case GL_DUDV_ATI:
   case GL_DU8DV8_ATI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_DUDV8);
      break;

   case GL_RED_SNORM:
   case GL_R8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_R8);
      break;
   case GL_RG_SNORM:
   case GL_RG8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RG88_REV);
      break;
   case GL_RGB_SNORM:
   case GL_RGB8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBX8888);
      /* FALLTHROUGH */
   case GL_RGBA_SNORM:
   case GL_RGBA8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
      break;
   case GL_ALPHA_SNORM:
   case GL_ALPHA8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_A8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
      break;
   case GL_LUMINANCE_SNORM:
   case GL_LUMINANCE8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_L8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBX8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
      break;
   case GL_LUMINANCE_ALPHA_SNORM:
   case GL_LUMINANCE8_ALPHA8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_AL88);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
      break;
   case GL_INTENSITY_SNORM:
   case GL_INTENSITY8_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_I8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
      break;
   case GL_R16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_R16);
      break;
   case GL_RG16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_GR1616);
      break;
   case GL_RGB16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGB_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR16161616_SNORM);
      /* FALLTHROUGH */
   case GL_RGBA16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
      break;
   case GL_ALPHA16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_A16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
      break;
   case GL_LUMINANCE16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_L16);
      /* FALLTHROUGH */
   case GL_LUMINANCE16_ALPHA16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_AL1616);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
      break;
   case GL_INTENSITY16_SNORM:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_I16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA_16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SIGNED_RGBA8888_REV);
      break;

   case GL_SRGB_EXT:
   case GL_SRGB8_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SRGB8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
      break;
   case GL_SRGB_ALPHA_EXT:
   case GL_SRGB8_ALPHA8_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SRGBA8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
      break;
   case GL_SLUMINANCE_EXT:
   case GL_SLUMINANCE8_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SL8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
      break;
   case GL_SLUMINANCE_ALPHA_EXT:
   case GL_SLUMINANCE8_ALPHA8_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SLA8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
      break;
   case GL_COMPRESSED_SLUMINANCE_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SL8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
      break;
   case GL_COMPRESSED_SLUMINANCE_ALPHA_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SLA8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
      break;
   case GL_COMPRESSED_SRGB_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SRGB_DXT1);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SRGB8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
      break;
   case GL_COMPRESSED_SRGB_ALPHA_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_SRGBA_DXT3); /* Not srgba_dxt1, see spec */
      RETURN_IF_SUPPORTED(MESA_FORMAT_SRGBA8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_SARGB8);
      break;

   case GL_ALPHA8UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_UINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT8);
      break;
   case GL_ALPHA16UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_UINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT16);
      break;
   case GL_ALPHA32UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_UINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT32);
      break;
   case GL_ALPHA8I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_INT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT8);
      break;
   case GL_ALPHA16I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_INT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT16);
      break;
   case GL_ALPHA32I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_ALPHA_INT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT32);
      break;
   case GL_LUMINANCE8UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_UINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT8);
      break;
   case GL_LUMINANCE16UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_UINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT16);
      break;
   case GL_LUMINANCE32UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_UINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT32);
      break;
   case GL_LUMINANCE8I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_INT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT8);
      break;
   case GL_LUMINANCE16I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_INT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT16);
      break;
   case GL_LUMINANCE32I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_INT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT32);
      break;
   case GL_LUMINANCE_ALPHA8UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_UINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT8);
      break;
   case GL_LUMINANCE_ALPHA16UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_UINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT16);
      break;
   case GL_LUMINANCE_ALPHA32UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_UINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT32);
      break;
   case GL_LUMINANCE_ALPHA8I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_INT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT8);
      break;
   case GL_LUMINANCE_ALPHA16I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_INT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT16);
      break;
   case GL_LUMINANCE_ALPHA32I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_LUMINANCE_ALPHA_INT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT32);
      break;
   case GL_INTENSITY8UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_UINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT8);
      break;
   case GL_INTENSITY16UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_UINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT16);
      break;
   case GL_INTENSITY32UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_UINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT32);
      break;
   case GL_INTENSITY8I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_INT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT8);
      break;
   case GL_INTENSITY16I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_INT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT16);
      break;
   case GL_INTENSITY32I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_INTENSITY_INT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT32);
      break;

   case GL_RGB8UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_UINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR8888_UINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT8);
      break;
   case GL_RGB16UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_UINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR16161616_UINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT16);
      break;
   case GL_RGB32UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_UINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR32323232_UINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT32);
      break;
   case GL_RGB8I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_INT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR8888_SINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT8);
      break;
   case GL_RGB16I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_INT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR16161616_SINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT16);
      break;
   case GL_RGB32I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_INT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_XBGR32323232_SINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT32);
      break;
   case GL_RGBA8UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT8);
      break;
   case GL_RGBA16UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT16);
      break;
   case GL_RGBA32UI_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UINT32);
      break;
   case GL_RGBA8I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT8);
      break;
   case GL_RGBA16I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT16);
      break;
   case GL_RGBA32I_EXT:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_INT32);
      break;

   case GL_R8:
   case GL_RED:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8);
      break;

   case GL_COMPRESSED_RED:
      if (target != GL_TEXTURE_1D && target != GL_TEXTURE_1D_ARRAY)
         RETURN_IF_SUPPORTED(MESA_FORMAT_RED_RGTC1);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8);
      break;

   case GL_R16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R16);
      break;

   case GL_RG:
   case GL_RG8:
      RETURN_IF_SUPPORTED(MESA_FORMAT_GR88);
      break;

   case GL_COMPRESSED_RG:
      if (target != GL_TEXTURE_1D && target != GL_TEXTURE_1D_ARRAY)
         RETURN_IF_SUPPORTED(MESA_FORMAT_RG_RGTC2);
      RETURN_IF_SUPPORTED(MESA_FORMAT_GR88);
      break;

   case GL_RG16:
      RETURN_IF_SUPPORTED(MESA_FORMAT_GR1616);
      break;

   case GL_R16F:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_R32F:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;
   case GL_RG16F:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      break;
   case GL_RG32F:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FLOAT16);
      break;

   case GL_R8UI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_UINT8);
      break;
   case GL_RG8UI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_UINT8);
      break;
   case GL_R16UI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_UINT16);
      break;
   case GL_RG16UI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_UINT16);
      break;
   case GL_R32UI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_UINT32);
      break;
   case GL_RG32UI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_UINT32);
      break;
   case GL_R8I:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_INT8);
      break;
   case GL_RG8I:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_INT8);
      break;
   case GL_R16I:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_INT16);
      break;
   case GL_RG16I:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_INT16);
      break;
   case GL_R32I:
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_INT32);
      break;
   case GL_RG32I:
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_INT32);
      break;

   case GL_RGB10_A2UI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB2101010_UINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_ABGR2101010_UINT);
      break;

   case GL_BGRA:
      RETURN_IF_SUPPORTED(MESA_FORMAT_ARGB8888);
      break;
d199 257
a455 2
   _mesa_problem(ctx, "unexpected format %s in _mesa_choose_tex_format()",
                 _mesa_lookup_enum_by_nr(internalFormat));
a458 13
GLboolean
_mesa_tex_target_is_array(GLenum target)
{
   switch (target) {
   case GL_TEXTURE_1D_ARRAY_EXT:
   case GL_TEXTURE_2D_ARRAY_EXT:
   case GL_TEXTURE_2D_MULTISAMPLE_ARRAY:
   case GL_TEXTURE_CUBE_MAP_ARRAY:
      return GL_TRUE;
   default:
      return GL_FALSE;
   }
}
@


1.1.1.4
log
@Import Mesa 9.2.1
@
text
@d242 2
a243 1
         if (ctx->Mesa_DXTn)
d245 2
a246 1
         RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_FXT1);
d255 2
a256 1
         if (ctx->Mesa_DXTn)
d258 2
a259 1
         RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_FXT1);
d556 1
a556 2
      if (ctx->Mesa_DXTn)
         RETURN_IF_SUPPORTED(MESA_FORMAT_SRGB_DXT1);
d561 1
a561 2
      if (ctx->Mesa_DXTn)
         RETURN_IF_SUPPORTED(MESA_FORMAT_SRGBA_DXT3); /* Not srgba_dxt1, see spec */
@


1.1.1.5
log
@Import Mesa 10.2.3
@
text
@d57 1
a57 1
 * \return the closest mesa_format for the given format/type arguments
d62 1
a62 1
mesa_format
d73 1
a73 1
         RETURN_IF_SUPPORTED(MESA_FORMAT_B4G4R4A4_UNORM);
d75 1
a75 1
         RETURN_IF_SUPPORTED(MESA_FORMAT_B5G5R5A1_UNORM);
d77 1
a77 1
         RETURN_IF_SUPPORTED(MESA_FORMAT_B10G10R10A2_UNORM);
d79 3
a81 1
      /* fallthrough */
d84 2
a85 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
d88 1
a88 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_B5G5R5A1_UNORM);
d91 2
a92 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_A4R4G4B4_UNORM); /* just to test another format*/
      RETURN_IF_SUPPORTED(MESA_FORMAT_B4G4R4A4_UNORM);
d95 1
a95 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_B4G4R4A4_UNORM);
d100 2
a101 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_R10G10B10A2_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B10G10R10A2_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
d105 4
a108 4
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
d115 1
a115 1
         RETURN_IF_SUPPORTED(MESA_FORMAT_B10G10R10A2_UNORM);
d119 3
a121 7
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_UNORM8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8X8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_UNORM);

      RETURN_IF_SUPPORTED(MESA_FORMAT_BGR_UNORM8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8X8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
d124 6
a129 6
      RETURN_IF_SUPPORTED(MESA_FORMAT_B2G3R3_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B5G6R5_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R5G6B5_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_BGR_UNORM8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8X8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
d132 2
a133 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_R5G6B5_UNORM); /* just to test another format */
      RETURN_IF_SUPPORTED(MESA_FORMAT_B5G6R5_UNORM);
d136 1
a136 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_B5G6R5_UNORM);
d143 4
a146 4
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8X8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
d153 1
a153 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_UNORM8);
d158 2
a159 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_UNORM8);
d167 1
a167 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_UNORM8);
d172 2
a173 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_UNORM8);
d178 2
a179 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_L4A4_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_UNORM);
d186 1
a186 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_UNORM);
d192 2
a193 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_L16A16_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_UNORM);
d199 1
a199 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_UNORM8);
d204 2
a205 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_UNORM8);
d211 3
a213 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z_UNORM32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z24_UNORM_X8_UINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z24_UNORM_S8_UINT);
d216 3
a218 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z_UNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z24_UNORM_X8_UINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z24_UNORM_S8_UINT);
d222 1
a222 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_UNORM8);
d225 1
a225 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_UNORM8);
d228 1
a228 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_UNORM);
d231 1
a231 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_UNORM8);
d246 3
a248 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_BGR_UNORM8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8X8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
d257 2
a258 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
d262 1
a262 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_B5G6R5_UNORM);
d297 1
a297 1
      return MESA_FORMAT_R_RGTC1_UNORM;
d299 1
a299 1
      return MESA_FORMAT_R_RGTC1_SNORM;
d301 1
a301 1
      return MESA_FORMAT_RG_RGTC2_UNORM;
d303 1
a303 1
      return MESA_FORMAT_RG_RGTC2_SNORM;
d305 1
a305 1
      return MESA_FORMAT_L_LATC1_UNORM;
d307 1
a307 1
      return MESA_FORMAT_L_LATC1_SNORM;
d309 1
a309 1
      return MESA_FORMAT_LA_LATC2_UNORM;
d311 1
a311 1
      return MESA_FORMAT_LA_LATC2_SNORM;
d313 1
a313 1
      return MESA_FORMAT_LA_LATC2_UNORM;
d346 2
a347 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_FLOAT32);
d352 1
a352 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_FLOAT32);
d354 1
a354 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_FLOAT16);
d358 2
a359 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_FLOAT32);
d364 1
a364 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_FLOAT32);
d366 1
a366 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_FLOAT16);
d370 2
a371 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_FLOAT32);
d376 1
a376 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_FLOAT32);
d378 1
a378 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_FLOAT16);
d382 2
a383 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_FLOAT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_FLOAT32);
d388 1
a388 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_FLOAT32);
d390 1
a390 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_FLOAT16);
d395 1
a395 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_FLOAT16);
d402 1
a402 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_FLOAT32);
d418 2
a419 2
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_R9G9B9E5_FLOAT]);
      return MESA_FORMAT_R9G9B9E5_FLOAT;
d423 2
a424 2
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_R11G11B10_FLOAT]);
      return MESA_FORMAT_R11G11B10_FLOAT;
d428 2
a429 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_S8_UINT_Z24_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_Z24_UNORM_S8_UINT);
d433 2
a434 2
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_Z_FLOAT32]);
      return MESA_FORMAT_Z_FLOAT32;
d436 2
a437 2
      ASSERT(ctx->TextureFormatSupported[MESA_FORMAT_Z32_FLOAT_S8X24_UINT]);
      return MESA_FORMAT_Z32_FLOAT_S8X24_UINT;
d446 1
a446 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_SNORM8);
d450 1
a450 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8_SNORM);
d454 2
a455 5
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8X8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_X8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      break;
d458 2
a459 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
d463 3
a465 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_SNORM8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
d469 4
a472 4
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_SNORM8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_X8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
d476 3
a478 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
d482 3
a484 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_SNORM8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
d487 1
a487 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_SNORM16);
d490 1
a490 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R16G16_SNORM);
d493 2
a494 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_SNORM16);
d497 3
a499 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
d502 4
a505 4
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
d508 1
a508 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_SNORM16);
d511 4
a514 4
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
d517 4
a520 4
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SNORM16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SNORM);
d525 2
a526 6
      /* there is no MESA_FORMAT_RGB_SRGB8 */
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8X8_SRGB);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SRGB);

      RETURN_IF_SUPPORTED(MESA_FORMAT_BGR_SRGB8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
d530 2
a531 4
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8B8A8_SRGB);

      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SRGB);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
d535 2
a536 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_SRGB8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
d540 2
a541 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_SRGB);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
d544 2
a545 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_SRGB8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
d548 2
a549 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_SRGB);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
d554 2
a555 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_BGR_SRGB8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
d560 2
a561 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8B8G8R8_SRGB);
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_SRGB);
d565 1
a565 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_UINT8);
d569 1
a569 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_UINT16);
d573 1
a573 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_UINT32);
d577 2
a578 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_SINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT8);
d581 2
a582 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_SINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT16);
d585 2
a586 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_A_SINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT32);
d589 1
a589 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_UINT8);
d593 1
a593 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_UINT16);
d597 1
a597 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_UINT32);
d601 2
a602 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_SINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT8);
d605 2
a606 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_SINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT16);
d609 2
a610 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_L_SINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT32);
d613 1
a613 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_UINT8);
d617 1
a617 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_UINT16);
d621 1
a621 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_UINT32);
d625 2
a626 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_SINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT8);
d629 2
a630 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_SINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT16);
d633 2
a634 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_LA_SINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT32);
d637 1
a637 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_UINT8);
d641 1
a641 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_UINT16);
d645 1
a645 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_UINT32);
d649 2
a650 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_SINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT8);
d653 2
a654 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_SINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT16);
d657 2
a658 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_I_SINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT32);
d663 1
a663 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_UINT8);
d668 1
a668 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_UINT16);
d673 1
a673 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_UINT32);
d677 3
a679 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_SINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_SINT8);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT8);
d682 3
a684 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_SINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_SINT16);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT16);
d687 3
a689 3
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGB_SINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBX_SINT32);
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT32);
d701 1
a701 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT8);
d704 1
a704 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT16);
d707 1
a707 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RGBA_SINT32);
d712 1
a712 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_UNORM8);
d717 2
a718 2
         RETURN_IF_SUPPORTED(MESA_FORMAT_R_RGTC1_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_UNORM8);
d722 1
a722 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_UNORM16);
d727 1
a727 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8_UNORM);
d732 2
a733 2
         RETURN_IF_SUPPORTED(MESA_FORMAT_RG_RGTC2_UNORM);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R8G8_UNORM);
d737 1
a737 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R16G16_UNORM);
d788 1
a788 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_SINT8);
d791 1
a791 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_SINT8);
d794 1
a794 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_SINT16);
d797 1
a797 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_SINT16);
d800 1
a800 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_R_SINT32);
d803 1
a803 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_RG_SINT32);
d807 2
a808 2
      RETURN_IF_SUPPORTED(MESA_FORMAT_B10G10R10A2_UINT);
      RETURN_IF_SUPPORTED(MESA_FORMAT_R10G10B10A2_UINT);
d812 1
a812 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_B8G8R8A8_UNORM);
@


1.1.1.6
log
@Import Mesa 10.4.3
@
text
@a157 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_UNORM);
a163 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_UNORM);
a226 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_L8A8_UNORM);
a347 8
   case GL_COMPRESSED_RGBA_BPTC_UNORM:
      return MESA_FORMAT_BPTC_RGBA_UNORM;
   case GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM:
      return MESA_FORMAT_BPTC_SRGB_ALPHA_UNORM;
   case GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT:
      return MESA_FORMAT_BPTC_RGB_SIGNED_FLOAT;
   case GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT:
      return MESA_FORMAT_BPTC_RGB_UNSIGNED_FLOAT;
d443 5
a484 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8L8_SNORM);
a538 3

      RETURN_IF_SUPPORTED(MESA_FORMAT_X8B8G8R8_SRGB);
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
a545 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
a550 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
a554 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8L8_SRGB);
a555 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
a559 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
a562 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8L8_SRGB);
a563 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
a569 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
a575 1
      RETURN_IF_SUPPORTED(MESA_FORMAT_A8R8G8B8_SRGB);
@


1.1.1.7
log
@Import Mesa 10.2.9
@
text
@d158 1
d165 1
d229 1
d351 8
a453 5
   case GL_DUDV_ATI:
   case GL_DU8DV8_ATI:
      RETURN_IF_SUPPORTED(MESA_FORMAT_DUDV8);
      break;

d491 1
d546 3
d556 1
d562 1
d567 1
d569 1
d574 1
d578 1
d580 1
d587 1
d594 1
@


