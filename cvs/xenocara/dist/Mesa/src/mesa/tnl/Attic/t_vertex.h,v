head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.23.13.37.46;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.34;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.49;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.17.41;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.13;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * VMWARE AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keithw@@vmware.com>
 */

#ifndef _TNL_VERTEX_H
#define _TNL_VERTEX_H

#include "main/glheader.h"
#include "t_context.h"

struct gl_context;
struct tnl_clipspace;

/* New mechanism to specify hardware vertices so that tnl can build
 * and manipulate them directly.  
 */


/* It will probably be necessary to allow drivers to specify new
 * emit-styles to cover all the wierd and wacky things out there.
 */
enum tnl_attr_format {
   EMIT_1F,
   EMIT_2F,
   EMIT_3F,
   EMIT_4F,
   EMIT_2F_VIEWPORT,		/* do viewport transform and emit */
   EMIT_3F_VIEWPORT,		/* do viewport transform and emit */
   EMIT_4F_VIEWPORT,		/* do viewport transform and emit */
   EMIT_3F_XYW,			/* for projective texture */
   EMIT_1UB_1F,			/* for fog coordinate */
   EMIT_3UB_3F_RGB,		/* for specular color */
   EMIT_3UB_3F_BGR,		/* for specular color */
   EMIT_4UB_4F_RGBA,		/* for color */
   EMIT_4UB_4F_BGRA,		/* for color */
   EMIT_4UB_4F_ARGB,		/* for color */
   EMIT_4UB_4F_ABGR,		/* for color */
   EMIT_4CHAN_4F_RGBA,		/* for swrast color */
   EMIT_PAD,			/* leave a hole of 'offset' bytes */
   EMIT_MAX
};

struct tnl_attr_map {
   GLuint attrib;			/* _TNL_ATTRIB_ enum */
   enum tnl_attr_format format;
   GLuint offset;
};

struct tnl_format_info {
   const char *name;
   tnl_extract_func extract;
   tnl_insert_func insert[4];
   const GLuint attrsize;
};

extern const struct tnl_format_info _tnl_format_info[EMIT_MAX];


/* Interpolate between two vertices to produce a third:
 */
extern void _tnl_interp( struct gl_context *ctx,
			 GLfloat t,
			 GLuint edst, GLuint eout, GLuint ein,
			 GLboolean force_boundary );

/* Copy colors from one vertex to another:
 */
extern void _tnl_copy_pv(  struct gl_context *ctx, GLuint edst, GLuint esrc );


/* Extract a named attribute from a hardware vertex.  Will have to
 * reverse any viewport transformation, swizzling or other conversions
 * which may have been applied:
 */
extern void _tnl_get_attr( struct gl_context *ctx, const void *vertex, GLenum attrib,
			   GLfloat *dest );

/* Complementary to the above.
 */
extern void _tnl_set_attr( struct gl_context *ctx, void *vout, GLenum attrib, 
			   const GLfloat *src );


extern void *_tnl_get_vertex( struct gl_context *ctx, GLuint nr );

extern GLuint _tnl_install_attrs( struct gl_context *ctx,
				  const struct tnl_attr_map *map,
				  GLuint nr, const GLfloat *vp,
				  GLuint unpacked_size );

extern void _tnl_free_vertices( struct gl_context *ctx );

extern void _tnl_init_vertices( struct gl_context *ctx, 
				GLuint vb_size,
				GLuint max_vertex_size );

extern void *_tnl_emit_vertices_to_buffer( struct gl_context *ctx,
					   GLuint start,
					   GLuint end,
					   void *dest );

/* This function isn't optimal. Check out 
 * gallium/auxilary/translate for a more comprehensive implementation of
 * the same functionality.
 */
  
extern void *_tnl_emit_indexed_vertices_to_buffer( struct gl_context *ctx,
						   const GLuint *elts,
						   GLuint start,
						   GLuint end,
						   void *dest );


extern void _tnl_build_vertices( struct gl_context *ctx,
				 GLuint start,
				 GLuint end,
				 GLuint newinputs );

extern void _tnl_invalidate_vertices( struct gl_context *ctx, GLuint newinputs );

extern void _tnl_invalidate_vertex_state( struct gl_context *ctx, GLuint new_state );

extern void _tnl_notify_pipeline_output_change( struct gl_context *ctx );


#define GET_VERTEX_STATE(ctx)  &(TNL_CONTEXT(ctx)->clipspace)

/* Internal function:
 */
void _tnl_register_fastpath( struct tnl_clipspace *vtx,
			     GLboolean match_strides );


/* t_vertex_generic.c -- Internal functions for t_vertex.c
 */
void _tnl_generic_copy_pv_extras( struct gl_context *ctx, 
				  GLuint dst, GLuint src );

void _tnl_generic_interp_extras( struct gl_context *ctx,
				 GLfloat t,
				 GLuint dst, GLuint out, GLuint in,
				 GLboolean force_boundary );

void _tnl_generic_copy_pv( struct gl_context *ctx, GLuint edst, GLuint esrc );

void _tnl_generic_interp( struct gl_context *ctx,
			  GLfloat t,
			  GLuint edst, GLuint eout, GLuint ein,
			  GLboolean force_boundary );

void _tnl_generic_emit( struct gl_context *ctx,
			GLuint count,
			GLubyte *v );

void _tnl_generate_hardwired_emit( struct gl_context *ctx );

/* t_vertex_sse.c -- Internal functions for t_vertex.c
 */
void _tnl_generate_sse_emit( struct gl_context *ctx );

#endif
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d2 1
a2 1
 * Copyright 2003 Tungsten Graphics, inc.
d19 1
a19 1
 * TUNGSTEN GRAPHICS AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
d25 1
a25 1
 *    Keith Whitwell <keithw@@tungstengraphics.com>
@


1.3
log
@Merge Mesa 7.10.3
@
text
@d31 1
a31 1
#include "main/mtypes.h"
d33 3
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d81 1
a81 1
extern void _tnl_interp( GLcontext *ctx,
d88 1
a88 1
extern void _tnl_copy_pv(  GLcontext *ctx, GLuint edst, GLuint esrc );
d95 1
a95 1
extern void _tnl_get_attr( GLcontext *ctx, const void *vertex, GLenum attrib,
d100 1
a100 1
extern void _tnl_set_attr( GLcontext *ctx, void *vout, GLenum attrib, 
d104 1
a104 1
extern void *_tnl_get_vertex( GLcontext *ctx, GLuint nr );
d106 1
a106 1
extern GLuint _tnl_install_attrs( GLcontext *ctx,
d111 1
a111 1
extern void _tnl_free_vertices( GLcontext *ctx );
d113 1
a113 1
extern void _tnl_init_vertices( GLcontext *ctx, 
d117 1
a117 1
extern void *_tnl_emit_vertices_to_buffer( GLcontext *ctx,
d127 1
a127 1
extern void *_tnl_emit_indexed_vertices_to_buffer( GLcontext *ctx,
d134 1
a134 1
extern void _tnl_build_vertices( GLcontext *ctx,
d139 1
a139 1
extern void _tnl_invalidate_vertices( GLcontext *ctx, GLuint newinputs );
d141 1
a141 1
extern void _tnl_invalidate_vertex_state( GLcontext *ctx, GLuint new_state );
d143 1
a143 1
extern void _tnl_notify_pipeline_output_change( GLcontext *ctx );
d156 1
a156 1
void _tnl_generic_copy_pv_extras( GLcontext *ctx, 
d159 1
a159 1
void _tnl_generic_interp_extras( GLcontext *ctx,
d164 1
a164 1
void _tnl_generic_copy_pv( GLcontext *ctx, GLuint edst, GLuint esrc );
d166 1
a166 1
void _tnl_generic_interp( GLcontext *ctx,
d171 1
a171 1
void _tnl_generic_emit( GLcontext *ctx,
d175 1
a175 1
void _tnl_generate_hardwired_emit( GLcontext *ctx );
d179 1
a179 1
void _tnl_generate_sse_emit( GLcontext *ctx );
@


1.1
log
@Initial revision
@
text
@d31 1
a31 1
#include "mtypes.h"
d121 12
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d31 1
a31 1
#include "main/mtypes.h"
d81 1
a81 1
extern void _tnl_interp( struct gl_context *ctx,
d88 1
a88 1
extern void _tnl_copy_pv(  struct gl_context *ctx, GLuint edst, GLuint esrc );
d95 1
a95 1
extern void _tnl_get_attr( struct gl_context *ctx, const void *vertex, GLenum attrib,
d100 1
a100 1
extern void _tnl_set_attr( struct gl_context *ctx, void *vout, GLenum attrib, 
d104 1
a104 1
extern void *_tnl_get_vertex( struct gl_context *ctx, GLuint nr );
d106 1
a106 1
extern GLuint _tnl_install_attrs( struct gl_context *ctx,
d111 1
a111 1
extern void _tnl_free_vertices( struct gl_context *ctx );
d113 1
a113 1
extern void _tnl_init_vertices( struct gl_context *ctx, 
d117 1
a117 1
extern void *_tnl_emit_vertices_to_buffer( struct gl_context *ctx,
d122 1
a122 13
/* This function isn't optimal. Check out 
 * gallium/auxilary/translate for a more comprehensive implementation of
 * the same functionality.
 */
  
extern void *_tnl_emit_indexed_vertices_to_buffer( struct gl_context *ctx,
						   const GLuint *elts,
						   GLuint start,
						   GLuint end,
						   void *dest );


extern void _tnl_build_vertices( struct gl_context *ctx,
d127 1
a127 1
extern void _tnl_invalidate_vertices( struct gl_context *ctx, GLuint newinputs );
d129 1
a129 1
extern void _tnl_invalidate_vertex_state( struct gl_context *ctx, GLuint new_state );
d131 1
a131 1
extern void _tnl_notify_pipeline_output_change( struct gl_context *ctx );
d144 1
a144 1
void _tnl_generic_copy_pv_extras( struct gl_context *ctx, 
d147 1
a147 1
void _tnl_generic_interp_extras( struct gl_context *ctx,
d152 1
a152 1
void _tnl_generic_copy_pv( struct gl_context *ctx, GLuint edst, GLuint esrc );
d154 1
a154 1
void _tnl_generic_interp( struct gl_context *ctx,
d159 1
a159 1
void _tnl_generic_emit( struct gl_context *ctx,
d163 1
a163 1
void _tnl_generate_hardwired_emit( struct gl_context *ctx );
d167 1
a167 1
void _tnl_generate_sse_emit( struct gl_context *ctx );
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d31 1
a31 1
#include "main/glheader.h"
a32 3

struct gl_context;
struct tnl_clipspace;
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d2 1
a2 1
 * Copyright 2003 VMware, Inc.
d19 1
a19 1
 * VMWARE AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
d25 1
a25 1
 *    Keith Whitwell <keithw@@vmware.com>
@


