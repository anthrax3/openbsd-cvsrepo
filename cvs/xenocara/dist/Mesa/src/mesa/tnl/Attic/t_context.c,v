head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.6
	v10_2_7:1.1.1.6
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.6
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.5
	v9_2_3:1.1.1.5
	v9_2_2:1.1.1.5
	v9_2_1:1.1.1.5
	v9_2_0:1.1.1.5
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.06.53;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.29;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.52;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.32.17;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.49;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.09.05.13.17.36;	author jsg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.07.09.20.35.13;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keithw@@vmware.com>
 */


#include "main/glheader.h"
#include "main/imports.h"
#include "main/context.h"
#include "main/macros.h"
#include "main/mtypes.h"
#include "main/light.h"
#include "math/m_translate.h"
#include "math/m_xform.h"
#include "main/state.h"

#include "tnl.h"
#include "t_context.h"
#include "t_pipeline.h"

#include "vbo/vbo.h"

GLboolean
_tnl_CreateContext( struct gl_context *ctx )
{
   TNLcontext *tnl;
   GLuint i;

   /* Create the TNLcontext structure
    */
   ctx->swtnl_context = tnl = calloc(1, sizeof(TNLcontext));

   if (!tnl) {
      return GL_FALSE;
   }

   /* Initialize the VB.
    */
   tnl->vb.Size = ctx->Const.MaxArrayLockSize + MAX_CLIPPED_VERTICES;


   /* Initialize tnl state.
    */
   if (ctx->VertexProgram._MaintainTnlProgram) {
      _tnl_install_pipeline( ctx, _tnl_vp_pipeline );
   } else {
      _tnl_install_pipeline( ctx, _tnl_default_pipeline );
   }

   tnl->NeedNdcCoords = GL_TRUE;
   tnl->AllowVertexFog = GL_TRUE;
   tnl->AllowPixelFog = GL_TRUE;

   /* Set a few default values in the driver struct.
    */
   tnl->Driver.Render.PrimTabElts = _tnl_render_tab_elts;
   tnl->Driver.Render.PrimTabVerts = _tnl_render_tab_verts;
   tnl->Driver.NotifyMaterialChange = _tnl_validate_shine_tables;

   tnl->nr_blocks = 0;

   /* Lighting miscellaneous */
   tnl->_ShineTabList = MALLOC_STRUCT( tnl_shine_tab );
   make_empty_list( tnl->_ShineTabList );
   /* Allocate 10 (arbitrary) shininess lookup tables */
   for (i = 0 ; i < 10 ; i++) {
      struct tnl_shine_tab *s = MALLOC_STRUCT( tnl_shine_tab );
      s->shininess = -1;
      s->refcount = 0;
      insert_at_tail( tnl->_ShineTabList, s );
   }

   /* plug in the VBO drawing function */
   vbo_set_draw_func(ctx, _tnl_draw_prims);

   _math_init_transformation();
   _math_init_translate();

   return GL_TRUE;
}


void
_tnl_DestroyContext( struct gl_context *ctx )
{
   struct tnl_shine_tab *s, *tmps;
   TNLcontext *tnl = TNL_CONTEXT(ctx);

   /* Free lighting shininess exponentiation table */
   foreach_s( s, tmps, tnl->_ShineTabList ) {
      free( s );
   }
   free( tnl->_ShineTabList );

   _tnl_destroy_pipeline( ctx );

   free(tnl);
   ctx->swtnl_context = NULL;
}


void
_tnl_InvalidateState( struct gl_context *ctx, GLuint new_state )
{
   TNLcontext *tnl = TNL_CONTEXT(ctx);
   const struct gl_vertex_program *vp = ctx->VertexProgram._Current;
   const struct gl_fragment_program *fp = ctx->FragmentProgram._Current;
   GLuint i;

   if (new_state & (_NEW_HINT | _NEW_PROGRAM)) {
      ASSERT(tnl->AllowVertexFog || tnl->AllowPixelFog);
      tnl->_DoVertexFog = ((tnl->AllowVertexFog && (ctx->Hint.Fog != GL_NICEST))
         || !tnl->AllowPixelFog) && !fp;
   }

   tnl->pipeline.new_state |= new_state;

   /* Calculate tnl->render_inputs.  This bitmask indicates which vertex
    * attributes need to be emitted to the rasterizer.
    */
   tnl->render_inputs_bitset = BITFIELD64_BIT(_TNL_ATTRIB_POS);

   if (!fp || (fp->Base.InputsRead & VARYING_BIT_COL0)) {
     tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_COLOR0);
   }

   if (_mesa_need_secondary_color(ctx))
     tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_COLOR1);

   for (i = 0; i < ctx->Const.MaxTextureCoordUnits; i++) {
     if (ctx->Texture._EnabledCoordUnits & (1 << i) ||
	 (fp && fp->Base.InputsRead & VARYING_BIT_TEX(i))) {
       tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_TEX(i));
     }
   }

   if (ctx->Fog.Enabled
       || (fp != NULL && (fp->Base.InputsRead & VARYING_BIT_FOGC) != 0)) {
      /* Either fixed-function fog or a fragment program needs fog coord.
       */
      tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_FOG);
   }

   if (ctx->Polygon.FrontMode != GL_FILL || 
       ctx->Polygon.BackMode != GL_FILL)
      tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_EDGEFLAG);

   if (ctx->RenderMode == GL_FEEDBACK)
      tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_TEX0);

   if (ctx->Point._Attenuated || ctx->VertexProgram.PointSizeEnabled)
      tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_POINTSIZE);

   /* check for varying vars which are written by the vertex program */
   if (vp) {
      GLuint i;
      for (i = 0; i < MAX_VARYING; i++) {
	 if (vp->Base.OutputsWritten & BITFIELD64_BIT(VARYING_SLOT_VAR0 + i)) {
            tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_GENERIC(i));
         }
      }
   }
}


void
_tnl_wakeup( struct gl_context *ctx )
{
   /* Assume we haven't been getting state updates either:
    */
   _tnl_InvalidateState( ctx, ~0 );

#if 0
   if (ctx->Light.ColorMaterialEnabled) {
      _mesa_update_color_material( ctx, 
				   ctx->Current.Attrib[VERT_ATTRIB_COLOR0] );
   }
#endif
}




/**
 * Drivers call this function to tell the TCL module whether or not
 * it wants Normalized Device Coords (NDC) computed.  I.e. whether
 * we should "Divide-by-W".  Software renders will want that.
 */
void
_tnl_need_projected_coords( struct gl_context *ctx, GLboolean mode )
{
   TNLcontext *tnl = TNL_CONTEXT(ctx);
   tnl->NeedNdcCoords = mode;
}

void
_tnl_allow_vertex_fog( struct gl_context *ctx, GLboolean value )
{
   TNLcontext *tnl = TNL_CONTEXT(ctx);
   tnl->AllowVertexFog = value;
   tnl->_DoVertexFog = ((tnl->AllowVertexFog && (ctx->Hint.Fog != GL_NICEST))
      || !tnl->AllowPixelFog) && !ctx->FragmentProgram._Current;

}

void
_tnl_allow_pixel_fog( struct gl_context *ctx, GLboolean value )
{
   TNLcontext *tnl = TNL_CONTEXT(ctx);
   tnl->AllowPixelFog = value;
   tnl->_DoVertexFog = ((tnl->AllowVertexFog && (ctx->Hint.Fog != GL_NICEST))
      || !tnl->AllowPixelFog) && !ctx->FragmentProgram._Current;
}

@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.7
log
@Merge Mesa 9.2.0
@
text
@d25 1
a25 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
d96 1
a96 1
   vbo_set_draw_func(ctx, _tnl_vbo_draw_prims);
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.2
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d49 1
d53 1
a53 1
   ctx->swtnl_context = tnl = (TNLcontext *) CALLOC( sizeof(TNLcontext) );
d80 1
a80 1
   tnl->Driver.NotifyMaterialChange = _mesa_validate_all_lighting_tables;
d84 11
d108 1
d111 6
d119 1
a119 1
   FREE(tnl);
d143 1
a143 2
   RENDERINPUTS_ZERO( tnl->render_inputs_bitset );
   RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_POS );
d145 2
a146 2
   if (!fp || (fp->Base.InputsRead & FRAG_BIT_COL0)) {
     RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_COLOR0 );
d150 1
a150 1
     RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_COLOR1 );
d154 2
a155 2
	 (fp && fp->Base.InputsRead & FRAG_BIT_TEX(i))) {
       RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_TEX(i) );
d160 1
a160 1
       || (fp != NULL && (fp->Base.InputsRead & FRAG_BIT_FOGC) != 0)) {
d163 1
a163 1
      RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_FOG );
d168 1
a168 1
      RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_EDGEFLAG );
d171 1
a171 1
      RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_TEX0 );
d173 2
a174 3
   if (ctx->Point._Attenuated ||
       (ctx->VertexProgram._Enabled && ctx->VertexProgram.PointSizeEnabled))
      RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_POINTSIZE );
d180 2
a181 3
	 if (vp->Base.OutputsWritten & BITFIELD64_BIT(VERT_RESULT_VAR0 + i)) {
            RENDERINPUTS_SET(tnl->render_inputs_bitset,
                             _TNL_ATTRIB_GENERIC(i));
@


1.5
log
@Merge Mesa 7.10.3
@
text
@d37 1
d131 1
a131 1
   if (NEED_SECONDARY_COLOR(ctx))
d141 4
a144 2
   if (ctx->Fog.Enabled) {
      /* fixed-function fog */
a145 6
   }
   else if (fp) {
      if (fp->FogOption != GL_NONE || (fp->Base.InputsRead & FRAG_BIT_FOGC)) {
         /* fragment program needs fog coord */
         RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_FOG );
      }
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d45 1
a45 1
_tnl_CreateContext( GLcontext *ctx )
d93 1
a93 1
_tnl_DestroyContext( GLcontext *ctx )
d105 1
a105 1
_tnl_InvalidateState( GLcontext *ctx, GLuint new_state )
d176 1
a176 1
_tnl_wakeup( GLcontext *ctx )
d199 1
a199 1
_tnl_need_projected_coords( GLcontext *ctx, GLboolean mode )
d206 1
a206 1
_tnl_allow_vertex_fog( GLcontext *ctx, GLboolean value )
d216 1
a216 1
_tnl_allow_pixel_fog( GLcontext *ctx, GLboolean value )
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d35 2
a40 1
#include "t_vp_build.h"
d82 6
d110 1
d123 2
a124 2
   if (ctx->Visual.rgbMode) {
      GLuint i;
d126 3
a128 2
      RENDERINPUTS_ZERO( tnl->render_inputs_bitset );
      RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_POS );
d130 2
a131 6
      if (!fp || (fp->Base.InputsRead & FRAG_BIT_COL0)) {
         RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_COLOR0 );
      }

      if (NEED_SECONDARY_COLOR(ctx))
         RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_COLOR1 );
d133 5
a137 10
      for (i = 0; i < ctx->Const.MaxTextureCoordUnits; i++) {
         if (ctx->Texture._EnabledCoordUnits & (1 << i) ||
             (fp && fp->Base.InputsRead & FRAG_BIT_TEX(i))) {
            RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_TEX(i) );
         }
      }
   }
   else {
      RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_POS );
      RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_COLOR_INDEX );
d144 4
a147 7
   else if (ctx->FragmentProgram._Current) {
      struct gl_fragment_program *fp = ctx->FragmentProgram._Current;
      if (fp) {
         if (fp->FogOption != GL_NONE || (fp->Base.InputsRead & FRAG_BIT_FOGC)) {
            /* fragment program needs fog coord */
            RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_FOG );
         }
d166 1
a166 1
         if (vp->Base.OutputsWritten & (1 << (VERT_RESULT_VAR0 + i))) {
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a63 1
      _tnl_ProgramCacheInit( ctx );
a91 3
   if (ctx->VertexProgram._MaintainTnlProgram)
      _tnl_ProgramCacheDestroy( ctx );

d112 2
a113 1
   /* Calculate tnl->render_inputs:
d120 1
d124 4
d129 2
a130 1
         if (ctx->Texture._EnabledCoordUnits & (1 << i)) {
a133 3

      if (NEED_SECONDARY_COLOR(ctx))
         RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_COLOR1 );
d144 1
a144 1
   else if (ctx->FragmentProgram._Active || ctx->FragmentProgram._Current) {
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.5
d5 1
a5 1
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
d29 6
a34 9
#include "api_arrayelt.h"
#include "glheader.h"
#include "imports.h"
#include "context.h"
#include "macros.h"
#include "mtypes.h"
#include "dlist.h"
#include "light.h"
#include "vtxfmt.h"
a36 1
#include "t_array_api.h"
a38 1
#include "t_save_api.h"
a39 15
#include "t_vtx_api.h"



static void
install_driver_callbacks( GLcontext *ctx )
{
   ctx->Driver.NewList = _tnl_NewList;
   ctx->Driver.EndList = _tnl_EndList;
   ctx->Driver.FlushVertices = _tnl_FlushVertices;
   ctx->Driver.SaveFlushVertices = _tnl_SaveFlushVertices;
   ctx->Driver.BeginCallList = _tnl_BeginCallList;
   ctx->Driver.EndCallList = _tnl_EndCallList;
}

d41 1
a55 3
   if (_mesa_getenv("MESA_CODEGEN"))
      tnl->AllowCodegen = GL_TRUE;

d61 1
a61 1
   /* Initialize tnl state and tnl->vtxfmt.
d63 1
a63 5
   _tnl_save_init( ctx );
   _tnl_array_init( ctx );
   _tnl_vtx_init( ctx );

   if (ctx->_MaintainTnlProgram) {
a69 6
   /* Initialize the arrayelt helper
    */
   if (!_ae_create_context( ctx ))
      return GL_FALSE;


a70 2
   tnl->LoopbackDListCassettes = GL_FALSE;
   tnl->CalcDListNormalLengths = GL_TRUE;
a73 5
   /* Hook our functions into exec and compile dispatch tables.
    */
   _mesa_install_exec_vtxfmt( ctx, &tnl->exec_vtxfmt );


a75 5
   install_driver_callbacks(ctx);
   ctx->Driver.NeedFlush = 0;
   ctx->Driver.CurrentExecPrimitive = PRIM_OUTSIDE_BEGIN_END;
   ctx->Driver.CurrentSavePrimitive = PRIM_UNKNOWN;

d80 2
a90 3
   _tnl_array_destroy( ctx );
   _tnl_vtx_destroy( ctx );
   _tnl_save_destroy( ctx );
a91 1
   _ae_destroy_context( ctx );
d93 1
a93 1
   if (ctx->_MaintainTnlProgram)
d105 2
d108 1
a108 1
   if (new_state & (_NEW_HINT)) {
d110 2
a111 2
      tnl->_DoVertexFog = (tnl->AllowVertexFog && (ctx->Hint.Fog != GL_NICEST))
         || !tnl->AllowPixelFog;
a113 2
   _ae_invalidate_state(ctx, new_state);

a114 1
   tnl->vtx.eval.new_state |= new_state;
d123 3
a125 1
      RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_COLOR0 );
d140 2
a141 3
   if (ctx->Fog.Enabled ||
       (ctx->FragmentProgram._Active &&
       ctx->FragmentProgram._Current->FogOption != GL_NONE))
d143 10
d165 10
a174 2
   if (ctx->ShaderObjects._VertexShaderPresent || ctx->ShaderObjects._FragmentShaderPresent)
      RENDERINPUTS_SET_RANGE( tnl->render_inputs_bitset, _TNL_FIRST_GENERIC, _TNL_LAST_GENERIC );
d179 1
a179 1
_tnl_wakeup_exec( GLcontext *ctx )
a180 9
   TNLcontext *tnl = TNL_CONTEXT(ctx);

   install_driver_callbacks(ctx);
   ctx->Driver.NeedFlush |= FLUSH_UPDATE_CURRENT;

   /* Hook our functions into exec and compile dispatch tables.
    */
   _mesa_install_exec_vtxfmt( ctx, &tnl->exec_vtxfmt );

d185 1
d190 1
a193 8
void
_tnl_wakeup_save_exec( GLcontext *ctx )
{
   TNLcontext *tnl = TNL_CONTEXT(ctx);

   _tnl_wakeup_exec( ctx );
   _mesa_install_save_vtxfmt( ctx, &tnl->save_vtxfmt );
}
d205 1
a205 25
   if (tnl->NeedNdcCoords != mode) {
      tnl->NeedNdcCoords = mode;
      _tnl_InvalidateState( ctx, _NEW_PROJECTION );
   }
}

void
_tnl_need_dlist_loopback( GLcontext *ctx, GLboolean mode )
{
   TNLcontext *tnl = TNL_CONTEXT(ctx);
   tnl->LoopbackDListCassettes = mode;
}

void
_tnl_need_dlist_norm_lengths( GLcontext *ctx, GLboolean mode )
{
   TNLcontext *tnl = TNL_CONTEXT(ctx);
   tnl->CalcDListNormalLengths = mode;
}

void
_tnl_isolate_materials( GLcontext *ctx, GLboolean mode )
{
   TNLcontext *tnl = TNL_CONTEXT(ctx);
   tnl->IsolateMaterials = mode;
d213 2
a214 2
   tnl->_DoVertexFog = (tnl->AllowVertexFog && (ctx->Hint.Fog != GL_NICEST))
      || !tnl->AllowPixelFog;
d223 2
a224 2
   tnl->_DoVertexFog = (tnl->AllowVertexFog && (ctx->Hint.Fog != GL_NICEST))
      || !tnl->AllowPixelFog;
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d3 1
a3 1
 * Version:  6.5.2
d187 1
a187 2
        (ctx->FragmentProgram._Current->FogOption != GL_NONE ||
         ctx->FragmentProgram._Current->Base.InputsRead & FRAG_BIT_FOGC)))
d248 4
a251 1
   tnl->NeedNdcCoords = mode;
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d29 1
d35 1
d37 1
d40 1
d43 1
d45 15
a60 1
#include "vbo/vbo.h"
d75 3
d83 1
a83 1
   /* Initialize tnl state.
d85 5
a89 1
   if (ctx->VertexProgram._MaintainTnlProgram) {
d96 6
d103 2
d108 5
d115 5
a123 2
   tnl->nr_blocks = 0;

d133 3
d137 1
d139 1
a139 1
   if (ctx->VertexProgram._MaintainTnlProgram)
a150 2
   const struct gl_vertex_program *vp = ctx->VertexProgram._Current;
   const struct gl_fragment_program *fp = ctx->FragmentProgram._Current;
d158 2
d161 1
d170 1
a170 3
      if (!fp || (fp->Base.InputsRead & FRAG_BIT_COL0)) {
         RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_COLOR0 );
      }
d186 1
a186 1
       ((ctx->FragmentProgram._Active || ctx->FragmentProgram._Current) &&
d188 1
a188 1
         (ctx->FragmentProgram._Current->Base.InputsRead & FRAG_BIT_FOGC))))
d202 2
a203 10
   /* check for varying vars which are written by the vertex program */
   if (vp) {
      GLuint i;
      for (i = 0; i < MAX_VARYING; i++) {
         if (vp->Base.OutputsWritten & (1 << (VERT_RESULT_VAR0 + i))) {
            RENDERINPUTS_SET(tnl->render_inputs_bitset,
                             _TNL_ATTRIB_GENERIC(i));
         }
      }
   }
d208 1
a208 1
_tnl_wakeup( GLcontext *ctx )
d210 9
a222 1
#if 0
a226 1
#endif
d230 8
d250 21
@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d3 1
a3 1
 * Version:  7.2
d5 1
a5 1
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
d29 6
a34 8
#include "main/glheader.h"
#include "main/imports.h"
#include "main/context.h"
#include "main/macros.h"
#include "main/mtypes.h"
#include "main/light.h"
#include "math/m_translate.h"
#include "math/m_xform.h"
d39 1
d44 1
a44 1
_tnl_CreateContext( struct gl_context *ctx )
d64 1
a81 6
   /* plug in the VBO drawing function */
   vbo_set_draw_func(ctx, _tnl_vbo_draw_prims);

   _math_init_transformation();
   _math_init_translate();

d87 1
a87 1
_tnl_DestroyContext( struct gl_context *ctx )
d93 3
d102 1
a102 1
_tnl_InvalidateState( struct gl_context *ctx, GLuint new_state )
a106 1
   GLuint i;
d108 1
a108 1
   if (new_state & (_NEW_HINT | _NEW_PROGRAM)) {
d110 2
a111 2
      tnl->_DoVertexFog = ((tnl->AllowVertexFog && (ctx->Hint.Fog != GL_NICEST))
         || !tnl->AllowPixelFog) && !fp;
d116 1
a116 2
   /* Calculate tnl->render_inputs.  This bitmask indicates which vertex
    * attributes need to be emitted to the rasterizer.
d118 2
a119 2
   RENDERINPUTS_ZERO( tnl->render_inputs_bitset );
   RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_POS );
d121 13
a133 2
   if (!fp || (fp->Base.InputsRead & FRAG_BIT_COL0)) {
     RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_COLOR0 );
d135 3
a137 9

   if (NEED_SECONDARY_COLOR(ctx))
     RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_COLOR1 );

   for (i = 0; i < ctx->Const.MaxTextureCoordUnits; i++) {
     if (ctx->Texture._EnabledCoordUnits & (1 << i) ||
	 (fp && fp->Base.InputsRead & FRAG_BIT_TEX(i))) {
       RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_TEX(i) );
     }
d140 4
a143 2
   if (ctx->Fog.Enabled) {
      /* fixed-function fog */
a144 7
   }
   else if (fp) {
      if (fp->FogOption != GL_NONE || (fp->Base.InputsRead & FRAG_BIT_FOGC)) {
         /* fragment program needs fog coord */
         RENDERINPUTS_SET( tnl->render_inputs_bitset, _TNL_ATTRIB_FOG );
      }
   }
d161 1
a161 1
	 if (vp->Base.OutputsWritten & BITFIELD64_BIT(VERT_RESULT_VAR0 + i)) {
d171 1
a171 1
_tnl_wakeup( struct gl_context *ctx )
d194 1
a194 1
_tnl_need_projected_coords( struct gl_context *ctx, GLboolean mode )
d201 1
a201 1
_tnl_allow_vertex_fog( struct gl_context *ctx, GLboolean value )
d205 2
a206 2
   tnl->_DoVertexFog = ((tnl->AllowVertexFog && (ctx->Hint.Fog != GL_NICEST))
      || !tnl->AllowPixelFog) && !ctx->FragmentProgram._Current;
d211 1
a211 1
_tnl_allow_pixel_fog( struct gl_context *ctx, GLboolean value )
d215 2
a216 2
   tnl->_DoVertexFog = ((tnl->AllowVertexFog && (ctx->Hint.Fog != GL_NICEST))
      || !tnl->AllowPixelFog) && !ctx->FragmentProgram._Current;
@


1.1.1.5
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
a36 1
#include "main/state.h"
a47 1
   GLuint i;
d51 1
a51 1
   ctx->swtnl_context = tnl = calloc(1, sizeof(TNLcontext));
d78 1
a78 1
   tnl->Driver.NotifyMaterialChange = _tnl_validate_shine_tables;
a81 11
   /* Lighting miscellaneous */
   tnl->_ShineTabList = MALLOC_STRUCT( tnl_shine_tab );
   make_empty_list( tnl->_ShineTabList );
   /* Allocate 10 (arbitrary) shininess lookup tables */
   for (i = 0 ; i < 10 ; i++) {
      struct tnl_shine_tab *s = MALLOC_STRUCT( tnl_shine_tab );
      s->shininess = -1;
      s->refcount = 0;
      insert_at_tail( tnl->_ShineTabList, s );
   }

a94 1
   struct tnl_shine_tab *s, *tmps;
a96 6
   /* Free lighting shininess exponentiation table */
   foreach_s( s, tmps, tnl->_ShineTabList ) {
      free( s );
   }
   free( tnl->_ShineTabList );

d99 1
a99 1
   free(tnl);
d123 2
a124 1
   tnl->render_inputs_bitset = BITFIELD64_BIT(_TNL_ATTRIB_POS);
d126 2
a127 2
   if (!fp || (fp->Base.InputsRead & VARYING_BIT_COL0)) {
     tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_COLOR0);
d130 2
a131 2
   if (_mesa_need_secondary_color(ctx))
     tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_COLOR1);
d135 2
a136 2
	 (fp && fp->Base.InputsRead & VARYING_BIT_TEX(i))) {
       tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_TEX(i));
d140 9
a148 5
   if (ctx->Fog.Enabled
       || (fp != NULL && (fp->Base.InputsRead & VARYING_BIT_FOGC) != 0)) {
      /* Either fixed-function fog or a fragment program needs fog coord.
       */
      tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_FOG);
d153 1
a153 1
      tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_EDGEFLAG);
d156 1
a156 1
      tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_TEX0);
d158 3
a160 2
   if (ctx->Point._Attenuated || ctx->VertexProgram.PointSizeEnabled)
      tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_POINTSIZE);
d166 3
a168 2
	 if (vp->Base.OutputsWritten & BITFIELD64_BIT(VARYING_SLOT_VAR0 + i)) {
            tnl->render_inputs_bitset |= BITFIELD64_BIT(_TNL_ATTRIB_GENERIC(i));
@


1.1.1.6
log
@Import Mesa 10.2.3
@
text
@d25 1
a25 1
 *    Keith Whitwell <keithw@@vmware.com>
d96 1
a96 1
   vbo_set_draw_func(ctx, _tnl_draw_prims);
@


