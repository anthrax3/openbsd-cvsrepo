head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.5
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.5
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.4
	v9_2_3:1.1.1.4
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.4
	v9_2_0:1.1.1.4
	OPENBSD_5_4:1.3.0.8
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.54;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.22.20.06.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.33;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.32.18;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.49;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.05.13.17.41;	author jsg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.07.09.20.35.13;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2005  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keithw@@vmware.com>
 */


#ifndef POSTFIX
#define POSTFIX
#endif

#ifndef INIT
#define INIT(x)
#endif

#ifndef NEED_EDGEFLAG_SETUP
#define NEED_EDGEFLAG_SETUP 0
#define EDGEFLAG_GET(a) 0
#define EDGEFLAG_SET(a,b) (void)b
#endif

#ifndef RESET_STIPPLE
#define RESET_STIPPLE
#endif

#ifndef TEST_PRIM_END
#define TEST_PRIM_END(prim) (flags & PRIM_END)
#define TEST_PRIM_BEGIN(prim) (flags & PRIM_BEGIN)
#endif

#ifndef ELT
#define ELT(x) x
#endif

#ifndef RENDER_TAB_QUALIFIER
#define RENDER_TAB_QUALIFIER static
#endif

static void TAG(render_points)( struct gl_context *ctx,
				GLuint start,
				GLuint count,
				GLuint flags )
{
   LOCAL_VARS;
   (void) flags;

   INIT(GL_POINTS);
   RENDER_POINTS( start, count );
   POSTFIX;
}

static void TAG(render_lines)( struct gl_context *ctx,
			       GLuint start,
			       GLuint count,
			       GLuint flags )
{
   GLuint j;
   LOCAL_VARS;
   (void) flags;

   INIT(GL_LINES);
   for (j=start+1; j<count; j+=2 ) {
      RESET_STIPPLE;
      if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
         RENDER_LINE( ELT(j-1), ELT(j) );
      else
         RENDER_LINE( ELT(j), ELT(j-1) );
   }
   POSTFIX;
}


static void TAG(render_line_strip)( struct gl_context *ctx,
				    GLuint start,
				    GLuint count,
				    GLuint flags )
{
   GLuint j;
   LOCAL_VARS;
   (void) flags;

   INIT(GL_LINE_STRIP);

   if (TEST_PRIM_BEGIN(flags)) {
      RESET_STIPPLE;
   }

   for (j=start+1; j<count; j++ ) {
      if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
         RENDER_LINE( ELT(j-1), ELT(j) );
      else
         RENDER_LINE( ELT(j), ELT(j-1) );
   }
   POSTFIX;
}


static void TAG(render_line_loop)( struct gl_context *ctx,
				   GLuint start,
				   GLuint count,
				   GLuint flags )
{
   GLuint i;
   LOCAL_VARS;

   (void) flags;

   INIT(GL_LINE_LOOP);

   if (start+1 < count) {
      if (TEST_PRIM_BEGIN(flags)) {
	 RESET_STIPPLE;
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_LINE( ELT(start), ELT(start+1) );
         else
            RENDER_LINE( ELT(start+1), ELT(start) );
      }

      for ( i = start+2 ; i < count ; i++) {
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_LINE( ELT(i-1), ELT(i) );
         else
            RENDER_LINE( ELT(i), ELT(i-1) );
      }

      if ( TEST_PRIM_END(flags)) {
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_LINE( ELT(count-1), ELT(start) );
         else
            RENDER_LINE( ELT(start), ELT(count-1) );
      }
   }

   POSTFIX;
}


static void TAG(render_triangles)( struct gl_context *ctx,
				   GLuint start,
				   GLuint count,
				   GLuint flags )
{
   GLuint j;
   LOCAL_VARS;
   (void) flags;

   INIT(GL_TRIANGLES);
   if (NEED_EDGEFLAG_SETUP) {
      for (j=start+2; j<count; j+=3) {
	 /* Leave the edgeflags as supplied by the user.
	  */
	 RESET_STIPPLE;
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_TRI( ELT(j-2), ELT(j-1), ELT(j) );
         else
            RENDER_TRI( ELT(j-1), ELT(j), ELT(j-2) );
      }
   } else {
      for (j=start+2; j<count; j+=3) {
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_TRI( ELT(j-2), ELT(j-1), ELT(j) );
         else
            RENDER_TRI( ELT(j-1), ELT(j), ELT(j-2) );
      }
   }
   POSTFIX;
}



static void TAG(render_tri_strip)( struct gl_context *ctx,
				   GLuint start,
				   GLuint count,
				   GLuint flags )
{
   GLuint j;
   GLuint parity = 0;
   LOCAL_VARS;

   INIT(GL_TRIANGLE_STRIP);
   if (NEED_EDGEFLAG_SETUP) {
      for (j=start+2;j<count;j++,parity^=1) {
         GLuint ej2, ej1, ej;
         GLboolean ef2, ef1, ef;
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT) {
            ej2 = ELT(j-2+parity);
            ej1 = ELT(j-1-parity);
            ej = ELT(j);
         }
         else {
            ej2 = ELT(j-1+parity);
            ej1 = ELT(j-parity);
            ej = ELT(j-2);
         }
	 ef2 = EDGEFLAG_GET( ej2 );
	 ef1 = EDGEFLAG_GET( ej1 );
	 ef = EDGEFLAG_GET( ej );
	 if (TEST_PRIM_BEGIN(flags)) {
	    RESET_STIPPLE;
	 }
	 EDGEFLAG_SET( ej2, GL_TRUE );
	 EDGEFLAG_SET( ej1, GL_TRUE );
	 EDGEFLAG_SET( ej, GL_TRUE );
         RENDER_TRI( ej2, ej1, ej );
	 EDGEFLAG_SET( ej2, ef2 );
	 EDGEFLAG_SET( ej1, ef1 );
	 EDGEFLAG_SET( ej, ef );
      }
   } else {
      for (j=start+2; j<count ; j++, parity^=1) {
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_TRI( ELT(j-2+parity), ELT(j-1-parity), ELT(j) );
         else
            RENDER_TRI( ELT(j-1+parity), ELT(j-parity), ELT(j-2) );
      }
   }
   POSTFIX;
}


static void TAG(render_tri_fan)( struct gl_context *ctx,
				 GLuint start,
				 GLuint count,
				 GLuint flags )
{
   GLuint j;
   LOCAL_VARS;
   (void) flags;

   INIT(GL_TRIANGLE_FAN);
   if (NEED_EDGEFLAG_SETUP) {
      for (j=start+2;j<count;j++) {
	 /* For trifans, all edges are boundary.
	  */
	 GLuint ejs = ELT(start);
	 GLuint ej1 = ELT(j-1);
	 GLuint ej = ELT(j);
	 GLboolean efs = EDGEFLAG_GET( ejs );
	 GLboolean ef1 = EDGEFLAG_GET( ej1 );
	 GLboolean ef = EDGEFLAG_GET( ej );
	 if (TEST_PRIM_BEGIN(flags)) {
	    RESET_STIPPLE;
	 }
	 EDGEFLAG_SET( ejs, GL_TRUE );
	 EDGEFLAG_SET( ej1, GL_TRUE );
	 EDGEFLAG_SET( ej, GL_TRUE );
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_TRI( ejs, ej1, ej);
         else
            RENDER_TRI( ej, ejs, ej1);
	 EDGEFLAG_SET( ejs, efs );
	 EDGEFLAG_SET( ej1, ef1 );
	 EDGEFLAG_SET( ej, ef );
      }
   } else {
      for (j=start+2;j<count;j++) {
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_TRI( ELT(start), ELT(j-1), ELT(j) );
         else
            RENDER_TRI( ELT(j), ELT(start), ELT(j-1) );
      }
   }

   POSTFIX;
}


static void TAG(render_poly)( struct gl_context *ctx,
			      GLuint start,
			      GLuint count,
			      GLuint flags )
{
   GLuint j = start+2;
   LOCAL_VARS;
   (void) flags;

   INIT(GL_POLYGON);
   if (NEED_EDGEFLAG_SETUP) {
      GLboolean efstart = EDGEFLAG_GET( ELT(start) );
      GLboolean efcount = EDGEFLAG_GET( ELT(count-1) );

      /* If the primitive does not begin here, the first edge
       * is non-boundary.
       */
      if (!TEST_PRIM_BEGIN(flags))
	 EDGEFLAG_SET( ELT(start), GL_FALSE );
      else {
	 RESET_STIPPLE;
      }

      /* If the primitive does not end here, the final edge is
       * non-boundary.
       */
      if (!TEST_PRIM_END(flags))
	 EDGEFLAG_SET( ELT(count-1), GL_FALSE );

      /* Draw the first triangles (possibly zero)
       */
      if (j+1<count) {
	 GLboolean ef = EDGEFLAG_GET( ELT(j) );
	 EDGEFLAG_SET( ELT(j), GL_FALSE );
	 RENDER_TRI( ELT(j-1), ELT(j), ELT(start) );
	 EDGEFLAG_SET( ELT(j), ef );
	 j++;

	 /* Don't render the first edge again:
	  */
	 EDGEFLAG_SET( ELT(start), GL_FALSE );

	 for (;j+1<count;j++) {
	    GLboolean efj = EDGEFLAG_GET( ELT(j) );
	    EDGEFLAG_SET( ELT(j), GL_FALSE );
	    RENDER_TRI( ELT(j-1), ELT(j), ELT(start) );
	    EDGEFLAG_SET( ELT(j), efj );
	 }
      }

      /* Draw the last or only triangle
       */
      if (j < count)
	 RENDER_TRI( ELT(j-1), ELT(j), ELT(start) );

      /* Restore the first and last edgeflags:
       */
      EDGEFLAG_SET( ELT(count-1), efcount );
      EDGEFLAG_SET( ELT(start), efstart );

   }
   else {
      for (j=start+2;j<count;j++) {
	 RENDER_TRI( ELT(j-1), ELT(j), ELT(start) );
      }
   }
   POSTFIX;
}

static void TAG(render_quads)( struct gl_context *ctx,
			       GLuint start,
			       GLuint count,
			       GLuint flags )
{
   GLuint j;
   LOCAL_VARS;
   (void) flags;

   INIT(GL_QUADS);
   if (NEED_EDGEFLAG_SETUP) {
      for (j=start+3; j<count; j+=4) {
	 /* Use user-specified edgeflags for quads.
	  */
	 RESET_STIPPLE;
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT ||
             !ctx->Const.QuadsFollowProvokingVertexConvention)
            RENDER_QUAD( ELT(j-3), ELT(j-2), ELT(j-1), ELT(j) );
         else
            RENDER_QUAD( ELT(j-2), ELT(j-1), ELT(j), ELT(j-3) );
      }
   } else {
      for (j=start+3; j<count; j+=4) {
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT ||
             !ctx->Const.QuadsFollowProvokingVertexConvention)
            RENDER_QUAD( ELT(j-3), ELT(j-2), ELT(j-1), ELT(j) );
         else
            RENDER_QUAD( ELT(j-2), ELT(j-1), ELT(j), ELT(j-3) );
      }
   }
   POSTFIX;
}

static void TAG(render_quad_strip)( struct gl_context *ctx,
				    GLuint start,
				    GLuint count,
				    GLuint flags )
{
   GLuint j;
   LOCAL_VARS;
   (void) flags;

   INIT(GL_QUAD_STRIP);
   if (NEED_EDGEFLAG_SETUP) {
      for (j=start+3;j<count;j+=2) {
	 /* All edges are boundary.  Set edgeflags to 1, draw the
	  * quad, and restore them to the original values.
	  */
	 GLboolean ef3 = EDGEFLAG_GET( ELT(j-3) );
	 GLboolean ef2 = EDGEFLAG_GET( ELT(j-2) );
	 GLboolean ef1 = EDGEFLAG_GET( ELT(j-1) );
	 GLboolean ef = EDGEFLAG_GET( ELT(j) );
	 if (TEST_PRIM_BEGIN(flags)) {
	    RESET_STIPPLE;
	 }
	 EDGEFLAG_SET( ELT(j-3), GL_TRUE );
	 EDGEFLAG_SET( ELT(j-2), GL_TRUE );
	 EDGEFLAG_SET( ELT(j-1), GL_TRUE );
	 EDGEFLAG_SET( ELT(j), GL_TRUE );
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT ||
             !ctx->Const.QuadsFollowProvokingVertexConvention)
            RENDER_QUAD( ELT(j-1), ELT(j-3), ELT(j-2), ELT(j) );
         else
            RENDER_QUAD( ELT(j-2), ELT(j), ELT(j-1), ELT(j-3) );
	 EDGEFLAG_SET( ELT(j-3), ef3 );
	 EDGEFLAG_SET( ELT(j-2), ef2 );
	 EDGEFLAG_SET( ELT(j-1), ef1 );
	 EDGEFLAG_SET( ELT(j), ef );
      }
   } else {
      for (j=start+3;j<count;j+=2) {
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT ||
             !ctx->Const.QuadsFollowProvokingVertexConvention)
            RENDER_QUAD( ELT(j-1), ELT(j-3), ELT(j-2), ELT(j) );
         else
            RENDER_QUAD( ELT(j-2), ELT(j), ELT(j-1), ELT(j-3) );
      }
   }
   POSTFIX;
}

static void TAG(render_noop)( struct gl_context *ctx,
			      GLuint start,
			      GLuint count,
			      GLuint flags )
{
   (void)(ctx && start && count && flags);
}

RENDER_TAB_QUALIFIER void (*TAG(render_tab)[GL_POLYGON+2])(struct gl_context *,
							   GLuint,
							   GLuint,
							   GLuint) =
{
   TAG(render_points),
   TAG(render_lines),
   TAG(render_line_loop),
   TAG(render_line_strip),
   TAG(render_triangles),
   TAG(render_tri_strip),
   TAG(render_tri_fan),
   TAG(render_quads),
   TAG(render_quad_strip),
   TAG(render_poly),
   TAG(render_noop),
};



#ifndef PRESERVE_VB_DEFS
#undef RENDER_TRI
#undef RENDER_QUAD
#undef RENDER_LINE
#undef RENDER_POINTS
#undef LOCAL_VARS
#undef INIT
#undef POSTFIX
#undef RESET_STIPPLE
#undef DBG
#undef ELT
#undef RENDER_TAB_QUALIFIER
#endif

#ifndef PRESERVE_TAG
#undef TAG
#endif

#undef PRESERVE_VB_DEFS
#undef PRESERVE_TAG
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d25 1
a25 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
@


1.3
log
@Merge Mesa 7.10.3
@
text
@a2 1
 * Version:  6.5
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
@


1.2
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d60 1
a60 1
static void TAG(render_points)( GLcontext *ctx,
d73 1
a73 1
static void TAG(render_lines)( GLcontext *ctx,
d94 1
a94 1
static void TAG(render_line_strip)( GLcontext *ctx,
d119 1
a119 1
static void TAG(render_line_loop)( GLcontext *ctx,
d159 1
a159 1
static void TAG(render_triangles)( GLcontext *ctx,
d192 1
a192 1
static void TAG(render_tri_strip)( GLcontext *ctx,
d242 1
a242 1
static void TAG(render_tri_fan)( GLcontext *ctx,
d289 1
a289 1
static void TAG(render_poly)( GLcontext *ctx,
d358 1
a358 1
static void TAG(render_quads)( GLcontext *ctx,
d391 1
a391 1
static void TAG(render_quad_strip)( GLcontext *ctx,
d439 1
a439 1
static void TAG(render_noop)( GLcontext *ctx,
d447 1
a447 1
RENDER_TAB_QUALIFIER void (*TAG(render_tab)[GL_POLYGON+2])(GLcontext *,
@


1.1
log
@Initial revision
@
text
@d48 2
a49 2
#define TEST_PRIM_END(flags) (flags & PRIM_END)
#define TEST_PRIM_BEGIN(flags) (flags & PRIM_BEGIN)
d85 4
a88 1
      RENDER_LINE( ELT(j-1), ELT(j) );
d109 6
a114 3
   for (j=start+1; j<count; j++ )
      RENDER_LINE( ELT(j-1), ELT(j) );

d134 4
a137 1
	 RENDER_LINE( ELT(start), ELT(start+1) );
d141 4
a144 1
	 RENDER_LINE( ELT(i-1), ELT(i) );
d148 4
a151 1
	 RENDER_LINE( ELT(count-1), ELT(start) );
d174 4
a177 1
	 RENDER_TRI( ELT(j-2), ELT(j-1), ELT(j) );
d181 4
a184 1
	 RENDER_TRI( ELT(j-2), ELT(j-1), ELT(j) );
d204 15
a218 6
	 GLuint ej2 = ELT(j-2+parity);
	 GLuint ej1 = ELT(j-1-parity);
	 GLuint ej = ELT(j);
	 GLboolean ef2 = EDGEFLAG_GET( ej2 );
	 GLboolean ef1 = EDGEFLAG_GET( ej1 );
	 GLboolean ef = EDGEFLAG_GET( ej );
d225 1
a225 1
	 RENDER_TRI( ej2, ej1, ej );
d232 4
a235 1
	 RENDER_TRI( ELT(j-2+parity), ELT(j-1-parity), ELT(j) );
d268 4
a271 1
	 RENDER_TRI( ejs, ej1, ej);
d278 4
a281 1
	 RENDER_TRI( ELT(start), ELT(j-1), ELT(j) );
d373 5
a377 1
	 RENDER_QUAD( ELT(j-3), ELT(j-2), ELT(j-1), ELT(j) );
d381 5
a385 1
	 RENDER_QUAD( ELT(j-3), ELT(j-2), ELT(j-1), ELT(j) );
d417 5
a421 1
	 RENDER_QUAD( ELT(j-1), ELT(j-3), ELT(j-2), ELT(j) );
d429 5
a433 1
	 RENDER_QUAD( ELT(j-1), ELT(j-3), ELT(j-2), ELT(j) );
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Mesa 7.0.1
@
text
@d48 2
a49 2
#define TEST_PRIM_END(prim) (flags & PRIM_END)
#define TEST_PRIM_BEGIN(prim) (flags & PRIM_BEGIN)
@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@d60 1
a60 1
static void TAG(render_points)( struct gl_context *ctx,
d73 1
a73 1
static void TAG(render_lines)( struct gl_context *ctx,
d85 1
a85 4
      if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
         RENDER_LINE( ELT(j-1), ELT(j) );
      else
         RENDER_LINE( ELT(j), ELT(j-1) );
d91 1
a91 1
static void TAG(render_line_strip)( struct gl_context *ctx,
d106 3
a108 6
   for (j=start+1; j<count; j++ ) {
      if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
         RENDER_LINE( ELT(j-1), ELT(j) );
      else
         RENDER_LINE( ELT(j), ELT(j-1) );
   }
d113 1
a113 1
static void TAG(render_line_loop)( struct gl_context *ctx,
d128 1
a128 4
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_LINE( ELT(start), ELT(start+1) );
         else
            RENDER_LINE( ELT(start+1), ELT(start) );
d132 1
a132 4
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_LINE( ELT(i-1), ELT(i) );
         else
            RENDER_LINE( ELT(i), ELT(i-1) );
d136 1
a136 4
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_LINE( ELT(count-1), ELT(start) );
         else
            RENDER_LINE( ELT(start), ELT(count-1) );
d144 1
a144 1
static void TAG(render_triangles)( struct gl_context *ctx,
d159 1
a159 4
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_TRI( ELT(j-2), ELT(j-1), ELT(j) );
         else
            RENDER_TRI( ELT(j-1), ELT(j), ELT(j-2) );
d163 1
a163 4
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_TRI( ELT(j-2), ELT(j-1), ELT(j) );
         else
            RENDER_TRI( ELT(j-1), ELT(j), ELT(j-2) );
d171 1
a171 1
static void TAG(render_tri_strip)( struct gl_context *ctx,
d183 6
a188 15
         GLuint ej2, ej1, ej;
         GLboolean ef2, ef1, ef;
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT) {
            ej2 = ELT(j-2+parity);
            ej1 = ELT(j-1-parity);
            ej = ELT(j);
         }
         else {
            ej2 = ELT(j-1+parity);
            ej1 = ELT(j-parity);
            ej = ELT(j-2);
         }
	 ef2 = EDGEFLAG_GET( ej2 );
	 ef1 = EDGEFLAG_GET( ej1 );
	 ef = EDGEFLAG_GET( ej );
d195 1
a195 1
         RENDER_TRI( ej2, ej1, ej );
d202 1
a202 4
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_TRI( ELT(j-2+parity), ELT(j-1-parity), ELT(j) );
         else
            RENDER_TRI( ELT(j-1+parity), ELT(j-parity), ELT(j-2) );
d209 1
a209 1
static void TAG(render_tri_fan)( struct gl_context *ctx,
d235 1
a235 4
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_TRI( ejs, ej1, ej);
         else
            RENDER_TRI( ej, ejs, ej1);
d242 1
a242 4
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT)
            RENDER_TRI( ELT(start), ELT(j-1), ELT(j) );
         else
            RENDER_TRI( ELT(j), ELT(start), ELT(j-1) );
d250 1
a250 1
static void TAG(render_poly)( struct gl_context *ctx,
d319 1
a319 1
static void TAG(render_quads)( struct gl_context *ctx,
d334 1
a334 5
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT ||
             !ctx->Const.QuadsFollowProvokingVertexConvention)
            RENDER_QUAD( ELT(j-3), ELT(j-2), ELT(j-1), ELT(j) );
         else
            RENDER_QUAD( ELT(j-2), ELT(j-1), ELT(j), ELT(j-3) );
d338 1
a338 5
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT ||
             !ctx->Const.QuadsFollowProvokingVertexConvention)
            RENDER_QUAD( ELT(j-3), ELT(j-2), ELT(j-1), ELT(j) );
         else
            RENDER_QUAD( ELT(j-2), ELT(j-1), ELT(j), ELT(j-3) );
d344 1
a344 1
static void TAG(render_quad_strip)( struct gl_context *ctx,
d370 1
a370 5
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT ||
             !ctx->Const.QuadsFollowProvokingVertexConvention)
            RENDER_QUAD( ELT(j-1), ELT(j-3), ELT(j-2), ELT(j) );
         else
            RENDER_QUAD( ELT(j-2), ELT(j), ELT(j-1), ELT(j-3) );
d378 1
a378 5
         if (ctx->Light.ProvokingVertex == GL_LAST_VERTEX_CONVENTION_EXT ||
             !ctx->Const.QuadsFollowProvokingVertexConvention)
            RENDER_QUAD( ELT(j-1), ELT(j-3), ELT(j-2), ELT(j) );
         else
            RENDER_QUAD( ELT(j-2), ELT(j), ELT(j-1), ELT(j-3) );
d384 1
a384 1
static void TAG(render_noop)( struct gl_context *ctx,
d392 1
a392 1
RENDER_TAB_QUALIFIER void (*TAG(render_tab)[GL_POLYGON+2])(struct gl_context *,
@


1.1.1.4
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
@


1.1.1.5
log
@Import Mesa 10.2.3
@
text
@d25 1
a25 1
 *    Keith Whitwell <keithw@@vmware.com>
@


