head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.7
	v10_4_3:1.1.1.6
	v10_2_7:1.1.1.5
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.5
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.4
	v9_2_3:1.1.1.4
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.4
	v9_2_0:1.1.1.4
	OPENBSD_5_4:1.3.0.8
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.12
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.10
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.8
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.6
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.4
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.06.53;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.32;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.32;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.53;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.49;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.05.13.17.38;	author jsg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.07.09.20.35.13;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.6
date	2015.01.25.14.13.33;	author jsg;	state Exp;
branches;
next	1.1.1.7;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.7
date	2015.02.20.22.50.38;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keithw@@vmware.com>
 */


#define CLIP_DOTPROD(K, A, B, C, D) X(K)*A + Y(K)*B + Z(K)*C + W(K)*D

#define POLY_CLIP( PLANE_BIT, A, B, C, D )				\
do {									\
   if (mask & PLANE_BIT) {						\
      GLuint idxPrev = inlist[0];					\
      GLfloat dpPrev = CLIP_DOTPROD(idxPrev, A, B, C, D );		\
      GLuint outcount = 0;						\
      GLuint i;								\
									\
      inlist[n] = inlist[0]; /* prevent rotation of vertices */		\
      for (i = 1; i <= n; i++) {					\
	 GLuint idx = inlist[i];					\
	 GLfloat dp = CLIP_DOTPROD(idx, A, B, C, D );			\
									\
	 if (!IS_NEGATIVE(dpPrev)) {					\
	    outlist[outcount++] = idxPrev;				\
	 }								\
									\
	 if (DIFFERENT_SIGNS(dp, dpPrev)) {				\
	    if (IS_NEGATIVE(dp)) {					\
	       /* Going out of bounds.  Avoid division by zero as we	\
		* know dp != dpPrev from DIFFERENT_SIGNS, above.	\
		*/							\
	       GLfloat t = dp / (dp - dpPrev);				\
               INTERP_4F( t, coord[newvert], coord[idx], coord[idxPrev]); \
      	       interp( ctx, t, newvert, idx, idxPrev, GL_TRUE );	\
	    } else {							\
	       /* Coming back in.					\
		*/							\
	       GLfloat t = dpPrev / (dpPrev - dp);			\
               INTERP_4F( t, coord[newvert], coord[idxPrev], coord[idx]); \
	       interp( ctx, t, newvert, idxPrev, idx, GL_FALSE );	\
	    }								\
            outlist[outcount++] = newvert++;				\
	 }								\
									\
	 idxPrev = idx;							\
	 dpPrev = dp;							\
      }									\
									\
      if (outcount < 3)							\
	 return;							\
									\
      {									\
	 GLuint *tmp = inlist;						\
	 inlist = outlist;						\
	 outlist = tmp;							\
	 n = outcount;							\
      }									\
   }									\
} while (0)


#define LINE_CLIP(PLANE_BIT, A, B, C, D )				\
do {									\
   if (mask & PLANE_BIT) {						\
      const GLfloat dp0 = CLIP_DOTPROD( v0, A, B, C, D );		\
      const GLfloat dp1 = CLIP_DOTPROD( v1, A, B, C, D );		\
      const GLboolean neg_dp0 = IS_NEGATIVE(dp0);			\
      const GLboolean neg_dp1 = IS_NEGATIVE(dp1);			\
      									\
      /* For regular clipping, we know from the clipmask that one	\
       * (or both) of these must be negative (otherwise we wouldn't	\
       * be here).							\
       * For userclip, there is only a single bit for all active	\
       * planes, so we can end up here when there is nothing to do,	\
       * hence the second IS_NEGATIVE() test:				\
       */								\
      if (neg_dp0 && neg_dp1)						\
         return; /* both vertices outside clip plane: discard */	\
									\
      if (neg_dp1) {							\
	 GLfloat t = dp1 / (dp1 - dp0);					\
	 if (t > t1) t1 = t;						\
      } else if (neg_dp0) {						\
	 GLfloat t = dp0 / (dp0 - dp1);					\
	 if (t > t0) t0 = t;						\
      }									\
      if (t0 + t1 >= 1.0)						\
	 return; /* discard */						\
   }									\
} while (0)



/* Clip a line against the viewport and user clip planes.
 */
static inline void
TAG(clip_line)( struct gl_context *ctx, GLuint v0, GLuint v1, GLubyte mask )
{
   TNLcontext *tnl = TNL_CONTEXT(ctx);
   struct vertex_buffer *VB = &tnl->vb;
   tnl_interp_func interp = tnl->Driver.Render.Interp;
   GLfloat (*coord)[4] = VB->ClipPtr->data;
   GLuint newvert = VB->Count;
   GLfloat t0 = 0;
   GLfloat t1 = 0;
   GLuint p;
   const GLuint v0_orig = v0;

   if (mask & CLIP_FRUSTUM_BITS) {
      LINE_CLIP( CLIP_RIGHT_BIT,  -1,  0,  0, 1 );
      LINE_CLIP( CLIP_LEFT_BIT,    1,  0,  0, 1 );
      LINE_CLIP( CLIP_TOP_BIT,     0, -1,  0, 1 );
      LINE_CLIP( CLIP_BOTTOM_BIT,  0,  1,  0, 1 );
      LINE_CLIP( CLIP_FAR_BIT,     0,  0, -1, 1 );
      LINE_CLIP( CLIP_NEAR_BIT,    0,  0,  1, 1 );
   }

   if (mask & CLIP_USER_BIT) {
      for (p = 0; p < ctx->Const.MaxClipPlanes; p++) {
	 if (ctx->Transform.ClipPlanesEnabled & (1 << p)) {
            const GLfloat a = ctx->Transform._ClipUserPlane[p][0];
            const GLfloat b = ctx->Transform._ClipUserPlane[p][1];
            const GLfloat c = ctx->Transform._ClipUserPlane[p][2];
            const GLfloat d = ctx->Transform._ClipUserPlane[p][3];
	    LINE_CLIP( CLIP_USER_BIT, a, b, c, d );
	 }
      }
   }

   if (VB->ClipMask[v0]) {
      INTERP_4F( t0, coord[newvert], coord[v0], coord[v1] );
      interp( ctx, t0, newvert, v0, v1, GL_FALSE );
      v0 = newvert;
      newvert++;
   }
   else {
      ASSERT(t0 == 0.0);
   }

   /* Note: we need to use vertex v0_orig when computing the new
    * interpolated/clipped vertex position, not the current v0 which
    * may have got set when we clipped the other end of the line!
    */
   if (VB->ClipMask[v1]) {
      INTERP_4F( t1, coord[newvert], coord[v1], coord[v0_orig] );
      interp( ctx, t1, newvert, v1, v0_orig, GL_FALSE );

      if (ctx->Light.ShadeModel == GL_FLAT)
	 tnl->Driver.Render.CopyPV( ctx, newvert, v1 );

      v1 = newvert;

      newvert++;
   }
   else {
      ASSERT(t1 == 0.0);
   }

   tnl->Driver.Render.ClippedLine( ctx, v0, v1 );
}


/* Clip a triangle against the viewport and user clip planes.
 */
static inline void
TAG(clip_tri)( struct gl_context *ctx, GLuint v0, GLuint v1, GLuint v2, GLubyte mask )
{
   TNLcontext *tnl = TNL_CONTEXT(ctx);
   struct vertex_buffer *VB = &tnl->vb;
   tnl_interp_func interp = tnl->Driver.Render.Interp;
   GLuint newvert = VB->Count;
   GLfloat (*coord)[4] = VB->ClipPtr->data;
   GLuint pv = v2;
   GLuint vlist[2][MAX_CLIPPED_VERTICES];
   GLuint *inlist = vlist[0], *outlist = vlist[1];
   GLuint p;
   GLuint n = 3;

   ASSIGN_3V(inlist, v2, v0, v1 ); /* pv rotated to slot zero */

   if (0) {
      /* print pre-clip vertex coords */
      GLuint i, j;
      printf("pre clip:\n");
      for (i = 0; i < n; i++) {
         j = inlist[i];
         printf("  %u: %u: %f, %f, %f, %f\n",
		i, j,
		coord[j][0], coord[j][1], coord[j][2], coord[j][3]);
         assert(!IS_INF_OR_NAN(coord[j][0]));
         assert(!IS_INF_OR_NAN(coord[j][1]));
         assert(!IS_INF_OR_NAN(coord[j][2]));
         assert(!IS_INF_OR_NAN(coord[j][3]));
      }
   }


   if (mask & CLIP_FRUSTUM_BITS) {
      POLY_CLIP( CLIP_RIGHT_BIT,  -1,  0,  0, 1 );
      POLY_CLIP( CLIP_LEFT_BIT,    1,  0,  0, 1 );
      POLY_CLIP( CLIP_TOP_BIT,     0, -1,  0, 1 );
      POLY_CLIP( CLIP_BOTTOM_BIT,  0,  1,  0, 1 );
      POLY_CLIP( CLIP_FAR_BIT,     0,  0, -1, 1 );
      POLY_CLIP( CLIP_NEAR_BIT,    0,  0,  1, 1 );
   }

   if (mask & CLIP_USER_BIT) {
      for (p = 0; p < ctx->Const.MaxClipPlanes; p++) {
         if (ctx->Transform.ClipPlanesEnabled & (1 << p)) {
            const GLfloat a = ctx->Transform._ClipUserPlane[p][0];
            const GLfloat b = ctx->Transform._ClipUserPlane[p][1];
            const GLfloat c = ctx->Transform._ClipUserPlane[p][2];
            const GLfloat d = ctx->Transform._ClipUserPlane[p][3];
            POLY_CLIP( CLIP_USER_BIT, a, b, c, d );
         }
      }
   }

   if (ctx->Light.ShadeModel == GL_FLAT) {
      if (pv != inlist[0]) {
	 ASSERT( inlist[0] >= VB->Count );
	 tnl->Driver.Render.CopyPV( ctx, inlist[0], pv );
      }
   }

   if (0) {
      /* print post-clip vertex coords */
      GLuint i, j;
      printf("post clip:\n");
      for (i = 0; i < n; i++) {
         j = inlist[i];
         printf("  %u: %u: %f, %f, %f, %f\n",
		i, j,
		coord[j][0], coord[j][1], coord[j][2], coord[j][3]);
      }
   }

   tnl->Driver.Render.ClippedPolygon( ctx, inlist, n );
}


/* Clip a quad against the viewport and user clip planes.
 */
static inline void
TAG(clip_quad)( struct gl_context *ctx, GLuint v0, GLuint v1, GLuint v2, GLuint v3,
                GLubyte mask )
{
   TNLcontext *tnl = TNL_CONTEXT(ctx);
   struct vertex_buffer *VB = &tnl->vb;
   tnl_interp_func interp = tnl->Driver.Render.Interp;
   GLuint newvert = VB->Count;
   GLfloat (*coord)[4] = VB->ClipPtr->data;
   GLuint pv = v3;
   GLuint vlist[2][MAX_CLIPPED_VERTICES];
   GLuint *inlist = vlist[0], *outlist = vlist[1];
   GLuint p;
   GLuint n = 4;

   ASSIGN_4V(inlist, v3, v0, v1, v2 ); /* pv rotated to slot zero */

   if (mask & CLIP_FRUSTUM_BITS) {
      POLY_CLIP( CLIP_RIGHT_BIT,  -1,  0,  0, 1 );
      POLY_CLIP( CLIP_LEFT_BIT,    1,  0,  0, 1 );
      POLY_CLIP( CLIP_TOP_BIT,     0, -1,  0, 1 );
      POLY_CLIP( CLIP_BOTTOM_BIT,  0,  1,  0, 1 );
      POLY_CLIP( CLIP_FAR_BIT,     0,  0, -1, 1 );
      POLY_CLIP( CLIP_NEAR_BIT,    0,  0,  1, 1 );
   }

   if (mask & CLIP_USER_BIT) {
      for (p = 0; p < ctx->Const.MaxClipPlanes; p++) {
	 if (ctx->Transform.ClipPlanesEnabled & (1 << p)) {
            const GLfloat a = ctx->Transform._ClipUserPlane[p][0];
            const GLfloat b = ctx->Transform._ClipUserPlane[p][1];
            const GLfloat c = ctx->Transform._ClipUserPlane[p][2];
            const GLfloat d = ctx->Transform._ClipUserPlane[p][3];
	    POLY_CLIP( CLIP_USER_BIT, a, b, c, d );
	 }
      }
   }

   if (ctx->Light.ShadeModel == GL_FLAT) {
      if (pv != inlist[0]) {
	 ASSERT( inlist[0] >= VB->Count );
	 tnl->Driver.Render.CopyPV( ctx, inlist[0], pv );
      }
   }

   tnl->Driver.Render.ClippedPolygon( ctx, inlist, n );
}

#undef W
#undef Z
#undef Y
#undef X
#undef SIZE
#undef TAG
#undef POLY_CLIP
#undef LINE_CLIP
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d44 1
a44 1
	 if (dpPrev >= 0.0f) {						\
d49 1
a49 1
	    if (dp < 0.0f) {						\
d88 2
a89 2
      const GLboolean neg_dp0 = dp0 < 0.0f;				\
      const GLboolean neg_dp1 = dp1 < 0.0f;				\
d96 1
a96 1
       * hence the second < 0.0f test:					\
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d44 1
a44 1
	 if (!IS_NEGATIVE(dpPrev)) {					\
d49 1
a49 1
	    if (IS_NEGATIVE(dp)) {					\
d88 2
a89 2
      const GLboolean neg_dp0 = IS_NEGATIVE(dp0);			\
      const GLboolean neg_dp1 = IS_NEGATIVE(dp1);			\
d96 1
a96 1
       * hence the second IS_NEGATIVE() test:				\
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d25 1
a25 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
@


1.3
log
@Merge Mesa 7.10.3
@
text
@a2 1
 * Version:  6.5.2
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d117 1
a117 1
static INLINE void
d186 1
a186 1
static INLINE void
d265 1
a265 1
static INLINE void
@


1.2
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d118 1
a118 1
TAG(clip_line)( GLcontext *ctx, GLuint v0, GLuint v1, GLubyte mask )
d187 1
a187 1
TAG(clip_tri)( GLcontext *ctx, GLuint v0, GLuint v1, GLuint v2, GLubyte mask )
d266 1
a266 1
TAG(clip_quad)( GLcontext *ctx, GLuint v0, GLuint v1, GLuint v2, GLuint v3,
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.5.1
d128 1
d130 1
a130 1
   if (mask & 0x3f) {
d157 1
a157 1
   else
d159 1
d161 4
d166 2
a167 2
      INTERP_4F( t1, coord[newvert], coord[v1], coord[v0] );
      interp( ctx, t1, newvert, v1, v0, GL_FALSE );
d176 1
a176 1
   else
d178 1
d202 18
a219 1
   if (mask & 0x3f) {
d247 12
d282 1
a282 1
   if (mask & 0x3f) {
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d3 1
a3 1
 * Version:  6.5.2
a127 1
   const GLuint v0_orig = v0;
d156 1
a156 1
   else {
a157 1
   }
a158 4
   /* Note: we need to use vertex v0_orig when computing the new
    * interpolated/clipped vertex position, not the current v0 which
    * may have got set when we clipped the other end of the line!
    */
d160 2
a161 2
      INTERP_4F( t1, coord[newvert], coord[v1], coord[v0_orig] );
      interp( ctx, t1, newvert, v1, v0_orig, GL_FALSE );
d170 1
a170 1
   else {
a171 1
   }
@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@d118 1
a118 1
TAG(clip_line)( struct gl_context *ctx, GLuint v0, GLuint v1, GLubyte mask )
d130 1
a130 1
   if (mask & CLIP_FRUSTUM_BITS) {
d187 1
a187 1
TAG(clip_tri)( struct gl_context *ctx, GLuint v0, GLuint v1, GLuint v2, GLubyte mask )
d202 1
a202 18
   if (0) {
      /* print pre-clip vertex coords */
      GLuint i, j;
      printf("pre clip:\n");
      for (i = 0; i < n; i++) {
         j = inlist[i];
         printf("  %u: %u: %f, %f, %f, %f\n",
		i, j,
		coord[j][0], coord[j][1], coord[j][2], coord[j][3]);
         assert(!IS_INF_OR_NAN(coord[j][0]));
         assert(!IS_INF_OR_NAN(coord[j][1]));
         assert(!IS_INF_OR_NAN(coord[j][2]));
         assert(!IS_INF_OR_NAN(coord[j][3]));
      }
   }


   if (mask & CLIP_FRUSTUM_BITS) {
a229 12
   if (0) {
      /* print post-clip vertex coords */
      GLuint i, j;
      printf("post clip:\n");
      for (i = 0; i < n; i++) {
         j = inlist[i];
         printf("  %u: %u: %f, %f, %f, %f\n",
		i, j,
		coord[j][0], coord[j][1], coord[j][2], coord[j][3]);
      }
   }

d237 1
a237 1
TAG(clip_quad)( struct gl_context *ctx, GLuint v0, GLuint v1, GLuint v2, GLuint v3,
d253 1
a253 1
   if (mask & CLIP_FRUSTUM_BITS) {
@


1.1.1.4
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d117 1
a117 1
static inline void
d186 1
a186 1
static inline void
d265 1
a265 1
static inline void
@


1.1.1.5
log
@Import Mesa 10.2.3
@
text
@d25 1
a25 1
 *    Keith Whitwell <keithw@@vmware.com>
@


1.1.1.6
log
@Import Mesa 10.4.3
@
text
@d44 1
a44 1
	 if (dpPrev >= 0.0f) {						\
d49 1
a49 1
	    if (dp < 0.0f) {						\
d88 2
a89 2
      const GLboolean neg_dp0 = dp0 < 0.0f;				\
      const GLboolean neg_dp1 = dp1 < 0.0f;				\
d96 1
a96 1
       * hence the second < 0.0f test:					\
@


1.1.1.7
log
@Import Mesa 10.2.9
@
text
@d44 1
a44 1
	 if (!IS_NEGATIVE(dpPrev)) {					\
d49 1
a49 1
	    if (IS_NEGATIVE(dp)) {					\
d88 2
a89 2
      const GLboolean neg_dp0 = IS_NEGATIVE(dp0);			\
      const GLboolean neg_dp1 = IS_NEGATIVE(dp1);			\
d96 1
a96 1
       * hence the second IS_NEGATIVE() test:				\
@


