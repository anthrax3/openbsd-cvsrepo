head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.12
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.8
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2013.09.05.14.06.53;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.14.58.23;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.49;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.36;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@INTRODUCTION

A generic, configurable software implementation of GL transformation &
lighting.

This module provides an implementation of the routines required by the
'vtxfmt' mechanism of core mesa for tnl functionality in all
combinations of compile and execute modes.

Most current drivers use the tnl module exclusively to provide this
functionality.


STATE

To create and destroy the module:

	GLboolean _tnl_CreateContext( struct gl_context *ctx );
	void _tnl_DestroyContext( struct gl_context *ctx );

The module is not active by default, and must be installed by calling
_tnl_Wakeup().  This function installs internal tnl functions into all
the vtxfmt dispatch hooks, thus taking over the task of transformation
and lighting entirely:

        void _tnl_wakeup_exec( struct gl_context *ctx );
	void _tnl_wakeup_save_exec( struct gl_context *ctx );

   
This module tracks state changes internally and maintains derived
values based on the current state.  For this to work, the driver
ensure the following funciton is called whenever the state changes and
the swsetup module is 'awake':

	void _tnl_InvalidateState( struct gl_context *ctx, GLuint new_state );

There is no explicit call to put the tnl module to sleep.  Simply
install other function pointers into all the vtxfmt dispatch slots,
and (optionally) cease calling _tnl_InvalidateState().

CUSTOMIZATION

The module provides customizability through several mechanisms.  The
most important is by allowing drivers to specify the pipeline through
which vertex data is passed, including its eventual transfer to
rasterization hardware (or software).

The default pipeline is specified in t_pipeline.c, and is usually a
starting point for driver pipelines.  Some drivers will remove a stage
where hardware provides support for the implemented operation (for
instance fog where per-pixel hardware fog is available),
or add stages to shortcircuit latter operations (for
example taking advantage of hardware support for strips and other
higher-level primitives (for example the radeon driver).

In addition, the following functions provide further tweaks:

extern void
_tnl_need_projected_coords( struct gl_context *ctx, GLboolean flag );

	- Direct the default vertex transformation stage to
          produce/not produce projected clip coordinates.
	  
extern void
_tnl_need_dlist_loopback( struct gl_context *ctx, GLboolean flag );
      
        - Direct the display list component of the tnl module to
          replay display lists as 'glVertex' type calls, rather than
          passing the display list data directly into the tnl pipeline
          mechanism.  

	  This allows display lists to be replayed by the tnl module
	  even when the module is not strictly active.


extern void
_tnl_need_dlist_norm_lengths( struct gl_context *ctx, GLboolean flag );

	- Direct the display list component to enable/disable caching
          1/length values for display list normals.  Doing so is
          ususally helpful when lighting is performed in software, but
          wasteful otherwise.


DRIVER INTERFACE

The module itself offers a minimal driver interface:

	 void (*RunPipeline)( struct gl_context *ctx );

Normally this is set to _tnl_RunPipeline(), however the driver can use
this hook to wrap checks or other code around this call. 

In addition, the driver interface for the default render pipeline
stage is housed in the tnl context struct (this could be cleaner).  


RENDER DRIVER INTERFACE

See t_context.h for the definition and explanation of this.@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d11 1
a11 3
functionality, though there is an experimental alternate
implementation provided by the tnl_dd/t_dd_imm_* files which can
handle a small subset of GL states in execute mode only.
d51 2
a52 2
instance fog where per-pixel hardware fog is available, as in the dri
tdfx driver), or add stages to shortcircuit latter operations (for
@


1.1
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d20 2
a21 2
	GLboolean _tnl_CreateContext( GLcontext *ctx );
	void _tnl_DestroyContext( GLcontext *ctx );
d28 2
a29 2
        void _tnl_wakeup_exec( GLcontext *ctx );
	void _tnl_wakeup_save_exec( GLcontext *ctx );
d37 1
a37 1
	void _tnl_InvalidateState( GLcontext *ctx, GLuint new_state );
d61 1
a61 1
_tnl_need_projected_coords( GLcontext *ctx, GLboolean flag );
d67 1
a67 1
_tnl_need_dlist_loopback( GLcontext *ctx, GLboolean flag );
d79 1
a79 1
_tnl_need_dlist_norm_lengths( GLcontext *ctx, GLboolean flag );
d91 1
a91 1
	 void (*RunPipeline)( GLcontext *ctx );
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d20 2
a21 2
	GLboolean _tnl_CreateContext( struct gl_context *ctx );
	void _tnl_DestroyContext( struct gl_context *ctx );
d28 2
a29 2
        void _tnl_wakeup_exec( struct gl_context *ctx );
	void _tnl_wakeup_save_exec( struct gl_context *ctx );
d37 1
a37 1
	void _tnl_InvalidateState( struct gl_context *ctx, GLuint new_state );
d61 1
a61 1
_tnl_need_projected_coords( struct gl_context *ctx, GLboolean flag );
d67 1
a67 1
_tnl_need_dlist_loopback( struct gl_context *ctx, GLboolean flag );
d79 1
a79 1
_tnl_need_dlist_norm_lengths( struct gl_context *ctx, GLboolean flag );
d91 1
a91 1
	 void (*RunPipeline)( struct gl_context *ctx );
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d11 3
a13 1
functionality.
d53 2
a54 2
instance fog where per-pixel hardware fog is available),
or add stages to shortcircuit latter operations (for
@


