head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.06.38;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.07;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.08;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.13.09;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.50.16;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/


#include "main/glheader.h"
#include "main/mtypes.h"
#include "main/imports.h"
#include "main/shaderobj.h"
#include "program/prog_cache.h"
#include "program/program.h"


struct cache_item
{
   GLuint hash;
   unsigned keysize;
   void *key;
   struct gl_program *program;
   struct cache_item *next;
};

struct gl_program_cache
{
   struct cache_item **items;
   struct cache_item *last;
   GLuint size, n_items;
};



/**
 * Compute hash index from state key.
 */
static GLuint
hash_key(const void *key, GLuint key_size)
{
   const GLuint *ikey = (const GLuint *) key;
   GLuint hash = 0, i;

   assert(key_size >= 4);

   /* Make a slightly better attempt at a hash function:
    */
   for (i = 0; i < key_size / sizeof(*ikey); i++)
   {
      hash += ikey[i];
      hash += (hash << 10);
      hash ^= (hash >> 6);
   }

   return hash;
}


/**
 * Rebuild/expand the hash table to accomodate more entries
 */
static void
rehash(struct gl_program_cache *cache)
{
   struct cache_item **items;
   struct cache_item *c, *next;
   GLuint size, i;

   cache->last = NULL;

   size = cache->size * 3;
   items = malloc(size * sizeof(*items));
   memset(items, 0, size * sizeof(*items));

   for (i = 0; i < cache->size; i++)
      for (c = cache->items[i]; c; c = next) {
	 next = c->next;
	 c->next = items[c->hash % size];
	 items[c->hash % size] = c;
      }

   free(cache->items);
   cache->items = items;
   cache->size = size;
}


static void
clear_cache(struct gl_context *ctx, struct gl_program_cache *cache,
	    GLboolean shader)
{
   struct cache_item *c, *next;
   GLuint i;
   
   cache->last = NULL;

   for (i = 0; i < cache->size; i++) {
      for (c = cache->items[i]; c; c = next) {
	 next = c->next;
	 free(c->key);
	 if (shader) {
	    _mesa_reference_shader_program(ctx,
					   (struct gl_shader_program **)&c->program,
					   NULL);
	 } else {
	    _mesa_reference_program(ctx, &c->program, NULL);
	 }
	 free(c);
      }
      cache->items[i] = NULL;
   }


   cache->n_items = 0;
}



struct gl_program_cache *
_mesa_new_program_cache(void)
{
   struct gl_program_cache *cache = CALLOC_STRUCT(gl_program_cache);
   if (cache) {
      cache->size = 17;
      cache->items =
         calloc(1, cache->size * sizeof(struct cache_item));
      if (!cache->items) {
         free(cache);
         return NULL;
      }
   }
   return cache;
}


void
_mesa_delete_program_cache(struct gl_context *ctx, struct gl_program_cache *cache)
{
   clear_cache(ctx, cache, GL_FALSE);
   free(cache->items);
   free(cache);
}

void
_mesa_delete_shader_cache(struct gl_context *ctx,
			  struct gl_program_cache *cache)
{
   clear_cache(ctx, cache, GL_TRUE);
   free(cache->items);
   free(cache);
}


struct gl_program *
_mesa_search_program_cache(struct gl_program_cache *cache,
                           const void *key, GLuint keysize)
{
   if (cache->last &&
       cache->last->keysize == keysize &&
       memcmp(cache->last->key, key, keysize) == 0) {
      return cache->last->program;
   }
   else {
      const GLuint hash = hash_key(key, keysize);
      struct cache_item *c;

      for (c = cache->items[hash % cache->size]; c; c = c->next) {
         if (c->hash == hash &&
             c->keysize == keysize &&
             memcmp(c->key, key, keysize) == 0) {

            cache->last = c;
            return c->program;
         }
      }

      return NULL;
   }
}


void
_mesa_program_cache_insert(struct gl_context *ctx,
                           struct gl_program_cache *cache,
                           const void *key, GLuint keysize,
                           struct gl_program *program)
{
   const GLuint hash = hash_key(key, keysize);
   struct cache_item *c = CALLOC_STRUCT(cache_item);

   c->hash = hash;

   c->key = malloc(keysize);
   memcpy(c->key, key, keysize);
   c->keysize = keysize;

   c->program = program;  /* no refcount change */

   if (cache->n_items > cache->size * 1.5) {
      if (cache->size < 1000)
	 rehash(cache);
      else 
	 clear_cache(ctx, cache, GL_FALSE);
   }

   cache->n_items++;
   c->next = cache->items[hash % cache->size];
   cache->items[hash % cache->size] = c;
}

void
_mesa_shader_cache_insert(struct gl_context *ctx,
			  struct gl_program_cache *cache,
			  const void *key, GLuint keysize,
			  struct gl_shader_program *program)
{
   const GLuint hash = hash_key(key, keysize);
   struct cache_item *c = CALLOC_STRUCT(cache_item);

   c->hash = hash;

   c->key = malloc(keysize);
   memcpy(c->key, key, keysize);
   c->keysize = keysize;

   c->program = (struct gl_program *)program;  /* no refcount change */

   if (cache->n_items > cache->size * 1.5) {
      if (cache->size < 1000)
	 rehash(cache);
      else
	 clear_cache(ctx, cache, GL_TRUE);
   }

   cache->n_items++;
   c->next = cache->items[hash % cache->size];
   cache->items[hash % cache->size] = c;
}
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d146 1
a146 1
         calloc(cache->size, sizeof(struct cache_item *));
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d146 1
a146 1
         calloc(1, cache->size * sizeof(struct cache_item));
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d40 1
d92 1
a92 1
   items = (struct cache_item**) malloc(size * sizeof(*items));
d145 1
a145 1
      cache->items = (struct cache_item **)
d178 2
a179 1
   if (cache->last && 
d188 4
a191 1
         if (c->hash == hash && memcmp(c->key, key, keysize) == 0) {
d215 1
d244 1
@


1.1
log
@Initial revision
@
text
@d32 1
d108 2
a109 1
clear_cache(struct gl_context *ctx, struct gl_program_cache *cache)
d120 7
a126 1
         _mesa_reference_program(ctx, &c->program, NULL);
d158 10
a167 1
   clear_cache(ctx, cache);
d217 29
a245 1
	 clear_cache(ctx, cache);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a31 1
#include "main/shaderobj.h"
a38 1
   unsigned keysize;
d90 1
a90 1
   items = malloc(size * sizeof(*items));
d107 1
a107 2
clear_cache(struct gl_context *ctx, struct gl_program_cache *cache,
	    GLboolean shader)
d118 1
a118 7
	 if (shader) {
	    _mesa_reference_shader_program(ctx,
					   (struct gl_shader_program **)&c->program,
					   NULL);
	 } else {
	    _mesa_reference_program(ctx, &c->program, NULL);
	 }
d136 1
a136 1
      cache->items =
d150 1
a150 10
   clear_cache(ctx, cache, GL_FALSE);
   free(cache->items);
   free(cache);
}

void
_mesa_delete_shader_cache(struct gl_context *ctx,
			  struct gl_program_cache *cache)
{
   clear_cache(ctx, cache, GL_TRUE);
d160 1
a160 2
   if (cache->last &&
       cache->last->keysize == keysize &&
d169 1
a169 4
         if (c->hash == hash &&
             c->keysize == keysize &&
             memcmp(c->key, key, keysize) == 0) {

a192 1
   c->keysize = keysize;
d200 1
a200 30
	 clear_cache(ctx, cache, GL_FALSE);
   }

   cache->n_items++;
   c->next = cache->items[hash % cache->size];
   cache->items[hash % cache->size] = c;
}

void
_mesa_shader_cache_insert(struct gl_context *ctx,
			  struct gl_program_cache *cache,
			  const void *key, GLuint keysize,
			  struct gl_shader_program *program)
{
   const GLuint hash = hash_key(key, keysize);
   struct cache_item *c = CALLOC_STRUCT(cache_item);

   c->hash = hash;

   c->key = malloc(keysize);
   memcpy(c->key, key, keysize);
   c->keysize = keysize;

   c->program = (struct gl_program *)program;  /* no refcount change */

   if (cache->n_items > cache->size * 1.5) {
      if (cache->size < 1000)
	 rehash(cache);
      else
	 clear_cache(ctx, cache, GL_TRUE);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d146 1
a146 1
         calloc(cache->size, sizeof(struct cache_item *));
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d146 1
a146 1
         calloc(1, cache->size * sizeof(struct cache_item));
@


