head	1.7;
access;
symbols
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.09.07.15.20.07;	author jsg;	state dead;
branches;
next	1.6;
commitid	7kimTMT4YlQauAIU;

1.6
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.5;
commitid	WPD6rgPryPkvXOr9;

1.5
date	2013.10.05.09.54.01;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2013.09.05.14.06.39;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.16.26.59;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.20;	author mpi;	state dead;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.05;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.10.05.09.26.45;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.08;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.7
log
@Merge Mesa 10.2.7
@
text
@/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         _mesa_program_parse
#define yylex           _mesa_program_lex
#define yyerror         _mesa_program_error
#define yydebug         _mesa_program_debug
#define yynerrs         _mesa_program_nerrs


/* Copy the first part of user declarations.  */
#line 1 "program/program_parse.y" /* yacc.c:339  */

/*
 * Copyright Â© 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "main/mtypes.h"
#include "main/imports.h"
#include "program/program.h"
#include "program/prog_parameter.h"
#include "program/prog_parameter_layout.h"
#include "program/prog_statevars.h"
#include "program/prog_instruction.h"

#include "program/symbol_table.h"
#include "program/program_parser.h"

extern void *yy_scan_string(char *);
extern void yy_delete_buffer(void *);

static struct asm_symbol *declare_variable(struct asm_parser_state *state,
    char *name, enum asm_type t, struct YYLTYPE *locp);

static int add_state_reference(struct gl_program_parameter_list *param_list,
    const gl_state_index tokens[STATE_LENGTH]);

static int initialize_symbol_from_state(struct gl_program *prog,
    struct asm_symbol *param_var, const gl_state_index tokens[STATE_LENGTH]);

static int initialize_symbol_from_param(struct gl_program *prog,
    struct asm_symbol *param_var, const gl_state_index tokens[STATE_LENGTH]);

static int initialize_symbol_from_const(struct gl_program *prog,
    struct asm_symbol *param_var, const struct asm_vector *vec,
    GLboolean allowSwizzle);

static int yyparse(struct asm_parser_state *state);

static char *make_error_string(const char *fmt, ...);

static void yyerror(struct YYLTYPE *locp, struct asm_parser_state *state,
    const char *s);

static int validate_inputs(struct YYLTYPE *locp,
    struct asm_parser_state *state);

static void init_dst_reg(struct prog_dst_register *r);

static void set_dst_reg(struct prog_dst_register *r,
                        gl_register_file file, GLint index);

static void init_src_reg(struct asm_src_register *r);

static void set_src_reg(struct asm_src_register *r,
                        gl_register_file file, GLint index);

static void set_src_reg_swz(struct asm_src_register *r,
                            gl_register_file file, GLint index, GLuint swizzle);

static void asm_instruction_set_operands(struct asm_instruction *inst,
    const struct prog_dst_register *dst, const struct asm_src_register *src0,
    const struct asm_src_register *src1, const struct asm_src_register *src2);

static struct asm_instruction *asm_instruction_ctor(gl_inst_opcode op,
    const struct prog_dst_register *dst, const struct asm_src_register *src0,
    const struct asm_src_register *src1, const struct asm_src_register *src2);

static struct asm_instruction *asm_instruction_copy_ctor(
    const struct prog_instruction *base, const struct prog_dst_register *dst,
    const struct asm_src_register *src0, const struct asm_src_register *src1,
    const struct asm_src_register *src2);

#ifndef FALSE
#define FALSE 0
#define TRUE (!FALSE)
#endif

#define YYLLOC_DEFAULT(Current, Rhs, N)					\
   do {									\
      if (N) {							\
	 (Current).first_line = YYRHSLOC(Rhs, 1).first_line;		\
	 (Current).first_column = YYRHSLOC(Rhs, 1).first_column;	\
	 (Current).position = YYRHSLOC(Rhs, 1).position;		\
	 (Current).last_line = YYRHSLOC(Rhs, N).last_line;		\
	 (Current).last_column = YYRHSLOC(Rhs, N).last_column;		\
      } else {								\
	 (Current).first_line = YYRHSLOC(Rhs, 0).last_line;		\
	 (Current).last_line = (Current).first_line;			\
	 (Current).first_column = YYRHSLOC(Rhs, 0).last_column;		\
	 (Current).last_column = (Current).first_column;		\
	 (Current).position = YYRHSLOC(Rhs, 0).position			\
	    + (Current).first_column;					\
      }									\
   } while(0)

#line 189 "./program/program_parse.tab.c" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 1
#endif

/* In a future release of Bison, this section will be replaced
   by #include "program_parse.tab.h".  */
#ifndef YY__MESA_PROGRAM_PROGRAM_PROGRAM_PARSE_TAB_H_INCLUDED
# define YY__MESA_PROGRAM_PROGRAM_PROGRAM_PARSE_TAB_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int _mesa_program_debug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    ARBvp_10 = 258,
    ARBfp_10 = 259,
    ADDRESS = 260,
    ALIAS = 261,
    ATTRIB = 262,
    OPTION = 263,
    OUTPUT = 264,
    PARAM = 265,
    TEMP = 266,
    END = 267,
    BIN_OP = 268,
    BINSC_OP = 269,
    SAMPLE_OP = 270,
    SCALAR_OP = 271,
    TRI_OP = 272,
    VECTOR_OP = 273,
    ARL = 274,
    KIL = 275,
    SWZ = 276,
    TXD_OP = 277,
    INTEGER = 278,
    REAL = 279,
    AMBIENT = 280,
    ATTENUATION = 281,
    BACK = 282,
    CLIP = 283,
    COLOR = 284,
    DEPTH = 285,
    DIFFUSE = 286,
    DIRECTION = 287,
    EMISSION = 288,
    ENV = 289,
    EYE = 290,
    FOG = 291,
    FOGCOORD = 292,
    FRAGMENT = 293,
    FRONT = 294,
    HALF = 295,
    INVERSE = 296,
    INVTRANS = 297,
    LIGHT = 298,
    LIGHTMODEL = 299,
    LIGHTPROD = 300,
    LOCAL = 301,
    MATERIAL = 302,
    MAT_PROGRAM = 303,
    MATRIX = 304,
    MATRIXINDEX = 305,
    MODELVIEW = 306,
    MVP = 307,
    NORMAL = 308,
    OBJECT = 309,
    PALETTE = 310,
    PARAMS = 311,
    PLANE = 312,
    POINT_TOK = 313,
    POINTSIZE = 314,
    POSITION = 315,
    PRIMARY = 316,
    PROGRAM = 317,
    PROJECTION = 318,
    RANGE = 319,
    RESULT = 320,
    ROW = 321,
    SCENECOLOR = 322,
    SECONDARY = 323,
    SHININESS = 324,
    SIZE_TOK = 325,
    SPECULAR = 326,
    SPOT = 327,
    STATE = 328,
    TEXCOORD = 329,
    TEXENV = 330,
    TEXGEN = 331,
    TEXGEN_Q = 332,
    TEXGEN_R = 333,
    TEXGEN_S = 334,
    TEXGEN_T = 335,
    TEXTURE = 336,
    TRANSPOSE = 337,
    TEXTURE_UNIT = 338,
    TEX_1D = 339,
    TEX_2D = 340,
    TEX_3D = 341,
    TEX_CUBE = 342,
    TEX_RECT = 343,
    TEX_SHADOW1D = 344,
    TEX_SHADOW2D = 345,
    TEX_SHADOWRECT = 346,
    TEX_ARRAY1D = 347,
    TEX_ARRAY2D = 348,
    TEX_ARRAYSHADOW1D = 349,
    TEX_ARRAYSHADOW2D = 350,
    VERTEX = 351,
    VTXATTRIB = 352,
    WEIGHT = 353,
    IDENTIFIER = 354,
    USED_IDENTIFIER = 355,
    MASK4 = 356,
    MASK3 = 357,
    MASK2 = 358,
    MASK1 = 359,
    SWIZZLE = 360,
    DOT_DOT = 361,
    DOT = 362
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
{
#line 124 "program/program_parse.y" /* yacc.c:355  */

   struct asm_instruction *inst;
   struct asm_symbol *sym;
   struct asm_symbol temp_sym;
   struct asm_swizzle_mask swiz_mask;
   struct asm_src_register src_reg;
   struct prog_dst_register dst_reg;
   struct prog_instruction temp_inst;
   char *string;
   unsigned result;
   unsigned attrib;
   int integer;
   float real;
   gl_state_index state[STATE_LENGTH];
   int negate;
   struct asm_vector vector;
   gl_inst_opcode opcode;

   struct {
      unsigned swz;
      unsigned rgba_valid:1;
      unsigned xyzw_valid:1;
      unsigned negate:1;
   } ext_swizzle;

#line 363 "./program/program_parse.tab.c" /* yacc.c:355  */
};
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int _mesa_program_parse (struct asm_parser_state *state);

#endif /* !YY__MESA_PROGRAM_PROGRAM_PROGRAM_PARSE_TAB_H_INCLUDED  */

/* Copy the second part of user declarations.  */
#line 269 "program/program_parse.y" /* yacc.c:358  */

extern int
_mesa_program_lexer_lex(YYSTYPE *yylval_param, YYLTYPE *yylloc_param,
                        void *yyscanner);

static int
yylex(YYSTYPE *yylval_param, YYLTYPE *yylloc_param,
      struct asm_parser_state *state)
{
   return _mesa_program_lexer_lex(yylval_param, yylloc_param, state->scanner);
}

#line 403 "./program/program_parse.tab.c" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  5
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   402

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  120
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  143
/* YYNRULES -- Number of rules.  */
#define YYNRULES  283
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  478

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   362

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     115,   116,     2,   113,   109,   114,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,   108,
       2,   117,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   111,     2,   112,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   118,   110,   119,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   284,   284,   287,   295,   307,   308,   311,   335,   336,
     339,   354,   357,   362,   369,   370,   371,   372,   373,   374,
     375,   378,   379,   380,   383,   389,   397,   403,   410,   416,
     423,   467,   472,   481,   525,   531,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   545,   557,   565,
     582,   589,   608,   619,   639,   663,   670,   703,   710,   726,
     785,   828,   837,   859,   869,   873,   902,   921,   921,   923,
     930,   942,   943,   944,   947,   961,   975,   995,  1006,  1018,
    1020,  1021,  1022,  1023,  1026,  1026,  1026,  1026,  1027,  1030,
    1034,  1039,  1045,  1052,  1059,  1081,  1103,  1104,  1105,  1106,
    1107,  1108,  1111,  1130,  1134,  1140,  1144,  1148,  1152,  1156,
    1160,  1164,  1169,  1175,  1186,  1186,  1187,  1189,  1193,  1197,
    1201,  1207,  1207,  1209,  1227,  1253,  1256,  1271,  1277,  1283,
    1284,  1291,  1297,  1303,  1311,  1317,  1323,  1331,  1337,  1343,
    1351,  1352,  1355,  1356,  1357,  1358,  1359,  1360,  1361,  1362,
    1363,  1364,  1365,  1368,  1377,  1381,  1385,  1391,  1400,  1404,
    1408,  1417,  1421,  1427,  1433,  1440,  1445,  1453,  1463,  1465,
    1473,  1479,  1483,  1487,  1493,  1504,  1513,  1517,  1522,  1526,
    1530,  1534,  1540,  1547,  1551,  1557,  1565,  1576,  1583,  1587,
    1593,  1603,  1614,  1618,  1636,  1645,  1648,  1654,  1658,  1662,
    1668,  1679,  1684,  1689,  1694,  1699,  1704,  1712,  1715,  1720,
    1733,  1741,  1752,  1760,  1760,  1762,  1762,  1764,  1774,  1779,
    1786,  1796,  1805,  1810,  1817,  1827,  1837,  1849,  1849,  1850,
    1850,  1852,  1862,  1870,  1880,  1888,  1896,  1905,  1916,  1920,
    1926,  1927,  1928,  1931,  1931,  1934,  1969,  1973,  1973,  1976,
    1983,  1992,  2006,  2015,  2024,  2028,  2037,  2046,  2057,  2064,
    2074,  2102,  2111,  2123,  2126,  2135,  2146,  2147,  2148,  2151,
    2152,  2153,  2156,  2157,  2160,  2161,  2164,  2165,  2168,  2179,
    2190,  2201,  2227,  2228
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 1
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ARBvp_10", "ARBfp_10", "ADDRESS",
  "ALIAS", "ATTRIB", "OPTION", "OUTPUT", "PARAM", "TEMP", "END", "BIN_OP",
  "BINSC_OP", "SAMPLE_OP", "SCALAR_OP", "TRI_OP", "VECTOR_OP", "ARL",
  "KIL", "SWZ", "TXD_OP", "INTEGER", "REAL", "AMBIENT", "ATTENUATION",
  "BACK", "CLIP", "COLOR", "DEPTH", "DIFFUSE", "DIRECTION", "EMISSION",
  "ENV", "EYE", "FOG", "FOGCOORD", "FRAGMENT", "FRONT", "HALF", "INVERSE",
  "INVTRANS", "LIGHT", "LIGHTMODEL", "LIGHTPROD", "LOCAL", "MATERIAL",
  "MAT_PROGRAM", "MATRIX", "MATRIXINDEX", "MODELVIEW", "MVP", "NORMAL",
  "OBJECT", "PALETTE", "PARAMS", "PLANE", "POINT_TOK", "POINTSIZE",
  "POSITION", "PRIMARY", "PROGRAM", "PROJECTION", "RANGE", "RESULT", "ROW",
  "SCENECOLOR", "SECONDARY", "SHININESS", "SIZE_TOK", "SPECULAR", "SPOT",
  "STATE", "TEXCOORD", "TEXENV", "TEXGEN", "TEXGEN_Q", "TEXGEN_R",
  "TEXGEN_S", "TEXGEN_T", "TEXTURE", "TRANSPOSE", "TEXTURE_UNIT", "TEX_1D",
  "TEX_2D", "TEX_3D", "TEX_CUBE", "TEX_RECT", "TEX_SHADOW1D",
  "TEX_SHADOW2D", "TEX_SHADOWRECT", "TEX_ARRAY1D", "TEX_ARRAY2D",
  "TEX_ARRAYSHADOW1D", "TEX_ARRAYSHADOW2D", "VERTEX", "VTXATTRIB",
  "WEIGHT", "IDENTIFIER", "USED_IDENTIFIER", "MASK4", "MASK3", "MASK2",
  "MASK1", "SWIZZLE", "DOT_DOT", "DOT", "';'", "','", "'|'", "'['", "']'",
  "'+'", "'-'", "'('", "')'", "'='", "'{'", "'}'", "$accept", "program",
  "language", "optionSequence", "option", "statementSequence", "statement",
  "instruction", "ALU_instruction", "TexInstruction", "ARL_instruction",
  "VECTORop_instruction", "SCALARop_instruction", "BINSCop_instruction",
  "BINop_instruction", "TRIop_instruction", "SAMPLE_instruction",
  "KIL_instruction", "TXD_instruction", "texImageUnit", "texTarget",
  "SWZ_instruction", "scalarSrcReg", "scalarUse", "swizzleSrcReg",
  "maskedDstReg", "maskedAddrReg", "extendedSwizzle", "extSwizComp",
  "extSwizSel", "srcReg", "dstReg", "progParamArray", "progParamArrayMem",
  "progParamArrayAbs", "progParamArrayRel", "addrRegRelOffset",
  "addrRegPosOffset", "addrRegNegOffset", "addrReg", "addrComponent",
  "addrWriteMask", "scalarSuffix", "swizzleSuffix", "optionalMask",
  "optionalCcMask", "ccTest", "ccTest2", "ccMaskRule", "ccMaskRule2",
  "namingStatement", "ATTRIB_statement", "attribBinding", "vtxAttribItem",
  "vtxAttribNum", "vtxOptWeightNum", "vtxWeightNum", "fragAttribItem",
  "PARAM_statement", "PARAM_singleStmt", "PARAM_multipleStmt",
  "optArraySize", "paramSingleInit", "paramMultipleInit",
  "paramMultInitList", "paramSingleItemDecl", "paramSingleItemUse",
  "paramMultipleItem", "stateMultipleItem", "stateSingleItem",
  "stateMaterialItem", "stateMatProperty", "stateLightItem",
  "stateLightProperty", "stateSpotProperty", "stateLightModelItem",
  "stateLModProperty", "stateLightProdItem", "stateLProdProperty",
  "stateTexEnvItem", "stateTexEnvProperty", "ambDiffSpecProperty",
  "stateLightNumber", "stateTexGenItem", "stateTexGenType",
  "stateTexGenCoord", "stateFogItem", "stateFogProperty",
  "stateClipPlaneItem", "stateClipPlaneNum", "statePointItem",
  "statePointProperty", "stateMatrixRow", "stateMatrixRows",
  "optMatrixRows", "stateMatrixItem", "stateOptMatModifier",
  "stateMatModifier", "stateMatrixRowNum", "stateMatrixName",
  "stateOptModMatNum", "stateModMatNum", "statePaletteMatNum",
  "stateProgramMatNum", "stateDepthItem", "programSingleItem",
  "programMultipleItem", "progEnvParams", "progEnvParamNums",
  "progEnvParam", "progLocalParams", "progLocalParamNums",
  "progLocalParam", "progEnvParamNum", "progLocalParamNum",
  "paramConstDecl", "paramConstUse", "paramConstScalarDecl",
  "paramConstScalarUse", "paramConstVector", "signedFloatConstant",
  "optionalSign", "TEMP_statement", "@@1", "optVarSize",
  "ADDRESS_statement", "@@2", "varNameList", "OUTPUT_statement",
  "resultBinding", "resultColBinding", "optResultFaceType",
  "optResultColorType", "optFaceType", "optColorType",
  "optTexCoordUnitNum", "optTexImageUnitNum", "optLegacyTexUnitNum",
  "texCoordUnitNum", "texImageUnitNum", "legacyTexUnitNum",
  "ALIAS_statement", "string", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,    59,    44,
     124,    91,    93,    43,    45,    40,    41,    61,   123,   125
};
# endif

#define YYPACT_NINF -398

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-398)))

#define YYTABLE_NINF -230

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      52,  -398,  -398,    14,  -398,  -398,    67,   152,  -398,    24,
    -398,  -398,     5,  -398,    47,    81,    99,  -398,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    56,    -1,    -1,  -398,    97,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,  -398,   112,  -398,  -398,  -398,  -398,  -398,   156,  -398,
    -398,  -398,  -398,  -398,   111,    98,   141,    95,   127,  -398,
      84,   142,  -398,   146,   150,   153,   157,   158,  -398,   159,
     165,  -398,  -398,  -398,  -398,  -398,   113,   -13,   161,   163,
    -398,  -398,   162,  -398,  -398,   164,   174,    10,   252,    -3,
    -398,   -11,  -398,  -398,  -398,  -398,   166,  -398,   -20,  -398,
    -398,  -398,  -398,   167,   -20,   -20,   -20,   -20,   -20,   -20,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,   137,    70,
     132,    85,   168,    34,   -20,   113,   169,  -398,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,    34,   -20,   171,   111,
     179,  -398,  -398,  -398,   172,  -398,  -398,  -398,  -398,  -398,
    -398,  -398,   216,  -398,  -398,   253,    76,   258,  -398,   176,
     154,  -398,   178,    29,   180,  -398,   181,  -398,  -398,   110,
    -398,  -398,   166,  -398,   175,   182,   183,   219,    32,   184,
     177,   186,    94,   140,     7,   187,   166,  -398,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,   226,  -398,   110,
    -398,   188,  -398,  -398,   166,   189,   190,  -398,   113,     9,
    -398,     1,   193,   195,   240,   164,  -398,   191,  -398,  -398,
     194,  -398,  -398,  -398,  -398,   197,   -20,  -398,   196,   198,
     113,   -20,    34,  -398,   203,   206,   228,   -20,  -398,  -398,
    -398,  -398,   290,   292,   293,  -398,  -398,  -398,  -398,   294,
    -398,  -398,  -398,  -398,   251,   294,    48,   208,   209,  -398,
     210,  -398,   166,    21,  -398,  -398,  -398,   299,   295,    12,
     212,  -398,   302,  -398,   304,   302,  -398,   218,   -20,  -398,
    -398,   217,  -398,  -398,   227,   -20,   -20,  -398,   214,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,   220,  -398,  -398,
     222,   225,   229,  -398,   223,  -398,   224,  -398,   230,  -398,
     231,  -398,   233,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
     314,   316,  -398,   317,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,   234,  -398,  -398,  -398,  -398,   170,   318,  -398,   235,
    -398,   236,   237,  -398,    44,  -398,  -398,   143,  -398,   244,
     -15,   245,    36,  -398,   332,  -398,   138,   -20,  -398,  -398,
     301,   101,    94,  -398,   248,  -398,   249,  -398,   250,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,   254,  -398,  -398,  -398,
     -20,  -398,   333,   340,  -398,   -20,  -398,  -398,  -398,   -20,
     102,   132,    75,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,   255,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
     336,  -398,  -398,    49,  -398,  -398,  -398,  -398,    90,  -398,
    -398,  -398,  -398,   256,   260,   259,   261,  -398,   298,    36,
    -398,  -398,  -398,  -398,  -398,  -398,   -20,  -398,   -20,   228,
     290,   292,   262,  -398,  -398,   257,   265,   268,   266,   273,
     269,   274,   318,  -398,   -20,   138,  -398,   290,  -398,   292,
     107,  -398,  -398,  -398,  -398,   318,   270,  -398
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     3,     4,     0,     6,     1,     9,     0,     5,   246,
     282,   283,     0,   247,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     0,     0,   242,     0,     0,     8,     0,
      12,    13,    14,    15,    16,    17,    18,    19,    21,    22,
      23,    20,     0,    96,    97,   121,   122,    98,     0,    99,
     100,   101,   245,     7,     0,     0,     0,     0,     0,    65,
       0,    88,    64,     0,     0,     0,     0,     0,    76,     0,
       0,    94,   240,   241,    31,    32,    83,     0,     0,     0,
      10,    11,     0,   243,   250,   248,     0,     0,   125,   242,
     123,   259,   257,   253,   255,   252,   272,   254,   242,    84,
      85,    86,    87,    91,   242,   242,   242,   242,   242,   242,
      78,    55,    81,    80,    82,    92,   233,   232,     0,     0,
       0,     0,    60,     0,   242,    83,     0,    61,    63,   134,
     135,   213,   214,   136,   229,   230,     0,   242,     0,     0,
       0,   281,   102,   126,     0,   127,   131,   132,   133,   227,
     228,   231,     0,   262,   261,     0,   263,     0,   256,     0,
       0,    54,     0,     0,     0,    26,     0,    25,    24,   269,
     119,   117,   272,   104,     0,     0,     0,     0,     0,     0,
     266,     0,   266,     0,     0,   276,   272,   142,   143,   144,
     145,   147,   146,   148,   149,   150,   151,     0,   152,   269,
     109,     0,   107,   105,   272,     0,   114,   103,    83,     0,
      52,     0,     0,     0,     0,   244,   249,     0,   239,   238,
       0,   264,   265,   258,   278,     0,   242,    95,     0,     0,
      83,   242,     0,    48,     0,    51,     0,   242,   270,   271,
     118,   120,     0,     0,     0,   212,   183,   184,   182,     0,
     165,   268,   267,   164,     0,     0,     0,     0,   207,   203,
       0,   202,   272,   195,   189,   188,   187,     0,     0,     0,
       0,   108,     0,   110,     0,     0,   106,     0,   242,   234,
      69,     0,    67,    68,     0,   242,   242,   251,     0,   124,
     260,   273,    28,    89,    90,    93,    27,     0,    79,    50,
     274,     0,     0,   225,     0,   226,     0,   186,     0,   174,
       0,   166,     0,   171,   172,   155,   156,   173,   153,   154,
       0,     0,   201,     0,   204,   197,   199,   198,   194,   196,
     280,     0,   170,   169,   176,   177,     0,     0,   116,     0,
     113,     0,     0,    53,     0,    62,    77,    71,    47,     0,
       0,     0,   242,    49,     0,    34,     0,   242,   220,   224,
       0,     0,   266,   211,     0,   209,     0,   210,     0,   277,
     181,   180,   178,   179,   175,   200,     0,   111,   112,   115,
     242,   235,     0,     0,    70,   242,    58,    57,    59,   242,
       0,     0,     0,   129,   137,   140,   138,   215,   216,   139,
     279,     0,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    30,    29,   185,   160,   162,   159,
       0,   157,   158,     0,   206,   208,   205,   190,     0,    74,
      72,    75,    73,     0,     0,     0,     0,   141,   192,   242,
     128,   275,   163,   161,   167,   168,   242,   236,   242,     0,
       0,     0,     0,   191,   130,     0,     0,     0,     0,   218,
       0,   222,     0,   237,   242,     0,   217,     0,   221,     0,
       0,    56,    33,   219,   223,     0,     0,   193
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,   -78,
     -82,  -398,  -100,   155,   -86,   215,  -398,  -398,  -372,  -398,
     -54,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,   173,
    -398,  -398,  -398,  -118,  -398,  -398,   232,  -398,  -398,  -398,
    -398,  -398,   303,  -398,  -398,  -398,   114,  -398,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,   -53,  -398,   -88,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,  -334,   130,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,     0,  -398,  -398,  -397,  -398,
    -398,  -398,  -398,  -398,  -398,   305,  -398,  -398,  -398,  -398,
    -398,  -398,  -398,  -396,  -383,   306,  -398,  -398,  -137,   -87,
    -120,   -89,  -398,  -398,  -398,  -398,  -398,   263,  -398,   185,
    -398,  -398,  -398,  -177,   199,  -154,  -398,  -398,  -398,  -398,
    -398,  -398,    -6
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     3,     4,     6,     8,     9,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,   301,
     414,    41,   162,   233,    74,    60,    69,   348,   349,   387,
     234,    61,   126,   281,   282,   283,   384,   430,   432,    70,
     347,   111,   299,   115,   103,   161,    75,   229,    76,   230,
      42,    43,   127,   207,   341,   276,   339,   173,    44,    45,
      46,   144,    90,   289,   392,   145,   128,   393,   394,   129,
     187,   318,   188,   421,   443,   189,   253,   190,   444,   191,
     333,   319,   310,   192,   336,   374,   193,   248,   194,   308,
     195,   266,   196,   437,   453,   197,   328,   329,   376,   263,
     322,   366,   368,   364,   198,   130,   396,   397,   458,   131,
     398,   460,   132,   304,   306,   399,   133,   149,   134,   135,
     151,    77,    47,   139,    48,    49,    54,    85,    50,    62,
      97,   156,   223,   254,   240,   158,   355,   268,   225,   401,
     331,    51,    12
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     152,   146,   150,    52,   209,   256,   165,   210,   386,   168,
     116,   117,   159,   433,     5,   163,   153,   163,   241,   164,
     163,   166,   167,   125,   280,   118,   235,   422,   154,    13,
      14,    15,   269,   264,    16,   152,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,   334,   118,   119,
     273,   213,   116,   117,   459,     1,     2,   116,   117,   119,
     120,   246,   325,   326,    58,   470,   335,   118,   461,   208,
     120,   473,   118,   313,   313,     7,   456,   265,   476,   314,
     314,   315,   212,   121,    10,    11,   474,   122,   247,   445,
     277,   119,   471,    72,    73,   235,   119,   123,   390,    59,
     155,    68,   120,   327,   174,   124,   121,   120,   324,   391,
      72,    73,   295,    53,   199,   124,   175,   316,   278,   317,
     317,   251,   200,    10,    11,   121,   313,   417,   279,   122,
     121,   296,   314,   252,   122,   201,   435,   221,   202,   232,
     292,   418,   163,    68,   222,   203,    55,   124,   436,    72,
      73,   302,   124,   380,   124,    71,    91,    92,   344,   204,
     176,   419,   177,   381,    93,    82,   169,    83,   178,    72,
      73,   238,   317,   420,   170,   179,   180,   181,   239,   182,
      56,   183,   205,   206,   439,   423,    94,    95,   257,   152,
     184,   258,   259,    98,   440,   260,   350,   171,    57,   446,
     351,    96,   250,   261,   251,    80,    88,   185,   186,   447,
      84,   172,    89,   475,   112,    86,   252,   113,   114,   427,
      81,   262,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,    63,    64,    65,    66,    67,   218,
     219,    78,    79,    99,   100,   101,   102,   370,   371,   372,
     373,    10,    11,    71,   227,   104,   382,   383,    87,   105,
     428,   138,   106,   152,   395,   150,   107,   108,   109,   110,
     136,   415,   137,   140,   141,   143,   220,   157,   216,   -66,
     211,   224,   160,   245,   217,   226,   242,   231,   214,   236,
     237,   152,   270,   243,   244,   249,   350,   255,   267,   272,
     274,   275,   285,   434,   286,    58,   290,   298,   288,   291,
    -229,   300,   293,   303,   294,   305,   307,   309,   311,   320,
     321,   323,   330,   337,   332,   338,   455,   340,   343,   345,
     353,   346,   352,   354,   356,   358,   359,   363,   357,   365,
     367,   375,   360,   361,   388,   362,   369,   377,   378,   379,
     152,   395,   150,   385,   389,   400,   429,   152,   416,   350,
     424,   425,   426,   431,   452,   448,   427,   441,   442,   449,
     450,   457,   451,   462,   464,   350,   463,   465,   466,   467,
     469,   468,   477,   472,   284,   312,   454,   297,     0,   342,
     142,   438,   228,     0,   147,   148,     0,     0,   271,   287,
       0,     0,   215
};

static const yytype_int16 yycheck[] =
{
      89,    89,    89,     9,   124,   182,   106,   125,    23,   109,
      23,    24,    98,   385,     0,   104,    27,   106,   172,   105,
     109,   107,   108,    77,    23,    38,   163,   361,    39,     5,
       6,     7,   186,    26,    10,   124,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    35,    38,    62,
     204,   137,    23,    24,   450,     3,     4,    23,    24,    62,
      73,    29,    41,    42,    65,   462,    54,    38,   451,   123,
      73,   467,    38,    25,    25,     8,   448,    70,   475,    31,
      31,    33,   136,    96,    99,   100,   469,   100,    56,   423,
     208,    62,   464,   113,   114,   232,    62,   110,    62,   100,
     111,   100,    73,    82,    34,   118,    96,    73,   262,    73,
     113,   114,   230,   108,    29,   118,    46,    69,   109,    71,
      71,    27,    37,    99,   100,    96,    25,    26,   119,   100,
      96,   231,    31,    39,   100,    50,    34,    61,    53,   110,
     226,    40,   231,   100,    68,    60,    99,   118,    46,   113,
     114,   237,   118,   109,   118,    99,    29,    30,   278,    74,
      28,    60,    30,   119,    37,     9,    29,    11,    36,   113,
     114,    61,    71,    72,    37,    43,    44,    45,    68,    47,
      99,    49,    97,    98,   109,   362,    59,    60,    48,   278,
      58,    51,    52,   109,   119,    55,   285,    60,    99,   109,
     286,    74,    25,    63,    27,   108,   111,    75,    76,   119,
      99,    74,   117,   106,   101,   117,    39,   104,   105,   112,
     108,    81,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    19,    20,    21,    22,    23,    23,
      24,    26,    27,   101,   102,   103,   104,    77,    78,    79,
      80,    99,   100,    99,   100,   109,   113,   114,   117,   109,
     380,    99,   109,   352,   352,   352,   109,   109,   109,   104,
     109,   357,   109,   109,   100,    23,    23,   111,    99,   111,
     111,    23,   115,    64,   112,   109,   111,   109,   117,   109,
     109,   380,    66,   111,   111,   111,   385,   111,   111,   111,
     111,   111,   109,   389,   109,    65,   112,   104,   117,   112,
     104,    83,   116,    23,   116,    23,    23,    23,    67,   111,
     111,   111,    23,   111,    29,    23,   446,    23,   110,   112,
     110,   104,   118,   111,   109,   112,   112,    23,   109,    23,
      23,    23,   112,   112,   350,   112,   112,   112,   112,   112,
     439,   439,   439,   109,   109,    23,    23,   446,    57,   448,
     112,   112,   112,    23,    66,   109,   112,   112,    32,   109,
     111,   449,   111,   111,   109,   464,   119,   109,   112,   106,
     106,   112,   112,   465,   211,   255,   439,   232,    -1,   275,
      87,   391,   160,    -1,    89,    89,    -1,    -1,   199,   214,
      -1,    -1,   139
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,     4,   121,   122,     0,   123,     8,   124,   125,
      99,   100,   262,     5,     6,     7,    10,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   141,   170,   171,   178,   179,   180,   242,   244,   245,
     248,   261,   262,   108,   246,    99,    99,    99,    65,   100,
     145,   151,   249,   145,   145,   145,   145,   145,   100,   146,
     159,    99,   113,   114,   144,   166,   168,   241,   145,   145,
     108,   108,     9,    11,    99,   247,   117,   117,   111,   117,
     182,    29,    30,    37,    59,    60,    74,   250,   109,   101,
     102,   103,   104,   164,   109,   109,   109,   109,   109,   109,
     104,   161,   101,   104,   105,   163,    23,    24,    38,    62,
      73,    96,   100,   110,   118,   150,   152,   172,   186,   189,
     225,   229,   232,   236,   238,   239,   109,   109,    99,   243,
     109,   100,   172,    23,   181,   185,   189,   225,   235,   237,
     239,   240,   241,    27,    39,   111,   251,   111,   255,   144,
     115,   165,   142,   241,   144,   142,   144,   144,   142,    29,
      37,    60,    74,   177,    34,    46,    28,    30,    36,    43,
      44,    45,    47,    49,    58,    75,    76,   190,   192,   195,
     197,   199,   203,   206,   208,   210,   212,   215,   224,    29,
      37,    50,    53,    60,    74,    97,    98,   173,   150,   240,
     163,   111,   150,   144,   117,   247,    99,   112,    23,    24,
      23,    61,    68,   252,    23,   258,   109,   100,   166,   167,
     169,   109,   110,   143,   150,   238,   109,   109,    61,    68,
     254,   255,   111,   111,   111,    64,    29,    56,   207,   111,
      25,    27,    39,   196,   253,   111,   253,    48,    51,    52,
      55,    63,    81,   219,    26,    70,   211,   111,   257,   255,
      66,   254,   111,   255,   111,   111,   175,   163,   109,   119,
      23,   153,   154,   155,   159,   109,   109,   249,   117,   183,
     112,   112,   144,   116,   116,   163,   142,   143,   104,   162,
      83,   139,   144,    23,   233,    23,   234,    23,   209,    23,
     202,    67,   202,    25,    31,    33,    69,    71,   191,   201,
     111,   111,   220,   111,   255,    41,    42,    82,   216,   217,
      23,   260,    29,   200,    35,    54,   204,   111,    23,   176,
      23,   174,   176,   110,   240,   112,   104,   160,   147,   148,
     241,   144,   118,   110,   111,   256,   109,   109,   112,   112,
     112,   112,   112,    23,   223,    23,   221,    23,   222,   112,
      77,    78,    79,    80,   205,    23,   218,   112,   112,   112,
     109,   119,   113,   114,   156,   109,    23,   149,   262,   109,
      62,    73,   184,   187,   188,   189,   226,   227,   230,   235,
      23,   259,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,   140,   144,    57,    26,    40,    60,
      72,   193,   201,   253,   112,   112,   112,   112,   240,    23,
     157,    23,   158,   148,   144,    34,    46,   213,   215,   109,
     119,   112,    32,   194,   198,   201,   109,   119,   109,   109,
     111,   111,    66,   214,   187,   240,   148,   139,   228,   233,
     231,   234,   111,   119,   109,   109,   112,   106,   112,   106,
     218,   148,   140,   233,   234,   106,   218,   112
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   120,   121,   122,   122,   123,   123,   124,   125,   125,
     126,   126,   127,   127,   128,   128,   128,   128,   128,   128,
     128,   129,   129,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   137,   138,   139,   140,   140,   140,   140,   140,
     140,   140,   140,   140,   140,   140,   140,   141,   142,   142,
     143,   143,   144,   144,   145,   146,   147,   148,   149,   149,
     150,   150,   150,   150,   151,   151,   152,   153,   153,   154,
     155,   156,   156,   156,   157,   158,   159,   160,   161,   162,
     163,   163,   163,   163,   164,   164,   164,   164,   164,   165,
     165,   165,   166,   167,   168,   169,   170,   170,   170,   170,
     170,   170,   171,   172,   172,   173,   173,   173,   173,   173,
     173,   173,   173,   174,   175,   175,   176,   177,   177,   177,
     177,   178,   178,   179,   180,   181,   181,   182,   183,   184,
     184,   185,   185,   185,   186,   186,   186,   187,   187,   187,
     188,   188,   189,   189,   189,   189,   189,   189,   189,   189,
     189,   189,   189,   190,   191,   191,   191,   192,   193,   193,
     193,   193,   193,   194,   195,   196,   196,   197,   198,   199,
     200,   201,   201,   201,   202,   203,   204,   204,   205,   205,
     205,   205,   206,   207,   207,   208,   209,   210,   211,   211,
     212,   213,   214,   214,   215,   216,   216,   217,   217,   217,
     218,   219,   219,   219,   219,   219,   219,   220,   220,   221,
     222,   223,   224,   225,   225,   226,   226,   227,   228,   228,
     229,   230,   231,   231,   232,   233,   234,   235,   235,   236,
     236,   237,   238,   238,   239,   239,   239,   239,   240,   240,
     241,   241,   241,   243,   242,   244,   244,   246,   245,   247,
     247,   248,   249,   249,   249,   249,   249,   249,   250,   251,
     251,   251,   251,   252,   252,   252,   253,   253,   253,   254,
     254,   254,   255,   255,   256,   256,   257,   257,   258,   259,
     260,   261,   262,   262
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     4,     1,     1,     2,     0,     3,     2,     0,
       2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     4,     4,     6,     6,     8,
       8,     2,     2,    12,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     6,     2,     4,
       2,     1,     3,     5,     3,     2,     7,     2,     1,     1,
       1,     1,     4,     1,     1,     1,     1,     1,     1,     1,
       3,     0,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     1,     1,     1,     0,     3,
       3,     0,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     2,     2,     1,     2,     1,     2,     1,
       2,     4,     4,     1,     0,     3,     1,     1,     2,     1,
       2,     1,     1,     3,     6,     0,     1,     2,     4,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     3,     1,     1,     1,     5,     1,     1,
       1,     2,     1,     1,     2,     1,     2,     6,     1,     3,
       1,     1,     1,     1,     1,     4,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     5,     1,     2,     1,     1,
       5,     2,     0,     6,     3,     0,     1,     1,     1,     1,
       1,     2,     1,     1,     2,     4,     4,     0,     3,     1,
       1,     1,     2,     1,     1,     1,     1,     5,     1,     3,
       5,     5,     1,     3,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     5,     7,     9,     2,     2,
       1,     1,     0,     0,     4,     1,     0,     0,     3,     3,
       1,     5,     2,     2,     2,     2,     3,     2,     3,     0,
       3,     1,     1,     0,     1,     1,     0,     1,     1,     0,
       1,     1,     0,     3,     0,     3,     0,     3,     1,     1,
       1,     4,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, state, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, state); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, struct asm_parser_state *state)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  YYUSE (state);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, struct asm_parser_state *state)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, state);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, struct asm_parser_state *state)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , state);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, state); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, struct asm_parser_state *state)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (state);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (struct asm_parser_state *state)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, state);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 3:
#line 288 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (state->prog->Target != GL_VERTEX_PROGRAM_ARB) {
	      yyerror(& (yylsp[0]), state, "invalid fragment program header");

	   }
	   state->mode = ARB_vertex;
	}
#line 1991 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 4:
#line 296 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (state->prog->Target != GL_FRAGMENT_PROGRAM_ARB) {
	      yyerror(& (yylsp[0]), state, "invalid vertex program header");
	   }
	   state->mode = ARB_fragment;

	   state->option.TexRect =
	      (state->ctx->Extensions.NV_texture_rectangle != GL_FALSE);
	}
#line 2005 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 7:
#line 312 "program/program_parse.y" /* yacc.c:1646  */
    {
	   int valid = 0;

	   if (state->mode == ARB_vertex) {
	      valid = _mesa_ARBvp_parse_option(state, (yyvsp[-1].string));
	   } else if (state->mode == ARB_fragment) {
	      valid = _mesa_ARBfp_parse_option(state, (yyvsp[-1].string));
	   }


	   free((yyvsp[-1].string));

	   if (!valid) {
	      const char *const err_str = (state->mode == ARB_vertex)
		 ? "invalid ARB vertex program option"
		 : "invalid ARB fragment program option";

	      yyerror(& (yylsp[-1]), state, err_str);
	      YYERROR;
	   }
	}
#line 2031 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 10:
#line 340 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if ((yyvsp[-1].inst) != NULL) {
	      if (state->inst_tail == NULL) {
		 state->inst_head = (yyvsp[-1].inst);
	      } else {
		 state->inst_tail->next = (yyvsp[-1].inst);
	      }

	      state->inst_tail = (yyvsp[-1].inst);
	      (yyvsp[-1].inst)->next = NULL;

	      state->prog->NumInstructions++;
	   }
	}
#line 2050 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 12:
#line 358 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.inst) = (yyvsp[0].inst);
	   state->prog->NumAluInstructions++;
	}
#line 2059 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 13:
#line 363 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.inst) = (yyvsp[0].inst);
	   state->prog->NumTexInstructions++;
	}
#line 2068 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 24:
#line 384 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.inst) = asm_instruction_ctor(OPCODE_ARL, & (yyvsp[-2].dst_reg), & (yyvsp[0].src_reg), NULL, NULL);
	}
#line 2076 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 25:
#line 390 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if ((yyvsp[-3].temp_inst).Opcode == OPCODE_DDY)
	      state->fragment.UsesDFdy = 1;
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-3].temp_inst), & (yyvsp[-2].dst_reg), & (yyvsp[0].src_reg), NULL, NULL);
	}
#line 2086 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 26:
#line 398 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-3].temp_inst), & (yyvsp[-2].dst_reg), & (yyvsp[0].src_reg), NULL, NULL);
	}
#line 2094 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 27:
#line 404 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-5].temp_inst), & (yyvsp[-4].dst_reg), & (yyvsp[-2].src_reg), & (yyvsp[0].src_reg), NULL);
	}
#line 2102 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 28:
#line 411 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-5].temp_inst), & (yyvsp[-4].dst_reg), & (yyvsp[-2].src_reg), & (yyvsp[0].src_reg), NULL);
	}
#line 2110 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 29:
#line 418 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-7].temp_inst), & (yyvsp[-6].dst_reg), & (yyvsp[-4].src_reg), & (yyvsp[-2].src_reg), & (yyvsp[0].src_reg));
	}
#line 2118 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 30:
#line 424 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-7].temp_inst), & (yyvsp[-6].dst_reg), & (yyvsp[-4].src_reg), NULL, NULL);
	   if ((yyval.inst) != NULL) {
	      const GLbitfield tex_mask = (1U << (yyvsp[-2].integer));
	      GLbitfield shadow_tex = 0;
	      GLbitfield target_mask = 0;


	      (yyval.inst)->Base.TexSrcUnit = (yyvsp[-2].integer);

	      if ((yyvsp[0].integer) < 0) {
		 shadow_tex = tex_mask;

		 (yyval.inst)->Base.TexSrcTarget = -(yyvsp[0].integer);
		 (yyval.inst)->Base.TexShadow = 1;
	      } else {
		 (yyval.inst)->Base.TexSrcTarget = (yyvsp[0].integer);
	      }

	      target_mask = (1U << (yyval.inst)->Base.TexSrcTarget);

	      /* If this texture unit was previously accessed and that access
	       * had a different texture target, generate an error.
	       *
	       * If this texture unit was previously accessed and that access
	       * had a different shadow mode, generate an error.
	       */
	      if ((state->prog->TexturesUsed[(yyvsp[-2].integer)] != 0)
		  && ((state->prog->TexturesUsed[(yyvsp[-2].integer)] != target_mask)
		      || ((state->prog->ShadowSamplers & tex_mask)
			  != shadow_tex))) {
		 yyerror(& (yylsp[0]), state,
			 "multiple targets used on one texture image unit");
		 YYERROR;
	      }


	      state->prog->TexturesUsed[(yyvsp[-2].integer)] |= target_mask;
	      state->prog->ShadowSamplers |= shadow_tex;
	   }
	}
#line 2164 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 31:
#line 468 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.inst) = asm_instruction_ctor(OPCODE_KIL, NULL, & (yyvsp[0].src_reg), NULL, NULL);
	   state->fragment.UsesKill = 1;
	}
#line 2173 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 32:
#line 473 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.inst) = asm_instruction_ctor(OPCODE_KIL_NV, NULL, NULL, NULL, NULL);
	   (yyval.inst)->Base.DstReg.CondMask = (yyvsp[0].dst_reg).CondMask;
	   (yyval.inst)->Base.DstReg.CondSwizzle = (yyvsp[0].dst_reg).CondSwizzle;
	   state->fragment.UsesKill = 1;
	}
#line 2184 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 33:
#line 482 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-11].temp_inst), & (yyvsp[-10].dst_reg), & (yyvsp[-8].src_reg), & (yyvsp[-6].src_reg), & (yyvsp[-4].src_reg));
	   if ((yyval.inst) != NULL) {
	      const GLbitfield tex_mask = (1U << (yyvsp[-2].integer));
	      GLbitfield shadow_tex = 0;
	      GLbitfield target_mask = 0;


	      (yyval.inst)->Base.TexSrcUnit = (yyvsp[-2].integer);

	      if ((yyvsp[0].integer) < 0) {
		 shadow_tex = tex_mask;

		 (yyval.inst)->Base.TexSrcTarget = -(yyvsp[0].integer);
		 (yyval.inst)->Base.TexShadow = 1;
	      } else {
		 (yyval.inst)->Base.TexSrcTarget = (yyvsp[0].integer);
	      }

	      target_mask = (1U << (yyval.inst)->Base.TexSrcTarget);

	      /* If this texture unit was previously accessed and that access
	       * had a different texture target, generate an error.
	       *
	       * If this texture unit was previously accessed and that access
	       * had a different shadow mode, generate an error.
	       */
	      if ((state->prog->TexturesUsed[(yyvsp[-2].integer)] != 0)
		  && ((state->prog->TexturesUsed[(yyvsp[-2].integer)] != target_mask)
		      || ((state->prog->ShadowSamplers & tex_mask)
			  != shadow_tex))) {
		 yyerror(& (yylsp[0]), state,
			 "multiple targets used on one texture image unit");
		 YYERROR;
	      }


	      state->prog->TexturesUsed[(yyvsp[-2].integer)] |= target_mask;
	      state->prog->ShadowSamplers |= shadow_tex;
	   }
	}
#line 2230 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 34:
#line 526 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 2238 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 35:
#line 531 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = TEXTURE_1D_INDEX; }
#line 2244 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 36:
#line 532 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = TEXTURE_2D_INDEX; }
#line 2250 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 37:
#line 533 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = TEXTURE_3D_INDEX; }
#line 2256 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 38:
#line 534 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = TEXTURE_CUBE_INDEX; }
#line 2262 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 39:
#line 535 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = TEXTURE_RECT_INDEX; }
#line 2268 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 40:
#line 536 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = -TEXTURE_1D_INDEX; }
#line 2274 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 41:
#line 537 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = -TEXTURE_2D_INDEX; }
#line 2280 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 42:
#line 538 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = -TEXTURE_RECT_INDEX; }
#line 2286 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 43:
#line 539 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = TEXTURE_1D_ARRAY_INDEX; }
#line 2292 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 44:
#line 540 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = TEXTURE_2D_ARRAY_INDEX; }
#line 2298 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 45:
#line 541 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = -TEXTURE_1D_ARRAY_INDEX; }
#line 2304 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 46:
#line 542 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = -TEXTURE_2D_ARRAY_INDEX; }
#line 2310 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 47:
#line 546 "program/program_parse.y" /* yacc.c:1646  */
    {
	   /* FIXME: Is this correct?  Should the extenedSwizzle be applied
	    * FIXME: to the existing swizzle?
	    */
	   (yyvsp[-2].src_reg).Base.Swizzle = (yyvsp[0].swiz_mask).swizzle;
	   (yyvsp[-2].src_reg).Base.Negate = (yyvsp[0].swiz_mask).mask;

	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-5].temp_inst), & (yyvsp[-4].dst_reg), & (yyvsp[-2].src_reg), NULL, NULL);
	}
#line 2324 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 48:
#line 558 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.src_reg) = (yyvsp[0].src_reg);

	   if ((yyvsp[-1].negate)) {
	      (yyval.src_reg).Base.Negate = ~(yyval.src_reg).Base.Negate;
	   }
	}
#line 2336 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 49:
#line 566 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.src_reg) = (yyvsp[-1].src_reg);

	   if (!state->option.NV_fragment) {
	      yyerror(& (yylsp[-2]), state, "unexpected character '|'");
	      YYERROR;
	   }

	   if ((yyvsp[-3].negate)) {
	      (yyval.src_reg).Base.Negate = ~(yyval.src_reg).Base.Negate;
	   }

	   (yyval.src_reg).Base.Abs = 1;
	}
#line 2355 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 50:
#line 583 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.src_reg) = (yyvsp[-1].src_reg);

	   (yyval.src_reg).Base.Swizzle = _mesa_combine_swizzles((yyval.src_reg).Base.Swizzle,
						    (yyvsp[0].swiz_mask).swizzle);
	}
#line 2366 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 51:
#line 590 "program/program_parse.y" /* yacc.c:1646  */
    {
	   struct asm_symbol temp_sym;

	   if (!state->option.NV_fragment) {
	      yyerror(& (yylsp[0]), state, "expected scalar suffix");
	      YYERROR;
	   }

	   memset(& temp_sym, 0, sizeof(temp_sym));
	   temp_sym.param_binding_begin = ~0;
	   initialize_symbol_from_const(state->prog, & temp_sym, & (yyvsp[0].vector), GL_TRUE);

	   set_src_reg_swz(& (yyval.src_reg), PROGRAM_CONSTANT,
                           temp_sym.param_binding_begin,
                           temp_sym.param_binding_swizzle);
	}
#line 2387 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 52:
#line 609 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.src_reg) = (yyvsp[-1].src_reg);

	   if ((yyvsp[-2].negate)) {
	      (yyval.src_reg).Base.Negate = ~(yyval.src_reg).Base.Negate;
	   }

	   (yyval.src_reg).Base.Swizzle = _mesa_combine_swizzles((yyval.src_reg).Base.Swizzle,
						    (yyvsp[0].swiz_mask).swizzle);
	}
#line 2402 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 53:
#line 620 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.src_reg) = (yyvsp[-2].src_reg);

	   if (!state->option.NV_fragment) {
	      yyerror(& (yylsp[-3]), state, "unexpected character '|'");
	      YYERROR;
	   }

	   if ((yyvsp[-4].negate)) {
	      (yyval.src_reg).Base.Negate = ~(yyval.src_reg).Base.Negate;
	   }

	   (yyval.src_reg).Base.Abs = 1;
	   (yyval.src_reg).Base.Swizzle = _mesa_combine_swizzles((yyval.src_reg).Base.Swizzle,
						    (yyvsp[-1].swiz_mask).swizzle);
	}
#line 2423 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 54:
#line 640 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.dst_reg) = (yyvsp[-2].dst_reg);
	   (yyval.dst_reg).WriteMask = (yyvsp[-1].swiz_mask).mask;
	   (yyval.dst_reg).CondMask = (yyvsp[0].dst_reg).CondMask;
	   (yyval.dst_reg).CondSwizzle = (yyvsp[0].dst_reg).CondSwizzle;

	   if ((yyval.dst_reg).File == PROGRAM_OUTPUT) {
	      /* Technically speaking, this should check that it is in
	       * vertex program mode.  However, PositionInvariant can never be
	       * set in fragment program mode, so it is somewhat irrelevant.
	       */
	      if (state->option.PositionInvariant
	       && ((yyval.dst_reg).Index == VARYING_SLOT_POS)) {
		 yyerror(& (yylsp[-2]), state, "position-invariant programs cannot "
			 "write position");
		 YYERROR;
	      }

	      state->prog->OutputsWritten |= BITFIELD64_BIT((yyval.dst_reg).Index);
	   }
	}
#line 2449 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 55:
#line 664 "program/program_parse.y" /* yacc.c:1646  */
    {
	   set_dst_reg(& (yyval.dst_reg), PROGRAM_ADDRESS, 0);
	   (yyval.dst_reg).WriteMask = (yyvsp[0].swiz_mask).mask;
	}
#line 2458 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 56:
#line 671 "program/program_parse.y" /* yacc.c:1646  */
    {
	   const unsigned xyzw_valid =
	      ((yyvsp[-6].ext_swizzle).xyzw_valid << 0)
	      | ((yyvsp[-4].ext_swizzle).xyzw_valid << 1)
	      | ((yyvsp[-2].ext_swizzle).xyzw_valid << 2)
	      | ((yyvsp[0].ext_swizzle).xyzw_valid << 3);
	   const unsigned rgba_valid =
	      ((yyvsp[-6].ext_swizzle).rgba_valid << 0)
	      | ((yyvsp[-4].ext_swizzle).rgba_valid << 1)
	      | ((yyvsp[-2].ext_swizzle).rgba_valid << 2)
	      | ((yyvsp[0].ext_swizzle).rgba_valid << 3);

	   /* All of the swizzle components have to be valid in either RGBA
	    * or XYZW.  Note that 0 and 1 are valid in both, so both masks
	    * can have some bits set.
	    *
	    * We somewhat deviate from the spec here.  It would be really hard
	    * to figure out which component is the error, and there probably
	    * isn't a lot of benefit.
	    */
	   if ((rgba_valid != 0x0f) && (xyzw_valid != 0x0f)) {
	      yyerror(& (yylsp[-6]), state, "cannot combine RGBA and XYZW swizzle "
		      "components");
	      YYERROR;
	   }

	   (yyval.swiz_mask).swizzle = MAKE_SWIZZLE4((yyvsp[-6].ext_swizzle).swz, (yyvsp[-4].ext_swizzle).swz, (yyvsp[-2].ext_swizzle).swz, (yyvsp[0].ext_swizzle).swz);
	   (yyval.swiz_mask).mask = ((yyvsp[-6].ext_swizzle).negate) | ((yyvsp[-4].ext_swizzle).negate << 1) | ((yyvsp[-2].ext_swizzle).negate << 2)
	      | ((yyvsp[0].ext_swizzle).negate << 3);
	}
#line 2493 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 57:
#line 704 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.ext_swizzle) = (yyvsp[0].ext_swizzle);
	   (yyval.ext_swizzle).negate = ((yyvsp[-1].negate)) ? 1 : 0;
	}
#line 2502 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 58:
#line 711 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (((yyvsp[0].integer) != 0) && ((yyvsp[0].integer) != 1)) {
	      yyerror(& (yylsp[0]), state, "invalid extended swizzle selector");
	      YYERROR;
	   }

	   (yyval.ext_swizzle).swz = ((yyvsp[0].integer) == 0) ? SWIZZLE_ZERO : SWIZZLE_ONE;
           (yyval.ext_swizzle).negate = 0;

	   /* 0 and 1 are valid for both RGBA swizzle names and XYZW
	    * swizzle names.
	    */
	   (yyval.ext_swizzle).xyzw_valid = 1;
	   (yyval.ext_swizzle).rgba_valid = 1;
	}
#line 2522 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 59:
#line 727 "program/program_parse.y" /* yacc.c:1646  */
    {
	   char s;

	   if (strlen((yyvsp[0].string)) > 1) {
	      yyerror(& (yylsp[0]), state, "invalid extended swizzle selector");
	      YYERROR;
	   }

	   s = (yyvsp[0].string)[0];
	   free((yyvsp[0].string));

           (yyval.ext_swizzle).rgba_valid = 0;
           (yyval.ext_swizzle).xyzw_valid = 0;
           (yyval.ext_swizzle).negate = 0;

	   switch (s) {
	   case 'x':
	      (yyval.ext_swizzle).swz = SWIZZLE_X;
	      (yyval.ext_swizzle).xyzw_valid = 1;
	      break;
	   case 'y':
	      (yyval.ext_swizzle).swz = SWIZZLE_Y;
	      (yyval.ext_swizzle).xyzw_valid = 1;
	      break;
	   case 'z':
	      (yyval.ext_swizzle).swz = SWIZZLE_Z;
	      (yyval.ext_swizzle).xyzw_valid = 1;
	      break;
	   case 'w':
	      (yyval.ext_swizzle).swz = SWIZZLE_W;
	      (yyval.ext_swizzle).xyzw_valid = 1;
	      break;

	   case 'r':
	      (yyval.ext_swizzle).swz = SWIZZLE_X;
	      (yyval.ext_swizzle).rgba_valid = 1;
	      break;
	   case 'g':
	      (yyval.ext_swizzle).swz = SWIZZLE_Y;
	      (yyval.ext_swizzle).rgba_valid = 1;
	      break;
	   case 'b':
	      (yyval.ext_swizzle).swz = SWIZZLE_Z;
	      (yyval.ext_swizzle).rgba_valid = 1;
	      break;
	   case 'a':
	      (yyval.ext_swizzle).swz = SWIZZLE_W;
	      (yyval.ext_swizzle).rgba_valid = 1;
	      break;

	   default:
	      yyerror(& (yylsp[0]), state, "invalid extended swizzle selector");
	      YYERROR;
	      break;
	   }
	}
#line 2583 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 60:
#line 786 "program/program_parse.y" /* yacc.c:1646  */
    {
	   struct asm_symbol *const s = (struct asm_symbol *)
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[0].string));

	   free((yyvsp[0].string));

	   if (s == NULL) {
	      yyerror(& (yylsp[0]), state, "invalid operand variable");
	      YYERROR;
	   } else if ((s->type != at_param) && (s->type != at_temp)
		      && (s->type != at_attrib)) {
	      yyerror(& (yylsp[0]), state, "invalid operand variable");
	      YYERROR;
	   } else if ((s->type == at_param) && s->param_is_array) {
	      yyerror(& (yylsp[0]), state, "non-array access to array PARAM");
	      YYERROR;
	   }

	   init_src_reg(& (yyval.src_reg));
	   switch (s->type) {
	   case at_temp:
	      set_src_reg(& (yyval.src_reg), PROGRAM_TEMPORARY, s->temp_binding);
	      break;
	   case at_param:
              set_src_reg_swz(& (yyval.src_reg), s->param_binding_type,
                              s->param_binding_begin,
                              s->param_binding_swizzle);
	      break;
	   case at_attrib:
	      set_src_reg(& (yyval.src_reg), PROGRAM_INPUT, s->attrib_binding);
	      state->prog->InputsRead |= BITFIELD64_BIT((yyval.src_reg).Base.Index);

	      if (!validate_inputs(& (yylsp[0]), state)) {
		 YYERROR;
	      }
	      break;

	   default:
	      YYERROR;
	      break;
	   }
	}
#line 2630 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 61:
#line 829 "program/program_parse.y" /* yacc.c:1646  */
    {
	   set_src_reg(& (yyval.src_reg), PROGRAM_INPUT, (yyvsp[0].attrib));
	   state->prog->InputsRead |= BITFIELD64_BIT((yyval.src_reg).Base.Index);

	   if (!validate_inputs(& (yylsp[0]), state)) {
	      YYERROR;
	   }
	}
#line 2643 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 62:
#line 838 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (! (yyvsp[-1].src_reg).Base.RelAddr
	       && ((unsigned) (yyvsp[-1].src_reg).Base.Index >= (yyvsp[-3].sym)->param_binding_length)) {
	      yyerror(& (yylsp[-1]), state, "out of bounds array access");
	      YYERROR;
	   }

	   init_src_reg(& (yyval.src_reg));
	   (yyval.src_reg).Base.File = (yyvsp[-3].sym)->param_binding_type;

	   if ((yyvsp[-1].src_reg).Base.RelAddr) {
              state->prog->IndirectRegisterFiles |= (1 << (yyval.src_reg).Base.File);
	      (yyvsp[-3].sym)->param_accessed_indirectly = 1;

	      (yyval.src_reg).Base.RelAddr = 1;
	      (yyval.src_reg).Base.Index = (yyvsp[-1].src_reg).Base.Index;
	      (yyval.src_reg).Symbol = (yyvsp[-3].sym);
	   } else {
	      (yyval.src_reg).Base.Index = (yyvsp[-3].sym)->param_binding_begin + (yyvsp[-1].src_reg).Base.Index;
	   }
	}
#line 2669 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 63:
#line 860 "program/program_parse.y" /* yacc.c:1646  */
    {
           gl_register_file file = ((yyvsp[0].temp_sym).name != NULL) 
	      ? (yyvsp[0].temp_sym).param_binding_type
	      : PROGRAM_CONSTANT;
           set_src_reg_swz(& (yyval.src_reg), file, (yyvsp[0].temp_sym).param_binding_begin,
                           (yyvsp[0].temp_sym).param_binding_swizzle);
	}
#line 2681 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 64:
#line 870 "program/program_parse.y" /* yacc.c:1646  */
    {
	   set_dst_reg(& (yyval.dst_reg), PROGRAM_OUTPUT, (yyvsp[0].result));
	}
#line 2689 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 65:
#line 874 "program/program_parse.y" /* yacc.c:1646  */
    {
	   struct asm_symbol *const s = (struct asm_symbol *)
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[0].string));

	   free((yyvsp[0].string));

	   if (s == NULL) {
	      yyerror(& (yylsp[0]), state, "invalid operand variable");
	      YYERROR;
	   } else if ((s->type != at_output) && (s->type != at_temp)) {
	      yyerror(& (yylsp[0]), state, "invalid operand variable");
	      YYERROR;
	   }

	   switch (s->type) {
	   case at_temp:
	      set_dst_reg(& (yyval.dst_reg), PROGRAM_TEMPORARY, s->temp_binding);
	      break;
	   case at_output:
	      set_dst_reg(& (yyval.dst_reg), PROGRAM_OUTPUT, s->output_binding);
	      break;
	   default:
	      set_dst_reg(& (yyval.dst_reg), s->param_binding_type, s->param_binding_begin);
	      break;
	   }
	}
#line 2720 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 66:
#line 903 "program/program_parse.y" /* yacc.c:1646  */
    {
	   struct asm_symbol *const s = (struct asm_symbol *)
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[0].string));

	   free((yyvsp[0].string));

	   if (s == NULL) {
	      yyerror(& (yylsp[0]), state, "invalid operand variable");
	      YYERROR;
	   } else if ((s->type != at_param) || !s->param_is_array) {
	      yyerror(& (yylsp[0]), state, "array access to non-PARAM variable");
	      YYERROR;
	   } else {
	      (yyval.sym) = s;
	   }
	}
#line 2741 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 69:
#line 924 "program/program_parse.y" /* yacc.c:1646  */
    {
	   init_src_reg(& (yyval.src_reg));
	   (yyval.src_reg).Base.Index = (yyvsp[0].integer);
	}
#line 2750 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 70:
#line 931 "program/program_parse.y" /* yacc.c:1646  */
    {
	   /* FINISHME: Add support for multiple address registers.
	    */
	   /* FINISHME: Add support for 4-component address registers.
	    */
	   init_src_reg(& (yyval.src_reg));
	   (yyval.src_reg).Base.RelAddr = 1;
	   (yyval.src_reg).Base.Index = (yyvsp[0].integer);
	}
#line 2764 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 71:
#line 942 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = 0; }
#line 2770 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 72:
#line 943 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = (yyvsp[0].integer); }
#line 2776 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 73:
#line 944 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = -(yyvsp[0].integer); }
#line 2782 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 74:
#line 948 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (((yyvsp[0].integer) < 0) || ((yyvsp[0].integer) > (state->limits->MaxAddressOffset - 1))) {
              char s[100];
              _mesa_snprintf(s, sizeof(s),
                             "relative address offset too large (%d)", (yyvsp[0].integer));
	      yyerror(& (yylsp[0]), state, s);
	      YYERROR;
	   } else {
	      (yyval.integer) = (yyvsp[0].integer);
	   }
	}
#line 2798 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 75:
#line 962 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (((yyvsp[0].integer) < 0) || ((yyvsp[0].integer) > state->limits->MaxAddressOffset)) {
              char s[100];
              _mesa_snprintf(s, sizeof(s),
                             "relative address offset too large (%d)", (yyvsp[0].integer));
	      yyerror(& (yylsp[0]), state, s);
	      YYERROR;
	   } else {
	      (yyval.integer) = (yyvsp[0].integer);
	   }
	}
#line 2814 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 76:
#line 976 "program/program_parse.y" /* yacc.c:1646  */
    {
	   struct asm_symbol *const s = (struct asm_symbol *)
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[0].string));

	   free((yyvsp[0].string));

	   if (s == NULL) {
	      yyerror(& (yylsp[0]), state, "invalid array member");
	      YYERROR;
	   } else if (s->type != at_address) {
	      yyerror(& (yylsp[0]), state,
		      "invalid variable for indexed array access");
	      YYERROR;
	   } else {
	      (yyval.sym) = s;
	   }
	}
#line 2836 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 77:
#line 996 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if ((yyvsp[0].swiz_mask).mask != WRITEMASK_X) {
	      yyerror(& (yylsp[0]), state, "invalid address component selector");
	      YYERROR;
	   } else {
	      (yyval.swiz_mask) = (yyvsp[0].swiz_mask);
	   }
	}
#line 2849 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 78:
#line 1007 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if ((yyvsp[0].swiz_mask).mask != WRITEMASK_X) {
	      yyerror(& (yylsp[0]), state,
		      "address register write mask must be \".x\"");
	      YYERROR;
	   } else {
	      (yyval.swiz_mask) = (yyvsp[0].swiz_mask);
	   }
	}
#line 2863 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 83:
#line 1023 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.swiz_mask).swizzle = SWIZZLE_NOOP; (yyval.swiz_mask).mask = WRITEMASK_XYZW; }
#line 2869 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 88:
#line 1027 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.swiz_mask).swizzle = SWIZZLE_NOOP; (yyval.swiz_mask).mask = WRITEMASK_XYZW; }
#line 2875 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 89:
#line 1031 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.dst_reg) = (yyvsp[-1].dst_reg);
	}
#line 2883 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 90:
#line 1035 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.dst_reg) = (yyvsp[-1].dst_reg);
	}
#line 2891 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 91:
#line 1039 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.dst_reg).CondMask = COND_TR;
	   (yyval.dst_reg).CondSwizzle = SWIZZLE_NOOP;
	}
#line 2900 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 92:
#line 1046 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.dst_reg) = (yyvsp[-1].dst_reg);
	   (yyval.dst_reg).CondSwizzle = (yyvsp[0].swiz_mask).swizzle;
	}
#line 2909 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 93:
#line 1053 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.dst_reg) = (yyvsp[-1].dst_reg);
	   (yyval.dst_reg).CondSwizzle = (yyvsp[0].swiz_mask).swizzle;
	}
#line 2918 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 94:
#line 1060 "program/program_parse.y" /* yacc.c:1646  */
    {
	   const int cond = _mesa_parse_cc((yyvsp[0].string));
	   if ((cond == 0) || ((yyvsp[0].string)[2] != '\0')) {
	      char *const err_str =
		 make_error_string("invalid condition code \"%s\"", (yyvsp[0].string));

	      yyerror(& (yylsp[0]), state, (err_str != NULL)
		      ? err_str : "invalid condition code");

	      if (err_str != NULL) {
		 free(err_str);
	      }

	      YYERROR;
	   }

	   (yyval.dst_reg).CondMask = cond;
	   (yyval.dst_reg).CondSwizzle = SWIZZLE_NOOP;
	}
#line 2942 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 95:
#line 1082 "program/program_parse.y" /* yacc.c:1646  */
    {
	   const int cond = _mesa_parse_cc((yyvsp[0].string));
	   if ((cond == 0) || ((yyvsp[0].string)[2] != '\0')) {
	      char *const err_str =
		 make_error_string("invalid condition code \"%s\"", (yyvsp[0].string));

	      yyerror(& (yylsp[0]), state, (err_str != NULL)
		      ? err_str : "invalid condition code");

	      if (err_str != NULL) {
		 free(err_str);
	      }

	      YYERROR;
	   }

	   (yyval.dst_reg).CondMask = cond;
	   (yyval.dst_reg).CondSwizzle = SWIZZLE_NOOP;
	}
#line 2966 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 102:
#line 1112 "program/program_parse.y" /* yacc.c:1646  */
    {
	   struct asm_symbol *const s =
	      declare_variable(state, (yyvsp[-2].string), at_attrib, & (yylsp[-2]));

	   if (s == NULL) {
	      free((yyvsp[-2].string));
	      YYERROR;
	   } else {
	      s->attrib_binding = (yyvsp[0].attrib);
	      state->InputsBound |= BITFIELD64_BIT(s->attrib_binding);

	      if (!validate_inputs(& (yylsp[0]), state)) {
		 YYERROR;
	      }
	   }
	}
#line 2987 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 103:
#line 1131 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.attrib) = (yyvsp[0].attrib);
	}
#line 2995 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 104:
#line 1135 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.attrib) = (yyvsp[0].attrib);
	}
#line 3003 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 105:
#line 1141 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.attrib) = VERT_ATTRIB_POS;
	}
#line 3011 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 106:
#line 1145 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.attrib) = VERT_ATTRIB_WEIGHT;
	}
#line 3019 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 107:
#line 1149 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.attrib) = VERT_ATTRIB_NORMAL;
	}
#line 3027 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 108:
#line 1153 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.attrib) = VERT_ATTRIB_COLOR0 + (yyvsp[0].integer);
	}
#line 3035 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 109:
#line 1157 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.attrib) = VERT_ATTRIB_FOG;
	}
#line 3043 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 110:
#line 1161 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.attrib) = VERT_ATTRIB_TEX0 + (yyvsp[0].integer);
	}
#line 3051 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 111:
#line 1165 "program/program_parse.y" /* yacc.c:1646  */
    {
	   yyerror(& (yylsp[-3]), state, "GL_ARB_matrix_palette not supported");
	   YYERROR;
	}
#line 3060 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 112:
#line 1170 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.attrib) = VERT_ATTRIB_GENERIC0 + (yyvsp[-1].integer);
	}
#line 3068 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 113:
#line 1176 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if ((unsigned) (yyvsp[0].integer) >= state->limits->MaxAttribs) {
	      yyerror(& (yylsp[0]), state, "invalid vertex attribute reference");
	      YYERROR;
	   }

	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 3081 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 117:
#line 1190 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.attrib) = VARYING_SLOT_POS;
	}
#line 3089 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 118:
#line 1194 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.attrib) = VARYING_SLOT_COL0 + (yyvsp[0].integer);
	}
#line 3097 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 119:
#line 1198 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.attrib) = VARYING_SLOT_FOGC;
	}
#line 3105 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 120:
#line 1202 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.attrib) = VARYING_SLOT_TEX0 + (yyvsp[0].integer);
	}
#line 3113 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 123:
#line 1210 "program/program_parse.y" /* yacc.c:1646  */
    {
	   struct asm_symbol *const s =
	      declare_variable(state, (yyvsp[-1].string), at_param, & (yylsp[-1]));

	   if (s == NULL) {
	      free((yyvsp[-1].string));
	      YYERROR;
	   } else {
	      s->param_binding_type = (yyvsp[0].temp_sym).param_binding_type;
	      s->param_binding_begin = (yyvsp[0].temp_sym).param_binding_begin;
	      s->param_binding_length = (yyvsp[0].temp_sym).param_binding_length;
              s->param_binding_swizzle = (yyvsp[0].temp_sym).param_binding_swizzle;
	      s->param_is_array = 0;
	   }
	}
#line 3133 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 124:
#line 1228 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (((yyvsp[-2].integer) != 0) && ((unsigned) (yyvsp[-2].integer) != (yyvsp[0].temp_sym).param_binding_length)) {
	      free((yyvsp[-4].string));
	      yyerror(& (yylsp[-2]), state, 
		      "parameter array size and number of bindings must match");
	      YYERROR;
	   } else {
	      struct asm_symbol *const s =
		 declare_variable(state, (yyvsp[-4].string), (yyvsp[0].temp_sym).type, & (yylsp[-4]));

	      if (s == NULL) {
		 free((yyvsp[-4].string));
		 YYERROR;
	      } else {
		 s->param_binding_type = (yyvsp[0].temp_sym).param_binding_type;
		 s->param_binding_begin = (yyvsp[0].temp_sym).param_binding_begin;
		 s->param_binding_length = (yyvsp[0].temp_sym).param_binding_length;
                 s->param_binding_swizzle = SWIZZLE_XYZW;
		 s->param_is_array = 1;
	      }
	   }
	}
#line 3160 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 125:
#line 1253 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = 0;
	}
#line 3168 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 126:
#line 1257 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (((yyvsp[0].integer) < 1) || ((unsigned) (yyvsp[0].integer) > state->limits->MaxParameters)) {
              char msg[100];
              _mesa_snprintf(msg, sizeof(msg),
                             "invalid parameter array size (size=%d max=%u)",
                             (yyvsp[0].integer), state->limits->MaxParameters);
	      yyerror(& (yylsp[0]), state, msg);
	      YYERROR;
	   } else {
	      (yyval.integer) = (yyvsp[0].integer);
	   }
	}
#line 3185 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 127:
#line 1272 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.temp_sym) = (yyvsp[0].temp_sym);
	}
#line 3193 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 128:
#line 1278 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.temp_sym) = (yyvsp[-1].temp_sym);
	}
#line 3201 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 130:
#line 1285 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyvsp[-2].temp_sym).param_binding_length += (yyvsp[0].temp_sym).param_binding_length;
	   (yyval.temp_sym) = (yyvsp[-2].temp_sym);
	}
#line 3210 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 131:
#line 1292 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset(& (yyval.temp_sym), 0, sizeof((yyval.temp_sym)));
	   (yyval.temp_sym).param_binding_begin = ~0;
	   initialize_symbol_from_state(state->prog, & (yyval.temp_sym), (yyvsp[0].state));
	}
#line 3220 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 132:
#line 1298 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset(& (yyval.temp_sym), 0, sizeof((yyval.temp_sym)));
	   (yyval.temp_sym).param_binding_begin = ~0;
	   initialize_symbol_from_param(state->prog, & (yyval.temp_sym), (yyvsp[0].state));
	}
#line 3230 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 133:
#line 1304 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset(& (yyval.temp_sym), 0, sizeof((yyval.temp_sym)));
	   (yyval.temp_sym).param_binding_begin = ~0;
	   initialize_symbol_from_const(state->prog, & (yyval.temp_sym), & (yyvsp[0].vector), GL_TRUE);
	}
#line 3240 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 134:
#line 1312 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset(& (yyval.temp_sym), 0, sizeof((yyval.temp_sym)));
	   (yyval.temp_sym).param_binding_begin = ~0;
	   initialize_symbol_from_state(state->prog, & (yyval.temp_sym), (yyvsp[0].state));
	}
#line 3250 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 135:
#line 1318 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset(& (yyval.temp_sym), 0, sizeof((yyval.temp_sym)));
	   (yyval.temp_sym).param_binding_begin = ~0;
	   initialize_symbol_from_param(state->prog, & (yyval.temp_sym), (yyvsp[0].state));
	}
#line 3260 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 136:
#line 1324 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset(& (yyval.temp_sym), 0, sizeof((yyval.temp_sym)));
	   (yyval.temp_sym).param_binding_begin = ~0;
	   initialize_symbol_from_const(state->prog, & (yyval.temp_sym), & (yyvsp[0].vector), GL_TRUE);
	}
#line 3270 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 137:
#line 1332 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset(& (yyval.temp_sym), 0, sizeof((yyval.temp_sym)));
	   (yyval.temp_sym).param_binding_begin = ~0;
	   initialize_symbol_from_state(state->prog, & (yyval.temp_sym), (yyvsp[0].state));
	}
#line 3280 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 138:
#line 1338 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset(& (yyval.temp_sym), 0, sizeof((yyval.temp_sym)));
	   (yyval.temp_sym).param_binding_begin = ~0;
	   initialize_symbol_from_param(state->prog, & (yyval.temp_sym), (yyvsp[0].state));
	}
#line 3290 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 139:
#line 1344 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset(& (yyval.temp_sym), 0, sizeof((yyval.temp_sym)));
	   (yyval.temp_sym).param_binding_begin = ~0;
	   initialize_symbol_from_const(state->prog, & (yyval.temp_sym), & (yyvsp[0].vector), GL_FALSE);
	}
#line 3300 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 140:
#line 1351 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3306 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 141:
#line 1352 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3312 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 142:
#line 1355 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3318 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 143:
#line 1356 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3324 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 144:
#line 1357 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3330 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 145:
#line 1358 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3336 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 146:
#line 1359 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3342 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 147:
#line 1360 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3348 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 148:
#line 1361 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3354 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 149:
#line 1362 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3360 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 150:
#line 1363 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3366 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 151:
#line 1364 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3372 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 152:
#line 1365 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3378 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 153:
#line 1369 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = STATE_MATERIAL;
	   (yyval.state)[1] = (yyvsp[-1].integer);
	   (yyval.state)[2] = (yyvsp[0].integer);
	}
#line 3389 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 154:
#line 1378 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 3397 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 155:
#line 1382 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_EMISSION;
	}
#line 3405 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 156:
#line 1386 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_SHININESS;
	}
#line 3413 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 157:
#line 1392 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = STATE_LIGHT;
	   (yyval.state)[1] = (yyvsp[-2].integer);
	   (yyval.state)[2] = (yyvsp[0].integer);
	}
#line 3424 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 158:
#line 1401 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 3432 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 159:
#line 1405 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_POSITION;
	}
#line 3440 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 160:
#line 1409 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (!state->ctx->Extensions.EXT_point_parameters) {
	      yyerror(& (yylsp[0]), state, "GL_ARB_point_parameters not supported");
	      YYERROR;
	   }

	   (yyval.integer) = STATE_ATTENUATION;
	}
#line 3453 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 161:
#line 1418 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 3461 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 162:
#line 1422 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_HALF_VECTOR;
	}
#line 3469 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 163:
#line 1428 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_SPOT_DIRECTION;
	}
#line 3477 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 164:
#line 1434 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.state)[0] = (yyvsp[0].state)[0];
	   (yyval.state)[1] = (yyvsp[0].state)[1];
	}
#line 3486 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 165:
#line 1441 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = STATE_LIGHTMODEL_AMBIENT;
	}
#line 3495 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 166:
#line 1446 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = STATE_LIGHTMODEL_SCENECOLOR;
	   (yyval.state)[1] = (yyvsp[-1].integer);
	}
#line 3505 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 167:
#line 1454 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = STATE_LIGHTPROD;
	   (yyval.state)[1] = (yyvsp[-3].integer);
	   (yyval.state)[2] = (yyvsp[-1].integer);
	   (yyval.state)[3] = (yyvsp[0].integer);
	}
#line 3517 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 169:
#line 1466 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = (yyvsp[0].integer);
	   (yyval.state)[1] = (yyvsp[-1].integer);
	}
#line 3527 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 170:
#line 1474 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_TEXENV_COLOR;
	}
#line 3535 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 171:
#line 1480 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_AMBIENT;
	}
#line 3543 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 172:
#line 1484 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_DIFFUSE;
	}
#line 3551 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 173:
#line 1488 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_SPECULAR;
	}
#line 3559 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 174:
#line 1494 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if ((unsigned) (yyvsp[0].integer) >= state->MaxLights) {
	      yyerror(& (yylsp[0]), state, "invalid light selector");
	      YYERROR;
	   }

	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 3572 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 175:
#line 1505 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = STATE_TEXGEN;
	   (yyval.state)[1] = (yyvsp[-2].integer);
	   (yyval.state)[2] = (yyvsp[-1].integer) + (yyvsp[0].integer);
	}
#line 3583 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 176:
#line 1514 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_TEXGEN_EYE_S;
	}
#line 3591 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 177:
#line 1518 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_TEXGEN_OBJECT_S;
	}
#line 3599 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 178:
#line 1523 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_TEXGEN_EYE_S - STATE_TEXGEN_EYE_S;
	}
#line 3607 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 179:
#line 1527 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_TEXGEN_EYE_T - STATE_TEXGEN_EYE_S;
	}
#line 3615 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 180:
#line 1531 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_TEXGEN_EYE_R - STATE_TEXGEN_EYE_S;
	}
#line 3623 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 181:
#line 1535 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_TEXGEN_EYE_Q - STATE_TEXGEN_EYE_S;
	}
#line 3631 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 182:
#line 1541 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = (yyvsp[0].integer);
	}
#line 3640 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 183:
#line 1548 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_FOG_COLOR;
	}
#line 3648 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 184:
#line 1552 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_FOG_PARAMS;
	}
#line 3656 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 185:
#line 1558 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = STATE_CLIPPLANE;
	   (yyval.state)[1] = (yyvsp[-2].integer);
	}
#line 3666 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 186:
#line 1566 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if ((unsigned) (yyvsp[0].integer) >= state->MaxClipPlanes) {
	      yyerror(& (yylsp[0]), state, "invalid clip plane selector");
	      YYERROR;
	   }

	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 3679 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 187:
#line 1577 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = (yyvsp[0].integer);
	}
#line 3688 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 188:
#line 1584 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_POINT_SIZE;
	}
#line 3696 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 189:
#line 1588 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_POINT_ATTENUATION;
	}
#line 3704 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 190:
#line 1594 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.state)[0] = (yyvsp[-4].state)[0];
	   (yyval.state)[1] = (yyvsp[-4].state)[1];
	   (yyval.state)[2] = (yyvsp[-1].integer);
	   (yyval.state)[3] = (yyvsp[-1].integer);
	   (yyval.state)[4] = (yyvsp[-4].state)[2];
	}
#line 3716 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 191:
#line 1604 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.state)[0] = (yyvsp[-1].state)[0];
	   (yyval.state)[1] = (yyvsp[-1].state)[1];
	   (yyval.state)[2] = (yyvsp[0].state)[2];
	   (yyval.state)[3] = (yyvsp[0].state)[3];
	   (yyval.state)[4] = (yyvsp[-1].state)[2];
	}
#line 3728 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 192:
#line 1614 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.state)[2] = 0;
	   (yyval.state)[3] = 3;
	}
#line 3737 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 193:
#line 1619 "program/program_parse.y" /* yacc.c:1646  */
    {
	   /* It seems logical that the matrix row range specifier would have
	    * to specify a range or more than one row (i.e., $5 > $3).
	    * However, the ARB_vertex_program spec says "a program will fail
	    * to load if <a> is greater than <b>."  This means that $3 == $5
	    * is valid.
	    */
	   if ((yyvsp[-3].integer) > (yyvsp[-1].integer)) {
	      yyerror(& (yylsp[-3]), state, "invalid matrix row range");
	      YYERROR;
	   }

	   (yyval.state)[2] = (yyvsp[-3].integer);
	   (yyval.state)[3] = (yyvsp[-1].integer);
	}
#line 3757 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 194:
#line 1637 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.state)[0] = (yyvsp[-1].state)[0];
	   (yyval.state)[1] = (yyvsp[-1].state)[1];
	   (yyval.state)[2] = (yyvsp[0].integer);
	}
#line 3767 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 195:
#line 1645 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = 0;
	}
#line 3775 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 196:
#line 1649 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 3783 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 197:
#line 1655 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_MATRIX_INVERSE;
	}
#line 3791 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 198:
#line 1659 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_MATRIX_TRANSPOSE;
	}
#line 3799 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 199:
#line 1663 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = STATE_MATRIX_INVTRANS;
	}
#line 3807 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 200:
#line 1669 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if ((yyvsp[0].integer) > 3) {
	      yyerror(& (yylsp[0]), state, "invalid matrix row reference");
	      YYERROR;
	   }

	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 3820 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 201:
#line 1680 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.state)[0] = STATE_MODELVIEW_MATRIX;
	   (yyval.state)[1] = (yyvsp[0].integer);
	}
#line 3829 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 202:
#line 1685 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.state)[0] = STATE_PROJECTION_MATRIX;
	   (yyval.state)[1] = 0;
	}
#line 3838 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 203:
#line 1690 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.state)[0] = STATE_MVP_MATRIX;
	   (yyval.state)[1] = 0;
	}
#line 3847 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 204:
#line 1695 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.state)[0] = STATE_TEXTURE_MATRIX;
	   (yyval.state)[1] = (yyvsp[0].integer);
	}
#line 3856 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 205:
#line 1700 "program/program_parse.y" /* yacc.c:1646  */
    {
	   yyerror(& (yylsp[-3]), state, "GL_ARB_matrix_palette not supported");
	   YYERROR;
	}
#line 3865 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 206:
#line 1705 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.state)[0] = STATE_PROGRAM_MATRIX;
	   (yyval.state)[1] = (yyvsp[-1].integer);
	}
#line 3874 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 207:
#line 1712 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = 0;
	}
#line 3882 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 208:
#line 1716 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = (yyvsp[-1].integer);
	}
#line 3890 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 209:
#line 1721 "program/program_parse.y" /* yacc.c:1646  */
    {
	   /* Since GL_ARB_vertex_blend isn't supported, only modelview matrix
	    * zero is valid.
	    */
	   if ((yyvsp[0].integer) != 0) {
	      yyerror(& (yylsp[0]), state, "invalid modelview matrix index");
	      YYERROR;
	   }

	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 3906 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 210:
#line 1734 "program/program_parse.y" /* yacc.c:1646  */
    {
	   /* Since GL_ARB_matrix_palette isn't supported, just let any value
	    * through here.  The error will be generated later.
	    */
	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 3917 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 211:
#line 1742 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if ((unsigned) (yyvsp[0].integer) >= state->MaxProgramMatrices) {
	      yyerror(& (yylsp[0]), state, "invalid program matrix selector");
	      YYERROR;
	   }

	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 3930 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 212:
#line 1753 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = STATE_DEPTH_RANGE;
	}
#line 3939 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 217:
#line 1765 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = state->state_param_enum;
	   (yyval.state)[1] = STATE_ENV;
	   (yyval.state)[2] = (yyvsp[-1].state)[0];
	   (yyval.state)[3] = (yyvsp[-1].state)[1];
	}
#line 3951 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 218:
#line 1775 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.state)[0] = (yyvsp[0].integer);
	   (yyval.state)[1] = (yyvsp[0].integer);
	}
#line 3960 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 219:
#line 1780 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.state)[0] = (yyvsp[-2].integer);
	   (yyval.state)[1] = (yyvsp[0].integer);
	}
#line 3969 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 220:
#line 1787 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = state->state_param_enum;
	   (yyval.state)[1] = STATE_ENV;
	   (yyval.state)[2] = (yyvsp[-1].integer);
	   (yyval.state)[3] = (yyvsp[-1].integer);
	}
#line 3981 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 221:
#line 1797 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = state->state_param_enum;
	   (yyval.state)[1] = STATE_LOCAL;
	   (yyval.state)[2] = (yyvsp[-1].state)[0];
	   (yyval.state)[3] = (yyvsp[-1].state)[1];
	}
#line 3993 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 222:
#line 1806 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.state)[0] = (yyvsp[0].integer);
	   (yyval.state)[1] = (yyvsp[0].integer);
	}
#line 4002 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 223:
#line 1811 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.state)[0] = (yyvsp[-2].integer);
	   (yyval.state)[1] = (yyvsp[0].integer);
	}
#line 4011 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 224:
#line 1818 "program/program_parse.y" /* yacc.c:1646  */
    {
	   memset((yyval.state), 0, sizeof((yyval.state)));
	   (yyval.state)[0] = state->state_param_enum;
	   (yyval.state)[1] = STATE_LOCAL;
	   (yyval.state)[2] = (yyvsp[-1].integer);
	   (yyval.state)[3] = (yyvsp[-1].integer);
	}
#line 4023 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 225:
#line 1828 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if ((unsigned) (yyvsp[0].integer) >= state->limits->MaxEnvParams) {
	      yyerror(& (yylsp[0]), state, "invalid environment parameter reference");
	      YYERROR;
	   }
	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 4035 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 226:
#line 1838 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if ((unsigned) (yyvsp[0].integer) >= state->limits->MaxLocalParams) {
	      yyerror(& (yylsp[0]), state, "invalid local parameter reference");
	      YYERROR;
	   }
	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 4047 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 231:
#line 1853 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.vector).count = 4;
	   (yyval.vector).data[0].f = (yyvsp[0].real);
	   (yyval.vector).data[1].f = (yyvsp[0].real);
	   (yyval.vector).data[2].f = (yyvsp[0].real);
	   (yyval.vector).data[3].f = (yyvsp[0].real);
	}
#line 4059 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 232:
#line 1863 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.vector).count = 1;
	   (yyval.vector).data[0].f = (yyvsp[0].real);
	   (yyval.vector).data[1].f = (yyvsp[0].real);
	   (yyval.vector).data[2].f = (yyvsp[0].real);
	   (yyval.vector).data[3].f = (yyvsp[0].real);
	}
#line 4071 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 233:
#line 1871 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.vector).count = 1;
	   (yyval.vector).data[0].f = (float) (yyvsp[0].integer);
	   (yyval.vector).data[1].f = (float) (yyvsp[0].integer);
	   (yyval.vector).data[2].f = (float) (yyvsp[0].integer);
	   (yyval.vector).data[3].f = (float) (yyvsp[0].integer);
	}
#line 4083 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 234:
#line 1881 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.vector).count = 4;
	   (yyval.vector).data[0].f = (yyvsp[-1].real);
	   (yyval.vector).data[1].f = 0.0f;
	   (yyval.vector).data[2].f = 0.0f;
	   (yyval.vector).data[3].f = 1.0f;
	}
#line 4095 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 235:
#line 1889 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.vector).count = 4;
	   (yyval.vector).data[0].f = (yyvsp[-3].real);
	   (yyval.vector).data[1].f = (yyvsp[-1].real);
	   (yyval.vector).data[2].f = 0.0f;
	   (yyval.vector).data[3].f = 1.0f;
	}
#line 4107 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 236:
#line 1898 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.vector).count = 4;
	   (yyval.vector).data[0].f = (yyvsp[-5].real);
	   (yyval.vector).data[1].f = (yyvsp[-3].real);
	   (yyval.vector).data[2].f = (yyvsp[-1].real);
	   (yyval.vector).data[3].f = 1.0f;
	}
#line 4119 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 237:
#line 1907 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.vector).count = 4;
	   (yyval.vector).data[0].f = (yyvsp[-7].real);
	   (yyval.vector).data[1].f = (yyvsp[-5].real);
	   (yyval.vector).data[2].f = (yyvsp[-3].real);
	   (yyval.vector).data[3].f = (yyvsp[-1].real);
	}
#line 4131 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 238:
#line 1917 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.real) = ((yyvsp[-1].negate)) ? -(yyvsp[0].real) : (yyvsp[0].real);
	}
#line 4139 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 239:
#line 1921 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.real) = (float)(((yyvsp[-1].negate)) ? -(yyvsp[0].integer) : (yyvsp[0].integer));
	}
#line 4147 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 240:
#line 1926 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.negate) = FALSE; }
#line 4153 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 241:
#line 1927 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.negate) = TRUE;  }
#line 4159 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 242:
#line 1928 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.negate) = FALSE; }
#line 4165 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 243:
#line 1931 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = (yyvsp[0].integer); }
#line 4171 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 245:
#line 1935 "program/program_parse.y" /* yacc.c:1646  */
    {
	   /* NV_fragment_program_option defines the size qualifiers in a
	    * fairly broken way.  "SHORT" or "LONG" can optionally be used
	    * before TEMP or OUTPUT.  However, neither is a reserved word!
	    * This means that we have to parse it as an identifier, then check
	    * to make sure it's one of the valid values.  *sigh*
	    *
	    * In addition, the grammar in the extension spec does *not* allow
	    * the size specifier to be optional, but all known implementations
	    * do.
	    */
	   if (!state->option.NV_fragment) {
	      yyerror(& (yylsp[0]), state, "unexpected IDENTIFIER");
	      YYERROR;
	   }

	   if (strcmp("SHORT", (yyvsp[0].string)) == 0) {
	   } else if (strcmp("LONG", (yyvsp[0].string)) == 0) {
	   } else {
	      char *const err_str =
		 make_error_string("invalid storage size specifier \"%s\"",
				   (yyvsp[0].string));

	      yyerror(& (yylsp[0]), state, (err_str != NULL)
		      ? err_str : "invalid storage size specifier");

	      if (err_str != NULL) {
		 free(err_str);
	      }

	      YYERROR;
	   }
	}
#line 4209 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 246:
#line 1969 "program/program_parse.y" /* yacc.c:1646  */
    {
	}
#line 4216 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 247:
#line 1973 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = (yyvsp[0].integer); }
#line 4222 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 249:
#line 1977 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (!declare_variable(state, (yyvsp[0].string), (yyvsp[-3].integer), & (yylsp[0]))) {
	      free((yyvsp[0].string));
	      YYERROR;
	   }
	}
#line 4233 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 250:
#line 1984 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (!declare_variable(state, (yyvsp[0].string), (yyvsp[-1].integer), & (yylsp[0]))) {
	      free((yyvsp[0].string));
	      YYERROR;
	   }
	}
#line 4244 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 251:
#line 1993 "program/program_parse.y" /* yacc.c:1646  */
    {
	   struct asm_symbol *const s =
	      declare_variable(state, (yyvsp[-2].string), at_output, & (yylsp[-2]));

	   if (s == NULL) {
	      free((yyvsp[-2].string));
	      YYERROR;
	   } else {
	      s->output_binding = (yyvsp[0].result);
	   }
	}
#line 4260 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 252:
#line 2007 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (state->mode == ARB_vertex) {
	      (yyval.result) = VARYING_SLOT_POS;
	   } else {
	      yyerror(& (yylsp[0]), state, "invalid program result name");
	      YYERROR;
	   }
	}
#line 4273 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 253:
#line 2016 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (state->mode == ARB_vertex) {
	      (yyval.result) = VARYING_SLOT_FOGC;
	   } else {
	      yyerror(& (yylsp[0]), state, "invalid program result name");
	      YYERROR;
	   }
	}
#line 4286 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 254:
#line 2025 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.result) = (yyvsp[0].result);
	}
#line 4294 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 255:
#line 2029 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (state->mode == ARB_vertex) {
	      (yyval.result) = VARYING_SLOT_PSIZ;
	   } else {
	      yyerror(& (yylsp[0]), state, "invalid program result name");
	      YYERROR;
	   }
	}
#line 4307 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 256:
#line 2038 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (state->mode == ARB_vertex) {
	      (yyval.result) = VARYING_SLOT_TEX0 + (yyvsp[0].integer);
	   } else {
	      yyerror(& (yylsp[-1]), state, "invalid program result name");
	      YYERROR;
	   }
	}
#line 4320 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 257:
#line 2047 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (state->mode == ARB_fragment) {
	      (yyval.result) = FRAG_RESULT_DEPTH;
	   } else {
	      yyerror(& (yylsp[0]), state, "invalid program result name");
	      YYERROR;
	   }
	}
#line 4333 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 258:
#line 2058 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.result) = (yyvsp[-1].integer) + (yyvsp[0].integer);
	}
#line 4341 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 259:
#line 2064 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (state->mode == ARB_vertex) {
	      (yyval.integer) = VARYING_SLOT_COL0;
	   } else {
	      if (state->option.DrawBuffers)
		 (yyval.integer) = FRAG_RESULT_DATA0;
	      else
		 (yyval.integer) = FRAG_RESULT_COLOR;
	   }
	}
#line 4356 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 260:
#line 2075 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (state->mode == ARB_vertex) {
	      yyerror(& (yylsp[-2]), state, "invalid program result name");
	      YYERROR;
	   } else {
	      if (!state->option.DrawBuffers) {
		 /* From the ARB_draw_buffers spec (same text exists
		  * for ATI_draw_buffers):
		  *
		  *     If this option is not specified, a fragment
		  *     program that attempts to bind
		  *     "result.color[n]" will fail to load, and only
		  *     "result.color" will be allowed.
		  */
		 yyerror(& (yylsp[-2]), state,
			 "result.color[] used without "
			 "`OPTION ARB_draw_buffers' or "
			 "`OPTION ATI_draw_buffers'");
		 YYERROR;
	      } else if ((yyvsp[-1].integer) >= state->MaxDrawBuffers) {
		 yyerror(& (yylsp[-2]), state,
			 "result.color[] exceeds MAX_DRAW_BUFFERS_ARB");
		 YYERROR;
	      }
	      (yyval.integer) = FRAG_RESULT_DATA0 + (yyvsp[-1].integer);
	   }
	}
#line 4388 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 261:
#line 2103 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (state->mode == ARB_vertex) {
	      (yyval.integer) = VARYING_SLOT_COL0;
	   } else {
	      yyerror(& (yylsp[0]), state, "invalid program result name");
	      YYERROR;
	   }
	}
#line 4401 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 262:
#line 2112 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (state->mode == ARB_vertex) {
	      (yyval.integer) = VARYING_SLOT_BFC0;
	   } else {
	      yyerror(& (yylsp[0]), state, "invalid program result name");
	      YYERROR;
	   }
	}
#line 4414 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 263:
#line 2123 "program/program_parse.y" /* yacc.c:1646  */
    {
	   (yyval.integer) = 0; 
	}
#line 4422 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 264:
#line 2127 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (state->mode == ARB_vertex) {
	      (yyval.integer) = 0;
	   } else {
	      yyerror(& (yylsp[0]), state, "invalid program result name");
	      YYERROR;
	   }
	}
#line 4435 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 265:
#line 2136 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if (state->mode == ARB_vertex) {
	      (yyval.integer) = 1;
	   } else {
	      yyerror(& (yylsp[0]), state, "invalid program result name");
	      YYERROR;
	   }
	}
#line 4448 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 266:
#line 2146 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = 0; }
#line 4454 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 267:
#line 2147 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = 0; }
#line 4460 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 268:
#line 2148 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = 1; }
#line 4466 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 269:
#line 2151 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = 0; }
#line 4472 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 270:
#line 2152 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = 0; }
#line 4478 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 271:
#line 2153 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = 1; }
#line 4484 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 272:
#line 2156 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = 0; }
#line 4490 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 273:
#line 2157 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = (yyvsp[-1].integer); }
#line 4496 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 274:
#line 2160 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = 0; }
#line 4502 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 275:
#line 2161 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = (yyvsp[-1].integer); }
#line 4508 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 276:
#line 2164 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = 0; }
#line 4514 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 277:
#line 2165 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = (yyvsp[-1].integer); }
#line 4520 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 278:
#line 2169 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if ((unsigned) (yyvsp[0].integer) >= state->MaxTextureCoordUnits) {
	      yyerror(& (yylsp[0]), state, "invalid texture coordinate unit selector");
	      YYERROR;
	   }

	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 4533 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 279:
#line 2180 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if ((unsigned) (yyvsp[0].integer) >= state->MaxTextureImageUnits) {
	      yyerror(& (yylsp[0]), state, "invalid texture image unit selector");
	      YYERROR;
	   }

	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 4546 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 280:
#line 2191 "program/program_parse.y" /* yacc.c:1646  */
    {
	   if ((unsigned) (yyvsp[0].integer) >= state->MaxTextureUnits) {
	      yyerror(& (yylsp[0]), state, "invalid texture unit selector");
	      YYERROR;
	   }

	   (yyval.integer) = (yyvsp[0].integer);
	}
#line 4559 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;

  case 281:
#line 2202 "program/program_parse.y" /* yacc.c:1646  */
    {
	   struct asm_symbol *exist = (struct asm_symbol *)
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[-2].string));
	   struct asm_symbol *target = (struct asm_symbol *)
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[0].string));

	   free((yyvsp[0].string));

	   if (exist != NULL) {
	      char m[1000];
	      _mesa_snprintf(m, sizeof(m), "redeclared identifier: %s", (yyvsp[-2].string));
	      free((yyvsp[-2].string));
	      yyerror(& (yylsp[-2]), state, m);
	      YYERROR;
	   } else if (target == NULL) {
	      free((yyvsp[-2].string));
	      yyerror(& (yylsp[0]), state,
		      "undefined variable binding in ALIAS statement");
	      YYERROR;
	   } else {
	      _mesa_symbol_table_add_symbol(state->st, 0, (yyvsp[-2].string), target);
	   }
	}
#line 4587 "./program/program_parse.tab.c" /* yacc.c:1646  */
    break;


#line 4591 "./program/program_parse.tab.c" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, state, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, state, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, state);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, state);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, state, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, state);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp, state);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 2231 "program/program_parse.y" /* yacc.c:1906  */


void
asm_instruction_set_operands(struct asm_instruction *inst,
			     const struct prog_dst_register *dst,
			     const struct asm_src_register *src0,
			     const struct asm_src_register *src1,
			     const struct asm_src_register *src2)
{
   /* In the core ARB extensions only the KIL instruction doesn't have a
    * destination register.
    */
   if (dst == NULL) {
      init_dst_reg(& inst->Base.DstReg);
   } else {
      inst->Base.DstReg = *dst;
   }

   /* The only instruction that doesn't have any source registers is the
    * condition-code based KIL instruction added by NV_fragment_program_option.
    */
   if (src0 != NULL) {
      inst->Base.SrcReg[0] = src0->Base;
      inst->SrcReg[0] = *src0;
   } else {
      init_src_reg(& inst->SrcReg[0]);
   }

   if (src1 != NULL) {
      inst->Base.SrcReg[1] = src1->Base;
      inst->SrcReg[1] = *src1;
   } else {
      init_src_reg(& inst->SrcReg[1]);
   }

   if (src2 != NULL) {
      inst->Base.SrcReg[2] = src2->Base;
      inst->SrcReg[2] = *src2;
   } else {
      init_src_reg(& inst->SrcReg[2]);
   }
}


struct asm_instruction *
asm_instruction_ctor(gl_inst_opcode op,
		     const struct prog_dst_register *dst,
		     const struct asm_src_register *src0,
		     const struct asm_src_register *src1,
		     const struct asm_src_register *src2)
{
   struct asm_instruction *inst = CALLOC_STRUCT(asm_instruction);

   if (inst) {
      _mesa_init_instructions(& inst->Base, 1);
      inst->Base.Opcode = op;

      asm_instruction_set_operands(inst, dst, src0, src1, src2);
   }

   return inst;
}


struct asm_instruction *
asm_instruction_copy_ctor(const struct prog_instruction *base,
			  const struct prog_dst_register *dst,
			  const struct asm_src_register *src0,
			  const struct asm_src_register *src1,
			  const struct asm_src_register *src2)
{
   struct asm_instruction *inst = CALLOC_STRUCT(asm_instruction);

   if (inst) {
      _mesa_init_instructions(& inst->Base, 1);
      inst->Base.Opcode = base->Opcode;
      inst->Base.CondUpdate = base->CondUpdate;
      inst->Base.CondDst = base->CondDst;
      inst->Base.SaturateMode = base->SaturateMode;
      inst->Base.Precision = base->Precision;

      asm_instruction_set_operands(inst, dst, src0, src1, src2);
   }

   return inst;
}


void
init_dst_reg(struct prog_dst_register *r)
{
   memset(r, 0, sizeof(*r));
   r->File = PROGRAM_UNDEFINED;
   r->WriteMask = WRITEMASK_XYZW;
   r->CondMask = COND_TR;
   r->CondSwizzle = SWIZZLE_NOOP;
}


/** Like init_dst_reg() but set the File and Index fields. */
void
set_dst_reg(struct prog_dst_register *r, gl_register_file file, GLint index)
{
   const GLint maxIndex = 1 << INST_INDEX_BITS;
   const GLint minIndex = 0;
   ASSERT(index >= minIndex);
   (void) minIndex;
   ASSERT(index <= maxIndex);
   (void) maxIndex;
   ASSERT(file == PROGRAM_TEMPORARY ||
	  file == PROGRAM_ADDRESS ||
	  file == PROGRAM_OUTPUT);
   memset(r, 0, sizeof(*r));
   r->File = file;
   r->Index = index;
   r->WriteMask = WRITEMASK_XYZW;
   r->CondMask = COND_TR;
   r->CondSwizzle = SWIZZLE_NOOP;
}


void
init_src_reg(struct asm_src_register *r)
{
   memset(r, 0, sizeof(*r));
   r->Base.File = PROGRAM_UNDEFINED;
   r->Base.Swizzle = SWIZZLE_NOOP;
   r->Symbol = NULL;
}


/** Like init_src_reg() but set the File and Index fields.
 * \return GL_TRUE if a valid src register, GL_FALSE otherwise
 */
void
set_src_reg(struct asm_src_register *r, gl_register_file file, GLint index)
{
   set_src_reg_swz(r, file, index, SWIZZLE_XYZW);
}


void
set_src_reg_swz(struct asm_src_register *r, gl_register_file file, GLint index,
                GLuint swizzle)
{
   const GLint maxIndex = (1 << INST_INDEX_BITS) - 1;
   const GLint minIndex = -(1 << INST_INDEX_BITS);
   ASSERT(file < PROGRAM_FILE_MAX);
   ASSERT(index >= minIndex);
   (void) minIndex;
   ASSERT(index <= maxIndex);
   (void) maxIndex;
   memset(r, 0, sizeof(*r));
   r->Base.File = file;
   r->Base.Index = index;
   r->Base.Swizzle = swizzle;
   r->Symbol = NULL;
}


/**
 * Validate the set of inputs used by a program
 *
 * Validates that legal sets of inputs are used by the program.  In this case
 * "used" included both reading the input or binding the input to a name using
 * the \c ATTRIB command.
 *
 * \return
 * \c TRUE if the combination of inputs used is valid, \c FALSE otherwise.
 */
int
validate_inputs(struct YYLTYPE *locp, struct asm_parser_state *state)
{
   const GLbitfield64 inputs = state->prog->InputsRead | state->InputsBound;

   if (((inputs & VERT_BIT_FF_ALL) & (inputs >> VERT_ATTRIB_GENERIC0)) != 0) {
      yyerror(locp, state, "illegal use of generic attribute and name attribute");
      return 0;
   }

   return 1;
}


struct asm_symbol *
declare_variable(struct asm_parser_state *state, char *name, enum asm_type t,
		 struct YYLTYPE *locp)
{
   struct asm_symbol *s = NULL;
   struct asm_symbol *exist = (struct asm_symbol *)
      _mesa_symbol_table_find_symbol(state->st, 0, name);


   if (exist != NULL) {
      yyerror(locp, state, "redeclared identifier");
   } else {
      s = calloc(1, sizeof(struct asm_symbol));
      s->name = name;
      s->type = t;

      switch (t) {
      case at_temp:
	 if (state->prog->NumTemporaries >= state->limits->MaxTemps) {
	    yyerror(locp, state, "too many temporaries declared");
	    free(s);
	    return NULL;
	 }

	 s->temp_binding = state->prog->NumTemporaries;
	 state->prog->NumTemporaries++;
	 break;

      case at_address:
	 if (state->prog->NumAddressRegs >= state->limits->MaxAddressRegs) {
	    yyerror(locp, state, "too many address registers declared");
	    free(s);
	    return NULL;
	 }

	 /* FINISHME: Add support for multiple address registers.
	  */
	 state->prog->NumAddressRegs++;
	 break;

      default:
	 break;
      }

      _mesa_symbol_table_add_symbol(state->st, 0, s->name, s);
      s->next = state->sym;
      state->sym = s;
   }

   return s;
}


int add_state_reference(struct gl_program_parameter_list *param_list,
			const gl_state_index tokens[STATE_LENGTH])
{
   const GLuint size = 4; /* XXX fix */
   char *name;
   GLint index;

   name = _mesa_program_state_string(tokens);
   index = _mesa_add_parameter(param_list, PROGRAM_STATE_VAR, name,
                               size, GL_NONE, NULL, tokens);
   param_list->StateFlags |= _mesa_program_state_flags(tokens);

   /* free name string here since we duplicated it in add_parameter() */
   free(name);

   return index;
}


int
initialize_symbol_from_state(struct gl_program *prog,
			     struct asm_symbol *param_var, 
			     const gl_state_index tokens[STATE_LENGTH])
{
   int idx = -1;
   gl_state_index state_tokens[STATE_LENGTH];


   memcpy(state_tokens, tokens, sizeof(state_tokens));

   param_var->type = at_param;
   param_var->param_binding_type = PROGRAM_STATE_VAR;

   /* If we are adding a STATE_MATRIX that has multiple rows, we need to
    * unroll it and call add_state_reference() for each row
    */
   if ((state_tokens[0] == STATE_MODELVIEW_MATRIX ||
	state_tokens[0] == STATE_PROJECTION_MATRIX ||
	state_tokens[0] == STATE_MVP_MATRIX ||
	state_tokens[0] == STATE_TEXTURE_MATRIX ||
	state_tokens[0] == STATE_PROGRAM_MATRIX)
       && (state_tokens[2] != state_tokens[3])) {
      int row;
      const int first_row = state_tokens[2];
      const int last_row = state_tokens[3];

      for (row = first_row; row <= last_row; row++) {
	 state_tokens[2] = state_tokens[3] = row;

	 idx = add_state_reference(prog->Parameters, state_tokens);
	 if (param_var->param_binding_begin == ~0U) {
	    param_var->param_binding_begin = idx;
            param_var->param_binding_swizzle = SWIZZLE_XYZW;
         }

	 param_var->param_binding_length++;
      }
   }
   else {
      idx = add_state_reference(prog->Parameters, state_tokens);
      if (param_var->param_binding_begin == ~0U) {
	 param_var->param_binding_begin = idx;
         param_var->param_binding_swizzle = SWIZZLE_XYZW;
      }
      param_var->param_binding_length++;
   }

   return idx;
}


int
initialize_symbol_from_param(struct gl_program *prog,
			     struct asm_symbol *param_var, 
			     const gl_state_index tokens[STATE_LENGTH])
{
   int idx = -1;
   gl_state_index state_tokens[STATE_LENGTH];


   memcpy(state_tokens, tokens, sizeof(state_tokens));

   assert((state_tokens[0] == STATE_VERTEX_PROGRAM)
	  || (state_tokens[0] == STATE_FRAGMENT_PROGRAM));
   assert((state_tokens[1] == STATE_ENV)
	  || (state_tokens[1] == STATE_LOCAL));

   /*
    * The param type is STATE_VAR.  The program parameter entry will
    * effectively be a pointer into the LOCAL or ENV parameter array.
    */
   param_var->type = at_param;
   param_var->param_binding_type = PROGRAM_STATE_VAR;

   /* If we are adding a STATE_ENV or STATE_LOCAL that has multiple elements,
    * we need to unroll it and call add_state_reference() for each row
    */
   if (state_tokens[2] != state_tokens[3]) {
      int row;
      const int first_row = state_tokens[2];
      const int last_row = state_tokens[3];

      for (row = first_row; row <= last_row; row++) {
	 state_tokens[2] = state_tokens[3] = row;

	 idx = add_state_reference(prog->Parameters, state_tokens);
	 if (param_var->param_binding_begin == ~0U) {
	    param_var->param_binding_begin = idx;
            param_var->param_binding_swizzle = SWIZZLE_XYZW;
         }
	 param_var->param_binding_length++;
      }
   }
   else {
      idx = add_state_reference(prog->Parameters, state_tokens);
      if (param_var->param_binding_begin == ~0U) {
	 param_var->param_binding_begin = idx;
         param_var->param_binding_swizzle = SWIZZLE_XYZW;
      }
      param_var->param_binding_length++;
   }

   return idx;
}


/**
 * Put a float/vector constant/literal into the parameter list.
 * \param param_var  returns info about the parameter/constant's location,
 *                   binding, type, etc.
 * \param vec  the vector/constant to add
 * \param allowSwizzle  if true, try to consolidate constants which only differ
 *                      by a swizzle.  We don't want to do this when building
 *                      arrays of constants that may be indexed indirectly.
 * \return index of the constant in the parameter list.
 */
int
initialize_symbol_from_const(struct gl_program *prog,
			     struct asm_symbol *param_var, 
			     const struct asm_vector *vec,
                             GLboolean allowSwizzle)
{
   unsigned swizzle;
   const int idx = _mesa_add_unnamed_constant(prog->Parameters,
                                              vec->data, vec->count,
                                              allowSwizzle ? &swizzle : NULL);

   param_var->type = at_param;
   param_var->param_binding_type = PROGRAM_CONSTANT;

   if (param_var->param_binding_begin == ~0U) {
      param_var->param_binding_begin = idx;
      param_var->param_binding_swizzle = allowSwizzle ? swizzle : SWIZZLE_XYZW;
   }
   param_var->param_binding_length++;

   return idx;
}


char *
make_error_string(const char *fmt, ...)
{
   int length;
   char *str;
   va_list args;


   /* Call vsnprintf once to determine how large the final string is.  Call it
    * again to do the actual formatting.  from the vsnprintf manual page:
    *
    *    Upon successful return, these functions return the number of
    *    characters printed  (not including the trailing '\0' used to end
    *    output to strings).
    */
   va_start(args, fmt);
   length = 1 + vsnprintf(NULL, 0, fmt, args);
   va_end(args);

   str = malloc(length);
   if (str) {
      va_start(args, fmt);
      vsnprintf(str, length, fmt, args);
      va_end(args);
   }

   return str;
}


void
yyerror(YYLTYPE *locp, struct asm_parser_state *state, const char *s)
{
   char *err_str;


   err_str = make_error_string("glProgramStringARB(%s)\n", s);
   if (err_str) {
      _mesa_error(state->ctx, GL_INVALID_OPERATION, "%s", err_str);
      free(err_str);
   }

   err_str = make_error_string("line %u, char %u: error: %s\n",
			       locp->first_line, locp->first_column, s);
   _mesa_set_program_error(state->ctx, locp->position, err_str);

   if (err_str) {
      free(err_str);
   }
}


GLboolean
_mesa_parse_arb_program(struct gl_context *ctx, GLenum target, const GLubyte *str,
			GLsizei len, struct asm_parser_state *state)
{
   struct asm_instruction *inst;
   unsigned i;
   GLubyte *strz;
   GLboolean result = GL_FALSE;
   void *temp;
   struct asm_symbol *sym;

   state->ctx = ctx;
   state->prog->Target = target;
   state->prog->Parameters = _mesa_new_parameter_list();

   /* Make a copy of the program string and force it to be NUL-terminated.
    */
   strz = (GLubyte *) malloc(len + 1);
   if (strz == NULL) {
      _mesa_error(ctx, GL_OUT_OF_MEMORY, "glProgramStringARB");
      return GL_FALSE;
   }
   memcpy (strz, str, len);
   strz[len] = '\0';

   state->prog->String = strz;

   state->st = _mesa_symbol_table_ctor();

   state->limits = (target == GL_VERTEX_PROGRAM_ARB)
      ? & ctx->Const.Program[MESA_SHADER_VERTEX]
      : & ctx->Const.Program[MESA_SHADER_FRAGMENT];

   state->MaxTextureImageUnits = ctx->Const.Program[MESA_SHADER_FRAGMENT].MaxTextureImageUnits;
   state->MaxTextureCoordUnits = ctx->Const.MaxTextureCoordUnits;
   state->MaxTextureUnits = ctx->Const.MaxTextureUnits;
   state->MaxClipPlanes = ctx->Const.MaxClipPlanes;
   state->MaxLights = ctx->Const.MaxLights;
   state->MaxProgramMatrices = ctx->Const.MaxProgramMatrices;
   state->MaxDrawBuffers = ctx->Const.MaxDrawBuffers;

   state->state_param_enum = (target == GL_VERTEX_PROGRAM_ARB)
      ? STATE_VERTEX_PROGRAM : STATE_FRAGMENT_PROGRAM;

   _mesa_set_program_error(ctx, -1, NULL);

   _mesa_program_lexer_ctor(& state->scanner, state, (const char *) str, len);
   yyparse(state);
   _mesa_program_lexer_dtor(state->scanner);


   if (ctx->Program.ErrorPos != -1) {
      goto error;
   }

   if (! _mesa_layout_parameters(state)) {
      struct YYLTYPE loc;

      loc.first_line = 0;
      loc.first_column = 0;
      loc.position = len;

      yyerror(& loc, state, "invalid PARAM usage");
      goto error;
   }


   
   /* Add one instruction to store the "END" instruction.
    */
   state->prog->Instructions =
      _mesa_alloc_instructions(state->prog->NumInstructions + 1);

   if (state->prog->Instructions == NULL) {
      goto error;
   }

   inst = state->inst_head;
   for (i = 0; i < state->prog->NumInstructions; i++) {
      struct asm_instruction *const temp = inst->next;

      state->prog->Instructions[i] = inst->Base;
      inst = temp;
   }

   /* Finally, tag on an OPCODE_END instruction */
   {
      const GLuint numInst = state->prog->NumInstructions;
      _mesa_init_instructions(state->prog->Instructions + numInst, 1);
      state->prog->Instructions[numInst].Opcode = OPCODE_END;
   }
   state->prog->NumInstructions++;

   state->prog->NumParameters = state->prog->Parameters->NumParameters;
   state->prog->NumAttributes = _mesa_bitcount_64(state->prog->InputsRead);

   /*
    * Initialize native counts to logical counts.  The device driver may
    * change them if program is translated into a hardware program.
    */
   state->prog->NumNativeInstructions = state->prog->NumInstructions;
   state->prog->NumNativeTemporaries = state->prog->NumTemporaries;
   state->prog->NumNativeParameters = state->prog->NumParameters;
   state->prog->NumNativeAttributes = state->prog->NumAttributes;
   state->prog->NumNativeAddressRegs = state->prog->NumAddressRegs;

   result = GL_TRUE;

error:
   for (inst = state->inst_head; inst != NULL; inst = temp) {
      temp = inst->next;
      free(inst);
   }

   state->inst_head = NULL;
   state->inst_tail = NULL;

   for (sym = state->sym; sym != NULL; sym = temp) {
      temp = sym->next;

      free((void *) sym->name);
      free(sym);
   }
   state->sym = NULL;

   _mesa_symbol_table_dtor(state->st);
   state->st = NULL;

   return result;
}
@


1.6
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.5
log
@Merge Mesa 9.2.1
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.7.12-4996.  */
d4 3
a6 3
   
      Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
   
d11 1
a11 1
   
d16 1
a16 1
   
d29 1
a29 1
   
d47 1
a47 1
#define YYBISON_VERSION "2.7.12-4996"
a65 2
#define yylval          _mesa_program_lval
#define yychar          _mesa_program_char
d68 1
a68 1
#define yylloc          _mesa_program_lloc
d71 1
a71 2
/* Line 371 of yacc.c  */
#line 1 "program_parse.y"
d188 1
a188 2
/* Line 371 of yacc.c  */
#line 193 "program_parse.tab.c"
d190 1
a190 1
# ifndef YY_NULL
d192 1
a192 1
#   define YY_NULL nullptr
d194 1
a194 1
#   define YY_NULL 0
d208 3
a210 3
#ifndef YY__MESA_PROGRAM_PROGRAM_PARSE_TAB_H_INCLUDED
# define YY__MESA_PROGRAM_PROGRAM_PARSE_TAB_H_INCLUDED
/* Enabling traces.  */
d218 1
a218 1
/* Tokens.  */
d221 108
a328 109
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ARBvp_10 = 258,
     ARBfp_10 = 259,
     ADDRESS = 260,
     ALIAS = 261,
     ATTRIB = 262,
     OPTION = 263,
     OUTPUT = 264,
     PARAM = 265,
     TEMP = 266,
     END = 267,
     BIN_OP = 268,
     BINSC_OP = 269,
     SAMPLE_OP = 270,
     SCALAR_OP = 271,
     TRI_OP = 272,
     VECTOR_OP = 273,
     ARL = 274,
     KIL = 275,
     SWZ = 276,
     TXD_OP = 277,
     INTEGER = 278,
     REAL = 279,
     AMBIENT = 280,
     ATTENUATION = 281,
     BACK = 282,
     CLIP = 283,
     COLOR = 284,
     DEPTH = 285,
     DIFFUSE = 286,
     DIRECTION = 287,
     EMISSION = 288,
     ENV = 289,
     EYE = 290,
     FOG = 291,
     FOGCOORD = 292,
     FRAGMENT = 293,
     FRONT = 294,
     HALF = 295,
     INVERSE = 296,
     INVTRANS = 297,
     LIGHT = 298,
     LIGHTMODEL = 299,
     LIGHTPROD = 300,
     LOCAL = 301,
     MATERIAL = 302,
     MAT_PROGRAM = 303,
     MATRIX = 304,
     MATRIXINDEX = 305,
     MODELVIEW = 306,
     MVP = 307,
     NORMAL = 308,
     OBJECT = 309,
     PALETTE = 310,
     PARAMS = 311,
     PLANE = 312,
     POINT_TOK = 313,
     POINTSIZE = 314,
     POSITION = 315,
     PRIMARY = 316,
     PROGRAM = 317,
     PROJECTION = 318,
     RANGE = 319,
     RESULT = 320,
     ROW = 321,
     SCENECOLOR = 322,
     SECONDARY = 323,
     SHININESS = 324,
     SIZE_TOK = 325,
     SPECULAR = 326,
     SPOT = 327,
     STATE = 328,
     TEXCOORD = 329,
     TEXENV = 330,
     TEXGEN = 331,
     TEXGEN_Q = 332,
     TEXGEN_R = 333,
     TEXGEN_S = 334,
     TEXGEN_T = 335,
     TEXTURE = 336,
     TRANSPOSE = 337,
     TEXTURE_UNIT = 338,
     TEX_1D = 339,
     TEX_2D = 340,
     TEX_3D = 341,
     TEX_CUBE = 342,
     TEX_RECT = 343,
     TEX_SHADOW1D = 344,
     TEX_SHADOW2D = 345,
     TEX_SHADOWRECT = 346,
     TEX_ARRAY1D = 347,
     TEX_ARRAY2D = 348,
     TEX_ARRAYSHADOW1D = 349,
     TEX_ARRAYSHADOW2D = 350,
     VERTEX = 351,
     VTXATTRIB = 352,
     WEIGHT = 353,
     IDENTIFIER = 354,
     USED_IDENTIFIER = 355,
     MASK4 = 356,
     MASK3 = 357,
     MASK2 = 358,
     MASK1 = 359,
     SWIZZLE = 360,
     DOT_DOT = 361,
     DOT = 362
   };
d331 1
a331 1

d333 2
a334 1
typedef union YYSTYPE
d336 1
a336 2
/* Line 387 of yacc.c  */
#line 124 "program_parse.y"
d362 2
a363 4

/* Line 387 of yacc.c  */
#line 370 "program_parse.tab.c"
} YYSTYPE;
a364 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
d368 1
d370 2
a371 1
typedef struct YYLTYPE
d377 1
a377 2
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
d383 1
a383 8
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int _mesa_program_parse (void *YYPARSE_PARAM);
#else
int _mesa_program_parse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
a384 4
#else
int _mesa_program_parse ();
#endif
#endif /* ! YYPARSE_PARAM */
d386 1
a386 1
#endif /* !YY__MESA_PROGRAM_PROGRAM_PARSE_TAB_H_INCLUDED  */
d389 1
a389 2
/* Line 390 of yacc.c  */
#line 269 "program_parse.y"
d402 1
a402 2
/* Line 390 of yacc.c  */
#line 423 "program_parse.tab.c"
d416 1
a416 2
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a417 2
#else
typedef short int yytype_int8;
d437 1
a437 2
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
d459 24
a482 5
#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5))
#  define __attribute__(Spec) /* empty */
d493 8
a500 4

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
d502 5
a506 8
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
d508 2
a509 3
{
  return yyi;
}
d512 1
d530 1
a530 2
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
d542 2
a543 2
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
d559 1
a559 1
	     && (defined YYFREE || defined free)))
d567 1
a567 2
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
d573 1
a573 2
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
d583 2
a584 2
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
d610 10
a619 10
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))
d638 1
a638 1
      while (YYID (0))
d654 1
a654 1
/* YYNRULES -- Number of states.  */
d657 2
a658 1
/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
d662 1
a662 1
#define YYTRANSLATE(YYX)						\
d665 2
a666 1
/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
d709 1
a709 122
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     8,    10,    12,    15,    16,    20,    23,
      24,    27,    30,    32,    34,    36,    38,    40,    42,    44,
      46,    48,    50,    52,    54,    59,    64,    69,    76,    83,
      92,   101,   104,   107,   120,   123,   125,   127,   129,   131,
     133,   135,   137,   139,   141,   143,   145,   147,   154,   157,
     162,   165,   167,   171,   177,   181,   184,   192,   195,   197,
     199,   201,   203,   208,   210,   212,   214,   216,   218,   220,
     222,   226,   227,   230,   233,   235,   237,   239,   241,   243,
     245,   247,   249,   251,   252,   254,   256,   258,   260,   261,
     265,   269,   270,   273,   276,   278,   280,   282,   284,   286,
     288,   290,   292,   297,   300,   303,   305,   308,   310,   313,
     315,   318,   323,   328,   330,   331,   335,   337,   339,   342,
     344,   347,   349,   351,   355,   362,   363,   365,   368,   373,
     375,   379,   381,   383,   385,   387,   389,   391,   393,   395,
     397,   399,   402,   405,   408,   411,   414,   417,   420,   423,
     426,   429,   432,   435,   439,   441,   443,   445,   451,   453,
     455,   457,   460,   462,   464,   467,   469,   472,   479,   481,
     485,   487,   489,   491,   493,   495,   500,   502,   504,   506,
     508,   510,   512,   515,   517,   519,   525,   527,   530,   532,
     534,   540,   543,   544,   551,   555,   556,   558,   560,   562,
     564,   566,   569,   571,   573,   576,   581,   586,   587,   591,
     593,   595,   597,   600,   602,   604,   606,   608,   614,   616,
     620,   626,   632,   634,   638,   644,   646,   648,   650,   652,
     654,   656,   658,   660,   662,   666,   672,   680,   690,   693,
     696,   698,   700,   701,   702,   707,   709,   710,   711,   715,
     719,   721,   727,   730,   733,   736,   739,   743,   746,   750,
     751,   755,   757,   759,   760,   762,   764,   765,   767,   769,
     770,   772,   774,   775,   779,   780,   784,   785,   789,   791,
     793,   795,   800,   802
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     121,     0,    -1,   122,   123,   125,    12,    -1,     3,    -1,
       4,    -1,   123,   124,    -1,    -1,     8,   262,   108,    -1,
     125,   126,    -1,    -1,   127,   108,    -1,   170,   108,    -1,
     128,    -1,   129,    -1,   130,    -1,   131,    -1,   132,    -1,
     133,    -1,   134,    -1,   135,    -1,   141,    -1,   136,    -1,
     137,    -1,   138,    -1,    19,   146,   109,   142,    -1,    18,
     145,   109,   144,    -1,    16,   145,   109,   142,    -1,    14,
     145,   109,   142,   109,   142,    -1,    13,   145,   109,   144,
     109,   144,    -1,    17,   145,   109,   144,   109,   144,   109,
     144,    -1,    15,   145,   109,   144,   109,   139,   109,   140,
      -1,    20,   144,    -1,    20,   166,    -1,    22,   145,   109,
     144,   109,   144,   109,   144,   109,   139,   109,   140,    -1,
      83,   256,    -1,    84,    -1,    85,    -1,    86,    -1,    87,
      -1,    88,    -1,    89,    -1,    90,    -1,    91,    -1,    92,
      -1,    93,    -1,    94,    -1,    95,    -1,    21,   145,   109,
     150,   109,   147,    -1,   241,   143,    -1,   241,   110,   143,
     110,    -1,   150,   162,    -1,   238,    -1,   241,   150,   163,
      -1,   241,   110,   150,   163,   110,    -1,   151,   164,   165,
      -1,   159,   161,    -1,   148,   109,   148,   109,   148,   109,
     148,    -1,   241,   149,    -1,    23,    -1,   262,    -1,   100,
      -1,   172,    -1,   152,   111,   153,   112,    -1,   186,    -1,
     249,    -1,   100,    -1,   100,    -1,   154,    -1,   155,    -1,
      23,    -1,   159,   160,   156,    -1,    -1,   113,   157,    -1,
     114,   158,    -1,    23,    -1,    23,    -1,   100,    -1,   104,
      -1,   104,    -1,   104,    -1,   104,    -1,   101,    -1,   105,
      -1,    -1,   101,    -1,   102,    -1,   103,    -1,   104,    -1,
      -1,   115,   166,   116,    -1,   115,   167,   116,    -1,    -1,
     168,   163,    -1,   169,   163,    -1,    99,    -1,   100,    -1,
     171,    -1,   178,    -1,   242,    -1,   245,    -1,   248,    -1,
     261,    -1,     7,    99,   117,   172,    -1,    96,   173,    -1,
      38,   177,    -1,    60,    -1,    98,   175,    -1,    53,    -1,
      29,   254,    -1,    37,    -1,    74,   255,    -1,    50,   111,
     176,   112,    -1,    97,   111,   174,   112,    -1,    23,    -1,
      -1,   111,   176,   112,    -1,    23,    -1,    60,    -1,    29,
     254,    -1,    37,    -1,    74,   255,    -1,   179,    -1,   180,
      -1,    10,    99,   182,    -1,    10,    99,   111,   181,   112,
     183,    -1,    -1,    23,    -1,   117,   185,    -1,   117,   118,
     184,   119,    -1,   187,    -1,   184,   109,   187,    -1,   189,
      -1,   225,    -1,   235,    -1,   189,    -1,   225,    -1,   236,
      -1,   188,    -1,   226,    -1,   235,    -1,   189,    -1,    73,
     213,    -1,    73,   190,    -1,    73,   192,    -1,    73,   195,
      -1,    73,   197,    -1,    73,   203,    -1,    73,   199,    -1,
      73,   206,    -1,    73,   208,    -1,    73,   210,    -1,    73,
     212,    -1,    73,   224,    -1,    47,   253,   191,    -1,   201,
      -1,    33,    -1,    69,    -1,    43,   111,   202,   112,   193,
      -1,   201,    -1,    60,    -1,    26,    -1,    72,   194,    -1,
      40,    -1,    32,    -1,    44,   196,    -1,    25,    -1,   253,
      67,    -1,    45,   111,   202,   112,   253,   198,    -1,   201,
      -1,    75,   257,   200,    -1,    29,    -1,    25,    -1,    31,
      -1,    71,    -1,    23,    -1,    76,   255,   204,   205,    -1,
      35,    -1,    54,    -1,    79,    -1,    80,    -1,    78,    -1,
      77,    -1,    36,   207,    -1,    29,    -1,    56,    -1,    28,
     111,   209,   112,    57,    -1,    23,    -1,    58,   211,    -1,
      70,    -1,    26,    -1,   215,    66,   111,   218,   112,    -1,
     215,   214,    -1,    -1,    66,   111,   218,   106,   218,   112,
      -1,    49,   219,   216,    -1,    -1,   217,    -1,    41,    -1,
      82,    -1,    42,    -1,    23,    -1,    51,   220,    -1,    63,
      -1,    52,    -1,    81,   255,    -1,    55,   111,   222,   112,
      -1,    48,   111,   223,   112,    -1,    -1,   111,   221,   112,
      -1,    23,    -1,    23,    -1,    23,    -1,    30,    64,    -1,
     229,    -1,   232,    -1,   227,    -1,   230,    -1,    62,    34,
     111,   228,   112,    -1,   233,    -1,   233,   106,   233,    -1,
      62,    34,   111,   233,   112,    -1,    62,    46,   111,   231,
     112,    -1,   234,    -1,   234,   106,   234,    -1,    62,    46,
     111,   234,   112,    -1,    23,    -1,    23,    -1,   237,    -1,
     239,    -1,   238,    -1,   239,    -1,   240,    -1,    24,    -1,
      23,    -1,   118,   240,   119,    -1,   118,   240,   109,   240,
     119,    -1,   118,   240,   109,   240,   109,   240,   119,    -1,
     118,   240,   109,   240,   109,   240,   109,   240,   119,    -1,
     241,    24,    -1,   241,    23,    -1,   113,    -1,   114,    -1,
      -1,    -1,   244,    11,   243,   247,    -1,   262,    -1,    -1,
      -1,     5,   246,   247,    -1,   247,   109,    99,    -1,    99,
      -1,   244,     9,    99,   117,   249,    -1,    65,    60,    -1,
      65,    37,    -1,    65,   250,    -1,    65,    59,    -1,    65,
      74,   255,    -1,    65,    30,    -1,    29,   251,   252,    -1,
      -1,   111,    23,   112,    -1,    39,    -1,    27,    -1,    -1,
      61,    -1,    68,    -1,    -1,    39,    -1,    27,    -1,    -1,
      61,    -1,    68,    -1,    -1,   111,   258,   112,    -1,    -1,
     111,   259,   112,    -1,    -1,   111,   260,   112,    -1,    23,
      -1,    23,    -1,    23,    -1,     6,    99,   117,   100,    -1,
      99,    -1,   100,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
d809 1
a809 1
  "ALIAS_statement", "string", YY_NULL
d814 2
a815 2
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
d833 9
a841 33
/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   120,   121,   122,   122,   123,   123,   124,   125,   125,
     126,   126,   127,   127,   128,   128,   128,   128,   128,   128,
     128,   129,   129,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   137,   138,   139,   140,   140,   140,   140,   140,
     140,   140,   140,   140,   140,   140,   140,   141,   142,   142,
     143,   143,   144,   144,   145,   146,   147,   148,   149,   149,
     150,   150,   150,   150,   151,   151,   152,   153,   153,   154,
     155,   156,   156,   156,   157,   158,   159,   160,   161,   162,
     163,   163,   163,   163,   164,   164,   164,   164,   164,   165,
     165,   165,   166,   167,   168,   169,   170,   170,   170,   170,
     170,   170,   171,   172,   172,   173,   173,   173,   173,   173,
     173,   173,   173,   174,   175,   175,   176,   177,   177,   177,
     177,   178,   178,   179,   180,   181,   181,   182,   183,   184,
     184,   185,   185,   185,   186,   186,   186,   187,   187,   187,
     188,   188,   189,   189,   189,   189,   189,   189,   189,   189,
     189,   189,   189,   190,   191,   191,   191,   192,   193,   193,
     193,   193,   193,   194,   195,   196,   196,   197,   198,   199,
     200,   201,   201,   201,   202,   203,   204,   204,   205,   205,
     205,   205,   206,   207,   207,   208,   209,   210,   211,   211,
     212,   213,   214,   214,   215,   216,   216,   217,   217,   217,
     218,   219,   219,   219,   219,   219,   219,   220,   220,   221,
     222,   223,   224,   225,   225,   226,   226,   227,   228,   228,
     229,   230,   231,   231,   232,   233,   234,   235,   235,   236,
     236,   237,   238,   238,   239,   239,   239,   239,   240,   240,
     241,   241,   241,   243,   242,   244,   244,   246,   245,   247,
     247,   248,   249,   249,   249,   249,   249,   249,   250,   251,
     251,   251,   251,   252,   252,   252,   253,   253,   253,   254,
     254,   254,   255,   255,   256,   256,   257,   257,   258,   259,
     260,   261,   262,   262
};
d843 3
a845 2
/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
d847 48
a894 29
       0,     2,     4,     1,     1,     2,     0,     3,     2,     0,
       2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     4,     4,     6,     6,     8,
       8,     2,     2,    12,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     6,     2,     4,
       2,     1,     3,     5,     3,     2,     7,     2,     1,     1,
       1,     1,     4,     1,     1,     1,     1,     1,     1,     1,
       3,     0,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     1,     1,     1,     0,     3,
       3,     0,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     2,     2,     1,     2,     1,     2,     1,
       2,     4,     4,     1,     0,     3,     1,     1,     2,     1,
       2,     1,     1,     3,     6,     0,     1,     2,     4,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     3,     1,     1,     1,     5,     1,     1,
       1,     2,     1,     1,     2,     1,     2,     6,     1,     3,
       1,     1,     1,     1,     1,     4,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     5,     1,     2,     1,     1,
       5,     2,     0,     6,     3,     0,     1,     1,     1,     1,
       1,     2,     1,     1,     2,     4,     4,     0,     3,     1,
       1,     1,     2,     1,     1,     1,     1,     5,     1,     3,
       5,     5,     1,     3,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     5,     7,     9,     2,     2,
       1,     1,     0,     0,     4,     1,     0,     0,     3,     3,
       1,     5,     2,     2,     2,     2,     3,     2,     3,     0,
       3,     1,     1,     0,     1,     1,     0,     1,     1,     0,
       1,     1,     0,     3,     0,     3,     0,     3,     1,     1,
       1,     4,     1,     1
d897 3
a899 3
/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
d952 21
a972 1
/* YYDEFGOTO[NTERM-NUM].  */
d992 3
a994 79
/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -398
static const yytype_int16 yypact[] =
{
      52,  -398,  -398,    14,  -398,  -398,    67,   152,  -398,    24,
    -398,  -398,     5,  -398,    47,    81,    99,  -398,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    56,    -1,    -1,  -398,    97,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,  -398,   112,  -398,  -398,  -398,  -398,  -398,   156,  -398,
    -398,  -398,  -398,  -398,   111,    98,   141,    95,   127,  -398,
      84,   142,  -398,   146,   150,   153,   157,   158,  -398,   159,
     165,  -398,  -398,  -398,  -398,  -398,   113,   -13,   161,   163,
    -398,  -398,   162,  -398,  -398,   164,   174,    10,   252,    -3,
    -398,   -11,  -398,  -398,  -398,  -398,   166,  -398,   -20,  -398,
    -398,  -398,  -398,   167,   -20,   -20,   -20,   -20,   -20,   -20,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,   137,    70,
     132,    85,   168,    34,   -20,   113,   169,  -398,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,    34,   -20,   171,   111,
     179,  -398,  -398,  -398,   172,  -398,  -398,  -398,  -398,  -398,
    -398,  -398,   216,  -398,  -398,   253,    76,   258,  -398,   176,
     154,  -398,   178,    29,   180,  -398,   181,  -398,  -398,   110,
    -398,  -398,   166,  -398,   175,   182,   183,   219,    32,   184,
     177,   186,    94,   140,     7,   187,   166,  -398,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,   226,  -398,   110,
    -398,   188,  -398,  -398,   166,   189,   190,  -398,   113,     9,
    -398,     1,   193,   195,   240,   164,  -398,   191,  -398,  -398,
     194,  -398,  -398,  -398,  -398,   197,   -20,  -398,   196,   198,
     113,   -20,    34,  -398,   203,   206,   228,   -20,  -398,  -398,
    -398,  -398,   290,   292,   293,  -398,  -398,  -398,  -398,   294,
    -398,  -398,  -398,  -398,   251,   294,    48,   208,   209,  -398,
     210,  -398,   166,    21,  -398,  -398,  -398,   299,   295,    12,
     212,  -398,   302,  -398,   304,   302,  -398,   218,   -20,  -398,
    -398,   217,  -398,  -398,   227,   -20,   -20,  -398,   214,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,   220,  -398,  -398,
     222,   225,   229,  -398,   223,  -398,   224,  -398,   230,  -398,
     231,  -398,   233,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
     314,   316,  -398,   317,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,   234,  -398,  -398,  -398,  -398,   170,   318,  -398,   235,
    -398,   236,   237,  -398,    44,  -398,  -398,   143,  -398,   244,
     -15,   245,    36,  -398,   332,  -398,   138,   -20,  -398,  -398,
     301,   101,    94,  -398,   248,  -398,   249,  -398,   250,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,   254,  -398,  -398,  -398,
     -20,  -398,   333,   340,  -398,   -20,  -398,  -398,  -398,   -20,
     102,   132,    75,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,   255,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
     336,  -398,  -398,    49,  -398,  -398,  -398,  -398,    90,  -398,
    -398,  -398,  -398,   256,   260,   259,   261,  -398,   298,    36,
    -398,  -398,  -398,  -398,  -398,  -398,   -20,  -398,   -20,   228,
     290,   292,   262,  -398,  -398,   257,   265,   268,   266,   273,
     269,   274,   318,  -398,   -20,   138,  -398,   290,  -398,   292,
     107,  -398,  -398,  -398,  -398,   318,   270,  -398
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,   -78,
     -82,  -398,  -100,   155,   -86,   215,  -398,  -398,  -372,  -398,
     -54,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,   173,
    -398,  -398,  -398,  -118,  -398,  -398,   232,  -398,  -398,  -398,
    -398,  -398,   303,  -398,  -398,  -398,   114,  -398,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,   -53,  -398,   -88,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,  -334,   130,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,     0,  -398,  -398,  -397,  -398,
    -398,  -398,  -398,  -398,  -398,   305,  -398,  -398,  -398,  -398,
    -398,  -398,  -398,  -396,  -383,   306,  -398,  -398,  -137,   -87,
    -120,   -89,  -398,  -398,  -398,  -398,  -398,   263,  -398,   185,
    -398,  -398,  -398,  -177,   199,  -154,  -398,  -398,  -398,  -398,
    -398,  -398,    -6
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -230
a1039 6
#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-398)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

d1085 2
a1086 2
/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
d1139 78
a1216 24
#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif
d1233 3
a1235 3
      YYERROR;							\
    }								\
while (YYID (0))
d1238 2
a1239 2
#define YYTERROR	1
#define YYERRCODE	256
d1249 1
a1249 1
      if (YYID (N))                                                     \
d1263 1
a1263 1
    while (YYID (0))
d1269 15
d1293 1
a1293 3
__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1295 6
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
d1301 1
a1301 1
      res += fprintf (yyo, "%d", yylocp->first_line);
d1303 1
a1303 1
        res += fprintf (yyo, ".%d", yylocp->first_column);
d1309 1
a1309 1
          res += fprintf (yyo, "-%d", yylocp->last_line);
d1311 1
a1311 1
            res += fprintf (yyo, ".%d", end_col);
d1314 1
a1314 1
        res += fprintf (yyo, "-%d", end_col);
d1328 10
a1337 14
/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, &yylloc, state)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif
a1338 16
# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location, state); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))
d1340 3
a1343 7
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1345 9
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, state)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
    struct asm_parser_state *state;
#endif
d1349 2
a1352 2
  YYUSE (yylocationp);
  YYUSE (state);
a1355 2
# else
  YYUSE (yyoutput);
a1364 2
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1366 9
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp, state)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
    struct asm_parser_state *state;
#endif
d1368 2
a1369 4
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
a1381 2
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1383 6
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
d1394 5
a1398 5
# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))
a1404 5
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, struct asm_parser_state *state)
#else
d1406 1
a1406 6
yy_reduce_print (yyvsp, yylsp, yyrule, state)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
    struct asm_parser_state *state;
#endif
d1408 1
a1410 1
  unsigned long int yylno = yyrline[yyrule];
d1412 1
a1412 1
	     yyrule - 1, yylno);
d1417 4
a1420 3
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       , state);
d1425 5
a1429 5
# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule, state); \
} while (YYID (0))
d1443 1
a1443 1
#ifndef	YYINITDEPTH
a1465 2
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1467 5
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
a1482 2
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1484 6
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
d1514 21
a1534 21
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
d1557 1
a1557 1
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
d1561 1
a1561 1
  const char *yyformat = YY_NULL;
a1568 4
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
d1618 1
a1618 1
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
a1684 3
/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1686 9
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp, state)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
    struct asm_parser_state *state;
#endif
a1690 1

d1695 1
d1697 1
a1706 13
#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
a1708 6
#else
int
yyparse (state)
    struct asm_parser_state *state;
#endif
#endif
d1714 1
a1714 9
#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
d1717 4
a1720 3
static YYSTYPE yyval_default;
# define YY_INITIAL_VALUE(Value) = Value
#endif
a1725 12
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

/* Location data for the lookahead symbol.  */
a1727 1

d1736 3
a1738 3
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.
d1817 20
a1836 20
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
d1844 1
a1844 1
	goto yyexhaustedlab;
d1847 1
a1847 1
	yystacksize = YYMAXDEPTH;
d1850 8
a1857 8
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
d1859 2
a1860 2
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
d1870 1
a1870 1
		  (unsigned long int) yystacksize));
d1873 1
a1873 1
	YYABORT;
d1902 1
a1902 1
      yychar = YYLEX;
d1967 1
a1967 1
     `$$ = $1'.
d1982 1
a1982 2
/* Line 1787 of yacc.c  */
#line 288 "program_parse.y"
d1985 1
a1985 1
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid fragment program header");
d1990 1
d1994 1
a1994 2
/* Line 1787 of yacc.c  */
#line 296 "program_parse.y"
d1997 1
a1997 1
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid vertex program header");
d2004 1
d2008 1
a2008 2
/* Line 1787 of yacc.c  */
#line 312 "program_parse.y"
d2013 1
a2013 1
	      valid = _mesa_ARBvp_parse_option(state, (yyvsp[(2) - (3)].string));
d2015 1
a2015 1
	      valid = _mesa_ARBfp_parse_option(state, (yyvsp[(2) - (3)].string));
d2019 1
a2019 1
	   free((yyvsp[(2) - (3)].string));
d2026 1
a2026 1
	      yyerror(& (yylsp[(2) - (3)]), state, err_str);
d2030 1
d2034 1
a2034 2
/* Line 1787 of yacc.c  */
#line 340 "program_parse.y"
d2036 1
a2036 1
	   if ((yyvsp[(1) - (2)].inst) != NULL) {
d2038 1
a2038 1
		 state->inst_head = (yyvsp[(1) - (2)].inst);
d2040 1
a2040 1
		 state->inst_tail->next = (yyvsp[(1) - (2)].inst);
d2043 2
a2044 2
	      state->inst_tail = (yyvsp[(1) - (2)].inst);
	      (yyvsp[(1) - (2)].inst)->next = NULL;
d2049 1
d2053 1
a2053 2
/* Line 1787 of yacc.c  */
#line 358 "program_parse.y"
d2055 1
a2055 1
	   (yyval.inst) = (yyvsp[(1) - (1)].inst);
d2058 1
d2062 1
a2062 2
/* Line 1787 of yacc.c  */
#line 363 "program_parse.y"
d2064 1
a2064 1
	   (yyval.inst) = (yyvsp[(1) - (1)].inst);
d2067 1
d2071 1
a2071 2
/* Line 1787 of yacc.c  */
#line 384 "program_parse.y"
d2073 1
a2073 1
	   (yyval.inst) = asm_instruction_ctor(OPCODE_ARL, & (yyvsp[(2) - (4)].dst_reg), & (yyvsp[(4) - (4)].src_reg), NULL, NULL);
d2075 1
d2079 1
a2079 2
/* Line 1787 of yacc.c  */
#line 390 "program_parse.y"
d2081 1
a2081 1
	   if ((yyvsp[(1) - (4)].temp_inst).Opcode == OPCODE_DDY)
d2083 1
a2083 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[(1) - (4)].temp_inst), & (yyvsp[(2) - (4)].dst_reg), & (yyvsp[(4) - (4)].src_reg), NULL, NULL);
d2085 1
d2089 1
a2089 2
/* Line 1787 of yacc.c  */
#line 398 "program_parse.y"
d2091 1
a2091 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[(1) - (4)].temp_inst), & (yyvsp[(2) - (4)].dst_reg), & (yyvsp[(4) - (4)].src_reg), NULL, NULL);
d2093 1
d2097 1
a2097 2
/* Line 1787 of yacc.c  */
#line 404 "program_parse.y"
d2099 1
a2099 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[(1) - (6)].temp_inst), & (yyvsp[(2) - (6)].dst_reg), & (yyvsp[(4) - (6)].src_reg), & (yyvsp[(6) - (6)].src_reg), NULL);
d2101 1
d2105 1
a2105 2
/* Line 1787 of yacc.c  */
#line 411 "program_parse.y"
d2107 1
a2107 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[(1) - (6)].temp_inst), & (yyvsp[(2) - (6)].dst_reg), & (yyvsp[(4) - (6)].src_reg), & (yyvsp[(6) - (6)].src_reg), NULL);
d2109 1
d2113 1
a2113 2
/* Line 1787 of yacc.c  */
#line 418 "program_parse.y"
d2115 1
a2115 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[(1) - (8)].temp_inst), & (yyvsp[(2) - (8)].dst_reg), & (yyvsp[(4) - (8)].src_reg), & (yyvsp[(6) - (8)].src_reg), & (yyvsp[(8) - (8)].src_reg));
d2117 1
d2121 1
a2121 2
/* Line 1787 of yacc.c  */
#line 424 "program_parse.y"
d2123 1
a2123 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[(1) - (8)].temp_inst), & (yyvsp[(2) - (8)].dst_reg), & (yyvsp[(4) - (8)].src_reg), NULL, NULL);
d2125 1
a2125 1
	      const GLbitfield tex_mask = (1U << (yyvsp[(6) - (8)].integer));
d2130 1
a2130 1
	      (yyval.inst)->Base.TexSrcUnit = (yyvsp[(6) - (8)].integer);
d2132 1
a2132 1
	      if ((yyvsp[(8) - (8)].integer) < 0) {
d2135 1
a2135 1
		 (yyval.inst)->Base.TexSrcTarget = -(yyvsp[(8) - (8)].integer);
d2138 1
a2138 1
		 (yyval.inst)->Base.TexSrcTarget = (yyvsp[(8) - (8)].integer);
d2149 2
a2150 2
	      if ((state->prog->TexturesUsed[(yyvsp[(6) - (8)].integer)] != 0)
		  && ((state->prog->TexturesUsed[(yyvsp[(6) - (8)].integer)] != target_mask)
d2153 1
a2153 1
		 yyerror(& (yylsp[(8) - (8)]), state,
d2159 1
a2159 1
	      state->prog->TexturesUsed[(yyvsp[(6) - (8)].integer)] |= target_mask;
d2163 1
d2167 1
a2167 2
/* Line 1787 of yacc.c  */
#line 468 "program_parse.y"
d2169 1
a2169 1
	   (yyval.inst) = asm_instruction_ctor(OPCODE_KIL, NULL, & (yyvsp[(2) - (2)].src_reg), NULL, NULL);
d2172 1
d2176 1
a2176 2
/* Line 1787 of yacc.c  */
#line 473 "program_parse.y"
d2179 2
a2180 2
	   (yyval.inst)->Base.DstReg.CondMask = (yyvsp[(2) - (2)].dst_reg).CondMask;
	   (yyval.inst)->Base.DstReg.CondSwizzle = (yyvsp[(2) - (2)].dst_reg).CondSwizzle;
d2183 1
d2187 1
a2187 2
/* Line 1787 of yacc.c  */
#line 482 "program_parse.y"
d2189 1
a2189 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[(1) - (12)].temp_inst), & (yyvsp[(2) - (12)].dst_reg), & (yyvsp[(4) - (12)].src_reg), & (yyvsp[(6) - (12)].src_reg), & (yyvsp[(8) - (12)].src_reg));
d2191 1
a2191 1
	      const GLbitfield tex_mask = (1U << (yyvsp[(10) - (12)].integer));
d2196 1
a2196 1
	      (yyval.inst)->Base.TexSrcUnit = (yyvsp[(10) - (12)].integer);
d2198 1
a2198 1
	      if ((yyvsp[(12) - (12)].integer) < 0) {
d2201 1
a2201 1
		 (yyval.inst)->Base.TexSrcTarget = -(yyvsp[(12) - (12)].integer);
d2204 1
a2204 1
		 (yyval.inst)->Base.TexSrcTarget = (yyvsp[(12) - (12)].integer);
d2215 2
a2216 2
	      if ((state->prog->TexturesUsed[(yyvsp[(10) - (12)].integer)] != 0)
		  && ((state->prog->TexturesUsed[(yyvsp[(10) - (12)].integer)] != target_mask)
d2219 1
a2219 1
		 yyerror(& (yylsp[(12) - (12)]), state,
d2225 1
a2225 1
	      state->prog->TexturesUsed[(yyvsp[(10) - (12)].integer)] |= target_mask;
d2229 1
d2233 1
a2233 2
/* Line 1787 of yacc.c  */
#line 526 "program_parse.y"
d2235 1
a2235 1
	   (yyval.integer) = (yyvsp[(2) - (2)].integer);
d2237 1
d2241 1
a2241 2
/* Line 1787 of yacc.c  */
#line 531 "program_parse.y"
d2243 1
d2247 1
a2247 2
/* Line 1787 of yacc.c  */
#line 532 "program_parse.y"
d2249 1
d2253 1
a2253 2
/* Line 1787 of yacc.c  */
#line 533 "program_parse.y"
d2255 1
d2259 1
a2259 2
/* Line 1787 of yacc.c  */
#line 534 "program_parse.y"
d2261 1
d2265 1
a2265 2
/* Line 1787 of yacc.c  */
#line 535 "program_parse.y"
d2267 1
d2271 1
a2271 2
/* Line 1787 of yacc.c  */
#line 536 "program_parse.y"
d2273 1
d2277 1
a2277 2
/* Line 1787 of yacc.c  */
#line 537 "program_parse.y"
d2279 1
d2283 1
a2283 2
/* Line 1787 of yacc.c  */
#line 538 "program_parse.y"
d2285 1
d2289 1
a2289 2
/* Line 1787 of yacc.c  */
#line 539 "program_parse.y"
d2291 1
d2295 1
a2295 2
/* Line 1787 of yacc.c  */
#line 540 "program_parse.y"
d2297 1
d2301 1
a2301 2
/* Line 1787 of yacc.c  */
#line 541 "program_parse.y"
d2303 1
d2307 1
a2307 2
/* Line 1787 of yacc.c  */
#line 542 "program_parse.y"
d2309 1
d2313 1
a2313 2
/* Line 1787 of yacc.c  */
#line 546 "program_parse.y"
d2318 2
a2319 2
	   (yyvsp[(4) - (6)].src_reg).Base.Swizzle = (yyvsp[(6) - (6)].swiz_mask).swizzle;
	   (yyvsp[(4) - (6)].src_reg).Base.Negate = (yyvsp[(6) - (6)].swiz_mask).mask;
d2321 1
a2321 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[(1) - (6)].temp_inst), & (yyvsp[(2) - (6)].dst_reg), & (yyvsp[(4) - (6)].src_reg), NULL, NULL);
d2323 1
d2327 1
a2327 2
/* Line 1787 of yacc.c  */
#line 558 "program_parse.y"
d2329 1
a2329 1
	   (yyval.src_reg) = (yyvsp[(2) - (2)].src_reg);
d2331 1
a2331 1
	   if ((yyvsp[(1) - (2)].negate)) {
d2335 1
d2339 1
a2339 2
/* Line 1787 of yacc.c  */
#line 566 "program_parse.y"
d2341 1
a2341 1
	   (yyval.src_reg) = (yyvsp[(3) - (4)].src_reg);
d2344 1
a2344 1
	      yyerror(& (yylsp[(2) - (4)]), state, "unexpected character '|'");
d2348 1
a2348 1
	   if ((yyvsp[(1) - (4)].negate)) {
d2354 1
d2358 1
a2358 2
/* Line 1787 of yacc.c  */
#line 583 "program_parse.y"
d2360 1
a2360 1
	   (yyval.src_reg) = (yyvsp[(1) - (2)].src_reg);
d2363 1
a2363 1
						    (yyvsp[(2) - (2)].swiz_mask).swizzle);
d2365 1
d2369 1
a2369 2
/* Line 1787 of yacc.c  */
#line 590 "program_parse.y"
d2374 1
a2374 1
	      yyerror(& (yylsp[(1) - (1)]), state, "expected scalar suffix");
d2380 1
a2380 1
	   initialize_symbol_from_const(state->prog, & temp_sym, & (yyvsp[(1) - (1)].vector), GL_TRUE);
d2386 1
d2390 1
a2390 2
/* Line 1787 of yacc.c  */
#line 609 "program_parse.y"
d2392 1
a2392 1
	   (yyval.src_reg) = (yyvsp[(2) - (3)].src_reg);
d2394 1
a2394 1
	   if ((yyvsp[(1) - (3)].negate)) {
d2399 1
a2399 1
						    (yyvsp[(3) - (3)].swiz_mask).swizzle);
d2401 1
d2405 1
a2405 2
/* Line 1787 of yacc.c  */
#line 620 "program_parse.y"
d2407 1
a2407 1
	   (yyval.src_reg) = (yyvsp[(3) - (5)].src_reg);
d2410 1
a2410 1
	      yyerror(& (yylsp[(2) - (5)]), state, "unexpected character '|'");
d2414 1
a2414 1
	   if ((yyvsp[(1) - (5)].negate)) {
d2420 1
a2420 1
						    (yyvsp[(4) - (5)].swiz_mask).swizzle);
d2422 1
d2426 1
a2426 2
/* Line 1787 of yacc.c  */
#line 640 "program_parse.y"
d2428 4
a2431 4
	   (yyval.dst_reg) = (yyvsp[(1) - (3)].dst_reg);
	   (yyval.dst_reg).WriteMask = (yyvsp[(2) - (3)].swiz_mask).mask;
	   (yyval.dst_reg).CondMask = (yyvsp[(3) - (3)].dst_reg).CondMask;
	   (yyval.dst_reg).CondSwizzle = (yyvsp[(3) - (3)].dst_reg).CondSwizzle;
d2440 1
a2440 1
		 yyerror(& (yylsp[(1) - (3)]), state, "position-invariant programs cannot "
d2448 1
d2452 1
a2452 2
/* Line 1787 of yacc.c  */
#line 664 "program_parse.y"
d2455 1
a2455 1
	   (yyval.dst_reg).WriteMask = (yyvsp[(2) - (2)].swiz_mask).mask;
d2457 1
d2461 1
a2461 2
/* Line 1787 of yacc.c  */
#line 671 "program_parse.y"
d2464 4
a2467 4
	      ((yyvsp[(1) - (7)].ext_swizzle).xyzw_valid << 0)
	      | ((yyvsp[(3) - (7)].ext_swizzle).xyzw_valid << 1)
	      | ((yyvsp[(5) - (7)].ext_swizzle).xyzw_valid << 2)
	      | ((yyvsp[(7) - (7)].ext_swizzle).xyzw_valid << 3);
d2469 4
a2472 4
	      ((yyvsp[(1) - (7)].ext_swizzle).rgba_valid << 0)
	      | ((yyvsp[(3) - (7)].ext_swizzle).rgba_valid << 1)
	      | ((yyvsp[(5) - (7)].ext_swizzle).rgba_valid << 2)
	      | ((yyvsp[(7) - (7)].ext_swizzle).rgba_valid << 3);
d2483 1
a2483 1
	      yyerror(& (yylsp[(1) - (7)]), state, "cannot combine RGBA and XYZW swizzle "
d2488 3
a2490 3
	   (yyval.swiz_mask).swizzle = MAKE_SWIZZLE4((yyvsp[(1) - (7)].ext_swizzle).swz, (yyvsp[(3) - (7)].ext_swizzle).swz, (yyvsp[(5) - (7)].ext_swizzle).swz, (yyvsp[(7) - (7)].ext_swizzle).swz);
	   (yyval.swiz_mask).mask = ((yyvsp[(1) - (7)].ext_swizzle).negate) | ((yyvsp[(3) - (7)].ext_swizzle).negate << 1) | ((yyvsp[(5) - (7)].ext_swizzle).negate << 2)
	      | ((yyvsp[(7) - (7)].ext_swizzle).negate << 3);
d2492 1
d2496 1
a2496 2
/* Line 1787 of yacc.c  */
#line 704 "program_parse.y"
d2498 2
a2499 2
	   (yyval.ext_swizzle) = (yyvsp[(2) - (2)].ext_swizzle);
	   (yyval.ext_swizzle).negate = ((yyvsp[(1) - (2)].negate)) ? 1 : 0;
d2501 1
d2505 1
a2505 2
/* Line 1787 of yacc.c  */
#line 711 "program_parse.y"
d2507 2
a2508 2
	   if (((yyvsp[(1) - (1)].integer) != 0) && ((yyvsp[(1) - (1)].integer) != 1)) {
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid extended swizzle selector");
d2512 1
a2512 1
	   (yyval.ext_swizzle).swz = ((yyvsp[(1) - (1)].integer) == 0) ? SWIZZLE_ZERO : SWIZZLE_ONE;
d2521 1
d2525 1
a2525 2
/* Line 1787 of yacc.c  */
#line 727 "program_parse.y"
d2529 2
a2530 2
	   if (strlen((yyvsp[(1) - (1)].string)) > 1) {
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid extended swizzle selector");
d2534 2
a2535 2
	   s = (yyvsp[(1) - (1)].string)[0];
	   free((yyvsp[(1) - (1)].string));
d2577 1
a2577 1
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid extended swizzle selector");
d2582 1
d2586 1
a2586 2
/* Line 1787 of yacc.c  */
#line 786 "program_parse.y"
d2589 1
a2589 1
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[(1) - (1)].string));
d2591 1
a2591 1
	   free((yyvsp[(1) - (1)].string));
d2594 1
a2594 1
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid operand variable");
d2598 1
a2598 1
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid operand variable");
d2601 1
a2601 1
	      yyerror(& (yylsp[(1) - (1)]), state, "non-array access to array PARAM");
d2619 1
a2619 1
	      if (!validate_inputs(& (yylsp[(1) - (1)]), state)) {
d2629 1
d2633 1
a2633 2
/* Line 1787 of yacc.c  */
#line 829 "program_parse.y"
d2635 1
a2635 1
	   set_src_reg(& (yyval.src_reg), PROGRAM_INPUT, (yyvsp[(1) - (1)].attrib));
d2638 1
a2638 1
	   if (!validate_inputs(& (yylsp[(1) - (1)]), state)) {
d2642 1
d2646 1
a2646 2
/* Line 1787 of yacc.c  */
#line 838 "program_parse.y"
d2648 3
a2650 3
	   if (! (yyvsp[(3) - (4)].src_reg).Base.RelAddr
	       && ((unsigned) (yyvsp[(3) - (4)].src_reg).Base.Index >= (yyvsp[(1) - (4)].sym)->param_binding_length)) {
	      yyerror(& (yylsp[(3) - (4)]), state, "out of bounds array access");
d2655 1
a2655 1
	   (yyval.src_reg).Base.File = (yyvsp[(1) - (4)].sym)->param_binding_type;
d2657 1
a2657 1
	   if ((yyvsp[(3) - (4)].src_reg).Base.RelAddr) {
d2659 1
a2659 1
	      (yyvsp[(1) - (4)].sym)->param_accessed_indirectly = 1;
d2662 2
a2663 2
	      (yyval.src_reg).Base.Index = (yyvsp[(3) - (4)].src_reg).Base.Index;
	      (yyval.src_reg).Symbol = (yyvsp[(1) - (4)].sym);
d2665 1
a2665 1
	      (yyval.src_reg).Base.Index = (yyvsp[(1) - (4)].sym)->param_binding_begin + (yyvsp[(3) - (4)].src_reg).Base.Index;
d2668 1
d2672 1
a2672 2
/* Line 1787 of yacc.c  */
#line 860 "program_parse.y"
d2674 2
a2675 2
           gl_register_file file = ((yyvsp[(1) - (1)].temp_sym).name != NULL) 
	      ? (yyvsp[(1) - (1)].temp_sym).param_binding_type
d2677 2
a2678 2
           set_src_reg_swz(& (yyval.src_reg), file, (yyvsp[(1) - (1)].temp_sym).param_binding_begin,
                           (yyvsp[(1) - (1)].temp_sym).param_binding_swizzle);
d2680 1
d2684 1
a2684 2
/* Line 1787 of yacc.c  */
#line 870 "program_parse.y"
d2686 1
a2686 1
	   set_dst_reg(& (yyval.dst_reg), PROGRAM_OUTPUT, (yyvsp[(1) - (1)].result));
d2688 1
d2692 1
a2692 2
/* Line 1787 of yacc.c  */
#line 874 "program_parse.y"
d2695 1
a2695 1
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[(1) - (1)].string));
d2697 1
a2697 1
	   free((yyvsp[(1) - (1)].string));
d2700 1
a2700 1
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid operand variable");
d2703 1
a2703 1
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid operand variable");
d2719 1
d2723 1
a2723 2
/* Line 1787 of yacc.c  */
#line 903 "program_parse.y"
d2726 1
a2726 1
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[(1) - (1)].string));
d2728 1
a2728 1
	   free((yyvsp[(1) - (1)].string));
d2731 1
a2731 1
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid operand variable");
d2734 1
a2734 1
	      yyerror(& (yylsp[(1) - (1)]), state, "array access to non-PARAM variable");
d2740 1
d2744 1
a2744 2
/* Line 1787 of yacc.c  */
#line 924 "program_parse.y"
d2747 1
a2747 1
	   (yyval.src_reg).Base.Index = (yyvsp[(1) - (1)].integer);
d2749 1
d2753 1
a2753 2
/* Line 1787 of yacc.c  */
#line 931 "program_parse.y"
d2761 1
a2761 1
	   (yyval.src_reg).Base.Index = (yyvsp[(3) - (3)].integer);
d2763 1
d2767 1
a2767 2
/* Line 1787 of yacc.c  */
#line 942 "program_parse.y"
d2769 1
d2773 3
a2775 3
/* Line 1787 of yacc.c  */
#line 943 "program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (2)].integer); }
d2779 3
a2781 3
/* Line 1787 of yacc.c  */
#line 944 "program_parse.y"
    { (yyval.integer) = -(yyvsp[(2) - (2)].integer); }
d2785 1
a2785 2
/* Line 1787 of yacc.c  */
#line 948 "program_parse.y"
d2787 1
a2787 1
	   if (((yyvsp[(1) - (1)].integer) < 0) || ((yyvsp[(1) - (1)].integer) > (state->limits->MaxAddressOffset - 1))) {
d2790 2
a2791 2
                             "relative address offset too large (%d)", (yyvsp[(1) - (1)].integer));
	      yyerror(& (yylsp[(1) - (1)]), state, s);
d2794 1
a2794 1
	      (yyval.integer) = (yyvsp[(1) - (1)].integer);
d2797 1
d2801 1
a2801 2
/* Line 1787 of yacc.c  */
#line 962 "program_parse.y"
d2803 1
a2803 1
	   if (((yyvsp[(1) - (1)].integer) < 0) || ((yyvsp[(1) - (1)].integer) > state->limits->MaxAddressOffset)) {
d2806 2
a2807 2
                             "relative address offset too large (%d)", (yyvsp[(1) - (1)].integer));
	      yyerror(& (yylsp[(1) - (1)]), state, s);
d2810 1
a2810 1
	      (yyval.integer) = (yyvsp[(1) - (1)].integer);
d2813 1
d2817 1
a2817 2
/* Line 1787 of yacc.c  */
#line 976 "program_parse.y"
d2820 1
a2820 1
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[(1) - (1)].string));
d2822 1
a2822 1
	   free((yyvsp[(1) - (1)].string));
d2825 1
a2825 1
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid array member");
d2828 1
a2828 1
	      yyerror(& (yylsp[(1) - (1)]), state,
d2835 1
d2839 1
a2839 2
/* Line 1787 of yacc.c  */
#line 996 "program_parse.y"
d2841 2
a2842 2
	   if ((yyvsp[(1) - (1)].swiz_mask).mask != WRITEMASK_X) {
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid address component selector");
d2845 1
a2845 1
	      (yyval.swiz_mask) = (yyvsp[(1) - (1)].swiz_mask);
d2848 1
d2852 1
a2852 2
/* Line 1787 of yacc.c  */
#line 1007 "program_parse.y"
d2854 2
a2855 2
	   if ((yyvsp[(1) - (1)].swiz_mask).mask != WRITEMASK_X) {
	      yyerror(& (yylsp[(1) - (1)]), state,
d2859 1
a2859 1
	      (yyval.swiz_mask) = (yyvsp[(1) - (1)].swiz_mask);
d2862 1
d2866 1
a2866 2
/* Line 1787 of yacc.c  */
#line 1023 "program_parse.y"
d2868 1
d2872 1
a2872 2
/* Line 1787 of yacc.c  */
#line 1027 "program_parse.y"
d2874 1
d2878 1
a2878 2
/* Line 1787 of yacc.c  */
#line 1031 "program_parse.y"
d2880 1
a2880 1
	   (yyval.dst_reg) = (yyvsp[(2) - (3)].dst_reg);
d2882 1
d2886 1
a2886 2
/* Line 1787 of yacc.c  */
#line 1035 "program_parse.y"
d2888 1
a2888 1
	   (yyval.dst_reg) = (yyvsp[(2) - (3)].dst_reg);
d2890 1
d2894 1
a2894 2
/* Line 1787 of yacc.c  */
#line 1039 "program_parse.y"
d2899 1
d2903 1
a2903 2
/* Line 1787 of yacc.c  */
#line 1046 "program_parse.y"
d2905 2
a2906 2
	   (yyval.dst_reg) = (yyvsp[(1) - (2)].dst_reg);
	   (yyval.dst_reg).CondSwizzle = (yyvsp[(2) - (2)].swiz_mask).swizzle;
d2908 1
d2912 1
a2912 2
/* Line 1787 of yacc.c  */
#line 1053 "program_parse.y"
d2914 2
a2915 2
	   (yyval.dst_reg) = (yyvsp[(1) - (2)].dst_reg);
	   (yyval.dst_reg).CondSwizzle = (yyvsp[(2) - (2)].swiz_mask).swizzle;
d2917 1
d2921 1
a2921 2
/* Line 1787 of yacc.c  */
#line 1060 "program_parse.y"
d2923 2
a2924 2
	   const int cond = _mesa_parse_cc((yyvsp[(1) - (1)].string));
	   if ((cond == 0) || ((yyvsp[(1) - (1)].string)[2] != '\0')) {
d2926 1
a2926 1
		 make_error_string("invalid condition code \"%s\"", (yyvsp[(1) - (1)].string));
d2928 1
a2928 1
	      yyerror(& (yylsp[(1) - (1)]), state, (err_str != NULL)
d2941 1
d2945 1
a2945 2
/* Line 1787 of yacc.c  */
#line 1082 "program_parse.y"
d2947 2
a2948 2
	   const int cond = _mesa_parse_cc((yyvsp[(1) - (1)].string));
	   if ((cond == 0) || ((yyvsp[(1) - (1)].string)[2] != '\0')) {
d2950 1
a2950 1
		 make_error_string("invalid condition code \"%s\"", (yyvsp[(1) - (1)].string));
d2952 1
a2952 1
	      yyerror(& (yylsp[(1) - (1)]), state, (err_str != NULL)
d2965 1
d2969 1
a2969 2
/* Line 1787 of yacc.c  */
#line 1112 "program_parse.y"
d2972 1
a2972 1
	      declare_variable(state, (yyvsp[(2) - (4)].string), at_attrib, & (yylsp[(2) - (4)]));
d2975 1
a2975 1
	      free((yyvsp[(2) - (4)].string));
d2978 1
a2978 1
	      s->attrib_binding = (yyvsp[(4) - (4)].attrib);
d2981 1
a2981 1
	      if (!validate_inputs(& (yylsp[(4) - (4)]), state)) {
d2986 1
d2990 1
a2990 2
/* Line 1787 of yacc.c  */
#line 1131 "program_parse.y"
d2992 1
a2992 1
	   (yyval.attrib) = (yyvsp[(2) - (2)].attrib);
d2994 1
d2998 1
a2998 2
/* Line 1787 of yacc.c  */
#line 1135 "program_parse.y"
d3000 1
a3000 1
	   (yyval.attrib) = (yyvsp[(2) - (2)].attrib);
d3002 1
d3006 1
a3006 2
/* Line 1787 of yacc.c  */
#line 1141 "program_parse.y"
d3010 1
d3014 1
a3014 2
/* Line 1787 of yacc.c  */
#line 1145 "program_parse.y"
d3018 1
d3022 1
a3022 2
/* Line 1787 of yacc.c  */
#line 1149 "program_parse.y"
d3026 1
d3030 1
a3030 2
/* Line 1787 of yacc.c  */
#line 1153 "program_parse.y"
d3032 1
a3032 1
	   (yyval.attrib) = VERT_ATTRIB_COLOR0 + (yyvsp[(2) - (2)].integer);
d3034 1
d3038 1
a3038 2
/* Line 1787 of yacc.c  */
#line 1157 "program_parse.y"
d3042 1
d3046 1
a3046 2
/* Line 1787 of yacc.c  */
#line 1161 "program_parse.y"
d3048 1
a3048 1
	   (yyval.attrib) = VERT_ATTRIB_TEX0 + (yyvsp[(2) - (2)].integer);
d3050 1
d3054 1
a3054 2
/* Line 1787 of yacc.c  */
#line 1165 "program_parse.y"
d3056 1
a3056 1
	   yyerror(& (yylsp[(1) - (4)]), state, "GL_ARB_matrix_palette not supported");
d3059 1
d3063 1
a3063 2
/* Line 1787 of yacc.c  */
#line 1170 "program_parse.y"
d3065 1
a3065 1
	   (yyval.attrib) = VERT_ATTRIB_GENERIC0 + (yyvsp[(3) - (4)].integer);
d3067 1
d3071 1
a3071 2
/* Line 1787 of yacc.c  */
#line 1176 "program_parse.y"
d3073 2
a3074 2
	   if ((unsigned) (yyvsp[(1) - (1)].integer) >= state->limits->MaxAttribs) {
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid vertex attribute reference");
d3078 1
a3078 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d3080 1
d3084 1
a3084 2
/* Line 1787 of yacc.c  */
#line 1190 "program_parse.y"
d3088 1
d3092 1
a3092 2
/* Line 1787 of yacc.c  */
#line 1194 "program_parse.y"
d3094 1
a3094 1
	   (yyval.attrib) = VARYING_SLOT_COL0 + (yyvsp[(2) - (2)].integer);
d3096 1
d3100 1
a3100 2
/* Line 1787 of yacc.c  */
#line 1198 "program_parse.y"
d3104 1
d3108 1
a3108 2
/* Line 1787 of yacc.c  */
#line 1202 "program_parse.y"
d3110 1
a3110 1
	   (yyval.attrib) = VARYING_SLOT_TEX0 + (yyvsp[(2) - (2)].integer);
d3112 1
d3116 1
a3116 2
/* Line 1787 of yacc.c  */
#line 1210 "program_parse.y"
d3119 1
a3119 1
	      declare_variable(state, (yyvsp[(2) - (3)].string), at_param, & (yylsp[(2) - (3)]));
d3122 1
a3122 1
	      free((yyvsp[(2) - (3)].string));
d3125 4
a3128 4
	      s->param_binding_type = (yyvsp[(3) - (3)].temp_sym).param_binding_type;
	      s->param_binding_begin = (yyvsp[(3) - (3)].temp_sym).param_binding_begin;
	      s->param_binding_length = (yyvsp[(3) - (3)].temp_sym).param_binding_length;
              s->param_binding_swizzle = (yyvsp[(3) - (3)].temp_sym).param_binding_swizzle;
d3132 1
d3136 1
a3136 2
/* Line 1787 of yacc.c  */
#line 1228 "program_parse.y"
d3138 3
a3140 3
	   if (((yyvsp[(4) - (6)].integer) != 0) && ((unsigned) (yyvsp[(4) - (6)].integer) != (yyvsp[(6) - (6)].temp_sym).param_binding_length)) {
	      free((yyvsp[(2) - (6)].string));
	      yyerror(& (yylsp[(4) - (6)]), state, 
d3145 1
a3145 1
		 declare_variable(state, (yyvsp[(2) - (6)].string), (yyvsp[(6) - (6)].temp_sym).type, & (yylsp[(2) - (6)]));
d3148 1
a3148 1
		 free((yyvsp[(2) - (6)].string));
d3151 3
a3153 3
		 s->param_binding_type = (yyvsp[(6) - (6)].temp_sym).param_binding_type;
		 s->param_binding_begin = (yyvsp[(6) - (6)].temp_sym).param_binding_begin;
		 s->param_binding_length = (yyvsp[(6) - (6)].temp_sym).param_binding_length;
d3159 1
d3163 1
a3163 2
/* Line 1787 of yacc.c  */
#line 1253 "program_parse.y"
d3167 1
d3171 1
a3171 2
/* Line 1787 of yacc.c  */
#line 1257 "program_parse.y"
d3173 1
a3173 1
	   if (((yyvsp[(1) - (1)].integer) < 1) || ((unsigned) (yyvsp[(1) - (1)].integer) > state->limits->MaxParameters)) {
d3177 2
a3178 2
                             (yyvsp[(1) - (1)].integer), state->limits->MaxParameters);
	      yyerror(& (yylsp[(1) - (1)]), state, msg);
d3181 1
a3181 1
	      (yyval.integer) = (yyvsp[(1) - (1)].integer);
d3184 1
d3188 1
a3188 2
/* Line 1787 of yacc.c  */
#line 1272 "program_parse.y"
d3190 1
a3190 1
	   (yyval.temp_sym) = (yyvsp[(2) - (2)].temp_sym);
d3192 1
d3196 1
a3196 2
/* Line 1787 of yacc.c  */
#line 1278 "program_parse.y"
d3198 1
a3198 1
	   (yyval.temp_sym) = (yyvsp[(3) - (4)].temp_sym);
d3200 1
d3204 1
a3204 2
/* Line 1787 of yacc.c  */
#line 1285 "program_parse.y"
d3206 2
a3207 2
	   (yyvsp[(1) - (3)].temp_sym).param_binding_length += (yyvsp[(3) - (3)].temp_sym).param_binding_length;
	   (yyval.temp_sym) = (yyvsp[(1) - (3)].temp_sym);
d3209 1
d3213 1
a3213 2
/* Line 1787 of yacc.c  */
#line 1292 "program_parse.y"
d3217 1
a3217 1
	   initialize_symbol_from_state(state->prog, & (yyval.temp_sym), (yyvsp[(1) - (1)].state));
d3219 1
d3223 1
a3223 2
/* Line 1787 of yacc.c  */
#line 1298 "program_parse.y"
d3227 1
a3227 1
	   initialize_symbol_from_param(state->prog, & (yyval.temp_sym), (yyvsp[(1) - (1)].state));
d3229 1
d3233 1
a3233 2
/* Line 1787 of yacc.c  */
#line 1304 "program_parse.y"
d3237 1
a3237 1
	   initialize_symbol_from_const(state->prog, & (yyval.temp_sym), & (yyvsp[(1) - (1)].vector), GL_TRUE);
d3239 1
d3243 1
a3243 2
/* Line 1787 of yacc.c  */
#line 1312 "program_parse.y"
d3247 1
a3247 1
	   initialize_symbol_from_state(state->prog, & (yyval.temp_sym), (yyvsp[(1) - (1)].state));
d3249 1
d3253 1
a3253 2
/* Line 1787 of yacc.c  */
#line 1318 "program_parse.y"
d3257 1
a3257 1
	   initialize_symbol_from_param(state->prog, & (yyval.temp_sym), (yyvsp[(1) - (1)].state));
d3259 1
d3263 1
a3263 2
/* Line 1787 of yacc.c  */
#line 1324 "program_parse.y"
d3267 1
a3267 1
	   initialize_symbol_from_const(state->prog, & (yyval.temp_sym), & (yyvsp[(1) - (1)].vector), GL_TRUE);
d3269 1
d3273 1
a3273 2
/* Line 1787 of yacc.c  */
#line 1332 "program_parse.y"
d3277 1
a3277 1
	   initialize_symbol_from_state(state->prog, & (yyval.temp_sym), (yyvsp[(1) - (1)].state));
d3279 1
d3283 1
a3283 2
/* Line 1787 of yacc.c  */
#line 1338 "program_parse.y"
d3287 1
a3287 1
	   initialize_symbol_from_param(state->prog, & (yyval.temp_sym), (yyvsp[(1) - (1)].state));
d3289 1
d3293 1
a3293 2
/* Line 1787 of yacc.c  */
#line 1344 "program_parse.y"
d3297 1
a3297 1
	   initialize_symbol_from_const(state->prog, & (yyval.temp_sym), & (yyvsp[(1) - (1)].vector), GL_FALSE);
d3299 1
d3303 3
a3305 3
/* Line 1787 of yacc.c  */
#line 1351 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(1) - (1)].state), sizeof((yyval.state))); }
d3309 3
a3311 3
/* Line 1787 of yacc.c  */
#line 1352 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3315 3
a3317 3
/* Line 1787 of yacc.c  */
#line 1355 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3321 3
a3323 3
/* Line 1787 of yacc.c  */
#line 1356 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3327 3
a3329 3
/* Line 1787 of yacc.c  */
#line 1357 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3333 3
a3335 3
/* Line 1787 of yacc.c  */
#line 1358 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3339 3
a3341 3
/* Line 1787 of yacc.c  */
#line 1359 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3345 3
a3347 3
/* Line 1787 of yacc.c  */
#line 1360 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3351 3
a3353 3
/* Line 1787 of yacc.c  */
#line 1361 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3357 3
a3359 3
/* Line 1787 of yacc.c  */
#line 1362 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3363 3
a3365 3
/* Line 1787 of yacc.c  */
#line 1363 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3369 3
a3371 3
/* Line 1787 of yacc.c  */
#line 1364 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3375 3
a3377 3
/* Line 1787 of yacc.c  */
#line 1365 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3381 1
a3381 2
/* Line 1787 of yacc.c  */
#line 1369 "program_parse.y"
d3385 2
a3386 2
	   (yyval.state)[1] = (yyvsp[(2) - (3)].integer);
	   (yyval.state)[2] = (yyvsp[(3) - (3)].integer);
d3388 1
d3392 1
a3392 2
/* Line 1787 of yacc.c  */
#line 1378 "program_parse.y"
d3394 1
a3394 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d3396 1
d3400 1
a3400 2
/* Line 1787 of yacc.c  */
#line 1382 "program_parse.y"
d3404 1
d3408 1
a3408 2
/* Line 1787 of yacc.c  */
#line 1386 "program_parse.y"
d3412 1
d3416 1
a3416 2
/* Line 1787 of yacc.c  */
#line 1392 "program_parse.y"
d3420 2
a3421 2
	   (yyval.state)[1] = (yyvsp[(3) - (5)].integer);
	   (yyval.state)[2] = (yyvsp[(5) - (5)].integer);
d3423 1
d3427 1
a3427 2
/* Line 1787 of yacc.c  */
#line 1401 "program_parse.y"
d3429 1
a3429 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d3431 1
d3435 1
a3435 2
/* Line 1787 of yacc.c  */
#line 1405 "program_parse.y"
d3439 1
d3443 1
a3443 2
/* Line 1787 of yacc.c  */
#line 1409 "program_parse.y"
d3446 1
a3446 1
	      yyerror(& (yylsp[(1) - (1)]), state, "GL_ARB_point_parameters not supported");
d3452 1
d3456 1
a3456 2
/* Line 1787 of yacc.c  */
#line 1418 "program_parse.y"
d3458 1
a3458 1
	   (yyval.integer) = (yyvsp[(2) - (2)].integer);
d3460 1
d3464 1
a3464 2
/* Line 1787 of yacc.c  */
#line 1422 "program_parse.y"
d3468 1
d3472 1
a3472 2
/* Line 1787 of yacc.c  */
#line 1428 "program_parse.y"
d3476 1
d3480 1
a3480 2
/* Line 1787 of yacc.c  */
#line 1434 "program_parse.y"
d3482 2
a3483 2
	   (yyval.state)[0] = (yyvsp[(2) - (2)].state)[0];
	   (yyval.state)[1] = (yyvsp[(2) - (2)].state)[1];
d3485 1
d3489 1
a3489 2
/* Line 1787 of yacc.c  */
#line 1441 "program_parse.y"
d3494 1
d3498 1
a3498 2
/* Line 1787 of yacc.c  */
#line 1446 "program_parse.y"
d3502 1
a3502 1
	   (yyval.state)[1] = (yyvsp[(1) - (2)].integer);
d3504 1
d3508 1
a3508 2
/* Line 1787 of yacc.c  */
#line 1454 "program_parse.y"
d3512 3
a3514 3
	   (yyval.state)[1] = (yyvsp[(3) - (6)].integer);
	   (yyval.state)[2] = (yyvsp[(5) - (6)].integer);
	   (yyval.state)[3] = (yyvsp[(6) - (6)].integer);
d3516 1
d3520 1
a3520 2
/* Line 1787 of yacc.c  */
#line 1466 "program_parse.y"
d3523 2
a3524 2
	   (yyval.state)[0] = (yyvsp[(3) - (3)].integer);
	   (yyval.state)[1] = (yyvsp[(2) - (3)].integer);
d3526 1
d3530 1
a3530 2
/* Line 1787 of yacc.c  */
#line 1474 "program_parse.y"
d3534 1
d3538 1
a3538 2
/* Line 1787 of yacc.c  */
#line 1480 "program_parse.y"
d3542 1
d3546 1
a3546 2
/* Line 1787 of yacc.c  */
#line 1484 "program_parse.y"
d3550 1
d3554 1
a3554 2
/* Line 1787 of yacc.c  */
#line 1488 "program_parse.y"
d3558 1
d3562 1
a3562 2
/* Line 1787 of yacc.c  */
#line 1494 "program_parse.y"
d3564 2
a3565 2
	   if ((unsigned) (yyvsp[(1) - (1)].integer) >= state->MaxLights) {
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid light selector");
d3569 1
a3569 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d3571 1
d3575 1
a3575 2
/* Line 1787 of yacc.c  */
#line 1505 "program_parse.y"
d3579 2
a3580 2
	   (yyval.state)[1] = (yyvsp[(2) - (4)].integer);
	   (yyval.state)[2] = (yyvsp[(3) - (4)].integer) + (yyvsp[(4) - (4)].integer);
d3582 1
d3586 1
a3586 2
/* Line 1787 of yacc.c  */
#line 1514 "program_parse.y"
d3590 1
d3594 1
a3594 2
/* Line 1787 of yacc.c  */
#line 1518 "program_parse.y"
d3598 1
d3602 1
a3602 2
/* Line 1787 of yacc.c  */
#line 1523 "program_parse.y"
d3606 1
d3610 1
a3610 2
/* Line 1787 of yacc.c  */
#line 1527 "program_parse.y"
d3614 1
d3618 1
a3618 2
/* Line 1787 of yacc.c  */
#line 1531 "program_parse.y"
d3622 1
d3626 1
a3626 2
/* Line 1787 of yacc.c  */
#line 1535 "program_parse.y"
d3630 1
d3634 1
a3634 2
/* Line 1787 of yacc.c  */
#line 1541 "program_parse.y"
d3637 1
a3637 1
	   (yyval.state)[0] = (yyvsp[(2) - (2)].integer);
d3639 1
d3643 1
a3643 2
/* Line 1787 of yacc.c  */
#line 1548 "program_parse.y"
d3647 1
d3651 1
a3651 2
/* Line 1787 of yacc.c  */
#line 1552 "program_parse.y"
d3655 1
d3659 1
a3659 2
/* Line 1787 of yacc.c  */
#line 1558 "program_parse.y"
d3663 1
a3663 1
	   (yyval.state)[1] = (yyvsp[(3) - (5)].integer);
d3665 1
d3669 1
a3669 2
/* Line 1787 of yacc.c  */
#line 1566 "program_parse.y"
d3671 2
a3672 2
	   if ((unsigned) (yyvsp[(1) - (1)].integer) >= state->MaxClipPlanes) {
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid clip plane selector");
d3676 1
a3676 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d3678 1
d3682 1
a3682 2
/* Line 1787 of yacc.c  */
#line 1577 "program_parse.y"
d3685 1
a3685 1
	   (yyval.state)[0] = (yyvsp[(2) - (2)].integer);
d3687 1
d3691 1
a3691 2
/* Line 1787 of yacc.c  */
#line 1584 "program_parse.y"
d3695 1
d3699 1
a3699 2
/* Line 1787 of yacc.c  */
#line 1588 "program_parse.y"
d3703 1
d3707 1
a3707 2
/* Line 1787 of yacc.c  */
#line 1594 "program_parse.y"
d3709 5
a3713 5
	   (yyval.state)[0] = (yyvsp[(1) - (5)].state)[0];
	   (yyval.state)[1] = (yyvsp[(1) - (5)].state)[1];
	   (yyval.state)[2] = (yyvsp[(4) - (5)].integer);
	   (yyval.state)[3] = (yyvsp[(4) - (5)].integer);
	   (yyval.state)[4] = (yyvsp[(1) - (5)].state)[2];
d3715 1
d3719 1
a3719 2
/* Line 1787 of yacc.c  */
#line 1604 "program_parse.y"
d3721 5
a3725 5
	   (yyval.state)[0] = (yyvsp[(1) - (2)].state)[0];
	   (yyval.state)[1] = (yyvsp[(1) - (2)].state)[1];
	   (yyval.state)[2] = (yyvsp[(2) - (2)].state)[2];
	   (yyval.state)[3] = (yyvsp[(2) - (2)].state)[3];
	   (yyval.state)[4] = (yyvsp[(1) - (2)].state)[2];
d3727 1
d3731 1
a3731 2
/* Line 1787 of yacc.c  */
#line 1614 "program_parse.y"
d3736 1
d3740 1
a3740 2
/* Line 1787 of yacc.c  */
#line 1619 "program_parse.y"
d3748 2
a3749 2
	   if ((yyvsp[(3) - (6)].integer) > (yyvsp[(5) - (6)].integer)) {
	      yyerror(& (yylsp[(3) - (6)]), state, "invalid matrix row range");
d3753 2
a3754 2
	   (yyval.state)[2] = (yyvsp[(3) - (6)].integer);
	   (yyval.state)[3] = (yyvsp[(5) - (6)].integer);
d3756 1
d3760 1
a3760 2
/* Line 1787 of yacc.c  */
#line 1637 "program_parse.y"
d3762 3
a3764 3
	   (yyval.state)[0] = (yyvsp[(2) - (3)].state)[0];
	   (yyval.state)[1] = (yyvsp[(2) - (3)].state)[1];
	   (yyval.state)[2] = (yyvsp[(3) - (3)].integer);
d3766 1
d3770 1
a3770 2
/* Line 1787 of yacc.c  */
#line 1645 "program_parse.y"
d3774 1
d3778 1
a3778 2
/* Line 1787 of yacc.c  */
#line 1649 "program_parse.y"
d3780 1
a3780 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d3782 1
d3786 1
a3786 2
/* Line 1787 of yacc.c  */
#line 1655 "program_parse.y"
d3790 1
d3794 1
a3794 2
/* Line 1787 of yacc.c  */
#line 1659 "program_parse.y"
d3798 1
d3802 1
a3802 2
/* Line 1787 of yacc.c  */
#line 1663 "program_parse.y"
d3806 1
d3810 1
a3810 2
/* Line 1787 of yacc.c  */
#line 1669 "program_parse.y"
d3812 2
a3813 2
	   if ((yyvsp[(1) - (1)].integer) > 3) {
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid matrix row reference");
d3817 1
a3817 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d3819 1
d3823 1
a3823 2
/* Line 1787 of yacc.c  */
#line 1680 "program_parse.y"
d3826 1
a3826 1
	   (yyval.state)[1] = (yyvsp[(2) - (2)].integer);
d3828 1
d3832 1
a3832 2
/* Line 1787 of yacc.c  */
#line 1685 "program_parse.y"
d3837 1
d3841 1
a3841 2
/* Line 1787 of yacc.c  */
#line 1690 "program_parse.y"
d3846 1
d3850 1
a3850 2
/* Line 1787 of yacc.c  */
#line 1695 "program_parse.y"
d3853 1
a3853 1
	   (yyval.state)[1] = (yyvsp[(2) - (2)].integer);
d3855 1
d3859 1
a3859 2
/* Line 1787 of yacc.c  */
#line 1700 "program_parse.y"
d3861 1
a3861 1
	   yyerror(& (yylsp[(1) - (4)]), state, "GL_ARB_matrix_palette not supported");
d3864 1
d3868 1
a3868 2
/* Line 1787 of yacc.c  */
#line 1705 "program_parse.y"
d3871 1
a3871 1
	   (yyval.state)[1] = (yyvsp[(3) - (4)].integer);
d3873 1
d3877 1
a3877 2
/* Line 1787 of yacc.c  */
#line 1712 "program_parse.y"
d3881 1
d3885 1
a3885 2
/* Line 1787 of yacc.c  */
#line 1716 "program_parse.y"
d3887 1
a3887 1
	   (yyval.integer) = (yyvsp[(2) - (3)].integer);
d3889 1
d3893 1
a3893 2
/* Line 1787 of yacc.c  */
#line 1721 "program_parse.y"
d3898 2
a3899 2
	   if ((yyvsp[(1) - (1)].integer) != 0) {
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid modelview matrix index");
d3903 1
a3903 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d3905 1
d3909 1
a3909 2
/* Line 1787 of yacc.c  */
#line 1734 "program_parse.y"
d3914 1
a3914 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d3916 1
d3920 1
a3920 2
/* Line 1787 of yacc.c  */
#line 1742 "program_parse.y"
d3922 2
a3923 2
	   if ((unsigned) (yyvsp[(1) - (1)].integer) >= state->MaxProgramMatrices) {
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid program matrix selector");
d3927 1
a3927 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d3929 1
d3933 1
a3933 2
/* Line 1787 of yacc.c  */
#line 1753 "program_parse.y"
d3938 1
d3942 1
a3942 2
/* Line 1787 of yacc.c  */
#line 1765 "program_parse.y"
d3947 2
a3948 2
	   (yyval.state)[2] = (yyvsp[(4) - (5)].state)[0];
	   (yyval.state)[3] = (yyvsp[(4) - (5)].state)[1];
d3950 1
d3954 1
a3954 2
/* Line 1787 of yacc.c  */
#line 1775 "program_parse.y"
d3956 2
a3957 2
	   (yyval.state)[0] = (yyvsp[(1) - (1)].integer);
	   (yyval.state)[1] = (yyvsp[(1) - (1)].integer);
d3959 1
d3963 1
a3963 2
/* Line 1787 of yacc.c  */
#line 1780 "program_parse.y"
d3965 2
a3966 2
	   (yyval.state)[0] = (yyvsp[(1) - (3)].integer);
	   (yyval.state)[1] = (yyvsp[(3) - (3)].integer);
d3968 1
d3972 1
a3972 2
/* Line 1787 of yacc.c  */
#line 1787 "program_parse.y"
d3977 2
a3978 2
	   (yyval.state)[2] = (yyvsp[(4) - (5)].integer);
	   (yyval.state)[3] = (yyvsp[(4) - (5)].integer);
d3980 1
d3984 1
a3984 2
/* Line 1787 of yacc.c  */
#line 1797 "program_parse.y"
d3989 2
a3990 2
	   (yyval.state)[2] = (yyvsp[(4) - (5)].state)[0];
	   (yyval.state)[3] = (yyvsp[(4) - (5)].state)[1];
d3992 1
d3996 1
a3996 2
/* Line 1787 of yacc.c  */
#line 1806 "program_parse.y"
d3998 2
a3999 2
	   (yyval.state)[0] = (yyvsp[(1) - (1)].integer);
	   (yyval.state)[1] = (yyvsp[(1) - (1)].integer);
d4001 1
d4005 1
a4005 2
/* Line 1787 of yacc.c  */
#line 1811 "program_parse.y"
d4007 2
a4008 2
	   (yyval.state)[0] = (yyvsp[(1) - (3)].integer);
	   (yyval.state)[1] = (yyvsp[(3) - (3)].integer);
d4010 1
d4014 1
a4014 2
/* Line 1787 of yacc.c  */
#line 1818 "program_parse.y"
d4019 2
a4020 2
	   (yyval.state)[2] = (yyvsp[(4) - (5)].integer);
	   (yyval.state)[3] = (yyvsp[(4) - (5)].integer);
d4022 1
d4026 1
a4026 2
/* Line 1787 of yacc.c  */
#line 1828 "program_parse.y"
d4028 2
a4029 2
	   if ((unsigned) (yyvsp[(1) - (1)].integer) >= state->limits->MaxEnvParams) {
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid environment parameter reference");
d4032 1
a4032 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d4034 1
d4038 1
a4038 2
/* Line 1787 of yacc.c  */
#line 1838 "program_parse.y"
d4040 2
a4041 2
	   if ((unsigned) (yyvsp[(1) - (1)].integer) >= state->limits->MaxLocalParams) {
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid local parameter reference");
d4044 1
a4044 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d4046 1
d4050 1
a4050 2
/* Line 1787 of yacc.c  */
#line 1853 "program_parse.y"
d4053 4
a4056 4
	   (yyval.vector).data[0].f = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[1].f = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[2].f = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[3].f = (yyvsp[(1) - (1)].real);
d4058 1
d4062 1
a4062 2
/* Line 1787 of yacc.c  */
#line 1863 "program_parse.y"
d4065 4
a4068 4
	   (yyval.vector).data[0].f = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[1].f = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[2].f = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[3].f = (yyvsp[(1) - (1)].real);
d4070 1
d4074 1
a4074 2
/* Line 1787 of yacc.c  */
#line 1871 "program_parse.y"
d4077 4
a4080 4
	   (yyval.vector).data[0].f = (float) (yyvsp[(1) - (1)].integer);
	   (yyval.vector).data[1].f = (float) (yyvsp[(1) - (1)].integer);
	   (yyval.vector).data[2].f = (float) (yyvsp[(1) - (1)].integer);
	   (yyval.vector).data[3].f = (float) (yyvsp[(1) - (1)].integer);
d4082 1
d4086 1
a4086 2
/* Line 1787 of yacc.c  */
#line 1881 "program_parse.y"
d4089 1
a4089 1
	   (yyval.vector).data[0].f = (yyvsp[(2) - (3)].real);
d4094 1
d4098 1
a4098 2
/* Line 1787 of yacc.c  */
#line 1889 "program_parse.y"
d4101 2
a4102 2
	   (yyval.vector).data[0].f = (yyvsp[(2) - (5)].real);
	   (yyval.vector).data[1].f = (yyvsp[(4) - (5)].real);
d4106 1
d4110 1
a4110 2
/* Line 1787 of yacc.c  */
#line 1898 "program_parse.y"
d4113 3
a4115 3
	   (yyval.vector).data[0].f = (yyvsp[(2) - (7)].real);
	   (yyval.vector).data[1].f = (yyvsp[(4) - (7)].real);
	   (yyval.vector).data[2].f = (yyvsp[(6) - (7)].real);
d4118 1
d4122 1
a4122 2
/* Line 1787 of yacc.c  */
#line 1907 "program_parse.y"
d4125 4
a4128 4
	   (yyval.vector).data[0].f = (yyvsp[(2) - (9)].real);
	   (yyval.vector).data[1].f = (yyvsp[(4) - (9)].real);
	   (yyval.vector).data[2].f = (yyvsp[(6) - (9)].real);
	   (yyval.vector).data[3].f = (yyvsp[(8) - (9)].real);
d4130 1
d4134 1
a4134 2
/* Line 1787 of yacc.c  */
#line 1917 "program_parse.y"
d4136 1
a4136 1
	   (yyval.real) = ((yyvsp[(1) - (2)].negate)) ? -(yyvsp[(2) - (2)].real) : (yyvsp[(2) - (2)].real);
d4138 1
d4142 1
a4142 2
/* Line 1787 of yacc.c  */
#line 1921 "program_parse.y"
d4144 1
a4144 1
	   (yyval.real) = (float)(((yyvsp[(1) - (2)].negate)) ? -(yyvsp[(2) - (2)].integer) : (yyvsp[(2) - (2)].integer));
d4146 1
d4150 1
a4150 2
/* Line 1787 of yacc.c  */
#line 1926 "program_parse.y"
d4152 1
d4156 1
a4156 2
/* Line 1787 of yacc.c  */
#line 1927 "program_parse.y"
d4158 1
d4162 1
a4162 2
/* Line 1787 of yacc.c  */
#line 1928 "program_parse.y"
d4164 1
d4168 3
a4170 3
/* Line 1787 of yacc.c  */
#line 1931 "program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (2)].integer); }
d4174 1
a4174 2
/* Line 1787 of yacc.c  */
#line 1935 "program_parse.y"
d4187 1
a4187 1
	      yyerror(& (yylsp[(1) - (1)]), state, "unexpected IDENTIFIER");
d4191 2
a4192 2
	   if (strcmp("SHORT", (yyvsp[(1) - (1)].string)) == 0) {
	   } else if (strcmp("LONG", (yyvsp[(1) - (1)].string)) == 0) {
d4196 1
a4196 1
				   (yyvsp[(1) - (1)].string));
d4198 1
a4198 1
	      yyerror(& (yylsp[(1) - (1)]), state, (err_str != NULL)
d4208 1
d4212 1
a4212 2
/* Line 1787 of yacc.c  */
#line 1969 "program_parse.y"
d4215 1
d4219 3
a4221 3
/* Line 1787 of yacc.c  */
#line 1973 "program_parse.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].integer); }
d4225 1
a4225 2
/* Line 1787 of yacc.c  */
#line 1977 "program_parse.y"
d4227 2
a4228 2
	   if (!declare_variable(state, (yyvsp[(3) - (3)].string), (yyvsp[(0) - (3)].integer), & (yylsp[(3) - (3)]))) {
	      free((yyvsp[(3) - (3)].string));
d4232 1
d4236 1
a4236 2
/* Line 1787 of yacc.c  */
#line 1984 "program_parse.y"
d4238 2
a4239 2
	   if (!declare_variable(state, (yyvsp[(1) - (1)].string), (yyvsp[(0) - (1)].integer), & (yylsp[(1) - (1)]))) {
	      free((yyvsp[(1) - (1)].string));
d4243 1
d4247 1
a4247 2
/* Line 1787 of yacc.c  */
#line 1993 "program_parse.y"
d4250 1
a4250 1
	      declare_variable(state, (yyvsp[(3) - (5)].string), at_output, & (yylsp[(3) - (5)]));
d4253 1
a4253 1
	      free((yyvsp[(3) - (5)].string));
d4256 1
a4256 1
	      s->output_binding = (yyvsp[(5) - (5)].result);
d4259 1
d4263 1
a4263 2
/* Line 1787 of yacc.c  */
#line 2007 "program_parse.y"
d4268 1
a4268 1
	      yyerror(& (yylsp[(2) - (2)]), state, "invalid program result name");
d4272 1
d4276 1
a4276 2
/* Line 1787 of yacc.c  */
#line 2016 "program_parse.y"
d4281 1
a4281 1
	      yyerror(& (yylsp[(2) - (2)]), state, "invalid program result name");
d4285 1
d4289 1
a4289 2
/* Line 1787 of yacc.c  */
#line 2025 "program_parse.y"
d4291 1
a4291 1
	   (yyval.result) = (yyvsp[(2) - (2)].result);
d4293 1
d4297 1
a4297 2
/* Line 1787 of yacc.c  */
#line 2029 "program_parse.y"
d4302 1
a4302 1
	      yyerror(& (yylsp[(2) - (2)]), state, "invalid program result name");
d4306 1
d4310 1
a4310 2
/* Line 1787 of yacc.c  */
#line 2038 "program_parse.y"
d4313 1
a4313 1
	      (yyval.result) = VARYING_SLOT_TEX0 + (yyvsp[(3) - (3)].integer);
d4315 1
a4315 1
	      yyerror(& (yylsp[(2) - (3)]), state, "invalid program result name");
d4319 1
d4323 1
a4323 2
/* Line 1787 of yacc.c  */
#line 2047 "program_parse.y"
d4328 1
a4328 1
	      yyerror(& (yylsp[(2) - (2)]), state, "invalid program result name");
d4332 1
d4336 1
a4336 2
/* Line 1787 of yacc.c  */
#line 2058 "program_parse.y"
d4338 1
a4338 1
	   (yyval.result) = (yyvsp[(2) - (3)].integer) + (yyvsp[(3) - (3)].integer);
d4340 1
d4344 1
a4344 2
/* Line 1787 of yacc.c  */
#line 2064 "program_parse.y"
d4355 1
d4359 1
a4359 2
/* Line 1787 of yacc.c  */
#line 2075 "program_parse.y"
d4362 1
a4362 1
	      yyerror(& (yylsp[(1) - (3)]), state, "invalid program result name");
d4374 1
a4374 1
		 yyerror(& (yylsp[(1) - (3)]), state,
d4379 2
a4380 2
	      } else if ((yyvsp[(2) - (3)].integer) >= state->MaxDrawBuffers) {
		 yyerror(& (yylsp[(1) - (3)]), state,
d4384 1
a4384 1
	      (yyval.integer) = FRAG_RESULT_DATA0 + (yyvsp[(2) - (3)].integer);
d4387 1
d4391 1
a4391 2
/* Line 1787 of yacc.c  */
#line 2103 "program_parse.y"
d4396 1
a4396 1
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid program result name");
d4400 1
d4404 1
a4404 2
/* Line 1787 of yacc.c  */
#line 2112 "program_parse.y"
d4409 1
a4409 1
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid program result name");
d4413 1
d4417 1
a4417 2
/* Line 1787 of yacc.c  */
#line 2123 "program_parse.y"
d4421 1
d4425 1
a4425 2
/* Line 1787 of yacc.c  */
#line 2127 "program_parse.y"
d4430 1
a4430 1
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid program result name");
d4434 1
d4438 1
a4438 2
/* Line 1787 of yacc.c  */
#line 2136 "program_parse.y"
d4443 1
a4443 1
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid program result name");
d4447 1
d4451 1
a4451 2
/* Line 1787 of yacc.c  */
#line 2146 "program_parse.y"
d4453 1
d4457 1
a4457 2
/* Line 1787 of yacc.c  */
#line 2147 "program_parse.y"
d4459 1
d4463 1
a4463 2
/* Line 1787 of yacc.c  */
#line 2148 "program_parse.y"
d4465 1
d4469 1
a4469 2
/* Line 1787 of yacc.c  */
#line 2151 "program_parse.y"
d4471 1
d4475 1
a4475 2
/* Line 1787 of yacc.c  */
#line 2152 "program_parse.y"
d4477 1
d4481 1
a4481 2
/* Line 1787 of yacc.c  */
#line 2153 "program_parse.y"
d4483 1
d4487 1
a4487 2
/* Line 1787 of yacc.c  */
#line 2156 "program_parse.y"
d4489 1
d4493 3
a4495 3
/* Line 1787 of yacc.c  */
#line 2157 "program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (3)].integer); }
d4499 1
a4499 2
/* Line 1787 of yacc.c  */
#line 2160 "program_parse.y"
d4501 1
d4505 3
a4507 3
/* Line 1787 of yacc.c  */
#line 2161 "program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (3)].integer); }
d4511 1
a4511 2
/* Line 1787 of yacc.c  */
#line 2164 "program_parse.y"
d4513 1
d4517 3
a4519 3
/* Line 1787 of yacc.c  */
#line 2165 "program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (3)].integer); }
d4523 1
a4523 2
/* Line 1787 of yacc.c  */
#line 2169 "program_parse.y"
d4525 2
a4526 2
	   if ((unsigned) (yyvsp[(1) - (1)].integer) >= state->MaxTextureCoordUnits) {
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid texture coordinate unit selector");
d4530 1
a4530 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d4532 1
d4536 1
a4536 2
/* Line 1787 of yacc.c  */
#line 2180 "program_parse.y"
d4538 2
a4539 2
	   if ((unsigned) (yyvsp[(1) - (1)].integer) >= state->MaxTextureImageUnits) {
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid texture image unit selector");
d4543 1
a4543 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d4545 1
d4549 1
a4549 2
/* Line 1787 of yacc.c  */
#line 2191 "program_parse.y"
d4551 2
a4552 2
	   if ((unsigned) (yyvsp[(1) - (1)].integer) >= state->MaxTextureUnits) {
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid texture unit selector");
d4556 1
a4556 1
	   (yyval.integer) = (yyvsp[(1) - (1)].integer);
d4558 1
d4562 1
a4562 2
/* Line 1787 of yacc.c  */
#line 2202 "program_parse.y"
d4565 1
a4565 1
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[(2) - (4)].string));
d4567 1
a4567 1
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[(4) - (4)].string));
d4569 1
a4569 1
	   free((yyvsp[(4) - (4)].string));
d4573 3
a4575 3
	      _mesa_snprintf(m, sizeof(m), "redeclared identifier: %s", (yyvsp[(2) - (4)].string));
	      free((yyvsp[(2) - (4)].string));
	      yyerror(& (yylsp[(2) - (4)]), state, m);
d4578 2
a4579 2
	      free((yyvsp[(2) - (4)].string));
	      yyerror(& (yylsp[(4) - (4)]), state,
d4583 1
a4583 1
	      _mesa_symbol_table_add_symbol(state->st, 0, (yyvsp[(2) - (4)].string), target);
d4586 1
d4590 1
a4590 2
/* Line 1787 of yacc.c  */
#line 4857 "program_parse.tab.c"
d4613 1
a4613 1
  /* Now `shift' the result of the reduction.  Determine what state
d4628 3
a4630 3
/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
d4681 1
a4681 1
	 error, discard it.  */
d4684 5
a4688 5
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
d4690 5
a4694 5
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc, state);
	  yychar = YYEMPTY;
	}
d4714 1
a4714 1
  /* Do not reclaim the symbols of the rule which action triggered
d4727 1
a4727 1
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */
d4733 9
a4741 9
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}
d4745 1
a4745 1
	YYABORT;
d4749 1
a4749 1
		  yystos[yystate], yyvsp, yylsp, state);
d4805 1
a4805 1
  /* Do not reclaim the symbols of the rule which action triggered
d4812 1
a4812 1
		  yystos[*yyssp], yyvsp, yylsp, state);
d4823 1
a4823 2
  /* Make sure YYID is used.  */
  return YYID (yyresult);
d4825 1
a4825 4


/* Line 2050 of yacc.c  */
#line 2231 "program_parse.y"
d5305 2
a5306 2
      ? & ctx->Const.VertexProgram
      : & ctx->Const.FragmentProgram;
d5308 1
a5308 1
   state->MaxTextureImageUnits = ctx->Const.FragmentProgram.MaxTextureImageUnits;
d5347 5
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.6.1.  */
d5 1
a5 1
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
d47 1
a47 1
#define YYBISON_VERSION "2.6.1"
d73 1
a73 1
/* Line 336 of yacc.c  */
d191 1
a191 1
/* Line 336 of yacc.c  */
d212 2
a213 2
#ifndef _MESA_PROGRAM_PROGRAM_PARSE_TAB_H
# define _MESA_PROGRAM_PROGRAM_PARSE_TAB_H
d340 1
a340 1
/* Line 350 of yacc.c  */
d368 1
a368 1
/* Line 350 of yacc.c  */
d404 1
a404 1
#endif /* !_MESA_PROGRAM_PROGRAM_PARSE_TAB_H  */
d407 1
a407 1
/* Line 353 of yacc.c  */
d421 1
a421 1
/* Line 353 of yacc.c  */
d475 1
a475 1
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
d479 9
a487 1
#  define YY_(msgid) msgid
d493 1
a493 1
# define YYUSE(e) ((void) (e))
d495 1
a495 1
# define YYUSE(e) /* empty */
d498 1
d501 1
a501 1
# define YYID(n) (n)
d1226 2
a1227 2
#define yypact_value_is_default(yystate) \
  ((yystate) == (-398))
d1229 1
a1229 1
#define yytable_value_is_error(yytable_value) \
d1375 1
a1375 1

d1379 1
a1406 1

d1413 40
a1452 4
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
a1459 1

d1523 1
a1523 5
  switch (yytype)
    {
      default:
	break;
    }
a1769 1
  YYSIZE_T yysize1;
d1832 7
a1838 5
                yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                if (! (yysize <= yysize1
                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                  return 2;
                yysize = yysize1;
d1858 6
a1863 4
  yysize1 = yysize + yystrlen (yyformat);
  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
    return 2;
  yysize = yysize1;
d1923 1
a1923 6
  switch (yytype)
    {

      default:
	break;
    }
d1958 28
d1987 1
a1987 1
YYSTYPE yylval;
d1990 2
a1991 1
YYLTYPE yylloc;
d2031 1
a2031 1
  int yytoken;
d2050 3
a2052 4
  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
d2061 1
a2061 14

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif
d2207 1
d2209 1
d4856 1
a4856 1
#line 4802 "program_parse.tab.c"
d5021 1
d5023 1
d5094 1
a5094 1
/* Line 2048 of yacc.c  */
a5669 1

@


1.3
log
@Re-add generated files and unbreak the build. I shouldn't have deleted
those during the update. Spotted by matthieu@@
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.3.  */
d3 5
a7 6
/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
d9 3
a11 3
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

d16 1
a16 1

d18 1
a18 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
d29 1
a29 1

d47 1
a47 1
#define YYBISON_VERSION "2.3"
d55 2
a56 224
/* Using locations.  */
#define YYLSP_NEEDED 1



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ARBvp_10 = 258,
     ARBfp_10 = 259,
     ADDRESS = 260,
     ALIAS = 261,
     ATTRIB = 262,
     OPTION = 263,
     OUTPUT = 264,
     PARAM = 265,
     TEMP = 266,
     END = 267,
     BIN_OP = 268,
     BINSC_OP = 269,
     SAMPLE_OP = 270,
     SCALAR_OP = 271,
     TRI_OP = 272,
     VECTOR_OP = 273,
     ARL = 274,
     KIL = 275,
     SWZ = 276,
     TXD_OP = 277,
     INTEGER = 278,
     REAL = 279,
     AMBIENT = 280,
     ATTENUATION = 281,
     BACK = 282,
     CLIP = 283,
     COLOR = 284,
     DEPTH = 285,
     DIFFUSE = 286,
     DIRECTION = 287,
     EMISSION = 288,
     ENV = 289,
     EYE = 290,
     FOG = 291,
     FOGCOORD = 292,
     FRAGMENT = 293,
     FRONT = 294,
     HALF = 295,
     INVERSE = 296,
     INVTRANS = 297,
     LIGHT = 298,
     LIGHTMODEL = 299,
     LIGHTPROD = 300,
     LOCAL = 301,
     MATERIAL = 302,
     MAT_PROGRAM = 303,
     MATRIX = 304,
     MATRIXINDEX = 305,
     MODELVIEW = 306,
     MVP = 307,
     NORMAL = 308,
     OBJECT = 309,
     PALETTE = 310,
     PARAMS = 311,
     PLANE = 312,
     POINT_TOK = 313,
     POINTSIZE = 314,
     POSITION = 315,
     PRIMARY = 316,
     PROGRAM = 317,
     PROJECTION = 318,
     RANGE = 319,
     RESULT = 320,
     ROW = 321,
     SCENECOLOR = 322,
     SECONDARY = 323,
     SHININESS = 324,
     SIZE_TOK = 325,
     SPECULAR = 326,
     SPOT = 327,
     STATE = 328,
     TEXCOORD = 329,
     TEXENV = 330,
     TEXGEN = 331,
     TEXGEN_Q = 332,
     TEXGEN_R = 333,
     TEXGEN_S = 334,
     TEXGEN_T = 335,
     TEXTURE = 336,
     TRANSPOSE = 337,
     TEXTURE_UNIT = 338,
     TEX_1D = 339,
     TEX_2D = 340,
     TEX_3D = 341,
     TEX_CUBE = 342,
     TEX_RECT = 343,
     TEX_SHADOW1D = 344,
     TEX_SHADOW2D = 345,
     TEX_SHADOWRECT = 346,
     TEX_ARRAY1D = 347,
     TEX_ARRAY2D = 348,
     TEX_ARRAYSHADOW1D = 349,
     TEX_ARRAYSHADOW2D = 350,
     VERTEX = 351,
     VTXATTRIB = 352,
     WEIGHT = 353,
     IDENTIFIER = 354,
     USED_IDENTIFIER = 355,
     MASK4 = 356,
     MASK3 = 357,
     MASK2 = 358,
     MASK1 = 359,
     SWIZZLE = 360,
     DOT_DOT = 361,
     DOT = 362
   };
#endif
/* Tokens.  */
#define ARBvp_10 258
#define ARBfp_10 259
#define ADDRESS 260
#define ALIAS 261
#define ATTRIB 262
#define OPTION 263
#define OUTPUT 264
#define PARAM 265
#define TEMP 266
#define END 267
#define BIN_OP 268
#define BINSC_OP 269
#define SAMPLE_OP 270
#define SCALAR_OP 271
#define TRI_OP 272
#define VECTOR_OP 273
#define ARL 274
#define KIL 275
#define SWZ 276
#define TXD_OP 277
#define INTEGER 278
#define REAL 279
#define AMBIENT 280
#define ATTENUATION 281
#define BACK 282
#define CLIP 283
#define COLOR 284
#define DEPTH 285
#define DIFFUSE 286
#define DIRECTION 287
#define EMISSION 288
#define ENV 289
#define EYE 290
#define FOG 291
#define FOGCOORD 292
#define FRAGMENT 293
#define FRONT 294
#define HALF 295
#define INVERSE 296
#define INVTRANS 297
#define LIGHT 298
#define LIGHTMODEL 299
#define LIGHTPROD 300
#define LOCAL 301
#define MATERIAL 302
#define MAT_PROGRAM 303
#define MATRIX 304
#define MATRIXINDEX 305
#define MODELVIEW 306
#define MVP 307
#define NORMAL 308
#define OBJECT 309
#define PALETTE 310
#define PARAMS 311
#define PLANE 312
#define POINT_TOK 313
#define POINTSIZE 314
#define POSITION 315
#define PRIMARY 316
#define PROGRAM 317
#define PROJECTION 318
#define RANGE 319
#define RESULT 320
#define ROW 321
#define SCENECOLOR 322
#define SECONDARY 323
#define SHININESS 324
#define SIZE_TOK 325
#define SPECULAR 326
#define SPOT 327
#define STATE 328
#define TEXCOORD 329
#define TEXENV 330
#define TEXGEN 331
#define TEXGEN_Q 332
#define TEXGEN_R 333
#define TEXGEN_S 334
#define TEXGEN_T 335
#define TEXTURE 336
#define TRANSPOSE 337
#define TEXTURE_UNIT 338
#define TEX_1D 339
#define TEX_2D 340
#define TEX_3D 341
#define TEX_CUBE 342
#define TEX_RECT 343
#define TEX_SHADOW1D 344
#define TEX_SHADOW2D 345
#define TEX_SHADOWRECT 346
#define TEX_ARRAY1D 347
#define TEX_ARRAY2D 348
#define TEX_ARRAYSHADOW1D 349
#define TEX_ARRAYSHADOW2D 350
#define VERTEX 351
#define VTXATTRIB 352
#define WEIGHT 353
#define IDENTIFIER 354
#define USED_IDENTIFIER 355
#define MASK4 356
#define MASK3 357
#define MASK2 358
#define MASK1 359
#define SWIZZLE 360
#define DOT_DOT 361
#define DOT 362
d58 2
d62 9
d73 2
a74 1
#line 1 "program/program_parse.y"
d175 1
a175 1
      if (YYID(N)) {							\
d189 1
a189 1
   } while(YYID(0))
d191 2
a192 1
#define YYLEX_PARAM state->scanner
d194 7
a200 5

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
d210 124
a333 3
/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
d336 1
a338 1
#line 126 "program/program_parse.y"
d340 3
d366 6
a371 4
}
/* Line 193 of yacc.c.  */
#line 455 "program/program_parse.tab.c"
	YYSTYPE;
a373 1
# define YYSTYPE_IS_TRIVIAL 1
d390 16
d407 2
a408 1
#line 271 "program/program_parse.y"
d410 3
a412 2
extern int yylex(YYSTYPE *yylval_param, YYLTYPE *yylloc_param,
    void *yyscanner);
d414 6
d421 2
a422 2
/* Line 216 of yacc.c.  */
#line 484 "program/program_parse.tab.c"
d472 1
a472 1
# if YYENABLE_NLS
d497 1
a497 1
YYID (int i)
d500 2
a501 2
YYID (i)
    int i;
d504 1
a504 1
  return i;
d525 1
a525 1
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
d528 3
a530 2
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
d553 1
a553 1
#  if (defined __cplusplus && ! defined _STDLIB_H \
d557 2
a558 2
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
d563 1
a563 1
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
d570 1
a570 1
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
d587 3
a589 3
  yytype_int16 yyss;
  YYSTYPE yyvs;
    YYLTYPE yyls;
d601 1
a601 17
/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif
d608 1
a608 1
# define YYSTACK_RELOCATE(Stack)					\
d612 2
a613 2
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
d621 20
d829 29
a857 29
       0,   278,   278,   281,   289,   301,   302,   305,   329,   330,
     333,   348,   351,   356,   363,   364,   365,   366,   367,   368,
     369,   372,   373,   374,   377,   383,   389,   395,   402,   408,
     415,   459,   464,   474,   518,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   538,   550,   558,
     575,   582,   601,   612,   632,   657,   664,   697,   704,   719,
     774,   817,   826,   848,   858,   862,   891,   910,   910,   912,
     919,   931,   932,   933,   936,   950,   964,   984,   995,  1007,
    1009,  1010,  1011,  1012,  1015,  1015,  1015,  1015,  1016,  1019,
    1023,  1028,  1035,  1042,  1049,  1072,  1095,  1096,  1097,  1098,
    1099,  1100,  1103,  1122,  1126,  1132,  1136,  1140,  1144,  1153,
    1162,  1166,  1171,  1177,  1188,  1188,  1189,  1191,  1195,  1199,
    1203,  1209,  1209,  1211,  1229,  1255,  1258,  1273,  1279,  1285,
    1286,  1293,  1299,  1305,  1313,  1319,  1325,  1333,  1339,  1345,
    1353,  1354,  1357,  1358,  1359,  1360,  1361,  1362,  1363,  1364,
    1365,  1366,  1367,  1370,  1379,  1383,  1387,  1393,  1402,  1406,
    1410,  1419,  1423,  1429,  1435,  1442,  1447,  1455,  1465,  1467,
    1475,  1481,  1485,  1489,  1495,  1506,  1515,  1519,  1524,  1528,
    1532,  1536,  1542,  1549,  1553,  1559,  1567,  1578,  1585,  1589,
    1595,  1605,  1616,  1620,  1638,  1647,  1650,  1656,  1660,  1664,
    1670,  1681,  1686,  1691,  1696,  1701,  1706,  1714,  1717,  1722,
    1735,  1743,  1754,  1762,  1762,  1764,  1764,  1766,  1776,  1781,
    1788,  1798,  1807,  1812,  1819,  1829,  1839,  1851,  1851,  1852,
    1852,  1854,  1864,  1872,  1882,  1890,  1898,  1907,  1918,  1922,
    1928,  1929,  1930,  1933,  1933,  1936,  1971,  1975,  1975,  1978,
    1985,  1994,  2008,  2017,  2026,  2030,  2039,  2048,  2059,  2066,
    2076,  2104,  2113,  2125,  2128,  2137,  2148,  2149,  2150,  2153,
    2154,  2155,  2158,  2159,  2162,  2163,  2166,  2167,  2170,  2181,
    2192,  2203,  2229,  2230
d861 1
a861 1
#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
d926 1
a926 1
  "ALIAS_statement", "string", 0
d1018 2
a1019 2
/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
d1170 1
a1170 2
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
d1217 6
d1334 4
a1337 1
   Once GCC version 2 has supplanted version 1, this can go.  */
d1340 6
d1349 12
a1360 12
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
a1369 1

a1373 1
#define YYRHSLOC(Rhs, K) ((Rhs)[K])
d1375 16
a1390 16
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
d1394 3
d1403 1
a1403 1
# if YYLTYPE_IS_TRIVIAL
d1419 1
a1419 1
# define YYLEX yylex (&yylval, &yylloc, scanner)
d1467 2
d1524 1
a1524 1
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
d1527 3
a1529 3
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
d1533 5
a1537 2
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
d1573 1
a1573 1
      fprintf (stderr, "   $%d = ", yyi + 1);
d1577 1
a1577 1
      fprintf (stderr, "\n");
a1613 1

d1716 11
a1726 9
/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
d1728 73
a1800 1
  int yyn = yypact[yystate];
d1802 1
a1802 3
  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
d1804 12
a1815 66
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;
d1817 12
a1828 22
      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
d1830 20
a1851 1

a1886 19


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (struct asm_parser_state *state);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


d1917 1
a1917 1
  /* The look-ahead symbol.  */
d1920 1
a1920 1
/* The semantic value of the look-ahead symbol.  */
d1923 1
a1923 3
/* Number of syntax errors so far.  */
int yynerrs;
/* Location data for the look-ahead symbol.  */
d1926 35
a1960 1
  int yystate;
d1963 7
a1969 4
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
a1976 25
  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;

  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[2];

a1978 7
  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

d1983 6
d1994 1
a1994 1
  yychar = YYEMPTY;		/* Cause a token to be read.  */
a1999 1

d2003 2
a2004 1
#if YYLTYPE_IS_TRIVIAL
d2007 1
a2007 1
  yylloc.first_column = yylloc.last_column = 0;
a2008 1

d2045 1
d2067 3
a2069 3
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
	YYSTACK_RELOCATE (yyls);
d2090 3
d2101 1
a2101 1
     look-ahead token if we need one and don't already have one.  */
d2103 1
a2103 1
  /* First try to decide what to do without reference to look-ahead token.  */
d2105 1
a2105 1
  if (yyn == YYPACT_NINF)
d2108 1
a2108 1
  /* Not known => get a look-ahead token if don't already have one.  */
d2110 1
a2110 1
  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
d2136 2
a2137 2
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
a2141 3
  if (yyn == YYFINAL)
    YYACCEPT;

d2147 1
a2147 1
  /* Shift the look-ahead token.  */
d2150 2
a2151 3
  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;
d2192 2
a2193 1
#line 282 "program/program_parse.y"
d2200 1
a2200 1
	;}
d2204 2
a2205 1
#line 290 "program/program_parse.y"
d2214 1
a2214 1
	;}
d2218 2
a2219 1
#line 306 "program/program_parse.y"
d2240 1
a2240 1
	;}
d2244 2
a2245 1
#line 334 "program/program_parse.y"
d2259 1
a2259 1
	;}
d2263 2
a2264 1
#line 352 "program/program_parse.y"
d2268 1
a2268 1
	;}
d2272 2
a2273 1
#line 357 "program/program_parse.y"
d2277 1
a2277 1
	;}
d2281 2
a2282 1
#line 378 "program/program_parse.y"
d2285 1
a2285 1
	;}
d2289 2
a2290 1
#line 384 "program/program_parse.y"
d2292 2
d2295 1
a2295 1
	;}
d2299 2
a2300 1
#line 390 "program/program_parse.y"
d2303 1
a2303 1
	;}
d2307 2
a2308 1
#line 396 "program/program_parse.y"
d2311 1
a2311 1
	;}
d2315 2
a2316 1
#line 403 "program/program_parse.y"
d2319 1
a2319 1
	;}
d2323 2
a2324 1
#line 410 "program/program_parse.y"
d2327 1
a2327 1
	;}
d2331 2
a2332 1
#line 416 "program/program_parse.y"
d2373 1
a2373 1
	;}
d2377 2
a2378 1
#line 460 "program/program_parse.y"
d2382 1
a2382 1
	;}
d2386 2
a2387 1
#line 465 "program/program_parse.y"
a2391 1
	   (yyval.inst)->Base.DstReg.CondSrc = (yyvsp[(2) - (2)].dst_reg).CondSrc;
d2393 1
a2393 1
	;}
d2397 2
a2398 1
#line 475 "program/program_parse.y"
d2439 1
a2439 1
	;}
d2443 2
a2444 1
#line 519 "program/program_parse.y"
d2447 1
a2447 1
	;}
d2451 3
a2453 2
#line 524 "program/program_parse.y"
    { (yyval.integer) = TEXTURE_1D_INDEX; ;}
d2457 3
a2459 2
#line 525 "program/program_parse.y"
    { (yyval.integer) = TEXTURE_2D_INDEX; ;}
d2463 3
a2465 2
#line 526 "program/program_parse.y"
    { (yyval.integer) = TEXTURE_3D_INDEX; ;}
d2469 3
a2471 2
#line 527 "program/program_parse.y"
    { (yyval.integer) = TEXTURE_CUBE_INDEX; ;}
d2475 3
a2477 2
#line 528 "program/program_parse.y"
    { (yyval.integer) = TEXTURE_RECT_INDEX; ;}
d2481 3
a2483 2
#line 529 "program/program_parse.y"
    { (yyval.integer) = -TEXTURE_1D_INDEX; ;}
d2487 3
a2489 2
#line 530 "program/program_parse.y"
    { (yyval.integer) = -TEXTURE_2D_INDEX; ;}
d2493 3
a2495 2
#line 531 "program/program_parse.y"
    { (yyval.integer) = -TEXTURE_RECT_INDEX; ;}
d2499 3
a2501 2
#line 532 "program/program_parse.y"
    { (yyval.integer) = TEXTURE_1D_ARRAY_INDEX; ;}
d2505 3
a2507 2
#line 533 "program/program_parse.y"
    { (yyval.integer) = TEXTURE_2D_ARRAY_INDEX; ;}
d2511 3
a2513 2
#line 534 "program/program_parse.y"
    { (yyval.integer) = -TEXTURE_1D_ARRAY_INDEX; ;}
d2517 3
a2519 2
#line 535 "program/program_parse.y"
    { (yyval.integer) = -TEXTURE_2D_ARRAY_INDEX; ;}
d2523 2
a2524 1
#line 539 "program/program_parse.y"
d2533 1
a2533 1
	;}
d2537 2
a2538 1
#line 551 "program/program_parse.y"
d2545 1
a2545 1
	;}
d2549 2
a2550 1
#line 559 "program/program_parse.y"
d2564 1
a2564 1
	;}
d2568 2
a2569 1
#line 576 "program/program_parse.y"
d2575 1
a2575 1
	;}
d2579 2
a2580 1
#line 583 "program/program_parse.y"
d2596 1
a2596 1
	;}
d2600 2
a2601 1
#line 602 "program/program_parse.y"
d2611 1
a2611 1
	;}
d2615 2
a2616 1
#line 613 "program/program_parse.y"
d2632 1
a2632 1
	;}
d2636 2
a2637 1
#line 633 "program/program_parse.y"
a2642 1
	   (yyval.dst_reg).CondSrc = (yyvsp[(3) - (3)].dst_reg).CondSrc;
d2650 1
a2650 1
	       && ((yyval.dst_reg).Index == VERT_RESULT_HPOS)) {
d2658 1
a2658 1
	;}
d2662 2
a2663 1
#line 658 "program/program_parse.y"
d2667 1
a2667 1
	;}
d2671 2
a2672 1
#line 665 "program/program_parse.y"
d2702 1
a2702 1
	;}
d2706 2
a2707 1
#line 698 "program/program_parse.y"
d2711 1
a2711 1
	;}
d2715 2
a2716 1
#line 705 "program/program_parse.y"
d2724 1
d2731 1
a2731 1
	;}
d2735 2
a2736 1
#line 720 "program/program_parse.y"
d2748 4
d2792 1
a2792 1
	;}
d2796 2
a2797 1
#line 775 "program/program_parse.y"
d2828 1
a2828 1
	      state->prog->InputsRead |= (1U << (yyval.src_reg).Base.Index);
d2839 1
a2839 1
	;}
d2843 2
a2844 1
#line 818 "program/program_parse.y"
d2847 1
a2847 1
	   state->prog->InputsRead |= (1U << (yyval.src_reg).Base.Index);
d2852 1
a2852 1
	;}
d2856 2
a2857 1
#line 827 "program/program_parse.y"
d2878 1
a2878 1
	;}
d2882 2
a2883 1
#line 849 "program/program_parse.y"
d2890 1
a2890 1
	;}
d2894 2
a2895 1
#line 859 "program/program_parse.y"
d2898 1
a2898 1
	;}
d2902 2
a2903 1
#line 863 "program/program_parse.y"
d2929 1
a2929 1
	;}
d2933 2
a2934 1
#line 892 "program/program_parse.y"
d2950 1
a2950 1
	;}
d2954 2
a2955 1
#line 913 "program/program_parse.y"
d2959 1
a2959 1
	;}
d2963 2
a2964 1
#line 920 "program/program_parse.y"
d2973 1
a2973 1
	;}
d2977 3
a2979 2
#line 931 "program/program_parse.y"
    { (yyval.integer) = 0; ;}
d2983 3
a2985 2
#line 932 "program/program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (2)].integer); ;}
d2989 3
a2991 2
#line 933 "program/program_parse.y"
    { (yyval.integer) = -(yyvsp[(2) - (2)].integer); ;}
d2995 2
a2996 1
#line 937 "program/program_parse.y"
d3007 1
a3007 1
	;}
d3011 2
a3012 1
#line 951 "program/program_parse.y"
d3023 1
a3023 1
	;}
d3027 2
a3028 1
#line 965 "program/program_parse.y"
d3045 1
a3045 1
	;}
d3049 2
a3050 1
#line 985 "program/program_parse.y"
d3058 1
a3058 1
	;}
d3062 2
a3063 1
#line 996 "program/program_parse.y"
d3072 1
a3072 1
	;}
d3076 3
a3078 2
#line 1012 "program/program_parse.y"
    { (yyval.swiz_mask).swizzle = SWIZZLE_NOOP; (yyval.swiz_mask).mask = WRITEMASK_XYZW; ;}
d3082 3
a3084 2
#line 1016 "program/program_parse.y"
    { (yyval.swiz_mask).swizzle = SWIZZLE_NOOP; (yyval.swiz_mask).mask = WRITEMASK_XYZW; ;}
d3088 2
a3089 1
#line 1020 "program/program_parse.y"
d3092 1
a3092 1
	;}
d3096 2
a3097 1
#line 1024 "program/program_parse.y"
d3100 1
a3100 1
	;}
d3104 2
a3105 1
#line 1028 "program/program_parse.y"
d3109 1
a3109 2
	   (yyval.dst_reg).CondSrc = 0;
	;}
d3113 2
a3114 1
#line 1036 "program/program_parse.y"
d3118 1
a3118 1
	;}
d3122 2
a3123 1
#line 1043 "program/program_parse.y"
d3127 1
a3127 1
	;}
d3131 2
a3132 1
#line 1050 "program/program_parse.y"
d3151 1
a3151 2
	   (yyval.dst_reg).CondSrc = 0;
	;}
d3155 2
a3156 1
#line 1073 "program/program_parse.y"
d3175 1
a3175 2
	   (yyval.dst_reg).CondSrc = 0;
	;}
d3179 2
a3180 1
#line 1104 "program/program_parse.y"
d3190 1
a3190 1
	      state->InputsBound |= (1U << s->attrib_binding);
d3196 1
a3196 1
	;}
d3200 2
a3201 1
#line 1123 "program/program_parse.y"
d3204 1
a3204 1
	;}
d3208 2
a3209 1
#line 1127 "program/program_parse.y"
d3212 1
a3212 1
	;}
d3216 2
a3217 1
#line 1133 "program/program_parse.y"
d3220 1
a3220 1
	;}
d3224 2
a3225 1
#line 1137 "program/program_parse.y"
d3228 1
a3228 1
	;}
d3232 2
a3233 1
#line 1141 "program/program_parse.y"
d3236 1
a3236 1
	;}
d3240 2
a3241 1
#line 1145 "program/program_parse.y"
a3242 5
	   if (!state->ctx->Extensions.EXT_secondary_color) {
	      yyerror(& (yylsp[(2) - (2)]), state, "GL_EXT_secondary_color not supported");
	      YYERROR;
	   }

d3244 1
a3244 1
	;}
d3248 2
a3249 1
#line 1154 "program/program_parse.y"
a3250 5
	   if (!state->ctx->Extensions.EXT_fog_coord) {
	      yyerror(& (yylsp[(1) - (1)]), state, "GL_EXT_fog_coord not supported");
	      YYERROR;
	   }

d3252 1
a3252 1
	;}
d3256 2
a3257 1
#line 1163 "program/program_parse.y"
d3260 1
a3260 1
	;}
d3264 2
a3265 1
#line 1167 "program/program_parse.y"
d3269 1
a3269 1
	;}
d3273 2
a3274 1
#line 1172 "program/program_parse.y"
d3277 1
a3277 1
	;}
d3281 2
a3282 1
#line 1178 "program/program_parse.y"
d3290 1
a3290 1
	;}
d3294 2
a3295 1
#line 1192 "program/program_parse.y"
d3297 2
a3298 2
	   (yyval.attrib) = FRAG_ATTRIB_WPOS;
	;}
d3302 2
a3303 1
#line 1196 "program/program_parse.y"
d3305 2
a3306 2
	   (yyval.attrib) = FRAG_ATTRIB_COL0 + (yyvsp[(2) - (2)].integer);
	;}
d3310 2
a3311 1
#line 1200 "program/program_parse.y"
d3313 2
a3314 2
	   (yyval.attrib) = FRAG_ATTRIB_FOGC;
	;}
d3318 2
a3319 1
#line 1204 "program/program_parse.y"
d3321 2
a3322 2
	   (yyval.attrib) = FRAG_ATTRIB_TEX0 + (yyvsp[(2) - (2)].integer);
	;}
d3326 2
a3327 1
#line 1212 "program/program_parse.y"
d3342 1
a3342 1
	;}
d3346 2
a3347 1
#line 1230 "program/program_parse.y"
d3369 1
a3369 1
	;}
d3373 2
a3374 1
#line 1255 "program/program_parse.y"
d3377 1
a3377 1
	;}
d3381 2
a3382 1
#line 1259 "program/program_parse.y"
d3394 1
a3394 1
	;}
d3398 2
a3399 1
#line 1274 "program/program_parse.y"
d3402 1
a3402 1
	;}
d3406 2
a3407 1
#line 1280 "program/program_parse.y"
d3410 1
a3410 1
	;}
d3414 2
a3415 1
#line 1287 "program/program_parse.y"
d3419 1
a3419 1
	;}
d3423 2
a3424 1
#line 1294 "program/program_parse.y"
d3429 1
a3429 1
	;}
d3433 2
a3434 1
#line 1300 "program/program_parse.y"
d3439 1
a3439 1
	;}
d3443 2
a3444 1
#line 1306 "program/program_parse.y"
d3449 1
a3449 1
	;}
d3453 2
a3454 1
#line 1314 "program/program_parse.y"
d3459 1
a3459 1
	;}
d3463 2
a3464 1
#line 1320 "program/program_parse.y"
d3469 1
a3469 1
	;}
d3473 2
a3474 1
#line 1326 "program/program_parse.y"
d3479 1
a3479 1
	;}
d3483 2
a3484 1
#line 1334 "program/program_parse.y"
d3489 1
a3489 1
	;}
d3493 2
a3494 1
#line 1340 "program/program_parse.y"
d3499 1
a3499 1
	;}
d3503 2
a3504 1
#line 1346 "program/program_parse.y"
d3509 1
a3509 1
	;}
d3513 3
a3515 2
#line 1353 "program/program_parse.y"
    { memcpy((yyval.state), (yyvsp[(1) - (1)].state), sizeof((yyval.state))); ;}
d3519 3
a3521 2
#line 1354 "program/program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); ;}
d3525 3
a3527 2
#line 1357 "program/program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); ;}
d3531 3
a3533 2
#line 1358 "program/program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); ;}
d3537 3
a3539 2
#line 1359 "program/program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); ;}
d3543 3
a3545 2
#line 1360 "program/program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); ;}
d3549 3
a3551 2
#line 1361 "program/program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); ;}
d3555 3
a3557 2
#line 1362 "program/program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); ;}
d3561 3
a3563 2
#line 1363 "program/program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); ;}
d3567 3
a3569 2
#line 1364 "program/program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); ;}
d3573 3
a3575 2
#line 1365 "program/program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); ;}
d3579 3
a3581 2
#line 1366 "program/program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); ;}
d3585 3
a3587 2
#line 1367 "program/program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); ;}
d3591 2
a3592 1
#line 1371 "program/program_parse.y"
d3598 1
a3598 1
	;}
d3602 2
a3603 1
#line 1380 "program/program_parse.y"
d3606 1
a3606 1
	;}
d3610 2
a3611 1
#line 1384 "program/program_parse.y"
d3614 1
a3614 1
	;}
d3618 2
a3619 1
#line 1388 "program/program_parse.y"
d3622 1
a3622 1
	;}
d3626 2
a3627 1
#line 1394 "program/program_parse.y"
d3633 1
a3633 1
	;}
d3637 2
a3638 1
#line 1403 "program/program_parse.y"
d3641 1
a3641 1
	;}
d3645 2
a3646 1
#line 1407 "program/program_parse.y"
d3649 1
a3649 1
	;}
d3653 2
a3654 1
#line 1411 "program/program_parse.y"
d3662 1
a3662 1
	;}
d3666 2
a3667 1
#line 1420 "program/program_parse.y"
d3670 1
a3670 1
	;}
d3674 2
a3675 1
#line 1424 "program/program_parse.y"
d3678 1
a3678 1
	;}
d3682 2
a3683 1
#line 1430 "program/program_parse.y"
d3686 1
a3686 1
	;}
d3690 2
a3691 1
#line 1436 "program/program_parse.y"
d3695 1
a3695 1
	;}
d3699 2
a3700 1
#line 1443 "program/program_parse.y"
d3704 1
a3704 1
	;}
d3708 2
a3709 1
#line 1448 "program/program_parse.y"
d3714 1
a3714 1
	;}
d3718 2
a3719 1
#line 1456 "program/program_parse.y"
d3726 1
a3726 1
	;}
d3730 2
a3731 1
#line 1468 "program/program_parse.y"
d3736 1
a3736 1
	;}
d3740 2
a3741 1
#line 1476 "program/program_parse.y"
d3744 1
a3744 1
	;}
d3748 2
a3749 1
#line 1482 "program/program_parse.y"
d3752 1
a3752 1
	;}
d3756 2
a3757 1
#line 1486 "program/program_parse.y"
d3760 1
a3760 1
	;}
d3764 2
a3765 1
#line 1490 "program/program_parse.y"
d3768 1
a3768 1
	;}
d3772 2
a3773 1
#line 1496 "program/program_parse.y"
d3781 1
a3781 1
	;}
d3785 2
a3786 1
#line 1507 "program/program_parse.y"
d3792 1
a3792 1
	;}
d3796 2
a3797 1
#line 1516 "program/program_parse.y"
d3800 1
a3800 1
	;}
d3804 2
a3805 1
#line 1520 "program/program_parse.y"
d3808 1
a3808 1
	;}
d3812 2
a3813 1
#line 1525 "program/program_parse.y"
d3816 1
a3816 1
	;}
d3820 2
a3821 1
#line 1529 "program/program_parse.y"
d3824 1
a3824 1
	;}
d3828 2
a3829 1
#line 1533 "program/program_parse.y"
d3832 1
a3832 1
	;}
d3836 2
a3837 1
#line 1537 "program/program_parse.y"
d3840 1
a3840 1
	;}
d3844 2
a3845 1
#line 1543 "program/program_parse.y"
d3849 1
a3849 1
	;}
d3853 2
a3854 1
#line 1550 "program/program_parse.y"
d3857 1
a3857 1
	;}
d3861 2
a3862 1
#line 1554 "program/program_parse.y"
d3865 1
a3865 1
	;}
d3869 2
a3870 1
#line 1560 "program/program_parse.y"
d3875 1
a3875 1
	;}
d3879 2
a3880 1
#line 1568 "program/program_parse.y"
d3888 1
a3888 1
	;}
d3892 2
a3893 1
#line 1579 "program/program_parse.y"
d3897 1
a3897 1
	;}
d3901 2
a3902 1
#line 1586 "program/program_parse.y"
d3905 1
a3905 1
	;}
d3909 2
a3910 1
#line 1590 "program/program_parse.y"
d3913 1
a3913 1
	;}
d3917 2
a3918 1
#line 1596 "program/program_parse.y"
d3925 1
a3925 1
	;}
d3929 2
a3930 1
#line 1606 "program/program_parse.y"
d3937 1
a3937 1
	;}
d3941 2
a3942 1
#line 1616 "program/program_parse.y"
d3946 1
a3946 1
	;}
d3950 2
a3951 1
#line 1621 "program/program_parse.y"
d3966 1
a3966 1
	;}
d3970 2
a3971 1
#line 1639 "program/program_parse.y"
d3976 1
a3976 1
	;}
d3980 2
a3981 1
#line 1647 "program/program_parse.y"
d3984 1
a3984 1
	;}
d3988 2
a3989 1
#line 1651 "program/program_parse.y"
d3992 1
a3992 1
	;}
d3996 2
a3997 1
#line 1657 "program/program_parse.y"
d4000 1
a4000 1
	;}
d4004 2
a4005 1
#line 1661 "program/program_parse.y"
d4008 1
a4008 1
	;}
d4012 2
a4013 1
#line 1665 "program/program_parse.y"
d4016 1
a4016 1
	;}
d4020 2
a4021 1
#line 1671 "program/program_parse.y"
d4029 1
a4029 1
	;}
d4033 2
a4034 1
#line 1682 "program/program_parse.y"
d4038 1
a4038 1
	;}
d4042 2
a4043 1
#line 1687 "program/program_parse.y"
d4047 1
a4047 1
	;}
d4051 2
a4052 1
#line 1692 "program/program_parse.y"
d4056 1
a4056 1
	;}
d4060 2
a4061 1
#line 1697 "program/program_parse.y"
d4065 1
a4065 1
	;}
d4069 2
a4070 1
#line 1702 "program/program_parse.y"
d4074 1
a4074 1
	;}
d4078 2
a4079 1
#line 1707 "program/program_parse.y"
d4083 1
a4083 1
	;}
d4087 2
a4088 1
#line 1714 "program/program_parse.y"
d4091 1
a4091 1
	;}
d4095 2
a4096 1
#line 1718 "program/program_parse.y"
d4099 1
a4099 1
	;}
d4103 2
a4104 1
#line 1723 "program/program_parse.y"
d4115 1
a4115 1
	;}
d4119 2
a4120 1
#line 1736 "program/program_parse.y"
d4126 1
a4126 1
	;}
d4130 2
a4131 1
#line 1744 "program/program_parse.y"
d4139 1
a4139 1
	;}
d4143 2
a4144 1
#line 1755 "program/program_parse.y"
d4148 1
a4148 1
	;}
d4152 2
a4153 1
#line 1767 "program/program_parse.y"
d4160 1
a4160 1
	;}
d4164 2
a4165 1
#line 1777 "program/program_parse.y"
d4169 1
a4169 1
	;}
d4173 2
a4174 1
#line 1782 "program/program_parse.y"
d4178 1
a4178 1
	;}
d4182 2
a4183 1
#line 1789 "program/program_parse.y"
d4190 1
a4190 1
	;}
d4194 2
a4195 1
#line 1799 "program/program_parse.y"
d4202 1
a4202 1
	;}
d4206 2
a4207 1
#line 1808 "program/program_parse.y"
d4211 1
a4211 1
	;}
d4215 2
a4216 1
#line 1813 "program/program_parse.y"
d4220 1
a4220 1
	;}
d4224 2
a4225 1
#line 1820 "program/program_parse.y"
d4232 1
a4232 1
	;}
d4236 2
a4237 1
#line 1830 "program/program_parse.y"
d4244 1
a4244 1
	;}
d4248 2
a4249 1
#line 1840 "program/program_parse.y"
d4256 1
a4256 1
	;}
d4260 2
a4261 1
#line 1855 "program/program_parse.y"
d4264 5
a4268 5
	   (yyval.vector).data[0] = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[1] = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[2] = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[3] = (yyvsp[(1) - (1)].real);
	;}
d4272 2
a4273 1
#line 1865 "program/program_parse.y"
d4276 5
a4280 5
	   (yyval.vector).data[0] = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[1] = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[2] = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[3] = (yyvsp[(1) - (1)].real);
	;}
d4284 2
a4285 1
#line 1873 "program/program_parse.y"
d4288 5
a4292 5
	   (yyval.vector).data[0] = (float) (yyvsp[(1) - (1)].integer);
	   (yyval.vector).data[1] = (float) (yyvsp[(1) - (1)].integer);
	   (yyval.vector).data[2] = (float) (yyvsp[(1) - (1)].integer);
	   (yyval.vector).data[3] = (float) (yyvsp[(1) - (1)].integer);
	;}
d4296 2
a4297 1
#line 1883 "program/program_parse.y"
d4300 5
a4304 5
	   (yyval.vector).data[0] = (yyvsp[(2) - (3)].real);
	   (yyval.vector).data[1] = 0.0f;
	   (yyval.vector).data[2] = 0.0f;
	   (yyval.vector).data[3] = 1.0f;
	;}
d4308 2
a4309 1
#line 1891 "program/program_parse.y"
d4312 5
a4316 5
	   (yyval.vector).data[0] = (yyvsp[(2) - (5)].real);
	   (yyval.vector).data[1] = (yyvsp[(4) - (5)].real);
	   (yyval.vector).data[2] = 0.0f;
	   (yyval.vector).data[3] = 1.0f;
	;}
d4320 2
a4321 1
#line 1900 "program/program_parse.y"
d4324 5
a4328 5
	   (yyval.vector).data[0] = (yyvsp[(2) - (7)].real);
	   (yyval.vector).data[1] = (yyvsp[(4) - (7)].real);
	   (yyval.vector).data[2] = (yyvsp[(6) - (7)].real);
	   (yyval.vector).data[3] = 1.0f;
	;}
d4332 2
a4333 1
#line 1909 "program/program_parse.y"
d4336 5
a4340 5
	   (yyval.vector).data[0] = (yyvsp[(2) - (9)].real);
	   (yyval.vector).data[1] = (yyvsp[(4) - (9)].real);
	   (yyval.vector).data[2] = (yyvsp[(6) - (9)].real);
	   (yyval.vector).data[3] = (yyvsp[(8) - (9)].real);
	;}
d4344 2
a4345 1
#line 1919 "program/program_parse.y"
d4348 1
a4348 1
	;}
d4352 2
a4353 1
#line 1923 "program/program_parse.y"
d4356 1
a4356 1
	;}
d4360 3
a4362 2
#line 1928 "program/program_parse.y"
    { (yyval.negate) = FALSE; ;}
d4366 3
a4368 2
#line 1929 "program/program_parse.y"
    { (yyval.negate) = TRUE;  ;}
d4372 3
a4374 2
#line 1930 "program/program_parse.y"
    { (yyval.negate) = FALSE; ;}
d4378 3
a4380 2
#line 1933 "program/program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (2)].integer); ;}
d4384 2
a4385 1
#line 1937 "program/program_parse.y"
d4418 1
a4418 1
	;}
d4422 2
a4423 1
#line 1971 "program/program_parse.y"
d4425 1
a4425 1
	;}
d4429 3
a4431 2
#line 1975 "program/program_parse.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].integer); ;}
d4435 2
a4436 1
#line 1979 "program/program_parse.y"
d4442 1
a4442 1
	;}
d4446 2
a4447 1
#line 1986 "program/program_parse.y"
d4453 1
a4453 1
	;}
d4457 2
a4458 1
#line 1995 "program/program_parse.y"
d4469 1
a4469 1
	;}
d4473 2
a4474 1
#line 2009 "program/program_parse.y"
d4477 1
a4477 1
	      (yyval.result) = VERT_RESULT_HPOS;
d4482 1
a4482 1
	;}
d4486 2
a4487 1
#line 2018 "program/program_parse.y"
d4490 1
a4490 1
	      (yyval.result) = VERT_RESULT_FOGC;
d4495 1
a4495 1
	;}
d4499 2
a4500 1
#line 2027 "program/program_parse.y"
d4503 1
a4503 1
	;}
d4507 2
a4508 1
#line 2031 "program/program_parse.y"
d4511 1
a4511 1
	      (yyval.result) = VERT_RESULT_PSIZ;
d4516 1
a4516 1
	;}
d4520 2
a4521 1
#line 2040 "program/program_parse.y"
d4524 1
a4524 1
	      (yyval.result) = VERT_RESULT_TEX0 + (yyvsp[(3) - (3)].integer);
d4529 1
a4529 1
	;}
d4533 2
a4534 1
#line 2049 "program/program_parse.y"
d4542 1
a4542 1
	;}
d4546 2
a4547 1
#line 2060 "program/program_parse.y"
d4550 1
a4550 1
	;}
d4554 2
a4555 1
#line 2066 "program/program_parse.y"
d4558 1
a4558 1
	      (yyval.integer) = VERT_RESULT_COL0;
d4565 1
a4565 1
	;}
d4569 2
a4570 1
#line 2077 "program/program_parse.y"
d4597 1
a4597 1
	;}
d4601 2
a4602 1
#line 2105 "program/program_parse.y"
d4605 1
a4605 1
	      (yyval.integer) = VERT_RESULT_COL0;
d4610 1
a4610 1
	;}
d4614 2
a4615 1
#line 2114 "program/program_parse.y"
d4618 1
a4618 1
	      (yyval.integer) = VERT_RESULT_BFC0;
d4623 1
a4623 1
	;}
d4627 2
a4628 1
#line 2125 "program/program_parse.y"
d4631 1
a4631 1
	;}
d4635 2
a4636 1
#line 2129 "program/program_parse.y"
d4644 1
a4644 1
	;}
d4648 2
a4649 1
#line 2138 "program/program_parse.y"
d4657 1
a4657 1
	;}
d4661 3
a4663 2
#line 2148 "program/program_parse.y"
    { (yyval.integer) = 0; ;}
d4667 3
a4669 2
#line 2149 "program/program_parse.y"
    { (yyval.integer) = 0; ;}
d4673 3
a4675 2
#line 2150 "program/program_parse.y"
    { (yyval.integer) = 1; ;}
d4679 3
a4681 2
#line 2153 "program/program_parse.y"
    { (yyval.integer) = 0; ;}
d4685 3
a4687 2
#line 2154 "program/program_parse.y"
    { (yyval.integer) = 0; ;}
d4691 3
a4693 2
#line 2155 "program/program_parse.y"
    { (yyval.integer) = 1; ;}
d4697 3
a4699 2
#line 2158 "program/program_parse.y"
    { (yyval.integer) = 0; ;}
d4703 3
a4705 2
#line 2159 "program/program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (3)].integer); ;}
d4709 3
a4711 2
#line 2162 "program/program_parse.y"
    { (yyval.integer) = 0; ;}
d4715 3
a4717 2
#line 2163 "program/program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (3)].integer); ;}
d4721 3
a4723 2
#line 2166 "program/program_parse.y"
    { (yyval.integer) = 0; ;}
d4727 3
a4729 2
#line 2167 "program/program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (3)].integer); ;}
d4733 2
a4734 1
#line 2171 "program/program_parse.y"
d4742 1
a4742 1
	;}
d4746 2
a4747 1
#line 2182 "program/program_parse.y"
d4755 1
a4755 1
	;}
d4759 2
a4760 1
#line 2193 "program/program_parse.y"
d4768 1
a4768 1
	;}
d4772 2
a4773 1
#line 2204 "program/program_parse.y"
d4796 1
a4796 1
	;}
d4800 2
a4801 2
/* Line 1267 of yacc.c.  */
#line 4600 "program/program_parse.tab.c"
d4804 11
d4843 4
d4854 2
d4857 25
a4881 29
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (&yylloc, state, yymsg);
	  }
	else
	  {
	    yyerror (&yylloc, state, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
d4883 1
d4887 1
a4887 1
  yyerror_range[0] = yylloc;
d4891 1
a4891 1
      /* If just tried and failed to reuse look-ahead token after an
d4908 1
a4908 1
  /* Else will try to reuse look-ahead token after shifting the error
d4924 1
a4924 1
  yyerror_range[0] = yylsp[1-yylen];
d4943 1
a4943 1
      if (yyn != YYPACT_NINF)
d4958 1
a4958 1
      yyerror_range[0] = *yylsp;
a4965 3
  if (yyn == YYFINAL)
    YYACCEPT;

d4968 1
a4968 1
  yyerror_range[1] = yylloc;
d4970 2
a4971 2
     the look-ahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
d4995 1
a4995 1
#ifndef yyoverflow
d5006 8
a5013 3
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc, state);
d5037 2
a5038 1
#line 2233 "program/program_parse.y"
d5212 1
a5212 1
   const int inputs = state->prog->InputsRead | state->InputsBound;
d5214 1
a5214 1
   if (((inputs & 0x0ffff) & (inputs >> 16)) != 0) {
d5285 1
a5285 1
                               size, GL_NONE, NULL, tokens, 0x0);
d5521 1
a5521 1
   state->MaxTextureImageUnits = ctx->Const.MaxTextureImageUnits;
d5577 1
a5577 1
   state->prog->NumAttributes = _mesa_bitcount(state->prog->InputsRead);
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.4.3.  */
d4 5
a8 5
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2009, 2010 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
d10 3
a12 3
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
d17 1
a17 1
   
d19 3
a21 1
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
d32 1
a32 1
   
d50 1
a50 1
#define YYBISON_VERSION "2.4.3"
d58 4
a61 2
/* Push parsers.  */
#define YYPUSH 0
d63 219
a281 2
/* Pull parsers.  */
#define YYPULL 1
a282 2
/* Using locations.  */
#define YYLSP_NEEDED 1
d287 1
a287 3

/* Line 189 of yacc.c  */
#line 1 "program_parse.y"
a406 3
/* Line 189 of yacc.c  */
#line 192 "program_parse.tab.c"

a424 117

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ARBvp_10 = 258,
     ARBfp_10 = 259,
     ADDRESS = 260,
     ALIAS = 261,
     ATTRIB = 262,
     OPTION = 263,
     OUTPUT = 264,
     PARAM = 265,
     TEMP = 266,
     END = 267,
     BIN_OP = 268,
     BINSC_OP = 269,
     SAMPLE_OP = 270,
     SCALAR_OP = 271,
     TRI_OP = 272,
     VECTOR_OP = 273,
     ARL = 274,
     KIL = 275,
     SWZ = 276,
     TXD_OP = 277,
     INTEGER = 278,
     REAL = 279,
     AMBIENT = 280,
     ATTENUATION = 281,
     BACK = 282,
     CLIP = 283,
     COLOR = 284,
     DEPTH = 285,
     DIFFUSE = 286,
     DIRECTION = 287,
     EMISSION = 288,
     ENV = 289,
     EYE = 290,
     FOG = 291,
     FOGCOORD = 292,
     FRAGMENT = 293,
     FRONT = 294,
     HALF = 295,
     INVERSE = 296,
     INVTRANS = 297,
     LIGHT = 298,
     LIGHTMODEL = 299,
     LIGHTPROD = 300,
     LOCAL = 301,
     MATERIAL = 302,
     MAT_PROGRAM = 303,
     MATRIX = 304,
     MATRIXINDEX = 305,
     MODELVIEW = 306,
     MVP = 307,
     NORMAL = 308,
     OBJECT = 309,
     PALETTE = 310,
     PARAMS = 311,
     PLANE = 312,
     POINT_TOK = 313,
     POINTSIZE = 314,
     POSITION = 315,
     PRIMARY = 316,
     PROGRAM = 317,
     PROJECTION = 318,
     RANGE = 319,
     RESULT = 320,
     ROW = 321,
     SCENECOLOR = 322,
     SECONDARY = 323,
     SHININESS = 324,
     SIZE_TOK = 325,
     SPECULAR = 326,
     SPOT = 327,
     STATE = 328,
     TEXCOORD = 329,
     TEXENV = 330,
     TEXGEN = 331,
     TEXGEN_Q = 332,
     TEXGEN_R = 333,
     TEXGEN_S = 334,
     TEXGEN_T = 335,
     TEXTURE = 336,
     TRANSPOSE = 337,
     TEXTURE_UNIT = 338,
     TEX_1D = 339,
     TEX_2D = 340,
     TEX_3D = 341,
     TEX_CUBE = 342,
     TEX_RECT = 343,
     TEX_SHADOW1D = 344,
     TEX_SHADOW2D = 345,
     TEX_SHADOWRECT = 346,
     TEX_ARRAY1D = 347,
     TEX_ARRAY2D = 348,
     TEX_ARRAYSHADOW1D = 349,
     TEX_ARRAYSHADOW2D = 350,
     VERTEX = 351,
     VTXATTRIB = 352,
     WEIGHT = 353,
     IDENTIFIER = 354,
     USED_IDENTIFIER = 355,
     MASK4 = 356,
     MASK3 = 357,
     MASK2 = 358,
     MASK1 = 359,
     SWIZZLE = 360,
     DOT_DOT = 361,
     DOT = 362
   };
#endif



d427 1
a428 4

/* Line 214 of yacc.c  */
#line 126 "program_parse.y"

d452 4
a455 7



/* Line 214 of yacc.c  */
#line 363 "program_parse.tab.c"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
d458 1
d476 1
a476 3

/* Line 264 of yacc.c  */
#line 271 "program_parse.y"
d482 2
a483 2
/* Line 264 of yacc.c  */
#line 394 "program_parse.tab.c"
d533 1
a533 1
# if defined YYENABLE_NLS && YYENABLE_NLS
d558 1
a558 1
YYID (int yyi)
d561 2
a562 2
YYID (yyi)
    int yyi;
d565 1
a565 1
  return yyi;
d647 3
a649 3
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
d684 1
a684 1
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
d688 2
a689 2
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
d897 17
a913 17
    1203,  1209,  1209,  1211,  1229,  1255,  1258,  1269,  1275,  1281,
    1282,  1289,  1295,  1301,  1309,  1315,  1321,  1329,  1335,  1341,
    1349,  1350,  1353,  1354,  1355,  1356,  1357,  1358,  1359,  1360,
    1361,  1362,  1363,  1366,  1375,  1379,  1383,  1389,  1398,  1402,
    1406,  1415,  1419,  1425,  1431,  1438,  1443,  1451,  1461,  1463,
    1471,  1477,  1481,  1485,  1491,  1502,  1511,  1515,  1520,  1524,
    1528,  1532,  1538,  1545,  1549,  1555,  1563,  1574,  1581,  1585,
    1591,  1601,  1612,  1616,  1634,  1643,  1646,  1652,  1656,  1660,
    1666,  1677,  1682,  1687,  1692,  1697,  1702,  1710,  1713,  1718,
    1731,  1739,  1750,  1758,  1758,  1760,  1760,  1762,  1772,  1777,
    1784,  1794,  1803,  1808,  1815,  1825,  1835,  1847,  1847,  1848,
    1848,  1850,  1860,  1868,  1878,  1886,  1894,  1903,  1914,  1918,
    1924,  1925,  1926,  1929,  1929,  1932,  1967,  1971,  1971,  1974,
    1981,  1990,  2004,  2013,  2022,  2026,  2035,  2044,  2055,  2062,
    2067,  2095,  2104,  2116,  2119,  2128,  2139,  2140,  2141,  2144,
    2145,  2146,  2149,  2150,  2153,  2154,  2157,  2158,  2161,  2172,
    2183,  2194,  2220,  2221
d1385 1
a1385 4
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */
a1387 6
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif
d1444 1
a1444 1
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
d1563 1
a1563 1
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
d1566 3
a1568 3
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
d1572 2
a1573 5
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
d1609 1
a1609 1
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
d1613 1
a1613 1
      YYFPRINTF (stderr, "\n");
d1897 1
d1900 1
d1919 4
a1922 3
/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/
d1946 1
a1946 1
/* The lookahead symbol.  */
d1949 1
a1949 1
/* The semantic value of the lookahead symbol.  */
d1952 3
a1954 1
/* Location data for the lookahead symbol.  */
d1957 1
a1957 35
    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

d1960 4
a1963 7
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

d1971 33
a2003 1
#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))
a2008 6
  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

d2014 1
a2014 1
  yychar = YYEMPTY; /* Cause a token to be read.  */
d2020 1
d2024 1
a2024 2

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
d2027 1
a2027 1
  yylloc.first_column = yylloc.last_column = 1;
a2065 1

d2087 3
a2089 3
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
a2109 3
  if (yystate == YYFINAL)
    YYACCEPT;

d2118 1
a2118 1
     lookahead token if we need one and don't already have one.  */
d2120 1
a2120 1
  /* First try to decide what to do without reference to lookahead token.  */
d2125 1
a2125 1
  /* Not known => get a lookahead token if don't already have one.  */
d2127 1
a2127 1
  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
d2159 3
d2167 1
a2167 1
  /* Shift the lookahead token.  */
d2170 3
a2172 2
  /* Discard the shifted token.  */
  yychar = YYEMPTY;
d2213 1
a2213 3

/* Line 1464 of yacc.c  */
#line 282 "program_parse.y"
d2224 1
a2224 3

/* Line 1464 of yacc.c  */
#line 290 "program_parse.y"
d2237 1
a2237 3

/* Line 1464 of yacc.c  */
#line 306 "program_parse.y"
d2262 1
a2262 3

/* Line 1464 of yacc.c  */
#line 334 "program_parse.y"
d2280 1
a2280 3

/* Line 1464 of yacc.c  */
#line 352 "program_parse.y"
d2288 1
a2288 3

/* Line 1464 of yacc.c  */
#line 357 "program_parse.y"
d2296 1
a2296 3

/* Line 1464 of yacc.c  */
#line 378 "program_parse.y"
d2303 1
a2303 3

/* Line 1464 of yacc.c  */
#line 384 "program_parse.y"
d2310 1
a2310 3

/* Line 1464 of yacc.c  */
#line 390 "program_parse.y"
d2317 1
a2317 3

/* Line 1464 of yacc.c  */
#line 396 "program_parse.y"
d2324 1
a2324 3

/* Line 1464 of yacc.c  */
#line 403 "program_parse.y"
d2331 1
a2331 3

/* Line 1464 of yacc.c  */
#line 410 "program_parse.y"
d2338 1
a2338 3

/* Line 1464 of yacc.c  */
#line 416 "program_parse.y"
d2383 1
a2383 3

/* Line 1464 of yacc.c  */
#line 460 "program_parse.y"
d2391 1
a2391 3

/* Line 1464 of yacc.c  */
#line 465 "program_parse.y"
d2402 1
a2402 3

/* Line 1464 of yacc.c  */
#line 475 "program_parse.y"
d2447 1
a2447 3

/* Line 1464 of yacc.c  */
#line 519 "program_parse.y"
d2454 1
a2454 3

/* Line 1464 of yacc.c  */
#line 524 "program_parse.y"
d2459 1
a2459 3

/* Line 1464 of yacc.c  */
#line 525 "program_parse.y"
d2464 1
a2464 3

/* Line 1464 of yacc.c  */
#line 526 "program_parse.y"
d2469 1
a2469 3

/* Line 1464 of yacc.c  */
#line 527 "program_parse.y"
d2474 1
a2474 3

/* Line 1464 of yacc.c  */
#line 528 "program_parse.y"
d2479 1
a2479 3

/* Line 1464 of yacc.c  */
#line 529 "program_parse.y"
d2484 1
a2484 3

/* Line 1464 of yacc.c  */
#line 530 "program_parse.y"
d2489 1
a2489 3

/* Line 1464 of yacc.c  */
#line 531 "program_parse.y"
d2494 1
a2494 3

/* Line 1464 of yacc.c  */
#line 532 "program_parse.y"
d2499 1
a2499 3

/* Line 1464 of yacc.c  */
#line 533 "program_parse.y"
d2504 1
a2504 3

/* Line 1464 of yacc.c  */
#line 534 "program_parse.y"
d2509 1
a2509 3

/* Line 1464 of yacc.c  */
#line 535 "program_parse.y"
d2514 1
a2514 3

/* Line 1464 of yacc.c  */
#line 539 "program_parse.y"
d2527 1
a2527 3

/* Line 1464 of yacc.c  */
#line 551 "program_parse.y"
d2538 1
a2538 3

/* Line 1464 of yacc.c  */
#line 559 "program_parse.y"
d2556 1
a2556 3

/* Line 1464 of yacc.c  */
#line 576 "program_parse.y"
d2566 1
a2566 3

/* Line 1464 of yacc.c  */
#line 583 "program_parse.y"
d2586 1
a2586 3

/* Line 1464 of yacc.c  */
#line 602 "program_parse.y"
d2600 1
a2600 3

/* Line 1464 of yacc.c  */
#line 613 "program_parse.y"
d2620 1
a2620 3

/* Line 1464 of yacc.c  */
#line 633 "program_parse.y"
d2646 1
a2646 3

/* Line 1464 of yacc.c  */
#line 658 "program_parse.y"
d2654 1
a2654 3

/* Line 1464 of yacc.c  */
#line 665 "program_parse.y"
d2688 1
a2688 3

/* Line 1464 of yacc.c  */
#line 698 "program_parse.y"
d2696 1
a2696 3

/* Line 1464 of yacc.c  */
#line 705 "program_parse.y"
d2714 1
a2714 3

/* Line 1464 of yacc.c  */
#line 720 "program_parse.y"
d2770 1
a2770 3

/* Line 1464 of yacc.c  */
#line 775 "program_parse.y"
d2816 1
a2816 3

/* Line 1464 of yacc.c  */
#line 818 "program_parse.y"
d2828 1
a2828 3

/* Line 1464 of yacc.c  */
#line 827 "program_parse.y"
d2853 1
a2853 3

/* Line 1464 of yacc.c  */
#line 849 "program_parse.y"
d2864 1
a2864 3

/* Line 1464 of yacc.c  */
#line 859 "program_parse.y"
d2871 1
a2871 3

/* Line 1464 of yacc.c  */
#line 863 "program_parse.y"
d2901 1
a2901 3

/* Line 1464 of yacc.c  */
#line 892 "program_parse.y"
d2921 1
a2921 3

/* Line 1464 of yacc.c  */
#line 913 "program_parse.y"
d2929 1
a2929 3

/* Line 1464 of yacc.c  */
#line 920 "program_parse.y"
d2942 1
a2942 3

/* Line 1464 of yacc.c  */
#line 931 "program_parse.y"
d2947 1
a2947 3

/* Line 1464 of yacc.c  */
#line 932 "program_parse.y"
d2952 1
a2952 3

/* Line 1464 of yacc.c  */
#line 933 "program_parse.y"
d2957 1
a2957 3

/* Line 1464 of yacc.c  */
#line 937 "program_parse.y"
d2959 1
a2959 1
	   if (((yyvsp[(1) - (1)].integer) < 0) || ((yyvsp[(1) - (1)].integer) > 4095)) {
d2972 1
a2972 3

/* Line 1464 of yacc.c  */
#line 951 "program_parse.y"
d2974 1
a2974 1
	   if (((yyvsp[(1) - (1)].integer) < 0) || ((yyvsp[(1) - (1)].integer) > 4096)) {
d2987 1
a2987 3

/* Line 1464 of yacc.c  */
#line 965 "program_parse.y"
d3008 1
a3008 3

/* Line 1464 of yacc.c  */
#line 985 "program_parse.y"
d3020 1
a3020 3

/* Line 1464 of yacc.c  */
#line 996 "program_parse.y"
d3033 1
a3033 3

/* Line 1464 of yacc.c  */
#line 1012 "program_parse.y"
d3038 1
a3038 3

/* Line 1464 of yacc.c  */
#line 1016 "program_parse.y"
d3043 1
a3043 3

/* Line 1464 of yacc.c  */
#line 1020 "program_parse.y"
d3050 1
a3050 3

/* Line 1464 of yacc.c  */
#line 1024 "program_parse.y"
d3057 1
a3057 3

/* Line 1464 of yacc.c  */
#line 1028 "program_parse.y"
d3066 1
a3066 3

/* Line 1464 of yacc.c  */
#line 1036 "program_parse.y"
d3074 1
a3074 3

/* Line 1464 of yacc.c  */
#line 1043 "program_parse.y"
d3082 1
a3082 3

/* Line 1464 of yacc.c  */
#line 1050 "program_parse.y"
d3106 1
a3106 3

/* Line 1464 of yacc.c  */
#line 1073 "program_parse.y"
d3130 1
a3130 3

/* Line 1464 of yacc.c  */
#line 1104 "program_parse.y"
d3150 1
a3150 3

/* Line 1464 of yacc.c  */
#line 1123 "program_parse.y"
d3157 1
a3157 3

/* Line 1464 of yacc.c  */
#line 1127 "program_parse.y"
d3164 1
a3164 3

/* Line 1464 of yacc.c  */
#line 1133 "program_parse.y"
d3171 1
a3171 3

/* Line 1464 of yacc.c  */
#line 1137 "program_parse.y"
d3178 1
a3178 3

/* Line 1464 of yacc.c  */
#line 1141 "program_parse.y"
d3185 1
a3185 3

/* Line 1464 of yacc.c  */
#line 1145 "program_parse.y"
d3197 1
a3197 3

/* Line 1464 of yacc.c  */
#line 1154 "program_parse.y"
d3209 1
a3209 3

/* Line 1464 of yacc.c  */
#line 1163 "program_parse.y"
d3216 1
a3216 3

/* Line 1464 of yacc.c  */
#line 1167 "program_parse.y"
d3224 1
a3224 3

/* Line 1464 of yacc.c  */
#line 1172 "program_parse.y"
d3231 1
a3231 3

/* Line 1464 of yacc.c  */
#line 1178 "program_parse.y"
d3243 1
a3243 3

/* Line 1464 of yacc.c  */
#line 1192 "program_parse.y"
d3250 1
a3250 3

/* Line 1464 of yacc.c  */
#line 1196 "program_parse.y"
d3257 1
a3257 3

/* Line 1464 of yacc.c  */
#line 1200 "program_parse.y"
d3264 1
a3264 3

/* Line 1464 of yacc.c  */
#line 1204 "program_parse.y"
d3271 1
a3271 3

/* Line 1464 of yacc.c  */
#line 1212 "program_parse.y"
d3290 1
a3290 3

/* Line 1464 of yacc.c  */
#line 1230 "program_parse.y"
d3316 1
a3316 3

/* Line 1464 of yacc.c  */
#line 1255 "program_parse.y"
d3323 1
a3323 3

/* Line 1464 of yacc.c  */
#line 1259 "program_parse.y"
d3326 5
a3330 1
	      yyerror(& (yylsp[(1) - (1)]), state, "invalid parameter array size");
d3339 1
a3339 3

/* Line 1464 of yacc.c  */
#line 1270 "program_parse.y"
d3346 1
a3346 3

/* Line 1464 of yacc.c  */
#line 1276 "program_parse.y"
d3353 1
a3353 3

/* Line 1464 of yacc.c  */
#line 1283 "program_parse.y"
d3361 1
a3361 3

/* Line 1464 of yacc.c  */
#line 1290 "program_parse.y"
d3370 1
a3370 3

/* Line 1464 of yacc.c  */
#line 1296 "program_parse.y"
d3379 1
a3379 3

/* Line 1464 of yacc.c  */
#line 1302 "program_parse.y"
d3388 1
a3388 3

/* Line 1464 of yacc.c  */
#line 1310 "program_parse.y"
d3397 1
a3397 3

/* Line 1464 of yacc.c  */
#line 1316 "program_parse.y"
d3406 1
a3406 3

/* Line 1464 of yacc.c  */
#line 1322 "program_parse.y"
d3415 1
a3415 3

/* Line 1464 of yacc.c  */
#line 1330 "program_parse.y"
d3424 1
a3424 3

/* Line 1464 of yacc.c  */
#line 1336 "program_parse.y"
d3433 1
a3433 3

/* Line 1464 of yacc.c  */
#line 1342 "program_parse.y"
d3442 1
a3442 3

/* Line 1464 of yacc.c  */
#line 1349 "program_parse.y"
d3447 1
a3447 3

/* Line 1464 of yacc.c  */
#line 1350 "program_parse.y"
d3452 1
a3452 3

/* Line 1464 of yacc.c  */
#line 1353 "program_parse.y"
d3457 1
a3457 3

/* Line 1464 of yacc.c  */
#line 1354 "program_parse.y"
d3462 1
a3462 3

/* Line 1464 of yacc.c  */
#line 1355 "program_parse.y"
d3467 1
a3467 3

/* Line 1464 of yacc.c  */
#line 1356 "program_parse.y"
d3472 1
a3472 3

/* Line 1464 of yacc.c  */
#line 1357 "program_parse.y"
d3477 1
a3477 3

/* Line 1464 of yacc.c  */
#line 1358 "program_parse.y"
d3482 1
a3482 3

/* Line 1464 of yacc.c  */
#line 1359 "program_parse.y"
d3487 1
a3487 3

/* Line 1464 of yacc.c  */
#line 1360 "program_parse.y"
d3492 1
a3492 3

/* Line 1464 of yacc.c  */
#line 1361 "program_parse.y"
d3497 1
a3497 3

/* Line 1464 of yacc.c  */
#line 1362 "program_parse.y"
d3502 1
a3502 3

/* Line 1464 of yacc.c  */
#line 1363 "program_parse.y"
d3507 1
a3507 3

/* Line 1464 of yacc.c  */
#line 1367 "program_parse.y"
d3517 1
a3517 3

/* Line 1464 of yacc.c  */
#line 1376 "program_parse.y"
d3524 1
a3524 3

/* Line 1464 of yacc.c  */
#line 1380 "program_parse.y"
d3531 1
a3531 3

/* Line 1464 of yacc.c  */
#line 1384 "program_parse.y"
d3538 1
a3538 3

/* Line 1464 of yacc.c  */
#line 1390 "program_parse.y"
d3548 1
a3548 3

/* Line 1464 of yacc.c  */
#line 1399 "program_parse.y"
d3555 1
a3555 3

/* Line 1464 of yacc.c  */
#line 1403 "program_parse.y"
d3562 1
a3562 3

/* Line 1464 of yacc.c  */
#line 1407 "program_parse.y"
d3574 1
a3574 3

/* Line 1464 of yacc.c  */
#line 1416 "program_parse.y"
d3581 1
a3581 3

/* Line 1464 of yacc.c  */
#line 1420 "program_parse.y"
d3588 1
a3588 3

/* Line 1464 of yacc.c  */
#line 1426 "program_parse.y"
d3595 1
a3595 3

/* Line 1464 of yacc.c  */
#line 1432 "program_parse.y"
d3603 1
a3603 3

/* Line 1464 of yacc.c  */
#line 1439 "program_parse.y"
d3611 1
a3611 3

/* Line 1464 of yacc.c  */
#line 1444 "program_parse.y"
d3620 1
a3620 3

/* Line 1464 of yacc.c  */
#line 1452 "program_parse.y"
d3631 1
a3631 3

/* Line 1464 of yacc.c  */
#line 1464 "program_parse.y"
d3640 1
a3640 3

/* Line 1464 of yacc.c  */
#line 1472 "program_parse.y"
d3647 1
a3647 3

/* Line 1464 of yacc.c  */
#line 1478 "program_parse.y"
d3654 1
a3654 3

/* Line 1464 of yacc.c  */
#line 1482 "program_parse.y"
d3661 1
a3661 3

/* Line 1464 of yacc.c  */
#line 1486 "program_parse.y"
d3668 1
a3668 3

/* Line 1464 of yacc.c  */
#line 1492 "program_parse.y"
d3680 1
a3680 3

/* Line 1464 of yacc.c  */
#line 1503 "program_parse.y"
d3690 1
a3690 3

/* Line 1464 of yacc.c  */
#line 1512 "program_parse.y"
d3697 1
a3697 3

/* Line 1464 of yacc.c  */
#line 1516 "program_parse.y"
d3704 1
a3704 3

/* Line 1464 of yacc.c  */
#line 1521 "program_parse.y"
d3711 1
a3711 3

/* Line 1464 of yacc.c  */
#line 1525 "program_parse.y"
d3718 1
a3718 3

/* Line 1464 of yacc.c  */
#line 1529 "program_parse.y"
d3725 1
a3725 3

/* Line 1464 of yacc.c  */
#line 1533 "program_parse.y"
d3732 1
a3732 3

/* Line 1464 of yacc.c  */
#line 1539 "program_parse.y"
d3740 1
a3740 3

/* Line 1464 of yacc.c  */
#line 1546 "program_parse.y"
d3747 1
a3747 3

/* Line 1464 of yacc.c  */
#line 1550 "program_parse.y"
d3754 1
a3754 3

/* Line 1464 of yacc.c  */
#line 1556 "program_parse.y"
d3763 1
a3763 3

/* Line 1464 of yacc.c  */
#line 1564 "program_parse.y"
d3775 1
a3775 3

/* Line 1464 of yacc.c  */
#line 1575 "program_parse.y"
d3783 1
a3783 3

/* Line 1464 of yacc.c  */
#line 1582 "program_parse.y"
d3790 1
a3790 3

/* Line 1464 of yacc.c  */
#line 1586 "program_parse.y"
d3797 1
a3797 3

/* Line 1464 of yacc.c  */
#line 1592 "program_parse.y"
d3808 1
a3808 3

/* Line 1464 of yacc.c  */
#line 1602 "program_parse.y"
d3819 1
a3819 3

/* Line 1464 of yacc.c  */
#line 1612 "program_parse.y"
d3827 1
a3827 3

/* Line 1464 of yacc.c  */
#line 1617 "program_parse.y"
d3846 1
a3846 3

/* Line 1464 of yacc.c  */
#line 1635 "program_parse.y"
d3855 1
a3855 3

/* Line 1464 of yacc.c  */
#line 1643 "program_parse.y"
d3862 1
a3862 3

/* Line 1464 of yacc.c  */
#line 1647 "program_parse.y"
d3869 1
a3869 3

/* Line 1464 of yacc.c  */
#line 1653 "program_parse.y"
d3876 1
a3876 3

/* Line 1464 of yacc.c  */
#line 1657 "program_parse.y"
d3883 1
a3883 3

/* Line 1464 of yacc.c  */
#line 1661 "program_parse.y"
d3890 1
a3890 3

/* Line 1464 of yacc.c  */
#line 1667 "program_parse.y"
d3902 1
a3902 3

/* Line 1464 of yacc.c  */
#line 1678 "program_parse.y"
d3910 1
a3910 3

/* Line 1464 of yacc.c  */
#line 1683 "program_parse.y"
d3918 1
a3918 3

/* Line 1464 of yacc.c  */
#line 1688 "program_parse.y"
d3926 1
a3926 3

/* Line 1464 of yacc.c  */
#line 1693 "program_parse.y"
d3934 1
a3934 3

/* Line 1464 of yacc.c  */
#line 1698 "program_parse.y"
d3942 1
a3942 3

/* Line 1464 of yacc.c  */
#line 1703 "program_parse.y"
d3950 1
a3950 3

/* Line 1464 of yacc.c  */
#line 1710 "program_parse.y"
d3957 1
a3957 3

/* Line 1464 of yacc.c  */
#line 1714 "program_parse.y"
d3964 1
a3964 3

/* Line 1464 of yacc.c  */
#line 1719 "program_parse.y"
d3979 1
a3979 3

/* Line 1464 of yacc.c  */
#line 1732 "program_parse.y"
d3989 1
a3989 3

/* Line 1464 of yacc.c  */
#line 1740 "program_parse.y"
d4001 1
a4001 3

/* Line 1464 of yacc.c  */
#line 1751 "program_parse.y"
d4009 1
a4009 3

/* Line 1464 of yacc.c  */
#line 1763 "program_parse.y"
d4020 1
a4020 3

/* Line 1464 of yacc.c  */
#line 1773 "program_parse.y"
d4028 1
a4028 3

/* Line 1464 of yacc.c  */
#line 1778 "program_parse.y"
d4036 1
a4036 3

/* Line 1464 of yacc.c  */
#line 1785 "program_parse.y"
d4047 1
a4047 3

/* Line 1464 of yacc.c  */
#line 1795 "program_parse.y"
d4058 1
a4058 3

/* Line 1464 of yacc.c  */
#line 1804 "program_parse.y"
d4066 1
a4066 3

/* Line 1464 of yacc.c  */
#line 1809 "program_parse.y"
d4074 1
a4074 3

/* Line 1464 of yacc.c  */
#line 1816 "program_parse.y"
d4085 1
a4085 3

/* Line 1464 of yacc.c  */
#line 1826 "program_parse.y"
d4096 1
a4096 3

/* Line 1464 of yacc.c  */
#line 1836 "program_parse.y"
d4107 1
a4107 3

/* Line 1464 of yacc.c  */
#line 1851 "program_parse.y"
d4118 1
a4118 3

/* Line 1464 of yacc.c  */
#line 1861 "program_parse.y"
d4129 1
a4129 3

/* Line 1464 of yacc.c  */
#line 1869 "program_parse.y"
d4140 1
a4140 3

/* Line 1464 of yacc.c  */
#line 1879 "program_parse.y"
d4151 1
a4151 3

/* Line 1464 of yacc.c  */
#line 1887 "program_parse.y"
d4162 1
a4162 3

/* Line 1464 of yacc.c  */
#line 1896 "program_parse.y"
d4173 1
a4173 3

/* Line 1464 of yacc.c  */
#line 1905 "program_parse.y"
d4184 1
a4184 3

/* Line 1464 of yacc.c  */
#line 1915 "program_parse.y"
d4191 1
a4191 3

/* Line 1464 of yacc.c  */
#line 1919 "program_parse.y"
d4198 1
a4198 3

/* Line 1464 of yacc.c  */
#line 1924 "program_parse.y"
d4203 1
a4203 3

/* Line 1464 of yacc.c  */
#line 1925 "program_parse.y"
d4208 1
a4208 3

/* Line 1464 of yacc.c  */
#line 1926 "program_parse.y"
d4213 1
a4213 3

/* Line 1464 of yacc.c  */
#line 1929 "program_parse.y"
d4218 1
a4218 3

/* Line 1464 of yacc.c  */
#line 1933 "program_parse.y"
d4255 1
a4255 3

/* Line 1464 of yacc.c  */
#line 1967 "program_parse.y"
d4261 1
a4261 3

/* Line 1464 of yacc.c  */
#line 1971 "program_parse.y"
d4266 1
a4266 3

/* Line 1464 of yacc.c  */
#line 1975 "program_parse.y"
d4276 1
a4276 3

/* Line 1464 of yacc.c  */
#line 1982 "program_parse.y"
d4286 1
a4286 3

/* Line 1464 of yacc.c  */
#line 1991 "program_parse.y"
d4301 1
a4301 3

/* Line 1464 of yacc.c  */
#line 2005 "program_parse.y"
d4313 1
a4313 3

/* Line 1464 of yacc.c  */
#line 2014 "program_parse.y"
d4325 1
a4325 3

/* Line 1464 of yacc.c  */
#line 2023 "program_parse.y"
d4332 1
a4332 3

/* Line 1464 of yacc.c  */
#line 2027 "program_parse.y"
d4344 1
a4344 3

/* Line 1464 of yacc.c  */
#line 2036 "program_parse.y"
d4356 1
a4356 3

/* Line 1464 of yacc.c  */
#line 2045 "program_parse.y"
d4368 1
a4368 3

/* Line 1464 of yacc.c  */
#line 2056 "program_parse.y"
d4375 1
a4375 3

/* Line 1464 of yacc.c  */
#line 2062 "program_parse.y"
d4377 8
a4384 3
	   (yyval.integer) = (state->mode == ARB_vertex)
	      ? VERT_RESULT_COL0
	      : FRAG_RESULT_COLOR;
d4389 1
a4389 3

/* Line 1464 of yacc.c  */
#line 2068 "program_parse.y"
d4420 1
a4420 3

/* Line 1464 of yacc.c  */
#line 2096 "program_parse.y"
d4432 1
a4432 3

/* Line 1464 of yacc.c  */
#line 2105 "program_parse.y"
d4444 1
a4444 3

/* Line 1464 of yacc.c  */
#line 2116 "program_parse.y"
d4451 1
a4451 3

/* Line 1464 of yacc.c  */
#line 2120 "program_parse.y"
d4463 1
a4463 3

/* Line 1464 of yacc.c  */
#line 2129 "program_parse.y"
d4475 1
a4475 3

/* Line 1464 of yacc.c  */
#line 2139 "program_parse.y"
d4480 1
a4480 3

/* Line 1464 of yacc.c  */
#line 2140 "program_parse.y"
d4485 1
a4485 3

/* Line 1464 of yacc.c  */
#line 2141 "program_parse.y"
d4490 1
a4490 3

/* Line 1464 of yacc.c  */
#line 2144 "program_parse.y"
d4495 1
a4495 3

/* Line 1464 of yacc.c  */
#line 2145 "program_parse.y"
d4500 1
a4500 3

/* Line 1464 of yacc.c  */
#line 2146 "program_parse.y"
d4505 1
a4505 3

/* Line 1464 of yacc.c  */
#line 2149 "program_parse.y"
d4510 1
a4510 3

/* Line 1464 of yacc.c  */
#line 2150 "program_parse.y"
d4515 1
a4515 3

/* Line 1464 of yacc.c  */
#line 2153 "program_parse.y"
d4520 1
a4520 3

/* Line 1464 of yacc.c  */
#line 2154 "program_parse.y"
d4525 1
a4525 3

/* Line 1464 of yacc.c  */
#line 2157 "program_parse.y"
d4530 1
a4530 3

/* Line 1464 of yacc.c  */
#line 2158 "program_parse.y"
d4535 1
a4535 3

/* Line 1464 of yacc.c  */
#line 2162 "program_parse.y"
d4547 1
a4547 3

/* Line 1464 of yacc.c  */
#line 2173 "program_parse.y"
d4559 1
a4559 3

/* Line 1464 of yacc.c  */
#line 2184 "program_parse.y"
d4571 1
a4571 3

/* Line 1464 of yacc.c  */
#line 2195 "program_parse.y"
d4598 2
a4599 3

/* Line 1464 of yacc.c  */
#line 4982 "program_parse.tab.c"
d4671 1
a4671 1
  yyerror_range[1] = yylloc;
d4675 1
a4675 1
      /* If just tried and failed to reuse lookahead token after an
d4692 1
a4692 1
  /* Else will try to reuse lookahead token after shifting the error
d4708 1
a4708 1
  yyerror_range[1] = yylsp[1-yylen];
d4742 1
a4742 1
      yyerror_range[1] = *yylsp;
d4750 3
d4755 1
a4755 1
  yyerror_range[2] = yylloc;
d4757 2
a4758 2
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
d4782 1
a4782 1
#if !defined(yyoverflow) || YYERROR_VERBOSE
d4793 1
a4793 1
  if (yychar != YYEMPTY)
d4819 1
a4819 3

/* Line 1684 of yacc.c  */
#line 2224 "program_parse.y"
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.6.1.  */
d3 1
a3 1
/* Bison implementation for Yacc-like parsers in C
d5 2
a6 1
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
d48 1
a48 1
#define YYBISON_VERSION "2.6.1"
d62 3
a65 9
/* Substitute the variable and function names.  */
#define yyparse         _mesa_program_parse
#define yylex           _mesa_program_lex
#define yyerror         _mesa_program_error
#define yylval          _mesa_program_lval
#define yychar          _mesa_program_char
#define yydebug         _mesa_program_debug
#define yynerrs         _mesa_program_nerrs
#define yylloc          _mesa_program_lloc
d68 2
a69 1
/* Line 336 of yacc.c  */
d171 1
a171 1
      if (N) {							\
d185 4
a188 1
   } while(0)
d190 2
a191 2
/* Line 336 of yacc.c  */
#line 193 "program_parse.tab.c"
d193 4
a196 7
# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif
d206 3
a208 10
/* In a future release of Bison, this section will be replaced
   by #include "program_parse.tab.h".  */
#ifndef _MESA_PROGRAM_PROGRAM_PARSE_TAB_H
# define _MESA_PROGRAM_PROGRAM_PARSE_TAB_H
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int _mesa_program_debug;
d210 1
d327 1
d331 3
a333 2
/* Line 350 of yacc.c  */
#line 124 "program_parse.y"
d360 3
a362 2
/* Line 350 of yacc.c  */
#line 370 "program_parse.tab.c"
d383 1
a383 13
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int _mesa_program_parse (void *YYPARSE_PARAM);
#else
int _mesa_program_parse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int _mesa_program_parse (struct asm_parser_state *state);
#else
int _mesa_program_parse ();
#endif
#endif /* ! YYPARSE_PARAM */
d385 2
a386 5
#endif /* !_MESA_PROGRAM_PROGRAM_PARSE_TAB_H  */

/* Copy the second part of user declarations.  */
/* Line 353 of yacc.c  */
#line 269 "program_parse.y"
d388 2
a389 3
extern int
_mesa_program_lexer_lex(YYSTYPE *yylval_param, YYLTYPE *yylloc_param,
                        void *yyscanner);
a390 6
static int
yylex(YYSTYPE *yylval_param, YYLTYPE *yylloc_param,
      struct asm_parser_state *state)
{
   return _mesa_program_lexer_lex(yylval_param, yylloc_param, state->scanner);
}
d392 2
a393 2
/* Line 353 of yacc.c  */
#line 423 "program_parse.tab.c"
d496 1
a496 1
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
d499 2
a500 3
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
d523 1
a523 1
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
d527 2
a528 2
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
d533 1
a533 1
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
d540 1
a540 1
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
d571 17
a587 1
# define YYCOPY_NEEDED 1
a606 20
#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

d795 29
a823 29
       0,   284,   284,   287,   295,   307,   308,   311,   335,   336,
     339,   354,   357,   362,   369,   370,   371,   372,   373,   374,
     375,   378,   379,   380,   383,   389,   397,   403,   410,   416,
     423,   467,   472,   481,   525,   531,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   545,   557,   565,
     582,   589,   608,   619,   639,   663,   670,   703,   710,   726,
     785,   828,   837,   859,   869,   873,   902,   921,   921,   923,
     930,   942,   943,   944,   947,   961,   975,   995,  1006,  1018,
    1020,  1021,  1022,  1023,  1026,  1026,  1026,  1026,  1027,  1030,
    1034,  1039,  1045,  1052,  1059,  1081,  1103,  1104,  1105,  1106,
    1107,  1108,  1111,  1130,  1134,  1140,  1144,  1148,  1152,  1156,
    1160,  1164,  1169,  1175,  1186,  1186,  1187,  1189,  1193,  1197,
    1201,  1207,  1207,  1209,  1227,  1253,  1256,  1271,  1277,  1283,
    1284,  1291,  1297,  1303,  1311,  1317,  1323,  1331,  1337,  1343,
    1351,  1352,  1355,  1356,  1357,  1358,  1359,  1360,  1361,  1362,
    1363,  1364,  1365,  1368,  1377,  1381,  1385,  1391,  1400,  1404,
    1408,  1417,  1421,  1427,  1433,  1440,  1445,  1453,  1463,  1465,
    1473,  1479,  1483,  1487,  1493,  1504,  1513,  1517,  1522,  1526,
    1530,  1534,  1540,  1547,  1551,  1557,  1565,  1576,  1583,  1587,
    1593,  1603,  1614,  1618,  1636,  1645,  1648,  1654,  1658,  1662,
    1668,  1679,  1684,  1689,  1694,  1699,  1704,  1712,  1715,  1720,
    1733,  1741,  1752,  1760,  1760,  1762,  1762,  1764,  1774,  1779,
    1786,  1796,  1805,  1810,  1817,  1827,  1837,  1849,  1849,  1850,
    1850,  1852,  1862,  1870,  1880,  1888,  1896,  1905,  1916,  1920,
    1926,  1927,  1928,  1931,  1931,  1934,  1969,  1973,  1973,  1976,
    1983,  1992,  2006,  2015,  2024,  2028,  2037,  2046,  2057,  2064,
    2074,  2102,  2111,  2123,  2126,  2135,  2146,  2147,  2148,  2151,
    2152,  2153,  2156,  2157,  2160,  2161,  2164,  2165,  2168,  2179,
    2190,  2201,  2227,  2228
d827 1
a827 1
#if YYDEBUG || YYERROR_VERBOSE || 1
d892 1
a892 1
  "ALIAS_statement", "string", YY_NULL
d984 2
a985 2
/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
d1136 2
a1137 1
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
a1183 6
#define yypact_value_is_default(yystate) \
  ((yystate) == (-398))

#define yytable_value_is_error(yytable_value) \
  YYID (0)

d1310 12
a1321 12
#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
d1331 1
d1336 1
d1338 16
a1353 16
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
a1356 3
#define YYRHSLOC(Rhs, K) ((Rhs)[K])


d1379 1
a1379 1
# define YYLEX yylex (&yylval, &yylloc, state)
a1426 2
  FILE *yyo = yyoutput;
  YYUSE (yyo);
d1572 1
d1675 9
a1683 11
/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
d1685 1
a1685 73
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  YYSIZE_T yysize1;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                if (! (yysize <= yysize1
                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                  return 2;
                yysize = yysize1;
              }
        }
    }
d1687 3
a1689 1
  switch (yycount)
d1691 66
a1756 12
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }
d1758 22
a1779 12
  yysize1 = yysize + yystrlen (yyformat);
  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
    return 2;
  yysize = yysize1;

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
a1780 20

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
d1783 1
d1820 15
d1838 4
a1841 3
/*----------.
| yyparse.  |
`----------*/
d1886 1
a1886 1
       Refer to the stacks through separate pointers, to allow yyoverflow
d1957 1
d2054 1
a2054 1
  if (yypact_value_is_default (yyn))
d2085 2
a2086 2
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
d2141 3
a2143 2
/* Line 1787 of yacc.c  */
#line 288 "program_parse.y"
d2150 1
a2150 1
	}
d2154 3
a2156 2
/* Line 1787 of yacc.c  */
#line 296 "program_parse.y"
d2165 1
a2165 1
	}
d2169 3
a2171 2
/* Line 1787 of yacc.c  */
#line 312 "program_parse.y"
d2192 1
a2192 1
	}
d2196 3
a2198 2
/* Line 1787 of yacc.c  */
#line 340 "program_parse.y"
d2212 1
a2212 1
	}
d2216 3
a2218 2
/* Line 1787 of yacc.c  */
#line 358 "program_parse.y"
d2222 1
a2222 1
	}
d2226 3
a2228 2
/* Line 1787 of yacc.c  */
#line 363 "program_parse.y"
d2232 1
a2232 1
	}
d2236 3
a2238 2
/* Line 1787 of yacc.c  */
#line 384 "program_parse.y"
d2241 1
a2241 1
	}
d2245 3
a2247 2
/* Line 1787 of yacc.c  */
#line 390 "program_parse.y"
a2248 2
	   if ((yyvsp[(1) - (4)].temp_inst).Opcode == OPCODE_DDY)
	      state->fragment.UsesDFdy = 1;
d2250 1
a2250 1
	}
d2254 3
a2256 2
/* Line 1787 of yacc.c  */
#line 398 "program_parse.y"
d2259 1
a2259 1
	}
d2263 3
a2265 2
/* Line 1787 of yacc.c  */
#line 404 "program_parse.y"
d2268 1
a2268 1
	}
d2272 3
a2274 2
/* Line 1787 of yacc.c  */
#line 411 "program_parse.y"
d2277 1
a2277 1
	}
d2281 3
a2283 2
/* Line 1787 of yacc.c  */
#line 418 "program_parse.y"
d2286 1
a2286 1
	}
d2290 3
a2292 2
/* Line 1787 of yacc.c  */
#line 424 "program_parse.y"
d2333 1
a2333 1
	}
d2337 3
a2339 2
/* Line 1787 of yacc.c  */
#line 468 "program_parse.y"
d2343 1
a2343 1
	}
d2347 3
a2349 2
/* Line 1787 of yacc.c  */
#line 473 "program_parse.y"
d2354 1
d2356 1
a2356 1
	}
d2360 3
a2362 2
/* Line 1787 of yacc.c  */
#line 482 "program_parse.y"
d2403 1
a2403 1
	}
d2407 3
a2409 2
/* Line 1787 of yacc.c  */
#line 526 "program_parse.y"
d2412 1
a2412 1
	}
d2416 4
a2419 3
/* Line 1787 of yacc.c  */
#line 531 "program_parse.y"
    { (yyval.integer) = TEXTURE_1D_INDEX; }
d2423 4
a2426 3
/* Line 1787 of yacc.c  */
#line 532 "program_parse.y"
    { (yyval.integer) = TEXTURE_2D_INDEX; }
d2430 4
a2433 3
/* Line 1787 of yacc.c  */
#line 533 "program_parse.y"
    { (yyval.integer) = TEXTURE_3D_INDEX; }
d2437 4
a2440 3
/* Line 1787 of yacc.c  */
#line 534 "program_parse.y"
    { (yyval.integer) = TEXTURE_CUBE_INDEX; }
d2444 4
a2447 3
/* Line 1787 of yacc.c  */
#line 535 "program_parse.y"
    { (yyval.integer) = TEXTURE_RECT_INDEX; }
d2451 4
a2454 3
/* Line 1787 of yacc.c  */
#line 536 "program_parse.y"
    { (yyval.integer) = -TEXTURE_1D_INDEX; }
d2458 4
a2461 3
/* Line 1787 of yacc.c  */
#line 537 "program_parse.y"
    { (yyval.integer) = -TEXTURE_2D_INDEX; }
d2465 4
a2468 3
/* Line 1787 of yacc.c  */
#line 538 "program_parse.y"
    { (yyval.integer) = -TEXTURE_RECT_INDEX; }
d2472 4
a2475 3
/* Line 1787 of yacc.c  */
#line 539 "program_parse.y"
    { (yyval.integer) = TEXTURE_1D_ARRAY_INDEX; }
d2479 4
a2482 3
/* Line 1787 of yacc.c  */
#line 540 "program_parse.y"
    { (yyval.integer) = TEXTURE_2D_ARRAY_INDEX; }
d2486 4
a2489 3
/* Line 1787 of yacc.c  */
#line 541 "program_parse.y"
    { (yyval.integer) = -TEXTURE_1D_ARRAY_INDEX; }
d2493 4
a2496 3
/* Line 1787 of yacc.c  */
#line 542 "program_parse.y"
    { (yyval.integer) = -TEXTURE_2D_ARRAY_INDEX; }
d2500 3
a2502 2
/* Line 1787 of yacc.c  */
#line 546 "program_parse.y"
d2511 1
a2511 1
	}
d2515 3
a2517 2
/* Line 1787 of yacc.c  */
#line 558 "program_parse.y"
d2524 1
a2524 1
	}
d2528 3
a2530 2
/* Line 1787 of yacc.c  */
#line 566 "program_parse.y"
d2544 1
a2544 1
	}
d2548 3
a2550 2
/* Line 1787 of yacc.c  */
#line 583 "program_parse.y"
d2556 1
a2556 1
	}
d2560 3
a2562 2
/* Line 1787 of yacc.c  */
#line 590 "program_parse.y"
d2578 1
a2578 1
	}
d2582 3
a2584 2
/* Line 1787 of yacc.c  */
#line 609 "program_parse.y"
d2594 1
a2594 1
	}
d2598 3
a2600 2
/* Line 1787 of yacc.c  */
#line 620 "program_parse.y"
d2616 1
a2616 1
	}
d2620 3
a2622 2
/* Line 1787 of yacc.c  */
#line 640 "program_parse.y"
d2628 1
d2636 1
a2636 1
	       && ((yyval.dst_reg).Index == VARYING_SLOT_POS)) {
d2644 1
a2644 1
	}
d2648 3
a2650 2
/* Line 1787 of yacc.c  */
#line 664 "program_parse.y"
d2654 1
a2654 1
	}
d2658 3
a2660 2
/* Line 1787 of yacc.c  */
#line 671 "program_parse.y"
d2690 1
a2690 1
	}
d2694 3
a2696 2
/* Line 1787 of yacc.c  */
#line 704 "program_parse.y"
d2700 1
a2700 1
	}
d2704 3
a2706 2
/* Line 1787 of yacc.c  */
#line 711 "program_parse.y"
a2713 1
           (yyval.ext_swizzle).negate = 0;
d2720 1
a2720 1
	}
d2724 3
a2726 2
/* Line 1787 of yacc.c  */
#line 727 "program_parse.y"
a2737 4
           (yyval.ext_swizzle).rgba_valid = 0;
           (yyval.ext_swizzle).xyzw_valid = 0;
           (yyval.ext_swizzle).negate = 0;

d2778 1
a2778 1
	}
d2782 3
a2784 2
/* Line 1787 of yacc.c  */
#line 786 "program_parse.y"
d2815 1
a2815 1
	      state->prog->InputsRead |= BITFIELD64_BIT((yyval.src_reg).Base.Index);
d2826 1
a2826 1
	}
d2830 3
a2832 2
/* Line 1787 of yacc.c  */
#line 829 "program_parse.y"
d2835 1
a2835 1
	   state->prog->InputsRead |= BITFIELD64_BIT((yyval.src_reg).Base.Index);
d2840 1
a2840 1
	}
d2844 3
a2846 2
/* Line 1787 of yacc.c  */
#line 838 "program_parse.y"
d2867 1
a2867 1
	}
d2871 3
a2873 2
/* Line 1787 of yacc.c  */
#line 860 "program_parse.y"
d2880 1
a2880 1
	}
d2884 3
a2886 2
/* Line 1787 of yacc.c  */
#line 870 "program_parse.y"
d2889 1
a2889 1
	}
d2893 3
a2895 2
/* Line 1787 of yacc.c  */
#line 874 "program_parse.y"
d2921 1
a2921 1
	}
d2925 3
a2927 2
/* Line 1787 of yacc.c  */
#line 903 "program_parse.y"
d2943 1
a2943 1
	}
d2947 3
a2949 2
/* Line 1787 of yacc.c  */
#line 924 "program_parse.y"
d2953 1
a2953 1
	}
d2957 3
a2959 2
/* Line 1787 of yacc.c  */
#line 931 "program_parse.y"
d2968 1
a2968 1
	}
d2972 4
a2975 3
/* Line 1787 of yacc.c  */
#line 942 "program_parse.y"
    { (yyval.integer) = 0; }
d2979 4
a2982 3
/* Line 1787 of yacc.c  */
#line 943 "program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (2)].integer); }
d2986 4
a2989 3
/* Line 1787 of yacc.c  */
#line 944 "program_parse.y"
    { (yyval.integer) = -(yyvsp[(2) - (2)].integer); }
d2993 3
a2995 2
/* Line 1787 of yacc.c  */
#line 948 "program_parse.y"
d2997 1
a2997 1
	   if (((yyvsp[(1) - (1)].integer) < 0) || ((yyvsp[(1) - (1)].integer) > (state->limits->MaxAddressOffset - 1))) {
d3006 1
a3006 1
	}
d3010 3
a3012 2
/* Line 1787 of yacc.c  */
#line 962 "program_parse.y"
d3014 1
a3014 1
	   if (((yyvsp[(1) - (1)].integer) < 0) || ((yyvsp[(1) - (1)].integer) > state->limits->MaxAddressOffset)) {
d3023 1
a3023 1
	}
d3027 3
a3029 2
/* Line 1787 of yacc.c  */
#line 976 "program_parse.y"
d3046 1
a3046 1
	}
d3050 3
a3052 2
/* Line 1787 of yacc.c  */
#line 996 "program_parse.y"
d3060 1
a3060 1
	}
d3064 3
a3066 2
/* Line 1787 of yacc.c  */
#line 1007 "program_parse.y"
d3075 1
a3075 1
	}
d3079 4
a3082 3
/* Line 1787 of yacc.c  */
#line 1023 "program_parse.y"
    { (yyval.swiz_mask).swizzle = SWIZZLE_NOOP; (yyval.swiz_mask).mask = WRITEMASK_XYZW; }
d3086 4
a3089 3
/* Line 1787 of yacc.c  */
#line 1027 "program_parse.y"
    { (yyval.swiz_mask).swizzle = SWIZZLE_NOOP; (yyval.swiz_mask).mask = WRITEMASK_XYZW; }
d3093 3
a3095 2
/* Line 1787 of yacc.c  */
#line 1031 "program_parse.y"
d3098 1
a3098 1
	}
d3102 3
a3104 2
/* Line 1787 of yacc.c  */
#line 1035 "program_parse.y"
d3107 1
a3107 1
	}
d3111 3
a3113 2
/* Line 1787 of yacc.c  */
#line 1039 "program_parse.y"
d3117 2
a3118 1
	}
d3122 3
a3124 2
/* Line 1787 of yacc.c  */
#line 1046 "program_parse.y"
d3128 1
a3128 1
	}
d3132 3
a3134 2
/* Line 1787 of yacc.c  */
#line 1053 "program_parse.y"
d3138 1
a3138 1
	}
d3142 3
a3144 2
/* Line 1787 of yacc.c  */
#line 1060 "program_parse.y"
d3163 2
a3164 1
	}
d3168 3
a3170 2
/* Line 1787 of yacc.c  */
#line 1082 "program_parse.y"
d3189 2
a3190 1
	}
d3194 3
a3196 2
/* Line 1787 of yacc.c  */
#line 1112 "program_parse.y"
d3206 1
a3206 1
	      state->InputsBound |= BITFIELD64_BIT(s->attrib_binding);
d3212 1
a3212 1
	}
d3216 3
a3218 2
/* Line 1787 of yacc.c  */
#line 1131 "program_parse.y"
d3221 1
a3221 1
	}
d3225 3
a3227 2
/* Line 1787 of yacc.c  */
#line 1135 "program_parse.y"
d3230 1
a3230 1
	}
d3234 3
a3236 2
/* Line 1787 of yacc.c  */
#line 1141 "program_parse.y"
d3239 1
a3239 1
	}
d3243 3
a3245 2
/* Line 1787 of yacc.c  */
#line 1145 "program_parse.y"
d3248 1
a3248 1
	}
d3252 3
a3254 2
/* Line 1787 of yacc.c  */
#line 1149 "program_parse.y"
d3257 1
a3257 1
	}
d3261 3
a3263 2
/* Line 1787 of yacc.c  */
#line 1153 "program_parse.y"
d3265 5
d3271 1
a3271 1
	}
d3275 3
a3277 2
/* Line 1787 of yacc.c  */
#line 1157 "program_parse.y"
d3279 5
d3285 1
a3285 1
	}
d3289 3
a3291 2
/* Line 1787 of yacc.c  */
#line 1161 "program_parse.y"
d3294 1
a3294 1
	}
d3298 3
a3300 2
/* Line 1787 of yacc.c  */
#line 1165 "program_parse.y"
d3304 1
a3304 1
	}
d3308 3
a3310 2
/* Line 1787 of yacc.c  */
#line 1170 "program_parse.y"
d3313 1
a3313 1
	}
d3317 3
a3319 2
/* Line 1787 of yacc.c  */
#line 1176 "program_parse.y"
d3327 1
a3327 1
	}
d3331 3
a3333 2
/* Line 1787 of yacc.c  */
#line 1190 "program_parse.y"
d3335 2
a3336 2
	   (yyval.attrib) = VARYING_SLOT_POS;
	}
d3340 3
a3342 2
/* Line 1787 of yacc.c  */
#line 1194 "program_parse.y"
d3344 2
a3345 2
	   (yyval.attrib) = VARYING_SLOT_COL0 + (yyvsp[(2) - (2)].integer);
	}
d3349 3
a3351 2
/* Line 1787 of yacc.c  */
#line 1198 "program_parse.y"
d3353 2
a3354 2
	   (yyval.attrib) = VARYING_SLOT_FOGC;
	}
d3358 3
a3360 2
/* Line 1787 of yacc.c  */
#line 1202 "program_parse.y"
d3362 2
a3363 2
	   (yyval.attrib) = VARYING_SLOT_TEX0 + (yyvsp[(2) - (2)].integer);
	}
d3367 3
a3369 2
/* Line 1787 of yacc.c  */
#line 1210 "program_parse.y"
d3384 1
a3384 1
	}
d3388 3
a3390 2
/* Line 1787 of yacc.c  */
#line 1228 "program_parse.y"
d3412 1
a3412 1
	}
d3416 3
a3418 2
/* Line 1787 of yacc.c  */
#line 1253 "program_parse.y"
d3421 1
a3421 1
	}
d3425 3
a3427 2
/* Line 1787 of yacc.c  */
#line 1257 "program_parse.y"
d3430 1
a3430 5
              char msg[100];
              _mesa_snprintf(msg, sizeof(msg),
                             "invalid parameter array size (size=%d max=%u)",
                             (yyvsp[(1) - (1)].integer), state->limits->MaxParameters);
	      yyerror(& (yylsp[(1) - (1)]), state, msg);
d3435 1
a3435 1
	}
d3439 3
a3441 2
/* Line 1787 of yacc.c  */
#line 1272 "program_parse.y"
d3444 1
a3444 1
	}
d3448 3
a3450 2
/* Line 1787 of yacc.c  */
#line 1278 "program_parse.y"
d3453 1
a3453 1
	}
d3457 3
a3459 2
/* Line 1787 of yacc.c  */
#line 1285 "program_parse.y"
d3463 1
a3463 1
	}
d3467 3
a3469 2
/* Line 1787 of yacc.c  */
#line 1292 "program_parse.y"
d3474 1
a3474 1
	}
d3478 3
a3480 2
/* Line 1787 of yacc.c  */
#line 1298 "program_parse.y"
d3485 1
a3485 1
	}
d3489 3
a3491 2
/* Line 1787 of yacc.c  */
#line 1304 "program_parse.y"
d3496 1
a3496 1
	}
d3500 3
a3502 2
/* Line 1787 of yacc.c  */
#line 1312 "program_parse.y"
d3507 1
a3507 1
	}
d3511 3
a3513 2
/* Line 1787 of yacc.c  */
#line 1318 "program_parse.y"
d3518 1
a3518 1
	}
d3522 3
a3524 2
/* Line 1787 of yacc.c  */
#line 1324 "program_parse.y"
d3529 1
a3529 1
	}
d3533 3
a3535 2
/* Line 1787 of yacc.c  */
#line 1332 "program_parse.y"
d3540 1
a3540 1
	}
d3544 3
a3546 2
/* Line 1787 of yacc.c  */
#line 1338 "program_parse.y"
d3551 1
a3551 1
	}
d3555 3
a3557 2
/* Line 1787 of yacc.c  */
#line 1344 "program_parse.y"
d3562 1
a3562 1
	}
d3566 4
a3569 3
/* Line 1787 of yacc.c  */
#line 1351 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(1) - (1)].state), sizeof((yyval.state))); }
d3573 4
a3576 3
/* Line 1787 of yacc.c  */
#line 1352 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3580 4
a3583 3
/* Line 1787 of yacc.c  */
#line 1355 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3587 4
a3590 3
/* Line 1787 of yacc.c  */
#line 1356 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3594 4
a3597 3
/* Line 1787 of yacc.c  */
#line 1357 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3601 4
a3604 3
/* Line 1787 of yacc.c  */
#line 1358 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3608 4
a3611 3
/* Line 1787 of yacc.c  */
#line 1359 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3615 4
a3618 3
/* Line 1787 of yacc.c  */
#line 1360 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3622 4
a3625 3
/* Line 1787 of yacc.c  */
#line 1361 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3629 4
a3632 3
/* Line 1787 of yacc.c  */
#line 1362 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3636 4
a3639 3
/* Line 1787 of yacc.c  */
#line 1363 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3643 4
a3646 3
/* Line 1787 of yacc.c  */
#line 1364 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3650 4
a3653 3
/* Line 1787 of yacc.c  */
#line 1365 "program_parse.y"
    { memcpy((yyval.state), (yyvsp[(2) - (2)].state), sizeof((yyval.state))); }
d3657 3
a3659 2
/* Line 1787 of yacc.c  */
#line 1369 "program_parse.y"
d3665 1
a3665 1
	}
d3669 3
a3671 2
/* Line 1787 of yacc.c  */
#line 1378 "program_parse.y"
d3674 1
a3674 1
	}
d3678 3
a3680 2
/* Line 1787 of yacc.c  */
#line 1382 "program_parse.y"
d3683 1
a3683 1
	}
d3687 3
a3689 2
/* Line 1787 of yacc.c  */
#line 1386 "program_parse.y"
d3692 1
a3692 1
	}
d3696 3
a3698 2
/* Line 1787 of yacc.c  */
#line 1392 "program_parse.y"
d3704 1
a3704 1
	}
d3708 3
a3710 2
/* Line 1787 of yacc.c  */
#line 1401 "program_parse.y"
d3713 1
a3713 1
	}
d3717 3
a3719 2
/* Line 1787 of yacc.c  */
#line 1405 "program_parse.y"
d3722 1
a3722 1
	}
d3726 3
a3728 2
/* Line 1787 of yacc.c  */
#line 1409 "program_parse.y"
d3736 1
a3736 1
	}
d3740 3
a3742 2
/* Line 1787 of yacc.c  */
#line 1418 "program_parse.y"
d3745 1
a3745 1
	}
d3749 3
a3751 2
/* Line 1787 of yacc.c  */
#line 1422 "program_parse.y"
d3754 1
a3754 1
	}
d3758 3
a3760 2
/* Line 1787 of yacc.c  */
#line 1428 "program_parse.y"
d3763 1
a3763 1
	}
d3767 3
a3769 2
/* Line 1787 of yacc.c  */
#line 1434 "program_parse.y"
d3773 1
a3773 1
	}
d3777 3
a3779 2
/* Line 1787 of yacc.c  */
#line 1441 "program_parse.y"
d3783 1
a3783 1
	}
d3787 3
a3789 2
/* Line 1787 of yacc.c  */
#line 1446 "program_parse.y"
d3794 1
a3794 1
	}
d3798 3
a3800 2
/* Line 1787 of yacc.c  */
#line 1454 "program_parse.y"
d3807 1
a3807 1
	}
d3811 3
a3813 2
/* Line 1787 of yacc.c  */
#line 1466 "program_parse.y"
d3818 1
a3818 1
	}
d3822 3
a3824 2
/* Line 1787 of yacc.c  */
#line 1474 "program_parse.y"
d3827 1
a3827 1
	}
d3831 3
a3833 2
/* Line 1787 of yacc.c  */
#line 1480 "program_parse.y"
d3836 1
a3836 1
	}
d3840 3
a3842 2
/* Line 1787 of yacc.c  */
#line 1484 "program_parse.y"
d3845 1
a3845 1
	}
d3849 3
a3851 2
/* Line 1787 of yacc.c  */
#line 1488 "program_parse.y"
d3854 1
a3854 1
	}
d3858 3
a3860 2
/* Line 1787 of yacc.c  */
#line 1494 "program_parse.y"
d3868 1
a3868 1
	}
d3872 3
a3874 2
/* Line 1787 of yacc.c  */
#line 1505 "program_parse.y"
d3880 1
a3880 1
	}
d3884 3
a3886 2
/* Line 1787 of yacc.c  */
#line 1514 "program_parse.y"
d3889 1
a3889 1
	}
d3893 3
a3895 2
/* Line 1787 of yacc.c  */
#line 1518 "program_parse.y"
d3898 1
a3898 1
	}
d3902 3
a3904 2
/* Line 1787 of yacc.c  */
#line 1523 "program_parse.y"
d3907 1
a3907 1
	}
d3911 3
a3913 2
/* Line 1787 of yacc.c  */
#line 1527 "program_parse.y"
d3916 1
a3916 1
	}
d3920 3
a3922 2
/* Line 1787 of yacc.c  */
#line 1531 "program_parse.y"
d3925 1
a3925 1
	}
d3929 3
a3931 2
/* Line 1787 of yacc.c  */
#line 1535 "program_parse.y"
d3934 1
a3934 1
	}
d3938 3
a3940 2
/* Line 1787 of yacc.c  */
#line 1541 "program_parse.y"
d3944 1
a3944 1
	}
d3948 3
a3950 2
/* Line 1787 of yacc.c  */
#line 1548 "program_parse.y"
d3953 1
a3953 1
	}
d3957 3
a3959 2
/* Line 1787 of yacc.c  */
#line 1552 "program_parse.y"
d3962 1
a3962 1
	}
d3966 3
a3968 2
/* Line 1787 of yacc.c  */
#line 1558 "program_parse.y"
d3973 1
a3973 1
	}
d3977 3
a3979 2
/* Line 1787 of yacc.c  */
#line 1566 "program_parse.y"
d3987 1
a3987 1
	}
d3991 3
a3993 2
/* Line 1787 of yacc.c  */
#line 1577 "program_parse.y"
d3997 1
a3997 1
	}
d4001 3
a4003 2
/* Line 1787 of yacc.c  */
#line 1584 "program_parse.y"
d4006 1
a4006 1
	}
d4010 3
a4012 2
/* Line 1787 of yacc.c  */
#line 1588 "program_parse.y"
d4015 1
a4015 1
	}
d4019 3
a4021 2
/* Line 1787 of yacc.c  */
#line 1594 "program_parse.y"
d4028 1
a4028 1
	}
d4032 3
a4034 2
/* Line 1787 of yacc.c  */
#line 1604 "program_parse.y"
d4041 1
a4041 1
	}
d4045 3
a4047 2
/* Line 1787 of yacc.c  */
#line 1614 "program_parse.y"
d4051 1
a4051 1
	}
d4055 3
a4057 2
/* Line 1787 of yacc.c  */
#line 1619 "program_parse.y"
d4072 1
a4072 1
	}
d4076 3
a4078 2
/* Line 1787 of yacc.c  */
#line 1637 "program_parse.y"
d4083 1
a4083 1
	}
d4087 3
a4089 2
/* Line 1787 of yacc.c  */
#line 1645 "program_parse.y"
d4092 1
a4092 1
	}
d4096 3
a4098 2
/* Line 1787 of yacc.c  */
#line 1649 "program_parse.y"
d4101 1
a4101 1
	}
d4105 3
a4107 2
/* Line 1787 of yacc.c  */
#line 1655 "program_parse.y"
d4110 1
a4110 1
	}
d4114 3
a4116 2
/* Line 1787 of yacc.c  */
#line 1659 "program_parse.y"
d4119 1
a4119 1
	}
d4123 3
a4125 2
/* Line 1787 of yacc.c  */
#line 1663 "program_parse.y"
d4128 1
a4128 1
	}
d4132 3
a4134 2
/* Line 1787 of yacc.c  */
#line 1669 "program_parse.y"
d4142 1
a4142 1
	}
d4146 3
a4148 2
/* Line 1787 of yacc.c  */
#line 1680 "program_parse.y"
d4152 1
a4152 1
	}
d4156 3
a4158 2
/* Line 1787 of yacc.c  */
#line 1685 "program_parse.y"
d4162 1
a4162 1
	}
d4166 3
a4168 2
/* Line 1787 of yacc.c  */
#line 1690 "program_parse.y"
d4172 1
a4172 1
	}
d4176 3
a4178 2
/* Line 1787 of yacc.c  */
#line 1695 "program_parse.y"
d4182 1
a4182 1
	}
d4186 3
a4188 2
/* Line 1787 of yacc.c  */
#line 1700 "program_parse.y"
d4192 1
a4192 1
	}
d4196 3
a4198 2
/* Line 1787 of yacc.c  */
#line 1705 "program_parse.y"
d4202 1
a4202 1
	}
d4206 3
a4208 2
/* Line 1787 of yacc.c  */
#line 1712 "program_parse.y"
d4211 1
a4211 1
	}
d4215 3
a4217 2
/* Line 1787 of yacc.c  */
#line 1716 "program_parse.y"
d4220 1
a4220 1
	}
d4224 3
a4226 2
/* Line 1787 of yacc.c  */
#line 1721 "program_parse.y"
d4237 1
a4237 1
	}
d4241 3
a4243 2
/* Line 1787 of yacc.c  */
#line 1734 "program_parse.y"
d4249 1
a4249 1
	}
d4253 3
a4255 2
/* Line 1787 of yacc.c  */
#line 1742 "program_parse.y"
d4263 1
a4263 1
	}
d4267 3
a4269 2
/* Line 1787 of yacc.c  */
#line 1753 "program_parse.y"
d4273 1
a4273 1
	}
d4277 3
a4279 2
/* Line 1787 of yacc.c  */
#line 1765 "program_parse.y"
d4286 1
a4286 1
	}
d4290 3
a4292 2
/* Line 1787 of yacc.c  */
#line 1775 "program_parse.y"
d4296 1
a4296 1
	}
d4300 3
a4302 2
/* Line 1787 of yacc.c  */
#line 1780 "program_parse.y"
d4306 1
a4306 1
	}
d4310 3
a4312 2
/* Line 1787 of yacc.c  */
#line 1787 "program_parse.y"
d4319 1
a4319 1
	}
d4323 3
a4325 2
/* Line 1787 of yacc.c  */
#line 1797 "program_parse.y"
d4332 1
a4332 1
	}
d4336 3
a4338 2
/* Line 1787 of yacc.c  */
#line 1806 "program_parse.y"
d4342 1
a4342 1
	}
d4346 3
a4348 2
/* Line 1787 of yacc.c  */
#line 1811 "program_parse.y"
d4352 1
a4352 1
	}
d4356 3
a4358 2
/* Line 1787 of yacc.c  */
#line 1818 "program_parse.y"
d4365 1
a4365 1
	}
d4369 3
a4371 2
/* Line 1787 of yacc.c  */
#line 1828 "program_parse.y"
d4378 1
a4378 1
	}
d4382 3
a4384 2
/* Line 1787 of yacc.c  */
#line 1838 "program_parse.y"
d4391 1
a4391 1
	}
d4395 3
a4397 2
/* Line 1787 of yacc.c  */
#line 1853 "program_parse.y"
d4400 5
a4404 5
	   (yyval.vector).data[0].f = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[1].f = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[2].f = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[3].f = (yyvsp[(1) - (1)].real);
	}
d4408 3
a4410 2
/* Line 1787 of yacc.c  */
#line 1863 "program_parse.y"
d4413 5
a4417 5
	   (yyval.vector).data[0].f = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[1].f = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[2].f = (yyvsp[(1) - (1)].real);
	   (yyval.vector).data[3].f = (yyvsp[(1) - (1)].real);
	}
d4421 3
a4423 2
/* Line 1787 of yacc.c  */
#line 1871 "program_parse.y"
d4426 5
a4430 5
	   (yyval.vector).data[0].f = (float) (yyvsp[(1) - (1)].integer);
	   (yyval.vector).data[1].f = (float) (yyvsp[(1) - (1)].integer);
	   (yyval.vector).data[2].f = (float) (yyvsp[(1) - (1)].integer);
	   (yyval.vector).data[3].f = (float) (yyvsp[(1) - (1)].integer);
	}
d4434 3
a4436 2
/* Line 1787 of yacc.c  */
#line 1881 "program_parse.y"
d4439 5
a4443 5
	   (yyval.vector).data[0].f = (yyvsp[(2) - (3)].real);
	   (yyval.vector).data[1].f = 0.0f;
	   (yyval.vector).data[2].f = 0.0f;
	   (yyval.vector).data[3].f = 1.0f;
	}
d4447 3
a4449 2
/* Line 1787 of yacc.c  */
#line 1889 "program_parse.y"
d4452 5
a4456 5
	   (yyval.vector).data[0].f = (yyvsp[(2) - (5)].real);
	   (yyval.vector).data[1].f = (yyvsp[(4) - (5)].real);
	   (yyval.vector).data[2].f = 0.0f;
	   (yyval.vector).data[3].f = 1.0f;
	}
d4460 3
a4462 2
/* Line 1787 of yacc.c  */
#line 1898 "program_parse.y"
d4465 5
a4469 5
	   (yyval.vector).data[0].f = (yyvsp[(2) - (7)].real);
	   (yyval.vector).data[1].f = (yyvsp[(4) - (7)].real);
	   (yyval.vector).data[2].f = (yyvsp[(6) - (7)].real);
	   (yyval.vector).data[3].f = 1.0f;
	}
d4473 3
a4475 2
/* Line 1787 of yacc.c  */
#line 1907 "program_parse.y"
d4478 5
a4482 5
	   (yyval.vector).data[0].f = (yyvsp[(2) - (9)].real);
	   (yyval.vector).data[1].f = (yyvsp[(4) - (9)].real);
	   (yyval.vector).data[2].f = (yyvsp[(6) - (9)].real);
	   (yyval.vector).data[3].f = (yyvsp[(8) - (9)].real);
	}
d4486 3
a4488 2
/* Line 1787 of yacc.c  */
#line 1917 "program_parse.y"
d4491 1
a4491 1
	}
d4495 3
a4497 2
/* Line 1787 of yacc.c  */
#line 1921 "program_parse.y"
d4500 1
a4500 1
	}
d4504 4
a4507 3
/* Line 1787 of yacc.c  */
#line 1926 "program_parse.y"
    { (yyval.negate) = FALSE; }
d4511 4
a4514 3
/* Line 1787 of yacc.c  */
#line 1927 "program_parse.y"
    { (yyval.negate) = TRUE;  }
d4518 4
a4521 3
/* Line 1787 of yacc.c  */
#line 1928 "program_parse.y"
    { (yyval.negate) = FALSE; }
d4525 4
a4528 3
/* Line 1787 of yacc.c  */
#line 1931 "program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (2)].integer); }
d4532 3
a4534 2
/* Line 1787 of yacc.c  */
#line 1935 "program_parse.y"
d4567 1
a4567 1
	}
d4571 3
a4573 2
/* Line 1787 of yacc.c  */
#line 1969 "program_parse.y"
d4575 1
a4575 1
	}
d4579 4
a4582 3
/* Line 1787 of yacc.c  */
#line 1973 "program_parse.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].integer); }
d4586 3
a4588 2
/* Line 1787 of yacc.c  */
#line 1977 "program_parse.y"
d4594 1
a4594 1
	}
d4598 3
a4600 2
/* Line 1787 of yacc.c  */
#line 1984 "program_parse.y"
d4606 1
a4606 1
	}
d4610 3
a4612 2
/* Line 1787 of yacc.c  */
#line 1993 "program_parse.y"
d4623 1
a4623 1
	}
d4627 3
a4629 2
/* Line 1787 of yacc.c  */
#line 2007 "program_parse.y"
d4632 1
a4632 1
	      (yyval.result) = VARYING_SLOT_POS;
d4637 1
a4637 1
	}
d4641 3
a4643 2
/* Line 1787 of yacc.c  */
#line 2016 "program_parse.y"
d4646 1
a4646 1
	      (yyval.result) = VARYING_SLOT_FOGC;
d4651 1
a4651 1
	}
d4655 3
a4657 2
/* Line 1787 of yacc.c  */
#line 2025 "program_parse.y"
d4660 1
a4660 1
	}
d4664 3
a4666 2
/* Line 1787 of yacc.c  */
#line 2029 "program_parse.y"
d4669 1
a4669 1
	      (yyval.result) = VARYING_SLOT_PSIZ;
d4674 1
a4674 1
	}
d4678 3
a4680 2
/* Line 1787 of yacc.c  */
#line 2038 "program_parse.y"
d4683 1
a4683 1
	      (yyval.result) = VARYING_SLOT_TEX0 + (yyvsp[(3) - (3)].integer);
d4688 1
a4688 1
	}
d4692 3
a4694 2
/* Line 1787 of yacc.c  */
#line 2047 "program_parse.y"
d4702 1
a4702 1
	}
d4706 3
a4708 2
/* Line 1787 of yacc.c  */
#line 2058 "program_parse.y"
d4711 1
a4711 1
	}
d4715 3
a4717 2
/* Line 1787 of yacc.c  */
#line 2064 "program_parse.y"
d4719 4
a4722 9
	   if (state->mode == ARB_vertex) {
	      (yyval.integer) = VARYING_SLOT_COL0;
	   } else {
	      if (state->option.DrawBuffers)
		 (yyval.integer) = FRAG_RESULT_DATA0;
	      else
		 (yyval.integer) = FRAG_RESULT_COLOR;
	   }
	}
d4726 3
a4728 2
/* Line 1787 of yacc.c  */
#line 2075 "program_parse.y"
d4755 1
a4755 1
	}
d4759 3
a4761 2
/* Line 1787 of yacc.c  */
#line 2103 "program_parse.y"
d4764 1
a4764 1
	      (yyval.integer) = VARYING_SLOT_COL0;
d4769 1
a4769 1
	}
d4773 3
a4775 2
/* Line 1787 of yacc.c  */
#line 2112 "program_parse.y"
d4778 1
a4778 1
	      (yyval.integer) = VARYING_SLOT_BFC0;
d4783 1
a4783 1
	}
d4787 3
a4789 2
/* Line 1787 of yacc.c  */
#line 2123 "program_parse.y"
d4792 1
a4792 1
	}
d4796 3
a4798 2
/* Line 1787 of yacc.c  */
#line 2127 "program_parse.y"
d4806 1
a4806 1
	}
d4810 3
a4812 2
/* Line 1787 of yacc.c  */
#line 2136 "program_parse.y"
d4820 1
a4820 1
	}
d4824 4
a4827 3
/* Line 1787 of yacc.c  */
#line 2146 "program_parse.y"
    { (yyval.integer) = 0; }
d4831 4
a4834 3
/* Line 1787 of yacc.c  */
#line 2147 "program_parse.y"
    { (yyval.integer) = 0; }
d4838 4
a4841 3
/* Line 1787 of yacc.c  */
#line 2148 "program_parse.y"
    { (yyval.integer) = 1; }
d4845 4
a4848 3
/* Line 1787 of yacc.c  */
#line 2151 "program_parse.y"
    { (yyval.integer) = 0; }
d4852 4
a4855 3
/* Line 1787 of yacc.c  */
#line 2152 "program_parse.y"
    { (yyval.integer) = 0; }
d4859 4
a4862 3
/* Line 1787 of yacc.c  */
#line 2153 "program_parse.y"
    { (yyval.integer) = 1; }
d4866 4
a4869 3
/* Line 1787 of yacc.c  */
#line 2156 "program_parse.y"
    { (yyval.integer) = 0; }
d4873 4
a4876 3
/* Line 1787 of yacc.c  */
#line 2157 "program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (3)].integer); }
d4880 4
a4883 3
/* Line 1787 of yacc.c  */
#line 2160 "program_parse.y"
    { (yyval.integer) = 0; }
d4887 4
a4890 3
/* Line 1787 of yacc.c  */
#line 2161 "program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (3)].integer); }
d4894 4
a4897 3
/* Line 1787 of yacc.c  */
#line 2164 "program_parse.y"
    { (yyval.integer) = 0; }
d4901 4
a4904 3
/* Line 1787 of yacc.c  */
#line 2165 "program_parse.y"
    { (yyval.integer) = (yyvsp[(2) - (3)].integer); }
d4908 3
a4910 2
/* Line 1787 of yacc.c  */
#line 2169 "program_parse.y"
d4918 1
a4918 1
	}
d4922 3
a4924 2
/* Line 1787 of yacc.c  */
#line 2180 "program_parse.y"
d4932 1
a4932 1
	}
d4936 3
a4938 2
/* Line 1787 of yacc.c  */
#line 2191 "program_parse.y"
d4946 1
a4946 1
	}
d4950 3
a4952 2
/* Line 1787 of yacc.c  */
#line 2202 "program_parse.y"
d4975 1
a4975 1
	}
d4979 3
a4981 2
/* Line 1787 of yacc.c  */
#line 4802 "program_parse.tab.c"
a4983 11
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
a5011 4
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

a5018 2
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
d5020 29
a5048 25
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, state, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
a5049 1
# undef YYSYNTAX_ERROR
d5109 1
a5109 1
      if (!yypact_value_is_default (yyn))
d5161 1
a5161 1
#if !defined yyoverflow || YYERROR_VERBOSE
d5173 2
a5174 7
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, state);
    }
d5198 3
a5200 2
/* Line 2048 of yacc.c  */
#line 2231 "program_parse.y"
d5374 1
a5374 1
   const GLbitfield64 inputs = state->prog->InputsRead | state->InputsBound;
d5376 1
a5376 1
   if (((inputs & VERT_BIT_FF_ALL) & (inputs >> VERT_ATTRIB_GENERIC0)) != 0) {
d5447 1
a5447 1
                               size, GL_NONE, NULL, tokens);
d5683 1
a5683 1
   state->MaxTextureImageUnits = ctx->Const.FragmentProgram.MaxTextureImageUnits;
d5739 1
a5739 1
   state->prog->NumAttributes = _mesa_bitcount_64(state->prog->InputsRead);
@


1.1.1.3
log
@Import Mesa 9.2.1
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.7.12-4996.  */
d5 1
a5 1
      Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
d47 1
a47 1
#define YYBISON_VERSION "2.7.12-4996"
d73 1
a73 1
/* Line 371 of yacc.c  */
d191 1
a191 1
/* Line 371 of yacc.c  */
d212 2
a213 2
#ifndef YY__MESA_PROGRAM_PROGRAM_PARSE_TAB_H_INCLUDED
# define YY__MESA_PROGRAM_PROGRAM_PARSE_TAB_H_INCLUDED
d340 1
a340 1
/* Line 387 of yacc.c  */
d368 1
a368 1
/* Line 387 of yacc.c  */
d404 1
a404 1
#endif /* !YY__MESA_PROGRAM_PROGRAM_PARSE_TAB_H_INCLUDED  */
d407 1
a407 1
/* Line 390 of yacc.c  */
d421 1
a421 1
/* Line 390 of yacc.c  */
d475 1
a475 1
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
d479 1
a479 9
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5))
#  define __attribute__(Spec) /* empty */
d485 1
a485 1
# define YYUSE(E) ((void) (E))
d487 1
a487 1
# define YYUSE(E) /* empty */
a489 1

d492 1
a492 1
# define YYID(N) (N)
d1217 2
a1218 2
#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-398)))
d1220 1
a1220 1
#define yytable_value_is_error(Yytable_value) \
d1366 1
a1366 1
/* Error token number */
a1369 1

d1397 1
d1404 4
a1407 40

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += fprintf (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += fprintf (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += fprintf (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += fprintf (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += fprintf (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

d1415 1
d1479 5
a1483 1
  YYUSE (yytype);
d1730 1
d1793 5
a1797 7
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
d1817 4
a1820 6
  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }
d1880 6
a1885 1
  YYUSE (yytype);
a1919 28

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
static YYSTYPE yyval_default;
# define YY_INITIAL_VALUE(Value) = Value
#endif
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

d1921 1
a1921 1
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);
d1924 1
a1924 2
YYLTYPE yylloc = yyloc_default;

d1964 1
a1964 1
  int yytoken = 0;
d1983 4
a1986 3
  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
d1995 14
a2008 1
  yylsp[0] = yylloc;
a2153 1
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
a2154 1
  YY_IGNORE_MAYBE_UNINITIALIZED_END
d4801 1
a4801 1
#line 4857 "program_parse.tab.c"
a4965 1
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
a4966 1
  YY_IGNORE_MAYBE_UNINITIALIZED_END
d5037 1
a5037 1
/* Line 2050 of yacc.c  */
d5613 1
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 3.0.2.  */
d4 3
a6 3

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

d11 1
a11 1

d16 1
a16 1

d29 1
a29 1

d47 1
a47 1
#define YYBISON_VERSION "3.0.2"
d66 2
d70 1
a70 1

d73 2
a74 1
#line 1 "program/program_parse.y" /* yacc.c:339  */
d191 2
a192 1
#line 189 "./program/program_parse.tab.c" /* yacc.c:339  */
d194 1
a194 1
# ifndef YY_NULLPTR
d196 1
a196 1
#   define YY_NULLPTR nullptr
d198 1
a198 1
#   define YY_NULLPTR 0
d212 3
a214 3
#ifndef YY__MESA_PROGRAM_PROGRAM_PROGRAM_PARSE_TAB_H_INCLUDED
# define YY__MESA_PROGRAM_PROGRAM_PROGRAM_PARSE_TAB_H_INCLUDED
/* Debug traces.  */
d222 1
a222 1
/* Token type.  */
d225 109
a333 108
  enum yytokentype
  {
    ARBvp_10 = 258,
    ARBfp_10 = 259,
    ADDRESS = 260,
    ALIAS = 261,
    ATTRIB = 262,
    OPTION = 263,
    OUTPUT = 264,
    PARAM = 265,
    TEMP = 266,
    END = 267,
    BIN_OP = 268,
    BINSC_OP = 269,
    SAMPLE_OP = 270,
    SCALAR_OP = 271,
    TRI_OP = 272,
    VECTOR_OP = 273,
    ARL = 274,
    KIL = 275,
    SWZ = 276,
    TXD_OP = 277,
    INTEGER = 278,
    REAL = 279,
    AMBIENT = 280,
    ATTENUATION = 281,
    BACK = 282,
    CLIP = 283,
    COLOR = 284,
    DEPTH = 285,
    DIFFUSE = 286,
    DIRECTION = 287,
    EMISSION = 288,
    ENV = 289,
    EYE = 290,
    FOG = 291,
    FOGCOORD = 292,
    FRAGMENT = 293,
    FRONT = 294,
    HALF = 295,
    INVERSE = 296,
    INVTRANS = 297,
    LIGHT = 298,
    LIGHTMODEL = 299,
    LIGHTPROD = 300,
    LOCAL = 301,
    MATERIAL = 302,
    MAT_PROGRAM = 303,
    MATRIX = 304,
    MATRIXINDEX = 305,
    MODELVIEW = 306,
    MVP = 307,
    NORMAL = 308,
    OBJECT = 309,
    PALETTE = 310,
    PARAMS = 311,
    PLANE = 312,
    POINT_TOK = 313,
    POINTSIZE = 314,
    POSITION = 315,
    PRIMARY = 316,
    PROGRAM = 317,
    PROJECTION = 318,
    RANGE = 319,
    RESULT = 320,
    ROW = 321,
    SCENECOLOR = 322,
    SECONDARY = 323,
    SHININESS = 324,
    SIZE_TOK = 325,
    SPECULAR = 326,
    SPOT = 327,
    STATE = 328,
    TEXCOORD = 329,
    TEXENV = 330,
    TEXGEN = 331,
    TEXGEN_Q = 332,
    TEXGEN_R = 333,
    TEXGEN_S = 334,
    TEXGEN_T = 335,
    TEXTURE = 336,
    TRANSPOSE = 337,
    TEXTURE_UNIT = 338,
    TEX_1D = 339,
    TEX_2D = 340,
    TEX_3D = 341,
    TEX_CUBE = 342,
    TEX_RECT = 343,
    TEX_SHADOW1D = 344,
    TEX_SHADOW2D = 345,
    TEX_SHADOWRECT = 346,
    TEX_ARRAY1D = 347,
    TEX_ARRAY2D = 348,
    TEX_ARRAYSHADOW1D = 349,
    TEX_ARRAYSHADOW2D = 350,
    VERTEX = 351,
    VTXATTRIB = 352,
    WEIGHT = 353,
    IDENTIFIER = 354,
    USED_IDENTIFIER = 355,
    MASK4 = 356,
    MASK3 = 357,
    MASK2 = 358,
    MASK1 = 359,
    SWIZZLE = 360,
    DOT_DOT = 361,
    DOT = 362
  };
d336 1
a336 1
/* Value type.  */
d338 1
a338 2
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
d340 2
a341 1
#line 124 "program/program_parse.y" /* yacc.c:355  */
d367 4
a370 2
#line 363 "./program/program_parse.tab.c" /* yacc.c:355  */
};
d372 1
a375 1
/* Location type.  */
d377 1
a377 2
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
d383 2
a384 1
};
d390 8
a397 1

d399 4
d404 1
a404 1
#endif /* !YY__MESA_PROGRAM_PROGRAM_PROGRAM_PARSE_TAB_H_INCLUDED  */
d407 2
a408 1
#line 269 "program/program_parse.y" /* yacc.c:358  */
d421 2
a422 1
#line 403 "./program/program_parse.tab.c" /* yacc.c:358  */
d436 3
d440 1
a440 1
typedef signed char yytype_int8;
d460 2
a461 1
# elif ! defined YYSIZE_T
d483 5
a487 24
#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
d498 9
a506 8
#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
d508 3
a510 1
# define YY_INITIAL_VALUE(Value) Value
d512 3
a514 6
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
a516 1

d534 2
a535 1
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
d547 2
a548 2
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
d564 1
a564 1
             && (defined YYFREE || defined free)))
d572 2
a573 1
#   if ! defined malloc && ! defined EXIT_SUCCESS
d579 2
a580 1
#   if ! defined free && ! defined EXIT_SUCCESS
d590 2
a591 2
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
d617 10
a626 10
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)
d645 1
a645 1
      while (0)
d661 1
a661 1
/* YYNSTATES -- Number of states.  */
d664 1
a664 2
/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
d668 1
a668 1
#define YYTRANSLATE(YYX)                                                \
d671 1
a671 2
/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
d714 122
a835 1
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
d935 1
a935 1
  "ALIAS_statement", "string", YY_NULLPTR
d940 2
a941 2
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
d959 33
a991 1
#define YYPACT_NINF -398
d993 33
a1025 2
#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-398)))
d1027 54
a1080 1
#define YYTABLE_NINF -230
d1082 19
a1100 2
#define yytable_value_is_error(Yytable_value) \
  0
d1102 3
a1104 2
  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
d1157 1
a1157 56
  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     3,     4,     0,     6,     1,     9,     0,     5,   246,
     282,   283,     0,   247,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     0,     0,   242,     0,     0,     8,     0,
      12,    13,    14,    15,    16,    17,    18,    19,    21,    22,
      23,    20,     0,    96,    97,   121,   122,    98,     0,    99,
     100,   101,   245,     7,     0,     0,     0,     0,     0,    65,
       0,    88,    64,     0,     0,     0,     0,     0,    76,     0,
       0,    94,   240,   241,    31,    32,    83,     0,     0,     0,
      10,    11,     0,   243,   250,   248,     0,     0,   125,   242,
     123,   259,   257,   253,   255,   252,   272,   254,   242,    84,
      85,    86,    87,    91,   242,   242,   242,   242,   242,   242,
      78,    55,    81,    80,    82,    92,   233,   232,     0,     0,
       0,     0,    60,     0,   242,    83,     0,    61,    63,   134,
     135,   213,   214,   136,   229,   230,     0,   242,     0,     0,
       0,   281,   102,   126,     0,   127,   131,   132,   133,   227,
     228,   231,     0,   262,   261,     0,   263,     0,   256,     0,
       0,    54,     0,     0,     0,    26,     0,    25,    24,   269,
     119,   117,   272,   104,     0,     0,     0,     0,     0,     0,
     266,     0,   266,     0,     0,   276,   272,   142,   143,   144,
     145,   147,   146,   148,   149,   150,   151,     0,   152,   269,
     109,     0,   107,   105,   272,     0,   114,   103,    83,     0,
      52,     0,     0,     0,     0,   244,   249,     0,   239,   238,
       0,   264,   265,   258,   278,     0,   242,    95,     0,     0,
      83,   242,     0,    48,     0,    51,     0,   242,   270,   271,
     118,   120,     0,     0,     0,   212,   183,   184,   182,     0,
     165,   268,   267,   164,     0,     0,     0,     0,   207,   203,
       0,   202,   272,   195,   189,   188,   187,     0,     0,     0,
       0,   108,     0,   110,     0,     0,   106,     0,   242,   234,
      69,     0,    67,    68,     0,   242,   242,   251,     0,   124,
     260,   273,    28,    89,    90,    93,    27,     0,    79,    50,
     274,     0,     0,   225,     0,   226,     0,   186,     0,   174,
       0,   166,     0,   171,   172,   155,   156,   173,   153,   154,
       0,     0,   201,     0,   204,   197,   199,   198,   194,   196,
     280,     0,   170,   169,   176,   177,     0,     0,   116,     0,
     113,     0,     0,    53,     0,    62,    77,    71,    47,     0,
       0,     0,   242,    49,     0,    34,     0,   242,   220,   224,
       0,     0,   266,   211,     0,   209,     0,   210,     0,   277,
     181,   180,   178,   179,   175,   200,     0,   111,   112,   115,
     242,   235,     0,     0,    70,   242,    58,    57,    59,   242,
       0,     0,     0,   129,   137,   140,   138,   215,   216,   139,
     279,     0,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    30,    29,   185,   160,   162,   159,
       0,   157,   158,     0,   206,   208,   205,   190,     0,    74,
      72,    75,    73,     0,     0,     0,     0,   141,   192,   242,
     128,   275,   163,   161,   167,   168,   242,   236,   242,     0,
       0,     0,     0,   191,   130,     0,     0,     0,     0,   218,
       0,   222,     0,   237,   242,     0,   217,     0,   221,     0,
       0,    56,    33,   219,   223,     0,     0,   193
};

  /* YYPGOTO[NTERM-NUM].  */
d1177 4
a1180 23
  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     3,     4,     6,     8,     9,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,   301,
     414,    41,   162,   233,    74,    60,    69,   348,   349,   387,
     234,    61,   126,   281,   282,   283,   384,   430,   432,    70,
     347,   111,   299,   115,   103,   161,    75,   229,    76,   230,
      42,    43,   127,   207,   341,   276,   339,   173,    44,    45,
      46,   144,    90,   289,   392,   145,   128,   393,   394,   129,
     187,   318,   188,   421,   443,   189,   253,   190,   444,   191,
     333,   319,   310,   192,   336,   374,   193,   248,   194,   308,
     195,   266,   196,   437,   453,   197,   328,   329,   376,   263,
     322,   366,   368,   364,   198,   130,   396,   397,   458,   131,
     398,   460,   132,   304,   306,   399,   133,   149,   134,   135,
     151,    77,    47,   139,    48,    49,    54,    85,    50,    62,
      97,   156,   223,   254,   240,   158,   355,   268,   225,   401,
     331,    51,    12
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
d1226 6
d1277 2
a1278 2
  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
d1331 24
a1354 78
  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   120,   121,   122,   122,   123,   123,   124,   125,   125,
     126,   126,   127,   127,   128,   128,   128,   128,   128,   128,
     128,   129,   129,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   137,   138,   139,   140,   140,   140,   140,   140,
     140,   140,   140,   140,   140,   140,   140,   141,   142,   142,
     143,   143,   144,   144,   145,   146,   147,   148,   149,   149,
     150,   150,   150,   150,   151,   151,   152,   153,   153,   154,
     155,   156,   156,   156,   157,   158,   159,   160,   161,   162,
     163,   163,   163,   163,   164,   164,   164,   164,   164,   165,
     165,   165,   166,   167,   168,   169,   170,   170,   170,   170,
     170,   170,   171,   172,   172,   173,   173,   173,   173,   173,
     173,   173,   173,   174,   175,   175,   176,   177,   177,   177,
     177,   178,   178,   179,   180,   181,   181,   182,   183,   184,
     184,   185,   185,   185,   186,   186,   186,   187,   187,   187,
     188,   188,   189,   189,   189,   189,   189,   189,   189,   189,
     189,   189,   189,   190,   191,   191,   191,   192,   193,   193,
     193,   193,   193,   194,   195,   196,   196,   197,   198,   199,
     200,   201,   201,   201,   202,   203,   204,   204,   205,   205,
     205,   205,   206,   207,   207,   208,   209,   210,   211,   211,
     212,   213,   214,   214,   215,   216,   216,   217,   217,   217,
     218,   219,   219,   219,   219,   219,   219,   220,   220,   221,
     222,   223,   224,   225,   225,   226,   226,   227,   228,   228,
     229,   230,   231,   231,   232,   233,   234,   235,   235,   236,
     236,   237,   238,   238,   239,   239,   239,   239,   240,   240,
     241,   241,   241,   243,   242,   244,   244,   246,   245,   247,
     247,   248,   249,   249,   249,   249,   249,   249,   250,   251,
     251,   251,   251,   252,   252,   252,   253,   253,   253,   254,
     254,   254,   255,   255,   256,   256,   257,   257,   258,   259,
     260,   261,   262,   262
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     4,     1,     1,     2,     0,     3,     2,     0,
       2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     4,     4,     6,     6,     8,
       8,     2,     2,    12,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     6,     2,     4,
       2,     1,     3,     5,     3,     2,     7,     2,     1,     1,
       1,     1,     4,     1,     1,     1,     1,     1,     1,     1,
       3,     0,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     1,     1,     1,     0,     3,
       3,     0,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     2,     2,     1,     2,     1,     2,     1,
       2,     4,     4,     1,     0,     3,     1,     1,     2,     1,
       2,     1,     1,     3,     6,     0,     1,     2,     4,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     3,     1,     1,     1,     5,     1,     1,
       1,     2,     1,     1,     2,     1,     2,     6,     1,     3,
       1,     1,     1,     1,     1,     4,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     5,     1,     2,     1,     1,
       5,     2,     0,     6,     3,     0,     1,     1,     1,     1,
       1,     2,     1,     1,     2,     4,     4,     0,     3,     1,
       1,     1,     2,     1,     1,     1,     1,     5,     1,     3,
       5,     5,     1,     3,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     5,     7,     9,     2,     2,
       1,     1,     0,     0,     4,     1,     0,     0,     3,     3,
       1,     5,     2,     2,     2,     2,     3,     2,     3,     0,
       3,     1,     1,     0,     1,     1,     0,     1,     1,     0,
       1,     1,     0,     3,     0,     3,     0,     3,     1,     1,
       1,     4,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab

d1371 3
a1373 3
      YYERROR;                                                  \
    }                                                           \
while (0)
d1376 2
a1377 2
#define YYTERROR        1
#define YYERRCODE       256
d1387 1
a1387 1
      if (N)                                                            \
d1401 1
a1401 1
    while (0)
a1406 15
/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


d1416 3
a1418 1
YY_ATTRIBUTE_UNUSED
d1421 6
d1432 1
a1432 1
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
d1434 1
a1434 1
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
d1440 1
a1440 1
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
d1442 1
a1442 1
            res += YYFPRINTF (yyo, ".%d", end_col);
d1445 1
a1445 1
        res += YYFPRINTF (yyo, "-%d", end_col);
d1459 14
a1472 10
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, state); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)
d1474 16
a1490 3
/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/
d1492 7
d1501 9
d1513 2
a1516 2
  if (!yyvaluep)
    return;
d1520 2
d1531 2
d1535 9
d1545 4
a1548 2
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);
d1561 2
d1565 6
d1581 5
a1585 5
# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)
d1592 5
d1598 6
a1603 1
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, struct asm_parser_state *state)
a1604 1
  unsigned long int yylno = yyrline[yyrule];
d1607 1
d1609 1
a1609 1
             yyrule - 1, yylno);
d1614 3
a1616 4
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , state);
d1621 5
a1625 5
# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, state); \
} while (0)
d1639 1
a1639 1
#ifndef YYINITDEPTH
d1662 2
d1666 5
d1686 2
d1690 6
d1725 21
a1745 21
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
d1768 1
a1768 1
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
d1772 1
a1772 1
  const char *yyformat = YY_NULLPTR;
d1780 4
d1833 1
a1833 1
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
d1900 3
d1905 9
d1918 1
a1922 1
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
a1923 1
  YY_IGNORE_MAYBE_UNINITIALIZED_END
d1933 13
d1948 6
d1959 9
a1967 1
/* The semantic value of the lookahead symbol.  */
d1970 3
a1972 4
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
d1978 12
d1992 1
d2001 3
a2003 3
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.
d2082 20
a2101 20
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
d2109 1
a2109 1
        goto yyexhaustedlab;
d2112 1
a2112 1
        yystacksize = YYMAXDEPTH;
d2115 8
a2122 8
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
d2124 2
a2125 2
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
d2135 1
a2135 1
                  (unsigned long int) yystacksize));
d2138 1
a2138 1
        YYABORT;
d2167 1
a2167 1
      yychar = yylex (&yylval, &yylloc, state);
d2232 1
a2232 1
     '$$ = $1'.
d2247 2
a2248 1
#line 288 "program/program_parse.y" /* yacc.c:1646  */
d2251 1
a2251 1
	      yyerror(& (yylsp[0]), state, "invalid fragment program header");
a2255 1
#line 1991 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2259 2
a2260 1
#line 296 "program/program_parse.y" /* yacc.c:1646  */
d2263 1
a2263 1
	      yyerror(& (yylsp[0]), state, "invalid vertex program header");
a2269 1
#line 2005 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2273 2
a2274 1
#line 312 "program/program_parse.y" /* yacc.c:1646  */
d2279 1
a2279 1
	      valid = _mesa_ARBvp_parse_option(state, (yyvsp[-1].string));
d2281 1
a2281 1
	      valid = _mesa_ARBfp_parse_option(state, (yyvsp[-1].string));
d2285 1
a2285 1
	   free((yyvsp[-1].string));
d2292 1
a2292 1
	      yyerror(& (yylsp[-1]), state, err_str);
a2295 1
#line 2031 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2299 2
a2300 1
#line 340 "program/program_parse.y" /* yacc.c:1646  */
d2302 1
a2302 1
	   if ((yyvsp[-1].inst) != NULL) {
d2304 1
a2304 1
		 state->inst_head = (yyvsp[-1].inst);
d2306 1
a2306 1
		 state->inst_tail->next = (yyvsp[-1].inst);
d2309 2
a2310 2
	      state->inst_tail = (yyvsp[-1].inst);
	      (yyvsp[-1].inst)->next = NULL;
a2314 1
#line 2050 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2318 2
a2319 1
#line 358 "program/program_parse.y" /* yacc.c:1646  */
d2321 1
a2321 1
	   (yyval.inst) = (yyvsp[0].inst);
a2323 1
#line 2059 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2327 2
a2328 1
#line 363 "program/program_parse.y" /* yacc.c:1646  */
d2330 1
a2330 1
	   (yyval.inst) = (yyvsp[0].inst);
a2332 1
#line 2068 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2336 2
a2337 1
#line 384 "program/program_parse.y" /* yacc.c:1646  */
d2339 1
a2339 1
	   (yyval.inst) = asm_instruction_ctor(OPCODE_ARL, & (yyvsp[-2].dst_reg), & (yyvsp[0].src_reg), NULL, NULL);
a2340 1
#line 2076 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2344 2
a2345 1
#line 390 "program/program_parse.y" /* yacc.c:1646  */
d2347 1
a2347 1
	   if ((yyvsp[-3].temp_inst).Opcode == OPCODE_DDY)
d2349 1
a2349 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-3].temp_inst), & (yyvsp[-2].dst_reg), & (yyvsp[0].src_reg), NULL, NULL);
a2350 1
#line 2086 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2354 2
a2355 1
#line 398 "program/program_parse.y" /* yacc.c:1646  */
d2357 1
a2357 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-3].temp_inst), & (yyvsp[-2].dst_reg), & (yyvsp[0].src_reg), NULL, NULL);
a2358 1
#line 2094 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2362 2
a2363 1
#line 404 "program/program_parse.y" /* yacc.c:1646  */
d2365 1
a2365 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-5].temp_inst), & (yyvsp[-4].dst_reg), & (yyvsp[-2].src_reg), & (yyvsp[0].src_reg), NULL);
a2366 1
#line 2102 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2370 2
a2371 1
#line 411 "program/program_parse.y" /* yacc.c:1646  */
d2373 1
a2373 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-5].temp_inst), & (yyvsp[-4].dst_reg), & (yyvsp[-2].src_reg), & (yyvsp[0].src_reg), NULL);
a2374 1
#line 2110 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2378 2
a2379 1
#line 418 "program/program_parse.y" /* yacc.c:1646  */
d2381 1
a2381 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-7].temp_inst), & (yyvsp[-6].dst_reg), & (yyvsp[-4].src_reg), & (yyvsp[-2].src_reg), & (yyvsp[0].src_reg));
a2382 1
#line 2118 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2386 2
a2387 1
#line 424 "program/program_parse.y" /* yacc.c:1646  */
d2389 1
a2389 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-7].temp_inst), & (yyvsp[-6].dst_reg), & (yyvsp[-4].src_reg), NULL, NULL);
d2391 1
a2391 1
	      const GLbitfield tex_mask = (1U << (yyvsp[-2].integer));
d2396 1
a2396 1
	      (yyval.inst)->Base.TexSrcUnit = (yyvsp[-2].integer);
d2398 1
a2398 1
	      if ((yyvsp[0].integer) < 0) {
d2401 1
a2401 1
		 (yyval.inst)->Base.TexSrcTarget = -(yyvsp[0].integer);
d2404 1
a2404 1
		 (yyval.inst)->Base.TexSrcTarget = (yyvsp[0].integer);
d2415 2
a2416 2
	      if ((state->prog->TexturesUsed[(yyvsp[-2].integer)] != 0)
		  && ((state->prog->TexturesUsed[(yyvsp[-2].integer)] != target_mask)
d2419 1
a2419 1
		 yyerror(& (yylsp[0]), state,
d2425 1
a2425 1
	      state->prog->TexturesUsed[(yyvsp[-2].integer)] |= target_mask;
a2428 1
#line 2164 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2432 2
a2433 1
#line 468 "program/program_parse.y" /* yacc.c:1646  */
d2435 1
a2435 1
	   (yyval.inst) = asm_instruction_ctor(OPCODE_KIL, NULL, & (yyvsp[0].src_reg), NULL, NULL);
a2437 1
#line 2173 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2441 2
a2442 1
#line 473 "program/program_parse.y" /* yacc.c:1646  */
d2445 2
a2446 2
	   (yyval.inst)->Base.DstReg.CondMask = (yyvsp[0].dst_reg).CondMask;
	   (yyval.inst)->Base.DstReg.CondSwizzle = (yyvsp[0].dst_reg).CondSwizzle;
a2448 1
#line 2184 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2452 2
a2453 1
#line 482 "program/program_parse.y" /* yacc.c:1646  */
d2455 1
a2455 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-11].temp_inst), & (yyvsp[-10].dst_reg), & (yyvsp[-8].src_reg), & (yyvsp[-6].src_reg), & (yyvsp[-4].src_reg));
d2457 1
a2457 1
	      const GLbitfield tex_mask = (1U << (yyvsp[-2].integer));
d2462 1
a2462 1
	      (yyval.inst)->Base.TexSrcUnit = (yyvsp[-2].integer);
d2464 1
a2464 1
	      if ((yyvsp[0].integer) < 0) {
d2467 1
a2467 1
		 (yyval.inst)->Base.TexSrcTarget = -(yyvsp[0].integer);
d2470 1
a2470 1
		 (yyval.inst)->Base.TexSrcTarget = (yyvsp[0].integer);
d2481 2
a2482 2
	      if ((state->prog->TexturesUsed[(yyvsp[-2].integer)] != 0)
		  && ((state->prog->TexturesUsed[(yyvsp[-2].integer)] != target_mask)
d2485 1
a2485 1
		 yyerror(& (yylsp[0]), state,
d2491 1
a2491 1
	      state->prog->TexturesUsed[(yyvsp[-2].integer)] |= target_mask;
a2494 1
#line 2230 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2498 2
a2499 1
#line 526 "program/program_parse.y" /* yacc.c:1646  */
d2501 1
a2501 1
	   (yyval.integer) = (yyvsp[0].integer);
a2502 1
#line 2238 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2506 2
a2507 1
#line 531 "program/program_parse.y" /* yacc.c:1646  */
a2508 1
#line 2244 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2512 2
a2513 1
#line 532 "program/program_parse.y" /* yacc.c:1646  */
a2514 1
#line 2250 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2518 2
a2519 1
#line 533 "program/program_parse.y" /* yacc.c:1646  */
a2520 1
#line 2256 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2524 2
a2525 1
#line 534 "program/program_parse.y" /* yacc.c:1646  */
a2526 1
#line 2262 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2530 2
a2531 1
#line 535 "program/program_parse.y" /* yacc.c:1646  */
a2532 1
#line 2268 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2536 2
a2537 1
#line 536 "program/program_parse.y" /* yacc.c:1646  */
a2538 1
#line 2274 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2542 2
a2543 1
#line 537 "program/program_parse.y" /* yacc.c:1646  */
a2544 1
#line 2280 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2548 2
a2549 1
#line 538 "program/program_parse.y" /* yacc.c:1646  */
a2550 1
#line 2286 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2554 2
a2555 1
#line 539 "program/program_parse.y" /* yacc.c:1646  */
a2556 1
#line 2292 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2560 2
a2561 1
#line 540 "program/program_parse.y" /* yacc.c:1646  */
a2562 1
#line 2298 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2566 2
a2567 1
#line 541 "program/program_parse.y" /* yacc.c:1646  */
a2568 1
#line 2304 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2572 2
a2573 1
#line 542 "program/program_parse.y" /* yacc.c:1646  */
a2574 1
#line 2310 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2578 2
a2579 1
#line 546 "program/program_parse.y" /* yacc.c:1646  */
d2584 2
a2585 2
	   (yyvsp[-2].src_reg).Base.Swizzle = (yyvsp[0].swiz_mask).swizzle;
	   (yyvsp[-2].src_reg).Base.Negate = (yyvsp[0].swiz_mask).mask;
d2587 1
a2587 1
	   (yyval.inst) = asm_instruction_copy_ctor(& (yyvsp[-5].temp_inst), & (yyvsp[-4].dst_reg), & (yyvsp[-2].src_reg), NULL, NULL);
a2588 1
#line 2324 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2592 2
a2593 1
#line 558 "program/program_parse.y" /* yacc.c:1646  */
d2595 1
a2595 1
	   (yyval.src_reg) = (yyvsp[0].src_reg);
d2597 1
a2597 1
	   if ((yyvsp[-1].negate)) {
a2600 1
#line 2336 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2604 2
a2605 1
#line 566 "program/program_parse.y" /* yacc.c:1646  */
d2607 1
a2607 1
	   (yyval.src_reg) = (yyvsp[-1].src_reg);
d2610 1
a2610 1
	      yyerror(& (yylsp[-2]), state, "unexpected character '|'");
d2614 1
a2614 1
	   if ((yyvsp[-3].negate)) {
a2619 1
#line 2355 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2623 2
a2624 1
#line 583 "program/program_parse.y" /* yacc.c:1646  */
d2626 1
a2626 1
	   (yyval.src_reg) = (yyvsp[-1].src_reg);
d2629 1
a2629 1
						    (yyvsp[0].swiz_mask).swizzle);
a2630 1
#line 2366 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2634 2
a2635 1
#line 590 "program/program_parse.y" /* yacc.c:1646  */
d2640 1
a2640 1
	      yyerror(& (yylsp[0]), state, "expected scalar suffix");
d2646 1
a2646 1
	   initialize_symbol_from_const(state->prog, & temp_sym, & (yyvsp[0].vector), GL_TRUE);
a2651 1
#line 2387 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2655 2
a2656 1
#line 609 "program/program_parse.y" /* yacc.c:1646  */
d2658 1
a2658 1
	   (yyval.src_reg) = (yyvsp[-1].src_reg);
d2660 1
a2660 1
	   if ((yyvsp[-2].negate)) {
d2665 1
a2665 1
						    (yyvsp[0].swiz_mask).swizzle);
a2666 1
#line 2402 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2670 2
a2671 1
#line 620 "program/program_parse.y" /* yacc.c:1646  */
d2673 1
a2673 1
	   (yyval.src_reg) = (yyvsp[-2].src_reg);
d2676 1
a2676 1
	      yyerror(& (yylsp[-3]), state, "unexpected character '|'");
d2680 1
a2680 1
	   if ((yyvsp[-4].negate)) {
d2686 1
a2686 1
						    (yyvsp[-1].swiz_mask).swizzle);
a2687 1
#line 2423 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2691 2
a2692 1
#line 640 "program/program_parse.y" /* yacc.c:1646  */
d2694 4
a2697 4
	   (yyval.dst_reg) = (yyvsp[-2].dst_reg);
	   (yyval.dst_reg).WriteMask = (yyvsp[-1].swiz_mask).mask;
	   (yyval.dst_reg).CondMask = (yyvsp[0].dst_reg).CondMask;
	   (yyval.dst_reg).CondSwizzle = (yyvsp[0].dst_reg).CondSwizzle;
d2706 1
a2706 1
		 yyerror(& (yylsp[-2]), state, "position-invariant programs cannot "
a2713 1
#line 2449 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2717 2
a2718 1
#line 664 "program/program_parse.y" /* yacc.c:1646  */
d2721 1
a2721 1
	   (yyval.dst_reg).WriteMask = (yyvsp[0].swiz_mask).mask;
a2722 1
#line 2458 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2726 2
a2727 1
#line 671 "program/program_parse.y" /* yacc.c:1646  */
d2730 4
a2733 4
	      ((yyvsp[-6].ext_swizzle).xyzw_valid << 0)
	      | ((yyvsp[-4].ext_swizzle).xyzw_valid << 1)
	      | ((yyvsp[-2].ext_swizzle).xyzw_valid << 2)
	      | ((yyvsp[0].ext_swizzle).xyzw_valid << 3);
d2735 4
a2738 4
	      ((yyvsp[-6].ext_swizzle).rgba_valid << 0)
	      | ((yyvsp[-4].ext_swizzle).rgba_valid << 1)
	      | ((yyvsp[-2].ext_swizzle).rgba_valid << 2)
	      | ((yyvsp[0].ext_swizzle).rgba_valid << 3);
d2749 1
a2749 1
	      yyerror(& (yylsp[-6]), state, "cannot combine RGBA and XYZW swizzle "
d2754 3
a2756 3
	   (yyval.swiz_mask).swizzle = MAKE_SWIZZLE4((yyvsp[-6].ext_swizzle).swz, (yyvsp[-4].ext_swizzle).swz, (yyvsp[-2].ext_swizzle).swz, (yyvsp[0].ext_swizzle).swz);
	   (yyval.swiz_mask).mask = ((yyvsp[-6].ext_swizzle).negate) | ((yyvsp[-4].ext_swizzle).negate << 1) | ((yyvsp[-2].ext_swizzle).negate << 2)
	      | ((yyvsp[0].ext_swizzle).negate << 3);
a2757 1
#line 2493 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2761 2
a2762 1
#line 704 "program/program_parse.y" /* yacc.c:1646  */
d2764 2
a2765 2
	   (yyval.ext_swizzle) = (yyvsp[0].ext_swizzle);
	   (yyval.ext_swizzle).negate = ((yyvsp[-1].negate)) ? 1 : 0;
a2766 1
#line 2502 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2770 2
a2771 1
#line 711 "program/program_parse.y" /* yacc.c:1646  */
d2773 2
a2774 2
	   if (((yyvsp[0].integer) != 0) && ((yyvsp[0].integer) != 1)) {
	      yyerror(& (yylsp[0]), state, "invalid extended swizzle selector");
d2778 1
a2778 1
	   (yyval.ext_swizzle).swz = ((yyvsp[0].integer) == 0) ? SWIZZLE_ZERO : SWIZZLE_ONE;
a2786 1
#line 2522 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2790 2
a2791 1
#line 727 "program/program_parse.y" /* yacc.c:1646  */
d2795 2
a2796 2
	   if (strlen((yyvsp[0].string)) > 1) {
	      yyerror(& (yylsp[0]), state, "invalid extended swizzle selector");
d2800 2
a2801 2
	   s = (yyvsp[0].string)[0];
	   free((yyvsp[0].string));
d2843 1
a2843 1
	      yyerror(& (yylsp[0]), state, "invalid extended swizzle selector");
a2847 1
#line 2583 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2851 2
a2852 1
#line 786 "program/program_parse.y" /* yacc.c:1646  */
d2855 1
a2855 1
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[0].string));
d2857 1
a2857 1
	   free((yyvsp[0].string));
d2860 1
a2860 1
	      yyerror(& (yylsp[0]), state, "invalid operand variable");
d2864 1
a2864 1
	      yyerror(& (yylsp[0]), state, "invalid operand variable");
d2867 1
a2867 1
	      yyerror(& (yylsp[0]), state, "non-array access to array PARAM");
d2885 1
a2885 1
	      if (!validate_inputs(& (yylsp[0]), state)) {
a2894 1
#line 2630 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2898 2
a2899 1
#line 829 "program/program_parse.y" /* yacc.c:1646  */
d2901 1
a2901 1
	   set_src_reg(& (yyval.src_reg), PROGRAM_INPUT, (yyvsp[0].attrib));
d2904 1
a2904 1
	   if (!validate_inputs(& (yylsp[0]), state)) {
a2907 1
#line 2643 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2911 2
a2912 1
#line 838 "program/program_parse.y" /* yacc.c:1646  */
d2914 3
a2916 3
	   if (! (yyvsp[-1].src_reg).Base.RelAddr
	       && ((unsigned) (yyvsp[-1].src_reg).Base.Index >= (yyvsp[-3].sym)->param_binding_length)) {
	      yyerror(& (yylsp[-1]), state, "out of bounds array access");
d2921 1
a2921 1
	   (yyval.src_reg).Base.File = (yyvsp[-3].sym)->param_binding_type;
d2923 1
a2923 1
	   if ((yyvsp[-1].src_reg).Base.RelAddr) {
d2925 1
a2925 1
	      (yyvsp[-3].sym)->param_accessed_indirectly = 1;
d2928 2
a2929 2
	      (yyval.src_reg).Base.Index = (yyvsp[-1].src_reg).Base.Index;
	      (yyval.src_reg).Symbol = (yyvsp[-3].sym);
d2931 1
a2931 1
	      (yyval.src_reg).Base.Index = (yyvsp[-3].sym)->param_binding_begin + (yyvsp[-1].src_reg).Base.Index;
a2933 1
#line 2669 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2937 2
a2938 1
#line 860 "program/program_parse.y" /* yacc.c:1646  */
d2940 2
a2941 2
           gl_register_file file = ((yyvsp[0].temp_sym).name != NULL) 
	      ? (yyvsp[0].temp_sym).param_binding_type
d2943 2
a2944 2
           set_src_reg_swz(& (yyval.src_reg), file, (yyvsp[0].temp_sym).param_binding_begin,
                           (yyvsp[0].temp_sym).param_binding_swizzle);
a2945 1
#line 2681 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2949 2
a2950 1
#line 870 "program/program_parse.y" /* yacc.c:1646  */
d2952 1
a2952 1
	   set_dst_reg(& (yyval.dst_reg), PROGRAM_OUTPUT, (yyvsp[0].result));
a2953 1
#line 2689 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2957 2
a2958 1
#line 874 "program/program_parse.y" /* yacc.c:1646  */
d2961 1
a2961 1
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[0].string));
d2963 1
a2963 1
	   free((yyvsp[0].string));
d2966 1
a2966 1
	      yyerror(& (yylsp[0]), state, "invalid operand variable");
d2969 1
a2969 1
	      yyerror(& (yylsp[0]), state, "invalid operand variable");
a2984 1
#line 2720 "./program/program_parse.tab.c" /* yacc.c:1646  */
d2988 2
a2989 1
#line 903 "program/program_parse.y" /* yacc.c:1646  */
d2992 1
a2992 1
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[0].string));
d2994 1
a2994 1
	   free((yyvsp[0].string));
d2997 1
a2997 1
	      yyerror(& (yylsp[0]), state, "invalid operand variable");
d3000 1
a3000 1
	      yyerror(& (yylsp[0]), state, "array access to non-PARAM variable");
a3005 1
#line 2741 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3009 2
a3010 1
#line 924 "program/program_parse.y" /* yacc.c:1646  */
d3013 1
a3013 1
	   (yyval.src_reg).Base.Index = (yyvsp[0].integer);
a3014 1
#line 2750 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3018 2
a3019 1
#line 931 "program/program_parse.y" /* yacc.c:1646  */
d3027 1
a3027 1
	   (yyval.src_reg).Base.Index = (yyvsp[0].integer);
a3028 1
#line 2764 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3032 2
a3033 1
#line 942 "program/program_parse.y" /* yacc.c:1646  */
a3034 1
#line 2770 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3038 3
a3040 3
#line 943 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = (yyvsp[0].integer); }
#line 2776 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3044 3
a3046 3
#line 944 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = -(yyvsp[0].integer); }
#line 2782 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3050 2
a3051 1
#line 948 "program/program_parse.y" /* yacc.c:1646  */
d3053 1
a3053 1
	   if (((yyvsp[0].integer) < 0) || ((yyvsp[0].integer) > (state->limits->MaxAddressOffset - 1))) {
d3056 2
a3057 2
                             "relative address offset too large (%d)", (yyvsp[0].integer));
	      yyerror(& (yylsp[0]), state, s);
d3060 1
a3060 1
	      (yyval.integer) = (yyvsp[0].integer);
a3062 1
#line 2798 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3066 2
a3067 1
#line 962 "program/program_parse.y" /* yacc.c:1646  */
d3069 1
a3069 1
	   if (((yyvsp[0].integer) < 0) || ((yyvsp[0].integer) > state->limits->MaxAddressOffset)) {
d3072 2
a3073 2
                             "relative address offset too large (%d)", (yyvsp[0].integer));
	      yyerror(& (yylsp[0]), state, s);
d3076 1
a3076 1
	      (yyval.integer) = (yyvsp[0].integer);
a3078 1
#line 2814 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3082 2
a3083 1
#line 976 "program/program_parse.y" /* yacc.c:1646  */
d3086 1
a3086 1
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[0].string));
d3088 1
a3088 1
	   free((yyvsp[0].string));
d3091 1
a3091 1
	      yyerror(& (yylsp[0]), state, "invalid array member");
d3094 1
a3094 1
	      yyerror(& (yylsp[0]), state,
a3100 1
#line 2836 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3104 2
a3105 1
#line 996 "program/program_parse.y" /* yacc.c:1646  */
d3107 2
a3108 2
	   if ((yyvsp[0].swiz_mask).mask != WRITEMASK_X) {
	      yyerror(& (yylsp[0]), state, "invalid address component selector");
d3111 1
a3111 1
	      (yyval.swiz_mask) = (yyvsp[0].swiz_mask);
a3113 1
#line 2849 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3117 2
a3118 1
#line 1007 "program/program_parse.y" /* yacc.c:1646  */
d3120 2
a3121 2
	   if ((yyvsp[0].swiz_mask).mask != WRITEMASK_X) {
	      yyerror(& (yylsp[0]), state,
d3125 1
a3125 1
	      (yyval.swiz_mask) = (yyvsp[0].swiz_mask);
a3127 1
#line 2863 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3131 2
a3132 1
#line 1023 "program/program_parse.y" /* yacc.c:1646  */
a3133 1
#line 2869 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3137 2
a3138 1
#line 1027 "program/program_parse.y" /* yacc.c:1646  */
a3139 1
#line 2875 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3143 2
a3144 1
#line 1031 "program/program_parse.y" /* yacc.c:1646  */
d3146 1
a3146 1
	   (yyval.dst_reg) = (yyvsp[-1].dst_reg);
a3147 1
#line 2883 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3151 2
a3152 1
#line 1035 "program/program_parse.y" /* yacc.c:1646  */
d3154 1
a3154 1
	   (yyval.dst_reg) = (yyvsp[-1].dst_reg);
a3155 1
#line 2891 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3159 2
a3160 1
#line 1039 "program/program_parse.y" /* yacc.c:1646  */
a3164 1
#line 2900 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3168 2
a3169 1
#line 1046 "program/program_parse.y" /* yacc.c:1646  */
d3171 2
a3172 2
	   (yyval.dst_reg) = (yyvsp[-1].dst_reg);
	   (yyval.dst_reg).CondSwizzle = (yyvsp[0].swiz_mask).swizzle;
a3173 1
#line 2909 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3177 2
a3178 1
#line 1053 "program/program_parse.y" /* yacc.c:1646  */
d3180 2
a3181 2
	   (yyval.dst_reg) = (yyvsp[-1].dst_reg);
	   (yyval.dst_reg).CondSwizzle = (yyvsp[0].swiz_mask).swizzle;
a3182 1
#line 2918 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3186 2
a3187 1
#line 1060 "program/program_parse.y" /* yacc.c:1646  */
d3189 2
a3190 2
	   const int cond = _mesa_parse_cc((yyvsp[0].string));
	   if ((cond == 0) || ((yyvsp[0].string)[2] != '\0')) {
d3192 1
a3192 1
		 make_error_string("invalid condition code \"%s\"", (yyvsp[0].string));
d3194 1
a3194 1
	      yyerror(& (yylsp[0]), state, (err_str != NULL)
a3206 1
#line 2942 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3210 2
a3211 1
#line 1082 "program/program_parse.y" /* yacc.c:1646  */
d3213 2
a3214 2
	   const int cond = _mesa_parse_cc((yyvsp[0].string));
	   if ((cond == 0) || ((yyvsp[0].string)[2] != '\0')) {
d3216 1
a3216 1
		 make_error_string("invalid condition code \"%s\"", (yyvsp[0].string));
d3218 1
a3218 1
	      yyerror(& (yylsp[0]), state, (err_str != NULL)
a3230 1
#line 2966 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3234 2
a3235 1
#line 1112 "program/program_parse.y" /* yacc.c:1646  */
d3238 1
a3238 1
	      declare_variable(state, (yyvsp[-2].string), at_attrib, & (yylsp[-2]));
d3241 1
a3241 1
	      free((yyvsp[-2].string));
d3244 1
a3244 1
	      s->attrib_binding = (yyvsp[0].attrib);
d3247 1
a3247 1
	      if (!validate_inputs(& (yylsp[0]), state)) {
a3251 1
#line 2987 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3255 2
a3256 1
#line 1131 "program/program_parse.y" /* yacc.c:1646  */
d3258 1
a3258 1
	   (yyval.attrib) = (yyvsp[0].attrib);
a3259 1
#line 2995 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3263 2
a3264 1
#line 1135 "program/program_parse.y" /* yacc.c:1646  */
d3266 1
a3266 1
	   (yyval.attrib) = (yyvsp[0].attrib);
a3267 1
#line 3003 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3271 2
a3272 1
#line 1141 "program/program_parse.y" /* yacc.c:1646  */
a3275 1
#line 3011 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3279 2
a3280 1
#line 1145 "program/program_parse.y" /* yacc.c:1646  */
a3283 1
#line 3019 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3287 2
a3288 1
#line 1149 "program/program_parse.y" /* yacc.c:1646  */
a3291 1
#line 3027 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3295 2
a3296 1
#line 1153 "program/program_parse.y" /* yacc.c:1646  */
d3298 1
a3298 1
	   (yyval.attrib) = VERT_ATTRIB_COLOR0 + (yyvsp[0].integer);
a3299 1
#line 3035 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3303 2
a3304 1
#line 1157 "program/program_parse.y" /* yacc.c:1646  */
a3307 1
#line 3043 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3311 2
a3312 1
#line 1161 "program/program_parse.y" /* yacc.c:1646  */
d3314 1
a3314 1
	   (yyval.attrib) = VERT_ATTRIB_TEX0 + (yyvsp[0].integer);
a3315 1
#line 3051 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3319 2
a3320 1
#line 1165 "program/program_parse.y" /* yacc.c:1646  */
d3322 1
a3322 1
	   yyerror(& (yylsp[-3]), state, "GL_ARB_matrix_palette not supported");
a3324 1
#line 3060 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3328 2
a3329 1
#line 1170 "program/program_parse.y" /* yacc.c:1646  */
d3331 1
a3331 1
	   (yyval.attrib) = VERT_ATTRIB_GENERIC0 + (yyvsp[-1].integer);
a3332 1
#line 3068 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3336 2
a3337 1
#line 1176 "program/program_parse.y" /* yacc.c:1646  */
d3339 2
a3340 2
	   if ((unsigned) (yyvsp[0].integer) >= state->limits->MaxAttribs) {
	      yyerror(& (yylsp[0]), state, "invalid vertex attribute reference");
d3344 1
a3344 1
	   (yyval.integer) = (yyvsp[0].integer);
a3345 1
#line 3081 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3349 2
a3350 1
#line 1190 "program/program_parse.y" /* yacc.c:1646  */
a3353 1
#line 3089 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3357 2
a3358 1
#line 1194 "program/program_parse.y" /* yacc.c:1646  */
d3360 1
a3360 1
	   (yyval.attrib) = VARYING_SLOT_COL0 + (yyvsp[0].integer);
a3361 1
#line 3097 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3365 2
a3366 1
#line 1198 "program/program_parse.y" /* yacc.c:1646  */
a3369 1
#line 3105 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3373 2
a3374 1
#line 1202 "program/program_parse.y" /* yacc.c:1646  */
d3376 1
a3376 1
	   (yyval.attrib) = VARYING_SLOT_TEX0 + (yyvsp[0].integer);
a3377 1
#line 3113 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3381 2
a3382 1
#line 1210 "program/program_parse.y" /* yacc.c:1646  */
d3385 1
a3385 1
	      declare_variable(state, (yyvsp[-1].string), at_param, & (yylsp[-1]));
d3388 1
a3388 1
	      free((yyvsp[-1].string));
d3391 4
a3394 4
	      s->param_binding_type = (yyvsp[0].temp_sym).param_binding_type;
	      s->param_binding_begin = (yyvsp[0].temp_sym).param_binding_begin;
	      s->param_binding_length = (yyvsp[0].temp_sym).param_binding_length;
              s->param_binding_swizzle = (yyvsp[0].temp_sym).param_binding_swizzle;
a3397 1
#line 3133 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3401 2
a3402 1
#line 1228 "program/program_parse.y" /* yacc.c:1646  */
d3404 3
a3406 3
	   if (((yyvsp[-2].integer) != 0) && ((unsigned) (yyvsp[-2].integer) != (yyvsp[0].temp_sym).param_binding_length)) {
	      free((yyvsp[-4].string));
	      yyerror(& (yylsp[-2]), state, 
d3411 1
a3411 1
		 declare_variable(state, (yyvsp[-4].string), (yyvsp[0].temp_sym).type, & (yylsp[-4]));
d3414 1
a3414 1
		 free((yyvsp[-4].string));
d3417 3
a3419 3
		 s->param_binding_type = (yyvsp[0].temp_sym).param_binding_type;
		 s->param_binding_begin = (yyvsp[0].temp_sym).param_binding_begin;
		 s->param_binding_length = (yyvsp[0].temp_sym).param_binding_length;
a3424 1
#line 3160 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3428 2
a3429 1
#line 1253 "program/program_parse.y" /* yacc.c:1646  */
a3432 1
#line 3168 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3436 2
a3437 1
#line 1257 "program/program_parse.y" /* yacc.c:1646  */
d3439 1
a3439 1
	   if (((yyvsp[0].integer) < 1) || ((unsigned) (yyvsp[0].integer) > state->limits->MaxParameters)) {
d3443 2
a3444 2
                             (yyvsp[0].integer), state->limits->MaxParameters);
	      yyerror(& (yylsp[0]), state, msg);
d3447 1
a3447 1
	      (yyval.integer) = (yyvsp[0].integer);
a3449 1
#line 3185 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3453 2
a3454 1
#line 1272 "program/program_parse.y" /* yacc.c:1646  */
d3456 1
a3456 1
	   (yyval.temp_sym) = (yyvsp[0].temp_sym);
a3457 1
#line 3193 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3461 2
a3462 1
#line 1278 "program/program_parse.y" /* yacc.c:1646  */
d3464 1
a3464 1
	   (yyval.temp_sym) = (yyvsp[-1].temp_sym);
a3465 1
#line 3201 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3469 2
a3470 1
#line 1285 "program/program_parse.y" /* yacc.c:1646  */
d3472 2
a3473 2
	   (yyvsp[-2].temp_sym).param_binding_length += (yyvsp[0].temp_sym).param_binding_length;
	   (yyval.temp_sym) = (yyvsp[-2].temp_sym);
a3474 1
#line 3210 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3478 2
a3479 1
#line 1292 "program/program_parse.y" /* yacc.c:1646  */
d3483 1
a3483 1
	   initialize_symbol_from_state(state->prog, & (yyval.temp_sym), (yyvsp[0].state));
a3484 1
#line 3220 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3488 2
a3489 1
#line 1298 "program/program_parse.y" /* yacc.c:1646  */
d3493 1
a3493 1
	   initialize_symbol_from_param(state->prog, & (yyval.temp_sym), (yyvsp[0].state));
a3494 1
#line 3230 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3498 2
a3499 1
#line 1304 "program/program_parse.y" /* yacc.c:1646  */
d3503 1
a3503 1
	   initialize_symbol_from_const(state->prog, & (yyval.temp_sym), & (yyvsp[0].vector), GL_TRUE);
a3504 1
#line 3240 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3508 2
a3509 1
#line 1312 "program/program_parse.y" /* yacc.c:1646  */
d3513 1
a3513 1
	   initialize_symbol_from_state(state->prog, & (yyval.temp_sym), (yyvsp[0].state));
a3514 1
#line 3250 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3518 2
a3519 1
#line 1318 "program/program_parse.y" /* yacc.c:1646  */
d3523 1
a3523 1
	   initialize_symbol_from_param(state->prog, & (yyval.temp_sym), (yyvsp[0].state));
a3524 1
#line 3260 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3528 2
a3529 1
#line 1324 "program/program_parse.y" /* yacc.c:1646  */
d3533 1
a3533 1
	   initialize_symbol_from_const(state->prog, & (yyval.temp_sym), & (yyvsp[0].vector), GL_TRUE);
a3534 1
#line 3270 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3538 2
a3539 1
#line 1332 "program/program_parse.y" /* yacc.c:1646  */
d3543 1
a3543 1
	   initialize_symbol_from_state(state->prog, & (yyval.temp_sym), (yyvsp[0].state));
a3544 1
#line 3280 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3548 2
a3549 1
#line 1338 "program/program_parse.y" /* yacc.c:1646  */
d3553 1
a3553 1
	   initialize_symbol_from_param(state->prog, & (yyval.temp_sym), (yyvsp[0].state));
a3554 1
#line 3290 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3558 2
a3559 1
#line 1344 "program/program_parse.y" /* yacc.c:1646  */
d3563 1
a3563 1
	   initialize_symbol_from_const(state->prog, & (yyval.temp_sym), & (yyvsp[0].vector), GL_FALSE);
a3564 1
#line 3300 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3568 3
a3570 3
#line 1351 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3306 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3574 3
a3576 3
#line 1352 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3312 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3580 3
a3582 3
#line 1355 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3318 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3586 3
a3588 3
#line 1356 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3324 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3592 3
a3594 3
#line 1357 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3330 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3598 3
a3600 3
#line 1358 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3336 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3604 3
a3606 3
#line 1359 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3342 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3610 3
a3612 3
#line 1360 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3348 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3616 3
a3618 3
#line 1361 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3354 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3622 3
a3624 3
#line 1362 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3360 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3628 3
a3630 3
#line 1363 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3366 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3634 3
a3636 3
#line 1364 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3372 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3640 3
a3642 3
#line 1365 "program/program_parse.y" /* yacc.c:1646  */
    { memcpy((yyval.state), (yyvsp[0].state), sizeof((yyval.state))); }
#line 3378 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3646 2
a3647 1
#line 1369 "program/program_parse.y" /* yacc.c:1646  */
d3651 2
a3652 2
	   (yyval.state)[1] = (yyvsp[-1].integer);
	   (yyval.state)[2] = (yyvsp[0].integer);
a3653 1
#line 3389 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3657 2
a3658 1
#line 1378 "program/program_parse.y" /* yacc.c:1646  */
d3660 1
a3660 1
	   (yyval.integer) = (yyvsp[0].integer);
a3661 1
#line 3397 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3665 2
a3666 1
#line 1382 "program/program_parse.y" /* yacc.c:1646  */
a3669 1
#line 3405 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3673 2
a3674 1
#line 1386 "program/program_parse.y" /* yacc.c:1646  */
a3677 1
#line 3413 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3681 2
a3682 1
#line 1392 "program/program_parse.y" /* yacc.c:1646  */
d3686 2
a3687 2
	   (yyval.state)[1] = (yyvsp[-2].integer);
	   (yyval.state)[2] = (yyvsp[0].integer);
a3688 1
#line 3424 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3692 2
a3693 1
#line 1401 "program/program_parse.y" /* yacc.c:1646  */
d3695 1
a3695 1
	   (yyval.integer) = (yyvsp[0].integer);
a3696 1
#line 3432 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3700 2
a3701 1
#line 1405 "program/program_parse.y" /* yacc.c:1646  */
a3704 1
#line 3440 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3708 2
a3709 1
#line 1409 "program/program_parse.y" /* yacc.c:1646  */
d3712 1
a3712 1
	      yyerror(& (yylsp[0]), state, "GL_ARB_point_parameters not supported");
a3717 1
#line 3453 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3721 2
a3722 1
#line 1418 "program/program_parse.y" /* yacc.c:1646  */
d3724 1
a3724 1
	   (yyval.integer) = (yyvsp[0].integer);
a3725 1
#line 3461 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3729 2
a3730 1
#line 1422 "program/program_parse.y" /* yacc.c:1646  */
a3733 1
#line 3469 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3737 2
a3738 1
#line 1428 "program/program_parse.y" /* yacc.c:1646  */
a3741 1
#line 3477 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3745 2
a3746 1
#line 1434 "program/program_parse.y" /* yacc.c:1646  */
d3748 2
a3749 2
	   (yyval.state)[0] = (yyvsp[0].state)[0];
	   (yyval.state)[1] = (yyvsp[0].state)[1];
a3750 1
#line 3486 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3754 2
a3755 1
#line 1441 "program/program_parse.y" /* yacc.c:1646  */
a3759 1
#line 3495 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3763 2
a3764 1
#line 1446 "program/program_parse.y" /* yacc.c:1646  */
d3768 1
a3768 1
	   (yyval.state)[1] = (yyvsp[-1].integer);
a3769 1
#line 3505 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3773 2
a3774 1
#line 1454 "program/program_parse.y" /* yacc.c:1646  */
d3778 3
a3780 3
	   (yyval.state)[1] = (yyvsp[-3].integer);
	   (yyval.state)[2] = (yyvsp[-1].integer);
	   (yyval.state)[3] = (yyvsp[0].integer);
a3781 1
#line 3517 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3785 2
a3786 1
#line 1466 "program/program_parse.y" /* yacc.c:1646  */
d3789 2
a3790 2
	   (yyval.state)[0] = (yyvsp[0].integer);
	   (yyval.state)[1] = (yyvsp[-1].integer);
a3791 1
#line 3527 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3795 2
a3796 1
#line 1474 "program/program_parse.y" /* yacc.c:1646  */
a3799 1
#line 3535 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3803 2
a3804 1
#line 1480 "program/program_parse.y" /* yacc.c:1646  */
a3807 1
#line 3543 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3811 2
a3812 1
#line 1484 "program/program_parse.y" /* yacc.c:1646  */
a3815 1
#line 3551 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3819 2
a3820 1
#line 1488 "program/program_parse.y" /* yacc.c:1646  */
a3823 1
#line 3559 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3827 2
a3828 1
#line 1494 "program/program_parse.y" /* yacc.c:1646  */
d3830 2
a3831 2
	   if ((unsigned) (yyvsp[0].integer) >= state->MaxLights) {
	      yyerror(& (yylsp[0]), state, "invalid light selector");
d3835 1
a3835 1
	   (yyval.integer) = (yyvsp[0].integer);
a3836 1
#line 3572 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3840 2
a3841 1
#line 1505 "program/program_parse.y" /* yacc.c:1646  */
d3845 2
a3846 2
	   (yyval.state)[1] = (yyvsp[-2].integer);
	   (yyval.state)[2] = (yyvsp[-1].integer) + (yyvsp[0].integer);
a3847 1
#line 3583 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3851 2
a3852 1
#line 1514 "program/program_parse.y" /* yacc.c:1646  */
a3855 1
#line 3591 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3859 2
a3860 1
#line 1518 "program/program_parse.y" /* yacc.c:1646  */
a3863 1
#line 3599 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3867 2
a3868 1
#line 1523 "program/program_parse.y" /* yacc.c:1646  */
a3871 1
#line 3607 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3875 2
a3876 1
#line 1527 "program/program_parse.y" /* yacc.c:1646  */
a3879 1
#line 3615 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3883 2
a3884 1
#line 1531 "program/program_parse.y" /* yacc.c:1646  */
a3887 1
#line 3623 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3891 2
a3892 1
#line 1535 "program/program_parse.y" /* yacc.c:1646  */
a3895 1
#line 3631 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3899 2
a3900 1
#line 1541 "program/program_parse.y" /* yacc.c:1646  */
d3903 1
a3903 1
	   (yyval.state)[0] = (yyvsp[0].integer);
a3904 1
#line 3640 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3908 2
a3909 1
#line 1548 "program/program_parse.y" /* yacc.c:1646  */
a3912 1
#line 3648 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3916 2
a3917 1
#line 1552 "program/program_parse.y" /* yacc.c:1646  */
a3920 1
#line 3656 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3924 2
a3925 1
#line 1558 "program/program_parse.y" /* yacc.c:1646  */
d3929 1
a3929 1
	   (yyval.state)[1] = (yyvsp[-2].integer);
a3930 1
#line 3666 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3934 2
a3935 1
#line 1566 "program/program_parse.y" /* yacc.c:1646  */
d3937 2
a3938 2
	   if ((unsigned) (yyvsp[0].integer) >= state->MaxClipPlanes) {
	      yyerror(& (yylsp[0]), state, "invalid clip plane selector");
d3942 1
a3942 1
	   (yyval.integer) = (yyvsp[0].integer);
a3943 1
#line 3679 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3947 2
a3948 1
#line 1577 "program/program_parse.y" /* yacc.c:1646  */
d3951 1
a3951 1
	   (yyval.state)[0] = (yyvsp[0].integer);
a3952 1
#line 3688 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3956 2
a3957 1
#line 1584 "program/program_parse.y" /* yacc.c:1646  */
a3960 1
#line 3696 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3964 2
a3965 1
#line 1588 "program/program_parse.y" /* yacc.c:1646  */
a3968 1
#line 3704 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3972 2
a3973 1
#line 1594 "program/program_parse.y" /* yacc.c:1646  */
d3975 5
a3979 5
	   (yyval.state)[0] = (yyvsp[-4].state)[0];
	   (yyval.state)[1] = (yyvsp[-4].state)[1];
	   (yyval.state)[2] = (yyvsp[-1].integer);
	   (yyval.state)[3] = (yyvsp[-1].integer);
	   (yyval.state)[4] = (yyvsp[-4].state)[2];
a3980 1
#line 3716 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3984 2
a3985 1
#line 1604 "program/program_parse.y" /* yacc.c:1646  */
d3987 5
a3991 5
	   (yyval.state)[0] = (yyvsp[-1].state)[0];
	   (yyval.state)[1] = (yyvsp[-1].state)[1];
	   (yyval.state)[2] = (yyvsp[0].state)[2];
	   (yyval.state)[3] = (yyvsp[0].state)[3];
	   (yyval.state)[4] = (yyvsp[-1].state)[2];
a3992 1
#line 3728 "./program/program_parse.tab.c" /* yacc.c:1646  */
d3996 2
a3997 1
#line 1614 "program/program_parse.y" /* yacc.c:1646  */
a4001 1
#line 3737 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4005 2
a4006 1
#line 1619 "program/program_parse.y" /* yacc.c:1646  */
d4014 2
a4015 2
	   if ((yyvsp[-3].integer) > (yyvsp[-1].integer)) {
	      yyerror(& (yylsp[-3]), state, "invalid matrix row range");
d4019 2
a4020 2
	   (yyval.state)[2] = (yyvsp[-3].integer);
	   (yyval.state)[3] = (yyvsp[-1].integer);
a4021 1
#line 3757 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4025 2
a4026 1
#line 1637 "program/program_parse.y" /* yacc.c:1646  */
d4028 3
a4030 3
	   (yyval.state)[0] = (yyvsp[-1].state)[0];
	   (yyval.state)[1] = (yyvsp[-1].state)[1];
	   (yyval.state)[2] = (yyvsp[0].integer);
a4031 1
#line 3767 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4035 2
a4036 1
#line 1645 "program/program_parse.y" /* yacc.c:1646  */
a4039 1
#line 3775 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4043 2
a4044 1
#line 1649 "program/program_parse.y" /* yacc.c:1646  */
d4046 1
a4046 1
	   (yyval.integer) = (yyvsp[0].integer);
a4047 1
#line 3783 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4051 2
a4052 1
#line 1655 "program/program_parse.y" /* yacc.c:1646  */
a4055 1
#line 3791 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4059 2
a4060 1
#line 1659 "program/program_parse.y" /* yacc.c:1646  */
a4063 1
#line 3799 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4067 2
a4068 1
#line 1663 "program/program_parse.y" /* yacc.c:1646  */
a4071 1
#line 3807 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4075 2
a4076 1
#line 1669 "program/program_parse.y" /* yacc.c:1646  */
d4078 2
a4079 2
	   if ((yyvsp[0].integer) > 3) {
	      yyerror(& (yylsp[0]), state, "invalid matrix row reference");
d4083 1
a4083 1
	   (yyval.integer) = (yyvsp[0].integer);
a4084 1
#line 3820 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4088 2
a4089 1
#line 1680 "program/program_parse.y" /* yacc.c:1646  */
d4092 1
a4092 1
	   (yyval.state)[1] = (yyvsp[0].integer);
a4093 1
#line 3829 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4097 2
a4098 1
#line 1685 "program/program_parse.y" /* yacc.c:1646  */
a4102 1
#line 3838 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4106 2
a4107 1
#line 1690 "program/program_parse.y" /* yacc.c:1646  */
a4111 1
#line 3847 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4115 2
a4116 1
#line 1695 "program/program_parse.y" /* yacc.c:1646  */
d4119 1
a4119 1
	   (yyval.state)[1] = (yyvsp[0].integer);
a4120 1
#line 3856 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4124 2
a4125 1
#line 1700 "program/program_parse.y" /* yacc.c:1646  */
d4127 1
a4127 1
	   yyerror(& (yylsp[-3]), state, "GL_ARB_matrix_palette not supported");
a4129 1
#line 3865 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4133 2
a4134 1
#line 1705 "program/program_parse.y" /* yacc.c:1646  */
d4137 1
a4137 1
	   (yyval.state)[1] = (yyvsp[-1].integer);
a4138 1
#line 3874 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4142 2
a4143 1
#line 1712 "program/program_parse.y" /* yacc.c:1646  */
a4146 1
#line 3882 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4150 2
a4151 1
#line 1716 "program/program_parse.y" /* yacc.c:1646  */
d4153 1
a4153 1
	   (yyval.integer) = (yyvsp[-1].integer);
a4154 1
#line 3890 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4158 2
a4159 1
#line 1721 "program/program_parse.y" /* yacc.c:1646  */
d4164 2
a4165 2
	   if ((yyvsp[0].integer) != 0) {
	      yyerror(& (yylsp[0]), state, "invalid modelview matrix index");
d4169 1
a4169 1
	   (yyval.integer) = (yyvsp[0].integer);
a4170 1
#line 3906 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4174 2
a4175 1
#line 1734 "program/program_parse.y" /* yacc.c:1646  */
d4180 1
a4180 1
	   (yyval.integer) = (yyvsp[0].integer);
a4181 1
#line 3917 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4185 2
a4186 1
#line 1742 "program/program_parse.y" /* yacc.c:1646  */
d4188 2
a4189 2
	   if ((unsigned) (yyvsp[0].integer) >= state->MaxProgramMatrices) {
	      yyerror(& (yylsp[0]), state, "invalid program matrix selector");
d4193 1
a4193 1
	   (yyval.integer) = (yyvsp[0].integer);
a4194 1
#line 3930 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4198 2
a4199 1
#line 1753 "program/program_parse.y" /* yacc.c:1646  */
a4203 1
#line 3939 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4207 2
a4208 1
#line 1765 "program/program_parse.y" /* yacc.c:1646  */
d4213 2
a4214 2
	   (yyval.state)[2] = (yyvsp[-1].state)[0];
	   (yyval.state)[3] = (yyvsp[-1].state)[1];
a4215 1
#line 3951 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4219 2
a4220 1
#line 1775 "program/program_parse.y" /* yacc.c:1646  */
d4222 2
a4223 2
	   (yyval.state)[0] = (yyvsp[0].integer);
	   (yyval.state)[1] = (yyvsp[0].integer);
a4224 1
#line 3960 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4228 2
a4229 1
#line 1780 "program/program_parse.y" /* yacc.c:1646  */
d4231 2
a4232 2
	   (yyval.state)[0] = (yyvsp[-2].integer);
	   (yyval.state)[1] = (yyvsp[0].integer);
a4233 1
#line 3969 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4237 2
a4238 1
#line 1787 "program/program_parse.y" /* yacc.c:1646  */
d4243 2
a4244 2
	   (yyval.state)[2] = (yyvsp[-1].integer);
	   (yyval.state)[3] = (yyvsp[-1].integer);
a4245 1
#line 3981 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4249 2
a4250 1
#line 1797 "program/program_parse.y" /* yacc.c:1646  */
d4255 2
a4256 2
	   (yyval.state)[2] = (yyvsp[-1].state)[0];
	   (yyval.state)[3] = (yyvsp[-1].state)[1];
a4257 1
#line 3993 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4261 2
a4262 1
#line 1806 "program/program_parse.y" /* yacc.c:1646  */
d4264 2
a4265 2
	   (yyval.state)[0] = (yyvsp[0].integer);
	   (yyval.state)[1] = (yyvsp[0].integer);
a4266 1
#line 4002 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4270 2
a4271 1
#line 1811 "program/program_parse.y" /* yacc.c:1646  */
d4273 2
a4274 2
	   (yyval.state)[0] = (yyvsp[-2].integer);
	   (yyval.state)[1] = (yyvsp[0].integer);
a4275 1
#line 4011 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4279 2
a4280 1
#line 1818 "program/program_parse.y" /* yacc.c:1646  */
d4285 2
a4286 2
	   (yyval.state)[2] = (yyvsp[-1].integer);
	   (yyval.state)[3] = (yyvsp[-1].integer);
a4287 1
#line 4023 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4291 2
a4292 1
#line 1828 "program/program_parse.y" /* yacc.c:1646  */
d4294 2
a4295 2
	   if ((unsigned) (yyvsp[0].integer) >= state->limits->MaxEnvParams) {
	      yyerror(& (yylsp[0]), state, "invalid environment parameter reference");
d4298 1
a4298 1
	   (yyval.integer) = (yyvsp[0].integer);
a4299 1
#line 4035 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4303 2
a4304 1
#line 1838 "program/program_parse.y" /* yacc.c:1646  */
d4306 2
a4307 2
	   if ((unsigned) (yyvsp[0].integer) >= state->limits->MaxLocalParams) {
	      yyerror(& (yylsp[0]), state, "invalid local parameter reference");
d4310 1
a4310 1
	   (yyval.integer) = (yyvsp[0].integer);
a4311 1
#line 4047 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4315 2
a4316 1
#line 1853 "program/program_parse.y" /* yacc.c:1646  */
d4319 4
a4322 4
	   (yyval.vector).data[0].f = (yyvsp[0].real);
	   (yyval.vector).data[1].f = (yyvsp[0].real);
	   (yyval.vector).data[2].f = (yyvsp[0].real);
	   (yyval.vector).data[3].f = (yyvsp[0].real);
a4323 1
#line 4059 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4327 2
a4328 1
#line 1863 "program/program_parse.y" /* yacc.c:1646  */
d4331 4
a4334 4
	   (yyval.vector).data[0].f = (yyvsp[0].real);
	   (yyval.vector).data[1].f = (yyvsp[0].real);
	   (yyval.vector).data[2].f = (yyvsp[0].real);
	   (yyval.vector).data[3].f = (yyvsp[0].real);
a4335 1
#line 4071 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4339 2
a4340 1
#line 1871 "program/program_parse.y" /* yacc.c:1646  */
d4343 4
a4346 4
	   (yyval.vector).data[0].f = (float) (yyvsp[0].integer);
	   (yyval.vector).data[1].f = (float) (yyvsp[0].integer);
	   (yyval.vector).data[2].f = (float) (yyvsp[0].integer);
	   (yyval.vector).data[3].f = (float) (yyvsp[0].integer);
a4347 1
#line 4083 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4351 2
a4352 1
#line 1881 "program/program_parse.y" /* yacc.c:1646  */
d4355 1
a4355 1
	   (yyval.vector).data[0].f = (yyvsp[-1].real);
a4359 1
#line 4095 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4363 2
a4364 1
#line 1889 "program/program_parse.y" /* yacc.c:1646  */
d4367 2
a4368 2
	   (yyval.vector).data[0].f = (yyvsp[-3].real);
	   (yyval.vector).data[1].f = (yyvsp[-1].real);
a4371 1
#line 4107 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4375 2
a4376 1
#line 1898 "program/program_parse.y" /* yacc.c:1646  */
d4379 3
a4381 3
	   (yyval.vector).data[0].f = (yyvsp[-5].real);
	   (yyval.vector).data[1].f = (yyvsp[-3].real);
	   (yyval.vector).data[2].f = (yyvsp[-1].real);
a4383 1
#line 4119 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4387 2
a4388 1
#line 1907 "program/program_parse.y" /* yacc.c:1646  */
d4391 4
a4394 4
	   (yyval.vector).data[0].f = (yyvsp[-7].real);
	   (yyval.vector).data[1].f = (yyvsp[-5].real);
	   (yyval.vector).data[2].f = (yyvsp[-3].real);
	   (yyval.vector).data[3].f = (yyvsp[-1].real);
a4395 1
#line 4131 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4399 2
a4400 1
#line 1917 "program/program_parse.y" /* yacc.c:1646  */
d4402 1
a4402 1
	   (yyval.real) = ((yyvsp[-1].negate)) ? -(yyvsp[0].real) : (yyvsp[0].real);
a4403 1
#line 4139 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4407 2
a4408 1
#line 1921 "program/program_parse.y" /* yacc.c:1646  */
d4410 1
a4410 1
	   (yyval.real) = (float)(((yyvsp[-1].negate)) ? -(yyvsp[0].integer) : (yyvsp[0].integer));
a4411 1
#line 4147 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4415 2
a4416 1
#line 1926 "program/program_parse.y" /* yacc.c:1646  */
a4417 1
#line 4153 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4421 2
a4422 1
#line 1927 "program/program_parse.y" /* yacc.c:1646  */
a4423 1
#line 4159 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4427 2
a4428 1
#line 1928 "program/program_parse.y" /* yacc.c:1646  */
a4429 1
#line 4165 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4433 3
a4435 3
#line 1931 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = (yyvsp[0].integer); }
#line 4171 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4439 2
a4440 1
#line 1935 "program/program_parse.y" /* yacc.c:1646  */
d4453 1
a4453 1
	      yyerror(& (yylsp[0]), state, "unexpected IDENTIFIER");
d4457 2
a4458 2
	   if (strcmp("SHORT", (yyvsp[0].string)) == 0) {
	   } else if (strcmp("LONG", (yyvsp[0].string)) == 0) {
d4462 1
a4462 1
				   (yyvsp[0].string));
d4464 1
a4464 1
	      yyerror(& (yylsp[0]), state, (err_str != NULL)
a4473 1
#line 4209 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4477 2
a4478 1
#line 1969 "program/program_parse.y" /* yacc.c:1646  */
a4480 1
#line 4216 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4484 3
a4486 3
#line 1973 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = (yyvsp[0].integer); }
#line 4222 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4490 2
a4491 1
#line 1977 "program/program_parse.y" /* yacc.c:1646  */
d4493 2
a4494 2
	   if (!declare_variable(state, (yyvsp[0].string), (yyvsp[-3].integer), & (yylsp[0]))) {
	      free((yyvsp[0].string));
a4497 1
#line 4233 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4501 2
a4502 1
#line 1984 "program/program_parse.y" /* yacc.c:1646  */
d4504 2
a4505 2
	   if (!declare_variable(state, (yyvsp[0].string), (yyvsp[-1].integer), & (yylsp[0]))) {
	      free((yyvsp[0].string));
a4508 1
#line 4244 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4512 2
a4513 1
#line 1993 "program/program_parse.y" /* yacc.c:1646  */
d4516 1
a4516 1
	      declare_variable(state, (yyvsp[-2].string), at_output, & (yylsp[-2]));
d4519 1
a4519 1
	      free((yyvsp[-2].string));
d4522 1
a4522 1
	      s->output_binding = (yyvsp[0].result);
a4524 1
#line 4260 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4528 2
a4529 1
#line 2007 "program/program_parse.y" /* yacc.c:1646  */
d4534 1
a4534 1
	      yyerror(& (yylsp[0]), state, "invalid program result name");
a4537 1
#line 4273 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4541 2
a4542 1
#line 2016 "program/program_parse.y" /* yacc.c:1646  */
d4547 1
a4547 1
	      yyerror(& (yylsp[0]), state, "invalid program result name");
a4550 1
#line 4286 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4554 2
a4555 1
#line 2025 "program/program_parse.y" /* yacc.c:1646  */
d4557 1
a4557 1
	   (yyval.result) = (yyvsp[0].result);
a4558 1
#line 4294 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4562 2
a4563 1
#line 2029 "program/program_parse.y" /* yacc.c:1646  */
d4568 1
a4568 1
	      yyerror(& (yylsp[0]), state, "invalid program result name");
a4571 1
#line 4307 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4575 2
a4576 1
#line 2038 "program/program_parse.y" /* yacc.c:1646  */
d4579 1
a4579 1
	      (yyval.result) = VARYING_SLOT_TEX0 + (yyvsp[0].integer);
d4581 1
a4581 1
	      yyerror(& (yylsp[-1]), state, "invalid program result name");
a4584 1
#line 4320 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4588 2
a4589 1
#line 2047 "program/program_parse.y" /* yacc.c:1646  */
d4594 1
a4594 1
	      yyerror(& (yylsp[0]), state, "invalid program result name");
a4597 1
#line 4333 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4601 2
a4602 1
#line 2058 "program/program_parse.y" /* yacc.c:1646  */
d4604 1
a4604 1
	   (yyval.result) = (yyvsp[-1].integer) + (yyvsp[0].integer);
a4605 1
#line 4341 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4609 2
a4610 1
#line 2064 "program/program_parse.y" /* yacc.c:1646  */
a4620 1
#line 4356 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4624 2
a4625 1
#line 2075 "program/program_parse.y" /* yacc.c:1646  */
d4628 1
a4628 1
	      yyerror(& (yylsp[-2]), state, "invalid program result name");
d4640 1
a4640 1
		 yyerror(& (yylsp[-2]), state,
d4645 2
a4646 2
	      } else if ((yyvsp[-1].integer) >= state->MaxDrawBuffers) {
		 yyerror(& (yylsp[-2]), state,
d4650 1
a4650 1
	      (yyval.integer) = FRAG_RESULT_DATA0 + (yyvsp[-1].integer);
a4652 1
#line 4388 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4656 2
a4657 1
#line 2103 "program/program_parse.y" /* yacc.c:1646  */
d4662 1
a4662 1
	      yyerror(& (yylsp[0]), state, "invalid program result name");
a4665 1
#line 4401 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4669 2
a4670 1
#line 2112 "program/program_parse.y" /* yacc.c:1646  */
d4675 1
a4675 1
	      yyerror(& (yylsp[0]), state, "invalid program result name");
a4678 1
#line 4414 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4682 2
a4683 1
#line 2123 "program/program_parse.y" /* yacc.c:1646  */
a4686 1
#line 4422 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4690 2
a4691 1
#line 2127 "program/program_parse.y" /* yacc.c:1646  */
d4696 1
a4696 1
	      yyerror(& (yylsp[0]), state, "invalid program result name");
a4699 1
#line 4435 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4703 2
a4704 1
#line 2136 "program/program_parse.y" /* yacc.c:1646  */
d4709 1
a4709 1
	      yyerror(& (yylsp[0]), state, "invalid program result name");
a4712 1
#line 4448 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4716 2
a4717 1
#line 2146 "program/program_parse.y" /* yacc.c:1646  */
a4718 1
#line 4454 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4722 2
a4723 1
#line 2147 "program/program_parse.y" /* yacc.c:1646  */
a4724 1
#line 4460 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4728 2
a4729 1
#line 2148 "program/program_parse.y" /* yacc.c:1646  */
a4730 1
#line 4466 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4734 2
a4735 1
#line 2151 "program/program_parse.y" /* yacc.c:1646  */
a4736 1
#line 4472 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4740 2
a4741 1
#line 2152 "program/program_parse.y" /* yacc.c:1646  */
a4742 1
#line 4478 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4746 2
a4747 1
#line 2153 "program/program_parse.y" /* yacc.c:1646  */
a4748 1
#line 4484 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4752 2
a4753 1
#line 2156 "program/program_parse.y" /* yacc.c:1646  */
a4754 1
#line 4490 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4758 3
a4760 3
#line 2157 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = (yyvsp[-1].integer); }
#line 4496 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4764 2
a4765 1
#line 2160 "program/program_parse.y" /* yacc.c:1646  */
a4766 1
#line 4502 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4770 3
a4772 3
#line 2161 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = (yyvsp[-1].integer); }
#line 4508 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4776 2
a4777 1
#line 2164 "program/program_parse.y" /* yacc.c:1646  */
a4778 1
#line 4514 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4782 3
a4784 3
#line 2165 "program/program_parse.y" /* yacc.c:1646  */
    { (yyval.integer) = (yyvsp[-1].integer); }
#line 4520 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4788 2
a4789 1
#line 2169 "program/program_parse.y" /* yacc.c:1646  */
d4791 2
a4792 2
	   if ((unsigned) (yyvsp[0].integer) >= state->MaxTextureCoordUnits) {
	      yyerror(& (yylsp[0]), state, "invalid texture coordinate unit selector");
d4796 1
a4796 1
	   (yyval.integer) = (yyvsp[0].integer);
a4797 1
#line 4533 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4801 2
a4802 1
#line 2180 "program/program_parse.y" /* yacc.c:1646  */
d4804 2
a4805 2
	   if ((unsigned) (yyvsp[0].integer) >= state->MaxTextureImageUnits) {
	      yyerror(& (yylsp[0]), state, "invalid texture image unit selector");
d4809 1
a4809 1
	   (yyval.integer) = (yyvsp[0].integer);
a4810 1
#line 4546 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4814 2
a4815 1
#line 2191 "program/program_parse.y" /* yacc.c:1646  */
d4817 2
a4818 2
	   if ((unsigned) (yyvsp[0].integer) >= state->MaxTextureUnits) {
	      yyerror(& (yylsp[0]), state, "invalid texture unit selector");
d4822 1
a4822 1
	   (yyval.integer) = (yyvsp[0].integer);
a4823 1
#line 4559 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4827 2
a4828 1
#line 2202 "program/program_parse.y" /* yacc.c:1646  */
d4831 1
a4831 1
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[-2].string));
d4833 1
a4833 1
	      _mesa_symbol_table_find_symbol(state->st, 0, (yyvsp[0].string));
d4835 1
a4835 1
	   free((yyvsp[0].string));
d4839 3
a4841 3
	      _mesa_snprintf(m, sizeof(m), "redeclared identifier: %s", (yyvsp[-2].string));
	      free((yyvsp[-2].string));
	      yyerror(& (yylsp[-2]), state, m);
d4844 2
a4845 2
	      free((yyvsp[-2].string));
	      yyerror(& (yylsp[0]), state,
d4849 1
a4849 1
	      _mesa_symbol_table_add_symbol(state->st, 0, (yyvsp[-2].string), target);
a4851 1
#line 4587 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4855 2
a4856 1
#line 4591 "./program/program_parse.tab.c" /* yacc.c:1646  */
d4879 1
a4879 1
  /* Now 'shift' the result of the reduction.  Determine what state
d4894 3
a4896 3
/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
d4947 1
a4947 1
         error, discard it.  */
d4950 5
a4954 5
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
d4956 5
a4960 5
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, state);
          yychar = YYEMPTY;
        }
d4980 1
a4980 1
  /* Do not reclaim the symbols of the rule whose action triggered
d4993 1
a4993 1
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */
d4999 9
a5007 9
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }
d5011 1
a5011 1
        YYABORT;
d5015 1
a5015 1
                  yystos[yystate], yyvsp, yylsp, state);
d5071 1
a5071 1
  /* Do not reclaim the symbols of the rule whose action triggered
d5078 1
a5078 1
                  yystos[*yyssp], yyvsp, yylsp, state);
d5089 2
a5090 1
  return yyresult;
d5092 4
a5095 1
#line 2231 "program/program_parse.y" /* yacc.c:1906  */
d5575 2
a5576 2
      ? & ctx->Const.Program[MESA_SHADER_VERTEX]
      : & ctx->Const.Program[MESA_SHADER_FRAGMENT];
d5578 1
a5578 1
   state->MaxTextureImageUnits = ctx->Const.Program[MESA_SHADER_FRAGMENT].MaxTextureImageUnits;
a5616 5

   if (state->prog->Instructions == NULL) {
      goto error;
   }

@


