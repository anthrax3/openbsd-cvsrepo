head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	4ry2gvZGMXkCUD2n;

1.4
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.3;
commitid	mcxB0JvoI9gTDYXU;

1.3
date	2013.09.05.14.06.36;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.06;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2015.01.25.14.13.08;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.50.15;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#define DEBUG_PARSING 0

/**
 * \file arbprogparse.c
 * ARB_*_program parser core
 * \author Karl Rasche
 */

/**
Notes on program parameters, etc.

The instructions we emit will use six kinds of source registers:

  PROGRAM_INPUT      - input registers
  PROGRAM_TEMPORARY  - temp registers
  PROGRAM_ADDRESS    - address/indirect register
  PROGRAM_SAMPLER    - texture sampler
  PROGRAM_CONSTANT   - indexes into program->Parameters, a known constant/literal
  PROGRAM_STATE_VAR  - indexes into program->Parameters, and may actually be:
                       + a state variable, like "state.fog.color", or
                       + a pointer to a "program.local[k]" parameter, or
                       + a pointer to a "program.env[k]" parameter

Basically, all the program.local[] and program.env[] values will get mapped
into the unified gl_program->Parameters array.  This solves the problem of
having three separate program parameter arrays.
*/


#include "main/glheader.h"
#include "main/imports.h"
#include "main/context.h"
#include "main/mtypes.h"
#include "arbprogparse.h"
#include "programopt.h"
#include "prog_parameter.h"
#include "prog_statevars.h"
#include "prog_instruction.h"
#include "program_parser.h"


void
_mesa_parse_arb_fragment_program(struct gl_context* ctx, GLenum target,
                                 const GLvoid *str, GLsizei len,
                                 struct gl_fragment_program *program)
{
   struct gl_program prog;
   struct asm_parser_state state;
   GLuint i;

   ASSERT(target == GL_FRAGMENT_PROGRAM_ARB);

   memset(&prog, 0, sizeof(prog));
   memset(&state, 0, sizeof(state));
   state.prog = &prog;

   if (!_mesa_parse_arb_program(ctx, target, (const GLubyte*) str, len,
				&state)) {
      /* Error in the program. Just return. */
      return;
   }

   free(program->Base.String);

   /* Copy the relevant contents of the arb_program struct into the
    * fragment_program struct.
    */
   program->Base.String          = prog.String;
   program->Base.NumInstructions = prog.NumInstructions;
   program->Base.NumTemporaries  = prog.NumTemporaries;
   program->Base.NumParameters   = prog.NumParameters;
   program->Base.NumAttributes   = prog.NumAttributes;
   program->Base.NumAddressRegs  = prog.NumAddressRegs;
   program->Base.NumNativeInstructions = prog.NumNativeInstructions;
   program->Base.NumNativeTemporaries = prog.NumNativeTemporaries;
   program->Base.NumNativeParameters = prog.NumNativeParameters;
   program->Base.NumNativeAttributes = prog.NumNativeAttributes;
   program->Base.NumNativeAddressRegs = prog.NumNativeAddressRegs;
   program->Base.NumAluInstructions   = prog.NumAluInstructions;
   program->Base.NumTexInstructions   = prog.NumTexInstructions;
   program->Base.NumTexIndirections   = prog.NumTexIndirections;
   program->Base.NumNativeAluInstructions = prog.NumAluInstructions;
   program->Base.NumNativeTexInstructions = prog.NumTexInstructions;
   program->Base.NumNativeTexIndirections = prog.NumTexIndirections;
   program->Base.InputsRead      = prog.InputsRead;
   program->Base.OutputsWritten  = prog.OutputsWritten;
   program->Base.IndirectRegisterFiles = prog.IndirectRegisterFiles;
   for (i = 0; i < MAX_TEXTURE_IMAGE_UNITS; i++) {
      program->Base.TexturesUsed[i] = prog.TexturesUsed[i];
      if (prog.TexturesUsed[i])
         program->Base.SamplersUsed |= (1 << i);
   }
   program->Base.ShadowSamplers = prog.ShadowSamplers;
   program->OriginUpperLeft = state.option.OriginUpperLeft;
   program->PixelCenterInteger = state.option.PixelCenterInteger;

   program->UsesKill            = state.fragment.UsesKill;
   program->UsesDFdy            = state.fragment.UsesDFdy;

   free(program->Base.Instructions);
   program->Base.Instructions = prog.Instructions;

   if (program->Base.Parameters)
      _mesa_free_parameter_list(program->Base.Parameters);
   program->Base.Parameters    = prog.Parameters;

   /* Append fog instructions now if the program has "OPTION ARB_fog_exp"
    * or similar.  We used to leave this up to drivers, but it appears
    * there's no hardware that wants to do fog in a discrete stage separate
    * from the fragment shader.
    */
   if (state.option.Fog != OPTION_NONE) {
      static const GLenum fog_modes[4] = {
	 GL_NONE, GL_EXP, GL_EXP2, GL_LINEAR
      };

      /* XXX: we should somehow recompile this to remove clamping if disabled
       * On the ATI driver, this is unclampled if fragment clamping is disabled
       */
      _mesa_append_fog_code(ctx, program, fog_modes[state.option.Fog], GL_TRUE);
   }

#if DEBUG_FP
   printf("____________Fragment program %u ________\n", program->Base.Id);
   _mesa_print_program(&program->Base);
#endif
}



/**
 * Parse the vertex program string.  If success, update the given
 * vertex_program object with the new program.  Else, leave the vertex_program
 * object unchanged.
 */
void
_mesa_parse_arb_vertex_program(struct gl_context *ctx, GLenum target,
			       const GLvoid *str, GLsizei len,
			       struct gl_vertex_program *program)
{
   struct gl_program prog;
   struct asm_parser_state state;

   ASSERT(target == GL_VERTEX_PROGRAM_ARB);

   memset(&prog, 0, sizeof(prog));
   memset(&state, 0, sizeof(state));
   state.prog = &prog;

   if (!_mesa_parse_arb_program(ctx, target, (const GLubyte*) str, len,
				&state)) {
      _mesa_error(ctx, GL_INVALID_OPERATION, "glProgramString(bad program)");
      return;
   }

   free(program->Base.String);

   /* Copy the relevant contents of the arb_program struct into the 
    * vertex_program struct.
    */
   program->Base.String          = prog.String;
   program->Base.NumInstructions = prog.NumInstructions;
   program->Base.NumTemporaries  = prog.NumTemporaries;
   program->Base.NumParameters   = prog.NumParameters;
   program->Base.NumAttributes   = prog.NumAttributes;
   program->Base.NumAddressRegs  = prog.NumAddressRegs;
   program->Base.NumNativeInstructions = prog.NumNativeInstructions;
   program->Base.NumNativeTemporaries = prog.NumNativeTemporaries;
   program->Base.NumNativeParameters = prog.NumNativeParameters;
   program->Base.NumNativeAttributes = prog.NumNativeAttributes;
   program->Base.NumNativeAddressRegs = prog.NumNativeAddressRegs;
   program->Base.InputsRead     = prog.InputsRead;
   program->Base.OutputsWritten = prog.OutputsWritten;
   program->Base.IndirectRegisterFiles = prog.IndirectRegisterFiles;
   program->IsPositionInvariant = (state.option.PositionInvariant)
      ? GL_TRUE : GL_FALSE;

   free(program->Base.Instructions);
   program->Base.Instructions = prog.Instructions;

   if (program->Base.Parameters)
      _mesa_free_parameter_list(program->Base.Parameters);
   program->Base.Parameters = prog.Parameters; 

#if DEBUG_VP
   printf("____________Vertex program %u __________\n", program->Base.Id);
   _mesa_print_program(&program->Base);
#endif
}
@


1.5
log
@Merge Mesa 10.2.9
@
text
@@


1.4
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a62 1
#include "prog_optimize.h"
a86 3
   if ((ctx->_Shader->Flags & GLSL_NO_OPT) == 0)
      _mesa_optimize_program(ctx, &prog);

a178 3

   if ((ctx->_Shader->Flags & GLSL_NO_OPT) == 0)
      _mesa_optimize_program(ctx, &prog);
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d63 1
d88 3
d183 3
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  7.1
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d87 1
a87 2
   if (program->Base.String != NULL)
      free(program->Base.String);
d122 1
d124 1
a124 2
   if (program->Base.Instructions)
      free(program->Base.Instructions);
d180 1
a180 2
   if (program->Base.String != NULL)
      free(program->Base.String);
d202 1
a202 2
   if (program->Base.Instructions)
      free(program->Base.Instructions);
@


1.1
log
@Initial revision
@
text
@a118 6
   switch (state.option.Fog) {
   case OPTION_FOG_EXP:    program->FogOption = GL_EXP;    break;
   case OPTION_FOG_EXP2:   program->FogOption = GL_EXP2;   break;
   case OPTION_FOG_LINEAR: program->FogOption = GL_LINEAR; break;
   default:                program->FogOption = GL_NONE;   break;
   }
a123 3
   if (program->FogOption)
      program->Base.InputsRead |= FRAG_BIT_FOGC;

d137 9
a145 3
   if (program->FogOption != GL_NONE) {
      _mesa_append_fog_code(ctx, program);
      program->FogOption = GL_NONE;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d87 2
a88 1
   free(program->Base.String);
d119 6
a128 1
   program->UsesDFdy            = state.fragment.UsesDFdy;
d130 5
a134 1
   free(program->Base.Instructions);
d146 3
a148 9
   if (state.option.Fog != OPTION_NONE) {
      static const GLenum fog_modes[4] = {
	 GL_NONE, GL_EXP, GL_EXP2, GL_LINEAR
      };

      /* XXX: we should somehow recompile this to remove clamping if disabled
       * On the ATI driver, this is unclampled if fragment clamping is disabled
       */
      _mesa_append_fog_code(ctx, program, fog_modes[state.option.Fog], GL_TRUE);
d184 2
a185 1
   free(program->Base.String);
d207 2
a208 1
   free(program->Base.Instructions);
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@a62 1
#include "prog_optimize.h"
a86 3
   if ((ctx->_Shader->Flags & GLSL_NO_OPT) == 0)
      _mesa_optimize_program(ctx, &prog);

a178 3

   if ((ctx->_Shader->Flags & GLSL_NO_OPT) == 0)
      _mesa_optimize_program(ctx, &prog);
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d63 1
d88 3
d183 3
@


