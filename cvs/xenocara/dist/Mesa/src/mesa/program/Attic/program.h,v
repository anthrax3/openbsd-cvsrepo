head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.4
	OPENBSD_5_7_BASE:1.1.1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.2
	OPENBSD_5_6_BASE:1.1.1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.1.1.2.0.2
	OPENBSD_5_5_BASE:1.1.1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.10;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.09;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  6.5.3
 *
 * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * \file program.c
 * Vertex and fragment program support functions.
 * \author Brian Paul
 */


/**
 * \mainpage Mesa vertex and fragment program module
 *
 * This module or directory contains most of the code for vertex and
 * fragment programs and shaders, including state management, parsers,
 * and (some) software routines for executing programs
 */

#ifndef PROGRAM_H
#define PROGRAM_H

#include "main/compiler.h"
#include "main/mtypes.h"


extern struct gl_program _mesa_DummyProgram;


extern void
_mesa_init_program(struct gl_context *ctx);

extern void
_mesa_free_program_data(struct gl_context *ctx);

extern void
_mesa_update_default_objects_program(struct gl_context *ctx);

extern void
_mesa_set_program_error(struct gl_context *ctx, GLint pos, const char *string);

extern const GLubyte *
_mesa_find_line_column(const GLubyte *string, const GLubyte *pos,
                       GLint *line, GLint *col);


extern struct gl_program *
_mesa_init_vertex_program(struct gl_context *ctx,
                          struct gl_vertex_program *prog,
                          GLenum target, GLuint id);

extern struct gl_program *
_mesa_init_fragment_program(struct gl_context *ctx,
                            struct gl_fragment_program *prog,
                            GLenum target, GLuint id);

extern struct gl_program *
_mesa_init_geometry_program(struct gl_context *ctx,
                            struct gl_geometry_program *prog,
                            GLenum target, GLuint id);

extern struct gl_program *
_mesa_new_program(struct gl_context *ctx, GLenum target, GLuint id);

extern void
_mesa_delete_program(struct gl_context *ctx, struct gl_program *prog);

extern struct gl_program *
_mesa_lookup_program(struct gl_context *ctx, GLuint id);

extern void
_mesa_reference_program(struct gl_context *ctx,
                        struct gl_program **ptr,
                        struct gl_program *prog);

static INLINE void
_mesa_reference_vertprog(struct gl_context *ctx,
                         struct gl_vertex_program **ptr,
                         struct gl_vertex_program *prog)
{
   _mesa_reference_program(ctx, (struct gl_program **) ptr,
                           (struct gl_program *) prog);
}

static INLINE void
_mesa_reference_fragprog(struct gl_context *ctx,
                         struct gl_fragment_program **ptr,
                         struct gl_fragment_program *prog)
{
   _mesa_reference_program(ctx, (struct gl_program **) ptr,
                           (struct gl_program *) prog);
}

static INLINE void
_mesa_reference_geomprog(struct gl_context *ctx,
                         struct gl_geometry_program **ptr,
                         struct gl_geometry_program *prog)
{
   _mesa_reference_program(ctx, (struct gl_program **) ptr,
                           (struct gl_program *) prog);
}

extern struct gl_program *
_mesa_clone_program(struct gl_context *ctx, const struct gl_program *prog);

static INLINE struct gl_vertex_program *
_mesa_clone_vertex_program(struct gl_context *ctx,
                           const struct gl_vertex_program *prog)
{
   return (struct gl_vertex_program *) _mesa_clone_program(ctx, &prog->Base);
}

static INLINE struct gl_geometry_program *
_mesa_clone_geometry_program(struct gl_context *ctx,
                             const struct gl_geometry_program *prog)
{
   return (struct gl_geometry_program *) _mesa_clone_program(ctx, &prog->Base);
}

static INLINE struct gl_fragment_program *
_mesa_clone_fragment_program(struct gl_context *ctx,
                             const struct gl_fragment_program *prog)
{
   return (struct gl_fragment_program *) _mesa_clone_program(ctx, &prog->Base);
}


extern  GLboolean
_mesa_insert_instructions(struct gl_program *prog, GLuint start, GLuint count);

extern  GLboolean
_mesa_delete_instructions(struct gl_program *prog, GLuint start, GLuint count);

extern struct gl_program *
_mesa_combine_programs(struct gl_context *ctx,
                       const struct gl_program *progA,
                       const struct gl_program *progB);

extern void
_mesa_find_used_registers(const struct gl_program *prog,
                          gl_register_file file,
                          GLboolean used[], GLuint usedSize);

extern GLint
_mesa_find_free_register(const GLboolean used[],
                         GLuint maxRegs, GLuint firstReg);


extern GLboolean
_mesa_valid_register_index(const struct gl_context *ctx,
                           gl_shader_type shaderType,
                           gl_register_file file, GLint index);

extern void
_mesa_postprocess_program(struct gl_context *ctx, struct gl_program *prog);

/* keep these in the same order as TGSI_PROCESSOR_* */

static INLINE GLuint
_mesa_program_target_to_index(GLenum v)
{
   switch(v)
   {
   case GL_VERTEX_PROGRAM_ARB:
      return MESA_SHADER_VERTEX;
   case GL_FRAGMENT_PROGRAM_ARB:
      return MESA_SHADER_FRAGMENT;
   case GL_GEOMETRY_PROGRAM_NV:
      return MESA_SHADER_GEOMETRY;
   default:
      ASSERT(0);
      return ~0;
   }
}

static INLINE GLenum
_mesa_program_index_to_target(GLuint i)
{
   GLenum enums[MESA_SHADER_TYPES] = {
         GL_VERTEX_PROGRAM_ARB,
         GL_FRAGMENT_PROGRAM_ARB,
         GL_GEOMETRY_PROGRAM_NV,
   };
   if(i >= MESA_SHADER_TYPES)
      return 0;
   else
      return enums[i];
}

#endif /* PROGRAM_H */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
a91 5
_mesa_reference_program_(struct gl_context *ctx,
                         struct gl_program **ptr,
                         struct gl_program *prog);

static inline void
d94 1
a94 5
                        struct gl_program *prog)
{
   if (*ptr != prog)
      _mesa_reference_program_(ctx, ptr, prog);
}
d96 1
a96 1
static inline void
d105 1
a105 1
static inline void
d114 1
a114 1
static inline void
d126 1
a126 1
static inline struct gl_vertex_program *
d133 1
a133 1
static inline struct gl_geometry_program *
d140 1
a140 1
static inline struct gl_fragment_program *
d177 1
d179 1
a179 1
static inline GLuint
d182 2
a183 1
   switch (v) {
d196 1
a196 1
static inline GLenum
d199 4
a202 4
   static const GLenum enums[MESA_SHADER_TYPES] = {
      GL_VERTEX_PROGRAM_ARB,
      GL_GEOMETRY_PROGRAM_NV,
      GL_FRAGMENT_PROGRAM_ARB
a208 42


/* Cast wrappers from gl_program to gl_vertex/geometry/fragment_program */

static inline struct gl_fragment_program *
gl_fragment_program(struct gl_program *prog)
{
   return (struct gl_fragment_program *) prog;
}

static inline const struct gl_fragment_program *
gl_fragment_program_const(const struct gl_program *prog)
{
   return (const struct gl_fragment_program *) prog;
}


static inline struct gl_vertex_program *
gl_vertex_program(struct gl_program *prog)
{
   return (struct gl_vertex_program *) prog;
}

static inline const struct gl_vertex_program *
gl_vertex_program_const(const struct gl_program *prog)
{
   return (const struct gl_vertex_program *) prog;
}


static inline struct gl_geometry_program *
gl_geometry_program(struct gl_program *prog)
{
   return (struct gl_geometry_program *) prog;
}

static inline const struct gl_geometry_program *
gl_geometry_program_const(const struct gl_program *prog)
{
   return (const struct gl_geometry_program *) prog;
}

@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a46 4
#ifdef __cplusplus
extern "C" {
#endif

a82 5
_mesa_init_compute_program(struct gl_context *ctx,
                           struct gl_compute_program *prog,
                           GLenum target, GLuint id);

extern struct gl_program *
d180 1
a180 1
                           gl_shader_stage shaderType,
a185 4
extern GLint
_mesa_get_min_invocations_per_fragment(struct gl_context *ctx,
                                       const struct gl_fragment_program *prog,
                                       bool ignore_sample_qualifier);
d188 1
a188 1
_mesa_program_enum_to_shader_stage(GLenum v)
a196 2
   case GL_COMPUTE_PROGRAM_NV:
      return MESA_SHADER_COMPUTE;
a202 1

d204 1
a204 1
_mesa_shader_stage_to_program(unsigned stage)
d206 9
a214 13
   switch (stage) {
   case MESA_SHADER_VERTEX:
      return GL_VERTEX_PROGRAM_ARB;
   case MESA_SHADER_FRAGMENT:
      return GL_FRAGMENT_PROGRAM_ARB;
   case MESA_SHADER_GEOMETRY:
      return GL_GEOMETRY_PROGRAM_NV;
   case MESA_SHADER_COMPUTE:
      return GL_COMPUTE_PROGRAM_NV;
   }

   assert(!"Unexpected shader stage in _mesa_shader_stage_to_program");
   return GL_VERTEX_PROGRAM_ARB;
a257 4

#ifdef __cplusplus
} /* extern "C" */
#endif
@


