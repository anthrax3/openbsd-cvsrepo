head	1.4;
access;
symbols
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2011.10.23.13.37.42;	author matthieu;	state dead;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.29;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.41;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.50.39;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.50.39;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge Mesa 7.10.3
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  7.1
 *
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * \mainpage Mesa GL API Module
 *
 * \section GLAPIIntroduction Introduction
 *
 * The Mesa GL API module is responsible for dispatching all the
 * gl*() functions.  All GL functions are dispatched by jumping through
 * the current dispatch table (basically a struct full of function
 * pointers.)
 *
 * A per-thread current dispatch table and per-thread current context
 * pointer are managed by this module too.
 *
 * This module is intended to be non-Mesa-specific so it can be used
 * with the X/DRI libGL also.
 */


#ifndef _GLAPI_H
#define _GLAPI_H

#include "glthread.h"


struct _glapi_table;

typedef void (*_glapi_proc)(void); /* generic function pointer */


#if defined(USE_MGL_NAMESPACE)
#define _glapi_set_dispatch _mglapi_set_dispatch
#define _glapi_get_dispatch _mglapi_get_dispatch
#define _glapi_set_context _mglapi_set_context
#define _glapi_get_context _mglapi_get_context
#define _glapi_Dispatch _mglapi_Dispatch
#define _glapi_Context _mglapi_Context
#endif


#if defined(__GNUC__) && (__GNUC__ >= 3)
#  define likely(x)   __builtin_expect(!!(x), 1)
#  define unlikely(x) __builtin_expect(!!(x), 0)
#else
#  define likely(x)   (x)
#  define unlikely(x) (x)
#  ifndef __builting_expect
#    define __builtin_expect(x,y) (x)
#  endif
#endif


/**
 ** Define the GET_DISPATCH() and GET_CURRENT_CONTEXT() macros.
 **
 ** \param C local variable which will hold the current context.
 **/
#if defined (GLX_USE_TLS)

extern const struct _glapi_table *_glapi_Dispatch;

extern const void *_glapi_Context;

extern __thread struct _glapi_table * _glapi_tls_Dispatch
    __attribute__((tls_model("initial-exec")));

extern __thread void * _glapi_tls_Context
    __attribute__((tls_model("initial-exec")));

# define GET_DISPATCH() _glapi_tls_Dispatch

# define GET_CURRENT_CONTEXT(C)  GLcontext *C = (GLcontext *) _glapi_tls_Context

#else

extern struct _glapi_table *_glapi_Dispatch;

extern void *_glapi_Context;

# ifdef THREADS

#  define GET_DISPATCH() \
     (likely(_glapi_Dispatch) ? _glapi_Dispatch : _glapi_get_dispatch())

#  define GET_CURRENT_CONTEXT(C)  GLcontext *C = (GLcontext *) \
     (likely(_glapi_Context) ? _glapi_Context : _glapi_get_context())

# else

#  define GET_DISPATCH() _glapi_Dispatch

#  define GET_CURRENT_CONTEXT(C)  GLcontext *C = (GLcontext *) _glapi_Context

# endif

#endif /* defined (GLX_USE_TLS) */


/**
 ** GL API public functions
 **/

extern void
_glapi_init_multithread(void);


extern void
_glapi_destroy_multithread(void);


extern void
_glapi_check_multithread(void);


extern void
_glapi_set_context(void *context);


extern void *
_glapi_get_context(void);


extern void
_glapi_set_dispatch(struct _glapi_table *dispatch);


extern struct _glapi_table *
_glapi_get_dispatch(void);


extern unsigned int
_glapi_get_dispatch_table_size(void);


extern int
_glapi_add_dispatch( const char * const * function_names,
		     const char * parameter_signature );

extern int
_glapi_get_proc_offset(const char *funcName);


extern _glapi_proc
_glapi_get_proc_address(const char *funcName);


/**
 * GL API local functions and defines
 */

extern void
init_glapi_relocs_once(void);

extern void
_glapi_check_table_not_null(const struct _glapi_table *table);


extern void
_glapi_check_table(const struct _glapi_table *table);


extern const char *
_glapi_get_proc_name(unsigned int offset);


/*
 * Number of extension functions which we can dynamically add at runtime.
 */
#define MAX_EXTENSION_FUNCS 300


#endif
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a46 4
#define GL_GLEXT_PROTOTYPES

#include "GL/gl.h"
#include "GL/glext.h"
a53 2
typedef void (*_glapi_warning_func)(void *ctx, const char *str, ...);

d60 1
a61 1
#define _glapi_Dispatch _mglapi_Dispatch
d65 10
a74 4
/*
 * Number of extension functions which we can dynamically add at runtime.
 */
#define MAX_EXTENSION_FUNCS 300
d78 2
a79 1
 ** Define the GET_CURRENT_CONTEXT() macro.
d84 6
a89 2
const extern void *_glapi_Context;
const extern struct _glapi_table *_glapi_Dispatch;
d94 2
d100 2
a102 1
extern struct _glapi_table *_glapi_Dispatch;
d105 7
a111 1
#  define GET_CURRENT_CONTEXT(C)  GLcontext *C = (GLcontext *) (_glapi_Context ? _glapi_Context : _glapi_get_context())
d113 3
d117 1
d128 2
a129 1
_glapi_noop_enable_warnings(GLboolean enable);
d132 2
a133 1
_glapi_set_warning_func(_glapi_warning_func func);
d155 2
a156 2
extern int
_glapi_begin_dispatch_override(struct _glapi_table *override);
d159 3
a161 2
extern void
_glapi_end_dispatch_override(int layer);
d163 2
a165 2
struct _glapi_table *
_glapi_get_override_dispatch(int layer);
d167 2
a169 2
extern GLuint
_glapi_get_dispatch_table_size(void);
d171 3
d176 1
a176 1
_glapi_check_table(const struct _glapi_table *table);
d178 2
a180 3
extern int
_glapi_add_dispatch( const char * const * function_names,
		     const char * parameter_signature );
d182 2
a183 2
extern GLint
_glapi_get_proc_offset(const char *funcName);
d186 2
a187 2
extern _glapi_proc
_glapi_get_proc_address(const char *funcName);
d190 4
a193 2
extern const char *
_glapi_get_proc_name(GLuint offset);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.5
d5 1
a5 1
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
d47 1
d50 1
a50 1
#include "glapitable.h"
d54 4
d69 6
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@
