head	1.13;
access;
symbols
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	v10_2_9:1.1.1.7
	v10_4_3:1.1.1.6
	v10_2_7:1.1.1.5
	OPENBSD_5_6:1.10.0.2
	OPENBSD_5_6_BASE:1.10
	v10_2_3:1.1.1.5
	OPENBSD_5_5:1.9.0.2
	OPENBSD_5_5_BASE:1.9
	v9_2_5:1.1.1.4
	v9_2_3:1.1.1.4
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.4
	v9_2_0:1.1.1.4
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.2
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.12;
commitid	TnlogFl9nOv2eaRf;

1.12
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.11;
commitid	4ry2gvZGMXkCUD2n;

1.11
date	2015.01.25.14.41.20;	author jsg;	state Exp;
branches;
next	1.10;
commitid	mcxB0JvoI9gTDYXU;

1.10
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.9;
commitid	WPD6rgPryPkvXOr9;

1.9
date	2013.09.05.14.04.16;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.7;

1.7
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.12.21.09.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.40;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.40;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.28.31;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.05.13.15.27;	author jsg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.07.09.20.34.48;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.6
date	2015.01.25.14.11.29;	author jsg;	state Exp;
branches;
next	1.1.1.7;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.7
date	2015.02.20.22.48.37;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.13
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */

#include "main/glheader.h"
#include "main/macros.h"
#include "main/enums.h"

#include "intel_batchbuffer.h"

#include "brw_defines.h"
#include "brw_context.h"
#include "brw_eu.h"
#include "brw_util.h"
#include "brw_state.h"
#include "brw_clip.h"

#include "glsl/ralloc.h"

#define FRONT_UNFILLED_BIT  0x1
#define BACK_UNFILLED_BIT   0x2


static void compile_clip_prog( struct brw_context *brw,
			     struct brw_clip_prog_key *key )
{
   struct brw_clip_compile c;
   const GLuint *program;
   void *mem_ctx;
   GLuint program_size;
   GLuint i;

   memset(&c, 0, sizeof(c));

   mem_ctx = ralloc_context(NULL);

   /* Begin the compilation:
    */
   brw_init_compile(brw, &c.func, mem_ctx);

   c.func.single_program_flow = 1;

   c.key = *key;
   c.vue_map = brw->vue_map_geom_out;

   c.has_flat_shading =
      brw_any_flat_varyings(&key->interpolation_mode);
   c.has_noperspective_shading =
      brw_any_noperspective_varyings(&key->interpolation_mode);

   /* nr_regs is the number of registers filled by reading data from the VUE.
    * This program accesses the entire VUE, so nr_regs needs to be the size of
    * the VUE (measured in pairs, since two slots are stored in each
    * register).
    */
   c.nr_regs = (c.vue_map.num_slots + 1)/2;

   c.prog_data.clip_mode = c.key.clip_mode; /* XXX */

   /* For some reason the thread is spawned with only 4 channels
    * unmasked.
    */
   brw_set_mask_control(&c.func, BRW_MASK_DISABLE);


   /* Would ideally have the option of producing a program which could
    * do all three:
    */
   switch (key->primitive) {
   case GL_TRIANGLES:
      if (key->do_unfilled)
	 brw_emit_unfilled_clip( &c );
      else
	 brw_emit_tri_clip( &c );
      break;
   case GL_LINES:
      brw_emit_line_clip( &c );
      break;
   case GL_POINTS:
      brw_emit_point_clip( &c );
      break;
   default:
      assert(0);
      return;
   }

	

   /* get the program
    */
   program = brw_get_program(&c.func, &program_size);

   if (unlikely(INTEL_DEBUG & DEBUG_CLIP)) {
      fprintf(stderr, "clip:\n");
      for (i = 0; i < program_size / sizeof(struct brw_instruction); i++)
	 brw_disasm(stderr, &((struct brw_instruction *)program)[i],
		    brw->gen);
      fprintf(stderr, "\n");
   }

   brw_upload_cache(&brw->cache,
		    BRW_CLIP_PROG,
		    &c.key, sizeof(c.key),
		    program, program_size,
		    &c.prog_data, sizeof(c.prog_data),
		    &brw->clip.prog_offset, &brw->clip.prog_data);
   ralloc_free(mem_ctx);
}

/* Calculate interpolants for triangle and line rasterization.
 */
static void
brw_upload_clip_prog(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   struct brw_clip_prog_key key;

   memset(&key, 0, sizeof(key));

   /* Populate the key:
    */

   /* BRW_NEW_INTERPOLATION_MAP */
   key.interpolation_mode = brw->interpolation_mode;

   /* BRW_NEW_REDUCED_PRIMITIVE */
   key.primitive = brw->reduced_primitive;
   /* BRW_NEW_VUE_MAP_GEOM_OUT */
   key.attrs = brw->vue_map_geom_out.slots_valid;

   /* _NEW_LIGHT */
   key.pv_first = (ctx->Light.ProvokingVertex == GL_FIRST_VERTEX_CONVENTION);
   /* _NEW_TRANSFORM (also part of VUE map)*/
   if (ctx->Transform.ClipPlanesEnabled)
      key.nr_userclip = _mesa_logbase2(ctx->Transform.ClipPlanesEnabled) + 1;

   if (brw->gen == 5)
       key.clip_mode = BRW_CLIPMODE_KERNEL_CLIP;
   else
       key.clip_mode = BRW_CLIPMODE_NORMAL;

   /* _NEW_POLYGON */
   if (key.primitive == GL_TRIANGLES) {
      if (ctx->Polygon.CullFlag &&
	  ctx->Polygon.CullFaceMode == GL_FRONT_AND_BACK)
	 key.clip_mode = BRW_CLIPMODE_REJECT_ALL;
      else {
	 GLuint fill_front = CLIP_CULL;
	 GLuint fill_back = CLIP_CULL;
	 GLuint offset_front = 0;
	 GLuint offset_back = 0;

	 if (!ctx->Polygon.CullFlag ||
	     ctx->Polygon.CullFaceMode != GL_FRONT) {
	    switch (ctx->Polygon.FrontMode) {
	    case GL_FILL:
	       fill_front = CLIP_FILL;
	       offset_front = 0;
	       break;
	    case GL_LINE:
	       fill_front = CLIP_LINE;
	       offset_front = ctx->Polygon.OffsetLine;
	       break;
	    case GL_POINT:
	       fill_front = CLIP_POINT;
	       offset_front = ctx->Polygon.OffsetPoint;
	       break;
	    }
	 }

	 if (!ctx->Polygon.CullFlag ||
	     ctx->Polygon.CullFaceMode != GL_BACK) {
	    switch (ctx->Polygon.BackMode) {
	    case GL_FILL:
	       fill_back = CLIP_FILL;
	       offset_back = 0;
	       break;
	    case GL_LINE:
	       fill_back = CLIP_LINE;
	       offset_back = ctx->Polygon.OffsetLine;
	       break;
	    case GL_POINT:
	       fill_back = CLIP_POINT;
	       offset_back = ctx->Polygon.OffsetPoint;
	       break;
	    }
	 }

	 if (ctx->Polygon.BackMode != GL_FILL ||
	     ctx->Polygon.FrontMode != GL_FILL) {
	    key.do_unfilled = 1;

	    /* Most cases the fixed function units will handle.  Cases where
	     * one or more polygon faces are unfilled will require help:
	     */
	    key.clip_mode = BRW_CLIPMODE_CLIP_NON_REJECTED;

	    if (offset_back || offset_front) {
	       /* _NEW_POLYGON, _NEW_BUFFERS */
	       key.offset_units = ctx->Polygon.OffsetUnits * ctx->DrawBuffer->_MRD * 2;
	       key.offset_factor = ctx->Polygon.OffsetFactor * ctx->DrawBuffer->_MRD;
	    }

	    switch (ctx->Polygon.FrontFace) {
	    case GL_CCW:
	       key.fill_ccw = fill_front;
	       key.fill_cw = fill_back;
	       key.offset_ccw = offset_front;
	       key.offset_cw = offset_back;
	       if (ctx->Light.Model.TwoSide &&
		   key.fill_cw != CLIP_CULL)
		  key.copy_bfc_cw = 1;
	       break;
	    case GL_CW:
	       key.fill_cw = fill_front;
	       key.fill_ccw = fill_back;
	       key.offset_cw = offset_front;
	       key.offset_ccw = offset_back;
	       if (ctx->Light.Model.TwoSide &&
		   key.fill_ccw != CLIP_CULL)
		  key.copy_bfc_ccw = 1;
	       break;
	    }
	 }
      }
   }

   if (!brw_search_cache(&brw->cache, BRW_CLIP_PROG,
			 &key, sizeof(key),
			 &brw->clip.prog_offset, &brw->clip.prog_data)) {
      compile_clip_prog( brw, &key );
   }
}


const struct brw_tracked_state brw_clip_prog = {
   .dirty = {
      .mesa  = (_NEW_LIGHT |
		_NEW_TRANSFORM |
		_NEW_POLYGON |
		_NEW_BUFFERS),
      .brw   = (BRW_NEW_REDUCED_PRIMITIVE |
                BRW_NEW_VUE_MAP_GEOM_OUT |
                BRW_NEW_INTERPOLATION_MAP)
   },
   .emit = brw_upload_clip_prog
};
@


1.12
log
@Merge Mesa 10.2.9
@
text
@@


1.11
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d45 1
a45 1
#include "util/ralloc.h"
d58 1
d90 1
a90 1
   brw_set_default_mask_control(&c.func, BRW_MASK_DISABLE);
d110 2
a111 1
      unreachable("not reached");
d114 1
a114 1
   brw_compact_instructions(&c.func, 0, 0, NULL);
d122 3
a124 1
      brw_disassemble(brw, c.func.store, 0, program_size, stderr);
@


1.10
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d45 1
a45 1
#include "glsl/ralloc.h"
a57 1
   GLuint i;
d89 1
a89 1
   brw_set_mask_control(&c.func, BRW_MASK_DISABLE);
d109 1
a109 2
      assert(0);
      return;
d112 1
a112 1
	
d120 1
a120 3
      for (i = 0; i < program_size / sizeof(struct brw_instruction); i++)
	 brw_disasm(stderr, &((struct brw_instruction *)program)[i],
		    brw->gen);
@


1.9
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d63 1
a63 1
   
d73 5
d88 1
a88 1
    * unmasked.  
d97 1
a97 1
   case GL_TRIANGLES: 
d114 1
a114 1
	 
d121 1
a121 1
      printf("clip:\n");
d123 1
a123 1
	 brw_disasm(stdout, &((struct brw_instruction *)program)[i],
d125 1
a125 1
      printf("\n");
d149 4
d157 1
a158 1
   key.do_flat_shading = (ctx->Light.ShadeModel == GL_FLAT);
d161 2
a162 1
   key.nr_userclip = _mesa_bitcount_64(ctx->Transform.ClipPlanesEnabled);
d183 2
a184 2
	    case GL_FILL: 
	       fill_front = CLIP_FILL; 
d201 2
a202 2
	    case GL_FILL: 
	       fill_back = CLIP_FILL; 
d238 1
a238 1
		   key.fill_cw != CLIP_CULL) 
d247 1
a247 1
		   key.fill_ccw != CLIP_CULL) 
d265 1
a265 1
      .mesa  = (_NEW_LIGHT | 
d267 1
a267 1
		_NEW_POLYGON | 
d269 3
a271 1
      .brw   = (BRW_NEW_REDUCED_PRIMITIVE | BRW_NEW_VUE_MAP_GEOM_OUT)
@


1.8
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d45 1
a45 1
#include "../glsl/ralloc.h"
a53 1
   struct intel_context *intel = &brw->intel;
a57 1
   GLuint delta;
a58 1
   GLuint header_regs;
d71 1
d73 4
a76 2
   /* Need to locate the two positions present in vertex + header.
    * These are currently hardcoded:
d78 1
a78 27
   c.header_position_offset = ATTR_SIZE;

   if (intel->gen == 5)
      header_regs = 3;
   else
      header_regs = 1;

   delta = header_regs * REG_SIZE;

   for (i = 0; i < VERT_RESULT_MAX; i++) {
      if (c.key.attrs & BITFIELD64_BIT(i)) {
	 c.offset[i] = delta;
	 delta += ATTR_SIZE;

	 c.idx_to_attr[c.nr_attrs] = i;
	 c.nr_attrs++;
      }
   }

   /* The vertex attributes start at a URB row-aligned offset after
    * the 8-20 dword vertex header, and continue for a URB row-aligned
    * length.  nr_regs determines the urb_read_length from the start
    * of the header to the end of the vertex data.
    */
   c.nr_regs = header_regs + (c.nr_attrs + 1) / 2;

   c.nr_bytes = c.nr_regs * REG_SIZE;
d119 1
a119 1
		    intel->gen);
d134 2
a135 1
static void upload_clip_prog(struct brw_context *brw)
d137 1
a137 2
   struct intel_context *intel = &brw->intel;
   struct gl_context *ctx = &intel->ctx;
d145 3
a147 3
   key.primitive = brw->intel.reduced_primitive;
   /* CACHE_NEW_VS_PROG */
   key.attrs = brw->vs.prog_data->outputs_written;
d151 2
a152 2
   /* _NEW_TRANSFORM */
   key.nr_userclip = brw_count_bits(ctx->Transform.ClipPlanesEnabled);
d154 1
a154 1
   if (intel->gen == 5)
d217 1
a217 1
	       key.offset_units = ctx->Polygon.OffsetUnits * brw->intel.polygon_offset_scale;
d259 1
a259 2
      .brw   = (BRW_NEW_REDUCED_PRIMITIVE),
      .cache = CACHE_NEW_VS_PROG
d261 1
a261 1
   .prepare = upload_clip_prog
@


1.7
log
@Merge Mesa 7.10.3
@
text
@d45 2
d57 1
d64 2
d69 1
a69 1
   brw_init_compile(brw, &c.func);
d149 7
a155 11
   /* Upload
    */
   drm_intel_bo_unreference(brw->clip.prog_bo);
   brw->clip.prog_bo = brw_upload_cache_with_auxdata(&brw->cache,
						     BRW_CLIP_PROG,
						     &c.key, sizeof(c.key),
						     NULL, 0,
						     program, program_size,
						     &c.prog_data,
						     sizeof(c.prog_data),
						     &brw->clip.prog_data);
d271 3
a273 6
   drm_intel_bo_unreference(brw->clip.prog_bo);
   brw->clip.prog_bo = brw_search_cache(&brw->cache, BRW_CLIP_PROG,
					&key, sizeof(key),
					NULL, 0,
					&brw->clip.prog_data);
   if (brw->clip.prog_bo == NULL)
d275 1
@


1.6
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a44 1

d58 1
d76 1
a76 1
       delta = 3 * REG_SIZE;
d78 3
a80 1
       delta = REG_SIZE;
d82 1
a82 1
   for (i = 0; i < VERT_RESULT_MAX; i++)
d86 3
d90 1
d92 6
a97 6
   c.nr_attrs = brw_count_bits(c.key.attrs);
   
   if (intel->gen == 5)
       c.nr_regs = (c.nr_attrs + 1) / 2 + 3;  /* are vertices packed, or reg-aligned? */
   else
       c.nr_regs = (c.nr_attrs + 1) / 2 + 1;  /* are vertices packed, or reg-aligned? */
d136 8
d146 1
a146 1
   dri_bo_unreference(brw->clip.prog_bo);
d162 1
a162 1
   GLcontext *ctx = &intel->ctx;
d270 1
a270 1
   dri_bo_unreference(brw->clip.prog_bo);
@


1.5
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d53 1
a69 1

d75 7
a81 2
   for (i = 0, delta = REG_SIZE; i < VERT_RESULT_MAX; i++)
      if (c.key.attrs & (1<<i)) {
d87 6
a92 1
   c.nr_regs = (c.nr_attrs + 1) / 2 + 1;  /* are vertices packed, or reg-aligned? */
d133 8
a140 7
   brw->clip.prog_bo = brw_upload_cache( &brw->cache,
					 BRW_CLIP_PROG,
					 &c.key, sizeof(c.key),
					 NULL, 0,
					 program, program_size,
					 &c.prog_data,
					 &brw->clip.prog_data );
d147 2
a148 1
   GLcontext *ctx = &brw->intel.ctx;
d161 1
d164 5
a168 1
   key.clip_mode = BRW_CLIPMODE_NORMAL;
d172 2
a173 1
      if (ctx->Polygon.CullFaceMode == GL_FRONT_AND_BACK) 
@


1.4
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d32 3
a34 3
#include "glheader.h"
#include "macros.h"
#include "enums.h"
d134 1
a134 1
static int upload_clip_prog( struct brw_context *brw )
d148 1
a148 1
   key.do_flat_shading = (brw->attribs.Light->ShadeModel == GL_FLAT);
d150 1
a150 1
   key.nr_userclip = brw_count_bits(brw->attribs.Transform->ClipPlanesEnabled);
d155 1
a155 1
      if (brw->attribs.Polygon->CullFaceMode == GL_FRONT_AND_BACK) 
d163 3
a165 3
	 if (!brw->attribs.Polygon->CullFlag ||
	     brw->attribs.Polygon->CullFaceMode != GL_FRONT) {
	    switch (brw->attribs.Polygon->FrontMode) {
d172 1
a172 1
	       offset_front = brw->attribs.Polygon->OffsetLine;
d176 1
a176 1
	       offset_front = brw->attribs.Polygon->OffsetPoint;
d181 3
a183 3
	 if (!brw->attribs.Polygon->CullFlag ||
	     brw->attribs.Polygon->CullFaceMode != GL_BACK) {
	    switch (brw->attribs.Polygon->BackMode) {
d190 1
a190 1
	       offset_back = brw->attribs.Polygon->OffsetLine;
d194 1
a194 1
	       offset_back = brw->attribs.Polygon->OffsetPoint;
d199 2
a200 2
	 if (brw->attribs.Polygon->BackMode != GL_FILL ||
	     brw->attribs.Polygon->FrontMode != GL_FILL) {
d210 2
a211 2
	       key.offset_units = brw->attribs.Polygon->OffsetUnits * brw->intel.polygon_offset_scale;
	       key.offset_factor = brw->attribs.Polygon->OffsetFactor * ctx->DrawBuffer->_MRD;
d214 1
a214 1
	    switch (brw->attribs.Polygon->FrontFace) {
d220 1
a220 1
	       if (brw->attribs.Light->Model.TwoSide &&
d229 1
a229 1
	       if (brw->attribs.Light->Model.TwoSide &&
a244 2

   return dri_bufmgr_check_aperture_space(brw->clip.prog_bo);
@


1.3
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d122 8
a129 7
   brw->clip.prog_gs_offset = brw_upload_cache( &brw->cache[BRW_CLIP_PROG],
						&c.key,
						sizeof(c.key),
						program,
						program_size,
						&c.prog_data,
						&brw->clip.prog_data );
a131 13

static GLboolean search_cache( struct brw_context *brw, 
			       struct brw_clip_prog_key *key )
{
   return brw_search_cache(&brw->cache[BRW_CLIP_PROG], 
			   key, sizeof(*key),
			   &brw->clip.prog_data,
			   &brw->clip.prog_gs_offset);
}




d134 1
a134 1
static void upload_clip_prog( struct brw_context *brw )
a170 1
	       key.do_unfilled = 1;
a174 1
	       key.do_unfilled = 1;
a188 1
	       key.do_unfilled = 1;
a192 1
	       key.do_unfilled = 1;
d199 7
a205 8
    if (brw->attribs.Polygon->BackMode != GL_FILL ||
        brw->attribs.Polygon->FrontMode != GL_FILL)
        key.do_unfilled = 1;

	 /* Most cases the fixed function units will handle.  Cases where
	  * one or more polygon faces are unfilled will require help:
	  */
	 if (key.do_unfilled) {
d238 6
a243 1
   if (!search_cache(brw, &key))
d245 2
d259 1
a259 1
   .update = upload_clip_prog
@


1.2
log
@Update to Mesa 7.0.2. Tested by naddy@@ (full ports build), simon@@
and oga@@ (with dri enabled).
@
text
@d63 1
a63 1
   brw_init_compile(&c.func);
@


1.1
log
@Initial revision
@
text
@d65 2
d214 4
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Mesa 7.0.1
@
text
@a64 2
   c.func.single_program_flow = 1;

@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@d32 3
a34 3
#include "main/glheader.h"
#include "main/macros.h"
#include "main/enums.h"
d45 1
a52 1
   struct intel_context *intel = &brw->intel;
a57 1
   GLuint header_regs;
d63 1
a63 1
   brw_init_compile(brw, &c.func);
d69 1
d75 2
a76 9
   if (intel->gen == 5)
      header_regs = 3;
   else
      header_regs = 1;

   delta = header_regs * REG_SIZE;

   for (i = 0; i < VERT_RESULT_MAX; i++) {
      if (c.key.attrs & BITFIELD64_BIT(i)) {
a78 3

	 c.idx_to_attr[c.nr_attrs] = i;
	 c.nr_attrs++;
a79 8
   }

   /* The vertex attributes start at a URB row-aligned offset after
    * the 8-20 dword vertex header, and continue for a URB row-aligned
    * length.  nr_regs determines the urb_read_length from the start
    * of the header to the end of the vertex data.
    */
   c.nr_regs = header_regs + (c.nr_attrs + 1) / 2;
d81 2
a119 8
   if (unlikely(INTEL_DEBUG & DEBUG_CLIP)) {
      printf("clip:\n");
      for (i = 0; i < program_size / sizeof(struct brw_instruction); i++)
	 brw_disasm(stdout, &((struct brw_instruction *)program)[i],
		    intel->gen);
      printf("\n");
   }

d122 17
a138 9
   drm_intel_bo_unreference(brw->clip.prog_bo);
   brw->clip.prog_bo = brw_upload_cache_with_auxdata(&brw->cache,
						     BRW_CLIP_PROG,
						     &c.key, sizeof(c.key),
						     NULL, 0,
						     program, program_size,
						     &c.prog_data,
						     sizeof(c.prog_data),
						     &brw->clip.prog_data);
d141 3
d146 1
a146 1
static void upload_clip_prog(struct brw_context *brw)
d148 1
a148 2
   struct intel_context *intel = &brw->intel;
   struct gl_context *ctx = &intel->ctx;
d160 1
a160 2
   key.do_flat_shading = (ctx->Light.ShadeModel == GL_FLAT);
   key.pv_first = (ctx->Light.ProvokingVertex == GL_FIRST_VERTEX_CONVENTION);
d162 2
a163 6
   key.nr_userclip = brw_count_bits(ctx->Transform.ClipPlanesEnabled);

   if (intel->gen == 5)
       key.clip_mode = BRW_CLIPMODE_KERNEL_CLIP;
   else
       key.clip_mode = BRW_CLIPMODE_NORMAL;
d167 1
a167 2
      if (ctx->Polygon.CullFlag &&
	  ctx->Polygon.CullFaceMode == GL_FRONT_AND_BACK)
d175 3
a177 3
	 if (!ctx->Polygon.CullFlag ||
	     ctx->Polygon.CullFaceMode != GL_FRONT) {
	    switch (ctx->Polygon.FrontMode) {
d183 1
d185 1
a185 1
	       offset_front = ctx->Polygon.OffsetLine;
d188 1
d190 1
a190 1
	       offset_front = ctx->Polygon.OffsetPoint;
d195 3
a197 3
	 if (!ctx->Polygon.CullFlag ||
	     ctx->Polygon.CullFaceMode != GL_BACK) {
	    switch (ctx->Polygon.BackMode) {
d203 1
d205 1
a205 1
	       offset_back = ctx->Polygon.OffsetLine;
d208 1
d210 1
a210 1
	       offset_back = ctx->Polygon.OffsetPoint;
d215 4
a218 7
	 if (ctx->Polygon.BackMode != GL_FILL ||
	     ctx->Polygon.FrontMode != GL_FILL) {
	    key.do_unfilled = 1;

	    /* Most cases the fixed function units will handle.  Cases where
	     * one or more polygon faces are unfilled will require help:
	     */
d223 2
a224 2
	       key.offset_units = ctx->Polygon.OffsetUnits * brw->intel.polygon_offset_scale;
	       key.offset_factor = ctx->Polygon.OffsetFactor * ctx->DrawBuffer->_MRD;
d227 1
a227 1
	    switch (ctx->Polygon.FrontFace) {
d233 1
a233 1
	       if (ctx->Light.Model.TwoSide &&
d242 1
a242 1
	       if (ctx->Light.Model.TwoSide &&
d251 1
a251 6
   drm_intel_bo_unreference(brw->clip.prog_bo);
   brw->clip.prog_bo = brw_search_cache(&brw->cache, BRW_CLIP_PROG,
					&key, sizeof(key),
					NULL, 0,
					&brw->clip.prog_data);
   if (brw->clip.prog_bo == NULL)
d265 1
a265 1
   .prepare = upload_clip_prog
@


1.1.1.4
log
@Import Mesa 9.2.0
@
text
@a44 2
#include "glsl/ralloc.h"

d52 1
a54 1
   void *mem_ctx;
d56 1
d58 1
a60 2

   mem_ctx = ralloc_context(NULL);
d64 1
a64 1
   brw_init_compile(brw, &c.func, mem_ctx);
a68 1
   c.vue_map = brw->vue_map_geom_out;
d70 26
a95 4
   /* nr_regs is the number of registers filled by reading data from the VUE.
    * This program accesses the entire VUE, so nr_regs needs to be the size of
    * the VUE (measured in pairs, since two slots are stored in each
    * register).
d97 3
a99 1
   c.nr_regs = (c.vue_map.num_slots + 1)/2;
d140 1
a140 1
		    brw->gen);
d144 11
a154 7
   brw_upload_cache(&brw->cache,
		    BRW_CLIP_PROG,
		    &c.key, sizeof(c.key),
		    program, program_size,
		    &c.prog_data, sizeof(c.prog_data),
		    &brw->clip.prog_offset, &brw->clip.prog_data);
   ralloc_free(mem_ctx);
d159 1
a159 2
static void
brw_upload_clip_prog(struct brw_context *brw)
d161 2
a162 1
   struct gl_context *ctx = &brw->ctx;
d170 3
a172 3
   key.primitive = brw->reduced_primitive;
   /* BRW_NEW_VUE_MAP_GEOM_OUT */
   key.attrs = brw->vue_map_geom_out.slots_valid;
d176 2
a177 2
   /* _NEW_TRANSFORM (also part of VUE map)*/
   key.nr_userclip = _mesa_bitcount_64(ctx->Transform.ClipPlanesEnabled);
d179 1
a179 1
   if (brw->gen == 5)
d242 1
a242 1
	       key.offset_units = ctx->Polygon.OffsetUnits * ctx->DrawBuffer->_MRD * 2;
d270 6
a275 3
   if (!brw_search_cache(&brw->cache, BRW_CLIP_PROG,
			 &key, sizeof(key),
			 &brw->clip.prog_offset, &brw->clip.prog_data)) {
a276 1
   }
d286 2
a287 1
      .brw   = (BRW_NEW_REDUCED_PRIMITIVE | BRW_NEW_VUE_MAP_GEOM_OUT)
d289 1
a289 1
   .emit = brw_upload_clip_prog
@


1.1.1.5
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d63 1
a63 1

a72 5
   c.has_flat_shading =
      brw_any_flat_varyings(&key->interpolation_mode);
   c.has_noperspective_shading =
      brw_any_noperspective_varyings(&key->interpolation_mode);

d83 1
a83 1
    * unmasked.
d92 1
a92 1
   case GL_TRIANGLES:
d109 1
a109 1
	
d116 1
a116 1
      fprintf(stderr, "clip:\n");
d118 1
a118 1
	 brw_disasm(stderr, &((struct brw_instruction *)program)[i],
d120 1
a120 1
      fprintf(stderr, "\n");
a143 4

   /* BRW_NEW_INTERPOLATION_MAP */
   key.interpolation_mode = brw->interpolation_mode;

a147 1

d149 1
d152 1
a152 2
   if (ctx->Transform.ClipPlanesEnabled)
      key.nr_userclip = _mesa_logbase2(ctx->Transform.ClipPlanesEnabled) + 1;
d173 2
a174 2
	    case GL_FILL:
	       fill_front = CLIP_FILL;
d191 2
a192 2
	    case GL_FILL:
	       fill_back = CLIP_FILL;
d228 1
a228 1
		   key.fill_cw != CLIP_CULL)
d237 1
a237 1
		   key.fill_ccw != CLIP_CULL)
d255 1
a255 1
      .mesa  = (_NEW_LIGHT |
d257 1
a257 1
		_NEW_POLYGON |
d259 1
a259 3
      .brw   = (BRW_NEW_REDUCED_PRIMITIVE |
                BRW_NEW_VUE_MAP_GEOM_OUT |
                BRW_NEW_INTERPOLATION_MAP)
@


1.1.1.6
log
@Import Mesa 10.4.3
@
text
@d45 1
a45 1
#include "util/ralloc.h"
d58 1
d90 1
a90 1
   brw_set_default_mask_control(&c.func, BRW_MASK_DISABLE);
d110 2
a111 1
      unreachable("not reached");
d114 1
a114 1
   brw_compact_instructions(&c.func, 0, 0, NULL);
d122 3
a124 1
      brw_disassemble(brw, c.func.store, 0, program_size, stderr);
@


1.1.1.7
log
@Import Mesa 10.2.9
@
text
@d45 1
a45 1
#include "glsl/ralloc.h"
a57 1
   GLuint i;
d89 1
a89 1
   brw_set_mask_control(&c.func, BRW_MASK_DISABLE);
d109 1
a109 2
      assert(0);
      return;
d112 1
a112 1
	
d120 1
a120 3
      for (i = 0; i < program_size / sizeof(struct brw_instruction); i++)
	 brw_disasm(stderr, &((struct brw_instruction *)program)[i],
		    brw->gen);
@


