head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.16
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.14
	OPENBSD_5_7_BASE:1.2
	v10_2_9:1.1.1.1
	v10_4_3:1.1.1.1
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	v10_2_3:1.1.1.1
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.2;
commitid	TnlogFl9nOv2eaRf;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.20;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009-2010 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef __NOUVEAU_RENDER_H__
#define __NOUVEAU_RENDER_H__

#include "vbo/vbo_context.h"
#include "nouveau_array.h"

typedef void (*dispatch_t)(struct gl_context *, unsigned int, int, unsigned int);
typedef void (*emit_t)(struct gl_context *, struct nouveau_array *, const void *);

struct nouveau_attr_info {
	int vbo_index;
	int imm_method;
	int imm_fields;

	emit_t emit;
};

struct nouveau_swtnl_state {
	struct nouveau_bo *vbo;
	unsigned offset;
	void *buf;
	unsigned vertex_count;
	GLenum primitive;
};

struct nouveau_render_state {
	enum {
		VBO,
		IMM
	} mode;

	struct nouveau_array ib;
	struct nouveau_array attrs[VERT_ATTRIB_MAX];

	/* Maps a HW VBO index or IMM emission order to an index in
	 * the attrs array above (or -1 if unused). */
	int map[VERT_ATTRIB_MAX];

	int attr_count;
	int vertex_size;

	struct nouveau_swtnl_state swtnl;
};

#define to_render_state(ctx) (&to_nouveau_context(ctx)->render)

#define FOR_EACH_ATTR(render, i, attr)					\
	for (i = 0; attr = (render)->map[i], i < NUM_VERTEX_ATTRS; i++)

#define FOR_EACH_BOUND_ATTR(render, i, attr)				\
	for (i = 0; attr = (render)->map[i], i < render->attr_count; i++) \
		if (attr >= 0)

#endif
@


1.2
log
@Merge Mesa 7.10.3
@
text
@@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d31 1
d33 2
a34 5
struct nouveau_array_state;

typedef void (*dispatch_t)(GLcontext *, unsigned int, int, unsigned int);
typedef unsigned (*extract_u_t)(struct nouveau_array_state *a, int i, int j);
typedef float (*extract_f_t)(struct nouveau_array_state *a, int i, int j);
d41 1
a41 24
	void (*emit)(GLcontext *, struct nouveau_array_state *, const void *);
};

struct nouveau_array_state {
	int attr;
	int stride, fields, type;

	struct nouveau_bo *bo;
	unsigned offset;
	const void *buf;

	extract_u_t extract_u;
	extract_f_t extract_f;
};

#define RENDER_SCRATCH_COUNT 32
#define RENDER_SCRATCH_SIZE 64*1024

struct nouveau_scratch_state {
	struct nouveau_bo *bo[RENDER_SCRATCH_COUNT];

	int index;
	int offset;
	void *buf;
d46 1
d58 2
a59 2
	struct nouveau_array_state ib;
	struct nouveau_array_state attrs[VERT_ATTRIB_MAX];
a67 1
	struct nouveau_scratch_state scratch;
d72 7
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a30 1
#include "nouveau_array.h"
d32 5
a36 2
typedef void (*dispatch_t)(struct gl_context *, unsigned int, int, unsigned int);
typedef void (*emit_t)(struct gl_context *, struct nouveau_array *, const void *);
d43 24
a66 1
	emit_t emit;
a70 1
	unsigned offset;
d82 2
a83 2
	struct nouveau_array ib;
	struct nouveau_array attrs[VERT_ATTRIB_MAX];
d92 1
a96 7

#define FOR_EACH_ATTR(render, i, attr)					\
	for (i = 0; attr = (render)->map[i], i < NUM_VERTEX_ATTRS; i++)

#define FOR_EACH_BOUND_ATTR(render, i, attr)				\
	for (i = 0; attr = (render)->map[i], i < render->attr_count; i++) \
		if (attr >= 0)
@

