head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.3.0.4
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	v10_2_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2014.07.09.20.34.50;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.1
date	2014.07.09.20.34.50;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.2
date	2015.01.25.14.11.38;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.3
date	2015.02.20.22.48.44;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2013 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#include "brw_fs.h"
#include "brw_cfg.h"

/** @@file brw_fs_peephole_predicated_break.cpp
 *
 * Loops are often structured as
 *
 * loop:
 *    CMP.f0
 *    (+f0) IF
 *    BREAK
 *    ENDIF
 *    ...
 *    WHILE loop
 *
 * This peephole pass removes the IF and ENDIF instructions and predicates the
 * BREAK, dropping two instructions from the loop body.
 */

bool
fs_visitor::opt_peephole_predicated_break()
{
   bool progress = false;

   cfg_t cfg(&instructions);

   for (int b = 0; b < cfg.num_blocks; b++) {
      bblock_t *block = cfg.blocks[b];

      /* BREAK and CONTINUE instructions, by definition, can only be found at
       * the ends of basic blocks.
       */
      fs_inst *inst = (fs_inst *) block->end;
      if (inst->opcode != BRW_OPCODE_BREAK && inst->opcode != BRW_OPCODE_CONTINUE)
         continue;

      fs_inst *if_inst = (fs_inst *) inst->prev;
      if (if_inst->opcode != BRW_OPCODE_IF)
         continue;

      fs_inst *endif_inst = (fs_inst *) inst->next;
      if (endif_inst->opcode != BRW_OPCODE_ENDIF)
         continue;

      /* For Sandybridge with IF with embedded comparison we need to emit an
       * instruction to set the flag register.
       */
      if (brw->gen == 6 && if_inst->conditional_mod) {
         fs_inst *cmp_inst = CMP(reg_null_d, if_inst->src[0], if_inst->src[1],
                                 if_inst->conditional_mod);
         if_inst->insert_before(cmp_inst);
         inst->predicate = BRW_PREDICATE_NORMAL;
      } else {
         inst->predicate = if_inst->predicate;
         inst->predicate_inverse = if_inst->predicate_inverse;
      }

      if_inst->remove();
      endif_inst->remove();

      /* By removing the ENDIF instruction we removed a basic block. Skip over
       * it for the next iteration.
       */
      b++;

      progress = true;
   }

   if (progress)
      invalidate_live_intervals();

   return progress;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 10.2.3
@
text
@@


1.1.1.2
log
@Import Mesa 10.4.3
@
text
@a40 12
 *
 * If the loop was a DO { ... } WHILE loop, it looks like
 *
 * loop:
 *    ...
 *    CMP.f0
 *    (+f0) IF
 *    BREAK
 *    ENDIF
 *    WHILE loop
 *
 * and we can remove the BREAK instruction and predicate the WHILE.
d48 4
a51 3
   foreach_block (block, cfg) {
      if (block->start_ip != block->end_ip)
         continue;
d56 2
a57 3
      fs_inst *jump_inst = (fs_inst *)block->end();
      if (jump_inst->opcode != BRW_OPCODE_BREAK &&
          jump_inst->opcode != BRW_OPCODE_CONTINUE)
d60 1
a60 1
      fs_inst *if_inst = (fs_inst *)block->prev()->end();
d64 1
a64 1
      fs_inst *endif_inst = (fs_inst *)block->next()->start();
a67 4
      bblock_t *jump_block = block;
      bblock_t *if_block = jump_block->prev();
      bblock_t *endif_block = jump_block->next();

d74 2
a75 2
         if_inst->insert_before(if_block, cmp_inst);
         jump_inst->predicate = BRW_PREDICATE_NORMAL;
d77 2
a78 7
         jump_inst->predicate = if_inst->predicate;
         jump_inst->predicate_inverse = if_inst->predicate_inverse;
      }

      bblock_t *earlier_block = if_block;
      if (if_block->start_ip == if_block->end_ip) {
         earlier_block = if_block->prev();
d81 2
a82 1
      if_inst->remove(if_block);
d84 2
a85 25
      bblock_t *later_block = endif_block;
      if (endif_block->start_ip == endif_block->end_ip) {
         later_block = endif_block->next();
      }
      endif_inst->remove(endif_block);

      if (!earlier_block->ends_with_control_flow()) {
         earlier_block->children.make_empty();
         earlier_block->add_successor(cfg->mem_ctx, jump_block);
      }

      if (!later_block->starts_with_control_flow()) {
         later_block->parents.make_empty();
      }
      jump_block->add_successor(cfg->mem_ctx, later_block);

      if (earlier_block->can_combine_with(jump_block)) {
         earlier_block->combine_with(jump_block);

         block = earlier_block;
      }

      /* Now look at the first instruction of the block following the BREAK. If
       * it's a WHILE, we can delete the break, predicate the WHILE, and join
       * the two basic blocks.
d87 1
a87 19
      bblock_t *while_block = earlier_block->next();
      fs_inst *while_inst = (fs_inst *)while_block->start();

      if (jump_inst->opcode == BRW_OPCODE_BREAK &&
          while_inst->opcode == BRW_OPCODE_WHILE &&
          while_inst->predicate == BRW_PREDICATE_NONE) {
         jump_inst->remove(earlier_block);
         while_inst->predicate = jump_inst->predicate;
         while_inst->predicate_inverse = !jump_inst->predicate_inverse;

         earlier_block->children.make_empty();
         earlier_block->add_successor(cfg->mem_ctx, while_block);

         assert(earlier_block->can_combine_with(while_block));
         earlier_block->combine_with(while_block);

         earlier_block->next()->parents.make_empty();
         earlier_block->add_successor(cfg->mem_ctx, earlier_block->next());
      }
@


1.1.1.3
log
@Import Mesa 10.2.9
@
text
@d41 12
d60 3
a62 4
   cfg_t cfg(&instructions);

   for (int b = 0; b < cfg.num_blocks; b++) {
      bblock_t *block = cfg.blocks[b];
d67 3
a69 2
      fs_inst *inst = (fs_inst *) block->end;
      if (inst->opcode != BRW_OPCODE_BREAK && inst->opcode != BRW_OPCODE_CONTINUE)
d72 1
a72 1
      fs_inst *if_inst = (fs_inst *) inst->prev;
d76 1
a76 1
      fs_inst *endif_inst = (fs_inst *) inst->next;
d80 4
d90 2
a91 2
         if_inst->insert_before(cmp_inst);
         inst->predicate = BRW_PREDICATE_NORMAL;
d93 7
a99 2
         inst->predicate = if_inst->predicate;
         inst->predicate_inverse = if_inst->predicate_inverse;
d102 1
a102 2
      if_inst->remove();
      endif_inst->remove();
d104 25
a128 2
      /* By removing the ENDIF instruction we removed a basic block. Skip over
       * it for the next iteration.
d130 19
a148 1
      b++;
@


