head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2013.09.05.14.04.49;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.20;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.17;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2007.11.24.17.29.00;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.29.00;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.51;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "nouveau_driver.h"
#include "nouveau_fbo.h"
#include "nouveau_context.h"

#include "swrast/swrast.h"
#include "swrast/s_context.h"



static void
renderbuffer_map_unmap(struct gl_context *ctx, struct gl_renderbuffer *rb,
		       GLboolean map)
{
	struct nouveau_surface *s = &to_nouveau_renderbuffer(rb)->surface;

	if (map)
		nouveau_bo_map(s->bo, NOUVEAU_BO_RDWR, context_client(ctx));
}

static void
framebuffer_map_unmap(struct gl_context *ctx, struct gl_framebuffer *fb, GLboolean map)
{
	int i;

	for (i = 0; i < fb->_NumColorDrawBuffers; i++)
		renderbuffer_map_unmap(ctx, fb->_ColorDrawBuffers[i], map);

	renderbuffer_map_unmap(ctx, fb->_ColorReadBuffer, map);

	if (fb->Attachment[BUFFER_DEPTH].Renderbuffer)
		renderbuffer_map_unmap(ctx, fb->Attachment[BUFFER_DEPTH].Renderbuffer, map);
}

static void
span_map_unmap(struct gl_context *ctx, GLboolean map)
{
	int i;

	framebuffer_map_unmap(ctx, ctx->DrawBuffer, map);

	if (ctx->ReadBuffer != ctx->DrawBuffer)
		framebuffer_map_unmap(ctx, ctx->ReadBuffer, map);

	for (i = 0; i < ctx->Const.MaxTextureUnits; i++)
		if (map)
			_swrast_map_texture(ctx, ctx->Texture.Unit[i]._Current);
		else
			_swrast_unmap_texture(ctx, ctx->Texture.Unit[i]._Current);
}

static void
nouveau_span_start(struct gl_context *ctx)
{
	nouveau_fallback(ctx, SWRAST);
	span_map_unmap(ctx, GL_TRUE);
}

static void
nouveau_span_finish(struct gl_context *ctx)
{
	span_map_unmap(ctx, GL_FALSE);
	nouveau_fallback(ctx, HWTNL);
}

void
nouveau_span_functions_init(struct gl_context *ctx)
{
	struct swrast_device_driver *swdd =
		_swrast_GetDeviceDriverReference(ctx);

	swdd->SpanRenderStart = nouveau_span_start;
	swdd->SpanRenderFinish = nouveau_span_finish;
}
@


1.5
log
@Merge Mesa 9.2.0
@
text
@@


1.4
log
@Merge Mesa 7.10.3
@
text
@a29 1
#include "nouveau_bo.h"
d32 1
a33 64
#define LOCAL_VARS							\
	struct nouveau_surface *s = &to_nouveau_renderbuffer(rb)->surface; \
	GLuint p;							\
	(void)p;

#define LOCAL_DEPTH_VARS LOCAL_VARS

#define HW_LOCK()
#define HW_UNLOCK()

#define HW_CLIPLOOP() {							\
	int minx = 0;							\
	int miny = 0;							\
	int maxx = rb->Width;						\
	int maxy = rb->Height;

#define HW_ENDCLIPLOOP() }

#define Y_FLIP(y) (rb->Name ? (y) : rb->Height - 1 - (y))

/* RGB565 span functions */
#define SPANTMP_PIXEL_FMT GL_RGB
#define SPANTMP_PIXEL_TYPE GL_UNSIGNED_SHORT_5_6_5
#define TAG(x) nouveau_##x##_rgb565
#define TAG2(x, y) nouveau_##x##_rgb565##y
#define GET_PTR(x, y) (s->bo->map + (y)*s->pitch + (x)*s->cpp)

#include "spantmp2.h"

/* RGB888 span functions */
#define SPANTMP_PIXEL_FMT GL_BGR
#define SPANTMP_PIXEL_TYPE GL_UNSIGNED_INT_8_8_8_8_REV
#define TAG(x) nouveau_##x##_rgb888
#define TAG2(x, y) nouveau_##x##_rgb888##y
#define GET_PTR(x, y) (s->bo->map + (y)*s->pitch + (x)*s->cpp)

#include "spantmp2.h"

/* ARGB8888 span functions */
#define SPANTMP_PIXEL_FMT GL_BGRA
#define SPANTMP_PIXEL_TYPE GL_UNSIGNED_INT_8_8_8_8_REV
#define TAG(x) nouveau_##x##_argb8888
#define TAG2(x, y) nouveau_##x##_argb8888##y
#define GET_PTR(x, y) (s->bo->map + (y)*s->pitch + (x)*s->cpp)

#include "spantmp2.h"

/* Z16 span functions */
#define VALUE_TYPE uint16_t
#define READ_DEPTH(v, x, y)						\
	v = *(uint16_t *)(s->bo->map + (y)*s->pitch + (x)*s->cpp);
#define WRITE_DEPTH(x, y, v)						\
	*(uint16_t *)(s->bo->map + (y)*s->pitch + (x)*s->cpp) = v
#define TAG(x) nouveau_##x##_z16

#include "depthtmp.h"

/* Z24S8 span functions */
#define VALUE_TYPE uint32_t
#define READ_DEPTH(v, x, y)						\
	v = *(uint32_t *)(s->bo->map + (y)*s->pitch + (x)*s->cpp);
#define WRITE_DEPTH(x, y, v)						\
	*(uint32_t *)(s->bo->map + (y)*s->pitch + (x)*s->cpp) = v
#define TAG(x) nouveau_##x##_z24s8
a34 1
#include "depthtmp.h"
d37 2
a38 1
renderbuffer_map_unmap(struct gl_renderbuffer *rb, GLboolean map)
a41 33
	if (map) {
		switch (rb->Format) {
		case MESA_FORMAT_RGB565:
			nouveau_InitPointers_rgb565(rb);
			break;
		case MESA_FORMAT_XRGB8888:
			nouveau_InitPointers_rgb888(rb);
			break;
		case MESA_FORMAT_ARGB8888:
			nouveau_InitPointers_argb8888(rb);
			break;
		case MESA_FORMAT_Z16:
			nouveau_InitDepthPointers_z16(rb);
			break;
		case MESA_FORMAT_Z24_S8:
			nouveau_InitDepthPointers_z24s8(rb);
			break;
		default:
			assert(0);
		}

		nouveau_bo_map(s->bo, NOUVEAU_BO_RDWR);
	} else {
		nouveau_bo_unmap(s->bo);
	}
}

static void
texture_unit_map_unmap(struct gl_context *ctx, struct gl_texture_unit *u, GLboolean map)
{
	if (!u->_ReallyEnabled)
		return;

d43 1
a43 3
		ctx->Driver.MapTexture(ctx, u->_Current);
	else
		ctx->Driver.UnmapTexture(ctx, u->_Current);
d47 1
a47 1
framebuffer_map_unmap(struct gl_framebuffer *fb, GLboolean map)
d52 1
a52 1
		renderbuffer_map_unmap(fb->_ColorDrawBuffers[i], map);
d54 1
a54 1
	renderbuffer_map_unmap(fb->_ColorReadBuffer, map);
d56 2
a57 2
	if (fb->_DepthBuffer)
		renderbuffer_map_unmap(fb->_DepthBuffer->Wrapped, map);
d65 1
a65 1
	framebuffer_map_unmap(ctx->DrawBuffer, map);
d68 1
a68 1
		framebuffer_map_unmap(ctx->ReadBuffer, map);
d71 4
a74 1
		texture_unit_map_unmap(ctx, &ctx->Texture.Unit[i], map);
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a34 1
	struct gl_framebuffer *fb = ctx->DrawBuffer;			\
d47 2
a48 2
	int maxx = fb->Width;						\
	int maxy = fb->Height;
d52 1
a52 1
#define Y_FLIP(y) (fb->Name ? (y) : rb->Height - 1 - (y))
d134 1
a134 1
texture_unit_map_unmap(GLcontext *ctx, struct gl_texture_unit *u, GLboolean map)
d146 1
a146 1
span_map_unmap(GLcontext *ctx, GLboolean map)
d150 2
a151 2
	for (i = 0; i < ctx->DrawBuffer->_NumColorDrawBuffers; i++)
		renderbuffer_map_unmap(ctx->DrawBuffer->_ColorDrawBuffers[i], map);
d153 1
a153 1
	renderbuffer_map_unmap(ctx->DrawBuffer->_ColorReadBuffer, map);
d155 13
a167 2
	if (ctx->DrawBuffer->_DepthBuffer)
		renderbuffer_map_unmap(ctx->DrawBuffer->_DepthBuffer->Wrapped, map);
d174 1
a174 1
nouveau_span_start(GLcontext *ctx)
d181 1
a181 1
nouveau_span_finish(GLcontext *ctx)
d188 1
a188 1
nouveau_span_functions_init(GLcontext *ctx)
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d1 25
a25 26
/**************************************************************************

Copyright 2006 Stephane Marchesin
All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
on the rights to use, copy, modify, merge, publish, distribute, sub
license, and/or sell copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice (including the next
paragraph) shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
ERIC ANHOLT OR SILICON INTEGRATED SYSTEMS CORP BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

d27 2
d30 1
a30 3
#include "nouveau_span.h"
#include "nouveau_fifo.h"
#include "nouveau_lock.h"
a33 14
#define HAVE_HW_DEPTH_SPANS	0
#define HAVE_HW_DEPTH_PIXELS	0
#define HAVE_HW_STENCIL_SPANS	0
#define HAVE_HW_STENCIL_PIXELS	0

#define HW_CLIPLOOP()							\
   do {									\
      int _nc = nmesa->numClipRects;					\
      while ( _nc-- ) {							\
	 int minx = nmesa->pClipRects[_nc].x1 - nmesa->drawX;		\
	 int miny = nmesa->pClipRects[_nc].y1 - nmesa->drawY;		\
	 int maxx = nmesa->pClipRects[_nc].x2 - nmesa->drawX;		\
	 int maxy = nmesa->pClipRects[_nc].y2 - nmesa->drawY;

d35 4
a38 7
   nouveauContextPtr nmesa = NOUVEAU_CONTEXT(ctx);			\
   nouveau_renderbuffer *nrb = (nouveau_renderbuffer *)rb;		\
   GLuint height = nrb->mesa.Height;					\
   GLubyte *map = (GLubyte *)(nrb->map ? nrb->map : nrb->mem->map) +    \
	 (nmesa->drawY * nrb->pitch) + (nmesa->drawX * nrb->cpp);       \
   GLuint p;								\
   (void) p;
d40 1
a40 1
#define Y_FLIP( _y )            (height - _y - 1)
a42 1

d45 5
d51 1
d53 1
a53 3
/* ================================================================
 * Color buffers
 */
d55 1
a55 1
/* RGB565 */ 
d58 3
a61 3
#define TAG(x)    nouveau##x##_RGB565
#define TAG2(x,y) nouveau##x##_RGB565##y
#define GET_PTR(X,Y) (map + (Y)*nrb->pitch + (X)*nrb->cpp)
d64 8
d73 1
a73 1
/* ARGB8888 */
d76 3
a79 3
#define TAG(x)    nouveau##x##_ARGB8888
#define TAG2(x,y) nouveau##x##_ARGB8888##y
#define GET_PTR(X,Y) (map + (Y)*nrb->pitch + (X)*nrb->cpp)
d82 20
d103 1
a103 1
nouveauSpanRenderStart( GLcontext *ctx )
d105 27
a131 4
   nouveauContextPtr nmesa = NOUVEAU_CONTEXT(ctx);
   FIRE_RING();
   LOCK_HARDWARE(nmesa);
   nouveauWaitForIdleLocked( nmesa );
d135 1
a135 1
nouveauSpanRenderFinish( GLcontext *ctx )
d137 7
a143 4
   nouveauContextPtr nmesa = NOUVEAU_CONTEXT(ctx);
   _swrast_flush( ctx );
   nouveauWaitForIdleLocked( nmesa );
   UNLOCK_HARDWARE( nmesa );
d146 19
a164 1
void nouveauSpanInitFunctions( GLcontext *ctx )
d166 2
a167 3
   struct swrast_device_driver *swdd = _swrast_GetDeviceDriverReference(ctx);
   swdd->SpanRenderStart	= nouveauSpanRenderStart;
   swdd->SpanRenderFinish	= nouveauSpanRenderFinish;
d170 6
a176 3
/**
 * Plug in the Get/Put routines for the given driRenderbuffer.
 */
d178 1
a178 1
nouveauSpanSetFunctions(nouveau_renderbuffer *nrb, const GLvisual *vis)
d180 5
a184 4
   if (nrb->mesa._ActualFormat == GL_RGBA8)
      nouveauInitPointers_ARGB8888(&nrb->mesa);
   else if (nrb->mesa._ActualFormat == GL_RGB5)
      nouveauInitPointers_RGB565(&nrb->mesa);
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d1 26
a26 25
/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
a27 2
#include "nouveau_driver.h"
#include "nouveau_fbo.h"
d29 3
a31 1
#include "nouveau_bo.h"
d35 14
d50 7
a56 3
	struct nouveau_surface *s = &to_nouveau_renderbuffer(rb)->surface; \
	GLuint p;							\
	(void)p;
d58 1
a58 1
#define LOCAL_DEPTH_VARS LOCAL_VARS
d61 1
a63 5
#define HW_CLIPLOOP() {							\
	int minx = 0;							\
	int miny = 0;							\
	int maxx = rb->Width;						\
	int maxy = rb->Height;
a64 1
#define HW_ENDCLIPLOOP() }
d66 3
a68 1
#define Y_FLIP(y) (rb->Name ? (y) : rb->Height - 1 - (y))
d70 1
a70 1
/* RGB565 span functions */
a72 3
#define TAG(x) nouveau_##x##_rgb565
#define TAG2(x, y) nouveau_##x##_rgb565##y
#define GET_PTR(x, y) (s->bo->map + (y)*s->pitch + (x)*s->cpp)
d74 3
a78 8
/* RGB888 span functions */
#define SPANTMP_PIXEL_FMT GL_BGR
#define SPANTMP_PIXEL_TYPE GL_UNSIGNED_INT_8_8_8_8_REV
#define TAG(x) nouveau_##x##_rgb888
#define TAG2(x, y) nouveau_##x##_rgb888##y
#define GET_PTR(x, y) (s->bo->map + (y)*s->pitch + (x)*s->cpp)

#include "spantmp2.h"
d80 1
a80 1
/* ARGB8888 span functions */
a82 3
#define TAG(x) nouveau_##x##_argb8888
#define TAG2(x, y) nouveau_##x##_argb8888##y
#define GET_PTR(x, y) (s->bo->map + (y)*s->pitch + (x)*s->cpp)
d84 3
a88 20
/* Z16 span functions */
#define VALUE_TYPE uint16_t
#define READ_DEPTH(v, x, y)						\
	v = *(uint16_t *)(s->bo->map + (y)*s->pitch + (x)*s->cpp);
#define WRITE_DEPTH(x, y, v)						\
	*(uint16_t *)(s->bo->map + (y)*s->pitch + (x)*s->cpp) = v
#define TAG(x) nouveau_##x##_z16

#include "depthtmp.h"

/* Z24S8 span functions */
#define VALUE_TYPE uint32_t
#define READ_DEPTH(v, x, y)						\
	v = *(uint32_t *)(s->bo->map + (y)*s->pitch + (x)*s->cpp);
#define WRITE_DEPTH(x, y, v)						\
	*(uint32_t *)(s->bo->map + (y)*s->pitch + (x)*s->cpp) = v
#define TAG(x) nouveau_##x##_z24s8

#include "depthtmp.h"

d90 1
a90 1
renderbuffer_map_unmap(struct gl_renderbuffer *rb, GLboolean map)
d92 4
a95 27
	struct nouveau_surface *s = &to_nouveau_renderbuffer(rb)->surface;

	if (map) {
		switch (rb->Format) {
		case MESA_FORMAT_RGB565:
			nouveau_InitPointers_rgb565(rb);
			break;
		case MESA_FORMAT_XRGB8888:
			nouveau_InitPointers_rgb888(rb);
			break;
		case MESA_FORMAT_ARGB8888:
			nouveau_InitPointers_argb8888(rb);
			break;
		case MESA_FORMAT_Z16:
			nouveau_InitDepthPointers_z16(rb);
			break;
		case MESA_FORMAT_Z24_S8:
			nouveau_InitDepthPointers_z24s8(rb);
			break;
		default:
			assert(0);
		}

		nouveau_bo_map(s->bo, NOUVEAU_BO_RDWR);
	} else {
		nouveau_bo_unmap(s->bo);
	}
d99 1
a99 1
texture_unit_map_unmap(struct gl_context *ctx, struct gl_texture_unit *u, GLboolean map)
d101 4
a104 7
	if (!u->_ReallyEnabled)
		return;

	if (map)
		ctx->Driver.MapTexture(ctx, u->_Current);
	else
		ctx->Driver.UnmapTexture(ctx, u->_Current);
d107 1
a107 2
static void
framebuffer_map_unmap(struct gl_framebuffer *fb, GLboolean map)
d109 3
a111 9
	int i;

	for (i = 0; i < fb->_NumColorDrawBuffers; i++)
		renderbuffer_map_unmap(fb->_ColorDrawBuffers[i], map);

	renderbuffer_map_unmap(fb->_ColorReadBuffer, map);

	if (fb->_DepthBuffer)
		renderbuffer_map_unmap(fb->_DepthBuffer->Wrapped, map);
a113 27
static void
span_map_unmap(struct gl_context *ctx, GLboolean map)
{
	int i;

	framebuffer_map_unmap(ctx->DrawBuffer, map);

	if (ctx->ReadBuffer != ctx->DrawBuffer)
		framebuffer_map_unmap(ctx->ReadBuffer, map);

	for (i = 0; i < ctx->Const.MaxTextureUnits; i++)
		texture_unit_map_unmap(ctx, &ctx->Texture.Unit[i], map);
}

static void
nouveau_span_start(struct gl_context *ctx)
{
	nouveau_fallback(ctx, SWRAST);
	span_map_unmap(ctx, GL_TRUE);
}

static void
nouveau_span_finish(struct gl_context *ctx)
{
	span_map_unmap(ctx, GL_FALSE);
	nouveau_fallback(ctx, HWTNL);
}
d115 3
d119 1
a119 1
nouveau_span_functions_init(struct gl_context *ctx)
d121 4
a124 5
	struct swrast_device_driver *swdd =
		_swrast_GetDeviceDriverReference(ctx);

	swdd->SpanRenderStart = nouveau_span_start;
	swdd->SpanRenderFinish = nouveau_span_finish;
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d30 1
a32 1
#include "swrast/s_context.h"
d34 64
d99 1
d102 1
a102 2
renderbuffer_map_unmap(struct gl_context *ctx, struct gl_renderbuffer *rb,
		       GLboolean map)
d106 33
d140 3
a142 1
		nouveau_bo_map(s->bo, NOUVEAU_BO_RDWR, context_client(ctx));
d146 1
a146 1
framebuffer_map_unmap(struct gl_context *ctx, struct gl_framebuffer *fb, GLboolean map)
d151 1
a151 1
		renderbuffer_map_unmap(ctx, fb->_ColorDrawBuffers[i], map);
d153 1
a153 1
	renderbuffer_map_unmap(ctx, fb->_ColorReadBuffer, map);
d155 2
a156 2
	if (fb->Attachment[BUFFER_DEPTH].Renderbuffer)
		renderbuffer_map_unmap(ctx, fb->Attachment[BUFFER_DEPTH].Renderbuffer, map);
d164 1
a164 1
	framebuffer_map_unmap(ctx, ctx->DrawBuffer, map);
d167 1
a167 1
		framebuffer_map_unmap(ctx, ctx->ReadBuffer, map);
d170 1
a170 4
		if (map)
			_swrast_map_texture(ctx, ctx->Texture.Unit[i]._Current);
		else
			_swrast_unmap_texture(ctx, ctx->Texture.Unit[i]._Current);
@


