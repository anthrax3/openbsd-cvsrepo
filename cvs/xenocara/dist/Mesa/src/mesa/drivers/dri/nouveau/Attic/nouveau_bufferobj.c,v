head	1.10;
access;
symbols
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	v10_2_9:1.1.1.7
	v10_4_3:1.1.1.6
	v10_2_7:1.1.1.5
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.9;
commitid	TnlogFl9nOv2eaRf;

1.9
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.8;
commitid	4ry2gvZGMXkCUD2n;

1.8
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.7;
commitid	mcxB0JvoI9gTDYXU;

1.7
date	2014.09.07.15.20.07;	author jsg;	state Exp;
branches;
next	1.6;
commitid	7kimTMT4YlQauAIU;

1.6
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.5;
commitid	WPD6rgPryPkvXOr9;

1.5
date	2013.09.05.14.04.48;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.20;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.16;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2007.11.24.17.28.55;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.28.55;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.50;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.54;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2014.09.07.15.06.28;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	dm8VnQHhowGHmemJ;

1.1.1.6
date	2015.01.25.14.11.58;	author jsg;	state Exp;
branches;
next	1.1.1.7;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.7
date	2015.02.20.22.49.05;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.10
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "nouveau_driver.h"
#include "nouveau_bufferobj.h"
#include "nouveau_context.h"

#include "main/bufferobj.h"

static inline char *
get_bufferobj_map(struct gl_context *ctx, struct gl_buffer_object *obj,
		  unsigned flags)
{
	struct nouveau_bufferobj *nbo = to_nouveau_bufferobj(obj);
	void *map = NULL;

	if (nbo->sys) {
		map = nbo->sys;
	} else if (nbo->bo) {
		nouveau_bo_map(nbo->bo, flags, context_client(ctx));
		map = nbo->bo->map;
	}

	return map;
}

static struct gl_buffer_object *
nouveau_bufferobj_new(struct gl_context *ctx, GLuint buffer, GLenum target)
{
	struct nouveau_bufferobj *nbo;

	nbo = CALLOC_STRUCT(nouveau_bufferobj);
	if (!nbo)
		return NULL;

	_mesa_initialize_buffer_object(ctx, &nbo->base, buffer, target);

	return &nbo->base;
}

static void
nouveau_bufferobj_del(struct gl_context *ctx, struct gl_buffer_object *obj)
{
	struct nouveau_bufferobj *nbo = to_nouveau_bufferobj(obj);

	nouveau_bo_ref(NULL, &nbo->bo);
	free(nbo->sys);
	free(nbo);
}

static GLboolean
nouveau_bufferobj_data(struct gl_context *ctx, GLenum target, GLsizeiptrARB size,
		       const GLvoid *data, GLenum usage, GLbitfield storageFlags,
		       struct gl_buffer_object *obj)
{
	struct nouveau_bufferobj *nbo = to_nouveau_bufferobj(obj);
	int ret;

	obj->Size = size;
	obj->Usage = usage;
        obj->StorageFlags = storageFlags;

	/* Free previous storage */
	nouveau_bo_ref(NULL, &nbo->bo);
	free(nbo->sys);
	nbo->sys = NULL;

	if (target == GL_ELEMENT_ARRAY_BUFFER_ARB ||
	    (size < 512 && usage == GL_DYNAMIC_DRAW_ARB) ||
	    context_chipset(ctx) < 0x10) {
		/* Heuristic: keep it in system ram */
		nbo->sys = malloc(size);

	} else {
		/* Get a hardware BO */
		ret = nouveau_bo_new(context_dev(ctx),
				     NOUVEAU_BO_GART | NOUVEAU_BO_MAP,
				     ctx->Const.MinMapBufferAlignment,
				     size, NULL, &nbo->bo);
		assert(!ret);
	}

	if (data)
		memcpy(get_bufferobj_map(ctx, obj, NOUVEAU_BO_WR), data, size);

	return GL_TRUE;
}

static void
nouveau_bufferobj_subdata(struct gl_context *ctx, GLintptrARB offset,
			  GLsizeiptrARB size, const GLvoid *data,
			  struct gl_buffer_object *obj)
{
	memcpy(get_bufferobj_map(ctx, obj, NOUVEAU_BO_WR) + offset, data, size);
}

static void
nouveau_bufferobj_get_subdata(struct gl_context *ctx, GLintptrARB offset,
			   GLsizeiptrARB size, GLvoid *data,
			   struct gl_buffer_object *obj)
{
	memcpy(data, get_bufferobj_map(ctx, obj, NOUVEAU_BO_RD) + offset, size);
}

static void *
nouveau_bufferobj_map_range(struct gl_context *ctx, GLintptr offset,
			    GLsizeiptr length, GLbitfield access,
			    struct gl_buffer_object *obj,
                            gl_map_buffer_index index)
{
	unsigned flags = 0;
	char *map;

	assert(!obj->Mappings[index].Pointer);

	if (!(access & GL_MAP_UNSYNCHRONIZED_BIT)) {
		if (access & GL_MAP_READ_BIT)
			flags |= NOUVEAU_BO_RD;
		if (access & GL_MAP_WRITE_BIT)
			flags |= NOUVEAU_BO_WR;
	}

	map = get_bufferobj_map(ctx, obj, flags);
	if (!map)
		return NULL;

	obj->Mappings[index].Pointer = map + offset;
	obj->Mappings[index].Offset = offset;
	obj->Mappings[index].Length = length;
	obj->Mappings[index].AccessFlags = access;

	return obj->Mappings[index].Pointer;
}

static GLboolean
nouveau_bufferobj_unmap(struct gl_context *ctx, struct gl_buffer_object *obj,
                        gl_map_buffer_index index)
{
	assert(obj->Mappings[index].Pointer);

	obj->Mappings[index].Pointer = NULL;
	obj->Mappings[index].Offset = 0;
	obj->Mappings[index].Length = 0;
	obj->Mappings[index].AccessFlags = 0;

	return GL_TRUE;
}

void
nouveau_bufferobj_functions_init(struct dd_function_table *functions)
{
	functions->NewBufferObject = nouveau_bufferobj_new;
	functions->DeleteBuffer	= nouveau_bufferobj_del;
	functions->BufferData = nouveau_bufferobj_data;
	functions->BufferSubData = nouveau_bufferobj_subdata;
	functions->GetBufferSubData = nouveau_bufferobj_get_subdata;
	functions->MapBufferRange = nouveau_bufferobj_map_range;
	functions->UnmapBuffer = nouveau_bufferobj_unmap;
}
@


1.9
log
@Merge Mesa 10.2.9
@
text
@@


1.8
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d51 1
a51 1
nouveau_bufferobj_new(struct gl_context *ctx, GLuint buffer)
d59 1
a59 1
	_mesa_initialize_buffer_object(ctx, &nbo->base, buffer);
@


1.7
log
@Merge Mesa 10.2.7
@
text
@d51 1
a51 1
nouveau_bufferobj_new(struct gl_context *ctx, GLuint buffer, GLenum target)
d59 1
a59 1
	_mesa_initialize_buffer_object(ctx, &nbo->base, buffer, target);
@


1.6
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d89 1
@


1.5
log
@Merge Mesa 9.2.0
@
text
@d76 1
a76 1
		       const GLvoid *data, GLenum usage,
d84 1
d99 2
a100 1
				     NOUVEAU_BO_GART | NOUVEAU_BO_MAP, 0,
d130 2
a131 1
			    struct gl_buffer_object *obj)
d136 1
a136 1
	assert(!obj->Pointer);
d149 4
a152 4
	obj->Pointer = map + offset;
	obj->Offset = offset;
	obj->Length = length;
	obj->AccessFlags = access;
d154 1
a154 1
	return obj->Pointer;
d158 2
a159 1
nouveau_bufferobj_unmap(struct gl_context *ctx, struct gl_buffer_object *obj)
d161 1
a161 1
	assert(obj->Pointer);
d163 4
a166 4
	obj->Pointer = NULL;
	obj->Offset = 0;
	obj->Length = 0;
	obj->AccessFlags = 0;
@


1.4
log
@Merge Mesa 7.10.3
@
text
@d34 2
a35 1
get_bufferobj_map(struct gl_buffer_object *obj, unsigned flags)
d43 1
a43 1
		nouveau_bo_map(nbo->bo, flags);
a44 1
		nouveau_bo_unmap(nbo->bo);
d59 1
a59 1
	_mesa_initialize_buffer_object(&nbo->base, buffer, target);
d70 2
a71 2
	FREE(nbo->sys);
	FREE(nbo);
d87 1
a87 1
	FREE(nbo->sys);
d93 1
a93 1
		nbo->sys = MALLOC(size);
d99 1
a99 1
				     size, &nbo->bo);
d104 1
a104 1
		memcpy(get_bufferobj_map(obj, NOUVEAU_BO_WR), data, size);
d110 1
a110 1
nouveau_bufferobj_subdata(struct gl_context *ctx, GLenum target, GLintptrARB offset,
d114 1
a114 1
	memcpy(get_bufferobj_map(obj, NOUVEAU_BO_WR) + offset, data, size);
d118 1
a118 1
nouveau_bufferobj_get_subdata(struct gl_context *ctx, GLenum target, GLintptrARB offset,
d122 1
a122 1
	memcpy(data, get_bufferobj_map(obj, NOUVEAU_BO_RD) + offset, size);
d126 1
a126 18
nouveau_bufferobj_map(struct gl_context *ctx, GLenum target, GLenum access,
		   struct gl_buffer_object *obj)
{
	unsigned flags = 0;

	if (access == GL_READ_ONLY_ARB ||
	    access == GL_READ_WRITE_ARB)
		flags |= GL_MAP_READ_BIT;
	if (access == GL_WRITE_ONLY_ARB ||
	    access == GL_READ_WRITE_ARB)
		flags |= GL_MAP_WRITE_BIT;

	return ctx->Driver.MapBufferRange(ctx, target, 0, obj->Size, flags,
					  obj);
}

static void *
nouveau_bufferobj_map_range(struct gl_context *ctx, GLenum target, GLintptr offset,
d135 6
a140 6
	if (access & GL_MAP_READ_BIT)
		flags |= NOUVEAU_BO_RD;
	if (access & GL_MAP_WRITE_BIT)
		flags |= NOUVEAU_BO_WR;
	if (access & GL_MAP_UNSYNCHRONIZED_BIT)
		flags |= NOUVEAU_BO_NOSYNC;
d142 1
a142 1
	map = get_bufferobj_map(obj, flags);
d155 1
a155 1
nouveau_bufferobj_unmap(struct gl_context *ctx, GLenum target, struct gl_buffer_object *obj)
a174 1
	functions->MapBuffer = nouveau_bufferobj_map;
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d33 17
d51 1
a51 1
nouveau_bufferobj_new(GLcontext *ctx, GLuint buffer, GLenum target)
d65 1
a65 1
nouveau_bufferobj_del(GLcontext *ctx, struct gl_buffer_object *obj)
d70 1
d75 1
a75 1
nouveau_bufferobj_data(GLcontext *ctx, GLenum target, GLsizeiptrARB size,
d85 1
d87 14
a100 9
	ret = nouveau_bo_new(context_dev(ctx),
			     NOUVEAU_BO_GART | NOUVEAU_BO_MAP, 0,
			     size, &nbo->bo);
	assert(!ret);

	if (data) {
		nouveau_bo_map(nbo->bo, NOUVEAU_BO_WR);
		memcpy(nbo->bo->map, data, size);
		nouveau_bo_unmap(nbo->bo);
d103 3
d110 1
a110 1
nouveau_bufferobj_subdata(GLcontext *ctx, GLenum target, GLintptrARB offset,
d114 1
a114 5
	struct nouveau_bufferobj *nbo = to_nouveau_bufferobj(obj);

	nouveau_bo_map(nbo->bo, NOUVEAU_BO_WR);
	memcpy(nbo->bo->map + offset, data, size);
	nouveau_bo_unmap(nbo->bo);
d118 1
a118 1
nouveau_bufferobj_get_subdata(GLcontext *ctx, GLenum target, GLintptrARB offset,
d122 1
a122 5
	struct nouveau_bufferobj *nbo = to_nouveau_bufferobj(obj);

	nouveau_bo_map(nbo->bo, NOUVEAU_BO_RD);
	memcpy(data, nbo->bo->map + offset, size);
	nouveau_bo_unmap(nbo->bo);
d126 1
a126 1
nouveau_bufferobj_map(GLcontext *ctx, GLenum target, GLenum access,
d129 10
a138 1
	return ctx->Driver.MapBufferRange(ctx, target, 0, obj->Size, access,
d143 2
a144 2
nouveau_bufferobj_map_range(GLcontext *ctx, GLenum target, GLintptr offset,
			    GLsizeiptr length, GLenum access,
d147 2
a148 2
	struct nouveau_bufferobj *nbo = to_nouveau_bufferobj(obj);
	uint32_t flags = 0;
d152 1
a152 5
	if (!nbo->bo)
		return NULL;

	if (access == GL_READ_ONLY_ARB ||
	    access == GL_READ_WRITE_ARB)
d154 1
a154 2
	if (access == GL_WRITE_ONLY_ARB ||
	    access == GL_READ_WRITE_ARB)
d156 2
d159 3
a161 1
	nouveau_bo_map_range(nbo->bo, offset, length, flags);
d163 1
a163 1
	obj->Pointer = nbo->bo->map;
d172 1
a172 1
nouveau_bufferobj_unmap(GLcontext *ctx, GLenum target, struct gl_buffer_object *obj)
a173 2
	struct nouveau_bufferobj *nbo = to_nouveau_bufferobj(obj);

a174 2

	nouveau_bo_unmap(nbo->bo);
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d1 25
a25 2
#include "bufferobj.h"
#include "enums.h"
d27 1
a28 1
#include "nouveau_buffers.h"
a29 14
#include "nouveau_drm.h"
#include "nouveau_object.h"
#include "nouveau_msg.h"

#define NOUVEAU_MEM_FREE(mem) do {      \
	nouveau_mem_free(ctx, (mem));   \
	(mem) = NULL;                   \
} while(0)

#define DEBUG(fmt,args...) do {                \
	if (NOUVEAU_DEBUG & DEBUG_BUFFEROBJ) { \
		fprintf(stderr, "%s: "fmt, __func__, ##args);  \
	}                                      \
} while(0)
d31 1
a31 41
static GLboolean
nouveau_bo_download_from_screen(GLcontext *ctx,	GLuint offset, GLuint size,
						struct gl_buffer_object *bo)
{
	nouveauContextPtr nmesa = NOUVEAU_CONTEXT(ctx);
	nouveau_buffer_object *nbo = (nouveau_buffer_object *)bo;
	nouveau_mem *in_mem;

	DEBUG("bo=%p, offset=%d, size=%d\n", bo, offset, size);

	/* If there's a permanent backing store, blit directly into it */
	if (nbo->cpu_mem) {
		if (nbo->cpu_mem != nbo->gpu_mem) {
			DEBUG("..cpu_mem\n");
			nouveau_memformat_flat_emit(ctx, nbo->cpu_mem,
						    nbo->gpu_mem,
						    offset, offset, size);
		}
	} else {
		DEBUG("..sys_mem\n");
		in_mem = nouveau_mem_alloc(ctx, NOUVEAU_MEM_AGP, size, 0);
		if (in_mem) {
			DEBUG("....via AGP\n");
			/* otherwise, try blitting to faster memory and
			 * copying from there
			 */
			nouveau_memformat_flat_emit(ctx, in_mem, nbo->gpu_mem,
							 0, offset, size);
			nouveau_notifier_wait_nop(ctx, nmesa->syncNotifier,
						       NvSubMemFormat);
			_mesa_memcpy(nbo->cpu_mem_sys + offset,
					in_mem->map, size);
			NOUVEAU_MEM_FREE(in_mem);
		} else {
			DEBUG("....direct VRAM copy\n");
			/* worst case, copy directly from vram */
			_mesa_memcpy(nbo->cpu_mem_sys + offset,
				     nbo->gpu_mem + offset,
				     size);
		}
	}
d33 2
a34 6
	return GL_TRUE;
}

static GLboolean
nouveau_bo_upload_to_screen(GLcontext *ctx, GLuint offset, GLuint size,
					    struct gl_buffer_object *bo)
d36 1
a36 33
	nouveauContextPtr nmesa = NOUVEAU_CONTEXT(ctx);
	nouveau_buffer_object *nbo = (nouveau_buffer_object *)bo;
	nouveau_mem *out_mem;

	DEBUG("bo=%p, offset=%d, size=%d\n", bo, offset, size);

	if (nbo->cpu_mem) {
		if (nbo->cpu_mem != nbo->gpu_mem) {
			DEBUG("..cpu_mem\n");
			nouveau_memformat_flat_emit(ctx, nbo->gpu_mem,
						    nbo->cpu_mem,
						    offset, offset, size);
		}
	} else {
		out_mem = nouveau_mem_alloc(ctx, NOUVEAU_MEM_AGP |
						 NOUVEAU_MEM_MAPPED,
						 size, 0);
		if (out_mem) {
			DEBUG("....via AGP\n");
			_mesa_memcpy(out_mem->map,
					nbo->cpu_mem_sys + offset, size);
			nouveau_memformat_flat_emit(ctx, nbo->gpu_mem, out_mem,
						    offset, 0, size);
			nouveau_notifier_wait_nop(ctx, nmesa->syncNotifier,
						       NvSubMemFormat);
			NOUVEAU_MEM_FREE(out_mem);
		} else {
			DEBUG("....direct VRAM copy\n");
			_mesa_memcpy(nbo->gpu_mem->map + offset,
				     nbo->cpu_mem_sys + offset,
				     size);
		}
	}
d38 3
a40 7
	return GL_TRUE;
}

GLboolean
nouveau_bo_move_in(GLcontext *ctx, struct gl_buffer_object *bo)
{
	nouveau_buffer_object *nbo = (nouveau_buffer_object *)bo;
d42 1
a42 1
	DEBUG("bo=%p\n", bo);
d44 1
a44 64
	if (bo->OnCard)
		return GL_TRUE;
	assert(nbo->gpu_mem_flags);

	nbo->gpu_mem = nouveau_mem_alloc(ctx, nbo->gpu_mem_flags |
					      NOUVEAU_MEM_MAPPED,
					      bo->Size, 0);
	assert(nbo->gpu_mem);

	if (nbo->cpu_mem_flags) {
		if ((nbo->cpu_mem_flags|NOUVEAU_MEM_MAPPED) != nbo->gpu_mem->type) {
			DEBUG("..need cpu_mem buffer\n");

			nbo->cpu_mem = nouveau_mem_alloc(ctx,
							 nbo->cpu_mem_flags |
							 NOUVEAU_MEM_MAPPED,
							 bo->Size, 0);

			if (nbo->cpu_mem) {
				DEBUG("....alloc ok, kill sys_mem buffer\n");
				_mesa_memcpy(nbo->cpu_mem->map,
					     nbo->cpu_mem_sys, bo->Size);
				FREE(nbo->cpu_mem_sys);
			}
		} else {
			DEBUG("..cpu direct access to GPU buffer\n");
			nbo->cpu_mem = nbo->gpu_mem;
		}
	}
	nouveau_bo_upload_to_screen(ctx, 0, bo->Size, bo);

	bo->OnCard = GL_TRUE;
	return GL_TRUE;
}

GLboolean
nouveau_bo_move_out(GLcontext *ctx, struct gl_buffer_object *bo)
{
	nouveauContextPtr nmesa = NOUVEAU_CONTEXT(ctx);
	nouveau_buffer_object *nbo = (nouveau_buffer_object *)bo;
	GLuint nr_dirty;

	DEBUG("bo=%p\n", bo);
	if (!bo->OnCard)
		return GL_TRUE;

	nr_dirty = nouveau_bo_download_dirty(ctx, bo);
	if (nbo->cpu_mem) {
		if (nr_dirty && nbo->cpu_mem != nbo->gpu_mem)
			nouveau_notifier_wait_nop(ctx, nmesa->syncNotifier,
						       NvSubMemFormat);
		DEBUG("..destroy cpu_mem buffer\n");
		nbo->cpu_mem_sys = malloc(bo->Size);
		assert(nbo->cpu_mem_sys);
		_mesa_memcpy(nbo->cpu_mem_sys, nbo->cpu_mem->map, bo->Size);
		if (nbo->cpu_mem == nbo->gpu_mem)
			nbo->cpu_mem = NULL;
		else
			NOUVEAU_MEM_FREE(nbo->cpu_mem);
	}
	NOUVEAU_MEM_FREE(nbo->gpu_mem);

	bo->OnCard = GL_FALSE;
	return GL_TRUE;
d48 1
a48 2
nouveau_bo_choose_storage_method(GLcontext *ctx, GLenum usage,
						 struct gl_buffer_object *bo)
d50 1
a50 31
	nouveau_buffer_object *nbo = (nouveau_buffer_object *)bo;
	GLuint gpu_type = 0;
	GLuint cpu_type = 0;

	switch (usage) {
	/* Client source, changes often, used by GL many times */
	case GL_DYNAMIC_DRAW_ARB:
		gpu_type = NOUVEAU_MEM_AGP | NOUVEAU_MEM_FB_ACCEPTABLE;
		cpu_type = NOUVEAU_MEM_AGP;
		break;
	/* GL source, changes often, client reads many times */
	case GL_DYNAMIC_READ_ARB:
	/* Client source, specified once, used by GL many times */
	case GL_STATIC_DRAW_ARB:
	/* GL source, specified once, client reads many times */
	case GL_STATIC_READ_ARB:
	/* Client source, specified once, used by GL a few times */
	case GL_STREAM_DRAW_ARB:
	/* GL source, specified once, client reads a few times */
	case GL_STREAM_READ_ARB:
	/* GL source, changes often, used by GL many times*/
	case GL_DYNAMIC_COPY_ARB:
	/* GL source, specified once, used by GL many times */
	case GL_STATIC_COPY_ARB:
	/* GL source, specified once, used by GL a few times */
	case GL_STREAM_COPY_ARB:
		gpu_type = NOUVEAU_MEM_FB;
		break;
	default: 
		assert(0);
	}
d52 2
a53 3
	nbo->gpu_mem_flags = gpu_type;
	nbo->cpu_mem_flags = cpu_type;
	nbo->usage	   = usage;
d56 16
a71 35
void
nouveau_bo_init_storage(GLcontext *ctx,	GLuint valid_gpu_access,
					GLsizeiptrARB size,
					const GLvoid *data,
					GLenum usage,
					struct gl_buffer_object *bo)
{
	nouveau_buffer_object *nbo = (nouveau_buffer_object *)bo;

	DEBUG("bo=%p\n", bo);

	/* Free up previous buffers if we can't reuse them */
	if (nbo->usage != usage ||
			(nbo->gpu_mem && (nbo->gpu_mem->size != size))) {
		if (nbo->cpu_mem_sys)
			FREE(nbo->cpu_mem_sys);
		if (nbo->cpu_mem) {
			if (nbo->cpu_mem != nbo->gpu_mem)
				NOUVEAU_MEM_FREE(nbo->cpu_mem);
			else
				nbo->cpu_mem = NULL;
		}
		if (nbo->gpu_mem)
			NOUVEAU_MEM_FREE(nbo->gpu_mem);

		bo->OnCard = GL_FALSE;
		nbo->cpu_mem_sys = calloc(1, size);
	}

	nouveau_bo_choose_storage_method(ctx, usage, bo);
	/* Force off flags that may not be ok for a given buffer */
	nbo->gpu_mem_flags &= valid_gpu_access;

	bo->Usage  = usage;
	bo->Size   = size;
d74 3
a76 29
		GLvoid *map = nouveau_bo_map(ctx, GL_WRITE_ONLY_ARB, bo);
		_mesa_memcpy(map, data, size);
		nouveau_bo_dirty_all(ctx, GL_FALSE, bo);
		nouveau_bo_unmap(ctx, bo);
	}
}

void *
nouveau_bo_map(GLcontext *ctx, GLenum access, struct gl_buffer_object *bo)
{
	nouveauContextPtr nmesa = NOUVEAU_CONTEXT(ctx);
	nouveau_buffer_object *nbo = (nouveau_buffer_object *)bo;

	DEBUG("bo=%p, access=%s\n", bo, _mesa_lookup_enum_by_nr(access));

	if (bo->OnCard && 
		(access == GL_READ_ONLY_ARB || access == GL_READ_WRITE_ARB)) {
		GLuint nr_dirty;

		DEBUG("..on card\n");
		nr_dirty = nouveau_bo_download_dirty(ctx, bo);

		/* nouveau_bo_download_dirty won't wait unless it needs to
		 * free a temp buffer, which isn't the case if cpu_mem is
		 * present.
		 */
		if (nr_dirty && nbo->cpu_mem && nbo->cpu_mem != nbo->gpu_mem)
			nouveau_notifier_wait_nop(ctx, nmesa->syncNotifier,
						       NvSubMemFormat);
d79 1
a79 171
	if (nbo->cpu_mem) {
		DEBUG("..access via cpu_mem\n");
		return nbo->cpu_mem->map;
	} else {
		DEBUG("..access via cpu_mem_sys\n");
		return nbo->cpu_mem_sys;
	}
}

void
nouveau_bo_unmap(GLcontext *ctx, struct gl_buffer_object *bo)
{
	DEBUG("unmap bo=%p\n", bo);
}

uint32_t
nouveau_bo_gpu_ref(GLcontext *ctx, struct gl_buffer_object *bo)
{
	nouveau_buffer_object *nbo = (nouveau_buffer_object *)bo;

	assert(nbo->mapped == GL_FALSE);

	DEBUG("gpu_ref\n");
	
	if (!bo->OnCard) {
		nouveau_bo_move_in(ctx, bo);
		bo->OnCard = GL_TRUE;
	}
	nouveau_bo_upload_dirty(ctx, bo);

	return nouveau_mem_gpu_offset_get(ctx, nbo->gpu_mem);
}

void
nouveau_bo_dirty_linear(GLcontext *ctx, GLboolean on_card,
			uint32_t offset, uint32_t size,
			struct gl_buffer_object *bo)
{
	nouveau_buffer_object *nbo = (nouveau_buffer_object *)bo;
	nouveau_bufferobj_dirty *dirty;
	uint32_t start = offset;
	uint32_t end = offset + size;
	int i;

	if (nbo->cpu_mem == nbo->gpu_mem)
		return;

	dirty = on_card ? &nbo->gpu_dirty : &nbo->cpu_dirty;

	DEBUG("on_card=%d, offset=%d, size=%d, bo=%p\n",
			on_card, offset, size, bo);

	for (i=0; i<dirty->nr_dirty; i++) {
		nouveau_bufferobj_region *r = &dirty->dirty[i];

		/* already dirty */
		if (start >= r->start && end <= r->end) {
			DEBUG("..already dirty\n");
			return;
		}

		/* add to the end of a region */
		if (start >= r->start && start <= r->end) {
			if (end > r->end) {
				DEBUG("..extend end of region\n");
				r->end = end;
				return;
			}
		}

		/* add to the start of a region */
		if (start < r->start && end >= r->end) {
			DEBUG("..extend start of region\n");
			r->start = start;
			/* .. and to the end */
			if (end > r->end) {
				DEBUG("....and end\n");
				r->end = end;
			}
			return;
		}
	}

	/* new region */
	DEBUG("..new dirty\n");
	dirty->nr_dirty++;
	dirty->dirty = realloc(dirty->dirty,
			       sizeof(nouveau_bufferobj_region) *
			       dirty->nr_dirty);
	dirty->dirty[dirty->nr_dirty - 1].start = start;
	dirty->dirty[dirty->nr_dirty - 1].end   = end;
}

void
nouveau_bo_dirty_all(GLcontext *ctx, GLboolean on_card,
		     struct gl_buffer_object *bo)
{
	nouveau_buffer_object *nbo = (nouveau_buffer_object *)bo;
	nouveau_bufferobj_dirty *dirty;

	dirty = on_card ? &nbo->gpu_dirty : &nbo->cpu_dirty;
	
	DEBUG("dirty all\n");
	if (dirty->nr_dirty) {
		FREE(dirty->dirty);
		dirty->dirty    = NULL;
		dirty->nr_dirty = 0;
	}

	nouveau_bo_dirty_linear(ctx, on_card, 0, bo->Size, bo);
}

GLuint
nouveau_bo_upload_dirty(GLcontext *ctx, struct gl_buffer_object *bo)
{
	nouveau_buffer_object *nbo = (nouveau_buffer_object *)bo;
	nouveau_bufferobj_dirty *dirty = &nbo->cpu_dirty;
	GLuint nr_dirty;
	int i;

	nr_dirty = dirty->nr_dirty;
	if (!nr_dirty) {
		DEBUG("clean\n");
		return nr_dirty;
	}

	for (i=0; i<nr_dirty; i++) {
		nouveau_bufferobj_region *r = &dirty->dirty[i];

		DEBUG("dirty %d: o=0x%08x, s=0x%08x\n",
				i, r->start, r->end - r->start);
		nouveau_bo_upload_to_screen(ctx,
					    r->start, r->end - r->start, bo);
	}

	FREE(dirty->dirty);
	dirty->dirty    = NULL;
	dirty->nr_dirty = 0;

	return nr_dirty;
}

GLuint
nouveau_bo_download_dirty(GLcontext *ctx, struct gl_buffer_object *bo)
{
	nouveau_buffer_object *nbo = (nouveau_buffer_object *)bo;
	nouveau_bufferobj_dirty *dirty = &nbo->gpu_dirty;
	GLuint nr_dirty;
	int i;

	nr_dirty = dirty->nr_dirty;
	if (nr_dirty) {
		DEBUG("clean\n");
		return nr_dirty;
	}
	
	for (i=0; i<nr_dirty; i++) {
		nouveau_bufferobj_region *r = &dirty->dirty[i];

		DEBUG("dirty %d: o=0x%08x, s=0x%08x\n",
				i, r->start, r->end - r->start);
		nouveau_bo_download_from_screen(ctx,
						r->start,
						r->end - r->start, bo);
	}

	FREE(dirty->dirty);
	dirty->dirty    = NULL;
	dirty->nr_dirty = 0;

	return nr_dirty;
d83 3
a85 1
nouveauBindBuffer(GLcontext *ctx, GLenum target, struct gl_buffer_object *obj)
d87 1
a87 6
}

static struct gl_buffer_object *
nouveauNewBufferObject(GLcontext *ctx, GLuint buffer, GLenum target)
{
	nouveau_buffer_object *nbo;
d89 3
a91 6
	nbo = CALLOC_STRUCT(nouveau_buffer_object_t);
	if (nbo)
		_mesa_initialize_buffer_object(&nbo->mesa, buffer, target);
	DEBUG("bo=%p\n", nbo);

	return nbo ? &nbo->mesa : NULL;
d95 3
a97 1
nouveauDeleteBuffer(GLcontext *ctx, struct gl_buffer_object *obj)
d99 1
a99 8
	nouveau_buffer_object *nbo = (nouveau_buffer_object *)obj;

	if (nbo->gpu_dirty.nr_dirty)
		FREE(nbo->gpu_dirty.dirty);
	if (nbo->cpu_dirty.nr_dirty)
		FREE(nbo->cpu_dirty.dirty);
	if (nbo->cpu_mem) nouveau_mem_free(ctx, nbo->cpu_mem);
	if (nbo->gpu_mem) nouveau_mem_free(ctx, nbo->gpu_mem);
d101 3
a103 1
	_mesa_delete_buffer_object(ctx, obj);
d106 3
a108 4
static void
nouveauBufferData(GLcontext *ctx, GLenum target, GLsizeiptrARB size,
		  const GLvoid *data, GLenum usage,
		  struct gl_buffer_object *obj)
d110 2
a111 17
	GLuint gpu_flags;

	DEBUG("target=%s, size=%d, data=%p, usage=%s, obj=%p\n",
			_mesa_lookup_enum_by_nr(target),
			(GLuint)size, data,
			_mesa_lookup_enum_by_nr(usage),
			obj);

	switch (target) {
	case GL_ELEMENT_ARRAY_BUFFER_ARB:
		gpu_flags = 0;
		break;
	default:
		gpu_flags = NOUVEAU_BO_VRAM_OK | NOUVEAU_BO_AGP_OK;
		break;
	}
	nouveau_bo_init_storage(ctx, gpu_flags, size, data, usage, obj);
d114 4
a117 21
static void
nouveauBufferSubData(GLcontext *ctx, GLenum target, GLintptrARB offset,
		     GLsizeiptrARB size, const GLvoid *data,
		     struct gl_buffer_object *obj)
{
	GLvoid *out;

	DEBUG("target=%s, offset=0x%x, size=%d, data=%p, obj=%p\n",
			_mesa_lookup_enum_by_nr(target),
			(GLuint)offset, (GLuint)size, data, obj);

	out = nouveau_bo_map(ctx, GL_WRITE_ONLY_ARB, obj);
	_mesa_memcpy(out + offset, data, size);
	nouveau_bo_dirty_linear(ctx, GL_FALSE, offset, size, obj);
	nouveau_bo_unmap(ctx, obj);
}

static void
nouveauGetBufferSubData(GLcontext *ctx, GLenum target, GLintptrARB offset,
		     GLsizeiptrARB size, GLvoid *data,
		     struct gl_buffer_object *obj)
d119 2
a120 1
	const GLvoid *in;
d122 1
a122 8
	DEBUG("target=%s, offset=0x%x, size=%d, data=%p, obj=%p\n",
			_mesa_lookup_enum_by_nr(target),
			(GLuint)offset, (GLuint)size, data, obj);

	in = nouveau_bo_map(ctx, GL_READ_ONLY_ARB, obj);
	_mesa_memcpy(data, in + offset, size);
	nouveau_bo_unmap(ctx, obj);
}
d124 1
a124 12
static void *
nouveauMapBuffer(GLcontext *ctx, GLenum target, GLenum access,
		 struct gl_buffer_object *obj)
{
	DEBUG("target=%s, access=%s, obj=%p\n",
			_mesa_lookup_enum_by_nr(target),
			_mesa_lookup_enum_by_nr(access),
			obj
			);

	/* Already mapped.. */
	if (obj->Pointer)
d127 13
a139 21
	/* Have to pass READ_WRITE here, nouveau_bo_map will only ensure that
	 * the cpu_mem buffer is up-to-date if we ask for read access.
	 *
	 * However, even if the client only asks for write access, we're still
	 * forced to reupload the entire buffer.  So, we need the cpu_mem buffer
	 * to have the correct data all the time.
	 */
	obj->Pointer = nouveau_bo_map(ctx, GL_READ_WRITE_ARB, obj);

	/* The GL spec says that a client attempting to write to a bufferobj
	 * mapped READ_ONLY object may have unpredictable results, possibly
	 * even program termination.
	 *
	 * We're going to use this, and only mark the buffer as dirtied if
	 * the client asks for write access.
	 */
	if (target != GL_READ_ONLY_ARB) {
		/* We have no way of knowing what was modified by the client,
		 * so the entire buffer gets dirtied. */
		nouveau_bo_dirty_all(ctx, GL_FALSE, obj);
	}
d145 1
a145 1
nouveauUnmapBuffer(GLcontext *ctx, GLenum target, struct gl_buffer_object *obj)
d147 1
a147 1
	DEBUG("target=%s, obj=%p\n", _mesa_lookup_enum_by_nr(target), obj);
d151 2
a152 1
	nouveau_bo_unmap(ctx, obj);
d154 4
d160 1
a160 1
	  
d162 1
a162 1
nouveauInitBufferObjects(GLcontext *ctx)
d164 8
a171 8
	ctx->Driver.BindBuffer		= nouveauBindBuffer;
	ctx->Driver.NewBufferObject	= nouveauNewBufferObject;
	ctx->Driver.DeleteBuffer	= nouveauDeleteBuffer;
	ctx->Driver.BufferData		= nouveauBufferData;
	ctx->Driver.BufferSubData	= nouveauBufferSubData;
	ctx->Driver.GetBufferSubData	= nouveauGetBufferSubData;
	ctx->Driver.MapBuffer		= nouveauMapBuffer;
	ctx->Driver.UnmapBuffer		= nouveauUnmapBuffer;
a172 1

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d1 2
a2 25
/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
a3 1
#include "nouveau_driver.h"
d5 1
d7 14
d22 85
a106 1
#include "main/bufferobj.h"
d108 2
a109 2
static inline char *
get_bufferobj_map(struct gl_buffer_object *obj, unsigned flags)
d111 1
a111 2
	struct nouveau_bufferobj *nbo = to_nouveau_bufferobj(obj);
	void *map = NULL;
d113 30
a142 6
	if (nbo->sys) {
		map = nbo->sys;
	} else if (nbo->bo) {
		nouveau_bo_map(nbo->bo, flags);
		map = nbo->bo->map;
		nouveau_bo_unmap(nbo->bo);
d144 1
d146 2
a147 1
	return map;
d150 2
a151 2
static struct gl_buffer_object *
nouveau_bufferobj_new(struct gl_context *ctx, GLuint buffer, GLenum target)
d153 23
a175 1
	struct nouveau_bufferobj *nbo;
d177 3
a179 3
	nbo = CALLOC_STRUCT(nouveau_bufferobj);
	if (!nbo)
		return NULL;
d181 35
a215 1
	_mesa_initialize_buffer_object(&nbo->base, buffer, target);
d217 3
a219 1
	return &nbo->base;
d222 6
a227 2
static void
nouveau_bufferobj_del(struct gl_context *ctx, struct gl_buffer_object *obj)
d229 3
a231 1
	struct nouveau_bufferobj *nbo = to_nouveau_bufferobj(obj);
d233 31
a263 3
	nouveau_bo_ref(NULL, &nbo->bo);
	FREE(nbo->sys);
	FREE(nbo);
d266 23
a288 20
static GLboolean
nouveau_bufferobj_data(struct gl_context *ctx, GLenum target, GLsizeiptrARB size,
		       const GLvoid *data, GLenum usage,
		       struct gl_buffer_object *obj)
{
	struct nouveau_bufferobj *nbo = to_nouveau_bufferobj(obj);
	int ret;

	obj->Size = size;
	obj->Usage = usage;

	/* Free previous storage */
	nouveau_bo_ref(NULL, &nbo->bo);
	FREE(nbo->sys);

	if (target == GL_ELEMENT_ARRAY_BUFFER_ARB ||
	    (size < 512 && usage == GL_DYNAMIC_DRAW_ARB) ||
	    context_chipset(ctx) < 0x10) {
		/* Heuristic: keep it in system ram */
		nbo->sys = MALLOC(size);
d290 3
d294 129
a422 5
		/* Get a hardware BO */
		ret = nouveau_bo_new(context_dev(ctx),
				     NOUVEAU_BO_GART | NOUVEAU_BO_MAP, 0,
				     size, &nbo->bo);
		assert(!ret);
d425 37
a461 2
	if (data)
		memcpy(get_bufferobj_map(obj, NOUVEAU_BO_WR), data, size);
d463 16
a478 1
	return GL_TRUE;
d482 1
a482 3
nouveau_bufferobj_subdata(struct gl_context *ctx, GLenum target, GLintptrARB offset,
			  GLsizeiptrARB size, const GLvoid *data,
			  struct gl_buffer_object *obj)
d484 10
a493 1
	memcpy(get_bufferobj_map(obj, NOUVEAU_BO_WR) + offset, data, size);
d497 3
a499 3
nouveau_bufferobj_get_subdata(struct gl_context *ctx, GLenum target, GLintptrARB offset,
			   GLsizeiptrARB size, GLvoid *data,
			   struct gl_buffer_object *obj)
d501 17
a517 1
	memcpy(data, get_bufferobj_map(obj, NOUVEAU_BO_RD) + offset, size);
d520 4
a523 3
static void *
nouveau_bufferobj_map(struct gl_context *ctx, GLenum target, GLenum access,
		   struct gl_buffer_object *obj)
d525 11
a535 1
	unsigned flags = 0;
d537 6
a542 6
	if (access == GL_READ_ONLY_ARB ||
	    access == GL_READ_WRITE_ARB)
		flags |= GL_MAP_READ_BIT;
	if (access == GL_WRITE_ONLY_ARB ||
	    access == GL_READ_WRITE_ARB)
		flags |= GL_MAP_WRITE_BIT;
d544 7
a550 2
	return ctx->Driver.MapBufferRange(ctx, target, 0, obj->Size, flags,
					  obj);
d554 8
a561 15
nouveau_bufferobj_map_range(struct gl_context *ctx, GLenum target, GLintptr offset,
			    GLsizeiptr length, GLbitfield access,
			    struct gl_buffer_object *obj)
{
	unsigned flags = 0;
	char *map;

	assert(!obj->Pointer);

	if (access & GL_MAP_READ_BIT)
		flags |= NOUVEAU_BO_RD;
	if (access & GL_MAP_WRITE_BIT)
		flags |= NOUVEAU_BO_WR;
	if (access & GL_MAP_UNSYNCHRONIZED_BIT)
		flags |= NOUVEAU_BO_NOSYNC;
d563 2
a564 2
	map = get_bufferobj_map(obj, flags);
	if (!map)
d567 21
a587 4
	obj->Pointer = map + offset;
	obj->Offset = offset;
	obj->Length = length;
	obj->AccessFlags = access;
d593 1
a593 1
nouveau_bufferobj_unmap(struct gl_context *ctx, GLenum target, struct gl_buffer_object *obj)
d595 2
d599 1
a600 4
	obj->Offset = 0;
	obj->Length = 0;
	obj->AccessFlags = 0;

d603 1
a603 1

d605 1
a605 1
nouveau_bufferobj_functions_init(struct dd_function_table *functions)
d607 8
a614 8
	functions->NewBufferObject = nouveau_bufferobj_new;
	functions->DeleteBuffer	= nouveau_bufferobj_del;
	functions->BufferData = nouveau_bufferobj_data;
	functions->BufferSubData = nouveau_bufferobj_subdata;
	functions->GetBufferSubData = nouveau_bufferobj_get_subdata;
	functions->MapBuffer = nouveau_bufferobj_map;
	functions->MapBufferRange = nouveau_bufferobj_map_range;
	functions->UnmapBuffer = nouveau_bufferobj_unmap;
d616 1
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d34 1
a34 2
get_bufferobj_map(struct gl_context *ctx, struct gl_buffer_object *obj,
		  unsigned flags)
d42 1
a42 1
		nouveau_bo_map(nbo->bo, flags, context_client(ctx));
d44 1
d59 1
a59 1
	_mesa_initialize_buffer_object(ctx, &nbo->base, buffer, target);
d70 2
a71 2
	free(nbo->sys);
	free(nbo);
d87 1
a87 1
	free(nbo->sys);
d93 1
a93 1
		nbo->sys = malloc(size);
d99 1
a99 1
				     size, NULL, &nbo->bo);
d104 1
a104 1
		memcpy(get_bufferobj_map(ctx, obj, NOUVEAU_BO_WR), data, size);
d110 1
a110 1
nouveau_bufferobj_subdata(struct gl_context *ctx, GLintptrARB offset,
d114 1
a114 1
	memcpy(get_bufferobj_map(ctx, obj, NOUVEAU_BO_WR) + offset, data, size);
d118 1
a118 1
nouveau_bufferobj_get_subdata(struct gl_context *ctx, GLintptrARB offset,
d122 1
a122 1
	memcpy(data, get_bufferobj_map(ctx, obj, NOUVEAU_BO_RD) + offset, size);
d126 18
a143 1
nouveau_bufferobj_map_range(struct gl_context *ctx, GLintptr offset,
d152 6
a157 6
	if (!(access & GL_MAP_UNSYNCHRONIZED_BIT)) {
		if (access & GL_MAP_READ_BIT)
			flags |= NOUVEAU_BO_RD;
		if (access & GL_MAP_WRITE_BIT)
			flags |= NOUVEAU_BO_WR;
	}
d159 1
a159 1
	map = get_bufferobj_map(ctx, obj, flags);
d172 1
a172 1
nouveau_bufferobj_unmap(struct gl_context *ctx, struct gl_buffer_object *obj)
d192 1
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d76 1
a76 1
		       const GLvoid *data, GLenum usage, GLbitfield storageFlags,
a83 1
        obj->StorageFlags = storageFlags;
d98 1
a98 2
				     NOUVEAU_BO_GART | NOUVEAU_BO_MAP,
				     ctx->Const.MinMapBufferAlignment,
d128 1
a128 2
			    struct gl_buffer_object *obj,
                            gl_map_buffer_index index)
d133 1
a133 1
	assert(!obj->Mappings[index].Pointer);
d146 4
a149 4
	obj->Mappings[index].Pointer = map + offset;
	obj->Mappings[index].Offset = offset;
	obj->Mappings[index].Length = length;
	obj->Mappings[index].AccessFlags = access;
d151 1
a151 1
	return obj->Mappings[index].Pointer;
d155 1
a155 2
nouveau_bufferobj_unmap(struct gl_context *ctx, struct gl_buffer_object *obj,
                        gl_map_buffer_index index)
d157 1
a157 1
	assert(obj->Mappings[index].Pointer);
d159 4
a162 4
	obj->Mappings[index].Pointer = NULL;
	obj->Mappings[index].Offset = 0;
	obj->Mappings[index].Length = 0;
	obj->Mappings[index].AccessFlags = 0;
@


1.1.1.5
log
@Import Mesa 10.2.7
@
text
@a88 1
	nbo->sys = NULL;
@


1.1.1.6
log
@Import Mesa 10.4.3
@
text
@d51 1
a51 1
nouveau_bufferobj_new(struct gl_context *ctx, GLuint buffer)
d59 1
a59 1
	_mesa_initialize_buffer_object(ctx, &nbo->base, buffer);
@


1.1.1.7
log
@Import Mesa 10.2.9
@
text
@d51 1
a51 1
nouveau_bufferobj_new(struct gl_context *ctx, GLuint buffer, GLenum target)
d59 1
a59 1
	_mesa_initialize_buffer_object(ctx, &nbo->base, buffer, target);
@


