head	1.12;
access;
symbols
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	v10_2_9:1.1.1.7
	v10_4_3:1.1.1.6
	v10_2_7:1.1.1.5
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	v10_2_3:1.1.1.5
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.4
	v9_2_3:1.1.1.4
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.4
	v9_2_0:1.1.1.4
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.11;
commitid	TnlogFl9nOv2eaRf;

1.11
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.10;
commitid	4ry2gvZGMXkCUD2n;

1.10
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.9;
commitid	mcxB0JvoI9gTDYXU;

1.9
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.8;
commitid	WPD6rgPryPkvXOr9;

1.8
date	2013.09.05.14.04.20;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.46;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.46;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.28.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.05.13.15.38;	author jsg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.07.09.20.34.51;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.6
date	2015.01.25.14.11.45;	author jsg;	state Exp;
branches;
next	1.1.1.7;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.7
date	2015.02.20.22.48.50;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.12
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */


#ifndef BRW_STRUCTS_H
#define BRW_STRUCTS_H

struct brw_urb_fence
{
   struct
   {
      unsigned length:8;
      unsigned vs_realloc:1;
      unsigned gs_realloc:1;
      unsigned clp_realloc:1;
      unsigned sf_realloc:1;
      unsigned vfe_realloc:1;
      unsigned cs_realloc:1;
      unsigned pad:2;
      unsigned opcode:16;
   } header;

   struct
   {
      unsigned vs_fence:10;
      unsigned gs_fence:10;
      unsigned clp_fence:10;
      unsigned pad:2;
   } bits0;

   struct
   {
      unsigned sf_fence:10;
      unsigned vf_fence:10;
      unsigned cs_fence:11;
      unsigned pad:1;
   } bits1;
};

/* State structs for the various fixed function units:
 */


struct thread0
{
   unsigned pad0:1;
   unsigned grf_reg_count:3;
   unsigned pad1:2;
   unsigned kernel_start_pointer:26; /* Offset from GENERAL_STATE_BASE */
};

struct thread1
{
   unsigned ext_halt_exception_enable:1;
   unsigned sw_exception_enable:1;
   unsigned mask_stack_exception_enable:1;
   unsigned timeout_exception_enable:1;
   unsigned illegal_op_exception_enable:1;
   unsigned pad0:3;
   unsigned depth_coef_urb_read_offset:6;	/* WM only */
   unsigned pad1:2;
   unsigned floating_point_mode:1;
   unsigned thread_priority:1;
   unsigned binding_table_entry_count:8;
   unsigned pad3:5;
   unsigned single_program_flow:1;
};

struct thread2
{
   unsigned per_thread_scratch_space:4;
   unsigned pad0:6;
   unsigned scratch_space_base_pointer:22;
};


struct thread3
{
   unsigned dispatch_grf_start_reg:4;
   unsigned urb_entry_read_offset:6;
   unsigned pad0:1;
   unsigned urb_entry_read_length:6;
   unsigned pad1:1;
   unsigned const_urb_entry_read_offset:6;
   unsigned pad2:1;
   unsigned const_urb_entry_read_length:6;
   unsigned pad3:1;
};



struct brw_clip_unit_state
{
   struct thread0 thread0;
   struct
   {
      unsigned pad0:7;
      unsigned sw_exception_enable:1;
      unsigned pad1:3;
      unsigned mask_stack_exception_enable:1;
      unsigned pad2:1;
      unsigned illegal_op_exception_enable:1;
      unsigned pad3:2;
      unsigned floating_point_mode:1;
      unsigned thread_priority:1;
      unsigned binding_table_entry_count:8;
      unsigned pad4:5;
      unsigned single_program_flow:1;
   } thread1;

   struct thread2 thread2;
   struct thread3 thread3;

   struct
   {
      unsigned pad0:9;
      unsigned gs_output_stats:1; /* not always */
      unsigned stats_enable:1;
      unsigned nr_urb_entries:7;
      unsigned pad1:1;
      unsigned urb_entry_allocation_size:5;
      unsigned pad2:1;
      unsigned max_threads:5; 	/* may be less */
      unsigned pad3:2;
   } thread4;

   struct
   {
      unsigned pad0:13;
      unsigned clip_mode:3;
      unsigned userclip_enable_flags:8;
      unsigned userclip_must_clip:1;
      unsigned negative_w_clip_test:1;
      unsigned guard_band_enable:1;
      unsigned viewport_z_clip_enable:1;
      unsigned viewport_xy_clip_enable:1;
      unsigned vertex_position_space:1;
      unsigned api_mode:1;
      unsigned pad2:1;
   } clip5;

   struct
   {
      unsigned pad0:5;
      unsigned clipper_viewport_state_ptr:27;
   } clip6;


   float viewport_xmin;
   float viewport_xmax;
   float viewport_ymin;
   float viewport_ymax;
};

struct gen6_blend_state
{
   struct {
      unsigned dest_blend_factor:5;
      unsigned source_blend_factor:5;
      unsigned pad3:1;
      unsigned blend_func:3;
      unsigned pad2:1;
      unsigned ia_dest_blend_factor:5;
      unsigned ia_source_blend_factor:5;
      unsigned pad1:1;
      unsigned ia_blend_func:3;
      unsigned pad0:1;
      unsigned ia_blend_enable:1;
      unsigned blend_enable:1;
   } blend0;

   struct {
      unsigned post_blend_clamp_enable:1;
      unsigned pre_blend_clamp_enable:1;
      unsigned clamp_range:2;
      unsigned pad0:4;
      unsigned x_dither_offset:2;
      unsigned y_dither_offset:2;
      unsigned dither_enable:1;
      unsigned alpha_test_func:3;
      unsigned alpha_test_enable:1;
      unsigned pad1:1;
      unsigned logic_op_func:4;
      unsigned logic_op_enable:1;
      unsigned pad2:1;
      unsigned write_disable_b:1;
      unsigned write_disable_g:1;
      unsigned write_disable_r:1;
      unsigned write_disable_a:1;
      unsigned pad3:1;
      unsigned alpha_to_coverage_dither:1;
      unsigned alpha_to_one:1;
      unsigned alpha_to_coverage:1;
   } blend1;
};

struct gen6_color_calc_state
{
   struct {
      unsigned alpha_test_format:1;
      unsigned pad0:14;
      unsigned round_disable:1;
      unsigned bf_stencil_ref:8;
      unsigned stencil_ref:8;
   } cc0;

   union {
      float alpha_ref_f;
      struct {
	 unsigned ui:8;
	 unsigned pad0:24;
      } alpha_ref_fi;
   } cc1;

   float constant_r;
   float constant_g;
   float constant_b;
   float constant_a;
};

struct gen6_depth_stencil_state
{
   struct {
      unsigned pad0:3;
      unsigned bf_stencil_pass_depth_pass_op:3;
      unsigned bf_stencil_pass_depth_fail_op:3;
      unsigned bf_stencil_fail_op:3;
      unsigned bf_stencil_func:3;
      unsigned bf_stencil_enable:1;
      unsigned pad1:2;
      unsigned stencil_write_enable:1;
      unsigned stencil_pass_depth_pass_op:3;
      unsigned stencil_pass_depth_fail_op:3;
      unsigned stencil_fail_op:3;
      unsigned stencil_func:3;
      unsigned stencil_enable:1;
   } ds0;

   struct {
      unsigned bf_stencil_write_mask:8;
      unsigned bf_stencil_test_mask:8;
      unsigned stencil_write_mask:8;
      unsigned stencil_test_mask:8;
   } ds1;

   struct {
      unsigned pad0:26;
      unsigned depth_write_enable:1;
      unsigned depth_test_func:3;
      unsigned pad1:1;
      unsigned depth_test_enable:1;
   } ds2;
};

struct brw_cc_unit_state
{
   struct
   {
      unsigned pad0:3;
      unsigned bf_stencil_pass_depth_pass_op:3;
      unsigned bf_stencil_pass_depth_fail_op:3;
      unsigned bf_stencil_fail_op:3;
      unsigned bf_stencil_func:3;
      unsigned bf_stencil_enable:1;
      unsigned pad1:2;
      unsigned stencil_write_enable:1;
      unsigned stencil_pass_depth_pass_op:3;
      unsigned stencil_pass_depth_fail_op:3;
      unsigned stencil_fail_op:3;
      unsigned stencil_func:3;
      unsigned stencil_enable:1;
   } cc0;


   struct
   {
      unsigned bf_stencil_ref:8;
      unsigned stencil_write_mask:8;
      unsigned stencil_test_mask:8;
      unsigned stencil_ref:8;
   } cc1;


   struct
   {
      unsigned logicop_enable:1;
      unsigned pad0:10;
      unsigned depth_write_enable:1;
      unsigned depth_test_function:3;
      unsigned depth_test:1;
      unsigned bf_stencil_write_mask:8;
      unsigned bf_stencil_test_mask:8;
   } cc2;


   struct
   {
      unsigned pad0:8;
      unsigned alpha_test_func:3;
      unsigned alpha_test:1;
      unsigned blend_enable:1;
      unsigned ia_blend_enable:1;
      unsigned pad1:1;
      unsigned alpha_test_format:1;
      unsigned pad2:16;
   } cc3;

   struct
   {
      unsigned pad0:5;
      unsigned cc_viewport_state_offset:27; /* Offset from GENERAL_STATE_BASE */
   } cc4;

   struct
   {
      unsigned pad0:2;
      unsigned ia_dest_blend_factor:5;
      unsigned ia_src_blend_factor:5;
      unsigned ia_blend_function:3;
      unsigned statistics_enable:1;
      unsigned logicop_func:4;
      unsigned pad1:11;
      unsigned dither_enable:1;
   } cc5;

   struct
   {
      unsigned clamp_post_alpha_blend:1;
      unsigned clamp_pre_alpha_blend:1;
      unsigned clamp_range:2;
      unsigned pad0:11;
      unsigned y_dither_offset:2;
      unsigned x_dither_offset:2;
      unsigned dest_blend_factor:5;
      unsigned src_blend_factor:5;
      unsigned blend_function:3;
   } cc6;

   struct {
      union {
	 float f;
	 uint8_t ub[4];
      } alpha_ref;
   } cc7;
};

struct brw_sf_unit_state
{
   struct thread0 thread0;
   struct thread1 thread1;
   struct thread2 thread2;
   struct thread3 thread3;

   struct
   {
      unsigned pad0:10;
      unsigned stats_enable:1;
      unsigned nr_urb_entries:7;
      unsigned pad1:1;
      unsigned urb_entry_allocation_size:5;
      unsigned pad2:1;
      unsigned max_threads:6;
      unsigned pad3:1;
   } thread4;

   struct
   {
      unsigned front_winding:1;
      unsigned viewport_transform:1;
      unsigned pad0:3;
      unsigned sf_viewport_state_offset:27; /* Offset from GENERAL_STATE_BASE */
   } sf5;

   struct
   {
      unsigned pad0:9;
      unsigned dest_org_vbias:4;
      unsigned dest_org_hbias:4;
      unsigned scissor:1;
      unsigned disable_2x2_trifilter:1;
      unsigned disable_zero_pix_trifilter:1;
      unsigned point_rast_rule:2;
      unsigned line_endcap_aa_region_width:2;
      unsigned line_width:4;
      unsigned fast_scissor_disable:1;
      unsigned cull_mode:2;
      unsigned aa_enable:1;
   } sf6;

   struct
   {
      unsigned point_size:11;
      unsigned use_point_size_state:1;
      unsigned subpixel_precision:1;
      unsigned sprite_point:1;
      unsigned pad0:10;
      unsigned aa_line_distance_mode:1;
      unsigned trifan_pv:2;
      unsigned linestrip_pv:2;
      unsigned tristrip_pv:2;
      unsigned line_last_pixel_enable:1;
   } sf7;

};

struct gen6_scissor_rect
{
   unsigned xmin:16;
   unsigned ymin:16;
   unsigned xmax:16;
   unsigned ymax:16;
};

struct brw_gs_unit_state
{
   struct thread0 thread0;
   struct thread1 thread1;
   struct thread2 thread2;
   struct thread3 thread3;

   struct
   {
      unsigned pad0:8;
      unsigned rendering_enable:1; /* for Ironlake */
      unsigned pad4:1;
      unsigned stats_enable:1;
      unsigned nr_urb_entries:7;
      unsigned pad1:1;
      unsigned urb_entry_allocation_size:5;
      unsigned pad2:1;
      unsigned max_threads:5;
      unsigned pad3:2;
   } thread4;

   struct
   {
      unsigned sampler_count:3;
      unsigned pad0:2;
      unsigned sampler_state_pointer:27;
   } gs5;


   struct
   {
      unsigned max_vp_index:4;
      unsigned pad0:12;
      unsigned svbi_post_inc_value:10;
      unsigned pad1:1;
      unsigned svbi_post_inc_enable:1;
      unsigned svbi_payload:1;
      unsigned discard_adjaceny:1;
      unsigned reorder_enable:1;
      unsigned pad2:1;
   } gs6;
};


struct brw_vs_unit_state
{
   struct thread0 thread0;
   struct thread1 thread1;
   struct thread2 thread2;
   struct thread3 thread3;

   struct
   {
      unsigned pad0:10;
      unsigned stats_enable:1;
      unsigned nr_urb_entries:7;
      unsigned pad1:1;
      unsigned urb_entry_allocation_size:5;
      unsigned pad2:1;
      unsigned max_threads:6;
      unsigned pad3:1;
   } thread4;

   struct
   {
      unsigned sampler_count:3;
      unsigned pad0:2;
      unsigned sampler_state_pointer:27;
   } vs5;

   struct
   {
      unsigned vs_enable:1;
      unsigned vert_cache_disable:1;
      unsigned pad0:30;
   } vs6;
};


struct brw_wm_unit_state
{
   struct thread0 thread0;
   struct thread1 thread1;
   struct thread2 thread2;
   struct thread3 thread3;

   struct {
      unsigned stats_enable:1;
      unsigned depth_buffer_clear:1;
      unsigned sampler_count:3;
      unsigned sampler_state_pointer:27;
   } wm4;

   struct
   {
      unsigned enable_8_pix:1;
      unsigned enable_16_pix:1;
      unsigned enable_32_pix:1;
      unsigned enable_con_32_pix:1;
      unsigned enable_con_64_pix:1;
      unsigned pad0:1;

      /* These next four bits are for Ironlake+ */
      unsigned fast_span_coverage_enable:1;
      unsigned depth_buffer_clear:1;
      unsigned depth_buffer_resolve_enable:1;
      unsigned hierarchical_depth_buffer_resolve_enable:1;

      unsigned legacy_global_depth_bias:1;
      unsigned line_stipple:1;
      unsigned depth_offset:1;
      unsigned polygon_stipple:1;
      unsigned line_aa_region_width:2;
      unsigned line_endcap_aa_region_width:2;
      unsigned early_depth_test:1;
      unsigned thread_dispatch_enable:1;
      unsigned program_uses_depth:1;
      unsigned program_computes_depth:1;
      unsigned program_uses_killpixel:1;
      unsigned legacy_line_rast: 1;
      unsigned transposed_urb_read_enable:1;
      unsigned max_threads:7;
   } wm5;

   float global_depth_offset_constant;
   float global_depth_offset_scale;

   /* for Ironlake only */
   struct {
      unsigned pad0:1;
      unsigned grf_reg_count_1:3;
      unsigned pad1:2;
      unsigned kernel_start_pointer_1:26;
   } wm8;

   struct {
      unsigned pad0:1;
      unsigned grf_reg_count_2:3;
      unsigned pad1:2;
      unsigned kernel_start_pointer_2:26;
   } wm9;

   struct {
      unsigned pad0:1;
      unsigned grf_reg_count_3:3;
      unsigned pad1:2;
      unsigned kernel_start_pointer_3:26;
   } wm10;
};

struct brw_sampler_default_color {
   float color[4];
};

struct gen5_sampler_default_color {
   uint8_t ub[4];
   float f[4];
   uint16_t hf[4];
   uint16_t us[4];
   int16_t s[4];
   uint8_t b[4];
};

struct brw_sampler_state
{

   struct
   {
      unsigned shadow_function:3;
      unsigned lod_bias:11;
      unsigned min_filter:3;
      unsigned mag_filter:3;
      unsigned mip_filter:2;
      unsigned base_level:5;
      unsigned min_mag_neq:1;
      unsigned lod_preclamp:1;
      unsigned default_color_mode:1;
      unsigned pad0:1;
      unsigned disable:1;
   } ss0;

   struct
   {
      unsigned r_wrap_mode:3;
      unsigned t_wrap_mode:3;
      unsigned s_wrap_mode:3;
      unsigned cube_control_mode:1;
      unsigned pad:2;
      unsigned max_lod:10;
      unsigned min_lod:10;
   } ss1;


   struct
   {
      unsigned pad:5;
      unsigned default_color_pointer:27;
   } ss2;

   struct
   {
      unsigned non_normalized_coord:1;
      unsigned pad:12;
      unsigned address_round:6;
      unsigned max_aniso:3;
      unsigned chroma_key_mode:1;
      unsigned chroma_key_index:2;
      unsigned chroma_key_enable:1;
      unsigned monochrome_filter_width:3;
      unsigned monochrome_filter_height:3;
   } ss3;
};

struct gen7_sampler_state
{
   struct
   {
      unsigned aniso_algorithm:1;
      unsigned lod_bias:13;
      unsigned min_filter:3;
      unsigned mag_filter:3;
      unsigned mip_filter:2;
      unsigned base_level:5;
      unsigned pad1:1;
      unsigned lod_preclamp:1;
      unsigned default_color_mode:1;
      unsigned pad0:1;
      unsigned disable:1;
   } ss0;

   struct
   {
      unsigned cube_control_mode:1;
      unsigned shadow_function:3;
      unsigned pad:4;
      unsigned max_lod:12;
      unsigned min_lod:12;
   } ss1;

   struct
   {
      unsigned pad:5;
      unsigned default_color_pointer:27;
   } ss2;

   struct
   {
      unsigned r_wrap_mode:3;
      unsigned t_wrap_mode:3;
      unsigned s_wrap_mode:3;
      unsigned pad:1;
      unsigned non_normalized_coord:1;
      unsigned trilinear_quality:2;
      unsigned address_round:6;
      unsigned max_aniso:3;
      unsigned chroma_key_mode:1;
      unsigned chroma_key_index:2;
      unsigned chroma_key_enable:1;
      unsigned pad0:6;
   } ss3;
};

struct brw_clipper_viewport
{
   float xmin;
   float xmax;
   float ymin;
   float ymax;
};

struct brw_cc_viewport
{
   float min_depth;
   float max_depth;
};

struct brw_sf_viewport
{
   struct {
      float m00;
      float m11;
      float m22;
      float m30;
      float m31;
      float m32;
   } viewport;

   /* scissor coordinates are inclusive */
   struct {
      int16_t xmin;
      int16_t ymin;
      int16_t xmax;
      int16_t ymax;
   } scissor;
};

struct gen6_sf_viewport {
   float m00;
   float m11;
   float m22;
   float m30;
   float m31;
   float m32;
};

struct gen7_sf_clip_viewport {
   struct {
      float m00;
      float m11;
      float m22;
      float m30;
      float m31;
      float m32;
   } viewport;

   unsigned pad0[2];

   struct {
      float xmin;
      float xmax;
      float ymin;
      float ymax;
   } guardband;

   float pad1[4];
};

struct brw_urb_immediate {
   unsigned opcode:4;
   unsigned offset:6;
   unsigned swizzle_control:2;
   unsigned pad:1;
   unsigned allocate:1;
   unsigned used:1;
   unsigned complete:1;
   unsigned response_length:4;
   unsigned msg_length:4;
   unsigned msg_target:4;
   unsigned pad1:3;
   unsigned end_of_thread:1;
};

/* Instruction format for the execution units:
 */

struct brw_instruction
{
   struct
   {
      unsigned opcode:7;
      unsigned pad:1;
      unsigned access_mode:1;
      unsigned mask_control:1;
      unsigned dependency_control:2;
      unsigned compression_control:2; /* gen6: quarter control */
      unsigned thread_control:2;
      unsigned predicate_control:4;
      unsigned predicate_inverse:1;
      unsigned execution_size:3;
      /**
       * Conditional Modifier for most instructions.  On Gen6+, this is also
       * used for the SEND instruction's Message Target/SFID.
       */
      unsigned destreg__conditionalmod:4;
      unsigned acc_wr_control:1;
      unsigned cmpt_control:1;
      unsigned debug_control:1;
      unsigned saturate:1;
   } header;

   union {
      struct
      {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;
	 unsigned src1_reg_type:3;
         unsigned nibctrl:1; /* gen7+ */
	 unsigned dest_subreg_nr:5;
	 unsigned dest_reg_nr:8;
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
      } da1;

      struct
      {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;        /* 0x00000c00 */
	 unsigned src1_reg_type:3;        /* 0x00007000 */
         unsigned nibctrl:1; /* gen7+ */
	 int dest_indirect_offset:10;	/* offset against the deref'd address reg */
	 unsigned dest_subreg_nr:3; /* subnr for the address reg a0.x */
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
      } ia1;

      struct
      {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;
	 unsigned src1_reg_type:3;
         unsigned nibctrl:1; /* gen7+ */
	 unsigned dest_writemask:4;
	 unsigned dest_subreg_nr:1;
	 unsigned dest_reg_nr:8;
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
      } da16;

      struct
      {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
         unsigned src1_reg_file:2;
         unsigned src1_reg_type:3;
         unsigned nibctrl:1; /* gen7+ */
	 unsigned dest_writemask:4;
	 int dest_indirect_offset:6;
	 unsigned dest_subreg_nr:3;
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
      } ia16;

      struct {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;
	 unsigned src1_reg_type:3;
	 unsigned pad:1;

	 int jump_count:16;
      } branch_gen6;

      struct {
         unsigned dest_reg_file:1; /* gen6, not gen7+ */
	 unsigned flag_subreg_num:1;
         unsigned flag_reg_nr:1; /* gen7+ */
         unsigned pad0:1;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src2_abs:1;
	 unsigned src2_negate:1;
         unsigned src_type:2; /* gen7+ */
         unsigned dst_type:2; /* gen7+ */
         unsigned pad1:1;
         unsigned nibctrl:1; /* gen7+ */
         unsigned pad2:1;
	 unsigned dest_writemask:4;
	 unsigned dest_subreg_nr:3;
	 unsigned dest_reg_nr:8;
      } da3src;

      uint32_t ud;
   } bits1;


   union {
      struct
      {
	 unsigned src0_subreg_nr:5;
	 unsigned src0_reg_nr:8;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_horiz_stride:2;
	 unsigned src0_width:3;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad:5;
      } da1;

      struct
      {
	 int src0_indirect_offset:10;
	 unsigned src0_subreg_nr:3;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_horiz_stride:2;
	 unsigned src0_width:3;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad:5;
      } ia1;

      struct
      {
	 unsigned src0_swz_x:2;
	 unsigned src0_swz_y:2;
	 unsigned src0_subreg_nr:1;
	 unsigned src0_reg_nr:8;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_swz_z:2;
	 unsigned src0_swz_w:2;
	 unsigned pad0:1;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad1:5;
      } da16;

      struct
      {
	 unsigned src0_swz_x:2;
	 unsigned src0_swz_y:2;
	 int src0_indirect_offset:6;
	 unsigned src0_subreg_nr:3;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_swz_z:2;
	 unsigned src0_swz_w:2;
	 unsigned pad0:1;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad1:5;
      } ia16;

      /* Extended Message Descriptor for Ironlake (Gen5) SEND instruction.
       *
       * Does not apply to Gen6+.  The SFID/message target moved to bits
       * 27:24 of the header (destreg__conditionalmod); EOT is in bits3.
       */
       struct
       {
           unsigned pad:26;
           unsigned end_of_thread:1;
           unsigned pad1:1;
           unsigned sfid:4;
       } send_gen5;  /* for Ironlake only */

      struct {
	 unsigned src0_rep_ctrl:1;
	 unsigned src0_swizzle:8;
	 unsigned src0_subreg_nr:3;
	 unsigned src0_reg_nr:8;
	 unsigned pad0:1;
	 unsigned src1_rep_ctrl:1;
	 unsigned src1_swizzle:8;
	 unsigned src1_subreg_nr_low:2;
      } da3src;

      uint32_t ud;
   } bits2;

   union
   {
      struct
      {
	 unsigned src1_subreg_nr:5;
	 unsigned src1_reg_nr:8;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src1_address_mode:1;
	 unsigned src1_horiz_stride:2;
	 unsigned src1_width:3;
	 unsigned src1_vert_stride:4;
	 unsigned pad0:7;
      } da1;

      struct
      {
	 unsigned src1_swz_x:2;
	 unsigned src1_swz_y:2;
	 unsigned src1_subreg_nr:1;
	 unsigned src1_reg_nr:8;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src1_address_mode:1;
	 unsigned src1_swz_z:2;
	 unsigned src1_swz_w:2;
	 unsigned pad1:1;
	 unsigned src1_vert_stride:4;
	 unsigned pad2:7;
      } da16;

      struct
      {
	 int  src1_indirect_offset:10;
	 unsigned src1_subreg_nr:3;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src1_address_mode:1;
	 unsigned src1_horiz_stride:2;
	 unsigned src1_width:3;
	 unsigned src1_vert_stride:4;
	 unsigned pad1:7;
      } ia1;

      struct
      {
	 unsigned src1_swz_x:2;
	 unsigned src1_swz_y:2;
	 int  src1_indirect_offset:6;
	 unsigned src1_subreg_nr:3;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned pad0:1;
	 unsigned src1_swz_z:2;
	 unsigned src1_swz_w:2;
	 unsigned pad1:1;
	 unsigned src1_vert_stride:4;
	 unsigned pad2:7;
      } ia16;


      struct
      {
	 int  jump_count:16;	/* note: signed */
	 unsigned  pop_count:4;
	 unsigned  pad0:12;
      } if_else;

      /* This is also used for gen7 IF/ELSE instructions */
      struct
      {
	 /* Signed jump distance to the ip to jump to if all channels
	  * are disabled after the break or continue.  It should point
	  * to the end of the innermost control flow block, as that's
	  * where some channel could get re-enabled.
	  */
	 int jip:16;

	 /* Signed jump distance to the location to resume execution
	  * of this channel if it's enabled for the break or continue.
	  */
	 int uip:16;
      } break_cont;

      /**
       * \defgroup SEND instructions / Message Descriptors
       *
       * @@{
       */

      /**
       * Generic Message Descriptor for Gen4 SEND instructions.  The structs
       * below expand function_control to something specific for their
       * message.  Due to struct packing issues, they duplicate these bits.
       *
       * See the G45 PRM, Volume 4, Table 14-15.
       */
      struct {
	 unsigned function_control:16;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } generic;

      /**
       * Generic Message Descriptor for Gen5-7 SEND instructions.
       *
       * See the Sandybridge PRM, Volume 2 Part 2, Table 8-15.  (Sadly, most
       * of the information on the SEND instruction is missing from the public
       * Ironlake PRM.)
       *
       * The table claims that bit 31 is reserved/MBZ on Gen6+, but it lies.
       * According to the SEND instruction description:
       * "The MSb of the message description, the EOT field, always comes from
       *  bit 127 of the instruction word"...which is bit 31 of this field.
       */
      struct {
	 unsigned function_control:19;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } generic_gen5;

      /** G45 PRM, Volume 4, Section 6.1.1.1 */
      struct {
	 unsigned function:4;
	 unsigned int_type:1;
	 unsigned precision:1;
	 unsigned saturate:1;
	 unsigned data_type:1;
	 unsigned pad0:8;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } math;

      /** Ironlake PRM, Volume 4 Part 1, Section 6.1.1.1 */
      struct {
	 unsigned function:4;
	 unsigned int_type:1;
	 unsigned precision:1;
	 unsigned saturate:1;
	 unsigned data_type:1;
	 unsigned snapshot:1;
	 unsigned pad0:10;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } math_gen5;

      /** G45 PRM, Volume 4, Section 4.8.1.1.1 [DevBW] and [DevCL] */
      struct {
	 unsigned binding_table_index:8;
	 unsigned sampler:4;
	 unsigned return_format:2;
	 unsigned msg_type:2;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } sampler;

      /** G45 PRM, Volume 4, Section 4.8.1.1.2 [DevCTG] */
      struct {
         unsigned binding_table_index:8;
         unsigned sampler:4;
         unsigned msg_type:4;
         unsigned response_length:4;
         unsigned msg_length:4;
         unsigned msg_target:4;
         unsigned pad1:3;
         unsigned end_of_thread:1;
      } sampler_g4x;

      /** Ironlake PRM, Volume 4 Part 1, Section 4.11.1.1.3 */
      struct {
	 unsigned binding_table_index:8;
	 unsigned sampler:4;
	 unsigned msg_type:4;
	 unsigned simd_mode:2;
	 unsigned pad0:1;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } sampler_gen5;

      struct {
	 unsigned binding_table_index:8;
	 unsigned sampler:4;
	 unsigned msg_type:5;
	 unsigned simd_mode:2;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } sampler_gen7;

      struct brw_urb_immediate urb;

      struct {
	 unsigned opcode:4;
	 unsigned offset:6;
	 unsigned swizzle_control:2;
	 unsigned pad:1;
	 unsigned allocate:1;
	 unsigned used:1;
	 unsigned complete:1;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } urb_gen5;

      struct {
	 unsigned opcode:3;
	 unsigned offset:11;
	 unsigned swizzle_control:1;
	 unsigned complete:1;
	 unsigned per_slot_offset:1;
	 unsigned pad0:2;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } urb_gen7;

      /** 965 PRM, Volume 4, Section 5.10.1.1: Message Descriptor */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:4;
	 unsigned msg_type:2;
	 unsigned target_cache:2;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } dp_read;

      /** G45 PRM, Volume 4, Section 5.10.1.1.2 */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned msg_type:3;
	 unsigned target_cache:2;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } dp_read_g4x;

      /** Ironlake PRM, Volume 4 Part 1, Section 5.10.2.1.2. */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned msg_type:3;
	 unsigned target_cache:2;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } dp_read_gen5;

      /** G45 PRM, Volume 4, Section 5.10.1.1.2.  For both Gen4 and G45. */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned last_render_target:1;
	 unsigned msg_type:3;
	 unsigned send_commit_msg:1;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } dp_write;

      /** Ironlake PRM, Volume 4 Part 1, Section 5.10.2.1.2. */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned last_render_target:1;
	 unsigned msg_type:3;
	 unsigned send_commit_msg:1;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } dp_write_gen5;

      /**
       * Message for the Sandybridge Sampler Cache or Constant Cache Data Port.
       *
       * See the Sandybridge PRM, Volume 4 Part 1, Section 3.9.2.1.1.
       **/
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:5;
	 unsigned msg_type:3;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } gen6_dp_sampler_const_cache;

      /**
       * Message for the Sandybridge Render Cache Data Port.
       *
       * Most fields are defined in the Sandybridge PRM, Volume 4 Part 1,
       * Section 3.9.2.1.1: Message Descriptor.
       *
       * "Slot Group Select" and "Last Render Target" are part of the
       * 5-bit message control for Render Target Write messages.  See
       * Section 3.9.9.2.1 of the same volume.
       */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned slot_group_select:1;
	 unsigned last_render_target:1;
	 unsigned msg_type:4;
	 unsigned send_commit_msg:1;
	 unsigned pad0:1;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } gen6_dp;

      /**
       * Message for any of the Gen7 Data Port caches.
       *
       * Most fields are defined in the Ivybridge PRM, Volume 4 Part 1,
       * section 3.9.2.1.1 "Message Descriptor".  Once again, "Slot Group
       * Select" and "Last Render Target" are part of the 6-bit message
       * control for Render Target Writes (section 3.9.11.2).
       */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned slot_group_select:1;
	 unsigned last_render_target:1;
	 unsigned msg_control_pad:1;
	 unsigned msg_type:4;
	 unsigned pad1:1;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad2:2;
	 unsigned end_of_thread:1;
      } gen7_dp;

      /**
       * Message for the Gen7 Pixel Interpolator.
       *
       * Defined in the Ivybridge PRM, Volume 4 Part 2,
       * section 4.1.1.1.
       */
      struct {
         GLuint msg_data:8;
         GLuint pad1:3;
         GLuint slot_group:1;
         GLuint msg_type:2;
         GLuint interpolation_mode:1;
         GLuint pad2:1;
         GLuint simd_mode:1;
         GLuint pad3:1;
         GLuint response_length:5;
         GLuint msg_length:4;
         GLuint pad4:2;
         GLuint end_of_thread:1;
      } gen7_pi;
      /** @@} */

      struct {
	 unsigned src1_subreg_nr_high:1;
	 unsigned src1_reg_nr:8;
	 unsigned pad0:1;
	 unsigned src2_rep_ctrl:1;
	 unsigned src2_swizzle:8;
	 unsigned src2_subreg_nr:3;
	 unsigned src2_reg_nr:8;
	 unsigned pad1:2;
      } da3src;

      int d;
      unsigned ud;
      float f;
   } bits3;
};

struct brw_compact_instruction {
   struct {
      unsigned opcode:7;          /*  0- 6 */
      unsigned debug_control:1;   /*  7- 7 */
      unsigned control_index:5;   /*  8-12 */
      unsigned data_type_index:5; /* 13-17 */
      unsigned sub_reg_index:5;   /* 18-22 */
      unsigned acc_wr_control:1;  /* 23-23 */
      unsigned conditionalmod:4;  /* 24-27 */
      unsigned flag_subreg_nr:1;     /* 28-28 */
      unsigned cmpt_ctrl:1;       /* 29-29 */
      unsigned src0_index:2;      /* 30-31 */
   } dw0;

   struct {
      unsigned src0_index:3;  /* 32-24 */
      unsigned src1_index:5;  /* 35-39 */
      unsigned dst_reg_nr:8;  /* 40-47 */
      unsigned src0_reg_nr:8; /* 48-55 */
      unsigned src1_reg_nr:8; /* 56-63 */
   } dw1;
};

#endif
@


1.11
log
@Merge Mesa 10.2.9
@
text
@@


1.10
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d592 4
d605 99
d767 674
@


1.9
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@a591 4
struct brw_sampler_default_color {
   float color[4];
};

a600 99
struct brw_sampler_state
{

   struct
   {
      unsigned shadow_function:3;
      unsigned lod_bias:11;
      unsigned min_filter:3;
      unsigned mag_filter:3;
      unsigned mip_filter:2;
      unsigned base_level:5;
      unsigned min_mag_neq:1;
      unsigned lod_preclamp:1;
      unsigned default_color_mode:1;
      unsigned pad0:1;
      unsigned disable:1;
   } ss0;

   struct
   {
      unsigned r_wrap_mode:3;
      unsigned t_wrap_mode:3;
      unsigned s_wrap_mode:3;
      unsigned cube_control_mode:1;
      unsigned pad:2;
      unsigned max_lod:10;
      unsigned min_lod:10;
   } ss1;


   struct
   {
      unsigned pad:5;
      unsigned default_color_pointer:27;
   } ss2;

   struct
   {
      unsigned non_normalized_coord:1;
      unsigned pad:12;
      unsigned address_round:6;
      unsigned max_aniso:3;
      unsigned chroma_key_mode:1;
      unsigned chroma_key_index:2;
      unsigned chroma_key_enable:1;
      unsigned monochrome_filter_width:3;
      unsigned monochrome_filter_height:3;
   } ss3;
};

struct gen7_sampler_state
{
   struct
   {
      unsigned aniso_algorithm:1;
      unsigned lod_bias:13;
      unsigned min_filter:3;
      unsigned mag_filter:3;
      unsigned mip_filter:2;
      unsigned base_level:5;
      unsigned pad1:1;
      unsigned lod_preclamp:1;
      unsigned default_color_mode:1;
      unsigned pad0:1;
      unsigned disable:1;
   } ss0;

   struct
   {
      unsigned cube_control_mode:1;
      unsigned shadow_function:3;
      unsigned pad:4;
      unsigned max_lod:12;
      unsigned min_lod:12;
   } ss1;

   struct
   {
      unsigned pad:5;
      unsigned default_color_pointer:27;
   } ss2;

   struct
   {
      unsigned r_wrap_mode:3;
      unsigned t_wrap_mode:3;
      unsigned s_wrap_mode:3;
      unsigned pad:1;
      unsigned non_normalized_coord:1;
      unsigned trilinear_quality:2;
      unsigned address_round:6;
      unsigned max_aniso:3;
      unsigned chroma_key_mode:1;
      unsigned chroma_key_index:2;
      unsigned chroma_key_enable:1;
      unsigned pad0:6;
   } ss3;
};

a663 674
};

struct brw_urb_immediate {
   unsigned opcode:4;
   unsigned offset:6;
   unsigned swizzle_control:2;
   unsigned pad:1;
   unsigned allocate:1;
   unsigned used:1;
   unsigned complete:1;
   unsigned response_length:4;
   unsigned msg_length:4;
   unsigned msg_target:4;
   unsigned pad1:3;
   unsigned end_of_thread:1;
};

/* Instruction format for the execution units:
 */

struct brw_instruction
{
   struct
   {
      unsigned opcode:7;
      unsigned pad:1;
      unsigned access_mode:1;
      unsigned mask_control:1;
      unsigned dependency_control:2;
      unsigned compression_control:2; /* gen6: quarter control */
      unsigned thread_control:2;
      unsigned predicate_control:4;
      unsigned predicate_inverse:1;
      unsigned execution_size:3;
      /**
       * Conditional Modifier for most instructions.  On Gen6+, this is also
       * used for the SEND instruction's Message Target/SFID.
       */
      unsigned destreg__conditionalmod:4;
      unsigned acc_wr_control:1;
      unsigned cmpt_control:1;
      unsigned debug_control:1;
      unsigned saturate:1;
   } header;

   union {
      struct
      {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;
	 unsigned src1_reg_type:3;
         unsigned nibctrl:1; /* gen7+ */
	 unsigned dest_subreg_nr:5;
	 unsigned dest_reg_nr:8;
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
      } da1;

      struct
      {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;        /* 0x00000c00 */
	 unsigned src1_reg_type:3;        /* 0x00007000 */
         unsigned nibctrl:1; /* gen7+ */
	 int dest_indirect_offset:10;	/* offset against the deref'd address reg */
	 unsigned dest_subreg_nr:3; /* subnr for the address reg a0.x */
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
      } ia1;

      struct
      {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;
	 unsigned src1_reg_type:3;
         unsigned nibctrl:1; /* gen7+ */
	 unsigned dest_writemask:4;
	 unsigned dest_subreg_nr:1;
	 unsigned dest_reg_nr:8;
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
      } da16;

      struct
      {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
         unsigned src1_reg_file:2;
         unsigned src1_reg_type:3;
         unsigned nibctrl:1; /* gen7+ */
	 unsigned dest_writemask:4;
	 int dest_indirect_offset:6;
	 unsigned dest_subreg_nr:3;
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
      } ia16;

      struct {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;
	 unsigned src1_reg_type:3;
	 unsigned pad:1;

	 int jump_count:16;
      } branch_gen6;

      struct {
         unsigned dest_reg_file:1; /* gen6, not gen7+ */
	 unsigned flag_subreg_num:1;
         unsigned flag_reg_nr:1; /* gen7+ */
         unsigned pad0:1;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src2_abs:1;
	 unsigned src2_negate:1;
         unsigned src_type:2; /* gen7+ */
         unsigned dst_type:2; /* gen7+ */
         unsigned pad1:1;
         unsigned nibctrl:1; /* gen7+ */
         unsigned pad2:1;
	 unsigned dest_writemask:4;
	 unsigned dest_subreg_nr:3;
	 unsigned dest_reg_nr:8;
      } da3src;

      uint32_t ud;
   } bits1;


   union {
      struct
      {
	 unsigned src0_subreg_nr:5;
	 unsigned src0_reg_nr:8;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_horiz_stride:2;
	 unsigned src0_width:3;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad:5;
      } da1;

      struct
      {
	 int src0_indirect_offset:10;
	 unsigned src0_subreg_nr:3;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_horiz_stride:2;
	 unsigned src0_width:3;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad:5;
      } ia1;

      struct
      {
	 unsigned src0_swz_x:2;
	 unsigned src0_swz_y:2;
	 unsigned src0_subreg_nr:1;
	 unsigned src0_reg_nr:8;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_swz_z:2;
	 unsigned src0_swz_w:2;
	 unsigned pad0:1;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad1:5;
      } da16;

      struct
      {
	 unsigned src0_swz_x:2;
	 unsigned src0_swz_y:2;
	 int src0_indirect_offset:6;
	 unsigned src0_subreg_nr:3;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_swz_z:2;
	 unsigned src0_swz_w:2;
	 unsigned pad0:1;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad1:5;
      } ia16;

      /* Extended Message Descriptor for Ironlake (Gen5) SEND instruction.
       *
       * Does not apply to Gen6+.  The SFID/message target moved to bits
       * 27:24 of the header (destreg__conditionalmod); EOT is in bits3.
       */
       struct
       {
           unsigned pad:26;
           unsigned end_of_thread:1;
           unsigned pad1:1;
           unsigned sfid:4;
       } send_gen5;  /* for Ironlake only */

      struct {
	 unsigned src0_rep_ctrl:1;
	 unsigned src0_swizzle:8;
	 unsigned src0_subreg_nr:3;
	 unsigned src0_reg_nr:8;
	 unsigned pad0:1;
	 unsigned src1_rep_ctrl:1;
	 unsigned src1_swizzle:8;
	 unsigned src1_subreg_nr_low:2;
      } da3src;

      uint32_t ud;
   } bits2;

   union
   {
      struct
      {
	 unsigned src1_subreg_nr:5;
	 unsigned src1_reg_nr:8;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src1_address_mode:1;
	 unsigned src1_horiz_stride:2;
	 unsigned src1_width:3;
	 unsigned src1_vert_stride:4;
	 unsigned pad0:7;
      } da1;

      struct
      {
	 unsigned src1_swz_x:2;
	 unsigned src1_swz_y:2;
	 unsigned src1_subreg_nr:1;
	 unsigned src1_reg_nr:8;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src1_address_mode:1;
	 unsigned src1_swz_z:2;
	 unsigned src1_swz_w:2;
	 unsigned pad1:1;
	 unsigned src1_vert_stride:4;
	 unsigned pad2:7;
      } da16;

      struct
      {
	 int  src1_indirect_offset:10;
	 unsigned src1_subreg_nr:3;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src1_address_mode:1;
	 unsigned src1_horiz_stride:2;
	 unsigned src1_width:3;
	 unsigned src1_vert_stride:4;
	 unsigned pad1:7;
      } ia1;

      struct
      {
	 unsigned src1_swz_x:2;
	 unsigned src1_swz_y:2;
	 int  src1_indirect_offset:6;
	 unsigned src1_subreg_nr:3;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned pad0:1;
	 unsigned src1_swz_z:2;
	 unsigned src1_swz_w:2;
	 unsigned pad1:1;
	 unsigned src1_vert_stride:4;
	 unsigned pad2:7;
      } ia16;


      struct
      {
	 int  jump_count:16;	/* note: signed */
	 unsigned  pop_count:4;
	 unsigned  pad0:12;
      } if_else;

      /* This is also used for gen7 IF/ELSE instructions */
      struct
      {
	 /* Signed jump distance to the ip to jump to if all channels
	  * are disabled after the break or continue.  It should point
	  * to the end of the innermost control flow block, as that's
	  * where some channel could get re-enabled.
	  */
	 int jip:16;

	 /* Signed jump distance to the location to resume execution
	  * of this channel if it's enabled for the break or continue.
	  */
	 int uip:16;
      } break_cont;

      /**
       * \defgroup SEND instructions / Message Descriptors
       *
       * @@{
       */

      /**
       * Generic Message Descriptor for Gen4 SEND instructions.  The structs
       * below expand function_control to something specific for their
       * message.  Due to struct packing issues, they duplicate these bits.
       *
       * See the G45 PRM, Volume 4, Table 14-15.
       */
      struct {
	 unsigned function_control:16;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } generic;

      /**
       * Generic Message Descriptor for Gen5-7 SEND instructions.
       *
       * See the Sandybridge PRM, Volume 2 Part 2, Table 8-15.  (Sadly, most
       * of the information on the SEND instruction is missing from the public
       * Ironlake PRM.)
       *
       * The table claims that bit 31 is reserved/MBZ on Gen6+, but it lies.
       * According to the SEND instruction description:
       * "The MSb of the message description, the EOT field, always comes from
       *  bit 127 of the instruction word"...which is bit 31 of this field.
       */
      struct {
	 unsigned function_control:19;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } generic_gen5;

      /** G45 PRM, Volume 4, Section 6.1.1.1 */
      struct {
	 unsigned function:4;
	 unsigned int_type:1;
	 unsigned precision:1;
	 unsigned saturate:1;
	 unsigned data_type:1;
	 unsigned pad0:8;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } math;

      /** Ironlake PRM, Volume 4 Part 1, Section 6.1.1.1 */
      struct {
	 unsigned function:4;
	 unsigned int_type:1;
	 unsigned precision:1;
	 unsigned saturate:1;
	 unsigned data_type:1;
	 unsigned snapshot:1;
	 unsigned pad0:10;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } math_gen5;

      /** G45 PRM, Volume 4, Section 4.8.1.1.1 [DevBW] and [DevCL] */
      struct {
	 unsigned binding_table_index:8;
	 unsigned sampler:4;
	 unsigned return_format:2;
	 unsigned msg_type:2;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } sampler;

      /** G45 PRM, Volume 4, Section 4.8.1.1.2 [DevCTG] */
      struct {
         unsigned binding_table_index:8;
         unsigned sampler:4;
         unsigned msg_type:4;
         unsigned response_length:4;
         unsigned msg_length:4;
         unsigned msg_target:4;
         unsigned pad1:3;
         unsigned end_of_thread:1;
      } sampler_g4x;

      /** Ironlake PRM, Volume 4 Part 1, Section 4.11.1.1.3 */
      struct {
	 unsigned binding_table_index:8;
	 unsigned sampler:4;
	 unsigned msg_type:4;
	 unsigned simd_mode:2;
	 unsigned pad0:1;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } sampler_gen5;

      struct {
	 unsigned binding_table_index:8;
	 unsigned sampler:4;
	 unsigned msg_type:5;
	 unsigned simd_mode:2;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } sampler_gen7;

      struct brw_urb_immediate urb;

      struct {
	 unsigned opcode:4;
	 unsigned offset:6;
	 unsigned swizzle_control:2;
	 unsigned pad:1;
	 unsigned allocate:1;
	 unsigned used:1;
	 unsigned complete:1;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } urb_gen5;

      struct {
	 unsigned opcode:3;
	 unsigned offset:11;
	 unsigned swizzle_control:1;
	 unsigned complete:1;
	 unsigned per_slot_offset:1;
	 unsigned pad0:2;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } urb_gen7;

      /** 965 PRM, Volume 4, Section 5.10.1.1: Message Descriptor */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:4;
	 unsigned msg_type:2;
	 unsigned target_cache:2;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } dp_read;

      /** G45 PRM, Volume 4, Section 5.10.1.1.2 */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned msg_type:3;
	 unsigned target_cache:2;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } dp_read_g4x;

      /** Ironlake PRM, Volume 4 Part 1, Section 5.10.2.1.2. */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned msg_type:3;
	 unsigned target_cache:2;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } dp_read_gen5;

      /** G45 PRM, Volume 4, Section 5.10.1.1.2.  For both Gen4 and G45. */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned last_render_target:1;
	 unsigned msg_type:3;
	 unsigned send_commit_msg:1;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } dp_write;

      /** Ironlake PRM, Volume 4 Part 1, Section 5.10.2.1.2. */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned last_render_target:1;
	 unsigned msg_type:3;
	 unsigned send_commit_msg:1;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } dp_write_gen5;

      /**
       * Message for the Sandybridge Sampler Cache or Constant Cache Data Port.
       *
       * See the Sandybridge PRM, Volume 4 Part 1, Section 3.9.2.1.1.
       **/
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:5;
	 unsigned msg_type:3;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } gen6_dp_sampler_const_cache;

      /**
       * Message for the Sandybridge Render Cache Data Port.
       *
       * Most fields are defined in the Sandybridge PRM, Volume 4 Part 1,
       * Section 3.9.2.1.1: Message Descriptor.
       *
       * "Slot Group Select" and "Last Render Target" are part of the
       * 5-bit message control for Render Target Write messages.  See
       * Section 3.9.9.2.1 of the same volume.
       */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned slot_group_select:1;
	 unsigned last_render_target:1;
	 unsigned msg_type:4;
	 unsigned send_commit_msg:1;
	 unsigned pad0:1;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } gen6_dp;

      /**
       * Message for any of the Gen7 Data Port caches.
       *
       * Most fields are defined in the Ivybridge PRM, Volume 4 Part 1,
       * section 3.9.2.1.1 "Message Descriptor".  Once again, "Slot Group
       * Select" and "Last Render Target" are part of the 6-bit message
       * control for Render Target Writes (section 3.9.11.2).
       */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned slot_group_select:1;
	 unsigned last_render_target:1;
	 unsigned msg_control_pad:1;
	 unsigned msg_type:4;
	 unsigned pad1:1;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad2:2;
	 unsigned end_of_thread:1;
      } gen7_dp;

      /**
       * Message for the Gen7 Pixel Interpolator.
       *
       * Defined in the Ivybridge PRM, Volume 4 Part 2,
       * section 4.1.1.1.
       */
      struct {
         GLuint msg_data:8;
         GLuint pad1:3;
         GLuint slot_group:1;
         GLuint msg_type:2;
         GLuint interpolation_mode:1;
         GLuint pad2:1;
         GLuint simd_mode:1;
         GLuint pad3:1;
         GLuint response_length:5;
         GLuint msg_length:4;
         GLuint pad4:2;
         GLuint end_of_thread:1;
      } gen7_pi;
      /** @@} */

      struct {
	 unsigned src1_subreg_nr_high:1;
	 unsigned src1_reg_nr:8;
	 unsigned pad0:1;
	 unsigned src2_rep_ctrl:1;
	 unsigned src2_swizzle:8;
	 unsigned src2_subreg_nr:3;
	 unsigned src2_reg_nr:8;
	 unsigned pad1:2;
      } da3src;

      int d;
      unsigned ud;
      float f;
   } bits3;
};

struct brw_compact_instruction {
   struct {
      unsigned opcode:7;          /*  0- 6 */
      unsigned debug_control:1;   /*  7- 7 */
      unsigned control_index:5;   /*  8-12 */
      unsigned data_type_index:5; /* 13-17 */
      unsigned sub_reg_index:5;   /* 18-22 */
      unsigned acc_wr_control:1;  /* 23-23 */
      unsigned conditionalmod:4;  /* 24-27 */
      unsigned flag_subreg_nr:1;     /* 28-28 */
      unsigned cmpt_ctrl:1;       /* 29-29 */
      unsigned src0_index:2;      /* 30-31 */
   } dw0;

   struct {
      unsigned src0_index:3;  /* 32-24 */
      unsigned src1_index:5;  /* 35-39 */
      unsigned dst_reg_nr:8;  /* 40-47 */
      unsigned src0_reg_nr:8; /* 48-55 */
      unsigned src1_reg_nr:8; /* 56-63 */
   } dw1;
@


1.8
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d31 1
a31 1
        
d40 9
a48 9
      GLuint length:8;   
      GLuint vs_realloc:1;   
      GLuint gs_realloc:1;   
      GLuint clp_realloc:1;   
      GLuint sf_realloc:1;   
      GLuint vfe_realloc:1;   
      GLuint cs_realloc:1;   
      GLuint pad:2;
      GLuint opcode:16;   
d53 4
a56 4
      GLuint vs_fence:10;  
      GLuint gs_fence:10;  
      GLuint clp_fence:10;  
      GLuint pad:2;
d61 4
a64 4
      GLuint sf_fence:10;  
      GLuint vf_fence:10;  
      GLuint cs_fence:11;  
      GLuint pad:1;
d74 4
a77 4
   GLuint pad0:1;
   GLuint grf_reg_count:3; 
   GLuint pad1:2;
   GLuint kernel_start_pointer:26; /* Offset from GENERAL_STATE_BASE */
d82 13
a94 13
   GLuint ext_halt_exception_enable:1; 
   GLuint sw_exception_enable:1; 
   GLuint mask_stack_exception_enable:1; 
   GLuint timeout_exception_enable:1; 
   GLuint illegal_op_exception_enable:1; 
   GLuint pad0:3;
   GLuint depth_coef_urb_read_offset:6;	/* WM only */
   GLuint pad1:2;
   GLuint floating_point_mode:1; 
   GLuint thread_priority:1; 
   GLuint binding_table_entry_count:8; 
   GLuint pad3:5;
   GLuint single_program_flow:1; 
d99 3
a101 3
   GLuint per_thread_scratch_space:4; 
   GLuint pad0:6;
   GLuint scratch_space_base_pointer:22; 
d104 1
a104 1
   
d107 9
a115 9
   GLuint dispatch_grf_start_reg:4; 
   GLuint urb_entry_read_offset:6; 
   GLuint pad0:1;
   GLuint urb_entry_read_length:6; 
   GLuint pad1:1;
   GLuint const_urb_entry_read_offset:6; 
   GLuint pad2:1;
   GLuint const_urb_entry_read_length:6; 
   GLuint pad3:1;
d125 12
a136 12
      GLuint pad0:7;
      GLuint sw_exception_enable:1;
      GLuint pad1:3;
      GLuint mask_stack_exception_enable:1;
      GLuint pad2:1;
      GLuint illegal_op_exception_enable:1;
      GLuint pad3:2;
      GLuint floating_point_mode:1;
      GLuint thread_priority:1;
      GLuint binding_table_entry_count:8;
      GLuint pad4:5;
      GLuint single_program_flow:1;
d144 24
a167 24
      GLuint pad0:9;
      GLuint gs_output_stats:1; /* not always */
      GLuint stats_enable:1; 
      GLuint nr_urb_entries:7; 
      GLuint pad1:1;
      GLuint urb_entry_allocation_size:5; 
      GLuint pad2:1;
      GLuint max_threads:5; 	/* may be less */
      GLuint pad3:2;
   } thread4;   
      
   struct
   {
      GLuint pad0:13;
      GLuint clip_mode:3; 
      GLuint userclip_enable_flags:8; 
      GLuint userclip_must_clip:1; 
      GLuint negative_w_clip_test:1;
      GLuint guard_band_enable:1; 
      GLuint viewport_z_clip_enable:1; 
      GLuint viewport_xy_clip_enable:1; 
      GLuint vertex_position_space:1; 
      GLuint api_mode:1; 
      GLuint pad2:1;
d169 1
a169 1
   
d172 2
a173 2
      GLuint pad0:5;
      GLuint clipper_viewport_state_ptr:27; 
d176 5
a180 5
   
   GLfloat viewport_xmin;  
   GLfloat viewport_xmax;  
   GLfloat viewport_ymin;  
   GLfloat viewport_ymax;  
d186 12
a197 12
      GLuint dest_blend_factor:5;
      GLuint source_blend_factor:5;
      GLuint pad3:1;
      GLuint blend_func:3;
      GLuint pad2:1;
      GLuint ia_dest_blend_factor:5;
      GLuint ia_source_blend_factor:5;
      GLuint pad1:1;
      GLuint ia_blend_func:3;
      GLuint pad0:1;
      GLuint ia_blend_enable:1;
      GLuint blend_enable:1;
d201 21
a221 21
      GLuint post_blend_clamp_enable:1;
      GLuint pre_blend_clamp_enable:1;
      GLuint clamp_range:2;
      GLuint pad0:4;
      GLuint x_dither_offset:2;
      GLuint y_dither_offset:2;
      GLuint dither_enable:1;
      GLuint alpha_test_func:3;
      GLuint alpha_test_enable:1;
      GLuint pad1:1;
      GLuint logic_op_func:4;
      GLuint logic_op_enable:1;
      GLuint pad2:1;
      GLuint write_disable_b:1;
      GLuint write_disable_g:1;
      GLuint write_disable_r:1;
      GLuint write_disable_a:1;
      GLuint pad3:1;
      GLuint alpha_to_coverage_dither:1;
      GLuint alpha_to_one:1;
      GLuint alpha_to_coverage:1;
d228 5
a232 5
      GLuint alpha_test_format:1;
      GLuint pad0:14;
      GLuint round_disable:1;
      GLuint bf_stencil_ref:8;
      GLuint stencil_ref:8;
d236 1
a236 1
      GLfloat alpha_ref_f;
d238 2
a239 2
	 GLuint ui:8;
	 GLuint pad0:24;
d243 4
a246 4
   GLfloat constant_r;
   GLfloat constant_g;
   GLfloat constant_b;
   GLfloat constant_a;
d252 13
a264 13
      GLuint pad0:3;
      GLuint bf_stencil_pass_depth_pass_op:3;
      GLuint bf_stencil_pass_depth_fail_op:3;
      GLuint bf_stencil_fail_op:3;
      GLuint bf_stencil_func:3;
      GLuint bf_stencil_enable:1;
      GLuint pad1:2;
      GLuint stencil_write_enable:1;
      GLuint stencil_pass_depth_pass_op:3;
      GLuint stencil_pass_depth_fail_op:3;
      GLuint stencil_fail_op:3;
      GLuint stencil_func:3;
      GLuint stencil_enable:1;
d268 4
a271 4
      GLuint bf_stencil_write_mask:8;
      GLuint bf_stencil_test_mask:8;
      GLuint stencil_write_mask:8;
      GLuint stencil_test_mask:8;
d275 5
a279 5
      GLuint pad0:26;
      GLuint depth_write_enable:1;
      GLuint depth_test_func:3;
      GLuint pad1:1;
      GLuint depth_test_enable:1;
d287 13
a299 13
      GLuint pad0:3;
      GLuint bf_stencil_pass_depth_pass_op:3; 
      GLuint bf_stencil_pass_depth_fail_op:3; 
      GLuint bf_stencil_fail_op:3; 
      GLuint bf_stencil_func:3; 
      GLuint bf_stencil_enable:1; 
      GLuint pad1:2;
      GLuint stencil_write_enable:1; 
      GLuint stencil_pass_depth_pass_op:3; 
      GLuint stencil_pass_depth_fail_op:3; 
      GLuint stencil_fail_op:3; 
      GLuint stencil_func:3; 
      GLuint stencil_enable:1; 
d302 1
a302 1
   
d305 4
a308 4
      GLuint bf_stencil_ref:8; 
      GLuint stencil_write_mask:8; 
      GLuint stencil_test_mask:8; 
      GLuint stencil_ref:8; 
d311 1
a311 1
   
d314 7
a320 7
      GLuint logicop_enable:1; 
      GLuint pad0:10;
      GLuint depth_write_enable:1; 
      GLuint depth_test_function:3; 
      GLuint depth_test:1; 
      GLuint bf_stencil_write_mask:8; 
      GLuint bf_stencil_test_mask:8; 
d323 1
a323 1
   
d326 8
a333 8
      GLuint pad0:8;
      GLuint alpha_test_func:3; 
      GLuint alpha_test:1; 
      GLuint blend_enable:1; 
      GLuint ia_blend_enable:1; 
      GLuint pad1:1;
      GLuint alpha_test_format:1;
      GLuint pad2:16;
d335 1
a335 1
   
d338 2
a339 2
      GLuint pad0:5; 
      GLuint cc_viewport_state_offset:27; /* Offset from GENERAL_STATE_BASE */
d341 1
a341 1
   
d344 8
a351 8
      GLuint pad0:2;
      GLuint ia_dest_blend_factor:5; 
      GLuint ia_src_blend_factor:5; 
      GLuint ia_blend_function:3; 
      GLuint statistics_enable:1; 
      GLuint logicop_func:4; 
      GLuint pad1:11;
      GLuint dither_enable:1; 
d356 9
a364 9
      GLuint clamp_post_alpha_blend:1; 
      GLuint clamp_pre_alpha_blend:1; 
      GLuint clamp_range:2; 
      GLuint pad0:11;
      GLuint y_dither_offset:2; 
      GLuint x_dither_offset:2; 
      GLuint dest_blend_factor:5; 
      GLuint src_blend_factor:5; 
      GLuint blend_function:3; 
d369 2
a370 2
	 GLfloat f;  
	 GLubyte ub[4];
d384 9
a392 9
      GLuint pad0:10;
      GLuint stats_enable:1; 
      GLuint nr_urb_entries:7; 
      GLuint pad1:1;
      GLuint urb_entry_allocation_size:5; 
      GLuint pad2:1;
      GLuint max_threads:6; 
      GLuint pad3:1;
   } thread4;   
d396 4
a399 4
      GLuint front_winding:1; 
      GLuint viewport_transform:1; 
      GLuint pad0:3;
      GLuint sf_viewport_state_offset:27; /* Offset from GENERAL_STATE_BASE */
d401 1
a401 1
   
d404 12
a415 12
      GLuint pad0:9;
      GLuint dest_org_vbias:4; 
      GLuint dest_org_hbias:4; 
      GLuint scissor:1; 
      GLuint disable_2x2_trifilter:1; 
      GLuint disable_zero_pix_trifilter:1; 
      GLuint point_rast_rule:2; 
      GLuint line_endcap_aa_region_width:2; 
      GLuint line_width:4; 
      GLuint fast_scissor_disable:1; 
      GLuint cull_mode:2; 
      GLuint aa_enable:1; 
d420 10
a429 10
      GLuint point_size:11; 
      GLuint use_point_size_state:1; 
      GLuint subpixel_precision:1; 
      GLuint sprite_point:1; 
      GLuint pad0:10;
      GLuint aa_line_distance_mode:1;
      GLuint trifan_pv:2; 
      GLuint linestrip_pv:2; 
      GLuint tristrip_pv:2; 
      GLuint line_last_pixel_enable:1; 
d436 4
a439 4
   GLuint xmin:16;
   GLuint ymin:16;
   GLuint xmax:16;
   GLuint ymax:16;
d451 17
a467 17
      GLuint pad0:8;
      GLuint rendering_enable:1; /* for Ironlake */
      GLuint pad4:1;
      GLuint stats_enable:1; 
      GLuint nr_urb_entries:7; 
      GLuint pad1:1;
      GLuint urb_entry_allocation_size:5; 
      GLuint pad2:1;
      GLuint max_threads:5; 
      GLuint pad3:2;
   } thread4;   
      
   struct
   {
      GLuint sampler_count:3; 
      GLuint pad0:2;
      GLuint sampler_state_pointer:27; 
d470 1
a470 1
   
d473 9
a481 9
      GLuint max_vp_index:4; 
      GLuint pad0:12;
      GLuint svbi_post_inc_value:10;
      GLuint pad1:1;
      GLuint svbi_post_inc_enable:1;
      GLuint svbi_payload:1;
      GLuint discard_adjaceny:1;
      GLuint reorder_enable:1; 
      GLuint pad2:1;
d492 1
a492 1
   
d495 9
a503 9
      GLuint pad0:10;
      GLuint stats_enable:1; 
      GLuint nr_urb_entries:7; 
      GLuint pad1:1;
      GLuint urb_entry_allocation_size:5; 
      GLuint pad2:1;
      GLuint max_threads:6; 
      GLuint pad3:1;
   } thread4;   
d507 3
a509 3
      GLuint sampler_count:3; 
      GLuint pad0:2;
      GLuint sampler_state_pointer:27; 
d514 3
a516 3
      GLuint vs_enable:1; 
      GLuint vert_cache_disable:1; 
      GLuint pad0:30;
d527 1
a527 1
   
d529 4
a532 4
      GLuint stats_enable:1; 
      GLuint depth_buffer_clear:1;
      GLuint sampler_count:3; 
      GLuint sampler_state_pointer:27; 
d534 1
a534 1
   
d537 6
a542 6
      GLuint enable_8_pix:1; 
      GLuint enable_16_pix:1; 
      GLuint enable_32_pix:1; 
      GLuint enable_con_32_pix:1;
      GLuint enable_con_64_pix:1;
      GLuint pad0:1;
d545 19
a563 19
      GLuint fast_span_coverage_enable:1;
      GLuint depth_buffer_clear:1;
      GLuint depth_buffer_resolve_enable:1;
      GLuint hierarchical_depth_buffer_resolve_enable:1;

      GLuint legacy_global_depth_bias:1; 
      GLuint line_stipple:1; 
      GLuint depth_offset:1; 
      GLuint polygon_stipple:1; 
      GLuint line_aa_region_width:2; 
      GLuint line_endcap_aa_region_width:2; 
      GLuint early_depth_test:1; 
      GLuint thread_dispatch_enable:1; 
      GLuint program_uses_depth:1; 
      GLuint program_computes_depth:1; 
      GLuint program_uses_killpixel:1; 
      GLuint legacy_line_rast: 1; 
      GLuint transposed_urb_read_enable:1; 
      GLuint max_threads:7; 
d565 4
a568 4
   
   GLfloat global_depth_offset_constant;  
   GLfloat global_depth_offset_scale;   
   
d571 5
a575 5
      GLuint pad0:1;
      GLuint grf_reg_count_1:3; 
      GLuint pad1:2;
      GLuint kernel_start_pointer_1:26;
   } wm8;       
d578 5
a582 5
      GLuint pad0:1;
      GLuint grf_reg_count_2:3; 
      GLuint pad1:2;
      GLuint kernel_start_pointer_2:26;
   } wm9;       
d585 5
a589 5
      GLuint pad0:1;
      GLuint grf_reg_count_3:3; 
      GLuint pad1:2;
      GLuint kernel_start_pointer_3:26;
   } wm10;       
d593 1
a593 1
   GLfloat color[4];
d607 1
a607 1
   
d610 11
a620 11
      GLuint shadow_function:3; 
      GLuint lod_bias:11; 
      GLuint min_filter:3; 
      GLuint mag_filter:3; 
      GLuint mip_filter:2; 
      GLuint base_level:5; 
      GLuint min_mag_neq:1;
      GLuint lod_preclamp:1; 
      GLuint default_color_mode:1; 
      GLuint pad0:1;
      GLuint disable:1; 
d625 7
a631 7
      GLuint r_wrap_mode:3; 
      GLuint t_wrap_mode:3; 
      GLuint s_wrap_mode:3; 
      GLuint cube_control_mode:1;
      GLuint pad:2;
      GLuint max_lod:10; 
      GLuint min_lod:10; 
d634 1
a634 1
   
d637 2
a638 2
      GLuint pad:5;
      GLuint default_color_pointer:27; 
d640 1
a640 1
   
d643 9
a651 9
      GLuint non_normalized_coord:1;
      GLuint pad:12;
      GLuint address_round:6;
      GLuint max_aniso:3; 
      GLuint chroma_key_mode:1; 
      GLuint chroma_key_index:2; 
      GLuint chroma_key_enable:1; 
      GLuint monochrome_filter_width:3; 
      GLuint monochrome_filter_height:3; 
d659 11
a669 11
      GLuint aniso_algorithm:1;
      GLuint lod_bias:13;
      GLuint min_filter:3;
      GLuint mag_filter:3;
      GLuint mip_filter:2;
      GLuint base_level:5;
      GLuint pad1:1;
      GLuint lod_preclamp:1;
      GLuint default_color_mode:1;
      GLuint pad0:1;
      GLuint disable:1;
d674 5
a678 5
      GLuint cube_control_mode:1;
      GLuint shadow_function:3;
      GLuint pad:4;
      GLuint max_lod:12;
      GLuint min_lod:12;
d683 2
a684 2
      GLuint pad:5;
      GLuint default_color_pointer:27;
d689 12
a700 12
      GLuint r_wrap_mode:3;
      GLuint t_wrap_mode:3;
      GLuint s_wrap_mode:3;
      GLuint pad:1;
      GLuint non_normalized_coord:1;
      GLuint trilinear_quality:2;
      GLuint address_round:6;
      GLuint max_aniso:3;
      GLuint chroma_key_mode:1;
      GLuint chroma_key_index:2;
      GLuint chroma_key_enable:1;
      GLuint pad0:6;
d706 4
a709 4
   GLfloat xmin;  
   GLfloat xmax;  
   GLfloat ymin;  
   GLfloat ymax;  
d714 2
a715 2
   GLfloat min_depth;  
   GLfloat max_depth;  
d721 6
a726 6
      GLfloat m00;  
      GLfloat m11;  
      GLfloat m22;  
      GLfloat m30;  
      GLfloat m31;  
      GLfloat m32;  
d731 4
a734 4
      GLshort xmin;
      GLshort ymin;
      GLshort xmax;
      GLshort ymax;
d739 6
a744 6
   GLfloat m00;
   GLfloat m11;
   GLfloat m22;
   GLfloat m30;
   GLfloat m31;
   GLfloat m32;
d749 6
a754 6
      GLfloat m00;
      GLfloat m11;
      GLfloat m22;
      GLfloat m30;
      GLfloat m31;
      GLfloat m32;
d757 1
a757 1
   GLuint pad0[2];
d760 4
a763 4
      GLfloat xmin;
      GLfloat xmax;
      GLfloat ymin;
      GLfloat ymax;
d766 1
a766 1
   GLfloat pad1[4];
d770 12
a781 12
   GLuint opcode:4;
   GLuint offset:6;
   GLuint swizzle_control:2; 
   GLuint pad:1;
   GLuint allocate:1;
   GLuint used:1;
   GLuint complete:1;
   GLuint response_length:4;
   GLuint msg_length:4;
   GLuint msg_target:4;
   GLuint pad1:3;
   GLuint end_of_thread:1;
d786 1
a786 1
 
d789 1
a789 1
   struct 
d791 10
a800 10
      GLuint opcode:7;
      GLuint pad:1;
      GLuint access_mode:1;
      GLuint mask_control:1;
      GLuint dependency_control:2;
      GLuint compression_control:2; /* gen6: quarter control */
      GLuint thread_control:2;
      GLuint predicate_control:4;
      GLuint predicate_inverse:1;
      GLuint execution_size:3;
d805 5
a809 5
      GLuint destreg__conditionalmod:4;
      GLuint acc_wr_control:1;
      GLuint cmpt_control:1;
      GLuint debug_control:1;
      GLuint saturate:1;
d815 11
a825 11
	 GLuint dest_reg_file:2;
	 GLuint dest_reg_type:3;
	 GLuint src0_reg_file:2;
	 GLuint src0_reg_type:3;
	 GLuint src1_reg_file:2;
	 GLuint src1_reg_type:3;
         GLuint nibctrl:1; /* gen7+ */
	 GLuint dest_subreg_nr:5;
	 GLuint dest_reg_nr:8;
	 GLuint dest_horiz_stride:2;
	 GLuint dest_address_mode:1;
d830 11
a840 11
	 GLuint dest_reg_file:2;
	 GLuint dest_reg_type:3;
	 GLuint src0_reg_file:2;
	 GLuint src0_reg_type:3;
	 GLuint src1_reg_file:2;        /* 0x00000c00 */
	 GLuint src1_reg_type:3;        /* 0x00007000 */
         GLuint nibctrl:1; /* gen7+ */
	 GLint dest_indirect_offset:10;	/* offset against the deref'd address reg */
	 GLuint dest_subreg_nr:3; /* subnr for the address reg a0.x */
	 GLuint dest_horiz_stride:2;
	 GLuint dest_address_mode:1;
d845 12
a856 12
	 GLuint dest_reg_file:2;
	 GLuint dest_reg_type:3;
	 GLuint src0_reg_file:2;
	 GLuint src0_reg_type:3;
	 GLuint src1_reg_file:2;
	 GLuint src1_reg_type:3;
         GLuint nibctrl:1; /* gen7+ */
	 GLuint dest_writemask:4;
	 GLuint dest_subreg_nr:1;
	 GLuint dest_reg_nr:8;
	 GLuint dest_horiz_stride:2;
	 GLuint dest_address_mode:1;
d861 12
a872 12
	 GLuint dest_reg_file:2;
	 GLuint dest_reg_type:3;
	 GLuint src0_reg_file:2;
	 GLuint src0_reg_type:3;
         GLuint src1_reg_file:2;
         GLuint src1_reg_type:3;
         GLuint nibctrl:1; /* gen7+ */
	 GLuint dest_writemask:4;
	 GLint dest_indirect_offset:6;
	 GLuint dest_subreg_nr:3;
	 GLuint dest_horiz_stride:2;
	 GLuint dest_address_mode:1;
d876 7
a882 7
	 GLuint dest_reg_file:2;
	 GLuint dest_reg_type:3;
	 GLuint src0_reg_file:2;
	 GLuint src0_reg_type:3;
	 GLuint src1_reg_file:2;
	 GLuint src1_reg_type:3;
	 GLuint pad:1;
d884 1
a884 1
	 GLint jump_count:16;
d888 18
a905 18
         GLuint dest_reg_file:1; /* gen6, not gen7+ */
	 GLuint flag_subreg_num:1;
         GLuint flag_reg_nr:1; /* gen7+ */
         GLuint pad0:1;
	 GLuint src0_abs:1;
	 GLuint src0_negate:1;
	 GLuint src1_abs:1;
	 GLuint src1_negate:1;
	 GLuint src2_abs:1;
	 GLuint src2_negate:1;
         GLuint src_type:2; /* gen7+ */
         GLuint dst_type:2; /* gen7+ */
         GLuint pad1:1;
         GLuint nibctrl:1; /* gen7+ */
         GLuint pad2:1;
	 GLuint dest_writemask:4;
	 GLuint dest_subreg_nr:3;
	 GLuint dest_reg_nr:8;
d915 11
a925 11
	 GLuint src0_subreg_nr:5;
	 GLuint src0_reg_nr:8;
	 GLuint src0_abs:1;
	 GLuint src0_negate:1;
	 GLuint src0_address_mode:1;
	 GLuint src0_horiz_stride:2;
	 GLuint src0_width:3;
	 GLuint src0_vert_stride:4;
	 GLuint flag_subreg_nr:1;
         GLuint flag_reg_nr:1; /* gen7+ */
	 GLuint pad:5;
d930 11
a940 11
	 GLint src0_indirect_offset:10;
	 GLuint src0_subreg_nr:3;
	 GLuint src0_abs:1;
	 GLuint src0_negate:1;
	 GLuint src0_address_mode:1;
	 GLuint src0_horiz_stride:2;
	 GLuint src0_width:3;
	 GLuint src0_vert_stride:4;
	 GLuint flag_subreg_nr:1;
         GLuint flag_reg_nr:1; /* gen7+ */
	 GLuint pad:5;
d945 14
a958 14
	 GLuint src0_swz_x:2;
	 GLuint src0_swz_y:2;
	 GLuint src0_subreg_nr:1;
	 GLuint src0_reg_nr:8;
	 GLuint src0_abs:1;
	 GLuint src0_negate:1;
	 GLuint src0_address_mode:1;
	 GLuint src0_swz_z:2;
	 GLuint src0_swz_w:2;
	 GLuint pad0:1;
	 GLuint src0_vert_stride:4;
	 GLuint flag_subreg_nr:1;
         GLuint flag_reg_nr:1; /* gen7+ */
	 GLuint pad1:5;
d963 14
a976 14
	 GLuint src0_swz_x:2;
	 GLuint src0_swz_y:2;
	 GLint src0_indirect_offset:6;
	 GLuint src0_subreg_nr:3;
	 GLuint src0_abs:1;
	 GLuint src0_negate:1;
	 GLuint src0_address_mode:1;
	 GLuint src0_swz_z:2;
	 GLuint src0_swz_w:2;
	 GLuint pad0:1;
	 GLuint src0_vert_stride:4;
	 GLuint flag_subreg_nr:1;
         GLuint flag_reg_nr:1; /* gen7+ */
	 GLuint pad1:5;
d984 1
a984 1
       struct 
d986 4
a989 4
           GLuint pad:26;
           GLuint end_of_thread:1;
           GLuint pad1:1;
           GLuint sfid:4;
d993 8
a1000 8
	 GLuint src0_rep_ctrl:1;
	 GLuint src0_swizzle:8;
	 GLuint src0_subreg_nr:3;
	 GLuint src0_reg_nr:8;
	 GLuint pad0:1;
	 GLuint src1_rep_ctrl:1;
	 GLuint src1_swizzle:8;
	 GLuint src1_subreg_nr_low:2;
d1010 9
a1018 9
	 GLuint src1_subreg_nr:5;
	 GLuint src1_reg_nr:8;
	 GLuint src1_abs:1;
	 GLuint src1_negate:1;
	 GLuint src1_address_mode:1;
	 GLuint src1_horiz_stride:2;
	 GLuint src1_width:3;
	 GLuint src1_vert_stride:4;
	 GLuint pad0:7;
d1023 12
a1034 12
	 GLuint src1_swz_x:2;
	 GLuint src1_swz_y:2;
	 GLuint src1_subreg_nr:1;
	 GLuint src1_reg_nr:8;
	 GLuint src1_abs:1;
	 GLuint src1_negate:1;
	 GLuint src1_address_mode:1;
	 GLuint src1_swz_z:2;
	 GLuint src1_swz_w:2;
	 GLuint pad1:1;
	 GLuint src1_vert_stride:4;
	 GLuint pad2:7;
d1039 9
a1047 9
	 GLint  src1_indirect_offset:10;
	 GLuint src1_subreg_nr:3;
	 GLuint src1_abs:1;
	 GLuint src1_negate:1;
	 GLuint src1_address_mode:1;
	 GLuint src1_horiz_stride:2;
	 GLuint src1_width:3;
	 GLuint src1_vert_stride:4;
	 GLuint pad1:7;
d1052 12
a1063 12
	 GLuint src1_swz_x:2;
	 GLuint src1_swz_y:2;
	 GLint  src1_indirect_offset:6;
	 GLuint src1_subreg_nr:3;
	 GLuint src1_abs:1;
	 GLuint src1_negate:1;
	 GLuint pad0:1;
	 GLuint src1_swz_z:2;
	 GLuint src1_swz_w:2;
	 GLuint pad1:1;
	 GLuint src1_vert_stride:4;
	 GLuint pad2:7;
d1069 3
a1071 3
	 GLint  jump_count:16;	/* note: signed */
	 GLuint  pop_count:4;
	 GLuint  pad0:12;
d1104 6
a1109 6
	 GLuint function_control:16;
	 GLuint response_length:4;
	 GLuint msg_length:4;
	 GLuint msg_target:4;
	 GLuint pad1:3;
	 GLuint end_of_thread:1;
d1125 6
a1130 6
	 GLuint function_control:19;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
d1135 11
a1145 11
	 GLuint function:4;
	 GLuint int_type:1;
	 GLuint precision:1;
	 GLuint saturate:1;
	 GLuint data_type:1;
	 GLuint pad0:8;
	 GLuint response_length:4;
	 GLuint msg_length:4;
	 GLuint msg_target:4;
	 GLuint pad1:3;
	 GLuint end_of_thread:1;
d1150 12
a1161 12
	 GLuint function:4;
	 GLuint int_type:1;
	 GLuint precision:1;
	 GLuint saturate:1;
	 GLuint data_type:1;
	 GLuint snapshot:1;
	 GLuint pad0:10;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
d1166 9
a1174 9
	 GLuint binding_table_index:8;
	 GLuint sampler:4;
	 GLuint return_format:2; 
	 GLuint msg_type:2;   
	 GLuint response_length:4;
	 GLuint msg_length:4;
	 GLuint msg_target:4;
	 GLuint pad1:3;
	 GLuint end_of_thread:1;
d1179 8
a1186 8
         GLuint binding_table_index:8;
         GLuint sampler:4;
         GLuint msg_type:4;
         GLuint response_length:4;
         GLuint msg_length:4;
         GLuint msg_target:4;
         GLuint pad1:3;
         GLuint end_of_thread:1;
d1191 10
a1200 10
	 GLuint binding_table_index:8;
	 GLuint sampler:4;
	 GLuint msg_type:4;
	 GLuint simd_mode:2;
	 GLuint pad0:1;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
d1204 9
a1212 9
	 GLuint binding_table_index:8;
	 GLuint sampler:4;
	 GLuint msg_type:5;
	 GLuint simd_mode:2;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
d1218 13
a1230 13
	 GLuint opcode:4;
	 GLuint offset:6;
	 GLuint swizzle_control:2; 
	 GLuint pad:1;
	 GLuint allocate:1;
	 GLuint used:1;
	 GLuint complete:1;
	 GLuint pad0:3;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
d1234 11
a1244 11
	 GLuint opcode:3;
	 GLuint offset:11;
	 GLuint swizzle_control:1;
	 GLuint complete:1;
	 GLuint per_slot_offset:1;
	 GLuint pad0:2;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
d1249 9
a1257 9
	 GLuint binding_table_index:8;
	 GLuint msg_control:4;  
	 GLuint msg_type:2;  
	 GLuint target_cache:2;    
	 GLuint response_length:4;
	 GLuint msg_length:4;
	 GLuint msg_target:4;
	 GLuint pad1:3;
	 GLuint end_of_thread:1;
d1262 9
a1270 9
	 GLuint binding_table_index:8;
	 GLuint msg_control:3;
	 GLuint msg_type:3;
	 GLuint target_cache:2;
	 GLuint response_length:4;
	 GLuint msg_length:4;
	 GLuint msg_target:4;
	 GLuint pad1:3;
	 GLuint end_of_thread:1;
d1275 10
a1284 10
	 GLuint binding_table_index:8;
	 GLuint msg_control:3;  
	 GLuint msg_type:3;  
	 GLuint target_cache:2;    
	 GLuint pad0:3;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
d1289 10
a1298 10
	 GLuint binding_table_index:8;
	 GLuint msg_control:3;
	 GLuint last_render_target:1;
	 GLuint msg_type:3;    
	 GLuint send_commit_msg:1;
	 GLuint response_length:4;
	 GLuint msg_length:4;
	 GLuint msg_target:4;
	 GLuint pad1:3;
	 GLuint end_of_thread:1;
d1303 11
a1313 11
	 GLuint binding_table_index:8;
	 GLuint msg_control:3;
	 GLuint last_render_target:1;
	 GLuint msg_type:3;    
	 GLuint send_commit_msg:1;
	 GLuint pad0:3;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
d1322 9
a1330 9
	 GLuint binding_table_index:8;
	 GLuint msg_control:5;
	 GLuint msg_type:3;
	 GLuint pad0:3;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
d1344 12
a1355 12
	 GLuint binding_table_index:8;
	 GLuint msg_control:3;
	 GLuint slot_group_select:1;
	 GLuint last_render_target:1;
	 GLuint msg_type:4;
	 GLuint send_commit_msg:1;
	 GLuint pad0:1;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
d1367 12
a1378 12
	 GLuint binding_table_index:8;
	 GLuint msg_control:3;
	 GLuint slot_group_select:1;
	 GLuint last_render_target:1;
	 GLuint msg_control_pad:1;
	 GLuint msg_type:4;
	 GLuint pad1:1;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad2:2;
	 GLuint end_of_thread:1;
d1380 21
d1404 8
a1411 8
	 GLuint src1_subreg_nr_high:1;
	 GLuint src1_reg_nr:8;
	 GLuint pad0:1;
	 GLuint src2_rep_ctrl:1;
	 GLuint src2_swizzle:8;
	 GLuint src2_subreg_nr:3;
	 GLuint src2_reg_nr:8;
	 GLuint pad1:2;
d1414 2
a1415 2
      GLint d;
      GLuint ud;
@


1.7
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a35 363

/** Number of general purpose registers (VS, WM, etc) */
#define BRW_MAX_GRF 128

/** Number of message register file registers */
#define BRW_MAX_MRF 16


/* Command packets:
 */
struct header 
{
   GLuint length:16; 
   GLuint opcode:16; 
};


union header_union
{
   struct header bits;
   GLuint dword;
};

struct brw_3d_control
{   
   struct 
   {
      GLuint length:8;
      GLuint notify_enable:1;
      GLuint pad:3;
      GLuint wc_flush_enable:1; 
      GLuint depth_stall_enable:1; 
      GLuint operation:2; 
      GLuint opcode:16; 
   } header;
   
   struct
   {
      GLuint pad:2;
      GLuint dest_addr_type:1; 
      GLuint dest_addr:29; 
   } dest;
   
   GLuint dword2;   
   GLuint dword3;   
};

/* These seem to be passed around as function args, so it works out
 * better to keep them as #defines:
 */
#define BRW_FLUSH_READ_CACHE           0x1
#define BRW_FLUSH_STATE_CACHE          0x2
#define BRW_INHIBIT_FLUSH_RENDER_CACHE 0x4
#define BRW_FLUSH_SNAPSHOT_COUNTERS    0x8

struct brw_mi_flush
{
   GLuint flags:4;
   GLuint pad:12;
   GLuint opcode:16;
};

struct brw_vf_statistics
{
   GLuint statistics_enable:1;
   GLuint pad:15;
   GLuint opcode:16;
};



struct brw_binding_table_pointers
{
   struct header header;
   GLuint vs; 
   GLuint gs; 
   GLuint clp; 
   GLuint sf; 
   GLuint wm; 
};


struct brw_blend_constant_color
{
   struct header header;
   GLfloat blend_constant_color[4];  
};


struct brw_depthbuffer
{
   union header_union header;
   
   union {
      struct {
	 GLuint pitch:18; 
	 GLuint format:3; 
	 GLuint pad:2;
	 GLuint software_tiled_rendering_mode:2;
	 GLuint depth_offset_disable:1; 
	 GLuint tile_walk:1; 
	 GLuint tiled_surface:1; 
	 GLuint pad2:1;
	 GLuint surface_type:3; 
      } bits;
      GLuint dword;
   } dword1;
   
   GLuint dword2_base_addr; 
 
   union {
      struct {
	 GLuint pad:1;
	 GLuint mipmap_layout:1; 
	 GLuint lod:4; 
	 GLuint width:13; 
	 GLuint height:13; 
      } bits;
      GLuint dword;
   } dword3;

   union {
      struct {
	 GLuint pad:10;
	 GLuint min_array_element:11; 
	 GLuint depth:11; 
      } bits;
      GLuint dword;
   } dword4;
};

struct brw_depthbuffer_g4x
{
   union header_union header;
   
   union {
      struct {
	 GLuint pitch:18; 
	 GLuint format:3; 
	 GLuint pad:2;
	 GLuint software_tiled_rendering_mode:2;
	 GLuint depth_offset_disable:1; 
	 GLuint tile_walk:1; 
	 GLuint tiled_surface:1; 
	 GLuint pad2:1;
	 GLuint surface_type:3; 
      } bits;
      GLuint dword;
   } dword1;
   
   GLuint dword2_base_addr; 
 
   union {
      struct {
	 GLuint pad:1;
	 GLuint mipmap_layout:1; 
	 GLuint lod:4; 
	 GLuint width:13; 
	 GLuint height:13; 
      } bits;
      GLuint dword;
   } dword3;

   union {
      struct {
	 GLuint pad:10;
	 GLuint min_array_element:11; 
	 GLuint depth:11; 
      } bits;
      GLuint dword;
   } dword4;

   union {
      struct {
         GLuint xoffset:16;
         GLuint yoffset:16;
      } bits;
      GLuint dword;
   } dword5;   /* NEW in Integrated Graphics Device */
};

struct brw_drawrect
{
   struct header header;
   GLuint xmin:16; 
   GLuint ymin:16; 
   GLuint xmax:16; 
   GLuint ymax:16; 
   GLuint xorg:16;  
   GLuint yorg:16;  
};




struct brw_global_depth_offset_clamp
{
   struct header header;
   GLfloat depth_offset_clamp;  
};

struct brw_indexbuffer
{   
   union {
      struct
      {
	 GLuint length:8; 
	 GLuint index_format:2; 
	 GLuint cut_index_enable:1; 
	 GLuint pad:5; 
	 GLuint opcode:16; 
      } bits;
      GLuint dword;

   } header;

   GLuint buffer_start; 
   GLuint buffer_end; 
};

/* NEW in Integrated Graphics Device */
struct brw_aa_line_parameters
{
   struct header header;

   struct {
      GLuint aa_coverage_slope:8;
      GLuint pad0:8;
      GLuint aa_coverage_bias:8;
      GLuint pad1:8;
   } bits0;

   struct {
      GLuint aa_coverage_endcap_slope:8;
      GLuint pad0:8;
      GLuint aa_coverage_endcap_bias:8;
      GLuint pad1:8;
   } bits1;
};

struct brw_line_stipple
{   
   struct header header;
  
   struct
   {
      GLuint pattern:16; 
      GLuint pad:16;
   } bits0;
   
   struct
   {
      GLuint repeat_count:9; 
      GLuint pad:7;
      GLuint inverse_repeat_count:16; 
   } bits1;
};


struct brw_pipelined_state_pointers
{
   struct header header;
   
   struct {
      GLuint pad:5;
      GLuint offset:27; /* Offset from GENERAL_STATE_BASE */
   } vs;
   
   struct
   {
      GLuint enable:1;
      GLuint pad:4;
      GLuint offset:27; /* Offset from GENERAL_STATE_BASE */
   } gs;
   
   struct
   {
      GLuint enable:1;
      GLuint pad:4;
      GLuint offset:27; /* Offset from GENERAL_STATE_BASE */
   } clp;
   
   struct
   {
      GLuint pad:5;
      GLuint offset:27; /* Offset from GENERAL_STATE_BASE */
   } sf;

   struct
   {
      GLuint pad:5;
      GLuint offset:27; /* Offset from GENERAL_STATE_BASE */
   } wm;
   
   struct
   {
      GLuint pad:5;
      GLuint offset:27; /* Offset from GENERAL_STATE_BASE. KW: check me! */
   } cc;
};


struct brw_polygon_stipple_offset
{
   struct header header;

   struct {
      GLuint y_offset:5; 
      GLuint pad:3;
      GLuint x_offset:5; 
      GLuint pad0:19;
   } bits0;
};



struct brw_polygon_stipple
{
   struct header header;
   GLuint stipple[32];
};



struct brw_pipeline_select
{
   struct
   {
      GLuint pipeline_select:1;   
      GLuint pad:15;
      GLuint opcode:16;   
   } header;
};


struct brw_pipe_control
{
   struct
   {
      GLuint length:8;
      GLuint notify_enable:1;
      GLuint texture_cache_flush_enable:1;
      GLuint indirect_state_pointers_disable:1;
      GLuint instruction_state_cache_flush_enable:1;
      GLuint write_cache_flush_enable:1;
      GLuint depth_stall_enable:1;
      GLuint post_sync_operation:2;

      GLuint opcode:16;
   } header;

   struct
   {
      GLuint pad:2;
      GLuint dest_addr_type:1;
      GLuint dest_addr:29;
   } bits1;

   GLuint data0;
   GLuint data1;
};


a67 96
struct brw_cs_urb_state
{
   struct header header;

   struct
   {
      GLuint nr_urb_entries:3;   
      GLuint pad:1;
      GLuint urb_entry_size:5;   
      GLuint pad0:23;
   } bits0;
};

struct brw_constant_buffer
{
   struct
   {
      GLuint length:8;   
      GLuint valid:1;   
      GLuint pad:7;
      GLuint opcode:16;   
   } header;

   struct
   {
      GLuint buffer_length:6;   
      GLuint buffer_address:26;  
   } bits0;
};

struct brw_state_base_address
{
   struct header header;

   struct
   {
      GLuint modify_enable:1;
      GLuint pad:4;
      GLuint general_state_address:27;  
   } bits0;

   struct
   {
      GLuint modify_enable:1;
      GLuint pad:4;
      GLuint surface_state_address:27;  
   } bits1;

   struct
   {
      GLuint modify_enable:1;
      GLuint pad:4;
      GLuint indirect_object_state_address:27;  
   } bits2;

   struct
   {
      GLuint modify_enable:1;
      GLuint pad:11;
      GLuint general_state_upper_bound:20;  
   } bits3;

   struct
   {
      GLuint modify_enable:1;
      GLuint pad:11;
      GLuint indirect_object_state_upper_bound:20;  
   } bits4;
};

struct brw_state_prefetch
{
   struct header header;

   struct
   {
      GLuint prefetch_count:3;   
      GLuint pad:3;
      GLuint prefetch_pointer:26;  
   } bits0;
};

struct brw_system_instruction_pointer
{
   struct header header;

   struct
   {
      GLuint pad:4;
      GLuint system_instruction_pointer:28;  
   } bits0;
};




a768 108
/* volume 5c Shared Functions - 1.13.4.1.2 */
struct gen7_surface_state
{
   struct {
      GLuint cube_pos_z:1;
      GLuint cube_neg_z:1;
      GLuint cube_pos_y:1;
      GLuint cube_neg_y:1;
      GLuint cube_pos_x:1;
      GLuint cube_neg_x:1;
      GLuint pad2:2;
      GLuint render_cache_read_write:1;
      GLuint pad1:1;
      GLuint surface_array_spacing:1;
      GLuint vert_line_stride_ofs:1;
      GLuint vert_line_stride:1;
      GLuint tile_walk:1;
      GLuint tiled_surface:1;
      GLuint horizontal_alignment:1;
      GLuint vertical_alignment:2;
      GLuint surface_format:9;     /**< BRW_SURFACEFORMAT_x */
      GLuint pad0:1;
      GLuint is_array:1;
      GLuint surface_type:3;       /**< BRW_SURFACE_1D/2D/3D/CUBE */
   } ss0;

   struct {
      GLuint base_addr;
   } ss1;

   struct {
      GLuint width:14;
      GLuint pad1:2;
      GLuint height:14;
      GLuint pad0:2;
   } ss2;

   struct {
      GLuint pitch:18;
      GLuint pad:3;
      GLuint depth:11;
   } ss3;

   struct {
      GLuint multisample_position_palette_index:3;
      GLuint num_multisamples:3;
      GLuint multisampled_surface_storage_format:1;
      GLuint render_target_view_extent:11;
      GLuint min_array_elt:11;
      GLuint rotation:2;
      GLuint pad0:1;
   } ss4;

   struct {
      GLuint mip_count:4;
      GLuint min_lod:4;
      GLuint pad1:12;
      GLuint y_offset:4;
      GLuint pad0:1;
      GLuint x_offset:7;
   } ss5;

   struct {
      GLuint pad; /* Multisample Control Surface stuff */
   } ss6;

   struct {
      GLuint resource_min_lod:12;
      GLuint pad0:16;
      GLuint alpha_clear_color:1;
      GLuint blue_clear_color:1;
      GLuint green_clear_color:1;
      GLuint red_clear_color:1;
   } ss7;
};


struct brw_vertex_element_state
{
   struct
   {
      GLuint src_offset:11; 
      GLuint pad:5;
      GLuint src_format:9; 
      GLuint pad0:1;
      GLuint valid:1; 
      GLuint vertex_buffer_index:5; 
   } ve0;
   
   struct
   {
      GLuint dst_offset:8; 
      GLuint pad:8;
      GLuint vfcomponent3:4; 
      GLuint vfcomponent2:4; 
      GLuint vfcomponent1:4; 
      GLuint vfcomponent0:4; 
   } ve1;
};

#define BRW_VEP_MAX 18

struct brw_vertex_element_packet {
   struct header header;
   struct brw_vertex_element_state ve[BRW_VEP_MAX]; /* note: less than _TNL_ATTRIB_MAX */
};


d796 1
a796 1
      GLuint compression_control:2; /* gen6: quater control */
d801 5
a805 1
      GLuint destreg__conditionalmod:4; /* destreg - send, conditionalmod - others */
d821 1
a821 1
	 GLuint pad:1;
d836 1
a836 1
	 GLuint pad:1;
d851 1
a851 1
	 GLuint pad:1;
d865 3
a867 1
	 GLuint pad0:6;
d886 23
d923 3
a925 2
	 GLuint flag_reg_nr:1;
	 GLuint pad:6;
d938 3
a940 2
	 GLuint flag_reg_nr:1;
	 GLuint pad:6;	
d956 3
a958 2
	 GLuint flag_reg_nr:1;
	 GLuint pad1:6;
d974 3
a976 2
	 GLuint flag_reg_nr:1;
	 GLuint pad1:6;
d979 5
d992 12
d1047 1
a1047 2
	 GLuint flag_reg_nr:1;
	 GLuint pad1:6;	
d1063 1
a1063 2
	 GLuint flag_reg_nr:1;
	 GLuint pad2:6;
d1090 44
d1148 1
d1164 1
d1177 1
d1189 1
d1247 1
d1260 1
d1273 1
d1287 1
d1291 1
a1291 1
	 GLuint pixel_scoreboard_clear:1;
d1301 1
d1305 1
a1305 1
	 GLuint pixel_scoreboard_clear:1;
d1316 5
a1320 1
      /* Sandybridge DP for sample cache, constant cache, render cache */
d1331 1
a1331 1
      } dp_sampler_const_cache;
d1333 10
d1347 1
a1347 1
	 GLuint pixel_scoreboard_clear:1;
d1358 8
a1365 1
      /* See volume vol5c.2 sections 2.11.2.1.5 and 2.11.21.2.2. */
d1370 2
a1371 2
	 GLuint pixel_scoreboard_clear:1;
	 GLuint pad0:1;
d1380 1
d1383 7
a1389 14
	 GLuint function_control:16;
	 GLuint response_length:4;
	 GLuint msg_length:4;
	 GLuint msg_target:4;
	 GLuint pad1:3;
	 GLuint end_of_thread:1;
      } generic;

      /* Of this struct, only end_of_thread is not present for gen6. */
      struct {
	 GLuint function_control:19;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
d1391 1
a1391 2
	 GLuint end_of_thread:1;
      } generic_gen5;
d1399 22
@


1.6
log
@Merge Mesa 7.10.3
@
text
@a82 19

struct brw_3d_primitive
{
   struct
   {
      GLuint length:8; 
      GLuint pad:2;
      GLuint topology:5; 
      GLuint indexed:1; 
      GLuint opcode:16; 
   } header;

   GLuint verts_per_instance;  
   GLuint start_vert_location;  
   GLuint instance_count;  
   GLuint start_instance_location;  
   GLuint base_vert_location;  
};

d1001 8
a1008 1
      GLuint pad0:5;
d1114 48
d1206 24
a1229 3
/* Documented in the subsystem/shared-functions/sampler chapter...
 */
struct brw_surface_state
d1232 7
a1238 9
      GLuint cube_pos_z:1; 
      GLuint cube_neg_z:1; 
      GLuint cube_pos_y:1; 
      GLuint cube_neg_y:1; 
      GLuint cube_pos_x:1; 
      GLuint cube_neg_x:1; 
      GLuint pad:2;
      /* Required on gen6 for surfaces accessed through render cache messages.
       */
d1240 8
a1247 10
      /* Ironlake and newer: instead of replicating one of the texels */
      GLuint cube_corner_average:1;
      GLuint mipmap_layout_mode:1; 
      GLuint vert_line_stride_ofs:1; 
      GLuint vert_line_stride:1; 
      GLuint color_blend:1; 
      GLuint writedisable_blue:1; 
      GLuint writedisable_green:1; 
      GLuint writedisable_red:1; 
      GLuint writedisable_alpha:1; 
a1248 1
      GLuint data_return_format:1; 
d1250 1
d1253 1
a1253 1
   
d1255 1
a1255 1
      GLuint base_addr;  
d1257 1
a1257 1
   
d1259 4
a1262 4
      GLuint pad:2;
      GLuint mip_count:4; 
      GLuint width:13; 
      GLuint height:13; 
d1266 3
a1268 5
      GLuint tile_walk:1; 
      GLuint tiled_surface:1; 
      GLuint pad:1; 
      GLuint pitch:18; 
      GLuint depth:11; 
d1270 1
a1270 1
   
a1272 1
      GLuint pad1:1;
d1274 4
a1278 3
      GLuint render_target_view_extent:9;
      GLuint min_array_elt:11;
      GLuint min_lod:4; 
d1282 3
a1284 4
      GLuint pad1:16;
      GLuint cache_control:2;
      GLuint gfdt:1;
      GLuint encrypt:1;
d1288 1
a1288 3
   } ss5;   /* New in G4X */

};
d1290 3
a1293 3

struct brw_vertex_buffer_state
{
d1295 7
a1301 18
      GLuint pitch:11; 
      GLuint pad:15;
      GLuint access_type:1; 
      GLuint vb_index:5; 
   } vb0;
   
   GLuint start_addr; 
   GLuint max_index;   
#if 1
   GLuint instance_data_step_rate; /* not included for sequential/random vertices? */
#endif
};

#define BRW_VBP_MAX 17

struct brw_vb_array_state {
   struct header header;
   struct brw_vertex_buffer_state vb[BRW_VBP_MAX];
d1593 1
d1674 12
d1705 14
d1808 17
a1824 1
      } dp_render_cache;
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d281 1
a281 1
      GLuint aa_coverage_scope:8;
d753 1
a753 1
      GLuint pad0:25;
d912 1
a912 1
struct gen6_scissor_state
d914 4
a917 2
   GLuint ymin, xmin;
   GLuint ymax, xmax;
d1067 9
d1087 1
a1087 1
      GLuint pad:1;
d1099 2
a1100 1
      GLuint pad:3;
d1114 3
a1116 1
      GLuint pad:19;
d1181 6
a1186 1
      GLuint pad:4;
d1232 1
a1232 2
      GLuint llc_mapping:1;
      GLuint mlc_mapping:1;
d1234 1
a1234 1
      GLuint gfdt_src:1;
d1326 1
a1326 1
      GLuint compression_control:2;
d1332 2
a1333 1
      GLuint pad0:2;
d1381 1
a1381 1
	 GLuint pad1:2;
d1395 1
a1395 1
	 GLuint pad1:2;
d1398 12
d1556 15
d1668 12
d1718 28
d1747 1
a1747 1
	 GLuint pad:16;
d1755 1
d1757 1
a1757 1
	 GLuint pad:19;
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d36 8
d445 2
a446 2
      GLuint cs_fence:10;  
      GLuint pad:2;
d450 1
a450 1
struct brw_constant_buffer_state /* previously brw_command_streamer */
d661 16
d678 82
a852 2


d912 5
d927 3
a929 1
      GLuint pad0:10;
d1037 22
d1147 9
d1176 1
a1176 1
      GLuint surface_format:9; 
d1179 1
a1179 1
      GLuint surface_type:3; 
d1220 1
a1220 1
   } ss5;   /* NEW in Integrated Graphics Device */
d1313 1
a1313 1
      GLuint destreg__conditonalmod:4; /* destreg - send, conditionalmod - others */
d1341 3
a1343 1
	 GLuint pad:6;
d1358 1
a1358 1
	 GLuint pad0:1;
d1445 8
d1463 1
a1463 1
	 GLuint pad:1;
d1478 1
a1478 1
	 GLuint pad0:1;
d1492 1
a1492 1
	 GLuint pad0:1;
d1540 15
d1577 13
d1593 16
d1622 13
d1647 14
d1669 9
d1680 1
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d178 1
a178 1
struct brw_depthbuffer_gm45_g4x
d1408 1
a1408 1
      } sampler_gm45_g4x; 
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d176 42
d312 1
a312 1
      GLuint offset:27; 
d319 1
a319 1
      GLuint offset:27; 
d326 1
a326 1
      GLuint offset:27; 
d332 1
a332 1
      GLuint offset:27; 
d338 1
a338 1
      GLuint offset:27; 
d344 1
a344 1
      GLuint offset:27; /* KW: check me! */
d547 1
a547 1
   GLuint kernel_start_pointer:26; 
d711 1
a711 1
      GLuint cc_viewport_state_offset:27; 
d773 1
a773 1
      GLuint sf_viewport_state_offset:27; 
d1005 1
d1408 1
a1408 1
      } sampler_igd; 
@


1.1
log
@Initial revision
@
text
@d144 2
a145 1
	 GLuint pad:4;
d170 2
a171 2
	 GLuint pad:12;
	 GLuint min_array_element:9; 
d176 8
d225 19
d346 2
a347 1
      GLuint pad:2;
d551 16
a566 1
   struct thread1 thread1;
d579 2
a580 2
      GLuint max_threads:6; 	/* may be less */
      GLuint pad3:1;
d589 1
a589 1
      GLuint pad1:1;
d756 2
a757 1
      GLuint pad0:11;
d782 2
a783 2
      GLuint max_threads:1; 
      GLuint pad3:6;
d797 6
a802 1
      GLuint pad0:26;
d804 1
a804 1
      GLuint pad1:1;
d824 2
a825 2
      GLuint max_threads:4; 
      GLuint pad3:3;
d853 1
a853 1
      GLuint pad0:1;
d863 3
a865 1
      GLuint pad0:7;
d878 2
a879 3
      GLuint pad1:1; 
      GLuint max_threads:6; 
      GLuint pad2:1;
d1017 6
a1022 2
      GLuint pad:19;
      GLuint min_array_elt:9; 
d1025 12
d1356 11
d1403 1
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Mesa 7.0.1
@
text
@d522 1
a522 16
   struct
   {
      GLuint pad0:7;
      GLuint sw_exception_enable:1;
      GLuint pad1:3;
      GLuint mask_stack_exception_enable:1;
      GLuint pad2:1;
      GLuint illegal_op_exception_enable:1;
      GLuint pad3:2;
      GLuint floating_point_mode:1;
      GLuint thread_priority:1;
      GLuint binding_table_entry_count:8;
      GLuint pad4:5;
      GLuint single_program_flow:1;
   } thread1;

d535 2
a536 2
      GLuint max_threads:1; 	/* may be less */
      GLuint pad3:6;
a1324 1
      GLint d;
@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@a35 8

/** Number of general purpose registers (VS, WM, etc) */
#define BRW_MAX_GRF 128

/** Number of message register file registers */
#define BRW_MAX_MRF 16


d144 1
a144 2
	 GLuint pad:2;
	 GLuint software_tiled_rendering_mode:2;
d169 2
a170 2
	 GLuint pad:10;
	 GLuint min_array_element:11; 
a176 50
struct brw_depthbuffer_g4x
{
   union header_union header;
   
   union {
      struct {
	 GLuint pitch:18; 
	 GLuint format:3; 
	 GLuint pad:2;
	 GLuint software_tiled_rendering_mode:2;
	 GLuint depth_offset_disable:1; 
	 GLuint tile_walk:1; 
	 GLuint tiled_surface:1; 
	 GLuint pad2:1;
	 GLuint surface_type:3; 
      } bits;
      GLuint dword;
   } dword1;
   
   GLuint dword2_base_addr; 
 
   union {
      struct {
	 GLuint pad:1;
	 GLuint mipmap_layout:1; 
	 GLuint lod:4; 
	 GLuint width:13; 
	 GLuint height:13; 
      } bits;
      GLuint dword;
   } dword3;

   union {
      struct {
	 GLuint pad:10;
	 GLuint min_array_element:11; 
	 GLuint depth:11; 
      } bits;
      GLuint dword;
   } dword4;

   union {
      struct {
         GLuint xoffset:16;
         GLuint yoffset:16;
      } bits;
      GLuint dword;
   } dword5;   /* NEW in Integrated Graphics Device */
};

a215 19
/* NEW in Integrated Graphics Device */
struct brw_aa_line_parameters
{
   struct header header;

   struct {
      GLuint aa_coverage_slope:8;
      GLuint pad0:8;
      GLuint aa_coverage_bias:8;
      GLuint pad1:8;
   } bits0;

   struct {
      GLuint aa_coverage_endcap_slope:8;
      GLuint pad0:8;
      GLuint aa_coverage_endcap_bias:8;
      GLuint pad1:8;
   } bits1;
};
d242 1
a242 1
      GLuint offset:27; /* Offset from GENERAL_STATE_BASE */
d249 1
a249 1
      GLuint offset:27; /* Offset from GENERAL_STATE_BASE */
d256 1
a256 1
      GLuint offset:27; /* Offset from GENERAL_STATE_BASE */
d262 1
a262 1
      GLuint offset:27; /* Offset from GENERAL_STATE_BASE */
d268 1
a268 1
      GLuint offset:27; /* Offset from GENERAL_STATE_BASE */
d274 1
a274 1
      GLuint offset:27; /* Offset from GENERAL_STATE_BASE. KW: check me! */
d318 1
a318 2
      GLuint texture_cache_flush_enable:1;
      GLuint indirect_state_pointers_disable:1;
d366 2
a367 2
      GLuint cs_fence:11;  
      GLuint pad:1;
d371 1
a371 1
struct brw_cs_urb_state
d476 1
a476 1
   GLuint kernel_start_pointer:26; /* Offset from GENERAL_STATE_BASE */
d550 2
a551 2
      GLuint max_threads:5; 	/* may be less */
      GLuint pad3:2;
d560 1
a560 1
      GLuint negative_w_clip_test:1;
a581 90
struct gen6_blend_state
{
   struct {
      GLuint dest_blend_factor:5;
      GLuint source_blend_factor:5;
      GLuint pad3:1;
      GLuint blend_func:3;
      GLuint pad2:1;
      GLuint ia_dest_blend_factor:5;
      GLuint ia_source_blend_factor:5;
      GLuint pad1:1;
      GLuint ia_blend_func:3;
      GLuint pad0:1;
      GLuint ia_blend_enable:1;
      GLuint blend_enable:1;
   } blend0;

   struct {
      GLuint post_blend_clamp_enable:1;
      GLuint pre_blend_clamp_enable:1;
      GLuint clamp_range:2;
      GLuint pad0:4;
      GLuint x_dither_offset:2;
      GLuint y_dither_offset:2;
      GLuint dither_enable:1;
      GLuint alpha_test_func:3;
      GLuint alpha_test_enable:1;
      GLuint pad1:1;
      GLuint logic_op_func:4;
      GLuint logic_op_enable:1;
      GLuint pad2:1;
      GLuint write_disable_b:1;
      GLuint write_disable_g:1;
      GLuint write_disable_r:1;
      GLuint write_disable_a:1;
      GLuint pad3:1;
      GLuint alpha_to_coverage_dither:1;
      GLuint alpha_to_one:1;
      GLuint alpha_to_coverage:1;
   } blend1;
};

struct gen6_color_calc_state
{
   struct {
      GLuint alpha_test_format:1;
      GLuint pad0:14;
      GLuint round_disable:1;
      GLuint bf_stencil_ref:8;
      GLuint stencil_ref:8;
   } cc0;

   union {
      GLfloat alpha_ref_f;
      struct {
	 GLuint ui:8;
	 GLuint pad0:24;
      } alpha_ref_fi;
   } cc1;

   GLfloat constant_r;
   GLfloat constant_g;
   GLfloat constant_b;
   GLfloat constant_a;
};

struct gen6_depth_stencil_state
{
   struct {
      GLuint pad0:3;
      GLuint bf_stencil_pass_depth_pass_op:3;
      GLuint bf_stencil_pass_depth_fail_op:3;
      GLuint bf_stencil_fail_op:3;
      GLuint bf_stencil_func:3;
      GLuint bf_stencil_enable:1;
      GLuint pad1:2;
      GLuint stencil_write_enable:1;
      GLuint stencil_pass_depth_pass_op:3;
      GLuint stencil_pass_depth_fail_op:3;
      GLuint stencil_fail_op:3;
      GLuint stencil_func:3;
      GLuint stencil_enable:1;
   } ds0;

   struct {
      GLuint bf_stencil_write_mask:8;
      GLuint bf_stencil_test_mask:8;
      GLuint stencil_write_mask:8;
      GLuint stencil_test_mask:8;
   } ds1;
a582 8
   struct {
      GLuint pad0:26;
      GLuint depth_write_enable:1;
      GLuint depth_test_func:3;
      GLuint pad1:1;
      GLuint depth_test_enable:1;
   } ds2;
};
d640 1
a640 1
      GLuint cc_viewport_state_offset:27; /* Offset from GENERAL_STATE_BASE */
d676 2
d702 1
a702 1
      GLuint sf_viewport_state_offset:27; /* Offset from GENERAL_STATE_BASE */
d727 1
a727 2
      GLuint pad0:10;
      GLuint aa_line_distance_mode:1;
a735 7
struct gen6_scissor_rect
{
   GLuint xmin:16;
   GLuint ymin:16;
   GLuint xmax:16;
   GLuint ymax:16;
};
d746 1
a746 3
      GLuint pad0:8;
      GLuint rendering_enable:1; /* for Ironlake */
      GLuint pad4:1;
d752 2
a753 2
      GLuint max_threads:5; 
      GLuint pad3:2;
d767 2
a768 2
      GLuint pad0:12;
      GLuint svbi_post_inc_value:10;
a769 5
      GLuint svbi_post_inc_enable:1;
      GLuint svbi_payload:1;
      GLuint discard_adjaceny:1;
      GLuint reorder_enable:1; 
      GLuint pad2:1;
d789 2
a790 2
      GLuint max_threads:6; 
      GLuint pad3:1;
d818 1
a818 1
      GLuint depth_buffer_clear:1;
d828 1
a828 3
      GLuint enable_con_32_pix:1;
      GLuint enable_con_64_pix:1;
      GLuint pad0:5;
d841 3
a843 2
      GLuint transposed_urb_read_enable:1; 
      GLuint max_threads:7; 
a847 22
   
   /* for Ironlake only */
   struct {
      GLuint pad0:1;
      GLuint grf_reg_count_1:3; 
      GLuint pad1:2;
      GLuint kernel_start_pointer_1:26;
   } wm8;       

   struct {
      GLuint pad0:1;
      GLuint grf_reg_count_2:3; 
      GLuint pad1:2;
      GLuint kernel_start_pointer_2:26;
   } wm9;       

   struct {
      GLuint pad0:1;
      GLuint grf_reg_count_3:3; 
      GLuint pad1:2;
      GLuint kernel_start_pointer_3:26;
   } wm10;       
a853 9
struct gen5_sampler_default_color {
   uint8_t ub[4];
   float f[4];
   uint16_t hf[4];
   uint16_t us[4];
   int16_t s[4];
   uint8_t b[4];
};

d865 1
a865 1
      GLuint min_mag_neq:1;
d877 1
a877 2
      GLuint cube_control_mode:1;
      GLuint pad:2;
d891 1
a891 3
      GLuint non_normalized_coord:1;
      GLuint pad:12;
      GLuint address_round:6;
a926 1
   /* scissor coordinates are inclusive */
a934 9
struct gen6_sf_viewport {
   GLfloat m00;
   GLfloat m11;
   GLfloat m22;
   GLfloat m30;
   GLfloat m31;
   GLfloat m32;
};

d946 1
a946 6
      GLuint pad:2;
      /* Required on gen6 for surfaces accessed through render cache messages.
       */
      GLuint render_cache_read_write:1;
      /* Ironlake and newer: instead of replicating one of the texels */
      GLuint cube_corner_average:1;
d955 1
a955 1
      GLuint surface_format:9;     /**< BRW_SURFACEFORMAT_x */
d958 1
a958 1
      GLuint surface_type:3;       /**< BRW_SURFACE_1D/2D/3D/CUBE */
d981 2
a982 6
      GLuint multisample_position_palette_index:3;
      GLuint pad1:1;
      GLuint num_multisamples:3;
      GLuint pad0:1;
      GLuint render_target_view_extent:9;
      GLuint min_array_elt:11;
a984 11

   struct {
      GLuint pad1:16;
      GLuint cache_control:2;
      GLuint gfdt:1;
      GLuint encrypt:1;
      GLuint y_offset:4;
      GLuint pad0:1;
      GLuint x_offset:7;
   } ss5;   /* New in G4X */

d1071 1
a1071 1
      GLuint compression_control:2; /* gen6: quater control */
d1076 2
a1077 3
      GLuint destreg__conditionalmod:4; /* destreg - send, conditionalmod - others */
      GLuint acc_wr_control:1;
      GLuint cmpt_control:1;
d1104 1
a1104 3
	 GLuint src1_reg_file:2;        /* 0x00000c00 */
	 GLuint src1_reg_type:3;        /* 0x00007000 */
	 GLuint pad:1;
d1119 1
a1119 1
	 GLuint pad:1;
d1123 1
a1123 1
	 GLuint dest_horiz_stride:2;
d1137 1
a1137 1
	 GLuint dest_horiz_stride:2;
a1139 12

      struct {
	 GLuint dest_reg_file:2;
	 GLuint dest_reg_type:3;
	 GLuint src0_reg_file:2;
	 GLuint src0_reg_type:3;
	 GLuint src1_reg_file:2;
	 GLuint src1_reg_type:3;
	 GLuint pad:1;

	 GLint jump_count:16;
      } branch_gen6;
a1205 8
       struct 
       {
           GLuint pad:26;
           GLuint end_of_thread:1;
           GLuint pad1:1;
           GLuint sfid:4;
       } send_gen5;  /* for Ironlake only */

d1216 1
a1216 1
	 GLuint src1_address_mode:1;
d1231 1
a1231 1
	 GLuint src1_address_mode:1;
d1245 1
a1245 1
	 GLuint src1_address_mode:1;
a1277 15
      struct
      {
	 /* Signed jump distance to the ip to jump to if all channels
	  * are disabled after the break or continue.  It should point
	  * to the end of the innermost control flow block, as that's
	  * where some channel could get re-enabled.
	  */
	 int jip:16;

	 /* Signed jump distance to the location to resume execution
	  * of this channel if it's enabled for the break or continue.
	  */
	 int uip:16;
      } break_cont;

a1292 15
	 GLuint function:4;
	 GLuint int_type:1;
	 GLuint precision:1;
	 GLuint saturate:1;
	 GLuint data_type:1;
	 GLuint snapshot:1;
	 GLuint pad0:10;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
      } math_gen5;

      struct {
a1303 24
      struct {
         GLuint binding_table_index:8;
         GLuint sampler:4;
         GLuint msg_type:4;
         GLuint response_length:4;
         GLuint msg_length:4;
         GLuint msg_target:4;
         GLuint pad1:3;
         GLuint end_of_thread:1;
      } sampler_g4x;

      struct {
	 GLuint binding_table_index:8;
	 GLuint sampler:4;
	 GLuint msg_type:4;
	 GLuint simd_mode:2;
	 GLuint pad0:1;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
      } sampler_gen5;

a1306 16
	 GLuint opcode:4;
	 GLuint offset:6;
	 GLuint swizzle_control:2; 
	 GLuint pad:1;
	 GLuint allocate:1;
	 GLuint used:1;
	 GLuint complete:1;
	 GLuint pad0:3;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
      } urb_gen5;

      struct {
a1320 25
	 GLuint msg_type:3;
	 GLuint target_cache:2;
	 GLuint response_length:4;
	 GLuint msg_length:4;
	 GLuint msg_target:4;
	 GLuint pad1:3;
	 GLuint end_of_thread:1;
      } dp_read_g4x;

      struct {
	 GLuint binding_table_index:8;
	 GLuint msg_control:3;  
	 GLuint msg_type:3;  
	 GLuint target_cache:2;    
	 GLuint pad0:3;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
      } dp_read_gen5;

      struct {
	 GLuint binding_table_index:8;
	 GLuint msg_control:3;
d1332 1
a1332 43
	 GLuint binding_table_index:8;
	 GLuint msg_control:3;
	 GLuint pixel_scoreboard_clear:1;
	 GLuint msg_type:3;    
	 GLuint send_commit_msg:1;
	 GLuint pad0:3;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
      } dp_write_gen5;

      /* Sandybridge DP for sample cache, constant cache, render cache */
      struct {
	 GLuint binding_table_index:8;
	 GLuint msg_control:5;
	 GLuint msg_type:3;
	 GLuint pad0:3;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
      } dp_sampler_const_cache;

      struct {
	 GLuint binding_table_index:8;
	 GLuint msg_control:3;
	 GLuint slot_group_select:1;
	 GLuint pixel_scoreboard_clear:1;
	 GLuint msg_type:4;
	 GLuint send_commit_msg:1;
	 GLuint pad0:1;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
      } dp_render_cache;

      struct {
	 GLuint function_control:16;
a1339 10
      /* Of this struct, only end_of_thread is not present for gen6. */
      struct {
	 GLuint function_control:19;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
      } generic_gen5;

a1341 1
      float f;
@


1.1.1.4
log
@Import Mesa 9.2.0
@
text
@d36 382
d450 96
d1020 1
a1020 8
      GLuint pad0:1;

      /* These next four bits are for Ironlake+ */
      GLuint fast_span_coverage_enable:1;
      GLuint depth_buffer_clear:1;
      GLuint depth_buffer_resolve_enable:1;
      GLuint hierarchical_depth_buffer_resolve_enable:1;

a1125 48
struct gen7_sampler_state
{
   struct
   {
      GLuint aniso_algorithm:1;
      GLuint lod_bias:13;
      GLuint min_filter:3;
      GLuint mag_filter:3;
      GLuint mip_filter:2;
      GLuint base_level:5;
      GLuint pad1:1;
      GLuint lod_preclamp:1;
      GLuint default_color_mode:1;
      GLuint pad0:1;
      GLuint disable:1;
   } ss0;

   struct
   {
      GLuint cube_control_mode:1;
      GLuint shadow_function:3;
      GLuint pad:4;
      GLuint max_lod:12;
      GLuint min_lod:12;
   } ss1;

   struct
   {
      GLuint pad:5;
      GLuint default_color_pointer:27;
   } ss2;

   struct
   {
      GLuint r_wrap_mode:3;
      GLuint t_wrap_mode:3;
      GLuint s_wrap_mode:3;
      GLuint pad:1;
      GLuint non_normalized_coord:1;
      GLuint trilinear_quality:2;
      GLuint address_round:6;
      GLuint max_aniso:3;
      GLuint chroma_key_mode:1;
      GLuint chroma_key_index:2;
      GLuint chroma_key_enable:1;
      GLuint pad0:6;
   } ss3;
};
d1170 31
a1200 1
struct gen7_sf_clip_viewport {
d1202 9
a1210 7
      GLfloat m00;
      GLfloat m11;
      GLfloat m22;
      GLfloat m30;
      GLfloat m31;
      GLfloat m32;
   } viewport;
d1212 17
a1228 1
   GLuint pad0[2];
d1231 11
a1241 5
      GLfloat xmin;
      GLfloat xmax;
      GLfloat ymin;
      GLfloat ymax;
   } guardband;
d1243 15
a1257 1
   GLfloat pad1[4];
d1260 39
d1326 1
a1326 1
      GLuint compression_control:2; /* gen6: quarter control */
d1331 1
a1331 5
      /**
       * Conditional Modifier for most instructions.  On Gen6+, this is also
       * used for the SEND instruction's Message Target/SFID.
       */
      GLuint destreg__conditionalmod:4;
d1347 1
a1347 1
         GLuint nibctrl:1; /* gen7+ */
d1362 1
a1362 1
         GLuint nibctrl:1; /* gen7+ */
d1377 1
a1377 1
         GLuint nibctrl:1; /* gen7+ */
d1391 1
a1391 3
         GLuint src1_reg_file:2;
         GLuint src1_reg_type:3;
         GLuint nibctrl:1; /* gen7+ */
a1409 23

      struct {
         GLuint dest_reg_file:1; /* gen6, not gen7+ */
	 GLuint flag_subreg_num:1;
         GLuint flag_reg_nr:1; /* gen7+ */
         GLuint pad0:1;
	 GLuint src0_abs:1;
	 GLuint src0_negate:1;
	 GLuint src1_abs:1;
	 GLuint src1_negate:1;
	 GLuint src2_abs:1;
	 GLuint src2_negate:1;
         GLuint src_type:2; /* gen7+ */
         GLuint dst_type:2; /* gen7+ */
         GLuint pad1:1;
         GLuint nibctrl:1; /* gen7+ */
         GLuint pad2:1;
	 GLuint dest_writemask:4;
	 GLuint dest_subreg_nr:3;
	 GLuint dest_reg_nr:8;
      } da3src;

      uint32_t ud;
d1424 2
a1425 3
	 GLuint flag_subreg_nr:1;
         GLuint flag_reg_nr:1; /* gen7+ */
	 GLuint pad:5;
d1438 2
a1439 3
	 GLuint flag_subreg_nr:1;
         GLuint flag_reg_nr:1; /* gen7+ */
	 GLuint pad:5;
d1455 2
a1456 3
	 GLuint flag_subreg_nr:1;
         GLuint flag_reg_nr:1; /* gen7+ */
	 GLuint pad1:5;
d1472 2
a1473 3
	 GLuint flag_subreg_nr:1;
         GLuint flag_reg_nr:1; /* gen7+ */
	 GLuint pad1:5;
a1475 5
      /* Extended Message Descriptor for Ironlake (Gen5) SEND instruction.
       *
       * Does not apply to Gen6+.  The SFID/message target moved to bits
       * 27:24 of the header (destreg__conditionalmod); EOT is in bits3.
       */
a1483 12
      struct {
	 GLuint src0_rep_ctrl:1;
	 GLuint src0_swizzle:8;
	 GLuint src0_subreg_nr:3;
	 GLuint src0_reg_nr:8;
	 GLuint pad0:1;
	 GLuint src1_rep_ctrl:1;
	 GLuint src1_swizzle:8;
	 GLuint src1_subreg_nr_low:2;
      } da3src;

      uint32_t ud;
d1527 2
a1528 1
	 GLuint pad1:7;
d1544 2
a1545 1
	 GLuint pad2:7;
a1555 1
      /* This is also used for gen7 IF/ELSE instructions */
a1570 44
      /**
       * \defgroup SEND instructions / Message Descriptors
       *
       * @@{
       */

      /**
       * Generic Message Descriptor for Gen4 SEND instructions.  The structs
       * below expand function_control to something specific for their
       * message.  Due to struct packing issues, they duplicate these bits.
       *
       * See the G45 PRM, Volume 4, Table 14-15.
       */
      struct {
	 GLuint function_control:16;
	 GLuint response_length:4;
	 GLuint msg_length:4;
	 GLuint msg_target:4;
	 GLuint pad1:3;
	 GLuint end_of_thread:1;
      } generic;

      /**
       * Generic Message Descriptor for Gen5-7 SEND instructions.
       *
       * See the Sandybridge PRM, Volume 2 Part 2, Table 8-15.  (Sadly, most
       * of the information on the SEND instruction is missing from the public
       * Ironlake PRM.)
       *
       * The table claims that bit 31 is reserved/MBZ on Gen6+, but it lies.
       * According to the SEND instruction description:
       * "The MSb of the message description, the EOT field, always comes from
       *  bit 127 of the instruction word"...which is bit 31 of this field.
       */
      struct {
	 GLuint function_control:19;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
      } generic_gen5;

      /** G45 PRM, Volume 4, Section 6.1.1.1 */
a1584 1
      /** Ironlake PRM, Volume 4 Part 1, Section 6.1.1.1 */
a1599 1
      /** G45 PRM, Volume 4, Section 4.8.1.1.1 [DevBW] and [DevCL] */
a1611 1
      /** G45 PRM, Volume 4, Section 4.8.1.1.2 [DevCTG] */
a1622 1
      /** Ironlake PRM, Volume 4 Part 1, Section 4.11.1.1.3 */
a1635 12
      struct {
	 GLuint binding_table_index:8;
	 GLuint sampler:4;
	 GLuint msg_type:5;
	 GLuint simd_mode:2;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
      } sampler_gen7;

a1654 15
	 GLuint opcode:3;
	 GLuint offset:11;
	 GLuint swizzle_control:1;
	 GLuint complete:1;
	 GLuint per_slot_offset:1;
	 GLuint pad0:2;
	 GLuint header_present:1;
	 GLuint response_length:5;
	 GLuint msg_length:4;
	 GLuint pad1:2;
	 GLuint end_of_thread:1;
      } urb_gen7;

      /** 965 PRM, Volume 4, Section 5.10.1.1: Message Descriptor */
      struct {
a1665 1
      /** G45 PRM, Volume 4, Section 5.10.1.1.2 */
a1677 1
      /** Ironlake PRM, Volume 4 Part 1, Section 5.10.2.1.2. */
a1690 1
      /** G45 PRM, Volume 4, Section 5.10.1.1.2.  For both Gen4 and G45. */
d1694 1
a1694 1
	 GLuint last_render_target:1;
a1703 1
      /** Ironlake PRM, Volume 4 Part 1, Section 5.10.2.1.2. */
d1707 1
a1707 1
	 GLuint last_render_target:1;
d1718 1
a1718 5
      /**
       * Message for the Sandybridge Sampler Cache or Constant Cache Data Port.
       *
       * See the Sandybridge PRM, Volume 4 Part 1, Section 3.9.2.1.1.
       **/
d1729 1
a1729 1
      } gen6_dp_sampler_const_cache;
a1730 10
      /**
       * Message for the Sandybridge Render Cache Data Port.
       *
       * Most fields are defined in the Sandybridge PRM, Volume 4 Part 1,
       * Section 3.9.2.1.1: Message Descriptor.
       *
       * "Slot Group Select" and "Last Render Target" are part of the
       * 5-bit message control for Render Target Write messages.  See
       * Section 3.9.9.2.1 of the same volume.
       */
d1735 1
a1735 1
	 GLuint last_render_target:1;
d1744 1
a1744 1
      } gen6_dp;
a1745 8
      /**
       * Message for any of the Gen7 Data Port caches.
       *
       * Most fields are defined in the Ivybridge PRM, Volume 4 Part 1,
       * section 3.9.2.1.1 "Message Descriptor".  Once again, "Slot Group
       * Select" and "Last Render Target" are part of the 6-bit message
       * control for Render Target Writes (section 3.9.11.2).
       */
d1747 2
a1748 9
	 GLuint binding_table_index:8;
	 GLuint msg_control:3;
	 GLuint slot_group_select:1;
	 GLuint last_render_target:1;
	 GLuint msg_control_pad:1;
	 GLuint msg_type:4;
	 GLuint pad1:1;
	 GLuint header_present:1;
	 GLuint response_length:5;
d1750 2
a1751 1
	 GLuint pad2:2;
d1753 1
a1753 2
      } gen7_dp;
      /** @@} */
d1755 1
d1757 4
a1760 7
	 GLuint src1_subreg_nr_high:1;
	 GLuint src1_reg_nr:8;
	 GLuint pad0:1;
	 GLuint src2_rep_ctrl:1;
	 GLuint src2_swizzle:8;
	 GLuint src2_subreg_nr:3;
	 GLuint src2_reg_nr:8;
d1762 2
a1763 1
      } da3src;
a1770 22
struct brw_compact_instruction {
   struct {
      unsigned opcode:7;          /*  0- 6 */
      unsigned debug_control:1;   /*  7- 7 */
      unsigned control_index:5;   /*  8-12 */
      unsigned data_type_index:5; /* 13-17 */
      unsigned sub_reg_index:5;   /* 18-22 */
      unsigned acc_wr_control:1;  /* 23-23 */
      unsigned conditionalmod:4;  /* 24-27 */
      unsigned flag_subreg_nr:1;     /* 28-28 */
      unsigned cmpt_ctrl:1;       /* 29-29 */
      unsigned src0_index:2;      /* 30-31 */
   } dw0;

   struct {
      unsigned src0_index:3;  /* 32-24 */
      unsigned src1_index:5;  /* 35-39 */
      unsigned dst_reg_nr:8;  /* 40-47 */
      unsigned src0_reg_nr:8; /* 48-55 */
      unsigned src1_reg_nr:8; /* 56-63 */
   } dw1;
};
@


1.1.1.5
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d31 1
a31 1

d40 9
a48 9
      unsigned length:8;
      unsigned vs_realloc:1;
      unsigned gs_realloc:1;
      unsigned clp_realloc:1;
      unsigned sf_realloc:1;
      unsigned vfe_realloc:1;
      unsigned cs_realloc:1;
      unsigned pad:2;
      unsigned opcode:16;
d53 4
a56 4
      unsigned vs_fence:10;
      unsigned gs_fence:10;
      unsigned clp_fence:10;
      unsigned pad:2;
d61 4
a64 4
      unsigned sf_fence:10;
      unsigned vf_fence:10;
      unsigned cs_fence:11;
      unsigned pad:1;
d74 4
a77 4
   unsigned pad0:1;
   unsigned grf_reg_count:3;
   unsigned pad1:2;
   unsigned kernel_start_pointer:26; /* Offset from GENERAL_STATE_BASE */
d82 13
a94 13
   unsigned ext_halt_exception_enable:1;
   unsigned sw_exception_enable:1;
   unsigned mask_stack_exception_enable:1;
   unsigned timeout_exception_enable:1;
   unsigned illegal_op_exception_enable:1;
   unsigned pad0:3;
   unsigned depth_coef_urb_read_offset:6;	/* WM only */
   unsigned pad1:2;
   unsigned floating_point_mode:1;
   unsigned thread_priority:1;
   unsigned binding_table_entry_count:8;
   unsigned pad3:5;
   unsigned single_program_flow:1;
d99 3
a101 3
   unsigned per_thread_scratch_space:4;
   unsigned pad0:6;
   unsigned scratch_space_base_pointer:22;
d104 1
a104 1

d107 9
a115 9
   unsigned dispatch_grf_start_reg:4;
   unsigned urb_entry_read_offset:6;
   unsigned pad0:1;
   unsigned urb_entry_read_length:6;
   unsigned pad1:1;
   unsigned const_urb_entry_read_offset:6;
   unsigned pad2:1;
   unsigned const_urb_entry_read_length:6;
   unsigned pad3:1;
d125 12
a136 12
      unsigned pad0:7;
      unsigned sw_exception_enable:1;
      unsigned pad1:3;
      unsigned mask_stack_exception_enable:1;
      unsigned pad2:1;
      unsigned illegal_op_exception_enable:1;
      unsigned pad3:2;
      unsigned floating_point_mode:1;
      unsigned thread_priority:1;
      unsigned binding_table_entry_count:8;
      unsigned pad4:5;
      unsigned single_program_flow:1;
d144 24
a167 24
      unsigned pad0:9;
      unsigned gs_output_stats:1; /* not always */
      unsigned stats_enable:1;
      unsigned nr_urb_entries:7;
      unsigned pad1:1;
      unsigned urb_entry_allocation_size:5;
      unsigned pad2:1;
      unsigned max_threads:5; 	/* may be less */
      unsigned pad3:2;
   } thread4;

   struct
   {
      unsigned pad0:13;
      unsigned clip_mode:3;
      unsigned userclip_enable_flags:8;
      unsigned userclip_must_clip:1;
      unsigned negative_w_clip_test:1;
      unsigned guard_band_enable:1;
      unsigned viewport_z_clip_enable:1;
      unsigned viewport_xy_clip_enable:1;
      unsigned vertex_position_space:1;
      unsigned api_mode:1;
      unsigned pad2:1;
d169 1
a169 1

d172 2
a173 2
      unsigned pad0:5;
      unsigned clipper_viewport_state_ptr:27;
d176 5
a180 5

   float viewport_xmin;
   float viewport_xmax;
   float viewport_ymin;
   float viewport_ymax;
d186 12
a197 12
      unsigned dest_blend_factor:5;
      unsigned source_blend_factor:5;
      unsigned pad3:1;
      unsigned blend_func:3;
      unsigned pad2:1;
      unsigned ia_dest_blend_factor:5;
      unsigned ia_source_blend_factor:5;
      unsigned pad1:1;
      unsigned ia_blend_func:3;
      unsigned pad0:1;
      unsigned ia_blend_enable:1;
      unsigned blend_enable:1;
d201 21
a221 21
      unsigned post_blend_clamp_enable:1;
      unsigned pre_blend_clamp_enable:1;
      unsigned clamp_range:2;
      unsigned pad0:4;
      unsigned x_dither_offset:2;
      unsigned y_dither_offset:2;
      unsigned dither_enable:1;
      unsigned alpha_test_func:3;
      unsigned alpha_test_enable:1;
      unsigned pad1:1;
      unsigned logic_op_func:4;
      unsigned logic_op_enable:1;
      unsigned pad2:1;
      unsigned write_disable_b:1;
      unsigned write_disable_g:1;
      unsigned write_disable_r:1;
      unsigned write_disable_a:1;
      unsigned pad3:1;
      unsigned alpha_to_coverage_dither:1;
      unsigned alpha_to_one:1;
      unsigned alpha_to_coverage:1;
d228 5
a232 5
      unsigned alpha_test_format:1;
      unsigned pad0:14;
      unsigned round_disable:1;
      unsigned bf_stencil_ref:8;
      unsigned stencil_ref:8;
d236 1
a236 1
      float alpha_ref_f;
d238 2
a239 2
	 unsigned ui:8;
	 unsigned pad0:24;
d243 4
a246 4
   float constant_r;
   float constant_g;
   float constant_b;
   float constant_a;
d252 13
a264 13
      unsigned pad0:3;
      unsigned bf_stencil_pass_depth_pass_op:3;
      unsigned bf_stencil_pass_depth_fail_op:3;
      unsigned bf_stencil_fail_op:3;
      unsigned bf_stencil_func:3;
      unsigned bf_stencil_enable:1;
      unsigned pad1:2;
      unsigned stencil_write_enable:1;
      unsigned stencil_pass_depth_pass_op:3;
      unsigned stencil_pass_depth_fail_op:3;
      unsigned stencil_fail_op:3;
      unsigned stencil_func:3;
      unsigned stencil_enable:1;
d268 4
a271 4
      unsigned bf_stencil_write_mask:8;
      unsigned bf_stencil_test_mask:8;
      unsigned stencil_write_mask:8;
      unsigned stencil_test_mask:8;
d275 5
a279 5
      unsigned pad0:26;
      unsigned depth_write_enable:1;
      unsigned depth_test_func:3;
      unsigned pad1:1;
      unsigned depth_test_enable:1;
d287 13
a299 13
      unsigned pad0:3;
      unsigned bf_stencil_pass_depth_pass_op:3;
      unsigned bf_stencil_pass_depth_fail_op:3;
      unsigned bf_stencil_fail_op:3;
      unsigned bf_stencil_func:3;
      unsigned bf_stencil_enable:1;
      unsigned pad1:2;
      unsigned stencil_write_enable:1;
      unsigned stencil_pass_depth_pass_op:3;
      unsigned stencil_pass_depth_fail_op:3;
      unsigned stencil_fail_op:3;
      unsigned stencil_func:3;
      unsigned stencil_enable:1;
d302 1
a302 1

d305 4
a308 4
      unsigned bf_stencil_ref:8;
      unsigned stencil_write_mask:8;
      unsigned stencil_test_mask:8;
      unsigned stencil_ref:8;
d311 1
a311 1

d314 7
a320 7
      unsigned logicop_enable:1;
      unsigned pad0:10;
      unsigned depth_write_enable:1;
      unsigned depth_test_function:3;
      unsigned depth_test:1;
      unsigned bf_stencil_write_mask:8;
      unsigned bf_stencil_test_mask:8;
d323 1
a323 1

d326 8
a333 8
      unsigned pad0:8;
      unsigned alpha_test_func:3;
      unsigned alpha_test:1;
      unsigned blend_enable:1;
      unsigned ia_blend_enable:1;
      unsigned pad1:1;
      unsigned alpha_test_format:1;
      unsigned pad2:16;
d335 1
a335 1

d338 2
a339 2
      unsigned pad0:5;
      unsigned cc_viewport_state_offset:27; /* Offset from GENERAL_STATE_BASE */
d341 1
a341 1

d344 8
a351 8
      unsigned pad0:2;
      unsigned ia_dest_blend_factor:5;
      unsigned ia_src_blend_factor:5;
      unsigned ia_blend_function:3;
      unsigned statistics_enable:1;
      unsigned logicop_func:4;
      unsigned pad1:11;
      unsigned dither_enable:1;
d356 9
a364 9
      unsigned clamp_post_alpha_blend:1;
      unsigned clamp_pre_alpha_blend:1;
      unsigned clamp_range:2;
      unsigned pad0:11;
      unsigned y_dither_offset:2;
      unsigned x_dither_offset:2;
      unsigned dest_blend_factor:5;
      unsigned src_blend_factor:5;
      unsigned blend_function:3;
d369 2
a370 2
	 float f;
	 uint8_t ub[4];
d384 9
a392 9
      unsigned pad0:10;
      unsigned stats_enable:1;
      unsigned nr_urb_entries:7;
      unsigned pad1:1;
      unsigned urb_entry_allocation_size:5;
      unsigned pad2:1;
      unsigned max_threads:6;
      unsigned pad3:1;
   } thread4;
d396 4
a399 4
      unsigned front_winding:1;
      unsigned viewport_transform:1;
      unsigned pad0:3;
      unsigned sf_viewport_state_offset:27; /* Offset from GENERAL_STATE_BASE */
d401 1
a401 1

d404 12
a415 12
      unsigned pad0:9;
      unsigned dest_org_vbias:4;
      unsigned dest_org_hbias:4;
      unsigned scissor:1;
      unsigned disable_2x2_trifilter:1;
      unsigned disable_zero_pix_trifilter:1;
      unsigned point_rast_rule:2;
      unsigned line_endcap_aa_region_width:2;
      unsigned line_width:4;
      unsigned fast_scissor_disable:1;
      unsigned cull_mode:2;
      unsigned aa_enable:1;
d420 10
a429 10
      unsigned point_size:11;
      unsigned use_point_size_state:1;
      unsigned subpixel_precision:1;
      unsigned sprite_point:1;
      unsigned pad0:10;
      unsigned aa_line_distance_mode:1;
      unsigned trifan_pv:2;
      unsigned linestrip_pv:2;
      unsigned tristrip_pv:2;
      unsigned line_last_pixel_enable:1;
d436 4
a439 4
   unsigned xmin:16;
   unsigned ymin:16;
   unsigned xmax:16;
   unsigned ymax:16;
d451 17
a467 17
      unsigned pad0:8;
      unsigned rendering_enable:1; /* for Ironlake */
      unsigned pad4:1;
      unsigned stats_enable:1;
      unsigned nr_urb_entries:7;
      unsigned pad1:1;
      unsigned urb_entry_allocation_size:5;
      unsigned pad2:1;
      unsigned max_threads:5;
      unsigned pad3:2;
   } thread4;

   struct
   {
      unsigned sampler_count:3;
      unsigned pad0:2;
      unsigned sampler_state_pointer:27;
d470 1
a470 1

d473 9
a481 9
      unsigned max_vp_index:4;
      unsigned pad0:12;
      unsigned svbi_post_inc_value:10;
      unsigned pad1:1;
      unsigned svbi_post_inc_enable:1;
      unsigned svbi_payload:1;
      unsigned discard_adjaceny:1;
      unsigned reorder_enable:1;
      unsigned pad2:1;
d492 1
a492 1

d495 9
a503 9
      unsigned pad0:10;
      unsigned stats_enable:1;
      unsigned nr_urb_entries:7;
      unsigned pad1:1;
      unsigned urb_entry_allocation_size:5;
      unsigned pad2:1;
      unsigned max_threads:6;
      unsigned pad3:1;
   } thread4;
d507 3
a509 3
      unsigned sampler_count:3;
      unsigned pad0:2;
      unsigned sampler_state_pointer:27;
d514 3
a516 3
      unsigned vs_enable:1;
      unsigned vert_cache_disable:1;
      unsigned pad0:30;
d527 1
a527 1

d529 4
a532 4
      unsigned stats_enable:1;
      unsigned depth_buffer_clear:1;
      unsigned sampler_count:3;
      unsigned sampler_state_pointer:27;
d534 1
a534 1

d537 6
a542 6
      unsigned enable_8_pix:1;
      unsigned enable_16_pix:1;
      unsigned enable_32_pix:1;
      unsigned enable_con_32_pix:1;
      unsigned enable_con_64_pix:1;
      unsigned pad0:1;
d545 19
a563 19
      unsigned fast_span_coverage_enable:1;
      unsigned depth_buffer_clear:1;
      unsigned depth_buffer_resolve_enable:1;
      unsigned hierarchical_depth_buffer_resolve_enable:1;

      unsigned legacy_global_depth_bias:1;
      unsigned line_stipple:1;
      unsigned depth_offset:1;
      unsigned polygon_stipple:1;
      unsigned line_aa_region_width:2;
      unsigned line_endcap_aa_region_width:2;
      unsigned early_depth_test:1;
      unsigned thread_dispatch_enable:1;
      unsigned program_uses_depth:1;
      unsigned program_computes_depth:1;
      unsigned program_uses_killpixel:1;
      unsigned legacy_line_rast: 1;
      unsigned transposed_urb_read_enable:1;
      unsigned max_threads:7;
d565 4
a568 4

   float global_depth_offset_constant;
   float global_depth_offset_scale;

d571 5
a575 5
      unsigned pad0:1;
      unsigned grf_reg_count_1:3;
      unsigned pad1:2;
      unsigned kernel_start_pointer_1:26;
   } wm8;
d578 5
a582 5
      unsigned pad0:1;
      unsigned grf_reg_count_2:3;
      unsigned pad1:2;
      unsigned kernel_start_pointer_2:26;
   } wm9;
d585 5
a589 5
      unsigned pad0:1;
      unsigned grf_reg_count_3:3;
      unsigned pad1:2;
      unsigned kernel_start_pointer_3:26;
   } wm10;
d593 1
a593 1
   float color[4];
d607 1
a607 1

d610 11
a620 11
      unsigned shadow_function:3;
      unsigned lod_bias:11;
      unsigned min_filter:3;
      unsigned mag_filter:3;
      unsigned mip_filter:2;
      unsigned base_level:5;
      unsigned min_mag_neq:1;
      unsigned lod_preclamp:1;
      unsigned default_color_mode:1;
      unsigned pad0:1;
      unsigned disable:1;
d625 7
a631 7
      unsigned r_wrap_mode:3;
      unsigned t_wrap_mode:3;
      unsigned s_wrap_mode:3;
      unsigned cube_control_mode:1;
      unsigned pad:2;
      unsigned max_lod:10;
      unsigned min_lod:10;
d634 1
a634 1

d637 2
a638 2
      unsigned pad:5;
      unsigned default_color_pointer:27;
d640 1
a640 1

d643 9
a651 9
      unsigned non_normalized_coord:1;
      unsigned pad:12;
      unsigned address_round:6;
      unsigned max_aniso:3;
      unsigned chroma_key_mode:1;
      unsigned chroma_key_index:2;
      unsigned chroma_key_enable:1;
      unsigned monochrome_filter_width:3;
      unsigned monochrome_filter_height:3;
d659 11
a669 11
      unsigned aniso_algorithm:1;
      unsigned lod_bias:13;
      unsigned min_filter:3;
      unsigned mag_filter:3;
      unsigned mip_filter:2;
      unsigned base_level:5;
      unsigned pad1:1;
      unsigned lod_preclamp:1;
      unsigned default_color_mode:1;
      unsigned pad0:1;
      unsigned disable:1;
d674 5
a678 5
      unsigned cube_control_mode:1;
      unsigned shadow_function:3;
      unsigned pad:4;
      unsigned max_lod:12;
      unsigned min_lod:12;
d683 2
a684 2
      unsigned pad:5;
      unsigned default_color_pointer:27;
d689 12
a700 12
      unsigned r_wrap_mode:3;
      unsigned t_wrap_mode:3;
      unsigned s_wrap_mode:3;
      unsigned pad:1;
      unsigned non_normalized_coord:1;
      unsigned trilinear_quality:2;
      unsigned address_round:6;
      unsigned max_aniso:3;
      unsigned chroma_key_mode:1;
      unsigned chroma_key_index:2;
      unsigned chroma_key_enable:1;
      unsigned pad0:6;
d706 4
a709 4
   float xmin;
   float xmax;
   float ymin;
   float ymax;
d714 2
a715 2
   float min_depth;
   float max_depth;
d721 6
a726 6
      float m00;
      float m11;
      float m22;
      float m30;
      float m31;
      float m32;
d731 4
a734 4
      int16_t xmin;
      int16_t ymin;
      int16_t xmax;
      int16_t ymax;
d739 6
a744 6
   float m00;
   float m11;
   float m22;
   float m30;
   float m31;
   float m32;
d749 6
a754 6
      float m00;
      float m11;
      float m22;
      float m30;
      float m31;
      float m32;
d757 1
a757 1
   unsigned pad0[2];
d760 4
a763 4
      float xmin;
      float xmax;
      float ymin;
      float ymax;
d766 1
a766 1
   float pad1[4];
d770 12
a781 12
   unsigned opcode:4;
   unsigned offset:6;
   unsigned swizzle_control:2;
   unsigned pad:1;
   unsigned allocate:1;
   unsigned used:1;
   unsigned complete:1;
   unsigned response_length:4;
   unsigned msg_length:4;
   unsigned msg_target:4;
   unsigned pad1:3;
   unsigned end_of_thread:1;
d786 1
a786 1

d789 1
a789 1
   struct
d791 10
a800 10
      unsigned opcode:7;
      unsigned pad:1;
      unsigned access_mode:1;
      unsigned mask_control:1;
      unsigned dependency_control:2;
      unsigned compression_control:2; /* gen6: quarter control */
      unsigned thread_control:2;
      unsigned predicate_control:4;
      unsigned predicate_inverse:1;
      unsigned execution_size:3;
d805 5
a809 5
      unsigned destreg__conditionalmod:4;
      unsigned acc_wr_control:1;
      unsigned cmpt_control:1;
      unsigned debug_control:1;
      unsigned saturate:1;
d815 11
a825 11
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;
	 unsigned src1_reg_type:3;
         unsigned nibctrl:1; /* gen7+ */
	 unsigned dest_subreg_nr:5;
	 unsigned dest_reg_nr:8;
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
d830 11
a840 11
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;        /* 0x00000c00 */
	 unsigned src1_reg_type:3;        /* 0x00007000 */
         unsigned nibctrl:1; /* gen7+ */
	 int dest_indirect_offset:10;	/* offset against the deref'd address reg */
	 unsigned dest_subreg_nr:3; /* subnr for the address reg a0.x */
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
d845 12
a856 12
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;
	 unsigned src1_reg_type:3;
         unsigned nibctrl:1; /* gen7+ */
	 unsigned dest_writemask:4;
	 unsigned dest_subreg_nr:1;
	 unsigned dest_reg_nr:8;
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
d861 12
a872 12
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
         unsigned src1_reg_file:2;
         unsigned src1_reg_type:3;
         unsigned nibctrl:1; /* gen7+ */
	 unsigned dest_writemask:4;
	 int dest_indirect_offset:6;
	 unsigned dest_subreg_nr:3;
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
d876 7
a882 7
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;
	 unsigned src1_reg_type:3;
	 unsigned pad:1;
d884 1
a884 1
	 int jump_count:16;
d888 18
a905 18
         unsigned dest_reg_file:1; /* gen6, not gen7+ */
	 unsigned flag_subreg_num:1;
         unsigned flag_reg_nr:1; /* gen7+ */
         unsigned pad0:1;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src2_abs:1;
	 unsigned src2_negate:1;
         unsigned src_type:2; /* gen7+ */
         unsigned dst_type:2; /* gen7+ */
         unsigned pad1:1;
         unsigned nibctrl:1; /* gen7+ */
         unsigned pad2:1;
	 unsigned dest_writemask:4;
	 unsigned dest_subreg_nr:3;
	 unsigned dest_reg_nr:8;
d915 11
a925 11
	 unsigned src0_subreg_nr:5;
	 unsigned src0_reg_nr:8;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_horiz_stride:2;
	 unsigned src0_width:3;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad:5;
d930 11
a940 11
	 int src0_indirect_offset:10;
	 unsigned src0_subreg_nr:3;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_horiz_stride:2;
	 unsigned src0_width:3;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad:5;
d945 14
a958 14
	 unsigned src0_swz_x:2;
	 unsigned src0_swz_y:2;
	 unsigned src0_subreg_nr:1;
	 unsigned src0_reg_nr:8;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_swz_z:2;
	 unsigned src0_swz_w:2;
	 unsigned pad0:1;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad1:5;
d963 14
a976 14
	 unsigned src0_swz_x:2;
	 unsigned src0_swz_y:2;
	 int src0_indirect_offset:6;
	 unsigned src0_subreg_nr:3;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_swz_z:2;
	 unsigned src0_swz_w:2;
	 unsigned pad0:1;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad1:5;
d984 1
a984 1
       struct
d986 4
a989 4
           unsigned pad:26;
           unsigned end_of_thread:1;
           unsigned pad1:1;
           unsigned sfid:4;
d993 8
a1000 8
	 unsigned src0_rep_ctrl:1;
	 unsigned src0_swizzle:8;
	 unsigned src0_subreg_nr:3;
	 unsigned src0_reg_nr:8;
	 unsigned pad0:1;
	 unsigned src1_rep_ctrl:1;
	 unsigned src1_swizzle:8;
	 unsigned src1_subreg_nr_low:2;
d1010 9
a1018 9
	 unsigned src1_subreg_nr:5;
	 unsigned src1_reg_nr:8;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src1_address_mode:1;
	 unsigned src1_horiz_stride:2;
	 unsigned src1_width:3;
	 unsigned src1_vert_stride:4;
	 unsigned pad0:7;
d1023 12
a1034 12
	 unsigned src1_swz_x:2;
	 unsigned src1_swz_y:2;
	 unsigned src1_subreg_nr:1;
	 unsigned src1_reg_nr:8;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src1_address_mode:1;
	 unsigned src1_swz_z:2;
	 unsigned src1_swz_w:2;
	 unsigned pad1:1;
	 unsigned src1_vert_stride:4;
	 unsigned pad2:7;
d1039 9
a1047 9
	 int  src1_indirect_offset:10;
	 unsigned src1_subreg_nr:3;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src1_address_mode:1;
	 unsigned src1_horiz_stride:2;
	 unsigned src1_width:3;
	 unsigned src1_vert_stride:4;
	 unsigned pad1:7;
d1052 12
a1063 12
	 unsigned src1_swz_x:2;
	 unsigned src1_swz_y:2;
	 int  src1_indirect_offset:6;
	 unsigned src1_subreg_nr:3;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned pad0:1;
	 unsigned src1_swz_z:2;
	 unsigned src1_swz_w:2;
	 unsigned pad1:1;
	 unsigned src1_vert_stride:4;
	 unsigned pad2:7;
d1069 3
a1071 3
	 int  jump_count:16;	/* note: signed */
	 unsigned  pop_count:4;
	 unsigned  pad0:12;
d1104 6
a1109 6
	 unsigned function_control:16;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
d1125 6
a1130 6
	 unsigned function_control:19;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
d1135 11
a1145 11
	 unsigned function:4;
	 unsigned int_type:1;
	 unsigned precision:1;
	 unsigned saturate:1;
	 unsigned data_type:1;
	 unsigned pad0:8;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
d1150 12
a1161 12
	 unsigned function:4;
	 unsigned int_type:1;
	 unsigned precision:1;
	 unsigned saturate:1;
	 unsigned data_type:1;
	 unsigned snapshot:1;
	 unsigned pad0:10;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
d1166 9
a1174 9
	 unsigned binding_table_index:8;
	 unsigned sampler:4;
	 unsigned return_format:2;
	 unsigned msg_type:2;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
d1179 8
a1186 8
         unsigned binding_table_index:8;
         unsigned sampler:4;
         unsigned msg_type:4;
         unsigned response_length:4;
         unsigned msg_length:4;
         unsigned msg_target:4;
         unsigned pad1:3;
         unsigned end_of_thread:1;
d1191 10
a1200 10
	 unsigned binding_table_index:8;
	 unsigned sampler:4;
	 unsigned msg_type:4;
	 unsigned simd_mode:2;
	 unsigned pad0:1;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
d1204 9
a1212 9
	 unsigned binding_table_index:8;
	 unsigned sampler:4;
	 unsigned msg_type:5;
	 unsigned simd_mode:2;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
d1218 13
a1230 13
	 unsigned opcode:4;
	 unsigned offset:6;
	 unsigned swizzle_control:2;
	 unsigned pad:1;
	 unsigned allocate:1;
	 unsigned used:1;
	 unsigned complete:1;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
d1234 11
a1244 11
	 unsigned opcode:3;
	 unsigned offset:11;
	 unsigned swizzle_control:1;
	 unsigned complete:1;
	 unsigned per_slot_offset:1;
	 unsigned pad0:2;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
d1249 9
a1257 9
	 unsigned binding_table_index:8;
	 unsigned msg_control:4;
	 unsigned msg_type:2;
	 unsigned target_cache:2;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
d1262 9
a1270 9
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned msg_type:3;
	 unsigned target_cache:2;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
d1275 10
a1284 10
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned msg_type:3;
	 unsigned target_cache:2;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
d1289 10
a1298 10
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned last_render_target:1;
	 unsigned msg_type:3;
	 unsigned send_commit_msg:1;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
d1303 11
a1313 11
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned last_render_target:1;
	 unsigned msg_type:3;
	 unsigned send_commit_msg:1;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
d1322 9
a1330 9
	 unsigned binding_table_index:8;
	 unsigned msg_control:5;
	 unsigned msg_type:3;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
d1344 12
a1355 12
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned slot_group_select:1;
	 unsigned last_render_target:1;
	 unsigned msg_type:4;
	 unsigned send_commit_msg:1;
	 unsigned pad0:1;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
d1367 12
a1378 12
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned slot_group_select:1;
	 unsigned last_render_target:1;
	 unsigned msg_control_pad:1;
	 unsigned msg_type:4;
	 unsigned pad1:1;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad2:2;
	 unsigned end_of_thread:1;
a1379 21

      /**
       * Message for the Gen7 Pixel Interpolator.
       *
       * Defined in the Ivybridge PRM, Volume 4 Part 2,
       * section 4.1.1.1.
       */
      struct {
         GLuint msg_data:8;
         GLuint pad1:3;
         GLuint slot_group:1;
         GLuint msg_type:2;
         GLuint interpolation_mode:1;
         GLuint pad2:1;
         GLuint simd_mode:1;
         GLuint pad3:1;
         GLuint response_length:5;
         GLuint msg_length:4;
         GLuint pad4:2;
         GLuint end_of_thread:1;
      } gen7_pi;
d1383 8
a1390 8
	 unsigned src1_subreg_nr_high:1;
	 unsigned src1_reg_nr:8;
	 unsigned pad0:1;
	 unsigned src2_rep_ctrl:1;
	 unsigned src2_swizzle:8;
	 unsigned src2_subreg_nr:3;
	 unsigned src2_reg_nr:8;
	 unsigned pad1:2;
d1393 2
a1394 2
      int d;
      unsigned ud;
@


1.1.1.6
log
@Import Mesa 10.4.3
@
text
@d592 4
d605 99
d767 674
@


1.1.1.7
log
@Import Mesa 10.2.9
@
text
@a591 4
struct brw_sampler_default_color {
   float color[4];
};

a600 99
struct brw_sampler_state
{

   struct
   {
      unsigned shadow_function:3;
      unsigned lod_bias:11;
      unsigned min_filter:3;
      unsigned mag_filter:3;
      unsigned mip_filter:2;
      unsigned base_level:5;
      unsigned min_mag_neq:1;
      unsigned lod_preclamp:1;
      unsigned default_color_mode:1;
      unsigned pad0:1;
      unsigned disable:1;
   } ss0;

   struct
   {
      unsigned r_wrap_mode:3;
      unsigned t_wrap_mode:3;
      unsigned s_wrap_mode:3;
      unsigned cube_control_mode:1;
      unsigned pad:2;
      unsigned max_lod:10;
      unsigned min_lod:10;
   } ss1;


   struct
   {
      unsigned pad:5;
      unsigned default_color_pointer:27;
   } ss2;

   struct
   {
      unsigned non_normalized_coord:1;
      unsigned pad:12;
      unsigned address_round:6;
      unsigned max_aniso:3;
      unsigned chroma_key_mode:1;
      unsigned chroma_key_index:2;
      unsigned chroma_key_enable:1;
      unsigned monochrome_filter_width:3;
      unsigned monochrome_filter_height:3;
   } ss3;
};

struct gen7_sampler_state
{
   struct
   {
      unsigned aniso_algorithm:1;
      unsigned lod_bias:13;
      unsigned min_filter:3;
      unsigned mag_filter:3;
      unsigned mip_filter:2;
      unsigned base_level:5;
      unsigned pad1:1;
      unsigned lod_preclamp:1;
      unsigned default_color_mode:1;
      unsigned pad0:1;
      unsigned disable:1;
   } ss0;

   struct
   {
      unsigned cube_control_mode:1;
      unsigned shadow_function:3;
      unsigned pad:4;
      unsigned max_lod:12;
      unsigned min_lod:12;
   } ss1;

   struct
   {
      unsigned pad:5;
      unsigned default_color_pointer:27;
   } ss2;

   struct
   {
      unsigned r_wrap_mode:3;
      unsigned t_wrap_mode:3;
      unsigned s_wrap_mode:3;
      unsigned pad:1;
      unsigned non_normalized_coord:1;
      unsigned trilinear_quality:2;
      unsigned address_round:6;
      unsigned max_aniso:3;
      unsigned chroma_key_mode:1;
      unsigned chroma_key_index:2;
      unsigned chroma_key_enable:1;
      unsigned pad0:6;
   } ss3;
};

a663 674
};

struct brw_urb_immediate {
   unsigned opcode:4;
   unsigned offset:6;
   unsigned swizzle_control:2;
   unsigned pad:1;
   unsigned allocate:1;
   unsigned used:1;
   unsigned complete:1;
   unsigned response_length:4;
   unsigned msg_length:4;
   unsigned msg_target:4;
   unsigned pad1:3;
   unsigned end_of_thread:1;
};

/* Instruction format for the execution units:
 */

struct brw_instruction
{
   struct
   {
      unsigned opcode:7;
      unsigned pad:1;
      unsigned access_mode:1;
      unsigned mask_control:1;
      unsigned dependency_control:2;
      unsigned compression_control:2; /* gen6: quarter control */
      unsigned thread_control:2;
      unsigned predicate_control:4;
      unsigned predicate_inverse:1;
      unsigned execution_size:3;
      /**
       * Conditional Modifier for most instructions.  On Gen6+, this is also
       * used for the SEND instruction's Message Target/SFID.
       */
      unsigned destreg__conditionalmod:4;
      unsigned acc_wr_control:1;
      unsigned cmpt_control:1;
      unsigned debug_control:1;
      unsigned saturate:1;
   } header;

   union {
      struct
      {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;
	 unsigned src1_reg_type:3;
         unsigned nibctrl:1; /* gen7+ */
	 unsigned dest_subreg_nr:5;
	 unsigned dest_reg_nr:8;
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
      } da1;

      struct
      {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;        /* 0x00000c00 */
	 unsigned src1_reg_type:3;        /* 0x00007000 */
         unsigned nibctrl:1; /* gen7+ */
	 int dest_indirect_offset:10;	/* offset against the deref'd address reg */
	 unsigned dest_subreg_nr:3; /* subnr for the address reg a0.x */
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
      } ia1;

      struct
      {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;
	 unsigned src1_reg_type:3;
         unsigned nibctrl:1; /* gen7+ */
	 unsigned dest_writemask:4;
	 unsigned dest_subreg_nr:1;
	 unsigned dest_reg_nr:8;
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
      } da16;

      struct
      {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
         unsigned src1_reg_file:2;
         unsigned src1_reg_type:3;
         unsigned nibctrl:1; /* gen7+ */
	 unsigned dest_writemask:4;
	 int dest_indirect_offset:6;
	 unsigned dest_subreg_nr:3;
	 unsigned dest_horiz_stride:2;
	 unsigned dest_address_mode:1;
      } ia16;

      struct {
	 unsigned dest_reg_file:2;
	 unsigned dest_reg_type:3;
	 unsigned src0_reg_file:2;
	 unsigned src0_reg_type:3;
	 unsigned src1_reg_file:2;
	 unsigned src1_reg_type:3;
	 unsigned pad:1;

	 int jump_count:16;
      } branch_gen6;

      struct {
         unsigned dest_reg_file:1; /* gen6, not gen7+ */
	 unsigned flag_subreg_num:1;
         unsigned flag_reg_nr:1; /* gen7+ */
         unsigned pad0:1;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src2_abs:1;
	 unsigned src2_negate:1;
         unsigned src_type:2; /* gen7+ */
         unsigned dst_type:2; /* gen7+ */
         unsigned pad1:1;
         unsigned nibctrl:1; /* gen7+ */
         unsigned pad2:1;
	 unsigned dest_writemask:4;
	 unsigned dest_subreg_nr:3;
	 unsigned dest_reg_nr:8;
      } da3src;

      uint32_t ud;
   } bits1;


   union {
      struct
      {
	 unsigned src0_subreg_nr:5;
	 unsigned src0_reg_nr:8;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_horiz_stride:2;
	 unsigned src0_width:3;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad:5;
      } da1;

      struct
      {
	 int src0_indirect_offset:10;
	 unsigned src0_subreg_nr:3;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_horiz_stride:2;
	 unsigned src0_width:3;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad:5;
      } ia1;

      struct
      {
	 unsigned src0_swz_x:2;
	 unsigned src0_swz_y:2;
	 unsigned src0_subreg_nr:1;
	 unsigned src0_reg_nr:8;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_swz_z:2;
	 unsigned src0_swz_w:2;
	 unsigned pad0:1;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad1:5;
      } da16;

      struct
      {
	 unsigned src0_swz_x:2;
	 unsigned src0_swz_y:2;
	 int src0_indirect_offset:6;
	 unsigned src0_subreg_nr:3;
	 unsigned src0_abs:1;
	 unsigned src0_negate:1;
	 unsigned src0_address_mode:1;
	 unsigned src0_swz_z:2;
	 unsigned src0_swz_w:2;
	 unsigned pad0:1;
	 unsigned src0_vert_stride:4;
	 unsigned flag_subreg_nr:1;
         unsigned flag_reg_nr:1; /* gen7+ */
	 unsigned pad1:5;
      } ia16;

      /* Extended Message Descriptor for Ironlake (Gen5) SEND instruction.
       *
       * Does not apply to Gen6+.  The SFID/message target moved to bits
       * 27:24 of the header (destreg__conditionalmod); EOT is in bits3.
       */
       struct
       {
           unsigned pad:26;
           unsigned end_of_thread:1;
           unsigned pad1:1;
           unsigned sfid:4;
       } send_gen5;  /* for Ironlake only */

      struct {
	 unsigned src0_rep_ctrl:1;
	 unsigned src0_swizzle:8;
	 unsigned src0_subreg_nr:3;
	 unsigned src0_reg_nr:8;
	 unsigned pad0:1;
	 unsigned src1_rep_ctrl:1;
	 unsigned src1_swizzle:8;
	 unsigned src1_subreg_nr_low:2;
      } da3src;

      uint32_t ud;
   } bits2;

   union
   {
      struct
      {
	 unsigned src1_subreg_nr:5;
	 unsigned src1_reg_nr:8;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src1_address_mode:1;
	 unsigned src1_horiz_stride:2;
	 unsigned src1_width:3;
	 unsigned src1_vert_stride:4;
	 unsigned pad0:7;
      } da1;

      struct
      {
	 unsigned src1_swz_x:2;
	 unsigned src1_swz_y:2;
	 unsigned src1_subreg_nr:1;
	 unsigned src1_reg_nr:8;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src1_address_mode:1;
	 unsigned src1_swz_z:2;
	 unsigned src1_swz_w:2;
	 unsigned pad1:1;
	 unsigned src1_vert_stride:4;
	 unsigned pad2:7;
      } da16;

      struct
      {
	 int  src1_indirect_offset:10;
	 unsigned src1_subreg_nr:3;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned src1_address_mode:1;
	 unsigned src1_horiz_stride:2;
	 unsigned src1_width:3;
	 unsigned src1_vert_stride:4;
	 unsigned pad1:7;
      } ia1;

      struct
      {
	 unsigned src1_swz_x:2;
	 unsigned src1_swz_y:2;
	 int  src1_indirect_offset:6;
	 unsigned src1_subreg_nr:3;
	 unsigned src1_abs:1;
	 unsigned src1_negate:1;
	 unsigned pad0:1;
	 unsigned src1_swz_z:2;
	 unsigned src1_swz_w:2;
	 unsigned pad1:1;
	 unsigned src1_vert_stride:4;
	 unsigned pad2:7;
      } ia16;


      struct
      {
	 int  jump_count:16;	/* note: signed */
	 unsigned  pop_count:4;
	 unsigned  pad0:12;
      } if_else;

      /* This is also used for gen7 IF/ELSE instructions */
      struct
      {
	 /* Signed jump distance to the ip to jump to if all channels
	  * are disabled after the break or continue.  It should point
	  * to the end of the innermost control flow block, as that's
	  * where some channel could get re-enabled.
	  */
	 int jip:16;

	 /* Signed jump distance to the location to resume execution
	  * of this channel if it's enabled for the break or continue.
	  */
	 int uip:16;
      } break_cont;

      /**
       * \defgroup SEND instructions / Message Descriptors
       *
       * @@{
       */

      /**
       * Generic Message Descriptor for Gen4 SEND instructions.  The structs
       * below expand function_control to something specific for their
       * message.  Due to struct packing issues, they duplicate these bits.
       *
       * See the G45 PRM, Volume 4, Table 14-15.
       */
      struct {
	 unsigned function_control:16;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } generic;

      /**
       * Generic Message Descriptor for Gen5-7 SEND instructions.
       *
       * See the Sandybridge PRM, Volume 2 Part 2, Table 8-15.  (Sadly, most
       * of the information on the SEND instruction is missing from the public
       * Ironlake PRM.)
       *
       * The table claims that bit 31 is reserved/MBZ on Gen6+, but it lies.
       * According to the SEND instruction description:
       * "The MSb of the message description, the EOT field, always comes from
       *  bit 127 of the instruction word"...which is bit 31 of this field.
       */
      struct {
	 unsigned function_control:19;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } generic_gen5;

      /** G45 PRM, Volume 4, Section 6.1.1.1 */
      struct {
	 unsigned function:4;
	 unsigned int_type:1;
	 unsigned precision:1;
	 unsigned saturate:1;
	 unsigned data_type:1;
	 unsigned pad0:8;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } math;

      /** Ironlake PRM, Volume 4 Part 1, Section 6.1.1.1 */
      struct {
	 unsigned function:4;
	 unsigned int_type:1;
	 unsigned precision:1;
	 unsigned saturate:1;
	 unsigned data_type:1;
	 unsigned snapshot:1;
	 unsigned pad0:10;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } math_gen5;

      /** G45 PRM, Volume 4, Section 4.8.1.1.1 [DevBW] and [DevCL] */
      struct {
	 unsigned binding_table_index:8;
	 unsigned sampler:4;
	 unsigned return_format:2;
	 unsigned msg_type:2;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } sampler;

      /** G45 PRM, Volume 4, Section 4.8.1.1.2 [DevCTG] */
      struct {
         unsigned binding_table_index:8;
         unsigned sampler:4;
         unsigned msg_type:4;
         unsigned response_length:4;
         unsigned msg_length:4;
         unsigned msg_target:4;
         unsigned pad1:3;
         unsigned end_of_thread:1;
      } sampler_g4x;

      /** Ironlake PRM, Volume 4 Part 1, Section 4.11.1.1.3 */
      struct {
	 unsigned binding_table_index:8;
	 unsigned sampler:4;
	 unsigned msg_type:4;
	 unsigned simd_mode:2;
	 unsigned pad0:1;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } sampler_gen5;

      struct {
	 unsigned binding_table_index:8;
	 unsigned sampler:4;
	 unsigned msg_type:5;
	 unsigned simd_mode:2;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } sampler_gen7;

      struct brw_urb_immediate urb;

      struct {
	 unsigned opcode:4;
	 unsigned offset:6;
	 unsigned swizzle_control:2;
	 unsigned pad:1;
	 unsigned allocate:1;
	 unsigned used:1;
	 unsigned complete:1;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } urb_gen5;

      struct {
	 unsigned opcode:3;
	 unsigned offset:11;
	 unsigned swizzle_control:1;
	 unsigned complete:1;
	 unsigned per_slot_offset:1;
	 unsigned pad0:2;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } urb_gen7;

      /** 965 PRM, Volume 4, Section 5.10.1.1: Message Descriptor */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:4;
	 unsigned msg_type:2;
	 unsigned target_cache:2;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } dp_read;

      /** G45 PRM, Volume 4, Section 5.10.1.1.2 */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned msg_type:3;
	 unsigned target_cache:2;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } dp_read_g4x;

      /** Ironlake PRM, Volume 4 Part 1, Section 5.10.2.1.2. */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned msg_type:3;
	 unsigned target_cache:2;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } dp_read_gen5;

      /** G45 PRM, Volume 4, Section 5.10.1.1.2.  For both Gen4 and G45. */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned last_render_target:1;
	 unsigned msg_type:3;
	 unsigned send_commit_msg:1;
	 unsigned response_length:4;
	 unsigned msg_length:4;
	 unsigned msg_target:4;
	 unsigned pad1:3;
	 unsigned end_of_thread:1;
      } dp_write;

      /** Ironlake PRM, Volume 4 Part 1, Section 5.10.2.1.2. */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned last_render_target:1;
	 unsigned msg_type:3;
	 unsigned send_commit_msg:1;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } dp_write_gen5;

      /**
       * Message for the Sandybridge Sampler Cache or Constant Cache Data Port.
       *
       * See the Sandybridge PRM, Volume 4 Part 1, Section 3.9.2.1.1.
       **/
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:5;
	 unsigned msg_type:3;
	 unsigned pad0:3;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } gen6_dp_sampler_const_cache;

      /**
       * Message for the Sandybridge Render Cache Data Port.
       *
       * Most fields are defined in the Sandybridge PRM, Volume 4 Part 1,
       * Section 3.9.2.1.1: Message Descriptor.
       *
       * "Slot Group Select" and "Last Render Target" are part of the
       * 5-bit message control for Render Target Write messages.  See
       * Section 3.9.9.2.1 of the same volume.
       */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned slot_group_select:1;
	 unsigned last_render_target:1;
	 unsigned msg_type:4;
	 unsigned send_commit_msg:1;
	 unsigned pad0:1;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad1:2;
	 unsigned end_of_thread:1;
      } gen6_dp;

      /**
       * Message for any of the Gen7 Data Port caches.
       *
       * Most fields are defined in the Ivybridge PRM, Volume 4 Part 1,
       * section 3.9.2.1.1 "Message Descriptor".  Once again, "Slot Group
       * Select" and "Last Render Target" are part of the 6-bit message
       * control for Render Target Writes (section 3.9.11.2).
       */
      struct {
	 unsigned binding_table_index:8;
	 unsigned msg_control:3;
	 unsigned slot_group_select:1;
	 unsigned last_render_target:1;
	 unsigned msg_control_pad:1;
	 unsigned msg_type:4;
	 unsigned pad1:1;
	 unsigned header_present:1;
	 unsigned response_length:5;
	 unsigned msg_length:4;
	 unsigned pad2:2;
	 unsigned end_of_thread:1;
      } gen7_dp;

      /**
       * Message for the Gen7 Pixel Interpolator.
       *
       * Defined in the Ivybridge PRM, Volume 4 Part 2,
       * section 4.1.1.1.
       */
      struct {
         GLuint msg_data:8;
         GLuint pad1:3;
         GLuint slot_group:1;
         GLuint msg_type:2;
         GLuint interpolation_mode:1;
         GLuint pad2:1;
         GLuint simd_mode:1;
         GLuint pad3:1;
         GLuint response_length:5;
         GLuint msg_length:4;
         GLuint pad4:2;
         GLuint end_of_thread:1;
      } gen7_pi;
      /** @@} */

      struct {
	 unsigned src1_subreg_nr_high:1;
	 unsigned src1_reg_nr:8;
	 unsigned pad0:1;
	 unsigned src2_rep_ctrl:1;
	 unsigned src2_swizzle:8;
	 unsigned src2_subreg_nr:3;
	 unsigned src2_reg_nr:8;
	 unsigned pad1:2;
      } da3src;

      int d;
      unsigned ud;
      float f;
   } bits3;
};

struct brw_compact_instruction {
   struct {
      unsigned opcode:7;          /*  0- 6 */
      unsigned debug_control:1;   /*  7- 7 */
      unsigned control_index:5;   /*  8-12 */
      unsigned data_type_index:5; /* 13-17 */
      unsigned sub_reg_index:5;   /* 18-22 */
      unsigned acc_wr_control:1;  /* 23-23 */
      unsigned conditionalmod:4;  /* 24-27 */
      unsigned flag_subreg_nr:1;     /* 28-28 */
      unsigned cmpt_ctrl:1;       /* 29-29 */
      unsigned src0_index:2;      /* 30-31 */
   } dw0;

   struct {
      unsigned src0_index:3;  /* 32-24 */
      unsigned src1_index:5;  /* 35-39 */
      unsigned dst_reg_nr:8;  /* 40-47 */
      unsigned src0_reg_nr:8; /* 48-55 */
      unsigned src1_reg_nr:8; /* 56-63 */
   } dw1;
@


