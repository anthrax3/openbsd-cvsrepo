head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.14.04.25;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.15.44;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.52;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2011 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#include "brw_context.h"
#include "brw_state.h"
#include "brw_defines.h"
#include "intel_batchbuffer.h"
#include "main/fbobject.h"

static void
gen7_upload_sf_clip_viewport(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   const GLfloat depth_scale = 1.0F / ctx->DrawBuffer->_DepthMaxF;
   GLfloat y_scale, y_bias;
   const bool render_to_fbo = _mesa_is_user_fbo(ctx->DrawBuffer);
   struct gen7_sf_clip_viewport *vp;

   vp = brw_state_batch(brw, AUB_TRACE_SF_VP_STATE,
                        sizeof(*vp) * ctx->Const.MaxViewports, 64,
                        &brw->sf.vp_offset);
   /* Also assign to clip.vp_offset in case something uses it. */
   brw->clip.vp_offset = brw->sf.vp_offset;

   /* _NEW_BUFFERS */
   if (render_to_fbo) {
      y_scale = 1.0;
      y_bias = 0;
   } else {
      y_scale = -1.0;
      y_bias = ctx->DrawBuffer->Height;
   }

   for (unsigned i = 0; i < ctx->Const.MaxViewports; i++) {
      const GLfloat *const v = ctx->ViewportArray[i]._WindowMap.m;

      /* According to the "Vertex X,Y Clamping and Quantization" section of
       * the Strips and Fans documentation, objects must not have a
       * screen-space extents of over 8192 pixels, or they may be
       * mis-rasterized.  The maximum screen space coordinates of a small
       * object may larger, but we have no way to enforce the object size
       * other than through clipping.
       *
       * If you're surprised that we set clip to -gbx to +gbx and it seems
       * like we'll end up with 16384 wide, note that for a 8192-wide render
       * target, we'll end up with a normal (-1, 1) clip volume that just
       * covers the drawable.
       */
      const float maximum_guardband_extent = 8192;
      const float gbx = maximum_guardband_extent / ctx->ViewportArray[i].Width;
      const float gby = maximum_guardband_extent / ctx->ViewportArray[i].Height;

      vp[i].guardband.xmin = -gbx;
      vp[i].guardband.xmax = gbx;
      vp[i].guardband.ymin = -gby;
      vp[i].guardband.ymax = gby;

      /* _NEW_VIEWPORT */
      vp[i].viewport.m00 = v[MAT_SX];
      vp[i].viewport.m11 = v[MAT_SY] * y_scale;
      vp[i].viewport.m22 = v[MAT_SZ] * depth_scale;
      vp[i].viewport.m30 = v[MAT_TX];
      vp[i].viewport.m31 = v[MAT_TY] * y_scale + y_bias;
      vp[i].viewport.m32 = v[MAT_TZ] * depth_scale;
   }

   BEGIN_BATCH(2);
   OUT_BATCH(_3DSTATE_VIEWPORT_STATE_POINTERS_SF_CL << 16 | (2 - 2));
   OUT_BATCH(brw->sf.vp_offset);
   ADVANCE_BATCH();
}

const struct brw_tracked_state gen7_sf_clip_viewport = {
   .dirty = {
      .mesa = _NEW_VIEWPORT | _NEW_BUFFERS,
      .brw = BRW_NEW_BATCH,
      .cache = 0,
   },
   .emit = gen7_upload_sf_clip_viewport,
};

/* ----------------------------------------------------- */

static void upload_cc_viewport_state_pointer(struct brw_context *brw)
{
   BEGIN_BATCH(2);
   OUT_BATCH(_3DSTATE_VIEWPORT_STATE_POINTERS_CC << 16 | (2 - 2));
   OUT_BATCH(brw->cc.vp_offset);
   ADVANCE_BATCH();
}

const struct brw_tracked_state gen7_cc_viewport_state_pointer = {
   .dirty = {
      .mesa = 0,
      .brw = BRW_NEW_BATCH,
      .cache = CACHE_NEW_CC_VP
   },
   .emit = upload_cc_viewport_state_pointer,
};
@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.2
log
@Merge Mesa 9.2.0
@
text
@a36 1
   const GLfloat *v = ctx->Viewport._WindowMap.m;
d40 2
a41 1
			sizeof(*vp), 64, &brw->sf.vp_offset);
a44 20
   /* According to the "Vertex X,Y Clamping and Quantization" section of the
    * Strips and Fans documentation, objects must not have a screen-space
    * extents of over 8192 pixels, or they may be mis-rasterized.  The maximum
    * screen space coordinates of a small object may larger, but we have no
    * way to enforce the object size other than through clipping.
    *
    * If you're surprised that we set clip to -gbx to +gbx and it seems like
    * we'll end up with 16384 wide, note that for a 8192-wide render target,
    * we'll end up with a normal (-1, 1) clip volume that just covers the
    * drawable.
    */
   const float maximum_guardband_extent = 8192;
   float gbx = maximum_guardband_extent / (float) ctx->Viewport.Width;
   float gby = maximum_guardband_extent / (float) ctx->Viewport.Height;

   vp->guardband.xmin = -gbx;
   vp->guardband.xmax = gbx;
   vp->guardband.ymin = -gby;
   vp->guardband.ymax = gby;

d54 32
a85 7
   /* _NEW_VIEWPORT */
   vp->viewport.m00 = v[MAT_SX];
   vp->viewport.m11 = v[MAT_SY] * y_scale;
   vp->viewport.m22 = v[MAT_SZ] * depth_scale;
   vp->viewport.m30 = v[MAT_TX];
   vp->viewport.m31 = v[MAT_TY] * y_scale + y_bias;
   vp->viewport.m32 = v[MAT_TZ] * depth_scale;
@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d28 1
d31 1
a31 1
prepare_sf_clip_viewport(struct brw_context *brw)
d33 1
a33 1
   struct gl_context *ctx = &brw->intel.ctx;
d36 1
a36 1
   const GLboolean render_to_fbo = (ctx->DrawBuffer->Name != 0);
d40 2
a41 1
   vp = brw_state_batch(brw, sizeof(*vp), 64, &brw->sf.vp_offset);
d45 19
a63 5
   /* Disable guardband clipping (see gen6_viewport_state.c for rationale). */
   vp->guardband.xmin = -1.0;
   vp->guardband.xmax = 1.0;
   vp->guardband.ymin = -1.0;
   vp->guardband.ymax = 1.0;
a80 5
}

static void upload_sf_clip_viewport_state_pointer(struct brw_context *brw)
{
   struct intel_context *intel = &brw->intel;
d94 1
a94 2
   .prepare = prepare_sf_clip_viewport,
   .emit = upload_sf_clip_viewport_state_pointer,
a100 2
   struct intel_context *intel = &brw->intel;

@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@a27 1
#include "main/fbobject.h"
d30 1
a30 1
gen7_upload_sf_clip_viewport(struct brw_context *brw)
d32 1
a32 1
   struct gl_context *ctx = &brw->ctx;
d35 1
a35 1
   const bool render_to_fbo = _mesa_is_user_fbo(ctx->DrawBuffer);
d39 1
a39 2
   vp = brw_state_batch(brw, AUB_TRACE_SF_VP_STATE,
			sizeof(*vp), 64, &brw->sf.vp_offset);
d43 5
a47 19
   /* According to the "Vertex X,Y Clamping and Quantization" section of the
    * Strips and Fans documentation, objects must not have a screen-space
    * extents of over 8192 pixels, or they may be mis-rasterized.  The maximum
    * screen space coordinates of a small object may larger, but we have no
    * way to enforce the object size other than through clipping.
    *
    * If you're surprised that we set clip to -gbx to +gbx and it seems like
    * we'll end up with 16384 wide, note that for a 8192-wide render target,
    * we'll end up with a normal (-1, 1) clip volume that just covers the
    * drawable.
    */
   const float maximum_guardband_extent = 8192;
   float gbx = maximum_guardband_extent / (float) ctx->Viewport.Width;
   float gby = maximum_guardband_extent / (float) ctx->Viewport.Height;

   vp->guardband.xmin = -gbx;
   vp->guardband.xmax = gbx;
   vp->guardband.ymin = -gby;
   vp->guardband.ymax = gby;
d65 5
d83 2
a84 1
   .emit = gen7_upload_sf_clip_viewport,
d91 2
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d37 1
d41 1
a41 2
                        sizeof(*vp) * ctx->Const.MaxViewports, 64,
                        &brw->sf.vp_offset);
d45 20
d74 7
a80 32
   for (unsigned i = 0; i < ctx->Const.MaxViewports; i++) {
      const GLfloat *const v = ctx->ViewportArray[i]._WindowMap.m;

      /* According to the "Vertex X,Y Clamping and Quantization" section of
       * the Strips and Fans documentation, objects must not have a
       * screen-space extents of over 8192 pixels, or they may be
       * mis-rasterized.  The maximum screen space coordinates of a small
       * object may larger, but we have no way to enforce the object size
       * other than through clipping.
       *
       * If you're surprised that we set clip to -gbx to +gbx and it seems
       * like we'll end up with 16384 wide, note that for a 8192-wide render
       * target, we'll end up with a normal (-1, 1) clip volume that just
       * covers the drawable.
       */
      const float maximum_guardband_extent = 8192;
      const float gbx = maximum_guardband_extent / ctx->ViewportArray[i].Width;
      const float gby = maximum_guardband_extent / ctx->ViewportArray[i].Height;

      vp[i].guardband.xmin = -gbx;
      vp[i].guardband.xmax = gbx;
      vp[i].guardband.ymin = -gby;
      vp[i].guardband.ymax = gby;

      /* _NEW_VIEWPORT */
      vp[i].viewport.m00 = v[MAT_SX];
      vp[i].viewport.m11 = v[MAT_SY] * y_scale;
      vp[i].viewport.m22 = v[MAT_SZ] * depth_scale;
      vp[i].viewport.m30 = v[MAT_TX];
      vp[i].viewport.m31 = v[MAT_TY] * y_scale + y_bias;
      vp[i].viewport.m32 = v[MAT_TZ] * depth_scale;
   }
@


