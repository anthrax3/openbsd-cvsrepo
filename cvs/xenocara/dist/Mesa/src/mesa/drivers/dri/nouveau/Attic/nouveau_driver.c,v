head	1.10;
access;
symbols
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.9;
commitid	TnlogFl9nOv2eaRf;

1.9
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.8;
commitid	4ry2gvZGMXkCUD2n;

1.8
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.7;
commitid	mcxB0JvoI9gTDYXU;

1.7
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	WPD6rgPryPkvXOr9;

1.6
date	2013.09.05.14.04.49;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.20;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.16;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2007.11.24.17.28.56;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.28.56;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.50;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.54;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.11.59;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.49.06;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.10
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "main/mtypes.h"
#include "main/fbobject.h"

#include "nouveau_driver.h"
#include "nouveau_context.h"
#include "nouveau_fbo.h"
#include "nouveau_util.h"

#include "drivers/common/meta.h"

static const GLubyte *
nouveau_get_string(struct gl_context *ctx, GLenum name)
{
	static char buffer[128];
	char hardware_name[32];

	switch (name) {
		case GL_VENDOR:
			return (GLubyte *)"Nouveau";

		case GL_RENDERER:
			sprintf(hardware_name, "nv%02X", context_chipset(ctx));
			driGetRendererString(buffer, hardware_name, 0);

			return (GLubyte *)buffer;
		default:
			return NULL;
	}
}

static void
nouveau_flush(struct gl_context *ctx)
{
	struct nouveau_context *nctx = to_nouveau_context(ctx);
	struct nouveau_pushbuf *push = context_push(ctx);

	PUSH_KICK(push);

	if (_mesa_is_winsys_fbo(ctx->DrawBuffer) &&
	    ctx->DrawBuffer->_ColorDrawBufferIndexes[0] == BUFFER_FRONT_LEFT) {
		__DRIscreen *screen = nctx->screen->dri_screen;
		const __DRIdri2LoaderExtension *dri2 = screen->dri2.loader;
		__DRIdrawable *drawable = nctx->dri_context->driDrawablePriv;

		if (drawable && drawable->loaderPrivate)
			dri2->flushFrontBuffer(drawable, drawable->loaderPrivate);
	}
}

static void
nouveau_finish(struct gl_context *ctx)
{
	struct nouveau_context *nctx = to_nouveau_context(ctx);
	struct nouveau_pushbuf *push = context_push(ctx);
	struct nouveau_pushbuf_refn refn =
		{ nctx->fence, NOUVEAU_BO_VRAM | NOUVEAU_BO_RDWR };

	nouveau_flush(ctx);

	if (!nouveau_pushbuf_space(push, 16, 0, 0) &&
	    !nouveau_pushbuf_refn(push, &refn, 1)) {
		PUSH_DATA(push, 0);
		PUSH_KICK(push);
	}

	nouveau_bo_wait(nctx->fence, NOUVEAU_BO_RDWR, context_client(ctx));
}

void
nouveau_clear(struct gl_context *ctx, GLbitfield buffers)
{
	struct gl_framebuffer *fb = ctx->DrawBuffer;
	int x, y, w, h;
	int i, buf;

	nouveau_validate_framebuffer(ctx);
	get_scissors(fb, &x, &y, &w, &h);

	for (i = 0; i < BUFFER_COUNT; i++) {
		struct nouveau_surface *s;
		unsigned mask, value;

		buf = buffers & (1 << i);
		if (!buf)
			continue;

		s = &to_nouveau_renderbuffer(
			fb->Attachment[i].Renderbuffer)->surface;

		if (buf & BUFFER_BITS_COLOR) {
			mask = pack_rgba_i(s->format, ctx->Color.ColorMask[0]);
			value = pack_rgba_clamp_f(s->format, ctx->Color.ClearColor.f);

			if (mask)
				context_drv(ctx)->surface_fill(
					ctx, s, mask, value, x, y, w, h);

			buffers &= ~buf;

		} else if (buf & (BUFFER_BIT_DEPTH | BUFFER_BIT_STENCIL)) {
			mask = pack_zs_i(s->format,
					 (buffers & BUFFER_BIT_DEPTH &&
					  ctx->Depth.Mask) ? ~0 : 0,
					 (buffers & BUFFER_BIT_STENCIL ?
					  ctx->Stencil.WriteMask[0] : 0));
			value = pack_zs_f(s->format,
					  ctx->Depth.Clear,
					  ctx->Stencil.Clear);

			if (mask)
				context_drv(ctx)->surface_fill(
					ctx, s, mask, value, x, y, w, h);

			buffers &= ~(BUFFER_BIT_DEPTH | BUFFER_BIT_STENCIL);
		}
	}

	if (buffers)
		_mesa_meta_Clear(ctx, buffers);
}

void
nouveau_driver_functions_init(struct dd_function_table *functions)
{
	functions->GetString = nouveau_get_string;
	functions->Flush = nouveau_flush;
	functions->Finish = nouveau_finish;
	functions->Clear = nouveau_clear;
	functions->DrawPixels = _mesa_meta_DrawPixels;
	functions->CopyPixels = _mesa_meta_CopyPixels;
	functions->Bitmap = _mesa_meta_Bitmap;
	functions->BlitFramebuffer = _mesa_meta_and_swrast_BlitFramebuffer;
}
@


1.9
log
@Merge Mesa 10.2.9
@
text
@@


1.8
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d37 2
a38 4
const char const *nouveau_vendor_string = "Nouveau";

const char *
nouveau_get_renderer_string(unsigned chipset)
d40 1
a41 7
	static char buffer[128];

	snprintf(hardware_name, sizeof(hardware_name), "nv%02X", chipset);
	driGetRendererString(buffer, hardware_name, 0);

	return buffer;
}
a42 3
static const GLubyte *
nouveau_get_string(struct gl_context *ctx, GLenum name)
{
d45 1
a45 1
			return (GLubyte *)nouveau_vendor_string;
d48 4
a51 1
			return (GLubyte *)nouveau_get_renderer_string(context_chipset(ctx));
a116 9
			const float *color = ctx->Color.ClearColor.f;

			if (fb->Attachment[i].Renderbuffer->_BaseFormat ==
			    GL_LUMINANCE_ALPHA)
				value = pack_la_clamp_f(
						s->format, color[0], color[3]);
			else
				value = pack_rgba_clamp_f(s->format, color);

d118 1
@


1.7
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d37 14
a53 3
	static char buffer[128];
	char hardware_name[32];

d56 1
a56 1
			return (GLubyte *)"Nouveau";
d59 1
a59 4
			sprintf(hardware_name, "nv%02X", context_chipset(ctx));
			driGetRendererString(buffer, hardware_name, 0);

			return (GLubyte *)buffer;
d125 9
a134 1
			value = pack_rgba_clamp_f(s->format, ctx->Color.ClearColor.f);
@


1.6
log
@Merge Mesa 9.2.0
@
text
@d68 1
a68 1
		__DRIdri2LoaderExtension *dri2 = screen->dri2.loader;
d158 1
a158 1
	functions->BlitFramebuffer = _mesa_meta_BlitFramebuffer;
@


1.5
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d27 2
a28 1
#include "main/mfeatures.h"
d61 1
a61 1
	struct nouveau_channel *chan = context_chan(ctx);
d63 1
a63 1
	FIRE_RING(chan);
d65 1
a65 1
	if (ctx->DrawBuffer->Name == 0 &&
d71 2
a72 1
		dri2->flushFrontBuffer(drawable, drawable->loaderPrivate);
d79 5
d85 8
d114 1
a114 1
			fb->Attachment[i].Renderbuffer->Wrapped)->surface;
d118 1
a118 1
			value = pack_rgba_f(s->format, ctx->Color.ClearColor);
a157 1
#if FEATURE_EXT_framebuffer_blit
a158 1
#endif
@


1.4
log
@Merge Mesa 7.10.3
@
text
@d27 2
d48 1
a48 1
			driGetRendererString(buffer, hardware_name, DRIVER_DATE, 0);
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d35 1
a35 1
nouveau_get_string(GLcontext *ctx, GLenum name)
d55 1
a55 1
nouveau_flush(GLcontext *ctx)
d73 1
a73 1
nouveau_finish(GLcontext *ctx)
d79 1
a79 1
nouveau_clear(GLcontext *ctx, GLbitfield buffers)
d138 6
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d1 25
a25 25
/**************************************************************************

Copyright 2006 Stephane Marchesin
All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
on the rights to use, copy, modify, merge, publish, distribute, sub
license, and/or sell copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice (including the next
paragraph) shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
ERIC ANHOLT OR SILICON INTEGRATED SYSTEMS CORP BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/
d27 1
d29 2
a30 17
//#include "nouveau_state.h"
#include "nouveau_lock.h"
#include "nouveau_fifo.h"
#include "nouveau_driver.h"
#include "swrast/swrast.h"

#include "context.h"
#include "framebuffer.h"

#include "utils.h"

/* Wrapper for DRM_NOUVEAU_GETPARAM ioctl */
GLboolean nouveauDRMGetParam(nouveauContextPtr nmesa,
			     unsigned int      param,
			     uint64_t*         value)
{
	drm_nouveau_getparam_t getp;
d32 1
a32 35
	getp.param = param;
	if (!value || drmCommandWriteRead(nmesa->driFd, DRM_NOUVEAU_GETPARAM,
					  &getp, sizeof(getp)))
		return GL_FALSE;
	*value = getp.value;
	return GL_TRUE;
}

/* Wrapper for DRM_NOUVEAU_GETPARAM ioctl */
GLboolean nouveauDRMSetParam(nouveauContextPtr nmesa,
			     unsigned int      param,
			     uint64_t          value)
{
	drm_nouveau_setparam_t setp;

	setp.param = param;
	setp.value = value;
	if (drmCommandWrite(nmesa->driFd, DRM_NOUVEAU_SETPARAM, &setp,
				sizeof(setp)))
		return GL_FALSE;
	return GL_TRUE;
}

/* Return the width and height of the current color buffer */
static void nouveauGetBufferSize( GLframebuffer *buffer,
		GLuint *width, GLuint *height )
{
	GET_CURRENT_CONTEXT(ctx);
	nouveauContextPtr nmesa = NOUVEAU_CONTEXT(ctx);

	LOCK_HARDWARE( nmesa );
	*width  = nmesa->driDrawable->w;
	*height = nmesa->driDrawable->h;
	UNLOCK_HARDWARE( nmesa );
}
d34 2
a35 2
/* glGetString */
static const GLubyte *nouveauGetString( GLcontext *ctx, GLenum name )
a36 1
	nouveauContextPtr nmesa = NOUVEAU_CONTEXT(ctx);
d38 1
a38 2
	const char * card_name = "Unknown";
	GLuint agp_mode = 0;
d40 1
a40 1
	switch ( name ) {
d42 1
a42 1
			return (GLubyte *)DRIVER_AUTHOR;
d45 2
a46 1
			card_name=nmesa->screen->card->name;
a47 13
			switch(nmesa->screen->bus_type)
			{
				case NV_PCI:
				case NV_PCIE:
				default:
					agp_mode=0;
					break;
				case NV_AGP:
					agp_mode=nmesa->screen->agp_mode;
					break;
			}
			driGetRendererString( buffer, card_name, DRIVER_DATE,
					agp_mode );
d54 2
a55 2
/* glFlush */
static void nouveauFlush( GLcontext *ctx )
d57 13
a69 2
	nouveauContextPtr nmesa = NOUVEAU_CONTEXT(ctx);
	FIRE_RING();
d72 2
a73 2
/* glFinish */
static void nouveauFinish( GLcontext *ctx )
d75 1
a75 3
	nouveauContextPtr nmesa = NOUVEAU_CONTEXT(ctx);
	nouveauFlush( ctx );
	nouveauWaitForIdle( nmesa );
d78 2
a79 2
/* glClear */
static void nouveauClear( GLcontext *ctx, GLbitfield mask )
d81 48
a128 1
	// XXX we really should do something here...
d131 2
a132 1
void nouveauDriverInitFunctions( struct dd_function_table *functions )
d134 4
a137 6
	functions->GetBufferSize	= nouveauGetBufferSize;
	functions->ResizeBuffers	= _mesa_resize_framebuffer;
	functions->GetString		= nouveauGetString;
	functions->Flush		= nouveauFlush;
	functions->Finish		= nouveauFinish;
	functions->Clear		= nouveauClear;
a138 1

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d1 1
a1 25
/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
d3 28
d32 43
a74 3
#include "nouveau_context.h"
#include "nouveau_fbo.h"
#include "nouveau_util.h"
d76 5
a80 1
#include "drivers/common/meta.h"
d82 2
a83 2
static const GLubyte *
nouveau_get_string(struct gl_context *ctx, GLenum name)
d85 1
d87 2
a88 1
	char hardware_name[32];
d90 1
a90 1
	switch (name) {
d92 1
a92 1
			return (GLubyte *)"Nouveau";
d95 1
a95 2
			sprintf(hardware_name, "nv%02X", context_chipset(ctx));
			driGetRendererString(buffer, hardware_name, DRIVER_DATE, 0);
d97 13
d116 2
a117 2
static void
nouveau_flush(struct gl_context *ctx)
d119 2
a120 13
	struct nouveau_context *nctx = to_nouveau_context(ctx);
	struct nouveau_channel *chan = context_chan(ctx);

	FIRE_RING(chan);

	if (ctx->DrawBuffer->Name == 0 &&
	    ctx->DrawBuffer->_ColorDrawBufferIndexes[0] == BUFFER_FRONT_LEFT) {
		__DRIscreen *screen = nctx->screen->dri_screen;
		__DRIdri2LoaderExtension *dri2 = screen->dri2.loader;
		__DRIdrawable *drawable = nctx->dri_context->driDrawablePriv;

		dri2->flushFrontBuffer(drawable, drawable->loaderPrivate);
	}
d123 2
a124 2
static void
nouveau_finish(struct gl_context *ctx)
d126 3
a128 1
	nouveau_flush(ctx);
d131 2
a132 2
void
nouveau_clear(struct gl_context *ctx, GLbitfield buffers)
d134 1
a134 48
	struct gl_framebuffer *fb = ctx->DrawBuffer;
	int x, y, w, h;
	int i, buf;

	nouveau_validate_framebuffer(ctx);
	get_scissors(fb, &x, &y, &w, &h);

	for (i = 0; i < BUFFER_COUNT; i++) {
		struct nouveau_surface *s;
		unsigned mask, value;

		buf = buffers & (1 << i);
		if (!buf)
			continue;

		s = &to_nouveau_renderbuffer(
			fb->Attachment[i].Renderbuffer->Wrapped)->surface;

		if (buf & BUFFER_BITS_COLOR) {
			mask = pack_rgba_i(s->format, ctx->Color.ColorMask[0]);
			value = pack_rgba_f(s->format, ctx->Color.ClearColor);

			if (mask)
				context_drv(ctx)->surface_fill(
					ctx, s, mask, value, x, y, w, h);

			buffers &= ~buf;

		} else if (buf & (BUFFER_BIT_DEPTH | BUFFER_BIT_STENCIL)) {
			mask = pack_zs_i(s->format,
					 (buffers & BUFFER_BIT_DEPTH &&
					  ctx->Depth.Mask) ? ~0 : 0,
					 (buffers & BUFFER_BIT_STENCIL ?
					  ctx->Stencil.WriteMask[0] : 0));
			value = pack_zs_f(s->format,
					  ctx->Depth.Clear,
					  ctx->Stencil.Clear);

			if (mask)
				context_drv(ctx)->surface_fill(
					ctx, s, mask, value, x, y, w, h);

			buffers &= ~(BUFFER_BIT_DEPTH | BUFFER_BIT_STENCIL);
		}
	}

	if (buffers)
		_mesa_meta_Clear(ctx, buffers);
d137 1
a137 2
void
nouveau_driver_functions_init(struct dd_function_table *functions)
d139 6
a144 10
	functions->GetString = nouveau_get_string;
	functions->Flush = nouveau_flush;
	functions->Finish = nouveau_finish;
	functions->Clear = nouveau_clear;
	functions->DrawPixels = _mesa_meta_DrawPixels;
	functions->CopyPixels = _mesa_meta_CopyPixels;
	functions->Bitmap = _mesa_meta_Bitmap;
#if FEATURE_EXT_framebuffer_blit
	functions->BlitFramebuffer = _mesa_meta_BlitFramebuffer;
#endif
d146 1
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@a26 3
#include "main/mtypes.h"
#include "main/fbobject.h"

d46 1
a46 1
			driGetRendererString(buffer, hardware_name, 0);
d58 1
a58 1
	struct nouveau_pushbuf *push = context_push(ctx);
d60 1
a60 1
	PUSH_KICK(push);
d62 1
a62 1
	if (_mesa_is_winsys_fbo(ctx->DrawBuffer) &&
d68 1
a68 2
		if (drawable && drawable->loaderPrivate)
			dri2->flushFrontBuffer(drawable, drawable->loaderPrivate);
a74 5
	struct nouveau_context *nctx = to_nouveau_context(ctx);
	struct nouveau_pushbuf *push = context_push(ctx);
	struct nouveau_pushbuf_refn refn =
		{ nctx->fence, NOUVEAU_BO_VRAM | NOUVEAU_BO_RDWR };

a75 8

	if (!nouveau_pushbuf_space(push, 16, 0, 0) &&
	    !nouveau_pushbuf_refn(push, &refn, 1)) {
		PUSH_DATA(push, 0);
		PUSH_KICK(push);
	}

	nouveau_bo_wait(nctx->fence, NOUVEAU_BO_RDWR, context_client(ctx));
d97 1
a97 1
			fb->Attachment[i].Renderbuffer)->surface;
d101 1
a101 1
			value = pack_rgba_clamp_f(s->format, ctx->Color.ClearColor.f);
d141 1
d143 1
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d68 1
a68 1
		const __DRIdri2LoaderExtension *dri2 = screen->dri2.loader;
d158 1
a158 1
	functions->BlitFramebuffer = _mesa_meta_and_swrast_BlitFramebuffer;
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d37 2
a38 4
const char const *nouveau_vendor_string = "Nouveau";

const char *
nouveau_get_renderer_string(unsigned chipset)
d40 1
a41 7
	static char buffer[128];

	snprintf(hardware_name, sizeof(hardware_name), "nv%02X", chipset);
	driGetRendererString(buffer, hardware_name, 0);

	return buffer;
}
a42 3
static const GLubyte *
nouveau_get_string(struct gl_context *ctx, GLenum name)
{
d45 1
a45 1
			return (GLubyte *)nouveau_vendor_string;
d48 4
a51 1
			return (GLubyte *)nouveau_get_renderer_string(context_chipset(ctx));
a116 9
			const float *color = ctx->Color.ClearColor.f;

			if (fb->Attachment[i].Renderbuffer->_BaseFormat ==
			    GL_LUMINANCE_ALPHA)
				value = pack_la_clamp_f(
						s->format, color[0], color[3]);
			else
				value = pack_rgba_clamp_f(s->format, color);

d118 1
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d37 14
a53 3
	static char buffer[128];
	char hardware_name[32];

d56 1
a56 1
			return (GLubyte *)"Nouveau";
d59 1
a59 4
			sprintf(hardware_name, "nv%02X", context_chipset(ctx));
			driGetRendererString(buffer, hardware_name, 0);

			return (GLubyte *)buffer;
d125 9
a134 1
			value = pack_rgba_clamp_f(s->format, ctx->Color.ClearColor.f);
@


