head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.04.50;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.20;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.52;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.54;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.12.00;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.49.07;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef __NOUVEAU_UTIL_H__
#define __NOUVEAU_UTIL_H__

#include "main/formats.h"
#include "main/colormac.h"

static inline unsigned
pack_rgba_i(mesa_format f, uint8_t c[])
{
	switch (f) {
	case MESA_FORMAT_B8G8R8A8_UNORM:
		return PACK_COLOR_8888(c[ACOMP], c[RCOMP], c[GCOMP], c[BCOMP]);
	case MESA_FORMAT_A8R8G8B8_UNORM:
		return PACK_COLOR_8888(c[BCOMP], c[GCOMP], c[RCOMP], c[ACOMP]);
	case MESA_FORMAT_B8G8R8X8_UNORM:
		return PACK_COLOR_8888(0, c[RCOMP], c[GCOMP], c[BCOMP]);
	case MESA_FORMAT_X8R8G8B8_UNORM:
		return PACK_COLOR_8888(c[BCOMP], c[GCOMP], c[RCOMP], 0);
	case MESA_FORMAT_A8B8G8R8_UNORM:
		return PACK_COLOR_8888(c[RCOMP], c[GCOMP], c[BCOMP], c[ACOMP]);
	case MESA_FORMAT_R8G8B8A8_UNORM:
		return PACK_COLOR_8888(c[ACOMP], c[BCOMP], c[GCOMP], c[RCOMP]);
	case MESA_FORMAT_B5G6R5_UNORM:
		return PACK_COLOR_565(c[RCOMP], c[GCOMP], c[BCOMP]);
	default:
		assert(0);
	}
}

static inline unsigned
pack_zs_i(mesa_format f, uint32_t z, uint8_t s)
{
	switch (f) {
	case MESA_FORMAT_S8_UINT_Z24_UNORM:
		return (z & 0xffffff00) | (s & 0xff);
	case MESA_FORMAT_X8_UINT_Z24_UNORM:
		return (z & 0xffffff00);
	case MESA_FORMAT_Z_UNORM16:
		return (z & 0xffff0000) >> 16;
	default:
		assert(0);
	}
}

static inline unsigned
pack_rgba_f(mesa_format f, float c[])
{
	return pack_rgba_i(f, (uint8_t []) {
			   FLOAT_TO_UBYTE(c[RCOMP]),
			   FLOAT_TO_UBYTE(c[GCOMP]),
			   FLOAT_TO_UBYTE(c[BCOMP]),
			   FLOAT_TO_UBYTE(c[ACOMP]) });
}

static inline unsigned
pack_rgba_clamp_f(mesa_format f, float c[])
{
	GLubyte bytes[4];
	_mesa_unclamped_float_rgba_to_ubyte(bytes, c);
	return pack_rgba_i(f, bytes);
}

static inline unsigned
pack_zs_f(mesa_format f, float z, uint8_t s)
{
	return pack_zs_i(f, FLOAT_TO_UINT(z), s);
}

/* Integer base-2 logarithm, rounded towards zero. */
static inline unsigned
log2i(unsigned i)
{
	unsigned r = 0;

	if (i & 0xffff0000) {
		i >>= 16;
		r += 16;
	}
	if (i & 0x0000ff00) {
		i >>= 8;
		r += 8;
	}
	if (i & 0x000000f0) {
		i >>= 4;
		r += 4;
	}
	if (i & 0x0000000c) {
		i >>= 2;
		r += 2;
	}
	if (i & 0x00000002) {
		r += 1;
	}
	return r;
}

static inline unsigned
align(unsigned x, unsigned m)
{
	return (x + m - 1) & ~(m - 1);
}

static inline void
get_scissors(struct gl_framebuffer *fb, int *x, int *y, int *w, int *h)
{
	*w = fb->_Xmax - fb->_Xmin;
	*h = fb->_Ymax - fb->_Ymin;
	*x = fb->_Xmin;
	*y = (fb->Name ? fb->_Ymin :
	      /* Window system FBO: Flip the Y coordinate. */
	      fb->Height - fb->_Ymax);
}

static inline void
get_viewport_scale(struct gl_context *ctx, float a[16])
{
	struct gl_viewport_attrib *vp = &ctx->ViewportArray[0];
	struct gl_framebuffer *fb = ctx->DrawBuffer;

	a[MAT_SX] = (float)vp->Width / 2;

	if (fb->Name)
		a[MAT_SY] = (float)vp->Height / 2;
	else
		/* Window system FBO: Flip the Y coordinate. */
		a[MAT_SY] = - (float)vp->Height / 2;

	a[MAT_SZ] = fb->_DepthMaxF * (vp->Far - vp->Near) / 2;
}

static inline void
get_viewport_translate(struct gl_context *ctx, float a[4])
{
	struct gl_viewport_attrib *vp = &ctx->ViewportArray[0];
	struct gl_framebuffer *fb = ctx->DrawBuffer;

	a[0] = (float)vp->Width / 2 + vp->X;

	if (fb->Name)
		a[1] = (float)vp->Height / 2 + vp->Y;
	else
		/* Window system FBO: Flip the Y coordinate. */
		a[1] = fb->Height - (float)vp->Height / 2 - vp->Y;

	a[2] = fb->_DepthMaxF * (vp->Far + vp->Near) / 2;
}

static inline GLboolean
is_color_operand(int op)
{
	return op == GL_SRC_COLOR || op == GL_ONE_MINUS_SRC_COLOR;
}

static inline GLboolean
is_negative_operand(int op)
{
	return op == GL_ONE_MINUS_SRC_COLOR || op == GL_ONE_MINUS_SRC_ALPHA;
}

static inline GLboolean
is_texture_source(int s)
{
	return s == GL_TEXTURE || (s >= GL_TEXTURE0 && s <= GL_TEXTURE31);
}

static inline struct gl_texgen *
get_texgen_coord(struct gl_texture_unit *u, int i)
{
	return ((struct gl_texgen *[])
		{ &u->GenS, &u->GenT, &u->GenR, &u->GenQ }) [i];
}

static inline float *
get_texgen_coeff(struct gl_texgen *c)
{
	if (c->Mode == GL_OBJECT_LINEAR)
		return c->ObjectPlane;
	else if (c->Mode == GL_EYE_LINEAR)
		return c->EyePlane;
	else
		return NULL;
}

static inline unsigned
get_format_blocksx(mesa_format format,
		       unsigned x)
{
	GLuint blockwidth;
	GLuint blockheight;
	_mesa_get_format_block_size(format, &blockwidth, &blockheight);
	return (x + blockwidth - 1) / blockwidth;
}

static inline unsigned
get_format_blocksy(mesa_format format,
		       unsigned y)
{
	GLuint blockwidth;
	GLuint blockheight;
	_mesa_get_format_block_size(format, &blockwidth, &blockheight);
	return (y + blockheight - 1) / blockheight;
}

#endif
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d34 1
a34 1
pack_rgba_i(mesa_format f, const uint8_t c[])
d72 1
a72 1
pack_rgba_f(mesa_format f, const float c[])
d82 1
a82 1
pack_rgba_clamp_f(mesa_format f, const float c[])
a92 9
}

static inline unsigned
pack_la_clamp_f(mesa_format f, float l, float a)
{
	GLubyte lb, ab;
	UNCLAMPED_FLOAT_TO_UBYTE(lb, l);
	UNCLAMPED_FLOAT_TO_UBYTE(ab, a);
	return pack_rgba_i(f, (uint8_t []) { lb, lb, lb, ab });
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d34 1
a34 1
pack_rgba_i(mesa_format f, uint8_t c[])
d72 1
a72 1
pack_rgba_f(mesa_format f, float c[])
d82 1
a82 1
pack_rgba_clamp_f(mesa_format f, float c[])
d93 9
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d34 1
a34 1
pack_rgba_i(gl_format f, uint8_t c[])
d37 1
a37 1
	case MESA_FORMAT_ARGB8888:
d39 1
a39 1
	case MESA_FORMAT_ARGB8888_REV:
d41 1
a41 1
	case MESA_FORMAT_XRGB8888:
d43 1
a43 1
	case MESA_FORMAT_XRGB8888_REV:
d45 1
a45 1
	case MESA_FORMAT_RGBA8888:
d47 1
a47 1
	case MESA_FORMAT_RGBA8888_REV:
d49 1
a49 1
	case MESA_FORMAT_RGB565:
d57 1
a57 1
pack_zs_i(gl_format f, uint32_t z, uint8_t s)
d60 1
a60 1
	case MESA_FORMAT_Z24_S8:
d62 1
a62 1
	case MESA_FORMAT_Z24_X8:
d64 1
a64 1
	case MESA_FORMAT_Z16:
d72 1
a72 1
pack_rgba_f(gl_format f, float c[])
d82 1
a82 1
pack_rgba_clamp_f(gl_format f, float c[])
d90 1
a90 1
pack_zs_f(gl_format f, float z, uint8_t s)
d143 1
a143 1
	struct gl_viewport_attrib *vp = &ctx->Viewport;
d160 1
a160 1
	struct gl_viewport_attrib *vp = &ctx->Viewport;
d211 1
a211 1
get_format_blocksx(gl_format format,
d221 1
a221 1
get_format_blocksy(gl_format format,
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d82 8
a173 16
static inline void
OUT_RINGb(struct nouveau_channel *chan, GLboolean x)
{
	OUT_RING(chan, x ? 1 : 0);
}

static inline void
OUT_RINGm(struct nouveau_channel *chan, float m[16])
{
	int i, j;

	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			OUT_RINGf(chan, m[4*j + i]);
}

d208 20
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d133 1
a133 1
get_viewport_scale(GLcontext *ctx, float a[16])
d150 1
a150 1
get_viewport_translate(GLcontext *ctx, float a[4])
d167 6
d198 18
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d133 1
a133 1
get_viewport_scale(struct gl_context *ctx, float a[16])
d150 1
a150 1
get_viewport_translate(struct gl_context *ctx, float a[4])
a166 6
OUT_RINGb(struct nouveau_channel *chan, GLboolean x)
{
	OUT_RING(chan, x ? 1 : 0);
}

static inline void
a191 18
}

static inline struct gl_texgen *
get_texgen_coord(struct gl_texture_unit *u, int i)
{
	return ((struct gl_texgen *[])
		{ &u->GenS, &u->GenT, &u->GenR, &u->GenQ }) [i];
}

static inline float *
get_texgen_coeff(struct gl_texgen *c)
{
	if (c->Mode == GL_OBJECT_LINEAR)
		return c->ObjectPlane;
	else if (c->Mode == GL_EYE_LINEAR)
		return c->EyePlane;
	else
		return NULL;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a81 8
pack_rgba_clamp_f(gl_format f, float c[])
{
	GLubyte bytes[4];
	_mesa_unclamped_float_rgba_to_ubyte(bytes, c);
	return pack_rgba_i(f, bytes);
}

static inline unsigned
d166 16
a215 20
}

static inline unsigned
get_format_blocksx(gl_format format,
		       unsigned x)
{
	GLuint blockwidth;
	GLuint blockheight;
	_mesa_get_format_block_size(format, &blockwidth, &blockheight);
	return (x + blockwidth - 1) / blockwidth;
}

static inline unsigned
get_format_blocksy(gl_format format,
		       unsigned y)
{
	GLuint blockwidth;
	GLuint blockheight;
	_mesa_get_format_block_size(format, &blockwidth, &blockheight);
	return (y + blockheight - 1) / blockheight;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d34 1
a34 1
pack_rgba_i(mesa_format f, uint8_t c[])
d37 1
a37 1
	case MESA_FORMAT_B8G8R8A8_UNORM:
d39 1
a39 1
	case MESA_FORMAT_A8R8G8B8_UNORM:
d41 1
a41 1
	case MESA_FORMAT_B8G8R8X8_UNORM:
d43 1
a43 1
	case MESA_FORMAT_X8R8G8B8_UNORM:
d45 1
a45 1
	case MESA_FORMAT_A8B8G8R8_UNORM:
d47 1
a47 1
	case MESA_FORMAT_R8G8B8A8_UNORM:
d49 1
a49 1
	case MESA_FORMAT_B5G6R5_UNORM:
d57 1
a57 1
pack_zs_i(mesa_format f, uint32_t z, uint8_t s)
d60 1
a60 1
	case MESA_FORMAT_S8_UINT_Z24_UNORM:
d62 1
a62 1
	case MESA_FORMAT_X8_UINT_Z24_UNORM:
d64 1
a64 1
	case MESA_FORMAT_Z_UNORM16:
d72 1
a72 1
pack_rgba_f(mesa_format f, float c[])
d82 1
a82 1
pack_rgba_clamp_f(mesa_format f, float c[])
d90 1
a90 1
pack_zs_f(mesa_format f, float z, uint8_t s)
d143 1
a143 1
	struct gl_viewport_attrib *vp = &ctx->ViewportArray[0];
d160 1
a160 1
	struct gl_viewport_attrib *vp = &ctx->ViewportArray[0];
d211 1
a211 1
get_format_blocksx(mesa_format format,
d221 1
a221 1
get_format_blocksy(mesa_format format,
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d34 1
a34 1
pack_rgba_i(mesa_format f, const uint8_t c[])
d72 1
a72 1
pack_rgba_f(mesa_format f, const float c[])
d82 1
a82 1
pack_rgba_clamp_f(mesa_format f, const float c[])
a92 9
}

static inline unsigned
pack_la_clamp_f(mesa_format f, float l, float a)
{
	GLubyte lb, ab;
	UNCLAMPED_FLOAT_TO_UBYTE(lb, l);
	UNCLAMPED_FLOAT_TO_UBYTE(ab, a);
	return pack_rgba_i(f, (uint8_t []) { lb, lb, lb, ab });
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d34 1
a34 1
pack_rgba_i(mesa_format f, uint8_t c[])
d72 1
a72 1
pack_rgba_f(mesa_format f, float c[])
d82 1
a82 1
pack_rgba_clamp_f(mesa_format f, float c[])
d93 9
@


