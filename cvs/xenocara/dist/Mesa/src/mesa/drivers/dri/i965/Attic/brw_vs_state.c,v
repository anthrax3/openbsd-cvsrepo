head	1.11;
access;
symbols
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.10;
commitid	TnlogFl9nOv2eaRf;

1.10
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.9;
commitid	4ry2gvZGMXkCUD2n;

1.9
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.8;
commitid	mcxB0JvoI9gTDYXU;

1.8
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.04.22;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.47;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.41;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.52;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.11.49;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.48.54;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.11
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */



#include "brw_context.h"
#include "brw_state.h"
#include "brw_defines.h"
#include "main/macros.h"

static void
brw_upload_vs_unit(struct brw_context *brw)
{
   struct brw_stage_state *stage_state = &brw->vs.base;

   struct brw_vs_unit_state *vs;

   vs = brw_state_batch(brw, AUB_TRACE_VS_STATE,
			sizeof(*vs), 32, &stage_state->state_offset);
   memset(vs, 0, sizeof(*vs));

   /* BRW_NEW_PROGRAM_CACHE | CACHE_NEW_VS_PROG */
   vs->thread0.grf_reg_count =
      ALIGN(brw->vs.prog_data->base.total_grf, 16) / 16 - 1;
   vs->thread0.kernel_start_pointer =
      brw_program_reloc(brw,
			stage_state->state_offset +
			offsetof(struct brw_vs_unit_state, thread0),
			stage_state->prog_offset +
			(vs->thread0.grf_reg_count << 1)) >> 6;

   /* Use ALT floating point mode for ARB vertex programs, because they
    * require 0^0 == 1.
    */
   if (brw->ctx.Shader.CurrentProgram[MESA_SHADER_VERTEX] == NULL)
      vs->thread1.floating_point_mode = BRW_FLOATING_POINT_NON_IEEE_754;
   else
      vs->thread1.floating_point_mode = BRW_FLOATING_POINT_IEEE_754;

   /* Choosing multiple program flow means that we may get 2-vertex threads,
    * which will have the channel mask for dwords 4-7 enabled in the thread,
    * and those dwords will be written to the second URB handle when we
    * brw_urb_WRITE() results.
    */
   /* Force single program flow on Ironlake.  We cannot reliably get
    * all applications working without it.  See:
    * https://bugs.freedesktop.org/show_bug.cgi?id=29172
    *
    * The most notable and reliably failing application is the Humus
    * demo "CelShading"
   */
   vs->thread1.single_program_flow = (brw->gen == 5);

   vs->thread1.binding_table_entry_count =
      brw->vs.prog_data->base.base.binding_table.size_bytes / 4;

   if (brw->vs.prog_data->base.total_scratch != 0) {
      vs->thread2.scratch_space_base_pointer =
	 stage_state->scratch_bo->offset64 >> 10; /* reloc */
      vs->thread2.per_thread_scratch_space =
	 ffs(brw->vs.prog_data->base.total_scratch) - 11;
   } else {
      vs->thread2.scratch_space_base_pointer = 0;
      vs->thread2.per_thread_scratch_space = 0;
   }

   vs->thread3.urb_entry_read_length = brw->vs.prog_data->base.urb_read_length;
   vs->thread3.const_urb_entry_read_length
      = brw->vs.prog_data->base.curb_read_length;
   vs->thread3.dispatch_grf_start_reg =
      brw->vs.prog_data->base.dispatch_grf_start_reg;
   vs->thread3.urb_entry_read_offset = 0;

   /* BRW_NEW_CURBE_OFFSETS, _NEW_TRANSFORM, BRW_NEW_VERTEX_PROGRAM */
   vs->thread3.const_urb_entry_read_offset = brw->curbe.vs_start * 2;

   /* BRW_NEW_URB_FENCE */
   if (brw->gen == 5) {
      switch (brw->urb.nr_vs_entries) {
      case 8:
      case 12:
      case 16:
      case 32:
      case 64:
      case 96:
      case 128:
      case 168:
      case 192:
      case 224:
      case 256:
	 vs->thread4.nr_urb_entries = brw->urb.nr_vs_entries >> 2;
	 break;
      default:
	 assert(0);
      }
   } else {
      switch (brw->urb.nr_vs_entries) {
      case 8:
      case 12:
      case 16:
      case 32:
	 break;
      case 64:
	 assert(brw->is_g4x);
	 break;
      default:
	 assert(0);
      }
      vs->thread4.nr_urb_entries = brw->urb.nr_vs_entries;
   }

   vs->thread4.urb_entry_allocation_size = brw->urb.vsize - 1;

   vs->thread4.max_threads = CLAMP(brw->urb.nr_vs_entries / 2,
				   1, brw->max_vs_threads) - 1;

   if (brw->gen == 5)
      vs->vs5.sampler_count = 0; /* hardware requirement */
   else {
      /* CACHE_NEW_SAMPLER */
      vs->vs5.sampler_count = (stage_state->sampler_count + 3) / 4;
   }


   if (unlikely(INTEL_DEBUG & DEBUG_STATS))
      vs->thread4.stats_enable = 1;

   /* Vertex program always enabled:
    */
   vs->vs6.vs_enable = 1;

   /* Set the sampler state pointer, and its reloc
    */
   if (stage_state->sampler_count) {
      vs->vs5.sampler_state_pointer =
         (brw->batch.bo->offset64 + stage_state->sampler_offset) >> 5;
      drm_intel_bo_emit_reloc(brw->batch.bo,
                              stage_state->state_offset +
                              offsetof(struct brw_vs_unit_state, vs5),
                              brw->batch.bo,
                              (stage_state->sampler_offset |
                               vs->vs5.sampler_count),
                              I915_GEM_DOMAIN_INSTRUCTION, 0);
   }

   /* Emit scratch space relocation */
   if (brw->vs.prog_data->base.total_scratch != 0) {
      drm_intel_bo_emit_reloc(brw->batch.bo,
			      stage_state->state_offset +
			      offsetof(struct brw_vs_unit_state, thread2),
			      stage_state->scratch_bo,
			      vs->thread2.per_thread_scratch_space,
			      I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER);
   }

   brw->state.dirty.cache |= CACHE_NEW_VS_UNIT;
}

const struct brw_tracked_state brw_vs_unit = {
   .dirty = {
      .mesa  = _NEW_TRANSFORM,
      .brw   = (BRW_NEW_BATCH |
		BRW_NEW_PROGRAM_CACHE |
		BRW_NEW_CURBE_OFFSETS |
		BRW_NEW_URB_FENCE |
                BRW_NEW_VERTEX_PROGRAM),
      .cache = CACHE_NEW_VS_PROG | CACHE_NEW_SAMPLER
   },
   .emit = brw_upload_vs_unit,
};
@


1.10
log
@Merge Mesa 10.2.9
@
text
@@


1.9
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d85 1
a85 1
   if (brw->vs.prog_data->base.base.total_scratch != 0) {
d89 1
a89 1
	 ffs(brw->vs.prog_data->base.base.total_scratch) - 11;
d97 1
a97 1
      = brw->vs.prog_data->base.base.curb_read_length;
d99 1
a99 1
      brw->vs.prog_data->base.base.dispatch_grf_start_reg;
d122 1
a122 1
         unreachable("not reached");
d135 1
a135 1
         unreachable("not reached");
d175 1
a175 1
   if (brw->vs.prog_data->base.base.total_scratch != 0) {
@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d85 1
a85 1
   if (brw->vs.prog_data->base.total_scratch != 0) {
d89 1
a89 1
	 ffs(brw->vs.prog_data->base.total_scratch) - 11;
d97 1
a97 1
      = brw->vs.prog_data->base.curb_read_length;
d99 1
a99 1
      brw->vs.prog_data->base.dispatch_grf_start_reg;
d122 1
a122 1
	 assert(0);
d135 1
a135 1
	 assert(0);
d175 1
a175 1
   if (brw->vs.prog_data->base.total_scratch != 0) {
@


1.7
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d31 1
a31 1
            
d42 2
d47 1
a47 1
			sizeof(*vs), 32, &brw->vs.state_offset);
d55 1
a55 1
			brw->vs.state_offset +
d57 1
a57 1
			brw->vs.prog_offset +
d63 1
a63 1
   if (brw->ctx.Shader.CurrentVertexProgram == NULL)
d82 2
a83 1
   vs->thread1.binding_table_entry_count = 0;
d87 1
a87 1
	 brw->vs.scratch_bo->offset >> 10; /* reloc */
d98 2
a99 1
   vs->thread3.dispatch_grf_start_reg = 1;
d149 1
a149 1
      vs->vs5.sampler_count = (brw->sampler.count + 3) / 4;
d162 1
a162 1
   if (brw->sampler.count) {
d164 1
a164 1
         (brw->batch.bo->offset + brw->sampler.offset) >> 5;
d166 1
a166 1
                              brw->vs.state_offset +
d169 2
a170 1
                              brw->sampler.offset | vs->vs5.sampler_count,
d177 1
a177 1
			      brw->vs.state_offset +
d179 1
a179 1
			      brw->vs.scratch_bo,
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d40 1
a40 1
brw_prepare_vs_unit(struct brw_context *brw)
a41 2
   struct intel_context *intel = &brw->intel;
   struct gl_context *ctx = &intel->ctx;
d44 2
a45 1
   vs = brw_state_batch(brw, sizeof(*vs), 32, &brw->vs.state_offset);
d49 2
a50 1
   vs->thread0.grf_reg_count = ALIGN(brw->vs.prog_data->total_grf, 16) / 16 - 1;
d58 8
a65 1
   vs->thread1.floating_point_mode = BRW_FLOATING_POINT_NON_IEEE_754;
d71 1
a71 1
   /* Disable single program flow on Ironlake.  We cannot reliably get
d78 1
a78 1
   vs->thread1.single_program_flow = (intel->gen == 5);
d80 11
a90 5
   /* BRW_NEW_NR_VS_SURFACES */
   if (intel->gen == 5)
      vs->thread1.binding_table_entry_count = 0; /* hardware requirement */
   else
      vs->thread1.binding_table_entry_count = brw->vs.nr_surfaces;
d92 3
a94 2
   vs->thread3.urb_entry_read_length = brw->vs.prog_data->urb_read_length;
   vs->thread3.const_urb_entry_read_length = brw->vs.prog_data->curb_read_length;
d98 2
a99 11
   /* BRW_NEW_CURBE_OFFSETS, _NEW_TRANSFORM */
   if (ctx->Transform.ClipPlanesEnabled) {
      /* Note that we read in the userclip planes as well, hence
       * clip_start:
       */
      vs->thread3.const_urb_entry_read_offset = brw->curbe.clip_start * 2;
   }
   else {
      vs->thread3.const_urb_entry_read_offset = brw->curbe.vs_start * 2;
   }

d102 1
a102 1
   if (intel->gen == 5) {
d128 1
a128 1
	 assert(intel->is_g4x);
d139 8
a146 1
				   1, brw->vs_max_threads) - 1;
a147 5
   /* No samplers for ARB_vp programs:
    */
   /* It has to be set to 0 for Ironlake
    */
   vs->vs5.sampler_count = 0;
d156 23
d188 3
a190 3
                BRW_NEW_NR_VS_SURFACES |
		BRW_NEW_URB_FENCE),
      .cache = CACHE_NEW_VS_PROG
d192 1
a192 1
   .prepare = brw_prepare_vs_unit,
@


1.5
log
@Merge Mesa 7.10.3
@
text
@a38 12
struct brw_vs_unit_key {
   unsigned int total_grf;
   unsigned int urb_entry_read_length;
   unsigned int curb_entry_read_length;

   unsigned int curbe_offset;

   unsigned int nr_urb_entries, urb_size;

   unsigned int nr_surfaces;
};

d40 1
a40 1
vs_unit_populate_key(struct brw_context *brw, struct brw_vs_unit_key *key)
d42 3
a44 27
   struct gl_context *ctx = &brw->intel.ctx;

   memset(key, 0, sizeof(*key));

   /* CACHE_NEW_VS_PROG */
   key->total_grf = brw->vs.prog_data->total_grf;
   key->urb_entry_read_length = brw->vs.prog_data->urb_read_length;
   key->curb_entry_read_length = brw->vs.prog_data->curb_read_length;

   /* BRW_NEW_URB_FENCE */
   key->nr_urb_entries = brw->urb.nr_vs_entries;
   key->urb_size = brw->urb.vsize;

   /* BRW_NEW_NR_VS_SURFACES */
   key->nr_surfaces = brw->vs.nr_surfaces;

   /* BRW_NEW_CURBE_OFFSETS, _NEW_TRANSFORM */
   if (ctx->Transform.ClipPlanesEnabled) {
      /* Note that we read in the userclip planes as well, hence
       * clip_start:
       */
      key->curbe_offset = brw->curbe.clip_start;
   }
   else {
      key->curbe_offset = brw->curbe.vs_start;
   }
}
d46 2
a47 6
static drm_intel_bo *
vs_unit_create_from_key(struct brw_context *brw, struct brw_vs_unit_key *key)
{
   struct intel_context *intel = &brw->intel;
   struct brw_vs_unit_state vs;
   drm_intel_bo *bo;
d49 8
a56 1
   memset(&vs, 0, sizeof(vs));
d58 1
a58 3
   vs.thread0.kernel_start_pointer = brw->vs.prog_bo->offset >> 6; /* reloc */
   vs.thread0.grf_reg_count = ALIGN(key->total_grf, 16) / 16 - 1;
   vs.thread1.floating_point_mode = BRW_FLOATING_POINT_NON_IEEE_754;
d71 1
a71 1
   vs.thread1.single_program_flow = (intel->gen == 5);
d73 1
d75 1
a75 1
      vs.thread1.binding_table_entry_count = 0; /* hardware requirement */
d77 1
a77 1
      vs.thread1.binding_table_entry_count = key->nr_surfaces;
d79 4
a82 5
   vs.thread3.urb_entry_read_length = key->urb_entry_read_length;
   vs.thread3.const_urb_entry_read_length = key->curb_entry_read_length;
   vs.thread3.dispatch_grf_start_reg = 1;
   vs.thread3.urb_entry_read_offset = 0;
   vs.thread3.const_urb_entry_read_offset = key->curbe_offset * 2;
d84 13
d98 1
a98 1
      switch (key->nr_urb_entries) {
d110 1
a110 1
	 vs.thread4.nr_urb_entries = key->nr_urb_entries >> 2;
d116 1
a116 1
      switch (key->nr_urb_entries) {
d128 1
a128 1
      vs.thread4.nr_urb_entries = key->nr_urb_entries;
d131 1
a131 1
   vs.thread4.urb_entry_allocation_size = key->urb_size - 1;
d133 2
a134 2
   vs.thread4.max_threads = CLAMP(key->nr_urb_entries / 2,
				  1, brw->vs_max_threads) - 1;
d140 1
a140 1
   vs.vs5.sampler_count = 0;
d143 1
a143 1
      vs.thread4.stats_enable = 1;
d147 1
a147 18
   vs.vs6.vs_enable = 1;

   bo = brw_upload_cache(&brw->cache, BRW_VS_UNIT,
			 key, sizeof(*key),
			 &brw->vs.prog_bo, 1,
			 &vs, sizeof(vs));

   /* Emit VS program relocation */
   drm_intel_bo_emit_reloc(bo, offsetof(struct brw_vs_unit_state, thread0),
			   brw->vs.prog_bo, vs.thread0.grf_reg_count << 1,
			   I915_GEM_DOMAIN_INSTRUCTION, 0);

   return bo;
}

static void prepare_vs_unit(struct brw_context *brw)
{
   struct brw_vs_unit_key key;
d149 1
a149 10
   vs_unit_populate_key(brw, &key);

   drm_intel_bo_unreference(brw->vs.state_bo);
   brw->vs.state_bo = brw_search_cache(&brw->cache, BRW_VS_UNIT,
				       &key, sizeof(key),
				       &brw->vs.prog_bo, 1,
				       NULL);
   if (brw->vs.state_bo == NULL) {
      brw->vs.state_bo = vs_unit_create_from_key(brw, &key);
   }
d155 3
a157 1
      .brw   = (BRW_NEW_CURBE_OFFSETS |
d162 1
a162 1
   .prepare = prepare_vs_unit,
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d54 1
a54 1
   GLcontext *ctx = &brw->intel.ctx;
d82 1
a82 1
static dri_bo *
d87 1
a87 1
   dri_bo *bo;
d99 8
a106 1
   vs.thread1.single_program_flow = 0;
d164 1
a164 1
   if (INTEL_DEBUG & DEBUG_STATS)
d177 3
a179 5
   dri_bo_emit_reloc(bo,
		     I915_GEM_DOMAIN_INSTRUCTION, 0,
		     vs.thread0.grf_reg_count << 1,
		     offsetof(struct brw_vs_unit_state, thread0),
		     brw->vs.prog_bo);
d190 1
a190 1
   dri_bo_unreference(brw->vs.state_bo);
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d47 2
d67 3
d85 1
a87 1
   int chipset_max_threads;
d100 6
d112 34
a145 1
   vs.thread4.nr_urb_entries = key->nr_urb_entries;
a147 4
   if (BRW_IS_G4X(brw))
      chipset_max_threads = 32;
   else
      chipset_max_threads = 16;
d149 1
a149 4
				  1, chipset_max_threads) - 1;

   if (INTEL_DEBUG & DEBUG_SINGLE_THREAD)
      vs.thread4.max_threads = 0;
d153 2
d167 1
a167 2
			 &vs, sizeof(vs),
			 NULL, NULL);
d199 1
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d37 1
a37 1
#include "macros.h"
d52 2
d66 1
a66 1
   if (brw->attribs.Transform->ClipPlanesEnabled) {
d82 1
d89 6
d103 7
a109 2
   vs.thread4.max_threads = MIN2(MAX2(0, (key->nr_urb_entries - 6) / 2 - 1),
				 15);
d132 5
a136 5
   dri_emit_reloc(bo,
		  DRM_BO_FLAG_MEM_TT | DRM_BO_FLAG_READ,
		  vs.thread0.grf_reg_count << 1,
		  offsetof(struct brw_vs_unit_state, thread0),
		  brw->vs.prog_bo);
d141 1
a141 1
static int prepare_vs_unit( struct brw_context *brw )
a154 1
   return dri_bufmgr_check_aperture_space(brw->vs.state_bo);
@


1.1
log
@Initial revision
@
text
@d39 4
a42 3
static void upload_vs_unit( struct brw_context *brw )
{
   struct brw_vs_unit_state vs;
d44 1
a44 1
   memset(&vs, 0, sizeof(vs));
d46 2
a47 6
   /* CACHE_NEW_VS_PROG */
   vs.thread0.kernel_start_pointer = brw->vs.prog_gs_offset >> 6;
   vs.thread0.grf_reg_count = ((brw->vs.prog_data->total_grf-1) & ~15) / 16;
   vs.thread3.urb_entry_read_length = brw->vs.prog_data->urb_read_length;
   vs.thread3.const_urb_entry_read_length = brw->vs.prog_data->curb_read_length;
   vs.thread3.dispatch_grf_start_reg = 1;
d49 4
d54 8
a61 11
   /* BRW_NEW_URB_FENCE  */
   vs.thread4.nr_urb_entries = brw->urb.nr_vs_entries; 
   vs.thread4.urb_entry_allocation_size = brw->urb.vsize - 1;
   vs.thread4.max_threads = MIN2(
      MAX2(0, (brw->urb.nr_vs_entries - 6) / 2 - 1), 
      15);



   if (INTEL_DEBUG & DEBUG_SINGLE_THREAD)
      vs.thread4.max_threads = 0; 
d68 1
a68 1
      vs.thread3.const_urb_entry_read_offset = brw->curbe.clip_start * 2;
d71 1
a71 1
      vs.thread3.const_urb_entry_read_offset = brw->curbe.vs_start * 2;
d73 1
d75 10
d86 3
d90 9
d105 1
a105 1
      vs.thread4.stats_enable = 1; 
d107 1
a107 1
   /* Vertex program always enabled: 
d111 14
a124 1
   brw->vs.state_gs_offset = brw_cache_data( &brw->cache[BRW_VS_UNIT], &vs );
d127 16
d151 1
a151 1
   .update = upload_vs_unit
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d37 1
a37 1
#include "main/macros.h"
d39 3
a41 4
struct brw_vs_unit_key {
   unsigned int total_grf;
   unsigned int urb_entry_read_length;
   unsigned int curb_entry_read_length;
d43 1
a43 1
   unsigned int curbe_offset;
d45 6
a50 1
   unsigned int nr_urb_entries, urb_size;
a51 2
   unsigned int nr_surfaces;
};
d53 6
a58 4
static void
vs_unit_populate_key(struct brw_context *brw, struct brw_vs_unit_key *key)
{
   struct gl_context *ctx = &brw->intel.ctx;
a59 1
   memset(key, 0, sizeof(*key));
a60 8
   /* CACHE_NEW_VS_PROG */
   key->total_grf = brw->vs.prog_data->total_grf;
   key->urb_entry_read_length = brw->vs.prog_data->urb_read_length;
   key->curb_entry_read_length = brw->vs.prog_data->curb_read_length;

   /* BRW_NEW_URB_FENCE */
   key->nr_urb_entries = brw->urb.nr_vs_entries;
   key->urb_size = brw->urb.vsize;
d62 2
a63 2
   /* BRW_NEW_NR_VS_SURFACES */
   key->nr_surfaces = brw->vs.nr_surfaces;
d66 1
a66 1
   if (ctx->Transform.ClipPlanesEnabled) {
d70 1
a70 1
      key->curbe_offset = brw->curbe.clip_start;
d73 1
a73 1
      key->curbe_offset = brw->curbe.vs_start;
a74 8
}

static drm_intel_bo *
vs_unit_create_from_key(struct brw_context *brw, struct brw_vs_unit_key *key)
{
   struct intel_context *intel = &brw->intel;
   struct brw_vs_unit_state vs;
   drm_intel_bo *bo;
a75 4
   memset(&vs, 0, sizeof(vs));

   vs.thread0.kernel_start_pointer = brw->vs.prog_bo->offset >> 6; /* reloc */
   vs.thread0.grf_reg_count = ALIGN(key->total_grf, 16) / 16 - 1;
a76 22
   /* Choosing multiple program flow means that we may get 2-vertex threads,
    * which will have the channel mask for dwords 4-7 enabled in the thread,
    * and those dwords will be written to the second URB handle when we
    * brw_urb_WRITE() results.
    */
   /* Disable single program flow on Ironlake.  We cannot reliably get
    * all applications working without it.  See:
    * https://bugs.freedesktop.org/show_bug.cgi?id=29172
    *
    * The most notable and reliably failing application is the Humus
    * demo "CelShading"
   */
   vs.thread1.single_program_flow = (intel->gen == 5);

   if (intel->gen == 5)
      vs.thread1.binding_table_entry_count = 0; /* hardware requirement */
   else
      vs.thread1.binding_table_entry_count = key->nr_surfaces;

   vs.thread3.urb_entry_read_length = key->urb_entry_read_length;
   vs.thread3.const_urb_entry_read_length = key->curb_entry_read_length;
   vs.thread3.dispatch_grf_start_reg = 1;
a77 40
   vs.thread3.const_urb_entry_read_offset = key->curbe_offset * 2;

   if (intel->gen == 5) {
      switch (key->nr_urb_entries) {
      case 8:
      case 12:
      case 16:
      case 32:
      case 64:
      case 96:
      case 128:
      case 168:
      case 192:
      case 224:
      case 256:
	 vs.thread4.nr_urb_entries = key->nr_urb_entries >> 2;
	 break;
      default:
	 assert(0);
      }
   } else {
      switch (key->nr_urb_entries) {
      case 8:
      case 12:
      case 16:
      case 32:
	 break;
      case 64:
	 assert(intel->is_g4x);
	 break;
      default:
	 assert(0);
      }
      vs.thread4.nr_urb_entries = key->nr_urb_entries;
   }

   vs.thread4.urb_entry_allocation_size = key->urb_size - 1;

   vs.thread4.max_threads = CLAMP(key->nr_urb_entries / 2,
				  1, brw->vs_max_threads) - 1;
a80 2
   /* It has to be set to 0 for Ironlake
    */
d83 2
a84 2
   if (unlikely(INTEL_DEBUG & DEBUG_STATS))
      vs.thread4.stats_enable = 1;
d86 1
a86 1
   /* Vertex program always enabled:
d90 1
a90 11
   bo = brw_upload_cache(&brw->cache, BRW_VS_UNIT,
			 key, sizeof(*key),
			 &brw->vs.prog_bo, 1,
			 &vs, sizeof(vs));

   /* Emit VS program relocation */
   drm_intel_bo_emit_reloc(bo, offsetof(struct brw_vs_unit_state, thread0),
			   brw->vs.prog_bo, vs.thread0.grf_reg_count << 1,
			   I915_GEM_DOMAIN_INSTRUCTION, 0);

   return bo;
a92 15
static void prepare_vs_unit(struct brw_context *brw)
{
   struct brw_vs_unit_key key;

   vs_unit_populate_key(brw, &key);

   drm_intel_bo_unreference(brw->vs.state_bo);
   brw->vs.state_bo = brw_search_cache(&brw->cache, BRW_VS_UNIT,
				       &key, sizeof(key),
				       &brw->vs.prog_bo, 1,
				       NULL);
   if (brw->vs.state_bo == NULL) {
      brw->vs.state_bo = vs_unit_create_from_key(brw, &key);
   }
}
a97 1
                BRW_NEW_NR_VS_SURFACES |
d101 1
a101 1
   .prepare = prepare_vs_unit,
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d39 12
d52 1
a52 1
brw_upload_vs_unit(struct brw_context *brw)
d54 3
a56 1
   struct brw_vs_unit_state *vs;
d58 4
a61 13
   vs = brw_state_batch(brw, AUB_TRACE_VS_STATE,
			sizeof(*vs), 32, &brw->vs.state_offset);
   memset(vs, 0, sizeof(*vs));

   /* BRW_NEW_PROGRAM_CACHE | CACHE_NEW_VS_PROG */
   vs->thread0.grf_reg_count =
      ALIGN(brw->vs.prog_data->base.total_grf, 16) / 16 - 1;
   vs->thread0.kernel_start_pointer =
      brw_program_reloc(brw,
			brw->vs.state_offset +
			offsetof(struct brw_vs_unit_state, thread0),
			brw->vs.prog_offset +
			(vs->thread0.grf_reg_count << 1)) >> 6;
d63 18
a80 7
   /* Use ALT floating point mode for ARB vertex programs, because they
    * require 0^0 == 1.
    */
   if (brw->ctx.Shader.CurrentVertexProgram == NULL)
      vs->thread1.floating_point_mode = BRW_FLOATING_POINT_NON_IEEE_754;
   else
      vs->thread1.floating_point_mode = BRW_FLOATING_POINT_IEEE_754;
d82 12
d99 1
a99 1
   /* Force single program flow on Ironlake.  We cannot reliably get
d106 1
a106 1
   vs->thread1.single_program_flow = (brw->gen == 5);
d108 4
a111 17
   vs->thread1.binding_table_entry_count = 0;

   if (brw->vs.prog_data->base.total_scratch != 0) {
      vs->thread2.scratch_space_base_pointer =
	 brw->vs.scratch_bo->offset >> 10; /* reloc */
      vs->thread2.per_thread_scratch_space =
	 ffs(brw->vs.prog_data->base.total_scratch) - 11;
   } else {
      vs->thread2.scratch_space_base_pointer = 0;
      vs->thread2.per_thread_scratch_space = 0;
   }

   vs->thread3.urb_entry_read_length = brw->vs.prog_data->base.urb_read_length;
   vs->thread3.const_urb_entry_read_length
      = brw->vs.prog_data->base.curb_read_length;
   vs->thread3.dispatch_grf_start_reg = 1;
   vs->thread3.urb_entry_read_offset = 0;
d113 5
a117 2
   /* BRW_NEW_CURBE_OFFSETS, _NEW_TRANSFORM, BRW_NEW_VERTEX_PROGRAM */
   vs->thread3.const_urb_entry_read_offset = brw->curbe.vs_start * 2;
d119 2
a120 3
   /* BRW_NEW_URB_FENCE */
   if (brw->gen == 5) {
      switch (brw->urb.nr_vs_entries) {
d132 1
a132 1
	 vs->thread4.nr_urb_entries = brw->urb.nr_vs_entries >> 2;
d138 1
a138 1
      switch (brw->urb.nr_vs_entries) {
d145 1
a145 1
	 assert(brw->is_g4x);
d150 1
a150 1
      vs->thread4.nr_urb_entries = brw->urb.nr_vs_entries;
d153 1
a153 1
   vs->thread4.urb_entry_allocation_size = brw->urb.vsize - 1;
d155 2
a156 9
   vs->thread4.max_threads = CLAMP(brw->urb.nr_vs_entries / 2,
				   1, brw->max_vs_threads) - 1;

   if (brw->gen == 5)
      vs->vs5.sampler_count = 0; /* hardware requirement */
   else {
      /* CACHE_NEW_SAMPLER */
      vs->vs5.sampler_count = (brw->sampler.count + 3) / 4;
   }
d158 5
d165 1
a165 1
      vs->thread4.stats_enable = 1;
d169 1
a169 1
   vs->vs6.vs_enable = 1;
d171 18
a188 12
   /* Set the sampler state pointer, and its reloc
    */
   if (brw->sampler.count) {
      vs->vs5.sampler_state_pointer =
         (brw->batch.bo->offset + brw->sampler.offset) >> 5;
      drm_intel_bo_emit_reloc(brw->batch.bo,
                              brw->vs.state_offset +
                              offsetof(struct brw_vs_unit_state, vs5),
                              brw->batch.bo,
                              brw->sampler.offset | vs->vs5.sampler_count,
                              I915_GEM_DOMAIN_INSTRUCTION, 0);
   }
d190 7
a196 8
   /* Emit scratch space relocation */
   if (brw->vs.prog_data->base.total_scratch != 0) {
      drm_intel_bo_emit_reloc(brw->batch.bo,
			      brw->vs.state_offset +
			      offsetof(struct brw_vs_unit_state, thread2),
			      brw->vs.scratch_bo,
			      vs->thread2.per_thread_scratch_space,
			      I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER);
a197 2

   brw->state.dirty.cache |= CACHE_NEW_VS_UNIT;
d203 4
a206 6
      .brw   = (BRW_NEW_BATCH |
		BRW_NEW_PROGRAM_CACHE |
		BRW_NEW_CURBE_OFFSETS |
		BRW_NEW_URB_FENCE |
                BRW_NEW_VERTEX_PROGRAM),
      .cache = CACHE_NEW_VS_PROG | CACHE_NEW_SAMPLER
d208 1
a208 1
   .emit = brw_upload_vs_unit,
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d31 1
a31 1

a41 2
   struct brw_stage_state *stage_state = &brw->vs.base;

d45 1
a45 1
			sizeof(*vs), 32, &stage_state->state_offset);
d53 1
a53 1
			stage_state->state_offset +
d55 1
a55 1
			stage_state->prog_offset +
d61 1
a61 1
   if (brw->ctx.Shader.CurrentProgram[MESA_SHADER_VERTEX] == NULL)
d80 1
a80 2
   vs->thread1.binding_table_entry_count =
      brw->vs.prog_data->base.base.binding_table.size_bytes / 4;
d84 1
a84 1
	 stage_state->scratch_bo->offset64 >> 10; /* reloc */
d95 1
a95 2
   vs->thread3.dispatch_grf_start_reg =
      brw->vs.prog_data->base.dispatch_grf_start_reg;
d145 1
a145 1
      vs->vs5.sampler_count = (stage_state->sampler_count + 3) / 4;
d158 1
a158 1
   if (stage_state->sampler_count) {
d160 1
a160 1
         (brw->batch.bo->offset64 + stage_state->sampler_offset) >> 5;
d162 1
a162 1
                              stage_state->state_offset +
d165 1
a165 2
                              (stage_state->sampler_offset |
                               vs->vs5.sampler_count),
d172 1
a172 1
			      stage_state->state_offset +
d174 1
a174 1
			      stage_state->scratch_bo,
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d85 1
a85 1
   if (brw->vs.prog_data->base.base.total_scratch != 0) {
d89 1
a89 1
	 ffs(brw->vs.prog_data->base.base.total_scratch) - 11;
d97 1
a97 1
      = brw->vs.prog_data->base.base.curb_read_length;
d99 1
a99 1
      brw->vs.prog_data->base.base.dispatch_grf_start_reg;
d122 1
a122 1
         unreachable("not reached");
d135 1
a135 1
         unreachable("not reached");
d175 1
a175 1
   if (brw->vs.prog_data->base.base.total_scratch != 0) {
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d85 1
a85 1
   if (brw->vs.prog_data->base.total_scratch != 0) {
d89 1
a89 1
	 ffs(brw->vs.prog_data->base.total_scratch) - 11;
d97 1
a97 1
      = brw->vs.prog_data->base.curb_read_length;
d99 1
a99 1
      brw->vs.prog_data->base.dispatch_grf_start_reg;
d122 1
a122 1
	 assert(0);
d135 1
a135 1
	 assert(0);
d175 1
a175 1
   if (brw->vs.prog_data->base.total_scratch != 0) {
@


