head	1.12;
access;
symbols
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	v10_2_9:1.1.1.7
	v10_4_3:1.1.1.6
	v10_2_7:1.1.1.5
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.11;
commitid	TnlogFl9nOv2eaRf;

1.11
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.10;
commitid	4ry2gvZGMXkCUD2n;

1.10
date	2015.01.25.14.41.20;	author jsg;	state Exp;
branches;
next	1.9;
commitid	mcxB0JvoI9gTDYXU;

1.9
date	2014.09.07.15.20.07;	author jsg;	state Exp;
branches;
next	1.8;
commitid	7kimTMT4YlQauAIU;

1.8
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.04.16;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.40;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.40;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.28;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.48;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2014.09.07.15.06.00;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	dm8VnQHhowGHmemJ;

1.1.1.6
date	2015.01.25.14.11.30;	author jsg;	state Exp;
branches;
next	1.1.1.7;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.7
date	2015.02.20.22.48.37;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.12
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */

#include "main/glheader.h"
#include "main/macros.h"
#include "main/enums.h"
#include "program/program.h"

#include "intel_batchbuffer.h"

#include "brw_defines.h"
#include "brw_context.h"
#include "brw_eu.h"
#include "brw_clip.h"



/* This is performed against the original triangles, so no indirection
 * required:
BZZZT!
 */
static void compute_tri_direction( struct brw_clip_compile *c )
{
   struct brw_compile *p = &c->func;
   struct brw_reg e = c->reg.tmp0;
   struct brw_reg f = c->reg.tmp1;
   GLuint hpos_offset = brw_varying_to_offset(&c->vue_map, VARYING_SLOT_POS);
   struct brw_reg v0 = byte_offset(c->reg.vertex[0], hpos_offset);
   struct brw_reg v1 = byte_offset(c->reg.vertex[1], hpos_offset);
   struct brw_reg v2 = byte_offset(c->reg.vertex[2], hpos_offset);


   struct brw_reg v0n = get_tmp(c);
   struct brw_reg v1n = get_tmp(c);
   struct brw_reg v2n = get_tmp(c);

   /* Convert to NDC.
    * NOTE: We can't modify the original vertex coordinates,
    * as it may impact further operations.
    * So, we have to keep normalized coordinates in temp registers.
    *
    * TBD-KC
    * Try to optimize unnecessary MOV's.
    */
   brw_MOV(p, v0n, v0);
   brw_MOV(p, v1n, v1);
   brw_MOV(p, v2n, v2);

   brw_clip_project_position(c, v0n);
   brw_clip_project_position(c, v1n);
   brw_clip_project_position(c, v2n);

   /* Calculate the vectors of two edges of the triangle:
    */
   brw_ADD(p, e, v0n, negate(v2n));
   brw_ADD(p, f, v1n, negate(v2n));

   /* Take their crossproduct:
    */
   brw_set_access_mode(p, BRW_ALIGN_16);
   brw_MUL(p, vec4(brw_null_reg()), brw_swizzle(e, 1,2,0,3),  brw_swizzle(f,2,0,1,3));
   brw_MAC(p, vec4(e),  negate(brw_swizzle(e, 2,0,1,3)), brw_swizzle(f,1,2,0,3));
   brw_set_access_mode(p, BRW_ALIGN_1);

   brw_MUL(p, c->reg.dir, c->reg.dir, vec4(e));
}


static void cull_direction( struct brw_clip_compile *c )
{
   struct brw_compile *p = &c->func;
   GLuint conditional;

   assert (!(c->key.fill_ccw == CLIP_CULL &&
	     c->key.fill_cw == CLIP_CULL));

   if (c->key.fill_ccw == CLIP_CULL)
      conditional = BRW_CONDITIONAL_GE;
   else
      conditional = BRW_CONDITIONAL_L;

   brw_CMP(p,
	   vec1(brw_null_reg()),
	   conditional,
	   get_element(c->reg.dir, 2),
	   brw_imm_f(0));

   brw_IF(p, BRW_EXECUTE_1);
   {
      brw_clip_kill_thread(c);
   }
   brw_ENDIF(p);
}



static void copy_bfc( struct brw_clip_compile *c )
{
   struct brw_compile *p = &c->func;
   GLuint conditional;

   /* Do we have any colors to copy?
    */
   if (!(brw_clip_have_varying(c, VARYING_SLOT_COL0) &&
         brw_clip_have_varying(c, VARYING_SLOT_BFC0)) &&
       !(brw_clip_have_varying(c, VARYING_SLOT_COL1) &&
         brw_clip_have_varying(c, VARYING_SLOT_BFC1)))
      return;

   /* In some wierd degnerate cases we can end up testing the
    * direction twice, once for culling and once for bfc copying.  Oh
    * well, that's what you get for setting wierd GL state.
    */
   if (c->key.copy_bfc_ccw)
      conditional = BRW_CONDITIONAL_GE;
   else
      conditional = BRW_CONDITIONAL_L;

   brw_CMP(p,
	   vec1(brw_null_reg()),
	   conditional,
	   get_element(c->reg.dir, 2),
	   brw_imm_f(0));

   brw_IF(p, BRW_EXECUTE_1);
   {
      GLuint i;

      for (i = 0; i < 3; i++) {
	 if (brw_clip_have_varying(c, VARYING_SLOT_COL0) &&
             brw_clip_have_varying(c, VARYING_SLOT_BFC0))
	    brw_MOV(p,
		    byte_offset(c->reg.vertex[i],
                                brw_varying_to_offset(&c->vue_map,
                                                      VARYING_SLOT_COL0)),
		    byte_offset(c->reg.vertex[i],
                                brw_varying_to_offset(&c->vue_map,
                                                      VARYING_SLOT_BFC0)));

	 if (brw_clip_have_varying(c, VARYING_SLOT_COL1) &&
             brw_clip_have_varying(c, VARYING_SLOT_BFC1))
	    brw_MOV(p,
		    byte_offset(c->reg.vertex[i],
                                brw_varying_to_offset(&c->vue_map,
                                                      VARYING_SLOT_COL1)),
		    byte_offset(c->reg.vertex[i],
                                brw_varying_to_offset(&c->vue_map,
                                                      VARYING_SLOT_BFC1)));
      }
   }
   brw_ENDIF(p);
}




/*
  GLfloat iz	= 1.0 / dir.z;
  GLfloat ac	= dir.x * iz;
  GLfloat bc	= dir.y * iz;
  offset = ctx->Polygon.OffsetUnits * DEPTH_SCALE;
  offset += MAX2( abs(ac), abs(bc) ) * ctx->Polygon.OffsetFactor;
  offset *= MRD;
*/
static void compute_offset( struct brw_clip_compile *c )
{
   struct brw_compile *p = &c->func;
   struct brw_reg off = c->reg.offset;
   struct brw_reg dir = c->reg.dir;

   brw_math_invert(p, get_element(off, 2), get_element(dir, 2));
   brw_MUL(p, vec2(off), vec2(dir), get_element(off, 2));

   brw_CMP(p,
	   vec1(brw_null_reg()),
	   BRW_CONDITIONAL_GE,
	   brw_abs(get_element(off, 0)),
	   brw_abs(get_element(off, 1)));

   brw_SEL(p, vec1(off), brw_abs(get_element(off, 0)), brw_abs(get_element(off, 1)));
   brw_set_predicate_control(p, BRW_PREDICATE_NONE);

   brw_MUL(p, vec1(off), vec1(off), brw_imm_f(c->key.offset_factor));
   brw_ADD(p, vec1(off), vec1(off), brw_imm_f(c->key.offset_units));
}


static void merge_edgeflags( struct brw_clip_compile *c )
{
   struct brw_compile *p = &c->func;
   struct brw_reg tmp0 = get_element_ud(c->reg.tmp0, 0);

   brw_AND(p, tmp0, get_element_ud(c->reg.R0, 2), brw_imm_ud(PRIM_MASK));
   brw_CMP(p,
	   vec1(brw_null_reg()),
	   BRW_CONDITIONAL_EQ,
	   tmp0,
	   brw_imm_ud(_3DPRIM_POLYGON));

   /* Get away with using reg.vertex because we know that this is not
    * a _3DPRIM_TRISTRIP_REVERSE:
    */
   brw_IF(p, BRW_EXECUTE_1);
   {
      brw_set_conditionalmod(p, BRW_CONDITIONAL_EQ);
      brw_AND(p, vec1(brw_null_reg()), get_element_ud(c->reg.R0, 2), brw_imm_ud(1<<8));
      brw_MOV(p, byte_offset(c->reg.vertex[0],
                             brw_varying_to_offset(&c->vue_map,
                                                   VARYING_SLOT_EDGE)),
              brw_imm_f(0));
      brw_set_predicate_control(p, BRW_PREDICATE_NONE);

      brw_set_conditionalmod(p, BRW_CONDITIONAL_EQ);
      brw_AND(p, vec1(brw_null_reg()), get_element_ud(c->reg.R0, 2), brw_imm_ud(1<<9));
      brw_MOV(p, byte_offset(c->reg.vertex[2],
                             brw_varying_to_offset(&c->vue_map,
                                                   VARYING_SLOT_EDGE)),
              brw_imm_f(0));
      brw_set_predicate_control(p, BRW_PREDICATE_NONE);
   }
   brw_ENDIF(p);
}



static void apply_one_offset( struct brw_clip_compile *c,
			  struct brw_indirect vert )
{
   struct brw_compile *p = &c->func;
   GLuint ndc_offset = brw_varying_to_offset(&c->vue_map,
                                             BRW_VARYING_SLOT_NDC);
   struct brw_reg z = deref_1f(vert, ndc_offset +
			       2 * type_sz(BRW_REGISTER_TYPE_F));

   brw_ADD(p, z, z, vec1(c->reg.offset));
}



/***********************************************************************
 * Output clipped polygon as an unfilled primitive:
 */
static void emit_lines(struct brw_clip_compile *c,
		       bool do_offset)
{
   struct brw_compile *p = &c->func;
   struct brw_indirect v0 = brw_indirect(0, 0);
   struct brw_indirect v1 = brw_indirect(1, 0);
   struct brw_indirect v0ptr = brw_indirect(2, 0);
   struct brw_indirect v1ptr = brw_indirect(3, 0);

   /* Need a seperate loop for offset:
    */
   if (do_offset) {
      brw_MOV(p, c->reg.loopcount, c->reg.nr_verts);
      brw_MOV(p, get_addr_reg(v0ptr), brw_address(c->reg.inlist));

      brw_DO(p, BRW_EXECUTE_1);
      {
	 brw_MOV(p, get_addr_reg(v0), deref_1uw(v0ptr, 0));
	 brw_ADD(p, get_addr_reg(v0ptr), get_addr_reg(v0ptr), brw_imm_uw(2));
	
	 apply_one_offset(c, v0);
	
	 brw_set_conditionalmod(p, BRW_CONDITIONAL_G);
	 brw_ADD(p, c->reg.loopcount, c->reg.loopcount, brw_imm_d(-1));
      }
      brw_WHILE(p);
   }

   /* v1ptr = &inlist[nr_verts]
    * *v1ptr = v0
    */
   brw_MOV(p, c->reg.loopcount, c->reg.nr_verts);
   brw_MOV(p, get_addr_reg(v0ptr), brw_address(c->reg.inlist));
   brw_ADD(p, get_addr_reg(v1ptr), get_addr_reg(v0ptr), retype(c->reg.nr_verts, BRW_REGISTER_TYPE_UW));
   brw_ADD(p, get_addr_reg(v1ptr), get_addr_reg(v1ptr), retype(c->reg.nr_verts, BRW_REGISTER_TYPE_UW));
   brw_MOV(p, deref_1uw(v1ptr, 0), deref_1uw(v0ptr, 0));

   brw_DO(p, BRW_EXECUTE_1);
   {
      brw_MOV(p, get_addr_reg(v0), deref_1uw(v0ptr, 0));
      brw_MOV(p, get_addr_reg(v1), deref_1uw(v0ptr, 2));
      brw_ADD(p, get_addr_reg(v0ptr), get_addr_reg(v0ptr), brw_imm_uw(2));

      /* draw edge if edgeflag != 0 */
      brw_CMP(p,
	      vec1(brw_null_reg()), BRW_CONDITIONAL_NZ,
	      deref_1f(v0, brw_varying_to_offset(&c->vue_map,
                                                 VARYING_SLOT_EDGE)),
	      brw_imm_f(0));
      brw_IF(p, BRW_EXECUTE_1);
      {
	 brw_clip_emit_vue(c, v0, BRW_URB_WRITE_ALLOCATE_COMPLETE,
                           (_3DPRIM_LINESTRIP << URB_WRITE_PRIM_TYPE_SHIFT)
                           | URB_WRITE_PRIM_START);
	 brw_clip_emit_vue(c, v1, BRW_URB_WRITE_ALLOCATE_COMPLETE,
                           (_3DPRIM_LINESTRIP << URB_WRITE_PRIM_TYPE_SHIFT)
                           | URB_WRITE_PRIM_END);
      }
      brw_ENDIF(p);

      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
      brw_ADD(p, c->reg.loopcount, c->reg.loopcount, brw_imm_d(-1));
   }
   brw_WHILE(p);
}



static void emit_points(struct brw_clip_compile *c,
			bool do_offset )
{
   struct brw_compile *p = &c->func;

   struct brw_indirect v0 = brw_indirect(0, 0);
   struct brw_indirect v0ptr = brw_indirect(2, 0);

   brw_MOV(p, c->reg.loopcount, c->reg.nr_verts);
   brw_MOV(p, get_addr_reg(v0ptr), brw_address(c->reg.inlist));

   brw_DO(p, BRW_EXECUTE_1);
   {
      brw_MOV(p, get_addr_reg(v0), deref_1uw(v0ptr, 0));
      brw_ADD(p, get_addr_reg(v0ptr), get_addr_reg(v0ptr), brw_imm_uw(2));

      /* draw if edgeflag != 0
       */
      brw_CMP(p,
	      vec1(brw_null_reg()), BRW_CONDITIONAL_NZ,
	      deref_1f(v0, brw_varying_to_offset(&c->vue_map,
                                                 VARYING_SLOT_EDGE)),
	      brw_imm_f(0));
      brw_IF(p, BRW_EXECUTE_1);
      {
	 if (do_offset)
	    apply_one_offset(c, v0);

	 brw_clip_emit_vue(c, v0, BRW_URB_WRITE_ALLOCATE_COMPLETE,
                           (_3DPRIM_POINTLIST << URB_WRITE_PRIM_TYPE_SHIFT)
                           | URB_WRITE_PRIM_START | URB_WRITE_PRIM_END);
      }
      brw_ENDIF(p);

      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
      brw_ADD(p, c->reg.loopcount, c->reg.loopcount, brw_imm_d(-1));
   }
   brw_WHILE(p);
}







static void emit_primitives( struct brw_clip_compile *c,
			     GLuint mode,
			     bool do_offset )
{
   switch (mode) {
   case CLIP_FILL:
      brw_clip_tri_emit_polygon(c);
      break;

   case CLIP_LINE:
      emit_lines(c, do_offset);
      break;

   case CLIP_POINT:
      emit_points(c, do_offset);
      break;

   case CLIP_CULL:
      assert(0);
      break;
   }
}



static void emit_unfilled_primitives( struct brw_clip_compile *c )
{
   struct brw_compile *p = &c->func;

   /* Direction culling has already been done.
    */
   if (c->key.fill_ccw != c->key.fill_cw &&
       c->key.fill_ccw != CLIP_CULL &&
       c->key.fill_cw != CLIP_CULL)
   {
      brw_CMP(p,
	      vec1(brw_null_reg()),
	      BRW_CONDITIONAL_GE,
	      get_element(c->reg.dir, 2),
	      brw_imm_f(0));

      brw_IF(p, BRW_EXECUTE_1);
      {
	 emit_primitives(c, c->key.fill_ccw, c->key.offset_ccw);
      }
      brw_ELSE(p);
      {
	 emit_primitives(c, c->key.fill_cw, c->key.offset_cw);
      }
      brw_ENDIF(p);
   }
   else if (c->key.fill_cw != CLIP_CULL) {
      emit_primitives(c, c->key.fill_cw, c->key.offset_cw);
   }
   else if (c->key.fill_ccw != CLIP_CULL) {
      emit_primitives(c, c->key.fill_ccw, c->key.offset_ccw);
   }
}




static void check_nr_verts( struct brw_clip_compile *c )
{
   struct brw_compile *p = &c->func;

   brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_L, c->reg.nr_verts, brw_imm_d(3));
   brw_IF(p, BRW_EXECUTE_1);
   {
      brw_clip_kill_thread(c);
   }
   brw_ENDIF(p);
}


void brw_emit_unfilled_clip( struct brw_clip_compile *c )
{
   struct brw_compile *p = &c->func;

   c->need_direction = ((c->key.offset_ccw || c->key.offset_cw) ||
			(c->key.fill_ccw != c->key.fill_cw) ||
			c->key.fill_ccw == CLIP_CULL ||
			c->key.fill_cw == CLIP_CULL ||
			c->key.copy_bfc_cw ||
			c->key.copy_bfc_ccw);

   brw_clip_tri_alloc_regs(c, 3 + c->key.nr_userclip + 6);
   brw_clip_tri_init_vertices(c);
   brw_clip_init_ff_sync(c);

   assert(brw_clip_have_varying(c, VARYING_SLOT_EDGE));

   if (c->key.fill_ccw == CLIP_CULL &&
       c->key.fill_cw == CLIP_CULL) {
      brw_clip_kill_thread(c);
      return;
   }

   merge_edgeflags(c);

   /* Need to use the inlist indirection here:
    */
   if (c->need_direction)
      compute_tri_direction(c);

   if (c->key.fill_ccw == CLIP_CULL ||
       c->key.fill_cw == CLIP_CULL)
      cull_direction(c);

   if (c->key.offset_ccw ||
       c->key.offset_cw)
      compute_offset(c);

   if (c->key.copy_bfc_ccw ||
       c->key.copy_bfc_cw)
      copy_bfc(c);

   /* Need to do this whether we clip or not:
    */
   if (c->has_flat_shading)
      brw_clip_tri_flat_shade(c);

   brw_clip_init_clipmask(c);
   brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_NZ, c->reg.planemask, brw_imm_ud(0));
   brw_IF(p, BRW_EXECUTE_1);
   {
      brw_clip_init_planes(c);
      brw_clip_tri(c);
      check_nr_verts(c);
   }
   brw_ENDIF(p);

   emit_unfilled_primitives(c);
   brw_clip_kill_thread(c);
}



@


1.11
log
@Merge Mesa 10.2.9
@
text
@@


1.10
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d88 1
a88 1
   brw_set_default_access_mode(p, BRW_ALIGN_16);
d91 1
a91 1
   brw_set_default_access_mode(p, BRW_ALIGN_1);
a195 1
   const struct brw_context *brw = p->brw;
d208 2
a209 3
   brw_SEL(p, vec1(off),
           brw_abs(get_element(off, 0)), brw_abs(get_element(off, 1)));
   brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
a218 1
   const struct brw_context *brw = p->brw;
d233 1
a234 1
      brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_EQ);
d239 1
a239 1
      brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
d241 1
a242 1
      brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_EQ);
d247 1
a247 1
      brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
a274 1
   const struct brw_context *brw = p->brw;
d293 1
a294 1
         brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_G);
a296 1
      brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
d331 1
a332 1
      brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_NZ);
a334 1
   brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
a342 1
   const struct brw_context *brw = p->brw;
d373 1
a374 1
      brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_NZ);
a376 1
   brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
d403 2
a404 1
      unreachable("not reached");
@


1.9
log
@Merge Mesa 10.2.7
@
text
@d88 1
a88 1
   brw_set_access_mode(p, BRW_ALIGN_16);
d91 1
a91 1
   brw_set_access_mode(p, BRW_ALIGN_1);
d196 1
d209 3
a211 2
   brw_SEL(p, vec1(off), brw_abs(get_element(off, 0)), brw_abs(get_element(off, 1)));
   brw_set_predicate_control(p, BRW_PREDICATE_NONE);
d221 1
a235 1
      brw_set_conditionalmod(p, BRW_CONDITIONAL_EQ);
d237 1
d242 1
a242 1
      brw_set_predicate_control(p, BRW_PREDICATE_NONE);
a243 1
      brw_set_conditionalmod(p, BRW_CONDITIONAL_EQ);
d245 1
d250 1
a250 1
      brw_set_predicate_control(p, BRW_PREDICATE_NONE);
d278 1
a296 1
	 brw_set_conditionalmod(p, BRW_CONDITIONAL_G);
d298 1
d301 1
a335 1
      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
d337 1
d340 1
d349 1
a379 1
      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
d381 1
d384 1
d411 1
a411 2
      assert(0);
      break;
@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d200 1
a200 1
   brw_MUL(p, vec2(off), dir, get_element(off, 2));
d211 2
a212 2
   brw_MUL(p, vec1(off), off, brw_imm_f(c->key.offset_factor));
   brw_ADD(p, vec1(off), off, brw_imm_f(c->key.offset_units));
@


1.7
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d83 2
a84 2
   brw_ADD(p, e, v0n, negate(v2n)); 
   brw_ADD(p, f, v1n, negate(v2n)); 
d115 1
a115 1
   
d130 1
a130 1
   /* Do we have any colors to copy? 
d152 1
a152 1
   
d160 1
a160 1
	    brw_MOV(p, 
d170 1
a170 1
	    brw_MOV(p, 
d198 1
a198 1
   
d202 2
a203 2
   brw_CMP(p, 
	   vec1(brw_null_reg()), 
d205 1
a205 1
	   brw_abs(get_element(off, 0)), 
d221 4
a224 4
   brw_AND(p, tmp0, get_element_ud(c->reg.R0, 2), brw_imm_ud(PRIM_MASK)); 
   brw_CMP(p, 
	   vec1(brw_null_reg()), 
	   BRW_CONDITIONAL_EQ, 
d232 1
a232 1
   {   
d290 1
a290 1
	    
d292 1
a292 1
	    
d315 2
a316 2
      brw_CMP(p, 
	      vec1(brw_null_reg()), BRW_CONDITIONAL_NZ, 
d322 1
a322 1
	 brw_clip_emit_vue(c, v0, 1, 0,
d325 1
a325 1
	 brw_clip_emit_vue(c, v1, 1, 0,
d355 1
a355 1
      /* draw if edgeflag != 0 
d357 2
a358 2
      brw_CMP(p, 
	      vec1(brw_null_reg()), BRW_CONDITIONAL_NZ, 
d367 1
a367 1
	 brw_clip_emit_vue(c, v0, 1, 0,
d386 1
a386 1
			     GLuint mode, 
d406 1
a406 1
} 
d425 1
a425 1
   
d439 1
a439 1
   else if (c->key.fill_ccw != CLIP_CULL) { 
d451 1
a451 1
   brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_L, c->reg.nr_verts, brw_imm_d(3));      
d485 1
a485 1
   /* Need to use the inlist indirection here: 
d487 1
a487 1
   if (c->need_direction) 
d489 1
a489 1
   
d504 1
a504 1
   if (c->key.do_flat_shading)
d506 1
a506 1
   
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d55 4
a58 3
   struct brw_reg v0 = byte_offset(c->reg.vertex[0], c->offset[VERT_RESULT_HPOS]); 
   struct brw_reg v1 = byte_offset(c->reg.vertex[1], c->offset[VERT_RESULT_HPOS]); 
   struct brw_reg v2 = byte_offset(c->reg.vertex[2], c->offset[VERT_RESULT_HPOS]); 
d132 4
a135 2
   if (!(c->offset[VERT_RESULT_COL0] && c->offset[VERT_RESULT_BFC0]) &&
       !(c->offset[VERT_RESULT_COL1] && c->offset[VERT_RESULT_BFC1]))
d158 2
a159 1
	 if (c->offset[VERT_RESULT_COL0] && c->offset[VERT_RESULT_BFC0])
d161 6
a166 2
		    byte_offset(c->reg.vertex[i], c->offset[VERT_RESULT_COL0]),
		    byte_offset(c->reg.vertex[i], c->offset[VERT_RESULT_BFC0]));
d168 2
a169 1
	 if (c->offset[VERT_RESULT_COL1] && c->offset[VERT_RESULT_BFC1])
d171 6
a176 2
		    byte_offset(c->reg.vertex[i], c->offset[VERT_RESULT_COL1]),
		    byte_offset(c->reg.vertex[i], c->offset[VERT_RESULT_BFC1]));
d235 4
a238 1
      brw_MOV(p, byte_offset(c->reg.vertex[0], c->offset[VERT_RESULT_EDGE]), brw_imm_f(0));
d243 4
a246 1
      brw_MOV(p, byte_offset(c->reg.vertex[2], c->offset[VERT_RESULT_EDGE]), brw_imm_f(0));
d258 3
a260 1
   struct brw_reg z = deref_1f(vert, c->header_position_offset +
d272 1
a272 1
		       GLboolean do_offset)
a274 1
   struct brw_instruction *loop;
d286 1
a286 1
      loop = brw_DO(p, BRW_EXECUTE_1);
d296 1
a296 1
      brw_WHILE(p, loop);
d308 1
a308 1
   loop = brw_DO(p, BRW_EXECUTE_1);
d317 2
a318 1
	      deref_1f(v0, c->offset[VERT_RESULT_EDGE]),
d322 6
a327 2
	 brw_clip_emit_vue(c, v0, 1, 0, (_3DPRIM_LINESTRIP << 2) | R02_PRIM_START);
	 brw_clip_emit_vue(c, v1, 1, 0, (_3DPRIM_LINESTRIP << 2) | R02_PRIM_END);
d334 1
a334 1
   brw_WHILE(p, loop);
d340 1
a340 1
			GLboolean do_offset )
a342 1
   struct brw_instruction *loop;
d350 1
a350 1
   loop = brw_DO(p, BRW_EXECUTE_1);
d359 2
a360 1
	      deref_1f(v0, c->offset[VERT_RESULT_EDGE]),
d367 3
a369 1
	 brw_clip_emit_vue(c, v0, 1, 0, (_3DPRIM_POINTLIST << 2) | R02_PRIM_START | R02_PRIM_END);
d376 1
a376 1
   brw_WHILE(p, loop);
d387 1
a387 1
			     GLboolean do_offset )
d475 1
a475 1
   assert(c->offset[VERT_RESULT_EDGE]);
@


1.5
log
@Merge Mesa 7.10.3
@
text
@a98 1
   struct brw_instruction *ccw;
d115 1
a115 1
   ccw = brw_IF(p, BRW_EXECUTE_1);
d119 1
a119 1
   brw_ENDIF(p, ccw);
a126 1
   struct brw_instruction *ccw;
d150 1
a150 1
   ccw = brw_IF(p, BRW_EXECUTE_1);
d166 1
a166 1
   brw_ENDIF(p, ccw);
a205 1
   struct brw_instruction *is_poly;
d218 1
a218 1
   is_poly = brw_IF(p, BRW_EXECUTE_1);
d230 1
a230 1
   brw_ENDIF(p, is_poly);
a254 1
   struct brw_instruction *draw_edge;
d299 1
a299 1
      draw_edge = brw_IF(p, BRW_EXECUTE_1);
d304 1
a304 1
      brw_ENDIF(p, draw_edge);
a318 1
   struct brw_instruction *draw_point;
d337 1
a337 1
      draw_point = brw_IF(p, BRW_EXECUTE_1);
d344 1
a344 1
      brw_ENDIF(p, draw_point);
a385 1
   struct brw_instruction *ccw;
d399 1
a399 1
      ccw = brw_IF(p, BRW_EXECUTE_1);
d403 1
a403 1
      ccw = brw_ELSE(p, ccw);
d407 1
a407 1
      brw_ENDIF(p, ccw);
a422 1
   struct brw_instruction *if_insn;
d425 1
a425 1
   if_insn = brw_IF(p, BRW_EXECUTE_1);
d429 1
a429 1
   brw_ENDIF(p, if_insn);
a435 2
   struct brw_instruction *do_clip;
   
d482 1
a482 1
   do_clip = brw_IF(p, BRW_EXECUTE_1);
d488 2
a489 2
   brw_ENDIF(p, do_clip);
   
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d35 1
a35 1
#include "shader/program.h"
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a41 1
#include "brw_util.h"
d455 1
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d32 4
a35 3
#include "glheader.h"
#include "macros.h"
#include "enums.h"
a36 1
#include "shader/program.h"
@


1.1
log
@Initial revision
@
text
@d61 20
d83 2
a84 2
   brw_ADD(p, e, v0, negate(v2)); 
   brw_ADD(p, f, v1, negate(v2)); 
d243 2
a244 2
   struct brw_reg pos = deref_4f(vert, c->offset[VERT_RESULT_HPOS]);
   struct brw_reg z = get_element(pos, 2);
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d32 3
a34 4
#include "main/glheader.h"
#include "main/macros.h"
#include "main/enums.h"
#include "program/program.h"
d36 1
d42 1
a60 20
   struct brw_reg v0n = get_tmp(c);
   struct brw_reg v1n = get_tmp(c);
   struct brw_reg v2n = get_tmp(c);

   /* Convert to NDC.
    * NOTE: We can't modify the original vertex coordinates,
    * as it may impact further operations.
    * So, we have to keep normalized coordinates in temp registers.
    *
    * TBD-KC
    * Try to optimize unnecessary MOV's.
    */
   brw_MOV(p, v0n, v0);
   brw_MOV(p, v1n, v1);
   brw_MOV(p, v2n, v2);

   brw_clip_project_position(c, v0n);
   brw_clip_project_position(c, v1n);
   brw_clip_project_position(c, v2n);

d63 2
a64 2
   brw_ADD(p, e, v0n, negate(v2n)); 
   brw_ADD(p, f, v1n, negate(v2n)); 
d223 2
a224 2
   struct brw_reg z = deref_1f(vert, c->header_position_offset +
			       2 * type_sz(BRW_REGISTER_TYPE_F));
a435 1
   brw_clip_init_ff_sync(c);
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d55 3
a57 4
   GLuint hpos_offset = brw_varying_to_offset(&c->vue_map, VARYING_SLOT_POS);
   struct brw_reg v0 = byte_offset(c->reg.vertex[0], hpos_offset);
   struct brw_reg v1 = byte_offset(c->reg.vertex[1], hpos_offset);
   struct brw_reg v2 = byte_offset(c->reg.vertex[2], hpos_offset);
d99 1
d116 1
a116 1
   brw_IF(p, BRW_EXECUTE_1);
d120 1
a120 1
   brw_ENDIF(p);
d128 1
d133 2
a134 4
   if (!(brw_clip_have_varying(c, VARYING_SLOT_COL0) &&
         brw_clip_have_varying(c, VARYING_SLOT_BFC0)) &&
       !(brw_clip_have_varying(c, VARYING_SLOT_COL1) &&
         brw_clip_have_varying(c, VARYING_SLOT_BFC1)))
d152 1
a152 1
   brw_IF(p, BRW_EXECUTE_1);
d157 1
a157 2
	 if (brw_clip_have_varying(c, VARYING_SLOT_COL0) &&
             brw_clip_have_varying(c, VARYING_SLOT_BFC0))
d159 2
a160 6
		    byte_offset(c->reg.vertex[i],
                                brw_varying_to_offset(&c->vue_map,
                                                      VARYING_SLOT_COL0)),
		    byte_offset(c->reg.vertex[i],
                                brw_varying_to_offset(&c->vue_map,
                                                      VARYING_SLOT_BFC0)));
d162 1
a162 2
	 if (brw_clip_have_varying(c, VARYING_SLOT_COL1) &&
             brw_clip_have_varying(c, VARYING_SLOT_BFC1))
d164 2
a165 6
		    byte_offset(c->reg.vertex[i],
                                brw_varying_to_offset(&c->vue_map,
                                                      VARYING_SLOT_COL1)),
		    byte_offset(c->reg.vertex[i],
                                brw_varying_to_offset(&c->vue_map,
                                                      VARYING_SLOT_BFC1)));
d168 1
a168 1
   brw_ENDIF(p);
d208 1
d221 1
a221 1
   brw_IF(p, BRW_EXECUTE_1);
d225 1
a225 4
      brw_MOV(p, byte_offset(c->reg.vertex[0],
                             brw_varying_to_offset(&c->vue_map,
                                                   VARYING_SLOT_EDGE)),
              brw_imm_f(0));
d230 1
a230 4
      brw_MOV(p, byte_offset(c->reg.vertex[2],
                             brw_varying_to_offset(&c->vue_map,
                                                   VARYING_SLOT_EDGE)),
              brw_imm_f(0));
d233 1
a233 1
   brw_ENDIF(p);
d242 1
a242 3
   GLuint ndc_offset = brw_varying_to_offset(&c->vue_map,
                                             BRW_VARYING_SLOT_NDC);
   struct brw_reg z = deref_1f(vert, ndc_offset +
d254 1
a254 1
		       bool do_offset)
d257 2
d270 1
a270 1
      brw_DO(p, BRW_EXECUTE_1);
d280 1
a280 1
      brw_WHILE(p);
d292 1
a292 1
   brw_DO(p, BRW_EXECUTE_1);
d301 1
a301 2
	      deref_1f(v0, brw_varying_to_offset(&c->vue_map,
                                                 VARYING_SLOT_EDGE)),
d303 1
a303 1
      brw_IF(p, BRW_EXECUTE_1);
d305 2
a306 6
	 brw_clip_emit_vue(c, v0, 1, 0,
                           (_3DPRIM_LINESTRIP << URB_WRITE_PRIM_TYPE_SHIFT)
                           | URB_WRITE_PRIM_START);
	 brw_clip_emit_vue(c, v1, 1, 0,
                           (_3DPRIM_LINESTRIP << URB_WRITE_PRIM_TYPE_SHIFT)
                           | URB_WRITE_PRIM_END);
d308 1
a308 1
      brw_ENDIF(p);
d313 1
a313 1
   brw_WHILE(p);
d319 1
a319 1
			bool do_offset )
d322 2
d331 1
a331 1
   brw_DO(p, BRW_EXECUTE_1);
d340 1
a340 2
	      deref_1f(v0, brw_varying_to_offset(&c->vue_map,
                                                 VARYING_SLOT_EDGE)),
d342 1
a342 1
      brw_IF(p, BRW_EXECUTE_1);
d347 1
a347 3
	 brw_clip_emit_vue(c, v0, 1, 0,
                           (_3DPRIM_POINTLIST << URB_WRITE_PRIM_TYPE_SHIFT)
                           | URB_WRITE_PRIM_START | URB_WRITE_PRIM_END);
d349 1
a349 1
      brw_ENDIF(p);
d354 1
a354 1
   brw_WHILE(p);
d365 1
a365 1
			     bool do_offset )
d391 1
d405 1
a405 1
      brw_IF(p, BRW_EXECUTE_1);
d409 1
a409 1
      brw_ELSE(p);
d413 1
a413 1
      brw_ENDIF(p);
d429 1
d432 1
a432 1
   brw_IF(p, BRW_EXECUTE_1);
d436 1
a436 1
   brw_ENDIF(p);
d443 2
d457 1
a457 1
   assert(brw_clip_have_varying(c, VARYING_SLOT_EDGE));
d491 1
a491 1
   brw_IF(p, BRW_EXECUTE_1);
d497 2
a498 2
   brw_ENDIF(p);

@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d83 2
a84 2
   brw_ADD(p, e, v0n, negate(v2n));
   brw_ADD(p, f, v1n, negate(v2n));
d115 1
a115 1

d130 1
a130 1
   /* Do we have any colors to copy?
d152 1
a152 1

d160 1
a160 1
	    brw_MOV(p,
d170 1
a170 1
	    brw_MOV(p,
d198 1
a198 1

d202 2
a203 2
   brw_CMP(p,
	   vec1(brw_null_reg()),
d205 1
a205 1
	   brw_abs(get_element(off, 0)),
d221 4
a224 4
   brw_AND(p, tmp0, get_element_ud(c->reg.R0, 2), brw_imm_ud(PRIM_MASK));
   brw_CMP(p,
	   vec1(brw_null_reg()),
	   BRW_CONDITIONAL_EQ,
d232 1
a232 1
   {
d290 1
a290 1
	
d292 1
a292 1
	
d315 2
a316 2
      brw_CMP(p,
	      vec1(brw_null_reg()), BRW_CONDITIONAL_NZ,
d322 1
a322 1
	 brw_clip_emit_vue(c, v0, BRW_URB_WRITE_ALLOCATE_COMPLETE,
d325 1
a325 1
	 brw_clip_emit_vue(c, v1, BRW_URB_WRITE_ALLOCATE_COMPLETE,
d355 1
a355 1
      /* draw if edgeflag != 0
d357 2
a358 2
      brw_CMP(p,
	      vec1(brw_null_reg()), BRW_CONDITIONAL_NZ,
d367 1
a367 1
	 brw_clip_emit_vue(c, v0, BRW_URB_WRITE_ALLOCATE_COMPLETE,
d386 1
a386 1
			     GLuint mode,
d406 1
a406 1
}
d425 1
a425 1

d439 1
a439 1
   else if (c->key.fill_ccw != CLIP_CULL) {
d451 1
a451 1
   brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_L, c->reg.nr_verts, brw_imm_d(3));
d485 1
a485 1
   /* Need to use the inlist indirection here:
d487 1
a487 1
   if (c->need_direction)
d489 1
a489 1

d504 1
a504 1
   if (c->has_flat_shading)
d506 1
a506 1

@


1.1.1.5
log
@Import Mesa 10.2.7
@
text
@d200 1
a200 1
   brw_MUL(p, vec2(off), vec2(dir), get_element(off, 2));
d211 2
a212 2
   brw_MUL(p, vec1(off), vec1(off), brw_imm_f(c->key.offset_factor));
   brw_ADD(p, vec1(off), vec1(off), brw_imm_f(c->key.offset_units));
@


1.1.1.6
log
@Import Mesa 10.4.3
@
text
@d88 1
a88 1
   brw_set_default_access_mode(p, BRW_ALIGN_16);
d91 1
a91 1
   brw_set_default_access_mode(p, BRW_ALIGN_1);
a195 1
   const struct brw_context *brw = p->brw;
d208 2
a209 3
   brw_SEL(p, vec1(off),
           brw_abs(get_element(off, 0)), brw_abs(get_element(off, 1)));
   brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
a218 1
   const struct brw_context *brw = p->brw;
d233 1
a234 1
      brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_EQ);
d239 1
a239 1
      brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
d241 1
a242 1
      brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_EQ);
d247 1
a247 1
      brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
a274 1
   const struct brw_context *brw = p->brw;
d293 1
a294 1
         brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_G);
a296 1
      brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
d331 1
a332 1
      brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_NZ);
a334 1
   brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
a342 1
   const struct brw_context *brw = p->brw;
d373 1
a374 1
      brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_NZ);
a376 1
   brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
d403 2
a404 1
      unreachable("not reached");
@


1.1.1.7
log
@Import Mesa 10.2.9
@
text
@d88 1
a88 1
   brw_set_access_mode(p, BRW_ALIGN_16);
d91 1
a91 1
   brw_set_access_mode(p, BRW_ALIGN_1);
d196 1
d209 3
a211 2
   brw_SEL(p, vec1(off), brw_abs(get_element(off, 0)), brw_abs(get_element(off, 1)));
   brw_set_predicate_control(p, BRW_PREDICATE_NONE);
d221 1
a235 1
      brw_set_conditionalmod(p, BRW_CONDITIONAL_EQ);
d237 1
d242 1
a242 1
      brw_set_predicate_control(p, BRW_PREDICATE_NONE);
a243 1
      brw_set_conditionalmod(p, BRW_CONDITIONAL_EQ);
d245 1
d250 1
a250 1
      brw_set_predicate_control(p, BRW_PREDICATE_NONE);
d278 1
a296 1
	 brw_set_conditionalmod(p, BRW_CONDITIONAL_G);
d298 1
d301 1
a335 1
      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
d337 1
d340 1
d349 1
a379 1
      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
d381 1
d384 1
d411 1
a411 2
      assert(0);
      break;
@


