head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.04.26;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.15;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.51;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.51;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.45;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.53;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2005 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#ifndef INTEL_BUFFEROBJ_H
#define INTEL_BUFFEROBJ_H

#include "main/mtypes.h"

struct brw_context;
struct gl_buffer_object;


/**
 * Intel vertex/pixel buffer object, derived from Mesa's gl_buffer_object.
 */
struct intel_buffer_object
{
   struct gl_buffer_object Base;
   drm_intel_bo *buffer;     /* the low-level buffer manager's buffer handle */

   drm_intel_bo *range_map_bo[MAP_COUNT];

   /**
    * Alignment offset from the range_map_bo temporary mapping to the returned
    * obj->Pointer (caused by GL_ARB_map_buffer_alignment).
    */
   unsigned map_extra[MAP_COUNT];

   /** @@{
    * Tracking for what range of the BO may currently be in use by the GPU.
    *
    * Users often want to either glBufferSubData() or glMapBufferRange() a
    * buffer object where some subset of it is busy on the GPU, without either
    * stalling or doing an extra blit (since our blits are extra expensive,
    * given that we have to reupload most of the 3D state when switching
    * rings).  We wish they'd just use glMapBufferRange() with the
    * UNSYNC|INVALIDATE_RANGE flag or the INVALIDATE_BUFFER flag, but lots
    * don't.
    *
    * To work around apps, we track what range of the BO we might have used on
    * the GPU as vertex data, tranform feedback output, buffer textures, etc.,
    * and just do glBufferSubData() with an unsynchronized map when they're
    * outside of that range.
    *
    * If gpu_active_start > gpu_active_end, then the GPU is not currently
    * accessing the BO (and we can map it without synchronization).
    */
   uint32_t gpu_active_start;
   uint32_t gpu_active_end;

   /**
    * If we've avoided stalls/blits using the active tracking, flag the buffer
    * for (occasional) stalling in the future to avoid getting stuck in a
    * cycle of blitting on buffer wraparound.
    */
   bool prefer_stall_to_blit;
   /** @@} */
};


/* Get the bm buffer associated with a GL bufferobject:
 */
drm_intel_bo *intel_bufferobj_buffer(struct brw_context *brw,
                                     struct intel_buffer_object *obj,
                                     uint32_t offset,
                                     uint32_t size);

void intel_upload_data(struct brw_context *brw,
                       const void *data,
                       uint32_t size,
                       uint32_t alignment,
                       drm_intel_bo **out_bo,
                       uint32_t *out_offset);

void *intel_upload_space(struct brw_context *brw,
                         uint32_t size,
                         uint32_t alignment,
                         drm_intel_bo **out_bo,
                         uint32_t *out_offset);

void intel_upload_finish(struct brw_context *brw);

/* Hook the bufferobject implementation into mesa:
 */
void intelInitBufferObjectFuncs(struct dd_function_table *functions);

static inline struct intel_buffer_object *
intel_buffer_object(struct gl_buffer_object *obj)
{
   return (struct intel_buffer_object *) obj;
}

#endif
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d2 2
a3 2
 * 
 * Copyright 2005 Tungsten Graphics, Inc., Cedar Park, Texas.
d5 1
a5 1
 * 
d13 1
a13 1
 * 
d17 1
a17 1
 * 
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d25 1
a25 1
 * 
a43 1
   GLuint offset;            /* any offset into that buffer */
d45 37
a81 3
   drm_intel_bo *range_map_bo;
   void *range_map_buffer;
   unsigned int range_map_offset;
d88 3
a90 6
				     struct intel_buffer_object *obj,
				     GLuint flag);
drm_intel_bo *intel_bufferobj_source(struct brw_context *brw,
				     struct intel_buffer_object *obj,
				     GLuint align,
				     GLuint *offset);
d93 11
a103 10
		       const void *ptr, GLuint size, GLuint align,
		       drm_intel_bo **return_bo,
		       GLuint *return_offset);

void *intel_upload_map(struct brw_context *brw,
		       GLuint size, GLuint align);
void intel_upload_unmap(struct brw_context *brw,
			const void *ptr, GLuint size, GLuint align,
			drm_intel_bo **return_bo,
			GLuint *return_offset);
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d1 1
a1 1
 /**************************************************************************
d3 1
a3 1
 * Copyright 2006 Tungsten Graphics, Inc., Cedar Park, Texas.
d31 1
a31 1
#include "mtypes.h"
d33 1
a33 1
struct intel_context;
d40 2
a41 1
struct intel_buffer_object {
d43 6
a48 1
   struct buffer *buffer;   /* the low-level buffer manager's buffer handle */
d54 21
a74 1
struct buffer *intel_bufferobj_buffer( const struct intel_buffer_object *obj );
d76 1
a76 1
/* Hook the bufferobject implementation into mesa: 
d78 1
a78 1
void intel_bufferobj_init( struct intel_context *intel );
a79 7


/* Are the obj->Name tests necessary?  Unfortunately yes, mesa
 * allocates a couple of gl_buffer_object structs statically, and
 * the Name == 0 test is the only way to identify them and avoid
 * casting them erroneously to our structs.
 */
d81 1
a81 1
intel_buffer_object( struct gl_buffer_object *obj )
d83 1
a83 4
   if (obj->Name)
      return (struct intel_buffer_object *)obj;
   else
      return NULL;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d1 1
a1 1
/**************************************************************************
d3 1
a3 1
 * Copyright 2005 Tungsten Graphics, Inc., Cedar Park, Texas.
d31 1
a31 1
#include "main/mtypes.h"
d33 1
a33 1
struct brw_context;
d40 1
a40 2
struct intel_buffer_object
{
d42 1
a42 6
   drm_intel_bo *buffer;     /* the low-level buffer manager's buffer handle */
   GLuint offset;            /* any offset into that buffer */

   drm_intel_bo *range_map_bo;
   void *range_map_buffer;
   unsigned int range_map_offset;
d48 6
a53 19
drm_intel_bo *intel_bufferobj_buffer(struct brw_context *brw,
				     struct intel_buffer_object *obj,
				     GLuint flag);
drm_intel_bo *intel_bufferobj_source(struct brw_context *brw,
				     struct intel_buffer_object *obj,
				     GLuint align,
				     GLuint *offset);

void intel_upload_data(struct brw_context *brw,
		       const void *ptr, GLuint size, GLuint align,
		       drm_intel_bo **return_bo,
		       GLuint *return_offset);

void *intel_upload_map(struct brw_context *brw,
		       GLuint size, GLuint align);
void intel_upload_unmap(struct brw_context *brw,
			const void *ptr, GLuint size, GLuint align,
			drm_intel_bo **return_bo,
			GLuint *return_offset);
a54 1
void intel_upload_finish(struct brw_context *brw);
d56 4
a59 1
/* Hook the bufferobject implementation into mesa:
a60 2
void intelInitBufferObjectFuncs(struct dd_function_table *functions);

d62 1
a62 1
intel_buffer_object(struct gl_buffer_object *obj)
d64 4
a67 1
   return (struct intel_buffer_object *) obj;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d2 2
a3 2
 *
 * Copyright 2005 VMware, Inc.
d5 1
a5 1
 *
d13 1
a13 1
 *
d17 1
a17 1
 *
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d25 1
a25 1
 *
d44 1
d46 3
a48 37
   drm_intel_bo *range_map_bo[MAP_COUNT];

   /**
    * Alignment offset from the range_map_bo temporary mapping to the returned
    * obj->Pointer (caused by GL_ARB_map_buffer_alignment).
    */
   unsigned map_extra[MAP_COUNT];

   /** @@{
    * Tracking for what range of the BO may currently be in use by the GPU.
    *
    * Users often want to either glBufferSubData() or glMapBufferRange() a
    * buffer object where some subset of it is busy on the GPU, without either
    * stalling or doing an extra blit (since our blits are extra expensive,
    * given that we have to reupload most of the 3D state when switching
    * rings).  We wish they'd just use glMapBufferRange() with the
    * UNSYNC|INVALIDATE_RANGE flag or the INVALIDATE_BUFFER flag, but lots
    * don't.
    *
    * To work around apps, we track what range of the BO we might have used on
    * the GPU as vertex data, tranform feedback output, buffer textures, etc.,
    * and just do glBufferSubData() with an unsynchronized map when they're
    * outside of that range.
    *
    * If gpu_active_start > gpu_active_end, then the GPU is not currently
    * accessing the BO (and we can map it without synchronization).
    */
   uint32_t gpu_active_start;
   uint32_t gpu_active_end;

   /**
    * If we've avoided stalls/blits using the active tracking, flag the buffer
    * for (occasional) stalling in the future to avoid getting stuck in a
    * cycle of blitting on buffer wraparound.
    */
   bool prefer_stall_to_blit;
   /** @@} */
d55 6
a60 3
                                     struct intel_buffer_object *obj,
                                     uint32_t offset,
                                     uint32_t size);
d63 10
a72 11
                       const void *data,
                       uint32_t size,
                       uint32_t alignment,
                       drm_intel_bo **out_bo,
                       uint32_t *out_offset);

void *intel_upload_space(struct brw_context *brw,
                         uint32_t size,
                         uint32_t alignment,
                         drm_intel_bo **out_bo,
                         uint32_t *out_offset);
@


