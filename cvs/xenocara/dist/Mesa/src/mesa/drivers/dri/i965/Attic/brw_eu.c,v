head	1.11;
access;
symbols
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.10;
commitid	TnlogFl9nOv2eaRf;

1.10
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.9;
commitid	4ry2gvZGMXkCUD2n;

1.9
date	2015.01.25.14.41.20;	author jsg;	state Exp;
branches;
next	1.8;
commitid	mcxB0JvoI9gTDYXU;

1.8
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.04.17;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.42;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.42;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.30;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.49;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.11.34;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.48.41;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.11
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */


#include "brw_context.h"
#include "brw_defines.h"
#include "brw_eu.h"

#include "glsl/ralloc.h"

/**
 * Converts a BRW_REGISTER_TYPE_* enum to a short string (F, UD, and so on).
 *
 * This is different than reg_encoding from brw_disasm.c in that it operates
 * on the abstract enum values, rather than the generation-specific encoding.
 */
const char *
brw_reg_type_letters(unsigned type)
{
   const char *names[] = {
      [BRW_REGISTER_TYPE_UD] = "UD",
      [BRW_REGISTER_TYPE_D]  = "D",
      [BRW_REGISTER_TYPE_UW] = "UW",
      [BRW_REGISTER_TYPE_W]  = "W",
      [BRW_REGISTER_TYPE_F]  = "F",
      [BRW_REGISTER_TYPE_UB] = "UB",
      [BRW_REGISTER_TYPE_B]  = "B",
      [BRW_REGISTER_TYPE_UV] = "UV",
      [BRW_REGISTER_TYPE_V]  = "V",
      [BRW_REGISTER_TYPE_VF] = "VF",
      [BRW_REGISTER_TYPE_DF] = "DF",
      [BRW_REGISTER_TYPE_HF] = "HF",
      [BRW_REGISTER_TYPE_UQ] = "UQ",
      [BRW_REGISTER_TYPE_Q]  = "Q",
   };
   assert(type <= BRW_REGISTER_TYPE_UQ);
   return names[type];
}

/* Returns the corresponding conditional mod for swapping src0 and
 * src1 in e.g. CMP.
 */
uint32_t
brw_swap_cmod(uint32_t cmod)
{
   switch (cmod) {
   case BRW_CONDITIONAL_Z:
   case BRW_CONDITIONAL_NZ:
      return cmod;
   case BRW_CONDITIONAL_G:
      return BRW_CONDITIONAL_L;
   case BRW_CONDITIONAL_GE:
      return BRW_CONDITIONAL_LE;
   case BRW_CONDITIONAL_L:
      return BRW_CONDITIONAL_G;
   case BRW_CONDITIONAL_LE:
      return BRW_CONDITIONAL_GE;
   default:
      return ~0;
   }
}


/* How does predicate control work when execution_size != 8?  Do I
 * need to test/set for 0xffff when execution_size is 16?
 */
void brw_set_predicate_control_flag_value( struct brw_compile *p, unsigned value )
{
   p->current->header.predicate_control = BRW_PREDICATE_NONE;

   if (value != 0xff) {
      if (value != p->flag_value) {
	 brw_push_insn_state(p);
	 brw_MOV(p, brw_flag_reg(0, 0), brw_imm_uw(value));
	 p->flag_value = value;
	 brw_pop_insn_state(p);
      }

      p->current->header.predicate_control = BRW_PREDICATE_NORMAL;
   }
}

void brw_set_predicate_control( struct brw_compile *p, unsigned pc )
{
   p->current->header.predicate_control = pc;
}

void brw_set_predicate_inverse(struct brw_compile *p, bool predicate_inverse)
{
   p->current->header.predicate_inverse = predicate_inverse;
}

void brw_set_conditionalmod( struct brw_compile *p, unsigned conditional )
{
   p->current->header.destreg__conditionalmod = conditional;
}

void brw_set_flag_reg(struct brw_compile *p, int reg, int subreg)
{
   p->current->bits2.da1.flag_reg_nr = reg;
   p->current->bits2.da1.flag_subreg_nr = subreg;
}

void brw_set_access_mode( struct brw_compile *p, unsigned access_mode )
{
   p->current->header.access_mode = access_mode;
}

void
brw_set_compression_control(struct brw_compile *p,
			    enum brw_compression compression_control)
{
   p->compressed = (compression_control == BRW_COMPRESSION_COMPRESSED);

   if (p->brw->gen >= 6) {
      /* Since we don't use the SIMD32 support in gen6, we translate
       * the pre-gen6 compression control here.
       */
      switch (compression_control) {
      case BRW_COMPRESSION_NONE:
	 /* This is the "use the first set of bits of dmask/vmask/arf
	  * according to execsize" option.
	  */
	 p->current->header.compression_control = GEN6_COMPRESSION_1Q;
	 break;
      case BRW_COMPRESSION_2NDHALF:
	 /* For SIMD8, this is "use the second set of 8 bits." */
	 p->current->header.compression_control = GEN6_COMPRESSION_2Q;
	 break;
      case BRW_COMPRESSION_COMPRESSED:
	 /* For SIMD16 instruction compression, use the first set of 16 bits
	  * since we don't do SIMD32 dispatch.
	  */
	 p->current->header.compression_control = GEN6_COMPRESSION_1H;
	 break;
      default:
	 assert(!"not reached");
	 p->current->header.compression_control = GEN6_COMPRESSION_1H;
	 break;
      }
   } else {
      p->current->header.compression_control = compression_control;
   }
}

void brw_set_mask_control( struct brw_compile *p, unsigned value )
{
   p->current->header.mask_control = value;
}

void brw_set_saturate( struct brw_compile *p, bool enable )
{
   p->current->header.saturate = enable;
}

void brw_set_acc_write_control(struct brw_compile *p, unsigned value)
{
   if (p->brw->gen >= 6)
      p->current->header.acc_wr_control = value;
}

void brw_push_insn_state( struct brw_compile *p )
{
   assert(p->current != &p->stack[BRW_EU_MAX_INSN_STACK-1]);
   memcpy(p->current+1, p->current, sizeof(struct brw_instruction));
   p->compressed_stack[p->current - p->stack] = p->compressed;
   p->current++;
}

void brw_pop_insn_state( struct brw_compile *p )
{
   assert(p->current != p->stack);
   p->current--;
   p->compressed = p->compressed_stack[p->current - p->stack];
}


/***********************************************************************
 */
void
brw_init_compile(struct brw_context *brw, struct brw_compile *p, void *mem_ctx)
{
   memset(p, 0, sizeof(*p));

   p->brw = brw;
   /*
    * Set the initial instruction store array size to 1024, if found that
    * isn't enough, then it will double the store size at brw_next_insn()
    * until out of memory.
    */
   p->store_size = 1024;
   p->store = rzalloc_array(mem_ctx, struct brw_instruction, p->store_size);
   p->nr_insn = 0;
   p->current = p->stack;
   p->compressed = false;
   memset(p->current, 0, sizeof(p->current[0]));

   p->mem_ctx = mem_ctx;

   /* Some defaults?
    */
   brw_set_mask_control(p, BRW_MASK_ENABLE); /* what does this do? */
   brw_set_saturate(p, 0);
   brw_set_compression_control(p, BRW_COMPRESSION_NONE);
   brw_set_predicate_control_flag_value(p, 0xff);

   /* Set up control flow stack */
   p->if_stack_depth = 0;
   p->if_stack_array_size = 16;
   p->if_stack = rzalloc_array(mem_ctx, int, p->if_stack_array_size);

   p->loop_stack_depth = 0;
   p->loop_stack_array_size = 16;
   p->loop_stack = rzalloc_array(mem_ctx, int, p->loop_stack_array_size);
   p->if_depth_in_loop = rzalloc_array(mem_ctx, int, p->loop_stack_array_size);

   brw_init_compaction_tables(brw);
}


const unsigned *brw_get_program( struct brw_compile *p,
			       unsigned *sz )
{
   brw_compact_instructions(p);

   *sz = p->next_insn_offset;
   return (const unsigned *)p->store;
}

void
brw_dump_compile(struct brw_compile *p, FILE *out, int start, int end)
{
   struct brw_context *brw = p->brw;
   void *store = p->store;
   bool dump_hex = false;

   for (int offset = start; offset < end;) {
      struct brw_instruction *insn = store + offset;
      struct brw_instruction uncompacted;
      fprintf(out, "0x%08x: ", offset);

      if (insn->header.cmpt_control) {
	 struct brw_compact_instruction *compacted = (void *)insn;
	 if (dump_hex) {
	    fprintf(out, "0x%08x 0x%08x                       ",
		    ((uint32_t *)insn)[1],
		    ((uint32_t *)insn)[0]);
	 }

	 brw_uncompact_instruction(brw, &uncompacted, compacted);
	 insn = &uncompacted;
	 offset += 8;
      } else {
	 if (dump_hex) {
	    fprintf(out, "0x%08x 0x%08x 0x%08x 0x%08x ",
		    ((uint32_t *)insn)[3],
		    ((uint32_t *)insn)[2],
		    ((uint32_t *)insn)[1],
		    ((uint32_t *)insn)[0]);
	 }
	 offset += 16;
      }

      brw_disasm(out, insn, p->brw->gen);
   }
}
@


1.10
log
@Merge Mesa 10.2.9
@
text
@@


1.9
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d37 1
a37 1
#include "util/ralloc.h"
d71 1
a71 1
enum brw_conditional_mod
d87 1
a87 1
      return BRW_CONDITIONAL_NONE;
d91 21
a111 1
void brw_set_default_predicate_control( struct brw_compile *p, unsigned pc )
d113 1
a113 1
   brw_inst_set_pred_control(p->brw, p->current, pc);
d116 1
a116 1
void brw_set_default_predicate_inverse(struct brw_compile *p, bool predicate_inverse)
d118 1
a118 1
   brw_inst_set_pred_inv(p->brw, p->current, predicate_inverse);
d121 1
a121 1
void brw_set_default_flag_reg(struct brw_compile *p, int reg, int subreg)
d123 2
a124 2
   if (p->brw->gen >= 7)
      brw_inst_set_flag_reg_nr(p->brw, p->current, reg);
d126 4
a129 1
   brw_inst_set_flag_subreg_nr(p->brw, p->current, subreg);
d132 1
a132 1
void brw_set_default_access_mode( struct brw_compile *p, unsigned access_mode )
d134 1
a134 1
   brw_inst_set_access_mode(p->brw, p->current, access_mode);
d138 1
a138 1
brw_set_default_compression_control(struct brw_compile *p,
a140 2
   struct brw_context *brw = p->brw;

d143 1
a143 1
   if (brw->gen >= 6) {
d152 1
a152 1
         brw_inst_set_qtr_control(brw, p->current, GEN6_COMPRESSION_1Q);
d156 1
a156 1
         brw_inst_set_qtr_control(brw, p->current, GEN6_COMPRESSION_2Q);
d162 1
a162 1
         brw_inst_set_qtr_control(brw, p->current, GEN6_COMPRESSION_1H);
d165 3
a167 1
         unreachable("not reached");
d170 1
a170 1
      brw_inst_set_qtr_control(brw, p->current, compression_control);
d174 1
a174 1
void brw_set_default_mask_control( struct brw_compile *p, unsigned value )
d176 1
a176 1
   brw_inst_set_mask_control(p->brw, p->current, value);
d179 1
a179 1
void brw_set_default_saturate( struct brw_compile *p, bool enable )
d181 1
a181 1
   brw_inst_set_saturate(p->brw, p->current, enable);
d184 1
a184 1
void brw_set_default_acc_write_control(struct brw_compile *p, unsigned value)
d186 2
a187 4
   struct brw_context *brw = p->brw;

   if (brw->gen >= 6)
      brw_inst_set_acc_wr_control(p->brw, p->current, value);
d193 1
a193 1
   memcpy(p->current + 1, p->current, sizeof(brw_inst));
d220 1
a220 1
   p->store = rzalloc_array(mem_ctx, brw_inst, p->store_size);
d230 4
a233 3
   brw_set_default_mask_control(p, BRW_MASK_ENABLE); /* what does this do? */
   brw_set_default_saturate(p, 0);
   brw_set_default_compression_control(p, BRW_COMPRESSION_NONE);
d252 2
d259 1
a259 2
brw_disassemble(struct brw_context *brw,
                void *assembly, int start, int end, FILE *out)
d261 2
d266 3
a268 5
      brw_inst *insn = assembly + offset;
      brw_inst uncompacted;
      bool compacted = brw_inst_cmpt_control(brw, insn);
      if (0)
         fprintf(out, "0x%08x: ", offset);
d270 2
a271 2
      if (compacted) {
         brw_compact_inst *compacted = (void *)insn;
d292 1
a292 1
      brw_disassemble_inst(out, brw, insn, compacted);
@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d37 1
a37 1
#include "glsl/ralloc.h"
d71 1
a71 1
uint32_t
d87 1
a87 1
      return ~0;
d91 1
a91 21

/* How does predicate control work when execution_size != 8?  Do I
 * need to test/set for 0xffff when execution_size is 16?
 */
void brw_set_predicate_control_flag_value( struct brw_compile *p, unsigned value )
{
   p->current->header.predicate_control = BRW_PREDICATE_NONE;

   if (value != 0xff) {
      if (value != p->flag_value) {
	 brw_push_insn_state(p);
	 brw_MOV(p, brw_flag_reg(0, 0), brw_imm_uw(value));
	 p->flag_value = value;
	 brw_pop_insn_state(p);
      }

      p->current->header.predicate_control = BRW_PREDICATE_NORMAL;
   }
}

void brw_set_predicate_control( struct brw_compile *p, unsigned pc )
d93 1
a93 1
   p->current->header.predicate_control = pc;
d96 1
a96 1
void brw_set_predicate_inverse(struct brw_compile *p, bool predicate_inverse)
d98 1
a98 1
   p->current->header.predicate_inverse = predicate_inverse;
d101 1
a101 1
void brw_set_conditionalmod( struct brw_compile *p, unsigned conditional )
d103 2
a104 2
   p->current->header.destreg__conditionalmod = conditional;
}
d106 1
a106 4
void brw_set_flag_reg(struct brw_compile *p, int reg, int subreg)
{
   p->current->bits2.da1.flag_reg_nr = reg;
   p->current->bits2.da1.flag_subreg_nr = subreg;
d109 1
a109 1
void brw_set_access_mode( struct brw_compile *p, unsigned access_mode )
d111 1
a111 1
   p->current->header.access_mode = access_mode;
d115 1
a115 1
brw_set_compression_control(struct brw_compile *p,
d118 2
d122 1
a122 1
   if (p->brw->gen >= 6) {
d131 1
a131 1
	 p->current->header.compression_control = GEN6_COMPRESSION_1Q;
d135 1
a135 1
	 p->current->header.compression_control = GEN6_COMPRESSION_2Q;
d141 1
a141 1
	 p->current->header.compression_control = GEN6_COMPRESSION_1H;
d144 1
a144 3
	 assert(!"not reached");
	 p->current->header.compression_control = GEN6_COMPRESSION_1H;
	 break;
d147 1
a147 1
      p->current->header.compression_control = compression_control;
d151 1
a151 1
void brw_set_mask_control( struct brw_compile *p, unsigned value )
d153 1
a153 1
   p->current->header.mask_control = value;
d156 1
a156 1
void brw_set_saturate( struct brw_compile *p, bool enable )
d158 1
a158 1
   p->current->header.saturate = enable;
d161 1
a161 1
void brw_set_acc_write_control(struct brw_compile *p, unsigned value)
d163 4
a166 2
   if (p->brw->gen >= 6)
      p->current->header.acc_wr_control = value;
d172 1
a172 1
   memcpy(p->current+1, p->current, sizeof(struct brw_instruction));
d199 1
a199 1
   p->store = rzalloc_array(mem_ctx, struct brw_instruction, p->store_size);
d209 3
a211 4
   brw_set_mask_control(p, BRW_MASK_ENABLE); /* what does this do? */
   brw_set_saturate(p, 0);
   brw_set_compression_control(p, BRW_COMPRESSION_NONE);
   brw_set_predicate_control_flag_value(p, 0xff);
a229 2
   brw_compact_instructions(p);

d235 2
a236 1
brw_dump_compile(struct brw_compile *p, FILE *out, int start, int end)
a237 2
   struct brw_context *brw = p->brw;
   void *store = p->store;
d241 5
a245 3
      struct brw_instruction *insn = store + offset;
      struct brw_instruction uncompacted;
      fprintf(out, "0x%08x: ", offset);
d247 2
a248 2
      if (insn->header.cmpt_control) {
	 struct brw_compact_instruction *compacted = (void *)insn;
d269 1
a269 1
      brw_disasm(out, insn, p->brw->gen);
@


1.7
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d31 1
a31 1
  
d39 29
d95 1
a95 1
void brw_set_predicate_control_flag_value( struct brw_compile *p, GLuint value )
d108 1
a108 1
   }   
d111 1
a111 1
void brw_set_predicate_control( struct brw_compile *p, GLuint pc )
d121 1
a121 1
void brw_set_conditionalmod( struct brw_compile *p, GLuint conditional )
d132 1
a132 1
void brw_set_access_mode( struct brw_compile *p, GLuint access_mode )
d144 1
a144 1
      /* Since we don't use the 32-wide support in gen6, we translate
d155 1
a155 1
	 /* For 8-wide, this is "use the second set of 8 bits." */
d159 2
a160 2
	 /* For 16-wide instruction compression, use the first set of 16 bits
	  * since we don't do 32-wide dispatch.
d174 1
a174 1
void brw_set_mask_control( struct brw_compile *p, GLuint value )
d184 1
a184 1
void brw_set_acc_write_control(struct brw_compile *p, GLuint value)
d195 1
a195 1
   p->current++;   
d233 1
a233 1
   brw_set_predicate_control_flag_value(p, 0xff); 
d249 2
a250 2
const GLuint *brw_get_program( struct brw_compile *p,
			       GLuint *sz )
d255 1
a255 1
   return (const GLuint *)p->store;
d268 1
a268 1
      printf("0x%08x: ", offset);
d273 3
a275 3
	    printf("0x%08x 0x%08x                       ",
		   ((uint32_t *)insn)[1],
		   ((uint32_t *)insn)[0]);
d283 5
a287 5
	    printf("0x%08x 0x%08x 0x%08x 0x%08x ",
		   ((uint32_t *)insn)[3],
		   ((uint32_t *)insn)[2],
		   ((uint32_t *)insn)[1],
		   ((uint32_t *)insn)[0]);
d292 1
a292 1
      brw_disasm(stdout, insn, p->brw->gen);
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d37 1
a37 1
#include "../glsl/ralloc.h"
d50 2
a52 2
   case BRW_CONDITIONAL_GE:
      return BRW_CONDITIONAL_L;
d54 2
a56 2
   case BRW_CONDITIONAL_LE:
      return BRW_CONDITIONAL_G;
d73 1
a73 1
	 brw_MOV(p, brw_flag_reg(), brw_imm_uw(value));
d97 6
d108 3
a110 1
void brw_set_compression_control( struct brw_compile *p, GLboolean compression_control )
d114 1
a114 1
   if (p->brw->intel.gen >= 6) {
d150 1
a150 1
void brw_set_saturate( struct brw_compile *p, GLuint value )
d152 1
a152 1
   p->current->header.saturate = value;
d157 1
a157 1
   if (p->brw->intel.gen >= 6)
d182 2
d185 7
d209 8
a216 2
   p->if_stack =
      rzalloc_array(mem_ctx, struct brw_instruction *, p->if_stack_array_size);
d223 1
a223 1
   GLuint i;
d225 1
a225 4
   for (i = 0; i < 8; i++)
      brw_NOP(p);

   *sz = p->nr_insn * sizeof(struct brw_instruction);
a228 56


/**
 * Subroutine calls require special attention.
 * Mesa instructions may be expanded into multiple hardware instructions
 * so the prog_instruction::BranchTarget field can't be used as an index
 * into the hardware instructions.
 *
 * The BranchTarget field isn't needed, however.  Mesa's GLSL compiler
 * emits CAL and BGNSUB instructions with labels that can be used to map
 * subroutine calls to actual subroutine code blocks.
 *
 * The structures and function here implement patching of CAL instructions
 * so they jump to the right subroutine code...
 */


/**
 * For each OPCODE_BGNSUB we create one of these.
 */
struct brw_glsl_label
{
   const char *name; /**< the label string */
   GLuint position;  /**< the position of the brw instruction for this label */
   struct brw_glsl_label *next;  /**< next in linked list */
};


/**
 * For each OPCODE_CAL we create one of these.
 */
struct brw_glsl_call
{
   GLuint call_inst_pos;  /**< location of the CAL instruction */
   const char *sub_name;  /**< name of subroutine to call */
   struct brw_glsl_call *next;  /**< next in linked list */
};


/**
 * Called for each OPCODE_BGNSUB.
 */
void
brw_save_label(struct brw_compile *c, const char *name, GLuint position)
{
   struct brw_glsl_label *label = CALLOC_STRUCT(brw_glsl_label);
   label->name = name;
   label->position = position;
   label->next = c->first_label;
   c->first_label = label;
}


/**
 * Called for each OPCODE_CAL.
 */
d230 1
a230 1
brw_save_call(struct brw_compile *c, const char *name, GLuint call_pos)
d232 30
a261 7
   struct brw_glsl_call *call = CALLOC_STRUCT(brw_glsl_call);
   call->call_inst_pos = call_pos;
   call->sub_name = name;
   call->next = c->first_call;
   c->first_call = call;
}

d263 1
a263 11
/**
 * Lookup a label, return label's position/offset.
 */
static GLuint
brw_lookup_label(struct brw_compile *c, const char *name)
{
   const struct brw_glsl_label *label;
   for (label = c->first_label; label; label = label->next) {
      if (strcmp(name, label->name) == 0) {
         return label->position;
      }
a264 43
   abort();  /* should never happen */
   return ~0;
}


/**
 * When we're done generating code, this function is called to resolve
 * subroutine calls.
 */
void
brw_resolve_cals(struct brw_compile *c)
{
    const struct brw_glsl_call *call;

    for (call = c->first_call; call; call = call->next) {
        const GLuint sub_loc = brw_lookup_label(c, call->sub_name);
	struct brw_instruction *brw_call_inst = &c->store[call->call_inst_pos];
	struct brw_instruction *brw_sub_inst = &c->store[sub_loc];
	GLint offset = brw_sub_inst - brw_call_inst;

	/* patch brw_inst1 to point to brw_inst2 */
	brw_set_src1(c, brw_call_inst, brw_imm_d(offset * 16));
    }

    /* free linked list of calls */
    {
        struct brw_glsl_call *call, *next;
        for (call = c->first_call; call; call = next) {
	    next = call->next;
	    free(call);
	}
	c->first_call = NULL;
    }

    /* free linked list of labels */
    {
        struct brw_glsl_label *label, *next;
	for (label = c->first_label; label; label = next) {
	    next = label->next;
	    free(label);
	}
	c->first_label = NULL;
    }
@


1.5
log
@Merge Mesa 7.10.3
@
text
@d37 24
d87 5
d171 2
a172 1
void brw_init_compile( struct brw_context *brw, struct brw_compile *p )
d180 2
d188 6
d309 1
a309 1
	brw_set_src1(brw_call_inst, brw_imm_d(offset * 16));
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d75 31
a105 1
   p->current->header.compression_control = compression_control;
d118 6
d128 1
d136 1
d147 1
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d65 1
a65 1
   p->current->header.destreg__conditonalmod = conditional;
d240 1
a240 1
	    _mesa_free(call);
d250 1
a250 1
	    _mesa_free(label);
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d132 123
@


1.1
log
@Initial revision
@
text
@d104 1
a104 1
void brw_init_compile( struct brw_compile *p )
d106 1
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d65 1
a65 1
   p->current->header.destreg__conditionalmod = conditional;
d75 1
a75 31
   p->compressed = (compression_control == BRW_COMPRESSION_COMPRESSED);

   if (p->brw->intel.gen >= 6) {
      /* Since we don't use the 32-wide support in gen6, we translate
       * the pre-gen6 compression control here.
       */
      switch (compression_control) {
      case BRW_COMPRESSION_NONE:
	 /* This is the "use the first set of bits of dmask/vmask/arf
	  * according to execsize" option.
	  */
	 p->current->header.compression_control = GEN6_COMPRESSION_1Q;
	 break;
      case BRW_COMPRESSION_2NDHALF:
	 /* For 8-wide, this is "use the second set of 8 bits." */
	 p->current->header.compression_control = GEN6_COMPRESSION_2Q;
	 break;
      case BRW_COMPRESSION_COMPRESSED:
	 /* For 16-wide instruction compression, use the first set of 16 bits
	  * since we don't do 32-wide dispatch.
	  */
	 p->current->header.compression_control = GEN6_COMPRESSION_1H;
	 break;
      default:
	 assert(!"not reached");
	 p->current->header.compression_control = GEN6_COMPRESSION_1H;
	 break;
      }
   } else {
      p->current->header.compression_control = compression_control;
   }
a87 6
void brw_set_acc_write_control(struct brw_compile *p, GLuint value)
{
   if (p->brw->intel.gen >= 6)
      p->current->header.acc_wr_control = value;
}

a91 1
   p->compressed_stack[p->current - p->stack] = p->compressed;
a98 1
   p->compressed = p->compressed_stack[p->current - p->stack];
d104 1
a104 1
void brw_init_compile( struct brw_context *brw, struct brw_compile *p )
a105 1
   p->brw = brw;
a107 1
   p->compressed = false;
a130 123


/**
 * Subroutine calls require special attention.
 * Mesa instructions may be expanded into multiple hardware instructions
 * so the prog_instruction::BranchTarget field can't be used as an index
 * into the hardware instructions.
 *
 * The BranchTarget field isn't needed, however.  Mesa's GLSL compiler
 * emits CAL and BGNSUB instructions with labels that can be used to map
 * subroutine calls to actual subroutine code blocks.
 *
 * The structures and function here implement patching of CAL instructions
 * so they jump to the right subroutine code...
 */


/**
 * For each OPCODE_BGNSUB we create one of these.
 */
struct brw_glsl_label
{
   const char *name; /**< the label string */
   GLuint position;  /**< the position of the brw instruction for this label */
   struct brw_glsl_label *next;  /**< next in linked list */
};


/**
 * For each OPCODE_CAL we create one of these.
 */
struct brw_glsl_call
{
   GLuint call_inst_pos;  /**< location of the CAL instruction */
   const char *sub_name;  /**< name of subroutine to call */
   struct brw_glsl_call *next;  /**< next in linked list */
};


/**
 * Called for each OPCODE_BGNSUB.
 */
void
brw_save_label(struct brw_compile *c, const char *name, GLuint position)
{
   struct brw_glsl_label *label = CALLOC_STRUCT(brw_glsl_label);
   label->name = name;
   label->position = position;
   label->next = c->first_label;
   c->first_label = label;
}


/**
 * Called for each OPCODE_CAL.
 */
void
brw_save_call(struct brw_compile *c, const char *name, GLuint call_pos)
{
   struct brw_glsl_call *call = CALLOC_STRUCT(brw_glsl_call);
   call->call_inst_pos = call_pos;
   call->sub_name = name;
   call->next = c->first_call;
   c->first_call = call;
}


/**
 * Lookup a label, return label's position/offset.
 */
static GLuint
brw_lookup_label(struct brw_compile *c, const char *name)
{
   const struct brw_glsl_label *label;
   for (label = c->first_label; label; label = label->next) {
      if (strcmp(name, label->name) == 0) {
         return label->position;
      }
   }
   abort();  /* should never happen */
   return ~0;
}


/**
 * When we're done generating code, this function is called to resolve
 * subroutine calls.
 */
void
brw_resolve_cals(struct brw_compile *c)
{
    const struct brw_glsl_call *call;

    for (call = c->first_call; call; call = call->next) {
        const GLuint sub_loc = brw_lookup_label(c, call->sub_name);
	struct brw_instruction *brw_call_inst = &c->store[call->call_inst_pos];
	struct brw_instruction *brw_sub_inst = &c->store[sub_loc];
	GLint offset = brw_sub_inst - brw_call_inst;

	/* patch brw_inst1 to point to brw_inst2 */
	brw_set_src1(brw_call_inst, brw_imm_d(offset * 16));
    }

    /* free linked list of calls */
    {
        struct brw_glsl_call *call, *next;
        for (call = c->first_call; call; call = next) {
	    next = call->next;
	    free(call);
	}
	c->first_call = NULL;
    }

    /* free linked list of labels */
    {
        struct brw_glsl_label *label, *next;
	for (label = c->first_label; label; label = next) {
	    next = label->next;
	    free(label);
	}
	c->first_label = NULL;
    }
}
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@a36 24
#include "glsl/ralloc.h"

/* Returns the corresponding conditional mod for swapping src0 and
 * src1 in e.g. CMP.
 */
uint32_t
brw_swap_cmod(uint32_t cmod)
{
   switch (cmod) {
   case BRW_CONDITIONAL_Z:
   case BRW_CONDITIONAL_NZ:
      return cmod;
   case BRW_CONDITIONAL_G:
      return BRW_CONDITIONAL_L;
   case BRW_CONDITIONAL_GE:
      return BRW_CONDITIONAL_LE;
   case BRW_CONDITIONAL_L:
      return BRW_CONDITIONAL_G;
   case BRW_CONDITIONAL_LE:
      return BRW_CONDITIONAL_GE;
   default:
      return ~0;
   }
}
d49 1
a49 1
	 brw_MOV(p, brw_flag_reg(0, 0), brw_imm_uw(value));
a62 5
void brw_set_predicate_inverse(struct brw_compile *p, bool predicate_inverse)
{
   p->current->header.predicate_inverse = predicate_inverse;
}

a67 6
void brw_set_flag_reg(struct brw_compile *p, int reg, int subreg)
{
   p->current->bits2.da1.flag_reg_nr = reg;
   p->current->bits2.da1.flag_subreg_nr = subreg;
}

d73 1
a73 3
void
brw_set_compression_control(struct brw_compile *p,
			    enum brw_compression compression_control)
d77 1
a77 1
   if (p->brw->gen >= 6) {
d113 1
a113 1
void brw_set_saturate( struct brw_compile *p, bool enable )
d115 1
a115 1
   p->current->header.saturate = enable;
d120 1
a120 1
   if (p->brw->gen >= 6)
d142 1
a142 2
void
brw_init_compile(struct brw_context *brw, struct brw_compile *p, void *mem_ctx)
a143 2
   memset(p, 0, sizeof(*p));

a144 7
   /*
    * Set the initial instruction store array size to 1024, if found that
    * isn't enough, then it will double the store size at brw_next_insn()
    * until out of memory.
    */
   p->store_size = 1024;
   p->store = rzalloc_array(mem_ctx, struct brw_instruction, p->store_size);
a149 2
   p->mem_ctx = mem_ctx;

a155 12

   /* Set up control flow stack */
   p->if_stack_depth = 0;
   p->if_stack_array_size = 16;
   p->if_stack = rzalloc_array(mem_ctx, int, p->if_stack_array_size);

   p->loop_stack_depth = 0;
   p->loop_stack_array_size = 16;
   p->loop_stack = rzalloc_array(mem_ctx, int, p->loop_stack_array_size);
   p->if_depth_in_loop = rzalloc_array(mem_ctx, int, p->loop_stack_array_size);

   brw_init_compaction_tables(brw);
d162 4
a165 1
   brw_compact_instructions(p);
d167 1
a167 1
   *sz = p->next_insn_offset;
d171 56
d228 1
a228 1
brw_dump_compile(struct brw_compile *p, FILE *out, int start, int end)
d230 18
a247 29
   struct brw_context *brw = p->brw;
   void *store = p->store;
   bool dump_hex = false;

   for (int offset = start; offset < end;) {
      struct brw_instruction *insn = store + offset;
      struct brw_instruction uncompacted;
      printf("0x%08x: ", offset);

      if (insn->header.cmpt_control) {
	 struct brw_compact_instruction *compacted = (void *)insn;
	 if (dump_hex) {
	    printf("0x%08x 0x%08x                       ",
		   ((uint32_t *)insn)[1],
		   ((uint32_t *)insn)[0]);
	 }

	 brw_uncompact_instruction(brw, &uncompacted, compacted);
	 insn = &uncompacted;
	 offset += 8;
      } else {
	 if (dump_hex) {
	    printf("0x%08x 0x%08x 0x%08x 0x%08x ",
		   ((uint32_t *)insn)[3],
		   ((uint32_t *)insn)[2],
		   ((uint32_t *)insn)[1],
		   ((uint32_t *)insn)[0]);
	 }
	 offset += 16;
d249 4
d254 39
a292 2
      brw_disasm(stdout, insn, p->brw->gen);
   }
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d31 1
a31 1

a38 29
/**
 * Converts a BRW_REGISTER_TYPE_* enum to a short string (F, UD, and so on).
 *
 * This is different than reg_encoding from brw_disasm.c in that it operates
 * on the abstract enum values, rather than the generation-specific encoding.
 */
const char *
brw_reg_type_letters(unsigned type)
{
   const char *names[] = {
      [BRW_REGISTER_TYPE_UD] = "UD",
      [BRW_REGISTER_TYPE_D]  = "D",
      [BRW_REGISTER_TYPE_UW] = "UW",
      [BRW_REGISTER_TYPE_W]  = "W",
      [BRW_REGISTER_TYPE_F]  = "F",
      [BRW_REGISTER_TYPE_UB] = "UB",
      [BRW_REGISTER_TYPE_B]  = "B",
      [BRW_REGISTER_TYPE_UV] = "UV",
      [BRW_REGISTER_TYPE_V]  = "V",
      [BRW_REGISTER_TYPE_VF] = "VF",
      [BRW_REGISTER_TYPE_DF] = "DF",
      [BRW_REGISTER_TYPE_HF] = "HF",
      [BRW_REGISTER_TYPE_UQ] = "UQ",
      [BRW_REGISTER_TYPE_Q]  = "Q",
   };
   assert(type <= BRW_REGISTER_TYPE_UQ);
   return names[type];
}

d66 1
a66 1
void brw_set_predicate_control_flag_value( struct brw_compile *p, unsigned value )
d79 1
a79 1
   }
d82 1
a82 1
void brw_set_predicate_control( struct brw_compile *p, unsigned pc )
d92 1
a92 1
void brw_set_conditionalmod( struct brw_compile *p, unsigned conditional )
d103 1
a103 1
void brw_set_access_mode( struct brw_compile *p, unsigned access_mode )
d115 1
a115 1
      /* Since we don't use the SIMD32 support in gen6, we translate
d126 1
a126 1
	 /* For SIMD8, this is "use the second set of 8 bits." */
d130 2
a131 2
	 /* For SIMD16 instruction compression, use the first set of 16 bits
	  * since we don't do SIMD32 dispatch.
d145 1
a145 1
void brw_set_mask_control( struct brw_compile *p, unsigned value )
d155 1
a155 1
void brw_set_acc_write_control(struct brw_compile *p, unsigned value)
d166 1
a166 1
   p->current++;
d204 1
a204 1
   brw_set_predicate_control_flag_value(p, 0xff);
d220 2
a221 2
const unsigned *brw_get_program( struct brw_compile *p,
			       unsigned *sz )
d226 1
a226 1
   return (const unsigned *)p->store;
d239 1
a239 1
      fprintf(out, "0x%08x: ", offset);
d244 3
a246 3
	    fprintf(out, "0x%08x 0x%08x                       ",
		    ((uint32_t *)insn)[1],
		    ((uint32_t *)insn)[0]);
d254 5
a258 5
	    fprintf(out, "0x%08x 0x%08x 0x%08x 0x%08x ",
		    ((uint32_t *)insn)[3],
		    ((uint32_t *)insn)[2],
		    ((uint32_t *)insn)[1],
		    ((uint32_t *)insn)[0]);
d263 1
a263 1
      brw_disasm(out, insn, p->brw->gen);
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d37 1
a37 1
#include "util/ralloc.h"
d71 1
a71 1
enum brw_conditional_mod
d87 1
a87 1
      return BRW_CONDITIONAL_NONE;
d91 21
a111 1
void brw_set_default_predicate_control( struct brw_compile *p, unsigned pc )
d113 1
a113 1
   brw_inst_set_pred_control(p->brw, p->current, pc);
d116 1
a116 1
void brw_set_default_predicate_inverse(struct brw_compile *p, bool predicate_inverse)
d118 1
a118 1
   brw_inst_set_pred_inv(p->brw, p->current, predicate_inverse);
d121 1
a121 1
void brw_set_default_flag_reg(struct brw_compile *p, int reg, int subreg)
d123 2
a124 2
   if (p->brw->gen >= 7)
      brw_inst_set_flag_reg_nr(p->brw, p->current, reg);
d126 4
a129 1
   brw_inst_set_flag_subreg_nr(p->brw, p->current, subreg);
d132 1
a132 1
void brw_set_default_access_mode( struct brw_compile *p, unsigned access_mode )
d134 1
a134 1
   brw_inst_set_access_mode(p->brw, p->current, access_mode);
d138 1
a138 1
brw_set_default_compression_control(struct brw_compile *p,
a140 2
   struct brw_context *brw = p->brw;

d143 1
a143 1
   if (brw->gen >= 6) {
d152 1
a152 1
         brw_inst_set_qtr_control(brw, p->current, GEN6_COMPRESSION_1Q);
d156 1
a156 1
         brw_inst_set_qtr_control(brw, p->current, GEN6_COMPRESSION_2Q);
d162 1
a162 1
         brw_inst_set_qtr_control(brw, p->current, GEN6_COMPRESSION_1H);
d165 3
a167 1
         unreachable("not reached");
d170 1
a170 1
      brw_inst_set_qtr_control(brw, p->current, compression_control);
d174 1
a174 1
void brw_set_default_mask_control( struct brw_compile *p, unsigned value )
d176 1
a176 1
   brw_inst_set_mask_control(p->brw, p->current, value);
d179 1
a179 1
void brw_set_default_saturate( struct brw_compile *p, bool enable )
d181 1
a181 1
   brw_inst_set_saturate(p->brw, p->current, enable);
d184 1
a184 1
void brw_set_default_acc_write_control(struct brw_compile *p, unsigned value)
d186 2
a187 4
   struct brw_context *brw = p->brw;

   if (brw->gen >= 6)
      brw_inst_set_acc_wr_control(p->brw, p->current, value);
d193 1
a193 1
   memcpy(p->current + 1, p->current, sizeof(brw_inst));
d220 1
a220 1
   p->store = rzalloc_array(mem_ctx, brw_inst, p->store_size);
d230 4
a233 3
   brw_set_default_mask_control(p, BRW_MASK_ENABLE); /* what does this do? */
   brw_set_default_saturate(p, 0);
   brw_set_default_compression_control(p, BRW_COMPRESSION_NONE);
d252 2
d259 1
a259 2
brw_disassemble(struct brw_context *brw,
                void *assembly, int start, int end, FILE *out)
d261 2
d266 3
a268 5
      brw_inst *insn = assembly + offset;
      brw_inst uncompacted;
      bool compacted = brw_inst_cmpt_control(brw, insn);
      if (0)
         fprintf(out, "0x%08x: ", offset);
d270 2
a271 2
      if (compacted) {
         brw_compact_inst *compacted = (void *)insn;
d292 1
a292 1
      brw_disassemble_inst(out, brw, insn, compacted);
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d37 1
a37 1
#include "glsl/ralloc.h"
d71 1
a71 1
uint32_t
d87 1
a87 1
      return ~0;
d91 1
a91 21

/* How does predicate control work when execution_size != 8?  Do I
 * need to test/set for 0xffff when execution_size is 16?
 */
void brw_set_predicate_control_flag_value( struct brw_compile *p, unsigned value )
{
   p->current->header.predicate_control = BRW_PREDICATE_NONE;

   if (value != 0xff) {
      if (value != p->flag_value) {
	 brw_push_insn_state(p);
	 brw_MOV(p, brw_flag_reg(0, 0), brw_imm_uw(value));
	 p->flag_value = value;
	 brw_pop_insn_state(p);
      }

      p->current->header.predicate_control = BRW_PREDICATE_NORMAL;
   }
}

void brw_set_predicate_control( struct brw_compile *p, unsigned pc )
d93 1
a93 1
   p->current->header.predicate_control = pc;
d96 1
a96 1
void brw_set_predicate_inverse(struct brw_compile *p, bool predicate_inverse)
d98 1
a98 1
   p->current->header.predicate_inverse = predicate_inverse;
d101 1
a101 1
void brw_set_conditionalmod( struct brw_compile *p, unsigned conditional )
d103 2
a104 2
   p->current->header.destreg__conditionalmod = conditional;
}
d106 1
a106 4
void brw_set_flag_reg(struct brw_compile *p, int reg, int subreg)
{
   p->current->bits2.da1.flag_reg_nr = reg;
   p->current->bits2.da1.flag_subreg_nr = subreg;
d109 1
a109 1
void brw_set_access_mode( struct brw_compile *p, unsigned access_mode )
d111 1
a111 1
   p->current->header.access_mode = access_mode;
d115 1
a115 1
brw_set_compression_control(struct brw_compile *p,
d118 2
d122 1
a122 1
   if (p->brw->gen >= 6) {
d131 1
a131 1
	 p->current->header.compression_control = GEN6_COMPRESSION_1Q;
d135 1
a135 1
	 p->current->header.compression_control = GEN6_COMPRESSION_2Q;
d141 1
a141 1
	 p->current->header.compression_control = GEN6_COMPRESSION_1H;
d144 1
a144 3
	 assert(!"not reached");
	 p->current->header.compression_control = GEN6_COMPRESSION_1H;
	 break;
d147 1
a147 1
      p->current->header.compression_control = compression_control;
d151 1
a151 1
void brw_set_mask_control( struct brw_compile *p, unsigned value )
d153 1
a153 1
   p->current->header.mask_control = value;
d156 1
a156 1
void brw_set_saturate( struct brw_compile *p, bool enable )
d158 1
a158 1
   p->current->header.saturate = enable;
d161 1
a161 1
void brw_set_acc_write_control(struct brw_compile *p, unsigned value)
d163 4
a166 2
   if (p->brw->gen >= 6)
      p->current->header.acc_wr_control = value;
d172 1
a172 1
   memcpy(p->current+1, p->current, sizeof(struct brw_instruction));
d199 1
a199 1
   p->store = rzalloc_array(mem_ctx, struct brw_instruction, p->store_size);
d209 3
a211 4
   brw_set_mask_control(p, BRW_MASK_ENABLE); /* what does this do? */
   brw_set_saturate(p, 0);
   brw_set_compression_control(p, BRW_COMPRESSION_NONE);
   brw_set_predicate_control_flag_value(p, 0xff);
a229 2
   brw_compact_instructions(p);

d235 2
a236 1
brw_dump_compile(struct brw_compile *p, FILE *out, int start, int end)
a237 2
   struct brw_context *brw = p->brw;
   void *store = p->store;
d241 5
a245 3
      struct brw_instruction *insn = store + offset;
      struct brw_instruction uncompacted;
      fprintf(out, "0x%08x: ", offset);
d247 2
a248 2
      if (insn->header.cmpt_control) {
	 struct brw_compact_instruction *compacted = (void *)insn;
d269 1
a269 1
      brw_disasm(out, insn, p->brw->gen);
@


