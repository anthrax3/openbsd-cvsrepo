head	1.10;
access;
symbols
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.9;
commitid	TnlogFl9nOv2eaRf;

1.9
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.8;
commitid	4ry2gvZGMXkCUD2n;

1.8
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.7;
commitid	mcxB0JvoI9gTDYXU;

1.7
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	WPD6rgPryPkvXOr9;

1.6
date	2013.09.05.14.04.49;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.20;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.16;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2007.11.24.17.28.56;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.28.56;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.50;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.54;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.11.59;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.49.05;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.10
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009-2010 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include <stdbool.h>
#include "nouveau_driver.h"
#include "nouveau_context.h"
#include "nouveau_bufferobj.h"
#include "nouveau_fbo.h"
#include "nv_object.xml.h"

#include "main/api_exec.h"
#include "main/dd.h"
#include "main/framebuffer.h"
#include "main/fbobject.h"
#include "main/light.h"
#include "main/state.h"
#include "main/version.h"
#include "main/vtxfmt.h"
#include "drivers/common/meta.h"
#include "drivers/common/driverfuncs.h"
#include "swrast/swrast.h"
#include "swrast/s_context.h"
#include "vbo/vbo.h"
#include "tnl/tnl.h"
#include "tnl/t_context.h"

GLboolean
nouveau_context_create(gl_api api,
		       const struct gl_config *visual, __DRIcontext *dri_ctx,
		       unsigned major_version,
		       unsigned minor_version,
		       uint32_t flags,
		       bool notify_reset,
		       unsigned *error,
		       void *share_ctx)
{
	__DRIscreen *dri_screen = dri_ctx->driScreenPriv;
	struct nouveau_screen *screen = dri_screen->driverPrivate;
	struct nouveau_context *nctx;
	struct gl_context *ctx;

	if (flags & ~__DRI_CTX_FLAG_DEBUG) {
		*error = __DRI_CTX_ERROR_UNKNOWN_FLAG;
		return false;
	}

	if (notify_reset) {
		*error = __DRI_CTX_ERROR_UNKNOWN_ATTRIBUTE;
		return false;
	}

	ctx = screen->driver->context_create(screen, api, visual, share_ctx);
	if (!ctx) {
		*error = __DRI_CTX_ERROR_NO_MEMORY;
		return GL_FALSE;
	}

	driContextSetFlags(ctx, flags);

	nctx = to_nouveau_context(ctx);
	nctx->dri_context = dri_ctx;
	dri_ctx->driverPrivate = ctx;

	_mesa_compute_version(ctx);
	if (ctx->Version < major_version * 10 + minor_version) {
	   nouveau_context_destroy(dri_ctx);
	   *error = __DRI_CTX_ERROR_BAD_VERSION;
	   return GL_FALSE;
	}

	/* Exec table initialization requires the version to be computed */
	_mesa_initialize_dispatch_tables(ctx);
	_mesa_initialize_vbo_vtxfmt(ctx);

	if (nouveau_bo_new(context_dev(ctx), NOUVEAU_BO_VRAM, 0, 4096,
			   NULL, &nctx->fence)) {
		nouveau_context_destroy(dri_ctx);
		*error = __DRI_CTX_ERROR_NO_MEMORY;
		return GL_FALSE;
	}

	*error = __DRI_CTX_ERROR_SUCCESS;
	return GL_TRUE;
}

GLboolean
nouveau_context_init(struct gl_context *ctx, gl_api api,
		     struct nouveau_screen *screen,
		     const struct gl_config *visual, struct gl_context *share_ctx)
{
	struct nouveau_context *nctx = to_nouveau_context(ctx);
	struct dd_function_table functions;
	int ret;

	nctx->screen = screen;
	nctx->fallback = HWTNL;

	/* Initialize the function pointers. */
	_mesa_init_driver_functions(&functions);
	nouveau_driver_functions_init(&functions);
	nouveau_bufferobj_functions_init(&functions);
	nouveau_texture_functions_init(&functions);
	nouveau_fbo_functions_init(&functions);

	/* Initialize the mesa context. */
	_mesa_initialize_context(ctx, api, visual,
                                 share_ctx, &functions);

	nouveau_state_init(ctx);
	nouveau_scratch_init(ctx);
	_mesa_meta_init(ctx);
	_swrast_CreateContext(ctx);
	_vbo_CreateContext(ctx);
	_tnl_CreateContext(ctx);
	nouveau_span_functions_init(ctx);
	_mesa_allow_light_in_model(ctx, GL_FALSE);

	/* Allocate a hardware channel. */
	ret = nouveau_object_new(&context_dev(ctx)->object, 0xbeef0000,
				 NOUVEAU_FIFO_CHANNEL_CLASS,
				 &(struct nv04_fifo){
					.vram = 0xbeef0201,
					.gart = 0xbeef0202
				 }, sizeof(struct nv04_fifo), &nctx->hw.chan);
	if (ret) {
		nouveau_error("Error initializing the FIFO.\n");
		return GL_FALSE;
	}

	/* Allocate a client (thread data) */
	ret = nouveau_client_new(context_dev(ctx), &nctx->hw.client);
	if (ret) {
		nouveau_error("Error creating thread data\n");
		return GL_FALSE;
	}

	/* Allocate a push buffer */
	ret = nouveau_pushbuf_new(nctx->hw.client, nctx->hw.chan, 4,
				  512 * 1024, true, &nctx->hw.pushbuf);
	if (ret) {
		nouveau_error("Error allocating DMA push buffer\n");
		return GL_FALSE;
	}

	/* Allocate buffer context */
	ret = nouveau_bufctx_new(nctx->hw.client, 16, &nctx->hw.bufctx);
	if (ret) {
		nouveau_error("Error allocating buffer context\n");
		return GL_FALSE;
	}

	nctx->hw.pushbuf->user_priv = nctx->hw.bufctx;

	/* Allocate NULL object */
	ret = nouveau_object_new(nctx->hw.chan, 0x00000000, NV01_NULL_CLASS,
				 NULL, 0, &nctx->hw.null);
	if (ret) {
		nouveau_error("Error allocating NULL object\n");
		return GL_FALSE;
	}

	/* Enable any supported extensions. */
	ctx->Extensions.EXT_blend_color = true;
	ctx->Extensions.EXT_blend_minmax = true;
	ctx->Extensions.EXT_texture_filter_anisotropic = true;
	ctx->Extensions.NV_texture_env_combine4 = true;
	ctx->Const.MaxColorAttachments = 1;

	return GL_TRUE;
}

void
nouveau_context_deinit(struct gl_context *ctx)
{
	struct nouveau_context *nctx = to_nouveau_context(ctx);

	if (TNL_CONTEXT(ctx))
		_tnl_DestroyContext(ctx);

	if (vbo_context(ctx))
		_vbo_DestroyContext(ctx);

	if (SWRAST_CONTEXT(ctx))
		_swrast_DestroyContext(ctx);

	if (ctx->Meta)
		_mesa_meta_free(ctx);

	nouveau_bufctx_del(&nctx->hw.bufctx);
	nouveau_pushbuf_del(&nctx->hw.pushbuf);
	nouveau_client_del(&nctx->hw.client);
	nouveau_object_del(&nctx->hw.chan);

	nouveau_scratch_destroy(ctx);
	_mesa_free_context_data(ctx);
}

void
nouveau_context_destroy(__DRIcontext *dri_ctx)
{
	struct nouveau_context *nctx = dri_ctx->driverPrivate;
	struct gl_context *ctx = &nctx->base;

	nouveau_bo_ref(NULL, &nctx->fence);
	context_drv(ctx)->context_destroy(ctx);
}

void
nouveau_update_renderbuffers(__DRIcontext *dri_ctx, __DRIdrawable *draw)
{
	struct gl_context *ctx = dri_ctx->driverPrivate;
	struct nouveau_context *nctx = to_nouveau_context(ctx);
	__DRIscreen *screen = dri_ctx->driScreenPriv;
	struct gl_framebuffer *fb = draw->driverPrivate;
	struct nouveau_framebuffer *nfb = to_nouveau_framebuffer(fb);
	unsigned int attachments[10];
	__DRIbuffer *buffers = NULL;
	int i = 0, count, ret;

	if (draw->lastStamp == draw->dri2.stamp)
		return;
	draw->lastStamp = draw->dri2.stamp;

	if (nfb->need_front)
		attachments[i++] = __DRI_BUFFER_FRONT_LEFT;
	if (fb->Visual.doubleBufferMode)
		attachments[i++] = __DRI_BUFFER_BACK_LEFT;
	if (fb->Visual.haveDepthBuffer && fb->Visual.haveStencilBuffer)
		attachments[i++] = __DRI_BUFFER_DEPTH_STENCIL;
	else if (fb->Visual.haveDepthBuffer)
		attachments[i++] = __DRI_BUFFER_DEPTH;
	else if (fb->Visual.haveStencilBuffer)
		attachments[i++] = __DRI_BUFFER_STENCIL;

	buffers = (*screen->dri2.loader->getBuffers)(draw, &draw->w, &draw->h,
						     attachments, i, &count,
						     draw->loaderPrivate);
	if (buffers == NULL)
		return;

	for (i = 0; i < count; i++) {
		struct gl_renderbuffer *rb;
		struct nouveau_surface *s;
		uint32_t old_name;
		int index;

		switch (buffers[i].attachment) {
		case __DRI_BUFFER_FRONT_LEFT:
		case __DRI_BUFFER_FAKE_FRONT_LEFT:
			index = BUFFER_FRONT_LEFT;
			break;
		case __DRI_BUFFER_BACK_LEFT:
			index = BUFFER_BACK_LEFT;
			break;
		case __DRI_BUFFER_DEPTH:
		case __DRI_BUFFER_DEPTH_STENCIL:
			index = BUFFER_DEPTH;
			break;
		case __DRI_BUFFER_STENCIL:
			index = BUFFER_STENCIL;
			break;
		default:
			assert(0);
		}

		rb = fb->Attachment[index].Renderbuffer;
		s = &to_nouveau_renderbuffer(rb)->surface;

		s->width = draw->w;
		s->height = draw->h;
		s->pitch = buffers[i].pitch;
		s->cpp = buffers[i].cpp;

		if (index == BUFFER_DEPTH && s->bo) {
			ret = nouveau_bo_name_get(s->bo, &old_name);
			/*
			 * Disable fast Z clears in the next frame, the
			 * depth buffer contents are undefined.
			 */
			if (!ret && old_name != buffers[i].name)
				nctx->hierz.clear_seq = 0;
		}

		nouveau_bo_ref(NULL, &s->bo);
		ret = nouveau_bo_name_ref(context_dev(ctx),
					  buffers[i].name, &s->bo);
		assert(!ret);
	}

	_mesa_resize_framebuffer(ctx, fb, draw->w, draw->h);
}

static void
update_framebuffer(__DRIcontext *dri_ctx, __DRIdrawable *draw,
		   int *stamp)
{
	struct gl_context *ctx = dri_ctx->driverPrivate;
	struct gl_framebuffer *fb = draw->driverPrivate;

	*stamp = draw->dri2.stamp;

	nouveau_update_renderbuffers(dri_ctx, draw);
	_mesa_resize_framebuffer(ctx, fb, draw->w, draw->h);

	/* Clean up references to the old framebuffer objects. */
	context_dirty(ctx, FRAMEBUFFER);
	nouveau_bufctx_reset(to_nouveau_context(ctx)->hw.bufctx, BUFCTX_FB);
	PUSH_KICK(context_push(ctx));
}

GLboolean
nouveau_context_make_current(__DRIcontext *dri_ctx, __DRIdrawable *dri_draw,
			     __DRIdrawable *dri_read)
{
	if (dri_ctx) {
		struct nouveau_context *nctx = dri_ctx->driverPrivate;
		struct gl_context *ctx = &nctx->base;

		/* Ask the X server for new renderbuffers. */
		if (dri_draw->driverPrivate != ctx->WinSysDrawBuffer)
			update_framebuffer(dri_ctx, dri_draw,
					   &dri_ctx->dri2.draw_stamp);

		if (dri_draw != dri_read &&
		    dri_read->driverPrivate != ctx->WinSysReadBuffer)
			update_framebuffer(dri_ctx, dri_read,
					   &dri_ctx->dri2.read_stamp);

		/* Pass it down to mesa. */
		_mesa_make_current(ctx, dri_draw->driverPrivate,
				   dri_read->driverPrivate);
		_mesa_update_state(ctx);

	} else {
		_mesa_make_current(NULL, NULL, NULL);
	}

	return GL_TRUE;
}

GLboolean
nouveau_context_unbind(__DRIcontext *dri_ctx)
{
	/* Unset current context and dispatch table */
	_mesa_make_current(NULL, NULL, NULL);

	return GL_TRUE;
}

void
nouveau_fallback(struct gl_context *ctx, enum nouveau_fallback mode)
{
	struct nouveau_context *nctx = to_nouveau_context(ctx);

	nctx->fallback = MAX2(HWTNL, mode);

	if (mode < SWRAST) {
		nouveau_state_emit(ctx);
#if 0
		nouveau_bo_state_emit(ctx);
#endif
	} else {
		PUSH_KICK(context_push(ctx));
	}
}

static void
validate_framebuffer(__DRIcontext *dri_ctx, __DRIdrawable *draw,
		     int *stamp)
{
	struct gl_framebuffer *fb = draw->driverPrivate;
	struct nouveau_framebuffer *nfb = to_nouveau_framebuffer(fb);
	GLboolean need_front =
		(fb->_ColorDrawBufferIndexes[0] == BUFFER_FRONT_LEFT ||
		 fb->_ColorReadBufferIndex == BUFFER_FRONT_LEFT);

	if (nfb->need_front != need_front) {
		nfb->need_front = need_front;
		dri2InvalidateDrawable(draw);
	}

	if (draw->dri2.stamp != *stamp)
		update_framebuffer(dri_ctx, draw, stamp);
}

void
nouveau_validate_framebuffer(struct gl_context *ctx)
{
	__DRIcontext *dri_ctx = to_nouveau_context(ctx)->dri_context;
	__DRIdrawable *dri_draw = dri_ctx->driDrawablePriv;
	__DRIdrawable *dri_read = dri_ctx->driReadablePriv;

	if (_mesa_is_winsys_fbo(ctx->DrawBuffer))
		validate_framebuffer(dri_ctx, dri_draw,
				     &dri_ctx->dri2.draw_stamp);

	if (_mesa_is_winsys_fbo(ctx->ReadBuffer))
		validate_framebuffer(dri_ctx, dri_read,
				     &dri_ctx->dri2.read_stamp);

	if (ctx->NewState & _NEW_BUFFERS)
		_mesa_update_state(ctx);
}
@


1.9
log
@Merge Mesa 10.2.9
@
text
@@


1.8
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d129 2
a130 2
	if (!_mesa_initialize_context(ctx, api, visual, share_ctx, &functions))
		return GL_FALSE;
a190 3

	/* This effectively disables 3D textures */
	ctx->Const.Max3DTextureLevels = 1;
@


1.7
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d129 2
a130 2
	_mesa_initialize_context(ctx, api, visual,
                                 share_ctx, &functions);
d191 3
@


1.6
log
@Merge Mesa 9.2.0
@
text
@d56 1
d65 3
a67 21
	switch (api) {
	case API_OPENGL_COMPAT:
		/* Do after-the-fact version checking (below).
		 */
		break;
	case API_OPENGLES:
		/* NV10 and NV20 can support OpenGL ES 1.0 only.  Older chips
		 * cannot do even that.
		 */
		if ((screen->device->chipset & 0xf0) == 0x00) {
			*error = __DRI_CTX_ERROR_BAD_API;
			return GL_FALSE;
		} else if (minor_version != 0) {
			*error = __DRI_CTX_ERROR_BAD_VERSION;
			return GL_FALSE;
		}
		break;
	case API_OPENGLES2:
	case API_OPENGL_CORE:
		*error = __DRI_CTX_ERROR_BAD_API;
		return GL_FALSE;
d70 4
a73 3
	/* API and flag filtering is handled in dri2CreateContextAttribs.
	 */
	(void) flags;
d75 1
a75 1
	ctx = screen->driver->context_create(screen, visual, share_ctx);
d81 2
d110 2
a111 1
nouveau_context_init(struct gl_context *ctx, struct nouveau_screen *screen,
d129 1
a129 1
	_mesa_initialize_context(ctx, API_OPENGL_COMPAT, visual,
a187 2
	ctx->Extensions.EXT_framebuffer_blit = true;
	ctx->Extensions.EXT_packed_depth_stencil = true;
d190 1
@


1.5
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d27 1
d32 1
d34 1
d37 1
d40 2
a49 34
#define need_GL_EXT_framebuffer_object
#define need_GL_EXT_fog_coord
#define need_GL_EXT_secondary_color

#include "main/remap_helper.h"

static const struct dri_extension nouveau_extensions[] = {
	{ "GL_ARB_multitexture",	NULL },
	{ "GL_ARB_texture_env_add",	NULL },
	{ "GL_ARB_texture_mirrored_repeat", NULL },
	{ "GL_EXT_fog_coord",		GL_EXT_fog_coord_functions },
	{ "GL_EXT_framebuffer_blit",	NULL },
	{ "GL_EXT_framebuffer_object",	GL_EXT_framebuffer_object_functions },
	{ "GL_EXT_packed_depth_stencil", NULL},
	{ "GL_EXT_secondary_color",	GL_EXT_secondary_color_functions },
	{ "GL_EXT_stencil_wrap",	NULL },
	{ "GL_EXT_texture_env_combine",	NULL },
	{ "GL_EXT_texture_filter_anisotropic", NULL },
	{ "GL_EXT_texture_lod_bias",	NULL },
	{ "GL_NV_blend_square",         NULL },
	{ "GL_NV_texture_env_combine4",	NULL },
	{ NULL,				NULL }
};

static void
nouveau_channel_flush_notify(struct nouveau_channel *chan)
{
	struct nouveau_context *nctx = chan->user_private;
	struct gl_context *ctx = &nctx->base;

	if (nctx->fallback < SWRAST)
		nouveau_bo_state_emit(ctx);
}

d53 4
d60 1
a60 1
	struct nouveau_screen *screen = dri_screen->private;
d64 27
d92 2
a93 1
	if (!ctx)
d95 1
d101 19
d142 2
a143 2
	_mesa_initialize_context(ctx, API_OPENGL, visual,
                                 share_ctx, &functions, NULL);
a145 1
	nouveau_bo_state_init(ctx);
d155 6
a160 2
	ret = nouveau_channel_alloc(context_dev(ctx), 0xbeef0201, 0xbeef0202,
				    512*1024, &nctx->hw.chan);
d166 31
a196 2
	nctx->hw.chan->flush_notify = nouveau_channel_flush_notify;
	nctx->hw.chan->user_private = nctx;
d199 6
a204 1
	driInitExtensions(ctx, nouveau_extensions, GL_TRUE);
d226 4
a229 2
	if (nctx->hw.chan)
		nouveau_channel_free(&nctx->hw.chan);
a231 1
	nouveau_bo_state_destroy(ctx);
d241 1
d257 1
a257 1
	if (draw->lastStamp == *draw->pStamp)
d259 1
a259 1
	draw->lastStamp = *draw->pStamp;
d312 1
a312 1
			ret = nouveau_bo_handle_get(s->bo, &old_name);
d322 2
a323 2
		ret = nouveau_bo_handle_ref(context_dev(ctx),
					    buffers[i].name, &s->bo);
d337 1
a337 1
	*stamp = *draw->pStamp;
d344 2
a345 2
	context_bctx(ctx, FRAMEBUFFER);
	FIRE_RING(context_chan(ctx));
d396 1
d398 1
d400 1
a400 1
		FIRE_RING(context_chan(ctx));
d419 1
a419 1
	if (*draw->pStamp != *stamp)
d430 1
a430 1
	if (ctx->DrawBuffer->Name == 0)
d434 1
a434 1
	if (ctx->ReadBuffer->Name == 0)
@


1.4
log
@Merge Mesa 7.10.3
@
text
@d118 2
a119 1
	_mesa_initialize_context(ctx, visual, share_ctx, &functions, NULL);
d264 1
a264 1
	_mesa_resize_framebuffer(NULL, fb, draw->w, draw->h);
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d46 1
a51 2
	{ "GL_ARB_texture_env_combine",	NULL },
	{ "GL_ARB_texture_env_dot3",	NULL },
d53 3
a55 1
	{ "GL_EXT_texture_lod_bias",	NULL },
d57 2
a58 1
	{ "GL_ARB_texture_mirrored_repeat", NULL },
d60 5
a64 2
	{ "GL_EXT_fog_coord",		GL_EXT_fog_coord_functions },
	{ "GL_SGIS_generate_mipmap",	NULL },
d72 1
a72 1
	GLcontext *ctx = &nctx->base;
d74 2
a75 2
	if (nctx->fallback < SWRAST && ctx->DrawBuffer)
		nouveau_state_emit(&nctx->base);
d79 2
a80 1
nouveau_context_create(const __GLcontextModes *visual, __DRIcontext *dri_ctx,
d86 1
a86 1
	GLcontext *ctx;
d100 2
a101 2
nouveau_context_init(GLcontext *ctx, struct nouveau_screen *screen,
		     const GLvisual *visual, GLcontext *share_ctx)
d122 1
d132 1
a132 1
				    &nctx->hw.chan);
d148 1
a148 1
nouveau_context_deinit(GLcontext *ctx)
d167 1
d176 1
a176 1
	GLcontext *ctx = &nctx->base;
d184 2
a185 1
	GLcontext *ctx = dri_ctx->driverPrivate;
d188 1
d197 2
a198 1
	attachments[i++] = __DRI_BUFFER_FRONT_LEFT;
d217 1
a217 1
		uint32_t old_handle;
d247 8
a254 5
		/* Don't bother to reopen the bo if it happens to be
		 * the same. */
		if (s->bo) {
			ret = nouveau_bo_handle_get(s->bo, &old_handle);
			assert(!ret);
d257 4
a260 6
		if (!s->bo || old_handle != buffers[i].name) {
			nouveau_bo_ref(NULL, &s->bo);
			ret = nouveau_bo_handle_ref(context_dev(ctx),
						    buffers[i].name, &s->bo);
			assert(!ret);
		}
d270 1
a270 1
	GLcontext *ctx = dri_ctx->driverPrivate;
d278 1
d280 2
d290 1
a290 1
		GLcontext *ctx = &nctx->base;
a306 2
		FIRE_RING(context_chan(ctx));

d317 3
d324 1
a324 1
nouveau_fallback(GLcontext *ctx, enum nouveau_fallback mode)
d330 1
a330 1
	if (mode < SWRAST)
d332 2
a333 1
	else
d335 20
d358 1
a358 1
nouveau_validate_framebuffer(GLcontext *ctx)
d364 7
a370 9
	if (ctx->DrawBuffer->Name == 0 &&
	    dri_ctx->dri2.draw_stamp != *dri_draw->pStamp)
		update_framebuffer(dri_ctx, dri_draw,
				   &dri_ctx->dri2.draw_stamp);

	if (ctx->ReadBuffer->Name == 0 && dri_draw != dri_read &&
	    dri_ctx->dri2.read_stamp != *dri_read->pStamp)
		update_framebuffer(dri_ctx, dri_read,
				   &dri_ctx->dri2.read_stamp);
d372 2
a373 2
	if (nouveau_next_dirty_state(ctx) >= 0)
		FIRE_RING(context_chan(ctx));
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d1 25
a25 1
/**************************************************************************
d27 4
a30 2
Copyright 2006 Stephane Marchesin
All Rights Reserved.
d32 6
a37 26
Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
on the rights to use, copy, modify, merge, publish, distribute, sub
license, and/or sell copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice (including the next
paragraph) shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
ERIC ANHOLT OR SILICON INTEGRATED SYSTEMS CORP BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

#include "glheader.h"
#include "context.h"
#include "simple_list.h"
#include "imports.h"
#include "matrix.h"
d39 4
a42 2
#include "swrast_setup/swrast_setup.h"
#include "framebuffer.h"
d44 2
a45 3
#include "tnl/tnl.h"
#include "tnl/t_pipeline.h"
#include "tnl/t_vp_build.h"
d47 1
a47 1
#include "drivers/common/driverfuncs.h"
d49 12
a60 29
#include "nouveau_context.h"
#include "nouveau_driver.h"
//#include "nouveau_state.h"
#include "nouveau_span.h"
#include "nouveau_object.h"
#include "nouveau_fifo.h"
#include "nouveau_tex.h"
#include "nouveau_msg.h"
#include "nouveau_reg.h"
#include "nouveau_lock.h"
#include "nouveau_query.h"
#include "nv04_swtcl.h"
#include "nv10_swtcl.h"

#include "vblank.h"
#include "utils.h"
#include "texmem.h"
#include "xmlpool.h" /* for symbolic values of enum-type options */

#ifndef NOUVEAU_DEBUG
int NOUVEAU_DEBUG = 0;
#endif

static const struct dri_debug_control debug_control[] =
{
	{ "shaders"   , DEBUG_SHADERS    },
	{ "mem"       , DEBUG_MEM        },
	{ "bufferobj" , DEBUG_BUFFEROBJ  },
	{ NULL        , 0                }
d63 2
a64 5
#define need_GL_ARB_vertex_program
#define need_GL_ARB_occlusion_query
#include "extension_helper.h"

const struct dri_extension common_extensions[] =
d66 2
a67 2
	{ NULL,    0 }
};
d69 3
a71 4
const struct dri_extension nv10_extensions[] =
{
	{ NULL,    0 }
};
d73 8
a80 4
const struct dri_extension nv20_extensions[] =
{
	{ NULL,    0 }
};
d82 3
a84 5
const struct dri_extension nv30_extensions[] =
{
	{ "GL_ARB_fragment_program",	NULL                            },
	{ NULL,    0 }
};
d86 3
a88 9
const struct dri_extension nv40_extensions[] =
{
   /* ARB_vp can be moved to nv20/30 once the shader backend has been
    * written for those cards.
    */
	{ "GL_ARB_vertex_program",	GL_ARB_vertex_program_functions },
	{ "GL_ARB_occlusion_query",	GL_ARB_occlusion_query_functions},
	{ NULL, 0 }
};
d90 2
a91 4
const struct dri_extension nv50_extensions[] =
{
	{ NULL,    0 }
};
d93 3
a95 5
/* Create the device specific context.
 */
GLboolean nouveauCreateContext( const __GLcontextModes *glVisual,
		__DRIcontextPrivate *driContextPriv,
		void *sharedContextPrivate )
d97 1
a97 2
	GLcontext *ctx, *shareCtx;
	__DRIscreenPrivate *sPriv = driContextPriv->driScreenPriv;
d99 1
a99 2
	nouveauContextPtr nmesa;
	nouveauScreenPtr screen;
d101 2
a102 4
	/* Allocate the context */
	nmesa = (nouveauContextPtr) CALLOC( sizeof(*nmesa) );
	if ( !nmesa )
		return GL_FALSE;
d104 24
a127 44
	nmesa->driContext = driContextPriv;
	nmesa->driScreen = sPriv;
	nmesa->driDrawable = NULL;
	nmesa->hHWContext = driContextPriv->hHWContext;
	nmesa->driHwLock = &sPriv->pSAREA->lock;
	nmesa->driFd = sPriv->fd;

	nmesa->screen = (nouveauScreenPtr)(sPriv->private);
	screen=nmesa->screen;

	/* Create the hardware context */
	if (!nouveauDRMGetParam(nmesa, NOUVEAU_GETPARAM_FB_PHYSICAL,
		 		&nmesa->vram_phys))
	   return GL_FALSE;
	if (!nouveauDRMGetParam(nmesa, NOUVEAU_GETPARAM_FB_SIZE,
		 		&nmesa->vram_size))
	   return GL_FALSE;
	if (!nouveauDRMGetParam(nmesa, NOUVEAU_GETPARAM_AGP_PHYSICAL,
		 		&nmesa->agp_phys))
	   return GL_FALSE;
	if (!nouveauDRMGetParam(nmesa, NOUVEAU_GETPARAM_AGP_SIZE,
		 		&nmesa->agp_size))
	   return GL_FALSE;
	if (!nouveauFifoInit(nmesa))
	   return GL_FALSE;
	nouveauObjectInit(nmesa);


	/* Init default driver functions then plug in our nouveau-specific functions
	 * (the texture functions are especially important)
	 */
	_mesa_init_driver_functions( &functions );
	nouveauDriverInitFunctions( &functions );
	nouveauTexInitFunctions( &functions );

	/* Allocate the Mesa context */
	if (sharedContextPrivate)
		shareCtx = ((nouveauContextPtr) sharedContextPrivate)->glCtx;
	else 
		shareCtx = NULL;
	nmesa->glCtx = _mesa_create_context(glVisual, shareCtx,
			&functions, (void *) nmesa);
	if (!nmesa->glCtx) {
		FREE(nmesa);
a129 2
	driContextPriv->driverPrivate = nmesa;
	ctx = nmesa->glCtx;
d131 85
a215 42
	/* Parse configuration files */
	driParseConfigFiles (&nmesa->optionCache, &screen->optionCache,
			screen->driScreen->myNum, "nouveau");

	nmesa->sarea = (drm_nouveau_sarea_t *)((char *)sPriv->pSAREA +
			screen->sarea_priv_offset);

	/* Enable any supported extensions */
	driInitExtensions(ctx, common_extensions, GL_TRUE);
	if (nmesa->screen->card->type >= NV_10)
		driInitExtensions(ctx, nv10_extensions, GL_FALSE);
	if (nmesa->screen->card->type >= NV_20)
		driInitExtensions(ctx, nv20_extensions, GL_FALSE);
	if (nmesa->screen->card->type >= NV_30)
		driInitExtensions(ctx, nv30_extensions, GL_FALSE);
	if (nmesa->screen->card->type >= NV_40)
		driInitExtensions(ctx, nv40_extensions, GL_FALSE);
	if (nmesa->screen->card->type >= NV_50)
		driInitExtensions(ctx, nv50_extensions, GL_FALSE);

	nmesa->current_primitive = -1;

	nouveauShaderInitFuncs(ctx);
	/* Install Mesa's fixed-function texenv shader support */
	if (nmesa->screen->card->type >= NV_40)
		ctx->FragmentProgram._MaintainTexEnvProgram = GL_TRUE;

	/* Initialize the swrast */
	_swrast_CreateContext( ctx );
	_vbo_CreateContext( ctx );
	_tnl_CreateContext( ctx );
	_swsetup_CreateContext( ctx );

	_math_matrix_ctr(&nmesa->viewport);

	nouveauDDInitStateFuncs( ctx );
	nouveauSpanInitFunctions( ctx );
	nouveauDDInitState( nmesa );
	switch(nmesa->screen->card->type)
	{
		case NV_03:
			//nv03TriInitFunctions( ctx );
d217 6
a222 3
		case NV_04:
		case NV_05:
			nv04TriInitFunctions( ctx );
a223 6
		case NV_10:
		case NV_20:
		case NV_30:
		case NV_40:
		case NV_44:
		case NV_50:
d225 17
a241 3
			nv10TriInitFunctions( ctx );
			break;
	}
d243 6
a248 15
	nouveauInitBufferObjects(ctx);
	if (!nouveauSyncInitFuncs(ctx))
	   return GL_FALSE;
	nouveauQueryInitFuncs(ctx);
	nmesa->hw_func.InitCard(nmesa);
        nouveauInitState(ctx);

	driContextPriv->driverPrivate = (void *)nmesa;

	NOUVEAU_DEBUG = driParseDebugString( getenv( "NOUVEAU_DEBUG" ),
			debug_control );

	if (driQueryOptionb(&nmesa->optionCache, "no_rast")) {
		fprintf(stderr, "disabling 3D acceleration\n");
		FALLBACK(nmesa, NOUVEAU_FALLBACK_DISABLE, 1);
d251 1
a251 1
	return GL_TRUE;
d254 3
a256 2
/* Destroy the device specific context. */
void nouveauDestroyContext( __DRIcontextPrivate *driContextPriv  )
d258 2
a259 1
	nouveauContextPtr nmesa = (nouveauContextPtr) driContextPriv->driverPrivate;
d261 1
a261 4
	assert(nmesa);
	if ( nmesa ) {
		/* free the option cache */
		driDestroyOptionCache (&nmesa->optionCache);
d263 2
a264 2
		FREE( nmesa );
	}
d266 1
d269 22
d292 1
a292 25
/* Force the context `c' to be the current context and associate with it
 * buffer `b'.
 */
GLboolean nouveauMakeCurrent( __DRIcontextPrivate *driContextPriv,
		__DRIdrawablePrivate *driDrawPriv,
		__DRIdrawablePrivate *driReadPriv )
{
	if ( driContextPriv ) {
		nouveauContextPtr nmesa = (nouveauContextPtr) driContextPriv->driverPrivate;
		struct gl_framebuffer *draw_fb =
			(struct gl_framebuffer*)driDrawPriv->driverPrivate;
		struct gl_framebuffer *read_fb =
			(struct gl_framebuffer*)driReadPriv->driverPrivate;

		driDrawableInitVBlank(driDrawPriv, nmesa->vblank_flags, &nmesa->vblank_seq );
		nmesa->driDrawable = driDrawPriv;

		_mesa_resize_framebuffer(nmesa->glCtx, draw_fb,
					 driDrawPriv->w, driDrawPriv->h);
		if (draw_fb != read_fb) {
			_mesa_resize_framebuffer(nmesa->glCtx, draw_fb,
						 driReadPriv->w,
						 driReadPriv->h);
		}
		_mesa_make_current(nmesa->glCtx, draw_fb, read_fb);
a293 2
		nouveau_build_framebuffer(nmesa->glCtx,
		      			  driDrawPriv->driverPrivate);
d295 1
a295 1
		_mesa_make_current( NULL, NULL, NULL );
d301 2
a302 4

/* Force the context `c' to be unbound from its buffer.
 */
GLboolean nouveauUnbindContext( __DRIcontextPrivate *driContextPriv )
d307 2
a308 2
static void nouveauDoSwapBuffers(nouveauContextPtr nmesa,
				 __DRIdrawablePrivate *dPriv)
d310 1
a310 27
	struct gl_framebuffer *fb;
	nouveau_renderbuffer *src, *dst;
	drm_clip_rect_t *box;
	int nbox, i;

	fb = (struct gl_framebuffer *)dPriv->driverPrivate;
	dst = (nouveau_renderbuffer*)
		fb->Attachment[BUFFER_FRONT_LEFT].Renderbuffer;
	src = (nouveau_renderbuffer*)
		fb->Attachment[BUFFER_BACK_LEFT].Renderbuffer;

#ifdef ALLOW_MULTI_SUBCHANNEL
	LOCK_HARDWARE(nmesa);
	nbox = dPriv->numClipRects;
	box  = dPriv->pClipRects;

	if (nbox) {
		BEGIN_RING_SIZE(NvSubCtxSurf2D,
				NV10_CONTEXT_SURFACES_2D_FORMAT, 4);
		if (src->mesa._ActualFormat == GL_RGBA8)
			OUT_RING       (6); /* X8R8G8B8 */
		else
			OUT_RING       (4); /* R5G6B5 */
		OUT_RING       ((dst->pitch << 16) | src->pitch);
		OUT_RING       (src->offset);
		OUT_RING       (dst->offset);
	}
d312 1
a312 9
	for (i=0; i<nbox; i++, box++) {
		BEGIN_RING_SIZE(NvSubImageBlit, NV10_IMAGE_BLIT_SET_POINT, 3);
		OUT_RING       (((box->y1 - dPriv->y) << 16) |
				(box->x1 - dPriv->x));
		OUT_RING       ((box->y1 << 16) | box->x1);
		OUT_RING       (((box->y2 - box->y1) << 16) |
				(box->x2 - box->x1));
	}
	FIRE_RING();
d314 4
a317 2
	UNLOCK_HARDWARE(nmesa);
#endif
d320 2
a321 1
void nouveauSwapBuffers(__DRIdrawablePrivate *dPriv)
d323 13
a335 10
	if (dPriv->driContextPriv && dPriv->driContextPriv->driverPrivate) {
		nouveauContextPtr nmesa = dPriv->driContextPriv->driverPrivate;

		if (nmesa->glCtx->Visual.doubleBufferMode) {
			_mesa_notifySwapBuffers(nmesa->glCtx);
			nouveauDoSwapBuffers(nmesa, dPriv);
		}

	}
}
d337 2
a338 3
void nouveauCopySubBuffer(__DRIdrawablePrivate *dPriv,
			  int x, int y, int w, int h)
{
a339 1

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d1 1
a1 25
/*
 * Copyright (C) 2009-2010 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
d3 2
a4 4
#include "nouveau_driver.h"
#include "nouveau_context.h"
#include "nouveau_bufferobj.h"
#include "nouveau_fbo.h"
d6 26
a31 6
#include "main/dd.h"
#include "main/framebuffer.h"
#include "main/light.h"
#include "main/state.h"
#include "drivers/common/meta.h"
#include "drivers/common/driverfuncs.h"
d33 3
a35 2
#include "swrast/s_context.h"
#include "vbo/vbo.h"
d37 2
a38 1
#include "tnl/t_context.h"
d40 31
a70 22
#define need_GL_EXT_framebuffer_object
#define need_GL_EXT_fog_coord
#define need_GL_EXT_secondary_color

#include "main/remap_helper.h"

static const struct dri_extension nouveau_extensions[] = {
	{ "GL_ARB_multitexture",	NULL },
	{ "GL_ARB_texture_env_add",	NULL },
	{ "GL_ARB_texture_mirrored_repeat", NULL },
	{ "GL_EXT_fog_coord",		GL_EXT_fog_coord_functions },
	{ "GL_EXT_framebuffer_blit",	NULL },
	{ "GL_EXT_framebuffer_object",	GL_EXT_framebuffer_object_functions },
	{ "GL_EXT_packed_depth_stencil", NULL},
	{ "GL_EXT_secondary_color",	GL_EXT_secondary_color_functions },
	{ "GL_EXT_stencil_wrap",	NULL },
	{ "GL_EXT_texture_env_combine",	NULL },
	{ "GL_EXT_texture_filter_anisotropic", NULL },
	{ "GL_EXT_texture_lod_bias",	NULL },
	{ "GL_NV_blend_square",         NULL },
	{ "GL_NV_texture_env_combine4",	NULL },
	{ NULL,				NULL }
d73 5
a77 2
static void
nouveau_channel_flush_notify(struct nouveau_channel *chan)
d79 2
a80 2
	struct nouveau_context *nctx = chan->user_private;
	struct gl_context *ctx = &nctx->base;
d82 4
a85 3
	if (nctx->fallback < SWRAST)
		nouveau_bo_state_emit(ctx);
}
d87 4
a90 9
GLboolean
nouveau_context_create(gl_api api,
		       const struct gl_config *visual, __DRIcontext *dri_ctx,
		       void *share_ctx)
{
	__DRIscreen *dri_screen = dri_ctx->driScreenPriv;
	struct nouveau_screen *screen = dri_screen->private;
	struct nouveau_context *nctx;
	struct gl_context *ctx;
d92 5
a96 3
	ctx = screen->driver->context_create(screen, visual, share_ctx);
	if (!ctx)
		return GL_FALSE;
d98 9
a106 3
	nctx = to_nouveau_context(ctx);
	nctx->dri_context = dri_ctx;
	dri_ctx->driverPrivate = ctx;
d108 4
a111 2
	return GL_TRUE;
}
d113 5
a117 3
GLboolean
nouveau_context_init(struct gl_context *ctx, struct nouveau_screen *screen,
		     const struct gl_config *visual, struct gl_context *share_ctx)
d119 2
a120 1
	struct nouveau_context *nctx = to_nouveau_context(ctx);
d122 2
a123 1
	int ret;
d125 4
a128 2
	nctx->screen = screen;
	nctx->fallback = HWTNL;
d130 44
a173 25
	/* Initialize the function pointers. */
	_mesa_init_driver_functions(&functions);
	nouveau_driver_functions_init(&functions);
	nouveau_bufferobj_functions_init(&functions);
	nouveau_texture_functions_init(&functions);
	nouveau_fbo_functions_init(&functions);

	/* Initialize the mesa context. */
	_mesa_initialize_context(ctx, visual, share_ctx, &functions, NULL);

	nouveau_state_init(ctx);
	nouveau_bo_state_init(ctx);
	nouveau_scratch_init(ctx);
	_mesa_meta_init(ctx);
	_swrast_CreateContext(ctx);
	_vbo_CreateContext(ctx);
	_tnl_CreateContext(ctx);
	nouveau_span_functions_init(ctx);
	_mesa_allow_light_in_model(ctx, GL_FALSE);

	/* Allocate a hardware channel. */
	ret = nouveau_channel_alloc(context_dev(ctx), 0xbeef0201, 0xbeef0202,
				    512*1024, &nctx->hw.chan);
	if (ret) {
		nouveau_error("Error initializing the FIFO.\n");
d176 2
d179 57
a235 2
	nctx->hw.chan->flush_notify = nouveau_channel_flush_notify;
	nctx->hw.chan->user_private = nctx;
d237 16
a252 2
	/* Enable any supported extensions. */
	driInitExtensions(ctx, nouveau_extensions, GL_TRUE);
d257 2
a258 2
void
nouveau_context_deinit(struct gl_context *ctx)
d260 1
a260 1
	struct nouveau_context *nctx = to_nouveau_context(ctx);
d262 4
a265 2
	if (TNL_CONTEXT(ctx))
		_tnl_DestroyContext(ctx);
d267 2
a268 8
	if (vbo_context(ctx))
		_vbo_DestroyContext(ctx);

	if (SWRAST_CONTEXT(ctx))
		_swrast_DestroyContext(ctx);

	if (ctx->Meta)
		_mesa_meta_free(ctx);
a269 6
	if (nctx->hw.chan)
		nouveau_channel_free(&nctx->hw.chan);

	nouveau_scratch_destroy(ctx);
	nouveau_bo_state_destroy(ctx);
	_mesa_free_context_data(ctx);
a271 5
void
nouveau_context_destroy(__DRIcontext *dri_ctx)
{
	struct nouveau_context *nctx = dri_ctx->driverPrivate;
	struct gl_context *ctx = &nctx->base;
d273 23
a295 59
	context_drv(ctx)->context_destroy(ctx);
}

void
nouveau_update_renderbuffers(__DRIcontext *dri_ctx, __DRIdrawable *draw)
{
	struct gl_context *ctx = dri_ctx->driverPrivate;
	struct nouveau_context *nctx = to_nouveau_context(ctx);
	__DRIscreen *screen = dri_ctx->driScreenPriv;
	struct gl_framebuffer *fb = draw->driverPrivate;
	struct nouveau_framebuffer *nfb = to_nouveau_framebuffer(fb);
	unsigned int attachments[10];
	__DRIbuffer *buffers = NULL;
	int i = 0, count, ret;

	if (draw->lastStamp == *draw->pStamp)
		return;
	draw->lastStamp = *draw->pStamp;

	if (nfb->need_front)
		attachments[i++] = __DRI_BUFFER_FRONT_LEFT;
	if (fb->Visual.doubleBufferMode)
		attachments[i++] = __DRI_BUFFER_BACK_LEFT;
	if (fb->Visual.haveDepthBuffer && fb->Visual.haveStencilBuffer)
		attachments[i++] = __DRI_BUFFER_DEPTH_STENCIL;
	else if (fb->Visual.haveDepthBuffer)
		attachments[i++] = __DRI_BUFFER_DEPTH;
	else if (fb->Visual.haveStencilBuffer)
		attachments[i++] = __DRI_BUFFER_STENCIL;

	buffers = (*screen->dri2.loader->getBuffers)(draw, &draw->w, &draw->h,
						     attachments, i, &count,
						     draw->loaderPrivate);
	if (buffers == NULL)
		return;

	for (i = 0; i < count; i++) {
		struct gl_renderbuffer *rb;
		struct nouveau_surface *s;
		uint32_t old_name;
		int index;

		switch (buffers[i].attachment) {
		case __DRI_BUFFER_FRONT_LEFT:
		case __DRI_BUFFER_FAKE_FRONT_LEFT:
			index = BUFFER_FRONT_LEFT;
			break;
		case __DRI_BUFFER_BACK_LEFT:
			index = BUFFER_BACK_LEFT;
			break;
		case __DRI_BUFFER_DEPTH:
		case __DRI_BUFFER_DEPTH_STENCIL:
			index = BUFFER_DEPTH;
			break;
		case __DRI_BUFFER_STENCIL:
			index = BUFFER_STENCIL;
			break;
		default:
			assert(0);
d297 1
d299 4
a302 22
		rb = fb->Attachment[index].Renderbuffer;
		s = &to_nouveau_renderbuffer(rb)->surface;

		s->width = draw->w;
		s->height = draw->h;
		s->pitch = buffers[i].pitch;
		s->cpp = buffers[i].cpp;

		if (index == BUFFER_DEPTH && s->bo) {
			ret = nouveau_bo_handle_get(s->bo, &old_name);
			/*
			 * Disable fast Z clears in the next frame, the
			 * depth buffer contents are undefined.
			 */
			if (!ret && old_name != buffers[i].name)
				nctx->hierz.clear_seq = 0;
		}

		nouveau_bo_ref(NULL, &s->bo);
		ret = nouveau_bo_handle_ref(context_dev(ctx),
					    buffers[i].name, &s->bo);
		assert(!ret);
d305 1
a305 1
	_mesa_resize_framebuffer(NULL, fb, draw->w, draw->h);
a307 44
static void
update_framebuffer(__DRIcontext *dri_ctx, __DRIdrawable *draw,
		   int *stamp)
{
	struct gl_context *ctx = dri_ctx->driverPrivate;
	struct gl_framebuffer *fb = draw->driverPrivate;

	*stamp = *draw->pStamp;

	nouveau_update_renderbuffers(dri_ctx, draw);
	_mesa_resize_framebuffer(ctx, fb, draw->w, draw->h);

	/* Clean up references to the old framebuffer objects. */
	context_dirty(ctx, FRAMEBUFFER);
	context_bctx(ctx, FRAMEBUFFER);
	FIRE_RING(context_chan(ctx));
}

GLboolean
nouveau_context_make_current(__DRIcontext *dri_ctx, __DRIdrawable *dri_draw,
			     __DRIdrawable *dri_read)
{
	if (dri_ctx) {
		struct nouveau_context *nctx = dri_ctx->driverPrivate;
		struct gl_context *ctx = &nctx->base;

		/* Ask the X server for new renderbuffers. */
		if (dri_draw->driverPrivate != ctx->WinSysDrawBuffer)
			update_framebuffer(dri_ctx, dri_draw,
					   &dri_ctx->dri2.draw_stamp);

		if (dri_draw != dri_read &&
		    dri_read->driverPrivate != ctx->WinSysReadBuffer)
			update_framebuffer(dri_ctx, dri_read,
					   &dri_ctx->dri2.read_stamp);

		/* Pass it down to mesa. */
		_mesa_make_current(ctx, dri_draw->driverPrivate,
				   dri_read->driverPrivate);
		_mesa_update_state(ctx);

	} else {
		_mesa_make_current(NULL, NULL, NULL);
	}
d309 4
d316 2
a317 2
GLboolean
nouveau_context_unbind(__DRIcontext *dri_ctx)
d319 37
a355 2
	/* Unset current context and dispatch table */
	_mesa_make_current(NULL, NULL, NULL);
d357 2
a358 1
	return GL_TRUE;
d361 1
a361 2
void
nouveau_fallback(struct gl_context *ctx, enum nouveau_fallback mode)
d363 2
a364 1
	struct nouveau_context *nctx = to_nouveau_context(ctx);
d366 4
a369 1
	nctx->fallback = MAX2(HWTNL, mode);
a370 5
	if (mode < SWRAST) {
		nouveau_state_emit(ctx);
		nouveau_bo_state_emit(ctx);
	} else {
		FIRE_RING(context_chan(ctx));
d374 3
a376 17
static void
validate_framebuffer(__DRIcontext *dri_ctx, __DRIdrawable *draw,
		     int *stamp)
{
	struct gl_framebuffer *fb = draw->driverPrivate;
	struct nouveau_framebuffer *nfb = to_nouveau_framebuffer(fb);
	GLboolean need_front =
		(fb->_ColorDrawBufferIndexes[0] == BUFFER_FRONT_LEFT ||
		 fb->_ColorReadBufferIndex == BUFFER_FRONT_LEFT);

	if (nfb->need_front != need_front) {
		nfb->need_front = need_front;
		dri2InvalidateDrawable(draw);
	}

	if (*draw->pStamp != *stamp)
		update_framebuffer(dri_ctx, draw, stamp);
a378 18
void
nouveau_validate_framebuffer(struct gl_context *ctx)
{
	__DRIcontext *dri_ctx = to_nouveau_context(ctx)->dri_context;
	__DRIdrawable *dri_draw = dri_ctx->driDrawablePriv;
	__DRIdrawable *dri_read = dri_ctx->driReadablePriv;

	if (ctx->DrawBuffer->Name == 0)
		validate_framebuffer(dri_ctx, dri_draw,
				     &dri_ctx->dri2.draw_stamp);

	if (ctx->ReadBuffer->Name == 0)
		validate_framebuffer(dri_ctx, dri_read,
				     &dri_ctx->dri2.read_stamp);

	if (ctx->NewState & _NEW_BUFFERS)
		_mesa_update_state(ctx);
}
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@a26 1
#include <stdbool.h>
a30 1
#include "nv_object.xml.h"
a31 1
#include "main/api_exec.h"
a33 1
#include "main/fbobject.h"
a35 2
#include "main/version.h"
#include "main/vtxfmt.h"
d44 34
a80 4
		       unsigned major_version,
		       unsigned minor_version,
		       uint32_t flags,
		       unsigned *error,
d84 1
a84 1
	struct nouveau_screen *screen = dri_screen->driverPrivate;
a87 27
	switch (api) {
	case API_OPENGL_COMPAT:
		/* Do after-the-fact version checking (below).
		 */
		break;
	case API_OPENGLES:
		/* NV10 and NV20 can support OpenGL ES 1.0 only.  Older chips
		 * cannot do even that.
		 */
		if ((screen->device->chipset & 0xf0) == 0x00) {
			*error = __DRI_CTX_ERROR_BAD_API;
			return GL_FALSE;
		} else if (minor_version != 0) {
			*error = __DRI_CTX_ERROR_BAD_VERSION;
			return GL_FALSE;
		}
		break;
	case API_OPENGLES2:
	case API_OPENGL_CORE:
		*error = __DRI_CTX_ERROR_BAD_API;
		return GL_FALSE;
	}

	/* API and flag filtering is handled in dri2CreateContextAttribs.
	 */
	(void) flags;

d89 1
a89 2
	if (!ctx) {
		*error = __DRI_CTX_ERROR_NO_MEMORY;
a90 1
	}
a95 19
	_mesa_compute_version(ctx);
	if (ctx->Version < major_version * 10 + minor_version) {
	   nouveau_context_destroy(dri_ctx);
	   *error = __DRI_CTX_ERROR_BAD_VERSION;
	   return GL_FALSE;
	}

	/* Exec table initialization requires the version to be computed */
	_mesa_initialize_dispatch_tables(ctx);
	_mesa_initialize_vbo_vtxfmt(ctx);

	if (nouveau_bo_new(context_dev(ctx), NOUVEAU_BO_VRAM, 0, 4096,
			   NULL, &nctx->fence)) {
		nouveau_context_destroy(dri_ctx);
		*error = __DRI_CTX_ERROR_NO_MEMORY;
		return GL_FALSE;
	}

	*error = __DRI_CTX_ERROR_SUCCESS;
d118 1
a118 2
	_mesa_initialize_context(ctx, API_OPENGL_COMPAT, visual,
                                 share_ctx, &functions);
d121 1
d131 2
a132 6
	ret = nouveau_object_new(&context_dev(ctx)->object, 0xbeef0000,
				 NOUVEAU_FIFO_CHANNEL_CLASS,
				 &(struct nv04_fifo){
					.vram = 0xbeef0201,
					.gart = 0xbeef0202
				 }, sizeof(struct nv04_fifo), &nctx->hw.chan);
d138 2
a139 31
	/* Allocate a client (thread data) */
	ret = nouveau_client_new(context_dev(ctx), &nctx->hw.client);
	if (ret) {
		nouveau_error("Error creating thread data\n");
		return GL_FALSE;
	}

	/* Allocate a push buffer */
	ret = nouveau_pushbuf_new(nctx->hw.client, nctx->hw.chan, 4,
				  512 * 1024, true, &nctx->hw.pushbuf);
	if (ret) {
		nouveau_error("Error allocating DMA push buffer\n");
		return GL_FALSE;
	}

	/* Allocate buffer context */
	ret = nouveau_bufctx_new(nctx->hw.client, 16, &nctx->hw.bufctx);
	if (ret) {
		nouveau_error("Error allocating buffer context\n");
		return GL_FALSE;
	}

	nctx->hw.pushbuf->user_priv = nctx->hw.bufctx;

	/* Allocate NULL object */
	ret = nouveau_object_new(nctx->hw.chan, 0x00000000, NV01_NULL_CLASS,
				 NULL, 0, &nctx->hw.null);
	if (ret) {
		nouveau_error("Error allocating NULL object\n");
		return GL_FALSE;
	}
d142 1
a142 6
	ctx->Extensions.EXT_blend_color = true;
	ctx->Extensions.EXT_blend_minmax = true;
	ctx->Extensions.EXT_framebuffer_blit = true;
	ctx->Extensions.EXT_packed_depth_stencil = true;
	ctx->Extensions.EXT_texture_filter_anisotropic = true;
	ctx->Extensions.NV_texture_env_combine4 = true;
d164 2
a165 4
	nouveau_bufctx_del(&nctx->hw.bufctx);
	nouveau_pushbuf_del(&nctx->hw.pushbuf);
	nouveau_client_del(&nctx->hw.client);
	nouveau_object_del(&nctx->hw.chan);
d168 1
a177 1
	nouveau_bo_ref(NULL, &nctx->fence);
d193 1
a193 1
	if (draw->lastStamp == draw->dri2.stamp)
d195 1
a195 1
	draw->lastStamp = draw->dri2.stamp;
d248 1
a248 1
			ret = nouveau_bo_name_get(s->bo, &old_name);
d258 2
a259 2
		ret = nouveau_bo_name_ref(context_dev(ctx),
					  buffers[i].name, &s->bo);
d263 1
a263 1
	_mesa_resize_framebuffer(ctx, fb, draw->w, draw->h);
d273 1
a273 1
	*stamp = draw->dri2.stamp;
d280 2
a281 2
	nouveau_bufctx_reset(to_nouveau_context(ctx)->hw.bufctx, BUFCTX_FB);
	PUSH_KICK(context_push(ctx));
a331 1
#if 0
a332 1
#endif
d334 1
a334 1
		PUSH_KICK(context_push(ctx));
d353 1
a353 1
	if (draw->dri2.stamp != *stamp)
d364 1
a364 1
	if (_mesa_is_winsys_fbo(ctx->DrawBuffer))
d368 1
a368 1
	if (_mesa_is_winsys_fbo(ctx->ReadBuffer))
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@a55 1
		       bool notify_reset,
d64 21
a84 3
	if (flags & ~__DRI_CTX_FLAG_DEBUG) {
		*error = __DRI_CTX_ERROR_UNKNOWN_FLAG;
		return false;
d87 3
a89 4
	if (notify_reset) {
		*error = __DRI_CTX_ERROR_UNKNOWN_ATTRIBUTE;
		return false;
	}
d91 1
a91 1
	ctx = screen->driver->context_create(screen, api, visual, share_ctx);
a96 2
	driContextSetFlags(ctx, flags);

d124 1
a124 2
nouveau_context_init(struct gl_context *ctx, gl_api api,
		     struct nouveau_screen *screen,
d142 1
a142 1
	_mesa_initialize_context(ctx, api, visual,
d201 2
a204 1
	ctx->Const.MaxColorAttachments = 1;
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d129 2
a130 2
	if (!_mesa_initialize_context(ctx, api, visual, share_ctx, &functions))
		return GL_FALSE;
a190 3

	/* This effectively disables 3D textures */
	ctx->Const.Max3DTextureLevels = 1;
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d129 2
a130 2
	_mesa_initialize_context(ctx, api, visual,
                                 share_ctx, &functions);
d191 3
@


