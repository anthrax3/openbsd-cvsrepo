head	1.12;
access;
symbols
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.11;
commitid	TnlogFl9nOv2eaRf;

1.11
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.10;
commitid	4ry2gvZGMXkCUD2n;

1.10
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.9;
commitid	mcxB0JvoI9gTDYXU;

1.9
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.8;
commitid	WPD6rgPryPkvXOr9;

1.8
date	2013.09.05.14.04.20;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.46;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.46;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.38;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.51;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.11.45;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.48.50;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.12
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */



#include "brw_context.h"
#include "brw_state.h"
#include "drivers/common/meta.h"
#include "intel_batchbuffer.h"
#include "intel_buffers.h"

static const struct brw_tracked_state *gen4_atoms[] =
{
   &brw_vs_prog, /* must do before GS prog, state base address. */
   &brw_ff_gs_prog, /* must do before state base address */

   &brw_interpolation_map,

   &brw_clip_prog, /* must do before state base address */
   &brw_sf_prog, /* must do before state base address */
   &brw_wm_prog, /* must do before state base address */

   /* Once all the programs are done, we know how large urb entry
    * sizes need to be and can decide if we need to change the urb
    * layout.
    */
   &brw_curbe_offsets,
   &brw_recalculate_urb_fence,

   &brw_cc_vp,
   &brw_cc_unit,

   /* Surface state setup.  Must come before the VS/WM unit.  The binding
    * table upload must be last.
    */
   &brw_vs_pull_constants,
   &brw_wm_pull_constants,
   &brw_renderbuffer_surfaces,
   &brw_texture_surfaces,
   &brw_vs_binding_table,
   &brw_wm_binding_table,

   &brw_fs_samplers,
   &brw_vs_samplers,

   /* These set up state for brw_psp_urb_cbs */
   &brw_wm_unit,
   &brw_sf_vp,
   &brw_sf_unit,
   &brw_vs_unit,		/* always required, enabled or not */
   &brw_clip_unit,
   &brw_gs_unit,

   /* Command packets:
    */
   &brw_invariant_state,
   &brw_state_base_address,

   &brw_binding_table_pointers,
   &brw_blend_constant_color,

   &brw_depthbuffer,

   &brw_polygon_stipple,
   &brw_polygon_stipple_offset,

   &brw_line_stipple,
   &brw_aa_line_parameters,

   &brw_psp_urb_cbs,

   &brw_drawing_rect,
   &brw_indices,
   &brw_index_buffer,
   &brw_vertices,

   &brw_constant_buffer
};

static const struct brw_tracked_state *gen6_atoms[] =
{
   &brw_vs_prog, /* must do before state base address */
   &brw_ff_gs_prog, /* must do before state base address */
   &brw_wm_prog, /* must do before state base address */

   &gen6_clip_vp,
   &gen6_sf_vp,

   /* Command packets: */

   /* must do before binding table pointers, cc state ptrs */
   &brw_state_base_address,

   &brw_cc_vp,
   &gen6_viewport_state,	/* must do after *_vp stages */

   &gen6_urb,
   &gen6_blend_state,		/* must do before cc unit */
   &gen6_color_calc_state,	/* must do before cc unit */
   &gen6_depth_stencil_state,	/* must do before cc unit */

   &gen6_vs_push_constants, /* Before vs_state */
   &gen6_wm_push_constants, /* Before wm_state */

   /* Surface state setup.  Must come before the VS/WM unit.  The binding
    * table upload must be last.
    */
   &brw_vs_pull_constants,
   &brw_vs_ubo_surfaces,
   &brw_wm_pull_constants,
   &brw_wm_ubo_surfaces,
   &gen6_renderbuffer_surfaces,
   &brw_texture_surfaces,
   &gen6_sol_surface,
   &brw_vs_binding_table,
   &gen6_gs_binding_table,
   &brw_wm_binding_table,

   &brw_fs_samplers,
   &brw_vs_samplers,
   &gen6_sampler_state,
   &gen6_multisample_state,

   &gen6_vs_state,
   &gen6_gs_state,
   &gen6_clip_state,
   &gen6_sf_state,
   &gen6_wm_state,

   &gen6_scissor_state,

   &gen6_binding_table_pointers,

   &brw_depthbuffer,

   &brw_polygon_stipple,
   &brw_polygon_stipple_offset,

   &brw_line_stipple,
   &brw_aa_line_parameters,

   &brw_drawing_rect,

   &brw_indices,
   &brw_index_buffer,
   &brw_vertices,
};

static const struct brw_tracked_state *gen7_atoms[] =
{
   &brw_vs_prog,
   &brw_gs_prog,
   &brw_wm_prog,

   /* Command packets: */

   /* must do before binding table pointers, cc state ptrs */
   &brw_state_base_address,

   &brw_cc_vp,
   &gen7_cc_viewport_state_pointer, /* must do after brw_cc_vp */
   &gen7_sf_clip_viewport,

   &gen7_push_constant_space,
   &gen7_urb,
   &gen6_blend_state,		/* must do before cc unit */
   &gen6_color_calc_state,	/* must do before cc unit */
   &gen6_depth_stencil_state,	/* must do before cc unit */

   &gen6_vs_push_constants, /* Before vs_state */
   &gen7_gs_push_constants, /* Before gs_state */
   &gen6_wm_push_constants, /* Before wm_surfaces and constant_buffer */

   /* Surface state setup.  Must come before the VS/WM unit.  The binding
    * table upload must be last.
    */
   &brw_vs_pull_constants,
   &brw_vs_ubo_surfaces,
   &brw_vs_abo_surfaces,
   &brw_gs_pull_constants,
   &brw_gs_ubo_surfaces,
   &brw_gs_abo_surfaces,
   &brw_wm_pull_constants,
   &brw_wm_ubo_surfaces,
   &brw_wm_abo_surfaces,
   &gen6_renderbuffer_surfaces,
   &brw_texture_surfaces,
   &brw_vs_binding_table,
   &brw_gs_binding_table,
   &brw_wm_binding_table,

   &brw_fs_samplers,
   &brw_vs_samplers,
   &brw_gs_samplers,
   &gen6_multisample_state,

   &gen7_disable_stages,
   &gen7_vs_state,
   &gen7_gs_state,
   &gen7_sol_state,
   &gen7_clip_state,
   &gen7_sbe_state,
   &gen7_sf_state,
   &gen7_wm_state,
   &gen7_ps_state,

   &gen6_scissor_state,

   &gen7_depthbuffer,

   &brw_polygon_stipple,
   &brw_polygon_stipple_offset,

   &brw_line_stipple,
   &brw_aa_line_parameters,

   &brw_drawing_rect,

   &brw_indices,
   &brw_index_buffer,
   &brw_vertices,

   &haswell_cut_index,
};

static const struct brw_tracked_state *gen8_atoms[] =
{
   &brw_vs_prog,
   &brw_gs_prog,
   &brw_wm_prog,

   /* Command packets: */
   &gen8_state_base_address,

   &brw_cc_vp,
   &gen7_cc_viewport_state_pointer, /* must do after brw_cc_vp */
   &gen8_sf_clip_viewport,

   &gen7_push_constant_space,
   &gen7_urb,
   &gen8_blend_state,
   &gen6_color_calc_state,

   &gen6_vs_push_constants, /* Before vs_state */
   &gen7_gs_push_constants, /* Before gs_state */
   &gen6_wm_push_constants, /* Before wm_surfaces and constant_buffer */

   /* Surface state setup.  Must come before the VS/WM unit.  The binding
    * table upload must be last.
    */
   &brw_vs_pull_constants,
   &brw_vs_ubo_surfaces,
   &brw_vs_abo_surfaces,
   &brw_gs_pull_constants,
   &brw_gs_ubo_surfaces,
   &brw_gs_abo_surfaces,
   &brw_wm_pull_constants,
   &brw_wm_ubo_surfaces,
   &brw_wm_abo_surfaces,
   &gen6_renderbuffer_surfaces,
   &brw_texture_surfaces,
   &brw_vs_binding_table,
   &brw_gs_binding_table,
   &brw_wm_binding_table,

   &brw_fs_samplers,
   &brw_vs_samplers,
   &brw_gs_samplers,
   &gen8_multisample_state,

   &gen8_disable_stages,
   &gen8_vs_state,
   &gen8_gs_state,
   &gen8_sol_state,
   &gen6_clip_state,
   &gen8_raster_state,
   &gen8_sbe_state,
   &gen8_sf_state,
   &gen8_ps_blend,
   &gen8_ps_extra,
   &gen8_ps_state,
   &gen8_wm_depth_stencil,
   &gen8_wm_state,

   &gen6_scissor_state,

   &gen7_depthbuffer,

   &brw_polygon_stipple,
   &brw_polygon_stipple_offset,

   &brw_line_stipple,
   &brw_aa_line_parameters,

   &brw_drawing_rect,

   &gen8_vf_topology,

   &brw_indices,
   &gen8_index_buffer,
   &gen8_vertices,

   &haswell_cut_index,
};

static void
brw_upload_initial_gpu_state(struct brw_context *brw)
{
   /* On platforms with hardware contexts, we can set our initial GPU state
    * right away rather than doing it via state atoms.  This saves a small
    * amount of overhead on every draw call.
    */
   if (!brw->hw_ctx)
      return;

   brw_upload_invariant_state(brw);

   if (brw->gen >= 8) {
      gen8_emit_3dstate_sample_pattern(brw);
   }
}

void brw_init_state( struct brw_context *brw )
{
   struct gl_context *ctx = &brw->ctx;
   const struct brw_tracked_state **atoms;
   int num_atoms;

   brw_init_caches(brw);

   if (brw->gen >= 8) {
      atoms = gen8_atoms;
      num_atoms = ARRAY_SIZE(gen8_atoms);
   } else if (brw->gen == 7) {
      atoms = gen7_atoms;
      num_atoms = ARRAY_SIZE(gen7_atoms);
   } else if (brw->gen == 6) {
      atoms = gen6_atoms;
      num_atoms = ARRAY_SIZE(gen6_atoms);
   } else {
      atoms = gen4_atoms;
      num_atoms = ARRAY_SIZE(gen4_atoms);
   }

   brw->atoms = atoms;
   brw->num_atoms = num_atoms;

   while (num_atoms--) {
      assert((*atoms)->dirty.mesa |
	     (*atoms)->dirty.brw |
	     (*atoms)->dirty.cache);
      assert((*atoms)->emit);
      atoms++;
   }

   brw_upload_initial_gpu_state(brw);

   brw->state.dirty.mesa = ~0;
   brw->state.dirty.brw = ~0;

   /* Make sure that brw->state.dirty.brw has enough bits to hold all possible
    * dirty flags.
    */
   STATIC_ASSERT(BRW_NUM_STATE_BITS <= 8 * sizeof(brw->state.dirty.brw));

   ctx->DriverFlags.NewTransformFeedback = BRW_NEW_TRANSFORM_FEEDBACK;
   ctx->DriverFlags.NewTransformFeedbackProg = BRW_NEW_TRANSFORM_FEEDBACK;
   ctx->DriverFlags.NewRasterizerDiscard = BRW_NEW_RASTERIZER_DISCARD;
   ctx->DriverFlags.NewUniformBuffer = BRW_NEW_UNIFORM_BUFFER;
   ctx->DriverFlags.NewAtomicBuffer = BRW_NEW_ATOMIC_BUFFER;
}


void brw_destroy_state( struct brw_context *brw )
{
   brw_destroy_caches(brw);
}

/***********************************************************************
 */

static bool
check_state(const struct brw_state_flags *a, const struct brw_state_flags *b)
{
   return ((a->mesa & b->mesa) |
	   (a->brw & b->brw) |
	   (a->cache & b->cache)) != 0;
}

static void accumulate_state( struct brw_state_flags *a,
			      const struct brw_state_flags *b )
{
   a->mesa |= b->mesa;
   a->brw |= b->brw;
   a->cache |= b->cache;
}


static void xor_states( struct brw_state_flags *result,
			     const struct brw_state_flags *a,
			      const struct brw_state_flags *b )
{
   result->mesa = a->mesa ^ b->mesa;
   result->brw = a->brw ^ b->brw;
   result->cache = a->cache ^ b->cache;
}

struct dirty_bit_map {
   uint32_t bit;
   char *name;
   uint32_t count;
};

#define DEFINE_BIT(name) {name, #name, 0}

static struct dirty_bit_map mesa_bits[] = {
   DEFINE_BIT(_NEW_MODELVIEW),
   DEFINE_BIT(_NEW_PROJECTION),
   DEFINE_BIT(_NEW_TEXTURE_MATRIX),
   DEFINE_BIT(_NEW_COLOR),
   DEFINE_BIT(_NEW_DEPTH),
   DEFINE_BIT(_NEW_EVAL),
   DEFINE_BIT(_NEW_FOG),
   DEFINE_BIT(_NEW_HINT),
   DEFINE_BIT(_NEW_LIGHT),
   DEFINE_BIT(_NEW_LINE),
   DEFINE_BIT(_NEW_PIXEL),
   DEFINE_BIT(_NEW_POINT),
   DEFINE_BIT(_NEW_POLYGON),
   DEFINE_BIT(_NEW_POLYGONSTIPPLE),
   DEFINE_BIT(_NEW_SCISSOR),
   DEFINE_BIT(_NEW_STENCIL),
   DEFINE_BIT(_NEW_TEXTURE),
   DEFINE_BIT(_NEW_TRANSFORM),
   DEFINE_BIT(_NEW_VIEWPORT),
   DEFINE_BIT(_NEW_ARRAY),
   DEFINE_BIT(_NEW_RENDERMODE),
   DEFINE_BIT(_NEW_BUFFERS),
   DEFINE_BIT(_NEW_CURRENT_ATTRIB),
   DEFINE_BIT(_NEW_MULTISAMPLE),
   DEFINE_BIT(_NEW_TRACK_MATRIX),
   DEFINE_BIT(_NEW_PROGRAM),
   DEFINE_BIT(_NEW_PROGRAM_CONSTANTS),
   DEFINE_BIT(_NEW_BUFFER_OBJECT),
   DEFINE_BIT(_NEW_FRAG_CLAMP),
   DEFINE_BIT(_NEW_VARYING_VP_INPUTS),
   {0, 0, 0}
};

static struct dirty_bit_map brw_bits[] = {
   DEFINE_BIT(BRW_NEW_URB_FENCE),
   DEFINE_BIT(BRW_NEW_FRAGMENT_PROGRAM),
   DEFINE_BIT(BRW_NEW_GEOMETRY_PROGRAM),
   DEFINE_BIT(BRW_NEW_VERTEX_PROGRAM),
   DEFINE_BIT(BRW_NEW_CURBE_OFFSETS),
   DEFINE_BIT(BRW_NEW_REDUCED_PRIMITIVE),
   DEFINE_BIT(BRW_NEW_PRIMITIVE),
   DEFINE_BIT(BRW_NEW_CONTEXT),
   DEFINE_BIT(BRW_NEW_PSP),
   DEFINE_BIT(BRW_NEW_SURFACES),
   DEFINE_BIT(BRW_NEW_VS_BINDING_TABLE),
   DEFINE_BIT(BRW_NEW_GS_BINDING_TABLE),
   DEFINE_BIT(BRW_NEW_PS_BINDING_TABLE),
   DEFINE_BIT(BRW_NEW_INDICES),
   DEFINE_BIT(BRW_NEW_VERTICES),
   DEFINE_BIT(BRW_NEW_BATCH),
   DEFINE_BIT(BRW_NEW_INDEX_BUFFER),
   DEFINE_BIT(BRW_NEW_VS_CONSTBUF),
   DEFINE_BIT(BRW_NEW_GS_CONSTBUF),
   DEFINE_BIT(BRW_NEW_PROGRAM_CACHE),
   DEFINE_BIT(BRW_NEW_STATE_BASE_ADDRESS),
   DEFINE_BIT(BRW_NEW_VUE_MAP_VS),
   DEFINE_BIT(BRW_NEW_VUE_MAP_GEOM_OUT),
   DEFINE_BIT(BRW_NEW_TRANSFORM_FEEDBACK),
   DEFINE_BIT(BRW_NEW_RASTERIZER_DISCARD),
   DEFINE_BIT(BRW_NEW_STATS_WM),
   DEFINE_BIT(BRW_NEW_UNIFORM_BUFFER),
   DEFINE_BIT(BRW_NEW_ATOMIC_BUFFER),
   DEFINE_BIT(BRW_NEW_META_IN_PROGRESS),
   DEFINE_BIT(BRW_NEW_INTERPOLATION_MAP),
   DEFINE_BIT(BRW_NEW_PUSH_CONSTANT_ALLOCATION),
   DEFINE_BIT(BRW_NEW_NUM_SAMPLES),
   {0, 0, 0}
};

static struct dirty_bit_map cache_bits[] = {
   DEFINE_BIT(CACHE_NEW_CC_VP),
   DEFINE_BIT(CACHE_NEW_CC_UNIT),
   DEFINE_BIT(CACHE_NEW_WM_PROG),
   DEFINE_BIT(CACHE_NEW_BLORP_BLIT_PROG),
   DEFINE_BIT(CACHE_NEW_BLORP_CONST_COLOR_PROG),
   DEFINE_BIT(CACHE_NEW_SAMPLER),
   DEFINE_BIT(CACHE_NEW_WM_UNIT),
   DEFINE_BIT(CACHE_NEW_SF_PROG),
   DEFINE_BIT(CACHE_NEW_SF_VP),
   DEFINE_BIT(CACHE_NEW_SF_UNIT),
   DEFINE_BIT(CACHE_NEW_VS_UNIT),
   DEFINE_BIT(CACHE_NEW_VS_PROG),
   DEFINE_BIT(CACHE_NEW_FF_GS_UNIT),
   DEFINE_BIT(CACHE_NEW_FF_GS_PROG),
   DEFINE_BIT(CACHE_NEW_GS_PROG),
   DEFINE_BIT(CACHE_NEW_CLIP_VP),
   DEFINE_BIT(CACHE_NEW_CLIP_UNIT),
   DEFINE_BIT(CACHE_NEW_CLIP_PROG),
   {0, 0, 0}
};


static void
brw_update_dirty_count(struct dirty_bit_map *bit_map, int32_t bits)
{
   int i;

   for (i = 0; i < 32; i++) {
      if (bit_map[i].bit == 0)
	 return;

      if (bit_map[i].bit & bits)
	 bit_map[i].count++;
   }
}

static void
brw_print_dirty_count(struct dirty_bit_map *bit_map)
{
   int i;

   for (i = 0; i < 32; i++) {
      if (bit_map[i].bit == 0)
	 return;

      fprintf(stderr, "0x%08x: %12d (%s)\n",
	      bit_map[i].bit, bit_map[i].count, bit_map[i].name);
   }
}

/***********************************************************************
 * Emit all state:
 */
void brw_upload_state(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   struct brw_state_flags *state = &brw->state.dirty;
   int i;
   static int dirty_count = 0;

   state->mesa |= brw->NewGLState;
   brw->NewGLState = 0;

   state->brw |= ctx->NewDriverState;
   ctx->NewDriverState = 0;

   if (0) {
      /* Always re-emit all state. */
      state->mesa |= ~0;
      state->brw |= ~0;
      state->cache |= ~0;
   }

   if (brw->fragment_program != ctx->FragmentProgram._Current) {
      brw->fragment_program = ctx->FragmentProgram._Current;
      brw->state.dirty.brw |= BRW_NEW_FRAGMENT_PROGRAM;
   }

   if (brw->geometry_program != ctx->GeometryProgram._Current) {
      brw->geometry_program = ctx->GeometryProgram._Current;
      brw->state.dirty.brw |= BRW_NEW_GEOMETRY_PROGRAM;
   }

   if (brw->vertex_program != ctx->VertexProgram._Current) {
      brw->vertex_program = ctx->VertexProgram._Current;
      brw->state.dirty.brw |= BRW_NEW_VERTEX_PROGRAM;
   }

   if (brw->meta_in_progress != _mesa_meta_in_progress(ctx)) {
      brw->meta_in_progress = _mesa_meta_in_progress(ctx);
      brw->state.dirty.brw |= BRW_NEW_META_IN_PROGRESS;
   }

   if (brw->num_samples != ctx->DrawBuffer->Visual.samples) {
      brw->num_samples = ctx->DrawBuffer->Visual.samples;
      brw->state.dirty.brw |= BRW_NEW_NUM_SAMPLES;
   }

   if ((state->mesa | state->cache | state->brw) == 0)
      return;

   if (unlikely(INTEL_DEBUG)) {
      /* Debug version which enforces various sanity checks on the
       * state flags which are generated and checked to help ensure
       * state atoms are ordered correctly in the list.
       */
      struct brw_state_flags examined, prev;
      memset(&examined, 0, sizeof(examined));
      prev = *state;

      for (i = 0; i < brw->num_atoms; i++) {
	 const struct brw_tracked_state *atom = brw->atoms[i];
	 struct brw_state_flags generated;

	 if (check_state(state, &atom->dirty)) {
	    atom->emit(brw);
	 }

	 accumulate_state(&examined, &atom->dirty);

	 /* generated = (prev ^ state)
	  * if (examined & generated)
	  *     fail;
	  */
	 xor_states(&generated, &prev, state);
	 assert(!check_state(&examined, &generated));
	 prev = *state;
      }
   }
   else {
      for (i = 0; i < brw->num_atoms; i++) {
	 const struct brw_tracked_state *atom = brw->atoms[i];

	 if (check_state(state, &atom->dirty)) {
	    atom->emit(brw);
	 }
      }
   }

   if (unlikely(INTEL_DEBUG & DEBUG_STATE)) {
      STATIC_ASSERT(ARRAY_SIZE(brw_bits) == BRW_NUM_STATE_BITS + 1);
      STATIC_ASSERT(ARRAY_SIZE(cache_bits) == BRW_MAX_CACHE + 1);

      brw_update_dirty_count(mesa_bits, state->mesa);
      brw_update_dirty_count(brw_bits, state->brw);
      brw_update_dirty_count(cache_bits, state->cache);
      if (dirty_count++ % 1000 == 0) {
	 brw_print_dirty_count(mesa_bits);
	 brw_print_dirty_count(brw_bits);
	 brw_print_dirty_count(cache_bits);
	 fprintf(stderr, "\n");
      }
   }
}


/**
 * Clear dirty bits to account for the fact that the state emitted by
 * brw_upload_state() has been committed to the hardware.  This is a separate
 * call from brw_upload_state() because it's possible that after the call to
 * brw_upload_state(), we will discover that we've run out of aperture space,
 * and need to rewind the batch buffer to the state it had before the
 * brw_upload_state() call.
 */
void
brw_clear_dirty_bits(struct brw_context *brw)
{
   struct brw_state_flags *state = &brw->state.dirty;
   memset(state, 0, sizeof(*state));
}
@


1.11
log
@Merge Mesa 10.2.9
@
text
@@


1.10
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d101 1
a101 1
   &brw_indices, /* must come before brw_vertices */
d111 1
a111 1
   &brw_gs_prog, /* must do before state base address */
a130 1
   &gen6_gs_push_constants, /* Before gs_state */
a137 2
   &brw_gs_pull_constants,
   &brw_gs_ubo_surfaces,
a148 1
   &brw_gs_samplers,
d172 1
a172 1
   &brw_indices, /* must come before brw_vertices */
d199 1
a199 1
   &gen6_gs_push_constants, /* Before gs_state */
d247 1
a247 1
   &brw_indices, /* must come before brw_vertices */
d273 1
a273 1
   &gen6_gs_push_constants, /* Before gs_state */
a331 1
   &gen8_pma_fix,
d387 1
a387 6
   brw->state.dirty.brw = ~0ull;

   /* ~0 is a nonsensical value which won't match anything we program, so
    * the programming will take effect on the first time around.
    */
   brw->pma_stall_bits = ~0;
a397 1
   ctx->DriverFlags.NewTextureBuffer = BRW_NEW_TEXTURE_BUFFER;
d437 1
a437 1
   uint64_t bit;
d474 1
a474 2
   /* Avoid sign extension problems. */
   {(unsigned) _NEW_VARYING_VP_INPUTS, "_NEW_VARYING_VP_INPUTS", 0},
a510 1
   DEFINE_BIT(BRW_NEW_TEXTURE_BUFFER),
d519 1
d538 1
a538 1
brw_update_dirty_count(struct dirty_bit_map *bit_map, uint64_t bits)
d540 6
a545 1
   for (int i = 0; bit_map[i].bit != 0; i++) {
d554 7
a560 2
   for (int i = 0; bit_map[i].bit != 0; i++) {
      fprintf(stderr, "0x%016lx: %12d (%s)\n",
d584 1
a584 1
      state->brw |= ~0ull;
@


1.9
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d101 1
a101 1
   &brw_indices,
d111 1
a111 1
   &brw_ff_gs_prog, /* must do before state base address */
d131 1
d139 2
d152 1
d176 1
a176 1
   &brw_indices,
d203 1
a203 1
   &gen7_gs_push_constants, /* Before gs_state */
d251 1
a251 1
   &brw_indices,
d277 1
a277 1
   &gen7_gs_push_constants, /* Before gs_state */
d336 1
d392 6
a397 1
   brw->state.dirty.brw = ~0;
d408 1
d448 1
a448 1
   uint32_t bit;
d485 2
a486 1
   DEFINE_BIT(_NEW_VARYING_VP_INPUTS),
d523 1
a531 1
   DEFINE_BIT(CACHE_NEW_BLORP_CONST_COLOR_PROG),
d550 1
a550 1
brw_update_dirty_count(struct dirty_bit_map *bit_map, int32_t bits)
d552 1
a552 6
   int i;

   for (i = 0; i < 32; i++) {
      if (bit_map[i].bit == 0)
	 return;

d561 2
a562 7
   int i;

   for (i = 0; i < 32; i++) {
      if (bit_map[i].bit == 0)
	 return;

      fprintf(stderr, "0x%08x: %12d (%s)\n",
d586 1
a586 1
      state->brw |= ~0;
@


1.8
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d31 1
a31 1
       
d43 4
a46 1
   &brw_gs_prog, /* must do before state base address */
d71 2
a72 1
   &brw_samplers,
d80 1
a80 1
   &brw_gs_unit,  
d111 1
a111 1
   &brw_gs_prog, /* must do before state base address */
d147 2
a148 1
   &brw_samplers,
d180 1
d192 1
d199 1
d207 4
d213 1
d217 1
d220 3
a222 1
   &gen7_samplers,
d227 1
d254 80
d346 2
a347 2
   if (brw->gen >= 7) {
      gen7_allocate_push_constants(brw);
d353 1
d359 4
a362 1
   if (brw->gen >= 7) {
d385 14
d467 1
d481 1
d497 1
d500 1
d504 1
d506 1
d508 3
d518 2
d527 2
a528 1
   DEFINE_BIT(CACHE_NEW_GS_UNIT),
d581 2
a582 1
   if (brw->emit_state_always) {
d593 5
d608 5
a615 2
   intel_check_front_buffer_rendering(brw);

d621 1
a621 1
      struct brw_state_flags examined, prev;      
d655 3
d668 1
d670 13
@


1.7
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d36 1
a39 6
/* This is used to initialize brw->state.atoms[].  We could use this
 * list directly except for a single atom, brw_constant_buffer, which
 * has a .dirty value which changes according to the parameters of the
 * current fragment and vertex programs, and so cannot be a static
 * value.
 */
a41 3
   &brw_check_fallback,

   &brw_wm_input_sizes,
d58 9
a66 2
   &brw_vs_constants, /* Before vs_surfaces and constant_buffer */
   &brw_wm_constants, /* Before wm_surfaces and constant_buffer */
d68 1
a68 5
   &brw_vs_surfaces,		/* must do before unit */
   &brw_wm_constant_surface,	/* must do before wm surfaces/bind bo */
   &brw_wm_surfaces,		/* must do before samplers and unit */
   &brw_wm_binding_table,
   &brw_wm_samplers,
d70 1
d80 1
a80 1
   &brw_invarient_state,
a105 3
   &brw_check_fallback,

   &brw_wm_input_sizes,
a113 1
   &brw_invarient_state,
a124 1
   &gen6_cc_state_pointers,
d126 15
a140 8
   &brw_vs_constants, /* Before vs_surfaces and constant_buffer */
   &brw_wm_constants, /* Before wm_surfaces and constant_buffer */
   &gen6_vs_constants, /* Before vs_state */
   &gen6_wm_constants, /* Before wm_state */

   &brw_vs_surfaces,		/* must do before unit */
   &brw_wm_constant_surface,	/* must do before wm surfaces/bind bo */
   &brw_wm_surfaces,		/* must do before samplers and unit */
d143 1
a143 1
   &brw_wm_samplers,
d145 1
d172 1
a172 1
const struct brw_tracked_state *gen7_atoms[] =
a173 3
   &brw_check_fallback,

   &brw_wm_input_sizes,
a174 1
   &brw_gs_prog,
a177 1
   &brw_invarient_state,
d190 14
a203 12
   &gen7_blend_state_pointer,
   &gen7_cc_state_pointer,
   &gen7_depth_stencil_state_pointer,

   &brw_vs_constants, /* Before vs_surfaces and constant_buffer */
   &brw_wm_constants, /* Before wm_surfaces and constant_buffer */
   &gen6_vs_constants, /* Before vs_state */
   &gen7_wm_constants, /* Before wm_surfaces and constant_buffer */

   &brw_vs_surfaces,		/* must do before unit */
   &gen7_wm_constant_surface,	/* must do before wm surfaces/bind bo */
   &gen7_wm_surfaces,		/* must do before samplers and unit */
d207 1
d211 1
d233 2
d237 16
d261 1
a261 1
   if (brw->intel.gen >= 7) {
d264 1
a264 1
   } else if (brw->intel.gen == 6) {
d272 3
d279 1
a279 5

      if ((*atoms)->prepare)
	 brw->prepare_atoms[brw->num_prepare_atoms++] = **atoms;
      if ((*atoms)->emit)
	 brw->emit_atoms[brw->num_emit_atoms++] = **atoms;
d282 2
a283 2
   assert(brw->num_emit_atoms <= ARRAY_SIZE(brw->emit_atoms));
   assert(brw->num_prepare_atoms <= ARRAY_SIZE(brw->prepare_atoms));
d295 2
a296 2
static GLuint check_state( const struct brw_state_flags *a,
			   const struct brw_state_flags *b )
a320 13
void
brw_clear_validated_bos(struct brw_context *brw)
{
   int i;

   /* Clear the last round of validated bos */
   for (i = 0; i < brw->state.validated_bo_count; i++) {
      drm_intel_bo_unreference(brw->state.validated_bos[i]);
      brw->state.validated_bos[i] = NULL;
   }
   brw->state.validated_bo_count = 0;
}

a348 1
   DEFINE_BIT(_NEW_PACKUNPACK),
d356 3
a365 1
   DEFINE_BIT(BRW_NEW_INPUT_DIMENSIONS),
a369 2
   DEFINE_BIT(BRW_NEW_WM_INPUT_DIMENSIONS),
   DEFINE_BIT(BRW_NEW_PROGRAM_CACHE),
d371 4
a374 1
   DEFINE_BIT(BRW_NEW_WM_SURFACES),
a375 1
   DEFINE_BIT(BRW_NEW_INDEX_BUFFER),
d378 1
a378 2
   DEFINE_BIT(BRW_NEW_NR_WM_SURFACES),
   DEFINE_BIT(BRW_NEW_NR_VS_SURFACES),
d380 1
a380 4
   DEFINE_BIT(BRW_NEW_WM_CONSTBUF),
   DEFINE_BIT(BRW_NEW_VS_BINDING_TABLE),
   DEFINE_BIT(BRW_NEW_GS_BINDING_TABLE),
   DEFINE_BIT(BRW_NEW_PS_BINDING_TABLE),
d382 5
a390 1
   DEFINE_BIT(CACHE_NEW_BLEND_STATE),
d425 1
a425 1
brw_print_dirty_count(struct dirty_bit_map *bit_map, int32_t bits)
d441 1
a441 1
void brw_validate_state( struct brw_context *brw )
d443 1
a443 2
   struct gl_context *ctx = &brw->intel.ctx;
   struct intel_context *intel = &brw->intel;
d445 2
a446 3
   const struct brw_tracked_state *atoms = brw->prepare_atoms;
   int num_atoms = brw->num_prepare_atoms;
   GLuint i;
d448 2
a449 1
   brw_clear_validated_bos(brw);
d451 2
a452 4
   state->mesa |= brw->intel.NewGLState;
   brw->intel.NewGLState = 0;

   brw_add_validated_bo(brw, intel->batch.bo);
d470 5
d478 1
a478 40
   brw->intel.Fallback = GL_FALSE; /* boolean, not bitfield */

   /* do prepare stage for all atoms */
   for (i = 0; i < num_atoms; i++) {
      const struct brw_tracked_state *atom = &atoms[i];

      if (check_state(state, &atom->dirty)) {
	 atom->prepare(brw);

	 if (brw->intel.Fallback)
	    break;
      }
   }

   intel_check_front_buffer_rendering(intel);

   /* Make sure that the textures which are referenced by the current
    * brw fragment program are actually present/valid.
    * If this fails, we can experience GPU lock-ups.
    */
   {
      const struct brw_fragment_program *fp;
      fp = brw_fragment_program_const(brw->fragment_program);
      if (fp) {
         assert((fp->tex_units_used & ctx->Texture._EnabledUnits)
                == fp->tex_units_used);
      }
   }
}


void brw_upload_state(struct brw_context *brw)
{
   struct brw_state_flags *state = &brw->state.dirty;
   const struct brw_tracked_state *atoms = brw->emit_atoms;
   int num_atoms = brw->num_emit_atoms;
   int i;
   static int dirty_count = 0;

   brw_clear_validated_bos(brw);
d489 2
a490 2
      for (i = 0; i < num_atoms; i++) {
	 const struct brw_tracked_state *atom = &atoms[i];
a492 3
	 if (brw->intel.Fallback)
	    break;

d509 2
a510 5
      for (i = 0; i < num_atoms; i++) {
	 const struct brw_tracked_state *atom = &atoms[i];

	 if (brw->intel.Fallback)
	    break;
d523 3
a525 3
	 brw_print_dirty_count(mesa_bits, state->mesa);
	 brw_print_dirty_count(brw_bits, state->brw);
	 brw_print_dirty_count(cache_bits, state->cache);
d530 1
a530 2
   if (!brw->intel.Fallback)
      memset(state, 0, sizeof(*state));
@


1.6
log
@Merge Mesa 7.10.3
@
text
@d50 5
a54 5
   &brw_vs_prog,
   &brw_gs_prog, 
   &brw_clip_prog, 
   &brw_sf_prog,
   &brw_wm_prog,
d63 1
d108 1
a108 1
const struct brw_tracked_state *gen6_atoms[] =
d113 3
a115 3
   &brw_vs_prog,
   &brw_gs_prog,
   &brw_wm_prog,
d123 4
d137 1
a154 1
   &gen6_scissor_state_pointers,
d156 30
d188 33
a220 1
   &gen6_binding_table_pointers,
d222 1
a222 1
   &brw_depthbuffer,
d237 1
d240 3
d244 25
a274 1
   brw_destroy_batch_cache(brw);
d280 2
a281 2
static GLboolean check_state( const struct brw_state_flags *a,
			      const struct brw_state_flags *b )
d283 3
a285 3
   return ((a->mesa & b->mesa) ||
	   (a->brw & b->brw) ||
	   (a->cache & b->cache));
a330 1
   DEFINE_BIT(_NEW_ACCUM),
d368 1
a370 1
   DEFINE_BIT(BRW_NEW_BINDING_TABLE),
d375 8
a382 1
   DEFINE_BIT(BRW_NEW_DEPTH_BUFFER),
a390 1
   DEFINE_BIT(CACHE_NEW_SAMPLER_DEFAULT_COLOR),
d443 2
a445 2
   const struct brw_tracked_state **atoms;
   int num_atoms;
d452 1
a452 9
   brw_add_validated_bo(brw, intel->batch->buf);

   if (intel->gen >= 6) {
      atoms = gen6_atoms;
      num_atoms = ARRAY_SIZE(gen6_atoms);
   } else {
      atoms = gen4_atoms;
      num_atoms = ARRAY_SIZE(gen4_atoms);
   }
d470 1
a470 3
   if (state->mesa == 0 &&
       state->cache == 0 &&
       state->brw == 0)
a472 3
   if (brw->state.dirty.brw & BRW_NEW_CONTEXT)
      brw_clear_batch_cache(brw);

d477 1
a477 1
      const struct brw_tracked_state *atom = atoms[i];
d479 2
a480 2
      if (brw->intel.Fallback)
         break;
d482 2
a483 4
      if (check_state(state, &atom->dirty)) {
         if (atom->prepare) {
            atom->prepare(brw);
        }
a505 1
   struct intel_context *intel = &brw->intel;
d507 2
a510 10
   const struct brw_tracked_state **atoms;
   int num_atoms;

   if (intel->gen >= 6) {
      atoms = gen6_atoms;
      num_atoms = ARRAY_SIZE(gen6_atoms);
   } else {
      atoms = gen4_atoms;
      num_atoms = ARRAY_SIZE(gen4_atoms);
   }
d524 1
a524 1
	 const struct brw_tracked_state *atom = atoms[i];
a526 4
	 assert(atom->dirty.mesa ||
		atom->dirty.brw ||
		atom->dirty.cache);

d531 1
a531 3
	    if (atom->emit) {
	       atom->emit( brw );
	    }
d547 1
a547 1
	 const struct brw_tracked_state *atom = atoms[i];
d553 1
a553 3
	    if (atom->emit) {
	       atom->emit( brw );
	    }
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a37 1
#include "intel_chipset.h"
a62 1
   &brw_cc_vp,
d65 3
d71 1
a117 1
   &gen6_cc_vp,
d130 4
d137 1
d149 1
d218 1
a218 1
      dri_bo_unreference(brw->state.validated_bos[i]);
a235 1
   DEFINE_BIT(_NEW_COLOR_MATRIX),
d275 2
a302 2
   DEFINE_BIT(CACHE_NEW_SURFACE),
   DEFINE_BIT(CACHE_NEW_SURF_BIND),
d340 1
a340 1
   GLcontext *ctx = &brw->intel.ctx;
d354 1
a354 1
   if (IS_GEN6(intel->intelScreen->deviceID)) {
d428 1
a428 1
   if (IS_GEN6(intel->intelScreen->deviceID)) {
d438 1
a438 1
   if (INTEL_DEBUG) {
d490 1
a490 1
   if (INTEL_DEBUG & DEBUG_STATE) {
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d37 2
d46 1
a46 1
const struct brw_tracked_state *atoms[] =
a63 1

d67 3
a69 1
   &brw_wm_surfaces,		/* must do before samplers */
d94 1
a94 7
   /* Ordering of the commands below is documented as fixed.  
    */
#if 0
   &brw_pipelined_state_pointers,
   &brw_urb_fence,
   &brw_constant_buffer_state,
#else
a95 1
#endif
d99 1
d102 1
a102 1
   NULL,			/* brw_constant_buffer */
d105 47
d153 2
a154 3
void brw_init_state( struct brw_context *brw )
{
   GLuint i;
d156 1
a156 1
   brw_init_cache(brw);
d158 4
a161 3
   brw->state.atoms = _mesa_malloc(sizeof(atoms));
   brw->state.nr_atoms = sizeof(atoms)/sizeof(*atoms);
   _mesa_memcpy(brw->state.atoms, atoms, sizeof(atoms));
d163 3
a165 9
   /* Patch in a pointer to the dynamic state atom:
    */
   for (i = 0; i < brw->state.nr_atoms; i++)
      if (brw->state.atoms[i] == NULL)
	 brw->state.atoms[i] = &brw->curbe.tracked_state;

   _mesa_memcpy(&brw->curbe.tracked_state, 
		&brw_constant_buffer,
		sizeof(brw_constant_buffer));
d171 1
a171 6
   if (brw->state.atoms) {
      _mesa_free(brw->state.atoms);
      brw->state.atoms = NULL;
   }

   brw_destroy_cache(brw);
d204 1
a204 1
static void
d254 1
a267 1
   DEFINE_BIT(BRW_NEW_INPUT_VARYING),
a268 1
   DEFINE_BIT(BRW_NEW_FENCE),
d270 1
d278 1
d338 2
d348 8
d359 1
d378 1
a378 1
      brw_clear_batch_cache_flush(brw);
d380 1
a380 1
   brw->intel.Fallback = 0;
d383 2
a384 2
   for (i = 0; i < Elements(atoms); i++) {
      const struct brw_tracked_state *atom = brw->state.atoms[i];
d395 15
d415 1
d419 10
d438 1
a438 1
      _mesa_memset(&examined, 0, sizeof(examined));
d441 2
a442 2
      for (i = 0; i < brw->state.nr_atoms; i++) {	 
	 const struct brw_tracked_state *atom = brw->state.atoms[i];
d470 2
a471 2
      for (i = 0; i < Elements(atoms); i++) {	 
	 const struct brw_tracked_state *atom = brw->state.atoms[i];
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a35 1
#include "dri_bufmgr.h"
a47 2
   &brw_tnl_vertprog,
   &brw_active_vertprog,
a79 1
   &brw_pipe_control,
d101 3
d171 123
d298 1
a298 1
int brw_validate_state( struct brw_context *brw )
d300 2
d303 3
a305 1
   GLuint i, ret, count;
d310 1
a310 2
   if (brw->wrap)
      state->brw |= BRW_NEW_CONTEXT;
d317 2
a318 6
   /* texenv program needs to notify us somehow when this happens: 
    * Some confusion about which state flag should represent this change.
    */
   if (brw->fragment_program != brw->attribs.FragmentProgram->_Current) {
      brw->fragment_program = brw->attribs.FragmentProgram->_Current;
      brw->state.dirty.mesa |= _NEW_PROGRAM;
d322 4
d330 1
a330 1
      return 0;
a336 2
   count = 0;

d346 1
a346 3
            ret = atom->prepare(brw);
            if (ret)
               return ret;
d350 2
d353 7
a359 2
   if (brw->intel.Fallback)
      return 0;
d382 1
a382 1
	    if (atom->emit)
d384 1
d406 1
a406 1
	    if (atom->emit)
d408 1
d413 12
a426 1
   return 0;
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d36 1
a36 1
#include "bufmgr.h"
a87 1
   &brw_drawing_rect,
d114 1
a114 2
   brw_init_pools(brw);
   brw_init_caches(brw);
d139 1
a139 1
   brw_destroy_caches(brw);
a140 1
   brw_destroy_pools(brw);   
d176 1
a176 1
void brw_validate_state( struct brw_context *brw )
d179 1
a179 1
   GLuint i;
d205 1
a205 1
      return;
d210 19
d230 2
a231 6
   /* Make an early reference to the state pools, as we don't cope
    * well with them being evicted from here down.
    */
   (void)bmBufferOffset(&brw->intel, brw->pool[BRW_GS_POOL].buffer);
   (void)bmBufferOffset(&brw->intel, brw->pool[BRW_SS_POOL].buffer);
   (void)bmBufferOffset(&brw->intel, brw->intel.batch->buffer);
d249 3
a251 1
	 assert(atom->update);
d254 2
a255 3
	    brw->state.atoms[i]->update( brw );
	    
/* 	    emit_foo(brw); */
d271 9
a279 2
	 if (check_state(state, &brw->state.atoms[i]->dirty))
	    brw->state.atoms[i]->update( brw );
d283 3
a285 1
   memset(state, 0, sizeof(*state));
@


1.1
log
@Initial revision
@
text
@d95 1
a95 1

@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d36 1
a37 1
#include "intel_buffers.h"
d45 1
a45 1
static const struct brw_tracked_state *gen4_atoms[] =
d49 2
d65 2
d69 1
a69 7
   &brw_vs_constants, /* Before vs_surfaces and constant_buffer */
   &brw_wm_constants, /* Before wm_surfaces and constant_buffer */

   &brw_vs_surfaces,		/* must do before unit */
   &brw_wm_constant_surface,	/* must do before wm surfaces/bind bo */
   &brw_wm_surfaces,		/* must do before samplers and unit */
   &brw_wm_binding_table,
d83 1
d88 1
a94 1
   &brw_aa_line_parameters,
d96 7
d104 1
a105 4
   &brw_drawing_rect,
   &brw_indices,
   &brw_index_buffer,
   &brw_vertices,
d107 1
a107 1
   &brw_constant_buffer
d110 2
a111 1
const struct brw_tracked_state *gen6_atoms[] =
d113 1
a113 1
   &brw_check_fallback,
d115 2
a116 4
   &brw_wm_input_sizes,
   &brw_vs_prog,
   &brw_gs_prog,
   &brw_wm_prog,
d118 3
a120 2
   &gen6_clip_vp,
   &gen6_sf_vp,
d122 9
a130 54
   /* Command packets: */
   &brw_invarient_state,

   &gen6_viewport_state,	/* must do after *_vp stages */

   &gen6_urb,
   &gen6_blend_state,		/* must do before cc unit */
   &gen6_color_calc_state,	/* must do before cc unit */
   &gen6_depth_stencil_state,	/* must do before cc unit */
   &gen6_cc_state_pointers,

   &brw_vs_constants, /* Before vs_surfaces and constant_buffer */
   &brw_wm_constants, /* Before wm_surfaces and constant_buffer */
   &gen6_wm_constants, /* Before wm_state */

   &brw_vs_surfaces,		/* must do before unit */
   &brw_wm_constant_surface,	/* must do before wm surfaces/bind bo */
   &brw_wm_surfaces,		/* must do before samplers and unit */
   &brw_wm_binding_table,

   &brw_wm_samplers,
   &gen6_sampler_state,

   &gen6_vs_state,
   &gen6_gs_state,
   &gen6_clip_state,
   &gen6_sf_state,
   &gen6_wm_state,

   &gen6_scissor_state,
   &gen6_scissor_state_pointers,

   &brw_state_base_address,

   &gen6_binding_table_pointers,

   &brw_depthbuffer,

   &brw_polygon_stipple,
   &brw_polygon_stipple_offset,

   &brw_line_stipple,
   &brw_aa_line_parameters,

   &brw_drawing_rect,

   &brw_indices,
   &brw_index_buffer,
   &brw_vertices,
};

void brw_init_state( struct brw_context *brw )
{
   brw_init_caches(brw);
d136 5
d143 1
a174 123
void
brw_clear_validated_bos(struct brw_context *brw)
{
   int i;

   /* Clear the last round of validated bos */
   for (i = 0; i < brw->state.validated_bo_count; i++) {
      drm_intel_bo_unreference(brw->state.validated_bos[i]);
      brw->state.validated_bos[i] = NULL;
   }
   brw->state.validated_bo_count = 0;
}

struct dirty_bit_map {
   uint32_t bit;
   char *name;
   uint32_t count;
};

#define DEFINE_BIT(name) {name, #name, 0}

static struct dirty_bit_map mesa_bits[] = {
   DEFINE_BIT(_NEW_MODELVIEW),
   DEFINE_BIT(_NEW_PROJECTION),
   DEFINE_BIT(_NEW_TEXTURE_MATRIX),
   DEFINE_BIT(_NEW_ACCUM),
   DEFINE_BIT(_NEW_COLOR),
   DEFINE_BIT(_NEW_DEPTH),
   DEFINE_BIT(_NEW_EVAL),
   DEFINE_BIT(_NEW_FOG),
   DEFINE_BIT(_NEW_HINT),
   DEFINE_BIT(_NEW_LIGHT),
   DEFINE_BIT(_NEW_LINE),
   DEFINE_BIT(_NEW_PIXEL),
   DEFINE_BIT(_NEW_POINT),
   DEFINE_BIT(_NEW_POLYGON),
   DEFINE_BIT(_NEW_POLYGONSTIPPLE),
   DEFINE_BIT(_NEW_SCISSOR),
   DEFINE_BIT(_NEW_STENCIL),
   DEFINE_BIT(_NEW_TEXTURE),
   DEFINE_BIT(_NEW_TRANSFORM),
   DEFINE_BIT(_NEW_VIEWPORT),
   DEFINE_BIT(_NEW_PACKUNPACK),
   DEFINE_BIT(_NEW_ARRAY),
   DEFINE_BIT(_NEW_RENDERMODE),
   DEFINE_BIT(_NEW_BUFFERS),
   DEFINE_BIT(_NEW_MULTISAMPLE),
   DEFINE_BIT(_NEW_TRACK_MATRIX),
   DEFINE_BIT(_NEW_PROGRAM),
   DEFINE_BIT(_NEW_PROGRAM_CONSTANTS),
   {0, 0, 0}
};

static struct dirty_bit_map brw_bits[] = {
   DEFINE_BIT(BRW_NEW_URB_FENCE),
   DEFINE_BIT(BRW_NEW_FRAGMENT_PROGRAM),
   DEFINE_BIT(BRW_NEW_VERTEX_PROGRAM),
   DEFINE_BIT(BRW_NEW_INPUT_DIMENSIONS),
   DEFINE_BIT(BRW_NEW_CURBE_OFFSETS),
   DEFINE_BIT(BRW_NEW_REDUCED_PRIMITIVE),
   DEFINE_BIT(BRW_NEW_PRIMITIVE),
   DEFINE_BIT(BRW_NEW_CONTEXT),
   DEFINE_BIT(BRW_NEW_WM_INPUT_DIMENSIONS),
   DEFINE_BIT(BRW_NEW_PSP),
   DEFINE_BIT(BRW_NEW_WM_SURFACES),
   DEFINE_BIT(BRW_NEW_BINDING_TABLE),
   DEFINE_BIT(BRW_NEW_INDICES),
   DEFINE_BIT(BRW_NEW_INDEX_BUFFER),
   DEFINE_BIT(BRW_NEW_VERTICES),
   DEFINE_BIT(BRW_NEW_BATCH),
   DEFINE_BIT(BRW_NEW_DEPTH_BUFFER),
   {0, 0, 0}
};

static struct dirty_bit_map cache_bits[] = {
   DEFINE_BIT(CACHE_NEW_BLEND_STATE),
   DEFINE_BIT(CACHE_NEW_CC_VP),
   DEFINE_BIT(CACHE_NEW_CC_UNIT),
   DEFINE_BIT(CACHE_NEW_WM_PROG),
   DEFINE_BIT(CACHE_NEW_SAMPLER_DEFAULT_COLOR),
   DEFINE_BIT(CACHE_NEW_SAMPLER),
   DEFINE_BIT(CACHE_NEW_WM_UNIT),
   DEFINE_BIT(CACHE_NEW_SF_PROG),
   DEFINE_BIT(CACHE_NEW_SF_VP),
   DEFINE_BIT(CACHE_NEW_SF_UNIT),
   DEFINE_BIT(CACHE_NEW_VS_UNIT),
   DEFINE_BIT(CACHE_NEW_VS_PROG),
   DEFINE_BIT(CACHE_NEW_GS_UNIT),
   DEFINE_BIT(CACHE_NEW_GS_PROG),
   DEFINE_BIT(CACHE_NEW_CLIP_VP),
   DEFINE_BIT(CACHE_NEW_CLIP_UNIT),
   DEFINE_BIT(CACHE_NEW_CLIP_PROG),
   {0, 0, 0}
};


static void
brw_update_dirty_count(struct dirty_bit_map *bit_map, int32_t bits)
{
   int i;

   for (i = 0; i < 32; i++) {
      if (bit_map[i].bit == 0)
	 return;

      if (bit_map[i].bit & bits)
	 bit_map[i].count++;
   }
}

static void
brw_print_dirty_count(struct dirty_bit_map *bit_map, int32_t bits)
{
   int i;

   for (i = 0; i < 32; i++) {
      if (bit_map[i].bit == 0)
	 return;

      fprintf(stderr, "0x%08x: %12d (%s)\n",
	      bit_map[i].bit, bit_map[i].count, bit_map[i].name);
   }
}
a180 2
   struct gl_context *ctx = &brw->intel.ctx;
   struct intel_context *intel = &brw->intel;
a182 4
   const struct brw_tracked_state **atoms;
   int num_atoms;

   brw_clear_validated_bos(brw);
d187 2
a188 9
   brw_add_validated_bo(brw, intel->batch->buf);

   if (intel->gen >= 6) {
      atoms = gen6_atoms;
      num_atoms = ARRAY_SIZE(gen6_atoms);
   } else {
      atoms = gen4_atoms;
      num_atoms = ARRAY_SIZE(gen4_atoms);
   }
a192 1
      state->cache |= ~0;
d195 6
a200 2
   if (brw->fragment_program != ctx->FragmentProgram._Current) {
      brw->fragment_program = ctx->FragmentProgram._Current;
a203 4
   if (brw->vertex_program != ctx->VertexProgram._Current) {
      brw->vertex_program = ctx->VertexProgram._Current;
      brw->state.dirty.brw |= BRW_NEW_VERTEX_PROGRAM;
   }
d211 1
a211 1
      brw_clear_batch_cache(brw);
a212 1
   brw->intel.Fallback = GL_FALSE; /* boolean, not bitfield */
d214 2
a215 19
   /* do prepare stage for all atoms */
   for (i = 0; i < num_atoms; i++) {
      const struct brw_tracked_state *atom = atoms[i];

      if (brw->intel.Fallback)
         break;

      if (check_state(state, &atom->dirty)) {
         if (atom->prepare) {
            atom->prepare(brw);
        }
      }
   }

   intel_check_front_buffer_rendering(intel);

   /* Make sure that the textures which are referenced by the current
    * brw fragment program are actually present/valid.
    * If this fails, we can experience GPU lock-ups.
d217 3
a219 9
   {
      const struct brw_fragment_program *fp;
      fp = brw_fragment_program_const(brw->fragment_program);
      if (fp) {
         assert((fp->tex_units_used & ctx->Texture._EnabledUnits)
                == fp->tex_units_used);
      }
   }
}
d221 1
a221 21

void brw_upload_state(struct brw_context *brw)
{
   struct intel_context *intel = &brw->intel;
   struct brw_state_flags *state = &brw->state.dirty;
   int i;
   static int dirty_count = 0;
   const struct brw_tracked_state **atoms;
   int num_atoms;

   if (intel->gen >= 6) {
      atoms = gen6_atoms;
      num_atoms = ARRAY_SIZE(gen6_atoms);
   } else {
      atoms = gen4_atoms;
      num_atoms = ARRAY_SIZE(gen4_atoms);
   }

   brw_clear_validated_bos(brw);

   if (unlikely(INTEL_DEBUG)) {
d227 1
a227 1
      memset(&examined, 0, sizeof(examined));
d230 2
a231 2
      for (i = 0; i < num_atoms; i++) {
	 const struct brw_tracked_state *atom = atoms[i];
d237 1
a237 3

	 if (brw->intel.Fallback)
	    break;
d240 3
a242 3
	    if (atom->emit) {
	       atom->emit( brw );
	    }
d257 3
a259 23
      for (i = 0; i < num_atoms; i++) {
	 const struct brw_tracked_state *atom = atoms[i];

	 if (brw->intel.Fallback)
	    break;

	 if (check_state(state, &atom->dirty)) {
	    if (atom->emit) {
	       atom->emit( brw );
	    }
	 }
      }
   }

   if (unlikely(INTEL_DEBUG & DEBUG_STATE)) {
      brw_update_dirty_count(mesa_bits, state->mesa);
      brw_update_dirty_count(brw_bits, state->brw);
      brw_update_dirty_count(cache_bits, state->cache);
      if (dirty_count++ % 1000 == 0) {
	 brw_print_dirty_count(mesa_bits, state->mesa);
	 brw_print_dirty_count(brw_bits, state->brw);
	 brw_print_dirty_count(cache_bits, state->cache);
	 fprintf(stderr, "\n");
d263 1
a263 2
   if (!brw->intel.Fallback)
      memset(state, 0, sizeof(*state));
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@a35 1
#include "drivers/common/meta.h"
d39 6
d47 8
a54 5
   &brw_vs_prog, /* must do before GS prog, state base address. */
   &brw_gs_prog, /* must do before state base address */
   &brw_clip_prog, /* must do before state base address */
   &brw_sf_prog, /* must do before state base address */
   &brw_wm_prog, /* must do before state base address */
a62 1
   &brw_cc_vp,
d65 6
a70 8
   /* Surface state setup.  Must come before the VS/WM unit.  The binding
    * table upload must be last.
    */
   &brw_vs_pull_constants,
   &brw_wm_pull_constants,
   &brw_renderbuffer_surfaces,
   &brw_texture_surfaces,
   &brw_vs_binding_table,
d72 1
a73 3
   &brw_samplers,

   /* These set up state for brw_psp_urb_cbs */
d83 1
a83 1
   &brw_invariant_state,
d107 1
a107 1
static const struct brw_tracked_state *gen6_atoms[] =
d109 6
a114 3
   &brw_vs_prog, /* must do before state base address */
   &brw_gs_prog, /* must do before state base address */
   &brw_wm_prog, /* must do before state base address */
d120 1
a121 4
   /* must do before binding table pointers, cc state ptrs */
   &brw_state_base_address,

   &brw_cc_vp,
d128 1
d130 7
a136 15
   &gen6_vs_push_constants, /* Before vs_state */
   &gen6_wm_push_constants, /* Before wm_state */

   /* Surface state setup.  Must come before the VS/WM unit.  The binding
    * table upload must be last.
    */
   &brw_vs_pull_constants,
   &brw_vs_ubo_surfaces,
   &brw_wm_pull_constants,
   &brw_wm_ubo_surfaces,
   &gen6_renderbuffer_surfaces,
   &brw_texture_surfaces,
   &gen6_sol_surface,
   &brw_vs_binding_table,
   &gen6_gs_binding_table,
d139 1
a139 1
   &brw_samplers,
a140 1
   &gen6_multisample_state,
d149 3
a169 82
static const struct brw_tracked_state *gen7_atoms[] =
{
   &brw_vs_prog,
   &brw_wm_prog,

   /* Command packets: */

   /* must do before binding table pointers, cc state ptrs */
   &brw_state_base_address,

   &brw_cc_vp,
   &gen7_cc_viewport_state_pointer, /* must do after brw_cc_vp */
   &gen7_sf_clip_viewport,

   &gen7_urb,
   &gen6_blend_state,		/* must do before cc unit */
   &gen6_color_calc_state,	/* must do before cc unit */
   &gen6_depth_stencil_state,	/* must do before cc unit */

   &gen6_vs_push_constants, /* Before vs_state */
   &gen6_wm_push_constants, /* Before wm_surfaces and constant_buffer */

   /* Surface state setup.  Must come before the VS/WM unit.  The binding
    * table upload must be last.
    */
   &brw_vs_pull_constants,
   &brw_vs_ubo_surfaces,
   &brw_wm_pull_constants,
   &brw_wm_ubo_surfaces,
   &gen6_renderbuffer_surfaces,
   &brw_texture_surfaces,
   &brw_vs_binding_table,
   &brw_wm_binding_table,

   &gen7_samplers,
   &gen6_multisample_state,

   &gen7_disable_stages,
   &gen7_vs_state,
   &gen7_sol_state,
   &gen7_clip_state,
   &gen7_sbe_state,
   &gen7_sf_state,
   &gen7_wm_state,
   &gen7_ps_state,

   &gen6_scissor_state,

   &gen7_depthbuffer,

   &brw_polygon_stipple,
   &brw_polygon_stipple_offset,

   &brw_line_stipple,
   &brw_aa_line_parameters,

   &brw_drawing_rect,

   &brw_indices,
   &brw_index_buffer,
   &brw_vertices,

   &haswell_cut_index,
};

static void
brw_upload_initial_gpu_state(struct brw_context *brw)
{
   /* On platforms with hardware contexts, we can set our initial GPU state
    * right away rather than doing it via state atoms.  This saves a small
    * amount of overhead on every draw call.
    */
   if (!brw->hw_ctx)
      return;

   brw_upload_invariant_state(brw);

   if (brw->gen >= 7) {
      gen7_allocate_push_constants(brw);
   }
}

a171 3
   const struct brw_tracked_state **atoms;
   int num_atoms;

a172 24

   if (brw->gen >= 7) {
      atoms = gen7_atoms;
      num_atoms = ARRAY_SIZE(gen7_atoms);
   } else if (brw->gen == 6) {
      atoms = gen6_atoms;
      num_atoms = ARRAY_SIZE(gen6_atoms);
   } else {
      atoms = gen4_atoms;
      num_atoms = ARRAY_SIZE(gen4_atoms);
   }

   brw->atoms = atoms;
   brw->num_atoms = num_atoms;

   while (num_atoms--) {
      assert((*atoms)->dirty.mesa |
	     (*atoms)->dirty.brw |
	     (*atoms)->dirty.cache);
      assert((*atoms)->emit);
      atoms++;
   }

   brw_upload_initial_gpu_state(brw);
d179 1
d185 2
a186 2
static bool
check_state(const struct brw_state_flags *a, const struct brw_state_flags *b)
d188 3
a190 3
   return ((a->mesa & b->mesa) |
	   (a->brw & b->brw) |
	   (a->cache & b->cache)) != 0;
d211 13
d236 1
d253 1
a260 3
   DEFINE_BIT(_NEW_BUFFER_OBJECT),
   DEFINE_BIT(_NEW_FRAG_CLAMP),
   DEFINE_BIT(_NEW_VARYING_VP_INPUTS),
d268 1
d273 1
d275 2
a276 4
   DEFINE_BIT(BRW_NEW_SURFACES),
   DEFINE_BIT(BRW_NEW_VS_BINDING_TABLE),
   DEFINE_BIT(BRW_NEW_GS_BINDING_TABLE),
   DEFINE_BIT(BRW_NEW_PS_BINDING_TABLE),
d278 1
d281 1
a281 9
   DEFINE_BIT(BRW_NEW_INDEX_BUFFER),
   DEFINE_BIT(BRW_NEW_VS_CONSTBUF),
   DEFINE_BIT(BRW_NEW_PROGRAM_CACHE),
   DEFINE_BIT(BRW_NEW_STATE_BASE_ADDRESS),
   DEFINE_BIT(BRW_NEW_VUE_MAP_GEOM_OUT),
   DEFINE_BIT(BRW_NEW_TRANSFORM_FEEDBACK),
   DEFINE_BIT(BRW_NEW_RASTERIZER_DISCARD),
   DEFINE_BIT(BRW_NEW_UNIFORM_BUFFER),
   DEFINE_BIT(BRW_NEW_META_IN_PROGRESS),
d286 1
d290 1
d322 1
a322 1
brw_print_dirty_count(struct dirty_bit_map *bit_map)
d338 1
a338 1
void brw_upload_state(struct brw_context *brw)
d340 2
a341 1
   struct gl_context *ctx = &brw->ctx;
d343 5
a347 2
   int i;
   static int dirty_count = 0;
d349 2
a350 2
   state->mesa |= brw->NewGLState;
   brw->NewGLState = 0;
d352 9
a360 2
   state->brw |= ctx->NewDriverState;
   ctx->NewDriverState = 0;
d378 37
a414 3
   if (brw->meta_in_progress != _mesa_meta_in_progress(ctx)) {
      brw->meta_in_progress = _mesa_meta_in_progress(ctx);
      brw->state.dirty.brw |= BRW_NEW_META_IN_PROGRESS;
d416 1
a417 2
   if ((state->mesa | state->cache | state->brw) == 0)
      return;
d419 18
a436 1
   intel_check_front_buffer_rendering(brw);
d447 2
a448 2
      for (i = 0; i < brw->num_atoms; i++) {
	 const struct brw_tracked_state *atom = brw->atoms[i];
d451 7
d459 3
a461 1
	    atom->emit(brw);
d476 5
a480 2
      for (i = 0; i < brw->num_atoms; i++) {
	 const struct brw_tracked_state *atom = brw->atoms[i];
d483 3
a485 1
	    atom->emit(brw);
d495 3
a497 3
	 brw_print_dirty_count(mesa_bits);
	 brw_print_dirty_count(brw_bits);
	 brw_print_dirty_count(cache_bits);
d502 2
a503 1
   memset(state, 0, sizeof(*state));
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d31 1
a31 1

d43 1
a43 4
   &brw_ff_gs_prog, /* must do before state base address */

   &brw_interpolation_map,

d68 1
a68 2
   &brw_fs_samplers,
   &brw_vs_samplers,
d76 1
a76 1
   &brw_gs_unit,
d107 1
a107 1
   &brw_ff_gs_prog, /* must do before state base address */
d143 1
a143 2
   &brw_fs_samplers,
   &brw_vs_samplers,
a174 1
   &brw_gs_prog,
a185 1
   &gen7_push_constant_space,
a191 1
   &gen7_gs_push_constants, /* Before gs_state */
a198 4
   &brw_vs_abo_surfaces,
   &brw_gs_pull_constants,
   &brw_gs_ubo_surfaces,
   &brw_gs_abo_surfaces,
a200 1
   &brw_wm_abo_surfaces,
a203 1
   &brw_gs_binding_table,
d206 1
a206 3
   &brw_fs_samplers,
   &brw_vs_samplers,
   &brw_gs_samplers,
a210 1
   &gen7_gs_state,
a236 80
static const struct brw_tracked_state *gen8_atoms[] =
{
   &brw_vs_prog,
   &brw_gs_prog,
   &brw_wm_prog,

   /* Command packets: */
   &gen8_state_base_address,

   &brw_cc_vp,
   &gen7_cc_viewport_state_pointer, /* must do after brw_cc_vp */
   &gen8_sf_clip_viewport,

   &gen7_push_constant_space,
   &gen7_urb,
   &gen8_blend_state,
   &gen6_color_calc_state,

   &gen6_vs_push_constants, /* Before vs_state */
   &gen7_gs_push_constants, /* Before gs_state */
   &gen6_wm_push_constants, /* Before wm_surfaces and constant_buffer */

   /* Surface state setup.  Must come before the VS/WM unit.  The binding
    * table upload must be last.
    */
   &brw_vs_pull_constants,
   &brw_vs_ubo_surfaces,
   &brw_vs_abo_surfaces,
   &brw_gs_pull_constants,
   &brw_gs_ubo_surfaces,
   &brw_gs_abo_surfaces,
   &brw_wm_pull_constants,
   &brw_wm_ubo_surfaces,
   &brw_wm_abo_surfaces,
   &gen6_renderbuffer_surfaces,
   &brw_texture_surfaces,
   &brw_vs_binding_table,
   &brw_gs_binding_table,
   &brw_wm_binding_table,

   &brw_fs_samplers,
   &brw_vs_samplers,
   &brw_gs_samplers,
   &gen8_multisample_state,

   &gen8_disable_stages,
   &gen8_vs_state,
   &gen8_gs_state,
   &gen8_sol_state,
   &gen6_clip_state,
   &gen8_raster_state,
   &gen8_sbe_state,
   &gen8_sf_state,
   &gen8_ps_blend,
   &gen8_ps_extra,
   &gen8_ps_state,
   &gen8_wm_depth_stencil,
   &gen8_wm_state,

   &gen6_scissor_state,

   &gen7_depthbuffer,

   &brw_polygon_stipple,
   &brw_polygon_stipple_offset,

   &brw_line_stipple,
   &brw_aa_line_parameters,

   &brw_drawing_rect,

   &gen8_vf_topology,

   &brw_indices,
   &gen8_index_buffer,
   &gen8_vertices,

   &haswell_cut_index,
};

d249 2
a250 2
   if (brw->gen >= 8) {
      gen8_emit_3dstate_sample_pattern(brw);
a255 1
   struct gl_context *ctx = &brw->ctx;
d261 1
a261 4
   if (brw->gen >= 8) {
      atoms = gen8_atoms;
      num_atoms = ARRAY_SIZE(gen8_atoms);
   } else if (brw->gen == 7) {
a283 14

   brw->state.dirty.mesa = ~0;
   brw->state.dirty.brw = ~0;

   /* Make sure that brw->state.dirty.brw has enough bits to hold all possible
    * dirty flags.
    */
   STATIC_ASSERT(BRW_NUM_STATE_BITS <= 8 * sizeof(brw->state.dirty.brw));

   ctx->DriverFlags.NewTransformFeedback = BRW_NEW_TRANSFORM_FEEDBACK;
   ctx->DriverFlags.NewTransformFeedbackProg = BRW_NEW_TRANSFORM_FEEDBACK;
   ctx->DriverFlags.NewRasterizerDiscard = BRW_NEW_RASTERIZER_DISCARD;
   ctx->DriverFlags.NewUniformBuffer = BRW_NEW_UNIFORM_BUFFER;
   ctx->DriverFlags.NewAtomicBuffer = BRW_NEW_ATOMIC_BUFFER;
a351 1
   DEFINE_BIT(_NEW_CURRENT_ATTRIB),
a364 1
   DEFINE_BIT(BRW_NEW_GEOMETRY_PROGRAM),
a379 1
   DEFINE_BIT(BRW_NEW_GS_CONSTBUF),
a381 1
   DEFINE_BIT(BRW_NEW_VUE_MAP_VS),
a384 1
   DEFINE_BIT(BRW_NEW_STATS_WM),
a385 1
   DEFINE_BIT(BRW_NEW_ATOMIC_BUFFER),
a386 3
   DEFINE_BIT(BRW_NEW_INTERPOLATION_MAP),
   DEFINE_BIT(BRW_NEW_PUSH_CONSTANT_ALLOCATION),
   DEFINE_BIT(BRW_NEW_NUM_SAMPLES),
a393 2
   DEFINE_BIT(CACHE_NEW_BLORP_BLIT_PROG),
   DEFINE_BIT(CACHE_NEW_BLORP_CONST_COLOR_PROG),
d401 1
a401 2
   DEFINE_BIT(CACHE_NEW_FF_GS_UNIT),
   DEFINE_BIT(CACHE_NEW_FF_GS_PROG),
d454 1
a454 2
   if (0) {
      /* Always re-emit all state. */
a464 5
   if (brw->geometry_program != ctx->GeometryProgram._Current) {
      brw->geometry_program = ctx->GeometryProgram._Current;
      brw->state.dirty.brw |= BRW_NEW_GEOMETRY_PROGRAM;
   }

a474 5
   if (brw->num_samples != ctx->DrawBuffer->Visual.samples) {
      brw->num_samples = ctx->DrawBuffer->Visual.samples;
      brw->state.dirty.brw |= BRW_NEW_NUM_SAMPLES;
   }

d478 2
d485 1
a485 1
      struct brw_state_flags examined, prev;
a518 3
      STATIC_ASSERT(ARRAY_SIZE(brw_bits) == BRW_NUM_STATE_BITS + 1);
      STATIC_ASSERT(ARRAY_SIZE(cache_bits) == BRW_MAX_CACHE + 1);

a528 1
}
a529 13

/**
 * Clear dirty bits to account for the fact that the state emitted by
 * brw_upload_state() has been committed to the hardware.  This is a separate
 * call from brw_upload_state() because it's possible that after the call to
 * brw_upload_state(), we will discover that we've run out of aperture space,
 * and need to rewind the batch buffer to the state it had before the
 * brw_upload_state() call.
 */
void
brw_clear_dirty_bits(struct brw_context *brw)
{
   struct brw_state_flags *state = &brw->state.dirty;
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d101 1
a101 1
   &brw_indices, /* must come before brw_vertices */
d111 1
a111 1
   &brw_gs_prog, /* must do before state base address */
a130 1
   &gen6_gs_push_constants, /* Before gs_state */
a137 2
   &brw_gs_pull_constants,
   &brw_gs_ubo_surfaces,
a148 1
   &brw_gs_samplers,
d172 1
a172 1
   &brw_indices, /* must come before brw_vertices */
d199 1
a199 1
   &gen6_gs_push_constants, /* Before gs_state */
d247 1
a247 1
   &brw_indices, /* must come before brw_vertices */
d273 1
a273 1
   &gen6_gs_push_constants, /* Before gs_state */
a331 1
   &gen8_pma_fix,
d387 1
a387 6
   brw->state.dirty.brw = ~0ull;

   /* ~0 is a nonsensical value which won't match anything we program, so
    * the programming will take effect on the first time around.
    */
   brw->pma_stall_bits = ~0;
a397 1
   ctx->DriverFlags.NewTextureBuffer = BRW_NEW_TEXTURE_BUFFER;
d437 1
a437 1
   uint64_t bit;
d474 1
a474 2
   /* Avoid sign extension problems. */
   {(unsigned) _NEW_VARYING_VP_INPUTS, "_NEW_VARYING_VP_INPUTS", 0},
a510 1
   DEFINE_BIT(BRW_NEW_TEXTURE_BUFFER),
d519 1
d538 1
a538 1
brw_update_dirty_count(struct dirty_bit_map *bit_map, uint64_t bits)
d540 6
a545 1
   for (int i = 0; bit_map[i].bit != 0; i++) {
d554 7
a560 2
   for (int i = 0; bit_map[i].bit != 0; i++) {
      fprintf(stderr, "0x%016lx: %12d (%s)\n",
d584 1
a584 1
      state->brw |= ~0ull;
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d101 1
a101 1
   &brw_indices,
d111 1
a111 1
   &brw_ff_gs_prog, /* must do before state base address */
d131 1
d139 2
d152 1
d176 1
a176 1
   &brw_indices,
d203 1
a203 1
   &gen7_gs_push_constants, /* Before gs_state */
d251 1
a251 1
   &brw_indices,
d277 1
a277 1
   &gen7_gs_push_constants, /* Before gs_state */
d336 1
d392 6
a397 1
   brw->state.dirty.brw = ~0;
d408 1
d448 1
a448 1
   uint32_t bit;
d485 2
a486 1
   DEFINE_BIT(_NEW_VARYING_VP_INPUTS),
d523 1
a531 1
   DEFINE_BIT(CACHE_NEW_BLORP_CONST_COLOR_PROG),
d550 1
a550 1
brw_update_dirty_count(struct dirty_bit_map *bit_map, int32_t bits)
d552 1
a552 6
   int i;

   for (i = 0; i < 32; i++) {
      if (bit_map[i].bit == 0)
	 return;

d561 2
a562 7
   int i;

   for (i = 0; i < 32; i++) {
      if (bit_map[i].bit == 0)
	 return;

      fprintf(stderr, "0x%08x: %12d (%s)\n",
d586 1
a586 1
      state->brw |= ~0;
@


