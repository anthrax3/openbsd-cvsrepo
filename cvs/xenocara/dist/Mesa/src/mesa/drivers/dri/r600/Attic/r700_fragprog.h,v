head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.09.05.14.05.25;	author jsg;	state dead;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.41;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@/*
 * Copyright (C) 2008-2009  Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * Authors:
 *   Richard Li <RichardZ.Li@@amd.com>, <richardradeon@@gmail.com>
 */

#ifndef _R700_FRAGPROG_H_
#define _R700_FRAGPROG_H_

#include "r600_context.h"
#include "r700_assembler.h"

struct r700_fragment_program
{
	struct gl_fragment_program mesa_program;

    r700_AssemblerBase r700AsmCode;
	R700_Shader        r700Shader;

	GLboolean translated;
    GLboolean loaded;
	GLboolean error;

    void * shaderbo;

	GLuint k0used;
    void * constbo0;

	GLboolean WritesDepth;
	GLuint optimization;
};

/* Internal */
void insert_wpos_code(struct gl_context *ctx, struct gl_fragment_program *fprog);

void Map_Fragment_Program(r700_AssemblerBase         *pAsm,
			  struct gl_fragment_program *mesa_fp,
                          struct gl_context *ctx); 
GLboolean Find_Instruction_Dependencies_fp(struct r700_fragment_program *fp,
					   struct gl_fragment_program   *mesa_fp);

GLboolean r700TranslateFragmentShader(struct r700_fragment_program *fp,
				      struct gl_fragment_program   *mesa_vp,
                                      struct gl_context *ctx); 

/* Interface */
extern void r700SelectFragmentShader(struct gl_context *ctx);

extern GLboolean r700SetupFragmentProgram(struct gl_context * ctx);

extern void *    r700GetActiveFpShaderBo(struct gl_context * ctx);

extern void *    r700GetActiveFpShaderConstBo(struct gl_context * ctx);

#endif /*_R700_FRAGPROG_H_*/
@


1.2
log
@Merge Mesa 7.10.3
@
text
@@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d46 3
d54 1
a54 1
void insert_wpos_code(GLcontext *ctx, struct gl_fragment_program *fprog);
d58 1
a58 1
                          GLcontext *ctx); 
d64 1
a64 1
                                      GLcontext *ctx); 
d67 3
a69 1
extern void r700SelectFragmentShader(GLcontext *ctx);
d71 1
a71 1
extern GLboolean r700SetupFragmentProgram(GLcontext * ctx);
d73 1
a73 1
extern void *    r700GetActiveFpShaderBo(GLcontext * ctx);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a45 3
	GLuint k0used;
    void * constbo0;

d51 1
a51 1
void insert_wpos_code(struct gl_context *ctx, struct gl_fragment_program *fprog);
d55 1
a55 1
                          struct gl_context *ctx); 
d61 1
a61 1
                                      struct gl_context *ctx); 
d64 1
a64 3
extern void r700SelectFragmentShader(struct gl_context *ctx);

extern GLboolean r700SetupFragmentProgram(struct gl_context * ctx);
d66 1
a66 1
extern void *    r700GetActiveFpShaderBo(struct gl_context * ctx);
d68 1
a68 1
extern void *    r700GetActiveFpShaderConstBo(struct gl_context * ctx);
@

