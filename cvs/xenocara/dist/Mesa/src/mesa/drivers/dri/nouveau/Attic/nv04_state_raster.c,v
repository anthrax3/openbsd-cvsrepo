head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.04.50;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.22;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.54;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.54;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.12.01;	author jsg;	state Exp;
branches;
next	;
commitid	ce2W5rH5aF7VS9gi;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "nouveau_driver.h"
#include "nouveau_context.h"
#include "nouveau_util.h"
#include "nv_object.xml.h"
#include "nv04_3d.xml.h"
#include "nv04_driver.h"
#include "main/stencil.h"

static unsigned
get_comparison_op(unsigned op)
{
	switch (op) {
	case GL_NEVER:
		return 0x1;
	case GL_LESS:
		return 0x2;
	case GL_EQUAL:
		return 0x3;
	case GL_LEQUAL:
		return 0x4;
	case GL_GREATER:
		return 0x5;
	case GL_NOTEQUAL:
		return 0x6;
	case GL_GEQUAL:
		return 0x7;
	case GL_ALWAYS:
		return 0x8;
	default:
		assert(0);
	}
}

static unsigned
get_stencil_op(unsigned op)
{
	switch (op) {
	case GL_KEEP:
		return 0x1;
	case GL_ZERO:
		return 0x2;
	case GL_REPLACE:
		return 0x3;
	case GL_INCR:
		return 0x4;
	case GL_DECR:
		return 0x5;
	case GL_INVERT:
		return 0x6;
	case GL_INCR_WRAP:
		return 0x7;
	case GL_DECR_WRAP:
		return 0x8;
	default:
		assert(0);
	}
}

static unsigned
get_blend_func(unsigned func)
{
	switch (func) {
	case GL_ZERO:
		return 0x1;
	case GL_ONE:
		return 0x2;
	case GL_SRC_COLOR:
		return 0x3;
	case GL_ONE_MINUS_SRC_COLOR:
		return 0x4;
	case GL_SRC_ALPHA:
		return 0x5;
	case GL_ONE_MINUS_SRC_ALPHA:
		return 0x6;
	case GL_DST_ALPHA:
		return 0x7;
	case GL_ONE_MINUS_DST_ALPHA:
		return 0x8;
	case GL_DST_COLOR:
		return 0x9;
	case GL_ONE_MINUS_DST_COLOR:
		return 0xa;
	case GL_SRC_ALPHA_SATURATE:
		return 0xb;
	default:
		assert(0);
	}
}

void
nv04_defer_control(struct gl_context *ctx, int emit)
{
	context_dirty(ctx, CONTROL);
}

void
nv04_emit_control(struct gl_context *ctx, int emit)
{
	struct nv04_context *nv04 = to_nv04_context(ctx);
	struct gl_framebuffer *fb = ctx->DrawBuffer;
	int cull = ctx->Polygon.CullFaceMode;
	int front = ctx->Polygon.FrontFace;

	nv04->ctrl[0] = NV04_TEXTURED_TRIANGLE_CONTROL_Z_FORMAT_FIXED |
			NV04_TEXTURED_TRIANGLE_CONTROL_ORIGIN_CORNER;
	nv04->ctrl[1] = 0;
	nv04->ctrl[2] = 0;

	/* Dithering. */
	if (ctx->Color.DitherFlag)
		nv04->ctrl[0] |= NV04_TEXTURED_TRIANGLE_CONTROL_DITHER_ENABLE;

	/* Cull mode. */
	if (!ctx->Polygon.CullFlag)
		nv04->ctrl[0] |= NV04_TEXTURED_TRIANGLE_CONTROL_CULL_MODE_NONE;
	else if (cull == GL_FRONT_AND_BACK)
		nv04->ctrl[0] |= NV04_TEXTURED_TRIANGLE_CONTROL_CULL_MODE_BOTH;
	else
		nv04->ctrl[0] |= (cull == GL_FRONT) ^ (front == GL_CCW) ?
				 NV04_TEXTURED_TRIANGLE_CONTROL_CULL_MODE_CW :
				 NV04_TEXTURED_TRIANGLE_CONTROL_CULL_MODE_CCW;

	/* Depth test. */
	if (ctx->Depth.Test && fb->Visual.depthBits > 0)
		nv04->ctrl[0] |= NV04_TEXTURED_TRIANGLE_CONTROL_Z_ENABLE;
	if (ctx->Depth.Mask && fb->Visual.depthBits > 0)
		nv04->ctrl[0] |= NV04_TEXTURED_TRIANGLE_CONTROL_Z_WRITE;

	nv04->ctrl[0] |= get_comparison_op(ctx->Depth.Func) << 16;

	/* Alpha test. */
	if (ctx->Color.AlphaEnabled)
		nv04->ctrl[0] |= NV04_TEXTURED_TRIANGLE_CONTROL_ALPHA_ENABLE;

	nv04->ctrl[0] |= get_comparison_op(ctx->Color.AlphaFunc) << 8 |
			 FLOAT_TO_UBYTE(ctx->Color.AlphaRef);

	/* Color mask. */
	if (ctx->Color.ColorMask[0][RCOMP])
		nv04->ctrl[0] |= NV04_MULTITEX_TRIANGLE_CONTROL0_RED_WRITE;
	if (ctx->Color.ColorMask[0][GCOMP])
		nv04->ctrl[0] |= NV04_MULTITEX_TRIANGLE_CONTROL0_GREEN_WRITE;
	if (ctx->Color.ColorMask[0][BCOMP])
		nv04->ctrl[0] |= NV04_MULTITEX_TRIANGLE_CONTROL0_BLUE_WRITE;
	if (ctx->Color.ColorMask[0][ACOMP])
		nv04->ctrl[0] |= NV04_MULTITEX_TRIANGLE_CONTROL0_ALPHA_WRITE;

	/* Stencil test. */
	if (ctx->Stencil.WriteMask[0])
		nv04->ctrl[0] |= NV04_MULTITEX_TRIANGLE_CONTROL0_STENCIL_WRITE;

	if (ctx->Stencil._Enabled)
		nv04->ctrl[1] |= NV04_MULTITEX_TRIANGLE_CONTROL1_STENCIL_ENABLE;

	nv04->ctrl[1] |= get_comparison_op(ctx->Stencil.Function[0]) << 4 |
			 _mesa_get_stencil_ref(ctx, 0) << 8 |
			 ctx->Stencil.ValueMask[0] << 16 |
			 ctx->Stencil.WriteMask[0] << 24;

	nv04->ctrl[2] |= get_stencil_op(ctx->Stencil.ZPassFunc[0]) << 8 |
			 get_stencil_op(ctx->Stencil.ZFailFunc[0]) << 4 |
			 get_stencil_op(ctx->Stencil.FailFunc[0]);
}

void
nv04_defer_blend(struct gl_context *ctx, int emit)
{
	context_dirty(ctx, BLEND);
}

void
nv04_emit_blend(struct gl_context *ctx, int emit)
{
	struct nv04_context *nv04 = to_nv04_context(ctx);

	nv04->blend &= NV04_TEXTURED_TRIANGLE_BLEND_TEXTURE_MAP__MASK;
	nv04->blend |= NV04_TEXTURED_TRIANGLE_BLEND_MASK_BIT_MSB |
		       NV04_TEXTURED_TRIANGLE_BLEND_TEXTURE_PERSPECTIVE_ENABLE;

	/* Alpha blending. */
	nv04->blend |= get_blend_func(ctx->Color.Blend[0].DstRGB) << 28 |
		       get_blend_func(ctx->Color.Blend[0].SrcRGB) << 24;

	if (ctx->Color.BlendEnabled)
		nv04->blend |= NV04_TEXTURED_TRIANGLE_BLEND_BLEND_ENABLE;

	/* Shade model. */
	if (ctx->Light.ShadeModel == GL_SMOOTH)
		nv04->blend |= NV04_TEXTURED_TRIANGLE_BLEND_SHADE_MODE_GOURAUD;
	else
		nv04->blend |= NV04_TEXTURED_TRIANGLE_BLEND_SHADE_MODE_FLAT;

	/* Secondary color */
	if (_mesa_need_secondary_color(ctx))
		nv04->blend |= NV04_TEXTURED_TRIANGLE_BLEND_SPECULAR_ENABLE;

	/* Fog. */
	if (ctx->Fog.Enabled) {
		nv04->blend |= NV04_TEXTURED_TRIANGLE_BLEND_FOG_ENABLE;
		nv04->fog = pack_rgba_f(MESA_FORMAT_B8G8R8A8_UNORM, ctx->Fog.Color);
	}
}
@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d126 1
d150 1
a150 1
	if (ctx->Depth.Test)
d152 1
a152 1
	if (ctx->Depth.Mask)
d178 1
a178 1
	if (ctx->Stencil.Enabled)
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d225 1
a225 1
		nv04->fog = pack_rgba_f(MESA_FORMAT_ARGB8888, ctx->Fog.Color);
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d33 1
a85 15
get_texenv_mode(unsigned mode)
{
	switch (mode) {
	case GL_REPLACE:
		return 0x1;
	case GL_DECAL:
		return 0x3;
	case GL_MODULATE:
		return 0x4;
	default:
		assert(0);
	}
}

static unsigned
d125 3
a127 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *fahrenheit = nv04_context_engine(ctx);
d129 1
a129 72
	if (nv04_mtex_engine(fahrenheit)) {
		int cull_mode = ctx->Polygon.CullFaceMode;
		int front_face = ctx->Polygon.FrontFace;
		uint32_t ctrl0 = 1 << 30 |
			NV04_MULTITEX_TRIANGLE_CONTROL0_ORIGIN_CORNER;
		uint32_t ctrl1 = 0, ctrl2 = 0;

		/* Color mask. */
		if (ctx->Color.ColorMask[0][RCOMP])
			ctrl0 |= NV04_MULTITEX_TRIANGLE_CONTROL0_RED_WRITE;
		if (ctx->Color.ColorMask[0][GCOMP])
			ctrl0 |= NV04_MULTITEX_TRIANGLE_CONTROL0_GREEN_WRITE;
		if (ctx->Color.ColorMask[0][BCOMP])
			ctrl0 |= NV04_MULTITEX_TRIANGLE_CONTROL0_BLUE_WRITE;
		if (ctx->Color.ColorMask[0][ACOMP])
			ctrl0 |= NV04_MULTITEX_TRIANGLE_CONTROL0_ALPHA_WRITE;

		/* Dithering. */
		if (ctx->Color.DitherFlag)
			ctrl0 |= NV04_MULTITEX_TRIANGLE_CONTROL0_DITHER_ENABLE;

		/* Cull mode. */
		if (!ctx->Polygon.CullFlag)
			ctrl0 |= NV04_MULTITEX_TRIANGLE_CONTROL0_CULL_MODE_NONE;
		else if (cull_mode == GL_FRONT_AND_BACK)
			ctrl0 |= NV04_MULTITEX_TRIANGLE_CONTROL0_CULL_MODE_BOTH;
		else
			ctrl0 |= (cull_mode == GL_FRONT) ^ (front_face == GL_CCW) ?
				NV04_MULTITEX_TRIANGLE_CONTROL0_CULL_MODE_CW :
				NV04_MULTITEX_TRIANGLE_CONTROL0_CULL_MODE_CCW;

		/* Depth test. */
		if (ctx->Depth.Test)
			ctrl0 |= NV04_MULTITEX_TRIANGLE_CONTROL0_Z_ENABLE;

		if (ctx->Depth.Mask)
			ctrl0 |= NV04_MULTITEX_TRIANGLE_CONTROL0_Z_WRITE;

		ctrl0 |= get_comparison_op(ctx->Depth.Func) << 16;

		/* Alpha test. */
		if (ctx->Color.AlphaEnabled)
			ctrl0 |= NV04_MULTITEX_TRIANGLE_CONTROL0_ALPHA_ENABLE;

		ctrl0 |= get_comparison_op(ctx->Color.AlphaFunc) << 8 |
			FLOAT_TO_UBYTE(ctx->Color.AlphaRef);

		/* Stencil test. */
		if (ctx->Stencil.WriteMask[0])
			ctrl0 |= NV04_MULTITEX_TRIANGLE_CONTROL0_STENCIL_WRITE;

		if (ctx->Stencil.Enabled)
			ctrl1 |= NV04_MULTITEX_TRIANGLE_CONTROL1_STENCIL_ENABLE;

		ctrl1 |= get_comparison_op(ctx->Stencil.Function[0]) << 4 |
			ctx->Stencil.Ref[0] << 8 |
			ctx->Stencil.ValueMask[0] << 16 |
			ctx->Stencil.WriteMask[0] << 24;

		ctrl2 |= get_stencil_op(ctx->Stencil.ZPassFunc[0]) << 8 |
			get_stencil_op(ctx->Stencil.ZFailFunc[0]) << 4 |
			get_stencil_op(ctx->Stencil.FailFunc[0]);

		BEGIN_RING(chan, fahrenheit, NV04_MULTITEX_TRIANGLE_CONTROL0, 3);
		OUT_RING(chan, ctrl0);
		OUT_RING(chan, ctrl1);
		OUT_RING(chan, ctrl2);

	} else {
		int cull_mode = ctx->Polygon.CullFaceMode;
		int front_face = ctx->Polygon.FrontFace;
		uint32_t ctrl = 1 << 30 |
d131 2
d134 54
a187 32
		/* Dithering. */
		if (ctx->Color.DitherFlag)
			ctrl |= NV04_TEXTURED_TRIANGLE_CONTROL_DITHER_ENABLE;

		/* Cull mode. */
		if (!ctx->Polygon.CullFlag)
			ctrl |= NV04_TEXTURED_TRIANGLE_CONTROL_CULL_MODE_NONE;
		else if (cull_mode == GL_FRONT_AND_BACK)
			ctrl |= NV04_TEXTURED_TRIANGLE_CONTROL_CULL_MODE_BOTH;
		else
			ctrl |= (cull_mode == GL_FRONT) ^ (front_face == GL_CCW) ?
				NV04_TEXTURED_TRIANGLE_CONTROL_CULL_MODE_CW :
				NV04_TEXTURED_TRIANGLE_CONTROL_CULL_MODE_CCW;

		/* Depth test. */
		if (ctx->Depth.Test)
			ctrl |= NV04_TEXTURED_TRIANGLE_CONTROL_Z_ENABLE;
		if (ctx->Depth.Mask)
			ctrl |= NV04_TEXTURED_TRIANGLE_CONTROL_Z_WRITE;

		ctrl |= get_comparison_op(ctx->Depth.Func) << 16;

		/* Alpha test. */
		if (ctx->Color.AlphaEnabled)
			ctrl |= NV04_TEXTURED_TRIANGLE_CONTROL_ALPHA_ENABLE;

		ctrl |= get_comparison_op(ctx->Color.AlphaFunc) << 8 |
			FLOAT_TO_UBYTE(ctx->Color.AlphaRef);

		BEGIN_RING(chan, fahrenheit, NV04_TEXTURED_TRIANGLE_CONTROL, 1);
		OUT_RING(chan, ctrl);
	}
d199 1
a199 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *fahrenheit = nv04_context_engine(ctx);
d201 25
a225 69
	if (nv04_mtex_engine(fahrenheit)) {
		uint32_t blend = 0x2 << 4 |
			NV04_MULTITEX_TRIANGLE_BLEND_TEXTURE_PERSPECTIVE_ENABLE;

		/* Alpha blending. */
		blend |= get_blend_func(ctx->Color.Blend[0].DstRGB) << 28 |
			get_blend_func(ctx->Color.Blend[0].SrcRGB) << 24;

		if (ctx->Color.BlendEnabled)
			blend |= NV04_MULTITEX_TRIANGLE_BLEND_BLEND_ENABLE;

		/* Shade model. */
		if (ctx->Light.ShadeModel == GL_SMOOTH)
			blend |= NV04_MULTITEX_TRIANGLE_BLEND_SHADE_MODE_GOURAUD;
		else
			blend |= NV04_MULTITEX_TRIANGLE_BLEND_SHADE_MODE_FLAT;

		/* Secondary color */
		if (_mesa_need_secondary_color(ctx))
			blend |= NV04_MULTITEX_TRIANGLE_BLEND_SPECULAR_ENABLE;

		/* Fog. */
		if (ctx->Fog.Enabled)
			blend |= NV04_MULTITEX_TRIANGLE_BLEND_FOG_ENABLE;

		BEGIN_RING(chan, fahrenheit, NV04_MULTITEX_TRIANGLE_BLEND, 1);
		OUT_RING(chan, blend);

		BEGIN_RING(chan, fahrenheit, NV04_MULTITEX_TRIANGLE_FOGCOLOR, 1);
		OUT_RING(chan, pack_rgba_f(MESA_FORMAT_ARGB8888,
					   ctx->Fog.Color));

	} else {
		uint32_t blend = 0x2 << 4 |
			NV04_TEXTURED_TRIANGLE_BLEND_TEXTURE_PERSPECTIVE_ENABLE;

		/* Alpha blending. */
		blend |= get_blend_func(ctx->Color.Blend[0].DstRGB) << 28 |
			get_blend_func(ctx->Color.Blend[0].SrcRGB) << 24;

		if (ctx->Color.BlendEnabled)
			blend |= NV04_TEXTURED_TRIANGLE_BLEND_BLEND_ENABLE;

		/* Shade model. */
		if (ctx->Light.ShadeModel == GL_SMOOTH)
			blend |= NV04_TEXTURED_TRIANGLE_BLEND_SHADE_MODE_GOURAUD;
		else
			blend |= NV04_TEXTURED_TRIANGLE_BLEND_SHADE_MODE_FLAT;

		/* Texture environment. */
		if (ctx->Texture._EnabledUnits)
			blend |= get_texenv_mode(ctx->Texture.Unit[0].EnvMode);
		else
			blend |= get_texenv_mode(GL_MODULATE);

		/* Secondary color */
		if (_mesa_need_secondary_color(ctx))
			blend |= NV04_TEXTURED_TRIANGLE_BLEND_SPECULAR_ENABLE;

		/* Fog. */
		if (ctx->Fog.Enabled)
			blend |= NV04_TEXTURED_TRIANGLE_BLEND_FOG_ENABLE;

		BEGIN_RING(chan, fahrenheit, NV04_TEXTURED_TRIANGLE_BLEND, 1);
		OUT_RING(chan, blend);

		BEGIN_RING(chan, fahrenheit, NV04_TEXTURED_TRIANGLE_FOGCOLOR, 1);
		OUT_RING(chan, pack_rgba_f(MESA_FORMAT_ARGB8888,
					   ctx->Fog.Color));
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d267 2
a268 2
		blend |= get_blend_func(ctx->Color.BlendDstRGB) << 28 |
			get_blend_func(ctx->Color.BlendSrcRGB) << 24;
d280 1
a280 1
		if (NEED_SECONDARY_COLOR(ctx))
d299 2
a300 2
		blend |= get_blend_func(ctx->Color.BlendDstRGB) << 28 |
			get_blend_func(ctx->Color.BlendSrcRGB) << 24;
d318 1
a318 1
		if (NEED_SECONDARY_COLOR(ctx))
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d30 2
a31 1
#include "nouveau_class.h"
d131 1
a131 1
nv04_defer_control(GLcontext *ctx, int emit)
d137 1
a137 1
nv04_emit_control(GLcontext *ctx, int emit)
d146 1
a146 1
			NV04_MULTITEX_TRIANGLE_CONTROL0_ORIGIN;
d214 1
a214 1
			NV04_TEXTURED_TRIANGLE_CONTROL_ORIGIN;
d251 1
a251 1
nv04_defer_blend(GLcontext *ctx, int emit)
d257 1
a257 1
nv04_emit_blend(GLcontext *ctx, int emit)
d279 4
d316 4
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d30 1
a30 2
#include "nv_object.xml.h"
#include "nv04_3d.xml.h"
d130 1
a130 1
nv04_defer_control(struct gl_context *ctx, int emit)
d136 1
a136 1
nv04_emit_control(struct gl_context *ctx, int emit)
d145 1
a145 1
			NV04_MULTITEX_TRIANGLE_CONTROL0_ORIGIN_CORNER;
d213 1
a213 1
			NV04_TEXTURED_TRIANGLE_CONTROL_ORIGIN_CORNER;
d250 1
a250 1
nv04_defer_blend(struct gl_context *ctx, int emit)
d256 1
a256 1
nv04_emit_blend(struct gl_context *ctx, int emit)
a277 4
		/* Secondary color */
		if (NEED_SECONDARY_COLOR(ctx))
			blend |= NV04_MULTITEX_TRIANGLE_BLEND_SPECULAR_ENABLE;

a310 4

		/* Secondary color */
		if (NEED_SECONDARY_COLOR(ctx))
			blend |= NV04_TEXTURED_TRIANGLE_BLEND_SPECULAR_ENABLE;
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a32 1
#include "main/stencil.h"
d85 15
d139 2
a140 3
	struct nv04_context *nv04 = to_nv04_context(ctx);
	int cull = ctx->Polygon.CullFaceMode;
	int front = ctx->Polygon.FrontFace;
d142 72
a213 1
	nv04->ctrl[0] = NV04_TEXTURED_TRIANGLE_CONTROL_Z_FORMAT_FIXED |
a214 2
	nv04->ctrl[1] = 0;
	nv04->ctrl[2] = 0;
d216 32
a247 54
	/* Dithering. */
	if (ctx->Color.DitherFlag)
		nv04->ctrl[0] |= NV04_TEXTURED_TRIANGLE_CONTROL_DITHER_ENABLE;

	/* Cull mode. */
	if (!ctx->Polygon.CullFlag)
		nv04->ctrl[0] |= NV04_TEXTURED_TRIANGLE_CONTROL_CULL_MODE_NONE;
	else if (cull == GL_FRONT_AND_BACK)
		nv04->ctrl[0] |= NV04_TEXTURED_TRIANGLE_CONTROL_CULL_MODE_BOTH;
	else
		nv04->ctrl[0] |= (cull == GL_FRONT) ^ (front == GL_CCW) ?
				 NV04_TEXTURED_TRIANGLE_CONTROL_CULL_MODE_CW :
				 NV04_TEXTURED_TRIANGLE_CONTROL_CULL_MODE_CCW;

	/* Depth test. */
	if (ctx->Depth.Test)
		nv04->ctrl[0] |= NV04_TEXTURED_TRIANGLE_CONTROL_Z_ENABLE;
	if (ctx->Depth.Mask)
		nv04->ctrl[0] |= NV04_TEXTURED_TRIANGLE_CONTROL_Z_WRITE;

	nv04->ctrl[0] |= get_comparison_op(ctx->Depth.Func) << 16;

	/* Alpha test. */
	if (ctx->Color.AlphaEnabled)
		nv04->ctrl[0] |= NV04_TEXTURED_TRIANGLE_CONTROL_ALPHA_ENABLE;

	nv04->ctrl[0] |= get_comparison_op(ctx->Color.AlphaFunc) << 8 |
			 FLOAT_TO_UBYTE(ctx->Color.AlphaRef);

	/* Color mask. */
	if (ctx->Color.ColorMask[0][RCOMP])
		nv04->ctrl[0] |= NV04_MULTITEX_TRIANGLE_CONTROL0_RED_WRITE;
	if (ctx->Color.ColorMask[0][GCOMP])
		nv04->ctrl[0] |= NV04_MULTITEX_TRIANGLE_CONTROL0_GREEN_WRITE;
	if (ctx->Color.ColorMask[0][BCOMP])
		nv04->ctrl[0] |= NV04_MULTITEX_TRIANGLE_CONTROL0_BLUE_WRITE;
	if (ctx->Color.ColorMask[0][ACOMP])
		nv04->ctrl[0] |= NV04_MULTITEX_TRIANGLE_CONTROL0_ALPHA_WRITE;

	/* Stencil test. */
	if (ctx->Stencil.WriteMask[0])
		nv04->ctrl[0] |= NV04_MULTITEX_TRIANGLE_CONTROL0_STENCIL_WRITE;

	if (ctx->Stencil.Enabled)
		nv04->ctrl[1] |= NV04_MULTITEX_TRIANGLE_CONTROL1_STENCIL_ENABLE;

	nv04->ctrl[1] |= get_comparison_op(ctx->Stencil.Function[0]) << 4 |
			 _mesa_get_stencil_ref(ctx, 0) << 8 |
			 ctx->Stencil.ValueMask[0] << 16 |
			 ctx->Stencil.WriteMask[0] << 24;

	nv04->ctrl[2] |= get_stencil_op(ctx->Stencil.ZPassFunc[0]) << 8 |
			 get_stencil_op(ctx->Stencil.ZFailFunc[0]) << 4 |
			 get_stencil_op(ctx->Stencil.FailFunc[0]);
d259 2
a260 1
	struct nv04_context *nv04 = to_nv04_context(ctx);
d262 69
a330 25
	nv04->blend &= NV04_TEXTURED_TRIANGLE_BLEND_TEXTURE_MAP__MASK;
	nv04->blend |= NV04_TEXTURED_TRIANGLE_BLEND_MASK_BIT_MSB |
		       NV04_TEXTURED_TRIANGLE_BLEND_TEXTURE_PERSPECTIVE_ENABLE;

	/* Alpha blending. */
	nv04->blend |= get_blend_func(ctx->Color.Blend[0].DstRGB) << 28 |
		       get_blend_func(ctx->Color.Blend[0].SrcRGB) << 24;

	if (ctx->Color.BlendEnabled)
		nv04->blend |= NV04_TEXTURED_TRIANGLE_BLEND_BLEND_ENABLE;

	/* Shade model. */
	if (ctx->Light.ShadeModel == GL_SMOOTH)
		nv04->blend |= NV04_TEXTURED_TRIANGLE_BLEND_SHADE_MODE_GOURAUD;
	else
		nv04->blend |= NV04_TEXTURED_TRIANGLE_BLEND_SHADE_MODE_FLAT;

	/* Secondary color */
	if (_mesa_need_secondary_color(ctx))
		nv04->blend |= NV04_TEXTURED_TRIANGLE_BLEND_SPECULAR_ENABLE;

	/* Fog. */
	if (ctx->Fog.Enabled) {
		nv04->blend |= NV04_TEXTURED_TRIANGLE_BLEND_FOG_ENABLE;
		nv04->fog = pack_rgba_f(MESA_FORMAT_ARGB8888, ctx->Fog.Color);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d225 1
a225 1
		nv04->fog = pack_rgba_f(MESA_FORMAT_B8G8R8A8_UNORM, ctx->Fog.Color);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a125 1
	struct gl_framebuffer *fb = ctx->DrawBuffer;
d149 1
a149 1
	if (ctx->Depth.Test && fb->Visual.depthBits > 0)
d151 1
a151 1
	if (ctx->Depth.Mask && fb->Visual.depthBits > 0)
d177 1
a177 1
	if (ctx->Stencil._Enabled)
@


