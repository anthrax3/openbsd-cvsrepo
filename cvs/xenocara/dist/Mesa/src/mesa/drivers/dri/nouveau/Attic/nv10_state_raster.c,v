head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.04.51;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.22;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.55;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.54;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.12.02;	author jsg;	state Exp;
branches;
next	;
commitid	ce2W5rH5aF7VS9gi;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "nouveau_driver.h"
#include "nouveau_context.h"
#include "nouveau_gldefs.h"
#include "nouveau_util.h"
#include "nv_object.xml.h"
#include "nv10_3d.xml.h"
#include "nv10_driver.h"

#include "main/stencil.h"

void
nv10_emit_alpha_func(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	BEGIN_NV04(push, NV10_3D(ALPHA_FUNC_ENABLE), 1);
	PUSH_DATAb(push, ctx->Color.AlphaEnabled);

	BEGIN_NV04(push, NV10_3D(ALPHA_FUNC_FUNC), 2);
	PUSH_DATA (push, nvgl_comparison_op(ctx->Color.AlphaFunc));
	PUSH_DATA (push, FLOAT_TO_UBYTE(ctx->Color.AlphaRef));
}

void
nv10_emit_blend_color(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	BEGIN_NV04(push, NV10_3D(BLEND_COLOR), 1);
	PUSH_DATA (push, FLOAT_TO_UBYTE(ctx->Color.BlendColor[3]) << 24 |
		 FLOAT_TO_UBYTE(ctx->Color.BlendColor[0]) << 16 |
		 FLOAT_TO_UBYTE(ctx->Color.BlendColor[1]) << 8 |
		 FLOAT_TO_UBYTE(ctx->Color.BlendColor[2]) << 0);
}

void
nv10_emit_blend_equation(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	BEGIN_NV04(push, NV10_3D(BLEND_FUNC_ENABLE), 1);
	PUSH_DATAb(push, ctx->Color.BlendEnabled);

	BEGIN_NV04(push, NV10_3D(BLEND_EQUATION), 1);
	PUSH_DATA (push, nvgl_blend_eqn(ctx->Color.Blend[0].EquationRGB));
}

void
nv10_emit_blend_func(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	BEGIN_NV04(push, NV10_3D(BLEND_FUNC_SRC), 2);
	PUSH_DATA (push, nvgl_blend_func(ctx->Color.Blend[0].SrcRGB));
	PUSH_DATA (push, nvgl_blend_func(ctx->Color.Blend[0].DstRGB));
}

void
nv10_emit_color_mask(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	BEGIN_NV04(push, NV10_3D(COLOR_MASK), 1);
	PUSH_DATA (push, ((ctx->Color.ColorMask[0][3] ? 1 << 24 : 0) |
			(ctx->Color.ColorMask[0][0] ? 1 << 16 : 0) |
			(ctx->Color.ColorMask[0][1] ? 1 << 8 : 0) |
			(ctx->Color.ColorMask[0][2] ? 1 << 0 : 0)));
}

void
nv10_emit_depth(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);
	struct gl_framebuffer *fb = ctx->DrawBuffer;

	BEGIN_NV04(push, NV10_3D(DEPTH_TEST_ENABLE), 1);
	PUSH_DATAb(push, ctx->Depth.Test && fb->Visual.depthBits > 0);
	BEGIN_NV04(push, NV10_3D(DEPTH_WRITE_ENABLE), 1);
	PUSH_DATAb(push, ctx->Depth.Mask && fb->Visual.depthBits > 0);
	BEGIN_NV04(push, NV10_3D(DEPTH_FUNC), 1);
	PUSH_DATA (push, nvgl_comparison_op(ctx->Depth.Func));
}

void
nv10_emit_dither(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	BEGIN_NV04(push, NV10_3D(DITHER_ENABLE), 1);
	PUSH_DATAb(push, ctx->Color.DitherFlag);
}

void
nv10_emit_logic_opcode(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	assert(!ctx->Color.ColorLogicOpEnabled
	       || context_eng3d(ctx)->oclass >= NV15_3D_CLASS);

	BEGIN_NV04(push, NV11_3D(COLOR_LOGIC_OP_ENABLE), 2);
	PUSH_DATAb(push, ctx->Color.ColorLogicOpEnabled);
	PUSH_DATA (push, nvgl_logicop_func(ctx->Color.LogicOp));
}

void
nv10_emit_shade_model(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	BEGIN_NV04(push, NV10_3D(SHADE_MODEL), 1);
	PUSH_DATA (push, ctx->Light.ShadeModel == GL_SMOOTH ?
		 NV10_3D_SHADE_MODEL_SMOOTH : NV10_3D_SHADE_MODEL_FLAT);
}

void
nv10_emit_stencil_func(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	BEGIN_NV04(push, NV10_3D(STENCIL_ENABLE), 1);
	PUSH_DATAb(push, ctx->Stencil._Enabled);

	BEGIN_NV04(push, NV10_3D(STENCIL_FUNC_FUNC), 3);
	PUSH_DATA (push, nvgl_comparison_op(ctx->Stencil.Function[0]));
	PUSH_DATA (push, _mesa_get_stencil_ref(ctx, 0));
	PUSH_DATA (push, ctx->Stencil.ValueMask[0]);
}

void
nv10_emit_stencil_mask(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	BEGIN_NV04(push, NV10_3D(STENCIL_MASK), 1);
	PUSH_DATA (push, ctx->Stencil.WriteMask[0]);
}

void
nv10_emit_stencil_op(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	BEGIN_NV04(push, NV10_3D(STENCIL_OP_FAIL), 3);
	PUSH_DATA (push, nvgl_stencil_op(ctx->Stencil.FailFunc[0]));
	PUSH_DATA (push, nvgl_stencil_op(ctx->Stencil.ZFailFunc[0]));
	PUSH_DATA (push, nvgl_stencil_op(ctx->Stencil.ZPassFunc[0]));
}
@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d100 1
d103 1
a103 1
	PUSH_DATAb(push, ctx->Depth.Test);
d105 1
a105 1
	PUSH_DATAb(push, ctx->Depth.Mask);
d148 1
a148 1
	PUSH_DATAb(push, ctx->Stencil.Enabled);
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d31 1
d124 1
a124 1
	       || context_chipset(ctx) >= 0x11);
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d34 2
d39 1
a39 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d41 2
a42 2
	BEGIN_RING(chan, celsius, NV10_3D_ALPHA_FUNC_ENABLE, 1);
	OUT_RINGb(chan, ctx->Color.AlphaEnabled);
d44 3
a46 3
	BEGIN_RING(chan, celsius, NV10_3D_ALPHA_FUNC_FUNC, 2);
	OUT_RING(chan, nvgl_comparison_op(ctx->Color.AlphaFunc));
	OUT_RING(chan, FLOAT_TO_UBYTE(ctx->Color.AlphaRef));
d52 1
a52 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d54 2
a55 2
	BEGIN_RING(chan, celsius, NV10_3D_BLEND_COLOR, 1);
	OUT_RING(chan, FLOAT_TO_UBYTE(ctx->Color.BlendColor[3]) << 24 |
d64 1
a64 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d66 2
a67 2
	BEGIN_RING(chan, celsius, NV10_3D_BLEND_FUNC_ENABLE, 1);
	OUT_RINGb(chan, ctx->Color.BlendEnabled);
d69 2
a70 2
	BEGIN_RING(chan, celsius, NV10_3D_BLEND_EQUATION, 1);
	OUT_RING(chan, nvgl_blend_eqn(ctx->Color.Blend[0].EquationRGB));
d76 1
a76 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d78 3
a80 3
	BEGIN_RING(chan, celsius, NV10_3D_BLEND_FUNC_SRC, 2);
	OUT_RING(chan, nvgl_blend_func(ctx->Color.Blend[0].SrcRGB));
	OUT_RING(chan, nvgl_blend_func(ctx->Color.Blend[0].DstRGB));
d86 1
a86 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d88 2
a89 2
	BEGIN_RING(chan, celsius, NV10_3D_COLOR_MASK, 1);
	OUT_RING(chan, ((ctx->Color.ColorMask[0][3] ? 1 << 24 : 0) |
d98 1
a98 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d100 6
a105 6
	BEGIN_RING(chan, celsius, NV10_3D_DEPTH_TEST_ENABLE, 1);
	OUT_RINGb(chan, ctx->Depth.Test);
	BEGIN_RING(chan, celsius, NV10_3D_DEPTH_WRITE_ENABLE, 1);
	OUT_RINGb(chan, ctx->Depth.Mask);
	BEGIN_RING(chan, celsius, NV10_3D_DEPTH_FUNC, 1);
	OUT_RING(chan, nvgl_comparison_op(ctx->Depth.Func));
d111 1
a111 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d113 2
a114 2
	BEGIN_RING(chan, celsius, NV10_3D_DITHER_ENABLE, 1);
	OUT_RINGb(chan, ctx->Color.DitherFlag);
d120 1
a120 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d125 3
a127 3
	BEGIN_RING(chan, celsius, NV11_3D_COLOR_LOGIC_OP_ENABLE, 2);
	OUT_RINGb(chan, ctx->Color.ColorLogicOpEnabled);
	OUT_RING(chan, nvgl_logicop_func(ctx->Color.LogicOp));
d133 1
a133 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d135 2
a136 2
	BEGIN_RING(chan, celsius, NV10_3D_SHADE_MODEL, 1);
	OUT_RING(chan, ctx->Light.ShadeModel == GL_SMOOTH ?
d143 1
a143 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d145 2
a146 2
	BEGIN_RING(chan, celsius, NV10_3D_STENCIL_ENABLE, 1);
	OUT_RINGb(chan, ctx->Stencil.Enabled);
d148 4
a151 4
	BEGIN_RING(chan, celsius, NV10_3D_STENCIL_FUNC_FUNC, 3);
	OUT_RING(chan, nvgl_comparison_op(ctx->Stencil.Function[0]));
	OUT_RING(chan, ctx->Stencil.Ref[0]);
	OUT_RING(chan, ctx->Stencil.ValueMask[0]);
d157 1
a157 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d159 2
a160 2
	BEGIN_RING(chan, celsius, NV10_3D_STENCIL_MASK, 1);
	OUT_RING(chan, ctx->Stencil.WriteMask[0]);
d166 1
a166 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d168 4
a171 4
	BEGIN_RING(chan, celsius, NV10_3D_STENCIL_OP_FAIL, 3);
	OUT_RING(chan, nvgl_stencil_op(ctx->Stencil.FailFunc[0]));
	OUT_RING(chan, nvgl_stencil_op(ctx->Stencil.ZFailFunc[0]));
	OUT_RING(chan, nvgl_stencil_op(ctx->Stencil.ZPassFunc[0]));
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d71 1
a71 1
	OUT_RING(chan, nvgl_blend_eqn(ctx->Color.BlendEquationRGB));
d81 2
a82 2
	OUT_RING(chan, nvgl_blend_func(ctx->Color.BlendSrcRGB));
	OUT_RING(chan, nvgl_blend_func(ctx->Color.BlendDstRGB));
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d30 2
a31 1
#include "nouveau_class.h"
d35 1
a35 1
nv10_emit_alpha_func(GLcontext *ctx, int emit)
d40 2
a41 2
	BEGIN_RING(chan, celsius, NV10TCL_ALPHA_FUNC_ENABLE, 1);
	OUT_RING(chan, ctx->Color.AlphaEnabled ? 1 : 0);
d43 1
a43 1
	BEGIN_RING(chan, celsius, NV10TCL_ALPHA_FUNC_FUNC, 2);
d49 1
a49 1
nv10_emit_blend_color(GLcontext *ctx, int emit)
d54 1
a54 1
	BEGIN_RING(chan, celsius, NV10TCL_BLEND_COLOR, 1);
d62 1
a62 1
nv10_emit_blend_equation(GLcontext *ctx, int emit)
d67 2
a68 2
	BEGIN_RING(chan, celsius, NV10TCL_BLEND_FUNC_ENABLE, 1);
	OUT_RING(chan, ctx->Color.BlendEnabled ? 1 : 0);
d70 1
a70 1
	BEGIN_RING(chan, celsius, NV10TCL_BLEND_EQUATION, 1);
d75 1
a75 1
nv10_emit_blend_func(GLcontext *ctx, int emit)
d80 1
a80 1
	BEGIN_RING(chan, celsius, NV10TCL_BLEND_FUNC_SRC, 2);
d86 1
a86 1
nv10_emit_color_mask(GLcontext *ctx, int emit)
d91 1
a91 1
	BEGIN_RING(chan, celsius, NV10TCL_COLOR_MASK, 1);
d99 1
a99 1
nv10_emit_depth(GLcontext *ctx, int emit)
d104 5
a108 5
	BEGIN_RING(chan, celsius, NV10TCL_DEPTH_TEST_ENABLE, 1);
	OUT_RING(chan, ctx->Depth.Test ? 1 : 0);
	BEGIN_RING(chan, celsius, NV10TCL_DEPTH_WRITE_ENABLE, 1);
	OUT_RING(chan, ctx->Depth.Mask ? 1 : 0);
	BEGIN_RING(chan, celsius, NV10TCL_DEPTH_FUNC, 1);
d113 1
a113 1
nv10_emit_dither(GLcontext *ctx, int emit)
d118 2
a119 2
	BEGIN_RING(chan, celsius, NV10TCL_DITHER_ENABLE, 1);
	OUT_RING(chan, ctx->Color.DitherFlag ? 1 : 0);
d123 1
a123 1
nv10_emit_logic_opcode(GLcontext *ctx, int emit)
d131 2
a132 2
	BEGIN_RING(chan, celsius, NV11TCL_COLOR_LOGIC_OP_ENABLE, 2);
	OUT_RING(chan, ctx->Color.ColorLogicOpEnabled ? 1 : 0);
d137 1
a137 1
nv10_emit_shade_model(GLcontext *ctx, int emit)
d142 1
a142 1
	BEGIN_RING(chan, celsius, NV10TCL_SHADE_MODEL, 1);
d144 1
a144 1
		 NV10TCL_SHADE_MODEL_SMOOTH : NV10TCL_SHADE_MODEL_FLAT);
d148 1
a148 1
nv10_emit_stencil_func(GLcontext *ctx, int emit)
d153 2
a154 2
	BEGIN_RING(chan, celsius, NV10TCL_STENCIL_ENABLE, 1);
	OUT_RING(chan, ctx->Stencil.Enabled ? 1 : 0);
d156 1
a156 1
	BEGIN_RING(chan, celsius, NV10TCL_STENCIL_FUNC_FUNC, 3);
d163 1
a163 1
nv10_emit_stencil_mask(GLcontext *ctx, int emit)
d168 1
a168 1
	BEGIN_RING(chan, celsius, NV10TCL_STENCIL_MASK, 1);
d173 1
a173 1
nv10_emit_stencil_op(GLcontext *ctx, int emit)
d178 1
a178 1
	BEGIN_RING(chan, celsius, NV10TCL_STENCIL_OP_FAIL, 3);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d30 1
a30 2
#include "nouveau_util.h"
#include "nv10_3d.xml.h"
d34 1
a34 1
nv10_emit_alpha_func(struct gl_context *ctx, int emit)
d39 2
a40 2
	BEGIN_RING(chan, celsius, NV10_3D_ALPHA_FUNC_ENABLE, 1);
	OUT_RINGb(chan, ctx->Color.AlphaEnabled);
d42 1
a42 1
	BEGIN_RING(chan, celsius, NV10_3D_ALPHA_FUNC_FUNC, 2);
d48 1
a48 1
nv10_emit_blend_color(struct gl_context *ctx, int emit)
d53 1
a53 1
	BEGIN_RING(chan, celsius, NV10_3D_BLEND_COLOR, 1);
d61 1
a61 1
nv10_emit_blend_equation(struct gl_context *ctx, int emit)
d66 2
a67 2
	BEGIN_RING(chan, celsius, NV10_3D_BLEND_FUNC_ENABLE, 1);
	OUT_RINGb(chan, ctx->Color.BlendEnabled);
d69 1
a69 1
	BEGIN_RING(chan, celsius, NV10_3D_BLEND_EQUATION, 1);
d74 1
a74 1
nv10_emit_blend_func(struct gl_context *ctx, int emit)
d79 1
a79 1
	BEGIN_RING(chan, celsius, NV10_3D_BLEND_FUNC_SRC, 2);
d85 1
a85 1
nv10_emit_color_mask(struct gl_context *ctx, int emit)
d90 1
a90 1
	BEGIN_RING(chan, celsius, NV10_3D_COLOR_MASK, 1);
d98 1
a98 1
nv10_emit_depth(struct gl_context *ctx, int emit)
d103 5
a107 5
	BEGIN_RING(chan, celsius, NV10_3D_DEPTH_TEST_ENABLE, 1);
	OUT_RINGb(chan, ctx->Depth.Test);
	BEGIN_RING(chan, celsius, NV10_3D_DEPTH_WRITE_ENABLE, 1);
	OUT_RINGb(chan, ctx->Depth.Mask);
	BEGIN_RING(chan, celsius, NV10_3D_DEPTH_FUNC, 1);
d112 1
a112 1
nv10_emit_dither(struct gl_context *ctx, int emit)
d117 2
a118 2
	BEGIN_RING(chan, celsius, NV10_3D_DITHER_ENABLE, 1);
	OUT_RINGb(chan, ctx->Color.DitherFlag);
d122 1
a122 1
nv10_emit_logic_opcode(struct gl_context *ctx, int emit)
d130 2
a131 2
	BEGIN_RING(chan, celsius, NV11_3D_COLOR_LOGIC_OP_ENABLE, 2);
	OUT_RINGb(chan, ctx->Color.ColorLogicOpEnabled);
d136 1
a136 1
nv10_emit_shade_model(struct gl_context *ctx, int emit)
d141 1
a141 1
	BEGIN_RING(chan, celsius, NV10_3D_SHADE_MODEL, 1);
d143 1
a143 1
		 NV10_3D_SHADE_MODEL_SMOOTH : NV10_3D_SHADE_MODEL_FLAT);
d147 1
a147 1
nv10_emit_stencil_func(struct gl_context *ctx, int emit)
d152 2
a153 2
	BEGIN_RING(chan, celsius, NV10_3D_STENCIL_ENABLE, 1);
	OUT_RINGb(chan, ctx->Stencil.Enabled);
d155 1
a155 1
	BEGIN_RING(chan, celsius, NV10_3D_STENCIL_FUNC_FUNC, 3);
d162 1
a162 1
nv10_emit_stencil_mask(struct gl_context *ctx, int emit)
d167 1
a167 1
	BEGIN_RING(chan, celsius, NV10_3D_STENCIL_MASK, 1);
d172 1
a172 1
nv10_emit_stencil_op(struct gl_context *ctx, int emit)
d177 1
a177 1
	BEGIN_RING(chan, celsius, NV10_3D_STENCIL_OP_FAIL, 3);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a33 2
#include "main/stencil.h"

d37 2
a38 1
	struct nouveau_pushbuf *push = context_push(ctx);
d40 2
a41 2
	BEGIN_NV04(push, NV10_3D(ALPHA_FUNC_ENABLE), 1);
	PUSH_DATAb(push, ctx->Color.AlphaEnabled);
d43 3
a45 3
	BEGIN_NV04(push, NV10_3D(ALPHA_FUNC_FUNC), 2);
	PUSH_DATA (push, nvgl_comparison_op(ctx->Color.AlphaFunc));
	PUSH_DATA (push, FLOAT_TO_UBYTE(ctx->Color.AlphaRef));
d51 2
a52 1
	struct nouveau_pushbuf *push = context_push(ctx);
d54 2
a55 2
	BEGIN_NV04(push, NV10_3D(BLEND_COLOR), 1);
	PUSH_DATA (push, FLOAT_TO_UBYTE(ctx->Color.BlendColor[3]) << 24 |
d64 2
a65 1
	struct nouveau_pushbuf *push = context_push(ctx);
d67 2
a68 2
	BEGIN_NV04(push, NV10_3D(BLEND_FUNC_ENABLE), 1);
	PUSH_DATAb(push, ctx->Color.BlendEnabled);
d70 2
a71 2
	BEGIN_NV04(push, NV10_3D(BLEND_EQUATION), 1);
	PUSH_DATA (push, nvgl_blend_eqn(ctx->Color.Blend[0].EquationRGB));
d77 2
a78 1
	struct nouveau_pushbuf *push = context_push(ctx);
d80 3
a82 3
	BEGIN_NV04(push, NV10_3D(BLEND_FUNC_SRC), 2);
	PUSH_DATA (push, nvgl_blend_func(ctx->Color.Blend[0].SrcRGB));
	PUSH_DATA (push, nvgl_blend_func(ctx->Color.Blend[0].DstRGB));
d88 2
a89 1
	struct nouveau_pushbuf *push = context_push(ctx);
d91 2
a92 2
	BEGIN_NV04(push, NV10_3D(COLOR_MASK), 1);
	PUSH_DATA (push, ((ctx->Color.ColorMask[0][3] ? 1 << 24 : 0) |
d101 2
a102 1
	struct nouveau_pushbuf *push = context_push(ctx);
d104 6
a109 6
	BEGIN_NV04(push, NV10_3D(DEPTH_TEST_ENABLE), 1);
	PUSH_DATAb(push, ctx->Depth.Test);
	BEGIN_NV04(push, NV10_3D(DEPTH_WRITE_ENABLE), 1);
	PUSH_DATAb(push, ctx->Depth.Mask);
	BEGIN_NV04(push, NV10_3D(DEPTH_FUNC), 1);
	PUSH_DATA (push, nvgl_comparison_op(ctx->Depth.Func));
d115 2
a116 1
	struct nouveau_pushbuf *push = context_push(ctx);
d118 2
a119 2
	BEGIN_NV04(push, NV10_3D(DITHER_ENABLE), 1);
	PUSH_DATAb(push, ctx->Color.DitherFlag);
d125 2
a126 1
	struct nouveau_pushbuf *push = context_push(ctx);
d131 3
a133 3
	BEGIN_NV04(push, NV11_3D(COLOR_LOGIC_OP_ENABLE), 2);
	PUSH_DATAb(push, ctx->Color.ColorLogicOpEnabled);
	PUSH_DATA (push, nvgl_logicop_func(ctx->Color.LogicOp));
d139 2
a140 1
	struct nouveau_pushbuf *push = context_push(ctx);
d142 2
a143 2
	BEGIN_NV04(push, NV10_3D(SHADE_MODEL), 1);
	PUSH_DATA (push, ctx->Light.ShadeModel == GL_SMOOTH ?
d150 2
a151 1
	struct nouveau_pushbuf *push = context_push(ctx);
d153 2
a154 2
	BEGIN_NV04(push, NV10_3D(STENCIL_ENABLE), 1);
	PUSH_DATAb(push, ctx->Stencil.Enabled);
d156 4
a159 4
	BEGIN_NV04(push, NV10_3D(STENCIL_FUNC_FUNC), 3);
	PUSH_DATA (push, nvgl_comparison_op(ctx->Stencil.Function[0]));
	PUSH_DATA (push, _mesa_get_stencil_ref(ctx, 0));
	PUSH_DATA (push, ctx->Stencil.ValueMask[0]);
d165 2
a166 1
	struct nouveau_pushbuf *push = context_push(ctx);
d168 2
a169 2
	BEGIN_NV04(push, NV10_3D(STENCIL_MASK), 1);
	PUSH_DATA (push, ctx->Stencil.WriteMask[0]);
d175 2
a176 1
	struct nouveau_pushbuf *push = context_push(ctx);
d178 4
a181 4
	BEGIN_NV04(push, NV10_3D(STENCIL_OP_FAIL), 3);
	PUSH_DATA (push, nvgl_stencil_op(ctx->Stencil.FailFunc[0]));
	PUSH_DATA (push, nvgl_stencil_op(ctx->Stencil.ZFailFunc[0]));
	PUSH_DATA (push, nvgl_stencil_op(ctx->Stencil.ZPassFunc[0]));
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a30 1
#include "nv_object.xml.h"
d123 1
a123 1
	       || context_eng3d(ctx)->oclass >= NV15_3D_CLASS);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a99 1
	struct gl_framebuffer *fb = ctx->DrawBuffer;
d102 1
a102 1
	PUSH_DATAb(push, ctx->Depth.Test && fb->Visual.depthBits > 0);
d104 1
a104 1
	PUSH_DATAb(push, ctx->Depth.Mask && fb->Visual.depthBits > 0);
d147 1
a147 1
	PUSH_DATAb(push, ctx->Stencil._Enabled);
@


