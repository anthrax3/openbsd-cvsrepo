head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.04.24;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.38;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.43;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.52;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.11.51;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.48.56;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright © 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <eric@@anholt.net>
 *
 */

#include "main/macros.h"
#include "intel_batchbuffer.h"
#include "brw_context.h"
#include "brw_state.h"
#include "brw_defines.h"

/**
 * When the GS is not in use, we assign the entire URB space to the VS.  When
 * the GS is in use, we split the URB space evenly between the VS and the GS.
 * This is not ideal, but it's simple.
 *
 *           URB size / 2                   URB size / 2
 *   _____________-______________   _____________-______________
 *  /                            \ /                            \
 * +-------------------------------------------------------------+
 * | Vertex Shader Entries        | Geometry Shader Entries      |
 * +-------------------------------------------------------------+
 *
 * Sandybridge GT1 has 32kB of URB space, while GT2 has 64kB.
 * (See the Sandybridge PRM, Volume 2, Part 1, Section 1.4.7: 3DSTATE_URB.)
 */
static void
gen6_upload_urb( struct brw_context *brw )
{
   int nr_vs_entries, nr_gs_entries;
   int total_urb_size = brw->urb.size * 1024; /* in bytes */

   /* CACHE_NEW_VS_PROG */
   unsigned vs_size = MAX2(brw->vs.prog_data->base.urb_entry_size, 1);

   /* We use the same VUE layout for VS outputs and GS outputs (as it's what
    * the SF and Clipper expect), so we can simply make the GS URB entry size
    * the same as for the VS.  This may technically be too large in cases
    * where we have few vertex attributes and a lot of varyings, since the VS
    * size is determined by the larger of the two.  For now, it's safe.
    */
   unsigned gs_size = vs_size;

   /* Calculate how many entries fit in each stage's section of the URB */
   if (brw->ff_gs.prog_active) {
      nr_vs_entries = (total_urb_size/2) / (vs_size * 128);
      nr_gs_entries = (total_urb_size/2) / (gs_size * 128);
   } else {
      nr_vs_entries = total_urb_size / (vs_size * 128);
      nr_gs_entries = 0;
   }

   /* Then clamp to the maximum allowed by the hardware */
   if (nr_vs_entries > brw->urb.max_vs_entries)
      nr_vs_entries = brw->urb.max_vs_entries;

   if (nr_gs_entries > brw->urb.max_gs_entries)
      nr_gs_entries = brw->urb.max_gs_entries;

   /* Finally, both must be a multiple of 4 (see 3DSTATE_URB in the PRM). */
   brw->urb.nr_vs_entries = ROUND_DOWN_TO(nr_vs_entries, 4);
   brw->urb.nr_gs_entries = ROUND_DOWN_TO(nr_gs_entries, 4);

   assert(brw->urb.nr_vs_entries >= brw->urb.min_vs_entries);
   assert(brw->urb.nr_vs_entries % 4 == 0);
   assert(brw->urb.nr_gs_entries % 4 == 0);
   assert(vs_size <= 5);
   assert(gs_size <= 5);

   BEGIN_BATCH(3);
   OUT_BATCH(_3DSTATE_URB << 16 | (3 - 2));
   OUT_BATCH(((vs_size - 1) << GEN6_URB_VS_SIZE_SHIFT) |
	     ((brw->urb.nr_vs_entries) << GEN6_URB_VS_ENTRIES_SHIFT));
   OUT_BATCH(((gs_size - 1) << GEN6_URB_GS_SIZE_SHIFT) |
	     ((brw->urb.nr_gs_entries) << GEN6_URB_GS_ENTRIES_SHIFT));
   ADVANCE_BATCH();

   /* From the PRM Volume 2 part 1, section 1.4.7:
    *
    *   Because of a urb corruption caused by allocating a previous gsunit’s
    *   urb entry to vsunit software is required to send a "GS NULL
    *   Fence"(Send URB fence with VS URB size == 1 and GS URB size == 0) plus
    *   a dummy DRAW call before any case where VS will be taking over GS URB
    *   space.
    *
    * It is not clear exactly what this means ("URB fence" is a command that
    * doesn't exist on Gen6).  So for now we just do a full pipeline flush as
    * a workaround.
    */
   if (brw->urb.gen6_gs_previously_active && !brw->ff_gs.prog_active)
      intel_batchbuffer_emit_mi_flush(brw);
   brw->urb.gen6_gs_previously_active = brw->ff_gs.prog_active;
}

const struct brw_tracked_state gen6_urb = {
   .dirty = {
      .mesa = 0,
      .brw = BRW_NEW_CONTEXT,
      .cache = (CACHE_NEW_VS_PROG | CACHE_NEW_FF_GS_PROG),
   },
   .emit = gen6_upload_urb,
};
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a54 2
   bool gs_present = brw->ff_gs.prog_active || brw->geometry_program;

d58 5
a62 9
   /* Whe using GS to do transform feedback only we use the same VUE layout for
    * VS outputs and GS outputs (as it's what the SF and Clipper expect), so we
    * can simply make the GS URB entry size the same as for the VS.  This may
    * technically be too large in cases where we have few vertex attributes and
    * a lot of varyings, since the VS size is determined by the larger of the
    * two. For now, it's safe.
    *
    * For user-provided GS the assumption above does not hold since the GS
    * outputs can be different from the VS outputs.
a64 4
   if (brw->geometry_program) {
      gs_size = brw->gs.prog_data->base.urb_entry_size;
      assert(gs_size >= 1);
   }
d67 1
a67 1
   if (gs_present) {
d112 1
a112 1
   if (brw->urb.gs_present && !gs_present)
d114 1
a114 1
   brw->urb.gs_present = gs_present;
d120 2
a121 2
      .brw = (BRW_NEW_CONTEXT | BRW_NEW_GEOMETRY_PROGRAM),
      .cache = (CACHE_NEW_VS_PROG | CACHE_NEW_GS_PROG | CACHE_NEW_FF_GS_PROG),
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d55 2
d60 9
a68 5
   /* We use the same VUE layout for VS outputs and GS outputs (as it's what
    * the SF and Clipper expect), so we can simply make the GS URB entry size
    * the same as for the VS.  This may technically be too large in cases
    * where we have few vertex attributes and a lot of varyings, since the VS
    * size is determined by the larger of the two.  For now, it's safe.
d71 4
d77 1
a77 1
   if (brw->ff_gs.prog_active) {
d122 1
a122 1
   if (brw->urb.gen6_gs_previously_active && !brw->ff_gs.prog_active)
d124 1
a124 1
   brw->urb.gen6_gs_previously_active = brw->ff_gs.prog_active;
d130 2
a131 2
      .brw = BRW_NEW_CONTEXT,
      .cache = (CACHE_NEW_VS_PROG | CACHE_NEW_FF_GS_PROG),
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d67 1
a67 1
   if (brw->gs.prog_active) {
d86 1
a86 1
   assert(brw->urb.nr_vs_entries >= 24);
d89 2
a90 2
   assert(vs_size < 5);
   assert(gs_size < 5);
d112 1
a112 1
   if (brw->urb.gen6_gs_previously_active && !brw->gs.prog_active)
d114 1
a114 1
   brw->urb.gen6_gs_previously_active = brw->gs.prog_active;
d121 1
a121 1
      .cache = (CACHE_NEW_VS_PROG | CACHE_NEW_GS_PROG),
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d34 15
d50 1
a50 1
prepare_urb( struct brw_context *brw )
d52 2
a53 1
   int nr_vs_entries;
d56 1
a56 1
   brw->urb.vs_size = MAX2(brw->vs.prog_data->urb_entry_size, 1);
d58 16
a73 2
   /* Calculate how many VS URB entries fit in the total URB size */
   nr_vs_entries = (brw->urb.size * 1024) / (brw->urb.vs_size * 128);
d75 1
d79 4
a82 1
   /* According to volume 2a, nr_vs_entries must be a multiple of 4. */
d84 1
a84 12

   /* Since we currently don't support Geometry Shaders, we always put the
    * GS unit in passthrough mode and don't allocate it any URB space.
    */
   brw->urb.nr_gs_entries = 0;
   brw->urb.gs_size = 1; /* Incorrect, but with 0 GS entries it doesn't matter. */
}

static void
upload_urb(struct brw_context *brw)
{
   struct intel_context *intel = &brw->intel;
d89 2
a90 2
   /* GS requirement */
   assert(!brw->gs.prog_active || brw->urb.vs_size < 5);
d94 1
a94 1
   OUT_BATCH(((brw->urb.vs_size - 1) << GEN6_URB_VS_SIZE_SHIFT) |
d96 1
a96 1
   OUT_BATCH(((brw->urb.gs_size - 1) << GEN6_URB_GS_SIZE_SHIFT) |
d99 16
d123 1
a123 2
   .prepare = prepare_urb,
   .emit = upload_urb,
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d45 2
a46 2
   if (nr_vs_entries > brw->urb.max_vs_handles)
      nr_vs_entries = brw->urb.max_vs_handles;
d67 1
a67 1
   assert(!brw->gs.prog_bo || brw->urb.vs_size < 5);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d37 2
a38 5
   brw->urb.nr_vs_entries = 24;
   if (brw->gs.prog_bo)
      brw->urb.nr_gs_entries = 4;
   else
      brw->urb.nr_gs_entries = 0;
d40 7
a46 1
   brw->urb.vs_size = MIN2(brw->vs.prog_data->urb_entry_size, 1);
d48 5
a52 2
   /* Check that the number of URB rows (8 floats each) allocated is less
    * than the URB space.
d54 2
a55 2
   assert((brw->urb.nr_vs_entries +
	   brw->urb.nr_gs_entries) * brw->urb.vs_size * 8 < 64 * 1024);
d63 1
a68 2
   intel_batchbuffer_emit_mi_flush(intel->batch);

d70 1
a70 1
   OUT_BATCH(CMD_URB << 16 | (3 - 2));
d73 1
a73 1
   OUT_BATCH(((brw->urb.vs_size - 1) << GEN6_URB_GS_SIZE_SHIFT) |
a75 2

   intel_batchbuffer_emit_mi_flush(intel->batch);
d82 1
a82 1
      .cache = CACHE_NEW_VS_PROG,
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d37 5
a41 2
   int nr_vs_entries;

d43 1
a43 7
   brw->urb.vs_size = MAX2(brw->vs.prog_data->urb_entry_size, 1);

   /* Calculate how many VS URB entries fit in the total URB size */
   nr_vs_entries = (brw->urb.size * 1024) / (brw->urb.vs_size * 128);

   if (nr_vs_entries > brw->urb.max_vs_handles)
      nr_vs_entries = brw->urb.max_vs_handles;
d45 2
a46 5
   /* According to volume 2a, nr_vs_entries must be a multiple of 4. */
   brw->urb.nr_vs_entries = ROUND_DOWN_TO(nr_vs_entries, 4);

   /* Since we currently don't support Geometry Shaders, we always put the
    * GS unit in passthrough mode and don't allocate it any URB space.
d48 2
a49 2
   brw->urb.nr_gs_entries = 0;
   brw->urb.gs_size = 1; /* Incorrect, but with 0 GS entries it doesn't matter. */
a56 1
   assert(brw->urb.nr_vs_entries >= 24);
d62 2
d65 1
a65 1
   OUT_BATCH(_3DSTATE_URB << 16 | (3 - 2));
d68 1
a68 1
   OUT_BATCH(((brw->urb.gs_size - 1) << GEN6_URB_GS_SIZE_SHIFT) |
d71 2
d79 1
a79 1
      .cache = (CACHE_NEW_VS_PROG | CACHE_NEW_GS_PROG),
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a33 15
/**
 * When the GS is not in use, we assign the entire URB space to the VS.  When
 * the GS is in use, we split the URB space evenly between the VS and the GS.
 * This is not ideal, but it's simple.
 *
 *           URB size / 2                   URB size / 2
 *   _____________-______________   _____________-______________
 *  /                            \ /                            \
 * +-------------------------------------------------------------+
 * | Vertex Shader Entries        | Geometry Shader Entries      |
 * +-------------------------------------------------------------+
 *
 * Sandybridge GT1 has 32kB of URB space, while GT2 has 64kB.
 * (See the Sandybridge PRM, Volume 2, Part 1, Section 1.4.7: 3DSTATE_URB.)
 */
d35 1
a35 1
gen6_upload_urb( struct brw_context *brw )
d37 1
a37 2
   int nr_vs_entries, nr_gs_entries;
   int total_urb_size = brw->urb.size * 1024; /* in bytes */
d40 1
a40 1
   unsigned vs_size = MAX2(brw->vs.prog_data->base.urb_entry_size, 1);
d42 5
a46 7
   /* We use the same VUE layout for VS outputs and GS outputs (as it's what
    * the SF and Clipper expect), so we can simply make the GS URB entry size
    * the same as for the VS.  This may technically be too large in cases
    * where we have few vertex attributes and a lot of varyings, since the VS
    * size is determined by the larger of the two.  For now, it's safe.
    */
   unsigned gs_size = vs_size;
d48 2
a49 12
   /* Calculate how many entries fit in each stage's section of the URB */
   if (brw->gs.prog_active) {
      nr_vs_entries = (total_urb_size/2) / (vs_size * 128);
      nr_gs_entries = (total_urb_size/2) / (gs_size * 128);
   } else {
      nr_vs_entries = total_urb_size / (vs_size * 128);
      nr_gs_entries = 0;
   }

   /* Then clamp to the maximum allowed by the hardware */
   if (nr_vs_entries > brw->urb.max_vs_entries)
      nr_vs_entries = brw->urb.max_vs_entries;
d51 6
a56 2
   if (nr_gs_entries > brw->urb.max_gs_entries)
      nr_gs_entries = brw->urb.max_gs_entries;
d58 4
a61 3
   /* Finally, both must be a multiple of 4 (see 3DSTATE_URB in the PRM). */
   brw->urb.nr_vs_entries = ROUND_DOWN_TO(nr_vs_entries, 4);
   brw->urb.nr_gs_entries = ROUND_DOWN_TO(nr_gs_entries, 4);
d66 2
a67 2
   assert(vs_size < 5);
   assert(gs_size < 5);
d71 1
a71 1
   OUT_BATCH(((vs_size - 1) << GEN6_URB_VS_SIZE_SHIFT) |
d73 1
a73 1
   OUT_BATCH(((gs_size - 1) << GEN6_URB_GS_SIZE_SHIFT) |
a75 16

   /* From the PRM Volume 2 part 1, section 1.4.7:
    *
    *   Because of a urb corruption caused by allocating a previous gsunit’s
    *   urb entry to vsunit software is required to send a "GS NULL
    *   Fence"(Send URB fence with VS URB size == 1 and GS URB size == 0) plus
    *   a dummy DRAW call before any case where VS will be taking over GS URB
    *   space.
    *
    * It is not clear exactly what this means ("URB fence" is a command that
    * doesn't exist on Gen6).  So for now we just do a full pipeline flush as
    * a workaround.
    */
   if (brw->urb.gen6_gs_previously_active && !brw->gs.prog_active)
      intel_batchbuffer_emit_mi_flush(brw);
   brw->urb.gen6_gs_previously_active = brw->gs.prog_active;
d84 2
a85 1
   .emit = gen6_upload_urb,
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d67 1
a67 1
   if (brw->ff_gs.prog_active) {
d86 1
a86 1
   assert(brw->urb.nr_vs_entries >= brw->urb.min_vs_entries);
d89 2
a90 2
   assert(vs_size <= 5);
   assert(gs_size <= 5);
d112 1
a112 1
   if (brw->urb.gen6_gs_previously_active && !brw->ff_gs.prog_active)
d114 1
a114 1
   brw->urb.gen6_gs_previously_active = brw->ff_gs.prog_active;
d121 1
a121 1
      .cache = (CACHE_NEW_VS_PROG | CACHE_NEW_FF_GS_PROG),
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a54 2
   bool gs_present = brw->ff_gs.prog_active || brw->geometry_program;

d58 5
a62 9
   /* Whe using GS to do transform feedback only we use the same VUE layout for
    * VS outputs and GS outputs (as it's what the SF and Clipper expect), so we
    * can simply make the GS URB entry size the same as for the VS.  This may
    * technically be too large in cases where we have few vertex attributes and
    * a lot of varyings, since the VS size is determined by the larger of the
    * two. For now, it's safe.
    *
    * For user-provided GS the assumption above does not hold since the GS
    * outputs can be different from the VS outputs.
a64 4
   if (brw->geometry_program) {
      gs_size = brw->gs.prog_data->base.urb_entry_size;
      assert(gs_size >= 1);
   }
d67 1
a67 1
   if (gs_present) {
d112 1
a112 1
   if (brw->urb.gs_present && !gs_present)
d114 1
a114 1
   brw->urb.gs_present = gs_present;
d120 2
a121 2
      .brw = (BRW_NEW_CONTEXT | BRW_NEW_GEOMETRY_PROGRAM),
      .cache = (CACHE_NEW_VS_PROG | CACHE_NEW_GS_PROG | CACHE_NEW_FF_GS_PROG),
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d55 2
d60 9
a68 5
   /* We use the same VUE layout for VS outputs and GS outputs (as it's what
    * the SF and Clipper expect), so we can simply make the GS URB entry size
    * the same as for the VS.  This may technically be too large in cases
    * where we have few vertex attributes and a lot of varyings, since the VS
    * size is determined by the larger of the two.  For now, it's safe.
d71 4
d77 1
a77 1
   if (brw->ff_gs.prog_active) {
d122 1
a122 1
   if (brw->urb.gen6_gs_previously_active && !brw->ff_gs.prog_active)
d124 1
a124 1
   brw->urb.gen6_gs_previously_active = brw->ff_gs.prog_active;
d130 2
a131 2
      .brw = BRW_NEW_CONTEXT,
      .cache = (CACHE_NEW_VS_PROG | CACHE_NEW_FF_GS_PROG),
@


