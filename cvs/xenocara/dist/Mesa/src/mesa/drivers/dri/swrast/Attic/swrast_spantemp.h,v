head	1.5;
access;
symbols
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.09.05.14.05.45;	author jsg;	state dead;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.41;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.26;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.14.58.18;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.43;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge Mesa 9.2.0
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  6.5.1
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


/*
 * Modified version of swrast/s_spantemp.h for front-buffer rendering. The
 * no-mask paths use a scratch row to avoid repeated calls to the loader.
 *
 * For the mask paths we always use an array of 4 elements of RB_TYPE. This is
 * to satisfy the xorg loader requirement of an image pitch of 32 bits and
 * should be ok for other loaders also.
 */


#ifndef _SWRAST_SPANTEMP_ONCE
#define _SWRAST_SPANTEMP_ONCE

static INLINE void
PUT_PIXEL( struct gl_context *glCtx, GLint x, GLint y, GLvoid *p )
{
    __DRIcontext *ctx = swrast_context(glCtx)->cPriv;
    __DRIdrawable *draw = swrast_drawable(glCtx->DrawBuffer)->dPriv;

    __DRIscreen *screen = ctx->driScreenPriv;

    screen->swrast_loader->putImage(draw, __DRI_SWRAST_IMAGE_OP_DRAW,
				    x, y, 1, 1, (char *)p,
				    draw->loaderPrivate);
}


static INLINE void
GET_PIXEL( struct gl_context *glCtx, GLint x, GLint y, GLubyte *p )
{
    __DRIcontext *ctx = swrast_context(glCtx)->cPriv;
    __DRIdrawable *read = swrast_drawable(glCtx->ReadBuffer)->dPriv;

    __DRIscreen *screen = ctx->driScreenPriv;

    screen->swrast_loader->getImage(read, x, y, 1, 1, (char *)p,
				    read->loaderPrivate);
}

static INLINE void
PUT_ROW( struct gl_context *glCtx, GLint x, GLint y, GLuint n, char *row )
{
    __DRIcontext *ctx = swrast_context(glCtx)->cPriv;
    __DRIdrawable *draw = swrast_drawable(glCtx->DrawBuffer)->dPriv;

    __DRIscreen *screen = ctx->driScreenPriv;

    screen->swrast_loader->putImage(draw, __DRI_SWRAST_IMAGE_OP_DRAW,
				    x, y, n, 1, row,
				    draw->loaderPrivate);
}

static INLINE void
GET_ROW( struct gl_context *glCtx, GLint x, GLint y, GLuint n, char *row )
{
    __DRIcontext *ctx = swrast_context(glCtx)->cPriv;
    __DRIdrawable *read = swrast_drawable(glCtx->ReadBuffer)->dPriv;

    __DRIscreen *screen = ctx->driScreenPriv;

    screen->swrast_loader->getImage(read, x, y, n, 1, row,
				    read->loaderPrivate);
}

#endif /* _SWRAST_SPANTEMP_ONCE */


/*
 * Templates for the span/pixel-array write/read functions called via
 * the gl_renderbuffer's GetRow, GetValues, PutRow, PutMonoRow, PutValues
 * and PutMonoValues functions.
 *
 * Define the following macros before including this file:
 *   NAME(BASE)  to generate the function name (i.e. add prefix or suffix)
 *   RB_TYPE  the renderbuffer DataType
 *   SPAN_VARS  to declare any local variables
 *   INIT_PIXEL_PTR(P, X, Y)  to initialize a pointer to a pixel
 *   INC_PIXEL_PTR(P)  to increment a pixel pointer by one pixel
 *   STORE_PIXEL(DST, X, Y, VALUE)  to store pixel values in buffer
 *   FETCH_PIXEL(DST, SRC)  to fetch pixel values from buffer
 *
 * Note that in the STORE_PIXEL macros, we also pass in the (X,Y) coordinates
 * for the pixels to be stored.  This is useful when dithering and probably
 * ignored otherwise.
 */

#include "main/macros.h"


#if !defined(RB_COMPONENTS)
#define RB_COMPONENTS 4
#endif


static void
NAME(get_row)( struct gl_context *ctx, struct gl_renderbuffer *rb,
               GLuint count, GLint x, GLint y, void *values )
{
#ifdef SPAN_VARS
   SPAN_VARS
#endif
   RB_TYPE (*dest)[RB_COMPONENTS] = (RB_TYPE (*)[RB_COMPONENTS]) values;
   GLuint i;
   char *row = swrast_drawable(ctx->ReadBuffer)->row;
   INIT_PIXEL_PTR(pixel, x, y);
   GET_ROW( ctx, x, YFLIP(xrb, y), count, row );
   for (i = 0; i < count; i++) {
      FETCH_PIXEL(dest[i], pixel);
      INC_PIXEL_PTR(pixel);
   }
   (void) rb;
}


static void
NAME(get_values)( struct gl_context *ctx, struct gl_renderbuffer *rb,
                  GLuint count, const GLint x[], const GLint y[], void *values )
{
#ifdef SPAN_VARS
   SPAN_VARS
#endif
   RB_TYPE (*dest)[RB_COMPONENTS] = (RB_TYPE (*)[RB_COMPONENTS]) values;
   GLuint i;
   for (i = 0; i < count; i++) {
      RB_TYPE pixel[4];
      GET_PIXEL(ctx, x[i], YFLIP(xrb, y[i]), pixel);
      FETCH_PIXEL(dest[i], pixel);
   }
   (void) rb;
}


static void
NAME(put_row)( struct gl_context *ctx, struct gl_renderbuffer *rb,
               GLuint count, GLint x, GLint y,
               const void *values, const GLubyte mask[] )
{
#ifdef SPAN_VARS
   SPAN_VARS
#endif
   const RB_TYPE (*src)[RB_COMPONENTS] = (const RB_TYPE (*)[RB_COMPONENTS]) values;
   GLuint i;
   if (mask) {
      for (i = 0; i < count; i++) {
         if (mask[i]) {
            RB_TYPE row[4];
            INIT_PIXEL_PTR(pixel, x, y);
            STORE_PIXEL(pixel, x + i, y, src[i]);
            PUT_PIXEL(ctx, x + i, YFLIP(xrb, y), pixel);
         }
      }
   }
   else {
      char *row = swrast_drawable(ctx->DrawBuffer)->row;
      INIT_PIXEL_PTR(pixel, x, y);
      for (i = 0; i < count; i++) {
         STORE_PIXEL(pixel, x + i, y, src[i]);
         INC_PIXEL_PTR(pixel);
      }
      PUT_ROW( ctx, x, YFLIP(xrb, y), count, row );
   }
   (void) rb;
}


static void
NAME(put_row_rgb)( struct gl_context *ctx, struct gl_renderbuffer *rb,
                   GLuint count, GLint x, GLint y,
                   const void *values, const GLubyte mask[] )
{
#ifdef SPAN_VARS
   SPAN_VARS
#endif
   const RB_TYPE (*src)[3] = (const RB_TYPE (*)[3]) values;
   GLuint i;
   if (mask) {
      for (i = 0; i < count; i++) {
         if (mask[i]) {
            RB_TYPE row[4];
            INIT_PIXEL_PTR(pixel, x, y);
#ifdef STORE_PIXEL_RGB
            STORE_PIXEL_RGB(pixel, x + i, y, src[i]);
#else
            STORE_PIXEL(pixel, x + i, y, src[i]);
#endif
            PUT_PIXEL(ctx, x + i, YFLIP(xrb, y), pixel);
         }
      }
   }
   else {
      char *row = swrast_drawable(ctx->DrawBuffer)->row;
      INIT_PIXEL_PTR(pixel, x, y);
      for (i = 0; i < count; i++) {
#ifdef STORE_PIXEL_RGB
         STORE_PIXEL_RGB(pixel, x + i, y, src[i]);
#else
         STORE_PIXEL(pixel, x + i, y, src[i]);
#endif
         INC_PIXEL_PTR(pixel);
      }
      PUT_ROW( ctx, x, YFLIP(xrb, y), count, row );
   }
   (void) rb;
}


static void
NAME(put_mono_row)( struct gl_context *ctx, struct gl_renderbuffer *rb,
                    GLuint count, GLint x, GLint y,
                    const void *value, const GLubyte mask[] )
{
#ifdef SPAN_VARS
   SPAN_VARS
#endif
   const RB_TYPE *src = (const RB_TYPE *) value;
   GLuint i;
   if (mask) {
      for (i = 0; i < count; i++) {
         if (mask[i]) {
            RB_TYPE row[4];
            INIT_PIXEL_PTR(pixel, x, y);
            STORE_PIXEL(pixel, x + i, y, src);
            PUT_PIXEL(ctx, x + i, YFLIP(xrb, y), pixel);
         }
      }
   }
   else {
      char *row = swrast_drawable(ctx->DrawBuffer)->row;
      INIT_PIXEL_PTR(pixel, x, y);
      for (i = 0; i < count; i++) {
         STORE_PIXEL(pixel, x + i, y, src);
         INC_PIXEL_PTR(pixel);
      }
      PUT_ROW( ctx, x, YFLIP(xrb, y), count, row );
   }
   (void) rb;
}


static void
NAME(put_values)( struct gl_context *ctx, struct gl_renderbuffer *rb,
                  GLuint count, const GLint x[], const GLint y[],
                  const void *values, const GLubyte mask[] )
{
#ifdef SPAN_VARS
   SPAN_VARS
#endif
   const RB_TYPE (*src)[RB_COMPONENTS] = (const RB_TYPE (*)[RB_COMPONENTS]) values;
   GLuint i;
   ASSERT(mask);
   for (i = 0; i < count; i++) {
      if (mask[i]) {
         RB_TYPE row[4];
         INIT_PIXEL_PTR(pixel, x, y);
         STORE_PIXEL(pixel, x[i], y[i], src[i]);
         PUT_PIXEL(ctx, x[i], YFLIP(xrb, y[i]), pixel);
      }
   }
   (void) rb;
}


static void
NAME(put_mono_values)( struct gl_context *ctx, struct gl_renderbuffer *rb,
                       GLuint count, const GLint x[], const GLint y[],
                       const void *value, const GLubyte mask[] )
{
#ifdef SPAN_VARS
   SPAN_VARS
#endif
   const RB_TYPE *src = (const RB_TYPE *) value;
   GLuint i;
   ASSERT(mask);
   for (i = 0; i < count; i++) {
      if (mask[i]) {
         RB_TYPE row[4];
         INIT_PIXEL_PTR(pixel, x, y);
         STORE_PIXEL(pixel, x[i], y[i], src);
         PUT_PIXEL(ctx, x[i], YFLIP(xrb, y[i]), pixel);
      }
   }
   (void) rb;
}


#undef NAME
#undef RB_TYPE
#undef RB_COMPONENTS
#undef SPAN_VARS
#undef INIT_PIXEL_PTR
#undef INC_PIXEL_PTR
#undef STORE_PIXEL
#undef STORE_PIXEL_RGB
#undef FETCH_PIXEL
@


1.4
log
@Merge Mesa 7.10.3
@
text
@@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d40 1
a40 1
PUT_PIXEL( GLcontext *glCtx, GLint x, GLint y, GLvoid *p )
d42 2
a43 2
    __DRIcontext *ctx = swrast_context(glCtx);
    __DRIdrawable *draw = swrast_drawable(glCtx->DrawBuffer);
d54 1
a54 1
GET_PIXEL( GLcontext *glCtx, GLint x, GLint y, GLubyte *p )
d56 2
a57 2
    __DRIcontext *ctx = swrast_context(glCtx);
    __DRIdrawable *read = swrast_drawable(glCtx->ReadBuffer);
d66 1
a66 1
PUT_ROW( GLcontext *glCtx, GLint x, GLint y, GLuint n, char *row )
d68 2
a69 2
    __DRIcontext *ctx = swrast_context(glCtx);
    __DRIdrawable *draw = swrast_drawable(glCtx->DrawBuffer);
d79 1
a79 1
GET_ROW( GLcontext *glCtx, GLint x, GLint y, GLuint n, char *row )
d81 2
a82 2
    __DRIcontext *ctx = swrast_context(glCtx);
    __DRIdrawable *read = swrast_drawable(glCtx->ReadBuffer);
d121 1
a121 1
NAME(get_row)( GLcontext *ctx, struct gl_renderbuffer *rb,
d141 1
a141 1
NAME(get_values)( GLcontext *ctx, struct gl_renderbuffer *rb,
d159 1
a159 1
NAME(put_row)( GLcontext *ctx, struct gl_renderbuffer *rb,
d192 1
a192 1
NAME(put_row_rgb)( GLcontext *ctx, struct gl_renderbuffer *rb,
d233 1
a233 1
NAME(put_mono_row)( GLcontext *ctx, struct gl_renderbuffer *rb,
d266 1
a266 1
NAME(put_values)( GLcontext *ctx, struct gl_renderbuffer *rb,
d289 1
a289 1
NAME(put_mono_values)( GLcontext *ctx, struct gl_renderbuffer *rb,
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d40 1
a40 1
PUT_PIXEL( GLcontext *glCtx, GLint x, GLint y, GLubyte *p )
a100 1
 *   CI_MODE  if set, color index mode, else RGBA
d115 1
a115 3
#ifdef CI_MODE
#define RB_COMPONENTS 1
#elif !defined(RB_COMPONENTS)
a126 3
#ifdef CI_MODE
   RB_TYPE *dest = (RB_TYPE *) values;
#else
a127 1
#endif
a146 3
#ifdef CI_MODE
   RB_TYPE *dest = (RB_TYPE *) values;
#else
a147 1
#endif
d171 2
a172 1
            RB_TYPE pixel[4];
a190 1
#if !defined(CI_MODE)
d204 2
a205 1
            RB_TYPE pixel[4];
a229 1
#endif
d245 2
a246 1
            RB_TYPE pixel[4];
d278 2
a279 1
         RB_TYPE pixel[4];
d301 2
a302 1
         RB_TYPE pixel[4];
a313 1
#undef CI_MODE
@


1.1
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d113 1
a113 1
#include "macros.h"
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d40 1
a40 1
PUT_PIXEL( struct gl_context *glCtx, GLint x, GLint y, GLvoid *p )
d42 2
a43 2
    __DRIcontext *ctx = swrast_context(glCtx)->cPriv;
    __DRIdrawable *draw = swrast_drawable(glCtx->DrawBuffer)->dPriv;
d54 1
a54 1
GET_PIXEL( struct gl_context *glCtx, GLint x, GLint y, GLubyte *p )
d56 2
a57 2
    __DRIcontext *ctx = swrast_context(glCtx)->cPriv;
    __DRIdrawable *read = swrast_drawable(glCtx->ReadBuffer)->dPriv;
d66 1
a66 1
PUT_ROW( struct gl_context *glCtx, GLint x, GLint y, GLuint n, char *row )
d68 2
a69 2
    __DRIcontext *ctx = swrast_context(glCtx)->cPriv;
    __DRIdrawable *draw = swrast_drawable(glCtx->DrawBuffer)->dPriv;
d79 1
a79 1
GET_ROW( struct gl_context *glCtx, GLint x, GLint y, GLuint n, char *row )
d81 2
a82 2
    __DRIcontext *ctx = swrast_context(glCtx)->cPriv;
    __DRIdrawable *read = swrast_drawable(glCtx->ReadBuffer)->dPriv;
d101 1
d113 1
a113 1
#include "main/macros.h"
d116 3
a118 1
#if !defined(RB_COMPONENTS)
d124 1
a124 1
NAME(get_row)( struct gl_context *ctx, struct gl_renderbuffer *rb,
d130 3
d134 1
d148 1
a148 1
NAME(get_values)( struct gl_context *ctx, struct gl_renderbuffer *rb,
d154 3
d158 1
d170 1
a170 1
NAME(put_row)( struct gl_context *ctx, struct gl_renderbuffer *rb,
d182 1
a182 2
            RB_TYPE row[4];
            INIT_PIXEL_PTR(pixel, x, y);
d201 1
d203 1
a203 1
NAME(put_row_rgb)( struct gl_context *ctx, struct gl_renderbuffer *rb,
d215 1
a215 2
            RB_TYPE row[4];
            INIT_PIXEL_PTR(pixel, x, y);
d240 1
d244 1
a244 1
NAME(put_mono_row)( struct gl_context *ctx, struct gl_renderbuffer *rb,
d256 1
a256 2
            RB_TYPE row[4];
            INIT_PIXEL_PTR(pixel, x, y);
d276 1
a276 1
NAME(put_values)( struct gl_context *ctx, struct gl_renderbuffer *rb,
d288 1
a288 2
         RB_TYPE row[4];
         INIT_PIXEL_PTR(pixel, x, y);
d298 1
a298 1
NAME(put_mono_values)( struct gl_context *ctx, struct gl_renderbuffer *rb,
d310 1
a310 2
         RB_TYPE row[4];
         INIT_PIXEL_PTR(pixel, x, y);
d322 1
@


