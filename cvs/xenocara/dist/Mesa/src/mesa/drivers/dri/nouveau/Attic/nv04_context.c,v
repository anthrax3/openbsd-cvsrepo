head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.04.50;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.20;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.53;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.54;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009-2010 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "nouveau_driver.h"
#include "nouveau_context.h"
#include "nouveau_fbo.h"
#include "nouveau_util.h"
#include "nv04_3d.xml.h"
#include "nv04_driver.h"

static GLboolean
texunit_needs_combiners(struct gl_texture_unit *u)
{
	struct gl_texture_object *t = u->_Current;
	struct gl_texture_image *ti = t->Image[0][t->BaseLevel];

	return ti->TexFormat == MESA_FORMAT_A_UNORM8 ||
		ti->TexFormat == MESA_FORMAT_L_UNORM8 ||
		u->EnvMode == GL_COMBINE ||
		u->EnvMode == GL_COMBINE4_NV ||
		u->EnvMode == GL_BLEND ||
		u->EnvMode == GL_ADD;
}

struct nouveau_object *
nv04_context_engine(struct gl_context *ctx)
{
	struct nv04_context *nctx = to_nv04_context(ctx);
	struct nouveau_hw_state *hw = &to_nouveau_context(ctx)->hw;
	struct nouveau_pushbuf *push = context_push(ctx);
	struct nouveau_object *fahrenheit;

	if ((ctx->Texture.Unit[0]._Current &&
	     texunit_needs_combiners(&ctx->Texture.Unit[0])) ||
	    ctx->Texture.Unit[1]._Current ||
	    ctx->Stencil.Enabled ||
	    !(ctx->Color.ColorMask[0][RCOMP] &&
	      ctx->Color.ColorMask[0][GCOMP] &&
	      ctx->Color.ColorMask[0][BCOMP] &&
	      ctx->Color.ColorMask[0][ACOMP]))
		fahrenheit = hw->eng3dm;
	else
		fahrenheit = hw->eng3d;

	if (fahrenheit != nctx->eng3d) {
		BEGIN_NV04(push, NV01_SUBC(3D, OBJECT), 1);
		PUSH_DATA (push, fahrenheit->handle);
		nctx->eng3d = fahrenheit;
	}

	return fahrenheit;
}

static void
nv04_hwctx_init(struct gl_context *ctx)
{
	struct nouveau_hw_state *hw = &to_nouveau_context(ctx)->hw;
	struct nouveau_pushbuf *push = context_push(ctx);
	struct nv04_fifo *fifo = hw->chan->data;

	BEGIN_NV04(push, NV01_SUBC(SURF, OBJECT), 1);
	PUSH_DATA (push, hw->surf3d->handle);
	BEGIN_NV04(push, NV04_SF3D(DMA_NOTIFY), 3);
	PUSH_DATA (push, hw->ntfy->handle);
	PUSH_DATA (push, fifo->vram);
	PUSH_DATA (push, fifo->vram);

	BEGIN_NV04(push, NV01_SUBC(3D, OBJECT), 1);
	PUSH_DATA (push, hw->eng3d->handle);
	BEGIN_NV04(push, NV04_TTRI(DMA_NOTIFY), 4);
	PUSH_DATA (push, hw->ntfy->handle);
	PUSH_DATA (push, fifo->vram);
	PUSH_DATA (push, fifo->gart);
	PUSH_DATA (push, hw->surf3d->handle);

	BEGIN_NV04(push, NV01_SUBC(3D, OBJECT), 1);
	PUSH_DATA (push, hw->eng3dm->handle);
	BEGIN_NV04(push, NV04_MTRI(DMA_NOTIFY), 4);
	PUSH_DATA (push, hw->ntfy->handle);
	PUSH_DATA (push, fifo->vram);
	PUSH_DATA (push, fifo->gart);
	PUSH_DATA (push, hw->surf3d->handle);

	PUSH_KICK (push);
}

static void
init_dummy_texture(struct gl_context *ctx)
{
	struct nouveau_surface *s = &to_nv04_context(ctx)->dummy_texture;

	nouveau_surface_alloc(ctx, s, SWIZZLED,
			      NOUVEAU_BO_MAP | NOUVEAU_BO_VRAM,
			      MESA_FORMAT_B8G8R8A8_UNORM, 1, 1);

	nouveau_bo_map(s->bo, NOUVEAU_BO_WR, context_client(ctx));
	*(uint32_t *)s->bo->map = 0xffffffff;
}

static void
nv04_context_destroy(struct gl_context *ctx)
{
	struct nouveau_context *nctx = to_nouveau_context(ctx);

	nv04_surface_takedown(ctx);
	nv04_render_destroy(ctx);
	nouveau_surface_ref(NULL, &to_nv04_context(ctx)->dummy_texture);

	nouveau_object_del(&nctx->hw.eng3d);
	nouveau_object_del(&nctx->hw.eng3dm);
	nouveau_object_del(&nctx->hw.surf3d);

	nouveau_context_deinit(ctx);
	free(ctx);
}

static struct gl_context *
nv04_context_create(struct nouveau_screen *screen, gl_api api,
		    const struct gl_config *visual,
		    struct gl_context *share_ctx)
{
	struct nv04_context *nctx;
	struct nouveau_hw_state *hw;
	struct gl_context *ctx;
	int ret;

	nctx = CALLOC_STRUCT(nv04_context);
	if (!nctx)
		return NULL;

	ctx = &nctx->base.base;
	hw = &nctx->base.hw;

	if (!nouveau_context_init(ctx, api, screen, visual, share_ctx))
		goto fail;

	/* GL constants. */
	ctx->Const.MaxTextureLevels = 11;
	ctx->Const.MaxTextureCoordUnits = NV04_TEXTURE_UNITS;
	ctx->Const.Program[MESA_SHADER_FRAGMENT].MaxTextureImageUnits = NV04_TEXTURE_UNITS;
	ctx->Const.MaxTextureUnits = NV04_TEXTURE_UNITS;
	ctx->Const.MaxTextureMaxAnisotropy = 2;
	ctx->Const.MaxTextureLodBias = 15;

	/* 2D engine. */
	ret = nv04_surface_init(ctx);
	if (!ret)
		goto fail;

	/* 3D engine. */
	ret = nouveau_object_new(context_chan(ctx), 0xbeef0001,
				 NV04_TEXTURED_TRIANGLE_CLASS, NULL, 0,
				 &hw->eng3d);
	if (ret)
		goto fail;

	ret = nouveau_object_new(context_chan(ctx), 0xbeef0002,
				 NV04_MULTITEX_TRIANGLE_CLASS, NULL, 0,
				 &hw->eng3dm);
	if (ret)
		goto fail;

	ret = nouveau_object_new(context_chan(ctx), 0xbeef0003,
				 NV04_SURFACE_3D_CLASS, NULL, 0,
				 &hw->surf3d);
	if (ret)
		goto fail;

	init_dummy_texture(ctx);
	nv04_hwctx_init(ctx);
	nv04_render_init(ctx);

	return ctx;

fail:
	nv04_context_destroy(ctx);
	return NULL;
}

const struct nouveau_driver nv04_driver = {
	.context_create = nv04_context_create,
	.context_destroy = nv04_context_destroy,
	.surface_copy = nv04_surface_copy,
	.surface_fill = nv04_surface_fill,
	.emit = (nouveau_state_func[]) {
		nv04_defer_control,
		nouveau_emit_nothing,
		nv04_defer_blend,
		nv04_defer_blend,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nv04_defer_control,
		nouveau_emit_nothing,
		nv04_defer_control,
		nouveau_emit_nothing,
		nv04_defer_control,
		nv04_defer_control,
		nouveau_emit_nothing,
		nv04_emit_framebuffer,
		nv04_defer_blend,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nv04_emit_scissor,
		nv04_defer_blend,
		nv04_defer_control,
		nv04_defer_control,
		nv04_defer_control,
		nv04_emit_tex_env,
		nv04_emit_tex_env,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nv04_emit_tex_obj,
		nv04_emit_tex_obj,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nv04_emit_blend,
		nv04_emit_control,
	},
	.num_emit = NUM_NV04_STATE,
};
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d40 2
a41 2
	return ti->TexFormat == MESA_FORMAT_A8 ||
		ti->TexFormat == MESA_FORMAT_L8 ||
d56 1
a56 1
	if ((ctx->Texture.Unit[0]._ReallyEnabled &&
d58 1
a58 1
	    ctx->Texture.Unit[1]._ReallyEnabled ||
d117 1
a117 1
			      MESA_FORMAT_ARGB8888, 1, 1);
d141 2
a142 1
nv04_context_create(struct nouveau_screen *screen, const struct gl_config *visual,
d157 1
a157 1
	if (!nouveau_context_init(ctx, screen, visual, share_ctx))
d163 1
a163 1
	ctx->Const.FragmentProgram.MaxTextureImageUnits = NV04_TEXTURE_UNITS;
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d48 1
a48 1
struct nouveau_grobj *
d53 2
a54 1
	struct nouveau_grobj *fahrenheit;
d69 2
a71 15

		if (nv04_mtex_engine(fahrenheit)) {
			context_dirty_i(ctx, TEX_ENV, 0);
			context_dirty_i(ctx, TEX_ENV, 1);
			context_dirty_i(ctx, TEX_OBJ, 0);
			context_dirty_i(ctx, TEX_OBJ, 1);
			context_dirty(ctx, CONTROL);
			context_dirty(ctx, BLEND);
		} else {
			context_bctx_i(ctx, TEXTURE, 1);
			context_dirty_i(ctx, TEX_ENV, 0);
			context_dirty_i(ctx, TEX_OBJ, 0);
			context_dirty(ctx, CONTROL);
			context_dirty(ctx, BLEND);
		}
a77 19
nv04_channel_flush_notify(struct nouveau_channel *chan)
{
	struct nouveau_context *nctx = chan->user_private;
	struct gl_context *ctx = &nctx->base;

	if (nctx->fallback < SWRAST) {
		nouveau_bo_state_emit(ctx);

		/* Reemit the engine state. */
		context_emit(ctx, TEX_OBJ0);
		context_emit(ctx, TEX_OBJ1);
		context_emit(ctx, TEX_ENV0);
		context_emit(ctx, TEX_ENV1);
		context_emit(ctx, CONTROL);
		context_emit(ctx, BLEND);
	}
}

static void
a79 1
	struct nouveau_channel *chan = context_chan(ctx);
d81 2
a82 21
	struct nouveau_grobj *surf3d = hw->surf3d;
	struct nouveau_grobj *eng3d = hw->eng3d;
	struct nouveau_grobj *eng3dm = hw->eng3dm;

	BIND_RING(chan, surf3d, 7);
	BEGIN_RING(chan, surf3d, NV04_CONTEXT_SURFACES_3D_DMA_NOTIFY, 3);
	OUT_RING(chan, hw->ntfy->handle);
	OUT_RING(chan, chan->vram->handle);
	OUT_RING(chan, chan->vram->handle);

	BEGIN_RING(chan, eng3d, NV04_TEXTURED_TRIANGLE_DMA_NOTIFY, 4);
	OUT_RING(chan, hw->ntfy->handle);
	OUT_RING(chan, chan->vram->handle);
	OUT_RING(chan, chan->gart->handle);
	OUT_RING(chan, surf3d->handle);

	BEGIN_RING(chan, eng3dm, NV04_MULTITEX_TRIANGLE_DMA_NOTIFY, 4);
	OUT_RING(chan, hw->ntfy->handle);
	OUT_RING(chan, chan->vram->handle);
	OUT_RING(chan, chan->gart->handle);
	OUT_RING(chan, surf3d->handle);
d84 24
a107 1
	FIRE_RING(chan);
d119 1
a119 1
	nouveau_bo_map(s->bo, NOUVEAU_BO_WR);
a120 1
	nouveau_bo_unmap(s->bo);
d132 3
a134 3
	nouveau_grobj_free(&nctx->hw.eng3d);
	nouveau_grobj_free(&nctx->hw.eng3dm);
	nouveau_grobj_free(&nctx->hw.surf3d);
d137 1
a137 1
	FREE(ctx);
a158 2
	hw->chan->flush_notify = nv04_channel_flush_notify;

d162 1
a162 1
	ctx->Const.MaxTextureImageUnits = NV04_TEXTURE_UNITS;
d173 3
a175 2
	ret = nouveau_grobj_alloc(context_chan(ctx), 0xbeef0001,
				  NV04_TEXTURED_TRIANGLE, &hw->eng3d);
d179 3
a181 2
	ret = nouveau_grobj_alloc(context_chan(ctx), 0xbeef0002,
				  NV04_MULTITEX_TRIANGLE, &hw->eng3dm);
d185 3
a187 2
	ret = nouveau_grobj_alloc(context_chan(ctx), 0xbeef0003,
				  NV04_CONTEXT_SURFACES_3D, &hw->surf3d);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d31 1
a31 1
#include "nouveau_class.h"
d34 14
d49 1
a49 1
nv04_context_engine(GLcontext *ctx)
d55 2
a56 3
	if (ctx->Texture.Unit[0].EnvMode == GL_COMBINE ||
	    ctx->Texture.Unit[0].EnvMode == GL_BLEND ||
	    ctx->Texture.Unit[0].EnvMode == GL_ADD ||
d58 5
a62 1
	    ctx->Stencil.Enabled)
d93 1
a93 4
	GLcontext *ctx = &nctx->base;

	if (nctx->fallback < SWRAST && ctx->DrawBuffer) {
		GLcontext *ctx = &nctx->base;
d95 2
a96 7
		/* Flushing seems to clobber the engine context. */
		context_dirty_i(ctx, TEX_OBJ, 0);
		context_dirty_i(ctx, TEX_OBJ, 1);
		context_dirty_i(ctx, TEX_ENV, 0);
		context_dirty_i(ctx, TEX_ENV, 1);
		context_dirty(ctx, CONTROL);
		context_dirty(ctx, BLEND);
d98 7
a104 1
		nouveau_state_emit(ctx);
d109 1
a109 1
nv04_hwctx_init(GLcontext *ctx)
d139 1
a139 1
init_dummy_texture(GLcontext *ctx)
d153 1
a153 1
nv04_context_destroy(GLcontext *ctx)
d169 3
a171 3
static GLcontext *
nv04_context_create(struct nouveau_screen *screen, const GLvisual *visual,
		    GLcontext *share_ctx)
d175 1
a175 1
	GLcontext *ctx;
d191 1
d219 1
a221 1
	init_dummy_texture(ctx);
d291 4
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d31 1
a31 1
#include "nv04_3d.xml.h"
a33 14
static GLboolean
texunit_needs_combiners(struct gl_texture_unit *u)
{
	struct gl_texture_object *t = u->_Current;
	struct gl_texture_image *ti = t->Image[0][t->BaseLevel];

	return ti->TexFormat == MESA_FORMAT_A8 ||
		ti->TexFormat == MESA_FORMAT_L8 ||
		u->EnvMode == GL_COMBINE ||
		u->EnvMode == GL_COMBINE4_NV ||
		u->EnvMode == GL_BLEND ||
		u->EnvMode == GL_ADD;
}

d35 1
a35 1
nv04_context_engine(struct gl_context *ctx)
d41 3
a43 2
	if ((ctx->Texture.Unit[0]._ReallyEnabled &&
	     texunit_needs_combiners(&ctx->Texture.Unit[0])) ||
d45 1
a45 5
	    ctx->Stencil.Enabled ||
	    !(ctx->Color.ColorMask[0][RCOMP] &&
	      ctx->Color.ColorMask[0][GCOMP] &&
	      ctx->Color.ColorMask[0][BCOMP] &&
	      ctx->Color.ColorMask[0][ACOMP]))
d76 4
a79 1
	struct gl_context *ctx = &nctx->base;
d81 7
a87 2
	if (nctx->fallback < SWRAST) {
		nouveau_bo_state_emit(ctx);
d89 1
a89 7
		/* Reemit the engine state. */
		context_emit(ctx, TEX_OBJ0);
		context_emit(ctx, TEX_OBJ1);
		context_emit(ctx, TEX_ENV0);
		context_emit(ctx, TEX_ENV1);
		context_emit(ctx, CONTROL);
		context_emit(ctx, BLEND);
d94 1
a94 1
nv04_hwctx_init(struct gl_context *ctx)
d124 1
a124 1
init_dummy_texture(struct gl_context *ctx)
d138 1
a138 1
nv04_context_destroy(struct gl_context *ctx)
d154 3
a156 3
static struct gl_context *
nv04_context_create(struct nouveau_screen *screen, const struct gl_config *visual,
		    struct gl_context *share_ctx)
d160 1
a160 1
	struct gl_context *ctx;
a175 1
	ctx->Const.MaxTextureLevels = 11;
a202 1
	init_dummy_texture(ctx);
d205 1
a274 4
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
		nouveau_emit_nothing,
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d48 1
a48 1
struct nouveau_object *
d53 1
a53 2
	struct nouveau_pushbuf *push = context_push(ctx);
	struct nouveau_object *fahrenheit;
a67 2
		BEGIN_NV04(push, NV01_SUBC(3D, OBJECT), 1);
		PUSH_DATA (push, fahrenheit->handle);
d69 15
d90 19
d111 1
d113 21
a133 2
	struct nouveau_pushbuf *push = context_push(ctx);
	struct nv04_fifo *fifo = hw->chan->data;
d135 1
a135 24
	BEGIN_NV04(push, NV01_SUBC(SURF, OBJECT), 1);
	PUSH_DATA (push, hw->surf3d->handle);
	BEGIN_NV04(push, NV04_SF3D(DMA_NOTIFY), 3);
	PUSH_DATA (push, hw->ntfy->handle);
	PUSH_DATA (push, fifo->vram);
	PUSH_DATA (push, fifo->vram);

	BEGIN_NV04(push, NV01_SUBC(3D, OBJECT), 1);
	PUSH_DATA (push, hw->eng3d->handle);
	BEGIN_NV04(push, NV04_TTRI(DMA_NOTIFY), 4);
	PUSH_DATA (push, hw->ntfy->handle);
	PUSH_DATA (push, fifo->vram);
	PUSH_DATA (push, fifo->gart);
	PUSH_DATA (push, hw->surf3d->handle);

	BEGIN_NV04(push, NV01_SUBC(3D, OBJECT), 1);
	PUSH_DATA (push, hw->eng3dm->handle);
	BEGIN_NV04(push, NV04_MTRI(DMA_NOTIFY), 4);
	PUSH_DATA (push, hw->ntfy->handle);
	PUSH_DATA (push, fifo->vram);
	PUSH_DATA (push, fifo->gart);
	PUSH_DATA (push, hw->surf3d->handle);

	PUSH_KICK (push);
d147 1
a147 1
	nouveau_bo_map(s->bo, NOUVEAU_BO_WR, context_client(ctx));
d149 1
d161 3
a163 3
	nouveau_object_del(&nctx->hw.eng3d);
	nouveau_object_del(&nctx->hw.eng3dm);
	nouveau_object_del(&nctx->hw.surf3d);
d166 1
a166 1
	free(ctx);
d188 2
d193 1
a193 1
	ctx->Const.FragmentProgram.MaxTextureImageUnits = NV04_TEXTURE_UNITS;
d204 2
a205 3
	ret = nouveau_object_new(context_chan(ctx), 0xbeef0001,
				 NV04_TEXTURED_TRIANGLE_CLASS, NULL, 0,
				 &hw->eng3d);
d209 2
a210 3
	ret = nouveau_object_new(context_chan(ctx), 0xbeef0002,
				 NV04_MULTITEX_TRIANGLE_CLASS, NULL, 0,
				 &hw->eng3dm);
d214 2
a215 3
	ret = nouveau_object_new(context_chan(ctx), 0xbeef0003,
				 NV04_SURFACE_3D_CLASS, NULL, 0,
				 &hw->surf3d);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d40 2
a41 2
	return ti->TexFormat == MESA_FORMAT_A_UNORM8 ||
		ti->TexFormat == MESA_FORMAT_L_UNORM8 ||
d56 1
a56 1
	if ((ctx->Texture.Unit[0]._Current &&
d58 1
a58 1
	    ctx->Texture.Unit[1]._Current ||
d117 1
a117 1
			      MESA_FORMAT_B8G8R8A8_UNORM, 1, 1);
d141 1
a141 2
nv04_context_create(struct nouveau_screen *screen, gl_api api,
		    const struct gl_config *visual,
d156 1
a156 1
	if (!nouveau_context_init(ctx, api, screen, visual, share_ctx))
d162 1
a162 1
	ctx->Const.Program[MESA_SHADER_FRAGMENT].MaxTextureImageUnits = NV04_TEXTURE_UNITS;
@


