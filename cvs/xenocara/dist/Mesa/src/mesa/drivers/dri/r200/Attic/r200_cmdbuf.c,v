head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.5
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.5
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.4
	v9_2_3:1.1.1.4
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.4
	v9_2_0:1.1.1.4
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.6
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.4
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.04.57;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.40;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.17;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.53.11;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.53.11;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.57.23;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.40;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.05.13.15.58;	author jsg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.07.09.20.34.55;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
Copyright (C) The Weather Channel, Inc.  2002.  All Rights Reserved.

The Weather Channel (TM) funded Tungsten Graphics to develop the
initial release of the Radeon 8500 driver under the XFree86 license.
This notice must be preserved.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/*
 * Authors:
 *   Keith Whitwell <keithw@@vmware.com>
 */

#include "main/glheader.h"
#include "main/imports.h"
#include "main/macros.h"
#include "main/context.h"
#include "main/simple_list.h"

#include "radeon_common.h"
#include "r200_context.h"
#include "r200_ioctl.h"
#include "radeon_reg.h"

/* The state atoms will be emitted in the order they appear in the atom list,
 * so this step is important.
 */
#define insert_at_tail_if(atom_list, atom) \
   do { \
      struct radeon_state_atom* current_atom = (atom); \
      if (current_atom->check) \
	 insert_at_tail((atom_list), current_atom); \
   } while(0)

void r200SetUpAtomList( r200ContextPtr rmesa )
{
   int i, mtu;

   mtu = rmesa->radeon.glCtx.Const.MaxTextureUnits;

   make_empty_list(&rmesa->radeon.hw.atomlist);
   rmesa->radeon.hw.atomlist.name = "atom-list";

   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.ctx );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.set );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.lin );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.msk );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vpt );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vtx );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vap );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vte );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.msc );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.cst );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.zbs );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.tcl );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.msl );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.tcg );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.grd );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.fog );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.tam );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.tf );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.atf );
   for (i = 0; i < mtu; ++i)
       insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.tex[i] );
   for (i = 0; i < mtu; ++i)
       insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.cube[i] );
   for (i = 0; i < 6; ++i)
       insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.pix[i] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.afs[0] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.afs[1] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.stp );
   for (i = 0; i < 8; ++i)
       insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.lit[i] );
   for (i = 0; i < 3 + mtu; ++i)
       insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.mat[i] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.eye );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.glt );
   for (i = 0; i < 2; ++i)
      insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.mtl[i] );
   for (i = 0; i < 6; ++i)
       insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.ucp[i] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.spr );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.ptp );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.prf );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.pvs );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vpp[0] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vpp[1] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vpi[0] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vpi[1] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.sci );
}

/* Fire a section of the retained (indexed_verts) buffer as a regular
 * primtive.  
 */
void r200EmitVbufPrim( r200ContextPtr rmesa,
                       GLuint primitive,
                       GLuint vertex_nr )
{
   BATCH_LOCALS(&rmesa->radeon);

   assert(!(primitive & R200_VF_PRIM_WALK_IND));
   
   radeonEmitState(&rmesa->radeon);
   
   radeon_print(RADEON_RENDER|RADEON_SWRENDER,RADEON_VERBOSE,
           "%s cmd_used/4: %d prim %x nr %d\n", __FUNCTION__,
           rmesa->store.cmd_used/4, primitive, vertex_nr);
 
   BEGIN_BATCH(3);
   OUT_BATCH_PACKET3_CLIP(R200_CP_CMD_3D_DRAW_VBUF_2, 0);
   OUT_BATCH(primitive | R200_VF_PRIM_WALK_LIST | R200_VF_COLOR_ORDER_RGBA |
	     (vertex_nr << R200_VF_VERTEX_NUMBER_SHIFT));
   END_BATCH();
}

static void r200FireEB(r200ContextPtr rmesa, int vertex_count, int type)
{
	BATCH_LOCALS(&rmesa->radeon);

	if (vertex_count > 0) {
		BEGIN_BATCH(8+2);
		OUT_BATCH_PACKET3_CLIP(R200_CP_CMD_3D_DRAW_INDX_2, 0);
		OUT_BATCH(R200_VF_PRIM_WALK_IND |
			  R200_VF_COLOR_ORDER_RGBA | 
			  ((vertex_count + 0) << 16) |
			  type);

		OUT_BATCH_PACKET3(R200_CP_CMD_INDX_BUFFER, 2);
		OUT_BATCH((0x80 << 24) | (0 << 16) | 0x810);
		OUT_BATCH(rmesa->radeon.tcl.elt_dma_offset);
		OUT_BATCH((vertex_count + 1)/2);
		radeon_cs_write_reloc(rmesa->radeon.cmdbuf.cs,
				      rmesa->radeon.tcl.elt_dma_bo,
				      RADEON_GEM_DOMAIN_GTT, 0, 0);
		END_BATCH();
	}
}

void r200FlushElts(struct gl_context *ctx)
{
   r200ContextPtr rmesa = R200_CONTEXT(ctx);
   int nr, elt_used = rmesa->tcl.elt_used;

   radeon_print(RADEON_RENDER, RADEON_VERBOSE, "%s %x %d\n", __FUNCTION__, rmesa->tcl.hw_primitive, elt_used);

   assert( rmesa->radeon.dma.flush == r200FlushElts );
   rmesa->radeon.dma.flush = NULL;

   nr = elt_used / 2;

   radeon_bo_unmap(rmesa->radeon.tcl.elt_dma_bo);

   r200FireEB(rmesa, nr, rmesa->tcl.hw_primitive);

   radeon_bo_unref(rmesa->radeon.tcl.elt_dma_bo);
   rmesa->radeon.tcl.elt_dma_bo = NULL;

   if (R200_ELT_BUF_SZ > elt_used)
     radeonReturnDmaRegion(&rmesa->radeon, R200_ELT_BUF_SZ - elt_used);
}


GLushort *r200AllocEltsOpenEnded( r200ContextPtr rmesa,
				    GLuint primitive,
				    GLuint min_nr )
{
   GLushort *retval;

   radeon_print(RADEON_RENDER, RADEON_VERBOSE, "%s %d prim %x\n", __FUNCTION__, min_nr, primitive);

   assert((primitive & R200_VF_PRIM_WALK_IND));
   
   radeonEmitState(&rmesa->radeon);

   radeonAllocDmaRegion(&rmesa->radeon, &rmesa->radeon.tcl.elt_dma_bo,
			&rmesa->radeon.tcl.elt_dma_offset, R200_ELT_BUF_SZ, 4);
   rmesa->tcl.elt_used = min_nr * 2;

   radeon_bo_map(rmesa->radeon.tcl.elt_dma_bo, 1);
   retval = rmesa->radeon.tcl.elt_dma_bo->ptr + rmesa->radeon.tcl.elt_dma_offset;
   
   assert(!rmesa->radeon.dma.flush);
   rmesa->radeon.glCtx.Driver.NeedFlush |= FLUSH_STORED_VERTICES;
   rmesa->radeon.dma.flush = r200FlushElts;

   return retval;
}

void r200EmitMaxVtxIndex(r200ContextPtr rmesa, int count)
{
   BATCH_LOCALS(&rmesa->radeon);

   BEGIN_BATCH(2);
   OUT_BATCH(CP_PACKET0(R200_SE_VF_MAX_VTX_INDX, 0));
   OUT_BATCH(count);
   END_BATCH();
}

void r200EmitVertexAOS( r200ContextPtr rmesa,
			GLuint vertex_size,
 			struct radeon_bo *bo,
			GLuint offset )
{
   BATCH_LOCALS(&rmesa->radeon);

   radeon_print(RADEON_SWRENDER, RADEON_VERBOSE, "%s:  vertex_size 0x%x offset 0x%x \n",
	      __FUNCTION__, vertex_size, offset);


   BEGIN_BATCH(7);
   OUT_BATCH_PACKET3(R200_CP_CMD_3D_LOAD_VBPNTR, 2);
   OUT_BATCH(1);
   OUT_BATCH(vertex_size | (vertex_size << 8));
   OUT_BATCH_RELOC(offset, bo, offset, RADEON_GEM_DOMAIN_GTT, 0, 0);
   END_BATCH();
}

void r200EmitAOS(r200ContextPtr rmesa, GLuint nr, GLuint offset)
{
   BATCH_LOCALS(&rmesa->radeon);
   uint32_t voffset;
   int sz = 1 + (nr >> 1) * 3 + (nr & 1) * 2;
   int i;
   
   radeon_print(RADEON_RENDER, RADEON_VERBOSE,
           "%s: nr=%d, ofs=0x%08x\n",
           __FUNCTION__, nr, offset);

   BEGIN_BATCH(sz+2+ (nr*2));
   OUT_BATCH_PACKET3(R200_CP_CMD_3D_LOAD_VBPNTR, sz - 1);
   OUT_BATCH(nr);

   {
      for (i = 0; i + 1 < nr; i += 2) {
	 OUT_BATCH((rmesa->radeon.tcl.aos[i].components << 0) |
		   (rmesa->radeon.tcl.aos[i].stride << 8) |
		   (rmesa->radeon.tcl.aos[i + 1].components << 16) |
		   (rmesa->radeon.tcl.aos[i + 1].stride << 24));
	 
	 voffset =  rmesa->radeon.tcl.aos[i + 0].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[i + 0].stride;
	 OUT_BATCH(voffset);
	 voffset =  rmesa->radeon.tcl.aos[i + 1].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[i + 1].stride;
	 OUT_BATCH(voffset);
      }
      
      if (nr & 1) {
	 OUT_BATCH((rmesa->radeon.tcl.aos[nr - 1].components << 0) |
		   (rmesa->radeon.tcl.aos[nr - 1].stride << 8));
	 voffset =  rmesa->radeon.tcl.aos[nr - 1].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[nr - 1].stride;
	 OUT_BATCH(voffset);
      }
      for (i = 0; i + 1 < nr; i += 2) {
	 voffset =  rmesa->radeon.tcl.aos[i + 0].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[i + 0].stride;
	 radeon_cs_write_reloc(rmesa->radeon.cmdbuf.cs,
			       rmesa->radeon.tcl.aos[i+0].bo,
			       RADEON_GEM_DOMAIN_GTT,
			       0, 0);
	 voffset =  rmesa->radeon.tcl.aos[i + 1].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[i + 1].stride;
	 radeon_cs_write_reloc(rmesa->radeon.cmdbuf.cs,
			       rmesa->radeon.tcl.aos[i+1].bo,
			       RADEON_GEM_DOMAIN_GTT,
			       0, 0);
      }
      if (nr & 1) {
	 voffset =  rmesa->radeon.tcl.aos[nr - 1].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[nr - 1].stride;
	 radeon_cs_write_reloc(rmesa->radeon.cmdbuf.cs,
			       rmesa->radeon.tcl.aos[nr-1].bo,
			       RADEON_GEM_DOMAIN_GTT,
			       0, 0);
      }
   }
   END_BATCH();
}
@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.7
log
@Merge Mesa 9.2.0
@
text
@d31 1
a31 1
 *   Keith Whitwell <keith@@tungstengraphics.com>
d214 1
a214 1
   BEGIN_BATCH_NO_AUTOSTATE(2);
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d59 1
a59 1
   mtu = rmesa->radeon.glCtx->Const.MaxTextureUnits;
d148 8
a155 18
		
		if (!rmesa->radeon.radeonScreen->kernel_mm) {
			OUT_BATCH_PACKET3(R200_CP_CMD_INDX_BUFFER, 2);
			OUT_BATCH((0x80 << 24) | (0 << 16) | 0x810);
			OUT_BATCH_RELOC(rmesa->radeon.tcl.elt_dma_offset,
					rmesa->radeon.tcl.elt_dma_bo,
					rmesa->radeon.tcl.elt_dma_offset,
					RADEON_GEM_DOMAIN_GTT, 0, 0);
			OUT_BATCH((vertex_count + 1)/2);
		} else {
			OUT_BATCH_PACKET3(R200_CP_CMD_INDX_BUFFER, 2);
			OUT_BATCH((0x80 << 24) | (0 << 16) | 0x810);
			OUT_BATCH(rmesa->radeon.tcl.elt_dma_offset);
			OUT_BATCH((vertex_count + 1)/2);
			radeon_cs_write_reloc(rmesa->radeon.cmdbuf.cs,
					      rmesa->radeon.tcl.elt_dma_bo,
					      RADEON_GEM_DOMAIN_GTT, 0, 0);
		}
a180 6

   if (radeon_is_debug_enabled(RADEON_SYNC, RADEON_CRITICAL)
         && !rmesa->radeon.radeonScreen->kernel_mm) {
      radeon_print(RADEON_SYNC, RADEON_NORMAL, "%s: Syncing\n", __FUNCTION__);
      radeonFinish( rmesa->radeon.glCtx );
   }
d204 1
a204 1
   rmesa->radeon.glCtx->Driver.NeedFlush |= FLUSH_STORED_VERTICES;
d214 4
a217 6
   if (rmesa->radeon.radeonScreen->kernel_mm) {
	   BEGIN_BATCH_NO_AUTOSTATE(2);
	   OUT_BATCH(CP_PACKET0(R200_SE_VF_MAX_VTX_INDX, 0));
	   OUT_BATCH(count);
	   END_BATCH();
   }
d254 1
a254 36
    
   if (!rmesa->radeon.radeonScreen->kernel_mm) {
      for (i = 0; i + 1 < nr; i += 2) {
	 OUT_BATCH((rmesa->radeon.tcl.aos[i].components << 0) |
		   (rmesa->radeon.tcl.aos[i].stride << 8) |
		   (rmesa->radeon.tcl.aos[i + 1].components << 16) |
		   (rmesa->radeon.tcl.aos[i + 1].stride << 24));
			
	 voffset =  rmesa->radeon.tcl.aos[i + 0].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[i + 0].stride;
	 OUT_BATCH_RELOC(voffset,
			 rmesa->radeon.tcl.aos[i].bo,
			 voffset,
			 RADEON_GEM_DOMAIN_GTT,
			 0, 0);
	 voffset =  rmesa->radeon.tcl.aos[i + 1].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[i + 1].stride;
	 OUT_BATCH_RELOC(voffset,
			 rmesa->radeon.tcl.aos[i+1].bo,
			 voffset,
			 RADEON_GEM_DOMAIN_GTT,
			 0, 0);
      }
      
      if (nr & 1) {
	 OUT_BATCH((rmesa->radeon.tcl.aos[nr - 1].components << 0) |
		   (rmesa->radeon.tcl.aos[nr - 1].stride << 8));
	 voffset =  rmesa->radeon.tcl.aos[nr - 1].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[nr - 1].stride;
	 OUT_BATCH_RELOC(voffset,
			 rmesa->radeon.tcl.aos[nr - 1].bo,
			 voffset,
			 RADEON_GEM_DOMAIN_GTT,
			 0, 0);
      }
   } else {
@


1.5
log
@Merge Mesa 7.10.3
@
text
@d50 3
a52 3
      struct radeon_state_atom* __atom = (atom); \
      if (__atom->check) \
	 insert_at_tail((atom_list), __atom); \
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d170 1
a170 1
void r200FlushElts(GLcontext *ctx)
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a37 1
#include "swrast/swrast.h"
d40 1
a41 1
#include "r200_state.h"
a42 2
#include "r200_tcl.h"
#include "r200_sanity.h"
a44 12
static void print_state_atom( struct r200_state_atom *state )
{
   int i;

   fprintf(stderr, "emit %s/%d\n", state->name, state->cmd_size);

   if (0 & R200_DEBUG & DEBUG_VERBOSE) 
      for (i = 0 ; i < state->cmd_size ; i++) 
	 fprintf(stderr, "\t%s[%d]: %x\n", state->name, i, state->cmd[i]);

}

d48 7
d59 1
a59 1
   mtu = rmesa->glCtx->Const.MaxTextureUnits;
d61 2
a62 2
   make_empty_list(&rmesa->hw.atomlist);
   rmesa->hw.atomlist.name = "atom-list";
d64 19
a82 19
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.ctx );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.set );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.lin );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.msk );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.vpt );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.vtx );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.vap );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.vte );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.msc );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.cst );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.zbs );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.tcl );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.msl );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.tcg );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.grd );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.fog );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.tam );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.tf );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.atf );
d84 1
a84 1
       insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.tex[i] );
d86 1
a86 1
       insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.cube[i] );
d88 4
a91 3
       insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.pix[i] );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.afs[0] );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.afs[1] );
d93 1
a93 1
       insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.lit[i] );
d95 3
a97 3
       insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.mat[i] );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.eye );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.glt );
d99 1
a99 1
      insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.mtl[i] );
d101 10
a110 9
       insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.ucp[i] );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.spr );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.ptp );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.prf );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.pvs );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.vpp[0] );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.vpp[1] );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.vpi[0] );
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.vpi[1] );
d113 6
a118 1
static void r200SaveHwState( r200ContextPtr rmesa )
d120 1
a120 2
   struct r200_state_atom *atom;
   char * dest = rmesa->backup_store.cmd_buf;
d122 14
a135 2
   if (R200_DEBUG & DEBUG_STATE)
      fprintf(stderr, "%s\n", __FUNCTION__);
d137 3
a139 1
   rmesa->backup_store.cmd_used = 0;
d141 27
a167 14
   foreach( atom, &rmesa->hw.atomlist ) {
      if ( atom->check( rmesa->glCtx, atom->idx ) ) {
	 int size = atom->cmd_size * 4;
	 memcpy( dest, atom->cmd, size);
	 dest += size;
	 rmesa->backup_store.cmd_used += size;
	 if (R200_DEBUG & DEBUG_STATE)
	    print_state_atom( atom );
      }
   }

   assert( rmesa->backup_store.cmd_used <= R200_CMD_BUF_SZ );
   if (R200_DEBUG & DEBUG_STATE)
      fprintf(stderr, "Returning to r200EmitState\n");
d170 1
a170 1
void r200EmitState( r200ContextPtr rmesa )
d172 2
a173 11
   char *dest;
   int mtu;
   struct r200_state_atom *atom;

   if (R200_DEBUG & (DEBUG_STATE|DEBUG_PRIMS))
      fprintf(stderr, "%s\n", __FUNCTION__);

   if (rmesa->save_on_next_emit) {
      r200SaveHwState(rmesa);
      rmesa->save_on_next_emit = GL_FALSE;
   }
d175 1
a175 2
   if (!rmesa->hw.is_dirty && !rmesa->hw.all_dirty)
      return;
d177 2
a178 1
   mtu = rmesa->glCtx->Const.MaxTextureUnits;
d180 1
a180 19
   /* To avoid going across the entire set of states multiple times, just check
    * for enough space for the case of emitting all state, and inline the
    * r200AllocCmdBuf code here without all the checks.
    */
   r200EnsureCmdBufSpace( rmesa, rmesa->hw.max_state_size );

   /* we need to calculate dest after EnsureCmdBufSpace
      as we may flush the buffer - airlied */
   dest = rmesa->store.cmd_buf + rmesa->store.cmd_used;
   if (R200_DEBUG & DEBUG_STATE) {
      foreach( atom, &rmesa->hw.atomlist ) {
	 if ( atom->dirty || rmesa->hw.all_dirty ) {
	    if ( atom->check( rmesa->glCtx, atom->idx ) )
	       print_state_atom( atom );
	    else
	       fprintf(stderr, "skip state %s\n", atom->name);
	 }
      }
   }
d182 1
a182 13
   foreach( atom, &rmesa->hw.atomlist ) {
      if ( rmesa->hw.all_dirty )
	 atom->dirty = GL_TRUE;
      if ( atom->dirty ) {
	 if ( atom->check( rmesa->glCtx, atom->idx ) ) {
	    int size = atom->cmd_size * 4;
	    memcpy( dest, atom->cmd, size);
	    dest += size;
	    rmesa->store.cmd_used += size;
	    atom->dirty = GL_FALSE;
	 }
      }
   }
d184 1
a184 1
   assert( rmesa->store.cmd_used <= R200_CMD_BUF_SZ );
d186 2
a187 3
   rmesa->hw.is_dirty = GL_FALSE;
   rmesa->hw.all_dirty = GL_FALSE;
}
d189 2
a190 8
/* Fire a section of the retained (indexed_verts) buffer as a regular
 * primtive.  
 */
void r200EmitVbufPrim( r200ContextPtr rmesa,
                       GLuint primitive,
                       GLuint vertex_nr )
{
   drm_radeon_cmd_header_t *cmd;
d192 4
a195 43
   assert(!(primitive & R200_VF_PRIM_WALK_IND));
   
   r200EmitState( rmesa );
   
   if (R200_DEBUG & (DEBUG_IOCTL|DEBUG_PRIMS))
      fprintf(stderr, "%s cmd_used/4: %d prim %x nr %d\n", __FUNCTION__,
	      rmesa->store.cmd_used/4, primitive, vertex_nr);
   
   cmd = (drm_radeon_cmd_header_t *)r200AllocCmdBuf( rmesa, VBUF_BUFSZ,
						  __FUNCTION__ );
   cmd[0].i = 0;
   cmd[0].header.cmd_type = RADEON_CMD_PACKET3_CLIP;
   cmd[1].i = R200_CP_CMD_3D_DRAW_VBUF_2;
   cmd[2].i = (primitive | 
	       R200_VF_PRIM_WALK_LIST |
	       R200_VF_COLOR_ORDER_RGBA |
	       (vertex_nr << R200_VF_VERTEX_NUMBER_SHIFT));
}


void r200FlushElts( r200ContextPtr rmesa )
{
   int *cmd = (int *)(rmesa->store.cmd_buf + rmesa->store.elts_start);
   int dwords;
   int nr = (rmesa->store.cmd_used - (rmesa->store.elts_start + 12)) / 2;

   if (R200_DEBUG & (DEBUG_IOCTL|DEBUG_PRIMS))
      fprintf(stderr, "%s\n", __FUNCTION__);

   assert( rmesa->dma.flush == r200FlushElts );
   rmesa->dma.flush = NULL;

   /* Cope with odd number of elts:
    */
   rmesa->store.cmd_used = (rmesa->store.cmd_used + 2) & ~2;
   dwords = (rmesa->store.cmd_used - rmesa->store.elts_start) / 4;

   cmd[1] |= (dwords - 3) << 16;
   cmd[2] |= nr << R200_VF_VERTEX_NUMBER_SHIFT;

   if (R200_DEBUG & DEBUG_SYNC) {
      fprintf(stderr, "%s: Syncing\n", __FUNCTION__);
      r200Finish( rmesa->glCtx );
a203 1
   drm_radeon_cmd_header_t *cmd;
d206 1
a206 2
   if (R200_DEBUG & DEBUG_IOCTL)
      fprintf(stderr, "%s %d prim %x\n", __FUNCTION__, min_nr, primitive);
d210 5
a214 10
   r200EmitState( rmesa );
   
   cmd = (drm_radeon_cmd_header_t *)r200AllocCmdBuf( rmesa, ELTS_BUFSZ(min_nr),
						__FUNCTION__ );
   cmd[0].i = 0;
   cmd[0].header.cmd_type = RADEON_CMD_PACKET3_CLIP;
   cmd[1].i = R200_CP_CMD_3D_DRAW_INDX_2;
   cmd[2].i = (primitive | 
	       R200_VF_PRIM_WALK_IND |
	       R200_VF_COLOR_ORDER_RGBA);
d216 2
d219 3
a221 12
   retval = (GLushort *)(cmd+3);

   if (R200_DEBUG & DEBUG_PRIMS)
      fprintf(stderr, "%s: header 0x%x prim %x \n",
	      __FUNCTION__,
	      cmd[1].i, primitive);

   assert(!rmesa->dma.flush);
   rmesa->glCtx->Driver.NeedFlush |= FLUSH_STORED_VERTICES;
   rmesa->dma.flush = r200FlushElts;

   rmesa->store.elts_start = ((char *)cmd) - rmesa->store.cmd_buf;
d226 3
d230 7
d239 3
a241 2
			  GLuint vertex_size,
			  GLuint offset )
d243 1
a243 1
   drm_radeon_cmd_header_t *cmd;
d245 1
a245 2
   if (R200_DEBUG & (DEBUG_PRIMS|DEBUG_IOCTL))
      fprintf(stderr, "%s:  vertex_size 0x%x offset 0x%x \n",
a247 2
   cmd = (drm_radeon_cmd_header_t *)r200AllocCmdBuf( rmesa, VERT_AOS_BUFSZ,
						  __FUNCTION__ );
d249 6
a254 5
   cmd[0].header.cmd_type = RADEON_CMD_PACKET3;
   cmd[1].i = R200_CP_CMD_3D_LOAD_VBPNTR | (2 << 16);
   cmd[2].i = 1;
   cmd[3].i = vertex_size | (vertex_size << 8);
   cmd[4].i = offset;
a255 1
		       
d257 1
a257 4
void r200EmitAOS( r200ContextPtr rmesa,
		    struct r200_dma_region **component,
		    GLuint nr,
		    GLuint offset )
d259 3
a261 2
   drm_radeon_cmd_header_t *cmd;
   int sz = AOS_BUFSZ(nr);
d263 79
a341 20
   int *tmp;

   if (R200_DEBUG & DEBUG_IOCTL)
      fprintf(stderr, "%s nr arrays: %d\n", __FUNCTION__, nr);

   cmd = (drm_radeon_cmd_header_t *)r200AllocCmdBuf( rmesa, sz, __FUNCTION__ );
   cmd[0].i = 0;
   cmd[0].header.cmd_type = RADEON_CMD_PACKET3;
   cmd[1].i = R200_CP_CMD_3D_LOAD_VBPNTR | (((sz / sizeof(int)) - 3) << 16);
   cmd[2].i = nr;
   tmp = &cmd[0].i;
   cmd += 3;

   for (i = 0 ; i < nr ; i++) {
      if (i & 1) {
	 cmd[0].i |= ((component[i]->aos_stride << 24) | 
		      (component[i]->aos_size << 16));
	 cmd[2].i = (component[i]->aos_start + 
		     offset * component[i]->aos_stride * 4);
	 cmd += 3;
d343 7
a349 5
      else {
	 cmd[0].i = ((component[i]->aos_stride << 8) | 
		     (component[i]->aos_size << 0));
	 cmd[1].i = (component[i]->aos_start + 
		     offset * component[i]->aos_stride * 4);
d352 1
a352 69

   if (R200_DEBUG & DEBUG_VERTS) {
      fprintf(stderr, "%s:\n", __FUNCTION__);
      for (i = 0 ; i < sz ; i++)
	 fprintf(stderr, "   %d: %x\n", i, tmp[i]);
   }
}

void r200EmitBlit( r200ContextPtr rmesa,
		   GLuint color_fmt,
		   GLuint src_pitch,
		   GLuint src_offset,
		   GLuint dst_pitch,
		   GLuint dst_offset,
		   GLint srcx, GLint srcy,
		   GLint dstx, GLint dsty,
		   GLuint w, GLuint h )
{
   drm_radeon_cmd_header_t *cmd;

   if (R200_DEBUG & DEBUG_IOCTL)
      fprintf(stderr, "%s src %x/%x %d,%d dst: %x/%x %d,%d sz: %dx%d\n",
	      __FUNCTION__, 
	      src_pitch, src_offset, srcx, srcy,
	      dst_pitch, dst_offset, dstx, dsty,
	      w, h);

   assert( (src_pitch & 63) == 0 );
   assert( (dst_pitch & 63) == 0 );
   assert( (src_offset & 1023) == 0 );
   assert( (dst_offset & 1023) == 0 );
   assert( w < (1<<16) );
   assert( h < (1<<16) );

   cmd = (drm_radeon_cmd_header_t *)r200AllocCmdBuf( rmesa, 8 * sizeof(int),
						  __FUNCTION__ );


   cmd[0].header.cmd_type = RADEON_CMD_PACKET3;
   cmd[1].i = R200_CP_CMD_BITBLT_MULTI | (5 << 16);
   cmd[2].i = (RADEON_GMC_SRC_PITCH_OFFSET_CNTL |
	       RADEON_GMC_DST_PITCH_OFFSET_CNTL |
	       RADEON_GMC_BRUSH_NONE |
	       (color_fmt << 8) |
	       RADEON_GMC_SRC_DATATYPE_COLOR |
	       RADEON_ROP3_S |
	       RADEON_DP_SRC_SOURCE_MEMORY |
	       RADEON_GMC_CLR_CMP_CNTL_DIS |
	       RADEON_GMC_WR_MSK_DIS );

   cmd[3].i = ((src_pitch/64)<<22) | (src_offset >> 10);
   cmd[4].i = ((dst_pitch/64)<<22) | (dst_offset >> 10);
   cmd[5].i = (srcx << 16) | srcy;
   cmd[6].i = (dstx << 16) | dsty; /* dst */
   cmd[7].i = (w << 16) | h;
}


void r200EmitWait( r200ContextPtr rmesa, GLuint flags )
{
   drm_radeon_cmd_header_t *cmd;

   assert( !(flags & ~(RADEON_WAIT_2D|RADEON_WAIT_3D)) );

   cmd = (drm_radeon_cmd_header_t *)r200AllocCmdBuf( rmesa, 1 * sizeof(int),
					   __FUNCTION__ );
   cmd[0].i = 0;
   cmd[0].wait.cmd_type = RADEON_CMD_WAIT;
   cmd[0].wait.flags = flags;
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d34 4
a37 4
#include "glheader.h"
#include "imports.h"
#include "macros.h"
#include "context.h"
d39 1
a39 1
#include "simple_list.h"
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86: xc/lib/GL/mesa/src/drv/r200/r200_cmdbuf.c,v 1.1 2002/10/30 12:51:51 alanh Exp $ */
a108 1
   /* FIXME: is this a good place to insert that atom ? */
d110 1
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d110 1
a111 1
   insert_at_tail( &rmesa->hw.atomlist, &rmesa->hw.ptp );
@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@d1 1
d35 6
a40 5
#include "main/glheader.h"
#include "main/imports.h"
#include "main/macros.h"
#include "main/context.h"
#include "main/simple_list.h"
a41 1
#include "radeon_common.h"
d43 1
d45 2
d49 12
a63 7
#define insert_at_tail_if(atom_list, atom) \
   do { \
      struct radeon_state_atom* __atom = (atom); \
      if (__atom->check) \
	 insert_at_tail((atom_list), __atom); \
   } while(0)

d68 1
a68 1
   mtu = rmesa->radeon.glCtx->Const.MaxTextureUnits;
d70 2
a71 2
   make_empty_list(&rmesa->radeon.hw.atomlist);
   rmesa->radeon.hw.atomlist.name = "atom-list";
d73 19
a91 19
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.ctx );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.set );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.lin );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.msk );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vpt );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vtx );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vap );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vte );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.msc );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.cst );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.zbs );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.tcl );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.msl );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.tcg );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.grd );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.fog );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.tam );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.tf );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.atf );
d93 1
a93 1
       insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.tex[i] );
d95 1
a95 1
       insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.cube[i] );
d97 3
a99 4
       insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.pix[i] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.afs[0] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.afs[1] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.stp );
d101 1
a101 1
       insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.lit[i] );
d103 3
a105 3
       insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.mat[i] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.eye );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.glt );
d107 1
a107 1
      insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.mtl[i] );
d109 94
a202 10
       insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.ucp[i] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.spr );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.ptp );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.prf );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.pvs );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vpp[0] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vpp[1] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vpi[0] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.vpi[1] );
   insert_at_tail_if( &rmesa->radeon.hw.atomlist, &rmesa->hw.sci );
d212 1
a212 1
   BATCH_LOCALS(&rmesa->radeon);
d216 1
a216 1
   radeonEmitState(&rmesa->radeon);
d218 13
a230 9
   radeon_print(RADEON_RENDER|RADEON_SWRENDER,RADEON_VERBOSE,
           "%s cmd_used/4: %d prim %x nr %d\n", __FUNCTION__,
           rmesa->store.cmd_used/4, primitive, vertex_nr);
 
   BEGIN_BATCH(3);
   OUT_BATCH_PACKET3_CLIP(R200_CP_CMD_3D_DRAW_VBUF_2, 0);
   OUT_BATCH(primitive | R200_VF_PRIM_WALK_LIST | R200_VF_COLOR_ORDER_RGBA |
	     (vertex_nr << R200_VF_VERTEX_NUMBER_SHIFT));
   END_BATCH();
a232 32
static void r200FireEB(r200ContextPtr rmesa, int vertex_count, int type)
{
	BATCH_LOCALS(&rmesa->radeon);

	if (vertex_count > 0) {
		BEGIN_BATCH(8+2);
		OUT_BATCH_PACKET3_CLIP(R200_CP_CMD_3D_DRAW_INDX_2, 0);
		OUT_BATCH(R200_VF_PRIM_WALK_IND |
			  R200_VF_COLOR_ORDER_RGBA | 
			  ((vertex_count + 0) << 16) |
			  type);
		
		if (!rmesa->radeon.radeonScreen->kernel_mm) {
			OUT_BATCH_PACKET3(R200_CP_CMD_INDX_BUFFER, 2);
			OUT_BATCH((0x80 << 24) | (0 << 16) | 0x810);
			OUT_BATCH_RELOC(rmesa->radeon.tcl.elt_dma_offset,
					rmesa->radeon.tcl.elt_dma_bo,
					rmesa->radeon.tcl.elt_dma_offset,
					RADEON_GEM_DOMAIN_GTT, 0, 0);
			OUT_BATCH((vertex_count + 1)/2);
		} else {
			OUT_BATCH_PACKET3(R200_CP_CMD_INDX_BUFFER, 2);
			OUT_BATCH((0x80 << 24) | (0 << 16) | 0x810);
			OUT_BATCH(rmesa->radeon.tcl.elt_dma_offset);
			OUT_BATCH((vertex_count + 1)/2);
			radeon_cs_write_reloc(rmesa->radeon.cmdbuf.cs,
					      rmesa->radeon.tcl.elt_dma_bo,
					      RADEON_GEM_DOMAIN_GTT, 0, 0);
		}
		END_BATCH();
	}
}
d234 1
a234 1
void r200FlushElts(struct gl_context *ctx)
d236 21
a256 24
   r200ContextPtr rmesa = R200_CONTEXT(ctx);
   int nr, elt_used = rmesa->tcl.elt_used;

   radeon_print(RADEON_RENDER, RADEON_VERBOSE, "%s %x %d\n", __FUNCTION__, rmesa->tcl.hw_primitive, elt_used);

   assert( rmesa->radeon.dma.flush == r200FlushElts );
   rmesa->radeon.dma.flush = NULL;

   nr = elt_used / 2;

   radeon_bo_unmap(rmesa->radeon.tcl.elt_dma_bo);

   r200FireEB(rmesa, nr, rmesa->tcl.hw_primitive);

   radeon_bo_unref(rmesa->radeon.tcl.elt_dma_bo);
   rmesa->radeon.tcl.elt_dma_bo = NULL;

   if (R200_ELT_BUF_SZ > elt_used)
     radeonReturnDmaRegion(&rmesa->radeon, R200_ELT_BUF_SZ - elt_used);

   if (radeon_is_debug_enabled(RADEON_SYNC, RADEON_CRITICAL)
         && !rmesa->radeon.radeonScreen->kernel_mm) {
      radeon_print(RADEON_SYNC, RADEON_NORMAL, "%s: Syncing\n", __FUNCTION__);
      radeonFinish( rmesa->radeon.glCtx );
d265 1
d268 2
a269 1
   radeon_print(RADEON_RENDER, RADEON_VERBOSE, "%s %d prim %x\n", __FUNCTION__, min_nr, primitive);
d273 10
a282 1
   radeonEmitState(&rmesa->radeon);
d284 11
a294 3
   radeonAllocDmaRegion(&rmesa->radeon, &rmesa->radeon.tcl.elt_dma_bo,
			&rmesa->radeon.tcl.elt_dma_offset, R200_ELT_BUF_SZ, 4);
   rmesa->tcl.elt_used = min_nr * 2;
d296 1
a296 6
   radeon_bo_map(rmesa->radeon.tcl.elt_dma_bo, 1);
   retval = rmesa->radeon.tcl.elt_dma_bo->ptr + rmesa->radeon.tcl.elt_dma_offset;
   
   assert(!rmesa->radeon.dma.flush);
   rmesa->radeon.glCtx->Driver.NeedFlush |= FLUSH_STORED_VERTICES;
   rmesa->radeon.dma.flush = r200FlushElts;
a300 3
void r200EmitMaxVtxIndex(r200ContextPtr rmesa, int count)
{
   BATCH_LOCALS(&rmesa->radeon);
a301 7
   if (rmesa->radeon.radeonScreen->kernel_mm) {
	   BEGIN_BATCH_NO_AUTOSTATE(2);
	   OUT_BATCH(CP_PACKET0(R200_SE_VF_MAX_VTX_INDX, 0));
	   OUT_BATCH(count);
	   END_BATCH();
   }
}
d304 2
a305 3
			GLuint vertex_size,
 			struct radeon_bo *bo,
			GLuint offset )
d307 1
a307 1
   BATCH_LOCALS(&rmesa->radeon);
d309 2
a310 1
   radeon_print(RADEON_SWRENDER, RADEON_VERBOSE, "%s:  vertex_size 0x%x offset 0x%x \n",
d313 2
d316 5
a320 6
   BEGIN_BATCH(7);
   OUT_BATCH_PACKET3(R200_CP_CMD_3D_LOAD_VBPNTR, 2);
   OUT_BATCH(1);
   OUT_BATCH(vertex_size | (vertex_size << 8));
   OUT_BATCH_RELOC(offset, bo, offset, RADEON_GEM_DOMAIN_GTT, 0, 0);
   END_BATCH();
d322 1
d324 4
a327 1
void r200EmitAOS(r200ContextPtr rmesa, GLuint nr, GLuint offset)
d329 2
a330 3
   BATCH_LOCALS(&rmesa->radeon);
   uint32_t voffset;
   int sz = 1 + (nr >> 1) * 3 + (nr & 1) * 2;
d332 20
a351 31
   
   radeon_print(RADEON_RENDER, RADEON_VERBOSE,
           "%s: nr=%d, ofs=0x%08x\n",
           __FUNCTION__, nr, offset);

   BEGIN_BATCH(sz+2+ (nr*2));
   OUT_BATCH_PACKET3(R200_CP_CMD_3D_LOAD_VBPNTR, sz - 1);
   OUT_BATCH(nr);

    
   if (!rmesa->radeon.radeonScreen->kernel_mm) {
      for (i = 0; i + 1 < nr; i += 2) {
	 OUT_BATCH((rmesa->radeon.tcl.aos[i].components << 0) |
		   (rmesa->radeon.tcl.aos[i].stride << 8) |
		   (rmesa->radeon.tcl.aos[i + 1].components << 16) |
		   (rmesa->radeon.tcl.aos[i + 1].stride << 24));
			
	 voffset =  rmesa->radeon.tcl.aos[i + 0].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[i + 0].stride;
	 OUT_BATCH_RELOC(voffset,
			 rmesa->radeon.tcl.aos[i].bo,
			 voffset,
			 RADEON_GEM_DOMAIN_GTT,
			 0, 0);
	 voffset =  rmesa->radeon.tcl.aos[i + 1].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[i + 1].stride;
	 OUT_BATCH_RELOC(voffset,
			 rmesa->radeon.tcl.aos[i+1].bo,
			 voffset,
			 RADEON_GEM_DOMAIN_GTT,
			 0, 0);
d353 5
a357 55
      
      if (nr & 1) {
	 OUT_BATCH((rmesa->radeon.tcl.aos[nr - 1].components << 0) |
		   (rmesa->radeon.tcl.aos[nr - 1].stride << 8));
	 voffset =  rmesa->radeon.tcl.aos[nr - 1].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[nr - 1].stride;
	 OUT_BATCH_RELOC(voffset,
			 rmesa->radeon.tcl.aos[nr - 1].bo,
			 voffset,
			 RADEON_GEM_DOMAIN_GTT,
			 0, 0);
      }
   } else {
      for (i = 0; i + 1 < nr; i += 2) {
	 OUT_BATCH((rmesa->radeon.tcl.aos[i].components << 0) |
		   (rmesa->radeon.tcl.aos[i].stride << 8) |
		   (rmesa->radeon.tcl.aos[i + 1].components << 16) |
		   (rmesa->radeon.tcl.aos[i + 1].stride << 24));
	 
	 voffset =  rmesa->radeon.tcl.aos[i + 0].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[i + 0].stride;
	 OUT_BATCH(voffset);
	 voffset =  rmesa->radeon.tcl.aos[i + 1].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[i + 1].stride;
	 OUT_BATCH(voffset);
      }
      
      if (nr & 1) {
	 OUT_BATCH((rmesa->radeon.tcl.aos[nr - 1].components << 0) |
		   (rmesa->radeon.tcl.aos[nr - 1].stride << 8));
	 voffset =  rmesa->radeon.tcl.aos[nr - 1].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[nr - 1].stride;
	 OUT_BATCH(voffset);
      }
      for (i = 0; i + 1 < nr; i += 2) {
	 voffset =  rmesa->radeon.tcl.aos[i + 0].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[i + 0].stride;
	 radeon_cs_write_reloc(rmesa->radeon.cmdbuf.cs,
			       rmesa->radeon.tcl.aos[i+0].bo,
			       RADEON_GEM_DOMAIN_GTT,
			       0, 0);
	 voffset =  rmesa->radeon.tcl.aos[i + 1].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[i + 1].stride;
	 radeon_cs_write_reloc(rmesa->radeon.cmdbuf.cs,
			       rmesa->radeon.tcl.aos[i+1].bo,
			       RADEON_GEM_DOMAIN_GTT,
			       0, 0);
      }
      if (nr & 1) {
	 voffset =  rmesa->radeon.tcl.aos[nr - 1].offset +
	    offset * 4 * rmesa->radeon.tcl.aos[nr - 1].stride;
	 radeon_cs_write_reloc(rmesa->radeon.cmdbuf.cs,
			       rmesa->radeon.tcl.aos[nr-1].bo,
			       RADEON_GEM_DOMAIN_GTT,
			       0, 0);
d360 69
a428 1
   END_BATCH();
@


1.1.1.4
log
@Import Mesa 9.2.0
@
text
@d50 3
a52 3
      struct radeon_state_atom* current_atom = (atom); \
      if (current_atom->check) \
	 insert_at_tail((atom_list), current_atom); \
d59 1
a59 1
   mtu = rmesa->radeon.glCtx.Const.MaxTextureUnits;
d148 18
a165 8

		OUT_BATCH_PACKET3(R200_CP_CMD_INDX_BUFFER, 2);
		OUT_BATCH((0x80 << 24) | (0 << 16) | 0x810);
		OUT_BATCH(rmesa->radeon.tcl.elt_dma_offset);
		OUT_BATCH((vertex_count + 1)/2);
		radeon_cs_write_reloc(rmesa->radeon.cmdbuf.cs,
				      rmesa->radeon.tcl.elt_dma_bo,
				      RADEON_GEM_DOMAIN_GTT, 0, 0);
d191 6
d220 1
a220 1
   rmesa->radeon.glCtx.Driver.NeedFlush |= FLUSH_STORED_VERTICES;
d230 6
a235 4
   BEGIN_BATCH_NO_AUTOSTATE(2);
   OUT_BATCH(CP_PACKET0(R200_SE_VF_MAX_VTX_INDX, 0));
   OUT_BATCH(count);
   END_BATCH();
d272 36
a307 1
   {
@


1.1.1.5
log
@Import Mesa 10.2.3
@
text
@d31 1
a31 1
 *   Keith Whitwell <keithw@@vmware.com>
d214 1
a214 1
   BEGIN_BATCH(2);
@


