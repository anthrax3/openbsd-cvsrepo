head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.51;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.05.30;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.42;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.16.03;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.56;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.12.10;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.49.17;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright 2009 Maciej Cencora <m.cencora@@gmail.com>
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "main/imports.h"
#include "main/mtypes.h"
#include "main/bufferobj.h"

#include "radeon_common.h"
#include "radeon_buffer_objects.h"

struct radeon_buffer_object *
get_radeon_buffer_object(struct gl_buffer_object *obj)
{
    return (struct radeon_buffer_object *) obj;
}

static struct gl_buffer_object *
radeonNewBufferObject(struct gl_context * ctx,
                      GLuint name,
                      GLenum target)
{
    struct radeon_buffer_object *obj = CALLOC_STRUCT(radeon_buffer_object);

    _mesa_initialize_buffer_object(ctx, &obj->Base, name, target);

    obj->bo = NULL;

    return &obj->Base;
}

/**
 * Called via glDeleteBuffersARB().
 */
static void
radeonDeleteBufferObject(struct gl_context * ctx,
                         struct gl_buffer_object *obj)
{
    struct radeon_buffer_object *radeon_obj = get_radeon_buffer_object(obj);
    int i;

    for (i = 0; i < MAP_COUNT; i++) {
       if (obj->Mappings[i].Pointer) {
           radeon_bo_unmap(radeon_obj->bo);
       }
    }

    if (radeon_obj->bo) {
        radeon_bo_unref(radeon_obj->bo);
    }

    free(radeon_obj);
}


/**
 * Allocate space for and store data in a buffer object.  Any data that was
 * previously stored in the buffer object is lost.  If data is NULL,
 * memory will be allocated, but no copy will occur.
 * Called via ctx->Driver.BufferData().
 * \return GL_TRUE for success, GL_FALSE if out of memory
 */
static GLboolean
radeonBufferData(struct gl_context * ctx,
                 GLenum target,
                 GLsizeiptrARB size,
                 const GLvoid * data,
                 GLenum usage,
                 GLbitfield storageFlags,
                 struct gl_buffer_object *obj)
{
    radeonContextPtr radeon = RADEON_CONTEXT(ctx);
    struct radeon_buffer_object *radeon_obj = get_radeon_buffer_object(obj);

    radeon_obj->Base.Size = size;
    radeon_obj->Base.Usage = usage;
    radeon_obj->Base.StorageFlags = storageFlags;

    if (radeon_obj->bo != NULL) {
        radeon_bo_unref(radeon_obj->bo);
        radeon_obj->bo = NULL;
    }

    if (size != 0) {
        radeon_obj->bo = radeon_bo_open(radeon->radeonScreen->bom,
                                        0,
                                        size,
                                        ctx->Const.MinMapBufferAlignment,
                                        RADEON_GEM_DOMAIN_GTT,
                                        0);

        if (!radeon_obj->bo)
            return GL_FALSE;

        if (data != NULL) {
            radeon_bo_map(radeon_obj->bo, GL_TRUE);

            memcpy(radeon_obj->bo->ptr, data, size);

            radeon_bo_unmap(radeon_obj->bo);
        }
    }
    return GL_TRUE;
}

/**
 * Replace data in a subrange of buffer object.  If the data range
 * specified by size + offset extends beyond the end of the buffer or
 * if data is NULL, no copy is performed.
 * Called via glBufferSubDataARB().
 */
static void
radeonBufferSubData(struct gl_context * ctx,
                    GLintptrARB offset,
                    GLsizeiptrARB size,
                    const GLvoid * data,
                    struct gl_buffer_object *obj)
{
    radeonContextPtr radeon = RADEON_CONTEXT(ctx);
    struct radeon_buffer_object *radeon_obj = get_radeon_buffer_object(obj);

    if (radeon_bo_is_referenced_by_cs(radeon_obj->bo, radeon->cmdbuf.cs)) {
        radeon_firevertices(radeon);
    }

    radeon_bo_map(radeon_obj->bo, GL_TRUE);

    memcpy(radeon_obj->bo->ptr + offset, data, size);

    radeon_bo_unmap(radeon_obj->bo);
}

/**
 * Called via glGetBufferSubDataARB()
 */
static void
radeonGetBufferSubData(struct gl_context * ctx,
                       GLintptrARB offset,
                       GLsizeiptrARB size,
                       GLvoid * data,
                       struct gl_buffer_object *obj)
{
    struct radeon_buffer_object *radeon_obj = get_radeon_buffer_object(obj);

    radeon_bo_map(radeon_obj->bo, GL_FALSE);

    memcpy(data, radeon_obj->bo->ptr + offset, size);

    radeon_bo_unmap(radeon_obj->bo);
}

/**
 * Called via glMapBuffer() and glMapBufferRange()
 */
static void *
radeonMapBufferRange(struct gl_context * ctx,
		     GLintptr offset, GLsizeiptr length,
		     GLbitfield access, struct gl_buffer_object *obj,
                     gl_map_buffer_index index)
{
    struct radeon_buffer_object *radeon_obj = get_radeon_buffer_object(obj);
    const GLboolean write_only =
       (access & (GL_MAP_READ_BIT | GL_MAP_WRITE_BIT)) == GL_MAP_WRITE_BIT;

    if (write_only) {
        ctx->Driver.Flush(ctx);
    }

    if (radeon_obj->bo == NULL) {
        obj->Mappings[index].Pointer = NULL;
        return NULL;
    }

    obj->Mappings[index].Offset = offset;
    obj->Mappings[index].Length = length;
    obj->Mappings[index].AccessFlags = access;

    radeon_bo_map(radeon_obj->bo, write_only);

    obj->Mappings[index].Pointer = radeon_obj->bo->ptr + offset;
    return obj->Mappings[index].Pointer;
}


/**
 * Called via glUnmapBufferARB()
 */
static GLboolean
radeonUnmapBuffer(struct gl_context * ctx,
                  struct gl_buffer_object *obj,
                  gl_map_buffer_index index)
{
    struct radeon_buffer_object *radeon_obj = get_radeon_buffer_object(obj);

    if (radeon_obj->bo != NULL) {
        radeon_bo_unmap(radeon_obj->bo);
    }

    obj->Mappings[index].Pointer = NULL;
    obj->Mappings[index].Offset = 0;
    obj->Mappings[index].Length = 0;

    return GL_TRUE;
}

void
radeonInitBufferObjectFuncs(struct dd_function_table *functions)
{
    functions->NewBufferObject = radeonNewBufferObject;
    functions->DeleteBuffer = radeonDeleteBufferObject;
    functions->BufferData = radeonBufferData;
    functions->BufferSubData = radeonBufferSubData;
    functions->GetBufferSubData = radeonGetBufferSubData;
    functions->MapBufferRange = radeonMapBufferRange;
    functions->UnmapBuffer = radeonUnmapBuffer;
}
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d43 2
a44 1
                      GLuint name)
d48 1
a48 1
    _mesa_initialize_buffer_object(ctx, &obj->Base, name);
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d43 1
a43 2
                      GLuint name,
                      GLenum target)
d47 1
a47 1
    _mesa_initialize_buffer_object(ctx, &obj->Base, name, target);
@


1.3
log
@Merge Mesa 9.2.0
@
text
@a27 2
#include "radeon_buffer_objects.h"

d33 1
d63 1
d65 4
a68 2
    if (obj->Pointer) {
        radeon_bo_unmap(radeon_obj->bo);
d92 1
d100 1
d111 1
a111 1
                                        32,
d181 2
a182 1
		     GLbitfield access, struct gl_buffer_object *obj)
d193 1
a193 1
        obj->Pointer = NULL;
d197 3
a199 3
    obj->Offset = offset;
    obj->Length = length;
    obj->AccessFlags = access;
d203 2
a204 2
    obj->Pointer = radeon_obj->bo->ptr + offset;
    return obj->Pointer;
d213 2
a214 1
                  struct gl_buffer_object *obj)
d222 3
a224 3
    obj->Pointer = NULL;
    obj->Offset = 0;
    obj->Length = 0;
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d49 1
a49 1
    _mesa_initialize_buffer_object(&obj->Base, name, target);
a132 1
                    GLenum target,
a156 1
                       GLenum target,
d172 1
a172 1
 * Called via glMapBufferARB()
d175 3
a177 4
radeonMapBuffer(struct gl_context * ctx,
                GLenum target,
                GLenum access,
                struct gl_buffer_object *obj)
d180 2
d183 1
a183 1
    if (access == GL_WRITE_ONLY_ARB) {
d192 3
a194 1
    radeon_bo_map(radeon_obj->bo, access == GL_WRITE_ONLY_ARB);
d196 1
a196 3
    obj->Pointer = radeon_obj->bo->ptr;
    obj->Length = obj->Size;
    obj->Offset = 0;
d198 1
a207 1
                  GLenum target,
d231 1
a231 1
    functions->MapBuffer = radeonMapBuffer;
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d43 1
a43 1
radeonNewBufferObject(GLcontext * ctx,
d60 1
a60 1
radeonDeleteBufferObject(GLcontext * ctx,
d85 1
a85 1
radeonBufferData(GLcontext * ctx,
d132 1
a132 1
radeonBufferSubData(GLcontext * ctx,
d157 1
a157 1
radeonGetBufferSubData(GLcontext * ctx,
d177 1
a177 1
radeonMapBuffer(GLcontext * ctx,
d207 1
a207 1
radeonUnmapBuffer(GLcontext * ctx,
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d43 1
a43 1
radeonNewBufferObject(struct gl_context * ctx,
d60 1
a60 1
radeonDeleteBufferObject(struct gl_context * ctx,
d85 1
a85 1
radeonBufferData(struct gl_context * ctx,
d132 1
a132 1
radeonBufferSubData(struct gl_context * ctx,
d157 1
a157 1
radeonGetBufferSubData(struct gl_context * ctx,
d177 1
a177 1
radeonMapBuffer(struct gl_context * ctx,
d207 1
a207 1
radeonUnmapBuffer(struct gl_context * ctx,
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d49 1
a49 1
    _mesa_initialize_buffer_object(ctx, &obj->Base, name, target);
d133 1
d158 1
d174 1
a174 1
 * Called via glMapBuffer() and glMapBufferRange()
d177 4
a180 3
radeonMapBufferRange(struct gl_context * ctx,
		     GLintptr offset, GLsizeiptr length,
		     GLbitfield access, struct gl_buffer_object *obj)
a182 2
    const GLboolean write_only =
       (access & (GL_MAP_READ_BIT | GL_MAP_WRITE_BIT)) == GL_MAP_WRITE_BIT;
d184 1
a184 1
    if (write_only) {
d193 1
a193 3
    obj->Offset = offset;
    obj->Length = length;
    obj->AccessFlags = access;
d195 3
a197 1
    radeon_bo_map(radeon_obj->bo, write_only);
a198 1
    obj->Pointer = radeon_obj->bo->ptr + offset;
d208 1
d232 1
a232 1
    functions->MapBufferRange = radeonMapBufferRange;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d28 2
a34 1
#include "radeon_buffer_objects.h"
a63 1
    int i;
d65 2
a66 4
    for (i = 0; i < MAP_COUNT; i++) {
       if (obj->Mappings[i].Pointer) {
           radeon_bo_unmap(radeon_obj->bo);
       }
a89 1
                 GLbitfield storageFlags,
a96 1
    radeon_obj->Base.StorageFlags = storageFlags;
d107 1
a107 1
                                        ctx->Const.MinMapBufferAlignment,
d177 1
a177 2
		     GLbitfield access, struct gl_buffer_object *obj,
                     gl_map_buffer_index index)
d188 1
a188 1
        obj->Mappings[index].Pointer = NULL;
d192 3
a194 3
    obj->Mappings[index].Offset = offset;
    obj->Mappings[index].Length = length;
    obj->Mappings[index].AccessFlags = access;
d198 2
a199 2
    obj->Mappings[index].Pointer = radeon_obj->bo->ptr + offset;
    return obj->Mappings[index].Pointer;
d208 1
a208 2
                  struct gl_buffer_object *obj,
                  gl_map_buffer_index index)
d216 3
a218 3
    obj->Mappings[index].Pointer = NULL;
    obj->Mappings[index].Offset = 0;
    obj->Mappings[index].Length = 0;
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d43 2
a44 1
                      GLuint name)
d48 1
a48 1
    _mesa_initialize_buffer_object(ctx, &obj->Base, name);
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d43 1
a43 2
                      GLuint name,
                      GLenum target)
d47 1
a47 1
    _mesa_initialize_buffer_object(ctx, &obj->Base, name, target);
@


