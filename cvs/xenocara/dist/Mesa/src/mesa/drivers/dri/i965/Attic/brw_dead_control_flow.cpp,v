head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.3.0.4
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	v10_2_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2014.07.09.20.34.49;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.1
date	2014.07.09.20.34.49;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.2
date	2015.01.25.14.11.32;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.3
date	2015.02.20.22.48.38;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2013 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/** @@file brw_dead_control_flow.cpp
 *
 * This file implements the dead control flow elimination optimization pass.
 */

#include "brw_shader.h"
#include "brw_cfg.h"

/* Look for and eliminate dead control flow:
 *
 *   - if/endif
 *   - if/else/endif
 */
bool
dead_control_flow_eliminate(backend_visitor *v)
{
   bool progress = false;

   cfg_t cfg(&v->instructions);

   for (int b = 0; b < cfg.num_blocks; b++) {
      bblock_t *block = cfg.blocks[b];
      bool found = false;

      /* ENDIF instructions, by definition, can only be found at the start of
       * basic blocks.
       */
      backend_instruction *endif_inst = block->start;
      if (endif_inst->opcode != BRW_OPCODE_ENDIF)
         continue;

      backend_instruction *if_inst = NULL, *else_inst = NULL;
      backend_instruction *prev_inst = (backend_instruction *) endif_inst->prev;
      if (prev_inst->opcode == BRW_OPCODE_IF) {
         if_inst = prev_inst;
         found = true;
      } else if (prev_inst->opcode == BRW_OPCODE_ELSE) {
         else_inst = prev_inst;

         prev_inst = (backend_instruction *) prev_inst->prev;
         if (prev_inst->opcode == BRW_OPCODE_IF) {
            if_inst = prev_inst;
            found = true;
         }
      }

      if (found) {
         if_inst->remove();
         if (else_inst)
            else_inst->remove();
         endif_inst->remove();
         progress = true;
      }
   }

   if (progress)
      v->invalidate_live_intervals();

   return progress;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 10.2.3
@
text
@@


1.1.1.2
log
@Import Mesa 10.4.3
@
text
@a34 1
 *   . else in else/endif
d42 4
a45 2
   foreach_block_safe (block, v->cfg) {
      bblock_t *if_block = NULL, *else_block = NULL, *endif_block = block;
d51 1
a51 1
      backend_instruction *endif_inst = endif_block->start();
d56 1
a56 10
      backend_instruction *prev_inst = endif_block->prev()->end();
      if (prev_inst->opcode == BRW_OPCODE_ELSE) {
         else_inst = prev_inst;
         else_block = endif_block->prev();
         found = true;

         if (else_block->start_ip == else_block->end_ip)
            prev_inst = else_block->prev()->end();
      }

a58 2
         if_block = else_block != NULL ? else_block->prev()
                                       : endif_block->prev();
d60 8
a67 3
      } else {
         /* Don't remove the ENDIF if we didn't find a dead IF. */
         endif_inst = NULL;
d71 4
a74 37
         bblock_t *earlier_block = NULL, *later_block = NULL;

         if (if_inst) {
            if (if_block->start_ip == if_block->end_ip) {
               earlier_block = if_block->prev();
            } else {
               earlier_block = if_block;
            }
            if_inst->remove(if_block);
         }

         if (else_inst) {
            else_inst->remove(else_block);
         }

         if (endif_inst) {
            if (endif_block->start_ip == endif_block->end_ip) {
               later_block = endif_block->next();
            } else {
               later_block = endif_block;
            }
            endif_inst->remove(endif_block);
         }

         assert((earlier_block == NULL) == (later_block == NULL));
         if (earlier_block && earlier_block->can_combine_with(later_block)) {
            earlier_block->combine_with(later_block);

            /* If ENDIF was in its own block, then we've now deleted it and
             * merged the two surrounding blocks, the latter of which the
             * __next block pointer was pointing to.
             */
            if (endif_block != later_block) {
               __next = earlier_block->next();
            }
         }

@


1.1.1.3
log
@Import Mesa 10.2.9
@
text
@d35 1
d43 2
a44 4
   cfg_t cfg(&v->instructions);

   for (int b = 0; b < cfg.num_blocks; b++) {
      bblock_t *block = cfg.blocks[b];
d50 1
a50 1
      backend_instruction *endif_inst = block->start;
d55 10
a64 1
      backend_instruction *prev_inst = (backend_instruction *) endif_inst->prev;
d67 2
d70 29
a98 2
      } else if (prev_inst->opcode == BRW_OPCODE_ELSE) {
         else_inst = prev_inst;
d100 11
a110 4
         prev_inst = (backend_instruction *) prev_inst->prev;
         if (prev_inst->opcode == BRW_OPCODE_IF) {
            if_inst = prev_inst;
            found = true;
a111 1
      }
a112 5
      if (found) {
         if_inst->remove();
         if (else_inst)
            else_inst->remove();
         endif_inst->remove();
@


