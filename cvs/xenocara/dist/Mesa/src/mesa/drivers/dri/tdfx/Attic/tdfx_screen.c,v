head	1.6;
access;
symbols
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.09.05.14.05.48;	author jsg;	state dead;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.41;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.26;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.40;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.18;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.54.02;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.54.02;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.57.37;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.29.54;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.43;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge Mesa 9.2.0
@
text
@/* -*- mode: c; c-basic-offset: 3 -*-
 *
 * Copyright 2000 VA Linux Systems Inc., Fremont, California.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * VA LINUX SYSTEMS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Original rewrite:
 *	Gareth Hughes <gareth@@valinux.com>, 29 Sep - 1 Oct 2000
 *
 * Authors:
 *	Gareth Hughes <gareth@@valinux.com>
 *
 */

#include "tdfx_dri.h"
#include "tdfx_context.h"
#include "tdfx_lock.h"
#include "tdfx_span.h"

#include "main/framebuffer.h"
#include "main/renderbuffer.h"
#include "xmlpool.h"

#include "utils.h"

#ifdef DEBUG_LOCKING
char *prevLockFile = 0;
int prevLockLine = 0;
#endif

#ifndef TDFX_DEBUG
int TDFX_DEBUG = 0;
#endif

PUBLIC const char __driConfigOptions[] =
DRI_CONF_BEGIN
    DRI_CONF_SECTION_DEBUG
        DRI_CONF_NO_RAST(false)
    DRI_CONF_SECTION_END
DRI_CONF_END;

static const __DRIextension *tdfxExtensions[] = {
    &driReadDrawableExtension,
    NULL
};

static const GLuint __driNConfigOptions = 1;

static GLboolean
tdfxCreateScreen( __DRIscreen *sPriv )
{
   tdfxScreenPrivate *fxScreen;
   TDFXDRIPtr fxDRIPriv = (TDFXDRIPtr) sPriv->pDevPriv;

   if (sPriv->devPrivSize != sizeof(TDFXDRIRec)) {
      fprintf(stderr,"\nERROR!  sizeof(TDFXDRIRec) does not match passed size from device driver\n");
      return GL_FALSE;
   }

   /* Allocate the private area */
   fxScreen = (tdfxScreenPrivate *) CALLOC( sizeof(tdfxScreenPrivate) );
   if ( !fxScreen )
      return GL_FALSE;

   /* parse information in __driConfigOptions */
   driParseOptionInfo (&fxScreen->optionCache,
		       __driConfigOptions, __driNConfigOptions);

   fxScreen->driScrnPriv = sPriv;
   sPriv->private = (void *) fxScreen;

   fxScreen->regs.handle	= fxDRIPriv->regs;
   fxScreen->regs.size		= fxDRIPriv->regsSize;
   fxScreen->deviceID		= fxDRIPriv->deviceID;
   fxScreen->width		= fxDRIPriv->width;
   fxScreen->height		= fxDRIPriv->height;
   fxScreen->mem		= fxDRIPriv->mem;
   fxScreen->cpp		= fxDRIPriv->cpp;
   fxScreen->stride		= fxDRIPriv->stride;
   fxScreen->fifoOffset		= fxDRIPriv->fifoOffset;
   fxScreen->fifoSize		= fxDRIPriv->fifoSize;
   fxScreen->fbOffset		= fxDRIPriv->fbOffset;
   fxScreen->backOffset		= fxDRIPriv->backOffset;
   fxScreen->depthOffset	= fxDRIPriv->depthOffset;
   fxScreen->textureOffset	= fxDRIPriv->textureOffset;
   fxScreen->textureSize	= fxDRIPriv->textureSize;
   fxScreen->sarea_priv_offset	= fxDRIPriv->sarea_priv_offset;

   if ( drmMap( sPriv->fd, fxScreen->regs.handle,
		fxScreen->regs.size, &fxScreen->regs.map ) ) {
      return GL_FALSE;
   }

   sPriv->extensions = tdfxExtensions;

   return GL_TRUE;
}


static void
tdfxDestroyScreen( __DRIscreen *sPriv )
{
   tdfxScreenPrivate *fxScreen = (tdfxScreenPrivate *) sPriv->private;

   if (!fxScreen)
      return;

   drmUnmap( fxScreen->regs.map, fxScreen->regs.size );

   /* free all option information */
   driDestroyOptionInfo (&fxScreen->optionCache);

   FREE( fxScreen );
   sPriv->private = NULL;
}


static GLboolean
tdfxInitDriver( __DRIscreen *sPriv )
{
   if ( TDFX_DEBUG & DEBUG_VERBOSE_DRI ) {
      fprintf( stderr, "%s( %p )\n", __FUNCTION__, (void *)sPriv );
   }

   if ( !tdfxCreateScreen( sPriv ) ) {
      tdfxDestroyScreen( sPriv );
      return GL_FALSE;
   }

   return GL_TRUE;
}


static GLboolean
tdfxCreateBuffer( __DRIscreen *driScrnPriv,
                  __DRIdrawable *driDrawPriv,
                  const struct gl_config *mesaVis,
                  GLboolean isPixmap )
{
   tdfxScreenPrivate *screen = (tdfxScreenPrivate *) driScrnPriv->private;

   if (isPixmap) {
      return GL_FALSE; /* not implemented */
   }
   else {
      struct gl_framebuffer *fb = _mesa_create_framebuffer(mesaVis);

      {
         driRenderbuffer *frontRb
            = driNewRenderbuffer(MESA_FORMAT_ARGB8888, NULL, screen->cpp,
                                 screen->fbOffset, screen->width, driDrawPriv);
         tdfxSetSpanFunctions(frontRb, mesaVis);
         _mesa_add_renderbuffer(fb, BUFFER_FRONT_LEFT, &frontRb->Base);
      }

      if (mesaVis->doubleBufferMode) {
         driRenderbuffer *backRb
            = driNewRenderbuffer(MESA_FORMAT_ARGB8888, NULL, screen->cpp,
                                 screen->backOffset, screen->width,
                                 driDrawPriv);
         tdfxSetSpanFunctions(backRb, mesaVis);
         _mesa_add_renderbuffer(fb, BUFFER_BACK_LEFT, &backRb->Base);
	 backRb->backBuffer = GL_TRUE;
      }

      if (mesaVis->depthBits == 16) {
         driRenderbuffer *depthRb
            = driNewRenderbuffer(MESA_FORMAT_Z16, NULL, screen->cpp,
                                 screen->depthOffset, screen->width,
                                 driDrawPriv);
         tdfxSetSpanFunctions(depthRb, mesaVis);
         _mesa_add_renderbuffer(fb, BUFFER_DEPTH, &depthRb->Base);
      }
      else if (mesaVis->depthBits == 24) {
         driRenderbuffer *depthRb
            = driNewRenderbuffer(MESA_FORMAT_Z24_S8, NULL, screen->cpp,
                                 screen->depthOffset, screen->width,
                                 driDrawPriv);
         tdfxSetSpanFunctions(depthRb, mesaVis);
         _mesa_add_renderbuffer(fb, BUFFER_DEPTH, &depthRb->Base);
      }

      if (mesaVis->stencilBits > 0) {
         driRenderbuffer *stencilRb
            = driNewRenderbuffer(MESA_FORMAT_S8, NULL, screen->cpp,
                                 screen->depthOffset, screen->width,
                                 driDrawPriv);
         tdfxSetSpanFunctions(stencilRb, mesaVis);
         _mesa_add_renderbuffer(fb, BUFFER_STENCIL, &stencilRb->Base);
      }

      _mesa_add_soft_renderbuffers(fb,
                                   GL_FALSE, /* color */
                                   GL_FALSE, /* depth */
                                   GL_FALSE, /*swStencil,*/
                                   mesaVis->accumRedBits > 0,
                                   GL_FALSE, /* alpha */
                                   GL_FALSE /* aux */);
      driDrawPriv->driverPrivate = (void *) fb;

      return (driDrawPriv->driverPrivate != NULL);
   }
}


static void
tdfxDestroyBuffer(__DRIdrawable *driDrawPriv)
{
   _mesa_reference_framebuffer((struct gl_framebuffer **)(&(driDrawPriv->driverPrivate)), NULL);
}


static void
tdfxSwapBuffers( __DRIdrawable *driDrawPriv )

{
   GET_CURRENT_CONTEXT(ctx);
   tdfxContextPtr fxMesa = 0;
   struct gl_framebuffer *mesaBuffer;

   if ( TDFX_DEBUG & DEBUG_VERBOSE_DRI ) {
      fprintf( stderr, "%s( %p )\n", __FUNCTION__, (void *)driDrawPriv );
   }

   mesaBuffer = (struct gl_framebuffer *) driDrawPriv->driverPrivate;
   if ( !mesaBuffer->Visual.doubleBufferMode )
      return; /* can't swap a single-buffered window */

   /* If the current context's drawable matches the given drawable
    * we have to do a glFinish (per the GLX spec).
    */
   if ( ctx ) {
      __DRIdrawable *curDrawPriv;
      fxMesa = TDFX_CONTEXT(ctx);
      curDrawPriv = fxMesa->driContext->driDrawablePriv;

      if ( curDrawPriv == driDrawPriv ) {
	 /* swapping window bound to current context, flush first */
	 _mesa_notifySwapBuffers( ctx );
	 LOCK_HARDWARE( fxMesa );
      }
      else {
         /* find the fxMesa context previously bound to the window */
	 fxMesa = (tdfxContextPtr) driDrawPriv->driContextPriv->driverPrivate;
         if (!fxMesa)
            return;
	 LOCK_HARDWARE( fxMesa );
	 fxMesa->Glide.grSstSelect( fxMesa->Glide.Board );
#ifdef DEBUG
         printf("SwapBuf SetState 1\n");
#endif
	 fxMesa->Glide.grGlideSetState(fxMesa->Glide.State );
      }
   }

#ifdef STATS
   {
      int stalls;
      static int prevStalls = 0;

      stalls = fxMesa->Glide.grFifoGetStalls();

      fprintf( stderr, "%s:\n", __FUNCTION__ );
      if ( stalls != prevStalls ) {
	 fprintf( stderr, "    %d stalls occurred\n",
		  stalls - prevStalls );
	 prevStalls = stalls;
      }
      if ( fxMesa && fxMesa->texSwaps ) {
	 fprintf( stderr, "    %d texture swaps occurred\n",
		  fxMesa->texSwaps );
	 fxMesa->texSwaps = 0;
      }
   }
#endif

   assert(fxMesa);

   if (fxMesa->scissoredClipRects) {
      /* restore clip rects without scissor box */
      fxMesa->Glide.grDRIPosition( driDrawPriv->x, driDrawPriv->y,
                                   driDrawPriv->w, driDrawPriv->h,
                                   driDrawPriv->numClipRects,
                                   driDrawPriv->pClipRects );
   }

   fxMesa->Glide.grDRIBufferSwap( fxMesa->Glide.SwapInterval );

   if (fxMesa->scissoredClipRects) {
      /* restore clip rects WITH scissor box */
      fxMesa->Glide.grDRIPosition( driDrawPriv->x, driDrawPriv->y,
                                   driDrawPriv->w, driDrawPriv->h,
                                   fxMesa->numClipRects, fxMesa->pClipRects );
   }


#if 0
   {
      FxI32 result;
      do {
         FxI32 result;
         fxMesa->Glide.grGet(GR_PENDING_BUFFERSWAPS, 4, &result);
      } while ( result > fxMesa->maxPendingSwapBuffers );
   }
#endif

   fxMesa->stats.swapBuffer++;

   if (ctx) {
      if (ctx->DriverCtx != fxMesa) {
         fxMesa = TDFX_CONTEXT(ctx);
	 fxMesa->Glide.grSstSelect( fxMesa->Glide.Board );
#ifdef DEBUG
         printf("SwapBuf SetState 2\n");
#endif
	 fxMesa->Glide.grGlideSetState(fxMesa->Glide.State );
      }
      UNLOCK_HARDWARE( fxMesa );
   }
}

static const __DRIconfig **
tdfxFillInModes(__DRIscreen *psp,
		unsigned pixel_bits,
		unsigned depth_bits,
		unsigned stencil_bits,
		GLboolean have_back_buffer)
{
	unsigned deep = (depth_bits > 17);

	/* Right now GLX_SWAP_COPY_OML isn't supported, but it would be easy
	 * enough to add support.  Basically, if a context is created with an
	 * fbconfig where the swap method is GLX_SWAP_COPY_OML, pageflipping
	 * will never be used.
	 */

	static const GLenum db_modes[2] = { GLX_NONE, GLX_SWAP_UNDEFINED_OML };
	uint8_t depth_bits_array[4];
	uint8_t stencil_bits_array[4];
        uint8_t msaa_samples_array[1];
	if(deep) {
		depth_bits_array[0] = 0;
		depth_bits_array[1] = 24;
		stencil_bits_array[0] = 0;
		stencil_bits_array[1] = 8;
	} else {
		depth_bits_array[0] = depth_bits;
		depth_bits_array[1] = 0;
		depth_bits_array[2] = depth_bits;
		depth_bits_array[3] = 0;
		stencil_bits_array[0] = 0;
		stencil_bits_array[1] = 0;
		stencil_bits_array[2] = 8;
		stencil_bits_array[3] = 8;
	}

	msaa_samples_array[0] = 0;

	return (const __DRIconfig **)
	   driCreateConfigs(deep ? GL_RGBA : GL_RGB,
			    deep ? GL_UNSIGNED_INT_8_8_8_8 :
				   GL_UNSIGNED_SHORT_5_6_5,
			    depth_bits_array,
			    stencil_bits_array,
			    deep ? 2 : 4,
			    db_modes, 2,
			    msaa_samples_array, 1,
			    GL_TRUE);
}

/**
 * This is the driver specific part of the createNewScreen entry point.
 * 
 * \todo maybe fold this into intelInitDriver
 *
 * \return the struct gl_config supported by this driver
 */
static const __DRIconfig **
tdfxInitScreen(__DRIscreen *psp)
{
   static const __DRIversion ddx_expected = { 1, 1, 0 };
   static const __DRIversion dri_expected = { 4, 0, 0 };
   static const __DRIversion drm_expected = { 1, 0, 0 };

   /* divined from tdfx_dri.c, sketchy */
   TDFXDRIPtr dri_priv = (TDFXDRIPtr) psp->pDevPriv;

   /* XXX i wish it was like this */
   /* bpp = dri_priv->bpp */
   int bpp = (dri_priv->cpp > 2) ? 24 : 16;

   if ( ! driCheckDriDdxDrmVersions2( "tdfx",
				      &psp->dri_version, & dri_expected,
				      &psp->ddx_version, & ddx_expected,
				      &psp->drm_version, & drm_expected ) )
      return NULL;

   if (!tdfxInitDriver(psp))
      return NULL;
      
   return tdfxFillInModes(psp,
			  bpp, (bpp == 16) ? 16 : 24,
			  (bpp == 16) ? 0 : 8,
			  (dri_priv->backOffset!=dri_priv->depthOffset));
}

const struct __DriverAPIRec driDriverAPI = {
   .InitScreen      = tdfxInitScreen,
   .DestroyScreen   = tdfxDestroyScreen,
   .CreateContext   = tdfxCreateContext,
   .DestroyContext  = tdfxDestroyContext,
   .CreateBuffer    = tdfxCreateBuffer,
   .DestroyBuffer   = tdfxDestroyBuffer,
   .SwapBuffers     = tdfxSwapBuffers,
   .MakeCurrent     = tdfxMakeCurrent,
   .UnbindContext   = tdfxUnbindContext,
   .GetSwapInfo     = NULL,
   .GetDrawableMSC  = NULL,
   .WaitForMSC      = NULL,
   .WaitForSBC      = NULL,
   .SwapBuffersMSC  = NULL
};

/* This is the table of extensions that the loader will dlsym() for. */
PUBLIC const __DRIextension *__driDriverExtensions[] = {
    &driCoreExtension.base,
    &driLegacyExtension.base,
    NULL
};
@


1.5
log
@Merge Mesa 7.10.3
@
text
@@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d158 1
a158 1
                  const __GLcontextModes *mesaVis,
d230 1
a230 1
   _mesa_reference_framebuffer((GLframebuffer **)(&(driDrawPriv->driverPrivate)), NULL);
d240 1
a240 1
   GLframebuffer *mesaBuffer;
d246 1
a246 1
   mesaBuffer = (GLframebuffer *) driDrawPriv->driverPrivate;
d397 1
a397 1
 * \return the __GLcontextModes supported by this driver
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a38 1
#include "tdfx_vb.h"
a39 1
#include "tdfx_tris.h"
a69 3
extern const struct dri_extension card_extensions[];
extern const struct dri_extension napalm_extensions[];

d71 1
a71 1
tdfxCreateScreen( __DRIscreenPrivate *sPriv )
d122 1
a122 1
tdfxDestroyScreen( __DRIscreenPrivate *sPriv )
d140 1
a140 1
tdfxInitDriver( __DRIscreenPrivate *sPriv )
d156 2
a157 2
tdfxCreateBuffer( __DRIscreenPrivate *driScrnPriv,
                  __DRIdrawablePrivate *driDrawPriv,
d171 1
a171 1
            = driNewRenderbuffer(GL_RGBA, NULL, screen->cpp,
d179 1
a179 1
            = driNewRenderbuffer(GL_RGBA, NULL, screen->cpp,
d189 1
a189 1
            = driNewRenderbuffer(GL_DEPTH_COMPONENT16, NULL, screen->cpp,
d197 1
a197 1
            = driNewRenderbuffer(GL_DEPTH_COMPONENT24, NULL, screen->cpp,
d206 1
a206 1
            = driNewRenderbuffer(GL_STENCIL_INDEX8_EXT, NULL, screen->cpp,
d228 1
a228 1
tdfxDestroyBuffer(__DRIdrawablePrivate *driDrawPriv)
d230 1
a230 1
   _mesa_unreference_framebuffer((GLframebuffer **)(&(driDrawPriv->driverPrivate)));
d235 1
a235 1
tdfxSwapBuffers( __DRIdrawablePrivate *driDrawPriv )
d254 1
a254 1
      __DRIdrawablePrivate *curDrawPriv;
d298 2
d344 1
a344 1
tdfxFillInModes(__DRIscreenPrivate *psp,
d361 1
d378 12
a389 7
	return driCreateConfigs(
		deep ? GL_RGBA : GL_RGB,
		deep ? GL_UNSIGNED_INT_8_8_8_8 : GL_UNSIGNED_SHORT_5_6_5,
		depth_bits_array,
		stencil_bits_array,
		deep ? 2 : 4,
		db_modes, 2);
a418 13
   /* Calling driInitExtensions here, with a NULL context pointer,
    * does not actually enable the extensions.  It just makes sure
    * that all the dispatch offsets for all the extensions that
    * *might* be enables are known.  This is needed because the
    * dispatch offsets need to be known when _mesa_context_create is
    * called, but we can't enable the extensions until we have a
    * context pointer.
    *
    * Hello chicken.  Hello egg.  How are you two today?
    */
   driInitExtensions( NULL, card_extensions, GL_FALSE );
   driInitExtensions( NULL, napalm_extensions, GL_FALSE );

d443 7
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a25 1
/* $XFree86: xc/lib/GL/mesa/src/drv/tdfx/tdfx_screen.c,v 1.3 2002/02/22 21:45:03 dawes Exp $ */
d43 2
a44 2
#include "framebuffer.h"
#include "renderbuffer.h"
@


1.1
log
@Initial revision
@
text
@d66 5
d121 2
d190 1
d236 1
a236 1
   _mesa_destroy_framebuffer((GLframebuffer *) (driDrawPriv->driverPrivate));
d276 1
d278 1
d338 1
d340 1
d347 6
a352 23

static const struct __DriverAPIRec tdfxAPI = {
   .InitDriver      = tdfxInitDriver,
   .DestroyScreen   = tdfxDestroyScreen,
   .CreateContext   = tdfxCreateContext,
   .DestroyContext  = tdfxDestroyContext,
   .CreateBuffer    = tdfxCreateBuffer,
   .DestroyBuffer   = tdfxDestroyBuffer,
   .SwapBuffers     = tdfxSwapBuffers,
   .MakeCurrent     = tdfxMakeCurrent,
   .UnbindContext   = tdfxUnbindContext,
   .GetSwapInfo     = NULL,
   .GetMSC          = NULL,
   .WaitForMSC      = NULL,
   .WaitForSBC      = NULL,
   .SwapBuffersMSC  = NULL
};


static __GLcontextModes *tdfxFillInModes(unsigned pixel_bits,
					 unsigned depth_bits,
					 unsigned stencil_bits,
					 GLboolean have_back_buffer)
a353 4
	__GLcontextModes *modes;
	__GLcontextModes *m;
	unsigned num_modes;
	unsigned vis[2] = { GLX_TRUE_COLOR, GLX_DIRECT_COLOR };
a354 1
	unsigned i, db, depth, accum, stencil;
d362 17
a378 45
	num_modes = (depth_bits == 16) ? 32 : 16;

	modes = (*dri_interface->createContextModes)(num_modes, sizeof(__GLcontextModes));
	m = modes;

	for (i = 0; i <= 1; i++) {
	    for (db = 0; db <= 1; db++) {
		for (depth = 0; depth <= 1; depth++) {
		    for (accum = 0; accum <= 1; accum++) {
			for (stencil = 0; stencil <= !deep; stencil++) {
			    if (deep) stencil = depth;
			    m->redBits		= deep ? 8 : 5;
			    m->greenBits	= deep ? 8 : 6;
			    m->blueBits		= deep ? 8 : 5;
			    m->alphaBits	= deep ? 8 : 0;
			    m->redMask		= deep ?0xFF000000 :0x0000F800;
			    m->greenMask	= deep ?0x00FF0000 :0x000007E0;
			    m->blueMask		= deep ?0x0000FF00 :0x0000001F;
			    m->alphaMask	= deep ? 0x000000FF : 0;
			    m->rgbBits		= m->redBits + m->greenBits +
			    			  m->blueBits + m->alphaBits;
			    m->accumRedBits	= accum ? 16 : 0;
			    m->accumGreenBits	= accum ? 16 : 0;
			    m->accumBlueBits	= accum ? 16 : 0;
			    m->accumAlphaBits	= accum ? 16 : 0;
			    m->stencilBits	= stencil ? 8 : 0;
			    m->depthBits	= deep
			    			  ? (depth ? 24 : 0)
			    			  : (depth ? 0 : depth_bits);
			    m->visualType	= vis[i];
			    m->renderType	= GLX_RGBA_BIT;
			    m->drawableType	= GLX_WINDOW_BIT;
			    m->rgbMode		= GL_TRUE;
			    m->doubleBufferMode = db ? GL_TRUE : GL_FALSE;
			    if (db)
			    	m->swapMethod = GLX_SWAP_UNDEFINED_OML;
			    m->visualRating	= ((stencil && !deep) || accum)
			    			  ? GLX_SLOW_CONFIG
						  : GLX_NONE;
			    m = m->next;
			    if (deep) stencil = 0;
			}
		    }
		}
	    }
d381 7
a387 1
	return modes;
d391 3
a393 5
 * This is the bootstrap function for the driver.  libGL supplies all of the
 * requisite information about the system, and the driver initializes itself.
 * This routine also fills in the linked list pointed to by \c driver_modes
 * with the \c __GLcontextModes that the driver can support for windows or
 * pbuffers.
d395 1
a395 2
 * \return A pointer to a \c __DRIscreenPrivate on success, or \c NULL on
 *         failure.
d397 2
a398 11
PUBLIC
void * __driCreateNewScreen_20050727( __DRInativeDisplay *dpy, int scrn, __DRIscreen *psc,
			     const __GLcontextModes * modes,
			     const __DRIversion * ddx_version,
			     const __DRIversion * dri_version,
			     const __DRIversion * drm_version,
			     const __DRIframebuffer * frame_buffer,
			     drmAddress pSAREA, int fd,
			     int internal_api_version,
			     const __DRIinterfaceMethods * interface,
			     __GLcontextModes ** driver_modes )
a399 1
   __DRIscreenPrivate *psp;
d404 6
a409 1
   dri_interface = interface;
d412 3
a414 3
				      dri_version, & dri_expected,
				      ddx_version, & ddx_expected,
				      drm_version, & drm_expected ) ) {
a415 1
   }
d417 12
a428 9
   psp = __driUtilCreateNewScreen(dpy, scrn, psc, NULL,
   				  ddx_version, dri_version, drm_version,
				  frame_buffer, pSAREA, fd,
				  internal_api_version, &tdfxAPI);

   if (psp != NULL) {
      /* divined from tdfx_dri.c, sketchy */
      TDFXDRIPtr dri_priv = (TDFXDRIPtr) psp->pDevPriv;
      int bpp = (dri_priv->cpp > 2) ? 24 : 16;
d430 2
a431 2
      /* XXX i wish it was like this */
      /* bpp = dri_priv->bpp */
d433 5
a437 15
      *driver_modes = tdfxFillInModes(bpp, (bpp == 16) ? 16 : 24,
				(bpp == 16) ? 0 : 8,
				(dri_priv->backOffset!=dri_priv->depthOffset));

      /* Calling driInitExtensions here, with a NULL context pointer, does not actually
       * enable the extensions.  It just makes sure that all the dispatch offsets for all
       * the extensions that *might* be enables are known.  This is needed because the
       * dispatch offsets need to be known when _mesa_context_create is called, but we can't
       * enable the extensions until we have a context pointer.
       *
       * Hello chicken.  Hello egg.  How are you two today?
       */
      driInitExtensions( NULL, card_extensions, GL_FALSE );
      driInitExtensions( NULL, napalm_extensions, GL_FALSE );
   }
d439 16
a454 2
   return (void *)psp;
}
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@a75 3
   PFNGLXSCRENABLEEXTENSIONPROC glx_enable_extension =
     (PFNGLXSCRENABLEEXTENSIONPROC) (*dri_interface->getProcAddress("glxEnableExtension"));
   void *const psc = sPriv->psc->screenConfigs;
a115 4
   if (glx_enable_extension != NULL) {
      (*glx_enable_extension)(psc, "GLX_SGI_make_current_read");
   }

a182 1
	 backRb->backBuffer = GL_TRUE;
a267 1
#ifdef DEBUG
a268 1
#endif
a327 1
#ifdef DEBUG
a328 1
#endif
d396 1
a396 1
			    m->accumAlphaBits	= (accum && deep) ? 16 : 0;
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d236 1
a236 1
   _mesa_unreference_framebuffer((GLframebuffer **)(&(driDrawPriv->driverPrivate)));
@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d26 1
d40 1
d42 1
d44 2
a45 2
#include "main/framebuffer.h"
#include "main/renderbuffer.h"
d66 1
a66 4
static const __DRIextension *tdfxExtensions[] = {
    &driReadDrawableExtension,
    NULL
};
d68 2
a69 1
static const GLuint __driNConfigOptions = 1;
d72 1
a72 1
tdfxCreateScreen( __DRIscreen *sPriv )
d76 3
d119 3
a121 1
   sPriv->extensions = tdfxExtensions;
d128 1
a128 1
tdfxDestroyScreen( __DRIscreen *sPriv )
d146 1
a146 1
tdfxInitDriver( __DRIscreen *sPriv )
d162 3
a164 3
tdfxCreateBuffer( __DRIscreen *driScrnPriv,
                  __DRIdrawable *driDrawPriv,
                  const struct gl_config *mesaVis,
d177 1
a177 1
            = driNewRenderbuffer(MESA_FORMAT_ARGB8888, NULL, screen->cpp,
d185 1
a185 1
            = driNewRenderbuffer(MESA_FORMAT_ARGB8888, NULL, screen->cpp,
d195 1
a195 1
            = driNewRenderbuffer(MESA_FORMAT_Z16, NULL, screen->cpp,
d203 1
a203 1
            = driNewRenderbuffer(MESA_FORMAT_Z24_S8, NULL, screen->cpp,
d212 1
a212 1
            = driNewRenderbuffer(MESA_FORMAT_S8, NULL, screen->cpp,
d234 1
a234 1
tdfxDestroyBuffer(__DRIdrawable *driDrawPriv)
d236 1
a236 1
   _mesa_reference_framebuffer((struct gl_framebuffer **)(&(driDrawPriv->driverPrivate)), NULL);
d241 1
a241 1
tdfxSwapBuffers( __DRIdrawable *driDrawPriv )
d246 1
a246 1
   struct gl_framebuffer *mesaBuffer;
d252 1
a252 1
   mesaBuffer = (struct gl_framebuffer *) driDrawPriv->driverPrivate;
d260 1
a260 1
      __DRIdrawable *curDrawPriv;
a303 2
   assert(fxMesa);

d347 23
a369 6
static const __DRIconfig **
tdfxFillInModes(__DRIscreen *psp,
		unsigned pixel_bits,
		unsigned depth_bits,
		unsigned stencil_bits,
		GLboolean have_back_buffer)
d371 4
d376 1
d384 45
a428 18
	static const GLenum db_modes[2] = { GLX_NONE, GLX_SWAP_UNDEFINED_OML };
	uint8_t depth_bits_array[4];
	uint8_t stencil_bits_array[4];
        uint8_t msaa_samples_array[1];
	if(deep) {
		depth_bits_array[0] = 0;
		depth_bits_array[1] = 24;
		stencil_bits_array[0] = 0;
		stencil_bits_array[1] = 8;
	} else {
		depth_bits_array[0] = depth_bits;
		depth_bits_array[1] = 0;
		depth_bits_array[2] = depth_bits;
		depth_bits_array[3] = 0;
		stencil_bits_array[0] = 0;
		stencil_bits_array[1] = 0;
		stencil_bits_array[2] = 8;
		stencil_bits_array[3] = 8;
d431 1
a431 12
	msaa_samples_array[0] = 0;

	return (const __DRIconfig **)
	   driCreateConfigs(deep ? GL_RGBA : GL_RGB,
			    deep ? GL_UNSIGNED_INT_8_8_8_8 :
				   GL_UNSIGNED_SHORT_5_6_5,
			    depth_bits_array,
			    stencil_bits_array,
			    deep ? 2 : 4,
			    db_modes, 2,
			    msaa_samples_array, 1,
			    GL_TRUE);
d435 5
a439 3
 * This is the driver specific part of the createNewScreen entry point.
 * 
 * \todo maybe fold this into intelInitDriver
d441 2
a442 1
 * \return the struct gl_config supported by this driver
d444 11
a454 2
static const __DRIconfig **
tdfxInitScreen(__DRIscreen *psp)
d456 1
d461 1
a461 6
   /* divined from tdfx_dri.c, sketchy */
   TDFXDRIPtr dri_priv = (TDFXDRIPtr) psp->pDevPriv;

   /* XXX i wish it was like this */
   /* bpp = dri_priv->bpp */
   int bpp = (dri_priv->cpp > 2) ? 24 : 16;
d464 3
a466 3
				      &psp->dri_version, & dri_expected,
				      &psp->ddx_version, & ddx_expected,
				      &psp->drm_version, & drm_expected ) )
d468 1
d470 12
a481 2
   if (!tdfxInitDriver(psp))
      return NULL;
d483 17
a499 4
   return tdfxFillInModes(psp,
			  bpp, (bpp == 16) ? 16 : 24,
			  (bpp == 16) ? 0 : 8,
			  (dri_priv->backOffset!=dri_priv->depthOffset));
a500 24

const struct __DriverAPIRec driDriverAPI = {
   .InitScreen      = tdfxInitScreen,
   .DestroyScreen   = tdfxDestroyScreen,
   .CreateContext   = tdfxCreateContext,
   .DestroyContext  = tdfxDestroyContext,
   .CreateBuffer    = tdfxCreateBuffer,
   .DestroyBuffer   = tdfxDestroyBuffer,
   .SwapBuffers     = tdfxSwapBuffers,
   .MakeCurrent     = tdfxMakeCurrent,
   .UnbindContext   = tdfxUnbindContext,
   .GetSwapInfo     = NULL,
   .GetDrawableMSC  = NULL,
   .WaitForMSC      = NULL,
   .WaitForSBC      = NULL,
   .SwapBuffersMSC  = NULL
};

/* This is the table of extensions that the loader will dlsym() for. */
PUBLIC const __DRIextension *__driDriverExtensions[] = {
    &driCoreExtension.base,
    &driLegacyExtension.base,
    NULL
};
@


