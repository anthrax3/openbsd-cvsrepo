head	1.10;
access;
symbols
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.12.23.05.17.48;	author jsg;	state dead;
branches;
next	1.9;
commitid	TnlogFl9nOv2eaRf;

1.9
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.8;
commitid	4ry2gvZGMXkCUD2n;

1.8
date	2015.01.25.14.41.20;	author jsg;	state Exp;
branches;
next	1.7;
commitid	mcxB0JvoI9gTDYXU;

1.7
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	WPD6rgPryPkvXOr9;

1.6
date	2013.09.05.14.04.12;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.13;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.30;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.18;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.46;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.11.20;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.48.27;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.10
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#ifndef I830CONTEXT_INC
#define I830CONTEXT_INC

#include "intel_context.h"

#define I830_FALLBACK_TEXTURE		 0x1000
#define I830_FALLBACK_COLORMASK		 0x2000
#define I830_FALLBACK_STENCIL		 0x4000
#define I830_FALLBACK_STIPPLE		 0x8000
#define I830_FALLBACK_LOGICOP		 0x20000
#define I830_FALLBACK_DRAW_OFFSET	 0x200000

#define I830_UPLOAD_CTX              0x1
#define I830_UPLOAD_BUFFERS          0x2
#define I830_UPLOAD_STIPPLE          0x4
#define I830_UPLOAD_INVARIENT        0x8
#define I830_UPLOAD_RASTER_RULES     0x10
#define I830_UPLOAD_TEX(i)           (0x10<<(i))
#define I830_UPLOAD_TEXBLEND(i)      (0x100<<(i))
#define I830_UPLOAD_TEX_ALL          (0x0f0)
#define I830_UPLOAD_TEXBLEND_ALL     (0xf00)

/* State structure offsets - these will probably disappear.
 */
#define I830_DESTREG_CBUFADDR0 0
#define I830_DESTREG_CBUFADDR1 1
#define I830_DESTREG_DBUFADDR0 2
#define I830_DESTREG_DBUFADDR1 3
#define I830_DESTREG_DV0 4
#define I830_DESTREG_DV1 5
#define I830_DESTREG_SENABLE 6
#define I830_DESTREG_SR0 7
#define I830_DESTREG_SR1 8
#define I830_DESTREG_SR2 9
#define I830_DESTREG_DRAWRECT0 10
#define I830_DESTREG_DRAWRECT1 11
#define I830_DESTREG_DRAWRECT2 12
#define I830_DESTREG_DRAWRECT3 13
#define I830_DESTREG_DRAWRECT4 14
#define I830_DESTREG_DRAWRECT5 15
#define I830_DEST_SETUP_SIZE 16

#define I830_CTXREG_STATE1		0
#define I830_CTXREG_STATE2		1
#define I830_CTXREG_STATE3		2
#define I830_CTXREG_STATE4		3
#define I830_CTXREG_STATE5		4
#define I830_CTXREG_IALPHAB		5
#define I830_CTXREG_STENCILTST		6
#define I830_CTXREG_ENABLES_1		7
#define I830_CTXREG_ENABLES_2		8
#define I830_CTXREG_AA			9
#define I830_CTXREG_FOGCOLOR		10
#define I830_CTXREG_BLENDCOLOR0		11
#define I830_CTXREG_BLENDCOLOR1		12
#define I830_CTXREG_VF			13
#define I830_CTXREG_VF2			14
#define I830_CTXREG_MCSB0		15
#define I830_CTXREG_MCSB1		16
#define I830_CTX_SETUP_SIZE		17

#define I830_STPREG_ST0        0
#define I830_STPREG_ST1        1
#define I830_STP_SETUP_SIZE    2

#define I830_TEXREG_TM0LI      0        /* load immediate 2 texture map n */
#define I830_TEXREG_TM0S1      1
#define I830_TEXREG_TM0S2      2
#define I830_TEXREG_TM0S3      3
#define I830_TEXREG_TM0S4      4
#define I830_TEXREG_MCS	       5        /* _3DSTATE_MAP_COORD_SETS */
#define I830_TEXREG_CUBE       6        /* _3DSTATE_MAP_SUBE */
#define I830_TEX_SETUP_SIZE    7

#define I830_TEXBLEND_SIZE	12      /* (4 args + op) * 2 + COLOR_FACTOR */

enum {
   I830_RASTER_RULES,
   I830_RASTER_RULES_SIZE
};

struct i830_texture_object
{
   struct intel_texture_object intel;
   GLuint Setup[I830_TEX_SETUP_SIZE];
};

#define I830_TEX_UNITS 4

struct i830_hw_state
{
   GLuint Ctx[I830_CTX_SETUP_SIZE];
   GLuint Buffer[I830_DEST_SETUP_SIZE];
   GLuint Stipple[I830_STP_SETUP_SIZE];
   GLuint RasterRules[I830_RASTER_RULES_SIZE];
   GLuint Tex[I830_TEX_UNITS][I830_TEX_SETUP_SIZE];
   GLuint TexBlend[I830_TEX_UNITS][I830_TEXBLEND_SIZE];
   GLuint TexBlendWordsUsed[I830_TEX_UNITS];

   struct intel_region *draw_region;
   struct intel_region *depth_region;

   /* Regions aren't actually that appropriate here as the memory may
    * be from a PBO or FBO.  Will have to do this for draw and depth for
    * FBO's...
    */
   drm_intel_bo *tex_buffer[I830_TEX_UNITS];
   GLuint tex_offset[I830_TEX_UNITS];

   GLuint emitted;              /* I810_UPLOAD_* */
   GLuint active;
};

struct i830_context
{
   struct intel_context intel;

   GLuint lodbias_tm0s3[MAX_TEXTURE_UNITS];
   GLbitfield64 last_index_bitset;

   struct i830_hw_state state;
};




#define I830_STATECHANGE(i830, flag)				\
do {								\
   INTEL_FIREVERTICES( &i830->intel );				\
   i830->state.emitted &= ~flag;					\
} while (0)

#define I830_ACTIVESTATE(i830, flag, mode)	\
do {						\
   INTEL_FIREVERTICES( &i830->intel );		\
   if (mode)					\
      i830->state.active |= flag;		\
   else						\
      i830->state.active &= ~flag;		\
} while (0)

/* i830_vtbl.c
 */
extern void i830InitVtbl(struct i830_context *i830);

extern void
i830_state_draw_region(struct intel_context *intel,
                       struct i830_hw_state *state,
                       struct intel_region *color_region,
                       struct intel_region *depth_region);
/* i830_context.c
 */
extern bool
i830CreateContext(int api,
                  const struct gl_config * mesaVis,
                  __DRIcontext * driContextPriv,
                  unsigned major_version,
                  unsigned minor_version,
                  uint32_t flags,
                  unsigned *error,
                  void *sharedContextPrivate);

/* i830_tex.c, i830_texstate.c
 */
extern void i830UpdateTextureState(struct intel_context *intel);

extern void i830InitTextureFuncs(struct dd_function_table *functions);

/* i830_texblend.c
 */
extern GLuint i830SetTexEnvCombine(struct i830_context *i830,
                                   const struct gl_tex_env_combine_state
                                   *combine, GLint blendUnit, GLuint texel_op,
                                   GLuint * state, const GLfloat * factor);

extern void i830EmitTextureBlend(struct i830_context *i830);


/* i830_state.c
 */
extern void i830InitStateFuncs(struct dd_function_table *functions);

extern void i830EmitState(struct i830_context *i830);

extern void i830InitState(struct i830_context *i830);
extern void i830_update_provoking_vertex(struct gl_context *ctx);

/*======================================================================
 * Inline conversion functions.  These are better-typed than the
 * macros used previously:
 */
static INLINE struct i830_context *
i830_context(struct gl_context * ctx)
{
   return (struct i830_context *) ctx;
}

#endif
@


1.9
log
@Merge Mesa 10.2.9
@
text
@@


1.8
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d58 4
a61 4
#define I830_DESTREG_SR0 6
#define I830_DESTREG_SR1 7
#define I830_DESTREG_SR2 8
#define I830_DESTREG_SENABLE 9
@


1.7
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d58 4
a61 4
#define I830_DESTREG_SENABLE 6
#define I830_DESTREG_SR0 7
#define I830_DESTREG_SR1 8
#define I830_DESTREG_SR2 9
@


1.6
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d186 1
@


1.5
log
@Merge Mesa 7.10.3
@
text
@d146 1
a146 1
     DECLARE_RENDERINPUTS(last_index_bitset);
d180 3
a182 2
extern GLboolean
i830CreateContext(const struct gl_config * mesaVis,
d184 3
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d134 1
a134 1
   dri_bo *tex_buffer[I830_TEX_UNITS];
d181 1
a181 1
i830CreateContext(const __GLcontextModes * mesaVis,
d208 1
a208 1
extern void i830_update_provoking_vertex(GLcontext *ctx);
d215 1
a215 1
i830_context(GLcontext * ctx)
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d37 2
a38 1
#define I830_FALLBACK_LOGICOP		 0x10000
d44 1
d104 5
d122 1
d148 1
a148 1
   struct i830_hw_state meta, initial, state, *current;
d182 1
a182 1
                  __DRIcontextPrivate * driContextPriv,
d208 1
a208 4

/* i830_metaops.c
 */
extern void i830InitMetaFuncs(struct i830_context *i830);
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d60 7
a66 1
#define I830_DEST_SETUP_SIZE 10
@


1.1
log
@Initial revision
@
text
@d52 9
a60 11
#define I830_DESTREG_CBUFADDR2 2
#define I830_DESTREG_DBUFADDR0 3
#define I830_DESTREG_DBUFADDR1 4
#define I830_DESTREG_DBUFADDR2 5
#define I830_DESTREG_DV0 6
#define I830_DESTREG_DV1 7
#define I830_DESTREG_SENABLE 8
#define I830_DESTREG_SR0 9
#define I830_DESTREG_SR1 10
#define I830_DESTREG_SR2 11
#define I830_DEST_SETUP_SIZE 12
d74 1
a74 1
#define I830_CTXREG_BLENDCOLOR1		12 
d85 8
a92 9
#define I830_TEXREG_TM0LI      0 /* load immediate 2 texture map n */
#define I830_TEXREG_TM0S0      1
#define I830_TEXREG_TM0S1      2
#define I830_TEXREG_TM0S2      3
#define I830_TEXREG_TM0S3      4
#define I830_TEXREG_TM0S4      5
#define I830_TEXREG_MCS	       6	/* _3DSTATE_MAP_COORD_SETS */
#define I830_TEXREG_CUBE       7	/* _3DSTATE_MAP_SUBE */
#define I830_TEX_SETUP_SIZE    8
d94 1
a94 1
#define I830_TEXBLEND_SIZE	12	/* (4 args + op) * 2 + COLOR_FACTOR */
d104 2
a105 1
struct i830_hw_state {
d112 12
a123 1
   GLuint emitted;		/* I810_UPLOAD_* */
d127 1
a127 1
struct i830_context 
d130 3
a132 2
   
   DECLARE_RENDERINPUTS(last_index_bitset);
a136 4
typedef struct i830_context *i830ContextPtr;
typedef struct i830_texture_object *i830TextureObjectPtr;

#define I830_CONTEXT(ctx)	((i830ContextPtr)(ctx))
d157 1
a157 2
extern void 
i830InitVtbl( i830ContextPtr i830 );
d159 5
d166 4
a169 4
extern GLboolean 
i830CreateContext( const __GLcontextModes *mesaVis,
		   __DRIcontextPrivate *driContextPriv,
		   void *sharedContextPrivate);
d173 1
a173 2
extern void 
i830UpdateTextureState( intelContextPtr intel );
d175 1
a175 5
extern void 
i830InitTextureFuncs( struct dd_function_table *functions );

extern intelTextureObjectPtr
i830AllocTexObj( struct gl_texture_object *tObj );
d179 4
a182 3
extern GLuint i830SetTexEnvCombine(i830ContextPtr i830,
    const struct gl_tex_env_combine_state * combine, GLint blendUnit,
     GLuint texel_op, GLuint *state, const GLfloat *factor );
d184 1
a184 2
extern void 
i830EmitTextureBlend( i830ContextPtr i830 );
d189 1
a189 2
extern void 
i830InitStateFuncs( struct dd_function_table *functions );
d191 1
a191 2
extern void 
i830EmitState( i830ContextPtr i830 );
d193 1
a193 2
extern void 
i830InitState( i830ContextPtr i830 );
d197 1
a197 6
extern GLboolean
i830TryTextureReadPixels( GLcontext *ctx,
			  GLint x, GLint y, GLsizei width, GLsizei height,
			  GLenum format, GLenum type,
			  const struct gl_pixelstore_attrib *pack,
			  GLvoid *pixels );
d199 9
a207 14
extern GLboolean
i830TryTextureDrawPixels( GLcontext *ctx,
			  GLint x, GLint y, GLsizei width, GLsizei height,
			  GLenum format, GLenum type,
			  const struct gl_pixelstore_attrib *unpack,
			  const GLvoid *pixels );

extern void 
i830ClearWithTris( intelContextPtr intel, GLbitfield mask,
		   GLboolean all, GLint cx, GLint cy, GLint cw, GLint ch);

extern void
i830RotateWindow(intelContextPtr intel, __DRIdrawablePrivate *dPriv,
                 GLuint srcBuf);
a209 1

@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d37 1
a37 2
#define I830_FALLBACK_LOGICOP		 0x20000
#define I830_FALLBACK_DRAW_OFFSET	 0x200000
a42 1
#define I830_UPLOAD_RASTER_RULES     0x10
d52 11
a62 15
#define I830_DESTREG_DBUFADDR0 2
#define I830_DESTREG_DBUFADDR1 3
#define I830_DESTREG_DV0 4
#define I830_DESTREG_DV1 5
#define I830_DESTREG_SENABLE 6
#define I830_DESTREG_SR0 7
#define I830_DESTREG_SR1 8
#define I830_DESTREG_SR2 9
#define I830_DESTREG_DRAWRECT0 10
#define I830_DESTREG_DRAWRECT1 11
#define I830_DESTREG_DRAWRECT2 12
#define I830_DESTREG_DRAWRECT3 13
#define I830_DESTREG_DRAWRECT4 14
#define I830_DESTREG_DRAWRECT5 15
#define I830_DEST_SETUP_SIZE 16
d76 1
a76 1
#define I830_CTXREG_BLENDCOLOR1		12
d87 11
a97 15
#define I830_TEXREG_TM0LI      0        /* load immediate 2 texture map n */
#define I830_TEXREG_TM0S1      1
#define I830_TEXREG_TM0S2      2
#define I830_TEXREG_TM0S3      3
#define I830_TEXREG_TM0S4      4
#define I830_TEXREG_MCS	       5        /* _3DSTATE_MAP_COORD_SETS */
#define I830_TEXREG_CUBE       6        /* _3DSTATE_MAP_SUBE */
#define I830_TEX_SETUP_SIZE    7

#define I830_TEXBLEND_SIZE	12      /* (4 args + op) * 2 + COLOR_FACTOR */

enum {
   I830_RASTER_RULES,
   I830_RASTER_RULES_SIZE
};
d107 1
a107 2
struct i830_hw_state
{
a110 1
   GLuint RasterRules[I830_RASTER_RULES_SIZE];
d114 1
a114 12

   struct intel_region *draw_region;
   struct intel_region *depth_region;

   /* Regions aren't actually that appropriate here as the memory may
    * be from a PBO or FBO.  Will have to do this for draw and depth for
    * FBO's...
    */
   drm_intel_bo *tex_buffer[I830_TEX_UNITS];
   GLuint tex_offset[I830_TEX_UNITS];

   GLuint emitted;              /* I810_UPLOAD_* */
d118 1
a118 1
struct i830_context
d121 2
d124 2
a125 2
   GLuint lodbias_tm0s3[MAX_TEXTURE_UNITS];
     DECLARE_RENDERINPUTS(last_index_bitset);
d127 2
a128 2
   struct i830_hw_state state;
};
d130 1
d151 2
a152 1
extern void i830InitVtbl(struct i830_context *i830);
a153 5
extern void
i830_state_draw_region(struct intel_context *intel,
                       struct i830_hw_state *state,
                       struct intel_region *color_region,
                       struct intel_region *depth_region);
d156 4
a159 4
extern GLboolean
i830CreateContext(const struct gl_config * mesaVis,
                  __DRIcontext * driContextPriv,
                  void *sharedContextPrivate);
d163 5
a167 1
extern void i830UpdateTextureState(struct intel_context *intel);
d169 2
a170 1
extern void i830InitTextureFuncs(struct dd_function_table *functions);
d174 3
a176 4
extern GLuint i830SetTexEnvCombine(struct i830_context *i830,
                                   const struct gl_tex_env_combine_state
                                   *combine, GLint blendUnit, GLuint texel_op,
                                   GLuint * state, const GLfloat * factor);
d178 2
a179 1
extern void i830EmitTextureBlend(struct i830_context *i830);
d184 2
a185 1
extern void i830InitStateFuncs(struct dd_function_table *functions);
d187 2
a188 1
extern void i830EmitState(struct i830_context *i830);
d190 2
a191 2
extern void i830InitState(struct i830_context *i830);
extern void i830_update_provoking_vertex(struct gl_context *ctx);
d193 1
a193 3
/*======================================================================
 * Inline conversion functions.  These are better-typed than the
 * macros used previously:
d195 21
a215 5
static INLINE struct i830_context *
i830_context(struct gl_context * ctx)
{
   return (struct i830_context *) ctx;
}
d218 1
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d146 1
a146 1
   GLbitfield64 last_index_bitset;
d180 2
a181 3
extern bool
i830CreateContext(int api,
                  const struct gl_config * mesaVis,
a182 3
                  unsigned major_version,
                  unsigned minor_version,
                  unsigned *error,
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
a185 1
                  uint32_t flags,
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d58 4
a61 4
#define I830_DESTREG_SR0 6
#define I830_DESTREG_SR1 7
#define I830_DESTREG_SR2 8
#define I830_DESTREG_SENABLE 9
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d58 4
a61 4
#define I830_DESTREG_SENABLE 6
#define I830_DESTREG_SR0 7
#define I830_DESTREG_SR1 8
#define I830_DESTREG_SR2 9
@


