head	1.6;
access;
symbols
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.09.05.14.05.01;	author jsg;	state dead;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.23;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.40;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.17;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.17.29.23;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.29.23;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.40;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge Mesa 9.2.0
@
text
@/*
Copyright (C) The Weather Channel, Inc.  2002.  All Rights Reserved.

The Weather Channel (TM) funded Tungsten Graphics to develop the
initial release of the Radeon 8500 driver under the XFree86 license.
This notice must be preserved.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

/**
 * \file
 *
 * \author Keith Whitwell <keith@@tungstengraphics.com>
 * \author Maciej Cencora <m.cencora@@gmail.com>
 */

#include "main/glheader.h"
#include "main/mtypes.h"
#include "main/colormac.h"
#include "main/imports.h"
#include "main/macros.h"

#include "swrast_setup/swrast_setup.h"
#include "tnl/tnl.h"
#include "tnl/t_context.h"

#include "r300_context.h"
#include "r300_emit.h"


GLuint r300VAPInputCntl0(struct gl_context * ctx, GLuint InputsRead)
{
	/* No idea what this value means. I have seen other values written to
	 * this register... */
	return 0x5555;
}

GLuint r300VAPInputCntl1(struct gl_context * ctx, GLuint InputsRead)
{
	GLuint i, vic_1 = 0;

	if (InputsRead & (1 << VERT_ATTRIB_POS))
		vic_1 |= R300_INPUT_CNTL_POS;

	if (InputsRead & (1 << VERT_ATTRIB_NORMAL))
		vic_1 |= R300_INPUT_CNTL_NORMAL;

	if (InputsRead & (1 << VERT_ATTRIB_COLOR0))
		vic_1 |= R300_INPUT_CNTL_COLOR;

	for (i = 0; i < ctx->Const.MaxTextureUnits; i++)
		if (InputsRead & (1 << (VERT_ATTRIB_TEX0 + i))) {
			vic_1 |= R300_INPUT_CNTL_TC0 << i;
		}

	return vic_1;
}

GLuint r300VAPOutputCntl0(struct gl_context * ctx, GLuint vp_writes)
{
	GLuint ret = 0;

	if (vp_writes & (1 << VERT_RESULT_HPOS))
		ret |= R300_VAP_OUTPUT_VTX_FMT_0__POS_PRESENT;

	if (vp_writes & (1 << VERT_RESULT_COL0))
		ret |= R300_VAP_OUTPUT_VTX_FMT_0__COLOR_0_PRESENT;

	if (vp_writes & (1 << VERT_RESULT_COL1))
		ret |= R300_VAP_OUTPUT_VTX_FMT_0__COLOR_1_PRESENT;

	/* Two sided lighting works only if all 4 colors are written */
	if (vp_writes & (1 << VERT_RESULT_BFC0) || vp_writes & (1 << VERT_RESULT_BFC1))
		ret |= R300_VAP_OUTPUT_VTX_FMT_0__COLOR_0_PRESENT | R300_VAP_OUTPUT_VTX_FMT_0__COLOR_1_PRESENT |
			   R300_VAP_OUTPUT_VTX_FMT_0__COLOR_2_PRESENT | R300_VAP_OUTPUT_VTX_FMT_0__COLOR_3_PRESENT;

	if (vp_writes & (1 << VERT_RESULT_PSIZ))
		ret |= R300_VAP_OUTPUT_VTX_FMT_0__PT_SIZE_PRESENT;

	return ret;
}

GLuint r300VAPOutputCntl1(struct gl_context * ctx, GLuint vp_writes)
{
	GLuint i, ret = 0, first_free_texcoord = 0;

	for (i = 0; i < ctx->Const.MaxTextureUnits; i++) {
		if (vp_writes & (1 << (VERT_RESULT_TEX0 + i))) {
			ret |= (4 << (3 * first_free_texcoord));
			++first_free_texcoord;
		}
	}

	if (first_free_texcoord > 8) {
		fprintf(stderr, "\tout of free texcoords\n");
		exit(-1);
	}

	return ret;
}

void r300EmitCacheFlush(r300ContextPtr rmesa)
{
	BATCH_LOCALS(&rmesa->radeon);

	BEGIN_BATCH_NO_AUTOSTATE(4);
	OUT_BATCH_REGVAL(R300_RB3D_DSTCACHE_CTLSTAT,
		R300_RB3D_DSTCACHE_CTLSTAT_DC_FREE_FREE_3D_TAGS |
		R300_RB3D_DSTCACHE_CTLSTAT_DC_FLUSH_FLUSH_DIRTY_3D);
	OUT_BATCH_REGVAL(R300_ZB_ZCACHE_CTLSTAT,
		R300_ZB_ZCACHE_CTLSTAT_ZC_FLUSH_FLUSH_AND_FREE |
		R300_ZB_ZCACHE_CTLSTAT_ZC_FREE_FREE);
	END_BATCH();
	COMMIT_BATCH();
}
@


1.5
log
@Merge Mesa 7.10.3
@
text
@@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d51 1
a51 1
GLuint r300VAPInputCntl0(GLcontext * ctx, GLuint InputsRead)
d58 1
a58 1
GLuint r300VAPInputCntl1(GLcontext * ctx, GLuint InputsRead)
d79 1
a79 1
GLuint r300VAPOutputCntl0(GLcontext * ctx, GLuint vp_writes)
d103 1
a103 1
GLuint r300VAPOutputCntl1(GLcontext * ctx, GLuint vp_writes)
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d34 1
a41 1
#include "main/image.h"
a43 1
#include "math/m_translate.h"
a47 2
#include "radeon_ioctl.h"
#include "r300_state.h"
a48 1
#include "r300_ioctl.h"
a49 211
#ifdef USER_BUFFERS
#include "r300_mem.h"
#endif

#if SWIZZLE_X != R300_INPUT_ROUTE_SELECT_X || \
    SWIZZLE_Y != R300_INPUT_ROUTE_SELECT_Y || \
    SWIZZLE_Z != R300_INPUT_ROUTE_SELECT_Z || \
    SWIZZLE_W != R300_INPUT_ROUTE_SELECT_W || \
    SWIZZLE_ZERO != R300_INPUT_ROUTE_SELECT_ZERO || \
    SWIZZLE_ONE != R300_INPUT_ROUTE_SELECT_ONE
#error Cannot change these!
#endif

#define DEBUG_ALL DEBUG_VERTS

#if defined(USE_X86_ASM)
#define COPY_DWORDS( dst, src, nr )					\
do {									\
	int __tmp;							\
	__asm__ __volatile__( "rep ; movsl"				\
			      : "=%c" (__tmp), "=D" (dst), "=S" (__tmp)	\
			      : "0" (nr),				\
			        "D" ((long)dst),			\
			        "S" ((long)src) );			\
} while (0)
#else
#define COPY_DWORDS( dst, src, nr )		\
do {						\
   int j;					\
   for ( j = 0 ; j < nr ; j++ )			\
      dst[j] = ((int *)src)[j];			\
   dst += nr;					\
} while (0)
#endif

static void r300EmitVec4(GLcontext * ctx, struct r300_dma_region *rvb,
			 GLvoid * data, int stride, int count)
{
	int i;
	int *out = (int *)(rvb->address + rvb->start);

	if (RADEON_DEBUG & DEBUG_VERTS)
		fprintf(stderr, "%s count %d stride %d out %p data %p\n",
			__FUNCTION__, count, stride, (void *)out, (void *)data);

	if (stride == 4)
		COPY_DWORDS(out, data, count);
	else
		for (i = 0; i < count; i++) {
			out[0] = *(int *)data;
			out++;
			data += stride;
		}
}

static void r300EmitVec8(GLcontext * ctx, struct r300_dma_region *rvb,
			 GLvoid * data, int stride, int count)
{
	int i;
	int *out = (int *)(rvb->address + rvb->start);

	if (RADEON_DEBUG & DEBUG_VERTS)
		fprintf(stderr, "%s count %d stride %d out %p data %p\n",
			__FUNCTION__, count, stride, (void *)out, (void *)data);

	if (stride == 8)
		COPY_DWORDS(out, data, count * 2);
	else
		for (i = 0; i < count; i++) {
			out[0] = *(int *)data;
			out[1] = *(int *)(data + 4);
			out += 2;
			data += stride;
		}
}

static void r300EmitVec12(GLcontext * ctx, struct r300_dma_region *rvb,
			  GLvoid * data, int stride, int count)
{
	int i;
	int *out = (int *)(rvb->address + rvb->start);

	if (RADEON_DEBUG & DEBUG_VERTS)
		fprintf(stderr, "%s count %d stride %d out %p data %p\n",
			__FUNCTION__, count, stride, (void *)out, (void *)data);

	if (stride == 12)
		COPY_DWORDS(out, data, count * 3);
	else
		for (i = 0; i < count; i++) {
			out[0] = *(int *)data;
			out[1] = *(int *)(data + 4);
			out[2] = *(int *)(data + 8);
			out += 3;
			data += stride;
		}
}

static void r300EmitVec16(GLcontext * ctx, struct r300_dma_region *rvb,
			  GLvoid * data, int stride, int count)
{
	int i;
	int *out = (int *)(rvb->address + rvb->start);

	if (RADEON_DEBUG & DEBUG_VERTS)
		fprintf(stderr, "%s count %d stride %d out %p data %p\n",
			__FUNCTION__, count, stride, (void *)out, (void *)data);

	if (stride == 16)
		COPY_DWORDS(out, data, count * 4);
	else
		for (i = 0; i < count; i++) {
			out[0] = *(int *)data;
			out[1] = *(int *)(data + 4);
			out[2] = *(int *)(data + 8);
			out[3] = *(int *)(data + 12);
			out += 4;
			data += stride;
		}
}

static void r300EmitVec(GLcontext * ctx, struct r300_dma_region *rvb,
			GLvoid * data, int size, int stride, int count)
{
	r300ContextPtr rmesa = R300_CONTEXT(ctx);

	if (stride == 0) {
		r300AllocDmaRegion(rmesa, rvb, size * 4, 4);
		count = 1;
		rvb->aos_offset = GET_START(rvb);
		rvb->aos_stride = 0;
	} else {
		r300AllocDmaRegion(rmesa, rvb, size * count * 4, 4);
		rvb->aos_offset = GET_START(rvb);
		rvb->aos_stride = size;
	}

	switch (size) {
	case 1:
		r300EmitVec4(ctx, rvb, data, stride, count);
		break;
	case 2:
		r300EmitVec8(ctx, rvb, data, stride, count);
		break;
	case 3:
		r300EmitVec12(ctx, rvb, data, stride, count);
		break;
	case 4:
		r300EmitVec16(ctx, rvb, data, stride, count);
		break;
	default:
		assert(0);
		break;
	}
}

#define DW_SIZE(x) ((inputs[tab[(x)]] << R300_DST_VEC_LOC_SHIFT) |	\
		    (attribptr[tab[(x)]]->size - 1) << R300_DATA_TYPE_0_SHIFT)

GLuint r300VAPInputRoute0(uint32_t * dst, GLvector4f ** attribptr,
				 int *inputs, GLint * tab, GLuint nr)
{
	GLuint i, dw;

	/* type, inputs, stop bit, size */
	for (i = 0; i < nr; i += 2) {
		/* make sure input is valid, would lockup the gpu */
		assert(inputs[tab[i]] != -1);
		dw = (R300_SIGNED | DW_SIZE(i));
		if (i + 1 == nr) {
			dw |= R300_LAST_VEC << R300_DATA_TYPE_0_SHIFT;
		} else {
			assert(inputs[tab[i + 1]] != -1);
			dw |= (R300_SIGNED |
			       DW_SIZE(i + 1)) << R300_DATA_TYPE_1_SHIFT;
			if (i + 2 == nr) {
				dw |= R300_LAST_VEC << R300_DATA_TYPE_1_SHIFT;
			}
		}
		dst[i >> 1] = dw;
	}

	return (nr + 1) >> 1;
}

static GLuint r300VAPInputRoute1Swizzle(int swizzle[4])
{
	return (swizzle[0] << R300_SWIZZLE_SELECT_X_SHIFT) |
	    (swizzle[1] << R300_SWIZZLE_SELECT_Y_SHIFT) |
	    (swizzle[2] << R300_SWIZZLE_SELECT_Z_SHIFT) |
	    (swizzle[3] << R300_SWIZZLE_SELECT_W_SHIFT);
}

GLuint r300VAPInputRoute1(uint32_t * dst, int swizzle[][4], GLuint nr)
{
	GLuint i, dw;

	for (i = 0; i < nr; i += 2) {
		dw = (r300VAPInputRoute1Swizzle(swizzle[i]) |
		      ((R300_WRITE_ENA_X | R300_WRITE_ENA_Y |
			R300_WRITE_ENA_Z | R300_WRITE_ENA_W) << R300_WRITE_ENA_SHIFT)) << R300_SWIZZLE0_SHIFT;
		if (i + 1 < nr) {
			dw |= (r300VAPInputRoute1Swizzle(swizzle[i + 1]) |
			       ((R300_WRITE_ENA_X | R300_WRITE_ENA_Y |
				 R300_WRITE_ENA_Z | R300_WRITE_ENA_W) << R300_WRITE_ENA_SHIFT)) << R300_SWIZZLE1_SHIFT;
		}
		dst[i >> 1] = dw;
	}

	return (nr + 1) >> 1;
}
a59 1
	r300ContextPtr rmesa = R300_CONTEXT(ctx);
a70 1
	rmesa->state.texture.tc_count = 0;
a72 1
			rmesa->state.texture.tc_count++;
d79 1
a79 1
GLuint r300VAPOutputCntl0(GLcontext * ctx, GLuint OutputsWritten)
d83 1
a83 1
	if (OutputsWritten & (1 << VERT_RESULT_HPOS))
d86 1
a86 1
	if (OutputsWritten & (1 << VERT_RESULT_COL0))
d89 1
a89 1
	if (OutputsWritten & (1 << VERT_RESULT_COL1))
d92 4
a95 10
	if (OutputsWritten & (1 << VERT_RESULT_BFC0)
	    || OutputsWritten & (1 << VERT_RESULT_BFC1))
		ret |=
		    R300_VAP_OUTPUT_VTX_FMT_0__COLOR_1_PRESENT |
		    R300_VAP_OUTPUT_VTX_FMT_0__COLOR_2_PRESENT |
		    R300_VAP_OUTPUT_VTX_FMT_0__COLOR_3_PRESENT;

#if 0
	if (OutputsWritten & (1 << VERT_RESULT_FOGC)) ;
#endif
d97 1
a97 1
	if (OutputsWritten & (1 << VERT_RESULT_PSIZ))
d103 1
a103 1
GLuint r300VAPOutputCntl1(GLcontext * ctx, GLuint OutputsWritten)
d105 1
a105 1
	GLuint i, ret = 0;
d108 3
a110 96
		if (OutputsWritten & (1 << (VERT_RESULT_TEX0 + i))) {
			ret |= (4 << (3 * i));
		}
	}

	return ret;
}

/* Emit vertex data to GART memory
 * Route inputs to the vertex processor
 * This function should never return R300_FALLBACK_TCL when using software tcl.
 */
int r300EmitArrays(GLcontext * ctx)
{
	r300ContextPtr rmesa = R300_CONTEXT(ctx);
	TNLcontext *tnl = TNL_CONTEXT(ctx);
	struct vertex_buffer *vb = &tnl->vb;
	GLuint nr;
	GLuint count = vb->Count;
	GLuint i;
	GLuint InputsRead = 0, OutputsWritten = 0;
	int *inputs = NULL;
	int vir_inputs[VERT_ATTRIB_MAX];
	GLint tab[VERT_ATTRIB_MAX];
	int swizzle[VERT_ATTRIB_MAX][4];
	struct r300_vertex_program *prog =
	    (struct r300_vertex_program *)CURRENT_VERTEX_SHADER(ctx);

	if (hw_tcl_on) {
		inputs = prog->inputs;
		InputsRead = prog->key.InputsRead;
		OutputsWritten = prog->key.OutputsWritten;
	} else {
		inputs = rmesa->state.sw_tcl_inputs;

		DECLARE_RENDERINPUTS(render_inputs_bitset);
		RENDERINPUTS_COPY(render_inputs_bitset, tnl->render_inputs_bitset);

		vb->AttribPtr[VERT_ATTRIB_POS] = vb->ClipPtr;

		assert(RENDERINPUTS_TEST(render_inputs_bitset, _TNL_ATTRIB_POS));
		assert(RENDERINPUTS_TEST(render_inputs_bitset, _TNL_ATTRIB_NORMAL) == 0);
		//assert(RENDERINPUTS_TEST(render_inputs_bitset, _TNL_ATTRIB_COLOR0));

		if (RENDERINPUTS_TEST(render_inputs_bitset, _TNL_ATTRIB_POS)) {
			InputsRead |= 1 << VERT_ATTRIB_POS;
			OutputsWritten |= 1 << VERT_RESULT_HPOS;
		}

		if (RENDERINPUTS_TEST(render_inputs_bitset, _TNL_ATTRIB_COLOR0)) {
			InputsRead |= 1 << VERT_ATTRIB_COLOR0;
			OutputsWritten |= 1 << VERT_RESULT_COL0;
		}

		if (RENDERINPUTS_TEST(render_inputs_bitset, _TNL_ATTRIB_COLOR1)) {
			InputsRead |= 1 << VERT_ATTRIB_COLOR1;
			OutputsWritten |= 1 << VERT_RESULT_COL1;
		}

		for (i = 0; i < ctx->Const.MaxTextureUnits; i++) {
			if (RENDERINPUTS_TEST(render_inputs_bitset, _TNL_ATTRIB_TEX(i))) {
				InputsRead |= 1 << (VERT_ATTRIB_TEX0 + i);
				OutputsWritten |= 1 << (VERT_RESULT_TEX0 + i);
			}
		}

		for (i = 0, nr = 0; i < VERT_ATTRIB_MAX; i++) {
			if (InputsRead & (1 << i)) {
				inputs[i] = nr++;
			} else {
				inputs[i] = -1;
			}
		}

		/* Fixed, apply to vir0 only */
		memcpy(vir_inputs, inputs, VERT_ATTRIB_MAX * sizeof(int));
		inputs = vir_inputs;
		if (InputsRead & VERT_ATTRIB_POS)
			inputs[VERT_ATTRIB_POS] = 0;
		if (InputsRead & (1 << VERT_ATTRIB_COLOR0))
			inputs[VERT_ATTRIB_COLOR0] = 2;
		if (InputsRead & (1 << VERT_ATTRIB_COLOR1))
			inputs[VERT_ATTRIB_COLOR1] = 3;
		for (i = VERT_ATTRIB_TEX0; i <= VERT_ATTRIB_TEX7; i++)
			if (InputsRead & (1 << i))
				inputs[i] = 6 + (i - VERT_ATTRIB_TEX0);

		RENDERINPUTS_COPY(rmesa->state.render_inputs_bitset, render_inputs_bitset);
	}

	assert(InputsRead);
	assert(OutputsWritten);

	for (i = 0, nr = 0; i < VERT_ATTRIB_MAX; i++) {
		if (InputsRead & (1 << i)) {
			tab[nr++] = i;
d114 3
a116 2
	if (nr > R300_MAX_AOS_ARRAYS) {
		return R300_FALLBACK_TCL;
d119 1
a119 108
	for (i = 0; i < nr; i++) {
		int ci, fix, found = 0;

		swizzle[i][0] = SWIZZLE_ZERO;
		swizzle[i][1] = SWIZZLE_ZERO;
		swizzle[i][2] = SWIZZLE_ZERO;
		swizzle[i][3] = SWIZZLE_ONE;

		for (ci = 0; ci < vb->AttribPtr[tab[i]]->size; ci++) {
			swizzle[i][ci] = ci;
		}

		if (r300IsGartMemory(rmesa, vb->AttribPtr[tab[i]]->data, 4)) {
			if (vb->AttribPtr[tab[i]]->stride % 4) {
				return R300_FALLBACK_TCL;
			}
			rmesa->state.aos[i].address = (void *)(vb->AttribPtr[tab[i]]->data);
			rmesa->state.aos[i].start = 0;
			rmesa->state.aos[i].aos_offset = r300GartOffsetFromVirtual(rmesa, vb->AttribPtr[tab[i]]->data);
			rmesa->state.aos[i].aos_stride = vb->AttribPtr[tab[i]]->stride / 4;
			rmesa->state.aos[i].aos_size = vb->AttribPtr[tab[i]]->size;
		} else {
			r300EmitVec(ctx, &rmesa->state.aos[i],
				    vb->AttribPtr[tab[i]]->data,
				    vb->AttribPtr[tab[i]]->size,
				    vb->AttribPtr[tab[i]]->stride, count);
		}

		rmesa->state.aos[i].aos_size = vb->AttribPtr[tab[i]]->size;

		for (fix = 0; fix <= 4 - vb->AttribPtr[tab[i]]->size; fix++) {
			if ((rmesa->state.aos[i].aos_offset - _mesa_sizeof_type(GL_FLOAT) * fix) % 4) {
				continue;
			}
			found = 1;
			break;
		}

		if (found) {
			if (fix > 0) {
				WARN_ONCE("Feeling lucky?\n");
			}
			rmesa->state.aos[i].aos_offset -= _mesa_sizeof_type(GL_FLOAT) * fix;
			for (ci = 0; ci < vb->AttribPtr[tab[i]]->size; ci++) {
				swizzle[i][ci] += fix;
			}
		} else {
			WARN_ONCE
			    ("Cannot handle offset %x with stride %d, comp %d\n",
			     rmesa->state.aos[i].aos_offset,
			     rmesa->state.aos[i].aos_stride,
			     vb->AttribPtr[tab[i]]->size);
			return R300_FALLBACK_TCL;
		}
	}

	/* Setup INPUT_ROUTE. */
	R300_STATECHANGE(rmesa, vir[0]);
	((drm_r300_cmd_header_t *) rmesa->hw.vir[0].cmd)->packet0.count =
	    r300VAPInputRoute0(&rmesa->hw.vir[0].cmd[R300_VIR_CNTL_0],
			       vb->AttribPtr, inputs, tab, nr);
	R300_STATECHANGE(rmesa, vir[1]);
	((drm_r300_cmd_header_t *) rmesa->hw.vir[1].cmd)->packet0.count =
	    r300VAPInputRoute1(&rmesa->hw.vir[1].cmd[R300_VIR_CNTL_0], swizzle,
			       nr);

	/* Setup INPUT_CNTL. */
	R300_STATECHANGE(rmesa, vic);
	rmesa->hw.vic.cmd[R300_VIC_CNTL_0] = r300VAPInputCntl0(ctx, InputsRead);
	rmesa->hw.vic.cmd[R300_VIC_CNTL_1] = r300VAPInputCntl1(ctx, InputsRead);

	/* Setup OUTPUT_VTX_FMT. */
	R300_STATECHANGE(rmesa, vof);
	rmesa->hw.vof.cmd[R300_VOF_CNTL_0] =
	    r300VAPOutputCntl0(ctx, OutputsWritten);
	rmesa->hw.vof.cmd[R300_VOF_CNTL_1] =
	    r300VAPOutputCntl1(ctx, OutputsWritten);

	rmesa->state.aos_count = nr;

	return R300_FALLBACK_NONE;
}

#ifdef USER_BUFFERS
void r300UseArrays(GLcontext * ctx)
{
	r300ContextPtr rmesa = R300_CONTEXT(ctx);
	int i;

	if (rmesa->state.elt_dma.buf)
		r300_mem_use(rmesa, rmesa->state.elt_dma.buf->id);

	for (i = 0; i < rmesa->state.aos_count; i++) {
		if (rmesa->state.aos[i].buf)
			r300_mem_use(rmesa, rmesa->state.aos[i].buf->id);
	}
}
#endif

void r300ReleaseArrays(GLcontext * ctx)
{
	r300ContextPtr rmesa = R300_CONTEXT(ctx);
	int i;

	r300ReleaseDmaRegion(rmesa, &rmesa->state.elt_dma, __FUNCTION__);
	for (i = 0; i < rmesa->state.aos_count; i++) {
		r300ReleaseDmaRegion(rmesa, &rmesa->state.aos[i], __FUNCTION__);
	}
d124 1
a124 4
	int cmd_reserved = 0;
	int cmd_written = 0;

	drm_radeon_cmd_header_t *cmd = NULL;
d126 9
a134 7
	reg_start(R300_RB3D_DSTCACHE_CTLSTAT, 0);
	e32(R300_RB3D_DSTCACHE_CTLSTAT_DC_FREE_FREE_3D_TAGS |
	    R300_RB3D_DSTCACHE_CTLSTAT_DC_FLUSH_FLUSH_DIRTY_3D);

	reg_start(R300_ZB_ZCACHE_CTLSTAT, 0);
	e32(R300_ZB_ZCACHE_CTLSTAT_ZC_FLUSH_FLUSH_AND_FREE |
	    R300_ZB_ZCACHE_CTLSTAT_ZC_FREE_FREE);
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d36 6
a41 6
#include "glheader.h"
#include "mtypes.h"
#include "colormac.h"
#include "imports.h"
#include "macros.h"
#include "image.h"
@


1.1
log
@Initial revision
@
text
@d89 1
a89 2
static void r300EmitVec4(GLcontext * ctx,
			 struct r300_dma_region *rvb,
d96 2
a97 2
		fprintf(stderr, "%s count %d stride %d\n",
			__FUNCTION__, count, stride);
d109 1
a109 2
static void r300EmitVec8(GLcontext * ctx,
			 struct r300_dma_region *rvb,
d116 2
a117 2
		fprintf(stderr, "%s count %d stride %d\n",
			__FUNCTION__, count, stride);
d130 1
a130 2
static void r300EmitVec12(GLcontext * ctx,
			  struct r300_dma_region *rvb,
d152 1
a152 2
static void r300EmitVec16(GLcontext * ctx,
			  struct r300_dma_region *rvb,
d159 2
a160 2
		fprintf(stderr, "%s count %d stride %d\n",
			__FUNCTION__, count, stride);
d175 1
a175 2
static void r300EmitVec(GLcontext * ctx,
			struct r300_dma_region *rvb,
a179 7
	if (RADEON_DEBUG & DEBUG_VERTS)
		fprintf(stderr, "%s count %d size %d stride %d\n",
			__FUNCTION__, count, size, stride);

	/* Gets triggered when playing with future_hw_tcl_on ... */
	//assert(!rvb->buf);

d186 1
a186 1
		r300AllocDmaRegion(rmesa, rvb, size * count * 4, 4);	/* alignment? */
a190 2
	/* Emit the data
	 */
a205 1
		_mesa_exit(-1);
a207 1

d210 2
a211 13
static GLuint t_type(struct dt *dt)
{
	switch (dt->type) {
	case GL_UNSIGNED_BYTE:
		return AOS_FORMAT_UBYTE;
	case GL_SHORT:
		return AOS_FORMAT_USHORT;
	case GL_FLOAT:
		return AOS_FORMAT_FLOAT;
	default:
		assert(0);
		break;
	}
d213 2
a214 39
	return AOS_FORMAT_FLOAT;
}

static GLuint t_vir0_size(struct dt *dt)
{
	switch (dt->type) {
	case GL_UNSIGNED_BYTE:
		return 4;
	case GL_SHORT:
		return 7;
	case GL_FLOAT:
		return dt->size - 1;
	default:
		assert(0);
		break;
	}

	return 0;
}

static GLuint t_aos_size(struct dt *dt)
{
	switch (dt->type) {
	case GL_UNSIGNED_BYTE:
		return 1;
	case GL_SHORT:
		return 2;
	case GL_FLOAT:
		return dt->size;
	default:
		assert(0);
		break;
	}

	return 0;
}

static GLuint t_vir0(uint32_t * dst, struct dt *dt, int *inputs,
		     GLint * tab, GLuint nr)
d218 14
a231 10
	for (i = 0; i + 1 < nr; i += 2) {
		dw = t_vir0_size(&dt[tab[i]]) | (inputs[tab[i]] << 8) |
		    (t_type(&dt[tab[i]]) << 14);
		dw |=
		    (t_vir0_size(&dt[tab[i + 1]]) |
		     (inputs[tab[i + 1]] << 8) | (t_type(&dt[tab[i + 1]])
						  << 14)) << 16;

		if (i + 2 == nr) {
			dw |= (1 << (13 + 16));
a235 9
	if (nr & 1) {
		dw = t_vir0_size(&dt[tab[nr - 1]]) | (inputs[tab[nr - 1]]
						      << 8) |
		    (t_type(&dt[tab[nr - 1]]) << 14);
		dw |= 1 << 13;

		dst[nr >> 1] = dw;
	}

d239 1
a239 1
static GLuint t_swizzle(int swizzle[4])
d241 4
a244 4
	return (swizzle[0] << R300_INPUT_ROUTE_X_SHIFT) |
	    (swizzle[1] << R300_INPUT_ROUTE_Y_SHIFT) |
	    (swizzle[2] << R300_INPUT_ROUTE_Z_SHIFT) |
	    (swizzle[3] << R300_INPUT_ROUTE_W_SHIFT);
d247 1
a247 1
static GLuint t_vir1(uint32_t * dst, int swizzle[][4], GLuint nr)
d249 1
a249 1
	GLuint i;
d251 10
a260 5
	for (i = 0; i + 1 < nr; i += 2) {
		dst[i >> 1] = t_swizzle(swizzle[i]) | R300_INPUT_ROUTE_ENABLE;
		dst[i >> 1] |=
		    (t_swizzle(swizzle[i + 1]) | R300_INPUT_ROUTE_ENABLE)
		    << 16;
a262 4
	if (nr & 1)
		dst[nr >> 1] =
		    t_swizzle(swizzle[nr - 1]) | R300_INPUT_ROUTE_ENABLE;

d266 1
a266 1
static GLuint t_emit_size(struct dt *dt)
d268 3
a270 1
	return dt->size;
d273 1
a273 1
static GLuint t_vic(GLcontext * ctx, GLuint InputsRead)
d275 1
a275 1
	r300ContextPtr r300 = R300_CONTEXT(ctx);
d287 1
a287 1
	r300->state.texture.tc_count = 0;
d290 1
a290 1
			r300->state.texture.tc_count++;
d297 43
a343 1

d347 2
a348 2
	r300ContextPtr r300 = rmesa;
	struct radeon_vertex_buffer *VB = &rmesa->state.VB;
d350 1
a350 1
	GLuint count = VB->Count;
d357 2
a360 3
		struct r300_vertex_program *prog =
		    (struct r300_vertex_program *)
		    CURRENT_VERTEX_SHADER(ctx);
d362 2
a363 2
		InputsRead = CURRENT_VERTEX_SHADER(ctx)->key.InputsRead;
		OutputsWritten = CURRENT_VERTEX_SHADER(ctx)->key.OutputsWritten;
d365 1
a365 2
		DECLARE_RENDERINPUTS(inputs_bitset);
		inputs = r300->state.sw_tcl_inputs;
d367 2
a368 2
		RENDERINPUTS_COPY(inputs_bitset,
				  TNL_CONTEXT(ctx)->render_inputs_bitset);
d370 1
a370 3
		assert(RENDERINPUTS_TEST(inputs_bitset, _TNL_ATTRIB_POS));
		InputsRead |= 1 << VERT_ATTRIB_POS;
		OutputsWritten |= 1 << VERT_RESULT_HPOS;
d372 3
a374 2
		assert(RENDERINPUTS_TEST(inputs_bitset, _TNL_ATTRIB_NORMAL)
		       == 0);
d376 4
a379 3
		assert(RENDERINPUTS_TEST(inputs_bitset, _TNL_ATTRIB_COLOR0));
		InputsRead |= 1 << VERT_ATTRIB_COLOR0;
		OutputsWritten |= 1 << VERT_RESULT_COL0;
d381 6
a386 1
		if (RENDERINPUTS_TEST(inputs_bitset, _TNL_ATTRIB_COLOR1)) {
d391 2
a392 3
		for (i = 0; i < ctx->Const.MaxTextureUnits; i++)
			if (RENDERINPUTS_TEST
			    (inputs_bitset, _TNL_ATTRIB_TEX(i))) {
d396 1
d398 2
a399 2
		for (i = 0, nr = 0; i < VERT_ATTRIB_MAX; i++)
			if (InputsRead & (1 << i))
d401 1
a401 1
			else
d403 2
d406 12
a417 21
		if (!
		    (r300->radeon.radeonScreen->
		     chip_flags & RADEON_CHIPSET_TCL)) {
			/* Fixed, apply to vir0 only */
			memcpy(vir_inputs, inputs,
			       VERT_ATTRIB_MAX * sizeof(int));
			inputs = vir_inputs;

			if (InputsRead & VERT_ATTRIB_POS)
				inputs[VERT_ATTRIB_POS] = 0;

			if (InputsRead & (1 << VERT_ATTRIB_COLOR0))
				inputs[VERT_ATTRIB_COLOR0] = 2;

			if (InputsRead & (1 << VERT_ATTRIB_COLOR1))
				inputs[VERT_ATTRIB_COLOR1] = 3;

			for (i = VERT_ATTRIB_TEX0; i <= VERT_ATTRIB_TEX7; i++)
				if (InputsRead & (1 << i))
					inputs[i] = 6 + (i - VERT_ATTRIB_TEX0);
		}
d419 1
a419 2
		RENDERINPUTS_COPY(rmesa->state.render_inputs_bitset,
				  inputs_bitset);
d421 1
d425 2
a426 2
	for (i = 0, nr = 0; i < VERT_ATTRIB_MAX; i++)
		if (InputsRead & (1 << i))
d428 2
d431 1
a431 1
	if (nr > R300_MAX_AOS_ARRAYS)
d433 1
d436 1
a436 2
		int ci;
		int comp_size, fix, found = 0;
d443 1
a443 1
		for (ci = 0; ci < VB->AttribPtr[tab[i]].size; ci++)
d445 1
d447 2
a448 17
#if MESA_BIG_ENDIAN
#define SWAP_INT(a, b) do { \
	int __temp; \
	__temp = a;\
	a = b; \
	b = __temp; \
} while (0)

		if (VB->AttribPtr[tab[i]].type == GL_UNSIGNED_BYTE) {
			SWAP_INT(swizzle[i][0], swizzle[i][3]);
			SWAP_INT(swizzle[i][1], swizzle[i][2]);
		}
#endif				/* MESA_BIG_ENDIAN */

		if (r300IsGartMemory(rmesa, VB->AttribPtr[tab[i]].data,
				     /*(count-1)*stride */ 4)) {
			if (VB->AttribPtr[tab[i]].stride % 4)
d450 2
a451 3

			rmesa->state.aos[i].address =
			    VB->AttribPtr[tab[i]].data;
d453 3
a455 9
			rmesa->state.aos[i].aos_offset =
			    r300GartOffsetFromVirtual(rmesa,
						      VB->
						      AttribPtr[tab[i]].data);
			rmesa->state.aos[i].aos_stride =
			    VB->AttribPtr[tab[i]].stride / 4;

			rmesa->state.aos[i].aos_size =
			    t_emit_size(&VB->AttribPtr[tab[i]]);
a456 4
			/* TODO: r300EmitVec can only handle 4 byte vectors */
			if (VB->AttribPtr[tab[i]].type != GL_FLOAT)
				return R300_FALLBACK_TCL;

d458 3
a460 3
				    VB->AttribPtr[tab[i]].data,
				    t_emit_size(&VB->AttribPtr[tab[i]]),
				    VB->AttribPtr[tab[i]].stride, count);
d463 1
a463 4
		rmesa->state.aos[i].aos_size =
		    t_aos_size(&VB->AttribPtr[tab[i]]);

		comp_size = _mesa_sizeof_type(VB->AttribPtr[tab[i]].type);
d465 2
a466 3
		for (fix = 0; fix <= 4 - VB->AttribPtr[tab[i]].size; fix++) {
			if ((rmesa->state.aos[i].aos_offset -
			     comp_size * fix) % 4)
d468 1
a468 1

d477 2
a478 4

			rmesa->state.aos[i].aos_offset -= comp_size * fix;

			for (ci = 0; ci < VB->AttribPtr[tab[i]].size; ci++)
d480 1
d486 1
a486 1
			     VB->AttribPtr[tab[i]].size);
d491 21
a511 49
	/* setup INPUT_ROUTE */
	R300_STATECHANGE(r300, vir[0]);
	((drm_r300_cmd_header_t *) r300->hw.vir[0].cmd)->packet0.count =
	    t_vir0(&r300->hw.vir[0].cmd[R300_VIR_CNTL_0], VB->AttribPtr,
		   inputs, tab, nr);

	R300_STATECHANGE(r300, vir[1]);
	((drm_r300_cmd_header_t *) r300->hw.vir[1].cmd)->packet0.count =
	    t_vir1(&r300->hw.vir[1].cmd[R300_VIR_CNTL_0], swizzle, nr);

	/* Set up input_cntl */
	/* I don't think this is needed for vertex buffers, but it doesn't hurt anything */
	R300_STATECHANGE(r300, vic);
	r300->hw.vic.cmd[R300_VIC_CNTL_0] = 0x5555;	/* Hard coded value, no idea what it means */
	r300->hw.vic.cmd[R300_VIC_CNTL_1] = t_vic(ctx, InputsRead);

	/* Stage 3: VAP output */

	R300_STATECHANGE(r300, vof);

	r300->hw.vof.cmd[R300_VOF_CNTL_0] = 0;
	r300->hw.vof.cmd[R300_VOF_CNTL_1] = 0;

	if (OutputsWritten & (1 << VERT_RESULT_HPOS))
		r300->hw.vof.cmd[R300_VOF_CNTL_0] |=
		    R300_VAP_OUTPUT_VTX_FMT_0__POS_PRESENT;

	if (OutputsWritten & (1 << VERT_RESULT_COL0))
		r300->hw.vof.cmd[R300_VOF_CNTL_0] |=
		    R300_VAP_OUTPUT_VTX_FMT_0__COLOR_PRESENT;

	if (OutputsWritten & (1 << VERT_RESULT_COL1))
		r300->hw.vof.cmd[R300_VOF_CNTL_0] |=
		    R300_VAP_OUTPUT_VTX_FMT_0__COLOR_1_PRESENT;

	/*if(OutputsWritten & (1 << VERT_RESULT_BFC0))
	   r300->hw.vof.cmd[R300_VOF_CNTL_0] |= R300_VAP_OUTPUT_VTX_FMT_0__COLOR_2_PRESENT;

	   if(OutputsWritten & (1 << VERT_RESULT_BFC1))
	   r300->hw.vof.cmd[R300_VOF_CNTL_0] |= R300_VAP_OUTPUT_VTX_FMT_0__COLOR_3_PRESENT; */
	//if(OutputsWritten & (1 << VERT_RESULT_FOGC))

	if (OutputsWritten & (1 << VERT_RESULT_PSIZ))
		r300->hw.vof.cmd[R300_VOF_CNTL_0] |=
		    R300_VAP_OUTPUT_VTX_FMT_0__PT_SIZE_PRESENT;

	for (i = 0; i < ctx->Const.MaxTextureUnits; i++)
		if (OutputsWritten & (1 << (VERT_RESULT_TEX0 + i)))
			r300->hw.vof.cmd[R300_VOF_CNTL_1] |= (4 << (3 * i));
d543 16
@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@a33 1
 * \author Maciej Cencora <m.cencora@@gmail.com>
d36 6
a41 5
#include "main/glheader.h"
#include "main/mtypes.h"
#include "main/colormac.h"
#include "main/imports.h"
#include "main/macros.h"
d44 1
d49 2
d52 1
d54 84
d139 19
a157 1
GLuint r300VAPInputCntl0(struct gl_context * ctx, GLuint InputsRead)
d159 18
a176 3
	/* No idea what this value means. I have seen other values written to
	 * this register... */
	return 0x5555;
d179 3
a181 1
GLuint r300VAPInputCntl1(struct gl_context * ctx, GLuint InputsRead)
d183 159
d353 1
d356 1
d363 6
a368 1
GLuint r300VAPOutputCntl0(struct gl_context * ctx, GLuint vp_writes)
d370 41
a410 1
	GLuint ret = 0;
d412 34
a445 2
	if (vp_writes & (1 << VERT_RESULT_HPOS))
		ret |= R300_VAP_OUTPUT_VTX_FMT_0__POS_PRESENT;
d447 5
a451 2
	if (vp_writes & (1 << VERT_RESULT_COL0))
		ret |= R300_VAP_OUTPUT_VTX_FMT_0__COLOR_0_PRESENT;
d453 32
a484 2
	if (vp_writes & (1 << VERT_RESULT_COL1))
		ret |= R300_VAP_OUTPUT_VTX_FMT_0__COLOR_1_PRESENT;
d486 27
a512 4
	/* Two sided lighting works only if all 4 colors are written */
	if (vp_writes & (1 << VERT_RESULT_BFC0) || vp_writes & (1 << VERT_RESULT_BFC1))
		ret |= R300_VAP_OUTPUT_VTX_FMT_0__COLOR_0_PRESENT | R300_VAP_OUTPUT_VTX_FMT_0__COLOR_1_PRESENT |
			   R300_VAP_OUTPUT_VTX_FMT_0__COLOR_2_PRESENT | R300_VAP_OUTPUT_VTX_FMT_0__COLOR_3_PRESENT;
d514 2
a515 2
	if (vp_writes & (1 << VERT_RESULT_PSIZ))
		ret |= R300_VAP_OUTPUT_VTX_FMT_0__PT_SIZE_PRESENT;
d517 83
a599 1
	return ret;
d602 2
a603 1
GLuint r300VAPOutputCntl1(struct gl_context * ctx, GLuint vp_writes)
d605 2
a606 1
	GLuint i, ret = 0, first_free_texcoord = 0;
d608 2
a609 6
	for (i = 0; i < ctx->Const.MaxTextureUnits; i++) {
		if (vp_writes & (1 << (VERT_RESULT_TEX0 + i))) {
			ret |= (4 << (3 * first_free_texcoord));
			++first_free_texcoord;
		}
	}
d611 3
a613 3
	if (first_free_texcoord > 8) {
		fprintf(stderr, "\tout of free texcoords\n");
		exit(-1);
a614 2

	return ret;
d616 1
d618 1
a618 1
void r300EmitCacheFlush(r300ContextPtr rmesa)
d620 2
a621 1
	BATCH_LOCALS(&rmesa->radeon);
d623 4
a626 9
	BEGIN_BATCH_NO_AUTOSTATE(4);
	OUT_BATCH_REGVAL(R300_RB3D_DSTCACHE_CTLSTAT,
		R300_RB3D_DSTCACHE_CTLSTAT_DC_FREE_FREE_3D_TAGS |
		R300_RB3D_DSTCACHE_CTLSTAT_DC_FLUSH_FLUSH_DIRTY_3D);
	OUT_BATCH_REGVAL(R300_ZB_ZCACHE_CTLSTAT,
		R300_ZB_ZCACHE_CTLSTAT_ZC_FLUSH_FLUSH_AND_FREE |
		R300_ZB_ZCACHE_CTLSTAT_ZC_FREE_FREE);
	END_BATCH();
	COMMIT_BATCH();
@

