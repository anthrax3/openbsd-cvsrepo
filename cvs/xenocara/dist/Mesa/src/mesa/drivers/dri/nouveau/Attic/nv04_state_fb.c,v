head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.04.50;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.21;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.53;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.54;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.12.01;	author jsg;	state Exp;
branches;
next	;
commitid	ce2W5rH5aF7VS9gi;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "nouveau_driver.h"
#include "nouveau_context.h"
#include "nouveau_fbo.h"
#include "nouveau_util.h"
#include "nv04_3d.xml.h"
#include "nv04_driver.h"

static inline unsigned
get_rt_format(mesa_format format)
{
	switch (format) {
	case MESA_FORMAT_B8G8R8X8_UNORM:
		return NV04_CONTEXT_SURFACES_3D_FORMAT_COLOR_X8R8G8B8_X8R8G8B8;
	case MESA_FORMAT_B8G8R8A8_UNORM:
		return NV04_CONTEXT_SURFACES_3D_FORMAT_COLOR_A8R8G8B8;
	case MESA_FORMAT_B5G6R5_UNORM:
		return NV04_CONTEXT_SURFACES_3D_FORMAT_COLOR_R5G6B5;
	default:
		assert(0);
	}
}

void
nv04_emit_framebuffer(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);
	struct gl_framebuffer *fb = ctx->DrawBuffer;
	struct nouveau_surface *s;
	uint32_t rt_format = NV04_CONTEXT_SURFACES_3D_FORMAT_TYPE_PITCH;
	uint32_t rt_pitch = 0, zeta_pitch = 0;
	unsigned bo_flags = NOUVEAU_BO_VRAM | NOUVEAU_BO_RDWR;

	if (fb->_Status != GL_FRAMEBUFFER_COMPLETE_EXT)
		return;

	PUSH_RESET(push, BUFCTX_FB);

	/* Render target */
	if (fb->_ColorDrawBuffers[0]) {
		s = &to_nouveau_renderbuffer(
			fb->_ColorDrawBuffers[0])->surface;

		rt_format |= get_rt_format(s->format);
		zeta_pitch = rt_pitch = s->pitch;

		BEGIN_NV04(push, NV04_SF3D(OFFSET_COLOR), 1);
		PUSH_MTHDl(push, NV04_SF3D(OFFSET_COLOR), BUFCTX_FB,
				 s->bo, 0, bo_flags);
	}

	/* depth/stencil */
	if (fb->Attachment[BUFFER_DEPTH].Renderbuffer) {
		s = &to_nouveau_renderbuffer(
			fb->Attachment[BUFFER_DEPTH].Renderbuffer)->surface;

		zeta_pitch = s->pitch;

		BEGIN_NV04(push, NV04_SF3D(OFFSET_ZETA), 1);
		PUSH_MTHDl(push, NV04_SF3D(OFFSET_ZETA), BUFCTX_FB,
				 s->bo, 0, bo_flags);
	}

	BEGIN_NV04(push, NV04_SF3D(FORMAT), 1);
	PUSH_DATA (push, rt_format);
	BEGIN_NV04(push, NV04_SF3D(PITCH), 1);
	PUSH_DATA (push, zeta_pitch << 16 | rt_pitch);

	/* Recompute the scissor state. */
	context_dirty(ctx, SCISSOR);
	context_dirty(ctx, CONTROL);
}

void
nv04_emit_scissor(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);
	int x, y, w, h;

	get_scissors(ctx->DrawBuffer, &x, &y, &w, &h);

	BEGIN_NV04(push, NV04_SF3D(CLIP_HORIZONTAL), 2);
	PUSH_DATA (push, w << 16 | x);
	PUSH_DATA (push, h << 16 | y);
}
@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d96 1
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d35 1
a35 1
get_rt_format(gl_format format)
d38 1
a38 1
	case MESA_FORMAT_XRGB8888:
d40 1
a40 1
	case MESA_FORMAT_ARGB8888:
d42 1
a42 1
	case MESA_FORMAT_RGB565:
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d52 1
a52 4
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_hw_state *hw = &to_nouveau_context(ctx)->hw;
	struct nouveau_grobj *surf3d = hw->surf3d;
	struct nouveau_bo_context *bctx = context_bctx(ctx, FRAMEBUFFER);
d62 2
d72 2
a73 2
		nouveau_bo_markl(bctx, surf3d,
				 NV04_CONTEXT_SURFACES_3D_OFFSET_COLOR,
d78 1
a78 1
	if (fb->_DepthBuffer) {
d80 1
a80 1
			fb->_DepthBuffer->Wrapped)->surface;
d84 2
a85 2
		nouveau_bo_markl(bctx, surf3d,
				 NV04_CONTEXT_SURFACES_3D_OFFSET_ZETA,
d89 4
a92 4
	BEGIN_RING(chan, surf3d, NV04_CONTEXT_SURFACES_3D_FORMAT, 1);
	OUT_RING(chan, rt_format);
	BEGIN_RING(chan, surf3d, NV04_CONTEXT_SURFACES_3D_PITCH, 1);
	OUT_RING(chan, zeta_pitch << 16 | rt_pitch);
d101 1
a101 3
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_hw_state *hw = &to_nouveau_context(ctx)->hw;
	struct nouveau_grobj *surf3d = hw->surf3d;
d106 3
a108 11
	BEGIN_RING(chan, surf3d, NV04_CONTEXT_SURFACES_3D_CLIP_HORIZONTAL, 2);
	OUT_RING(chan, w << 16 | x);
	OUT_RING(chan, h << 16 | y);

	/* Messing with surf3d invalidates the engine state. */
	context_dirty_i(ctx, TEX_ENV, 0);
	context_dirty_i(ctx, TEX_ENV, 1);
	context_dirty_i(ctx, TEX_OBJ, 0);
	context_dirty_i(ctx, TEX_OBJ, 1);
	context_dirty(ctx, CONTROL);
	context_dirty(ctx, BLEND);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d31 1
a31 1
#include "nouveau_class.h"
d39 1
a39 1
		return 0x05;
d41 1
a41 1
		return 0x08;
d43 1
a43 1
		return 0x03;
d50 1
a50 1
nv04_emit_framebuffer(GLcontext *ctx, int emit)
d66 1
a66 1
	if (fb->_NumColorDrawBuffers) {
d100 1
a100 1
nv04_emit_scissor(GLcontext *ctx, int emit)
d113 5
a117 1
	/* Messing with surf3d invalidates some engine state. */
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d31 1
a31 1
#include "nv04_3d.xml.h"
d39 1
a39 1
		return NV04_CONTEXT_SURFACES_3D_FORMAT_COLOR_X8R8G8B8_X8R8G8B8;
d41 1
a41 1
		return NV04_CONTEXT_SURFACES_3D_FORMAT_COLOR_A8R8G8B8;
d43 1
a43 1
		return NV04_CONTEXT_SURFACES_3D_FORMAT_COLOR_R5G6B5;
d50 1
a50 1
nv04_emit_framebuffer(struct gl_context *ctx, int emit)
d66 1
a66 1
	if (fb->_ColorDrawBuffers[0]) {
d100 1
a100 1
nv04_emit_scissor(struct gl_context *ctx, int emit)
d113 1
a113 5
	/* Messing with surf3d invalidates the engine state. */
	context_dirty_i(ctx, TEX_ENV, 0);
	context_dirty_i(ctx, TEX_ENV, 1);
	context_dirty_i(ctx, TEX_OBJ, 0);
	context_dirty_i(ctx, TEX_OBJ, 1);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d52 4
a55 1
	struct nouveau_pushbuf *push = context_push(ctx);
a64 2
	PUSH_RESET(push, BUFCTX_FB);

d73 2
a74 2
		BEGIN_NV04(push, NV04_SF3D(OFFSET_COLOR), 1);
		PUSH_MTHDl(push, NV04_SF3D(OFFSET_COLOR), BUFCTX_FB,
d79 1
a79 1
	if (fb->Attachment[BUFFER_DEPTH].Renderbuffer) {
d81 1
a81 1
			fb->Attachment[BUFFER_DEPTH].Renderbuffer)->surface;
d85 2
a86 2
		BEGIN_NV04(push, NV04_SF3D(OFFSET_ZETA), 1);
		PUSH_MTHDl(push, NV04_SF3D(OFFSET_ZETA), BUFCTX_FB,
d90 4
a93 4
	BEGIN_NV04(push, NV04_SF3D(FORMAT), 1);
	PUSH_DATA (push, rt_format);
	BEGIN_NV04(push, NV04_SF3D(PITCH), 1);
	PUSH_DATA (push, zeta_pitch << 16 | rt_pitch);
d102 3
a104 1
	struct nouveau_pushbuf *push = context_push(ctx);
d109 11
a119 3
	BEGIN_NV04(push, NV04_SF3D(CLIP_HORIZONTAL), 2);
	PUSH_DATA (push, w << 16 | x);
	PUSH_DATA (push, h << 16 | y);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d35 1
a35 1
get_rt_format(mesa_format format)
d38 1
a38 1
	case MESA_FORMAT_B8G8R8X8_UNORM:
d40 1
a40 1
	case MESA_FORMAT_B8G8R8A8_UNORM:
d42 1
a42 1
	case MESA_FORMAT_B5G6R5_UNORM:
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a95 1
	context_dirty(ctx, CONTROL);
@


