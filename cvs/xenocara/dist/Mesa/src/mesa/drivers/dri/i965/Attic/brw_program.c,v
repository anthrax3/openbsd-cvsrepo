head	1.11;
access;
symbols
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	v10_2_9:1.1.1.7
	v10_4_3:1.1.1.6
	v10_2_7:1.1.1.5
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.5
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.4
	v9_2_3:1.1.1.4
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.4
	v9_2_0:1.1.1.4
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.10;
commitid	TnlogFl9nOv2eaRf;

1.10
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.9;
commitid	4ry2gvZGMXkCUD2n;

1.9
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.8;
commitid	mcxB0JvoI9gTDYXU;

1.8
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.04.19;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.44;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.44;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.28.35;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.05.13.15.36;	author jsg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.07.09.20.34.50;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.6
date	2015.01.25.14.11.43;	author jsg;	state Exp;
branches;
next	1.1.1.7;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.7
date	2015.02.20.22.48.47;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.11
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */

#include <pthread.h>
#include "main/imports.h"
#include "main/enums.h"
#include "main/shaderobj.h"
#include "program/prog_parameter.h"
#include "program/prog_print.h"
#include "program/program.h"
#include "program/programopt.h"
#include "tnl/tnl.h"
#include "glsl/ralloc.h"
#include "glsl/ir.h"

#include "brw_context.h"
#include "brw_wm.h"

static unsigned
get_new_program_id(struct intel_screen *screen)
{
   static pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;
   pthread_mutex_lock(&m);
   unsigned id = screen->program_id++;
   pthread_mutex_unlock(&m);
   return id;
}

static void brwBindProgram( struct gl_context *ctx,
			    GLenum target,
			    struct gl_program *prog )
{
   struct brw_context *brw = brw_context(ctx);

   switch (target) {
   case GL_VERTEX_PROGRAM_ARB:
      brw->state.dirty.brw |= BRW_NEW_VERTEX_PROGRAM;
      break;
   case MESA_GEOMETRY_PROGRAM:
      brw->state.dirty.brw |= BRW_NEW_GEOMETRY_PROGRAM;
      break;
   case GL_FRAGMENT_PROGRAM_ARB:
      brw->state.dirty.brw |= BRW_NEW_FRAGMENT_PROGRAM;
      break;
   }
}

static struct gl_program *brwNewProgram( struct gl_context *ctx,
				      GLenum target,
				      GLuint id )
{
   struct brw_context *brw = brw_context(ctx);

   switch (target) {
   case GL_VERTEX_PROGRAM_ARB: {
      struct brw_vertex_program *prog = CALLOC_STRUCT(brw_vertex_program);
      if (prog) {
	 prog->id = get_new_program_id(brw->intelScreen);

	 return _mesa_init_vertex_program( ctx, &prog->program,
					     target, id );
      }
      else
	 return NULL;
   }

   case GL_FRAGMENT_PROGRAM_ARB: {
      struct brw_fragment_program *prog = CALLOC_STRUCT(brw_fragment_program);
      if (prog) {
	 prog->id = get_new_program_id(brw->intelScreen);

	 return _mesa_init_fragment_program( ctx, &prog->program,
					     target, id );
      }
      else
	 return NULL;
   }

   case MESA_GEOMETRY_PROGRAM: {
      struct brw_geometry_program *prog = CALLOC_STRUCT(brw_geometry_program);
      if (prog) {
         prog->id = get_new_program_id(brw->intelScreen);

         return _mesa_init_geometry_program(ctx, &prog->program, target, id);
      } else {
         return NULL;
      }
   }

   case GL_COMPUTE_PROGRAM_NV: {
      struct brw_compute_program *prog = CALLOC_STRUCT(brw_compute_program);
      if (prog) {
         prog->id = get_new_program_id(brw->intelScreen);

         return _mesa_init_compute_program(ctx, &prog->program, target, id);
      } else {
         return NULL;
      }
   }

   default:
      assert(!"Unsupported target in brwNewProgram()");
      return NULL;
   }
}

static void brwDeleteProgram( struct gl_context *ctx,
			      struct gl_program *prog )
{
   _mesa_delete_program( ctx, prog );
}


static GLboolean
brwIsProgramNative(struct gl_context *ctx,
		   GLenum target,
		   struct gl_program *prog)
{
   return true;
}

static GLboolean
brwProgramStringNotify(struct gl_context *ctx,
		       GLenum target,
		       struct gl_program *prog)
{
   struct brw_context *brw = brw_context(ctx);

   switch (target) {
   case GL_FRAGMENT_PROGRAM_ARB: {
      struct gl_fragment_program *fprog = (struct gl_fragment_program *) prog;
      struct brw_fragment_program *newFP = brw_fragment_program(fprog);
      const struct brw_fragment_program *curFP =
         brw_fragment_program_const(brw->fragment_program);

      if (newFP == curFP)
	 brw->state.dirty.brw |= BRW_NEW_FRAGMENT_PROGRAM;
      newFP->id = get_new_program_id(brw->intelScreen);
      break;
   }
   case GL_VERTEX_PROGRAM_ARB: {
      struct gl_vertex_program *vprog = (struct gl_vertex_program *) prog;
      struct brw_vertex_program *newVP = brw_vertex_program(vprog);
      const struct brw_vertex_program *curVP =
         brw_vertex_program_const(brw->vertex_program);

      if (newVP == curVP)
	 brw->state.dirty.brw |= BRW_NEW_VERTEX_PROGRAM;
      if (newVP->program.IsPositionInvariant) {
	 _mesa_insert_mvp_code(ctx, &newVP->program);
      }
      newVP->id = get_new_program_id(brw->intelScreen);

      /* Also tell tnl about it:
       */
      _tnl_program_string(ctx, target, prog);
      break;
   }
   default:
      /*
       * driver->ProgramStringNotify is only called for ARB programs, fixed
       * function vertex programs, and ir_to_mesa (which isn't used by the
       * i965 back-end).  Therefore, even after geometry shaders are added,
       * this function should only ever be called with a target of
       * GL_VERTEX_PROGRAM_ARB or GL_FRAGMENT_PROGRAM_ARB.
       */
      assert(!"Unexpected target in brwProgramStringNotify");
      break;
   }

   brw_add_texrect_params(prog);

   return true;
}

void
brw_add_texrect_params(struct gl_program *prog)
{
   for (int texunit = 0; texunit < BRW_MAX_TEX_UNIT; texunit++) {
      if (!(prog->TexturesUsed[texunit] & (1 << TEXTURE_RECT_INDEX)))
         continue;

      int tokens[STATE_LENGTH] = {
         STATE_INTERNAL,
         STATE_TEXRECT_SCALE,
         texunit,
         0,
         0
      };

      _mesa_add_state_reference(prog->Parameters, (gl_state_index *)tokens);
   }
}

/* Per-thread scratch space is a power-of-two multiple of 1KB. */
int
brw_get_scratch_size(int size)
{
   int i;

   for (i = 1024; i < size; i *= 2)
      ;

   return i;
}

void
brw_get_scratch_bo(struct brw_context *brw,
		   drm_intel_bo **scratch_bo, int size)
{
   drm_intel_bo *old_bo = *scratch_bo;

   if (old_bo && old_bo->size < size) {
      drm_intel_bo_unreference(old_bo);
      old_bo = NULL;
   }

   if (!old_bo) {
      *scratch_bo = drm_intel_bo_alloc(brw->bufmgr, "scratch bo", size, 4096);
   }
}

void brwInitFragProgFuncs( struct dd_function_table *functions )
{
   assert(functions->ProgramStringNotify == _tnl_program_string);

   functions->BindProgram = brwBindProgram;
   functions->NewProgram = brwNewProgram;
   functions->DeleteProgram = brwDeleteProgram;
   functions->IsProgramNative = brwIsProgramNative;
   functions->ProgramStringNotify = brwProgramStringNotify;

   functions->NewShader = brw_new_shader;
   functions->NewShaderProgram = brw_new_shader_program;
   functions->LinkShader = brw_link_shader;
}

void
brw_init_shader_time(struct brw_context *brw)
{
   const int max_entries = 4096;
   brw->shader_time.bo = drm_intel_bo_alloc(brw->bufmgr, "shader time",
                                            max_entries * SHADER_TIME_STRIDE,
                                            4096);
   brw->shader_time.shader_programs = rzalloc_array(brw, struct gl_shader_program *,
                                                    max_entries);
   brw->shader_time.programs = rzalloc_array(brw, struct gl_program *,
                                             max_entries);
   brw->shader_time.types = rzalloc_array(brw, enum shader_time_shader_type,
                                          max_entries);
   brw->shader_time.cumulative = rzalloc_array(brw, uint64_t,
                                               max_entries);
   brw->shader_time.max_entries = max_entries;
}

static int
compare_time(const void *a, const void *b)
{
   uint64_t * const *a_val = a;
   uint64_t * const *b_val = b;

   /* We don't just subtract because we're turning the value to an int. */
   if (**a_val < **b_val)
      return -1;
   else if (**a_val == **b_val)
      return 0;
   else
      return 1;
}

static void
get_written_and_reset(struct brw_context *brw, int i,
                      uint64_t *written, uint64_t *reset)
{
   enum shader_time_shader_type type = brw->shader_time.types[i];
   assert(type == ST_VS || type == ST_GS || type == ST_FS8 || type == ST_FS16);

   /* Find where we recorded written and reset. */
   int wi, ri;

   for (wi = i; brw->shader_time.types[wi] != type + 1; wi++)
      ;

   for (ri = i; brw->shader_time.types[ri] != type + 2; ri++)
      ;

   *written = brw->shader_time.cumulative[wi];
   *reset = brw->shader_time.cumulative[ri];
}

static void
print_shader_time_line(const char *stage, const char *name,
                       int shader_num, uint64_t time, uint64_t total)
{
   fprintf(stderr, "%-6s%-18s", stage, name);

   if (shader_num != -1)
      fprintf(stderr, "%4d: ", shader_num);
   else
      fprintf(stderr, "    : ");

   fprintf(stderr, "%16lld (%7.2f Gcycles)      %4.1f%%\n",
           (long long)time,
           (double)time / 1000000000.0,
           (double)time / total * 100.0);
}

static void
brw_report_shader_time(struct brw_context *brw)
{
   if (!brw->shader_time.bo || !brw->shader_time.num_entries)
      return;

   uint64_t scaled[brw->shader_time.num_entries];
   uint64_t *sorted[brw->shader_time.num_entries];
   uint64_t total_by_type[ST_FS16 + 1];
   memset(total_by_type, 0, sizeof(total_by_type));
   double total = 0;
   for (int i = 0; i < brw->shader_time.num_entries; i++) {
      uint64_t written = 0, reset = 0;
      enum shader_time_shader_type type = brw->shader_time.types[i];

      sorted[i] = &scaled[i];

      switch (type) {
      case ST_VS_WRITTEN:
      case ST_VS_RESET:
      case ST_GS_WRITTEN:
      case ST_GS_RESET:
      case ST_FS8_WRITTEN:
      case ST_FS8_RESET:
      case ST_FS16_WRITTEN:
      case ST_FS16_RESET:
         /* We'll handle these when along with the time. */
         scaled[i] = 0;
         continue;

      case ST_VS:
      case ST_GS:
      case ST_FS8:
      case ST_FS16:
         get_written_and_reset(brw, i, &written, &reset);
         break;

      default:
         /* I sometimes want to print things that aren't the 3 shader times.
          * Just print the sum in that case.
          */
         written = 1;
         reset = 0;
         break;
      }

      uint64_t time = brw->shader_time.cumulative[i];
      if (written) {
         scaled[i] = time / written * (written + reset);
      } else {
         scaled[i] = time;
      }

      switch (type) {
      case ST_VS:
      case ST_GS:
      case ST_FS8:
      case ST_FS16:
         total_by_type[type] += scaled[i];
         break;
      default:
         break;
      }

      total += scaled[i];
   }

   if (total == 0) {
      fprintf(stderr, "No shader time collected yet\n");
      return;
   }

   qsort(sorted, brw->shader_time.num_entries, sizeof(sorted[0]), compare_time);

   fprintf(stderr, "\n");
   fprintf(stderr, "type          ID                  cycles spent                   %% of total\n");
   for (int s = 0; s < brw->shader_time.num_entries; s++) {
      const char *shader_name;
      const char *stage;
      /* Work back from the sorted pointers times to a time to print. */
      int i = sorted[s] - scaled;
      struct gl_shader_program *prog = brw->shader_time.shader_programs[i];

      if (scaled[i] == 0)
         continue;

      int shader_num = -1;
      if (prog) {
         shader_num = prog->Name;

         /* The fixed function fragment shader generates GLSL IR with a Name
          * of 0, and nothing else does.
          */
         if (prog->Label) {
            shader_name = prog->Label;
         } else if (shader_num == 0 &&
             (brw->shader_time.types[i] == ST_FS8 ||
              brw->shader_time.types[i] == ST_FS16)) {
            shader_name = "ff";
            shader_num = -1;
         } else {
            shader_name = "glsl";
         }
      } else if (brw->shader_time.programs[i]) {
         shader_num = brw->shader_time.programs[i]->Id;
         if (shader_num == 0) {
            shader_name = "ff";
            shader_num = -1;
         } else {
            shader_name = "prog";
         }
      } else {
         shader_name = "other";
      }

      switch (brw->shader_time.types[i]) {
      case ST_VS:
         stage = "vs";
         break;
      case ST_GS:
         stage = "gs";
         break;
      case ST_FS8:
         stage = "fs8";
         break;
      case ST_FS16:
         stage = "fs16";
         break;
      default:
         stage = "other";
         break;
      }

      print_shader_time_line(stage, shader_name, shader_num,
                             scaled[i], total);
   }

   fprintf(stderr, "\n");
   print_shader_time_line("total", "vs", -1, total_by_type[ST_VS], total);
   print_shader_time_line("total", "gs", -1, total_by_type[ST_GS], total);
   print_shader_time_line("total", "fs8", -1, total_by_type[ST_FS8], total);
   print_shader_time_line("total", "fs16", -1, total_by_type[ST_FS16], total);
}

static void
brw_collect_shader_time(struct brw_context *brw)
{
   if (!brw->shader_time.bo)
      return;

   /* This probably stalls on the last rendering.  We could fix that by
    * delaying reading the reports, but it doesn't look like it's a big
    * overhead compared to the cost of tracking the time in the first place.
    */
   drm_intel_bo_map(brw->shader_time.bo, true);

   uint32_t *times = brw->shader_time.bo->virtual;

   for (int i = 0; i < brw->shader_time.num_entries; i++) {
      brw->shader_time.cumulative[i] += times[i * SHADER_TIME_STRIDE / 4];
   }

   /* Zero the BO out to clear it out for our next collection.
    */
   memset(times, 0, brw->shader_time.bo->size);
   drm_intel_bo_unmap(brw->shader_time.bo);
}

void
brw_collect_and_report_shader_time(struct brw_context *brw)
{
   brw_collect_shader_time(brw);

   if (brw->shader_time.report_time == 0 ||
       get_time() - brw->shader_time.report_time >= 1.0) {
      brw_report_shader_time(brw);
      brw->shader_time.report_time = get_time();
   }
}

/**
 * Chooses an index in the shader_time buffer and sets up tracking information
 * for our printouts.
 *
 * Note that this holds on to references to the underlying programs, which may
 * change their lifetimes compared to normal operation.
 */
int
brw_get_shader_time_index(struct brw_context *brw,
                          struct gl_shader_program *shader_prog,
                          struct gl_program *prog,
                          enum shader_time_shader_type type)
{
   struct gl_context *ctx = &brw->ctx;

   int shader_time_index = brw->shader_time.num_entries++;
   assert(shader_time_index < brw->shader_time.max_entries);
   brw->shader_time.types[shader_time_index] = type;

   _mesa_reference_shader_program(ctx,
                                  &brw->shader_time.shader_programs[shader_time_index],
                                  shader_prog);

   _mesa_reference_program(ctx,
                           &brw->shader_time.programs[shader_time_index],
                           prog);

   return shader_time_index;
}

void
brw_destroy_shader_time(struct brw_context *brw)
{
   drm_intel_bo_unreference(brw->shader_time.bo);
   brw->shader_time.bo = NULL;
}

void
brw_mark_surface_used(struct brw_stage_prog_data *prog_data,
                      unsigned surf_index)
{
   assert(surf_index < BRW_MAX_SURFACES);

   prog_data->binding_table.size_bytes =
      MAX2(prog_data->binding_table.size_bytes, (surf_index + 1) * 4);
}

bool
brw_stage_prog_data_compare(const struct brw_stage_prog_data *a,
                            const struct brw_stage_prog_data *b)
{
   /* Compare all the struct up to the pointers. */
   if (memcmp(a, b, offsetof(struct brw_stage_prog_data, param)))
      return false;

   if (memcmp(a->param, b->param, a->nr_params * sizeof(void *)))
      return false;

   if (memcmp(a->pull_param, b->pull_param, a->nr_pull_params * sizeof(void *)))
      return false;

   return true;
}

void
brw_stage_prog_data_free(const void *p)
{
   struct brw_stage_prog_data *prog_data = (struct brw_stage_prog_data *)p;

   ralloc_free(prog_data->param);
   ralloc_free(prog_data->pull_param);
}

void
brw_dump_ir(struct brw_context *brw, const char *stage,
            struct gl_shader_program *shader_prog,
            struct gl_shader *shader, struct gl_program *prog)
{
   if (shader_prog) {
      fprintf(stderr,
              "GLSL IR for native %s shader %d:\n", stage, shader_prog->Name);
      _mesa_print_ir(stderr, shader->ir, NULL);
      fprintf(stderr, "\n\n");
   } else {
      fprintf(stderr, "ARB_%s_program %d ir for native %s shader\n",
              stage, prog->Id, stage);
      _mesa_print_program(prog);
   }
}
@


1.10
log
@Merge Mesa 10.2.9
@
text
@@


1.9
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d41 1
a41 1
#include "util/ralloc.h"
d57 19
d130 2
a131 1
      unreachable("Unsupported target in brwNewProgram()");
d143 8
d195 2
a196 1
      unreachable("Unexpected target in brwProgramStringNotify");
d255 1
d258 1
d262 1
d590 2
a591 1
brw_dump_ir(const char *stage, struct gl_shader_program *shader_prog,
@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d41 1
a41 1
#include "glsl/ralloc.h"
a56 19
static void brwBindProgram( struct gl_context *ctx,
			    GLenum target,
			    struct gl_program *prog )
{
   struct brw_context *brw = brw_context(ctx);

   switch (target) {
   case GL_VERTEX_PROGRAM_ARB:
      brw->state.dirty.brw |= BRW_NEW_VERTEX_PROGRAM;
      break;
   case MESA_GEOMETRY_PROGRAM:
      brw->state.dirty.brw |= BRW_NEW_GEOMETRY_PROGRAM;
      break;
   case GL_FRAGMENT_PROGRAM_ARB:
      brw->state.dirty.brw |= BRW_NEW_FRAGMENT_PROGRAM;
      break;
   }
}

d111 1
a111 2
      assert(!"Unsupported target in brwNewProgram()");
      return NULL;
a122 8
brwIsProgramNative(struct gl_context *ctx,
		   GLenum target,
		   struct gl_program *prog)
{
   return true;
}

static GLboolean
d167 1
a167 2
      assert(!"Unexpected target in brwProgramStringNotify");
      break;
a225 1
   functions->BindProgram = brwBindProgram;
a227 1
   functions->IsProgramNative = brwIsProgramNative;
a230 1
   functions->NewShaderProgram = brw_new_shader_program;
d558 1
a558 2
brw_dump_ir(struct brw_context *brw, const char *stage,
            struct gl_shader_program *shader_prog,
@


1.7
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d31 1
a31 1
  
d37 1
d42 1
d58 1
a58 1
			    GLenum target, 
d64 1
a64 1
   case GL_VERTEX_PROGRAM_ARB: 
d67 3
d77 1
a77 1
				      GLenum target, 
d107 22
d130 2
a131 1
      return _mesa_new_program(ctx, target, id);
d253 1
a253 1
   assert(functions->ProgramStringNotify == _tnl_program_string); 
d304 1
a304 1
   assert(type == ST_VS || type == ST_FS8 || type == ST_FS16);
d323 1
a323 1
   printf("%-6s%-6s", stage, name);
d326 1
a326 1
      printf("%4d: ", shader_num);
d328 1
a328 1
      printf("    : ");
d330 4
a333 4
   printf("%16lld (%7.2f Gcycles)      %4.1f%%\n",
          (long long)time,
          (double)time / 1000000000.0,
          (double)time / total * 100.0);
d356 2
d367 1
d391 1
d404 1
a404 1
      printf("No shader time collected yet\n");
d410 2
a411 2
   printf("\n");
   printf("type          ID      cycles spent                   %% of total\n");
d417 1
d423 2
a424 2
      if (brw->shader_time.shader_programs[i]) {
         shader_num = brw->shader_time.shader_programs[i]->Name;
d429 3
a431 1
         if (shader_num == 0 &&
d455 3
d473 1
a473 1
   printf("\n");
d475 1
d551 53
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d32 1
d40 1
a40 1
#include "../glsl/ralloc.h"
d45 10
d81 1
a81 1
	 prog->id = brw->program_id++;
d93 1
a93 1
	 prog->id = brw->program_id++;
d114 4
a117 9
static GLboolean brwIsProgramNative( struct gl_context *ctx,
				     GLenum target, 
				     struct gl_program *prog )
{
   return GL_TRUE;
}

static void
shader_error(struct gl_context *ctx, struct gl_program *prog, const char *msg)
d119 1
a119 8
   struct gl_shader_program *shader;

   shader = _mesa_lookup_shader_program(ctx, prog->Id);

   if (shader) {
      ralloc_strcat(&shader->InfoLog, msg);
      shader->LinkStatus = GL_FALSE;
   }
d122 4
a125 3
static GLboolean brwProgramStringNotify( struct gl_context *ctx,
                                         GLenum target,
                                         struct gl_program *prog )
a127 1
   int i;
d129 2
a130 1
   if (target == GL_FRAGMENT_PROGRAM_ARB) {
a134 1
      struct gl_shader_program *shader_program;
d138 2
a139 10
      newFP->id = brw->program_id++;      

      /* Don't reject fragment shaders for their Mesa IR state when we're
       * using the new FS backend.
       */
      shader_program = _mesa_lookup_shader_program(ctx, prog->Id);
      if (shader_program
	  && shader_program->_LinkedShaders[MESA_SHADER_FRAGMENT]) {
	 return GL_TRUE;
      }
d141 1
a141 1
   else if (target == GL_VERTEX_PROGRAM_ARB) {
d152 1
a152 1
      newVP->id = brw->program_id++;      
d157 12
d171 45
a215 56
   /* Reject programs with subroutines, which are totally broken at the moment
    * (all program flows return when any program flow returns, and
    * the VS also hangs if a function call calls a function.
    *
    * See piglit glsl-{vs,fs}-functions-[23] tests.
    */
   for (i = 0; i < prog->NumInstructions; i++) {
      struct prog_instruction *inst = prog->Instructions + i;
      int r;

      if (prog->Instructions[i].Opcode == OPCODE_CAL) {
	 shader_error(ctx, prog,
		      "i965 driver doesn't yet support uninlined function "
		      "calls.  Move to using a single return statement at "
		      "the end of the function to work around it.\n");
	 return GL_FALSE;
      }

      if (prog->Instructions[i].Opcode == OPCODE_RET) {
	 shader_error(ctx, prog,
		      "i965 driver doesn't yet support \"return\" "
		      "from main().\n");
	 return GL_FALSE;
      }

      for (r = 0; r < _mesa_num_inst_src_regs(inst->Opcode); r++) {
	 if (prog->Instructions[i].SrcReg[r].RelAddr &&
	     prog->Instructions[i].SrcReg[r].File == PROGRAM_INPUT) {
	    shader_error(ctx, prog,
			 "Variable indexing of shader inputs unsupported\n");
	    return GL_FALSE;
	 }
      }

      if (target == GL_FRAGMENT_PROGRAM_ARB &&
	  prog->Instructions[i].DstReg.RelAddr &&
	  prog->Instructions[i].DstReg.File == PROGRAM_OUTPUT) {
	 shader_error(ctx, prog,
		      "Variable indexing of FS outputs unsupported\n");
	 return GL_FALSE;
      }
      if (target == GL_FRAGMENT_PROGRAM_ARB) {
	 if ((prog->Instructions[i].DstReg.RelAddr &&
	      prog->Instructions[i].DstReg.File == PROGRAM_TEMPORARY) ||
	     (prog->Instructions[i].SrcReg[0].RelAddr &&
	      prog->Instructions[i].SrcReg[0].File == PROGRAM_TEMPORARY) ||
	     (prog->Instructions[i].SrcReg[1].RelAddr &&
	      prog->Instructions[i].SrcReg[1].File == PROGRAM_TEMPORARY) ||
	     (prog->Instructions[i].SrcReg[2].RelAddr &&
	      prog->Instructions[i].SrcReg[2].File == PROGRAM_TEMPORARY)) {
	    shader_error(ctx, prog,
			 "Variable indexing of variable arrays in the FS "
			 "unsupported\n");
	    return GL_FALSE;
	 }
      }
d218 3
a220 1
   return GL_TRUE;
d238 275
@


1.5
log
@Merge Mesa 7.10.3
@
text
@a136 5
      if (fprog->FogOption) {
         _mesa_append_fog_code(ctx, fprog);
         fprog->FogOption = GL_NONE;
      }

a240 1
   functions->CompileShader = brw_compile_shader;
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d34 4
a37 4
#include "shader/prog_parameter.h"
#include "shader/program.h"
#include "shader/programopt.h"
#include "shader/shader_api.h"
d39 1
d44 1
a44 1
static void brwBindProgram( GLcontext *ctx,
d60 1
a60 1
static struct gl_program *brwNewProgram( GLcontext *ctx,
d96 1
a96 1
static void brwDeleteProgram( GLcontext *ctx,
a98 14
   if (prog->Target == GL_FRAGMENT_PROGRAM_ARB) {
      struct gl_fragment_program *fp = (struct gl_fragment_program *) prog;
      struct brw_fragment_program *brw_fp = brw_fragment_program(fp);

      dri_bo_unreference(brw_fp->const_buffer);
   }

   if (prog->Target == GL_VERTEX_PROGRAM_ARB) {
      struct gl_vertex_program *vp = (struct gl_vertex_program *) prog;
      struct brw_vertex_program *brw_vp = brw_vertex_program(vp);

      dri_bo_unreference(brw_vp->const_buffer);
   }

d103 1
a103 1
static GLboolean brwIsProgramNative( GLcontext *ctx,
d111 1
a111 1
shader_error(GLcontext *ctx, struct gl_program *prog, const char *msg)
d118 1
a118 4
      if (shader->InfoLog) {
	 free(shader->InfoLog);
      }
      shader->InfoLog = _mesa_strdup(msg);
d123 1
a123 1
static GLboolean brwProgramStringNotify( GLcontext *ctx,
d135 1
d145 9
a153 1
      newFP->isGLSL = brw_wm_is_glsl(fprog);
d180 3
d187 1
a187 1
		      "the end of the function to work around it.");
d190 39
d243 5
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d37 1
d41 1
a41 1
#include "brw_util.h"
d98 14
a111 1
   
d123 19
a141 3
static void brwProgramStringNotify( GLcontext *ctx,
				    GLenum target,
				    struct gl_program *prog )
d143 3
d148 4
a151 3
      struct brw_context *brw = brw_context(ctx);
      struct brw_fragment_program *p = (struct brw_fragment_program *)prog;
      struct brw_fragment_program *fp = (struct brw_fragment_program *)brw->fragment_program;
d157 1
a157 1
      if (p == fp)
d159 2
a160 1
      p->id = brw->program_id++;      
d163 6
a168 4
      struct brw_context *brw = brw_context(ctx);
      struct brw_vertex_program *p = (struct brw_vertex_program *)prog;
      struct brw_vertex_program *vp = (struct brw_vertex_program *)brw->vertex_program;
      if (p == vp)
d170 2
a171 2
      if (p->program.IsPositionInvariant) {
	 _mesa_insert_mvp_code(ctx, &p->program);
d173 1
a173 1
      p->id = brw->program_id++;      
d179 18
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d114 1
d118 5
a125 1
      p->param_state = p->program.Base.Parameters->StateFlags;
a136 1
      p->param_state = p->program.Base.Parameters->StateFlags;
@


1.1
log
@Initial revision
@
text
@d32 6
a39 1
#include "brw_aub.h"
a40 5
#include "program.h"
#include "imports.h"
#include "enums.h"
#include "tnl/tnl.h"

d120 1
a120 1
      p->param_state = brw_parameter_list_state_flags(p->program.Base.Parameters); 
d128 3
d132 1
a132 1
      p->param_state = brw_parameter_list_state_flags(p->program.Base.Parameters); 
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Mesa 7.0.1
@
text
@d32 1
a32 1
#include "shader/prog_parameter.h"
d120 1
a120 1
      p->param_state = p->program.Base.Parameters->StateFlags;
d129 1
a129 1
      p->param_state = p->program.Base.Parameters->StateFlags;
@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@d32 7
a38 6
#include "main/imports.h"
#include "main/enums.h"
#include "main/shaderobj.h"
#include "program/prog_parameter.h"
#include "program/program.h"
#include "program/programopt.h"
a39 1
#include "../glsl/ralloc.h"
a40 2
#include "brw_context.h"
#include "brw_wm.h"
d42 1
a42 1
static void brwBindProgram( struct gl_context *ctx,
d58 1
a58 1
static struct gl_program *brwNewProgram( struct gl_context *ctx,
d94 1
a94 1
static void brwDeleteProgram( struct gl_context *ctx,
d97 1
d102 1
a102 1
static GLboolean brwIsProgramNative( struct gl_context *ctx,
d109 3
a111 16
static void
shader_error(struct gl_context *ctx, struct gl_program *prog, const char *msg)
{
   struct gl_shader_program *shader;

   shader = _mesa_lookup_shader_program(ctx, prog->Id);

   if (shader) {
      ralloc_strcat(&shader->InfoLog, msg);
      shader->LinkStatus = GL_FALSE;
   }
}

static GLboolean brwProgramStringNotify( struct gl_context *ctx,
                                         GLenum target,
                                         struct gl_program *prog )
a112 3
   struct brw_context *brw = brw_context(ctx);
   int i;

d114 4
a117 12
      struct gl_fragment_program *fprog = (struct gl_fragment_program *) prog;
      struct brw_fragment_program *newFP = brw_fragment_program(fprog);
      const struct brw_fragment_program *curFP =
         brw_fragment_program_const(brw->fragment_program);
      struct gl_shader_program *shader_program;

      if (fprog->FogOption) {
         _mesa_append_fog_code(ctx, fprog);
         fprog->FogOption = GL_NONE;
      }

      if (newFP == curFP)
d119 2
a120 10
      newFP->id = brw->program_id++;      

      /* Don't reject fragment shaders for their Mesa IR state when we're
       * using the new FS backend.
       */
      shader_program = _mesa_lookup_shader_program(ctx, prog->Id);
      if (shader_program
	  && shader_program->_LinkedShaders[MESA_SHADER_FRAGMENT]) {
	 return GL_TRUE;
      }
d123 4
a126 6
      struct gl_vertex_program *vprog = (struct gl_vertex_program *) prog;
      struct brw_vertex_program *newVP = brw_vertex_program(vprog);
      const struct brw_vertex_program *curVP =
         brw_vertex_program_const(brw->vertex_program);

      if (newVP == curVP)
d128 2
a129 4
      if (newVP->program.IsPositionInvariant) {
	 _mesa_insert_mvp_code(ctx, &newVP->program);
      }
      newVP->id = brw->program_id++;      
a134 60

   /* Reject programs with subroutines, which are totally broken at the moment
    * (all program flows return when any program flow returns, and
    * the VS also hangs if a function call calls a function.
    *
    * See piglit glsl-{vs,fs}-functions-[23] tests.
    */
   for (i = 0; i < prog->NumInstructions; i++) {
      struct prog_instruction *inst = prog->Instructions + i;
      int r;

      if (prog->Instructions[i].Opcode == OPCODE_CAL) {
	 shader_error(ctx, prog,
		      "i965 driver doesn't yet support uninlined function "
		      "calls.  Move to using a single return statement at "
		      "the end of the function to work around it.\n");
	 return GL_FALSE;
      }

      if (prog->Instructions[i].Opcode == OPCODE_RET) {
	 shader_error(ctx, prog,
		      "i965 driver doesn't yet support \"return\" "
		      "from main().\n");
	 return GL_FALSE;
      }

      for (r = 0; r < _mesa_num_inst_src_regs(inst->Opcode); r++) {
	 if (prog->Instructions[i].SrcReg[r].RelAddr &&
	     prog->Instructions[i].SrcReg[r].File == PROGRAM_INPUT) {
	    shader_error(ctx, prog,
			 "Variable indexing of shader inputs unsupported\n");
	    return GL_FALSE;
	 }
      }

      if (target == GL_FRAGMENT_PROGRAM_ARB &&
	  prog->Instructions[i].DstReg.RelAddr &&
	  prog->Instructions[i].DstReg.File == PROGRAM_OUTPUT) {
	 shader_error(ctx, prog,
		      "Variable indexing of FS outputs unsupported\n");
	 return GL_FALSE;
      }
      if (target == GL_FRAGMENT_PROGRAM_ARB) {
	 if ((prog->Instructions[i].DstReg.RelAddr &&
	      prog->Instructions[i].DstReg.File == PROGRAM_TEMPORARY) ||
	     (prog->Instructions[i].SrcReg[0].RelAddr &&
	      prog->Instructions[i].SrcReg[0].File == PROGRAM_TEMPORARY) ||
	     (prog->Instructions[i].SrcReg[1].RelAddr &&
	      prog->Instructions[i].SrcReg[1].File == PROGRAM_TEMPORARY) ||
	     (prog->Instructions[i].SrcReg[2].RelAddr &&
	      prog->Instructions[i].SrcReg[2].File == PROGRAM_TEMPORARY)) {
	    shader_error(ctx, prog,
			 "Variable indexing of variable arrays in the FS "
			 "unsupported\n");
	    return GL_FALSE;
	 }
      }
   }

   return GL_TRUE;
a145 5

   functions->NewShader = brw_new_shader;
   functions->NewShaderProgram = brw_new_shader_program;
   functions->CompileShader = brw_compile_shader;
   functions->LinkShader = brw_link_shader;
@


1.1.1.4
log
@Import Mesa 9.2.0
@
text
@a31 1
#include <pthread.h>
d39 1
a39 1
#include "glsl/ralloc.h"
a43 10
static unsigned
get_new_program_id(struct intel_screen *screen)
{
   static pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;
   pthread_mutex_lock(&m);
   unsigned id = screen->program_id++;
   pthread_mutex_unlock(&m);
   return id;
}

d70 1
a70 1
	 prog->id = get_new_program_id(brw->intelScreen);
d82 1
a82 1
	 prog->id = get_new_program_id(brw->intelScreen);
d103 9
a111 4
static GLboolean
brwIsProgramNative(struct gl_context *ctx,
		   GLenum target,
		   struct gl_program *prog)
d113 8
a120 1
   return true;
d123 3
a125 4
static GLboolean
brwProgramStringNotify(struct gl_context *ctx,
		       GLenum target,
		       struct gl_program *prog)
d128 1
d130 1
a130 2
   switch (target) {
   case GL_FRAGMENT_PROGRAM_ARB: {
d135 6
d144 10
a153 2
      newFP->id = get_new_program_id(brw->intelScreen);
      break;
d155 1
a155 1
   case GL_VERTEX_PROGRAM_ARB: {
d166 1
a166 1
      newVP->id = get_new_program_id(brw->intelScreen);
a170 12
      break;
   }
   default:
      /*
       * driver->ProgramStringNotify is only called for ARB programs, fixed
       * function vertex programs, and ir_to_mesa (which isn't used by the
       * i965 back-end).  Therefore, even after geometry shaders are added,
       * this function should only ever be called with a target of
       * GL_VERTEX_PROGRAM_ARB or GL_FRAGMENT_PROGRAM_ARB.
       */
      assert(!"Unexpected target in brwProgramStringNotify");
      break;
d173 56
a228 45
   brw_add_texrect_params(prog);

   return true;
}

void
brw_add_texrect_params(struct gl_program *prog)
{
   for (int texunit = 0; texunit < BRW_MAX_TEX_UNIT; texunit++) {
      if (!(prog->TexturesUsed[texunit] & (1 << TEXTURE_RECT_INDEX)))
         continue;

      int tokens[STATE_LENGTH] = {
         STATE_INTERNAL,
         STATE_TEXRECT_SCALE,
         texunit,
         0,
         0
      };

      _mesa_add_state_reference(prog->Parameters, (gl_state_index *)tokens);
   }
}

/* Per-thread scratch space is a power-of-two multiple of 1KB. */
int
brw_get_scratch_size(int size)
{
   int i;

   for (i = 1024; i < size; i *= 2)
      ;

   return i;
}

void
brw_get_scratch_bo(struct brw_context *brw,
		   drm_intel_bo **scratch_bo, int size)
{
   drm_intel_bo *old_bo = *scratch_bo;

   if (old_bo && old_bo->size < size) {
      drm_intel_bo_unreference(old_bo);
      old_bo = NULL;
d231 1
a231 3
   if (!old_bo) {
      *scratch_bo = drm_intel_bo_alloc(brw->bufmgr, "scratch bo", size, 4096);
   }
d246 1
a249 275
void
brw_init_shader_time(struct brw_context *brw)
{
   const int max_entries = 4096;
   brw->shader_time.bo = drm_intel_bo_alloc(brw->bufmgr, "shader time",
                                            max_entries * SHADER_TIME_STRIDE,
                                            4096);
   brw->shader_time.shader_programs = rzalloc_array(brw, struct gl_shader_program *,
                                                    max_entries);
   brw->shader_time.programs = rzalloc_array(brw, struct gl_program *,
                                             max_entries);
   brw->shader_time.types = rzalloc_array(brw, enum shader_time_shader_type,
                                          max_entries);
   brw->shader_time.cumulative = rzalloc_array(brw, uint64_t,
                                               max_entries);
   brw->shader_time.max_entries = max_entries;
}

static int
compare_time(const void *a, const void *b)
{
   uint64_t * const *a_val = a;
   uint64_t * const *b_val = b;

   /* We don't just subtract because we're turning the value to an int. */
   if (**a_val < **b_val)
      return -1;
   else if (**a_val == **b_val)
      return 0;
   else
      return 1;
}

static void
get_written_and_reset(struct brw_context *brw, int i,
                      uint64_t *written, uint64_t *reset)
{
   enum shader_time_shader_type type = brw->shader_time.types[i];
   assert(type == ST_VS || type == ST_FS8 || type == ST_FS16);

   /* Find where we recorded written and reset. */
   int wi, ri;

   for (wi = i; brw->shader_time.types[wi] != type + 1; wi++)
      ;

   for (ri = i; brw->shader_time.types[ri] != type + 2; ri++)
      ;

   *written = brw->shader_time.cumulative[wi];
   *reset = brw->shader_time.cumulative[ri];
}

static void
print_shader_time_line(const char *stage, const char *name,
                       int shader_num, uint64_t time, uint64_t total)
{
   printf("%-6s%-6s", stage, name);

   if (shader_num != -1)
      printf("%4d: ", shader_num);
   else
      printf("    : ");

   printf("%16lld (%7.2f Gcycles)      %4.1f%%\n",
          (long long)time,
          (double)time / 1000000000.0,
          (double)time / total * 100.0);
}

static void
brw_report_shader_time(struct brw_context *brw)
{
   if (!brw->shader_time.bo || !brw->shader_time.num_entries)
      return;

   uint64_t scaled[brw->shader_time.num_entries];
   uint64_t *sorted[brw->shader_time.num_entries];
   uint64_t total_by_type[ST_FS16 + 1];
   memset(total_by_type, 0, sizeof(total_by_type));
   double total = 0;
   for (int i = 0; i < brw->shader_time.num_entries; i++) {
      uint64_t written = 0, reset = 0;
      enum shader_time_shader_type type = brw->shader_time.types[i];

      sorted[i] = &scaled[i];

      switch (type) {
      case ST_VS_WRITTEN:
      case ST_VS_RESET:
      case ST_FS8_WRITTEN:
      case ST_FS8_RESET:
      case ST_FS16_WRITTEN:
      case ST_FS16_RESET:
         /* We'll handle these when along with the time. */
         scaled[i] = 0;
         continue;

      case ST_VS:
      case ST_FS8:
      case ST_FS16:
         get_written_and_reset(brw, i, &written, &reset);
         break;

      default:
         /* I sometimes want to print things that aren't the 3 shader times.
          * Just print the sum in that case.
          */
         written = 1;
         reset = 0;
         break;
      }

      uint64_t time = brw->shader_time.cumulative[i];
      if (written) {
         scaled[i] = time / written * (written + reset);
      } else {
         scaled[i] = time;
      }

      switch (type) {
      case ST_VS:
      case ST_FS8:
      case ST_FS16:
         total_by_type[type] += scaled[i];
         break;
      default:
         break;
      }

      total += scaled[i];
   }

   if (total == 0) {
      printf("No shader time collected yet\n");
      return;
   }

   qsort(sorted, brw->shader_time.num_entries, sizeof(sorted[0]), compare_time);

   printf("\n");
   printf("type          ID      cycles spent                   %% of total\n");
   for (int s = 0; s < brw->shader_time.num_entries; s++) {
      const char *shader_name;
      const char *stage;
      /* Work back from the sorted pointers times to a time to print. */
      int i = sorted[s] - scaled;

      if (scaled[i] == 0)
         continue;

      int shader_num = -1;
      if (brw->shader_time.shader_programs[i]) {
         shader_num = brw->shader_time.shader_programs[i]->Name;

         /* The fixed function fragment shader generates GLSL IR with a Name
          * of 0, and nothing else does.
          */
         if (shader_num == 0 &&
             (brw->shader_time.types[i] == ST_FS8 ||
              brw->shader_time.types[i] == ST_FS16)) {
            shader_name = "ff";
            shader_num = -1;
         } else {
            shader_name = "glsl";
         }
      } else if (brw->shader_time.programs[i]) {
         shader_num = brw->shader_time.programs[i]->Id;
         if (shader_num == 0) {
            shader_name = "ff";
            shader_num = -1;
         } else {
            shader_name = "prog";
         }
      } else {
         shader_name = "other";
      }

      switch (brw->shader_time.types[i]) {
      case ST_VS:
         stage = "vs";
         break;
      case ST_FS8:
         stage = "fs8";
         break;
      case ST_FS16:
         stage = "fs16";
         break;
      default:
         stage = "other";
         break;
      }

      print_shader_time_line(stage, shader_name, shader_num,
                             scaled[i], total);
   }

   printf("\n");
   print_shader_time_line("total", "vs", -1, total_by_type[ST_VS], total);
   print_shader_time_line("total", "fs8", -1, total_by_type[ST_FS8], total);
   print_shader_time_line("total", "fs16", -1, total_by_type[ST_FS16], total);
}

static void
brw_collect_shader_time(struct brw_context *brw)
{
   if (!brw->shader_time.bo)
      return;

   /* This probably stalls on the last rendering.  We could fix that by
    * delaying reading the reports, but it doesn't look like it's a big
    * overhead compared to the cost of tracking the time in the first place.
    */
   drm_intel_bo_map(brw->shader_time.bo, true);

   uint32_t *times = brw->shader_time.bo->virtual;

   for (int i = 0; i < brw->shader_time.num_entries; i++) {
      brw->shader_time.cumulative[i] += times[i * SHADER_TIME_STRIDE / 4];
   }

   /* Zero the BO out to clear it out for our next collection.
    */
   memset(times, 0, brw->shader_time.bo->size);
   drm_intel_bo_unmap(brw->shader_time.bo);
}

void
brw_collect_and_report_shader_time(struct brw_context *brw)
{
   brw_collect_shader_time(brw);

   if (brw->shader_time.report_time == 0 ||
       get_time() - brw->shader_time.report_time >= 1.0) {
      brw_report_shader_time(brw);
      brw->shader_time.report_time = get_time();
   }
}

/**
 * Chooses an index in the shader_time buffer and sets up tracking information
 * for our printouts.
 *
 * Note that this holds on to references to the underlying programs, which may
 * change their lifetimes compared to normal operation.
 */
int
brw_get_shader_time_index(struct brw_context *brw,
                          struct gl_shader_program *shader_prog,
                          struct gl_program *prog,
                          enum shader_time_shader_type type)
{
   struct gl_context *ctx = &brw->ctx;

   int shader_time_index = brw->shader_time.num_entries++;
   assert(shader_time_index < brw->shader_time.max_entries);
   brw->shader_time.types[shader_time_index] = type;

   _mesa_reference_shader_program(ctx,
                                  &brw->shader_time.shader_programs[shader_time_index],
                                  shader_prog);

   _mesa_reference_program(ctx,
                           &brw->shader_time.programs[shader_time_index],
                           prog);

   return shader_time_index;
}

void
brw_destroy_shader_time(struct brw_context *brw)
{
   drm_intel_bo_unreference(brw->shader_time.bo);
   brw->shader_time.bo = NULL;
}
@


1.1.1.5
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d31 1
a31 1

a36 1
#include "program/prog_print.h"
a40 1
#include "glsl/ir.h"
d56 1
a56 1
			    GLenum target,
d62 1
a62 1
   case GL_VERTEX_PROGRAM_ARB:
a64 3
   case MESA_GEOMETRY_PROGRAM:
      brw->state.dirty.brw |= BRW_NEW_GEOMETRY_PROGRAM;
      break;
d72 1
a72 1
				      GLenum target,
a101 22
   case MESA_GEOMETRY_PROGRAM: {
      struct brw_geometry_program *prog = CALLOC_STRUCT(brw_geometry_program);
      if (prog) {
         prog->id = get_new_program_id(brw->intelScreen);

         return _mesa_init_geometry_program(ctx, &prog->program, target, id);
      } else {
         return NULL;
      }
   }

   case GL_COMPUTE_PROGRAM_NV: {
      struct brw_compute_program *prog = CALLOC_STRUCT(brw_compute_program);
      if (prog) {
         prog->id = get_new_program_id(brw->intelScreen);

         return _mesa_init_compute_program(ctx, &prog->program, target, id);
      } else {
         return NULL;
      }
   }

d103 1
a103 2
      assert(!"Unsupported target in brwNewProgram()");
      return NULL;
d225 1
a225 1
   assert(functions->ProgramStringNotify == _tnl_program_string);
d276 1
a276 1
   assert(type == ST_VS || type == ST_GS || type == ST_FS8 || type == ST_FS16);
d295 1
a295 1
   fprintf(stderr, "%-6s%-18s", stage, name);
d298 1
a298 1
      fprintf(stderr, "%4d: ", shader_num);
d300 1
a300 1
      fprintf(stderr, "    : ");
d302 4
a305 4
   fprintf(stderr, "%16lld (%7.2f Gcycles)      %4.1f%%\n",
           (long long)time,
           (double)time / 1000000000.0,
           (double)time / total * 100.0);
a327 2
      case ST_GS_WRITTEN:
      case ST_GS_RESET:
a336 1
      case ST_GS:
a359 1
      case ST_GS:
d372 1
a372 1
      fprintf(stderr, "No shader time collected yet\n");
d378 2
a379 2
   fprintf(stderr, "\n");
   fprintf(stderr, "type          ID                  cycles spent                   %% of total\n");
a384 1
      struct gl_shader_program *prog = brw->shader_time.shader_programs[i];
d390 2
a391 2
      if (prog) {
         shader_num = prog->Name;
d396 1
a396 3
         if (prog->Label) {
            shader_name = prog->Label;
         } else if (shader_num == 0 &&
a419 3
      case ST_GS:
         stage = "gs";
         break;
d435 1
a435 1
   fprintf(stderr, "\n");
a436 1
   print_shader_time_line("total", "gs", -1, total_by_type[ST_GS], total);
a511 53
}

void
brw_mark_surface_used(struct brw_stage_prog_data *prog_data,
                      unsigned surf_index)
{
   assert(surf_index < BRW_MAX_SURFACES);

   prog_data->binding_table.size_bytes =
      MAX2(prog_data->binding_table.size_bytes, (surf_index + 1) * 4);
}

bool
brw_stage_prog_data_compare(const struct brw_stage_prog_data *a,
                            const struct brw_stage_prog_data *b)
{
   /* Compare all the struct up to the pointers. */
   if (memcmp(a, b, offsetof(struct brw_stage_prog_data, param)))
      return false;

   if (memcmp(a->param, b->param, a->nr_params * sizeof(void *)))
      return false;

   if (memcmp(a->pull_param, b->pull_param, a->nr_pull_params * sizeof(void *)))
      return false;

   return true;
}

void
brw_stage_prog_data_free(const void *p)
{
   struct brw_stage_prog_data *prog_data = (struct brw_stage_prog_data *)p;

   ralloc_free(prog_data->param);
   ralloc_free(prog_data->pull_param);
}

void
brw_dump_ir(struct brw_context *brw, const char *stage,
            struct gl_shader_program *shader_prog,
            struct gl_shader *shader, struct gl_program *prog)
{
   if (shader_prog) {
      fprintf(stderr,
              "GLSL IR for native %s shader %d:\n", stage, shader_prog->Name);
      _mesa_print_ir(stderr, shader->ir, NULL);
      fprintf(stderr, "\n\n");
   } else {
      fprintf(stderr, "ARB_%s_program %d ir for native %s shader\n",
              stage, prog->Id, stage);
      _mesa_print_program(prog);
   }
@


1.1.1.6
log
@Import Mesa 10.4.3
@
text
@d41 1
a41 1
#include "util/ralloc.h"
d57 19
d130 2
a131 1
      unreachable("Unsupported target in brwNewProgram()");
d143 8
d195 2
a196 1
      unreachable("Unexpected target in brwProgramStringNotify");
d255 1
d258 1
d262 1
d590 2
a591 1
brw_dump_ir(const char *stage, struct gl_shader_program *shader_prog,
@


1.1.1.7
log
@Import Mesa 10.2.9
@
text
@d41 1
a41 1
#include "glsl/ralloc.h"
a56 19
static void brwBindProgram( struct gl_context *ctx,
			    GLenum target,
			    struct gl_program *prog )
{
   struct brw_context *brw = brw_context(ctx);

   switch (target) {
   case GL_VERTEX_PROGRAM_ARB:
      brw->state.dirty.brw |= BRW_NEW_VERTEX_PROGRAM;
      break;
   case MESA_GEOMETRY_PROGRAM:
      brw->state.dirty.brw |= BRW_NEW_GEOMETRY_PROGRAM;
      break;
   case GL_FRAGMENT_PROGRAM_ARB:
      brw->state.dirty.brw |= BRW_NEW_FRAGMENT_PROGRAM;
      break;
   }
}

d111 1
a111 2
      assert(!"Unsupported target in brwNewProgram()");
      return NULL;
a122 8
brwIsProgramNative(struct gl_context *ctx,
		   GLenum target,
		   struct gl_program *prog)
{
   return true;
}

static GLboolean
d167 1
a167 2
      assert(!"Unexpected target in brwProgramStringNotify");
      break;
a225 1
   functions->BindProgram = brwBindProgram;
a227 1
   functions->IsProgramNative = brwIsProgramNative;
a230 1
   functions->NewShaderProgram = brw_new_shader_program;
d558 1
a558 2
brw_dump_ir(struct brw_context *brw, const char *stage,
            struct gl_shader_program *shader_prog,
@


