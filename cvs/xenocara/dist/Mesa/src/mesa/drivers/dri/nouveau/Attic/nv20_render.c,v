head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2013.09.05.14.04.51;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.22;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.57;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009-2010 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "nouveau_driver.h"
#include "nouveau_context.h"
#include "nv20_3d.xml.h"
#include "nv20_driver.h"

#define NUM_VERTEX_ATTRS 16

static void
nv20_emit_material(struct gl_context *ctx, struct nouveau_array *a,
		   const void *v);

/* Vertex attribute format. */
static struct nouveau_attr_info nv20_vertex_attrs[VERT_ATTRIB_MAX] = {
	[VERT_ATTRIB_POS] = {
		.vbo_index = 0,
		.imm_method = NV20_3D_VERTEX_POS_4F_X,
		.imm_fields = 4,
	},
	[VERT_ATTRIB_NORMAL] = {
		.vbo_index = 2,
		.imm_method = NV20_3D_VERTEX_NOR_3F_X,
		.imm_fields = 3,
	},
	[VERT_ATTRIB_COLOR0] = {
		.vbo_index = 3,
		.imm_method = NV20_3D_VERTEX_COL_4F,
		.imm_fields = 4,
	},
	[VERT_ATTRIB_COLOR1] = {
		.vbo_index = 4,
		.imm_method = NV20_3D_VERTEX_COL2_3F,
		.imm_fields = 3,
	},
	[VERT_ATTRIB_FOG] = {
		.vbo_index = 5,
		.imm_method = NV20_3D_VERTEX_FOG_1F,
		.imm_fields = 1,
	},
	[VERT_ATTRIB_TEX0] = {
		.vbo_index = 9,
		.imm_method = NV20_3D_VERTEX_TX0_4F_S,
		.imm_fields = 4,
	},
	[VERT_ATTRIB_TEX1] = {
		.vbo_index = 10,
		.imm_method = NV20_3D_VERTEX_TX1_4F_S,
		.imm_fields = 4,
	},
	[VERT_ATTRIB_TEX2] = {
		.vbo_index = 11,
		.imm_method = NV20_3D_VERTEX_TX2_4F_S,
		.imm_fields = 4,
	},
	[VERT_ATTRIB_TEX3] = {
		.vbo_index = 12,
		.imm_method = NV20_3D_VERTEX_TX3_4F_S,
		.imm_fields = 4,
	},
	[VERT_ATTRIB_GENERIC0] = {
		.emit = nv20_emit_material,
	},
	[VERT_ATTRIB_GENERIC1] = {
		.emit = nv20_emit_material,
	},
	[VERT_ATTRIB_GENERIC2] = {
		.emit = nv20_emit_material,
	},
	[VERT_ATTRIB_GENERIC3] = {
		.emit = nv20_emit_material,
	},
	[VERT_ATTRIB_GENERIC4] = {
		.emit = nv20_emit_material,
	},
	[VERT_ATTRIB_GENERIC5] = {
		.emit = nv20_emit_material,
	},
	[VERT_ATTRIB_GENERIC6] = {
		.emit = nv20_emit_material,
	},
	[VERT_ATTRIB_GENERIC7] = {
		.emit = nv20_emit_material,
	},
	[VERT_ATTRIB_GENERIC8] = {
		.emit = nv20_emit_material,
	},
	[VERT_ATTRIB_GENERIC9] = {
		.emit = nv20_emit_material,
	},
};

static int
get_hw_format(int type)
{
	switch (type) {
	case GL_FLOAT:
		return NV20_3D_VTXBUF_FMT_TYPE_FLOAT;
	case GL_UNSIGNED_SHORT:
		return NV20_3D_VTXBUF_FMT_TYPE_USHORT;
	case GL_UNSIGNED_BYTE:
		return NV20_3D_VTXBUF_FMT_TYPE_UBYTE;
	default:
		assert(0);
	}
}

static void
nv20_render_set_format(struct gl_context *ctx)
{
	struct nouveau_render_state *render = to_render_state(ctx);
	struct nouveau_pushbuf *push = context_push(ctx);
	int i, attr, hw_format;

	FOR_EACH_ATTR(render, i, attr) {
		if (attr >= 0) {
			struct nouveau_array *a = &render->attrs[attr];

			hw_format = a->stride << 8 |
				a->fields << 4 |
				get_hw_format(a->type);

		} else {
			/* Unused attribute. */
			hw_format = NV20_3D_VTXBUF_FMT_TYPE_FLOAT;
		}

		BEGIN_NV04(push, NV20_3D(VTXBUF_FMT(i)), 1);
		PUSH_DATA (push, hw_format);
	}
}

static void
nv20_render_bind_vertices(struct gl_context *ctx)
{
	struct nouveau_render_state *render = to_render_state(ctx);
	struct nouveau_pushbuf *push = context_push(ctx);
	int i, attr;

	FOR_EACH_BOUND_ATTR(render, i, attr) {
		struct nouveau_array *a = &render->attrs[attr];

		BEGIN_NV04(push, NV20_3D(VTXBUF_OFFSET(i)), 1);
		PUSH_MTHD (push, NV20_3D(VTXBUF_OFFSET(i)), BUFCTX_VTX,
				 a->bo, a->offset, NOUVEAU_BO_LOW |
				 NOUVEAU_BO_OR | NOUVEAU_BO_GART |
				 NOUVEAU_BO_RD, 0,
				 NV20_3D_VTXBUF_OFFSET_DMA1);
	}
}

static void
nv20_render_release_vertices(struct gl_context *ctx)
{
	PUSH_RESET(context_push(ctx), BUFCTX_VTX);
}

/* Vertex array rendering defs. */
#define RENDER_LOCALS(ctx)

#define BATCH_VALIDATE()						\
	BEGIN_NV04(push, NV20_3D(VTXBUF_VALIDATE), 1);	\
	PUSH_DATA (push, 0)

#define BATCH_BEGIN(prim)					\
	BEGIN_NV04(push, NV20_3D(VERTEX_BEGIN_END), 1);	\
	PUSH_DATA (push, prim)
#define BATCH_END()						\
	BEGIN_NV04(push, NV20_3D(VERTEX_BEGIN_END), 1);	\
	PUSH_DATA (push, 0)

#define MAX_PACKET 0x400

#define MAX_OUT_L 0x100
#define BATCH_PACKET_L(n)						\
	BEGIN_NI04(push, NV20_3D(VTXBUF_BATCH), n)
#define BATCH_OUT_L(i, n)			\
	PUSH_DATA (push, ((n) - 1) << 24 | (i))

#define MAX_OUT_I16 0x2
#define BATCH_PACKET_I16(n)					\
	BEGIN_NI04(push, NV20_3D(VTXBUF_ELEMENT_U16), n)
#define BATCH_OUT_I16(i0, i1)			\
	PUSH_DATA (push, (i1) << 16 | (i0))

#define MAX_OUT_I32 0x1
#define BATCH_PACKET_I32(n)					\
	BEGIN_NI04(push, NV20_3D(VTXBUF_ELEMENT_U32), n)
#define BATCH_OUT_I32(i)			\
	PUSH_DATA (push, i)

#define IMM_PACKET(m, n)			\
	BEGIN_NV04(push, SUBC_3D(m), n)
#define IMM_OUT(x)				\
	PUSH_DATAf(push, x)

#define TAG(x) nv20_##x
#include "nouveau_render_t.c"
#include "nouveau_vbo_t.c"
#include "nouveau_swtnl_t.c"
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d136 1
a136 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *kelvin = context_eng3d(ctx);
d152 2
a153 2
		BEGIN_RING(chan, kelvin, NV20_3D_VTXBUF_FMT(i), 1);
		OUT_RING(chan, hw_format);
d161 1
a161 2
	struct nouveau_bo_context *bctx = context_bctx(ctx, VERTEX);
	struct nouveau_grobj *kelvin = context_eng3d(ctx);
d167 6
a172 6
		nouveau_bo_mark(bctx, kelvin,
				NV20_3D_VTXBUF_OFFSET(i),
				a->bo, a->offset, 0,
				0, NV20_3D_VTXBUF_OFFSET_DMA1,
				NOUVEAU_BO_LOW | NOUVEAU_BO_OR |
				NOUVEAU_BO_GART | NOUVEAU_BO_RD);
d176 6
d183 1
a183 2
#define RENDER_LOCALS(ctx)					\
	struct nouveau_grobj *kelvin = context_eng3d(ctx)
d186 2
a187 2
	BEGIN_RING(chan, kelvin, NV20_3D_VTXBUF_VALIDATE, 1);	\
	OUT_RING(chan, 0)
d190 2
a191 2
	BEGIN_RING(chan, kelvin, NV20_3D_VERTEX_BEGIN_END, 1);	\
	OUT_RING(chan, prim)
d193 2
a194 2
	BEGIN_RING(chan, kelvin, NV20_3D_VERTEX_BEGIN_END, 1);	\
	OUT_RING(chan, 0)
d200 1
a200 1
	BEGIN_RING_NI(chan, kelvin, NV20_3D_VTXBUF_BATCH, n)
d202 1
a202 1
	OUT_RING(chan, ((n) - 1) << 24 | (i))
d206 1
a206 1
	BEGIN_RING_NI(chan, kelvin, NV20_3D_VTXBUF_ELEMENT_U16, n)
d208 1
a208 1
	OUT_RING(chan, (i1) << 16 | (i0))
d212 1
a212 1
	BEGIN_RING_NI(chan, kelvin, NV20_3D_VTXBUF_ELEMENT_U32, n)
d214 1
a214 1
	OUT_RING(chan, i)
d217 1
a217 1
	BEGIN_RING(chan, kelvin, m, n)
d219 1
a219 1
	OUT_RINGf(chan, x)
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d29 1
a29 1
#include "nouveau_class.h"
d35 1
a35 1
nv20_emit_material(GLcontext *ctx, struct nouveau_array_state *a,
d42 1
a42 1
		.imm_method = NV20TCL_VERTEX_POS_4F_X,
d47 1
a47 1
		.imm_method = NV20TCL_VERTEX_NOR_3F_X,
d52 1
a52 1
		.imm_method = NV20TCL_VERTEX_COL_4F_X,
d57 1
a57 1
		.imm_method = NV20TCL_VERTEX_COL2_3F_X,
d62 1
a62 1
		.imm_method = NV20TCL_VERTEX_FOG_1F,
d67 1
a67 1
		.imm_method = NV20TCL_VERTEX_TX0_4F_S,
d72 1
a72 1
		.imm_method = NV20TCL_VERTEX_TX1_4F_S,
d77 1
a77 1
		.imm_method = NV20TCL_VERTEX_TX2_4F_S,
d82 1
a82 1
		.imm_method = NV20TCL_VERTEX_TX3_4F_S,
d122 1
a122 1
		return NV20TCL_VTXFMT_TYPE_FLOAT;
d124 1
a124 1
		return NV20TCL_VTXFMT_TYPE_USHORT;
d126 1
a126 1
		return NV20TCL_VTXFMT_TYPE_UBYTE;
d133 1
a133 1
nv20_render_set_format(GLcontext *ctx)
d138 1
a138 4
	int i, hw_format;

	for (i = 0; i < NUM_VERTEX_ATTRS; i++) {
		int attr = render->map[i];
d140 1
d142 1
a142 1
			struct nouveau_array_state *a = &render->attrs[attr];
d150 1
a150 1
			hw_format = NV10TCL_VTXFMT_TYPE_FLOAT;
d153 1
a153 1
		BEGIN_RING(chan, kelvin, NV20TCL_VTXFMT(i), 1);
d159 1
a159 1
nv20_render_bind_vertices(GLcontext *ctx)
a162 1
	struct nouveau_channel *chan = context_chan(ctx);
d164 1
a164 1
	int i;
d166 2
a167 5
	for (i = 0; i < NUM_VERTEX_ATTRS; i++) {
		int attr = render->map[i];

		if (attr >= 0) {
			struct nouveau_array_state *a = &render->attrs[attr];
d169 6
a174 7
			nouveau_bo_mark(bctx, kelvin,
					NV20TCL_VTXBUF_ADDRESS(i),
					a->bo, a->offset, 0,
					0, NV20TCL_VTXBUF_ADDRESS_DMA1,
					NOUVEAU_BO_LOW | NOUVEAU_BO_OR |
					NOUVEAU_BO_GART | NOUVEAU_BO_RD);
		}
a175 3

	BEGIN_RING(chan, kelvin, NV20TCL_VTX_CACHE_INVALIDATE, 1);
	OUT_RING(chan, 0);
d182 4
d187 2
a188 2
	BEGIN_RING(chan, kelvin, NV20TCL_VERTEX_BEGIN_END, 1);	\
	OUT_RING(chan, prim);
d190 2
a191 2
	BEGIN_RING(chan, kelvin, NV20TCL_VERTEX_BEGIN_END, 1);	\
	OUT_RING(chan, 0);
d197 1
a197 1
	BEGIN_RING_NI(chan, kelvin, NV20TCL_VB_VERTEX_BATCH, n);
d199 1
a199 1
	OUT_RING(chan, ((n) - 1) << 24 | (i));
d203 1
a203 1
	BEGIN_RING_NI(chan, kelvin, NV20TCL_VB_ELEMENT_U16, n);
d205 1
a205 1
	OUT_RING(chan, (i1) << 16 | (i0));
d209 1
a209 1
	BEGIN_RING_NI(chan, kelvin, NV20TCL_VB_ELEMENT_U32, n);
d211 1
a211 1
	OUT_RING(chan, i);
d214 1
a214 1
	BEGIN_RING(chan, kelvin, m, n);
d216 1
a216 1
	OUT_RINGf(chan, x);
d220 2
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d29 1
a29 1
#include "nv20_3d.xml.h"
d35 1
a35 1
nv20_emit_material(struct gl_context *ctx, struct nouveau_array *a,
d42 1
a42 1
		.imm_method = NV20_3D_VERTEX_POS_4F_X,
d47 1
a47 1
		.imm_method = NV20_3D_VERTEX_NOR_3F_X,
d52 1
a52 1
		.imm_method = NV20_3D_VERTEX_COL_4F,
d57 1
a57 1
		.imm_method = NV20_3D_VERTEX_COL2_3F,
d62 1
a62 1
		.imm_method = NV20_3D_VERTEX_FOG_1F,
d67 1
a67 1
		.imm_method = NV20_3D_VERTEX_TX0_4F_S,
d72 1
a72 1
		.imm_method = NV20_3D_VERTEX_TX1_4F_S,
d77 1
a77 1
		.imm_method = NV20_3D_VERTEX_TX2_4F_S,
d82 1
a82 1
		.imm_method = NV20_3D_VERTEX_TX3_4F_S,
d122 1
a122 1
		return NV20_3D_VTXBUF_FMT_TYPE_FLOAT;
d124 1
a124 1
		return NV20_3D_VTXBUF_FMT_TYPE_USHORT;
d126 1
a126 1
		return NV20_3D_VTXBUF_FMT_TYPE_UBYTE;
d133 1
a133 1
nv20_render_set_format(struct gl_context *ctx)
d138 4
a141 1
	int i, attr, hw_format;
a142 1
	FOR_EACH_ATTR(render, i, attr) {
d144 1
a144 1
			struct nouveau_array *a = &render->attrs[attr];
d152 1
a152 1
			hw_format = NV20_3D_VTXBUF_FMT_TYPE_FLOAT;
d155 1
a155 1
		BEGIN_RING(chan, kelvin, NV20_3D_VTXBUF_FMT(i), 1);
d161 1
a161 1
nv20_render_bind_vertices(struct gl_context *ctx)
d165 1
d167 1
a167 1
	int i, attr;
d169 5
a173 2
	FOR_EACH_BOUND_ATTR(render, i, attr) {
		struct nouveau_array *a = &render->attrs[attr];
d175 7
a181 6
		nouveau_bo_mark(bctx, kelvin,
				NV20_3D_VTXBUF_OFFSET(i),
				a->bo, a->offset, 0,
				0, NV20_3D_VTXBUF_OFFSET_DMA1,
				NOUVEAU_BO_LOW | NOUVEAU_BO_OR |
				NOUVEAU_BO_GART | NOUVEAU_BO_RD);
d183 3
a191 4
#define BATCH_VALIDATE()						\
	BEGIN_RING(chan, kelvin, NV20_3D_VTXBUF_VALIDATE, 1);	\
	OUT_RING(chan, 0)

d193 2
a194 2
	BEGIN_RING(chan, kelvin, NV20_3D_VERTEX_BEGIN_END, 1);	\
	OUT_RING(chan, prim)
d196 2
a197 2
	BEGIN_RING(chan, kelvin, NV20_3D_VERTEX_BEGIN_END, 1);	\
	OUT_RING(chan, 0)
d203 1
a203 1
	BEGIN_RING_NI(chan, kelvin, NV20_3D_VTXBUF_BATCH, n)
d205 1
a205 1
	OUT_RING(chan, ((n) - 1) << 24 | (i))
d209 1
a209 1
	BEGIN_RING_NI(chan, kelvin, NV20_3D_VTXBUF_ELEMENT_U16, n)
d211 1
a211 1
	OUT_RING(chan, (i1) << 16 | (i0))
d215 1
a215 1
	BEGIN_RING_NI(chan, kelvin, NV20_3D_VTXBUF_ELEMENT_U32, n)
d217 1
a217 1
	OUT_RING(chan, i)
d220 1
a220 1
	BEGIN_RING(chan, kelvin, m, n)
d222 1
a222 1
	OUT_RINGf(chan, x)
a225 2
#include "nouveau_vbo_t.c"
#include "nouveau_swtnl_t.c"
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d136 2
a137 1
	struct nouveau_pushbuf *push = context_push(ctx);
d153 2
a154 2
		BEGIN_NV04(push, NV20_3D(VTXBUF_FMT(i)), 1);
		PUSH_DATA (push, hw_format);
d162 2
a163 1
	struct nouveau_pushbuf *push = context_push(ctx);
d169 6
a174 6
		BEGIN_NV04(push, NV20_3D(VTXBUF_OFFSET(i)), 1);
		PUSH_MTHD (push, NV20_3D(VTXBUF_OFFSET(i)), BUFCTX_VTX,
				 a->bo, a->offset, NOUVEAU_BO_LOW |
				 NOUVEAU_BO_OR | NOUVEAU_BO_GART |
				 NOUVEAU_BO_RD, 0,
				 NV20_3D_VTXBUF_OFFSET_DMA1);
a177 6
static void
nv20_render_release_vertices(struct gl_context *ctx)
{
	PUSH_RESET(context_push(ctx), BUFCTX_VTX);
}

d179 2
a180 1
#define RENDER_LOCALS(ctx)
d183 2
a184 2
	BEGIN_NV04(push, NV20_3D(VTXBUF_VALIDATE), 1);	\
	PUSH_DATA (push, 0)
d187 2
a188 2
	BEGIN_NV04(push, NV20_3D(VERTEX_BEGIN_END), 1);	\
	PUSH_DATA (push, prim)
d190 2
a191 2
	BEGIN_NV04(push, NV20_3D(VERTEX_BEGIN_END), 1);	\
	PUSH_DATA (push, 0)
d197 1
a197 1
	BEGIN_NI04(push, NV20_3D(VTXBUF_BATCH), n)
d199 1
a199 1
	PUSH_DATA (push, ((n) - 1) << 24 | (i))
d203 1
a203 1
	BEGIN_NI04(push, NV20_3D(VTXBUF_ELEMENT_U16), n)
d205 1
a205 1
	PUSH_DATA (push, (i1) << 16 | (i0))
d209 1
a209 1
	BEGIN_NI04(push, NV20_3D(VTXBUF_ELEMENT_U32), n)
d211 1
a211 1
	PUSH_DATA (push, i)
d214 1
a214 1
	BEGIN_NV04(push, SUBC_3D(m), n)
d216 1
a216 1
	PUSH_DATAf(push, x)
@


