head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.51;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2013.09.05.14.05.32;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.24;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.40;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.18;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.53.36;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.53.36;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.42;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.16.05;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************

Copyright 2000, 2001 ATI Technologies Inc., Ontario, Canada, and
                     VA Linux Systems Inc., Fremont, California.

All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

/*
 * Authors:
 *   Kevin E. Martin <martin@@valinux.com>
 *   Gareth Hughes <gareth@@valinux.com>
 */

#ifndef __RADEON_IOCTL_H__
#define __RADEON_IOCTL_H__

#include "main/simple_list.h"
#include "radeon_bo_gem.h"
#include "radeon_cs_gem.h"

extern void radeonEmitVertexAOS( r100ContextPtr rmesa,
				 GLuint vertex_size,
				 struct radeon_bo *bo,
				 GLuint offset );

extern void radeonEmitVbufPrim( r100ContextPtr rmesa,
				GLuint vertex_format,
				GLuint primitive,
				GLuint vertex_nr );

extern void radeonFlushElts( struct gl_context *ctx );
			    

extern GLushort *radeonAllocEltsOpenEnded( r100ContextPtr rmesa,
					   GLuint vertex_format,
					   GLuint primitive,
					   GLuint min_nr );


extern void radeonEmitAOS( r100ContextPtr rmesa,
			   GLuint n,
			   GLuint offset );

extern void radeonEmitBlit( r100ContextPtr rmesa,
			    GLuint color_fmt,
			    GLuint src_pitch,
			    GLuint src_offset,
			    GLuint dst_pitch,
			    GLuint dst_offset,
			    GLint srcx, GLint srcy,
			    GLint dstx, GLint dsty,
			    GLuint w, GLuint h );

extern void radeonEmitWait( r100ContextPtr rmesa, GLuint flags );

extern void radeonFlushCmdBuf( r100ContextPtr rmesa, const char * );

extern void radeonFlush( struct gl_context *ctx );
extern void radeonFinish( struct gl_context *ctx );
extern void radeonInitIoctlFuncs( struct gl_context *ctx );
extern void radeonGetAllParams( r100ContextPtr rmesa );
extern void radeonSetUpAtomList( r100ContextPtr rmesa );

/* ================================================================
 * Helper macros:
 */

/* Close off the last primitive, if it exists.
 */
#define RADEON_NEWPRIM( rmesa )			\
do {						\
   if ( rmesa->radeon.dma.flush )			\
      rmesa->radeon.dma.flush( &rmesa->radeon.glCtx );	\
} while (0)

/* Can accomodate several state changes and primitive changes without
 * actually firing the buffer.
 */

#define RADEON_STATECHANGE( rmesa, ATOM )			\
do {								\
   RADEON_NEWPRIM( rmesa );					\
   rmesa->hw.ATOM.dirty = GL_TRUE;				\
   rmesa->radeon.hw.is_dirty = GL_TRUE;				\
} while (0)

#define RADEON_DB_STATE( ATOM )				\
   memcpy( rmesa->hw.ATOM.lastcmd, rmesa->hw.ATOM.cmd,	\
	   rmesa->hw.ATOM.cmd_size * 4)

static INLINE int RADEON_DB_STATECHANGE(r100ContextPtr rmesa,
					struct radeon_state_atom *atom )
{
   if (memcmp(atom->cmd, atom->lastcmd, atom->cmd_size*4)) {
      GLuint *tmp;
      RADEON_NEWPRIM( rmesa );
      atom->dirty = GL_TRUE;
      rmesa->radeon.hw.is_dirty = GL_TRUE;
      tmp = atom->cmd; 
      atom->cmd = atom->lastcmd;
      atom->lastcmd = tmp;
      return 1;
   }
   else
      return 0;
}

/* Command lengths.  Note that any time you ensure ELTS_BUFSZ or VBUF_BUFSZ
 * are available, you will also be adding an rmesa->state.max_state_size because
 * r200EmitState is called from within r200EmitVbufPrim and r200FlushElts.
 */
#if RADEON_OLD_PACKETS
#define AOS_BUFSZ(nr)	((3 + ((nr / 2) * 3) + ((nr & 1) * 2))+nr*2)
#define VERT_AOS_BUFSZ	(0)
#define ELTS_BUFSZ(nr)	(24 + nr * 2)
#define VBUF_BUFSZ	(8)
#else
#define AOS_BUFSZ(nr)	((3 + ((nr / 2) * 3) + ((nr & 1) * 2) + nr*2))
#define VERT_AOS_BUFSZ	(5)
#define ELTS_BUFSZ(nr)	(16 + nr * 2)
#define VBUF_BUFSZ	(4)
#endif
#define SCISSOR_BUFSZ	(8)
#define INDEX_BUFSZ	(7)


static inline uint32_t cmdpacket3(int cmd_type)
{
  drm_radeon_cmd_header_t cmd;

  cmd.i = 0;
  cmd.header.cmd_type = cmd_type;

  return (uint32_t)cmd.i;

}

#define OUT_BATCH_PACKET3(packet, num_extra) do {	      \
    OUT_BATCH(CP_PACKET2);				      \
    OUT_BATCH(CP_PACKET3((packet), (num_extra)));	      \
  } while(0)

#define OUT_BATCH_PACKET3_CLIP(packet, num_extra) do {	      \
    OUT_BATCH(CP_PACKET2);				      \
    OUT_BATCH(CP_PACKET3((packet), (num_extra)));	      \
  } while(0)


#endif /* __RADEON_IOCTL_H__ */
@


1.6
log
@Merge Mesa 9.2.0
@
text
@@


1.5
log
@Merge Mesa 7.10.3
@
text
@d40 2
a41 2
#include "radeon_lock.h"
#include "radeon_bocs_wrapper.h"
d95 1
a95 1
      rmesa->radeon.dma.flush( rmesa->radeon.glCtx );	\
d161 2
a162 7
    if (!b_l_rmesa->radeonScreen->kernel_mm) {		      \
      OUT_BATCH(cmdpacket3(RADEON_CMD_PACKET3));				      \
      OUT_BATCH(CP_PACKET3((packet), (num_extra)));	      \
    } else {						      \
      OUT_BATCH(CP_PACKET2);				      \
      OUT_BATCH(CP_PACKET3((packet), (num_extra)));	      \
    }							      \
d166 2
a167 7
    if (!b_l_rmesa->radeonScreen->kernel_mm) {		      \
      OUT_BATCH(cmdpacket3(RADEON_CMD_PACKET3_CLIP));	      \
      OUT_BATCH(CP_PACKET3((packet), (num_extra)));	      \
    } else {						      \
      OUT_BATCH(CP_PACKET2);				      \
      OUT_BATCH(CP_PACKET3((packet), (num_extra)));	      \
    }							      \
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d53 1
a53 1
extern void radeonFlushElts( GLcontext *ctx );
d80 3
a82 3
extern void radeonFlush( GLcontext *ctx );
extern void radeonFinish( GLcontext *ctx );
extern void radeonInitIoctlFuncs( GLcontext *ctx );
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d41 1
d43 1
a43 3

extern void radeonEmitState( radeonContextPtr rmesa );
extern void radeonEmitVertexAOS( radeonContextPtr rmesa,
d45 1
d48 1
a48 1
extern void radeonEmitVbufPrim( radeonContextPtr rmesa,
d53 2
a54 1
extern void radeonFlushElts( radeonContextPtr rmesa );
d56 1
a56 1
extern GLushort *radeonAllocEltsOpenEnded( radeonContextPtr rmesa,
d61 2
a62 2
extern void radeonEmitAOS( radeonContextPtr rmesa,
			   struct radeon_dma_region **regions,
d66 1
a66 1
extern void radeonEmitBlit( radeonContextPtr rmesa,
d76 1
a76 1
extern void radeonEmitWait( radeonContextPtr rmesa, GLuint flags );
d78 1
a78 2
extern void radeonFlushCmdBuf( radeonContextPtr rmesa, const char * );
extern void radeonRefillCurrentDmaRegion( radeonContextPtr rmesa );
a79 12
extern void radeonAllocDmaRegion( radeonContextPtr rmesa,
				  struct radeon_dma_region *region,
				  int bytes, 
				  int alignment );

extern void radeonReleaseDmaRegion( radeonContextPtr rmesa,
				    struct radeon_dma_region *region,
				    const char *caller );

extern void radeonCopyBuffer( __DRIdrawablePrivate *drawable,
			      const drm_clip_rect_t	 *rect);
extern void radeonPageFlip( __DRIdrawablePrivate *drawable );
a81 2
extern void radeonWaitForIdleLocked( radeonContextPtr rmesa );
extern void radeonWaitForVBlank( radeonContextPtr rmesa );
d83 2
a84 2
extern void radeonGetAllParams( radeonContextPtr rmesa );
extern void radeonSetUpAtomList( radeonContextPtr rmesa );
d94 2
a95 2
   if ( rmesa->dma.flush )			\
      rmesa->dma.flush( rmesa );	\
d101 1
d106 1
a106 1
   rmesa->hw.is_dirty = GL_TRUE;				\
d109 1
a109 1
#define RADEON_DB_STATE( ATOM )			        \
d113 2
a114 3
static INLINE int RADEON_DB_STATECHANGE( 
   radeonContextPtr rmesa,
   struct radeon_state_atom *atom )
d117 1
a117 1
      int *tmp;
d120 1
a120 1
      rmesa->hw.is_dirty = GL_TRUE;
a129 10

/* Fire the buffered vertices no matter what.
 */
#define RADEON_FIREVERTICES( rmesa )			\
do {							\
   if ( rmesa->store.cmd_used || rmesa->dma.flush ) {	\
      radeonFlush( rmesa->glCtx );			\
   }							\
} while (0)

d135 1
a135 1
#define AOS_BUFSZ(nr)	((3 + ((nr / 2) * 3) + ((nr & 1) * 2)) * sizeof(int))
d138 1
a138 1
#define VBUF_BUFSZ	(6 * sizeof(int))
d140 2
a141 2
#define AOS_BUFSZ(nr)	((3 + ((nr / 2) * 3) + ((nr & 1) * 2)) * sizeof(int))
#define VERT_AOS_BUFSZ	(5 * sizeof(int))
d143 1
a143 1
#define VBUF_BUFSZ	(4 * sizeof(int))
d145 3
d149 1
a149 11
/* Ensure that a minimum amount of space is available in the command buffer.
 * This is used to ensure atomicity of state updates with the rendering requests
 * that rely on them.
 *
 * An alternative would be to implement a "soft lock" such that when the buffer
 * wraps at an inopportune time, we grab the lock, flush the current buffer,
 * and hang on to the lock until the critical section is finished and we flush
 * the buffer again and unlock.
 */
static INLINE void radeonEnsureCmdBufSpace( radeonContextPtr rmesa,
					      int bytes )
d151 7
a157 3
   if (rmesa->store.cmd_used + bytes > RADEON_CMD_BUF_SZ)
      radeonFlushCmdBuf( rmesa, __FUNCTION__ );
   assert( bytes <= RADEON_CMD_BUF_SZ );
d160 19
a178 7
/* Alloc space in the command buffer
 */
static INLINE char *radeonAllocCmdBuf( radeonContextPtr rmesa,
					 int bytes, const char *where )
{
   if (rmesa->store.cmd_used + bytes > RADEON_CMD_BUF_SZ)
      radeonFlushCmdBuf( rmesa, __FUNCTION__ );
a179 6
   {
      char *head = rmesa->store.cmd_buf + rmesa->store.cmd_used;
      rmesa->store.cmd_used += bytes;
      return head;
   }
}
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a0 1
/* $XFree86: xc/lib/GL/mesa/src/drv/radeon/radeon_ioctl.h,v 1.6 2002/12/16 16:18:58 dawes Exp $ */
d39 1
a39 1
#include "simple_list.h"
@


1.1
log
@Initial revision
@
text
@d90 1
a90 1
extern void radeonCopyBuffer( const __DRIdrawablePrivate *drawable,
d92 1
a92 1
extern void radeonPageFlip( const __DRIdrawablePrivate *drawable );
d127 1
a127 1
static __inline int RADEON_DB_STATECHANGE( 
d180 1
a180 1
static __inline void radeonEnsureCmdBufSpace( radeonContextPtr rmesa,
d190 1
a190 1
static __inline char *radeonAllocCmdBuf( radeonContextPtr rmesa,
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d1 1
d40 1
a40 1
#include "main/simple_list.h"
a41 1
#include "radeon_bocs_wrapper.h"
d43 3
a45 1
extern void radeonEmitVertexAOS( r100ContextPtr rmesa,
a46 1
				 struct radeon_bo *bo,
d49 1
a49 1
extern void radeonEmitVbufPrim( r100ContextPtr rmesa,
d54 1
a54 2
extern void radeonFlushElts( struct gl_context *ctx );
			    
d56 1
a56 1
extern GLushort *radeonAllocEltsOpenEnded( r100ContextPtr rmesa,
d61 2
a62 2

extern void radeonEmitAOS( r100ContextPtr rmesa,
d66 1
a66 1
extern void radeonEmitBlit( r100ContextPtr rmesa,
d76 1
a76 1
extern void radeonEmitWait( r100ContextPtr rmesa, GLuint flags );
d78 2
a79 1
extern void radeonFlushCmdBuf( r100ContextPtr rmesa, const char * );
d81 19
a99 5
extern void radeonFlush( struct gl_context *ctx );
extern void radeonFinish( struct gl_context *ctx );
extern void radeonInitIoctlFuncs( struct gl_context *ctx );
extern void radeonGetAllParams( r100ContextPtr rmesa );
extern void radeonSetUpAtomList( r100ContextPtr rmesa );
d109 2
a110 2
   if ( rmesa->radeon.dma.flush )			\
      rmesa->radeon.dma.flush( rmesa->radeon.glCtx );	\
a115 1

d120 1
a120 1
   rmesa->radeon.hw.is_dirty = GL_TRUE;				\
d123 1
a123 1
#define RADEON_DB_STATE( ATOM )				\
d127 3
a129 2
static INLINE int RADEON_DB_STATECHANGE(r100ContextPtr rmesa,
					struct radeon_state_atom *atom )
d132 1
a132 1
      GLuint *tmp;
d135 1
a135 1
      rmesa->radeon.hw.is_dirty = GL_TRUE;
d145 10
d160 1
a160 1
#define AOS_BUFSZ(nr)	((3 + ((nr / 2) * 3) + ((nr & 1) * 2))+nr*2)
d163 1
a163 1
#define VBUF_BUFSZ	(8)
d165 2
a166 2
#define AOS_BUFSZ(nr)	((3 + ((nr / 2) * 3) + ((nr & 1) * 2) + nr*2))
#define VERT_AOS_BUFSZ	(5)
d168 1
a168 1
#define VBUF_BUFSZ	(4)
a169 2
#define SCISSOR_BUFSZ	(8)
#define INDEX_BUFSZ	(7)
d171 16
d188 4
a191 1
static inline uint32_t cmdpacket3(int cmd_type)
d193 2
a194 6
  drm_radeon_cmd_header_t cmd;

  cmd.i = 0;
  cmd.header.cmd_type = cmd_type;

  return (uint32_t)cmd.i;
d196 5
a201 21

#define OUT_BATCH_PACKET3(packet, num_extra) do {	      \
    if (!b_l_rmesa->radeonScreen->kernel_mm) {		      \
      OUT_BATCH(cmdpacket3(RADEON_CMD_PACKET3));				      \
      OUT_BATCH(CP_PACKET3((packet), (num_extra)));	      \
    } else {						      \
      OUT_BATCH(CP_PACKET2);				      \
      OUT_BATCH(CP_PACKET3((packet), (num_extra)));	      \
    }							      \
  } while(0)

#define OUT_BATCH_PACKET3_CLIP(packet, num_extra) do {	      \
    if (!b_l_rmesa->radeonScreen->kernel_mm) {		      \
      OUT_BATCH(cmdpacket3(RADEON_CMD_PACKET3_CLIP));	      \
      OUT_BATCH(CP_PACKET3((packet), (num_extra)));	      \
    } else {						      \
      OUT_BATCH(CP_PACKET2);				      \
      OUT_BATCH(CP_PACKET3((packet), (num_extra)));	      \
    }							      \
  } while(0)

@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d40 2
a41 2
#include "radeon_bo_gem.h"
#include "radeon_cs_gem.h"
d95 1
a95 1
      rmesa->radeon.dma.flush( &rmesa->radeon.glCtx );	\
d161 7
a167 2
    OUT_BATCH(CP_PACKET2);				      \
    OUT_BATCH(CP_PACKET3((packet), (num_extra)));	      \
d171 7
a177 2
    OUT_BATCH(CP_PACKET2);				      \
    OUT_BATCH(CP_PACKET3((packet), (num_extra)));	      \
@


