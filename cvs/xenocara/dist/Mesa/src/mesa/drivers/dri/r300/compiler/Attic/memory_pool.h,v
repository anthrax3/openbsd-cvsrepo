head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.09.05.14.05.06;	author jsg;	state dead;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.41;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@/*
 * Copyright 2009 Nicolai HÃ¤hnle <nhaehnle@@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHOR(S) AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE. */

#ifndef MEMORY_POOL_H
#define MEMORY_POOL_H

struct memory_block;

/**
 * Provides a pool of memory that can quickly be allocated from, at the
 * cost of being unable to explicitly free one of the allocated blocks.
 * Instead, the entire pool can be freed at once.
 *
 * The idea is to allow one to quickly allocate a flexible amount of
 * memory during operations like shader compilation while avoiding
 * reference counting headaches.
 */
struct memory_pool {
	unsigned char * head;
	unsigned char * end;
	unsigned int total_allocated;
	struct memory_block * blocks;
};


void memory_pool_init(struct memory_pool * pool);
void memory_pool_destroy(struct memory_pool * pool);
void * memory_pool_malloc(struct memory_pool * pool, unsigned int bytes);


/**
 * Generic helper for growing an array that has separate size/count
 * and reserved counters to accomodate up to num new element.
 *
 *  type * Array;
 *  unsigned int Size;
 *  unsigned int Reserved;
 *
 * memory_pool_array_reserve(pool, type, Array, Size, Reserved, k);
 * assert(Size + k < Reserved);
 *
 * \note Size is not changed by this macro.
 *
 * \warning Array, Size, Reserved have to be lvalues and may be evaluated
 * several times.
 */
#define memory_pool_array_reserve(pool, type, array, size, reserved, num) do { \
	unsigned int _num = (num); \
	if ((size) + _num > (reserved)) { \
		unsigned int newreserve = (reserved) * 2; \
		type * newarray; \
		if (newreserve < _num) \
			newreserve = 4 * _num; /* arbitrary heuristic */ \
		newarray = memory_pool_malloc((pool), newreserve * sizeof(type)); \
		memcpy(newarray, (array), (size) * sizeof(type)); \
		(array) = newarray; \
		(reserved) = newreserve; \
	} \
} while(0)

#endif /* MEMORY_POOL_H */
@


1.2
log
@Merge Mesa 7.10.3
@
text
@@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d49 31
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a48 31

/**
 * Generic helper for growing an array that has separate size/count
 * and reserved counters to accomodate up to num new element.
 *
 *  type * Array;
 *  unsigned int Size;
 *  unsigned int Reserved;
 *
 * memory_pool_array_reserve(pool, type, Array, Size, Reserved, k);
 * assert(Size + k < Reserved);
 *
 * \note Size is not changed by this macro.
 *
 * \warning Array, Size, Reserved have to be lvalues and may be evaluated
 * several times.
 */
#define memory_pool_array_reserve(pool, type, array, size, reserved, num) do { \
	unsigned int _num = (num); \
	if ((size) + _num > (reserved)) { \
		unsigned int newreserve = (reserved) * 2; \
		type * newarray; \
		if (newreserve < _num) \
			newreserve = 4 * _num; /* arbitrary heuristic */ \
		newarray = memory_pool_malloc((pool), newreserve * sizeof(type)); \
		memcpy(newarray, (array), (size) * sizeof(type)); \
		(array) = newarray; \
		(reserved) = newreserve; \
	} \
} while(0)

@

