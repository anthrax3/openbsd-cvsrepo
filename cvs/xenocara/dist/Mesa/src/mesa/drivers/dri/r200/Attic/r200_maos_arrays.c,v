head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.6
	v10_2_7:1.1.1.6
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	v10_2_3:1.1.1.6
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.5
	v9_2_3:1.1.1.5
	v9_2_2:1.1.1.5
	v9_2_1:1.1.1.5
	v9_2_0:1.1.1.5
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	WPD6rgPryPkvXOr9;

1.6
date	2013.09.05.14.04.58;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.40;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.17;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.53.13;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.53.13;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.57.24;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.29.13;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.40;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.09.05.13.15.58;	author jsg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.07.09.20.34.55;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
Copyright (C) The Weather Channel, Inc.  2002.  All Rights Reserved.

The Weather Channel (TM) funded Tungsten Graphics to develop the
initial release of the Radeon 8500 driver under the XFree86 license.
This notice must be preserved.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

/*
 * Authors:
 *   Keith Whitwell <keithw@@vmware.com>
 */

#include "main/glheader.h"
#include "main/mtypes.h"
#include "main/colormac.h"
#include "main/imports.h"
#include "main/macros.h"

#include "swrast_setup/swrast_setup.h"
#include "math/m_translate.h"
#include "tnl/tnl.h"
#include "tnl/t_context.h"

#include "r200_context.h"
#include "r200_ioctl.h"
#include "r200_state.h"
#include "r200_swtcl.h"
#include "r200_maos.h"
#include "r200_tcl.h"

#if defined(USE_X86_ASM)
#define COPY_DWORDS( dst, src, nr )					\
do {									\
	int __tmp;							\
	__asm__ __volatile__( "rep ; movsl"				\
			      : "=%c" (__tmp), "=D" (dst), "=S" (__tmp)	\
			      : "0" (nr),				\
			        "D" ((long)dst),			\
			        "S" ((long)src) );			\
} while (0)
#else
#define COPY_DWORDS( dst, src, nr )		\
do {						\
   int j;					\
   for ( j = 0 ; j < nr ; j++ )			\
      dst[j] = ((int *)src)[j];			\
   dst += nr;					\
} while (0)
#endif

/* Emit any changed arrays to new GART memory, re-emit a packet to
 * update the arrays.  
 */
void r200EmitArrays( struct gl_context *ctx, GLubyte *vimap_rev )
{
   r200ContextPtr rmesa = R200_CONTEXT( ctx );
   struct vertex_buffer *VB = &TNL_CONTEXT( ctx )->vb;
   GLuint nr = 0;
   GLuint vfmt0 = 0, vfmt1 = 0;
   GLuint count = VB->Count;
   GLuint i, emitsize;

   //   fprintf(stderr,"emit arrays\n");
   for ( i = 0; i < 15; i++ ) {
      GLubyte attrib = vimap_rev[i];
      if (attrib != 255) {
	 switch (i) {
	 case 0:
	    emitsize = (VB->AttribPtr[attrib]->size);
	    switch (emitsize) {
	    case 4:
	       vfmt0 |= R200_VTX_W0;
	       /* fallthrough */
	    case 3:
	       vfmt0 |= R200_VTX_Z0;
	       break;
	    case 2:
	       break;
	    default: assert(0);
	    }
	    break;
	 case 1:
	    assert(attrib == VERT_ATTRIB_WEIGHT);
	    emitsize = (VB->AttribPtr[attrib]->size);
	    vfmt0 |= emitsize << R200_VTX_WEIGHT_COUNT_SHIFT;
	    break;
	 case 2:
	    assert(attrib == VERT_ATTRIB_NORMAL);
	    emitsize = 3;
	    vfmt0 |= R200_VTX_N0;
	    break;
	 case 3:
	    /* special handling to fix up fog. Will get us into trouble with vbos...*/
	    assert(attrib == VERT_ATTRIB_FOG);
	    if (!rmesa->radeon.tcl.aos[i].bo) {
	       if (ctx->VertexProgram._Enabled)
		  rcommon_emit_vector( ctx,
				       &(rmesa->radeon.tcl.aos[nr]),
				       (char *)VB->AttribPtr[attrib]->data,
				       1,
				       VB->AttribPtr[attrib]->stride,
				       count);
	       else
		 rcommon_emit_vecfog( ctx,
				      &(rmesa->radeon.tcl.aos[nr]),
				      (char *)VB->AttribPtr[attrib]->data,
				      VB->AttribPtr[attrib]->stride,
				      count);
	    }
	    vfmt0 |= R200_VTX_DISCRETE_FOG;
	    goto after_emit;
	    break;
	 case 4:
	 case 5:
	 case 6:
	 case 7:
	    if (VB->AttribPtr[attrib]->size == 4 &&
	       (VB->AttribPtr[attrib]->stride != 0 ||
		VB->AttribPtr[attrib]->data[0][3] != 1.0)) emitsize = 4;
	    else emitsize = 3;
	    if (emitsize == 4)
	       vfmt0 |= R200_VTX_FP_RGBA << (R200_VTX_COLOR_0_SHIFT + (i - 4) * 2);
	    else {
	       vfmt0 |= R200_VTX_FP_RGB << (R200_VTX_COLOR_0_SHIFT + (i - 4) * 2);
	    }
	    break;
	 case 8:
	 case 9:
	 case 10:
	 case 11:
	 case 12:
	 case 13:
	    emitsize = VB->AttribPtr[attrib]->size;
	    vfmt1 |= emitsize << (R200_VTX_TEX0_COMP_CNT_SHIFT + (i - 8) * 3);
	    break;
	 case 14:
	    emitsize = VB->AttribPtr[attrib]->size >= 2 ? VB->AttribPtr[attrib]->size : 2;
	    switch (emitsize) {
	    case 2:
	       vfmt0 |= R200_VTX_XY1;
	       /* fallthrough */
	    case 3:
	       vfmt0 |= R200_VTX_Z1;
	       /* fallthrough */
	    case 4:
	       vfmt0 |= R200_VTX_W1;
	       /* fallthrough */
	    }
	    break;
	 default:
	    assert(0);
	    emitsize = 0;
	 }
	 if (!rmesa->radeon.tcl.aos[nr].bo) {
	   rcommon_emit_vector( ctx,
				&(rmesa->radeon.tcl.aos[nr]),
				(char *)VB->AttribPtr[attrib]->data,
				emitsize,
				VB->AttribPtr[attrib]->stride,
				count );
	 }
after_emit:
	 assert(nr < 12);
	 nr++;
      }
   }

   if (vfmt0 != rmesa->hw.vtx.cmd[VTX_VTXFMT_0] ||
       vfmt1 != rmesa->hw.vtx.cmd[VTX_VTXFMT_1]) {
      R200_STATECHANGE( rmesa, vtx );
      rmesa->hw.vtx.cmd[VTX_VTXFMT_0] = vfmt0;
      rmesa->hw.vtx.cmd[VTX_VTXFMT_1] = vfmt1;
   }

   rmesa->radeon.tcl.aos_count = nr;
}

@


1.7
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.6
log
@Merge Mesa 9.2.0
@
text
@d32 1
a32 1
 *   Keith Whitwell <keith@@tungstengraphics.com>
@


1.5
log
@Merge Mesa 7.10.3
@
text
@a72 30
static void r200_emit_vecfog(struct gl_context *ctx, struct radeon_aos *aos,
			     GLvoid *data, int stride, int count)
{
	radeonContextPtr rmesa = RADEON_CONTEXT(ctx);
	GLfloat *out;
	int i;
	int size = 1;

	if (stride == 0) {
		radeonAllocDmaRegion(rmesa, &aos->bo, &aos->offset, size * 4, 32);
		count = 1;
		aos->stride = 0;
	} else {
		radeonAllocDmaRegion(rmesa, &aos->bo, &aos->offset, size * 4, 32);
		aos->stride = size;
	}

	aos->components = size;
	aos->count = count;

	radeon_bo_map(aos->bo, 1);
	out = (GLfloat*)((char*)aos->bo->ptr + aos->offset);
	for (i = 0; i < count; i++) {
	  out[0] = r200ComputeFogBlendFactor( ctx, *(GLfloat *)data );
	  out++;
	  data += stride;
	}
	radeon_bo_unmap(aos->bo);
}

d126 5
a130 5
		 r200_emit_vecfog( ctx,
				   &(rmesa->radeon.tcl.aos[nr]),
				   (char *)VB->AttribPtr[attrib]->data,
				   VB->AttribPtr[attrib]->stride,
				   count);
d169 2
a171 1
	    }
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d73 1
a73 1
static void r200_emit_vecfog(GLcontext *ctx, struct radeon_aos *aos,
d106 1
a106 1
void r200EmitArrays( GLcontext *ctx, GLubyte *vimap_rev )
d203 1
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a52 104

#if 0
/* Usage:
 *   - from r200_tcl_render
 *   - call r200EmitArrays to ensure uptodate arrays in dma
 *   - emit primitives (new type?) which reference the data
 *       -- need to use elts for lineloop, quads, quadstrip/flat
 *       -- other primitives are all well-formed (need tristrip-1,fake-poly)
 *
 */
static void emit_ubyte_rgba3( GLcontext *ctx,
		       struct r200_dma_region *rvb,
		       char *data,
		       int stride,
		       int count )
{
   int i;
   r200_color_t *out = (r200_color_t *)(rvb->start + rvb->address);

   if (R200_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d stride %d out %p\n",
	      __FUNCTION__, count, stride, (void *)out);

   for (i = 0; i < count; i++) {
      out->red   = *data;
      out->green = *(data+1);
      out->blue  = *(data+2);
      out->alpha = 0xFF;
      out++;
      data += stride;
   }
}

static void emit_ubyte_rgba4( GLcontext *ctx,
			      struct r200_dma_region *rvb,
			      char *data,
			      int stride,
			      int count )
{
   int i;
   int *out = (int *)(rvb->address + rvb->start);

   if (R200_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d stride %d\n",
	      __FUNCTION__, count, stride);

   if (stride == 4) {
      for (i = 0; i < count; i++)
	 ((int *)out)[i] = LE32_TO_CPU(((int *)data)[i]);
   } else {
      for (i = 0; i < count; i++) {
	 *(int *)out++ = LE32_TO_CPU(*(int *)data);
	 data += stride;
      }
   }
}


static void emit_ubyte_rgba( GLcontext *ctx,
			     struct r200_dma_region *rvb,
			     char *data,
			     int size,
			     int stride,
			     int count )
{
   r200ContextPtr rmesa = R200_CONTEXT(ctx);

   if (R200_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s %d/%d\n", __FUNCTION__, count, size);

   assert (!rvb->buf);

   if (stride == 0) {
      r200AllocDmaRegion( rmesa, rvb, 4, 4 );
      count = 1;
      rvb->aos_start = GET_START(rvb);
      rvb->aos_stride = 0;
      rvb->aos_size = 1;
   }
   else {
      r200AllocDmaRegion( rmesa, rvb, 4 * count, 4 );	/* alignment? */
      rvb->aos_start = GET_START(rvb);
      rvb->aos_stride = 1;
      rvb->aos_size = 1;
   }

   /* Emit the data
    */
   switch (size) {
   case 3:
      emit_ubyte_rgba3( ctx, rvb, data, stride, count );
      break;
   case 4:
      emit_ubyte_rgba4( ctx, rvb, data, stride, count );
      break;
   default:
      assert(0);
      exit(1);
      break;
   }
}
#endif


d73 2
a74 6

static void emit_vecfog( GLcontext *ctx,
			 struct r200_dma_region *rvb,
			 char *data,
			 int stride,
			 int count )
d76 25
a100 34
   int i;
   GLfloat *out;

   r200ContextPtr rmesa = R200_CONTEXT(ctx);
   
   if (R200_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d stride %d\n",
	      __FUNCTION__, count, stride);

   assert (!rvb->buf);

   if (stride == 0) {
      r200AllocDmaRegion( rmesa, rvb, 4, 4 );
      count = 1;
      rvb->aos_start = GET_START(rvb);
      rvb->aos_stride = 0;
      rvb->aos_size = 1;
   }
   else {
      r200AllocDmaRegion( rmesa, rvb, count * 4, 4 );	/* alignment? */
      rvb->aos_start = GET_START(rvb);
      rvb->aos_stride = 1;
      rvb->aos_size = 1;
   }

   /* Emit the data
    */
   out = (GLfloat *)(rvb->address + rvb->start);
   for (i = 0; i < count; i++) {
      out[0] = r200ComputeFogBlendFactor( ctx, *(GLfloat *)data );
      out++;
      data += stride;
   }

a102 155

static void emit_vec4( GLcontext *ctx,
		       struct r200_dma_region *rvb,
		       char *data,
		       int stride,
		       int count )
{
   int i;
   int *out = (int *)(rvb->address + rvb->start);

   if (R200_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d stride %d\n",
	      __FUNCTION__, count, stride);

   if (stride == 4)
      COPY_DWORDS( out, data, count );
   else
      for (i = 0; i < count; i++) {
	 out[0] = *(int *)data;
	 out++;
	 data += stride;
      }
}


static void emit_vec8( GLcontext *ctx,
		       struct r200_dma_region *rvb,
		       char *data,
		       int stride,
		       int count )
{
   int i;
   int *out = (int *)(rvb->address + rvb->start);

   if (R200_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d stride %d\n",
	      __FUNCTION__, count, stride);

   if (stride == 8)
      COPY_DWORDS( out, data, count*2 );
   else
      for (i = 0; i < count; i++) {
	 out[0] = *(int *)data;
	 out[1] = *(int *)(data+4);
	 out += 2;
	 data += stride;
      }
}

static void emit_vec12( GLcontext *ctx,
		       struct r200_dma_region *rvb,
		       char *data,
		       int stride,
		       int count )
{
   int i;
   int *out = (int *)(rvb->address + rvb->start);

   if (R200_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d stride %d out %p data %p\n",
	      __FUNCTION__, count, stride, (void *)out, (void *)data);

   if (stride == 12)
      COPY_DWORDS( out, data, count*3 );
   else
      for (i = 0; i < count; i++) {
	 out[0] = *(int *)data;
	 out[1] = *(int *)(data+4);
	 out[2] = *(int *)(data+8);
	 out += 3;
	 data += stride;
      }
}

static void emit_vec16( GLcontext *ctx,
			struct r200_dma_region *rvb,
			char *data,
			int stride,
			int count )
{
   int i;
   int *out = (int *)(rvb->address + rvb->start);

   if (R200_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d stride %d\n",
	      __FUNCTION__, count, stride);

   if (stride == 16)
      COPY_DWORDS( out, data, count*4 );
   else
      for (i = 0; i < count; i++) {
	 out[0] = *(int *)data;
	 out[1] = *(int *)(data+4);
	 out[2] = *(int *)(data+8);
	 out[3] = *(int *)(data+12);
	 out += 4;
	 data += stride;
      }
}


static void emit_vector( GLcontext *ctx,
			 struct r200_dma_region *rvb,
			 char *data,
			 int size,
			 int stride,
			 int count )
{
   r200ContextPtr rmesa = R200_CONTEXT(ctx);

   if (R200_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d size %d stride %d\n",
	      __FUNCTION__, count, size, stride);

   assert (!rvb->buf);

   if (stride == 0) {
      r200AllocDmaRegion( rmesa, rvb, size * 4, 4 );
      count = 1;
      rvb->aos_start = GET_START(rvb);
      rvb->aos_stride = 0;
      rvb->aos_size = size;
   }
   else {
      r200AllocDmaRegion( rmesa, rvb, size * count * 4, 4 );	/* alignment? */
      rvb->aos_start = GET_START(rvb);
      rvb->aos_stride = size;
      rvb->aos_size = size;
   }

   /* Emit the data
    */
   switch (size) {
   case 1:
      emit_vec4( ctx, rvb, data, stride, count );
      break;
   case 2:
      emit_vec8( ctx, rvb, data, stride, count );
      break;
   case 3:
      emit_vec12( ctx, rvb, data, stride, count );
      break;
   case 4:
      emit_vec16( ctx, rvb, data, stride, count );
      break;
   default:
      assert(0);
      exit(1);
      break;
   }

}



a109 1
   struct r200_dma_region **component = rmesa->tcl.aos_components;
d115 1
d147 1
a147 1
	    if (!rmesa->tcl.vertex_data[i].buf) {
d149 6
a154 6
		  emit_vector( ctx,
			 &(rmesa->tcl.vertex_data[i]),
			 (char *)VB->AttribPtr[attrib]->data,
			 1,
			 VB->AttribPtr[attrib]->stride,
			 count);
d156 5
a160 5
		  emit_vecfog( ctx,
			 &(rmesa->tcl.vertex_data[i]),
			 (char *)VB->AttribPtr[attrib]->data,
			 VB->AttribPtr[attrib]->stride,
			 count);
d204 7
a210 7
	 if (!rmesa->tcl.vertex_data[i].buf) {
	    emit_vector( ctx,
			 &(rmesa->tcl.vertex_data[i]),
			 (char *)VB->AttribPtr[attrib]->data,
			 emitsize,
			 VB->AttribPtr[attrib]->stride,
			 count );
d214 1
a214 1
	 component[nr++] = &rmesa->tcl.vertex_data[i];
d225 1
a225 1
   rmesa->tcl.nr_aos_components = nr;
a227 13

void r200ReleaseArrays( GLcontext *ctx, GLuint newinputs )
{
   r200ContextPtr rmesa = R200_CONTEXT( ctx );

   /* only do it for changed inputs ? */
   int i;
   for (i = 0; i < 15; i++) {
      if (newinputs & (1 << i))
	 r200ReleaseDmaRegion( rmesa,
	    &rmesa->tcl.vertex_data[i], __FUNCTION__ );
   }
}
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d35 5
a39 5
#include "glheader.h"
#include "mtypes.h"
#include "colormac.h"
#include "imports.h"
#include "macros.h"
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86: xc/lib/GL/mesa/src/drv/r200/r200_maos_arrays.c,v 1.3 2003/02/23 23:59:01 dawes Exp $ */
d378 1
a378 1
void r200EmitArrays( GLcontext *ctx, GLuint inputs )
d386 1
a386 21
   GLuint i;
   
   if (1) {
      if (!rmesa->tcl.obj.buf) 
	 emit_vector( ctx, 
		      &rmesa->tcl.obj, 
		      (char *)VB->ObjPtr->data,
		      VB->ObjPtr->size,
		      VB->ObjPtr->stride,
		      count);

      switch( VB->ObjPtr->size ) {
      case 4: vfmt0 |= R200_VTX_W0;
      case 3: vfmt0 |= R200_VTX_Z0;
      case 2: 
      default:
	 break;
      }
      component[nr++] = &rmesa->tcl.obj;
   }
   
d388 99
a486 79
   if (inputs & VERT_BIT_NORMAL) {
      if (!rmesa->tcl.norm.buf)
	 emit_vector( ctx, 
		      &(rmesa->tcl.norm), 
		      (char *)VB->NormalPtr->data,
		      3,
		      VB->NormalPtr->stride,
		      count);

      vfmt0 |= R200_VTX_N0;
      component[nr++] = &rmesa->tcl.norm;
   }

   if (inputs & VERT_BIT_FOG) {
      if (!rmesa->tcl.fog.buf)
	 emit_vecfog( ctx, 
		      &(rmesa->tcl.fog), 
		      (char *)VB->FogCoordPtr->data,
		      VB->FogCoordPtr->stride,
		      count);

      vfmt0 |= R200_VTX_DISCRETE_FOG;
      component[nr++] = &rmesa->tcl.fog;
   }
 
   if (inputs & VERT_BIT_COLOR0) {
      int emitsize;

      if (VB->ColorPtr[0]->size == 4 &&
	  (VB->ColorPtr[0]->stride != 0 ||
	   VB->ColorPtr[0]->data[0][3] != 1.0)) { 
	 vfmt0 |= R200_VTX_FP_RGBA << R200_VTX_COLOR_0_SHIFT; 
	 emitsize = 4;
      }
      else { 
	 vfmt0 |= R200_VTX_FP_RGB << R200_VTX_COLOR_0_SHIFT; 
	 emitsize = 3;
      }

      if (!rmesa->tcl.rgba.buf)
	 emit_vector( ctx, 
		      &(rmesa->tcl.rgba), 
		      (char *)VB->ColorPtr[0]->data,
		      emitsize,
		      VB->ColorPtr[0]->stride,
		      count);

      component[nr++] = &rmesa->tcl.rgba;
   }


   if (inputs & VERT_BIT_COLOR1) {
      if (!rmesa->tcl.spec.buf) {
	 emit_vector( ctx, 
		      &rmesa->tcl.spec, 
		      (char *)VB->SecondaryColorPtr[0]->data,
		      3,
		      VB->SecondaryColorPtr[0]->stride,
		      count);
      }

      /* How does this work?
       */
      vfmt0 |= R200_VTX_FP_RGB << R200_VTX_COLOR_1_SHIFT; 
      component[nr++] = &rmesa->tcl.spec;
   }
      
   for ( i = 0 ; i < ctx->Const.MaxTextureUnits ; i++ ) {
      if (inputs & (VERT_BIT_TEX0 << i)) {
	 if (!rmesa->tcl.tex[i].buf)
	     emit_vector( ctx, 
			  &(rmesa->tcl.tex[i]),
			  (char *)VB->TexCoordPtr[i]->data,
			  VB->TexCoordPtr[i]->size,
			  VB->TexCoordPtr[i]->stride,
			  count );

	 vfmt1 |= VB->TexCoordPtr[i]->size << (i * 3);
	 component[nr++] = &rmesa->tcl.tex[i];
d491 2
a492 2
       vfmt1 != rmesa->hw.vtx.cmd[VTX_VTXFMT_1]) { 
      R200_STATECHANGE( rmesa, vtx ); 
d495 1
a495 1
   } 
a497 1
   rmesa->tcl.vertex_format = vfmt0;
a502 1
   GLuint unit;
d505 6
a510 21
/*    if (R200_DEBUG & DEBUG_VERTS)  */
/*       _tnl_print_vert_flags( __FUNCTION__, newinputs ); */

   if (newinputs & VERT_BIT_POS) 
     r200ReleaseDmaRegion( rmesa, &rmesa->tcl.obj, __FUNCTION__ );

   if (newinputs & VERT_BIT_NORMAL) 
      r200ReleaseDmaRegion( rmesa, &rmesa->tcl.norm, __FUNCTION__ );
      
   if (newinputs & VERT_BIT_FOG) 
      r200ReleaseDmaRegion( rmesa, &rmesa->tcl.fog, __FUNCTION__ );

   if (newinputs & VERT_BIT_COLOR0) 
      r200ReleaseDmaRegion( rmesa, &rmesa->tcl.rgba, __FUNCTION__ );

   if (newinputs & VERT_BIT_COLOR1) 
      r200ReleaseDmaRegion( rmesa, &rmesa->tcl.spec, __FUNCTION__ );

   for (unit = 0 ; unit < ctx->Const.MaxTextureUnits; unit++) {
      if (newinputs & VERT_BIT_TEX(unit))
	 r200ReleaseDmaRegion( rmesa, &rmesa->tcl.tex[unit], __FUNCTION__ );
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d388 2
a389 10
   GLuint generic_in_mapped = 0;
   struct r200_vertex_program *vp = NULL;

   /* this looks way more complicated than necessary... */
   if (ctx->VertexProgram._Enabled) {
      vp = rmesa->curr_vp_hw;
      generic_in_mapped = vp->gen_inputs_mapped;
   }

   if (inputs & VERT_BIT_POS) {
d407 1
a407 13
   else if (generic_in_mapped & (1 << 0)) {
      int geninput = vp->rev_inputs[0] - VERT_ATTRIB_GENERIC0;
      if (!rmesa->tcl.generic[geninput].buf) {
         emit_vector( ctx,
		      &(rmesa->tcl.generic[geninput]),
		      (char *)VB->AttribPtr[geninput + VERT_ATTRIB_GENERIC0]->data,
		      4,
		      VB->AttribPtr[geninput + VERT_ATTRIB_GENERIC0]->stride,
		      count );
      }
      component[nr++] = &rmesa->tcl.generic[geninput];
      vfmt0 |=  R200_VTX_W0 | R200_VTX_Z0;
   }
d423 6
a428 15
      if (!rmesa->tcl.fog.buf) {
	 if (ctx->VertexProgram._Enabled)
	    emit_vector( ctx, 
			 &(rmesa->tcl.fog), 
			 (char *)VB->FogCoordPtr->data,
			 1,
			 VB->FogCoordPtr->stride,
			 count);
	 else
	    emit_vecfog( ctx, 
			 &(rmesa->tcl.fog), 
			 (char *)VB->FogCoordPtr->data,
			 VB->FogCoordPtr->stride,
			 count);
      }
a457 17
/*	vfmt0 |= R200_VTX_PK_RGBA << R200_VTX_COLOR_0_SHIFT;
	emit_ubyte_rgba( ctx, &rmesa->tcl.rgba, 
		(char *)VB->ColorPtr[0]->data, 4,
		      VB->ColorPtr[0]->stride, count);*/
   else if (generic_in_mapped & (1 << 2)) {
      int geninput = vp->rev_inputs[2] - VERT_ATTRIB_GENERIC0;
      if (!rmesa->tcl.generic[geninput].buf) {
         emit_vector( ctx,
		      &(rmesa->tcl.generic[geninput]),
		      (char *)VB->AttribPtr[geninput + VERT_ATTRIB_GENERIC0]->data,
		      4,
		      VB->AttribPtr[geninput + VERT_ATTRIB_GENERIC0]->stride,
		      count );
      }
      component[nr++] = &rmesa->tcl.generic[geninput];
      vfmt0 |= R200_VTX_FP_RGBA << R200_VTX_COLOR_0_SHIFT;
   }
d475 2
a476 43
   else if (generic_in_mapped & (1 << 3)) {
      int geninput = vp->rev_inputs[3] - VERT_ATTRIB_GENERIC0;
      if (!rmesa->tcl.generic[geninput].buf) {
         emit_vector( ctx,
		      &(rmesa->tcl.generic[geninput]),
		      (char *)VB->AttribPtr[geninput + VERT_ATTRIB_GENERIC0]->data,
		      4,
		      VB->AttribPtr[geninput + VERT_ATTRIB_GENERIC0]->stride,
		      count );
      }
      component[nr++] = &rmesa->tcl.generic[geninput];
      vfmt0 |= R200_VTX_FP_RGBA << R200_VTX_COLOR_1_SHIFT;
   }

   if (generic_in_mapped & (1 << 4)) {
      int geninput = vp->rev_inputs[4] - VERT_ATTRIB_GENERIC0;
      if (!rmesa->tcl.generic[geninput].buf) {
         emit_vector( ctx,
		      &(rmesa->tcl.generic[geninput]),
		      (char *)VB->AttribPtr[geninput + VERT_ATTRIB_GENERIC0]->data,
		      4,
		      VB->AttribPtr[geninput + VERT_ATTRIB_GENERIC0]->stride,
		      count );
      }
      component[nr++] = &rmesa->tcl.generic[geninput];
      vfmt0 |= R200_VTX_FP_RGBA << R200_VTX_COLOR_2_SHIFT;
   }

   if (generic_in_mapped & (1 << 5)) {
      int geninput = vp->rev_inputs[5] - VERT_ATTRIB_GENERIC0;
      if (!rmesa->tcl.generic[geninput].buf) {
         emit_vector( ctx,
		      &(rmesa->tcl.generic[geninput]),
		      (char *)VB->AttribPtr[geninput + VERT_ATTRIB_GENERIC0]->data,
		      4,
		      VB->AttribPtr[geninput + VERT_ATTRIB_GENERIC0]->stride,
		      count );
      }
      component[nr++] = &rmesa->tcl.generic[geninput];
      vfmt0 |= R200_VTX_FP_RGBA << R200_VTX_COLOR_3_SHIFT;
   }

   for ( i = 0 ; i < 6 ; i++ ) {
a488 27
      else if (generic_in_mapped & (1 << (i + 6))) {
	 int geninput = vp->rev_inputs[i + 6] - VERT_ATTRIB_GENERIC0;
	 if (!rmesa->tcl.generic[geninput].buf) {
            emit_vector( ctx,
			 &(rmesa->tcl.generic[geninput]),
			(char *)VB->AttribPtr[geninput + VERT_ATTRIB_GENERIC0]->data,
			4,
			VB->AttribPtr[geninput + VERT_ATTRIB_GENERIC0]->stride,
			count );
	 }
	 component[nr++] = &rmesa->tcl.generic[geninput];
	 vfmt1 |= 4 << (R200_VTX_TEX0_COMP_CNT_SHIFT + (i * 3));
      }
   }

   if (generic_in_mapped & (1 << 13)) {
      int geninput = vp->rev_inputs[13] - VERT_ATTRIB_GENERIC0;
      if (!rmesa->tcl.generic[geninput].buf) {
         emit_vector( ctx,
		      &(rmesa->tcl.generic[geninput]),
		      (char *)VB->AttribPtr[geninput + VERT_ATTRIB_GENERIC0]->data,
		      4,
		      VB->AttribPtr[geninput + VERT_ATTRIB_GENERIC0]->stride,
		      count );
      }
      component[nr++] = &rmesa->tcl.generic[geninput];
      vfmt0 |= R200_VTX_XY1 | R200_VTX_Z1 | R200_VTX_W1;
a490 47
/* doesn't work. Wrong order with mixed generic & conventional! */
/*
   if (ctx->VertexProgram._Enabled) {
      int *vp_inputs = rmesa->curr_vp_hw->inputs;
      for ( i = VERT_ATTRIB_GENERIC0; i < VERT_ATTRIB_MAX; i++ ) {
	 if (inputs & (1 << i)) {
	    int geninput = i - VERT_ATTRIB_GENERIC0;
	    if (!rmesa->tcl.generic[geninput].buf) {
	       emit_vector( ctx,
			  &(rmesa->tcl.generic[geninput]),
			  (char *)VB->AttribPtr[i]->data,
			  4,
			  VB->AttribPtr[i]->stride,
			  count );
	    }
	    component[nr++] = &rmesa->tcl.generic[geninput];
	    switch (vp_inputs[i]) {
	    case 0:
	       vfmt0 |=  R200_VTX_W0 | R200_VTX_Z0;
	       break;
	    case 2:
	    case 3:
	    case 4:
	    case 5:
	       vfmt0 |= R200_VTX_FP_RGBA << (R200_VTX_COLOR_0_SHIFT + (vp_inputs[i] - 2) * 2);
	       break;
	    case 6:
	    case 7:
	    case 8:
	    case 9:
	    case 10:
	    case 11:
	       vfmt1 |= 4 << (R200_VTX_TEX0_COMP_CNT_SHIFT + (vp_inputs[i] - 6) * 3);
	       break;
	    case 13:
	       vfmt0 |= R200_VTX_XY1 | R200_VTX_Z1 | R200_VTX_W1;
	       break;
	    case 1:
	    case 12:
	    default:
	       assert(0);
	    }
	 }
      }
   }
*/

d516 1
a516 1

a529 10

   if (ctx->VertexProgram._Enabled) {
      int i;
      for (i = VERT_ATTRIB_GENERIC0; i < VERT_ATTRIB_MAX; i++) {
	 if (newinputs & (1 << i))
	    r200ReleaseDmaRegion( rmesa,
	       &rmesa->tcl.generic[i - VERT_ATTRIB_GENERIC0], __FUNCTION__ );
      }
   }

@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d379 1
a379 1
void r200EmitArrays( GLcontext *ctx, GLubyte *vimap_rev )
d387 3
a389 1
   GLuint i, emitsize;
d391 57
a447 36
   for ( i = 0; i < 15; i++ ) {
      GLubyte attrib = vimap_rev[i];
      if (attrib != 255) {
	 switch (i) {
	 case 0:
	    emitsize = (VB->AttribPtr[attrib]->size);
	    switch (emitsize) {
	    case 4:
	       vfmt0 |= R200_VTX_W0;
	       /* fallthrough */
	    case 3:
	       vfmt0 |= R200_VTX_Z0;
	       break;
	    case 2:
	       break;
	    default: assert(0);
	    }
	    break;
	 case 1:
	    assert(attrib == VERT_ATTRIB_WEIGHT);
	    emitsize = (VB->AttribPtr[attrib]->size);
	    vfmt0 |= emitsize << R200_VTX_WEIGHT_COUNT_SHIFT;
	    break;
	 case 2:
	    assert(attrib == VERT_ATTRIB_NORMAL);
	    emitsize = 3;
	    vfmt0 |= R200_VTX_N0;
	    break;
	 case 3:
	    /* special handling to fix up fog. Will get us into trouble with vbos...*/
	    assert(attrib == VERT_ATTRIB_FOG);
	    if (!rmesa->tcl.vertex_data[i].buf) {
	       if (ctx->VertexProgram._Enabled)
		  emit_vector( ctx,
			 &(rmesa->tcl.vertex_data[i]),
			 (char *)VB->AttribPtr[attrib]->data,
d449 1
a449 1
			 VB->AttribPtr[attrib]->stride,
d451 5
a455 5
	       else
		  emit_vecfog( ctx,
			 &(rmesa->tcl.vertex_data[i]),
			 (char *)VB->AttribPtr[attrib]->data,
			 VB->AttribPtr[attrib]->stride,
d457 162
d620 5
a624 29
	    vfmt0 |= R200_VTX_DISCRETE_FOG;
	    goto after_emit;
	    break;
	 case 4:
	 case 5:
	 case 6:
	 case 7:
	    if (VB->AttribPtr[attrib]->size == 4 &&
	       (VB->AttribPtr[attrib]->stride != 0 ||
		VB->AttribPtr[attrib]->data[0][3] != 1.0)) emitsize = 4;
	    else emitsize = 3;
	    if (emitsize == 4)
	       vfmt0 |= R200_VTX_FP_RGBA << (R200_VTX_COLOR_0_SHIFT + (i - 4) * 2);
	    else {
	       vfmt0 |= R200_VTX_FP_RGB << (R200_VTX_COLOR_0_SHIFT + (i - 4) * 2);
	    }
	    break;
	 case 8:
	 case 9:
	 case 10:
	 case 11:
	 case 12:
	 case 13:
	    emitsize = VB->AttribPtr[attrib]->size;
	    vfmt1 |= emitsize << (R200_VTX_TEX0_COMP_CNT_SHIFT + (i - 8) * 3);
	    break;
	 case 14:
	    emitsize = VB->AttribPtr[attrib]->size >= 2 ? VB->AttribPtr[attrib]->size : 2;
	    switch (emitsize) {
a625 2
	       vfmt0 |= R200_VTX_XY1;
	       /* fallthrough */
a626 2
	       vfmt0 |= R200_VTX_Z1;
	       /* fallthrough */
d628 18
a645 2
	       vfmt0 |= R200_VTX_W1;
	    break;
a646 2
	 default:
	    assert(0);
a647 11
	 if (!rmesa->tcl.vertex_data[i].buf) {
	    emit_vector( ctx,
			 &(rmesa->tcl.vertex_data[i]),
			 (char *)VB->AttribPtr[attrib]->data,
			 emitsize,
			 VB->AttribPtr[attrib]->stride,
			 count );
	 }
after_emit:
	 assert(nr < 12);
	 component[nr++] = &rmesa->tcl.vertex_data[i];
d650 1
d653 2
a654 2
       vfmt1 != rmesa->hw.vtx.cmd[VTX_VTXFMT_1]) {
      R200_STATECHANGE( rmesa, vtx );
d657 1
a657 1
   }
d660 1
d666 1
d669 21
a689 6
   /* only do it for changed inputs ? */
   int i;
   for (i = 0; i < 15; i++) {
      if (newinputs & (1 << i))
	 r200ReleaseDmaRegion( rmesa,
	    &rmesa->tcl.vertex_data[i], __FUNCTION__ );
d691 10
@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d1 1
d36 5
a40 5
#include "main/glheader.h"
#include "main/mtypes.h"
#include "main/colormac.h"
#include "main/imports.h"
#include "main/macros.h"
d54 104
d178 6
a183 2
static void r200_emit_vecfog(struct gl_context *ctx, struct radeon_aos *aos,
			     GLvoid *data, int stride, int count)
d185 34
a218 25
	radeonContextPtr rmesa = RADEON_CONTEXT(ctx);
	GLfloat *out;
	int i;
	int size = 1;

	if (stride == 0) {
		radeonAllocDmaRegion(rmesa, &aos->bo, &aos->offset, size * 4, 32);
		count = 1;
		aos->stride = 0;
	} else {
		radeonAllocDmaRegion(rmesa, &aos->bo, &aos->offset, size * 4, 32);
		aos->stride = size;
	}

	aos->components = size;
	aos->count = count;

	radeon_bo_map(aos->bo, 1);
	out = (GLfloat*)((char*)aos->bo->ptr + aos->offset);
	for (i = 0; i < count; i++) {
	  out[0] = r200ComputeFogBlendFactor( ctx, *(GLfloat *)data );
	  out++;
	  data += stride;
	}
	radeon_bo_unmap(aos->bo);
d221 155
d379 1
a379 1
void r200EmitArrays( struct gl_context *ctx, GLubyte *vimap_rev )
d383 1
a388 1
   //   fprintf(stderr,"emit arrays\n");
d420 1
a420 1
	    if (!rmesa->radeon.tcl.aos[i].bo) {
d422 6
a427 6
		  rcommon_emit_vector( ctx,
				       &(rmesa->radeon.tcl.aos[nr]),
				       (char *)VB->AttribPtr[attrib]->data,
				       1,
				       VB->AttribPtr[attrib]->stride,
				       count);
d429 5
a433 5
		 r200_emit_vecfog( ctx,
				   &(rmesa->radeon.tcl.aos[nr]),
				   (char *)VB->AttribPtr[attrib]->data,
				   VB->AttribPtr[attrib]->stride,
				   count);
a475 1
	    emitsize = 0;
d477 7
a483 7
	 if (!rmesa->radeon.tcl.aos[nr].bo) {
	   rcommon_emit_vector( ctx,
				&(rmesa->radeon.tcl.aos[nr]),
				(char *)VB->AttribPtr[attrib]->data,
				emitsize,
				VB->AttribPtr[attrib]->stride,
				count );
d487 1
a487 1
	 nr++;
d498 1
a498 1
   rmesa->radeon.tcl.aos_count = nr;
d501 13
@


1.1.1.5
log
@Import Mesa 9.2.0
@
text
@d73 30
d156 5
a160 5
		 rcommon_emit_vecfog( ctx,
				      &(rmesa->radeon.tcl.aos[nr]),
				      (char *)VB->AttribPtr[attrib]->data,
				      VB->AttribPtr[attrib]->stride,
				      count);
d199 1
a199 1
	       /* fallthrough */
a200 1
	    break;
@


1.1.1.6
log
@Import Mesa 10.2.3
@
text
@d32 1
a32 1
 *   Keith Whitwell <keithw@@vmware.com>
@


