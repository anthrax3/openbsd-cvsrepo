head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.4;
commitid	4ry2gvZGMXkCUD2n;

1.4
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.3;
commitid	mcxB0JvoI9gTDYXU;

1.3
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.14.04.25;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.15.44;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.52;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.11.52;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.48.57;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2011 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#include "brw_context.h"
#include "brw_state.h"
#include "brw_defines.h"
#include "brw_util.h"
#include "program/prog_parameter.h"
#include "program/prog_statevars.h"
#include "intel_batchbuffer.h"


void
gen7_upload_constant_state(struct brw_context *brw,
                           const struct brw_stage_state *stage_state,
                           bool active, unsigned opcode)
{
   uint32_t mocs = brw->gen < 8 ? GEN7_MOCS_L3 : 0;

   /* Disable if the shader stage is inactive or there are no push constants. */
   active = active && stage_state->push_const_size != 0;

   int dwords = brw->gen >= 8 ? 11 : 7;
   BEGIN_BATCH(dwords);
   OUT_BATCH(opcode << 16 | (dwords - 2));
   OUT_BATCH(active ? stage_state->push_const_size : 0);
   OUT_BATCH(0);
   /* Pointer to the constant buffer.  Covered by the set of state flags
    * from gen6_prepare_wm_contants
    */
   OUT_BATCH(active ? (stage_state->push_const_offset | mocs) : 0);
   OUT_BATCH(0);
   OUT_BATCH(0);
   OUT_BATCH(0);
   if (brw->gen >= 8) {
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
   }

   ADVANCE_BATCH();
}


static void
upload_vs_state(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   const struct brw_stage_state *stage_state = &brw->vs.base;
   uint32_t floating_point_mode = 0;
   const int max_threads_shift = brw->is_haswell ?
      HSW_VS_MAX_THREADS_SHIFT : GEN6_VS_MAX_THREADS_SHIFT;

   if (!brw->is_haswell)
      gen7_emit_vs_workaround_flush(brw);

   /* Use ALT floating point mode for ARB vertex programs, because they
    * require 0^0 == 1.
    */
   if (ctx->_Shader->CurrentProgram[MESA_SHADER_VERTEX] == NULL)
      floating_point_mode = GEN6_VS_FLOATING_POINT_MODE_ALT;

   BEGIN_BATCH(6);
   OUT_BATCH(_3DSTATE_VS << 16 | (6 - 2));
   OUT_BATCH(stage_state->prog_offset);
   OUT_BATCH(floating_point_mode |
	     ((ALIGN(stage_state->sampler_count, 4)/4) <<
              GEN6_VS_SAMPLER_COUNT_SHIFT) |
             ((brw->vs.prog_data->base.base.binding_table.size_bytes / 4) <<
              GEN6_VS_BINDING_TABLE_ENTRY_COUNT_SHIFT));

   if (brw->vs.prog_data->base.total_scratch) {
      OUT_RELOC(stage_state->scratch_bo,
		I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER,
		ffs(brw->vs.prog_data->base.total_scratch) - 11);
   } else {
      OUT_BATCH(0);
   }

   OUT_BATCH((brw->vs.prog_data->base.dispatch_grf_start_reg <<
              GEN6_VS_DISPATCH_START_GRF_SHIFT) |
	     (brw->vs.prog_data->base.urb_read_length << GEN6_VS_URB_READ_LENGTH_SHIFT) |
	     (0 << GEN6_VS_URB_ENTRY_READ_OFFSET_SHIFT));

   OUT_BATCH(((brw->max_vs_threads - 1) << max_threads_shift) |
	     GEN6_VS_STATISTICS_ENABLE |
	     GEN6_VS_ENABLE);
   ADVANCE_BATCH();
}

const struct brw_tracked_state gen7_vs_state = {
   .dirty = {
      .mesa  = _NEW_TRANSFORM,
      .brw   = (BRW_NEW_CONTEXT |
		BRW_NEW_VERTEX_PROGRAM |
		BRW_NEW_BATCH),
      .cache = CACHE_NEW_VS_PROG
   },
   .emit = upload_vs_state,
};
@


1.5
log
@Merge Mesa 10.2.9
@
text
@@


1.4
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d75 1
a75 1
   if (!brw->is_haswell && !brw->is_baytrail)
d93 1
a93 1
   if (brw->vs.prog_data->base.base.total_scratch) {
d96 1
a96 1
		ffs(brw->vs.prog_data->base.base.total_scratch) - 11);
d101 1
a101 1
   OUT_BATCH((brw->vs.prog_data->base.base.dispatch_grf_start_reg <<
@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d75 1
a75 1
   if (!brw->is_haswell)
d93 1
a93 1
   if (brw->vs.prog_data->base.total_scratch) {
d96 1
a96 1
		ffs(brw->vs.prog_data->base.total_scratch) - 11);
d101 1
a101 1
   OUT_BATCH((brw->vs.prog_data->base.dispatch_grf_start_reg <<
@


1.2
log
@Merge Mesa 9.2.0
@
text
@d32 34
d70 1
d75 2
a76 41
   gen7_emit_vs_workaround_flush(brw);

   /* BRW_NEW_VS_BINDING_TABLE */
   BEGIN_BATCH(2);
   OUT_BATCH(_3DSTATE_BINDING_TABLE_POINTERS_VS << 16 | (2 - 2));
   OUT_BATCH(brw->vs.bind_bo_offset);
   ADVANCE_BATCH();

   /* CACHE_NEW_SAMPLER */
   BEGIN_BATCH(2);
   OUT_BATCH(_3DSTATE_SAMPLER_STATE_POINTERS_VS << 16 | (2 - 2));
   OUT_BATCH(brw->sampler.offset);
   ADVANCE_BATCH();

   if (brw->vs.push_const_size == 0) {
      /* Disable the push constant buffers. */
      BEGIN_BATCH(7);
      OUT_BATCH(_3DSTATE_CONSTANT_VS << 16 | (7 - 2));
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   } else {
      uint8_t mocs = brw->is_haswell ? GEN7_MOCS_L3 : 0;

      BEGIN_BATCH(7);
      OUT_BATCH(_3DSTATE_CONSTANT_VS << 16 | (7 - 2));
      OUT_BATCH(brw->vs.push_const_size);
      OUT_BATCH(0);
      /* Pointer to the VS constant buffer.  Covered by the set of
       * state flags from gen6_prepare_wm_contants
       */
      OUT_BATCH(brw->vs.push_const_offset | mocs);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   }
d81 1
a81 1
   if (ctx->Shader.CurrentVertexProgram == NULL)
d86 1
a86 1
   OUT_BATCH(brw->vs.prog_offset);
d88 4
a91 1
	     ((ALIGN(brw->sampler.count, 4)/4) << GEN6_VS_SAMPLER_COUNT_SHIFT));
d94 1
a94 1
      OUT_RELOC(brw->vs.scratch_bo,
d101 2
a102 1
   OUT_BATCH((1 << GEN6_VS_DISPATCH_START_GRF_SHIFT) |
d114 1
a114 1
      .mesa  = _NEW_TRANSFORM | _NEW_PROGRAM_CONSTANTS,
a116 1
		BRW_NEW_VS_BINDING_TABLE |
d118 1
a118 1
      .cache = CACHE_NEW_VS_PROG | CACHE_NEW_SAMPLER
@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d35 4
a38 1
   struct intel_context *intel = &brw->intel;
d40 3
d48 6
d66 2
d75 1
a75 1
      OUT_BATCH(brw->vs.push_const_offset);
d82 6
d91 11
a101 4
   OUT_BATCH((0 << GEN6_VS_SAMPLER_COUNT_SHIFT) |
	     GEN6_VS_FLOATING_POINT_MODE_ALT |
	     (brw->vs.nr_surfaces << GEN6_VS_BINDING_TABLE_ENTRY_COUNT_SHIFT));
   OUT_BATCH(0); /* scratch space base offset */
d103 1
a103 1
	     (brw->vs.prog_data->urb_read_length << GEN6_VS_URB_READ_LENGTH_SHIFT) |
d106 1
a106 1
   OUT_BATCH(((brw->vs_max_threads - 1) << GEN6_VS_MAX_THREADS_SHIFT) |
d115 1
a115 4
      .brw   = (BRW_NEW_CURBE_OFFSETS |
                BRW_NEW_NR_VS_SURFACES |
		BRW_NEW_URB_FENCE |
		BRW_NEW_CONTEXT |
d119 1
a119 1
      .cache = CACHE_NEW_VS_PROG
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@d35 1
a35 4
   struct gl_context *ctx = &brw->ctx;
   uint32_t floating_point_mode = 0;
   const int max_threads_shift = brw->is_haswell ?
      HSW_VS_MAX_THREADS_SHIFT : GEN6_VS_MAX_THREADS_SHIFT;
a36 3
   gen7_emit_vs_workaround_flush(brw);

   /* BRW_NEW_VS_BINDING_TABLE */
a41 6
   /* CACHE_NEW_SAMPLER */
   BEGIN_BATCH(2);
   OUT_BATCH(_3DSTATE_SAMPLER_STATE_POINTERS_VS << 16 | (2 - 2));
   OUT_BATCH(brw->sampler.offset);
   ADVANCE_BATCH();

a53 2
      uint8_t mocs = brw->is_haswell ? GEN7_MOCS_L3 : 0;

d61 1
a61 1
      OUT_BATCH(brw->vs.push_const_offset | mocs);
a67 6
   /* Use ALT floating point mode for ARB vertex programs, because they
    * require 0^0 == 1.
    */
   if (ctx->Shader.CurrentVertexProgram == NULL)
      floating_point_mode = GEN6_VS_FLOATING_POINT_MODE_ALT;

d71 4
a74 11
   OUT_BATCH(floating_point_mode |
	     ((ALIGN(brw->sampler.count, 4)/4) << GEN6_VS_SAMPLER_COUNT_SHIFT));

   if (brw->vs.prog_data->base.total_scratch) {
      OUT_RELOC(brw->vs.scratch_bo,
		I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER,
		ffs(brw->vs.prog_data->base.total_scratch) - 11);
   } else {
      OUT_BATCH(0);
   }

d76 1
a76 1
	     (brw->vs.prog_data->base.urb_read_length << GEN6_VS_URB_READ_LENGTH_SHIFT) |
d79 1
a79 1
   OUT_BATCH(((brw->max_vs_threads - 1) << max_threads_shift) |
d88 4
a91 1
      .brw   = (BRW_NEW_CONTEXT |
d95 1
a95 1
      .cache = CACHE_NEW_VS_PROG | CACHE_NEW_SAMPLER
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d32 7
d40 7
a46 6
void
gen7_upload_constant_state(struct brw_context *brw,
                           const struct brw_stage_state *stage_state,
                           bool active, unsigned opcode)
{
   uint32_t mocs = brw->gen < 8 ? GEN7_MOCS_L3 : 0;
d48 5
a52 2
   /* Disable if the shader stage is inactive or there are no push constants. */
   active = active && stage_state->push_const_size != 0;
d54 17
a70 13
   int dwords = brw->gen >= 8 ? 11 : 7;
   BEGIN_BATCH(dwords);
   OUT_BATCH(opcode << 16 | (dwords - 2));
   OUT_BATCH(active ? stage_state->push_const_size : 0);
   OUT_BATCH(0);
   /* Pointer to the constant buffer.  Covered by the set of state flags
    * from gen6_prepare_wm_contants
    */
   OUT_BATCH(active ? (stage_state->push_const_offset | mocs) : 0);
   OUT_BATCH(0);
   OUT_BATCH(0);
   OUT_BATCH(0);
   if (brw->gen >= 8) {
d72 4
d79 1
a81 16
   ADVANCE_BATCH();
}


static void
upload_vs_state(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   const struct brw_stage_state *stage_state = &brw->vs.base;
   uint32_t floating_point_mode = 0;
   const int max_threads_shift = brw->is_haswell ?
      HSW_VS_MAX_THREADS_SHIFT : GEN6_VS_MAX_THREADS_SHIFT;

   if (!brw->is_haswell)
      gen7_emit_vs_workaround_flush(brw);

d85 1
a85 1
   if (ctx->_Shader->CurrentProgram[MESA_SHADER_VERTEX] == NULL)
d90 1
a90 1
   OUT_BATCH(stage_state->prog_offset);
d92 1
a92 4
	     ((ALIGN(stage_state->sampler_count, 4)/4) <<
              GEN6_VS_SAMPLER_COUNT_SHIFT) |
             ((brw->vs.prog_data->base.base.binding_table.size_bytes / 4) <<
              GEN6_VS_BINDING_TABLE_ENTRY_COUNT_SHIFT));
d95 1
a95 1
      OUT_RELOC(stage_state->scratch_bo,
d102 1
a102 2
   OUT_BATCH((brw->vs.prog_data->base.dispatch_grf_start_reg <<
              GEN6_VS_DISPATCH_START_GRF_SHIFT) |
d114 1
a114 1
      .mesa  = _NEW_TRANSFORM,
d117 1
d119 1
a119 1
      .cache = CACHE_NEW_VS_PROG
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d75 1
a75 1
   if (!brw->is_haswell && !brw->is_baytrail)
d93 1
a93 1
   if (brw->vs.prog_data->base.base.total_scratch) {
d96 1
a96 1
		ffs(brw->vs.prog_data->base.base.total_scratch) - 11);
d101 1
a101 1
   OUT_BATCH((brw->vs.prog_data->base.base.dispatch_grf_start_reg <<
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d75 1
a75 1
   if (!brw->is_haswell)
d93 1
a93 1
   if (brw->vs.prog_data->base.total_scratch) {
d96 1
a96 1
		ffs(brw->vs.prog_data->base.total_scratch) - 11);
d101 1
a101 1
   OUT_BATCH((brw->vs.prog_data->base.dispatch_grf_start_reg <<
@


