head	1.5;
access;
symbols
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.09.05.14.04.23;	author jsg;	state dead;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.49;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.49;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge Mesa 9.2.0
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
 develop this 3D driver.
 
 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:
 
 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 
 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keith@@tungstengraphics.com>
  */
                

#include "main/mtypes.h"
#include "brw_wm.h"


#undef P			/* prompted depth */
#undef C			/* computed */
#undef N			/* non-promoted? */

#define P 0
#define C 1
#define N 2

const struct {
   GLuint mode:2;
   GLuint sd_present:1;
   GLuint sd_to_rt:1;
   GLuint dd_present:1;
   GLuint ds_present:1;
} wm_iz_table[IZ_BIT_MAX] =
{
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { N, 1, 1, 0, 0 }, 
 { N, 0, 1, 0, 0 }, 
 { N, 0, 1, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { N, 1, 1, 0, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { N, 1, 1, 0, 0 }, 
 { N, 0, 1, 0, 0 }, 
 { N, 0, 1, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { N, 1, 1, 0, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { N, 1, 1, 0, 1 }, 
 { N, 0, 1, 0, 1 }, 
 { N, 0, 1, 0, 1 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { C, 0, 1, 1, 1 }, 
 { C, 0, 1, 1, 1 }, 
 { P, 0, 0, 0, 0 }, 
 { N, 1, 1, 0, 1 }, 
 { C, 0, 1, 1, 1 }, 
 { C, 0, 1, 1, 1 }, 
 { P, 0, 0, 0, 0 }, 
 { C, 0, 0, 0, 1 }, 
 { P, 0, 0, 0, 0 }, 
 { C, 0, 1, 0, 1 }, 
 { P, 0, 0, 0, 0 }, 
 { C, 1, 1, 0, 1 }, 
 { C, 0, 1, 0, 1 }, 
 { C, 0, 1, 0, 1 }, 
 { P, 0, 0, 0, 0 }, 
 { C, 1, 1, 1, 1 }, 
 { C, 0, 1, 1, 1 }, 
 { C, 0, 1, 1, 1 }, 
 { P, 0, 0, 0, 0 }, 
 { C, 1, 1, 1, 1 }, 
 { C, 0, 1, 1, 1 }, 
 { C, 0, 1, 1, 1 } 
};

/**
 * \param line_aa  AA_NEVER, AA_ALWAYS or AA_SOMETIMES
 * \param lookup  bitmask of IZ_* flags
 */
void brw_wm_lookup_iz(struct intel_context *intel,
		      struct brw_wm_compile *c)
{
   GLuint reg = 2;
   GLboolean kill_stats_promoted_workaround = GL_FALSE;
   int lookup = c->key.iz_lookup;
   bool uses_depth = (c->fp->program.Base.InputsRead &
		      (1 << FRAG_ATTRIB_WPOS)) != 0;

   assert (lookup < IZ_BIT_MAX);

   /* Crazy workaround in the windowizer, which we need to track in
    * our register allocation and render target writes.  See the "If
    * statistics are enabled..." paragraph of 11.5.3.2: Early Depth
    * Test Cases [Pre-DevGT] of the 3D Pipeline - Windower B-Spec.
    */
   if (c->key.stats_wm &&
       (lookup & IZ_PS_KILL_ALPHATEST_BIT) &&
       wm_iz_table[lookup].mode == P) {
      kill_stats_promoted_workaround = GL_TRUE;
   }

   if (lookup & IZ_PS_COMPUTES_DEPTH_BIT)
      c->computes_depth = 1;

   if (wm_iz_table[lookup].sd_present || uses_depth ||
       kill_stats_promoted_workaround) {
      c->source_depth_reg = reg;
      reg += 2;
   }

   if (wm_iz_table[lookup].sd_to_rt || kill_stats_promoted_workaround)
      c->source_depth_to_render_target = 1;

   if (wm_iz_table[lookup].ds_present || c->key.line_aa != AA_NEVER) {
      c->aa_dest_stencil_reg = reg;
      c->runtime_check_aads_emit = (!wm_iz_table[lookup].ds_present &&
				    c->key.line_aa == AA_SOMETIMES);
      reg++;
   }

   if (wm_iz_table[lookup].dd_present) {
      c->dest_depth_reg = reg;
      reg+=2;
   }

   c->nr_payload_regs = reg;
}

@


1.4
log
@Merge Mesa 7.10.3
@
text
@@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d123 2
a124 4
void brw_wm_lookup_iz( GLuint line_aa,
		       GLuint lookup,
		       GLboolean ps_uses_depth,
		       struct brw_wm_prog_key *key )
d127 4
d133 12
a144 1
      
d146 1
a146 1
      key->computes_depth = 1;
d148 3
a150 2
   if (wm_iz_table[lookup].sd_present || ps_uses_depth) {
      key->source_depth_reg = reg;
d154 2
a155 2
   if (wm_iz_table[lookup].sd_to_rt)
      key->source_depth_to_render_target = 1;
d157 4
a160 4
   if (wm_iz_table[lookup].ds_present || line_aa != AA_NEVER) {
      key->aa_dest_stencil_reg = reg;
      key->runtime_check_aads_emit = (!wm_iz_table[lookup].ds_present &&
				      line_aa == AA_SOMETIMES);
d165 1
a165 1
      key->dest_depth_reg = reg;
d169 1
a169 1
   key->nr_depth_regs = (reg+1)/2;
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d119 4
d125 1
d135 1
a135 1
   if (wm_iz_table[lookup].sd_present) {
@


1.1
log
@Initial revision
@
text
@d33 1
a33 1
#include "mtypes.h"
a52 64
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { C, 0, 1, 0, 0 }, 
 { C, 0, 1, 0, 0 }, 
 { C, 1, 1, 0, 0 }, 
 { C, 1, 1, 0, 0 }, 
 { C, 0, 1, 0, 0 }, 
 { C, 0, 1, 0, 0 }, 
 { C, 1, 1, 1, 0 }, 
 { C, 1, 1, 1, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { C, 1, 1, 1, 0 }, 
 { C, 1, 1, 1, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { P, 0, 0, 0, 0 }, 
 { C, 0, 1, 0, 0 }, 
 { C, 0, 1, 0, 0 }, 
 { C, 1, 1, 0, 0 }, 
 { C, 1, 1, 0, 0 }, 
 { C, 0, 1, 0, 0 }, 
 { C, 0, 1, 0, 0 }, 
 { C, 1, 1, 1, 0 }, 
 { C, 1, 1, 1, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { C, 1, 1, 1, 0 }, 
 { C, 1, 1, 1, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { C, 0, 1, 1, 0 }, 
 { C, 0, 0, 0, 1 }, 
 { C, 0, 0, 0, 1 }, 
 { C, 0, 1, 0, 1 }, 
 { C, 0, 1, 0, 1 }, 
 { C, 1, 1, 0, 1 }, 
 { C, 1, 1, 0, 1 }, 
 { C, 0, 1, 0, 1 }, 
 { C, 0, 1, 0, 1 }, 
 { C, 1, 1, 1, 1 }, 
 { C, 1, 1, 1, 1 }, 
 { C, 0, 1, 1, 1 }, 
 { C, 0, 1, 1, 1 }, 
 { C, 1, 1, 1, 1 }, 
 { C, 1, 1, 1, 1 }, 
 { C, 0, 1, 1, 1 }, 
 { C, 0, 1, 1, 1 }, 
 { C, 0, 0, 0, 1 }, 
 { C, 0, 0, 0, 1 }, 
 { C, 0, 1, 0, 1 }, 
 { C, 0, 1, 0, 1 }, 
 { C, 1, 1, 0, 1 }, 
 { C, 1, 1, 0, 1 }, 
 { C, 0, 1, 0, 1 }, 
 { C, 0, 1, 0, 1 }, 
 { C, 1, 1, 1, 1 }, 
 { C, 1, 1, 1, 1 }, 
 { C, 0, 1, 1, 1 }, 
 { C, 0, 1, 1, 1 }, 
 { C, 1, 1, 1, 1 }, 
 { C, 1, 1, 1, 1 }, 
 { C, 0, 1, 1, 1 }, 
 { C, 0, 1, 1, 1 }, 
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d33 1
a33 1
#include "main/mtypes.h"
d55 64
d183 3
a185 6
/**
 * \param line_aa  AA_NEVER, AA_ALWAYS or AA_SOMETIMES
 * \param lookup  bitmask of IZ_* flags
 */
void brw_wm_lookup_iz(struct intel_context *intel,
		      struct brw_wm_compile *c)
a187 4
   GLboolean kill_stats_promoted_workaround = GL_FALSE;
   int lookup = c->key.iz_lookup;
   bool uses_depth = (c->fp->program.Base.InputsRead &
		      (1 << FRAG_ATTRIB_WPOS)) != 0;
d190 1
a190 12

   /* Crazy workaround in the windowizer, which we need to track in
    * our register allocation and render target writes.  See the "If
    * statistics are enabled..." paragraph of 11.5.3.2: Early Depth
    * Test Cases [Pre-DevGT] of the 3D Pipeline - Windower B-Spec.
    */
   if (c->key.stats_wm &&
       (lookup & IZ_PS_KILL_ALPHATEST_BIT) &&
       wm_iz_table[lookup].mode == P) {
      kill_stats_promoted_workaround = GL_TRUE;
   }

d192 1
a192 1
      c->computes_depth = 1;
d194 2
a195 3
   if (wm_iz_table[lookup].sd_present || uses_depth ||
       kill_stats_promoted_workaround) {
      c->source_depth_reg = reg;
d199 2
a200 2
   if (wm_iz_table[lookup].sd_to_rt || kill_stats_promoted_workaround)
      c->source_depth_to_render_target = 1;
d202 4
a205 4
   if (wm_iz_table[lookup].ds_present || c->key.line_aa != AA_NEVER) {
      c->aa_dest_stencil_reg = reg;
      c->runtime_check_aads_emit = (!wm_iz_table[lookup].ds_present &&
				    c->key.line_aa == AA_SOMETIMES);
d210 1
a210 1
      c->dest_depth_reg = reg;
d214 1
a214 1
   c->nr_payload_regs = reg;
@

