head	1.11;
access;
symbols
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.10;
commitid	TnlogFl9nOv2eaRf;

1.10
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.9;
commitid	4ry2gvZGMXkCUD2n;

1.9
date	2015.01.25.14.41.20;	author jsg;	state Exp;
branches;
next	1.8;
commitid	mcxB0JvoI9gTDYXU;

1.8
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.04.16;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.40;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.40;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.27;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.48;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.11.30;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.48.37;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.11
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */

#include "main/glheader.h"
#include "main/macros.h"
#include "main/enums.h"
#include "program/program.h"

#include "intel_batchbuffer.h"

#include "brw_defines.h"
#include "brw_context.h"
#include "brw_eu.h"
#include "brw_clip.h"



static void brw_clip_line_alloc_regs( struct brw_clip_compile *c )
{
   struct brw_context *brw = c->func.brw;
   GLuint i = 0,j;

   /* Register usage is static, precompute here:
    */
   c->reg.R0 = retype(brw_vec8_grf(i, 0), BRW_REGISTER_TYPE_UD); i++;

   if (c->key.nr_userclip) {
      c->reg.fixed_planes = brw_vec4_grf(i, 0);
      i += (6 + c->key.nr_userclip + 1) / 2;

      c->prog_data.curb_read_length = (6 + c->key.nr_userclip + 1) / 2;
   }
   else
      c->prog_data.curb_read_length = 0;


   /* Payload vertices plus space for more generated vertices:
    */
   for (j = 0; j < 4; j++) {
      c->reg.vertex[j] = brw_vec4_grf(i, 0);
      i += c->nr_regs;
   }

   c->reg.t           = brw_vec1_grf(i, 0);
   c->reg.t0          = brw_vec1_grf(i, 1);
   c->reg.t1          = brw_vec1_grf(i, 2);
   c->reg.planemask   = retype(brw_vec1_grf(i, 3), BRW_REGISTER_TYPE_UD);
   c->reg.plane_equation = brw_vec4_grf(i, 4);
   i++;

   c->reg.dp0         = brw_vec1_grf(i, 0); /* fixme - dp4 will clobber r.1,2,3 */
   c->reg.dp1         = brw_vec1_grf(i, 4);
   i++;

   if (!c->key.nr_userclip) {
      c->reg.fixed_planes = brw_vec8_grf(i, 0);
      i++;
   }

   c->reg.vertex_src_mask = retype(brw_vec1_grf(i, 0), BRW_REGISTER_TYPE_UD);
   c->reg.clipdistance_offset = retype(brw_vec1_grf(i, 1), BRW_REGISTER_TYPE_W);
   i++;

   if (brw->gen == 5) {
      c->reg.ff_sync = retype(brw_vec1_grf(i, 0), BRW_REGISTER_TYPE_UD);
      i++;
   }

   c->first_tmp = i;
   c->last_tmp = i;

   c->prog_data.urb_read_length = c->nr_regs; /* ? */
   c->prog_data.total_grf = i;
}


/* Line clipping, more or less following the following algorithm:
 *
 *  for (p=0;p<MAX_PLANES;p++) {
 *     if (clipmask & (1 << p)) {
 *        GLfloat dp0 = DOTPROD( vtx0, plane[p] );
 *        GLfloat dp1 = DOTPROD( vtx1, plane[p] );
 *
 *        if (IS_NEGATIVE(dp1)) {
 *           GLfloat t = dp1 / (dp1 - dp0);
 *           if (t > t1) t1 = t;
 *        } else {
 *           GLfloat t = dp0 / (dp0 - dp1);
 *           if (t > t0) t0 = t;
 *        }
 *
 *        if (t0 + t1 >= 1.0)
 *           return;
 *     }
 *  }
 *
 *  interp( ctx, newvtx0, vtx0, vtx1, t0 );
 *  interp( ctx, newvtx1, vtx1, vtx0, t1 );
 *
 */
static void clip_and_emit_line( struct brw_clip_compile *c )
{
   struct brw_compile *p = &c->func;
   struct brw_context *brw = p->brw;
   struct brw_indirect vtx0     = brw_indirect(0, 0);
   struct brw_indirect vtx1      = brw_indirect(1, 0);
   struct brw_indirect newvtx0   = brw_indirect(2, 0);
   struct brw_indirect newvtx1   = brw_indirect(3, 0);
   struct brw_indirect plane_ptr = brw_indirect(4, 0);
   struct brw_reg v1_null_ud = retype(vec1(brw_null_reg()), BRW_REGISTER_TYPE_UD);
   GLuint hpos_offset = brw_varying_to_offset(&c->vue_map, VARYING_SLOT_POS);
   GLint clipdist0_offset = c->key.nr_userclip
      ? brw_varying_to_offset(&c->vue_map, VARYING_SLOT_CLIP_DIST0)
      : 0;

   brw_MOV(p, get_addr_reg(vtx0),      brw_address(c->reg.vertex[0]));
   brw_MOV(p, get_addr_reg(vtx1),      brw_address(c->reg.vertex[1]));
   brw_MOV(p, get_addr_reg(newvtx0),   brw_address(c->reg.vertex[2]));
   brw_MOV(p, get_addr_reg(newvtx1),   brw_address(c->reg.vertex[3]));
   brw_MOV(p, get_addr_reg(plane_ptr), brw_clip_plane0_address(c));

   /* Note: init t0, t1 together:
    */
   brw_MOV(p, vec2(c->reg.t0), brw_imm_f(0));

   brw_clip_init_planes(c);
   brw_clip_init_clipmask(c);

   /* -ve rhw workaround */
   if (brw->has_negative_rhw_bug) {
      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
      brw_AND(p, brw_null_reg(), get_element_ud(c->reg.R0, 2),
              brw_imm_ud(1<<20));
      brw_OR(p, c->reg.planemask, c->reg.planemask, brw_imm_ud(0x3f));
   }

   brw_set_predicate_control(p, BRW_PREDICATE_NONE);

   /* Set the initial vertex source mask: The first 6 planes are the bounds
    * of the view volume; the next 8 planes are the user clipping planes.
    */
   brw_MOV(p, c->reg.vertex_src_mask, brw_imm_ud(0x3fc0));

   /* Set the initial clipdistance offset to be 6 floats before gl_ClipDistance[0].
    * We'll increment 6 times before we start hitting actual user clipping. */
   brw_MOV(p, c->reg.clipdistance_offset, brw_imm_d(clipdist0_offset - 6*sizeof(float)));

   brw_DO(p, BRW_EXECUTE_1);
   {
      /* if (planemask & 1)
       */
      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
      brw_AND(p, v1_null_ud, c->reg.planemask, brw_imm_ud(1));

      brw_IF(p, BRW_EXECUTE_1);
      {
         brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
         brw_AND(p, v1_null_ud, c->reg.vertex_src_mask, brw_imm_ud(1));
         brw_IF(p, BRW_EXECUTE_1);
         {
            /* user clip distance: just fetch the correct float from each vertex */
            struct brw_indirect temp_ptr = brw_indirect(7, 0);
            brw_ADD(p, get_addr_reg(temp_ptr), get_addr_reg(vtx0), c->reg.clipdistance_offset);
            brw_MOV(p, c->reg.dp0, deref_1f(temp_ptr, 0));
            brw_ADD(p, get_addr_reg(temp_ptr), get_addr_reg(vtx1), c->reg.clipdistance_offset);
            brw_MOV(p, c->reg.dp1, deref_1f(temp_ptr, 0));
         }
         brw_ELSE(p);
         {
            /* fixed plane: fetch the hpos, dp4 against the plane. */
            if (c->key.nr_userclip)
               brw_MOV(p, c->reg.plane_equation, deref_4f(plane_ptr, 0));
            else
               brw_MOV(p, c->reg.plane_equation, deref_4b(plane_ptr, 0));

            brw_DP4(p, vec4(c->reg.dp0), deref_4f(vtx0, hpos_offset), c->reg.plane_equation);
            brw_DP4(p, vec4(c->reg.dp1), deref_4f(vtx1, hpos_offset), c->reg.plane_equation);
         }
         brw_ENDIF(p);

         brw_CMP(p, brw_null_reg(), BRW_CONDITIONAL_L, vec1(c->reg.dp1), brw_imm_f(0.0f));

         brw_IF(p, BRW_EXECUTE_1);
         {
             /*
              * Both can be negative on GM965/G965 due to RHW workaround
              * if so, this object should be rejected.
              */
             if (brw->has_negative_rhw_bug) {
                 brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_LE, c->reg.dp0, brw_imm_f(0.0));
                 brw_IF(p, BRW_EXECUTE_1);
                 {
                     brw_clip_kill_thread(c);
                 }
                 brw_ENDIF(p);
             }

             brw_ADD(p, c->reg.t, c->reg.dp1, negate(c->reg.dp0));
             brw_math_invert(p, c->reg.t, c->reg.t);
             brw_MUL(p, c->reg.t, c->reg.t, c->reg.dp1);

             brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_G, c->reg.t, c->reg.t1 );
             brw_MOV(p, c->reg.t1, c->reg.t);
             brw_set_predicate_control(p, BRW_PREDICATE_NONE);
	 }
	 brw_ELSE(p);
	 {
             /* Coming back in.  We know that both cannot be negative
              * because the line would have been culled in that case.
              */

             /* If both are positive, do nothing */
             /* Only on GM965/G965 */
             if (brw->has_negative_rhw_bug) {
                 brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_L, c->reg.dp0, brw_imm_f(0.0));
                 brw_IF(p, BRW_EXECUTE_1);
             }

             {
                 brw_ADD(p, c->reg.t, c->reg.dp0, negate(c->reg.dp1));
                 brw_math_invert(p, c->reg.t, c->reg.t);
                 brw_MUL(p, c->reg.t, c->reg.t, c->reg.dp0);

                 brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_G, c->reg.t, c->reg.t0 );
                 brw_MOV(p, c->reg.t0, c->reg.t);
                 brw_set_predicate_control(p, BRW_PREDICATE_NONE);
             }

             if (brw->has_negative_rhw_bug) {
                 brw_ENDIF(p);
             }
         }
	 brw_ENDIF(p);
      }
      brw_ENDIF(p);

      /* plane_ptr++;
       */
      brw_ADD(p, get_addr_reg(plane_ptr), get_addr_reg(plane_ptr), brw_clip_plane_stride(c));

      /* while (planemask>>=1) != 0
       */
      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
      brw_SHR(p, c->reg.planemask, c->reg.planemask, brw_imm_ud(1));
      brw_SHR(p, c->reg.vertex_src_mask, c->reg.vertex_src_mask, brw_imm_ud(1));
      brw_ADD(p, c->reg.clipdistance_offset, c->reg.clipdistance_offset, brw_imm_w(sizeof(float)));
   }
   brw_WHILE(p);

   brw_ADD(p, c->reg.t, c->reg.t0, c->reg.t1);
   brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_L, c->reg.t, brw_imm_f(1.0));
   brw_IF(p, BRW_EXECUTE_1);
   {
      brw_clip_interp_vertex(c, newvtx0, vtx0, vtx1, c->reg.t0, false);
      brw_clip_interp_vertex(c, newvtx1, vtx1, vtx0, c->reg.t1, false);

      brw_clip_emit_vue(c, newvtx0, BRW_URB_WRITE_ALLOCATE_COMPLETE,
                        (_3DPRIM_LINESTRIP << URB_WRITE_PRIM_TYPE_SHIFT)
                        | URB_WRITE_PRIM_START);
      brw_clip_emit_vue(c, newvtx1, BRW_URB_WRITE_EOT_COMPLETE,
                        (_3DPRIM_LINESTRIP << URB_WRITE_PRIM_TYPE_SHIFT)
                        | URB_WRITE_PRIM_END);
   }
   brw_ENDIF(p);
   brw_clip_kill_thread(c);
}



void brw_emit_line_clip( struct brw_clip_compile *c )
{
   brw_clip_line_alloc_regs(c);
   brw_clip_init_ff_sync(c);

   if (c->has_flat_shading) {
      if (c->key.pv_first)
         brw_clip_copy_flatshaded_attributes(c, 1, 0);
      else
         brw_clip_copy_flatshaded_attributes(c, 0, 1);
   }

   clip_and_emit_line(c);
}
@


1.10
log
@Merge Mesa 10.2.9
@
text
@@


1.9
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d112 1
a112 1
 *        if (dp1 < 0.0f) {
d159 1
a161 1
      brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_NZ);
a162 1
      brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
d165 2
d180 1
a181 1
      brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_NZ);
d185 1
a186 1
         brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_NZ);
d232 1
a232 1
             brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
d254 1
a254 2
                 brw_inst_set_pred_control(brw, brw_last_inst,
                                           BRW_PREDICATE_NORMAL);
d271 1
a272 1
      brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_NZ);
a273 1
      brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
a274 1
      brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
a276 1
   brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d112 1
a112 1
 *        if (IS_NEGATIVE(dp1)) {
a158 1
      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
d161 1
d163 1
a165 2
   brw_set_predicate_control(p, BRW_PREDICATE_NONE);

a178 1
      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
d180 1
a183 1
         brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
d185 1
d231 1
a231 1
             brw_set_predicate_control(p, BRW_PREDICATE_NONE);
d253 2
a254 1
                 brw_set_predicate_control(p, BRW_PREDICATE_NONE);
a270 1
      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
d272 1
d274 1
d276 1
d279 1
@


1.7
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d84 1
a84 1
      c->reg.fixed_planes = brw_vec8_grf(i, 0); 
d88 4
a104 1

d119 1
a119 1
 *  
a130 2
   /* FIXME: use VARYING_SLOT_CLIP_VERTEX if available for user clip planes. */

d140 3
d150 1
a150 1
   /* Note: init t0, t1 together: 
d167 9
d182 1
a182 1
      
d185 28
a212 15
	 if (c->key.nr_userclip)
	    brw_MOV(p, c->reg.plane_equation, deref_4f(plane_ptr, 0));
	 else
	    brw_MOV(p, c->reg.plane_equation, deref_4b(plane_ptr, 0));

	 /* dp = DP4(vtx->position, plane) 
	  */
	 brw_DP4(p, vec4(c->reg.dp0), deref_4f(vtx0, hpos_offset), c->reg.plane_equation);

	 /* if (IS_NEGATIVE(dp1)) 
	  */
	 brw_set_conditionalmod(p, BRW_CONDITIONAL_L);
	 brw_DP4(p, vec4(c->reg.dp1), deref_4f(vtx1, hpos_offset), c->reg.plane_equation);
	 brw_IF(p, BRW_EXECUTE_1);
	 {
d233 1
a233 1
	 } 
d264 1
a264 1
      
d273 2
d285 1
a285 1
      brw_clip_emit_vue(c, newvtx0, 1, 0,
d288 1
a288 1
      brw_clip_emit_vue(c, newvtx1, 0, 1,
d303 1
a303 1
   if (c->key.do_flat_shading) {
d305 1
a305 1
         brw_clip_copy_colors(c, 1, 0);
d307 1
a307 1
         brw_clip_copy_colors(c, 0, 1);
d309 1
a309 1
                
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d48 1
a48 1
   struct intel_context *intel = &c->func.brw->intel;
d88 1
a88 1
   if (intel->needs_ff_sync) {
d128 2
a136 1
   struct brw_instruction *plane_loop;
d138 1
d163 1
a163 1
   plane_loop = brw_DO(p, BRW_EXECUTE_1);
d179 1
a179 1
	 brw_DP4(p, vec4(c->reg.dp0), deref_4f(vtx0, c->offset[VERT_RESULT_HPOS]), c->reg.plane_equation);
d184 1
a184 1
	 brw_DP4(p, vec4(c->reg.dp1), deref_4f(vtx1, c->offset[VERT_RESULT_HPOS]), c->reg.plane_equation);
d248 1
a248 1
   brw_WHILE(p, plane_loop);
d254 2
a255 2
      brw_clip_interp_vertex(c, newvtx0, vtx0, vtx1, c->reg.t0, GL_FALSE);
      brw_clip_interp_vertex(c, newvtx1, vtx1, vtx0, c->reg.t1, GL_FALSE);
d257 6
a262 2
      brw_clip_emit_vue(c, newvtx0, 1, 0, (_3DPRIM_LINESTRIP << 2) | R02_PRIM_START);
      brw_clip_emit_vue(c, newvtx1, 0, 1, (_3DPRIM_LINESTRIP << 2) | R02_PRIM_END); 
@


1.5
log
@Merge Mesa 7.10.3
@
text
@a135 4
   struct brw_instruction *plane_active;
   struct brw_instruction *is_negative;
   struct brw_instruction *is_neg2 = NULL;
   struct brw_instruction *not_culled;
d168 1
a168 1
      plane_active = brw_IF(p, BRW_EXECUTE_1);
d183 1
a183 1
	 is_negative = brw_IF(p, BRW_EXECUTE_1);
d191 1
a191 1
                 is_neg2 = brw_IF(p, BRW_EXECUTE_1);
d195 1
a195 1
                 brw_ENDIF(p, is_neg2);
d206 1
a206 1
	 is_negative = brw_ELSE(p, is_negative);
d216 1
a216 1
                 is_neg2 = brw_IF(p, BRW_EXECUTE_1);
d230 1
a230 1
                 brw_ENDIF(p, is_neg2);
d233 1
a233 1
	 brw_ENDIF(p, is_negative);	 
d235 1
a235 1
      brw_ENDIF(p, plane_active);
d250 1
a250 1
   not_culled = brw_IF(p, BRW_EXECUTE_1);
d258 1
a258 1
   brw_ENDIF(p, not_culled);
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d35 1
a35 1
#include "shader/program.h"
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a41 1
#include "brw_util.h"
d48 1
d88 4
d129 1
d138 1
a138 1
   struct brw_instruction *is_neg2;
d156 1
a156 1
   if (!BRW_IS_G4X(p->brw)) {
d193 1
a193 1
             if (!BRW_IS_G4X(p->brw)) {
d218 1
a218 1
             if (!BRW_IS_G4X(p->brw)) {
d233 1
a233 1
             if (!BRW_IS_G4X(p->brw)) {
d271 1
d273 6
a278 2
   if (c->key.do_flat_shading)
      brw_clip_copy_colors(c, 0, 1);
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d32 4
a35 3
#include "glheader.h"
#include "macros.h"
#include "enums.h"
a36 1
#include "shader/program.h"
d151 1
a151 1
   if (!(BRW_IS_GM45(p->brw) || BRW_IS_G4X(p->brw))) {
d184 20
a203 7
	    brw_ADD(p, c->reg.t, c->reg.dp1, negate(c->reg.dp0));
	    brw_math_invert(p, c->reg.t, c->reg.t);
	    brw_MUL(p, c->reg.t, c->reg.t, c->reg.dp1);

	    brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_G, c->reg.t, c->reg.t1 );
	    brw_MOV(p, c->reg.t1, c->reg.t);
	    brw_set_predicate_control(p, BRW_PREDICATE_NONE);
d207 11
a217 7
	    /* Coming back in.  We know that both cannot be negative
	     * because the line would have been culled in that case.
	     */

	    /* If both are positive, do nothing */
             brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_L, c->reg.dp0, brw_imm_f(0.0));
             is_neg2 = brw_IF(p, BRW_EXECUTE_1);
d219 13
a231 10
		brw_ADD(p, c->reg.t, c->reg.dp0, negate(c->reg.dp1));
		brw_math_invert(p, c->reg.t, c->reg.t);
		brw_MUL(p, c->reg.t, c->reg.t, c->reg.dp0);

		brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_G, c->reg.t, c->reg.t0 );
		brw_MOV(p, c->reg.t0, c->reg.t);
		brw_set_predicate_control(p, BRW_PREDICATE_NONE);
	     }
	     brw_ENDIF(p, is_neg2);
	 }
@


1.1
log
@Initial revision
@
text
@d133 1
d150 10
a196 3
	    brw_ADD(p, c->reg.t, c->reg.dp0, negate(c->reg.dp1));
	    brw_math_invert(p, c->reg.t, c->reg.t);
	    brw_MUL(p, c->reg.t, c->reg.t, c->reg.dp0);
d198 13
a210 3
	    brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_G, c->reg.t, c->reg.t0 );
	    brw_MOV(p, c->reg.t0, c->reg.t);
	    brw_set_predicate_control(p, BRW_PREDICATE_NONE);
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d32 3
a34 4
#include "main/glheader.h"
#include "main/macros.h"
#include "main/enums.h"
#include "program/program.h"
d36 1
d42 1
a48 1
   struct intel_context *intel = &c->func.brw->intel;
a87 4
   if (intel->needs_ff_sync) {
      c->reg.ff_sync = retype(brw_vec1_grf(i, 0), BRW_REGISTER_TYPE_UD);
      i++;
   }
a124 1
   struct brw_context *brw = p->brw;
a132 1
   struct brw_instruction *is_neg2 = NULL;
a148 10
   /* -ve rhw workaround */
   if (brw->has_negative_rhw_bug) {
      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
      brw_AND(p, brw_null_reg(), get_element_ud(c->reg.R0, 2),
              brw_imm_ud(1<<20));
      brw_OR(p, c->reg.planemask, c->reg.planemask, brw_imm_ud(0x3f));
   }

   brw_set_predicate_control(p, BRW_PREDICATE_NONE);

d173 7
a179 20
             /*
              * Both can be negative on GM965/G965 due to RHW workaround
              * if so, this object should be rejected.
              */
             if (brw->has_negative_rhw_bug) {
                 brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_LE, c->reg.dp0, brw_imm_f(0.0));
                 is_neg2 = brw_IF(p, BRW_EXECUTE_1);
                 {
                     brw_clip_kill_thread(c);
                 }
                 brw_ENDIF(p, is_neg2);
             }

             brw_ADD(p, c->reg.t, c->reg.dp1, negate(c->reg.dp0));
             brw_math_invert(p, c->reg.t, c->reg.t);
             brw_MUL(p, c->reg.t, c->reg.t, c->reg.dp1);

             brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_G, c->reg.t, c->reg.t1 );
             brw_MOV(p, c->reg.t1, c->reg.t);
             brw_set_predicate_control(p, BRW_PREDICATE_NONE);
d183 11
a193 25
             /* Coming back in.  We know that both cannot be negative
              * because the line would have been culled in that case.
              */

             /* If both are positive, do nothing */
             /* Only on GM965/G965 */
             if (brw->has_negative_rhw_bug) {
                 brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_L, c->reg.dp0, brw_imm_f(0.0));
                 is_neg2 = brw_IF(p, BRW_EXECUTE_1);
             }

             {
                 brw_ADD(p, c->reg.t, c->reg.dp0, negate(c->reg.dp1));
                 brw_math_invert(p, c->reg.t, c->reg.t);
                 brw_MUL(p, c->reg.t, c->reg.t, c->reg.dp0);

                 brw_CMP(p, vec1(brw_null_reg()), BRW_CONDITIONAL_G, c->reg.t, c->reg.t0 );
                 brw_MOV(p, c->reg.t0, c->reg.t);
                 brw_set_predicate_control(p, BRW_PREDICATE_NONE);
             }

             if (brw->has_negative_rhw_bug) {
                 brw_ENDIF(p, is_neg2);
             }
         }
a227 1
   brw_clip_init_ff_sync(c);
d229 2
a230 6
   if (c->key.do_flat_shading) {
      if (c->key.pv_first)
         brw_clip_copy_colors(c, 1, 0);
      else
         brw_clip_copy_colors(c, 0, 1);
   }
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d48 1
a48 1
   struct brw_context *brw = c->func.brw;
d88 1
a88 1
   if (brw->gen == 5) {
a127 2
   /* FIXME: use VARYING_SLOT_CLIP_VERTEX if available for user clip planes. */

d135 5
a140 1
   GLuint hpos_offset = brw_varying_to_offset(&c->vue_map, VARYING_SLOT_POS);
d165 1
a165 1
   brw_DO(p, BRW_EXECUTE_1);
d172 1
a172 1
      brw_IF(p, BRW_EXECUTE_1);
d181 1
a181 1
	 brw_DP4(p, vec4(c->reg.dp0), deref_4f(vtx0, hpos_offset), c->reg.plane_equation);
d186 2
a187 2
	 brw_DP4(p, vec4(c->reg.dp1), deref_4f(vtx1, hpos_offset), c->reg.plane_equation);
	 brw_IF(p, BRW_EXECUTE_1);
d195 1
a195 1
                 brw_IF(p, BRW_EXECUTE_1);
d199 1
a199 1
                 brw_ENDIF(p);
d210 1
a210 1
	 brw_ELSE(p);
d220 1
a220 1
                 brw_IF(p, BRW_EXECUTE_1);
d234 1
a234 1
                 brw_ENDIF(p);
d237 1
a237 1
	 brw_ENDIF(p);
d239 1
a239 1
      brw_ENDIF(p);
d250 1
a250 1
   brw_WHILE(p);
d254 1
a254 1
   brw_IF(p, BRW_EXECUTE_1);
d256 2
a257 2
      brw_clip_interp_vertex(c, newvtx0, vtx0, vtx1, c->reg.t0, false);
      brw_clip_interp_vertex(c, newvtx1, vtx1, vtx0, c->reg.t1, false);
d259 2
a260 6
      brw_clip_emit_vue(c, newvtx0, 1, 0,
                        (_3DPRIM_LINESTRIP << URB_WRITE_PRIM_TYPE_SHIFT)
                        | URB_WRITE_PRIM_START);
      brw_clip_emit_vue(c, newvtx1, 0, 1,
                        (_3DPRIM_LINESTRIP << URB_WRITE_PRIM_TYPE_SHIFT)
                        | URB_WRITE_PRIM_END);
d262 1
a262 1
   brw_ENDIF(p);
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d84 1
a84 1
      c->reg.fixed_planes = brw_vec8_grf(i, 0);
a87 4
   c->reg.vertex_src_mask = retype(brw_vec1_grf(i, 0), BRW_REGISTER_TYPE_UD);
   c->reg.clipdistance_offset = retype(brw_vec1_grf(i, 1), BRW_REGISTER_TYPE_W);
   i++;

d101 1
d116 1
a116 1
 *
d128 2
a138 3
   GLint clipdist0_offset = c->key.nr_userclip
      ? brw_varying_to_offset(&c->vue_map, VARYING_SLOT_CLIP_DIST0)
      : 0;
d146 1
a146 1
   /* Note: init t0, t1 together:
a162 9
   /* Set the initial vertex source mask: The first 6 planes are the bounds
    * of the view volume; the next 8 planes are the user clipping planes.
    */
   brw_MOV(p, c->reg.vertex_src_mask, brw_imm_ud(0x3fc0));

   /* Set the initial clipdistance offset to be 6 floats before gl_ClipDistance[0].
    * We'll increment 6 times before we start hitting actual user clipping. */
   brw_MOV(p, c->reg.clipdistance_offset, brw_imm_d(clipdist0_offset - 6*sizeof(float)));

d169 1
a169 1

d172 15
a186 28
         brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
         brw_AND(p, v1_null_ud, c->reg.vertex_src_mask, brw_imm_ud(1));
         brw_IF(p, BRW_EXECUTE_1);
         {
            /* user clip distance: just fetch the correct float from each vertex */
            struct brw_indirect temp_ptr = brw_indirect(7, 0);
            brw_ADD(p, get_addr_reg(temp_ptr), get_addr_reg(vtx0), c->reg.clipdistance_offset);
            brw_MOV(p, c->reg.dp0, deref_1f(temp_ptr, 0));
            brw_ADD(p, get_addr_reg(temp_ptr), get_addr_reg(vtx1), c->reg.clipdistance_offset);
            brw_MOV(p, c->reg.dp1, deref_1f(temp_ptr, 0));
         }
         brw_ELSE(p);
         {
            /* fixed plane: fetch the hpos, dp4 against the plane. */
            if (c->key.nr_userclip)
               brw_MOV(p, c->reg.plane_equation, deref_4f(plane_ptr, 0));
            else
               brw_MOV(p, c->reg.plane_equation, deref_4b(plane_ptr, 0));

            brw_DP4(p, vec4(c->reg.dp0), deref_4f(vtx0, hpos_offset), c->reg.plane_equation);
            brw_DP4(p, vec4(c->reg.dp1), deref_4f(vtx1, hpos_offset), c->reg.plane_equation);
         }
         brw_ENDIF(p);

         brw_CMP(p, brw_null_reg(), BRW_CONDITIONAL_L, vec1(c->reg.dp1), brw_imm_f(0.0f));

         brw_IF(p, BRW_EXECUTE_1);
         {
d207 1
a207 1
	 }
d238 1
a238 1

a246 2
      brw_SHR(p, c->reg.vertex_src_mask, c->reg.vertex_src_mask, brw_imm_ud(1));
      brw_ADD(p, c->reg.clipdistance_offset, c->reg.clipdistance_offset, brw_imm_w(sizeof(float)));
d257 1
a257 1
      brw_clip_emit_vue(c, newvtx0, BRW_URB_WRITE_ALLOCATE_COMPLETE,
d260 1
a260 1
      brw_clip_emit_vue(c, newvtx1, BRW_URB_WRITE_EOT_COMPLETE,
d275 1
a275 1
   if (c->has_flat_shading) {
d277 1
a277 1
         brw_clip_copy_flatshaded_attributes(c, 1, 0);
d279 1
a279 1
         brw_clip_copy_flatshaded_attributes(c, 0, 1);
d281 1
a281 1

@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d112 1
a112 1
 *        if (dp1 < 0.0f) {
d159 1
a161 1
      brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_NZ);
a162 1
      brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
d165 2
d180 1
a181 1
      brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_NZ);
d185 1
a186 1
         brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_NZ);
d232 1
a232 1
             brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
d254 1
a254 2
                 brw_inst_set_pred_control(brw, brw_last_inst,
                                           BRW_PREDICATE_NORMAL);
d271 1
a272 1
      brw_inst_set_cond_modifier(brw, brw_last_inst, BRW_CONDITIONAL_NZ);
a273 1
      brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
a274 1
      brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
a276 1
   brw_inst_set_pred_control(brw, brw_last_inst, BRW_PREDICATE_NORMAL);
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d112 1
a112 1
 *        if (IS_NEGATIVE(dp1)) {
a158 1
      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
d161 1
d163 1
a165 2
   brw_set_predicate_control(p, BRW_PREDICATE_NONE);

a178 1
      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
d180 1
a183 1
         brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
d185 1
d231 1
a231 1
             brw_set_predicate_control(p, BRW_PREDICATE_NONE);
d253 2
a254 1
                 brw_set_predicate_control(p, BRW_PREDICATE_NONE);
a270 1
      brw_set_conditionalmod(p, BRW_CONDITIONAL_NZ);
d272 1
d274 1
d276 1
d279 1
@


