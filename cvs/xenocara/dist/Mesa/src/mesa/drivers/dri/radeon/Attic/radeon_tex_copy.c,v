head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.51;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.05.34;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.25;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.42;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.16.07;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.57;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009 Maciej Cencora <m.cencora@@gmail.com>
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "radeon_common.h"
#include "radeon_texture.h"

#include "main/enums.h"
#include "main/image.h"
#include "main/teximage.h"
#include "main/texstate.h"
#include "drivers/common/meta.h"

#include "radeon_mipmap_tree.h"

static GLboolean
do_copy_texsubimage(struct gl_context *ctx,
                    struct radeon_tex_obj *tobj,
                    radeon_texture_image *timg,
                    GLint dstx, GLint dsty,
                    struct radeon_renderbuffer *rrb,
                    GLint x, GLint y,
                    GLsizei width, GLsizei height)
{
    radeonContextPtr radeon = RADEON_CONTEXT(ctx);
    const GLuint face = timg->base.Base.Face;
    const GLuint level = timg->base.Base.Level;
    unsigned src_bpp;
    unsigned dst_bpp;
    mesa_format src_mesaformat;
    mesa_format dst_mesaformat;
    unsigned flip_y;

    if (!radeon->vtbl.blit) {
        return GL_FALSE;
    }

    // This is software renderbuffer, fallback to swrast
    if (!rrb) {
        return GL_FALSE;
    }

    if (_mesa_get_format_bits(timg->base.Base.TexFormat, GL_DEPTH_BITS) > 0) {
        /* copying depth values */
        flip_y = ctx->ReadBuffer->Attachment[BUFFER_DEPTH].Type == GL_NONE;
    } else {
        /* copying color */
        flip_y = ctx->ReadBuffer->Attachment[BUFFER_COLOR0].Type == GL_NONE;
    }

    if (!timg->mt) {
        radeon_validate_texture_miptree(ctx, &tobj->base.Sampler, &tobj->base);
    }

    assert(rrb->bo);
    assert(timg->mt);
    assert(timg->mt->bo);
    assert(timg->base.Base.Width >= dstx + width);
    assert(timg->base.Base.Height >= dsty + height);

    intptr_t src_offset = rrb->draw_offset;
    intptr_t dst_offset = radeon_miptree_image_offset(timg->mt, face, level);

    if (0) {
        fprintf(stderr, "%s: copying to face %d, level %d\n",
                __FUNCTION__, face, level);
        fprintf(stderr, "to: x %d, y %d, offset %d\n", dstx, dsty, (uint32_t) dst_offset);
        fprintf(stderr, "from (%dx%d) width %d, height %d, offset %d, pitch %d\n",
                x, y, rrb->base.Base.Width, rrb->base.Base.Height, (uint32_t) src_offset, rrb->pitch/rrb->cpp);
        fprintf(stderr, "src size %d, dst size %d\n", rrb->bo->size, timg->mt->bo->size);

    }

    src_mesaformat = rrb->base.Base.Format;
    dst_mesaformat = timg->base.Base.TexFormat;
    src_bpp = _mesa_get_format_bytes(src_mesaformat);
    dst_bpp = _mesa_get_format_bytes(dst_mesaformat);
    if (!radeon->vtbl.check_blit(dst_mesaformat, rrb->pitch / rrb->cpp)) {
	    /* depth formats tend to be special */
	    if (_mesa_get_format_bits(dst_mesaformat, GL_DEPTH_BITS) > 0)
		    return GL_FALSE;

	    if (src_bpp != dst_bpp)
		    return GL_FALSE;

	    switch (dst_bpp) {
	    case 2:
		    src_mesaformat = MESA_FORMAT_B5G6R5_UNORM;
		    dst_mesaformat = MESA_FORMAT_B5G6R5_UNORM;
		    break;
	    case 4:
		    src_mesaformat = MESA_FORMAT_B8G8R8A8_UNORM;
		    dst_mesaformat = MESA_FORMAT_B8G8R8A8_UNORM;
		    break;
	    case 1:
		    src_mesaformat = MESA_FORMAT_A_UNORM8;
		    dst_mesaformat = MESA_FORMAT_A_UNORM8;
		    break;
	    default:
		    return GL_FALSE;
	    }
    }

    /* blit from src buffer to texture */
    return radeon->vtbl.blit(ctx, rrb->bo, src_offset, src_mesaformat, rrb->pitch/rrb->cpp,
                             rrb->base.Base.Width, rrb->base.Base.Height, x, y,
                             timg->mt->bo, dst_offset, dst_mesaformat,
                             timg->mt->levels[level].rowstride / dst_bpp,
                             timg->base.Base.Width, timg->base.Base.Height,
                             dstx, dsty, width, height, flip_y);
}

void
radeonCopyTexSubImage(struct gl_context *ctx, GLuint dims,
                      struct gl_texture_image *texImage,
                      GLint xoffset, GLint yoffset, GLint slice,
                      struct gl_renderbuffer *rb,
                      GLint x, GLint y,
                      GLsizei width, GLsizei height)
{
    radeonContextPtr radeon = RADEON_CONTEXT(ctx);
    radeon_prepare_render(radeon);

    if (slice != 0 || !do_copy_texsubimage(ctx,
                             radeon_tex_obj(texImage->TexObject),
                             (radeon_texture_image *)texImage,
                             xoffset, yoffset,
                             radeon_renderbuffer(rb),                                                        x, y, width, height)) {

        radeon_print(RADEON_FALLBACKS, RADEON_NORMAL,
                     "Falling back to sw for glCopyTexSubImage2D\n");

        _mesa_meta_CopyTexSubImage(ctx, dims, texImage,
                                   xoffset, yoffset, slice,
                                     rb, x, y, width, height);
    }
}
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d53 2
a54 2
    gl_format src_mesaformat;
    gl_format dst_mesaformat;
d111 2
a112 2
		    src_mesaformat = MESA_FORMAT_RGB565;
		    dst_mesaformat = MESA_FORMAT_RGB565;
d115 2
a116 2
		    src_mesaformat = MESA_FORMAT_ARGB8888;
		    dst_mesaformat = MESA_FORMAT_ARGB8888;
d119 2
a120 2
		    src_mesaformat = MESA_FORMAT_A8;
		    dst_mesaformat = MESA_FORMAT_A8;
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a40 1
                    GLenum target, GLint level,
d44 1
d49 2
a50 1
    struct radeon_renderbuffer *rrb;
a54 2
    unsigned src_width;
    unsigned dst_width;
d61 7
a67 6
    if (_mesa_get_format_bits(timg->base.TexFormat, GL_DEPTH_BITS) > 0) {
        if (ctx->ReadBuffer->_DepthBuffer && ctx->ReadBuffer->_DepthBuffer->Wrapped) {
            rrb = radeon_renderbuffer(ctx->ReadBuffer->_DepthBuffer->Wrapped);
        } else {
            rrb = radeon_renderbuffer(ctx->ReadBuffer->_DepthBuffer);
        }
d70 1
a70 1
        rrb = radeon_renderbuffer(ctx->ReadBuffer->_ColorReadBuffer);
a73 5
    // This is software renderbuffer, fallback to swrast
    if (!rrb) {
        return GL_FALSE;
    }

d75 1
a75 1
        radeon_validate_texture_miptree(ctx, &tobj->base);
d81 2
a82 2
    assert(timg->base.Width >= dstx + width);
    assert(timg->base.Height >= dsty + height);
d85 1
a85 1
    intptr_t dst_offset = radeon_miptree_image_offset(timg->mt, _mesa_tex_target_to_face(target), level);
d89 1
a89 1
                __FUNCTION__, _mesa_tex_target_to_face(target), level);
d92 1
a92 1
                x, y, rrb->base.Width, rrb->base.Height, (uint32_t) src_offset, rrb->pitch/rrb->cpp);
d97 2
a98 4
    src_mesaformat = rrb->base.Format;
    dst_mesaformat = timg->base.TexFormat;
    src_width = rrb->base.Width;
    dst_width = timg->base.Width;
d101 1
a101 1
    if (!radeon->vtbl.check_blit(dst_mesaformat)) {
d129 1
a129 1
                             src_width, rrb->base.Height, x, y,
d132 1
a132 1
                             dst_width, timg->base.Height,
d137 6
a142 4
radeonCopyTexImage2D(struct gl_context *ctx, GLenum target, GLint level,
                     GLenum internalFormat,
                     GLint x, GLint y, GLsizei width, GLsizei height,
                     GLint border)
a143 59
    struct gl_texture_unit *texUnit = _mesa_get_current_tex_unit(ctx);
    struct gl_texture_object *texObj =
        _mesa_select_tex_object(ctx, texUnit, target);
    struct gl_texture_image *texImage =
        _mesa_select_tex_image(ctx, texObj, target, level);
    int srcx, srcy, dstx, dsty;

    radeonContextPtr radeon = RADEON_CONTEXT(ctx);
    radeon_prepare_render(radeon);

    if (border)
        goto fail;

    /* Setup or redefine the texture object, mipmap tree and texture
     * image.  Don't populate yet.
     */
    ctx->Driver.TexImage2D(ctx, target, level, internalFormat,
                           width, height, border,
                           GL_RGBA, GL_UNSIGNED_BYTE, NULL,
                           &ctx->DefaultPacking, texObj, texImage);

    srcx = x;
    srcy = y;
    dstx = 0;
    dsty = 0;
    if (!_mesa_clip_copytexsubimage(ctx,
                                    &dstx, &dsty,
                                    &srcx, &srcy,
                                    &width, &height)) {
        return;
    }

    if (!do_copy_texsubimage(ctx, target, level,
                             radeon_tex_obj(texObj), (radeon_texture_image *)texImage,
                             0, 0, x, y, width, height)) {
        goto fail;
    }

    return;

fail:
    radeon_print(RADEON_FALLBACKS, RADEON_NORMAL,
                 "Falling back to sw for glCopyTexImage2D (internalFormat %s, border %d)\n",
                 _mesa_lookup_enum_by_nr(internalFormat), border);

    _mesa_meta_CopyTexImage2D(ctx, target, level, internalFormat, x, y,
                              width, height, border);
}

void
radeonCopyTexSubImage2D(struct gl_context *ctx, GLenum target, GLint level,
                        GLint xoffset, GLint yoffset,
                        GLint x, GLint y,
                        GLsizei width, GLsizei height)
{
    struct gl_texture_unit *texUnit = _mesa_get_current_tex_unit(ctx);
    struct gl_texture_object *texObj = _mesa_select_tex_object(ctx, texUnit, target);
    struct gl_texture_image *texImage = _mesa_select_tex_image(ctx, texObj, target, level);

d147 5
a151 3
    if (!do_copy_texsubimage(ctx, target, level,
                             radeon_tex_obj(texObj), (radeon_texture_image *)texImage,
                             xoffset, yoffset, x, y, width, height)) {
d156 3
a158 2
        _mesa_meta_CopyTexSubImage2D(ctx, target, level,
                                     xoffset, yoffset, x, y, width, height);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d31 1
d40 1
a40 1
do_copy_texsubimage(GLcontext *ctx,
d56 1
d63 6
a68 1
        rrb = radeon_get_depthbuffer(radeon);
d70 7
a76 1
        rrb = radeon_get_colorbuffer(radeon);
d83 1
a83 1
    assert(rrb && rrb->bo);
d140 1
a140 1
                             dstx, dsty, width, height, 1);
d144 1
a144 1
radeonCopyTexImage2D(GLcontext *ctx, GLenum target, GLint level,
d156 3
d190 4
d199 1
a199 1
radeonCopyTexSubImage2D(GLcontext *ctx, GLenum target, GLint level,
d208 3
d215 2
a216 1
       //DEBUG_FALLBACKS
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a30 1
#include "main/enums.h"
d39 1
a39 1
do_copy_texsubimage(struct gl_context *ctx,
a54 1
    unsigned flip_y;
d61 1
a61 6
        if (ctx->ReadBuffer->_DepthBuffer && ctx->ReadBuffer->_DepthBuffer->Wrapped) {
            rrb = radeon_renderbuffer(ctx->ReadBuffer->_DepthBuffer->Wrapped);
        } else {
            rrb = radeon_renderbuffer(ctx->ReadBuffer->_DepthBuffer);
        }
        flip_y = ctx->ReadBuffer->Attachment[BUFFER_DEPTH].Type == GL_NONE;
d63 1
a63 7
        rrb = radeon_renderbuffer(ctx->ReadBuffer->_ColorReadBuffer);
        flip_y = ctx->ReadBuffer->Attachment[BUFFER_COLOR0].Type == GL_NONE;
    }

    // This is software renderbuffer, fallback to swrast
    if (!rrb) {
        return GL_FALSE;
d70 1
a70 1
    assert(rrb->bo);
d127 1
a127 1
                             dstx, dsty, width, height, flip_y);
d131 1
a131 1
radeonCopyTexImage2D(struct gl_context *ctx, GLenum target, GLint level,
a142 3
    radeonContextPtr radeon = RADEON_CONTEXT(ctx);
    radeon_prepare_render(radeon);

a173 4
    radeon_print(RADEON_FALLBACKS, RADEON_NORMAL,
                 "Falling back to sw for glCopyTexImage2D (internalFormat %s, border %d)\n",
                 _mesa_lookup_enum_by_nr(internalFormat), border);

d179 1
a179 1
radeonCopyTexSubImage2D(struct gl_context *ctx, GLenum target, GLint level,
a187 3
    radeonContextPtr radeon = RADEON_CONTEXT(ctx);
    radeon_prepare_render(radeon);

d192 1
a192 2
        radeon_print(RADEON_FALLBACKS, RADEON_NORMAL,
                     "Falling back to sw for glCopyTexSubImage2D\n");
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d41 1
a44 1
                    struct radeon_renderbuffer *rrb,
d49 1
a49 2
    const GLuint face = timg->base.Base.Face;
    const GLuint level = timg->base.Base.Level;
d54 2
d62 12
a78 8
    if (_mesa_get_format_bits(timg->base.Base.TexFormat, GL_DEPTH_BITS) > 0) {
        /* copying depth values */
        flip_y = ctx->ReadBuffer->Attachment[BUFFER_DEPTH].Type == GL_NONE;
    } else {
        /* copying color */
        flip_y = ctx->ReadBuffer->Attachment[BUFFER_COLOR0].Type == GL_NONE;
    }

d80 1
a80 1
        radeon_validate_texture_miptree(ctx, &tobj->base.Sampler, &tobj->base);
d86 2
a87 2
    assert(timg->base.Base.Width >= dstx + width);
    assert(timg->base.Base.Height >= dsty + height);
d90 1
a90 1
    intptr_t dst_offset = radeon_miptree_image_offset(timg->mt, face, level);
d94 1
a94 1
                __FUNCTION__, face, level);
d97 1
a97 1
                x, y, rrb->base.Base.Width, rrb->base.Base.Height, (uint32_t) src_offset, rrb->pitch/rrb->cpp);
d102 4
a105 2
    src_mesaformat = rrb->base.Base.Format;
    dst_mesaformat = timg->base.Base.TexFormat;
d108 1
a108 1
    if (!radeon->vtbl.check_blit(dst_mesaformat, rrb->pitch / rrb->cpp)) {
d136 1
a136 1
                             rrb->base.Base.Width, rrb->base.Base.Height, x, y,
d139 1
a139 1
                             timg->base.Base.Width, timg->base.Base.Height,
d144 4
a147 6
radeonCopyTexSubImage(struct gl_context *ctx, GLuint dims,
                      struct gl_texture_image *texImage,
                      GLint xoffset, GLint yoffset, GLint slice,
                      struct gl_renderbuffer *rb,
                      GLint x, GLint y,
                      GLsizei width, GLsizei height)
d149 59
d211 3
a213 5
    if (slice != 0 || !do_copy_texsubimage(ctx,
                             radeon_tex_obj(texImage->TexObject),
                             (radeon_texture_image *)texImage,
                             xoffset, yoffset,
                             radeon_renderbuffer(rb),                                                        x, y, width, height)) {
d218 2
a219 3
        _mesa_meta_CopyTexSubImage(ctx, dims, texImage,
                                   xoffset, yoffset, slice,
                                     rb, x, y, width, height);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d53 2
a54 2
    mesa_format src_mesaformat;
    mesa_format dst_mesaformat;
d111 2
a112 2
		    src_mesaformat = MESA_FORMAT_B5G6R5_UNORM;
		    dst_mesaformat = MESA_FORMAT_B5G6R5_UNORM;
d115 2
a116 2
		    src_mesaformat = MESA_FORMAT_B8G8R8A8_UNORM;
		    dst_mesaformat = MESA_FORMAT_B8G8R8A8_UNORM;
d119 2
a120 2
		    src_mesaformat = MESA_FORMAT_A_UNORM8;
		    dst_mesaformat = MESA_FORMAT_A_UNORM8;
@


