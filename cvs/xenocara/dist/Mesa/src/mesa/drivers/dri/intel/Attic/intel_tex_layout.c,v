head	1.8;
access;
symbols
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2013.09.05.14.04.36;	author jsg;	state dead;
branches;
next	1.7;

1.7
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.16;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.17.28.44;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.28.44;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.38;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Merge Mesa 9.2.0
@
text
@/**************************************************************************
 * 
 * Copyright 2006 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keith@@tungstengraphics.com>
  *   Michel DÃ¤nzer <michel@@tungstengraphics.com>
  */

#include "intel_mipmap_tree.h"
#include "intel_tex_layout.h"
#include "intel_context.h"
#include "main/macros.h"

void
intel_get_texture_alignment_unit(gl_format format,
				 unsigned int *w, unsigned int *h)
{
   if (_mesa_is_format_compressed(format)) {
      /* The hardware alignment requirements for compressed textures
       * happen to match the block boundaries.
       */
      _mesa_get_format_block_size(format, w, h);
   } else {
      *w = 4;
      *h = 2;
   }
}

void i945_miptree_layout_2d(struct intel_context *intel,
			    struct intel_mipmap_tree *mt,
			    uint32_t tiling, int nr_images)
{
   GLuint align_h, align_w;
   GLuint level;
   GLuint x = 0;
   GLuint y = 0;
   GLuint width = mt->width0;
   GLuint height = mt->height0;

   mt->total_width = mt->width0;
   intel_get_texture_alignment_unit(mt->format, &align_w, &align_h);

   if (mt->compressed) {
       mt->total_width = ALIGN(mt->width0, align_w);
   }

   /* May need to adjust width to accomodate the placement of
    * the 2nd mipmap.  This occurs when the alignment
    * constraints of mipmap placement push the right edge of the
    * 2nd mipmap out past the width of its parent.
    */
   if (mt->first_level != mt->last_level) {
       GLuint mip1_width;

       if (mt->compressed) {
           mip1_width = ALIGN(minify(mt->width0), align_w)
               + ALIGN(minify(minify(mt->width0)), align_w);
       } else {
           mip1_width = ALIGN(minify(mt->width0), align_w)
               + minify(minify(mt->width0));
       }

       if (mip1_width > mt->total_width) {
           mt->total_width = mip1_width;
       }
   }

   mt->total_height = 0;

   for ( level = mt->first_level ; level <= mt->last_level ; level++ ) {
      GLuint img_height;

      intel_miptree_set_level_info(mt, level, nr_images, x, y, width,
				   height, 1);

      img_height = ALIGN(height, align_h);
      if (mt->compressed)
	 img_height /= align_h;

      /* Because the images are packed better, the final offset
       * might not be the maximal one:
       */
      mt->total_height = MAX2(mt->total_height, y + img_height);

      /* Layout_below: step right after second mipmap.
       */
      if (level == mt->first_level + 1) {
	 x += ALIGN(width, align_w);
      }
      else {
	 y += img_height;
      }

      width  = minify(width);
      height = minify(height);
   }
}
@


1.7
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.6
log
@Merge Mesa 7.10.3
@
text
@d38 3
a40 1
void intel_get_texture_alignment_unit(GLenum internalFormat, GLuint *w, GLuint *h)
d42 9
a50 24
    switch (internalFormat) {
    case GL_COMPRESSED_RGB_FXT1_3DFX:
    case GL_COMPRESSED_RGBA_FXT1_3DFX:
        *w = 8;
        *h = 4;
        break;

    case GL_RGB_S3TC:
    case GL_RGB4_S3TC:
    case GL_COMPRESSED_RGB_S3TC_DXT1_EXT:
    case GL_COMPRESSED_RGBA_S3TC_DXT1_EXT:
    case GL_RGBA_S3TC:
    case GL_RGBA4_S3TC:
    case GL_COMPRESSED_RGBA_S3TC_DXT3_EXT:
    case GL_COMPRESSED_RGBA_S3TC_DXT5_EXT:
        *w = 4;
        *h = 4;
        break;

    default:
        *w = 4;
        *h = 2;
        break;
    }
d57 1
a57 1
   GLuint align_h = 2, align_w = 4;
d65 1
a65 1
   intel_get_texture_alignment_unit(mt->internal_format, &align_w, &align_h);
d100 1
d102 1
a102 4
	 img_height = MAX2(1, height/4);
      else
	 img_height = ALIGN(height, align_h);

@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d77 1
a77 1
   mt->pitch = mt->width0;
d81 1
a81 1
       mt->pitch = ALIGN(mt->width0, align_w);
d84 1
a84 1
   /* May need to adjust pitch to accomodate the placement of
d100 2
a101 2
       if (mip1_width > mt->pitch) {
           mt->pitch = mip1_width;
a104 4
   /* Pitch must be a whole number of dwords, even though we
    * express it in texels.
    */
   mt->pitch = intel_miptree_pitch_align (intel, mt, tiling, mt->pitch);
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d38 1
a38 1
GLuint intel_compressed_alignment(GLenum internalFormat)
a39 2
    GLuint alignment = 4;

d43 14
a56 1
        alignment = 8;
d60 2
a63 2

    return alignment;
d66 3
a68 1
void i945_miptree_layout_2d( struct intel_context *intel, struct intel_mipmap_tree *mt )
d70 1
a70 1
   GLint align_h = 2, align_w = 4;
d78 1
a80 1
       align_w = intel_compressed_alignment(mt->internal_format);
d108 1
a108 1
   mt->pitch = intel_miptree_pitch_align (intel, mt, mt->pitch);
d114 1
a114 1
      intel_miptree_set_level_info(mt, level, 1, x, y, width, 
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d36 1
a36 1
#include "macros.h"
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d35 1
d38 13
d52 1
a52 3
static int align(int value, int alignment)
{
   return (value + alignment - 1) & ~(alignment - 1);
d66 5
d77 1
a77 2
      GLuint mip1_width = align(minify(mt->width0), align_w)
			+ minify(minify(mt->width0));
d79 11
a89 2
      if (mip1_width > mt->width0)
	 mt->pitch = mip1_width;
d107 1
a107 1
	 img_height = align(height, align_h);
d118 1
a118 1
	 x += align(width, align_w);
@


1.1
log
@Initial revision
@
text
@d43 1
a43 1
void i945_miptree_layout_2d( struct intel_mipmap_tree *mt )
d70 1
a70 1
   mt->pitch = align(mt->pitch * mt->cpp, 4) / mt->cpp;
@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d35 1
a35 2
#include "intel_context.h"
#include "main/macros.h"
d37 2
a38 1
void intel_get_texture_alignment_unit(GLenum internalFormat, GLuint *w, GLuint *h)
d40 1
a40 24
    switch (internalFormat) {
    case GL_COMPRESSED_RGB_FXT1_3DFX:
    case GL_COMPRESSED_RGBA_FXT1_3DFX:
        *w = 8;
        *h = 4;
        break;

    case GL_RGB_S3TC:
    case GL_RGB4_S3TC:
    case GL_COMPRESSED_RGB_S3TC_DXT1_EXT:
    case GL_COMPRESSED_RGBA_S3TC_DXT1_EXT:
    case GL_RGBA_S3TC:
    case GL_RGBA4_S3TC:
    case GL_COMPRESSED_RGBA_S3TC_DXT3_EXT:
    case GL_COMPRESSED_RGBA_S3TC_DXT5_EXT:
        *w = 4;
        *h = 4;
        break;

    default:
        *w = 4;
        *h = 2;
        break;
    }
d43 1
a43 3
void i945_miptree_layout_2d(struct intel_context *intel,
			    struct intel_mipmap_tree *mt,
			    uint32_t tiling, int nr_images)
d45 1
a45 1
   GLuint align_h = 2, align_w = 4;
d52 1
a52 6
   mt->total_width = mt->width0;
   intel_get_texture_alignment_unit(mt->internal_format, &align_w, &align_h);

   if (mt->compressed) {
       mt->total_width = ALIGN(mt->width0, align_w);
   }
d54 1
a54 1
   /* May need to adjust width to accomodate the placement of
d60 2
a61 1
       GLuint mip1_width;
d63 2
a64 11
       if (mt->compressed) {
           mip1_width = ALIGN(minify(mt->width0), align_w)
               + ALIGN(minify(minify(mt->width0)), align_w);
       } else {
           mip1_width = ALIGN(minify(mt->width0), align_w)
               + minify(minify(mt->width0));
       }

       if (mip1_width > mt->total_width) {
           mt->total_width = mip1_width;
       }
d67 4
d76 1
a76 1
      intel_miptree_set_level_info(mt, level, nr_images, x, y, width,
d82 1
a82 1
	 img_height = ALIGN(height, align_h);
d93 1
a93 1
	 x += ALIGN(width, align_w);
@

