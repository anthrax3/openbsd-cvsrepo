head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.5;
commitid	WPD6rgPryPkvXOr9;

1.5
date	2013.09.05.14.04.49;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.20;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.16;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2007.11.24.17.28.56;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.28.56;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.50;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.54;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef __NOUVEAU_CONTEXT_H__
#define __NOUVEAU_CONTEXT_H__

#include "nouveau_screen.h"
#include "nouveau_state.h"
#include "nouveau_scratch.h"
#include "nouveau_render.h"

#include "main/bitset.h"

enum nouveau_fallback {
	HWTNL = 0,
	SWTNL,
	SWRAST,
};

#define BUFCTX_FB      0
#define BUFCTX_VTX     1
#define BUFCTX_TEX(i) (2 + (i))

struct nouveau_hw_state {
	struct nouveau_object *chan;
	struct nouveau_client *client;
	struct nouveau_pushbuf *pushbuf;
	struct nouveau_bufctx *bufctx;

	struct nouveau_object *null;
	struct nouveau_object *ntfy;
	struct nouveau_object *eng3d;
	struct nouveau_object *eng3dm;
	struct nouveau_object *surf3d;
	struct nouveau_object *m2mf;
	struct nouveau_object *surf2d;
	struct nouveau_object *rop;
	struct nouveau_object *patt;
	struct nouveau_object *rect;
	struct nouveau_object *swzsurf;
	struct nouveau_object *sifm;
};

struct nouveau_context {
	struct gl_context base;
	__DRIcontext *dri_context;
	struct nouveau_screen *screen;

	BITSET_DECLARE(dirty, MAX_NOUVEAU_STATE);
	enum nouveau_fallback fallback;

	struct nouveau_bo *fence;

	struct nouveau_hw_state hw;
	struct nouveau_render_state render;
	struct nouveau_scratch_state scratch;

	struct {
		GLboolean clear_blocked;
		int clear_seq;
	} hierz;
};

#define to_nouveau_context(ctx)	((struct nouveau_context *)(ctx))

#define context_dev(ctx) \
	(to_nouveau_context(ctx)->screen->device)
#define context_chipset(ctx) \
	(context_dev(ctx)->chipset)
#define context_chan(ctx) \
	(to_nouveau_context(ctx)->hw.chan)
#define context_client(ctx) \
	(to_nouveau_context(ctx)->hw.client)
#define context_push(ctx) \
	(to_nouveau_context(ctx)->hw.pushbuf)
#define context_eng3d(ctx) \
	(to_nouveau_context(ctx)->hw.eng3d)
#define context_drv(ctx) \
	(to_nouveau_context(ctx)->screen->driver)
#define context_dirty(ctx, s) \
	BITSET_SET(to_nouveau_context(ctx)->dirty, NOUVEAU_STATE_##s)
#define context_dirty_i(ctx, s, i) \
	BITSET_SET(to_nouveau_context(ctx)->dirty, NOUVEAU_STATE_##s##0 + i)
#define context_emit(ctx, s) \
	context_drv(ctx)->emit[NOUVEAU_STATE_##s](ctx, NOUVEAU_STATE_##s)

GLboolean
nouveau_context_create(gl_api api,
		       const struct gl_config *visual, __DRIcontext *dri_ctx,
		       unsigned major_version, unsigned minor_version,
		       uint32_t flags, bool notify_reset, unsigned *error,
		       void *share_ctx);

GLboolean
nouveau_context_init(struct gl_context *ctx, gl_api api,
		     struct nouveau_screen *screen,
		     const struct gl_config *visual, struct gl_context *share_ctx);

void
nouveau_context_deinit(struct gl_context *ctx);

void
nouveau_context_destroy(__DRIcontext *dri_ctx);

void
nouveau_update_renderbuffers(__DRIcontext *dri_ctx, __DRIdrawable *draw);

GLboolean
nouveau_context_make_current(__DRIcontext *dri_ctx, __DRIdrawable *ddraw,
			     __DRIdrawable *rdraw);

GLboolean
nouveau_context_unbind(__DRIcontext *dri_ctx);

void
nouveau_fallback(struct gl_context *ctx, enum nouveau_fallback mode);

void
nouveau_validate_framebuffer(struct gl_context *ctx);

#endif

@


1.6
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.5
log
@Merge Mesa 9.2.0
@
text
@d114 2
a115 1
		       uint32_t flags, unsigned *error, void *share_ctx);
d118 2
a119 1
nouveau_context_init(struct gl_context *ctx, struct nouveau_screen *screen,
@


1.4
log
@Merge Mesa 7.10.3
@
text
@a31 1
#include "nouveau_bo_state.h"
d43 4
d48 17
a64 13
	struct nouveau_channel *chan;

	struct nouveau_notifier *ntfy;
	struct nouveau_grobj *eng3d;
	struct nouveau_grobj *eng3dm;
	struct nouveau_grobj *surf3d;
	struct nouveau_grobj *m2mf;
	struct nouveau_grobj *surf2d;
	struct nouveau_grobj *rop;
	struct nouveau_grobj *patt;
	struct nouveau_grobj *rect;
	struct nouveau_grobj *swzsurf;
	struct nouveau_grobj *sifm;
d75 2
a77 1
	struct nouveau_bo_state bo;
d95 4
d113 2
a114 1
		       void *share_ctx);
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d33 1
d61 1
a61 1
	GLcontext base;
d71 6
d95 2
d99 2
a100 1
nouveau_context_create(const __GLcontextModes *visual, __DRIcontext *dri_ctx,
d104 2
a105 2
nouveau_context_init(GLcontext *ctx, struct nouveau_screen *screen,
		     const GLvisual *visual, GLcontext *share_ctx);
d108 1
a108 1
nouveau_context_deinit(GLcontext *ctx);
d124 1
a124 1
nouveau_fallback(GLcontext *ctx, enum nouveau_fallback mode);
d127 1
a127 1
nouveau_validate_framebuffer(GLcontext *ctx);
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d1 25
a25 27
/**************************************************************************

Copyright 2006 Stephane Marchesin
All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
on the rights to use, copy, modify, merge, publish, distribute, sub
license, and/or sell copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice (including the next
paragraph) shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
ERIC ANHOLT OR SILICON INTEGRATED SYSTEMS CORP BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/


d30 82
a111 3
#include "dri_util.h"
#include "drm.h"
#include "nouveau_drm.h"
d113 2
a114 2
#include "mtypes.h"
#include "tnl/t_vertex.h"
d116 2
a117 195
#include "nouveau_screen.h"
#include "nouveau_state_cache.h"
#include "nouveau_buffers.h"
#include "nouveau_shader.h"
#include "nouveau_sync.h"

#include "xmlconfig.h"

typedef struct nouveau_fifo_t{
	int channel;
	u_int32_t* buffer;
	u_int32_t* mmio;
	u_int32_t put_base;
	u_int32_t current;
	u_int32_t put;
	u_int32_t free;
	u_int32_t max;
}
nouveau_fifo;

#define TAG(x) nouveau##x
#include "tnl_dd/t_dd_vertex.h"
#undef TAG

/* Subpixel offsets for window coordinates (triangles): */
#define SUBPIXEL_X  (0.0F)
#define SUBPIXEL_Y  (0.125F)

struct nouveau_context;

typedef void (*nouveau_tri_func)( struct nouveau_context*, 
		nouveauVertex *,
		nouveauVertex *,
		nouveauVertex * );

typedef void (*nouveau_line_func)( struct nouveau_context*, 
		nouveauVertex *,
		nouveauVertex * );

typedef void (*nouveau_point_func)( struct nouveau_context*,
		nouveauVertex * );

typedef struct nouveau_hw_func_t {
	/* Initialise any card-specific non-GL related state */
	GLboolean (*InitCard)(struct nouveau_context *);
	/* Update buffer offset/pitch/format */
	GLboolean (*BindBuffers)(struct nouveau_context *, int num_color,
				 nouveau_renderbuffer **color,
				 nouveau_renderbuffer *depth);
	/* Update anything that depends on the window position/size */
	void      (*WindowMoved)(struct nouveau_context *);
} nouveau_hw_func;

typedef struct nouveau_context {
	/* Mesa context */
	GLcontext *glCtx;

	/* The per-context fifo */
	nouveau_fifo fifo;

	/* The read-only regs */
	volatile unsigned char* mmio;

	/* Physical addresses of AGP/VRAM apertures */
	uint64_t vram_phys;
	uint64_t vram_size;
	uint64_t agp_phys;
	uint64_t agp_size;

	/* Channel synchronisation */
	nouveau_notifier *syncNotifier;

	/* ARB_occlusion_query / EXT_timer_query */
	GLuint		  query_object_max;
	GLboolean *	  query_alloc;
	nouveau_notifier *queryNotifier;

	/* Additional hw-specific functions */
	nouveau_hw_func hw_func;

	/* FIXME : do we want to put all state into a separate struct ? */
	/* State for tris */
	GLuint color_offset;
	GLuint specular_offset;

	/* Vertex state */
	GLuint vertex_size;
	GLubyte *verts;
	struct tnl_attr_map vertex_attrs[VERT_ATTRIB_MAX];
	GLuint vertex_attr_count;

	/* Color buffer clear value */
	uint32_t clear_color_value;

	/* Depth/stencil clear value */
	uint32_t clear_value;

	/* Light state */
	GLboolean lighting_enabled;
	uint32_t enabled_lights;

	/* Cached state */
	nouveau_state_cache state_cache;

	/* The drawing fallbacks */
	GLuint Fallback;
	nouveau_tri_func draw_tri;
	nouveau_line_func draw_line;
	nouveau_point_func draw_point;

	/* Cliprects information */
	GLuint numClipRects;
	drm_clip_rect_t *pClipRects;
	drm_clip_rect_t osClipRect;
	GLuint drawX, drawY;

	/* The rendering context information */
	GLenum current_primitive; /* the current primitive enum */
	DECLARE_RENDERINPUTS(render_inputs_bitset); /* the current render inputs */

	/* Shader state */
	nvsFunc VPfunc;
	nvsFunc FPfunc;
	nouveauShader *current_fragprog;
	nouveauShader *current_vertprog;
	nouveauShader *passthrough_vp;
	nouveauShader *passthrough_fp;

	nouveauScreenRec *screen;
	drm_nouveau_sarea_t *sarea;

	__DRIcontextPrivate  *driContext;    /* DRI context */
	__DRIscreenPrivate   *driScreen;     /* DRI screen */
	__DRIdrawablePrivate *driDrawable;   /* DRI drawable bound to this ctx */
	GLint lastStamp;

	drm_context_t hHWContext;
	drm_hw_lock_t *driHwLock;
	int driFd;

	/* Configuration cache */
	driOptionCache optionCache;

	/* vblank stuff */
	uint32_t vblank_flags;
	uint32_t vblank_seq;

	GLuint new_state;
	GLuint new_render_state;
	GLuint render_index;
	GLmatrix viewport;
	GLfloat depth_scale;

}nouveauContextRec, *nouveauContextPtr;


#define NOUVEAU_CONTEXT(ctx)		((nouveauContextPtr)(ctx->DriverCtx))

/* Flags for software fallback cases: */
#define NOUVEAU_FALLBACK_TEXTURE		0x0001
#define NOUVEAU_FALLBACK_DRAW_BUFFER		0x0002
#define NOUVEAU_FALLBACK_READ_BUFFER		0x0004
#define NOUVEAU_FALLBACK_STENCIL		0x0008
#define NOUVEAU_FALLBACK_RENDER_MODE		0x0010
#define NOUVEAU_FALLBACK_LOGICOP		0x0020
#define NOUVEAU_FALLBACK_SEP_SPECULAR		0x0040
#define NOUVEAU_FALLBACK_BLEND_EQ		0x0080
#define NOUVEAU_FALLBACK_BLEND_FUNC		0x0100
#define NOUVEAU_FALLBACK_PROJTEX		0x0200
#define NOUVEAU_FALLBACK_DISABLE		0x0400


extern GLboolean nouveauCreateContext( const __GLcontextModes *glVisual,
		__DRIcontextPrivate *driContextPriv,
		void *sharedContextPrivate );

extern void nouveauDestroyContext( __DRIcontextPrivate * );

extern GLboolean nouveauMakeCurrent( __DRIcontextPrivate *driContextPriv,
		__DRIdrawablePrivate *driDrawPriv,
		__DRIdrawablePrivate *driReadPriv );

extern GLboolean nouveauUnbindContext( __DRIcontextPrivate *driContextPriv );

extern void nouveauSwapBuffers(__DRIdrawablePrivate *dPriv);

extern void nouveauCopySubBuffer(__DRIdrawablePrivate *dPriv,
				 int x, int y, int w, int h);

/* Debugging utils: */
extern int NOUVEAU_DEBUG;

#define DEBUG_SHADERS	0x00000001
#define DEBUG_MEM	0x00000002
#define DEBUG_BUFFEROBJ 0x00000004
d119 1
a119 1
#endif /* __NOUVEAU_CONTEXT_H__ */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d1 27
a27 25
/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
d32 3
a34 92
#include "nouveau_screen.h"
#include "nouveau_state.h"
#include "nouveau_bo_state.h"
#include "nouveau_scratch.h"
#include "nouveau_render.h"

#include "main/bitset.h"

enum nouveau_fallback {
	HWTNL = 0,
	SWTNL,
	SWRAST,
};

struct nouveau_hw_state {
	struct nouveau_channel *chan;

	struct nouveau_notifier *ntfy;
	struct nouveau_grobj *eng3d;
	struct nouveau_grobj *eng3dm;
	struct nouveau_grobj *surf3d;
	struct nouveau_grobj *m2mf;
	struct nouveau_grobj *surf2d;
	struct nouveau_grobj *rop;
	struct nouveau_grobj *patt;
	struct nouveau_grobj *rect;
	struct nouveau_grobj *swzsurf;
	struct nouveau_grobj *sifm;
};

struct nouveau_context {
	struct gl_context base;
	__DRIcontext *dri_context;
	struct nouveau_screen *screen;

	BITSET_DECLARE(dirty, MAX_NOUVEAU_STATE);
	enum nouveau_fallback fallback;

	struct nouveau_hw_state hw;
	struct nouveau_bo_state bo;
	struct nouveau_render_state render;
	struct nouveau_scratch_state scratch;

	struct {
		GLboolean clear_blocked;
		int clear_seq;
	} hierz;
};

#define to_nouveau_context(ctx)	((struct nouveau_context *)(ctx))

#define context_dev(ctx) \
	(to_nouveau_context(ctx)->screen->device)
#define context_chipset(ctx) \
	(context_dev(ctx)->chipset)
#define context_chan(ctx) \
	(to_nouveau_context(ctx)->hw.chan)
#define context_eng3d(ctx) \
	(to_nouveau_context(ctx)->hw.eng3d)
#define context_drv(ctx) \
	(to_nouveau_context(ctx)->screen->driver)
#define context_dirty(ctx, s) \
	BITSET_SET(to_nouveau_context(ctx)->dirty, NOUVEAU_STATE_##s)
#define context_dirty_i(ctx, s, i) \
	BITSET_SET(to_nouveau_context(ctx)->dirty, NOUVEAU_STATE_##s##0 + i)
#define context_emit(ctx, s) \
	context_drv(ctx)->emit[NOUVEAU_STATE_##s](ctx, NOUVEAU_STATE_##s)

GLboolean
nouveau_context_create(gl_api api,
		       const struct gl_config *visual, __DRIcontext *dri_ctx,
		       void *share_ctx);

GLboolean
nouveau_context_init(struct gl_context *ctx, struct nouveau_screen *screen,
		     const struct gl_config *visual, struct gl_context *share_ctx);

void
nouveau_context_deinit(struct gl_context *ctx);

void
nouveau_context_destroy(__DRIcontext *dri_ctx);

void
nouveau_update_renderbuffers(__DRIcontext *dri_ctx, __DRIdrawable *draw);

GLboolean
nouveau_context_make_current(__DRIcontext *dri_ctx, __DRIdrawable *ddraw,
			     __DRIdrawable *rdraw);

GLboolean
nouveau_context_unbind(__DRIcontext *dri_ctx);
d36 2
a37 2
void
nouveau_fallback(struct gl_context *ctx, enum nouveau_fallback mode);
d39 195
a233 2
void
nouveau_validate_framebuffer(struct gl_context *ctx);
d235 1
a235 1
#endif
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d32 1
d44 2
a45 3
#define BUFCTX_FB      0
#define BUFCTX_VTX     1
#define BUFCTX_TEX(i) (2 + (i))
d47 11
a57 18
struct nouveau_hw_state {
	struct nouveau_object *chan;
	struct nouveau_client *client;
	struct nouveau_pushbuf *pushbuf;
	struct nouveau_bufctx *bufctx;

	struct nouveau_object *null;
	struct nouveau_object *ntfy;
	struct nouveau_object *eng3d;
	struct nouveau_object *eng3dm;
	struct nouveau_object *surf3d;
	struct nouveau_object *m2mf;
	struct nouveau_object *surf2d;
	struct nouveau_object *rop;
	struct nouveau_object *patt;
	struct nouveau_object *rect;
	struct nouveau_object *swzsurf;
	struct nouveau_object *sifm;
a67 2
	struct nouveau_bo *fence;

d69 1
a86 4
#define context_client(ctx) \
	(to_nouveau_context(ctx)->hw.client)
#define context_push(ctx) \
	(to_nouveau_context(ctx)->hw.pushbuf)
d101 1
a101 2
		       unsigned major_version, unsigned minor_version,
		       uint32_t flags, unsigned *error, void *share_ctx);
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d114 1
a114 2
		       uint32_t flags, bool notify_reset, unsigned *error,
		       void *share_ctx);
d117 1
a117 2
nouveau_context_init(struct gl_context *ctx, gl_api api,
		     struct nouveau_screen *screen,
@


