head	1.6;
access;
symbols
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.09.05.14.04.32;	author jsg;	state dead;
branches;
next	1.5;

1.5
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.14.58.16;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.38;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge Mesa 9.2.0
@
text
@/**************************************************************************
 * 
 * Copyright 2006 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#include "intel_context.h"
#include "intel_mipmap_tree.h"
#include "intel_regions.h"
#include "intel_tex_layout.h"
#include "intel_tex.h"
#include "main/enums.h"
#include "main/formats.h"

#define FILE_DEBUG_FLAG DEBUG_MIPTREE


static GLenum
target_to_target(GLenum target)
{
   switch (target) {
   case GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB:
   case GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB:
   case GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB:
   case GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB:
   case GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB:
   case GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB:
      return GL_TEXTURE_CUBE_MAP_ARB;
   default:
      return target;
   }
}


static struct intel_mipmap_tree *
intel_miptree_create_internal(struct intel_context *intel,
			      GLenum target,
			      gl_format format,
			      GLuint first_level,
			      GLuint last_level,
			      GLuint width0,
			      GLuint height0,
			      GLuint depth0,
			      uint32_t tiling)
{
   GLboolean ok;
   struct intel_mipmap_tree *mt = calloc(sizeof(*mt), 1);
   int compress_byte = 0;

   DBG("%s target %s format %s level %d..%d <-- %p\n", __FUNCTION__,
       _mesa_lookup_enum_by_nr(target),
       _mesa_get_format_name(format),
       first_level, last_level, mt);

   if (_mesa_is_format_compressed(format))
      compress_byte = intel_compressed_num_bytes(format);

   mt->target = target_to_target(target);
   mt->format = format;
   mt->first_level = first_level;
   mt->last_level = last_level;
   mt->width0 = width0;
   mt->height0 = height0;
   mt->depth0 = depth0;
   mt->cpp = compress_byte ? compress_byte : _mesa_get_format_bytes(mt->format);
   mt->compressed = compress_byte ? 1 : 0;
   mt->refcount = 1; 

#ifdef I915
   if (intel->is_945)
      ok = i945_miptree_layout(intel, mt, tiling);
   else
      ok = i915_miptree_layout(intel, mt, tiling);
#else
   ok = brw_miptree_layout(intel, mt, tiling);
#endif

   if (!ok) {
      free(mt);
      DBG("%s not okay - returning NULL\n", __FUNCTION__);
      return NULL;
   }

   return mt;
}


struct intel_mipmap_tree *
intel_miptree_create(struct intel_context *intel,
		     GLenum target,
		     gl_format format,
		     GLuint first_level,
		     GLuint last_level,
		     GLuint width0,
		     GLuint height0,
		     GLuint depth0,
		     GLboolean expect_accelerated_upload)
{
   struct intel_mipmap_tree *mt;
   uint32_t tiling = I915_TILING_NONE;
   GLenum base_format = _mesa_get_format_base_format(format);

   if (intel->use_texture_tiling && !_mesa_is_format_compressed(format)) {
      if (intel->gen >= 4 &&
	  (base_format == GL_DEPTH_COMPONENT ||
	   base_format == GL_DEPTH_STENCIL_EXT))
	 tiling = I915_TILING_Y;
      else if (width0 >= 64)
	 tiling = I915_TILING_X;
   }

   mt = intel_miptree_create_internal(intel, target, format,
				      first_level, last_level, width0,
				      height0, depth0,
				      tiling);
   /*
    * pitch == 0 || height == 0  indicates the null texture
    */
   if (!mt || !mt->total_width || !mt->total_height) {
      free(mt);
      return NULL;
   }

   mt->region = intel_region_alloc(intel->intelScreen,
				   tiling,
				   mt->cpp,
				   mt->total_width,
				   mt->total_height,
				   expect_accelerated_upload);

   if (!mt->region) {
       free(mt);
       return NULL;
   }

   return mt;
}


struct intel_mipmap_tree *
intel_miptree_create_for_region(struct intel_context *intel,
				GLenum target,
				gl_format format,
				struct intel_region *region,
				GLuint depth0)
{
   struct intel_mipmap_tree *mt;

   mt = intel_miptree_create_internal(intel, target, format,
				      0, 0,
				      region->width, region->height, 1,
				      I915_TILING_NONE);
   if (!mt)
      return mt;

   intel_region_reference(&mt->region, region);

   return mt;
}

void
intel_miptree_reference(struct intel_mipmap_tree **dst,
                        struct intel_mipmap_tree *src)
{
   src->refcount++;
   *dst = src;
   DBG("%s %p refcount now %d\n", __FUNCTION__, src, src->refcount);
}


void
intel_miptree_release(struct intel_context *intel,
                      struct intel_mipmap_tree **mt)
{
   if (!*mt)
      return;

   DBG("%s %p refcount will be %d\n", __FUNCTION__, *mt, (*mt)->refcount - 1);
   if (--(*mt)->refcount <= 0) {
      GLuint i;

      DBG("%s deleting %p\n", __FUNCTION__, *mt);

      intel_region_release(&((*mt)->region));
      intel_region_release(&((*mt)->hiz_region));

      for (i = 0; i < MAX_TEXTURE_LEVELS; i++) {
	 free((*mt)->level[i].x_offset);
	 free((*mt)->level[i].y_offset);
      }

      free(*mt);
   }
   *mt = NULL;
}


/**
 * Can the image be pulled into a unified mipmap tree?  This mirrors
 * the completeness test in a lot of ways.
 *
 * Not sure whether I want to pass gl_texture_image here.
 */
GLboolean
intel_miptree_match_image(struct intel_mipmap_tree *mt,
                          struct gl_texture_image *image)
{
   struct intel_texture_image *intelImage = intel_texture_image(image);
   GLuint level = intelImage->level;

   /* Images with borders are never pulled into mipmap trees. */
   if (image->Border)
      return GL_FALSE;

   if (image->TexFormat != mt->format)
      return GL_FALSE;

   /* Test image dimensions against the base level image adjusted for
    * minification.  This will also catch images not present in the
    * tree, changed targets, etc.
    */
   if (image->Width != mt->level[level].width ||
       image->Height != mt->level[level].height ||
       image->Depth != mt->level[level].depth)
      return GL_FALSE;

   return GL_TRUE;
}


void
intel_miptree_set_level_info(struct intel_mipmap_tree *mt,
			     GLuint level,
			     GLuint nr_images,
			     GLuint x, GLuint y,
			     GLuint w, GLuint h, GLuint d)
{
   mt->level[level].width = w;
   mt->level[level].height = h;
   mt->level[level].depth = d;
   mt->level[level].level_x = x;
   mt->level[level].level_y = y;
   mt->level[level].nr_images = nr_images;

   DBG("%s level %d size: %d,%d,%d offset %d,%d\n", __FUNCTION__,
       level, w, h, d, x, y);

   assert(nr_images);
   assert(!mt->level[level].x_offset);

   mt->level[level].x_offset = malloc(nr_images * sizeof(GLuint));
   mt->level[level].x_offset[0] = mt->level[level].level_x;
   mt->level[level].y_offset = malloc(nr_images * sizeof(GLuint));
   mt->level[level].y_offset[0] = mt->level[level].level_y;
}


void
intel_miptree_set_image_offset(struct intel_mipmap_tree *mt,
			       GLuint level, GLuint img,
			       GLuint x, GLuint y)
{
   if (img == 0 && level == 0)
      assert(x == 0 && y == 0);

   assert(img < mt->level[level].nr_images);

   mt->level[level].x_offset[img] = mt->level[level].level_x + x;
   mt->level[level].y_offset[img] = mt->level[level].level_y + y;

   DBG("%s level %d img %d pos %d,%d\n",
       __FUNCTION__, level, img,
       mt->level[level].x_offset[img], mt->level[level].y_offset[img]);
}


void
intel_miptree_get_image_offset(struct intel_mipmap_tree *mt,
			       GLuint level, GLuint face, GLuint depth,
			       GLuint *x, GLuint *y)
{
   if (mt->target == GL_TEXTURE_CUBE_MAP_ARB) {
      *x = mt->level[level].x_offset[face];
      *y = mt->level[level].y_offset[face];
   } else if (mt->target == GL_TEXTURE_3D) {
      *x = mt->level[level].x_offset[depth];
      *y = mt->level[level].y_offset[depth];
   } else {
      *x = mt->level[level].x_offset[0];
      *y = mt->level[level].y_offset[0];
   }
}

/**
 * Map a teximage in a mipmap tree.
 * \param row_stride  returns row stride in bytes
 * \param image_stride  returns image stride in bytes (for 3D textures).
 * \param image_offsets pointer to array of pixel offsets from the returned
 *	  pointer to each depth image
 * \return address of mapping
 */
GLubyte *
intel_miptree_image_map(struct intel_context * intel,
                        struct intel_mipmap_tree * mt,
                        GLuint face,
                        GLuint level,
                        GLuint * row_stride, GLuint * image_offsets)
{
   GLuint x, y;

   if (row_stride)
      *row_stride = mt->region->pitch * mt->cpp;

   if (mt->target == GL_TEXTURE_3D) {
      int i;

      for (i = 0; i < mt->level[level].depth; i++) {

	 intel_miptree_get_image_offset(mt, level, face, i,
					&x, &y);
	 image_offsets[i] = x + y * mt->region->pitch;
      }

      DBG("%s \n", __FUNCTION__);

      return intel_region_map(intel, mt->region);
   } else {
      assert(mt->level[level].depth == 1);
      intel_miptree_get_image_offset(mt, level, face, 0,
				     &x, &y);
      image_offsets[0] = 0;

      DBG("%s: (%d,%d) -> (%d, %d)/%d\n",
	  __FUNCTION__, face, level, x, y, mt->region->pitch * mt->cpp);

      return intel_region_map(intel, mt->region) +
	 (x + y * mt->region->pitch) * mt->cpp;
   }
}


void
intel_miptree_image_unmap(struct intel_context *intel,
                          struct intel_mipmap_tree *mt)
{
   DBG("%s\n", __FUNCTION__);
   intel_region_unmap(intel, mt->region);
}


/**
 * Upload data for a particular image.
 */
void
intel_miptree_image_data(struct intel_context *intel,
			 struct intel_mipmap_tree *dst,
			 GLuint face,
			 GLuint level,
			 void *src,
			 GLuint src_row_pitch,
			 GLuint src_image_pitch)
{
   const GLuint depth = dst->level[level].depth;
   GLuint i;

   for (i = 0; i < depth; i++) {
      GLuint dst_x, dst_y, height, width;

      intel_miptree_get_image_offset(dst, level, face, i, &dst_x, &dst_y);

      height = dst->level[level].height;
      width = dst->level[level].width;
      if (dst->compressed) {
	 unsigned int align_w, align_h;

	 intel_get_texture_alignment_unit(dst->format, &align_w, &align_h);
	 height = (height + align_h - 1) / align_h;
	 width = ALIGN(width, align_w);
      }

      DBG("%s: %d/%d %p/%d -> (%d, %d)/%d (%d, %d)\n",
	  __FUNCTION__, face, level,
	  src, src_row_pitch * dst->cpp,
	  dst_x, dst_y, dst->region->pitch * dst->cpp,
	  width, height);

      intel_region_data(intel,
			dst->region, 0, dst_x, dst_y,
			src,
			src_row_pitch,
			0, 0,                             /* source x, y */
			width, height);

      src = (char *)src + src_image_pitch * dst->cpp;
   }
}


/**
 * Copy mipmap image between trees
 */
void
intel_miptree_image_copy(struct intel_context *intel,
                         struct intel_mipmap_tree *dst,
                         GLuint face, GLuint level,
                         struct intel_mipmap_tree *src)
{
   GLuint width = src->level[level].width;
   GLuint height = src->level[level].height;
   GLuint depth = src->level[level].depth;
   GLuint src_x, src_y, dst_x, dst_y;
   GLuint i;
   GLboolean success;

   if (dst->compressed) {
       GLuint align_w, align_h;

       intel_get_texture_alignment_unit(dst->format, &align_w, &align_h);
       height = (height + 3) / 4;
       width = ALIGN(width, align_w);
   }

   intel_prepare_render(intel);

   for (i = 0; i < depth; i++) {
      intel_miptree_get_image_offset(src, level, face, i, &src_x, &src_y);
      intel_miptree_get_image_offset(dst, level, face, i, &dst_x, &dst_y);
      success = intel_region_copy(intel,
				  dst->region, 0, dst_x, dst_y,
				  src->region, 0, src_x, src_y,
				  width, height, GL_FALSE,
				  GL_COPY);
      if (!success) {
	 GLubyte *src_ptr, *dst_ptr;

	 src_ptr = intel_region_map(intel, src->region);
	 dst_ptr = intel_region_map(intel, dst->region);

	 _mesa_copy_rect(dst_ptr,
			 dst->cpp,
			 dst->region->pitch,
			 dst_x, dst_y, width, height,
			 src_ptr,
			 src->region->pitch,
			 src_x, src_y);
	 intel_region_unmap(intel, src->region);
	 intel_region_unmap(intel, dst->region);
      }
   }
}
@


1.5
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.4
log
@Merge Mesa 7.10.3
@
text
@d32 1
d59 1
a59 1
			      GLenum internal_format,
d64 1
a64 1
			      GLuint depth0, GLuint cpp, GLuint compress_byte,
d69 1
d73 1
a73 1
       _mesa_lookup_enum_by_nr(internal_format), 
d76 3
d80 1
a80 1
   mt->internal_format = internal_format;
d86 1
a86 1
   mt->cpp = compress_byte ? compress_byte : cpp;
d112 1
a112 2
		     GLenum base_format,
		     GLenum internal_format,
d117 1
a117 1
		     GLuint depth0, GLuint cpp, GLuint compress_byte,
d122 1
d124 1
a124 1
   if (intel->use_texture_tiling && compress_byte == 0) {
d133 1
a133 1
   mt = intel_miptree_create_internal(intel, target, internal_format,
d135 1
a135 1
				      height0, depth0, cpp, compress_byte,
d140 1
a140 1
   if (!mt || !mt->total_height) {
d164 1
a164 3
				GLenum internal_format,
				GLuint first_level,
				GLuint last_level,
d166 1
a166 2
				GLuint depth0,
				GLuint compress_byte)
d170 2
a171 2
   mt = intel_miptree_create_internal(intel, target, internal_format,
				      first_level, last_level,
a172 1
				      region->cpp, compress_byte,
d206 1
a228 1
   GLboolean isCompressed = _mesa_is_format_compressed(image->TexFormat);
d236 1
a236 7
   if (image->InternalFormat != mt->internal_format ||
       isCompressed != mt->compressed)
      return GL_FALSE;

   if (!isCompressed &&
       !mt->compressed &&
       _mesa_get_format_bytes(image->TexFormat) != mt->cpp)
d388 1
a388 1
      GLuint dst_x, dst_y, height;
d393 8
a400 2
      if(dst->compressed)
	 height = (height + 3) / 4;
d406 1
a406 1
	  dst->level[level].width, height);
d413 1
a413 1
			dst->level[level].width, height); /* width, height */
d439 1
a439 2
       intel_get_texture_alignment_unit(dst->internal_format,
                                        &align_w, &align_h);
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a31 3
#ifndef I915
#include "brw_state.h"
#endif
d33 1
a83 1
   mt->pitch = 0;
d135 1
a135 1
   if (!mt || !mt->pitch || !mt->total_height) {
d140 1
a140 1
   mt->region = intel_region_alloc(intel,
d143 1
a143 1
				   mt->pitch,
a145 1
   mt->pitch = mt->region->pitch;
a175 5
   /* The mipmap tree pitch is aligned to 64 bytes to make sure render
    * to texture works, but we don't need that for texturing from a
    * pixmap.  Just override it here. */
   mt->pitch = region->pitch;

a180 55

/**
 * intel_miptree_pitch_align:
 *
 * @@intel: intel context pointer
 *
 * @@mt: the miptree to compute pitch alignment for
 *
 * @@pitch: the natural pitch value
 *
 * Given @@pitch, compute a larger value which accounts for
 * any necessary alignment required by the device
 */
int intel_miptree_pitch_align (struct intel_context *intel,
			       struct intel_mipmap_tree *mt,
			       uint32_t tiling,
			       int pitch)
{
#ifdef I915
   GLcontext *ctx = &intel->ctx;
#endif

   if (!mt->compressed) {
      int pitch_align;

      /* XXX: Align pitch to multiple of 64 bytes for now to allow
       * render-to-texture to work in all cases. This should probably be
       * replaced at some point by some scheme to only do this when really
       * necessary.
       */
      pitch_align = 64;

      if (tiling == I915_TILING_X)
	 pitch_align = 512;
      else if (tiling == I915_TILING_Y)
	 pitch_align = 128;

      pitch = ALIGN(pitch * mt->cpp, pitch_align);

#ifdef I915
      /* Do a little adjustment to linear allocations so that we avoid
       * hitting the same channel of memory for 2 different pages when
       * reading a 2x2 subspan or doing bilinear filtering.
       */
      if (tiling == I915_TILING_NONE && !(pitch & 511) &&
	 (pitch + pitch_align) < (1 << ctx->Const.MaxTextureLevels))
	 pitch += pitch_align;
#endif

      pitch /= mt->cpp;
   }
   return pitch;
}


a203 13
#ifndef I915
      /* Free up cached binding tables holding a reference on our buffer, to
       * avoid excessive memory consumption.
       *
       * This isn't as aggressive as we could be, as we'd like to do
       * it from any time we free the last ref on a region.  But intel_region.c
       * is context-agnostic.  Perhaps our constant state cache should be, as
       * well.
       */
      brw_state_cache_bo_delete(&brw_context(&intel->ctx)->surface_cache,
				(*mt)->region->buffer);
#endif

a266 1
   mt->level[level].level_offset = (x + y * mt->pitch) * mt->cpp;
d271 2
a272 2
   DBG("%s level %d size: %d,%d,%d offset %d,%d (0x%x)\n", __FUNCTION__,
       level, w, h, d, x, y, mt->level[level].level_offset);
a335 1
   DBG("%s \n", __FUNCTION__);
d338 1
a338 1
      *row_stride = mt->pitch * mt->cpp;
d347 1
a347 1
	 image_offsets[i] = x + y * mt->pitch;
d350 2
d359 3
d363 1
a363 1
	 (x + y * mt->pitch) * mt->cpp;
a391 1
   DBG("%s: %d/%d\n", __FUNCTION__, face, level);
d401 6
d460 1
a460 1
	 _mesa_copy_rect(dst_ptr + dst->cpp * (dst_x + dst_y * dst->pitch),
d462 5
a466 5
			 dst->pitch,
			 0, 0, width, height,
			 src_ptr + src->cpp * (src_x + src_y * src->pitch),
			 src->pitch,
			 0, 0);
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d31 4
a34 1
#include "intel_chipset.h"
d39 1
d56 1
d65 2
a66 1
			      GLuint depth0, GLuint cpp, GLuint compress_byte)
d71 1
a71 1
   DBG("%s target %s format %s level %d..%d\n", __FUNCTION__,
d73 2
a74 1
       _mesa_lookup_enum_by_nr(internal_format), first_level, last_level);
d89 2
a90 2
   if (IS_945(intel->intelScreen->deviceID))
      ok = i945_miptree_layout(intel, mt);
d92 1
a92 1
      ok = i915_miptree_layout(intel, mt);
d94 1
a94 1
   ok = brw_miptree_layout(intel, mt);
d99 1
d106 1
d110 1
d120 10
d133 2
a134 1
				      height0, depth0, cpp, compress_byte);
d138 2
a139 1
   if (!mt || !mt->pitch || !mt->total_height)
d141 1
d144 1
a147 1
				   mt->pitch,
d149 1
d159 1
d175 2
a176 1
				      region->cpp, compress_byte);
d179 1
a179 9
#if 0
   if (mt->pitch != region->pitch) {
      fprintf(stderr,
	      "region pitch (%d) doesn't match mipmap tree pitch (%d)\n",
	      region->pitch, mt->pitch);
      free(mt);
      return NULL;
   }
#else
a183 1
#endif
d188 2
a189 1
 }
a202 1

d205 1
d215 11
a225 10
      if (intel->ttm) {
	 /* XXX: Align pitch to multiple of 64 bytes for now to allow
	  * render-to-texture to work in all cases. This should probably be
	  * replaced at some point by some scheme to only do this when really
	  * necessary.
	  */
	 pitch_align = 64;
      } else {
	 pitch_align = 4;
      }
d230 3
a232 3
      /* XXX: At least the i915 seems very upset when the pitch is a multiple
       * of 1024 and sometimes 512 bytes - performance can drop by several
       * times. Go to the next multiple of the required alignment for now.
d234 1
a234 1
      if (!(pitch & 511) && 
d244 1
d254 1
d268 13
d283 4
a286 3
      for (i = 0; i < MAX_TEXTURE_LEVELS; i++)
         if ((*mt)->level[i].image_offset)
            free((*mt)->level[i].image_offset);
d294 2
a295 3


/* Can the image be pulled into a unified mipmap tree.  This mirrors
d302 1
a302 2
                          struct gl_texture_image *image,
                          GLuint face, GLuint level)
d304 6
a309 6
   /* Images with borders are never pulled into mipmap trees. 
    */
   if (image->Border ||
       ((image->_BaseFormat == GL_DEPTH_COMPONENT) &&
        ((image->TexObject->WrapS == GL_CLAMP_TO_BORDER) ||
         (image->TexObject->WrapT == GL_CLAMP_TO_BORDER)))) 
d313 1
a313 1
       image->IsCompressed != mt->compressed)
d316 1
a316 1
   if (!image->IsCompressed &&
d318 1
a318 1
       image->TexFormat->TexelBytes != mt->cpp)
d345 2
a351 7
   /* Not sure when this would happen, but anyway: 
    */
   if (mt->level[level].image_offset) {
      free(mt->level[level].image_offset);
      mt->level[level].image_offset = NULL;
   }

d353 1
d355 4
a358 2
   mt->level[level].image_offset = malloc(nr_images * sizeof(GLuint));
   mt->level[level].image_offset[0] = 0;
a361 1

d372 2
a373 1
   mt->level[level].image_offset[img] = (x + y * mt->pitch) * mt->cpp;
d375 3
a377 2
   DBG("%s level %d img %d pos %d,%d image_offset %x\n",
       __FUNCTION__, level, img, x, y, mt->level[level].image_offset[img]);
d381 15
a395 27
/* Although we use the image_offset[] array to store relative offsets
 * to cube faces, Mesa doesn't know anything about this and expects
 * each cube face to be treated as a separate image.
 *
 * These functions present that view to mesa:
 */
const GLuint *
intel_miptree_depth_offsets(struct intel_mipmap_tree *mt, GLuint level)
{
   static const GLuint zero = 0;

   if (mt->target != GL_TEXTURE_3D || mt->level[level].nr_images == 1)
      return &zero;
   else
      return mt->level[level].image_offset;
}


GLuint
intel_miptree_image_offset(struct intel_mipmap_tree *mt,
			   GLuint face, GLuint level)
{
   if (mt->target == GL_TEXTURE_CUBE_MAP_ARB)
      return (mt->level[level].level_offset +
	      mt->level[level].image_offset[face]);
   else
      return mt->level[level].level_offset;
a397 2


d413 1
d422 8
a429 2
      for (i = 0; i < mt->level[level].depth; i++)
	 image_offsets[i] = mt->level[level].image_offset[i] / mt->cpp;
d432 2
a433 2
      assert(mt->target == GL_TEXTURE_CUBE_MAP ||
	     mt->level[level].image_offset[0] == 0);
d435 3
d439 1
a440 3
   return (intel_region_map(intel, mt->region) +
           intel_miptree_image_offset(mt, face, level));
}
d451 2
a452 2

/* Upload data for a particular image.
d463 1
a463 3
   GLuint depth = dst->level[level].depth;
   GLuint dst_offset = intel_miptree_image_offset(dst, face, level);
   const GLuint *dst_depth_offset = intel_miptree_depth_offsets(dst, level);
a464 1
   GLuint height = 0;
d468 4
d475 1
d477 1
a477 3
			dst->region,
			dst_offset + dst_depth_offset[i], /* dst_offset */
			0, 0,                             /* dstx, dsty */
d483 1
a483 1
      src += src_image_pitch * dst->cpp;
d487 3
a489 2
extern GLuint intel_compressed_alignment(GLenum);
/* Copy mipmap image between trees
d500 1
a500 4
   GLuint dst_offset = intel_miptree_image_offset(dst, face, level);
   GLuint src_offset = intel_miptree_image_offset(src, face, level);
   const GLuint *dst_depth_offset = intel_miptree_depth_offsets(dst, level);
   const GLuint *src_depth_offset = intel_miptree_depth_offsets(src, level);
d502 1
d505 4
a508 1
       GLuint alignment = intel_compressed_alignment(dst->internal_format);
d510 1
a510 1
       width = ((width + alignment - 1) & ~(alignment - 1));
d513 2
d516 23
a538 6
      intel_region_copy(intel,
                        dst->region, dst_offset + dst_depth_offset[i],
                        0,
                        0,
                        src->region, src_offset + src_depth_offset[i],
                        0, 0, width, height);
a539 1

@


1.1
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d32 1
a32 1
#include "enums.h"
d106 2
a107 1
		     GLuint depth0, GLuint cpp, GLuint compress_byte)
d115 1
a115 1
    * pitch == 0 indicates the null texture
d117 1
a117 1
   if (!mt || !mt->pitch)
d121 5
a125 1
				   mt->cpp, mt->pitch, mt->total_height);
d149 1
a149 1
				      region->pitch, region->height, depth0,
d168 1
a168 1
   mt->region = region;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d31 2
a32 3
#include "intel_tex_layout.h"
#include "main/enums.h"
#include "main/formats.h"
a35 1

a51 1

d60 1
a60 2
			      GLuint depth0, GLuint cpp, GLuint compress_byte,
			      uint32_t tiling)
d65 1
a65 1
   DBG("%s target %s format %s level %d..%d <-- %p\n", __FUNCTION__,
d67 1
a67 2
       _mesa_lookup_enum_by_nr(internal_format), 
       first_level, last_level, mt);
d79 1
d82 2
a83 2
   if (intel->is_945)
      ok = i945_miptree_layout(intel, mt, tiling);
d85 1
a85 1
      ok = i915_miptree_layout(intel, mt, tiling);
d87 1
a87 1
   ok = brw_miptree_layout(intel, mt, tiling);
a91 1
      DBG("%s not okay - returning NULL\n", __FUNCTION__);
a97 1

a100 1
		     GLenum base_format,
d106 1
a106 2
		     GLuint depth0, GLuint cpp, GLuint compress_byte,
		     GLboolean expect_accelerated_upload)
a108 10
   uint32_t tiling = I915_TILING_NONE;

   if (intel->use_texture_tiling && compress_byte == 0) {
      if (intel->gen >= 4 &&
	  (base_format == GL_DEPTH_COMPONENT ||
	   base_format == GL_DEPTH_STENCIL_EXT))
	 tiling = I915_TILING_Y;
      else if (width0 >= 64)
	 tiling = I915_TILING_X;
   }
d112 1
a112 2
				      height0, depth0, cpp, compress_byte,
				      tiling);
d114 1
a114 1
    * pitch == 0 || height == 0  indicates the null texture
d116 1
a116 2
   if (!mt || !mt->total_height) {
      free(mt);
a117 1
   }
d119 2
a120 6
   mt->region = intel_region_alloc(intel->intelScreen,
				   tiling,
				   mt->cpp,
				   mt->total_width,
				   mt->total_height,
				   expect_accelerated_upload);
a129 1

d144 2
a145 3
				      region->width, region->height, 1,
				      region->cpp, compress_byte,
				      I915_TILING_NONE);
d148 14
d163 1
a163 1
   intel_region_reference(&mt->region, region);
d166 52
a228 1

d244 3
a246 4
      for (i = 0; i < MAX_TEXTURE_LEVELS; i++) {
	 free((*mt)->level[i].x_offset);
	 free((*mt)->level[i].y_offset);
      }
d254 3
a256 2
/**
 * Can the image be pulled into a unified mipmap tree?  This mirrors
d263 2
a264 1
                          struct gl_texture_image *image)
d266 6
a271 6
   GLboolean isCompressed = _mesa_is_format_compressed(image->TexFormat);
   struct intel_texture_image *intelImage = intel_texture_image(image);
   GLuint level = intelImage->level;

   /* Images with borders are never pulled into mipmap trees. */
   if (image->Border)
d275 1
a275 1
       isCompressed != mt->compressed)
d278 1
a278 1
   if (!isCompressed &&
d280 1
a280 1
       _mesa_get_format_bytes(image->TexFormat) != mt->cpp)
d306 1
a306 2
   mt->level[level].level_x = x;
   mt->level[level].level_y = y;
d309 9
a317 2
   DBG("%s level %d size: %d,%d,%d offset %d,%d\n", __FUNCTION__,
       level, w, h, d, x, y);
a319 1
   assert(!mt->level[level].x_offset);
d321 2
a322 4
   mt->level[level].x_offset = malloc(nr_images * sizeof(GLuint));
   mt->level[level].x_offset[0] = mt->level[level].level_x;
   mt->level[level].y_offset = malloc(nr_images * sizeof(GLuint));
   mt->level[level].y_offset[0] = mt->level[level].level_y;
d326 1
d337 17
a353 2
   mt->level[level].x_offset[img] = mt->level[level].level_x + x;
   mt->level[level].y_offset[img] = mt->level[level].level_y + y;
d355 4
a358 3
   DBG("%s level %d img %d pos %d,%d\n",
       __FUNCTION__, level, img,
       mt->level[level].x_offset[img], mt->level[level].y_offset[img]);
d362 9
a370 15
void
intel_miptree_get_image_offset(struct intel_mipmap_tree *mt,
			       GLuint level, GLuint face, GLuint depth,
			       GLuint *x, GLuint *y)
{
   if (mt->target == GL_TEXTURE_CUBE_MAP_ARB) {
      *x = mt->level[level].x_offset[face];
      *y = mt->level[level].y_offset[face];
   } else if (mt->target == GL_TEXTURE_3D) {
      *x = mt->level[level].x_offset[depth];
      *y = mt->level[level].y_offset[depth];
   } else {
      *x = mt->level[level].x_offset[0];
      *y = mt->level[level].y_offset[0];
   }
d373 2
d390 1
a390 1
   GLuint x, y;
d393 1
a393 1
      *row_stride = mt->region->pitch * mt->cpp;
d398 2
a399 10
      for (i = 0; i < mt->level[level].depth; i++) {

	 intel_miptree_get_image_offset(mt, level, face, i,
					&x, &y);
	 image_offsets[i] = x + y * mt->region->pitch;
      }

      DBG("%s \n", __FUNCTION__);

      return intel_region_map(intel, mt->region);
d402 2
a403 2
      intel_miptree_get_image_offset(mt, level, face, 0,
				     &x, &y);
d405 1
d407 2
a408 6
      DBG("%s: (%d,%d) -> (%d, %d)/%d\n",
	  __FUNCTION__, face, level, x, y, mt->region->pitch * mt->cpp);

      return intel_region_map(intel, mt->region) +
	 (x + y * mt->region->pitch) * mt->cpp;
   }
a410 1

d420 2
a421 2
/**
 * Upload data for a particular image.
d432 3
a434 1
   const GLuint depth = dst->level[level].depth;
d436 1
d438 1
a439 4
      GLuint dst_x, dst_y, height;

      intel_miptree_get_image_offset(dst, level, face, i, &dst_x, &dst_y);

a442 7

      DBG("%s: %d/%d %p/%d -> (%d, %d)/%d (%d, %d)\n",
	  __FUNCTION__, face, level,
	  src, src_row_pitch * dst->cpp,
	  dst_x, dst_y, dst->region->pitch * dst->cpp,
	  dst->level[level].width, height);

d444 3
a446 1
			dst->region, 0, dst_x, dst_y,
d452 1
a452 1
      src = (char *)src + src_image_pitch * dst->cpp;
d456 2
a457 3

/**
 * Copy mipmap image between trees
d468 4
a471 1
   GLuint src_x, src_y, dst_x, dst_y;
a472 1
   GLboolean success;
d475 1
a475 4
       GLuint align_w, align_h;

       intel_get_texture_alignment_unit(dst->internal_format,
                                        &align_w, &align_h);
d477 1
a477 1
       width = ALIGN(width, align_w);
a479 2
   intel_prepare_render(intel);

d481 6
a486 23
      intel_miptree_get_image_offset(src, level, face, i, &src_x, &src_y);
      intel_miptree_get_image_offset(dst, level, face, i, &dst_x, &dst_y);
      success = intel_region_copy(intel,
				  dst->region, 0, dst_x, dst_y,
				  src->region, 0, src_x, src_y,
				  width, height, GL_FALSE,
				  GL_COPY);
      if (!success) {
	 GLubyte *src_ptr, *dst_ptr;

	 src_ptr = intel_region_map(intel, src->region);
	 dst_ptr = intel_region_map(intel, dst->region);

	 _mesa_copy_rect(dst_ptr,
			 dst->cpp,
			 dst->region->pitch,
			 dst_x, dst_y, width, height,
			 src_ptr,
			 src->region->pitch,
			 src_x, src_y);
	 intel_region_unmap(intel, src->region);
	 intel_region_unmap(intel, dst->region);
      }
d488 1
@


