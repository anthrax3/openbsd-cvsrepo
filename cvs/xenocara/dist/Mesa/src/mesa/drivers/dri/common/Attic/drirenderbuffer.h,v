head	1.5;
access;
symbols
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.2.0.8
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.6
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.4
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.09.05.14.04.04;	author jsg;	state dead;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.16;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.38;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.07;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.07;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.57.02;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge Mesa 9.2.0
@
text
@
/**
 * A driRenderbuffer is dervied from gl_renderbuffer.
 * It describes a color buffer (front or back), a depth buffer, or stencil
 * buffer etc.
 * Specific to DRI drivers are the offset and pitch fields.
 */


#ifndef DRIRENDERBUFFER_H
#define DRIRENDERBUFFER_H

#include "main/mtypes.h"
#include "main/formats.h"
#include "dri_util.h"


typedef struct {
   struct gl_renderbuffer Base;

   /* Chars or bytes per pixel.  If Z and Stencil are stored together this
    * will typically be 32 whether this a depth or stencil renderbuffer.
    */
   GLint cpp;

   /* Buffer position and pitch (row stride).  Recall that for today's DRI
    * drivers, we have statically allocated color/depth/stencil buffers.
    * So this information describes the whole screen, not just a window.
    * To address pixels in a window, we need to know the window's position
    * and size with respect to the screen.
    */
   GLint offset;  /* in bytes */
   GLint pitch;   /* in pixels */

   /* If the driver can do page flipping (full-screen double buffering)
    * the current front/back buffers may get swapped.
    * If page flipping is disabled, these  fields will be identical to
    * the offset/pitch/Data above.
    * If page flipping is enabled, and this is the front(back) renderbuffer,
    * flippedOffset/Pitch/Data will have the back(front) renderbuffer's values.
    */
   GLint flippedOffset;
   GLint flippedPitch;
   GLvoid *flippedData;  /* mmap'd address of buffer memory, if used */

   /* Pointer to corresponding __DRIdrawable.  This is used to compute
    * the window's position within the framebuffer.
    */
   __DRIdrawable *dPriv;

   /* XXX this is for radeon/r200 only.  We should really create a new
    * r200Renderbuffer class, derived from this class...  not a huge deal.
    */
   GLboolean depthHasSurface;

   /**
    * A handy flag to know if this is the back color buffer.
    * 
    * \note
    * This is currently only used by tdfx.
    */
   GLboolean backBuffer;
} driRenderbuffer;


extern driRenderbuffer *
driNewRenderbuffer(gl_format format, GLvoid *addr,
                   GLint cpp, GLint offset, GLint pitch,
                   __DRIdrawable *dPriv);

extern void
driFlipRenderbuffers(struct gl_framebuffer *fb, GLboolean flipped);


extern void
driUpdateFramebufferSize(struct gl_context *ctx, const __DRIdrawable *dPriv);


#endif /* DRIRENDERBUFFER_H */
@


1.4
log
@Merge Mesa 7.10.3
@
text
@@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d76 1
a76 1
driUpdateFramebufferSize(GLcontext *ctx, const __DRIdrawable *dPriv);
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d14 1
d46 1
a46 1
   /* Pointer to corresponding __DRIdrawablePrivate.  This is used to compute
d49 1
a49 1
   __DRIdrawablePrivate *dPriv;
d60 1
a60 1
    * This is currently only used by s3v and tdfx.
d67 1
a67 1
driNewRenderbuffer(GLenum format, GLvoid *addr,
d69 1
a69 1
                   __DRIdrawablePrivate *dPriv);
d76 1
a76 1
driUpdateFramebufferSize(GLcontext *ctx, const __DRIdrawablePrivate *dPriv);
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
#include "mtypes.h"
d55 5
a59 2
   /* XXX this is for s3v only.  A handy flag to know if this is the back
    * color buffer.
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d55 2
a56 5
   /**
    * A handy flag to know if this is the back color buffer.
    * 
    * \note
    * This is currently only used by s3v and tdfx.
@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@d13 1
a13 2
#include "main/mtypes.h"
#include "main/formats.h"
d45 1
a45 1
   /* Pointer to corresponding __DRIdrawable.  This is used to compute
d48 1
a48 1
   __DRIdrawable *dPriv;
d59 1
a59 1
    * This is currently only used by tdfx.
d66 1
a66 1
driNewRenderbuffer(gl_format format, GLvoid *addr,
d68 1
a68 1
                   __DRIdrawable *dPriv);
d75 1
a75 1
driUpdateFramebufferSize(struct gl_context *ctx, const __DRIdrawable *dPriv);
@


