head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.04.51;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.22;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.40;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.57;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.55;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.12.04;	author jsg;	state Exp;
branches;
next	;
commitid	ce2W5rH5aF7VS9gi;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "nouveau_driver.h"
#include "nouveau_context.h"
#include "nouveau_fbo.h"
#include "nouveau_gldefs.h"
#include "nouveau_util.h"
#include "nv20_3d.xml.h"
#include "nv20_driver.h"

static inline unsigned
get_rt_format(mesa_format format)
{
	switch (format) {
	case MESA_FORMAT_B8G8R8X8_UNORM:
		return NV20_3D_RT_FORMAT_COLOR_X8R8G8B8;
	case MESA_FORMAT_B8G8R8A8_UNORM:
		return NV20_3D_RT_FORMAT_COLOR_A8R8G8B8;
	case MESA_FORMAT_B5G6R5_UNORM:
		return NV20_3D_RT_FORMAT_COLOR_R5G6B5;
	case MESA_FORMAT_Z_UNORM16:
		return NV20_3D_RT_FORMAT_DEPTH_Z16;
	case MESA_FORMAT_S8_UINT_Z24_UNORM:
		return NV20_3D_RT_FORMAT_DEPTH_Z24S8;
	default:
		assert(0);
	}
}

static void
setup_hierz_buffer(struct gl_context *ctx)
{
	struct nouveau_pushbuf *push = context_push(ctx);
	struct gl_framebuffer *fb = ctx->DrawBuffer;
	struct nouveau_framebuffer *nfb = to_nouveau_framebuffer(fb);
	unsigned pitch = align(fb->Width, 128),
		height = align(fb->Height, 2),
		size = pitch * height;

	if (!nfb->hierz.bo || nfb->hierz.bo->size != size) {
		nouveau_bo_ref(NULL, &nfb->hierz.bo);
		nouveau_bo_new(context_dev(ctx), NOUVEAU_BO_VRAM, 0, size,
			       NULL, &nfb->hierz.bo);
	}

	BEGIN_NV04(push, NV25_3D(HIERZ_PITCH), 1);
	PUSH_DATA (push, pitch);
	BEGIN_NV04(push, NV25_3D(HIERZ_OFFSET), 1);
	PUSH_MTHDl(push, NV25_3D(HIERZ_OFFSET), BUFCTX_FB,
			 nfb->hierz.bo, 0, NOUVEAU_BO_VRAM | NOUVEAU_BO_RDWR);
}

void
nv20_emit_framebuffer(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);
	struct gl_framebuffer *fb = ctx->DrawBuffer;
	struct nouveau_surface *s;
	unsigned rt_format = NV20_3D_RT_FORMAT_TYPE_LINEAR;
	unsigned rt_pitch = 0, zeta_pitch = 0;
	unsigned bo_flags = NOUVEAU_BO_VRAM | NOUVEAU_BO_RDWR;

	if (fb->_Status != GL_FRAMEBUFFER_COMPLETE_EXT)
		return;

	PUSH_RESET(push, BUFCTX_FB);

	/* Render target */
	if (fb->_ColorDrawBuffers[0]) {
		s = &to_nouveau_renderbuffer(
			fb->_ColorDrawBuffers[0])->surface;

		rt_format |= get_rt_format(s->format);
		rt_pitch = s->pitch;

		BEGIN_NV04(push, NV20_3D(COLOR_OFFSET), 1);
		PUSH_MTHDl(push, NV20_3D(COLOR_OFFSET), BUFCTX_FB,
				 s->bo, 0, bo_flags);
	}

	/* depth/stencil */
	if (fb->Attachment[BUFFER_DEPTH].Renderbuffer) {
		s = &to_nouveau_renderbuffer(
			fb->Attachment[BUFFER_DEPTH].Renderbuffer)->surface;

		rt_format |= get_rt_format(s->format);
		zeta_pitch = s->pitch;

		BEGIN_NV04(push, NV20_3D(ZETA_OFFSET), 1);
		PUSH_MTHDl(push, NV20_3D(ZETA_OFFSET), BUFCTX_FB,
				 s->bo, 0, bo_flags);

		if (context_chipset(ctx) >= 0x25)
			setup_hierz_buffer(ctx);
	} else {
		rt_format |= get_rt_format(MESA_FORMAT_S8_UINT_Z24_UNORM);
		zeta_pitch = rt_pitch;
	}

	BEGIN_NV04(push, NV20_3D(RT_FORMAT), 2);
	PUSH_DATA (push, rt_format);
	PUSH_DATA (push, zeta_pitch << 16 | rt_pitch);

	/* Recompute the viewport/scissor state. */
	context_dirty(ctx, VIEWPORT);
	context_dirty(ctx, SCISSOR);
	context_dirty(ctx, DEPTH);
}

void
nv20_emit_viewport(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);
	struct gl_framebuffer *fb = ctx->DrawBuffer;
	float a[4] = {};

	get_viewport_translate(ctx, a);

	BEGIN_NV04(push, NV20_3D(VIEWPORT_TRANSLATE_X), 4);
	PUSH_DATAp(push, a, 4);

	BEGIN_NV04(push, NV20_3D(VIEWPORT_CLIP_HORIZ(0)), 1);
	PUSH_DATA (push, (fb->Width - 1) << 16);
	BEGIN_NV04(push, NV20_3D(VIEWPORT_CLIP_VERT(0)), 1);
	PUSH_DATA (push, (fb->Height - 1) << 16);

	context_dirty(ctx, PROJECTION);
}
@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d131 1
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d36 1
a36 1
get_rt_format(gl_format format)
d39 1
a39 1
	case MESA_FORMAT_XRGB8888:
d41 1
a41 1
	case MESA_FORMAT_ARGB8888:
d43 1
a43 1
	case MESA_FORMAT_RGB565:
d45 1
a45 1
	case MESA_FORMAT_Z16:
d47 1
a47 1
	case MESA_FORMAT_Z24_S8:
d120 1
a120 1
		rt_format |= get_rt_format(MESA_FORMAT_Z24_S8);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d57 1
a57 3
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *kelvin = context_eng3d(ctx);
	struct nouveau_bo_context *bctx = context_bctx(ctx, HIERZ);
d67 1
a67 1
			       &nfb->hierz.bo);
d70 5
a74 5
	BEGIN_RING(chan, kelvin, NV25_3D_HIERZ_PITCH, 1);
	OUT_RING(chan, pitch);

	nouveau_bo_markl(bctx, kelvin, NV25_3D_HIERZ_OFFSET, nfb->hierz.bo,
			 0, NOUVEAU_BO_VRAM | NOUVEAU_BO_RDWR);
d80 1
a80 3
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *kelvin = context_eng3d(ctx);
	struct nouveau_bo_context *bctx = context_bctx(ctx, FRAMEBUFFER);
d90 2
d100 2
a101 1
		nouveau_bo_markl(bctx, kelvin, NV20_3D_COLOR_OFFSET,
d106 1
a106 1
	if (fb->_DepthBuffer) {
d108 1
a108 1
			fb->_DepthBuffer->Wrapped)->surface;
d113 2
a114 1
		nouveau_bo_markl(bctx, kelvin, NV20_3D_ZETA_OFFSET,
d124 3
a126 3
	BEGIN_RING(chan, kelvin, NV20_3D_RT_FORMAT, 2);
	OUT_RING(chan, rt_format);
	OUT_RING(chan, zeta_pitch << 16 | rt_pitch);
d136 1
a136 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *kelvin = context_eng3d(ctx);
d142 2
a143 2
	BEGIN_RING(chan, kelvin, NV20_3D_VIEWPORT_TRANSLATE_X, 4);
	OUT_RINGp(chan, a, 4);
d145 4
a148 4
	BEGIN_RING(chan, kelvin, NV20_3D_VIEWPORT_CLIP_HORIZ(0), 1);
	OUT_RING(chan, (fb->Width - 1) << 16);
	BEGIN_RING(chan, kelvin, NV20_3D_VIEWPORT_CLIP_VERT(0), 1);
	OUT_RING(chan, (fb->Height - 1) << 16);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d32 1
a32 1
#include "nouveau_class.h"
d40 1
a40 1
		return 0x05;
d42 1
a42 1
		return 0x08;
d44 1
a44 1
		return 0x03;
d46 1
a46 1
		return 0x10;
d48 1
a48 1
		return 0x20;
d54 25
d80 1
a80 1
nv20_emit_framebuffer(GLcontext *ctx, int emit)
d87 1
a87 1
	unsigned rt_format = NV20TCL_RT_FORMAT_TYPE_LINEAR;
d95 1
a95 1
	if (fb->_NumColorDrawBuffers) {
d100 1
a100 1
		zeta_pitch = rt_pitch = s->pitch;
d102 1
a102 1
		nouveau_bo_markl(bctx, kelvin, NV20TCL_COLOR_OFFSET,
d114 1
a114 1
		nouveau_bo_markl(bctx, kelvin, NV20TCL_ZETA_OFFSET,
d116 6
d124 1
a124 1
	BEGIN_RING(chan, kelvin, NV20TCL_RT_FORMAT, 2);
d134 1
a134 1
nv20_emit_viewport(GLcontext *ctx, int emit)
a139 1
	int i;
d143 2
a144 3
	BEGIN_RING(chan, kelvin, NV20TCL_VIEWPORT_TRANSLATE_X, 4);
	for (i = 0; i < 4; i++)
		OUT_RINGf(chan, a[i]);
d146 1
a146 1
	BEGIN_RING(chan, kelvin, NV20TCL_VIEWPORT_CLIP_HORIZ(0), 1);
d148 1
a148 1
	BEGIN_RING(chan, kelvin, NV20TCL_VIEWPORT_CLIP_VERT(0), 1);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d32 1
a32 1
#include "nv20_3d.xml.h"
d40 1
a40 1
		return NV20_3D_RT_FORMAT_COLOR_X8R8G8B8;
d42 1
a42 1
		return NV20_3D_RT_FORMAT_COLOR_A8R8G8B8;
d44 1
a44 1
		return NV20_3D_RT_FORMAT_COLOR_R5G6B5;
d46 1
a46 1
		return NV20_3D_RT_FORMAT_DEPTH_Z16;
d48 1
a48 1
		return NV20_3D_RT_FORMAT_DEPTH_Z24S8;
a53 25
static void
setup_hierz_buffer(struct gl_context *ctx)
{
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *kelvin = context_eng3d(ctx);
	struct nouveau_bo_context *bctx = context_bctx(ctx, HIERZ);
	struct gl_framebuffer *fb = ctx->DrawBuffer;
	struct nouveau_framebuffer *nfb = to_nouveau_framebuffer(fb);
	unsigned pitch = align(fb->Width, 128),
		height = align(fb->Height, 2),
		size = pitch * height;

	if (!nfb->hierz.bo || nfb->hierz.bo->size != size) {
		nouveau_bo_ref(NULL, &nfb->hierz.bo);
		nouveau_bo_new(context_dev(ctx), NOUVEAU_BO_VRAM, 0, size,
			       &nfb->hierz.bo);
	}

	BEGIN_RING(chan, kelvin, NV25_3D_HIERZ_PITCH, 1);
	OUT_RING(chan, pitch);

	nouveau_bo_markl(bctx, kelvin, NV25_3D_HIERZ_OFFSET, nfb->hierz.bo,
			 0, NOUVEAU_BO_VRAM | NOUVEAU_BO_RDWR);
}

d55 1
a55 1
nv20_emit_framebuffer(struct gl_context *ctx, int emit)
d62 1
a62 1
	unsigned rt_format = NV20_3D_RT_FORMAT_TYPE_LINEAR;
d70 1
a70 1
	if (fb->_ColorDrawBuffers[0]) {
d75 1
a75 1
		rt_pitch = s->pitch;
d77 1
a77 1
		nouveau_bo_markl(bctx, kelvin, NV20_3D_COLOR_OFFSET,
d89 1
a89 1
		nouveau_bo_markl(bctx, kelvin, NV20_3D_ZETA_OFFSET,
a90 6

		if (context_chipset(ctx) >= 0x25)
			setup_hierz_buffer(ctx);
	} else {
		rt_format |= get_rt_format(MESA_FORMAT_Z24_S8);
		zeta_pitch = rt_pitch;
d93 1
a93 1
	BEGIN_RING(chan, kelvin, NV20_3D_RT_FORMAT, 2);
d103 1
a103 1
nv20_emit_viewport(struct gl_context *ctx, int emit)
d109 1
d113 3
a115 2
	BEGIN_RING(chan, kelvin, NV20_3D_VIEWPORT_TRANSLATE_X, 4);
	OUT_RINGp(chan, a, 4);
d117 1
a117 1
	BEGIN_RING(chan, kelvin, NV20_3D_VIEWPORT_CLIP_HORIZ(0), 1);
d119 1
a119 1
	BEGIN_RING(chan, kelvin, NV20_3D_VIEWPORT_CLIP_VERT(0), 1);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d57 3
a59 1
	struct nouveau_pushbuf *push = context_push(ctx);
d69 1
a69 1
			       NULL, &nfb->hierz.bo);
d72 5
a76 5
	BEGIN_NV04(push, NV25_3D(HIERZ_PITCH), 1);
	PUSH_DATA (push, pitch);
	BEGIN_NV04(push, NV25_3D(HIERZ_OFFSET), 1);
	PUSH_MTHDl(push, NV25_3D(HIERZ_OFFSET), BUFCTX_FB,
			 nfb->hierz.bo, 0, NOUVEAU_BO_VRAM | NOUVEAU_BO_RDWR);
d82 3
a84 1
	struct nouveau_pushbuf *push = context_push(ctx);
a93 2
	PUSH_RESET(push, BUFCTX_FB);

d102 1
a102 2
		BEGIN_NV04(push, NV20_3D(COLOR_OFFSET), 1);
		PUSH_MTHDl(push, NV20_3D(COLOR_OFFSET), BUFCTX_FB,
d107 1
a107 1
	if (fb->Attachment[BUFFER_DEPTH].Renderbuffer) {
d109 1
a109 1
			fb->Attachment[BUFFER_DEPTH].Renderbuffer)->surface;
d114 1
a114 2
		BEGIN_NV04(push, NV20_3D(ZETA_OFFSET), 1);
		PUSH_MTHDl(push, NV20_3D(ZETA_OFFSET), BUFCTX_FB,
d124 3
a126 3
	BEGIN_NV04(push, NV20_3D(RT_FORMAT), 2);
	PUSH_DATA (push, rt_format);
	PUSH_DATA (push, zeta_pitch << 16 | rt_pitch);
d136 2
a137 1
	struct nouveau_pushbuf *push = context_push(ctx);
d143 2
a144 2
	BEGIN_NV04(push, NV20_3D(VIEWPORT_TRANSLATE_X), 4);
	PUSH_DATAp(push, a, 4);
d146 4
a149 4
	BEGIN_NV04(push, NV20_3D(VIEWPORT_CLIP_HORIZ(0)), 1);
	PUSH_DATA (push, (fb->Width - 1) << 16);
	BEGIN_NV04(push, NV20_3D(VIEWPORT_CLIP_VERT(0)), 1);
	PUSH_DATA (push, (fb->Height - 1) << 16);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d36 1
a36 1
get_rt_format(mesa_format format)
d39 1
a39 1
	case MESA_FORMAT_B8G8R8X8_UNORM:
d41 1
a41 1
	case MESA_FORMAT_B8G8R8A8_UNORM:
d43 1
a43 1
	case MESA_FORMAT_B5G6R5_UNORM:
d45 1
a45 1
	case MESA_FORMAT_Z_UNORM16:
d47 1
a47 1
	case MESA_FORMAT_S8_UINT_Z24_UNORM:
d120 1
a120 1
		rt_format |= get_rt_format(MESA_FORMAT_S8_UINT_Z24_UNORM);
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a130 1
	context_dirty(ctx, DEPTH);
@


