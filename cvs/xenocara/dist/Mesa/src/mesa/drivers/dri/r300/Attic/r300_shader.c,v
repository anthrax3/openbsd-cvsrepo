head	1.5;
access;
symbols
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.09.05.14.05.03;	author jsg;	state dead;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.23;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.17;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.53.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.53.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.57.28;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.29.26;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.40;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge Mesa 9.2.0
@
text
@/*
 * Copyright 2009 Maciej Cencora <m.cencora@@gmail.com>
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "main/glheader.h"

#include "program/program.h"
#include "tnl/tnl.h"
#include "r300_context.h"
#include "r300_fragprog_common.h"

static void freeFragProgCache(struct gl_context *ctx, struct r300_fragment_program_cont *cache)
{
	struct r300_fragment_program *tmp, *fp = cache->progs;

	while (fp) {
		tmp = fp->next;
		rc_constants_destroy(&fp->code.constants);
		free(fp);
		fp = tmp;
	}
}

static void freeVertProgCache(struct gl_context *ctx, struct r300_vertex_program_cont *cache)
{
	struct r300_vertex_program *tmp, *vp = cache->progs;

	while (vp) {
		tmp = vp->next;
		rc_constants_destroy(&vp->code.constants);
		_mesa_reference_vertprog(ctx, &vp->Base, NULL);
		free(vp);
		vp = tmp;
	}
}

static struct gl_program *r300NewProgram(struct gl_context * ctx, GLenum target,
					 GLuint id)
{
	struct r300_vertex_program_cont *vp;
	struct r300_fragment_program_cont *fp;

	switch (target) {
	case GL_VERTEX_STATE_PROGRAM_NV:
	case GL_VERTEX_PROGRAM_ARB:
		vp = CALLOC_STRUCT(r300_vertex_program_cont);
		return _mesa_init_vertex_program(ctx, &vp->mesa_program, target, id);

	case GL_FRAGMENT_PROGRAM_NV:
	case GL_FRAGMENT_PROGRAM_ARB:
		fp = CALLOC_STRUCT(r300_fragment_program_cont);
		return _mesa_init_fragment_program(ctx, &fp->Base, target, id);

	default:
		_mesa_problem(ctx, "Bad target in r300NewProgram");
	}

	return NULL;
}

static void r300DeleteProgram(struct gl_context * ctx, struct gl_program *prog)
{
	struct r300_vertex_program_cont *vp = (struct r300_vertex_program_cont *)prog;
	struct r300_fragment_program_cont *fp = (struct r300_fragment_program_cont *)prog;

	switch (prog->Target) {
		case GL_VERTEX_PROGRAM_ARB:
			freeVertProgCache(ctx, vp);
			break;
		case GL_FRAGMENT_PROGRAM_ARB:
			freeFragProgCache(ctx, fp);
			break;
	}

	_mesa_delete_program(ctx, prog);
}

static GLboolean
r300ProgramStringNotify(struct gl_context * ctx, GLenum target, struct gl_program *prog)
{
	struct r300_vertex_program_cont *vp = (struct r300_vertex_program_cont *)prog;
	struct r300_fragment_program_cont *fp = (struct r300_fragment_program_cont *)prog;

	switch (target) {
	case GL_VERTEX_PROGRAM_ARB:
		freeVertProgCache(ctx, vp);
		vp->progs = NULL;
		break;
	case GL_FRAGMENT_PROGRAM_ARB:
		freeFragProgCache(ctx, fp);
		fp->progs = NULL;
		break;
	}

	/* need this for tcl fallbacks */
	(void) _tnl_program_string(ctx, target, prog);

	/* XXX check if program is legal, within limits */
	return GL_TRUE;
}

static GLboolean
r300IsProgramNative(struct gl_context * ctx, GLenum target, struct gl_program *prog)
{
	if (target == GL_FRAGMENT_PROGRAM_ARB) {
		struct r300_fragment_program *fp = r300SelectAndTranslateFragmentShader(ctx);

		return !fp->error;
	} else {
		struct r300_vertex_program *vp = r300SelectAndTranslateVertexShader(ctx);

		return !vp->error;
	}
}

void r300InitShaderFuncs(struct dd_function_table *functions)
{
	functions->NewProgram = r300NewProgram;
	functions->DeleteProgram = r300DeleteProgram;
	functions->ProgramStringNotify = r300ProgramStringNotify;
	functions->IsProgramNative = r300IsProgramNative;
}
@


1.4
log
@Merge Mesa 7.10.3
@
text
@@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d30 1
a30 1
#include "shader/program.h"
d35 1
a35 1
static void freeFragProgCache(GLcontext *ctx, struct r300_fragment_program_cont *cache)
d47 1
a47 1
static void freeVertProgCache(GLcontext *ctx, struct r300_vertex_program_cont *cache)
d60 1
a60 1
static struct gl_program *r300NewProgram(GLcontext * ctx, GLenum target,
d84 1
a84 1
static void r300DeleteProgram(GLcontext * ctx, struct gl_program *prog)
d102 1
a102 1
r300ProgramStringNotify(GLcontext * ctx, GLenum target, struct gl_program *prog)
d126 1
a126 1
r300IsProgramNative(GLcontext * ctx, GLenum target, struct gl_program *prog)
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d1 26
d33 26
a58 1
#include "r300_fragprog.h"
a62 1
	r300ContextPtr rmesa = R300_CONTEXT(ctx);
d64 1
a64 2
	struct r300_fragment_program *r300_fp;
	struct r500_fragment_program *r500_fp;
d70 3
a72 2
		return _mesa_init_vertex_program(ctx, &vp->mesa_program,
						 target, id);
d74 2
a75 10
		if (rmesa->radeon.radeonScreen->chip_family >= CHIP_FAMILY_RV515) {
			r500_fp = CALLOC_STRUCT(r500_fragment_program);
			r500_fp->ctx = ctx;
			return _mesa_init_fragment_program(ctx, &r500_fp->mesa_program,
							   target, id);
		} else {
			r300_fp = CALLOC_STRUCT(r300_fragment_program);
			return _mesa_init_fragment_program(ctx, &r300_fp->mesa_program,
							   target, id);
		}
a76 10
	case GL_FRAGMENT_PROGRAM_NV:
		if (rmesa->radeon.radeonScreen->chip_family >= CHIP_FAMILY_RV515) {
			r500_fp = CALLOC_STRUCT(r500_fragment_program);
			return _mesa_init_fragment_program(ctx, &r500_fp->mesa_program,
							   target, id);
		} else {
			r300_fp = CALLOC_STRUCT(r300_fragment_program);
			return _mesa_init_fragment_program(ctx, &r300_fp->mesa_program,
							   target, id);
		}
d86 12
d101 1
a101 1
static void
d104 2
a105 4
	r300ContextPtr rmesa = R300_CONTEXT(ctx);
	struct r300_vertex_program_cont *vp = (void *)prog;
	struct r300_fragment_program *r300_fp = (struct r300_fragment_program *)prog;
	struct r500_fragment_program *r500_fp = (struct r500_fragment_program *)prog;
d109 1
d113 2
a114 4
		if (rmesa->radeon.radeonScreen->chip_family >= CHIP_FAMILY_RV515)
			r500_fp->translated = GL_FALSE;
		else
			r300_fp->translated = GL_FALSE;
d119 4
a122 1
	_tnl_program_string(ctx, target, prog);
d128 9
a136 1
	return GL_TRUE;
@


1.1
log
@Initial revision
@
text
@a0 3
#include "glheader.h"
#include "macros.h"
#include "enums.h"
d2 3
a4 1
#include "program.h"
d9 2
a10 2
static void
r300BindProgram(GLcontext *ctx, GLenum target, struct gl_program *prog)
a11 1
	
d13 20
a32 11
	struct r300_vertex_program *vp=(void *)prog;
	
	
	switch(target){
		case GL_VERTEX_PROGRAM_ARB:
		rmesa->curr_vp = (struct gl_vertex_program *)vp;
		vp->ref_count++;
#if 0
		if((vp->ref_count % 1500) == 0) {
			fprintf(stderr, "id %p, ref_count %d\n", vp, vp->ref_count);
			_mesa_print_program(&vp->mesa_program.Base);
d34 13
a46 7
#endif
		
		case GL_FRAGMENT_PROGRAM_ARB:
		break;
		default:
			WARN_ONCE("Target not supported yet!\n");
		break;
d48 2
d52 1
a52 2
static struct gl_program *
r300NewProgram(GLcontext *ctx, GLenum target, GLuint id)
d54 1
a54 20
	struct r300_vertex_program *vp;
	struct r300_fragment_program *fp;
	
	switch(target){
		case GL_VERTEX_STATE_PROGRAM_NV:
		case GL_VERTEX_PROGRAM_ARB:
			vp=CALLOC_STRUCT(r300_vertex_program);
			return _mesa_init_vertex_program(ctx, &vp->mesa_program, target, id);
		case GL_FRAGMENT_PROGRAM_ARB:
			fp=CALLOC_STRUCT(r300_fragment_program);
			fp->ctx = ctx;
			return _mesa_init_fragment_program(ctx, &fp->mesa_program, target, id);
		case GL_FRAGMENT_PROGRAM_NV:
			fp=CALLOC_STRUCT(r300_fragment_program);
			return _mesa_init_fragment_program(ctx, &fp->mesa_program, target, id);
		default:
			_mesa_problem(ctx, "Bad target in r300NewProgram");
	}
	
	return NULL;	
a56 1

d58 1
a58 1
r300DeleteProgram(GLcontext *ctx, struct gl_program *prog)
a59 1
#if 0
d61 3
a63 8
	struct r300_vertex_program *vp=(void *)prog;
	
	if(rmesa->curr_vp == vp)
		rmesa->curr_vp = NULL;
#endif

	_mesa_delete_program(ctx, prog);
}
d65 1
a65 7
static void
r300ProgramStringNotify(GLcontext *ctx, GLenum target, struct gl_program *prog)
{
	struct r300_vertex_program *vp=(void *)prog;
	struct r300_fragment_program *fp = (struct r300_fragment_program *) prog;
	
	switch(target) {
d67 2
a68 4
		vp->translated = GL_FALSE;
		memset(&vp->translated, 0, sizeof(struct r300_vertex_program) - sizeof(struct gl_vertex_program));
		/*r300_translate_vertex_shader(vp);*/
	break;
d70 5
a74 2
		fp->translated = GL_FALSE;
	break;
d76 1
d82 1
a82 1
r300IsProgramNative(GLcontext *ctx, GLenum target, struct gl_program *prog)
d84 1
a84 4
	//struct r300_vertex_program *vp=(void *)prog;
	//r300ContextPtr rmesa = R300_CONTEXT(ctx);

	return 1;
d89 4
a92 5
	functions->NewProgram=r300NewProgram;
	functions->BindProgram=r300BindProgram;
	functions->DeleteProgram=r300DeleteProgram;
	functions->ProgramStringNotify=r300ProgramStringNotify;
	functions->IsProgramNative=r300IsProgramNative;
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d15 1
a15 1
	struct r300_vertex_program_cont *vp=(void *)prog;
d20 2
a21 2
		//rmesa->curr_vp = (struct gl_vertex_program *)vp;
		//vp->ref_count++;
d40 1
a40 1
	struct r300_vertex_program_cont *vp;
d46 1
a46 1
			vp=CALLOC_STRUCT(r300_vertex_program_cont);
d80 1
a80 1
	struct r300_vertex_program_cont *vp=(void *)prog;
d85 2
a86 3
		vp->progs = NULL;
		/*vp->translated = GL_FALSE;
		memset(&vp->translated, 0, sizeof(struct r300_vertex_program) - sizeof(struct gl_vertex_program));*/
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d10 29
a38 2
static struct gl_program *r300NewProgram(GLcontext * ctx, GLenum target,
					 GLuint id)
d42 15
a56 18

	switch (target) {
	case GL_VERTEX_STATE_PROGRAM_NV:
	case GL_VERTEX_PROGRAM_ARB:
		vp = CALLOC_STRUCT(r300_vertex_program_cont);
		return _mesa_init_vertex_program(ctx, &vp->mesa_program,
						 target, id);
	case GL_FRAGMENT_PROGRAM_ARB:
		fp = CALLOC_STRUCT(r300_fragment_program);
		fp->ctx = ctx;
		return _mesa_init_fragment_program(ctx, &fp->mesa_program,
						   target, id);
	case GL_FRAGMENT_PROGRAM_NV:
		fp = CALLOC_STRUCT(r300_fragment_program);
		return _mesa_init_fragment_program(ctx, &fp->mesa_program,
						   target, id);
	default:
		_mesa_problem(ctx, "Bad target in r300NewProgram");
d58 3
a61 2
	return NULL;
}
d63 2
a64 1
static void r300DeleteProgram(GLcontext * ctx, struct gl_program *prog)
d66 8
d78 1
a78 1
r300ProgramStringNotify(GLcontext * ctx, GLenum target, struct gl_program *prog)
d80 4
a83 4
	struct r300_vertex_program_cont *vp = (void *)prog;
	struct r300_fragment_program *fp = (struct r300_fragment_program *)prog;

	switch (target) {
d86 4
a89 1
		break;
d92 1
a92 1
		break;
d99 1
a99 1
r300IsProgramNative(GLcontext * ctx, GLenum target, struct gl_program *prog)
d101 3
d109 5
a113 4
	functions->NewProgram = r300NewProgram;
	functions->DeleteProgram = r300DeleteProgram;
	functions->ProgramStringNotify = r300ProgramStringNotify;
	functions->IsProgramNative = r300IsProgramNative;
@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d1 3
a3 26
/*
 * Copyright 2009 Maciej Cencora <m.cencora@@gmail.com>
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
d5 1
a5 3
#include "main/glheader.h"

#include "program/program.h"
d8 1
a8 13
#include "r300_fragprog_common.h"

static void freeFragProgCache(struct gl_context *ctx, struct r300_fragment_program_cont *cache)
{
	struct r300_fragment_program *tmp, *fp = cache->progs;

	while (fp) {
		tmp = fp->next;
		rc_constants_destroy(&fp->code.constants);
		free(fp);
		fp = tmp;
	}
}
d10 1
a10 14
static void freeVertProgCache(struct gl_context *ctx, struct r300_vertex_program_cont *cache)
{
	struct r300_vertex_program *tmp, *vp = cache->progs;

	while (vp) {
		tmp = vp->next;
		rc_constants_destroy(&vp->code.constants);
		_mesa_reference_vertprog(ctx, &vp->Base, NULL);
		free(vp);
		vp = tmp;
	}
}

static struct gl_program *r300NewProgram(struct gl_context * ctx, GLenum target,
d14 1
a14 1
	struct r300_fragment_program_cont *fp;
d20 7
a26 2
		return _mesa_init_vertex_program(ctx, &vp->mesa_program, target, id);

d28 3
a30 4
	case GL_FRAGMENT_PROGRAM_ARB:
		fp = CALLOC_STRUCT(r300_fragment_program_cont);
		return _mesa_init_fragment_program(ctx, &fp->Base, target, id);

d38 1
a38 1
static void r300DeleteProgram(struct gl_context * ctx, struct gl_program *prog)
a39 12
	struct r300_vertex_program_cont *vp = (struct r300_vertex_program_cont *)prog;
	struct r300_fragment_program_cont *fp = (struct r300_fragment_program_cont *)prog;

	switch (prog->Target) {
		case GL_VERTEX_PROGRAM_ARB:
			freeVertProgCache(ctx, vp);
			break;
		case GL_FRAGMENT_PROGRAM_ARB:
			freeFragProgCache(ctx, fp);
			break;
	}

d43 2
a44 2
static GLboolean
r300ProgramStringNotify(struct gl_context * ctx, GLenum target, struct gl_program *prog)
d46 2
a47 2
	struct r300_vertex_program_cont *vp = (struct r300_vertex_program_cont *)prog;
	struct r300_fragment_program_cont *fp = (struct r300_fragment_program_cont *)prog;
a50 1
		freeVertProgCache(ctx, vp);
d54 1
a54 2
		freeFragProgCache(ctx, fp);
		fp->progs = NULL;
a56 1

d58 1
a58 4
	(void) _tnl_program_string(ctx, target, prog);

	/* XXX check if program is legal, within limits */
	return GL_TRUE;
d62 1
a62 1
r300IsProgramNative(struct gl_context * ctx, GLenum target, struct gl_program *prog)
d64 1
a64 9
	if (target == GL_FRAGMENT_PROGRAM_ARB) {
		struct r300_fragment_program *fp = r300SelectAndTranslateFragmentShader(ctx);

		return !fp->error;
	} else {
		struct r300_vertex_program *vp = r300SelectAndTranslateVertexShader(ctx);

		return !vp->error;
	}
@


