head	1.7;
access;
symbols
	OPENBSD_5_4:1.6.0.8
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.6
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2013.09.05.14.05.00;	author jsg;	state dead;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.23;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.40;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.17;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.53.27;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.53.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.29.21;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.40;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Merge Mesa 9.2.0
@
text
@/*
Copyright (C) The Weather Channel, Inc.  2002.  All Rights Reserved.

The Weather Channel (TM) funded Tungsten Graphics to develop the
initial release of the Radeon 8500 driver under the XFree86 license.
This notice must be preserved.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

/**
 * \file
 *
 * \author Nicolai Haehnle <prefect_@@gmx.net>
 */

#include "main/glheader.h"
#include "main/state.h"
#include "main/imports.h"
#include "main/macros.h"
#include "main/context.h"
#include "main/simple_list.h"

#include "drm.h"
#include "radeon_drm.h"

#include "r300_context.h"
#include "r300_reg.h"
#include "r300_cmdbuf.h"
#include "r300_emit.h"
#include "radeon_bocs_wrapper.h"
#include "radeon_mipmap_tree.h"
#include "radeon_queryobj.h"

/** # of dwords reserved for additional instructions that may need to be written
 * during flushing.
 */
#define SPACE_FOR_FLUSHING	4

static unsigned packet0_count(r300ContextPtr r300, uint32_t *pkt)
{
    if (r300->radeon.radeonScreen->kernel_mm) {
        return ((((*pkt) >> 16) & 0x3FFF) + 1);
    } else {
        drm_r300_cmd_header_t *t = (drm_r300_cmd_header_t*)pkt;
        return t->packet0.count;
    }
}

#define vpu_count(ptr) (((drm_r300_cmd_header_t*)(ptr))->vpu.count)
#define r500fp_count(ptr) (((drm_r300_cmd_header_t*)(ptr))->r500fp.count)

static int check_vpu(struct gl_context *ctx, struct radeon_state_atom *atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	int cnt;
	int extra = 1;
	cnt = vpu_count(atom->cmd);

	if (r300->radeon.radeonScreen->kernel_mm) {
		extra = 3;
	}

	return cnt ? (cnt * 4) + extra : 0;
}

static int check_vpp(struct gl_context *ctx, struct radeon_state_atom *atom)
{
    r300ContextPtr r300 = R300_CONTEXT(ctx);
    int cnt;
    int extra = 1;

    if (r300->radeon.radeonScreen->kernel_mm) {
        cnt = r300->selected_vp->code.constants.Count * 4;
        extra = 3;
    } else {
        cnt = vpu_count(atom->cmd);
        extra = 1;
    }

    return cnt ? (cnt * 4) + extra : 0;
}

void r300_emit_vpu(struct r300_context *r300,
                   uint32_t *data,
                   unsigned len,
                   uint32_t addr)
{
    BATCH_LOCALS(&r300->radeon);

    BEGIN_BATCH_NO_AUTOSTATE(3 + len);
    OUT_BATCH_REGVAL(R300_VAP_PVS_VECTOR_INDX_REG, addr);
    OUT_BATCH(CP_PACKET0(R300_VAP_PVS_UPLOAD_DATA, len-1) | RADEON_ONE_REG_WR);
    OUT_BATCH_TABLE(data, len);
    END_BATCH();
}

static void emit_vpu_state(struct gl_context *ctx, struct radeon_state_atom * atom)
{
    r300ContextPtr r300 = R300_CONTEXT(ctx);
    drm_r300_cmd_header_t cmd;
    uint32_t addr;

    cmd.u = atom->cmd[0];
    addr = (cmd.vpu.adrhi << 8) | cmd.vpu.adrlo;

    r300_emit_vpu(r300, &atom->cmd[1], vpu_count(atom->cmd) * 4, addr);
}

static void emit_vpp_state(struct gl_context *ctx, struct radeon_state_atom * atom)
{
    r300ContextPtr r300 = R300_CONTEXT(ctx);
    drm_r300_cmd_header_t cmd;
    uint32_t addr;

    cmd.u = atom->cmd[0];
    addr = (cmd.vpu.adrhi << 8) | cmd.vpu.adrlo;

    r300_emit_vpu(r300, &atom->cmd[1], r300->selected_vp->code.constants.Count * 4, addr);
}

void r500_emit_fp(struct r300_context *r300,
                  uint32_t *data,
                  unsigned len,
                  uint32_t addr,
                  unsigned type,
                  unsigned clamp)
{
    BATCH_LOCALS(&r300->radeon);

    addr |= (type << 16);
    addr |= (clamp << 17);

    BEGIN_BATCH_NO_AUTOSTATE(len + 3);
    OUT_BATCH(CP_PACKET0(R500_GA_US_VECTOR_INDEX, 0));
    OUT_BATCH(addr);
    OUT_BATCH(CP_PACKET0(R500_GA_US_VECTOR_DATA, len-1) | RADEON_ONE_REG_WR);
    OUT_BATCH_TABLE(data, len);
    END_BATCH();
}

static void emit_r500fp_atom(struct gl_context *ctx, struct radeon_state_atom * atom)
{
    r300ContextPtr r300 = R300_CONTEXT(ctx);
    drm_r300_cmd_header_t cmd;
    uint32_t addr, count;
    int type, clamp;

    cmd.u = atom->cmd[0];
    addr = ((cmd.r500fp.adrhi_flags & 1) << 8) | cmd.r500fp.adrlo;
    type = !!(cmd.r500fp.adrhi_flags & R500FP_CONSTANT_TYPE);
    clamp = !!(cmd.r500fp.adrhi_flags & R500FP_CONSTANT_CLAMP);

    if (type) {
        count = r500fp_count(atom->cmd) * 4;
    } else {
        count = r500fp_count(atom->cmd) * 6;
    }

    r500_emit_fp(r300, &atom->cmd[1], count, addr, type, clamp);
}

static int check_tex_offsets(struct gl_context *ctx, struct radeon_state_atom * atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	int numtmus = packet0_count(r300, r300->hw.tex.offset.cmd);
	int dw = 0, i;
	if (atom->cmd[0] == CP_PACKET2) {
		return dw;
	}
	for(i = 0; i < numtmus; ++i) {
		radeonTexObj *t = r300->hw.textures[i];
		if (!t && !r300->radeon.radeonScreen->kernel_mm) {
			dw += 0;
		} else if (t && t->image_override && !t->bo) {
			if (!r300->radeon.radeonScreen->kernel_mm)
				dw += 2;
		} else
			dw += 4;
	}
	return dw;
}

static void emit_tex_offsets(struct gl_context *ctx, struct radeon_state_atom * atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	BATCH_LOCALS(&r300->radeon);
	int numtmus = packet0_count(r300, r300->hw.tex.offset.cmd);
	int i;

	for(i = 0; i < numtmus; ++i) {
		radeonTexObj *t = r300->hw.textures[i];
		if (t && !t->image_override) {
			BEGIN_BATCH_NO_AUTOSTATE(4);
			OUT_BATCH_REGSEQ(R300_TX_OFFSET_0 + (i * 4), 1);
			OUT_BATCH_RELOC(t->tile_bits, t->mt->bo, get_base_teximage_offset(t),
					RADEON_GEM_DOMAIN_GTT|RADEON_GEM_DOMAIN_VRAM, 0, 0);
			END_BATCH();
		} else if (!t) {
			/* Texture unit hasn't a texture bound.
			 * We assign the current color buffer as a fakery to make
			 * KIL work on KMS (without it, the CS checker will complain).
			 */
			if (r300->radeon.radeonScreen->kernel_mm) {
				struct radeon_renderbuffer *rrb = radeon_get_colorbuffer(&r300->radeon);
				if (rrb && rrb->bo) {
					BEGIN_BATCH_NO_AUTOSTATE(4);
					OUT_BATCH_REGSEQ(R300_TX_OFFSET_0 + (i * 4), 1);
					OUT_BATCH_RELOC(0, rrb->bo, 0,
							RADEON_GEM_DOMAIN_GTT|RADEON_GEM_DOMAIN_VRAM, 0, 0);
					END_BATCH();
				}
			}
		} else { /* override cases */
			if (t->bo) {
				BEGIN_BATCH_NO_AUTOSTATE(4);
				OUT_BATCH_REGSEQ(R300_TX_OFFSET_0 + (i * 4), 1);
				OUT_BATCH_RELOC(t->tile_bits, t->bo, 0,
						RADEON_GEM_DOMAIN_GTT|RADEON_GEM_DOMAIN_VRAM, 0, 0);
				END_BATCH();
			} else if (!r300->radeon.radeonScreen->kernel_mm) {
				BEGIN_BATCH_NO_AUTOSTATE(2);
				OUT_BATCH_REGSEQ(R300_TX_OFFSET_0 + (i * 4), 1);
				OUT_BATCH(t->override_offset);
				END_BATCH();
			} else {
				/* Texture unit hasn't a texture bound nothings to do */
			}
		}
	}
}

void r300_emit_scissor(struct gl_context *ctx)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	BATCH_LOCALS(&r300->radeon);
    unsigned x1, y1, x2, y2;
	struct radeon_renderbuffer *rrb;

    if (!r300->radeon.radeonScreen->driScreen->dri2.enabled) {
        return;
    }
	rrb = radeon_get_colorbuffer(&r300->radeon);
	if (!rrb || !rrb->bo) {
		fprintf(stderr, "no rrb\n");
		return;
	}
    if (r300->radeon.state.scissor.enabled) {
        x1 = r300->radeon.state.scissor.rect.x1;
        y1 = r300->radeon.state.scissor.rect.y1;
        x2 = r300->radeon.state.scissor.rect.x2;
        y2 = r300->radeon.state.scissor.rect.y2;
    } else {
        x1 = 0;
        y1 = 0;
        x2 = rrb->base.Width - 1;
        y2 = rrb->base.Height - 1;
    }
    if (r300->radeon.radeonScreen->chip_family < CHIP_FAMILY_RV515) {
        x1 += R300_SCISSORS_OFFSET;
        y1 += R300_SCISSORS_OFFSET;
        x2 += R300_SCISSORS_OFFSET;
        y2 += R300_SCISSORS_OFFSET;
    }
    BEGIN_BATCH_NO_AUTOSTATE(3);
    OUT_BATCH_REGSEQ(R300_SC_SCISSORS_TL, 2);
    OUT_BATCH((x1 << R300_SCISSORS_X_SHIFT)|(y1 << R300_SCISSORS_Y_SHIFT));
    OUT_BATCH((x2 << R300_SCISSORS_X_SHIFT)|(y2 << R300_SCISSORS_Y_SHIFT));
    END_BATCH();
}
static int check_cb_offset(struct gl_context *ctx, struct radeon_state_atom * atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	uint32_t dw = 6 + 3 + 16;
	if (r300->radeon.radeonScreen->kernel_mm)
		dw += 2;
	if (!r300->radeon.radeonScreen->driScreen->dri2.enabled) {
		dw -= 3 + 16;
	}
	return dw;
}

static void emit_scissor(struct r300_context *r300,
                         unsigned width,
                         unsigned height)
{
    int i;
    BATCH_LOCALS(&r300->radeon);
    if (r300->radeon.radeonScreen->chip_family >= CHIP_FAMILY_RV515) {
        BEGIN_BATCH_NO_AUTOSTATE(3);
        OUT_BATCH_REGSEQ(R300_SC_SCISSORS_TL, 2);
        OUT_BATCH(0);
        OUT_BATCH(((width - 1) << R300_SCISSORS_X_SHIFT) |
                ((height - 1) << R300_SCISSORS_Y_SHIFT));
        END_BATCH();
        BEGIN_BATCH_NO_AUTOSTATE(16);
        for (i = 0; i < 4; i++) {
            OUT_BATCH_REGSEQ(R300_SC_CLIPRECT_TL_0 + (i * 8), 2);
            OUT_BATCH((0 << R300_CLIPRECT_X_SHIFT) | (0 << R300_CLIPRECT_Y_SHIFT));
            OUT_BATCH(((width - 1) << R300_CLIPRECT_X_SHIFT) | ((height - 1) << R300_CLIPRECT_Y_SHIFT));
        }
        OUT_BATCH_REGSEQ(R300_SC_CLIP_RULE, 1);
        OUT_BATCH(0xAAAA);
        OUT_BATCH_REGSEQ(R300_SC_SCREENDOOR, 1);
        OUT_BATCH(0xffffff);
        END_BATCH();
    } else {
        BEGIN_BATCH_NO_AUTOSTATE(3);
        OUT_BATCH_REGSEQ(R300_SC_SCISSORS_TL, 2);
        OUT_BATCH((R300_SCISSORS_OFFSET << R300_SCISSORS_X_SHIFT) |
                (R300_SCISSORS_OFFSET << R300_SCISSORS_Y_SHIFT));
        OUT_BATCH(((width + R300_SCISSORS_OFFSET - 1) << R300_SCISSORS_X_SHIFT) |
                ((height + R300_SCISSORS_OFFSET - 1) << R300_SCISSORS_Y_SHIFT));
        END_BATCH();
        BEGIN_BATCH_NO_AUTOSTATE(16);
        for (i = 0; i < 4; i++) {
            OUT_BATCH_REGSEQ(R300_SC_CLIPRECT_TL_0 + (i * 8), 2);
            OUT_BATCH((R300_SCISSORS_OFFSET << R300_CLIPRECT_X_SHIFT) | (R300_SCISSORS_OFFSET << R300_CLIPRECT_Y_SHIFT));
            OUT_BATCH(((R300_SCISSORS_OFFSET + width - 1) << R300_CLIPRECT_X_SHIFT) |
                        ((R300_SCISSORS_OFFSET + height - 1) << R300_CLIPRECT_Y_SHIFT));
        }
        OUT_BATCH_REGSEQ(R300_SC_CLIP_RULE, 1);
        OUT_BATCH(0xAAAA);
        OUT_BATCH_REGSEQ(R300_SC_SCREENDOOR, 1);
        OUT_BATCH(0xffffff);
        END_BATCH();
    }
}

void r300_emit_cb_setup(struct r300_context *r300,
                        struct radeon_bo *bo,
                        uint32_t offset,
                        GLuint format,
                        unsigned cpp,
                        unsigned pitch)
{
    BATCH_LOCALS(&r300->radeon);
    uint32_t cbpitch = pitch / cpp;
    uint32_t dw = 6;

    assert(offset % 32 == 0);

    switch (format) {
        case MESA_FORMAT_SL8:
        case MESA_FORMAT_A8:
        case MESA_FORMAT_L8:
        case MESA_FORMAT_I8:
            cbpitch |= R300_COLOR_FORMAT_I8;
            break;
        case MESA_FORMAT_RGB565:
        case MESA_FORMAT_RGB565_REV:
            cbpitch |= R300_COLOR_FORMAT_RGB565;
            break;
        case MESA_FORMAT_ARGB4444:
        case MESA_FORMAT_ARGB4444_REV:
            cbpitch |= R300_COLOR_FORMAT_ARGB4444;
            break;
        case MESA_FORMAT_RGBA5551:
        case MESA_FORMAT_ARGB1555:
        case MESA_FORMAT_ARGB1555_REV:
            cbpitch |= R300_COLOR_FORMAT_ARGB1555;
            break;
        case MESA_FORMAT_RGBA8888:
        case MESA_FORMAT_RGBA8888_REV:
        case MESA_FORMAT_XRGB8888:
        case MESA_FORMAT_ARGB8888:
        case MESA_FORMAT_XRGB8888_REV:
        case MESA_FORMAT_ARGB8888_REV:
        case MESA_FORMAT_SRGBA8:
        case MESA_FORMAT_SARGB8:
            cbpitch |= R300_COLOR_FORMAT_ARGB8888;
            break;
        default:
            _mesa_problem(r300->radeon.glCtx, "unexpected format in emit_cb_offset()");
            break;
    }

    if (bo->flags & RADEON_BO_FLAGS_MACRO_TILE)
        cbpitch |= R300_COLOR_TILE_ENABLE;

    if (r300->radeon.radeonScreen->kernel_mm)
        dw += 2;

    BEGIN_BATCH_NO_AUTOSTATE(dw);
    OUT_BATCH_REGSEQ(R300_RB3D_COLOROFFSET0, 1);
    OUT_BATCH_RELOC(offset, bo, offset, 0, RADEON_GEM_DOMAIN_VRAM, 0);
    OUT_BATCH_REGSEQ(R300_RB3D_COLORPITCH0, 1);
    if (!r300->radeon.radeonScreen->kernel_mm)
        OUT_BATCH(cbpitch);
    else
        OUT_BATCH_RELOC(cbpitch, bo, cbpitch, 0, RADEON_GEM_DOMAIN_VRAM, 0);
    END_BATCH();
}

static void emit_cb_offset_atom(struct gl_context *ctx, struct radeon_state_atom * atom)
{
    r300ContextPtr r300 = R300_CONTEXT(ctx);
    struct radeon_renderbuffer *rrb;
    uint32_t offset = r300->radeon.state.color.draw_offset;

    rrb = radeon_get_colorbuffer(&r300->radeon);
    if (!rrb || !rrb->bo) {
        fprintf(stderr, "no rrb\n");
        return;
    }

    if (RADEON_DEBUG & RADEON_STATE)
        fprintf(stderr,"rrb is %p %d %dx%d\n", rrb, offset, rrb->base.Width, rrb->base.Height);

    r300_emit_cb_setup(r300, rrb->bo, offset, rrb->base.Format, rrb->cpp, rrb->pitch);

    if (r300->radeon.radeonScreen->driScreen->dri2.enabled) {
        emit_scissor(r300, rrb->base.Width, rrb->base.Height);
    }
}

static int check_zb_offset(struct gl_context *ctx, struct radeon_state_atom * atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	uint32_t dw;
	dw = 6;
	if (r300->radeon.radeonScreen->kernel_mm)
		dw += 2;
	return dw;
}

static void emit_zb_offset(struct gl_context *ctx, struct radeon_state_atom * atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	BATCH_LOCALS(&r300->radeon);
	struct radeon_renderbuffer *rrb;
	uint32_t zbpitch;
	uint32_t dw = atom->check(ctx, atom);

	rrb = radeon_get_depthbuffer(&r300->radeon);
	if (!rrb)
		return;

	zbpitch = (rrb->pitch / rrb->cpp);
	if (!r300->radeon.radeonScreen->kernel_mm) {
	    if (rrb->bo->flags & RADEON_BO_FLAGS_MACRO_TILE) {
	        zbpitch |= R300_DEPTHMACROTILE_ENABLE;
	   }
	    if (rrb->bo->flags & RADEON_BO_FLAGS_MICRO_TILE){
	        zbpitch |= R300_DEPTHMICROTILE_TILED;
	    }
	}

	BEGIN_BATCH_NO_AUTOSTATE(dw);
	OUT_BATCH_REGSEQ(R300_ZB_DEPTHOFFSET, 1);
	OUT_BATCH_RELOC(0, rrb->bo, 0, 0, RADEON_GEM_DOMAIN_VRAM, 0);
	OUT_BATCH_REGSEQ(R300_ZB_DEPTHPITCH, 1);
    	if (!r300->radeon.radeonScreen->kernel_mm)
	    OUT_BATCH(zbpitch);
	else
	    OUT_BATCH_RELOC(cbpitch, rrb->bo, zbpitch, 0, RADEON_GEM_DOMAIN_VRAM, 0);
	END_BATCH();
}

static void emit_zstencil_format(struct gl_context *ctx, struct radeon_state_atom * atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	BATCH_LOCALS(&r300->radeon);
	struct radeon_renderbuffer *rrb;
	uint32_t format = 0;

	rrb = radeon_get_depthbuffer(&r300->radeon);
	if (!rrb)
	  format = 0;
	else {
	  if (rrb->cpp == 2)
	    format = R300_DEPTHFORMAT_16BIT_INT_Z;
	  else if (rrb->cpp == 4)
	    format = R300_DEPTHFORMAT_24BIT_INT_Z_8BIT_STENCIL;
	}

	BEGIN_BATCH_NO_AUTOSTATE(atom->cmd_size);
	OUT_BATCH(atom->cmd[0]);
	atom->cmd[1] &= ~0xf;
	atom->cmd[1] |= format;
	OUT_BATCH(atom->cmd[1]);
	OUT_BATCH(atom->cmd[2]);
	OUT_BATCH(atom->cmd[3]);
	OUT_BATCH(atom->cmd[4]);
	END_BATCH();
}

static int check_never(struct gl_context *ctx, struct radeon_state_atom *atom)
{
   return 0;
}

static int check_always(struct gl_context *ctx, struct radeon_state_atom *atom)
{
	return atom->cmd_size;
}

static int check_variable(struct gl_context *ctx, struct radeon_state_atom *atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	int cnt;
	if (atom->cmd[0] == CP_PACKET2) {
		return 0;
	}
	cnt = packet0_count(r300, atom->cmd);
	return cnt ? cnt + 1 : 0;
}

static int check_r500fp(struct gl_context *ctx, struct radeon_state_atom *atom)
{
	int cnt;
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	int extra = 1;
	cnt = r500fp_count(atom->cmd);
	if (r300->radeon.radeonScreen->kernel_mm)
		extra = 3;

	return cnt ? (cnt * 6) + extra : 0;
}

static int check_r500fp_const(struct gl_context *ctx, struct radeon_state_atom *atom)
{
	int cnt;
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	int extra = 1;
	cnt = r500fp_count(atom->cmd);
	if (r300->radeon.radeonScreen->kernel_mm)
		extra = 3;

	cnt = r500fp_count(atom->cmd);
	return cnt ? (cnt * 4) + extra : 0;
}

#define ALLOC_STATE( ATOM, CHK, SZ, IDX )				\
   do {									\
      r300->hw.ATOM.cmd_size = (SZ);					\
      r300->hw.ATOM.cmd = (uint32_t*)CALLOC((SZ) * sizeof(uint32_t));	\
      r300->hw.ATOM.name = #ATOM;					\
      r300->hw.ATOM.idx = (IDX);					\
      r300->hw.ATOM.check = check_##CHK;				\
      r300->hw.ATOM.dirty = GL_FALSE;					\
      r300->radeon.hw.max_state_size += (SZ);					\
      insert_at_tail(&r300->radeon.hw.atomlist, &r300->hw.ATOM);		\
   } while (0)
/**
 * Allocate memory for the command buffer and initialize the state atom
 * list. Note that the initial hardware state is set by r300InitState().
 */
void r300InitCmdBuf(r300ContextPtr r300)
{
	int mtu;
	int has_tcl;
	int is_r500 = 0;

	has_tcl = r300->options.hw_tcl_enabled;

	if (r300->radeon.radeonScreen->chip_family >= CHIP_FAMILY_RV515)
		is_r500 = 1;

	r300->radeon.hw.max_state_size = 2 + 2;	/* reserve extra space for WAIT_IDLE and tex cache flush */

	mtu = r300->radeon.glCtx->Const.MaxTextureUnits;
	if (RADEON_DEBUG & RADEON_TEXTURE) {
		fprintf(stderr, "Using %d maximum texture units..\n", mtu);
	}

	/* Setup the atom linked list */
	make_empty_list(&r300->radeon.hw.atomlist);
	r300->radeon.hw.atomlist.name = "atom-list";

	/* Initialize state atoms */
	ALLOC_STATE(vpt, always, R300_VPT_CMDSIZE, 0);
	r300->hw.vpt.cmd[R300_VPT_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_SE_VPORT_XSCALE, 6);
	ALLOC_STATE(vap_cntl, always, R300_VAP_CNTL_SIZE, 0);
	r300->hw.vap_cntl.cmd[R300_VAP_CNTL_FLUSH] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_PVS_STATE_FLUSH_REG, 1);
	r300->hw.vap_cntl.cmd[R300_VAP_CNTL_FLUSH_1] = 0;
	r300->hw.vap_cntl.cmd[R300_VAP_CNTL_CMD] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_CNTL, 1);
	if (is_r500 && !r300->radeon.radeonScreen->kernel_mm) {
	    ALLOC_STATE(vap_index_offset, always, 2, 0);
	    r300->hw.vap_index_offset.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R500_VAP_INDEX_OFFSET, 1);
	    r300->hw.vap_index_offset.cmd[1] = 0;
	}
	ALLOC_STATE(vte, always, 3, 0);
	r300->hw.vte.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_SE_VTE_CNTL, 2);
	ALLOC_STATE(vap_vf_max_vtx_indx, always, 3, 0);
	r300->hw.vap_vf_max_vtx_indx.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_VF_MAX_VTX_INDX, 2);
	ALLOC_STATE(vap_cntl_status, always, 2, 0);
	r300->hw.vap_cntl_status.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_CNTL_STATUS, 1);
	ALLOC_STATE(vir[0], variable, R300_VIR_CMDSIZE, 0);
	r300->hw.vir[0].cmd[R300_VIR_CMD_0] =
	    cmdpacket0(r300->radeon.radeonScreen, R300_VAP_PROG_STREAM_CNTL_0, 1);
	ALLOC_STATE(vir[1], variable, R300_VIR_CMDSIZE, 1);
	r300->hw.vir[1].cmd[R300_VIR_CMD_0] =
	    cmdpacket0(r300->radeon.radeonScreen, R300_VAP_PROG_STREAM_CNTL_EXT_0, 1);
	ALLOC_STATE(vic, always, R300_VIC_CMDSIZE, 0);
	r300->hw.vic.cmd[R300_VIC_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_VTX_STATE_CNTL, 2);
	ALLOC_STATE(vap_psc_sgn_norm_cntl, always, 2, 0);
	r300->hw.vap_psc_sgn_norm_cntl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_PSC_SGN_NORM_CNTL, SGN_NORM_ZERO_CLAMP_MINUS_ONE);

	if (has_tcl) {
		ALLOC_STATE(vap_clip_cntl, always, 2, 0);
		r300->hw.vap_clip_cntl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_CLIP_CNTL, 1);
		ALLOC_STATE(vap_clip, always, 5, 0);
		r300->hw.vap_clip.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_GB_VERT_CLIP_ADJ, 4);
		ALLOC_STATE(vap_pvs_vtx_timeout_reg, always, 2, 0);
		r300->hw.vap_pvs_vtx_timeout_reg.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, VAP_PVS_VTX_TIMEOUT_REG, 1);
	}

	ALLOC_STATE(vof, always, R300_VOF_CMDSIZE, 0);
	r300->hw.vof.cmd[R300_VOF_CMD_0] =
	    cmdpacket0(r300->radeon.radeonScreen, R300_VAP_OUTPUT_VTX_FMT_0, 2);

	if (has_tcl) {
		ALLOC_STATE(pvs, always, R300_PVS_CMDSIZE, 0);
		r300->hw.pvs.cmd[R300_PVS_CMD_0] =
		    cmdpacket0(r300->radeon.radeonScreen, R300_VAP_PVS_CODE_CNTL_0, 3);
	}

	ALLOC_STATE(gb_enable, always, 2, 0);
	r300->hw.gb_enable.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GB_ENABLE, 1);
	if (!r300->radeon.radeonScreen->driScreen->dri2.enabled) {
		ALLOC_STATE(gb_misc, always, R300_GB_MISC_CMDSIZE, 0);
	} else {
		ALLOC_STATE(gb_misc, never, R300_GB_MISC_CMDSIZE, 0);
	}
	r300->hw.gb_misc.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GB_MSPOS0, 3);
	ALLOC_STATE(gb_misc2, always, R300_GB_MISC2_CMDSIZE, 0);
	r300->hw.gb_misc2.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, 0x401C, 2);
	ALLOC_STATE(txe, always, R300_TXE_CMDSIZE, 0);
	r300->hw.txe.cmd[R300_TXE_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_TX_ENABLE, 1);
	ALLOC_STATE(ga_point_s0, always, 5, 0);
	r300->hw.ga_point_s0.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_POINT_S0, 4);
	ALLOC_STATE(ga_triangle_stipple, always, 2, 0);
	r300->hw.ga_triangle_stipple.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_TRIANGLE_STIPPLE, 1);
	ALLOC_STATE(ps, always, R300_PS_CMDSIZE, 0);
	r300->hw.ps.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_POINT_SIZE, 1);
	ALLOC_STATE(ga_point_minmax, always, 4, 0);
	r300->hw.ga_point_minmax.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_POINT_MINMAX, 3);
	ALLOC_STATE(lcntl, always, 2, 0);
	r300->hw.lcntl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_LINE_CNTL, 1);
	ALLOC_STATE(ga_line_stipple, always, 4, 0);
	r300->hw.ga_line_stipple.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_LINE_STIPPLE_VALUE, 3);
        if (!r300->radeon.radeonScreen->driScreen->dri2.enabled) {
		ALLOC_STATE(shade, always, 2, 0);
        } else {
		ALLOC_STATE(shade, never, 2, 0);
        }
	r300->hw.shade.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_ENHANCE, 1);
	ALLOC_STATE(shade2, always, 4, 0);
	r300->hw.shade2.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, 0x4278, 3);
	ALLOC_STATE(polygon_mode, always, 4, 0);
	r300->hw.polygon_mode.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_POLY_MODE, 3);
	ALLOC_STATE(fogp, always, 3, 0);
	r300->hw.fogp.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_FOG_SCALE, 2);
	ALLOC_STATE(zbias_cntl, always, 2, 0);
	r300->hw.zbias_cntl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_SU_TEX_WRAP, 1);
	ALLOC_STATE(zbs, always, R300_ZBS_CMDSIZE, 0);
	r300->hw.zbs.cmd[R300_ZBS_CMD_0] =
	    cmdpacket0(r300->radeon.radeonScreen, R300_SU_POLY_OFFSET_FRONT_SCALE, 4);
	ALLOC_STATE(occlusion_cntl, always, 2, 0);
	r300->hw.occlusion_cntl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_SU_POLY_OFFSET_ENABLE, 1);
	ALLOC_STATE(cul, always, R300_CUL_CMDSIZE, 0);
	r300->hw.cul.cmd[R300_CUL_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_SU_CULL_MODE, 1);
	ALLOC_STATE(su_depth_scale, always, 3, 0);
	r300->hw.su_depth_scale.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_SU_DEPTH_SCALE, 2);
	ALLOC_STATE(rc, always, R300_RC_CMDSIZE, 0);
	r300->hw.rc.cmd[R300_RC_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_RS_COUNT, 2);
	if (is_r500) {
		ALLOC_STATE(ri, variable, R500_RI_CMDSIZE, 0);
		r300->hw.ri.cmd[R300_RI_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R500_RS_IP_0, 16);
		ALLOC_STATE(rr, variable, R300_RR_CMDSIZE, 0);
		r300->hw.rr.cmd[R300_RR_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R500_RS_INST_0, 1);
	} else {
		ALLOC_STATE(ri, variable, R300_RI_CMDSIZE, 0);
		r300->hw.ri.cmd[R300_RI_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_RS_IP_0, 8);
		ALLOC_STATE(rr, variable, R300_RR_CMDSIZE, 0);
		r300->hw.rr.cmd[R300_RR_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_RS_INST_0, 1);
	}
	ALLOC_STATE(sc_hyperz, always, 3, 0);
	r300->hw.sc_hyperz.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_SC_HYPERZ, 2);
	ALLOC_STATE(sc_screendoor, always, 2, 0);
	r300->hw.sc_screendoor.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_SC_SCREENDOOR, 1);
	ALLOC_STATE(us_out_fmt, always, 6, 0);
	r300->hw.us_out_fmt.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_US_OUT_FMT, 5);

	if (is_r500) {
		ALLOC_STATE(fp, always, R500_FP_CMDSIZE, 0);
		r300->hw.fp.cmd[R500_FP_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R500_US_CONFIG, 2);
		r300->hw.fp.cmd[R500_FP_CNTL] = R500_ZERO_TIMES_ANYTHING_EQUALS_ZERO;
		r300->hw.fp.cmd[R500_FP_CMD_1] = cmdpacket0(r300->radeon.radeonScreen, R500_US_CODE_ADDR, 3);
		r300->hw.fp.cmd[R500_FP_CMD_2] = cmdpacket0(r300->radeon.radeonScreen, R500_US_FC_CTRL, 1);
		r300->hw.fp.cmd[R500_FP_FC_CNTL] = 0; /* FIXME when we add flow control */

		ALLOC_STATE(r500fp, r500fp, R500_FPI_CMDSIZE, 0);
		r300->hw.r500fp.cmd[R300_FPI_CMD_0] =
			cmdr500fp(r300->radeon.radeonScreen, 0, 0, 0, 0);
		if (r300->radeon.radeonScreen->kernel_mm)
			r300->hw.r500fp.emit = emit_r500fp_atom;

		ALLOC_STATE(r500fp_const, r500fp_const, R500_FPP_CMDSIZE, 0);
		r300->hw.r500fp_const.cmd[R300_FPI_CMD_0] =
			cmdr500fp(r300->radeon.radeonScreen, 0, 0, 1, 0);
		if (r300->radeon.radeonScreen->kernel_mm)
			r300->hw.r500fp_const.emit = emit_r500fp_atom;
	} else {
		ALLOC_STATE(fp, always, R300_FP_CMDSIZE, 0);
		r300->hw.fp.cmd[R300_FP_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_US_CONFIG, 3);
		r300->hw.fp.cmd[R300_FP_CMD_1] = cmdpacket0(r300->radeon.radeonScreen, R300_US_CODE_ADDR_0, 4);

		ALLOC_STATE(fpt, variable, R300_FPT_CMDSIZE, 0);
		r300->hw.fpt.cmd[R300_FPT_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_US_TEX_INST_0, 0);

		ALLOC_STATE(fpi[0], variable, R300_FPI_CMDSIZE, 0);
		r300->hw.fpi[0].cmd[R300_FPI_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_US_ALU_RGB_INST_0, 1);
		ALLOC_STATE(fpi[1], variable, R300_FPI_CMDSIZE, 1);
		r300->hw.fpi[1].cmd[R300_FPI_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_US_ALU_RGB_ADDR_0, 1);
		ALLOC_STATE(fpi[2], variable, R300_FPI_CMDSIZE, 2);
		r300->hw.fpi[2].cmd[R300_FPI_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_US_ALU_ALPHA_INST_0, 1);
		ALLOC_STATE(fpi[3], variable, R300_FPI_CMDSIZE, 3);
		r300->hw.fpi[3].cmd[R300_FPI_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_US_ALU_ALPHA_ADDR_0, 1);
		ALLOC_STATE(fpp, variable, R300_FPP_CMDSIZE, 0);
		r300->hw.fpp.cmd[R300_FPP_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_PFS_PARAM_0_X, 0);
	}
	ALLOC_STATE(fogs, always, R300_FOGS_CMDSIZE, 0);
	r300->hw.fogs.cmd[R300_FOGS_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_FG_FOG_BLEND, 1);
	ALLOC_STATE(fogc, always, R300_FOGC_CMDSIZE, 0);
	r300->hw.fogc.cmd[R300_FOGC_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_FG_FOG_COLOR_R, 3);
	ALLOC_STATE(at, always, R300_AT_CMDSIZE, 0);
	r300->hw.at.cmd[R300_AT_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_FG_ALPHA_FUNC, 2);
	ALLOC_STATE(fg_depth_src, always, 2, 0);
	r300->hw.fg_depth_src.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_FG_DEPTH_SRC, 1);
	ALLOC_STATE(rb3d_cctl, always, 2, 0);
	r300->hw.rb3d_cctl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_RB3D_CCTL, 1);
	ALLOC_STATE(bld, always, R300_BLD_CMDSIZE, 0);
	r300->hw.bld.cmd[R300_BLD_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_RB3D_CBLEND, 2);
	ALLOC_STATE(cmk, always, R300_CMK_CMDSIZE, 0);
	r300->hw.cmk.cmd[R300_CMK_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, RB3D_COLOR_CHANNEL_MASK, 1);
	if (is_r500) {
		ALLOC_STATE(blend_color, always, 3, 0);
		r300->hw.blend_color.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R500_RB3D_CONSTANT_COLOR_AR, 2);
	} else {
		ALLOC_STATE(blend_color, always, 2, 0);
		r300->hw.blend_color.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_RB3D_BLEND_COLOR, 1);
	}
	ALLOC_STATE(rop, always, 2, 0);
	r300->hw.rop.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_RB3D_ROPCNTL, 1);
	ALLOC_STATE(cb, cb_offset, R300_CB_CMDSIZE, 0);
	r300->hw.cb.emit = &emit_cb_offset_atom;
	ALLOC_STATE(rb3d_dither_ctl, always, 10, 0);
	r300->hw.rb3d_dither_ctl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_RB3D_DITHER_CTL, 9);
	ALLOC_STATE(rb3d_aaresolve_ctl, always, 2, 0);
	r300->hw.rb3d_aaresolve_ctl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_RB3D_AARESOLVE_CTL, 1);
	if (r300->radeon.radeonScreen->chip_family >= CHIP_FAMILY_RV350) {
		ALLOC_STATE(rb3d_discard_src_pixel_lte_threshold, always, 3, 0);
	} else {
		ALLOC_STATE(rb3d_discard_src_pixel_lte_threshold, never, 3, 0);
	}
	r300->hw.rb3d_discard_src_pixel_lte_threshold.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R500_RB3D_DISCARD_SRC_PIXEL_LTE_THRESHOLD, 2);
	ALLOC_STATE(zs, always, R300_ZS_CMDSIZE, 0);
	r300->hw.zs.cmd[R300_ZS_CMD_0] =
	    cmdpacket0(r300->radeon.radeonScreen, R300_ZB_CNTL, 3);
	if (is_r500) {
		if (r300->radeon.radeonScreen->kernel_mm)
			ALLOC_STATE(zsb, always, R300_ZSB_CMDSIZE, 0);
		else
			ALLOC_STATE(zsb, never, R300_ZSB_CMDSIZE, 0);
		r300->hw.zsb.cmd[R300_ZSB_CMD_0] =
			cmdpacket0(r300->radeon.radeonScreen, R500_ZB_STENCILREFMASK_BF, 1);
	}

	ALLOC_STATE(zstencil_format, always, 5, 0);
	r300->hw.zstencil_format.cmd[0] =
	    cmdpacket0(r300->radeon.radeonScreen, R300_ZB_FORMAT, 4);
	r300->hw.zstencil_format.emit = emit_zstencil_format;

	ALLOC_STATE(zb, zb_offset, R300_ZB_CMDSIZE, 0);
	r300->hw.zb.emit = emit_zb_offset;
	ALLOC_STATE(zb_depthclearvalue, always, 2, 0);
	r300->hw.zb_depthclearvalue.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_ZB_DEPTHCLEARVALUE, 1);
	ALLOC_STATE(zb_zmask, always, 3, 0);
	r300->hw.zb_zmask.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_ZB_ZMASK_OFFSET, 2);
	ALLOC_STATE(zb_hiz_offset, always, 2, 0);
	r300->hw.zb_hiz_offset.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_ZB_HIZ_OFFSET, 1);
	ALLOC_STATE(zb_hiz_pitch, always, 2, 0);
	r300->hw.zb_hiz_pitch.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_ZB_HIZ_PITCH, 1);

	/* VPU only on TCL */
	if (has_tcl) {
		int i;
		ALLOC_STATE(vpi, vpu, R300_VPI_CMDSIZE, 0);
		r300->hw.vpi.cmd[0] =
			cmdvpu(r300->radeon.radeonScreen, R300_PVS_CODE_START, 0);
		if (r300->radeon.radeonScreen->kernel_mm)
			r300->hw.vpi.emit = emit_vpu_state;

		if (is_r500) {
			ALLOC_STATE(vpp, vpp, R300_VPP_CMDSIZE, 0);
			r300->hw.vpp.cmd[0] =
				cmdvpu(r300->radeon.radeonScreen, R500_PVS_CONST_START, 0);
			if (r300->radeon.radeonScreen->kernel_mm)
				r300->hw.vpp.emit = emit_vpp_state;

			ALLOC_STATE(vps, vpu, R300_VPS_CMDSIZE, 0);
			r300->hw.vps.cmd[0] =
				cmdvpu(r300->radeon.radeonScreen, R500_POINT_VPORT_SCALE_OFFSET, 1);
			if (r300->radeon.radeonScreen->kernel_mm)
				r300->hw.vps.emit = emit_vpu_state;

			for (i = 0; i < 6; i++) {
				ALLOC_STATE(vpucp[i], vpu, R300_VPUCP_CMDSIZE, 0);
				r300->hw.vpucp[i].cmd[0] =
					cmdvpu(r300->radeon.radeonScreen,
							R500_PVS_UCP_START + i, 1);
				if (r300->radeon.radeonScreen->kernel_mm)
					r300->hw.vpucp[i].emit = emit_vpu_state;
			}
		} else {
			ALLOC_STATE(vpp, vpp, R300_VPP_CMDSIZE, 0);
			r300->hw.vpp.cmd[0] =
				cmdvpu(r300->radeon.radeonScreen, R300_PVS_CONST_START, 0);
			if (r300->radeon.radeonScreen->kernel_mm)
				r300->hw.vpp.emit = emit_vpp_state;

			ALLOC_STATE(vps, vpu, R300_VPS_CMDSIZE, 0);
			r300->hw.vps.cmd[0] =
				cmdvpu(r300->radeon.radeonScreen, R300_POINT_VPORT_SCALE_OFFSET, 1);
			if (r300->radeon.radeonScreen->kernel_mm)
				r300->hw.vps.emit = emit_vpu_state;

			for (i = 0; i < 6; i++) {
				ALLOC_STATE(vpucp[i], vpu, R300_VPUCP_CMDSIZE, 0);
				r300->hw.vpucp[i].cmd[0] =
					cmdvpu(r300->radeon.radeonScreen,
							R300_PVS_UCP_START + i, 1);
				if (r300->radeon.radeonScreen->kernel_mm)
					r300->hw.vpucp[i].emit = emit_vpu_state;
			}
		}
	}

	/* Textures */
	ALLOC_STATE(tex.filter, variable, mtu + 1, 0);
	r300->hw.tex.filter.cmd[R300_TEX_CMD_0] =
	    cmdpacket0(r300->radeon.radeonScreen, R300_TX_FILTER0_0, 0);

	ALLOC_STATE(tex.filter_1, variable, mtu + 1, 0);
	r300->hw.tex.filter_1.cmd[R300_TEX_CMD_0] =
	    cmdpacket0(r300->radeon.radeonScreen, R300_TX_FILTER1_0, 0);

	ALLOC_STATE(tex.size, variable, mtu + 1, 0);
	r300->hw.tex.size.cmd[R300_TEX_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_TX_SIZE_0, 0);

	ALLOC_STATE(tex.format, variable, mtu + 1, 0);
	r300->hw.tex.format.cmd[R300_TEX_CMD_0] =
	    cmdpacket0(r300->radeon.radeonScreen, R300_TX_FORMAT_0, 0);

	ALLOC_STATE(tex.pitch, variable, mtu + 1, 0);
	r300->hw.tex.pitch.cmd[R300_TEX_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_TX_FORMAT2_0, 0);

	ALLOC_STATE(tex.offset, tex_offsets, 1, 0);
	r300->hw.tex.offset.cmd[R300_TEX_CMD_0] =
	    cmdpacket0(r300->radeon.radeonScreen, R300_TX_OFFSET_0, 0);
	r300->hw.tex.offset.emit = &emit_tex_offsets;

	ALLOC_STATE(tex.chroma_key, variable, mtu + 1, 0);
	r300->hw.tex.chroma_key.cmd[R300_TEX_CMD_0] =
	    cmdpacket0(r300->radeon.radeonScreen, R300_TX_CHROMA_KEY_0, 0);

	ALLOC_STATE(tex.border_color, variable, mtu + 1, 0);
	r300->hw.tex.border_color.cmd[R300_TEX_CMD_0] =
	    cmdpacket0(r300->radeon.radeonScreen, R300_TX_BORDER_COLOR_0, 0);

	radeon_init_query_stateobj(&r300->radeon, R300_QUERYOBJ_CMDSIZE);
	if (r300->radeon.radeonScreen->chip_family == CHIP_FAMILY_RV530) {
		r300->radeon.query.queryobj.cmd[R300_QUERYOBJ_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, RV530_FG_ZBREG_DEST, 1);
		r300->radeon.query.queryobj.cmd[R300_QUERYOBJ_DATA_0] = RV530_FG_ZBREG_DEST_PIPE_SELECT_ALL;
	} else {
		r300->radeon.query.queryobj.cmd[R300_QUERYOBJ_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_SU_REG_DEST, 1);
		r300->radeon.query.queryobj.cmd[R300_QUERYOBJ_DATA_0] = R300_RASTER_PIPE_SELECT_ALL;
	}
	r300->radeon.query.queryobj.cmd[R300_QUERYOBJ_CMD_1] = cmdpacket0(r300->radeon.radeonScreen, R300_ZB_ZPASS_DATA, 1);
	r300->radeon.query.queryobj.cmd[R300_QUERYOBJ_DATA_1] = 0;

	r300->radeon.hw.is_dirty = GL_TRUE;
	r300->radeon.hw.all_dirty = GL_TRUE;

	rcommonInitCmdBuf(&r300->radeon);
}
@


1.6
log
@Merge Mesa 7.10.3
@
text
@@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d72 1
a72 1
static int check_vpu(GLcontext *ctx, struct radeon_state_atom *atom)
d86 1
a86 1
static int check_vpp(GLcontext *ctx, struct radeon_state_atom *atom)
d117 1
a117 1
static void emit_vpu_state(GLcontext *ctx, struct radeon_state_atom * atom)
d129 1
a129 1
static void emit_vpp_state(GLcontext *ctx, struct radeon_state_atom * atom)
d161 1
a161 1
static void emit_r500fp_atom(GLcontext *ctx, struct radeon_state_atom * atom)
d182 1
a182 1
static int check_tex_offsets(GLcontext *ctx, struct radeon_state_atom * atom)
d203 1
a203 1
static void emit_tex_offsets(GLcontext *ctx, struct radeon_state_atom * atom)
d252 1
a252 1
void r300_emit_scissor(GLcontext *ctx)
d290 1
a290 1
static int check_cb_offset(GLcontext *ctx, struct radeon_state_atom * atom)
d363 6
a369 3
            assert(_mesa_little_endian());
            cbpitch |= R300_COLOR_FORMAT_RGB565;
            break;
a370 1
            assert(!_mesa_little_endian());
a373 3
            assert(_mesa_little_endian());
            cbpitch |= R300_COLOR_FORMAT_ARGB4444;
            break;
a374 1
            assert(!_mesa_little_endian());
d377 1
d379 1
a379 1
            assert(_mesa_little_endian());
d382 9
a390 3
        case MESA_FORMAT_ARGB1555_REV:
            assert(!_mesa_little_endian());
            cbpitch |= R300_COLOR_FORMAT_ARGB1555;
d393 1
a393 5
            if (cpp == 4) {
                cbpitch |= R300_COLOR_FORMAT_ARGB8888;
            } else {
                _mesa_problem(r300->radeon.glCtx, "unexpected format in emit_cb_offset()");;
            }
d414 1
a414 1
static void emit_cb_offset_atom(GLcontext *ctx, struct radeon_state_atom * atom)
d436 1
a436 1
static int check_zb_offset(GLcontext *ctx, struct radeon_state_atom * atom)
d446 1
a446 1
static void emit_zb_offset(GLcontext *ctx, struct radeon_state_atom * atom)
d479 1
a479 1
static void emit_zstencil_format(GLcontext *ctx, struct radeon_state_atom * atom)
d507 1
a507 1
static int check_never(GLcontext *ctx, struct radeon_state_atom *atom)
d512 1
a512 1
static int check_always(GLcontext *ctx, struct radeon_state_atom *atom)
d517 1
a517 1
static int check_variable(GLcontext *ctx, struct radeon_state_atom *atom)
d528 1
a528 1
static int check_r500fp(GLcontext *ctx, struct radeon_state_atom *atom)
d540 1
a540 1
static int check_r500fp_const(GLcontext *ctx, struct radeon_state_atom *atom)
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a41 1
#include "swrast/swrast.h"
a45 1
#include "radeon_ioctl.h"
a46 2
#include "r300_ioctl.h"
#include "radeon_reg.h"
d50 3
a52 1
#include "r300_state.h"
d54 17
a70 2
// Set this to 1 for extremely verbose debugging of command buffers
#define DEBUG_CMDBUF		0
d72 1
a72 4
/**
 * Send the current command buffer via ioctl to the hardware.
 */
int r300FlushCmdBufLocked(r300ContextPtr r300, const char *caller)
d74 4
a77 4
	int ret;
	int i;
	drm_radeon_cmd_buffer_t cmd;
	int start;
d79 2
a80 26
	if (r300->radeon.lost_context) {
		start = 0;
		r300->radeon.lost_context = GL_FALSE;
	} else
		start = r300->cmdbuf.count_reemit;

	if (RADEON_DEBUG & DEBUG_IOCTL) {
		fprintf(stderr, "%s from %s - %i cliprects\n",
			__FUNCTION__, caller, r300->radeon.numClipRects);

		if (DEBUG_CMDBUF && RADEON_DEBUG & DEBUG_VERBOSE)
			for (i = start; i < r300->cmdbuf.count_used; ++i)
				fprintf(stderr, "%d: %08x\n", i,
					r300->cmdbuf.cmd_buf[i]);
	}

	cmd.buf = (char *)(r300->cmdbuf.cmd_buf + start);
	cmd.bufsz = (r300->cmdbuf.count_used - start) * 4;

	if (r300->radeon.state.scissor.enabled) {
		cmd.nbox = r300->radeon.state.scissor.numClipRects;
		cmd.boxes =
		    (drm_clip_rect_t *) r300->radeon.state.scissor.pClipRects;
	} else {
		cmd.nbox = r300->radeon.numClipRects;
		cmd.boxes = (drm_clip_rect_t *) r300->radeon.pClipRects;
d83 26
a108 2
	ret = drmCommandWrite(r300->radeon.dri.fd,
			      DRM_RADEON_CMDBUF, &cmd, sizeof(cmd));
d110 12
a121 5
	if (RADEON_DEBUG & DEBUG_SYNC) {
		fprintf(stderr, "Syncing in %s (from %s)\n\n",
			__FUNCTION__, caller);
		radeonWaitForIdleLocked(&r300->radeon);
	}
d123 2
a124 3
	r300->dma.nr_released_bufs = 0;
	r300->cmdbuf.count_used = 0;
	r300->cmdbuf.count_reemit = 0;
d126 1
a126 1
	return ret;
d129 1
a129 1
int r300FlushCmdBuf(r300ContextPtr r300, const char *caller)
d131 3
a133 1
	int ret;
d135 2
a136 1
	LOCK_HARDWARE(&r300->radeon);
d138 2
a139 1
	ret = r300FlushCmdBufLocked(r300, caller);
d141 8
a148 1
	UNLOCK_HARDWARE(&r300->radeon);
d150 2
a151 4
	if (ret) {
		fprintf(stderr, "drmRadeonCmdBuffer: %d\n", ret);
		_mesa_exit(ret);
	}
d153 6
a158 1
	return ret;
d161 1
a161 1
static void r300PrintStateAtom(r300ContextPtr r300, struct r300_state_atom *state)
d163 15
a177 2
	int i;
	int dwords = (*state->check) (r300, state);
d179 2
a180 2
	fprintf(stderr, "  emit %s %d/%d\n", state->name, dwords,
		state->cmd_size);
d182 17
a198 5
	if (RADEON_DEBUG & DEBUG_VERBOSE) {
		for (i = 0; i < dwords; i++) {
			fprintf(stderr, "      %s[%d]: %08x\n",
				state->name, i, state->cmd[i]);
		}
d200 1
d203 1
a203 7
/**
 * Emit all atoms with a dirty field equal to dirty.
 *
 * The caller must have ensured that there is enough space in the command
 * buffer.
 */
static INLINE void r300EmitAtoms(r300ContextPtr r300, GLboolean dirty)
d205 26
a230 33
	struct r300_state_atom *atom;
	uint32_t *dest;
	int dwords;

	dest = r300->cmdbuf.cmd_buf + r300->cmdbuf.count_used;

	/* Emit WAIT */
	*dest = cmdwait(R300_WAIT_3D | R300_WAIT_3D_CLEAN);
	dest++;
	r300->cmdbuf.count_used++;

	/* Emit cache flush */
	*dest = cmdpacket0(R300_TX_INVALTAGS, 1);
	dest++;
	r300->cmdbuf.count_used++;

	*dest = R300_TX_FLUSH;
	dest++;
	r300->cmdbuf.count_used++;

	/* Emit END3D */
	*dest = cmdpacify();
	dest++;
	r300->cmdbuf.count_used++;

	/* Emit actual atoms */

	foreach(atom, &r300->hw.atomlist) {
		if ((atom->dirty || r300->hw.all_dirty) == dirty) {
			dwords = (*atom->check) (r300, atom);
			if (dwords) {
				if (DEBUG_CMDBUF && RADEON_DEBUG & DEBUG_STATE) {
					r300PrintStateAtom(r300, atom);
d232 13
a244 4
				memcpy(dest, atom->cmd, dwords * 4);
				dest += dwords;
				r300->cmdbuf.count_used += dwords;
				atom->dirty = GL_FALSE;
d246 1
a246 4
				if (DEBUG_CMDBUF && RADEON_DEBUG & DEBUG_STATE) {
					fprintf(stderr, "  skip state %s\n",
						atom->name);
				}
d252 1
a252 7
/**
 * Copy dirty hardware state atoms into the command buffer.
 *
 * We also copy out clean state if we're at the start of a buffer. That makes
 * it easy to recover from lost contexts.
 */
void r300EmitState(r300ContextPtr r300)
d254 11
a264 5
	if (RADEON_DEBUG & (DEBUG_STATE | DEBUG_PRIMS))
		fprintf(stderr, "%s\n", __FUNCTION__);

	if (r300->cmdbuf.count_used && !r300->hw.is_dirty
	    && !r300->hw.all_dirty)
a265 13

	/* To avoid going across the entire set of states multiple times, just check
	 * for enough space for the case of emitting all state, and inline the
	 * r300AllocCmdBuf code here without all the checks.
	 */
	r300EnsureCmdBufSpace(r300, r300->hw.max_state_size, __FUNCTION__);

	if (!r300->cmdbuf.count_used) {
		if (RADEON_DEBUG & DEBUG_STATE)
			fprintf(stderr, "Begin reemit state\n");

		r300EmitAtoms(r300, GL_FALSE);
		r300->cmdbuf.count_reemit = r300->cmdbuf.count_used;
d267 185
d453 3
a455 2
	if (RADEON_DEBUG & DEBUG_STATE)
		fprintf(stderr, "Begin dirty state\n");
d457 48
a504 1
	r300EmitAtoms(r300, GL_TRUE);
d506 3
a508 4
	assert(r300->cmdbuf.count_used < r300->cmdbuf.size);

	r300->hw.is_dirty = GL_FALSE;
	r300->hw.all_dirty = GL_FALSE;
d511 1
a511 5
#define packet0_count(ptr) (((drm_r300_cmd_header_t*)(ptr))->packet0.count)
#define vpu_count(ptr) (((drm_r300_cmd_header_t*)(ptr))->vpu.count)
#define r500fp_count(ptr) (((drm_r300_cmd_header_t*)(ptr))->r500fp.count)

static int check_always(r300ContextPtr r300, struct r300_state_atom *atom)
d516 1
a516 1
static int check_variable(r300ContextPtr r300, struct r300_state_atom *atom)
d518 1
d520 4
a523 1
	cnt = packet0_count(atom->cmd);
d527 1
a527 1
static int check_vpu(r300ContextPtr r300, struct r300_state_atom *atom)
d530 7
a536 2
	cnt = vpu_count(atom->cmd);
	return cnt ? (cnt * 4) + 1 : 0;
d539 1
a539 1
static int check_r500fp(r300ContextPtr r300, struct r300_state_atom *atom)
d542 2
d545 2
a546 2
	return cnt ? (cnt * 6) + 1 : 0;
}
a547 3
static int check_r500fp_const(r300ContextPtr r300, struct r300_state_atom *atom)
{
	int cnt;
d549 1
a549 1
	return cnt ? (cnt * 4) + 1 : 0;
d560 2
a561 2
      r300->hw.max_state_size += (SZ);					\
      insert_at_tail(&r300->hw.atomlist, &r300->hw.ATOM);		\
d569 2
a570 2
	int size, mtu;
	int has_tcl = 1;
a571 1
	int i;
d573 1
a573 2
	if (!(r300->radeon.radeonScreen->chip_flags & RADEON_CHIPSET_TCL))
		has_tcl = 0;
d578 1
a578 1
	r300->hw.max_state_size = 2 + 2;	/* reserve extra space for WAIT_IDLE and tex cache flush */
d581 1
a581 1
	if (RADEON_DEBUG & DEBUG_TEXTURE) {
d586 2
a587 2
	make_empty_list(&r300->hw.atomlist);
	r300->hw.atomlist.name = "atom-list";
d591 1
a591 1
	r300->hw.vpt.cmd[R300_VPT_CMD_0] = cmdpacket0(R300_SE_VPORT_XSCALE, 6);
d593 1
a593 1
	r300->hw.vap_cntl.cmd[R300_VAP_CNTL_FLUSH] = cmdpacket0(R300_VAP_PVS_STATE_FLUSH_REG, 1);
d595 2
a596 2
	r300->hw.vap_cntl.cmd[R300_VAP_CNTL_CMD] = cmdpacket0(R300_VAP_CNTL, 1);
	if (is_r500) {
d598 1
a598 1
	    r300->hw.vap_index_offset.cmd[0] = cmdpacket0(R500_VAP_INDEX_OFFSET, 1);
d602 1
a602 1
	r300->hw.vte.cmd[0] = cmdpacket0(R300_SE_VTE_CNTL, 2);
d604 1
a604 1
	r300->hw.vap_vf_max_vtx_indx.cmd[0] = cmdpacket0(R300_VAP_VF_MAX_VTX_INDX, 2);
d606 1
a606 1
	r300->hw.vap_cntl_status.cmd[0] = cmdpacket0(R300_VAP_CNTL_STATUS, 1);
d609 1
a609 1
	    cmdpacket0(R300_VAP_PROG_STREAM_CNTL_0, 1);
d612 1
a612 1
	    cmdpacket0(R300_VAP_PROG_STREAM_CNTL_EXT_0, 1);
d614 1
a614 1
	r300->hw.vic.cmd[R300_VIC_CMD_0] = cmdpacket0(R300_VAP_VTX_STATE_CNTL, 2);
d616 1
a616 1
	r300->hw.vap_psc_sgn_norm_cntl.cmd[0] = cmdpacket0(R300_VAP_PSC_SGN_NORM_CNTL, SGN_NORM_ZERO_CLAMP_MINUS_ONE);
d620 1
a620 1
		r300->hw.vap_clip_cntl.cmd[0] = cmdpacket0(R300_VAP_CLIP_CNTL, 1);
d622 1
a622 1
		r300->hw.vap_clip.cmd[0] = cmdpacket0(R300_VAP_GB_VERT_CLIP_ADJ, 4);
d624 1
a624 1
		r300->hw.vap_pvs_vtx_timeout_reg.cmd[0] = cmdpacket0(VAP_PVS_VTX_TIMEOUT_REG, 1);
d629 1
a629 1
	    cmdpacket0(R300_VAP_OUTPUT_VTX_FMT_0, 2);
d634 1
a634 1
		    cmdpacket0(R300_VAP_PVS_CODE_CNTL_0, 3);
d638 9
a646 3
	r300->hw.gb_enable.cmd[0] = cmdpacket0(R300_GB_ENABLE, 1);
	ALLOC_STATE(gb_misc, always, R300_GB_MISC_CMDSIZE, 0);
	r300->hw.gb_misc.cmd[0] = cmdpacket0(R300_GB_MSPOS0, 5);
d648 1
a648 1
	r300->hw.txe.cmd[R300_TXE_CMD_0] = cmdpacket0(R300_TX_ENABLE, 1);
d650 1
a650 1
	r300->hw.ga_point_s0.cmd[0] = cmdpacket0(R300_GA_POINT_S0, 4);
d652 1
a652 1
	r300->hw.ga_triangle_stipple.cmd[0] = cmdpacket0(R300_GA_TRIANGLE_STIPPLE, 1);
d654 1
a654 1
	r300->hw.ps.cmd[0] = cmdpacket0(R300_GA_POINT_SIZE, 1);
d656 1
a656 1
	r300->hw.ga_point_minmax.cmd[0] = cmdpacket0(R300_GA_POINT_MINMAX, 3);
d658 1
a658 1
	r300->hw.lcntl.cmd[0] = cmdpacket0(R300_GA_LINE_CNTL, 1);
d660 9
a668 3
	r300->hw.ga_line_stipple.cmd[0] = cmdpacket0(R300_GA_LINE_STIPPLE_VALUE, 3);
	ALLOC_STATE(shade, always, 5, 0);
	r300->hw.shade.cmd[0] = cmdpacket0(R300_GA_ENHANCE, 4);
d670 1
a670 1
	r300->hw.polygon_mode.cmd[0] = cmdpacket0(R300_GA_POLY_MODE, 3);
d672 1
a672 1
	r300->hw.fogp.cmd[0] = cmdpacket0(R300_GA_FOG_SCALE, 2);
d674 1
a674 1
	r300->hw.zbias_cntl.cmd[0] = cmdpacket0(R300_SU_TEX_WRAP, 1);
d677 1
a677 1
	    cmdpacket0(R300_SU_POLY_OFFSET_FRONT_SCALE, 4);
d679 1
a679 1
	r300->hw.occlusion_cntl.cmd[0] = cmdpacket0(R300_SU_POLY_OFFSET_ENABLE, 1);
d681 1
a681 1
	r300->hw.cul.cmd[R300_CUL_CMD_0] = cmdpacket0(R300_SU_CULL_MODE, 1);
d683 1
a683 1
	r300->hw.su_depth_scale.cmd[0] = cmdpacket0(R300_SU_DEPTH_SCALE, 2);
d685 1
a685 1
	r300->hw.rc.cmd[R300_RC_CMD_0] = cmdpacket0(R300_RS_COUNT, 2);
d687 2
a688 9
		ALLOC_STATE(ri, always, R500_RI_CMDSIZE, 0);
		r300->hw.ri.cmd[R300_RI_CMD_0] = cmdpacket0(R500_RS_IP_0, 16);
		for (i = 0; i < 8; i++) {
			r300->hw.ri.cmd[R300_RI_CMD_0 + i +1] =
			  (R500_RS_IP_PTR_K0 << R500_RS_IP_TEX_PTR_S_SHIFT) |
                          (R500_RS_IP_PTR_K0 << R500_RS_IP_TEX_PTR_T_SHIFT) |
                          (R500_RS_IP_PTR_K0 << R500_RS_IP_TEX_PTR_R_SHIFT) |
                          (R500_RS_IP_PTR_K1 << R500_RS_IP_TEX_PTR_Q_SHIFT);
		}
d690 1
a690 1
		r300->hw.rr.cmd[R300_RR_CMD_0] = cmdpacket0(R500_RS_INST_0, 1);
d692 2
a693 2
		ALLOC_STATE(ri, always, R300_RI_CMDSIZE, 0);
		r300->hw.ri.cmd[R300_RI_CMD_0] = cmdpacket0(R300_RS_IP_0, 8);
d695 1
a695 1
		r300->hw.rr.cmd[R300_RR_CMD_0] = cmdpacket0(R300_RS_INST_0, 1);
d698 1
a698 1
	r300->hw.sc_hyperz.cmd[0] = cmdpacket0(R300_SC_HYPERZ, 2);
d700 1
a700 1
	r300->hw.sc_screendoor.cmd[0] = cmdpacket0(R300_SC_SCREENDOOR, 1);
d702 1
a702 1
	r300->hw.us_out_fmt.cmd[0] = cmdpacket0(R300_US_OUT_FMT, 5);
d706 1
a706 1
		r300->hw.fp.cmd[R500_FP_CMD_0] = cmdpacket0(R500_US_CONFIG, 2);
d708 2
a709 2
		r300->hw.fp.cmd[R500_FP_CMD_1] = cmdpacket0(R500_US_CODE_ADDR, 3);
		r300->hw.fp.cmd[R500_FP_CMD_2] = cmdpacket0(R500_US_FC_CTRL, 1);
d713 5
a717 1
		r300->hw.r500fp.cmd[R300_FPI_CMD_0] = cmdr500fp(0, 0, 0, 0);
d719 4
a722 1
		r300->hw.r500fp_const.cmd[R300_FPI_CMD_0] = cmdr500fp(0, 0, 1, 0);
d725 3
a727 2
		r300->hw.fp.cmd[R300_FP_CMD_0] = cmdpacket0(R300_US_CONFIG, 3);
		r300->hw.fp.cmd[R300_FP_CMD_1] = cmdpacket0(R300_US_CODE_ADDR_0, 4);
d729 1
a729 1
		r300->hw.fpt.cmd[R300_FPT_CMD_0] = cmdpacket0(R300_US_TEX_INST_0, 0);
d732 1
a732 1
		r300->hw.fpi[0].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_US_ALU_RGB_INST_0, 1);
d734 1
a734 1
		r300->hw.fpi[1].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_US_ALU_RGB_ADDR_0, 1);
d736 1
a736 1
		r300->hw.fpi[2].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_US_ALU_ALPHA_INST_0, 1);
d738 1
a738 1
		r300->hw.fpi[3].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_US_ALU_ALPHA_ADDR_0, 1);
d740 1
a740 1
		r300->hw.fpp.cmd[R300_FPP_CMD_0] = cmdpacket0(R300_PFS_PARAM_0_X, 0);
d743 1
a743 1
	r300->hw.fogs.cmd[R300_FOGS_CMD_0] = cmdpacket0(R300_FG_FOG_BLEND, 1);
d745 1
a745 1
	r300->hw.fogc.cmd[R300_FOGC_CMD_0] = cmdpacket0(R300_FG_FOG_COLOR_R, 3);
d747 1
a747 1
	r300->hw.at.cmd[R300_AT_CMD_0] = cmdpacket0(R300_FG_ALPHA_FUNC, 2);
d749 1
a749 1
	r300->hw.fg_depth_src.cmd[0] = cmdpacket0(R300_FG_DEPTH_SRC, 1);
d751 1
a751 1
	r300->hw.rb3d_cctl.cmd[0] = cmdpacket0(R300_RB3D_CCTL, 1);
d753 1
a753 1
	r300->hw.bld.cmd[R300_BLD_CMD_0] = cmdpacket0(R300_RB3D_CBLEND, 2);
d755 1
a755 1
	r300->hw.cmk.cmd[R300_CMK_CMD_0] = cmdpacket0(RB3D_COLOR_CHANNEL_MASK, 1);
d758 1
a758 1
		r300->hw.blend_color.cmd[0] = cmdpacket0(R500_RB3D_CONSTANT_COLOR_AR, 2);
d761 1
a761 1
		r300->hw.blend_color.cmd[0] = cmdpacket0(R300_RB3D_BLEND_COLOR, 1);
d764 3
a766 4
	r300->hw.rop.cmd[0] = cmdpacket0(R300_RB3D_ROPCNTL, 1);
	ALLOC_STATE(cb, always, R300_CB_CMDSIZE, 0);
	r300->hw.cb.cmd[R300_CB_CMD_0] = cmdpacket0(R300_RB3D_COLOROFFSET0, 1);
	r300->hw.cb.cmd[R300_CB_CMD_1] = cmdpacket0(R300_RB3D_COLORPITCH0, 1);
d768 1
a768 1
	r300->hw.rb3d_dither_ctl.cmd[0] = cmdpacket0(R300_RB3D_DITHER_CTL, 9);
d770 7
a776 3
	r300->hw.rb3d_aaresolve_ctl.cmd[0] = cmdpacket0(R300_RB3D_AARESOLVE_CTL, 1);
	ALLOC_STATE(rb3d_discard_src_pixel_lte_threshold, always, 3, 0);
	r300->hw.rb3d_discard_src_pixel_lte_threshold.cmd[0] = cmdpacket0(R500_RB3D_DISCARD_SRC_PIXEL_LTE_THRESHOLD, 2);
d779 10
a788 1
	    cmdpacket0(R300_ZB_CNTL, 3);
d791 5
a795 3
	    cmdpacket0(R300_ZB_FORMAT, 4);
	ALLOC_STATE(zb, always, R300_ZB_CMDSIZE, 0);
	r300->hw.zb.cmd[R300_ZB_CMD_0] = cmdpacket0(R300_ZB_DEPTHOFFSET, 2);
d797 3
a799 3
	r300->hw.zb_depthclearvalue.cmd[0] = cmdpacket0(R300_ZB_DEPTHCLEARVALUE, 1);
	ALLOC_STATE(unk4F30, always, 3, 0);
	r300->hw.unk4F30.cmd[0] = cmdpacket0(0x4F30, 2);
d801 1
a801 1
	r300->hw.zb_hiz_offset.cmd[0] = cmdpacket0(R300_ZB_HIZ_OFFSET, 1);
d803 1
a803 1
	r300->hw.zb_hiz_pitch.cmd[0] = cmdpacket0(R300_ZB_HIZ_PITCH, 1);
d807 1
a807 1
   	        int i;
d809 4
a812 2
		r300->hw.vpi.cmd[R300_VPI_CMD_0] =
		    cmdvpu(R300_PVS_CODE_START, 0);
d815 11
a825 7
		    ALLOC_STATE(vpp, vpu, R300_VPP_CMDSIZE, 0);
		    r300->hw.vpp.cmd[R300_VPP_CMD_0] =
			cmdvpu(R500_PVS_CONST_START, 0);

		    ALLOC_STATE(vps, vpu, R300_VPS_CMDSIZE, 0);
		    r300->hw.vps.cmd[R300_VPS_CMD_0] =
			cmdvpu(R500_POINT_VPORT_SCALE_OFFSET, 1);
d829 5
a833 2
				r300->hw.vpucp[i].cmd[R300_VPUCP_CMD_0] =
					cmdvpu(R500_PVS_UCP_START + i, 1);
d836 11
a846 7
		    ALLOC_STATE(vpp, vpu, R300_VPP_CMDSIZE, 0);
		    r300->hw.vpp.cmd[R300_VPP_CMD_0] =
			cmdvpu(R300_PVS_CONST_START, 0);

		    ALLOC_STATE(vps, vpu, R300_VPS_CMDSIZE, 0);
		    r300->hw.vps.cmd[R300_VPS_CMD_0] =
			cmdvpu(R300_POINT_VPORT_SCALE_OFFSET, 1);
d850 5
a854 2
				r300->hw.vpucp[i].cmd[R300_VPUCP_CMD_0] =
					cmdvpu(R300_PVS_UCP_START + i, 1);
d862 1
a862 1
	    cmdpacket0(R300_TX_FILTER0_0, 0);
d866 1
a866 1
	    cmdpacket0(R300_TX_FILTER1_0, 0);
d869 1
a869 1
	r300->hw.tex.size.cmd[R300_TEX_CMD_0] = cmdpacket0(R300_TX_SIZE_0, 0);
d873 1
a873 1
	    cmdpacket0(R300_TX_FORMAT_0, 0);
d876 1
a876 1
	r300->hw.tex.pitch.cmd[R300_TEX_CMD_0] = cmdpacket0(R300_TX_FORMAT2_0, 0);
d878 1
a878 1
	ALLOC_STATE(tex.offset, variable, mtu + 1, 0);
d880 2
a881 1
	    cmdpacket0(R300_TX_OFFSET_0, 0);
d885 1
a885 1
	    cmdpacket0(R300_TX_CHROMA_KEY_0, 0);
d889 1
a889 1
	    cmdpacket0(R300_TX_BORDER_COLOR_0, 0);
d891 7
a897 40
	r300->hw.is_dirty = GL_TRUE;
	r300->hw.all_dirty = GL_TRUE;

	/* Initialize command buffer */
	size =
	    256 * driQueryOptioni(&r300->radeon.optionCache,
				  "command_buffer_size");
	if (size < 2 * r300->hw.max_state_size) {
		size = 2 * r300->hw.max_state_size + 65535;
	}
	if (size > 64 * 256)
		size = 64 * 256;

	if (RADEON_DEBUG & (DEBUG_IOCTL | DEBUG_DMA)) {
		fprintf(stderr, "sizeof(drm_r300_cmd_header_t)=%zd\n",
			sizeof(drm_r300_cmd_header_t));
		fprintf(stderr, "sizeof(drm_radeon_cmd_buffer_t)=%zd\n",
			sizeof(drm_radeon_cmd_buffer_t));
		fprintf(stderr,
			"Allocating %d bytes command buffer (max state is %d bytes)\n",
			size * 4, r300->hw.max_state_size * 4);
	}

	r300->cmdbuf.size = size;
	r300->cmdbuf.cmd_buf = (uint32_t *) CALLOC(size * 4);
	r300->cmdbuf.count_used = 0;
	r300->cmdbuf.count_reemit = 0;
}

/**
 * Destroy the command buffer and state atoms.
 */
void r300DestroyCmdBuf(r300ContextPtr r300)
{
	struct r300_state_atom *atom;

	FREE(r300->cmdbuf.cmd_buf);

	foreach(atom, &r300->hw.atomlist) {
		FREE(atom->cmd);
d899 2
a900 50
}

void r300EmitBlit(r300ContextPtr rmesa,
		  GLuint color_fmt,
		  GLuint src_pitch,
		  GLuint src_offset,
		  GLuint dst_pitch,
		  GLuint dst_offset,
		  GLint srcx, GLint srcy,
		  GLint dstx, GLint dsty, GLuint w, GLuint h)
{
	drm_r300_cmd_header_t *cmd;

	if (RADEON_DEBUG & DEBUG_IOCTL)
		fprintf(stderr,
			"%s src %x/%x %d,%d dst: %x/%x %d,%d sz: %dx%d\n",
			__FUNCTION__, src_pitch, src_offset, srcx, srcy,
			dst_pitch, dst_offset, dstx, dsty, w, h);

	assert((src_pitch & 63) == 0);
	assert((dst_pitch & 63) == 0);
	assert((src_offset & 1023) == 0);
	assert((dst_offset & 1023) == 0);
	assert(w < (1 << 16));
	assert(h < (1 << 16));

	cmd = (drm_r300_cmd_header_t *) r300AllocCmdBuf(rmesa, 8, __FUNCTION__);

	cmd[0].header.cmd_type = R300_CMD_PACKET3;
	cmd[0].header.pad0 = R300_CMD_PACKET3_RAW;
	cmd[1].u = R300_CP_CMD_BITBLT_MULTI | (5 << 16);
	cmd[2].u = (RADEON_GMC_SRC_PITCH_OFFSET_CNTL |
		    RADEON_GMC_DST_PITCH_OFFSET_CNTL |
		    RADEON_GMC_BRUSH_NONE |
		    (color_fmt << 8) |
		    RADEON_GMC_SRC_DATATYPE_COLOR |
		    RADEON_ROP3_S |
		    RADEON_DP_SRC_SOURCE_MEMORY |
		    RADEON_GMC_CLR_CMP_CNTL_DIS | RADEON_GMC_WR_MSK_DIS);

	cmd[3].u = ((src_pitch / 64) << 22) | (src_offset >> 10);
	cmd[4].u = ((dst_pitch / 64) << 22) | (dst_offset >> 10);
	cmd[5].u = (srcx << 16) | srcy;
	cmd[6].u = (dstx << 16) | dsty;	/* dst */
	cmd[7].u = (w << 16) | h;
}

void r300EmitWait(r300ContextPtr rmesa, GLuint flags)
{
	drm_r300_cmd_header_t *cmd;
d902 2
a903 1
	assert(!(flags & ~(R300_WAIT_2D | R300_WAIT_3D)));
d905 1
a905 4
	cmd = (drm_r300_cmd_header_t *) r300AllocCmdBuf(rmesa, 1, __FUNCTION__);
	cmd[0].u = 0;
	cmd[0].wait.cmd_type = R300_CMD_WAIT;
	cmd[0].wait.flags = flags;
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d36 6
a41 5
#include "glheader.h"
#include "state.h"
#include "imports.h"
#include "macros.h"
#include "context.h"
a42 1
#include "simple_list.h"
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d136 1
a136 1
	fprintf(stderr, "  emit %s/%d/%d\n", state->name, dwords,
d139 3
a141 3
	if (RADEON_DEBUG & DEBUG_VERBOSE)
		for (i = 0; i < dwords; i++)
			fprintf(stderr, "      %s[%d]: %08X\n",
d143 2
d153 1
a153 1
static __inline__ void r300EmitAtoms(r300ContextPtr r300, GLboolean dirty)
d157 1
a160 15
	if (DEBUG_CMDBUF && RADEON_DEBUG & DEBUG_STATE) {
		foreach(atom, &r300->hw.atomlist) {
			if ((atom->dirty || r300->hw.all_dirty) == dirty) {
				int dwords = (*atom->check) (r300, atom);

				if (dwords)
					r300PrintStateAtom(r300, atom);
				else
					fprintf(stderr,
						"  skip state %s\n",
						atom->name);
			}
		}
	}

d167 1
a167 1
	*dest = cmdpacket0(R300_TX_CNTL, 1);
d184 1
a184 2
			int dwords = (*atom->check) (r300, atom);

d186 3
d193 5
d243 14
a256 6
#define CHECK( NM, COUNT )				\
static int check_##NM( r300ContextPtr r300, 		\
			struct r300_state_atom* atom )	\
{							\
   (void) atom;	(void) r300;				\
   return (COUNT);					\
d259 20
a278 2
#define packet0_count(ptr) (((drm_r300_cmd_header_t*)(ptr))->packet0.count)
#define vpu_count(ptr) (((drm_r300_cmd_header_t*)(ptr))->vpu.count)
a279 5
CHECK(always, atom->cmd_size)
    CHECK(variable, packet0_count(atom->cmd) ? (1 + packet0_count(atom->cmd)) : 0)
    CHECK(vpu, vpu_count(atom->cmd) ? (1 + vpu_count(atom->cmd) * 4) : 0)
#undef packet0_count
#undef vpu_count
d299 2
d305 3
d322 9
a330 2
	ALLOC_STATE(vap_cntl, always, 2, 0);
	r300->hw.vap_cntl.cmd[0] = cmdpacket0(R300_VAP_CNTL, 1);
d333 2
a334 2
	ALLOC_STATE(unk2134, always, 3, 0);
	r300->hw.unk2134.cmd[0] = cmdpacket0(0x2134, 2);
d339 1
a339 1
	    cmdpacket0(R300_VAP_INPUT_ROUTE_0_0, 1);
d342 1
a342 1
	    cmdpacket0(R300_VAP_INPUT_ROUTE_1_0, 1);
d344 13
a356 9
	r300->hw.vic.cmd[R300_VIC_CMD_0] = cmdpacket0(R300_VAP_INPUT_CNTL_0, 2);
	ALLOC_STATE(unk21DC, always, 2, 0);
	r300->hw.unk21DC.cmd[0] = cmdpacket0(0x21DC, 1);
	ALLOC_STATE(vap_clip_cntl, always, 2, 0);
	r300->hw.vap_clip_cntl.cmd[0] = cmdpacket0(R300_VAP_CLIP_CNTL, 1);
	ALLOC_STATE(unk2220, always, 5, 0);
	r300->hw.unk2220.cmd[0] = cmdpacket0(0x2220, 4);
	ALLOC_STATE(unk2288, always, 2, 0);
	r300->hw.unk2288.cmd[0] = cmdpacket0(R300_VAP_UNKNOWN_2288, 1);
d364 1
a364 1
		    cmdpacket0(R300_VAP_PVS_CNTL_1, 3);
d373 4
a376 4
	ALLOC_STATE(unk4200, always, 5, 0);
	r300->hw.unk4200.cmd[0] = cmdpacket0(0x4200, 4);
	ALLOC_STATE(unk4214, always, 2, 0);
	r300->hw.unk4214.cmd[0] = cmdpacket0(0x4214, 1);
d378 3
a380 3
	r300->hw.ps.cmd[0] = cmdpacket0(R300_RE_POINTSIZE, 1);
	ALLOC_STATE(unk4230, always, 4, 0);
	r300->hw.unk4230.cmd[0] = cmdpacket0(0x4230, 3);
d382 3
a384 3
	r300->hw.lcntl.cmd[0] = cmdpacket0(R300_RE_LINE_CNT, 1);
	ALLOC_STATE(unk4260, always, 4, 0);
	r300->hw.unk4260.cmd[0] = cmdpacket0(0x4260, 3);
d386 1
a386 1
	r300->hw.shade.cmd[0] = cmdpacket0(R300_RE_SHADE, 4);
d388 1
a388 1
	r300->hw.polygon_mode.cmd[0] = cmdpacket0(R300_RE_POLYGON_MODE, 3);
d390 1
a390 1
	r300->hw.fogp.cmd[0] = cmdpacket0(R300_RE_FOG_SCALE, 2);
d392 1
a392 1
	r300->hw.zbias_cntl.cmd[0] = cmdpacket0(R300_RE_ZBIAS_CNTL, 1);
d395 1
a395 1
	    cmdpacket0(R300_RE_ZBIAS_T_FACTOR, 4);
d397 1
a397 1
	r300->hw.occlusion_cntl.cmd[0] = cmdpacket0(R300_RE_OCCLUSION_CNTL, 1);
d399 3
a401 3
	r300->hw.cul.cmd[R300_CUL_CMD_0] = cmdpacket0(R300_RE_CULL_CNTL, 1);
	ALLOC_STATE(unk42C0, always, 3, 0);
	r300->hw.unk42C0.cmd[0] = cmdpacket0(0x42C0, 2);
d403 56
a458 24
	r300->hw.rc.cmd[R300_RC_CMD_0] = cmdpacket0(R300_RS_CNTL_0, 2);
	ALLOC_STATE(ri, always, R300_RI_CMDSIZE, 0);
	r300->hw.ri.cmd[R300_RI_CMD_0] = cmdpacket0(R300_RS_INTERP_0, 8);
	ALLOC_STATE(rr, variable, R300_RR_CMDSIZE, 0);
	r300->hw.rr.cmd[R300_RR_CMD_0] = cmdpacket0(R300_RS_ROUTE_0, 1);
	ALLOC_STATE(unk43A4, always, 3, 0);
	r300->hw.unk43A4.cmd[0] = cmdpacket0(0x43A4, 2);
	ALLOC_STATE(unk43E8, always, 2, 0);
	r300->hw.unk43E8.cmd[0] = cmdpacket0(0x43E8, 1);
	ALLOC_STATE(fp, always, R300_FP_CMDSIZE, 0);
	r300->hw.fp.cmd[R300_FP_CMD_0] = cmdpacket0(R300_PFS_CNTL_0, 3);
	r300->hw.fp.cmd[R300_FP_CMD_1] = cmdpacket0(R300_PFS_NODE_0, 4);
	ALLOC_STATE(fpt, variable, R300_FPT_CMDSIZE, 0);
	r300->hw.fpt.cmd[R300_FPT_CMD_0] = cmdpacket0(R300_PFS_TEXI_0, 0);
	ALLOC_STATE(unk46A4, always, 6, 0);
	r300->hw.unk46A4.cmd[0] = cmdpacket0(0x46A4, 5);
	ALLOC_STATE(fpi[0], variable, R300_FPI_CMDSIZE, 0);
	r300->hw.fpi[0].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_PFS_INSTR0_0, 1);
	ALLOC_STATE(fpi[1], variable, R300_FPI_CMDSIZE, 1);
	r300->hw.fpi[1].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_PFS_INSTR1_0, 1);
	ALLOC_STATE(fpi[2], variable, R300_FPI_CMDSIZE, 2);
	r300->hw.fpi[2].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_PFS_INSTR2_0, 1);
	ALLOC_STATE(fpi[3], variable, R300_FPI_CMDSIZE, 3);
	r300->hw.fpi[3].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_PFS_INSTR3_0, 1);
d460 1
a460 1
	r300->hw.fogs.cmd[R300_FOGS_CMD_0] = cmdpacket0(R300_RE_FOG_STATE, 1);
d462 1
a462 1
	r300->hw.fogc.cmd[R300_FOGC_CMD_0] = cmdpacket0(R300_FOG_COLOR_R, 3);
d464 5
a468 7
	r300->hw.at.cmd[R300_AT_CMD_0] = cmdpacket0(R300_PP_ALPHA_TEST, 2);
	ALLOC_STATE(unk4BD8, always, 2, 0);
	r300->hw.unk4BD8.cmd[0] = cmdpacket0(0x4BD8, 1);
	ALLOC_STATE(fpp, variable, R300_FPP_CMDSIZE, 0);
	r300->hw.fpp.cmd[R300_FPP_CMD_0] = cmdpacket0(R300_PFS_PARAM_0_X, 0);
	ALLOC_STATE(unk4E00, always, 2, 0);
	r300->hw.unk4E00.cmd[0] = cmdpacket0(0x4E00, 1);
d472 10
a481 3
	r300->hw.cmk.cmd[R300_CMK_CMD_0] = cmdpacket0(R300_RB3D_COLORMASK, 1);
	ALLOC_STATE(blend_color, always, 4, 0);
	r300->hw.blend_color.cmd[0] = cmdpacket0(R300_RB3D_BLEND_COLOR, 3);
d485 6
a490 6
	ALLOC_STATE(unk4E50, always, 10, 0);
	r300->hw.unk4E50.cmd[0] = cmdpacket0(0x4E50, 9);
	ALLOC_STATE(unk4E88, always, 2, 0);
	r300->hw.unk4E88.cmd[0] = cmdpacket0(0x4E88, 1);
	ALLOC_STATE(unk4EA0, always, 3, 0);
	r300->hw.unk4EA0.cmd[0] = cmdpacket0(0x4EA0, 2);
d493 1
a493 1
	    cmdpacket0(R300_RB3D_ZSTENCIL_CNTL_0, 3);
d496 1
a496 1
	    cmdpacket0(R300_RB3D_ZSTENCIL_FORMAT, 4);
d498 3
a500 3
	r300->hw.zb.cmd[R300_ZB_CMD_0] = cmdpacket0(R300_RB3D_DEPTHOFFSET, 2);
	ALLOC_STATE(unk4F28, always, 2, 0);
	r300->hw.unk4F28.cmd[0] = cmdpacket0(0x4F28, 1);
d503 4
a506 4
	ALLOC_STATE(unk4F44, always, 2, 0);
	r300->hw.unk4F44.cmd[0] = cmdpacket0(0x4F44, 1);
	ALLOC_STATE(unk4F54, always, 2, 0);
	r300->hw.unk4F54.cmd[0] = cmdpacket0(0x4F54, 1);
d513 1
a513 1
		    cmdvpu(R300_PVS_UPLOAD_PROGRAM, 0);
d515 28
a542 12
		ALLOC_STATE(vpp, vpu, R300_VPP_CMDSIZE, 0);
		r300->hw.vpp.cmd[R300_VPP_CMD_0] =
		    cmdvpu(R300_PVS_UPLOAD_PARAMETERS, 0);

		ALLOC_STATE(vps, vpu, R300_VPS_CMDSIZE, 0);
		r300->hw.vps.cmd[R300_VPS_CMD_0] =
		    cmdvpu(R300_PVS_UPLOAD_POINTSIZE, 1);

		for (i = 0; i < 6; i++) {
		  ALLOC_STATE(vpucp[i], vpu, R300_VPUCP_CMDSIZE, 0);
		  r300->hw.vpucp[i].cmd[R300_VPUCP_CMD_0] =
 		    cmdvpu(R300_PVS_UPLOAD_CLIP_PLANE0+i, 1);
d549 1
a549 1
	    cmdpacket0(R300_TX_FILTER_0, 0);
d563 1
a563 1
	r300->hw.tex.pitch.cmd[R300_TEX_CMD_0] = cmdpacket0(R300_TX_PITCH_0, 0);
@


1.1
log
@Initial revision
@
text
@d30 4
a33 3
/*
 * Authors:
 *   Nicolai Haehnle <prefect_@@gmx.net>
a55 1

a58 1

d62 1
a62 1
int r300FlushCmdBufLocked(r300ContextPtr r300, const char* caller)
d85 1
a85 1
	cmd.buf = (char*)(r300->cmdbuf.cmd_buf + start);
d90 2
a91 1
		cmd.boxes = (drm_clip_rect_t *)r300->radeon.state.scissor.pClipRects;
d94 1
a94 1
		cmd.boxes = (drm_clip_rect_t *)r300->radeon.pClipRects;
d96 1
a96 1
		
d98 2
a99 2
			DRM_RADEON_CMDBUF, &cmd, sizeof(cmd));
	
d101 2
a102 1
		fprintf(stderr, "Syncing in %s (from %s)\n\n", __FUNCTION__, caller);
d113 1
a113 2

int r300FlushCmdBuf(r300ContextPtr r300, const char* caller)
d119 1
a119 1
	ret=r300FlushCmdBufLocked(r300, caller);
d124 2
a125 2
		fprintf(stderr, "drmRadeonCmdBuffer: %d (exiting)\n", ret);
		exit(ret);
d131 1
a131 2

void r300_print_state_atom(r300ContextPtr r300, struct r300_state_atom *state)
d134 1
a134 1
	int dwords = (*state->check)(r300, state);
d136 2
a137 1
	fprintf(stderr, "  emit %s/%d/%d\n", state->name, dwords, state->cmd_size);
d141 2
a142 2
			fprintf(stderr, "      %s[%d]: %08X\n", state->name, i,
				state->cmd[i]);
d151 1
a151 1
static __inline__ void r300DoEmitState(r300ContextPtr r300, GLboolean dirty)
d153 2
a154 2
	struct r300_state_atom* atom;
	uint32_t* dest;
d161 1
a161 1
				int dwords = (*atom->check)(r300, atom);
d164 1
a164 1
					r300_print_state_atom(r300, atom);
d166 2
a167 1
					fprintf(stderr, "  skip state %s\n",
d175 2
a176 2
	dest ++;
	r300->cmdbuf.count_used ++;
d178 1
d180 7
a186 7
	dest ++;
	r300->cmdbuf.count_used ++;
	
	*dest = 0x0;
	dest ++;
	r300->cmdbuf.count_used ++;
	
d189 2
a190 3
	dest ++;
	r300->cmdbuf.count_used ++;
	
d196 1
a196 1
			int dwords = (*atom->check)(r300, atom);
d199 1
a199 1
				memcpy(dest, atom->cmd, dwords*4);
d219 2
a220 1
	if (r300->cmdbuf.count_used && !r300->hw.is_dirty && !r300->hw.all_dirty)
d233 1
a233 1
		r300DoEmitState(r300, GL_FALSE);
d240 1
a240 1
	r300DoEmitState(r300, GL_TRUE);
d259 3
a261 4
CHECK( always, atom->cmd_size )
CHECK( variable, packet0_count(atom->cmd) ? (1 + packet0_count(atom->cmd)) : 0 )
CHECK( vpu, vpu_count(atom->cmd) ? (1 + vpu_count(atom->cmd)*4) : 0 )

d264 1
a264 2

#define ALLOC_STATE( ATOM, CHK, SZ, NM, IDX )				\
d268 1
a268 1
      r300->hw.ATOM.name = (NM);					\
d273 1
a274 2


d282 6
a287 2
	
	r300->hw.max_state_size = 2+2; /* reserve extra space for WAIT_IDLE and tex cache flush */
a293 163
	/* Initialize state atoms */
	ALLOC_STATE( vpt, always, R300_VPT_CMDSIZE, "vpt", 0 );
		r300->hw.vpt.cmd[R300_VPT_CMD_0] = cmdpacket0(R300_SE_VPORT_XSCALE, 6);
	ALLOC_STATE( unk2080, always, 2, "unk2080", 0 );
		r300->hw.unk2080.cmd[0] = cmdpacket0(0x2080, 1);
	ALLOC_STATE( vte, always, 3, "vte", 0 );
		r300->hw.vte.cmd[0] = cmdpacket0(R300_SE_VTE_CNTL, 2);
	ALLOC_STATE( unk2134, always, 3, "unk2134", 0 );
		r300->hw.unk2134.cmd[0] = cmdpacket0(0x2134, 2);
	ALLOC_STATE( unk2140, always, 2, "unk2140", 0 );
		r300->hw.unk2140.cmd[0] = cmdpacket0(0x2140, 1);
	ALLOC_STATE( vir[0], variable, R300_VIR_CMDSIZE, "vir/0", 0 );
		r300->hw.vir[0].cmd[R300_VIR_CMD_0] = cmdpacket0(R300_VAP_INPUT_ROUTE_0_0, 1);
	ALLOC_STATE( vir[1], variable, R300_VIR_CMDSIZE, "vir/1", 1 );
		r300->hw.vir[1].cmd[R300_VIR_CMD_0] = cmdpacket0(R300_VAP_INPUT_ROUTE_1_0, 1);
	ALLOC_STATE( vic, always, R300_VIC_CMDSIZE, "vic", 0 );
		r300->hw.vic.cmd[R300_VIC_CMD_0] = cmdpacket0(R300_VAP_INPUT_CNTL_0, 2);
	ALLOC_STATE( unk21DC, always, 2, "unk21DC", 0 );
		r300->hw.unk21DC.cmd[0] = cmdpacket0(0x21DC, 1);
	ALLOC_STATE( unk221C, always, 2, "unk221C", 0 );
		r300->hw.unk221C.cmd[0] = cmdpacket0(0x221C, 1);
	ALLOC_STATE( unk2220, always, 5, "unk2220", 0 );
		r300->hw.unk2220.cmd[0] = cmdpacket0(0x2220, 4);
	ALLOC_STATE( unk2288, always, 2, "unk2288", 0 );
		r300->hw.unk2288.cmd[0] = cmdpacket0(0x2288, 1);
	ALLOC_STATE( vof, always, R300_VOF_CMDSIZE, "vof", 0 );
		r300->hw.vof.cmd[R300_VOF_CMD_0] = cmdpacket0(R300_VAP_OUTPUT_VTX_FMT_0, 2);
	ALLOC_STATE( pvs, always, R300_PVS_CMDSIZE, "pvs", 0 );
		r300->hw.pvs.cmd[R300_PVS_CMD_0] = cmdpacket0(R300_VAP_PVS_CNTL_1, 3);
	ALLOC_STATE( gb_enable, always, 2, "gb_enable", 0 );
		r300->hw.gb_enable.cmd[0] = cmdpacket0(R300_GB_ENABLE, 1);
	ALLOC_STATE( gb_misc, always, R300_GB_MISC_CMDSIZE, "gb_misc", 0 );
		r300->hw.gb_misc.cmd[0] = cmdpacket0(R300_GB_MSPOS0, 5);
	ALLOC_STATE( txe, always, R300_TXE_CMDSIZE, "txe", 0 );
		r300->hw.txe.cmd[R300_TXE_CMD_0] = cmdpacket0(R300_TX_ENABLE, 1);
	ALLOC_STATE( unk4200, always, 5, "unk4200", 0 );
		r300->hw.unk4200.cmd[0] = cmdpacket0(0x4200, 4);
	ALLOC_STATE( unk4214, always, 2, "unk4214", 0 );
		r300->hw.unk4214.cmd[0] = cmdpacket0(0x4214, 1);
	ALLOC_STATE( ps, always, R300_PS_CMDSIZE, "ps", 0 );
		r300->hw.ps.cmd[0] = cmdpacket0(R300_RE_POINTSIZE, 1);
	ALLOC_STATE( unk4230, always, 4, "unk4230", 0 );
		r300->hw.unk4230.cmd[0] = cmdpacket0(0x4230, 3);
	ALLOC_STATE( lcntl, always, 2, "lcntl", 0 );
		r300->hw.lcntl.cmd[0] = cmdpacket0(R300_RE_LINE_CNT, 1);
	ALLOC_STATE( unk4260, always, 4, "unk4260", 0 );
		r300->hw.unk4260.cmd[0] = cmdpacket0(0x4260, 3);
	ALLOC_STATE( unk4274, always, 5, "unk4274", 0 );
		r300->hw.unk4274.cmd[0] = cmdpacket0(0x4274, 4);
	ALLOC_STATE( unk4288, always, 4, "unk4288", 0 );
		r300->hw.unk4288.cmd[0] = cmdpacket0(0x4288, 3);
	ALLOC_STATE( fogp, always, 3, "fogp", 0 );
		r300->hw.fogp.cmd[0] = cmdpacket0(R300_RE_FOG_SCALE, 2);
	ALLOC_STATE( unk42A0, always, 2, "unk42A0", 0 );
		r300->hw.unk42A0.cmd[0] = cmdpacket0(0x42A0, 1);
	ALLOC_STATE( zbs, always, R300_ZBS_CMDSIZE, "zbs", 0 );
		r300->hw.zbs.cmd[R300_ZBS_CMD_0] = cmdpacket0(R300_RE_ZBIAS_T_FACTOR, 4);
	ALLOC_STATE( unk42B4, always, 2, "unk42B4", 0 );
		r300->hw.unk42B4.cmd[0] = cmdpacket0(0x42B4, 1);
	ALLOC_STATE( cul, always, R300_CUL_CMDSIZE, "cul", 0 );
		r300->hw.cul.cmd[R300_CUL_CMD_0] = cmdpacket0(R300_RE_CULL_CNTL, 1);
	ALLOC_STATE( unk42C0, always, 3, "unk42C0", 0 );
		r300->hw.unk42C0.cmd[0] = cmdpacket0(0x42C0, 2);
	ALLOC_STATE( rc, always, R300_RC_CMDSIZE, "rc", 0 );
		r300->hw.rc.cmd[R300_RC_CMD_0] = cmdpacket0(R300_RS_CNTL_0, 2);
	ALLOC_STATE( ri, always, R300_RI_CMDSIZE, "ri", 0 );
		r300->hw.ri.cmd[R300_RI_CMD_0] = cmdpacket0(R300_RS_INTERP_0, 8);
	ALLOC_STATE( rr, variable, R300_RR_CMDSIZE, "rr", 0 );
		r300->hw.rr.cmd[R300_RR_CMD_0] = cmdpacket0(R300_RS_ROUTE_0, 1);
	ALLOC_STATE( unk43A4, always, 3, "unk43A4", 0 );
		r300->hw.unk43A4.cmd[0] = cmdpacket0(0x43A4, 2);
	ALLOC_STATE( unk43E8, always, 2, "unk43E8", 0 );
		r300->hw.unk43E8.cmd[0] = cmdpacket0(0x43E8, 1);
	ALLOC_STATE( fp, always, R300_FP_CMDSIZE, "fp", 0 );
		r300->hw.fp.cmd[R300_FP_CMD_0] = cmdpacket0(R300_PFS_CNTL_0, 3);
		r300->hw.fp.cmd[R300_FP_CMD_1] = cmdpacket0(R300_PFS_NODE_0, 4);
	ALLOC_STATE( fpt, variable, R300_FPT_CMDSIZE, "fpt", 0 );
		r300->hw.fpt.cmd[R300_FPT_CMD_0] = cmdpacket0(R300_PFS_TEXI_0, 0);
	ALLOC_STATE( unk46A4, always, 6, "unk46A4", 0 );
		r300->hw.unk46A4.cmd[0] = cmdpacket0(0x46A4, 5);
	ALLOC_STATE( fpi[0], variable, R300_FPI_CMDSIZE, "fpi/0", 0 );
		r300->hw.fpi[0].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_PFS_INSTR0_0, 1);
	ALLOC_STATE( fpi[1], variable, R300_FPI_CMDSIZE, "fpi/1", 1 );
		r300->hw.fpi[1].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_PFS_INSTR1_0, 1);
	ALLOC_STATE( fpi[2], variable, R300_FPI_CMDSIZE, "fpi/2", 2 );
		r300->hw.fpi[2].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_PFS_INSTR2_0, 1);
	ALLOC_STATE( fpi[3], variable, R300_FPI_CMDSIZE, "fpi/3", 3 );
		r300->hw.fpi[3].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_PFS_INSTR3_0, 1);
	ALLOC_STATE( fogs, always, R300_FOGS_CMDSIZE, "fogs", 0 );
		r300->hw.fogs.cmd[R300_FOGS_CMD_0] = cmdpacket0(R300_RE_FOG_STATE, 1);
	ALLOC_STATE( fogc, always, R300_FOGC_CMDSIZE, "fogc", 0 );
		r300->hw.fogc.cmd[R300_FOGC_CMD_0] = cmdpacket0(R300_FOG_COLOR_R, 3);
	ALLOC_STATE( at, always, R300_AT_CMDSIZE, "at", 0 );
		r300->hw.at.cmd[R300_AT_CMD_0] = cmdpacket0(R300_PP_ALPHA_TEST, 2);
	ALLOC_STATE( unk4BD8, always, 2, "unk4BD8", 0 );
		r300->hw.unk4BD8.cmd[0] = cmdpacket0(0x4BD8, 1);
	ALLOC_STATE( fpp, variable, R300_FPP_CMDSIZE, "fpp", 0 );
		r300->hw.fpp.cmd[R300_FPP_CMD_0] = cmdpacket0(R300_PFS_PARAM_0_X, 0);
	ALLOC_STATE( unk4E00, always, 2, "unk4E00", 0 );
		r300->hw.unk4E00.cmd[0] = cmdpacket0(0x4E00, 1);
	ALLOC_STATE( bld, always, R300_BLD_CMDSIZE, "bld", 0 );
		r300->hw.bld.cmd[R300_BLD_CMD_0] = cmdpacket0(R300_RB3D_CBLEND, 2);
	ALLOC_STATE( cmk, always, R300_CMK_CMDSIZE, "cmk", 0 );
		r300->hw.cmk.cmd[R300_CMK_CMD_0] = cmdpacket0(R300_RB3D_COLORMASK, 1);
	ALLOC_STATE( unk4E10, always, 4, "unk4E10", 0 );
		r300->hw.unk4E10.cmd[0] = cmdpacket0(0x4E10, 3);
	ALLOC_STATE( cb, always, R300_CB_CMDSIZE, "cb", 0 );
		r300->hw.cb.cmd[R300_CB_CMD_0] = cmdpacket0(R300_RB3D_COLOROFFSET0, 1);
		r300->hw.cb.cmd[R300_CB_CMD_1] = cmdpacket0(R300_RB3D_COLORPITCH0, 1);
	ALLOC_STATE( unk4E50, always, 10, "unk4E50", 0 );
		r300->hw.unk4E50.cmd[0] = cmdpacket0(0x4E50, 9);
	ALLOC_STATE( unk4E88, always, 2, "unk4E88", 0 );
		r300->hw.unk4E88.cmd[0] = cmdpacket0(0x4E88, 1);
	ALLOC_STATE( unk4EA0, always, 3, "unk4EA0 R350 only", 0 );
		r300->hw.unk4EA0.cmd[0] = cmdpacket0(0x4EA0, 2);
	ALLOC_STATE( zs, always, R300_ZS_CMDSIZE, "zstencil", 0 );
		r300->hw.zs.cmd[R300_ZS_CMD_0] = cmdpacket0(R300_RB3D_ZSTENCIL_CNTL_0, 3);
	ALLOC_STATE( unk4F10, always, 5, "unk4F10", 0 );
		r300->hw.unk4F10.cmd[0] = cmdpacket0(0x4F10, 4);
	ALLOC_STATE( zb, always, R300_ZB_CMDSIZE, "zb", 0 );
		r300->hw.zb.cmd[R300_ZB_CMD_0] = cmdpacket0(R300_RB3D_DEPTHOFFSET, 2);
	ALLOC_STATE( unk4F28, always, 2, "unk4F28", 0 );
		r300->hw.unk4F28.cmd[0] = cmdpacket0(0x4F28, 1);
	ALLOC_STATE( unk4F30, always, 3, "unk4F30", 0 );
		r300->hw.unk4F30.cmd[0] = cmdpacket0(0x4F30, 2);
	ALLOC_STATE( unk4F44, always, 2, "unk4F44", 0 );
		r300->hw.unk4F44.cmd[0] = cmdpacket0(0x4F44, 1);
	ALLOC_STATE( unk4F54, always, 2, "unk4F54", 0 );
		r300->hw.unk4F54.cmd[0] = cmdpacket0(0x4F54, 1);

	ALLOC_STATE( vpi, vpu, R300_VPI_CMDSIZE, "vpi", 0 );
		r300->hw.vpi.cmd[R300_VPI_CMD_0] = cmdvpu(R300_PVS_UPLOAD_PROGRAM, 0);
	ALLOC_STATE( vpp, vpu, R300_VPP_CMDSIZE, "vpp", 0 );
		r300->hw.vpp.cmd[R300_VPP_CMD_0] = cmdvpu(R300_PVS_UPLOAD_PARAMETERS, 0);
	ALLOC_STATE( vps, vpu, R300_VPS_CMDSIZE, "vps", 0 );
		r300->hw.vps.cmd[R300_VPS_CMD_0] = cmdvpu(R300_PVS_UPLOAD_POINTSIZE, 1);

	/* Textures */
	ALLOC_STATE( tex.filter, variable, mtu+1, "tex_filter", 0 );
		r300->hw.tex.filter.cmd[R300_TEX_CMD_0] = cmdpacket0(R300_TX_FILTER_0, 0);

	ALLOC_STATE( tex.unknown1, variable, mtu+1, "tex_unknown1", 0 );
		r300->hw.tex.unknown1.cmd[R300_TEX_CMD_0] = cmdpacket0(R300_TX_FILTER1_0, 0);

	ALLOC_STATE( tex.size, variable, mtu+1, "tex_size", 0 );
		r300->hw.tex.size.cmd[R300_TEX_CMD_0] = cmdpacket0(R300_TX_SIZE_0, 0);

	ALLOC_STATE( tex.format, variable, mtu+1, "tex_format", 0 );
		r300->hw.tex.format.cmd[R300_TEX_CMD_0] = cmdpacket0(R300_TX_FORMAT_0, 0);

	ALLOC_STATE( tex.pitch, variable, mtu+1, "tex_pitch", 0 );
		r300->hw.tex.pitch.cmd[R300_TEX_CMD_0] = cmdpacket0(R300_TX_PITCH_0, 0);

	ALLOC_STATE( tex.offset, variable, mtu+1, "tex_offset", 0 );
		r300->hw.tex.offset.cmd[R300_TEX_CMD_0] = cmdpacket0(R300_TX_OFFSET_0, 0);

	ALLOC_STATE( tex.unknown4, variable, mtu+1, "tex_unknown4", 0 );
		r300->hw.tex.unknown4.cmd[R300_TEX_CMD_0] = cmdpacket0(R300_TX_CHROMA_KEY_0, 0);

	ALLOC_STATE( tex.border_color, variable, mtu+1, "tex_border_color", 0 );
		r300->hw.tex.border_color.cmd[R300_TEX_CMD_0] = cmdpacket0(R300_TX_BORDER_COLOR_0, 0);


d298 193
a490 76
	insert_at_tail(&r300->hw.atomlist, &r300->hw.vpt);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk2080);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.vte);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk2134);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk2140);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.vir[0]);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.vir[1]);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.vic);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk21DC);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk221C);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk2220);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk2288);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.vof);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.pvs);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.gb_enable);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.gb_misc);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.txe);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4200);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4214);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.ps);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4230);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.lcntl);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4260);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4274);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4288);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.fogp);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk42A0);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.zbs);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk42B4);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.cul);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk42C0);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.rc);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.ri);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.rr);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk43A4);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk43E8);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.fp);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.fpt);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk46A4);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.fpi[0]);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.fpi[1]);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.fpi[2]);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.fpi[3]);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.fogs);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.fogc);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.at);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4BD8);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.fpp);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4E00);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.bld);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.cmk);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4E10);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.cb);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4E50);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4E88);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4EA0);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.zs);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4F10);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.zb);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4F28);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4F30);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4F44);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.unk4F54);

	insert_at_tail(&r300->hw.atomlist, &r300->hw.vpi);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.vpp);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.vps);

	insert_at_tail(&r300->hw.atomlist, &r300->hw.tex.filter);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.tex.unknown1);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.tex.size);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.tex.format);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.tex.pitch);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.tex.offset);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.tex.unknown4);
	insert_at_tail(&r300->hw.atomlist, &r300->hw.tex.border_color);
d496 5
a500 3
	size = 256 * driQueryOptioni(&r300->radeon.optionCache, "command_buffer_size");
	if (size < 2*r300->hw.max_state_size) {
		size = 2*r300->hw.max_state_size+65535;
d502 2
a503 2
	if (size > 64*256)
		size = 64*256;
d505 2
a506 2
	if (RADEON_DEBUG & (DEBUG_IOCTL|DEBUG_DMA)) {
		fprintf(stderr, "sizeof(drm_r300_cmd_header_t)=%u\n",
d508 1
a508 1
		fprintf(stderr, "sizeof(drm_radeon_cmd_buffer_t)=%u\n",
d512 1
a512 1
			size*4, r300->hw.max_state_size*4);
d516 1
a516 1
	r300->cmdbuf.cmd_buf = (uint32_t*)CALLOC(size*4);
a520 1

d526 1
a526 1
	struct r300_state_atom* atom;
d559 1
a559 2
	cmd = (drm_r300_cmd_header_t *) r300AllocCmdBuf(rmesa, 8,
							__FUNCTION__);
d586 1
a586 2
	cmd = (drm_r300_cmd_header_t *) r300AllocCmdBuf(rmesa, 1,
							__FUNCTION__);
a590 35

void r300EmitAOS(r300ContextPtr rmesa, GLuint nr, GLuint offset)
{
	int sz = 1 + (nr >> 1) * 3 + (nr & 1) * 2;
	int i;
	int cmd_reserved = 0;
	int cmd_written = 0;
	drm_radeon_cmd_header_t *cmd = NULL;

	if (RADEON_DEBUG & DEBUG_VERTS)
	    fprintf(stderr, "%s: nr=%d, ofs=0x%08x\n", __func__, nr, offset);

	start_packet3(RADEON_CP_PACKET3_3D_LOAD_VBPNTR, sz-1);
	e32(nr);
	for(i=0;i+1<nr;i+=2){
		e32(  (rmesa->state.aos[i].aos_size << 0)
		      |(rmesa->state.aos[i].aos_stride << 8)
		      |(rmesa->state.aos[i+1].aos_size << 16)
		      |(rmesa->state.aos[i+1].aos_stride << 24)
			);
		e32(rmesa->state.aos[i].aos_offset +
		    offset*4*rmesa->state.aos[i].aos_stride);
		e32(rmesa->state.aos[i+1].aos_offset +
		    offset*4*rmesa->state.aos[i+1].aos_stride);
	}

	if(nr & 1){
		e32(  (rmesa->state.aos[nr-1].aos_size << 0)
		      |(rmesa->state.aos[nr-1].aos_stride << 8)
			);
		e32(rmesa->state.aos[nr-1].aos_offset + 
		    offset*4*rmesa->state.aos[nr-1].aos_stride);
	}
}

@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Mesa 7.0.1
@
text
@d30 3
a32 4
/**
 * \file
 *
 * \author Nicolai Haehnle <prefect_@@gmx.net>
d55 1
d59 1
d63 1
a63 1
int r300FlushCmdBufLocked(r300ContextPtr r300, const char *caller)
d86 1
a86 1
	cmd.buf = (char *)(r300->cmdbuf.cmd_buf + start);
d91 1
a91 2
		cmd.boxes =
		    (drm_clip_rect_t *) r300->radeon.state.scissor.pClipRects;
d94 1
a94 1
		cmd.boxes = (drm_clip_rect_t *) r300->radeon.pClipRects;
d96 1
a96 1

d98 2
a99 2
			      DRM_RADEON_CMDBUF, &cmd, sizeof(cmd));

d101 1
a101 2
		fprintf(stderr, "Syncing in %s (from %s)\n\n",
			__FUNCTION__, caller);
d112 2
a113 1
int r300FlushCmdBuf(r300ContextPtr r300, const char *caller)
d119 1
a119 1
	ret = r300FlushCmdBufLocked(r300, caller);
d124 2
a125 2
		fprintf(stderr, "drmRadeonCmdBuffer: %d\n", ret);
		_mesa_exit(ret);
d131 2
a132 1
static void r300PrintStateAtom(r300ContextPtr r300, struct r300_state_atom *state)
d135 1
a135 1
	int dwords = (*state->check) (r300, state);
d137 1
a137 2
	fprintf(stderr, "  emit %s/%d/%d\n", state->name, dwords,
		state->cmd_size);
d141 2
a142 2
			fprintf(stderr, "      %s[%d]: %08X\n",
				state->name, i, state->cmd[i]);
d151 1
a151 1
static __inline__ void r300EmitAtoms(r300ContextPtr r300, GLboolean dirty)
d153 2
a154 2
	struct r300_state_atom *atom;
	uint32_t *dest;
d161 1
a161 1
				int dwords = (*atom->check) (r300, atom);
d164 1
a164 1
					r300PrintStateAtom(r300, atom);
d166 1
a166 2
					fprintf(stderr,
						"  skip state %s\n",
d174 2
a175 2
	dest++;
	r300->cmdbuf.count_used++;
a176 1
	/* Emit cache flush */
d178 7
a184 7
	dest++;
	r300->cmdbuf.count_used++;

	*dest = R300_TX_FLUSH;
	dest++;
	r300->cmdbuf.count_used++;

d187 3
a189 2
	dest++;
	r300->cmdbuf.count_used++;
d195 1
a195 1
			int dwords = (*atom->check) (r300, atom);
d198 1
a198 1
				memcpy(dest, atom->cmd, dwords * 4);
d218 1
a218 2
	if (r300->cmdbuf.count_used && !r300->hw.is_dirty
	    && !r300->hw.all_dirty)
d231 1
a231 1
		r300EmitAtoms(r300, GL_FALSE);
d238 1
a238 1
	r300EmitAtoms(r300, GL_TRUE);
d257 4
a260 3
CHECK(always, atom->cmd_size)
    CHECK(variable, packet0_count(atom->cmd) ? (1 + packet0_count(atom->cmd)) : 0)
    CHECK(vpu, vpu_count(atom->cmd) ? (1 + vpu_count(atom->cmd) * 4) : 0)
d263 2
a264 1
#define ALLOC_STATE( ATOM, CHK, SZ, IDX )				\
d268 1
a268 1
      r300->hw.ATOM.name = #ATOM;					\
a272 1
      insert_at_tail(&r300->hw.atomlist, &r300->hw.ATOM);		\
d274 2
d283 2
a284 6
	int has_tcl = 1;

	if (!(r300->radeon.radeonScreen->chip_flags & RADEON_CHIPSET_TCL))
		has_tcl = 0;

	r300->hw.max_state_size = 2 + 2;	/* reserve extra space for WAIT_IDLE and tex cache flush */
d291 163
d458 76
a533 184
	/* Initialize state atoms */
	ALLOC_STATE(vpt, always, R300_VPT_CMDSIZE, 0);
	r300->hw.vpt.cmd[R300_VPT_CMD_0] = cmdpacket0(R300_SE_VPORT_XSCALE, 6);
	ALLOC_STATE(vap_cntl, always, 2, 0);
	r300->hw.vap_cntl.cmd[0] = cmdpacket0(R300_VAP_CNTL, 1);
	ALLOC_STATE(vte, always, 3, 0);
	r300->hw.vte.cmd[0] = cmdpacket0(R300_SE_VTE_CNTL, 2);
	ALLOC_STATE(unk2134, always, 3, 0);
	r300->hw.unk2134.cmd[0] = cmdpacket0(0x2134, 2);
	ALLOC_STATE(vap_cntl_status, always, 2, 0);
	r300->hw.vap_cntl_status.cmd[0] = cmdpacket0(R300_VAP_CNTL_STATUS, 1);
	ALLOC_STATE(vir[0], variable, R300_VIR_CMDSIZE, 0);
	r300->hw.vir[0].cmd[R300_VIR_CMD_0] =
	    cmdpacket0(R300_VAP_INPUT_ROUTE_0_0, 1);
	ALLOC_STATE(vir[1], variable, R300_VIR_CMDSIZE, 1);
	r300->hw.vir[1].cmd[R300_VIR_CMD_0] =
	    cmdpacket0(R300_VAP_INPUT_ROUTE_1_0, 1);
	ALLOC_STATE(vic, always, R300_VIC_CMDSIZE, 0);
	r300->hw.vic.cmd[R300_VIC_CMD_0] = cmdpacket0(R300_VAP_INPUT_CNTL_0, 2);
	ALLOC_STATE(unk21DC, always, 2, 0);
	r300->hw.unk21DC.cmd[0] = cmdpacket0(0x21DC, 1);
	ALLOC_STATE(unk221C, always, 2, 0);
	r300->hw.unk221C.cmd[0] = cmdpacket0(R300_VAP_UNKNOWN_221C, 1);
	ALLOC_STATE(unk2220, always, 5, 0);
	r300->hw.unk2220.cmd[0] = cmdpacket0(0x2220, 4);
	ALLOC_STATE(unk2288, always, 2, 0);
	r300->hw.unk2288.cmd[0] = cmdpacket0(R300_VAP_UNKNOWN_2288, 1);
	ALLOC_STATE(vof, always, R300_VOF_CMDSIZE, 0);
	r300->hw.vof.cmd[R300_VOF_CMD_0] =
	    cmdpacket0(R300_VAP_OUTPUT_VTX_FMT_0, 2);

	if (has_tcl) {
		ALLOC_STATE(pvs, always, R300_PVS_CMDSIZE, 0);
		r300->hw.pvs.cmd[R300_PVS_CMD_0] =
		    cmdpacket0(R300_VAP_PVS_CNTL_1, 3);
	}

	ALLOC_STATE(gb_enable, always, 2, 0);
	r300->hw.gb_enable.cmd[0] = cmdpacket0(R300_GB_ENABLE, 1);
	ALLOC_STATE(gb_misc, always, R300_GB_MISC_CMDSIZE, 0);
	r300->hw.gb_misc.cmd[0] = cmdpacket0(R300_GB_MSPOS0, 5);
	ALLOC_STATE(txe, always, R300_TXE_CMDSIZE, 0);
	r300->hw.txe.cmd[R300_TXE_CMD_0] = cmdpacket0(R300_TX_ENABLE, 1);
	ALLOC_STATE(unk4200, always, 5, 0);
	r300->hw.unk4200.cmd[0] = cmdpacket0(0x4200, 4);
	ALLOC_STATE(unk4214, always, 2, 0);
	r300->hw.unk4214.cmd[0] = cmdpacket0(0x4214, 1);
	ALLOC_STATE(ps, always, R300_PS_CMDSIZE, 0);
	r300->hw.ps.cmd[0] = cmdpacket0(R300_RE_POINTSIZE, 1);
	ALLOC_STATE(unk4230, always, 4, 0);
	r300->hw.unk4230.cmd[0] = cmdpacket0(0x4230, 3);
	ALLOC_STATE(lcntl, always, 2, 0);
	r300->hw.lcntl.cmd[0] = cmdpacket0(R300_RE_LINE_CNT, 1);
	ALLOC_STATE(unk4260, always, 4, 0);
	r300->hw.unk4260.cmd[0] = cmdpacket0(0x4260, 3);
	ALLOC_STATE(shade, always, 5, 0);
	r300->hw.shade.cmd[0] = cmdpacket0(R300_RE_SHADE, 4);
	ALLOC_STATE(polygon_mode, always, 4, 0);
	r300->hw.polygon_mode.cmd[0] = cmdpacket0(R300_RE_POLYGON_MODE, 3);
	ALLOC_STATE(fogp, always, 3, 0);
	r300->hw.fogp.cmd[0] = cmdpacket0(R300_RE_FOG_SCALE, 2);
	ALLOC_STATE(zbias_cntl, always, 2, 0);
	r300->hw.zbias_cntl.cmd[0] = cmdpacket0(R300_RE_ZBIAS_CNTL, 1);
	ALLOC_STATE(zbs, always, R300_ZBS_CMDSIZE, 0);
	r300->hw.zbs.cmd[R300_ZBS_CMD_0] =
	    cmdpacket0(R300_RE_ZBIAS_T_FACTOR, 4);
	ALLOC_STATE(occlusion_cntl, always, 2, 0);
	r300->hw.occlusion_cntl.cmd[0] = cmdpacket0(R300_RE_OCCLUSION_CNTL, 1);
	ALLOC_STATE(cul, always, R300_CUL_CMDSIZE, 0);
	r300->hw.cul.cmd[R300_CUL_CMD_0] = cmdpacket0(R300_RE_CULL_CNTL, 1);
	ALLOC_STATE(unk42C0, always, 3, 0);
	r300->hw.unk42C0.cmd[0] = cmdpacket0(0x42C0, 2);
	ALLOC_STATE(rc, always, R300_RC_CMDSIZE, 0);
	r300->hw.rc.cmd[R300_RC_CMD_0] = cmdpacket0(R300_RS_CNTL_0, 2);
	ALLOC_STATE(ri, always, R300_RI_CMDSIZE, 0);
	r300->hw.ri.cmd[R300_RI_CMD_0] = cmdpacket0(R300_RS_INTERP_0, 8);
	ALLOC_STATE(rr, variable, R300_RR_CMDSIZE, 0);
	r300->hw.rr.cmd[R300_RR_CMD_0] = cmdpacket0(R300_RS_ROUTE_0, 1);
	ALLOC_STATE(unk43A4, always, 3, 0);
	r300->hw.unk43A4.cmd[0] = cmdpacket0(0x43A4, 2);
	ALLOC_STATE(unk43E8, always, 2, 0);
	r300->hw.unk43E8.cmd[0] = cmdpacket0(0x43E8, 1);
	ALLOC_STATE(fp, always, R300_FP_CMDSIZE, 0);
	r300->hw.fp.cmd[R300_FP_CMD_0] = cmdpacket0(R300_PFS_CNTL_0, 3);
	r300->hw.fp.cmd[R300_FP_CMD_1] = cmdpacket0(R300_PFS_NODE_0, 4);
	ALLOC_STATE(fpt, variable, R300_FPT_CMDSIZE, 0);
	r300->hw.fpt.cmd[R300_FPT_CMD_0] = cmdpacket0(R300_PFS_TEXI_0, 0);
	ALLOC_STATE(unk46A4, always, 6, 0);
	r300->hw.unk46A4.cmd[0] = cmdpacket0(0x46A4, 5);
	ALLOC_STATE(fpi[0], variable, R300_FPI_CMDSIZE, 0);
	r300->hw.fpi[0].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_PFS_INSTR0_0, 1);
	ALLOC_STATE(fpi[1], variable, R300_FPI_CMDSIZE, 1);
	r300->hw.fpi[1].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_PFS_INSTR1_0, 1);
	ALLOC_STATE(fpi[2], variable, R300_FPI_CMDSIZE, 2);
	r300->hw.fpi[2].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_PFS_INSTR2_0, 1);
	ALLOC_STATE(fpi[3], variable, R300_FPI_CMDSIZE, 3);
	r300->hw.fpi[3].cmd[R300_FPI_CMD_0] = cmdpacket0(R300_PFS_INSTR3_0, 1);
	ALLOC_STATE(fogs, always, R300_FOGS_CMDSIZE, 0);
	r300->hw.fogs.cmd[R300_FOGS_CMD_0] = cmdpacket0(R300_RE_FOG_STATE, 1);
	ALLOC_STATE(fogc, always, R300_FOGC_CMDSIZE, 0);
	r300->hw.fogc.cmd[R300_FOGC_CMD_0] = cmdpacket0(R300_FOG_COLOR_R, 3);
	ALLOC_STATE(at, always, R300_AT_CMDSIZE, 0);
	r300->hw.at.cmd[R300_AT_CMD_0] = cmdpacket0(R300_PP_ALPHA_TEST, 2);
	ALLOC_STATE(unk4BD8, always, 2, 0);
	r300->hw.unk4BD8.cmd[0] = cmdpacket0(0x4BD8, 1);
	ALLOC_STATE(fpp, variable, R300_FPP_CMDSIZE, 0);
	r300->hw.fpp.cmd[R300_FPP_CMD_0] = cmdpacket0(R300_PFS_PARAM_0_X, 0);
	ALLOC_STATE(unk4E00, always, 2, 0);
	r300->hw.unk4E00.cmd[0] = cmdpacket0(0x4E00, 1);
	ALLOC_STATE(bld, always, R300_BLD_CMDSIZE, 0);
	r300->hw.bld.cmd[R300_BLD_CMD_0] = cmdpacket0(R300_RB3D_CBLEND, 2);
	ALLOC_STATE(cmk, always, R300_CMK_CMDSIZE, 0);
	r300->hw.cmk.cmd[R300_CMK_CMD_0] = cmdpacket0(R300_RB3D_COLORMASK, 1);
	ALLOC_STATE(blend_color, always, 4, 0);
	r300->hw.blend_color.cmd[0] = cmdpacket0(R300_RB3D_BLEND_COLOR, 3);
	ALLOC_STATE(cb, always, R300_CB_CMDSIZE, 0);
	r300->hw.cb.cmd[R300_CB_CMD_0] = cmdpacket0(R300_RB3D_COLOROFFSET0, 1);
	r300->hw.cb.cmd[R300_CB_CMD_1] = cmdpacket0(R300_RB3D_COLORPITCH0, 1);
	ALLOC_STATE(unk4E50, always, 10, 0);
	r300->hw.unk4E50.cmd[0] = cmdpacket0(0x4E50, 9);
	ALLOC_STATE(unk4E88, always, 2, 0);
	r300->hw.unk4E88.cmd[0] = cmdpacket0(0x4E88, 1);
	ALLOC_STATE(unk4EA0, always, 3, 0);
	r300->hw.unk4EA0.cmd[0] = cmdpacket0(0x4EA0, 2);
	ALLOC_STATE(zs, always, R300_ZS_CMDSIZE, 0);
	r300->hw.zs.cmd[R300_ZS_CMD_0] =
	    cmdpacket0(R300_RB3D_ZSTENCIL_CNTL_0, 3);
	ALLOC_STATE(zstencil_format, always, 5, 0);
	r300->hw.zstencil_format.cmd[0] =
	    cmdpacket0(R300_RB3D_ZSTENCIL_FORMAT, 4);
	ALLOC_STATE(zb, always, R300_ZB_CMDSIZE, 0);
	r300->hw.zb.cmd[R300_ZB_CMD_0] = cmdpacket0(R300_RB3D_DEPTHOFFSET, 2);
	ALLOC_STATE(unk4F28, always, 2, 0);
	r300->hw.unk4F28.cmd[0] = cmdpacket0(0x4F28, 1);
	ALLOC_STATE(unk4F30, always, 3, 0);
	r300->hw.unk4F30.cmd[0] = cmdpacket0(0x4F30, 2);
	ALLOC_STATE(unk4F44, always, 2, 0);
	r300->hw.unk4F44.cmd[0] = cmdpacket0(0x4F44, 1);
	ALLOC_STATE(unk4F54, always, 2, 0);
	r300->hw.unk4F54.cmd[0] = cmdpacket0(0x4F54, 1);

	/* VPU only on TCL */
	if (has_tcl) {
		ALLOC_STATE(vpi, vpu, R300_VPI_CMDSIZE, 0);
		r300->hw.vpi.cmd[R300_VPI_CMD_0] =
		    cmdvpu(R300_PVS_UPLOAD_PROGRAM, 0);
		ALLOC_STATE(vpp, vpu, R300_VPP_CMDSIZE, 0);
		r300->hw.vpp.cmd[R300_VPP_CMD_0] =
		    cmdvpu(R300_PVS_UPLOAD_PARAMETERS, 0);
		ALLOC_STATE(vps, vpu, R300_VPS_CMDSIZE, 0);
		r300->hw.vps.cmd[R300_VPS_CMD_0] =
		    cmdvpu(R300_PVS_UPLOAD_POINTSIZE, 1);
	}

	/* Textures */
	ALLOC_STATE(tex.filter, variable, mtu + 1, 0);
	r300->hw.tex.filter.cmd[R300_TEX_CMD_0] =
	    cmdpacket0(R300_TX_FILTER_0, 0);

	ALLOC_STATE(tex.filter_1, variable, mtu + 1, 0);
	r300->hw.tex.filter_1.cmd[R300_TEX_CMD_0] =
	    cmdpacket0(R300_TX_FILTER1_0, 0);

	ALLOC_STATE(tex.size, variable, mtu + 1, 0);
	r300->hw.tex.size.cmd[R300_TEX_CMD_0] = cmdpacket0(R300_TX_SIZE_0, 0);

	ALLOC_STATE(tex.format, variable, mtu + 1, 0);
	r300->hw.tex.format.cmd[R300_TEX_CMD_0] =
	    cmdpacket0(R300_TX_FORMAT_0, 0);

	ALLOC_STATE(tex.pitch, variable, mtu + 1, 0);
	r300->hw.tex.pitch.cmd[R300_TEX_CMD_0] = cmdpacket0(R300_TX_PITCH_0, 0);

	ALLOC_STATE(tex.offset, variable, mtu + 1, 0);
	r300->hw.tex.offset.cmd[R300_TEX_CMD_0] =
	    cmdpacket0(R300_TX_OFFSET_0, 0);

	ALLOC_STATE(tex.chroma_key, variable, mtu + 1, 0);
	r300->hw.tex.chroma_key.cmd[R300_TEX_CMD_0] =
	    cmdpacket0(R300_TX_CHROMA_KEY_0, 0);

	ALLOC_STATE(tex.border_color, variable, mtu + 1, 0);
	r300->hw.tex.border_color.cmd[R300_TEX_CMD_0] =
	    cmdpacket0(R300_TX_BORDER_COLOR_0, 0);
d539 3
a541 5
	size =
	    256 * driQueryOptioni(&r300->radeon.optionCache,
				  "command_buffer_size");
	if (size < 2 * r300->hw.max_state_size) {
		size = 2 * r300->hw.max_state_size + 65535;
d543 2
a544 2
	if (size > 64 * 256)
		size = 64 * 256;
d546 2
a547 2
	if (RADEON_DEBUG & (DEBUG_IOCTL | DEBUG_DMA)) {
		fprintf(stderr, "sizeof(drm_r300_cmd_header_t)=%zd\n",
d549 1
a549 1
		fprintf(stderr, "sizeof(drm_radeon_cmd_buffer_t)=%zd\n",
d553 1
a553 1
			size * 4, r300->hw.max_state_size * 4);
d557 1
a557 1
	r300->cmdbuf.cmd_buf = (uint32_t *) CALLOC(size * 4);
d562 1
d568 1
a568 1
	struct r300_state_atom *atom;
d601 2
a602 1
	cmd = (drm_r300_cmd_header_t *) r300AllocCmdBuf(rmesa, 8, __FUNCTION__);
d629 2
a630 1
	cmd = (drm_r300_cmd_header_t *) r300AllocCmdBuf(rmesa, 1, __FUNCTION__);
d635 35
@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@d36 7
a42 6
#include "main/glheader.h"
#include "main/state.h"
#include "main/imports.h"
#include "main/macros.h"
#include "main/context.h"
#include "main/simple_list.h"
d47 1
d49 2
d54 1
a54 3
#include "radeon_bocs_wrapper.h"
#include "radeon_mipmap_tree.h"
#include "radeon_queryobj.h"
d56 5
a60 2
/** # of dwords reserved for additional instructions that may need to be written
 * during flushing.
d62 1
a62 3
#define SPACE_FOR_FLUSHING	4

static unsigned packet0_count(r300ContextPtr r300, uint32_t *pkt)
d64 4
a67 7
    if (r300->radeon.radeonScreen->kernel_mm) {
        return ((((*pkt) >> 16) & 0x3FFF) + 1);
    } else {
        drm_r300_cmd_header_t *t = (drm_r300_cmd_header_t*)pkt;
        return t->packet0.count;
    }
}
d69 27
a95 2
#define vpu_count(ptr) (((drm_r300_cmd_header_t*)(ptr))->vpu.count)
#define r500fp_count(ptr) (((drm_r300_cmd_header_t*)(ptr))->r500fp.count)
d97 2
a98 6
static int check_vpu(struct gl_context *ctx, struct radeon_state_atom *atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	int cnt;
	int extra = 1;
	cnt = vpu_count(atom->cmd);
d100 4
a103 2
	if (r300->radeon.radeonScreen->kernel_mm) {
		extra = 3;
d106 3
a108 26
	return cnt ? (cnt * 4) + extra : 0;
}

static int check_vpp(struct gl_context *ctx, struct radeon_state_atom *atom)
{
    r300ContextPtr r300 = R300_CONTEXT(ctx);
    int cnt;
    int extra = 1;

    if (r300->radeon.radeonScreen->kernel_mm) {
        cnt = r300->selected_vp->code.constants.Count * 4;
        extra = 3;
    } else {
        cnt = vpu_count(atom->cmd);
        extra = 1;
    }

    return cnt ? (cnt * 4) + extra : 0;
}

void r300_emit_vpu(struct r300_context *r300,
                   uint32_t *data,
                   unsigned len,
                   uint32_t addr)
{
    BATCH_LOCALS(&r300->radeon);
d110 1
a110 5
    BEGIN_BATCH_NO_AUTOSTATE(3 + len);
    OUT_BATCH_REGVAL(R300_VAP_PVS_VECTOR_INDX_REG, addr);
    OUT_BATCH(CP_PACKET0(R300_VAP_PVS_UPLOAD_DATA, len-1) | RADEON_ONE_REG_WR);
    OUT_BATCH_TABLE(data, len);
    END_BATCH();
d113 1
a113 1
static void emit_vpu_state(struct gl_context *ctx, struct radeon_state_atom * atom)
d115 1
a115 3
    r300ContextPtr r300 = R300_CONTEXT(ctx);
    drm_r300_cmd_header_t cmd;
    uint32_t addr;
d117 1
a117 2
    cmd.u = atom->cmd[0];
    addr = (cmd.vpu.adrhi << 8) | cmd.vpu.adrlo;
d119 1
a119 2
    r300_emit_vpu(r300, &atom->cmd[1], vpu_count(atom->cmd) * 4, addr);
}
d121 1
a121 5
static void emit_vpp_state(struct gl_context *ctx, struct radeon_state_atom * atom)
{
    r300ContextPtr r300 = R300_CONTEXT(ctx);
    drm_r300_cmd_header_t cmd;
    uint32_t addr;
d123 4
a126 2
    cmd.u = atom->cmd[0];
    addr = (cmd.vpu.adrhi << 8) | cmd.vpu.adrlo;
d128 1
a128 1
    r300_emit_vpu(r300, &atom->cmd[1], r300->selected_vp->code.constants.Count * 4, addr);
d131 1
a131 6
void r500_emit_fp(struct r300_context *r300,
                  uint32_t *data,
                  unsigned len,
                  uint32_t addr,
                  unsigned type,
                  unsigned clamp)
d133 2
a134 1
    BATCH_LOCALS(&r300->radeon);
d136 2
a137 2
    addr |= (type << 16);
    addr |= (clamp << 17);
d139 4
a142 6
    BEGIN_BATCH_NO_AUTOSTATE(len + 3);
    OUT_BATCH(CP_PACKET0(R500_GA_US_VECTOR_INDEX, 0));
    OUT_BATCH(addr);
    OUT_BATCH(CP_PACKET0(R500_GA_US_VECTOR_DATA, len-1) | RADEON_ONE_REG_WR);
    OUT_BATCH_TABLE(data, len);
    END_BATCH();
d145 7
a151 1
static void emit_r500fp_atom(struct gl_context *ctx, struct radeon_state_atom * atom)
d153 2
a154 15
    r300ContextPtr r300 = R300_CONTEXT(ctx);
    drm_r300_cmd_header_t cmd;
    uint32_t addr, count;
    int type, clamp;

    cmd.u = atom->cmd[0];
    addr = ((cmd.r500fp.adrhi_flags & 1) << 8) | cmd.r500fp.adrlo;
    type = !!(cmd.r500fp.adrhi_flags & R500FP_CONSTANT_TYPE);
    clamp = !!(cmd.r500fp.adrhi_flags & R500FP_CONSTANT_CLAMP);

    if (type) {
        count = r500fp_count(atom->cmd) * 4;
    } else {
        count = r500fp_count(atom->cmd) * 6;
    }
d156 1
a156 2
    r500_emit_fp(r300, &atom->cmd[1], count, addr, type, clamp);
}
d158 13
a170 17
static int check_tex_offsets(struct gl_context *ctx, struct radeon_state_atom * atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	int numtmus = packet0_count(r300, r300->hw.tex.offset.cmd);
	int dw = 0, i;
	if (atom->cmd[0] == CP_PACKET2) {
		return dw;
	}
	for(i = 0; i < numtmus; ++i) {
		radeonTexObj *t = r300->hw.textures[i];
		if (!t && !r300->radeon.radeonScreen->kernel_mm) {
			dw += 0;
		} else if (t && t->image_override && !t->bo) {
			if (!r300->radeon.radeonScreen->kernel_mm)
				dw += 2;
		} else
			dw += 4;
a171 2
	return dw;
}
d173 30
a202 44
static void emit_tex_offsets(struct gl_context *ctx, struct radeon_state_atom * atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	BATCH_LOCALS(&r300->radeon);
	int numtmus = packet0_count(r300, r300->hw.tex.offset.cmd);
	int i;

	for(i = 0; i < numtmus; ++i) {
		radeonTexObj *t = r300->hw.textures[i];
		if (t && !t->image_override) {
			BEGIN_BATCH_NO_AUTOSTATE(4);
			OUT_BATCH_REGSEQ(R300_TX_OFFSET_0 + (i * 4), 1);
			OUT_BATCH_RELOC(t->tile_bits, t->mt->bo, get_base_teximage_offset(t),
					RADEON_GEM_DOMAIN_GTT|RADEON_GEM_DOMAIN_VRAM, 0, 0);
			END_BATCH();
		} else if (!t) {
			/* Texture unit hasn't a texture bound.
			 * We assign the current color buffer as a fakery to make
			 * KIL work on KMS (without it, the CS checker will complain).
			 */
			if (r300->radeon.radeonScreen->kernel_mm) {
				struct radeon_renderbuffer *rrb = radeon_get_colorbuffer(&r300->radeon);
				if (rrb && rrb->bo) {
					BEGIN_BATCH_NO_AUTOSTATE(4);
					OUT_BATCH_REGSEQ(R300_TX_OFFSET_0 + (i * 4), 1);
					OUT_BATCH_RELOC(0, rrb->bo, 0,
							RADEON_GEM_DOMAIN_GTT|RADEON_GEM_DOMAIN_VRAM, 0, 0);
					END_BATCH();
				}
			}
		} else { /* override cases */
			if (t->bo) {
				BEGIN_BATCH_NO_AUTOSTATE(4);
				OUT_BATCH_REGSEQ(R300_TX_OFFSET_0 + (i * 4), 1);
				OUT_BATCH_RELOC(t->tile_bits, t->bo, 0,
						RADEON_GEM_DOMAIN_GTT|RADEON_GEM_DOMAIN_VRAM, 0, 0);
				END_BATCH();
			} else if (!r300->radeon.radeonScreen->kernel_mm) {
				BEGIN_BATCH_NO_AUTOSTATE(2);
				OUT_BATCH_REGSEQ(R300_TX_OFFSET_0 + (i * 4), 1);
				OUT_BATCH(t->override_offset);
				END_BATCH();
			} else {
				/* Texture unit hasn't a texture bound nothings to do */
d208 7
a214 1
void r300_emit_scissor(struct gl_context *ctx)
d216 5
a220 11
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	BATCH_LOCALS(&r300->radeon);
    unsigned x1, y1, x2, y2;
	struct radeon_renderbuffer *rrb;

    if (!r300->radeon.radeonScreen->driScreen->dri2.enabled) {
        return;
    }
	rrb = radeon_get_colorbuffer(&r300->radeon);
	if (!rrb || !rrb->bo) {
		fprintf(stderr, "no rrb\n");
a221 35
	}
    if (r300->radeon.state.scissor.enabled) {
        x1 = r300->radeon.state.scissor.rect.x1;
        y1 = r300->radeon.state.scissor.rect.y1;
        x2 = r300->radeon.state.scissor.rect.x2;
        y2 = r300->radeon.state.scissor.rect.y2;
    } else {
        x1 = 0;
        y1 = 0;
        x2 = rrb->base.Width - 1;
        y2 = rrb->base.Height - 1;
    }
    if (r300->radeon.radeonScreen->chip_family < CHIP_FAMILY_RV515) {
        x1 += R300_SCISSORS_OFFSET;
        y1 += R300_SCISSORS_OFFSET;
        x2 += R300_SCISSORS_OFFSET;
        y2 += R300_SCISSORS_OFFSET;
    }
    BEGIN_BATCH_NO_AUTOSTATE(3);
    OUT_BATCH_REGSEQ(R300_SC_SCISSORS_TL, 2);
    OUT_BATCH((x1 << R300_SCISSORS_X_SHIFT)|(y1 << R300_SCISSORS_Y_SHIFT));
    OUT_BATCH((x2 << R300_SCISSORS_X_SHIFT)|(y2 << R300_SCISSORS_Y_SHIFT));
    END_BATCH();
}
static int check_cb_offset(struct gl_context *ctx, struct radeon_state_atom * atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	uint32_t dw = 6 + 3 + 16;
	if (r300->radeon.radeonScreen->kernel_mm)
		dw += 2;
	if (!r300->radeon.radeonScreen->driScreen->dri2.enabled) {
		dw -= 3 + 16;
	}
	return dw;
}
d223 5
a227 46
static void emit_scissor(struct r300_context *r300,
                         unsigned width,
                         unsigned height)
{
    int i;
    BATCH_LOCALS(&r300->radeon);
    if (r300->radeon.radeonScreen->chip_family >= CHIP_FAMILY_RV515) {
        BEGIN_BATCH_NO_AUTOSTATE(3);
        OUT_BATCH_REGSEQ(R300_SC_SCISSORS_TL, 2);
        OUT_BATCH(0);
        OUT_BATCH(((width - 1) << R300_SCISSORS_X_SHIFT) |
                ((height - 1) << R300_SCISSORS_Y_SHIFT));
        END_BATCH();
        BEGIN_BATCH_NO_AUTOSTATE(16);
        for (i = 0; i < 4; i++) {
            OUT_BATCH_REGSEQ(R300_SC_CLIPRECT_TL_0 + (i * 8), 2);
            OUT_BATCH((0 << R300_CLIPRECT_X_SHIFT) | (0 << R300_CLIPRECT_Y_SHIFT));
            OUT_BATCH(((width - 1) << R300_CLIPRECT_X_SHIFT) | ((height - 1) << R300_CLIPRECT_Y_SHIFT));
        }
        OUT_BATCH_REGSEQ(R300_SC_CLIP_RULE, 1);
        OUT_BATCH(0xAAAA);
        OUT_BATCH_REGSEQ(R300_SC_SCREENDOOR, 1);
        OUT_BATCH(0xffffff);
        END_BATCH();
    } else {
        BEGIN_BATCH_NO_AUTOSTATE(3);
        OUT_BATCH_REGSEQ(R300_SC_SCISSORS_TL, 2);
        OUT_BATCH((R300_SCISSORS_OFFSET << R300_SCISSORS_X_SHIFT) |
                (R300_SCISSORS_OFFSET << R300_SCISSORS_Y_SHIFT));
        OUT_BATCH(((width + R300_SCISSORS_OFFSET - 1) << R300_SCISSORS_X_SHIFT) |
                ((height + R300_SCISSORS_OFFSET - 1) << R300_SCISSORS_Y_SHIFT));
        END_BATCH();
        BEGIN_BATCH_NO_AUTOSTATE(16);
        for (i = 0; i < 4; i++) {
            OUT_BATCH_REGSEQ(R300_SC_CLIPRECT_TL_0 + (i * 8), 2);
            OUT_BATCH((R300_SCISSORS_OFFSET << R300_CLIPRECT_X_SHIFT) | (R300_SCISSORS_OFFSET << R300_CLIPRECT_Y_SHIFT));
            OUT_BATCH(((R300_SCISSORS_OFFSET + width - 1) << R300_CLIPRECT_X_SHIFT) |
                        ((R300_SCISSORS_OFFSET + height - 1) << R300_CLIPRECT_Y_SHIFT));
        }
        OUT_BATCH_REGSEQ(R300_SC_CLIP_RULE, 1);
        OUT_BATCH(0xAAAA);
        OUT_BATCH_REGSEQ(R300_SC_SCREENDOOR, 1);
        OUT_BATCH(0xffffff);
        END_BATCH();
    }
}
d229 3
a231 64
void r300_emit_cb_setup(struct r300_context *r300,
                        struct radeon_bo *bo,
                        uint32_t offset,
                        GLuint format,
                        unsigned cpp,
                        unsigned pitch)
{
    BATCH_LOCALS(&r300->radeon);
    uint32_t cbpitch = pitch / cpp;
    uint32_t dw = 6;

    assert(offset % 32 == 0);

    switch (format) {
        case MESA_FORMAT_SL8:
        case MESA_FORMAT_A8:
        case MESA_FORMAT_L8:
        case MESA_FORMAT_I8:
            cbpitch |= R300_COLOR_FORMAT_I8;
            break;
        case MESA_FORMAT_RGB565:
        case MESA_FORMAT_RGB565_REV:
            cbpitch |= R300_COLOR_FORMAT_RGB565;
            break;
        case MESA_FORMAT_ARGB4444:
        case MESA_FORMAT_ARGB4444_REV:
            cbpitch |= R300_COLOR_FORMAT_ARGB4444;
            break;
        case MESA_FORMAT_RGBA5551:
        case MESA_FORMAT_ARGB1555:
        case MESA_FORMAT_ARGB1555_REV:
            cbpitch |= R300_COLOR_FORMAT_ARGB1555;
            break;
        case MESA_FORMAT_RGBA8888:
        case MESA_FORMAT_RGBA8888_REV:
        case MESA_FORMAT_XRGB8888:
        case MESA_FORMAT_ARGB8888:
        case MESA_FORMAT_XRGB8888_REV:
        case MESA_FORMAT_ARGB8888_REV:
        case MESA_FORMAT_SRGBA8:
        case MESA_FORMAT_SARGB8:
            cbpitch |= R300_COLOR_FORMAT_ARGB8888;
            break;
        default:
            _mesa_problem(r300->radeon.glCtx, "unexpected format in emit_cb_offset()");
            break;
    }

    if (bo->flags & RADEON_BO_FLAGS_MACRO_TILE)
        cbpitch |= R300_COLOR_TILE_ENABLE;

    if (r300->radeon.radeonScreen->kernel_mm)
        dw += 2;

    BEGIN_BATCH_NO_AUTOSTATE(dw);
    OUT_BATCH_REGSEQ(R300_RB3D_COLOROFFSET0, 1);
    OUT_BATCH_RELOC(offset, bo, offset, 0, RADEON_GEM_DOMAIN_VRAM, 0);
    OUT_BATCH_REGSEQ(R300_RB3D_COLORPITCH0, 1);
    if (!r300->radeon.radeonScreen->kernel_mm)
        OUT_BATCH(cbpitch);
    else
        OUT_BATCH_RELOC(cbpitch, bo, cbpitch, 0, RADEON_GEM_DOMAIN_VRAM, 0);
    END_BATCH();
}
d233 3
a235 21
static void emit_cb_offset_atom(struct gl_context *ctx, struct radeon_state_atom * atom)
{
    r300ContextPtr r300 = R300_CONTEXT(ctx);
    struct radeon_renderbuffer *rrb;
    uint32_t offset = r300->radeon.state.color.draw_offset;

    rrb = radeon_get_colorbuffer(&r300->radeon);
    if (!rrb || !rrb->bo) {
        fprintf(stderr, "no rrb\n");
        return;
    }

    if (RADEON_DEBUG & RADEON_STATE)
        fprintf(stderr,"rrb is %p %d %dx%d\n", rrb, offset, rrb->base.Width, rrb->base.Height);

    r300_emit_cb_setup(r300, rrb->bo, offset, rrb->base.Format, rrb->cpp, rrb->pitch);

    if (r300->radeon.radeonScreen->driScreen->dri2.enabled) {
        emit_scissor(r300, rrb->base.Width, rrb->base.Height);
    }
}
d237 2
a238 9
static int check_zb_offset(struct gl_context *ctx, struct radeon_state_atom * atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	uint32_t dw;
	dw = 6;
	if (r300->radeon.radeonScreen->kernel_mm)
		dw += 2;
	return dw;
}
d240 1
a240 7
static void emit_zb_offset(struct gl_context *ctx, struct radeon_state_atom * atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	BATCH_LOCALS(&r300->radeon);
	struct radeon_renderbuffer *rrb;
	uint32_t zbpitch;
	uint32_t dw = atom->check(ctx, atom);
d242 1
a242 3
	rrb = radeon_get_depthbuffer(&r300->radeon);
	if (!rrb)
		return;
d244 2
a245 19
	zbpitch = (rrb->pitch / rrb->cpp);
	if (!r300->radeon.radeonScreen->kernel_mm) {
	    if (rrb->bo->flags & RADEON_BO_FLAGS_MACRO_TILE) {
	        zbpitch |= R300_DEPTHMACROTILE_ENABLE;
	   }
	    if (rrb->bo->flags & RADEON_BO_FLAGS_MICRO_TILE){
	        zbpitch |= R300_DEPTHMICROTILE_TILED;
	    }
	}

	BEGIN_BATCH_NO_AUTOSTATE(dw);
	OUT_BATCH_REGSEQ(R300_ZB_DEPTHOFFSET, 1);
	OUT_BATCH_RELOC(0, rrb->bo, 0, 0, RADEON_GEM_DOMAIN_VRAM, 0);
	OUT_BATCH_REGSEQ(R300_ZB_DEPTHPITCH, 1);
    	if (!r300->radeon.radeonScreen->kernel_mm)
	    OUT_BATCH(zbpitch);
	else
	    OUT_BATCH_RELOC(cbpitch, rrb->bo, zbpitch, 0, RADEON_GEM_DOMAIN_VRAM, 0);
	END_BATCH();
d248 6
a253 26
static void emit_zstencil_format(struct gl_context *ctx, struct radeon_state_atom * atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	BATCH_LOCALS(&r300->radeon);
	struct radeon_renderbuffer *rrb;
	uint32_t format = 0;

	rrb = radeon_get_depthbuffer(&r300->radeon);
	if (!rrb)
	  format = 0;
	else {
	  if (rrb->cpp == 2)
	    format = R300_DEPTHFORMAT_16BIT_INT_Z;
	  else if (rrb->cpp == 4)
	    format = R300_DEPTHFORMAT_24BIT_INT_Z_8BIT_STENCIL;
	}

	BEGIN_BATCH_NO_AUTOSTATE(atom->cmd_size);
	OUT_BATCH(atom->cmd[0]);
	atom->cmd[1] &= ~0xf;
	atom->cmd[1] |= format;
	OUT_BATCH(atom->cmd[1]);
	OUT_BATCH(atom->cmd[2]);
	OUT_BATCH(atom->cmd[3]);
	OUT_BATCH(atom->cmd[4]);
	END_BATCH();
d256 2
a257 45
static int check_never(struct gl_context *ctx, struct radeon_state_atom *atom)
{
   return 0;
}

static int check_always(struct gl_context *ctx, struct radeon_state_atom *atom)
{
	return atom->cmd_size;
}

static int check_variable(struct gl_context *ctx, struct radeon_state_atom *atom)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	int cnt;
	if (atom->cmd[0] == CP_PACKET2) {
		return 0;
	}
	cnt = packet0_count(r300, atom->cmd);
	return cnt ? cnt + 1 : 0;
}

static int check_r500fp(struct gl_context *ctx, struct radeon_state_atom *atom)
{
	int cnt;
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	int extra = 1;
	cnt = r500fp_count(atom->cmd);
	if (r300->radeon.radeonScreen->kernel_mm)
		extra = 3;

	return cnt ? (cnt * 6) + extra : 0;
}

static int check_r500fp_const(struct gl_context *ctx, struct radeon_state_atom *atom)
{
	int cnt;
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	int extra = 1;
	cnt = r500fp_count(atom->cmd);
	if (r300->radeon.radeonScreen->kernel_mm)
		extra = 3;

	cnt = r500fp_count(atom->cmd);
	return cnt ? (cnt * 4) + extra : 0;
}
d259 5
d272 2
a273 2
      r300->radeon.hw.max_state_size += (SZ);					\
      insert_at_tail(&r300->radeon.hw.atomlist, &r300->hw.ATOM);		\
d281 2
a282 3
	int mtu;
	int has_tcl;
	int is_r500 = 0;
d284 2
a285 1
	has_tcl = r300->options.hw_tcl_enabled;
d287 1
a287 4
	if (r300->radeon.radeonScreen->chip_family >= CHIP_FAMILY_RV515)
		is_r500 = 1;

	r300->radeon.hw.max_state_size = 2 + 2;	/* reserve extra space for WAIT_IDLE and tex cache flush */
d290 1
a290 1
	if (RADEON_DEBUG & RADEON_TEXTURE) {
d295 2
a296 2
	make_empty_list(&r300->radeon.hw.atomlist);
	r300->radeon.hw.atomlist.name = "atom-list";
d300 3
a302 10
	r300->hw.vpt.cmd[R300_VPT_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_SE_VPORT_XSCALE, 6);
	ALLOC_STATE(vap_cntl, always, R300_VAP_CNTL_SIZE, 0);
	r300->hw.vap_cntl.cmd[R300_VAP_CNTL_FLUSH] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_PVS_STATE_FLUSH_REG, 1);
	r300->hw.vap_cntl.cmd[R300_VAP_CNTL_FLUSH_1] = 0;
	r300->hw.vap_cntl.cmd[R300_VAP_CNTL_CMD] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_CNTL, 1);
	if (is_r500 && !r300->radeon.radeonScreen->kernel_mm) {
	    ALLOC_STATE(vap_index_offset, always, 2, 0);
	    r300->hw.vap_index_offset.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R500_VAP_INDEX_OFFSET, 1);
	    r300->hw.vap_index_offset.cmd[1] = 0;
	}
d304 3
a306 3
	r300->hw.vte.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_SE_VTE_CNTL, 2);
	ALLOC_STATE(vap_vf_max_vtx_indx, always, 3, 0);
	r300->hw.vap_vf_max_vtx_indx.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_VF_MAX_VTX_INDX, 2);
d308 1
a308 1
	r300->hw.vap_cntl_status.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_CNTL_STATUS, 1);
d311 1
a311 1
	    cmdpacket0(r300->radeon.radeonScreen, R300_VAP_PROG_STREAM_CNTL_0, 1);
d314 1
a314 1
	    cmdpacket0(r300->radeon.radeonScreen, R300_VAP_PROG_STREAM_CNTL_EXT_0, 1);
d316 9
a324 13
	r300->hw.vic.cmd[R300_VIC_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_VTX_STATE_CNTL, 2);
	ALLOC_STATE(vap_psc_sgn_norm_cntl, always, 2, 0);
	r300->hw.vap_psc_sgn_norm_cntl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_PSC_SGN_NORM_CNTL, SGN_NORM_ZERO_CLAMP_MINUS_ONE);

	if (has_tcl) {
		ALLOC_STATE(vap_clip_cntl, always, 2, 0);
		r300->hw.vap_clip_cntl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_CLIP_CNTL, 1);
		ALLOC_STATE(vap_clip, always, 5, 0);
		r300->hw.vap_clip.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_VAP_GB_VERT_CLIP_ADJ, 4);
		ALLOC_STATE(vap_pvs_vtx_timeout_reg, always, 2, 0);
		r300->hw.vap_pvs_vtx_timeout_reg.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, VAP_PVS_VTX_TIMEOUT_REG, 1);
	}

d327 1
a327 1
	    cmdpacket0(r300->radeon.radeonScreen, R300_VAP_OUTPUT_VTX_FMT_0, 2);
d332 1
a332 1
		    cmdpacket0(r300->radeon.radeonScreen, R300_VAP_PVS_CODE_CNTL_0, 3);
d336 3
a338 9
	r300->hw.gb_enable.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GB_ENABLE, 1);
	if (!r300->radeon.radeonScreen->driScreen->dri2.enabled) {
		ALLOC_STATE(gb_misc, always, R300_GB_MISC_CMDSIZE, 0);
	} else {
		ALLOC_STATE(gb_misc, never, R300_GB_MISC_CMDSIZE, 0);
	}
	r300->hw.gb_misc.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GB_MSPOS0, 3);
	ALLOC_STATE(gb_misc2, always, R300_GB_MISC2_CMDSIZE, 0);
	r300->hw.gb_misc2.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, 0x401C, 2);
d340 5
a344 5
	r300->hw.txe.cmd[R300_TXE_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_TX_ENABLE, 1);
	ALLOC_STATE(ga_point_s0, always, 5, 0);
	r300->hw.ga_point_s0.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_POINT_S0, 4);
	ALLOC_STATE(ga_triangle_stipple, always, 2, 0);
	r300->hw.ga_triangle_stipple.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_TRIANGLE_STIPPLE, 1);
d346 3
a348 3
	r300->hw.ps.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_POINT_SIZE, 1);
	ALLOC_STATE(ga_point_minmax, always, 4, 0);
	r300->hw.ga_point_minmax.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_POINT_MINMAX, 3);
d350 5
a354 11
	r300->hw.lcntl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_LINE_CNTL, 1);
	ALLOC_STATE(ga_line_stipple, always, 4, 0);
	r300->hw.ga_line_stipple.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_LINE_STIPPLE_VALUE, 3);
        if (!r300->radeon.radeonScreen->driScreen->dri2.enabled) {
		ALLOC_STATE(shade, always, 2, 0);
        } else {
		ALLOC_STATE(shade, never, 2, 0);
        }
	r300->hw.shade.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_ENHANCE, 1);
	ALLOC_STATE(shade2, always, 4, 0);
	r300->hw.shade2.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, 0x4278, 3);
d356 1
a356 1
	r300->hw.polygon_mode.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_POLY_MODE, 3);
d358 1
a358 1
	r300->hw.fogp.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_GA_FOG_SCALE, 2);
d360 1
a360 1
	r300->hw.zbias_cntl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_SU_TEX_WRAP, 1);
d363 1
a363 1
	    cmdpacket0(r300->radeon.radeonScreen, R300_SU_POLY_OFFSET_FRONT_SCALE, 4);
d365 1
a365 1
	r300->hw.occlusion_cntl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_SU_POLY_OFFSET_ENABLE, 1);
d367 3
a369 3
	r300->hw.cul.cmd[R300_CUL_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_SU_CULL_MODE, 1);
	ALLOC_STATE(su_depth_scale, always, 3, 0);
	r300->hw.su_depth_scale.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_SU_DEPTH_SCALE, 2);
d371 24
a394 57
	r300->hw.rc.cmd[R300_RC_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_RS_COUNT, 2);
	if (is_r500) {
		ALLOC_STATE(ri, variable, R500_RI_CMDSIZE, 0);
		r300->hw.ri.cmd[R300_RI_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R500_RS_IP_0, 16);
		ALLOC_STATE(rr, variable, R300_RR_CMDSIZE, 0);
		r300->hw.rr.cmd[R300_RR_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R500_RS_INST_0, 1);
	} else {
		ALLOC_STATE(ri, variable, R300_RI_CMDSIZE, 0);
		r300->hw.ri.cmd[R300_RI_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_RS_IP_0, 8);
		ALLOC_STATE(rr, variable, R300_RR_CMDSIZE, 0);
		r300->hw.rr.cmd[R300_RR_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_RS_INST_0, 1);
	}
	ALLOC_STATE(sc_hyperz, always, 3, 0);
	r300->hw.sc_hyperz.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_SC_HYPERZ, 2);
	ALLOC_STATE(sc_screendoor, always, 2, 0);
	r300->hw.sc_screendoor.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_SC_SCREENDOOR, 1);
	ALLOC_STATE(us_out_fmt, always, 6, 0);
	r300->hw.us_out_fmt.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_US_OUT_FMT, 5);

	if (is_r500) {
		ALLOC_STATE(fp, always, R500_FP_CMDSIZE, 0);
		r300->hw.fp.cmd[R500_FP_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R500_US_CONFIG, 2);
		r300->hw.fp.cmd[R500_FP_CNTL] = R500_ZERO_TIMES_ANYTHING_EQUALS_ZERO;
		r300->hw.fp.cmd[R500_FP_CMD_1] = cmdpacket0(r300->radeon.radeonScreen, R500_US_CODE_ADDR, 3);
		r300->hw.fp.cmd[R500_FP_CMD_2] = cmdpacket0(r300->radeon.radeonScreen, R500_US_FC_CTRL, 1);
		r300->hw.fp.cmd[R500_FP_FC_CNTL] = 0; /* FIXME when we add flow control */

		ALLOC_STATE(r500fp, r500fp, R500_FPI_CMDSIZE, 0);
		r300->hw.r500fp.cmd[R300_FPI_CMD_0] =
			cmdr500fp(r300->radeon.radeonScreen, 0, 0, 0, 0);
		if (r300->radeon.radeonScreen->kernel_mm)
			r300->hw.r500fp.emit = emit_r500fp_atom;

		ALLOC_STATE(r500fp_const, r500fp_const, R500_FPP_CMDSIZE, 0);
		r300->hw.r500fp_const.cmd[R300_FPI_CMD_0] =
			cmdr500fp(r300->radeon.radeonScreen, 0, 0, 1, 0);
		if (r300->radeon.radeonScreen->kernel_mm)
			r300->hw.r500fp_const.emit = emit_r500fp_atom;
	} else {
		ALLOC_STATE(fp, always, R300_FP_CMDSIZE, 0);
		r300->hw.fp.cmd[R300_FP_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_US_CONFIG, 3);
		r300->hw.fp.cmd[R300_FP_CMD_1] = cmdpacket0(r300->radeon.radeonScreen, R300_US_CODE_ADDR_0, 4);

		ALLOC_STATE(fpt, variable, R300_FPT_CMDSIZE, 0);
		r300->hw.fpt.cmd[R300_FPT_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_US_TEX_INST_0, 0);

		ALLOC_STATE(fpi[0], variable, R300_FPI_CMDSIZE, 0);
		r300->hw.fpi[0].cmd[R300_FPI_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_US_ALU_RGB_INST_0, 1);
		ALLOC_STATE(fpi[1], variable, R300_FPI_CMDSIZE, 1);
		r300->hw.fpi[1].cmd[R300_FPI_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_US_ALU_RGB_ADDR_0, 1);
		ALLOC_STATE(fpi[2], variable, R300_FPI_CMDSIZE, 2);
		r300->hw.fpi[2].cmd[R300_FPI_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_US_ALU_ALPHA_INST_0, 1);
		ALLOC_STATE(fpi[3], variable, R300_FPI_CMDSIZE, 3);
		r300->hw.fpi[3].cmd[R300_FPI_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_US_ALU_ALPHA_ADDR_0, 1);
		ALLOC_STATE(fpp, variable, R300_FPP_CMDSIZE, 0);
		r300->hw.fpp.cmd[R300_FPP_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_PFS_PARAM_0_X, 0);
	}
d396 1
a396 1
	r300->hw.fogs.cmd[R300_FOGS_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_FG_FOG_BLEND, 1);
d398 1
a398 1
	r300->hw.fogc.cmd[R300_FOGC_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_FG_FOG_COLOR_R, 3);
d400 7
a406 5
	r300->hw.at.cmd[R300_AT_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_FG_ALPHA_FUNC, 2);
	ALLOC_STATE(fg_depth_src, always, 2, 0);
	r300->hw.fg_depth_src.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_FG_DEPTH_SRC, 1);
	ALLOC_STATE(rb3d_cctl, always, 2, 0);
	r300->hw.rb3d_cctl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_RB3D_CCTL, 1);
d408 1
a408 1
	r300->hw.bld.cmd[R300_BLD_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_RB3D_CBLEND, 2);
d410 12
a421 22
	r300->hw.cmk.cmd[R300_CMK_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, RB3D_COLOR_CHANNEL_MASK, 1);
	if (is_r500) {
		ALLOC_STATE(blend_color, always, 3, 0);
		r300->hw.blend_color.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R500_RB3D_CONSTANT_COLOR_AR, 2);
	} else {
		ALLOC_STATE(blend_color, always, 2, 0);
		r300->hw.blend_color.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_RB3D_BLEND_COLOR, 1);
	}
	ALLOC_STATE(rop, always, 2, 0);
	r300->hw.rop.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_RB3D_ROPCNTL, 1);
	ALLOC_STATE(cb, cb_offset, R300_CB_CMDSIZE, 0);
	r300->hw.cb.emit = &emit_cb_offset_atom;
	ALLOC_STATE(rb3d_dither_ctl, always, 10, 0);
	r300->hw.rb3d_dither_ctl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_RB3D_DITHER_CTL, 9);
	ALLOC_STATE(rb3d_aaresolve_ctl, always, 2, 0);
	r300->hw.rb3d_aaresolve_ctl.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_RB3D_AARESOLVE_CTL, 1);
	if (r300->radeon.radeonScreen->chip_family >= CHIP_FAMILY_RV350) {
		ALLOC_STATE(rb3d_discard_src_pixel_lte_threshold, always, 3, 0);
	} else {
		ALLOC_STATE(rb3d_discard_src_pixel_lte_threshold, never, 3, 0);
	}
	r300->hw.rb3d_discard_src_pixel_lte_threshold.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R500_RB3D_DISCARD_SRC_PIXEL_LTE_THRESHOLD, 2);
d424 1
a424 10
	    cmdpacket0(r300->radeon.radeonScreen, R300_ZB_CNTL, 3);
	if (is_r500) {
		if (r300->radeon.radeonScreen->kernel_mm)
			ALLOC_STATE(zsb, always, R300_ZSB_CMDSIZE, 0);
		else
			ALLOC_STATE(zsb, never, R300_ZSB_CMDSIZE, 0);
		r300->hw.zsb.cmd[R300_ZSB_CMD_0] =
			cmdpacket0(r300->radeon.radeonScreen, R500_ZB_STENCILREFMASK_BF, 1);
	}

d427 11
a437 13
	    cmdpacket0(r300->radeon.radeonScreen, R300_ZB_FORMAT, 4);
	r300->hw.zstencil_format.emit = emit_zstencil_format;

	ALLOC_STATE(zb, zb_offset, R300_ZB_CMDSIZE, 0);
	r300->hw.zb.emit = emit_zb_offset;
	ALLOC_STATE(zb_depthclearvalue, always, 2, 0);
	r300->hw.zb_depthclearvalue.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_ZB_DEPTHCLEARVALUE, 1);
	ALLOC_STATE(zb_zmask, always, 3, 0);
	r300->hw.zb_zmask.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_ZB_ZMASK_OFFSET, 2);
	ALLOC_STATE(zb_hiz_offset, always, 2, 0);
	r300->hw.zb_hiz_offset.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_ZB_HIZ_OFFSET, 1);
	ALLOC_STATE(zb_hiz_pitch, always, 2, 0);
	r300->hw.zb_hiz_pitch.cmd[0] = cmdpacket0(r300->radeon.radeonScreen, R300_ZB_HIZ_PITCH, 1);
a440 1
		int i;
d442 8
a449 48
		r300->hw.vpi.cmd[0] =
			cmdvpu(r300->radeon.radeonScreen, R300_PVS_CODE_START, 0);
		if (r300->radeon.radeonScreen->kernel_mm)
			r300->hw.vpi.emit = emit_vpu_state;

		if (is_r500) {
			ALLOC_STATE(vpp, vpp, R300_VPP_CMDSIZE, 0);
			r300->hw.vpp.cmd[0] =
				cmdvpu(r300->radeon.radeonScreen, R500_PVS_CONST_START, 0);
			if (r300->radeon.radeonScreen->kernel_mm)
				r300->hw.vpp.emit = emit_vpp_state;

			ALLOC_STATE(vps, vpu, R300_VPS_CMDSIZE, 0);
			r300->hw.vps.cmd[0] =
				cmdvpu(r300->radeon.radeonScreen, R500_POINT_VPORT_SCALE_OFFSET, 1);
			if (r300->radeon.radeonScreen->kernel_mm)
				r300->hw.vps.emit = emit_vpu_state;

			for (i = 0; i < 6; i++) {
				ALLOC_STATE(vpucp[i], vpu, R300_VPUCP_CMDSIZE, 0);
				r300->hw.vpucp[i].cmd[0] =
					cmdvpu(r300->radeon.radeonScreen,
							R500_PVS_UCP_START + i, 1);
				if (r300->radeon.radeonScreen->kernel_mm)
					r300->hw.vpucp[i].emit = emit_vpu_state;
			}
		} else {
			ALLOC_STATE(vpp, vpp, R300_VPP_CMDSIZE, 0);
			r300->hw.vpp.cmd[0] =
				cmdvpu(r300->radeon.radeonScreen, R300_PVS_CONST_START, 0);
			if (r300->radeon.radeonScreen->kernel_mm)
				r300->hw.vpp.emit = emit_vpp_state;

			ALLOC_STATE(vps, vpu, R300_VPS_CMDSIZE, 0);
			r300->hw.vps.cmd[0] =
				cmdvpu(r300->radeon.radeonScreen, R300_POINT_VPORT_SCALE_OFFSET, 1);
			if (r300->radeon.radeonScreen->kernel_mm)
				r300->hw.vps.emit = emit_vpu_state;

			for (i = 0; i < 6; i++) {
				ALLOC_STATE(vpucp[i], vpu, R300_VPUCP_CMDSIZE, 0);
				r300->hw.vpucp[i].cmd[0] =
					cmdvpu(r300->radeon.radeonScreen,
							R300_PVS_UCP_START + i, 1);
				if (r300->radeon.radeonScreen->kernel_mm)
					r300->hw.vpucp[i].emit = emit_vpu_state;
			}
		}
d455 1
a455 1
	    cmdpacket0(r300->radeon.radeonScreen, R300_TX_FILTER0_0, 0);
d459 1
a459 1
	    cmdpacket0(r300->radeon.radeonScreen, R300_TX_FILTER1_0, 0);
d462 1
a462 1
	r300->hw.tex.size.cmd[R300_TEX_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_TX_SIZE_0, 0);
d466 1
a466 1
	    cmdpacket0(r300->radeon.radeonScreen, R300_TX_FORMAT_0, 0);
d469 1
a469 1
	r300->hw.tex.pitch.cmd[R300_TEX_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_TX_FORMAT2_0, 0);
d471 1
a471 1
	ALLOC_STATE(tex.offset, tex_offsets, 1, 0);
d473 1
a473 2
	    cmdpacket0(r300->radeon.radeonScreen, R300_TX_OFFSET_0, 0);
	r300->hw.tex.offset.emit = &emit_tex_offsets;
d477 1
a477 1
	    cmdpacket0(r300->radeon.radeonScreen, R300_TX_CHROMA_KEY_0, 0);
d481 37
a517 1
	    cmdpacket0(r300->radeon.radeonScreen, R300_TX_BORDER_COLOR_0, 0);
d519 4
a522 7
	radeon_init_query_stateobj(&r300->radeon, R300_QUERYOBJ_CMDSIZE);
	if (r300->radeon.radeonScreen->chip_family == CHIP_FAMILY_RV530) {
		r300->radeon.query.queryobj.cmd[R300_QUERYOBJ_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, RV530_FG_ZBREG_DEST, 1);
		r300->radeon.query.queryobj.cmd[R300_QUERYOBJ_DATA_0] = RV530_FG_ZBREG_DEST_PIPE_SELECT_ALL;
	} else {
		r300->radeon.query.queryobj.cmd[R300_QUERYOBJ_CMD_0] = cmdpacket0(r300->radeon.radeonScreen, R300_SU_REG_DEST, 1);
		r300->radeon.query.queryobj.cmd[R300_QUERYOBJ_DATA_0] = R300_RASTER_PIPE_SELECT_ALL;
d524 50
a573 2
	r300->radeon.query.queryobj.cmd[R300_QUERYOBJ_CMD_1] = cmdpacket0(r300->radeon.radeonScreen, R300_ZB_ZPASS_DATA, 1);
	r300->radeon.query.queryobj.cmd[R300_QUERYOBJ_DATA_1] = 0;
d575 1
a575 2
	r300->radeon.hw.is_dirty = GL_TRUE;
	r300->radeon.hw.all_dirty = GL_TRUE;
d577 4
a580 1
	rcommonInitCmdBuf(&r300->radeon);
@


