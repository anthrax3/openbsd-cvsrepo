head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.51;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.5;
commitid	WPD6rgPryPkvXOr9;

1.5
date	2013.09.05.14.05.33;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.24;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.53.37;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.53.37;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.42;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.16.05;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.56;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************

Copyright 2000, 2001 ATI Technologies Inc., Ontario, Canada, and
                     VMware, Inc.

All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

/*
 * Authors:
 *   Keith Whitwell <keithw@@vmware.com>
 */

#include "main/glheader.h"
#include "main/imports.h"
#include "main/mtypes.h"
#include "main/macros.h"

#include "swrast_setup/swrast_setup.h"
#include "math/m_translate.h"
#include "tnl/tnl.h"

#include "radeon_context.h"
#include "radeon_ioctl.h"
#include "radeon_state.h"
#include "radeon_swtcl.h"
#include "radeon_maos.h"
#include "radeon_tcl.h"

static void emit_s0_vec(uint32_t *out, GLvoid *data, int stride, int count)
{
   int i;
   if (RADEON_DEBUG & RADEON_VERTS)
      fprintf(stderr, "%s count %d stride %d\n",
	      __FUNCTION__, count, stride);

   for (i = 0; i < count; i++) {
      out[0] = *(int *)data;
      out[1] = 0;
      out += 2;
      data += stride;
   }
}

static void emit_stq_vec(uint32_t *out, GLvoid *data, int stride, int count)
{
   int i;

   if (RADEON_DEBUG & RADEON_VERTS)
      fprintf(stderr, "%s count %d stride %d\n",
	      __FUNCTION__, count, stride);

   for (i = 0; i < count; i++) {
      out[0] = *(int *)data;
      out[1] = *(int *)(data+4);
      out[2] = *(int *)(data+12);
      out += 3;
      data += stride;
   }
}

static void emit_tex_vector(struct gl_context *ctx, struct radeon_aos *aos,
			    GLvoid *data, int size, int stride, int count)
{
   radeonContextPtr rmesa = RADEON_CONTEXT(ctx);
   int emitsize;
   uint32_t *out;

   if (RADEON_DEBUG & RADEON_VERTS)
      fprintf(stderr, "%s %d/%d\n", __FUNCTION__, count, size);

   switch (size) {
   case 4: emitsize = 3; break;
   case 3: emitsize = 3; break;
   default: emitsize = 2; break;
   }


   if (stride == 0) {
      radeonAllocDmaRegion(rmesa, &aos->bo, &aos->offset, emitsize * 4, 32);
      count = 1;
      aos->stride = 0;
   }
   else {
      radeonAllocDmaRegion(rmesa, &aos->bo, &aos->offset, emitsize * count * 4, 32);
      aos->stride = emitsize;
   }

   aos->components = emitsize;
   aos->count = count;

   /* Emit the data
    */
   radeon_bo_map(aos->bo, 1);
   out = (uint32_t*)((char*)aos->bo->ptr + aos->offset);
   switch (size) {
   case 1:
      emit_s0_vec( out, data, stride, count );
      break;
   case 2:
      radeonEmitVec8( out, data, stride, count );
      break;
   case 3:
      radeonEmitVec12( out, data, stride, count );
      break;
   case 4:
      emit_stq_vec( out, data, stride, count );
      break;
   default:
      assert(0);
      exit(1);
      break;
   }
   radeon_bo_unmap(aos->bo);
}




/* Emit any changed arrays to new GART memory, re-emit a packet to
 * update the arrays.  
 */
void radeonEmitArrays( struct gl_context *ctx, GLuint inputs )
{
   r100ContextPtr rmesa = R100_CONTEXT( ctx );
   struct vertex_buffer *VB = &TNL_CONTEXT( ctx )->vb;
   GLuint nr = 0;
   GLuint vfmt = 0;
   GLuint count = VB->Count;
   GLuint vtx, unit;
   
#if 0
   if (RADEON_DEBUG & RADEON_VERTS)
      _tnl_print_vert_flags( __FUNCTION__, inputs );
#endif

   if (1) {
      if (!rmesa->tcl.obj.buf) 
	rcommon_emit_vector( ctx, 
			     &(rmesa->tcl.aos[nr]),
			     (char *)VB->AttribPtr[_TNL_ATTRIB_POS]->data,
			     VB->AttribPtr[_TNL_ATTRIB_POS]->size,
			     VB->AttribPtr[_TNL_ATTRIB_POS]->stride,
			     count);

      switch( VB->AttribPtr[_TNL_ATTRIB_POS]->size ) {
      case 4: vfmt |= RADEON_CP_VC_FRMT_W0;
      case 3: vfmt |= RADEON_CP_VC_FRMT_Z;
      case 2: vfmt |= RADEON_CP_VC_FRMT_XY;
      default:
         break;
      }
      nr++;
   }
   

   if (inputs & VERT_BIT_NORMAL) {
      if (!rmesa->tcl.norm.buf)
	 rcommon_emit_vector( ctx, 
			      &(rmesa->tcl.aos[nr]),
			      (char *)VB->AttribPtr[_TNL_ATTRIB_NORMAL]->data,
			      3,
			      VB->AttribPtr[_TNL_ATTRIB_NORMAL]->stride,
			      count);

      vfmt |= RADEON_CP_VC_FRMT_N0;
      nr++;
   }

   if (inputs & VERT_BIT_COLOR0) {
      int emitsize;
      if (VB->AttribPtr[_TNL_ATTRIB_COLOR0]->size == 4 &&
	  (VB->AttribPtr[_TNL_ATTRIB_COLOR0]->stride != 0 ||
	   VB->AttribPtr[_TNL_ATTRIB_COLOR0]->data[0][3] != 1.0)) {
	 vfmt |= RADEON_CP_VC_FRMT_FPCOLOR | RADEON_CP_VC_FRMT_FPALPHA;
	 emitsize = 4;
      }

      else {
	 vfmt |= RADEON_CP_VC_FRMT_FPCOLOR;
	 emitsize = 3;
      }

      if (!rmesa->tcl.rgba.buf)
	rcommon_emit_vector( ctx,
			     &(rmesa->tcl.aos[nr]),
			     (char *)VB->AttribPtr[_TNL_ATTRIB_COLOR0]->data,
			     emitsize,
			     VB->AttribPtr[_TNL_ATTRIB_COLOR0]->stride,
			     count);

      nr++;
   }


   if (inputs & VERT_BIT_COLOR1) {
      if (!rmesa->tcl.spec.buf) {

	rcommon_emit_vector( ctx,
			     &(rmesa->tcl.aos[nr]),
			     (char *)VB->AttribPtr[_TNL_ATTRIB_COLOR1]->data,
			     3,
			     VB->AttribPtr[_TNL_ATTRIB_COLOR1]->stride,
			     count);
      }

      vfmt |= RADEON_CP_VC_FRMT_FPSPEC;
      nr++;
   }

/* FIXME: not sure if this is correct. May need to stitch this together with
   secondary color. It seems odd that for primary color color and alpha values
   are emitted together but for secondary color not. */
   if (inputs & VERT_BIT_FOG) {
      if (!rmesa->tcl.fog.buf)
	 rcommon_emit_vecfog( ctx,
			      &(rmesa->tcl.aos[nr]),
			      (char *)VB->AttribPtr[_TNL_ATTRIB_FOG]->data,
			      VB->AttribPtr[_TNL_ATTRIB_FOG]->stride,
			      count);

      vfmt |= RADEON_CP_VC_FRMT_FPFOG;
      nr++;
   }


   vtx = (rmesa->hw.tcl.cmd[TCL_OUTPUT_VTXFMT] &
	  ~(RADEON_TCL_VTX_Q0|RADEON_TCL_VTX_Q1|RADEON_TCL_VTX_Q2));
      
   for (unit = 0; unit < ctx->Const.MaxTextureUnits; unit++) {
      if (inputs & VERT_BIT_TEX(unit)) {
	 if (!rmesa->tcl.tex[unit].buf)
	    emit_tex_vector( ctx,
			     &(rmesa->tcl.aos[nr]),
			     (char *)VB->AttribPtr[_TNL_ATTRIB_TEX0 + unit]->data,
			     VB->AttribPtr[_TNL_ATTRIB_TEX0 + unit]->size,
			     VB->AttribPtr[_TNL_ATTRIB_TEX0 + unit]->stride,
			     count );
	 nr++;

	 vfmt |= RADEON_ST_BIT(unit);
         /* assume we need the 3rd coord if texgen is active for r/q OR at least
	    3 coords are submitted. This may not be 100% correct */
         if (VB->AttribPtr[_TNL_ATTRIB_TEX0 + unit]->size >= 3) {
	    vtx |= RADEON_Q_BIT(unit);
	    vfmt |= RADEON_Q_BIT(unit);
	 }
	 if ( (ctx->Texture.Unit[unit].TexGenEnabled & (R_BIT | Q_BIT)) )
	    vtx |= RADEON_Q_BIT(unit);
	 else if ((VB->AttribPtr[_TNL_ATTRIB_TEX0 + unit]->size >= 3) &&
	          (!ctx->Texture.Unit[unit]._Current ||
                   ctx->Texture.Unit[unit]._Current->Target != GL_TEXTURE_CUBE_MAP)) {
	    GLuint swaptexmatcol = (VB->AttribPtr[_TNL_ATTRIB_TEX0 + unit]->size - 3);
	    if (((rmesa->NeedTexMatrix >> unit) & 1) &&
		 (swaptexmatcol != ((rmesa->TexMatColSwap >> unit) & 1)))
	       radeonUploadTexMatrix( rmesa, unit, swaptexmatcol ) ;
	 }
      }
   }

   if (vtx != rmesa->hw.tcl.cmd[TCL_OUTPUT_VTXFMT]) {
      RADEON_STATECHANGE( rmesa, tcl );
      rmesa->hw.tcl.cmd[TCL_OUTPUT_VTXFMT] = vtx;
   }

   rmesa->tcl.nr_aos_components = nr;
   rmesa->tcl.vertex_format = vfmt;
}

@


1.6
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.5
log
@Merge Mesa 9.2.0
@
text
@d4 1
a4 1
                     Tungsten Graphics Inc., Cedar Park, Texas.
d32 1
a32 1
 *   Keith Whitwell <keith@@tungstengraphics.com>
d272 2
a273 1
	          ((ctx->Texture.Unit[unit]._ReallyEnabled & (TEXTURE_CUBE_BIT)) == 0)) {
@


1.4
log
@Merge Mesa 7.10.3
@
text
@a50 38
static void emit_vecfog(struct gl_context *ctx, struct radeon_aos *aos,
			GLvoid *data, int stride, int count)
{
   int i;
   uint32_t *out;
   int size = 1;
   radeonContextPtr rmesa = RADEON_CONTEXT(ctx);

   if (RADEON_DEBUG & RADEON_VERTS)
      fprintf(stderr, "%s count %d stride %d\n",
	      __FUNCTION__, count, stride);

   if (stride == 0) {
      radeonAllocDmaRegion( rmesa, &aos->bo, &aos->offset, size * 4, 32 );
      count = 1;
      aos->stride = 0;
   }
   else {
      radeonAllocDmaRegion(rmesa, &aos->bo, &aos->offset, size * 4, 32);
      aos->stride = size;
   }

   aos->components = size;
   aos->count = count;


   /* Emit the data
    */
   radeon_bo_map(aos->bo, 1);
   out = (uint32_t*)((char*)aos->bo->ptr + aos->offset);
   for (i = 0; i < count; i++) {
      out[0] = radeonComputeFogBlendFactor( ctx, *(GLfloat *)data );
      out++;
      data += stride;
   }
   radeon_bo_unmap(aos->bo);
}

a82 3



d237 5
a241 5
	 emit_vecfog( ctx,
		      &(rmesa->tcl.aos[nr]),
		      (char *)VB->AttribPtr[_TNL_ATTRIB_FOG]->data,
		      VB->AttribPtr[_TNL_ATTRIB_FOG]->stride,
		      count);
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d51 1
a51 1
static void emit_vecfog(GLcontext *ctx, struct radeon_aos *aos,
d124 1
a124 1
static void emit_tex_vector(GLcontext *ctx, struct radeon_aos *aos,
d185 1
a185 1
void radeonEmitArrays( GLcontext *ctx, GLuint inputs )
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a42 1
#include "tnl/tcontext.h"
d51 2
a52 14
#if 0
/* Usage:
 *   - from radeon_tcl_render
 *   - call radeonEmitArrays to ensure uptodate arrays in dma
 *   - emit primitives (new type?) which reference the data
 *       -- need to use elts for lineloop, quads, quadstrip/flat
 *       -- other primitives are all well-formed (need tristrip-1,fake-poly)
 *
 */
static void emit_ubyte_rgba3( GLcontext *ctx,
		       struct radeon_dma_region *rvb,
		       char *data,
		       int stride,
		       int count )
d55 3
a57 15
   radeon_color_t *out = (radeon_color_t *)(rvb->start + rvb->address);

   if (RADEON_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d stride %d out %p\n",
	      __FUNCTION__, count, stride, (void *)out);

   for (i = 0; i < count; i++) {
      out->red   = *data;
      out->green = *(data+1);
      out->blue  = *(data+2);
      out->alpha = 0xFF;
      out++;
      data += stride;
   }
}
d59 1
a59 10
static void emit_ubyte_rgba4( GLcontext *ctx,
			      struct radeon_dma_region *rvb,
			      char *data,
			      int stride,
			      int count )
{
   int i;
   int *out = (int *)(rvb->address + rvb->start);

   if (RADEON_DEBUG & DEBUG_VERTS)
a62 24
   if (stride == 4)
       COPY_DWORDS( out, data, count );
   else
      for (i = 0; i < count; i++) {
	 *out++ = LE32_TO_CPU(*(int *)data);
	 data += stride;
      }
}


static void emit_ubyte_rgba( GLcontext *ctx,
			     struct radeon_dma_region *rvb,
			     char *data,
			     int size,
			     int stride,
			     int count )
{
   radeonContextPtr rmesa = RADEON_CONTEXT(ctx);

   if (RADEON_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s %d/%d\n", __FUNCTION__, count, size);

   assert (!rvb->buf);

d64 1
a64 1
      radeonAllocDmaRegion( rmesa, rvb, 4, 4 );
d66 1
a66 3
      rvb->aos_start = GET_START(rvb);
      rvb->aos_stride = 0;
      rvb->aos_size = 1;
d69 2
a70 19
      radeonAllocDmaRegion( rmesa, rvb, 4 * count, 4 );	/* alignment? */
      rvb->aos_start = GET_START(rvb);
      rvb->aos_stride = 1;
      rvb->aos_size = 1;
   }

   /* Emit the data
    */
   switch (size) {
   case 3:
      emit_ubyte_rgba3( ctx, rvb, data, stride, count );
      break;
   case 4:
      emit_ubyte_rgba4( ctx, rvb, data, stride, count );
      break;
   default:
      assert(0);
      exit(1);
      break;
a71 33
}
#endif

#if defined(USE_X86_ASM)
#define COPY_DWORDS( dst, src, nr )					\
do {									\
	int __tmp;							\
	__asm__ __volatile__( "rep ; movsl"				\
			      : "=%c" (__tmp), "=D" (dst), "=S" (__tmp)	\
			      : "0" (nr),				\
			        "D" ((long)dst),			\
			        "S" ((long)src) );			\
} while (0)
#else
#define COPY_DWORDS( dst, src, nr )		\
do {						\
   int j;					\
   for ( j = 0 ; j < nr ; j++ )			\
      dst[j] = ((int *)src)[j];			\
   dst += nr;					\
} while (0)
#endif

static void emit_vecfog( GLcontext *ctx,
			 struct radeon_dma_region *rvb,
			 char *data,
			 int stride,
			 int count )
{
   int i;
   GLfloat *out;

   radeonContextPtr rmesa = RADEON_CONTEXT(ctx);
d73 2
a74 3
   if (RADEON_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d stride %d\n",
	      __FUNCTION__, count, stride);
a75 15
   assert (!rvb->buf);

   if (stride == 0) {
      radeonAllocDmaRegion( rmesa, rvb, 4, 4 );
      count = 1;
      rvb->aos_start = GET_START(rvb);
      rvb->aos_stride = 0;
      rvb->aos_size = 1;
   }
   else {
      radeonAllocDmaRegion( rmesa, rvb, count * 4, 4 );	/* alignment? */
      rvb->aos_start = GET_START(rvb);
      rvb->aos_stride = 1;
      rvb->aos_size = 1;
   }
d79 2
a80 1
   out = (GLfloat *)(rvb->address + rvb->start);
d86 1
d89 1
a89 159
static void emit_vec4( GLcontext *ctx,
		       struct radeon_dma_region *rvb,
		       char *data,
		       int stride,
		       int count )
{
   int i;
   int *out = (int *)(rvb->address + rvb->start);

   if (RADEON_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d stride %d\n",
	      __FUNCTION__, count, stride);

   if (stride == 4)
      COPY_DWORDS( out, data, count );
   else
      for (i = 0; i < count; i++) {
	 out[0] = *(int *)data;
	 out++;
	 data += stride;
      }
}


static void emit_vec8( GLcontext *ctx,
		       struct radeon_dma_region *rvb,
		       char *data,
		       int stride,
		       int count )
{
   int i;
   int *out = (int *)(rvb->address + rvb->start);

   if (RADEON_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d stride %d\n",
	      __FUNCTION__, count, stride);

   if (stride == 8)
      COPY_DWORDS( out, data, count*2 );
   else
      for (i = 0; i < count; i++) {
	 out[0] = *(int *)data;
	 out[1] = *(int *)(data+4);
	 out += 2;
	 data += stride;
      }
}

static void emit_vec12( GLcontext *ctx,
		       struct radeon_dma_region *rvb,
		       char *data,
		       int stride,
		       int count )
{
   int i;
   int *out = (int *)(rvb->address + rvb->start);

   if (RADEON_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d stride %d out %p data %p\n",
	      __FUNCTION__, count, stride, (void *)out, (void *)data);

   if (stride == 12)
      COPY_DWORDS( out, data, count*3 );
   else
      for (i = 0; i < count; i++) {
	 out[0] = *(int *)data;
	 out[1] = *(int *)(data+4);
	 out[2] = *(int *)(data+8);
	 out += 3;
	 data += stride;
      }
}

static void emit_vec16( GLcontext *ctx,
			struct radeon_dma_region *rvb,
			char *data,
			int stride,
			int count )
{
   int i;
   int *out = (int *)(rvb->address + rvb->start);

   if (RADEON_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d stride %d\n",
	      __FUNCTION__, count, stride);

   if (stride == 16)
      COPY_DWORDS( out, data, count*4 );
   else
      for (i = 0; i < count; i++) {
	 out[0] = *(int *)data;
	 out[1] = *(int *)(data+4);
	 out[2] = *(int *)(data+8);
	 out[3] = *(int *)(data+12);
	 out += 4;
	 data += stride;
      }
}


static void emit_vector( GLcontext *ctx,
			 struct radeon_dma_region *rvb,
			 char *data,
			 int size,
			 int stride,
			 int count )
{
   radeonContextPtr rmesa = RADEON_CONTEXT(ctx);

   if (RADEON_DEBUG & DEBUG_VERTS)
      fprintf(stderr, "%s count %d size %d stride %d\n",
	      __FUNCTION__, count, size, stride);

   assert (!rvb->buf);

   if (stride == 0) {
      radeonAllocDmaRegion( rmesa, rvb, size * 4, 4 );
      count = 1;
      rvb->aos_start = GET_START(rvb);
      rvb->aos_stride = 0;
      rvb->aos_size = size;
   }
   else {
      radeonAllocDmaRegion( rmesa, rvb, size * count * 4, 4 );	/* alignment? */
      rvb->aos_start = GET_START(rvb);
      rvb->aos_stride = size;
      rvb->aos_size = size;
   }

   /* Emit the data
    */
   switch (size) {
   case 1:
      emit_vec4( ctx, rvb, data, stride, count );
      break;
   case 2:
      emit_vec8( ctx, rvb, data, stride, count );
      break;
   case 3:
      emit_vec12( ctx, rvb, data, stride, count );
      break;
   case 4:
      emit_vec16( ctx, rvb, data, stride, count );
      break;
   default:
      assert(0);
      exit(1);
      break;
   }

}



static void emit_s0_vec( GLcontext *ctx,
			 struct radeon_dma_region *rvb,
			 char *data,
			 int stride,
			 int count )
d92 1
a92 3
   int *out = (int *)(rvb->address + rvb->start);

   if (RADEON_DEBUG & DEBUG_VERTS)
d104 1
a104 5
static void emit_stq_vec( GLcontext *ctx,
			 struct radeon_dma_region *rvb,
			 char *data,
			 int stride,
			 int count )
a106 1
   int *out = (int *)(rvb->address + rvb->start);
d108 1
a108 1
   if (RADEON_DEBUG & DEBUG_VERTS)
d124 2
a125 6
static void emit_tex_vector( GLcontext *ctx,
			     struct radeon_dma_region *rvb,
			     char *data,
			     int size,
			     int stride,
			     int count )
d129 1
d131 1
a131 1
   if (RADEON_DEBUG & DEBUG_VERTS)
a133 2
   assert (!rvb->buf);

d142 1
a142 1
      radeonAllocDmaRegion( rmesa, rvb, 4 * emitsize, 4 );
d144 1
a144 3
      rvb->aos_start = GET_START(rvb);
      rvb->aos_stride = 0;
      rvb->aos_size = emitsize;
d147 2
a148 4
      radeonAllocDmaRegion( rmesa, rvb, 4 * emitsize * count, 4 );
      rvb->aos_start = GET_START(rvb);
      rvb->aos_stride = emitsize;
      rvb->aos_size = emitsize;
d151 2
d156 2
d160 1
a160 1
      emit_s0_vec( ctx, rvb, data, stride, count ); 
d163 1
a163 1
      emit_vec8( ctx, rvb, data, stride, count );
d166 1
a166 1
      emit_vec12( ctx, rvb, data, stride, count );
d169 1
a169 1
      emit_stq_vec( ctx, rvb, data, stride, count );
d176 1
d187 1
a187 1
   radeonContextPtr rmesa = RADEON_CONTEXT( ctx );
a188 1
   struct radeon_dma_region **component = rmesa->tcl.aos_components;
d195 1
a195 1
   if (RADEON_DEBUG & DEBUG_VERTS) 
d201 6
a206 6
	 emit_vector( ctx, 
		      &rmesa->tcl.obj, 
		      (char *)VB->ObjPtr->data,
		      VB->ObjPtr->size,
		      VB->ObjPtr->stride,
		      count);
d208 1
a208 1
      switch( VB->ObjPtr->size ) {
d215 1
a215 1
      component[nr++] = &rmesa->tcl.obj;
d221 6
a226 6
	 emit_vector( ctx, 
		      &(rmesa->tcl.norm), 
		      (char *)VB->NormalPtr->data,
		      3,
		      VB->NormalPtr->stride,
		      count);
d229 1
a229 1
      component[nr++] = &rmesa->tcl.norm;
d234 3
a236 3
      if (VB->ColorPtr[0]->size == 4 &&
	  (VB->ColorPtr[0]->stride != 0 ||
	   VB->ColorPtr[0]->data[0][3] != 1.0)) {
d247 6
a252 7
	 emit_vector( ctx,
		      &(rmesa->tcl.rgba),
		      (char *)VB->ColorPtr[0]->data,
		      emitsize,
		      VB->ColorPtr[0]->stride,
		      count);

d254 1
a254 1
      component[nr++] = &rmesa->tcl.rgba;
d261 6
a266 6
	 emit_vector( ctx,
		      &rmesa->tcl.spec,
		      (char *)VB->SecondaryColorPtr[0]->data,
		      3,
		      VB->SecondaryColorPtr[0]->stride,
		      count);
d270 1
a270 1
      component[nr++] = &rmesa->tcl.spec;
d279 3
a281 3
		      &(rmesa->tcl.fog),
		      (char *)VB->FogCoordPtr->data,
		      VB->FogCoordPtr->stride,
d285 1
a285 1
      component[nr++] = &rmesa->tcl.fog;
d296 4
a299 4
			     &(rmesa->tcl.tex[unit]),
			     (char *)VB->TexCoordPtr[unit]->data,
			     VB->TexCoordPtr[unit]->size,
			     VB->TexCoordPtr[unit]->stride,
d301 1
d306 1
a306 1
         if (VB->TexCoordPtr[unit]->size >= 3) {
d312 1
a312 1
	 else if ((VB->TexCoordPtr[unit]->size >= 3) &&
d314 1
a314 1
	    GLuint swaptexmatcol = (VB->TexCoordPtr[unit]->size - 3);
a318 1
	 component[nr++] = &rmesa->tcl.tex[unit];
a330 31

void radeonReleaseArrays( GLcontext *ctx, GLuint newinputs )
{
   radeonContextPtr rmesa = RADEON_CONTEXT( ctx );
   GLuint unit;

#if 0
   if (RADEON_DEBUG & DEBUG_VERTS) 
      _tnl_print_vert_flags( __FUNCTION__, newinputs );
#endif

   if (newinputs & VERT_BIT_POS) 
     radeonReleaseDmaRegion( rmesa, &rmesa->tcl.obj, __FUNCTION__ );

   if (newinputs & VERT_BIT_NORMAL) 
      radeonReleaseDmaRegion( rmesa, &rmesa->tcl.norm, __FUNCTION__ );

   if (newinputs & VERT_BIT_COLOR0) 
      radeonReleaseDmaRegion( rmesa, &rmesa->tcl.rgba, __FUNCTION__ );

   if (newinputs & VERT_BIT_COLOR1) 
      radeonReleaseDmaRegion( rmesa, &rmesa->tcl.spec, __FUNCTION__ );
      
   if (newinputs & VERT_BIT_FOG)
      radeonReleaseDmaRegion( rmesa, &rmesa->tcl.fog, __FUNCTION__ );

   for (unit = 0 ; unit < ctx->Const.MaxTextureUnits; unit++) {
      if (newinputs & VERT_BIT_TEX(unit))
         radeonReleaseDmaRegion( rmesa, &rmesa->tcl.tex[unit], __FUNCTION__ );
   }
}
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86: xc/lib/GL/mesa/src/drv/radeon/radeon_maos_arrays.c,v 1.1 2002/10/30 12:51:55 alanh Exp $ */
d35 4
a38 4
#include "glheader.h"
#include "imports.h"
#include "mtypes.h"
#include "macros.h"
d43 1
a43 1
#include "tnl/t_context.h"
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d1 1
d36 4
a39 4
#include "main/glheader.h"
#include "main/imports.h"
#include "main/mtypes.h"
#include "main/macros.h"
d44 1
d53 37
a89 2
static void emit_vecfog(struct gl_context *ctx, struct radeon_aos *aos,
			GLvoid *data, int stride, int count)
d92 1
a92 3
   uint32_t *out;
   int size = 1;
   radeonContextPtr rmesa = RADEON_CONTEXT(ctx);
d94 1
a94 1
   if (RADEON_DEBUG & RADEON_VERTS)
d98 24
d123 1
a123 1
      radeonAllocDmaRegion( rmesa, &aos->bo, &aos->offset, size * 4, 32 );
d125 3
a127 1
      aos->stride = 0;
d130 19
a148 2
      radeonAllocDmaRegion(rmesa, &aos->bo, &aos->offset, size * 4, 32);
      aos->stride = size;
d150 33
d184 3
a186 2
   aos->components = size;
   aos->count = count;
d188 15
d206 1
a206 2
   radeon_bo_map(aos->bo, 1);
   out = (uint32_t*)((char*)aos->bo->ptr + aos->offset);
a211 1
   radeon_bo_unmap(aos->bo);
d214 159
a372 1
static void emit_s0_vec(uint32_t *out, GLvoid *data, int stride, int count)
d375 3
a377 1
   if (RADEON_DEBUG & RADEON_VERTS)
d389 5
a393 1
static void emit_stq_vec(uint32_t *out, GLvoid *data, int stride, int count)
d396 1
d398 1
a398 1
   if (RADEON_DEBUG & RADEON_VERTS)
d414 6
a419 2
static void emit_tex_vector(struct gl_context *ctx, struct radeon_aos *aos,
			    GLvoid *data, int size, int stride, int count)
a422 1
   uint32_t *out;
d424 1
a424 1
   if (RADEON_DEBUG & RADEON_VERTS)
d427 2
d437 1
a437 1
      radeonAllocDmaRegion(rmesa, &aos->bo, &aos->offset, emitsize * 4, 32);
d439 3
a441 1
      aos->stride = 0;
d444 4
a447 2
      radeonAllocDmaRegion(rmesa, &aos->bo, &aos->offset, emitsize * count * 4, 32);
      aos->stride = emitsize;
a449 2
   aos->components = emitsize;
   aos->count = count;
a452 2
   radeon_bo_map(aos->bo, 1);
   out = (uint32_t*)((char*)aos->bo->ptr + aos->offset);
d455 1
a455 1
      emit_s0_vec( out, data, stride, count );
d458 1
a458 1
      radeonEmitVec8( out, data, stride, count );
d461 1
a461 1
      radeonEmitVec12( out, data, stride, count );
d464 1
a464 1
      emit_stq_vec( out, data, stride, count );
a470 1
   radeon_bo_unmap(aos->bo);
d479 1
a479 1
void radeonEmitArrays( struct gl_context *ctx, GLuint inputs )
d481 1
a481 1
   r100ContextPtr rmesa = R100_CONTEXT( ctx );
d483 1
d490 1
a490 1
   if (RADEON_DEBUG & RADEON_VERTS)
d496 6
a501 6
	rcommon_emit_vector( ctx, 
			     &(rmesa->tcl.aos[nr]),
			     (char *)VB->AttribPtr[_TNL_ATTRIB_POS]->data,
			     VB->AttribPtr[_TNL_ATTRIB_POS]->size,
			     VB->AttribPtr[_TNL_ATTRIB_POS]->stride,
			     count);
d503 1
a503 1
      switch( VB->AttribPtr[_TNL_ATTRIB_POS]->size ) {
d510 1
a510 1
      nr++;
d516 6
a521 6
	 rcommon_emit_vector( ctx, 
			      &(rmesa->tcl.aos[nr]),
			      (char *)VB->AttribPtr[_TNL_ATTRIB_NORMAL]->data,
			      3,
			      VB->AttribPtr[_TNL_ATTRIB_NORMAL]->stride,
			      count);
d524 1
a524 1
      nr++;
d529 3
a531 3
      if (VB->AttribPtr[_TNL_ATTRIB_COLOR0]->size == 4 &&
	  (VB->AttribPtr[_TNL_ATTRIB_COLOR0]->stride != 0 ||
	   VB->AttribPtr[_TNL_ATTRIB_COLOR0]->data[0][3] != 1.0)) {
d542 7
a548 6
	rcommon_emit_vector( ctx,
			     &(rmesa->tcl.aos[nr]),
			     (char *)VB->AttribPtr[_TNL_ATTRIB_COLOR0]->data,
			     emitsize,
			     VB->AttribPtr[_TNL_ATTRIB_COLOR0]->stride,
			     count);
d550 1
a550 1
      nr++;
d557 6
a562 6
	rcommon_emit_vector( ctx,
			     &(rmesa->tcl.aos[nr]),
			     (char *)VB->AttribPtr[_TNL_ATTRIB_COLOR1]->data,
			     3,
			     VB->AttribPtr[_TNL_ATTRIB_COLOR1]->stride,
			     count);
d566 1
a566 1
      nr++;
d575 3
a577 3
		      &(rmesa->tcl.aos[nr]),
		      (char *)VB->AttribPtr[_TNL_ATTRIB_FOG]->data,
		      VB->AttribPtr[_TNL_ATTRIB_FOG]->stride,
d581 1
a581 1
      nr++;
d592 4
a595 4
			     &(rmesa->tcl.aos[nr]),
			     (char *)VB->AttribPtr[_TNL_ATTRIB_TEX0 + unit]->data,
			     VB->AttribPtr[_TNL_ATTRIB_TEX0 + unit]->size,
			     VB->AttribPtr[_TNL_ATTRIB_TEX0 + unit]->stride,
a596 1
	 nr++;
d601 1
a601 1
         if (VB->AttribPtr[_TNL_ATTRIB_TEX0 + unit]->size >= 3) {
d607 1
a607 1
	 else if ((VB->AttribPtr[_TNL_ATTRIB_TEX0 + unit]->size >= 3) &&
d609 1
a609 1
	    GLuint swaptexmatcol = (VB->AttribPtr[_TNL_ATTRIB_TEX0 + unit]->size - 3);
d614 1
d627 31
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d51 38
d121 3
d278 5
a282 5
	 rcommon_emit_vecfog( ctx,
			      &(rmesa->tcl.aos[nr]),
			      (char *)VB->AttribPtr[_TNL_ATTRIB_FOG]->data,
			      VB->AttribPtr[_TNL_ATTRIB_FOG]->stride,
			      count);
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d4 1
a4 1
                     VMware, Inc.
d32 1
a32 1
 *   Keith Whitwell <keithw@@vmware.com>
d272 1
a272 2
	          (!ctx->Texture.Unit[unit]._Current ||
                   ctx->Texture.Unit[unit]._Current->Target != GL_TEXTURE_CUBE_MAP)) {
@


