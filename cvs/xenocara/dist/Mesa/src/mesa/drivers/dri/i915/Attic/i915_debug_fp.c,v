head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.48;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.14.58.13;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.46;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#include <stdio.h>

#include "i915_reg.h"
#include "i915_debug.h"
#include "main/imports.h"

static const char *opcodes[0x20] = {
   "NOP",
   "ADD",
   "MOV",
   "MUL",
   "MAD",
   "DP2ADD",
   "DP3",
   "DP4",
   "FRC",
   "RCP",
   "RSQ",
   "EXP",
   "LOG",
   "CMP",
   "MIN",
   "MAX",
   "FLR",
   "MOD",
   "TRC",
   "SGE",
   "SLT",
   "TEXLD",
   "TEXLDP",
   "TEXLDB",
   "TEXKILL",
   "DCL",
   "0x1a",
   "0x1b",
   "0x1c",
   "0x1d",
   "0x1e",
   "0x1f",
};


static const int args[0x20] = {
   0,                           /* 0 nop */
   2,                           /* 1 add */
   1,                           /* 2 mov */
   2,                           /* 3 m ul */
   3,                           /* 4 mad */
   3,                           /* 5 dp2add */
   2,                           /* 6 dp3 */
   2,                           /* 7 dp4 */
   1,                           /* 8 frc */
   1,                           /* 9 rcp */
   1,                           /* a rsq */
   1,                           /* b exp */
   1,                           /* c log */
   3,                           /* d cmp */
   2,                           /* e min */
   2,                           /* f max */
   1,                           /* 10 flr */
   1,                           /* 11 mod */
   1,                           /* 12 trc */
   2,                           /* 13 sge */
   2,                           /* 14 slt */
   1,
   1,
   1,
   1,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
};


static const char *regname[0x8] = {
   "R",
   "T",
   "CONST",
   "S",
   "OC",
   "OD",
   "U",
   "UNKNOWN",
};

static void
print_reg_type_nr(GLuint type, GLuint nr)
{
   switch (type) {
   case REG_TYPE_T:
      switch (nr) {
      case T_DIFFUSE:
         printf("T_DIFFUSE");
         return;
      case T_SPECULAR:
         printf("T_SPECULAR");
         return;
      case T_FOG_W:
         printf("T_FOG_W");
         return;
      default:
         printf("T_TEX%d", nr);
         return;
      }
   case REG_TYPE_OC:
      if (nr == 0) {
         printf("oC");
         return;
      }
      break;
   case REG_TYPE_OD:
      if (nr == 0) {
         printf("oD");
         return;
      }
      break;
   default:
      break;
   }

   printf("%s[%d]", regname[type], nr);
}

#define REG_SWIZZLE_MASK 0x7777
#define REG_NEGATE_MASK 0x8888

#define REG_SWIZZLE_XYZW ((SRC_X << A2_SRC2_CHANNEL_X_SHIFT) |	\
		      (SRC_Y << A2_SRC2_CHANNEL_Y_SHIFT) |	\
		      (SRC_Z << A2_SRC2_CHANNEL_Z_SHIFT) |	\
		      (SRC_W << A2_SRC2_CHANNEL_W_SHIFT))


static void
print_reg_neg_swizzle(GLuint reg)
{
   int i;

   if ((reg & REG_SWIZZLE_MASK) == REG_SWIZZLE_XYZW &&
       (reg & REG_NEGATE_MASK) == 0)
      return;

   printf(".");

   for (i = 3; i >= 0; i--) {
      if (reg & (1 << ((i * 4) + 3)))
         printf("-");

      switch ((reg >> (i * 4)) & 0x7) {
      case 0:
         printf("x");
         break;
      case 1:
         printf("y");
         break;
      case 2:
         printf("z");
         break;
      case 3:
         printf("w");
         break;
      case 4:
         printf("0");
         break;
      case 5:
         printf("1");
         break;
      default:
         printf("?");
         break;
      }
   }
}


static void
print_src_reg(GLuint dword)
{
   GLuint nr = (dword >> A2_SRC2_NR_SHIFT) & REG_NR_MASK;
   GLuint type = (dword >> A2_SRC2_TYPE_SHIFT) & REG_TYPE_MASK;
   print_reg_type_nr(type, nr);
   print_reg_neg_swizzle(dword);
}


static void
print_dest_reg(GLuint dword)
{
   GLuint nr = (dword >> A0_DEST_NR_SHIFT) & REG_NR_MASK;
   GLuint type = (dword >> A0_DEST_TYPE_SHIFT) & REG_TYPE_MASK;
   print_reg_type_nr(type, nr);
   if ((dword & A0_DEST_CHANNEL_ALL) == A0_DEST_CHANNEL_ALL)
      return;
   printf(".");
   if (dword & A0_DEST_CHANNEL_X)
      printf("x");
   if (dword & A0_DEST_CHANNEL_Y)
      printf("y");
   if (dword & A0_DEST_CHANNEL_Z)
      printf("z");
   if (dword & A0_DEST_CHANNEL_W)
      printf("w");
}


#define GET_SRC0_REG(r0, r1) ((r0<<14)|(r1>>A1_SRC0_CHANNEL_W_SHIFT))
#define GET_SRC1_REG(r0, r1) ((r0<<8)|(r1>>A2_SRC1_CHANNEL_W_SHIFT))
#define GET_SRC2_REG(r)      (r)


static void
print_arith_op(GLuint opcode, const GLuint * program)
{
   if (opcode != A0_NOP) {
      print_dest_reg(program[0]);
      if (program[0] & A0_DEST_SATURATE)
         printf(" = SATURATE ");
      else
         printf(" = ");
   }

   printf("%s ", opcodes[opcode]);

   print_src_reg(GET_SRC0_REG(program[0], program[1]));
   if (args[opcode] == 1) {
      printf("\n");
      return;
   }

   printf(", ");
   print_src_reg(GET_SRC1_REG(program[1], program[2]));
   if (args[opcode] == 2) {
      printf("\n");
      return;
   }

   printf(", ");
   print_src_reg(GET_SRC2_REG(program[2]));
   printf("\n");
   return;
}


static void
print_tex_op(GLuint opcode, const GLuint * program)
{
   print_dest_reg(program[0] | A0_DEST_CHANNEL_ALL);
   printf(" = ");

   printf("%s ", opcodes[opcode]);

   printf("S[%d],", program[0] & T0_SAMPLER_NR_MASK);

   print_reg_type_nr((program[1] >> T1_ADDRESS_REG_TYPE_SHIFT) &
                     REG_TYPE_MASK,
                     (program[1] >> T1_ADDRESS_REG_NR_SHIFT) & REG_NR_MASK);
   printf("\n");
}

static void
print_dcl_op(GLuint opcode, const GLuint * program)
{
   printf("%s ", opcodes[opcode]);
   print_dest_reg(program[0] | A0_DEST_CHANNEL_ALL);
   printf("\n");
}


void
i915_disassemble_program(const GLuint * program, GLuint sz)
{
   GLuint size = program[0] & 0x1ff;
   GLint i;

   printf("\t\tBEGIN\n");

   assert(size + 2 == sz);

   program++;
   for (i = 1; i < sz; i += 3, program += 3) {
      GLuint opcode = program[0] & (0x1f << 24);

      printf("\t\t");

      if ((GLint) opcode >= A0_NOP && opcode <= A0_SLT)
         print_arith_op(opcode >> 24, program);
      else if (opcode >= T0_TEXLD && opcode <= T0_TEXKILL)
         print_tex_op(opcode >> 24, program);
      else if (opcode == D0_DCL)
         print_dcl_op(opcode >> 24, program);
      else
         printf("Unknown opcode 0x%x\n", opcode);
   }

   printf("\t\tEND\n\n");
}


@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.2
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.1
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a32 5
#include "shader/program.h"
#include "shader/prog_instruction.h"
#include "shader/prog_print.h"

#define PRINTF( ... ) _mesa_printf( __VA_ARGS__ )
d124 1
a124 1
         PRINTF("T_DIFFUSE");
d127 1
a127 1
         PRINTF("T_SPECULAR");
d130 1
a130 1
         PRINTF("T_FOG_W");
d133 1
a133 1
         PRINTF("T_TEX%d", nr);
d138 1
a138 1
         PRINTF("oC");
d144 1
a144 1
         PRINTF("oD");
d152 1
a152 1
   PRINTF("%s[%d]", regname[type], nr);
d173 1
a173 1
   PRINTF(".");
d177 1
a177 1
         PRINTF("-");
d181 1
a181 1
         PRINTF("x");
d184 1
a184 1
         PRINTF("y");
d187 1
a187 1
         PRINTF("z");
d190 1
a190 1
         PRINTF("w");
d193 1
a193 1
         PRINTF("0");
d196 1
a196 1
         PRINTF("1");
d199 1
a199 1
         PRINTF("?");
d224 1
a224 1
   PRINTF(".");
d226 1
a226 1
      PRINTF("x");
d228 1
a228 1
      PRINTF("y");
d230 1
a230 1
      PRINTF("z");
d232 1
a232 1
      PRINTF("w");
d247 1
a247 1
         PRINTF(" = SATURATE ");
d249 1
a249 1
         PRINTF(" = ");
d252 1
a252 1
   PRINTF("%s ", opcodes[opcode]);
d256 1
a256 1
      PRINTF("\n");
d260 1
a260 1
   PRINTF(", ");
d263 1
a263 1
      PRINTF("\n");
d267 1
a267 1
   PRINTF(", ");
d269 1
a269 1
   PRINTF("\n");
d278 1
a278 1
   PRINTF(" = ");
d280 1
a280 1
   PRINTF("%s ", opcodes[opcode]);
d282 1
a282 1
   PRINTF("S[%d],", program[0] & T0_SAMPLER_NR_MASK);
d287 1
a287 1
   PRINTF("\n");
d293 1
a293 1
   PRINTF("%s ", opcodes[opcode]);
d295 1
a295 1
   PRINTF("\n");
d305 1
a305 1
   PRINTF("\t\tBEGIN\n");
d313 1
a313 1
      PRINTF("\t\t");
d322 1
a322 1
         PRINTF("Unknown opcode 0x%x\n", opcode);
d325 1
a325 1
   PRINTF("\t\tEND\n\n");
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d33 5
d129 1
a129 1
         printf("T_DIFFUSE");
d132 1
a132 1
         printf("T_SPECULAR");
d135 1
a135 1
         printf("T_FOG_W");
d138 1
a138 1
         printf("T_TEX%d", nr);
d143 1
a143 1
         printf("oC");
d149 1
a149 1
         printf("oD");
d157 1
a157 1
   printf("%s[%d]", regname[type], nr);
d178 1
a178 1
   printf(".");
d182 1
a182 1
         printf("-");
d186 1
a186 1
         printf("x");
d189 1
a189 1
         printf("y");
d192 1
a192 1
         printf("z");
d195 1
a195 1
         printf("w");
d198 1
a198 1
         printf("0");
d201 1
a201 1
         printf("1");
d204 1
a204 1
         printf("?");
d229 1
a229 1
   printf(".");
d231 1
a231 1
      printf("x");
d233 1
a233 1
      printf("y");
d235 1
a235 1
      printf("z");
d237 1
a237 1
      printf("w");
d252 1
a252 1
         printf(" = SATURATE ");
d254 1
a254 1
         printf(" = ");
d257 1
a257 1
   printf("%s ", opcodes[opcode]);
d261 1
a261 1
      printf("\n");
d265 1
a265 1
   printf(", ");
d268 1
a268 1
      printf("\n");
d272 1
a272 1
   printf(", ");
d274 1
a274 1
   printf("\n");
d283 1
a283 1
   printf(" = ");
d285 1
a285 1
   printf("%s ", opcodes[opcode]);
d287 1
a287 1
   printf("S[%d],", program[0] & T0_SAMPLER_NR_MASK);
d292 1
a292 1
   printf("\n");
d298 1
a298 1
   printf("%s ", opcodes[opcode]);
d300 1
a300 1
   printf("\n");
d310 1
a310 1
   printf("\t\tBEGIN\n");
d318 1
a318 1
      printf("\t\t");
d327 1
a327 1
         printf("Unknown opcode 0x%x\n", opcode);
d330 1
a330 1
   printf("\t\tEND\n\n");
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


