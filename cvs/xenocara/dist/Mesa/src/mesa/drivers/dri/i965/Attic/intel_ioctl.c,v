head	1.2;
access;
symbols
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2008.11.02.14.58.15;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.51;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.51;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.57.18;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.28.42;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@/**************************************************************************
 * 
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/


#include <stdio.h>
#include <unistd.h>
#include <errno.h>
#include <sched.h>

#include "mtypes.h"
#include "context.h"
#include "swrast/swrast.h"

#include "intel_context.h"
#include "intel_ioctl.h"
#include "intel_batchbuffer.h"
#include "intel_blit.h"
#include "intel_regions.h"
#include "drm.h"
#include "bufmgr.h"


int intelEmitIrqLocked( struct intel_context *intel )
{
   int seq = 1;

   if (!intel->no_hw) {
      drmI830IrqEmit ie;
      int ret;
      
      assert(((*(int *)intel->driHwLock) & ~DRM_LOCK_CONT) == 
	     (DRM_LOCK_HELD|intel->hHWContext));

      ie.irq_seq = &seq;

      ret = drmCommandWriteRead( intel->driFd, DRM_I830_IRQ_EMIT, 
				 &ie, sizeof(ie) );
      if ( ret ) {
	 fprintf( stderr, "%s: drmI830IrqEmit: %d\n", __FUNCTION__, ret );
	 exit(1);
      }   

      if (0)
	 fprintf(stderr, "%s -->  %d\n", __FUNCTION__, seq );
   }

   return seq;
}

void intelWaitIrq( struct intel_context *intel, int seq )
{
   if (!intel->no_hw) {
      drmI830IrqWait iw;
      int ret;
      
      if (0)
	 fprintf(stderr, "%s %d\n", __FUNCTION__, seq );

      iw.irq_seq = seq;
	
      do {
	 ret = drmCommandWrite( intel->driFd, DRM_I830_IRQ_WAIT, &iw, sizeof(iw) );

	 /* This seems quite often to return before it should!?! 
	  */
      } while (ret == -EAGAIN || ret == -EINTR || (ret == 0 && seq > intel->sarea->last_dispatch));
      

      if ( ret ) {
	 fprintf( stderr, "%s: drmI830IrqWait: %d\n", __FUNCTION__, ret );

	 if (intel->aub_file) {
	    intel->vtbl.aub_dump_bmp( intel, intel->ctx.Visual.doubleBufferMode ? 1 : 0 );
	 }

	 exit(1);
      }
   }
}


void intel_batch_ioctl( struct intel_context *intel, 
			GLuint start_offset,
			GLuint used,
			GLboolean ignore_cliprects)
{
   drmI830BatchBuffer batch;

   assert(intel->locked);
   assert(used);

   if (0)
      fprintf(stderr, "%s used %d offset %x..%x ignore_cliprects %d\n",
	      __FUNCTION__, 
	      used, 
	      start_offset,
	      start_offset + used,
	      ignore_cliprects);

   batch.start = start_offset;
   batch.used = used;
   batch.cliprects = intel->pClipRects;
   batch.num_cliprects = ignore_cliprects ? 0 : intel->numClipRects;
   batch.DR1 = 0;
   batch.DR4 = ((((GLuint)intel->drawX) & 0xffff) | 
		(((GLuint)intel->drawY) << 16));
      
   if (INTEL_DEBUG & DEBUG_DMA)
      fprintf(stderr, "%s: 0x%x..0x%x DR4: %x cliprects: %d\n",
	      __FUNCTION__, 
	      batch.start, 
	      batch.start + batch.used * 4,
	      batch.DR4, batch.num_cliprects);

   if (!intel->no_hw) {
      if (drmCommandWrite (intel->driFd, DRM_I830_BATCHBUFFER, &batch, 
			   sizeof(batch))) {
	 fprintf(stderr, "DRM_I830_BATCHBUFFER: %d\n",  -errno);
	 UNLOCK_HARDWARE(intel);
	 exit(1);
      }
   }      
}

void intel_cmd_ioctl( struct intel_context *intel, 
		      char *buf,
		      GLuint used,
		      GLboolean ignore_cliprects)
{
   drmI830CmdBuffer cmd;

   assert(intel->locked);
   assert(used);

   cmd.buf = buf;
   cmd.sz = used;
   cmd.cliprects = intel->pClipRects;
   cmd.num_cliprects = ignore_cliprects ? 0 : intel->numClipRects;
   cmd.DR1 = 0;
   cmd.DR4 = ((((GLuint)intel->drawX) & 0xffff) | 
	      (((GLuint)intel->drawY) << 16));
      
   if (INTEL_DEBUG & DEBUG_DMA)
      fprintf(stderr, "%s: 0x%x..0x%x DR4: %x cliprects: %d\n",
	      __FUNCTION__, 
	      0, 
	      0 + cmd.sz,
	      cmd.DR4, cmd.num_cliprects);

   if (!intel->no_hw) {
      if (drmCommandWrite (intel->driFd, DRM_I830_CMDBUFFER, &cmd, 
			   sizeof(cmd))) {
	 fprintf(stderr, "DRM_I830_CMDBUFFER: %d\n",  -errno);
	 UNLOCK_HARDWARE(intel);
	 exit(1);
      }
   }      
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d108 2
a109 1
			GLuint used)
d117 1
a117 1
      fprintf(stderr, "%s used %d offset %x..%x\n",
d121 2
a122 1
	      start_offset + used);
d126 2
a127 2
   batch.cliprects = NULL;
   batch.num_cliprects = 0;
d129 2
a130 1
   batch.DR4 = 0;
d133 1
a133 1
      fprintf(stderr, "%s: 0x%x..0x%x\n",
d136 2
a137 1
	      batch.start + batch.used * 4);
d151 2
a152 1
		      GLuint used)
d162 1
a162 1
   cmd.num_cliprects = 0;
d164 2
a165 1
   cmd.DR4 = 0;
d168 1
a168 1
      fprintf(stderr, "%s: 0x%x..0x%x\n",
d171 2
a172 1
	      0 + cmd.sz);
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@a45 20
static int intelWaitIdleLocked( struct intel_context *intel )
{
   static int in_wait_idle = 0;
   unsigned int fence;

   if (!in_wait_idle) {
      if (INTEL_DEBUG & DEBUG_SYNC) {
	 fprintf(stderr, "waiting for idle\n");
      }

      in_wait_idle = 1;
      fence = bmSetFence(intel);
      intelWaitIrq(intel, fence);
      in_wait_idle = 0;

      return bmTestFence(intel, fence);
   } else {
      return 1;
   }
}
d78 1
a78 1
      int ret, lastdispatch;
a85 1
	 lastdispatch = intel->sarea->last_dispatch;
d90 1
a90 2
      } while (ret == -EAGAIN || ret == -EINTR || (ret == -EBUSY && lastdispatch != intel->sarea->last_dispatch) || (ret == 0 && seq > intel->sarea->last_dispatch)
	       || (ret == 0 && intel->sarea->last_dispatch - seq >= (1 << 24)));
d142 1
a142 5

      if (INTEL_DEBUG & DEBUG_SYNC) {
	intelWaitIdleLocked(intel);
      }
   }
d174 1
a174 5

      if (INTEL_DEBUG & DEBUG_SYNC) {
	intelWaitIdleLocked(intel);
      }
   }
@


