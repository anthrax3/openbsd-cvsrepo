head	1.6;
access;
symbols
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.09.05.14.04.35;	author jsg;	state dead;
branches;
next	1.5;

1.5
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.14.58.16;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.38;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge Mesa 9.2.0
@
text
@/**************************************************************************
 * 
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#include "main/mtypes.h"
#include "main/enums.h"
#include "main/image.h"
#include "main/teximage.h"
#include "main/texstate.h"

#include "drivers/common/meta.h"

#include "intel_screen.h"
#include "intel_context.h"
#include "intel_mipmap_tree.h"
#include "intel_regions.h"
#include "intel_fbo.h"
#include "intel_tex.h"
#include "intel_blit.h"

#define FILE_DEBUG_FLAG DEBUG_TEXTURE

/**
 * Get the intel_region which is the source for any glCopyTex[Sub]Image call.
 *
 * Do the best we can using the blitter.  A future project is to use
 * the texture engine and fragment programs for these copies.
 */
static struct intel_renderbuffer *
get_teximage_readbuffer(struct intel_context *intel, GLenum internalFormat)
{
   DBG("%s %s\n", __FUNCTION__,
       _mesa_lookup_enum_by_nr(internalFormat));

   if (_mesa_is_depth_format(internalFormat) ||
       _mesa_is_depthstencil_format(internalFormat))
      return intel_get_renderbuffer(intel->ctx.ReadBuffer, BUFFER_DEPTH);

   return intel_renderbuffer(intel->ctx.ReadBuffer->_ColorReadBuffer);
}


GLboolean
intel_copy_texsubimage(struct intel_context *intel,
                       GLenum target,
                       struct intel_texture_image *intelImage,
                       GLenum internalFormat,
                       GLint dstx, GLint dsty,
                       GLint x, GLint y, GLsizei width, GLsizei height)
{
   struct gl_context *ctx = &intel->ctx;
   struct intel_renderbuffer *irb;
   bool copy_supported = false;
   bool copy_supported_with_alpha_override = false;

   intel_prepare_render(intel);

   irb = get_teximage_readbuffer(intel, internalFormat);
   if (!intelImage->mt || !irb || !irb->region) {
      if (unlikely(INTEL_DEBUG & DEBUG_FALLBACKS))
	 fprintf(stderr, "%s fail %p %p (0x%08x)\n",
		 __FUNCTION__, intelImage->mt, irb, internalFormat);
      return GL_FALSE;
   }

   copy_supported = intelImage->base.TexFormat == irb->Base.Format;

   /* Converting ARGB8888 to XRGB8888 is trivial: ignore the alpha bits */
   if (irb->Base.Format == MESA_FORMAT_ARGB8888 &&
       intelImage->base.TexFormat == MESA_FORMAT_XRGB8888) {
      copy_supported = true;
   }

   /* Converting XRGB8888 to ARGB8888 requires setting the alpha bits to 1.0 */
   if (irb->Base.Format == MESA_FORMAT_XRGB8888 &&
       intelImage->base.TexFormat == MESA_FORMAT_ARGB8888) {
      copy_supported_with_alpha_override = true;
   }

   if (!copy_supported && !copy_supported_with_alpha_override) {
      if (unlikely(INTEL_DEBUG & DEBUG_FALLBACKS))
	 fprintf(stderr, "%s mismatched formats %s, %s\n",
		 __FUNCTION__,
		 _mesa_get_format_name(intelImage->base.TexFormat),
		 _mesa_get_format_name(irb->Base.Format));
      return GL_FALSE;
   }

   {
      drm_intel_bo *dst_bo = intel_region_buffer(intel,
						 intelImage->mt->region,
						 INTEL_WRITE_PART);
      GLuint image_x, image_y;
      GLshort src_pitch;

      /* get dest x/y in destination texture */
      intel_miptree_get_image_offset(intelImage->mt,
				     intelImage->level,
				     intelImage->face,
				     0,
				     &image_x, &image_y);

      /* The blitter can't handle Y-tiled buffers. */
      if (intelImage->mt->region->tiling == I915_TILING_Y) {
	 return GL_FALSE;
      }

      if (ctx->ReadBuffer->Name == 0) {
	 /* Flip vertical orientation for system framebuffers */
	 y = ctx->ReadBuffer->Height - (y + height);
	 src_pitch = -irb->region->pitch;
      } else {
	 /* reading from a FBO, y is already oriented the way we like */
	 src_pitch = irb->region->pitch;
      }

      /* blit from src buffer to texture */
      if (!intelEmitCopyBlit(intel,
			     intelImage->mt->cpp,
			     src_pitch,
			     irb->region->buffer,
			     0,
			     irb->region->tiling,
			     intelImage->mt->region->pitch,
			     dst_bo,
			     0,
			     intelImage->mt->region->tiling,
			     irb->draw_x + x, irb->draw_y + y,
			     image_x + dstx, image_y + dsty,
			     width, height,
			     GL_COPY)) {
	 return GL_FALSE;
      }
   }

   if (copy_supported_with_alpha_override)
      intel_set_teximage_alpha_to_one(ctx, intelImage);

   return GL_TRUE;
}


static void
intelCopyTexImage1D(struct gl_context * ctx, GLenum target, GLint level,
                    GLenum internalFormat,
                    GLint x, GLint y, GLsizei width, GLint border)
{
   struct gl_texture_unit *texUnit = _mesa_get_current_tex_unit(ctx);
   struct gl_texture_object *texObj =
      _mesa_select_tex_object(ctx, texUnit, target);
   struct gl_texture_image *texImage =
      _mesa_select_tex_image(ctx, texObj, target, level);
   int srcx, srcy, dstx, dsty, height;

   if (border)
      goto fail;

   /* Setup or redefine the texture object, mipmap tree and texture
    * image.  Don't populate yet.  
    */
   ctx->Driver.TexImage1D(ctx, target, level, internalFormat,
                          width, border,
                          GL_RGBA, CHAN_TYPE, NULL,
                          &ctx->DefaultPacking, texObj, texImage);
   srcx = x;
   srcy = y;
   dstx = 0;
   dsty = 0;
   height = 1;
   if (!_mesa_clip_copytexsubimage(ctx,
				   &dstx, &dsty,
				   &srcx, &srcy,
				   &width, &height))
      return;

   if (!intel_copy_texsubimage(intel_context(ctx), target,
                               intel_texture_image(texImage),
                               internalFormat, 0, 0, x, y, width, height))
      goto fail;

   return;

 fail:
   fallback_debug("%s - fallback to swrast\n", __FUNCTION__);
   _mesa_meta_CopyTexImage1D(ctx, target, level, internalFormat, x, y,
                             width, border);
}


static void
intelCopyTexImage2D(struct gl_context * ctx, GLenum target, GLint level,
                    GLenum internalFormat,
                    GLint x, GLint y, GLsizei width, GLsizei height,
                    GLint border)
{
   struct gl_texture_unit *texUnit = _mesa_get_current_tex_unit(ctx);
   struct gl_texture_object *texObj =
      _mesa_select_tex_object(ctx, texUnit, target);
   struct gl_texture_image *texImage =
      _mesa_select_tex_image(ctx, texObj, target, level);
   int srcx, srcy, dstx, dsty;

   if (border)
      goto fail;

   /* Setup or redefine the texture object, mipmap tree and texture
    * image.  Don't populate yet.
    */
   ctx->Driver.TexImage2D(ctx, target, level, internalFormat,
                          width, height, border,
                          GL_RGBA, GL_UNSIGNED_BYTE, NULL,
                          &ctx->DefaultPacking, texObj, texImage);

   srcx = x;
   srcy = y;
   dstx = 0;
   dsty = 0;
   if (!_mesa_clip_copytexsubimage(ctx,
				   &dstx, &dsty,
				   &srcx, &srcy,
				   &width, &height))
      return;

   if (!intel_copy_texsubimage(intel_context(ctx), target,
                               intel_texture_image(texImage),
                               internalFormat, 0, 0, x, y, width, height))
      goto fail;

   return;

 fail:
   fallback_debug("%s - fallback to swrast\n", __FUNCTION__);
   _mesa_meta_CopyTexImage2D(ctx, target, level, internalFormat, x, y,
                             width, height, border);
}


static void
intelCopyTexSubImage1D(struct gl_context * ctx, GLenum target, GLint level,
                       GLint xoffset, GLint x, GLint y, GLsizei width)
{
   struct gl_texture_unit *texUnit = _mesa_get_current_tex_unit(ctx);
   struct gl_texture_object *texObj =
      _mesa_select_tex_object(ctx, texUnit, target);
   struct gl_texture_image *texImage =
      _mesa_select_tex_image(ctx, texObj, target, level);
   GLenum internalFormat = texImage->InternalFormat;

   /* XXX need to check <border> as in above function? */

   /* Need to check texture is compatible with source format. 
    */

   if (!intel_copy_texsubimage(intel_context(ctx), target,
                               intel_texture_image(texImage),
                               internalFormat, xoffset, 0, x, y, width, 1)) {
      fallback_debug("%s - fallback to swrast\n", __FUNCTION__);
      _mesa_meta_CopyTexSubImage1D(ctx, target, level, xoffset, x, y, width);
   }
}


static void
intelCopyTexSubImage2D(struct gl_context * ctx, GLenum target, GLint level,
                       GLint xoffset, GLint yoffset,
                       GLint x, GLint y, GLsizei width, GLsizei height)
{
   struct gl_texture_unit *texUnit = _mesa_get_current_tex_unit(ctx);
   struct gl_texture_object *texObj =
      _mesa_select_tex_object(ctx, texUnit, target);
   struct gl_texture_image *texImage =
      _mesa_select_tex_image(ctx, texObj, target, level);
   GLenum internalFormat = texImage->InternalFormat;

   /* Need to check texture is compatible with source format. 
    */

   if (!intel_copy_texsubimage(intel_context(ctx), target,
                               intel_texture_image(texImage),
                               internalFormat,
                               xoffset, yoffset, x, y, width, height)) {
      fallback_debug("%s - fallback to swrast\n", __FUNCTION__);
      _mesa_meta_CopyTexSubImage2D(ctx, target, level,
                                   xoffset, yoffset, x, y, width, height);
   }
}


void
intelInitTextureCopyImageFuncs(struct dd_function_table *functions)
{
   functions->CopyTexImage1D = intelCopyTexImage1D;
   functions->CopyTexImage2D = intelCopyTexImage2D;
   functions->CopyTexSubImage1D = intelCopyTexSubImage1D;
   functions->CopyTexSubImage2D = intelCopyTexSubImage2D;
}
@


1.5
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.4
log
@Merge Mesa 7.10.3
@
text
@a37 1
#include "intel_buffers.h"
d58 2
a59 5
   switch (internalFormat) {
   case GL_DEPTH_COMPONENT:
   case GL_DEPTH_COMPONENT16:
   case GL_DEPTH24_STENCIL8_EXT:
   case GL_DEPTH_STENCIL_EXT:
d61 2
a62 3
   default:
      return intel_renderbuffer(intel->ctx.ReadBuffer->_ColorReadBuffer);
   }
d66 7
a72 7
static GLboolean
do_copy_texsubimage(struct intel_context *intel,
		    GLenum target,
                    struct intel_texture_image *intelImage,
                    GLenum internalFormat,
                    GLint dstx, GLint dsty,
                    GLint x, GLint y, GLsizei width, GLsizei height)
d151 1
a151 1
			     irb->region->draw_x + x, irb->region->draw_y + y,
d199 3
a201 3
   if (!do_copy_texsubimage(intel_context(ctx), target,
                            intel_texture_image(texImage),
                            internalFormat, 0, 0, x, y, width, height))
d247 3
a249 3
   if (!do_copy_texsubimage(intel_context(ctx), target,
                            intel_texture_image(texImage),
                            internalFormat, 0, 0, x, y, width, height))
d277 3
a279 3
   if (!do_copy_texsubimage(intel_context(ctx), target,
                            intel_texture_image(texImage),
                            internalFormat, xoffset, 0, x, y, width, 1)) {
d301 4
a304 5
   if (!do_copy_texsubimage(intel_context(ctx), target,
                            intel_texture_image(texImage),
                            internalFormat,
                            xoffset, yoffset, x, y, width, height)) {

@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a32 1
#include "main/mipmap.h"
d53 2
a54 2
static const struct intel_region *
get_teximage_source(struct intel_context *intel, GLenum internalFormat)
a55 2
   struct intel_renderbuffer *irb;

a61 4
      irb = intel_get_renderbuffer(intel->ctx.ReadBuffer, BUFFER_DEPTH);
      if (irb && irb->region && irb->region->cpp == 2)
         return irb->region;
      return NULL;
d64 1
a64 9
      irb = intel_get_renderbuffer(intel->ctx.ReadBuffer, BUFFER_DEPTH);
      if (irb && irb->region && irb->region->cpp == 4)
         return irb->region;
      return NULL;
   case GL_RGBA:
   case GL_RGBA8:
   case GL_RGB:
   case GL_RGB8:
      return intel_readbuf_region(intel);
d66 1
a66 1
      return NULL;
d79 4
a82 2
   GLcontext *ctx = &intel->ctx;
   const struct intel_region *src = get_teximage_source(intel, internalFormat);
d84 5
a88 2
   if (!intelImage->mt || !src) {
      if (INTEL_DEBUG & DEBUG_FALLBACKS)
d90 1
a90 1
		 __FUNCTION__, intelImage->mt, src, internalFormat);
d94 20
a113 4
   if (intelImage->mt->cpp != src->cpp) {
      if (INTEL_DEBUG & DEBUG_FALLBACKS)
	 fprintf(stderr, "%s fail %d vs %d cpp\n",
		 __FUNCTION__, intelImage->mt->cpp, src->cpp);
a116 2
   /* intelFlush(ctx); */
   intel_prepare_render(intel);
d131 1
a131 1
      /* Can't blit to tiled buffers with non-tile-aligned offset. */
d137 3
a139 13
	 /* reading from a window, adjust x, y */
	 const __DRIdrawable *dPriv = intel->driReadDrawable;
	 y = dPriv->y + (dPriv->h - (y + height));
	 x += dPriv->x;

	 /* Invert the data coming from the source rectangle due to GL
	  * and hardware disagreeing on where y=0 is.
	  *
	  * It appears that our offsets and pitches get mangled
	  * appropriately by the hardware, and we don't need to adjust them
	  * on our own.
	  */
	 src_pitch = -src->pitch;
d142 1
a142 1
	 src_pitch = src->pitch;
d149 1
a149 1
			     src->buffer,
d151 2
a152 2
			     src->tiling,
			     intelImage->mt->pitch,
d156 1
a156 1
			     src->draw_x + x, src->draw_y + y,
d164 3
d172 1
a172 1
intelCopyTexImage1D(GLcontext * ctx, GLenum target, GLint level,
d212 1
a212 2
   if (INTEL_DEBUG & DEBUG_FALLBACKS)
      fprintf(stderr, "%s - fallback to swrast\n", __FUNCTION__);
d219 1
a219 1
intelCopyTexImage2D(GLcontext * ctx, GLenum target, GLint level,
d260 1
a260 2
   if (INTEL_DEBUG & DEBUG_FALLBACKS)
      fprintf(stderr, "%s - fallback to swrast\n", __FUNCTION__);
d267 1
a267 1
intelCopyTexSubImage1D(GLcontext * ctx, GLenum target, GLint level,
d285 1
a285 2
      if (INTEL_DEBUG & DEBUG_FALLBACKS)
         fprintf(stderr, "%s - fallback to swrast\n", __FUNCTION__);
d292 1
a292 1
intelCopyTexSubImage2D(GLcontext * ctx, GLenum target, GLint level,
d311 1
a311 2
      if (INTEL_DEBUG & DEBUG_FALLBACKS)
         fprintf(stderr, "%s - fallback to swrast\n", __FUNCTION__);
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d32 1
d34 2
a35 1
#include "swrast/swrast.h"
a38 1
#include "intel_batchbuffer.h"
d77 2
a79 4
   case GL_RGB:
      if (intel->ctx.Visual.rgbBits == 16)
         return intel_readbuf_region(intel);
      return NULL;
d95 1
a95 3
   struct gl_texture_object *texObj = intelImage->base.TexObject;
   const struct intel_region *src =
      get_teximage_source(intel, internalFormat);
d99 9
a107 2
	 fprintf(stderr, "%s fail %p %p\n",
		 __FUNCTION__, intelImage->mt, src);
d111 2
a112 2
   intel_glFlush(ctx);
   LOCK_HARDWARE(intel);
d114 4
a117 5
      GLuint image_offset = intel_miptree_image_offset(intelImage->mt,
                                                       intelImage->face,
                                                       intelImage->level);
      const GLint orig_x = x;
      const GLint orig_y = y;
d120 11
a130 6
      /* Update dst for clipped src.  Need to also clip the source rect. */
      dstx += x - orig_x;
      dsty += y - orig_y;

      /* image_offset may be non-page-aligned, but that's illegal for tiling. */
      assert(intelImage->mt->region->tiling == I915_TILING_NONE);
d134 1
a134 1
	 __DRIdrawablePrivate *dPriv = intel->driDrawable;
d151 17
a167 20
      intelEmitCopyBlit(intel,
			intelImage->mt->cpp,
			src_pitch,
			src->buffer,
			0,
			src->tiling,
			intelImage->mt->pitch,
			intelImage->mt->region->buffer,
			image_offset,
			intelImage->mt->region->tiling,
			x, y, dstx, dsty, width, height,
			GL_COPY);
   }

   UNLOCK_HARDWARE(intel);
   intel_glFlush(ctx);

   /* GL_SGIS_generate_mipmap */
   if (intelImage->level == texObj->BaseLevel && texObj->GenerateMipmap) {
      ctx->Driver.GenerateMipmap(ctx, target, texObj);
d174 1
a174 4



void
d179 1
a179 2
   struct gl_texture_unit *texUnit =
      &ctx->Texture.Unit[ctx->Texture.CurrentUnit];
d215 4
a218 2
   _swrast_copy_teximage1d(ctx, target, level, internalFormat, x, y,
                           width, border);
d221 2
a222 1
void
d228 1
a228 2
   struct gl_texture_unit *texUnit =
      &ctx->Texture.Unit[ctx->Texture.CurrentUnit];
d238 8
a255 9
   /* Setup or redefine the texture object, mipmap tree and texture
    * image.  Don't populate yet.  
    */
   ctx->Driver.TexImage2D(ctx, target, level, internalFormat,
                          width, height, border,
                          GL_RGBA, CHAN_TYPE, NULL,
                          &ctx->DefaultPacking, texObj, texImage);


d264 4
a267 2
   _swrast_copy_teximage2d(ctx, target, level, internalFormat, x, y,
                           width, height, border);
d271 1
a271 1
void
d275 1
a275 2
   struct gl_texture_unit *texUnit =
      &ctx->Texture.Unit[ctx->Texture.CurrentUnit];
d290 3
a292 1
      _swrast_copy_texsubimage1d(ctx, target, level, xoffset, x, y, width);
d297 1
a297 2

void
d302 1
a302 2
   struct gl_texture_unit *texUnit =
      &ctx->Texture.Unit[ctx->Texture.CurrentUnit];
a308 1

d317 7
a323 1
      DBG("%s - fallback to swrast\n", __FUNCTION__);
d325 7
a331 3
      _swrast_copy_texsubimage2d(ctx, target, level,
                                 xoffset, yoffset, x, y, width, height);
   }
@


1.1
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d28 5
a32 5
#include "mtypes.h"
#include "enums.h"
#include "image.h"
#include "teximage.h"
#include "mipmap.h"
d63 1
a63 1
   case GL_DEPTH_COMPONENT16_ARB:
d101 3
a103 1
      DBG("%s fail %p %p\n", __FUNCTION__, intelImage->mt, src);
d107 1
a107 1
   intelFlush(ctx);
d115 1
a115 1
      const struct gl_framebuffer *fb = ctx->DrawBuffer;
d117 25
a141 39
      if (_mesa_clip_to_region(fb->_Xmin, fb->_Ymin, fb->_Xmax, fb->_Ymax,
                               &x, &y, &width, &height)) {
         /* Update dst for clipped src.  Need to also clip the source rect.
          */
         dstx += x - orig_x;
         dsty += y - orig_y;

         if (ctx->ReadBuffer->Name == 0) {
            /* reading from a window, adjust x, y */
            __DRIdrawablePrivate *dPriv = intel->driDrawable;
            GLuint window_y;
            /* window_y = position of window on screen if y=0=bottom */
            window_y = intel->intelScreen->height - (dPriv->y + dPriv->h);
            y = window_y + y;
            x += dPriv->x;
         }
         else {
            /* reading from a FBO */
            /* invert Y */
            y = ctx->ReadBuffer->Height - y - 1;
         }


         /* A bit of fiddling to get the blitter to work with -ve
          * pitches.  But we get a nice inverted blit this way, so it's
          * worth it:
          */
         intelEmitCopyBlit(intel,
                           intelImage->mt->cpp,
                           -src->pitch,
                           src->buffer,
                           src->height * src->pitch * src->cpp,
			   GL_FALSE,
                           intelImage->mt->pitch,
                           intelImage->mt->region->buffer,
                           image_offset,
			   intelImage->mt->region->tiled,
                           x, y + height, dstx, dsty, width, height,
			   GL_COPY); /* ? */
d143 12
a154 2
         intel_batchbuffer_flush(intel->batch);
      }
a156 1

d158 1
d162 1
a162 1
      intel_generate_mipmap(ctx, target, texObj);
d183 1
d195 10
d208 1
a208 1
                            internalFormat, 0, 0, x, y, width, 1))
d230 1
d234 10
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d28 6
a33 7
#include "main/mtypes.h"
#include "main/enums.h"
#include "main/image.h"
#include "main/teximage.h"
#include "main/texstate.h"

#include "drivers/common/meta.h"
d37 1
d53 2
a54 2
static struct intel_renderbuffer *
get_teximage_readbuffer(struct intel_context *intel, GLenum internalFormat)
d56 2
d63 5
a67 1
   case GL_DEPTH_COMPONENT16:
d70 11
a80 1
      return intel_get_renderbuffer(intel->ctx.ReadBuffer, BUFFER_DEPTH);
d82 1
a82 1
      return intel_renderbuffer(intel->ctx.ReadBuffer->_ColorReadBuffer);
d95 4
a98 6
   struct gl_context *ctx = &intel->ctx;
   struct intel_renderbuffer *irb;
   bool copy_supported = false;
   bool copy_supported_with_alpha_override = false;

   intel_prepare_render(intel);
d100 2
a101 5
   irb = get_teximage_readbuffer(intel, internalFormat);
   if (!intelImage->mt || !irb || !irb->region) {
      if (unlikely(INTEL_DEBUG & DEBUG_FALLBACKS))
	 fprintf(stderr, "%s fail %p %p (0x%08x)\n",
		 __FUNCTION__, intelImage->mt, irb, internalFormat);
d105 49
a153 1
   copy_supported = intelImage->base.TexFormat == irb->Base.Format;
d155 2
a156 4
   /* Converting ARGB8888 to XRGB8888 is trivial: ignore the alpha bits */
   if (irb->Base.Format == MESA_FORMAT_ARGB8888 &&
       intelImage->base.TexFormat == MESA_FORMAT_XRGB8888) {
      copy_supported = true;
a158 5
   /* Converting XRGB8888 to ARGB8888 requires setting the alpha bits to 1.0 */
   if (irb->Base.Format == MESA_FORMAT_XRGB8888 &&
       intelImage->base.TexFormat == MESA_FORMAT_ARGB8888) {
      copy_supported_with_alpha_override = true;
   }
d160 5
a164 7
   if (!copy_supported && !copy_supported_with_alpha_override) {
      if (unlikely(INTEL_DEBUG & DEBUG_FALLBACKS))
	 fprintf(stderr, "%s mismatched formats %s, %s\n",
		 __FUNCTION__,
		 _mesa_get_format_name(intelImage->base.TexFormat),
		 _mesa_get_format_name(irb->Base.Format));
      return GL_FALSE;
d167 2
a168 18
   {
      drm_intel_bo *dst_bo = intel_region_buffer(intel,
						 intelImage->mt->region,
						 INTEL_WRITE_PART);
      GLuint image_x, image_y;
      GLshort src_pitch;

      /* get dest x/y in destination texture */
      intel_miptree_get_image_offset(intelImage->mt,
				     intelImage->level,
				     intelImage->face,
				     0,
				     &image_x, &image_y);

      /* The blitter can't handle Y-tiled buffers. */
      if (intelImage->mt->region->tiling == I915_TILING_Y) {
	 return GL_FALSE;
      }
a169 27
      if (ctx->ReadBuffer->Name == 0) {
	 /* Flip vertical orientation for system framebuffers */
	 y = ctx->ReadBuffer->Height - (y + height);
	 src_pitch = -irb->region->pitch;
      } else {
	 /* reading from a FBO, y is already oriented the way we like */
	 src_pitch = irb->region->pitch;
      }

      /* blit from src buffer to texture */
      if (!intelEmitCopyBlit(intel,
			     intelImage->mt->cpp,
			     src_pitch,
			     irb->region->buffer,
			     0,
			     irb->region->tiling,
			     intelImage->mt->region->pitch,
			     dst_bo,
			     0,
			     intelImage->mt->region->tiling,
			     irb->region->draw_x + x, irb->region->draw_y + y,
			     image_x + dstx, image_y + dsty,
			     width, height,
			     GL_COPY)) {
	 return GL_FALSE;
      }
   }
a170 2
   if (copy_supported_with_alpha_override)
      intel_set_teximage_alpha_to_one(ctx, intelImage);
a171 2
   return GL_TRUE;
}
d174 2
a175 2
static void
intelCopyTexImage1D(struct gl_context * ctx, GLenum target, GLint level,
d179 2
a180 1
   struct gl_texture_unit *texUnit = _mesa_get_current_tex_unit(ctx);
a184 1
   int srcx, srcy, dstx, dsty, height;
a195 10
   srcx = x;
   srcy = y;
   dstx = 0;
   dsty = 0;
   height = 1;
   if (!_mesa_clip_copytexsubimage(ctx,
				   &dstx, &dsty,
				   &srcx, &srcy,
				   &width, &height))
      return;
d199 1
a199 1
                            internalFormat, 0, 0, x, y, width, height))
d205 2
a206 3
   fallback_debug("%s - fallback to swrast\n", __FUNCTION__);
   _mesa_meta_CopyTexImage1D(ctx, target, level, internalFormat, x, y,
                             width, border);
d209 2
a210 3

static void
intelCopyTexImage2D(struct gl_context * ctx, GLenum target, GLint level,
d215 2
a216 1
   struct gl_texture_unit *texUnit = _mesa_get_current_tex_unit(ctx);
a220 1
   int srcx, srcy, dstx, dsty;
d226 1
a226 1
    * image.  Don't populate yet.
d230 1
a230 1
                          GL_RGBA, GL_UNSIGNED_BYTE, NULL,
a232 9
   srcx = x;
   srcy = y;
   dstx = 0;
   dsty = 0;
   if (!_mesa_clip_copytexsubimage(ctx,
				   &dstx, &dsty,
				   &srcx, &srcy,
				   &width, &height))
      return;
d242 2
a243 3
   fallback_debug("%s - fallback to swrast\n", __FUNCTION__);
   _mesa_meta_CopyTexImage2D(ctx, target, level, internalFormat, x, y,
                             width, height, border);
d247 2
a248 2
static void
intelCopyTexSubImage1D(struct gl_context * ctx, GLenum target, GLint level,
d251 2
a252 1
   struct gl_texture_unit *texUnit = _mesa_get_current_tex_unit(ctx);
d267 1
a267 2
      fallback_debug("%s - fallback to swrast\n", __FUNCTION__);
      _mesa_meta_CopyTexSubImage1D(ctx, target, level, xoffset, x, y, width);
d272 3
a274 2
static void
intelCopyTexSubImage2D(struct gl_context * ctx, GLenum target, GLint level,
d278 2
a279 1
   struct gl_texture_unit *texUnit = _mesa_get_current_tex_unit(ctx);
d286 1
d295 4
a298 3
      fallback_debug("%s - fallback to swrast\n", __FUNCTION__);
      _mesa_meta_CopyTexSubImage2D(ctx, target, level,
                                   xoffset, yoffset, x, y, width, height);
a299 10
}


void
intelInitTextureCopyImageFuncs(struct dd_function_table *functions)
{
   functions->CopyTexImage1D = intelCopyTexImage1D;
   functions->CopyTexImage2D = intelCopyTexImage2D;
   functions->CopyTexSubImage1D = intelCopyTexSubImage1D;
   functions->CopyTexSubImage2D = intelCopyTexSubImage2D;
@


