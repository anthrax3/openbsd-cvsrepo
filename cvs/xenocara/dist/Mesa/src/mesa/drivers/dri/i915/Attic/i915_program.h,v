head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.10
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.48;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.13;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.33;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.47;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/


#ifndef I915_PROGRAM_H
#define I915_PROGRAM_H

#include "i915_context.h"
#include "i915_reg.h"



/* Having zero and one in here makes the definition of swizzle a lot
 * easier.
 */
#define UREG_TYPE_SHIFT               29
#define UREG_NR_SHIFT                 24
#define UREG_CHANNEL_X_NEGATE_SHIFT   23
#define UREG_CHANNEL_X_SHIFT          20
#define UREG_CHANNEL_Y_NEGATE_SHIFT   19
#define UREG_CHANNEL_Y_SHIFT          16
#define UREG_CHANNEL_Z_NEGATE_SHIFT   15
#define UREG_CHANNEL_Z_SHIFT          12
#define UREG_CHANNEL_W_NEGATE_SHIFT   11
#define UREG_CHANNEL_W_SHIFT          8
#define UREG_CHANNEL_ZERO_NEGATE_MBZ  5
#define UREG_CHANNEL_ZERO_SHIFT       4
#define UREG_CHANNEL_ONE_NEGATE_MBZ   1
#define UREG_CHANNEL_ONE_SHIFT        0

#define UREG_BAD          0xffffffff    /* not a valid ureg */

#define X    SRC_X
#define Y    SRC_Y
#define Z    SRC_Z
#define W    SRC_W
#define ZERO SRC_ZERO
#define ONE  SRC_ONE

/* Construct a ureg:
 */
#define UREG( type, nr ) (((type)<< UREG_TYPE_SHIFT) |		\
			  ((nr)  << UREG_NR_SHIFT) |		\
			  (X     << UREG_CHANNEL_X_SHIFT) |	\
			  (Y     << UREG_CHANNEL_Y_SHIFT) |	\
			  (Z     << UREG_CHANNEL_Z_SHIFT) |	\
			  (W     << UREG_CHANNEL_W_SHIFT) |	\
			  (ZERO  << UREG_CHANNEL_ZERO_SHIFT) |	\
			  (ONE   << UREG_CHANNEL_ONE_SHIFT))

#define GET_CHANNEL_SRC( reg, channel ) ((reg<<(channel*4)) & (0xf<<20))
#define CHANNEL_SRC( src, channel ) (src>>(channel*4))

#define GET_UREG_TYPE(reg) (((reg)>>UREG_TYPE_SHIFT)&REG_TYPE_MASK)
#define GET_UREG_NR(reg)   (((reg)>>UREG_NR_SHIFT)&REG_NR_MASK)



#define UREG_XYZW_CHANNEL_MASK 0x00ffff00

/* One neat thing about the UREG representation:  
 */
static INLINE int
swizzle(int reg, int x, int y, int z, int w)
{
   return ((reg & ~UREG_XYZW_CHANNEL_MASK) |
           CHANNEL_SRC(GET_CHANNEL_SRC(reg, x), 0) |
           CHANNEL_SRC(GET_CHANNEL_SRC(reg, y), 1) |
           CHANNEL_SRC(GET_CHANNEL_SRC(reg, z), 2) |
           CHANNEL_SRC(GET_CHANNEL_SRC(reg, w), 3));
}

/* Another neat thing about the UREG representation:  
 */
static INLINE int
negate(int reg, int x, int y, int z, int w)
{
   return reg ^ (((x & 1) << UREG_CHANNEL_X_NEGATE_SHIFT) |
                 ((y & 1) << UREG_CHANNEL_Y_NEGATE_SHIFT) |
                 ((z & 1) << UREG_CHANNEL_Z_NEGATE_SHIFT) |
                 ((w & 1) << UREG_CHANNEL_W_NEGATE_SHIFT));
}


extern GLuint i915_get_temp(struct i915_fragment_program *p);
extern GLuint i915_get_utemp(struct i915_fragment_program *p);
extern void i915_release_utemps(struct i915_fragment_program *p);


extern GLuint i915_emit_texld(struct i915_fragment_program *p,
                              GLuint live_regs,
                              GLuint dest,
                              GLuint destmask,
                              GLuint sampler, GLuint coord, GLuint op);

extern GLuint i915_emit_arith(struct i915_fragment_program *p,
                              GLuint op,
                              GLuint dest,
                              GLuint mask,
                              GLuint saturate,
                              GLuint src0, GLuint src1, GLuint src2);

extern GLuint i915_emit_decl(struct i915_fragment_program *p,
                             GLuint type, GLuint nr, GLuint d0_flags);


extern GLuint i915_emit_const1f(struct i915_fragment_program *p, GLfloat c0);

extern GLuint i915_emit_const2f(struct i915_fragment_program *p,
                                GLfloat c0, GLfloat c1);

extern GLuint i915_emit_const4fv(struct i915_fragment_program *p,
                                 const GLfloat * c);

extern GLuint i915_emit_const4f(struct i915_fragment_program *p,
                                GLfloat c0, GLfloat c1,
                                GLfloat c2, GLfloat c3);


extern GLuint i915_emit_param4fv(struct i915_fragment_program *p,
                                 const GLfloat * values);

extern void i915_program_error(struct i915_fragment_program *p,
                               const char *fmt, ...);

extern void i915_init_program(struct i915_context *i915,
                              struct i915_fragment_program *p);

extern void i915_upload_program(struct i915_context *i915,
                                struct i915_fragment_program *p);

extern void i915_fini_program(struct i915_fragment_program *p);

extern void i915_update_program(struct gl_context *ctx);

#endif
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 7.10.3
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d158 1
a158 1
extern void i915_update_program(GLcontext *ctx);
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d148 1
a148 1
                               const char *msg);
d158 1
a158 2


@


1.1
log
@Initial revision
@
text
@d51 1
a51 1
#define UREG_CHANNEL_ZERO_SHIFT       4      
d53 1
a53 1
#define UREG_CHANNEL_ONE_SHIFT        0      
d55 1
a55 1
#define UREG_BAD          0xffffffff /* not a valid ureg */
d87 2
a88 1
static __inline int swizzle( int reg, int x, int y, int z, int w )
d91 4
a94 4
	   CHANNEL_SRC( GET_CHANNEL_SRC( reg, x ), 0 ) |
	   CHANNEL_SRC( GET_CHANNEL_SRC( reg, y ), 1 ) |
	   CHANNEL_SRC( GET_CHANNEL_SRC( reg, z ), 2 ) |
	   CHANNEL_SRC( GET_CHANNEL_SRC( reg, w ), 3 ));
d99 2
a100 1
static __inline int negate( int reg, int x, int y, int z, int w )
d102 4
a105 4
   return reg ^ (((x&1)<<UREG_CHANNEL_X_NEGATE_SHIFT)|
		 ((y&1)<<UREG_CHANNEL_Y_NEGATE_SHIFT)|
		 ((z&1)<<UREG_CHANNEL_Z_NEGATE_SHIFT)|
		 ((w&1)<<UREG_CHANNEL_W_NEGATE_SHIFT));
d109 3
a111 3
extern GLuint i915_get_temp( struct i915_fragment_program *p );
extern GLuint i915_get_utemp( struct i915_fragment_program *p );
extern void i915_release_utemps( struct i915_fragment_program *p );
d114 5
a118 6
extern GLuint i915_emit_texld( struct i915_fragment_program *p,
			      GLuint dest,
			      GLuint destmask,
			      GLuint sampler,
			      GLuint coord,
			      GLuint op );
d120 6
a125 8
extern GLuint i915_emit_arith( struct i915_fragment_program *p,
			      GLuint op,
			      GLuint dest,
			      GLuint mask,
			      GLuint saturate,
			      GLuint src0,
			      GLuint src1,
			      GLuint src2 );
d127 2
a128 2
extern GLuint i915_emit_decl( struct i915_fragment_program *p,
			     GLuint type, GLuint nr, GLuint d0_flags );
d131 1
a131 2
extern GLuint i915_emit_const1f( struct i915_fragment_program *p, 
				GLfloat c0 );
d133 2
a134 2
extern GLuint i915_emit_const2f( struct i915_fragment_program *p, 
				GLfloat c0, GLfloat c1 );
d136 2
a137 2
extern GLuint i915_emit_const4fv( struct i915_fragment_program *p,
				 const GLfloat *c );
d139 3
a141 3
extern GLuint i915_emit_const4f( struct i915_fragment_program *p, 
				GLfloat c0, GLfloat c1, 
				GLfloat c2, GLfloat c3 );
d144 2
a145 2
extern GLuint i915_emit_param4fv( struct i915_fragment_program *p, 
				 const GLfloat *values );
d147 2
a148 2
extern void i915_program_error( struct i915_fragment_program *p,
                                const char *msg );
d150 2
a151 2
extern void i915_init_program( i915ContextPtr i915,
			      struct i915_fragment_program *p );
d153 2
a154 2
extern void i915_upload_program( i915ContextPtr i915, 
				struct i915_fragment_program *p );
d156 1
a156 1
extern void i915_fini_program( struct i915_fragment_program *p );
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d51 1
a51 1
#define UREG_CHANNEL_ZERO_SHIFT       4
d53 1
a53 1
#define UREG_CHANNEL_ONE_SHIFT        0
d55 1
a55 1
#define UREG_BAD          0xffffffff    /* not a valid ureg */
d87 1
a87 2
static INLINE int
swizzle(int reg, int x, int y, int z, int w)
d90 4
a93 4
           CHANNEL_SRC(GET_CHANNEL_SRC(reg, x), 0) |
           CHANNEL_SRC(GET_CHANNEL_SRC(reg, y), 1) |
           CHANNEL_SRC(GET_CHANNEL_SRC(reg, z), 2) |
           CHANNEL_SRC(GET_CHANNEL_SRC(reg, w), 3));
d98 1
a98 2
static INLINE int
negate(int reg, int x, int y, int z, int w)
d100 4
a103 4
   return reg ^ (((x & 1) << UREG_CHANNEL_X_NEGATE_SHIFT) |
                 ((y & 1) << UREG_CHANNEL_Y_NEGATE_SHIFT) |
                 ((z & 1) << UREG_CHANNEL_Z_NEGATE_SHIFT) |
                 ((w & 1) << UREG_CHANNEL_W_NEGATE_SHIFT));
d107 3
a109 3
extern GLuint i915_get_temp(struct i915_fragment_program *p);
extern GLuint i915_get_utemp(struct i915_fragment_program *p);
extern void i915_release_utemps(struct i915_fragment_program *p);
d112 6
a117 5
extern GLuint i915_emit_texld(struct i915_fragment_program *p,
                              GLuint live_regs,
                              GLuint dest,
                              GLuint destmask,
                              GLuint sampler, GLuint coord, GLuint op);
d119 8
a126 6
extern GLuint i915_emit_arith(struct i915_fragment_program *p,
                              GLuint op,
                              GLuint dest,
                              GLuint mask,
                              GLuint saturate,
                              GLuint src0, GLuint src1, GLuint src2);
d128 2
a129 2
extern GLuint i915_emit_decl(struct i915_fragment_program *p,
                             GLuint type, GLuint nr, GLuint d0_flags);
d132 2
a133 1
extern GLuint i915_emit_const1f(struct i915_fragment_program *p, GLfloat c0);
d135 2
a136 2
extern GLuint i915_emit_const2f(struct i915_fragment_program *p,
                                GLfloat c0, GLfloat c1);
d138 2
a139 2
extern GLuint i915_emit_const4fv(struct i915_fragment_program *p,
                                 const GLfloat * c);
d141 3
a143 3
extern GLuint i915_emit_const4f(struct i915_fragment_program *p,
                                GLfloat c0, GLfloat c1,
                                GLfloat c2, GLfloat c3);
d146 2
a147 2
extern GLuint i915_emit_param4fv(struct i915_fragment_program *p,
                                 const GLfloat * values);
d149 2
a150 2
extern void i915_program_error(struct i915_fragment_program *p,
                               const char *fmt, ...);
d152 7
a158 2
extern void i915_init_program(struct i915_context *i915,
                              struct i915_fragment_program *p);
a159 2
extern void i915_upload_program(struct i915_context *i915,
                                struct i915_fragment_program *p);
a160 1
extern void i915_fini_program(struct i915_fragment_program *p);
a161 1
extern void i915_update_program(struct gl_context *ctx);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
@


