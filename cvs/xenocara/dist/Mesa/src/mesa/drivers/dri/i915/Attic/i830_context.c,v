head	1.10;
access;
symbols
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.12.23.05.17.48;	author jsg;	state dead;
branches;
next	1.9;
commitid	TnlogFl9nOv2eaRf;

1.9
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.8;
commitid	4ry2gvZGMXkCUD2n;

1.8
date	2015.01.25.14.41.20;	author jsg;	state Exp;
branches;
next	1.7;
commitid	mcxB0JvoI9gTDYXU;

1.7
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	WPD6rgPryPkvXOr9;

1.6
date	2013.09.05.14.04.12;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.13;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.30;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.18;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.46;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.11.20;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.48.27;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.10
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 * 
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#include "i830_context.h"
#include "main/api_exec.h"
#include "main/imports.h"
#include "main/version.h"
#include "main/vtxfmt.h"
#include "tnl/tnl.h"
#include "tnl/t_vertex.h"
#include "tnl/t_context.h"
#include "tnl/t_pipeline.h"
#include "intel_tris.h"
#include "../glsl/ralloc.h"

/***************************************
 * Mesa's Driver Functions
 ***************************************/

static void
i830InitDriverFunctions(struct dd_function_table *functions)
{
   intelInitDriverFunctions(functions);
   i830InitStateFuncs(functions);
}

extern const struct tnl_pipeline_stage *intel_pipeline[];

bool
i830CreateContext(int api,
                  const struct gl_config * mesaVis,
                  __DRIcontext * driContextPriv,
                  unsigned major_version,
                  unsigned minor_version,
                  uint32_t flags,
                  unsigned *error,
                  void *sharedContextPrivate)
{
   struct dd_function_table functions;
   struct i830_context *i830 = rzalloc(NULL, struct i830_context);
   struct intel_context *intel = &i830->intel;
   struct gl_context *ctx = &intel->ctx;

   if (!i830) {
      *error = __DRI_CTX_ERROR_NO_MEMORY;
      return false;
   }

   i830InitVtbl(i830);
   i830InitDriverFunctions(&functions);

   if (!intelInitContext(intel, __DRI_API_OPENGL,
                         major_version, minor_version, flags,
                         mesaVis, driContextPriv,
                         sharedContextPrivate, &functions,
                         error)) {
      ralloc_free(i830);
      return false;
   }

   intel_init_texture_formats(ctx);

   _math_matrix_ctr(&intel->ViewportMatrix);

   /* Initialize swrast, tnl driver tables: */
   intelInitTriFuncs(ctx);

   /* Install the customized pipeline: */
   _tnl_destroy_pipeline(ctx);
   _tnl_install_pipeline(ctx, intel_pipeline);

   if (intel->no_rast)
      FALLBACK(intel, INTEL_FALLBACK_USER, 1);

   intel->ctx.Const.MaxTextureUnits = I830_TEX_UNITS;
   intel->ctx.Const.Program[MESA_SHADER_FRAGMENT].MaxTextureImageUnits = I830_TEX_UNITS;
   intel->ctx.Const.MaxTextureCoordUnits = I830_TEX_UNITS;

   /* Advertise the full hardware capabilities.  The new memory
    * manager should cope much better with overload situations:
    */
   ctx->Const.MaxTextureLevels = 12;
   ctx->Const.Max3DTextureLevels = 9;
   ctx->Const.MaxCubeTextureLevels = 11;
   ctx->Const.MaxTextureRectSize = (1 << 11);
   ctx->Const.MaxTextureUnits = I830_TEX_UNITS;

   ctx->Const.MaxTextureMaxAnisotropy = 2.0;

   ctx->Const.MaxDrawBuffers = 1;
   ctx->Const.QueryCounterBits.SamplesPassed = 0;

   _tnl_init_vertices(ctx, ctx->Const.MaxArrayLockSize + 12,
                      18 * sizeof(GLfloat));

   intel->verts = TNL_CONTEXT(ctx)->clipspace.vertex_buf;

   i830InitState(i830);

   _tnl_allow_vertex_fog(ctx, 1);
   _tnl_allow_pixel_fog(ctx, 0);

   _mesa_compute_version(ctx);

   _mesa_initialize_dispatch_tables(ctx);
   _mesa_initialize_vbo_vtxfmt(ctx);

   return true;
}
@


1.9
log
@Merge Mesa 10.2.9
@
text
@@


1.8
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d38 1
a38 1
#include "util/ralloc.h"
@


1.7
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d38 1
a38 1
#include "../glsl/ralloc.h"
@


1.6
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d59 1
d77 1
a77 1
                         major_version, minor_version,
d100 1
a100 1
   intel->ctx.Const.FragmentProgram.MaxTextureImageUnits = I830_TEX_UNITS;
@


1.5
log
@Merge Mesa 7.10.3
@
text
@d29 1
d31 2
a36 1
#include "intel_span.h"
d38 1
d53 3
a55 2
GLboolean
i830CreateContext(const struct gl_config * mesaVis,
d57 3
d63 1
a63 1
   struct i830_context *i830 = CALLOC_STRUCT(i830_context);
d66 5
a70 2
   if (!i830)
      return GL_FALSE;
d75 7
a81 4
   if (!intelInitContext(intel, __DRI_API_OPENGL, mesaVis, driContextPriv,
                         sharedContextPrivate, &functions)) {
      FREE(i830);
      return GL_FALSE;
d84 2
a88 1
   intelInitSpanFuncs(ctx);
d99 1
a99 1
   intel->ctx.Const.MaxTextureImageUnits = I830_TEX_UNITS;
d114 1
d126 6
a131 1
   return GL_TRUE;
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a29 1
#include "texmem.h"
d51 1
a51 1
i830CreateContext(const __GLcontextModes * mesaVis,
d58 1
a58 1
   GLcontext *ctx = &intel->ctx;
d65 1
a65 1
   if (!intelInitContext(intel, mesaVis, driContextPriv,
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a30 1
#include "intel_tex.h"
a34 1
#include "utils.h"
a35 1
#include "intel_pixel.h"
a46 1
   i830InitTextureFuncs(functions);
d53 1
a53 1
                  __DRIcontextPrivate * driContextPriv,
d72 2
d98 4
a107 1
   i830InitMetaFuncs(i830);
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d29 1
a29 1
#include "imports.h"
d83 3
@


1.1
log
@Initial revision
@
text
@d35 1
d37 3
d45 2
a46 1
static const struct dri_extension i830_extensions[] =
d48 3
a50 10
    { "GL_ARB_texture_env_crossbar",       NULL },
    { NULL,                                NULL }
};


static void i830InitDriverFunctions( struct dd_function_table *functions )
{
   intelInitDriverFunctions( functions );
   i830InitStateFuncs( functions );
   i830InitTextureFuncs( functions );
d53 1
d55 4
a58 3
GLboolean i830CreateContext( const __GLcontextModes *mesaVis,
			    __DRIcontextPrivate *driContextPriv,
			    void *sharedContextPrivate)
d61 2
a62 2
   i830ContextPtr i830 = (i830ContextPtr) CALLOC_STRUCT(i830_context);
   intelContextPtr intel = &i830->intel;
d64 2
a65 2
   GLuint i;
   if (!i830) return GL_FALSE;
d67 2
a68 2
   i830InitVtbl( i830 );
   i830InitDriverFunctions( &functions );
d70 2
a71 2
   if (!intelInitContext( intel, mesaVis, driContextPriv,
			  sharedContextPrivate, &functions )) {
d76 8
d88 2
a89 14
   intel->nr_heaps = 1;
   intel->texture_heaps[0] = 
      driCreateTextureHeap( 0, intel,
			    intel->intelScreen->tex.size,
			    12,
			    I830_NR_TEX_REGIONS,
			    intel->sarea->texList,
			    (unsigned *) & intel->sarea->texAge,
			    & intel->swapped,
			    sizeof( struct i830_texture_object ),
			    (destroy_texture_object_t *)intelDestroyTexObj );

   /* FIXME: driCalculateMaxTextureLevels assumes that mipmaps are tightly
    * FIXME: packed, but they're not in Intel graphics hardware.
d91 5
a95 13
   intel->ctx.Const.MaxTextureUnits = I830_TEX_UNITS;
   i = driQueryOptioni( &intel->optionCache, "allow_large_textures");
   driCalculateMaxTextureLevels( intel->texture_heaps,
				 intel->nr_heaps,
				 &intel->ctx.Const,
				 4,
				 11, /* max 2D texture size is 2048x2048 */
				 8,  /* max 3D texture size is 256^3 */
				 10, /* max CUBE texture size is 1024x1024 */
				 11, /* max RECT. supported */
				 12,
				 GL_FALSE,
				 i );
d97 2
a98 2
   _tnl_init_vertices( ctx, ctx->Const.MaxArrayLockSize + 12, 
		       18 * sizeof(GLfloat) );
d102 2
a103 3
   driInitExtensions( ctx, i830_extensions, GL_FALSE );

   i830InitState( i830 );
d105 2
a106 3

   _tnl_allow_vertex_fog( ctx, 1 ); 
   _tnl_allow_pixel_fog( ctx, 0 ); 
a109 1

@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d29 3
a31 1
#include "main/imports.h"
d35 1
a35 3
#include "tnl/t_pipeline.h"
#include "intel_span.h"
#include "intel_tris.h"
d41 1
a41 2
static void
i830InitDriverFunctions(struct dd_function_table *functions)
d43 10
a52 2
   intelInitDriverFunctions(functions);
   i830InitStateFuncs(functions);
a54 1
extern const struct tnl_pipeline_stage *intel_pipeline[];
d56 3
a58 4
GLboolean
i830CreateContext(const struct gl_config * mesaVis,
                  __DRIcontext * driContextPriv,
                  void *sharedContextPrivate)
d61 5
a65 5
   struct i830_context *i830 = CALLOC_STRUCT(i830_context);
   struct intel_context *intel = &i830->intel;
   struct gl_context *ctx = &intel->ctx;
   if (!i830)
      return GL_FALSE;
d67 2
a68 2
   i830InitVtbl(i830);
   i830InitDriverFunctions(&functions);
d70 2
a71 2
   if (!intelInitContext(intel, __DRI_API_OPENGL, mesaVis, driContextPriv,
                         sharedContextPrivate, &functions)) {
a75 13
   _math_matrix_ctr(&intel->ViewportMatrix);

   /* Initialize swrast, tnl driver tables: */
   intelInitSpanFuncs(ctx);
   intelInitTriFuncs(ctx);

   /* Install the customized pipeline: */
   _tnl_destroy_pipeline(ctx);
   _tnl_install_pipeline(ctx, intel_pipeline);

   if (intel->no_rast)
      FALLBACK(intel, INTEL_FALLBACK_USER, 1);

d80 14
a93 2
   /* Advertise the full hardware capabilities.  The new memory
    * manager should cope much better with overload situations:
d95 13
a107 5
   ctx->Const.MaxTextureLevels = 12;
   ctx->Const.Max3DTextureLevels = 9;
   ctx->Const.MaxCubeTextureLevels = 11;
   ctx->Const.MaxTextureRectSize = (1 << 11);
   ctx->Const.MaxTextureUnits = I830_TEX_UNITS;
d109 2
a110 1
   ctx->Const.MaxTextureMaxAnisotropy = 2.0;
d112 1
a112 1
   ctx->Const.MaxDrawBuffers = 1;
d114 1
a114 2
   _tnl_init_vertices(ctx, ctx->Const.MaxArrayLockSize + 12,
                      18 * sizeof(GLfloat));
d116 1
a116 1
   intel->verts = TNL_CONTEXT(ctx)->clipspace.vertex_buf;
a117 1
   i830InitState(i830);
d119 2
a120 2
   _tnl_allow_vertex_fog(ctx, 1);
   _tnl_allow_pixel_fog(ctx, 0);
d124 1
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@a28 1
#include "main/api_exec.h"
a29 2
#include "main/version.h"
#include "main/vtxfmt.h"
d34 1
a35 1
#include "../glsl/ralloc.h"
d50 2
a51 3
bool
i830CreateContext(int api,
                  const struct gl_config * mesaVis,
a52 3
                  unsigned major_version,
                  unsigned minor_version,
                  unsigned *error,
d56 1
a56 1
   struct i830_context *i830 = rzalloc(NULL, struct i830_context);
d59 2
a60 5

   if (!i830) {
      *error = __DRI_CTX_ERROR_NO_MEMORY;
      return false;
   }
d65 4
a68 7
   if (!intelInitContext(intel, __DRI_API_OPENGL,
                         major_version, minor_version,
                         mesaVis, driContextPriv,
                         sharedContextPrivate, &functions,
                         error)) {
      ralloc_free(i830);
      return false;
a70 2
   intel_init_texture_formats(ctx);

d74 1
d85 1
a85 1
   intel->ctx.Const.FragmentProgram.MaxTextureImageUnits = I830_TEX_UNITS;
a99 1
   ctx->Const.QueryCounterBits.SamplesPassed = 0;
d111 1
a111 6
   _mesa_compute_version(ctx);

   _mesa_initialize_dispatch_tables(ctx);
   _mesa_initialize_vbo_vtxfmt(ctx);

   return true;
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
a58 1
                  uint32_t flags,
d76 1
a76 1
                         major_version, minor_version, flags,
d99 1
a99 1
   intel->ctx.Const.Program[MESA_SHADER_FRAGMENT].MaxTextureImageUnits = I830_TEX_UNITS;
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d38 1
a38 1
#include "util/ralloc.h"
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d38 1
a38 1
#include "../glsl/ralloc.h"
@


