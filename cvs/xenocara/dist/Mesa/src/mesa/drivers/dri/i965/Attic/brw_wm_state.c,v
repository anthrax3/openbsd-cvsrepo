head	1.12;
access;
symbols
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	v10_2_9:1.1.1.7
	v10_4_3:1.1.1.6
	v10_2_7:1.1.1.5
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	v10_2_3:1.1.1.5
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.4
	v9_2_3:1.1.1.4
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.4
	v9_2_0:1.1.1.4
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.11;
commitid	TnlogFl9nOv2eaRf;

1.11
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.10;
commitid	4ry2gvZGMXkCUD2n;

1.10
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.9;
commitid	mcxB0JvoI9gTDYXU;

1.9
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.8;
commitid	WPD6rgPryPkvXOr9;

1.8
date	2013.09.05.14.04.23;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.12.21.09.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.49;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.49;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.28.40;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.37;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.05.13.15.42;	author jsg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.07.09.20.34.52;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.6
date	2015.01.25.14.11.49;	author jsg;	state Exp;
branches;
next	1.1.1.7;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.7
date	2015.02.20.22.48.55;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.12
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */



#include "intel_fbo.h"
#include "brw_context.h"
#include "brw_state.h"
#include "brw_defines.h"
#include "brw_wm.h"

/***********************************************************************
 * WM unit - fragment programs and rasterization
 */

bool
brw_color_buffer_write_enabled(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   /* BRW_NEW_FRAGMENT_PROGRAM */
   const struct gl_fragment_program *fp = brw->fragment_program;
   int i;

   /* _NEW_BUFFERS */
   for (i = 0; i < ctx->DrawBuffer->_NumColorDrawBuffers; i++) {
      struct gl_renderbuffer *rb = ctx->DrawBuffer->_ColorDrawBuffers[i];

      /* _NEW_COLOR */
      if (rb &&
	  (fp->Base.OutputsWritten & BITFIELD64_BIT(FRAG_RESULT_COLOR) ||
	   fp->Base.OutputsWritten & BITFIELD64_BIT(FRAG_RESULT_DATA0 + i)) &&
	  (ctx->Color.ColorMask[i][0] ||
	   ctx->Color.ColorMask[i][1] ||
	   ctx->Color.ColorMask[i][2] ||
	   ctx->Color.ColorMask[i][3])) {
	 return true;
      }
   }

   return false;
}

/**
 * Setup wm hardware state.  See page 225 of Volume 2
 */
static void
brw_upload_wm_unit(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   const struct gl_fragment_program *fp = brw->fragment_program;
   struct brw_wm_unit_state *wm;

   wm = brw_state_batch(brw, AUB_TRACE_WM_STATE,
			sizeof(*wm), 32, &brw->wm.base.state_offset);
   memset(wm, 0, sizeof(*wm));

   if (brw->wm.prog_data->prog_offset_16) {
      /* These two fields should be the same pre-gen6, which is why we
       * only have one hardware field to program for both dispatch
       * widths.
       */
      assert(brw->wm.prog_data->first_curbe_grf ==
	     brw->wm.prog_data->first_curbe_grf_16);
   }

   /* BRW_NEW_PROGRAM_CACHE | CACHE_NEW_WM_PROG */
   wm->thread0.grf_reg_count = brw->wm.prog_data->reg_blocks;
   wm->wm9.grf_reg_count_2 = brw->wm.prog_data->reg_blocks_16;

   wm->thread0.kernel_start_pointer =
      brw_program_reloc(brw,
			brw->wm.base.state_offset +
			offsetof(struct brw_wm_unit_state, thread0),
			brw->wm.base.prog_offset +
			(wm->thread0.grf_reg_count << 1)) >> 6;

   wm->wm9.kernel_start_pointer_2 =
      brw_program_reloc(brw,
			brw->wm.base.state_offset +
			offsetof(struct brw_wm_unit_state, wm9),
			brw->wm.base.prog_offset +
			brw->wm.prog_data->prog_offset_16 +
			(wm->wm9.grf_reg_count_2 << 1)) >> 6;

   wm->thread1.depth_coef_urb_read_offset = 1;
   /* Use ALT floating point mode for ARB fragment programs, because they
    * require 0^0 == 1.  Even though _CurrentFragmentProgram is used for
    * rendering, CurrentProgram[MESA_SHADER_FRAGMENT] is used for this check
    * to differentiate between the GLSL and non-GLSL cases.
    */
   if (ctx->Shader.CurrentProgram[MESA_SHADER_FRAGMENT] == NULL)
      wm->thread1.floating_point_mode = BRW_FLOATING_POINT_NON_IEEE_754;
   else
      wm->thread1.floating_point_mode = BRW_FLOATING_POINT_IEEE_754;

   wm->thread1.binding_table_entry_count =
      brw->wm.prog_data->base.binding_table.size_bytes / 4;

   if (brw->wm.prog_data->total_scratch != 0) {
      wm->thread2.scratch_space_base_pointer =
	 brw->wm.base.scratch_bo->offset64 >> 10; /* reloc */
      wm->thread2.per_thread_scratch_space =
	 ffs(brw->wm.prog_data->total_scratch) - 11;
   } else {
      wm->thread2.scratch_space_base_pointer = 0;
      wm->thread2.per_thread_scratch_space = 0;
   }

   wm->thread3.dispatch_grf_start_reg = brw->wm.prog_data->first_curbe_grf;
   wm->thread3.urb_entry_read_length =
      brw->wm.prog_data->num_varying_inputs * 2;
   wm->thread3.urb_entry_read_offset = 0;
   wm->thread3.const_urb_entry_read_length =
      brw->wm.prog_data->curb_read_length;
   /* BRW_NEW_CURBE_OFFSETS */
   wm->thread3.const_urb_entry_read_offset = brw->curbe.wm_start * 2;

   if (brw->gen == 5)
      wm->wm4.sampler_count = 0; /* hardware requirement */
   else {
      /* CACHE_NEW_SAMPLER */
      wm->wm4.sampler_count = (brw->wm.base.sampler_count + 1) / 4;
   }

   if (brw->wm.base.sampler_count) {
      /* reloc */
      wm->wm4.sampler_state_pointer = (brw->batch.bo->offset64 +
				       brw->wm.base.sampler_offset) >> 5;
   } else {
      wm->wm4.sampler_state_pointer = 0;
   }

   /* BRW_NEW_FRAGMENT_PROGRAM */
   wm->wm5.program_uses_depth = (fp->Base.InputsRead &
				 (1 << VARYING_SLOT_POS)) != 0;
   wm->wm5.program_computes_depth = (fp->Base.OutputsWritten &
				     BITFIELD64_BIT(FRAG_RESULT_DEPTH)) != 0;
   /* _NEW_BUFFERS
    * Override for NULL depthbuffer case, required by the Pixel Shader Computed
    * Depth field.
    */
   if (!intel_get_renderbuffer(ctx->DrawBuffer, BUFFER_DEPTH))
      wm->wm5.program_computes_depth = 0;

   /* _NEW_COLOR */
   wm->wm5.program_uses_killpixel = fp->UsesKill || ctx->Color.AlphaEnabled;

   wm->wm5.enable_8_pix = 1;
   if (brw->wm.prog_data->prog_offset_16)
      wm->wm5.enable_16_pix = 1;

   wm->wm5.max_threads = brw->max_wm_threads - 1;

   /* _NEW_BUFFERS | _NEW_COLOR */
   if (brw_color_buffer_write_enabled(brw) ||
       wm->wm5.program_uses_killpixel ||
       wm->wm5.program_computes_depth) {
      wm->wm5.thread_dispatch_enable = 1;
   }

   wm->wm5.legacy_line_rast = 0;
   wm->wm5.legacy_global_depth_bias = 0;
   wm->wm5.early_depth_test = 1;	        /* never need to disable */
   wm->wm5.line_aa_region_width = 0;
   wm->wm5.line_endcap_aa_region_width = 1;

   /* _NEW_POLYGONSTIPPLE */
   wm->wm5.polygon_stipple = ctx->Polygon.StippleFlag;

   /* _NEW_POLYGON */
   if (ctx->Polygon.OffsetFill) {
      wm->wm5.depth_offset = 1;
      /* Something wierd going on with legacy_global_depth_bias,
       * offset_constant, scaling and MRD.  This value passes glean
       * but gives some odd results elsewere (eg. the
       * quad-offset-units test).
       */
      wm->global_depth_offset_constant = ctx->Polygon.OffsetUnits * 2;

      /* This is the only value that passes glean:
       */
      wm->global_depth_offset_scale = ctx->Polygon.OffsetFactor;
   }

   /* _NEW_LINE */
   wm->wm5.line_stipple = ctx->Line.StippleFlag;

   /* BRW_NEW_STATS_WM */
   if (unlikely(INTEL_DEBUG & DEBUG_STATS) || brw->stats_wm)
      wm->wm4.stats_enable = 1;

   /* Emit scratch space relocation */
   if (brw->wm.prog_data->total_scratch != 0) {
      drm_intel_bo_emit_reloc(brw->batch.bo,
			      brw->wm.base.state_offset +
			      offsetof(struct brw_wm_unit_state, thread2),
			      brw->wm.base.scratch_bo,
			      wm->thread2.per_thread_scratch_space,
			      I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER);
   }

   /* Emit sampler state relocation */
   if (brw->wm.base.sampler_count != 0) {
      drm_intel_bo_emit_reloc(brw->batch.bo,
			      brw->wm.base.state_offset +
			      offsetof(struct brw_wm_unit_state, wm4),
			      brw->batch.bo, (brw->wm.base.sampler_offset |
                                              wm->wm4.stats_enable |
                                              (wm->wm4.sampler_count << 2)),
			      I915_GEM_DOMAIN_INSTRUCTION, 0);
   }

   brw->state.dirty.cache |= CACHE_NEW_WM_UNIT;
}

const struct brw_tracked_state brw_wm_unit = {
   .dirty = {
      .mesa = (_NEW_POLYGON |
	       _NEW_POLYGONSTIPPLE |
	       _NEW_LINE |
	       _NEW_COLOR |
	       _NEW_BUFFERS),

      .brw = (BRW_NEW_BATCH |
	      BRW_NEW_PROGRAM_CACHE |
	      BRW_NEW_FRAGMENT_PROGRAM |
	      BRW_NEW_CURBE_OFFSETS |
              BRW_NEW_STATS_WM),

      .cache = (CACHE_NEW_WM_PROG |
		CACHE_NEW_SAMPLER)
   },
   .emit = brw_upload_wm_unit,
};

@


1.11
log
@Merge Mesa 10.2.9
@
text
@@


1.10
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d90 2
a91 2
      assert(brw->wm.prog_data->base.dispatch_grf_start_reg ==
	     brw->wm.prog_data->dispatch_grf_start_reg_16);
d127 1
a127 1
   if (brw->wm.prog_data->base.total_scratch != 0) {
d131 1
a131 1
	 ffs(brw->wm.prog_data->base.total_scratch) - 11;
d137 1
a137 2
   wm->thread3.dispatch_grf_start_reg =
      brw->wm.prog_data->base.dispatch_grf_start_reg;
d142 1
a142 1
      brw->wm.prog_data->base.curb_read_length;
d221 1
a221 1
   if (brw->wm.prog_data->base.total_scratch != 0) {
@


1.9
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d90 2
a91 2
      assert(brw->wm.prog_data->first_curbe_grf ==
	     brw->wm.prog_data->first_curbe_grf_16);
d127 1
a127 1
   if (brw->wm.prog_data->total_scratch != 0) {
d131 1
a131 1
	 ffs(brw->wm.prog_data->total_scratch) - 11;
d137 2
a138 1
   wm->thread3.dispatch_grf_start_reg = brw->wm.prog_data->first_curbe_grf;
d143 1
a143 1
      brw->wm.prog_data->curb_read_length;
d222 1
a222 1
   if (brw->wm.prog_data->total_scratch != 0) {
@


1.8
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d31 1
a31 1
                   
d48 1
d82 1
a82 1
			sizeof(*wm), 32, &brw->wm.state_offset);
d100 1
a100 1
			brw->wm.state_offset +
d102 1
a102 1
			brw->wm.prog_offset +
d107 1
a107 1
			brw->wm.state_offset +
d109 1
a109 1
			brw->wm.prog_offset +
d116 2
a117 2
    * rendering, CurrentFragmentProgram is used for this check to
    * differentiate between the GLSL and non-GLSL cases.
d119 1
a119 1
   if (ctx->Shader.CurrentFragmentProgram == NULL)
d124 2
a125 1
   wm->thread1.binding_table_entry_count = 0;
d129 1
a129 1
	 brw->wm.scratch_bo->offset >> 10; /* reloc */
d138 2
a139 1
   wm->thread3.urb_entry_read_length = brw->wm.prog_data->urb_read_length;
d150 1
a150 1
      wm->wm4.sampler_count = (brw->sampler.count + 1) / 4;
d153 1
a153 1
   if (brw->sampler.count) {
d155 2
a156 2
      wm->wm4.sampler_state_pointer = (brw->batch.bo->offset +
				       brw->sampler.offset) >> 5;
d223 1
a223 1
			      brw->wm.state_offset +
d225 1
a225 1
			      brw->wm.scratch_bo,
d231 1
a231 1
   if (brw->sampler.count != 0) {
d233 1
a233 1
			      brw->wm.state_offset +
d235 3
a237 3
			      brw->batch.bo, (brw->sampler.offset |
						wm->wm4.stats_enable |
						(wm->wm4.sampler_count << 2)),
d246 3
a248 3
      .mesa = (_NEW_POLYGON | 
	       _NEW_POLYGONSTIPPLE | 
	       _NEW_LINE | 
@


1.7
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d47 1
a47 1
   struct gl_context *ctx = &brw->intel.ctx;
d74 1
a74 1
brw_prepare_wm_unit(struct brw_context *brw)
d76 1
a76 2
   struct intel_context *intel = &brw->intel;
   struct gl_context *ctx = &intel->ctx;
d80 2
a81 1
   wm = brw_state_batch(brw, sizeof(*wm), 32, &brw->wm.state_offset);
d113 9
a121 1
   wm->thread1.floating_point_mode = BRW_FLOATING_POINT_NON_IEEE_754;
d123 1
a123 6
   if (intel->gen == 5)
      wm->thread1.binding_table_entry_count = 0; /* hardware requirement */
   else {
      /* BRW_NEW_NR_SURFACES */
      wm->thread1.binding_table_entry_count = brw->wm.nr_surfaces;
   }
d143 1
a143 1
   if (intel->gen == 5)
d147 1
a147 1
      wm->wm4.sampler_count = (brw->wm.sampler_count + 1) / 4;
d150 1
a150 1
   if (brw->wm.sampler_count) {
d152 2
a153 2
      wm->wm4.sampler_state_pointer = (intel->batch.bo->offset +
				       brw->wm.sampler_offset) >> 5;
d160 1
a160 1
				 (1 << FRAG_ATTRIB_WPOS)) != 0;
d173 2
a174 17

   /* BRW_NEW_FRAGMENT_PROGRAM
    *
    * If using the fragment shader backend, the program is always
    * 8-wide.  If not, it's always 16.
    */
   if (ctx->Shader.CurrentFragmentProgram) {
      struct brw_shader *shader = (struct brw_shader *)
	 ctx->Shader.CurrentFragmentProgram->_LinkedShaders[MESA_SHADER_FRAGMENT];

      if (shader != NULL && shader->ir != NULL) {
	 wm->wm5.enable_8_pix = 1;
	 if (brw->wm.prog_data->prog_offset_16)
	    wm->wm5.enable_16_pix = 1;
      }
   }
   if (!wm->wm5.enable_8_pix)
d177 1
a177 1
   wm->wm5.max_threads = brw->wm_max_threads - 1;
d213 2
a214 2
   /* _NEW_DEPTH */
   if (unlikely(INTEL_DEBUG & DEBUG_STATS) || intel->stats_wm)
d219 1
a219 1
      drm_intel_bo_emit_reloc(intel->batch.bo,
d228 2
a229 2
   if (brw->wm.sampler_count != 0) {
      drm_intel_bo_emit_reloc(intel->batch.bo,
d232 1
a232 1
			      intel->batch.bo, (brw->wm.sampler_offset |
a246 1
	       _NEW_DEPTH |
d253 1
a253 1
	      BRW_NEW_NR_WM_SURFACES),
d258 1
a258 1
   .prepare = brw_prepare_wm_unit,
@


1.6
log
@Merge Mesa 7.10.3
@
text
@d34 1
a43 16
struct brw_wm_unit_key {
   unsigned int total_grf, total_scratch;
   unsigned int urb_entry_read_length;
   unsigned int curb_entry_read_length;
   unsigned int dispatch_grf_start_reg;

   unsigned int curbe_offset;
   unsigned int urb_size;

   unsigned int nr_surfaces, sampler_count;
   GLboolean uses_depth, computes_depth, uses_kill, is_glsl;
   GLboolean polygon_stipple, stats_wm, line_stipple, offset_enable;
   GLboolean color_write_enable;
   GLfloat offset_units, offset_factor;
};

d70 3
d74 1
a74 1
wm_unit_populate_key(struct brw_context *brw, struct brw_wm_unit_key *key)
d76 2
a77 1
   struct gl_context *ctx = &brw->intel.ctx;
d79 13
a91 1
   struct intel_context *intel = &brw->intel;
d93 18
a110 1
   memset(key, 0, sizeof(*key));
d112 2
a113 6
   /* CACHE_NEW_WM_PROG */
   key->total_grf = brw->wm.prog_data->total_grf;
   key->urb_entry_read_length = brw->wm.prog_data->urb_read_length;
   key->curb_entry_read_length = brw->wm.prog_data->curb_read_length;
   key->dispatch_grf_start_reg = brw->wm.prog_data->first_curbe_grf;
   key->total_scratch = brw->wm.prog_data->total_scratch;
d115 16
a130 2
   /* BRW_NEW_URB_FENCE */
   key->urb_size = brw->urb.vsize;
d132 5
d138 1
a138 1
   key->curbe_offset = brw->curbe.wm_start;
d140 6
a145 2
   /* BRW_NEW_NR_SURFACEs */
   key->nr_surfaces = brw->wm.nr_surfaces;
d147 7
a153 5
   /* CACHE_NEW_SAMPLER */
   key->sampler_count = brw->wm.sampler_count;

   /* _NEW_POLYGONSTIPPLE */
   key->polygon_stipple = ctx->Polygon.StippleFlag;
d156 5
a160 6
   key->uses_depth = (fp->Base.InputsRead & (1 << FRAG_ATTRIB_WPOS)) != 0;

   /* as far as we can tell */
   key->computes_depth =
      (fp->Base.OutputsWritten & BITFIELD64_BIT(FRAG_RESULT_DEPTH)) != 0;
   /* BRW_NEW_DEPTH_BUFFER
d164 2
a165 2
   if (brw->state.depth_region == NULL)
      key->computes_depth = 0;
d167 2
a168 2
   /* _NEW_BUFFERS | _NEW_COLOR */
   key->color_write_enable = brw_color_buffer_write_enabled(brw);
a169 2
   /* _NEW_COLOR */
   key->uses_kill = fp->UsesKill || ctx->Color.AlphaEnabled;
d171 4
a174 2
   /* If using the fragment shader backend, the program is always
    * 8-wide.
d181 3
a183 1
	 key->is_glsl = GL_TRUE;
d186 2
d189 1
a189 2
   /* _NEW_DEPTH */
   key->stats_wm = intel->stats_wm;
d191 5
a195 39
   /* _NEW_LINE */
   key->line_stipple = ctx->Line.StippleFlag;

   /* _NEW_POLYGON */
   key->offset_enable = ctx->Polygon.OffsetFill;
   key->offset_units = ctx->Polygon.OffsetUnits;
   key->offset_factor = ctx->Polygon.OffsetFactor;
}

/**
 * Setup wm hardware state.  See page 225 of Volume 2
 */
static drm_intel_bo *
wm_unit_create_from_key(struct brw_context *brw, struct brw_wm_unit_key *key,
			drm_intel_bo **reloc_bufs)
{
   struct intel_context *intel = &brw->intel;
   struct brw_wm_unit_state wm;
   drm_intel_bo *bo;

   memset(&wm, 0, sizeof(wm));

   wm.thread0.grf_reg_count = ALIGN(key->total_grf, 16) / 16 - 1;
   wm.thread0.kernel_start_pointer = brw->wm.prog_bo->offset >> 6; /* reloc */
   wm.thread1.depth_coef_urb_read_offset = 1;
   wm.thread1.floating_point_mode = BRW_FLOATING_POINT_NON_IEEE_754;

   if (intel->gen == 5)
      wm.thread1.binding_table_entry_count = 0; /* hardware requirement */
   else
      wm.thread1.binding_table_entry_count = key->nr_surfaces;

   if (key->total_scratch != 0) {
      wm.thread2.scratch_space_base_pointer =
	 brw->wm.scratch_bo->offset >> 10; /* reloc */
      wm.thread2.per_thread_scratch_space = ffs(key->total_scratch) - 11;
   } else {
      wm.thread2.scratch_space_base_pointer = 0;
      wm.thread2.per_thread_scratch_space = 0;
d198 5
a202 5
   wm.thread3.dispatch_grf_start_reg = key->dispatch_grf_start_reg;
   wm.thread3.urb_entry_read_length = key->urb_entry_read_length;
   wm.thread3.urb_entry_read_offset = 0;
   wm.thread3.const_urb_entry_read_length = key->curb_entry_read_length;
   wm.thread3.const_urb_entry_read_offset = key->curbe_offset * 2;
d204 2
a205 4
   if (intel->gen == 5)
      wm.wm4.sampler_count = 0; /* hardware requirement */
   else
      wm.wm4.sampler_count = (key->sampler_count + 1) / 4;
d207 3
a209 34
   if (brw->wm.sampler_bo != NULL) {
      /* reloc */
      wm.wm4.sampler_state_pointer = brw->wm.sampler_bo->offset >> 5;
   } else {
      wm.wm4.sampler_state_pointer = 0;
   }

   wm.wm5.program_uses_depth = key->uses_depth;
   wm.wm5.program_computes_depth = key->computes_depth;
   wm.wm5.program_uses_killpixel = key->uses_kill;

   if (key->is_glsl)
      wm.wm5.enable_8_pix = 1;
   else
      wm.wm5.enable_16_pix = 1;

   wm.wm5.max_threads = brw->wm_max_threads - 1;

   if (key->color_write_enable ||
       key->uses_kill ||
       key->computes_depth) {
      wm.wm5.thread_dispatch_enable = 1;
   }

   wm.wm5.legacy_line_rast = 0;
   wm.wm5.legacy_global_depth_bias = 0;
   wm.wm5.early_depth_test = 1;	        /* never need to disable */
   wm.wm5.line_aa_region_width = 0;
   wm.wm5.line_endcap_aa_region_width = 1;

   wm.wm5.polygon_stipple = key->polygon_stipple;

   if (key->offset_enable) {
      wm.wm5.depth_offset = 1;
d215 1
a215 1
      wm.global_depth_offset_constant = key->offset_units * 2;
d219 1
a219 1
      wm.global_depth_offset_scale = key->offset_factor;
d222 2
a223 1
   wm.wm5.line_stipple = key->line_stipple;
d225 3
a227 12
   if (unlikely(INTEL_DEBUG & DEBUG_STATS) || key->stats_wm)
      wm.wm4.stats_enable = 1;

   bo = brw_upload_cache(&brw->cache, BRW_WM_UNIT,
			 key, sizeof(*key),
			 reloc_bufs, 3,
			 &wm, sizeof(wm));

   /* Emit WM program relocation */
   drm_intel_bo_emit_reloc(bo, offsetof(struct brw_wm_unit_state, thread0),
			   brw->wm.prog_bo, wm.thread0.grf_reg_count << 1,
			   I915_GEM_DOMAIN_INSTRUCTION, 0);
d230 4
a233 2
   if (key->total_scratch != 0) {
      drm_intel_bo_emit_reloc(bo, offsetof(struct brw_wm_unit_state, thread2),
d235 1
a235 1
			      wm.thread2.per_thread_scratch_space,
d240 7
a246 4
   if (key->sampler_count != 0) {
      drm_intel_bo_emit_reloc(bo, offsetof(struct brw_wm_unit_state, wm4),
			      brw->wm.sampler_bo, (wm.wm4.stats_enable |
						   (wm.wm4.sampler_count << 2)),
d250 1
a250 42
   return bo;
}


static void upload_wm_unit( struct brw_context *brw )
{
   struct intel_context *intel = &brw->intel;
   struct brw_wm_unit_key key;
   drm_intel_bo *reloc_bufs[3];
   wm_unit_populate_key(brw, &key);

   /* Allocate the necessary scratch space if we haven't already.  Don't
    * bother reducing the allocation later, since we use scratch so
    * rarely.
    */
   if (key.total_scratch) {
      GLuint total = key.total_scratch * brw->wm_max_threads;

      if (brw->wm.scratch_bo && total > brw->wm.scratch_bo->size) {
	 drm_intel_bo_unreference(brw->wm.scratch_bo);
	 brw->wm.scratch_bo = NULL;
      }
      if (brw->wm.scratch_bo == NULL) {
	 brw->wm.scratch_bo = drm_intel_bo_alloc(intel->bufmgr,
						 "wm scratch",
						 total,
						 4096);
      }
   }

   reloc_bufs[0] = brw->wm.prog_bo;
   reloc_bufs[1] = brw->wm.scratch_bo;
   reloc_bufs[2] = brw->wm.sampler_bo;

   drm_intel_bo_unreference(brw->wm.state_bo);
   brw->wm.state_bo = brw_search_cache(&brw->cache, BRW_WM_UNIT,
				       &key, sizeof(key),
				       reloc_bufs, 3,
				       NULL);
   if (brw->wm.state_bo == NULL) {
      brw->wm.state_bo = wm_unit_create_from_key(brw, &key, reloc_bufs);
   }
d262 3
a264 1
      .brw = (BRW_NEW_FRAGMENT_PROGRAM | 
a265 1
	      BRW_NEW_DEPTH_BUFFER |
d271 1
a271 1
   .prepare = upload_wm_unit,
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d55 1
d59 26
d88 1
a88 1
   GLcontext *ctx = &brw->intel.ctx;
a89 1
   const struct brw_fragment_program *bfp = (struct brw_fragment_program *) fp;
d99 1
a99 1
   key->total_scratch = ALIGN(brw->wm.prog_data->total_scratch, 1024);
d129 3
a133 1
   key->is_glsl = bfp->isGLSL;
d135 11
a145 2
   /* temporary sanity check assertion */
   ASSERT(bfp->isGLSL == brw_wm_is_glsl(fp));
d162 1
a162 1
static dri_bo *
d164 1
a164 1
			dri_bo **reloc_bufs)
d168 1
a168 1
   dri_bo *bo;
d185 1
a185 1
      wm.thread2.per_thread_scratch_space = key->total_scratch / 1024 - 1;
d219 7
a225 1
   wm.wm5.thread_dispatch_enable = 1;	/* AKA: color_write */
d250 1
a250 1
   if (INTEL_DEBUG & DEBUG_STATS || key->stats_wm)
d259 3
a261 5
   dri_bo_emit_reloc(bo,
		     I915_GEM_DOMAIN_INSTRUCTION, 0,
		     wm.thread0.grf_reg_count << 1,
		     offsetof(struct brw_wm_unit_state, thread0),
		     brw->wm.prog_bo);
d265 4
a268 5
      dri_bo_emit_reloc(bo,
			0, 0,
			wm.thread2.per_thread_scratch_space,
			offsetof(struct brw_wm_unit_state, thread2),
			brw->wm.scratch_bo);
d273 4
a276 5
      dri_bo_emit_reloc(bo,
			I915_GEM_DOMAIN_INSTRUCTION, 0,
			wm.wm4.stats_enable | (wm.wm4.sampler_count << 2),
			offsetof(struct brw_wm_unit_state, wm4),
			brw->wm.sampler_bo);
d287 1
a287 1
   dri_bo *reloc_bufs[3];
a293 1
   assert(key.total_scratch <= 12 * 1024);
d298 1
a298 1
	 dri_bo_unreference(brw->wm.scratch_bo);
d302 4
a305 4
	 brw->wm.scratch_bo = dri_bo_alloc(intel->bufmgr,
                                           "wm scratch",
                                           total,
                                           4096);
d313 1
a313 1
   dri_bo_unreference(brw->wm.state_bo);
d329 2
a330 1
	       _NEW_DEPTH),
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a51 2
   unsigned int max_threads;

d63 1
a67 10
   if (INTEL_DEBUG & DEBUG_SINGLE_THREAD)
      key->max_threads = 1;
   else {
      /* WM maximum threads is number of EUs times number of threads per EU. */
      if (BRW_IS_G4X(brw))
	 key->max_threads = 10 * 5;
      else
	 key->max_threads = 8 * 4;
   }

d95 7
a101 1
      (fp->Base.OutputsWritten & (1 << FRAG_RESULT_DEPR)) != 0;
d105 4
a108 1
   key->is_glsl = brw_wm_is_glsl(fp);
d122 3
d129 1
d139 5
a143 1
   wm.thread1.binding_table_entry_count = key->nr_surfaces;
d147 1
a147 1
	 brw->wm.scratch_buffer->offset >> 10; /* reloc */
d156 1
a158 1
   wm.thread3.urb_entry_read_offset = 0;
d160 5
a164 1
   wm.wm4.sampler_count = (key->sampler_count + 1) / 4;
d181 1
a181 1
   wm.wm5.max_threads = key->max_threads - 1;
d213 1
a213 2
			 &wm, sizeof(wm),
			 NULL, NULL);
d228 1
a228 1
			brw->wm.scratch_buffer);
d257 1
a257 1
      GLuint total = key.total_scratch * key.max_threads;
d259 3
a261 3
      if (brw->wm.scratch_buffer && total > brw->wm.scratch_buffer->size) {
	 dri_bo_unreference(brw->wm.scratch_buffer);
	 brw->wm.scratch_buffer = NULL;
d263 5
a267 5
      if (brw->wm.scratch_buffer == NULL) {
	 brw->wm.scratch_buffer = dri_bo_alloc(intel->bufmgr,
					       "wm scratch",
					       total,
					       4096);
d272 1
a272 1
   reloc_bufs[1] = brw->wm.scratch_buffer;
d295 2
a296 1
	      BRW_NEW_NR_SURFACES),
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a36 1
#include "dri_bufmgr.h"
d63 1
d71 7
a77 2
   else
      key->max_threads = 32;
d92 1
a92 1
   /* CACHE_NEW_SURFACE */
d99 1
a99 1
   key->polygon_stipple = brw->attribs.Polygon->StippleFlag;
d109 1
a109 1
   key->uses_kill = fp->UsesKill || brw->attribs.Color->AlphaEnabled;
d112 1
a112 1
   /* XXX: This needs a flag to indicate when it changes. */
d116 1
a116 1
   key->line_stipple = brw->attribs.Line->StippleFlag;
d119 3
a121 3
   key->offset_enable = brw->attribs.Polygon->OffsetFill;
   key->offset_units = brw->attribs.Polygon->OffsetUnits;
   key->offset_factor = brw->attribs.Polygon->OffsetFactor;
d207 5
a211 5
   dri_emit_reloc(bo,
		  DRM_BO_FLAG_MEM_TT | DRM_BO_FLAG_READ,
		  wm.thread0.grf_reg_count << 1,
		  offsetof(struct brw_wm_unit_state, thread0),
		  brw->wm.prog_bo);
d215 5
a219 5
      dri_emit_reloc(bo,
		     DRM_BO_FLAG_MEM_TT | DRM_BO_FLAG_READ | DRM_BO_FLAG_WRITE,
		     wm.thread2.per_thread_scratch_space,
		     offsetof(struct brw_wm_unit_state, thread2),
		     brw->wm.scratch_buffer);
d224 5
a228 5
      dri_emit_reloc(bo,
		     DRM_BO_FLAG_MEM_TT | DRM_BO_FLAG_READ,
		     wm.wm4.stats_enable | (wm.wm4.sampler_count << 2),
		     offsetof(struct brw_wm_unit_state, wm4),
		     brw->wm.sampler_bo);
d235 1
a235 1
static int upload_wm_unit( struct brw_context *brw )
a239 1
   int ret = 0, i;
d258 1
a258 1
					       4096, DRM_BO_FLAG_MEM_TT);
a273 6

   for (i = 0; i < 3; i++)
     if (reloc_bufs[i])
       ret |= dri_bufmgr_check_aperture_space(reloc_bufs[i]);
   ret |= dri_bufmgr_check_aperture_space(brw->wm.state_bo);
   return ret;
d281 2
a282 1
	       _NEW_COLOR),
d286 1
a286 1
	      BRW_NEW_LOCK),
d288 1
a288 2
      .cache = (CACHE_NEW_SURFACE | 
		CACHE_NEW_WM_PROG | 
@


1.2
log
@Update to Mesa 7.0.2. Tested by naddy@@ (full ports build), simon@@
and oga@@ (with dri enabled).
@
text
@d37 2
a38 1
#include "bufmgr.h"
d44 16
a59 5
static void invalidate_scratch_cb( struct intel_context *intel,
				   void *unused )
{
   /* nothing */
}
d61 2
a62 2

static void upload_wm_unit(struct brw_context *brw )
d64 1
d66 2
a67 2
   struct brw_wm_unit_state wm;
   GLuint max_threads;
d70 1
a70 1
      max_threads = 0; 
d72 11
a82 1
      max_threads = 31;
d84 11
d96 10
a105 1
   memset(&wm, 0, sizeof(wm));
d107 2
a108 25
   /* CACHE_NEW_WM_PROG */
   wm.thread0.grf_reg_count = ((brw->wm.prog_data->total_grf-1) & ~15) / 16;
   wm.thread0.kernel_start_pointer = brw->wm.prog_gs_offset >> 6;
   wm.thread3.dispatch_grf_start_reg = brw->wm.prog_data->first_curbe_grf;
   wm.thread3.urb_entry_read_length = brw->wm.prog_data->urb_read_length;
   wm.thread3.const_urb_entry_read_length = brw->wm.prog_data->curb_read_length;

   wm.wm5.max_threads = max_threads;      

   if (brw->wm.prog_data->total_scratch) {
      GLuint per_thread = (brw->wm.prog_data->total_scratch + 1023) / 1024;
      GLuint total = per_thread * (max_threads + 1);

      /* Scratch space -- just have to make sure there is sufficient
       * allocated for the active program and current number of threads.
       */      

      if (!brw->wm.scratch_buffer) {
	 bmGenBuffers(intel, "wm scratch", 1, &brw->wm.scratch_buffer, 12);
	 bmBufferSetInvalidateCB(intel,
				 brw->wm.scratch_buffer,
				 invalidate_scratch_cb,
				 NULL,
				 GL_FALSE);
      }
d110 2
a111 11
      if (total > brw->wm.scratch_buffer_size) {
	 brw->wm.scratch_buffer_size = total;
	 bmBufferData(intel,
		      brw->wm.scratch_buffer,
		      brw->wm.scratch_buffer_size,
		      NULL,
		      0);
      }
		   
      assert(per_thread <= 12 * 1024);
      wm.thread2.per_thread_scratch_space = (per_thread / 1024) - 1;
d113 5
a117 6
      /* XXX: could make this dynamic as this is so rarely active:
       */
      /* BRW_NEW_LOCK */
      wm.thread2.scratch_space_base_pointer = 
	 bmBufferOffset(intel, brw->wm.scratch_buffer) >> 10;
   }
d119 6
a124 2
   /* CACHE_NEW_SURFACE */
   wm.thread1.binding_table_entry_count = brw->wm.nr_surfaces;
d126 1
a126 2
   /* BRW_NEW_CURBE_OFFSETS */
   wm.thread3.const_urb_entry_read_offset = brw->curbe.wm_start * 2;
d128 2
a129 1
   wm.thread3.urb_entry_read_offset = 0;
d132 1
d134 8
a141 3
   /* CACHE_NEW_SAMPLER */
   wm.wm4.sampler_count = (brw->wm.sampler_count + 1) / 4;
   wm.wm4.sampler_state_pointer = brw->wm.sampler_gs_offset >> 5;
d143 5
a147 3
   /* BRW_NEW_FRAGMENT_PROGRAM */
   {
      const struct gl_fragment_program *fp = brw->fragment_program; 
d149 6
a154 10
      if (fp->Base.InputsRead & (1<<FRAG_ATTRIB_WPOS)) 
	 wm.wm5.program_uses_depth = 1; /* as far as we can tell */
   
      if (fp->Base.OutputsWritten & (1<<FRAG_RESULT_DEPR)) 
	 wm.wm5.program_computes_depth = 1;
   
      /* _NEW_COLOR */
      if (fp->UsesKill || 
	  brw->attribs.Color->AlphaEnabled) 
	 wm.wm5.program_uses_killpixel = 1; 
d157 10
a166 1
   wm.wm5.enable_16_pix = 1;
d174 1
a174 3
   /* _NEW_POLYGONSTIPPLE */
   if (brw->attribs.Polygon->StippleFlag) 
      wm.wm5.polygon_stipple = 1;
d176 1
a176 2
   /* _NEW_POLYGON */
   if (brw->attribs.Polygon->OffsetFill) {
d183 1
a183 1
      wm.global_depth_offset_constant = brw->attribs.Polygon->OffsetUnits * 2;
d187 1
a187 1
      wm.global_depth_offset_scale = brw->attribs.Polygon->OffsetFactor;
d190 66
a255 3
   /* _NEW_LINE */
   if (brw->attribs.Line->StippleFlag) {
      wm.wm5.line_stipple = 1;
d258 12
a269 2
   if (INTEL_DEBUG & DEBUG_STATS || intel->stats_wm)
      wm.wm4.stats_enable = 1;
d271 5
a275 1
   brw->wm.state_gs_offset = brw_cache_data( &brw->cache[BRW_WM_UNIT], &wm );
d293 1
a293 1
   .update = upload_wm_unit
@


1.1
log
@Initial revision
@
text
@d120 1
a120 1
   wm.wm4.sampler_count = brw->wm.sampler_count;
d125 1
a125 1
      struct gl_fragment_program *fp = brw->fragment_program; 
d171 1
a171 1
   if (INTEL_DEBUG & DEBUG_STATS)
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Mesa 7.0.1
@
text
@d125 1
a125 1
      const struct gl_fragment_program *fp = brw->fragment_program; 
d171 1
a171 1
   if (INTEL_DEBUG & DEBUG_STATS || intel->stats_wm)
@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@d37 1
a37 1
#include "brw_wm.h"
d43 2
a44 18
struct brw_wm_unit_key {
   unsigned int total_grf, total_scratch;
   unsigned int urb_entry_read_length;
   unsigned int curb_entry_read_length;
   unsigned int dispatch_grf_start_reg;

   unsigned int curbe_offset;
   unsigned int urb_size;

   unsigned int nr_surfaces, sampler_count;
   GLboolean uses_depth, computes_depth, uses_kill, is_glsl;
   GLboolean polygon_stipple, stats_wm, line_stipple, offset_enable;
   GLboolean color_write_enable;
   GLfloat offset_units, offset_factor;
};

bool
brw_color_buffer_write_enabled(struct brw_context *brw)
d46 2
a47 7
   struct gl_context *ctx = &brw->intel.ctx;
   const struct gl_fragment_program *fp = brw->fragment_program;
   int i;

   /* _NEW_BUFFERS */
   for (i = 0; i < ctx->DrawBuffer->_NumColorDrawBuffers; i++) {
      struct gl_renderbuffer *rb = ctx->DrawBuffer->_ColorDrawBuffers[i];
a48 11
      /* _NEW_COLOR */
      if (rb &&
	  (fp->Base.OutputsWritten & BITFIELD64_BIT(FRAG_RESULT_COLOR) ||
	   fp->Base.OutputsWritten & BITFIELD64_BIT(FRAG_RESULT_DATA0 + i)) &&
	  (ctx->Color.ColorMask[i][0] ||
	   ctx->Color.ColorMask[i][1] ||
	   ctx->Color.ColorMask[i][2] ||
	   ctx->Color.ColorMask[i][3])) {
	 return true;
      }
   }
d50 1
a50 5
   return false;
}

static void
wm_unit_populate_key(struct brw_context *brw, struct brw_wm_unit_key *key)
a51 2
   struct gl_context *ctx = &brw->intel.ctx;
   const struct gl_fragment_program *fp = brw->fragment_program;
d53 2
d56 4
a59 1
   memset(key, 0, sizeof(*key));
a60 6
   /* CACHE_NEW_WM_PROG */
   key->total_grf = brw->wm.prog_data->total_grf;
   key->urb_entry_read_length = brw->wm.prog_data->urb_read_length;
   key->curb_entry_read_length = brw->wm.prog_data->curb_read_length;
   key->dispatch_grf_start_reg = brw->wm.prog_data->first_curbe_grf;
   key->total_scratch = brw->wm.prog_data->total_scratch;
d62 1
a62 2
   /* BRW_NEW_URB_FENCE */
   key->urb_size = brw->urb.vsize;
d64 25
a88 2
   /* BRW_NEW_CURBE_OFFSETS */
   key->curbe_offset = brw->curbe.wm_start;
d90 11
a100 2
   /* BRW_NEW_NR_SURFACEs */
   key->nr_surfaces = brw->wm.nr_surfaces;
d102 5
a106 35
   /* CACHE_NEW_SAMPLER */
   key->sampler_count = brw->wm.sampler_count;

   /* _NEW_POLYGONSTIPPLE */
   key->polygon_stipple = ctx->Polygon.StippleFlag;

   /* BRW_NEW_FRAGMENT_PROGRAM */
   key->uses_depth = (fp->Base.InputsRead & (1 << FRAG_ATTRIB_WPOS)) != 0;

   /* as far as we can tell */
   key->computes_depth =
      (fp->Base.OutputsWritten & BITFIELD64_BIT(FRAG_RESULT_DEPTH)) != 0;
   /* BRW_NEW_DEPTH_BUFFER
    * Override for NULL depthbuffer case, required by the Pixel Shader Computed
    * Depth field.
    */
   if (brw->state.depth_region == NULL)
      key->computes_depth = 0;

   /* _NEW_BUFFERS | _NEW_COLOR */
   key->color_write_enable = brw_color_buffer_write_enabled(brw);

   /* _NEW_COLOR */
   key->uses_kill = fp->UsesKill || ctx->Color.AlphaEnabled;

   /* If using the fragment shader backend, the program is always
    * 8-wide.
    */
   if (ctx->Shader.CurrentFragmentProgram) {
      struct brw_shader *shader = (struct brw_shader *)
	 ctx->Shader.CurrentFragmentProgram->_LinkedShaders[MESA_SHADER_FRAGMENT];

      if (shader != NULL && shader->ir != NULL) {
	 key->is_glsl = GL_TRUE;
      }
d109 2
a110 2
   /* _NEW_DEPTH */
   key->stats_wm = intel->stats_wm;
d112 2
a113 2
   /* _NEW_LINE */
   key->line_stipple = ctx->Line.StippleFlag;
d115 1
a115 21
   /* _NEW_POLYGON */
   key->offset_enable = ctx->Polygon.OffsetFill;
   key->offset_units = ctx->Polygon.OffsetUnits;
   key->offset_factor = ctx->Polygon.OffsetFactor;
}

/**
 * Setup wm hardware state.  See page 225 of Volume 2
 */
static drm_intel_bo *
wm_unit_create_from_key(struct brw_context *brw, struct brw_wm_unit_key *key,
			drm_intel_bo **reloc_bufs)
{
   struct intel_context *intel = &brw->intel;
   struct brw_wm_unit_state wm;
   drm_intel_bo *bo;

   memset(&wm, 0, sizeof(wm));

   wm.thread0.grf_reg_count = ALIGN(key->total_grf, 16) / 16 - 1;
   wm.thread0.kernel_start_pointer = brw->wm.prog_bo->offset >> 6; /* reloc */
d119 3
a121 4
   if (intel->gen == 5)
      wm.thread1.binding_table_entry_count = 0; /* hardware requirement */
   else
      wm.thread1.binding_table_entry_count = key->nr_surfaces;
d123 3
a125 8
   if (key->total_scratch != 0) {
      wm.thread2.scratch_space_base_pointer =
	 brw->wm.scratch_bo->offset >> 10; /* reloc */
      wm.thread2.per_thread_scratch_space = ffs(key->total_scratch) - 11;
   } else {
      wm.thread2.scratch_space_base_pointer = 0;
      wm.thread2.per_thread_scratch_space = 0;
   }
d127 10
a136 33
   wm.thread3.dispatch_grf_start_reg = key->dispatch_grf_start_reg;
   wm.thread3.urb_entry_read_length = key->urb_entry_read_length;
   wm.thread3.urb_entry_read_offset = 0;
   wm.thread3.const_urb_entry_read_length = key->curb_entry_read_length;
   wm.thread3.const_urb_entry_read_offset = key->curbe_offset * 2;

   if (intel->gen == 5)
      wm.wm4.sampler_count = 0; /* hardware requirement */
   else
      wm.wm4.sampler_count = (key->sampler_count + 1) / 4;

   if (brw->wm.sampler_bo != NULL) {
      /* reloc */
      wm.wm4.sampler_state_pointer = brw->wm.sampler_bo->offset >> 5;
   } else {
      wm.wm4.sampler_state_pointer = 0;
   }

   wm.wm5.program_uses_depth = key->uses_depth;
   wm.wm5.program_computes_depth = key->computes_depth;
   wm.wm5.program_uses_killpixel = key->uses_kill;

   if (key->is_glsl)
      wm.wm5.enable_8_pix = 1;
   else
      wm.wm5.enable_16_pix = 1;

   wm.wm5.max_threads = brw->wm_max_threads - 1;

   if (key->color_write_enable ||
       key->uses_kill ||
       key->computes_depth) {
      wm.wm5.thread_dispatch_enable = 1;
d139 2
d147 3
a149 1
   wm.wm5.polygon_stipple = key->polygon_stipple;
d151 2
a152 1
   if (key->offset_enable) {
d159 1
a159 1
      wm.global_depth_offset_constant = key->offset_units * 2;
d163 1
a163 1
      wm.global_depth_offset_scale = key->offset_factor;
d166 4
a169 1
   wm.wm5.line_stipple = key->line_stipple;
d171 1
a171 1
   if (unlikely(INTEL_DEBUG & DEBUG_STATS) || key->stats_wm)
d174 1
a174 68
   bo = brw_upload_cache(&brw->cache, BRW_WM_UNIT,
			 key, sizeof(*key),
			 reloc_bufs, 3,
			 &wm, sizeof(wm));

   /* Emit WM program relocation */
   drm_intel_bo_emit_reloc(bo, offsetof(struct brw_wm_unit_state, thread0),
			   brw->wm.prog_bo, wm.thread0.grf_reg_count << 1,
			   I915_GEM_DOMAIN_INSTRUCTION, 0);

   /* Emit scratch space relocation */
   if (key->total_scratch != 0) {
      drm_intel_bo_emit_reloc(bo, offsetof(struct brw_wm_unit_state, thread2),
			      brw->wm.scratch_bo,
			      wm.thread2.per_thread_scratch_space,
			      I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER);
   }

   /* Emit sampler state relocation */
   if (key->sampler_count != 0) {
      drm_intel_bo_emit_reloc(bo, offsetof(struct brw_wm_unit_state, wm4),
			      brw->wm.sampler_bo, (wm.wm4.stats_enable |
						   (wm.wm4.sampler_count << 2)),
			      I915_GEM_DOMAIN_INSTRUCTION, 0);
   }

   return bo;
}


static void upload_wm_unit( struct brw_context *brw )
{
   struct intel_context *intel = &brw->intel;
   struct brw_wm_unit_key key;
   drm_intel_bo *reloc_bufs[3];
   wm_unit_populate_key(brw, &key);

   /* Allocate the necessary scratch space if we haven't already.  Don't
    * bother reducing the allocation later, since we use scratch so
    * rarely.
    */
   if (key.total_scratch) {
      GLuint total = key.total_scratch * brw->wm_max_threads;

      if (brw->wm.scratch_bo && total > brw->wm.scratch_bo->size) {
	 drm_intel_bo_unreference(brw->wm.scratch_bo);
	 brw->wm.scratch_bo = NULL;
      }
      if (brw->wm.scratch_bo == NULL) {
	 brw->wm.scratch_bo = drm_intel_bo_alloc(intel->bufmgr,
						 "wm scratch",
						 total,
						 4096);
      }
   }

   reloc_bufs[0] = brw->wm.prog_bo;
   reloc_bufs[1] = brw->wm.scratch_bo;
   reloc_bufs[2] = brw->wm.sampler_bo;

   drm_intel_bo_unreference(brw->wm.state_bo);
   brw->wm.state_bo = brw_search_cache(&brw->cache, BRW_WM_UNIT,
				       &key, sizeof(key),
				       reloc_bufs, 3,
				       NULL);
   if (brw->wm.state_bo == NULL) {
      brw->wm.state_bo = wm_unit_create_from_key(brw, &key, reloc_bufs);
   }
d182 1
a182 3
	       _NEW_COLOR |
	       _NEW_DEPTH |
	       _NEW_BUFFERS),
d186 1
a186 2
	      BRW_NEW_DEPTH_BUFFER |
	      BRW_NEW_NR_WM_SURFACES),
d188 2
a189 1
      .cache = (CACHE_NEW_WM_PROG |
d192 1
a192 1
   .prepare = upload_wm_unit,
@


1.1.1.4
log
@Import Mesa 9.2.0
@
text
@a33 1
#include "intel_fbo.h"
d43 16
d62 1
a62 1
   struct gl_context *ctx = &brw->ctx;
a84 3
/**
 * Setup wm hardware state.  See page 225 of Volume 2
 */
d86 1
a86 1
brw_upload_wm_unit(struct brw_context *brw)
d88 1
a88 1
   struct gl_context *ctx = &brw->ctx;
d90 16
a105 1
   struct brw_wm_unit_state *wm;
d107 38
a144 11
   wm = brw_state_batch(brw, AUB_TRACE_WM_STATE,
			sizeof(*wm), 32, &brw->wm.state_offset);
   memset(wm, 0, sizeof(*wm));

   if (brw->wm.prog_data->prog_offset_16) {
      /* These two fields should be the same pre-gen6, which is why we
       * only have one hardware field to program for both dispatch
       * widths.
       */
      assert(brw->wm.prog_data->first_curbe_grf ==
	     brw->wm.prog_data->first_curbe_grf_16);
d147 32
a178 27
   /* BRW_NEW_PROGRAM_CACHE | CACHE_NEW_WM_PROG */
   wm->thread0.grf_reg_count = brw->wm.prog_data->reg_blocks;
   wm->wm9.grf_reg_count_2 = brw->wm.prog_data->reg_blocks_16;

   wm->thread0.kernel_start_pointer =
      brw_program_reloc(brw,
			brw->wm.state_offset +
			offsetof(struct brw_wm_unit_state, thread0),
			brw->wm.prog_offset +
			(wm->thread0.grf_reg_count << 1)) >> 6;

   wm->wm9.kernel_start_pointer_2 =
      brw_program_reloc(brw,
			brw->wm.state_offset +
			offsetof(struct brw_wm_unit_state, wm9),
			brw->wm.prog_offset +
			brw->wm.prog_data->prog_offset_16 +
			(wm->wm9.grf_reg_count_2 << 1)) >> 6;

   wm->thread1.depth_coef_urb_read_offset = 1;
   /* Use ALT floating point mode for ARB fragment programs, because they
    * require 0^0 == 1.  Even though _CurrentFragmentProgram is used for
    * rendering, CurrentFragmentProgram is used for this check to
    * differentiate between the GLSL and non-GLSL cases.
    */
   if (ctx->Shader.CurrentFragmentProgram == NULL)
      wm->thread1.floating_point_mode = BRW_FLOATING_POINT_NON_IEEE_754;
d180 1
a180 3
      wm->thread1.floating_point_mode = BRW_FLOATING_POINT_IEEE_754;

   wm->thread1.binding_table_entry_count = 0;
d182 2
a183 2
   if (brw->wm.prog_data->total_scratch != 0) {
      wm->thread2.scratch_space_base_pointer =
d185 1
a185 2
      wm->thread2.per_thread_scratch_space =
	 ffs(brw->wm.prog_data->total_scratch) - 11;
d187 2
a188 2
      wm->thread2.scratch_space_base_pointer = 0;
      wm->thread2.per_thread_scratch_space = 0;
d191 5
a195 7
   wm->thread3.dispatch_grf_start_reg = brw->wm.prog_data->first_curbe_grf;
   wm->thread3.urb_entry_read_length = brw->wm.prog_data->urb_read_length;
   wm->thread3.urb_entry_read_offset = 0;
   wm->thread3.const_urb_entry_read_length =
      brw->wm.prog_data->curb_read_length;
   /* BRW_NEW_CURBE_OFFSETS */
   wm->thread3.const_urb_entry_read_offset = brw->curbe.wm_start * 2;
d197 4
a200 6
   if (brw->gen == 5)
      wm->wm4.sampler_count = 0; /* hardware requirement */
   else {
      /* CACHE_NEW_SAMPLER */
      wm->wm4.sampler_count = (brw->sampler.count + 1) / 4;
   }
d202 1
a202 1
   if (brw->sampler.count) {
d204 1
a204 2
      wm->wm4.sampler_state_pointer = (brw->batch.bo->offset +
				       brw->sampler.offset) >> 5;
d206 1
a206 1
      wm->wm4.sampler_state_pointer = 0;
d209 3
a211 14
   /* BRW_NEW_FRAGMENT_PROGRAM */
   wm->wm5.program_uses_depth = (fp->Base.InputsRead &
				 (1 << VARYING_SLOT_POS)) != 0;
   wm->wm5.program_computes_depth = (fp->Base.OutputsWritten &
				     BITFIELD64_BIT(FRAG_RESULT_DEPTH)) != 0;
   /* _NEW_BUFFERS
    * Override for NULL depthbuffer case, required by the Pixel Shader Computed
    * Depth field.
    */
   if (!intel_get_renderbuffer(ctx->DrawBuffer, BUFFER_DEPTH))
      wm->wm5.program_computes_depth = 0;

   /* _NEW_COLOR */
   wm->wm5.program_uses_killpixel = fp->UsesKill || ctx->Color.AlphaEnabled;
d213 4
a216 3
   wm->wm5.enable_8_pix = 1;
   if (brw->wm.prog_data->prog_offset_16)
      wm->wm5.enable_16_pix = 1;
d218 1
a218 1
   wm->wm5.max_threads = brw->max_wm_threads - 1;
d220 4
a223 5
   /* _NEW_BUFFERS | _NEW_COLOR */
   if (brw_color_buffer_write_enabled(brw) ||
       wm->wm5.program_uses_killpixel ||
       wm->wm5.program_computes_depth) {
      wm->wm5.thread_dispatch_enable = 1;
d226 5
a230 5
   wm->wm5.legacy_line_rast = 0;
   wm->wm5.legacy_global_depth_bias = 0;
   wm->wm5.early_depth_test = 1;	        /* never need to disable */
   wm->wm5.line_aa_region_width = 0;
   wm->wm5.line_endcap_aa_region_width = 1;
d232 1
a232 2
   /* _NEW_POLYGONSTIPPLE */
   wm->wm5.polygon_stipple = ctx->Polygon.StippleFlag;
d234 2
a235 3
   /* _NEW_POLYGON */
   if (ctx->Polygon.OffsetFill) {
      wm->wm5.depth_offset = 1;
d241 1
a241 1
      wm->global_depth_offset_constant = ctx->Polygon.OffsetUnits * 2;
d245 1
a245 1
      wm->global_depth_offset_scale = ctx->Polygon.OffsetFactor;
d248 4
a251 2
   /* _NEW_LINE */
   wm->wm5.line_stipple = ctx->Line.StippleFlag;
d253 9
a261 3
   /* BRW_NEW_STATS_WM */
   if (unlikely(INTEL_DEBUG & DEBUG_STATS) || brw->stats_wm)
      wm->wm4.stats_enable = 1;
d264 2
a265 4
   if (brw->wm.prog_data->total_scratch != 0) {
      drm_intel_bo_emit_reloc(brw->batch.bo,
			      brw->wm.state_offset +
			      offsetof(struct brw_wm_unit_state, thread2),
d267 1
a267 1
			      wm->thread2.per_thread_scratch_space,
d272 4
a275 7
   if (brw->sampler.count != 0) {
      drm_intel_bo_emit_reloc(brw->batch.bo,
			      brw->wm.state_offset +
			      offsetof(struct brw_wm_unit_state, wm4),
			      brw->batch.bo, (brw->sampler.offset |
						wm->wm4.stats_enable |
						(wm->wm4.sampler_count << 2)),
d279 42
a320 1
   brw->state.dirty.cache |= CACHE_NEW_WM_UNIT;
d329 1
d332 1
a332 3
      .brw = (BRW_NEW_BATCH |
	      BRW_NEW_PROGRAM_CACHE |
	      BRW_NEW_FRAGMENT_PROGRAM |
d334 2
a335 1
              BRW_NEW_STATS_WM),
d340 1
a340 1
   .emit = brw_upload_wm_unit,
@


1.1.1.5
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d31 1
a31 1

a47 1
   /* BRW_NEW_FRAGMENT_PROGRAM */
d81 1
a81 1
			sizeof(*wm), 32, &brw->wm.base.state_offset);
d99 1
a99 1
			brw->wm.base.state_offset +
d101 1
a101 1
			brw->wm.base.prog_offset +
d106 1
a106 1
			brw->wm.base.state_offset +
d108 1
a108 1
			brw->wm.base.prog_offset +
d115 2
a116 2
    * rendering, CurrentProgram[MESA_SHADER_FRAGMENT] is used for this check
    * to differentiate between the GLSL and non-GLSL cases.
d118 1
a118 1
   if (ctx->Shader.CurrentProgram[MESA_SHADER_FRAGMENT] == NULL)
d123 1
a123 2
   wm->thread1.binding_table_entry_count =
      brw->wm.prog_data->base.binding_table.size_bytes / 4;
d127 1
a127 1
	 brw->wm.base.scratch_bo->offset64 >> 10; /* reloc */
d136 1
a136 2
   wm->thread3.urb_entry_read_length =
      brw->wm.prog_data->num_varying_inputs * 2;
d147 1
a147 1
      wm->wm4.sampler_count = (brw->wm.base.sampler_count + 1) / 4;
d150 1
a150 1
   if (brw->wm.base.sampler_count) {
d152 2
a153 2
      wm->wm4.sampler_state_pointer = (brw->batch.bo->offset64 +
				       brw->wm.base.sampler_offset) >> 5;
d220 1
a220 1
			      brw->wm.base.state_offset +
d222 1
a222 1
			      brw->wm.base.scratch_bo,
d228 1
a228 1
   if (brw->wm.base.sampler_count != 0) {
d230 1
a230 1
			      brw->wm.base.state_offset +
d232 3
a234 3
			      brw->batch.bo, (brw->wm.base.sampler_offset |
                                              wm->wm4.stats_enable |
                                              (wm->wm4.sampler_count << 2)),
d243 3
a245 3
      .mesa = (_NEW_POLYGON |
	       _NEW_POLYGONSTIPPLE |
	       _NEW_LINE |
@


1.1.1.6
log
@Import Mesa 10.4.3
@
text
@d90 2
a91 2
      assert(brw->wm.prog_data->base.dispatch_grf_start_reg ==
	     brw->wm.prog_data->dispatch_grf_start_reg_16);
d127 1
a127 1
   if (brw->wm.prog_data->base.total_scratch != 0) {
d131 1
a131 1
	 ffs(brw->wm.prog_data->base.total_scratch) - 11;
d137 1
a137 2
   wm->thread3.dispatch_grf_start_reg =
      brw->wm.prog_data->base.dispatch_grf_start_reg;
d142 1
a142 1
      brw->wm.prog_data->base.curb_read_length;
d221 1
a221 1
   if (brw->wm.prog_data->base.total_scratch != 0) {
@


1.1.1.7
log
@Import Mesa 10.2.9
@
text
@d90 2
a91 2
      assert(brw->wm.prog_data->first_curbe_grf ==
	     brw->wm.prog_data->first_curbe_grf_16);
d127 1
a127 1
   if (brw->wm.prog_data->total_scratch != 0) {
d131 1
a131 1
	 ffs(brw->wm.prog_data->total_scratch) - 11;
d137 2
a138 1
   wm->thread3.dispatch_grf_start_reg = brw->wm.prog_data->first_curbe_grf;
d143 1
a143 1
      brw->wm.prog_data->curb_read_length;
d222 1
a222 1
   if (brw->wm.prog_data->total_scratch != 0) {
@


