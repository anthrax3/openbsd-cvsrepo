head	1.6;
access;
symbols
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.09.05.14.04.29;	author jsg;	state dead;
branches;
next	1.5;

1.5
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.14.58.16;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.38;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge Mesa 9.2.0
@
text
@/**************************************************************************
 * 
 * Copyright 2005 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#ifndef INTEL_BUFFEROBJ_H
#define INTEL_BUFFEROBJ_H

#include "main/mtypes.h"

struct intel_context;
struct intel_region;
struct gl_buffer_object;


/**
 * Intel vertex/pixel buffer object, derived from Mesa's gl_buffer_object.
 */
struct intel_buffer_object
{
   struct gl_buffer_object Base;
   drm_intel_bo *buffer;     /* the low-level buffer manager's buffer handle */
   GLuint offset;            /* any offset into that buffer */

   /** System memory buffer data, if not using a BO to store the data. */
   void *sys_buffer;

   struct intel_region *region; /* Is there a zero-copy texture
                                   associated with this (pixel)
                                   buffer object? */

   drm_intel_bo *range_map_bo;
   void *range_map_buffer;
   unsigned int range_map_offset;
   GLsizei range_map_size;

   GLboolean mapped_gtt;
   GLboolean source;
};


/* Get the bm buffer associated with a GL bufferobject:
 */
drm_intel_bo *intel_bufferobj_buffer(struct intel_context *intel,
				     struct intel_buffer_object *obj,
				     GLuint flag);
drm_intel_bo *intel_bufferobj_source(struct intel_context *intel,
				     struct intel_buffer_object *obj,
				     GLuint align,
				     GLuint *offset);

void intel_upload_data(struct intel_context *intel,
		       const void *ptr, GLuint size, GLuint align,
		       drm_intel_bo **return_bo,
		       GLuint *return_offset);

void *intel_upload_map(struct intel_context *intel,
		       GLuint size, GLuint align);
void intel_upload_unmap(struct intel_context *intel,
			const void *ptr, GLuint size, GLuint align,
			drm_intel_bo **return_bo,
			GLuint *return_offset);

void intel_upload_finish(struct intel_context *intel);

/* Hook the bufferobject implementation into mesa:
 */
void intelInitBufferObjectFuncs(struct dd_function_table *functions);



/* Are the obj->Name tests necessary?  Unfortunately yes, mesa
 * allocates a couple of gl_buffer_object structs statically, and
 * the Name == 0 test is the only way to identify them and avoid
 * casting them erroneously to our structs.
 */
static INLINE struct intel_buffer_object *
intel_buffer_object(struct gl_buffer_object *obj)
{
   return (struct intel_buffer_object *) obj;
}

/* Helpers for zerocopy image uploads.  See also intel_regions.h:
 */
void intel_bufferobj_cow(struct intel_context *intel,
                         struct intel_buffer_object *intel_obj);
void intel_bufferobj_release_region(struct intel_context *intel,
                                    struct intel_buffer_object *intel_obj);


#endif
@


1.5
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.4
log
@Merge Mesa 7.10.3
@
text
@d45 2
d60 1
d69 18
d88 1
a88 1
/* Hook the bufferobject implementation into mesa: 
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d44 1
a44 1
   dri_bo *buffer;     /* the low-level buffer manager's buffer handle */
d63 3
a65 3
dri_bo *intel_bufferobj_buffer(struct intel_context *intel,
			       struct intel_buffer_object
			       *obj, GLuint flag);
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d45 2
d51 7
d69 1
a69 1
void intel_bufferobj_init(struct intel_context *intel);
d81 1
a81 4
   if (obj->Name)
      return (struct intel_buffer_object *) obj;
   else
      return NULL;
@


1.1
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d31 1
a31 1
#include "mtypes.h"
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d31 1
a31 1
#include "main/mtypes.h"
d44 1
a44 3
   drm_intel_bo *buffer;     /* the low-level buffer manager's buffer handle */
   /** System memory buffer data, if not using a BO to store the data. */
   void *sys_buffer;
a48 7

   drm_intel_bo *range_map_bo;
   void *range_map_buffer;
   unsigned int range_map_offset;
   GLsizei range_map_size;

   GLboolean mapped_gtt;
d54 3
a56 3
drm_intel_bo *intel_bufferobj_buffer(struct intel_context *intel,
				     struct intel_buffer_object *obj,
				     GLuint flag);
d60 1
a60 1
void intelInitBufferObjectFuncs(struct dd_function_table *functions);
d72 4
a75 1
   return (struct intel_buffer_object *) obj;
@


