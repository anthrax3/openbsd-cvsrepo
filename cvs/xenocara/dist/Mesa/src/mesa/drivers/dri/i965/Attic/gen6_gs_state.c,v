head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.04.24;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.38;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.43;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.52;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.11.50;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.48.55;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <eric@@anholt.net>
 *
 */

#include "brw_context.h"
#include "brw_state.h"
#include "brw_defines.h"
#include "intel_batchbuffer.h"

static void
upload_gs_state(struct brw_context *brw)
{
   /* Disable all the constant buffers. */
   BEGIN_BATCH(5);
   OUT_BATCH(_3DSTATE_CONSTANT_GS << 16 | (5 - 2));
   OUT_BATCH(0);
   OUT_BATCH(0);
   OUT_BATCH(0);
   OUT_BATCH(0);
   ADVANCE_BATCH();

   if (brw->ff_gs.prog_active) {
      BEGIN_BATCH(7);
      OUT_BATCH(_3DSTATE_GS << 16 | (7 - 2));
      OUT_BATCH(brw->ff_gs.prog_offset);
      OUT_BATCH(GEN6_GS_SPF_MODE | GEN6_GS_VECTOR_MASK_ENABLE);
      OUT_BATCH(0); /* no scratch space */
      OUT_BATCH((2 << GEN6_GS_DISPATCH_START_GRF_SHIFT) |
	        (brw->ff_gs.prog_data->urb_read_length << GEN6_GS_URB_READ_LENGTH_SHIFT));
      OUT_BATCH(((brw->max_gs_threads - 1) << GEN6_GS_MAX_THREADS_SHIFT) |
	        GEN6_GS_STATISTICS_ENABLE |
		GEN6_GS_SO_STATISTICS_ENABLE |
		GEN6_GS_RENDERING_ENABLE);
      OUT_BATCH(GEN6_GS_SVBI_PAYLOAD_ENABLE |
                GEN6_GS_SVBI_POSTINCREMENT_ENABLE |
                (brw->ff_gs.prog_data->svbi_postincrement_value <<
                 GEN6_GS_SVBI_POSTINCREMENT_VALUE_SHIFT) |
                GEN6_GS_ENABLE);
      ADVANCE_BATCH();
   } else {
      BEGIN_BATCH(7);
      OUT_BATCH(_3DSTATE_GS << 16 | (7 - 2));
      OUT_BATCH(0); /* prog_bo */
      OUT_BATCH((0 << GEN6_GS_SAMPLER_COUNT_SHIFT) |
		(0 << GEN6_GS_BINDING_TABLE_ENTRY_COUNT_SHIFT));
      OUT_BATCH(0); /* scratch space base offset */
      OUT_BATCH((1 << GEN6_GS_DISPATCH_START_GRF_SHIFT) |
		(0 << GEN6_GS_URB_READ_LENGTH_SHIFT) |
		(0 << GEN6_GS_URB_ENTRY_READ_OFFSET_SHIFT));
      OUT_BATCH((0 << GEN6_GS_MAX_THREADS_SHIFT) |
		GEN6_GS_STATISTICS_ENABLE |
		GEN6_GS_RENDERING_ENABLE);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   }
}

const struct brw_tracked_state gen6_gs_state = {
   .dirty = {
      .mesa  = _NEW_TRANSFORM,
      .brw   = BRW_NEW_CONTEXT | BRW_NEW_PUSH_CONSTANT_ALLOCATION,
      .cache = CACHE_NEW_FF_GS_PROG
   },
   .emit = upload_gs_state,
};
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d34 1
a34 1
gen6_upload_gs_push_constants(struct brw_context *brw)
d36 7
a42 48
   struct brw_stage_state *stage_state = &brw->gs.base;

   /* BRW_NEW_GEOMETRY_PROGRAM */
   const struct brw_geometry_program *gp =
      (struct brw_geometry_program *) brw->geometry_program;

   if (gp) {
      /* CACHE_NEW_GS_PROG */
      struct brw_stage_prog_data *prog_data = &brw->gs.prog_data->base.base;

      gen6_upload_push_constants(brw, &gp->program.Base, prog_data,
                                 stage_state, AUB_TRACE_VS_CONSTANTS);
   }

   if (brw->gen >= 7)
      gen7_upload_constant_state(brw, stage_state, gp, _3DSTATE_CONSTANT_GS);
}

const struct brw_tracked_state gen6_gs_push_constants = {
   .dirty = {
      .mesa  = _NEW_TRANSFORM | _NEW_PROGRAM_CONSTANTS,
      .brw   = (BRW_NEW_BATCH |
                BRW_NEW_GEOMETRY_PROGRAM |
                BRW_NEW_PUSH_CONSTANT_ALLOCATION),
      .cache = CACHE_NEW_GS_PROG,
   },
   .emit = gen6_upload_gs_push_constants,
};

static void
upload_gs_state_for_tf(struct brw_context *brw)
{
   BEGIN_BATCH(7);
   OUT_BATCH(_3DSTATE_GS << 16 | (7 - 2));
   OUT_BATCH(brw->ff_gs.prog_offset);
   OUT_BATCH(GEN6_GS_SPF_MODE | GEN6_GS_VECTOR_MASK_ENABLE);
   OUT_BATCH(0); /* no scratch space */
   OUT_BATCH((2 << GEN6_GS_DISPATCH_START_GRF_SHIFT) |
             (brw->ff_gs.prog_data->urb_read_length << GEN6_GS_URB_READ_LENGTH_SHIFT));
   OUT_BATCH(((brw->max_gs_threads - 1) << GEN6_GS_MAX_THREADS_SHIFT) |
             GEN6_GS_STATISTICS_ENABLE |
             GEN6_GS_SO_STATISTICS_ENABLE |
             GEN6_GS_RENDERING_ENABLE);
   OUT_BATCH(GEN6_GS_SVBI_PAYLOAD_ENABLE |
             GEN6_GS_SVBI_POSTINCREMENT_ENABLE |
             (brw->ff_gs.prog_data->svbi_postincrement_value <<
              GEN6_GS_SVBI_POSTINCREMENT_VALUE_SHIFT) |
             GEN6_GS_ENABLE);
a43 10
}

static void
upload_gs_state(struct brw_context *brw)
{
   /* BRW_NEW_GEOMETRY_PROGRAM */
   bool active = brw->geometry_program;
   /* CACHE_NEW_GS_PROG */
   const struct brw_vec4_prog_data *prog_data = &brw->gs.prog_data->base;
   const struct brw_stage_state *stage_state = &brw->gs.base;
d45 1
a45 26
   if (!active || stage_state->push_const_size == 0) {
      /* Disable the push constant buffers. */
      BEGIN_BATCH(5);
      OUT_BATCH(_3DSTATE_CONSTANT_GS << 16 | (5 - 2));
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   } else {
      BEGIN_BATCH(5);
      OUT_BATCH(_3DSTATE_CONSTANT_GS << 16 |
		GEN6_CONSTANT_BUFFER_0_ENABLE |
		(5 - 2));
      /* Pointer to the GS constant buffer.  Covered by the set of
       * state flags from gen6_upload_vs_constants
       */
      OUT_BATCH(stage_state->push_const_offset +
                stage_state->push_const_size - 1);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   }

   if (active) {
d48 5
a52 28
      OUT_BATCH(stage_state->prog_offset);

      /* GEN6_GS_SPF_MODE and GEN6_GS_VECTOR_MASK_ENABLE are enabled as it
       * was previously done for gen6.
       *
       * TODO: test with both disabled to see if the HW is behaving
       * as expected, like in gen7.
       */
      OUT_BATCH(GEN6_GS_SPF_MODE | GEN6_GS_VECTOR_MASK_ENABLE |
                ((ALIGN(stage_state->sampler_count, 4)/4) <<
                 GEN6_GS_SAMPLER_COUNT_SHIFT) |
                ((prog_data->base.binding_table.size_bytes / 4) <<
                 GEN6_GS_BINDING_TABLE_ENTRY_COUNT_SHIFT));

      if (prog_data->base.total_scratch) {
         OUT_RELOC(stage_state->scratch_bo,
                   I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER,
                   ffs(prog_data->base.total_scratch) - 11);
      } else {
         OUT_BATCH(0); /* no scratch space */
      }

      OUT_BATCH((prog_data->urb_read_length <<
                 GEN6_GS_URB_READ_LENGTH_SHIFT) |
                (0 << GEN6_GS_URB_ENTRY_READ_OFFSET_SHIFT) |
                (prog_data->base.dispatch_grf_start_reg <<
                 GEN6_GS_DISPATCH_START_GRF_SHIFT));

d54 8
a61 17
                GEN6_GS_STATISTICS_ENABLE |
                GEN6_GS_SO_STATISTICS_ENABLE |
                GEN6_GS_RENDERING_ENABLE);

      if (brw->gs.prog_data->gen6_xfb_enabled) {
         /* GEN6_GS_REORDER is equivalent to GEN7_GS_REORDER_TRAILING
          * in gen7. SNB and IVB specs are the same regarding the reordering of
          * TRISTRIP/TRISTRIP_REV vertices and triangle orientation, so we do
          * the same thing in both generations. For more details, see the
          * comment in gen7_gs_state.c
          */
         OUT_BATCH(GEN6_GS_REORDER |
                   GEN6_GS_SVBI_PAYLOAD_ENABLE |
                   GEN6_GS_ENABLE);
      } else {
         OUT_BATCH(GEN6_GS_REORDER | GEN6_GS_ENABLE);
      }
a62 5
   } else if (brw->ff_gs.prog_active) {
      /* In gen6, transform feedback for the VS stage is done with an ad-hoc GS
       * program. This function provides the needed 3DSTATE_GS for this.
       */
      upload_gs_state_for_tf(brw);
a63 1
      /* No GS function required */
d68 1
a68 1
                (0 << GEN6_GS_BINDING_TABLE_ENTRY_COUNT_SHIFT));
d71 2
a72 2
                (0 << GEN6_GS_URB_READ_LENGTH_SHIFT) |
                (0 << GEN6_GS_URB_ENTRY_READ_OFFSET_SHIFT));
d74 3
a76 3
                GEN6_GS_STATISTICS_ENABLE |
                GEN6_GS_RENDERING_ENABLE);
                OUT_BATCH(0);
a78 1
   brw->gs.enabled = active;
d83 3
a85 6
      .mesa  = _NEW_TRANSFORM | _NEW_PROGRAM_CONSTANTS,
      .brw   = (BRW_NEW_CONTEXT |
                BRW_NEW_PUSH_CONSTANT_ALLOCATION |
                BRW_NEW_GEOMETRY_PROGRAM |
                BRW_NEW_BATCH),
      .cache = (CACHE_NEW_GS_PROG | CACHE_NEW_FF_GS_PROG)
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d34 54
d90 30
a119 8
   /* Disable all the constant buffers. */
   BEGIN_BATCH(5);
   OUT_BATCH(_3DSTATE_CONSTANT_GS << 16 | (5 - 2));
   OUT_BATCH(0);
   OUT_BATCH(0);
   OUT_BATCH(0);
   OUT_BATCH(0);
   ADVANCE_BATCH();
d121 1
a121 1
   if (brw->ff_gs.prog_active) {
d124 28
a151 5
      OUT_BATCH(brw->ff_gs.prog_offset);
      OUT_BATCH(GEN6_GS_SPF_MODE | GEN6_GS_VECTOR_MASK_ENABLE);
      OUT_BATCH(0); /* no scratch space */
      OUT_BATCH((2 << GEN6_GS_DISPATCH_START_GRF_SHIFT) |
	        (brw->ff_gs.prog_data->urb_read_length << GEN6_GS_URB_READ_LENGTH_SHIFT));
d153 17
a169 8
	        GEN6_GS_STATISTICS_ENABLE |
		GEN6_GS_SO_STATISTICS_ENABLE |
		GEN6_GS_RENDERING_ENABLE);
      OUT_BATCH(GEN6_GS_SVBI_PAYLOAD_ENABLE |
                GEN6_GS_SVBI_POSTINCREMENT_ENABLE |
                (brw->ff_gs.prog_data->svbi_postincrement_value <<
                 GEN6_GS_SVBI_POSTINCREMENT_VALUE_SHIFT) |
                GEN6_GS_ENABLE);
d171 5
d177 1
d182 1
a182 1
		(0 << GEN6_GS_BINDING_TABLE_ENTRY_COUNT_SHIFT));
d185 2
a186 2
		(0 << GEN6_GS_URB_READ_LENGTH_SHIFT) |
		(0 << GEN6_GS_URB_ENTRY_READ_OFFSET_SHIFT));
d188 3
a190 3
		GEN6_GS_STATISTICS_ENABLE |
		GEN6_GS_RENDERING_ENABLE);
      OUT_BATCH(0);
d193 1
d198 6
a203 3
      .mesa  = _NEW_TRANSFORM,
      .brw   = BRW_NEW_CONTEXT | BRW_NEW_PUSH_CONSTANT_ALLOCATION,
      .cache = CACHE_NEW_FF_GS_PROG
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d45 1
a45 1
   if (brw->gs.prog_active) {
d48 1
a48 1
      OUT_BATCH(brw->gs.prog_offset);
d52 1
a52 1
	        (brw->gs.prog_data->urb_read_length << GEN6_GS_URB_READ_LENGTH_SHIFT));
d59 1
a59 1
                (brw->gs.prog_data->svbi_postincrement_value <<
d84 2
a85 2
      .brw   = BRW_NEW_CONTEXT,
      .cache = CACHE_NEW_GS_PROG
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a35 2
   struct intel_context *intel = &brw->intel;

d45 34
a78 16
   // GS should never be used on Gen6.  Disable it.
   assert(!brw->gs.prog_active);
   BEGIN_BATCH(7);
   OUT_BATCH(_3DSTATE_GS << 16 | (7 - 2));
   OUT_BATCH(0); /* prog_bo */
   OUT_BATCH((0 << GEN6_GS_SAMPLER_COUNT_SHIFT) |
	     (0 << GEN6_GS_BINDING_TABLE_ENTRY_COUNT_SHIFT));
   OUT_BATCH(0); /* scratch space base offset */
   OUT_BATCH((1 << GEN6_GS_DISPATCH_START_GRF_SHIFT) |
	     (0 << GEN6_GS_URB_READ_LENGTH_SHIFT) |
	     (0 << GEN6_GS_URB_ENTRY_READ_OFFSET_SHIFT));
   OUT_BATCH((0 << GEN6_GS_MAX_THREADS_SHIFT) |
	     GEN6_GS_STATISTICS_ENABLE |
	     GEN6_GS_RENDERING_ENABLE);
   OUT_BATCH(0);
   ADVANCE_BATCH();
d84 1
a84 2
      .brw   = (BRW_NEW_URB_FENCE |
		BRW_NEW_CONTEXT),
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d48 1
a48 1
   assert(brw->gs.prog_bo == NULL);
d68 1
a68 2
      .brw   = (BRW_NEW_CURBE_OFFSETS |
		BRW_NEW_URB_FENCE |
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d40 1
a40 1
   OUT_BATCH(CMD_3D_CONSTANT_GS_STATE << 16 | (5 - 2));
d47 16
a62 33
   intel_batchbuffer_emit_mi_flush(intel->batch);

   if (brw->gs.prog_bo) {
      BEGIN_BATCH(7);
      OUT_BATCH(CMD_3D_GS_STATE << 16 | (7 - 2));
      OUT_RELOC(brw->gs.prog_bo, I915_GEM_DOMAIN_INSTRUCTION, 0, 0);
      OUT_BATCH((0 << GEN6_GS_SAMPLER_COUNT_SHIFT) |
		(0 << GEN6_GS_BINDING_TABLE_ENTRY_COUNT_SHIFT));
      OUT_BATCH(0); /* scratch space base offset */
      OUT_BATCH((1 << GEN6_GS_DISPATCH_START_GRF_SHIFT) |
		(brw->gs.prog_data->urb_read_length << GEN6_GS_URB_READ_LENGTH_SHIFT) |
		(0 << GEN6_GS_URB_ENTRY_READ_OFFSET_SHIFT));
      OUT_BATCH((0 << GEN6_GS_MAX_THREADS_SHIFT) |
		GEN6_GS_STATISTICS_ENABLE |
		GEN6_GS_RENDERING_ENABLE);
      OUT_BATCH(GEN6_GS_ENABLE);
      ADVANCE_BATCH();
   } else {
      BEGIN_BATCH(7);
      OUT_BATCH(CMD_3D_GS_STATE << 16 | (7 - 2));
      OUT_BATCH(0); /* prog_bo */
      OUT_BATCH((0 << GEN6_GS_SAMPLER_COUNT_SHIFT) |
		(0 << GEN6_GS_BINDING_TABLE_ENTRY_COUNT_SHIFT));
      OUT_BATCH(0); /* scratch space base offset */
      OUT_BATCH((1 << GEN6_GS_DISPATCH_START_GRF_SHIFT) |
		(0 << GEN6_GS_URB_READ_LENGTH_SHIFT) |
		(0 << GEN6_GS_URB_ENTRY_READ_OFFSET_SHIFT));
      OUT_BATCH((0 << GEN6_GS_MAX_THREADS_SHIFT) |
		GEN6_GS_STATISTICS_ENABLE |
		GEN6_GS_RENDERING_ENABLE);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   }
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d40 1
a40 1
   OUT_BATCH(_3DSTATE_CONSTANT_GS << 16 | (5 - 2));
d47 33
a79 16
   // GS should never be used on Gen6.  Disable it.
   assert(brw->gs.prog_bo == NULL);
   BEGIN_BATCH(7);
   OUT_BATCH(_3DSTATE_GS << 16 | (7 - 2));
   OUT_BATCH(0); /* prog_bo */
   OUT_BATCH((0 << GEN6_GS_SAMPLER_COUNT_SHIFT) |
	     (0 << GEN6_GS_BINDING_TABLE_ENTRY_COUNT_SHIFT));
   OUT_BATCH(0); /* scratch space base offset */
   OUT_BATCH((1 << GEN6_GS_DISPATCH_START_GRF_SHIFT) |
	     (0 << GEN6_GS_URB_READ_LENGTH_SHIFT) |
	     (0 << GEN6_GS_URB_ENTRY_READ_OFFSET_SHIFT));
   OUT_BATCH((0 << GEN6_GS_MAX_THREADS_SHIFT) |
	     GEN6_GS_STATISTICS_ENABLE |
	     GEN6_GS_RENDERING_ENABLE);
   OUT_BATCH(0);
   ADVANCE_BATCH();
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d36 2
d47 16
a62 34
   if (brw->gs.prog_active) {
      BEGIN_BATCH(7);
      OUT_BATCH(_3DSTATE_GS << 16 | (7 - 2));
      OUT_BATCH(brw->gs.prog_offset);
      OUT_BATCH(GEN6_GS_SPF_MODE | GEN6_GS_VECTOR_MASK_ENABLE);
      OUT_BATCH(0); /* no scratch space */
      OUT_BATCH((2 << GEN6_GS_DISPATCH_START_GRF_SHIFT) |
	        (brw->gs.prog_data->urb_read_length << GEN6_GS_URB_READ_LENGTH_SHIFT));
      OUT_BATCH(((brw->max_gs_threads - 1) << GEN6_GS_MAX_THREADS_SHIFT) |
	        GEN6_GS_STATISTICS_ENABLE |
		GEN6_GS_SO_STATISTICS_ENABLE |
		GEN6_GS_RENDERING_ENABLE);
      OUT_BATCH(GEN6_GS_SVBI_PAYLOAD_ENABLE |
                GEN6_GS_SVBI_POSTINCREMENT_ENABLE |
                (brw->gs.prog_data->svbi_postincrement_value <<
                 GEN6_GS_SVBI_POSTINCREMENT_VALUE_SHIFT) |
                GEN6_GS_ENABLE);
      ADVANCE_BATCH();
   } else {
      BEGIN_BATCH(7);
      OUT_BATCH(_3DSTATE_GS << 16 | (7 - 2));
      OUT_BATCH(0); /* prog_bo */
      OUT_BATCH((0 << GEN6_GS_SAMPLER_COUNT_SHIFT) |
		(0 << GEN6_GS_BINDING_TABLE_ENTRY_COUNT_SHIFT));
      OUT_BATCH(0); /* scratch space base offset */
      OUT_BATCH((1 << GEN6_GS_DISPATCH_START_GRF_SHIFT) |
		(0 << GEN6_GS_URB_READ_LENGTH_SHIFT) |
		(0 << GEN6_GS_URB_ENTRY_READ_OFFSET_SHIFT));
      OUT_BATCH((0 << GEN6_GS_MAX_THREADS_SHIFT) |
		GEN6_GS_STATISTICS_ENABLE |
		GEN6_GS_RENDERING_ENABLE);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   }
d68 3
a70 1
      .brw   = BRW_NEW_CONTEXT,
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d45 1
a45 1
   if (brw->ff_gs.prog_active) {
d48 1
a48 1
      OUT_BATCH(brw->ff_gs.prog_offset);
d52 1
a52 1
	        (brw->ff_gs.prog_data->urb_read_length << GEN6_GS_URB_READ_LENGTH_SHIFT));
d59 1
a59 1
                (brw->ff_gs.prog_data->svbi_postincrement_value <<
d84 2
a85 2
      .brw   = BRW_NEW_CONTEXT | BRW_NEW_PUSH_CONSTANT_ALLOCATION,
      .cache = CACHE_NEW_FF_GS_PROG
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d34 1
a34 1
gen6_upload_gs_push_constants(struct brw_context *brw)
d36 7
a42 48
   struct brw_stage_state *stage_state = &brw->gs.base;

   /* BRW_NEW_GEOMETRY_PROGRAM */
   const struct brw_geometry_program *gp =
      (struct brw_geometry_program *) brw->geometry_program;

   if (gp) {
      /* CACHE_NEW_GS_PROG */
      struct brw_stage_prog_data *prog_data = &brw->gs.prog_data->base.base;

      gen6_upload_push_constants(brw, &gp->program.Base, prog_data,
                                 stage_state, AUB_TRACE_VS_CONSTANTS);
   }

   if (brw->gen >= 7)
      gen7_upload_constant_state(brw, stage_state, gp, _3DSTATE_CONSTANT_GS);
}

const struct brw_tracked_state gen6_gs_push_constants = {
   .dirty = {
      .mesa  = _NEW_TRANSFORM | _NEW_PROGRAM_CONSTANTS,
      .brw   = (BRW_NEW_BATCH |
                BRW_NEW_GEOMETRY_PROGRAM |
                BRW_NEW_PUSH_CONSTANT_ALLOCATION),
      .cache = CACHE_NEW_GS_PROG,
   },
   .emit = gen6_upload_gs_push_constants,
};

static void
upload_gs_state_for_tf(struct brw_context *brw)
{
   BEGIN_BATCH(7);
   OUT_BATCH(_3DSTATE_GS << 16 | (7 - 2));
   OUT_BATCH(brw->ff_gs.prog_offset);
   OUT_BATCH(GEN6_GS_SPF_MODE | GEN6_GS_VECTOR_MASK_ENABLE);
   OUT_BATCH(0); /* no scratch space */
   OUT_BATCH((2 << GEN6_GS_DISPATCH_START_GRF_SHIFT) |
             (brw->ff_gs.prog_data->urb_read_length << GEN6_GS_URB_READ_LENGTH_SHIFT));
   OUT_BATCH(((brw->max_gs_threads - 1) << GEN6_GS_MAX_THREADS_SHIFT) |
             GEN6_GS_STATISTICS_ENABLE |
             GEN6_GS_SO_STATISTICS_ENABLE |
             GEN6_GS_RENDERING_ENABLE);
   OUT_BATCH(GEN6_GS_SVBI_PAYLOAD_ENABLE |
             GEN6_GS_SVBI_POSTINCREMENT_ENABLE |
             (brw->ff_gs.prog_data->svbi_postincrement_value <<
              GEN6_GS_SVBI_POSTINCREMENT_VALUE_SHIFT) |
             GEN6_GS_ENABLE);
a43 10
}

static void
upload_gs_state(struct brw_context *brw)
{
   /* BRW_NEW_GEOMETRY_PROGRAM */
   bool active = brw->geometry_program;
   /* CACHE_NEW_GS_PROG */
   const struct brw_vec4_prog_data *prog_data = &brw->gs.prog_data->base;
   const struct brw_stage_state *stage_state = &brw->gs.base;
d45 1
a45 26
   if (!active || stage_state->push_const_size == 0) {
      /* Disable the push constant buffers. */
      BEGIN_BATCH(5);
      OUT_BATCH(_3DSTATE_CONSTANT_GS << 16 | (5 - 2));
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   } else {
      BEGIN_BATCH(5);
      OUT_BATCH(_3DSTATE_CONSTANT_GS << 16 |
		GEN6_CONSTANT_BUFFER_0_ENABLE |
		(5 - 2));
      /* Pointer to the GS constant buffer.  Covered by the set of
       * state flags from gen6_upload_vs_constants
       */
      OUT_BATCH(stage_state->push_const_offset +
                stage_state->push_const_size - 1);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   }

   if (active) {
d48 5
a52 28
      OUT_BATCH(stage_state->prog_offset);

      /* GEN6_GS_SPF_MODE and GEN6_GS_VECTOR_MASK_ENABLE are enabled as it
       * was previously done for gen6.
       *
       * TODO: test with both disabled to see if the HW is behaving
       * as expected, like in gen7.
       */
      OUT_BATCH(GEN6_GS_SPF_MODE | GEN6_GS_VECTOR_MASK_ENABLE |
                ((ALIGN(stage_state->sampler_count, 4)/4) <<
                 GEN6_GS_SAMPLER_COUNT_SHIFT) |
                ((prog_data->base.binding_table.size_bytes / 4) <<
                 GEN6_GS_BINDING_TABLE_ENTRY_COUNT_SHIFT));

      if (prog_data->base.total_scratch) {
         OUT_RELOC(stage_state->scratch_bo,
                   I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER,
                   ffs(prog_data->base.total_scratch) - 11);
      } else {
         OUT_BATCH(0); /* no scratch space */
      }

      OUT_BATCH((prog_data->urb_read_length <<
                 GEN6_GS_URB_READ_LENGTH_SHIFT) |
                (0 << GEN6_GS_URB_ENTRY_READ_OFFSET_SHIFT) |
                (prog_data->base.dispatch_grf_start_reg <<
                 GEN6_GS_DISPATCH_START_GRF_SHIFT));

d54 8
a61 17
                GEN6_GS_STATISTICS_ENABLE |
                GEN6_GS_SO_STATISTICS_ENABLE |
                GEN6_GS_RENDERING_ENABLE);

      if (brw->gs.prog_data->gen6_xfb_enabled) {
         /* GEN6_GS_REORDER is equivalent to GEN7_GS_REORDER_TRAILING
          * in gen7. SNB and IVB specs are the same regarding the reordering of
          * TRISTRIP/TRISTRIP_REV vertices and triangle orientation, so we do
          * the same thing in both generations. For more details, see the
          * comment in gen7_gs_state.c
          */
         OUT_BATCH(GEN6_GS_REORDER |
                   GEN6_GS_SVBI_PAYLOAD_ENABLE |
                   GEN6_GS_ENABLE);
      } else {
         OUT_BATCH(GEN6_GS_REORDER | GEN6_GS_ENABLE);
      }
a62 5
   } else if (brw->ff_gs.prog_active) {
      /* In gen6, transform feedback for the VS stage is done with an ad-hoc GS
       * program. This function provides the needed 3DSTATE_GS for this.
       */
      upload_gs_state_for_tf(brw);
a63 1
      /* No GS function required */
d68 1
a68 1
                (0 << GEN6_GS_BINDING_TABLE_ENTRY_COUNT_SHIFT));
d71 2
a72 2
                (0 << GEN6_GS_URB_READ_LENGTH_SHIFT) |
                (0 << GEN6_GS_URB_ENTRY_READ_OFFSET_SHIFT));
d74 3
a76 3
                GEN6_GS_STATISTICS_ENABLE |
                GEN6_GS_RENDERING_ENABLE);
                OUT_BATCH(0);
a78 1
   brw->gs.enabled = active;
d83 3
a85 6
      .mesa  = _NEW_TRANSFORM | _NEW_PROGRAM_CONSTANTS,
      .brw   = (BRW_NEW_CONTEXT |
                BRW_NEW_PUSH_CONSTANT_ALLOCATION |
                BRW_NEW_GEOMETRY_PROGRAM |
                BRW_NEW_BATCH),
      .cache = (CACHE_NEW_GS_PROG | CACHE_NEW_FF_GS_PROG)
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d34 54
d90 30
a119 8
   /* Disable all the constant buffers. */
   BEGIN_BATCH(5);
   OUT_BATCH(_3DSTATE_CONSTANT_GS << 16 | (5 - 2));
   OUT_BATCH(0);
   OUT_BATCH(0);
   OUT_BATCH(0);
   OUT_BATCH(0);
   ADVANCE_BATCH();
d121 1
a121 1
   if (brw->ff_gs.prog_active) {
d124 28
a151 5
      OUT_BATCH(brw->ff_gs.prog_offset);
      OUT_BATCH(GEN6_GS_SPF_MODE | GEN6_GS_VECTOR_MASK_ENABLE);
      OUT_BATCH(0); /* no scratch space */
      OUT_BATCH((2 << GEN6_GS_DISPATCH_START_GRF_SHIFT) |
	        (brw->ff_gs.prog_data->urb_read_length << GEN6_GS_URB_READ_LENGTH_SHIFT));
d153 17
a169 8
	        GEN6_GS_STATISTICS_ENABLE |
		GEN6_GS_SO_STATISTICS_ENABLE |
		GEN6_GS_RENDERING_ENABLE);
      OUT_BATCH(GEN6_GS_SVBI_PAYLOAD_ENABLE |
                GEN6_GS_SVBI_POSTINCREMENT_ENABLE |
                (brw->ff_gs.prog_data->svbi_postincrement_value <<
                 GEN6_GS_SVBI_POSTINCREMENT_VALUE_SHIFT) |
                GEN6_GS_ENABLE);
d171 5
d177 1
d182 1
a182 1
		(0 << GEN6_GS_BINDING_TABLE_ENTRY_COUNT_SHIFT));
d185 2
a186 2
		(0 << GEN6_GS_URB_READ_LENGTH_SHIFT) |
		(0 << GEN6_GS_URB_ENTRY_READ_OFFSET_SHIFT));
d188 3
a190 3
		GEN6_GS_STATISTICS_ENABLE |
		GEN6_GS_RENDERING_ENABLE);
      OUT_BATCH(0);
d193 1
d198 6
a203 3
      .mesa  = _NEW_TRANSFORM,
      .brw   = BRW_NEW_CONTEXT | BRW_NEW_PUSH_CONSTANT_ALLOCATION,
      .cache = CACHE_NEW_FF_GS_PROG
@


