head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.5
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.5
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.4
	v9_2_3:1.1.1.4
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.4
	v9_2_0:1.1.1.4
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.6
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.4
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.04.21;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.47;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.57.17;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.05.13.15.41;	author jsg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.07.09.20.34.52;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */


#ifndef BRW_VS_H
#define BRW_VS_H


#include "brw_context.h"
#include "brw_eu.h"
#include "brw_vec4.h"
#include "program/program.h"

/**
 * The VF can't natively handle certain types of attributes, such as GL_FIXED
 * or most 10_10_10_2 types.  These flags enable various VS workarounds to
 * "fix" attributes at the beginning of shaders.
 */
#define BRW_ATTRIB_WA_COMPONENT_MASK    7  /* mask for GL_FIXED scale channel count */
#define BRW_ATTRIB_WA_NORMALIZE     8   /* normalize in shader */
#define BRW_ATTRIB_WA_BGRA          16  /* swap r/b channels in shader */
#define BRW_ATTRIB_WA_SIGN          32  /* interpret as signed in shader */
#define BRW_ATTRIB_WA_SCALE         64  /* interpret as scaled in shader */

struct brw_vs_prog_key {
   struct brw_vec4_prog_key base;

   /*
    * Per-attribute workaround flags
    */
   uint8_t gl_attrib_wa_flags[VERT_ATTRIB_MAX];

   GLuint copy_edgeflag:1;

   /**
    * For pre-Gen6 hardware, a bitfield indicating which texture coordinates
    * are going to be replaced with point coordinates (as a consequence of a
    * call to glTexEnvi(GL_POINT_SPRITE, GL_COORD_REPLACE, GL_TRUE)).  Because
    * our SF thread requires exact matching between VS outputs and FS inputs,
    * these texture coordinates will need to be unconditionally included in
    * the VUE, even if they aren't written by the vertex shader.
    */
   GLuint point_coord_replace:8;
};


struct brw_vs_compile {
   struct brw_vec4_compile base;
   struct brw_vs_prog_key key;

   struct brw_vertex_program *vp;
};

#ifdef __cplusplus
extern "C" {
#endif

const unsigned *brw_vs_emit(struct brw_context *brw,
                            struct gl_shader_program *prog,
                            struct brw_vs_compile *c,
                            struct brw_vs_prog_data *prog_data,
                            void *mem_ctx,
                            unsigned *program_size);
bool brw_vs_precompile(struct gl_context *ctx, struct gl_shader_program *prog);
void brw_vs_debug_recompile(struct brw_context *brw,
                            struct gl_shader_program *prog,
                            const struct brw_vs_prog_key *key);
bool brw_vs_prog_data_compare(const void *a, const void *b);

#ifdef __cplusplus
} /* extern "C" */


namespace brw {

class vec4_vs_visitor : public vec4_visitor
{
public:
   vec4_vs_visitor(struct brw_context *brw,
                   struct brw_vs_compile *vs_compile,
                   struct brw_vs_prog_data *vs_prog_data,
                   struct gl_shader_program *prog,
                   void *mem_ctx);

protected:
   virtual dst_reg *make_reg_for_system_value(ir_variable *ir);
   virtual void setup_payload();
   virtual void emit_prolog();
   virtual void emit_program_code();
   virtual void emit_thread_end();
   virtual void emit_urb_write_header(int mrf);
   virtual vec4_instruction *emit_urb_write_opcode(bool complete);

private:
   int setup_attributes(int payload_reg);
   void setup_vp_regs();
   dst_reg get_vp_dst_reg(const prog_dst_register &dst);
   src_reg get_vp_src_reg(const prog_src_register &src);

   struct brw_vs_compile * const vs_compile;
   struct brw_vs_prog_data * const vs_prog_data;
   src_reg *vp_temp_regs;
   src_reg vp_addr_reg;
};

} /* namespace brw */


#endif

#endif
@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.7
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d31 1
a31 1
            
d39 1
a39 1
#include "brw_program.h"
a52 36
struct brw_vec4_prog_key {
   GLuint program_string_id;

   /**
    * True if at least one clip flag is enabled, regardless of whether the
    * shader uses clip planes or gl_ClipDistance.
    */
   GLuint userclip_active:1;

   /**
    * How many user clipping planes are being uploaded to the vertex shader as
    * push constants.
    */
   GLuint nr_userclip_plane_consts:4;

   /**
    * True if the shader uses gl_ClipDistance, regardless of whether any clip
    * flags are enabled.
    */
   GLuint uses_clip_distance:1;

   /**
    * For pre-Gen6 hardware, a bitfield indicating which clipping planes are
    * enabled.  This is used to compact clip planes.
    *
    * For Gen6 and later hardware, clip planes are not compacted, so this
    * value is zero to avoid provoking unnecessary shader recompiles.
    */
   GLuint userclip_planes_enabled_gen_4_5:MAX_CLIP_PLANES;

   GLuint clamp_vertex_color:1;

   struct brw_sampler_prog_key_data tex;
};


a74 5
struct brw_vec4_compile {
   GLuint last_scratch; /**< measured in 32-byte (register size) units */
};


d82 4
d96 42
a137 6
bool brw_vec4_prog_data_compare(const struct brw_vec4_prog_data *a,
                                const struct brw_vec4_prog_data *b);
bool brw_vs_prog_data_compare(const void *a, const void *b,
                              int aux_size, const void *key);
void brw_vec4_prog_data_free(const struct brw_vec4_prog_data *prog_data);
void brw_vs_prog_data_free(const void *in_prog_data);
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d39 1
d42 10
d53 1
a53 1
struct brw_vs_prog_key {
d55 13
d69 2
a70 1
    * Number of channels of the vertex attribute that need GL_FIXED rescaling
d72 25
a96 2
   uint8_t gl_fixed_input_size[VERT_ATTRIB_MAX];
   GLuint nr_userclip:4;
d98 9
d108 5
a112 2
   GLuint two_side_color: 1;
   GLuint clamp_vertex_color:1;
d117 1
a117 1
   struct brw_compile func;
a118 2
   struct brw_vs_prog_data prog_data;
   int8_t constant_map[1024];
a120 30

   GLuint nr_inputs;

   GLuint first_output;
   GLuint nr_outputs;
   GLuint first_overflow_output; /**< VERT_ATTRIB_x */

   GLuint first_tmp;
   GLuint last_tmp;

   struct brw_reg r0;
   struct brw_reg r1;
   struct brw_reg regs[PROGRAM_ADDRESS+1][128];
   struct brw_reg tmp;
   struct brw_reg stack;

   struct {	
       GLboolean used_in_src;
       struct brw_reg reg;
   } output_regs[128];

   struct brw_reg userplane[6];

   /** we may need up to 3 constants per instruction (if use_const_buffer) */
   struct {
      GLint index;
      struct brw_reg reg;
   } current_const[3];

   GLboolean needs_stack;
d123 16
a138 1
void brw_vs_emit( struct brw_vs_compile *c );
@


1.5
log
@Merge Mesa 7.10.3
@
text
@d44 4
d52 1
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d39 1
a39 1
#include "shader/program.h"
d46 2
a47 1
   GLuint pad:26;
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d54 1
d62 1
d80 7
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a45 1
   GLuint know_w_is_one:1;
a80 4


void brw_ProgramCacheDestroy( GLcontext *ctx );
void brw_ProgramCacheInit( GLcontext *ctx );
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
#include "program.h"
d46 2
a47 1
   GLuint pad:27;
d70 6
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d46 1
a46 2
   GLuint know_w_is_one:1;
   GLuint pad:26;
@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@d39 1
a39 1
#include "program/program.h"
d46 2
a47 2
   GLuint point_coord_replace:8;
   GLuint two_side_color: 1;
a54 1
   int8_t constant_map[1024];
a61 1
   GLuint first_overflow_output; /**< VERT_ATTRIB_x */
a69 6
   struct brw_reg stack;

   struct {	
       GLboolean used_in_src;
       struct brw_reg reg;
   } output_regs[128];
a72 7
   /** we may need up to 3 constants per instruction (if use_const_buffer) */
   struct {
      GLint index;
      struct brw_reg reg;
   } current_const[3];

   GLboolean needs_stack;
d76 4
@


1.1.1.4
log
@Import Mesa 9.2.0
@
text
@a38 1
#include "brw_program.h"
a40 10
/**
 * The VF can't natively handle certain types of attributes, such as GL_FIXED
 * or most 10_10_10_2 types.  These flags enable various VS workarounds to
 * "fix" attributes at the beginning of shaders.
 */
#define BRW_ATTRIB_WA_COMPONENT_MASK    7  /* mask for GL_FIXED scale channel count */
#define BRW_ATTRIB_WA_NORMALIZE     8   /* normalize in shader */
#define BRW_ATTRIB_WA_BGRA          16  /* swap r/b channels in shader */
#define BRW_ATTRIB_WA_SIGN          32  /* interpret as signed in shader */
#define BRW_ATTRIB_WA_SCALE         64  /* interpret as scaled in shader */
d42 1
a42 1
struct brw_vec4_prog_key {
d44 1
a44 42

   /**
    * True if at least one clip flag is enabled, regardless of whether the
    * shader uses clip planes or gl_ClipDistance.
    */
   GLuint userclip_active:1;

   /**
    * How many user clipping planes are being uploaded to the vertex shader as
    * push constants.
    */
   GLuint nr_userclip_plane_consts:4;

   /**
    * True if the shader uses gl_ClipDistance, regardless of whether any clip
    * flags are enabled.
    */
   GLuint uses_clip_distance:1;

   /**
    * For pre-Gen6 hardware, a bitfield indicating which clipping planes are
    * enabled.  This is used to compact clip planes.
    *
    * For Gen6 and later hardware, clip planes are not compacted, so this
    * value is zero to avoid provoking unnecessary shader recompiles.
    */
   GLuint userclip_planes_enabled_gen_4_5:MAX_CLIP_PLANES;

   GLuint clamp_vertex_color:1;

   struct brw_sampler_prog_key_data tex;
};


struct brw_vs_prog_key {
   struct brw_vec4_prog_key base;

   /*
    * Per-attribute workaround flags
    */
   uint8_t gl_attrib_wa_flags[VERT_ATTRIB_MAX];

a45 9

   /**
    * For pre-Gen6 hardware, a bitfield indicating which texture coordinates
    * are going to be replaced with point coordinates (as a consequence of a
    * call to glTexEnvi(GL_POINT_SPRITE, GL_COORD_REPLACE, GL_TRUE)).  Because
    * our SF thread requires exact matching between VS outputs and FS inputs,
    * these texture coordinates will need to be unconditionally included in
    * the VUE, even if they aren't written by the vertex shader.
    */
d47 1
a47 5
};


struct brw_vec4_compile {
   GLuint last_scratch; /**< measured in 32-byte (register size) units */
d52 1
a52 1
   struct brw_vec4_compile base;
d54 2
d58 30
d90 1
a90 16
const unsigned *brw_vs_emit(struct brw_context *brw,
                            struct gl_shader_program *prog,
                            struct brw_vs_compile *c,
                            struct brw_vs_prog_data *prog_data,
                            void *mem_ctx,
                            unsigned *program_size);
bool brw_vs_precompile(struct gl_context *ctx, struct gl_shader_program *prog);
void brw_vs_debug_recompile(struct brw_context *brw,
                            struct gl_shader_program *prog,
                            const struct brw_vs_prog_key *key);
bool brw_vec4_prog_data_compare(const struct brw_vec4_prog_data *a,
                                const struct brw_vec4_prog_data *b);
bool brw_vs_prog_data_compare(const void *a, const void *b,
                              int aux_size, const void *key);
void brw_vec4_prog_data_free(const struct brw_vec4_prog_data *prog_data);
void brw_vs_prog_data_free(const void *in_prog_data);
@


1.1.1.5
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d31 1
a31 1

d39 1
a39 1
#include "brw_vec4.h"
d53 36
d111 5
a122 4
#ifdef __cplusplus
extern "C" {
#endif

d133 6
a138 42
bool brw_vs_prog_data_compare(const void *a, const void *b);

#ifdef __cplusplus
} /* extern "C" */


namespace brw {

class vec4_vs_visitor : public vec4_visitor
{
public:
   vec4_vs_visitor(struct brw_context *brw,
                   struct brw_vs_compile *vs_compile,
                   struct brw_vs_prog_data *vs_prog_data,
                   struct gl_shader_program *prog,
                   void *mem_ctx);

protected:
   virtual dst_reg *make_reg_for_system_value(ir_variable *ir);
   virtual void setup_payload();
   virtual void emit_prolog();
   virtual void emit_program_code();
   virtual void emit_thread_end();
   virtual void emit_urb_write_header(int mrf);
   virtual vec4_instruction *emit_urb_write_opcode(bool complete);

private:
   int setup_attributes(int payload_reg);
   void setup_vp_regs();
   dst_reg get_vp_dst_reg(const prog_dst_register &dst);
   src_reg get_vp_src_reg(const prog_src_register &src);

   struct brw_vs_compile * const vs_compile;
   struct brw_vs_prog_data * const vs_prog_data;
   src_reg *vp_temp_regs;
   src_reg vp_addr_reg;
};

} /* namespace brw */


#endif
@


