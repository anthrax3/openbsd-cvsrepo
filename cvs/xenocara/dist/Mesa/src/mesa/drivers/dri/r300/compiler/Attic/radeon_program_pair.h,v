head	1.4;
access;
symbols
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.09.05.14.05.13;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.16;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.41;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@/*
 * Copyright (C) 2008 Nicolai Haehnle.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef __RADEON_PROGRAM_PAIR_H_
#define __RADEON_PROGRAM_PAIR_H_

#include "radeon_code.h"
#include "radeon_opcodes.h"
#include "radeon_program_constants.h"

struct radeon_compiler;


/**
 * \file
 * Represents a paired ALU instruction, as found in R300 and R500
 * fragment programs.
 *
 * Note that this representation is taking some liberties as far
 * as register files are concerned, to allow separate register
 * allocation.
 *
 * Also note that there are some subtleties in that the semantics
 * of certain opcodes are implicitly changed in this representation;
 * see \ref rc_pair_translate
 */

/* For rgb and alpha instructions when arg[n].Source = RC_PAIR_PRESUB_SRC, then
 * the presubtract value will be used, and
 * {RGB,Alpha}.Src[RC_PAIR_PRESUB_SRC].File will be set to RC_FILE_PRESUB.
 */
#define RC_PAIR_PRESUB_SRC 3

struct rc_pair_instruction_source {
	unsigned int Used:1;
	unsigned int File:3;
	unsigned int Index:RC_REGISTER_INDEX_BITS;
};

struct rc_pair_instruction_arg {
	unsigned int Source:2;
	unsigned int Swizzle:12;
	unsigned int Abs:1;
	unsigned int Negate:1;
};

struct rc_pair_sub_instruction {
	unsigned int Opcode:8;
	unsigned int DestIndex:RC_REGISTER_INDEX_BITS;
	unsigned int WriteMask:4;
	unsigned int Target:2;
	unsigned int OutputWriteMask:3;
	unsigned int DepthWriteMask:1;
	unsigned int Saturate:1;

	struct rc_pair_instruction_source Src[4];
	struct rc_pair_instruction_arg Arg[3];
};

struct rc_pair_instruction {
	struct rc_pair_sub_instruction RGB;
	struct rc_pair_sub_instruction Alpha;

	unsigned int WriteALUResult:2;
	unsigned int ALUResultCompare:3;
	unsigned int Nop:1;
};

typedef void (*rc_pair_foreach_src_fn)
			(void *, struct rc_pair_instruction_source *);

/**
 * General helper functions for dealing with the paired instruction format.
 */
/*@@{*/
int rc_pair_alloc_source(struct rc_pair_instruction *pair,
	unsigned int rgb, unsigned int alpha,
	rc_register_file file, unsigned int index);

void rc_pair_foreach_source_that_alpha_reads(
	struct rc_pair_instruction * pair,
	void * data,
	rc_pair_foreach_src_fn cb);

void rc_pair_foreach_source_that_rgb_reads(
	struct rc_pair_instruction * pair,
	void * data,
	rc_pair_foreach_src_fn cb);

struct rc_pair_instruction_source * rc_pair_get_src(
	struct rc_pair_instruction * pair_inst,
	struct rc_pair_instruction_arg * arg);

int rc_pair_get_src_index(
	struct rc_pair_instruction * pair_inst,
	struct rc_pair_instruction_source * src);
/*@@}*/


/**
 * Compiler passes that operate with the paired format.
 */
/*@@{*/
struct radeon_pair_handler;

void rc_pair_translate(struct radeon_compiler *cc, void *user);
void rc_pair_schedule(struct radeon_compiler *cc, void *user);
void rc_pair_regalloc(struct radeon_compiler *cc, void *user);
void rc_pair_regalloc_inputs_only(struct radeon_compiler *cc, void *user);
void rc_pair_remove_dead_sources(struct radeon_compiler *c, void *user);
/*@@}*/

#endif /* __RADEON_PROGRAM_PAIR_H_ */
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d66 1
a66 1
	unsigned int Swizzle:9;
d117 4
d134 1
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d35 1
a35 1
struct r300_fragment_program_compiler;
d52 5
d58 1
a58 1
struct radeon_pair_instruction_source {
d64 5
a68 16
struct radeon_pair_instruction_rgb {
	unsigned int Opcode:8;
	unsigned int DestIndex:RC_REGISTER_INDEX_BITS;
	unsigned int WriteMask:3;
    unsigned int Target:2;
	unsigned int OutputWriteMask:3;
	unsigned int Saturate:1;

	struct radeon_pair_instruction_source Src[3];

	struct {
		unsigned int Source:2;
		unsigned int Swizzle:9;
		unsigned int Abs:1;
		unsigned int Negate:1;
	} Arg[3];
d71 1
a71 1
struct radeon_pair_instruction_alpha {
d74 3
a76 3
	unsigned int WriteMask:1;
    unsigned int Target:2;
	unsigned int OutputWriteMask:1;
d80 2
a81 8
	struct radeon_pair_instruction_source Src[3];

	struct {
		unsigned int Source:2;
		unsigned int Swizzle:3;
		unsigned int Abs:1;
		unsigned int Negate:1;
	} Arg[3];
d85 2
a86 2
	struct radeon_pair_instruction_rgb RGB;
	struct radeon_pair_instruction_alpha Alpha;
d90 1
d93 2
d103 14
d126 4
a129 3
void rc_pair_translate(struct r300_fragment_program_compiler *c);
void rc_pair_schedule(struct r300_fragment_program_compiler *c);
void rc_pair_regalloc(struct r300_fragment_program_compiler *c, unsigned maxtemps);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d35 1
a35 1
struct radeon_compiler;
a51 5
/* For rgb and alpha instructions when arg[n].Source = RC_PAIR_PRESUB_SRC, then
 * the presubtract value will be used, and
 * {RGB,Alpha}.Src[RC_PAIR_PRESUB_SRC].File will be set to RC_FILE_PRESUB.
 */
#define RC_PAIR_PRESUB_SRC 3
d53 1
a53 1
struct rc_pair_instruction_source {
d59 16
a74 5
struct rc_pair_instruction_arg {
	unsigned int Source:2;
	unsigned int Swizzle:9;
	unsigned int Abs:1;
	unsigned int Negate:1;
d77 1
a77 1
struct rc_pair_sub_instruction {
d80 3
a82 3
	unsigned int WriteMask:4;
	unsigned int Target:2;
	unsigned int OutputWriteMask:3;
d86 8
a93 2
	struct rc_pair_instruction_source Src[4];
	struct rc_pair_instruction_arg Arg[3];
d97 2
a98 2
	struct rc_pair_sub_instruction RGB;
	struct rc_pair_sub_instruction Alpha;
a101 1
	unsigned int Nop:1;
a103 2
typedef void (*rc_pair_foreach_src_fn)
			(void *, struct rc_pair_instruction_source *);
a111 14

void rc_pair_foreach_source_that_alpha_reads(
	struct rc_pair_instruction * pair,
	void * data,
	rc_pair_foreach_src_fn cb);

void rc_pair_foreach_source_that_rgb_reads(
	struct rc_pair_instruction * pair,
	void * data,
	rc_pair_foreach_src_fn cb);

struct rc_pair_instruction_source * rc_pair_get_src(
	struct rc_pair_instruction * pair_inst,
	struct rc_pair_instruction_arg * arg);
d121 3
a123 4
void rc_pair_translate(struct radeon_compiler *cc, void *user);
void rc_pair_schedule(struct radeon_compiler *cc, void *user);
void rc_pair_regalloc(struct radeon_compiler *cc, void *user);
void rc_pair_regalloc_inputs_only(struct radeon_compiler *cc, void *user);
@

