head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.51;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.3;
commitid	4ry2gvZGMXkCUD2n;

1.3
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.2;
commitid	mcxB0JvoI9gTDYXU;

1.2
date	2012.08.17.13.58.16;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.42;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.16.04;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2015.01.25.14.12.11;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.49.18;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2009 Pauli Nieminen
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 */
/*
 * Authors:
 *      Pauli Nieminen <suokkos@@gmail.com>
 */

#ifndef RADEON_DEBUG_H_INCLUDED
#define RADEON_DEBUG_H_INCLUDED

#include <stdlib.h>

typedef enum radeon_debug_levels {
	RADEON_CRITICAL  = 0, /* Only errors */
	RADEON_IMPORTANT = 1, /* Important warnings and messages */
	RADEON_NORMAL    = 2, /* Normal log messages usefull for debugging */
	RADEON_VERBOSE   = 3, /* Extra details to debugging */
	RADEON_TRACE     = 4  /* Log about everything that happens */
} radeon_debug_level_t;

/**
 * Compile time option to change level of debugging compiled to dri driver.
 * Selecting critical level is not recommended because perfromance gains are
 * going to minimal but you will lose a lot of important warnings in case of
 * errors.
 */
#ifndef RADEON_DEBUG_LEVEL
# ifdef DEBUG
#  define RADEON_DEBUG_LEVEL RADEON_TRACE
# else
#  define RADEON_DEBUG_LEVEL RADEON_VERBOSE
# endif
#endif

typedef enum radeon_debug_types {
	RADEON_TEXTURE   = 0x00001,
	RADEON_STATE     = 0x00002,
	RADEON_IOCTL     = 0x00004,
	RADEON_RENDER    = 0x00008,
	RADEON_SWRENDER  = 0x00010,
	RADEON_FALLBACKS = 0x00020,
	RADEON_VFMT      = 0x00040,
	RADEON_SHADER    = 0x00080,
	RADEON_CS        = 0x00100,
	RADEON_DRI       = 0x00200,
	RADEON_DMA       = 0x00400,
	RADEON_SANITY    = 0x00800,
	RADEON_SYNC      = 0x01000,
	RADEON_PIXEL     = 0x02000,
	RADEON_MEMORY    = 0x04000,
	RADEON_VERTS     = 0x08000,
	RADEON_GENERAL   = 0x10000   /* Used for errors and warnings */
} radeon_debug_type_t;

#define RADEON_MAX_INDENT 5

struct radeon_debug {
       size_t indent_depth;
       char indent[RADEON_MAX_INDENT];
};

extern radeon_debug_type_t radeon_enabled_debug_types;

/**
 * Compabibility layer for old debug code
 **/
#define RADEON_DEBUG radeon_enabled_debug_types

static inline int radeon_is_debug_enabled(const radeon_debug_type_t type,
	   const radeon_debug_level_t level)
{
       return RADEON_DEBUG_LEVEL >= level
		&& (type & radeon_enabled_debug_types);
}
/*
 * define macro for gcc specific __attribute__ if using alternative compiler
 */
#ifndef __GNUC__
#define  __attribute__(x)  /*empty*/
#endif


extern void _radeon_print(const radeon_debug_type_t type,
	   const radeon_debug_level_t level,
	   const char* message,
	   ...)  __attribute__((format(printf,3,4)));
/**
 * Print out debug message if channel specified by type is enabled
 * and compile time debugging level is at least as high as level parameter
 */
#define radeon_print(type, level, ...) do {			\
	const radeon_debug_level_t _debug_level = (level);	\
	const radeon_debug_type_t _debug_type = (type);		\
	/* Compile out if level of message is too high */	\
	if (radeon_is_debug_enabled(type, level)) {		\
		_radeon_print(_debug_type, _debug_level,	\
			__VA_ARGS__);				\
	}							\
} while(0)

/**
 * printf style function for writing error messages.
 */
#define radeon_error(...) do {					\
	radeon_print(RADEON_GENERAL, RADEON_CRITICAL,		\
		__VA_ARGS__);					\
} while(0)

/**
 * printf style function for writing warnings.
 */
#define radeon_warning(...) do {				\
	radeon_print(RADEON_GENERAL, RADEON_IMPORTANT,		\
		__VA_ARGS__);					\
} while(0)

extern void radeon_init_debug(void);
extern void _radeon_debug_add_indent(void);
extern void _radeon_debug_remove_indent(void);

static inline void radeon_debug_add_indent(void)
{
       if (RADEON_DEBUG_LEVEL >= RADEON_VERBOSE) {
	      _radeon_debug_add_indent();
       }
}
static inline void radeon_debug_remove_indent(void)
{
       if (RADEON_DEBUG_LEVEL >= RADEON_VERBOSE) {
	      _radeon_debug_remove_indent();
       }
}


/* From http://gcc. gnu.org/onlinedocs/gcc-3.2.3/gcc/Variadic-Macros.html .
   I suppose we could inline this and use macro to fetch out __LINE__ and stuff in case we run into trouble
   with other compilers ... GLUE!
*/
#define WARN_ONCE(...)      do { \
       static int __warn_once=1; \
       if(__warn_once){ \
               radeon_warning("*********************************WARN_ONCE*********************************\n"); \
               radeon_warning("File %s function %s line %d\n", \
                       __FILE__, __FUNCTION__, __LINE__); \
               radeon_warning(__VA_ARGS__);\
               radeon_warning("***************************************************************************\n"); \
               __warn_once=0;\
               } \
       } while(0)


#endif
@


1.4
log
@Merge Mesa 10.2.9
@
text
@@


1.3
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d97 7
d108 1
a108 1
	   ...)  PRINTFLIKE(3, 4);
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a96 7
/*
 * define macro for gcc specific __attribute__ if using alternative compiler
 */
#ifndef __GNUC__
#define  __attribute__(x)  /*empty*/
#endif

d101 1
a101 1
	   ...)  __attribute__((format(printf,3,4)));
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d113 1
a113 1
#define radeon_print(type, level, message, ...) do {		\
d119 1
a119 1
			(message), ## __VA_ARGS__);		\
d126 1
a126 1
#define radeon_error(message, ...) do {				\
d128 1
a128 1
		(message), ## __VA_ARGS__);			\
d134 1
a134 1
#define radeon_warning(message, ...) do {			\
d136 1
a136 1
		(message), ## __VA_ARGS__);			\
d161 1
a161 1
#define WARN_ONCE(a, ...)      do { \
d167 1
a167 1
               radeon_warning(  (a), ## __VA_ARGS__);\
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d113 1
a113 1
#define radeon_print(type, level, ...) do {			\
d119 1
a119 1
			__VA_ARGS__);				\
d126 1
a126 1
#define radeon_error(...) do {					\
d128 1
a128 1
		__VA_ARGS__);					\
d134 1
a134 1
#define radeon_warning(...) do {				\
d136 1
a136 1
		__VA_ARGS__);					\
d161 1
a161 1
#define WARN_ONCE(...)      do { \
d167 1
a167 1
               radeon_warning(__VA_ARGS__);\
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d97 7
d108 1
a108 1
	   ...)  PRINTFLIKE(3, 4);
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@a96 7
/*
 * define macro for gcc specific __attribute__ if using alternative compiler
 */
#ifndef __GNUC__
#define  __attribute__(x)  /*empty*/
#endif

d101 1
a101 1
	   ...)  __attribute__((format(printf,3,4)));
@


