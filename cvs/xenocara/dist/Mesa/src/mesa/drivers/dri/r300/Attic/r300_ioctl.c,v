head	1.5;
access;
symbols
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2010.05.22.20.06.23;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.40;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.17;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.53.29;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.53.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.57.27;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.29.24;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@/*
Copyright (C) The Weather Channel, Inc.  2002.
Copyright (C) 2004 Nicolai Haehnle.
All Rights Reserved.

The Weather Channel (TM) funded Tungsten Graphics to develop the
initial release of the Radeon 8500 driver under the XFree86 license.
This notice must be preserved.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

/**
 * \file
 *
 * \author Keith Whitwell <keith@@tungstengraphics.com>
 *
 * \author Nicolai Haehnle <prefect_@@gmx.net>
 */

#include <sched.h>
#include <errno.h>

#include "main/glheader.h"
#include "main/imports.h"
#include "main/macros.h"
#include "main/context.h"
#include "swrast/swrast.h"

#include "r300_context.h"
#include "radeon_ioctl.h"
#include "r300_ioctl.h"
#include "r300_cmdbuf.h"
#include "r300_state.h"
#include "r300_vertprog.h"
#include "radeon_reg.h"
#include "r300_emit.h"
#include "r300_fragprog.h"

#include "vblank.h"

#define CLEARBUFFER_COLOR	0x1
#define CLEARBUFFER_DEPTH	0x2
#define CLEARBUFFER_STENCIL	0x4

static void r300ClearBuffer(r300ContextPtr r300, int flags, int buffer)
{
	GLcontext *ctx = r300->radeon.glCtx;
	__DRIdrawablePrivate *dPriv = r300->radeon.dri.drawable;
	GLuint cboffset, cbpitch;
	drm_r300_cmd_header_t *cmd2;
	int cmd_reserved = 0;
	int cmd_written = 0;
	drm_radeon_cmd_header_t *cmd = NULL;
	r300ContextPtr rmesa = r300;

	if (RADEON_DEBUG & DEBUG_IOCTL)
		fprintf(stderr, "%s: %s buffer (%i,%i %ix%i)\n",
			__FUNCTION__, buffer ? "back" : "front",
			dPriv->x, dPriv->y, dPriv->w, dPriv->h);

	if (buffer) {
		cboffset = r300->radeon.radeonScreen->backOffset;
		cbpitch = r300->radeon.radeonScreen->backPitch;
	} else {
		cboffset = r300->radeon.radeonScreen->frontOffset;
		cbpitch = r300->radeon.radeonScreen->frontPitch;
	}

	cboffset += r300->radeon.radeonScreen->fbLocation;

	cp_wait(r300, R300_WAIT_3D | R300_WAIT_3D_CLEAN);
	end_3d(rmesa);

	R300_STATECHANGE(r300, cb);
	reg_start(R300_RB3D_COLOROFFSET0, 0);
	e32(cboffset);

	if (r300->radeon.radeonScreen->cpp == 4)
		cbpitch |= R300_COLOR_FORMAT_ARGB8888;
	else
		cbpitch |= R300_COLOR_FORMAT_RGB565;

	if (r300->radeon.sarea->tiling_enabled)
		cbpitch |= R300_COLOR_TILE_ENABLE;

	reg_start(R300_RB3D_COLORPITCH0, 0);
	e32(cbpitch);

	R300_STATECHANGE(r300, cmk);
	reg_start(RB3D_COLOR_CHANNEL_MASK, 0);

	if (flags & CLEARBUFFER_COLOR) {
		e32((ctx->Color.ColorMask[BCOMP] ? RB3D_COLOR_CHANNEL_MASK_BLUE_MASK0 : 0) |
		    (ctx->Color.ColorMask[GCOMP] ? RB3D_COLOR_CHANNEL_MASK_GREEN_MASK0 : 0) |
		    (ctx->Color.ColorMask[RCOMP] ? RB3D_COLOR_CHANNEL_MASK_RED_MASK0 : 0) |
		    (ctx->Color.ColorMask[ACOMP] ? RB3D_COLOR_CHANNEL_MASK_ALPHA_MASK0 : 0));
	} else {
		e32(0x0);
	}

	R300_STATECHANGE(r300, zs);
	reg_start(R300_ZB_CNTL, 2);

	{
		uint32_t t1, t2;

		t1 = 0x0;
		t2 = 0x0;

		if (flags & CLEARBUFFER_DEPTH) {
			t1 |= R300_Z_ENABLE | R300_Z_WRITE_ENABLE;
			t2 |=
			    (R300_ZS_ALWAYS << R300_Z_FUNC_SHIFT);
		}

		if (flags & CLEARBUFFER_STENCIL) {
			t1 |= R300_STENCIL_ENABLE;
			t2 |=
			    (R300_ZS_ALWAYS <<
			     R300_S_FRONT_FUNC_SHIFT) |
			    (R300_ZS_REPLACE <<
			     R300_S_FRONT_SFAIL_OP_SHIFT) |
			    (R300_ZS_REPLACE <<
			     R300_S_FRONT_ZPASS_OP_SHIFT) |
			    (R300_ZS_REPLACE <<
			     R300_S_FRONT_ZFAIL_OP_SHIFT);
		}

		e32(t1);
		e32(t2);
		e32(((ctx->Stencil.WriteMask[0] & R300_STENCILREF_MASK) << R300_STENCILWRITEMASK_SHIFT) |
		    (ctx->Stencil.Clear & R300_STENCILREF_MASK));
	}

	cmd2 = (drm_r300_cmd_header_t *) r300AllocCmdBuf(r300, 9, __FUNCTION__);
	cmd2[0].packet3.cmd_type = R300_CMD_PACKET3;
	cmd2[0].packet3.packet = R300_CMD_PACKET3_CLEAR;
	cmd2[1].u = r300PackFloat32(dPriv->w / 2.0);
	cmd2[2].u = r300PackFloat32(dPriv->h / 2.0);
	cmd2[3].u = r300PackFloat32(ctx->Depth.Clear);
	cmd2[4].u = r300PackFloat32(1.0);
	cmd2[5].u = r300PackFloat32(ctx->Color.ClearColor[0]);
	cmd2[6].u = r300PackFloat32(ctx->Color.ClearColor[1]);
	cmd2[7].u = r300PackFloat32(ctx->Color.ClearColor[2]);
	cmd2[8].u = r300PackFloat32(ctx->Color.ClearColor[3]);

	r300EmitCacheFlush(rmesa);
	cp_wait(rmesa, R300_WAIT_3D | R300_WAIT_3D_CLEAN);
}

static void r300EmitClearState(GLcontext * ctx)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	r300ContextPtr rmesa = r300;
	__DRIdrawablePrivate *dPriv = r300->radeon.dri.drawable;
	int i;
	int cmd_reserved = 0;
	int cmd_written = 0;
	drm_radeon_cmd_header_t *cmd = NULL;
	int has_tcl = 1;
	int is_r500 = 0;
	GLuint vap_cntl;

	if (!(r300->radeon.radeonScreen->chip_flags & RADEON_CHIPSET_TCL))
		has_tcl = 0;

        if (r300->radeon.radeonScreen->chip_family >= CHIP_FAMILY_RV515)
                is_r500 = 1;


	/* FIXME: the values written to R300_VAP_INPUT_ROUTE_0_0 and
	 * R300_VAP_INPUT_ROUTE_0_1 are in fact known, however, the values are
	 * quite complex; see the functions in r300_emit.c.
	 *
	 * I believe it would be a good idea to extend the functions in
	 * r300_emit.c so that they can be used to setup the default values for
	 * these registers, as well as the actual values used for rendering.
	 */
	R300_STATECHANGE(r300, vir[0]);
	reg_start(R300_VAP_PROG_STREAM_CNTL_0, 0);
	if (!has_tcl)
	    e32(((((0 << R300_DST_VEC_LOC_SHIFT) | R300_DATA_TYPE_FLOAT_4) << R300_DATA_TYPE_0_SHIFT) |
		 ((R300_LAST_VEC | (2 << R300_DST_VEC_LOC_SHIFT) | R300_DATA_TYPE_FLOAT_4) << R300_DATA_TYPE_1_SHIFT)));
	else
	    e32(((((0 << R300_DST_VEC_LOC_SHIFT) | R300_DATA_TYPE_FLOAT_4) << R300_DATA_TYPE_0_SHIFT) |
		 ((R300_LAST_VEC | (1 << R300_DST_VEC_LOC_SHIFT) | R300_DATA_TYPE_FLOAT_4) << R300_DATA_TYPE_1_SHIFT)));

	/* disable fog */
	R300_STATECHANGE(r300, fogs);
	reg_start(R300_FG_FOG_BLEND, 0);
	e32(0x0);

	R300_STATECHANGE(r300, vir[1]);
	reg_start(R300_VAP_PROG_STREAM_CNTL_EXT_0, 0);
	e32(((((R300_SWIZZLE_SELECT_X << R300_SWIZZLE_SELECT_X_SHIFT) |
	       (R300_SWIZZLE_SELECT_Y << R300_SWIZZLE_SELECT_Y_SHIFT) |
	       (R300_SWIZZLE_SELECT_Z << R300_SWIZZLE_SELECT_Z_SHIFT) |
	       (R300_SWIZZLE_SELECT_W << R300_SWIZZLE_SELECT_W_SHIFT) |
	       ((R300_WRITE_ENA_X | R300_WRITE_ENA_Y | R300_WRITE_ENA_Z | R300_WRITE_ENA_W) << R300_WRITE_ENA_SHIFT))
	      << R300_SWIZZLE0_SHIFT) |
	     (((R300_SWIZZLE_SELECT_X << R300_SWIZZLE_SELECT_X_SHIFT) |
	       (R300_SWIZZLE_SELECT_Y << R300_SWIZZLE_SELECT_Y_SHIFT) |
	       (R300_SWIZZLE_SELECT_Z << R300_SWIZZLE_SELECT_Z_SHIFT) |
	       (R300_SWIZZLE_SELECT_W << R300_SWIZZLE_SELECT_W_SHIFT) |
	       ((R300_WRITE_ENA_X | R300_WRITE_ENA_Y | R300_WRITE_ENA_Z | R300_WRITE_ENA_W) << R300_WRITE_ENA_SHIFT))
	      << R300_SWIZZLE1_SHIFT)));

	/* R300_VAP_INPUT_CNTL_0, R300_VAP_INPUT_CNTL_1 */
	R300_STATECHANGE(r300, vic);
	reg_start(R300_VAP_VTX_STATE_CNTL, 1);
	e32((R300_SEL_USER_COLOR_0 << R300_COLOR_0_ASSEMBLY_SHIFT));
	e32(R300_INPUT_CNTL_POS | R300_INPUT_CNTL_COLOR | R300_INPUT_CNTL_TC0);

	R300_STATECHANGE(r300, vte);
	/* comes from fglrx startup of clear */
	reg_start(R300_SE_VTE_CNTL, 1);
	e32(R300_VTX_W0_FMT | R300_VPORT_X_SCALE_ENA |
	    R300_VPORT_X_OFFSET_ENA | R300_VPORT_Y_SCALE_ENA |
	    R300_VPORT_Y_OFFSET_ENA | R300_VPORT_Z_SCALE_ENA |
	    R300_VPORT_Z_OFFSET_ENA);
	e32(0x8);

	reg_start(R300_VAP_PSC_SGN_NORM_CNTL, 0);
	e32(0xaaaaaaaa);

	R300_STATECHANGE(r300, vof);
	reg_start(R300_VAP_OUTPUT_VTX_FMT_0, 1);
	e32(R300_VAP_OUTPUT_VTX_FMT_0__POS_PRESENT |
	    R300_VAP_OUTPUT_VTX_FMT_0__COLOR_0_PRESENT);
	e32(0x0);		/* no textures */

	R300_STATECHANGE(r300, txe);
	reg_start(R300_TX_ENABLE, 0);
	e32(0x0);

	R300_STATECHANGE(r300, vpt);
	reg_start(R300_SE_VPORT_XSCALE, 5);
	efloat(1.0);
	efloat(dPriv->x);
	efloat(1.0);
	efloat(dPriv->y);
	efloat(1.0);
	efloat(0.0);

	R300_STATECHANGE(r300, at);
	reg_start(R300_FG_ALPHA_FUNC, 0);
	e32(0x0);

	R300_STATECHANGE(r300, bld);
	reg_start(R300_RB3D_CBLEND, 1);
	e32(0x0);
	e32(0x0);

	if (has_tcl) {
	    R300_STATECHANGE(r300, vap_clip_cntl);
	    reg_start(R300_VAP_CLIP_CNTL, 0);
	    e32(R300_PS_UCP_MODE_CLIP_AS_TRIFAN | R300_CLIP_DISABLE);
        }

	R300_STATECHANGE(r300, ps);
	reg_start(R300_GA_POINT_SIZE, 0);
	e32(((dPriv->w * 6) << R300_POINTSIZE_X_SHIFT) |
	    ((dPriv->h * 6) << R300_POINTSIZE_Y_SHIFT));

	if (!is_r500) {
		R300_STATECHANGE(r300, ri);
		reg_start(R300_RS_IP_0, 7);
		for (i = 0; i < 8; ++i) {
			e32(R300_RS_SEL_T(1) | R300_RS_SEL_R(2) | R300_RS_SEL_Q(3));
		}

		R300_STATECHANGE(r300, rc);
		/* The second constant is needed to get glxgears display anything .. */
		reg_start(R300_RS_COUNT, 1);
		e32((1 << R300_IC_COUNT_SHIFT) | R300_HIRES_EN);
		e32(0x0);

		R300_STATECHANGE(r300, rr);
		reg_start(R300_RS_INST_0, 0);
		e32(R300_RS_INST_COL_CN_WRITE);
	} else {
		R300_STATECHANGE(r300, ri);
		reg_start(R500_RS_IP_0, 7);
		for (i = 0; i < 8; ++i) {
			e32((R500_RS_IP_PTR_K0 << R500_RS_IP_TEX_PTR_S_SHIFT) |
			    (R500_RS_IP_PTR_K0 << R500_RS_IP_TEX_PTR_T_SHIFT) |
			    (R500_RS_IP_PTR_K0 << R500_RS_IP_TEX_PTR_R_SHIFT) |
			    (R500_RS_IP_PTR_K1 << R500_RS_IP_TEX_PTR_Q_SHIFT));
		}

		R300_STATECHANGE(r300, rc);
		/* The second constant is needed to get glxgears display anything .. */
		reg_start(R300_RS_COUNT, 1);
		e32((1 << R300_IC_COUNT_SHIFT) | R300_HIRES_EN);
		e32(0x0);

		R300_STATECHANGE(r300, rr);
		reg_start(R500_RS_INST_0, 0);
		e32(R500_RS_INST_COL_CN_WRITE);

	}

	if (!is_r500) {
		R300_STATECHANGE(r300, fp);
		reg_start(R300_US_CONFIG, 2);
		e32(0x0);
		e32(0x0);
		e32(0x0);
		reg_start(R300_US_CODE_ADDR_0, 3);
		e32(0x0);
		e32(0x0);
		e32(0x0);
		e32(R300_RGBA_OUT);

		R300_STATECHANGE(r300, fpi[0]);
		R300_STATECHANGE(r300, fpi[1]);
		R300_STATECHANGE(r300, fpi[2]);
		R300_STATECHANGE(r300, fpi[3]);

		reg_start(R300_US_ALU_RGB_INST_0, 0);
		e32(FP_INSTRC(MAD, FP_ARGC(SRC0C_XYZ), FP_ARGC(ONE), FP_ARGC(ZERO)));

		reg_start(R300_US_ALU_RGB_ADDR_0, 0);
		e32(FP_SELC(0, NO, XYZ, FP_TMP(0), 0, 0));

		reg_start(R300_US_ALU_ALPHA_INST_0, 0);
		e32(FP_INSTRA(MAD, FP_ARGA(SRC0A), FP_ARGA(ONE), FP_ARGA(ZERO)));

		reg_start(R300_US_ALU_ALPHA_ADDR_0, 0);
		e32(FP_SELA(0, NO, W, FP_TMP(0), 0, 0));
	} else {
 		R300_STATECHANGE(r300, fp);
 		reg_start(R500_US_CONFIG, 1);
 		e32(R500_ZERO_TIMES_ANYTHING_EQUALS_ZERO);
 		e32(0x0);
 		reg_start(R500_US_CODE_ADDR, 2);
 		e32(R500_US_CODE_START_ADDR(0) | R500_US_CODE_END_ADDR(1));
 		e32(R500_US_CODE_RANGE_ADDR(0) | R500_US_CODE_RANGE_SIZE(1));
 		e32(R500_US_CODE_OFFSET_ADDR(0));

		R300_STATECHANGE(r300, r500fp);
		r500fp_start_fragment(0, 6);

		e32(R500_INST_TYPE_OUT |
		    R500_INST_TEX_SEM_WAIT |
		    R500_INST_LAST |
		    R500_INST_RGB_OMASK_R |
		    R500_INST_RGB_OMASK_G |
		    R500_INST_RGB_OMASK_B |
		    R500_INST_ALPHA_OMASK |
		    R500_INST_RGB_CLAMP |
		    R500_INST_ALPHA_CLAMP);

		e32(R500_RGB_ADDR0(0) |
		    R500_RGB_ADDR1(0) |
		    R500_RGB_ADDR1_CONST |
		    R500_RGB_ADDR2(0) |
		    R500_RGB_ADDR2_CONST);

		e32(R500_ALPHA_ADDR0(0) |
		    R500_ALPHA_ADDR1(0) |
		    R500_ALPHA_ADDR1_CONST |
		    R500_ALPHA_ADDR2(0) |
		    R500_ALPHA_ADDR2_CONST);

		e32(R500_ALU_RGB_SEL_A_SRC0 |
		    R500_ALU_RGB_R_SWIZ_A_R |
		    R500_ALU_RGB_G_SWIZ_A_G |
		    R500_ALU_RGB_B_SWIZ_A_B |
		    R500_ALU_RGB_SEL_B_SRC0 |
		    R500_ALU_RGB_R_SWIZ_B_R |
		    R500_ALU_RGB_B_SWIZ_B_G |
		    R500_ALU_RGB_G_SWIZ_B_B);

		e32(R500_ALPHA_OP_CMP |
		    R500_ALPHA_SWIZ_A_A |
		    R500_ALPHA_SWIZ_B_A);

		e32(R500_ALU_RGBA_OP_CMP |
		    R500_ALU_RGBA_R_SWIZ_0 |
		    R500_ALU_RGBA_G_SWIZ_0 |
		    R500_ALU_RGBA_B_SWIZ_0 |
		    R500_ALU_RGBA_A_SWIZ_0);
	}

	reg_start(R300_VAP_PVS_STATE_FLUSH_REG, 0);
	e32(0x00000000);
	if (has_tcl) {
	    vap_cntl = ((10 << R300_PVS_NUM_SLOTS_SHIFT) |
			(5 << R300_PVS_NUM_CNTLRS_SHIFT) |
			(12 << R300_VF_MAX_VTX_NUM_SHIFT));
	    if (r300->radeon.radeonScreen->chip_family >= CHIP_FAMILY_RV515)
		vap_cntl |= R500_TCL_STATE_OPTIMIZATION;
	} else
	    vap_cntl = ((10 << R300_PVS_NUM_SLOTS_SHIFT) |
			(5 << R300_PVS_NUM_CNTLRS_SHIFT) |
			(5 << R300_VF_MAX_VTX_NUM_SHIFT));

	if (r300->radeon.radeonScreen->chip_family == CHIP_FAMILY_RV515)
	    vap_cntl |= (2 << R300_PVS_NUM_FPUS_SHIFT);
	else if ((r300->radeon.radeonScreen->chip_family == CHIP_FAMILY_RV530) ||
		 (r300->radeon.radeonScreen->chip_family == CHIP_FAMILY_RV560) ||
		 (r300->radeon.radeonScreen->chip_family == CHIP_FAMILY_RV570))
	    vap_cntl |= (5 << R300_PVS_NUM_FPUS_SHIFT);
	else if ((r300->radeon.radeonScreen->chip_family == CHIP_FAMILY_RV410) ||
		 (r300->radeon.radeonScreen->chip_family == CHIP_FAMILY_R420))
	    vap_cntl |= (6 << R300_PVS_NUM_FPUS_SHIFT);
	else if ((r300->radeon.radeonScreen->chip_family == CHIP_FAMILY_R520) ||
		 (r300->radeon.radeonScreen->chip_family == CHIP_FAMILY_R580))
	    vap_cntl |= (8 << R300_PVS_NUM_FPUS_SHIFT);
	else
	    vap_cntl |= (4 << R300_PVS_NUM_FPUS_SHIFT);

	R300_STATECHANGE(rmesa, vap_cntl);
	reg_start(R300_VAP_CNTL, 0);
	e32(vap_cntl);

	if (has_tcl) {
		R300_STATECHANGE(r300, pvs);
		reg_start(R300_VAP_PVS_CODE_CNTL_0, 2);

		e32((0 << R300_PVS_FIRST_INST_SHIFT) |
		    (0 << R300_PVS_XYZW_VALID_INST_SHIFT) |
		    (1 << R300_PVS_LAST_INST_SHIFT));
		e32((0 << R300_PVS_CONST_BASE_OFFSET_SHIFT) |
		    (0 << R300_PVS_MAX_CONST_ADDR_SHIFT));
		e32(1 << R300_PVS_LAST_VTX_SRC_INST_SHIFT);

		R300_STATECHANGE(r300, vpi);
		vsf_start_fragment(0x0, 8);

		e32(PVS_OP_DST_OPERAND(VE_ADD, GL_FALSE, GL_FALSE, 0, 0xf, PVS_DST_REG_OUT));
		e32(PVS_SRC_OPERAND(0, PVS_SRC_SELECT_X, PVS_SRC_SELECT_Y, PVS_SRC_SELECT_Z, PVS_SRC_SELECT_W, PVS_SRC_REG_INPUT, VSF_FLAG_NONE));
		e32(PVS_SRC_OPERAND(0, PVS_SRC_SELECT_FORCE_0, PVS_SRC_SELECT_FORCE_0, PVS_SRC_SELECT_FORCE_0, PVS_SRC_SELECT_FORCE_0, PVS_SRC_REG_INPUT, VSF_FLAG_NONE));
		e32(0x0);

		e32(PVS_OP_DST_OPERAND(VE_ADD, GL_FALSE, GL_FALSE, 1, 0xf, PVS_DST_REG_OUT));
		e32(PVS_SRC_OPERAND(1, PVS_SRC_SELECT_X, PVS_SRC_SELECT_Y, PVS_SRC_SELECT_Z, PVS_SRC_SELECT_W, PVS_SRC_REG_INPUT, VSF_FLAG_NONE));
		e32(PVS_SRC_OPERAND(1, PVS_SRC_SELECT_FORCE_0, PVS_SRC_SELECT_FORCE_0, PVS_SRC_SELECT_FORCE_0, PVS_SRC_SELECT_FORCE_0, PVS_SRC_REG_INPUT, VSF_FLAG_NONE));
		e32(0x0);
	}
}

/**
 * Buffer clear
 */
static void r300Clear(GLcontext * ctx, GLbitfield mask)
{
	r300ContextPtr r300 = R300_CONTEXT(ctx);
	__DRIdrawablePrivate *dPriv = r300->radeon.dri.drawable;
	int flags = 0;
	int bits = 0;
	int swapped;

	if (RADEON_DEBUG & DEBUG_IOCTL)
		fprintf(stderr, "r300Clear\n");

	{
		LOCK_HARDWARE(&r300->radeon);
		UNLOCK_HARDWARE(&r300->radeon);
		if (dPriv->numClipRects == 0)
			return;
	}

	if (mask & BUFFER_BIT_FRONT_LEFT) {
		flags |= BUFFER_BIT_FRONT_LEFT;
		mask &= ~BUFFER_BIT_FRONT_LEFT;
	}

	if (mask & BUFFER_BIT_BACK_LEFT) {
		flags |= BUFFER_BIT_BACK_LEFT;
		mask &= ~BUFFER_BIT_BACK_LEFT;
	}

	if (mask & BUFFER_BIT_DEPTH) {
		bits |= CLEARBUFFER_DEPTH;
		mask &= ~BUFFER_BIT_DEPTH;
	}

	if ((mask & BUFFER_BIT_STENCIL) && r300->state.stencil.hw_stencil) {
		bits |= CLEARBUFFER_STENCIL;
		mask &= ~BUFFER_BIT_STENCIL;
	}

	if (mask) {
		if (RADEON_DEBUG & DEBUG_FALLBACKS)
			fprintf(stderr, "%s: swrast clear, mask: %x\n",
				__FUNCTION__, mask);
		_swrast_Clear(ctx, mask);
	}

	swapped = r300->radeon.sarea->pfCurrentPage == 1;

	/* Make sure it fits there. */
	r300EnsureCmdBufSpace(r300, 421 * 3, __FUNCTION__);
	if (flags || bits)
		r300EmitClearState(ctx);

	if (flags & BUFFER_BIT_FRONT_LEFT) {
		r300ClearBuffer(r300, bits | CLEARBUFFER_COLOR, swapped);
		bits = 0;
	}

	if (flags & BUFFER_BIT_BACK_LEFT) {
		r300ClearBuffer(r300, bits | CLEARBUFFER_COLOR, swapped ^ 1);
		bits = 0;
	}

	if (bits)
		r300ClearBuffer(r300, bits, 0);

}

void r300Flush(GLcontext * ctx)
{
	r300ContextPtr rmesa = R300_CONTEXT(ctx);

	if (RADEON_DEBUG & DEBUG_IOCTL)
		fprintf(stderr, "%s\n", __FUNCTION__);

	if (rmesa->dma.flush)
		rmesa->dma.flush( rmesa );

	if (rmesa->cmdbuf.count_used > rmesa->cmdbuf.count_reemit)
		r300FlushCmdBuf(rmesa, __FUNCTION__);
}

#ifdef USER_BUFFERS
#include "r300_mem.h"

void r300RefillCurrentDmaRegion(r300ContextPtr rmesa, int size)
{
	struct r300_dma_buffer *dmabuf;
	size = MAX2(size, RADEON_BUFFER_SIZE * 16);

	if (RADEON_DEBUG & (DEBUG_IOCTL | DEBUG_DMA))
		fprintf(stderr, "%s\n", __FUNCTION__);

	if (rmesa->dma.flush) {
		rmesa->dma.flush(rmesa);
	}

	if (rmesa->dma.current.buf) {
#ifdef USER_BUFFERS
		r300_mem_use(rmesa, rmesa->dma.current.buf->id);
#endif
		r300ReleaseDmaRegion(rmesa, &rmesa->dma.current, __FUNCTION__);
	}
	if (rmesa->dma.nr_released_bufs > 4)
		r300FlushCmdBuf(rmesa, __FUNCTION__);

	dmabuf = CALLOC_STRUCT(r300_dma_buffer);
	dmabuf->buf = (void *)1;	/* hack */
	dmabuf->refcount = 1;

	dmabuf->id = r300_mem_alloc(rmesa, 4, size);
	if (dmabuf->id == 0) {
		LOCK_HARDWARE(&rmesa->radeon);	/* no need to validate */

		r300FlushCmdBufLocked(rmesa, __FUNCTION__);
		radeonWaitForIdleLocked(&rmesa->radeon);

		dmabuf->id = r300_mem_alloc(rmesa, 4, size);

		UNLOCK_HARDWARE(&rmesa->radeon);

		if (dmabuf->id == 0) {
			fprintf(stderr,
				"Error: Could not get dma buffer... exiting\n");
			_mesa_exit(-1);
		}
	}

	rmesa->dma.current.buf = dmabuf;
	rmesa->dma.current.address = r300_mem_ptr(rmesa, dmabuf->id);
	rmesa->dma.current.end = size;
	rmesa->dma.current.start = 0;
	rmesa->dma.current.ptr = 0;
}

void r300ReleaseDmaRegion(r300ContextPtr rmesa,
			  struct r300_dma_region *region, const char *caller)
{
	if (RADEON_DEBUG & DEBUG_IOCTL)
		fprintf(stderr, "%s from %s\n", __FUNCTION__, caller);

	if (!region->buf)
		return;

	if (rmesa->dma.flush)
		rmesa->dma.flush(rmesa);

	if (--region->buf->refcount == 0) {
		r300_mem_free(rmesa, region->buf->id);
		FREE(region->buf);
		rmesa->dma.nr_released_bufs++;
	}

	region->buf = 0;
	region->start = 0;
}

/* Allocates a region from rmesa->dma.current.  If there isn't enough
 * space in current, grab a new buffer (and discard what was left of current)
 */
void r300AllocDmaRegion(r300ContextPtr rmesa,
			struct r300_dma_region *region,
			int bytes, int alignment)
{
	if (RADEON_DEBUG & DEBUG_IOCTL)
		fprintf(stderr, "%s %d\n", __FUNCTION__, bytes);

	if (rmesa->dma.flush)
		rmesa->dma.flush(rmesa);

	if (region->buf)
		r300ReleaseDmaRegion(rmesa, region, __FUNCTION__);

	alignment--;
	rmesa->dma.current.start = rmesa->dma.current.ptr =
	    (rmesa->dma.current.ptr + alignment) & ~alignment;

	if (rmesa->dma.current.ptr + bytes > rmesa->dma.current.end)
		r300RefillCurrentDmaRegion(rmesa, (bytes + 0x7) & ~0x7);

	region->start = rmesa->dma.current.start;
	region->ptr = rmesa->dma.current.start;
	region->end = rmesa->dma.current.start + bytes;
	region->address = rmesa->dma.current.address;
	region->buf = rmesa->dma.current.buf;
	region->buf->refcount++;

	rmesa->dma.current.ptr += bytes;	/* bug - if alignment > 7 */
	rmesa->dma.current.start =
	    rmesa->dma.current.ptr = (rmesa->dma.current.ptr + 0x7) & ~0x7;

	assert(rmesa->dma.current.ptr <= rmesa->dma.current.end);
}

#else
static void r300RefillCurrentDmaRegion(r300ContextPtr rmesa)
{
	struct r300_dma_buffer *dmabuf;
	int fd = rmesa->radeon.dri.fd;
	int index = 0;
	int size = 0;
	drmDMAReq dma;
	int ret;

	if (RADEON_DEBUG & (DEBUG_IOCTL | DEBUG_DMA))
		fprintf(stderr, "%s\n", __FUNCTION__);

	if (rmesa->dma.flush) {
		rmesa->dma.flush(rmesa);
	}

	if (rmesa->dma.current.buf)
		r300ReleaseDmaRegion(rmesa, &rmesa->dma.current, __FUNCTION__);

	if (rmesa->dma.nr_released_bufs > 4)
		r300FlushCmdBuf(rmesa, __FUNCTION__);

	dma.context = rmesa->radeon.dri.hwContext;
	dma.send_count = 0;
	dma.send_list = NULL;
	dma.send_sizes = NULL;
	dma.flags = 0;
	dma.request_count = 1;
	dma.request_size = RADEON_BUFFER_SIZE;
	dma.request_list = &index;
	dma.request_sizes = &size;
	dma.granted_count = 0;

	LOCK_HARDWARE(&rmesa->radeon);	/* no need to validate */

	ret = drmDMA(fd, &dma);

	if (ret != 0) {
		/* Try to release some buffers and wait until we can't get any more */
		if (rmesa->dma.nr_released_bufs) {
			r300FlushCmdBufLocked(rmesa, __FUNCTION__);
		}

		if (RADEON_DEBUG & DEBUG_DMA)
			fprintf(stderr, "Waiting for buffers\n");

		radeonWaitForIdleLocked(&rmesa->radeon);
		ret = drmDMA(fd, &dma);

		if (ret != 0) {
			UNLOCK_HARDWARE(&rmesa->radeon);
			fprintf(stderr,
				"Error: Could not get dma buffer... exiting\n");
			_mesa_exit(-1);
		}
	}

	UNLOCK_HARDWARE(&rmesa->radeon);

	if (RADEON_DEBUG & DEBUG_DMA)
		fprintf(stderr, "Allocated buffer %d\n", index);

	dmabuf = CALLOC_STRUCT(r300_dma_buffer);
	dmabuf->buf = &rmesa->radeon.radeonScreen->buffers->list[index];
	dmabuf->refcount = 1;

	rmesa->dma.current.buf = dmabuf;
	rmesa->dma.current.address = dmabuf->buf->address;
	rmesa->dma.current.end = dmabuf->buf->total;
	rmesa->dma.current.start = 0;
	rmesa->dma.current.ptr = 0;
}

void r300ReleaseDmaRegion(r300ContextPtr rmesa,
			  struct r300_dma_region *region, const char *caller)
{
	if (RADEON_DEBUG & DEBUG_IOCTL)
		fprintf(stderr, "%s from %s\n", __FUNCTION__, caller);

	if (!region->buf)
		return;

	if (rmesa->dma.flush)
		rmesa->dma.flush(rmesa);

	if (--region->buf->refcount == 0) {
		drm_radeon_cmd_header_t *cmd;

		if (RADEON_DEBUG & (DEBUG_IOCTL | DEBUG_DMA))
			fprintf(stderr, "%s -- DISCARD BUF %d\n",
				__FUNCTION__, region->buf->buf->idx);
		cmd =
		    (drm_radeon_cmd_header_t *) r300AllocCmdBuf(rmesa,
								sizeof
								(*cmd) / 4,
								__FUNCTION__);
		cmd->dma.cmd_type = R300_CMD_DMA_DISCARD;
		cmd->dma.buf_idx = region->buf->buf->idx;

		FREE(region->buf);
		rmesa->dma.nr_released_bufs++;
	}

	region->buf = 0;
	region->start = 0;
}

/* Allocates a region from rmesa->dma.current.  If there isn't enough
 * space in current, grab a new buffer (and discard what was left of current)
 */
void r300AllocDmaRegion(r300ContextPtr rmesa,
			struct r300_dma_region *region,
			int bytes, int alignment)
{
	if (RADEON_DEBUG & DEBUG_IOCTL)
		fprintf(stderr, "%s %d\n", __FUNCTION__, bytes);

	if (rmesa->dma.flush)
		rmesa->dma.flush(rmesa);

	if (region->buf)
		r300ReleaseDmaRegion(rmesa, region, __FUNCTION__);

	alignment--;
	rmesa->dma.current.start = rmesa->dma.current.ptr =
	    (rmesa->dma.current.ptr + alignment) & ~alignment;

	if (rmesa->dma.current.ptr + bytes > rmesa->dma.current.end)
		r300RefillCurrentDmaRegion(rmesa);

	region->start = rmesa->dma.current.start;
	region->ptr = rmesa->dma.current.start;
	region->end = rmesa->dma.current.start + bytes;
	region->address = rmesa->dma.current.address;
	region->buf = rmesa->dma.current.buf;
	region->buf->refcount++;

	rmesa->dma.current.ptr += bytes;	/* bug - if alignment > 7 */
	rmesa->dma.current.start =
	    rmesa->dma.current.ptr = (rmesa->dma.current.ptr + 0x7) & ~0x7;

	assert(rmesa->dma.current.ptr <= rmesa->dma.current.end);
}

#endif

GLboolean r300IsGartMemory(r300ContextPtr rmesa, const GLvoid * pointer,
			   GLint size)
{
	int offset =
	    (char *)pointer -
	    (char *)rmesa->radeon.radeonScreen->gartTextures.map;
	int valid = (size >= 0 && offset >= 0
		     && offset + size <
		     rmesa->radeon.radeonScreen->gartTextures.size);

	if (RADEON_DEBUG & DEBUG_IOCTL)
		fprintf(stderr, "r300IsGartMemory( %p ) : %d\n", pointer,
			valid);

	return valid;
}

GLuint r300GartOffsetFromVirtual(r300ContextPtr rmesa, const GLvoid * pointer)
{
	int offset =
	    (char *)pointer -
	    (char *)rmesa->radeon.radeonScreen->gartTextures.map;

	//fprintf(stderr, "offset=%08x\n", offset);

	if (offset < 0
	    || offset > rmesa->radeon.radeonScreen->gartTextures.size)
		return ~0;
	else
		return rmesa->radeon.radeonScreen->gart_texture_offset + offset;
}

void r300InitIoctlFuncs(struct dd_function_table *functions)
{
	functions->Clear = r300Clear;
	functions->Finish = radeonFinish;
	functions->Flush = r300Flush;
}
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d43 4
a46 4
#include "glheader.h"
#include "imports.h"
#include "macros.h"
#include "context.h"
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d54 1
a54 1
#include "r300_program.h"
d57 1
d110 1
a110 1
	reg_start(R300_RB3D_COLORMASK, 0);
d113 4
a116 4
		e32((ctx->Color.ColorMask[BCOMP] ? R300_COLORMASK0_B : 0) |
		    (ctx->Color.ColorMask[GCOMP] ? R300_COLORMASK0_G : 0) |
		    (ctx->Color.ColorMask[RCOMP] ? R300_COLORMASK0_R : 0) |
		    (ctx->Color.ColorMask[ACOMP] ? R300_COLORMASK0_A : 0));
d122 1
a122 1
	reg_start(R300_RB3D_ZSTENCIL_CNTL_0, 2);
d131 1
a131 1
			t1 |= R300_RB3D_Z_WRITE_ONLY;
d133 1
a133 3
			    (R300_ZS_ALWAYS << R300_RB3D_ZS1_DEPTH_FUNC_SHIFT);
		} else {
			t1 |= R300_RB3D_Z_DISABLED_1;	// disable
d137 1
a137 1
			t1 |= R300_RB3D_STENCIL_ENABLE;
d140 1
a140 1
			     R300_RB3D_ZS1_FRONT_FUNC_SHIFT) |
d142 1
a142 1
			     R300_RB3D_ZS1_FRONT_FAIL_OP_SHIFT) |
d144 1
a144 1
			     R300_RB3D_ZS1_FRONT_ZPASS_OP_SHIFT) |
d146 1
a146 9
			     R300_RB3D_ZS1_FRONT_ZFAIL_OP_SHIFT) |
			    (R300_ZS_ALWAYS <<
			     R300_RB3D_ZS1_BACK_FUNC_SHIFT) |
			    (R300_ZS_REPLACE <<
			     R300_RB3D_ZS1_BACK_FAIL_OP_SHIFT) |
			    (R300_ZS_REPLACE <<
			     R300_RB3D_ZS1_BACK_ZPASS_OP_SHIFT) |
			    (R300_ZS_REPLACE <<
			     R300_RB3D_ZS1_BACK_ZFAIL_OP_SHIFT);
d151 2
a152 1
		e32(r300->state.stencil.clear);
d167 1
a167 5
	reg_start(R300_RB3D_DSTCACHE_CTLSTAT, 0);
	e32(R300_RB3D_DSTCACHE_UNKNOWN_0A);

	reg_start(R300_RB3D_ZCACHE_CTLSTAT, 0);
	e32(R300_RB3D_ZCACHE_UNKNOWN_03);
d181 2
d187 4
d200 1
a200 1
	reg_start(R300_VAP_INPUT_ROUTE_0_0, 0);
d202 2
a203 1
		e32(0x22030003);
d205 2
a206 1
		e32(0x21030003);
d210 1
a210 1
	reg_start(R300_RE_FOG_STATE, 0);
d214 13
a226 2
	reg_start(R300_VAP_INPUT_ROUTE_1_0, 0);
	e32(0xF688F688);
d230 2
a231 2
	reg_start(R300_VAP_INPUT_CNTL_0, 1);
	e32(R300_INPUT_CNTL_0_COLOR);
d234 8
a241 9
	if (!has_tcl) {
		R300_STATECHANGE(r300, vte);
		/* comes from fglrx startup of clear */
		reg_start(R300_SE_VTE_CNTL, 1);
		e32(R300_VTX_W0_FMT | R300_VPORT_X_SCALE_ENA |
		    R300_VPORT_X_OFFSET_ENA | R300_VPORT_Y_SCALE_ENA |
		    R300_VPORT_Y_OFFSET_ENA | R300_VPORT_Z_SCALE_ENA |
		    R300_VPORT_Z_OFFSET_ENA);
		e32(0x8);
d243 2
a244 3
		reg_start(0x21dc, 0);
		e32(0xaaaaaaaa);
	}
d249 2
a250 2
	    R300_VAP_OUTPUT_VTX_FMT_0__COLOR_PRESENT);
	e32(0x0);			/* no textures */
d266 1
a266 1
	reg_start(R300_PP_ALPHA_TEST, 0);
d274 5
a278 3
	R300_STATECHANGE(r300, vap_clip_cntl);
	reg_start(R300_VAP_CLIP_CNTL, 0);
	e32(R300_221C_CLEAR);
d281 1
a281 1
	reg_start(R300_RE_POINTSIZE, 0);
d285 36
a320 4
	R300_STATECHANGE(r300, ri);
	reg_start(R300_RS_INTERP_0, 8);
	for (i = 0; i < 8; ++i) {
		e32(R300_RS_INTERP_USED);
d323 11
a333 5
	R300_STATECHANGE(r300, rc);
	/* The second constant is needed to get glxgears display anything .. */
	reg_start(R300_RS_CNTL_0, 1);
	e32((1 << R300_RS_CNTL_CI_CNT_SHIFT) | R300_RS_CNTL_0_UNKNOWN_18);
	e32(0x0);
d335 4
a338 3
	R300_STATECHANGE(r300, rr);
	reg_start(R300_RS_ROUTE_0, 0);
	e32(R300_RS_ROUTE_0_COLOR);
d340 2
a341 10
	R300_STATECHANGE(r300, fp);
	reg_start(R300_PFS_CNTL_0, 2);
	e32(0x0);
	e32(0x0);
	e32(0x0);
	reg_start(R300_PFS_NODE_0, 3);
	e32(0x0);
	e32(0x0);
	e32(0x0);
	e32(R300_PFS_NODE_OUTPUT_COLOR);
d343 2
a344 4
	R300_STATECHANGE(r300, fpi[0]);
	R300_STATECHANGE(r300, fpi[1]);
	R300_STATECHANGE(r300, fpi[2]);
	R300_STATECHANGE(r300, fpi[3]);
d346 2
a347 2
	reg_start(R300_PFS_INSTR0_0, 0);
	e32(FP_INSTRC(MAD, FP_ARGC(SRC0C_XYZ), FP_ARGC(ONE), FP_ARGC(ZERO)));
d349 56
a404 2
	reg_start(R300_PFS_INSTR1_0, 0);
	e32(FP_SELC(0, NO, XYZ, FP_TMP(0), 0, 0));
d406 27
a432 2
	reg_start(R300_PFS_INSTR2_0, 0);
	e32(FP_INSTRA(MAD, FP_ARGA(SRC0A), FP_ARGA(ONE), FP_ARGA(ZERO)));
d434 3
a436 2
	reg_start(R300_PFS_INSTR3_0, 0);
	e32(FP_SELA(0, NO, W, FP_TMP(0), 0, 0));
d440 8
a447 6
		reg_start(R300_VAP_PVS_CNTL_1, 2);
		e32((0 << R300_PVS_CNTL_1_PROGRAM_START_SHIFT) |
		    (0 << R300_PVS_CNTL_1_POS_END_SHIFT) |
		    (1 << R300_PVS_CNTL_1_PROGRAM_END_SHIFT));
		e32(0x0);
		e32(1 << R300_PVS_CNTL_3_PROGRAM_UNKNOWN_SHIFT);
d451 4
a454 3
		e32(VP_OUT(ADD, OUT, 0, XYZW));
		e32(VP_IN(IN, 0));
		e32(VP_ZERO());
d457 3
a459 3
		e32(VP_OUT(ADD, OUT, 1, XYZW));
		e32(VP_IN(IN, 1));
		e32(VP_ZERO());
d536 1
a536 1
	r300ContextPtr r300 = R300_CONTEXT(ctx);
d541 5
a545 2
	if (r300->cmdbuf.count_used > r300->cmdbuf.count_reemit)
		r300FlushCmdBuf(r300, __FUNCTION__);
d551 1
a551 1
static void r300RefillCurrentDmaRegion(r300ContextPtr rmesa, int size)
d563 4
a566 1
	if (rmesa->dma.current.buf)
d568 1
a568 1

@


1.1
log
@Initial revision
@
text
@d32 6
a37 4
/*
 * Authors:
 *   Keith Whitwell <keith@@tungstengraphics.com>
 *   Nicolai Haehnle <prefect_@@gmx.net>
d66 1
a66 1
	GLcontext* ctx = r300->radeon.glCtx;
d69 1
a69 1
	drm_r300_cmd_header_t* cmd2;
d73 1
a73 1
	r300ContextPtr rmesa=r300;
a74 4
#ifndef CB_DPATH
	int i;
#endif
	
a89 159
#ifndef CB_DPATH
	R300_STATECHANGE(r300, vir[0]);
	((drm_r300_cmd_header_t*)r300->hw.vir[0].cmd)->packet0.count = 1;
	r300->hw.vir[0].cmd[1] = 0x21030003;

	R300_STATECHANGE(r300, vir[1]);
	((drm_r300_cmd_header_t*)r300->hw.vir[1].cmd)->packet0.count = 1;
	r300->hw.vir[1].cmd[1] = 0xF688F688;

	R300_STATECHANGE(r300, vic);
	r300->hw.vic.cmd[R300_VIC_CNTL_0] = 0x00000001;
	r300->hw.vic.cmd[R300_VIC_CNTL_1] = 0x00000405;
	
	R300_STATECHANGE(r300, vof);
	r300->hw.vof.cmd[R300_VOF_CNTL_0] = R300_VAP_OUTPUT_VTX_FMT_0__POS_PRESENT
				| R300_VAP_OUTPUT_VTX_FMT_0__COLOR_PRESENT;
	r300->hw.vof.cmd[R300_VOF_CNTL_1] = 0; /* no textures */
	
	R300_STATECHANGE(r300, txe);
	r300->hw.txe.cmd[R300_TXE_ENABLE] = 0;
	
	R300_STATECHANGE(r300, vpt);
	r300->hw.vpt.cmd[R300_VPT_XSCALE] = r300PackFloat32(1.0);
	r300->hw.vpt.cmd[R300_VPT_XOFFSET] = r300PackFloat32(dPriv->x);
	r300->hw.vpt.cmd[R300_VPT_YSCALE] = r300PackFloat32(1.0);
	r300->hw.vpt.cmd[R300_VPT_YOFFSET] = r300PackFloat32(dPriv->y);
	r300->hw.vpt.cmd[R300_VPT_ZSCALE] = r300PackFloat32(1.0);
	r300->hw.vpt.cmd[R300_VPT_ZOFFSET] = r300PackFloat32(0.0);

	R300_STATECHANGE(r300, at);
	r300->hw.at.cmd[R300_AT_ALPHA_TEST] = 0;
	
	R300_STATECHANGE(r300, bld);
	r300->hw.bld.cmd[R300_BLD_CBLEND] = 0;
	r300->hw.bld.cmd[R300_BLD_ABLEND] = 0;
	
	if (r300->radeon.radeonScreen->cpp == 4)
		cbpitch |= R300_COLOR_FORMAT_ARGB8888;
	else
		cbpitch |= R300_COLOR_FORMAT_RGB565;
	
	if (r300->radeon.sarea->tiling_enabled)
		cbpitch |= R300_COLOR_TILE_ENABLE;
	
	R300_STATECHANGE(r300, cb);
	r300->hw.cb.cmd[R300_CB_OFFSET] = cboffset;
	r300->hw.cb.cmd[R300_CB_PITCH] = cbpitch;

	R300_STATECHANGE(r300, unk221C);
	r300->hw.unk221C.cmd[1] = R300_221C_CLEAR;

	R300_STATECHANGE(r300, ps);
	r300->hw.ps.cmd[R300_PS_POINTSIZE] =
		((dPriv->w * 6) << R300_POINTSIZE_X_SHIFT) |
		((dPriv->h * 6) << R300_POINTSIZE_Y_SHIFT);

	R300_STATECHANGE(r300, ri);
	for(i = 1; i <= 8; ++i)
		r300->hw.ri.cmd[i] = R300_RS_INTERP_USED;

	R300_STATECHANGE(r300, rc);
	/* The second constant is needed to get glxgears display anything .. */
	r300->hw.rc.cmd[1] = (1 << R300_RS_CNTL_CI_CNT_SHIFT) | R300_RS_CNTL_0_UNKNOWN_18;
	r300->hw.rc.cmd[2] = 0;
	
	R300_STATECHANGE(r300, rr);
	((drm_r300_cmd_header_t*)r300->hw.rr.cmd)->packet0.count = 1;
	r300->hw.rr.cmd[1] = 0x00004000;

	R300_STATECHANGE(r300, cmk);
	if (flags & CLEARBUFFER_COLOR) {
		r300->hw.cmk.cmd[R300_CMK_COLORMASK] =
			(ctx->Color.ColorMask[BCOMP] ? R300_COLORMASK0_B : 0) |
			(ctx->Color.ColorMask[GCOMP] ? R300_COLORMASK0_G : 0) |
			(ctx->Color.ColorMask[RCOMP] ? R300_COLORMASK0_R : 0) |
			(ctx->Color.ColorMask[ACOMP] ? R300_COLORMASK0_A : 0);
	} else {
		r300->hw.cmk.cmd[R300_CMK_COLORMASK] = 0;
	}

	R300_STATECHANGE(r300, fp);
	r300->hw.fp.cmd[R300_FP_CNTL0] = 0; /* 1 pass, no textures */
	r300->hw.fp.cmd[R300_FP_CNTL1] = 0; /* no temporaries */
	r300->hw.fp.cmd[R300_FP_CNTL2] = 0; /* no offset, one ALU instr */
	r300->hw.fp.cmd[R300_FP_NODE0] = 0;
	r300->hw.fp.cmd[R300_FP_NODE1] = 0;
	r300->hw.fp.cmd[R300_FP_NODE2] = 0;
	r300->hw.fp.cmd[R300_FP_NODE3] = R300_PFS_NODE_OUTPUT_COLOR;

	R300_STATECHANGE(r300, fpi[0]);
	R300_STATECHANGE(r300, fpi[1]);
	R300_STATECHANGE(r300, fpi[2]);
	R300_STATECHANGE(r300, fpi[3]);
	((drm_r300_cmd_header_t*)r300->hw.fpi[0].cmd)->packet0.count = 1;
	((drm_r300_cmd_header_t*)r300->hw.fpi[1].cmd)->packet0.count = 1;
	((drm_r300_cmd_header_t*)r300->hw.fpi[2].cmd)->packet0.count = 1;
	((drm_r300_cmd_header_t*)r300->hw.fpi[3].cmd)->packet0.count = 1;

	/* MOV o0, t0 */
	r300->hw.fpi[0].cmd[1] = FP_INSTRC(MAD, FP_ARGC(SRC0C_XYZ), FP_ARGC(ONE), FP_ARGC(ZERO));
	r300->hw.fpi[1].cmd[1] = FP_SELC(0,NO,XYZ,FP_TMP(0),0,0);
	r300->hw.fpi[2].cmd[1] = FP_INSTRA(MAD, FP_ARGA(SRC0A), FP_ARGA(ONE), FP_ARGA(ZERO));
	r300->hw.fpi[3].cmd[1] = FP_SELA(0,NO,W,FP_TMP(0),0,0);

	R300_STATECHANGE(r300, pvs);
	r300->hw.pvs.cmd[R300_PVS_CNTL_1] =
		(0 << R300_PVS_CNTL_1_PROGRAM_START_SHIFT) |
		(0 << R300_PVS_CNTL_1_POS_END_SHIFT) |
		(1 << R300_PVS_CNTL_1_PROGRAM_END_SHIFT);
	r300->hw.pvs.cmd[R300_PVS_CNTL_2] = 0; /* no parameters */
	r300->hw.pvs.cmd[R300_PVS_CNTL_3] =
		(1 << R300_PVS_CNTL_3_PROGRAM_UNKNOWN_SHIFT);

	R300_STATECHANGE(r300, vpi);
	((drm_r300_cmd_header_t*)r300->hw.vpi.cmd)->packet0.count = 8;

	/* MOV o0, i0; */
	r300->hw.vpi.cmd[1] = VP_OUT(ADD,OUT,0,XYZW);
	r300->hw.vpi.cmd[2] = VP_IN(IN,0);
	r300->hw.vpi.cmd[3] = VP_ZERO();
	r300->hw.vpi.cmd[4] = 0;

	/* MOV o1, i1; */
	r300->hw.vpi.cmd[5] = VP_OUT(ADD,OUT,1,XYZW);
	r300->hw.vpi.cmd[6] = VP_IN(IN,1);
	r300->hw.vpi.cmd[7] = VP_ZERO();
	r300->hw.vpi.cmd[8] = 0;

	R300_STATECHANGE(r300, zs);
	r300->hw.zs.cmd[R300_ZS_CNTL_0] = 0;
	r300->hw.zs.cmd[R300_ZS_CNTL_1] = 0;
	if (flags & CLEARBUFFER_DEPTH) {
		r300->hw.zs.cmd[R300_ZS_CNTL_0] |= R300_RB3D_Z_WRITE_ONLY;
		r300->hw.zs.cmd[R300_ZS_CNTL_1] |= (R300_ZS_ALWAYS<<R300_RB3D_ZS1_DEPTH_FUNC_SHIFT);
	} else {
		r300->hw.zs.cmd[R300_ZS_CNTL_0] |= R300_RB3D_Z_DISABLED_1; // disable
	}
	
	R300_STATECHANGE(r300, zs);
	if (flags & CLEARBUFFER_STENCIL) {
		r300->hw.zs.cmd[R300_ZS_CNTL_0] |= R300_RB3D_STENCIL_ENABLE;
		r300->hw.zs.cmd[R300_ZS_CNTL_1] |= 
		    (R300_ZS_ALWAYS<<R300_RB3D_ZS1_FRONT_FUNC_SHIFT) | 
		    (R300_ZS_REPLACE<<R300_RB3D_ZS1_FRONT_FAIL_OP_SHIFT) |
		    (R300_ZS_REPLACE<<R300_RB3D_ZS1_FRONT_ZPASS_OP_SHIFT) |
		    (R300_ZS_REPLACE<<R300_RB3D_ZS1_FRONT_ZFAIL_OP_SHIFT) |
		    (R300_ZS_ALWAYS<<R300_RB3D_ZS1_BACK_FUNC_SHIFT) |
		    (R300_ZS_REPLACE<<R300_RB3D_ZS1_BACK_FAIL_OP_SHIFT) |
		    (R300_ZS_REPLACE<<R300_RB3D_ZS1_BACK_ZPASS_OP_SHIFT) |
		    (R300_ZS_REPLACE<<R300_RB3D_ZS1_BACK_ZFAIL_OP_SHIFT) ;
		r300->hw.zs.cmd[R300_ZS_CNTL_2] = r300->state.stencil.clear;
	}
			
	/* Make sure we have enough space */
	r300EnsureCmdBufSpace(r300, r300->hw.max_state_size + 9+8, __FUNCTION__);

	r300EmitState(r300);
#else
#if 1
d92 1
a92 2
#endif
	
d96 1
a96 1
	
d101 1
a101 1
	
d104 1
a104 1
	
d110 1
a110 1
	
d113 3
a115 3
			(ctx->Color.ColorMask[GCOMP] ? R300_COLORMASK0_G : 0) |
			(ctx->Color.ColorMask[RCOMP] ? R300_COLORMASK0_R : 0) |
			(ctx->Color.ColorMask[ACOMP] ? R300_COLORMASK0_A : 0));
d117 1
a117 1
		e32(0);
d119 1
a119 1
	
d122 1
a122 1
	
d124 37
a160 28
	uint32_t t1, t2;
	
	t1 = 0x0;
	t2 = 0x0;
	
	if (flags & CLEARBUFFER_DEPTH) {
		t1 |= R300_RB3D_Z_WRITE_ONLY;
		t2 |= (R300_ZS_ALWAYS << R300_RB3D_ZS1_DEPTH_FUNC_SHIFT);
	} else {
		t1 |= R300_RB3D_Z_DISABLED_1; // disable
	}
	
	if (flags & CLEARBUFFER_STENCIL) {
		t1 |= R300_RB3D_STENCIL_ENABLE;
		t2 |= 
		    (R300_ZS_ALWAYS<<R300_RB3D_ZS1_FRONT_FUNC_SHIFT) | 
		    (R300_ZS_REPLACE<<R300_RB3D_ZS1_FRONT_FAIL_OP_SHIFT) |
		    (R300_ZS_REPLACE<<R300_RB3D_ZS1_FRONT_ZPASS_OP_SHIFT) |
		    (R300_ZS_REPLACE<<R300_RB3D_ZS1_FRONT_ZFAIL_OP_SHIFT) |
		    (R300_ZS_ALWAYS<<R300_RB3D_ZS1_BACK_FUNC_SHIFT) |
		    (R300_ZS_REPLACE<<R300_RB3D_ZS1_BACK_FAIL_OP_SHIFT) |
		    (R300_ZS_REPLACE<<R300_RB3D_ZS1_BACK_ZPASS_OP_SHIFT) |
		    (R300_ZS_REPLACE<<R300_RB3D_ZS1_BACK_ZFAIL_OP_SHIFT) ;
	}
	
	e32(t1);
	e32(t2);
	e32(r300->state.stencil.clear);
a161 2
	
#endif
d163 1
a163 1
	cmd2 = (drm_r300_cmd_header_t*)r300AllocCmdBuf(r300, 9, __FUNCTION__);
d175 2
a176 4
#if 1
	reg_start(R300_RB3D_DSTCACHE_CTLSTAT,0);
	e32(0x0000000a);
	  
d178 2
a179 2
	reg_start(0x4f18,0);
	e32(0x00000003);
a180 1
#endif
a182 1
#ifdef CB_DPATH
d186 1
a186 1
	r300ContextPtr rmesa=r300;
d192 13
a204 2
	
	
d207 5
a211 2
	e32(0x21030003);
	
d216 1
a216 1
	
d221 1
d224 17
a240 3
	e32(0x00000001);
	e32(0x00000405);
	
d243 4
a246 4
	e32(R300_VAP_OUTPUT_VTX_FMT_0__POS_PRESENT | R300_VAP_OUTPUT_VTX_FMT_0__COLOR_PRESENT);
	e32(0); /* no textures */
		
	
d249 2
a250 2
	e32(0);
	
d259 1
a259 1
	
d262 2
a263 2
	e32(0);
	
d266 5
a270 5
	e32(0);
	e32(0);
	
	R300_STATECHANGE(r300, unk221C);
	reg_start(0x221C, 0);
d272 1
a272 1
	
d276 2
a277 2
		((dPriv->h * 6) << R300_POINTSIZE_Y_SHIFT));
	
d280 1
a280 1
	for(i = 0; i < 8; ++i){
d288 2
a289 2
	e32(0);
	
d292 2
a293 2
	e32(0x00004000);
	
d296 3
a298 3
	e32(0);
	e32(0);
	e32(0);
d300 3
a302 3
	e32(0);
	e32(0);
	e32(0);
d304 1
a304 1
	
d309 1
a309 1
	
d312 1
a312 1
	
d314 2
a315 2
	e32(FP_SELC(0,NO,XYZ,FP_TMP(0),0,0));
	
d318 1
a318 1
	
d320 23
a342 24
	e32(FP_SELA(0,NO,W,FP_TMP(0),0,0));
	
	R300_STATECHANGE(r300, pvs);
	reg_start(R300_VAP_PVS_CNTL_1, 2);
	e32((0 << R300_PVS_CNTL_1_PROGRAM_START_SHIFT) |
		(0 << R300_PVS_CNTL_1_POS_END_SHIFT) |
		(1 << R300_PVS_CNTL_1_PROGRAM_END_SHIFT));
	e32(0);
	e32(1 << R300_PVS_CNTL_3_PROGRAM_UNKNOWN_SHIFT);
	
	R300_STATECHANGE(r300, vpi);
	vsf_start_fragment(0x0, 8);
	e32(VP_OUT(ADD,OUT,0,XYZW));
	e32(VP_IN(IN,0));
	e32(VP_ZERO());
	e32(0);
	
	e32(VP_OUT(ADD,OUT,1,XYZW));
	e32(VP_IN(IN,1));
	e32(VP_ZERO());
	e32(0);
	
	/*reg_start(0x4500,0);
	e32(2560-1);*/
a343 1
#endif
d348 1
a348 2
static void r300Clear(GLcontext * ctx, GLbitfield mask, GLboolean all,
		      GLint cx, GLint cy, GLint cw, GLint ch)
d357 1
a357 2
		fprintf(stderr, "%s:  all=%d cx=%d cy=%d cw=%d ch=%d\n",
			__FUNCTION__, all, cx, cy, cw, ch);
d380 2
a381 2
	
	if ( (mask & BUFFER_BIT_STENCIL) && r300->state.stencil.hw_stencil) {
d390 1
a390 1
		_swrast_Clear(ctx, mask, all, cx, cy, cw, ch);
d393 1
a393 1
	swapped = r300->radeon.doPageFlip && (r300->radeon.sarea->pfCurrentPage == 1);
a394 1
#ifdef CB_DPATH
d396 2
a397 2
	r300EnsureCmdBufSpace(r300, 421*3, __FUNCTION__);
	if(flags || bits)
a398 1
#endif
a412 9
#ifndef CB_DPATH
	/* Recalculate the hardware state. This could be done more efficiently,
	 * but do keep it like this for now.
	 */
	r300ResetHwState(r300);
	
	/* r300ClearBuffer has trampled all over the hardware state.. */
	r300->hw.all_dirty=GL_TRUE;
#endif
a414 1

d427 1
a427 1
#include "radeon_mm.h"
d429 1
a429 1
void r300RefillCurrentDmaRegion(r300ContextPtr rmesa)
d432 2
a433 1
	
d446 1
a446 1
	
d448 1
a448 1
	dmabuf->buf = (void *)1; /* hack */
d451 1
a451 1
	dmabuf->id = radeon_mm_alloc(rmesa, 4, RADEON_BUFFER_SIZE*16);
d454 1
a454 1
		
a456 2
		
		dmabuf->id = radeon_mm_alloc(rmesa, 4, RADEON_BUFFER_SIZE*16);
d458 2
a459 7
#ifdef HW_VBOS
		if (dmabuf->id == 0) {
			/* Just kick all */
			r300_evict_vbos(rmesa->radeon.glCtx, /*RADEON_BUFFER_SIZE*16*/1<<30);
			dmabuf->id = radeon_mm_alloc(rmesa, 4, RADEON_BUFFER_SIZE*16);
		}
#endif
d461 1
a461 1
		
d463 3
a465 2
			fprintf(stderr, "Error: Could not get dma buffer... exiting\n");
			exit(-1);
d468 1
a468 1
			
d470 2
a471 2
	rmesa->dma.current.address = radeon_mm_ptr(rmesa, dmabuf->id);
	rmesa->dma.current.end = RADEON_BUFFER_SIZE*16;
d489 1
a489 1
		radeon_mm_free(rmesa, region->buf->id);
d519 1
a519 1
		r300RefillCurrentDmaRegion(rmesa);
d536 1
a536 1
void r300RefillCurrentDmaRegion(r300ContextPtr rmesa)
d544 1
a544 1
	
d587 3
a589 2
			fprintf(stderr, "Error: Could not get dma buffer... exiting\n");
			exit(-1);
d625 2
a626 2
			fprintf(stderr, "%s -- DISCARD BUF %d\n", __FUNCTION__,
				region->buf->buf->idx);
d629 2
a630 1
								sizeof(*cmd) / 4,
d634 1
a634 1
		
a681 21
/* Called via glXGetMemoryOffsetMESA() */
GLuint r300GetMemoryOffsetMESA(__DRInativeDisplay * dpy, int scrn,
			       const GLvoid * pointer)
{
	GET_CURRENT_CONTEXT(ctx);
	r300ContextPtr rmesa;
	GLuint card_offset;

	if (!ctx || !(rmesa = R300_CONTEXT(ctx))) {
		fprintf(stderr, "%s: no context\n", __FUNCTION__);
		return ~0;
	}

	if (!r300IsGartMemory(rmesa, pointer, 0))
		return ~0;

	card_offset = r300GartOffsetFromVirtual(rmesa, pointer);

	return card_offset - rmesa->radeon.radeonScreen->gart_base;
}

d686 2
a687 1
	    (char *)pointer - (char *)rmesa->radeon.radeonScreen->gartTextures.map;
d689 2
a690 1
		     && offset + size < rmesa->radeon.radeonScreen->gartTextures.size);
d702 2
a703 1
	    (char *)pointer - (char *)rmesa->radeon.radeonScreen->gartTextures.map;
d707 2
a708 1
	if (offset < 0 || offset > rmesa->radeon.radeonScreen->gartTextures.size)
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d480 2
a481 1
static void r300Clear(GLcontext * ctx, GLbitfield mask)
d490 2
a491 1
		fprintf(stderr, "r300Clear\n");
d524 1
a524 1
		_swrast_Clear(ctx, mask);
d575 1
a575 1
void r300RefillCurrentDmaRegion(r300ContextPtr rmesa, int size)
a577 1
	size = MAX2(size, RADEON_BUFFER_SIZE*16);
d596 1
a596 1
	dmabuf->id = radeon_mm_alloc(rmesa, 4, size);
d603 1
a603 1
		dmabuf->id = radeon_mm_alloc(rmesa, 4, size);
d609 1
a609 1
			dmabuf->id = radeon_mm_alloc(rmesa, 4, size);
d622 1
a622 1
	rmesa->dma.current.end = size;
d670 1
a670 2
		r300RefillCurrentDmaRegion(rmesa,
					   (bytes + 0x7) & ~0x7);
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d32 4
a35 6
/**
 * \file
 *
 * \author Keith Whitwell <keith@@tungstengraphics.com>
 *
 * \author Nicolai Haehnle <prefect_@@gmx.net>
d64 1
a64 1
	GLcontext *ctx = r300->radeon.glCtx;
d67 1
a67 1
	drm_r300_cmd_header_t *cmd2;
d71 1
a71 1
	r300ContextPtr rmesa = r300;
d73 4
d92 159
d253 2
a254 1

d258 1
a258 1

d263 1
a263 1

d266 1
a266 1

d272 1
a272 1

d275 3
a277 3
		    (ctx->Color.ColorMask[GCOMP] ? R300_COLORMASK0_G : 0) |
		    (ctx->Color.ColorMask[RCOMP] ? R300_COLORMASK0_R : 0) |
		    (ctx->Color.ColorMask[ACOMP] ? R300_COLORMASK0_A : 0));
d279 1
a279 1
		e32(0x0);
d281 1
a281 1

d284 1
a284 1

d286 28
a313 37
		uint32_t t1, t2;

		t1 = 0x0;
		t2 = 0x0;

		if (flags & CLEARBUFFER_DEPTH) {
			t1 |= R300_RB3D_Z_WRITE_ONLY;
			t2 |=
			    (R300_ZS_ALWAYS << R300_RB3D_ZS1_DEPTH_FUNC_SHIFT);
		} else {
			t1 |= R300_RB3D_Z_DISABLED_1;	// disable
		}

		if (flags & CLEARBUFFER_STENCIL) {
			t1 |= R300_RB3D_STENCIL_ENABLE;
			t2 |=
			    (R300_ZS_ALWAYS <<
			     R300_RB3D_ZS1_FRONT_FUNC_SHIFT) |
			    (R300_ZS_REPLACE <<
			     R300_RB3D_ZS1_FRONT_FAIL_OP_SHIFT) |
			    (R300_ZS_REPLACE <<
			     R300_RB3D_ZS1_FRONT_ZPASS_OP_SHIFT) |
			    (R300_ZS_REPLACE <<
			     R300_RB3D_ZS1_FRONT_ZFAIL_OP_SHIFT) |
			    (R300_ZS_ALWAYS <<
			     R300_RB3D_ZS1_BACK_FUNC_SHIFT) |
			    (R300_ZS_REPLACE <<
			     R300_RB3D_ZS1_BACK_FAIL_OP_SHIFT) |
			    (R300_ZS_REPLACE <<
			     R300_RB3D_ZS1_BACK_ZPASS_OP_SHIFT) |
			    (R300_ZS_REPLACE <<
			     R300_RB3D_ZS1_BACK_ZFAIL_OP_SHIFT);
		}

		e32(t1);
		e32(t2);
		e32(r300->state.stencil.clear);
d315 2
d318 1
a318 1
	cmd2 = (drm_r300_cmd_header_t *) r300AllocCmdBuf(r300, 9, __FUNCTION__);
d330 4
a333 2
	reg_start(R300_RB3D_DSTCACHE_CTLSTAT, 0);
	e32(R300_RB3D_DSTCACHE_UNKNOWN_0A);
d335 2
a336 2
	reg_start(R300_RB3D_ZCACHE_CTLSTAT, 0);
	e32(R300_RB3D_ZCACHE_UNKNOWN_03);
d338 1
d341 1
d345 1
a345 1
	r300ContextPtr rmesa = r300;
d351 2
a352 13
	int has_tcl = 1;

	if (!(r300->radeon.radeonScreen->chip_flags & RADEON_CHIPSET_TCL))
		has_tcl = 0;

	/* FIXME: the values written to R300_VAP_INPUT_ROUTE_0_0 and
	 * R300_VAP_INPUT_ROUTE_0_1 are in fact known, however, the values are
	 * quite complex; see the functions in r300_emit.c.
	 *
	 * I believe it would be a good idea to extend the functions in
	 * r300_emit.c so that they can be used to setup the default values for
	 * these registers, as well as the actual values used for rendering.
	 */
d355 2
a356 5
	if (!has_tcl)
		e32(0x22030003);
	else
		e32(0x21030003);

d361 1
a361 1

a365 1
	/* R300_VAP_INPUT_CNTL_0, R300_VAP_INPUT_CNTL_1 */
d368 3
a370 17
	e32(R300_INPUT_CNTL_0_COLOR);
	e32(R300_INPUT_CNTL_POS | R300_INPUT_CNTL_COLOR | R300_INPUT_CNTL_TC0);

	if (!has_tcl) {
		R300_STATECHANGE(r300, vte);
		/* comes from fglrx startup of clear */
		reg_start(R300_SE_VTE_CNTL, 1);
		e32(R300_VTX_W0_FMT | R300_VPORT_X_SCALE_ENA |
		    R300_VPORT_X_OFFSET_ENA | R300_VPORT_Y_SCALE_ENA |
		    R300_VPORT_Y_OFFSET_ENA | R300_VPORT_Z_SCALE_ENA |
		    R300_VPORT_Z_OFFSET_ENA);
		e32(0x8);

		reg_start(0x21dc, 0);
		e32(0xaaaaaaaa);
	}

d373 4
a376 4
	e32(R300_VAP_OUTPUT_VTX_FMT_0__POS_PRESENT |
	    R300_VAP_OUTPUT_VTX_FMT_0__COLOR_PRESENT);
	e32(0x0);			/* no textures */

d379 2
a380 2
	e32(0x0);

d389 1
a389 1

d392 2
a393 2
	e32(0x0);

d396 3
a398 3
	e32(0x0);
	e32(0x0);

d400 1
a400 1
	reg_start(R300_VAP_UNKNOWN_221C, 0);
d402 1
a402 1

d406 2
a407 2
	    ((dPriv->h * 6) << R300_POINTSIZE_Y_SHIFT));

d410 1
a410 1
	for (i = 0; i < 8; ++i) {
d418 2
a419 2
	e32(0x0);

d422 2
a423 2
	e32(R300_RS_ROUTE_0_COLOR);

d426 3
a428 3
	e32(0x0);
	e32(0x0);
	e32(0x0);
d430 3
a432 3
	e32(0x0);
	e32(0x0);
	e32(0x0);
d434 1
a434 1

d439 1
a439 1

d442 1
a442 1

d444 2
a445 2
	e32(FP_SELC(0, NO, XYZ, FP_TMP(0), 0, 0));

d448 1
a448 1

d450 24
a473 23
	e32(FP_SELA(0, NO, W, FP_TMP(0), 0, 0));

	if (has_tcl) {
		R300_STATECHANGE(r300, pvs);
		reg_start(R300_VAP_PVS_CNTL_1, 2);
		e32((0 << R300_PVS_CNTL_1_PROGRAM_START_SHIFT) |
		    (0 << R300_PVS_CNTL_1_POS_END_SHIFT) |
		    (1 << R300_PVS_CNTL_1_PROGRAM_END_SHIFT));
		e32(0x0);
		e32(1 << R300_PVS_CNTL_3_PROGRAM_UNKNOWN_SHIFT);

		R300_STATECHANGE(r300, vpi);
		vsf_start_fragment(0x0, 8);
		e32(VP_OUT(ADD, OUT, 0, XYZW));
		e32(VP_IN(IN, 0));
		e32(VP_ZERO());
		e32(0x0);

		e32(VP_OUT(ADD, OUT, 1, XYZW));
		e32(VP_IN(IN, 1));
		e32(VP_ZERO());
		e32(0x0);
	}
d475 1
d512 2
a513 2

	if ((mask & BUFFER_BIT_STENCIL) && r300->state.stencil.hw_stencil) {
d525 1
a525 1
	swapped = r300->radeon.sarea->pfCurrentPage == 1;
d527 1
d529 2
a530 2
	r300EnsureCmdBufSpace(r300, 421 * 3, __FUNCTION__);
	if (flags || bits)
d532 1
d547 9
d558 1
d571 1
a571 1
#include "r300_mem.h"
d573 1
a573 1
static void r300RefillCurrentDmaRegion(r300ContextPtr rmesa, int size)
d576 2
a577 2
	size = MAX2(size, RADEON_BUFFER_SIZE * 16);

d590 1
a590 1

d592 1
a592 1
	dmabuf->buf = (void *)1;	/* hack */
d595 1
a595 1
	dmabuf->id = r300_mem_alloc(rmesa, 4, size);
d598 1
a598 1

d601 2
d604 7
a610 2
		dmabuf->id = r300_mem_alloc(rmesa, 4, size);

d612 1
a612 1

d614 2
a615 3
			fprintf(stderr,
				"Error: Could not get dma buffer... exiting\n");
			_mesa_exit(-1);
d618 1
a618 1

d620 1
a620 1
	rmesa->dma.current.address = r300_mem_ptr(rmesa, dmabuf->id);
d639 1
a639 1
		r300_mem_free(rmesa, region->buf->id);
d669 2
a670 1
		r300RefillCurrentDmaRegion(rmesa, (bytes + 0x7) & ~0x7);
d687 1
a687 1
static void r300RefillCurrentDmaRegion(r300ContextPtr rmesa)
d695 1
a695 1

d738 2
a739 3
			fprintf(stderr,
				"Error: Could not get dma buffer... exiting\n");
			_mesa_exit(-1);
d775 2
a776 2
			fprintf(stderr, "%s -- DISCARD BUF %d\n",
				__FUNCTION__, region->buf->buf->idx);
d779 1
a779 2
								sizeof
								(*cmd) / 4,
d783 1
a783 1

d831 21
d856 1
a856 2
	    (char *)pointer -
	    (char *)rmesa->radeon.radeonScreen->gartTextures.map;
d858 1
a858 2
		     && offset + size <
		     rmesa->radeon.radeonScreen->gartTextures.size);
d870 1
a870 2
	    (char *)pointer -
	    (char *)rmesa->radeon.radeonScreen->gartTextures.map;
d874 1
a874 2
	if (offset < 0
	    || offset > rmesa->radeon.radeonScreen->gartTextures.size)
@


