head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.48;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.04.14;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.18;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.14.58.14;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.15.23;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.47;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#include "main/glheader.h"
#include "main/enums.h"
#include "main/mtypes.h"
#include "main/macros.h"
#include "main/fbobject.h"
#include "main/image.h"
#include "main/bufferobj.h"
#include "main/readpix.h"
#include "main/state.h"

#include "intel_screen.h"
#include "intel_context.h"
#include "intel_blit.h"
#include "intel_buffers.h"
#include "intel_fbo.h"
#include "intel_mipmap_tree.h"
#include "intel_regions.h"
#include "intel_pixel.h"
#include "intel_buffer_objects.h"

#define FILE_DEBUG_FLAG DEBUG_PIXEL

/* For many applications, the new ability to pull the source buffers
 * back out of the GTT and then do the packing/conversion operations
 * in software will be as much of an improvement as trying to get the
 * blitter and/or texture engine to do the work.
 *
 * This step is gated on private backbuffers.
 *
 * Obviously the frontbuffer can't be pulled back, so that is either
 * an argument for blit/texture readpixels, or for blitting to a
 * temporary and then pulling that back.
 *
 * When the destination is a pbo, however, it's not clear if it is
 * ever going to be pulled to main memory (though the access param
 * will be a good hint).  So it sounds like we do want to be able to
 * choose between blit/texture implementation on the gpu and pullback
 * and cpu-based copying.
 *
 * Unless you can magically turn client memory into a PBO for the
 * duration of this call, there will be a cpu-based copying step in
 * any case.
 */

static bool
do_blit_readpixels(struct gl_context * ctx,
                   GLint x, GLint y, GLsizei width, GLsizei height,
                   GLenum format, GLenum type,
                   const struct gl_pixelstore_attrib *pack, GLvoid * pixels)
{
   struct intel_context *intel = intel_context(ctx);
   struct intel_buffer_object *dst = intel_buffer_object(pack->BufferObj);
   GLuint dst_offset;
   drm_intel_bo *dst_buffer;
   GLint dst_x, dst_y;
   GLuint dirty;

   DBG("%s\n", __FUNCTION__);

   assert(_mesa_is_bufferobj(pack->BufferObj));

   struct gl_renderbuffer *rb = ctx->ReadBuffer->_ColorReadBuffer;
   struct intel_renderbuffer *irb = intel_renderbuffer(rb);

   if (ctx->_ImageTransferState ||
       !_mesa_format_matches_format_and_type(irb->mt->format, format, type,
                                             false)) {
      DBG("%s - bad format for blit\n", __FUNCTION__);
      return false;
   }

   if (pack->SwapBytes || pack->LsbFirst) {
      DBG("%s: bad packing params\n", __FUNCTION__);
      return false;
   }

   int dst_stride = _mesa_image_row_stride(pack, width, format, type);
   bool dst_flip = false;
   /* Mesa flips the dst_stride for pack->Invert, but we want our mt to have a
    * normal dst_stride.
    */
   if (pack->Invert) {
      dst_stride = -dst_stride;
      dst_flip = true;
   }

   dst_offset = (GLintptr)pixels;
   dst_offset += _mesa_image_offset(2, pack, width, height,
				    format, type, 0, 0, 0);

   if (!_mesa_clip_copytexsubimage(ctx,
				   &dst_x, &dst_y,
				   &x, &y,
				   &width, &height)) {
      return true;
   }

   dirty = intel->front_buffer_dirty;
   intel_prepare_render(intel);
   intel->front_buffer_dirty = dirty;

   dst_buffer = intel_bufferobj_buffer(intel, dst);

   struct intel_mipmap_tree *pbo_mt =
      intel_miptree_create_for_bo(intel,
                                  dst_buffer,
                                  irb->mt->format,
                                  dst_offset,
                                  width, height,
                                  dst_stride, I915_TILING_NONE);

   if (!intel_miptree_blit(intel,
                           irb->mt, irb->mt_level, irb->mt_layer,
                           x, y, _mesa_is_winsys_fbo(ctx->ReadBuffer),
                           pbo_mt, 0, 0,
                           0, 0, dst_flip,
                           width, height, GL_COPY)) {
      intel_miptree_release(&pbo_mt);
      return false;
   }

   intel_miptree_release(&pbo_mt);

   DBG("%s - DONE\n", __FUNCTION__);

   return true;
}

void
intelReadPixels(struct gl_context * ctx,
                GLint x, GLint y, GLsizei width, GLsizei height,
                GLenum format, GLenum type,
                const struct gl_pixelstore_attrib *pack, GLvoid * pixels)
{
   struct intel_context *intel = intel_context(ctx);
   bool dirty;

   intel_flush_rendering_to_batch(ctx);

   DBG("%s\n", __FUNCTION__);

   if (_mesa_is_bufferobj(pack->BufferObj)) {
      /* Using PBOs, so try the BLT based path. */
      if (do_blit_readpixels(ctx, x, y, width, height, format, type, pack,
                             pixels)) {
         return;
      }

      perf_debug("%s: fallback to CPU mapping in PBO case\n", __FUNCTION__);
   }

   /* glReadPixels() wont dirty the front buffer, so reset the dirty
    * flag after calling intel_prepare_render(). */
   dirty = intel->front_buffer_dirty;
   intel_prepare_render(intel);
   intel->front_buffer_dirty = dirty;

   /* Update Mesa state before calling _mesa_readpixels().
    * XXX this may not be needed since ReadPixels no longer uses the
    * span code.
    */

   if (ctx->NewState)
      _mesa_update_state(ctx);

   _mesa_readpixels(ctx, x, y, width, height, format, type, pack, pixels);

   /* There's an intel_prepare_render() call in intelSpanRenderStart(). */
   intel->front_buffer_dirty = dirty;
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
a81 1
   bool all;
d129 1
a129 6
   all = (width * height * irb->mt->cpp == dst->Base.Size &&
	  x == 0 && dst_offset == 0);

   dst_buffer = intel_bufferobj_buffer(intel, dst,
				       all ? INTEL_WRITE_FULL :
				       INTEL_WRITE_PART);
d145 1
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d2 1
a2 1
 * 
d5 1
a5 1
 * 
d13 1
a13 1
 * 
d17 1
a17 1
 * 
d25 1
a25 1
 * 
d32 1
d35 2
a36 1
#include "swrast/swrast.h"
a39 1
#include "intel_batchbuffer.h"
d42 2
d48 2
d53 1
a53 1
 * blitter and/or texture engine to do the work. 
d56 1
a56 1
 * 
d72 2
a73 99

static GLboolean
do_texture_readpixels(GLcontext * ctx,
                      GLint x, GLint y, GLsizei width, GLsizei height,
                      GLenum format, GLenum type,
                      const struct gl_pixelstore_attrib *pack,
                      struct intel_region *dest_region)
{
#if 0
   struct intel_context *intel = intel_context(ctx);
   intelScreenPrivate *screen = intel->intelScreen;
   GLint pitch = pack->RowLength ? pack->RowLength : width;
   __DRIdrawablePrivate *dPriv = intel->driDrawable;
   int textureFormat;
   GLenum glTextureFormat;
   int destFormat, depthFormat, destPitch;
   drm_clip_rect_t tmp;

   if (INTEL_DEBUG & DEBUG_PIXEL)
      fprintf(stderr, "%s\n", __FUNCTION__);


   if (ctx->_ImageTransferState ||
       pack->SwapBytes || pack->LsbFirst || !pack->Invert) {
      if (INTEL_DEBUG & DEBUG_PIXEL)
         fprintf(stderr, "%s: check_color failed\n", __FUNCTION__);
      return GL_FALSE;
   }

   intel->vtbl.meta_texrect_source(intel, intel_readbuf_region(intel));

   if (!intel->vtbl.meta_render_dest(intel, dest_region, type, format)) {
      if (INTEL_DEBUG & DEBUG_PIXEL)
         fprintf(stderr, "%s: couldn't set dest %s/%s\n",
                 __FUNCTION__,
                 _mesa_lookup_enum_by_nr(type),
                 _mesa_lookup_enum_by_nr(format));
      return GL_FALSE;
   }

   LOCK_HARDWARE(intel);

   if (intel->driDrawable->numClipRects) {
      intel->vtbl.install_meta_state(intel);
      intel->vtbl.meta_no_depth_write(intel);
      intel->vtbl.meta_no_stencil_write(intel);

      if (!driClipRectToFramebuffer(ctx->ReadBuffer, &x, &y, &width, &height)) {
         UNLOCK_HARDWARE(intel);
         SET_STATE(i830, state);
         if (INTEL_DEBUG & DEBUG_PIXEL)
            fprintf(stderr, "%s: cliprect failed\n", __FUNCTION__);
         return GL_TRUE;
      }

      y = dPriv->h - y - height;
      x += dPriv->x;
      y += dPriv->y;


      /* Set the frontbuffer up as a large rectangular texture.
       */
      intel->vtbl.meta_tex_rect_source(intel, src_region, textureFormat);


      intel->vtbl.meta_texture_blend_replace(i830, glTextureFormat);


      /* Set the 3d engine to draw into the destination region:
       */

      intel->vtbl.meta_draw_region(intel, dest_region);
      intel->vtbl.meta_draw_format(intel, destFormat, depthFormat);     /* ?? */


      /* Draw a single quad, no cliprects:
       */
      intel->vtbl.meta_disable_cliprects(intel);

      intel->vtbl.draw_quad(intel,
                            0, width, 0, height,
                            0x00ff00ff, x, x + width, y, y + height);

      intel->vtbl.leave_meta_state(intel);
   }
   UNLOCK_HARDWARE(intel);

   intel_region_wait_fence(ctx, dest_region);   /* required by GL */
   return GL_TRUE;
#endif

   return GL_FALSE;
}




static GLboolean
do_blit_readpixels(GLcontext * ctx,
a78 1
   struct intel_region *src = intel_readbuf_region(intel);
d81 4
a84 4
   GLuint rowLength;

   if (INTEL_DEBUG & DEBUG_PIXEL)
      _mesa_printf("%s\n", __FUNCTION__);
d86 1
a86 2
   if (!src)
      return GL_FALSE;
d88 1
a88 16
   if (dst) {
      /* XXX This validation should be done by core mesa:
       */
      if (!_mesa_validate_pbo_access(2, pack, width, height, 1,
                                     format, type, pixels)) {
         _mesa_error(ctx, GL_INVALID_OPERATION, "glDrawPixels");
         return GL_TRUE;
      }
   }
   else {
      /* PBO only for now:
       */
      if (INTEL_DEBUG & DEBUG_PIXEL)
         _mesa_printf("%s - not PBO\n", __FUNCTION__);
      return GL_FALSE;
   }
d90 2
d94 4
a97 4
       !intel_check_blit_format(src, format, type)) {
      if (INTEL_DEBUG & DEBUG_PIXEL)
         _mesa_printf("%s - bad format for blit\n", __FUNCTION__);
      return GL_FALSE;
d100 3
a102 4
   if (pack->Alignment != 1 || pack->SwapBytes || pack->LsbFirst) {
      if (INTEL_DEBUG & DEBUG_PIXEL)
         _mesa_printf("%s: bad packing params\n", __FUNCTION__);
      return GL_FALSE;
d105 5
a109 5
   if (pack->RowLength > 0)
      rowLength = pack->RowLength;
   else
      rowLength = width;

d111 2
a112 6
      if (INTEL_DEBUG & DEBUG_PIXEL)
         _mesa_printf("%s: MESA_PACK_INVERT not done yet\n", __FUNCTION__);
      return GL_FALSE;
   }
   else {
      rowLength = -rowLength;
d115 3
a117 3
   /* XXX 64-bit cast? */
   dst_offset = (GLuint) _mesa_image_address(2, pack, pixels, width, height,
                                             format, type, 0, 0, 0);
d119 6
d126 3
a128 5
   /* Although the blits go on the command buffer, need to do this and
    * fire with lock held to guarentee cliprects are correct.
    */
   intelFlush(&intel->ctx);
   LOCK_HARDWARE(intel);
d130 2
a131 18
   if (intel->driDrawable->numClipRects) {
      GLboolean all = (width * height * src->cpp == dst->Base.Size &&
                       x == 0 && dst_offset == 0);

      dri_bo *dst_buffer = intel_bufferobj_buffer(intel, dst,
						  all ? INTEL_WRITE_FULL :
						  INTEL_WRITE_PART);
      __DRIdrawablePrivate *dPriv = intel->driDrawable;
      int nbox = dPriv->numClipRects;
      drm_clip_rect_t *box = dPriv->pClipRects;
      drm_clip_rect_t rect;
      drm_clip_rect_t src_rect;
      int i;

      src_rect.x1 = dPriv->x + x;
      src_rect.y1 = dPriv->y + dPriv->h - (y + height);
      src_rect.x2 = src_rect.x1 + width;
      src_rect.y2 = src_rect.y1 + height;
d133 3
d137 7
d145 7
a151 15
      for (i = 0; i < nbox; i++) {
         if (!intel_intersect_cliprects(&rect, &src_rect, &box[i]))
            continue;

         intelEmitCopyBlit(intel,
                           src->cpp,
                           src->pitch, src->buffer, 0, src->tiling,
                           rowLength, dst_buffer, dst_offset, GL_FALSE,
                           rect.x1,
                           rect.y1,
                           rect.x1 - src_rect.x1,
                           rect.y2 - src_rect.y2,
                           rect.x2 - rect.x1, rect.y2 - rect.y1,
			   GL_COPY);
      }
a152 1
   UNLOCK_HARDWARE(intel);
d154 3
a156 2
   if (INTEL_DEBUG & DEBUG_PIXEL)
      _mesa_printf("%s - DONE\n", __FUNCTION__);
d158 1
a158 1
   return GL_TRUE;
d162 1
a162 1
intelReadPixels(GLcontext * ctx,
d167 4
a170 2
   if (INTEL_DEBUG & DEBUG_PIXEL)
      fprintf(stderr, "%s\n", __FUNCTION__);
d172 8
a179 1
   intelFlush(ctx);
d181 13
a193 3
   if (do_blit_readpixels
       (ctx, x, y, width, height, format, type, pack, pixels))
      return;
d195 2
a196 3
   if (do_texture_readpixels
       (ctx, x, y, width, height, format, type, pack, pixels))
      return;
d198 1
a198 2
   if (INTEL_DEBUG & DEBUG_PIXEL)
      _mesa_printf("%s: fallback to swrast\n", __FUNCTION__);
d200 2
a201 1
   _swrast_ReadPixels(ctx, x, y, width, height, format, type, pack, pixels);
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@@


1.1
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d28 6
a33 6
#include "glheader.h"
#include "enums.h"
#include "mtypes.h"
#include "macros.h"
#include "image.h"
#include "bufferobj.h"
a37 1
#include "intel_ioctl.h"
a174 1
   dri_fence *fence = NULL;
d265 1
a265 1
                           src->pitch, src->buffer, 0, src->tiled,
a273 5

      intel_batchbuffer_flush(intel->batch);
      fence = intel->batch->last_fence;
      dri_fence_reference(fence);

a275 5

   if (fence) {
      dri_fence_wait(fence);
      dri_fence_unreference(fence);
   }
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@d2 1
a2 1
 *
d5 1
a5 1
 *
d13 1
a13 1
 *
d17 1
a17 1
 *
d25 1
a25 1
 *
d28 7
a34 9
#include "main/glheader.h"
#include "main/enums.h"
#include "main/mtypes.h"
#include "main/macros.h"
#include "main/fbobject.h"
#include "main/image.h"
#include "main/bufferobj.h"
#include "main/readpix.h"
#include "main/state.h"
d38 2
a41 2
#include "intel_fbo.h"
#include "intel_mipmap_tree.h"
a45 2
#define FILE_DEBUG_FLAG DEBUG_PIXEL

d49 1
a49 1
 * blitter and/or texture engine to do the work.
d52 1
a52 1
 *
d68 99
a166 2
static bool
do_blit_readpixels(struct gl_context * ctx,
d172 1
d175 2
a176 4
   drm_intel_bo *dst_buffer;
   bool all;
   GLint dst_x, dst_y;
   GLuint dirty;
d178 2
a179 1
   DBG("%s\n", __FUNCTION__);
d181 19
a199 1
   assert(_mesa_is_bufferobj(pack->BufferObj));
a200 2
   struct gl_renderbuffer *rb = ctx->ReadBuffer->_ColorReadBuffer;
   struct intel_renderbuffer *irb = intel_renderbuffer(rb);
d203 4
a206 4
       !_mesa_format_matches_format_and_type(irb->mt->format, format, type,
                                             false)) {
      DBG("%s - bad format for blit\n", __FUNCTION__);
      return false;
d209 4
a212 3
   if (pack->SwapBytes || pack->LsbFirst) {
      DBG("%s: bad packing params\n", __FUNCTION__);
      return false;
d215 5
a219 5
   int dst_stride = _mesa_image_row_stride(pack, width, format, type);
   bool dst_flip = false;
   /* Mesa flips the dst_stride for pack->Invert, but we want our mt to have a
    * normal dst_stride.
    */
d221 6
a226 2
      dst_stride = -dst_stride;
      dst_flip = true;
d229 10
a238 3
   dst_offset = (GLintptr)pixels;
   dst_offset += _mesa_image_offset(2, pack, width, height,
				    format, type, 0, 0, 0);
d240 18
a257 6
   if (!_mesa_clip_copytexsubimage(ctx,
				   &dst_x, &dst_y,
				   &x, &y,
				   &width, &height)) {
      return true;
   }
a258 3
   dirty = intel->front_buffer_dirty;
   intel_prepare_render(intel);
   intel->front_buffer_dirty = dirty;
a259 2
   all = (width * height * irb->mt->cpp == dst->Base.Size &&
	  x == 0 && dst_offset == 0);
d261 15
a275 3
   dst_buffer = intel_bufferobj_buffer(intel, dst,
				       all ? INTEL_WRITE_FULL :
				       INTEL_WRITE_PART);
d277 3
a279 7
   struct intel_mipmap_tree *pbo_mt =
      intel_miptree_create_for_bo(intel,
                                  dst_buffer,
                                  irb->mt->format,
                                  dst_offset,
                                  width, height,
                                  dst_stride, I915_TILING_NONE);
a280 7
   if (!intel_miptree_blit(intel,
                           irb->mt, irb->mt_level, irb->mt_layer,
                           x, y, _mesa_is_winsys_fbo(ctx->ReadBuffer),
                           pbo_mt, 0, 0,
                           0, 0, dst_flip,
                           width, height, GL_COPY)) {
      return false;
d282 1
d284 4
a287 1
   intel_miptree_release(&pbo_mt);
d289 2
a290 1
   DBG("%s - DONE\n", __FUNCTION__);
d292 1
a292 1
   return true;
d296 1
a296 1
intelReadPixels(struct gl_context * ctx,
d301 2
a302 4
   struct intel_context *intel = intel_context(ctx);
   bool dirty;

   intel_flush_rendering_to_batch(ctx);
d304 1
a304 8
   DBG("%s\n", __FUNCTION__);

   if (_mesa_is_bufferobj(pack->BufferObj)) {
      /* Using PBOs, so try the BLT based path. */
      if (do_blit_readpixels(ctx, x, y, width, height, format, type, pack,
                             pixels)) {
         return;
      }
d306 3
a308 13
      perf_debug("%s: fallback to CPU mapping in PBO case\n", __FUNCTION__);
   }

   /* glReadPixels() wont dirty the front buffer, so reset the dirty
    * flag after calling intel_prepare_render(). */
   dirty = intel->front_buffer_dirty;
   intel_prepare_render(intel);
   intel->front_buffer_dirty = dirty;

   /* Update Mesa state before calling _mesa_readpixels().
    * XXX this may not be needed since ReadPixels no longer uses the
    * span code.
    */
d310 3
a312 2
   if (ctx->NewState)
      _mesa_update_state(ctx);
d314 2
a315 1
   _mesa_readpixels(ctx, x, y, width, height, format, type, pack, pixels);
d317 1
a317 2
   /* There's an intel_prepare_render() call in intelSpanRenderStart(). */
   intel->front_buffer_dirty = dirty;
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 * Copyright 2003 VMware, Inc.
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d82 1
d130 6
a135 1
   dst_buffer = intel_bufferobj_buffer(intel, dst);
a150 1
      intel_miptree_release(&pbo_mt);
@


