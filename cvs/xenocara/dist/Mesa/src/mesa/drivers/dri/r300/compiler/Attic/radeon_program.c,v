head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.09.05.14.05.12;	author jsg;	state dead;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.41;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@/*
 * Copyright (C) 2008 Nicolai Haehnle.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "radeon_program.h"

#include <stdio.h>

#include "radeon_compiler.h"
#include "radeon_dataflow.h"


/**
 * Transform the given clause in the following way:
 *  1. Replace it with an empty clause
 *  2. For every instruction in the original clause, try the given
 *     transformations in order.
 *  3. If one of the transformations returns GL_TRUE, assume that it
 *     has emitted the appropriate instruction(s) into the new clause;
 *     otherwise, copy the instruction verbatim.
 *
 * \note The transformation is currently not recursive; in other words,
 * instructions emitted by transformations are not transformed.
 *
 * \note The transform is called 'local' because it can only look at
 * one instruction at a time.
 */
void rc_local_transform(
	struct radeon_compiler * c,
	void *user)
{
	struct radeon_program_transformation *transformations =
		(struct radeon_program_transformation*)user;
	struct rc_instruction * inst = c->Program.Instructions.Next;

	while(inst != &c->Program.Instructions) {
		struct rc_instruction * current = inst;
		int i;

		inst = inst->Next;

		for(i = 0; transformations[i].function; ++i) {
			struct radeon_program_transformation* t = transformations + i;

			if (t->function(c, current, t->userData))
				break;
		}
	}
}

struct get_used_temporaries_data {
	unsigned char * Used;
	unsigned int UsedLength;
};

static void get_used_temporaries_cb(
	void * userdata,
	struct rc_instruction * inst,
	rc_register_file file,
	unsigned int index,
	unsigned int mask)
{
	struct get_used_temporaries_data * d = userdata;

	if (file != RC_FILE_TEMPORARY)
		return;

	if (index >= d->UsedLength)
		return;

	d->Used[index] |= mask;
}

/**
 * This function fills in the parameter 'used' with a writemask that
 * represent which components of each temporary register are used by the
 * program.  This is meant to be combined with rc_find_free_temporary_list as a
 * more efficient version of rc_find_free_temporary.
 * @@param used The function does not initialize this parameter.
 */
void rc_get_used_temporaries(
	struct radeon_compiler * c,
	unsigned char * used,
	unsigned int used_length)
{
	struct rc_instruction * inst;
	struct get_used_temporaries_data d;
	d.Used = used;
	d.UsedLength = used_length;

	for(inst = c->Program.Instructions.Next;
			inst != &c->Program.Instructions; inst = inst->Next) {

		rc_for_all_reads_mask(inst, get_used_temporaries_cb, &d);
		rc_for_all_writes_mask(inst, get_used_temporaries_cb, &d);
	}
}

/* Search a list of used temporaries for a free one
 * \sa rc_get_used_temporaries
 * @@note If this functions finds a free temporary, it will mark it as used
 * in the used temporary list (param 'used')
 * @@param used list of used temporaries
 * @@param used_length number of items in param 'used'
 * @@param mask which components must be free in the temporary index that is
 * returned.
 * @@return -1 If there are no more free temporaries, otherwise the index of
 * a temporary register where the components specified in param 'mask' are
 * not being used.
 */
int rc_find_free_temporary_list(
	struct radeon_compiler * c,
	unsigned char * used,
	unsigned int used_length,
	unsigned int mask)
{
	int i;
	for(i = 0; i < used_length; i++) {
		if ((~used[i] & mask) == mask) {
			used[i] |= mask;
			return i;
		}
	}
	return -1;
}

unsigned int rc_find_free_temporary(struct radeon_compiler * c)
{
	unsigned char used[RC_REGISTER_MAX_INDEX];
	int free;

	memset(used, 0, sizeof(used));

	rc_get_used_temporaries(c, used, RC_REGISTER_MAX_INDEX);

	free = rc_find_free_temporary_list(c, used, RC_REGISTER_MAX_INDEX,
								RC_MASK_XYZW);
	if (free < 0) {
		rc_error(c, "Ran out of temporary registers\n");
		return 0;
	}
	return free;
}


struct rc_instruction *rc_alloc_instruction(struct radeon_compiler * c)
{
	struct rc_instruction * inst = memory_pool_malloc(&c->Pool, sizeof(struct rc_instruction));

	memset(inst, 0, sizeof(struct rc_instruction));

	inst->U.I.Opcode = RC_OPCODE_ILLEGAL_OPCODE;
	inst->U.I.DstReg.WriteMask = RC_MASK_XYZW;
	inst->U.I.SrcReg[0].Swizzle = RC_SWIZZLE_XYZW;
	inst->U.I.SrcReg[1].Swizzle = RC_SWIZZLE_XYZW;
	inst->U.I.SrcReg[2].Swizzle = RC_SWIZZLE_XYZW;

	return inst;
}

void rc_insert_instruction(struct rc_instruction * after, struct rc_instruction * inst)
{
	inst->Prev = after;
	inst->Next = after->Next;

	inst->Prev->Next = inst;
	inst->Next->Prev = inst;
}

struct rc_instruction *rc_insert_new_instruction(struct radeon_compiler * c, struct rc_instruction * after)
{
	struct rc_instruction * inst = rc_alloc_instruction(c);

	rc_insert_instruction(after, inst);

	return inst;
}

void rc_remove_instruction(struct rc_instruction * inst)
{
	inst->Prev->Next = inst->Next;
	inst->Next->Prev = inst->Prev;
}

/**
 * Return the number of instructions in the program.
 */
unsigned int rc_recompute_ips(struct radeon_compiler * c)
{
	unsigned int ip = 0;
	struct rc_instruction * inst;

	for(inst = c->Program.Instructions.Next;
	    inst != &c->Program.Instructions;
	    inst = inst->Next) {
		inst->IP = ip++;
	}

	c->Program.Instructions.IP = 0xcafedead;

	return ip;
}
@


1.2
log
@Merge Mesa 7.10.3
@
text
@@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d33 1
d51 1
a51 1
void radeonLocalTransform(
d53 1
a53 2
	int num_transformations,
	struct radeon_program_transformation* transformations)
d55 2
d65 1
a65 1
		for(i = 0; i < num_transformations; ++i) {
d74 23
d98 35
a132 1
 * Left multiplication of a register with a swizzle
d134 5
a138 1
struct rc_src_register lmul_swizzle(unsigned int swizzle, struct rc_src_register srcreg)
a139 1
	struct rc_src_register tmp = srcreg;
d141 4
a144 9
	tmp.Swizzle = 0;
	tmp.Negate = 0;
	for(i = 0; i < 4; ++i) {
		rc_swizzle swz = GET_SWZ(swizzle, i);
		if (swz < 4) {
			tmp.Swizzle |= GET_SWZ(srcreg.Swizzle, swz) << (i*3);
			tmp.Negate |= GET_BIT(srcreg.Negate, swz) << i;
		} else {
			tmp.Swizzle |= swz << (i*3);
d147 1
a147 1
	return tmp;
d152 2
a153 3
	char used[RC_REGISTER_MAX_INDEX];
	unsigned int i;
	struct rc_instruction * rcinst;
d157 1
a157 9
	for (rcinst = c->Program.Instructions.Next; rcinst != &c->Program.Instructions; rcinst = rcinst->Next) {
		const struct rc_sub_instruction *inst = &rcinst->U.I;
		const struct rc_opcode_info *opcode = rc_get_opcode_info(inst->Opcode);
		unsigned int k;

		for (k = 0; k < opcode->NumSrcRegs; k++) {
			if (inst->SrcReg[k].File == RC_FILE_TEMPORARY)
				used[inst->SrcReg[k].Index] = 1;
		}
d159 5
a163 4
		if (opcode->HasDstReg) {
			if (inst->DstReg.File == RC_FILE_TEMPORARY)
				used[inst->DstReg.Index] = 1;
		}
d165 1
a165 8

	for (i = 0; i < RC_REGISTER_MAX_INDEX; i++) {
		if (!used[i])
			return i;
	}

	rc_error(c, "Ran out of temporary registers\n");
	return 0;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a32 1
#include "radeon_dataflow.h"
d50 1
a50 1
void rc_local_transform(
d52 2
a53 1
	void *user)
a54 2
	struct radeon_program_transformation *transformations =
		(struct radeon_program_transformation*)user;
d63 1
a63 1
		for(i = 0; transformations[i].function; ++i) {
a71 23
struct get_used_temporaries_data {
	unsigned char * Used;
	unsigned int UsedLength;
};

static void get_used_temporaries_cb(
	void * userdata,
	struct rc_instruction * inst,
	rc_register_file file,
	unsigned int index,
	unsigned int mask)
{
	struct get_used_temporaries_data * d = userdata;

	if (file != RC_FILE_TEMPORARY)
		return;

	if (index >= d->UsedLength)
		return;

	d->Used[index] |= mask;
}

d73 1
a73 35
 * This function fills in the parameter 'used' with a writemask that
 * represent which components of each temporary register are used by the
 * program.  This is meant to be combined with rc_find_free_temporary_list as a
 * more efficient version of rc_find_free_temporary.
 * @@param used The function does not initialize this parameter.
 */
void rc_get_used_temporaries(
	struct radeon_compiler * c,
	unsigned char * used,
	unsigned int used_length)
{
	struct rc_instruction * inst;
	struct get_used_temporaries_data d;
	d.Used = used;
	d.UsedLength = used_length;

	for(inst = c->Program.Instructions.Next;
			inst != &c->Program.Instructions; inst = inst->Next) {

		rc_for_all_reads_mask(inst, get_used_temporaries_cb, &d);
		rc_for_all_writes_mask(inst, get_used_temporaries_cb, &d);
	}
}

/* Search a list of used temporaries for a free one
 * \sa rc_get_used_temporaries
 * @@note If this functions finds a free temporary, it will mark it as used
 * in the used temporary list (param 'used')
 * @@param used list of used temporaries
 * @@param used_length number of items in param 'used'
 * @@param mask which components must be free in the temporary index that is
 * returned.
 * @@return -1 If there are no more free temporaries, otherwise the index of
 * a temporary register where the components specified in param 'mask' are
 * not being used.
d75 1
a75 5
int rc_find_free_temporary_list(
	struct radeon_compiler * c,
	unsigned char * used,
	unsigned int used_length,
	unsigned int mask)
d77 1
d79 9
a87 4
	for(i = 0; i < used_length; i++) {
		if ((~used[i] & mask) == mask) {
			used[i] |= mask;
			return i;
d90 1
a90 1
	return -1;
d95 3
a97 2
	unsigned char used[RC_REGISTER_MAX_INDEX];
	int free;
d101 9
a109 1
	rc_get_used_temporaries(c, used, RC_REGISTER_MAX_INDEX);
d111 4
a114 5
	free = rc_find_free_temporary_list(c, used, RC_REGISTER_MAX_INDEX,
								RC_MASK_XYZW);
	if (free < 0) {
		rc_error(c, "Ran out of temporary registers\n");
		return 0;
d116 8
a123 1
	return free;
@

