head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.04.50;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.22;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.54;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.54;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "nouveau_driver.h"
#include "nouveau_context.h"
#include "nouveau_texture.h"
#include "nouveau_util.h"
#include "nouveau_gldefs.h"
#include "nv_object.xml.h"
#include "nv04_3d.xml.h"
#include "nv04_driver.h"
#include "main/samplerobj.h"

static uint32_t
get_tex_format(struct gl_texture_image *ti)
{
	switch (ti->TexFormat) {
	case MESA_FORMAT_A_UNORM8:
	case MESA_FORMAT_L_UNORM8:
	case MESA_FORMAT_I_UNORM8:
		return NV04_TEXTURED_TRIANGLE_FORMAT_COLOR_Y8;
	case MESA_FORMAT_B5G5R5A1_UNORM:
		return NV04_TEXTURED_TRIANGLE_FORMAT_COLOR_A1R5G5B5;
	case MESA_FORMAT_B4G4R4A4_UNORM:
		return NV04_TEXTURED_TRIANGLE_FORMAT_COLOR_A4R4G4B4;
	case MESA_FORMAT_B5G6R5_UNORM:
		return NV04_TEXTURED_TRIANGLE_FORMAT_COLOR_R5G6B5;
	case MESA_FORMAT_B8G8R8A8_UNORM:
		return NV04_TEXTURED_TRIANGLE_FORMAT_COLOR_A8R8G8B8;
	case MESA_FORMAT_B8G8R8X8_UNORM:
		return NV04_TEXTURED_TRIANGLE_FORMAT_COLOR_X8R8G8B8;
	default:
		assert(0);
	}
}

void
nv04_emit_tex_obj(struct gl_context *ctx, int emit)
{
	struct nv04_context *nv04 = to_nv04_context(ctx);
	const int i = emit - NOUVEAU_STATE_TEX_OBJ0;
	struct nouveau_surface *s;
	uint32_t format = 0xa0, filter = 0x1010;

	if (ctx->Texture.Unit[i]._Current) {
		struct gl_texture_object *t = ctx->Texture.Unit[i]._Current;
		struct gl_texture_image *ti = t->Image[0][t->BaseLevel];
		const struct gl_sampler_object *sa = _mesa_get_samplerobj(ctx, i);
		int lod_max = 1, lod_bias = 0;

		if (!nouveau_texture_validate(ctx, t))
			return;

		s = &to_nouveau_texture(t)->surfaces[t->BaseLevel];

		if (sa->MinFilter != GL_NEAREST &&
		    sa->MinFilter != GL_LINEAR) {
			lod_max = CLAMP(MIN2(sa->MaxLod, t->_MaxLambda),
					0, 15) + 1;

			lod_bias = CLAMP(ctx->Texture.Unit[i].LodBias +
					 sa->LodBias, -16, 15) * 8;
		}

		format |= nvgl_wrap_mode(sa->WrapT) << 28 |
			nvgl_wrap_mode(sa->WrapS) << 24 |
			ti->HeightLog2 << 20 |
			ti->WidthLog2 << 16 |
			lod_max << 12 |
			get_tex_format(ti);

		filter |= log2i(sa->MaxAnisotropy) << 31 |
			nvgl_filter_mode(sa->MagFilter) << 28 |
			log2i(sa->MaxAnisotropy) << 27 |
			nvgl_filter_mode(sa->MinFilter) << 24 |
			(lod_bias & 0xff) << 16;

	} else {
		s = &to_nv04_context(ctx)->dummy_texture;

		format |= NV04_TEXTURED_TRIANGLE_FORMAT_ADDRESSU_REPEAT |
			NV04_TEXTURED_TRIANGLE_FORMAT_ADDRESSV_REPEAT |
			1 << 12 |
			NV04_TEXTURED_TRIANGLE_FORMAT_COLOR_A8R8G8B8;

		filter |= NV04_TEXTURED_TRIANGLE_FILTER_MINIFY_NEAREST |
			NV04_TEXTURED_TRIANGLE_FILTER_MAGNIFY_NEAREST;
	}

	nv04->texture[i] = s;
	nv04->format[i] = format;
	nv04->filter[i] = filter;
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d41 3
a43 3
	case MESA_FORMAT_A8:
	case MESA_FORMAT_L8:
	case MESA_FORMAT_I8:
d45 1
a45 1
	case MESA_FORMAT_ARGB1555:
d47 1
a47 1
	case MESA_FORMAT_ARGB4444:
d49 1
a49 1
	case MESA_FORMAT_RGB565:
d51 1
a51 1
	case MESA_FORMAT_ARGB8888:
d53 1
a53 1
	case MESA_FORMAT_XRGB8888:
d68 1
a68 1
	if (ctx->Texture.Unit[i]._ReallyEnabled) {
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d35 1
d63 1
a64 4
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *fahrenheit = nv04_context_engine(ctx);
	struct nouveau_bo_context *bctx = context_bctx_i(ctx, TEXTURE, i);
	const int bo_flags = NOUVEAU_BO_RD | NOUVEAU_BO_GART | NOUVEAU_BO_VRAM;
a67 3
	if (i && !nv04_mtex_engine(fahrenheit))
		return;

d71 1
d79 3
a81 3
		if (t->Sampler.MinFilter != GL_NEAREST &&
		    t->Sampler.MinFilter != GL_LINEAR) {
			lod_max = CLAMP(MIN2(t->Sampler.MaxLod, t->_MaxLambda),
d85 1
a85 1
					 t->Sampler.LodBias, -16, 15) * 8;
d88 2
a89 2
		format |= nvgl_wrap_mode(t->Sampler.WrapT) << 28 |
			nvgl_wrap_mode(t->Sampler.WrapS) << 24 |
d95 4
a98 4
		filter |= log2i(t->Sampler.MaxAnisotropy) << 31 |
			nvgl_filter_mode(t->Sampler.MagFilter) << 28 |
			log2i(t->Sampler.MaxAnisotropy) << 27 |
			nvgl_filter_mode(t->Sampler.MinFilter) << 24 |
d113 3
a115 33
	if (nv04_mtex_engine(fahrenheit)) {
		nouveau_bo_markl(bctx, fahrenheit,
				 NV04_MULTITEX_TRIANGLE_OFFSET(i),
				 s->bo, s->offset, bo_flags);

		nouveau_bo_mark(bctx, fahrenheit,
				NV04_MULTITEX_TRIANGLE_FORMAT(i),
				s->bo, format, 0,
				NV04_MULTITEX_TRIANGLE_FORMAT_DMA_A,
				NV04_MULTITEX_TRIANGLE_FORMAT_DMA_B,
				bo_flags | NOUVEAU_BO_OR);

		BEGIN_RING(chan, fahrenheit, NV04_MULTITEX_TRIANGLE_FILTER(i), 1);
		OUT_RING(chan, filter);

	} else {
		nouveau_bo_markl(bctx, fahrenheit,
				 NV04_TEXTURED_TRIANGLE_OFFSET,
				 s->bo, s->offset, bo_flags);

		nouveau_bo_mark(bctx, fahrenheit,
				NV04_TEXTURED_TRIANGLE_FORMAT,
				s->bo, format, 0,
				NV04_TEXTURED_TRIANGLE_FORMAT_DMA_A,
				NV04_TEXTURED_TRIANGLE_FORMAT_DMA_B,
				bo_flags | NOUVEAU_BO_OR);

		BEGIN_RING(chan, fahrenheit, NV04_TEXTURED_TRIANGLE_COLORKEY, 1);
		OUT_RING(chan, 0);

		BEGIN_RING(chan, fahrenheit, NV04_TEXTURED_TRIANGLE_FILTER, 1);
		OUT_RING(chan, filter);
	}
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d83 3
a85 3
		if (t->MinFilter != GL_NEAREST &&
		    t->MinFilter != GL_LINEAR) {
			lod_max = CLAMP(MIN2(t->MaxLod, t->_MaxLambda),
d89 1
a89 1
					 t->LodBias, -16, 15) * 8;
d92 2
a93 2
		format |= nvgl_wrap_mode(t->WrapT) << 28 |
			nvgl_wrap_mode(t->WrapS) << 24 |
d99 4
a102 4
		filter |= log2i(t->MaxAnisotropy) << 31 |
			nvgl_filter_mode(t->MagFilter) << 28 |
			log2i(t->MaxAnisotropy) << 27 |
			nvgl_filter_mode(t->MinFilter) << 24 |
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d32 2
a33 1
#include "nouveau_class.h"
a58 18
static inline unsigned
get_wrap_mode(unsigned wrap)
{
	switch (wrap) {
	case GL_REPEAT:
		return 0x1;
	case GL_MIRRORED_REPEAT:
		return 0x2;
	case GL_CLAMP:
	case GL_CLAMP_TO_EDGE:
		return 0x3;
	case GL_CLAMP_TO_BORDER:
		return 0x4;
	default:
		assert(0);
	}
}

d60 1
a60 1
nv04_emit_tex_obj(GLcontext *ctx, int emit)
d89 1
a89 1
					 t->LodBias, 0, 15);
d92 2
a93 2
		format |= get_wrap_mode(t->WrapT) << 28 |
			get_wrap_mode(t->WrapS) << 24 |
d103 1
a103 1
			lod_bias << 16;
d120 1
a120 1
				 s->bo, 0, bo_flags);
d135 1
a135 1
				 s->bo, 0, bo_flags);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d32 1
a32 2
#include "nv_object.xml.h"
#include "nv04_3d.xml.h"
d58 18
d77 1
a77 1
nv04_emit_tex_obj(struct gl_context *ctx, int emit)
d106 1
a106 1
					 t->LodBias, -16, 15) * 8;
d109 2
a110 2
		format |= nvgl_wrap_mode(t->WrapT) << 28 |
			nvgl_wrap_mode(t->WrapS) << 24 |
d120 1
a120 1
			(lod_bias & 0xff) << 16;
d137 1
a137 1
				 s->bo, s->offset, bo_flags);
d152 1
a152 1
				 s->bo, s->offset, bo_flags);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a34 1
#include "main/samplerobj.h"
a61 1
	struct nv04_context *nv04 = to_nv04_context(ctx);
d63 4
d70 3
a75 1
		const struct gl_sampler_object *sa = _mesa_get_samplerobj(ctx, i);
d83 3
a85 3
		if (sa->MinFilter != GL_NEAREST &&
		    sa->MinFilter != GL_LINEAR) {
			lod_max = CLAMP(MIN2(sa->MaxLod, t->_MaxLambda),
d89 1
a89 1
					 sa->LodBias, -16, 15) * 8;
d92 2
a93 2
		format |= nvgl_wrap_mode(sa->WrapT) << 28 |
			nvgl_wrap_mode(sa->WrapS) << 24 |
d99 4
a102 4
		filter |= log2i(sa->MaxAnisotropy) << 31 |
			nvgl_filter_mode(sa->MagFilter) << 28 |
			log2i(sa->MaxAnisotropy) << 27 |
			nvgl_filter_mode(sa->MinFilter) << 24 |
d117 33
a149 3
	nv04->texture[i] = s;
	nv04->format[i] = format;
	nv04->filter[i] = filter;
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d41 3
a43 3
	case MESA_FORMAT_A_UNORM8:
	case MESA_FORMAT_L_UNORM8:
	case MESA_FORMAT_I_UNORM8:
d45 1
a45 1
	case MESA_FORMAT_B5G5R5A1_UNORM:
d47 1
a47 1
	case MESA_FORMAT_B4G4R4A4_UNORM:
d49 1
a49 1
	case MESA_FORMAT_B5G6R5_UNORM:
d51 1
a51 1
	case MESA_FORMAT_B8G8R8A8_UNORM:
d53 1
a53 1
	case MESA_FORMAT_B8G8R8X8_UNORM:
d68 1
a68 1
	if (ctx->Texture.Unit[i]._Current) {
@


