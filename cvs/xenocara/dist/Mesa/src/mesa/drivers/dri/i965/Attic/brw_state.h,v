head	1.12;
access;
symbols
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.11;
commitid	TnlogFl9nOv2eaRf;

1.11
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.10;
commitid	4ry2gvZGMXkCUD2n;

1.10
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.9;
commitid	mcxB0JvoI9gTDYXU;

1.9
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.8;
commitid	WPD6rgPryPkvXOr9;

1.8
date	2013.09.05.14.04.20;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.45;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.45;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.37;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.51;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.11.44;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.48.49;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.12
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */


#ifndef BRW_STATE_H
#define BRW_STATE_H

#include "brw_context.h"

#ifdef __cplusplus
extern "C" {
#endif

enum intel_msaa_layout;

extern const struct brw_tracked_state brw_blend_constant_color;
extern const struct brw_tracked_state brw_cc_vp;
extern const struct brw_tracked_state brw_cc_unit;
extern const struct brw_tracked_state brw_clip_prog;
extern const struct brw_tracked_state brw_clip_unit;
extern const struct brw_tracked_state brw_vs_pull_constants;
extern const struct brw_tracked_state brw_gs_pull_constants;
extern const struct brw_tracked_state brw_wm_pull_constants;
extern const struct brw_tracked_state brw_constant_buffer;
extern const struct brw_tracked_state brw_curbe_offsets;
extern const struct brw_tracked_state brw_invariant_state;
extern const struct brw_tracked_state brw_fs_samplers;
extern const struct brw_tracked_state brw_ff_gs_prog;
extern const struct brw_tracked_state brw_gs_unit;
extern const struct brw_tracked_state brw_line_stipple;
extern const struct brw_tracked_state brw_aa_line_parameters;
extern const struct brw_tracked_state brw_binding_table_pointers;
extern const struct brw_tracked_state brw_depthbuffer;
extern const struct brw_tracked_state brw_polygon_stipple_offset;
extern const struct brw_tracked_state brw_polygon_stipple;
extern const struct brw_tracked_state brw_recalculate_urb_fence;
extern const struct brw_tracked_state brw_sf_prog;
extern const struct brw_tracked_state brw_sf_unit;
extern const struct brw_tracked_state brw_sf_vp;
extern const struct brw_tracked_state brw_state_base_address;
extern const struct brw_tracked_state brw_urb_fence;
extern const struct brw_tracked_state brw_vs_prog;
extern const struct brw_tracked_state brw_vs_samplers;
extern const struct brw_tracked_state brw_gs_samplers;
extern const struct brw_tracked_state brw_vs_ubo_surfaces;
extern const struct brw_tracked_state brw_vs_abo_surfaces;
extern const struct brw_tracked_state brw_gs_ubo_surfaces;
extern const struct brw_tracked_state brw_gs_abo_surfaces;
extern const struct brw_tracked_state brw_vs_unit;
extern const struct brw_tracked_state brw_gs_prog;
extern const struct brw_tracked_state brw_wm_prog;
extern const struct brw_tracked_state brw_renderbuffer_surfaces;
extern const struct brw_tracked_state brw_texture_surfaces;
extern const struct brw_tracked_state brw_wm_binding_table;
extern const struct brw_tracked_state brw_gs_binding_table;
extern const struct brw_tracked_state brw_vs_binding_table;
extern const struct brw_tracked_state brw_wm_ubo_surfaces;
extern const struct brw_tracked_state brw_wm_abo_surfaces;
extern const struct brw_tracked_state brw_wm_unit;
extern const struct brw_tracked_state brw_interpolation_map;

extern const struct brw_tracked_state brw_psp_urb_cbs;

extern const struct brw_tracked_state brw_drawing_rect;
extern const struct brw_tracked_state brw_indices;
extern const struct brw_tracked_state brw_vertices;
extern const struct brw_tracked_state brw_index_buffer;
extern const struct brw_tracked_state gen6_binding_table_pointers;
extern const struct brw_tracked_state gen6_blend_state;
extern const struct brw_tracked_state gen6_cc_state_pointers;
extern const struct brw_tracked_state gen6_clip_state;
extern const struct brw_tracked_state gen6_clip_vp;
extern const struct brw_tracked_state gen6_color_calc_state;
extern const struct brw_tracked_state gen6_depth_stencil_state;
extern const struct brw_tracked_state gen6_gs_state;
extern const struct brw_tracked_state gen6_gs_binding_table;
extern const struct brw_tracked_state gen6_multisample_state;
extern const struct brw_tracked_state gen6_renderbuffer_surfaces;
extern const struct brw_tracked_state gen6_sampler_state;
extern const struct brw_tracked_state gen6_scissor_state;
extern const struct brw_tracked_state gen6_sol_surface;
extern const struct brw_tracked_state gen6_sf_state;
extern const struct brw_tracked_state gen6_sf_vp;
extern const struct brw_tracked_state gen6_urb;
extern const struct brw_tracked_state gen6_viewport_state;
extern const struct brw_tracked_state gen6_vs_push_constants;
extern const struct brw_tracked_state gen6_vs_state;
extern const struct brw_tracked_state gen6_wm_push_constants;
extern const struct brw_tracked_state gen6_wm_state;
extern const struct brw_tracked_state gen7_depthbuffer;
extern const struct brw_tracked_state gen7_cc_viewport_state_pointer;
extern const struct brw_tracked_state gen7_clip_state;
extern const struct brw_tracked_state gen7_disable_stages;
extern const struct brw_tracked_state gen7_gs_push_constants;
extern const struct brw_tracked_state gen7_gs_state;
extern const struct brw_tracked_state gen7_ps_state;
extern const struct brw_tracked_state gen7_push_constant_space;
extern const struct brw_tracked_state gen7_sbe_state;
extern const struct brw_tracked_state gen7_sf_clip_viewport;
extern const struct brw_tracked_state gen7_sf_state;
extern const struct brw_tracked_state gen7_sol_state;
extern const struct brw_tracked_state gen7_urb;
extern const struct brw_tracked_state gen7_vs_state;
extern const struct brw_tracked_state gen7_wm_state;
extern const struct brw_tracked_state haswell_cut_index;
extern const struct brw_tracked_state gen8_blend_state;
extern const struct brw_tracked_state gen8_disable_stages;
extern const struct brw_tracked_state gen8_gs_state;
extern const struct brw_tracked_state gen8_index_buffer;
extern const struct brw_tracked_state gen8_multisample_state;
extern const struct brw_tracked_state gen8_ps_blend;
extern const struct brw_tracked_state gen8_ps_extra;
extern const struct brw_tracked_state gen8_ps_state;
extern const struct brw_tracked_state gen8_wm_depth_stencil;
extern const struct brw_tracked_state gen8_wm_state;
extern const struct brw_tracked_state gen8_raster_state;
extern const struct brw_tracked_state gen8_sbe_state;
extern const struct brw_tracked_state gen8_sf_state;
extern const struct brw_tracked_state gen8_state_base_address;
extern const struct brw_tracked_state gen8_sol_state;
extern const struct brw_tracked_state gen8_sf_clip_viewport;
extern const struct brw_tracked_state gen8_vertices;
extern const struct brw_tracked_state gen8_vf_topology;
extern const struct brw_tracked_state gen8_vs_state;

/* brw_misc_state.c */
void brw_upload_invariant_state(struct brw_context *brw);
uint32_t
brw_depthbuffer_format(struct brw_context *brw);


/***********************************************************************
 * brw_state.c
 */
void brw_upload_state(struct brw_context *brw);
void brw_clear_dirty_bits(struct brw_context *brw);
void brw_init_state(struct brw_context *brw);
void brw_destroy_state(struct brw_context *brw);

/***********************************************************************
 * brw_state_cache.c
 */

void brw_upload_cache(struct brw_cache *cache,
		      enum brw_cache_id cache_id,
		      const void *key,
		      GLuint key_sz,
		      const void *data,
		      GLuint data_sz,
		      const void *aux,
		      GLuint aux_sz,
		      uint32_t *out_offset, void *out_aux);

bool brw_search_cache(struct brw_cache *cache,
		      enum brw_cache_id cache_id,
		      const void *key,
		      GLuint key_size,
		      uint32_t *inout_offset, void *out_aux);
void brw_state_cache_check_size( struct brw_context *brw );

void brw_init_caches( struct brw_context *brw );
void brw_destroy_caches( struct brw_context *brw );

/***********************************************************************
 * brw_state_batch.c
 */
#define BRW_BATCH_STRUCT(brw, s) \
   intel_batchbuffer_data(brw, (s), sizeof(*(s)), RENDER_RING)

void *brw_state_batch(struct brw_context *brw,
		      enum state_struct_type type,
		      int size,
		      int alignment,
		      uint32_t *out_offset);

/* brw_wm_surface_state.c */
void gen4_init_vtable_surface_functions(struct brw_context *brw);
uint32_t brw_get_surface_tiling_bits(uint32_t tiling);
uint32_t brw_get_surface_num_multisamples(unsigned num_samples);

void brw_configure_w_tiled(const struct intel_mipmap_tree *mt,
                           bool is_render_target,
                           unsigned *width, unsigned *height,
                           unsigned *pitch, uint32_t *tiling,
                           unsigned *format);

uint32_t brw_format_for_mesa_format(mesa_format mesa_format);

GLuint translate_tex_target(GLenum target);

GLuint translate_tex_format(struct brw_context *brw,
                            mesa_format mesa_format,
			    GLenum srgb_decode);

int brw_get_texture_swizzle(const struct gl_context *ctx,
                            const struct gl_texture_object *t);

/* gen7_wm_surface_state.c */
unsigned brw_swizzle_to_scs(GLenum swizzle, bool need_green_to_blue);
uint32_t gen7_surface_tiling_mode(uint32_t tiling);
uint32_t gen7_surface_msaa_bits(unsigned num_samples, enum intel_msaa_layout l);
void gen7_set_surface_mcs_info(struct brw_context *brw,
                               uint32_t *surf,
                               uint32_t surf_offset,
                               const struct intel_mipmap_tree *mcs_mt,
                               bool is_render_target);
void gen7_check_surface_setup(uint32_t *surf, bool is_render_target);
void gen7_init_vtable_surface_functions(struct brw_context *brw);

/* gen7_sol_state.c */
void gen7_upload_3dstate_so_decl_list(struct brw_context *brw,
                                      const struct brw_vue_map *vue_map);

/* gen8_surface_state.c */
void gen8_init_vtable_surface_functions(struct brw_context *brw);

/* brw_wm_sampler_state.c */
uint32_t translate_wrap_mode(struct brw_context *brw,
                             GLenum wrap, bool using_nearest);
void upload_default_color(struct brw_context *brw,
			  struct gl_sampler_object *sampler,
			  int unit,
                          uint32_t *sdc_offset);
void gen4_init_vtable_sampler_functions(struct brw_context *brw);

/* gen7_sampler_state.c */
void gen7_init_vtable_sampler_functions(struct brw_context *brw);

/* gen6_sf_state.c */
void
calculate_attr_overrides(const struct brw_context *brw,
                         uint16_t *attr_overrides,
                         uint32_t *point_sprite_enables,
                         uint32_t *flat_enables,
                         uint32_t *urb_entry_read_length);

/* brw_vs_surface_state.c */
void
brw_upload_vec4_pull_constants(struct brw_context *brw,
                               GLbitfield brw_new_constbuf,
                               const struct gl_program *prog,
                               struct brw_stage_state *stage_state,
                               const struct brw_vec4_prog_data *prog_data);

/* gen7_vs_state.c */
void
gen7_upload_constant_state(struct brw_context *brw,
                           const struct brw_stage_state *stage_state,
                           bool active, unsigned opcode);

#ifdef __cplusplus
}
#endif

#endif
@


1.11
log
@Merge Mesa 10.2.9
@
text
@@


1.10
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a103 1
extern const struct brw_tracked_state gen6_gs_push_constants;
a138 1
extern const struct brw_tracked_state gen8_pma_fix;
d199 1
a199 1
		      enum aub_state_struct_type type,
d245 11
a255 19
/* brw_sampler_state.c */
void brw_emit_sampler_state(struct brw_context *brw,
                            uint32_t *sampler_state,
                            uint32_t batch_offset_for_sampler_state,
                            unsigned min_filter,
                            unsigned mag_filter,
                            unsigned mip_filter,
                            unsigned max_anisotropy,
                            unsigned address_rounding,
                            unsigned wrap_s,
                            unsigned wrap_t,
                            unsigned wrap_r,
                            unsigned min_lod,
                            unsigned max_lod,
                            int lod_bias,
                            unsigned base_level,
                            unsigned shadow_function,
                            bool non_normalized_coordinates,
                            uint32_t border_color_offset);
a264 3
/* gen6_surface_state.c */
void gen6_init_vtable_surface_functions(struct brw_context *brw);

d267 5
a271 6
brw_upload_pull_constants(struct brw_context *brw,
                          GLbitfield brw_new_constbuf,
                          const struct gl_program *prog,
                          struct brw_stage_state *stage_state,
                          const struct brw_stage_prog_data *prog_data,
                          bool dword_pitch);
@


1.9
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d104 1
d140 1
d201 1
a201 1
		      enum state_struct_type type,
d247 19
a265 11
/* brw_wm_sampler_state.c */
uint32_t translate_wrap_mode(struct brw_context *brw,
                             GLenum wrap, bool using_nearest);
void upload_default_color(struct brw_context *brw,
			  struct gl_sampler_object *sampler,
			  int unit,
                          uint32_t *sdc_offset);
void gen4_init_vtable_sampler_functions(struct brw_context *brw);

/* gen7_sampler_state.c */
void gen7_init_vtable_sampler_functions(struct brw_context *brw);
d275 3
d280 6
a285 5
brw_upload_vec4_pull_constants(struct brw_context *brw,
                               GLbitfield brw_new_constbuf,
                               const struct gl_program *prog,
                               struct brw_stage_state *stage_state,
                               const struct brw_vec4_prog_data *prog_data);
@


1.8
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d31 1
a31 1
    
d50 1
d55 2
a56 1
extern const struct brw_tracked_state brw_gs_prog;
a64 1
extern const struct brw_tracked_state brw_samplers;
d71 2
d74 3
d78 1
d83 1
d86 1
d88 1
d122 2
d125 1
a125 1
extern const struct brw_tracked_state gen7_samplers;
d134 19
d164 1
d195 2
a196 2
#define BRW_BATCH_STRUCT(brw, s) intel_batchbuffer_data(brw, (s), \
							sizeof(*(s)), false)
d209 7
a215 1
uint32_t brw_format_for_mesa_format(gl_format mesa_format);
d220 1
a220 2
                            gl_format mesa_format,
			    GLenum depth_mode,
d227 1
d237 7
a243 2
void gen7_create_shader_time_surface(struct brw_context *brw,
                                     uint32_t *out_offset);
d246 2
a247 1
uint32_t translate_wrap_mode(GLenum wrap, bool using_nearest);
d250 6
a255 1
			  int unit, int ss_index);
d258 20
a277 6
uint32_t
get_attr_override(const struct brw_vue_map *vue_map, int urb_entry_read_offset,
                  int fs_attr, bool two_side_color, uint32_t *max_source_attr);

/* gen7_urb.c */
void gen7_allocate_push_constants(struct brw_context *brw);
@


1.7
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d38 5
a42 10
static INLINE void
brw_add_validated_bo(struct brw_context *brw, drm_intel_bo *bo)
{
   assert(brw->state.validated_bo_count < ARRAY_SIZE(brw->state.validated_bos));

   if (bo != NULL) {
      drm_intel_bo_reference(bo);
      brw->state.validated_bos[brw->state.validated_bo_count++] = bo;
   }
};
a46 1
extern const struct brw_tracked_state brw_check_fallback;
d49 2
a50 2
extern const struct brw_tracked_state brw_vs_constants;
extern const struct brw_tracked_state brw_wm_constants;
d53 1
a53 1
extern const struct brw_tracked_state brw_invarient_state;
a57 1
extern const struct brw_tracked_state brw_pipelined_state_pointers;
a61 1
extern const struct brw_tracked_state brw_program_parameters;
d63 1
a68 2
extern const struct brw_tracked_state brw_vertex_state;
extern const struct brw_tracked_state brw_vs_surfaces;
d70 1
a71 1
extern const struct brw_tracked_state brw_wm_input_sizes;
d73 2
a74 3
extern const struct brw_tracked_state brw_wm_samplers;
extern const struct brw_tracked_state brw_wm_constant_surface;
extern const struct brw_tracked_state brw_wm_surfaces;
d76 2
a81 2
extern const struct brw_tracked_state brw_pipe_control;

d94 3
d99 1
d104 1
a104 1
extern const struct brw_tracked_state gen6_vs_constants;
d106 1
a106 1
extern const struct brw_tracked_state gen6_wm_constants;
a108 2
extern const struct brw_tracked_state gen7_blend_state_pointer;
extern const struct brw_tracked_state gen7_cc_state_pointer;
a110 1
extern const struct brw_tracked_state gen7_depth_stencil_state_pointer;
a115 1
extern const struct brw_tracked_state gen7_sf_clip_viewport_state_pointer;
a119 2
extern const struct brw_tracked_state gen7_wm_constants;
extern const struct brw_tracked_state gen7_wm_constant_surface;
d121 7
a127 1
extern const struct brw_tracked_state gen7_wm_surfaces;
a131 1
void brw_validate_state(struct brw_context *brw);
a134 1
void brw_clear_validated_bos(struct brw_context *brw);
d163 1
a163 1
#define BRW_BATCH_STRUCT(brw, s) intel_batchbuffer_data(&brw->intel, (s), \
d167 1
d173 3
a175 4
void brw_create_constant_surface(struct brw_context *brw,
				 drm_intel_bo *bo,
				 int width,
				 uint32_t *out_offset);
d181 2
a182 2
GLuint translate_tex_format(gl_format mesa_format,
			    GLenum internal_format,
d186 3
d190 11
a200 4
void gen7_create_constant_surface(struct brw_context *brw,
				  drm_intel_bo *bo,
				  int width,
				  uint32_t *out_offset);
d206 1
a206 1
			  int unit);
d210 5
a214 1
get_attr_override(struct brw_context *brw, int fs_attr, int two_side_color);
d216 3
a218 3
/* gen7_misc_state.c */
unsigned int
gen7_depth_format(struct brw_context *brw);
@


1.6
log
@Merge Mesa 7.10.3
@
text
@d50 1
a105 1
extern const struct brw_tracked_state gen6_scissor_state_pointers;
d110 1
d114 20
d147 16
a162 33
drm_intel_bo *brw_cache_data(struct brw_cache *cache,
		       enum brw_cache_id cache_id,
		       const void *data,
		       GLuint size);

drm_intel_bo *brw_upload_cache(struct brw_cache *cache,
			       enum brw_cache_id cache_id,
			       const void *key,
			       GLuint key_sz,
			       drm_intel_bo **reloc_bufs,
			       GLuint nr_reloc_bufs,
			       const void *data,
			       GLuint data_sz);

drm_intel_bo *brw_upload_cache_with_auxdata(struct brw_cache *cache,
					    enum brw_cache_id cache_id,
					    const void *key,
					    GLuint key_sz,
					    drm_intel_bo **reloc_bufs,
					    GLuint nr_reloc_bufs,
					    const void *data,
					    GLuint data_sz,
					    const void *aux,
					    GLuint aux_sz,
					    void *aux_return);

drm_intel_bo *brw_search_cache( struct brw_cache *cache,
			  enum brw_cache_id cache_id,
			  const void *key,
			  GLuint key_size,
			  drm_intel_bo **reloc_bufs,
			  GLuint nr_reloc_bufs,
			  void *aux_return);
d171 1
a171 1
#define BRW_BATCH_STRUCT(brw, s) intel_batchbuffer_data(brw->intel.batch, (s), \
a172 1
#define BRW_CACHED_BATCH_STRUCT(brw, s) brw_cached_batch_struct( brw, (s), sizeof(*(s)) )
a173 5
GLboolean brw_cached_batch_struct( struct brw_context *brw,
				   const void *data,
				   GLuint sz );
void brw_destroy_batch_cache( struct brw_context *brw );
void brw_clear_batch_cache( struct brw_context *brw );
a176 1
		      drm_intel_bo **out_bo,
a182 1
				 drm_intel_bo **out_bo,
d184 29
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d39 1
a39 1
brw_add_validated_bo(struct brw_context *brw, dri_bo *bo)
d44 1
a44 1
      dri_bo_reference(bo);
d49 64
a112 75
const struct brw_tracked_state brw_blend_constant_color;
const struct brw_tracked_state brw_cc_unit;
const struct brw_tracked_state brw_cc_vp;
const struct brw_tracked_state brw_check_fallback;
const struct brw_tracked_state brw_clip_prog;
const struct brw_tracked_state brw_clip_unit;
const struct brw_tracked_state brw_constant_buffer;
const struct brw_tracked_state brw_curbe_offsets;
const struct brw_tracked_state brw_invarient_state;
const struct brw_tracked_state brw_gs_prog;
const struct brw_tracked_state brw_gs_unit;
const struct brw_tracked_state brw_line_stipple;
const struct brw_tracked_state brw_aa_line_parameters;
const struct brw_tracked_state brw_pipelined_state_pointers;
const struct brw_tracked_state brw_binding_table_pointers;
const struct brw_tracked_state brw_depthbuffer;
const struct brw_tracked_state brw_polygon_stipple_offset;
const struct brw_tracked_state brw_polygon_stipple;
const struct brw_tracked_state brw_program_parameters;
const struct brw_tracked_state brw_recalculate_urb_fence;
const struct brw_tracked_state brw_sf_prog;
const struct brw_tracked_state brw_sf_unit;
const struct brw_tracked_state brw_sf_vp;
const struct brw_tracked_state brw_state_base_address;
const struct brw_tracked_state brw_urb_fence;
const struct brw_tracked_state brw_vertex_state;
const struct brw_tracked_state brw_vs_surfaces;
const struct brw_tracked_state brw_vs_prog;
const struct brw_tracked_state brw_vs_unit;
const struct brw_tracked_state brw_wm_input_sizes;
const struct brw_tracked_state brw_wm_prog;
const struct brw_tracked_state brw_wm_samplers;
const struct brw_tracked_state brw_wm_constant_surface;
const struct brw_tracked_state brw_wm_surfaces;
const struct brw_tracked_state brw_wm_unit;

const struct brw_tracked_state brw_psp_urb_cbs;

const struct brw_tracked_state brw_pipe_control;

const struct brw_tracked_state brw_drawing_rect;
const struct brw_tracked_state brw_indices;
const struct brw_tracked_state brw_vertices;
const struct brw_tracked_state brw_index_buffer;
const struct brw_tracked_state gen6_binding_table_pointers;
const struct brw_tracked_state gen6_blend_state;
const struct brw_tracked_state gen6_cc_state_pointers;
const struct brw_tracked_state gen6_cc_vp;
const struct brw_tracked_state gen6_clip_state;
const struct brw_tracked_state gen6_clip_vp;
const struct brw_tracked_state gen6_color_calc_state;
const struct brw_tracked_state gen6_depth_stencil_state;
const struct brw_tracked_state gen6_gs_state;
const struct brw_tracked_state gen6_sampler_state;
const struct brw_tracked_state gen6_scissor_state;
const struct brw_tracked_state gen6_sf_state;
const struct brw_tracked_state gen6_sf_vp;
const struct brw_tracked_state gen6_urb;
const struct brw_tracked_state gen6_viewport_state;
const struct brw_tracked_state gen6_vs_state;
const struct brw_tracked_state gen6_wm_state;

/**
 * Use same key for WM and VS surfaces.
 */
struct brw_surface_key {
   GLenum target, depthmode;
   dri_bo *bo;
   GLint format, internal_format;
   GLint first_level, last_level;
   GLint width, height, depth;
   GLint pitch, cpp;
   uint32_t tiling;
   GLuint offset;
};
d126 1
a126 1
dri_bo *brw_cache_data(struct brw_cache *cache,
d129 1
a129 3
		       GLuint size,
		       dri_bo **reloc_bufs,
		       GLuint nr_reloc_bufs);
d135 1
a135 1
			       dri_bo **reloc_bufs,
d144 1
a144 1
					    dri_bo **reloc_bufs,
d152 1
a152 1
dri_bo *brw_search_cache( struct brw_cache *cache,
d156 1
a156 1
			  dri_bo **reloc_bufs,
a162 1
void brw_state_cache_bo_delete(struct brw_cache *cache, dri_bo *bo);
d167 2
a168 1
#define BRW_BATCH_STRUCT(brw, s) intel_batchbuffer_data( brw->intel.batch, (s), sizeof(*(s)))
d176 5
d183 5
a187 3
dri_bo *
brw_create_constant_surface( struct brw_context *brw,
                             struct brw_surface_key *key );
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d38 1
a38 1
static inline void
a54 1
const struct brw_tracked_state brw_constant_buffer_state;
d75 1
d81 1
a88 3
const struct brw_tracked_state brw_clear_surface_cache;
const struct brw_tracked_state brw_clear_batch_cache;

d92 32
d132 1
d140 1
d144 20
a163 17
dri_bo *brw_cache_data_sz(struct brw_cache *cache,
			  enum brw_cache_id cache_id,
			  const void *data,
			  GLuint data_size,
			  dri_bo **reloc_bufs,
			  GLuint nr_reloc_bufs);

dri_bo *brw_upload_cache( struct brw_cache *cache,
			  enum brw_cache_id cache_id,
			  const void *key,
			  GLuint key_sz,
			  dri_bo **reloc_bufs,
			  GLuint nr_reloc_bufs,
			  const void *data,
			  GLuint data_sz,
			  const void *aux,
			  void *aux_return );
d174 3
a176 2
void brw_init_cache( struct brw_context *brw );
void brw_destroy_cache( struct brw_context *brw );
d181 1
a181 1
#define BRW_BATCH_STRUCT(brw, s) intel_batchbuffer_data( brw->intel.batch, (s), sizeof(*(s)), IGNORE_CLIPRECTS)
d188 6
a193 1
void brw_clear_batch_cache_flush( struct brw_context *brw );
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d38 10
a85 2
const struct brw_tracked_state brw_active_vertprog;
const struct brw_tracked_state brw_tnl_vertprog;
d90 12
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@a50 1
const struct brw_tracked_state brw_drawing_rect;
d86 32
a117 2
GLuint brw_cache_data(struct brw_cache *cache,
		      const void *data );
d119 2
a120 20
GLuint brw_cache_data_sz(struct brw_cache *cache,
			 const void *data,
			 GLuint data_sz);

GLuint brw_upload_cache( struct brw_cache *cache,
			 const void *key,
			 GLuint key_sz,
			 const void *data,
			 GLuint data_sz,
			 const void *aux,
			 void *aux_return );

GLboolean brw_search_cache( struct brw_cache *cache,
			    const void *key,
			    GLuint key_size,
			    void *aux_return,
			    GLuint *offset_return);

void brw_init_caches( struct brw_context *brw );
void brw_destroy_caches( struct brw_context *brw );
d125 1
a125 1
#define BRW_BATCH_STRUCT(brw, s) intel_batchbuffer_data( brw->intel.batch, (s), sizeof(*(s)), 0)
a130 1

a131 23


/***********************************************************************
 * brw_state_pool.c
 */
void brw_init_pools( struct brw_context *brw );
void brw_destroy_pools( struct brw_context *brw );

GLboolean brw_pool_alloc( struct brw_mem_pool *pool,
			  GLuint size,
			  GLuint alignment,
			  GLuint *offset_return);

void brw_pool_fence( struct brw_context *brw,
		     struct brw_mem_pool *pool,
		     GLuint fence );


void brw_pool_check_wrap( struct brw_context *brw,
			  struct brw_mem_pool *pool );

void brw_clear_all_caches( struct brw_context *brw );
void brw_invalidate_pools( struct brw_context *brw );
@


1.1
log
@Initial revision
@
text
@d53 1
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@a37 75
static INLINE void
brw_add_validated_bo(struct brw_context *brw, drm_intel_bo *bo)
{
   assert(brw->state.validated_bo_count < ARRAY_SIZE(brw->state.validated_bos));

   if (bo != NULL) {
      drm_intel_bo_reference(bo);
      brw->state.validated_bos[brw->state.validated_bo_count++] = bo;
   }
};

extern const struct brw_tracked_state brw_blend_constant_color;
extern const struct brw_tracked_state brw_cc_unit;
extern const struct brw_tracked_state brw_check_fallback;
extern const struct brw_tracked_state brw_clip_prog;
extern const struct brw_tracked_state brw_clip_unit;
extern const struct brw_tracked_state brw_vs_constants;
extern const struct brw_tracked_state brw_wm_constants;
extern const struct brw_tracked_state brw_constant_buffer;
extern const struct brw_tracked_state brw_curbe_offsets;
extern const struct brw_tracked_state brw_invarient_state;
extern const struct brw_tracked_state brw_gs_prog;
extern const struct brw_tracked_state brw_gs_unit;
extern const struct brw_tracked_state brw_line_stipple;
extern const struct brw_tracked_state brw_aa_line_parameters;
extern const struct brw_tracked_state brw_pipelined_state_pointers;
extern const struct brw_tracked_state brw_binding_table_pointers;
extern const struct brw_tracked_state brw_depthbuffer;
extern const struct brw_tracked_state brw_polygon_stipple_offset;
extern const struct brw_tracked_state brw_polygon_stipple;
extern const struct brw_tracked_state brw_program_parameters;
extern const struct brw_tracked_state brw_recalculate_urb_fence;
extern const struct brw_tracked_state brw_sf_prog;
extern const struct brw_tracked_state brw_sf_unit;
extern const struct brw_tracked_state brw_sf_vp;
extern const struct brw_tracked_state brw_state_base_address;
extern const struct brw_tracked_state brw_urb_fence;
extern const struct brw_tracked_state brw_vertex_state;
extern const struct brw_tracked_state brw_vs_surfaces;
extern const struct brw_tracked_state brw_vs_prog;
extern const struct brw_tracked_state brw_vs_unit;
extern const struct brw_tracked_state brw_wm_input_sizes;
extern const struct brw_tracked_state brw_wm_prog;
extern const struct brw_tracked_state brw_wm_samplers;
extern const struct brw_tracked_state brw_wm_constant_surface;
extern const struct brw_tracked_state brw_wm_surfaces;
extern const struct brw_tracked_state brw_wm_binding_table;
extern const struct brw_tracked_state brw_wm_unit;

extern const struct brw_tracked_state brw_psp_urb_cbs;

extern const struct brw_tracked_state brw_pipe_control;

extern const struct brw_tracked_state brw_drawing_rect;
extern const struct brw_tracked_state brw_indices;
extern const struct brw_tracked_state brw_vertices;
extern const struct brw_tracked_state brw_index_buffer;
extern const struct brw_tracked_state gen6_binding_table_pointers;
extern const struct brw_tracked_state gen6_blend_state;
extern const struct brw_tracked_state gen6_cc_state_pointers;
extern const struct brw_tracked_state gen6_clip_state;
extern const struct brw_tracked_state gen6_clip_vp;
extern const struct brw_tracked_state gen6_color_calc_state;
extern const struct brw_tracked_state gen6_depth_stencil_state;
extern const struct brw_tracked_state gen6_gs_state;
extern const struct brw_tracked_state gen6_sampler_state;
extern const struct brw_tracked_state gen6_scissor_state;
extern const struct brw_tracked_state gen6_scissor_state_pointers;
extern const struct brw_tracked_state gen6_sf_state;
extern const struct brw_tracked_state gen6_sf_vp;
extern const struct brw_tracked_state gen6_urb;
extern const struct brw_tracked_state gen6_viewport_state;
extern const struct brw_tracked_state gen6_vs_state;
extern const struct brw_tracked_state gen6_wm_constants;
extern const struct brw_tracked_state gen6_wm_state;
d39 43
a81 8
/***********************************************************************
 * brw_state.c
 */
void brw_validate_state(struct brw_context *brw);
void brw_upload_state(struct brw_context *brw);
void brw_init_state(struct brw_context *brw);
void brw_destroy_state(struct brw_context *brw);
void brw_clear_validated_bos(struct brw_context *brw);
d86 20
a105 34
drm_intel_bo *brw_cache_data(struct brw_cache *cache,
		       enum brw_cache_id cache_id,
		       const void *data,
		       GLuint size);

drm_intel_bo *brw_upload_cache(struct brw_cache *cache,
			       enum brw_cache_id cache_id,
			       const void *key,
			       GLuint key_sz,
			       drm_intel_bo **reloc_bufs,
			       GLuint nr_reloc_bufs,
			       const void *data,
			       GLuint data_sz);

drm_intel_bo *brw_upload_cache_with_auxdata(struct brw_cache *cache,
					    enum brw_cache_id cache_id,
					    const void *key,
					    GLuint key_sz,
					    drm_intel_bo **reloc_bufs,
					    GLuint nr_reloc_bufs,
					    const void *data,
					    GLuint data_sz,
					    const void *aux,
					    GLuint aux_sz,
					    void *aux_return);

drm_intel_bo *brw_search_cache( struct brw_cache *cache,
			  enum brw_cache_id cache_id,
			  const void *key,
			  GLuint key_size,
			  drm_intel_bo **reloc_bufs,
			  GLuint nr_reloc_bufs,
			  void *aux_return);
void brw_state_cache_check_size( struct brw_context *brw );
d113 1
a113 2
#define BRW_BATCH_STRUCT(brw, s) intel_batchbuffer_data(brw->intel.batch, (s), \
							sizeof(*(s)), false)
d119 1
d121 24
a144 13
void brw_clear_batch_cache( struct brw_context *brw );
void *brw_state_batch(struct brw_context *brw,
		      int size,
		      int alignment,
		      drm_intel_bo **out_bo,
		      uint32_t *out_offset);

/* brw_wm_surface_state.c */
void brw_create_constant_surface(struct brw_context *brw,
				 drm_intel_bo *bo,
				 int width,
				 drm_intel_bo **out_bo,
				 uint32_t *out_offset);
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d38 10
a47 5
#ifdef __cplusplus
extern "C" {
#endif

enum intel_msaa_layout;
a49 1
extern const struct brw_tracked_state brw_cc_vp;
d51 1
d54 2
a55 2
extern const struct brw_tracked_state brw_vs_pull_constants;
extern const struct brw_tracked_state brw_wm_pull_constants;
d58 1
a58 1
extern const struct brw_tracked_state brw_invariant_state;
d63 1
d68 1
a69 1
extern const struct brw_tracked_state brw_samplers;
d75 2
a77 1
extern const struct brw_tracked_state brw_vs_ubo_surfaces;
d79 1
d81 3
a83 2
extern const struct brw_tracked_state brw_renderbuffer_surfaces;
extern const struct brw_tracked_state brw_texture_surfaces;
a84 2
extern const struct brw_tracked_state brw_vs_binding_table;
extern const struct brw_tracked_state brw_wm_ubo_surfaces;
d89 2
a102 3
extern const struct brw_tracked_state gen6_gs_binding_table;
extern const struct brw_tracked_state gen6_multisample_state;
extern const struct brw_tracked_state gen6_renderbuffer_surfaces;
d105 1
a105 1
extern const struct brw_tracked_state gen6_sol_surface;
a109 1
extern const struct brw_tracked_state gen6_vs_push_constants;
d111 1
a111 1
extern const struct brw_tracked_state gen6_wm_push_constants;
a112 20
extern const struct brw_tracked_state gen7_depthbuffer;
extern const struct brw_tracked_state gen7_cc_viewport_state_pointer;
extern const struct brw_tracked_state gen7_clip_state;
extern const struct brw_tracked_state gen7_disable_stages;
extern const struct brw_tracked_state gen7_ps_state;
extern const struct brw_tracked_state gen7_samplers;
extern const struct brw_tracked_state gen7_sbe_state;
extern const struct brw_tracked_state gen7_sf_clip_viewport;
extern const struct brw_tracked_state gen7_sf_state;
extern const struct brw_tracked_state gen7_sol_state;
extern const struct brw_tracked_state gen7_urb;
extern const struct brw_tracked_state gen7_vs_state;
extern const struct brw_tracked_state gen7_wm_state;
extern const struct brw_tracked_state haswell_cut_index;

/* brw_misc_state.c */
void brw_upload_invariant_state(struct brw_context *brw);
uint32_t
brw_depthbuffer_format(struct brw_context *brw);

d117 1
d121 1
d126 33
a158 16

void brw_upload_cache(struct brw_cache *cache,
		      enum brw_cache_id cache_id,
		      const void *key,
		      GLuint key_sz,
		      const void *data,
		      GLuint data_sz,
		      const void *aux,
		      GLuint aux_sz,
		      uint32_t *out_offset, void *out_aux);

bool brw_search_cache(struct brw_cache *cache,
		      enum brw_cache_id cache_id,
		      const void *key,
		      GLuint key_size,
		      uint32_t *inout_offset, void *out_aux);
d167 1
a167 1
#define BRW_BATCH_STRUCT(brw, s) intel_batchbuffer_data(brw, (s), \
d169 1
d171 5
a176 1
		      enum state_struct_type type,
d179 1
d183 5
a187 46
void gen4_init_vtable_surface_functions(struct brw_context *brw);
uint32_t brw_get_surface_tiling_bits(uint32_t tiling);
uint32_t brw_get_surface_num_multisamples(unsigned num_samples);

uint32_t brw_format_for_mesa_format(gl_format mesa_format);

GLuint translate_tex_target(GLenum target);

GLuint translate_tex_format(struct brw_context *brw,
                            gl_format mesa_format,
			    GLenum depth_mode,
			    GLenum srgb_decode);

int brw_get_texture_swizzle(const struct gl_context *ctx,
                            const struct gl_texture_object *t);

/* gen7_wm_surface_state.c */
uint32_t gen7_surface_tiling_mode(uint32_t tiling);
uint32_t gen7_surface_msaa_bits(unsigned num_samples, enum intel_msaa_layout l);
void gen7_set_surface_mcs_info(struct brw_context *brw,
                               uint32_t *surf,
                               uint32_t surf_offset,
                               const struct intel_mipmap_tree *mcs_mt,
                               bool is_render_target);
void gen7_check_surface_setup(uint32_t *surf, bool is_render_target);
void gen7_init_vtable_surface_functions(struct brw_context *brw);
void gen7_create_shader_time_surface(struct brw_context *brw,
                                     uint32_t *out_offset);

/* brw_wm_sampler_state.c */
uint32_t translate_wrap_mode(GLenum wrap, bool using_nearest);
void upload_default_color(struct brw_context *brw,
			  struct gl_sampler_object *sampler,
			  int unit, int ss_index);

/* gen6_sf_state.c */
uint32_t
get_attr_override(const struct brw_vue_map *vue_map, int urb_entry_read_offset,
                  int fs_attr, bool two_side_color, uint32_t *max_source_attr);

/* gen7_urb.c */
void gen7_allocate_push_constants(struct brw_context *brw);

#ifdef __cplusplus
}
#endif
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d31 1
a31 1

a49 1
extern const struct brw_tracked_state brw_gs_pull_constants;
d54 1
a54 2
extern const struct brw_tracked_state brw_fs_samplers;
extern const struct brw_tracked_state brw_ff_gs_prog;
d63 1
a69 2
extern const struct brw_tracked_state brw_vs_samplers;
extern const struct brw_tracked_state brw_gs_samplers;
a70 3
extern const struct brw_tracked_state brw_vs_abo_surfaces;
extern const struct brw_tracked_state brw_gs_ubo_surfaces;
extern const struct brw_tracked_state brw_gs_abo_surfaces;
a71 1
extern const struct brw_tracked_state brw_gs_prog;
a75 1
extern const struct brw_tracked_state brw_gs_binding_table;
a77 1
extern const struct brw_tracked_state brw_wm_abo_surfaces;
a78 1
extern const struct brw_tracked_state brw_interpolation_map;
a111 2
extern const struct brw_tracked_state gen7_gs_push_constants;
extern const struct brw_tracked_state gen7_gs_state;
d113 1
a113 1
extern const struct brw_tracked_state gen7_push_constant_space;
a121 19
extern const struct brw_tracked_state gen8_blend_state;
extern const struct brw_tracked_state gen8_disable_stages;
extern const struct brw_tracked_state gen8_gs_state;
extern const struct brw_tracked_state gen8_index_buffer;
extern const struct brw_tracked_state gen8_multisample_state;
extern const struct brw_tracked_state gen8_ps_blend;
extern const struct brw_tracked_state gen8_ps_extra;
extern const struct brw_tracked_state gen8_ps_state;
extern const struct brw_tracked_state gen8_wm_depth_stencil;
extern const struct brw_tracked_state gen8_wm_state;
extern const struct brw_tracked_state gen8_raster_state;
extern const struct brw_tracked_state gen8_sbe_state;
extern const struct brw_tracked_state gen8_sf_state;
extern const struct brw_tracked_state gen8_state_base_address;
extern const struct brw_tracked_state gen8_sol_state;
extern const struct brw_tracked_state gen8_sf_clip_viewport;
extern const struct brw_tracked_state gen8_vertices;
extern const struct brw_tracked_state gen8_vf_topology;
extern const struct brw_tracked_state gen8_vs_state;
a132 1
void brw_clear_dirty_bits(struct brw_context *brw);
d163 2
a164 2
#define BRW_BATCH_STRUCT(brw, s) \
   intel_batchbuffer_data(brw, (s), sizeof(*(s)), RENDER_RING)
d177 1
a177 7
void brw_configure_w_tiled(const struct intel_mipmap_tree *mt,
                           bool is_render_target,
                           unsigned *width, unsigned *height,
                           unsigned *pitch, uint32_t *tiling,
                           unsigned *format);

uint32_t brw_format_for_mesa_format(mesa_format mesa_format);
d182 2
a183 1
                            mesa_format mesa_format,
a189 1
unsigned brw_swizzle_to_scs(GLenum swizzle, bool need_green_to_blue);
d199 2
a200 7

/* gen7_sol_state.c */
void gen7_upload_3dstate_so_decl_list(struct brw_context *brw,
                                      const struct brw_vue_map *vue_map);

/* gen8_surface_state.c */
void gen8_init_vtable_surface_functions(struct brw_context *brw);
d203 1
a203 2
uint32_t translate_wrap_mode(struct brw_context *brw,
                             GLenum wrap, bool using_nearest);
d206 1
a206 3
			  int unit,
                          uint32_t *sdc_offset);
void gen4_init_vtable_sampler_functions(struct brw_context *brw);
d208 4
a211 2
/* gen7_sampler_state.c */
void gen7_init_vtable_sampler_functions(struct brw_context *brw);
d213 2
a214 21
/* gen6_sf_state.c */
void
calculate_attr_overrides(const struct brw_context *brw,
                         uint16_t *attr_overrides,
                         uint32_t *point_sprite_enables,
                         uint32_t *flat_enables,
                         uint32_t *urb_entry_read_length);

/* brw_vs_surface_state.c */
void
brw_upload_vec4_pull_constants(struct brw_context *brw,
                               GLbitfield brw_new_constbuf,
                               const struct gl_program *prog,
                               struct brw_stage_state *stage_state,
                               const struct brw_vec4_prog_data *prog_data);

/* gen7_vs_state.c */
void
gen7_upload_constant_state(struct brw_context *brw,
                           const struct brw_stage_state *stage_state,
                           bool active, unsigned opcode);
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@a103 1
extern const struct brw_tracked_state gen6_gs_push_constants;
a138 1
extern const struct brw_tracked_state gen8_pma_fix;
d199 1
a199 1
		      enum aub_state_struct_type type,
d245 11
a255 19
/* brw_sampler_state.c */
void brw_emit_sampler_state(struct brw_context *brw,
                            uint32_t *sampler_state,
                            uint32_t batch_offset_for_sampler_state,
                            unsigned min_filter,
                            unsigned mag_filter,
                            unsigned mip_filter,
                            unsigned max_anisotropy,
                            unsigned address_rounding,
                            unsigned wrap_s,
                            unsigned wrap_t,
                            unsigned wrap_r,
                            unsigned min_lod,
                            unsigned max_lod,
                            int lod_bias,
                            unsigned base_level,
                            unsigned shadow_function,
                            bool non_normalized_coordinates,
                            uint32_t border_color_offset);
a264 3
/* gen6_surface_state.c */
void gen6_init_vtable_surface_functions(struct brw_context *brw);

d267 5
a271 6
brw_upload_pull_constants(struct brw_context *brw,
                          GLbitfield brw_new_constbuf,
                          const struct gl_program *prog,
                          struct brw_stage_state *stage_state,
                          const struct brw_stage_prog_data *prog_data,
                          bool dword_pitch);
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d104 1
d140 1
d201 1
a201 1
		      enum state_struct_type type,
d247 19
a265 11
/* brw_wm_sampler_state.c */
uint32_t translate_wrap_mode(struct brw_context *brw,
                             GLenum wrap, bool using_nearest);
void upload_default_color(struct brw_context *brw,
			  struct gl_sampler_object *sampler,
			  int unit,
                          uint32_t *sdc_offset);
void gen4_init_vtable_sampler_functions(struct brw_context *brw);

/* gen7_sampler_state.c */
void gen7_init_vtable_sampler_functions(struct brw_context *brw);
d275 3
d280 6
a285 5
brw_upload_vec4_pull_constants(struct brw_context *brw,
                               GLbitfield brw_new_constbuf,
                               const struct gl_program *prog,
                               struct brw_stage_state *stage_state,
                               const struct brw_vec4_prog_data *prog_data);
@


