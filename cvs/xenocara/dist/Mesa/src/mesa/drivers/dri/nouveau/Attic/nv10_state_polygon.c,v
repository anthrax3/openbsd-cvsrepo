head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2013.09.05.14.04.51;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.22;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.55;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "nouveau_driver.h"
#include "nouveau_context.h"
#include "nouveau_gldefs.h"
#include "nouveau_util.h"
#include "nv10_3d.xml.h"
#include "nv10_driver.h"

void
nv10_emit_cull_face(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);
	GLenum mode = ctx->Polygon.CullFaceMode;

	BEGIN_NV04(push, NV10_3D(CULL_FACE_ENABLE), 1);
	PUSH_DATAb(push, ctx->Polygon.CullFlag);

	BEGIN_NV04(push, NV10_3D(CULL_FACE), 1);
	PUSH_DATA (push, (mode == GL_FRONT ? NV10_3D_CULL_FACE_FRONT :
			mode == GL_BACK ? NV10_3D_CULL_FACE_BACK :
			NV10_3D_CULL_FACE_FRONT_AND_BACK));
}

void
nv10_emit_front_face(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	BEGIN_NV04(push, NV10_3D(FRONT_FACE), 1);
	PUSH_DATA (push, ctx->Polygon.FrontFace == GL_CW ?
		 NV10_3D_FRONT_FACE_CW : NV10_3D_FRONT_FACE_CCW);
}

void
nv10_emit_line_mode(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);
	GLboolean smooth = ctx->Line.SmoothFlag &&
		ctx->Hint.LineSmooth == GL_NICEST;

	BEGIN_NV04(push, NV10_3D(LINE_WIDTH), 1);
	PUSH_DATA (push, MAX2(smooth ? 0 : 1,
			    ctx->Line.Width) * 8);
	BEGIN_NV04(push, NV10_3D(LINE_SMOOTH_ENABLE), 1);
	PUSH_DATAb(push, smooth);
}

void
nv10_emit_line_stipple(struct gl_context *ctx, int emit)
{
}

void
nv10_emit_point_mode(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	BEGIN_NV04(push, NV10_3D(POINT_SIZE), 1);
	PUSH_DATA (push, (uint32_t)(ctx->Point.Size * 8));

	BEGIN_NV04(push, NV10_3D(POINT_SMOOTH_ENABLE), 1);
	PUSH_DATAb(push, ctx->Point.SmoothFlag);
}

void
nv10_emit_polygon_mode(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	BEGIN_NV04(push, NV10_3D(POLYGON_MODE_FRONT), 2);
	PUSH_DATA (push, nvgl_polygon_mode(ctx->Polygon.FrontMode));
	PUSH_DATA (push, nvgl_polygon_mode(ctx->Polygon.BackMode));

	BEGIN_NV04(push, NV10_3D(POLYGON_SMOOTH_ENABLE), 1);
	PUSH_DATAb(push, ctx->Polygon.SmoothFlag);
}

void
nv10_emit_polygon_offset(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);

	BEGIN_NV04(push, NV10_3D(POLYGON_OFFSET_POINT_ENABLE), 3);
	PUSH_DATAb(push, ctx->Polygon.OffsetPoint);
	PUSH_DATAb(push, ctx->Polygon.OffsetLine);
	PUSH_DATAb(push, ctx->Polygon.OffsetFill);

	BEGIN_NV04(push, NV10_3D(POLYGON_OFFSET_FACTOR), 2);
	PUSH_DATAf(push, ctx->Polygon.OffsetFactor);
	PUSH_DATAf(push, ctx->Polygon.OffsetUnits);
}

void
nv10_emit_polygon_stipple(struct gl_context *ctx, int emit)
{
}
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Merge Mesa 7.10.3
@
text
@d37 1
a37 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d40 2
a41 2
	BEGIN_RING(chan, celsius, NV10_3D_CULL_FACE_ENABLE, 1);
	OUT_RINGb(chan, ctx->Polygon.CullFlag);
d43 2
a44 2
	BEGIN_RING(chan, celsius, NV10_3D_CULL_FACE, 1);
	OUT_RING(chan, (mode == GL_FRONT ? NV10_3D_CULL_FACE_FRONT :
d52 1
a52 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d54 2
a55 2
	BEGIN_RING(chan, celsius, NV10_3D_FRONT_FACE, 1);
	OUT_RING(chan, ctx->Polygon.FrontFace == GL_CW ?
d62 1
a62 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d66 2
a67 2
	BEGIN_RING(chan, celsius, NV10_3D_LINE_WIDTH, 1);
	OUT_RING(chan, MAX2(smooth ? 0 : 1,
d69 2
a70 2
	BEGIN_RING(chan, celsius, NV10_3D_LINE_SMOOTH_ENABLE, 1);
	OUT_RINGb(chan, smooth);
d81 1
a81 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d83 2
a84 2
	BEGIN_RING(chan, celsius, NV10_3D_POINT_SIZE, 1);
	OUT_RING(chan, (uint32_t)(ctx->Point.Size * 8));
d86 2
a87 2
	BEGIN_RING(chan, celsius, NV10_3D_POINT_SMOOTH_ENABLE, 1);
	OUT_RINGb(chan, ctx->Point.SmoothFlag);
d93 1
a93 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d95 3
a97 3
	BEGIN_RING(chan, celsius, NV10_3D_POLYGON_MODE_FRONT, 2);
	OUT_RING(chan, nvgl_polygon_mode(ctx->Polygon.FrontMode));
	OUT_RING(chan, nvgl_polygon_mode(ctx->Polygon.BackMode));
d99 2
a100 2
	BEGIN_RING(chan, celsius, NV10_3D_POLYGON_SMOOTH_ENABLE, 1);
	OUT_RINGb(chan, ctx->Polygon.SmoothFlag);
d106 1
a106 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *celsius = context_eng3d(ctx);
d108 8
a115 8
	BEGIN_RING(chan, celsius, NV10_3D_POLYGON_OFFSET_POINT_ENABLE, 3);
	OUT_RINGb(chan, ctx->Polygon.OffsetPoint);
	OUT_RINGb(chan, ctx->Polygon.OffsetLine);
	OUT_RINGb(chan, ctx->Polygon.OffsetFill);

	BEGIN_RING(chan, celsius, NV10_3D_POLYGON_OFFSET_FACTOR, 2);
	OUT_RINGf(chan, ctx->Polygon.OffsetFactor);
	OUT_RINGf(chan, ctx->Polygon.OffsetUnits);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d30 2
a31 1
#include "nouveau_class.h"
d35 1
a35 1
nv10_emit_cull_face(GLcontext *ctx, int emit)
d41 2
a42 2
	BEGIN_RING(chan, celsius, NV10TCL_CULL_FACE_ENABLE, 1);
	OUT_RING(chan, ctx->Polygon.CullFlag ? 1 : 0);
d44 4
a47 4
	BEGIN_RING(chan, celsius, NV10TCL_CULL_FACE, 1);
	OUT_RING(chan, (mode == GL_FRONT ? NV10TCL_CULL_FACE_FRONT :
			mode == GL_BACK ? NV10TCL_CULL_FACE_BACK :
			NV10TCL_CULL_FACE_FRONT_AND_BACK));
d51 1
a51 1
nv10_emit_front_face(GLcontext *ctx, int emit)
d56 1
a56 1
	BEGIN_RING(chan, celsius, NV10TCL_FRONT_FACE, 1);
d58 1
a58 1
		 NV10TCL_FRONT_FACE_CW : NV10TCL_FRONT_FACE_CCW);
d62 1
a62 1
nv10_emit_line_mode(GLcontext *ctx, int emit)
d69 1
a69 1
	BEGIN_RING(chan, celsius, NV10TCL_LINE_WIDTH, 1);
d72 2
a73 2
	BEGIN_RING(chan, celsius, NV10TCL_LINE_SMOOTH_ENABLE, 1);
	OUT_RING(chan, smooth ? 1 : 0);
d77 1
a77 1
nv10_emit_line_stipple(GLcontext *ctx, int emit)
d82 1
a82 1
nv10_emit_point_mode(GLcontext *ctx, int emit)
d87 1
a87 1
	BEGIN_RING(chan, celsius, NV10TCL_POINT_SIZE, 1);
d90 2
a91 2
	BEGIN_RING(chan, celsius, NV10TCL_POINT_SMOOTH_ENABLE, 1);
	OUT_RING(chan, ctx->Point.SmoothFlag ? 1 : 0);
d95 1
a95 1
nv10_emit_polygon_mode(GLcontext *ctx, int emit)
d100 1
a100 1
	BEGIN_RING(chan, celsius, NV10TCL_POLYGON_MODE_FRONT, 2);
d104 2
a105 2
	BEGIN_RING(chan, celsius, NV10TCL_POLYGON_SMOOTH_ENABLE, 1);
	OUT_RING(chan, ctx->Polygon.SmoothFlag ? 1 : 0);
d109 1
a109 1
nv10_emit_polygon_offset(GLcontext *ctx, int emit)
d114 4
a117 4
	BEGIN_RING(chan, celsius, NV10TCL_POLYGON_OFFSET_POINT_ENABLE, 3);
	OUT_RING(chan, ctx->Polygon.OffsetPoint ? 1 : 0);
	OUT_RING(chan, ctx->Polygon.OffsetLine ? 1 : 0);
	OUT_RING(chan, ctx->Polygon.OffsetFill ? 1 : 0);
d119 1
a119 1
	BEGIN_RING(chan, celsius, NV10TCL_POLYGON_OFFSET_FACTOR, 2);
d125 1
a125 1
nv10_emit_polygon_stipple(GLcontext *ctx, int emit)
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d30 1
a30 2
#include "nouveau_util.h"
#include "nv10_3d.xml.h"
d34 1
a34 1
nv10_emit_cull_face(struct gl_context *ctx, int emit)
d40 2
a41 2
	BEGIN_RING(chan, celsius, NV10_3D_CULL_FACE_ENABLE, 1);
	OUT_RINGb(chan, ctx->Polygon.CullFlag);
d43 4
a46 4
	BEGIN_RING(chan, celsius, NV10_3D_CULL_FACE, 1);
	OUT_RING(chan, (mode == GL_FRONT ? NV10_3D_CULL_FACE_FRONT :
			mode == GL_BACK ? NV10_3D_CULL_FACE_BACK :
			NV10_3D_CULL_FACE_FRONT_AND_BACK));
d50 1
a50 1
nv10_emit_front_face(struct gl_context *ctx, int emit)
d55 1
a55 1
	BEGIN_RING(chan, celsius, NV10_3D_FRONT_FACE, 1);
d57 1
a57 1
		 NV10_3D_FRONT_FACE_CW : NV10_3D_FRONT_FACE_CCW);
d61 1
a61 1
nv10_emit_line_mode(struct gl_context *ctx, int emit)
d68 1
a68 1
	BEGIN_RING(chan, celsius, NV10_3D_LINE_WIDTH, 1);
d71 2
a72 2
	BEGIN_RING(chan, celsius, NV10_3D_LINE_SMOOTH_ENABLE, 1);
	OUT_RINGb(chan, smooth);
d76 1
a76 1
nv10_emit_line_stipple(struct gl_context *ctx, int emit)
d81 1
a81 1
nv10_emit_point_mode(struct gl_context *ctx, int emit)
d86 1
a86 1
	BEGIN_RING(chan, celsius, NV10_3D_POINT_SIZE, 1);
d89 2
a90 2
	BEGIN_RING(chan, celsius, NV10_3D_POINT_SMOOTH_ENABLE, 1);
	OUT_RINGb(chan, ctx->Point.SmoothFlag);
d94 1
a94 1
nv10_emit_polygon_mode(struct gl_context *ctx, int emit)
d99 1
a99 1
	BEGIN_RING(chan, celsius, NV10_3D_POLYGON_MODE_FRONT, 2);
d103 2
a104 2
	BEGIN_RING(chan, celsius, NV10_3D_POLYGON_SMOOTH_ENABLE, 1);
	OUT_RINGb(chan, ctx->Polygon.SmoothFlag);
d108 1
a108 1
nv10_emit_polygon_offset(struct gl_context *ctx, int emit)
d113 4
a116 4
	BEGIN_RING(chan, celsius, NV10_3D_POLYGON_OFFSET_POINT_ENABLE, 3);
	OUT_RINGb(chan, ctx->Polygon.OffsetPoint);
	OUT_RINGb(chan, ctx->Polygon.OffsetLine);
	OUT_RINGb(chan, ctx->Polygon.OffsetFill);
d118 1
a118 1
	BEGIN_RING(chan, celsius, NV10_3D_POLYGON_OFFSET_FACTOR, 2);
d124 1
a124 1
nv10_emit_polygon_stipple(struct gl_context *ctx, int emit)
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d37 2
a38 1
	struct nouveau_pushbuf *push = context_push(ctx);
d41 2
a42 2
	BEGIN_NV04(push, NV10_3D(CULL_FACE_ENABLE), 1);
	PUSH_DATAb(push, ctx->Polygon.CullFlag);
d44 2
a45 2
	BEGIN_NV04(push, NV10_3D(CULL_FACE), 1);
	PUSH_DATA (push, (mode == GL_FRONT ? NV10_3D_CULL_FACE_FRONT :
d53 2
a54 1
	struct nouveau_pushbuf *push = context_push(ctx);
d56 2
a57 2
	BEGIN_NV04(push, NV10_3D(FRONT_FACE), 1);
	PUSH_DATA (push, ctx->Polygon.FrontFace == GL_CW ?
d64 2
a65 1
	struct nouveau_pushbuf *push = context_push(ctx);
d69 2
a70 2
	BEGIN_NV04(push, NV10_3D(LINE_WIDTH), 1);
	PUSH_DATA (push, MAX2(smooth ? 0 : 1,
d72 2
a73 2
	BEGIN_NV04(push, NV10_3D(LINE_SMOOTH_ENABLE), 1);
	PUSH_DATAb(push, smooth);
d84 2
a85 1
	struct nouveau_pushbuf *push = context_push(ctx);
d87 2
a88 2
	BEGIN_NV04(push, NV10_3D(POINT_SIZE), 1);
	PUSH_DATA (push, (uint32_t)(ctx->Point.Size * 8));
d90 2
a91 2
	BEGIN_NV04(push, NV10_3D(POINT_SMOOTH_ENABLE), 1);
	PUSH_DATAb(push, ctx->Point.SmoothFlag);
d97 2
a98 1
	struct nouveau_pushbuf *push = context_push(ctx);
d100 3
a102 3
	BEGIN_NV04(push, NV10_3D(POLYGON_MODE_FRONT), 2);
	PUSH_DATA (push, nvgl_polygon_mode(ctx->Polygon.FrontMode));
	PUSH_DATA (push, nvgl_polygon_mode(ctx->Polygon.BackMode));
d104 2
a105 2
	BEGIN_NV04(push, NV10_3D(POLYGON_SMOOTH_ENABLE), 1);
	PUSH_DATAb(push, ctx->Polygon.SmoothFlag);
d111 2
a112 1
	struct nouveau_pushbuf *push = context_push(ctx);
d114 8
a121 8
	BEGIN_NV04(push, NV10_3D(POLYGON_OFFSET_POINT_ENABLE), 3);
	PUSH_DATAb(push, ctx->Polygon.OffsetPoint);
	PUSH_DATAb(push, ctx->Polygon.OffsetLine);
	PUSH_DATAb(push, ctx->Polygon.OffsetFill);

	BEGIN_NV04(push, NV10_3D(POLYGON_OFFSET_FACTOR), 2);
	PUSH_DATAf(push, ctx->Polygon.OffsetFactor);
	PUSH_DATAf(push, ctx->Polygon.OffsetUnits);
@


