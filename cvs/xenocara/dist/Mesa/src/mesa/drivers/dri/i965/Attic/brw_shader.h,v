head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.4;
commitid	4ry2gvZGMXkCUD2n;

1.4
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.3;
commitid	mcxB0JvoI9gTDYXU;

1.3
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.14.04.20;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.15.37;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.51;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.11.44;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.48.49;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#include <stdint.h>
#include "brw_defines.h"
#include "main/compiler.h"
#include "glsl/ir.h"

#pragma once

enum PACKED register_file {
   BAD_FILE,
   GRF,
   MRF,
   IMM,
   HW_REG, /* a struct brw_reg */
   ATTR,
   UNIFORM, /* prog_data->params[reg] */
};

#ifdef __cplusplus

class backend_instruction : public exec_node {
public:
   bool is_tex() const;
   bool is_math() const;
   bool is_control_flow() const;
   bool can_do_source_mods() const;
   bool can_do_saturate() const;
   bool reads_accumulator_implicitly() const;

   /**
    * True if the instruction has side effects other than writing to
    * its destination registers.  You are expected not to reorder or
    * optimize these out unless you know what you are doing.
    */
   bool has_side_effects() const;

   enum opcode opcode; /* BRW_OPCODE_* or FS_OPCODE_* */

   uint8_t predicate;
   bool predicate_inverse;
   bool writes_accumulator; /**< instruction implicitly writes accumulator */
};

enum instruction_scheduler_mode {
   SCHEDULE_PRE,
   SCHEDULE_PRE_NON_LIFO,
   SCHEDULE_PRE_LIFO,
   SCHEDULE_POST,
};

class backend_visitor : public ir_visitor {
protected:

   backend_visitor(struct brw_context *brw,
                   struct gl_shader_program *shader_prog,
                   struct gl_program *prog,
                   struct brw_stage_prog_data *stage_prog_data,
                   gl_shader_stage stage);

public:

   struct brw_context * const brw;
   struct gl_context * const ctx;
   struct brw_shader * const shader;
   struct gl_shader_program * const shader_prog;
   struct gl_program * const prog;
   struct brw_stage_prog_data * const stage_prog_data;

   /** ralloc context for temporary data used during compile */
   void *mem_ctx;

   /**
    * List of either fs_inst or vec4_instruction (inheriting from
    * backend_instruction)
    */
   exec_list instructions;

   virtual void dump_instruction(backend_instruction *inst) = 0;
   virtual void dump_instructions();

   void assign_common_binding_table_offsets(uint32_t next_binding_table_offset);

   virtual void invalidate_live_intervals() = 0;
};

uint32_t brw_texture_offset(struct gl_context *ctx, ir_constant *offset);

#endif /* __cplusplus */

int brw_type_for_base_type(const struct glsl_type *type);
uint32_t brw_conditional_for_comparison(unsigned int op);
uint32_t brw_math_function(enum opcode op);
const char *brw_instruction_name(enum opcode op);
@


1.5
log
@Merge Mesa 10.2.9
@
text
@@


1.4
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a24 1
#include "brw_reg.h"
a40 2
struct backend_reg
{
a41 5
   bool is_zero() const;
   bool is_one() const;
   bool is_null() const;
   bool is_accumulator() const;
#endif
d43 2
a44 34
   enum register_file file; /**< Register file: GRF, MRF, IMM. */
   enum brw_reg_type type;  /**< Register type: BRW_REGISTER_TYPE_* */

   /**
    * Register number.
    *
    * For GRF, it's a virtual register number until register allocation.
    *
    * For MRF, it's the hardware register.
    */
   uint16_t reg;

   /**
    * Offset within the virtual register.
    *
    * In the scalar backend, this is in units of a float per pixel for pre-
    * register allocation registers (i.e., one register in SIMD8 mode and two
    * registers in SIMD16 mode).
    *
    * For uniforms, this is in units of 1 float.
    */
   int reg_offset;

   struct brw_reg fixed_hw_reg;

   bool negate;
   bool abs;
};

struct cfg_t;
struct bblock_t;

#ifdef __cplusplus
struct backend_instruction : public exec_node {
a50 6
   bool writes_accumulator_implicitly(struct brw_context *brw) const;

   void remove(bblock_t *block);
   void insert_after(bblock_t *block, backend_instruction *inst);
   void insert_before(bblock_t *block, backend_instruction *inst);
   void insert_before(bblock_t *block, exec_list *list);
a57 16
#else
struct backend_instruction {
   struct exec_node link;
#endif
   /** @@{
    * Annotation for the generated IR.  One of the two can be set.
    */
   const void *ir;
   const char *annotation;
   /** @@} */

   uint32_t texture_offset; /**< Texture offset bitfield */
   uint32_t offset; /**< spill/unspill offset */
   uint8_t mlen; /**< SEND message length */
   int8_t base_mrf; /**< First MRF in the SEND message, if mlen is nonzero. */
   uint8_t target; /**< MRT target. */
d60 4
a63 8
   enum brw_conditional_mod conditional_mod; /**< BRW_CONDITIONAL_* */
   enum brw_predicate predicate;
   bool predicate_inverse:1;
   bool writes_accumulator:1; /**< instruction implicitly writes accumulator */
   bool force_writemask_all:1;
   bool no_dd_clear:1;
   bool no_dd_check:1;
   bool saturate:1;
a65 2
#ifdef __cplusplus

a99 4
   cfg_t *cfg;

   gl_shader_stage stage;

a100 1
   virtual void dump_instruction(backend_instruction *inst, FILE *file) = 0;
a101 4
   virtual void dump_instructions(const char *name);

   void calculate_cfg();
   void invalidate_cfg();
d108 1
a108 2
uint32_t brw_texture_offset(struct gl_context *ctx, int *offsets,
                            unsigned num_components);
d112 2
a113 2
enum brw_reg_type brw_type_for_base_type(const struct glsl_type *type);
enum brw_conditional_mod brw_conditional_for_comparison(unsigned int op);
@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d25 1
d42 2
d45 5
d51 34
a84 2
class backend_instruction : public exec_node {
public:
d91 6
d104 16
d122 9
d132 1
a132 4
   uint8_t predicate;
   bool predicate_inverse;
   bool writes_accumulator; /**< instruction implicitly writes accumulator */
};
d168 4
d173 1
d175 4
d185 2
a186 1
uint32_t brw_texture_offset(struct gl_context *ctx, ir_constant *offset);
d190 2
a191 2
int brw_type_for_base_type(const struct glsl_type *type);
uint32_t brw_conditional_for_comparison(unsigned int op);
@


1.2
log
@Merge Mesa 9.2.0
@
text
@d26 1
d31 1
a31 1
enum register_file {
a32 1
   ARF,
d41 2
d45 13
a57 3
   bool is_tex();
   bool is_math();
   bool is_control_flow();
d61 1
a61 1
   uint32_t predicate;
d63 8
d74 8
d84 6
a89 4
   struct brw_context *brw;
   struct gl_context *ctx;
   struct brw_shader *shader;
   struct gl_shader_program *shader_prog;
d101 5
a105 1
   void dump_instructions();
d108 4
a114 1
uint32_t brw_texture_offset(ir_constant *offset);
@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d24 50
d76 3
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@a23 50
#include <stdint.h>
#include "brw_defines.h"
#include "glsl/ir.h"

#pragma once

enum register_file {
   BAD_FILE,
   ARF,
   GRF,
   MRF,
   IMM,
   HW_REG, /* a struct brw_reg */
   ATTR,
   UNIFORM, /* prog_data->params[reg] */
};

class backend_instruction : public exec_node {
public:
   bool is_tex();
   bool is_math();
   bool is_control_flow();

   enum opcode opcode; /* BRW_OPCODE_* or FS_OPCODE_* */

   uint32_t predicate;
   bool predicate_inverse;
};

class backend_visitor : public ir_visitor {
public:

   struct brw_context *brw;
   struct gl_context *ctx;
   struct brw_shader *shader;
   struct gl_shader_program *shader_prog;

   /** ralloc context for temporary data used during compile */
   void *mem_ctx;

   /**
    * List of either fs_inst or vec4_instruction (inheriting from
    * backend_instruction)
    */
   exec_list instructions;

   virtual void dump_instruction(backend_instruction *inst) = 0;
   void dump_instructions();
};

a25 3
uint32_t brw_math_function(enum opcode op);
uint32_t brw_texture_offset(ir_constant *offset);
const char *brw_instruction_name(enum opcode op);
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@a25 1
#include "main/compiler.h"
d30 1
a30 1
enum PACKED register_file {
d32 1
a40 2
#ifdef __cplusplus

d43 3
a45 13
   bool is_tex() const;
   bool is_math() const;
   bool is_control_flow() const;
   bool can_do_source_mods() const;
   bool can_do_saturate() const;
   bool reads_accumulator_implicitly() const;

   /**
    * True if the instruction has side effects other than writing to
    * its destination registers.  You are expected not to reorder or
    * optimize these out unless you know what you are doing.
    */
   bool has_side_effects() const;
d49 1
a49 1
   uint8_t predicate;
a50 8
   bool writes_accumulator; /**< instruction implicitly writes accumulator */
};

enum instruction_scheduler_mode {
   SCHEDULE_PRE,
   SCHEDULE_PRE_NON_LIFO,
   SCHEDULE_PRE_LIFO,
   SCHEDULE_POST,
a53 8
protected:

   backend_visitor(struct brw_context *brw,
                   struct gl_shader_program *shader_prog,
                   struct gl_program *prog,
                   struct brw_stage_prog_data *stage_prog_data,
                   gl_shader_stage stage);

d56 4
a59 6
   struct brw_context * const brw;
   struct gl_context * const ctx;
   struct brw_shader * const shader;
   struct gl_shader_program * const shader_prog;
   struct gl_program * const prog;
   struct brw_stage_prog_data * const stage_prog_data;
d71 1
a71 5
   virtual void dump_instructions();

   void assign_common_binding_table_offsets(uint32_t next_binding_table_offset);

   virtual void invalidate_live_intervals() = 0;
a73 4
uint32_t brw_texture_offset(struct gl_context *ctx, ir_constant *offset);

#endif /* __cplusplus */

d77 1
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@a24 1
#include "brw_reg.h"
a40 2
struct backend_reg
{
a41 5
   bool is_zero() const;
   bool is_one() const;
   bool is_null() const;
   bool is_accumulator() const;
#endif
d43 2
a44 34
   enum register_file file; /**< Register file: GRF, MRF, IMM. */
   enum brw_reg_type type;  /**< Register type: BRW_REGISTER_TYPE_* */

   /**
    * Register number.
    *
    * For GRF, it's a virtual register number until register allocation.
    *
    * For MRF, it's the hardware register.
    */
   uint16_t reg;

   /**
    * Offset within the virtual register.
    *
    * In the scalar backend, this is in units of a float per pixel for pre-
    * register allocation registers (i.e., one register in SIMD8 mode and two
    * registers in SIMD16 mode).
    *
    * For uniforms, this is in units of 1 float.
    */
   int reg_offset;

   struct brw_reg fixed_hw_reg;

   bool negate;
   bool abs;
};

struct cfg_t;
struct bblock_t;

#ifdef __cplusplus
struct backend_instruction : public exec_node {
a50 6
   bool writes_accumulator_implicitly(struct brw_context *brw) const;

   void remove(bblock_t *block);
   void insert_after(bblock_t *block, backend_instruction *inst);
   void insert_before(bblock_t *block, backend_instruction *inst);
   void insert_before(bblock_t *block, exec_list *list);
a57 16
#else
struct backend_instruction {
   struct exec_node link;
#endif
   /** @@{
    * Annotation for the generated IR.  One of the two can be set.
    */
   const void *ir;
   const char *annotation;
   /** @@} */

   uint32_t texture_offset; /**< Texture offset bitfield */
   uint32_t offset; /**< spill/unspill offset */
   uint8_t mlen; /**< SEND message length */
   int8_t base_mrf; /**< First MRF in the SEND message, if mlen is nonzero. */
   uint8_t target; /**< MRT target. */
d60 4
a63 8
   enum brw_conditional_mod conditional_mod; /**< BRW_CONDITIONAL_* */
   enum brw_predicate predicate;
   bool predicate_inverse:1;
   bool writes_accumulator:1; /**< instruction implicitly writes accumulator */
   bool force_writemask_all:1;
   bool no_dd_clear:1;
   bool no_dd_check:1;
   bool saturate:1;
a65 2
#ifdef __cplusplus

a99 4
   cfg_t *cfg;

   gl_shader_stage stage;

a100 1
   virtual void dump_instruction(backend_instruction *inst, FILE *file) = 0;
a101 4
   virtual void dump_instructions(const char *name);

   void calculate_cfg();
   void invalidate_cfg();
d108 1
a108 2
uint32_t brw_texture_offset(struct gl_context *ctx, int *offsets,
                            unsigned num_components);
d112 2
a113 2
enum brw_reg_type brw_type_for_base_type(const struct glsl_type *type);
enum brw_conditional_mod brw_conditional_for_comparison(unsigned int op);
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d25 1
d42 2
d45 5
d51 34
a84 2
class backend_instruction : public exec_node {
public:
d91 6
d104 16
d122 9
d132 1
a132 4
   uint8_t predicate;
   bool predicate_inverse;
   bool writes_accumulator; /**< instruction implicitly writes accumulator */
};
d168 4
d173 1
d175 4
d185 2
a186 1
uint32_t brw_texture_offset(struct gl_context *ctx, ir_constant *offset);
d190 2
a191 2
int brw_type_for_base_type(const struct glsl_type *type);
uint32_t brw_conditional_for_comparison(unsigned int op);
@


