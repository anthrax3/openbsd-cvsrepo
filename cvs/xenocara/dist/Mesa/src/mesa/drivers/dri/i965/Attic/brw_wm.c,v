head	1.14;
access;
symbols
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	v10_2_9:1.1.1.9
	v10_4_3:1.1.1.8
	v10_2_7:1.1.1.7
	OPENBSD_5_6:1.10.0.2
	OPENBSD_5_6_BASE:1.10
	v10_2_3:1.1.1.6
	OPENBSD_5_5:1.9.0.2
	OPENBSD_5_5_BASE:1.9
	v9_2_5:1.1.1.5
	v9_2_3:1.1.1.4
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.4
	v9_2_0:1.1.1.4
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.13;
commitid	TnlogFl9nOv2eaRf;

1.13
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.12;
commitid	4ry2gvZGMXkCUD2n;

1.12
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.11;
commitid	mcxB0JvoI9gTDYXU;

1.11
date	2014.09.07.15.20.07;	author jsg;	state Exp;
branches;
next	1.10;
commitid	7kimTMT4YlQauAIU;

1.10
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.9;
commitid	WPD6rgPryPkvXOr9;

1.9
date	2014.01.19.03.13.15;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2013.09.05.14.04.22;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.48;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.48;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.28.38;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.05.13.15.41;	author jsg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.01.19.03.04.27;	author jsg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.07.09.20.34.52;	author jsg;	state Exp;
branches;
next	1.1.1.7;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.7
date	2014.09.07.15.06.17;	author jsg;	state Exp;
branches;
next	1.1.1.8;
commitid	dm8VnQHhowGHmemJ;

1.1.1.8
date	2015.01.25.14.11.49;	author jsg;	state Exp;
branches;
next	1.1.1.9;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.9
date	2015.02.20.22.48.54;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.14
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */

#include "brw_context.h"
#include "brw_wm.h"
#include "brw_state.h"
#include "main/enums.h"
#include "main/formats.h"
#include "main/fbobject.h"
#include "main/samplerobj.h"
#include "program/prog_parameter.h"
#include "program/program.h"
#include "intel_mipmap_tree.h"

#include "glsl/ralloc.h"

/**
 * Return a bitfield where bit n is set if barycentric interpolation mode n
 * (see enum brw_wm_barycentric_interp_mode) is needed by the fragment shader.
 */
static unsigned
brw_compute_barycentric_interp_modes(struct brw_context *brw,
                                     bool shade_model_flat,
                                     bool persample_shading,
                                     const struct gl_fragment_program *fprog)
{
   unsigned barycentric_interp_modes = 0;
   int attr;

   /* Loop through all fragment shader inputs to figure out what interpolation
    * modes are in use, and set the appropriate bits in
    * barycentric_interp_modes.
    */
   for (attr = 0; attr < VARYING_SLOT_MAX; ++attr) {
      enum glsl_interp_qualifier interp_qualifier =
         fprog->InterpQualifier[attr];
      bool is_centroid = (fprog->IsCentroid & BITFIELD64_BIT(attr)) &&
         !persample_shading;
      bool is_sample = (fprog->IsSample & BITFIELD64_BIT(attr)) ||
         persample_shading;
      bool is_gl_Color = attr == VARYING_SLOT_COL0 || attr == VARYING_SLOT_COL1;

      /* Ignore unused inputs. */
      if (!(fprog->Base.InputsRead & BITFIELD64_BIT(attr)))
         continue;

      /* Ignore WPOS and FACE, because they don't require interpolation. */
      if (attr == VARYING_SLOT_POS || attr == VARYING_SLOT_FACE)
         continue;

      /* Determine the set (or sets) of barycentric coordinates needed to
       * interpolate this variable.  Note that when
       * brw->needs_unlit_centroid_workaround is set, centroid interpolation
       * uses PIXEL interpolation for unlit pixels and CENTROID interpolation
       * for lit pixels, so we need both sets of barycentric coordinates.
       */
      if (interp_qualifier == INTERP_QUALIFIER_NOPERSPECTIVE) {
         if (is_centroid) {
            barycentric_interp_modes |=
               1 << BRW_WM_NONPERSPECTIVE_CENTROID_BARYCENTRIC;
         } else if (is_sample) {
            barycentric_interp_modes |=
               1 << BRW_WM_NONPERSPECTIVE_SAMPLE_BARYCENTRIC;
         }
         if ((!is_centroid && !is_sample) ||
             brw->needs_unlit_centroid_workaround) {
            barycentric_interp_modes |=
               1 << BRW_WM_NONPERSPECTIVE_PIXEL_BARYCENTRIC;
         }
      } else if (interp_qualifier == INTERP_QUALIFIER_SMOOTH ||
                 (!(shade_model_flat && is_gl_Color) &&
                  interp_qualifier == INTERP_QUALIFIER_NONE)) {
         if (is_centroid) {
            barycentric_interp_modes |=
               1 << BRW_WM_PERSPECTIVE_CENTROID_BARYCENTRIC;
         } else if (is_sample) {
            barycentric_interp_modes |=
               1 << BRW_WM_PERSPECTIVE_SAMPLE_BARYCENTRIC;
         }
         if ((!is_centroid && !is_sample) ||
             brw->needs_unlit_centroid_workaround) {
            barycentric_interp_modes |=
               1 << BRW_WM_PERSPECTIVE_PIXEL_BARYCENTRIC;
         }
      }
   }

   return barycentric_interp_modes;
}

bool
brw_wm_prog_data_compare(const void *in_a, const void *in_b)
{
   const struct brw_wm_prog_data *a = in_a;
   const struct brw_wm_prog_data *b = in_b;

   /* Compare the base structure. */
   if (!brw_stage_prog_data_compare(&a->base, &b->base))
      return false;

   /* Compare the rest of the structure. */
   const unsigned offset = sizeof(struct brw_stage_prog_data);
   if (memcmp(((char *) a) + offset, ((char *) b) + offset,
              sizeof(struct brw_wm_prog_data) - offset))
      return false;

   return true;
}

/**
 * All Mesa program -> GPU code generation goes through this function.
 * Depending on the instructions used (i.e. flow control instructions)
 * we'll use one of two code generators.
 */
bool do_wm_prog(struct brw_context *brw,
		struct gl_shader_program *prog,
		struct brw_fragment_program *fp,
		struct brw_wm_prog_key *key)
{
   struct gl_context *ctx = &brw->ctx;
   struct brw_wm_compile *c;
   const GLuint *program;
   struct gl_shader *fs = NULL;
   GLuint program_size;

   if (prog)
      fs = prog->_LinkedShaders[MESA_SHADER_FRAGMENT];

   c = rzalloc(NULL, struct brw_wm_compile);

   /* Allocate the references to the uniforms that will end up in the
    * prog_data associated with the compiled program, and which will be freed
    * by the state cache.
    */
   int param_count;
   if (fs) {
      param_count = fs->num_uniform_components;
   } else {
      param_count = fp->program.Base.Parameters->NumParameters * 4;
   }
   /* The backend also sometimes adds params for texture size. */
   param_count += 2 * ctx->Const.Program[MESA_SHADER_FRAGMENT].MaxTextureImageUnits;
   c->prog_data.base.param = rzalloc_array(NULL, const float *, param_count);
   c->prog_data.base.pull_param =
      rzalloc_array(NULL, const float *, param_count);
   c->prog_data.base.nr_params = param_count;

   memcpy(&c->key, key, sizeof(*key));

   c->prog_data.barycentric_interp_modes =
      brw_compute_barycentric_interp_modes(brw, c->key.flat_shade,
                                           c->key.persample_shading,
                                           &fp->program);

   program = brw_wm_fs_emit(brw, c, &fp->program, prog, &program_size);
   if (program == NULL)
      return false;

   /* Scratch space is used for register spilling */
   if (c->last_scratch) {
      perf_debug("Fragment shader triggered register spilling.  "
                 "Try reducing the number of live scalar values to "
                 "improve performance.\n");

      c->prog_data.total_scratch = brw_get_scratch_size(c->last_scratch);

      brw_get_scratch_bo(brw, &brw->wm.base.scratch_bo,
			 c->prog_data.total_scratch * brw->max_wm_threads);
   }

   if (unlikely(INTEL_DEBUG & DEBUG_WM))
      fprintf(stderr, "\n");

   brw_upload_cache(&brw->cache, BRW_WM_PROG,
		    &c->key, sizeof(c->key),
		    program, program_size,
		    &c->prog_data, sizeof(c->prog_data),
		    &brw->wm.base.prog_offset, &brw->wm.prog_data);

   ralloc_free(c);

   return true;
}

static bool
key_debug(struct brw_context *brw, const char *name, int a, int b)
{
   if (a != b) {
      perf_debug("  %s %d->%d\n", name, a, b);
      return true;
   } else {
      return false;
   }
}

bool
brw_debug_recompile_sampler_key(struct brw_context *brw,
                                const struct brw_sampler_prog_key_data *old_key,
                                const struct brw_sampler_prog_key_data *key)
{
   bool found = false;

   for (unsigned int i = 0; i < MAX_SAMPLERS; i++) {
      found |= key_debug(brw, "EXT_texture_swizzle or DEPTH_TEXTURE_MODE",
                         old_key->swizzles[i], key->swizzles[i]);
   }
   found |= key_debug(brw, "GL_CLAMP enabled on any texture unit's 1st coordinate",
                      old_key->gl_clamp_mask[0], key->gl_clamp_mask[0]);
   found |= key_debug(brw, "GL_CLAMP enabled on any texture unit's 2nd coordinate",
                      old_key->gl_clamp_mask[1], key->gl_clamp_mask[1]);
   found |= key_debug(brw, "GL_CLAMP enabled on any texture unit's 3rd coordinate",
                      old_key->gl_clamp_mask[2], key->gl_clamp_mask[2]);
   found |= key_debug(brw, "gather channel quirk on any texture unit",
                      old_key->gather_channel_quirk_mask, key->gather_channel_quirk_mask);

   return found;
}

void
brw_wm_debug_recompile(struct brw_context *brw,
                       struct gl_shader_program *prog,
                       const struct brw_wm_prog_key *key)
{
   struct brw_cache_item *c = NULL;
   const struct brw_wm_prog_key *old_key = NULL;
   bool found = false;

   perf_debug("Recompiling fragment shader for program %d\n", prog->Name);

   for (unsigned int i = 0; i < brw->cache.size; i++) {
      for (c = brw->cache.items[i]; c; c = c->next) {
         if (c->cache_id == BRW_WM_PROG) {
            old_key = c->key;

            if (old_key->program_string_id == key->program_string_id)
               break;
         }
      }
      if (c)
         break;
   }

   if (!c) {
      perf_debug("  Didn't find previous compile in the shader cache for debug\n");
      return;
   }

   found |= key_debug(brw, "alphatest, computed depth, depth test, or "
                      "depth write",
                      old_key->iz_lookup, key->iz_lookup);
   found |= key_debug(brw, "depth statistics",
                      old_key->stats_wm, key->stats_wm);
   found |= key_debug(brw, "flat shading",
                      old_key->flat_shade, key->flat_shade);
   found |= key_debug(brw, "per-sample shading",
                      old_key->persample_shading, key->persample_shading);
   found |= key_debug(brw, "per-sample shading and 2x MSAA",
                      old_key->persample_2x, key->persample_2x);
   found |= key_debug(brw, "number of color buffers",
                      old_key->nr_color_regions, key->nr_color_regions);
   found |= key_debug(brw, "MRT alpha test or alpha-to-coverage",
                      old_key->replicate_alpha, key->replicate_alpha);
   found |= key_debug(brw, "rendering to FBO",
                      old_key->render_to_fbo, key->render_to_fbo);
   found |= key_debug(brw, "fragment color clamping",
                      old_key->clamp_fragment_color, key->clamp_fragment_color);
   found |= key_debug(brw, "line smoothing",
                      old_key->line_aa, key->line_aa);
   found |= key_debug(brw, "renderbuffer height",
                      old_key->drawable_height, key->drawable_height);
   found |= key_debug(brw, "input slots valid",
                      old_key->input_slots_valid, key->input_slots_valid);
   found |= key_debug(brw, "mrt alpha test function",
                      old_key->alpha_test_func, key->alpha_test_func);
   found |= key_debug(brw, "mrt alpha test reference value",
                      old_key->alpha_test_ref, key->alpha_test_ref);

   found |= brw_debug_recompile_sampler_key(brw, &old_key->tex, &key->tex);

   if (!found) {
      perf_debug("  Something else\n");
   }
}

static uint8_t
gen6_gather_workaround(GLenum internalformat)
{
   switch (internalformat) {
      case GL_R8I: return WA_SIGN | WA_8BIT;
      case GL_R8UI: return WA_8BIT;
      case GL_R16I: return WA_SIGN | WA_16BIT;
      case GL_R16UI: return WA_16BIT;
      /* note that even though GL_R32I and GL_R32UI have format overrides
       * in the surface state, there is no shader w/a required */
      default: return 0;
   }
}

void
brw_populate_sampler_prog_key_data(struct gl_context *ctx,
				   const struct gl_program *prog,
                                   unsigned sampler_count,
				   struct brw_sampler_prog_key_data *key)
{
   struct brw_context *brw = brw_context(ctx);

   for (int s = 0; s < sampler_count; s++) {
      key->swizzles[s] = SWIZZLE_NOOP;

      if (!(prog->SamplersUsed & (1 << s)))
	 continue;

      int unit_id = prog->SamplerUnits[s];
      const struct gl_texture_unit *unit = &ctx->Texture.Unit[unit_id];

      if (unit->_Current && unit->_Current->Target != GL_TEXTURE_BUFFER) {
	 const struct gl_texture_object *t = unit->_Current;
	 const struct gl_texture_image *img = t->Image[0][t->BaseLevel];
	 struct gl_sampler_object *sampler = _mesa_get_samplerobj(ctx, unit_id);

         const bool alpha_depth = t->DepthMode == GL_ALPHA &&
            (img->_BaseFormat == GL_DEPTH_COMPONENT ||
             img->_BaseFormat == GL_DEPTH_STENCIL);

         /* Haswell handles texture swizzling as surface format overrides
          * (except for GL_ALPHA); all other platforms need MOVs in the shader.
          */
         if (alpha_depth || (brw->gen < 8 && !brw->is_haswell))
            key->swizzles[s] = brw_get_texture_swizzle(ctx, t);

	 if (brw->gen < 8 &&
             sampler->MinFilter != GL_NEAREST &&
	     sampler->MagFilter != GL_NEAREST) {
	    if (sampler->WrapS == GL_CLAMP)
	       key->gl_clamp_mask[0] |= 1 << s;
	    if (sampler->WrapT == GL_CLAMP)
	       key->gl_clamp_mask[1] |= 1 << s;
	    if (sampler->WrapR == GL_CLAMP)
	       key->gl_clamp_mask[2] |= 1 << s;
	 }

         /* gather4's channel select for green from RG32F is broken;
          * requires a shader w/a on IVB; fixable with just SCS on HSW. */
         if (brw->gen == 7 && !brw->is_haswell && prog->UsesGather) {
            if (img->InternalFormat == GL_RG32F)
               key->gather_channel_quirk_mask |= 1 << s;
         }

         /* Gen6's gather4 is broken for UINT/SINT; we treat them as
          * UNORM/FLOAT instead and fix it in the shader.
          */
         if (brw->gen == 6 && prog->UsesGather) {
            key->gen6_gather_wa[s] = gen6_gather_workaround(img->InternalFormat);
         }

         /* If this is a multisample sampler, and uses the CMS MSAA layout,
          * then we need to emit slightly different code to first sample the
          * MCS surface.
          */
         struct intel_texture_object *intel_tex =
            intel_texture_object((struct gl_texture_object *)t);

         if (brw->gen >= 7 &&
             intel_tex->mt->msaa_layout == INTEL_MSAA_LAYOUT_CMS) {
            key->compressed_multisample_layout_mask |= 1 << s;
         }
      }
   }
}

static void brw_wm_populate_key( struct brw_context *brw,
				 struct brw_wm_prog_key *key )
{
   struct gl_context *ctx = &brw->ctx;
   /* BRW_NEW_FRAGMENT_PROGRAM */
   const struct brw_fragment_program *fp =
      (struct brw_fragment_program *)brw->fragment_program;
   const struct gl_program *prog = (struct gl_program *) brw->fragment_program;
   GLuint lookup = 0;
   GLuint line_aa;
   bool program_uses_dfdy = fp->program.UsesDFdy;
   bool multisample_fbo = ctx->DrawBuffer->Visual.samples > 1;

   memset(key, 0, sizeof(*key));

   /* Build the index for table lookup
    */
   if (brw->gen < 6) {
      /* _NEW_COLOR */
      if (fp->program.UsesKill || ctx->Color.AlphaEnabled)
	 lookup |= IZ_PS_KILL_ALPHATEST_BIT;

      if (fp->program.Base.OutputsWritten & BITFIELD64_BIT(FRAG_RESULT_DEPTH))
	 lookup |= IZ_PS_COMPUTES_DEPTH_BIT;

      /* _NEW_DEPTH */
      if (ctx->Depth.Test)
	 lookup |= IZ_DEPTH_TEST_ENABLE_BIT;

      if (ctx->Depth.Test && ctx->Depth.Mask) /* ?? */
	 lookup |= IZ_DEPTH_WRITE_ENABLE_BIT;

      /* _NEW_STENCIL | _NEW_BUFFERS */
      if (ctx->Stencil._Enabled) {
	 lookup |= IZ_STENCIL_TEST_ENABLE_BIT;

	 if (ctx->Stencil.WriteMask[0] ||
	     ctx->Stencil.WriteMask[ctx->Stencil._BackFace])
	    lookup |= IZ_STENCIL_WRITE_ENABLE_BIT;
      }
      key->iz_lookup = lookup;
   }

   line_aa = AA_NEVER;

   /* _NEW_LINE, _NEW_POLYGON, BRW_NEW_REDUCED_PRIMITIVE */
   if (ctx->Line.SmoothFlag) {
      if (brw->reduced_primitive == GL_LINES) {
	 line_aa = AA_ALWAYS;
      }
      else if (brw->reduced_primitive == GL_TRIANGLES) {
	 if (ctx->Polygon.FrontMode == GL_LINE) {
	    line_aa = AA_SOMETIMES;

	    if (ctx->Polygon.BackMode == GL_LINE ||
		(ctx->Polygon.CullFlag &&
		 ctx->Polygon.CullFaceMode == GL_BACK))
	       line_aa = AA_ALWAYS;
	 }
	 else if (ctx->Polygon.BackMode == GL_LINE) {
	    line_aa = AA_SOMETIMES;

	    if ((ctx->Polygon.CullFlag &&
		 ctx->Polygon.CullFaceMode == GL_FRONT))
	       line_aa = AA_ALWAYS;
	 }
      }
   }

   key->line_aa = line_aa;

   /* _NEW_HINT */
   if (brw->disable_derivative_optimization) {
      key->high_quality_derivatives =
         ctx->Hint.FragmentShaderDerivative != GL_FASTEST;
   } else {
      key->high_quality_derivatives =
         ctx->Hint.FragmentShaderDerivative == GL_NICEST;
   }

   if (brw->gen < 6)
      key->stats_wm = brw->stats_wm;

   /* _NEW_LIGHT */
   key->flat_shade = (ctx->Light.ShadeModel == GL_FLAT);

   /* _NEW_FRAG_CLAMP | _NEW_BUFFERS */
   key->clamp_fragment_color = ctx->Color._ClampFragmentColor;

   /* _NEW_TEXTURE */
   brw_populate_sampler_prog_key_data(ctx, prog, brw->wm.base.sampler_count,
                                      &key->tex);

   /* _NEW_BUFFERS */
   /*
    * Include the draw buffer origin and height so that we can calculate
    * fragment position values relative to the bottom left of the drawable,
    * from the incoming screen origin relative position we get as part of our
    * payload.
    *
    * This is only needed for the WM_WPOSXY opcode when the fragment program
    * uses the gl_FragCoord input.
    *
    * We could avoid recompiling by including this as a constant referenced by
    * our program, but if we were to do that it would also be nice to handle
    * getting that constant updated at batchbuffer submit time (when we
    * hold the lock and know where the buffer really is) rather than at emit
    * time when we don't hold the lock and are just guessing.  We could also
    * just avoid using this as key data if the program doesn't use
    * fragment.position.
    *
    * For DRI2 the origin_x/y will always be (0,0) but we still need the
    * drawable height in order to invert the Y axis.
    */
   if (fp->program.Base.InputsRead & VARYING_BIT_POS) {
      key->drawable_height = ctx->DrawBuffer->Height;
   }

   if ((fp->program.Base.InputsRead & VARYING_BIT_POS) || program_uses_dfdy) {
      key->render_to_fbo = _mesa_is_user_fbo(ctx->DrawBuffer);
   }

   /* _NEW_BUFFERS */
   key->nr_color_regions = ctx->DrawBuffer->_NumColorDrawBuffers;

   /* _NEW_MULTISAMPLE, _NEW_COLOR, _NEW_BUFFERS */
   key->replicate_alpha = ctx->DrawBuffer->_NumColorDrawBuffers > 1 &&
      (ctx->Multisample.SampleAlphaToCoverage || ctx->Color.AlphaEnabled);

   /* _NEW_BUFFERS _NEW_MULTISAMPLE */
   /* Ignore sample qualifier while computing this flag. */
   key->persample_shading =
      _mesa_get_min_invocations_per_fragment(ctx, &fp->program, true) > 1;
   if (key->persample_shading)
      key->persample_2x = ctx->DrawBuffer->Visual.samples == 2;

   key->compute_pos_offset =
      _mesa_get_min_invocations_per_fragment(ctx, &fp->program, false) > 1 &&
      fp->program.Base.SystemValuesRead & SYSTEM_BIT_SAMPLE_POS;

   key->compute_sample_id =
      multisample_fbo &&
      ctx->Multisample.Enabled &&
      (fp->program.Base.SystemValuesRead & SYSTEM_BIT_SAMPLE_ID);

   /* BRW_NEW_VUE_MAP_GEOM_OUT */
   if (brw->gen < 6 || _mesa_bitcount_64(fp->program.Base.InputsRead &
                                         BRW_FS_VARYING_INPUT_MASK) > 16)
      key->input_slots_valid = brw->vue_map_geom_out.slots_valid;


   /* _NEW_COLOR | _NEW_BUFFERS */
   /* Pre-gen6, the hardware alpha test always used each render
    * target's alpha to do alpha test, as opposed to render target 0's alpha
    * like GL requires.  Fix that by building the alpha test into the
    * shader, and we'll skip enabling the fixed function alpha test.
    */
   if (brw->gen < 6 && ctx->DrawBuffer->_NumColorDrawBuffers > 1 && ctx->Color.AlphaEnabled) {
      key->alpha_test_func = ctx->Color.AlphaFunc;
      key->alpha_test_ref = ctx->Color.AlphaRef;
   }

   /* The unique fragment program ID */
   key->program_string_id = fp->id;
}


static void
brw_upload_wm_prog(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   struct brw_wm_prog_key key;
   struct brw_fragment_program *fp = (struct brw_fragment_program *)
      brw->fragment_program;

   brw_wm_populate_key(brw, &key);

   if (!brw_search_cache(&brw->cache, BRW_WM_PROG,
			 &key, sizeof(key),
			 &brw->wm.base.prog_offset, &brw->wm.prog_data)) {
      bool success = do_wm_prog(brw, ctx->_Shader->_CurrentFragmentProgram, fp,
				&key);
      (void) success;
      assert(success);
   }
   brw->wm.base.prog_data = &brw->wm.prog_data->base;
}


const struct brw_tracked_state brw_wm_prog = {
   .dirty = {
      .mesa  = (_NEW_COLOR |
		_NEW_DEPTH |
		_NEW_STENCIL |
		_NEW_POLYGON |
		_NEW_LINE |
		_NEW_HINT |
		_NEW_LIGHT |
		_NEW_FRAG_CLAMP |
		_NEW_BUFFERS |
		_NEW_TEXTURE |
		_NEW_MULTISAMPLE),
      .brw   = (BRW_NEW_FRAGMENT_PROGRAM |
		BRW_NEW_REDUCED_PRIMITIVE |
                BRW_NEW_VUE_MAP_GEOM_OUT |
                BRW_NEW_STATS_WM)
   },
   .emit = brw_upload_wm_prog
};

@


1.13
log
@Merge Mesa 10.2.9
@
text
@@


1.12
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d43 1
a43 1
#include "util/ralloc.h"
d149 1
a149 2
   void *mem_ctx = ralloc_context(NULL);
   struct brw_wm_prog_data prog_data;
d157 1
a157 2
   memset(&prog_data, 0, sizeof(prog_data));
   prog_data.uses_kill = fp->program.UsesKill;
d171 10
a180 9
   prog_data.base.param =
      rzalloc_array(NULL, const gl_constant_value *, param_count);
   prog_data.base.pull_param =
      rzalloc_array(NULL, const gl_constant_value *, param_count);
   prog_data.base.nr_params = param_count;

   prog_data.barycentric_interp_modes =
      brw_compute_barycentric_interp_modes(brw, key->flat_shade,
                                           key->persample_shading,
d183 2
a184 4
   program = brw_wm_fs_emit(brw, mem_ctx, key, &prog_data,
                            &fp->program, prog, &program_size);
   if (program == NULL) {
      ralloc_free(mem_ctx);
a185 1
   }
d187 8
a194 1
   if (prog_data.base.total_scratch) {
d196 1
a196 1
			 prog_data.base.total_scratch * brw->max_wm_threads);
d203 1
a203 1
		    key, sizeof(struct brw_wm_prog_key),
d205 1
a205 1
		    &prog_data, sizeof(prog_data),
d208 1
a208 1
   ralloc_free(mem_ctx);
@


1.11
log
@Merge Mesa 10.2.7
@
text
@d43 1
a43 1
#include "glsl/ralloc.h"
d149 2
a150 1
   struct brw_wm_compile *c;
d158 2
a159 1
   c = rzalloc(NULL, struct brw_wm_compile);
d173 9
a181 10
   c->prog_data.base.param = rzalloc_array(NULL, const float *, param_count);
   c->prog_data.base.pull_param =
      rzalloc_array(NULL, const float *, param_count);
   c->prog_data.base.nr_params = param_count;

   memcpy(&c->key, key, sizeof(*key));

   c->prog_data.barycentric_interp_modes =
      brw_compute_barycentric_interp_modes(brw, c->key.flat_shade,
                                           c->key.persample_shading,
d184 4
a187 2
   program = brw_wm_fs_emit(brw, c, &fp->program, prog, &program_size);
   if (program == NULL)
d189 1
d191 1
a191 8
   /* Scratch space is used for register spilling */
   if (c->last_scratch) {
      perf_debug("Fragment shader triggered register spilling.  "
                 "Try reducing the number of live scalar values to "
                 "improve performance.\n");

      c->prog_data.total_scratch = brw_get_scratch_size(c->last_scratch);

d193 1
a193 1
			 c->prog_data.total_scratch * brw->max_wm_threads);
d200 1
a200 1
		    &c->key, sizeof(c->key),
d202 1
a202 1
		    &c->prog_data, sizeof(c->prog_data),
d205 1
a205 1
   ralloc_free(c);
@


1.10
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d283 4
d532 2
@


1.9
log
@Merge Mesa 9.2.5
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d31 1
a31 1
             
d35 1
d40 2
d52 1
d65 4
a68 1
      bool is_centroid = fprog->IsCentroid & BITFIELD64_BIT(attr);
d89 3
d93 2
a94 1
         if (!is_centroid || brw->needs_unlit_centroid_workaround) {
d104 3
d108 2
a109 1
         if (!is_centroid || brw->needs_unlit_centroid_workaround) {
d120 1
a120 2
brw_wm_prog_data_compare(const void *in_a, const void *in_b,
                         int aux_size, const void *in_key)
d125 2
a126 5
   /* Compare all the struct up to the pointers. */
   if (memcmp(a, b, offsetof(struct brw_wm_prog_data, param)))
      return false;

   if (memcmp(a->param, b->param, a->nr_params * sizeof(void *)))
d129 4
a132 1
   if (memcmp(a->pull_param, b->pull_param, a->nr_pull_params * sizeof(void *)))
a137 9
void
brw_wm_prog_data_free(const void *in_prog_data)
{
   const struct brw_wm_prog_data *prog_data = in_prog_data;

   ralloc_free((void *)prog_data->param);
   ralloc_free((void *)prog_data->pull_param);
}

d148 1
d170 5
a174 3
   param_count += 2 * BRW_MAX_TEX_UNIT;
   c->prog_data.param = rzalloc_array(NULL, const float *, param_count);
   c->prog_data.pull_param = rzalloc_array(NULL, const float *, param_count);
d180 1
d195 1
a195 1
      brw_get_scratch_bo(brw, &brw->wm.scratch_bo,
d206 1
a206 1
		    &brw->wm.prog_offset, &brw->wm.prog_data);
d241 2
a242 4
   found |= key_debug(brw, "GL_MESA_ycbcr texturing\n",
                      old_key->yuvtex_mask, key->yuvtex_mask);
   found |= key_debug(brw, "GL_MESA_ycbcr UV swapping\n",
                      old_key->yuvtex_swap_mask, key->yuvtex_swap_mask);
d309 14
d326 1
d331 1
a331 1
   for (int s = 0; s < MAX_SAMPLERS; s++) {
d340 1
a340 1
      if (unit->_ReallyEnabled && unit->_Current->Target != GL_TEXTURE_BUFFER) {
d352 1
a352 1
         if (!brw->is_haswell || alpha_depth)
d355 2
a356 7
	 if (img->InternalFormat == GL_YCBCR_MESA) {
	    key->yuvtex_mask |= 1 << s;
	    if (img->TexFormat == MESA_FORMAT_YCBCR)
		key->yuvtex_swap_mask |= 1 << s;
	 }

	 if (sampler->MinFilter != GL_NEAREST &&
d365 26
d400 1
a400 1
   const struct brw_fragment_program *fp = 
d406 1
d466 9
d485 2
a486 1
   brw_populate_sampler_prog_key_data(ctx, prog, &key->tex);
d524 14
d539 2
a540 1
   if (brw->gen < 6)
d572 2
a573 2
			 &brw->wm.prog_offset, &brw->wm.prog_data)) {
      bool success = do_wm_prog(brw, ctx->Shader._CurrentFragmentProgram, fp,
d578 1
d589 1
@


1.8
log
@Merge Mesa 9.2.0
@
text
@d290 4
d473 12
@


1.7
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d36 1
d40 1
a40 1
#include "../glsl/ralloc.h"
d42 8
a49 2
/** Return number of src args for given instruction */
GLuint brw_wm_nr_args( GLuint opcode )
d51 48
a98 17
   switch (opcode) {
   case WM_FRONTFACING:
   case WM_PIXELXY:
      return 0;
   case WM_CINTERP:
   case WM_WPOSXY:
   case WM_DELTAXY:
      return 1;
   case WM_LINTERP:
   case WM_PIXELW:
      return 2;
   case WM_FB_WRITE:
   case WM_PINTERP:
      return 3;
   default:
      assert(opcode < MAX_OPCODE);
      return _mesa_num_inst_src_regs(opcode);
a99 1
}
d101 1
a101 21

GLuint brw_wm_is_scalar_result( GLuint opcode )
{
   switch (opcode) {
   case OPCODE_COS:
   case OPCODE_EX2:
   case OPCODE_LG2:
   case OPCODE_POW:
   case OPCODE_RCP:
   case OPCODE_RSQ:
   case OPCODE_SIN:
   case OPCODE_DP2:
   case OPCODE_DP3:
   case OPCODE_DP4:
   case OPCODE_DPH:
   case OPCODE_DST:
      return 1;
      
   default:
      return 0;
   }
d104 3
a106 8

/**
 * Do GPU code generation for non-GLSL shader.  non-GLSL shaders have
 * no flow control instructions so we can more readily do SSA-style
 * optimizations.
 */
static void
brw_wm_non_glsl_emit(struct brw_context *brw, struct brw_wm_compile *c)
d108 2
a109 4
   /* Augment fragment program.  Add instructions for pre- and
    * post-fragment-program tasks such as interpolation and fogging.
    */
   brw_wm_pass_fp(c);
d111 3
a113 4
   /* Translate to intermediate representation.  Build register usage
    * chains.
    */
   brw_wm_pass0(c);
d115 2
a116 3
   /* Dead code removal.
    */
   brw_wm_pass1(c);
d118 2
a119 5
   /* Register allocation.
    * Divide by two because we operate on 16 pixels at a time and require
    * two GRF entries for each logical shader register.
    */
   c->grf_limit = BRW_WM_MAX_GRF / 2;
d121 1
a121 8
   brw_wm_pass2(c);

   /* how many general-purpose registers are used */
   c->prog_data.reg_blocks = brw_register_blocks(c->max_wm_grf);

   /* Emit GEN4 code.
    */
   brw_wm_emit(c);
d125 1
a125 2
brw_wm_payload_setup(struct brw_context *brw,
		     struct brw_wm_compile *c)
d127 4
a130 51
   struct intel_context *intel = &brw->intel;
   bool uses_depth = (c->fp->program.Base.InputsRead &
		      (1 << FRAG_ATTRIB_WPOS)) != 0;

   if (intel->gen >= 6) {
      /* R0-1: masks, pixel X/Y coordinates. */
      c->nr_payload_regs = 2;
      /* R2: only for 32-pixel dispatch.*/
      /* R3-4: perspective pixel location barycentric */
      c->nr_payload_regs += 2;
      /* R5-6: perspective pixel location bary for dispatch width != 8 */
      if (c->dispatch_width == 16) {
	 c->nr_payload_regs += 2;
      }
      /* R7-10: perspective centroid barycentric */
      /* R11-14: perspective sample barycentric */
      /* R15-18: linear pixel location barycentric */
      /* R19-22: linear centroid barycentric */
      /* R23-26: linear sample barycentric */

      /* R27: interpolated depth if uses source depth */
      if (uses_depth) {
	 c->source_depth_reg = c->nr_payload_regs;
	 c->nr_payload_regs++;
	 if (c->dispatch_width == 16) {
	    /* R28: interpolated depth if not 8-wide. */
	    c->nr_payload_regs++;
	 }
      }
      /* R29: interpolated W set if GEN6_WM_USES_SOURCE_W.
       */
      if (uses_depth) {
	 c->source_w_reg = c->nr_payload_regs;
	 c->nr_payload_regs++;
	 if (c->dispatch_width == 16) {
	    /* R30: interpolated W if not 8-wide. */
	    c->nr_payload_regs++;
	 }
      }
      /* R31: MSAA position offsets. */
      /* R32-: bary for 32-pixel. */
      /* R58-59: interp W for 32-pixel. */

      if (c->fp->program.Base.OutputsWritten &
	  BITFIELD64_BIT(FRAG_RESULT_DEPTH)) {
	 c->source_depth_to_render_target = GL_TRUE;
	 c->computes_depth = GL_TRUE;
      }
   } else {
      brw_wm_lookup_iz(intel, c);
   }
a142 1
   struct intel_context *intel = &brw->intel;
d145 1
d148 12
a159 15
   c = brw->wm.compile_data;
   if (c == NULL) {
      brw->wm.compile_data = rzalloc(NULL, struct brw_wm_compile);
      c = brw->wm.compile_data;
      if (c == NULL) {
         /* Ouch - big out of memory problem.  Can't continue
          * without triggering a segfault, no way to signal,
          * so just return.
          */
         return false;
      }
      c->instruction = rzalloc_array(c, struct brw_wm_instruction, BRW_WM_MAX_INSN);
      c->prog_instructions = rzalloc_array(c, struct prog_instruction, BRW_WM_MAX_INSN);
      c->vreg = rzalloc_array(c, struct brw_wm_value, BRW_WM_MAX_VREG);
      c->refs = rzalloc_array(c, struct brw_wm_ref, BRW_WM_MAX_REF);
d161 1
a161 9
      void *instruction = c->instruction;
      void *prog_instructions = c->prog_instructions;
      void *vreg = c->vreg;
      void *refs = c->refs;
      memset(c, 0, sizeof(*brw->wm.compile_data));
      c->instruction = instruction;
      c->prog_instructions = prog_instructions;
      c->vreg = vreg;
      c->refs = refs;
d163 5
d170 7
a176 15
   c->fp = fp;
   c->env_param = brw->intel.ctx.FragmentProgram.Parameters;

   brw_init_compile(brw, &c->func, c);

   if (prog && prog->FragmentProgram) {
      if (!brw_wm_fs_emit(brw, c, prog))
	 return false;
   } else {
      /* Fallback for fixed function and ARB_fp shaders. */
      c->dispatch_width = 16;
      brw_wm_payload_setup(brw, c);
      brw_wm_non_glsl_emit(brw, c);
      c->prog_data.dispatch_width = 16;
   }
d180 3
a182 1
      uint32_t total_scratch;
d184 1
a184 7
      /* Per-thread scratch space is power-of-two sized. */
      for (c->prog_data.total_scratch = 1024;
	   c->prog_data.total_scratch <= c->last_scratch;
	   c->prog_data.total_scratch *= 2) {
	 /* empty */
      }
      total_scratch = c->prog_data.total_scratch * brw->wm_max_threads;
d186 2
a187 13
      if (brw->wm.scratch_bo && total_scratch > brw->wm.scratch_bo->size) {
	 drm_intel_bo_unreference(brw->wm.scratch_bo);
	 brw->wm.scratch_bo = NULL;
      }
      if (brw->wm.scratch_bo == NULL) {
	 brw->wm.scratch_bo = drm_intel_bo_alloc(intel->bufmgr,
						 "wm scratch",
						 total_scratch,
						 4096);
      }
   }
   else {
      c->prog_data.total_scratch = 0;
a192 4
   /* get the program
    */
   program = brw_get_program(&c->func, &program_size);

d199 2
d204 17
d222 125
d351 1
a351 1
   struct gl_context *ctx = &brw->intel.ctx;
d355 1
d358 1
a358 1
   GLuint i;
d364 24
a387 24
   /* _NEW_COLOR */
   key->alpha_test = ctx->Color.AlphaEnabled;
   if (fp->program.UsesKill ||
       ctx->Color.AlphaEnabled)
      lookup |= IZ_PS_KILL_ALPHATEST_BIT;

   if (fp->program.Base.OutputsWritten & BITFIELD64_BIT(FRAG_RESULT_DEPTH))
      lookup |= IZ_PS_COMPUTES_DEPTH_BIT;

   /* _NEW_DEPTH */
   if (ctx->Depth.Test)
      lookup |= IZ_DEPTH_TEST_ENABLE_BIT;

   if (ctx->Depth.Test &&  
       ctx->Depth.Mask) /* ?? */
      lookup |= IZ_DEPTH_WRITE_ENABLE_BIT;

   /* _NEW_STENCIL */
   if (ctx->Stencil._Enabled) {
      lookup |= IZ_STENCIL_TEST_ENABLE_BIT;

      if (ctx->Stencil.WriteMask[0] ||
	  ctx->Stencil.WriteMask[ctx->Stencil._BackFace])
	 lookup |= IZ_STENCIL_WRITE_ENABLE_BIT;
d394 1
a394 1
      if (brw->intel.reduced_primitive == GL_LINES) {
d397 1
a397 1
      else if (brw->intel.reduced_primitive == GL_TRIANGLES) {
a415 1
   key->iz_lookup = lookup;
a416 1
   key->stats_wm = brw->intel.stats_wm;
d418 2
a419 2
   /* BRW_NEW_WM_INPUT_DIMENSIONS */
   key->proj_attrib_mask = brw->wm.input_size_masks[4-1];
d428 1
a428 65
   for (i = 0; i < BRW_MAX_TEX_UNIT; i++) {
      const struct gl_texture_unit *unit = &ctx->Texture.Unit[i];

      if (unit->_ReallyEnabled) {
         const struct gl_texture_object *t = unit->_Current;
         const struct gl_texture_image *img = t->Image[0][t->BaseLevel];
	 struct gl_sampler_object *sampler = _mesa_get_samplerobj(ctx, i);
	 int swizzles[SWIZZLE_NIL + 1] = {
	    SWIZZLE_X,
	    SWIZZLE_Y,
	    SWIZZLE_Z,
	    SWIZZLE_W,
	    SWIZZLE_ZERO,
	    SWIZZLE_ONE,
	    SWIZZLE_NIL
	 };

	 /* GL_DEPTH_TEXTURE_MODE is normally handled through
	  * brw_wm_surface_state, but it applies to shadow compares as
	  * well and our shadow compares always return the result in
	  * all 4 channels.
	  */
	 if (sampler->CompareMode == GL_COMPARE_R_TO_TEXTURE_ARB) {
	    key->compare_funcs[i] = sampler->CompareFunc;

	    if (sampler->DepthMode == GL_ALPHA) {
	       swizzles[0] = SWIZZLE_ZERO;
	       swizzles[1] = SWIZZLE_ZERO;
	       swizzles[2] = SWIZZLE_ZERO;
	    } else if (sampler->DepthMode == GL_LUMINANCE) {
	       swizzles[3] = SWIZZLE_ONE;
	    } else if (sampler->DepthMode == GL_RED) {
	       /* See table 3.23 of the GL 3.0 spec. */
	       swizzles[1] = SWIZZLE_ZERO;
	       swizzles[2] = SWIZZLE_ZERO;
	       swizzles[3] = SWIZZLE_ONE;
	    }
	 }

	 if (img->InternalFormat == GL_YCBCR_MESA) {
	    key->yuvtex_mask |= 1 << i;
	    if (img->TexFormat == MESA_FORMAT_YCBCR)
		key->yuvtex_swap_mask |= 1 << i;
	 }

	 key->tex_swizzles[i] =
	    MAKE_SWIZZLE4(swizzles[GET_SWZ(t->_Swizzle, 0)],
			  swizzles[GET_SWZ(t->_Swizzle, 1)],
			  swizzles[GET_SWZ(t->_Swizzle, 2)],
			  swizzles[GET_SWZ(t->_Swizzle, 3)]);

	 if (sampler->MinFilter != GL_NEAREST &&
	     sampler->MagFilter != GL_NEAREST) {
	    if (sampler->WrapS == GL_CLAMP)
	       key->gl_clamp_mask[0] |= 1 << i;
	    if (sampler->WrapT == GL_CLAMP)
	       key->gl_clamp_mask[1] |= 1 << i;
	    if (sampler->WrapR == GL_CLAMP)
	       key->gl_clamp_mask[2] |= 1 << i;
	 }
      }
      else {
         key->tex_swizzles[i] = SWIZZLE_NOOP;
      }
   }
d451 1
a451 1
   if (fp->program.Base.InputsRead & FRAG_BIT_WPOS) {
d453 4
a456 1
      key->render_to_fbo = ctx->DrawBuffer->Name != 0;
d462 7
a468 2
   /* CACHE_NEW_VS_PROG */
   key->vp_outputs_written = brw->vs.prog_data->outputs_written;
d475 2
a476 1
static void brw_prepare_wm_prog(struct brw_context *brw)
d478 1
a478 2
   struct intel_context *intel = &brw->intel;
   struct gl_context *ctx = &intel->ctx;
d488 1
a488 1
      bool success = do_wm_prog(brw, ctx->Shader.CurrentFragmentProgram, fp,
d490 1
d506 2
a507 1
		_NEW_TEXTURE),
d509 3
a511 3
		BRW_NEW_WM_INPUT_DIMENSIONS |
		BRW_NEW_REDUCED_PRIMITIVE),
      .cache = CACHE_NEW_VS_PROG,
d513 1
a513 1
   .prepare = brw_prepare_wm_prog
@


1.6
log
@Merge Mesa 7.10.3
@
text
@d36 4
d119 1
a119 1
   c->prog_data.total_grf = c->max_wm_grf;
d126 1
a126 1
static void
d188 4
a191 3
static void do_wm_prog( struct brw_context *brw,
			struct brw_fragment_program *fp, 
			struct brw_wm_prog_key *key)
d193 1
d200 1
a200 1
      brw->wm.compile_data = calloc(1, sizeof(*brw->wm.compile_data));
d207 1
a207 1
         return;
d209 4
a212 5
      c->instruction = calloc(1, BRW_WM_MAX_INSN * sizeof(*c->instruction));
      c->prog_instructions = calloc(1, BRW_WM_MAX_INSN *
					  sizeof(*c->prog_instructions));
      c->vreg = calloc(1, BRW_WM_MAX_VREG * sizeof(*c->vreg));
      c->refs = calloc(1, BRW_WM_MAX_REF * sizeof(*c->refs));
d229 1
a229 1
   brw_init_compile(brw, &c->func);
d231 5
a235 7
   brw_wm_payload_setup(brw, c);

   if (!brw_wm_fs_emit(brw, c)) {
      /*
       * Shader which use GLSL features such as flow control are handled
       * differently from "simple" shaders.
       */
d239 1
a240 1
   c->prog_data.dispatch_width = c->dispatch_width;
d244 2
d252 12
d276 7
a282 8
   drm_intel_bo_unreference(brw->wm.prog_bo);
   brw->wm.prog_bo = brw_upload_cache_with_auxdata(&brw->cache, BRW_WM_PROG,
						   &c->key, sizeof(c->key),
						   NULL, 0,
						   program, program_size,
						   &c->prog_data,
						   sizeof(c->prog_data),
						   &brw->wm.prog_data);
d364 2
a365 2
   /* _NEW_HINT */
   key->linear_color = (ctx->Hint.PerspectiveCorrection == GL_FASTEST);
d374 1
a384 2
	 key->tex_swizzles[i] = SWIZZLE_NOOP;

d390 4
a393 2
	 if (t->CompareMode == GL_COMPARE_R_TO_TEXTURE_ARB) {
	    if (t->DepthMode == GL_ALPHA) {
d397 1
a397 1
	    } else if (t->DepthMode == GL_LUMINANCE) {
d399 1
a399 1
	    } else if (t->DepthMode == GL_RED) {
d418 10
a433 3
   /* Shadow */
   key->shadowtex_mask = fp->program.Base.ShadowSamplers;

d460 2
a461 1
   key->nr_color_regions = brw->state.nr_color_regions;
d473 2
d478 1
a478 1
     
d481 7
a487 9
   /* Make an early check for the key.
    */
   drm_intel_bo_unreference(brw->wm.prog_bo);
   brw->wm.prog_bo = brw_search_cache(&brw->cache, BRW_WM_PROG,
				      &key, sizeof(key),
				      NULL, 0,
				      &brw->wm.prog_data);
   if (brw->wm.prog_bo == NULL)
      do_wm_prog(brw, fp, &key);
a494 1
                _NEW_HINT |
d499 1
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d35 1
a35 1

d71 1
a116 8
   /* Scratch space is used for register spilling */
   if (c->last_scratch) {
      c->prog_data.total_scratch = c->last_scratch + 0x40;
   }
   else {
      c->prog_data.total_scratch = 0;
   }

d122 56
d226 12
a237 2
   /* temporary sanity check assertion */
   ASSERT(fp->isGLSL == brw_wm_is_glsl(&c->fp->program));
d239 8
a246 7
   /*
    * Shader which use GLSL features such as flow control are handled
    * differently from "simple" shaders.
    */
   if (fp->isGLSL) {
      c->dispatch_width = 8;
      brw_wm_glsl_emit(brw, c);
d249 1
a249 2
      c->dispatch_width = 16;
      brw_wm_non_glsl_emit(brw, c);
d252 1
a252 1
   if (INTEL_DEBUG & DEBUG_WM)
d259 1
a259 1
   dri_bo_unreference(brw->wm.prog_bo);
d274 1
a274 1
   GLcontext *ctx = &brw->intel.ctx;
a277 1
   GLboolean uses_depth = (fp->program.Base.InputsRead & (1 << FRAG_ATTRIB_WPOS)) != 0;
d287 1
a336 5
	 
   brw_wm_lookup_iz(line_aa,
		    lookup,
		    uses_depth,
		    key);
d338 3
d358 32
d396 5
a400 1
         key->tex_swizzles[i] = t->_Swizzle;
d433 1
d456 1
a456 1
   dri_bo_unreference(brw->wm.prog_bo);
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a31 1
#include "main/texformat.h"
a32 1
#include "brw_util.h"
d42 1
a43 1
   case WM_PIXELXY:
d46 1
a48 1
   case WM_DELTAXY:
d83 52
d145 14
a158 2
     brw->wm.compile_data = calloc(1, sizeof(*brw->wm.compile_data));
     c = brw->wm.compile_data;
d160 9
a168 1
     memset(c, 0, sizeof(*brw->wm.compile_data));
d175 16
a190 35
    brw_init_compile(brw, &c->func);
   if (brw_wm_is_glsl(&c->fp->program)) {
       brw_wm_glsl_emit(brw, c);
   } else {
       /* Augment fragment program.  Add instructions for pre- and
	* post-fragment-program tasks such as interpolation and fogging.
	*/
       brw_wm_pass_fp(c);

       /* Translate to intermediate representation.  Build register usage
	* chains.
	*/
       brw_wm_pass0(c);

       /* Dead code removal.
	*/
       brw_wm_pass1(c);

       /* Register allocation.
	*/
       c->grf_limit = BRW_WM_MAX_GRF/2;

       brw_wm_pass2(c);

       c->prog_data.total_grf = c->max_wm_grf;
       if (c->last_scratch) {
	   c->prog_data.total_scratch =
	       c->last_scratch + 0x40;
       } else {
	   c->prog_data.total_scratch = 0;
       }

       /* Emit GEN4 code.
	*/
       brw_wm_emit(c);
d192 1
d201 7
a207 6
   brw->wm.prog_bo = brw_upload_cache( &brw->cache, BRW_WM_PROG,
				       &c->key, sizeof(c->key),
				       NULL, 0,
				       program, program_size,
				       &c->prog_data,
				       &brw->wm.prog_data );
d217 1
a217 1
   struct brw_fragment_program *fp = 
d219 1
d233 1
a233 1
   if (fp->program.Base.OutputsWritten & (1<<FRAG_RESULT_DEPR))
d245 1
a245 1
   if (ctx->Stencil.Enabled) {
d281 1
d286 1
a286 1
   key->projtex_mask = brw->wm.input_size_masks[4-1] >> (FRAG_ATTRIB_TEX0 - FRAG_ATTRIB_WPOS); 
d291 3
d303 1
a303 1
	    if (img->TexFormat->MesaFormat == MESA_FORMAT_YCBCR)
d306 5
d324 3
d335 2
a336 2
    * This pretty much becomes moot with DRI2 and redirected buffers anyway,
    * as our origins will always be zero then.
d338 2
a339 4
   if (brw->intel.driDrawable != NULL) {
      key->origin_x = brw->intel.driDrawable->x;
      key->origin_y = brw->intel.driDrawable->y;
      key->drawable_height = brw->intel.driDrawable->h;
d342 6
a347 2
   /* Extra info:
    */
a348 1

a371 2
/* See brw_wm.c:
 */
d376 1
d386 1
a386 1
      .cache = 0
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d39 1
d43 2
a44 1

d46 2
a47 19
   case OPCODE_ABS:
   case OPCODE_FLR:
   case OPCODE_FRC:
   case OPCODE_SWZ:
   case OPCODE_MOV:
   case OPCODE_COS:
   case OPCODE_EX2:
   case OPCODE_LG2:
   case OPCODE_RCP:
   case OPCODE_RSQ:
   case OPCODE_SIN:
   case OPCODE_SCS:
   case OPCODE_TEX:
   case OPCODE_TXB:
   case OPCODE_TXP:	
   case OPCODE_KIL:
   case OPCODE_LIT: 
   case WM_CINTERP: 
   case WM_WPOSXY: 
d49 1
a49 19

   case OPCODE_POW:
   case OPCODE_SUB:
   case OPCODE_SGE:
   case OPCODE_SGT:
   case OPCODE_SLE:
   case OPCODE_SLT:
   case OPCODE_SEQ:
   case OPCODE_SNE:
   case OPCODE_ADD:
   case OPCODE_MAX:
   case OPCODE_MIN:
   case OPCODE_MUL:
   case OPCODE_XPD:
   case OPCODE_DP3:	
   case OPCODE_DP4:
   case OPCODE_DPH:
   case OPCODE_DST:
   case WM_LINTERP: 
a52 1

d54 1
a54 4
   case WM_PINTERP: 
   case OPCODE_MAD:	
   case OPCODE_CMP:
   case OPCODE_LRP:
a55 1
      
d57 2
a58 1
      return 0;
d141 3
d162 1
d176 1
a176 1
       brw->attribs.Color->AlphaEnabled)
d183 1
a183 1
   if (brw->attribs.Depth->Test)
d186 2
a187 2
   if (brw->attribs.Depth->Test &&  
       brw->attribs.Depth->Mask) /* ?? */
d191 1
a191 1
   if (brw->attribs.Stencil->Enabled) {
d194 2
a195 3
      if (brw->attribs.Stencil->WriteMask[0] ||
	  (brw->attribs.Stencil->_TestTwoSide &&
	   brw->attribs.Stencil->WriteMask[1]))
a198 6
   /* XXX: when should this be disabled?
    */
   if (1)
      lookup |= IZ_EARLY_DEPTH_TEST_BIT;

   
d202 1
a202 1
   if (brw->attribs.Line->SmoothFlag) {
d207 1
a207 1
	 if (brw->attribs.Polygon->FrontMode == GL_LINE) {
d210 3
a212 3
	    if (brw->attribs.Polygon->BackMode == GL_LINE ||
		(brw->attribs.Polygon->CullFlag &&
		 brw->attribs.Polygon->CullFaceMode == GL_BACK))
d215 1
a215 1
	 else if (brw->attribs.Polygon->BackMode == GL_LINE) {
d218 2
a219 2
	    if ((brw->attribs.Polygon->CullFlag &&
		 brw->attribs.Polygon->CullFaceMode == GL_FRONT))
d234 1
a234 1
   key->flat_shade = (brw->attribs.Light->ShadeModel == GL_FLAT);
d238 1
a238 2
      const struct gl_texture_unit *unit = &brw->attribs.Texture->Unit[i];
      const struct gl_texture_object *t = unit->_Current;
d241 6
a246 5
	 if (t->Image[0][t->BaseLevel]->InternalFormat == GL_YCBCR_MESA) {
	    key->yuvtex_mask |= 1<<i;
	    if (t->Image[0][t->BaseLevel]->TexFormat->MesaFormat == 
		    MESA_FORMAT_YCBCR)
		key->yuvtex_swap_mask |= 1<< i;
d285 1
a285 1
static int brw_prepare_wm_prog( struct brw_context *brw )
a301 2

   return dri_bufmgr_check_aperture_space(brw->wm.prog_bo);
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d32 1
a32 1

a36 1
#include "brw_hal.h"
d68 2
d71 2
a121 14
static void brw_wm_pass_hal (struct brw_wm_compile *c)
{
   static void (*hal_wm_pass) (struct brw_wm_compile *c);
   static GLboolean hal_tried;
   
   if (!hal_tried)
   {
      hal_wm_pass = brw_hal_find_symbol ("intel_hal_wm_pass");
      hal_tried = 1;
   }
   if (hal_wm_pass)
      (*hal_wm_pass) (c);
}

d142 3
a144 32
   /* Augment fragment program.  Add instructions for pre- and
    * post-fragment-program tasks such as interpolation and fogging.
    */
   brw_wm_pass_fp(c);
   
   /* Translate to intermediate representation.  Build register usage
    * chains.
    */
   brw_wm_pass0(c);

   /* Dead code removal.
    */
   brw_wm_pass1(c);

   /* Hal optimization
    */
   brw_wm_pass_hal (c);
   
   /* Register allocation.
    */
   c->grf_limit = BRW_WM_MAX_GRF/2;

   /* This is where we start emitting gen4 code:
    */
   brw_init_compile(brw, &c->func);    

   brw_wm_pass2(c);

   c->prog_data.total_grf = c->max_wm_grf;
   if (c->last_scratch) {
      c->prog_data.total_scratch =
	 c->last_scratch + 0x40;
d146 31
a176 1
      c->prog_data.total_scratch = 0;
a177 5

   /* Emit GEN4 code.
    */
   brw_wm_emit(c);

d182 7
a188 9
   /*
    */
   brw->wm.prog_gs_offset = brw_upload_cache( &brw->cache[BRW_WM_PROG],
					      &c->key,
					      sizeof(c->key),
					      program,
					      program_size,
					      &c->prog_data,
					      &brw->wm.prog_data );
d228 2
a229 1
	  (brw->attribs.Stencil->TestTwoSide && brw->attribs.Stencil->WriteMask[1]))
d271 1
a271 1
   key->projtex_mask = brw->wm.input_size_masks[4-1]; 
d282 8
d291 2
a292 4
	 if (t->CompareMode == GL_COMPARE_R_TO_TEXTURE_ARB &&
	     t->Image[0][t->BaseLevel]->_BaseFormat == GL_DEPTH_COMPONENT) {
	    key->shadowtex_mask |= 1<<i;
	 }
d294 22
a315 3
	 if (t->Image[0][t->BaseLevel]->InternalFormat == GL_YCBCR_MESA)
	    key->yuvtex_mask |= 1<<i;
      }
a316 1
	  
d325 1
a325 1
static void brw_upload_wm_prog( struct brw_context *brw )
d335 7
a341 5
   if (brw_search_cache(&brw->cache[BRW_WM_PROG], 
			&key, sizeof(key),
			&brw->wm.prog_data,
			&brw->wm.prog_gs_offset))
      return;
d343 1
a343 1
   do_wm_prog(brw, fp, &key);
d357 1
d364 1
a364 1
   .update = brw_upload_wm_prog
@


1.1
log
@Initial revision
@
text
@a38 4
#include "program.h"
#include "program_instruction.h"
#include "arbprogparse.h"

d137 1
a137 1
   struct brw_wm_compile c;
d141 8
a148 5
   memset(&c, 0, sizeof(c));
   memcpy(&c.key, key, sizeof(*key));

   c.fp = fp;
   c.env_param = brw->intel.ctx.FragmentProgram.Parameters;
d150 2
d156 1
a156 1
   brw_wm_pass_fp(&c);
d161 1
a161 1
   brw_wm_pass0(&c);
d165 1
a165 1
   brw_wm_pass1(&c);
d169 1
a169 1
   brw_wm_pass_hal (&c);
d173 1
a173 1
   c.grf_limit = BRW_WM_MAX_GRF/2;
d177 1
a177 1
   brw_init_compile(&c.func);    
d179 1
a179 1
   brw_wm_pass2(&c);
d181 7
a187 2
   c.prog_data.total_grf = c.max_wm_grf;
   c.prog_data.total_scratch = c.last_scratch ? c.last_scratch + 0x40 : 0;
d191 1
a191 1
   brw_wm_emit(&c);
d195 1
a195 1
   program = brw_get_program(&c.func, &program_size);
d200 2
a201 2
					      &c.key,
					      sizeof(c.key),
d204 1
a204 1
					      &c.prog_data,
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Mesa 7.0.1
@
text
@d39 4
d141 1
a141 1
   struct brw_wm_compile *c;
d145 2
a146 8
   c = brw->wm.compile_data;
   if (c == NULL) {
     brw->wm.compile_data = calloc(1, sizeof(*brw->wm.compile_data));
     c = brw->wm.compile_data;
   } else {
     memset(c, 0, sizeof(*brw->wm.compile_data));
   }
   memcpy(&c->key, key, sizeof(*key));
d148 2
a149 2
   c->fp = fp;
   c->env_param = brw->intel.ctx.FragmentProgram.Parameters;
d155 1
a155 1
   brw_wm_pass_fp(c);
d160 1
a160 1
   brw_wm_pass0(c);
d164 1
a164 1
   brw_wm_pass1(c);
d168 1
a168 1
   brw_wm_pass_hal (c);
d172 1
a172 1
   c->grf_limit = BRW_WM_MAX_GRF/2;
d176 1
a176 1
   brw_init_compile(&c->func);    
d178 1
a178 1
   brw_wm_pass2(c);
d180 2
a181 7
   c->prog_data.total_grf = c->max_wm_grf;
   if (c->last_scratch) {
      c->prog_data.total_scratch =
	 c->last_scratch + 0x40;
   } else {
      c->prog_data.total_scratch = 0;
   }
d185 1
a185 1
   brw_wm_emit(c);
d189 1
a189 1
   program = brw_get_program(&c->func, &program_size);
d194 2
a195 2
					      &c->key,
					      sizeof(c->key),
d198 1
a198 1
					      &c->prog_data,
@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@d32 1
d34 1
d37 2
a38 1
#include "main/formats.h"
a39 1
/** Return number of src args for given instruction */
d43 1
a43 1
   case WM_FRONTFACING:
d45 35
a79 3
      return 0;
   case WM_CINTERP:
   case WM_WPOSXY:
a80 2
      return 1;
   case WM_LINTERP:
d83 1
d85 4
a88 1
   case WM_PINTERP:
d90 1
d92 1
a92 2
      assert(opcode < MAX_OPCODE);
      return _mesa_num_inst_src_regs(opcode);
a106 1
   case OPCODE_DP2:
d119 1
a119 7
/**
 * Do GPU code generation for non-GLSL shader.  non-GLSL shaders have
 * no flow control instructions so we can more readily do SSA-style
 * optimizations.
 */
static void
brw_wm_non_glsl_emit(struct brw_context *brw, struct brw_wm_compile *c)
d121 7
a127 84
   /* Augment fragment program.  Add instructions for pre- and
    * post-fragment-program tasks such as interpolation and fogging.
    */
   brw_wm_pass_fp(c);

   /* Translate to intermediate representation.  Build register usage
    * chains.
    */
   brw_wm_pass0(c);

   /* Dead code removal.
    */
   brw_wm_pass1(c);

   /* Register allocation.
    * Divide by two because we operate on 16 pixels at a time and require
    * two GRF entries for each logical shader register.
    */
   c->grf_limit = BRW_WM_MAX_GRF / 2;

   brw_wm_pass2(c);

   /* how many general-purpose registers are used */
   c->prog_data.total_grf = c->max_wm_grf;

   /* Emit GEN4 code.
    */
   brw_wm_emit(c);
}

static void
brw_wm_payload_setup(struct brw_context *brw,
		     struct brw_wm_compile *c)
{
   struct intel_context *intel = &brw->intel;
   bool uses_depth = (c->fp->program.Base.InputsRead &
		      (1 << FRAG_ATTRIB_WPOS)) != 0;

   if (intel->gen >= 6) {
      /* R0-1: masks, pixel X/Y coordinates. */
      c->nr_payload_regs = 2;
      /* R2: only for 32-pixel dispatch.*/
      /* R3-4: perspective pixel location barycentric */
      c->nr_payload_regs += 2;
      /* R5-6: perspective pixel location bary for dispatch width != 8 */
      if (c->dispatch_width == 16) {
	 c->nr_payload_regs += 2;
      }
      /* R7-10: perspective centroid barycentric */
      /* R11-14: perspective sample barycentric */
      /* R15-18: linear pixel location barycentric */
      /* R19-22: linear centroid barycentric */
      /* R23-26: linear sample barycentric */

      /* R27: interpolated depth if uses source depth */
      if (uses_depth) {
	 c->source_depth_reg = c->nr_payload_regs;
	 c->nr_payload_regs++;
	 if (c->dispatch_width == 16) {
	    /* R28: interpolated depth if not 8-wide. */
	    c->nr_payload_regs++;
	 }
      }
      /* R29: interpolated W set if GEN6_WM_USES_SOURCE_W.
       */
      if (uses_depth) {
	 c->source_w_reg = c->nr_payload_regs;
	 c->nr_payload_regs++;
	 if (c->dispatch_width == 16) {
	    /* R30: interpolated W if not 8-wide. */
	    c->nr_payload_regs++;
	 }
      }
      /* R31: MSAA position offsets. */
      /* R32-: bary for 32-pixel. */
      /* R58-59: interp W for 32-pixel. */

      if (c->fp->program.Base.OutputsWritten &
	  BITFIELD64_BIT(FRAG_RESULT_DEPTH)) {
	 c->source_depth_to_render_target = GL_TRUE;
	 c->computes_depth = GL_TRUE;
      }
   } else {
      brw_wm_lookup_iz(intel, c);
d129 2
a132 5
/**
 * All Mesa program -> GPU code generation goes through this function.
 * Depending on the instructions used (i.e. flow control instructions)
 * we'll use one of two code generators.
 */
d143 2
a144 14
      brw->wm.compile_data = calloc(1, sizeof(*brw->wm.compile_data));
      c = brw->wm.compile_data;
      if (c == NULL) {
         /* Ouch - big out of memory problem.  Can't continue
          * without triggering a segfault, no way to signal,
          * so just return.
          */
         return;
      }
      c->instruction = calloc(1, BRW_WM_MAX_INSN * sizeof(*c->instruction));
      c->prog_instructions = calloc(1, BRW_WM_MAX_INSN *
					  sizeof(*c->prog_instructions));
      c->vreg = calloc(1, BRW_WM_MAX_VREG * sizeof(*c->vreg));
      c->refs = calloc(1, BRW_WM_MAX_REF * sizeof(*c->refs));
d146 1
a146 9
      void *instruction = c->instruction;
      void *prog_instructions = c->prog_instructions;
      void *vreg = c->vreg;
      void *refs = c->refs;
      memset(c, 0, sizeof(*brw->wm.compile_data));
      c->instruction = instruction;
      c->prog_instructions = prog_instructions;
      c->vreg = vreg;
      c->refs = refs;
a152 1
   brw_init_compile(brw, &c->func);
d154 21
a174 1
   brw_wm_payload_setup(brw, c);
d176 5
a180 10
   if (!brw_wm_fs_emit(brw, c)) {
      /*
       * Shader which use GLSL features such as flow control are handled
       * differently from "simple" shaders.
       */
      c->dispatch_width = 16;
      brw_wm_payload_setup(brw, c);
      brw_wm_non_glsl_emit(brw, c);
   }
   c->prog_data.dispatch_width = c->dispatch_width;
d182 1
a182 1
   /* Scratch space is used for register spilling */
d184 3
a186 8
      /* Per-thread scratch space is power-of-two sized. */
      for (c->prog_data.total_scratch = 1024;
	   c->prog_data.total_scratch <= c->last_scratch;
	   c->prog_data.total_scratch *= 2) {
	 /* empty */
      }
   }
   else {
d190 3
a192 2
   if (unlikely(INTEL_DEBUG & DEBUG_WM))
      fprintf(stderr, "\n");
d198 9
a206 8
   drm_intel_bo_unreference(brw->wm.prog_bo);
   brw->wm.prog_bo = brw_upload_cache_with_auxdata(&brw->cache, BRW_WM_PROG,
						   &c->key, sizeof(c->key),
						   NULL, 0,
						   program, program_size,
						   &c->prog_data,
						   sizeof(c->prog_data),
						   &brw->wm.prog_data);
a213 1
   struct gl_context *ctx = &brw->intel.ctx;
d215 1
a215 1
   const struct brw_fragment_program *fp = 
a225 1
   key->alpha_test = ctx->Color.AlphaEnabled;
d227 1
a227 1
       ctx->Color.AlphaEnabled)
d230 1
a230 1
   if (fp->program.Base.OutputsWritten & BITFIELD64_BIT(FRAG_RESULT_DEPTH))
d234 1
a234 1
   if (ctx->Depth.Test)
d237 2
a238 2
   if (ctx->Depth.Test &&  
       ctx->Depth.Mask) /* ?? */
d242 1
a242 1
   if (ctx->Stencil._Enabled) {
d245 2
a246 2
      if (ctx->Stencil.WriteMask[0] ||
	  ctx->Stencil.WriteMask[ctx->Stencil._BackFace])
d250 6
d259 1
a259 1
   if (ctx->Line.SmoothFlag) {
d264 1
a264 1
	 if (ctx->Polygon.FrontMode == GL_LINE) {
d267 3
a269 3
	    if (ctx->Polygon.BackMode == GL_LINE ||
		(ctx->Polygon.CullFlag &&
		 ctx->Polygon.CullFaceMode == GL_BACK))
d272 1
a272 1
	 else if (ctx->Polygon.BackMode == GL_LINE) {
d275 2
a276 2
	    if ((ctx->Polygon.CullFlag &&
		 ctx->Polygon.CullFaceMode == GL_FRONT))
d281 4
a285 3
   key->iz_lookup = lookup;
   key->line_aa = line_aa;
   key->stats_wm = brw->intel.stats_wm;
d288 1
a288 1
   key->proj_attrib_mask = brw->wm.input_size_masks[4-1];
d291 1
a291 4
   key->flat_shade = (ctx->Light.ShadeModel == GL_FLAT);

   /* _NEW_HINT */
   key->linear_color = (ctx->Hint.PerspectiveCorrection == GL_FASTEST);
d295 2
a296 1
      const struct gl_texture_unit *unit = &ctx->Texture.Unit[i];
a298 33
         const struct gl_texture_object *t = unit->_Current;
         const struct gl_texture_image *img = t->Image[0][t->BaseLevel];
	 int swizzles[SWIZZLE_NIL + 1] = {
	    SWIZZLE_X,
	    SWIZZLE_Y,
	    SWIZZLE_Z,
	    SWIZZLE_W,
	    SWIZZLE_ZERO,
	    SWIZZLE_ONE,
	    SWIZZLE_NIL
	 };

	 key->tex_swizzles[i] = SWIZZLE_NOOP;

	 /* GL_DEPTH_TEXTURE_MODE is normally handled through
	  * brw_wm_surface_state, but it applies to shadow compares as
	  * well and our shadow compares always return the result in
	  * all 4 channels.
	  */
	 if (t->CompareMode == GL_COMPARE_R_TO_TEXTURE_ARB) {
	    if (t->DepthMode == GL_ALPHA) {
	       swizzles[0] = SWIZZLE_ZERO;
	       swizzles[1] = SWIZZLE_ZERO;
	       swizzles[2] = SWIZZLE_ZERO;
	    } else if (t->DepthMode == GL_LUMINANCE) {
	       swizzles[3] = SWIZZLE_ONE;
	    } else if (t->DepthMode == GL_RED) {
	       /* See table 3.23 of the GL 3.0 spec. */
	       swizzles[1] = SWIZZLE_ZERO;
	       swizzles[2] = SWIZZLE_ZERO;
	       swizzles[3] = SWIZZLE_ONE;
	    }
	 }
d300 3
a302 4
	 if (img->InternalFormat == GL_YCBCR_MESA) {
	    key->yuvtex_mask |= 1 << i;
	    if (img->TexFormat == MESA_FORMAT_YCBCR)
		key->yuvtex_swap_mask |= 1 << i;
d305 2
a306 8
	 key->tex_swizzles[i] =
	    MAKE_SWIZZLE4(swizzles[GET_SWZ(t->_Swizzle, 0)],
			  swizzles[GET_SWZ(t->_Swizzle, 1)],
			  swizzles[GET_SWZ(t->_Swizzle, 2)],
			  swizzles[GET_SWZ(t->_Swizzle, 3)]);
      }
      else {
         key->tex_swizzles[i] = SWIZZLE_NOOP;
d309 1
d311 3
a313 33
   /* Shadow */
   key->shadowtex_mask = fp->program.Base.ShadowSamplers;

   /* _NEW_BUFFERS */
   /*
    * Include the draw buffer origin and height so that we can calculate
    * fragment position values relative to the bottom left of the drawable,
    * from the incoming screen origin relative position we get as part of our
    * payload.
    *
    * This is only needed for the WM_WPOSXY opcode when the fragment program
    * uses the gl_FragCoord input.
    *
    * We could avoid recompiling by including this as a constant referenced by
    * our program, but if we were to do that it would also be nice to handle
    * getting that constant updated at batchbuffer submit time (when we
    * hold the lock and know where the buffer really is) rather than at emit
    * time when we don't hold the lock and are just guessing.  We could also
    * just avoid using this as key data if the program doesn't use
    * fragment.position.
    *
    * For DRI2 the origin_x/y will always be (0,0) but we still need the
    * drawable height in order to invert the Y axis.
    */
   if (fp->program.Base.InputsRead & FRAG_BIT_WPOS) {
      key->drawable_height = ctx->DrawBuffer->Height;
      key->render_to_fbo = ctx->DrawBuffer->Name != 0;
   }

   key->nr_color_regions = brw->state.nr_color_regions;

   /* CACHE_NEW_VS_PROG */
   key->vp_outputs_written = brw->vs.prog_data->outputs_written;
a314 2
   /* The unique fragment program ID */
   key->program_string_id = fp->id;
d318 1
a318 1
static void brw_prepare_wm_prog(struct brw_context *brw)
d328 7
a334 7
   drm_intel_bo_unreference(brw->wm.prog_bo);
   brw->wm.prog_bo = brw_search_cache(&brw->cache, BRW_WM_PROG,
				      &key, sizeof(key),
				      NULL, 0,
				      &brw->wm.prog_data);
   if (brw->wm.prog_bo == NULL)
      do_wm_prog(brw, fp, &key);
d338 2
a343 1
                _NEW_HINT |
a347 1
		_NEW_BUFFERS |
d352 1
a352 1
      .cache = CACHE_NEW_VS_PROG,
d354 1
a354 1
   .prepare = brw_prepare_wm_prog
@


1.1.1.4
log
@Import Mesa 9.2.0
@
text
@a35 3
#include "main/fbobject.h"
#include "main/samplerobj.h"
#include "program/prog_parameter.h"
d37 46
a82 1
#include "glsl/ralloc.h"
d85 3
a87 2
 * Return a bitfield where bit n is set if barycentric interpolation mode n
 * (see enum brw_wm_barycentric_interp_mode) is needed by the fragment shader.
d89 2
a90 4
static unsigned
brw_compute_barycentric_interp_modes(struct brw_context *brw,
                                     bool shade_model_flat,
                                     const struct gl_fragment_program *fprog)
d92 4
a95 2
   unsigned barycentric_interp_modes = 0;
   int attr;
d97 2
a98 3
   /* Loop through all fragment shader inputs to figure out what interpolation
    * modes are in use, and set the appropriate bits in
    * barycentric_interp_modes.
d100 1
a100 42
   for (attr = 0; attr < VARYING_SLOT_MAX; ++attr) {
      enum glsl_interp_qualifier interp_qualifier =
         fprog->InterpQualifier[attr];
      bool is_centroid = fprog->IsCentroid & BITFIELD64_BIT(attr);
      bool is_gl_Color = attr == VARYING_SLOT_COL0 || attr == VARYING_SLOT_COL1;

      /* Ignore unused inputs. */
      if (!(fprog->Base.InputsRead & BITFIELD64_BIT(attr)))
         continue;

      /* Ignore WPOS and FACE, because they don't require interpolation. */
      if (attr == VARYING_SLOT_POS || attr == VARYING_SLOT_FACE)
         continue;

      /* Determine the set (or sets) of barycentric coordinates needed to
       * interpolate this variable.  Note that when
       * brw->needs_unlit_centroid_workaround is set, centroid interpolation
       * uses PIXEL interpolation for unlit pixels and CENTROID interpolation
       * for lit pixels, so we need both sets of barycentric coordinates.
       */
      if (interp_qualifier == INTERP_QUALIFIER_NOPERSPECTIVE) {
         if (is_centroid) {
            barycentric_interp_modes |=
               1 << BRW_WM_NONPERSPECTIVE_CENTROID_BARYCENTRIC;
         }
         if (!is_centroid || brw->needs_unlit_centroid_workaround) {
            barycentric_interp_modes |=
               1 << BRW_WM_NONPERSPECTIVE_PIXEL_BARYCENTRIC;
         }
      } else if (interp_qualifier == INTERP_QUALIFIER_SMOOTH ||
                 (!(shade_model_flat && is_gl_Color) &&
                  interp_qualifier == INTERP_QUALIFIER_NONE)) {
         if (is_centroid) {
            barycentric_interp_modes |=
               1 << BRW_WM_PERSPECTIVE_CENTROID_BARYCENTRIC;
         }
         if (!is_centroid || brw->needs_unlit_centroid_workaround) {
            barycentric_interp_modes |=
               1 << BRW_WM_PERSPECTIVE_PIXEL_BARYCENTRIC;
         }
      }
   }
d102 3
a104 2
   return barycentric_interp_modes;
}
d106 5
a110 6
bool
brw_wm_prog_data_compare(const void *in_a, const void *in_b,
                         int aux_size, const void *in_key)
{
   const struct brw_wm_prog_data *a = in_a;
   const struct brw_wm_prog_data *b = in_b;
d112 1
a112 3
   /* Compare all the struct up to the pointers. */
   if (memcmp(a, b, offsetof(struct brw_wm_prog_data, param)))
      return false;
d114 2
a115 2
   if (memcmp(a->param, b->param, a->nr_params * sizeof(void *)))
      return false;
d117 3
a119 4
   if (memcmp(a->pull_param, b->pull_param, a->nr_pull_params * sizeof(void *)))
      return false;

   return true;
d122 3
a124 2
void
brw_wm_prog_data_free(const void *in_prog_data)
d126 51
a176 4
   const struct brw_wm_prog_data *prog_data = in_prog_data;

   ralloc_free((void *)prog_data->param);
   ralloc_free((void *)prog_data->pull_param);
d184 3
a186 4
bool do_wm_prog(struct brw_context *brw,
		struct gl_shader_program *prog,
		struct brw_fragment_program *fp,
		struct brw_wm_prog_key *key)
a189 1
   struct gl_shader *fs = NULL;
d192 16
a207 12
   if (prog)
      fs = prog->_LinkedShaders[MESA_SHADER_FRAGMENT];

   c = rzalloc(NULL, struct brw_wm_compile);

   /* Allocate the references to the uniforms that will end up in the
    * prog_data associated with the compiled program, and which will be freed
    * by the state cache.
    */
   int param_count;
   if (fs) {
      param_count = fs->num_uniform_components;
d209 9
a217 1
      param_count = fp->program.Base.Parameters->NumParameters * 4;
a218 5
   /* The backend also sometimes adds params for texture size. */
   param_count += 2 * BRW_MAX_TEX_UNIT;
   c->prog_data.param = rzalloc_array(NULL, const float *, param_count);
   c->prog_data.pull_param = rzalloc_array(NULL, const float *, param_count);

d221 2
a222 7
   c->prog_data.barycentric_interp_modes =
      brw_compute_barycentric_interp_modes(brw, c->key.flat_shade,
                                           &fp->program);

   program = brw_wm_fs_emit(brw, c, &fp->program, prog, &program_size);
   if (program == NULL)
      return false;
d224 1
a224 5
   /* Scratch space is used for register spilling */
   if (c->last_scratch) {
      perf_debug("Fragment shader triggered register spilling.  "
                 "Try reducing the number of live scalar values to "
                 "improve performance.\n");
d226 1
a226 1
      c->prog_data.total_scratch = brw_get_scratch_size(c->last_scratch);
d228 8
a235 2
      brw_get_scratch_bo(brw, &brw->wm.scratch_bo,
			 c->prog_data.total_scratch * brw->max_wm_threads);
d237 1
d239 8
a246 22
   if (unlikely(INTEL_DEBUG & DEBUG_WM))
      fprintf(stderr, "\n");

   brw_upload_cache(&brw->cache, BRW_WM_PROG,
		    &c->key, sizeof(c->key),
		    program, program_size,
		    &c->prog_data, sizeof(c->prog_data),
		    &brw->wm.prog_offset, &brw->wm.prog_data);

   ralloc_free(c);

   return true;
}

static bool
key_debug(struct brw_context *brw, const char *name, int a, int b)
{
   if (a != b) {
      perf_debug("  %s %d->%d\n", name, a, b);
      return true;
   } else {
      return false;
d248 2
a249 49
}

bool
brw_debug_recompile_sampler_key(struct brw_context *brw,
                                const struct brw_sampler_prog_key_data *old_key,
                                const struct brw_sampler_prog_key_data *key)
{
   bool found = false;

   for (unsigned int i = 0; i < MAX_SAMPLERS; i++) {
      found |= key_debug(brw, "EXT_texture_swizzle or DEPTH_TEXTURE_MODE",
                         old_key->swizzles[i], key->swizzles[i]);
   }
   found |= key_debug(brw, "GL_CLAMP enabled on any texture unit's 1st coordinate",
                      old_key->gl_clamp_mask[0], key->gl_clamp_mask[0]);
   found |= key_debug(brw, "GL_CLAMP enabled on any texture unit's 2nd coordinate",
                      old_key->gl_clamp_mask[1], key->gl_clamp_mask[1]);
   found |= key_debug(brw, "GL_CLAMP enabled on any texture unit's 3rd coordinate",
                      old_key->gl_clamp_mask[2], key->gl_clamp_mask[2]);
   found |= key_debug(brw, "GL_MESA_ycbcr texturing\n",
                      old_key->yuvtex_mask, key->yuvtex_mask);
   found |= key_debug(brw, "GL_MESA_ycbcr UV swapping\n",
                      old_key->yuvtex_swap_mask, key->yuvtex_swap_mask);

   return found;
}

void
brw_wm_debug_recompile(struct brw_context *brw,
                       struct gl_shader_program *prog,
                       const struct brw_wm_prog_key *key)
{
   struct brw_cache_item *c = NULL;
   const struct brw_wm_prog_key *old_key = NULL;
   bool found = false;

   perf_debug("Recompiling fragment shader for program %d\n", prog->Name);

   for (unsigned int i = 0; i < brw->cache.size; i++) {
      for (c = brw->cache.items[i]; c; c = c->next) {
         if (c->cache_id == BRW_WM_PROG) {
            old_key = c->key;

            if (old_key->program_string_id == key->program_string_id)
               break;
         }
      }
      if (c)
         break;
d252 2
a253 26
   if (!c) {
      perf_debug("  Didn't find previous compile in the shader cache for debug\n");
      return;
   }

   found |= key_debug(brw, "alphatest, computed depth, depth test, or "
                      "depth write",
                      old_key->iz_lookup, key->iz_lookup);
   found |= key_debug(brw, "depth statistics",
                      old_key->stats_wm, key->stats_wm);
   found |= key_debug(brw, "flat shading",
                      old_key->flat_shade, key->flat_shade);
   found |= key_debug(brw, "number of color buffers",
                      old_key->nr_color_regions, key->nr_color_regions);
   found |= key_debug(brw, "MRT alpha test or alpha-to-coverage",
                      old_key->replicate_alpha, key->replicate_alpha);
   found |= key_debug(brw, "rendering to FBO",
                      old_key->render_to_fbo, key->render_to_fbo);
   found |= key_debug(brw, "fragment color clamping",
                      old_key->clamp_fragment_color, key->clamp_fragment_color);
   found |= key_debug(brw, "line smoothing",
                      old_key->line_aa, key->line_aa);
   found |= key_debug(brw, "renderbuffer height",
                      old_key->drawable_height, key->drawable_height);
   found |= key_debug(brw, "input slots valid",
                      old_key->input_slots_valid, key->input_slots_valid);
d255 3
a257 1
   found |= brw_debug_recompile_sampler_key(brw, &old_key->tex, &key->tex);
d259 8
a266 3
   if (!found) {
      perf_debug("  Something else\n");
   }
a268 36
void
brw_populate_sampler_prog_key_data(struct gl_context *ctx,
				   const struct gl_program *prog,
				   struct brw_sampler_prog_key_data *key)
{
   struct brw_context *brw = brw_context(ctx);

   for (int s = 0; s < MAX_SAMPLERS; s++) {
      key->swizzles[s] = SWIZZLE_NOOP;

      if (!(prog->SamplersUsed & (1 << s)))
	 continue;

      int unit_id = prog->SamplerUnits[s];
      const struct gl_texture_unit *unit = &ctx->Texture.Unit[unit_id];

      if (unit->_ReallyEnabled && unit->_Current->Target != GL_TEXTURE_BUFFER) {
	 const struct gl_texture_object *t = unit->_Current;
	 const struct gl_texture_image *img = t->Image[0][t->BaseLevel];
	 struct gl_sampler_object *sampler = _mesa_get_samplerobj(ctx, unit_id);

         const bool alpha_depth = t->DepthMode == GL_ALPHA &&
            (img->_BaseFormat == GL_DEPTH_COMPONENT ||
             img->_BaseFormat == GL_DEPTH_STENCIL);

         /* Haswell handles texture swizzling as surface format overrides
          * (except for GL_ALPHA); all other platforms need MOVs in the shader.
          */
         if (!brw->is_haswell || alpha_depth)
            key->swizzles[s] = brw_get_texture_swizzle(ctx, t);

	 if (img->InternalFormat == GL_YCBCR_MESA) {
	    key->yuvtex_mask |= 1 << s;
	    if (img->TexFormat == MESA_FORMAT_YCBCR)
		key->yuvtex_swap_mask |= 1 << s;
	 }
a269 12
	 if (sampler->MinFilter != GL_NEAREST &&
	     sampler->MagFilter != GL_NEAREST) {
	    if (sampler->WrapS == GL_CLAMP)
	       key->gl_clamp_mask[0] |= 1 << s;
	    if (sampler->WrapT == GL_CLAMP)
	       key->gl_clamp_mask[1] |= 1 << s;
	    if (sampler->WrapR == GL_CLAMP)
	       key->gl_clamp_mask[2] |= 1 << s;
	 }
      }
   }
}
d274 1
a274 1
   struct gl_context *ctx = &brw->ctx;
a277 1
   const struct gl_program *prog = (struct gl_program *) brw->fragment_program;
d280 1
a280 1
   bool program_uses_dfdy = fp->program.UsesDFdy;
d286 24
a309 24
   if (brw->gen < 6) {
      /* _NEW_COLOR */
      if (fp->program.UsesKill || ctx->Color.AlphaEnabled)
	 lookup |= IZ_PS_KILL_ALPHATEST_BIT;

      if (fp->program.Base.OutputsWritten & BITFIELD64_BIT(FRAG_RESULT_DEPTH))
	 lookup |= IZ_PS_COMPUTES_DEPTH_BIT;

      /* _NEW_DEPTH */
      if (ctx->Depth.Test)
	 lookup |= IZ_DEPTH_TEST_ENABLE_BIT;

      if (ctx->Depth.Test && ctx->Depth.Mask) /* ?? */
	 lookup |= IZ_DEPTH_WRITE_ENABLE_BIT;

      /* _NEW_STENCIL | _NEW_BUFFERS */
      if (ctx->Stencil._Enabled) {
	 lookup |= IZ_STENCIL_TEST_ENABLE_BIT;

	 if (ctx->Stencil.WriteMask[0] ||
	     ctx->Stencil.WriteMask[ctx->Stencil._BackFace])
	    lookup |= IZ_STENCIL_WRITE_ENABLE_BIT;
      }
      key->iz_lookup = lookup;
d316 1
a316 1
      if (brw->reduced_primitive == GL_LINES) {
d319 1
a319 1
      else if (brw->reduced_primitive == GL_TRIANGLES) {
d338 1
d340 1
d342 2
a343 2
   if (brw->gen < 6)
      key->stats_wm = brw->stats_wm;
d348 2
a349 2
   /* _NEW_FRAG_CLAMP | _NEW_BUFFERS */
   key->clamp_fragment_color = ctx->Color._ClampFragmentColor;
d352 57
a408 1
   brw_populate_sampler_prog_key_data(ctx, prog, &key->tex);
d431 1
a431 1
   if (fp->program.Base.InputsRead & VARYING_BIT_POS) {
d433 1
d436 1
a436 6
   if ((fp->program.Base.InputsRead & VARYING_BIT_POS) || program_uses_dfdy) {
      key->render_to_fbo = _mesa_is_user_fbo(ctx->DrawBuffer);
   }

   /* _NEW_BUFFERS */
   key->nr_color_regions = ctx->DrawBuffer->_NumColorDrawBuffers;
d438 2
a439 7
   /* _NEW_MULTISAMPLE, _NEW_COLOR, _NEW_BUFFERS */
   key->replicate_alpha = ctx->DrawBuffer->_NumColorDrawBuffers > 1 &&
      (ctx->Multisample.SampleAlphaToCoverage || ctx->Color.AlphaEnabled);

   /* BRW_NEW_VUE_MAP_GEOM_OUT */
   if (brw->gen < 6)
      key->input_slots_valid = brw->vue_map_geom_out.slots_valid;
d446 1
a446 2
static void
brw_upload_wm_prog(struct brw_context *brw)
a447 1
   struct gl_context *ctx = &brw->ctx;
d451 1
a451 1

d454 9
a462 8
   if (!brw_search_cache(&brw->cache, BRW_WM_PROG,
			 &key, sizeof(key),
			 &brw->wm.prog_offset, &brw->wm.prog_data)) {
      bool success = do_wm_prog(brw, ctx->Shader._CurrentFragmentProgram, fp,
				&key);
      (void) success;
      assert(success);
   }
d470 1
a474 1
		_NEW_FRAG_CLAMP |
d476 1
a476 2
		_NEW_TEXTURE |
		_NEW_MULTISAMPLE),
d478 3
a480 3
		BRW_NEW_REDUCED_PRIMITIVE |
                BRW_NEW_VUE_MAP_GEOM_OUT |
                BRW_NEW_STATS_WM)
d482 1
a482 1
   .emit = brw_upload_wm_prog
@


1.1.1.5
log
@Import Mesa 9.2.5
@
text
@a289 4
   found |= key_debug(brw, "mrt alpha test function",
                      old_key->alpha_test_func, key->alpha_test_func);
   found |= key_debug(brw, "mrt alpha test reference value",
                      old_key->alpha_test_ref, key->alpha_test_ref);
a468 12


   /* _NEW_COLOR | _NEW_BUFFERS */
   /* Pre-gen6, the hardware alpha test always used each render
    * target's alpha to do alpha test, as opposed to render target 0's alpha
    * like GL requires.  Fix that by building the alpha test into the
    * shader, and we'll skip enabling the fixed function alpha test.
    */
   if (brw->gen < 6 && ctx->DrawBuffer->_NumColorDrawBuffers > 1 && ctx->Color.AlphaEnabled) {
      key->alpha_test_func = ctx->Color.AlphaFunc;
      key->alpha_test_ref = ctx->Color.AlphaRef;
   }
@


1.1.1.6
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d31 1
a31 1

a34 1
#include "main/enums.h"
a38 2
#include "program/program.h"
#include "intel_mipmap_tree.h"
a48 1
                                     bool persample_shading,
d61 1
a61 4
      bool is_centroid = (fprog->IsCentroid & BITFIELD64_BIT(attr)) &&
         !persample_shading;
      bool is_sample = (fprog->IsSample & BITFIELD64_BIT(attr)) ||
         persample_shading;
a81 3
         } else if (is_sample) {
            barycentric_interp_modes |=
               1 << BRW_WM_NONPERSPECTIVE_SAMPLE_BARYCENTRIC;
d83 1
a83 2
         if ((!is_centroid && !is_sample) ||
             brw->needs_unlit_centroid_workaround) {
a92 3
         } else if (is_sample) {
            barycentric_interp_modes |=
               1 << BRW_WM_PERSPECTIVE_SAMPLE_BARYCENTRIC;
d94 1
a94 2
         if ((!is_centroid && !is_sample) ||
             brw->needs_unlit_centroid_workaround) {
d105 2
a106 1
brw_wm_prog_data_compare(const void *in_a, const void *in_b)
d111 5
a115 2
   /* Compare the base structure. */
   if (!brw_stage_prog_data_compare(&a->base, &b->base))
d118 1
a118 4
   /* Compare the rest of the structure. */
   const unsigned offset = sizeof(struct brw_stage_prog_data);
   if (memcmp(((char *) a) + offset, ((char *) b) + offset,
              sizeof(struct brw_wm_prog_data) - offset))
d124 9
a142 1
   struct gl_context *ctx = &brw->ctx;
d164 3
a166 5
   param_count += 2 * ctx->Const.Program[MESA_SHADER_FRAGMENT].MaxTextureImageUnits;
   c->prog_data.base.param = rzalloc_array(NULL, const float *, param_count);
   c->prog_data.base.pull_param =
      rzalloc_array(NULL, const float *, param_count);
   c->prog_data.base.nr_params = param_count;
a171 1
                                           c->key.persample_shading,
d186 1
a186 1
      brw_get_scratch_bo(brw, &brw->wm.base.scratch_bo,
d197 1
a197 1
		    &brw->wm.base.prog_offset, &brw->wm.prog_data);
d232 4
a235 2
   found |= key_debug(brw, "gather channel quirk on any texture unit",
                      old_key->gather_channel_quirk_mask, key->gather_channel_quirk_mask);
a301 14
static uint8_t
gen6_gather_workaround(GLenum internalformat)
{
   switch (internalformat) {
      case GL_R8I: return WA_SIGN | WA_8BIT;
      case GL_R8UI: return WA_8BIT;
      case GL_R16I: return WA_SIGN | WA_16BIT;
      case GL_R16UI: return WA_16BIT;
      /* note that even though GL_R32I and GL_R32UI have format overrides
       * in the surface state, there is no shader w/a required */
      default: return 0;
   }
}

a304 1
                                   unsigned sampler_count,
d309 1
a309 1
   for (int s = 0; s < sampler_count; s++) {
d318 1
a318 1
      if (unit->_Current && unit->_Current->Target != GL_TEXTURE_BUFFER) {
d330 1
a330 1
         if (alpha_depth || (brw->gen < 8 && !brw->is_haswell))
d333 7
a339 2
	 if (brw->gen < 8 &&
             sampler->MinFilter != GL_NEAREST &&
a347 26

         /* gather4's channel select for green from RG32F is broken;
          * requires a shader w/a on IVB; fixable with just SCS on HSW. */
         if (brw->gen == 7 && !brw->is_haswell && prog->UsesGather) {
            if (img->InternalFormat == GL_RG32F)
               key->gather_channel_quirk_mask |= 1 << s;
         }

         /* Gen6's gather4 is broken for UINT/SINT; we treat them as
          * UNORM/FLOAT instead and fix it in the shader.
          */
         if (brw->gen == 6 && prog->UsesGather) {
            key->gen6_gather_wa[s] = gen6_gather_workaround(img->InternalFormat);
         }

         /* If this is a multisample sampler, and uses the CMS MSAA layout,
          * then we need to emit slightly different code to first sample the
          * MCS surface.
          */
         struct intel_texture_object *intel_tex =
            intel_texture_object((struct gl_texture_object *)t);

         if (brw->gen >= 7 &&
             intel_tex->mt->msaa_layout == INTEL_MSAA_LAYOUT_CMS) {
            key->compressed_multisample_layout_mask |= 1 << s;
         }
d357 1
a357 1
   const struct brw_fragment_program *fp =
a362 1
   bool multisample_fbo = ctx->DrawBuffer->Visual.samples > 1;
a421 9
   /* _NEW_HINT */
   if (brw->disable_derivative_optimization) {
      key->high_quality_derivatives =
         ctx->Hint.FragmentShaderDerivative != GL_FASTEST;
   } else {
      key->high_quality_derivatives =
         ctx->Hint.FragmentShaderDerivative == GL_NICEST;
   }

d432 1
a432 2
   brw_populate_sampler_prog_key_data(ctx, prog, brw->wm.base.sampler_count,
                                      &key->tex);
a469 14
   /* _NEW_BUFFERS _NEW_MULTISAMPLE */
   /* Ignore sample qualifier while computing this flag. */
   key->persample_shading =
      _mesa_get_min_invocations_per_fragment(ctx, &fp->program, true) > 1;

   key->compute_pos_offset =
      _mesa_get_min_invocations_per_fragment(ctx, &fp->program, false) > 1 &&
      fp->program.Base.SystemValuesRead & SYSTEM_BIT_SAMPLE_POS;

   key->compute_sample_id =
      multisample_fbo &&
      ctx->Multisample.Enabled &&
      (fp->program.Base.SystemValuesRead & SYSTEM_BIT_SAMPLE_ID);

d471 1
a471 2
   if (brw->gen < 6 || _mesa_bitcount_64(fp->program.Base.InputsRead &
                                         BRW_FS_VARYING_INPUT_MASK) > 16)
d503 2
a504 2
			 &brw->wm.base.prog_offset, &brw->wm.prog_data)) {
      bool success = do_wm_prog(brw, ctx->_Shader->_CurrentFragmentProgram, fp,
a508 1
   brw->wm.base.prog_data = &brw->wm.prog_data->base;
a518 1
		_NEW_HINT |
@


1.1.1.7
log
@Import Mesa 10.2.7
@
text
@a282 4
   found |= key_debug(brw, "per-sample shading",
                      old_key->persample_shading, key->persample_shading);
   found |= key_debug(brw, "per-sample shading and 2x MSAA",
                      old_key->persample_2x, key->persample_2x);
a527 2
   if (key->persample_shading)
      key->persample_2x = ctx->DrawBuffer->Visual.samples == 2;
@


1.1.1.8
log
@Import Mesa 10.4.3
@
text
@d43 1
a43 1
#include "util/ralloc.h"
d149 1
a149 2
   void *mem_ctx = ralloc_context(NULL);
   struct brw_wm_prog_data prog_data;
d157 1
a157 2
   memset(&prog_data, 0, sizeof(prog_data));
   prog_data.uses_kill = fp->program.UsesKill;
d171 10
a180 9
   prog_data.base.param =
      rzalloc_array(NULL, const gl_constant_value *, param_count);
   prog_data.base.pull_param =
      rzalloc_array(NULL, const gl_constant_value *, param_count);
   prog_data.base.nr_params = param_count;

   prog_data.barycentric_interp_modes =
      brw_compute_barycentric_interp_modes(brw, key->flat_shade,
                                           key->persample_shading,
d183 2
a184 4
   program = brw_wm_fs_emit(brw, mem_ctx, key, &prog_data,
                            &fp->program, prog, &program_size);
   if (program == NULL) {
      ralloc_free(mem_ctx);
a185 1
   }
d187 8
a194 1
   if (prog_data.base.total_scratch) {
d196 1
a196 1
			 prog_data.base.total_scratch * brw->max_wm_threads);
d203 1
a203 1
		    key, sizeof(struct brw_wm_prog_key),
d205 1
a205 1
		    &prog_data, sizeof(prog_data),
d208 1
a208 1
   ralloc_free(mem_ctx);
@


1.1.1.9
log
@Import Mesa 10.2.9
@
text
@d43 1
a43 1
#include "glsl/ralloc.h"
d149 2
a150 1
   struct brw_wm_compile *c;
d158 2
a159 1
   c = rzalloc(NULL, struct brw_wm_compile);
d173 9
a181 10
   c->prog_data.base.param = rzalloc_array(NULL, const float *, param_count);
   c->prog_data.base.pull_param =
      rzalloc_array(NULL, const float *, param_count);
   c->prog_data.base.nr_params = param_count;

   memcpy(&c->key, key, sizeof(*key));

   c->prog_data.barycentric_interp_modes =
      brw_compute_barycentric_interp_modes(brw, c->key.flat_shade,
                                           c->key.persample_shading,
d184 4
a187 2
   program = brw_wm_fs_emit(brw, c, &fp->program, prog, &program_size);
   if (program == NULL)
d189 1
d191 1
a191 8
   /* Scratch space is used for register spilling */
   if (c->last_scratch) {
      perf_debug("Fragment shader triggered register spilling.  "
                 "Try reducing the number of live scalar values to "
                 "improve performance.\n");

      c->prog_data.total_scratch = brw_get_scratch_size(c->last_scratch);

d193 1
a193 1
			 c->prog_data.total_scratch * brw->max_wm_threads);
d200 1
a200 1
		    &c->key, sizeof(c->key),
d202 1
a202 1
		    &c->prog_data, sizeof(c->prog_data),
d205 1
a205 1
   ralloc_free(c);
@


