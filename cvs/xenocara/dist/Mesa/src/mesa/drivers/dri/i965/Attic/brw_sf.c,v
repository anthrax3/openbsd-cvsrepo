head	1.12;
access;
symbols
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.11;
commitid	TnlogFl9nOv2eaRf;

1.11
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.10;
commitid	4ry2gvZGMXkCUD2n;

1.10
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.9;
commitid	mcxB0JvoI9gTDYXU;

1.9
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.8;
commitid	WPD6rgPryPkvXOr9;

1.8
date	2013.09.05.14.04.20;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.45;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.45;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.37;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.51;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.11.43;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.48.48;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.12
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */


#include "main/glheader.h"
#include "main/macros.h"
#include "main/mtypes.h"
#include "main/enums.h"
#include "main/fbobject.h"

#include "intel_batchbuffer.h"

#include "brw_defines.h"
#include "brw_context.h"
#include "brw_eu.h"
#include "brw_util.h"
#include "brw_sf.h"
#include "brw_state.h"

#include "glsl/ralloc.h"

static void compile_sf_prog( struct brw_context *brw,
			     struct brw_sf_prog_key *key )
{
   struct brw_sf_compile c;
   const GLuint *program;
   void *mem_ctx;
   GLuint program_size;
   GLuint i;

   memset(&c, 0, sizeof(c));

   mem_ctx = ralloc_context(NULL);
   /* Begin the compilation:
    */
   brw_init_compile(brw, &c.func, mem_ctx);

   c.key = *key;
   c.vue_map = brw->vue_map_geom_out;
   if (c.key.do_point_coord) {
      /*
       * gl_PointCoord is a FS instead of VS builtin variable, thus it's
       * not included in c.vue_map generated in VS stage. Here we add
       * it manually to let SF shader generate the needed interpolation
       * coefficient for FS shader.
       */
      c.vue_map.varying_to_slot[BRW_VARYING_SLOT_PNTC] = c.vue_map.num_slots;
      c.vue_map.slot_to_varying[c.vue_map.num_slots++] = BRW_VARYING_SLOT_PNTC;
   }
   c.urb_entry_read_offset = BRW_SF_URB_ENTRY_READ_OFFSET;
   c.nr_attr_regs = (c.vue_map.num_slots + 1)/2 - c.urb_entry_read_offset;
   c.nr_setup_regs = c.nr_attr_regs;

   c.prog_data.urb_read_length = c.nr_attr_regs;
   c.prog_data.urb_entry_size = c.nr_setup_regs * 2;
   c.has_flat_shading = brw_any_flat_varyings(&key->interpolation_mode);

   /* Which primitive?  Or all three?
    */
   switch (key->primitive) {
   case SF_TRIANGLES:
      c.nr_verts = 3;
      brw_emit_tri_setup( &c, true );
      break;
   case SF_LINES:
      c.nr_verts = 2;
      brw_emit_line_setup( &c, true );
      break;
   case SF_POINTS:
      c.nr_verts = 1;
      if (key->do_point_sprite)
	  brw_emit_point_sprite_setup( &c, true );
      else
	  brw_emit_point_setup( &c, true );
      break;
   case SF_UNFILLED_TRIS:
      c.nr_verts = 3;
      brw_emit_anyprim_setup( &c );
      break;
   default:
      assert(0);
      return;
   }

   /* get the program
    */
   program = brw_get_program(&c.func, &program_size);

   if (unlikely(INTEL_DEBUG & DEBUG_SF)) {
      fprintf(stderr, "sf:\n");
      for (i = 0; i < program_size / sizeof(struct brw_instruction); i++)
	 brw_disasm(stderr, &((struct brw_instruction *)program)[i],
		    brw->gen);
      fprintf(stderr, "\n");
   }

   brw_upload_cache(&brw->cache, BRW_SF_PROG,
		    &c.key, sizeof(c.key),
		    program, program_size,
		    &c.prog_data, sizeof(c.prog_data),
		    &brw->sf.prog_offset, &brw->sf.prog_data);
   ralloc_free(mem_ctx);
}

/* Calculate interpolants for triangle and line rasterization.
 */
static void
brw_upload_sf_prog(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   struct brw_sf_prog_key key;
   /* _NEW_BUFFERS */
   bool render_to_fbo = _mesa_is_user_fbo(ctx->DrawBuffer);

   memset(&key, 0, sizeof(key));

   /* Populate the key, noting state dependencies:
    */
   /* BRW_NEW_VUE_MAP_GEOM_OUT */
   key.attrs = brw->vue_map_geom_out.slots_valid;

   /* BRW_NEW_REDUCED_PRIMITIVE */
   switch (brw->reduced_primitive) {
   case GL_TRIANGLES:
      /* NOTE: We just use the edgeflag attribute as an indicator that
       * unfilled triangles are active.  We don't actually do the
       * edgeflag testing here, it is already done in the clip
       * program.
       */
      if (key.attrs & BITFIELD64_BIT(VARYING_SLOT_EDGE))
	 key.primitive = SF_UNFILLED_TRIS;
      else
	 key.primitive = SF_TRIANGLES;
      break;
   case GL_LINES:
      key.primitive = SF_LINES;
      break;
   case GL_POINTS:
      key.primitive = SF_POINTS;
      break;
   }

   /* _NEW_TRANSFORM */
   key.userclip_active = (ctx->Transform.ClipPlanesEnabled != 0);

   /* _NEW_POINT */
   key.do_point_sprite = ctx->Point.PointSprite;
   if (key.do_point_sprite) {
      int i;

      for (i = 0; i < 8; i++) {
	 if (ctx->Point.CoordReplace[i])
	    key.point_sprite_coord_replace |= (1 << i);
      }
   }
   if (brw->fragment_program->Base.InputsRead & BITFIELD64_BIT(VARYING_SLOT_PNTC))
      key.do_point_coord = 1;
   /*
    * Window coordinates in a FBO are inverted, which means point
    * sprite origin must be inverted, too.
    */
   if ((ctx->Point.SpriteOrigin == GL_LOWER_LEFT) != render_to_fbo)
      key.sprite_origin_lower_left = true;

   /* BRW_NEW_INTERPOLATION_MAP */
   key.interpolation_mode = brw->interpolation_mode;

   /* _NEW_LIGHT | _NEW_PROGRAM */
   key.do_twoside_color = ((ctx->Light.Enabled && ctx->Light.Model.TwoSide) ||
                           ctx->VertexProgram._TwoSideEnabled);

   /* _NEW_POLYGON */
   if (key.do_twoside_color) {
      /* If we're rendering to a FBO, we have to invert the polygon
       * face orientation, just as we invert the viewport in
       * sf_unit_create_from_key().
       */
      key.frontface_ccw = (ctx->Polygon.FrontFace == GL_CCW) != render_to_fbo;
   }

   if (!brw_search_cache(&brw->cache, BRW_SF_PROG,
			 &key, sizeof(key),
			 &brw->sf.prog_offset, &brw->sf.prog_data)) {
      compile_sf_prog( brw, &key );
   }
}


const struct brw_tracked_state brw_sf_prog = {
   .dirty = {
      .mesa  = (_NEW_HINT | _NEW_LIGHT | _NEW_POLYGON | _NEW_POINT |
                _NEW_TRANSFORM | _NEW_BUFFERS | _NEW_PROGRAM),
      .brw   = (BRW_NEW_REDUCED_PRIMITIVE |
                BRW_NEW_VUE_MAP_GEOM_OUT |
                BRW_NEW_INTERPOLATION_MAP)
   },
   .emit = brw_upload_sf_prog
};

@


1.11
log
@Merge Mesa 10.2.9
@
text
@@


1.10
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d48 1
a48 1
#include "util/ralloc.h"
d57 1
d109 2
a110 1
      unreachable("not reached");
a112 5
   /* FINISHME: SF programs use calculated jumps (i.e., JMPI with a register
    * source). Compacting would be difficult.
    */
   /* brw_compact_instructions(&c.func, 0, 0, NULL); */

d119 3
a121 1
      brw_disassemble(brw, c.func.store, 0, program_size, stderr);
@


1.9
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d48 1
a48 1
#include "glsl/ralloc.h"
a56 1
   GLuint i;
d108 1
a108 2
      assert(0);
      return;
d111 5
d122 1
a122 3
      for (i = 0; i < program_size / sizeof(struct brw_instruction); i++)
	 brw_disasm(stderr, &((struct brw_instruction *)program)[i],
		    brw->gen);
@


1.8
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d31 1
a31 1
  
d84 1
d86 1
a86 1
   /* Which primitive?  Or all three? 
d118 1
a118 1
      printf("sf:\n");
d120 1
a120 1
	 brw_disasm(stdout, &((struct brw_instruction *)program)[i],
d122 1
a122 1
      printf("\n");
d152 1
a152 1
   case GL_TRIANGLES: 
d163 2
a164 2
   case GL_LINES: 
      key.primitive = SF_LINES; 
d166 2
a167 2
   case GL_POINTS: 
      key.primitive = SF_POINTS; 
d193 3
a196 1
   key.do_flat_shading = (ctx->Light.ShadeModel == GL_FLAT);
d221 3
a223 1
      .brw   = (BRW_NEW_REDUCED_PRIMITIVE | BRW_NEW_VUE_MAP_GEOM_OUT)
@


1.7
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d35 1
d37 1
d48 1
a48 1
#include "../glsl/ralloc.h"
a52 1
   struct intel_context *intel = &brw->intel;
d57 1
a57 1
   GLuint i, idx;
d67 14
a80 4
   c.nr_attrs = brw_count_bits(c.key.attrs);
   c.nr_attr_regs = (c.nr_attrs+1)/2;
   c.nr_setup_attrs = brw_count_bits(c.key.attrs);
   c.nr_setup_regs = (c.nr_setup_attrs+1)/2;
a84 10
   /* Construct map from attribute number to position in the vertex.
    */
   for (i = idx = 0; i < VERT_RESULT_MAX; i++) {
      if (c.key.attrs & BITFIELD64_BIT(i)) {
	 c.attr_to_idx[i] = idx;
	 c.idx_to_attr[idx] = i;
	 idx++;
      }
   }

d90 1
a90 1
      brw_emit_tri_setup( &c, GL_TRUE );
d94 1
a94 1
      brw_emit_line_setup( &c, GL_TRUE );
d99 1
a99 1
	  brw_emit_point_sprite_setup( &c, GL_TRUE );
d101 1
a101 1
	  brw_emit_point_setup( &c, GL_TRUE );
d120 1
a120 1
		    intel->gen);
d134 2
a135 1
static void upload_sf_prog(struct brw_context *brw)
d137 1
a137 1
   struct gl_context *ctx = &brw->intel.ctx;
d139 2
d146 2
a147 2
   /* CACHE_NEW_VS_PROG */
   key.attrs = brw->vs.prog_data->outputs_written; 
d150 1
a150 1
   switch (brw->intel.reduced_primitive) {
d157 1
a157 1
      if (key.attrs & BITFIELD64_BIT(VERT_RESULT_EDGE))
d170 3
d183 10
a192 2
   key.sprite_origin_lower_left = (ctx->Point.SpriteOrigin == GL_LOWER_LEFT);
   /* _NEW_LIGHT */
d194 2
a195 1
   key.do_twoside_color = (ctx->Light.Enabled && ctx->Light.Model.TwoSide);
d201 1
a201 2
       * sf_unit_create_from_key().  ctx->DrawBuffer->Name will be
       * nonzero if we're rendering to such an FBO.
d203 1
a203 1
      key.frontface_ccw = (ctx->Polygon.FrontFace == GL_CCW) ^ (ctx->DrawBuffer->Name != 0);
d216 3
a218 3
      .mesa  = (_NEW_HINT | _NEW_LIGHT | _NEW_POLYGON | _NEW_POINT),
      .brw   = (BRW_NEW_REDUCED_PRIMITIVE),
      .cache = CACHE_NEW_VS_PROG
d220 1
a220 1
   .prepare = upload_sf_prog
@


1.6
log
@Merge Mesa 7.10.3
@
text
@d46 2
d54 1
d60 1
d63 1
a63 1
   brw_init_compile(brw, &c.func);
d123 6
a128 10
   /* Upload
    */
   drm_intel_bo_unreference(brw->sf.prog_bo);
   brw->sf.prog_bo = brw_upload_cache_with_auxdata(&brw->cache, BRW_SF_PROG,
						   &c.key, sizeof(c.key),
						   NULL, 0,
						   program, program_size,
						   &c.prog_data,
						   sizeof(c.prog_data),
						   &brw->sf.prog_data);
a180 3
   /* _NEW_HINT */
   key.linear_color = (ctx->Hint.PerspectiveCorrection == GL_FASTEST);

d191 3
a193 6
   drm_intel_bo_unreference(brw->sf.prog_bo);
   brw->sf.prog_bo = brw_search_cache(&brw->cache, BRW_SF_PROG,
				      &key, sizeof(key),
				      NULL, 0,
				      &brw->sf.prog_data);
   if (brw->sf.prog_bo == NULL)
d195 1
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d49 1
d111 8
d121 1
a121 1
   dri_bo_unreference(brw->sf.prog_bo);
d135 1
a135 1
   GLcontext *ctx = &brw->intel.ctx;
d166 1
d194 1
a194 1
   dri_bo_unreference(brw->sf.prog_bo);
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a48 1
   GLcontext *ctx = &brw->intel.ctx;
d63 1
a63 1
   c.nr_setup_attrs = brw_count_bits(c.key.attrs & DO_SETUP_BITS);
d71 2
a72 2
   for (i = idx = 0; i < VERT_RESULT_MAX; i++) 
      if (c.key.attrs & (1<<i)) {
a74 7
	 if (i >= VERT_RESULT_TEX0 && i <= VERT_RESULT_TEX7) {
            c.point_attrs[i].CoordReplace = 
               ctx->Point.CoordReplace[i - VERT_RESULT_TEX0];
	 }
         else {
            c.point_attrs[i].CoordReplace = GL_FALSE;
         }
d77 2
a78 1
   
d113 7
a119 6
   brw->sf.prog_bo = brw_upload_cache( &brw->cache, BRW_SF_PROG,
				       &c.key, sizeof(c.key),
				       NULL, 0,
				       program, program_size,
				       &c.prog_data,
				       &brw->sf.prog_data );
d144 1
a144 1
      if (key.attrs & (1<<VERT_RESULT_EDGE))
d158 9
a166 1
   key.SpriteOrigin = ctx->Point.SpriteOrigin;
d171 3
d196 1
a196 1
      .mesa  = (_NEW_LIGHT|_NEW_POLYGON|_NEW_POINT),
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d33 3
a35 3
#include "glheader.h"
#include "macros.h"
#include "enums.h"
d49 1
d77 6
a82 4
		 c.point_attrs[i].CoordReplace = 
			brw->attribs.Point->CoordReplace[i - VERT_RESULT_TEX0];
	 } else
		 c.point_attrs[i].CoordReplace = GL_FALSE;
a111 1
	 
d130 1
a130 1
static int upload_sf_prog( struct brw_context *brw )
d132 1
d163 2
a164 2
   key.do_point_sprite = brw->attribs.Point->PointSprite;
   key.SpriteOrigin = brw->attribs.Point->SpriteOrigin;
d166 2
a167 2
   key.do_flat_shading = (brw->attribs.Light->ShadeModel == GL_FLAT);
   key.do_twoside_color = (brw->attribs.Light->Enabled && brw->attribs.Light->Model.TwoSide);
d170 8
a177 2
   if (key.do_twoside_color)
      key.frontface_ccw = (brw->attribs.Polygon->FrontFace == GL_CCW);
a185 1
   return dri_bufmgr_check_aperture_space(brw->sf.prog_bo);
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@a45 2
#define DO_SETUP_BITS ((1<<FRAG_ATTRIB_MAX)-1)

d75 5
d96 4
a99 1
      brw_emit_point_setup( &c, GL_TRUE );
d117 7
a123 7
   brw->sf.prog_gs_offset = brw_upload_cache( &brw->cache[BRW_SF_PROG],
					      &c.key,
					      sizeof(c.key),
					      program,
					      program_size,
					      &c.prog_data,
					      &brw->sf.prog_data );
a125 11

static GLboolean search_cache( struct brw_context *brw, 
			       struct brw_sf_prog_key *key )
{
   return brw_search_cache(&brw->cache[BRW_SF_PROG], 
			   key, sizeof(*key),
			   &brw->sf.prog_data,
			   &brw->sf.prog_gs_offset);
}


d128 1
a128 1
static void upload_sf_prog( struct brw_context *brw )
d160 2
a161 1

d170 6
a175 2

   if (!search_cache(brw, &key))
d177 1
d183 1
a183 1
      .mesa  = (_NEW_LIGHT|_NEW_POLYGON),
d187 1
a187 1
   .update = upload_sf_prog
@


1.1
log
@Initial revision
@
text
@d60 1
a60 1
   brw_init_compile(&c.func);
d85 1
a85 1
      brw_emit_tri_setup( &c );
d89 1
a89 1
      brw_emit_line_setup( &c );
d93 1
a93 1
      brw_emit_point_setup( &c );
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d33 3
a35 3
#include "main/glheader.h"
#include "main/macros.h"
#include "main/enums.h"
d46 2
a50 1
   struct intel_context *intel = &brw->intel;
d60 1
a60 1
   brw_init_compile(brw, &c.func);
d65 1
a65 1
   c.nr_setup_attrs = brw_count_bits(c.key.attrs);
d73 2
a74 2
   for (i = idx = 0; i < VERT_RESULT_MAX; i++) {
      if (c.key.attrs & BITFIELD64_BIT(i)) {
d79 1
a79 2
   }

d85 1
a85 1
      brw_emit_tri_setup( &c, GL_TRUE );
d89 1
a89 1
      brw_emit_line_setup( &c, GL_TRUE );
d93 1
a93 4
      if (key->do_point_sprite)
	  brw_emit_point_sprite_setup( &c, GL_TRUE );
      else
	  brw_emit_point_setup( &c, GL_TRUE );
d103 1
a108 8
   if (unlikely(INTEL_DEBUG & DEBUG_SF)) {
      printf("sf:\n");
      for (i = 0; i < program_size / sizeof(struct brw_instruction); i++)
	 brw_disasm(stdout, &((struct brw_instruction *)program)[i],
		    intel->gen);
      printf("\n");
   }

d111 17
a127 8
   drm_intel_bo_unreference(brw->sf.prog_bo);
   brw->sf.prog_bo = brw_upload_cache_with_auxdata(&brw->cache, BRW_SF_PROG,
						   &c.key, sizeof(c.key),
						   NULL, 0,
						   program, program_size,
						   &c.prog_data,
						   sizeof(c.prog_data),
						   &brw->sf.prog_data);
d130 1
d133 1
a133 1
static void upload_sf_prog(struct brw_context *brw)
a134 1
   struct gl_context *ctx = &brw->intel.ctx;
d152 1
a152 1
      if (key.attrs & BITFIELD64_BIT(VERT_RESULT_EDGE))
d165 1
a165 11
   /* _NEW_POINT */
   key.do_point_sprite = ctx->Point.PointSprite;
   if (key.do_point_sprite) {
      int i;

      for (i = 0; i < 8; i++) {
	 if (ctx->Point.CoordReplace[i])
	    key.point_sprite_coord_replace |= (1 << i);
      }
   }
   key.sprite_origin_lower_left = (ctx->Point.SpriteOrigin == GL_LOWER_LEFT);
d167 2
a168 2
   key.do_flat_shading = (ctx->Light.ShadeModel == GL_FLAT);
   key.do_twoside_color = (ctx->Light.Enabled && ctx->Light.Model.TwoSide);
d170 3
a172 2
   /* _NEW_HINT */
   key.linear_color = (ctx->Hint.PerspectiveCorrection == GL_FASTEST);
a173 9
   /* _NEW_POLYGON */
   if (key.do_twoside_color) {
      /* If we're rendering to a FBO, we have to invert the polygon
       * face orientation, just as we invert the viewport in
       * sf_unit_create_from_key().  ctx->DrawBuffer->Name will be
       * nonzero if we're rendering to such an FBO.
       */
      key.frontface_ccw = (ctx->Polygon.FrontFace == GL_CCW) ^ (ctx->DrawBuffer->Name != 0);
   }
d175 1
a175 6
   drm_intel_bo_unreference(brw->sf.prog_bo);
   brw->sf.prog_bo = brw_search_cache(&brw->cache, BRW_SF_PROG,
				      &key, sizeof(key),
				      NULL, 0,
				      &brw->sf.prog_data);
   if (brw->sf.prog_bo == NULL)
d182 1
a182 1
      .mesa  = (_NEW_HINT | _NEW_LIGHT | _NEW_POLYGON | _NEW_POINT),
d186 1
a186 1
   .prepare = upload_sf_prog
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@a34 1
#include "main/mtypes.h"
a35 1
#include "main/fbobject.h"
a45 2
#include "glsl/ralloc.h"

d49 1
a51 1
   void *mem_ctx;
d53 1
a53 1
   GLuint i;
a56 1
   mem_ctx = ralloc_context(NULL);
d59 1
a59 1
   brw_init_compile(brw, &c.func, mem_ctx);
d62 4
a65 14
   c.vue_map = brw->vue_map_geom_out;
   if (c.key.do_point_coord) {
      /*
       * gl_PointCoord is a FS instead of VS builtin variable, thus it's
       * not included in c.vue_map generated in VS stage. Here we add
       * it manually to let SF shader generate the needed interpolation
       * coefficient for FS shader.
       */
      c.vue_map.varying_to_slot[BRW_VARYING_SLOT_PNTC] = c.vue_map.num_slots;
      c.vue_map.slot_to_varying[c.vue_map.num_slots++] = BRW_VARYING_SLOT_PNTC;
   }
   c.urb_entry_read_offset = BRW_SF_URB_ENTRY_READ_OFFSET;
   c.nr_attr_regs = (c.vue_map.num_slots + 1)/2 - c.urb_entry_read_offset;
   c.nr_setup_regs = c.nr_attr_regs;
d70 10
d85 1
a85 1
      brw_emit_tri_setup( &c, true );
d89 1
a89 1
      brw_emit_line_setup( &c, true );
d94 1
a94 1
	  brw_emit_point_sprite_setup( &c, true );
d96 1
a96 1
	  brw_emit_point_setup( &c, true );
d115 1
a115 1
		    brw->gen);
d119 10
a128 6
   brw_upload_cache(&brw->cache, BRW_SF_PROG,
		    &c.key, sizeof(c.key),
		    program, program_size,
		    &c.prog_data, sizeof(c.prog_data),
		    &brw->sf.prog_offset, &brw->sf.prog_data);
   ralloc_free(mem_ctx);
d133 1
a133 2
static void
brw_upload_sf_prog(struct brw_context *brw)
d135 1
a135 1
   struct gl_context *ctx = &brw->ctx;
a136 2
   /* _NEW_BUFFERS */
   bool render_to_fbo = _mesa_is_user_fbo(ctx->DrawBuffer);
d142 2
a143 2
   /* BRW_NEW_VUE_MAP_GEOM_OUT */
   key.attrs = brw->vue_map_geom_out.slots_valid;
d146 1
a146 1
   switch (brw->reduced_primitive) {
d153 1
a153 1
      if (key.attrs & BITFIELD64_BIT(VARYING_SLOT_EDGE))
a165 3
   /* _NEW_TRANSFORM */
   key.userclip_active = (ctx->Transform.ClipPlanesEnabled != 0);

d176 4
a179 8
   if (brw->fragment_program->Base.InputsRead & BITFIELD64_BIT(VARYING_SLOT_PNTC))
      key.do_point_coord = 1;
   /*
    * Window coordinates in a FBO are inverted, which means point
    * sprite origin must be inverted, too.
    */
   if ((ctx->Point.SpriteOrigin == GL_LOWER_LEFT) != render_to_fbo)
      key.sprite_origin_lower_left = true;
d181 2
a182 4
   /* _NEW_LIGHT | _NEW_PROGRAM */
   key.do_flat_shading = (ctx->Light.ShadeModel == GL_FLAT);
   key.do_twoside_color = ((ctx->Light.Enabled && ctx->Light.Model.TwoSide) ||
                           ctx->VertexProgram._TwoSideEnabled);
d188 2
a189 1
       * sf_unit_create_from_key().
d191 1
a191 1
      key.frontface_ccw = (ctx->Polygon.FrontFace == GL_CCW) != render_to_fbo;
d194 6
a199 3
   if (!brw_search_cache(&brw->cache, BRW_SF_PROG,
			 &key, sizeof(key),
			 &brw->sf.prog_offset, &brw->sf.prog_data)) {
a200 1
   }
d206 3
a208 3
      .mesa  = (_NEW_HINT | _NEW_LIGHT | _NEW_POLYGON | _NEW_POINT |
                _NEW_TRANSFORM | _NEW_BUFFERS | _NEW_PROGRAM),
      .brw   = (BRW_NEW_REDUCED_PRIMITIVE | BRW_NEW_VUE_MAP_GEOM_OUT)
d210 1
a210 1
   .emit = brw_upload_sf_prog
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d31 1
a31 1

a83 1
   c.has_flat_shading = brw_any_flat_varyings(&key->interpolation_mode);
d85 1
a85 1
   /* Which primitive?  Or all three?
d117 1
a117 1
      fprintf(stderr, "sf:\n");
d119 1
a119 1
	 brw_disasm(stderr, &((struct brw_instruction *)program)[i],
d121 1
a121 1
      fprintf(stderr, "\n");
d151 1
a151 1
   case GL_TRIANGLES:
d162 2
a163 2
   case GL_LINES:
      key.primitive = SF_LINES;
d165 2
a166 2
   case GL_POINTS:
      key.primitive = SF_POINTS;
a191 3
   /* BRW_NEW_INTERPOLATION_MAP */
   key.interpolation_mode = brw->interpolation_mode;

d193 1
d218 1
a218 3
      .brw   = (BRW_NEW_REDUCED_PRIMITIVE |
                BRW_NEW_VUE_MAP_GEOM_OUT |
                BRW_NEW_INTERPOLATION_MAP)
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d48 1
a48 1
#include "util/ralloc.h"
d57 1
d109 2
a110 1
      unreachable("not reached");
a112 5
   /* FINISHME: SF programs use calculated jumps (i.e., JMPI with a register
    * source). Compacting would be difficult.
    */
   /* brw_compact_instructions(&c.func, 0, 0, NULL); */

d119 3
a121 1
      brw_disassemble(brw, c.func.store, 0, program_size, stderr);
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d48 1
a48 1
#include "glsl/ralloc.h"
a56 1
   GLuint i;
d108 1
a108 2
      assert(0);
      return;
d111 5
d122 1
a122 3
      for (i = 0; i < program_size / sizeof(struct brw_instruction); i++)
	 brw_disasm(stderr, &((struct brw_instruction *)program)[i],
		    brw->gen);
@


