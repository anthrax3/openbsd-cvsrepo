head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.04.24;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.38;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.43;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.52;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <eric@@anholt.net>
 *
 */

#include "brw_context.h"
#include "brw_state.h"
#include "brw_defines.h"
#include "intel_batchbuffer.h"
#include "main/fbobject.h"
#include "main/framebuffer.h"

static void
gen6_upload_scissor_state(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   const bool render_to_fbo = _mesa_is_user_fbo(ctx->DrawBuffer);
   struct gen6_scissor_rect *scissor;
   uint32_t scissor_state_offset;

   scissor = brw_state_batch(brw, AUB_TRACE_SCISSOR_STATE,
			     sizeof(*scissor) * ctx->Const.MaxViewports, 32,
                             &scissor_state_offset);

   /* _NEW_SCISSOR | _NEW_BUFFERS | _NEW_VIEWPORT */

   /* The scissor only needs to handle the intersection of drawable and
    * scissor rect.  Clipping to the boundaries of static shared buffers
    * for front/back/depth is covered by looping over cliprects in brw_draw.c.
    *
    * Note that the hardware's coordinates are inclusive, while Mesa's min is
    * inclusive but max is exclusive.
    */
   for (unsigned i = 0; i < ctx->Const.MaxViewports; i++) {
      int bbox[4];

      _mesa_scissor_bounding_box(ctx, ctx->DrawBuffer, i, bbox);

      if (bbox[0] == bbox[1] || bbox[2] == bbox[3]) {
         /* If the scissor was out of bounds and got clamped to 0 width/height
          * at the bounds, the subtraction of 1 from maximums could produce a
          * negative number and thus not clip anything.  Instead, just provide
          * a min > max scissor inside the bounds, which produces the expected
          * no rendering.
          */
         scissor[i].xmin = 1;
         scissor[i].xmax = 0;
         scissor[i].ymin = 1;
         scissor[i].ymax = 0;
      } else if (render_to_fbo) {
         /* texmemory: Y=0=bottom */
         scissor[i].xmin = bbox[0];
         scissor[i].xmax = bbox[1] - 1;
         scissor[i].ymin = bbox[2];
         scissor[i].ymax = bbox[3] - 1;
      }
      else {
         /* memory: Y=0=top */
         scissor[i].xmin = bbox[0];
         scissor[i].xmax = bbox[1] - 1;
         scissor[i].ymin = ctx->DrawBuffer->Height - bbox[3];
         scissor[i].ymax = ctx->DrawBuffer->Height - bbox[2] - 1;
      }
   }
   BEGIN_BATCH(2);
   OUT_BATCH(_3DSTATE_SCISSOR_STATE_POINTERS << 16 | (2 - 2));
   OUT_BATCH(scissor_state_offset);
   ADVANCE_BATCH();
}

const struct brw_tracked_state gen6_scissor_state = {
   .dirty = {
      .mesa = _NEW_SCISSOR | _NEW_BUFFERS | _NEW_VIEWPORT,
      .brw = BRW_NEW_BATCH,
      .cache = 0,
   },
   .emit = gen6_upload_scissor_state,
};
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d33 1
d44 2
a45 1
			     sizeof(*scissor), 32, &scissor_state_offset);
d56 30
a85 18
   if (ctx->DrawBuffer->_Xmin == ctx->DrawBuffer->_Xmax ||
       ctx->DrawBuffer->_Ymin == ctx->DrawBuffer->_Ymax) {
      /* If the scissor was out of bounds and got clamped to 0
       * width/height at the bounds, the subtraction of 1 from
       * maximums could produce a negative number and thus not clip
       * anything.  Instead, just provide a min > max scissor inside
       * the bounds, which produces the expected no rendering.
       */
      scissor->xmin = 1;
      scissor->xmax = 0;
      scissor->ymin = 1;
      scissor->ymax = 0;
   } else if (render_to_fbo) {
      /* texmemory: Y=0=bottom */
      scissor->xmin = ctx->DrawBuffer->_Xmin;
      scissor->xmax = ctx->DrawBuffer->_Xmax - 1;
      scissor->ymin = ctx->DrawBuffer->_Ymin;
      scissor->ymax = ctx->DrawBuffer->_Ymax - 1;
a86 8
   else {
      /* memory: Y=0=top */
      scissor->xmin = ctx->DrawBuffer->_Xmin;
      scissor->xmax = ctx->DrawBuffer->_Xmax - 1;
      scissor->ymin = ctx->DrawBuffer->Height - ctx->DrawBuffer->_Ymax;
      scissor->ymax = ctx->DrawBuffer->Height - ctx->DrawBuffer->_Ymin - 1;
   }

@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d32 1
d37 2
a38 3
   struct intel_context *intel = &brw->intel;
   struct gl_context *ctx = &intel->ctx;
   const GLboolean render_to_fbo = (ctx->DrawBuffer->Name != 0);
d42 2
a43 1
   scissor = brw_state_batch(brw, sizeof(*scissor), 32, &scissor_state_offset);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d34 1
a34 1
prepare_scissor_state(struct brw_context *brw)
d36 2
a37 1
   struct gl_context *ctx = &brw->intel.ctx;
d39 4
a42 1
   struct gen6_scissor_rect scissor;
d61 4
a64 4
      scissor.xmin = 1;
      scissor.xmax = 0;
      scissor.ymin = 1;
      scissor.ymax = 0;
d67 4
a70 4
      scissor.xmin = ctx->DrawBuffer->_Xmin;
      scissor.xmax = ctx->DrawBuffer->_Xmax - 1;
      scissor.ymin = ctx->DrawBuffer->_Ymin;
      scissor.ymax = ctx->DrawBuffer->_Ymax - 1;
d74 4
a77 4
      scissor.xmin = ctx->DrawBuffer->_Xmin;
      scissor.xmax = ctx->DrawBuffer->_Xmax - 1;
      scissor.ymin = ctx->DrawBuffer->Height - ctx->DrawBuffer->_Ymax;
      scissor.ymax = ctx->DrawBuffer->Height - ctx->DrawBuffer->_Ymin - 1;
a79 18
   drm_intel_bo_unreference(brw->sf.state_bo);
   brw->sf.state_bo = brw_cache_data(&brw->cache, BRW_SF_UNIT,
				     &scissor, sizeof(scissor));
}

const struct brw_tracked_state gen6_scissor_state = {
   .dirty = {
      .mesa = _NEW_SCISSOR | _NEW_BUFFERS | _NEW_VIEWPORT,
      .brw = 0,
      .cache = 0,
   },
   .prepare = prepare_scissor_state,
};

static void upload_scissor_state_pointers(struct brw_context *brw)
{
   struct intel_context *intel = &brw->intel;

d82 1
a82 1
   OUT_RELOC(brw->sf.state_bo, I915_GEM_DOMAIN_INSTRUCTION, 0, 0);
a83 1

d86 1
a86 7

static void prepare_scissor_state_pointers(struct brw_context *brw)
{
   brw_add_validated_bo(brw, brw->sf.state_bo);
}

const struct brw_tracked_state gen6_scissor_state_pointers = {
d88 1
a88 1
      .mesa = 0,
d90 1
a90 1
      .cache = CACHE_NEW_SF_UNIT
d92 1
a92 2
   .prepare = prepare_scissor_state_pointers,
   .emit = upload_scissor_state_pointers,
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d36 1
a36 1
   GLcontext *ctx = &brw->intel.ctx;
d38 1
a38 1
   struct gen6_scissor_state scissor;
d49 13
a61 1
   if (render_to_fbo) {
d78 1
a78 2
				     &scissor, sizeof(scissor),
				     NULL, 0);
d95 1
a95 1
   OUT_BATCH(CMD_3D_SCISSOR_STATE_POINTERS << 16 | (2 - 2));
a98 1
   intel_batchbuffer_emit_mi_flush(intel->batch);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d36 1
a36 1
   struct gl_context *ctx = &brw->intel.ctx;
d38 1
a38 1
   struct gen6_scissor_rect scissor;
d49 1
a49 13
   if (ctx->DrawBuffer->_Xmin == ctx->DrawBuffer->_Xmax ||
       ctx->DrawBuffer->_Ymin == ctx->DrawBuffer->_Ymax) {
      /* If the scissor was out of bounds and got clamped to 0
       * width/height at the bounds, the subtraction of 1 from
       * maximums could produce a negative number and thus not clip
       * anything.  Instead, just provide a min > max scissor inside
       * the bounds, which produces the expected no rendering.
       */
      scissor.xmin = 1;
      scissor.xmax = 0;
      scissor.ymin = 1;
      scissor.ymax = 0;
   } else if (render_to_fbo) {
d66 2
a67 1
				     &scissor, sizeof(scissor));
d84 1
a84 1
   OUT_BATCH(_3DSTATE_SCISSOR_STATE_POINTERS << 16 | (2 - 2));
d88 1
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a31 1
#include "main/fbobject.h"
d34 1
a34 1
gen6_upload_scissor_state(struct brw_context *brw)
d36 3
a38 7
   struct gl_context *ctx = &brw->ctx;
   const bool render_to_fbo = _mesa_is_user_fbo(ctx->DrawBuffer);
   struct gen6_scissor_rect *scissor;
   uint32_t scissor_state_offset;

   scissor = brw_state_batch(brw, AUB_TRACE_SCISSOR_STATE,
			     sizeof(*scissor), 32, &scissor_state_offset);
d57 4
a60 4
      scissor->xmin = 1;
      scissor->xmax = 0;
      scissor->ymin = 1;
      scissor->ymax = 0;
d63 4
a66 4
      scissor->xmin = ctx->DrawBuffer->_Xmin;
      scissor->xmax = ctx->DrawBuffer->_Xmax - 1;
      scissor->ymin = ctx->DrawBuffer->_Ymin;
      scissor->ymax = ctx->DrawBuffer->_Ymax - 1;
d70 4
a73 4
      scissor->xmin = ctx->DrawBuffer->_Xmin;
      scissor->xmax = ctx->DrawBuffer->_Xmax - 1;
      scissor->ymin = ctx->DrawBuffer->Height - ctx->DrawBuffer->_Ymax;
      scissor->ymax = ctx->DrawBuffer->Height - ctx->DrawBuffer->_Ymin - 1;
d76 18
d96 1
a96 1
   OUT_BATCH(scissor_state_offset);
d98 1
d101 7
a107 1
const struct brw_tracked_state gen6_scissor_state = {
d109 1
a109 1
      .mesa = _NEW_SCISSOR | _NEW_BUFFERS | _NEW_VIEWPORT,
d111 1
a111 1
      .cache = 0,
d113 2
a114 1
   .emit = gen6_upload_scissor_state,
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a32 1
#include "main/framebuffer.h"
d43 1
a43 2
			     sizeof(*scissor) * ctx->Const.MaxViewports, 32,
                             &scissor_state_offset);
d54 26
a79 2
   for (unsigned i = 0; i < ctx->Const.MaxViewports; i++) {
      int bbox[4];
a80 28
      _mesa_scissor_bounding_box(ctx, ctx->DrawBuffer, i, bbox);

      if (bbox[0] == bbox[1] || bbox[2] == bbox[3]) {
         /* If the scissor was out of bounds and got clamped to 0 width/height
          * at the bounds, the subtraction of 1 from maximums could produce a
          * negative number and thus not clip anything.  Instead, just provide
          * a min > max scissor inside the bounds, which produces the expected
          * no rendering.
          */
         scissor[i].xmin = 1;
         scissor[i].xmax = 0;
         scissor[i].ymin = 1;
         scissor[i].ymax = 0;
      } else if (render_to_fbo) {
         /* texmemory: Y=0=bottom */
         scissor[i].xmin = bbox[0];
         scissor[i].xmax = bbox[1] - 1;
         scissor[i].ymin = bbox[2];
         scissor[i].ymax = bbox[3] - 1;
      }
      else {
         /* memory: Y=0=top */
         scissor[i].xmin = bbox[0];
         scissor[i].xmax = bbox[1] - 1;
         scissor[i].ymin = ctx->DrawBuffer->Height - bbox[3];
         scissor[i].ymax = ctx->DrawBuffer->Height - bbox[2] - 1;
      }
   }
@


