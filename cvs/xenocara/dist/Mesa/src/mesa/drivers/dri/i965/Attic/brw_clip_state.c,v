head	1.10;
access;
symbols
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.9;
commitid	TnlogFl9nOv2eaRf;

1.9
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.8;
commitid	WPD6rgPryPkvXOr9;

1.8
date	2013.09.05.14.04.16;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.40;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.40;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.27;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.48;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.10
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */

#include "brw_context.h"
#include "brw_state.h"
#include "brw_defines.h"

static void
upload_clip_vp(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   struct brw_clipper_viewport *vp;

   vp = brw_state_batch(brw, AUB_TRACE_CLIP_VP_STATE,
                        sizeof(*vp), 32, &brw->clip.vp_offset);

   const float maximum_post_clamp_delta = 4096;
   float gbx = maximum_post_clamp_delta / ctx->ViewportArray[0].Width;
   float gby = maximum_post_clamp_delta / ctx->ViewportArray[0].Height;

   vp->xmin = -gbx;
   vp->xmax = gbx;
   vp->ymin = -gby;
   vp->ymax = gby;
}

static void
brw_upload_clip_unit(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   struct brw_clip_unit_state *clip;

   /* _NEW_BUFFERS */
   struct gl_framebuffer *fb = ctx->DrawBuffer;

   upload_clip_vp(brw);

   clip = brw_state_batch(brw, AUB_TRACE_CLIP_STATE,
			  sizeof(*clip), 32, &brw->clip.state_offset);
   memset(clip, 0, sizeof(*clip));

   /* BRW_NEW_PROGRAM_CACHE | CACHE_NEW_CLIP_PROG */
   clip->thread0.grf_reg_count = (ALIGN(brw->clip.prog_data->total_grf, 16) /
				 16 - 1);
   clip->thread0.kernel_start_pointer =
      brw_program_reloc(brw,
			brw->clip.state_offset +
			offsetof(struct brw_clip_unit_state, thread0),
			brw->clip.prog_offset +
			(clip->thread0.grf_reg_count << 1)) >> 6;

   clip->thread1.floating_point_mode = BRW_FLOATING_POINT_NON_IEEE_754;
   clip->thread1.single_program_flow = 1;

   clip->thread3.urb_entry_read_length = brw->clip.prog_data->urb_read_length;
   clip->thread3.const_urb_entry_read_length =
      brw->clip.prog_data->curb_read_length;

   /* BRW_NEW_CURBE_OFFSETS */
   clip->thread3.const_urb_entry_read_offset = brw->curbe.clip_start * 2;
   clip->thread3.dispatch_grf_start_reg = 1;
   clip->thread3.urb_entry_read_offset = 0;

   /* BRW_NEW_URB_FENCE */
   clip->thread4.nr_urb_entries = brw->urb.nr_clip_entries;
   clip->thread4.urb_entry_allocation_size = brw->urb.vsize - 1;
   /* If we have enough clip URB entries to run two threads, do so.
    */
   if (brw->urb.nr_clip_entries >= 10) {
      /* Half of the URB entries go to each thread, and it has to be an
       * even number.
       */
      assert(brw->urb.nr_clip_entries % 2 == 0);

      /* Although up to 16 concurrent Clip threads are allowed on Ironlake,
       * only 2 threads can output VUEs at a time.
       */
      if (brw->gen == 5)
         clip->thread4.max_threads = 16 - 1;
      else
         clip->thread4.max_threads = 2 - 1;
   } else {
      assert(brw->urb.nr_clip_entries >= 5);
      clip->thread4.max_threads = 1 - 1;
   }

   if (unlikely(INTEL_DEBUG & DEBUG_STATS))
      clip->thread4.stats_enable = 1;

   /* _NEW_TRANSFORM */
   if (brw->gen == 5 || brw->is_g4x)
      clip->clip5.userclip_enable_flags = ctx->Transform.ClipPlanesEnabled;
   else
      /* Up to 6 actual clip flags, plus the 7th for negative RHW workaround. */
      clip->clip5.userclip_enable_flags = (ctx->Transform.ClipPlanesEnabled & 0x3f) | 0x40;

   clip->clip5.userclip_must_clip = 1;

   /* enable guardband clipping if we can */
   if (ctx->ViewportArray[0].X == 0 &&
       ctx->ViewportArray[0].Y == 0 &&
       ctx->ViewportArray[0].Width == (float) fb->Width &&
       ctx->ViewportArray[0].Height == (float) fb->Height)
   {
      clip->clip5.guard_band_enable = 1;
      clip->clip6.clipper_viewport_state_ptr =
         (brw->batch.bo->offset64 + brw->clip.vp_offset) >> 5;

      /* emit clip viewport relocation */
      drm_intel_bo_emit_reloc(brw->batch.bo,
                              (brw->clip.state_offset +
                               offsetof(struct brw_clip_unit_state, clip6)),
                              brw->batch.bo, brw->clip.vp_offset,
                              I915_GEM_DOMAIN_INSTRUCTION, 0);
   }

   /* _NEW_TRANSFORM */
   if (!ctx->Transform.DepthClamp)
      clip->clip5.viewport_z_clip_enable = 1;
   clip->clip5.viewport_xy_clip_enable = 1;
   clip->clip5.vertex_position_space = BRW_CLIP_NDCSPACE;
   clip->clip5.api_mode = BRW_CLIP_API_OGL;
   clip->clip5.clip_mode = brw->clip.prog_data->clip_mode;

   if (brw->is_g4x)
      clip->clip5.negative_w_clip_test = 1;

   clip->viewport_xmin = -1;
   clip->viewport_xmax = 1;
   clip->viewport_ymin = -1;
   clip->viewport_ymax = 1;

   brw->state.dirty.cache |= CACHE_NEW_CLIP_UNIT;
}

const struct brw_tracked_state brw_clip_unit = {
   .dirty = {
      .mesa  = _NEW_TRANSFORM | _NEW_BUFFERS | _NEW_VIEWPORT,
      .brw   = (BRW_NEW_BATCH |
		BRW_NEW_PROGRAM_CACHE |
		BRW_NEW_CURBE_OFFSETS |
		BRW_NEW_URB_FENCE),
      .cache = CACHE_NEW_CLIP_PROG
   },
   .emit = brw_upload_clip_unit,
};
@


1.9
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.8
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d46 2
a47 2
   float gbx = maximum_post_clamp_delta / (float) ctx->Viewport.Width;
   float gby = maximum_post_clamp_delta / (float) ctx->Viewport.Height;
d102 1
a102 1
      
d118 7
a124 1
   clip->clip5.userclip_enable_flags = 0x7f;
d128 4
a131 4
   if (ctx->Viewport.X == 0 &&
       ctx->Viewport.Y == 0 &&
       ctx->Viewport.Width == fb->Width &&
       ctx->Viewport.Height == fb->Height)
d135 1
a135 1
         (brw->batch.bo->offset + brw->clip.vp_offset) >> 5;
@


1.7
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d37 1
a37 1
brw_prepare_clip_unit(struct brw_context *brw)
d39 20
a58 2
   struct intel_context *intel = &brw->intel;
   struct gl_context *ctx = &intel->ctx;
d61 7
a67 1
   clip = brw_state_batch(brw, sizeof(*clip), 32, &brw->clip.state_offset);
d106 1
a106 1
      if (intel->gen == 5)
a114 3
   if (unlikely(INTEL_DEBUG & DEBUG_SINGLE_THREAD))
      clip->thread4.max_threads = 0;

d120 20
a139 2
   clip->clip5.guard_band_enable = 0;
   /* _NEW_TRANSOFORM */
d147 1
a147 1
   if (intel->is_g4x)
a149 1
   clip->clip6.clipper_viewport_state_ptr = 0;
d160 1
a160 1
      .mesa  = _NEW_TRANSFORM,
d167 1
a167 1
   .prepare = brw_prepare_clip_unit,
@


1.6
log
@Merge Mesa 7.10.3
@
text
@a35 13
struct brw_clip_unit_key {
   unsigned int total_grf;
   unsigned int urb_entry_read_length;
   unsigned int curb_entry_read_length;
   unsigned int clip_mode;

   unsigned int curbe_offset;

   unsigned int nr_urb_entries, urb_size;

   GLboolean depth_clamp;
};

d37 1
a37 1
clip_unit_populate_key(struct brw_context *brw, struct brw_clip_unit_key *key)
d39 6
a44 2
   struct gl_context *ctx = &brw->intel.ctx;
   memset(key, 0, sizeof(*key));
d46 16
a61 5
   /* CACHE_NEW_CLIP_PROG */
   key->total_grf = brw->clip.prog_data->total_grf;
   key->urb_entry_read_length = brw->clip.prog_data->urb_read_length;
   key->curb_entry_read_length = brw->clip.prog_data->curb_read_length;
   key->clip_mode = brw->clip.prog_data->clip_mode;
d64 3
a66 1
   key->curbe_offset = brw->curbe.clip_start;
d69 2
a70 32
   key->nr_urb_entries = brw->urb.nr_clip_entries;
   key->urb_size = brw->urb.vsize;

   /* _NEW_TRANSOFORM */
   key->depth_clamp = ctx->Transform.DepthClamp;
}

static drm_intel_bo *
clip_unit_create_from_key(struct brw_context *brw,
			  struct brw_clip_unit_key *key)
{
   struct intel_context *intel = &brw->intel;
   struct brw_clip_unit_state clip;
   drm_intel_bo *bo;

   memset(&clip, 0, sizeof(clip));

   clip.thread0.grf_reg_count = ALIGN(key->total_grf, 16) / 16 - 1;
   /* reloc */
   clip.thread0.kernel_start_pointer = brw->clip.prog_bo->offset >> 6;

   clip.thread1.floating_point_mode = BRW_FLOATING_POINT_NON_IEEE_754;
   clip.thread1.single_program_flow = 1;

   clip.thread3.urb_entry_read_length = key->urb_entry_read_length;
   clip.thread3.const_urb_entry_read_length = key->curb_entry_read_length;
   clip.thread3.const_urb_entry_read_offset = key->curbe_offset * 2;
   clip.thread3.dispatch_grf_start_reg = 1;
   clip.thread3.urb_entry_read_offset = 0;

   clip.thread4.nr_urb_entries = key->nr_urb_entries;
   clip.thread4.urb_entry_allocation_size = key->urb_size - 1;
d73 1
a73 1
   if (key->nr_urb_entries >= 10) {
d77 1
a77 1
      assert(key->nr_urb_entries % 2 == 0);
d83 1
a83 1
         clip.thread4.max_threads = 16 - 1;        
d85 1
a85 1
         clip.thread4.max_threads = 2 - 1;
d87 2
a88 2
      assert(key->nr_urb_entries >= 5);
      clip.thread4.max_threads = 1 - 1;
d92 1
a92 1
      clip.thread4.max_threads = 0;
d95 1
a95 1
      clip.thread4.stats_enable = 1;
d97 10
a106 9
   clip.clip5.userclip_enable_flags = 0x7f;
   clip.clip5.userclip_must_clip = 1;
   clip.clip5.guard_band_enable = 0;
   if (!key->depth_clamp)
      clip.clip5.viewport_z_clip_enable = 1;
   clip.clip5.viewport_xy_clip_enable = 1;
   clip.clip5.vertex_position_space = BRW_CLIP_NDCSPACE;
   clip.clip5.api_mode = BRW_CLIP_API_OGL;
   clip.clip5.clip_mode = key->clip_mode;
d109 1
a109 1
      clip.clip5.negative_w_clip_test = 1;
d111 5
a115 16
   clip.clip6.clipper_viewport_state_ptr = 0;
   clip.viewport_xmin = -1;
   clip.viewport_xmax = 1;
   clip.viewport_ymin = -1;
   clip.viewport_ymax = 1;

   bo = brw_upload_cache(&brw->cache, BRW_CLIP_UNIT,
			 key, sizeof(*key),
			 &brw->clip.prog_bo, 1,
			 &clip, sizeof(clip));

   /* Emit clip program relocation */
   assert(brw->clip.prog_bo);
   drm_intel_bo_emit_reloc(bo, offsetof(struct brw_clip_unit_state, thread0),
			   brw->clip.prog_bo, clip.thread0.grf_reg_count << 1,
			   I915_GEM_DOMAIN_INSTRUCTION, 0);
d117 1
a117 17
   return bo;
}

static void upload_clip_unit( struct brw_context *brw )
{
   struct brw_clip_unit_key key;

   clip_unit_populate_key(brw, &key);

   drm_intel_bo_unreference(brw->clip.state_bo);
   brw->clip.state_bo = brw_search_cache(&brw->cache, BRW_CLIP_UNIT,
					 &key, sizeof(key),
					 &brw->clip.prog_bo, 1,
					 NULL);
   if (brw->clip.state_bo == NULL) {
      brw->clip.state_bo = clip_unit_create_from_key(brw, &key);
   }
d123 3
a125 1
      .brw   = (BRW_NEW_CURBE_OFFSETS |
d129 1
a129 1
   .prepare = upload_clip_unit,
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d52 1
a52 1
   GLcontext *ctx = &brw->intel.ctx;
d72 1
a72 1
static dri_bo *
d78 1
a78 1
   dri_bo *bo;
d117 1
a117 1
   if (INTEL_DEBUG & DEBUG_SINGLE_THREAD)
d120 1
a120 1
   if (INTEL_DEBUG & DEBUG_STATS)
d149 3
a151 6
   dri_bo_emit_reloc(bo,
		     I915_GEM_DOMAIN_INSTRUCTION,
		     0,
		     clip.thread0.grf_reg_count << 1,
		     offsetof(struct brw_clip_unit_state, thread0),
		     brw->clip.prog_bo);
d162 1
a162 1
   dri_bo_unreference(brw->clip.state_bo);
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a34 1
#include "main/macros.h"
d45 2
d52 1
d67 3
d76 1
d104 8
a111 1
      clip.thread4.max_threads = 2 - 1;
d126 2
a127 1
   clip.clip5.viewport_z_clip_enable = 1;
d133 1
a133 1
   if (BRW_IS_G4X(brw))
d145 1
a145 2
			 &clip, sizeof(clip),
			 NULL, NULL);
d177 1
a177 1
      .mesa  = 0,
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d35 1
a35 1
#include "macros.h"
d91 15
a105 1
   clip.thread4.max_threads = 1; /* 2 threads */
d119 1
a119 1
   if (BRW_IS_GM45(brw) || BRW_IS_G4X(brw))
d136 6
a141 5
   dri_emit_reloc(bo,
		  DRM_BO_FLAG_MEM_TT | DRM_BO_FLAG_READ,
		  clip.thread0.grf_reg_count << 1,
		  offsetof(struct brw_clip_unit_state, thread0),
		  brw->clip.prog_bo);
d146 1
a146 1
static int upload_clip_unit( struct brw_context *brw )
a148 1
   int ret = 0;
a159 3

   ret = dri_bufmgr_check_aperture_space(brw->clip.state_bo);
   return ret;
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d37 5
d43 1
d45 5
a49 1
static void upload_clip_unit( struct brw_context *brw )
d51 1
a51 3
   struct brw_clip_unit_state clip;

   memset(&clip, 0, sizeof(clip));
d54 4
a57 5
   clip.thread0.grf_reg_count = ((brw->clip.prog_data->total_grf-1) & ~15) / 16;
   clip.thread0.kernel_start_pointer = brw->clip.prog_gs_offset >> 6;
   clip.thread3.urb_entry_read_length = brw->clip.prog_data->urb_read_length;
   clip.thread3.const_urb_entry_read_length = brw->clip.prog_data->curb_read_length;
   clip.clip5.clip_mode = brw->clip.prog_data->clip_mode;
d60 1
a60 1
   clip.thread3.const_urb_entry_read_offset = brw->curbe.clip_start * 2;
d63 3
a65 3
   clip.thread4.nr_urb_entries = brw->urb.nr_clip_entries; 
   clip.thread4.urb_entry_allocation_size = brw->urb.vsize - 1;
   clip.thread4.max_threads = 0; /* Hmm, maybe the max is 1 or 2 threads */
d67 12
a78 2
   if (INTEL_DEBUG & DEBUG_STATS)
      clip.thread4.stats_enable = 1; 
a79 1
   /* CONSTANT */
d82 4
d88 8
d102 2
a103 1
   clip.clip5.api_mode = BRW_CLIP_API_OGL;   
d105 1
a105 1
   if (BRW_IS_IGD(brw))
d114 15
a128 1
   brw->clip.state_gs_offset = brw_cache_data( &brw->cache[BRW_CLIP_UNIT], &clip );
d131 19
d158 1
a158 1
   .update = upload_clip_unit
@


1.1
log
@Initial revision
@
text
@d75 4
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d35 1
a36 5
struct brw_clip_unit_key {
   unsigned int total_grf;
   unsigned int urb_entry_read_length;
   unsigned int curb_entry_read_length;
   unsigned int clip_mode;
a37 1
   unsigned int curbe_offset;
d39 3
a41 1
   unsigned int nr_urb_entries, urb_size;
d43 1
a43 8
   GLboolean depth_clamp;
};

static void
clip_unit_populate_key(struct brw_context *brw, struct brw_clip_unit_key *key)
{
   struct gl_context *ctx = &brw->intel.ctx;
   memset(key, 0, sizeof(*key));
d46 5
a50 4
   key->total_grf = brw->clip.prog_data->total_grf;
   key->urb_entry_read_length = brw->clip.prog_data->urb_read_length;
   key->curb_entry_read_length = brw->clip.prog_data->curb_read_length;
   key->clip_mode = brw->clip.prog_data->clip_mode;
d53 1
a53 1
   key->curbe_offset = brw->curbe.clip_start;
d56 3
a58 16
   key->nr_urb_entries = brw->urb.nr_clip_entries;
   key->urb_size = brw->urb.vsize;

   /* _NEW_TRANSOFORM */
   key->depth_clamp = ctx->Transform.DepthClamp;
}

static drm_intel_bo *
clip_unit_create_from_key(struct brw_context *brw,
			  struct brw_clip_unit_key *key)
{
   struct intel_context *intel = &brw->intel;
   struct brw_clip_unit_state clip;
   drm_intel_bo *bo;

   memset(&clip, 0, sizeof(clip));
d60 2
a61 3
   clip.thread0.grf_reg_count = ALIGN(key->total_grf, 16) / 16 - 1;
   /* reloc */
   clip.thread0.kernel_start_pointer = brw->clip.prog_bo->offset >> 6;
d63 1
a65 4

   clip.thread3.urb_entry_read_length = key->urb_entry_read_length;
   clip.thread3.const_urb_entry_read_length = key->curb_entry_read_length;
   clip.thread3.const_urb_entry_read_offset = key->curbe_offset * 2;
a67 29

   clip.thread4.nr_urb_entries = key->nr_urb_entries;
   clip.thread4.urb_entry_allocation_size = key->urb_size - 1;
   /* If we have enough clip URB entries to run two threads, do so.
    */
   if (key->nr_urb_entries >= 10) {
      /* Half of the URB entries go to each thread, and it has to be an
       * even number.
       */
      assert(key->nr_urb_entries % 2 == 0);
      
      /* Although up to 16 concurrent Clip threads are allowed on Ironlake,
       * only 2 threads can output VUEs at a time.
       */
      if (intel->gen == 5)
         clip.thread4.max_threads = 16 - 1;        
      else
         clip.thread4.max_threads = 2 - 1;
   } else {
      assert(key->nr_urb_entries >= 5);
      clip.thread4.max_threads = 1 - 1;
   }

   if (unlikely(INTEL_DEBUG & DEBUG_SINGLE_THREAD))
      clip.thread4.max_threads = 0;

   if (unlikely(INTEL_DEBUG & DEBUG_STATS))
      clip.thread4.stats_enable = 1;

d71 1
a71 2
   if (!key->depth_clamp)
      clip.clip5.viewport_z_clip_enable = 1;
d74 1
a74 6
   clip.clip5.api_mode = BRW_CLIP_API_OGL;
   clip.clip5.clip_mode = key->clip_mode;

   if (intel->is_g4x)
      clip.clip5.negative_w_clip_test = 1;

d81 1
a81 12
   bo = brw_upload_cache(&brw->cache, BRW_CLIP_UNIT,
			 key, sizeof(*key),
			 &brw->clip.prog_bo, 1,
			 &clip, sizeof(clip));

   /* Emit clip program relocation */
   assert(brw->clip.prog_bo);
   drm_intel_bo_emit_reloc(bo, offsetof(struct brw_clip_unit_state, thread0),
			   brw->clip.prog_bo, clip.thread0.grf_reg_count << 1,
			   I915_GEM_DOMAIN_INSTRUCTION, 0);

   return bo;
a83 15
static void upload_clip_unit( struct brw_context *brw )
{
   struct brw_clip_unit_key key;

   clip_unit_populate_key(brw, &key);

   drm_intel_bo_unreference(brw->clip.state_bo);
   brw->clip.state_bo = brw_search_cache(&brw->cache, BRW_CLIP_UNIT,
					 &key, sizeof(key),
					 &brw->clip.prog_bo, 1,
					 NULL);
   if (brw->clip.state_bo == NULL) {
      brw->clip.state_bo = clip_unit_create_from_key(brw, &key);
   }
}
d87 1
a87 1
      .mesa  = _NEW_TRANSFORM,
d92 1
a92 1
   .prepare = upload_clip_unit,
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d36 7
a42 5
static void
upload_clip_vp(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   struct brw_clipper_viewport *vp;
d44 1
a44 2
   vp = brw_state_batch(brw, AUB_TRACE_CLIP_VP_STATE,
                        sizeof(*vp), 32, &brw->clip.vp_offset);
d46 2
a47 9
   const float maximum_post_clamp_delta = 4096;
   float gbx = maximum_post_clamp_delta / (float) ctx->Viewport.Width;
   float gby = maximum_post_clamp_delta / (float) ctx->Viewport.Height;

   vp->xmin = -gbx;
   vp->xmax = gbx;
   vp->ymin = -gby;
   vp->ymax = gby;
}
d50 1
a50 1
brw_upload_clip_unit(struct brw_context *brw)
d52 2
a53 2
   struct gl_context *ctx = &brw->ctx;
   struct brw_clip_unit_state *clip;
d55 5
a59 2
   /* _NEW_BUFFERS */
   struct gl_framebuffer *fb = ctx->DrawBuffer;
d61 2
a62 1
   upload_clip_vp(brw);
d64 7
a70 20
   clip = brw_state_batch(brw, AUB_TRACE_CLIP_STATE,
			  sizeof(*clip), 32, &brw->clip.state_offset);
   memset(clip, 0, sizeof(*clip));

   /* BRW_NEW_PROGRAM_CACHE | CACHE_NEW_CLIP_PROG */
   clip->thread0.grf_reg_count = (ALIGN(brw->clip.prog_data->total_grf, 16) /
				 16 - 1);
   clip->thread0.kernel_start_pointer =
      brw_program_reloc(brw,
			brw->clip.state_offset +
			offsetof(struct brw_clip_unit_state, thread0),
			brw->clip.prog_offset +
			(clip->thread0.grf_reg_count << 1)) >> 6;

   clip->thread1.floating_point_mode = BRW_FLOATING_POINT_NON_IEEE_754;
   clip->thread1.single_program_flow = 1;

   clip->thread3.urb_entry_read_length = brw->clip.prog_data->urb_read_length;
   clip->thread3.const_urb_entry_read_length =
      brw->clip.prog_data->curb_read_length;
d72 22
a93 4
   /* BRW_NEW_CURBE_OFFSETS */
   clip->thread3.const_urb_entry_read_offset = brw->curbe.clip_start * 2;
   clip->thread3.dispatch_grf_start_reg = 1;
   clip->thread3.urb_entry_read_offset = 0;
d95 2
a96 3
   /* BRW_NEW_URB_FENCE */
   clip->thread4.nr_urb_entries = brw->urb.nr_clip_entries;
   clip->thread4.urb_entry_allocation_size = brw->urb.vsize - 1;
d99 1
a99 1
   if (brw->urb.nr_clip_entries >= 10) {
d103 1
a103 1
      assert(brw->urb.nr_clip_entries % 2 == 0);
d108 2
a109 2
      if (brw->gen == 5)
         clip->thread4.max_threads = 16 - 1;
d111 1
a111 1
         clip->thread4.max_threads = 2 - 1;
d113 2
a114 2
      assert(brw->urb.nr_clip_entries >= 5);
      clip->thread4.max_threads = 1 - 1;
d117 3
d121 31
a151 1
      clip->thread4.stats_enable = 1;
d153 2
a154 2
   clip->clip5.userclip_enable_flags = 0x7f;
   clip->clip5.userclip_must_clip = 1;
d156 3
a158 17
   /* enable guardband clipping if we can */
   if (ctx->Viewport.X == 0 &&
       ctx->Viewport.Y == 0 &&
       ctx->Viewport.Width == fb->Width &&
       ctx->Viewport.Height == fb->Height)
   {
      clip->clip5.guard_band_enable = 1;
      clip->clip6.clipper_viewport_state_ptr =
         (brw->batch.bo->offset + brw->clip.vp_offset) >> 5;

      /* emit clip viewport relocation */
      drm_intel_bo_emit_reloc(brw->batch.bo,
                              (brw->clip.state_offset +
                               offsetof(struct brw_clip_unit_state, clip6)),
                              brw->batch.bo, brw->clip.vp_offset,
                              I915_GEM_DOMAIN_INSTRUCTION, 0);
   }
d160 1
a160 15
   /* _NEW_TRANSFORM */
   if (!ctx->Transform.DepthClamp)
      clip->clip5.viewport_z_clip_enable = 1;
   clip->clip5.viewport_xy_clip_enable = 1;
   clip->clip5.vertex_position_space = BRW_CLIP_NDCSPACE;
   clip->clip5.api_mode = BRW_CLIP_API_OGL;
   clip->clip5.clip_mode = brw->clip.prog_data->clip_mode;

   if (brw->is_g4x)
      clip->clip5.negative_w_clip_test = 1;

   clip->viewport_xmin = -1;
   clip->viewport_xmax = 1;
   clip->viewport_ymin = -1;
   clip->viewport_ymax = 1;
d162 8
a169 1
   brw->state.dirty.cache |= CACHE_NEW_CLIP_UNIT;
d174 2
a175 4
      .mesa  = _NEW_TRANSFORM | _NEW_BUFFERS | _NEW_VIEWPORT,
      .brw   = (BRW_NEW_BATCH |
		BRW_NEW_PROGRAM_CACHE |
		BRW_NEW_CURBE_OFFSETS |
d179 1
a179 1
   .emit = brw_upload_clip_unit,
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d46 2
a47 2
   float gbx = maximum_post_clamp_delta / ctx->ViewportArray[0].Width;
   float gby = maximum_post_clamp_delta / ctx->ViewportArray[0].Height;
d102 1
a102 1

d118 1
a118 7
   /* _NEW_TRANSFORM */
   if (brw->gen == 5 || brw->is_g4x)
      clip->clip5.userclip_enable_flags = ctx->Transform.ClipPlanesEnabled;
   else
      /* Up to 6 actual clip flags, plus the 7th for negative RHW workaround. */
      clip->clip5.userclip_enable_flags = (ctx->Transform.ClipPlanesEnabled & 0x3f) | 0x40;

d122 4
a125 4
   if (ctx->ViewportArray[0].X == 0 &&
       ctx->ViewportArray[0].Y == 0 &&
       ctx->ViewportArray[0].Width == (float) fb->Width &&
       ctx->ViewportArray[0].Height == (float) fb->Height)
d129 1
a129 1
         (brw->batch.bo->offset64 + brw->clip.vp_offset) >> 5;
@


