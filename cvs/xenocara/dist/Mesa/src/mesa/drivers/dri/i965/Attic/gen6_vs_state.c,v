head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.04.24;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.38;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.44;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.52;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.11.51;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.48.56;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <eric@@anholt.net>
 *
 */

#include "brw_context.h"
#include "brw_state.h"
#include "brw_defines.h"
#include "brw_util.h"
#include "program/prog_parameter.h"
#include "program/prog_statevars.h"
#include "intel_batchbuffer.h"

void
gen6_upload_vec4_push_constants(struct brw_context *brw,
                                const struct gl_program *prog,
                                const struct brw_vec4_prog_data *prog_data,
                                struct brw_stage_state *stage_state,
                                enum state_struct_type type)
{
   struct gl_context *ctx = &brw->ctx;

   /* Updates the ParamaterValues[i] pointers for all parameters of the
    * basic type of PROGRAM_STATE_VAR.
    */
   /* XXX: Should this happen somewhere before to get our state flag set? */
   _mesa_load_state_parameters(ctx, prog->Parameters);

   if (prog_data->base.nr_params == 0) {
      stage_state->push_const_size = 0;
   } else {
      int params_uploaded;
      float *param;
      int i;

      param = brw_state_batch(brw, type,
			      prog_data->base.nr_params * sizeof(float),
			      32, &stage_state->push_const_offset);

      /* _NEW_PROGRAM_CONSTANTS
       *
       * Also _NEW_TRANSFORM -- we may reference clip planes other than as a
       * side effect of dereferencing uniforms, so _NEW_PROGRAM_CONSTANTS
       * wouldn't be set for them.
      */
      for (i = 0; i < prog_data->base.nr_params; i++) {
         param[i] = *prog_data->base.param[i];
      }
      params_uploaded = prog_data->base.nr_params / 4;

      if (0) {
	 fprintf(stderr, "Constant buffer:\n");
	 for (i = 0; i < params_uploaded; i++) {
	    float *buf = param + i * 4;
	    fprintf(stderr, "%d: %f %f %f %f\n",
                    i, buf[0], buf[1], buf[2], buf[3]);
	 }
      }

      stage_state->push_const_size = (params_uploaded + 1) / 2;
      /* We can only push 32 registers of constants at a time. */
      assert(stage_state->push_const_size <= 32);
   }
}

static void
gen6_upload_vs_push_constants(struct brw_context *brw)
{
   struct brw_stage_state *stage_state = &brw->vs.base;

   /* _BRW_NEW_VERTEX_PROGRAM */
   const struct brw_vertex_program *vp =
      brw_vertex_program_const(brw->vertex_program);
   /* CACHE_NEW_VS_PROG */
   const struct brw_vec4_prog_data *prog_data = &brw->vs.prog_data->base;

   gen6_upload_vec4_push_constants(brw, &vp->program.Base, prog_data,
                                   stage_state, AUB_TRACE_VS_CONSTANTS);

   if (brw->gen >= 7) {
      if (brw->gen == 7 && !brw->is_haswell)
         gen7_emit_vs_workaround_flush(brw);

      gen7_upload_constant_state(brw, stage_state, true /* active */,
                                 _3DSTATE_CONSTANT_VS);
   }
}

const struct brw_tracked_state gen6_vs_push_constants = {
   .dirty = {
      .mesa  = _NEW_TRANSFORM | _NEW_PROGRAM_CONSTANTS,
      .brw   = (BRW_NEW_BATCH |
                BRW_NEW_VERTEX_PROGRAM |
                BRW_NEW_PUSH_CONSTANT_ALLOCATION),
      .cache = CACHE_NEW_VS_PROG,
   },
   .emit = gen6_upload_vs_push_constants,
};

static void
upload_vs_state(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   const struct brw_stage_state *stage_state = &brw->vs.base;
   uint32_t floating_point_mode = 0;

   /* From the BSpec, 3D Pipeline > Geometry > Vertex Shader > State,
    * 3DSTATE_VS, Dword 5.0 "VS Function Enable":
    *
    *   [DevSNB] A pipeline flush must be programmed prior to a 3DSTATE_VS
    *   command that causes the VS Function Enable to toggle. Pipeline
    *   flush can be executed by sending a PIPE_CONTROL command with CS
    *   stall bit set and a post sync operation.
    *
    * Although we don't disable the VS during normal drawing, BLORP sometimes
    * disables it.  To be safe, do the flush here just in case.
    */
   intel_emit_post_sync_nonzero_flush(brw);

   if (stage_state->push_const_size == 0) {
      /* Disable the push constant buffers. */
      BEGIN_BATCH(5);
      OUT_BATCH(_3DSTATE_CONSTANT_VS << 16 | (5 - 2));
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   } else {
      BEGIN_BATCH(5);
      OUT_BATCH(_3DSTATE_CONSTANT_VS << 16 |
		GEN6_CONSTANT_BUFFER_0_ENABLE |
		(5 - 2));
      /* Pointer to the VS constant buffer.  Covered by the set of
       * state flags from gen6_upload_vs_constants
       */
      OUT_BATCH(stage_state->push_const_offset +
		stage_state->push_const_size - 1);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   }

   /* Use ALT floating point mode for ARB vertex programs, because they
    * require 0^0 == 1.
    */
   if (ctx->_Shader->CurrentProgram[MESA_SHADER_VERTEX] == NULL)
      floating_point_mode = GEN6_VS_FLOATING_POINT_MODE_ALT;

   BEGIN_BATCH(6);
   OUT_BATCH(_3DSTATE_VS << 16 | (6 - 2));
   OUT_BATCH(stage_state->prog_offset);
   OUT_BATCH(floating_point_mode |
	     ((ALIGN(stage_state->sampler_count, 4)/4) << GEN6_VS_SAMPLER_COUNT_SHIFT) |
             ((brw->vs.prog_data->base.base.binding_table.size_bytes / 4) <<
              GEN6_VS_BINDING_TABLE_ENTRY_COUNT_SHIFT));

   if (brw->vs.prog_data->base.total_scratch) {
      OUT_RELOC(stage_state->scratch_bo,
		I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER,
		ffs(brw->vs.prog_data->base.total_scratch) - 11);
   } else {
      OUT_BATCH(0);
   }

   OUT_BATCH((brw->vs.prog_data->base.dispatch_grf_start_reg <<
              GEN6_VS_DISPATCH_START_GRF_SHIFT) |
	     (brw->vs.prog_data->base.urb_read_length << GEN6_VS_URB_READ_LENGTH_SHIFT) |
	     (0 << GEN6_VS_URB_ENTRY_READ_OFFSET_SHIFT));

   OUT_BATCH(((brw->max_vs_threads - 1) << GEN6_VS_MAX_THREADS_SHIFT) |
	     GEN6_VS_STATISTICS_ENABLE |
	     GEN6_VS_ENABLE);
   ADVANCE_BATCH();

   /* Based on my reading of the simulator, the VS constants don't get
    * pulled into the VS FF unit until an appropriate pipeline flush
    * happens, and instead the 3DSTATE_CONSTANT_VS packet just adds
    * references to them into a little FIFO.  The flushes are common,
    * but don't reliably happen between this and a 3DPRIMITIVE, causing
    * the primitive to use the wrong constants.  Then the FIFO
    * containing the constant setup gets added to again on the next
    * constants change, and eventually when a flush does happen the
    * unit is overwhelmed by constant changes and dies.
    *
    * To avoid this, send a PIPE_CONTROL down the line that will
    * update the unit immediately loading the constants.  The flush
    * type bits here were those set by the STATE_BASE_ADDRESS whose
    * move in a82a43e8d99e1715dd11c9c091b5ab734079b6a6 triggered the
    * bug reports that led to this workaround, and may be more than
    * what is strictly required to avoid the issue.
    */
   intel_emit_post_sync_nonzero_flush(brw);
   brw_emit_pipe_control_flush(brw,
                               PIPE_CONTROL_DEPTH_STALL |
                               PIPE_CONTROL_INSTRUCTION_FLUSH |
                               PIPE_CONTROL_STATE_CACHE_INVALIDATE);
}

const struct brw_tracked_state gen6_vs_state = {
   .dirty = {
      .mesa  = _NEW_TRANSFORM | _NEW_PROGRAM_CONSTANTS,
      .brw   = (BRW_NEW_CONTEXT |
		BRW_NEW_VERTEX_PROGRAM |
		BRW_NEW_BATCH |
                BRW_NEW_PUSH_CONSTANT_ALLOCATION),
      .cache = CACHE_NEW_VS_PROG
   },
   .emit = upload_vs_state,
};
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a34 1
#include "glsl/glsl_parser_extras.h"
a35 15
/**
 * Creates a streamed BO containing the push constants for the VS or GS on
 * gen6+.
 *
 * Push constants are constant values (such as GLSL uniforms) that are
 * pre-loaded into a shader stage's register space at thread spawn time.
 *
 * Not all GLSL uniforms will be uploaded as push constants: The hardware has
 * a limitation of 32 or 64 EU registers (256 or 512 floats) per stage to be
 * uploaded as push constants, while GL 4.4 requires at least 1024 components
 * to be usable for the VS.  Plus, currently we always use pull constants
 * instead of push constants when doing variable-index array access.
 *
 * See brw_curbe.c for the equivalent gen4/5 code.
 */
d37 5
a41 5
gen6_upload_push_constants(struct brw_context *brw,
                           const struct gl_program *prog,
                           const struct brw_stage_prog_data *prog_data,
                           struct brw_stage_state *stage_state,
                           enum aub_state_struct_type type)
d51 1
a51 1
   if (prog_data->nr_params == 0) {
d54 2
a55 1
      gl_constant_value *param;
d59 1
a59 1
			      prog_data->nr_params * sizeof(gl_constant_value),
a61 2
      STATIC_ASSERT(sizeof(gl_constant_value) == sizeof(float));

d68 2
a69 2
      for (i = 0; i < prog_data->nr_params; i++) {
         param[i] = *prog_data->param[i];
d71 1
d74 5
a78 9
	 fprintf(stderr, "%s constants:\n",
                 _mesa_shader_stage_to_string(stage_state->stage));
	 for (i = 0; i < prog_data->nr_params; i++) {
	    if ((i & 7) == 0)
	       fprintf(stderr, "g%d: ",
                       prog_data->dispatch_grf_start_reg + i / 8);
	    fprintf(stderr, "%8f ", param[i].f);
	    if ((i & 7) == 7)
	       fprintf(stderr, "\n");
a79 3
	 if ((i & 7) != 0)
	    fprintf(stderr, "\n");
	 fprintf(stderr, "\n");
d82 1
a82 1
      stage_state->push_const_size = ALIGN(prog_data->nr_params, 8) / 8;
a83 14

      /* From the SNB PRM (vol2, part 1, section 3.2.1.4: 3DSTATE_CONSTANT_VS:
       *
       *     "The sum of all four read length fields (each incremented to
       *      represent the actual read length) must be less than or equal to
       *      32"
       *
       * From the IVB PRM (vol2, part 1, section 3.2.1.3: 3DSTATE_CONSTANT_VS:
       *
       *     "The sum of all four read length fields must be less than or
       *      equal to the size of 64"
       *
       * The other shader stages all match the VS's limits.
       */
d97 1
a97 1
   const struct brw_stage_prog_data *prog_data = &brw->vs.prog_data->base.base;
d99 2
a100 2
   gen6_upload_push_constants(brw, &vp->program.Base, prog_data,
                              stage_state, AUB_TRACE_VS_CONSTANTS);
d103 1
a103 1
      if (brw->gen == 7 && !brw->is_haswell && !brw->is_baytrail)
d181 1
a181 1
   if (brw->vs.prog_data->base.base.total_scratch) {
d184 1
a184 1
		ffs(brw->vs.prog_data->base.base.total_scratch) - 11);
d189 1
a189 1
   OUT_BATCH((brw->vs.prog_data->base.base.dispatch_grf_start_reg <<
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d35 1
d37 15
d53 5
a57 5
gen6_upload_vec4_push_constants(struct brw_context *brw,
                                const struct gl_program *prog,
                                const struct brw_vec4_prog_data *prog_data,
                                struct brw_stage_state *stage_state,
                                enum state_struct_type type)
d67 1
a67 1
   if (prog_data->base.nr_params == 0) {
d70 1
a70 2
      int params_uploaded;
      float *param;
d74 1
a74 1
			      prog_data->base.nr_params * sizeof(float),
d77 2
d85 2
a86 2
      for (i = 0; i < prog_data->base.nr_params; i++) {
         param[i] = *prog_data->base.param[i];
a87 1
      params_uploaded = prog_data->base.nr_params / 4;
d90 9
a98 5
	 fprintf(stderr, "Constant buffer:\n");
	 for (i = 0; i < params_uploaded; i++) {
	    float *buf = param + i * 4;
	    fprintf(stderr, "%d: %f %f %f %f\n",
                    i, buf[0], buf[1], buf[2], buf[3]);
d100 3
d105 1
a105 1
      stage_state->push_const_size = (params_uploaded + 1) / 2;
d107 14
d134 1
a134 1
   const struct brw_vec4_prog_data *prog_data = &brw->vs.prog_data->base;
d136 2
a137 2
   gen6_upload_vec4_push_constants(brw, &vp->program.Base, prog_data,
                                   stage_state, AUB_TRACE_VS_CONSTANTS);
d140 1
a140 1
      if (brw->gen == 7 && !brw->is_haswell)
d218 1
a218 1
   if (brw->vs.prog_data->base.total_scratch) {
d221 1
a221 1
		ffs(brw->vs.prog_data->base.total_scratch) - 11);
d226 1
a226 1
   OUT_BATCH((brw->vs.prog_data->base.dispatch_grf_start_reg <<
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d36 6
a41 2
static void
gen6_upload_vs_push_constants(struct brw_context *brw)
a43 3
   /* _BRW_NEW_VERTEX_PROGRAM */
   const struct brw_vertex_program *vp =
      brw_vertex_program_const(brw->vertex_program);
d49 1
a49 1
   _mesa_load_state_parameters(ctx, vp->program.Base.Parameters);
d51 2
a52 3
   /* CACHE_NEW_VS_PROG */
   if (brw->vs.prog_data->base.nr_params == 0) {
      brw->vs.push_const_size = 0;
d58 3
a60 3
      param = brw_state_batch(brw, AUB_TRACE_VS_CONSTANTS,
			      brw->vs.prog_data->base.nr_params * sizeof(float),
			      32, &brw->vs.push_const_offset);
d68 2
a69 2
      for (i = 0; i < brw->vs.prog_data->base.nr_params; i++) {
         param[i] = *brw->vs.prog_data->base.param[i];
d71 1
a71 1
      params_uploaded = brw->vs.prog_data->base.nr_params / 4;
d74 1
a74 1
	 printf("VS constant buffer:\n");
d77 2
a78 2
	    printf("%d: %f %f %f %f\n",
		   i, buf[0], buf[1], buf[2], buf[3]);
d82 1
a82 1
      brw->vs.push_const_size = (params_uploaded + 1) / 2;
d84 24
a107 1
      assert(brw->vs.push_const_size <= 32);
d115 2
a116 1
		BRW_NEW_VERTEX_PROGRAM),
d126 1
d142 1
a142 1
   if (brw->vs.push_const_size == 0) {
d159 2
a160 2
      OUT_BATCH(brw->vs.push_const_offset +
		brw->vs.push_const_size - 1);
d170 1
a170 1
   if (ctx->Shader.CurrentVertexProgram == NULL)
d175 1
a175 1
   OUT_BATCH(brw->vs.prog_offset);
d177 3
a179 1
	     ((ALIGN(brw->sampler.count, 4)/4) << GEN6_VS_SAMPLER_COUNT_SHIFT));
d182 1
a182 1
      OUT_RELOC(brw->vs.scratch_bo,
d189 2
a190 1
   OUT_BATCH((1 << GEN6_VS_DISPATCH_START_GRF_SHIFT) |
d217 4
a220 9

   BEGIN_BATCH(4);
   OUT_BATCH(_3DSTATE_PIPE_CONTROL | (4 - 2));
   OUT_BATCH(PIPE_CONTROL_DEPTH_STALL |
	     PIPE_CONTROL_INSTRUCTION_FLUSH |
	     PIPE_CONTROL_STATE_CACHE_INVALIDATE);
   OUT_BATCH(0); /* address */
   OUT_BATCH(0); /* write data */
   ADVANCE_BATCH();
d228 3
a230 2
		BRW_NEW_BATCH),
      .cache = CACHE_NEW_VS_PROG | CACHE_NEW_SAMPLER
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d37 1
a37 1
gen6_prepare_vs_push_constants(struct brw_context *brw)
d39 1
a39 2
   struct intel_context *intel = &brw->intel;
   struct gl_context *ctx = &intel->ctx;
a42 4
   unsigned int nr_params = brw->vs.prog_data->nr_params / 4;

   if (brw->vertex_program->IsNVProgram)
      _mesa_load_tracked_matrices(ctx);
d50 2
a51 2
   /* CACHE_NEW_VS_PROG | _NEW_TRANSFORM */
   if (brw->vs.prog_data->nr_params == 0 && !ctx->Transform.ClipPlanesEnabled) {
d54 1
a54 1
      int params_uploaded = 0;
d58 2
a59 3
      param = brw_state_batch(brw,
			      (MAX_CLIP_PLANES + nr_params) *
			      4 * sizeof(float),
d62 8
a69 23
      /* This should be loaded like any other param, but it's ad-hoc
       * until we redo the VS backend.
       */
      for (i = 0; i < MAX_CLIP_PLANES; i++) {
	 if (ctx->Transform.ClipPlanesEnabled & (1 << i)) {
	    memcpy(param, ctx->Transform._ClipUserPlane[i], 4 * sizeof(float));
	    param += 4;
	    params_uploaded++;
	 }
      }
      /* Align to a reg for convenience for brw_vs_emit.c */
      if (params_uploaded & 1) {
	 param += 4;
	 params_uploaded++;
      }

      for (i = 0; i < vp->program.Base.Parameters->NumParameters; i++) {
	 if (brw->vs.constant_map[i] != -1) {
	    memcpy(param + brw->vs.constant_map[i] * 4,
		   vp->program.Base.Parameters->ParameterValues[i],
		   4 * sizeof(float));
	    params_uploaded++;
	 }
d71 1
d88 1
a88 1
const struct brw_tracked_state gen6_vs_constants = {
d95 1
a95 1
   .prepare = gen6_prepare_vs_push_constants,
d101 15
a115 1
   struct intel_context *intel = &brw->intel;
d132 1
a132 1
       * state flags from gen6_prepare_wm_constants
d142 6
d151 11
a161 4
   OUT_BATCH((0 << GEN6_VS_SAMPLER_COUNT_SHIFT) |
	     GEN6_VS_FLOATING_POINT_MODE_ALT |
	     (brw->vs.nr_surfaces << GEN6_VS_BINDING_TABLE_ENTRY_COUNT_SHIFT));
   OUT_BATCH(0); /* scratch space base offset */
d163 1
a163 1
	     (brw->vs.prog_data->urb_read_length << GEN6_VS_URB_READ_LENGTH_SHIFT) |
d166 1
a166 1
   OUT_BATCH(((brw->vs_max_threads - 1) << GEN6_VS_MAX_THREADS_SHIFT) |
d188 1
a188 1
   intel_emit_post_sync_nonzero_flush(intel);
d191 1
a191 1
   OUT_BATCH(_3DSTATE_PIPE_CONTROL);
d203 1
a203 3
      .brw   = (BRW_NEW_NR_VS_SURFACES |
		BRW_NEW_URB_FENCE |
		BRW_NEW_CONTEXT |
d206 1
a206 1
      .cache = CACHE_NEW_VS_PROG
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d37 1
a37 1
upload_vs_state(struct brw_context *brw)
d41 1
a44 2
   drm_intel_bo *constant_bo;
   int i;
d46 10
d57 1
a57 8
      /* Disable the push constant buffers. */
      BEGIN_BATCH(5);
      OUT_BATCH(_3DSTATE_CONSTANT_VS << 16 | (5 - 2));
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      ADVANCE_BATCH();
d59 1
a59 1
      int params_uploaded = 0, param_regs;
d61 1
d63 4
a66 14
      if (brw->vertex_program->IsNVProgram)
	 _mesa_load_tracked_matrices(ctx);

      /* Updates the ParamaterValues[i] pointers for all parameters of the
       * basic type of PROGRAM_STATE_VAR.
       */
      _mesa_load_state_parameters(ctx, vp->program.Base.Parameters);

      constant_bo = drm_intel_bo_alloc(intel->bufmgr, "VS constant_bo",
				       (MAX_CLIP_PLANES + nr_params) *
				       4 * sizeof(float),
				       4096);
      drm_intel_gem_bo_map_gtt(constant_bo);
      param = constant_bo->virtual;
d96 1
a96 1
	    float *buf = (float *)constant_bo->virtual + i * 4;
d102 5
a106 1
      drm_intel_gem_bo_unmap_gtt(constant_bo);
d108 9
a116 2
      param_regs = (params_uploaded + 1) / 2;
      assert(param_regs <= 32);
d118 15
d137 5
a141 3
      OUT_RELOC(constant_bo,
		I915_GEM_DOMAIN_RENDER, 0, /* XXX: bad domain */
		param_regs - 1);
a145 2

      drm_intel_bo_unreference(constant_bo);
d150 1
a150 1
   OUT_RELOC(brw->vs.prog_bo, I915_GEM_DOMAIN_INSTRUCTION, 0, 0);
d163 28
d196 1
a196 2
      .brw   = (BRW_NEW_CURBE_OFFSETS |
                BRW_NEW_NR_VS_SURFACES |
d198 3
a200 1
		BRW_NEW_CONTEXT),
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d32 2
a33 2
#include "shader/prog_parameter.h"
#include "shader/prog_statevars.h"
d40 1
a40 1
   GLcontext *ctx = &intel->ctx;
d43 1
a43 1
   unsigned int nr_params = vp->program.Base.Parameters->NumParameters;
d47 1
a47 1
   if (vp->use_const_buffer || nr_params == 0) {
d50 1
a50 1
      OUT_BATCH(CMD_3D_CONSTANT_VS_STATE << 16 | (5 - 2));
d57 3
d69 2
a70 1
				       nr_params * 4 * sizeof(float),
d73 16
a88 4
      for (i = 0; i < nr_params; i++) {
	 memcpy((char *)constant_bo->virtual + i * 4 * sizeof(float),
		vp->program.Base.Parameters->ParameterValues[i],
		4 * sizeof(float));
d90 19
d111 3
d115 1
a115 1
      OUT_BATCH(CMD_3D_CONSTANT_VS_STATE << 16 |
d120 1
a120 1
		ALIGN(nr_params, 2) / 2 - 1);
a128 2
   intel_batchbuffer_emit_mi_flush(intel->batch);

d130 1
a130 1
   OUT_BATCH(CMD_3D_VS_STATE << 16 | (6 - 2));
d133 1
d139 4
a142 2
   OUT_BATCH((0 << GEN6_VS_MAX_THREADS_SHIFT) |
	     GEN6_VS_STATISTICS_ENABLE);
a143 2

   intel_batchbuffer_emit_mi_flush(intel->batch);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d32 2
a33 2
#include "program/prog_parameter.h"
#include "program/prog_statevars.h"
d40 1
a40 1
   struct gl_context *ctx = &intel->ctx;
d43 1
a43 1
   unsigned int nr_params = brw->vs.prog_data->nr_params / 4;
d47 1
a47 1
   if (brw->vs.prog_data->nr_params == 0 && !ctx->Transform.ClipPlanesEnabled) {
d50 1
a50 1
      OUT_BATCH(_3DSTATE_CONSTANT_VS << 16 | (5 - 2));
a56 3
      int params_uploaded = 0, param_regs;
      float *param;

d66 1
a66 2
				       (MAX_CLIP_PLANES + nr_params) *
				       4 * sizeof(float),
d69 4
a72 16
      param = constant_bo->virtual;

      /* This should be loaded like any other param, but it's ad-hoc
       * until we redo the VS backend.
       */
      for (i = 0; i < MAX_CLIP_PLANES; i++) {
	 if (ctx->Transform.ClipPlanesEnabled & (1 << i)) {
	    memcpy(param, ctx->Transform._ClipUserPlane[i], 4 * sizeof(float));
	    param += 4;
	    params_uploaded++;
	 }
      }
      /* Align to a reg for convenience for brw_vs_emit.c */
      if (params_uploaded & 1) {
	 param += 4;
	 params_uploaded++;
a73 19

      for (i = 0; i < vp->program.Base.Parameters->NumParameters; i++) {
	 if (brw->vs.constant_map[i] != -1) {
	    memcpy(param + brw->vs.constant_map[i] * 4,
		   vp->program.Base.Parameters->ParameterValues[i],
		   4 * sizeof(float));
	    params_uploaded++;
	 }
      }

      if (0) {
	 printf("VS constant buffer:\n");
	 for (i = 0; i < params_uploaded; i++) {
	    float *buf = (float *)constant_bo->virtual + i * 4;
	    printf("%d: %f %f %f %f\n",
		   i, buf[0], buf[1], buf[2], buf[3]);
	 }
      }

a75 3
      param_regs = (params_uploaded + 1) / 2;
      assert(param_regs <= 32);

d77 1
a77 1
      OUT_BATCH(_3DSTATE_CONSTANT_VS << 16 |
d82 1
a82 1
		param_regs - 1);
d91 2
d94 1
a94 1
   OUT_BATCH(_3DSTATE_VS << 16 | (6 - 2));
a96 1
	     GEN6_VS_FLOATING_POINT_MODE_ALT |
d102 3
d106 1
a106 4
   OUT_BATCH(((brw->vs_max_threads - 1) << GEN6_VS_MAX_THREADS_SHIFT) |
	     GEN6_VS_STATISTICS_ENABLE |
	     GEN6_VS_ENABLE);
   ADVANCE_BATCH();
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d37 1
a37 1
gen6_upload_vs_push_constants(struct brw_context *brw)
d39 2
a40 2
   struct gl_context *ctx = &brw->ctx;
   /* _BRW_NEW_VERTEX_PROGRAM */
d43 3
d47 9
a55 9
   /* Updates the ParamaterValues[i] pointers for all parameters of the
    * basic type of PROGRAM_STATE_VAR.
    */
   /* XXX: Should this happen somewhere before to get our state flag set? */
   _mesa_load_state_parameters(ctx, vp->program.Base.Parameters);

   /* CACHE_NEW_VS_PROG */
   if (brw->vs.prog_data->base.nr_params == 0) {
      brw->vs.push_const_size = 0;
d57 1
a57 1
      int params_uploaded;
a58 1
      int i;
d60 38
a97 12
      param = brw_state_batch(brw, AUB_TRACE_VS_CONSTANTS,
			      brw->vs.prog_data->base.nr_params * sizeof(float),
			      32, &brw->vs.push_const_offset);

      /* _NEW_PROGRAM_CONSTANTS
       *
       * Also _NEW_TRANSFORM -- we may reference clip planes other than as a
       * side effect of dereferencing uniforms, so _NEW_PROGRAM_CONSTANTS
       * wouldn't be set for them.
      */
      for (i = 0; i < brw->vs.prog_data->base.nr_params; i++) {
         param[i] = *brw->vs.prog_data->base.param[i];
a98 1
      params_uploaded = brw->vs.prog_data->base.nr_params / 4;
d103 1
a103 1
	    float *buf = param + i * 4;
d109 1
a109 5
      brw->vs.push_const_size = (params_uploaded + 1) / 2;
      /* We can only push 32 registers of constants at a time. */
      assert(brw->vs.push_const_size <= 32);
   }
}
d111 2
a112 9
const struct brw_tracked_state gen6_vs_push_constants = {
   .dirty = {
      .mesa  = _NEW_TRANSFORM | _NEW_PROGRAM_CONSTANTS,
      .brw   = (BRW_NEW_BATCH |
		BRW_NEW_VERTEX_PROGRAM),
      .cache = CACHE_NEW_VS_PROG,
   },
   .emit = gen6_upload_vs_push_constants,
};
a113 29
static void
upload_vs_state(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   uint32_t floating_point_mode = 0;

   /* From the BSpec, 3D Pipeline > Geometry > Vertex Shader > State,
    * 3DSTATE_VS, Dword 5.0 "VS Function Enable":
    *
    *   [DevSNB] A pipeline flush must be programmed prior to a 3DSTATE_VS
    *   command that causes the VS Function Enable to toggle. Pipeline
    *   flush can be executed by sending a PIPE_CONTROL command with CS
    *   stall bit set and a post sync operation.
    *
    * Although we don't disable the VS during normal drawing, BLORP sometimes
    * disables it.  To be safe, do the flush here just in case.
    */
   intel_emit_post_sync_nonzero_flush(brw);

   if (brw->vs.push_const_size == 0) {
      /* Disable the push constant buffers. */
      BEGIN_BATCH(5);
      OUT_BATCH(_3DSTATE_CONSTANT_VS << 16 | (5 - 2));
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   } else {
d118 3
a120 5
      /* Pointer to the VS constant buffer.  Covered by the set of
       * state flags from gen6_upload_vs_constants
       */
      OUT_BATCH(brw->vs.push_const_offset +
		brw->vs.push_const_size - 1);
d125 2
a128 6
   /* Use ALT floating point mode for ARB vertex programs, because they
    * require 0^0 == 1.
    */
   if (ctx->Shader.CurrentVertexProgram == NULL)
      floating_point_mode = GEN6_VS_FLOATING_POINT_MODE_ALT;

d131 5
a135 12
   OUT_BATCH(brw->vs.prog_offset);
   OUT_BATCH(floating_point_mode |
	     ((ALIGN(brw->sampler.count, 4)/4) << GEN6_VS_SAMPLER_COUNT_SHIFT));

   if (brw->vs.prog_data->base.total_scratch) {
      OUT_RELOC(brw->vs.scratch_bo,
		I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER,
		ffs(brw->vs.prog_data->base.total_scratch) - 11);
   } else {
      OUT_BATCH(0);
   }

d137 1
a137 1
	     (brw->vs.prog_data->base.urb_read_length << GEN6_VS_URB_READ_LENGTH_SHIFT) |
d140 1
a140 1
   OUT_BATCH(((brw->max_vs_threads - 1) << GEN6_VS_MAX_THREADS_SHIFT) |
a143 28

   /* Based on my reading of the simulator, the VS constants don't get
    * pulled into the VS FF unit until an appropriate pipeline flush
    * happens, and instead the 3DSTATE_CONSTANT_VS packet just adds
    * references to them into a little FIFO.  The flushes are common,
    * but don't reliably happen between this and a 3DPRIMITIVE, causing
    * the primitive to use the wrong constants.  Then the FIFO
    * containing the constant setup gets added to again on the next
    * constants change, and eventually when a flush does happen the
    * unit is overwhelmed by constant changes and dies.
    *
    * To avoid this, send a PIPE_CONTROL down the line that will
    * update the unit immediately loading the constants.  The flush
    * type bits here were those set by the STATE_BASE_ADDRESS whose
    * move in a82a43e8d99e1715dd11c9c091b5ab734079b6a6 triggered the
    * bug reports that led to this workaround, and may be more than
    * what is strictly required to avoid the issue.
    */
   intel_emit_post_sync_nonzero_flush(brw);

   BEGIN_BATCH(4);
   OUT_BATCH(_3DSTATE_PIPE_CONTROL | (4 - 2));
   OUT_BATCH(PIPE_CONTROL_DEPTH_STALL |
	     PIPE_CONTROL_INSTRUCTION_FLUSH |
	     PIPE_CONTROL_STATE_CACHE_INVALIDATE);
   OUT_BATCH(0); /* address */
   OUT_BATCH(0); /* write data */
   ADVANCE_BATCH();
d149 5
a153 4
      .brw   = (BRW_NEW_CONTEXT |
		BRW_NEW_VERTEX_PROGRAM |
		BRW_NEW_BATCH),
      .cache = CACHE_NEW_VS_PROG | CACHE_NEW_SAMPLER
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d36 2
a37 6
void
gen6_upload_vec4_push_constants(struct brw_context *brw,
                                const struct gl_program *prog,
                                const struct brw_vec4_prog_data *prog_data,
                                struct brw_stage_state *stage_state,
                                enum state_struct_type type)
d40 3
d48 1
a48 1
   _mesa_load_state_parameters(ctx, prog->Parameters);
d50 3
a52 2
   if (prog_data->base.nr_params == 0) {
      stage_state->push_const_size = 0;
d58 3
a60 3
      param = brw_state_batch(brw, type,
			      prog_data->base.nr_params * sizeof(float),
			      32, &stage_state->push_const_offset);
d68 2
a69 2
      for (i = 0; i < prog_data->base.nr_params; i++) {
         param[i] = *prog_data->base.param[i];
d71 1
a71 1
      params_uploaded = prog_data->base.nr_params / 4;
d74 1
a74 1
	 fprintf(stderr, "Constant buffer:\n");
d77 2
a78 2
	    fprintf(stderr, "%d: %f %f %f %f\n",
                    i, buf[0], buf[1], buf[2], buf[3]);
d82 1
a82 1
      stage_state->push_const_size = (params_uploaded + 1) / 2;
d84 1
a84 24
      assert(stage_state->push_const_size <= 32);
   }
}

static void
gen6_upload_vs_push_constants(struct brw_context *brw)
{
   struct brw_stage_state *stage_state = &brw->vs.base;

   /* _BRW_NEW_VERTEX_PROGRAM */
   const struct brw_vertex_program *vp =
      brw_vertex_program_const(brw->vertex_program);
   /* CACHE_NEW_VS_PROG */
   const struct brw_vec4_prog_data *prog_data = &brw->vs.prog_data->base;

   gen6_upload_vec4_push_constants(brw, &vp->program.Base, prog_data,
                                   stage_state, AUB_TRACE_VS_CONSTANTS);

   if (brw->gen >= 7) {
      if (brw->gen == 7 && !brw->is_haswell)
         gen7_emit_vs_workaround_flush(brw);

      gen7_upload_constant_state(brw, stage_state, true /* active */,
                                 _3DSTATE_CONSTANT_VS);
d92 1
a92 2
                BRW_NEW_VERTEX_PROGRAM |
                BRW_NEW_PUSH_CONSTANT_ALLOCATION),
a101 1
   const struct brw_stage_state *stage_state = &brw->vs.base;
d117 1
a117 1
   if (stage_state->push_const_size == 0) {
d134 2
a135 2
      OUT_BATCH(stage_state->push_const_offset +
		stage_state->push_const_size - 1);
d145 1
a145 1
   if (ctx->_Shader->CurrentProgram[MESA_SHADER_VERTEX] == NULL)
d150 1
a150 1
   OUT_BATCH(stage_state->prog_offset);
d152 1
a152 3
	     ((ALIGN(stage_state->sampler_count, 4)/4) << GEN6_VS_SAMPLER_COUNT_SHIFT) |
             ((brw->vs.prog_data->base.base.binding_table.size_bytes / 4) <<
              GEN6_VS_BINDING_TABLE_ENTRY_COUNT_SHIFT));
d155 1
a155 1
      OUT_RELOC(stage_state->scratch_bo,
d162 1
a162 2
   OUT_BATCH((brw->vs.prog_data->base.dispatch_grf_start_reg <<
              GEN6_VS_DISPATCH_START_GRF_SHIFT) |
d189 9
a197 4
   brw_emit_pipe_control_flush(brw,
                               PIPE_CONTROL_DEPTH_STALL |
                               PIPE_CONTROL_INSTRUCTION_FLUSH |
                               PIPE_CONTROL_STATE_CACHE_INVALIDATE);
d205 2
a206 3
		BRW_NEW_BATCH |
                BRW_NEW_PUSH_CONSTANT_ALLOCATION),
      .cache = CACHE_NEW_VS_PROG
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a34 1
#include "glsl/glsl_parser_extras.h"
a35 15
/**
 * Creates a streamed BO containing the push constants for the VS or GS on
 * gen6+.
 *
 * Push constants are constant values (such as GLSL uniforms) that are
 * pre-loaded into a shader stage's register space at thread spawn time.
 *
 * Not all GLSL uniforms will be uploaded as push constants: The hardware has
 * a limitation of 32 or 64 EU registers (256 or 512 floats) per stage to be
 * uploaded as push constants, while GL 4.4 requires at least 1024 components
 * to be usable for the VS.  Plus, currently we always use pull constants
 * instead of push constants when doing variable-index array access.
 *
 * See brw_curbe.c for the equivalent gen4/5 code.
 */
d37 5
a41 5
gen6_upload_push_constants(struct brw_context *brw,
                           const struct gl_program *prog,
                           const struct brw_stage_prog_data *prog_data,
                           struct brw_stage_state *stage_state,
                           enum aub_state_struct_type type)
d51 1
a51 1
   if (prog_data->nr_params == 0) {
d54 2
a55 1
      gl_constant_value *param;
d59 1
a59 1
			      prog_data->nr_params * sizeof(gl_constant_value),
a61 2
      STATIC_ASSERT(sizeof(gl_constant_value) == sizeof(float));

d68 2
a69 2
      for (i = 0; i < prog_data->nr_params; i++) {
         param[i] = *prog_data->param[i];
d71 1
d74 5
a78 9
	 fprintf(stderr, "%s constants:\n",
                 _mesa_shader_stage_to_string(stage_state->stage));
	 for (i = 0; i < prog_data->nr_params; i++) {
	    if ((i & 7) == 0)
	       fprintf(stderr, "g%d: ",
                       prog_data->dispatch_grf_start_reg + i / 8);
	    fprintf(stderr, "%8f ", param[i].f);
	    if ((i & 7) == 7)
	       fprintf(stderr, "\n");
a79 3
	 if ((i & 7) != 0)
	    fprintf(stderr, "\n");
	 fprintf(stderr, "\n");
d82 1
a82 1
      stage_state->push_const_size = ALIGN(prog_data->nr_params, 8) / 8;
a83 14

      /* From the SNB PRM (vol2, part 1, section 3.2.1.4: 3DSTATE_CONSTANT_VS:
       *
       *     "The sum of all four read length fields (each incremented to
       *      represent the actual read length) must be less than or equal to
       *      32"
       *
       * From the IVB PRM (vol2, part 1, section 3.2.1.3: 3DSTATE_CONSTANT_VS:
       *
       *     "The sum of all four read length fields must be less than or
       *      equal to the size of 64"
       *
       * The other shader stages all match the VS's limits.
       */
d97 1
a97 1
   const struct brw_stage_prog_data *prog_data = &brw->vs.prog_data->base.base;
d99 2
a100 2
   gen6_upload_push_constants(brw, &vp->program.Base, prog_data,
                              stage_state, AUB_TRACE_VS_CONSTANTS);
d103 1
a103 1
      if (brw->gen == 7 && !brw->is_haswell && !brw->is_baytrail)
d181 1
a181 1
   if (brw->vs.prog_data->base.base.total_scratch) {
d184 1
a184 1
		ffs(brw->vs.prog_data->base.base.total_scratch) - 11);
d189 1
a189 1
   OUT_BATCH((brw->vs.prog_data->base.base.dispatch_grf_start_reg <<
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d35 1
d37 15
d53 5
a57 5
gen6_upload_vec4_push_constants(struct brw_context *brw,
                                const struct gl_program *prog,
                                const struct brw_vec4_prog_data *prog_data,
                                struct brw_stage_state *stage_state,
                                enum state_struct_type type)
d67 1
a67 1
   if (prog_data->base.nr_params == 0) {
d70 1
a70 2
      int params_uploaded;
      float *param;
d74 1
a74 1
			      prog_data->base.nr_params * sizeof(float),
d77 2
d85 2
a86 2
      for (i = 0; i < prog_data->base.nr_params; i++) {
         param[i] = *prog_data->base.param[i];
a87 1
      params_uploaded = prog_data->base.nr_params / 4;
d90 9
a98 5
	 fprintf(stderr, "Constant buffer:\n");
	 for (i = 0; i < params_uploaded; i++) {
	    float *buf = param + i * 4;
	    fprintf(stderr, "%d: %f %f %f %f\n",
                    i, buf[0], buf[1], buf[2], buf[3]);
d100 3
d105 1
a105 1
      stage_state->push_const_size = (params_uploaded + 1) / 2;
d107 14
d134 1
a134 1
   const struct brw_vec4_prog_data *prog_data = &brw->vs.prog_data->base;
d136 2
a137 2
   gen6_upload_vec4_push_constants(brw, &vp->program.Base, prog_data,
                                   stage_state, AUB_TRACE_VS_CONSTANTS);
d140 1
a140 1
      if (brw->gen == 7 && !brw->is_haswell)
d218 1
a218 1
   if (brw->vs.prog_data->base.total_scratch) {
d221 1
a221 1
		ffs(brw->vs.prog_data->base.total_scratch) - 11);
d226 1
a226 1
   OUT_BATCH((brw->vs.prog_data->base.dispatch_grf_start_reg <<
@


