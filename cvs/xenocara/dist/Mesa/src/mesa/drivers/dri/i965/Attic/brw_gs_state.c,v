head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.04.19;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.44;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.44;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.35;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.50;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */



#include "brw_context.h"
#include "brw_state.h"
#include "brw_defines.h"

static void
brw_upload_gs_unit(struct brw_context *brw)
{
   struct brw_gs_unit_state *gs;

   gs = brw_state_batch(brw, AUB_TRACE_GS_STATE,
			sizeof(*gs), 32, &brw->ff_gs.state_offset);

   memset(gs, 0, sizeof(*gs));

   /* BRW_NEW_PROGRAM_CACHE | CACHE_NEW_GS_PROG */
   if (brw->ff_gs.prog_active) {
      gs->thread0.grf_reg_count = (ALIGN(brw->ff_gs.prog_data->total_grf, 16) /
				   16 - 1);

      gs->thread0.kernel_start_pointer =
	 brw_program_reloc(brw,
			   brw->ff_gs.state_offset +
			   offsetof(struct brw_gs_unit_state, thread0),
			   brw->ff_gs.prog_offset +
			   (gs->thread0.grf_reg_count << 1)) >> 6;

      gs->thread1.floating_point_mode = BRW_FLOATING_POINT_NON_IEEE_754;
      gs->thread1.single_program_flow = 1;

      gs->thread3.dispatch_grf_start_reg = 1;
      gs->thread3.const_urb_entry_read_offset = 0;
      gs->thread3.const_urb_entry_read_length = 0;
      gs->thread3.urb_entry_read_offset = 0;
      gs->thread3.urb_entry_read_length =
         brw->ff_gs.prog_data->urb_read_length;

      /* BRW_NEW_URB_FENCE */
      gs->thread4.nr_urb_entries = brw->urb.nr_gs_entries;
      gs->thread4.urb_entry_allocation_size = brw->urb.vsize - 1;

      if (brw->urb.nr_gs_entries >= 8)
	 gs->thread4.max_threads = 1;
      else
	 gs->thread4.max_threads = 0;
   }

   if (brw->gen == 5)
      gs->thread4.rendering_enable = 1;

   if (unlikely(INTEL_DEBUG & DEBUG_STATS))
      gs->thread4.stats_enable = 1;

   gs->gs6.max_vp_index = brw->ctx.Const.MaxViewports - 1;

   brw->state.dirty.cache |= CACHE_NEW_FF_GS_UNIT;
}

const struct brw_tracked_state brw_gs_unit = {
   .dirty = {
      .mesa  = 0,
      .brw   = (BRW_NEW_BATCH |
		BRW_NEW_PROGRAM_CACHE |
		BRW_NEW_CURBE_OFFSETS |
		BRW_NEW_URB_FENCE),
      .cache = CACHE_NEW_FF_GS_PROG
   },
   .emit = brw_upload_gs_unit,
};
@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.7
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d31 1
a31 1
 
d44 1
a44 1
			sizeof(*gs), 32, &brw->gs.state_offset);
d49 2
a50 2
   if (brw->gs.prog_active) {
      gs->thread0.grf_reg_count = (ALIGN(brw->gs.prog_data->total_grf, 16) /
d55 1
a55 1
			   brw->gs.state_offset +
d57 1
a57 1
			   brw->gs.prog_offset +
d67 2
a68 1
      gs->thread3.urb_entry_read_length = brw->gs.prog_data->urb_read_length;
d86 3
a88 1
   brw->state.dirty.cache |= CACHE_NEW_GS_UNIT;
d98 1
a98 1
      .cache = CACHE_NEW_GS_PROG
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d39 1
a39 1
brw_prepare_gs_unit(struct brw_context *brw)
a40 1
   struct intel_context *intel = &brw->intel;
d43 2
a44 1
   gs = brw_state_batch(brw, sizeof(*gs), 32, &brw->gs.state_offset);
d79 1
a79 1
   if (intel->gen == 5)
d97 1
a97 1
   .prepare = brw_prepare_gs_unit,
@


1.5
log
@Merge Mesa 7.10.3
@
text
@a37 10
struct brw_gs_unit_key {
   unsigned int total_grf;
   unsigned int urb_entry_read_length;

   unsigned int curbe_offset;

   unsigned int nr_urb_entries, urb_size;
   GLboolean prog_active;
};

d39 1
a39 1
gs_unit_populate_key(struct brw_context *brw, struct brw_gs_unit_key *key)
d41 2
a42 1
   memset(key, 0, sizeof(*key));
d44 1
a44 9
   /* CACHE_NEW_GS_PROG */
   key->prog_active = brw->gs.prog_active;
   if (key->prog_active) {
      key->total_grf = brw->gs.prog_data->total_grf;
      key->urb_entry_read_length = brw->gs.prog_data->urb_read_length;
   } else {
      key->total_grf = 1;
      key->urb_entry_read_length = 1;
   }
d46 1
a46 2
   /* BRW_NEW_CURBE_OFFSETS */
   key->curbe_offset = brw->curbe.clip_start;
d48 30
a77 34
   /* BRW_NEW_URB_FENCE */
   key->nr_urb_entries = brw->urb.nr_gs_entries;
   key->urb_size = brw->urb.vsize;
}

static drm_intel_bo *
gs_unit_create_from_key(struct brw_context *brw, struct brw_gs_unit_key *key)
{
   struct intel_context *intel = &brw->intel;
   struct brw_gs_unit_state gs;
   drm_intel_bo *bo;

   memset(&gs, 0, sizeof(gs));

   gs.thread0.grf_reg_count = ALIGN(key->total_grf, 16) / 16 - 1;
   if (key->prog_active) /* reloc */
      gs.thread0.kernel_start_pointer = brw->gs.prog_bo->offset >> 6;

   gs.thread1.floating_point_mode = BRW_FLOATING_POINT_NON_IEEE_754;
   gs.thread1.single_program_flow = 1;

   gs.thread3.dispatch_grf_start_reg = 1;
   gs.thread3.const_urb_entry_read_offset = 0;
   gs.thread3.const_urb_entry_read_length = 0;
   gs.thread3.urb_entry_read_offset = 0;
   gs.thread3.urb_entry_read_length = key->urb_entry_read_length;

   gs.thread4.nr_urb_entries = key->nr_urb_entries;
   gs.thread4.urb_entry_allocation_size = key->urb_size - 1;

   if (key->nr_urb_entries >= 8)
      gs.thread4.max_threads = 1;
   else
      gs.thread4.max_threads = 0;
d80 1
a80 1
      gs.thread4.rendering_enable = 1;
d83 1
a83 16
      gs.thread4.stats_enable = 1;

   bo = brw_upload_cache(&brw->cache, BRW_GS_UNIT,
			 key, sizeof(*key),
			 &brw->gs.prog_bo, 1,
			 &gs, sizeof(gs));

   if (key->prog_active) {
      /* Emit GS program relocation */
      drm_intel_bo_emit_reloc(bo, offsetof(struct brw_gs_unit_state, thread0),
			      brw->gs.prog_bo, gs.thread0.grf_reg_count << 1,
			      I915_GEM_DOMAIN_INSTRUCTION, 0);
   }

   return bo;
}
d85 1
a85 14
static void prepare_gs_unit(struct brw_context *brw)
{
   struct brw_gs_unit_key key;

   gs_unit_populate_key(brw, &key);

   drm_intel_bo_unreference(brw->gs.state_bo);
   brw->gs.state_bo = brw_search_cache(&brw->cache, BRW_GS_UNIT,
				       &key, sizeof(key),
				       &brw->gs.prog_bo, 1,
				       NULL);
   if (brw->gs.state_bo == NULL) {
      brw->gs.state_bo = gs_unit_create_from_key(brw, &key);
   }
d91 3
a93 1
      .brw   = (BRW_NEW_CURBE_OFFSETS |
d97 1
a97 1
   .prepare = prepare_gs_unit,
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d71 1
a71 1
static dri_bo *
d76 1
a76 1
   dri_bo *bo;
d104 1
a104 1
   if (INTEL_DEBUG & DEBUG_STATS)
d114 3
a116 5
      dri_bo_emit_reloc(bo,
			I915_GEM_DOMAIN_INSTRUCTION, 0,
			gs.thread0.grf_reg_count << 1,
			offsetof(struct brw_gs_unit_state, thread0),
			brw->gs.prog_bo);
d128 1
a128 1
   dri_bo_unreference(brw->gs.state_bo);
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a36 1
#include "main/macros.h"
d74 1
d96 7
a102 1
   gs.thread4.max_threads = 0; /* Hardware requirement */
d110 1
a110 2
			 &gs, sizeof(gs),
			 NULL, NULL);
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d37 1
a37 1
#include "macros.h"
d109 5
a113 5
      dri_emit_reloc(bo,
		     DRM_BO_FLAG_MEM_TT | DRM_BO_FLAG_READ,
		     gs.thread0.grf_reg_count << 1,
		     offsetof(struct brw_gs_unit_state, thread0),
		     brw->gs.prog_bo);
d119 1
a119 1
static int prepare_gs_unit( struct brw_context *brw )
a132 1
   return dri_bufmgr_check_aperture_space(brw->gs.state_bo);
@


1.1
log
@Initial revision
@
text
@d39 9
d49 2
a50 2

static void upload_gs_unit( struct brw_context *brw )
d52 1
a52 3
   struct brw_gs_unit_state gs;

   memset(&gs, 0, sizeof(gs));
d55 7
a61 9
   if (brw->gs.prog_active) {
      gs.thread0.grf_reg_count = ((brw->gs.prog_data->total_grf-1) & ~15) / 16;
      gs.thread0.kernel_start_pointer = brw->gs.prog_gs_offset >> 6;
      gs.thread3.urb_entry_read_length = brw->gs.prog_data->urb_read_length;
   }
   else {
      gs.thread0.grf_reg_count = 0;
      gs.thread0.kernel_start_pointer = 0;
      gs.thread3.urb_entry_read_length = 1;
d63 3
d68 3
a70 2
   gs.thread4.nr_urb_entries = brw->urb.nr_gs_entries; 
   gs.thread4.urb_entry_allocation_size = brw->urb.vsize - 1;
d72 7
a78 1
   gs.thread4.max_threads = 0; /* Hardware requirement */
d80 3
a82 2
   if (INTEL_DEBUG & DEBUG_STATS)
      gs.thread4.stats_enable = 1; 
a83 1
   /* CONSTANT */
d86 1
d91 6
a96 1
   
d98 19
a116 1
   brw->gs.state_gs_offset = brw_cache_data( &brw->cache[BRW_GS_UNIT], &gs );
d119 16
d143 1
a143 1
   .update = upload_gs_unit
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d37 1
a38 9
struct brw_gs_unit_key {
   unsigned int total_grf;
   unsigned int urb_entry_read_length;

   unsigned int curbe_offset;

   unsigned int nr_urb_entries, urb_size;
   GLboolean prog_active;
};
d40 2
a41 2
static void
gs_unit_populate_key(struct brw_context *brw, struct brw_gs_unit_key *key)
d43 3
a45 1
   memset(key, 0, sizeof(*key));
d48 9
a56 7
   key->prog_active = brw->gs.prog_active;
   if (key->prog_active) {
      key->total_grf = brw->gs.prog_data->total_grf;
      key->urb_entry_read_length = brw->gs.prog_data->urb_read_length;
   } else {
      key->total_grf = 1;
      key->urb_entry_read_length = 1;
a58 3
   /* BRW_NEW_CURBE_OFFSETS */
   key->curbe_offset = brw->curbe.clip_start;

d60 2
a61 10
   key->nr_urb_entries = brw->urb.nr_gs_entries;
   key->urb_size = brw->urb.vsize;
}

static drm_intel_bo *
gs_unit_create_from_key(struct brw_context *brw, struct brw_gs_unit_key *key)
{
   struct intel_context *intel = &brw->intel;
   struct brw_gs_unit_state gs;
   drm_intel_bo *bo;
d63 1
a63 1
   memset(&gs, 0, sizeof(gs));
d65 2
a66 3
   gs.thread0.grf_reg_count = ALIGN(key->total_grf, 16) / 16 - 1;
   if (key->prog_active) /* reloc */
      gs.thread0.kernel_start_pointer = brw->gs.prog_bo->offset >> 6;
d68 1
a70 1

d75 1
a75 27
   gs.thread3.urb_entry_read_length = key->urb_entry_read_length;

   gs.thread4.nr_urb_entries = key->nr_urb_entries;
   gs.thread4.urb_entry_allocation_size = key->urb_size - 1;

   if (key->nr_urb_entries >= 8)
      gs.thread4.max_threads = 1;
   else
      gs.thread4.max_threads = 0;

   if (intel->gen == 5)
      gs.thread4.rendering_enable = 1;

   if (unlikely(INTEL_DEBUG & DEBUG_STATS))
      gs.thread4.stats_enable = 1;

   bo = brw_upload_cache(&brw->cache, BRW_GS_UNIT,
			 key, sizeof(*key),
			 &brw->gs.prog_bo, 1,
			 &gs, sizeof(gs));

   if (key->prog_active) {
      /* Emit GS program relocation */
      drm_intel_bo_emit_reloc(bo, offsetof(struct brw_gs_unit_state, thread0),
			      brw->gs.prog_bo, gs.thread0.grf_reg_count << 1,
			      I915_GEM_DOMAIN_INSTRUCTION, 0);
   }
d77 1
a77 1
   return bo;
a79 15
static void prepare_gs_unit(struct brw_context *brw)
{
   struct brw_gs_unit_key key;

   gs_unit_populate_key(brw, &key);

   drm_intel_bo_unreference(brw->gs.state_bo);
   brw->gs.state_bo = brw_search_cache(&brw->cache, BRW_GS_UNIT,
				       &key, sizeof(key),
				       &brw->gs.prog_bo, 1,
				       NULL);
   if (brw->gs.state_bo == NULL) {
      brw->gs.state_bo = gs_unit_create_from_key(brw, &key);
   }
}
d88 1
a88 1
   .prepare = prepare_gs_unit,
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d38 10
d49 24
a72 1
brw_upload_gs_unit(struct brw_context *brw)
d74 26
a99 1
   struct brw_gs_unit_state *gs;
d101 2
a102 2
   gs = brw_state_batch(brw, AUB_TRACE_GS_STATE,
			sizeof(*gs), 32, &brw->gs.state_offset);
d104 2
a105 1
   memset(gs, 0, sizeof(*gs));
d107 10
a116 29
   /* BRW_NEW_PROGRAM_CACHE | CACHE_NEW_GS_PROG */
   if (brw->gs.prog_active) {
      gs->thread0.grf_reg_count = (ALIGN(brw->gs.prog_data->total_grf, 16) /
				   16 - 1);

      gs->thread0.kernel_start_pointer =
	 brw_program_reloc(brw,
			   brw->gs.state_offset +
			   offsetof(struct brw_gs_unit_state, thread0),
			   brw->gs.prog_offset +
			   (gs->thread0.grf_reg_count << 1)) >> 6;

      gs->thread1.floating_point_mode = BRW_FLOATING_POINT_NON_IEEE_754;
      gs->thread1.single_program_flow = 1;

      gs->thread3.dispatch_grf_start_reg = 1;
      gs->thread3.const_urb_entry_read_offset = 0;
      gs->thread3.const_urb_entry_read_length = 0;
      gs->thread3.urb_entry_read_offset = 0;
      gs->thread3.urb_entry_read_length = brw->gs.prog_data->urb_read_length;

      /* BRW_NEW_URB_FENCE */
      gs->thread4.nr_urb_entries = brw->urb.nr_gs_entries;
      gs->thread4.urb_entry_allocation_size = brw->urb.vsize - 1;

      if (brw->urb.nr_gs_entries >= 8)
	 gs->thread4.max_threads = 1;
      else
	 gs->thread4.max_threads = 0;
d119 2
a120 2
   if (brw->gen == 5)
      gs->thread4.rendering_enable = 1;
d122 5
a126 2
   if (unlikely(INTEL_DEBUG & DEBUG_STATS))
      gs->thread4.stats_enable = 1;
d128 8
a135 1
   brw->state.dirty.cache |= CACHE_NEW_GS_UNIT;
d141 1
a141 3
      .brw   = (BRW_NEW_BATCH |
		BRW_NEW_PROGRAM_CACHE |
		BRW_NEW_CURBE_OFFSETS |
d145 1
a145 1
   .emit = brw_upload_gs_unit,
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d31 1
a31 1

d44 1
a44 1
			sizeof(*gs), 32, &brw->ff_gs.state_offset);
d49 2
a50 2
   if (brw->ff_gs.prog_active) {
      gs->thread0.grf_reg_count = (ALIGN(brw->ff_gs.prog_data->total_grf, 16) /
d55 1
a55 1
			   brw->ff_gs.state_offset +
d57 1
a57 1
			   brw->ff_gs.prog_offset +
d67 1
a67 2
      gs->thread3.urb_entry_read_length =
         brw->ff_gs.prog_data->urb_read_length;
d85 1
a85 3
   gs->gs6.max_vp_index = brw->ctx.Const.MaxViewports - 1;

   brw->state.dirty.cache |= CACHE_NEW_FF_GS_UNIT;
d95 1
a95 1
      .cache = CACHE_NEW_FF_GS_PROG
@


