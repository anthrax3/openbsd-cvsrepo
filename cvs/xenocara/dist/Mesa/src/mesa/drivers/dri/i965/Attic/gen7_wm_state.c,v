head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.4;
commitid	4ry2gvZGMXkCUD2n;

1.4
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.3;
commitid	mcxB0JvoI9gTDYXU;

1.3
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.14.04.25;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.15.44;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.52;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.11.52;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.48.57;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2011 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#include <stdbool.h>
#include "brw_context.h"
#include "brw_state.h"
#include "brw_defines.h"
#include "brw_util.h"
#include "brw_wm.h"
#include "program/program.h"
#include "program/prog_parameter.h"
#include "program/prog_statevars.h"
#include "intel_batchbuffer.h"

static void
upload_wm_state(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   const struct brw_fragment_program *fp =
      brw_fragment_program_const(brw->fragment_program);
   bool writes_depth = false;
   uint32_t dw1, dw2;

   /* _NEW_BUFFERS */
   bool multisampled_fbo = ctx->DrawBuffer->Visual.samples > 1;

   dw1 = dw2 = 0;
   dw1 |= GEN7_WM_STATISTICS_ENABLE;
   dw1 |= GEN7_WM_LINE_AA_WIDTH_1_0;
   dw1 |= GEN7_WM_LINE_END_CAP_AA_WIDTH_0_5;

   /* _NEW_LINE */
   if (ctx->Line.StippleFlag)
      dw1 |= GEN7_WM_LINE_STIPPLE_ENABLE;

   /* _NEW_POLYGON */
   if (ctx->Polygon.StippleFlag)
      dw1 |= GEN7_WM_POLYGON_STIPPLE_ENABLE;

   /* BRW_NEW_FRAGMENT_PROGRAM */
   if (fp->program.Base.InputsRead & VARYING_BIT_POS)
      dw1 |= GEN7_WM_USES_SOURCE_DEPTH | GEN7_WM_USES_SOURCE_W;
   if (fp->program.Base.OutputsWritten & BITFIELD64_BIT(FRAG_RESULT_DEPTH)) {
      writes_depth = fp->program.FragDepthLayout != FRAG_DEPTH_LAYOUT_UNCHANGED;

      switch (fp->program.FragDepthLayout) {
         case FRAG_DEPTH_LAYOUT_NONE:
         case FRAG_DEPTH_LAYOUT_ANY:
            dw1 |= GEN7_WM_PSCDEPTH_ON;
            break;
         case FRAG_DEPTH_LAYOUT_GREATER:
            dw1 |= GEN7_WM_PSCDEPTH_ON_GE;
            break;
         case FRAG_DEPTH_LAYOUT_LESS:
            dw1 |= GEN7_WM_PSCDEPTH_ON_LE;
            break;
         case FRAG_DEPTH_LAYOUT_UNCHANGED:
            break;
      }
   }
   /* CACHE_NEW_WM_PROG */
   dw1 |= brw->wm.prog_data->barycentric_interp_modes <<
      GEN7_WM_BARYCENTRIC_INTERPOLATION_MODE_SHIFT;

   /* _NEW_COLOR, _NEW_MULTISAMPLE */
   /* Enable if the pixel shader kernel generates and outputs oMask.
    */
   if (fp->program.UsesKill || ctx->Color.AlphaEnabled ||
       ctx->Multisample.SampleAlphaToCoverage ||
       brw->wm.prog_data->uses_omask) {
      dw1 |= GEN7_WM_KILL_ENABLE;
   }

   /* _NEW_BUFFERS | _NEW_COLOR */
   if (brw_color_buffer_write_enabled(brw) || writes_depth ||
       dw1 & GEN7_WM_KILL_ENABLE) {
      dw1 |= GEN7_WM_DISPATCH_ENABLE;
   }
   if (multisampled_fbo) {
      /* _NEW_MULTISAMPLE */
      if (ctx->Multisample.Enabled)
         dw1 |= GEN7_WM_MSRAST_ON_PATTERN;
      else
         dw1 |= GEN7_WM_MSRAST_OFF_PIXEL;

      if (_mesa_get_min_invocations_per_fragment(ctx, brw->fragment_program, false) > 1)
         dw2 |= GEN7_WM_MSDISPMODE_PERSAMPLE;
      else
         dw2 |= GEN7_WM_MSDISPMODE_PERPIXEL;
   } else {
      dw1 |= GEN7_WM_MSRAST_OFF_PIXEL;
      dw2 |= GEN7_WM_MSDISPMODE_PERSAMPLE;
   }

   if (fp->program.Base.SystemValuesRead & SYSTEM_BIT_SAMPLE_MASK_IN) {
      dw1 |= GEN7_WM_USES_INPUT_COVERAGE_MASK;
   }

   BEGIN_BATCH(3);
   OUT_BATCH(_3DSTATE_WM << 16 | (3 - 2));
   OUT_BATCH(dw1);
   OUT_BATCH(dw2);
   ADVANCE_BATCH();
}

const struct brw_tracked_state gen7_wm_state = {
   .dirty = {
      .mesa  = (_NEW_LINE | _NEW_POLYGON |
	        _NEW_COLOR | _NEW_BUFFERS |
                _NEW_MULTISAMPLE),
      .brw   = (BRW_NEW_FRAGMENT_PROGRAM |
		BRW_NEW_BATCH),
      .cache = CACHE_NEW_WM_PROG,
   },
   .emit = upload_wm_state,
};

static void
upload_ps_state(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   uint32_t dw2, dw4, dw5;
   const int max_threads_shift = brw->is_haswell ?
      HSW_PS_MAX_THREADS_SHIFT : IVB_PS_MAX_THREADS_SHIFT;

   dw2 = dw4 = dw5 = 0;

   dw2 |=
      (ALIGN(brw->wm.base.sampler_count, 4) / 4) << GEN7_PS_SAMPLER_COUNT_SHIFT;

   /* CACHE_NEW_WM_PROG */
   dw2 |= ((brw->wm.prog_data->base.binding_table.size_bytes / 4) <<
           GEN7_PS_BINDING_TABLE_ENTRY_COUNT_SHIFT);

   /* Use ALT floating point mode for ARB fragment programs, because they
    * require 0^0 == 1.  Even though _CurrentFragmentProgram is used for
    * rendering, CurrentProgram[MESA_SHADER_FRAGMENT] is used for this check
    * to differentiate between the GLSL and non-GLSL cases.
    */
   /* BRW_NEW_FRAGMENT_PROGRAM */
   if (ctx->_Shader->CurrentProgram[MESA_SHADER_FRAGMENT] == NULL)
      dw2 |= GEN7_PS_FLOATING_POINT_MODE_ALT;

   /* Haswell requires the sample mask to be set in this packet as well as
    * in 3DSTATE_SAMPLE_MASK; the values should match. */
   /* _NEW_BUFFERS, _NEW_MULTISAMPLE */
   if (brw->is_haswell)
      dw4 |= SET_FIELD(gen6_determine_sample_mask(brw), HSW_PS_SAMPLE_MASK);

   dw4 |= (brw->max_wm_threads - 1) << max_threads_shift;

   /* CACHE_NEW_WM_PROG */
   if (brw->wm.prog_data->base.nr_params > 0)
      dw4 |= GEN7_PS_PUSH_CONSTANT_ENABLE;

   /* From the IVB PRM, volume 2 part 1, page 287:
    * "This bit is inserted in the PS payload header and made available to
    * the DataPort (either via the message header or via header bypass) to
    * indicate that oMask data (one or two phases) is included in Render
    * Target Write messages. If present, the oMask data is used to mask off
    * samples."
    */
   if (brw->wm.prog_data->uses_omask)
      dw4 |= GEN7_PS_OMASK_TO_RENDER_TARGET;

   /* From the IVB PRM, volume 2 part 1, page 287:
    * "If the PS kernel does not need the Position XY Offsets to
    * compute a Position Value, then this field should be programmed
    * to POSOFFSET_NONE."
    * "SW Recommendation: If the PS kernel needs the Position Offsets
    * to compute a Position XY value, this field should match Position
    * ZW Interpolation Mode to ensure a consistent position.xyzw
    * computation."
    * We only require XY sample offsets. So, this recommendation doesn't
    * look useful at the moment. We might need this in future.
    */
   if (brw->wm.prog_data->uses_pos_offset)
      dw4 |= GEN7_PS_POSOFFSET_SAMPLE;
   else
      dw4 |= GEN7_PS_POSOFFSET_NONE;

   /* CACHE_NEW_WM_PROG | _NEW_COLOR
    *
    * The hardware wedges if you have this bit set but don't turn on any dual
    * source blend factors.
    */
   if (brw->wm.prog_data->dual_src_blend &&
       (ctx->Color.BlendEnabled & 1) &&
       ctx->Color.Blend[0]._UsesDualSrc) {
      dw4 |= GEN7_PS_DUAL_SOURCE_BLEND_ENABLE;
   }

   /* CACHE_NEW_WM_PROG */
   if (brw->wm.prog_data->num_varying_inputs != 0)
      dw4 |= GEN7_PS_ATTRIBUTE_ENABLE;

   /* In case of non 1x per sample shading, only one of SIMD8 and SIMD16
    * should be enabled. We do 'SIMD16 only' dispatch if a SIMD16 shader
    * is successfully compiled. In majority of the cases that bring us
    * better performance than 'SIMD8 only' dispatch.
    */
   int min_inv_per_frag =
      _mesa_get_min_invocations_per_fragment(ctx, brw->fragment_program, false);
   assert(min_inv_per_frag >= 1);

   if (brw->wm.prog_data->prog_offset_16) {
      dw4 |= GEN7_PS_16_DISPATCH_ENABLE;
      if (min_inv_per_frag == 1) {
         dw4 |= GEN7_PS_8_DISPATCH_ENABLE;
         dw5 |= (brw->wm.prog_data->first_curbe_grf <<
                 GEN7_PS_DISPATCH_START_GRF_SHIFT_0);
         dw5 |= (brw->wm.prog_data->first_curbe_grf_16 <<
                 GEN7_PS_DISPATCH_START_GRF_SHIFT_2);
      } else
         dw5 |= (brw->wm.prog_data->first_curbe_grf_16 <<
                 GEN7_PS_DISPATCH_START_GRF_SHIFT_0);
   }
   else {
      dw4 |= GEN7_PS_8_DISPATCH_ENABLE;
      dw5 |= (brw->wm.prog_data->first_curbe_grf <<
              GEN7_PS_DISPATCH_START_GRF_SHIFT_0);
   }

   BEGIN_BATCH(8);
   OUT_BATCH(_3DSTATE_PS << 16 | (8 - 2));
   if (brw->wm.prog_data->prog_offset_16 && min_inv_per_frag > 1)
      OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
   else
      OUT_BATCH(brw->wm.base.prog_offset);
   OUT_BATCH(dw2);
   if (brw->wm.prog_data->total_scratch) {
      OUT_RELOC(brw->wm.base.scratch_bo,
		I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER,
		ffs(brw->wm.prog_data->total_scratch) - 11);
   } else {
      OUT_BATCH(0);
   }
   OUT_BATCH(dw4);
   OUT_BATCH(dw5);
   OUT_BATCH(0); /* kernel 1 pointer */
   OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
   ADVANCE_BATCH();
}

const struct brw_tracked_state gen7_ps_state = {
   .dirty = {
      .mesa  = (_NEW_COLOR |
                _NEW_BUFFERS |
                _NEW_MULTISAMPLE),
      .brw   = (BRW_NEW_FRAGMENT_PROGRAM |
                BRW_NEW_BATCH),
      .cache = (CACHE_NEW_WM_PROG)
   },
   .emit = upload_ps_state,
};
@


1.5
log
@Merge Mesa 10.2.9
@
text
@@


1.4
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d142 1
a142 1
   uint32_t dw2, dw4, dw5, ksp0, ksp2;
d146 1
a146 1
   dw2 = dw4 = dw5 = ksp2 = 0;
d226 1
a226 1
   if (brw->wm.prog_data->prog_offset_16 || brw->wm.prog_data->no_8) {
d228 1
a228 1
      if (!brw->wm.prog_data->no_8 && min_inv_per_frag == 1) {
d230 1
a230 1
         dw5 |= (brw->wm.prog_data->base.dispatch_grf_start_reg <<
d232 1
a232 1
         dw5 |= (brw->wm.prog_data->dispatch_grf_start_reg_16 <<
d234 2
a235 4
         ksp0 = brw->wm.base.prog_offset;
         ksp2 = brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16;
      } else {
         dw5 |= (brw->wm.prog_data->dispatch_grf_start_reg_16 <<
a236 2
         ksp0 = brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16;
      }
d240 1
a240 1
      dw5 |= (brw->wm.prog_data->base.dispatch_grf_start_reg <<
a241 1
      ksp0 = brw->wm.base.prog_offset;
a243 2
   dw4 |= brw->wm.fast_clear_op;

d246 4
a249 1
   OUT_BATCH(ksp0);
d251 1
a251 1
   if (brw->wm.prog_data->base.total_scratch) {
d254 1
a254 1
		ffs(brw->wm.prog_data->base.total_scratch) - 11);
d261 1
a261 1
   OUT_BATCH(ksp2);
@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d142 1
a142 1
   uint32_t dw2, dw4, dw5;
d146 1
a146 1
   dw2 = dw4 = dw5 = 0;
d226 1
a226 1
   if (brw->wm.prog_data->prog_offset_16) {
d228 1
a228 1
      if (min_inv_per_frag == 1) {
d230 1
a230 1
         dw5 |= (brw->wm.prog_data->first_curbe_grf <<
d232 1
a232 1
         dw5 |= (brw->wm.prog_data->first_curbe_grf_16 <<
d234 4
a237 2
      } else
         dw5 |= (brw->wm.prog_data->first_curbe_grf_16 <<
d239 2
d244 1
a244 1
      dw5 |= (brw->wm.prog_data->first_curbe_grf <<
d246 1
d249 2
d253 1
a253 4
   if (brw->wm.prog_data->prog_offset_16 && min_inv_per_frag > 1)
      OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
   else
      OUT_BATCH(brw->wm.base.prog_offset);
d255 1
a255 1
   if (brw->wm.prog_data->total_scratch) {
d258 1
a258 1
		ffs(brw->wm.prog_data->total_scratch) - 11);
d265 1
a265 1
   OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
@


1.2
log
@Merge Mesa 9.2.0
@
text
@d30 1
d64 16
a79 2
      writes_depth = true;
      dw1 |= GEN7_WM_PSCDEPTH_ON;
d86 2
d89 2
a90 1
       ctx->Multisample.SampleAlphaToCoverage)
d92 1
d94 1
a94 1
   /* _NEW_BUFFERS */
d105 5
a109 1
      dw2 |= GEN7_WM_MSDISPMODE_PERPIXEL;
d115 4
d146 1
a146 5
   /* BRW_NEW_PS_BINDING_TABLE */
   BEGIN_BATCH(2);
   OUT_BATCH(_3DSTATE_BINDING_TABLE_POINTERS_PS << 16 | (2 - 2));
   OUT_BATCH(brw->wm.bind_bo_offset);
   ADVANCE_BATCH();
d148 2
a149 5
   /* CACHE_NEW_SAMPLER */
   BEGIN_BATCH(2);
   OUT_BATCH(_3DSTATE_SAMPLER_STATE_POINTERS_PS << 16 | (2 - 2));
   OUT_BATCH(brw->sampler.offset);
   ADVANCE_BATCH();
d152 2
a153 34
   if (brw->wm.prog_data->nr_params == 0) {
      /* Disable the push constant buffers. */
      BEGIN_BATCH(7);
      OUT_BATCH(_3DSTATE_CONSTANT_PS << 16 | (7 - 2));
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   } else {
      uint8_t mocs = brw->is_haswell ? GEN7_MOCS_L3 : 0;

      BEGIN_BATCH(7);
      OUT_BATCH(_3DSTATE_CONSTANT_PS << 16 | (7 - 2));

      OUT_BATCH(ALIGN(brw->wm.prog_data->nr_params,
		      brw->wm.prog_data->dispatch_width) / 8);
      OUT_BATCH(0);
      /* Pointer to the WM constant buffer.  Covered by the set of
       * state flags from gen6_upload_wm_push_constants.
       */
      OUT_BATCH(brw->wm.push_const_offset | mocs);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   }

   dw2 = dw4 = dw5 = 0;

   /* CACHE_NEW_SAMPLER */
   dw2 |= (ALIGN(brw->sampler.count, 4) / 4) << GEN7_PS_SAMPLER_COUNT_SHIFT;
d157 2
a158 2
    * rendering, CurrentFragmentProgram is used for this check to
    * differentiate between the GLSL and non-GLSL cases.
d160 2
a161 1
   if (ctx->Shader.CurrentFragmentProgram == NULL)
d164 3
d168 1
a168 1
      dw4 |= SET_FIELD(1, HSW_PS_SAMPLE_MASK); /* 1 sample for now */
d173 1
a173 1
   if (brw->wm.prog_data->nr_params > 0)
d176 26
d213 2
a214 2
   /* BRW_NEW_FRAGMENT_PROGRAM */
   if (brw->fragment_program->Base.InputsRead != 0)
d217 10
a226 2
   dw4 |= GEN7_PS_8_DISPATCH_ENABLE;
   if (brw->wm.prog_data->prog_offset_16)
d228 15
a242 5

   dw5 |= (brw->wm.prog_data->first_curbe_grf <<
	   GEN7_PS_DISPATCH_START_GRF_SHIFT_0);
   dw5 |= (brw->wm.prog_data->first_curbe_grf_16 <<
	   GEN7_PS_DISPATCH_START_GRF_SHIFT_2);
d246 4
a249 1
   OUT_BATCH(brw->wm.prog_offset);
d252 1
a252 1
      OUT_RELOC(brw->wm.scratch_bo,
d261 1
a261 1
   OUT_BATCH(brw->wm.prog_offset + brw->wm.prog_data->prog_offset_16);
d267 3
a269 2
      .mesa  = (_NEW_PROGRAM_CONSTANTS |
		_NEW_COLOR),
d271 2
a272 4
		BRW_NEW_PS_BINDING_TABLE |
		BRW_NEW_BATCH),
      .cache = (CACHE_NEW_SAMPLER |
		CACHE_NEW_WM_PROG)
@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a34 55
gen7_prepare_wm_constants(struct brw_context *brw)
{
   struct intel_context *intel = &brw->intel;
   struct gl_context *ctx = &intel->ctx;
   /* BRW_NEW_FRAGMENT_PROGRAM */
   const struct brw_fragment_program *fp =
      brw_fragment_program_const(brw->fragment_program);

   /* Updates the ParameterValues[i] pointers for all parameters of the
    * basic type of PROGRAM_STATE_VAR.
    */
   /* XXX: Should this happen somewhere before to get our state flag set? */
   _mesa_load_state_parameters(ctx, fp->program.Base.Parameters);

   /* CACHE_NEW_WM_PROG */
   if (brw->wm.prog_data->nr_params != 0) {
      float *constants;
      unsigned int i;

      constants = brw_state_batch(brw,
				  brw->wm.prog_data->nr_params *
				  sizeof(float),
				  32, &brw->wm.push_const_offset);

      for (i = 0; i < brw->wm.prog_data->nr_params; i++) {
	 constants[i] = convert_param(brw->wm.prog_data->param_convert[i],
				      *brw->wm.prog_data->param[i]);
      }

      if (0) {
	 printf("WM constants:\n");
	 for (i = 0; i < brw->wm.prog_data->nr_params; i++) {
	    if ((i & 7) == 0)
	       printf("g%d: ", brw->wm.prog_data->first_curbe_grf + i / 8);
	    printf("%8f ", constants[i]);
	    if ((i & 7) == 7)
	       printf("\n");
	 }
	 if ((i & 7) != 0)
	    printf("\n");
	 printf("\n");
      }
   }
}

const struct brw_tracked_state gen7_wm_constants = {
   .dirty = {
      .mesa  = _NEW_PROGRAM_CONSTANTS,
      .brw   = (BRW_NEW_BATCH | BRW_NEW_FRAGMENT_PROGRAM),
      .cache = CACHE_NEW_WM_PROG,
   },
   .prepare = gen7_prepare_wm_constants,
};

static void
d37 1
a37 2
   struct intel_context *intel = &brw->intel;
   struct gl_context *ctx = &intel->ctx;
d41 4
a44 1
   uint32_t dw1;
d46 1
a46 1
   dw1 = 0;
d60 1
a60 1
   if (fp->program.Base.InputsRead & (1 << FRAG_ATTRIB_WPOS))
d66 3
d70 3
a72 2
   /* _NEW_COLOR */
   if (fp->program.UsesKill || ctx->Color.AlphaEnabled)
d80 11
a90 2

   dw1 |= GEN7_WM_PERSPECTIVE_PIXEL_BARYCENTRIC;
d95 1
a95 1
   OUT_BATCH(0);
d102 2
a103 1
	        _NEW_COLOR | _NEW_BUFFERS),
a104 1
		BRW_NEW_URB_FENCE |
d106 1
a106 1
      .cache = 0,
d114 1
a114 1
   struct intel_context *intel = &brw->intel;
d116 2
d119 1
d128 1
a128 1
   OUT_BATCH(brw->wm.sampler_offset);
d144 2
d153 1
a153 1
       * state flags from gen7_prepare_wm_constants
d155 1
a155 1
      OUT_BATCH(brw->wm.push_const_offset);
d164 2
a165 1
   dw2 |= (ALIGN(brw->wm.sampler_count, 4) / 4) << GEN7_PS_SAMPLER_COUNT_SHIFT;
d167 7
a173 2
   /* BRW_NEW_NR_WM_SURFACES */
   dw2 |= brw->wm.nr_surfaces << GEN7_PS_BINDING_TABLE_ENTRY_COUNT_SHIFT;
d175 2
a176 2
   /* OpenGL non-ieee floating point mode */
   dw2 |= GEN7_PS_FLOATING_POINT_MODE_ALT;
d178 1
a178 2
   /* CACHE_NEW_SAMPLER */
   dw4 |= (brw->wm_max_threads - 1) << GEN7_PS_MAX_THREADS_SHIFT;
d184 11
d199 2
a200 3
   if (brw->wm.prog_data->dispatch_width == 8)
      dw4 |= GEN7_PS_8_DISPATCH_ENABLE;
   else
a202 1
   /* BRW_NEW_CURBE_OFFSETS */
d205 2
d212 7
a218 1
   OUT_BATCH(0); /* scratch space base offset */
d228 3
a230 4
      .mesa  = _NEW_PROGRAM_CONSTANTS,
      .brw   = (BRW_NEW_CURBE_OFFSETS |
		BRW_NEW_FRAGMENT_PROGRAM |
                BRW_NEW_NR_WM_SURFACES |
a231 1
		BRW_NEW_URB_FENCE |
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@d35 55
d92 2
a93 1
   struct gl_context *ctx = &brw->ctx;
d97 1
a97 4
   uint32_t dw1, dw2;

   /* _NEW_BUFFERS */
   bool multisampled_fbo = ctx->DrawBuffer->Visual.samples > 1;
d99 1
a99 1
   dw1 = dw2 = 0;
d113 1
a113 1
   if (fp->program.Base.InputsRead & VARYING_BIT_POS)
a118 3
   /* CACHE_NEW_WM_PROG */
   dw1 |= brw->wm.prog_data->barycentric_interp_modes <<
      GEN7_WM_BARYCENTRIC_INTERPOLATION_MODE_SHIFT;
d120 2
a121 3
   /* _NEW_COLOR, _NEW_MULTISAMPLE */
   if (fp->program.UsesKill || ctx->Color.AlphaEnabled ||
       ctx->Multisample.SampleAlphaToCoverage)
d129 2
a130 11
   if (multisampled_fbo) {
      /* _NEW_MULTISAMPLE */
      if (ctx->Multisample.Enabled)
         dw1 |= GEN7_WM_MSRAST_ON_PATTERN;
      else
         dw1 |= GEN7_WM_MSRAST_OFF_PIXEL;
      dw2 |= GEN7_WM_MSDISPMODE_PERPIXEL;
   } else {
      dw1 |= GEN7_WM_MSRAST_OFF_PIXEL;
      dw2 |= GEN7_WM_MSDISPMODE_PERSAMPLE;
   }
d135 1
a135 1
   OUT_BATCH(dw2);
d142 1
a142 2
	        _NEW_COLOR | _NEW_BUFFERS |
                _NEW_MULTISAMPLE),
d144 1
d146 1
a146 1
      .cache = CACHE_NEW_WM_PROG,
d154 1
a154 1
   struct gl_context *ctx = &brw->ctx;
a155 2
   const int max_threads_shift = brw->is_haswell ?
      HSW_PS_MAX_THREADS_SHIFT : IVB_PS_MAX_THREADS_SHIFT;
a156 1
   /* BRW_NEW_PS_BINDING_TABLE */
d165 1
a165 1
   OUT_BATCH(brw->sampler.offset);
a180 2
      uint8_t mocs = brw->is_haswell ? GEN7_MOCS_L3 : 0;

d188 1
a188 1
       * state flags from gen6_upload_wm_push_constants.
d190 1
a190 1
      OUT_BATCH(brw->wm.push_const_offset | mocs);
d199 1
a199 2
   /* CACHE_NEW_SAMPLER */
   dw2 |= (ALIGN(brw->sampler.count, 4) / 4) << GEN7_PS_SAMPLER_COUNT_SHIFT;
d201 2
a202 7
   /* Use ALT floating point mode for ARB fragment programs, because they
    * require 0^0 == 1.  Even though _CurrentFragmentProgram is used for
    * rendering, CurrentFragmentProgram is used for this check to
    * differentiate between the GLSL and non-GLSL cases.
    */
   if (ctx->Shader.CurrentFragmentProgram == NULL)
      dw2 |= GEN7_PS_FLOATING_POINT_MODE_ALT;
d204 2
a205 2
   if (brw->is_haswell)
      dw4 |= SET_FIELD(1, HSW_PS_SAMPLE_MASK); /* 1 sample for now */
d207 2
a208 1
   dw4 |= (brw->max_wm_threads - 1) << max_threads_shift;
a213 11
   /* CACHE_NEW_WM_PROG | _NEW_COLOR
    *
    * The hardware wedges if you have this bit set but don't turn on any dual
    * source blend factors.
    */
   if (brw->wm.prog_data->dual_src_blend &&
       (ctx->Color.BlendEnabled & 1) &&
       ctx->Color.Blend[0]._UsesDualSrc) {
      dw4 |= GEN7_PS_DUAL_SOURCE_BLEND_ENABLE;
   }

d218 3
a220 2
   dw4 |= GEN7_PS_8_DISPATCH_ENABLE;
   if (brw->wm.prog_data->prog_offset_16)
d223 1
a225 2
   dw5 |= (brw->wm.prog_data->first_curbe_grf_16 <<
	   GEN7_PS_DISPATCH_START_GRF_SHIFT_2);
d231 1
a231 7
   if (brw->wm.prog_data->total_scratch) {
      OUT_RELOC(brw->wm.scratch_bo,
		I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER,
		ffs(brw->wm.prog_data->total_scratch) - 11);
   } else {
      OUT_BATCH(0);
   }
d241 4
a244 3
      .mesa  = (_NEW_PROGRAM_CONSTANTS |
		_NEW_COLOR),
      .brw   = (BRW_NEW_FRAGMENT_PROGRAM |
d246 1
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@a29 1
#include "program/program.h"
d63 2
a64 16
      writes_depth = fp->program.FragDepthLayout != FRAG_DEPTH_LAYOUT_UNCHANGED;

      switch (fp->program.FragDepthLayout) {
         case FRAG_DEPTH_LAYOUT_NONE:
         case FRAG_DEPTH_LAYOUT_ANY:
            dw1 |= GEN7_WM_PSCDEPTH_ON;
            break;
         case FRAG_DEPTH_LAYOUT_GREATER:
            dw1 |= GEN7_WM_PSCDEPTH_ON_GE;
            break;
         case FRAG_DEPTH_LAYOUT_LESS:
            dw1 |= GEN7_WM_PSCDEPTH_ON_LE;
            break;
         case FRAG_DEPTH_LAYOUT_UNCHANGED:
            break;
      }
a70 2
   /* Enable if the pixel shader kernel generates and outputs oMask.
    */
d72 1
a72 2
       ctx->Multisample.SampleAlphaToCoverage ||
       brw->wm.prog_data->uses_omask) {
a73 1
   }
d75 1
a75 1
   /* _NEW_BUFFERS | _NEW_COLOR */
d86 1
a86 5

      if (_mesa_get_min_invocations_per_fragment(ctx, brw->fragment_program, false) > 1)
         dw2 |= GEN7_WM_MSDISPMODE_PERSAMPLE;
      else
         dw2 |= GEN7_WM_MSDISPMODE_PERPIXEL;
a91 4
   if (fp->program.Base.SystemValuesRead & SYSTEM_BIT_SAMPLE_MASK_IN) {
      dw1 |= GEN7_WM_USES_INPUT_COVERAGE_MASK;
   }

d119 5
a123 1
   dw2 = dw4 = dw5 = 0;
d125 5
a129 2
   dw2 |=
      (ALIGN(brw->wm.base.sampler_count, 4) / 4) << GEN7_PS_SAMPLER_COUNT_SHIFT;
d132 34
a165 2
   dw2 |= ((brw->wm.prog_data->base.binding_table.size_bytes / 4) <<
           GEN7_PS_BINDING_TABLE_ENTRY_COUNT_SHIFT);
d169 2
a170 2
    * rendering, CurrentProgram[MESA_SHADER_FRAGMENT] is used for this check
    * to differentiate between the GLSL and non-GLSL cases.
d172 1
a172 2
   /* BRW_NEW_FRAGMENT_PROGRAM */
   if (ctx->_Shader->CurrentProgram[MESA_SHADER_FRAGMENT] == NULL)
a174 3
   /* Haswell requires the sample mask to be set in this packet as well as
    * in 3DSTATE_SAMPLE_MASK; the values should match. */
   /* _NEW_BUFFERS, _NEW_MULTISAMPLE */
d176 1
a176 1
      dw4 |= SET_FIELD(gen6_determine_sample_mask(brw), HSW_PS_SAMPLE_MASK);
d181 1
a181 1
   if (brw->wm.prog_data->base.nr_params > 0)
a183 26
   /* From the IVB PRM, volume 2 part 1, page 287:
    * "This bit is inserted in the PS payload header and made available to
    * the DataPort (either via the message header or via header bypass) to
    * indicate that oMask data (one or two phases) is included in Render
    * Target Write messages. If present, the oMask data is used to mask off
    * samples."
    */
   if (brw->wm.prog_data->uses_omask)
      dw4 |= GEN7_PS_OMASK_TO_RENDER_TARGET;

   /* From the IVB PRM, volume 2 part 1, page 287:
    * "If the PS kernel does not need the Position XY Offsets to
    * compute a Position Value, then this field should be programmed
    * to POSOFFSET_NONE."
    * "SW Recommendation: If the PS kernel needs the Position Offsets
    * to compute a Position XY value, this field should match Position
    * ZW Interpolation Mode to ensure a consistent position.xyzw
    * computation."
    * We only require XY sample offsets. So, this recommendation doesn't
    * look useful at the moment. We might need this in future.
    */
   if (brw->wm.prog_data->uses_pos_offset)
      dw4 |= GEN7_PS_POSOFFSET_SAMPLE;
   else
      dw4 |= GEN7_PS_POSOFFSET_NONE;

d195 2
a196 2
   /* CACHE_NEW_WM_PROG */
   if (brw->wm.prog_data->num_varying_inputs != 0)
d199 3
a201 8
   /* In case of non 1x per sample shading, only one of SIMD8 and SIMD16
    * should be enabled. We do 'SIMD16 only' dispatch if a SIMD16 shader
    * is successfully compiled. In majority of the cases that bring us
    * better performance than 'SIMD8 only' dispatch.
    */
   int min_inv_per_frag =
      _mesa_get_min_invocations_per_fragment(ctx, brw->fragment_program, false);
   assert(min_inv_per_frag >= 1);
d203 4
a206 17
   if (brw->wm.prog_data->prog_offset_16) {
      dw4 |= GEN7_PS_16_DISPATCH_ENABLE;
      if (min_inv_per_frag == 1) {
         dw4 |= GEN7_PS_8_DISPATCH_ENABLE;
         dw5 |= (brw->wm.prog_data->first_curbe_grf <<
                 GEN7_PS_DISPATCH_START_GRF_SHIFT_0);
         dw5 |= (brw->wm.prog_data->first_curbe_grf_16 <<
                 GEN7_PS_DISPATCH_START_GRF_SHIFT_2);
      } else
         dw5 |= (brw->wm.prog_data->first_curbe_grf_16 <<
                 GEN7_PS_DISPATCH_START_GRF_SHIFT_0);
   }
   else {
      dw4 |= GEN7_PS_8_DISPATCH_ENABLE;
      dw5 |= (brw->wm.prog_data->first_curbe_grf <<
              GEN7_PS_DISPATCH_START_GRF_SHIFT_0);
   }
d210 1
a210 4
   if (brw->wm.prog_data->prog_offset_16 && min_inv_per_frag > 1)
      OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
   else
      OUT_BATCH(brw->wm.base.prog_offset);
d213 1
a213 1
      OUT_RELOC(brw->wm.base.scratch_bo,
d222 1
a222 1
   OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
d228 2
a229 3
      .mesa  = (_NEW_COLOR |
                _NEW_BUFFERS |
                _NEW_MULTISAMPLE),
d231 4
a234 2
                BRW_NEW_BATCH),
      .cache = (CACHE_NEW_WM_PROG)
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d142 1
a142 1
   uint32_t dw2, dw4, dw5, ksp0, ksp2;
d146 1
a146 1
   dw2 = dw4 = dw5 = ksp2 = 0;
d226 1
a226 1
   if (brw->wm.prog_data->prog_offset_16 || brw->wm.prog_data->no_8) {
d228 1
a228 1
      if (!brw->wm.prog_data->no_8 && min_inv_per_frag == 1) {
d230 1
a230 1
         dw5 |= (brw->wm.prog_data->base.dispatch_grf_start_reg <<
d232 1
a232 1
         dw5 |= (brw->wm.prog_data->dispatch_grf_start_reg_16 <<
d234 2
a235 4
         ksp0 = brw->wm.base.prog_offset;
         ksp2 = brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16;
      } else {
         dw5 |= (brw->wm.prog_data->dispatch_grf_start_reg_16 <<
a236 2
         ksp0 = brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16;
      }
d240 1
a240 1
      dw5 |= (brw->wm.prog_data->base.dispatch_grf_start_reg <<
a241 1
      ksp0 = brw->wm.base.prog_offset;
a243 2
   dw4 |= brw->wm.fast_clear_op;

d246 4
a249 1
   OUT_BATCH(ksp0);
d251 1
a251 1
   if (brw->wm.prog_data->base.total_scratch) {
d254 1
a254 1
		ffs(brw->wm.prog_data->base.total_scratch) - 11);
d261 1
a261 1
   OUT_BATCH(ksp2);
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d142 1
a142 1
   uint32_t dw2, dw4, dw5;
d146 1
a146 1
   dw2 = dw4 = dw5 = 0;
d226 1
a226 1
   if (brw->wm.prog_data->prog_offset_16) {
d228 1
a228 1
      if (min_inv_per_frag == 1) {
d230 1
a230 1
         dw5 |= (brw->wm.prog_data->first_curbe_grf <<
d232 1
a232 1
         dw5 |= (brw->wm.prog_data->first_curbe_grf_16 <<
d234 4
a237 2
      } else
         dw5 |= (brw->wm.prog_data->first_curbe_grf_16 <<
d239 2
d244 1
a244 1
      dw5 |= (brw->wm.prog_data->first_curbe_grf <<
d246 1
d249 2
d253 1
a253 4
   if (brw->wm.prog_data->prog_offset_16 && min_inv_per_frag > 1)
      OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
   else
      OUT_BATCH(brw->wm.base.prog_offset);
d255 1
a255 1
   if (brw->wm.prog_data->total_scratch) {
d258 1
a258 1
		ffs(brw->wm.prog_data->total_scratch) - 11);
d265 1
a265 1
   OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
@


