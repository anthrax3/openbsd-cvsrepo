head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.5.0.4
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.2
	OPENBSD_5_6_BASE:1.1.1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.1.1.2.0.2
	OPENBSD_5_5_BASE:1.1.1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.15.43;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.15.43;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.11.24.06.00.39;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.52;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.11.51;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.48.55;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2012 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#include "intel_batchbuffer.h"

#include "brw_context.h"
#include "brw_defines.h"

/* Sample positions:
 *   2 6 a e
 * 2   0
 * 6       1
 * a 2
 * e     3
 */
static uint32_t
sample_positions_4x[] = { 0xae2ae662 };
/* Sample positions are based on a solution to the "8 queens" puzzle.
 * Rationale: in a solution to the 8 queens puzzle, no two queens share
 * a row, column, or diagonal.  This is a desirable property for samples
 * in a multisampling pattern, because it ensures that the samples are
 * relatively uniformly distributed through the pixel.
 *
 * There are several solutions to the 8 queens puzzle (see
 * http://en.wikipedia.org/wiki/Eight_queens_puzzle).  This solution was
 * chosen because it has a queen close to the center; this should
 * improve the accuracy of centroid interpolation, since the hardware
 * implements centroid interpolation by choosing the centermost sample
 * that overlaps with the primitive being drawn.
 *
 * Note: from the Ivy Bridge PRM, Vol2 Part1 p304 (3DSTATE_MULTISAMPLE:
 * Programming Notes):
 *
 *     "When programming the sample offsets (for NUMSAMPLES_4 or _8 and
 *     MSRASTMODE_xxx_PATTERN), the order of the samples 0 to 3 (or 7
 *     for 8X) must have monotonically increasing distance from the
 *     pixel center. This is required to get the correct centroid
 *     computation in the device."
 *
 * Sample positions:
 *   1 3 5 7 9 b d f
 * 1     5
 * 3           2
 * 5               6
 * 7 4
 * 9       0
 * b             3
 * d         1
 * f   7
 */
static uint32_t
sample_positions_8x[] = { 0xdbb39d79, 0x3ff55117 };


void
gen6_get_sample_position(struct gl_context *ctx,
                         struct gl_framebuffer *fb,
                         GLuint index, GLfloat *result)
{
   switch (fb->Visual.samples) {
   case 1:
      result[0] = result[1] = 0.5f;
      break;
   case 4: {
      uint8_t val = (uint8_t)(sample_positions_4x[0] >> (8*index));
      result[0] = ((val >> 4) & 0xf) / 16.0f;
      result[1] = (val & 0xf) / 16.0f;
      break;
   }
   case 8: {
      uint8_t val = (uint8_t)(sample_positions_8x[index>>2] >> (8*(index & 3)));
      result[0] = ((val >> 4) & 0xf) / 16.0f;
      result[1] = (val & 0xf) / 16.0f;
      break;
   }
   default:
      assert(!"Not implemented");
   }
}

/**
 * 3DSTATE_MULTISAMPLE
 */
void
gen6_emit_3dstate_multisample(struct brw_context *brw,
                              unsigned num_samples)
{
   uint32_t number_of_multisamples = 0;
   uint32_t sample_positions_3210 = 0;
   uint32_t sample_positions_7654 = 0;

   switch (num_samples) {
   case 0:
   case 1:
      number_of_multisamples = MS_NUMSAMPLES_1;
      break;
   case 4:
      number_of_multisamples = MS_NUMSAMPLES_4;
      sample_positions_3210 = sample_positions_4x[0];
      break;
   case 8:
      number_of_multisamples = MS_NUMSAMPLES_8;
      sample_positions_3210 = sample_positions_8x[0];
      sample_positions_7654 = sample_positions_8x[1];
      break;
   default:
      assert(!"Unrecognized num_samples in gen6_emit_3dstate_multisample");
      break;
   }

   int len = brw->gen >= 7 ? 4 : 3;
   BEGIN_BATCH(len);
   OUT_BATCH(_3DSTATE_MULTISAMPLE << 16 | (len - 2));
   OUT_BATCH(MS_PIXEL_LOCATION_CENTER | number_of_multisamples);
   OUT_BATCH(sample_positions_3210);
   if (brw->gen >= 7)
      OUT_BATCH(sample_positions_7654);
   ADVANCE_BATCH();
}


/**
 * 3DSTATE_SAMPLE_MASK
 */
void
gen6_emit_3dstate_sample_mask(struct brw_context *brw,
                              unsigned num_samples, float coverage,
                              bool coverage_invert, unsigned sample_mask)
{
   BEGIN_BATCH(2);
   OUT_BATCH(_3DSTATE_SAMPLE_MASK << 16 | (2 - 2));
   if (num_samples > 1) {
      int coverage_int = (int) (num_samples * coverage + 0.5);
      uint32_t coverage_bits = (1 << coverage_int) - 1;
      if (coverage_invert)
         coverage_bits ^= (1 << num_samples) - 1;
      OUT_BATCH(coverage_bits & sample_mask);
   } else {
      OUT_BATCH(1);
   }
   ADVANCE_BATCH();
}


static void upload_multisample_state(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   float coverage = 1.0;
   float coverage_invert = false;
   unsigned sample_mask = ~0u;

   /* _NEW_BUFFERS */
   unsigned num_samples = ctx->DrawBuffer->Visual.samples;

   /* _NEW_MULTISAMPLE */
   if (ctx->Multisample._Enabled) {
      if (ctx->Multisample.SampleCoverage) {
         coverage = ctx->Multisample.SampleCoverageValue;
         coverage_invert = ctx->Multisample.SampleCoverageInvert;
      }
      if (ctx->Multisample.SampleMask) {
         sample_mask = ctx->Multisample.SampleMaskValue;
      }
   }

   /* 3DSTATE_MULTISAMPLE is nonpipelined. */
   intel_emit_post_sync_nonzero_flush(brw);

   gen6_emit_3dstate_multisample(brw, num_samples);
   gen6_emit_3dstate_sample_mask(brw, num_samples, coverage,
         coverage_invert, sample_mask);
}


const struct brw_tracked_state gen6_multisample_state = {
   .dirty = {
      .mesa = _NEW_BUFFERS |
              _NEW_MULTISAMPLE,
      .brw = BRW_NEW_CONTEXT,
      .cache = 0
   },
   .emit = upload_multisample_state
};
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.3
@
text
@a130 3
   /* 3DSTATE_MULTISAMPLE is nonpipelined. */
   intel_emit_post_sync_nonzero_flush(brw);

d185 3
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d28 46
a73 1
#include "brw_multisample_state.h"
a79 2
   uint8_t bits;

a82 3
      return;
   case 2:
      bits = brw_multisample_positions_1x_2x >> (8 * index);
d84 4
a87 2
   case 4:
      bits = brw_multisample_positions_4x >> (8 * index);
d89 5
a93 2
   case 8:
      bits = brw_multisample_positions_8x[index >> 2] >> (8 * (index & 3));
d95 1
a97 1
      return;
a98 4

   /* Convert from U0.4 back to a floating point coordinate. */
   result[0] = ((bits >> 4) & 0xf) / 16.0f;
   result[1] = (bits & 0xf) / 16.0f;
a111 2
   assert(brw->gen < 8);

d119 1
a119 1
      sample_positions_3210 = brw_multisample_positions_4x;
d123 2
a124 2
      sample_positions_3210 = brw_multisample_positions_8x[0];
      sample_positions_7654 = brw_multisample_positions_8x[1];
d145 24
a168 2
unsigned
gen6_determine_sample_mask(struct brw_context *brw)
d175 2
a176 2
   /* BRW_NEW_NUM_SAMPLES */
   unsigned num_samples = brw->num_samples;
d178 1
d189 3
a191 30
   if (num_samples > 1) {
      int coverage_int = (int) (num_samples * coverage + 0.5);
      uint32_t coverage_bits = (1 << coverage_int) - 1;
      if (coverage_invert)
         coverage_bits ^= (1 << num_samples) - 1;
      return coverage_bits & sample_mask;
   } else {
      return 1;
   }
}


/**
 * 3DSTATE_SAMPLE_MASK
 */
void
gen6_emit_3dstate_sample_mask(struct brw_context *brw, unsigned mask)
{
   BEGIN_BATCH(2);
   OUT_BATCH(_3DSTATE_SAMPLE_MASK << 16 | (2 - 2));
   OUT_BATCH(mask);
   ADVANCE_BATCH();
}


static void upload_multisample_state(struct brw_context *brw)
{
   /* BRW_NEW_NUM_SAMPLES */
   gen6_emit_3dstate_multisample(brw, brw->num_samples);
   gen6_emit_3dstate_sample_mask(brw, gen6_determine_sample_mask(brw));
d197 3
a199 3
      .mesa = _NEW_MULTISAMPLE,
      .brw = (BRW_NEW_CONTEXT |
              BRW_NEW_NUM_SAMPLES),
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d51 2
a52 1
      unreachable("Not implemented");
a60 45
 * Sample index layout shows the numbering of slots in a rectangular
 * grid of samples with in a pixel. Sample number layout shows the
 * rectangular grid of samples roughly corresponding to the real sample
 * locations with in a pixel. Sample number layout matches the sample
 * index layout in case of 2X and 4x MSAA, but they are different in
 * case of 8X MSAA.
 *
 * 2X MSAA sample index / number layout
 *           ---------
 *           | 0 | 1 |
 *           ---------
 *
 * 4X MSAA sample index / number layout
 *           ---------
 *           | 0 | 1 |
 *           ---------
 *           | 2 | 3 |
 *           ---------
 *
 * 8X MSAA sample index layout    8x MSAA sample number layout
 *           ---------                      ---------
 *           | 0 | 1 |                      | 5 | 2 |
 *           ---------                      ---------
 *           | 2 | 3 |                      | 4 | 6 |
 *           ---------                      ---------
 *           | 4 | 5 |                      | 0 | 3 |
 *           ---------                      ---------
 *           | 6 | 7 |                      | 7 | 1 |
 *           ---------                      ---------
 *
 * A sample map is used to map sample indices to sample numbers.
 */
void
gen6_set_sample_maps(struct gl_context *ctx)
{
   uint8_t map_2x[2] = {0, 1};
   uint8_t map_4x[4] = {0, 1, 2, 3};
   uint8_t map_8x[8] = {5, 2, 4, 6, 0, 3, 7, 1};

   memcpy(ctx->Const.SampleMap2x, map_2x, sizeof(map_2x));
   memcpy(ctx->Const.SampleMap4x, map_4x, sizeof(map_4x));
   memcpy(ctx->Const.SampleMap8x, map_8x, sizeof(map_8x));
}

/**
d88 2
a89 1
      unreachable("Unrecognized num_samples in gen6_emit_3dstate_multisample");
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d51 1
a51 2
      assert(!"Not implemented");
      return;
d60 45
d132 1
a132 2
      assert(!"Unrecognized num_samples in gen6_emit_3dstate_multisample");
      break;
@


