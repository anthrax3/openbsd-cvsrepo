head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.3.0.4
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	v10_2_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2014.07.09.20.34.50;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.1
date	2014.07.09.20.34.50;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.2
date	2015.01.25.14.11.39;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.3
date	2015.02.20.22.48.45;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2013 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#include "brw_fs.h"
#include "brw_fs_live_variables.h"
#include "brw_cfg.h"

/** @@file brw_fs_saturate_propagation.cpp
 */

static bool
opt_saturate_propagation_local(fs_visitor *v, bblock_t *block)
{
   bool progress = false;
   int ip = block->start_ip - 1;

   for (fs_inst *inst = (fs_inst *)block->start;
        inst != block->end->next;
        inst = (fs_inst *) inst->next) {
      ip++;

      if (inst->opcode != BRW_OPCODE_MOV ||
          inst->dst.file != GRF ||
          inst->src[0].file != GRF ||
          inst->src[0].abs ||
          inst->src[0].negate ||
          !inst->saturate)
         continue;

      int src_var = v->live_intervals->var_from_reg(&inst->src[0]);
      int src_end_ip = v->live_intervals->end[src_var];
      if (src_end_ip > ip && !inst->dst.equals(inst->src[0]))
         continue;

      int scan_ip = ip;
      bool interfered = false;
      for (fs_inst *scan_inst = (fs_inst *) inst->prev;
           scan_inst != block->start->prev;
           scan_inst = (fs_inst *) scan_inst->prev) {
         scan_ip--;

         if (scan_inst->dst.file == GRF &&
             scan_inst->dst.reg == inst->src[0].reg &&
             scan_inst->dst.reg_offset == inst->src[0].reg_offset &&
             !scan_inst->is_partial_write()) {
            if (scan_inst->can_do_saturate()) {
               scan_inst->saturate = true;
               inst->saturate = false;
               progress = true;
            }
            break;
         }
         for (int i = 0; i < 3; i++) {
            if (scan_inst->src[i].file == GRF &&
                scan_inst->src[i].reg == inst->src[0].reg &&
                scan_inst->src[i].reg_offset == inst->src[0].reg_offset) {
               interfered = true;
               break;
            }
         }

         if (interfered)
            break;
      }
   }

   return progress;
}

bool
fs_visitor::opt_saturate_propagation()
{
   bool progress = false;

   calculate_live_intervals();

   cfg_t cfg(&instructions);

   for (int b = 0; b < cfg.num_blocks; b++) {
      progress = opt_saturate_propagation_local(this, cfg.blocks[b])
                 || progress;
   }

   if (progress)
      invalidate_live_intervals();

   return progress;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 10.2.3
@
text
@@


1.1.1.2
log
@Import Mesa 10.4.3
@
text
@d35 1
a35 1
   int ip = block->end_ip + 1;
d37 4
a40 2
   foreach_inst_in_block_reverse(fs_inst, inst, block) {
      ip--;
d52 2
d55 1
d57 5
a61 1
      foreach_inst_in_block_reverse_starting_from(fs_inst, scan_inst, inst, block) {
d66 2
a67 1
            if (scan_inst->saturate) {
a69 6
            } else if (src_end_ip <= ip || inst->dst.equals(inst->src[0])) {
               if (scan_inst->can_do_saturate()) {
                  scan_inst->saturate = true;
                  inst->saturate = false;
                  progress = true;
               }
d73 2
a74 3
         for (int i = 0; i < scan_inst->sources; i++) {
            if ((scan_inst->opcode != BRW_OPCODE_MOV || !scan_inst->saturate) &&
                scan_inst->src[i].file == GRF &&
d97 5
a101 2
   foreach_block (block, cfg) {
      progress = opt_saturate_propagation_local(this, block) || progress;
d104 2
a105 1
   /* Live intervals are still valid. */
@


1.1.1.3
log
@Import Mesa 10.2.9
@
text
@d35 1
a35 1
   int ip = block->start_ip - 1;
d37 2
a38 4
   for (fs_inst *inst = (fs_inst *)block->start;
        inst != block->end->next;
        inst = (fs_inst *) inst->next) {
      ip++;
a49 2
      if (src_end_ip > ip && !inst->dst.equals(inst->src[0]))
         continue;
a50 1
      int scan_ip = ip;
d52 1
a52 5
      for (fs_inst *scan_inst = (fs_inst *) inst->prev;
           scan_inst != block->start->prev;
           scan_inst = (fs_inst *) scan_inst->prev) {
         scan_ip--;

d57 1
a57 2
            if (scan_inst->can_do_saturate()) {
               scan_inst->saturate = true;
d60 6
d69 3
a71 2
         for (int i = 0; i < 3; i++) {
            if (scan_inst->src[i].file == GRF &&
d94 2
a95 5
   cfg_t cfg(&instructions);

   for (int b = 0; b < cfg.num_blocks; b++) {
      progress = opt_saturate_propagation_local(this, cfg.blocks[b])
                 || progress;
d98 1
a98 2
   if (progress)
      invalidate_live_intervals();
@


