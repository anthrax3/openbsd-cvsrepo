head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.04.28;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.15;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.52;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.52;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.28.43;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.49;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.53;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.11.57;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.49.03;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#ifndef _INTEL_INIT_H_
#define _INTEL_INIT_H_

#include <stdbool.h>
#include <sys/time.h>
#include "dri_util.h"
#include "intel_bufmgr.h"
#include "intel_chipset.h"
#include "brw_device_info.h"
#include "i915_drm.h"
#include "xmlconfig.h"

struct intel_screen
{
   int deviceID;
   const struct brw_device_info *devinfo;

   __DRIscreen *driScrnPriv;

   bool no_hw;

   bool hw_must_use_separate_stencil;

   bool hw_has_swizzling;

   /**
    * Does the kernel support context reset notifications?
    */
   bool has_context_reset_notification;

   dri_bufmgr *bufmgr;

   /**
    * A unique ID for shader programs.
    */
   unsigned program_id;

   int winsys_msaa_samples_override;

   struct {
      struct ra_regs *regs;

      /**
       * Array of the ra classes for the unaligned contiguous register
       * block sizes used.
       */
      int *classes;

      /**
       * Mapping for register-allocated objects in *regs to the first
       * GRF for that object.
       */
      uint8_t *ra_reg_to_grf;
   } vec4_reg_set;

   struct {
      struct ra_regs *regs;

      /**
       * Array of the ra classes for the unaligned contiguous register
       * block sizes used, indexed by register size.
       */
      int classes[16];

      /**
       * Mapping for register-allocated objects in *regs to the first
       * GRF for that object.
       */
      uint8_t *ra_reg_to_grf;

      /**
       * ra class for the aligned pairs we use for PLN, which doesn't
       * appear in *classes.
       */
      int aligned_pairs_class;
   } wm_reg_sets[2];

   /**
   * Configuration cache with default values for all contexts
   */
   driOptionCache optionCache;
};

extern void intelDestroyContext(__DRIcontext * driContextPriv);

extern GLboolean intelUnbindContext(__DRIcontext * driContextPriv);

PUBLIC const __DRIextension **__driDriverGetExtensions_i965(void);

extern GLboolean
intelMakeCurrent(__DRIcontext * driContextPriv,
                 __DRIdrawable * driDrawPriv,
                 __DRIdrawable * driReadPriv);

double get_time(void);
void aub_dump_bmp(struct gl_context *ctx);

const int*
intel_supported_msaa_modes(const struct intel_screen  *screen);

#endif
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d35 1
a90 10

      /**
       * Mapping from classes to ra_reg ranges.  Each of the per-size
       * classes corresponds to a range of ra_reg nodes.  This array stores
       * those ranges in the form of first ra_reg in each class and the
       * total number of ra_reg elements in the last array element.  This
       * way the range of the i'th class is given by:
       * [ class_to_ra_reg_range[i], class_to_ra_reg_range[i+1] )
       */
      int class_to_ra_reg_range[17];
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@a34 1
#include "intel_chipset.h"
d90 10
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d2 2
a3 2
 * 
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d5 1
a5 1
 * 
d13 1
a13 1
 * 
d17 1
a17 1
 * 
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d25 1
a25 1
 * 
d35 2
d43 1
a43 6
   int gen;

   int max_gl_core_version;
   int max_gl_compat_version;
   int max_gl_es1_version;
   int max_gl_es2_version;
a48 6
   /*
    * The hardware hiz and separate stencil fields are needed in intel_screen,
    * rather than solely in brw_context, because glXCreatePbuffer and
    * glXCreatePixmap are not passed a GLXContext.
    */
   bool hw_has_separate_stencil;
a50 1
   bool hw_has_llc;
d53 5
d65 40
d115 2
d124 3
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d31 1
d34 2
a36 1
#include "i830_common.h"
d38 1
a38 12
/* XXX: change name or eliminate to avoid conflict with "struct
 * intel_region"!!!
 */
typedef struct {
   drm_handle_t handle;
   drmSize size;        /* region size in bytes */
   char *map;           /* memory map */
   int offset;          /* from start of video mem, in bytes */
   int pitch;           /* row stride, in pixels */
} intelRegion;

typedef struct 
a39 6
   intelRegion front;
   intelRegion back;
   intelRegion rotated;
   intelRegion depth;
   intelRegion tex;
   
d41 1
a41 3
   int width;
   int height;
   int mem;         /* unused */
d43 4
a46 2
   int cpp;         /* for front and back buffers */
   int fbFormat;
d48 1
a48 4
   int logTextureGranularity;
   
   __DRIscreenPrivate *driScrnPriv;
   unsigned int sarea_priv_offset;
d50 1
a50 1
   int drmMinor;
d52 7
a58 2
   int irq_active;
   int allow_batchbuffer;
d60 2
a61 1
/*    struct matrix23 rotMatrix; */
d63 1
a63 2
   int current_rotation;  /* 0, 90, 180 or 270 */
   int rotatedWidth, rotatedHeight;
d66 1
a66 1
    * Configuration cache with default values for all contexts 
d68 5
d74 1
a74 1
} intelScreenPrivate;
d76 1
d78 1
a78 12
extern GLboolean
intelMapScreenRegions(__DRIscreenPrivate *sPriv);

extern void
intelUnmapScreenRegions(intelScreenPrivate *intelScreen);

extern void
intelUpdateScreenFromSAREA(intelScreenPrivate *intelScreen,
                           volatile drmI830Sarea *sarea);

extern void
intelDestroyContext(__DRIcontextPrivate *driContextPriv);
d81 3
a83 1
intelUnbindContext(__DRIcontextPrivate *driContextPriv);
d85 2
a86 11
extern GLboolean
intelMakeCurrent(__DRIcontextPrivate *driContextPriv,
                 __DRIdrawablePrivate *driDrawPriv,
                 __DRIdrawablePrivate *driReadPriv);

extern void
intelSwapBuffers(__DRIdrawablePrivate *dPriv);

extern void 
intelCopySubBuffer( __DRIdrawablePrivate *dPriv,
		    int x, int y, int w, int h );
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Mesa 7.0.1
@
text
@a44 1
   unsigned int tiled; 
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@a30 1
#include <stdbool.h>
a32 2
#include "intel_bufmgr.h"
#include "i915_drm.h"
d34 1
d36 13
a48 1
struct intel_screen
d50 6
d57 3
a59 1
   int gen;
d61 2
a62 4
   int max_gl_core_version;
   int max_gl_compat_version;
   int max_gl_es1_version;
   int max_gl_es2_version;
d64 4
a67 1
   __DRIscreen *driScrnPriv;
d69 1
a69 1
   bool no_hw;
d71 2
a72 7
   /*
    * The hardware hiz and separate stencil fields are needed in intel_screen,
    * rather than solely in brw_context, because glXCreatePbuffer and
    * glXCreatePixmap are not passed a GLXContext.
    */
   bool hw_has_separate_stencil;
   bool hw_must_use_separate_stencil;
d74 1
a74 2
   bool hw_has_llc;
   bool hw_has_swizzling;
d76 2
a77 1
   dri_bufmgr *bufmgr;
d80 1
a80 1
    * A unique ID for shader programs.
d82 2
a83 1
   unsigned program_id;
a84 5
   /**
   * Configuration cache with default values for all contexts
   */
   driOptionCache optionCache;
};
d86 9
a94 1
extern void intelDestroyContext(__DRIcontext * driContextPriv);
d96 2
a97 1
extern GLboolean intelUnbindContext(__DRIcontext * driContextPriv);
d100 1
a100 3
intelMakeCurrent(__DRIcontext * driContextPriv,
                 __DRIdrawable * driDrawPriv,
                 __DRIdrawable * driReadPriv);
d102 11
a112 2
double get_time(void);
void aub_dump_bmp(struct gl_context *ctx);
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d2 2
a3 2
 *
 * Copyright 2003 VMware, Inc.
d5 1
a5 1
 *
d13 1
a13 1
 *
d17 1
a17 1
 *
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d25 1
a25 1
 *
a34 2
#include "intel_chipset.h"
#include "brw_device_info.h"
d41 6
a46 1
   const struct brw_device_info *devinfo;
d52 6
d60 1
a62 5
   /**
    * Does the kernel support context reset notifications?
    */
   bool has_context_reset_notification;

a69 40
   int winsys_msaa_samples_override;

   struct {
      struct ra_regs *regs;

      /**
       * Array of the ra classes for the unaligned contiguous register
       * block sizes used.
       */
      int *classes;

      /**
       * Mapping for register-allocated objects in *regs to the first
       * GRF for that object.
       */
      uint8_t *ra_reg_to_grf;
   } vec4_reg_set;

   struct {
      struct ra_regs *regs;

      /**
       * Array of the ra classes for the unaligned contiguous register
       * block sizes used, indexed by register size.
       */
      int classes[16];

      /**
       * Mapping for register-allocated objects in *regs to the first
       * GRF for that object.
       */
      uint8_t *ra_reg_to_grf;

      /**
       * ra class for the aligned pairs we use for PLN, which doesn't
       * appear in *classes.
       */
      int aligned_pairs_class;
   } wm_reg_sets[2];

a79 2
PUBLIC const __DRIextension **__driDriverGetExtensions_i965(void);

a86 3

const int*
intel_supported_msaa_modes(const struct intel_screen  *screen);
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d35 1
a90 10

      /**
       * Mapping from classes to ra_reg ranges.  Each of the per-size
       * classes corresponds to a range of ra_reg nodes.  This array stores
       * those ranges in the form of first ra_reg in each class and the
       * total number of ra_reg elements in the last array element.  This
       * way the range of the i'th class is given by:
       * [ class_to_ra_reg_range[i], class_to_ra_reg_range[i+1] )
       */
      int class_to_ra_reg_range[17];
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@a34 1
#include "intel_chipset.h"
d90 10
@


