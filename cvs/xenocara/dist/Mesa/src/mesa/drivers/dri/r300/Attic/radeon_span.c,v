head	1.4;
access;
symbols
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2010.05.22.20.06.23;	author matthieu;	state dead;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.40;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.18;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.53.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.53.34;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.29.28;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@/**************************************************************************

Copyright (C) The Weather Channel, Inc.  2002.  All Rights Reserved.
Copyright 2000, 2001 ATI Technologies Inc., Ontario, Canada, and
                     VA Linux Systems Inc., Fremont, California.

The Weather Channel (TM) funded Tungsten Graphics to develop the
initial release of the Radeon 8500 driver under the XFree86 license.
This notice must be preserved.

All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

/*
 * Authors:
 *   Kevin E. Martin <martin@@valinux.com>
 *   Gareth Hughes <gareth@@valinux.com>
 *   Keith Whitwell <keith@@tungstengraphics.com>
 *
 */

#include "main/glheader.h"
#include "swrast/swrast.h"

#include "r300_state.h"
#include "radeon_ioctl.h"
#include "r300_ioctl.h"
#include "radeon_span.h"

#include "drirenderbuffer.h"

#define DBG 0

/*
 * Note that all information needed to access pixels in a renderbuffer
 * should be obtained through the gl_renderbuffer parameter, not per-context
 * information.
 */
#define LOCAL_VARS						\
   driRenderbuffer *drb = (driRenderbuffer *) rb;		\
   const __DRIdrawablePrivate *dPriv = drb->dPriv;		\
   const GLuint bottom = dPriv->h - 1;				\
   GLubyte *buf = (GLubyte *) drb->flippedData			\
      + (dPriv->y * drb->flippedPitch + dPriv->x) * drb->cpp;	\
   GLuint p;							\
   (void) p;

#define LOCAL_DEPTH_VARS				\
   driRenderbuffer *drb = (driRenderbuffer *) rb;	\
   const __DRIdrawablePrivate *dPriv = drb->dPriv;	\
   const GLuint bottom = dPriv->h - 1;			\
   GLuint xo = dPriv->x;				\
   GLuint yo = dPriv->y;				\
   GLubyte *buf = (GLubyte *) drb->Base.Data;

#define LOCAL_STENCIL_VARS LOCAL_DEPTH_VARS

#define Y_FLIP(Y) (bottom - (Y))

#define HW_LOCK()

#define HW_UNLOCK()

/* ================================================================
 * Color buffer
 */

/* 16 bit, RGB565 color spanline and pixel functions
 */
#define SPANTMP_PIXEL_FMT GL_RGB
#define SPANTMP_PIXEL_TYPE GL_UNSIGNED_SHORT_5_6_5

#define TAG(x)    radeon##x##_RGB565
#define TAG2(x,y) radeon##x##_RGB565##y
#define GET_PTR(X,Y) (buf + ((Y) * drb->flippedPitch + (X)) * 2)
#include "spantmp2.h"

/* 32 bit, ARGB8888 color spanline and pixel functions
 */
#define SPANTMP_PIXEL_FMT GL_BGRA
#define SPANTMP_PIXEL_TYPE GL_UNSIGNED_INT_8_8_8_8_REV

#define TAG(x)    radeon##x##_ARGB8888
#define TAG2(x,y) radeon##x##_ARGB8888##y
#define GET_PTR(X,Y) (buf + ((Y) * drb->flippedPitch + (X)) * 4)
#include "spantmp2.h"

/* ================================================================
 * Depth buffer
 */

/* The Radeon family has depth tiling on all the time, so we have to convert
 * the x,y coordinates into the memory bus address (mba) in the same
 * manner as the engine.  In each case, the linear block address (ba)
 * is calculated, and then wired with x and y to produce the final
 * memory address.
 * The chip will do address translation on its own if the surface registers
 * are set up correctly. It is not quite enough to get it working with hyperz
 * too...
 */

static GLuint radeon_mba_z32(const driRenderbuffer * drb, GLint x, GLint y)
{
	GLuint pitch = drb->pitch;
	if (drb->depthHasSurface) {
		return 4 * (x + y * pitch);
	} else {
		GLuint ba, address = 0;	/* a[0..1] = 0           */

#ifdef COMPILE_R300
		ba = (y / 8) * (pitch / 8) + (x / 8);
#else
		ba = (y / 16) * (pitch / 16) + (x / 16);
#endif

		address |= (x & 0x7) << 2;	/* a[2..4] = x[0..2]     */
		address |= (y & 0x3) << 5;	/* a[5..6] = y[0..1]     */
		address |= (((x & 0x10) >> 2) ^ (y & 0x4)) << 5;	/* a[7]    = x[4] ^ y[2] */
		address |= (ba & 0x3) << 8;	/* a[8..9] = ba[0..1]    */

		address |= (y & 0x8) << 7;	/* a[10]   = y[3]        */
		address |= (((x & 0x8) << 1) ^ (y & 0x10)) << 7;	/* a[11]   = x[3] ^ y[4] */
		address |= (ba & ~0x3) << 10;	/* a[12..] = ba[2..]     */

		return address;
	}
}

static INLINE GLuint
radeon_mba_z16(const driRenderbuffer * drb, GLint x, GLint y)
{
	GLuint pitch = drb->pitch;
	if (drb->depthHasSurface) {
		return 2 * (x + y * pitch);
	} else {
		GLuint ba, address = 0;	/* a[0]    = 0           */

		ba = (y / 16) * (pitch / 32) + (x / 32);

		address |= (x & 0x7) << 1;	/* a[1..3] = x[0..2]     */
		address |= (y & 0x7) << 4;	/* a[4..6] = y[0..2]     */
		address |= (x & 0x8) << 4;	/* a[7]    = x[3]        */
		address |= (ba & 0x3) << 8;	/* a[8..9] = ba[0..1]    */
		address |= (y & 0x8) << 7;	/* a[10]   = y[3]        */
		address |= ((x & 0x10) ^ (y & 0x10)) << 7;	/* a[11]   = x[4] ^ y[4] */
		address |= (ba & ~0x3) << 10;	/* a[12..] = ba[2..]     */

		return address;
	}
}

/* 16-bit depth buffer functions
 */
#define VALUE_TYPE GLushort

#define WRITE_DEPTH( _x, _y, d )					\
   *(GLushort *)(buf + radeon_mba_z16( drb, _x + xo, _y + yo )) = d;

#define READ_DEPTH( d, _x, _y )						\
   d = *(GLushort *)(buf + radeon_mba_z16( drb, _x + xo, _y + yo ));

#define TAG(x) radeon##x##_z16
#include "depthtmp.h"

/* 24 bit depth, 8 bit stencil depthbuffer functions
 *
 * Careful: It looks like the R300 uses ZZZS byte order while the R200
 * uses SZZZ for 24 bit depth, 8 bit stencil mode.
 */
#define VALUE_TYPE GLuint

#ifdef COMPILE_R300
#define WRITE_DEPTH( _x, _y, d )					\
do {									\
   GLuint offset = radeon_mba_z32( drb, _x + xo, _y + yo );		\
   GLuint tmp = *(GLuint *)(buf + offset);				\
   tmp &= 0x000000ff;							\
   tmp |= ((d << 8) & 0xffffff00);					\
   *(GLuint *)(buf + offset) = tmp;					\
} while (0)
#else
#define WRITE_DEPTH( _x, _y, d )					\
do {									\
   GLuint offset = radeon_mba_z32( drb, _x + xo, _y + yo );		\
   GLuint tmp = *(GLuint *)(buf + offset);				\
   tmp &= 0xff000000;							\
   tmp |= ((d) & 0x00ffffff);						\
   *(GLuint *)(buf + offset) = tmp;					\
} while (0)
#endif

#ifdef COMPILE_R300
#define READ_DEPTH( d, _x, _y )						\
  do { \
    d = (*(GLuint *)(buf + radeon_mba_z32( drb, _x + xo,		\
					 _y + yo )) & 0xffffff00) >> 8; \
  }while(0)
#else
#define READ_DEPTH( d, _x, _y )						\
   d = *(GLuint *)(buf + radeon_mba_z32( drb, _x + xo,			\
					 _y + yo )) & 0x00ffffff;
#endif

#define TAG(x) radeon##x##_z24_s8
#include "depthtmp.h"

/* ================================================================
 * Stencil buffer
 */

/* 24 bit depth, 8 bit stencil depthbuffer functions
 */
#ifdef COMPILE_R300
#define WRITE_STENCIL( _x, _y, d )					\
do {									\
   GLuint offset = radeon_mba_z32( drb, _x + xo, _y + yo );		\
   GLuint tmp = *(GLuint *)(buf + offset);				\
   tmp &= 0xffffff00;							\
   tmp |= (d) & 0xff;							\
   *(GLuint *)(buf + offset) = tmp;					\
} while (0)
#else
#define WRITE_STENCIL( _x, _y, d )					\
do {									\
   GLuint offset = radeon_mba_z32( drb, _x + xo, _y + yo );		\
   GLuint tmp = *(GLuint *)(buf + offset);				\
   tmp &= 0x00ffffff;							\
   tmp |= (((d) & 0xff) << 24);						\
   *(GLuint *)(buf + offset) = tmp;					\
} while (0)
#endif

#ifdef COMPILE_R300
#define READ_STENCIL( d, _x, _y )					\
do {									\
   GLuint offset = radeon_mba_z32( drb, _x + xo, _y + yo );		\
   GLuint tmp = *(GLuint *)(buf + offset);				\
   d = tmp & 0x000000ff;						\
} while (0)
#else
#define READ_STENCIL( d, _x, _y )					\
do {									\
   GLuint offset = radeon_mba_z32( drb, _x + xo, _y + yo );		\
   GLuint tmp = *(GLuint *)(buf + offset);				\
   d = (tmp & 0xff000000) >> 24;					\
} while (0)
#endif

#define TAG(x) radeon##x##_z24_s8
#include "stenciltmp.h"

/* Move locking out to get reasonable span performance (10x better
 * than doing this in HW_LOCK above).  WaitForIdle() is the main
 * culprit.
 */

static void radeonSpanRenderStart(GLcontext * ctx)
{
	radeonContextPtr rmesa = RADEON_CONTEXT(ctx);
#ifdef COMPILE_R300
	r300ContextPtr r300 = (r300ContextPtr) rmesa;
	R300_FIREVERTICES(r300);
#else
	RADEON_FIREVERTICES(rmesa);
#endif
	LOCK_HARDWARE(rmesa);
	radeonWaitForIdleLocked(rmesa);

	/* Read the first pixel in the frame buffer.  This should
	 * be a noop, right?  In fact without this conform fails as reading
	 * from the framebuffer sometimes produces old results -- the
	 * on-card read cache gets mixed up and doesn't notice that the
	 * framebuffer has been updated.
	 *
	 * Note that we should probably be reading some otherwise unused
	 * region of VRAM, otherwise we might get incorrect results when
	 * reading pixels from the top left of the screen.
	 *
	 * I found this problem on an R420 with glean's texCube test.
	 * Note that the R200 span code also *writes* the first pixel in the
	 * framebuffer, but I've found this to be unnecessary.
	 *  -- Nicolai Hähnle, June 2008
	 */
	{
		int p;
		driRenderbuffer *drb =
			(driRenderbuffer *) ctx->WinSysDrawBuffer->_ColorDrawBuffers[0];
		volatile int *buf =
			(volatile int *)(rmesa->dri.screen->pFB + drb->offset);
		p = *buf;
	}
}

static void radeonSpanRenderFinish(GLcontext * ctx)
{
	radeonContextPtr rmesa = RADEON_CONTEXT(ctx);
	_swrast_flush(ctx);
	UNLOCK_HARDWARE(rmesa);
}

void radeonInitSpanFuncs(GLcontext * ctx)
{
	struct swrast_device_driver *swdd =
	    _swrast_GetDeviceDriverReference(ctx);
	swdd->SpanRenderStart = radeonSpanRenderStart;
	swdd->SpanRenderFinish = radeonSpanRenderFinish;
}

/**
 * Plug in the Get/Put routines for the given driRenderbuffer.
 */
void radeonSetSpanFunctions(driRenderbuffer * drb, const GLvisual * vis)
{
	if (drb->Base.InternalFormat == GL_RGBA) {
		if (vis->redBits == 5 && vis->greenBits == 6
		    && vis->blueBits == 5) {
			radeonInitPointers_RGB565(&drb->Base);
		} else {
			radeonInitPointers_ARGB8888(&drb->Base);
		}
	} else if (drb->Base.InternalFormat == GL_DEPTH_COMPONENT16) {
		radeonInitDepthPointers_z16(&drb->Base);
	} else if (drb->Base.InternalFormat == GL_DEPTH_COMPONENT24) {
		radeonInitDepthPointers_z24_s8(&drb->Base);
	} else if (drb->Base.InternalFormat == GL_STENCIL_INDEX8_EXT) {
		radeonInitStencilPointers_z24_s8(&drb->Base);
	}
}
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d43 1
a43 1
#include "glheader.h"
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86: xc/lib/GL/mesa/src/drv/radeon/radeon_span.c,v 1.6 2002/10/30 12:51:56 alanh Exp $ */
d42 1
a42 1
#include <unistd.h>
a43 1
#include "imports.h"
a52 1

a54 1

a84 2


a98 1

a108 1

d123 1
a123 2
static GLuint
radeon_mba_z32( const driRenderbuffer *drb, GLint x, GLint y )
d125 20
a144 19
   GLuint pitch = drb->pitch;
   if (1 /*|| drb->depthHasSurface */) {
      return 4 * (x + y * pitch);
   }
   else {
      GLuint ba, address = 0;			/* a[0..1] = 0           */

      ba = (y / 8) * (pitch / 8) + (x / 8);

      address |= (x & 0x7) << 2;		/* a[2..4] = x[0..2]     */
      address |= (y & 0x3) << 5;		/* a[5..6] = y[0..1]     */
      address |=
         (((x & 0x10) >> 2) ^ (y & 0x4)) << 5;	/* a[7]    = x[4] ^ y[2] */
      address |= (ba & 0x3) << 8;		/* a[8..9] = ba[0..1]    */

      address |= (y & 0x8) << 7;		/* a[10]   = y[3]        */
      address |=
         (((x & 0x8) << 1) ^ (y & 0x10)) << 7;	/* a[11]   = x[3] ^ y[4] */
      address |= (ba & ~0x3) << 10;		/* a[12..] = ba[2..]     */
d146 2
a147 2
      return address;
   }
a149 1

d151 1
a151 1
radeon_mba_z16( const driRenderbuffer *drb, GLint x, GLint y )
d153 15
a167 16
   GLuint pitch = drb->pitch;
   if (1 /*|| drb->depthHasSurface */) {
      return 2 * (x + y * pitch);
   }
   else {
      GLuint ba, address = 0;			/* a[0]    = 0           */

      ba = (y / 16) * (pitch / 32) + (x / 32);

      address |= (x & 0x7) << 1;		/* a[1..3] = x[0..2]     */
      address |= (y & 0x7) << 4;		/* a[4..6] = y[0..2]     */
      address |= (x & 0x8) << 4;		/* a[7]    = x[3]        */
      address |= (ba & 0x3) << 8;		/* a[8..9] = ba[0..1]    */
      address |= (y & 0x8) << 7;		/* a[10]   = y[3]        */
      address |= ((x & 0x10) ^ (y & 0x10)) << 7;/* a[11]   = x[4] ^ y[4] */
      address |= (ba & ~0x3) << 10;		/* a[12..] = ba[2..]     */
d169 2
a170 2
      return address;
   }
a172 1

d175 2
a185 1

d191 3
d202 10
d213 1
d219 5
a227 1

d234 1
d243 10
d254 1
d261 8
a272 2


d278 1
a278 1
static void radeonSpanRenderStart( GLcontext *ctx )
d280 32
a311 22
   radeonContextPtr rmesa = RADEON_CONTEXT( ctx );
   {
	static int first = 1;
	r300ContextPtr r300 = (r300ContextPtr)rmesa;
	
	if (first) {
		r300->span_dlocking = getenv("R300_SPAN_DISABLE_LOCKING") ? 1 : 0;
		if (r300->span_dlocking == 0) {
			fprintf(stderr, "Try R300_SPAN_DISABLE_LOCKING env var if this hangs.\n");
			fflush(stderr);
			sleep(1);
		}
		first = 0;
	}
	
	if (r300->span_dlocking) {
		r300Flush(ctx);
		LOCK_HARDWARE( rmesa );
		radeonWaitForIdleLocked( rmesa );
		UNLOCK_HARDWARE( rmesa );
		
		return;
a312 6
   }
   //   R300_FIREVERTICES( rmesa );
   // old code has flush
   r300Flush(ctx);
   LOCK_HARDWARE( rmesa );
   radeonWaitForIdleLocked( rmesa );
d315 1
a315 1
static void radeonSpanRenderFinish( GLcontext *ctx )
d317 3
a319 5
   radeonContextPtr rmesa = RADEON_CONTEXT( ctx );
   r300ContextPtr r300 = (r300ContextPtr)rmesa;
   _swrast_flush( ctx );
   if (r300->span_dlocking == 0)
	UNLOCK_HARDWARE( rmesa );
d322 1
a322 1
void radeonInitSpanFuncs( GLcontext *ctx )
d324 4
a327 3
   struct swrast_device_driver *swdd = _swrast_GetDeviceDriverReference(ctx);
   swdd->SpanRenderStart          = radeonSpanRenderStart;
   swdd->SpanRenderFinish         = radeonSpanRenderFinish; 
a329 1

d333 1
a333 2
void
radeonSetSpanFunctions(driRenderbuffer *drb, const GLvisual *vis)
d335 14
a348 17
   if (drb->Base.InternalFormat == GL_RGBA) {
      if (vis->redBits == 5 && vis->greenBits == 6 && vis->blueBits == 5) {
         radeonInitPointers_RGB565(&drb->Base);
      }
      else {
         radeonInitPointers_ARGB8888(&drb->Base);
      }
   }
   else if (drb->Base.InternalFormat == GL_DEPTH_COMPONENT16) {
      radeonInitDepthPointers_z16(&drb->Base);
   }
   else if (drb->Base.InternalFormat == GL_DEPTH_COMPONENT24) {
      radeonInitDepthPointers_z24_s8(&drb->Base);
   }
   else if (drb->Base.InternalFormat == GL_STENCIL_INDEX8_EXT) {
      radeonInitStencilPointers_z24_s8(&drb->Base);
   }
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Mesa 7.0.1
@
text
@d1 1
d43 1
a43 1

d45 1
d55 1
d58 1
d89 2
d105 1
d116 1
d131 2
a132 1
static GLuint radeon_mba_z32(const driRenderbuffer * drb, GLint x, GLint y)
d134 19
a152 20
	GLuint pitch = drb->pitch;
	if (drb->depthHasSurface) {
		return 4 * (x + y * pitch);
	} else {
		GLuint ba, address = 0;	/* a[0..1] = 0           */

#ifdef COMPILE_R300
		ba = (y / 8) * (pitch / 8) + (x / 8);
#else
		ba = (y / 16) * (pitch / 16) + (x / 16);
#endif

		address |= (x & 0x7) << 2;	/* a[2..4] = x[0..2]     */
		address |= (y & 0x3) << 5;	/* a[5..6] = y[0..1]     */
		address |= (((x & 0x10) >> 2) ^ (y & 0x4)) << 5;	/* a[7]    = x[4] ^ y[2] */
		address |= (ba & 0x3) << 8;	/* a[8..9] = ba[0..1]    */

		address |= (y & 0x8) << 7;	/* a[10]   = y[3]        */
		address |= (((x & 0x8) << 1) ^ (y & 0x10)) << 7;	/* a[11]   = x[3] ^ y[4] */
		address |= (ba & ~0x3) << 10;	/* a[12..] = ba[2..]     */
d154 2
a155 2
		return address;
	}
d158 1
d160 1
a160 1
radeon_mba_z16(const driRenderbuffer * drb, GLint x, GLint y)
d162 16
a177 15
	GLuint pitch = drb->pitch;
	if (drb->depthHasSurface) {
		return 2 * (x + y * pitch);
	} else {
		GLuint ba, address = 0;	/* a[0]    = 0           */

		ba = (y / 16) * (pitch / 32) + (x / 32);

		address |= (x & 0x7) << 1;	/* a[1..3] = x[0..2]     */
		address |= (y & 0x7) << 4;	/* a[4..6] = y[0..2]     */
		address |= (x & 0x8) << 4;	/* a[7]    = x[3]        */
		address |= (ba & 0x3) << 8;	/* a[8..9] = ba[0..1]    */
		address |= (y & 0x8) << 7;	/* a[10]   = y[3]        */
		address |= ((x & 0x10) ^ (y & 0x10)) << 7;	/* a[11]   = x[4] ^ y[4] */
		address |= (ba & ~0x3) << 10;	/* a[12..] = ba[2..]     */
d179 2
a180 2
		return address;
	}
d183 1
d195 1
a200 1
#ifdef COMPILE_R300
a208 10
#else
#define WRITE_DEPTH( _x, _y, d )					\
do {									\
   GLuint offset = radeon_mba_z32( drb, _x + xo, _y + yo );		\
   GLuint tmp = *(GLuint *)(buf + offset);				\
   tmp &= 0xff000000;							\
   tmp |= ((d) & 0x00ffffff);						\
   *(GLuint *)(buf + offset) = tmp;					\
} while (0)
#endif
a209 1
#ifdef COMPILE_R300
a214 5
#else
#define READ_DEPTH( d, _x, _y )						\
   d = *(GLuint *)(buf + radeon_mba_z32( drb, _x + xo,			\
					 _y + yo )) & 0x00ffffff;
#endif
d219 1
a225 1
#ifdef COMPILE_R300
a233 10
#else
#define WRITE_STENCIL( _x, _y, d )					\
do {									\
   GLuint offset = radeon_mba_z32( drb, _x + xo, _y + yo );		\
   GLuint tmp = *(GLuint *)(buf + offset);				\
   tmp &= 0x00ffffff;							\
   tmp |= (((d) & 0xff) << 24);						\
   *(GLuint *)(buf + offset) = tmp;					\
} while (0)
#endif
a234 1
#ifdef COMPILE_R300
a240 8
#else
#define READ_STENCIL( d, _x, _y )					\
do {									\
   GLuint offset = radeon_mba_z32( drb, _x + xo, _y + yo );		\
   GLuint tmp = *(GLuint *)(buf + offset);				\
   d = (tmp & 0xff000000) >> 24;					\
} while (0)
#endif
d245 2
d252 1
a252 1
static void radeonSpanRenderStart(GLcontext * ctx)
d254 29
a282 9
	radeonContextPtr rmesa = RADEON_CONTEXT(ctx);
#ifdef COMPILE_R300
	r300ContextPtr r300 = (r300ContextPtr) rmesa;
	R300_FIREVERTICES(r300);
#else
	RADEON_FIREVERTICES(rmesa);
#endif
	LOCK_HARDWARE(rmesa);
	radeonWaitForIdleLocked(rmesa);
d285 1
a285 1
static void radeonSpanRenderFinish(GLcontext * ctx)
d287 5
a291 3
	radeonContextPtr rmesa = RADEON_CONTEXT(ctx);
	_swrast_flush(ctx);
	UNLOCK_HARDWARE(rmesa);
d294 1
a294 1
void radeonInitSpanFuncs(GLcontext * ctx)
d296 3
a298 4
	struct swrast_device_driver *swdd =
	    _swrast_GetDeviceDriverReference(ctx);
	swdd->SpanRenderStart = radeonSpanRenderStart;
	swdd->SpanRenderFinish = radeonSpanRenderFinish;
d301 1
d305 2
a306 1
void radeonSetSpanFunctions(driRenderbuffer * drb, const GLvisual * vis)
d308 17
a324 14
	if (drb->Base.InternalFormat == GL_RGBA) {
		if (vis->redBits == 5 && vis->greenBits == 6
		    && vis->blueBits == 5) {
			radeonInitPointers_RGB565(&drb->Base);
		} else {
			radeonInitPointers_ARGB8888(&drb->Base);
		}
	} else if (drb->Base.InternalFormat == GL_DEPTH_COMPONENT16) {
		radeonInitDepthPointers_z16(&drb->Base);
	} else if (drb->Base.InternalFormat == GL_DEPTH_COMPONENT24) {
		radeonInitDepthPointers_z24_s8(&drb->Base);
	} else if (drb->Base.InternalFormat == GL_STENCIL_INDEX8_EXT) {
		radeonInitStencilPointers_z24_s8(&drb->Base);
	}
@

