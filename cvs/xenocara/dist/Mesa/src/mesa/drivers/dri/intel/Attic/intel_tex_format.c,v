head	1.7;
access;
symbols
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2013.09.05.14.04.36;	author jsg;	state dead;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.22.20.04.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.14.58.16;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.38;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Merge Mesa 9.2.0
@
text
@#include "intel_context.h"
#include "intel_tex.h"
#include "main/enums.h"
#include "main/formats.h"

/**
 * Returns the renderbuffer DataType for a MESA_FORMAT.
 */
GLenum
intel_mesa_format_to_rb_datatype(gl_format format)
{
   switch (format) {
   case MESA_FORMAT_ARGB8888:
   case MESA_FORMAT_XRGB8888:
   case MESA_FORMAT_SARGB8:
   case MESA_FORMAT_R8:
   case MESA_FORMAT_RG88:
   case MESA_FORMAT_A8:
   case MESA_FORMAT_I8:
   case MESA_FORMAT_L8:
   case MESA_FORMAT_AL88:
   case MESA_FORMAT_RGB565:
   case MESA_FORMAT_ARGB1555:
   case MESA_FORMAT_ARGB4444:
   case MESA_FORMAT_S8:
      return GL_UNSIGNED_BYTE;
   case MESA_FORMAT_R16:
   case MESA_FORMAT_RG1616:
   case MESA_FORMAT_Z16:
      return GL_UNSIGNED_SHORT;
   case MESA_FORMAT_X8_Z24:
      return GL_UNSIGNED_INT;
   case MESA_FORMAT_S8_Z24:
      return GL_UNSIGNED_INT_24_8_EXT;
   case MESA_FORMAT_RGBA_FLOAT32:
   case MESA_FORMAT_RG_FLOAT32:
   case MESA_FORMAT_R_FLOAT32:
   case MESA_FORMAT_INTENSITY_FLOAT32:
   case MESA_FORMAT_LUMINANCE_FLOAT32:
   case MESA_FORMAT_ALPHA_FLOAT32:
   case MESA_FORMAT_LUMINANCE_ALPHA_FLOAT32:
      return GL_FLOAT;

   default:
      _mesa_problem(NULL, "unexpected MESA_FORMAT for renderbuffer");
      return GL_UNSIGNED_BYTE;
   }
}

int intel_compressed_num_bytes(GLuint mesaFormat)
{
   GLuint bw, bh;
   GLuint block_size;

   block_size = _mesa_get_format_bytes(mesaFormat);
   _mesa_get_format_block_size(mesaFormat, &bw, &bh);

   return block_size / bw;
}
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.5
log
@Merge Mesa 7.10.3
@
text
@d19 2
d25 1
d35 9
a47 224
}


/**
 * Choose hardware texture format given the user's glTexImage parameters.
 *
 * It works out that this function is fine for all the supported
 * hardware.  However, there is still a need to map the formats onto
 * hardware descriptors.
 *
 * Note that the i915 can actually support many more formats than
 * these if we take the step of simply swizzling the colors
 * immediately after sampling...
 */
gl_format
intelChooseTextureFormat(struct gl_context * ctx, GLint internalFormat,
                         GLenum format, GLenum type)
{
   struct intel_context *intel = intel_context(ctx);

#if 0
   printf("%s intFmt=0x%x format=0x%x type=0x%x\n",
          __FUNCTION__, internalFormat, format, type);
#endif

   switch (internalFormat) {
   case 4:
   case GL_RGBA:
   case GL_COMPRESSED_RGBA:
      if (type == GL_UNSIGNED_SHORT_4_4_4_4_REV)
	 return MESA_FORMAT_ARGB4444;
      else if (type == GL_UNSIGNED_SHORT_1_5_5_5_REV)
	 return MESA_FORMAT_ARGB1555;
      else
	 return MESA_FORMAT_ARGB8888;

   case 3:
   case GL_RGB:
   case GL_COMPRESSED_RGB:
      if (type == GL_UNSIGNED_SHORT_5_6_5)
	 return MESA_FORMAT_RGB565;
      else if (intel->has_xrgb_textures)
	 return MESA_FORMAT_XRGB8888;
      else
	 return MESA_FORMAT_ARGB8888;

   case GL_RGBA8:
   case GL_RGB10_A2:
   case GL_RGBA12:
   case GL_RGBA16:
      return MESA_FORMAT_ARGB8888;

   case GL_RGBA4:
   case GL_RGBA2:
      return MESA_FORMAT_ARGB4444;

   case GL_RGB5_A1:
      return MESA_FORMAT_ARGB1555;

   case GL_RGB8:
   case GL_RGB10:
   case GL_RGB12:
   case GL_RGB16:
      if (intel->has_xrgb_textures)
	 return MESA_FORMAT_XRGB8888;
      else
	 return MESA_FORMAT_ARGB8888;

   case GL_RGB5:
   case GL_RGB4:
   case GL_R3_G3_B2:
      return MESA_FORMAT_RGB565;

   case GL_ALPHA:
   case GL_ALPHA4:
   case GL_ALPHA8:
   case GL_ALPHA12:
   case GL_ALPHA16:
   case GL_COMPRESSED_ALPHA:
      return MESA_FORMAT_A8;

   case 1:
   case GL_LUMINANCE:
   case GL_LUMINANCE4:
   case GL_LUMINANCE8:
   case GL_LUMINANCE12:
   case GL_LUMINANCE16:
   case GL_COMPRESSED_LUMINANCE:
      return MESA_FORMAT_L8;

   case GL_LUMINANCE12_ALPHA4:
   case GL_LUMINANCE12_ALPHA12:
   case GL_LUMINANCE16_ALPHA16:
      /* i915 could implement this mode using MT_32BIT_RG1616.  However, this
       * would require an extra swizzle instruction in the fragment shader to
       * convert the { R, G, 1.0, 1.0 } to { R, R, R, G }.
       */
#ifndef I915
      return MESA_FORMAT_AL1616;
#else
      /* FALLTHROUGH */
#endif

   case 2:
   case GL_LUMINANCE_ALPHA:
   case GL_LUMINANCE4_ALPHA4:
   case GL_LUMINANCE6_ALPHA2:
   case GL_LUMINANCE8_ALPHA8:
   case GL_COMPRESSED_LUMINANCE_ALPHA:
      return MESA_FORMAT_AL88;

   case GL_INTENSITY:
   case GL_INTENSITY4:
   case GL_INTENSITY8:
   case GL_INTENSITY12:
   case GL_INTENSITY16:
   case GL_COMPRESSED_INTENSITY:
      return MESA_FORMAT_I8;

   case GL_YCBCR_MESA:
      if (type == GL_UNSIGNED_SHORT_8_8_MESA || type == GL_UNSIGNED_BYTE)
         return MESA_FORMAT_YCBCR;
      else
         return MESA_FORMAT_YCBCR_REV;

   case GL_COMPRESSED_RGB_FXT1_3DFX:
      return MESA_FORMAT_RGB_FXT1;
   case GL_COMPRESSED_RGBA_FXT1_3DFX:
      return MESA_FORMAT_RGBA_FXT1;

   case GL_RGB_S3TC:
   case GL_RGB4_S3TC:
   case GL_COMPRESSED_RGB_S3TC_DXT1_EXT:
      return MESA_FORMAT_RGB_DXT1;

   case GL_COMPRESSED_RGBA_S3TC_DXT1_EXT:
      return MESA_FORMAT_RGBA_DXT1;

   case GL_RGBA_S3TC:
   case GL_RGBA4_S3TC:
   case GL_COMPRESSED_RGBA_S3TC_DXT3_EXT:
      return MESA_FORMAT_RGBA_DXT3;

   case GL_COMPRESSED_RGBA_S3TC_DXT5_EXT:
      return MESA_FORMAT_RGBA_DXT5;

   case GL_DEPTH_COMPONENT:
   case GL_DEPTH_COMPONENT16:
   case GL_DEPTH_COMPONENT24:
   case GL_DEPTH_COMPONENT32:
#if 0
      return MESA_FORMAT_Z16;
#else
      /* fall-through.
       * 16bpp depth texture can't be paired with a stencil buffer so
       * always used combined depth/stencil format.
       */
#endif
   case GL_DEPTH_STENCIL_EXT:
   case GL_DEPTH24_STENCIL8_EXT:
      return MESA_FORMAT_S8_Z24;

#ifndef I915
   case GL_SRGB_EXT:
   case GL_SRGB8_EXT:
   case GL_SRGB_ALPHA_EXT:
   case GL_SRGB8_ALPHA8_EXT:
   case GL_COMPRESSED_SRGB_EXT:
   case GL_COMPRESSED_SRGB_ALPHA_EXT:
   case GL_COMPRESSED_SLUMINANCE_EXT:
   case GL_COMPRESSED_SLUMINANCE_ALPHA_EXT:
      return MESA_FORMAT_SARGB8;
   case GL_SLUMINANCE_EXT:
   case GL_SLUMINANCE8_EXT:
      if (intel->has_luminance_srgb)
         return MESA_FORMAT_SL8;
      else
         return MESA_FORMAT_SARGB8;
   case GL_SLUMINANCE_ALPHA_EXT:
   case GL_SLUMINANCE8_ALPHA8_EXT:
      if (intel->has_luminance_srgb)
         return MESA_FORMAT_SLA8;
      else
         return MESA_FORMAT_SARGB8;
   case GL_COMPRESSED_SRGB_S3TC_DXT1_EXT:
   case GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT:
   case GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT:
   case GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT:
      return MESA_FORMAT_SRGB_DXT1;

   /* i915 could also do this */
   case GL_DUDV_ATI:
   case GL_DU8DV8_ATI:
      return MESA_FORMAT_DUDV8;
   case GL_RGBA_SNORM:
   case GL_RGBA8_SNORM:
      return MESA_FORMAT_SIGNED_RGBA8888_REV;

   /* i915 can do a RG16, but it can't do any of the other RED or RG formats.
    * In addition, it only implements the broken D3D mode where undefined
    * components are read as 1.0.  I'm not sure who thought reading
    * { R, G, 1.0, 1.0 } from a red-green texture would be useful.
    */
   case GL_RED:
   case GL_COMPRESSED_RED:
   case GL_R8:
      return MESA_FORMAT_R8;
   case GL_R16:
      return MESA_FORMAT_R16;
   case GL_RG:
   case GL_COMPRESSED_RG:
   case GL_RG8:
      return MESA_FORMAT_RG88;
   case GL_RG16:
      return MESA_FORMAT_RG1616;
#endif

   default:
      fprintf(stderr, "unexpected texture format %s in %s\n",
              _mesa_lookup_enum_by_nr(internalFormat), __FUNCTION__);
      return MESA_FORMAT_NONE;
   }

   return MESA_FORMAT_NONE;       /* never get here */
@


1.4
log
@Update to Mesa 7.8.2. Tested by johan@@. Thanks.
@
text
@d4 33
d51 1
a51 1
intelChooseTextureFormat(GLcontext * ctx, GLint internalFormat,
a54 1
   const GLboolean do32bpt = (intel->ctx.Visual.rgbBits >= 24);
d65 6
a70 12
      if (format == GL_BGRA) {
         if (type == GL_UNSIGNED_BYTE || type == GL_UNSIGNED_INT_8_8_8_8_REV) {
            return MESA_FORMAT_ARGB8888;
         }
         else if (type == GL_UNSIGNED_SHORT_4_4_4_4_REV) {
            return MESA_FORMAT_ARGB4444;
         }
         else if (type == GL_UNSIGNED_SHORT_1_5_5_5_REV) {
            return MESA_FORMAT_ARGB1555;
         }
      }
      return do32bpt ? MESA_FORMAT_ARGB8888 : MESA_FORMAT_ARGB4444;
d75 1
a75 9
      if (format == GL_RGB && type == GL_UNSIGNED_SHORT_5_6_5) {
         return MESA_FORMAT_RGB565;
      }
      if (do32bpt) {
	 if (intel->has_xrgb_textures)
	    return MESA_FORMAT_XRGB8888;
	 else
	    return MESA_FORMAT_ARGB8888;
      } else {
d77 4
a80 1
      }
d86 1
a86 1
      return do32bpt ? MESA_FORMAT_ARGB8888 : MESA_FORMAT_ARGB4444;
d129 4
d233 18
d264 7
a270 18
   int bytes = 0;
   switch(mesaFormat) {
     
   case MESA_FORMAT_RGB_FXT1:
   case MESA_FORMAT_RGBA_FXT1:
   case MESA_FORMAT_RGB_DXT1:
   case MESA_FORMAT_RGBA_DXT1:
     bytes = 2;
     break;
     
   case MESA_FORMAT_RGBA_DXT3:
   case MESA_FORMAT_RGBA_DXT5:
     bytes = 4;
   default:
     break;
   }
   
   return bytes;
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d52 8
a59 1
      return do32bpt ? MESA_FORMAT_XRGB8888 : MESA_FORMAT_RGB565;
d78 4
a81 1
      return MESA_FORMAT_XRGB8888;
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a2 1
#include "main/texformat.h"
d5 5
a9 1
/* It works out that this function is fine for all the supported
d12 2
a13 2
 */
/* Note that the i915 can actually support many more formats than
d17 1
a17 1
const struct gl_texture_format *
d22 6
a27 1
   const GLboolean do32bpt = (intel->ctx.Visual.rgbBits == 32);
d35 1
a35 1
            return &_mesa_texformat_argb8888;
d38 1
a38 1
            return &_mesa_texformat_argb4444;
d41 1
a41 1
            return &_mesa_texformat_argb1555;
d44 1
a44 1
      return do32bpt ? &_mesa_texformat_argb8888 : &_mesa_texformat_argb4444;
d50 1
a50 1
         return &_mesa_texformat_rgb565;
d52 1
a52 1
      return do32bpt ? &_mesa_texformat_argb8888 : &_mesa_texformat_rgb565;
d58 1
a58 1
      return do32bpt ? &_mesa_texformat_argb8888 : &_mesa_texformat_argb4444;
d62 1
a62 1
      return &_mesa_texformat_argb4444;
d65 1
a65 1
      return &_mesa_texformat_argb1555;
d71 1
a71 1
      return &_mesa_texformat_argb8888;
d76 1
a76 1
      return &_mesa_texformat_rgb565;
d84 1
a84 1
      return &_mesa_texformat_a8;
d93 10
a102 1
      return &_mesa_texformat_l8;
a108 3
   case GL_LUMINANCE12_ALPHA4:
   case GL_LUMINANCE12_ALPHA12:
   case GL_LUMINANCE16_ALPHA16:
d110 1
a110 1
      return &_mesa_texformat_al88;
d118 1
a118 1
      return &_mesa_texformat_i8;
d122 1
a122 1
         return &_mesa_texformat_ycbcr;
d124 1
a124 1
         return &_mesa_texformat_ycbcr_rev;
d127 1
a127 1
      return &_mesa_texformat_rgb_fxt1;
d129 1
a129 1
      return &_mesa_texformat_rgba_fxt1;
d134 1
a134 1
      return &_mesa_texformat_rgb_dxt1;
d137 1
a137 1
      return &_mesa_texformat_rgba_dxt1;
d142 1
a142 1
      return &_mesa_texformat_rgba_dxt3;
d145 1
a145 1
      return &_mesa_texformat_rgba_dxt5;
d152 1
a152 1
      return &_mesa_texformat_z16;
d161 1
a161 1
      return &_mesa_texformat_s8_z24;
d168 5
d175 4
d181 4
a184 5
   case GL_COMPRESSED_SRGB_EXT:
   case GL_COMPRESSED_SRGB_ALPHA_EXT:
   case GL_COMPRESSED_SLUMINANCE_EXT:
   case GL_COMPRESSED_SLUMINANCE_ALPHA_EXT:
       return &_mesa_texformat_srgba8;
d189 9
a197 1
      return &_mesa_texformat_srgb_dxt1;
d203 1
a203 1
      return NULL;
d206 1
a206 1
   return NULL;                 /* never get here */
@


1.1
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d3 2
a4 2
#include "texformat.h"
#include "enums.h"
d137 1
d139 6
a144 1

d167 1
a167 1
     return &_mesa_texformat_srgb_dxt1;
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d3 2
a4 2
#include "main/enums.h"
#include "main/formats.h"
d6 1
a6 37
/**
 * Returns the renderbuffer DataType for a MESA_FORMAT.
 */
GLenum
intel_mesa_format_to_rb_datatype(gl_format format)
{
   switch (format) {
   case MESA_FORMAT_ARGB8888:
   case MESA_FORMAT_XRGB8888:
   case MESA_FORMAT_SARGB8:
   case MESA_FORMAT_R8:
   case MESA_FORMAT_RG88:
   case MESA_FORMAT_A8:
   case MESA_FORMAT_AL88:
   case MESA_FORMAT_RGB565:
   case MESA_FORMAT_ARGB1555:
   case MESA_FORMAT_ARGB4444:
      return GL_UNSIGNED_BYTE;
   case MESA_FORMAT_R16:
   case MESA_FORMAT_RG1616:
   case MESA_FORMAT_Z16:
      return GL_UNSIGNED_SHORT;
   case MESA_FORMAT_X8_Z24:
      return GL_UNSIGNED_INT;
   case MESA_FORMAT_S8_Z24:
      return GL_UNSIGNED_INT_24_8_EXT;
   default:
      _mesa_problem(NULL, "unexpected MESA_FORMAT for renderbuffer");
      return GL_UNSIGNED_BYTE;
   }
}


/**
 * Choose hardware texture format given the user's glTexImage parameters.
 *
 * It works out that this function is fine for all the supported
d9 2
a10 2
 *
 * Note that the i915 can actually support many more formats than
d14 2
a15 2
gl_format
intelChooseTextureFormat(struct gl_context * ctx, GLint internalFormat,
d19 1
a19 5

#if 0
   printf("%s intFmt=0x%x format=0x%x type=0x%x\n",
          __FUNCTION__, internalFormat, format, type);
#endif
d25 12
a36 6
      if (type == GL_UNSIGNED_SHORT_4_4_4_4_REV)
	 return MESA_FORMAT_ARGB4444;
      else if (type == GL_UNSIGNED_SHORT_1_5_5_5_REV)
	 return MESA_FORMAT_ARGB1555;
      else
	 return MESA_FORMAT_ARGB8888;
d41 4
a44 6
      if (type == GL_UNSIGNED_SHORT_5_6_5)
	 return MESA_FORMAT_RGB565;
      else if (intel->has_xrgb_textures)
	 return MESA_FORMAT_XRGB8888;
      else
	 return MESA_FORMAT_ARGB8888;
d50 1
a50 1
      return MESA_FORMAT_ARGB8888;
d54 1
a54 1
      return MESA_FORMAT_ARGB4444;
d57 1
a57 1
      return MESA_FORMAT_ARGB1555;
d63 1
a63 4
      if (intel->has_xrgb_textures)
	 return MESA_FORMAT_XRGB8888;
      else
	 return MESA_FORMAT_ARGB8888;
d68 1
a68 1
      return MESA_FORMAT_RGB565;
d76 1
a76 1
      return MESA_FORMAT_A8;
d85 1
a85 14
      return MESA_FORMAT_L8;

   case GL_LUMINANCE12_ALPHA4:
   case GL_LUMINANCE12_ALPHA12:
   case GL_LUMINANCE16_ALPHA16:
      /* i915 could implement this mode using MT_32BIT_RG1616.  However, this
       * would require an extra swizzle instruction in the fragment shader to
       * convert the { R, G, 1.0, 1.0 } to { R, R, R, G }.
       */
#ifndef I915
      return MESA_FORMAT_AL1616;
#else
      /* FALLTHROUGH */
#endif
d92 3
d96 1
a96 1
      return MESA_FORMAT_AL88;
d104 1
a104 1
      return MESA_FORMAT_I8;
d108 1
a108 1
         return MESA_FORMAT_YCBCR;
d110 1
a110 1
         return MESA_FORMAT_YCBCR_REV;
d113 1
a113 1
      return MESA_FORMAT_RGB_FXT1;
d115 1
a115 1
      return MESA_FORMAT_RGBA_FXT1;
d120 1
a120 1
      return MESA_FORMAT_RGB_DXT1;
d123 1
a123 1
      return MESA_FORMAT_RGBA_DXT1;
d128 1
a128 1
      return MESA_FORMAT_RGBA_DXT3;
d131 1
a131 1
      return MESA_FORMAT_RGBA_DXT5;
d137 2
a138 8
#if 0
      return MESA_FORMAT_Z16;
#else
      /* fall-through.
       * 16bpp depth texture can't be paired with a stencil buffer so
       * always used combined depth/stencil format.
       */
#endif
d141 1
a141 1
      return MESA_FORMAT_S8_Z24;
d148 4
d156 1
a156 13
      return MESA_FORMAT_SARGB8;
   case GL_SLUMINANCE_EXT:
   case GL_SLUMINANCE8_EXT:
      if (intel->has_luminance_srgb)
         return MESA_FORMAT_SL8;
      else
         return MESA_FORMAT_SARGB8;
   case GL_SLUMINANCE_ALPHA_EXT:
   case GL_SLUMINANCE8_ALPHA8_EXT:
      if (intel->has_luminance_srgb)
         return MESA_FORMAT_SLA8;
      else
         return MESA_FORMAT_SARGB8;
d161 1
a161 27
      return MESA_FORMAT_SRGB_DXT1;

   /* i915 could also do this */
   case GL_DUDV_ATI:
   case GL_DU8DV8_ATI:
      return MESA_FORMAT_DUDV8;
   case GL_RGBA_SNORM:
   case GL_RGBA8_SNORM:
      return MESA_FORMAT_SIGNED_RGBA8888_REV;

   /* i915 can do a RG16, but it can't do any of the other RED or RG formats.
    * In addition, it only implements the broken D3D mode where undefined
    * components are read as 1.0.  I'm not sure who thought reading
    * { R, G, 1.0, 1.0 } from a red-green texture would be useful.
    */
   case GL_RED:
   case GL_COMPRESSED_RED:
   case GL_R8:
      return MESA_FORMAT_R8;
   case GL_R16:
      return MESA_FORMAT_R16;
   case GL_RG:
   case GL_COMPRESSED_RG:
   case GL_RG8:
      return MESA_FORMAT_RG88;
   case GL_RG16:
      return MESA_FORMAT_RG1616;
d167 1
a167 1
      return MESA_FORMAT_NONE;
d170 1
a170 1
   return MESA_FORMAT_NONE;       /* never get here */
d175 18
a192 7
   GLuint bw, bh;
   GLuint block_size;

   block_size = _mesa_get_format_bytes(mesaFormat);
   _mesa_get_format_block_size(mesaFormat, &bw, &bh);

   return block_size / bw;
@


