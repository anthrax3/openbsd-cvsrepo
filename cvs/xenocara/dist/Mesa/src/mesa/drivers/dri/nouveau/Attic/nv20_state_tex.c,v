head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.04.52;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.22;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.40;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.57;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.55;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "nouveau_driver.h"
#include "nouveau_context.h"
#include "nouveau_gldefs.h"
#include "nouveau_texture.h"
#include "nv20_3d.xml.h"
#include "nouveau_util.h"
#include "nv20_driver.h"
#include "main/samplerobj.h"

void
nv20_emit_tex_gen(struct gl_context *ctx, int emit)
{
	const int i = emit - NOUVEAU_STATE_TEX_GEN0;
	struct nouveau_context *nctx = to_nouveau_context(ctx);
	struct nouveau_pushbuf *push = context_push(ctx);
	struct gl_texture_unit *unit = &ctx->Texture.Unit[i];
	int j;

	for (j = 0; j < 4; j++) {
		if (nctx->fallback == HWTNL && (unit->TexGenEnabled & 1 << j)) {
			struct gl_texgen *coord = get_texgen_coord(unit, j);
			float *k = get_texgen_coeff(coord);

			if (k) {
				BEGIN_NV04(push, NV20_3D(TEX_GEN_COEFF(i, j)), 4);
				PUSH_DATAp(push, k, 4);
			}

			BEGIN_NV04(push, NV20_3D(TEX_GEN_MODE(i, j)), 1);
			PUSH_DATA (push, nvgl_texgen_mode(coord->Mode));

		} else {
			BEGIN_NV04(push, NV20_3D(TEX_GEN_MODE(i, j)), 1);
			PUSH_DATA (push, 0);
		}
	}
}

void
nv20_emit_tex_mat(struct gl_context *ctx, int emit)
{
	const int i = emit - NOUVEAU_STATE_TEX_MAT0;
	struct nouveau_context *nctx = to_nouveau_context(ctx);
	struct nouveau_pushbuf *push = context_push(ctx);

	if (nctx->fallback == HWTNL &&
	    (ctx->Texture._TexMatEnabled & 1 << i)) {
		BEGIN_NV04(push, NV20_3D(TEX_MATRIX_ENABLE(i)), 1);
		PUSH_DATA (push, 1);

		BEGIN_NV04(push, NV20_3D(TEX_MATRIX(i,0)), 16);
		PUSH_DATAm(push, ctx->TextureMatrixStack[i].Top->m);

	} else {
		BEGIN_NV04(push, NV20_3D(TEX_MATRIX_ENABLE(i)), 1);
		PUSH_DATA (push, 0);
	}
}

static uint32_t
get_tex_format_pot(struct gl_texture_image *ti)
{
	switch (ti->TexFormat) {
	case MESA_FORMAT_B8G8R8A8_UNORM:
		return NV20_3D_TEX_FORMAT_FORMAT_A8R8G8B8;

	case MESA_FORMAT_B5G5R5A1_UNORM:
		return NV20_3D_TEX_FORMAT_FORMAT_A1R5G5B5;

	case MESA_FORMAT_B4G4R4A4_UNORM:
		return NV20_3D_TEX_FORMAT_FORMAT_A4R4G4B4;

	case MESA_FORMAT_B8G8R8X8_UNORM:
		return NV20_3D_TEX_FORMAT_FORMAT_X8R8G8B8;

	case MESA_FORMAT_B5G6R5_UNORM:
		return NV20_3D_TEX_FORMAT_FORMAT_R5G6B5;

	case MESA_FORMAT_A_UNORM8:
	case MESA_FORMAT_I_UNORM8:
		return NV20_3D_TEX_FORMAT_FORMAT_I8;

	case MESA_FORMAT_L_UNORM8:
		return NV20_3D_TEX_FORMAT_FORMAT_L8;

	case MESA_FORMAT_RGB_DXT1:
	case MESA_FORMAT_RGBA_DXT1:
		return NV20_3D_TEX_FORMAT_FORMAT_DXT1;

	case MESA_FORMAT_RGBA_DXT3:
		return NV20_3D_TEX_FORMAT_FORMAT_DXT3;

	case MESA_FORMAT_RGBA_DXT5:
		return NV20_3D_TEX_FORMAT_FORMAT_DXT5;

	default:
		assert(0);
	}
}

static uint32_t
get_tex_format_rect(struct gl_texture_image *ti)
{
	switch (ti->TexFormat) {
	case MESA_FORMAT_B8G8R8A8_UNORM:
		return NV20_3D_TEX_FORMAT_FORMAT_A8R8G8B8_RECT;

	case MESA_FORMAT_B5G5R5A1_UNORM:
		return NV20_3D_TEX_FORMAT_FORMAT_A1R5G5B5_RECT;

	case MESA_FORMAT_B4G4R4A4_UNORM:
		return NV20_3D_TEX_FORMAT_FORMAT_A4R4G4B4_RECT;

	case MESA_FORMAT_B8G8R8X8_UNORM:
		return NV20_3D_TEX_FORMAT_FORMAT_R8G8B8_RECT;

	case MESA_FORMAT_B5G6R5_UNORM:
		return NV20_3D_TEX_FORMAT_FORMAT_R5G6B5_RECT;

	case MESA_FORMAT_L_UNORM8:
		return NV20_3D_TEX_FORMAT_FORMAT_L8_RECT;

	case MESA_FORMAT_A_UNORM8:
	case MESA_FORMAT_I_UNORM8:
		return NV20_3D_TEX_FORMAT_FORMAT_I8_RECT;

	default:
		assert(0);
	}
}

void
nv20_emit_tex_obj(struct gl_context *ctx, int emit)
{
	const int i = emit - NOUVEAU_STATE_TEX_OBJ0;
	struct nouveau_pushbuf *push = context_push(ctx);
	const int bo_flags = NOUVEAU_BO_RD | NOUVEAU_BO_GART | NOUVEAU_BO_VRAM;
	struct gl_texture_object *t;
	struct nouveau_surface *s;
	struct gl_texture_image *ti;
	const struct gl_sampler_object *sa;
	uint32_t tx_format, tx_filter, tx_wrap, tx_enable;

	PUSH_RESET(push, BUFCTX_TEX(i));

	if (!ctx->Texture.Unit[i]._Current) {
		BEGIN_NV04(push, NV20_3D(TEX_ENABLE(i)), 1);
		PUSH_DATA (push, 0);

		context_dirty(ctx, TEX_SHADER);
		return;
	}

	t = ctx->Texture.Unit[i]._Current;
	s = &to_nouveau_texture(t)->surfaces[t->BaseLevel];
	ti = t->Image[0][t->BaseLevel];
	sa = _mesa_get_samplerobj(ctx, i);

	if (!nouveau_texture_validate(ctx, t))
		return;

	/* Recompute the texturing registers. */
	tx_format = ti->DepthLog2 << 28
		| ti->HeightLog2 << 24
		| ti->WidthLog2 << 20
		| NV20_3D_TEX_FORMAT_DIMS_2D
		| NV20_3D_TEX_FORMAT_NO_BORDER
		| 1 << 16;

	tx_wrap = nvgl_wrap_mode(sa->WrapR) << 16
		| nvgl_wrap_mode(sa->WrapT) << 8
		| nvgl_wrap_mode(sa->WrapS) << 0;

	tx_filter = nvgl_filter_mode(sa->MagFilter) << 24
		| nvgl_filter_mode(sa->MinFilter) << 16
		| 2 << 12;

	tx_enable = NV20_3D_TEX_ENABLE_ENABLE
		| log2i(sa->MaxAnisotropy) << 4;

	if (t->Target == GL_TEXTURE_RECTANGLE) {
		BEGIN_NV04(push, NV20_3D(TEX_NPOT_PITCH(i)), 1);
		PUSH_DATA (push, s->pitch << 16);
		BEGIN_NV04(push, NV20_3D(TEX_NPOT_SIZE(i)), 1);
		PUSH_DATA (push, s->width << 16 | s->height);

		tx_format |= get_tex_format_rect(ti);
	} else {
		tx_format |= get_tex_format_pot(ti);
	}

	if (sa->MinFilter != GL_NEAREST &&
	    sa->MinFilter != GL_LINEAR) {
		int lod_min = sa->MinLod;
		int lod_max = MIN2(sa->MaxLod, t->_MaxLambda);
		int lod_bias = sa->LodBias
			+ ctx->Texture.Unit[i].LodBias;

		lod_max = CLAMP(lod_max, 0, 15);
		lod_min = CLAMP(lod_min, 0, 15);
		lod_bias = CLAMP(lod_bias, 0, 15);

		tx_format |= NV20_3D_TEX_FORMAT_MIPMAP;
		tx_filter |= lod_bias << 8;
		tx_enable |= lod_min << 26
			| lod_max << 14;
	}

	/* Write it to the hardware. */
	BEGIN_NV04(push, NV20_3D(TEX_FORMAT(i)), 1);
	PUSH_MTHD (push, NV20_3D(TEX_FORMAT(i)), BUFCTX_TEX(i),
			 s->bo, tx_format, bo_flags | NOUVEAU_BO_OR,
			 NV20_3D_TEX_FORMAT_DMA0,
			 NV20_3D_TEX_FORMAT_DMA1);

	BEGIN_NV04(push, NV20_3D(TEX_OFFSET(i)), 1);
	PUSH_MTHDl(push, NV20_3D(TEX_OFFSET(i)), BUFCTX_TEX(i),
			 s->bo, s->offset, bo_flags);

	BEGIN_NV04(push, NV20_3D(TEX_WRAP(i)), 1);
	PUSH_DATA (push, tx_wrap);

	BEGIN_NV04(push, NV20_3D(TEX_FILTER(i)), 1);
	PUSH_DATA (push, tx_filter);

	BEGIN_NV04(push, NV20_3D(TEX_ENABLE(i)), 1);
	PUSH_DATA (push, tx_enable);

	context_dirty(ctx, TEX_SHADER);
}

void
nv20_emit_tex_shader(struct gl_context *ctx, int emit)
{
	struct nouveau_pushbuf *push = context_push(ctx);
	uint32_t tx_shader_op = 0;
	int i;

	for (i = 0; i < NV20_TEXTURE_UNITS; i++) {
		if (!ctx->Texture.Unit[i]._Current)
			continue;

		tx_shader_op |= NV20_3D_TEX_SHADER_OP_TX0_TEXTURE_2D << 5 * i;
	}

	BEGIN_NV04(push, NV20_3D(TEX_SHADER_OP), 1);
	PUSH_DATA (push, tx_shader_op);
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d90 1
a90 1
	case MESA_FORMAT_ARGB8888:
d93 1
a93 1
	case MESA_FORMAT_ARGB1555:
d96 1
a96 1
	case MESA_FORMAT_ARGB4444:
d99 1
a99 1
	case MESA_FORMAT_XRGB8888:
d102 1
a102 1
	case MESA_FORMAT_RGB565:
d105 2
a106 2
	case MESA_FORMAT_A8:
	case MESA_FORMAT_I8:
d109 1
a109 1
	case MESA_FORMAT_L8:
d131 1
a131 1
	case MESA_FORMAT_ARGB8888:
d134 1
a134 1
	case MESA_FORMAT_ARGB1555:
d137 1
a137 1
	case MESA_FORMAT_ARGB4444:
d140 1
a140 1
	case MESA_FORMAT_XRGB8888:
d143 1
a143 1
	case MESA_FORMAT_RGB565:
d146 1
a146 1
	case MESA_FORMAT_L8:
d149 2
a150 2
	case MESA_FORMAT_A8:
	case MESA_FORMAT_I8:
d172 1
a172 1
	if (!ctx->Texture.Unit[i]._ReallyEnabled) {
d266 1
a266 1
		if (!ctx->Texture.Unit[i]._ReallyEnabled)
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d34 1
d41 1
a41 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *kelvin = context_eng3d(ctx);
d51 2
a52 3
				BEGIN_RING(chan, kelvin,
					   NV20_3D_TEX_GEN_COEFF(i, j), 4);
				OUT_RINGp(chan, k, 4);
d55 2
a56 2
			BEGIN_RING(chan, kelvin, NV20_3D_TEX_GEN_MODE(i, j), 1);
			OUT_RING(chan, nvgl_texgen_mode(coord->Mode));
d59 2
a60 2
			BEGIN_RING(chan, kelvin, NV20_3D_TEX_GEN_MODE(i, j), 1);
			OUT_RING(chan, 0);
d70 1
a70 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *kelvin = context_eng3d(ctx);
d74 2
a75 2
		BEGIN_RING(chan, kelvin, NV20_3D_TEX_MATRIX_ENABLE(i), 1);
		OUT_RING(chan, 1);
d77 2
a78 2
		BEGIN_RING(chan, kelvin, NV20_3D_TEX_MATRIX(i,0), 16);
		OUT_RINGm(chan, ctx->TextureMatrixStack[i].Top->m);
d81 2
a82 2
		BEGIN_RING(chan, kelvin, NV20_3D_TEX_MATRIX_ENABLE(i), 1);
		OUT_RING(chan, 0);
d112 9
a120 2
	case MESA_FORMAT_CI8:
		return NV20_3D_TEX_FORMAT_FORMAT_INDEX8;
d162 1
a162 3
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *kelvin = context_eng3d(ctx);
	struct nouveau_bo_context *bctx = context_bctx_i(ctx, TEXTURE, i);
d167 1
d170 2
d173 2
a174 2
		BEGIN_RING(chan, kelvin, NV20_3D_TEX_ENABLE(i), 1);
		OUT_RING(chan, 0);
d183 1
d196 3
a198 3
	tx_wrap = nvgl_wrap_mode(t->Sampler.WrapR) << 16
		| nvgl_wrap_mode(t->Sampler.WrapT) << 8
		| nvgl_wrap_mode(t->Sampler.WrapS) << 0;
d200 2
a201 2
	tx_filter = nvgl_filter_mode(t->Sampler.MagFilter) << 24
		| nvgl_filter_mode(t->Sampler.MinFilter) << 16
d205 1
a205 1
		| log2i(t->Sampler.MaxAnisotropy) << 4;
d208 4
a211 4
		BEGIN_RING(chan, kelvin, NV20_3D_TEX_NPOT_PITCH(i), 1);
		OUT_RING(chan, s->pitch << 16);
		BEGIN_RING(chan, kelvin, NV20_3D_TEX_NPOT_SIZE(i), 1);
		OUT_RING(chan, s->width << 16 | s->height);
d218 5
a222 5
	if (t->Sampler.MinFilter != GL_NEAREST &&
	    t->Sampler.MinFilter != GL_LINEAR) {
		int lod_min = t->Sampler.MinLod;
		int lod_max = MIN2(t->Sampler.MaxLod, t->_MaxLambda);
		int lod_bias = t->Sampler.LodBias
d236 5
a240 5
	nouveau_bo_mark(bctx, kelvin, NV20_3D_TEX_FORMAT(i),
			s->bo, tx_format, 0,
			NV20_3D_TEX_FORMAT_DMA0,
			NV20_3D_TEX_FORMAT_DMA1,
			bo_flags | NOUVEAU_BO_OR);
d242 2
a243 1
	nouveau_bo_markl(bctx, kelvin, NV20_3D_TEX_OFFSET(i),
d246 2
a247 2
	BEGIN_RING(chan, kelvin, NV20_3D_TEX_WRAP(i), 1);
	OUT_RING(chan, tx_wrap);
d249 2
a250 2
	BEGIN_RING(chan, kelvin, NV20_3D_TEX_FILTER(i), 1);
	OUT_RING(chan, tx_filter);
d252 2
a253 2
	BEGIN_RING(chan, kelvin, NV20_3D_TEX_ENABLE(i), 1);
	OUT_RING(chan, tx_enable);
d261 1
a261 2
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *kelvin = context_eng3d(ctx);
d272 2
a273 2
	BEGIN_RING(chan, kelvin, NV20_3D_TEX_SHADER_OP, 1);
	OUT_RING(chan, tx_shader_op);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d189 3
a191 3
	tx_wrap = nvgl_wrap_mode(t->WrapR) << 16
		| nvgl_wrap_mode(t->WrapT) << 8
		| nvgl_wrap_mode(t->WrapS) << 0;
d193 2
a194 2
	tx_filter = nvgl_filter_mode(t->MagFilter) << 24
		| nvgl_filter_mode(t->MinFilter) << 16
d198 1
a198 1
		| log2i(t->MaxAnisotropy) << 4;
d211 5
a215 5
	if (t->MinFilter != GL_NEAREST &&
	    t->MinFilter != GL_LINEAR) {
		int lod_min = t->MinLod;
		int lod_max = MIN2(t->MaxLod, t->_MaxLambda);
		int lod_bias = t->LodBias
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d31 1
a31 1
#include "nouveau_class.h"
d35 53
d93 1
a93 1
		return NV20TCL_TX_FORMAT_FORMAT_A8R8G8B8;
d96 1
a96 1
		return NV20TCL_TX_FORMAT_FORMAT_A1R5G5B5;
d99 1
a99 1
		return NV20TCL_TX_FORMAT_FORMAT_A4R4G4B4;
d102 1
a102 1
		return NV20TCL_TX_FORMAT_FORMAT_X8R8G8B8;
d105 1
a105 1
		return NV20TCL_TX_FORMAT_FORMAT_R5G6B5;
d109 1
a109 1
		return NV20TCL_TX_FORMAT_FORMAT_A8;
d112 1
a112 1
		return NV20TCL_TX_FORMAT_FORMAT_L8;
d115 1
a115 1
		return NV20TCL_TX_FORMAT_FORMAT_INDEX8;
d127 1
a127 1
		return NV20TCL_TX_FORMAT_FORMAT_A8R8G8B8_RECT;
d130 1
a130 1
		return NV20TCL_TX_FORMAT_FORMAT_A1R5G5B5_RECT;
d133 1
a133 1
		return NV20TCL_TX_FORMAT_FORMAT_A4R4G4B4_RECT;
d136 1
a136 1
		return NV20TCL_TX_FORMAT_FORMAT_R8G8B8_RECT;
d139 1
a139 1
		return NV20TCL_TX_FORMAT_FORMAT_R5G6B5_RECT;
d142 1
a142 1
		return NV20TCL_TX_FORMAT_FORMAT_L8_RECT;
d146 1
a146 1
		return NV20TCL_TX_FORMAT_FORMAT_A8_RECT;
d154 1
a154 1
nv20_emit_tex_obj(GLcontext *ctx, int emit)
d167 1
a167 1
		BEGIN_RING(chan, kelvin, NV20TCL_TX_ENABLE(i), 1);
d185 2
a186 2
		| NV20TCL_TX_FORMAT_DIMS_2D
		| NV20TCL_TX_FORMAT_NO_BORDER
d194 2
a195 1
		| nvgl_filter_mode(t->MinFilter) << 16;
d197 1
a197 1
	tx_enable = NV20TCL_TX_ENABLE_ENABLE
d201 1
a201 1
		BEGIN_RING(chan, kelvin, NV20TCL_TX_NPOT_PITCH(i), 1);
d203 1
a203 1
		BEGIN_RING(chan, kelvin, NV20TCL_TX_NPOT_SIZE(i), 1);
d222 1
a222 1
		tx_format |= NV20TCL_TX_FORMAT_MIPMAP;
d229 1
a229 1
	nouveau_bo_mark(bctx, kelvin, NV20TCL_TX_FORMAT(i),
d231 2
a232 2
			NV20TCL_TX_FORMAT_DMA0,
			NV20TCL_TX_FORMAT_DMA1,
d235 2
a236 2
	nouveau_bo_markl(bctx, kelvin, NV20TCL_TX_OFFSET(i),
			 s->bo, 0, bo_flags);
d238 1
a238 1
	BEGIN_RING(chan, kelvin, NV20TCL_TX_WRAP(i), 1);
d241 1
a241 1
	BEGIN_RING(chan, kelvin, NV20TCL_TX_FILTER(i), 1);
d244 1
a244 1
	BEGIN_RING(chan, kelvin, NV20TCL_TX_ENABLE(i), 1);
d251 1
a251 1
nv20_emit_tex_shader(GLcontext *ctx, int emit)
d262 1
a262 1
		tx_shader_op |= NV20TCL_TX_SHADER_OP_TX0_TEXTURE_2D << 5 * i;
d265 1
a265 1
	BEGIN_RING(chan, kelvin, NV20TCL_TX_SHADER_OP, 1);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d31 1
a31 1
#include "nv20_3d.xml.h"
a34 53
void
nv20_emit_tex_gen(struct gl_context *ctx, int emit)
{
	const int i = emit - NOUVEAU_STATE_TEX_GEN0;
	struct nouveau_context *nctx = to_nouveau_context(ctx);
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *kelvin = context_eng3d(ctx);
	struct gl_texture_unit *unit = &ctx->Texture.Unit[i];
	int j;

	for (j = 0; j < 4; j++) {
		if (nctx->fallback == HWTNL && (unit->TexGenEnabled & 1 << j)) {
			struct gl_texgen *coord = get_texgen_coord(unit, j);
			float *k = get_texgen_coeff(coord);

			if (k) {
				BEGIN_RING(chan, kelvin,
					   NV20_3D_TEX_GEN_COEFF(i, j), 4);
				OUT_RINGp(chan, k, 4);
			}

			BEGIN_RING(chan, kelvin, NV20_3D_TEX_GEN_MODE(i, j), 1);
			OUT_RING(chan, nvgl_texgen_mode(coord->Mode));

		} else {
			BEGIN_RING(chan, kelvin, NV20_3D_TEX_GEN_MODE(i, j), 1);
			OUT_RING(chan, 0);
		}
	}
}

void
nv20_emit_tex_mat(struct gl_context *ctx, int emit)
{
	const int i = emit - NOUVEAU_STATE_TEX_MAT0;
	struct nouveau_context *nctx = to_nouveau_context(ctx);
	struct nouveau_channel *chan = context_chan(ctx);
	struct nouveau_grobj *kelvin = context_eng3d(ctx);

	if (nctx->fallback == HWTNL &&
	    (ctx->Texture._TexMatEnabled & 1 << i)) {
		BEGIN_RING(chan, kelvin, NV20_3D_TEX_MATRIX_ENABLE(i), 1);
		OUT_RING(chan, 1);

		BEGIN_RING(chan, kelvin, NV20_3D_TEX_MATRIX(i,0), 16);
		OUT_RINGm(chan, ctx->TextureMatrixStack[i].Top->m);

	} else {
		BEGIN_RING(chan, kelvin, NV20_3D_TEX_MATRIX_ENABLE(i), 1);
		OUT_RING(chan, 0);
	}
}

d40 1
a40 1
		return NV20_3D_TEX_FORMAT_FORMAT_A8R8G8B8;
d43 1
a43 1
		return NV20_3D_TEX_FORMAT_FORMAT_A1R5G5B5;
d46 1
a46 1
		return NV20_3D_TEX_FORMAT_FORMAT_A4R4G4B4;
d49 1
a49 1
		return NV20_3D_TEX_FORMAT_FORMAT_X8R8G8B8;
d52 1
a52 1
		return NV20_3D_TEX_FORMAT_FORMAT_R5G6B5;
d56 1
a56 1
		return NV20_3D_TEX_FORMAT_FORMAT_I8;
d59 1
a59 1
		return NV20_3D_TEX_FORMAT_FORMAT_L8;
d62 1
a62 1
		return NV20_3D_TEX_FORMAT_FORMAT_INDEX8;
d74 1
a74 1
		return NV20_3D_TEX_FORMAT_FORMAT_A8R8G8B8_RECT;
d77 1
a77 1
		return NV20_3D_TEX_FORMAT_FORMAT_A1R5G5B5_RECT;
d80 1
a80 1
		return NV20_3D_TEX_FORMAT_FORMAT_A4R4G4B4_RECT;
d83 1
a83 1
		return NV20_3D_TEX_FORMAT_FORMAT_R8G8B8_RECT;
d86 1
a86 1
		return NV20_3D_TEX_FORMAT_FORMAT_R5G6B5_RECT;
d89 1
a89 1
		return NV20_3D_TEX_FORMAT_FORMAT_L8_RECT;
d93 1
a93 1
		return NV20_3D_TEX_FORMAT_FORMAT_I8_RECT;
d101 1
a101 1
nv20_emit_tex_obj(struct gl_context *ctx, int emit)
d114 1
a114 1
		BEGIN_RING(chan, kelvin, NV20_3D_TEX_ENABLE(i), 1);
d132 2
a133 2
		| NV20_3D_TEX_FORMAT_DIMS_2D
		| NV20_3D_TEX_FORMAT_NO_BORDER
d141 1
a141 2
		| nvgl_filter_mode(t->MinFilter) << 16
		| 2 << 12;
d143 1
a143 1
	tx_enable = NV20_3D_TEX_ENABLE_ENABLE
d147 1
a147 1
		BEGIN_RING(chan, kelvin, NV20_3D_TEX_NPOT_PITCH(i), 1);
d149 1
a149 1
		BEGIN_RING(chan, kelvin, NV20_3D_TEX_NPOT_SIZE(i), 1);
d168 1
a168 1
		tx_format |= NV20_3D_TEX_FORMAT_MIPMAP;
d175 1
a175 1
	nouveau_bo_mark(bctx, kelvin, NV20_3D_TEX_FORMAT(i),
d177 2
a178 2
			NV20_3D_TEX_FORMAT_DMA0,
			NV20_3D_TEX_FORMAT_DMA1,
d181 2
a182 2
	nouveau_bo_markl(bctx, kelvin, NV20_3D_TEX_OFFSET(i),
			 s->bo, s->offset, bo_flags);
d184 1
a184 1
	BEGIN_RING(chan, kelvin, NV20_3D_TEX_WRAP(i), 1);
d187 1
a187 1
	BEGIN_RING(chan, kelvin, NV20_3D_TEX_FILTER(i), 1);
d190 1
a190 1
	BEGIN_RING(chan, kelvin, NV20_3D_TEX_ENABLE(i), 1);
d197 1
a197 1
nv20_emit_tex_shader(struct gl_context *ctx, int emit)
d208 1
a208 1
		tx_shader_op |= NV20_3D_TEX_SHADER_OP_TX0_TEXTURE_2D << 5 * i;
d211 1
a211 1
	BEGIN_RING(chan, kelvin, NV20_3D_TEX_SHADER_OP, 1);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a33 1
#include "main/samplerobj.h"
d40 2
a41 1
	struct nouveau_pushbuf *push = context_push(ctx);
d51 3
a53 2
				BEGIN_NV04(push, NV20_3D(TEX_GEN_COEFF(i, j)), 4);
				PUSH_DATAp(push, k, 4);
d56 2
a57 2
			BEGIN_NV04(push, NV20_3D(TEX_GEN_MODE(i, j)), 1);
			PUSH_DATA (push, nvgl_texgen_mode(coord->Mode));
d60 2
a61 2
			BEGIN_NV04(push, NV20_3D(TEX_GEN_MODE(i, j)), 1);
			PUSH_DATA (push, 0);
d71 2
a72 1
	struct nouveau_pushbuf *push = context_push(ctx);
d76 2
a77 2
		BEGIN_NV04(push, NV20_3D(TEX_MATRIX_ENABLE(i)), 1);
		PUSH_DATA (push, 1);
d79 2
a80 2
		BEGIN_NV04(push, NV20_3D(TEX_MATRIX(i,0)), 16);
		PUSH_DATAm(push, ctx->TextureMatrixStack[i].Top->m);
d83 2
a84 2
		BEGIN_NV04(push, NV20_3D(TEX_MATRIX_ENABLE(i)), 1);
		PUSH_DATA (push, 0);
d114 2
a115 9
	case MESA_FORMAT_RGB_DXT1:
	case MESA_FORMAT_RGBA_DXT1:
		return NV20_3D_TEX_FORMAT_FORMAT_DXT1;

	case MESA_FORMAT_RGBA_DXT3:
		return NV20_3D_TEX_FORMAT_FORMAT_DXT3;

	case MESA_FORMAT_RGBA_DXT5:
		return NV20_3D_TEX_FORMAT_FORMAT_DXT5;
d157 3
a159 1
	struct nouveau_pushbuf *push = context_push(ctx);
a163 1
	const struct gl_sampler_object *sa;
a165 2
	PUSH_RESET(push, BUFCTX_TEX(i));

d167 2
a168 2
		BEGIN_NV04(push, NV20_3D(TEX_ENABLE(i)), 1);
		PUSH_DATA (push, 0);
a176 1
	sa = _mesa_get_samplerobj(ctx, i);
d189 3
a191 3
	tx_wrap = nvgl_wrap_mode(sa->WrapR) << 16
		| nvgl_wrap_mode(sa->WrapT) << 8
		| nvgl_wrap_mode(sa->WrapS) << 0;
d193 2
a194 2
	tx_filter = nvgl_filter_mode(sa->MagFilter) << 24
		| nvgl_filter_mode(sa->MinFilter) << 16
d198 1
a198 1
		| log2i(sa->MaxAnisotropy) << 4;
d201 4
a204 4
		BEGIN_NV04(push, NV20_3D(TEX_NPOT_PITCH(i)), 1);
		PUSH_DATA (push, s->pitch << 16);
		BEGIN_NV04(push, NV20_3D(TEX_NPOT_SIZE(i)), 1);
		PUSH_DATA (push, s->width << 16 | s->height);
d211 5
a215 5
	if (sa->MinFilter != GL_NEAREST &&
	    sa->MinFilter != GL_LINEAR) {
		int lod_min = sa->MinLod;
		int lod_max = MIN2(sa->MaxLod, t->_MaxLambda);
		int lod_bias = sa->LodBias
d229 5
a233 5
	BEGIN_NV04(push, NV20_3D(TEX_FORMAT(i)), 1);
	PUSH_MTHD (push, NV20_3D(TEX_FORMAT(i)), BUFCTX_TEX(i),
			 s->bo, tx_format, bo_flags | NOUVEAU_BO_OR,
			 NV20_3D_TEX_FORMAT_DMA0,
			 NV20_3D_TEX_FORMAT_DMA1);
d235 1
a235 2
	BEGIN_NV04(push, NV20_3D(TEX_OFFSET(i)), 1);
	PUSH_MTHDl(push, NV20_3D(TEX_OFFSET(i)), BUFCTX_TEX(i),
d238 2
a239 2
	BEGIN_NV04(push, NV20_3D(TEX_WRAP(i)), 1);
	PUSH_DATA (push, tx_wrap);
d241 2
a242 2
	BEGIN_NV04(push, NV20_3D(TEX_FILTER(i)), 1);
	PUSH_DATA (push, tx_filter);
d244 2
a245 2
	BEGIN_NV04(push, NV20_3D(TEX_ENABLE(i)), 1);
	PUSH_DATA (push, tx_enable);
d253 2
a254 1
	struct nouveau_pushbuf *push = context_push(ctx);
d265 2
a266 2
	BEGIN_NV04(push, NV20_3D(TEX_SHADER_OP), 1);
	PUSH_DATA (push, tx_shader_op);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d90 1
a90 1
	case MESA_FORMAT_B8G8R8A8_UNORM:
d93 1
a93 1
	case MESA_FORMAT_B5G5R5A1_UNORM:
d96 1
a96 1
	case MESA_FORMAT_B4G4R4A4_UNORM:
d99 1
a99 1
	case MESA_FORMAT_B8G8R8X8_UNORM:
d102 1
a102 1
	case MESA_FORMAT_B5G6R5_UNORM:
d105 2
a106 2
	case MESA_FORMAT_A_UNORM8:
	case MESA_FORMAT_I_UNORM8:
d109 1
a109 1
	case MESA_FORMAT_L_UNORM8:
d131 1
a131 1
	case MESA_FORMAT_B8G8R8A8_UNORM:
d134 1
a134 1
	case MESA_FORMAT_B5G5R5A1_UNORM:
d137 1
a137 1
	case MESA_FORMAT_B4G4R4A4_UNORM:
d140 1
a140 1
	case MESA_FORMAT_B8G8R8X8_UNORM:
d143 1
a143 1
	case MESA_FORMAT_B5G6R5_UNORM:
d146 1
a146 1
	case MESA_FORMAT_L_UNORM8:
d149 2
a150 2
	case MESA_FORMAT_A_UNORM8:
	case MESA_FORMAT_I_UNORM8:
d172 1
a172 1
	if (!ctx->Texture.Unit[i]._Current) {
d266 1
a266 1
		if (!ctx->Texture.Unit[i]._Current)
@


