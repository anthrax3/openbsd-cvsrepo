head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.4
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.2
	OPENBSD_5_6_BASE:1.1.1.4
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.1.1.3.0.2
	OPENBSD_5_5_BASE:1.1.1.3
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.28;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.10.05.09.25.12;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.49;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * \file brw_cubemap_normalize.cpp
 *
 * IR lower pass to perform the normalization of the cubemap coordinates to
 * have the largest magnitude component be -1.0 or 1.0.
 *
 * \author Eric Anholt <eric@@anholt.net>
 */

#include "../glsl/glsl_types.h"
#include "../glsl/ir.h"

class brw_cubemap_normalize_visitor : public ir_hierarchical_visitor {
public:
   brw_cubemap_normalize_visitor()
   {
      progress = false;
   }

   ir_visitor_status visit_leave(ir_texture *ir);

   bool progress;
};

ir_visitor_status
brw_cubemap_normalize_visitor::visit_leave(ir_texture *ir)
{
   if (ir->sampler->type->sampler_dimensionality != GLSL_SAMPLER_DIM_CUBE)
      return visit_continue;

   void *mem_ctx = ralloc_parent(ir);

   ir_variable *var = new(mem_ctx) ir_variable(ir->coordinate->type,
					       "coordinate", ir_var_auto);
   base_ir->insert_before(var);
   ir_dereference *deref = new(mem_ctx) ir_dereference_variable(var);
   ir_assignment *assign = new(mem_ctx) ir_assignment(deref, ir->coordinate,
						      NULL);
   base_ir->insert_before(assign);

   deref = new(mem_ctx) ir_dereference_variable(var);
   ir_rvalue *swiz0 = new(mem_ctx) ir_swizzle(deref, 0, 0, 0, 0, 1);
   deref = new(mem_ctx) ir_dereference_variable(var);
   ir_rvalue *swiz1 = new(mem_ctx) ir_swizzle(deref, 1, 0, 0, 0, 1);
   deref = new(mem_ctx) ir_dereference_variable(var);
   ir_rvalue *swiz2 = new(mem_ctx) ir_swizzle(deref, 2, 0, 0, 0, 1);

   swiz0 = new(mem_ctx) ir_expression(ir_unop_abs, swiz0->type, swiz0, NULL);
   swiz1 = new(mem_ctx) ir_expression(ir_unop_abs, swiz1->type, swiz1, NULL);
   swiz2 = new(mem_ctx) ir_expression(ir_unop_abs, swiz2->type, swiz2, NULL);

   ir_expression *expr;
   expr = new(mem_ctx) ir_expression(ir_binop_max,
				     glsl_type::float_type,
				     swiz0, swiz1);

   expr = new(mem_ctx) ir_expression(ir_binop_max,
				     glsl_type::float_type,
				     expr, swiz2);

   expr = new(mem_ctx) ir_expression(ir_unop_rcp,
				     glsl_type::float_type,
				     expr, NULL);

   deref = new(mem_ctx) ir_dereference_variable(var);
   ir->coordinate = new(mem_ctx) ir_expression(ir_binop_mul,
					       ir->coordinate->type,
					       deref,
					       expr);

   progress = true;
   return visit_continue;
}

extern "C" {

GLboolean
brw_do_cubemap_normalize(exec_list *instructions)
{
   brw_cubemap_normalize_visitor v;

   visit_list_elements(&v, instructions);

   return v.progress;
}

}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d33 2
a34 2
#include "glsl/glsl_types.h"
#include "glsl/ir.h"
a53 3
   if (ir->op == ir_txs)
      return visit_continue;

d100 1
a100 1
bool
@


1.1.1.3
log
@Import Mesa 9.2.1
@
text
@a34 1
#include "program/prog_instruction.h" /* For WRITEMASK_* */
d91 5
a95 12
   /* coordinate.xyz *= expr */
   assign = new(mem_ctx) ir_assignment(
      new(mem_ctx) ir_dereference_variable(var),
      new(mem_ctx) ir_swizzle(
         new(mem_ctx) ir_expression(ir_binop_mul,
                                    ir->coordinate->type,
                                    new(mem_ctx) ir_dereference_variable(var),
                                    expr),
         0, 1, 2, 0, 3));
   assign->write_mask = WRITEMASK_XYZ;
   base_ir->insert_before(assign);
   ir->coordinate = new(mem_ctx) ir_dereference_variable(var);
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d55 1
a55 1
   if (!ir->coordinate)
@


