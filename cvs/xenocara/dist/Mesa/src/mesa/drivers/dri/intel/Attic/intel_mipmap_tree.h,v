head	1.6;
access;
symbols
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.09.05.14.04.32;	author jsg;	state dead;
branches;
next	1.5;

1.5
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.14.58.16;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.38;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge Mesa 9.2.0
@
text
@/**************************************************************************
 * 
 * Copyright 2006 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

#ifndef INTEL_MIPMAP_TREE_H
#define INTEL_MIPMAP_TREE_H

#include "intel_regions.h"

/* A layer on top of the intel_regions code which adds:
 *
 * - Code to size and layout a region to hold a set of mipmaps.
 * - Query to determine if a new image fits in an existing tree.
 * - More refcounting 
 *     - maybe able to remove refcounting from intel_region?
 * - ?
 *
 * The fixed mipmap layout of intel hardware where one offset
 * specifies the position of all images in a mipmap hierachy
 * complicates the implementation of GL texture image commands,
 * compared to hardware where each image is specified with an
 * independent offset.
 *
 * In an ideal world, each texture object would be associated with a
 * single bufmgr buffer or 2d intel_region, and all the images within
 * the texture object would slot into the tree as they arrive.  The
 * reality can be a little messier, as images can arrive from the user
 * with sizes that don't fit in the existing tree, or in an order
 * where the tree layout cannot be guessed immediately.  
 * 
 * This structure encodes an idealized mipmap tree.  The GL image
 * commands build these where possible, otherwise store the images in
 * temporary system buffers.
 */


/**
 * Describes the location of each texture image within a texture region.
 */
struct intel_mipmap_level
{
   /** Offset to this miptree level, used in computing x_offset. */
   GLuint level_x;
   /** Offset to this miptree level, used in computing y_offset. */
   GLuint level_y;
   GLuint width;
   GLuint height;
   /** Depth of the mipmap at this level: 1 for 1D/2D/CUBE, n for 3D. */
   GLuint depth;
   /** Number of images at this level: 1 for 1D/2D, 6 for CUBE, depth for 3D */
   GLuint nr_images;

   /** @@{
    * offsets from level_[xy] to the image for each cube face or depth
    * level.
    *
    * Pretty much have to accept that hardware formats
    * are going to be so diverse that there is no unified way to
    * compute the offsets of depth/cube images within a mipmap level,
    * so have to store them as a lookup table.
    */
   GLuint *x_offset, *y_offset;
   /** @@} */
};

struct intel_mipmap_tree
{
   /* Effectively the key:
    */
   GLenum target;
   gl_format format;

   GLuint first_level;
   GLuint last_level;

   GLuint width0, height0, depth0; /**< Level zero image dimensions */
   GLuint cpp;
   GLboolean compressed;

   /* Derived from the above:
    */
   GLuint total_width;
   GLuint total_height;

   /* Includes image offset tables:
    */
   struct intel_mipmap_level level[MAX_TEXTURE_LEVELS];

   /* The data is held here:
    */
   struct intel_region *region;

   /**
    * This points to an auxillary hiz region if all of the following hold:
    *     1. The texture has been attached to an FBO as a depthbuffer.
    *     2. The texture format is hiz compatible.
    *     3. The intel context supports hiz.
    *
    * When a texture is attached to multiple FBO's, a separate renderbuffer
    * wrapper is created for each attachment. This necessitates storing the
    * hiz region in the texture itself instead of the renderbuffer wrapper.
    *
    * \see intel_fbo.c:intel_wrap_texture()
    */
   struct intel_region *hiz_region;

   /* These are also refcounted:
    */
   GLuint refcount;
};



struct intel_mipmap_tree *intel_miptree_create(struct intel_context *intel,
                                               GLenum target,
					       gl_format format,
                                               GLuint first_level,
                                               GLuint last_level,
                                               GLuint width0,
                                               GLuint height0,
                                               GLuint depth0,
					       GLboolean expect_accelerated_upload);

struct intel_mipmap_tree *
intel_miptree_create_for_region(struct intel_context *intel,
				GLenum target,
				gl_format format,
				struct intel_region *region,
				GLuint depth0);

int intel_miptree_pitch_align (struct intel_context *intel,
			       struct intel_mipmap_tree *mt,
			       uint32_t tiling,
			       int pitch);

void intel_miptree_reference(struct intel_mipmap_tree **dst,
                             struct intel_mipmap_tree *src);

void intel_miptree_release(struct intel_context *intel,
                           struct intel_mipmap_tree **mt);

/* Check if an image fits an existing mipmap tree layout
 */
GLboolean intel_miptree_match_image(struct intel_mipmap_tree *mt,
                                    struct gl_texture_image *image);

/* Return a pointer to an image within a tree.  Return image stride as
 * well.
 */
GLubyte *intel_miptree_image_map(struct intel_context *intel,
                                 struct intel_mipmap_tree *mt,
                                 GLuint face,
                                 GLuint level,
                                 GLuint * row_stride, GLuint * image_stride);

void intel_miptree_image_unmap(struct intel_context *intel,
                               struct intel_mipmap_tree *mt);

void
intel_miptree_get_image_offset(struct intel_mipmap_tree *mt,
			       GLuint level, GLuint face, GLuint depth,
			       GLuint *x, GLuint *y);

void intel_miptree_set_level_info(struct intel_mipmap_tree *mt,
                                  GLuint level,
                                  GLuint nr_images,
                                  GLuint x, GLuint y,
                                  GLuint w, GLuint h, GLuint d);

void intel_miptree_set_image_offset(struct intel_mipmap_tree *mt,
                                    GLuint level,
                                    GLuint img, GLuint x, GLuint y);

/* Upload an image into a tree
 */
void intel_miptree_image_data(struct intel_context *intel,
                              struct intel_mipmap_tree *dst,
                              GLuint face,
                              GLuint level,
                              void *src,
                              GLuint src_row_pitch, GLuint src_image_pitch);

/* Copy an image between two trees
 */
void intel_miptree_image_copy(struct intel_context *intel,
                              struct intel_mipmap_tree *dst,
                              GLuint face, GLuint level,
                              struct intel_mipmap_tree *src);

/* i915_mipmap_tree.c:
 */
GLboolean i915_miptree_layout(struct intel_context *intel,
			      struct intel_mipmap_tree *mt,
			      uint32_t tiling);
GLboolean i945_miptree_layout(struct intel_context *intel,
			      struct intel_mipmap_tree *mt,
			      uint32_t tiling);
GLboolean brw_miptree_layout(struct intel_context *intel,
			     struct intel_mipmap_tree *mt,
			     uint32_t tiling);

#endif
@


1.5
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.4
log
@Merge Mesa 7.10.3
@
text
@d94 1
a94 1
   GLenum internal_format;
d116 14
d139 1
a139 2
                                               GLenum base_format,
                                               GLenum internal_format,
a144 2
                                               GLuint cpp,
                                               GLuint compress_byte,
d150 1
a150 3
				GLenum internal_format,
				GLuint first_level,
				GLuint last_level,
d152 1
a152 2
				GLuint depth0,
				GLuint compress_byte);
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a64 8
   /**
    * Byte offset to the base of this level.
    *
    * This is used for mipmap levels of 1D/2D/3D textures.  However, CUBE
    * layouts spread images around the whole tree, so the level offset is
    * always zero in that case.
    */
   GLuint level_offset;
d76 2
a77 2
   /**
    * Byte offset from level_offset to the image for each cube face or depth
d86 1
d105 1
a105 2
   GLuint pitch;
   GLuint depth_pitch;          /* per-image on i945? */
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d73 4
d93 1
a93 1
   GLuint *image_offset;
d133 1
d156 1
d168 1
a168 2
                                    struct gl_texture_image *image,
                                    GLuint face, GLuint level);
d182 4
a185 13

/* Return the linear offset of an image relative to the start of the
 * tree:
 */
GLuint intel_miptree_image_offset(struct intel_mipmap_tree *mt,
                                  GLuint face, GLuint level);

/* Return pointers to each 2d slice within an image.  Indexed by depth
 * value.
 */
const GLuint *intel_miptree_depth_offsets(struct intel_mipmap_tree *mt,
                                          GLuint level);

a196 1

d216 2
a217 1
			      struct intel_mipmap_tree *mt);
d219 2
a220 1
			      struct intel_mipmap_tree *mt);
d222 2
a223 1
			     struct intel_mipmap_tree *mt);
@


1.1
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d136 2
a137 1
                                               GLuint compress_byte);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d65 8
a72 4
   /** Offset to this miptree level, used in computing x_offset. */
   GLuint level_x;
   /** Offset to this miptree level, used in computing y_offset. */
   GLuint level_y;
d80 2
a81 2
   /** @@{
    * offsets from level_[xy] to the image for each cube face or depth
d89 1
a89 2
   GLuint *x_offset, *y_offset;
   /** @@} */
d108 2
a109 1
   GLuint total_width;
a128 1
                                               GLenum base_format,
d136 1
a136 2
                                               GLuint compress_byte,
					       GLboolean expect_accelerated_upload);
a149 1
			       uint32_t tiling,
d161 2
a162 1
                                    struct gl_texture_image *image);
d176 13
a188 4
void
intel_miptree_get_image_offset(struct intel_mipmap_tree *mt,
			       GLuint level, GLuint face, GLuint depth,
			       GLuint *x, GLuint *y);
d200 1
d220 1
a220 2
			      struct intel_mipmap_tree *mt,
			      uint32_t tiling);
d222 1
a222 2
			      struct intel_mipmap_tree *mt,
			      uint32_t tiling);
d224 1
a224 2
			     struct intel_mipmap_tree *mt,
			     uint32_t tiling);
@


