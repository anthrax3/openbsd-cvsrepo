head	1.3;
access;
symbols
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2010.05.22.20.06.17;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.38;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.26;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.26;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@
static void TAG(gamma_point)( gammaContextPtr gmesa, 
			     const gammaVertex *v0 )
{
    uint32_t vColor;
    uint32_t vBegin;

    vBegin = gmesa->Begin | B_PrimType_Points;

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, Begin, vBegin);

#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v0->v.color.alpha << 24) |
	     (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v0->v.u0);
    WRITEF(gmesa->buf, Ts2, v0->v.v0);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, FlushSpan, 0);
#endif

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, End, 0);
}

static void TAG(gamma_line)( gammaContextPtr gmesa, 
			     const gammaVertex *v0,
			     const gammaVertex *v1 )
{
    uint32_t vColor;
    uint32_t vBegin;

    vBegin = gmesa->Begin | B_PrimType_Lines;

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, Begin, vBegin);

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v0->v.color.alpha << 24) |
	     (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#else
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v1->v.color.alpha << 24) |
	     (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v0->v.u0);
    WRITEF(gmesa->buf, Ts2, v0->v.v0);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v1->v.color.alpha << 24) |
	     (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v1->v.u0);
    WRITEF(gmesa->buf, Ts2, v1->v.v0);
    WRITEF(gmesa->buf, Vw, v1->v.w);
    WRITEF(gmesa->buf, Vz, v1->v.z);
    WRITEF(gmesa->buf, Vy, v1->v.y);
    WRITEF(gmesa->buf, Vx4, v1->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v1->v.w);
    WRITEF(gmesa->buf, Vz, v1->v.z);
    WRITEF(gmesa->buf, Vy, v1->v.y);
    WRITEF(gmesa->buf, Vx4, v1->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, FlushSpan, 0);
#endif

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, End, 0);
}

static void TAG(gamma_triangle)( gammaContextPtr gmesa,
				 const gammaVertex *v0,
				 const gammaVertex *v1, 
				 const gammaVertex *v2 )
{
    uint32_t vColor;
    uint32_t vBegin;

    vBegin = gmesa->Begin | B_PrimType_Triangles;

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, Begin, vBegin);

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v0->v.color.alpha << 24) |
	     (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#else
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v2->v.color.alpha << 24) |
	     (v2->v.color.blue  << 16) |
	     (v2->v.color.green <<  8) |
	     (v2->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v2->v.color.blue  << 16) |
	     (v2->v.color.green <<  8) |
	     (v2->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v0->v.u0);
    WRITEF(gmesa->buf, Ts2, v0->v.v0);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v1->v.color.alpha << 24) |
	     (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v1->v.u0);
    WRITEF(gmesa->buf, Ts2, v1->v.v0);
    WRITEF(gmesa->buf, Vw, v1->v.w);
    WRITEF(gmesa->buf, Vz, v1->v.z);
    WRITEF(gmesa->buf, Vy, v1->v.y);
    WRITEF(gmesa->buf, Vx4, v1->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v1->v.w);
    WRITEF(gmesa->buf, Vz, v1->v.z);
    WRITEF(gmesa->buf, Vy, v1->v.y);
    WRITEF(gmesa->buf, Vx4, v1->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v2->v.color.alpha << 24) |
	     (v2->v.color.blue  << 16) |
	     (v2->v.color.green <<  8) |
	     (v2->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v2->v.color.blue  << 16) |
	     (v2->v.color.green <<  8) |
	     (v2->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v2->v.u0);
    WRITEF(gmesa->buf, Ts2, v2->v.v0);
    WRITEF(gmesa->buf, Vw, v2->v.w);
    WRITEF(gmesa->buf, Vz, v2->v.z);
    WRITEF(gmesa->buf, Vy, v2->v.y);
    WRITEF(gmesa->buf, Vx4, v2->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v2->v.w);
    WRITEF(gmesa->buf, Vz, v2->v.z);
    WRITEF(gmesa->buf, Vy, v2->v.y);
    WRITEF(gmesa->buf, Vx4, v2->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, FlushSpan, 0);
#endif

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, End, 0);
}

static void TAG(gamma_quad)( gammaContextPtr gmesa,
			    const gammaVertex *v0,
			    const gammaVertex *v1,
			    const gammaVertex *v2,
			    const gammaVertex *v3 )
{
    uint32_t vColor;
    uint32_t vBegin;

    vBegin = gmesa->Begin | B_PrimType_Quads;

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, Begin, vBegin);

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v0->v.color.alpha << 24) |
	     (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#else
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v3->v.color.alpha << 24) |
	     (v3->v.color.blue  << 16) |
	     (v3->v.color.green <<  8) |
	     (v3->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v3->v.color.blue  << 16) |
	     (v3->v.color.green <<  8) |
	     (v3->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v0->v.u0);
    WRITEF(gmesa->buf, Ts2, v0->v.v0);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v1->v.color.alpha << 24) |
	     (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v1->v.u0);
    WRITEF(gmesa->buf, Ts2, v1->v.v0);
    WRITEF(gmesa->buf, Vw, v1->v.w);
    WRITEF(gmesa->buf, Vz, v1->v.z);
    WRITEF(gmesa->buf, Vy, v1->v.y);
    WRITEF(gmesa->buf, Vx4, v1->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v1->v.w);
    WRITEF(gmesa->buf, Vz, v1->v.z);
    WRITEF(gmesa->buf, Vy, v1->v.y);
    WRITEF(gmesa->buf, Vx4, v1->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v2->v.color.alpha << 24) |
	     (v2->v.color.blue  << 16) |
	     (v2->v.color.green <<  8) |
	     (v2->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v2->v.color.blue  << 16) |
	     (v2->v.color.green <<  8) |
	     (v2->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v2->v.u0);
    WRITEF(gmesa->buf, Ts2, v2->v.v0);
    WRITEF(gmesa->buf, Vw, v2->v.w);
    WRITEF(gmesa->buf, Vz, v2->v.z);
    WRITEF(gmesa->buf, Vy, v2->v.y);
    WRITEF(gmesa->buf, Vx4, v2->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v2->v.w);
    WRITEF(gmesa->buf, Vz, v2->v.z);
    WRITEF(gmesa->buf, Vy, v2->v.y);
    WRITEF(gmesa->buf, Vx4, v2->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v3->v.color.alpha << 24) |
	     (v3->v.color.blue  << 16) |
	     (v3->v.color.green <<  8) |
	     (v3->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v3->v.color.blue  << 16) |
	     (v3->v.color.green <<  8) |
	     (v3->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v3->v.u0);
    WRITEF(gmesa->buf, Ts2, v3->v.v0);
    WRITEF(gmesa->buf, Vw, v3->v.w);
    WRITEF(gmesa->buf, Vz, v3->v.z);
    WRITEF(gmesa->buf, Vy, v3->v.y);
    WRITEF(gmesa->buf, Vx4, v3->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v3->v.w);
    WRITEF(gmesa->buf, Vz, v3->v.z);
    WRITEF(gmesa->buf, Vy, v3->v.y);
    WRITEF(gmesa->buf, Vx4, v3->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, FlushSpan, 0);
#endif

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, End, 0);
}

static void TAG(gamma_init)(void)
{
	gamma_point_tab[IND]	= TAG(gamma_point);
	gamma_line_tab[IND]	= TAG(gamma_line);
	gamma_tri_tab[IND]	= TAG(gamma_triangle);
	gamma_quad_tab[IND]	= TAG(gamma_quad);
}

#undef IND
#undef TAG
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86: xc/extras/Mesa/src/mesa/drivers/dri/gamma/gamma_tritmp.h,v 1.2 2004/12/13 22:40:49 tsi Exp $ */
d5 2
a6 2
    u_int32_t vColor;
    u_int32_t vBegin;
d59 2
a60 2
    u_int32_t vColor;
    u_int32_t vBegin;
d168 2
a169 2
    u_int32_t vColor;
    u_int32_t vBegin;
d313 2
a314 2
    u_int32_t vColor;
    u_int32_t vBegin;
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@
