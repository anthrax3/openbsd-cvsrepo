head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.04.49;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.20;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.50;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.54;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "nouveau_driver.h"
#include "nouveau_fbo.h"
#include "nouveau_context.h"
#include "nouveau_texture.h"

#include "main/framebuffer.h"
#include "main/renderbuffer.h"
#include "main/fbobject.h"

static GLboolean
set_renderbuffer_format(struct gl_renderbuffer *rb, GLenum internalFormat)
{
	struct nouveau_surface *s = &to_nouveau_renderbuffer(rb)->surface;

	rb->InternalFormat  = internalFormat;

	switch (internalFormat) {
	case GL_RGB:
	case GL_RGB8:
		rb->_BaseFormat  = GL_RGB;
		rb->Format = MESA_FORMAT_B8G8R8X8_UNORM;
		s->cpp = 4;
		break;
	case GL_RGBA:
	case GL_RGBA8:
		rb->_BaseFormat  = GL_RGBA;
		rb->Format = MESA_FORMAT_B8G8R8A8_UNORM;
		s->cpp = 4;
		break;
	case GL_RGB5:
		rb->_BaseFormat  = GL_RGB;
		rb->Format = MESA_FORMAT_B5G6R5_UNORM;
		s->cpp = 2;
		break;
	case GL_DEPTH_COMPONENT16:
		rb->_BaseFormat  = GL_DEPTH_COMPONENT;
		rb->Format = MESA_FORMAT_Z_UNORM16;
		s->cpp = 2;
		break;
	case GL_DEPTH_COMPONENT:
	case GL_DEPTH_COMPONENT24:
	case GL_STENCIL_INDEX8_EXT:
	case GL_DEPTH24_STENCIL8_EXT:
		rb->_BaseFormat  = GL_DEPTH_STENCIL;
		rb->Format = MESA_FORMAT_S8_UINT_Z24_UNORM;
		s->cpp = 4;
		break;
	default:
		return GL_FALSE;
	}

	s->format = rb->Format;

	return GL_TRUE;
}

static GLboolean
nouveau_renderbuffer_storage(struct gl_context *ctx, struct gl_renderbuffer *rb,
			     GLenum internalFormat,
			     GLuint width, GLuint height)
{
	struct nouveau_surface *s = &to_nouveau_renderbuffer(rb)->surface;

	if (!set_renderbuffer_format(rb, internalFormat))
		return GL_FALSE;

	rb->Width = width;
	rb->Height = height;

	nouveau_surface_alloc(ctx, s, TILED, NOUVEAU_BO_VRAM | NOUVEAU_BO_MAP,
			      rb->Format, width, height);

	context_dirty(ctx, FRAMEBUFFER);
	return GL_TRUE;
}

static void
nouveau_renderbuffer_del(struct gl_context *ctx, struct gl_renderbuffer *rb)
{
	struct nouveau_surface *s = &to_nouveau_renderbuffer(rb)->surface;

	nouveau_surface_ref(NULL, s);
	_mesa_delete_renderbuffer(ctx, rb);
}

static struct gl_renderbuffer *
nouveau_renderbuffer_new(struct gl_context *ctx, GLuint name)
{
	struct gl_renderbuffer *rb;

	rb = (struct gl_renderbuffer *)
		CALLOC_STRUCT(nouveau_renderbuffer);
	if (!rb)
		return NULL;

	_mesa_init_renderbuffer(rb, name);

	rb->AllocStorage = nouveau_renderbuffer_storage;
	rb->Delete = nouveau_renderbuffer_del;

	return rb;
}

static void
nouveau_renderbuffer_map(struct gl_context *ctx,
			 struct gl_renderbuffer *rb,
			 GLuint x, GLuint y, GLuint w, GLuint h,
			 GLbitfield mode,
			 GLubyte **out_map,
			 GLint *out_stride)
{
	struct nouveau_surface *s = &to_nouveau_renderbuffer(rb)->surface;
	GLubyte *map;
	int stride;
	int flags = 0;

	if (mode & GL_MAP_READ_BIT)
		flags |= NOUVEAU_BO_RD;
	if (mode & GL_MAP_WRITE_BIT)
		flags |= NOUVEAU_BO_WR;

	nouveau_bo_map(s->bo, flags, context_client(ctx));

	map = s->bo->map;
	stride = s->pitch;

	if (rb->Name == 0) {
		map += stride * (rb->Height - 1);
		stride = -stride;
	}

	map += x * s->cpp;
	map += (int)y * stride;

	*out_map = map;
	*out_stride = stride;
}

static void
nouveau_renderbuffer_unmap(struct gl_context *ctx,
			   struct gl_renderbuffer *rb)
{
}

static GLboolean
nouveau_renderbuffer_dri_storage(struct gl_context *ctx, struct gl_renderbuffer *rb,
				 GLenum internalFormat,
				 GLuint width, GLuint height)
{
	if (!set_renderbuffer_format(rb, internalFormat))
		return GL_FALSE;

	rb->Width = width;
	rb->Height = height;

	return GL_TRUE;
}

struct gl_renderbuffer *
nouveau_renderbuffer_dri_new(GLenum format, __DRIdrawable *drawable)
{
	struct gl_renderbuffer *rb;

	rb = nouveau_renderbuffer_new(NULL, 0);
	if (!rb)
		return NULL;

	rb->AllocStorage = nouveau_renderbuffer_dri_storage;

	if (!set_renderbuffer_format(rb, format)) {
		nouveau_renderbuffer_del(NULL, rb);
		return NULL;
	}

	return rb;
}

static struct gl_framebuffer *
nouveau_framebuffer_new(struct gl_context *ctx, GLuint name)
{
	struct nouveau_framebuffer *nfb;

	nfb = CALLOC_STRUCT(nouveau_framebuffer);
	if (!nfb)
		return NULL;

	_mesa_initialize_user_framebuffer(&nfb->base, name);

	return &nfb->base;
}

struct gl_framebuffer *
nouveau_framebuffer_dri_new(const struct gl_config *visual)
{
	struct nouveau_framebuffer *nfb;

	nfb = CALLOC_STRUCT(nouveau_framebuffer);
	if (!nfb)
		return NULL;

	_mesa_initialize_window_framebuffer(&nfb->base, visual);
	nfb->need_front = !visual->doubleBufferMode;

	return &nfb->base;
}

static void
nouveau_bind_framebuffer(struct gl_context *ctx, GLenum target,
			 struct gl_framebuffer *dfb,
			 struct gl_framebuffer *rfb)
{
	context_dirty(ctx, FRAMEBUFFER);
}

static void
nouveau_framebuffer_renderbuffer(struct gl_context *ctx, struct gl_framebuffer *fb,
				 GLenum attachment, struct gl_renderbuffer *rb)
{
	_mesa_framebuffer_renderbuffer(ctx, fb, attachment, rb);

	context_dirty(ctx, FRAMEBUFFER);
}

static void
nouveau_render_texture(struct gl_context *ctx, struct gl_framebuffer *fb,
		       struct gl_renderbuffer_attachment *att)
{
	struct gl_renderbuffer *rb = att->Renderbuffer;
	struct gl_texture_image *ti = rb->TexImage;

	/* Update the renderbuffer fields from the texture. */
	nouveau_surface_ref(&to_nouveau_teximage(ti)->surface,
			    &to_nouveau_renderbuffer(rb)->surface);

	context_dirty(ctx, FRAMEBUFFER);
}

static void
nouveau_finish_render_texture(struct gl_context *ctx,
			      struct gl_renderbuffer *rb)
{
	if (rb && rb->TexImage)
		texture_dirty(rb->TexImage->TexObject);
}

static int
validate_format_bpp(mesa_format format)
{
	switch (format) {
	case MESA_FORMAT_B8G8R8X8_UNORM:
	case MESA_FORMAT_B8G8R8A8_UNORM:
	case MESA_FORMAT_S8_UINT_Z24_UNORM:
		return 32;
	case MESA_FORMAT_B5G6R5_UNORM:
	case MESA_FORMAT_Z_UNORM16:
		return 16;
	default:
		return 0;
	}
}

static void
nouveau_check_framebuffer_complete(struct gl_context *ctx,
				   struct gl_framebuffer *fb)
{
	struct gl_renderbuffer_attachment *color =
		&fb->Attachment[BUFFER_COLOR0];
	struct gl_renderbuffer_attachment *depth =
		&fb->Attachment[BUFFER_DEPTH];
	int color_bpp = 0, zeta_bpp;

	if (color->Type == GL_TEXTURE) {
		color_bpp = validate_format_bpp(
				color->Renderbuffer->TexImage->TexFormat);
		if (!color_bpp)
			goto err;
	}

	if (depth->Type == GL_TEXTURE) {
		zeta_bpp = validate_format_bpp(
				depth->Renderbuffer->TexImage->TexFormat);
		if (!zeta_bpp)
			goto err;
		/* NV04/NV05 requires same bpp-ness for color/zeta */
		if (context_chipset(ctx) < 0x10 &&
		    color_bpp && color_bpp != zeta_bpp)
			goto err;
	}

	return;
err:
	fb->_Status = GL_FRAMEBUFFER_UNSUPPORTED_EXT;
	return;
}

void
nouveau_fbo_functions_init(struct dd_function_table *functions)
{
	functions->NewFramebuffer = nouveau_framebuffer_new;
	functions->NewRenderbuffer = nouveau_renderbuffer_new;
	functions->MapRenderbuffer = nouveau_renderbuffer_map;
	functions->UnmapRenderbuffer = nouveau_renderbuffer_unmap;
	functions->BindFramebuffer = nouveau_bind_framebuffer;
	functions->FramebufferRenderbuffer = nouveau_framebuffer_renderbuffer;
	functions->RenderTexture = nouveau_render_texture;
	functions->FinishRenderTexture = nouveau_finish_render_texture;
	functions->ValidateFramebuffer = nouveau_check_framebuffer_complete;
}
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d47 1
a47 1
		rb->Format = MESA_FORMAT_XRGB8888;
d53 1
a53 1
		rb->Format = MESA_FORMAT_ARGB8888;
d58 1
a58 1
		rb->Format = MESA_FORMAT_RGB565;
d63 1
a63 1
		rb->Format = MESA_FORMAT_Z16;
d71 1
a71 1
		rb->Format = MESA_FORMAT_Z24_S8;
d268 52
a319 1
	texture_dirty(rb->TexImage->TexObject);
d333 1
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a34 1
#include "main/mfeatures.h"
a47 1
		rb->DataType = GL_UNSIGNED_BYTE;
a53 1
		rb->DataType = GL_UNSIGNED_BYTE;
a58 1
		rb->DataType = GL_UNSIGNED_BYTE;
a63 1
		rb->DataType = GL_UNSIGNED_SHORT;
a71 1
		rb->DataType = GL_UNSIGNED_INT_24_8_EXT;
d104 1
a104 1
nouveau_renderbuffer_del(struct gl_renderbuffer *rb)
d109 1
a109 1
	FREE(rb);
d130 41
d197 1
a197 1
		nouveau_renderbuffer_del(rb);
a249 15
static GLenum
get_tex_format(struct gl_texture_image *ti)
{
	switch (ti->TexFormat) {
	case MESA_FORMAT_ARGB8888:
		return GL_RGBA8;
	case MESA_FORMAT_XRGB8888:
		return GL_RGB8;
	case MESA_FORMAT_RGB565:
		return GL_RGB5;
	default:
		return GL_NONE;
	}
}

d255 1
a255 12
	struct gl_texture_image *ti =
		att->Texture->Image[att->CubeMapFace][att->TextureLevel];

	/* Allocate a renderbuffer object for the texture if we
	 * haven't already done so. */
	if (!rb) {
		rb = nouveau_renderbuffer_new(ctx, ~0);
		assert(rb);

		rb->AllocStorage = NULL;
		_mesa_reference_renderbuffer(&att->Renderbuffer, rb);
	}
a257 3
	set_renderbuffer_format(rb, get_tex_format(ti));
	rb->Width = ti->Width;
	rb->Height = ti->Height;
d266 1
a266 1
			      struct gl_renderbuffer_attachment *att)
d268 1
a268 1
	texture_dirty(att->Texture);
a273 1
#if FEATURE_EXT_framebuffer_object
d276 2
a281 1
#endif
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d35 1
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d70 1
d89 1
a89 1
nouveau_renderbuffer_storage(GLcontext *ctx, struct gl_renderbuffer *rb,
d118 1
a118 1
nouveau_renderbuffer_new(GLcontext *ctx, GLuint name)
d136 1
a136 1
nouveau_renderbuffer_dri_storage(GLcontext *ctx, struct gl_renderbuffer *rb,
d169 1
a169 1
nouveau_framebuffer_new(GLcontext *ctx, GLuint name)
d183 1
a183 1
nouveau_framebuffer_dri_new(const GLvisual *visual)
d192 1
d198 1
a198 1
nouveau_bind_framebuffer(GLcontext *ctx, GLenum target,
d206 1
a206 1
nouveau_framebuffer_renderbuffer(GLcontext *ctx, struct gl_framebuffer *fb,
d225 1
a225 1
		assert(0);
d230 1
a230 1
nouveau_render_texture(GLcontext *ctx, struct gl_framebuffer *fb,
a235 1
	int ret;
d240 1
a240 1
		rb = nouveau_renderbuffer_new(ctx, 0);
d248 1
a248 3
	ret = set_renderbuffer_format(rb, get_tex_format(ti));
	assert(ret);

d258 1
a258 1
nouveau_finish_render_texture(GLcontext *ctx,
a260 3
	struct nouveau_renderbuffer *nrb
		= to_nouveau_renderbuffer(att->Renderbuffer);

a261 1
	nouveau_surface_ref(NULL, &nrb->surface);
d267 1
d274 1
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a69 1
	case GL_DEPTH_COMPONENT:
d88 1
a88 1
nouveau_renderbuffer_storage(struct gl_context *ctx, struct gl_renderbuffer *rb,
d117 1
a117 1
nouveau_renderbuffer_new(struct gl_context *ctx, GLuint name)
d135 1
a135 1
nouveau_renderbuffer_dri_storage(struct gl_context *ctx, struct gl_renderbuffer *rb,
d168 1
a168 1
nouveau_framebuffer_new(struct gl_context *ctx, GLuint name)
d182 1
a182 1
nouveau_framebuffer_dri_new(const struct gl_config *visual)
a190 1
	nfb->need_front = !visual->doubleBufferMode;
d196 1
a196 1
nouveau_bind_framebuffer(struct gl_context *ctx, GLenum target,
d204 1
a204 1
nouveau_framebuffer_renderbuffer(struct gl_context *ctx, struct gl_framebuffer *fb,
d223 1
a223 1
		return GL_NONE;
d228 1
a228 1
nouveau_render_texture(struct gl_context *ctx, struct gl_framebuffer *fb,
d234 1
d239 1
a239 1
		rb = nouveau_renderbuffer_new(ctx, ~0);
d247 3
a249 1
	set_renderbuffer_format(rb, get_tex_format(ti));
d259 1
a259 1
nouveau_finish_render_texture(struct gl_context *ctx,
d262 3
d266 1
a271 1
#if FEATURE_EXT_framebuffer_object
a277 1
#endif
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d48 1
d55 1
d61 1
d67 1
d76 1
d109 1
a109 1
nouveau_renderbuffer_del(struct gl_context *ctx, struct gl_renderbuffer *rb)
d114 1
a114 1
	_mesa_delete_renderbuffer(ctx, rb);
a134 41
static void
nouveau_renderbuffer_map(struct gl_context *ctx,
			 struct gl_renderbuffer *rb,
			 GLuint x, GLuint y, GLuint w, GLuint h,
			 GLbitfield mode,
			 GLubyte **out_map,
			 GLint *out_stride)
{
	struct nouveau_surface *s = &to_nouveau_renderbuffer(rb)->surface;
	GLubyte *map;
	int stride;
	int flags = 0;

	if (mode & GL_MAP_READ_BIT)
		flags |= NOUVEAU_BO_RD;
	if (mode & GL_MAP_WRITE_BIT)
		flags |= NOUVEAU_BO_WR;

	nouveau_bo_map(s->bo, flags, context_client(ctx));

	map = s->bo->map;
	stride = s->pitch;

	if (rb->Name == 0) {
		map += stride * (rb->Height - 1);
		stride = -stride;
	}

	map += x * s->cpp;
	map += (int)y * stride;

	*out_map = map;
	*out_stride = stride;
}

static void
nouveau_renderbuffer_unmap(struct gl_context *ctx,
			   struct gl_renderbuffer *rb)
{
}

d161 1
a161 1
		nouveau_renderbuffer_del(NULL, rb);
d214 15
d234 12
a245 1
	struct gl_texture_image *ti = rb->TexImage;
d248 3
d259 1
a259 1
			      struct gl_renderbuffer *rb)
d261 1
a261 1
	texture_dirty(rb->TexImage->TexObject);
d267 1
a269 2
	functions->MapRenderbuffer = nouveau_renderbuffer_map;
	functions->UnmapRenderbuffer = nouveau_renderbuffer_unmap;
d274 1
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d47 1
a47 1
		rb->Format = MESA_FORMAT_B8G8R8X8_UNORM;
d53 1
a53 1
		rb->Format = MESA_FORMAT_B8G8R8A8_UNORM;
d58 1
a58 1
		rb->Format = MESA_FORMAT_B5G6R5_UNORM;
d63 1
a63 1
		rb->Format = MESA_FORMAT_Z_UNORM16;
d71 1
a71 1
		rb->Format = MESA_FORMAT_S8_UINT_Z24_UNORM;
d268 1
a268 52
	if (rb && rb->TexImage)
		texture_dirty(rb->TexImage->TexObject);
}

static int
validate_format_bpp(mesa_format format)
{
	switch (format) {
	case MESA_FORMAT_B8G8R8X8_UNORM:
	case MESA_FORMAT_B8G8R8A8_UNORM:
	case MESA_FORMAT_S8_UINT_Z24_UNORM:
		return 32;
	case MESA_FORMAT_B5G6R5_UNORM:
	case MESA_FORMAT_Z_UNORM16:
		return 16;
	default:
		return 0;
	}
}

static void
nouveau_check_framebuffer_complete(struct gl_context *ctx,
				   struct gl_framebuffer *fb)
{
	struct gl_renderbuffer_attachment *color =
		&fb->Attachment[BUFFER_COLOR0];
	struct gl_renderbuffer_attachment *depth =
		&fb->Attachment[BUFFER_DEPTH];
	int color_bpp = 0, zeta_bpp;

	if (color->Type == GL_TEXTURE) {
		color_bpp = validate_format_bpp(
				color->Renderbuffer->TexImage->TexFormat);
		if (!color_bpp)
			goto err;
	}

	if (depth->Type == GL_TEXTURE) {
		zeta_bpp = validate_format_bpp(
				depth->Renderbuffer->TexImage->TexFormat);
		if (!zeta_bpp)
			goto err;
		/* NV04/NV05 requires same bpp-ness for color/zeta */
		if (context_chipset(ctx) < 0x10 &&
		    color_bpp && color_bpp != zeta_bpp)
			goto err;
	}

	return;
err:
	fb->_Status = GL_FRAMEBUFFER_UNSUPPORTED_EXT;
	return;
a281 1
	functions->ValidateFramebuffer = nouveau_check_framebuffer_complete;
@


